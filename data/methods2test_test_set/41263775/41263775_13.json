{"test_class": {"identifier": "StringMatchesRegexTest", "superclass": "", "interfaces": "", "fields": [], "file": "code/src/test/java/com/googlecode/cqengine/query/simple/StringMatchesRegexTest.java"}, "test_case": {"identifier": "testStringMatchesRegex", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testStringMatchesRegex() {\n        Query<String> query = matchesRegex(selfAttribute(String.class), \"f.*\");\n        IndexedCollection<String> indexedCollection = new ConcurrentIndexedCollection<String>();\n        indexedCollection.addAll(asList(\"foo1\", \"foo2\", \"bar\", \"baz\", \"car\"));\n        IndexedCollection<String> collection = indexedCollection;\n        ResultSet<String> results = collection.retrieve(query);\n        assertEquals(2, results.size());\n        assertTrue(results.iterator().hasNext());\n    }", "signature": "void testStringMatchesRegex()", "full_signature": "@Test public void testStringMatchesRegex()", "class_method_signature": "StringMatchesRegexTest.testStringMatchesRegex()", "testcase": true, "constructor": false, "invocations": ["matchesRegex", "selfAttribute", "addAll", "asList", "retrieve", "assertEquals", "size", "assertTrue", "hasNext", "iterator"]}, "focal_class": {"identifier": "StringMatchesRegex", "superclass": "extends SimpleQuery<O, A>", "interfaces": "", "fields": [{"original_string": "private final Pattern regexPattern;", "modifier": "private final", "type": "Pattern", "declarator": "regexPattern", "var_name": "regexPattern"}], "methods": [{"identifier": "StringMatchesRegex", "parameters": "(Attribute<O, A> attribute, Pattern regexPattern)", "modifiers": "public", "return": "", "signature": " StringMatchesRegex(Attribute<O, A> attribute, Pattern regexPattern)", "full_signature": "public  StringMatchesRegex(Attribute<O, A> attribute, Pattern regexPattern)", "class_method_signature": "StringMatchesRegex.StringMatchesRegex(Attribute<O, A> attribute, Pattern regexPattern)", "testcase": false, "constructor": true}, {"identifier": "matchesSimpleAttribute", "parameters": "(SimpleAttribute<O, A> attribute, O object, QueryOptions queryOptions)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean matchesSimpleAttribute(SimpleAttribute<O, A> attribute, O object, QueryOptions queryOptions)", "full_signature": "@Override protected boolean matchesSimpleAttribute(SimpleAttribute<O, A> attribute, O object, QueryOptions queryOptions)", "class_method_signature": "StringMatchesRegex.matchesSimpleAttribute(SimpleAttribute<O, A> attribute, O object, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "matchesNonSimpleAttribute", "parameters": "(Attribute<O, A> attribute, O object, QueryOptions queryOptions)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean matchesNonSimpleAttribute(Attribute<O, A> attribute, O object, QueryOptions queryOptions)", "full_signature": "@Override protected boolean matchesNonSimpleAttribute(Attribute<O, A> attribute, O object, QueryOptions queryOptions)", "class_method_signature": "StringMatchesRegex.matchesNonSimpleAttribute(Attribute<O, A> attribute, O object, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "matchesValue", "parameters": "(A aValue, QueryOptions queryOptions)", "modifiers": "@SuppressWarnings(\"unused\") public", "return": "boolean", "signature": "boolean matchesValue(A aValue, QueryOptions queryOptions)", "full_signature": "@SuppressWarnings(\"unused\") public boolean matchesValue(A aValue, QueryOptions queryOptions)", "class_method_signature": "StringMatchesRegex.matchesValue(A aValue, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "StringMatchesRegex.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "calcHashCode", "parameters": "()", "modifiers": "@Override protected", "return": "int", "signature": "int calcHashCode()", "full_signature": "@Override protected int calcHashCode()", "class_method_signature": "StringMatchesRegex.calcHashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "StringMatchesRegex.toString()", "testcase": false, "constructor": false}], "file": "code/src/main/java/com/googlecode/cqengine/query/simple/StringMatchesRegex.java"}, "focal_method": {"identifier": "StringMatchesRegex", "parameters": "(Attribute<O, A> attribute, Pattern regexPattern)", "modifiers": "public", "return": "", "body": "public StringMatchesRegex(Attribute<O, A> attribute, Pattern regexPattern) {\n        super(attribute);\n        this.regexPattern = checkQueryValueNotNull(regexPattern);\n    }", "signature": " StringMatchesRegex(Attribute<O, A> attribute, Pattern regexPattern)", "full_signature": "public  StringMatchesRegex(Attribute<O, A> attribute, Pattern regexPattern)", "class_method_signature": "StringMatchesRegex.StringMatchesRegex(Attribute<O, A> attribute, Pattern regexPattern)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 41263775, "url": "https://github.com/npgall/cqengine", "language": "Java", "is_fork": false, "fork_count": 180, "stargazer_count": 1194, "size": 11701, "license": "licensed"}}