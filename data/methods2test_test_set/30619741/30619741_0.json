{"test_class": {"identifier": "CamelMicroserviceProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static CamelContext camelContext = new DefaultCamelContext();", "modifier": "static", "type": "CamelContext", "declarator": "camelContext = new DefaultCamelContext()", "var_name": "camelContext"}, {"original_string": "private static final Semaphore semaphore = new Semaphore(0);", "modifier": "private static final", "type": "Semaphore", "declarator": "semaphore = new Semaphore(0)", "var_name": "semaphore"}], "file": "camel-microservice-provider/src/test/java/io/silverware/microservices/providers/camel/CamelMicroserviceProviderTest.java"}, "test_case": {"identifier": "camelMicroserviceProviderTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void camelMicroserviceProviderTest() throws Exception {\n      final String message = \"But all the clocks in the city\\n\"\n            + \"   Began to whir and chime:\\n\"\n            + \"\u2018O let not Time deceive you,\\n\"\n            + \"   You cannot conquer Time.\";\n      final BootUtil bootUtil = new BootUtil();\n      final Thread platform = bootUtil.getMicroservicePlatform(this.getClass().getPackage().getName());\n      platform.start();\n\n      Assert.assertTrue(semaphore.tryAcquire(1, TimeUnit.MINUTES), \"Timed-out while waiting for the camel route deployment.\"); // wait for the route to be deployed\n\n      CamelContext context = (CamelContext) bootUtil.getContext().getProperties().get(CamelMicroserviceProvider.CAMEL_CONTEXT);\n      Endpoint endpoint = context.getEndpoint(\"direct:response\");\n      final StringBuilder response = new StringBuilder();\n      endpoint.createConsumer(new Processor() {\n         @Override\n         public void process(final Exchange exchange) throws Exception {\n            response.append(exchange.getIn().getBody().toString());\n         }\n      }).start();\n\n      ProducerTemplate template = context.createProducerTemplate();\n      template.sendBody(\"direct:test\", message);\n\n      Assert.assertEquals(response.toString(), message);\n\n      platform.interrupt();\n      platform.join();\n   }", "signature": "void camelMicroserviceProviderTest()", "full_signature": "@Test public void camelMicroserviceProviderTest()", "class_method_signature": "CamelMicroserviceProviderTest.camelMicroserviceProviderTest()", "testcase": true, "constructor": false, "invocations": ["getMicroservicePlatform", "getName", "getPackage", "getClass", "start", "assertTrue", "tryAcquire", "get", "getProperties", "getContext", "getEndpoint", "start", "createConsumer", "append", "toString", "getBody", "getIn", "createProducerTemplate", "sendBody", "assertEquals", "toString", "interrupt", "join"]}, "focal_class": {"identifier": "CamelMicroserviceProvider", "superclass": "", "interfaces": "implements MicroserviceProvider, CamelSilverService", "fields": [{"original_string": "private static final Logger log = LogManager.getLogger(CamelMicroserviceProvider.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LogManager.getLogger(CamelMicroserviceProvider.class)", "var_name": "log"}, {"original_string": "private Context context;", "modifier": "private", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "private CamelContext camelContext;", "modifier": "private", "type": "CamelContext", "declarator": "camelContext", "var_name": "camelContext"}, {"original_string": "private final List<RouteBuilder> routes = new ArrayList<>();", "modifier": "private final", "type": "List<RouteBuilder>", "declarator": "routes = new ArrayList<>()", "var_name": "routes"}, {"original_string": "private Set<String> routeResources;", "modifier": "private", "type": "Set<String>", "declarator": "routeResources", "var_name": "routeResources"}, {"original_string": "private final DeployStats stats = new DeployStats();", "modifier": "private final", "type": "DeployStats", "declarator": "stats = new DeployStats()", "var_name": "stats"}], "methods": [{"identifier": "createCamelContext", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void createCamelContext()", "full_signature": "private void createCamelContext()", "class_method_signature": "CamelMicroserviceProvider.createCamelContext()", "testcase": false, "constructor": false}, {"identifier": "loadRoutesFromClasses", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void loadRoutesFromClasses()", "full_signature": "private void loadRoutesFromClasses()", "class_method_signature": "CamelMicroserviceProvider.loadRoutesFromClasses()", "testcase": false, "constructor": false}, {"identifier": "loadRoutesFromXml", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void loadRoutesFromXml()", "full_signature": "private void loadRoutesFromXml()", "class_method_signature": "CamelMicroserviceProvider.loadRoutesFromXml()", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "(final Context context)", "modifiers": "@Override public", "return": "void", "signature": "void initialize(final Context context)", "full_signature": "@Override public void initialize(final Context context)", "class_method_signature": "CamelMicroserviceProvider.initialize(final Context context)", "testcase": false, "constructor": false}, {"identifier": "getContext", "parameters": "()", "modifiers": "@Override public", "return": "Context", "signature": "Context getContext()", "full_signature": "@Override public Context getContext()", "class_method_signature": "CamelMicroserviceProvider.getContext()", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "CamelMicroserviceProvider.run()", "testcase": false, "constructor": false}, {"identifier": "lookupMicroservice", "parameters": "(final MicroserviceMetaData metaData)", "modifiers": "@Override public", "return": "Set<Object>", "signature": "Set<Object> lookupMicroservice(final MicroserviceMetaData metaData)", "full_signature": "@Override public Set<Object> lookupMicroservice(final MicroserviceMetaData metaData)", "class_method_signature": "CamelMicroserviceProvider.lookupMicroservice(final MicroserviceMetaData metaData)", "testcase": false, "constructor": false}], "file": "camel-microservice-provider/src/main/java/io/silverware/microservices/providers/camel/CamelMicroserviceProvider.java"}, "focal_method": {"identifier": "getContext", "parameters": "()", "modifiers": "@Override public", "return": "Context", "body": "@Override\n   public Context getContext() {\n      return context;\n   }", "signature": "Context getContext()", "full_signature": "@Override public Context getContext()", "class_method_signature": "CamelMicroserviceProvider.getContext()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 30619741, "url": "https://github.com/SilverThings/SilverWare", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 21, "size": 3333, "license": "licensed"}}