{"test_class": {"identifier": "SymmetricMatrixTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/tstoolkit/maths/matrices/SymmetricMatrixTest.java"}, "test_case": {"identifier": "testRSolve", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRSolve() {\n        Matrix X = new Matrix(5, 8);\n        X.randomize();\n        Matrix S = SymmetricMatrix.XXt(X);\n        Matrix A = new Matrix(5, 4);\n        A.randomize();\n        Matrix B1 = A.clone();\n        Matrix B2 = Matrix.rsolve(S.subMatrix(), A.subMatrix());\n        SymmetricMatrix.rsolve(S, B1.subMatrix(), true);\n        Matrix D = B1.minus(B2);\n        assertTrue(D.nrm2() < 1e-9);\n    }", "signature": "void testRSolve()", "full_signature": "@Test public void testRSolve()", "class_method_signature": "SymmetricMatrixTest.testRSolve()", "testcase": true, "constructor": false, "invocations": ["randomize", "XXt", "randomize", "clone", "rsolve", "subMatrix", "subMatrix", "rsolve", "subMatrix", "minus", "assertTrue", "nrm2"]}, "focal_class": {"identifier": "SymmetricMatrix", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "fromLower", "parameters": "(final Matrix m)", "modifiers": "public static", "return": "void", "signature": "void fromLower(final Matrix m)", "full_signature": "public static void fromLower(final Matrix m)", "class_method_signature": "SymmetricMatrix.fromLower(final Matrix m)", "testcase": false, "constructor": false}, {"identifier": "fromLower", "parameters": "(final SubMatrix m)", "modifiers": "public static", "return": "void", "signature": "void fromLower(final SubMatrix m)", "full_signature": "public static void fromLower(final SubMatrix m)", "class_method_signature": "SymmetricMatrix.fromLower(final SubMatrix m)", "testcase": false, "constructor": false}, {"identifier": "fromUpper", "parameters": "(final Matrix m)", "modifiers": "public static", "return": "void", "signature": "void fromUpper(final Matrix m)", "full_signature": "public static void fromUpper(final Matrix m)", "class_method_signature": "SymmetricMatrix.fromUpper(final Matrix m)", "testcase": false, "constructor": false}, {"identifier": "fromUpper", "parameters": "(final SubMatrix m)", "modifiers": "public static", "return": "void", "signature": "void fromUpper(final SubMatrix m)", "full_signature": "public static void fromUpper(final SubMatrix m)", "class_method_signature": "SymmetricMatrix.fromUpper(final SubMatrix m)", "testcase": false, "constructor": false}, {"identifier": "inverse", "parameters": "(final Matrix s)", "modifiers": "public static", "return": "Matrix", "signature": "Matrix inverse(final Matrix s)", "full_signature": "public static Matrix inverse(final Matrix s)", "class_method_signature": "SymmetricMatrix.inverse(final Matrix s)", "testcase": false, "constructor": false}, {"identifier": "isDPos", "parameters": "(Matrix m, boolean useM)", "modifiers": "public static", "return": "boolean", "signature": "boolean isDPos(Matrix m, boolean useM)", "full_signature": "public static boolean isDPos(Matrix m, boolean useM)", "class_method_signature": "SymmetricMatrix.isDPos(Matrix m, boolean useM)", "testcase": false, "constructor": false}, {"identifier": "isSymmetric", "parameters": "(Matrix m, double eps)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSymmetric(Matrix m, double eps)", "full_signature": "public static boolean isSymmetric(Matrix m, double eps)", "class_method_signature": "SymmetricMatrix.isSymmetric(Matrix m, double eps)", "testcase": false, "constructor": false}, {"identifier": "lcholesky", "parameters": "(final Matrix m)", "modifiers": "public static", "return": "void", "signature": "void lcholesky(final Matrix m)", "full_signature": "public static void lcholesky(final Matrix m)", "class_method_signature": "SymmetricMatrix.lcholesky(final Matrix m)", "testcase": false, "constructor": false}, {"identifier": "lcholesky", "parameters": "(final Matrix m, double Zero)", "modifiers": "public static", "return": "void", "signature": "void lcholesky(final Matrix m, double Zero)", "full_signature": "public static void lcholesky(final Matrix m, double Zero)", "class_method_signature": "SymmetricMatrix.lcholesky(final Matrix m, double Zero)", "testcase": false, "constructor": false}, {"identifier": "LLt", "parameters": "(final Matrix lower)", "modifiers": "public static", "return": "Matrix", "signature": "Matrix LLt(final Matrix lower)", "full_signature": "public static Matrix LLt(final Matrix lower)", "class_method_signature": "SymmetricMatrix.LLt(final Matrix lower)", "testcase": false, "constructor": false}, {"identifier": "quadraticForm", "parameters": "(final Matrix S, final DataBlock x)", "modifiers": "public static", "return": "double", "signature": "double quadraticForm(final Matrix S, final DataBlock x)", "full_signature": "public static double quadraticForm(final Matrix S, final DataBlock x)", "class_method_signature": "SymmetricMatrix.quadraticForm(final Matrix S, final DataBlock x)", "testcase": false, "constructor": false}, {"identifier": "quadraticForm", "parameters": "(final Matrix s, final double[] x)", "modifiers": "public static", "return": "double", "signature": "double quadraticForm(final Matrix s, final double[] x)", "full_signature": "public static double quadraticForm(final Matrix s, final double[] x)", "class_method_signature": "SymmetricMatrix.quadraticForm(final Matrix s, final double[] x)", "testcase": false, "constructor": false}, {"identifier": "quadraticForm", "parameters": "(final Matrix s, final Matrix x)", "modifiers": "public static", "return": "Matrix", "signature": "Matrix quadraticForm(final Matrix s, final Matrix x)", "full_signature": "public static Matrix quadraticForm(final Matrix s, final Matrix x)", "class_method_signature": "SymmetricMatrix.quadraticForm(final Matrix s, final Matrix x)", "testcase": false, "constructor": false}, {"identifier": "quadraticForm", "parameters": "(final SubMatrix M, final DataBlock x)", "modifiers": "public static", "return": "double", "signature": "double quadraticForm(final SubMatrix M, final DataBlock x)", "full_signature": "public static double quadraticForm(final SubMatrix M, final DataBlock x)", "class_method_signature": "SymmetricMatrix.quadraticForm(final SubMatrix M, final DataBlock x)", "testcase": false, "constructor": false}, {"identifier": "quadraticForm", "parameters": "(final SubMatrix s, final SubMatrix x)", "modifiers": "public static", "return": "Matrix", "signature": "Matrix quadraticForm(final SubMatrix s, final SubMatrix x)", "full_signature": "public static Matrix quadraticForm(final SubMatrix s, final SubMatrix x)", "class_method_signature": "SymmetricMatrix.quadraticForm(final SubMatrix s, final SubMatrix x)", "testcase": false, "constructor": false}, {"identifier": "quadraticForm", "parameters": "(final SubMatrix s, final SubMatrix x,\n            final SubMatrix xtsx)", "modifiers": "public static", "return": "void", "signature": "void quadraticForm(final SubMatrix s, final SubMatrix x,\n            final SubMatrix xtsx)", "full_signature": "public static void quadraticForm(final SubMatrix s, final SubMatrix x,\n            final SubMatrix xtsx)", "class_method_signature": "SymmetricMatrix.quadraticForm(final SubMatrix s, final SubMatrix x,\n            final SubMatrix xtsx)", "testcase": false, "constructor": false}, {"identifier": "quadraticFormT", "parameters": "(final Matrix s, final Matrix x)", "modifiers": "public static", "return": "Matrix", "signature": "Matrix quadraticFormT(final Matrix s, final Matrix x)", "full_signature": "public static Matrix quadraticFormT(final Matrix s, final Matrix x)", "class_method_signature": "SymmetricMatrix.quadraticFormT(final Matrix s, final Matrix x)", "testcase": false, "constructor": false}, {"identifier": "quadraticFormT", "parameters": "(final SubMatrix s, final SubMatrix x)", "modifiers": "public static", "return": "Matrix", "signature": "Matrix quadraticFormT(final SubMatrix s, final SubMatrix x)", "full_signature": "public static Matrix quadraticFormT(final SubMatrix s, final SubMatrix x)", "class_method_signature": "SymmetricMatrix.quadraticFormT(final SubMatrix s, final SubMatrix x)", "testcase": false, "constructor": false}, {"identifier": "quadraticFormT", "parameters": "(final SubMatrix s, final SubMatrix x,\n            final SubMatrix xsxt)", "modifiers": "public static", "return": "void", "signature": "void quadraticFormT(final SubMatrix s, final SubMatrix x,\n            final SubMatrix xsxt)", "full_signature": "public static void quadraticFormT(final SubMatrix s, final SubMatrix x,\n            final SubMatrix xsxt)", "class_method_signature": "SymmetricMatrix.quadraticFormT(final SubMatrix s, final SubMatrix x,\n            final SubMatrix xsxt)", "testcase": false, "constructor": false}, {"identifier": "rcumul", "parameters": "(Matrix m)", "modifiers": "public static", "return": "void", "signature": "void rcumul(Matrix m)", "full_signature": "public static void rcumul(Matrix m)", "class_method_signature": "SymmetricMatrix.rcumul(Matrix m)", "testcase": false, "constructor": false}, {"identifier": "rcumul", "parameters": "(Matrix m, double delta)", "modifiers": "public static", "return": "void", "signature": "void rcumul(Matrix m, double delta)", "full_signature": "public static void rcumul(Matrix m, double delta)", "class_method_signature": "SymmetricMatrix.rcumul(Matrix m, double delta)", "testcase": false, "constructor": false}, {"identifier": "rcumul", "parameters": "(Matrix m, double delta, int lag)", "modifiers": "public static", "return": "void", "signature": "void rcumul(Matrix m, double delta, int lag)", "full_signature": "public static void rcumul(Matrix m, double delta, int lag)", "class_method_signature": "SymmetricMatrix.rcumul(Matrix m, double delta, int lag)", "testcase": false, "constructor": false}, {"identifier": "rcumul", "parameters": "(Matrix m, int lag)", "modifiers": "public static", "return": "void", "signature": "void rcumul(Matrix m, int lag)", "full_signature": "public static void rcumul(Matrix m, int lag)", "class_method_signature": "SymmetricMatrix.rcumul(Matrix m, int lag)", "testcase": false, "constructor": false}, {"identifier": "reinforceSymmetry", "parameters": "(final Matrix m)", "modifiers": "public static", "return": "void", "signature": "void reinforceSymmetry(final Matrix m)", "full_signature": "public static void reinforceSymmetry(final Matrix m)", "class_method_signature": "SymmetricMatrix.reinforceSymmetry(final Matrix m)", "testcase": false, "constructor": false}, {"identifier": "reinforceSymmetry", "parameters": "(final SubMatrix m)", "modifiers": "public static", "return": "void", "signature": "void reinforceSymmetry(final SubMatrix m)", "full_signature": "public static void reinforceSymmetry(final SubMatrix m)", "class_method_signature": "SymmetricMatrix.reinforceSymmetry(final SubMatrix m)", "testcase": false, "constructor": false}, {"identifier": "ucholesky", "parameters": "(final Matrix s)", "modifiers": "public static", "return": "void", "signature": "void ucholesky(final Matrix s)", "full_signature": "public static void ucholesky(final Matrix s)", "class_method_signature": "SymmetricMatrix.ucholesky(final Matrix s)", "testcase": false, "constructor": false}, {"identifier": "UtU", "parameters": "(final Matrix upper)", "modifiers": "public static", "return": "Matrix", "signature": "Matrix UtU(final Matrix upper)", "full_signature": "public static Matrix UtU(final Matrix upper)", "class_method_signature": "SymmetricMatrix.UtU(final Matrix upper)", "testcase": false, "constructor": false}, {"identifier": "XpXt", "parameters": "(final Matrix x)", "modifiers": "public static", "return": "Matrix", "signature": "Matrix XpXt(final Matrix x)", "full_signature": "public static Matrix XpXt(final Matrix x)", "class_method_signature": "SymmetricMatrix.XpXt(final Matrix x)", "testcase": false, "constructor": false}, {"identifier": "XpXt", "parameters": "(final SubMatrix m, final SubMatrix o)", "modifiers": "public static", "return": "void", "signature": "void XpXt(final SubMatrix m, final SubMatrix o)", "full_signature": "public static void XpXt(final SubMatrix m, final SubMatrix o)", "class_method_signature": "SymmetricMatrix.XpXt(final SubMatrix m, final SubMatrix o)", "testcase": false, "constructor": false}, {"identifier": "XtX", "parameters": "(final Matrix x)", "modifiers": "public static", "return": "Matrix", "signature": "Matrix XtX(final Matrix x)", "full_signature": "public static Matrix XtX(final Matrix x)", "class_method_signature": "SymmetricMatrix.XtX(final Matrix x)", "testcase": false, "constructor": false}, {"identifier": "XtX", "parameters": "(final SubMatrix x, final SubMatrix m)", "modifiers": "public static", "return": "void", "signature": "void XtX(final SubMatrix x, final SubMatrix m)", "full_signature": "public static void XtX(final SubMatrix x, final SubMatrix m)", "class_method_signature": "SymmetricMatrix.XtX(final SubMatrix x, final SubMatrix m)", "testcase": false, "constructor": false}, {"identifier": "XXt", "parameters": "(final Matrix x)", "modifiers": "public static", "return": "Matrix", "signature": "Matrix XXt(final Matrix x)", "full_signature": "public static Matrix XXt(final Matrix x)", "class_method_signature": "SymmetricMatrix.XXt(final Matrix x)", "testcase": false, "constructor": false}, {"identifier": "XXt", "parameters": "(final SubMatrix x, final SubMatrix m)", "modifiers": "public static", "return": "void", "signature": "void XXt(final SubMatrix x, final SubMatrix m)", "full_signature": "public static void XXt(final SubMatrix x, final SubMatrix m)", "class_method_signature": "SymmetricMatrix.XXt(final SubMatrix x, final SubMatrix m)", "testcase": false, "constructor": false}, {"identifier": "addXaXt", "parameters": "(Matrix S, double a, DataBlock x)", "modifiers": "public static", "return": "void", "signature": "void addXaXt(Matrix S, double a, DataBlock x)", "full_signature": "public static void addXaXt(Matrix S, double a, DataBlock x)", "class_method_signature": "SymmetricMatrix.addXaXt(Matrix S, double a, DataBlock x)", "testcase": false, "constructor": false}, {"identifier": "rsolve", "parameters": "(Matrix S, SubMatrix B, boolean clone)", "modifiers": "public static", "return": "void", "signature": "void rsolve(Matrix S, SubMatrix B, boolean clone)", "full_signature": "public static void rsolve(Matrix S, SubMatrix B, boolean clone)", "class_method_signature": "SymmetricMatrix.rsolve(Matrix S, SubMatrix B, boolean clone)", "testcase": false, "constructor": false}, {"identifier": "lsolve", "parameters": "(Matrix S, SubMatrix B, boolean clone)", "modifiers": "public static", "return": "void", "signature": "void lsolve(Matrix S, SubMatrix B, boolean clone)", "full_signature": "public static void lsolve(Matrix S, SubMatrix B, boolean clone)", "class_method_signature": "SymmetricMatrix.lsolve(Matrix S, SubMatrix B, boolean clone)", "testcase": false, "constructor": false}, {"identifier": "solve", "parameters": "(Matrix S, DataBlock b, boolean clone)", "modifiers": "public static", "return": "void", "signature": "void solve(Matrix S, DataBlock b, boolean clone)", "full_signature": "public static void solve(Matrix S, DataBlock b, boolean clone)", "class_method_signature": "SymmetricMatrix.solve(Matrix S, DataBlock b, boolean clone)", "testcase": false, "constructor": false}, {"identifier": "rsolve", "parameters": "(Matrix S, DataBlock b, boolean clone)", "modifiers": "public static", "return": "void", "signature": "void rsolve(Matrix S, DataBlock b, boolean clone)", "full_signature": "public static void rsolve(Matrix S, DataBlock b, boolean clone)", "class_method_signature": "SymmetricMatrix.rsolve(Matrix S, DataBlock b, boolean clone)", "testcase": false, "constructor": false}, {"identifier": "CCt", "parameters": "(DataBlock x)", "modifiers": "public static", "return": "Matrix", "signature": "Matrix CCt(DataBlock x)", "full_signature": "public static Matrix CCt(DataBlock x)", "class_method_signature": "SymmetricMatrix.CCt(DataBlock x)", "testcase": false, "constructor": false}, {"identifier": "SymmetricMatrix", "parameters": "()", "modifiers": "private", "return": "", "signature": " SymmetricMatrix()", "full_signature": "private  SymmetricMatrix()", "class_method_signature": "SymmetricMatrix.SymmetricMatrix()", "testcase": false, "constructor": true}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/maths/matrices/SymmetricMatrix.java"}, "focal_method": {"identifier": "rsolve", "parameters": "(Matrix S, SubMatrix B, boolean clone)", "modifiers": "public static", "return": "void", "body": "public static void rsolve(Matrix S, SubMatrix B, boolean clone) {\n        Matrix Q = S;\n        if (clone) {\n            Q = Q.clone();\n        }\n        lcholesky(Q);\n        // LL'X = B\n        // LY = B\n        LowerTriangularMatrix.rsolve(Q, B);\n        // L'X = Y\n        // X'L = Y'\n        LowerTriangularMatrix.lsolve(Q, B.transpose());\n    }", "signature": "void rsolve(Matrix S, SubMatrix B, boolean clone)", "full_signature": "public static void rsolve(Matrix S, SubMatrix B, boolean clone)", "class_method_signature": "SymmetricMatrix.rsolve(Matrix S, SubMatrix B, boolean clone)", "testcase": false, "constructor": false, "invocations": ["clone", "lcholesky", "rsolve", "lsolve", "transpose"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}