{"test_class": {"identifier": "HexUtilsTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [{"original_string": "private String[] testcase;", "modifier": "private", "type": "String[]", "declarator": "testcase", "var_name": "testcase"}], "file": "core/util/src/test/java/hera/util/HexUtilsTest.java"}, "test_case": {"identifier": "testDecode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testDecode() throws Exception {\n    assertArrayEquals(\n        new byte[] {\n            (byte) 0xE2, (byte) 0x08, (byte) 0xDF, (byte) 0x08, (byte) 0x3F, (byte) 0x5D,\n            (byte) 0x68, (byte) 0x1D,\n            (byte) 0x3B, (byte) 0x89, (byte) 0x50, (byte) 0x69, (byte) 0xC6, (byte) 0xD9,\n            (byte) 0x53, (byte) 0x65,\n            (byte) 0x3C, (byte) 0x8E, (byte) 0x79, (byte) 0xA1, (byte) 0xCA, (byte) 0x94,\n            (byte) 0xF7, (byte) 0x94,\n            (byte) 0x06, (byte) 0xD1, (byte) 0x81, (byte) 0x41, (byte) 0xCE, (byte) 0x73,\n            (byte) 0x95, (byte) 0x36,\n            (byte) 0xab, (byte) 0xcd, (byte) 0xef\n        },\n        decode(\"E208DF083F5D681D3B895069C6D953653C8E79A1CA94F79406D18141CE739536abcdef\"));\n\n  }", "signature": "void testDecode()", "full_signature": "@Test public void testDecode()", "class_method_signature": "HexUtilsTest.testDecode()", "testcase": true, "constructor": false, "invocations": ["assertArrayEquals", "decode"]}, "focal_class": {"identifier": "HexUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final char CONTROL_CHARS_SHOWER = '.';", "modifier": "protected static final", "type": "char", "declarator": "CONTROL_CHARS_SHOWER = '.'", "var_name": "CONTROL_CHARS_SHOWER"}, {"original_string": "protected static final char[] HEXA_CHARS_UPPER =\n      new char[] {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};", "modifier": "protected static final", "type": "char[]", "declarator": "HEXA_CHARS_UPPER =\n      new char[] {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}", "var_name": "HEXA_CHARS_UPPER"}, {"original_string": "protected static final char[] HEXA_CHARS_LOWER =\n      new char[] {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};", "modifier": "protected static final", "type": "char[]", "declarator": "HEXA_CHARS_LOWER =\n      new char[] {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'}", "var_name": "HEXA_CHARS_LOWER"}, {"original_string": "protected static final int N_INT_BY_BYTE = 4;", "modifier": "protected static final", "type": "int", "declarator": "N_INT_BY_BYTE = 4", "var_name": "N_INT_BY_BYTE"}, {"original_string": "protected static final int WIDTH_PER_LINE = 32;", "modifier": "protected static final", "type": "int", "declarator": "WIDTH_PER_LINE = 32", "var_name": "WIDTH_PER_LINE"}, {"original_string": "protected static final char TWO_BYTES_CHARS_SHOWER = '?';", "modifier": "protected static final", "type": "char", "declarator": "TWO_BYTES_CHARS_SHOWER = '?'", "var_name": "TWO_BYTES_CHARS_SHOWER"}], "methods": [{"identifier": "appendHexa", "parameters": "(final StringBuilder buffer, final int ch,\n      final char[] hexChars)", "modifiers": "protected static", "return": "void", "signature": "void appendHexa(final StringBuilder buffer, final int ch,\n      final char[] hexChars)", "full_signature": "protected static void appendHexa(final StringBuilder buffer, final int ch,\n      final char[] hexChars)", "class_method_signature": "HexUtils.appendHexa(final StringBuilder buffer, final int ch,\n      final char[] hexChars)", "testcase": false, "constructor": false}, {"identifier": "appendHexa", "parameters": "(final StringBuilder buffer, final byte[] bytes,\n      final char[] hexChars)", "modifiers": "protected static", "return": "void", "signature": "void appendHexa(final StringBuilder buffer, final byte[] bytes,\n      final char[] hexChars)", "full_signature": "protected static void appendHexa(final StringBuilder buffer, final byte[] bytes,\n      final char[] hexChars)", "class_method_signature": "HexUtils.appendHexa(final StringBuilder buffer, final byte[] bytes,\n      final char[] hexChars)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(final byte[] bytes)", "modifiers": "public static", "return": "String", "signature": "String encode(final byte[] bytes)", "full_signature": "public static String encode(final byte[] bytes)", "class_method_signature": "HexUtils.encode(final byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "encodeLower", "parameters": "(final byte[] bytes)", "modifiers": "public static", "return": "String", "signature": "String encodeLower(final byte[] bytes)", "full_signature": "public static String encodeLower(final byte[] bytes)", "class_method_signature": "HexUtils.encodeLower(final byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(final int ch)", "modifiers": "protected static", "return": "int", "signature": "int convert(final int ch)", "full_signature": "protected static int convert(final int ch)", "class_method_signature": "HexUtils.convert(final int ch)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(final String str)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] decode(final String str)", "full_signature": "public static byte[] decode(final String str)", "class_method_signature": "HexUtils.decode(final String str)", "testcase": false, "constructor": false}, {"identifier": "lineEnd", "parameters": "(final StringBuilder hexPart, final StringBuilder textPart,\n      final StringBuilder ret)", "modifiers": "protected static", "return": "void", "signature": "void lineEnd(final StringBuilder hexPart, final StringBuilder textPart,\n      final StringBuilder ret)", "full_signature": "protected static void lineEnd(final StringBuilder hexPart, final StringBuilder textPart,\n      final StringBuilder ret)", "class_method_signature": "HexUtils.lineEnd(final StringBuilder hexPart, final StringBuilder textPart,\n      final StringBuilder ret)", "testcase": false, "constructor": false}, {"identifier": "dump", "parameters": "(final byte[] data)", "modifiers": "public static", "return": "String", "signature": "String dump(final byte[] data)", "full_signature": "public static String dump(final byte[] data)", "class_method_signature": "HexUtils.dump(final byte[] data)", "testcase": false, "constructor": false}, {"identifier": "dump", "parameters": "(final byte[] data, final int offset, final int length)", "modifiers": "public static", "return": "String", "signature": "String dump(final byte[] data, final int offset, final int length)", "full_signature": "public static String dump(final byte[] data, final int offset, final int length)", "class_method_signature": "HexUtils.dump(final byte[] data, final int offset, final int length)", "testcase": false, "constructor": false}, {"identifier": "dump", "parameters": "(final byte[] data, final int offset, final int length,\n      final Writer writer)", "modifiers": "public static", "return": "void", "signature": "void dump(final byte[] data, final int offset, final int length,\n      final Writer writer)", "full_signature": "public static void dump(final byte[] data, final int offset, final int length,\n      final Writer writer)", "class_method_signature": "HexUtils.dump(final byte[] data, final int offset, final int length,\n      final Writer writer)", "testcase": false, "constructor": false}], "file": "core/util/src/main/java/hera/util/HexUtils.java"}, "focal_method": {"identifier": "decode", "parameters": "(final String str)", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] decode(final String str) {\n    final StringReader reader = new StringReader(str);\n    final ByteArrayOutputStream byteOut = new ByteArrayOutputStream();\n    int ch1 = 0;\n    try {\n      while (0 < (ch1 = reader.read())) {\n        int ch2 = reader.read();\n        assertTrue(0 <= ch2);\n        byteOut.write(convert(ch1) << 4 | convert(ch2));\n      }\n      return byteOut.toByteArray();\n    } catch (final IOException e) {\n      throw new IllegalStateException(e);\n    }\n  }", "signature": "byte[] decode(final String str)", "full_signature": "public static byte[] decode(final String str)", "class_method_signature": "HexUtils.decode(final String str)", "testcase": false, "constructor": false, "invocations": ["read", "read", "assertTrue", "write", "convert", "convert", "toByteArray"]}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}