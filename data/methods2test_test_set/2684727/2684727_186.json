{"test_class": {"identifier": "TripDatabaseAdapterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int ID = 15;", "modifier": "private static final", "type": "int", "declarator": "ID = 15", "var_name": "ID"}, {"original_string": "private static final UUID TRIP_UUID = UUID.randomUUID();", "modifier": "private static final", "type": "UUID", "declarator": "TRIP_UUID = UUID.randomUUID()", "var_name": "TRIP_UUID"}, {"original_string": "private static final String NAME = \"Trip\";", "modifier": "private static final", "type": "String", "declarator": "NAME = \"Trip\"", "var_name": "NAME"}, {"original_string": "private static final long START_DATE = 1409703721000L;", "modifier": "private static final", "type": "long", "declarator": "START_DATE = 1409703721000L", "var_name": "START_DATE"}, {"original_string": "private static final long END_DATE = 1409703794000L;", "modifier": "private static final", "type": "long", "declarator": "END_DATE = 1409703794000L", "var_name": "END_DATE"}, {"original_string": "private static final String START_TIMEZONE = TimeZone.getAvailableIDs()[0];", "modifier": "private static final", "type": "String", "declarator": "START_TIMEZONE = TimeZone.getAvailableIDs()[0]", "var_name": "START_TIMEZONE"}, {"original_string": "private static final String END_TIMEZONE = TimeZone.getAvailableIDs()[1];", "modifier": "private static final", "type": "String", "declarator": "END_TIMEZONE = TimeZone.getAvailableIDs()[1]", "var_name": "END_TIMEZONE"}, {"original_string": "private static final String COMMENT = \"Comment\";", "modifier": "private static final", "type": "String", "declarator": "COMMENT = \"Comment\"", "var_name": "COMMENT"}, {"original_string": "private static final String COST_CENTER = \"Cost Center\";", "modifier": "private static final", "type": "String", "declarator": "COST_CENTER = \"Cost Center\"", "var_name": "COST_CENTER"}, {"original_string": "private static final String CURRENCY_CODE = \"USD\";", "modifier": "private static final", "type": "String", "declarator": "CURRENCY_CODE = \"USD\"", "var_name": "CURRENCY_CODE"}, {"original_string": "private static final String USER_PREFERENCES_CURRENCY_CODE = \"EUR\";", "modifier": "private static final", "type": "String", "declarator": "USER_PREFERENCES_CURRENCY_CODE = \"EUR\"", "var_name": "USER_PREFERENCES_CURRENCY_CODE"}, {"original_string": "private static final boolean NAME_HIDDEN_FROM_AUTO_COMPLETE = false;", "modifier": "private static final", "type": "boolean", "declarator": "NAME_HIDDEN_FROM_AUTO_COMPLETE = false", "var_name": "NAME_HIDDEN_FROM_AUTO_COMPLETE"}, {"original_string": "private static final boolean COMMENT_HIDDEN_FROM_AUTO_COMPLETE = false;", "modifier": "private static final", "type": "boolean", "declarator": "COMMENT_HIDDEN_FROM_AUTO_COMPLETE = false", "var_name": "COMMENT_HIDDEN_FROM_AUTO_COMPLETE"}, {"original_string": "private static final boolean COST_CENTER_HIDDEN_FROM_AUTO_COMPLETE = false;", "modifier": "private static final", "type": "boolean", "declarator": "COST_CENTER_HIDDEN_FROM_AUTO_COMPLETE = false", "var_name": "COST_CENTER_HIDDEN_FROM_AUTO_COMPLETE"}, {"original_string": "TripDatabaseAdapter mTripDatabaseAdapter;", "modifier": "", "type": "TripDatabaseAdapter", "declarator": "mTripDatabaseAdapter", "var_name": "mTripDatabaseAdapter"}, {"original_string": "@Mock\n    Trip mTrip;", "modifier": "@Mock", "type": "Trip", "declarator": "mTrip", "var_name": "mTrip"}, {"original_string": "@Mock\n    Cursor mCursor;", "modifier": "@Mock", "type": "Cursor", "declarator": "mCursor", "var_name": "mCursor"}, {"original_string": "@Mock\n    StorageManager mStorageManager;", "modifier": "@Mock", "type": "StorageManager", "declarator": "mStorageManager", "var_name": "mStorageManager"}, {"original_string": "@Mock\n    UserPreferenceManager mPreferences;", "modifier": "@Mock", "type": "UserPreferenceManager", "declarator": "mPreferences", "var_name": "mPreferences"}, {"original_string": "@Mock\n    SyncStateAdapter mSyncStateAdapter;", "modifier": "@Mock", "type": "SyncStateAdapter", "declarator": "mSyncStateAdapter", "var_name": "mSyncStateAdapter"}, {"original_string": "@Mock\n    SyncState mSyncState, mGetSyncState;", "modifier": "@Mock", "type": "SyncState", "declarator": "mSyncState", "var_name": "mSyncState"}, {"original_string": "@Mock\n    AutoCompleteMetadata mAutoCompleteMetadata;", "modifier": "@Mock", "type": "AutoCompleteMetadata", "declarator": "mAutoCompleteMetadata", "var_name": "mAutoCompleteMetadata"}], "file": "app/src/test/java/co/smartreceipts/android/persistence/database/tables/adapters/TripDatabaseAdapterTest.java"}, "test_case": {"identifier": "write", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void write() throws Exception {\n        final String sync = \"sync\";\n        final ContentValues syncValues = new ContentValues();\n        syncValues.put(sync, sync);\n        when(mSyncStateAdapter.write(mSyncState)).thenReturn(syncValues);\n\n        final ContentValues contentValues = mTripDatabaseAdapter.write(mTrip, new DatabaseOperationMetadata(OperationFamilyType.Sync));\n\n        assertEquals(NAME, contentValues.getAsString(\"name\"));\n        assertEquals(START_DATE, (long) contentValues.getAsLong(\"from_date\"));\n        assertEquals(END_DATE, (long) contentValues.getAsLong(\"to_date\"));\n        assertEquals(START_TIMEZONE, contentValues.getAsString(\"from_timezone\"));\n        assertEquals(END_TIMEZONE, contentValues.getAsString(\"to_timezone\"));\n        assertEquals(COMMENT, contentValues.getAsString(\"trips_comment\"));\n        assertEquals(COST_CENTER, contentValues.getAsString(\"trips_cost_center\"));\n        assertEquals(CURRENCY_CODE, contentValues.getAsString(\"trips_default_currency\"));\n        assertEquals(TRIP_UUID.toString(), contentValues.getAsString(\"entity_uuid\"));\n        assertEquals(NAME_HIDDEN_FROM_AUTO_COMPLETE, contentValues.getAsBoolean(\"name_hidden_auto_complete\"));\n        assertEquals(COMMENT_HIDDEN_FROM_AUTO_COMPLETE, contentValues.getAsBoolean(\"comment_hidden_auto_complete\"));\n        assertEquals(COST_CENTER_HIDDEN_FROM_AUTO_COMPLETE, contentValues.getAsBoolean(\"costcenter_hidden_auto_complete\"));\n        assertEquals(sync, contentValues.getAsString(sync));\n        assertFalse(contentValues.containsKey(\"miles_new\"));\n        assertFalse(contentValues.containsKey(\"trips_filters\"));\n        assertFalse(contentValues.containsKey(\"trip_processing_status\"));\n        assertFalse(contentValues.containsKey(\"price\"));\n    }", "signature": "void write()", "full_signature": "@Test public void write()", "class_method_signature": "TripDatabaseAdapterTest.write()", "testcase": true, "constructor": false, "invocations": ["put", "thenReturn", "when", "write", "write", "assertEquals", "getAsString", "assertEquals", "getAsLong", "assertEquals", "getAsLong", "assertEquals", "getAsString", "assertEquals", "getAsString", "assertEquals", "getAsString", "assertEquals", "getAsString", "assertEquals", "getAsString", "assertEquals", "toString", "getAsString", "assertEquals", "getAsBoolean", "assertEquals", "getAsBoolean", "assertEquals", "getAsBoolean", "assertEquals", "getAsString", "assertFalse", "containsKey", "assertFalse", "containsKey", "assertFalse", "containsKey", "assertFalse", "containsKey"]}, "focal_class": {"identifier": "TripDatabaseAdapter", "superclass": "", "interfaces": "implements DatabaseAdapter<Trip>", "fields": [{"original_string": "private final StorageManager storageManager;", "modifier": "private final", "type": "StorageManager", "declarator": "storageManager", "var_name": "storageManager"}, {"original_string": "private final UserPreferenceManager preferences;", "modifier": "private final", "type": "UserPreferenceManager", "declarator": "preferences", "var_name": "preferences"}, {"original_string": "private final SyncStateAdapter syncStateAdapter;", "modifier": "private final", "type": "SyncStateAdapter", "declarator": "syncStateAdapter", "var_name": "syncStateAdapter"}], "methods": [{"identifier": "TripDatabaseAdapter", "parameters": "(@NonNull StorageManager storageManager, @NonNull UserPreferenceManager preferences, @NonNull SyncStateAdapter syncStateAdapter)", "modifiers": "public", "return": "", "signature": " TripDatabaseAdapter(@NonNull StorageManager storageManager, @NonNull UserPreferenceManager preferences, @NonNull SyncStateAdapter syncStateAdapter)", "full_signature": "public  TripDatabaseAdapter(@NonNull StorageManager storageManager, @NonNull UserPreferenceManager preferences, @NonNull SyncStateAdapter syncStateAdapter)", "class_method_signature": "TripDatabaseAdapter.TripDatabaseAdapter(@NonNull StorageManager storageManager, @NonNull UserPreferenceManager preferences, @NonNull SyncStateAdapter syncStateAdapter)", "testcase": false, "constructor": true}, {"identifier": "read", "parameters": "(@NonNull Cursor cursor)", "modifiers": "@Override @NonNull public", "return": "Trip", "signature": "Trip read(@NonNull Cursor cursor)", "full_signature": "@Override @NonNull public Trip read(@NonNull Cursor cursor)", "class_method_signature": "TripDatabaseAdapter.read(@NonNull Cursor cursor)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(@NonNull Trip trip, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "modifiers": "@Override @NonNull public", "return": "ContentValues", "signature": "ContentValues write(@NonNull Trip trip, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "full_signature": "@Override @NonNull public ContentValues write(@NonNull Trip trip, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "class_method_signature": "TripDatabaseAdapter.write(@NonNull Trip trip, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(@NonNull Trip trip, int primaryKey, @NonNull UUID uuid, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "modifiers": "@Override @NonNull public", "return": "Trip", "signature": "Trip build(@NonNull Trip trip, int primaryKey, @NonNull UUID uuid, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "full_signature": "@Override @NonNull public Trip build(@NonNull Trip trip, int primaryKey, @NonNull UUID uuid, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "class_method_signature": "TripDatabaseAdapter.build(@NonNull Trip trip, int primaryKey, @NonNull UUID uuid, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "testcase": false, "constructor": false}], "file": "app/src/main/java/co/smartreceipts/android/persistence/database/tables/adapters/TripDatabaseAdapter.java"}, "focal_method": {"identifier": "write", "parameters": "(@NonNull Trip trip, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "modifiers": "@Override @NonNull public", "return": "ContentValues", "body": "@Override\n    @NonNull\n    public ContentValues write(@NonNull Trip trip, @NonNull DatabaseOperationMetadata databaseOperationMetadata) {\n        final ContentValues values = new ContentValues();\n        values.put(TripsTable.COLUMN_NAME, trip.getName());\n        values.put(TripsTable.COLUMN_FROM, trip.getStartDate().getTime());\n        values.put(TripsTable.COLUMN_TO, trip.getEndDate().getTime());\n        values.put(TripsTable.COLUMN_FROM_TIMEZONE, trip.getStartTimeZone().getID());\n        values.put(TripsTable.COLUMN_TO_TIMEZONE, trip.getEndTimeZone().getID());\n        values.put(TripsTable.COLUMN_COMMENT, trip.getComment());\n        values.put(TripsTable.COLUMN_COST_CENTER, trip.getCostCenter());\n        values.put(TripsTable.COLUMN_DEFAULT_CURRENCY, trip.getDefaultCurrencyCode());\n        values.put(TripsTable.COLUMN_UUID, trip.getUuid().toString());\n        values.put(TripsTable.COLUMN_NAME_HIDDEN_AUTO_COMPLETE, trip.getAutoCompleteMetadata().isNameHiddenFromAutoComplete());\n        values.put(TripsTable.COLUMN_COMMENT_HIDDEN_AUTO_COMPLETE, trip.getAutoCompleteMetadata().isCommentHiddenFromAutoComplete());\n        values.put(TripsTable.COLUMN_COSTCENTER_HIDDEN_AUTO_COMPLETE, trip.getAutoCompleteMetadata().isCostCenterHiddenFromAutoComplete());\n        if (databaseOperationMetadata.getOperationFamilyType() == OperationFamilyType.Sync) {\n            values.putAll(syncStateAdapter.write(trip.getSyncState()));\n        } else {\n            values.putAll(syncStateAdapter.writeUnsynced(trip.getSyncState()));\n        }\n        return values;\n    }", "signature": "ContentValues write(@NonNull Trip trip, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "full_signature": "@Override @NonNull public ContentValues write(@NonNull Trip trip, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "class_method_signature": "TripDatabaseAdapter.write(@NonNull Trip trip, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "testcase": false, "constructor": false, "invocations": ["put", "getName", "put", "getTime", "getStartDate", "put", "getTime", "getEndDate", "put", "getID", "getStartTimeZone", "put", "getID", "getEndTimeZone", "put", "getComment", "put", "getCostCenter", "put", "getDefaultCurrencyCode", "put", "toString", "getUuid", "put", "isNameHiddenFromAutoComplete", "getAutoCompleteMetadata", "put", "isCommentHiddenFromAutoComplete", "getAutoCompleteMetadata", "put", "isCostCenterHiddenFromAutoComplete", "getAutoCompleteMetadata", "getOperationFamilyType", "putAll", "write", "getSyncState", "putAll", "writeUnsynced", "getSyncState"]}, "repository": {"repo_id": 2684727, "url": "https://github.com/wbaumann/SmartReceiptsLibrary", "stars": 166, "created": "11/1/2011 12:32:39 AM +00:00", "updates": "2020-01-26T22:04:24+00:00", "fork": "False", "license": "licensed"}}