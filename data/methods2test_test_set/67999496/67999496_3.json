{"test_class": {"identifier": "FocalPointModifierTest", "superclass": "extends AbstractImageTest", "interfaces": "", "fields": [], "file": "services/image-imgscalr/src/test/java/com/gentics/mesh/image/focalpoint/FocalPointModifierTest.java"}, "test_case": {"identifier": "testCropViaFocalPoint", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCropViaFocalPoint() {\n\t\tBufferedImage bi = new BufferedImage(100, 200, BufferedImage.TYPE_INT_ARGB);\n\t\tBufferedImage outputImage = new FocalPointModifier(new ImageManipulatorOptions()).apply(bi,\n\t\t\t\tnew ImageManipulationParametersImpl().setFocalPoint(0.1f, 0.1f).setCropMode(FOCALPOINT).setSize(50, 50));\n\t\tassertEquals(50, outputImage.getWidth());\n\t\tassertEquals(50, outputImage.getHeight());\n\t}", "signature": "void testCropViaFocalPoint()", "full_signature": "@Test public void testCropViaFocalPoint()", "class_method_signature": "FocalPointModifierTest.testCropViaFocalPoint()", "testcase": true, "constructor": false, "invocations": ["apply", "setSize", "setCropMode", "setFocalPoint", "assertEquals", "getWidth", "assertEquals", "getHeight"]}, "focal_class": {"identifier": "FocalPointModifier", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ImageManipulatorOptions options;", "modifier": "private final", "type": "ImageManipulatorOptions", "declarator": "options", "var_name": "options"}], "methods": [{"identifier": "FocalPointModifier", "parameters": "(ImageManipulatorOptions options)", "modifiers": "public", "return": "", "signature": " FocalPointModifier(ImageManipulatorOptions options)", "full_signature": "public  FocalPointModifier(ImageManipulatorOptions options)", "class_method_signature": "FocalPointModifier.FocalPointModifier(ImageManipulatorOptions options)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(BufferedImage img, ImageManipulationParameters parameters)", "modifiers": "public", "return": "BufferedImage", "signature": "BufferedImage apply(BufferedImage img, ImageManipulationParameters parameters)", "full_signature": "public BufferedImage apply(BufferedImage img, ImageManipulationParameters parameters)", "class_method_signature": "FocalPointModifier.apply(BufferedImage img, ImageManipulationParameters parameters)", "testcase": false, "constructor": false}, {"identifier": "applyZoom", "parameters": "(BufferedImage img, Float zoomFactor, FocalPoint focalPoint, Point targetSize)", "modifiers": "private", "return": "BufferedImage", "signature": "BufferedImage applyZoom(BufferedImage img, Float zoomFactor, FocalPoint focalPoint, Point targetSize)", "full_signature": "private BufferedImage applyZoom(BufferedImage img, Float zoomFactor, FocalPoint focalPoint, Point targetSize)", "class_method_signature": "FocalPointModifier.applyZoom(BufferedImage img, Float zoomFactor, FocalPoint focalPoint, Point targetSize)", "testcase": false, "constructor": false}, {"identifier": "calculateZoomStart", "parameters": "(FocalPoint focalPoint, Point imageSize, int zoomWidth, int zoomHeight)", "modifiers": "protected", "return": "Point", "signature": "Point calculateZoomStart(FocalPoint focalPoint, Point imageSize, int zoomWidth, int zoomHeight)", "full_signature": "protected Point calculateZoomStart(FocalPoint focalPoint, Point imageSize, int zoomWidth, int zoomHeight)", "class_method_signature": "FocalPointModifier.calculateZoomStart(FocalPoint focalPoint, Point imageSize, int zoomWidth, int zoomHeight)", "testcase": false, "constructor": false}, {"identifier": "applyResize", "parameters": "(BufferedImage img, Point size)", "modifiers": "private", "return": "BufferedImage", "signature": "BufferedImage applyResize(BufferedImage img, Point size)", "full_signature": "private BufferedImage applyResize(BufferedImage img, Point size)", "class_method_signature": "FocalPointModifier.applyResize(BufferedImage img, Point size)", "testcase": false, "constructor": false}, {"identifier": "applyCrop", "parameters": "(BufferedImage img, Point cropStart, Point cropSize)", "modifiers": "private", "return": "BufferedImage", "signature": "BufferedImage applyCrop(BufferedImage img, Point cropStart, Point cropSize)", "full_signature": "private BufferedImage applyCrop(BufferedImage img, Point cropStart, Point cropSize)", "class_method_signature": "FocalPointModifier.applyCrop(BufferedImage img, Point cropStart, Point cropSize)", "testcase": false, "constructor": false}, {"identifier": "calculateAlignment", "parameters": "(Point imageSize, Point targetSize)", "modifiers": "protected", "return": "boolean", "signature": "boolean calculateAlignment(Point imageSize, Point targetSize)", "full_signature": "protected boolean calculateAlignment(Point imageSize, Point targetSize)", "class_method_signature": "FocalPointModifier.calculateAlignment(Point imageSize, Point targetSize)", "testcase": false, "constructor": false}, {"identifier": "calculateCropStart", "parameters": "(boolean alignX, Point targetSize, Point imageSize, FocalPoint focalPoint)", "modifiers": "protected", "return": "Point", "signature": "Point calculateCropStart(boolean alignX, Point targetSize, Point imageSize, FocalPoint focalPoint)", "full_signature": "protected Point calculateCropStart(boolean alignX, Point targetSize, Point imageSize, FocalPoint focalPoint)", "class_method_signature": "FocalPointModifier.calculateCropStart(boolean alignX, Point targetSize, Point imageSize, FocalPoint focalPoint)", "testcase": false, "constructor": false}, {"identifier": "drawFocusPointAxis", "parameters": "(BufferedImage img, FocalPoint focalPoint)", "modifiers": "protected", "return": "void", "signature": "void drawFocusPointAxis(BufferedImage img, FocalPoint focalPoint)", "full_signature": "protected void drawFocusPointAxis(BufferedImage img, FocalPoint focalPoint)", "class_method_signature": "FocalPointModifier.drawFocusPointAxis(BufferedImage img, FocalPoint focalPoint)", "testcase": false, "constructor": false}, {"identifier": "calculateResize", "parameters": "(Point imageSize, Point targetSize)", "modifiers": "protected", "return": "Point", "signature": "Point calculateResize(Point imageSize, Point targetSize)", "full_signature": "protected Point calculateResize(Point imageSize, Point targetSize)", "class_method_signature": "FocalPointModifier.calculateResize(Point imageSize, Point targetSize)", "testcase": false, "constructor": false}], "file": "services/image-imgscalr/src/main/java/com/gentics/mesh/image/focalpoint/FocalPointModifier.java"}, "focal_method": {"identifier": "apply", "parameters": "(BufferedImage img, ImageManipulationParameters parameters)", "modifiers": "public", "return": "BufferedImage", "body": "public BufferedImage apply(BufferedImage img, ImageManipulationParameters parameters) {\n\t\tFocalPoint focalPoint = parameters.getFocalPoint();\n\t\tif (focalPoint == null) {\n\t\t\treturn img;\n\t\t}\n\n\t\tif (parameters.getFocalPointDebug()) {\n\t\t\tdrawFocusPointAxis(img, focalPoint);\n\t\t}\n\n\t\t// Validate the focal point position\n\t\tPoint imageSize = new Point(img.getWidth(), img.getHeight());\n\t\tPoint absFocalPoint = parameters.getFocalPoint().convertToAbsolutePoint(imageSize);\n\t\tif (!absFocalPoint.isWithinBoundsOf(imageSize)) {\n\t\t\tthrow error(BAD_REQUEST, \"image_error_focalpoint_out_of_bounds\", focalPoint.toString(), imageSize.toString());\n\t\t}\n\n\t\tPoint targetSize = parameters.getSize();\n\t\tFloat zoomFactor = parameters.getFocalPointZoom();\n\t\tBufferedImage zoomedImg = applyZoom(img, zoomFactor, focalPoint, targetSize);\n\t\t// Apply the regular focal point logic if the zoom was not applied. Otherwise the image is already cropped and handled correctly.\n\t\tif (zoomedImg == null) {\n\t\t\tif (targetSize == null) {\n\t\t\t\tthrow error(BAD_REQUEST, \"image_error_focalpoint_target_missing\");\n\t\t\t}\n\n\t\t\tPoint newSize = calculateResize(imageSize, targetSize);\n\n\t\t\t// Resize the image to the largest dimension while keeping the aspect ratio\n\t\t\timg = applyResize(img, newSize);\n\n\t\t\t// No need for cropping. The image has already the target dimensions\n\t\t\tif (imageSize.equals(targetSize)) {\n\t\t\t\treturn img;\n\t\t\t}\n\n\t\t\tboolean alignX = calculateAlignment(imageSize, targetSize);\n\t\t\tPoint cropStart = calculateCropStart(alignX, targetSize, newSize, focalPoint);\n\t\t\tif (cropStart != null) {\n\t\t\t\timg = applyCrop(img, cropStart, targetSize);\n\t\t\t}\n\n\t\t} else {\n\t\t\timg = zoomedImg;\n\t\t}\n\t\timg.flush();\n\t\treturn img;\n\t}", "signature": "BufferedImage apply(BufferedImage img, ImageManipulationParameters parameters)", "full_signature": "public BufferedImage apply(BufferedImage img, ImageManipulationParameters parameters)", "class_method_signature": "FocalPointModifier.apply(BufferedImage img, ImageManipulationParameters parameters)", "testcase": false, "constructor": false, "invocations": ["getFocalPoint", "getFocalPointDebug", "drawFocusPointAxis", "getWidth", "getHeight", "convertToAbsolutePoint", "getFocalPoint", "isWithinBoundsOf", "error", "toString", "toString", "getSize", "getFocalPointZoom", "applyZoom", "error", "calculateResize", "applyResize", "equals", "calculateAlignment", "calculateCropStart", "applyCrop", "flush"]}, "repository": {"repo_id": 67999496, "url": "https://github.com/gentics/mesh", "stars": 412, "created": "9/12/2016 10:28:41 AM +00:00", "updates": "2020-01-27T10:25:42+00:00", "fork": "False", "license": "licensed"}}