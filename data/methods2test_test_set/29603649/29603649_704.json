{"test_class": {"identifier": "HttpResponseTransformerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String RESPONSE_BODY = \"response\";", "modifier": "private static final", "type": "String", "declarator": "RESPONSE_BODY = \"response\"", "var_name": "RESPONSE_BODY"}, {"original_string": "private static final String REQUEST_LINE = \"request_line\";", "modifier": "private static final", "type": "String", "declarator": "REQUEST_LINE = \"request_line\"", "var_name": "REQUEST_LINE"}, {"original_string": "private static final String REQUEST_PROXY_LINE = \"request_proxy_line\";", "modifier": "private static final", "type": "String", "declarator": "REQUEST_PROXY_LINE = \"request_proxy_line\"", "var_name": "REQUEST_PROXY_LINE"}, {"original_string": "private static final String CONTENT_TYPE = \"application/xml\";", "modifier": "private static final", "type": "String", "declarator": "CONTENT_TYPE = \"application/xml\"", "var_name": "CONTENT_TYPE"}, {"original_string": "private static final String PREFIX = \"prefix\";", "modifier": "private static final", "type": "String", "declarator": "PREFIX = \"prefix\"", "var_name": "PREFIX"}, {"original_string": "private Header[] responseHeaders;", "modifier": "private", "type": "Header[]", "declarator": "responseHeaders", "var_name": "responseHeaders"}, {"original_string": "private Header[] requestHeaders;", "modifier": "private", "type": "Header[]", "declarator": "requestHeaders", "var_name": "requestHeaders"}, {"original_string": "@Mock\n    private WilmaHttpResponse response;", "modifier": "@Mock\n    private", "type": "WilmaHttpResponse", "declarator": "response", "var_name": "response"}, {"original_string": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\n    private BrowserMobHttpResponse browserMobHttpResponse;", "modifier": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\n    private", "type": "BrowserMobHttpResponse", "declarator": "browserMobHttpResponse", "var_name": "browserMobHttpResponse"}, {"original_string": "@Mock\n    private MessageConfigurationAccess configurationAccess;", "modifier": "@Mock\n    private", "type": "MessageConfigurationAccess", "declarator": "configurationAccess", "var_name": "configurationAccess"}, {"original_string": "@Mock\n    private WilmaResponseFactory responseFactory;", "modifier": "@Mock\n    private", "type": "WilmaResponseFactory", "declarator": "responseFactory", "var_name": "responseFactory"}, {"original_string": "@InjectMocks\n    private HttpResponseTransformer underTest;", "modifier": "@InjectMocks\n    private", "type": "HttpResponseTransformer", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-browsermob-integration/src/test/java/com/epam/wilma/browsermob/transformer/HttpResponseTransformerTest.java"}, "test_case": {"identifier": "testTransformShouldSetRequestHeader", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTransformShouldSetRequestHeader() {\n        //GIVEN\n        setMocksForMessageContent();\n        setMocksForMessageConfiguration();\n        //WHEN\n        underTest.transformResponse(browserMobHttpResponse);\n        //THEN\n        verify(response).addRequestHeader(\"reqName\", \"reqValue\");\n    }", "signature": "void testTransformShouldSetRequestHeader()", "full_signature": "@Test public void testTransformShouldSetRequestHeader()", "class_method_signature": "HttpResponseTransformerTest.testTransformShouldSetRequestHeader()", "testcase": true, "constructor": false, "invocations": ["setMocksForMessageContent", "setMocksForMessageConfiguration", "transformResponse", "addRequestHeader", "verify"]}, "focal_class": {"identifier": "HttpResponseTransformer", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private WilmaResponseFactory responseFactory;", "modifier": "@Autowired\n    private", "type": "WilmaResponseFactory", "declarator": "responseFactory", "var_name": "responseFactory"}, {"original_string": "@Autowired\n    private MessageConfigurationAccess configurationAccess;", "modifier": "@Autowired\n    private", "type": "MessageConfigurationAccess", "declarator": "configurationAccess", "var_name": "configurationAccess"}], "methods": [{"identifier": "transformResponse", "parameters": "(final BrowserMobHttpResponse response)", "modifiers": "public", "return": "WilmaHttpResponse", "signature": "WilmaHttpResponse transformResponse(final BrowserMobHttpResponse response)", "full_signature": "public WilmaHttpResponse transformResponse(final BrowserMobHttpResponse response)", "class_method_signature": "HttpResponseTransformer.transformResponse(final BrowserMobHttpResponse response)", "testcase": false, "constructor": false}, {"identifier": "prepareInstancePrefix", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String prepareInstancePrefix()", "full_signature": "private String prepareInstancePrefix()", "class_method_signature": "HttpResponseTransformer.prepareInstancePrefix()", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-browsermob-integration/src/main/java/com/epam/wilma/browsermob/transformer/HttpResponseTransformer.java"}, "focal_method": {"identifier": "transformResponse", "parameters": "(final BrowserMobHttpResponse response)", "modifiers": "public", "return": "WilmaHttpResponse", "body": "public WilmaHttpResponse transformResponse(final BrowserMobHttpResponse response) {\n        boolean isResponseVolatile = response.isResponseVolatile();\n        WilmaHttpResponse result = responseFactory.createNewWilmaHttpResponse(isResponseVolatile);\n        if (response.getRawResponse() != null) {\n            for (Header header : response.getRawResponse().getAllHeaders()) {\n                result.addHeader(header.getName(), header.getValue());\n            }\n        }\n\n        for (Header header : response.getRequestHeaders()) {\n            result.addRequestHeader(header.getName(), header.getValue());\n        }\n\n        result.setRequestLine(response.getMethod().getRequestLine().toString());\n        result.setProxyRequestLine(response.getProxyRequestURI().toString());\n        String body = response.getBody();\n        int status = response.getStatus();\n        result.setBody(body);\n        result.setContentType(response.getContentType());\n        result.setStatusCode(status);\n\n        //set Wilma Message Id\n        String instancePrefix = prepareInstancePrefix();\n        result.setWilmaMessageId(instancePrefix + response.getEntry().getWilmaEntryId());\n\n        //set remote addr\n        String ipAddress = response.getEntry().getServerIPAddress();\n        result.setRemoteAddr(ipAddress);\n\n        return result;\n    }", "signature": "WilmaHttpResponse transformResponse(final BrowserMobHttpResponse response)", "full_signature": "public WilmaHttpResponse transformResponse(final BrowserMobHttpResponse response)", "class_method_signature": "HttpResponseTransformer.transformResponse(final BrowserMobHttpResponse response)", "testcase": false, "constructor": false, "invocations": ["isResponseVolatile", "createNewWilmaHttpResponse", "getRawResponse", "getAllHeaders", "getRawResponse", "addHeader", "getName", "getValue", "getRequestHeaders", "addRequestHeader", "getName", "getValue", "setRequestLine", "toString", "getRequestLine", "getMethod", "setProxyRequestLine", "toString", "getProxyRequestURI", "getBody", "getStatus", "setBody", "setContentType", "getContentType", "setStatusCode", "prepareInstancePrefix", "setWilmaMessageId", "getWilmaEntryId", "getEntry", "getServerIPAddress", "getEntry", "setRemoteAddr"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}