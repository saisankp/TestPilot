{"test_class": {"identifier": "SynL1CSlstrSceneTransformProviderTest", "superclass": "", "interfaces": "", "fields": [], "file": "s3tbx-sentinel3-reader/src/test/java/org/esa/s3tbx/dataio/s3/synergy/SynL1CSlstrSceneTransformProviderTest.java"}, "test_case": {"identifier": "testGetSceneToModelTransform", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetSceneToModelTransform() throws Exception {\n        final Band colMisregistrationBand = new Band(\"colMisregistrationBand\", ProductData.TYPE_INT32, 4, 4);\n        final ProductData colMisRegistrationData = ProductData.createInstance(new int[]{1, 2, 1, 2, 1, 2, 1, 2,\n                1, 2, 1, 2, 1, 2, 1, 3});\n        colMisregistrationBand.setData(colMisRegistrationData);\n        final Band rowMisregistrationBand = new Band(\"rowMisregistrationBand\", ProductData.TYPE_INT32, 4, 4);\n//        final ProductData rowMisRegistrationData = ProductData.createInstance(new int[]{-1, -2, -1, -2, -1, -2, -1, -2,\n//                -1, -2, -1, -2, -1, -2, -1, -3});\n        final ProductData rowMisRegistrationData = ProductData.createInstance(new int[]{0, 1, 0, 1, 0, 1, 0, 1,\n                0, 1, 0, 1, 0, 1, 0, 2});\n        rowMisregistrationBand.setData(rowMisRegistrationData);\n        final SynL1CSlstrSceneTransformProvider provider =\n                new SynL1CSlstrSceneTransformProvider(colMisregistrationBand, rowMisregistrationBand);\n\n        final MathTransform2D sceneToModelTransform = provider.getSceneToModelTransform();\n\n        PixelPos resultPos = new PixelPos();\n        sceneToModelTransform.transform(new PixelPos(0, 0), resultPos);\n        assertEquals(1, (int)resultPos.getX());\n        assertEquals(0, (int)resultPos.getY());\n\n        sceneToModelTransform.transform(new PixelPos(2, 1), resultPos);\n        assertEquals(1, (int)resultPos.getX());\n        assertEquals(0, (int)resultPos.getY());\n\n        sceneToModelTransform.transform(new PixelPos(1, 2), resultPos);\n        assertEquals(2, (int)resultPos.getX());\n        assertEquals(1, (int)resultPos.getY());\n\n        sceneToModelTransform.transform(new PixelPos(3, 3), resultPos);\n        assertEquals(3, (int)resultPos.getX());\n        assertEquals(2, (int)resultPos.getY());\n    }", "signature": "void testGetSceneToModelTransform()", "full_signature": "@Test public void testGetSceneToModelTransform()", "class_method_signature": "SynL1CSlstrSceneTransformProviderTest.testGetSceneToModelTransform()", "testcase": true, "constructor": false, "invocations": ["createInstance", "setData", "createInstance", "setData", "getSceneToModelTransform", "transform", "assertEquals", "getX", "assertEquals", "getY", "transform", "assertEquals", "getX", "assertEquals", "getY", "transform", "assertEquals", "getX", "assertEquals", "getY", "transform", "assertEquals", "getX", "assertEquals", "getY"]}, "focal_class": {"identifier": "SynL1CSlstrSceneTransformProvider", "superclass": "", "interfaces": "implements SceneTransformProvider", "fields": [{"original_string": "private final SynL1CSceneToModelTransform sceneToModelTransform;", "modifier": "private final", "type": "SynL1CSceneToModelTransform", "declarator": "sceneToModelTransform", "var_name": "sceneToModelTransform"}], "methods": [{"identifier": "SynL1CSlstrSceneTransformProvider", "parameters": "(Band colCorrespondenceBand, Band rowCorrespondenceBand)", "modifiers": "public", "return": "", "signature": " SynL1CSlstrSceneTransformProvider(Band colCorrespondenceBand, Band rowCorrespondenceBand)", "full_signature": "public  SynL1CSlstrSceneTransformProvider(Band colCorrespondenceBand, Band rowCorrespondenceBand)", "class_method_signature": "SynL1CSlstrSceneTransformProvider.SynL1CSlstrSceneTransformProvider(Band colCorrespondenceBand, Band rowCorrespondenceBand)", "testcase": false, "constructor": true}, {"identifier": "getModelToSceneTransform", "parameters": "()", "modifiers": "@Override public", "return": "MathTransform2D", "signature": "MathTransform2D getModelToSceneTransform()", "full_signature": "@Override public MathTransform2D getModelToSceneTransform()", "class_method_signature": "SynL1CSlstrSceneTransformProvider.getModelToSceneTransform()", "testcase": false, "constructor": false}, {"identifier": "getSceneToModelTransform", "parameters": "()", "modifiers": "@Override public", "return": "MathTransform2D", "signature": "MathTransform2D getSceneToModelTransform()", "full_signature": "@Override public MathTransform2D getSceneToModelTransform()", "class_method_signature": "SynL1CSlstrSceneTransformProvider.getSceneToModelTransform()", "testcase": false, "constructor": false}], "file": "s3tbx-sentinel3-reader/src/main/java/org/esa/s3tbx/dataio/s3/synergy/SynL1CSlstrSceneTransformProvider.java"}, "focal_method": {"identifier": "getSceneToModelTransform", "parameters": "()", "modifiers": "@Override public", "return": "MathTransform2D", "body": "@Override\n    public MathTransform2D getSceneToModelTransform() {\n        return sceneToModelTransform;\n    }", "signature": "MathTransform2D getSceneToModelTransform()", "full_signature": "@Override public MathTransform2D getSceneToModelTransform()", "class_method_signature": "SynL1CSlstrSceneTransformProvider.getSceneToModelTransform()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}