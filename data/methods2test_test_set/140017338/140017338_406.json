{"test_class": {"identifier": "HttpClientConfigTest", "superclass": "", "interfaces": "", "fields": [], "file": "http-support/src/test/java/org/eclipse/sw360/antenna/http/config/HttpClientConfigTest.java"}, "test_case": {"identifier": "testWithObjectMapper", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWithObjectMapper() {\n        ObjectMapper mapper = mock(ObjectMapper.class);\n\n        HttpClientConfig config = HttpClientConfig.basicConfig().withObjectMapper(mapper);\n        assertThat(config.proxySettings()).isSameAs(HttpClientConfig.basicConfig().proxySettings());\n        assertThat(config.customObjectMapper()).contains(mapper);\n    }", "signature": "void testWithObjectMapper()", "full_signature": "@Test public void testWithObjectMapper()", "class_method_signature": "HttpClientConfigTest.testWithObjectMapper()", "testcase": true, "constructor": false, "invocations": ["mock", "withObjectMapper", "basicConfig", "isSameAs", "assertThat", "proxySettings", "proxySettings", "basicConfig", "contains", "assertThat", "customObjectMapper"]}, "focal_class": {"identifier": "HttpClientConfig", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final HttpClientConfig BASIC_CONFIG =\n            new HttpClientConfig(null, ProxySettings.noProxy());", "modifier": "private static final", "type": "HttpClientConfig", "declarator": "BASIC_CONFIG =\n            new HttpClientConfig(null, ProxySettings.noProxy())", "var_name": "BASIC_CONFIG"}, {"original_string": "private final ObjectMapper customObjectMapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "customObjectMapper", "var_name": "customObjectMapper"}, {"original_string": "private final ProxySettings proxySettings;", "modifier": "private final", "type": "ProxySettings", "declarator": "proxySettings", "var_name": "proxySettings"}], "methods": [{"identifier": "HttpClientConfig", "parameters": "(ObjectMapper customObjectMapper, ProxySettings proxySettings)", "modifiers": "private", "return": "", "signature": " HttpClientConfig(ObjectMapper customObjectMapper, ProxySettings proxySettings)", "full_signature": "private  HttpClientConfig(ObjectMapper customObjectMapper, ProxySettings proxySettings)", "class_method_signature": "HttpClientConfig.HttpClientConfig(ObjectMapper customObjectMapper, ProxySettings proxySettings)", "testcase": false, "constructor": true}, {"identifier": "basicConfig", "parameters": "()", "modifiers": "public static", "return": "HttpClientConfig", "signature": "HttpClientConfig basicConfig()", "full_signature": "public static HttpClientConfig basicConfig()", "class_method_signature": "HttpClientConfig.basicConfig()", "testcase": false, "constructor": false}, {"identifier": "customObjectMapper", "parameters": "()", "modifiers": "public", "return": "Optional<ObjectMapper>", "signature": "Optional<ObjectMapper> customObjectMapper()", "full_signature": "public Optional<ObjectMapper> customObjectMapper()", "class_method_signature": "HttpClientConfig.customObjectMapper()", "testcase": false, "constructor": false}, {"identifier": "getOrCreateObjectMapper", "parameters": "()", "modifiers": "public", "return": "ObjectMapper", "signature": "ObjectMapper getOrCreateObjectMapper()", "full_signature": "public ObjectMapper getOrCreateObjectMapper()", "class_method_signature": "HttpClientConfig.getOrCreateObjectMapper()", "testcase": false, "constructor": false}, {"identifier": "proxySettings", "parameters": "()", "modifiers": "public", "return": "ProxySettings", "signature": "ProxySettings proxySettings()", "full_signature": "public ProxySettings proxySettings()", "class_method_signature": "HttpClientConfig.proxySettings()", "testcase": false, "constructor": false}, {"identifier": "withObjectMapper", "parameters": "(ObjectMapper newMapper)", "modifiers": "public", "return": "HttpClientConfig", "signature": "HttpClientConfig withObjectMapper(ObjectMapper newMapper)", "full_signature": "public HttpClientConfig withObjectMapper(ObjectMapper newMapper)", "class_method_signature": "HttpClientConfig.withObjectMapper(ObjectMapper newMapper)", "testcase": false, "constructor": false}, {"identifier": "withProxySettings", "parameters": "(ProxySettings newProxySettings)", "modifiers": "public", "return": "HttpClientConfig", "signature": "HttpClientConfig withProxySettings(ProxySettings newProxySettings)", "full_signature": "public HttpClientConfig withProxySettings(ProxySettings newProxySettings)", "class_method_signature": "HttpClientConfig.withProxySettings(ProxySettings newProxySettings)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "HttpClientConfig.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "HttpClientConfig.hashCode()", "testcase": false, "constructor": false}], "file": "http-support/src/main/java/org/eclipse/sw360/antenna/http/config/HttpClientConfig.java"}, "focal_method": {"identifier": "withObjectMapper", "parameters": "(ObjectMapper newMapper)", "modifiers": "public", "return": "HttpClientConfig", "body": "public HttpClientConfig withObjectMapper(ObjectMapper newMapper) {\n        return new HttpClientConfig(newMapper, proxySettings);\n    }", "signature": "HttpClientConfig withObjectMapper(ObjectMapper newMapper)", "full_signature": "public HttpClientConfig withObjectMapper(ObjectMapper newMapper)", "class_method_signature": "HttpClientConfig.withObjectMapper(ObjectMapper newMapper)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}