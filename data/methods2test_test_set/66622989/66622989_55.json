{"test_class": {"identifier": "AsyncTaskSentenceLoadExecutorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private LoaderManager mLoaderManager;", "modifier": "@Mock\n    private", "type": "LoaderManager", "declarator": "mLoaderManager", "var_name": "mLoaderManager"}, {"original_string": "@Mock\n    private Loader mLoader;", "modifier": "@Mock\n    private", "type": "Loader", "declarator": "mLoader", "var_name": "mLoader"}, {"original_string": "@Mock\n    private Context mContext;", "modifier": "@Mock\n    private", "type": "Context", "declarator": "mContext", "var_name": "mContext"}, {"original_string": "@Mock\n    AsyncTaskSentenceLoadExecutor mAsyncTaskSentenceLoadExecutor;", "modifier": "@Mock", "type": "AsyncTaskSentenceLoadExecutor", "declarator": "mAsyncTaskSentenceLoadExecutor", "var_name": "mAsyncTaskSentenceLoadExecutor"}, {"original_string": "@Mock\n    private List<Sentence> mMockSentences;", "modifier": "@Mock\n    private", "type": "List<Sentence>", "declarator": "mMockSentences", "var_name": "mMockSentences"}, {"original_string": "@Mock\n    private UseCase.UseCaseCallback<List<? extends Sentence>, Void> mCallback;", "modifier": "@Mock\n    private", "type": "UseCase.UseCaseCallback<List<? extends Sentence>, Void>", "declarator": "mCallback", "var_name": "mCallback"}, {"original_string": "@Captor\n    private ArgumentCaptor<Bundle> mBundleCaptor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<Bundle>", "declarator": "mBundleCaptor", "var_name": "mBundleCaptor"}], "file": "app/src/test/java/com/xixicm/de/infrastructure/loader/AsyncTaskSentenceLoadExecutorTest.java"}, "test_case": {"identifier": "testOnLoadFinished", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOnLoadFinished() {\n        mAsyncTaskSentenceLoadExecutor.loadSentences(true, true, mCallback);\n        mAsyncTaskSentenceLoadExecutor.onLoadFinished(mLoader, mMockSentences);\n        verify(mCallback).onSuccess(mMockSentences);\n    }", "signature": "void testOnLoadFinished()", "full_signature": "@Test public void testOnLoadFinished()", "class_method_signature": "AsyncTaskSentenceLoadExecutorTest.testOnLoadFinished()", "testcase": true, "constructor": false, "invocations": ["loadSentences", "onLoadFinished", "onSuccess", "verify"]}, "focal_class": {"identifier": "AsyncTaskSentenceLoadExecutor", "superclass": "", "interfaces": "implements SentenceLoadExecutor<List<? extends Sentence>, Void>, LoaderManager.LoaderCallbacks<List<? extends Sentence>>", "fields": [{"original_string": "private static final int SENTENCES_QUERY = 1;", "modifier": "private static final", "type": "int", "declarator": "SENTENCES_QUERY = 1", "var_name": "SENTENCES_QUERY"}, {"original_string": "private static final String IS_FAVORITE = \"IS_FAVORITE\";", "modifier": "private static final", "type": "String", "declarator": "IS_FAVORITE = \"IS_FAVORITE\"", "var_name": "IS_FAVORITE"}, {"original_string": "private final LoaderManager mLoaderManager;", "modifier": "private final", "type": "LoaderManager", "declarator": "mLoaderManager", "var_name": "mLoaderManager"}, {"original_string": "private final Context mContext;", "modifier": "private final", "type": "Context", "declarator": "mContext", "var_name": "mContext"}, {"original_string": "private UseCase.UseCaseCallback<List<? extends Sentence>, Void> mCaseCallback;", "modifier": "private", "type": "UseCase.UseCaseCallback<List<? extends Sentence>, Void>", "declarator": "mCaseCallback", "var_name": "mCaseCallback"}], "methods": [{"identifier": "AsyncTaskSentenceLoadExecutor", "parameters": "(Context context, LoaderManager loaderManager)", "modifiers": "public", "return": "", "signature": " AsyncTaskSentenceLoadExecutor(Context context, LoaderManager loaderManager)", "full_signature": "public  AsyncTaskSentenceLoadExecutor(Context context, LoaderManager loaderManager)", "class_method_signature": "AsyncTaskSentenceLoadExecutor.AsyncTaskSentenceLoadExecutor(Context context, LoaderManager loaderManager)", "testcase": false, "constructor": true}, {"identifier": "loadSentences", "parameters": "(boolean isFirstLoad, boolean favorite, UseCase.UseCaseCallback<List<? extends Sentence>, Void> callback)", "modifiers": "public", "return": "void", "signature": "void loadSentences(boolean isFirstLoad, boolean favorite, UseCase.UseCaseCallback<List<? extends Sentence>, Void> callback)", "full_signature": "public void loadSentences(boolean isFirstLoad, boolean favorite, UseCase.UseCaseCallback<List<? extends Sentence>, Void> callback)", "class_method_signature": "AsyncTaskSentenceLoadExecutor.loadSentences(boolean isFirstLoad, boolean favorite, UseCase.UseCaseCallback<List<? extends Sentence>, Void> callback)", "testcase": false, "constructor": false}, {"identifier": "onCreateLoader", "parameters": "(int id, Bundle args)", "modifiers": "@Override public", "return": "Loader<List<? extends Sentence>>", "signature": "Loader<List<? extends Sentence>> onCreateLoader(int id, Bundle args)", "full_signature": "@Override public Loader<List<? extends Sentence>> onCreateLoader(int id, Bundle args)", "class_method_signature": "AsyncTaskSentenceLoadExecutor.onCreateLoader(int id, Bundle args)", "testcase": false, "constructor": false}, {"identifier": "onLoadFinished", "parameters": "(Loader<List<? extends Sentence>> loader, List<? extends Sentence> data)", "modifiers": "@Override public", "return": "void", "signature": "void onLoadFinished(Loader<List<? extends Sentence>> loader, List<? extends Sentence> data)", "full_signature": "@Override public void onLoadFinished(Loader<List<? extends Sentence>> loader, List<? extends Sentence> data)", "class_method_signature": "AsyncTaskSentenceLoadExecutor.onLoadFinished(Loader<List<? extends Sentence>> loader, List<? extends Sentence> data)", "testcase": false, "constructor": false}, {"identifier": "onLoaderReset", "parameters": "(Loader<List<? extends Sentence>> loader)", "modifiers": "@Override public", "return": "void", "signature": "void onLoaderReset(Loader<List<? extends Sentence>> loader)", "full_signature": "@Override public void onLoaderReset(Loader<List<? extends Sentence>> loader)", "class_method_signature": "AsyncTaskSentenceLoadExecutor.onLoaderReset(Loader<List<? extends Sentence>> loader)", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/xixicm/de/infrastructure/loader/AsyncTaskSentenceLoadExecutor.java"}, "focal_method": {"identifier": "onLoadFinished", "parameters": "(Loader<List<? extends Sentence>> loader, List<? extends Sentence> data)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onLoadFinished(Loader<List<? extends Sentence>> loader, List<? extends Sentence> data) {\n        LogUtils.v(Constants.TAG, \"load sentences done!\");\n        if (mCaseCallback != null) {\n            mCaseCallback.onSuccess(data);\n        }\n    }", "signature": "void onLoadFinished(Loader<List<? extends Sentence>> loader, List<? extends Sentence> data)", "full_signature": "@Override public void onLoadFinished(Loader<List<? extends Sentence>> loader, List<? extends Sentence> data)", "class_method_signature": "AsyncTaskSentenceLoadExecutor.onLoadFinished(Loader<List<? extends Sentence>> loader, List<? extends Sentence> data)", "testcase": false, "constructor": false, "invocations": ["v", "onSuccess"]}, "repository": {"repo_id": 66622989, "url": "https://github.com/enuoCM/DE-MVP-Clean", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 17, "size": 278, "license": "licensed"}}