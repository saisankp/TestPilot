{"test_class": {"identifier": "ByteArrayReaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "tlc-commons-project/tlc-commons-buffer/src/test/java/com/thelastcheck/commons/buffer/ByteArrayReaderTest.java"}, "test_case": {"identifier": "testReadCharArrayIntInt", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReadCharArrayIntInt() throws IOException {\n        String s = \"ABCDEFG1234--ABCDEFG1234--ABCDEFG1234--12345\";\n\n        ByteArray ba = new ByteArray(s.length());\n        ba.write(s, 0);\n        read(s, ba);\n\n        ba = new ByteArray(s.length(), ByteArray.EBCDIC_CHARSET_NAME);\n        ba.write(s, 0);\n        read(s, ba);\n\n    }", "signature": "void testReadCharArrayIntInt()", "full_signature": "@Test public void testReadCharArrayIntInt()", "class_method_signature": "ByteArrayReaderTest.testReadCharArrayIntInt()", "testcase": true, "constructor": false, "invocations": ["length", "write", "read", "length", "write", "read"]}, "focal_class": {"identifier": "ByteArrayReader", "superclass": "extends Reader", "interfaces": "", "fields": [{"original_string": "private final ByteArray     buffer;", "modifier": "private final", "type": "ByteArray", "declarator": "buffer", "var_name": "buffer"}, {"original_string": "private final int           limit;", "modifier": "private final", "type": "int", "declarator": "limit", "var_name": "limit"}, {"original_string": "private int                 position;", "modifier": "private", "type": "int", "declarator": "position", "var_name": "position"}, {"original_string": "private int                 mark;", "modifier": "private", "type": "int", "declarator": "mark", "var_name": "mark"}, {"original_string": "private boolean             isOpen;", "modifier": "private", "type": "boolean", "declarator": "isOpen", "var_name": "isOpen"}], "methods": [{"identifier": "ByteArrayReader", "parameters": "(ByteArray buffer)", "modifiers": "public", "return": "", "signature": " ByteArrayReader(ByteArray buffer)", "full_signature": "public  ByteArrayReader(ByteArray buffer)", "class_method_signature": "ByteArrayReader.ByteArrayReader(ByteArray buffer)", "testcase": false, "constructor": true}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "ByteArrayReader.close()", "testcase": false, "constructor": false}, {"identifier": "getTotalBytesRead", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTotalBytesRead()", "full_signature": "public int getTotalBytesRead()", "class_method_signature": "ByteArrayReader.getTotalBytesRead()", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(char[] cbuf, int off, int len)", "modifiers": "@Override public", "return": "int", "signature": "int read(char[] cbuf, int off, int len)", "full_signature": "@Override public int read(char[] cbuf, int off, int len)", "class_method_signature": "ByteArrayReader.read(char[] cbuf, int off, int len)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int read()", "full_signature": "public int read()", "class_method_signature": "ByteArrayReader.read()", "testcase": false, "constructor": false}, {"identifier": "ensureOpen", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void ensureOpen()", "full_signature": "private void ensureOpen()", "class_method_signature": "ByteArrayReader.ensureOpen()", "testcase": false, "constructor": false}, {"identifier": "ready", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean ready()", "full_signature": "public boolean ready()", "class_method_signature": "ByteArrayReader.ready()", "testcase": false, "constructor": false}, {"identifier": "skip", "parameters": "(long ns)", "modifiers": "public", "return": "long", "signature": "long skip(long ns)", "full_signature": "public long skip(long ns)", "class_method_signature": "ByteArrayReader.skip(long ns)", "testcase": false, "constructor": false}, {"identifier": "markSupported", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean markSupported()", "full_signature": "public boolean markSupported()", "class_method_signature": "ByteArrayReader.markSupported()", "testcase": false, "constructor": false}, {"identifier": "mark", "parameters": "(int readAheadLimit)", "modifiers": "public", "return": "void", "signature": "void mark(int readAheadLimit)", "full_signature": "public void mark(int readAheadLimit)", "class_method_signature": "ByteArrayReader.mark(int readAheadLimit)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "ByteArrayReader.reset()", "testcase": false, "constructor": false}], "file": "tlc-commons-project/tlc-commons-buffer/src/main/java/com/thelastcheck/commons/buffer/ByteArrayReader.java"}, "focal_method": {"identifier": "read", "parameters": "(char[] cbuf, int off, int len)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int read(char[] cbuf, int off, int len) throws IOException {\n        ensureOpen();\n        if (position >= limit) {\n            return -1;\n        }\n        int bytesRead = buffer.read(position, cbuf, off, len);\n        position += bytesRead;\n        return bytesRead;\n    }", "signature": "int read(char[] cbuf, int off, int len)", "full_signature": "@Override public int read(char[] cbuf, int off, int len)", "class_method_signature": "ByteArrayReader.read(char[] cbuf, int off, int len)", "testcase": false, "constructor": false, "invocations": ["ensureOpen", "read"]}, "repository": {"repo_id": 38943889, "url": "https://github.com/TheLastCheck/tlc.open.java", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 5, "size": 1247, "license": "licensed"}}