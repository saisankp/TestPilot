{"test_class": {"identifier": "BufferPoolTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final MockTime time = new MockTime();", "modifier": "private final", "type": "MockTime", "declarator": "time = new MockTime()", "var_name": "time"}, {"original_string": "private final SystemTime systemTime = new SystemTime();", "modifier": "private final", "type": "SystemTime", "declarator": "systemTime = new SystemTime()", "var_name": "systemTime"}, {"original_string": "private final Metrics metrics = new Metrics(time);", "modifier": "private final", "type": "Metrics", "declarator": "metrics = new Metrics(time)", "var_name": "metrics"}, {"original_string": "private final long maxBlockTimeMs = 2000;", "modifier": "private final", "type": "long", "declarator": "maxBlockTimeMs = 2000", "var_name": "maxBlockTimeMs"}, {"original_string": "private final String metricGroup = \"TestMetrics\";", "modifier": "private final", "type": "String", "declarator": "metricGroup = \"TestMetrics\"", "var_name": "metricGroup"}], "file": "clients/src/test/java/org/apache/kafka/clients/producer/internals/BufferPoolTest.java"}, "test_case": {"identifier": "testStressfulSituation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testStressfulSituation() throws Exception {\n        int numThreads = 10;\n        final int iterations = 50000;\n        final int poolableSize = 1024;\n        final long totalMemory = numThreads / 2 * poolableSize;\n        final BufferPool pool = new BufferPool(totalMemory, poolableSize, metrics, time, metricGroup);\n        List<StressTestThread> threads = new ArrayList<StressTestThread>();\n        for (int i = 0; i < numThreads; i++)\n            threads.add(new StressTestThread(pool, iterations));\n        for (StressTestThread thread : threads)\n            thread.start();\n        for (StressTestThread thread : threads)\n            thread.join();\n        for (StressTestThread thread : threads)\n            assertTrue(\"Thread should have completed all iterations successfully.\", thread.success.get());\n        assertEquals(totalMemory, pool.availableMemory());\n    }", "signature": "void testStressfulSituation()", "full_signature": "@Test public void testStressfulSituation()", "class_method_signature": "BufferPoolTest.testStressfulSituation()", "testcase": true, "constructor": false, "invocations": ["add", "start", "join", "assertTrue", "get", "assertEquals", "availableMemory"]}, "focal_class": {"identifier": "BufferPool", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final long totalMemory;", "modifier": "private final", "type": "long", "declarator": "totalMemory", "var_name": "totalMemory"}, {"original_string": "private final int poolableSize;", "modifier": "private final", "type": "int", "declarator": "poolableSize", "var_name": "poolableSize"}, {"original_string": "private final ReentrantLock lock;", "modifier": "private final", "type": "ReentrantLock", "declarator": "lock", "var_name": "lock"}, {"original_string": "private final Deque<ByteBuffer> free;", "modifier": "private final", "type": "Deque<ByteBuffer>", "declarator": "free", "var_name": "free"}, {"original_string": "private final Deque<Condition> waiters;", "modifier": "private final", "type": "Deque<Condition>", "declarator": "waiters", "var_name": "waiters"}, {"original_string": "private long availableMemory;", "modifier": "private", "type": "long", "declarator": "availableMemory", "var_name": "availableMemory"}, {"original_string": "private final Metrics metrics;", "modifier": "private final", "type": "Metrics", "declarator": "metrics", "var_name": "metrics"}, {"original_string": "private final Time time;", "modifier": "private final", "type": "Time", "declarator": "time", "var_name": "time"}, {"original_string": "private final Sensor waitTime;", "modifier": "private final", "type": "Sensor", "declarator": "waitTime", "var_name": "waitTime"}], "methods": [{"identifier": "BufferPool", "parameters": "(long memory, int poolableSize, Metrics metrics, Time time, String metricGrpName)", "modifiers": "public", "return": "", "signature": " BufferPool(long memory, int poolableSize, Metrics metrics, Time time, String metricGrpName)", "full_signature": "public  BufferPool(long memory, int poolableSize, Metrics metrics, Time time, String metricGrpName)", "class_method_signature": "BufferPool.BufferPool(long memory, int poolableSize, Metrics metrics, Time time, String metricGrpName)", "testcase": false, "constructor": true}, {"identifier": "allocate", "parameters": "(int size, long maxTimeToBlockMs)", "modifiers": "public", "return": "ByteBuffer", "signature": "ByteBuffer allocate(int size, long maxTimeToBlockMs)", "full_signature": "public ByteBuffer allocate(int size, long maxTimeToBlockMs)", "class_method_signature": "BufferPool.allocate(int size, long maxTimeToBlockMs)", "testcase": false, "constructor": false}, {"identifier": "freeUp", "parameters": "(int size)", "modifiers": "private", "return": "void", "signature": "void freeUp(int size)", "full_signature": "private void freeUp(int size)", "class_method_signature": "BufferPool.freeUp(int size)", "testcase": false, "constructor": false}, {"identifier": "deallocate", "parameters": "(ByteBuffer buffer, int size)", "modifiers": "public", "return": "void", "signature": "void deallocate(ByteBuffer buffer, int size)", "full_signature": "public void deallocate(ByteBuffer buffer, int size)", "class_method_signature": "BufferPool.deallocate(ByteBuffer buffer, int size)", "testcase": false, "constructor": false}, {"identifier": "deallocate", "parameters": "(ByteBuffer buffer)", "modifiers": "public", "return": "void", "signature": "void deallocate(ByteBuffer buffer)", "full_signature": "public void deallocate(ByteBuffer buffer)", "class_method_signature": "BufferPool.deallocate(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "availableMemory", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long availableMemory()", "full_signature": "public long availableMemory()", "class_method_signature": "BufferPool.availableMemory()", "testcase": false, "constructor": false}, {"identifier": "unallocatedMemory", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long unallocatedMemory()", "full_signature": "public long unallocatedMemory()", "class_method_signature": "BufferPool.unallocatedMemory()", "testcase": false, "constructor": false}, {"identifier": "queued", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int queued()", "full_signature": "public int queued()", "class_method_signature": "BufferPool.queued()", "testcase": false, "constructor": false}, {"identifier": "poolableSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int poolableSize()", "full_signature": "public int poolableSize()", "class_method_signature": "BufferPool.poolableSize()", "testcase": false, "constructor": false}, {"identifier": "totalMemory", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long totalMemory()", "full_signature": "public long totalMemory()", "class_method_signature": "BufferPool.totalMemory()", "testcase": false, "constructor": false}, {"identifier": "waiters", "parameters": "()", "modifiers": "", "return": "Deque<Condition>", "signature": "Deque<Condition> waiters()", "full_signature": " Deque<Condition> waiters()", "class_method_signature": "BufferPool.waiters()", "testcase": false, "constructor": false}], "file": "clients/src/main/java/org/apache/kafka/clients/producer/internals/BufferPool.java"}, "focal_method": {"identifier": "availableMemory", "parameters": "()", "modifiers": "public", "return": "long", "body": "public long availableMemory() {\n        lock.lock();\n        try {\n            return this.availableMemory + this.free.size() * this.poolableSize;\n        } finally {\n            lock.unlock();\n        }\n    }", "signature": "long availableMemory()", "full_signature": "public long availableMemory()", "class_method_signature": "BufferPool.availableMemory()", "testcase": false, "constructor": false, "invocations": ["lock", "size", "unlock"]}, "repository": {"repo_id": 135978112, "url": "https://github.com/anurnomeru/kafka-0.10.0.1-source-reading", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 2953, "license": "licensed"}}