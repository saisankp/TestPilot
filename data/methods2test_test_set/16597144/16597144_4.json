{"test_class": {"identifier": "EuclideanDistanceCalculatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private EuclideanDistanceCalculator distanceCalculator;", "modifier": "private", "type": "EuclideanDistanceCalculator", "declarator": "distanceCalculator", "var_name": "distanceCalculator"}, {"original_string": "private double[] identicalA;", "modifier": "private", "type": "double[]", "declarator": "identicalA", "var_name": "identicalA"}, {"original_string": "private double[] identicalB;", "modifier": "private", "type": "double[]", "declarator": "identicalB", "var_name": "identicalB"}], "file": "recognito/src/test/java/com/bitsinharmony/recognito/distances/EuclideanDistanceCalculatorTest.java"}, "test_case": {"identifier": "nullValueOfSecondParameterReturnsPositiveInfinity", "parameters": "( )", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void nullValueOfSecondParameterReturnsPositiveInfinity( ) {\n        double distance = distanceCalculator.getDistance(new double[0], null);\n        assertThat(distance, is(equalTo(Double.POSITIVE_INFINITY)));\n    }", "signature": "void nullValueOfSecondParameterReturnsPositiveInfinity( )", "full_signature": "@Test public void nullValueOfSecondParameterReturnsPositiveInfinity( )", "class_method_signature": "EuclideanDistanceCalculatorTest.nullValueOfSecondParameterReturnsPositiveInfinity( )", "testcase": true, "constructor": false, "invocations": ["getDistance", "assertThat", "is", "equalTo"]}, "focal_class": {"identifier": "EuclideanDistanceCalculator", "superclass": "extends DistanceCalculator", "interfaces": "", "fields": [], "methods": [{"identifier": "getDistance", "parameters": "(double[] features1, double[] features2)", "modifiers": "public final", "return": "double", "signature": "double getDistance(double[] features1, double[] features2)", "full_signature": "public final double getDistance(double[] features1, double[] features2)", "class_method_signature": "EuclideanDistanceCalculator.getDistance(double[] features1, double[] features2)", "testcase": false, "constructor": false}], "file": "recognito/src/main/java/com/bitsinharmony/recognito/distances/EuclideanDistanceCalculator.java"}, "focal_method": {"identifier": "getDistance", "parameters": "(double[] features1, double[] features2)", "modifiers": "public final", "return": "double", "body": "public final double getDistance(double[] features1, double[] features2) {\n        double distance = positiveInfinityIfEitherOrBothAreNull(features1, features2);\n        if (distance < 0) {\n            if(features1.length != features2.length) {\n                throw new IllegalArgumentException(\"Both features should have the same length. Received lengths of [\" +\n                        + features1.length + \"] and [\" + features2.length + \"]\");\n            }\n            distance = 0.0;\n            for (int i = 0; i < features1.length; i++) {\n                double diff = features1[i] - features2[i];\n                distance += diff * diff;\n            }\n        }\n        return distance;\n    }", "signature": "double getDistance(double[] features1, double[] features2)", "full_signature": "public final double getDistance(double[] features1, double[] features2)", "class_method_signature": "EuclideanDistanceCalculator.getDistance(double[] features1, double[] features2)", "testcase": false, "constructor": false, "invocations": ["positiveInfinityIfEitherOrBothAreNull"]}, "repository": {"repo_id": 16597144, "url": "https://github.com/amaurycrickx/recognito", "language": "Java", "is_fork": false, "fork_count": 100, "stargazer_count": 173, "size": 76, "license": "licensed"}}