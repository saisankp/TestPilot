{"test_class": {"identifier": "AligningKinematicAlgorithmTest", "superclass": "extends AbstractMathTestCase", "interfaces": "", "fields": [{"original_string": "private AligningKinematicAlgorithm aligning;", "modifier": "private", "type": "AligningKinematicAlgorithm", "declarator": "aligning", "var_name": "aligning"}], "file": "advanced/agentmotion/src/test/java/org/arakhne/afc/agentmotion/kinematic/AligningKinematicAlgorithmTest.java"}, "test_case": {"identifier": "calculate_close", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void calculate_close() {\n\t\tassertZero(this.aligning.calculate(new Vector2d(6.1, 4.8), 3, 4, new Vector2d(6, 5)));\n\t}", "signature": "void calculate_close()", "full_signature": "@Test public void calculate_close()", "class_method_signature": "AligningKinematicAlgorithmTest.calculate_close()", "testcase": true, "constructor": false, "invocations": ["assertZero", "calculate"]}, "focal_class": {"identifier": "AligningKinematicAlgorithm", "superclass": "", "interfaces": "implements AligningMotionAlgorithm, Serializable, Cloneable", "fields": [{"original_string": "private static final long serialVersionUID = -8318025671219960417L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -8318025671219960417L", "var_name": "serialVersionUID"}, {"original_string": "protected final double stopAngle;", "modifier": "protected final", "type": "double", "declarator": "stopAngle", "var_name": "stopAngle"}], "methods": [{"identifier": "AligningKinematicAlgorithm", "parameters": "(double stopAngle)", "modifiers": "public", "return": "", "signature": " AligningKinematicAlgorithm(double stopAngle)", "full_signature": "public  AligningKinematicAlgorithm(double stopAngle)", "class_method_signature": "AligningKinematicAlgorithm.AligningKinematicAlgorithm(double stopAngle)", "testcase": false, "constructor": true}, {"identifier": "clone", "parameters": "()", "modifiers": "@Pure @Override public", "return": "AligningKinematicAlgorithm", "signature": "AligningKinematicAlgorithm clone()", "full_signature": "@Pure @Override public AligningKinematicAlgorithm clone()", "class_method_signature": "AligningKinematicAlgorithm.clone()", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(Vector2D<?, ?> orientation, double angularSpeed, double maxAngularSpeed, Vector2D<?, ?> target)", "modifiers": "@Override public", "return": "double", "signature": "double calculate(Vector2D<?, ?> orientation, double angularSpeed, double maxAngularSpeed, Vector2D<?, ?> target)", "full_signature": "@Override public double calculate(Vector2D<?, ?> orientation, double angularSpeed, double maxAngularSpeed, Vector2D<?, ?> target)", "class_method_signature": "AligningKinematicAlgorithm.calculate(Vector2D<?, ?> orientation, double angularSpeed, double maxAngularSpeed, Vector2D<?, ?> target)", "testcase": false, "constructor": false}], "file": "advanced/agentmotion/src/main/java/org/arakhne/afc/agentmotion/kinematic/AligningKinematicAlgorithm.java"}, "focal_method": {"identifier": "calculate", "parameters": "(Vector2D<?, ?> orientation, double angularSpeed, double maxAngularSpeed, Vector2D<?, ?> target)", "modifiers": "@Override public", "return": "double", "body": "@Override\n\tpublic double calculate(Vector2D<?, ?> orientation, double angularSpeed, double maxAngularSpeed, Vector2D<?, ?> target) {\n\t\tfinal double angle = orientation.signedAngle(target);\n\t\tif (Math.abs(angle) <= this.stopAngle) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn MathUtil.clamp(angle, -maxAngularSpeed, maxAngularSpeed);\n\t}", "signature": "double calculate(Vector2D<?, ?> orientation, double angularSpeed, double maxAngularSpeed, Vector2D<?, ?> target)", "full_signature": "@Override public double calculate(Vector2D<?, ?> orientation, double angularSpeed, double maxAngularSpeed, Vector2D<?, ?> target)", "class_method_signature": "AligningKinematicAlgorithm.calculate(Vector2D<?, ?> orientation, double angularSpeed, double maxAngularSpeed, Vector2D<?, ?> target)", "testcase": false, "constructor": false, "invocations": ["signedAngle", "abs", "clamp"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}