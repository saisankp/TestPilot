{"test_class": {"identifier": "TestLog", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(TestLog.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(TestLog.class)", "var_name": "LOGGER"}, {"original_string": "private static final long MAX_FILE_SIZE = 1000;", "modifier": "private static final", "type": "long", "declarator": "MAX_FILE_SIZE = 1000", "var_name": "MAX_FILE_SIZE"}, {"original_string": "private static final int CAPACITY = 10000;", "modifier": "private static final", "type": "int", "declarator": "CAPACITY = 10000", "var_name": "CAPACITY"}, {"original_string": "private Log log;", "modifier": "private", "type": "Log", "declarator": "log", "var_name": "log"}, {"original_string": "private File checkpointDir;", "modifier": "private", "type": "File", "declarator": "checkpointDir", "var_name": "checkpointDir"}, {"original_string": "private File[] dataDirs;", "modifier": "private", "type": "File[]", "declarator": "dataDirs", "var_name": "dataDirs"}, {"original_string": "private long transactionID;", "modifier": "private", "type": "long", "declarator": "transactionID", "var_name": "transactionID"}], "file": "flume-ng-channels/flume-file-channel/src/test/java/org/apache/flume/channel/file/TestLog.java"}, "test_case": {"identifier": "testRoll", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testRoll()\n      throws IOException, InterruptedException, NoopRecordException, CorruptEventException {\n    log.shutdownWorker();\n    Thread.sleep(1000);\n    for (int i = 0; i < 1000; i++) {\n      FlumeEvent eventIn = TestUtils.newPersistableEvent();\n      long transactionID = ++this.transactionID;\n      FlumeEventPointer eventPointer = log.put(transactionID, eventIn);\n      // get is not transactional\n      FlumeEvent eventOut = log.get(eventPointer);\n      Assert.assertNotNull(eventOut);\n      Assert.assertEquals(eventIn.getHeaders(), eventOut.getHeaders());\n      Assert.assertArrayEquals(eventIn.getBody(), eventOut.getBody());\n    }\n    int logCount = 0;\n    for (File dataDir : dataDirs) {\n      for (File logFile : dataDir.listFiles()) {\n        if (logFile.getName().startsWith(\"log-\")) {\n          logCount++;\n        }\n      }\n    }\n    // 93 (*2 for meta) files with TestLog.MAX_FILE_SIZE=1000\n    Assert.assertEquals(186, logCount);\n  }", "signature": "void testRoll()", "full_signature": "@Test public void testRoll()", "class_method_signature": "TestLog.testRoll()", "testcase": true, "constructor": false, "invocations": ["shutdownWorker", "sleep", "newPersistableEvent", "put", "get", "assertNotNull", "assertEquals", "getHeaders", "getHeaders", "assertArrayEquals", "getBody", "getBody", "listFiles", "startsWith", "getName", "assertEquals"]}, "focal_class": {"identifier": "Log", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String PREFIX = \"log-\";", "modifier": "public static final", "type": "String", "declarator": "PREFIX = \"log-\"", "var_name": "PREFIX"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(Log.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(Log.class)", "var_name": "LOGGER"}, {"original_string": "private static final int MIN_NUM_LOGS = 2;", "modifier": "private static final", "type": "int", "declarator": "MIN_NUM_LOGS = 2", "var_name": "MIN_NUM_LOGS"}, {"original_string": "public static final String FILE_LOCK = \"in_use.lock\";", "modifier": "public static final", "type": "String", "declarator": "FILE_LOCK = \"in_use.lock\"", "var_name": "FILE_LOCK"}, {"original_string": "public static final String QUEUE_SET = \"queueset\";", "modifier": "public static final", "type": "String", "declarator": "QUEUE_SET = \"queueset\"", "var_name": "QUEUE_SET"}, {"original_string": "private final Map<Integer, LogFile.RandomReader> idLogFileMap = Collections\n      .synchronizedMap(new HashMap<Integer, LogFile.RandomReader>());", "modifier": "private final", "type": "Map<Integer, LogFile.RandomReader>", "declarator": "idLogFileMap = Collections\n      .synchronizedMap(new HashMap<Integer, LogFile.RandomReader>())", "var_name": "idLogFileMap"}, {"original_string": "private final AtomicInteger nextFileID = new AtomicInteger(0);", "modifier": "private final", "type": "AtomicInteger", "declarator": "nextFileID = new AtomicInteger(0)", "var_name": "nextFileID"}, {"original_string": "private final File checkpointDir;", "modifier": "private final", "type": "File", "declarator": "checkpointDir", "var_name": "checkpointDir"}, {"original_string": "private final File backupCheckpointDir;", "modifier": "private final", "type": "File", "declarator": "backupCheckpointDir", "var_name": "backupCheckpointDir"}, {"original_string": "private final File[] logDirs;", "modifier": "private final", "type": "File[]", "declarator": "logDirs", "var_name": "logDirs"}, {"original_string": "private final int queueCapacity;", "modifier": "private final", "type": "int", "declarator": "queueCapacity", "var_name": "queueCapacity"}, {"original_string": "private final AtomicReferenceArray<LogFile.Writer> logFiles;", "modifier": "private final", "type": "AtomicReferenceArray<LogFile.Writer>", "declarator": "logFiles", "var_name": "logFiles"}, {"original_string": "private final ScheduledExecutorService workerExecutor;", "modifier": "private final", "type": "ScheduledExecutorService", "declarator": "workerExecutor", "var_name": "workerExecutor"}, {"original_string": "private volatile boolean open;", "modifier": "private volatile", "type": "boolean", "declarator": "open", "var_name": "open"}, {"original_string": "private FlumeEventQueue queue;", "modifier": "private", "type": "FlumeEventQueue", "declarator": "queue", "var_name": "queue"}, {"original_string": "private long checkpointInterval;", "modifier": "private", "type": "long", "declarator": "checkpointInterval", "var_name": "checkpointInterval"}, {"original_string": "private long maxFileSize;", "modifier": "private", "type": "long", "declarator": "maxFileSize", "var_name": "maxFileSize"}, {"original_string": "private final boolean useFastReplay;", "modifier": "private final", "type": "boolean", "declarator": "useFastReplay", "var_name": "useFastReplay"}, {"original_string": "private final long minimumRequiredSpace;", "modifier": "private final", "type": "long", "declarator": "minimumRequiredSpace", "var_name": "minimumRequiredSpace"}, {"original_string": "private final Map<String, FileLock> locks;", "modifier": "private final", "type": "Map<String, FileLock>", "declarator": "locks", "var_name": "locks"}, {"original_string": "private final ReentrantReadWriteLock checkpointLock =\n      new ReentrantReadWriteLock(true);", "modifier": "private final", "type": "ReentrantReadWriteLock", "declarator": "checkpointLock =\n      new ReentrantReadWriteLock(true)", "var_name": "checkpointLock"}, {"original_string": "public static final Set<String> EXCLUDES = Sets.newHashSet(FILE_LOCK,\n      QUEUE_SET);", "modifier": "public static final", "type": "Set<String>", "declarator": "EXCLUDES = Sets.newHashSet(FILE_LOCK,\n      QUEUE_SET)", "var_name": "EXCLUDES"}, {"original_string": "private final ReadLock checkpointReadLock = checkpointLock.readLock();", "modifier": "private final", "type": "ReadLock", "declarator": "checkpointReadLock = checkpointLock.readLock()", "var_name": "checkpointReadLock"}, {"original_string": "private final WriteLock checkpointWriterLock = checkpointLock.writeLock();", "modifier": "private final", "type": "WriteLock", "declarator": "checkpointWriterLock = checkpointLock.writeLock()", "var_name": "checkpointWriterLock"}, {"original_string": "private final String channelNameDescriptor;", "modifier": "private final", "type": "String", "declarator": "channelNameDescriptor", "var_name": "channelNameDescriptor"}, {"original_string": "private boolean useLogReplayV1;", "modifier": "private", "type": "boolean", "declarator": "useLogReplayV1", "var_name": "useLogReplayV1"}, {"original_string": "private KeyProvider encryptionKeyProvider;", "modifier": "private", "type": "KeyProvider", "declarator": "encryptionKeyProvider", "var_name": "encryptionKeyProvider"}, {"original_string": "private String encryptionCipherProvider;", "modifier": "private", "type": "String", "declarator": "encryptionCipherProvider", "var_name": "encryptionCipherProvider"}, {"original_string": "private String encryptionKeyAlias;", "modifier": "private", "type": "String", "declarator": "encryptionKeyAlias", "var_name": "encryptionKeyAlias"}, {"original_string": "private Key encryptionKey;", "modifier": "private", "type": "Key", "declarator": "encryptionKey", "var_name": "encryptionKey"}, {"original_string": "private final long usableSpaceRefreshInterval;", "modifier": "private final", "type": "long", "declarator": "usableSpaceRefreshInterval", "var_name": "usableSpaceRefreshInterval"}, {"original_string": "private boolean didFastReplay = false;", "modifier": "private", "type": "boolean", "declarator": "didFastReplay = false", "var_name": "didFastReplay"}, {"original_string": "private boolean didFullReplayDueToBadCheckpointException = false;", "modifier": "private", "type": "boolean", "declarator": "didFullReplayDueToBadCheckpointException = false", "var_name": "didFullReplayDueToBadCheckpointException"}, {"original_string": "private final boolean useDualCheckpoints;", "modifier": "private final", "type": "boolean", "declarator": "useDualCheckpoints", "var_name": "useDualCheckpoints"}, {"original_string": "private final boolean compressBackupCheckpoint;", "modifier": "private final", "type": "boolean", "declarator": "compressBackupCheckpoint", "var_name": "compressBackupCheckpoint"}, {"original_string": "private volatile boolean backupRestored = false;", "modifier": "private volatile", "type": "boolean", "declarator": "backupRestored = false", "var_name": "backupRestored"}, {"original_string": "private final boolean fsyncPerTransaction;", "modifier": "private final", "type": "boolean", "declarator": "fsyncPerTransaction", "var_name": "fsyncPerTransaction"}, {"original_string": "private final int fsyncInterval;", "modifier": "private final", "type": "int", "declarator": "fsyncInterval", "var_name": "fsyncInterval"}, {"original_string": "private final boolean checkpointOnClose;", "modifier": "private final", "type": "boolean", "declarator": "checkpointOnClose", "var_name": "checkpointOnClose"}, {"original_string": "private int readCount;", "modifier": "private", "type": "int", "declarator": "readCount", "var_name": "readCount"}, {"original_string": "private int putCount;", "modifier": "private", "type": "int", "declarator": "putCount", "var_name": "putCount"}, {"original_string": "private int takeCount;", "modifier": "private", "type": "int", "declarator": "takeCount", "var_name": "takeCount"}, {"original_string": "private int committedCount;", "modifier": "private", "type": "int", "declarator": "committedCount", "var_name": "committedCount"}, {"original_string": "private int rollbackCount;", "modifier": "private", "type": "int", "declarator": "rollbackCount", "var_name": "rollbackCount"}, {"original_string": "private final List<File> pendingDeletes = Lists.newArrayList();", "modifier": "private final", "type": "List<File>", "declarator": "pendingDeletes = Lists.newArrayList()", "var_name": "pendingDeletes"}, {"original_string": "private final FileChannelCounter channelCounter;", "modifier": "private final", "type": "FileChannelCounter", "declarator": "channelCounter", "var_name": "channelCounter"}], "methods": [{"identifier": "Log", "parameters": "(long checkpointInterval, long maxFileSize, int queueCapacity,\n              boolean useDualCheckpoints, boolean compressBackupCheckpoint,\n              File checkpointDir, File backupCheckpointDir,\n              String name, boolean useLogReplayV1, boolean useFastReplay,\n              long minimumRequiredSpace, @Nullable KeyProvider encryptionKeyProvider,\n              @Nullable String encryptionKeyAlias,\n              @Nullable String encryptionCipherProvider,\n              long usableSpaceRefreshInterval, boolean fsyncPerTransaction,\n              int fsyncInterval, boolean checkpointOnClose, FileChannelCounter channelCounter,\n              File... logDirs)", "modifiers": "private", "return": "", "signature": " Log(long checkpointInterval, long maxFileSize, int queueCapacity,\n              boolean useDualCheckpoints, boolean compressBackupCheckpoint,\n              File checkpointDir, File backupCheckpointDir,\n              String name, boolean useLogReplayV1, boolean useFastReplay,\n              long minimumRequiredSpace, @Nullable KeyProvider encryptionKeyProvider,\n              @Nullable String encryptionKeyAlias,\n              @Nullable String encryptionCipherProvider,\n              long usableSpaceRefreshInterval, boolean fsyncPerTransaction,\n              int fsyncInterval, boolean checkpointOnClose, FileChannelCounter channelCounter,\n              File... logDirs)", "full_signature": "private  Log(long checkpointInterval, long maxFileSize, int queueCapacity,\n              boolean useDualCheckpoints, boolean compressBackupCheckpoint,\n              File checkpointDir, File backupCheckpointDir,\n              String name, boolean useLogReplayV1, boolean useFastReplay,\n              long minimumRequiredSpace, @Nullable KeyProvider encryptionKeyProvider,\n              @Nullable String encryptionKeyAlias,\n              @Nullable String encryptionCipherProvider,\n              long usableSpaceRefreshInterval, boolean fsyncPerTransaction,\n              int fsyncInterval, boolean checkpointOnClose, FileChannelCounter channelCounter,\n              File... logDirs)", "class_method_signature": "Log.Log(long checkpointInterval, long maxFileSize, int queueCapacity,\n              boolean useDualCheckpoints, boolean compressBackupCheckpoint,\n              File checkpointDir, File backupCheckpointDir,\n              String name, boolean useLogReplayV1, boolean useFastReplay,\n              long minimumRequiredSpace, @Nullable KeyProvider encryptionKeyProvider,\n              @Nullable String encryptionKeyAlias,\n              @Nullable String encryptionCipherProvider,\n              long usableSpaceRefreshInterval, boolean fsyncPerTransaction,\n              int fsyncInterval, boolean checkpointOnClose, FileChannelCounter channelCounter,\n              File... logDirs)", "testcase": false, "constructor": true}, {"identifier": "replay", "parameters": "()", "modifiers": "", "return": "void", "signature": "void replay()", "full_signature": " void replay()", "class_method_signature": "Log.replay()", "testcase": false, "constructor": false}, {"identifier": "doReplay", "parameters": "(FlumeEventQueue queue, List<File> dataFiles,\n                        KeyProvider encryptionKeyProvider,\n                        boolean useFastReplay)", "modifiers": "@SuppressWarnings(\"deprecation\") private", "return": "void", "signature": "void doReplay(FlumeEventQueue queue, List<File> dataFiles,\n                        KeyProvider encryptionKeyProvider,\n                        boolean useFastReplay)", "full_signature": "@SuppressWarnings(\"deprecation\") private void doReplay(FlumeEventQueue queue, List<File> dataFiles,\n                        KeyProvider encryptionKeyProvider,\n                        boolean useFastReplay)", "class_method_signature": "Log.doReplay(FlumeEventQueue queue, List<File> dataFiles,\n                        KeyProvider encryptionKeyProvider,\n                        boolean useFastReplay)", "testcase": false, "constructor": false}, {"identifier": "didFastReplay", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "boolean", "signature": "boolean didFastReplay()", "full_signature": "@VisibleForTesting boolean didFastReplay()", "class_method_signature": "Log.didFastReplay()", "testcase": false, "constructor": false}, {"identifier": "getReadCount", "parameters": "()", "modifiers": "@VisibleForTesting public", "return": "int", "signature": "int getReadCount()", "full_signature": "@VisibleForTesting public int getReadCount()", "class_method_signature": "Log.getReadCount()", "testcase": false, "constructor": false}, {"identifier": "getPutCount", "parameters": "()", "modifiers": "@VisibleForTesting public", "return": "int", "signature": "int getPutCount()", "full_signature": "@VisibleForTesting public int getPutCount()", "class_method_signature": "Log.getPutCount()", "testcase": false, "constructor": false}, {"identifier": "getTakeCount", "parameters": "()", "modifiers": "@VisibleForTesting public", "return": "int", "signature": "int getTakeCount()", "full_signature": "@VisibleForTesting public int getTakeCount()", "class_method_signature": "Log.getTakeCount()", "testcase": false, "constructor": false}, {"identifier": "getCommittedCount", "parameters": "()", "modifiers": "@VisibleForTesting public", "return": "int", "signature": "int getCommittedCount()", "full_signature": "@VisibleForTesting public int getCommittedCount()", "class_method_signature": "Log.getCommittedCount()", "testcase": false, "constructor": false}, {"identifier": "getRollbackCount", "parameters": "()", "modifiers": "@VisibleForTesting public", "return": "int", "signature": "int getRollbackCount()", "full_signature": "@VisibleForTesting public int getRollbackCount()", "class_method_signature": "Log.getRollbackCount()", "testcase": false, "constructor": false}, {"identifier": "backupRestored", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "boolean", "signature": "boolean backupRestored()", "full_signature": "@VisibleForTesting boolean backupRestored()", "class_method_signature": "Log.backupRestored()", "testcase": false, "constructor": false}, {"identifier": "didFullReplayDueToBadCheckpointException", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "boolean", "signature": "boolean didFullReplayDueToBadCheckpointException()", "full_signature": "@VisibleForTesting boolean didFullReplayDueToBadCheckpointException()", "class_method_signature": "Log.didFullReplayDueToBadCheckpointException()", "testcase": false, "constructor": false}, {"identifier": "getNextFileID", "parameters": "()", "modifiers": "", "return": "int", "signature": "int getNextFileID()", "full_signature": " int getNextFileID()", "class_method_signature": "Log.getNextFileID()", "testcase": false, "constructor": false}, {"identifier": "getFlumeEventQueue", "parameters": "()", "modifiers": "", "return": "FlumeEventQueue", "signature": "FlumeEventQueue getFlumeEventQueue()", "full_signature": " FlumeEventQueue getFlumeEventQueue()", "class_method_signature": "Log.getFlumeEventQueue()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(FlumeEventPointer pointer)", "modifiers": "", "return": "FlumeEvent", "signature": "FlumeEvent get(FlumeEventPointer pointer)", "full_signature": " FlumeEvent get(FlumeEventPointer pointer)", "class_method_signature": "Log.get(FlumeEventPointer pointer)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(long transactionID, Event event)", "modifiers": "", "return": "FlumeEventPointer", "signature": "FlumeEventPointer put(long transactionID, Event event)", "full_signature": " FlumeEventPointer put(long transactionID, Event event)", "class_method_signature": "Log.put(long transactionID, Event event)", "testcase": false, "constructor": false}, {"identifier": "take", "parameters": "(long transactionID, FlumeEventPointer pointer)", "modifiers": "", "return": "void", "signature": "void take(long transactionID, FlumeEventPointer pointer)", "full_signature": " void take(long transactionID, FlumeEventPointer pointer)", "class_method_signature": "Log.take(long transactionID, FlumeEventPointer pointer)", "testcase": false, "constructor": false}, {"identifier": "rollback", "parameters": "(long transactionID)", "modifiers": "", "return": "void", "signature": "void rollback(long transactionID)", "full_signature": " void rollback(long transactionID)", "class_method_signature": "Log.rollback(long transactionID)", "testcase": false, "constructor": false}, {"identifier": "commitPut", "parameters": "(long transactionID)", "modifiers": "", "return": "void", "signature": "void commitPut(long transactionID)", "full_signature": " void commitPut(long transactionID)", "class_method_signature": "Log.commitPut(long transactionID)", "testcase": false, "constructor": false}, {"identifier": "commitTake", "parameters": "(long transactionID)", "modifiers": "", "return": "void", "signature": "void commitTake(long transactionID)", "full_signature": " void commitTake(long transactionID)", "class_method_signature": "Log.commitTake(long transactionID)", "testcase": false, "constructor": false}, {"identifier": "unlockExclusive", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void unlockExclusive()", "full_signature": "private void unlockExclusive()", "class_method_signature": "Log.unlockExclusive()", "testcase": false, "constructor": false}, {"identifier": "lockShared", "parameters": "()", "modifiers": "", "return": "void", "signature": "void lockShared()", "full_signature": " void lockShared()", "class_method_signature": "Log.lockShared()", "testcase": false, "constructor": false}, {"identifier": "unlockShared", "parameters": "()", "modifiers": "", "return": "void", "signature": "void unlockShared()", "full_signature": " void unlockShared()", "class_method_signature": "Log.unlockShared()", "testcase": false, "constructor": false}, {"identifier": "lockExclusive", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void lockExclusive()", "full_signature": "private void lockExclusive()", "class_method_signature": "Log.lockExclusive()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "", "return": "void", "signature": "void close()", "full_signature": " void close()", "class_method_signature": "Log.close()", "testcase": false, "constructor": false}, {"identifier": "shutdownWorker", "parameters": "()", "modifiers": "", "return": "void", "signature": "void shutdownWorker()", "full_signature": " void shutdownWorker()", "class_method_signature": "Log.shutdownWorker()", "testcase": false, "constructor": false}, {"identifier": "setCheckpointInterval", "parameters": "(long checkpointInterval)", "modifiers": "", "return": "void", "signature": "void setCheckpointInterval(long checkpointInterval)", "full_signature": " void setCheckpointInterval(long checkpointInterval)", "class_method_signature": "Log.setCheckpointInterval(long checkpointInterval)", "testcase": false, "constructor": false}, {"identifier": "setMaxFileSize", "parameters": "(long maxFileSize)", "modifiers": "", "return": "void", "signature": "void setMaxFileSize(long maxFileSize)", "full_signature": " void setMaxFileSize(long maxFileSize)", "class_method_signature": "Log.setMaxFileSize(long maxFileSize)", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "(long transactionID, short type)", "modifiers": "private", "return": "void", "signature": "void commit(long transactionID, short type)", "full_signature": "private void commit(long transactionID, short type)", "class_method_signature": "Log.commit(long transactionID, short type)", "testcase": false, "constructor": false}, {"identifier": "nextLogWriter", "parameters": "(long transactionID)", "modifiers": "private", "return": "int", "signature": "int nextLogWriter(long transactionID)", "full_signature": "private int nextLogWriter(long transactionID)", "class_method_signature": "Log.nextLogWriter(long transactionID)", "testcase": false, "constructor": false}, {"identifier": "roll", "parameters": "(int index)", "modifiers": "private", "return": "void", "signature": "void roll(int index)", "full_signature": "private void roll(int index)", "class_method_signature": "Log.roll(int index)", "testcase": false, "constructor": false}, {"identifier": "roll", "parameters": "(int index, ByteBuffer buffer)", "modifiers": "private synchronized", "return": "void", "signature": "void roll(int index, ByteBuffer buffer)", "full_signature": "private synchronized void roll(int index, ByteBuffer buffer)", "class_method_signature": "Log.roll(int index, ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "writeCheckpoint", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean writeCheckpoint()", "full_signature": "private boolean writeCheckpoint()", "class_method_signature": "Log.writeCheckpoint()", "testcase": false, "constructor": false}, {"identifier": "writeCheckpoint", "parameters": "(Boolean force)", "modifiers": "private", "return": "Boolean", "signature": "Boolean writeCheckpoint(Boolean force)", "full_signature": "private Boolean writeCheckpoint(Boolean force)", "class_method_signature": "Log.writeCheckpoint(Boolean force)", "testcase": false, "constructor": false}, {"identifier": "removeOldLogs", "parameters": "(SortedSet<Integer> fileIDs)", "modifiers": "private", "return": "void", "signature": "void removeOldLogs(SortedSet<Integer> fileIDs)", "full_signature": "private void removeOldLogs(SortedSet<Integer> fileIDs)", "class_method_signature": "Log.removeOldLogs(SortedSet<Integer> fileIDs)", "testcase": false, "constructor": false}, {"identifier": "lock", "parameters": "(File dir)", "modifiers": "private", "return": "void", "signature": "void lock(File dir)", "full_signature": "private void lock(File dir)", "class_method_signature": "Log.lock(File dir)", "testcase": false, "constructor": false}, {"identifier": "tryLock", "parameters": "(File dir)", "modifiers": "@SuppressWarnings(\"resource\") private", "return": "FileLock", "signature": "FileLock tryLock(File dir)", "full_signature": "@SuppressWarnings(\"resource\") private FileLock tryLock(File dir)", "class_method_signature": "Log.tryLock(File dir)", "testcase": false, "constructor": false}, {"identifier": "unlock", "parameters": "(File dir)", "modifiers": "private", "return": "void", "signature": "void unlock(File dir)", "full_signature": "private void unlock(File dir)", "class_method_signature": "Log.unlock(File dir)", "testcase": false, "constructor": false}], "file": "flume-ng-channels/flume-file-channel/src/main/java/org/apache/flume/channel/file/Log.java"}, "focal_method": {"identifier": "roll", "parameters": "(int index)", "modifiers": "private", "return": "void", "body": "private void roll(int index) throws IOException {\n    roll(index, null);\n  }", "signature": "void roll(int index)", "full_signature": "private void roll(int index)", "class_method_signature": "Log.roll(int index)", "testcase": false, "constructor": false, "invocations": ["roll"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}