{"test_class": {"identifier": "SofaRegistryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static RegistryConfig    registryConfig;", "modifier": "private static", "type": "RegistryConfig", "declarator": "registryConfig", "var_name": "registryConfig"}, {"original_string": "private static SofaRegistry      registry;", "modifier": "private static", "type": "SofaRegistry", "declarator": "registry", "var_name": "registry"}, {"original_string": "private static ConsumerConfig<?> consumer1;", "modifier": "private static", "type": "ConsumerConfig<?>", "declarator": "consumer1", "var_name": "consumer1"}, {"original_string": "private static ConsumerConfig<?> consumer2;", "modifier": "private static", "type": "ConsumerConfig<?>", "declarator": "consumer2", "var_name": "consumer2"}, {"original_string": "private static ServerConfig      serverConfig1;", "modifier": "private static", "type": "ServerConfig", "declarator": "serverConfig1", "var_name": "serverConfig1"}, {"original_string": "private static ServerConfig      serverConfig2;", "modifier": "private static", "type": "ServerConfig", "declarator": "serverConfig2", "var_name": "serverConfig2"}, {"original_string": "private static ProviderConfig<?> provider;", "modifier": "private static", "type": "ProviderConfig<?>", "declarator": "provider", "var_name": "provider"}, {"original_string": "private static TestRegistryMain  registryMain;", "modifier": "private static", "type": "TestRegistryMain", "declarator": "registryMain", "var_name": "registryMain"}], "file": "registry/registry-sofa/src/test/java/com/alipay/sofa/rpc/registry/sofa/SofaRegistryTest.java"}, "test_case": {"identifier": "testSubTwice", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSubTwice() throws Exception {\n        int timeoutPerSub = 5000;\n\n        consumer1 = new ConsumerConfig();\n        consumer1.setInterfaceId(\"com.alipay.xxx.TestService\")\n            .setUniqueId(\"unique123Id\")\n            .setApplication(new ApplicationConfig().setAppName(\"test-server\"))\n            .setProxy(\"javassist\")\n            .setSubscribe(true)\n            .setSerialization(\"java\")\n            .setInvokeType(\"sync\")\n            .setTimeout(4444);\n\n        // \u8ba2\u9605\n        CountDownLatch latch = new CountDownLatch(2);\n        MockProviderInfoListener providerInfoListener = new MockProviderInfoListener();\n        providerInfoListener.setCountDownLatch(latch);\n        consumer1.setProviderInfoListener(providerInfoListener);\n        registry.subscribe(consumer1);\n        latch.await(timeoutPerSub, TimeUnit.MILLISECONDS);\n        Map<String, ProviderGroup> ps = providerInfoListener.getData();\n\n        Assert.assertTrue(ps.size() > 0);\n        Assert.assertNotNull(ps.get(RpcConstants.ADDRESS_DEFAULT_GROUP));\n        Assert.assertEquals(0, ps.get(RpcConstants.ADDRESS_DEFAULT_GROUP).size());\n\n        // \u91cd\u590d\u8ba2\u9605\n        consumer2 = new ConsumerConfig();\n        consumer2.setInterfaceId(\"com.alipay.xxx.TestService\")\n            .setUniqueId(\"unique123Id\")\n            .setApplication(new ApplicationConfig().setAppName(\"test-server\"))\n            .setProxy(\"javassist\")\n            .setSubscribe(true)\n            .setSerialization(\"java\")\n            .setInvokeType(\"sync\")\n            .setTimeout(4444);\n        CountDownLatch latch2 = new CountDownLatch(1);\n        MockProviderInfoListener providerInfoListener2 = new MockProviderInfoListener();\n        providerInfoListener2.setCountDownLatch(latch2);\n        consumer2.setProviderInfoListener(providerInfoListener2);\n        registry.subscribe(consumer2);\n        latch2.await(timeoutPerSub, TimeUnit.MILLISECONDS);\n\n        Map<String, ProviderGroup> ps2 = providerInfoListener2.getData();\n        Assert.assertTrue(ps2.size() > 0);\n        Assert.assertNotNull(ps2.get(RpcConstants.ADDRESS_DEFAULT_GROUP));\n        Assert.assertEquals(0, ps2.get(RpcConstants.ADDRESS_DEFAULT_GROUP).size());\n        Assert.assertEquals(1, registry.subscribers.size());\n        Assert.assertEquals(1, registry.configurators.size());\n\n        latch.await(timeoutPerSub * 2, TimeUnit.MILLISECONDS);\n        Assert.assertTrue(ps2.size() > 0);\n        Assert.assertNotNull(ps2.get(RpcConstants.ADDRESS_DEFAULT_GROUP));\n        Assert.assertEquals(0, ps2.get(RpcConstants.ADDRESS_DEFAULT_GROUP).size());\n        Assert.assertEquals(1, registry.subscribers.size()); // 1\u4e2a\u670d\u52a1 \u8ba2\u9605\u670d\u52a1\u5217\u8868\u548c\u670d\u52a1\u914d\u7f6e 2\u4e2adataId\n        Assert.assertEquals(1, registry.configurators.size());\n\n    }", "signature": "void testSubTwice()", "full_signature": "@Test public void testSubTwice()", "class_method_signature": "SofaRegistryTest.testSubTwice()", "testcase": true, "constructor": false, "invocations": ["setTimeout", "setInvokeType", "setSerialization", "setSubscribe", "setProxy", "setApplication", "setUniqueId", "setInterfaceId", "setAppName", "setCountDownLatch", "setProviderInfoListener", "subscribe", "await", "getData", "assertTrue", "size", "assertNotNull", "get", "assertEquals", "size", "get", "setTimeout", "setInvokeType", "setSerialization", "setSubscribe", "setProxy", "setApplication", "setUniqueId", "setInterfaceId", "setAppName", "setCountDownLatch", "setProviderInfoListener", "subscribe", "await", "getData", "assertTrue", "size", "assertNotNull", "get", "assertEquals", "size", "get", "assertEquals", "size", "assertEquals", "size", "await", "assertTrue", "size", "assertNotNull", "get", "assertEquals", "size", "get", "assertEquals", "size", "assertEquals", "size"]}, "focal_class": {"identifier": "SofaRegistry", "superclass": "extends Registry", "interfaces": "", "fields": [{"original_string": "private static final Logger               LOGGER        = LoggerFactory.getLogger(SofaRegistry.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER        = LoggerFactory.getLogger(SofaRegistry.class)", "var_name": "LOGGER"}, {"original_string": "protected final Map<String, Subscriber>   subscribers   = new ConcurrentHashMap<String, Subscriber>();", "modifier": "protected final", "type": "Map<String, Subscriber>", "declarator": "subscribers   = new ConcurrentHashMap<String, Subscriber>()", "var_name": "subscribers"}, {"original_string": "protected final Map<String, Configurator> configurators = new ConcurrentHashMap<String, Configurator>();", "modifier": "protected final", "type": "Map<String, Configurator>", "declarator": "configurators = new ConcurrentHashMap<String, Configurator>()", "var_name": "configurators"}], "methods": [{"identifier": "SofaRegistry", "parameters": "(RegistryConfig registryConfig)", "modifiers": "protected", "return": "", "signature": " SofaRegistry(RegistryConfig registryConfig)", "full_signature": "protected  SofaRegistry(RegistryConfig registryConfig)", "class_method_signature": "SofaRegistry.SofaRegistry(RegistryConfig registryConfig)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void init()", "full_signature": "@Override public void init()", "class_method_signature": "SofaRegistry.init()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "SofaRegistry.destroy()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean start()", "full_signature": "@Override public boolean start()", "class_method_signature": "SofaRegistry.start()", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(ProviderConfig config)", "modifiers": "@Override public", "return": "void", "signature": "void register(ProviderConfig config)", "full_signature": "@Override public void register(ProviderConfig config)", "class_method_signature": "SofaRegistry.register(ProviderConfig config)", "testcase": false, "constructor": false}, {"identifier": "doRegister", "parameters": "(String appName, String serviceName, String serviceData, String group)", "modifiers": "protected", "return": "void", "signature": "void doRegister(String appName, String serviceName, String serviceData, String group)", "full_signature": "protected void doRegister(String appName, String serviceName, String serviceData, String group)", "class_method_signature": "SofaRegistry.doRegister(String appName, String serviceName, String serviceData, String group)", "testcase": false, "constructor": false}, {"identifier": "unRegister", "parameters": "(ProviderConfig config)", "modifiers": "@Override public", "return": "void", "signature": "void unRegister(ProviderConfig config)", "full_signature": "@Override public void unRegister(ProviderConfig config)", "class_method_signature": "SofaRegistry.unRegister(ProviderConfig config)", "testcase": false, "constructor": false}, {"identifier": "doUnRegister", "parameters": "(String appName, String serviceName, String group)", "modifiers": "protected", "return": "void", "signature": "void doUnRegister(String appName, String serviceName, String group)", "full_signature": "protected void doUnRegister(String appName, String serviceName, String group)", "class_method_signature": "SofaRegistry.doUnRegister(String appName, String serviceName, String group)", "testcase": false, "constructor": false}, {"identifier": "batchUnRegister", "parameters": "(List<ProviderConfig> configs)", "modifiers": "@Override public", "return": "void", "signature": "void batchUnRegister(List<ProviderConfig> configs)", "full_signature": "@Override public void batchUnRegister(List<ProviderConfig> configs)", "class_method_signature": "SofaRegistry.batchUnRegister(List<ProviderConfig> configs)", "testcase": false, "constructor": false}, {"identifier": "subscribe", "parameters": "(ConsumerConfig config)", "modifiers": "@Override public", "return": "List<ProviderGroup>", "signature": "List<ProviderGroup> subscribe(ConsumerConfig config)", "full_signature": "@Override public List<ProviderGroup> subscribe(ConsumerConfig config)", "class_method_signature": "SofaRegistry.subscribe(ConsumerConfig config)", "testcase": false, "constructor": false}, {"identifier": "unSubscribe", "parameters": "(ConsumerConfig config)", "modifiers": "@Override public", "return": "void", "signature": "void unSubscribe(ConsumerConfig config)", "full_signature": "@Override public void unSubscribe(ConsumerConfig config)", "class_method_signature": "SofaRegistry.unSubscribe(ConsumerConfig config)", "testcase": false, "constructor": false}, {"identifier": "batchUnSubscribe", "parameters": "(List<ConsumerConfig> configs)", "modifiers": "@Override public", "return": "void", "signature": "void batchUnSubscribe(List<ConsumerConfig> configs)", "full_signature": "@Override public void batchUnSubscribe(List<ConsumerConfig> configs)", "class_method_signature": "SofaRegistry.batchUnSubscribe(List<ConsumerConfig> configs)", "testcase": false, "constructor": false}, {"identifier": "addAttributes", "parameters": "(SubscriberRegistration subscriberRegistration, String group)", "modifiers": "private", "return": "void", "signature": "void addAttributes(SubscriberRegistration subscriberRegistration, String group)", "full_signature": "private void addAttributes(SubscriberRegistration subscriberRegistration, String group)", "class_method_signature": "SofaRegistry.addAttributes(SubscriberRegistration subscriberRegistration, String group)", "testcase": false, "constructor": false}, {"identifier": "addAttributes", "parameters": "(ConfiguratorRegistration configuratorRegistration, String group)", "modifiers": "private", "return": "void", "signature": "void addAttributes(ConfiguratorRegistration configuratorRegistration, String group)", "full_signature": "private void addAttributes(ConfiguratorRegistration configuratorRegistration, String group)", "class_method_signature": "SofaRegistry.addAttributes(ConfiguratorRegistration configuratorRegistration, String group)", "testcase": false, "constructor": false}], "file": "registry/registry-sofa/src/main/java/com/alipay/sofa/rpc/registry/sofa/SofaRegistry.java"}, "focal_method": {"identifier": "subscribe", "parameters": "(ConsumerConfig config)", "modifiers": "@Override public", "return": "List<ProviderGroup>", "body": "@Override\n    public List<ProviderGroup> subscribe(ConsumerConfig config) {\n        ProviderInfoListener providerInfoListener = config.getProviderInfoListener();\n        String appName = config.getAppName();\n        if (!registryConfig.isSubscribe()) {\n            // \u6ce8\u518c\u4e2d\u5fc3\u4e0d\u8ba2\u9605\n            if (LOGGER.isInfoEnabled(appName)) {\n                LOGGER.infoWithApp(appName, LogCodes.getLog(LogCodes.INFO_REGISTRY_IGNORE));\n            }\n            return null;\n        }\n        if (!config.isSubscribe()) {\n            // \u670d\u52a1\u4e0d\u8ba2\u9605\n            return null;\n        }\n\n        String serviceName = SofaRegistryHelper.buildListDataId(config, config.getProtocol());\n\n        SofaRegistrySubscribeCallback callback;\n\n        Subscriber listSubscriber = subscribers.get(serviceName);\n        Configurator attrSubscriber;\n        if (listSubscriber != null && providerInfoListener != null) {\n            // \u5df2\u7ecf\u6709\u4eba\u8ba2\u9605\u8fc7\u8fd9\u4e2aKey\uff0c\u90a3\u4e48\u5730\u5740\u5df2\u7ecf\u5b58\u5728\u4e86\uff0c\n            callback = (SofaRegistrySubscribeCallback) listSubscriber.getDataObserver();\n            callback.addProviderInfoListener(serviceName, config, providerInfoListener);\n            // \u4f7f\u7528\u65e7\u6570\u636e\u901a\u77e5\u4e0b\n            callback.handleDataToListener(serviceName, config, providerInfoListener);\n        } else {\n\n            callback = new SofaRegistrySubscribeCallback();\n\n            callback.addProviderInfoListener(serviceName, config, providerInfoListener);\n\n            // \u751f\u6210\u8ba2\u9605\u5bf9\u8c61\uff0c\u5e76\u6dfb\u52a0\u989d\u5916\u5c5e\u6027\n            SubscriberRegistration subscriberRegistration = new SubscriberRegistration(serviceName, callback);\n            String groupId = config.getParameter(SofaRegistryConstants.SOFA_GROUP_KEY);\n            groupId = groupId == null ? SofaRegistryHelper.SUBSCRIBER_LIST_GROUP_ID : groupId;\n            addAttributes(subscriberRegistration, groupId);\n\n            ConfiguratorRegistration configRegistration = new ConfiguratorRegistration(serviceName, callback);\n            addAttributes(configRegistration, SofaRegistryHelper.SUBSCRIBER_CONFIG_GROUP_ID);\n\n            // \u53bb\u914d\u7f6e\u4e2d\u5fc3\u8ba2\u9605\n\n            // \u53bb\u6ce8\u518c\n            listSubscriber = SofaRegistryClient.getRegistryClient(appName, registryConfig).register(\n                subscriberRegistration);\n\n            attrSubscriber = SofaRegistryClient.getRegistryClient(appName, registryConfig).register(configRegistration);\n\n            // \u653e\u5165\u7f13\u5b58\n            subscribers.put(serviceName, listSubscriber);\n            configurators.put(serviceName, attrSubscriber);\n        }\n        // \u7edf\u4e00\u8d70\u5f02\u6b65\u83b7\u53d6\u5730\u5740\uff0c\u6240\u4ee5\u6b64\u5904\u8fd4\u56denull\n        return null;\n    }", "signature": "List<ProviderGroup> subscribe(ConsumerConfig config)", "full_signature": "@Override public List<ProviderGroup> subscribe(ConsumerConfig config)", "class_method_signature": "SofaRegistry.subscribe(ConsumerConfig config)", "testcase": false, "constructor": false, "invocations": ["getProviderInfoListener", "getAppName", "isSubscribe", "isInfoEnabled", "infoWithApp", "getLog", "isSubscribe", "buildListDataId", "getProtocol", "get", "getDataObserver", "addProviderInfoListener", "handleDataToListener", "addProviderInfoListener", "getParameter", "addAttributes", "addAttributes", "register", "getRegistryClient", "register", "getRegistryClient", "put", "put"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}