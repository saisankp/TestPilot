{"test_class": {"identifier": "NanoPiranhaTest", "superclass": "", "interfaces": "", "fields": [], "file": "nano/src/test/java/cloud/piranha/nano/NanoPiranhaTest.java"}, "test_case": {"identifier": "testService6", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testService6() throws Exception {\n        NanoPiranha piranha = new NanoPiranhaBuilder()\n                .directoryResource(\"src/test/wicket\")\n                .filter(\"WicketFilter\", new WicketFilter())\n                .filterInitParam(\"WicketFilter\", \"applicationClassName\", \"cloud.piranha.nano.WicketApplication\")\n                .filterInitParam(\"WicketFilter\", \"filterMappingUrlPattern\", \"/*\")\n                .filterInitParam(\"WicketFilter\", \"wicket.configuration\", \"deployment\")\n                .build();\n\n        NanoRequest request = new NanoRequestBuilder()\n                .servletPath(\"/\")\n                .build();\n\n        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n        NanoResponse response = new NanoResponseBuilder()\n                .outputStream(outputStream)\n                .build();\n\n        piranha.service(request, response);\n        assertTrue(outputStream.toString().contains(\"Hello Wicket\"));\n    }", "signature": "void testService6()", "full_signature": "@Test void testService6()", "class_method_signature": "NanoPiranhaTest.testService6()", "testcase": true, "constructor": false, "invocations": ["build", "filterInitParam", "filterInitParam", "filterInitParam", "filter", "directoryResource", "build", "servletPath", "build", "outputStream", "service", "assertTrue", "contains", "toString"]}, "focal_class": {"identifier": "NanoPiranha", "superclass": "", "interfaces": "implements Piranha", "fields": [{"original_string": "private final LinkedList<Filter> filters;", "modifier": "private final", "type": "LinkedList<Filter>", "declarator": "filters", "var_name": "filters"}, {"original_string": "private Servlet servlet;", "modifier": "private", "type": "Servlet", "declarator": "servlet", "var_name": "servlet"}, {"original_string": "private WebApplication webApplication;", "modifier": "private", "type": "WebApplication", "declarator": "webApplication", "var_name": "webApplication"}], "methods": [{"identifier": "NanoPiranha", "parameters": "()", "modifiers": "public", "return": "", "signature": " NanoPiranha()", "full_signature": "public  NanoPiranha()", "class_method_signature": "NanoPiranha.NanoPiranha()", "testcase": false, "constructor": true}, {"identifier": "addFilter", "parameters": "(Filter filter)", "modifiers": "public", "return": "void", "signature": "void addFilter(Filter filter)", "full_signature": "public void addFilter(Filter filter)", "class_method_signature": "NanoPiranha.addFilter(Filter filter)", "testcase": false, "constructor": false}, {"identifier": "getFilters", "parameters": "()", "modifiers": "public", "return": "List<Filter>", "signature": "List<Filter> getFilters()", "full_signature": "public List<Filter> getFilters()", "class_method_signature": "NanoPiranha.getFilters()", "testcase": false, "constructor": false}, {"identifier": "getServlet", "parameters": "()", "modifiers": "public", "return": "Servlet", "signature": "Servlet getServlet()", "full_signature": "public Servlet getServlet()", "class_method_signature": "NanoPiranha.getServlet()", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getVersion()", "full_signature": "@Override public String getVersion()", "class_method_signature": "NanoPiranha.getVersion()", "testcase": false, "constructor": false}, {"identifier": "getWebApplication", "parameters": "()", "modifiers": "public", "return": "WebApplication", "signature": "WebApplication getWebApplication()", "full_signature": "public WebApplication getWebApplication()", "class_method_signature": "NanoPiranha.getWebApplication()", "testcase": false, "constructor": false}, {"identifier": "service", "parameters": "(ServletRequest servletRequest, ServletResponse servletResponse)", "modifiers": "public", "return": "void", "signature": "void service(ServletRequest servletRequest, ServletResponse servletResponse)", "full_signature": "public void service(ServletRequest servletRequest, ServletResponse servletResponse)", "class_method_signature": "NanoPiranha.service(ServletRequest servletRequest, ServletResponse servletResponse)", "testcase": false, "constructor": false}, {"identifier": "setServlet", "parameters": "(Servlet servlet)", "modifiers": "public", "return": "void", "signature": "void setServlet(Servlet servlet)", "full_signature": "public void setServlet(Servlet servlet)", "class_method_signature": "NanoPiranha.setServlet(Servlet servlet)", "testcase": false, "constructor": false}, {"identifier": "setWebApplication", "parameters": "(WebApplication webApplication)", "modifiers": "public", "return": "void", "signature": "void setWebApplication(WebApplication webApplication)", "full_signature": "public void setWebApplication(WebApplication webApplication)", "class_method_signature": "NanoPiranha.setWebApplication(WebApplication webApplication)", "testcase": false, "constructor": false}], "file": "nano/src/main/java/cloud/piranha/nano/NanoPiranha.java"}, "focal_method": {"identifier": "service", "parameters": "(ServletRequest servletRequest, ServletResponse servletResponse)", "modifiers": "public", "return": "void", "body": "public void service(ServletRequest servletRequest, ServletResponse servletResponse)\n            throws IOException, ServletException {\n        Iterator<Filter> iterator = filters.descendingIterator();\n        NanoFilterChain chain = new NanoFilterChain(servlet);\n        while (iterator.hasNext()) {\n            Filter filter = iterator.next();\n            NanoFilterChain previousChain = chain;\n            chain = new NanoFilterChain(filter, previousChain);\n        }\n        if (servletRequest.getServletContext() == null\n                && servletRequest instanceof NanoRequest) {\n            NanoRequest nanoRequest = (NanoRequest) servletRequest;\n            nanoRequest.setWebApplication(webApplication);\n        }\n        if (servletResponse instanceof NanoResponse) {\n            NanoResponse nanoResponse = (NanoResponse) servletResponse;\n            nanoResponse.setWebApplication(webApplication);\n        }\n        chain.doFilter(servletRequest, servletResponse);\n        servletResponse.flushBuffer();\n    }", "signature": "void service(ServletRequest servletRequest, ServletResponse servletResponse)", "full_signature": "public void service(ServletRequest servletRequest, ServletResponse servletResponse)", "class_method_signature": "NanoPiranha.service(ServletRequest servletRequest, ServletResponse servletResponse)", "testcase": false, "constructor": false, "invocations": ["descendingIterator", "hasNext", "next", "getServletContext", "setWebApplication", "setWebApplication", "doFilter", "flushBuffer"]}, "repository": {"repo_id": 114777829, "url": "https://github.com/piranhacloud/piranha", "stars": 27, "created": "12/19/2017 2:55:23 PM +00:00", "updates": "2020-01-27T11:57:41+00:00", "fork": "False", "license": "licensed"}}