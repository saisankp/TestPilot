{"test_class": {"identifier": "ByteArrayTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "ByteArray byteArray = null;", "modifier": "", "type": "ByteArray", "declarator": "byteArray = null", "var_name": "byteArray"}], "file": "tlc-commons-project/tlc-commons-buffer/src/test/java/com/thelastcheck/commons/buffer/ByteArrayTest.java"}, "test_case": {"identifier": "testRead", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRead() {\n        byteArray = new ByteArray(200, ByteArray.EBCDIC_CHARSET_NAME);\n        byte[] value = { 0, 1, 2, 3, 4 };\n        byteArray.write(value, 0);\n        byteArray.write(value, 20);\n        // byteArray.write((byte) 0, 0);\n        byte[] bytes1 = byteArray.read(0, 5);\n        byte[] bytes2 = byteArray.read(20, 5);\n        for (int i = 0; i < bytes2.length; i++) {\n            assertTrue(bytes1[i] == bytes2[i]);\n        }\n    }", "signature": "void testRead()", "full_signature": "@Test public void testRead()", "class_method_signature": "ByteArrayTest.testRead()", "testcase": true, "constructor": false, "invocations": ["write", "write", "read", "read", "assertTrue"]}, "focal_class": {"identifier": "ByteArray", "superclass": "", "interfaces": "implements Serializable, Cloneable", "fields": [{"original_string": "private static final long serialVersionUID = -399296889418381603L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -399296889418381603L", "var_name": "serialVersionUID"}, {"original_string": "private ByteBuffer value;", "modifier": "private", "type": "ByteBuffer", "declarator": "value", "var_name": "value"}, {"original_string": "private String encoding;", "modifier": "private", "type": "String", "declarator": "encoding", "var_name": "encoding"}, {"original_string": "public static final String ASCII_CHARSET_NAME = \"US-ASCII\";", "modifier": "public static final", "type": "String", "declarator": "ASCII_CHARSET_NAME = \"US-ASCII\"", "var_name": "ASCII_CHARSET_NAME"}, {"original_string": "public static final String EBCDIC_CHARSET_NAME = \"IBM1047\";", "modifier": "public static final", "type": "String", "declarator": "EBCDIC_CHARSET_NAME = \"IBM1047\"", "var_name": "EBCDIC_CHARSET_NAME"}, {"original_string": "private static final String SPACE = \" \";", "modifier": "private static final", "type": "String", "declarator": "SPACE = \" \"", "var_name": "SPACE"}, {"original_string": "private static final Map<String, Byte> encodeMap;", "modifier": "private static final", "type": "Map<String, Byte>", "declarator": "encodeMap", "var_name": "encodeMap"}, {"original_string": "private static final Pattern psRegexPattern;", "modifier": "private static final", "type": "Pattern", "declarator": "psRegexPattern", "var_name": "psRegexPattern"}, {"original_string": "private static final ByteArrayConverter bacAsciiToEbcdic = new AsciiToEbcdicByteArrayConverter();", "modifier": "private static final", "type": "ByteArrayConverter", "declarator": "bacAsciiToEbcdic = new AsciiToEbcdicByteArrayConverter()", "var_name": "bacAsciiToEbcdic"}, {"original_string": "private static final ByteArrayConverter bacEbcdicToAscii = new EbcdicToAsciiByteArrayConverter();", "modifier": "private static final", "type": "ByteArrayConverter", "declarator": "bacEbcdicToAscii = new EbcdicToAsciiByteArrayConverter()", "var_name": "bacEbcdicToAscii"}], "methods": [{"identifier": "ByteArray", "parameters": "(int size)", "modifiers": "public", "return": "", "signature": " ByteArray(int size)", "full_signature": "public  ByteArray(int size)", "class_method_signature": "ByteArray.ByteArray(int size)", "testcase": false, "constructor": true}, {"identifier": "ByteArray", "parameters": "(int size, String encoding)", "modifiers": "public", "return": "", "signature": " ByteArray(int size, String encoding)", "full_signature": "public  ByteArray(int size, String encoding)", "class_method_signature": "ByteArray.ByteArray(int size, String encoding)", "testcase": false, "constructor": true}, {"identifier": "ByteArray", "parameters": "(int size, ByteOrder order)", "modifiers": "public", "return": "", "signature": " ByteArray(int size, ByteOrder order)", "full_signature": "public  ByteArray(int size, ByteOrder order)", "class_method_signature": "ByteArray.ByteArray(int size, ByteOrder order)", "testcase": false, "constructor": true}, {"identifier": "ByteArray", "parameters": "(int size, String encoding, ByteOrder order)", "modifiers": "public", "return": "", "signature": " ByteArray(int size, String encoding, ByteOrder order)", "full_signature": "public  ByteArray(int size, String encoding, ByteOrder order)", "class_method_signature": "ByteArray.ByteArray(int size, String encoding, ByteOrder order)", "testcase": false, "constructor": true}, {"identifier": "ByteArray", "parameters": "(byte[] array)", "modifiers": "public", "return": "", "signature": " ByteArray(byte[] array)", "full_signature": "public  ByteArray(byte[] array)", "class_method_signature": "ByteArray.ByteArray(byte[] array)", "testcase": false, "constructor": true}, {"identifier": "ByteArray", "parameters": "(byte[] array, ByteOrder order)", "modifiers": "public", "return": "", "signature": " ByteArray(byte[] array, ByteOrder order)", "full_signature": "public  ByteArray(byte[] array, ByteOrder order)", "class_method_signature": "ByteArray.ByteArray(byte[] array, ByteOrder order)", "testcase": false, "constructor": true}, {"identifier": "ByteArray", "parameters": "(byte[] array, String encoding)", "modifiers": "public", "return": "", "signature": " ByteArray(byte[] array, String encoding)", "full_signature": "public  ByteArray(byte[] array, String encoding)", "class_method_signature": "ByteArray.ByteArray(byte[] array, String encoding)", "testcase": false, "constructor": true}, {"identifier": "ByteArray", "parameters": "(byte[] array, String encoding, ByteOrder order)", "modifiers": "public", "return": "", "signature": " ByteArray(byte[] array, String encoding, ByteOrder order)", "full_signature": "public  ByteArray(byte[] array, String encoding, ByteOrder order)", "class_method_signature": "ByteArray.ByteArray(byte[] array, String encoding, ByteOrder order)", "testcase": false, "constructor": true}, {"identifier": "ByteArray", "parameters": "(ByteArray byteArray)", "modifiers": "public", "return": "", "signature": " ByteArray(ByteArray byteArray)", "full_signature": "public  ByteArray(ByteArray byteArray)", "class_method_signature": "ByteArray.ByteArray(ByteArray byteArray)", "testcase": false, "constructor": true}, {"identifier": "ByteArray", "parameters": "(ByteBuffer buffer)", "modifiers": "public", "return": "", "signature": " ByteArray(ByteBuffer buffer)", "full_signature": "public  ByteArray(ByteBuffer buffer)", "class_method_signature": "ByteArray.ByteArray(ByteBuffer buffer)", "testcase": false, "constructor": true}, {"identifier": "ByteArray", "parameters": "(ByteBuffer buffer, String encoding)", "modifiers": "public", "return": "", "signature": " ByteArray(ByteBuffer buffer, String encoding)", "full_signature": "public  ByteArray(ByteBuffer buffer, String encoding)", "class_method_signature": "ByteArray.ByteArray(ByteBuffer buffer, String encoding)", "testcase": false, "constructor": true}, {"identifier": "clone", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object clone()", "full_signature": "public Object clone()", "class_method_signature": "ByteArray.clone()", "testcase": false, "constructor": false}, {"identifier": "slice", "parameters": "(int displacement, int length)", "modifiers": "public", "return": "ByteArray", "signature": "ByteArray slice(int displacement, int length)", "full_signature": "public ByteArray slice(int displacement, int length)", "class_method_signature": "ByteArray.slice(int displacement, int length)", "testcase": false, "constructor": false}, {"identifier": "duplicate", "parameters": "()", "modifiers": "public", "return": "ByteArray", "signature": "ByteArray duplicate()", "full_signature": "public ByteArray duplicate()", "class_method_signature": "ByteArray.duplicate()", "testcase": false, "constructor": false}, {"identifier": "testBit", "parameters": "(int displacement, byte mask)", "modifiers": "public", "return": "boolean", "signature": "boolean testBit(int displacement, byte mask)", "full_signature": "public boolean testBit(int displacement, byte mask)", "class_method_signature": "ByteArray.testBit(int displacement, byte mask)", "testcase": false, "constructor": false}, {"identifier": "setBit", "parameters": "(int displacement, byte mask)", "modifiers": "public", "return": "ByteArray", "signature": "ByteArray setBit(int displacement, byte mask)", "full_signature": "public ByteArray setBit(int displacement, byte mask)", "class_method_signature": "ByteArray.setBit(int displacement, byte mask)", "testcase": false, "constructor": false}, {"identifier": "setBit", "parameters": "(int displacement, byte mask, boolean b)", "modifiers": "public", "return": "ByteArray", "signature": "ByteArray setBit(int displacement, byte mask, boolean b)", "full_signature": "public ByteArray setBit(int displacement, byte mask, boolean b)", "class_method_signature": "ByteArray.setBit(int displacement, byte mask, boolean b)", "testcase": false, "constructor": false}, {"identifier": "clearBit", "parameters": "(int displacement, byte mask)", "modifiers": "public", "return": "ByteArray", "signature": "ByteArray clearBit(int displacement, byte mask)", "full_signature": "public ByteArray clearBit(int displacement, byte mask)", "class_method_signature": "ByteArray.clearBit(int displacement, byte mask)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(int displacement, int length)", "modifiers": "public", "return": "byte[]", "signature": "byte[] read(int displacement, int length)", "full_signature": "public byte[] read(int displacement, int length)", "class_method_signature": "ByteArray.read(int displacement, int length)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(int displacement, byte[] bytes)", "modifiers": "public", "return": "int", "signature": "int read(int displacement, byte[] bytes)", "full_signature": "public int read(int displacement, byte[] bytes)", "class_method_signature": "ByteArray.read(int displacement, byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(int displacement, byte[] bytes, int offset, int length)", "modifiers": "public", "return": "int", "signature": "int read(int displacement, byte[] bytes, int offset, int length)", "full_signature": "public int read(int displacement, byte[] bytes, int offset, int length)", "class_method_signature": "ByteArray.read(int displacement, byte[] bytes, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "readAsByte", "parameters": "(int displacement)", "modifiers": "public", "return": "byte", "signature": "byte readAsByte(int displacement)", "full_signature": "public byte readAsByte(int displacement)", "class_method_signature": "ByteArray.readAsByte(int displacement)", "testcase": false, "constructor": false}, {"identifier": "readAsByteArray", "parameters": "(int displacement, int length)", "modifiers": "public", "return": "ByteArray", "signature": "ByteArray readAsByteArray(int displacement, int length)", "full_signature": "public ByteArray readAsByteArray(int displacement, int length)", "class_method_signature": "ByteArray.readAsByteArray(int displacement, int length)", "testcase": false, "constructor": false}, {"identifier": "readAsChar", "parameters": "(int displacement)", "modifiers": "public", "return": "char", "signature": "char readAsChar(int displacement)", "full_signature": "public char readAsChar(int displacement)", "class_method_signature": "ByteArray.readAsChar(int displacement)", "testcase": false, "constructor": false}, {"identifier": "readAsCharArray", "parameters": "(int displacement, int length)", "modifiers": "public", "return": "char[]", "signature": "char[] readAsCharArray(int displacement, int length)", "full_signature": "public char[] readAsCharArray(int displacement, int length)", "class_method_signature": "ByteArray.readAsCharArray(int displacement, int length)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(int displacement, char[] chars)", "modifiers": "public", "return": "int", "signature": "int read(int displacement, char[] chars)", "full_signature": "public int read(int displacement, char[] chars)", "class_method_signature": "ByteArray.read(int displacement, char[] chars)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(int displacement, char[] chars, int offset, int length)", "modifiers": "public", "return": "int", "signature": "int read(int displacement, char[] chars, int offset, int length)", "full_signature": "public int read(int displacement, char[] chars, int offset, int length)", "class_method_signature": "ByteArray.read(int displacement, char[] chars, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "readAsString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String readAsString()", "full_signature": "public String readAsString()", "class_method_signature": "ByteArray.readAsString()", "testcase": false, "constructor": false}, {"identifier": "readAsString", "parameters": "(int displacement)", "modifiers": "public", "return": "String", "signature": "String readAsString(int displacement)", "full_signature": "public String readAsString(int displacement)", "class_method_signature": "ByteArray.readAsString(int displacement)", "testcase": false, "constructor": false}, {"identifier": "readAsString", "parameters": "(int displacement, int length)", "modifiers": "public", "return": "String", "signature": "String readAsString(int displacement, int length)", "full_signature": "public String readAsString(int displacement, int length)", "class_method_signature": "ByteArray.readAsString(int displacement, int length)", "testcase": false, "constructor": false}, {"identifier": "readAsString", "parameters": "(int displacement, int length, boolean nts)", "modifiers": "public", "return": "String", "signature": "String readAsString(int displacement, int length, boolean nts)", "full_signature": "public String readAsString(int displacement, int length, boolean nts)", "class_method_signature": "ByteArray.readAsString(int displacement, int length, boolean nts)", "testcase": false, "constructor": false}, {"identifier": "readAsFloat", "parameters": "(int displacement)", "modifiers": "public", "return": "float", "signature": "float readAsFloat(int displacement)", "full_signature": "public float readAsFloat(int displacement)", "class_method_signature": "ByteArray.readAsFloat(int displacement)", "testcase": false, "constructor": false}, {"identifier": "readAsDouble", "parameters": "(int displacement)", "modifiers": "public", "return": "double", "signature": "double readAsDouble(int displacement)", "full_signature": "public double readAsDouble(int displacement)", "class_method_signature": "ByteArray.readAsDouble(int displacement)", "testcase": false, "constructor": false}, {"identifier": "readAsShort", "parameters": "(int displacement)", "modifiers": "public", "return": "short", "signature": "short readAsShort(int displacement)", "full_signature": "public short readAsShort(int displacement)", "class_method_signature": "ByteArray.readAsShort(int displacement)", "testcase": false, "constructor": false}, {"identifier": "readAsInt", "parameters": "(int displacement)", "modifiers": "public", "return": "int", "signature": "int readAsInt(int displacement)", "full_signature": "public int readAsInt(int displacement)", "class_method_signature": "ByteArray.readAsInt(int displacement)", "testcase": false, "constructor": false}, {"identifier": "readAsLong", "parameters": "(int displacement)", "modifiers": "public", "return": "long", "signature": "long readAsLong(int displacement)", "full_signature": "public long readAsLong(int displacement)", "class_method_signature": "ByteArray.readAsLong(int displacement)", "testcase": false, "constructor": false}, {"identifier": "readPns", "parameters": "(int displacement, int length)", "modifiers": "public", "return": "String", "signature": "String readPns(int displacement, int length)", "full_signature": "public String readPns(int displacement, int length)", "class_method_signature": "ByteArray.readPns(int displacement, int length)", "testcase": false, "constructor": false}, {"identifier": "readPns", "parameters": "(int displacement, int length, boolean convertAtoF)", "modifiers": "public", "return": "String", "signature": "String readPns(int displacement, int length, boolean convertAtoF)", "full_signature": "public String readPns(int displacement, int length, boolean convertAtoF)", "class_method_signature": "ByteArray.readPns(int displacement, int length, boolean convertAtoF)", "testcase": false, "constructor": false}, {"identifier": "convertAtoF", "parameters": "(byte nybble)", "modifiers": "private", "return": "char", "signature": "char convertAtoF(byte nybble)", "full_signature": "private char convertAtoF(byte nybble)", "class_method_signature": "ByteArray.convertAtoF(byte nybble)", "testcase": false, "constructor": false}, {"identifier": "fill", "parameters": "()", "modifiers": "public", "return": "ByteArray", "signature": "ByteArray fill()", "full_signature": "public ByteArray fill()", "class_method_signature": "ByteArray.fill()", "testcase": false, "constructor": false}, {"identifier": "fill", "parameters": "(byte filler)", "modifiers": "public", "return": "ByteArray", "signature": "ByteArray fill(byte filler)", "full_signature": "public ByteArray fill(byte filler)", "class_method_signature": "ByteArray.fill(byte filler)", "testcase": false, "constructor": false}, {"identifier": "fill", "parameters": "(byte filler, int displacement, int length)", "modifiers": "public", "return": "ByteArray", "signature": "ByteArray fill(byte filler, int displacement, int length)", "full_signature": "public ByteArray fill(byte filler, int displacement, int length)", "class_method_signature": "ByteArray.fill(byte filler, int displacement, int length)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(char[] chars, int displacement)", "modifiers": "public", "return": "ByteArray", "signature": "ByteArray write(char[] chars, int displacement)", "full_signature": "public ByteArray write(char[] chars, int displacement)", "class_method_signature": "ByteArray.write(char[] chars, int displacement)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(char[] chars, int offset, int length, int displacement)", "modifiers": "public", "return": "ByteArray", "signature": "ByteArray write(char[] chars, int offset, int length, int displacement)", "full_signature": "public ByteArray write(char[] chars, int offset, int length, int displacement)", "class_method_signature": "ByteArray.write(char[] chars, int offset, int length, int displacement)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(ByteArray byteArray, int displacement, int length)", "modifiers": "public", "return": "ByteArray", "signature": "ByteArray write(ByteArray byteArray, int displacement, int length)", "full_signature": "public ByteArray write(ByteArray byteArray, int displacement, int length)", "class_method_signature": "ByteArray.write(ByteArray byteArray, int displacement, int length)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(ByteArray byteArray, int displacement)", "modifiers": "public", "return": "ByteArray", "signature": "ByteArray write(ByteArray byteArray, int displacement)", "full_signature": "public ByteArray write(ByteArray byteArray, int displacement)", "class_method_signature": "ByteArray.write(ByteArray byteArray, int displacement)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(byte[] bytes, int displacement)", "modifiers": "public", "return": "ByteArray", "signature": "ByteArray write(byte[] bytes, int displacement)", "full_signature": "public ByteArray write(byte[] bytes, int displacement)", "class_method_signature": "ByteArray.write(byte[] bytes, int displacement)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(byte[] bytes, int offset, int length, int displacement)", "modifiers": "public", "return": "ByteArray", "signature": "ByteArray write(byte[] bytes, int offset, int length, int displacement)", "full_signature": "public ByteArray write(byte[] bytes, int offset, int length, int displacement)", "class_method_signature": "ByteArray.write(byte[] bytes, int offset, int length, int displacement)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(String s, int displacement)", "modifiers": "public", "return": "ByteArray", "signature": "ByteArray write(String s, int displacement)", "full_signature": "public ByteArray write(String s, int displacement)", "class_method_signature": "ByteArray.write(String s, int displacement)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(String s, int displacement, int length)", "modifiers": "public", "return": "ByteArray", "signature": "ByteArray write(String s, int displacement, int length)", "full_signature": "public ByteArray write(String s, int displacement, int length)", "class_method_signature": "ByteArray.write(String s, int displacement, int length)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(String s, int displacement, int length, boolean nts)", "modifiers": "public", "return": "ByteArray", "signature": "ByteArray write(String s, int displacement, int length, boolean nts)", "full_signature": "public ByteArray write(String s, int displacement, int length, boolean nts)", "class_method_signature": "ByteArray.write(String s, int displacement, int length, boolean nts)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(short s, int displacement)", "modifiers": "public", "return": "ByteArray", "signature": "ByteArray write(short s, int displacement)", "full_signature": "public ByteArray write(short s, int displacement)", "class_method_signature": "ByteArray.write(short s, int displacement)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(char c, int displacement)", "modifiers": "public", "return": "ByteArray", "signature": "ByteArray write(char c, int displacement)", "full_signature": "public ByteArray write(char c, int displacement)", "class_method_signature": "ByteArray.write(char c, int displacement)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(byte b, int displacement)", "modifiers": "public", "return": "ByteArray", "signature": "ByteArray write(byte b, int displacement)", "full_signature": "public ByteArray write(byte b, int displacement)", "class_method_signature": "ByteArray.write(byte b, int displacement)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(int i, int displacement)", "modifiers": "public", "return": "ByteArray", "signature": "ByteArray write(int i, int displacement)", "full_signature": "public ByteArray write(int i, int displacement)", "class_method_signature": "ByteArray.write(int i, int displacement)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(long i, int displacement)", "modifiers": "public", "return": "ByteArray", "signature": "ByteArray write(long i, int displacement)", "full_signature": "public ByteArray write(long i, int displacement)", "class_method_signature": "ByteArray.write(long i, int displacement)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(float f, int displacement)", "modifiers": "public", "return": "ByteArray", "signature": "ByteArray write(float f, int displacement)", "full_signature": "public ByteArray write(float f, int displacement)", "class_method_signature": "ByteArray.write(float f, int displacement)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(double d, int displacement)", "modifiers": "public", "return": "ByteArray", "signature": "ByteArray write(double d, int displacement)", "full_signature": "public ByteArray write(double d, int displacement)", "class_method_signature": "ByteArray.write(double d, int displacement)", "testcase": false, "constructor": false}, {"identifier": "writeAsPs", "parameters": "(String s, int displacement, int length)", "modifiers": "public", "return": "ByteArray", "signature": "ByteArray writeAsPs(String s, int displacement, int length)", "full_signature": "public ByteArray writeAsPs(String s, int displacement, int length)", "class_method_signature": "ByteArray.writeAsPs(String s, int displacement, int length)", "testcase": false, "constructor": false}, {"identifier": "writeAsPns", "parameters": "(String s, int displacement, int length)", "modifiers": "public", "return": "ByteArray", "signature": "ByteArray writeAsPns(String s, int displacement, int length)", "full_signature": "public ByteArray writeAsPns(String s, int displacement, int length)", "class_method_signature": "ByteArray.writeAsPns(String s, int displacement, int length)", "testcase": false, "constructor": false}, {"identifier": "writeAsPns", "parameters": "(String s, int displacement, int length,\n                                char filler)", "modifiers": "public", "return": "ByteArray", "signature": "ByteArray writeAsPns(String s, int displacement, int length,\n                                char filler)", "full_signature": "public ByteArray writeAsPns(String s, int displacement, int length,\n                                char filler)", "class_method_signature": "ByteArray.writeAsPns(String s, int displacement, int length,\n                                char filler)", "testcase": false, "constructor": false}, {"identifier": "convertCharToNybble", "parameters": "(char fromChar)", "modifiers": "private static", "return": "byte", "signature": "byte convertCharToNybble(char fromChar)", "full_signature": "private static byte convertCharToNybble(char fromChar)", "class_method_signature": "ByteArray.convertCharToNybble(char fromChar)", "testcase": false, "constructor": false}, {"identifier": "getSpaceFiller", "parameters": "(String encoding)", "modifiers": "public static", "return": "byte", "signature": "byte getSpaceFiller(String encoding)", "full_signature": "public static byte getSpaceFiller(String encoding)", "class_method_signature": "ByteArray.getSpaceFiller(String encoding)", "testcase": false, "constructor": false}, {"identifier": "valueOf", "parameters": "(String string)", "modifiers": "public static", "return": "ByteArray", "signature": "ByteArray valueOf(String string)", "full_signature": "public static ByteArray valueOf(String string)", "class_method_signature": "ByteArray.valueOf(String string)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object anObject)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object anObject)", "full_signature": "@Override public boolean equals(Object anObject)", "class_method_signature": "ByteArray.equals(Object anObject)", "testcase": false, "constructor": false}, {"identifier": "equalTo", "parameters": "(ByteArray a, ByteArray b)", "modifiers": "public static", "return": "boolean", "signature": "boolean equalTo(ByteArray a, ByteArray b)", "full_signature": "public static boolean equalTo(ByteArray a, ByteArray b)", "class_method_signature": "ByteArray.equalTo(ByteArray a, ByteArray b)", "testcase": false, "constructor": false}, {"identifier": "equalSame", "parameters": "(byte b)", "modifiers": "public", "return": "boolean", "signature": "boolean equalSame(byte b)", "full_signature": "public boolean equalSame(byte b)", "class_method_signature": "ByteArray.equalSame(byte b)", "testcase": false, "constructor": false}, {"identifier": "equalSame", "parameters": "(byte b, int displacement, int length)", "modifiers": "public", "return": "boolean", "signature": "boolean equalSame(byte b, int displacement, int length)", "full_signature": "public boolean equalSame(byte b, int displacement, int length)", "class_method_signature": "ByteArray.equalSame(byte b, int displacement, int length)", "testcase": false, "constructor": false}, {"identifier": "getLength", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getLength()", "full_signature": "public int getLength()", "class_method_signature": "ByteArray.getLength()", "testcase": false, "constructor": false}, {"identifier": "hasArray", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasArray()", "full_signature": "public boolean hasArray()", "class_method_signature": "ByteArray.hasArray()", "testcase": false, "constructor": false}, {"identifier": "getArray", "parameters": "()", "modifiers": "public", "return": "UnderlyingArray", "signature": "UnderlyingArray getArray()", "full_signature": "public UnderlyingArray getArray()", "class_method_signature": "ByteArray.getArray()", "testcase": false, "constructor": false}, {"identifier": "getBytes", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getBytes()", "full_signature": "public byte[] getBytes()", "class_method_signature": "ByteArray.getBytes()", "testcase": false, "constructor": false}, {"identifier": "getByteArray", "parameters": "()", "modifiers": "@Deprecated public", "return": "byte[]", "signature": "byte[] getByteArray()", "full_signature": "@Deprecated public byte[] getByteArray()", "class_method_signature": "ByteArray.getByteArray()", "testcase": false, "constructor": false}, {"identifier": "setEncoding", "parameters": "(String encoding)", "modifiers": "public", "return": "ByteArray", "signature": "ByteArray setEncoding(String encoding)", "full_signature": "public ByteArray setEncoding(String encoding)", "class_method_signature": "ByteArray.setEncoding(String encoding)", "testcase": false, "constructor": false}, {"identifier": "getEncoding", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getEncoding()", "full_signature": "public String getEncoding()", "class_method_signature": "ByteArray.getEncoding()", "testcase": false, "constructor": false}, {"identifier": "setOrder", "parameters": "(ByteOrder order)", "modifiers": "public", "return": "ByteArray", "signature": "ByteArray setOrder(ByteOrder order)", "full_signature": "public ByteArray setOrder(ByteOrder order)", "class_method_signature": "ByteArray.setOrder(ByteOrder order)", "testcase": false, "constructor": false}, {"identifier": "getOrder", "parameters": "()", "modifiers": "public", "return": "ByteOrder", "signature": "ByteOrder getOrder()", "full_signature": "public ByteOrder getOrder()", "class_method_signature": "ByteArray.getOrder()", "testcase": false, "constructor": false}, {"identifier": "getBuffer", "parameters": "()", "modifiers": "public", "return": "ByteBuffer", "signature": "ByteBuffer getBuffer()", "full_signature": "public ByteBuffer getBuffer()", "class_method_signature": "ByteArray.getBuffer()", "testcase": false, "constructor": false}], "file": "tlc-commons-project/tlc-commons-buffer/src/main/java/com/thelastcheck/commons/buffer/ByteArray.java"}, "focal_method": {"identifier": "read", "parameters": "(int displacement, int length)", "modifiers": "public", "return": "byte[]", "body": "public byte[] read(int displacement, int length) {\n        byte[] tempByteArray = new byte[length];\n        value.position(displacement);\n        value.get(tempByteArray);\n        return tempByteArray;\n    }", "signature": "byte[] read(int displacement, int length)", "full_signature": "public byte[] read(int displacement, int length)", "class_method_signature": "ByteArray.read(int displacement, int length)", "testcase": false, "constructor": false, "invocations": ["position", "get"]}, "repository": {"repo_id": 38943889, "url": "https://github.com/TheLastCheck/tlc.open.java", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 5, "size": 1247, "license": "licensed"}}