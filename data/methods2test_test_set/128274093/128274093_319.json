{"test_class": {"identifier": "QueueDrainHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/util/QueueDrainHelperTest.java"}, "test_case": {"identifier": "postCompleteAlreadyComplete", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void postCompleteAlreadyComplete() {\n\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n\n        Queue<Integer> q = new ArrayDeque<Integer>();\n        q.offer(1);\n\n        AtomicLong state = new AtomicLong(QueueDrainHelper.COMPLETED_MASK);\n\n        QueueDrainHelper.postComplete(ts, q, state, new BooleanSupplier() {\n            @Override\n            public boolean getAsBoolean() throws Exception {\n                return false;\n            }\n        });\n    }", "signature": "void postCompleteAlreadyComplete()", "full_signature": "@Test public void postCompleteAlreadyComplete()", "class_method_signature": "QueueDrainHelperTest.postCompleteAlreadyComplete()", "testcase": true, "constructor": false, "invocations": ["offer", "postComplete"]}, "focal_class": {"identifier": "QueueDrainHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final long COMPLETED_MASK = 0x8000000000000000L;", "modifier": "static final", "type": "long", "declarator": "COMPLETED_MASK = 0x8000000000000000L", "var_name": "COMPLETED_MASK"}, {"original_string": "static final long REQUESTED_MASK = 0x7FFFFFFFFFFFFFFFL;", "modifier": "static final", "type": "long", "declarator": "REQUESTED_MASK = 0x7FFFFFFFFFFFFFFFL", "var_name": "REQUESTED_MASK"}], "methods": [{"identifier": "QueueDrainHelper", "parameters": "()", "modifiers": "private", "return": "", "signature": " QueueDrainHelper()", "full_signature": "private  QueueDrainHelper()", "class_method_signature": "QueueDrainHelper.QueueDrainHelper()", "testcase": false, "constructor": true}, {"identifier": "drainMaxLoop", "parameters": "(SimplePlainQueue<T> q, Subscriber<? super U> a, boolean delayError,\n            Disposable dispose, QueueDrain<T, U> qd)", "modifiers": "public static", "return": "void", "signature": "void drainMaxLoop(SimplePlainQueue<T> q, Subscriber<? super U> a, boolean delayError,\n            Disposable dispose, QueueDrain<T, U> qd)", "full_signature": "public static void drainMaxLoop(SimplePlainQueue<T> q, Subscriber<? super U> a, boolean delayError,\n            Disposable dispose, QueueDrain<T, U> qd)", "class_method_signature": "QueueDrainHelper.drainMaxLoop(SimplePlainQueue<T> q, Subscriber<? super U> a, boolean delayError,\n            Disposable dispose, QueueDrain<T, U> qd)", "testcase": false, "constructor": false}, {"identifier": "checkTerminated", "parameters": "(boolean d, boolean empty,\n            Subscriber<?> s, boolean delayError, SimpleQueue<?> q, QueueDrain<T, U> qd)", "modifiers": "public static", "return": "boolean", "signature": "boolean checkTerminated(boolean d, boolean empty,\n            Subscriber<?> s, boolean delayError, SimpleQueue<?> q, QueueDrain<T, U> qd)", "full_signature": "public static boolean checkTerminated(boolean d, boolean empty,\n            Subscriber<?> s, boolean delayError, SimpleQueue<?> q, QueueDrain<T, U> qd)", "class_method_signature": "QueueDrainHelper.checkTerminated(boolean d, boolean empty,\n            Subscriber<?> s, boolean delayError, SimpleQueue<?> q, QueueDrain<T, U> qd)", "testcase": false, "constructor": false}, {"identifier": "drainLoop", "parameters": "(SimplePlainQueue<T> q, Observer<? super U> a, boolean delayError, Disposable dispose, ObservableQueueDrain<T, U> qd)", "modifiers": "public static", "return": "void", "signature": "void drainLoop(SimplePlainQueue<T> q, Observer<? super U> a, boolean delayError, Disposable dispose, ObservableQueueDrain<T, U> qd)", "full_signature": "public static void drainLoop(SimplePlainQueue<T> q, Observer<? super U> a, boolean delayError, Disposable dispose, ObservableQueueDrain<T, U> qd)", "class_method_signature": "QueueDrainHelper.drainLoop(SimplePlainQueue<T> q, Observer<? super U> a, boolean delayError, Disposable dispose, ObservableQueueDrain<T, U> qd)", "testcase": false, "constructor": false}, {"identifier": "checkTerminated", "parameters": "(boolean d, boolean empty,\n            Observer<?> s, boolean delayError, SimpleQueue<?> q, Disposable disposable, ObservableQueueDrain<T, U> qd)", "modifiers": "public static", "return": "boolean", "signature": "boolean checkTerminated(boolean d, boolean empty,\n            Observer<?> s, boolean delayError, SimpleQueue<?> q, Disposable disposable, ObservableQueueDrain<T, U> qd)", "full_signature": "public static boolean checkTerminated(boolean d, boolean empty,\n            Observer<?> s, boolean delayError, SimpleQueue<?> q, Disposable disposable, ObservableQueueDrain<T, U> qd)", "class_method_signature": "QueueDrainHelper.checkTerminated(boolean d, boolean empty,\n            Observer<?> s, boolean delayError, SimpleQueue<?> q, Disposable disposable, ObservableQueueDrain<T, U> qd)", "testcase": false, "constructor": false}, {"identifier": "createQueue", "parameters": "(int capacityHint)", "modifiers": "public static", "return": "SimpleQueue<T>", "signature": "SimpleQueue<T> createQueue(int capacityHint)", "full_signature": "public static SimpleQueue<T> createQueue(int capacityHint)", "class_method_signature": "QueueDrainHelper.createQueue(int capacityHint)", "testcase": false, "constructor": false}, {"identifier": "request", "parameters": "(Subscription s, int prefetch)", "modifiers": "public static", "return": "void", "signature": "void request(Subscription s, int prefetch)", "full_signature": "public static void request(Subscription s, int prefetch)", "class_method_signature": "QueueDrainHelper.request(Subscription s, int prefetch)", "testcase": false, "constructor": false}, {"identifier": "postCompleteRequest", "parameters": "(long n,\n                                                  Subscriber<? super T> actual,\n                                                  Queue<T> queue,\n                                                  AtomicLong state,\n                                                  BooleanSupplier isCancelled)", "modifiers": "public static", "return": "boolean", "signature": "boolean postCompleteRequest(long n,\n                                                  Subscriber<? super T> actual,\n                                                  Queue<T> queue,\n                                                  AtomicLong state,\n                                                  BooleanSupplier isCancelled)", "full_signature": "public static boolean postCompleteRequest(long n,\n                                                  Subscriber<? super T> actual,\n                                                  Queue<T> queue,\n                                                  AtomicLong state,\n                                                  BooleanSupplier isCancelled)", "class_method_signature": "QueueDrainHelper.postCompleteRequest(long n,\n                                                  Subscriber<? super T> actual,\n                                                  Queue<T> queue,\n                                                  AtomicLong state,\n                                                  BooleanSupplier isCancelled)", "testcase": false, "constructor": false}, {"identifier": "isCancelled", "parameters": "(BooleanSupplier cancelled)", "modifiers": "static", "return": "boolean", "signature": "boolean isCancelled(BooleanSupplier cancelled)", "full_signature": "static boolean isCancelled(BooleanSupplier cancelled)", "class_method_signature": "QueueDrainHelper.isCancelled(BooleanSupplier cancelled)", "testcase": false, "constructor": false}, {"identifier": "postCompleteDrain", "parameters": "(long n,\n                                         Subscriber<? super T> actual,\n                                         Queue<T> queue,\n                                         AtomicLong state,\n                                         BooleanSupplier isCancelled)", "modifiers": "static", "return": "boolean", "signature": "boolean postCompleteDrain(long n,\n                                         Subscriber<? super T> actual,\n                                         Queue<T> queue,\n                                         AtomicLong state,\n                                         BooleanSupplier isCancelled)", "full_signature": "static boolean postCompleteDrain(long n,\n                                         Subscriber<? super T> actual,\n                                         Queue<T> queue,\n                                         AtomicLong state,\n                                         BooleanSupplier isCancelled)", "class_method_signature": "QueueDrainHelper.postCompleteDrain(long n,\n                                         Subscriber<? super T> actual,\n                                         Queue<T> queue,\n                                         AtomicLong state,\n                                         BooleanSupplier isCancelled)", "testcase": false, "constructor": false}, {"identifier": "postComplete", "parameters": "(Subscriber<? super T> actual,\n                                        Queue<T> queue,\n                                        AtomicLong state,\n                                        BooleanSupplier isCancelled)", "modifiers": "public static", "return": "void", "signature": "void postComplete(Subscriber<? super T> actual,\n                                        Queue<T> queue,\n                                        AtomicLong state,\n                                        BooleanSupplier isCancelled)", "full_signature": "public static void postComplete(Subscriber<? super T> actual,\n                                        Queue<T> queue,\n                                        AtomicLong state,\n                                        BooleanSupplier isCancelled)", "class_method_signature": "QueueDrainHelper.postComplete(Subscriber<? super T> actual,\n                                        Queue<T> queue,\n                                        AtomicLong state,\n                                        BooleanSupplier isCancelled)", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/util/QueueDrainHelper.java"}, "focal_method": {"identifier": "postComplete", "parameters": "(Subscriber<? super T> actual,\n                                        Queue<T> queue,\n                                        AtomicLong state,\n                                        BooleanSupplier isCancelled)", "modifiers": "public static", "return": "void", "body": "public static <T> void postComplete(Subscriber<? super T> actual,\n                                        Queue<T> queue,\n                                        AtomicLong state,\n                                        BooleanSupplier isCancelled) {\n\n        if (queue.isEmpty()) {\n            actual.onComplete();\n            return;\n        }\n\n        if (postCompleteDrain(state.get(), actual, queue, state, isCancelled)) {\n            return;\n        }\n\n        for (; ; ) {\n            long r = state.get();\n\n            if ((r & COMPLETED_MASK) != 0L) {\n                return;\n            }\n\n            long u = r | COMPLETED_MASK;\n            // (active, r) -> (complete, r) transition\n            if (state.compareAndSet(r, u)) {\n                // if the requested amount was non-zero, drain the queue\n                if (r != 0L) {\n                    postCompleteDrain(u, actual, queue, state, isCancelled);\n                }\n\n                return;\n            }\n        }\n\n    }", "signature": "void postComplete(Subscriber<? super T> actual,\n                                        Queue<T> queue,\n                                        AtomicLong state,\n                                        BooleanSupplier isCancelled)", "full_signature": "public static void postComplete(Subscriber<? super T> actual,\n                                        Queue<T> queue,\n                                        AtomicLong state,\n                                        BooleanSupplier isCancelled)", "class_method_signature": "QueueDrainHelper.postComplete(Subscriber<? super T> actual,\n                                        Queue<T> queue,\n                                        AtomicLong state,\n                                        BooleanSupplier isCancelled)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "onComplete", "postCompleteDrain", "get", "get", "compareAndSet", "postCompleteDrain"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}