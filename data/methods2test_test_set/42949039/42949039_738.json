{"test_class": {"identifier": "AwsHelperTest", "superclass": "extends AbstractDaoTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private AwsHelper awsHelper;", "modifier": "@Autowired\n    private", "type": "AwsHelper", "declarator": "awsHelper", "var_name": "awsHelper"}], "file": "herd-code/herd-dao/src/test/java/org/finra/herd/dao/helper/AwsHelperTest.java"}, "test_case": {"identifier": "testGetClientConfiguration", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetClientConfiguration() throws Exception\n    {\n        // Try to get AWS parameters using all possible permutations of HTTP proxy settings.\n        for (String testHttpProxyHost : Arrays.asList(STRING_VALUE, BLANK_TEXT, null))\n        {\n            for (Integer testHttpProxyPort : Arrays.asList(INTEGER_VALUE, null))\n            {\n                // Create AWS parameters DTO.\n                AwsParamsDto testAwsParamsDto = awsHelper.getAwsParamsDto();\n                testAwsParamsDto.setHttpProxyHost(testHttpProxyHost);\n                testAwsParamsDto.setHttpProxyPort(testHttpProxyPort);\n\n                // Get client configuration.\n                ClientConfiguration resultClientConfiguration = awsHelper.getClientConfiguration(testAwsParamsDto);\n\n                // Validate the results.\n                assertNotNull(resultClientConfiguration);\n                // The proxy settings are set only when both host and port are specified in the AWS parameters DTO.\n                if (STRING_VALUE.equals(testHttpProxyHost) && INTEGER_VALUE.equals(testHttpProxyPort))\n                {\n                    assertEquals(testHttpProxyHost, resultClientConfiguration.getProxyHost());\n                    assertEquals(testHttpProxyPort, Integer.valueOf(resultClientConfiguration.getProxyPort()));\n                }\n                else\n                {\n                    assertNull(resultClientConfiguration.getProxyHost());\n                    assertEquals(-1, resultClientConfiguration.getProxyPort());\n                }\n            }\n        }\n    }", "signature": "void testGetClientConfiguration()", "full_signature": "@Test public void testGetClientConfiguration()", "class_method_signature": "AwsHelperTest.testGetClientConfiguration()", "testcase": true, "constructor": false, "invocations": ["asList", "asList", "getAwsParamsDto", "setHttpProxyHost", "setHttpProxyPort", "getClientConfiguration", "assertNotNull", "equals", "equals", "assertEquals", "getProxyHost", "assertEquals", "valueOf", "getProxyPort", "assertNull", "getProxyHost", "assertEquals", "getProxyPort"]}, "focal_class": {"identifier": "AwsHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int BITS_PER_BYTE = 8;", "modifier": "private static final", "type": "int", "declarator": "BITS_PER_BYTE = 8", "var_name": "BITS_PER_BYTE"}, {"original_string": "@Autowired\n    protected ConfigurationHelper configurationHelper;", "modifier": "@Autowired\n    protected", "type": "ConfigurationHelper", "declarator": "configurationHelper", "var_name": "configurationHelper"}, {"original_string": "@Autowired\n    protected HerdStringHelper herdStringHelper;", "modifier": "@Autowired\n    protected", "type": "HerdStringHelper", "declarator": "herdStringHelper", "var_name": "herdStringHelper"}, {"original_string": "@Autowired\n    protected RetryPolicyFactory retryPolicyFactory;", "modifier": "@Autowired\n    protected", "type": "RetryPolicyFactory", "declarator": "retryPolicyFactory", "var_name": "retryPolicyFactory"}], "methods": [{"identifier": "getAwsParamsDto", "parameters": "()", "modifiers": "public", "return": "AwsParamsDto", "signature": "AwsParamsDto getAwsParamsDto()", "full_signature": "public AwsParamsDto getAwsParamsDto()", "class_method_signature": "AwsHelper.getAwsParamsDto()", "testcase": false, "constructor": false}, {"identifier": "getClientConfiguration", "parameters": "(AwsParamsDto awsParamsDto)", "modifiers": "public", "return": "ClientConfiguration", "signature": "ClientConfiguration getClientConfiguration(AwsParamsDto awsParamsDto)", "full_signature": "public ClientConfiguration getClientConfiguration(AwsParamsDto awsParamsDto)", "class_method_signature": "AwsHelper.getClientConfiguration(AwsParamsDto awsParamsDto)", "testcase": false, "constructor": false}, {"identifier": "getTransferRateInKilobytesPerSecond", "parameters": "(Long totalBytesTransferred, Long durationMillis)", "modifiers": "public", "return": "Double", "signature": "Double getTransferRateInKilobytesPerSecond(Long totalBytesTransferred, Long durationMillis)", "full_signature": "public Double getTransferRateInKilobytesPerSecond(Long totalBytesTransferred, Long durationMillis)", "class_method_signature": "AwsHelper.getTransferRateInKilobytesPerSecond(Long totalBytesTransferred, Long durationMillis)", "testcase": false, "constructor": false}, {"identifier": "getTransferRateInMegabitsPerSecond", "parameters": "(Long totalBytesTransferred, Long durationMillis)", "modifiers": "public", "return": "Double", "signature": "Double getTransferRateInMegabitsPerSecond(Long totalBytesTransferred, Long durationMillis)", "full_signature": "public Double getTransferRateInMegabitsPerSecond(Long totalBytesTransferred, Long durationMillis)", "class_method_signature": "AwsHelper.getTransferRateInMegabitsPerSecond(Long totalBytesTransferred, Long durationMillis)", "testcase": false, "constructor": false}], "file": "herd-code/herd-dao/src/main/java/org/finra/herd/dao/helper/AwsHelper.java"}, "focal_method": {"identifier": "getClientConfiguration", "parameters": "(AwsParamsDto awsParamsDto)", "modifiers": "public", "return": "ClientConfiguration", "body": "public ClientConfiguration getClientConfiguration(AwsParamsDto awsParamsDto)\n    {\n        ClientConfiguration clientConfiguration = new ClientConfiguration();\n\n        // Set a retry policy.\n        clientConfiguration.withRetryPolicy(retryPolicyFactory.getRetryPolicy());\n\n        // If the proxy hostname and port both are configured, set the HTTP proxy information.\n        if (StringUtils.isNotBlank(awsParamsDto.getHttpProxyHost()) && awsParamsDto.getHttpProxyPort() != null)\n        {\n            clientConfiguration.withProxyHost(awsParamsDto.getHttpProxyHost()).withProxyPort(awsParamsDto.getHttpProxyPort());\n        }\n\n        return clientConfiguration;\n    }", "signature": "ClientConfiguration getClientConfiguration(AwsParamsDto awsParamsDto)", "full_signature": "public ClientConfiguration getClientConfiguration(AwsParamsDto awsParamsDto)", "class_method_signature": "AwsHelper.getClientConfiguration(AwsParamsDto awsParamsDto)", "testcase": false, "constructor": false, "invocations": ["withRetryPolicy", "getRetryPolicy", "isNotBlank", "getHttpProxyHost", "getHttpProxyPort", "withProxyPort", "withProxyHost", "getHttpProxyHost", "getHttpProxyPort"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}