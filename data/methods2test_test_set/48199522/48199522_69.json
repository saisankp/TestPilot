{"test_class": {"identifier": "GoogleMonitoringIngesterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(GoogleMonitoringIngesterTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(GoogleMonitoringIngesterTest.class)", "var_name": "log"}, {"original_string": "private MacroBaseConf conf;", "modifier": "private", "type": "MacroBaseConf", "declarator": "conf", "var_name": "conf"}], "file": "contrib/src/test/java/macrobase/ingest/GoogleMonitoringIngesterTest.java"}, "test_case": {"identifier": "testProcessResponse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProcessResponse() throws Exception {\n        Map<String, String> metricLabels1 = new HashMap<>();\n        metricLabels1.put(\"attr1\", \"foo\");\n        metricLabels1.put(\"attr2\", \"bar\");\n\n        Map<String, String> metricLabels2 = new HashMap<>();\n        metricLabels2.put(\"attr1\", \"foo\");\n        metricLabels2.put(\"attr2\", \"baz\");\n\n        // Missing one of the attributes. Will be skipped.\n        Map<String, String> metricLabels3 = new HashMap<>();\n        metricLabels3.put(\"attr1\", \"foo\");\n\n        Metric metric1 = new Metric();\n        metric1.setType(\"custom.googleapis.com/test\");\n        metric1.setLabels(metricLabels1);\n\n        Metric metric2 = new Metric();\n        metric2.setType(\"custom.googleapis.com/skipped\");\n        metric2.setLabels(metricLabels1);\n\n        Metric metric3 = new Metric();\n        metric3.setType(\"custom.googleapis.com/test\");\n        metric3.setLabels(metricLabels2);\n\n        Metric metric4 = new Metric();\n        metric4.setType(\"custom.googleapis.com/test\");\n        metric4.setLabels(metricLabels3);\n\n        Map<String, String> resourceLabels1 = new HashMap<>();\n        resourceLabels1.put(\"project_id\", \"my-project\");\n        resourceLabels1.put(\"region\", \"us-central-1\");\n\n        // Get the second attribute from the resource labels.\n        Map<String, String> resourceLabels2 = new HashMap<>();\n        resourceLabels2.put(\"project_id\", \"my-project\");\n        resourceLabels2.put(\"region\", \"us-central-1\");\n        resourceLabels2.put(\"attr2\", \"bar\");\n\n        MonitoredResource resource1 = new MonitoredResource();\n        resource1.setType(\"gce_instance\");\n        resource1.setLabels(resourceLabels1);\n\n        MonitoredResource resource2 = new MonitoredResource();\n        resource2.setType(\"gce_instance\");\n        resource2.setLabels(resourceLabels2);\n\n        TimeInterval time1 = new TimeInterval();\n        time1.setEndTime(\"2016-08-08T00:00:00Z\");\n\n        TimeInterval time2 = new TimeInterval();\n        time2.setEndTime(\"2016-08-08T00:00:01Z\");\n\n        TimeInterval time3 = new TimeInterval();\n        time3.setEndTime(\"2016-08-08T00:00:02Z\");\n\n        Point p1 = new Point();\n        p1.setInterval(time1);\n        p1.setValue(new TypedValue());\n        p1.getValue().setDoubleValue(77.0);\n\n        Point p2 = new Point();\n        p2.setInterval(time2);\n        p2.setValue(new TypedValue());\n        p2.getValue().setDoubleValue(88.0);\n\n        Point p3 = new Point();\n        p3.setInterval(time1);\n        p3.setValue(new TypedValue());\n        p3.getValue().setInt64Value(99l);\n\n        Point p4 = new Point();\n        p4.setInterval(time3);\n        p4.setValue(new TypedValue());\n        p4.getValue().setBoolValue(true);\n\n        TimeSeries ts1 = new TimeSeries();\n        ts1.setMetric(metric1);\n        ts1.setResource(resource1);\n        ts1.setPoints(Lists.newArrayList(p1, p2));\n        ts1.setValueType(\"DOUBLE\");\n        ts1.setMetricKind(\"GAUGE\");\n\n        // This TimeSeries will be skipped because it has the wrong metric type.\n        TimeSeries ts2 = new TimeSeries();\n        ts2.setMetric(metric2);\n        ts2.setResource(resource1);\n        ts2.setPoints(Lists.newArrayList(p2));\n        ts2.setValueType(\"DOUBLE\");\n        ts2.setMetricKind(\"GAUGE\");\n\n        TimeSeries ts3 = new TimeSeries();\n        ts3.setMetric(metric3);\n        ts3.setResource(resource1);\n        ts3.setPoints(Lists.newArrayList(p3));\n        ts3.setValueType(\"INT64\");\n        ts3.setMetricKind(\"GAUGE\");\n\n        TimeSeries ts4 = new TimeSeries();\n        ts4.setMetric(metric4);\n        ts4.setResource(resource2);\n        ts4.setPoints(Lists.newArrayList(p4));\n        ts4.setValueType(\"BOOL\");\n        ts4.setMetricKind(\"GAUGE\");\n\n        ListTimeSeriesResponse response = new ListTimeSeriesResponse();\n        response.setTimeSeries(Lists.newArrayList(ts1, ts2, ts3, ts4));\n\n        List<String> allMetrics = new ArrayList<>();\n        allMetrics.add(\"custom.googleapis.com/test\");\n\n        Map<String, Map<String, Record>> byTime = new TreeMap<>();\n        GoogleMonitoringIngester ingester = new GoogleMonitoringIngester(conf);\n        ingester.processResponse(response, allMetrics, byTime);\n\n        assertEquals(3, byTime.size());\n\n        Map<String, Record> recordMap1 = byTime.get(\"2016-08-08T00:00:00Z\");\n        List<Record> records1 = Lists.newArrayList(recordMap1.values());\n        assertEquals(2, records1.size());\n        assertEquals(2, records1.get(0).attributes.size());\n        assertEquals(\"foo\", records1.get(0).attributes.get(\"attr1\"));\n        assertEquals(\"baz\", records1.get(0).attributes.get(\"attr2\"));\n        assertEquals(99, records1.get(0).values.get(\"custom.googleapis.com/test\"), 0.0);\n        assertEquals(2, records1.get(1).attributes.size());\n        assertEquals(\"foo\", records1.get(1).attributes.get(\"attr1\"));\n        assertEquals(\"bar\", records1.get(1).attributes.get(\"attr2\"));\n        assertEquals(77, records1.get(1).values.get(\"custom.googleapis.com/test\"), 0.0);\n\n        Map<String, Record> recordMap2 = byTime.get(\"2016-08-08T00:00:01Z\");\n        List<Record> records2 = Lists.newArrayList(recordMap2.values());\n        assertEquals(1, records2.size());\n        assertEquals(2, records2.get(0).attributes.size());\n        assertEquals(\"foo\", records2.get(0).attributes.get(\"attr1\"));\n        assertEquals(\"bar\", records2.get(0).attributes.get(\"attr2\"));\n        assertEquals(88, records2.get(0).values.get(\"custom.googleapis.com/test\"), 0.0);\n\n        Map<String, Record> recordMap3 = byTime.get(\"2016-08-08T00:00:02Z\");\n        List<Record> records3 = Lists.newArrayList(recordMap3.values());\n        assertEquals(1, records3.size());\n        assertEquals(2, records3.get(0).attributes.size());\n        assertEquals(\"foo\", records3.get(0).attributes.get(\"attr1\"));\n        assertEquals(\"bar\", records3.get(0).attributes.get(\"attr2\"));\n        assertEquals(1.0, records3.get(0).values.get(\"custom.googleapis.com/test\"), 0.0);\n    }", "signature": "void testProcessResponse()", "full_signature": "@Test public void testProcessResponse()", "class_method_signature": "GoogleMonitoringIngesterTest.testProcessResponse()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "put", "put", "setType", "setLabels", "setType", "setLabels", "setType", "setLabels", "setType", "setLabels", "put", "put", "put", "put", "put", "setType", "setLabels", "setType", "setLabels", "setEndTime", "setEndTime", "setEndTime", "setInterval", "setValue", "setDoubleValue", "getValue", "setInterval", "setValue", "setDoubleValue", "getValue", "setInterval", "setValue", "setInt64Value", "getValue", "setInterval", "setValue", "setBoolValue", "getValue", "setMetric", "setResource", "setPoints", "newArrayList", "setValueType", "setMetricKind", "setMetric", "setResource", "setPoints", "newArrayList", "setValueType", "setMetricKind", "setMetric", "setResource", "setPoints", "newArrayList", "setValueType", "setMetricKind", "setMetric", "setResource", "setPoints", "newArrayList", "setValueType", "setMetricKind", "setTimeSeries", "newArrayList", "add", "processResponse", "assertEquals", "size", "get", "newArrayList", "values", "assertEquals", "size", "assertEquals", "size", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "size", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "get", "newArrayList", "values", "assertEquals", "size", "assertEquals", "size", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "get", "newArrayList", "values", "assertEquals", "size", "assertEquals", "size", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get"]}, "focal_class": {"identifier": "GoogleMonitoringIngester", "superclass": "extends DataIngester", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(GoogleMonitoringIngester.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(GoogleMonitoringIngester.class)", "var_name": "log"}, {"original_string": "public static final String GOOGLE_MONITORING_QUERIES = \"macrobase.loader.googlemonitoring.queries\";", "modifier": "public static final", "type": "String", "declarator": "GOOGLE_MONITORING_QUERIES = \"macrobase.loader.googlemonitoring.queries\"", "var_name": "GOOGLE_MONITORING_QUERIES"}, {"original_string": "public static final String GOOGLE_MONITORING_START_TIME = \"macrobase.loader.googlemonitoring.startTime\";", "modifier": "public static final", "type": "String", "declarator": "GOOGLE_MONITORING_START_TIME = \"macrobase.loader.googlemonitoring.startTime\"", "var_name": "GOOGLE_MONITORING_START_TIME"}, {"original_string": "public static final String GOOGLE_MONITORING_END_TIME = \"macrobase.loader.googlemonitoring.endTime\";", "modifier": "public static final", "type": "String", "declarator": "GOOGLE_MONITORING_END_TIME = \"macrobase.loader.googlemonitoring.endTime\"", "var_name": "GOOGLE_MONITORING_END_TIME"}, {"original_string": "private MBStream<Datum> dataStream;", "modifier": "private", "type": "MBStream<Datum>", "declarator": "dataStream", "var_name": "dataStream"}, {"original_string": "private boolean loaded = false;", "modifier": "private", "type": "boolean", "declarator": "loaded = false", "var_name": "loaded"}, {"original_string": "private int pointsAdded = 0;", "modifier": "private", "type": "int", "declarator": "pointsAdded = 0", "var_name": "pointsAdded"}, {"original_string": "private int skippedTimeSeries = 0;", "modifier": "private", "type": "int", "declarator": "skippedTimeSeries = 0", "var_name": "skippedTimeSeries"}, {"original_string": "private int skippedPoints = 0;", "modifier": "private", "type": "int", "declarator": "skippedPoints = 0", "var_name": "skippedPoints"}], "methods": [{"identifier": "GoogleMonitoringIngester", "parameters": "(MacroBaseConf conf)", "modifiers": "public", "return": "", "signature": " GoogleMonitoringIngester(MacroBaseConf conf)", "full_signature": "public  GoogleMonitoringIngester(MacroBaseConf conf)", "class_method_signature": "GoogleMonitoringIngester.GoogleMonitoringIngester(MacroBaseConf conf)", "testcase": false, "constructor": true}, {"identifier": "getStream", "parameters": "()", "modifiers": "@Override public", "return": "MBStream<Datum>", "signature": "MBStream<Datum> getStream()", "full_signature": "@Override public MBStream<Datum> getStream()", "class_method_signature": "GoogleMonitoringIngester.getStream()", "testcase": false, "constructor": false}, {"identifier": "getQueries", "parameters": "(String queryJson)", "modifiers": "", "return": "QueryConf", "signature": "QueryConf getQueries(String queryJson)", "full_signature": " QueryConf getQueries(String queryJson)", "class_method_signature": "GoogleMonitoringIngester.getQueries(String queryJson)", "testcase": false, "constructor": false}, {"identifier": "processResponse", "parameters": "(ListTimeSeriesResponse response, List<String> allMetrics,\n                         Map<String, Map<String, Record>> byTime)", "modifiers": "", "return": "void", "signature": "void processResponse(ListTimeSeriesResponse response, List<String> allMetrics,\n                         Map<String, Map<String, Record>> byTime)", "full_signature": " void processResponse(ListTimeSeriesResponse response, List<String> allMetrics,\n                         Map<String, Map<String, Record>> byTime)", "class_method_signature": "GoogleMonitoringIngester.processResponse(ListTimeSeriesResponse response, List<String> allMetrics,\n                         Map<String, Map<String, Record>> byTime)", "testcase": false, "constructor": false}, {"identifier": "processRecord", "parameters": "(Record rec)", "modifiers": "", "return": "Datum", "signature": "Datum processRecord(Record rec)", "full_signature": " Datum processRecord(Record rec)", "class_method_signature": "GoogleMonitoringIngester.processRecord(Record rec)", "testcase": false, "constructor": false}, {"identifier": "convertToStream", "parameters": "(Map<String, Map<String, Record>> byTime)", "modifiers": "", "return": "MBStream<Datum>", "signature": "MBStream<Datum> convertToStream(Map<String, Map<String, Record>> byTime)", "full_signature": " MBStream<Datum> convertToStream(Map<String, Map<String, Record>> byTime)", "class_method_signature": "GoogleMonitoringIngester.convertToStream(Map<String, Map<String, Record>> byTime)", "testcase": false, "constructor": false}, {"identifier": "buildClient", "parameters": "()", "modifiers": "private", "return": "Monitoring", "signature": "Monitoring buildClient()", "full_signature": "private Monitoring buildClient()", "class_method_signature": "GoogleMonitoringIngester.buildClient()", "testcase": false, "constructor": false}], "file": "contrib/src/main/java/macrobase/ingest/GoogleMonitoringIngester.java"}, "focal_method": {"identifier": "processResponse", "parameters": "(ListTimeSeriesResponse response, List<String> allMetrics,\n                         Map<String, Map<String, Record>> byTime)", "modifiers": "", "return": "void", "body": "void processResponse(ListTimeSeriesResponse response, List<String> allMetrics,\n                         Map<String, Map<String, Record>> byTime) {\n\n        for (TimeSeries ts : response.getTimeSeries()) {\n            if (!allMetrics.contains(ts.getMetric().getType())) {\n                ++skippedTimeSeries;\n                continue;\n            }\n\n            // Extract attribute values from TimeSeries metric/resource labels. If some are\n            // missing, skip this time series. Keep the keys sorted so that they correspond\n            // to the attribute names recorded in the encoder.\n            Map<String, String> attrMap = new TreeMap<>();\n            boolean hasAllAttributes = true;\n\n            for (String a : attributes) {\n                String val = ts.getMetric().getLabels().get(a);\n                if (val == null) {\n                    val = ts.getResource().getLabels().get(a);\n                    if (val == null) {\n                        log.debug(\"Skipping TimeSeries due to missing attribute: \" + a);\n                        hasAllAttributes = false;\n                        break;\n                    }\n                }\n                attrMap.put(a, val);\n            }\n\n            if (!hasAllAttributes) {\n                ++skippedTimeSeries;\n                continue;\n            }\n            String attrKey = attrMap.toString();\n\n            for (Point p : ts.getPoints()) {\n                String timestamp = p.getInterval().getEndTime();\n\n                byTime.putIfAbsent(timestamp, new HashMap<>());\n                Record rec = byTime.get(timestamp).putIfAbsent(attrKey, new Record());\n                if (rec == null) {\n                    rec = byTime.get(timestamp).get(attrKey);\n                    rec.attributes = attrMap;\n                    rec.values = new HashMap<>();\n                }\n\n                double val;\n                switch (ts.getValueType()) {\n                    case \"DOUBLE\":\n                        val = p.getValue().getDoubleValue();\n                        break;\n                    case \"INT64\":\n                        val = p.getValue().getInt64Value();\n                        break;\n                    case \"BOOL\":\n                        val = (p.getValue().getBoolValue()) ? 1.0 : 0.0;\n                        break;\n                    default:\n                        continue;\n                }\n\n                rec.values.put(ts.getMetric().getType(), val);\n            }\n        }\n    }", "signature": "void processResponse(ListTimeSeriesResponse response, List<String> allMetrics,\n                         Map<String, Map<String, Record>> byTime)", "full_signature": " void processResponse(ListTimeSeriesResponse response, List<String> allMetrics,\n                         Map<String, Map<String, Record>> byTime)", "class_method_signature": "GoogleMonitoringIngester.processResponse(ListTimeSeriesResponse response, List<String> allMetrics,\n                         Map<String, Map<String, Record>> byTime)", "testcase": false, "constructor": false, "invocations": ["getTimeSeries", "contains", "getType", "getMetric", "get", "getLabels", "getMetric", "get", "getLabels", "getResource", "debug", "put", "toString", "getPoints", "getEndTime", "getInterval", "putIfAbsent", "putIfAbsent", "get", "get", "get", "getValueType", "getDoubleValue", "getValue", "getInt64Value", "getValue", "getBoolValue", "getValue", "put", "getType", "getMetric"]}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}