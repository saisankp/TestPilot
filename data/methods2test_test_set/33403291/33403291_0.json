{"test_class": {"identifier": "MinecraftlyUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "Core/src/test/java/com/minecraftly/core/MinecraftlyUtilTest.java"}, "test_case": {"identifier": "tickConversionTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void tickConversionTest() {\n\n\t\tAssert.assertEquals( 1, MinecraftlyUtil.convertMillisToTicks( 40 ) );\n\t\tAssert.assertEquals( 1, MinecraftlyUtil.convertMillisToTicks( 50 ) );\n\t\tAssert.assertEquals( 1, MinecraftlyUtil.convertMillisToTicks( 60 ) );\n\n\t\tAssert.assertEquals( 3, MinecraftlyUtil.convertMillisToTicks( 140 ) );\n\t\tAssert.assertEquals( 3, MinecraftlyUtil.convertMillisToTicks( 150 ) );\n\t\tAssert.assertEquals( 3, MinecraftlyUtil.convertMillisToTicks( 160 ) );\n\n\t}", "signature": "void tickConversionTest()", "full_signature": "@Test public void tickConversionTest()", "class_method_signature": "MinecraftlyUtilTest.tickConversionTest()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "convertMillisToTicks", "assertEquals", "convertMillisToTicks", "assertEquals", "convertMillisToTicks", "assertEquals", "convertMillisToTicks", "assertEquals", "convertMillisToTicks", "assertEquals", "convertMillisToTicks"]}, "focal_class": {"identifier": "MinecraftlyUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Pattern UUID_DASH_PATTERN = Pattern.compile( \"(\\\\w{8})(\\\\w{4})(\\\\w{4})(\\\\w{4})(\\\\w{12})\" );", "modifier": "private static final", "type": "Pattern", "declarator": "UUID_DASH_PATTERN = Pattern.compile( \"(\\\\w{8})(\\\\w{4})(\\\\w{4})(\\\\w{4})(\\\\w{12})\" )", "var_name": "UUID_DASH_PATTERN"}], "methods": [{"identifier": "convertFromNoDashes", "parameters": "( String uuidString )", "modifiers": "public static", "return": "UUID", "signature": "UUID convertFromNoDashes( String uuidString )", "full_signature": "public static UUID convertFromNoDashes( String uuidString )", "class_method_signature": "MinecraftlyUtil.convertFromNoDashes( String uuidString )", "testcase": false, "constructor": false}, {"identifier": "convertToNoDashes", "parameters": "( UUID uuid )", "modifiers": "public static", "return": "String", "signature": "String convertToNoDashes( UUID uuid )", "full_signature": "public static String convertToNoDashes( UUID uuid )", "class_method_signature": "MinecraftlyUtil.convertToNoDashes( UUID uuid )", "testcase": false, "constructor": false}, {"identifier": "convertToNoDashes", "parameters": "( String uuidString )", "modifiers": "public static", "return": "String", "signature": "String convertToNoDashes( String uuidString )", "full_signature": "public static String convertToNoDashes( String uuidString )", "class_method_signature": "MinecraftlyUtil.convertToNoDashes( String uuidString )", "testcase": false, "constructor": false}, {"identifier": "downloadText", "parameters": "( String url )", "modifiers": "public static", "return": "String", "signature": "String downloadText( String url )", "full_signature": "public static String downloadText( String url )", "class_method_signature": "MinecraftlyUtil.downloadText( String url )", "testcase": false, "constructor": false}, {"identifier": "downloadText", "parameters": "( URL url )", "modifiers": "public static", "return": "String", "signature": "String downloadText( URL url )", "full_signature": "public static String downloadText( URL url )", "class_method_signature": "MinecraftlyUtil.downloadText( URL url )", "testcase": false, "constructor": false}, {"identifier": "readText", "parameters": "( String filePath )", "modifiers": "public static", "return": "String", "signature": "String readText( String filePath )", "full_signature": "public static String readText( String filePath )", "class_method_signature": "MinecraftlyUtil.readText( String filePath )", "testcase": false, "constructor": false}, {"identifier": "readText", "parameters": "( File file )", "modifiers": "public static", "return": "String", "signature": "String readText( File file )", "full_signature": "public static String readText( File file )", "class_method_signature": "MinecraftlyUtil.readText( File file )", "testcase": false, "constructor": false}, {"identifier": "convertMillisToTicks", "parameters": "( long milliseconds )", "modifiers": "public static", "return": "long", "signature": "long convertMillisToTicks( long milliseconds )", "full_signature": "public static long convertMillisToTicks( long milliseconds )", "class_method_signature": "MinecraftlyUtil.convertMillisToTicks( long milliseconds )", "testcase": false, "constructor": false}, {"identifier": "round", "parameters": "( double value, double factor )", "modifiers": "public static", "return": "double", "signature": "double round( double value, double factor )", "full_signature": "public static double round( double value, double factor )", "class_method_signature": "MinecraftlyUtil.round( double value, double factor )", "testcase": false, "constructor": false}, {"identifier": "parseAddress", "parameters": "( String address )", "modifiers": "public static", "return": "InetSocketAddress", "signature": "InetSocketAddress parseAddress( String address )", "full_signature": "public static InetSocketAddress parseAddress( String address )", "class_method_signature": "MinecraftlyUtil.parseAddress( String address )", "testcase": false, "constructor": false}, {"identifier": "getTimeString", "parameters": "( long millis )", "modifiers": "public static", "return": "String", "signature": "String getTimeString( long millis )", "full_signature": "public static String getTimeString( long millis )", "class_method_signature": "MinecraftlyUtil.getTimeString( long millis )", "testcase": false, "constructor": false}], "file": "Core/src/main/java/com/minecraftly/core/MinecraftlyUtil.java"}, "focal_method": {"identifier": "convertMillisToTicks", "parameters": "( long milliseconds )", "modifiers": "public static", "return": "long", "body": "public static long convertMillisToTicks( long milliseconds ) {\n\t\tdouble nearestTickTime = round( milliseconds, 50 );\n\t\treturn (long) ((nearestTickTime / 1000) * 20);\n\t}", "signature": "long convertMillisToTicks( long milliseconds )", "full_signature": "public static long convertMillisToTicks( long milliseconds )", "class_method_signature": "MinecraftlyUtil.convertMillisToTicks( long milliseconds )", "testcase": false, "constructor": false, "invocations": ["round"]}, "repository": {"repo_id": 33403291, "url": "https://github.com/lectron/kosmos", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 73088, "license": "GNU General Public License v3.0"}}