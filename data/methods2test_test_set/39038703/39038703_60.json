{"test_class": {"identifier": "MultiFormatDateParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Locale vmLocale;", "modifier": "private static", "type": "Locale", "declarator": "vmLocale", "var_name": "vmLocale"}, {"original_string": "private final String testMessage;", "modifier": "private final", "type": "String", "declarator": "testMessage", "var_name": "testMessage"}, {"original_string": "private final String toParseDate;", "modifier": "private final", "type": "String", "declarator": "toParseDate", "var_name": "toParseDate"}, {"original_string": "private final String expectedFormat;", "modifier": "private final", "type": "String", "declarator": "expectedFormat", "var_name": "expectedFormat"}, {"original_string": "private final boolean expectedResult;", "modifier": "private final", "type": "boolean", "declarator": "expectedResult", "var_name": "expectedResult"}], "file": "dspace-api/src/test/java/org/dspace/util/MultiFormatDateParserTest.java"}, "test_case": {"identifier": "testParse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParse() throws ParseException\n    {\n        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(expectedFormat);\n        simpleDateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n        Date result = MultiFormatDateParser.parse(toParseDate);\n        assertEquals(testMessage, expectedResult, simpleDateFormat.parse(toParseDate).equals(result));\n    }", "signature": "void testParse()", "full_signature": "@Test public void testParse()", "class_method_signature": "MultiFormatDateParserTest.testParse()", "testcase": true, "constructor": false, "invocations": ["setTimeZone", "getTimeZone", "parse", "assertEquals", "equals", "parse"]}, "focal_class": {"identifier": "MultiFormatDateParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(MultiFormatDateParser.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(MultiFormatDateParser.class)", "var_name": "log"}, {"original_string": "private static final ArrayList<Rule> rules = new ArrayList<>();", "modifier": "private static final", "type": "ArrayList<Rule>", "declarator": "rules = new ArrayList<>()", "var_name": "rules"}, {"original_string": "private static final TimeZone UTC_ZONE = TimeZone.getTimeZone(\"UTC\");", "modifier": "private static final", "type": "TimeZone", "declarator": "UTC_ZONE = TimeZone.getTimeZone(\"UTC\")", "var_name": "UTC_ZONE"}, {"original_string": "private static final ThreadLocal<DateFormat> formatter;", "modifier": "private static final", "type": "ThreadLocal<DateFormat>", "declarator": "formatter", "var_name": "formatter"}], "methods": [{"identifier": "setPatterns", "parameters": "(Map<String, String> patterns)", "modifiers": "@Inject public", "return": "void", "signature": "void setPatterns(Map<String, String> patterns)", "full_signature": "@Inject public void setPatterns(Map<String, String> patterns)", "class_method_signature": "MultiFormatDateParser.setPatterns(Map<String, String> patterns)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String dateString)", "modifiers": "static public", "return": "Date", "signature": "Date parse(String dateString)", "full_signature": "static public Date parse(String dateString)", "class_method_signature": "MultiFormatDateParser.parse(String dateString)", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "MultiFormatDateParser.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "testDate", "parameters": "(String arg)", "modifiers": "private static", "return": "void", "signature": "void testDate(String arg)", "full_signature": "private static void testDate(String arg)", "class_method_signature": "MultiFormatDateParser.testDate(String arg)", "testcase": false, "constructor": false}], "file": "dspace-api/src/main/java/org/dspace/util/MultiFormatDateParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(String dateString)", "modifiers": "static public", "return": "Date", "body": "static public Date parse(String dateString)\n    {\n        for (Rule candidate : rules)\n        {\n            if (candidate.pattern.matcher(dateString).matches())\n            {\n                Date result;\n                try {\n                    synchronized(candidate.format) {\n                        result = candidate.format.parse(dateString);\n                    }\n                } catch (ParseException ex) {\n                    log.info(\"Date string '{}' matched pattern '{}' but did not parse:  {}\",\n                            new String[] {dateString, candidate.format.toPattern(), ex.getMessage()});\n                    continue;\n                }\n                return result;\n            }\n        }\n\n        return null;\n    }", "signature": "Date parse(String dateString)", "full_signature": "static public Date parse(String dateString)", "class_method_signature": "MultiFormatDateParser.parse(String dateString)", "testcase": false, "constructor": false, "invocations": ["matches", "matcher", "parse", "info", "toPattern", "getMessage"]}, "repository": {"repo_id": 39038703, "url": "https://github.com/VTUL/vtechworks", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 112021, "license": "licensed"}}