{"test_class": {"identifier": "AbstractNeo4JOperationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private Connection connection;", "modifier": "@Mock\n    private", "type": "Connection", "declarator": "connection", "var_name": "connection"}, {"original_string": "@Mock\n    private PreparedStatement ps;", "modifier": "@Mock\n    private", "type": "PreparedStatement", "declarator": "ps", "var_name": "ps"}, {"original_string": "@Mock\n    private ResultSet rs;", "modifier": "@Mock\n    private", "type": "ResultSet", "declarator": "rs", "var_name": "rs"}, {"original_string": "@Spy\n    private AbstractNeo4JOperation operation;", "modifier": "@Spy\n    private", "type": "AbstractNeo4JOperation", "declarator": "operation", "var_name": "operation"}], "file": "neo4j/src/test/java/eu/drus/jpa/unit/neo4j/operation/AbstractNeo4JOperationTest.java"}, "test_case": {"identifier": "testExecuteQuery", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecuteQuery() throws SQLException {\n        // GIVEN\n        final String query = \"some query\";\n\n        // WHEN\n        operation.executeQuery(connection, query);\n\n        // THEN\n        final InOrder order = inOrder(connection, ps, rs);\n        order.verify(connection).prepareStatement(eq(query));\n        order.verify(ps).executeQuery();\n        order.verify(rs).close();\n        order.verify(ps).close();\n    }", "signature": "void testExecuteQuery()", "full_signature": "@Test public void testExecuteQuery()", "class_method_signature": "AbstractNeo4JOperationTest.testExecuteQuery()", "testcase": true, "constructor": false, "invocations": ["executeQuery", "inOrder", "prepareStatement", "verify", "eq", "executeQuery", "verify", "close", "verify", "close", "verify"]}, "focal_class": {"identifier": "AbstractNeo4JOperation", "superclass": "", "interfaces": "implements Neo4JOperation", "fields": [], "methods": [{"identifier": "executeQuery", "parameters": "(final Connection connection, final String query)", "modifiers": "protected", "return": "void", "signature": "void executeQuery(final Connection connection, final String query)", "full_signature": "protected void executeQuery(final Connection connection, final String query)", "class_method_signature": "AbstractNeo4JOperation.executeQuery(final Connection connection, final String query)", "testcase": false, "constructor": false}], "file": "neo4j/src/main/java/eu/drus/jpa/unit/neo4j/operation/AbstractNeo4JOperation.java"}, "focal_method": {"identifier": "executeQuery", "parameters": "(final Connection connection, final String query)", "modifiers": "protected", "return": "void", "body": "protected void executeQuery(final Connection connection, final String query) throws SQLException {\n        try (PreparedStatement ps = connection.prepareStatement(query)) {\n            try (ResultSet rs = ps.executeQuery()) { /* nothing to do */ }\n        }\n    }", "signature": "void executeQuery(final Connection connection, final String query)", "full_signature": "protected void executeQuery(final Connection connection, final String query)", "class_method_signature": "AbstractNeo4JOperation.executeQuery(final Connection connection, final String query)", "testcase": false, "constructor": false, "invocations": ["prepareStatement", "executeQuery"]}, "repository": {"repo_id": 52435170, "url": "https://github.com/dadrus/jpa-unit", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 24, "size": 1190, "license": "licensed"}}