{"test_class": {"identifier": "FlowableFromIterableTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/operators/flowable/FlowableFromIterableTest.java"}, "test_case": {"identifier": "requestCancelRace2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void requestCancelRace2() {\n        for (int i = 0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {\n            final TestSubscriber<Integer> ts = new TestSubscriber<Integer>(0L);\n\n            Runnable r1 = new Runnable() {\n                @Override\n                public void run() {\n                    ts.request(Long.MAX_VALUE);\n                }\n            };\n\n            Runnable r2 = new Runnable() {\n                @Override\n                public void run() {\n                    ts.cancel();\n                }\n            };\n\n            Flowable.fromIterable(Arrays.asList(1, 2, 3, 4))\n            .subscribe(ts);\n\n            TestHelper.race(r1, r2);\n        }\n    }", "signature": "void requestCancelRace2()", "full_signature": "@Test public void requestCancelRace2()", "class_method_signature": "FlowableFromIterableTest.requestCancelRace2()", "testcase": true, "constructor": false, "invocations": ["request", "cancel", "subscribe", "fromIterable", "asList", "race"]}, "focal_class": {"identifier": "FlowableFromIterable", "superclass": "extends Flowable<T>", "interfaces": "", "fields": [{"original_string": "final Iterable<? extends T> source;", "modifier": "final", "type": "Iterable<? extends T>", "declarator": "source", "var_name": "source"}], "methods": [{"identifier": "FlowableFromIterable", "parameters": "(Iterable<? extends T> source)", "modifiers": "public", "return": "", "signature": " FlowableFromIterable(Iterable<? extends T> source)", "full_signature": "public  FlowableFromIterable(Iterable<? extends T> source)", "class_method_signature": "FlowableFromIterable.FlowableFromIterable(Iterable<? extends T> source)", "testcase": false, "constructor": true}, {"identifier": "subscribeActual", "parameters": "(Subscriber<? super T> s)", "modifiers": "@Override public", "return": "void", "signature": "void subscribeActual(Subscriber<? super T> s)", "full_signature": "@Override public void subscribeActual(Subscriber<? super T> s)", "class_method_signature": "FlowableFromIterable.subscribeActual(Subscriber<? super T> s)", "testcase": false, "constructor": false}, {"identifier": "subscribe", "parameters": "(Subscriber<? super T> s, Iterator<? extends T> it)", "modifiers": "public static", "return": "void", "signature": "void subscribe(Subscriber<? super T> s, Iterator<? extends T> it)", "full_signature": "public static void subscribe(Subscriber<? super T> s, Iterator<? extends T> it)", "class_method_signature": "FlowableFromIterable.subscribe(Subscriber<? super T> s, Iterator<? extends T> it)", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableFromIterable.java"}, "focal_method": {"identifier": "subscribe", "parameters": "(Subscriber<? super T> s, Iterator<? extends T> it)", "modifiers": "public static", "return": "void", "body": "public static <T> void subscribe(Subscriber<? super T> s, Iterator<? extends T> it) {\n        boolean hasNext;\n        try {\n            hasNext = it.hasNext();\n        } catch (Throwable e) {\n            Exceptions.throwIfFatal(e);\n            EmptySubscription.error(e, s);\n            return;\n        }\n\n        if (!hasNext) {\n            EmptySubscription.complete(s);\n            return;\n        }\n\n        if (s instanceof ConditionalSubscriber) {\n            s.onSubscribe(new IteratorConditionalSubscription<T>(\n                    (ConditionalSubscriber<? super T>)s, it));\n        } else {\n            s.onSubscribe(new IteratorSubscription<T>(s, it));\n        }\n    }", "signature": "void subscribe(Subscriber<? super T> s, Iterator<? extends T> it)", "full_signature": "public static void subscribe(Subscriber<? super T> s, Iterator<? extends T> it)", "class_method_signature": "FlowableFromIterable.subscribe(Subscriber<? super T> s, Iterator<? extends T> it)", "testcase": false, "constructor": false, "invocations": ["hasNext", "throwIfFatal", "error", "complete", "onSubscribe", "onSubscribe"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}