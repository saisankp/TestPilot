{"test_class": {"identifier": "JcrSessionFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private JcrSessionFactory factory;", "modifier": "private", "type": "JcrSessionFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "private Repository repository;", "modifier": "private", "type": "Repository", "declarator": "repository", "var_name": "repository"}], "file": "se-jcr-commons/src/test/java/org/springframework/extensions/jcr/JcrSessionFactoryTest.java"}, "test_case": {"identifier": "testRegisterNamespaces", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRegisterNamespaces() throws Exception {\n        Properties namespaces = new Properties();\n        namespaces.put(\"foo\", \"bar\");\n        namespaces.put(\"hocus\", \"pocus\");\n\n        factory.setNamespaces(namespaces);\n\n        Session session = createMock(Session.class);\n\n        Workspace workspace = createMock(Workspace.class);\n\n        NamespaceRegistry namespaceRegistry = createMock(NamespaceRegistry.class);\n\n        // afterPropertiesSet\n        expect(repository.login(null, null)).andReturn(session);\n        expect(session.getWorkspace()).andReturn(workspace);\n        expect(workspace.getNamespaceRegistry()).andReturn(namespaceRegistry);\n\n        expect(namespaceRegistry.getPrefixes()).andReturn(new String[0]);\n\n        // destroy\n        namespaceRegistry.registerNamespace(\"foo\", \"bar\");\n        namespaceRegistry.registerNamespace(\"hocus\", \"pocus\");\n\n        session.logout();\n\n        replay(namespaceRegistry, workspace, session, repository);\n\n        factory.afterPropertiesSet();\n\n        factory.destroy();\n\n        verify(namespaceRegistry, workspace, session);\n\n    }", "signature": "void testRegisterNamespaces()", "full_signature": "@Test public void testRegisterNamespaces()", "class_method_signature": "JcrSessionFactoryTest.testRegisterNamespaces()", "testcase": true, "constructor": false, "invocations": ["put", "put", "setNamespaces", "createMock", "createMock", "createMock", "andReturn", "expect", "login", "andReturn", "expect", "getWorkspace", "andReturn", "expect", "getNamespaceRegistry", "andReturn", "expect", "getPrefixes", "registerNamespace", "registerNamespace", "logout", "replay", "afterPropertiesSet", "destroy", "verify"]}, "focal_class": {"identifier": "JcrSessionFactory", "superclass": "", "interfaces": "implements InitializingBean, DisposableBean, SessionFactory", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(JcrSessionFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(JcrSessionFactory.class)", "var_name": "LOG"}, {"original_string": "private Repository repository;", "modifier": "private", "type": "Repository", "declarator": "repository", "var_name": "repository"}, {"original_string": "private String workspaceName;", "modifier": "private", "type": "String", "declarator": "workspaceName", "var_name": "workspaceName"}, {"original_string": "private Credentials credentials;", "modifier": "private", "type": "Credentials", "declarator": "credentials", "var_name": "credentials"}, {"original_string": "private EventListenerDefinition eventListeners[] = new EventListenerDefinition[] {};", "modifier": "private", "type": "EventListenerDefinition", "declarator": "eventListeners[] = new EventListenerDefinition[] {}", "var_name": "eventListeners"}, {"original_string": "private Properties namespaces;", "modifier": "private", "type": "Properties", "declarator": "namespaces", "var_name": "namespaces"}, {"original_string": "private Map<String, String> overwrittenNamespaces;", "modifier": "private", "type": "Map<String, String>", "declarator": "overwrittenNamespaces", "var_name": "overwrittenNamespaces"}, {"original_string": "private boolean forceNamespacesRegistration = false;", "modifier": "private", "type": "boolean", "declarator": "forceNamespacesRegistration = false", "var_name": "forceNamespacesRegistration"}, {"original_string": "private boolean keepNewNamespaces = true;", "modifier": "private", "type": "boolean", "declarator": "keepNewNamespaces = true", "var_name": "keepNewNamespaces"}, {"original_string": "private boolean skipExistingNamespaces = true;", "modifier": "private", "type": "boolean", "declarator": "skipExistingNamespaces = true", "var_name": "skipExistingNamespaces"}, {"original_string": "private SessionHolderProviderManager sessionHolderProviderManager;", "modifier": "private", "type": "SessionHolderProviderManager", "declarator": "sessionHolderProviderManager", "var_name": "sessionHolderProviderManager"}, {"original_string": "private SessionHolderProvider sessionHolderProvider;", "modifier": "private", "type": "SessionHolderProvider", "declarator": "sessionHolderProvider", "var_name": "sessionHolderProvider"}], "methods": [{"identifier": "JcrSessionFactory", "parameters": "(Repository repository, String workspaceName, Credentials credentials)", "modifiers": "public", "return": "", "signature": " JcrSessionFactory(Repository repository, String workspaceName, Credentials credentials)", "full_signature": "public  JcrSessionFactory(Repository repository, String workspaceName, Credentials credentials)", "class_method_signature": "JcrSessionFactory.JcrSessionFactory(Repository repository, String workspaceName, Credentials credentials)", "testcase": false, "constructor": true}, {"identifier": "JcrSessionFactory", "parameters": "(Repository repository, String workspaceName, Credentials credentials, SessionHolderProviderManager sessionHolderProviderManager)", "modifiers": "public", "return": "", "signature": " JcrSessionFactory(Repository repository, String workspaceName, Credentials credentials, SessionHolderProviderManager sessionHolderProviderManager)", "full_signature": "public  JcrSessionFactory(Repository repository, String workspaceName, Credentials credentials, SessionHolderProviderManager sessionHolderProviderManager)", "class_method_signature": "JcrSessionFactory.JcrSessionFactory(Repository repository, String workspaceName, Credentials credentials, SessionHolderProviderManager sessionHolderProviderManager)", "testcase": false, "constructor": true}, {"identifier": "JcrSessionFactory", "parameters": "()", "modifiers": "public", "return": "", "signature": " JcrSessionFactory()", "full_signature": "public  JcrSessionFactory()", "class_method_signature": "JcrSessionFactory.JcrSessionFactory()", "testcase": false, "constructor": true}, {"identifier": "afterPropertiesSet", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void afterPropertiesSet()", "full_signature": "@Override public void afterPropertiesSet()", "class_method_signature": "JcrSessionFactory.afterPropertiesSet()", "testcase": false, "constructor": false}, {"identifier": "registerNodeTypes", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void registerNodeTypes()", "full_signature": "protected void registerNodeTypes()", "class_method_signature": "JcrSessionFactory.registerNodeTypes()", "testcase": false, "constructor": false}, {"identifier": "unregisterNodeTypes", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void unregisterNodeTypes()", "full_signature": "protected void unregisterNodeTypes()", "class_method_signature": "JcrSessionFactory.unregisterNodeTypes()", "testcase": false, "constructor": false}, {"identifier": "registerNamespaces", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void registerNamespaces()", "full_signature": "protected void registerNamespaces()", "class_method_signature": "JcrSessionFactory.registerNamespaces()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "JcrSessionFactory.destroy()", "testcase": false, "constructor": false}, {"identifier": "unregisterNamespaces", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void unregisterNamespaces()", "full_signature": "protected void unregisterNamespaces()", "class_method_signature": "JcrSessionFactory.unregisterNamespaces()", "testcase": false, "constructor": false}, {"identifier": "getBareSession", "parameters": "()", "modifiers": "protected", "return": "Session", "signature": "Session getBareSession()", "full_signature": "protected Session getBareSession()", "class_method_signature": "JcrSessionFactory.getBareSession()", "testcase": false, "constructor": false}, {"identifier": "getSession", "parameters": "()", "modifiers": "@Override public", "return": "Session", "signature": "Session getSession()", "full_signature": "@Override public Session getSession()", "class_method_signature": "JcrSessionFactory.getSession()", "testcase": false, "constructor": false}, {"identifier": "getSessionHolder", "parameters": "(Session session)", "modifiers": "@Override public", "return": "SessionHolder", "signature": "SessionHolder getSessionHolder(Session session)", "full_signature": "@Override public SessionHolder getSessionHolder(Session session)", "class_method_signature": "JcrSessionFactory.getSessionHolder(Session session)", "testcase": false, "constructor": false}, {"identifier": "addListeners", "parameters": "(Session session)", "modifiers": "protected", "return": "Session", "signature": "Session addListeners(Session session)", "full_signature": "protected Session addListeners(Session session)", "class_method_signature": "JcrSessionFactory.addListeners(Session session)", "testcase": false, "constructor": false}, {"identifier": "getRepository", "parameters": "()", "modifiers": "public", "return": "Repository", "signature": "Repository getRepository()", "full_signature": "public Repository getRepository()", "class_method_signature": "JcrSessionFactory.getRepository()", "testcase": false, "constructor": false}, {"identifier": "setRepository", "parameters": "(Repository repository)", "modifiers": "public", "return": "void", "signature": "void setRepository(Repository repository)", "full_signature": "public void setRepository(Repository repository)", "class_method_signature": "JcrSessionFactory.setRepository(Repository repository)", "testcase": false, "constructor": false}, {"identifier": "setWorkspaceName", "parameters": "(String workspaceName)", "modifiers": "public", "return": "void", "signature": "void setWorkspaceName(String workspaceName)", "full_signature": "public void setWorkspaceName(String workspaceName)", "class_method_signature": "JcrSessionFactory.setWorkspaceName(String workspaceName)", "testcase": false, "constructor": false}, {"identifier": "setCredentials", "parameters": "(Credentials credentials)", "modifiers": "public", "return": "void", "signature": "void setCredentials(Credentials credentials)", "full_signature": "public void setCredentials(Credentials credentials)", "class_method_signature": "JcrSessionFactory.setCredentials(Credentials credentials)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "JcrSessionFactory.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "JcrSessionFactory.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "JcrSessionFactory.toString()", "testcase": false, "constructor": false}, {"identifier": "getEventListeners", "parameters": "()", "modifiers": "public", "return": "EventListenerDefinition[]", "signature": "EventListenerDefinition[] getEventListeners()", "full_signature": "public EventListenerDefinition[] getEventListeners()", "class_method_signature": "JcrSessionFactory.getEventListeners()", "testcase": false, "constructor": false}, {"identifier": "setEventListeners", "parameters": "(EventListenerDefinition[] eventListenerDefinitions)", "modifiers": "public", "return": "void", "signature": "void setEventListeners(EventListenerDefinition[] eventListenerDefinitions)", "full_signature": "public void setEventListeners(EventListenerDefinition[] eventListenerDefinitions)", "class_method_signature": "JcrSessionFactory.setEventListeners(EventListenerDefinition[] eventListenerDefinitions)", "testcase": false, "constructor": false}, {"identifier": "getRepositoryInfo", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getRepositoryInfo()", "full_signature": "private String getRepositoryInfo()", "class_method_signature": "JcrSessionFactory.getRepositoryInfo()", "testcase": false, "constructor": false}, {"identifier": "getNamespaces", "parameters": "()", "modifiers": "public", "return": "Properties", "signature": "Properties getNamespaces()", "full_signature": "public Properties getNamespaces()", "class_method_signature": "JcrSessionFactory.getNamespaces()", "testcase": false, "constructor": false}, {"identifier": "setNamespaces", "parameters": "(Properties namespaces)", "modifiers": "public", "return": "void", "signature": "void setNamespaces(Properties namespaces)", "full_signature": "public void setNamespaces(Properties namespaces)", "class_method_signature": "JcrSessionFactory.setNamespaces(Properties namespaces)", "testcase": false, "constructor": false}, {"identifier": "getSessionHolderProvider", "parameters": "()", "modifiers": "protected", "return": "SessionHolderProvider", "signature": "SessionHolderProvider getSessionHolderProvider()", "full_signature": "protected SessionHolderProvider getSessionHolderProvider()", "class_method_signature": "JcrSessionFactory.getSessionHolderProvider()", "testcase": false, "constructor": false}, {"identifier": "setSessionHolderProvider", "parameters": "(SessionHolderProvider sessionHolderProvider)", "modifiers": "protected", "return": "void", "signature": "void setSessionHolderProvider(SessionHolderProvider sessionHolderProvider)", "full_signature": "protected void setSessionHolderProvider(SessionHolderProvider sessionHolderProvider)", "class_method_signature": "JcrSessionFactory.setSessionHolderProvider(SessionHolderProvider sessionHolderProvider)", "testcase": false, "constructor": false}, {"identifier": "getSessionHolderProviderManager", "parameters": "()", "modifiers": "public", "return": "SessionHolderProviderManager", "signature": "SessionHolderProviderManager getSessionHolderProviderManager()", "full_signature": "public SessionHolderProviderManager getSessionHolderProviderManager()", "class_method_signature": "JcrSessionFactory.getSessionHolderProviderManager()", "testcase": false, "constructor": false}, {"identifier": "setSessionHolderProviderManager", "parameters": "(SessionHolderProviderManager sessionHolderProviderManager)", "modifiers": "public", "return": "void", "signature": "void setSessionHolderProviderManager(SessionHolderProviderManager sessionHolderProviderManager)", "full_signature": "public void setSessionHolderProviderManager(SessionHolderProviderManager sessionHolderProviderManager)", "class_method_signature": "JcrSessionFactory.setSessionHolderProviderManager(SessionHolderProviderManager sessionHolderProviderManager)", "testcase": false, "constructor": false}, {"identifier": "setKeepNewNamespaces", "parameters": "(boolean keepNamespaces)", "modifiers": "public", "return": "void", "signature": "void setKeepNewNamespaces(boolean keepNamespaces)", "full_signature": "public void setKeepNewNamespaces(boolean keepNamespaces)", "class_method_signature": "JcrSessionFactory.setKeepNewNamespaces(boolean keepNamespaces)", "testcase": false, "constructor": false}, {"identifier": "setForceNamespacesRegistration", "parameters": "(boolean forceNamespacesRegistration)", "modifiers": "public", "return": "void", "signature": "void setForceNamespacesRegistration(boolean forceNamespacesRegistration)", "full_signature": "public void setForceNamespacesRegistration(boolean forceNamespacesRegistration)", "class_method_signature": "JcrSessionFactory.setForceNamespacesRegistration(boolean forceNamespacesRegistration)", "testcase": false, "constructor": false}, {"identifier": "setSkipExistingNamespaces", "parameters": "(boolean skipRegisteredNamespace)", "modifiers": "public", "return": "void", "signature": "void setSkipExistingNamespaces(boolean skipRegisteredNamespace)", "full_signature": "public void setSkipExistingNamespaces(boolean skipRegisteredNamespace)", "class_method_signature": "JcrSessionFactory.setSkipExistingNamespaces(boolean skipRegisteredNamespace)", "testcase": false, "constructor": false}, {"identifier": "isForceNamespacesRegistration", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isForceNamespacesRegistration()", "full_signature": "public boolean isForceNamespacesRegistration()", "class_method_signature": "JcrSessionFactory.isForceNamespacesRegistration()", "testcase": false, "constructor": false}, {"identifier": "isKeepNewNamespaces", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isKeepNewNamespaces()", "full_signature": "public boolean isKeepNewNamespaces()", "class_method_signature": "JcrSessionFactory.isKeepNewNamespaces()", "testcase": false, "constructor": false}, {"identifier": "isSkipExistingNamespaces", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSkipExistingNamespaces()", "full_signature": "public boolean isSkipExistingNamespaces()", "class_method_signature": "JcrSessionFactory.isSkipExistingNamespaces()", "testcase": false, "constructor": false}, {"identifier": "getCredentials", "parameters": "()", "modifiers": "public", "return": "Credentials", "signature": "Credentials getCredentials()", "full_signature": "public Credentials getCredentials()", "class_method_signature": "JcrSessionFactory.getCredentials()", "testcase": false, "constructor": false}, {"identifier": "getWorkspaceName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getWorkspaceName()", "full_signature": "public String getWorkspaceName()", "class_method_signature": "JcrSessionFactory.getWorkspaceName()", "testcase": false, "constructor": false}], "file": "se-jcr-commons/src/main/java/org/springframework/extensions/jcr/JcrSessionFactory.java"}, "focal_method": {"identifier": "registerNamespaces", "parameters": "()", "modifiers": "protected", "return": "void", "body": "protected void registerNamespaces() throws Exception {\n\n        if (namespaces == null || namespaces.isEmpty())\n            return;\n\n        if (LOG.isDebugEnabled())\n            LOG.debug(\"registering custom namespaces \" + namespaces);\n\n        Session session = getBareSession();\n        NamespaceRegistry registry = session.getWorkspace().getNamespaceRegistry();\n\n        // do the lookup, so we avoid exceptions\n        String[] prefixes = registry.getPrefixes();\n        // sort the array\n        Arrays.sort(prefixes);\n\n        // unregister namespaces if told so\n        if (forceNamespacesRegistration) {\n\n            // save the old namespace only if it makes sense\n            if (!keepNewNamespaces)\n                overwrittenNamespaces = new HashMap<String, String>(namespaces.size());\n\n            // search occurrences\n            for (Object key : namespaces.keySet()) {\n                String prefix = (String) key;\n                int position = Arrays.binarySearch(prefixes, prefix);\n                if (position >= 0) {\n                    if (LOG.isDebugEnabled()) {\n                        LOG.debug(\"prefix \" + prefix + \" was already registered; unregistering it\");\n                    }\n                    if (!keepNewNamespaces) {\n                        // save old namespace\n                        overwrittenNamespaces.put(prefix, registry.getURI(prefix));\n                    }\n                    registry.unregisterNamespace(prefix);\n                    // postpone registration for later\n                }\n            }\n        }\n\n        // do the registration\n        for (Map.Entry<?, ?> entry : namespaces.entrySet()) {\n            //            Map.Entry<String, String> namespace = (Map.Entry<String, String>) entry;\n            String prefix = (String) entry.getKey();\n            String ns = (String) entry.getValue();\n\n            int position = Arrays.binarySearch(prefixes, prefix);\n\n            if (skipExistingNamespaces && position >= 0) {\n                LOG.debug(\"namespace already registered under [\" + prefix + \"]; skipping registration\");\n            } else {\n                LOG.debug(\"registering namespace [\" + ns + \"] under [\" + prefix + \"]\");\n                registry.registerNamespace(prefix, ns);\n            }\n        }\n\n        session.logout();\n    }", "signature": "void registerNamespaces()", "full_signature": "protected void registerNamespaces()", "class_method_signature": "JcrSessionFactory.registerNamespaces()", "testcase": false, "constructor": false, "invocations": ["isEmpty", "isDebugEnabled", "debug", "getBareSession", "getNamespaceRegistry", "getWorkspace", "getPrefixes", "sort", "size", "keySet", "binarySearch", "isDebugEnabled", "debug", "put", "getURI", "unregisterNamespace", "entrySet", "getKey", "getValue", "binarySearch", "debug", "debug", "registerNamespace", "logout"]}, "repository": {"repo_id": 3415463, "url": "https://github.com/jbellmann/jcr-springextension", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 14, "size": 634, "license": "licensed"}}