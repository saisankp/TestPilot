{"test_class": {"identifier": "PresenceEventListenerTest", "superclass": "", "interfaces": "", "fields": [], "file": "kafka-webview-ui/src/test/java/org/sourcelab/kafka/webview/ui/manager/socket/PresenceEventListenerTest.java"}, "test_case": {"identifier": "testDisconnectListner", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDisconnectListner() {\n        final String sessionId = \"my-session-id\";\n        final SessionDisconnectEvent mockEvent = mock(SessionDisconnectEvent.class);\n        when(mockEvent.getSessionId()).thenReturn(sessionId);\n\n        // Create mock Manager\n        final WebSocketConsumersManager mockManager = mock(WebSocketConsumersManager.class);\n\n        // Create our listener\n        final PresenceEventListener eventListener = new PresenceEventListener(mockManager);\n\n        // Call method\n        eventListener.handleSessionDisconnect(mockEvent);\n\n        // validate\n        verify(mockManager, times(1)).removeConsumersForSessionId(eq(sessionId));\n    }", "signature": "void testDisconnectListner()", "full_signature": "@Test public void testDisconnectListner()", "class_method_signature": "PresenceEventListenerTest.testDisconnectListner()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getSessionId", "mock", "handleSessionDisconnect", "removeConsumersForSessionId", "verify", "times", "eq"]}, "focal_class": {"identifier": "PresenceEventListener", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final WebSocketConsumersManager webSocketConsumersManager;", "modifier": "private final", "type": "WebSocketConsumersManager", "declarator": "webSocketConsumersManager", "var_name": "webSocketConsumersManager"}], "methods": [{"identifier": "PresenceEventListener", "parameters": "(final WebSocketConsumersManager webSocketConsumersManager)", "modifiers": "public", "return": "", "signature": " PresenceEventListener(final WebSocketConsumersManager webSocketConsumersManager)", "full_signature": "public  PresenceEventListener(final WebSocketConsumersManager webSocketConsumersManager)", "class_method_signature": "PresenceEventListener.PresenceEventListener(final WebSocketConsumersManager webSocketConsumersManager)", "testcase": false, "constructor": true}, {"identifier": "handleSessionDisconnect", "parameters": "(final SessionDisconnectEvent event)", "modifiers": "@EventListener", "return": "void", "signature": "void handleSessionDisconnect(final SessionDisconnectEvent event)", "full_signature": "@EventListener void handleSessionDisconnect(final SessionDisconnectEvent event)", "class_method_signature": "PresenceEventListener.handleSessionDisconnect(final SessionDisconnectEvent event)", "testcase": false, "constructor": false}], "file": "kafka-webview-ui/src/main/java/org/sourcelab/kafka/webview/ui/manager/socket/PresenceEventListener.java"}, "focal_method": {"identifier": "handleSessionDisconnect", "parameters": "(final SessionDisconnectEvent event)", "modifiers": "@EventListener", "return": "void", "body": "@EventListener\n    void handleSessionDisconnect(final SessionDisconnectEvent event) {\n        // Grab sessionId from event\n        final String sessionId = event.getSessionId();\n\n        // Disconnect that sessionId's consumers\n        webSocketConsumersManager.removeConsumersForSessionId(sessionId);\n    }", "signature": "void handleSessionDisconnect(final SessionDisconnectEvent event)", "full_signature": "@EventListener void handleSessionDisconnect(final SessionDisconnectEvent event)", "class_method_signature": "PresenceEventListener.handleSessionDisconnect(final SessionDisconnectEvent event)", "testcase": false, "constructor": false, "invocations": ["getSessionId", "removeConsumersForSessionId"]}, "repository": {"repo_id": 106082622, "url": "https://github.com/SourceLabOrg/kafka-webview", "stars": 256, "created": "10/7/2017 8:28:45 AM +00:00", "updates": "2020-01-25T06:02:44+00:00", "fork": "False", "license": "licensed"}}