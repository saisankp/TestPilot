{"test_class": {"identifier": "HibernateMetadataVersionStoreTest", "superclass": "extends DhisSpringTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private MetadataVersionStore metadataVersionStore;", "modifier": "@Autowired\n    private", "type": "MetadataVersionStore", "declarator": "metadataVersionStore", "var_name": "metadataVersionStore"}], "file": "dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/metadata/version/hibernate/HibernateMetadataVersionStoreTest.java"}, "test_case": {"identifier": "testGetAllVersionsInBetween", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetAllVersionsInBetween() throws Exception\n    {\n        DateTimeFormatter dateTimeFormatter = DateTimeFormat.forPattern( \"yyyy-MM-dd HH:mm:ssZ\" );\n        org.joda.time.DateTime dateTime1 = dateTimeFormatter.parseDateTime( \"2016-06-20 10:45:50Z\" );\n        org.joda.time.DateTime dateTime2 = dateTimeFormatter.parseDateTime( \"2016-06-21 10:45:50Z\" );\n        org.joda.time.DateTime dateTime3 = dateTimeFormatter.parseDateTime( \"2016-06-22 10:45:50Z\" );\n\n        assertEquals( 0, metadataVersionStore.getAllVersionsInBetween( new Date(), new Date() ).size() );\n\n        MetadataVersion metadataVersion2 = new MetadataVersion( \"version2\", VersionType.ATOMIC );\n        metadataVersion2.setHashCode( \"12222\" );\n        metadataVersion2.setCreated( dateTime1.toDate() );\n        metadataVersionStore.save( metadataVersion2 );\n\n        MetadataVersion metadataVersion3 = new MetadataVersion( \"version3\", VersionType.ATOMIC );\n        metadataVersion3.setHashCode( \"12255\" );\n        metadataVersion3.setCreated( dateTime2.toDate() );\n        metadataVersionStore.save( metadataVersion3 );\n\n        MetadataVersion metadataVersion4 = new MetadataVersion( \"version4\", VersionType.ATOMIC );\n        metadataVersion4.setHashCode( \"12267\" );\n        metadataVersion4.setCreated( dateTime3.toDate() );\n        metadataVersionStore.save( metadataVersion4 );\n\n        List<MetadataVersion> allVersionsInBetween = metadataVersionStore.getAllVersionsInBetween( dateTime1.toDate(), dateTime2.toDate() );\n\n        assertEquals( 2, allVersionsInBetween.size() );\n        assertEquals( metadataVersion2, allVersionsInBetween.get( 0 ) );\n        assertEquals( metadataVersion3, allVersionsInBetween.get( 1 ) );\n        assertEquals( 0, metadataVersionStore.getAllVersionsInBetween( new Date(), new Date() ).size() );\n\n        metadataVersionStore.delete( metadataVersion2 );\n        metadataVersionStore.delete( metadataVersion3 );\n        metadataVersionStore.delete( metadataVersion4 );\n    }", "signature": "void testGetAllVersionsInBetween()", "full_signature": "@Test public void testGetAllVersionsInBetween()", "class_method_signature": "HibernateMetadataVersionStoreTest.testGetAllVersionsInBetween()", "testcase": true, "constructor": false, "invocations": ["forPattern", "parseDateTime", "parseDateTime", "parseDateTime", "assertEquals", "size", "getAllVersionsInBetween", "setHashCode", "setCreated", "toDate", "save", "setHashCode", "setCreated", "toDate", "save", "setHashCode", "setCreated", "toDate", "save", "getAllVersionsInBetween", "toDate", "toDate", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "size", "getAllVersionsInBetween", "delete", "delete", "delete"]}, "focal_class": {"identifier": "HibernateMetadataVersionStore", "superclass": "extends HibernateIdentifiableObjectStore<MetadataVersion>", "interfaces": "implements MetadataVersionStore", "fields": [], "methods": [{"identifier": "HibernateMetadataVersionStore", "parameters": "( SessionFactory sessionFactory, JdbcTemplate jdbcTemplate,\n        ApplicationEventPublisher publisher, CurrentUserService currentUserService, AclService aclService )", "modifiers": "public", "return": "", "signature": " HibernateMetadataVersionStore( SessionFactory sessionFactory, JdbcTemplate jdbcTemplate,\n        ApplicationEventPublisher publisher, CurrentUserService currentUserService, AclService aclService )", "full_signature": "public  HibernateMetadataVersionStore( SessionFactory sessionFactory, JdbcTemplate jdbcTemplate,\n        ApplicationEventPublisher publisher, CurrentUserService currentUserService, AclService aclService )", "class_method_signature": "HibernateMetadataVersionStore.HibernateMetadataVersionStore( SessionFactory sessionFactory, JdbcTemplate jdbcTemplate,\n        ApplicationEventPublisher publisher, CurrentUserService currentUserService, AclService aclService )", "testcase": false, "constructor": true}, {"identifier": "getVersionByKey", "parameters": "( long key )", "modifiers": "@Override public", "return": "MetadataVersion", "signature": "MetadataVersion getVersionByKey( long key )", "full_signature": "@Override public MetadataVersion getVersionByKey( long key )", "class_method_signature": "HibernateMetadataVersionStore.getVersionByKey( long key )", "testcase": false, "constructor": false}, {"identifier": "getVersionByName", "parameters": "( String versionName )", "modifiers": "@Override public", "return": "MetadataVersion", "signature": "MetadataVersion getVersionByName( String versionName )", "full_signature": "@Override public MetadataVersion getVersionByName( String versionName )", "class_method_signature": "HibernateMetadataVersionStore.getVersionByName( String versionName )", "testcase": false, "constructor": false}, {"identifier": "getCurrentVersion", "parameters": "()", "modifiers": "@Override public", "return": "MetadataVersion", "signature": "MetadataVersion getCurrentVersion()", "full_signature": "@Override public MetadataVersion getCurrentVersion()", "class_method_signature": "HibernateMetadataVersionStore.getCurrentVersion()", "testcase": false, "constructor": false}, {"identifier": "getAllVersionsInBetween", "parameters": "( Date startDate, Date endDate )", "modifiers": "@Override public", "return": "List<MetadataVersion>", "signature": "List<MetadataVersion> getAllVersionsInBetween( Date startDate, Date endDate )", "full_signature": "@Override public List<MetadataVersion> getAllVersionsInBetween( Date startDate, Date endDate )", "class_method_signature": "HibernateMetadataVersionStore.getAllVersionsInBetween( Date startDate, Date endDate )", "testcase": false, "constructor": false}, {"identifier": "getInitialVersion", "parameters": "()", "modifiers": "@Override public", "return": "MetadataVersion", "signature": "MetadataVersion getInitialVersion()", "full_signature": "@Override public MetadataVersion getInitialVersion()", "class_method_signature": "HibernateMetadataVersionStore.getInitialVersion()", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/metadata/version/hibernate/HibernateMetadataVersionStore.java"}, "focal_method": {"identifier": "getAllVersionsInBetween", "parameters": "( Date startDate, Date endDate )", "modifiers": "@Override public", "return": "List<MetadataVersion>", "body": "@Override\n    public List<MetadataVersion> getAllVersionsInBetween( Date startDate, Date endDate )\n    {\n        CriteriaBuilder builder = getCriteriaBuilder();\n\n        return getList( builder, newJpaParameters()\n            .addPredicate( root -> builder.between( root.get( \"created\" ), startDate, endDate ) ) );\n    }", "signature": "List<MetadataVersion> getAllVersionsInBetween( Date startDate, Date endDate )", "full_signature": "@Override public List<MetadataVersion> getAllVersionsInBetween( Date startDate, Date endDate )", "class_method_signature": "HibernateMetadataVersionStore.getAllVersionsInBetween( Date startDate, Date endDate )", "testcase": false, "constructor": false, "invocations": ["getCriteriaBuilder", "getList", "addPredicate", "newJpaParameters", "between", "get"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}