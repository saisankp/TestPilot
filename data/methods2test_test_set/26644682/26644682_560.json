{"test_class": {"identifier": "PropertiesEncryptionTest", "superclass": "", "interfaces": "", "fields": [], "file": "dataprep-backend-service/src/test/java/org/talend/dataprep/encrypt/PropertiesEncryptionTest.java"}, "test_case": {"identifier": "shouldEncryptAndSaveAllOccurrences", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldEncryptAndSaveAllOccurrences() throws Exception {\n        // given\n        String propertyKey = \"admin.password\";\n        String propertyValue = \"5ecr3t\";\n        String propertyEncodedValue = \"JP6lC6hVeu3wRZA1Tzigyg==\";\n\n        String mongoPropName = \"mongodb.uri\";\n        String mongoPropValue = \"mongodb://userName:5ecr3t@dataprep-server.org:27017/dataprep?toto=tata\";\n        String mongoPropValueEncrypted =\n                \"mongodb://userName:JP6lC6hVeu3wRZA1Tzigyg==@dataprep-server.org:27017/dataprep?toto=tata\";\n\n        Path tempFile = Files.createTempFile(\"dataprep-PropertiesEncryptionTest.\", \".properties\");\n        try (BufferedWriter bufferedWriter = Files.newBufferedWriter(tempFile, Charsets.UTF_8)) {\n            for (int i = 0; i < 5; i++) {\n                bufferedWriter.write(propertyKey + \"=\" + propertyValue);\n                bufferedWriter.newLine();\n            }\n            bufferedWriter.write(mongoPropName + \"=\" + mongoPropValue);\n        }\n\n        // when\n        new PropertiesEncryption().encryptAndSave(tempFile.toString(), Sets.newHashSet(propertyKey, mongoPropName));\n\n        // then\n        Properties properties = new Properties();\n        properties.load(new FileInputStream(tempFile.toFile()));\n        assertEquals(propertyEncodedValue, properties.getProperty(propertyKey));\n        assertEquals(mongoPropValueEncrypted, properties.getProperty(mongoPropName));\n    }", "signature": "void shouldEncryptAndSaveAllOccurrences()", "full_signature": "@Test public void shouldEncryptAndSaveAllOccurrences()", "class_method_signature": "PropertiesEncryptionTest.shouldEncryptAndSaveAllOccurrences()", "testcase": true, "constructor": false, "invocations": ["createTempFile", "newBufferedWriter", "write", "newLine", "write", "encryptAndSave", "toString", "newHashSet", "load", "toFile", "assertEquals", "getProperty", "assertEquals", "getProperty"]}, "focal_class": {"identifier": "PropertiesEncryption", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(PropertiesEncryption.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(PropertiesEncryption.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "encryptAndSave", "parameters": "(String input, Set<String> mustBeEncrypted)", "modifiers": "public", "return": "void", "signature": "void encryptAndSave(String input, Set<String> mustBeEncrypted)", "full_signature": "public void encryptAndSave(String input, Set<String> mustBeEncrypted)", "class_method_signature": "PropertiesEncryption.encryptAndSave(String input, Set<String> mustBeEncrypted)", "testcase": false, "constructor": false}, {"identifier": "decryptAndSave", "parameters": "(String input, Set<String> mustBeDecrypted)", "modifiers": "public", "return": "void", "signature": "void decryptAndSave(String input, Set<String> mustBeDecrypted)", "full_signature": "public void decryptAndSave(String input, Set<String> mustBeDecrypted)", "class_method_signature": "PropertiesEncryption.decryptAndSave(String input, Set<String> mustBeDecrypted)", "testcase": false, "constructor": false}, {"identifier": "modifyAndSave", "parameters": "(String input, Set<String> mustBeModified, Function<String, String> function)", "modifiers": "private", "return": "void", "signature": "void modifyAndSave(String input, Set<String> mustBeModified, Function<String, String> function)", "full_signature": "private void modifyAndSave(String input, Set<String> mustBeModified, Function<String, String> function)", "class_method_signature": "PropertiesEncryption.modifyAndSave(String input, Set<String> mustBeModified, Function<String, String> function)", "testcase": false, "constructor": false}, {"identifier": "encryptIfNot", "parameters": "(String input)", "modifiers": "private", "return": "String", "signature": "String encryptIfNot(String input)", "full_signature": "private String encryptIfNot(String input)", "class_method_signature": "PropertiesEncryption.encryptIfNot(String input)", "testcase": false, "constructor": false}, {"identifier": "decryptIfNot", "parameters": "(String input)", "modifiers": "private", "return": "String", "signature": "String decryptIfNot(String input)", "full_signature": "private String decryptIfNot(String input)", "class_method_signature": "PropertiesEncryption.decryptIfNot(String input)", "testcase": false, "constructor": false}, {"identifier": "isUrl", "parameters": "(String field)", "modifiers": "private static", "return": "boolean", "signature": "boolean isUrl(String field)", "full_signature": "private static boolean isUrl(String field)", "class_method_signature": "PropertiesEncryption.isUrl(String field)", "testcase": false, "constructor": false}], "file": "dataprep-backend-service/src/main/java/org/talend/dataprep/encrypt/PropertiesEncryption.java"}, "focal_method": {"identifier": "encryptAndSave", "parameters": "(String input, Set<String> mustBeEncrypted)", "modifiers": "public", "return": "void", "body": "public void encryptAndSave(String input, Set<String> mustBeEncrypted) {\n        modifyAndSave(input, mustBeEncrypted, this::encryptIfNot);\n    }", "signature": "void encryptAndSave(String input, Set<String> mustBeEncrypted)", "full_signature": "public void encryptAndSave(String input, Set<String> mustBeEncrypted)", "class_method_signature": "PropertiesEncryption.encryptAndSave(String input, Set<String> mustBeEncrypted)", "testcase": false, "constructor": false, "invocations": ["modifyAndSave"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}