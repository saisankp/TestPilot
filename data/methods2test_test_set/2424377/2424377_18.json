{"test_class": {"identifier": "MatrixUtilsTest", "superclass": "extends TestBase", "interfaces": "", "fields": [], "file": "core/src/test/java/org/carrot2/math/matrix/MatrixUtilsTest.java"}, "test_case": {"identifier": "testNormalizeColumnsL1Zeros", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testNormalizeColumnsL1Zeros() {\n    /** A matrix with unnormalized columns */\n    DoubleMatrix2D unnormalisedColumns = zeroColumnMatrix();\n    MatrixUtils.normalizeColumnL1(unnormalisedColumns, new double[1]);\n\n    checkL1Normalization(unnormalisedColumns);\n  }", "signature": "void testNormalizeColumnsL1Zeros()", "full_signature": "@Test public void testNormalizeColumnsL1Zeros()", "class_method_signature": "MatrixUtilsTest.testNormalizeColumnsL1Zeros()", "testcase": true, "constructor": false, "invocations": ["zeroColumnMatrix", "normalizeColumnL1", "checkL1Normalization"]}, "focal_class": {"identifier": "MatrixUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "normalizeColumnL2", "parameters": "(DoubleMatrix2D A, double[] work)", "modifiers": "public static", "return": "DoubleMatrix2D", "signature": "DoubleMatrix2D normalizeColumnL2(DoubleMatrix2D A, double[] work)", "full_signature": "public static DoubleMatrix2D normalizeColumnL2(DoubleMatrix2D A, double[] work)", "class_method_signature": "MatrixUtils.normalizeColumnL2(DoubleMatrix2D A, double[] work)", "testcase": false, "constructor": false}, {"identifier": "normalizeSparseColumnL2", "parameters": "(\n      final DoubleMatrix2D A, final double[] work)", "modifiers": "public static", "return": "DoubleMatrix2D", "signature": "DoubleMatrix2D normalizeSparseColumnL2(\n      final DoubleMatrix2D A, final double[] work)", "full_signature": "public static DoubleMatrix2D normalizeSparseColumnL2(\n      final DoubleMatrix2D A, final double[] work)", "class_method_signature": "MatrixUtils.normalizeSparseColumnL2(\n      final DoubleMatrix2D A, final double[] work)", "testcase": false, "constructor": false}, {"identifier": "normalizeColumnL1", "parameters": "(DoubleMatrix2D A, double[] work)", "modifiers": "public static", "return": "DoubleMatrix2D", "signature": "DoubleMatrix2D normalizeColumnL1(DoubleMatrix2D A, double[] work)", "full_signature": "public static DoubleMatrix2D normalizeColumnL1(DoubleMatrix2D A, double[] work)", "class_method_signature": "MatrixUtils.normalizeColumnL1(DoubleMatrix2D A, double[] work)", "testcase": false, "constructor": false}, {"identifier": "prepareWork", "parameters": "(DoubleMatrix2D A, double[] work)", "modifiers": "private static", "return": "double[]", "signature": "double[] prepareWork(DoubleMatrix2D A, double[] work)", "full_signature": "private static double[] prepareWork(DoubleMatrix2D A, double[] work)", "class_method_signature": "MatrixUtils.prepareWork(DoubleMatrix2D A, double[] work)", "testcase": false, "constructor": false}, {"identifier": "normalizeColumns", "parameters": "(DoubleMatrix2D A, double[] work)", "modifiers": "private static", "return": "void", "signature": "void normalizeColumns(DoubleMatrix2D A, double[] work)", "full_signature": "private static void normalizeColumns(DoubleMatrix2D A, double[] work)", "class_method_signature": "MatrixUtils.normalizeColumns(DoubleMatrix2D A, double[] work)", "testcase": false, "constructor": false}, {"identifier": "computeOrthogonality", "parameters": "(DoubleMatrix2D A)", "modifiers": "public static", "return": "double", "signature": "double computeOrthogonality(DoubleMatrix2D A)", "full_signature": "public static double computeOrthogonality(DoubleMatrix2D A)", "class_method_signature": "MatrixUtils.computeOrthogonality(DoubleMatrix2D A)", "testcase": false, "constructor": false}, {"identifier": "computeSparseness", "parameters": "(DoubleMatrix2D A)", "modifiers": "public static", "return": "double", "signature": "double computeSparseness(DoubleMatrix2D A)", "full_signature": "public static double computeSparseness(DoubleMatrix2D A)", "class_method_signature": "MatrixUtils.computeSparseness(DoubleMatrix2D A)", "testcase": false, "constructor": false}, {"identifier": "minInColumns", "parameters": "(DoubleMatrix2D A, int[] indices, double[] minValues)", "modifiers": "public static", "return": "int[]", "signature": "int[] minInColumns(DoubleMatrix2D A, int[] indices, double[] minValues)", "full_signature": "public static int[] minInColumns(DoubleMatrix2D A, int[] indices, double[] minValues)", "class_method_signature": "MatrixUtils.minInColumns(DoubleMatrix2D A, int[] indices, double[] minValues)", "testcase": false, "constructor": false}, {"identifier": "maxInColumns", "parameters": "(DoubleMatrix2D A, int[] indices, double[] maxValues)", "modifiers": "public static", "return": "int[]", "signature": "int[] maxInColumns(DoubleMatrix2D A, int[] indices, double[] maxValues)", "full_signature": "public static int[] maxInColumns(DoubleMatrix2D A, int[] indices, double[] maxValues)", "class_method_signature": "MatrixUtils.maxInColumns(DoubleMatrix2D A, int[] indices, double[] maxValues)", "testcase": false, "constructor": false}, {"identifier": "maxInColumns", "parameters": "(\n      DoubleMatrix2D A, int[] indices, double[] maxValues, DoubleFunction transform)", "modifiers": "public static", "return": "int[]", "signature": "int[] maxInColumns(\n      DoubleMatrix2D A, int[] indices, double[] maxValues, DoubleFunction transform)", "full_signature": "public static int[] maxInColumns(\n      DoubleMatrix2D A, int[] indices, double[] maxValues, DoubleFunction transform)", "class_method_signature": "MatrixUtils.maxInColumns(\n      DoubleMatrix2D A, int[] indices, double[] maxValues, DoubleFunction transform)", "testcase": false, "constructor": false}, {"identifier": "inColumns", "parameters": "(\n      DoubleMatrix2D A,\n      int[] indices,\n      double[] extValues,\n      DoubleComparator doubleComparator,\n      DoubleFunction transform)", "modifiers": "private static", "return": "int[]", "signature": "int[] inColumns(\n      DoubleMatrix2D A,\n      int[] indices,\n      double[] extValues,\n      DoubleComparator doubleComparator,\n      DoubleFunction transform)", "full_signature": "private static int[] inColumns(\n      DoubleMatrix2D A,\n      int[] indices,\n      double[] extValues,\n      DoubleComparator doubleComparator,\n      DoubleFunction transform)", "class_method_signature": "MatrixUtils.inColumns(\n      DoubleMatrix2D A,\n      int[] indices,\n      double[] extValues,\n      DoubleComparator doubleComparator,\n      DoubleFunction transform)", "testcase": false, "constructor": false}, {"identifier": "maxInRow", "parameters": "(DoubleMatrix2D A, int row)", "modifiers": "public static", "return": "int", "signature": "int maxInRow(DoubleMatrix2D A, int row)", "full_signature": "public static int maxInRow(DoubleMatrix2D A, int row)", "class_method_signature": "MatrixUtils.maxInRow(DoubleMatrix2D A, int row)", "testcase": false, "constructor": false}, {"identifier": "sumRows", "parameters": "(DoubleMatrix2D A, double[] sums)", "modifiers": "public static", "return": "double[]", "signature": "double[] sumRows(DoubleMatrix2D A, double[] sums)", "full_signature": "public static double[] sumRows(DoubleMatrix2D A, double[] sums)", "class_method_signature": "MatrixUtils.sumRows(DoubleMatrix2D A, double[] sums)", "testcase": false, "constructor": false}, {"identifier": "frobeniusNorm", "parameters": "(DoubleMatrix2D matrix)", "modifiers": "public static", "return": "double", "signature": "double frobeniusNorm(DoubleMatrix2D matrix)", "full_signature": "public static double frobeniusNorm(DoubleMatrix2D matrix)", "class_method_signature": "MatrixUtils.frobeniusNorm(DoubleMatrix2D matrix)", "testcase": false, "constructor": false}, {"identifier": "sortedRowsView", "parameters": "(\n      DoubleMatrix2D matrix, IndirectComparator comparator)", "modifiers": "public static", "return": "DoubleMatrix2D", "signature": "DoubleMatrix2D sortedRowsView(\n      DoubleMatrix2D matrix, IndirectComparator comparator)", "full_signature": "public static DoubleMatrix2D sortedRowsView(\n      DoubleMatrix2D matrix, IndirectComparator comparator)", "class_method_signature": "MatrixUtils.sortedRowsView(\n      DoubleMatrix2D matrix, IndirectComparator comparator)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/carrot2/math/matrix/MatrixUtils.java"}, "focal_method": {"identifier": "normalizeColumnL1", "parameters": "(DoubleMatrix2D A, double[] work)", "modifiers": "public static", "return": "DoubleMatrix2D", "body": "public static DoubleMatrix2D normalizeColumnL1(DoubleMatrix2D A, double[] work) {\n    work = prepareWork(A, work);\n\n    // Calculate the L1 norm for each column\n    for (int r = 0; r < A.rows(); r++) {\n      for (int c = 0; c < A.columns(); c++) {\n        work[c] += A.getQuick(r, c);\n      }\n    }\n\n    // Normalize\n    normalizeColumns(A, work);\n\n    return A;\n  }", "signature": "DoubleMatrix2D normalizeColumnL1(DoubleMatrix2D A, double[] work)", "full_signature": "public static DoubleMatrix2D normalizeColumnL1(DoubleMatrix2D A, double[] work)", "class_method_signature": "MatrixUtils.normalizeColumnL1(DoubleMatrix2D A, double[] work)", "testcase": false, "constructor": false, "invocations": ["prepareWork", "rows", "columns", "getQuick", "normalizeColumns"]}, "repository": {"repo_id": 2424377, "url": "https://github.com/carrot2/carrot2", "stars": 393, "created": "9/20/2011 6:19:05 PM +00:00", "updates": "2020-01-24T20:43:38+00:00", "fork": "False", "license": "licensed"}}