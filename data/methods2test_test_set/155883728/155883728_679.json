{"test_class": {"identifier": "ForcedRootTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/net/adamcin/oakpal/core/ForcedRootTest.java"}, "test_case": {"identifier": "testFromJson", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFromJson() {\n        final ForcedRoot.JsonKeys keys = ForcedRoot.keys();\n        final String path = \"/correct/path\";\n        final String primaryType = \"primaryType\";\n        final List<String> mixinTypes = Collections.singletonList(\"mixinType\");\n        final ForcedRoot rootEmpty = ForcedRoot.fromJson(obj().get());\n        assertNull(\"empty root has null path\", rootEmpty.getPath());\n        assertNull(\"empty root has null primaryType\", rootEmpty.getPrimaryType());\n        assertTrue(\"empty root has empty mixinTypes\", rootEmpty.getMixinTypes().isEmpty());\n\n        final ForcedRoot rootPath = ForcedRoot.fromJson(\n                obj().key(keys.path(), path).get());\n\n        assertEquals(\"path root has correct path\", path, rootPath.getPath());\n\n        final ForcedRoot rootPrimaryType = ForcedRoot.fromJson(\n                obj().key(keys.primaryType(), primaryType).get());\n\n        assertEquals(\"primaryType root has correct primaryType\",\n                primaryType, rootPrimaryType.getPrimaryType());\n\n        final ForcedRoot rootMixinTypes = ForcedRoot.fromJson(\n                obj().key(keys.mixinTypes(), mixinTypes).get());\n\n        assertEquals(\"mixinTypes root has correct mixinTypes\",\n                mixinTypes, rootMixinTypes.getMixinTypes());\n    }", "signature": "void testFromJson()", "full_signature": "@Test public void testFromJson()", "class_method_signature": "ForcedRootTest.testFromJson()", "testcase": true, "constructor": false, "invocations": ["keys", "singletonList", "fromJson", "get", "obj", "assertNull", "getPath", "assertNull", "getPrimaryType", "assertTrue", "isEmpty", "getMixinTypes", "fromJson", "get", "key", "obj", "path", "assertEquals", "getPath", "fromJson", "get", "key", "obj", "primaryType", "assertEquals", "getPrimaryType", "fromJson", "get", "key", "obj", "mixinTypes", "assertEquals", "getMixinTypes"]}, "focal_class": {"identifier": "ForcedRoot", "superclass": "", "interfaces": "implements JsonObjectConvertible, Comparable<ForcedRoot>", "fields": [{"original_string": "private static final JsonKeys KEYS = new JsonKeys() {\n        @Override\n        public String path() {\n            return \"path\";\n        }\n\n        @Override\n        public String primaryType() {\n            return \"primaryType\";\n        }\n\n        @Override\n        public String mixinTypes() {\n            return \"mixinTypes\";\n        }\n    };", "modifier": "private static final", "type": "JsonKeys", "declarator": "KEYS = new JsonKeys() {\n        @Override\n        public String path() {\n            return \"path\";\n        }\n\n        @Override\n        public String primaryType() {\n            return \"primaryType\";\n        }\n\n        @Override\n        public String mixinTypes() {\n            return \"mixinTypes\";\n        }\n    }", "var_name": "KEYS"}, {"original_string": "@Nullable\n    private String path;", "modifier": "@Nullable\n    private", "type": "String", "declarator": "path", "var_name": "path"}, {"original_string": "@Nullable\n    private String primaryType;", "modifier": "@Nullable\n    private", "type": "String", "declarator": "primaryType", "var_name": "primaryType"}, {"original_string": "@NotNull\n    private List<String> mixinTypes = Collections.emptyList();", "modifier": "@NotNull\n    private", "type": "List<String>", "declarator": "mixinTypes = Collections.emptyList()", "var_name": "mixinTypes"}], "methods": [{"identifier": "keys", "parameters": "()", "modifiers": "@NotNull public static", "return": "ForcedRoot.JsonKeys", "signature": "ForcedRoot.JsonKeys keys()", "full_signature": "@NotNull public static ForcedRoot.JsonKeys keys()", "class_method_signature": "ForcedRoot.keys()", "testcase": false, "constructor": false}, {"identifier": "getPath", "parameters": "()", "modifiers": "public @Nullable", "return": "String", "signature": "String getPath()", "full_signature": "public @Nullable String getPath()", "class_method_signature": "ForcedRoot.getPath()", "testcase": false, "constructor": false}, {"identifier": "setPath", "parameters": "(final @Nullable String path)", "modifiers": "public", "return": "void", "signature": "void setPath(final @Nullable String path)", "full_signature": "public void setPath(final @Nullable String path)", "class_method_signature": "ForcedRoot.setPath(final @Nullable String path)", "testcase": false, "constructor": false}, {"identifier": "getPrimaryType", "parameters": "()", "modifiers": "public @Nullable", "return": "String", "signature": "String getPrimaryType()", "full_signature": "public @Nullable String getPrimaryType()", "class_method_signature": "ForcedRoot.getPrimaryType()", "testcase": false, "constructor": false}, {"identifier": "setPrimaryType", "parameters": "(final @Nullable String primaryType)", "modifiers": "public", "return": "void", "signature": "void setPrimaryType(final @Nullable String primaryType)", "full_signature": "public void setPrimaryType(final @Nullable String primaryType)", "class_method_signature": "ForcedRoot.setPrimaryType(final @Nullable String primaryType)", "testcase": false, "constructor": false}, {"identifier": "getMixinTypes", "parameters": "()", "modifiers": "public @NotNull", "return": "List<String>", "signature": "List<String> getMixinTypes()", "full_signature": "public @NotNull List<String> getMixinTypes()", "class_method_signature": "ForcedRoot.getMixinTypes()", "testcase": false, "constructor": false}, {"identifier": "setMixinTypes", "parameters": "(final @Nullable List<String> mixinTypes)", "modifiers": "public", "return": "void", "signature": "void setMixinTypes(final @Nullable List<String> mixinTypes)", "full_signature": "public void setMixinTypes(final @Nullable List<String> mixinTypes)", "class_method_signature": "ForcedRoot.setMixinTypes(final @Nullable List<String> mixinTypes)", "testcase": false, "constructor": false}, {"identifier": "withPath", "parameters": "(final @Nullable String path)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public", "return": "ForcedRoot", "signature": "ForcedRoot withPath(final @Nullable String path)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public ForcedRoot withPath(final @Nullable String path)", "class_method_signature": "ForcedRoot.withPath(final @Nullable String path)", "testcase": false, "constructor": false}, {"identifier": "withPrimaryType", "parameters": "(final @Nullable String primaryType)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public", "return": "ForcedRoot", "signature": "ForcedRoot withPrimaryType(final @Nullable String primaryType)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public ForcedRoot withPrimaryType(final @Nullable String primaryType)", "class_method_signature": "ForcedRoot.withPrimaryType(final @Nullable String primaryType)", "testcase": false, "constructor": false}, {"identifier": "withMixinTypes", "parameters": "(final @NotNull String... mixinTypes)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public", "return": "ForcedRoot", "signature": "ForcedRoot withMixinTypes(final @NotNull String... mixinTypes)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public ForcedRoot withMixinTypes(final @NotNull String... mixinTypes)", "class_method_signature": "ForcedRoot.withMixinTypes(final @NotNull String... mixinTypes)", "testcase": false, "constructor": false}, {"identifier": "hasPath", "parameters": "()", "modifiers": "public final", "return": "boolean", "signature": "boolean hasPath()", "full_signature": "public final boolean hasPath()", "class_method_signature": "ForcedRoot.hasPath()", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(final @NotNull JsonObject json)", "modifiers": "public static @NotNull", "return": "ForcedRoot", "signature": "ForcedRoot fromJson(final @NotNull JsonObject json)", "full_signature": "public static @NotNull ForcedRoot fromJson(final @NotNull JsonObject json)", "class_method_signature": "ForcedRoot.fromJson(final @NotNull JsonObject json)", "testcase": false, "constructor": false}, {"identifier": "getNamespacePrefixes", "parameters": "()", "modifiers": "public @NotNull", "return": "String[]", "signature": "String[] getNamespacePrefixes()", "full_signature": "public @NotNull String[] getNamespacePrefixes()", "class_method_signature": "ForcedRoot.getNamespacePrefixes()", "testcase": false, "constructor": false}, {"identifier": "toJson", "parameters": "()", "modifiers": "@Override public", "return": "JsonObject", "signature": "JsonObject toJson()", "full_signature": "@Override public JsonObject toJson()", "class_method_signature": "ForcedRoot.toJson()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(final @NotNull ForcedRoot o)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(final @NotNull ForcedRoot o)", "full_signature": "@Override public int compareTo(final @NotNull ForcedRoot o)", "class_method_signature": "ForcedRoot.compareTo(final @NotNull ForcedRoot o)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "ForcedRoot.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ForcedRoot.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ForcedRoot.toString()", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/ForcedRoot.java"}, "focal_method": {"identifier": "fromJson", "parameters": "(final @NotNull JsonObject json)", "modifiers": "public static @NotNull", "return": "ForcedRoot", "body": "public static @NotNull ForcedRoot fromJson(final @NotNull JsonObject json) {\n        final JsonKeys keys = keys();\n        final ForcedRoot forcedRoot = new ForcedRoot();\n        if (json.containsKey(keys.path())) {\n            forcedRoot.setPath(json.getString(keys.path()));\n        }\n        if (json.containsKey(keys.primaryType())) {\n            forcedRoot.setPrimaryType(json.getString(keys.primaryType()));\n        }\n        optArray(json, keys.mixinTypes()).ifPresent(jsonArray -> {\n            forcedRoot.setMixinTypes(mapArrayOfStrings(jsonArray, Function.identity()));\n        });\n        return forcedRoot;\n    }", "signature": "ForcedRoot fromJson(final @NotNull JsonObject json)", "full_signature": "public static @NotNull ForcedRoot fromJson(final @NotNull JsonObject json)", "class_method_signature": "ForcedRoot.fromJson(final @NotNull JsonObject json)", "testcase": false, "constructor": false, "invocations": ["keys", "containsKey", "path", "setPath", "getString", "path", "containsKey", "primaryType", "setPrimaryType", "getString", "primaryType", "ifPresent", "optArray", "mixinTypes", "setMixinTypes", "mapArrayOfStrings", "identity"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}