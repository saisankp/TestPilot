{"test_class": {"identifier": "DataSetNameInjectionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private DataSetNameInjection dataSetNameInjection;", "modifier": "@InjectMocks\n    private", "type": "DataSetNameInjection", "declarator": "dataSetNameInjection", "var_name": "dataSetNameInjection"}, {"original_string": "@Mock\n    private Security security;", "modifier": "@Mock\n    private", "type": "Security", "declarator": "security", "var_name": "security"}, {"original_string": "@Mock\n    private SecurityProxy securityProxy;", "modifier": "@Mock\n    private", "type": "SecurityProxy", "declarator": "securityProxy", "var_name": "securityProxy"}, {"original_string": "@Mock\n    private DataCatalogClient dataCatalogClient;", "modifier": "@Mock\n    private", "type": "DataCatalogClient", "declarator": "dataCatalogClient", "var_name": "dataCatalogClient"}, {"original_string": "@Mock\n    protected PreparationRepository preparationRepository;", "modifier": "@Mock\n    protected", "type": "PreparationRepository", "declarator": "preparationRepository", "var_name": "preparationRepository"}], "file": "dataprep-preparation/src/test/java/org/talend/dataprep/preparation/service/DataSetNameInjectionTest.java"}, "test_case": {"identifier": "injectDatasetNameBasedOnId_datasetClientError", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void injectDatasetNameBasedOnId_datasetClientError() {\n        // given\n        PersistentPreparation input = new PersistentPreparation();\n        String dataSetId = \"1234\";\n        input.setDataSetId(dataSetId);\n        when(security.getTenantId()).thenReturn(\"tenant id\");\n        Dataset datasetMetadata = new Dataset();\n        String datasetLabel = \"dataset label\";\n        datasetMetadata.setLabel(datasetLabel);\n        when(dataCatalogClient.getMetadata(dataSetId)).thenThrow(new TDPException());\n\n        // when\n        PersistentPreparation result = dataSetNameInjection.injectDatasetNameBasedOnId(input);\n\n        // then\n        assertNull(result.getDataSetName()); // dataset name has not changed in DTO\n        verify(security).getTenantId();\n        verifyNoMoreInteractions(security);\n        verify(securityProxy).asTechnicalUserForDataSet();\n        verify(securityProxy).releaseIdentity();\n        verifyNoMoreInteractions(securityProxy);\n        verify(dataCatalogClient).getMetadata(dataSetId);\n        verifyNoMoreInteractions(dataCatalogClient);\n        verifyZeroInteractions(preparationRepository);\n    }", "signature": "void injectDatasetNameBasedOnId_datasetClientError()", "full_signature": "@Test public void injectDatasetNameBasedOnId_datasetClientError()", "class_method_signature": "DataSetNameInjectionTest.injectDatasetNameBasedOnId_datasetClientError()", "testcase": true, "constructor": false, "invocations": ["setDataSetId", "thenReturn", "when", "getTenantId", "setLabel", "thenThrow", "when", "getMetadata", "injectDatasetNameBasedOnId", "assertNull", "getDataSetName", "getTenantId", "verify", "verifyNoMoreInteractions", "asTechnicalUserForDataSet", "verify", "releaseIdentity", "verify", "verifyNoMoreInteractions", "getMetadata", "verify", "verifyNoMoreInteractions", "verifyZeroInteractions"]}, "focal_class": {"identifier": "DataSetNameInjection", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(DataSetNameInjection.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DataSetNameInjection.class)", "var_name": "LOGGER"}, {"original_string": "private final Cache<String, Cache<String, String>> cache = Caffeine\n            .newBuilder() //\n            .maximumSize(10) //\n            .expireAfterAccess(1, TimeUnit.MINUTES) //\n            .build();", "modifier": "private final", "type": "Cache<String, Cache<String, String>>", "declarator": "cache = Caffeine\n            .newBuilder() //\n            .maximumSize(10) //\n            .expireAfterAccess(1, TimeUnit.MINUTES) //\n            .build()", "var_name": "cache"}, {"original_string": "@Autowired\n    private Security security;", "modifier": "@Autowired\n    private", "type": "Security", "declarator": "security", "var_name": "security"}, {"original_string": "@Autowired\n    private SecurityProxy securityProxy;", "modifier": "@Autowired\n    private", "type": "SecurityProxy", "declarator": "securityProxy", "var_name": "securityProxy"}, {"original_string": "@Autowired\n    private DataCatalogClient dataCatalogClient;", "modifier": "@Autowired\n    private", "type": "DataCatalogClient", "declarator": "dataCatalogClient", "var_name": "dataCatalogClient"}, {"original_string": "@Autowired\n    protected PreparationRepository preparationRepository;", "modifier": "@Autowired\n    protected", "type": "PreparationRepository", "declarator": "preparationRepository", "var_name": "preparationRepository"}], "methods": [{"identifier": "injectDatasetNameBasedOnId", "parameters": "(PersistentPreparation preparation)", "modifiers": "public", "return": "PersistentPreparation", "signature": "PersistentPreparation injectDatasetNameBasedOnId(PersistentPreparation preparation)", "full_signature": "public PersistentPreparation injectDatasetNameBasedOnId(PersistentPreparation preparation)", "class_method_signature": "DataSetNameInjection.injectDatasetNameBasedOnId(PersistentPreparation preparation)", "testcase": false, "constructor": false}, {"identifier": "createTenantCache", "parameters": "(String tenantId)", "modifiers": "@SuppressWarnings(\"unused\") // needed to fit the cache get method private", "return": "Cache<String, String>", "signature": "Cache<String, String> createTenantCache(String tenantId)", "full_signature": "@SuppressWarnings(\"unused\") // needed to fit the cache get method private Cache<String, String> createTenantCache(String tenantId)", "class_method_signature": "DataSetNameInjection.createTenantCache(String tenantId)", "testcase": false, "constructor": false}, {"identifier": "getDatasetLabel", "parameters": "(String dataSetId)", "modifiers": "private", "return": "String", "signature": "String getDatasetLabel(String dataSetId)", "full_signature": "private String getDatasetLabel(String dataSetId)", "class_method_signature": "DataSetNameInjection.getDatasetLabel(String dataSetId)", "testcase": false, "constructor": false}], "file": "dataprep-preparation/src/main/java/org/talend/dataprep/preparation/service/DataSetNameInjection.java"}, "focal_method": {"identifier": "injectDatasetNameBasedOnId", "parameters": "(PersistentPreparation preparation)", "modifiers": "public", "return": "PersistentPreparation", "body": "public PersistentPreparation injectDatasetNameBasedOnId(PersistentPreparation preparation) {\n        String dataSetName = preparation.getDataSetName();\n        if (dataSetName == null) {\n            try {\n                final String tenantId = security.getTenantId();\n                final Cache<String, String> tenantCache = cache.get(tenantId, this::createTenantCache);\n                assert tenantCache != null; // initTenant() cannot return a null value\n                String dataSetId = preparation.getDataSetId();\n                dataSetName = tenantCache.get(dataSetId, this::getDatasetLabel);\n                if (dataSetName != null) {\n                    preparation.setDataSetName(dataSetName);\n                    preparationRepository.add(preparation);\n                }\n            } catch (Exception e) {\n                throw new TDPException(CommonErrorCodes.UNEXPECTED_EXCEPTION, e);\n            }\n        }\n        return preparation;\n    }", "signature": "PersistentPreparation injectDatasetNameBasedOnId(PersistentPreparation preparation)", "full_signature": "public PersistentPreparation injectDatasetNameBasedOnId(PersistentPreparation preparation)", "class_method_signature": "DataSetNameInjection.injectDatasetNameBasedOnId(PersistentPreparation preparation)", "testcase": false, "constructor": false, "invocations": ["getDataSetName", "getTenantId", "get", "getDataSetId", "get", "setDataSetName", "add"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}