{"test_class": {"identifier": "FormBaseCellTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "FormBaseCell cell;", "modifier": "", "type": "FormBaseCell", "declarator": "cell", "var_name": "cell"}], "file": "lib/QMBForm/src/test/java/com/quemb/qmbform/view/FormBaseCellTest.java"}, "test_case": {"identifier": "testShouldCreateMultiValueWrapper", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testShouldCreateMultiValueWrapper() {\n\n\n        assertNotNull(cell.createMultiValueWrapper());\n\n\n    }", "signature": "void testShouldCreateMultiValueWrapper()", "full_signature": "@Test public void testShouldCreateMultiValueWrapper()", "class_method_signature": "FormBaseCellTest.testShouldCreateMultiValueWrapper()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "createMultiValueWrapper"]}, "focal_class": {"identifier": "FormBaseCell", "superclass": "extends Cell", "interfaces": "", "fields": [{"original_string": "private static final int REMOVE_BUTTON_ID = R.id.end;", "modifier": "private static final", "type": "int", "declarator": "REMOVE_BUTTON_ID = R.id.end", "var_name": "REMOVE_BUTTON_ID"}, {"original_string": "private static final int ADD_BUTTON_ID = R.id.beginning;", "modifier": "private static final", "type": "int", "declarator": "ADD_BUTTON_ID = R.id.beginning", "var_name": "ADD_BUTTON_ID"}, {"original_string": "private LinearLayout mMultiValueWrapper;", "modifier": "private", "type": "LinearLayout", "declarator": "mMultiValueWrapper", "var_name": "mMultiValueWrapper"}], "methods": [{"identifier": "FormBaseCell", "parameters": "(Context context, RowDescriptor rowDescriptor)", "modifiers": "public", "return": "", "signature": " FormBaseCell(Context context, RowDescriptor rowDescriptor)", "full_signature": "public  FormBaseCell(Context context, RowDescriptor rowDescriptor)", "class_method_signature": "FormBaseCell.FormBaseCell(Context context, RowDescriptor rowDescriptor)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void init()", "full_signature": "@Override protected void init()", "class_method_signature": "FormBaseCell.init()", "testcase": false, "constructor": false}, {"identifier": "getSuperViewForLayoutInflation", "parameters": "()", "modifiers": "protected", "return": "ViewGroup", "signature": "ViewGroup getSuperViewForLayoutInflation()", "full_signature": "protected ViewGroup getSuperViewForLayoutInflation()", "class_method_signature": "FormBaseCell.getSuperViewForLayoutInflation()", "testcase": false, "constructor": false}, {"identifier": "createMultiValueWrapper", "parameters": "()", "modifiers": "protected", "return": "LinearLayout", "signature": "LinearLayout createMultiValueWrapper()", "full_signature": "protected LinearLayout createMultiValueWrapper()", "class_method_signature": "FormBaseCell.createMultiValueWrapper()", "testcase": false, "constructor": false}, {"identifier": "shouldAddDivider", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean shouldAddDivider()", "full_signature": "@Override public boolean shouldAddDivider()", "class_method_signature": "FormBaseCell.shouldAddDivider()", "testcase": false, "constructor": false}, {"identifier": "lastInSection", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void lastInSection()", "full_signature": "@Override public void lastInSection()", "class_method_signature": "FormBaseCell.lastInSection()", "testcase": false, "constructor": false}, {"identifier": "getRowDescriptor", "parameters": "()", "modifiers": "public", "return": "RowDescriptor", "signature": "RowDescriptor getRowDescriptor()", "full_signature": "public RowDescriptor getRowDescriptor()", "class_method_signature": "FormBaseCell.getRowDescriptor()", "testcase": false, "constructor": false}, {"identifier": "onValueChanged", "parameters": "(Value<?> newValue)", "modifiers": "public", "return": "void", "signature": "void onValueChanged(Value<?> newValue)", "full_signature": "public void onValueChanged(Value<?> newValue)", "class_method_signature": "FormBaseCell.onValueChanged(Value<?> newValue)", "testcase": false, "constructor": false}], "file": "lib/QMBForm/src/main/java/com/quemb/qmbform/view/FormBaseCell.java"}, "focal_method": {"identifier": "createMultiValueWrapper", "parameters": "()", "modifiers": "protected", "return": "LinearLayout", "body": "protected LinearLayout createMultiValueWrapper() {\n\n        LinearLayout linearLayout = new LinearLayout(getContext());\n        linearLayout.setOrientation(LinearLayout.HORIZONTAL);\n        linearLayout.setId(R.id.wrap_content);\n        linearLayout.setFocusable(false);\n        linearLayout.setFocusableInTouchMode(false);\n\n        ImageButton deleteButton = new ImageButton(getContext());\n        deleteButton.setId(REMOVE_BUTTON_ID);\n        deleteButton.setFocusableInTouchMode(false);\n        deleteButton.setFocusable(false);\n\n        Drawable removeIcon = AppCompatDrawableManager.get().getDrawable(getContext(), R.drawable.ic_action_remove);\n        removeIcon.setColorFilter(0xffff0000, PorterDuff.Mode.MULTIPLY);\n\n        deleteButton.setImageDrawable(removeIcon);\n        deleteButton.setBackgroundColor(Color.TRANSPARENT);\n        deleteButton.setVisibility(VISIBLE);\n        deleteButton.setOnClickListener(new OnClickListener() {\n            @Override\n            public void onClick(View v) {\n\n                RowDescriptor rowDescriptor = getRowDescriptor();\n\n                SectionDescriptor sectionDescriptor = rowDescriptor.getSectionDescriptor();\n                sectionDescriptor.removeRow(rowDescriptor);\n                sectionDescriptor.getFormDescriptor().getOnFormRowValueChangedListener().onValueChanged(rowDescriptor, rowDescriptor.getValue(), null);\n\n            }\n        });\n        linearLayout.addView(deleteButton);\n\n        ImageButton addButton = new ImageButton(getContext());\n        addButton.setId(ADD_BUTTON_ID);\n        addButton.setFocusableInTouchMode(false);\n        addButton.setFocusable(false);\n\n        Drawable addIcon = AppCompatDrawableManager.get().getDrawable(getContext(), R.drawable.ic_action_new);\n        addIcon.setColorFilter(0xff00ff00, PorterDuff.Mode.MULTIPLY);\n\n\n        addButton.setImageDrawable(addIcon);\n        addButton.setBackgroundColor(Color.TRANSPARENT);\n        addButton.setVisibility(GONE);\n        addButton.setOnClickListener(new OnClickListener() {\n            @Override\n            public void onClick(View v) {\n\n                SectionDescriptor sectionDescriptor = getRowDescriptor().getSectionDescriptor();\n                sectionDescriptor.addRow(RowDescriptor.newInstance(getRowDescriptor()));\n\n            }\n        });\n        linearLayout.addView(addButton);\n\n        SectionDescriptor sectionDescriptor = getRowDescriptor().getSectionDescriptor();\n        int index = sectionDescriptor.getIndexOfRowDescriptor(getRowDescriptor());\n        if (index == sectionDescriptor.getRowCount() - 1) {\n            addButton.setVisibility(VISIBLE);\n            deleteButton.setVisibility(GONE);\n        } else {\n            addButton.setVisibility(GONE);\n            deleteButton.setVisibility(VISIBLE);\n        }\n\n        mMultiValueWrapper = linearLayout;\n\n        return mMultiValueWrapper;\n    }", "signature": "LinearLayout createMultiValueWrapper()", "full_signature": "protected LinearLayout createMultiValueWrapper()", "class_method_signature": "FormBaseCell.createMultiValueWrapper()", "testcase": false, "constructor": false, "invocations": ["getContext", "setOrientation", "setId", "setFocusable", "setFocusableInTouchMode", "getContext", "setId", "setFocusableInTouchMode", "setFocusable", "getDrawable", "get", "getContext", "setColorFilter", "setImageDrawable", "setBackgroundColor", "setVisibility", "setOnClickListener", "getRowDescriptor", "getSectionDescriptor", "removeRow", "onValueChanged", "getOnFormRowValueChangedListener", "getFormDescriptor", "getValue", "addView", "getContext", "setId", "setFocusableInTouchMode", "setFocusable", "getDrawable", "get", "getContext", "setColorFilter", "setImageDrawable", "setBackgroundColor", "setVisibility", "setOnClickListener", "getSectionDescriptor", "getRowDescriptor", "addRow", "newInstance", "getRowDescriptor", "addView", "getSectionDescriptor", "getRowDescriptor", "getIndexOfRowDescriptor", "getRowDescriptor", "getRowCount", "setVisibility", "setVisibility", "setVisibility", "setVisibility"]}, "repository": {"repo_id": 21867111, "url": "https://github.com/quemb/QMBForm", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 184, "size": 1592, "license": "licensed"}}