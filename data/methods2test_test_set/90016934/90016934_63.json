{"test_class": {"identifier": "TestSourceService", "superclass": "extends AbstractTestNGSpringContextTests", "interfaces": "", "fields": [{"original_string": "@Autowired\n   private SourceService service;", "modifier": "@Autowired\n   private", "type": "SourceService", "declarator": "service", "var_name": "service"}], "file": "core/src/test/java/fr/gael/dhus/service/TestSourceService.java"}, "test_case": {"identifier": "updateSource", "parameters": "()", "modifiers": "@Test(dependsOnMethods = {\"createSource\"}) public", "return": "void", "body": "@Test(dependsOnMethods = {\"createSource\"})\n   public void updateSource()\n   {\n      int sourceId = 1;\n      String expectedUrl = \"https://foo-bar.net\";\n\n      Source source = service.getSource(sourceId);\n      source.setUrl(\"https://foo-bar.net\");\n      Assert.assertTrue(service.updateSource(source));\n\n      source = service.getSource(sourceId);\n      Assert.assertEquals(source.getUrl(), expectedUrl);\n   }", "signature": "void updateSource()", "full_signature": "@Test(dependsOnMethods = {\"createSource\"}) public void updateSource()", "class_method_signature": "TestSourceService.updateSource()", "testcase": true, "constructor": false, "invocations": ["getSource", "setUrl", "assertTrue", "updateSource", "getSource", "assertEquals", "getUrl"]}, "focal_class": {"identifier": "SourceService", "superclass": "", "interfaces": "implements ISourceService", "fields": [{"original_string": "private static final int LIMIT_MAX_DOWNLOADS = 30;", "modifier": "private static final", "type": "int", "declarator": "LIMIT_MAX_DOWNLOADS = 30", "var_name": "LIMIT_MAX_DOWNLOADS"}, {"original_string": "private Comparator<Source> sourceComparator;", "modifier": "private", "type": "Comparator<Source>", "declarator": "sourceComparator", "var_name": "sourceComparator"}, {"original_string": "@Autowired\n   private ConfigurationManager configurationManager;", "modifier": "@Autowired\n   private", "type": "ConfigurationManager", "declarator": "configurationManager", "var_name": "configurationManager"}], "methods": [{"identifier": "getSourceManager", "parameters": "()", "modifiers": "private", "return": "SourceManager", "signature": "SourceManager getSourceManager()", "full_signature": "private SourceManager getSourceManager()", "class_method_signature": "SourceService.getSourceManager()", "testcase": false, "constructor": false}, {"identifier": "exits", "parameters": "(int sourceId)", "modifiers": "private", "return": "boolean", "signature": "boolean exits(int sourceId)", "full_signature": "private boolean exits(int sourceId)", "class_method_signature": "SourceService.exits(int sourceId)", "testcase": false, "constructor": false}, {"identifier": "getSourceComparator", "parameters": "()", "modifiers": "private synchronized", "return": "Comparator<Source>", "signature": "Comparator<Source> getSourceComparator()", "full_signature": "private synchronized Comparator<Source> getSourceComparator()", "class_method_signature": "SourceService.getSourceComparator()", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int count()", "full_signature": "@Override public int count()", "class_method_signature": "SourceService.count()", "testcase": false, "constructor": false}, {"identifier": "createSource", "parameters": "(String url, String username, String password, Integer maxDownloads)", "modifiers": "@Override public", "return": "Source", "signature": "Source createSource(String url, String username, String password, Integer maxDownloads)", "full_signature": "@Override public Source createSource(String url, String username, String password, Integer maxDownloads)", "class_method_signature": "SourceService.createSource(String url, String username, String password, Integer maxDownloads)", "testcase": false, "constructor": false}, {"identifier": "getSource", "parameters": "(int sourceId)", "modifiers": "@Override public", "return": "Source", "signature": "Source getSource(int sourceId)", "full_signature": "@Override public Source getSource(int sourceId)", "class_method_signature": "SourceService.getSource(int sourceId)", "testcase": false, "constructor": false}, {"identifier": "getSource", "parameters": "(SynchronizerSource synchronizerSource)", "modifiers": "@Override public", "return": "Source", "signature": "Source getSource(SynchronizerSource synchronizerSource)", "full_signature": "@Override public Source getSource(SynchronizerSource synchronizerSource)", "class_method_signature": "SourceService.getSource(SynchronizerSource synchronizerSource)", "testcase": false, "constructor": false}, {"identifier": "getSource", "parameters": "(List<SynchronizerSource> synchronizerSources)", "modifiers": "@Override public", "return": "List<Source>", "signature": "List<Source> getSource(List<SynchronizerSource> synchronizerSources)", "full_signature": "@Override public List<Source> getSource(List<SynchronizerSource> synchronizerSources)", "class_method_signature": "SourceService.getSource(List<SynchronizerSource> synchronizerSources)", "testcase": false, "constructor": false}, {"identifier": "updateSource", "parameters": "(Source source)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateSource(Source source)", "full_signature": "@Override public boolean updateSource(Source source)", "class_method_signature": "SourceService.updateSource(Source source)", "testcase": false, "constructor": false}, {"identifier": "deleteSource", "parameters": "(Source source)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deleteSource(Source source)", "full_signature": "@Override public boolean deleteSource(Source source)", "class_method_signature": "SourceService.deleteSource(Source source)", "testcase": false, "constructor": false}, {"identifier": "list", "parameters": "()", "modifiers": "@Override public", "return": "List<Source>", "signature": "List<Source> list()", "full_signature": "@Override public List<Source> list()", "class_method_signature": "SourceService.list()", "testcase": false, "constructor": false}, {"identifier": "sortSources", "parameters": "(List<Source> sources)", "modifiers": "@Override public", "return": "List<Source>", "signature": "List<Source> sortSources(List<Source> sources)", "full_signature": "@Override public List<Source> sortSources(List<Source> sources)", "class_method_signature": "SourceService.sortSources(List<Source> sources)", "testcase": false, "constructor": false}, {"identifier": "getBestSource", "parameters": "(List<Source> sources)", "modifiers": "@Override public", "return": "Source", "signature": "Source getBestSource(List<Source> sources)", "full_signature": "@Override public Source getBestSource(List<Source> sources)", "class_method_signature": "SourceService.getBestSource(List<Source> sources)", "testcase": false, "constructor": false}], "file": "core/src/main/java/fr/gael/dhus/service/SourceService.java"}, "focal_method": {"identifier": "updateSource", "parameters": "(Source source)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n   public boolean updateSource(Source source)\n   {\n      if (source.getId() < 0)\n      {\n         throw new IllegalArgumentException(\"Invalid source id\");\n      }\n      if (source.getUrl() == null || source.getUrl().isEmpty())\n      {\n         throw new IllegalArgumentException(\"url must not be null or empty\");\n      }\n      if (source.getMaxDownload() > LIMIT_MAX_DOWNLOADS)\n      {\n         throw new IllegalArgumentException(\n               \"max concurrent download must be less or equals than \" + LIMIT_MAX_DOWNLOADS);\n      }\n      return configurationManager.getSourceManager().updateSource(source);\n   }", "signature": "boolean updateSource(Source source)", "full_signature": "@Override public boolean updateSource(Source source)", "class_method_signature": "SourceService.updateSource(Source source)", "testcase": false, "constructor": false, "invocations": ["getId", "getUrl", "isEmpty", "getUrl", "getMaxDownload", "updateSource", "getSourceManager"]}, "repository": {"repo_id": 90016934, "url": "https://github.com/SentinelDataHub/dhus-core", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 5, "size": 2371, "license": "licensed"}}