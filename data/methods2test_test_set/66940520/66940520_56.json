{"test_class": {"identifier": "JobConfigurationObjectBundleHookTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CRON_HOURLY = \"0 0 * ? * *\";", "modifier": "private static final", "type": "String", "declarator": "CRON_HOURLY = \"0 0 * ? * *\"", "var_name": "CRON_HOURLY"}, {"original_string": "@Mock\n    private JobConfigurationService jobConfigurationService;", "modifier": "@Mock\n    private", "type": "JobConfigurationService", "declarator": "jobConfigurationService", "var_name": "jobConfigurationService"}, {"original_string": "@Mock\n    private SchedulingManager schedulingManager;", "modifier": "@Mock\n    private", "type": "SchedulingManager", "declarator": "schedulingManager", "var_name": "schedulingManager"}, {"original_string": "@Mock\n    private Job job;", "modifier": "@Mock\n    private", "type": "Job", "declarator": "job", "var_name": "job"}, {"original_string": "@InjectMocks\n    private JobConfigurationObjectBundleHook hook;", "modifier": "@InjectMocks\n    private", "type": "JobConfigurationObjectBundleHook", "declarator": "hook", "var_name": "hook"}, {"original_string": "private JobConfiguration analyticsTableJobConfig;", "modifier": "private", "type": "JobConfiguration", "declarator": "analyticsTableJobConfig", "var_name": "analyticsTableJobConfig"}, {"original_string": "@Rule\n    public MockitoRule rule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "rule = MockitoJUnit.rule()", "var_name": "rule"}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/metadata/objectbundle/hooks/JobConfigurationObjectBundleHookTest.java"}, "test_case": {"identifier": "validateCronExpressionForCronTypeJobs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void validateCronExpressionForCronTypeJobs()\n    {\n        String jobConfigUid = \"jsdhJSJHD\";\n        Mockito.when( jobConfigurationService.getJobConfigurationByUid( Mockito.eq( jobConfigUid ) ) )\n            .thenReturn( analyticsTableJobConfig );\n        Mockito.when( schedulingManager.getJob( Mockito.eq( JobType.ANALYTICSTABLE_UPDATE ) ) )\n            .thenReturn( job );\n\n        JobConfiguration jobConfiguration = new JobConfiguration();\n        jobConfiguration.setUid( jobConfigUid );\n        jobConfiguration.setJobType( JobType.ANALYTICSTABLE_UPDATE );\n        jobConfiguration.setEnabled( true );\n\n        List<ErrorReport> errorReports = hook.validateInternal( jobConfiguration );\n        Assert.assertEquals( 1, errorReports.size() );\n        Assert.assertEquals( ErrorCode.E7004, errorReports.get( 0 ).getErrorCode() );\n    }", "signature": "void validateCronExpressionForCronTypeJobs()", "full_signature": "@Test public void validateCronExpressionForCronTypeJobs()", "class_method_signature": "JobConfigurationObjectBundleHookTest.validateCronExpressionForCronTypeJobs()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getJobConfigurationByUid", "eq", "thenReturn", "when", "getJob", "eq", "setUid", "setJobType", "setEnabled", "validateInternal", "assertEquals", "size", "assertEquals", "getErrorCode", "get"]}, "focal_class": {"identifier": "JobConfigurationObjectBundleHook", "superclass": "extends AbstractObjectBundleHook", "interfaces": "", "fields": [{"original_string": "private final JobConfigurationService jobConfigurationService;", "modifier": "private final", "type": "JobConfigurationService", "declarator": "jobConfigurationService", "var_name": "jobConfigurationService"}, {"original_string": "private final SchedulingManager schedulingManager;", "modifier": "private final", "type": "SchedulingManager", "declarator": "schedulingManager", "var_name": "schedulingManager"}], "methods": [{"identifier": "JobConfigurationObjectBundleHook", "parameters": "( JobConfigurationService jobConfigurationService,\n        SchedulingManager schedulingManager )", "modifiers": "public", "return": "", "signature": " JobConfigurationObjectBundleHook( JobConfigurationService jobConfigurationService,\n        SchedulingManager schedulingManager )", "full_signature": "public  JobConfigurationObjectBundleHook( JobConfigurationService jobConfigurationService,\n        SchedulingManager schedulingManager )", "class_method_signature": "JobConfigurationObjectBundleHook.JobConfigurationObjectBundleHook( JobConfigurationService jobConfigurationService,\n        SchedulingManager schedulingManager )", "testcase": false, "constructor": true}, {"identifier": "validate", "parameters": "( T object, ObjectBundle bundle )", "modifiers": "@Override public", "return": "List<ErrorReport>", "signature": "List<ErrorReport> validate( T object, ObjectBundle bundle )", "full_signature": "@Override public List<ErrorReport> validate( T object, ObjectBundle bundle )", "class_method_signature": "JobConfigurationObjectBundleHook.validate( T object, ObjectBundle bundle )", "testcase": false, "constructor": false}, {"identifier": "preCreate", "parameters": "( T object, ObjectBundle bundle )", "modifiers": "@Override public", "return": "void", "signature": "void preCreate( T object, ObjectBundle bundle )", "full_signature": "@Override public void preCreate( T object, ObjectBundle bundle )", "class_method_signature": "JobConfigurationObjectBundleHook.preCreate( T object, ObjectBundle bundle )", "testcase": false, "constructor": false}, {"identifier": "preUpdate", "parameters": "( IdentifiableObject object, IdentifiableObject persistedObject, ObjectBundle bundle )", "modifiers": "@Override public", "return": "void", "signature": "void preUpdate( IdentifiableObject object, IdentifiableObject persistedObject, ObjectBundle bundle )", "full_signature": "@Override public void preUpdate( IdentifiableObject object, IdentifiableObject persistedObject, ObjectBundle bundle )", "class_method_signature": "JobConfigurationObjectBundleHook.preUpdate( IdentifiableObject object, IdentifiableObject persistedObject, ObjectBundle bundle )", "testcase": false, "constructor": false}, {"identifier": "preDelete", "parameters": "( T persistedObject, ObjectBundle bundle )", "modifiers": "@Override public", "return": "void", "signature": "void preDelete( T persistedObject, ObjectBundle bundle )", "full_signature": "@Override public void preDelete( T persistedObject, ObjectBundle bundle )", "class_method_signature": "JobConfigurationObjectBundleHook.preDelete( T persistedObject, ObjectBundle bundle )", "testcase": false, "constructor": false}, {"identifier": "postCreate", "parameters": "( T persistedObject, ObjectBundle bundle )", "modifiers": "@Override public", "return": "void", "signature": "void postCreate( T persistedObject, ObjectBundle bundle )", "full_signature": "@Override public void postCreate( T persistedObject, ObjectBundle bundle )", "class_method_signature": "JobConfigurationObjectBundleHook.postCreate( T persistedObject, ObjectBundle bundle )", "testcase": false, "constructor": false}, {"identifier": "postUpdate", "parameters": "( T persistedObject, ObjectBundle bundle )", "modifiers": "@Override public", "return": "void", "signature": "void postUpdate( T persistedObject, ObjectBundle bundle )", "full_signature": "@Override public void postUpdate( T persistedObject, ObjectBundle bundle )", "class_method_signature": "JobConfigurationObjectBundleHook.postUpdate( T persistedObject, ObjectBundle bundle )", "testcase": false, "constructor": false}, {"identifier": "validateCronExpressionWithinJobType", "parameters": "( List<ErrorReport> errorReports, JobConfiguration jobConfiguration )", "modifiers": "private", "return": "void", "signature": "void validateCronExpressionWithinJobType( List<ErrorReport> errorReports, JobConfiguration jobConfiguration )", "full_signature": "private void validateCronExpressionWithinJobType( List<ErrorReport> errorReports, JobConfiguration jobConfiguration )", "class_method_signature": "JobConfigurationObjectBundleHook.validateCronExpressionWithinJobType( List<ErrorReport> errorReports, JobConfiguration jobConfiguration )", "testcase": false, "constructor": false}, {"identifier": "validateInternal", "parameters": "( final JobConfiguration jobConfiguration )", "modifiers": "", "return": "List<ErrorReport>", "signature": "List<ErrorReport> validateInternal( final JobConfiguration jobConfiguration )", "full_signature": " List<ErrorReport> validateInternal( final JobConfiguration jobConfiguration )", "class_method_signature": "JobConfigurationObjectBundleHook.validateInternal( final JobConfiguration jobConfiguration )", "testcase": false, "constructor": false}, {"identifier": "validatePersistedAndPrepareTempJobConfiguration", "parameters": "( List<ErrorReport> errorReports,\n        JobConfiguration jobConfiguration, JobConfiguration persistedJobConfiguration )", "modifiers": "private", "return": "JobConfiguration", "signature": "JobConfiguration validatePersistedAndPrepareTempJobConfiguration( List<ErrorReport> errorReports,\n        JobConfiguration jobConfiguration, JobConfiguration persistedJobConfiguration )", "full_signature": "private JobConfiguration validatePersistedAndPrepareTempJobConfiguration( List<ErrorReport> errorReports,\n        JobConfiguration jobConfiguration, JobConfiguration persistedJobConfiguration )", "class_method_signature": "JobConfigurationObjectBundleHook.validatePersistedAndPrepareTempJobConfiguration( List<ErrorReport> errorReports,\n        JobConfiguration jobConfiguration, JobConfiguration persistedJobConfiguration )", "testcase": false, "constructor": false}, {"identifier": "validateJobConfigurationCronOrFixedDelay", "parameters": "( List<ErrorReport> errorReports,\n        JobConfiguration jobConfiguration )", "modifiers": "private", "return": "void", "signature": "void validateJobConfigurationCronOrFixedDelay( List<ErrorReport> errorReports,\n        JobConfiguration jobConfiguration )", "full_signature": "private void validateJobConfigurationCronOrFixedDelay( List<ErrorReport> errorReports,\n        JobConfiguration jobConfiguration )", "class_method_signature": "JobConfigurationObjectBundleHook.validateJobConfigurationCronOrFixedDelay( List<ErrorReport> errorReports,\n        JobConfiguration jobConfiguration )", "testcase": false, "constructor": false}, {"identifier": "validateJob", "parameters": "( List<ErrorReport> errorReports, JobConfiguration jobConfiguration,\n        JobConfiguration persistedJobConfiguration )", "modifiers": "private", "return": "void", "signature": "void validateJob( List<ErrorReport> errorReports, JobConfiguration jobConfiguration,\n        JobConfiguration persistedJobConfiguration )", "full_signature": "private void validateJob( List<ErrorReport> errorReports, JobConfiguration jobConfiguration,\n        JobConfiguration persistedJobConfiguration )", "class_method_signature": "JobConfigurationObjectBundleHook.validateJob( List<ErrorReport> errorReports, JobConfiguration jobConfiguration,\n        JobConfiguration persistedJobConfiguration )", "testcase": false, "constructor": false}, {"identifier": "ensureDefaultJobParametersAreUsedIfNoOtherArePresent", "parameters": "( JobConfiguration jobConfiguration )", "modifiers": "private", "return": "void", "signature": "void ensureDefaultJobParametersAreUsedIfNoOtherArePresent( JobConfiguration jobConfiguration )", "full_signature": "private void ensureDefaultJobParametersAreUsedIfNoOtherArePresent( JobConfiguration jobConfiguration )", "class_method_signature": "JobConfigurationObjectBundleHook.ensureDefaultJobParametersAreUsedIfNoOtherArePresent( JobConfiguration jobConfiguration )", "testcase": false, "constructor": false}, {"identifier": "getDefaultJobParameters", "parameters": "( JobConfiguration jobConfiguration )", "modifiers": "private", "return": "JobParameters", "signature": "JobParameters getDefaultJobParameters( JobConfiguration jobConfiguration )", "full_signature": "private JobParameters getDefaultJobParameters( JobConfiguration jobConfiguration )", "class_method_signature": "JobConfigurationObjectBundleHook.getDefaultJobParameters( JobConfiguration jobConfiguration )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/metadata/objectbundle/hooks/JobConfigurationObjectBundleHook.java"}, "focal_method": {"identifier": "validateInternal", "parameters": "( final JobConfiguration jobConfiguration )", "modifiers": "", "return": "List<ErrorReport>", "body": "List<ErrorReport> validateInternal( final JobConfiguration jobConfiguration )\n    {\n        List<ErrorReport> errorReports = new ArrayList<>();\n\n        // Check whether jobConfiguration already exists in the system and if so validate it\n\n        JobConfiguration persistedJobConfiguration = jobConfigurationService.getJobConfigurationByUid( jobConfiguration.getUid() );\n\n        final JobConfiguration tempJobConfiguration = validatePersistedAndPrepareTempJobConfiguration( errorReports,\n            jobConfiguration, persistedJobConfiguration );\n\n        validateJobConfigurationCronOrFixedDelay( errorReports, tempJobConfiguration );\n        validateCronExpressionWithinJobType( errorReports, tempJobConfiguration );\n\n        // Validate parameters\n\n        if ( tempJobConfiguration.getJobParameters() != null )\n        {\n            tempJobConfiguration.getJobParameters().validate().ifPresent( errorReports::add );\n        }\n        else\n        {\n            // Report error if JobType requires JobParameters, but it does not exist in JobConfiguration\n\n            if ( tempJobConfiguration.getJobType().hasJobParameters() )\n            {\n                errorReports.add( new ErrorReport( this.getClass(), ErrorCode.E4029, tempJobConfiguration.getJobType() ) );\n            }\n        }\n\n        validateJob( errorReports, tempJobConfiguration, persistedJobConfiguration );\n\n        return errorReports;\n    }", "signature": "List<ErrorReport> validateInternal( final JobConfiguration jobConfiguration )", "full_signature": " List<ErrorReport> validateInternal( final JobConfiguration jobConfiguration )", "class_method_signature": "JobConfigurationObjectBundleHook.validateInternal( final JobConfiguration jobConfiguration )", "testcase": false, "constructor": false, "invocations": ["getJobConfigurationByUid", "getUid", "validatePersistedAndPrepareTempJobConfiguration", "validateJobConfigurationCronOrFixedDelay", "validateCronExpressionWithinJobType", "getJobParameters", "ifPresent", "validate", "getJobParameters", "hasJobParameters", "getJobType", "add", "getClass", "getJobType", "validateJob"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}