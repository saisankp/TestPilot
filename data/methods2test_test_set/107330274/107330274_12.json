{"test_class": {"identifier": "UnionDataGeneratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "titus-common/src/test/java/com/netflix/titus/common/data/generator/internal/UnionDataGeneratorTest.java"}, "test_case": {"identifier": "testUnion", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUnion() throws Exception {\n        List<String> words = asList(\"a\", \"b\", \"c\", \"d\", \"e\");\n\n        DataGenerator<List<String>> batchGen = DataGenerator.union(\n                DataGenerator.items(words),\n                DataGenerator.range(0, 5),\n                (t, n) -> t + '-' + n\n        ).batch(25);\n\n        List<String> data = batchGen.getValue();\n        data.sort(Comparator.naturalOrder());\n\n        List<String> expected = words.stream().flatMap(w -> {\n            List<String> items = new ArrayList<>();\n            for (int i = 0; i < 5; i++) {\n                items.add(w + '-' + i);\n            }\n            return items.stream();\n        }).collect(Collectors.toList());\n\n        assertThat(data).containsAll(expected);\n        assertThat(batchGen.apply().isClosed()).isTrue();\n    }", "signature": "void testUnion()", "full_signature": "@Test public void testUnion()", "class_method_signature": "UnionDataGeneratorTest.testUnion()", "testcase": true, "constructor": false, "invocations": ["asList", "batch", "union", "items", "range", "getValue", "sort", "naturalOrder", "collect", "flatMap", "stream", "add", "stream", "toList", "containsAll", "assertThat", "isTrue", "assertThat", "isClosed", "apply"]}, "focal_class": {"identifier": "UnionDataGenerator", "superclass": "extends DataGenerator<List<A>>", "interfaces": "", "fields": [{"original_string": "private static final double DEFAULT_DENSITY = 0.3;", "modifier": "private static final", "type": "double", "declarator": "DEFAULT_DENSITY = 0.3", "var_name": "DEFAULT_DENSITY"}, {"original_string": "private static final int DEFAULT_INITIAL_CHUNK_SIZE = 3;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_INITIAL_CHUNK_SIZE = 3", "var_name": "DEFAULT_INITIAL_CHUNK_SIZE"}, {"original_string": "private final double density;", "modifier": "private final", "type": "double", "declarator": "density", "var_name": "density"}, {"original_string": "private final int slice;", "modifier": "private final", "type": "int", "declarator": "slice", "var_name": "slice"}, {"original_string": "private final boolean extendable;", "modifier": "private final", "type": "boolean", "declarator": "extendable", "var_name": "extendable"}, {"original_string": "private final List<DataGenerator<A>> sources;", "modifier": "private final", "type": "List<DataGenerator<A>>", "declarator": "sources", "var_name": "sources"}, {"original_string": "private final List<List<A>> items;", "modifier": "private final", "type": "List<List<A>>", "declarator": "items", "var_name": "items"}, {"original_string": "private final Combinations combinations;", "modifier": "private final", "type": "Combinations", "declarator": "combinations", "var_name": "combinations"}, {"original_string": "private final int position;", "modifier": "private final", "type": "int", "declarator": "position", "var_name": "position"}, {"original_string": "private final int scaleUpLevel;", "modifier": "private final", "type": "int", "declarator": "scaleUpLevel", "var_name": "scaleUpLevel"}, {"original_string": "private final Optional<List<A>> currentValue;", "modifier": "private final", "type": "Optional<List<A>>", "declarator": "currentValue", "var_name": "currentValue"}], "methods": [{"identifier": "UnionDataGenerator", "parameters": "(List<DataGenerator<A>> sources, double density, int initialSlice)", "modifiers": "private", "return": "", "signature": " UnionDataGenerator(List<DataGenerator<A>> sources, double density, int initialSlice)", "full_signature": "private  UnionDataGenerator(List<DataGenerator<A>> sources, double density, int initialSlice)", "class_method_signature": "UnionDataGenerator.UnionDataGenerator(List<DataGenerator<A>> sources, double density, int initialSlice)", "testcase": false, "constructor": true}, {"identifier": "UnionDataGenerator", "parameters": "(UnionDataGenerator<A> generator, int position)", "modifiers": "private", "return": "", "signature": " UnionDataGenerator(UnionDataGenerator<A> generator, int position)", "full_signature": "private  UnionDataGenerator(UnionDataGenerator<A> generator, int position)", "class_method_signature": "UnionDataGenerator.UnionDataGenerator(UnionDataGenerator<A> generator, int position)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "()", "modifiers": "@Override public", "return": "DataGenerator<List<A>>", "signature": "DataGenerator<List<A>> apply()", "full_signature": "@Override public DataGenerator<List<A>> apply()", "class_method_signature": "UnionDataGenerator.apply()", "testcase": false, "constructor": false}, {"identifier": "getOptionalValue", "parameters": "()", "modifiers": "@Override public", "return": "Optional<List<A>>", "signature": "Optional<List<A>> getOptionalValue()", "full_signature": "@Override public Optional<List<A>> getOptionalValue()", "class_method_signature": "UnionDataGenerator.getOptionalValue()", "testcase": false, "constructor": false}, {"identifier": "fill", "parameters": "(List<DataGenerator<A>> sources, int sliceSize)", "modifiers": "private", "return": "Pair<List<DataGenerator<A>>, List<List<A>>>", "signature": "Pair<List<DataGenerator<A>>, List<List<A>>> fill(List<DataGenerator<A>> sources, int sliceSize)", "full_signature": "private Pair<List<DataGenerator<A>>, List<List<A>>> fill(List<DataGenerator<A>> sources, int sliceSize)", "class_method_signature": "UnionDataGenerator.fill(List<DataGenerator<A>> sources, int sliceSize)", "testcase": false, "constructor": false}, {"identifier": "fill", "parameters": "(DataGenerator<A> source, int sliceSize)", "modifiers": "private", "return": "Pair<DataGenerator<A>, List<A>>", "signature": "Pair<DataGenerator<A>, List<A>> fill(DataGenerator<A> source, int sliceSize)", "full_signature": "private Pair<DataGenerator<A>, List<A>> fill(DataGenerator<A> source, int sliceSize)", "class_method_signature": "UnionDataGenerator.fill(DataGenerator<A> source, int sliceSize)", "testcase": false, "constructor": false}, {"identifier": "resizeSourceData", "parameters": "(UnionDataGenerator<A> previous, int slice)", "modifiers": "private", "return": "Optional<Pair<List<DataGenerator<A>>, List<List<A>>>>", "signature": "Optional<Pair<List<DataGenerator<A>>, List<List<A>>>> resizeSourceData(UnionDataGenerator<A> previous, int slice)", "full_signature": "private Optional<Pair<List<DataGenerator<A>>, List<List<A>>>> resizeSourceData(UnionDataGenerator<A> previous, int slice)", "class_method_signature": "UnionDataGenerator.resizeSourceData(UnionDataGenerator<A> previous, int slice)", "testcase": false, "constructor": false}, {"identifier": "resizeCombinations", "parameters": "(Combinations previousCombinations, List<List<A>> items)", "modifiers": "private", "return": "Combinations", "signature": "Combinations resizeCombinations(Combinations previousCombinations, List<List<A>> items)", "full_signature": "private Combinations resizeCombinations(Combinations previousCombinations, List<List<A>> items)", "class_method_signature": "UnionDataGenerator.resizeCombinations(Combinations previousCombinations, List<List<A>> items)", "testcase": false, "constructor": false}, {"identifier": "valueAt", "parameters": "(int position)", "modifiers": "private", "return": "Optional<List<A>>", "signature": "Optional<List<A>> valueAt(int position)", "full_signature": "private Optional<List<A>> valueAt(int position)", "class_method_signature": "UnionDataGenerator.valueAt(int position)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(List<DataGenerator<A>> sources)", "modifiers": "public static", "return": "DataGenerator<List<A>>", "signature": "DataGenerator<List<A>> newInstance(List<DataGenerator<A>> sources)", "full_signature": "public static DataGenerator<List<A>> newInstance(List<DataGenerator<A>> sources)", "class_method_signature": "UnionDataGenerator.newInstance(List<DataGenerator<A>> sources)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(List<DataGenerator<A>> sources, double density, int initialSlice)", "modifiers": "public static", "return": "DataGenerator<List<A>>", "signature": "DataGenerator<List<A>> newInstance(List<DataGenerator<A>> sources, double density, int initialSlice)", "full_signature": "public static DataGenerator<List<A>> newInstance(List<DataGenerator<A>> sources, double density, int initialSlice)", "class_method_signature": "UnionDataGenerator.newInstance(List<DataGenerator<A>> sources, double density, int initialSlice)", "testcase": false, "constructor": false}], "file": "titus-common/src/main/java/com/netflix/titus/common/data/generator/internal/UnionDataGenerator.java"}, "focal_method": {"identifier": "apply", "parameters": "()", "modifiers": "@Override public", "return": "DataGenerator<List<A>>", "body": "@Override\n    public DataGenerator<List<A>> apply() {\n        UnionDataGenerator nextGen = new UnionDataGenerator(this, position + 1);\n        return nextGen.isClosed() ? (DataGenerator<List<A>>) EOS : nextGen;\n    }", "signature": "DataGenerator<List<A>> apply()", "full_signature": "@Override public DataGenerator<List<A>> apply()", "class_method_signature": "UnionDataGenerator.apply()", "testcase": false, "constructor": false, "invocations": ["isClosed"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}