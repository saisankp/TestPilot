{"test_class": {"identifier": "ParsingUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/util/src/test/java/hera/util/ParsingUtilsTest.java"}, "test_case": {"identifier": "testConvertToDoubleOnDefaultValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testConvertToDoubleOnDefaultValue() {\n    final Object[][] testParameters = new Object[][] {{\"1.1\", 0.0, 1.1}, {\"10.21\", 1.0, 10.21},\n        {\"100.321\", 2.0, 100.321}, {\"Not01\", 0.0, 0.0}, {\"Not02\", 1.0, 1.0}, {\"Not03\", 2.0, 2.0}};\n\n    assertEquals(0.0, ParsingUtils.convertToDouble(null, 0.0), 1e-15);\n    assertEquals(1.0, ParsingUtils.convertToDouble(null, 1.0), 1e-15);\n\n    for (final Object[] testParameter : testParameters) {\n      double expected = (Double) testParameter[2];\n      String val = (String) testParameter[0];\n      double defaultValue = (Double) testParameter[1];\n      assertEquals(expected, ParsingUtils.convertToDouble(val, defaultValue), 1e-15);\n    }\n  }", "signature": "void testConvertToDoubleOnDefaultValue()", "full_signature": "@Test public void testConvertToDoubleOnDefaultValue()", "class_method_signature": "ParsingUtilsTest.testConvertToDoubleOnDefaultValue()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "convertToDouble", "assertEquals", "convertToDouble", "assertEquals", "convertToDouble"]}, "focal_class": {"identifier": "ParsingUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final Collection<String> TRUES =\n      new HashSet<String>(asList(\"yes\", \"y\", \"true\", \"1\"));", "modifier": "protected static final", "type": "Collection<String>", "declarator": "TRUES =\n      new HashSet<String>(asList(\"yes\", \"y\", \"true\", \"1\"))", "var_name": "TRUES"}, {"original_string": "protected static final Collection<String> FALSES =\n      new HashSet<String>(asList(\"no\", \"n\", \"false\", \"0\"));", "modifier": "protected static final", "type": "Collection<String>", "declarator": "FALSES =\n      new HashSet<String>(asList(\"no\", \"n\", \"false\", \"0\"))", "var_name": "FALSES"}, {"original_string": "public static final List<ScaleUnit> INTERVALS =\n      Collections.unmodifiableList(asList(\n          new ScaleUnit(\"microseconds\", 1L),\n          new ScaleUnit(\"\u00b5s\", 1L),\n          new ScaleUnit(\"milliseconds\", 1000L),\n          new ScaleUnit(\"ms\", 1000L),\n          new ScaleUnit(\"seconds\", 1000000L),\n          new ScaleUnit(\"sec\", 1000000L),\n          new ScaleUnit(\"minutes\", 60000000L),\n          new ScaleUnit(\"min\", 60000000L),\n          new ScaleUnit(\"m\", 60000000L),\n          new ScaleUnit(\"hours\", 3600000000L),\n          new ScaleUnit(\"hr\", 3600000000L),\n          new ScaleUnit(\"h\", 3600000000L),\n          new ScaleUnit(\"s\", 1000000L))\n      );", "modifier": "public static final", "type": "List<ScaleUnit>", "declarator": "INTERVALS =\n      Collections.unmodifiableList(asList(\n          new ScaleUnit(\"microseconds\", 1L),\n          new ScaleUnit(\"\u00b5s\", 1L),\n          new ScaleUnit(\"milliseconds\", 1000L),\n          new ScaleUnit(\"ms\", 1000L),\n          new ScaleUnit(\"seconds\", 1000000L),\n          new ScaleUnit(\"sec\", 1000000L),\n          new ScaleUnit(\"minutes\", 60000000L),\n          new ScaleUnit(\"min\", 60000000L),\n          new ScaleUnit(\"m\", 60000000L),\n          new ScaleUnit(\"hours\", 3600000000L),\n          new ScaleUnit(\"hr\", 3600000000L),\n          new ScaleUnit(\"h\", 3600000000L),\n          new ScaleUnit(\"s\", 1000000L))\n      )", "var_name": "INTERVALS"}], "methods": [{"identifier": "convertToBoolean", "parameters": "(final String str, final boolean defaultValueIsTrue)", "modifiers": "public static", "return": "boolean", "signature": "boolean convertToBoolean(final String str, final boolean defaultValueIsTrue)", "full_signature": "public static boolean convertToBoolean(final String str, final boolean defaultValueIsTrue)", "class_method_signature": "ParsingUtils.convertToBoolean(final String str, final boolean defaultValueIsTrue)", "testcase": false, "constructor": false}, {"identifier": "convertToBoolean", "parameters": "(final String val)", "modifiers": "public static", "return": "boolean", "signature": "boolean convertToBoolean(final String val)", "full_signature": "public static boolean convertToBoolean(final String val)", "class_method_signature": "ParsingUtils.convertToBoolean(final String val)", "testcase": false, "constructor": false}, {"identifier": "convertToInt", "parameters": "(final String val)", "modifiers": "public static", "return": "int", "signature": "int convertToInt(final String val)", "full_signature": "public static int convertToInt(final String val)", "class_method_signature": "ParsingUtils.convertToInt(final String val)", "testcase": false, "constructor": false}, {"identifier": "convertToInt", "parameters": "(final String val, final int defaultValue)", "modifiers": "public static", "return": "int", "signature": "int convertToInt(final String val, final int defaultValue)", "full_signature": "public static int convertToInt(final String val, final int defaultValue)", "class_method_signature": "ParsingUtils.convertToInt(final String val, final int defaultValue)", "testcase": false, "constructor": false}, {"identifier": "convertToLong", "parameters": "(final String val)", "modifiers": "public static", "return": "long", "signature": "long convertToLong(final String val)", "full_signature": "public static long convertToLong(final String val)", "class_method_signature": "ParsingUtils.convertToLong(final String val)", "testcase": false, "constructor": false}, {"identifier": "convertToLong", "parameters": "(final String val, final int defaultValue)", "modifiers": "public static", "return": "long", "signature": "long convertToLong(final String val, final int defaultValue)", "full_signature": "public static long convertToLong(final String val, final int defaultValue)", "class_method_signature": "ParsingUtils.convertToLong(final String val, final int defaultValue)", "testcase": false, "constructor": false}, {"identifier": "convertToLong", "parameters": "(final String val, final long defaultValue)", "modifiers": "public static", "return": "long", "signature": "long convertToLong(final String val, final long defaultValue)", "full_signature": "public static long convertToLong(final String val, final long defaultValue)", "class_method_signature": "ParsingUtils.convertToLong(final String val, final long defaultValue)", "testcase": false, "constructor": false}, {"identifier": "convertToDouble", "parameters": "(final String val)", "modifiers": "public static", "return": "double", "signature": "double convertToDouble(final String val)", "full_signature": "public static double convertToDouble(final String val)", "class_method_signature": "ParsingUtils.convertToDouble(final String val)", "testcase": false, "constructor": false}, {"identifier": "convertToDouble", "parameters": "(final String val, final double defaultValue)", "modifiers": "public static", "return": "double", "signature": "double convertToDouble(final String val, final double defaultValue)", "full_signature": "public static double convertToDouble(final String val, final double defaultValue)", "class_method_signature": "ParsingUtils.convertToDouble(final String val, final double defaultValue)", "testcase": false, "constructor": false}, {"identifier": "convertToCapacity", "parameters": "(\n      final String str,\n      final long defaultValue)", "modifiers": "public static", "return": "long", "signature": "long convertToCapacity(\n      final String str,\n      final long defaultValue)", "full_signature": "public static long convertToCapacity(\n      final String str,\n      final long defaultValue)", "class_method_signature": "ParsingUtils.convertToCapacity(\n      final String str,\n      final long defaultValue)", "testcase": false, "constructor": false}, {"identifier": "convertToTime", "parameters": "(final String val)", "modifiers": "public static", "return": "long", "signature": "long convertToTime(final String val)", "full_signature": "public static long convertToTime(final String val)", "class_method_signature": "ParsingUtils.convertToTime(final String val)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(\n      final String val,\n      final TimeUnit unit)", "modifiers": "public static", "return": "long", "signature": "long parse(\n      final String val,\n      final TimeUnit unit)", "full_signature": "public static long parse(\n      final String val,\n      final TimeUnit unit)", "class_method_signature": "ParsingUtils.parse(\n      final String val,\n      final TimeUnit unit)", "testcase": false, "constructor": false}], "file": "core/util/src/main/java/hera/util/ParsingUtils.java"}, "focal_method": {"identifier": "convertToDouble", "parameters": "(final String val)", "modifiers": "public static", "return": "double", "body": "public static double convertToDouble(final String val) {\n    return convertToDouble(val, 0);\n  }", "signature": "double convertToDouble(final String val)", "full_signature": "public static double convertToDouble(final String val)", "class_method_signature": "ParsingUtils.convertToDouble(final String val)", "testcase": false, "constructor": false, "invocations": ["convertToDouble"]}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}