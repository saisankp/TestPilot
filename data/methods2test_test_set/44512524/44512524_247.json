{"test_class": {"identifier": "QueryExecutorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private QueryExecutor queryExecutor;", "modifier": "private", "type": "QueryExecutor", "declarator": "queryExecutor", "var_name": "queryExecutor"}, {"original_string": "private ObjectMapper mapper = new ObjectMapper();", "modifier": "private", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}, {"original_string": "private MockElasticsearchServer elasticsearchServer;", "modifier": "private", "type": "MockElasticsearchServer", "declarator": "elasticsearchServer", "var_name": "elasticsearchServer"}, {"original_string": "private HazelcastInstance hazelcastInstance;", "modifier": "private", "type": "HazelcastInstance", "declarator": "hazelcastInstance", "var_name": "hazelcastInstance"}, {"original_string": "private AnalyticsLoader analyticsLoader;", "modifier": "private", "type": "AnalyticsLoader", "declarator": "analyticsLoader", "var_name": "analyticsLoader"}], "file": "real-time/foxtrot/foxtrot-core/src/test/java/com/flipkart/foxtrot/core/querystore/QueryExecutorTest.java"}, "test_case": {"identifier": "testResolveNonExistentAction", "parameters": "()", "modifiers": "@Test(expected = QueryStoreException.class) public", "return": "void", "body": "@Test(expected = QueryStoreException.class)\n    public void testResolveNonExistentAction() throws Exception {\n        queryExecutor.resolve(new RequestWithNoAction());\n    }", "signature": "void testResolveNonExistentAction()", "full_signature": "@Test(expected = QueryStoreException.class) public void testResolveNonExistentAction()", "class_method_signature": "QueryExecutorTest.testResolveNonExistentAction()", "testcase": true, "constructor": false, "invocations": ["resolve"]}, "focal_class": {"identifier": "QueryExecutor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(QueryExecutor.class.getSimpleName());", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(QueryExecutor.class.getSimpleName())", "var_name": "logger"}, {"original_string": "private final AnalyticsLoader analyticsLoader;", "modifier": "private final", "type": "AnalyticsLoader", "declarator": "analyticsLoader", "var_name": "analyticsLoader"}, {"original_string": "private final ExecutorService executorService;", "modifier": "private final", "type": "ExecutorService", "declarator": "executorService", "var_name": "executorService"}], "methods": [{"identifier": "QueryExecutor", "parameters": "(AnalyticsLoader analyticsLoader, ExecutorService executorService)", "modifiers": "public", "return": "", "signature": " QueryExecutor(AnalyticsLoader analyticsLoader, ExecutorService executorService)", "full_signature": "public  QueryExecutor(AnalyticsLoader analyticsLoader, ExecutorService executorService)", "class_method_signature": "QueryExecutor.QueryExecutor(AnalyticsLoader analyticsLoader, ExecutorService executorService)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(T request)", "modifiers": "public", "return": "ActionResponse", "signature": "ActionResponse execute(T request)", "full_signature": "public ActionResponse execute(T request)", "class_method_signature": "QueryExecutor.execute(T request)", "testcase": false, "constructor": false}, {"identifier": "executeAsync", "parameters": "(T request)", "modifiers": "public", "return": "AsyncDataToken", "signature": "AsyncDataToken executeAsync(T request)", "full_signature": "public AsyncDataToken executeAsync(T request)", "class_method_signature": "QueryExecutor.executeAsync(T request)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(T request)", "modifiers": "public", "return": "Action", "signature": "Action resolve(T request)", "full_signature": "public Action resolve(T request)", "class_method_signature": "QueryExecutor.resolve(T request)", "testcase": false, "constructor": false}], "file": "real-time/foxtrot/foxtrot-core/src/main/java/com/flipkart/foxtrot/core/querystore/QueryExecutor.java"}, "focal_method": {"identifier": "resolve", "parameters": "(T request)", "modifiers": "public", "return": "Action", "body": "public <T extends ActionRequest> Action resolve(T request) throws QueryStoreException {\n        Action action;\n        try {\n            action = analyticsLoader.getAction(request);\n        } catch (Exception e) {\n            logger.error(\"Error resolving action: \", e);\n            throw new QueryStoreException(QueryStoreException.ErrorCode.ACTION_RESOLUTION_ERROR,\n                    \"Error resolving action for: \" + request.getClass().getCanonicalName(), e);\n        }\n        if (null == action) {\n            throw new QueryStoreException(QueryStoreException.ErrorCode.UNRESOLVABLE_OPERATION,\n                    \"No resolvable action could be found for: \" + request.getClass().getCanonicalName());\n        }\n        return action;\n    }", "signature": "Action resolve(T request)", "full_signature": "public Action resolve(T request)", "class_method_signature": "QueryExecutor.resolve(T request)", "testcase": false, "constructor": false, "invocations": ["getAction", "error", "getCanonicalName", "getClass", "getCanonicalName", "getClass"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}