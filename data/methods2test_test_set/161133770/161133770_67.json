{"test_class": {"identifier": "OnlineServingServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock CachedSpecService specService;", "modifier": "@Mock", "type": "CachedSpecService", "declarator": "specService", "var_name": "specService"}, {"original_string": "@Mock Tracer tracer;", "modifier": "@Mock", "type": "Tracer", "declarator": "tracer", "var_name": "tracer"}, {"original_string": "@Mock RedisOnlineRetriever retriever;", "modifier": "@Mock", "type": "RedisOnlineRetriever", "declarator": "retriever", "var_name": "retriever"}, {"original_string": "private OnlineServingService onlineServingService;", "modifier": "private", "type": "OnlineServingService", "declarator": "onlineServingService", "var_name": "onlineServingService"}, {"original_string": "List<FeatureRow> testFeatureRows;", "modifier": "", "type": "List<FeatureRow>", "declarator": "testFeatureRows", "var_name": "testFeatureRows"}], "file": "serving/src/test/java/feast/serving/service/OnlineServingServiceTest.java"}, "test_case": {"identifier": "shouldReturnResponseWithUnsetValuesAndMetadataIfMaxAgeIsExceeded", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldReturnResponseWithUnsetValuesAndMetadataIfMaxAgeIsExceeded() {\n    // keys present, but considered stale when compared to maxAge\n    GetOnlineFeaturesRequest request =\n        getOnlineFeaturesRequest(\n            List.of(\n                FeatureReference.newBuilder().setName(\"feature1\").build(),\n                FeatureReference.newBuilder().setName(\"feature2\").setProject(\"project\").build()));\n\n    List<Optional<FeatureRow>> featureRows =\n        List.of(Optional.of(testFeatureRows.get(0)), Optional.of(testFeatureRows.get(2)));\n\n    FeatureSetSpec spec =\n        getFeatureSetSpec().toBuilder().setMaxAge(Duration.newBuilder().setSeconds(1)).build();\n    FeatureSetRequest featureSetRequest =\n        FeatureSetRequest.newBuilder()\n            .addAllFeatureReferences(request.getFeaturesList())\n            .setSpec(spec)\n            .build();\n\n    when(specService.getFeatureSets(request.getFeaturesList(), \"\"))\n        .thenReturn(Collections.singletonList(featureSetRequest));\n    when(retriever.getOnlineFeatures(request.getEntityRowsList(), featureSetRequest))\n        .thenReturn(featureRows);\n    when(tracer.buildSpan(ArgumentMatchers.any())).thenReturn(Mockito.mock(SpanBuilder.class));\n\n    GetOnlineFeaturesResponse expected =\n        GetOnlineFeaturesResponse.newBuilder()\n            .addFieldValues(\n                FieldValues.newBuilder()\n                    .putFields(\"entity1\", intValue(1))\n                    .putStatuses(\"entity1\", FieldStatus.PRESENT)\n                    .putFields(\"entity2\", strValue(\"a\"))\n                    .putStatuses(\"entity2\", FieldStatus.PRESENT)\n                    .putFields(\"feature1\", intValue(1))\n                    .putStatuses(\"feature1\", FieldStatus.PRESENT)\n                    .putFields(\"project/feature2\", intValue(1))\n                    .putStatuses(\"project/feature2\", FieldStatus.PRESENT)\n                    .build())\n            .addFieldValues(\n                FieldValues.newBuilder()\n                    .putFields(\"entity1\", intValue(2))\n                    .putStatuses(\"entity1\", FieldStatus.PRESENT)\n                    .putFields(\"entity2\", strValue(\"b\"))\n                    .putStatuses(\"entity2\", FieldStatus.PRESENT)\n                    .putFields(\"feature1\", Value.newBuilder().build())\n                    .putStatuses(\"feature1\", FieldStatus.OUTSIDE_MAX_AGE)\n                    .putFields(\"project/feature2\", Value.newBuilder().build())\n                    .putStatuses(\"project/feature2\", FieldStatus.OUTSIDE_MAX_AGE)\n                    .build())\n            .build();\n    GetOnlineFeaturesResponse actual = onlineServingService.getOnlineFeatures(request);\n    assertThat(actual, equalTo(expected));\n  }", "signature": "void shouldReturnResponseWithUnsetValuesAndMetadataIfMaxAgeIsExceeded()", "full_signature": "@Test public void shouldReturnResponseWithUnsetValuesAndMetadataIfMaxAgeIsExceeded()", "class_method_signature": "OnlineServingServiceTest.shouldReturnResponseWithUnsetValuesAndMetadataIfMaxAgeIsExceeded()", "testcase": true, "constructor": false, "invocations": ["getOnlineFeaturesRequest", "of", "build", "setName", "newBuilder", "build", "setProject", "setName", "newBuilder", "of", "of", "get", "of", "get", "build", "setMaxAge", "toBuilder", "getFeatureSetSpec", "setSeconds", "newBuilder", "build", "setSpec", "addAllFeatureReferences", "newBuilder", "getFeaturesList", "thenReturn", "when", "getFeatureSets", "getFeaturesList", "singletonList", "thenReturn", "when", "getOnlineFeatures", "getEntityRowsList", "thenReturn", "when", "buildSpan", "any", "mock", "build", "addFieldValues", "addFieldValues", "newBuilder", "build", "putStatuses", "putFields", "putStatuses", "putFields", "putStatuses", "putFields", "putStatuses", "putFields", "newBuilder", "intValue", "strValue", "intValue", "intValue", "build", "putStatuses", "putFields", "putStatuses", "putFields", "putStatuses", "putFields", "putStatuses", "putFields", "newBuilder", "intValue", "strValue", "build", "newBuilder", "build", "newBuilder", "getOnlineFeatures", "assertThat", "equalTo"]}, "focal_class": {"identifier": "OnlineServingService", "superclass": "", "interfaces": "implements ServingService", "fields": [{"original_string": "private static final Logger log = org.slf4j.LoggerFactory.getLogger(OnlineServingService.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = org.slf4j.LoggerFactory.getLogger(OnlineServingService.class)", "var_name": "log"}, {"original_string": "private final CachedSpecService specService;", "modifier": "private final", "type": "CachedSpecService", "declarator": "specService", "var_name": "specService"}, {"original_string": "private final Tracer tracer;", "modifier": "private final", "type": "Tracer", "declarator": "tracer", "var_name": "tracer"}, {"original_string": "private final OnlineRetriever retriever;", "modifier": "private final", "type": "OnlineRetriever", "declarator": "retriever", "var_name": "retriever"}], "methods": [{"identifier": "OnlineServingService", "parameters": "(\n      OnlineRetriever retriever, CachedSpecService specService, Tracer tracer)", "modifiers": "public", "return": "", "signature": " OnlineServingService(\n      OnlineRetriever retriever, CachedSpecService specService, Tracer tracer)", "full_signature": "public  OnlineServingService(\n      OnlineRetriever retriever, CachedSpecService specService, Tracer tracer)", "class_method_signature": "OnlineServingService.OnlineServingService(\n      OnlineRetriever retriever, CachedSpecService specService, Tracer tracer)", "testcase": false, "constructor": true}, {"identifier": "getFeastServingInfo", "parameters": "(\n      GetFeastServingInfoRequest getFeastServingInfoRequest)", "modifiers": "@Override public", "return": "GetFeastServingInfoResponse", "signature": "GetFeastServingInfoResponse getFeastServingInfo(\n      GetFeastServingInfoRequest getFeastServingInfoRequest)", "full_signature": "@Override public GetFeastServingInfoResponse getFeastServingInfo(\n      GetFeastServingInfoRequest getFeastServingInfoRequest)", "class_method_signature": "OnlineServingService.getFeastServingInfo(\n      GetFeastServingInfoRequest getFeastServingInfoRequest)", "testcase": false, "constructor": false}, {"identifier": "getOnlineFeatures", "parameters": "(GetOnlineFeaturesRequest request)", "modifiers": "@Override public", "return": "GetOnlineFeaturesResponse", "signature": "GetOnlineFeaturesResponse getOnlineFeatures(GetOnlineFeaturesRequest request)", "full_signature": "@Override public GetOnlineFeaturesResponse getOnlineFeatures(GetOnlineFeaturesRequest request)", "class_method_signature": "OnlineServingService.getOnlineFeatures(GetOnlineFeaturesRequest request)", "testcase": false, "constructor": false}, {"identifier": "unpackValueMap", "parameters": "(\n      Optional<FeatureRow> featureRow,\n      FeatureSetRequest featureSetRequest,\n      boolean isOutsideMaxAge)", "modifiers": "private static", "return": "Map<String, Value>", "signature": "Map<String, Value> unpackValueMap(\n      Optional<FeatureRow> featureRow,\n      FeatureSetRequest featureSetRequest,\n      boolean isOutsideMaxAge)", "full_signature": "private static Map<String, Value> unpackValueMap(\n      Optional<FeatureRow> featureRow,\n      FeatureSetRequest featureSetRequest,\n      boolean isOutsideMaxAge)", "class_method_signature": "OnlineServingService.unpackValueMap(\n      Optional<FeatureRow> featureRow,\n      FeatureSetRequest featureSetRequest,\n      boolean isOutsideMaxAge)", "testcase": false, "constructor": false}, {"identifier": "getMetadataMap", "parameters": "(\n      Map<String, Value> valueMap, boolean isNotFound, boolean isOutsideMaxAge)", "modifiers": "private static", "return": "Map<String, FieldStatus>", "signature": "Map<String, FieldStatus> getMetadataMap(\n      Map<String, Value> valueMap, boolean isNotFound, boolean isOutsideMaxAge)", "full_signature": "private static Map<String, FieldStatus> getMetadataMap(\n      Map<String, Value> valueMap, boolean isNotFound, boolean isOutsideMaxAge)", "class_method_signature": "OnlineServingService.getMetadataMap(\n      Map<String, Value> valueMap, boolean isNotFound, boolean isOutsideMaxAge)", "testcase": false, "constructor": false}, {"identifier": "checkOutsideMaxAge", "parameters": "(\n      FeatureSetRequest featureSetRequest, EntityRow entityRow, Optional<FeatureRow> featureRow)", "modifiers": "private static", "return": "boolean", "signature": "boolean checkOutsideMaxAge(\n      FeatureSetRequest featureSetRequest, EntityRow entityRow, Optional<FeatureRow> featureRow)", "full_signature": "private static boolean checkOutsideMaxAge(\n      FeatureSetRequest featureSetRequest, EntityRow entityRow, Optional<FeatureRow> featureRow)", "class_method_signature": "OnlineServingService.checkOutsideMaxAge(\n      FeatureSetRequest featureSetRequest, EntityRow entityRow, Optional<FeatureRow> featureRow)", "testcase": false, "constructor": false}, {"identifier": "logFeatureRowsTrace", "parameters": "(\n      Scope scope,\n      List<List<Optional<FeatureRow>>> logFeatureRows,\n      List<FeatureSetRequest> featureSetRequests)", "modifiers": "private", "return": "void", "signature": "void logFeatureRowsTrace(\n      Scope scope,\n      List<List<Optional<FeatureRow>>> logFeatureRows,\n      List<FeatureSetRequest> featureSetRequests)", "full_signature": "private void logFeatureRowsTrace(\n      Scope scope,\n      List<List<Optional<FeatureRow>>> logFeatureRows,\n      List<FeatureSetRequest> featureSetRequests)", "class_method_signature": "OnlineServingService.logFeatureRowsTrace(\n      Scope scope,\n      List<List<Optional<FeatureRow>>> logFeatureRows,\n      List<FeatureSetRequest> featureSetRequests)", "testcase": false, "constructor": false}, {"identifier": "populateCountMetrics", "parameters": "(\n      Map<String, FieldStatus> statusMap, FeatureSetRequest featureSetRequest)", "modifiers": "private", "return": "void", "signature": "void populateCountMetrics(\n      Map<String, FieldStatus> statusMap, FeatureSetRequest featureSetRequest)", "full_signature": "private void populateCountMetrics(\n      Map<String, FieldStatus> statusMap, FeatureSetRequest featureSetRequest)", "class_method_signature": "OnlineServingService.populateCountMetrics(\n      Map<String, FieldStatus> statusMap, FeatureSetRequest featureSetRequest)", "testcase": false, "constructor": false}, {"identifier": "populateRequestCountMetrics", "parameters": "(FeatureSetRequest featureSetRequest)", "modifiers": "private", "return": "void", "signature": "void populateRequestCountMetrics(FeatureSetRequest featureSetRequest)", "full_signature": "private void populateRequestCountMetrics(FeatureSetRequest featureSetRequest)", "class_method_signature": "OnlineServingService.populateRequestCountMetrics(FeatureSetRequest featureSetRequest)", "testcase": false, "constructor": false}, {"identifier": "getBatchFeatures", "parameters": "(GetBatchFeaturesRequest getFeaturesRequest)", "modifiers": "@Override public", "return": "GetBatchFeaturesResponse", "signature": "GetBatchFeaturesResponse getBatchFeatures(GetBatchFeaturesRequest getFeaturesRequest)", "full_signature": "@Override public GetBatchFeaturesResponse getBatchFeatures(GetBatchFeaturesRequest getFeaturesRequest)", "class_method_signature": "OnlineServingService.getBatchFeatures(GetBatchFeaturesRequest getFeaturesRequest)", "testcase": false, "constructor": false}, {"identifier": "getJob", "parameters": "(GetJobRequest getJobRequest)", "modifiers": "@Override public", "return": "GetJobResponse", "signature": "GetJobResponse getJob(GetJobRequest getJobRequest)", "full_signature": "@Override public GetJobResponse getJob(GetJobRequest getJobRequest)", "class_method_signature": "OnlineServingService.getJob(GetJobRequest getJobRequest)", "testcase": false, "constructor": false}], "file": "serving/src/main/java/feast/serving/service/OnlineServingService.java"}, "focal_method": {"identifier": "getOnlineFeatures", "parameters": "(GetOnlineFeaturesRequest request)", "modifiers": "@Override public", "return": "GetOnlineFeaturesResponse", "body": "@Override\n  public GetOnlineFeaturesResponse getOnlineFeatures(GetOnlineFeaturesRequest request) {\n    try (Scope scope = tracer.buildSpan(\"getOnlineFeatures\").startActive(true)) {\n      List<EntityRow> entityRows = request.getEntityRowsList();\n      // Collect the feature/entity value for each entity row in entityValueMap\n      Map<EntityRow, Map<String, Value>> entityValuesMap =\n          entityRows.stream().collect(Collectors.toMap(row -> row, row -> new HashMap<>()));\n      // Collect the feature/entity status metadata for each entity row in entityValueMap\n      Map<EntityRow, Map<String, FieldStatus>> entityStatusesMap =\n          entityRows.stream().collect(Collectors.toMap(row -> row, row -> new HashMap<>()));\n      // Collect featureRows retrieved for logging/tracing\n      List<List<Optional<FeatureRow>>> logFeatureRows = new LinkedList<>();\n\n      if (!request.getOmitEntitiesInResponse()) {\n        // Add entity row's fields as response fields\n        entityRows.forEach(\n            entityRow -> {\n              Map<String, Value> valueMap = entityRow.getFieldsMap();\n              entityValuesMap.get(entityRow).putAll(valueMap);\n              entityStatusesMap.get(entityRow).putAll(getMetadataMap(valueMap, false, false));\n            });\n      }\n\n      List<FeatureSetRequest> featureSetRequests =\n          specService.getFeatureSets(request.getFeaturesList(), request.getProject());\n      for (FeatureSetRequest featureSetRequest : featureSetRequests) {\n        // Pull feature rows for given entity rows from the feature/featureset specified in feature\n        // set request.\n        // from the configured online\n        List<Optional<FeatureRow>> featureRows =\n            retriever.getOnlineFeatures(entityRows, featureSetRequest);\n        // Check that feature row returned corresponds to a given entity row.\n        if (featureRows.size() != entityRows.size()) {\n          throw Status.INTERNAL\n              .withDescription(\n                  \"The no. of FeatureRow obtained from OnlineRetriever\"\n                      + \"does not match no. of entityRow passed.\")\n              .asRuntimeException();\n        }\n\n        Streams.zip(entityRows.stream(), featureRows.stream(), Pair::of)\n            .forEach(\n                entityFeaturePair -> {\n                  EntityRow entityRow = entityFeaturePair.getLeft();\n                  Optional<FeatureRow> featureRow = entityFeaturePair.getRight();\n                  // Unpack feature field values and merge into entityValueMap\n                  boolean isOutsideMaxAge =\n                      checkOutsideMaxAge(featureSetRequest, entityRow, featureRow);\n                  Map<String, Value> valueMap =\n                      unpackValueMap(featureRow, featureSetRequest, isOutsideMaxAge);\n                  entityValuesMap.get(entityRow).putAll(valueMap);\n\n                  // Generate metadata for feature values and merge into entityFieldsMap\n                  boolean isNotFound = featureRow.isEmpty();\n                  Map<String, FieldStatus> statusMap =\n                      getMetadataMap(valueMap, isNotFound, isOutsideMaxAge);\n                  entityStatusesMap.get(entityRow).putAll(statusMap);\n\n                  // Populate metrics/log request\n                  populateCountMetrics(statusMap, featureSetRequest);\n                });\n        populateRequestCountMetrics(featureSetRequest);\n        logFeatureRows.add(featureRows);\n      }\n      if (scope != null) {\n        logFeatureRowsTrace(scope, logFeatureRows, featureSetRequests);\n      }\n\n      // Build response field values from entityValuesMap and entityStatusesMap\n      // Reponse field values should be in the same order as the entityRows provided by the user.\n      List<FieldValues> fieldValuesList =\n          entityRows.stream()\n              .map(\n                  entityRow -> {\n                    return FieldValues.newBuilder()\n                        .putAllFields(entityValuesMap.get(entityRow))\n                        .putAllStatuses(entityStatusesMap.get(entityRow))\n                        .build();\n                  })\n              .collect(Collectors.toList());\n      return GetOnlineFeaturesResponse.newBuilder().addAllFieldValues(fieldValuesList).build();\n    }\n  }", "signature": "GetOnlineFeaturesResponse getOnlineFeatures(GetOnlineFeaturesRequest request)", "full_signature": "@Override public GetOnlineFeaturesResponse getOnlineFeatures(GetOnlineFeaturesRequest request)", "class_method_signature": "OnlineServingService.getOnlineFeatures(GetOnlineFeaturesRequest request)", "testcase": false, "constructor": false, "invocations": ["startActive", "buildSpan", "getEntityRowsList", "collect", "stream", "toMap", "collect", "stream", "toMap", "getOmitEntitiesInResponse", "forEach", "getFieldsMap", "putAll", "get", "putAll", "get", "getMetadataMap", "getFeatureSets", "getFeaturesList", "getProject", "getOnlineFeatures", "size", "size", "asRuntimeException", "withDescription", "forEach", "zip", "stream", "stream", "getLeft", "getRight", "checkOutsideMaxAge", "unpackValueMap", "putAll", "get", "isEmpty", "getMetadataMap", "putAll", "get", "populateCountMetrics", "populateRequestCountMetrics", "add", "logFeatureRowsTrace", "collect", "map", "stream", "build", "putAllStatuses", "putAllFields", "newBuilder", "get", "get", "toList", "build", "addAllFieldValues", "newBuilder"]}, "repository": {"repo_id": 161133770, "url": "https://github.com/gojek/feast", "stars": 633, "created": "12/10/2018 7:20:15 AM +00:00", "updates": "2020-01-27T12:39:33+00:00", "fork": "False", "license": "licensed"}}