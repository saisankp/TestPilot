{"test_class": {"identifier": "SocketIoServerOptionsTest", "superclass": "", "interfaces": "", "fields": [], "file": "socket.io-server/src/test/java/io/socket/socketio/server/SocketIoServerOptionsTest.java"}, "test_case": {"identifier": "testDefaultLocked_setAdapterFactory", "parameters": "()", "modifiers": "@Test(expected = IllegalStateException.class) public", "return": "void", "body": "@Test(expected = IllegalStateException.class)\n    public void testDefaultLocked_setAdapterFactory() {\n        SocketIoServerOptions.DEFAULT.setAdapterFactory(null);\n    }", "signature": "void testDefaultLocked_setAdapterFactory()", "full_signature": "@Test(expected = IllegalStateException.class) public void testDefaultLocked_setAdapterFactory()", "class_method_signature": "SocketIoServerOptionsTest.testDefaultLocked_setAdapterFactory()", "testcase": true, "constructor": false, "invocations": ["setAdapterFactory"]}, "focal_class": {"identifier": "SocketIoServerOptions", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final SocketIoServerOptions DEFAULT = new SocketIoServerOptions();", "modifier": "public static final", "type": "SocketIoServerOptions", "declarator": "DEFAULT = new SocketIoServerOptions()", "var_name": "DEFAULT"}, {"original_string": "private static final SocketIoAdapter.AdapterFactory MEMORY_ADAPTER_FACTORY = new SocketIoMemoryAdapter.Factory();", "modifier": "private static final", "type": "SocketIoAdapter.AdapterFactory", "declarator": "MEMORY_ADAPTER_FACTORY = new SocketIoMemoryAdapter.Factory()", "var_name": "MEMORY_ADAPTER_FACTORY"}, {"original_string": "private boolean mIsLocked;", "modifier": "private", "type": "boolean", "declarator": "mIsLocked", "var_name": "mIsLocked"}, {"original_string": "private SocketIoAdapter.AdapterFactory mAdapterFactory;", "modifier": "private", "type": "SocketIoAdapter.AdapterFactory", "declarator": "mAdapterFactory", "var_name": "mAdapterFactory"}], "methods": [{"identifier": "SocketIoServerOptions", "parameters": "()", "modifiers": "private", "return": "", "signature": " SocketIoServerOptions()", "full_signature": "private  SocketIoServerOptions()", "class_method_signature": "SocketIoServerOptions.SocketIoServerOptions()", "testcase": false, "constructor": true}, {"identifier": "newFromDefault", "parameters": "()", "modifiers": "public static", "return": "SocketIoServerOptions", "signature": "SocketIoServerOptions newFromDefault()", "full_signature": "public static SocketIoServerOptions newFromDefault()", "class_method_signature": "SocketIoServerOptions.newFromDefault()", "testcase": false, "constructor": false}, {"identifier": "getAdapterFactory", "parameters": "()", "modifiers": "public", "return": "SocketIoAdapter.AdapterFactory", "signature": "SocketIoAdapter.AdapterFactory getAdapterFactory()", "full_signature": "public SocketIoAdapter.AdapterFactory getAdapterFactory()", "class_method_signature": "SocketIoServerOptions.getAdapterFactory()", "testcase": false, "constructor": false}, {"identifier": "setAdapterFactory", "parameters": "(SocketIoAdapter.AdapterFactory adapterFactory)", "modifiers": "public", "return": "SocketIoServerOptions", "signature": "SocketIoServerOptions setAdapterFactory(SocketIoAdapter.AdapterFactory adapterFactory)", "full_signature": "public SocketIoServerOptions setAdapterFactory(SocketIoAdapter.AdapterFactory adapterFactory)", "class_method_signature": "SocketIoServerOptions.setAdapterFactory(SocketIoAdapter.AdapterFactory adapterFactory)", "testcase": false, "constructor": false}, {"identifier": "lock", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void lock()", "full_signature": "public void lock()", "class_method_signature": "SocketIoServerOptions.lock()", "testcase": false, "constructor": false}], "file": "socket.io-server/src/main/java/io/socket/socketio/server/SocketIoServerOptions.java"}, "focal_method": {"identifier": "setAdapterFactory", "parameters": "(SocketIoAdapter.AdapterFactory adapterFactory)", "modifiers": "public", "return": "SocketIoServerOptions", "body": "public SocketIoServerOptions setAdapterFactory(SocketIoAdapter.AdapterFactory adapterFactory) throws IllegalStateException {\n        if (mIsLocked) {\n            throw new IllegalStateException(\"Adapter factory cannot be set. Instance is locked.\");\n        }\n\n        if (adapterFactory == null) {\n            adapterFactory = MEMORY_ADAPTER_FACTORY;\n        }\n\n        mAdapterFactory = adapterFactory;\n        return this;\n    }", "signature": "SocketIoServerOptions setAdapterFactory(SocketIoAdapter.AdapterFactory adapterFactory)", "full_signature": "public SocketIoServerOptions setAdapterFactory(SocketIoAdapter.AdapterFactory adapterFactory)", "class_method_signature": "SocketIoServerOptions.setAdapterFactory(SocketIoAdapter.AdapterFactory adapterFactory)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 144740389, "url": "https://github.com/trinopoty/socket.io-server-java", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 16, "size": 1069, "license": "licensed"}}