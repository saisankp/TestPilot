{"test_class": {"identifier": "RelocationUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "titus-supplementary-component/task-relocation/src/test/java/com/netflix/titus/supplementary/relocation/util/RelocationUtilTest.java"}, "test_case": {"identifier": "buildTasksFromNodesAndJobsFilter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void buildTasksFromNodesAndJobsFilter() {\n        String node1 = \"node1\";\n        String node2 = \"node2\";\n        String node3 = \"node3\";\n\n        Job<BatchJobExt> job1 = JobGenerator.oneBatchJob();\n        Job<BatchJobExt> job2 = JobGenerator.oneBatchJob();\n        Job<BatchJobExt> job3 = JobGenerator.oneBatchJob();\n\n        BatchJobTask task1 = JobGenerator.batchTasks(job1).getValue().toBuilder()\n                .addToTaskContext(TaskAttributes.TASK_ATTRIBUTES_AGENT_INSTANCE_ID, node1).build();\n\n        BatchJobTask task2 = JobGenerator.batchTasks(job2).getValue().toBuilder()\n                .addToTaskContext(TaskAttributes.TASK_ATTRIBUTES_AGENT_INSTANCE_ID, node2).build();\n\n        BatchJobTask task3 = JobGenerator.batchTasks(job3).getValue().toBuilder()\n                .addToTaskContext(TaskAttributes.TASK_ATTRIBUTES_AGENT_INSTANCE_ID, node3).build();\n\n        ReadOnlyJobOperations jobOperations = mock(ReadOnlyJobOperations.class);\n        when(jobOperations.getJobs()).thenReturn(Arrays.asList(job1, job2, job3));\n        when(jobOperations.getTasks(job1.getId())).thenReturn(Collections.singletonList(task1));\n        when(jobOperations.getTasks(job2.getId())).thenReturn(Collections.singletonList(task2));\n        when(jobOperations.getTasks(job3.getId())).thenReturn(Collections.singletonList(task3));\n\n        Map<String, Node> nodes = new HashMap<>(3);\n        nodes.put(node1, buildNode(node1));\n        nodes.put(node2, buildNode(node2));\n        nodes.put(node3, buildNode(node3));\n\n        Set<String> jobIds = new HashSet<>(2);\n        jobIds.addAll(Arrays.asList(job1.getId(), job3.getId()));\n\n        List<String> taskIdsOnBadNodes = RelocationUtil.buildTasksFromNodesAndJobsFilter(nodes, jobIds, jobOperations);\n        assertThat(taskIdsOnBadNodes.size()).isEqualTo(2);\n    }", "signature": "void buildTasksFromNodesAndJobsFilter()", "full_signature": "@Test public void buildTasksFromNodesAndJobsFilter()", "class_method_signature": "RelocationUtilTest.buildTasksFromNodesAndJobsFilter()", "testcase": true, "constructor": false, "invocations": ["oneBatchJob", "oneBatchJob", "oneBatchJob", "build", "addToTaskContext", "toBuilder", "getValue", "batchTasks", "build", "addToTaskContext", "toBuilder", "getValue", "batchTasks", "build", "addToTaskContext", "toBuilder", "getValue", "batchTasks", "mock", "thenReturn", "when", "getJobs", "asList", "thenReturn", "when", "getTasks", "getId", "singletonList", "thenReturn", "when", "getTasks", "getId", "singletonList", "thenReturn", "when", "getTasks", "getId", "singletonList", "put", "buildNode", "put", "buildNode", "put", "buildNode", "addAll", "asList", "getId", "getId", "buildTasksFromNodesAndJobsFilter", "isEqualTo", "assertThat", "size"]}, "focal_class": {"identifier": "RelocationUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "buildTaskByIdMap", "parameters": "(ReadOnlyJobOperations jobOperations)", "modifiers": "public static", "return": "Map<String, Task>", "signature": "Map<String, Task> buildTaskByIdMap(ReadOnlyJobOperations jobOperations)", "full_signature": "public static Map<String, Task> buildTaskByIdMap(ReadOnlyJobOperations jobOperations)", "class_method_signature": "RelocationUtil.buildTaskByIdMap(ReadOnlyJobOperations jobOperations)", "testcase": false, "constructor": false}, {"identifier": "buildTasksToInstanceMap", "parameters": "(Map<String, Node> nodesById, Map<String, Task> taskByIdMap)", "modifiers": "public static", "return": "Map<String, Node>", "signature": "Map<String, Node> buildTasksToInstanceMap(Map<String, Node> nodesById, Map<String, Task> taskByIdMap)", "full_signature": "public static Map<String, Node> buildTasksToInstanceMap(Map<String, Node> nodesById, Map<String, Task> taskByIdMap)", "class_method_signature": "RelocationUtil.buildTasksToInstanceMap(Map<String, Node> nodesById, Map<String, Task> taskByIdMap)", "testcase": false, "constructor": false}, {"identifier": "buildTasksToInstanceMap", "parameters": "(Map<String, Node> nodesById,\n                                                            ReadOnlyJobOperations jobOperations)", "modifiers": "public static", "return": "Map<String, Node>", "signature": "Map<String, Node> buildTasksToInstanceMap(Map<String, Node> nodesById,\n                                                            ReadOnlyJobOperations jobOperations)", "full_signature": "public static Map<String, Node> buildTasksToInstanceMap(Map<String, Node> nodesById,\n                                                            ReadOnlyJobOperations jobOperations)", "class_method_signature": "RelocationUtil.buildTasksToInstanceMap(Map<String, Node> nodesById,\n                                                            ReadOnlyJobOperations jobOperations)", "testcase": false, "constructor": false}, {"identifier": "buildTasksFromNodesAndJobsFilter", "parameters": "(Map<String, Node> nodesById, Set<String> jobIds,\n                                                                ReadOnlyJobOperations jobOperations)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> buildTasksFromNodesAndJobsFilter(Map<String, Node> nodesById, Set<String> jobIds,\n                                                                ReadOnlyJobOperations jobOperations)", "full_signature": "public static List<String> buildTasksFromNodesAndJobsFilter(Map<String, Node> nodesById, Set<String> jobIds,\n                                                                ReadOnlyJobOperations jobOperations)", "class_method_signature": "RelocationUtil.buildTasksFromNodesAndJobsFilter(Map<String, Node> nodesById, Set<String> jobIds,\n                                                                ReadOnlyJobOperations jobOperations)", "testcase": false, "constructor": false}, {"identifier": "findTasksOnInstance", "parameters": "(Node instance, Collection<Task> tasks)", "modifiers": "public static", "return": "List<Task>", "signature": "List<Task> findTasksOnInstance(Node instance, Collection<Task> tasks)", "full_signature": "public static List<Task> findTasksOnInstance(Node instance, Collection<Task> tasks)", "class_method_signature": "RelocationUtil.findTasksOnInstance(Node instance, Collection<Task> tasks)", "testcase": false, "constructor": false}, {"identifier": "isAssignedToAgent", "parameters": "(Task task)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAssignedToAgent(Task task)", "full_signature": "public static boolean isAssignedToAgent(Task task)", "class_method_signature": "RelocationUtil.isAssignedToAgent(Task task)", "testcase": false, "constructor": false}, {"identifier": "isOnInstance", "parameters": "(Node instance, Task task)", "modifiers": "public static", "return": "boolean", "signature": "boolean isOnInstance(Node instance, Task task)", "full_signature": "public static boolean isOnInstance(Node instance, Task task)", "class_method_signature": "RelocationUtil.isOnInstance(Node instance, Task task)", "testcase": false, "constructor": false}, {"identifier": "doFormat", "parameters": "(TaskRelocationPlan plan)", "modifiers": "public static", "return": "String", "signature": "String doFormat(TaskRelocationPlan plan)", "full_signature": "public static String doFormat(TaskRelocationPlan plan)", "class_method_signature": "RelocationUtil.doFormat(TaskRelocationPlan plan)", "testcase": false, "constructor": false}], "file": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/util/RelocationUtil.java"}, "focal_method": {"identifier": "buildTasksFromNodesAndJobsFilter", "parameters": "(Map<String, Node> nodesById, Set<String> jobIds,\n                                                                ReadOnlyJobOperations jobOperations)", "modifiers": "public static", "return": "List<String>", "body": "public static List<String> buildTasksFromNodesAndJobsFilter(Map<String, Node> nodesById, Set<String> jobIds,\n                                                                ReadOnlyJobOperations jobOperations) {\n        Map<String, Task> tasksById = buildTaskByIdMap(jobOperations);\n        Set<String> taskIdsOnNodes = buildTasksToInstanceMap(nodesById, tasksById).keySet();\n        return taskIdsOnNodes.stream().filter(taskId -> {\n            if (tasksById.containsKey(taskId)) {\n                Task task = tasksById.get(taskId);\n                return jobIds.contains(task.getJobId());\n            }\n            return false;\n        }).collect(Collectors.toList());\n    }", "signature": "List<String> buildTasksFromNodesAndJobsFilter(Map<String, Node> nodesById, Set<String> jobIds,\n                                                                ReadOnlyJobOperations jobOperations)", "full_signature": "public static List<String> buildTasksFromNodesAndJobsFilter(Map<String, Node> nodesById, Set<String> jobIds,\n                                                                ReadOnlyJobOperations jobOperations)", "class_method_signature": "RelocationUtil.buildTasksFromNodesAndJobsFilter(Map<String, Node> nodesById, Set<String> jobIds,\n                                                                ReadOnlyJobOperations jobOperations)", "testcase": false, "constructor": false, "invocations": ["buildTaskByIdMap", "keySet", "buildTasksToInstanceMap", "collect", "filter", "stream", "containsKey", "get", "contains", "getJobId", "toList"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}