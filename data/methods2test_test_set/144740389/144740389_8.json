{"test_class": {"identifier": "SocketIoSocketTest", "superclass": "", "interfaces": "", "fields": [], "file": "socket.io-server/src/test/java/io/socket/socketio/server/SocketIoSocketTest.java"}, "test_case": {"identifier": "test_onClose", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_onClose() {\n        final EngineIoServer engineIoServer = new EngineIoServer();\n        final SocketIoServer server = Mockito.spy(new SocketIoServer(engineIoServer));\n        final SocketIoNamespace namespace = server.namespace(\"/\");\n\n        final Emitter.Listener connectionListener = Mockito.mock(Emitter.Listener.class);\n        Mockito.doAnswer(invocation -> {\n            final Object[] args = invocation.getArguments();\n            final SocketIoSocket socket = (SocketIoSocket) args[0];\n\n            final Emitter.Listener disconnectListener = Mockito.mock(Emitter.Listener.class);\n            socket.on(\"disconnect\", disconnectListener);\n\n            Mockito.reset(disconnectListener);\n            socket.onClose(\"foo\");\n            Mockito.verify(disconnectListener, Mockito.times(1))\n                    .call(Mockito.eq(\"foo\"));\n\n            Mockito.reset(disconnectListener);\n            socket.onClose(\"bar\");\n            Mockito.verify(disconnectListener, Mockito.times(0))\n                    .call(Mockito.anyString());\n            return null;\n        }).when(connectionListener).call(Mockito.any());\n        namespace.on(\"connection\", connectionListener);\n\n        final EngineIoWebSocketImpl webSocket = new EngineIoWebSocketImpl();\n        engineIoServer.handleWebSocket(webSocket);\n\n        Mockito.verify(connectionListener, Mockito.times(1))\n                .call(Mockito.any(SocketIoSocket.class));\n    }", "signature": "void test_onClose()", "full_signature": "@Test public void test_onClose()", "class_method_signature": "SocketIoSocketTest.test_onClose()", "testcase": true, "constructor": false, "invocations": ["spy", "namespace", "mock", "call", "when", "doAnswer", "getArguments", "mock", "on", "reset", "onClose", "call", "verify", "times", "eq", "reset", "onClose", "call", "verify", "times", "anyString", "any", "on", "handleWebSocket", "call", "verify", "times", "any"]}, "focal_class": {"identifier": "SocketIoSocket", "superclass": "extends Emitter", "interfaces": "", "fields": [{"original_string": "private static final Object[] EMPTY_ARGS = new Object[0];", "modifier": "private static final", "type": "Object[]", "declarator": "EMPTY_ARGS = new Object[0]", "var_name": "EMPTY_ARGS"}, {"original_string": "private final ConcurrentLinkedQueue<AllEventListener> mAllEventListeners = new ConcurrentLinkedQueue<>();", "modifier": "private final", "type": "ConcurrentLinkedQueue<AllEventListener>", "declarator": "mAllEventListeners = new ConcurrentLinkedQueue<>()", "var_name": "mAllEventListeners"}, {"original_string": "private final SocketIoNamespaceImpl mNamespace;", "modifier": "private final", "type": "SocketIoNamespaceImpl", "declarator": "mNamespace", "var_name": "mNamespace"}, {"original_string": "private final SocketIoClient mClient;", "modifier": "private final", "type": "SocketIoClient", "declarator": "mClient", "var_name": "mClient"}, {"original_string": "private final SocketIoAdapter mAdapter;", "modifier": "private final", "type": "SocketIoAdapter", "declarator": "mAdapter", "var_name": "mAdapter"}, {"original_string": "private final String mId;", "modifier": "private final", "type": "String", "declarator": "mId", "var_name": "mId"}, {"original_string": "private final HashSet<String> mRooms = new HashSet<>();", "modifier": "private final", "type": "HashSet<String>", "declarator": "mRooms = new HashSet<>()", "var_name": "mRooms"}, {"original_string": "private final HashMap<Integer, ReceivedByRemoteAcknowledgementCallback> mAcknowledgementCallbacks = new HashMap<>();", "modifier": "private final", "type": "HashMap<Integer, ReceivedByRemoteAcknowledgementCallback>", "declarator": "mAcknowledgementCallbacks = new HashMap<>()", "var_name": "mAcknowledgementCallbacks"}, {"original_string": "private boolean mConnected;", "modifier": "private", "type": "boolean", "declarator": "mConnected", "var_name": "mConnected"}], "methods": [{"identifier": "SocketIoSocket", "parameters": "(SocketIoNamespaceImpl namespace, SocketIoClient client)", "modifiers": "", "return": "", "signature": " SocketIoSocket(SocketIoNamespaceImpl namespace, SocketIoClient client)", "full_signature": "  SocketIoSocket(SocketIoNamespaceImpl namespace, SocketIoClient client)", "class_method_signature": "SocketIoSocket.SocketIoSocket(SocketIoNamespaceImpl namespace, SocketIoClient client)", "testcase": false, "constructor": true}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "SocketIoSocket.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "SocketIoSocket.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getId()", "full_signature": "public String getId()", "class_method_signature": "SocketIoSocket.getId()", "testcase": false, "constructor": false}, {"identifier": "getNamespace", "parameters": "()", "modifiers": "public", "return": "SocketIoNamespace", "signature": "SocketIoNamespace getNamespace()", "full_signature": "public SocketIoNamespace getNamespace()", "class_method_signature": "SocketIoSocket.getNamespace()", "testcase": false, "constructor": false}, {"identifier": "disconnect", "parameters": "(boolean close)", "modifiers": "public", "return": "void", "signature": "void disconnect(boolean close)", "full_signature": "public void disconnect(boolean close)", "class_method_signature": "SocketIoSocket.disconnect(boolean close)", "testcase": false, "constructor": false}, {"identifier": "broadcast", "parameters": "(String room, String event, Object... args)", "modifiers": "public", "return": "void", "signature": "void broadcast(String room, String event, Object... args)", "full_signature": "public void broadcast(String room, String event, Object... args)", "class_method_signature": "SocketIoSocket.broadcast(String room, String event, Object... args)", "testcase": false, "constructor": false}, {"identifier": "broadcast", "parameters": "(String[] rooms, String event, Object[] args)", "modifiers": "public", "return": "void", "signature": "void broadcast(String[] rooms, String event, Object[] args)", "full_signature": "public void broadcast(String[] rooms, String event, Object[] args)", "class_method_signature": "SocketIoSocket.broadcast(String[] rooms, String event, Object[] args)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(String event, Object... args)", "modifiers": "public", "return": "void", "signature": "void send(String event, Object... args)", "full_signature": "public void send(String event, Object... args)", "class_method_signature": "SocketIoSocket.send(String event, Object... args)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(String event, Object[] args, ReceivedByRemoteAcknowledgementCallback acknowledgementCallback)", "modifiers": "public", "return": "void", "signature": "void send(String event, Object[] args, ReceivedByRemoteAcknowledgementCallback acknowledgementCallback)", "full_signature": "public void send(String event, Object[] args, ReceivedByRemoteAcknowledgementCallback acknowledgementCallback)", "class_method_signature": "SocketIoSocket.send(String event, Object[] args, ReceivedByRemoteAcknowledgementCallback acknowledgementCallback)", "testcase": false, "constructor": false}, {"identifier": "joinRoom", "parameters": "(String... rooms)", "modifiers": "public synchronized", "return": "void", "signature": "void joinRoom(String... rooms)", "full_signature": "public synchronized void joinRoom(String... rooms)", "class_method_signature": "SocketIoSocket.joinRoom(String... rooms)", "testcase": false, "constructor": false}, {"identifier": "leaveRoom", "parameters": "(String... rooms)", "modifiers": "public synchronized", "return": "void", "signature": "void leaveRoom(String... rooms)", "full_signature": "public synchronized void leaveRoom(String... rooms)", "class_method_signature": "SocketIoSocket.leaveRoom(String... rooms)", "testcase": false, "constructor": false}, {"identifier": "leaveAllRooms", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void leaveAllRooms()", "full_signature": "public synchronized void leaveAllRooms()", "class_method_signature": "SocketIoSocket.leaveAllRooms()", "testcase": false, "constructor": false}, {"identifier": "registerAllEventListener", "parameters": "(AllEventListener listener)", "modifiers": "public", "return": "void", "signature": "void registerAllEventListener(AllEventListener listener)", "full_signature": "public void registerAllEventListener(AllEventListener listener)", "class_method_signature": "SocketIoSocket.registerAllEventListener(AllEventListener listener)", "testcase": false, "constructor": false}, {"identifier": "unregisterAllEventListener", "parameters": "(AllEventListener listener)", "modifiers": "public", "return": "void", "signature": "void unregisterAllEventListener(AllEventListener listener)", "full_signature": "public void unregisterAllEventListener(AllEventListener listener)", "class_method_signature": "SocketIoSocket.unregisterAllEventListener(AllEventListener listener)", "testcase": false, "constructor": false}, {"identifier": "onEvent", "parameters": "(final Packet packet)", "modifiers": "", "return": "void", "signature": "void onEvent(final Packet packet)", "full_signature": " void onEvent(final Packet packet)", "class_method_signature": "SocketIoSocket.onEvent(final Packet packet)", "testcase": false, "constructor": false}, {"identifier": "onAck", "parameters": "(Packet packet)", "modifiers": "", "return": "void", "signature": "void onAck(Packet packet)", "full_signature": " void onAck(Packet packet)", "class_method_signature": "SocketIoSocket.onAck(Packet packet)", "testcase": false, "constructor": false}, {"identifier": "onPacket", "parameters": "(Packet packet)", "modifiers": "", "return": "void", "signature": "void onPacket(Packet packet)", "full_signature": " void onPacket(Packet packet)", "class_method_signature": "SocketIoSocket.onPacket(Packet packet)", "testcase": false, "constructor": false}, {"identifier": "onConnect", "parameters": "()", "modifiers": "", "return": "void", "signature": "void onConnect()", "full_signature": " void onConnect()", "class_method_signature": "SocketIoSocket.onConnect()", "testcase": false, "constructor": false}, {"identifier": "onDisconnect", "parameters": "()", "modifiers": "", "return": "void", "signature": "void onDisconnect()", "full_signature": " void onDisconnect()", "class_method_signature": "SocketIoSocket.onDisconnect()", "testcase": false, "constructor": false}, {"identifier": "onClose", "parameters": "(String reason)", "modifiers": "", "return": "void", "signature": "void onClose(String reason)", "full_signature": " void onClose(String reason)", "class_method_signature": "SocketIoSocket.onClose(String reason)", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(String error)", "modifiers": "", "return": "void", "signature": "void onError(String error)", "full_signature": " void onError(String error)", "class_method_signature": "SocketIoSocket.onError(String error)", "testcase": false, "constructor": false}, {"identifier": "sendPacket", "parameters": "(Packet packet)", "modifiers": "", "return": "void", "signature": "void sendPacket(Packet packet)", "full_signature": " void sendPacket(Packet packet)", "class_method_signature": "SocketIoSocket.sendPacket(Packet packet)", "testcase": false, "constructor": false}, {"identifier": "unpackEventData", "parameters": "(JSONArray data)", "modifiers": "private static", "return": "Object[]", "signature": "Object[] unpackEventData(JSONArray data)", "full_signature": "private static Object[] unpackEventData(JSONArray data)", "class_method_signature": "SocketIoSocket.unpackEventData(JSONArray data)", "testcase": false, "constructor": false}], "file": "socket.io-server/src/main/java/io/socket/socketio/server/SocketIoSocket.java"}, "focal_method": {"identifier": "onClose", "parameters": "(String reason)", "modifiers": "", "return": "void", "body": "void onClose(String reason) {\n        if (mConnected) {\n            emit(\"disconnecting\", reason);\n\n            leaveAllRooms();\n            mNamespace.remove(this);\n            mClient.remove(this);\n            mConnected = false;\n            mNamespace.removeConnected(this);\n\n            emit(\"disconnect\", reason);\n        }\n    }", "signature": "void onClose(String reason)", "full_signature": " void onClose(String reason)", "class_method_signature": "SocketIoSocket.onClose(String reason)", "testcase": false, "constructor": false, "invocations": ["emit", "leaveAllRooms", "remove", "remove", "removeConnected", "emit"]}, "repository": {"repo_id": 144740389, "url": "https://github.com/trinopoty/socket.io-server-java", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 16, "size": 1069, "license": "licensed"}}