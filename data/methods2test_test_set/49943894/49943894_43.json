{"test_class": {"identifier": "TestTransaction", "superclass": "", "interfaces": "", "fields": [{"original_string": "TransactionLegacy txn;", "modifier": "", "type": "TransactionLegacy", "declarator": "txn", "var_name": "txn"}, {"original_string": "Connection conn;", "modifier": "", "type": "Connection", "declarator": "conn", "var_name": "conn"}], "file": "framework/db/src/test/java/com/cloud/utils/db/TestTransaction.java"}, "test_case": {"identifier": "testCommit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCommit() throws Exception {\n        assertEquals(42L, Transaction.execute(new TransactionCallback<Object>() {\n            @Override\n            public Object doInTransaction(TransactionStatus status) {\n                return 42L;\n            }\n        }));\n\n        verify(conn).setAutoCommit(false);\n        verify(conn, times(1)).commit();\n        verify(conn, times(0)).rollback();\n        verify(conn, times(1)).close();\n    }", "signature": "void testCommit()", "full_signature": "@Test public void testCommit()", "class_method_signature": "TestTransaction.testCommit()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "execute", "setAutoCommit", "verify", "commit", "verify", "times", "rollback", "verify", "times", "close", "verify", "times"]}, "focal_class": {"identifier": "Transaction", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static AtomicLong counter = new AtomicLong(0);", "modifier": "private final static", "type": "AtomicLong", "declarator": "counter = new AtomicLong(0)", "var_name": "counter"}, {"original_string": "private final static TransactionStatus STATUS = new TransactionStatus() {\n    };", "modifier": "private final static", "type": "TransactionStatus", "declarator": "STATUS = new TransactionStatus() {\n    }", "var_name": "STATUS"}, {"original_string": "private static final Logger s_logger = LoggerFactory.getLogger(Transaction.class);", "modifier": "private static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(Transaction.class)", "var_name": "s_logger"}], "methods": [{"identifier": "execute", "parameters": "(TransactionCallbackWithException<T, E> callback)", "modifiers": "@SuppressWarnings(\"deprecation\") public static", "return": "T", "signature": "T execute(TransactionCallbackWithException<T, E> callback)", "full_signature": "@SuppressWarnings(\"deprecation\") public static T execute(TransactionCallbackWithException<T, E> callback)", "class_method_signature": "Transaction.execute(TransactionCallbackWithException<T, E> callback)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(final TransactionCallback<T> callback)", "modifiers": "public static", "return": "T", "signature": "T execute(final TransactionCallback<T> callback)", "full_signature": "public static T execute(final TransactionCallback<T> callback)", "class_method_signature": "Transaction.execute(final TransactionCallback<T> callback)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(final short databaseId, TransactionCallbackWithException<T, E> callback)", "modifiers": "@SuppressWarnings(\"deprecation\") public static", "return": "T", "signature": "T execute(final short databaseId, TransactionCallbackWithException<T, E> callback)", "full_signature": "@SuppressWarnings(\"deprecation\") public static T execute(final short databaseId, TransactionCallbackWithException<T, E> callback)", "class_method_signature": "Transaction.execute(final short databaseId, TransactionCallbackWithException<T, E> callback)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(final short databaseId, final TransactionCallback<T> callback)", "modifiers": "public static", "return": "T", "signature": "T execute(final short databaseId, final TransactionCallback<T> callback)", "full_signature": "public static T execute(final short databaseId, final TransactionCallback<T> callback)", "class_method_signature": "Transaction.execute(final short databaseId, final TransactionCallback<T> callback)", "testcase": false, "constructor": false}], "file": "framework/db/src/main/java/com/cloud/utils/db/Transaction.java"}, "focal_method": {"identifier": "execute", "parameters": "(TransactionCallbackWithException<T, E> callback)", "modifiers": "@SuppressWarnings(\"deprecation\") public static", "return": "T", "body": "@SuppressWarnings(\"deprecation\")\n    public static <T, E extends Throwable> T execute(TransactionCallbackWithException<T, E> callback) throws E {\n        String name = \"tx-\" + counter.incrementAndGet();\n        short databaseId = TransactionLegacy.CLOUD_DB;\n        TransactionLegacy currentTxn = TransactionLegacy.currentTxn(false);\n        if (currentTxn != null) {\n            databaseId = currentTxn.getDatabaseId();\n        }\n        try (final TransactionLegacy txn = TransactionLegacy.open(name, databaseId, false)) {\n            txn.start();\n            T result = callback.doInTransaction(STATUS);\n            txn.commit();\n            return result;\n        }\n    }", "signature": "T execute(TransactionCallbackWithException<T, E> callback)", "full_signature": "@SuppressWarnings(\"deprecation\") public static T execute(TransactionCallbackWithException<T, E> callback)", "class_method_signature": "Transaction.execute(TransactionCallbackWithException<T, E> callback)", "testcase": false, "constructor": false, "invocations": ["incrementAndGet", "currentTxn", "getDatabaseId", "open", "start", "doInTransaction", "commit"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}