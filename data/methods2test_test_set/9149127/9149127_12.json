{"test_class": {"identifier": "XMLQueryTest", "superclass": "", "interfaces": "", "fields": [], "file": "mycontainer-components/mycontainer-commons/src/test/java/com/googlecode/mycontainer/commons/util/XMLQueryTest.java"}, "test_case": {"identifier": "testFind", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testFind() {\n\t\tXMLQuery q = new XMLQuery(\n\t\t\t\t\"<r><a><inner>1</inner><inner>2</inner></a><b v=\\\"v1\\\"/><c v=\\\"v2\\\">i</c><d><inner>3</inner></d></r>\");\n\n\t\tassertEquals(\n\t\t\t\t\"<r><a><inner>1</inner><inner>2</inner></a><b v=\\\"v1\\\"/><c v=\\\"v2\\\">i</c><d><inner>3</inner></d></r>\",\n\t\t\t\tq.clone().find(\"//r\").toXML());\n\t\tassertEquals(\n\t\t\t\t\"<r><a><inner>1</inner><inner>2</inner></a><b v=\\\"v1\\\"/><c v=\\\"v2\\\">i</c><d><inner>3</inner></d></r>\",\n\t\t\t\tq.clone().find(\"./r\").toXML());\n\t\tassertEquals(\n\t\t\t\t\"<r><a><inner>1</inner><inner>2</inner></a><b v=\\\"v1\\\"/><c v=\\\"v2\\\">i</c><d><inner>3</inner></d></r>\",\n\t\t\t\tq.clone().find(\"r\").toXML());\n\t\tassertEquals(\n\t\t\t\t\"<r><a><inner>1</inner><inner>2</inner></a><b v=\\\"v1\\\"/><c v=\\\"v2\\\">i</c><d><inner>3</inner></d></r>\",\n\t\t\t\tq.clone().find(\"/r\").toXML());\n\t\tassertEquals(\"<a><inner>1</inner><inner>2</inner></a>\", q.clone().find(\"//a\").toXML());\n\t\tassertEquals(\"<inner>1</inner><inner>2</inner><inner>3</inner>\", q.clone().find(\"//inner\").toXML());\n\t\tassertEquals(\"<inner>2</inner>\", q.clone().find(\"//inner[2]\").toXML());\n\t\tassertEquals(\"<inner>1</inner><inner>2</inner>\", q.clone().find(\"//a/inner\").toXML());\n\t\tassertEquals(\"<inner>1</inner><inner>2</inner>\", q.clone().find(\"//a\").find(\"./inner\").toXML());\n\t\tassertEquals(\"<inner>1</inner><inner>2</inner>\", q.clone().find(\"//a\").find(\".//inner\").toXML());\n\t\tassertEquals(\"<inner>1</inner><inner>2</inner><inner>3</inner>\", q.clone().find(\"//r\").find(\".//inner\").toXML());\n\n\t\tassertEquals(\"<b v=\\\"v1\\\"/><c v=\\\"v2\\\">i</c>\", q.clone().find(\"//*[@v]\").toXML());\n\t\tassertEquals(\"[v=\\\"v1\\\", v=\\\"v2\\\"]\", q.clone().find(\"//*/@v\").toString());\n\t\tassertEquals(\"\", q.clone().find(\"//*/@v\").find(\"./a\").toXML());\n\n\t\tassertEquals(\"<b v=\\\"v1\\\"/>\", q.clone().find(\"//b\").find(\".\").toXML());\n\t\tassertEquals(\"[v=\\\"v1\\\"]\", q.clone().find(\"//b\").find(\"./@*\").toString());\n\t\tassertEquals(\"[v=\\\"v1\\\"]\", q.clone().find(\"//b\").find(\"@*\").toString());\n\n\t}", "signature": "void testFind()", "full_signature": "@Test public void testFind()", "class_method_signature": "XMLQueryTest.testFind()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toXML", "find", "clone", "assertEquals", "toXML", "find", "clone", "assertEquals", "toXML", "find", "clone", "assertEquals", "toXML", "find", "clone", "assertEquals", "toXML", "find", "clone", "assertEquals", "toXML", "find", "clone", "assertEquals", "toXML", "find", "clone", "assertEquals", "toXML", "find", "clone", "assertEquals", "toXML", "find", "find", "clone", "assertEquals", "toXML", "find", "find", "clone", "assertEquals", "toXML", "find", "find", "clone", "assertEquals", "toXML", "find", "clone", "assertEquals", "toString", "find", "clone", "assertEquals", "toXML", "find", "find", "clone", "assertEquals", "toXML", "find", "find", "clone", "assertEquals", "toString", "find", "find", "clone", "assertEquals", "toString", "find", "find", "clone"]}, "focal_class": {"identifier": "XMLQuery", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final List<Node> nodes;", "modifier": "private final", "type": "List<Node>", "declarator": "nodes", "var_name": "nodes"}], "methods": [{"identifier": "XMLQuery", "parameters": "()", "modifiers": "public", "return": "", "signature": " XMLQuery()", "full_signature": "public  XMLQuery()", "class_method_signature": "XMLQuery.XMLQuery()", "testcase": false, "constructor": true}, {"identifier": "XMLQuery", "parameters": "(List<Node> nodes)", "modifiers": "public", "return": "", "signature": " XMLQuery(List<Node> nodes)", "full_signature": "public  XMLQuery(List<Node> nodes)", "class_method_signature": "XMLQuery.XMLQuery(List<Node> nodes)", "testcase": false, "constructor": true}, {"identifier": "XMLQuery", "parameters": "(String xml)", "modifiers": "public", "return": "", "signature": " XMLQuery(String xml)", "full_signature": "public  XMLQuery(String xml)", "class_method_signature": "XMLQuery.XMLQuery(String xml)", "testcase": false, "constructor": true}, {"identifier": "getDocumentBuilder", "parameters": "()", "modifiers": "private", "return": "DocumentBuilder", "signature": "DocumentBuilder getDocumentBuilder()", "full_signature": "private DocumentBuilder getDocumentBuilder()", "class_method_signature": "XMLQuery.getDocumentBuilder()", "testcase": false, "constructor": false}, {"identifier": "getXPath", "parameters": "()", "modifiers": "private", "return": "XPath", "signature": "XPath getXPath()", "full_signature": "private XPath getXPath()", "class_method_signature": "XMLQuery.getXPath()", "testcase": false, "constructor": false}, {"identifier": "getTransformer", "parameters": "()", "modifiers": "private", "return": "Transformer", "signature": "Transformer getTransformer()", "full_signature": "private Transformer getTransformer()", "class_method_signature": "XMLQuery.getTransformer()", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(String xml)", "modifiers": "public", "return": "XMLQuery", "signature": "XMLQuery append(String xml)", "full_signature": "public XMLQuery append(String xml)", "class_method_signature": "XMLQuery.append(String xml)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(Node node)", "modifiers": "private", "return": "XMLQuery", "signature": "XMLQuery append(Node node)", "full_signature": "private XMLQuery append(Node node)", "class_method_signature": "XMLQuery.append(Node node)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "XMLQuery.toString()", "testcase": false, "constructor": false}, {"identifier": "toXML", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toXML()", "full_signature": "public String toXML()", "class_method_signature": "XMLQuery.toXML()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "public", "return": "XMLQuery", "signature": "XMLQuery clone()", "full_signature": "public XMLQuery clone()", "class_method_signature": "XMLQuery.clone()", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(String query)", "modifiers": "public", "return": "XMLQuery", "signature": "XMLQuery find(String query)", "full_signature": "public XMLQuery find(String query)", "class_method_signature": "XMLQuery.find(String query)", "testcase": false, "constructor": false}, {"identifier": "convertNodeList", "parameters": "(NodeList result, List<Node> nodes)", "modifiers": "private", "return": "List<Node>", "signature": "List<Node> convertNodeList(NodeList result, List<Node> nodes)", "full_signature": "private List<Node> convertNodeList(NodeList result, List<Node> nodes)", "class_method_signature": "XMLQuery.convertNodeList(NodeList result, List<Node> nodes)", "testcase": false, "constructor": false}, {"identifier": "text", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String text()", "full_signature": "public String text()", "class_method_signature": "XMLQuery.text()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "XMLQuery.size()", "testcase": false, "constructor": false}, {"identifier": "item", "parameters": "(int i)", "modifiers": "public", "return": "XMLQuery", "signature": "XMLQuery item(int i)", "full_signature": "public XMLQuery item(int i)", "class_method_signature": "XMLQuery.item(int i)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(int i)", "modifiers": "public", "return": "XMLQuery", "signature": "XMLQuery get(int i)", "full_signature": "public XMLQuery get(int i)", "class_method_signature": "XMLQuery.get(int i)", "testcase": false, "constructor": false}, {"identifier": "getContent", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getContent()", "full_signature": "public String getContent()", "class_method_signature": "XMLQuery.getContent()", "testcase": false, "constructor": false}, {"identifier": "getContent", "parameters": "(String parent)", "modifiers": "public", "return": "String", "signature": "String getContent(String parent)", "full_signature": "public String getContent(String parent)", "class_method_signature": "XMLQuery.getContent(String parent)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(List<Node> nodes)", "modifiers": "public static", "return": "XMLQuery", "signature": "XMLQuery create(List<Node> nodes)", "full_signature": "public static XMLQuery create(List<Node> nodes)", "class_method_signature": "XMLQuery.create(List<Node> nodes)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(byte[] xml, boolean ns)", "modifiers": "public static", "return": "XMLQuery", "signature": "XMLQuery parse(byte[] xml, boolean ns)", "full_signature": "public static XMLQuery parse(byte[] xml, boolean ns)", "class_method_signature": "XMLQuery.parse(byte[] xml, boolean ns)", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "(Comparator<XMLQuery> comparator)", "modifiers": "public", "return": "void", "signature": "void sort(Comparator<XMLQuery> comparator)", "full_signature": "public void sort(Comparator<XMLQuery> comparator)", "class_method_signature": "XMLQuery.sort(Comparator<XMLQuery> comparator)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Node... list)", "modifiers": "public static", "return": "XMLQuery", "signature": "XMLQuery create(Node... list)", "full_signature": "public static XMLQuery create(Node... list)", "class_method_signature": "XMLQuery.create(Node... list)", "testcase": false, "constructor": false}], "file": "mycontainer-components/mycontainer-commons/src/main/java/com/googlecode/mycontainer/commons/util/XMLQuery.java"}, "focal_method": {"identifier": "find", "parameters": "(String query)", "modifiers": "public", "return": "XMLQuery", "body": "public XMLQuery find(String query) {\n\t\ttry {\n\t\t\tXPath xpath = getXPath();\n\t\t\tXPathExpression expr = xpath.compile(query);\n\t\t\tXMLQuery ret = new XMLQuery();\n\t\t\tfor (Node node : this.nodes) {\n\t\t\t\tNodeList result = (NodeList) expr.evaluate(node, XPathConstants.NODESET);\n\t\t\t\tconvertNodeList(result, ret.nodes);\n\t\t\t}\n\t\t\treturn ret;\n\t\t} catch (XPathExpressionException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}", "signature": "XMLQuery find(String query)", "full_signature": "public XMLQuery find(String query)", "class_method_signature": "XMLQuery.find(String query)", "testcase": false, "constructor": false, "invocations": ["getXPath", "compile", "evaluate", "convertNodeList"]}, "repository": {"repo_id": 9149127, "url": "https://github.com/murer/mycontainer", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 13, "size": 1353, "license": "licensed"}}