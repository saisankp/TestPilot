{"test_class": {"identifier": "TestPerformanceMonitorAspect", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PerformanceMonitorAspect aspect;", "modifier": "private", "type": "PerformanceMonitorAspect", "declarator": "aspect", "var_name": "aspect"}, {"original_string": "PerformanceMonitor mockAnnotation;", "modifier": "", "type": "PerformanceMonitor", "declarator": "mockAnnotation", "var_name": "mockAnnotation"}, {"original_string": "Signature mockSignature;", "modifier": "", "type": "Signature", "declarator": "mockSignature", "var_name": "mockSignature"}, {"original_string": "private static final String TEST_MONITOR = \"TestMonitor\";", "modifier": "private static final", "type": "String", "declarator": "TEST_MONITOR = \"TestMonitor\"", "var_name": "TEST_MONITOR"}], "file": "jrugged-aspects/src/test/java/org/fishwife/jrugged/aspects/TestPerformanceMonitorAspect.java"}, "test_case": {"identifier": "testMonitor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMonitor() throws Throwable {\n        ProceedingJoinPoint mockPjp = createPjpMock(mockSignature, 2);\n        expect(mockPjp.proceed()).andReturn(null).times(2);\n        replay(mockPjp);\n\n        // Test monitor without pre-existing perf monitor.\n        aspect.monitor(mockPjp, mockAnnotation);\n\n        // Test monitor with pre-existing perf monitor.\n        aspect.monitor(mockPjp, mockAnnotation);\n\n        String otherMonitor = \"OtherMonitor\";\n\n        ProceedingJoinPoint otherMockPjp = createPjpMock(mockSignature, 1);\n        expect(otherMockPjp.proceed()).andReturn(null).times(1);\n        replay(otherMockPjp);\n\n        PerformanceMonitor otherMockAnnotation = createMock(PerformanceMonitor.class);\n        expect(otherMockAnnotation.value()).andReturn(otherMonitor);\n        replay(otherMockAnnotation);\n\n        // Test monitor with another perf monitor.\n        aspect.monitor(otherMockPjp, otherMockAnnotation);\n\n        verifyMonitor(TEST_MONITOR, 2, 0);\n        verifyMonitor(otherMonitor, 1, 0);\n\n        verify(mockPjp);\n        verify(mockAnnotation);\n        verify(mockSignature);\n        verify(otherMockPjp);\n        verify(otherMockAnnotation);\n    }", "signature": "void testMonitor()", "full_signature": "@Test public void testMonitor()", "class_method_signature": "TestPerformanceMonitorAspect.testMonitor()", "testcase": true, "constructor": false, "invocations": ["createPjpMock", "times", "andReturn", "expect", "proceed", "replay", "monitor", "monitor", "createPjpMock", "times", "andReturn", "expect", "proceed", "replay", "createMock", "andReturn", "expect", "value", "replay", "monitor", "verifyMonitor", "verifyMonitor", "verify", "verify", "verify", "verify", "verify"]}, "focal_class": {"identifier": "PerformanceMonitorAspect", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger =\n            LoggerFactory.getLogger(PerformanceMonitorAspect.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger =\n            LoggerFactory.getLogger(PerformanceMonitorAspect.class)", "var_name": "logger"}, {"original_string": "private volatile PerformanceMonitorFactory performanceMonitorFactory;", "modifier": "private volatile", "type": "PerformanceMonitorFactory", "declarator": "performanceMonitorFactory", "var_name": "performanceMonitorFactory"}], "methods": [{"identifier": "PerformanceMonitorAspect", "parameters": "()", "modifiers": "public", "return": "", "signature": " PerformanceMonitorAspect()", "full_signature": "public  PerformanceMonitorAspect()", "class_method_signature": "PerformanceMonitorAspect.PerformanceMonitorAspect()", "testcase": false, "constructor": true}, {"identifier": "setPerformanceMonitorFactory", "parameters": "(\n            PerformanceMonitorFactory performanceMonitorFactory)", "modifiers": "public", "return": "void", "signature": "void setPerformanceMonitorFactory(\n            PerformanceMonitorFactory performanceMonitorFactory)", "full_signature": "public void setPerformanceMonitorFactory(\n            PerformanceMonitorFactory performanceMonitorFactory)", "class_method_signature": "PerformanceMonitorAspect.setPerformanceMonitorFactory(\n            PerformanceMonitorFactory performanceMonitorFactory)", "testcase": false, "constructor": false}, {"identifier": "getPerformanceMonitorFactory", "parameters": "()", "modifiers": "public", "return": "PerformanceMonitorFactory", "signature": "PerformanceMonitorFactory getPerformanceMonitorFactory()", "full_signature": "public PerformanceMonitorFactory getPerformanceMonitorFactory()", "class_method_signature": "PerformanceMonitorAspect.getPerformanceMonitorFactory()", "testcase": false, "constructor": false}, {"identifier": "monitor", "parameters": "(final ProceedingJoinPoint pjp,\n            PerformanceMonitor performanceMonitorAnnotation)", "modifiers": "@Around(\"@annotation(performanceMonitorAnnotation)\") public", "return": "Object", "signature": "Object monitor(final ProceedingJoinPoint pjp,\n            PerformanceMonitor performanceMonitorAnnotation)", "full_signature": "@Around(\"@annotation(performanceMonitorAnnotation)\") public Object monitor(final ProceedingJoinPoint pjp,\n            PerformanceMonitor performanceMonitorAnnotation)", "class_method_signature": "PerformanceMonitorAspect.monitor(final ProceedingJoinPoint pjp,\n            PerformanceMonitor performanceMonitorAnnotation)", "testcase": false, "constructor": false}], "file": "jrugged-aspects/src/main/java/org/fishwife/jrugged/aspects/PerformanceMonitorAspect.java"}, "focal_method": {"identifier": "monitor", "parameters": "(final ProceedingJoinPoint pjp,\n            PerformanceMonitor performanceMonitorAnnotation)", "modifiers": "@Around(\"@annotation(performanceMonitorAnnotation)\") public", "return": "Object", "body": "@Around(\"@annotation(performanceMonitorAnnotation)\")\n    public Object monitor(final ProceedingJoinPoint pjp,\n            PerformanceMonitor performanceMonitorAnnotation) throws Throwable {\n        String monitorName = performanceMonitorAnnotation.value();\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Have @PerformanceMonitor method with monitor name {}, \" +\n                    \"wrapping call on method {} of target object {}\",\n                    new Object[]{\n                            monitorName,\n                            pjp.getSignature().getName(),\n                            pjp.getTarget()});\n        }\n\n        org.fishwife.jrugged.PerformanceMonitor performanceMonitor =\n                performanceMonitorFactory.findPerformanceMonitor(\n                            monitorName);\n\n        if (performanceMonitor == null) {\n            performanceMonitor =\n                    performanceMonitorFactory.createPerformanceMonitor(\n                            monitorName);\n        }\n\n        return performanceMonitor.invoke(\n                new Callable<Object>() {\n                    public Object call() throws Exception {\n                        Object retval;\n                        try {\n                            retval = pjp.proceed();\n                        } catch (Throwable e) {\n                            if (e instanceof Exception) {\n                                throw (Exception) e;\n                            } else {\n                                throw (Error) e;\n                            }\n                        }\n                        return retval;\n                    }\n                }\n        );\n    }", "signature": "Object monitor(final ProceedingJoinPoint pjp,\n            PerformanceMonitor performanceMonitorAnnotation)", "full_signature": "@Around(\"@annotation(performanceMonitorAnnotation)\") public Object monitor(final ProceedingJoinPoint pjp,\n            PerformanceMonitor performanceMonitorAnnotation)", "class_method_signature": "PerformanceMonitorAspect.monitor(final ProceedingJoinPoint pjp,\n            PerformanceMonitor performanceMonitorAnnotation)", "testcase": false, "constructor": false, "invocations": ["value", "isDebugEnabled", "debug", "getName", "getSignature", "getTarget", "findPerformanceMonitor", "createPerformanceMonitor", "invoke", "proceed"]}, "repository": {"repo_id": 6602723, "url": "https://github.com/Comcast/jrugged", "language": "Java", "is_fork": false, "fork_count": 90, "stargazer_count": 236, "size": 1302, "license": "licensed"}}