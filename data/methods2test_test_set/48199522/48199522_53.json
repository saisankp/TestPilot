{"test_class": {"identifier": "DPGMMTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(DPGMMTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(DPGMMTest.class)", "var_name": "log"}], "file": "contrib/src/test/java/macrobase/analysis/stats/mixture/DPGMMTest.java"}, "test_case": {"identifier": "bivariateOkSeparatedNormalTest", "parameters": "()", "modifiers": "@Test /** * Tests Gaussian Mixture Model on a three not so well separated clusters. */ public", "return": "void", "body": "@Test\n    /**\n     * Tests Gaussian Mixture Model on a three not so well separated clusters.\n     */\n    public void bivariateOkSeparatedNormalTest() throws Exception {\n        MacroBaseConf conf = new MacroBaseConf()\n                .set(MacroBaseConf.RANDOM_SEED, 4)\n                .set(MacroBaseConf.TRANSFORM_TYPE, \"VARIATIONAL_DPMM\")\n                .set(GMMConf.MAX_ITERATIONS_TO_CONVERGE, 15)\n                .set(GMMConf.DPM_TRUNCATING_PARAMETER, 20)\n                .set(GMMConf.DPM_CONCENTRATION_PARAMETER, 0.1)\n                .set(GMMConf.NUM_MIXTURES, 3)\n                .set(MacroBaseConf.DATA_LOADER_TYPE, \"CSV_LOADER\")\n                .set(MacroBaseConf.CSV_COMPRESSION, CSVIngester.Compression.GZIP)\n                .set(MacroBaseConf.CSV_INPUT_FILE, \"src/test/resources/data/3gaussians-7000points.csv.gz\")\n                .set(MacroBaseConf.METRICS, \"XX, YY\")\n                .set(MacroBaseConf.ATTRIBUTES, \"\");\n        List<Datum> data = conf.constructIngester().getStream().drain();\n        assertEquals(7000, data.size());\n\n        double[][] clusterMeans = {\n                {1.5, 2},\n                {2, 0},\n                {4.5, 1},\n        };\n        List<RealVector> vectorClusterMeans = new ArrayList<>(3);\n        for (int k = 0; k < 3; k++) {\n            vectorClusterMeans.add(new ArrayRealVector(clusterMeans[k]));\n        }\n        double[][][] clusterCovariances = {\n                {{0.5, 0.4}, {0.4, 0.5}},\n                {{0.3, 0}, {0, 0.6}},\n                {{0.9, 0.2}, {0.2, 0.3}},\n        };\n\n        double[][] boundaries = {\n                {0, 6.01},\n                {-2, 4.01},\n        };\n\n        DPGMM variationalDPGM = new DPGMM(conf);\n        variationalDPGM.train(data);\n\n        JsonUtils.dumpAsJson(variationalDPGM.getClusterCovariances(), \"DPGMMTest-bivariateOkSeparatedNormalTest-covariances.json\");\n        JsonUtils.dumpAsJson(variationalDPGM.getClusterCenters(), \"DPGMMTest-bivariateOkSeparatedNormalTest-means.json\");\n        JsonUtils.dumpAsJson(variationalDPGM.getClusterProportions(), \"DPGMMTest-bivariateOkSeparatedNormalTest-weights.json\");\n\n        conf.set(GMMConf.SCORE_DUMP_FILE_CONFIG_PARAM, \"3gaussians-7k-grid.json\");\n        ScoreDumper dumper = new ScoreDumper(conf);\n        dumper.dumpScores(variationalDPGM, boundaries, 0.05);\n\n        conf.set(GMMConf.SCORE_DUMP_FILE_CONFIG_PARAM, \"3gaussians-7k-data.json\");\n        dumper = new ScoreDumper(conf);\n        dumper.dumpScores(variationalDPGM, data);\n    }", "signature": "void bivariateOkSeparatedNormalTest()", "full_signature": "@Test /** * Tests Gaussian Mixture Model on a three not so well separated clusters. */ public void bivariateOkSeparatedNormalTest()", "class_method_signature": "DPGMMTest.bivariateOkSeparatedNormalTest()", "testcase": true, "constructor": false, "invocations": ["set", "set", "set", "set", "set", "set", "set", "set", "set", "set", "set", "drain", "getStream", "constructIngester", "assertEquals", "size", "add", "train", "dumpAsJson", "getClusterCovariances", "dumpAsJson", "getClusterCenters", "dumpAsJson", "getClusterProportions", "set", "dumpScores", "set", "dumpScores"]}, "focal_class": {"identifier": "DPGMM", "superclass": "extends VarGMM", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(DPGMM.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(DPGMM.class)", "var_name": "log"}, {"original_string": "protected DPComponents mixingComponents;", "modifier": "protected", "type": "DPComponents", "declarator": "mixingComponents", "var_name": "mixingComponents"}, {"original_string": "protected final int T;", "modifier": "protected final", "type": "int", "declarator": "T", "var_name": "T"}], "methods": [{"identifier": "DPGMM", "parameters": "(MacroBaseConf conf)", "modifiers": "public", "return": "", "signature": " DPGMM(MacroBaseConf conf)", "full_signature": "public  DPGMM(MacroBaseConf conf)", "class_method_signature": "DPGMM.DPGMM(MacroBaseConf conf)", "testcase": false, "constructor": true}, {"identifier": "trainTest", "parameters": "(List<Datum> trainData, List<Datum> testData)", "modifiers": "public", "return": "void", "signature": "void trainTest(List<Datum> trainData, List<Datum> testData)", "full_signature": "public void trainTest(List<Datum> trainData, List<Datum> testData)", "class_method_signature": "DPGMM.trainTest(List<Datum> trainData, List<Datum> testData)", "testcase": false, "constructor": false}, {"identifier": "getClusterProportions", "parameters": "()", "modifiers": "@Override public", "return": "double[]", "signature": "double[] getClusterProportions()", "full_signature": "@Override public double[] getClusterProportions()", "class_method_signature": "DPGMM.getClusterProportions()", "testcase": false, "constructor": false}, {"identifier": "getNormClusterContrib", "parameters": "()", "modifiers": "@Override protected", "return": "double[]", "signature": "double[] getNormClusterContrib()", "full_signature": "@Override protected double[] getNormClusterContrib()", "class_method_signature": "DPGMM.getNormClusterContrib()", "testcase": false, "constructor": false}], "file": "contrib/src/main/java/macrobase/analysis/stats/mixture/DPGMM.java"}, "focal_method": {"identifier": "getClusterProportions", "parameters": "()", "modifiers": "@Override public", "return": "double[]", "body": "@Override\n    public double[] getClusterProportions() {\n        return mixingComponents.getNormalizedClusterProportions();\n    }", "signature": "double[] getClusterProportions()", "full_signature": "@Override public double[] getClusterProportions()", "class_method_signature": "DPGMM.getClusterProportions()", "testcase": false, "constructor": false, "invocations": ["getNormalizedClusterProportions"]}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}