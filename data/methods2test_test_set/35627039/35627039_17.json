{"test_class": {"identifier": "AmbariInfraWithStormLogSearchTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String TEST_SOLR_API_PATH = \"/solr\";", "modifier": "private final", "type": "String", "declarator": "TEST_SOLR_API_PATH = \"/solr\"", "var_name": "TEST_SOLR_API_PATH"}, {"original_string": "private final String TEST_COLLECTION_NAME = \"test_collection\";", "modifier": "private final", "type": "String", "declarator": "TEST_COLLECTION_NAME = \"test_collection\"", "var_name": "TEST_COLLECTION_NAME"}, {"original_string": "private final String STUB_REQUEST_API_PATH = TEST_SOLR_API_PATH + \"/\" + TEST_COLLECTION_NAME + \"/select\";", "modifier": "private final", "type": "String", "declarator": "STUB_REQUEST_API_PATH = TEST_SOLR_API_PATH + \"/\" + TEST_COLLECTION_NAME + \"/select\"", "var_name": "STUB_REQUEST_API_PATH"}, {"original_string": "private AmbariInfraWithStormLogSearch logSearch;", "modifier": "private", "type": "AmbariInfraWithStormLogSearch", "declarator": "logSearch", "var_name": "logSearch"}, {"original_string": "private String buildTestSolrApiUrl;", "modifier": "private", "type": "String", "declarator": "buildTestSolrApiUrl", "var_name": "buildTestSolrApiUrl"}, {"original_string": "@Rule\n    public WireMockRule wireMockRule = new WireMockRule(18886);", "modifier": "@Rule\n    public", "type": "WireMockRule", "declarator": "wireMockRule = new WireMockRule(18886)", "var_name": "wireMockRule"}, {"original_string": "public static final String TEST_APP_ID = \"1\";", "modifier": "public static final", "type": "String", "declarator": "TEST_APP_ID = \"1\"", "var_name": "TEST_APP_ID"}, {"original_string": "public static final long TEST_FROM = System.currentTimeMillis() - (1000 * 60 * 30);", "modifier": "public static final", "type": "long", "declarator": "TEST_FROM = System.currentTimeMillis() - (1000 * 60 * 30)", "var_name": "TEST_FROM"}, {"original_string": "public static final long TEST_TO = System.currentTimeMillis();", "modifier": "public static final", "type": "long", "declarator": "TEST_TO = System.currentTimeMillis()", "var_name": "TEST_TO"}], "file": "streams/runners/storm/logsearch/src/test/java/com/hortonworks/streamline/streams/logsearch/storm/ambari/AmbariInfraWithStormLogSearchTest.java"}, "test_case": {"identifier": "testLogSearchWithSingleComponentNameAndLogLevelParameters", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLogSearchWithSingleComponentNameAndLogLevelParameters() throws Exception {\n        stubSolrUrl();\n\n        int testStart = 100;\n        int testLimit = 2000;\n        List<String> testLogLevels = Collections.singletonList(\"INFO\");\n        String testSearchString = \"helloworld\";\n        List<String> testComponentNames = Collections.singletonList(\"testComponent\");\n\n        LogSearchCriteria logSearchCriteria = new LogSearchCriteria.Builder(TEST_APP_ID, TEST_FROM, TEST_TO)\n            .setLogLevels(testLogLevels)\n            .setSearchString(testSearchString)\n            .setComponentNames(testComponentNames)\n            .setStart(testStart)\n            .setLimit(testLimit)\n            .build();\n\n        LogSearchResult result = logSearch.search(logSearchCriteria);\n\n        // note that the result doesn't change given that we just provide same result from file\n        verifyLogSearchResults(result);\n\n        // others are covered from testLogSearchWithFullParameters()\n\n        List<LoggedRequest> requests = wireMockRule.findAll(getRequestedFor(urlPathEqualTo(STUB_REQUEST_API_PATH)));\n        assertEquals(1, requests.size());\n\n        LoggedRequest request = requests.get(0);\n\n        QueryParameter fqParam = request.queryParameter(\"fq\");\n        assertTrue(fqParam.containsValue(COLUMN_NAME_STREAMLINE_COMPONENT_NAME + \":\" + testComponentNames.get(0)));\n        assertTrue(fqParam.containsValue(COLUMN_NAME_TYPE + \":\" + COLUMN_VALUE_TYPE_WORKER_LOG));\n        assertTrue(fqParam.containsValue(COLUMN_NAME_LOG_LEVEL + \":\" + testLogLevels.get(0)));\n    }", "signature": "void testLogSearchWithSingleComponentNameAndLogLevelParameters()", "full_signature": "@Test public void testLogSearchWithSingleComponentNameAndLogLevelParameters()", "class_method_signature": "AmbariInfraWithStormLogSearchTest.testLogSearchWithSingleComponentNameAndLogLevelParameters()", "testcase": true, "constructor": false, "invocations": ["stubSolrUrl", "singletonList", "singletonList", "build", "setLimit", "setStart", "setComponentNames", "setSearchString", "setLogLevels", "search", "verifyLogSearchResults", "findAll", "getRequestedFor", "urlPathEqualTo", "assertEquals", "size", "get", "queryParameter", "assertTrue", "containsValue", "get", "assertTrue", "containsValue", "assertTrue", "containsValue", "get"]}, "focal_class": {"identifier": "AmbariInfraWithStormLogSearch", "superclass": "", "interfaces": "implements TopologyLogSearch", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(AmbariInfraWithStormLogSearch.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(AmbariInfraWithStormLogSearch.class)", "var_name": "LOG"}, {"original_string": "static final String SOLR_API_URL_KEY = \"solrApiUrl\";", "modifier": "static final", "type": "String", "declarator": "SOLR_API_URL_KEY = \"solrApiUrl\"", "var_name": "SOLR_API_URL_KEY"}, {"original_string": "static final String COLLECTION_NAME = \"collection\";", "modifier": "static final", "type": "String", "declarator": "COLLECTION_NAME = \"collection\"", "var_name": "COLLECTION_NAME"}, {"original_string": "static final String SECURED_CLUSTER = \"secured\";", "modifier": "static final", "type": "String", "declarator": "SECURED_CLUSTER = \"secured\"", "var_name": "SECURED_CLUSTER"}, {"original_string": "public static final String COLUMN_NAME_TYPE = \"type\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_NAME_TYPE = \"type\"", "var_name": "COLUMN_NAME_TYPE"}, {"original_string": "public static final String COLUMN_VALUE_TYPE_WORKER_LOG = \"storm_worker\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_VALUE_TYPE_WORKER_LOG = \"storm_worker\"", "var_name": "COLUMN_VALUE_TYPE_WORKER_LOG"}, {"original_string": "public static final String COLUMN_VALUE_TYPE_EVENT = \"storm_worker_event\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_VALUE_TYPE_EVENT = \"storm_worker_event\"", "var_name": "COLUMN_VALUE_TYPE_EVENT"}, {"original_string": "public static final String COLUMN_NAME_STREAMLINE_TOPOLOGY_ID = \"sdi_streamline_topology_id\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_NAME_STREAMLINE_TOPOLOGY_ID = \"sdi_streamline_topology_id\"", "var_name": "COLUMN_NAME_STREAMLINE_TOPOLOGY_ID"}, {"original_string": "public static final String COLUMN_NAME_STREAMLINE_COMPONENT_NAME = \"sdi_streamline_component_name\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_NAME_STREAMLINE_COMPONENT_NAME = \"sdi_streamline_component_name\"", "var_name": "COLUMN_NAME_STREAMLINE_COMPONENT_NAME"}, {"original_string": "public static final String COLUMN_NAME_STORM_WORKER_PORT = \"sdi_storm_worker_port\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_NAME_STORM_WORKER_PORT = \"sdi_storm_worker_port\"", "var_name": "COLUMN_NAME_STORM_WORKER_PORT"}, {"original_string": "public static final String COLUMN_NAME_HOST = \"host\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_NAME_HOST = \"host\"", "var_name": "COLUMN_NAME_HOST"}, {"original_string": "public static final String COLUMN_NAME_LOG_TIME = \"logtime\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_NAME_LOG_TIME = \"logtime\"", "var_name": "COLUMN_NAME_LOG_TIME"}, {"original_string": "public static final String COLUMN_NAME_LOG_LEVEL = \"level\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_NAME_LOG_LEVEL = \"level\"", "var_name": "COLUMN_NAME_LOG_LEVEL"}, {"original_string": "public static final String COLUMN_NAME_LOG_MESSAGE = \"log_message\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_NAME_LOG_MESSAGE = \"log_message\"", "var_name": "COLUMN_NAME_LOG_MESSAGE"}, {"original_string": "public static final String COLUMN_NAME_STREAMLINE_EVENT_ID = \"sdi_streamline_event_id\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_NAME_STREAMLINE_EVENT_ID = \"sdi_streamline_event_id\"", "var_name": "COLUMN_NAME_STREAMLINE_EVENT_ID"}, {"original_string": "public static final String COLUMN_NAME_STREAMLINE_EVENT_ROOT_ID_SET = \"sdi_streamline_root_ids\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_NAME_STREAMLINE_EVENT_ROOT_ID_SET = \"sdi_streamline_root_ids\"", "var_name": "COLUMN_NAME_STREAMLINE_EVENT_ROOT_ID_SET"}, {"original_string": "public static final String COLUMN_NAME_STREAMLINE_EVENT_PARENT_ID_SET = \"sdi_streamline_parent_ids\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_NAME_STREAMLINE_EVENT_PARENT_ID_SET = \"sdi_streamline_parent_ids\"", "var_name": "COLUMN_NAME_STREAMLINE_EVENT_PARENT_ID_SET"}, {"original_string": "public static final String COLUMN_NAME_STREAMLINE_EVENT_KEYVALUES = \"sdi_streamline_event_fields_and_values\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_NAME_STREAMLINE_EVENT_KEYVALUES = \"sdi_streamline_event_fields_and_values\"", "var_name": "COLUMN_NAME_STREAMLINE_EVENT_KEYVALUES"}, {"original_string": "public static final String COLUMN_NAME_STREAMLINE_EVENT_HEADERS = \"sdi_streamline_event_headers\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_NAME_STREAMLINE_EVENT_HEADERS = \"sdi_streamline_event_headers\"", "var_name": "COLUMN_NAME_STREAMLINE_EVENT_HEADERS"}, {"original_string": "public static final String COLUMN_NAME_STREAMLINE_EVENT_AUX_KEYVALUES = \"sdi_streamline_event_aux_fields_and_values\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_NAME_STREAMLINE_EVENT_AUX_KEYVALUES = \"sdi_streamline_event_aux_fields_and_values\"", "var_name": "COLUMN_NAME_STREAMLINE_EVENT_AUX_KEYVALUES"}, {"original_string": "public static final String DEFAULT_COLLECTION_NAME = \"hadoop_logs\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_COLLECTION_NAME = \"hadoop_logs\"", "var_name": "DEFAULT_COLLECTION_NAME"}, {"original_string": "static final List<String> DEFAULT_LOG_LEVELS = Lists.newArrayList(\"INFO\", \"WARN\", \"ERROR\");", "modifier": "static final", "type": "List<String>", "declarator": "DEFAULT_LOG_LEVELS = Lists.newArrayList(\"INFO\", \"WARN\", \"ERROR\")", "var_name": "DEFAULT_LOG_LEVELS"}, {"original_string": "private HttpSolrClient solr;", "modifier": "private", "type": "HttpSolrClient", "declarator": "solr", "var_name": "solr"}], "methods": [{"identifier": "AmbariInfraWithStormLogSearch", "parameters": "()", "modifiers": "public", "return": "", "signature": " AmbariInfraWithStormLogSearch()", "full_signature": "public  AmbariInfraWithStormLogSearch()", "class_method_signature": "AmbariInfraWithStormLogSearch.AmbariInfraWithStormLogSearch()", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(Map<String, Object> conf)", "modifiers": "@Override public", "return": "void", "signature": "void init(Map<String, Object> conf)", "full_signature": "@Override public void init(Map<String, Object> conf)", "class_method_signature": "AmbariInfraWithStormLogSearch.init(Map<String, Object> conf)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(LogSearchCriteria logSearchCriteria)", "modifiers": "@Override public", "return": "LogSearchResult", "signature": "LogSearchResult search(LogSearchCriteria logSearchCriteria)", "full_signature": "@Override public LogSearchResult search(LogSearchCriteria logSearchCriteria)", "class_method_signature": "AmbariInfraWithStormLogSearch.search(LogSearchCriteria logSearchCriteria)", "testcase": false, "constructor": false}, {"identifier": "searchEvent", "parameters": "(EventSearchCriteria criteria)", "modifiers": "@Override public", "return": "EventSearchResult", "signature": "EventSearchResult searchEvent(EventSearchCriteria criteria)", "full_signature": "@Override public EventSearchResult searchEvent(EventSearchCriteria criteria)", "class_method_signature": "AmbariInfraWithStormLogSearch.searchEvent(EventSearchCriteria criteria)", "testcase": false, "constructor": false}, {"identifier": "addQueryStringToListOnlyIfAvailable", "parameters": "(List<String> queryStrings, String searchString, String columnName)", "modifiers": "private", "return": "void", "signature": "void addQueryStringToListOnlyIfAvailable(List<String> queryStrings, String searchString, String columnName)", "full_signature": "private void addQueryStringToListOnlyIfAvailable(List<String> queryStrings, String searchString, String columnName)", "class_method_signature": "AmbariInfraWithStormLogSearch.addQueryStringToListOnlyIfAvailable(List<String> queryStrings, String searchString, String columnName)", "testcase": false, "constructor": false}, {"identifier": "buildColumnAndValue", "parameters": "(String column, String value)", "modifiers": "private", "return": "String", "signature": "String buildColumnAndValue(String column, String value)", "full_signature": "private String buildColumnAndValue(String column, String value)", "class_method_signature": "AmbariInfraWithStormLogSearch.buildColumnAndValue(String column, String value)", "testcase": false, "constructor": false}, {"identifier": "buildORValues", "parameters": "(List<String> values)", "modifiers": "private", "return": "String", "signature": "String buildORValues(List<String> values)", "full_signature": "private String buildORValues(List<String> values)", "class_method_signature": "AmbariInfraWithStormLogSearch.buildORValues(List<String> values)", "testcase": false, "constructor": false}, {"identifier": "buildValue", "parameters": "(String value)", "modifiers": "private", "return": "String", "signature": "String buildValue(String value)", "full_signature": "private String buildValue(String value)", "class_method_signature": "AmbariInfraWithStormLogSearch.buildValue(String value)", "testcase": false, "constructor": false}, {"identifier": "buildDateRangeValue", "parameters": "(long from, long to)", "modifiers": "private", "return": "String", "signature": "String buildDateRangeValue(long from, long to)", "full_signature": "private String buildDateRangeValue(long from, long to)", "class_method_signature": "AmbariInfraWithStormLogSearch.buildDateRangeValue(long from, long to)", "testcase": false, "constructor": false}], "file": "streams/runners/storm/logsearch/src/main/java/com/hortonworks/streamline/streams/logsearch/storm/ambari/AmbariInfraWithStormLogSearch.java"}, "focal_method": {"identifier": "search", "parameters": "(LogSearchCriteria logSearchCriteria)", "modifiers": "@Override public", "return": "LogSearchResult", "body": "@Override\n    public LogSearchResult search(LogSearchCriteria logSearchCriteria) {\n        SolrQuery query = new SolrQuery();\n\n        query.setQuery(buildColumnAndValue(COLUMN_NAME_LOG_MESSAGE, buildValue(logSearchCriteria.getSearchString())));\n        query.addFilterQuery(buildColumnAndValue(COLUMN_NAME_TYPE, COLUMN_VALUE_TYPE_WORKER_LOG));\n        query.addFilterQuery(buildColumnAndValue(COLUMN_NAME_STREAMLINE_TOPOLOGY_ID, buildValue(logSearchCriteria.getAppId())));\n        query.addFilterQuery(buildColumnAndValue(COLUMN_NAME_LOG_TIME, buildDateRangeValue(logSearchCriteria.getFrom(), logSearchCriteria.getTo())));\n\n        List<String> componentNames = logSearchCriteria.getComponentNames();\n        if (componentNames != null && !componentNames.isEmpty()) {\n            query.addFilterQuery(buildColumnAndValue(COLUMN_NAME_STREAMLINE_COMPONENT_NAME, buildORValues(componentNames)));\n        }\n\n        List<String> logLevels = logSearchCriteria.getLogLevels();\n        if (logLevels == null || logLevels.isEmpty()) {\n            logLevels = DEFAULT_LOG_LEVELS;\n        }\n        query.addFilterQuery(buildColumnAndValue(COLUMN_NAME_LOG_LEVEL, buildORValues(logLevels)));\n\n        if (logSearchCriteria.getAscending() == null || logSearchCriteria.getAscending()) {\n            query.addSort(COLUMN_NAME_LOG_TIME, SolrQuery.ORDER.asc);\n        } else {\n            query.addSort(COLUMN_NAME_LOG_TIME, SolrQuery.ORDER.desc);\n        }\n\n        if (logSearchCriteria.getStart() != null) {\n            query.setStart(logSearchCriteria.getStart());\n        }\n        if (logSearchCriteria.getLimit() != null) {\n            query.setRows(logSearchCriteria.getLimit());\n        }\n\n        LOG.debug(\"Querying to Solr: query => {}\", query);\n\n        long numFound;\n        List<LogSearchResult.LogDocument> results = new ArrayList<>();\n        try {\n            QueryResponse response = solr.query(query);\n\n            SolrDocumentList docList = response.getResults();\n            numFound = docList.getNumFound();\n\n            for (SolrDocument document : docList) {\n                String appId = (String) document.getFieldValue(COLUMN_NAME_STREAMLINE_TOPOLOGY_ID);\n                String componentName = (String) document.getFieldValue(COLUMN_NAME_STREAMLINE_COMPONENT_NAME);\n                String logLevel = (String) document.getFieldValue(COLUMN_NAME_LOG_LEVEL);\n                String logMessage = (String) document.getFieldValue(COLUMN_NAME_LOG_MESSAGE);\n                String host = (String) document.getFieldValue(COLUMN_NAME_HOST);\n                String port = (String) document.getFieldValue(COLUMN_NAME_STORM_WORKER_PORT);\n                Date logDate = (Date) document.getFieldValue(COLUMN_NAME_LOG_TIME);\n                long timestamp = logDate.toInstant().toEpochMilli();\n\n                LogSearchResult.LogDocument logDocument = new LogSearchResult.LogDocument(appId, componentName,\n                        logLevel, logMessage, host, port != null ? Integer.parseInt(port) : null, timestamp);\n                results.add(logDocument);\n            }\n\n        } catch (SolrServerException | IOException e) {\n            // TODO: any fine-grained control needed?\n            throw new RuntimeException(e);\n        }\n\n        return new LogSearchResult(numFound, results);\n    }", "signature": "LogSearchResult search(LogSearchCriteria logSearchCriteria)", "full_signature": "@Override public LogSearchResult search(LogSearchCriteria logSearchCriteria)", "class_method_signature": "AmbariInfraWithStormLogSearch.search(LogSearchCriteria logSearchCriteria)", "testcase": false, "constructor": false, "invocations": ["setQuery", "buildColumnAndValue", "buildValue", "getSearchString", "addFilterQuery", "buildColumnAndValue", "addFilterQuery", "buildColumnAndValue", "buildValue", "getAppId", "addFilterQuery", "buildColumnAndValue", "buildDateRangeValue", "getFrom", "getTo", "getComponentNames", "isEmpty", "addFilterQuery", "buildColumnAndValue", "buildORValues", "getLogLevels", "isEmpty", "addFilterQuery", "buildColumnAndValue", "buildORValues", "getAscending", "getAscending", "addSort", "addSort", "getStart", "setStart", "getStart", "getLimit", "setRows", "getLimit", "debug", "query", "getResults", "getNumFound", "getFieldValue", "getFieldValue", "getFieldValue", "getFieldValue", "getFieldValue", "getFieldValue", "getFieldValue", "toEpochMilli", "toInstant", "parseInt", "add"]}, "repository": {"repo_id": 35627039, "url": "https://github.com/hortonworks/streamline", "language": "Java", "is_fork": false, "fork_count": 94, "stargazer_count": 147, "size": 69226, "license": "licensed"}}