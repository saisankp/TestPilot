{"test_class": {"identifier": "BitcoinSerializerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final byte[] addrMessage = Hex.decode(\"f9beb4d96164647200000000000000001f000000\" +\n            \"ed52399b01e215104d010000000000000000000000000000000000ffff0a000001208d\");", "modifier": "private final", "type": "byte[]", "declarator": "addrMessage = Hex.decode(\"f9beb4d96164647200000000000000001f000000\" +\n            \"ed52399b01e215104d010000000000000000000000000000000000ffff0a000001208d\")", "var_name": "addrMessage"}, {"original_string": "private final byte[] txMessage = Hex.decode(\n            \"F9 BE B4 D9 74 78 00 00  00 00 00 00 00 00 00 00\" +\n            \"02 01 00 00 E2 93 CD BE  01 00 00 00 01 6D BD DB\" +\n            \"08 5B 1D 8A F7 51 84 F0  BC 01 FA D5 8D 12 66 E9\" +\n            \"B6 3B 50 88 19 90 E4 B4  0D 6A EE 36 29 00 00 00\" +\n            \"00 8B 48 30 45 02 21 00  F3 58 1E 19 72 AE 8A C7\" +\n            \"C7 36 7A 7A 25 3B C1 13  52 23 AD B9 A4 68 BB 3A\" +\n            \"59 23 3F 45 BC 57 83 80  02 20 59 AF 01 CA 17 D0\" +\n            \"0E 41 83 7A 1D 58 E9 7A  A3 1B AE 58 4E DE C2 8D\" +\n            \"35 BD 96 92 36 90 91 3B  AE 9A 01 41 04 9C 02 BF\" +\n            \"C9 7E F2 36 CE 6D 8F E5  D9 40 13 C7 21 E9 15 98\" +\n            \"2A CD 2B 12 B6 5D 9B 7D  59 E2 0A 84 20 05 F8 FC\" +\n            \"4E 02 53 2E 87 3D 37 B9  6F 09 D6 D4 51 1A DA 8F\" +\n            \"14 04 2F 46 61 4A 4C 70  C0 F1 4B EF F5 FF FF FF\" +\n            \"FF 02 40 4B 4C 00 00 00  00 00 19 76 A9 14 1A A0\" +\n            \"CD 1C BE A6 E7 45 8A 7A  BA D5 12 A9 D9 EA 1A FB\" +\n            \"22 5E 88 AC 80 FA E9 C7  00 00 00 00 19 76 A9 14\" +\n            \"0E AB 5B EA 43 6A 04 84  CF AB 12 48 5E FD A0 B7\" +\n            \"8B 4E CC 52 88 AC 00 00  00 00\");", "modifier": "private final", "type": "byte[]", "declarator": "txMessage = Hex.decode(\n            \"F9 BE B4 D9 74 78 00 00  00 00 00 00 00 00 00 00\" +\n            \"02 01 00 00 E2 93 CD BE  01 00 00 00 01 6D BD DB\" +\n            \"08 5B 1D 8A F7 51 84 F0  BC 01 FA D5 8D 12 66 E9\" +\n            \"B6 3B 50 88 19 90 E4 B4  0D 6A EE 36 29 00 00 00\" +\n            \"00 8B 48 30 45 02 21 00  F3 58 1E 19 72 AE 8A C7\" +\n            \"C7 36 7A 7A 25 3B C1 13  52 23 AD B9 A4 68 BB 3A\" +\n            \"59 23 3F 45 BC 57 83 80  02 20 59 AF 01 CA 17 D0\" +\n            \"0E 41 83 7A 1D 58 E9 7A  A3 1B AE 58 4E DE C2 8D\" +\n            \"35 BD 96 92 36 90 91 3B  AE 9A 01 41 04 9C 02 BF\" +\n            \"C9 7E F2 36 CE 6D 8F E5  D9 40 13 C7 21 E9 15 98\" +\n            \"2A CD 2B 12 B6 5D 9B 7D  59 E2 0A 84 20 05 F8 FC\" +\n            \"4E 02 53 2E 87 3D 37 B9  6F 09 D6 D4 51 1A DA 8F\" +\n            \"14 04 2F 46 61 4A 4C 70  C0 F1 4B EF F5 FF FF FF\" +\n            \"FF 02 40 4B 4C 00 00 00  00 00 19 76 A9 14 1A A0\" +\n            \"CD 1C BE A6 E7 45 8A 7A  BA D5 12 A9 D9 EA 1A FB\" +\n            \"22 5E 88 AC 80 FA E9 C7  00 00 00 00 19 76 A9 14\" +\n            \"0E AB 5B EA 43 6A 04 84  CF AB 12 48 5E FD A0 B7\" +\n            \"8B 4E CC 52 88 AC 00 00  00 00\")", "var_name": "txMessage"}], "file": "core/src/test/java/com/google/bitcoin/core/BitcoinSerializerTest.java"}, "test_case": {"identifier": "testHeaders1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHeaders1() throws Exception {\n        BitcoinSerializer bs = new BitcoinSerializer(MainNetParams.get());\n\n        HeadersMessage hm = (HeadersMessage) bs.deserialize(ByteBuffer.wrap(Hex.decode(\"f9beb4d9686561\" +\n                \"646572730000000000520000005d4fab8101010000006fe28c0ab6f1b372c1a6a246ae6\" +\n                \"3f74f931e8365e15a089c68d6190000000000982051fd1e4ba744bbbe680e1fee14677b\" +\n                \"a1a3c3540bf7b1cdb606e857233e0e61bc6649ffff001d01e3629900\")));\n\n        // The first block after the genesis\n        // http://blockexplorer.com/b/1\n        Block block = hm.getBlockHeaders().get(0);\n        String hash = block.getHashAsString();\n        assertEquals(hash, \"00000000839a8e6886ab5951d76f411475428afc90947ee320161bbf18eb6048\");\n\n        assertNull(block.transactions);\n\n        assertEquals(Utils.bytesToHexString(block.getMerkleRoot().getBytes()),\n                \"0e3e2357e806b6cdb1f70b54c3a3a17b6714ee1f0e68bebb44a74b1efd512098\");\n    }", "signature": "void testHeaders1()", "full_signature": "@Test public void testHeaders1()", "class_method_signature": "BitcoinSerializerTest.testHeaders1()", "testcase": true, "constructor": false, "invocations": ["get", "deserialize", "wrap", "decode", "get", "getBlockHeaders", "getHashAsString", "assertEquals", "assertNull", "assertEquals", "bytesToHexString", "getBytes", "getMerkleRoot"]}, "focal_class": {"identifier": "BitcoinSerializer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(BitcoinSerializer.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(BitcoinSerializer.class)", "var_name": "log"}, {"original_string": "private static final int COMMAND_LEN = 12;", "modifier": "private static final", "type": "int", "declarator": "COMMAND_LEN = 12", "var_name": "COMMAND_LEN"}, {"original_string": "private NetworkParameters params;", "modifier": "private", "type": "NetworkParameters", "declarator": "params", "var_name": "params"}, {"original_string": "private boolean parseLazy = false;", "modifier": "private", "type": "boolean", "declarator": "parseLazy = false", "var_name": "parseLazy"}, {"original_string": "private boolean parseRetain = false;", "modifier": "private", "type": "boolean", "declarator": "parseRetain = false", "var_name": "parseRetain"}, {"original_string": "private static Map<Class<? extends Message>, String> names = new HashMap<Class<? extends Message>, String>();", "modifier": "private static", "type": "Map<Class<? extends Message>, String>", "declarator": "names = new HashMap<Class<? extends Message>, String>()", "var_name": "names"}], "methods": [{"identifier": "BitcoinSerializer", "parameters": "(NetworkParameters params)", "modifiers": "public", "return": "", "signature": " BitcoinSerializer(NetworkParameters params)", "full_signature": "public  BitcoinSerializer(NetworkParameters params)", "class_method_signature": "BitcoinSerializer.BitcoinSerializer(NetworkParameters params)", "testcase": false, "constructor": true}, {"identifier": "BitcoinSerializer", "parameters": "(NetworkParameters params, boolean parseLazy, boolean parseRetain)", "modifiers": "public", "return": "", "signature": " BitcoinSerializer(NetworkParameters params, boolean parseLazy, boolean parseRetain)", "full_signature": "public  BitcoinSerializer(NetworkParameters params, boolean parseLazy, boolean parseRetain)", "class_method_signature": "BitcoinSerializer.BitcoinSerializer(NetworkParameters params, boolean parseLazy, boolean parseRetain)", "testcase": false, "constructor": true}, {"identifier": "serialize", "parameters": "(String name, byte[] message, OutputStream out)", "modifiers": "public", "return": "void", "signature": "void serialize(String name, byte[] message, OutputStream out)", "full_signature": "public void serialize(String name, byte[] message, OutputStream out)", "class_method_signature": "BitcoinSerializer.serialize(String name, byte[] message, OutputStream out)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "(Message message, OutputStream out)", "modifiers": "public", "return": "void", "signature": "void serialize(Message message, OutputStream out)", "full_signature": "public void serialize(Message message, OutputStream out)", "class_method_signature": "BitcoinSerializer.serialize(Message message, OutputStream out)", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(ByteBuffer in)", "modifiers": "public", "return": "Message", "signature": "Message deserialize(ByteBuffer in)", "full_signature": "public Message deserialize(ByteBuffer in)", "class_method_signature": "BitcoinSerializer.deserialize(ByteBuffer in)", "testcase": false, "constructor": false}, {"identifier": "deserializeHeader", "parameters": "(ByteBuffer in)", "modifiers": "public", "return": "BitcoinPacketHeader", "signature": "BitcoinPacketHeader deserializeHeader(ByteBuffer in)", "full_signature": "public BitcoinPacketHeader deserializeHeader(ByteBuffer in)", "class_method_signature": "BitcoinSerializer.deserializeHeader(ByteBuffer in)", "testcase": false, "constructor": false}, {"identifier": "deserializePayload", "parameters": "(BitcoinPacketHeader header, ByteBuffer in)", "modifiers": "public", "return": "Message", "signature": "Message deserializePayload(BitcoinPacketHeader header, ByteBuffer in)", "full_signature": "public Message deserializePayload(BitcoinPacketHeader header, ByteBuffer in)", "class_method_signature": "BitcoinSerializer.deserializePayload(BitcoinPacketHeader header, ByteBuffer in)", "testcase": false, "constructor": false}, {"identifier": "makeMessage", "parameters": "(String command, int length, byte[] payloadBytes, byte[] hash, byte[] checksum)", "modifiers": "private", "return": "Message", "signature": "Message makeMessage(String command, int length, byte[] payloadBytes, byte[] hash, byte[] checksum)", "full_signature": "private Message makeMessage(String command, int length, byte[] payloadBytes, byte[] hash, byte[] checksum)", "class_method_signature": "BitcoinSerializer.makeMessage(String command, int length, byte[] payloadBytes, byte[] hash, byte[] checksum)", "testcase": false, "constructor": false}, {"identifier": "seekPastMagicBytes", "parameters": "(ByteBuffer in)", "modifiers": "public", "return": "void", "signature": "void seekPastMagicBytes(ByteBuffer in)", "full_signature": "public void seekPastMagicBytes(ByteBuffer in)", "class_method_signature": "BitcoinSerializer.seekPastMagicBytes(ByteBuffer in)", "testcase": false, "constructor": false}, {"identifier": "isParseLazyMode", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isParseLazyMode()", "full_signature": "public boolean isParseLazyMode()", "class_method_signature": "BitcoinSerializer.isParseLazyMode()", "testcase": false, "constructor": false}, {"identifier": "isParseRetainMode", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isParseRetainMode()", "full_signature": "public boolean isParseRetainMode()", "class_method_signature": "BitcoinSerializer.isParseRetainMode()", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/google/bitcoin/core/BitcoinSerializer.java"}, "focal_method": {"identifier": "deserialize", "parameters": "(ByteBuffer in)", "modifiers": "public", "return": "Message", "body": "public Message deserialize(ByteBuffer in) throws ProtocolException, IOException {\n        // A Bitcoin protocol message has the following format.\n        //\n        //   - 4 byte magic number: 0xfabfb5da for the testnet or\n        //                          0xf9beb4d9 for production\n        //   - 12 byte command in ASCII\n        //   - 4 byte payload size\n        //   - 4 byte checksum\n        //   - Payload data\n        //\n        // The checksum is the first 4 bytes of a SHA256 hash of the message payload. It isn't\n        // present for all messages, notably, the first one on a connection.\n        //\n        // Satoshi's implementation ignores garbage before the magic header bytes. We have to do the same because\n        // sometimes it sends us stuff that isn't part of any message.\n        seekPastMagicBytes(in);\n        BitcoinPacketHeader header = new BitcoinPacketHeader(in);\n        // Now try to read the whole message.\n        return deserializePayload(header, in);\n    }", "signature": "Message deserialize(ByteBuffer in)", "full_signature": "public Message deserialize(ByteBuffer in)", "class_method_signature": "BitcoinSerializer.deserialize(ByteBuffer in)", "testcase": false, "constructor": false, "invocations": ["seekPastMagicBytes", "deserializePayload"]}, "repository": {"repo_id": 24363680, "url": "https://github.com/cannabiscoindev/cannabiscoinj", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 5, "size": 10126, "license": "licensed"}}