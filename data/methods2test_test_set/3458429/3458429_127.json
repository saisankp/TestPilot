{"test_class": {"identifier": "WSURITest", "superclass": "", "interfaces": "", "fields": [], "file": "firefly-net/src/test/java/com/fireflysource/net/websocket/common/utils/WSURITest.java"}, "test_case": {"identifier": "testWssToHttps", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWssToHttps() throws URISyntaxException {\n        assertURI(WSURI.toHttp(URI.create(\"wss://localhost/\")), URI.create(\"https://localhost/\"));\n    }", "signature": "void testWssToHttps()", "full_signature": "@Test public void testWssToHttps()", "class_method_signature": "WSURITest.testWssToHttps()", "testcase": true, "constructor": false, "invocations": ["assertURI", "toHttp", "create", "create"]}, "focal_class": {"identifier": "WSURI", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "toHttp", "parameters": "(final URI inputUri)", "modifiers": "public static", "return": "URI", "signature": "URI toHttp(final URI inputUri)", "full_signature": "public static URI toHttp(final URI inputUri)", "class_method_signature": "WSURI.toHttp(final URI inputUri)", "testcase": false, "constructor": false}, {"identifier": "toWebsocket", "parameters": "(CharSequence inputUrl)", "modifiers": "public static", "return": "URI", "signature": "URI toWebsocket(CharSequence inputUrl)", "full_signature": "public static URI toWebsocket(CharSequence inputUrl)", "class_method_signature": "WSURI.toWebsocket(CharSequence inputUrl)", "testcase": false, "constructor": false}, {"identifier": "toWebsocket", "parameters": "(CharSequence inputUrl, String query)", "modifiers": "public static", "return": "URI", "signature": "URI toWebsocket(CharSequence inputUrl, String query)", "full_signature": "public static URI toWebsocket(CharSequence inputUrl, String query)", "class_method_signature": "WSURI.toWebsocket(CharSequence inputUrl, String query)", "testcase": false, "constructor": false}, {"identifier": "toWebsocket", "parameters": "(final URI inputUri)", "modifiers": "public static", "return": "URI", "signature": "URI toWebsocket(final URI inputUri)", "full_signature": "public static URI toWebsocket(final URI inputUri)", "class_method_signature": "WSURI.toWebsocket(final URI inputUri)", "testcase": false, "constructor": false}], "file": "firefly-net/src/main/java/com/fireflysource/net/websocket/common/utils/WSURI.java"}, "focal_method": {"identifier": "toHttp", "parameters": "(final URI inputUri)", "modifiers": "public static", "return": "URI", "body": "public static URI toHttp(final URI inputUri) throws URISyntaxException {\n        Objects.requireNonNull(inputUri, \"Input URI must not be null\");\n        String wsScheme = inputUri.getScheme();\n        if (\"http\".equalsIgnoreCase(wsScheme) || \"https\".equalsIgnoreCase(wsScheme)) {\n            // leave alone\n            return inputUri;\n        }\n\n        if (\"ws\".equalsIgnoreCase(wsScheme)) {\n            // convert to http\n            return new URI(\"http\" + inputUri.toString().substring(wsScheme.length()));\n        }\n\n        if (\"wss\".equalsIgnoreCase(wsScheme)) {\n            // convert to https\n            return new URI(\"https\" + inputUri.toString().substring(wsScheme.length()));\n        }\n\n        throw new URISyntaxException(inputUri.toString(), \"Unrecognized WebSocket scheme\");\n    }", "signature": "URI toHttp(final URI inputUri)", "full_signature": "public static URI toHttp(final URI inputUri)", "class_method_signature": "WSURI.toHttp(final URI inputUri)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "getScheme", "equalsIgnoreCase", "equalsIgnoreCase", "equalsIgnoreCase", "substring", "toString", "length", "equalsIgnoreCase", "substring", "toString", "length", "toString"]}, "repository": {"repo_id": 3458429, "url": "https://github.com/hypercube1024/firefly", "language": "Java", "is_fork": false, "fork_count": 118, "stargazer_count": 271, "size": 29687, "license": "licensed"}}