{"test_class": {"identifier": "ModClusterServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SOME_PATH = \"somePath\";", "modifier": "private static final", "type": "String", "declarator": "SOME_PATH = \"somePath\"", "var_name": "SOME_PATH"}], "file": "core/src/test/java/org/jboss/modcluster/ModClusterServiceTest.java"}, "test_case": {"identifier": "stopMultipleContextWithSamePath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void stopMultipleContextWithSamePath() {\n\n        MCMPHandler mcmpHandler = mock(MCMPHandler.class);\n        ModClusterService mod = createModClusterService(mcmpHandler);\n        Context context = createContext(SOME_PATH);\n        Context context2 = createContext(SOME_PATH);\n        addInnerContexts(context, context, context2);\n\n        mod.stop(context);\n\n        verify(mcmpHandler, never()).sendRequest(eq(null));\n    }", "signature": "void stopMultipleContextWithSamePath()", "full_signature": "@Test public void stopMultipleContextWithSamePath()", "class_method_signature": "ModClusterServiceTest.stopMultipleContextWithSamePath()", "testcase": true, "constructor": false, "invocations": ["mock", "createModClusterService", "createContext", "createContext", "addInnerContexts", "stop", "sendRequest", "verify", "never", "eq"]}, "focal_class": {"identifier": "ModClusterService", "superclass": "", "interfaces": "implements ModClusterServiceMBean, ContainerEventHandler, LoadBalanceFactorProvider,\n        MCMPConnectionListener, ContextFilter", "fields": [{"original_string": "public static final int DEFAULT_PORT = 8000;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_PORT = 8000", "var_name": "DEFAULT_PORT"}, {"original_string": "private final NodeConfiguration nodeConfig;", "modifier": "private final", "type": "NodeConfiguration", "declarator": "nodeConfig", "var_name": "nodeConfig"}, {"original_string": "private final BalancerConfiguration balancerConfig;", "modifier": "private final", "type": "BalancerConfiguration", "declarator": "balancerConfig", "var_name": "balancerConfig"}, {"original_string": "private final MCMPHandlerConfiguration mcmpConfig;", "modifier": "private final", "type": "MCMPHandlerConfiguration", "declarator": "mcmpConfig", "var_name": "mcmpConfig"}, {"original_string": "private final AdvertiseConfiguration advertiseConfig;", "modifier": "private final", "type": "AdvertiseConfiguration", "declarator": "advertiseConfig", "var_name": "advertiseConfig"}, {"original_string": "private final MCMPHandler mcmpHandler;", "modifier": "private final", "type": "MCMPHandler", "declarator": "mcmpHandler", "var_name": "mcmpHandler"}, {"original_string": "private final ResetRequestSource resetRequestSource;", "modifier": "private final", "type": "ResetRequestSource", "declarator": "resetRequestSource", "var_name": "resetRequestSource"}, {"original_string": "private final MCMPRequestFactory requestFactory;", "modifier": "private final", "type": "MCMPRequestFactory", "declarator": "requestFactory", "var_name": "requestFactory"}, {"original_string": "private final MCMPResponseParser responseParser;", "modifier": "private final", "type": "MCMPResponseParser", "declarator": "responseParser", "var_name": "responseParser"}, {"original_string": "private final AdvertiseListenerFactory listenerFactory;", "modifier": "private final", "type": "AdvertiseListenerFactory", "declarator": "listenerFactory", "var_name": "listenerFactory"}, {"original_string": "private final LoadBalanceFactorProviderFactory loadBalanceFactorProviderFactory;", "modifier": "private final", "type": "LoadBalanceFactorProviderFactory", "declarator": "loadBalanceFactorProviderFactory", "var_name": "loadBalanceFactorProviderFactory"}, {"original_string": "private final Map<String, Set<String>> excludedContexts = new HashMap<String, Set<String>>();", "modifier": "private final", "type": "Map<String, Set<String>>", "declarator": "excludedContexts = new HashMap<String, Set<String>>()", "var_name": "excludedContexts"}, {"original_string": "private final ConcurrentMap<Context, EnablableRequestListener> requestListeners = new ConcurrentHashMap<Context, EnablableRequestListener>();", "modifier": "private final", "type": "ConcurrentMap<Context, EnablableRequestListener>", "declarator": "requestListeners = new ConcurrentHashMap<Context, EnablableRequestListener>()", "var_name": "requestListeners"}, {"original_string": "private volatile boolean established = false;", "modifier": "private volatile", "type": "boolean", "declarator": "established = false", "var_name": "established"}, {"original_string": "private volatile boolean autoEnableContexts = true;", "modifier": "private volatile", "type": "boolean", "declarator": "autoEnableContexts = true", "var_name": "autoEnableContexts"}, {"original_string": "private volatile Server server;", "modifier": "private volatile", "type": "Server", "declarator": "server", "var_name": "server"}, {"original_string": "private volatile LoadBalanceFactorProvider loadBalanceFactorProvider;", "modifier": "private volatile", "type": "LoadBalanceFactorProvider", "declarator": "loadBalanceFactorProvider", "var_name": "loadBalanceFactorProvider"}, {"original_string": "private volatile AdvertiseListener advertiseListener;", "modifier": "private volatile", "type": "AdvertiseListener", "declarator": "advertiseListener", "var_name": "advertiseListener"}], "methods": [{"identifier": "ModClusterService", "parameters": "(ModClusterConfiguration config, LoadBalanceFactorProvider loadBalanceFactorProvider)", "modifiers": "public", "return": "", "signature": " ModClusterService(ModClusterConfiguration config, LoadBalanceFactorProvider loadBalanceFactorProvider)", "full_signature": "public  ModClusterService(ModClusterConfiguration config, LoadBalanceFactorProvider loadBalanceFactorProvider)", "class_method_signature": "ModClusterService.ModClusterService(ModClusterConfiguration config, LoadBalanceFactorProvider loadBalanceFactorProvider)", "testcase": false, "constructor": true}, {"identifier": "ModClusterService", "parameters": "(ModClusterConfig config, LoadBalanceFactorProvider loadBalanceFactorProvider)", "modifiers": "public", "return": "", "signature": " ModClusterService(ModClusterConfig config, LoadBalanceFactorProvider loadBalanceFactorProvider)", "full_signature": "public  ModClusterService(ModClusterConfig config, LoadBalanceFactorProvider loadBalanceFactorProvider)", "class_method_signature": "ModClusterService.ModClusterService(ModClusterConfig config, LoadBalanceFactorProvider loadBalanceFactorProvider)", "testcase": false, "constructor": true}, {"identifier": "ModClusterService", "parameters": "(ModClusterConfig config, LoadBalanceFactorProviderFactory loadBalanceFactorProviderFactory)", "modifiers": "public", "return": "", "signature": " ModClusterService(ModClusterConfig config, LoadBalanceFactorProviderFactory loadBalanceFactorProviderFactory)", "full_signature": "public  ModClusterService(ModClusterConfig config, LoadBalanceFactorProviderFactory loadBalanceFactorProviderFactory)", "class_method_signature": "ModClusterService.ModClusterService(ModClusterConfig config, LoadBalanceFactorProviderFactory loadBalanceFactorProviderFactory)", "testcase": false, "constructor": true}, {"identifier": "ModClusterService", "parameters": "(NodeConfiguration nodeConfig, BalancerConfiguration balancerConfig, MCMPHandlerConfiguration mcmpConfig, AdvertiseConfiguration advertiseConfig,\n                              LoadBalanceFactorProviderFactory loadBalanceFactorProviderFactory)", "modifiers": "private", "return": "", "signature": " ModClusterService(NodeConfiguration nodeConfig, BalancerConfiguration balancerConfig, MCMPHandlerConfiguration mcmpConfig, AdvertiseConfiguration advertiseConfig,\n                              LoadBalanceFactorProviderFactory loadBalanceFactorProviderFactory)", "full_signature": "private  ModClusterService(NodeConfiguration nodeConfig, BalancerConfiguration balancerConfig, MCMPHandlerConfiguration mcmpConfig, AdvertiseConfiguration advertiseConfig,\n                              LoadBalanceFactorProviderFactory loadBalanceFactorProviderFactory)", "class_method_signature": "ModClusterService.ModClusterService(NodeConfiguration nodeConfig, BalancerConfiguration balancerConfig, MCMPHandlerConfiguration mcmpConfig, AdvertiseConfiguration advertiseConfig,\n                              LoadBalanceFactorProviderFactory loadBalanceFactorProviderFactory)", "testcase": false, "constructor": true}, {"identifier": "ModClusterService", "parameters": "(NodeConfiguration nodeConfig, BalancerConfiguration balancerConfig, MCMPHandlerConfiguration mcmpConfig, AdvertiseConfiguration advertiseConfig,\n                              LoadBalanceFactorProviderFactory loadBalanceFactorProviderFactory, MCMPRequestFactory requestFactory)", "modifiers": "private", "return": "", "signature": " ModClusterService(NodeConfiguration nodeConfig, BalancerConfiguration balancerConfig, MCMPHandlerConfiguration mcmpConfig, AdvertiseConfiguration advertiseConfig,\n                              LoadBalanceFactorProviderFactory loadBalanceFactorProviderFactory, MCMPRequestFactory requestFactory)", "full_signature": "private  ModClusterService(NodeConfiguration nodeConfig, BalancerConfiguration balancerConfig, MCMPHandlerConfiguration mcmpConfig, AdvertiseConfiguration advertiseConfig,\n                              LoadBalanceFactorProviderFactory loadBalanceFactorProviderFactory, MCMPRequestFactory requestFactory)", "class_method_signature": "ModClusterService.ModClusterService(NodeConfiguration nodeConfig, BalancerConfiguration balancerConfig, MCMPHandlerConfiguration mcmpConfig, AdvertiseConfiguration advertiseConfig,\n                              LoadBalanceFactorProviderFactory loadBalanceFactorProviderFactory, MCMPRequestFactory requestFactory)", "testcase": false, "constructor": true}, {"identifier": "ModClusterService", "parameters": "(NodeConfiguration nodeConfig, BalancerConfiguration balancerConfig, MCMPHandlerConfiguration mcmpConfig, AdvertiseConfiguration advertiseConfig,\n                              LoadBalanceFactorProviderFactory loadBalanceFactorProviderFactory, MCMPRequestFactory requestFactory, MCMPResponseParser responseParser, ResetRequestSource resetRequestSource)", "modifiers": "private", "return": "", "signature": " ModClusterService(NodeConfiguration nodeConfig, BalancerConfiguration balancerConfig, MCMPHandlerConfiguration mcmpConfig, AdvertiseConfiguration advertiseConfig,\n                              LoadBalanceFactorProviderFactory loadBalanceFactorProviderFactory, MCMPRequestFactory requestFactory, MCMPResponseParser responseParser, ResetRequestSource resetRequestSource)", "full_signature": "private  ModClusterService(NodeConfiguration nodeConfig, BalancerConfiguration balancerConfig, MCMPHandlerConfiguration mcmpConfig, AdvertiseConfiguration advertiseConfig,\n                              LoadBalanceFactorProviderFactory loadBalanceFactorProviderFactory, MCMPRequestFactory requestFactory, MCMPResponseParser responseParser, ResetRequestSource resetRequestSource)", "class_method_signature": "ModClusterService.ModClusterService(NodeConfiguration nodeConfig, BalancerConfiguration balancerConfig, MCMPHandlerConfiguration mcmpConfig, AdvertiseConfiguration advertiseConfig,\n                              LoadBalanceFactorProviderFactory loadBalanceFactorProviderFactory, MCMPRequestFactory requestFactory, MCMPResponseParser responseParser, ResetRequestSource resetRequestSource)", "testcase": false, "constructor": true}, {"identifier": "ModClusterService", "parameters": "(NodeConfiguration nodeConfig, BalancerConfiguration balancerConfig, MCMPHandlerConfiguration mcmpConfig, AdvertiseConfiguration advertiseConfig,\n                                LoadBalanceFactorProviderFactory loadBalanceFactorProviderFactory, MCMPRequestFactory requestFactory, MCMPResponseParser responseParser, ResetRequestSource resetRequestSource, MCMPHandler mcmpHandler, AdvertiseListenerFactory listenerFactory)", "modifiers": "protected", "return": "", "signature": " ModClusterService(NodeConfiguration nodeConfig, BalancerConfiguration balancerConfig, MCMPHandlerConfiguration mcmpConfig, AdvertiseConfiguration advertiseConfig,\n                                LoadBalanceFactorProviderFactory loadBalanceFactorProviderFactory, MCMPRequestFactory requestFactory, MCMPResponseParser responseParser, ResetRequestSource resetRequestSource, MCMPHandler mcmpHandler, AdvertiseListenerFactory listenerFactory)", "full_signature": "protected  ModClusterService(NodeConfiguration nodeConfig, BalancerConfiguration balancerConfig, MCMPHandlerConfiguration mcmpConfig, AdvertiseConfiguration advertiseConfig,\n                                LoadBalanceFactorProviderFactory loadBalanceFactorProviderFactory, MCMPRequestFactory requestFactory, MCMPResponseParser responseParser, ResetRequestSource resetRequestSource, MCMPHandler mcmpHandler, AdvertiseListenerFactory listenerFactory)", "class_method_signature": "ModClusterService.ModClusterService(NodeConfiguration nodeConfig, BalancerConfiguration balancerConfig, MCMPHandlerConfiguration mcmpConfig, AdvertiseConfiguration advertiseConfig,\n                                LoadBalanceFactorProviderFactory loadBalanceFactorProviderFactory, MCMPRequestFactory requestFactory, MCMPResponseParser responseParser, ResetRequestSource resetRequestSource, MCMPHandler mcmpHandler, AdvertiseListenerFactory listenerFactory)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(Server server)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void init(Server server)", "full_signature": "@Override public synchronized void init(Server server)", "class_method_signature": "ModClusterService.init(Server server)", "testcase": false, "constructor": false}, {"identifier": "getExcludedContexts", "parameters": "(Host host)", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> getExcludedContexts(Host host)", "full_signature": "@Override public Set<String> getExcludedContexts(Host host)", "class_method_signature": "ModClusterService.getExcludedContexts(Host host)", "testcase": false, "constructor": false}, {"identifier": "isAutoEnableContexts", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAutoEnableContexts()", "full_signature": "@Override public boolean isAutoEnableContexts()", "class_method_signature": "ModClusterService.isAutoEnableContexts()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void shutdown()", "full_signature": "@Override public synchronized void shutdown()", "class_method_signature": "ModClusterService.shutdown()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "(Server server)", "modifiers": "@Override public", "return": "void", "signature": "void start(Server server)", "full_signature": "@Override public void start(Server server)", "class_method_signature": "ModClusterService.start(Server server)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "(Server server)", "modifiers": "@Override public", "return": "void", "signature": "void stop(Server server)", "full_signature": "@Override public void stop(Server server)", "class_method_signature": "ModClusterService.stop(Server server)", "testcase": false, "constructor": false}, {"identifier": "config", "parameters": "(Engine engine)", "modifiers": "protected", "return": "void", "signature": "void config(Engine engine)", "full_signature": "protected void config(Engine engine)", "class_method_signature": "ModClusterService.config(Engine engine)", "testcase": false, "constructor": false}, {"identifier": "isEstablished", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEstablished()", "full_signature": "@Override public boolean isEstablished()", "class_method_signature": "ModClusterService.isEstablished()", "testcase": false, "constructor": false}, {"identifier": "connectionEstablished", "parameters": "(InetAddress localAddress)", "modifiers": "@Override public", "return": "void", "signature": "void connectionEstablished(InetAddress localAddress)", "full_signature": "@Override public void connectionEstablished(InetAddress localAddress)", "class_method_signature": "ModClusterService.connectionEstablished(InetAddress localAddress)", "testcase": false, "constructor": false}, {"identifier": "establishJvmRoute", "parameters": "(Engine engine)", "modifiers": "protected", "return": "void", "signature": "void establishJvmRoute(Engine engine)", "full_signature": "protected void establishJvmRoute(Engine engine)", "class_method_signature": "ModClusterService.establishJvmRoute(Engine engine)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Context context)", "modifiers": "@Override public", "return": "void", "signature": "void add(Context context)", "full_signature": "@Override public void add(Context context)", "class_method_signature": "ModClusterService.add(Context context)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "(Context context)", "modifiers": "@Override public", "return": "void", "signature": "void start(Context context)", "full_signature": "@Override public void start(Context context)", "class_method_signature": "ModClusterService.start(Context context)", "testcase": false, "constructor": false}, {"identifier": "enable", "parameters": "(Context context)", "modifiers": "private", "return": "void", "signature": "void enable(Context context)", "full_signature": "private void enable(Context context)", "class_method_signature": "ModClusterService.enable(Context context)", "testcase": false, "constructor": false}, {"identifier": "disable", "parameters": "(Context context)", "modifiers": "private", "return": "void", "signature": "void disable(Context context)", "full_signature": "private void disable(Context context)", "class_method_signature": "ModClusterService.disable(Context context)", "testcase": false, "constructor": false}, {"identifier": "hasContextMultipleReferences", "parameters": "(Context context)", "modifiers": "private", "return": "boolean", "signature": "boolean hasContextMultipleReferences(Context context)", "full_signature": "private boolean hasContextMultipleReferences(Context context)", "class_method_signature": "ModClusterService.hasContextMultipleReferences(Context context)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "(Context context)", "modifiers": "@Override public", "return": "void", "signature": "void stop(Context context)", "full_signature": "@Override public void stop(Context context)", "class_method_signature": "ModClusterService.stop(Context context)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Context context)", "modifiers": "@Override public", "return": "void", "signature": "void remove(Context context)", "full_signature": "@Override public void remove(Context context)", "class_method_signature": "ModClusterService.remove(Context context)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "(Engine engine)", "modifiers": "protected", "return": "void", "signature": "void removeAll(Engine engine)", "full_signature": "protected void removeAll(Engine engine)", "class_method_signature": "ModClusterService.removeAll(Engine engine)", "testcase": false, "constructor": false}, {"identifier": "status", "parameters": "(Engine engine)", "modifiers": "@Override public", "return": "void", "signature": "void status(Engine engine)", "full_signature": "@Override public void status(Engine engine)", "class_method_signature": "ModClusterService.status(Engine engine)", "testcase": false, "constructor": false}, {"identifier": "include", "parameters": "(Context context)", "modifiers": "private", "return": "boolean", "signature": "boolean include(Context context)", "full_signature": "private boolean include(Context context)", "class_method_signature": "ModClusterService.include(Context context)", "testcase": false, "constructor": false}, {"identifier": "getLoadBalanceFactor", "parameters": "(Engine engine)", "modifiers": "@Override public", "return": "int", "signature": "int getLoadBalanceFactor(Engine engine)", "full_signature": "@Override public int getLoadBalanceFactor(Engine engine)", "class_method_signature": "ModClusterService.getLoadBalanceFactor(Engine engine)", "testcase": false, "constructor": false}, {"identifier": "addProxy", "parameters": "(String host, int port)", "modifiers": "@Override public", "return": "void", "signature": "void addProxy(String host, int port)", "full_signature": "@Override public void addProxy(String host, int port)", "class_method_signature": "ModClusterService.addProxy(String host, int port)", "testcase": false, "constructor": false}, {"identifier": "removeProxy", "parameters": "(String host, int port)", "modifiers": "@Override public", "return": "void", "signature": "void removeProxy(String host, int port)", "full_signature": "@Override public void removeProxy(String host, int port)", "class_method_signature": "ModClusterService.removeProxy(String host, int port)", "testcase": false, "constructor": false}, {"identifier": "createSocketAddress", "parameters": "(String host, int port)", "modifiers": "private", "return": "InetSocketAddress", "signature": "InetSocketAddress createSocketAddress(String host, int port)", "full_signature": "private InetSocketAddress createSocketAddress(String host, int port)", "class_method_signature": "ModClusterService.createSocketAddress(String host, int port)", "testcase": false, "constructor": false}, {"identifier": "getProxyConfiguration", "parameters": "()", "modifiers": "@Override public", "return": "Map<InetSocketAddress, String>", "signature": "Map<InetSocketAddress, String> getProxyConfiguration()", "full_signature": "@Override public Map<InetSocketAddress, String> getProxyConfiguration()", "class_method_signature": "ModClusterService.getProxyConfiguration()", "testcase": false, "constructor": false}, {"identifier": "getProxyInfo", "parameters": "()", "modifiers": "@Override public", "return": "Map<InetSocketAddress, String>", "signature": "Map<InetSocketAddress, String> getProxyInfo()", "full_signature": "@Override public Map<InetSocketAddress, String> getProxyInfo()", "class_method_signature": "ModClusterService.getProxyInfo()", "testcase": false, "constructor": false}, {"identifier": "ping", "parameters": "()", "modifiers": "@Override public", "return": "Map<InetSocketAddress, String>", "signature": "Map<InetSocketAddress, String> ping()", "full_signature": "@Override public Map<InetSocketAddress, String> ping()", "class_method_signature": "ModClusterService.ping()", "testcase": false, "constructor": false}, {"identifier": "ping", "parameters": "(String jvmRoute)", "modifiers": "@Override public", "return": "Map<InetSocketAddress, String>", "signature": "Map<InetSocketAddress, String> ping(String jvmRoute)", "full_signature": "@Override public Map<InetSocketAddress, String> ping(String jvmRoute)", "class_method_signature": "ModClusterService.ping(String jvmRoute)", "testcase": false, "constructor": false}, {"identifier": "ping", "parameters": "(String scheme, String host, int port)", "modifiers": "@Override public", "return": "Map<InetSocketAddress, String>", "signature": "Map<InetSocketAddress, String> ping(String scheme, String host, int port)", "full_signature": "@Override public Map<InetSocketAddress, String> ping(String scheme, String host, int port)", "class_method_signature": "ModClusterService.ping(String scheme, String host, int port)", "testcase": false, "constructor": false}, {"identifier": "getProxyResults", "parameters": "(MCMPRequest request)", "modifiers": "private", "return": "Map<InetSocketAddress, String>", "signature": "Map<InetSocketAddress, String> getProxyResults(MCMPRequest request)", "full_signature": "private Map<InetSocketAddress, String> getProxyResults(MCMPRequest request)", "class_method_signature": "ModClusterService.getProxyResults(MCMPRequest request)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void reset()", "full_signature": "@Override public void reset()", "class_method_signature": "ModClusterService.reset()", "testcase": false, "constructor": false}, {"identifier": "refresh", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void refresh()", "full_signature": "@Override public void refresh()", "class_method_signature": "ModClusterService.refresh()", "testcase": false, "constructor": false}, {"identifier": "disable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean disable()", "full_signature": "@Override public boolean disable()", "class_method_signature": "ModClusterService.disable()", "testcase": false, "constructor": false}, {"identifier": "enable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean enable()", "full_signature": "@Override public boolean enable()", "class_method_signature": "ModClusterService.enable()", "testcase": false, "constructor": false}, {"identifier": "disableContext", "parameters": "(String host, String path)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean disableContext(String host, String path)", "full_signature": "@Override public boolean disableContext(String host, String path)", "class_method_signature": "ModClusterService.disableContext(String host, String path)", "testcase": false, "constructor": false}, {"identifier": "enableContext", "parameters": "(String host, String path)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean enableContext(String host, String path)", "full_signature": "@Override public boolean enableContext(String host, String path)", "class_method_signature": "ModClusterService.enableContext(String host, String path)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "(long timeout, TimeUnit unit)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean stop(long timeout, TimeUnit unit)", "full_signature": "@Override public boolean stop(long timeout, TimeUnit unit)", "class_method_signature": "ModClusterService.stop(long timeout, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "stopContext", "parameters": "(String host, String path, long timeout, TimeUnit unit)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean stopContext(String host, String path, long timeout, TimeUnit unit)", "full_signature": "@Override public boolean stopContext(String host, String path, long timeout, TimeUnit unit)", "class_method_signature": "ModClusterService.stopContext(String host, String path, long timeout, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "drainRequests", "parameters": "(Context context, long start, long end)", "modifiers": "private", "return": "boolean", "signature": "boolean drainRequests(Context context, long start, long end)", "full_signature": "private boolean drainRequests(Context context, long start, long end)", "class_method_signature": "ModClusterService.drainRequests(Context context, long start, long end)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "(MCMPRequest request)", "modifiers": "private", "return": "int", "signature": "int stop(MCMPRequest request)", "full_signature": "private int stop(MCMPRequest request)", "class_method_signature": "ModClusterService.stop(MCMPRequest request)", "testcase": false, "constructor": false}, {"identifier": "drainSessions", "parameters": "(Context context, long start, long end)", "modifiers": "private", "return": "boolean", "signature": "boolean drainSessions(Context context, long start, long end)", "full_signature": "private boolean drainSessions(Context context, long start, long end)", "class_method_signature": "ModClusterService.drainSessions(Context context, long start, long end)", "testcase": false, "constructor": false}, {"identifier": "findHost", "parameters": "(String name)", "modifiers": "private", "return": "Host", "signature": "Host findHost(String name)", "full_signature": "private Host findHost(String name)", "class_method_signature": "ModClusterService.findHost(String name)", "testcase": false, "constructor": false}, {"identifier": "findContext", "parameters": "(Host host, String path)", "modifiers": "private", "return": "Context", "signature": "Context findContext(Host host, String path)", "full_signature": "private Context findContext(Host host, String path)", "class_method_signature": "ModClusterService.findContext(Host host, String path)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/jboss/modcluster/ModClusterService.java"}, "focal_method": {"identifier": "stop", "parameters": "(Server server)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void stop(Server server) {\n        ModClusterLogger.LOGGER.stopServer();\n\n        if (this.established) {\n            for (Engine engine : server.getEngines()) {\n                for (Host host : engine.getHosts()) {\n                    for (Context context : host.getContexts()) {\n                        if (context.isStarted()) {\n                            this.stop(context);\n                        }\n\n                        this.remove(context);\n                    }\n                }\n\n                this.removeAll(engine);\n            }\n        }\n    }", "signature": "void stop(Server server)", "full_signature": "@Override public void stop(Server server)", "class_method_signature": "ModClusterService.stop(Server server)", "testcase": false, "constructor": false, "invocations": ["stopServer", "getEngines", "getHosts", "getContexts", "isStarted", "stop", "remove", "removeAll"]}, "repository": {"repo_id": 5749899, "url": "https://github.com/modcluster/mod_cluster", "stars": 84, "created": "9/10/2012 1:25:41 PM +00:00", "updates": "2020-01-24T14:16:44+00:00", "fork": "False", "license": "licensed"}}