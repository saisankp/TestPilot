{"test_class": {"identifier": "ReactiveDelegatingContractTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}], "file": "reactive/src/test/java/feign/reactive/ReactiveDelegatingContractTest.java"}, "test_case": {"identifier": "reactorTypes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void reactorTypes() {\n    Contract contract = new ReactiveDelegatingContract(new Contract.Default());\n    contract.parseAndValidateMetadata(TestReactorService.class);\n  }", "signature": "void reactorTypes()", "full_signature": "@Test public void reactorTypes()", "class_method_signature": "ReactiveDelegatingContractTest.reactorTypes()", "testcase": true, "constructor": false, "invocations": ["parseAndValidateMetadata"]}, "focal_class": {"identifier": "ReactiveDelegatingContract", "superclass": "", "interfaces": "implements Contract", "fields": [{"original_string": "private final Contract delegate;", "modifier": "private final", "type": "Contract", "declarator": "delegate", "var_name": "delegate"}], "methods": [{"identifier": "ReactiveDelegatingContract", "parameters": "(Contract delegate)", "modifiers": "", "return": "", "signature": " ReactiveDelegatingContract(Contract delegate)", "full_signature": "  ReactiveDelegatingContract(Contract delegate)", "class_method_signature": "ReactiveDelegatingContract.ReactiveDelegatingContract(Contract delegate)", "testcase": false, "constructor": true}, {"identifier": "parseAndValidateMetadata", "parameters": "(Class<?> targetType)", "modifiers": "@Override public", "return": "List<MethodMetadata>", "signature": "List<MethodMetadata> parseAndValidateMetadata(Class<?> targetType)", "full_signature": "@Override public List<MethodMetadata> parseAndValidateMetadata(Class<?> targetType)", "class_method_signature": "ReactiveDelegatingContract.parseAndValidateMetadata(Class<?> targetType)", "testcase": false, "constructor": false}, {"identifier": "isReactive", "parameters": "(Type type)", "modifiers": "private", "return": "boolean", "signature": "boolean isReactive(Type type)", "full_signature": "private boolean isReactive(Type type)", "class_method_signature": "ReactiveDelegatingContract.isReactive(Type type)", "testcase": false, "constructor": false}], "file": "reactive/src/main/java/feign/reactive/ReactiveDelegatingContract.java"}, "focal_method": {"identifier": "parseAndValidateMetadata", "parameters": "(Class<?> targetType)", "modifiers": "@Override public", "return": "List<MethodMetadata>", "body": "@Override\n  public List<MethodMetadata> parseAndValidateMetadata(Class<?> targetType) {\n    List<MethodMetadata> methodsMetadata = this.delegate.parseAndValidateMetadata(targetType);\n\n    for (final MethodMetadata metadata : methodsMetadata) {\n      final Type type = metadata.returnType();\n      if (!isReactive(type)) {\n        throw new IllegalArgumentException(String.format(\n            \"Method %s of contract %s doesn't returns a org.reactivestreams.Publisher\",\n            metadata.configKey(), targetType.getSimpleName()));\n      }\n\n      /*\n       * we will need to change the return type of the method to match the return type contained\n       * within the Publisher\n       */\n      Type[] actualTypes = ((ParameterizedType) type).getActualTypeArguments();\n      if (actualTypes.length > 1) {\n        throw new IllegalStateException(\"Expected only one contained type.\");\n      } else {\n        Class<?> actual = Types.getRawType(actualTypes[0]);\n        if (Stream.class.isAssignableFrom(actual)) {\n          throw new IllegalArgumentException(\n              \"Streams are not supported when using Reactive Wrappers\");\n        }\n        metadata.returnType(actualTypes[0]);\n      }\n    }\n\n    return methodsMetadata;\n  }", "signature": "List<MethodMetadata> parseAndValidateMetadata(Class<?> targetType)", "full_signature": "@Override public List<MethodMetadata> parseAndValidateMetadata(Class<?> targetType)", "class_method_signature": "ReactiveDelegatingContract.parseAndValidateMetadata(Class<?> targetType)", "testcase": false, "constructor": false, "invocations": ["parseAndValidateMetadata", "returnType", "isReactive", "format", "configKey", "getSimpleName", "getActualTypeArguments", "getRawType", "isAssignableFrom", "returnType"]}, "repository": {"repo_id": 10981994, "url": "https://github.com/OpenFeign/feign", "stars": 5385, "created": "6/26/2013 11:28:16 PM +00:00", "updates": "2020-01-27T14:44:13+00:00", "fork": "False", "license": "licensed"}}