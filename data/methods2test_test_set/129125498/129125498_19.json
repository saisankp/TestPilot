{"test_class": {"identifier": "TracingUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TRACING_APIKEY_STRING = \"apiKey\";", "modifier": "private static final", "type": "String", "declarator": "TRACING_APIKEY_STRING = \"apiKey\"", "var_name": "TRACING_APIKEY_STRING"}, {"original_string": "private static final String TRACING_CLIENTID_STRING = \"clientId\";", "modifier": "private static final", "type": "String", "declarator": "TRACING_CLIENTID_STRING = \"clientId\"", "var_name": "TRACING_CLIENTID_STRING"}, {"original_string": "private static final String TRACING_ENDPOINT_STRING = \"endpoint\";", "modifier": "private static final", "type": "String", "declarator": "TRACING_ENDPOINT_STRING = \"endpoint\"", "var_name": "TRACING_ENDPOINT_STRING"}, {"original_string": "private static final String TRACING_QUEUESIZE_STRING = \"queueSize\";", "modifier": "private static final", "type": "String", "declarator": "TRACING_QUEUESIZE_STRING = \"queueSize\"", "var_name": "TRACING_QUEUESIZE_STRING"}, {"original_string": "private static final String TRACING_SHUTDOWNTIMEOUT_STRING = \"shutdownTimeout\";", "modifier": "private static final", "type": "String", "declarator": "TRACING_SHUTDOWNTIMEOUT_STRING = \"shutdownTimeout\"", "var_name": "TRACING_SHUTDOWNTIMEOUT_STRING"}, {"original_string": "private static final String TRACING_FLUSHINTERVAL_STRING = \"flushInterval\";", "modifier": "private static final", "type": "String", "declarator": "TRACING_FLUSHINTERVAL_STRING = \"flushInterval\"", "var_name": "TRACING_FLUSHINTERVAL_STRING"}, {"original_string": "private static final String TRACING_THREADCOUNT_STRING = \"threadCount\";", "modifier": "private static final", "type": "String", "declarator": "TRACING_THREADCOUNT_STRING = \"threadCount\"", "var_name": "TRACING_THREADCOUNT_STRING"}, {"original_string": "private static final String CK_TRACING = \"tracing\";", "modifier": "private static final", "type": "String", "declarator": "CK_TRACING = \"tracing\"", "var_name": "CK_TRACING"}, {"original_string": "private Config config;", "modifier": "private", "type": "Config", "declarator": "config", "var_name": "config"}, {"original_string": "private Config tracingConfig;", "modifier": "private", "type": "Config", "declarator": "tracingConfig", "var_name": "tracingConfig"}], "file": "kafka/src/test/java/com/expedia/adaptivealerting/kafka/util/TracingUtilTest.java"}, "test_case": {"identifier": "testGetTracer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetTracer() {\n        HashMap<String, String> collectorHeaders = new HashMap<>();\n        val tracer = TracingUtil.getTracer(collectorHeaders, tracingConfig);\n        Assert.assertNotNull(tracer);\n    }", "signature": "void testGetTracer()", "full_signature": "@Test public void testGetTracer()", "class_method_signature": "TracingUtilTest.testGetTracer()", "testcase": true, "constructor": false, "invocations": ["getTracer", "assertNotNull"]}, "focal_class": {"identifier": "TracingUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TRACER_HEADER_APIKEY_STRING = \"X-Api-Key\";", "modifier": "private static final", "type": "String", "declarator": "TRACER_HEADER_APIKEY_STRING = \"X-Api-Key\"", "var_name": "TRACER_HEADER_APIKEY_STRING"}, {"original_string": "private static final String TRACER_HEADER_CLIENTID_STRING = \"X-Client-Id\";", "modifier": "private static final", "type": "String", "declarator": "TRACER_HEADER_CLIENTID_STRING = \"X-Client-Id\"", "var_name": "TRACER_HEADER_CLIENTID_STRING"}, {"original_string": "private static final String TRACING_APIKEY_STRING = \"apiKey\";", "modifier": "private static final", "type": "String", "declarator": "TRACING_APIKEY_STRING = \"apiKey\"", "var_name": "TRACING_APIKEY_STRING"}, {"original_string": "private static final String TRACING_CLIENTID_STRING = \"clientId\";", "modifier": "private static final", "type": "String", "declarator": "TRACING_CLIENTID_STRING = \"clientId\"", "var_name": "TRACING_CLIENTID_STRING"}, {"original_string": "private static final String TRACING_ENDPOINT_STRING = \"endpoint\";", "modifier": "private static final", "type": "String", "declarator": "TRACING_ENDPOINT_STRING = \"endpoint\"", "var_name": "TRACING_ENDPOINT_STRING"}, {"original_string": "private static final String TRACING_QUEUESIZE_STRING = \"queueSize\";", "modifier": "private static final", "type": "String", "declarator": "TRACING_QUEUESIZE_STRING = \"queueSize\"", "var_name": "TRACING_QUEUESIZE_STRING"}, {"original_string": "private static final String TRACING_SHUTDOWNTIMEOUT_STRING = \"shutdownTimeout\";", "modifier": "private static final", "type": "String", "declarator": "TRACING_SHUTDOWNTIMEOUT_STRING = \"shutdownTimeout\"", "var_name": "TRACING_SHUTDOWNTIMEOUT_STRING"}, {"original_string": "private static final String TRACING_FLUSHINTERVAL_STRING = \"flushInterval\";", "modifier": "private static final", "type": "String", "declarator": "TRACING_FLUSHINTERVAL_STRING = \"flushInterval\"", "var_name": "TRACING_FLUSHINTERVAL_STRING"}, {"original_string": "private static final String TRACING_THREADCOUNT_STRING = \"threadCount\";", "modifier": "private static final", "type": "String", "declarator": "TRACING_THREADCOUNT_STRING = \"threadCount\"", "var_name": "TRACING_THREADCOUNT_STRING"}], "methods": [{"identifier": "getTracer", "parameters": "(HashMap<String, String> collectorHeaders, Config tracingConfig)", "modifiers": "public static", "return": "Tracer", "signature": "Tracer getTracer(HashMap<String, String> collectorHeaders, Config tracingConfig)", "full_signature": "public static Tracer getTracer(HashMap<String, String> collectorHeaders, Config tracingConfig)", "class_method_signature": "TracingUtil.getTracer(HashMap<String, String> collectorHeaders, Config tracingConfig)", "testcase": false, "constructor": false}, {"identifier": "createRemoteDispatcher", "parameters": "(NoopMetricsRegistry metricsRegistry,\n                                                           HashMap<String, String> collectorHeaders,\n                                                           Config tracingConfig)", "modifiers": "private static", "return": "RemoteDispatcher", "signature": "RemoteDispatcher createRemoteDispatcher(NoopMetricsRegistry metricsRegistry,\n                                                           HashMap<String, String> collectorHeaders,\n                                                           Config tracingConfig)", "full_signature": "private static RemoteDispatcher createRemoteDispatcher(NoopMetricsRegistry metricsRegistry,\n                                                           HashMap<String, String> collectorHeaders,\n                                                           Config tracingConfig)", "class_method_signature": "TracingUtil.createRemoteDispatcher(NoopMetricsRegistry metricsRegistry,\n                                                           HashMap<String, String> collectorHeaders,\n                                                           Config tracingConfig)", "testcase": false, "constructor": false}, {"identifier": "createTextMapPropagator", "parameters": "()", "modifiers": "private static", "return": "TextMapPropagator", "signature": "TextMapPropagator createTextMapPropagator()", "full_signature": "private static TextMapPropagator createTextMapPropagator()", "class_method_signature": "TracingUtil.createTextMapPropagator()", "testcase": false, "constructor": false}], "file": "kafka/src/main/java/com/expedia/adaptivealerting/kafka/util/TracingUtil.java"}, "focal_method": {"identifier": "getTracer", "parameters": "(HashMap<String, String> collectorHeaders, Config tracingConfig)", "modifiers": "public static", "return": "Tracer", "body": "public static Tracer getTracer(HashMap<String, String> collectorHeaders, Config tracingConfig) {\n        collectorHeaders.put(TRACER_HEADER_APIKEY_STRING, tracingConfig.getString(TRACING_APIKEY_STRING));\n        collectorHeaders.put(TRACER_HEADER_CLIENTID_STRING, tracingConfig.getString(TRACING_CLIENTID_STRING));\n        val metricsRegistry = new NoopMetricsRegistry();\n        val dispatcher = createRemoteDispatcher(metricsRegistry, collectorHeaders, tracingConfig);\n        val textMapPropagator = createTextMapPropagator();\n\n        return new Tracer.Builder(metricsRegistry, tracingConfig.getString(\"clientId\"), dispatcher)\n                .withFormat(\n                        Format.Builtin.TEXT_MAP, (Extractor<TextMap>) textMapPropagator\n                ).withFormat(Format.Builtin.TEXT_MAP, (Injector<TextMap>) textMapPropagator)\n                .withDualSpanMode()\n                .withIdGenerator(new RandomUUIDGenerator())\n                .build();\n    }", "signature": "Tracer getTracer(HashMap<String, String> collectorHeaders, Config tracingConfig)", "full_signature": "public static Tracer getTracer(HashMap<String, String> collectorHeaders, Config tracingConfig)", "class_method_signature": "TracingUtil.getTracer(HashMap<String, String> collectorHeaders, Config tracingConfig)", "testcase": false, "constructor": false, "invocations": ["put", "getString", "put", "getString", "createRemoteDispatcher", "createTextMapPropagator", "build", "withIdGenerator", "withDualSpanMode", "withFormat", "withFormat", "getString"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}