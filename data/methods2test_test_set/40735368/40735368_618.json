{"test_class": {"identifier": "NADCONTransformTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String STPAUL_LAS = \"stpaul.las\";", "modifier": "private static final", "type": "String", "declarator": "STPAUL_LAS = \"stpaul.las\"", "var_name": "STPAUL_LAS"}, {"original_string": "private static final String STPAUL_LOS = \"stpaul.los\";", "modifier": "private static final", "type": "String", "declarator": "STPAUL_LOS = \"stpaul.los\"", "var_name": "STPAUL_LOS"}, {"original_string": "private static final double TOLERANCE = 18E-7;", "modifier": "private static final", "type": "double", "declarator": "TOLERANCE = 18E-7", "var_name": "TOLERANCE"}, {"original_string": "private static final double[] TEST_POINT_SRC = {-170.25, 57.125};", "modifier": "private static final", "type": "double[]", "declarator": "TEST_POINT_SRC = {-170.25, 57.125}", "var_name": "TEST_POINT_SRC"}, {"original_string": "private static final double[] TEST_POINT_DST = {-170.252283, 57.125655};", "modifier": "private static final", "type": "double[]", "declarator": "TEST_POINT_DST = {-170.252283, 57.125655}", "var_name": "TEST_POINT_DST"}, {"original_string": "private NADCONTransform transform;", "modifier": "private", "type": "NADCONTransform", "declarator": "transform", "var_name": "transform"}], "file": "modules/library/referencing/src/test/java/org/geotools/referencing/operation/transform/NADCONTransformTest.java"}, "test_case": {"identifier": "testInverseTransform", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInverseTransform() throws TransformException {\n        double[] p = new double[2];\n        transform.inverseTransform(TEST_POINT_DST, 0, p, 0, 1);\n        assertEquals(p[0], TEST_POINT_SRC[0], TOLERANCE);\n        assertEquals(p[1], TEST_POINT_SRC[1], TOLERANCE);\n    }", "signature": "void testInverseTransform()", "full_signature": "@Test public void testInverseTransform()", "class_method_signature": "NADCONTransformTest.testInverseTransform()", "testcase": true, "constructor": false, "invocations": ["inverseTransform", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "NADCONTransform", "superclass": "extends AbstractMathTransform", "interfaces": "implements MathTransform2D, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = -4707304160205218546L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -4707304160205218546L", "var_name": "serialVersionUID"}, {"original_string": "private static NADCONGridShiftFactory FACTORY = new NADCONGridShiftFactory();", "modifier": "private static", "type": "NADCONGridShiftFactory", "declarator": "FACTORY = new NADCONGridShiftFactory()", "var_name": "FACTORY"}, {"original_string": "private static final String GRID_LOCATION = \"Grid location\";", "modifier": "private static final", "type": "String", "declarator": "GRID_LOCATION = \"Grid location\"", "var_name": "GRID_LOCATION"}, {"original_string": "private static final String DEFAULT_GRID_LOCATION = \".\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_GRID_LOCATION = \".\"", "var_name": "DEFAULT_GRID_LOCATION"}, {"original_string": "private static final double TOL = 5.0E-10;", "modifier": "private static final", "type": "double", "declarator": "TOL = 5.0E-10", "var_name": "TOL"}, {"original_string": "private static final int MAX_ITER = 10;", "modifier": "private static final", "type": "int", "declarator": "MAX_ITER = 10", "var_name": "MAX_ITER"}, {"original_string": "private static final double SEC_2_DEG = 3600.0;", "modifier": "private static final", "type": "double", "declarator": "SEC_2_DEG = 3600.0", "var_name": "SEC_2_DEG"}, {"original_string": "private final URI latGridName;", "modifier": "private final", "type": "URI", "declarator": "latGridName", "var_name": "latGridName"}, {"original_string": "private final URI longGridName;", "modifier": "private final", "type": "URI", "declarator": "longGridName", "var_name": "longGridName"}, {"original_string": "private LocalizationGrid gridShift;", "modifier": "private", "type": "LocalizationGrid", "declarator": "gridShift", "var_name": "gridShift"}, {"original_string": "private MathTransform gridShiftTransform;", "modifier": "private", "type": "MathTransform", "declarator": "gridShiftTransform", "var_name": "gridShiftTransform"}, {"original_string": "private transient MathTransform2D inverse;", "modifier": "private transient", "type": "MathTransform2D", "declarator": "inverse", "var_name": "inverse"}, {"original_string": "NADConGridShift grid;", "modifier": "", "type": "NADConGridShift", "declarator": "grid", "var_name": "grid"}], "methods": [{"identifier": "NADCONTransform", "parameters": "(final URI latGridName, final URI longGridName)", "modifiers": "public", "return": "", "signature": " NADCONTransform(final URI latGridName, final URI longGridName)", "full_signature": "public  NADCONTransform(final URI latGridName, final URI longGridName)", "class_method_signature": "NADCONTransform.NADCONTransform(final URI latGridName, final URI longGridName)", "testcase": false, "constructor": true}, {"identifier": "locateGrid", "parameters": "(URI uri )", "modifiers": "protected", "return": "URL", "signature": "URL locateGrid(URI uri )", "full_signature": "protected URL locateGrid(URI uri )", "class_method_signature": "NADCONTransform.locateGrid(URI uri )", "testcase": false, "constructor": false}, {"identifier": "getParameterDescriptors", "parameters": "()", "modifiers": "public", "return": "ParameterDescriptorGroup", "signature": "ParameterDescriptorGroup getParameterDescriptors()", "full_signature": "public ParameterDescriptorGroup getParameterDescriptors()", "class_method_signature": "NADCONTransform.getParameterDescriptors()", "testcase": false, "constructor": false}, {"identifier": "getParameterValues", "parameters": "()", "modifiers": "@Override public", "return": "ParameterValueGroup", "signature": "ParameterValueGroup getParameterValues()", "full_signature": "@Override public ParameterValueGroup getParameterValues()", "class_method_signature": "NADCONTransform.getParameterValues()", "testcase": false, "constructor": false}, {"identifier": "getSourceDimensions", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSourceDimensions()", "full_signature": "public int getSourceDimensions()", "class_method_signature": "NADCONTransform.getSourceDimensions()", "testcase": false, "constructor": false}, {"identifier": "getTargetDimensions", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTargetDimensions()", "full_signature": "public int getTargetDimensions()", "class_method_signature": "NADCONTransform.getTargetDimensions()", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(final double[] srcPts, int srcOff,\n        final double[] dstPts, int dstOff, int numPts)", "modifiers": "public", "return": "void", "signature": "void transform(final double[] srcPts, int srcOff,\n        final double[] dstPts, int dstOff, int numPts)", "full_signature": "public void transform(final double[] srcPts, int srcOff,\n        final double[] dstPts, int dstOff, int numPts)", "class_method_signature": "NADCONTransform.transform(final double[] srcPts, int srcOff,\n        final double[] dstPts, int dstOff, int numPts)", "testcase": false, "constructor": false}, {"identifier": "inverseTransform", "parameters": "(final double[] srcPts, int srcOff,\n        final double[] dstPts, int dstOff, int numPts)", "modifiers": "public", "return": "void", "signature": "void inverseTransform(final double[] srcPts, int srcOff,\n        final double[] dstPts, int dstOff, int numPts)", "full_signature": "public void inverseTransform(final double[] srcPts, int srcOff,\n        final double[] dstPts, int dstOff, int numPts)", "class_method_signature": "NADCONTransform.inverseTransform(final double[] srcPts, int srcOff,\n        final double[] dstPts, int dstOff, int numPts)", "testcase": false, "constructor": false}, {"identifier": "inverse", "parameters": "()", "modifiers": "@Override public synchronized", "return": "MathTransform2D", "signature": "MathTransform2D inverse()", "full_signature": "@Override public synchronized MathTransform2D inverse()", "class_method_signature": "NADCONTransform.inverse()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "NADCONTransform.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object object)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object object)", "full_signature": "@Override public boolean equals(Object object)", "class_method_signature": "NADCONTransform.equals(Object object)", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "NADCONTransform.main(String[] args)", "testcase": false, "constructor": false}], "file": "modules/library/referencing/src/main/java/org/geotools/referencing/operation/transform/NADCONTransform.java"}, "focal_method": {"identifier": "inverseTransform", "parameters": "(final double[] srcPts, int srcOff,\n        final double[] dstPts, int dstOff, int numPts)", "modifiers": "public", "return": "void", "body": "public void inverseTransform(final double[] srcPts, int srcOff,\n        final double[] dstPts, int dstOff, int numPts)\n        throws TransformException {\n        int step = 0;\n\n        if ((srcPts == dstPts) && (srcOff < dstOff)\n                && ((srcOff + (numPts * getSourceDimensions())) > dstOff)) {\n            step = -getSourceDimensions();\n            srcOff -= ((numPts - 1) * step);\n            dstOff -= ((numPts - 1) * step);\n        }\n\n        while (--numPts >= 0) {\n            final double x = srcPts[srcOff++];\n            final double y = srcPts[srcOff++];\n            double xtemp = x;\n            double ytemp = y;\n\n            for (int i = MAX_ITER;;) {\n                double[] array = { xtemp, ytemp };\n                transform(array, 0, array, 0, 1);\n                double xdif = array[0] - x;\n                double ydif = array[1] - y;\n\n                if (Math.abs(xdif) > TOL) {\n                    xtemp = xtemp - xdif;\n                }\n                if (Math.abs(ydif) > TOL) {\n                    ytemp = ytemp - ydif;\n                }\n\n                if ((Math.abs(xdif) <= TOL) && (Math.abs(ydif) <= TOL)) {\n                    dstPts[dstOff++] = xtemp;\n                    dstPts[dstOff++] = ytemp;\n                    break;\n                }\n                if (--i < 0) {\n                    throw new TransformException(Errors.format(ErrorKeys.NO_CONVERGENCE));\n                }\n            }\n\n            srcOff += step;\n            dstOff += step;\n        }\n    }", "signature": "void inverseTransform(final double[] srcPts, int srcOff,\n        final double[] dstPts, int dstOff, int numPts)", "full_signature": "public void inverseTransform(final double[] srcPts, int srcOff,\n        final double[] dstPts, int dstOff, int numPts)", "class_method_signature": "NADCONTransform.inverseTransform(final double[] srcPts, int srcOff,\n        final double[] dstPts, int dstOff, int numPts)", "testcase": false, "constructor": false, "invocations": ["getSourceDimensions", "getSourceDimensions", "transform", "abs", "abs", "abs", "abs", "format"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}