{"test_class": {"identifier": "TestBasicScheme", "superclass": "", "interfaces": "", "fields": [], "file": "external_sources/httpclient-4.1.1/httpclient/src/test/java/org/apache/ogt/http/impl/auth/TestBasicScheme.java"}, "test_case": {"identifier": "testBasicAuthenticationWith88591Chars", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBasicAuthenticationWith88591Chars() throws Exception {\n        int[] germanChars = { 0xE4, 0x2D, 0xF6, 0x2D, 0xFc };\n        StringBuilder buffer = new StringBuilder();\n        for (int i = 0; i < germanChars.length; i++) {\n            buffer.append((char)germanChars[i]);\n        }\n\n        UsernamePasswordCredentials credentials = new UsernamePasswordCredentials(\"dh\", buffer.toString());\n        Header header = BasicScheme.authenticate(credentials, \"ISO-8859-1\", false);\n        Assert.assertEquals(\"Basic ZGg65C32Lfw=\", header.getValue());\n    }", "signature": "void testBasicAuthenticationWith88591Chars()", "full_signature": "@Test public void testBasicAuthenticationWith88591Chars()", "class_method_signature": "TestBasicScheme.testBasicAuthenticationWith88591Chars()", "testcase": true, "constructor": false, "invocations": ["append", "toString", "authenticate", "assertEquals", "getValue"]}, "focal_class": {"identifier": "BasicScheme", "superclass": "extends RFC2617Scheme", "interfaces": "", "fields": [{"original_string": "private boolean complete;", "modifier": "private", "type": "boolean", "declarator": "complete", "var_name": "complete"}], "methods": [{"identifier": "BasicScheme", "parameters": "()", "modifiers": "public", "return": "", "signature": " BasicScheme()", "full_signature": "public  BasicScheme()", "class_method_signature": "BasicScheme.BasicScheme()", "testcase": false, "constructor": true}, {"identifier": "getSchemeName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSchemeName()", "full_signature": "public String getSchemeName()", "class_method_signature": "BasicScheme.getSchemeName()", "testcase": false, "constructor": false}, {"identifier": "processChallenge", "parameters": "(\n            final Header header)", "modifiers": "@Override public", "return": "void", "signature": "void processChallenge(\n            final Header header)", "full_signature": "@Override public void processChallenge(\n            final Header header)", "class_method_signature": "BasicScheme.processChallenge(\n            final Header header)", "testcase": false, "constructor": false}, {"identifier": "isComplete", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isComplete()", "full_signature": "public boolean isComplete()", "class_method_signature": "BasicScheme.isComplete()", "testcase": false, "constructor": false}, {"identifier": "isConnectionBased", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isConnectionBased()", "full_signature": "public boolean isConnectionBased()", "class_method_signature": "BasicScheme.isConnectionBased()", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "(\n            final Credentials credentials,\n            final HttpRequest request)", "modifiers": "public", "return": "Header", "signature": "Header authenticate(\n            final Credentials credentials,\n            final HttpRequest request)", "full_signature": "public Header authenticate(\n            final Credentials credentials,\n            final HttpRequest request)", "class_method_signature": "BasicScheme.authenticate(\n            final Credentials credentials,\n            final HttpRequest request)", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "(\n            final Credentials credentials,\n            final String charset,\n            boolean proxy)", "modifiers": "public static", "return": "Header", "signature": "Header authenticate(\n            final Credentials credentials,\n            final String charset,\n            boolean proxy)", "full_signature": "public static Header authenticate(\n            final Credentials credentials,\n            final String charset,\n            boolean proxy)", "class_method_signature": "BasicScheme.authenticate(\n            final Credentials credentials,\n            final String charset,\n            boolean proxy)", "testcase": false, "constructor": false}], "file": "external_sources/httpclient-4.1.1/httpclient/src/main/java/org/apache/ogt/http/impl/auth/BasicScheme.java"}, "focal_method": {"identifier": "authenticate", "parameters": "(\n            final Credentials credentials,\n            final HttpRequest request)", "modifiers": "public", "return": "Header", "body": "public Header authenticate(\n            final Credentials credentials,\n            final HttpRequest request) throws AuthenticationException {\n\n        if (credentials == null) {\n            throw new IllegalArgumentException(\"Credentials may not be null\");\n        }\n        if (request == null) {\n            throw new IllegalArgumentException(\"HTTP request may not be null\");\n        }\n\n        String charset = AuthParams.getCredentialCharset(request.getParams());\n        return authenticate(credentials, charset, isProxy());\n    }", "signature": "Header authenticate(\n            final Credentials credentials,\n            final HttpRequest request)", "full_signature": "public Header authenticate(\n            final Credentials credentials,\n            final HttpRequest request)", "class_method_signature": "BasicScheme.authenticate(\n            final Credentials credentials,\n            final HttpRequest request)", "testcase": false, "constructor": false, "invocations": ["getCredentialCharset", "getParams", "authenticate", "isProxy"]}, "repository": {"repo_id": 3384018, "url": "https://github.com/f8full/open-bixi-gpstracker", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 5, "size": 2028, "license": "licensed"}}