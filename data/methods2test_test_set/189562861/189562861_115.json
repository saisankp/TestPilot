{"test_class": {"identifier": "ContextFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Filter contextFilter = new ContextFilter();", "modifier": "", "type": "Filter", "declarator": "contextFilter = new ContextFilter()", "var_name": "contextFilter"}, {"original_string": "Invoker<DemoService> invoker;", "modifier": "", "type": "Invoker<DemoService>", "declarator": "invoker", "var_name": "invoker"}, {"original_string": "Invocation invocation;", "modifier": "", "type": "Invocation", "declarator": "invocation", "var_name": "invocation"}], "file": "dubbo-rpc/dubbo-rpc-api/src/test/java/com/alibaba/dubbo/rpc/filter/ContextFilterTest.java"}, "test_case": {"identifier": "testWithAttachments", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWithAttachments() {\n        URL url = URL.valueOf(\"test://test:11/test?group=dubbo&version=1.1\");\n        Invoker<DemoService> invoker = new MyInvoker<DemoService>(url);\n        Invocation invocation = new MockInvocation();\n        Result result = contextFilter.invoke(invoker, invocation);\n        assertNull(RpcContext.getContext().getInvoker());\n    }", "signature": "void testWithAttachments()", "full_signature": "@Test public void testWithAttachments()", "class_method_signature": "ContextFilterTest.testWithAttachments()", "testcase": true, "constructor": false, "invocations": ["valueOf", "invoke", "assertNull", "getInvoker", "getContext"]}, "focal_class": {"identifier": "ContextFilter", "superclass": "", "interfaces": "implements Filter", "fields": [], "methods": [{"identifier": "invoke", "parameters": "(Invoker<?> invoker, Invocation invocation)", "modifiers": "@Override public", "return": "Result", "signature": "Result invoke(Invoker<?> invoker, Invocation invocation)", "full_signature": "@Override public Result invoke(Invoker<?> invoker, Invocation invocation)", "class_method_signature": "ContextFilter.invoke(Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false}], "file": "dubbo-rpc/dubbo-rpc-api/src/main/java/com/alibaba/dubbo/rpc/filter/ContextFilter.java"}, "focal_method": {"identifier": "invoke", "parameters": "(Invoker<?> invoker, Invocation invocation)", "modifiers": "@Override public", "return": "Result", "body": "@Override\n    public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {\n        Map<String, String> attachments = invocation.getAttachments();\n        if (attachments != null) {\n            attachments = new HashMap<String, String>(attachments);\n            attachments.remove(Constants.PATH_KEY);\n            attachments.remove(Constants.GROUP_KEY);\n            attachments.remove(Constants.VERSION_KEY);\n            attachments.remove(Constants.DUBBO_VERSION_KEY);\n            attachments.remove(Constants.TOKEN_KEY);\n            attachments.remove(Constants.TIMEOUT_KEY);\n            attachments.remove(Constants.ASYNC_KEY);// Remove async property to avoid being passed to the following invoke chain.\n        }\n        RpcContext.getContext()\n                .setInvoker(invoker)\n                .setInvocation(invocation)\n//                .setAttachments(attachments)  // merged from dubbox\n                .setLocalAddress(invoker.getUrl().getHost(),\n                        invoker.getUrl().getPort());\n\n        // mreged from dubbox\n        // we may already added some attachments into RpcContext before this filter (e.g. in rest protocol)\n        if (attachments != null) {\n            if (RpcContext.getContext().getAttachments() != null) {\n                RpcContext.getContext().getAttachments().putAll(attachments);\n            } else {\n                RpcContext.getContext().setAttachments(attachments);\n            }\n        }\n\n        if (invocation instanceof RpcInvocation) {\n            ((RpcInvocation) invocation).setInvoker(invoker);\n        }\n        try {\n            RpcResult result = (RpcResult) invoker.invoke(invocation);\n            // pass attachments to result\n            result.addAttachments(RpcContext.getServerContext().getAttachments());\n            return result;\n        } finally {\n            RpcContext.removeContext();\n            RpcContext.getServerContext().clearAttachments();\n        }\n    }", "signature": "Result invoke(Invoker<?> invoker, Invocation invocation)", "full_signature": "@Override public Result invoke(Invoker<?> invoker, Invocation invocation)", "class_method_signature": "ContextFilter.invoke(Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false, "invocations": ["getAttachments", "remove", "remove", "remove", "remove", "remove", "remove", "remove", "setLocalAddress", "setInvocation", "setInvoker", "getContext", "getHost", "getUrl", "getPort", "getUrl", "getAttachments", "getContext", "putAll", "getAttachments", "getContext", "setAttachments", "getContext", "setInvoker", "invoke", "addAttachments", "getAttachments", "getServerContext", "removeContext", "clearAttachments", "getServerContext"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}