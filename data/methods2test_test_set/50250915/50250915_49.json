{"test_class": {"identifier": "GithubScmTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    Jenkins jenkins;", "modifier": "@Mock", "type": "Jenkins", "declarator": "jenkins", "var_name": "jenkins"}, {"original_string": "@Mock\n    Authentication authentication;", "modifier": "@Mock", "type": "Authentication", "declarator": "authentication", "var_name": "authentication"}, {"original_string": "@Mock\n    User user;", "modifier": "@Mock", "type": "User", "declarator": "user", "var_name": "user"}], "file": "blueocean-github-pipeline/src/test/java/io/jenkins/blueocean/blueocean_github_pipeline/GithubScmTest.java"}, "test_case": {"identifier": "getOrganizations", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getOrganizations() {\n        mockStatic(Stapler.class);\n        StaplerRequest staplerRequest = mock(StaplerRequest.class);\n        when(Stapler.getCurrentRequest()).thenReturn(staplerRequest);\n\n        when(staplerRequest.getParameter(CREDENTIAL_ID)).thenReturn(\"12345\");\n\n    }", "signature": "void getOrganizations()", "full_signature": "@Test public void getOrganizations()", "class_method_signature": "GithubScmTest.getOrganizations()", "testcase": true, "constructor": false, "invocations": ["mockStatic", "mock", "thenReturn", "when", "getCurrentRequest", "thenReturn", "when", "getParameter"]}, "focal_class": {"identifier": "GithubScm", "superclass": "extends AbstractScm", "interfaces": "", "fields": [{"original_string": "public static final String ID = \"github\";", "modifier": "public static final", "type": "String", "declarator": "ID = \"github\"", "var_name": "ID"}, {"original_string": "private static final String USER_EMAIL_SCOPE = \"user:email\";", "modifier": "private static final", "type": "String", "declarator": "USER_EMAIL_SCOPE = \"user:email\"", "var_name": "USER_EMAIL_SCOPE"}, {"original_string": "private static final String USER_SCOPE = \"user\";", "modifier": "private static final", "type": "String", "declarator": "USER_SCOPE = \"user\"", "var_name": "USER_SCOPE"}, {"original_string": "private static final String REPO_SCOPE = \"repo\";", "modifier": "private static final", "type": "String", "declarator": "REPO_SCOPE = \"repo\"", "var_name": "REPO_SCOPE"}, {"original_string": "static final String DOMAIN_NAME=\"blueocean-github-domain\";", "modifier": "static final", "type": "String", "declarator": "DOMAIN_NAME=\"blueocean-github-domain\"", "var_name": "DOMAIN_NAME"}, {"original_string": "static final String CREDENTIAL_DESCRIPTION = \"GitHub Access Token\";", "modifier": "static final", "type": "String", "declarator": "CREDENTIAL_DESCRIPTION = \"GitHub Access Token\"", "var_name": "CREDENTIAL_DESCRIPTION"}, {"original_string": "protected final Reachable parent;", "modifier": "protected final", "type": "Reachable", "declarator": "parent", "var_name": "parent"}], "methods": [{"identifier": "getMappingObjectWriter", "parameters": "()", "modifiers": "@Nonnull static", "return": "ObjectWriter", "signature": "ObjectWriter getMappingObjectWriter()", "full_signature": "@Nonnull static ObjectWriter getMappingObjectWriter()", "class_method_signature": "GithubScm.getMappingObjectWriter()", "testcase": false, "constructor": false}, {"identifier": "getMappingObjectReader", "parameters": "()", "modifiers": "@Nonnull static", "return": "ObjectReader", "signature": "ObjectReader getMappingObjectReader()", "full_signature": "@Nonnull static ObjectReader getMappingObjectReader()", "class_method_signature": "GithubScm.getMappingObjectReader()", "testcase": false, "constructor": false}, {"identifier": "GithubScm", "parameters": "(Reachable parent)", "modifiers": "public", "return": "", "signature": " GithubScm(Reachable parent)", "full_signature": "public  GithubScm(Reachable parent)", "class_method_signature": "GithubScm.GithubScm(Reachable parent)", "testcase": false, "constructor": true}, {"identifier": "getLink", "parameters": "()", "modifiers": "@Override public", "return": "Link", "signature": "Link getLink()", "full_signature": "@Override public Link getLink()", "class_method_signature": "GithubScm.getLink()", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "@Override public @Nonnull", "return": "String", "signature": "String getId()", "full_signature": "@Override public @Nonnull String getId()", "class_method_signature": "GithubScm.getId()", "testcase": false, "constructor": false}, {"identifier": "getUri", "parameters": "()", "modifiers": "@Override public @Nonnull", "return": "String", "signature": "String getUri()", "full_signature": "@Override public @Nonnull String getUri()", "class_method_signature": "GithubScm.getUri()", "testcase": false, "constructor": false}, {"identifier": "getCredentialDomainName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCredentialDomainName()", "full_signature": "public String getCredentialDomainName()", "class_method_signature": "GithubScm.getCredentialDomainName()", "testcase": false, "constructor": false}, {"identifier": "getCredentialId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getCredentialId()", "full_signature": "@Override public String getCredentialId()", "class_method_signature": "GithubScm.getCredentialId()", "testcase": false, "constructor": false}, {"identifier": "getCredential", "parameters": "(String apiUrl)", "modifiers": "", "return": "StandardUsernamePasswordCredentials", "signature": "StandardUsernamePasswordCredentials getCredential(String apiUrl)", "full_signature": " StandardUsernamePasswordCredentials getCredential(String apiUrl)", "class_method_signature": "GithubScm.getCredential(String apiUrl)", "testcase": false, "constructor": false}, {"identifier": "getState", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object getState()", "full_signature": "@Override public Object getState()", "class_method_signature": "GithubScm.getState()", "testcase": false, "constructor": false}, {"identifier": "getOrganizations", "parameters": "()", "modifiers": "@Override public", "return": "Container<ScmOrganization>", "signature": "Container<ScmOrganization> getOrganizations()", "full_signature": "@Override public Container<ScmOrganization> getOrganizations()", "class_method_signature": "GithubScm.getOrganizations()", "testcase": false, "constructor": false}, {"identifier": "getServers", "parameters": "()", "modifiers": "@Override public", "return": "ScmServerEndpointContainer", "signature": "ScmServerEndpointContainer getServers()", "full_signature": "@Override public ScmServerEndpointContainer getServers()", "class_method_signature": "GithubScm.getServers()", "testcase": false, "constructor": false}, {"identifier": "isOrganizationAvatarSupported", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isOrganizationAvatarSupported()", "full_signature": "public boolean isOrganizationAvatarSupported()", "class_method_signature": "GithubScm.isOrganizationAvatarSupported()", "testcase": false, "constructor": false}, {"identifier": "createCredentialId", "parameters": "(@Nonnull String apiUrl)", "modifiers": "protected @Nonnull", "return": "String", "signature": "String createCredentialId(@Nonnull String apiUrl)", "full_signature": "protected @Nonnull String createCredentialId(@Nonnull String apiUrl)", "class_method_signature": "GithubScm.createCredentialId(@Nonnull String apiUrl)", "testcase": false, "constructor": false}, {"identifier": "getCredentialDescription", "parameters": "()", "modifiers": "protected @Nonnull", "return": "String", "signature": "String getCredentialDescription()", "full_signature": "protected @Nonnull String getCredentialDescription()", "class_method_signature": "GithubScm.getCredentialDescription()", "testcase": false, "constructor": false}, {"identifier": "getCustomApiUri", "parameters": "()", "modifiers": "protected @Nonnull", "return": "String", "signature": "String getCustomApiUri()", "full_signature": "protected @Nonnull String getCustomApiUri()", "class_method_signature": "GithubScm.getCustomApiUri()", "testcase": false, "constructor": false}, {"identifier": "normalizeUrl", "parameters": "(@Nonnull String apiUrl)", "modifiers": "static", "return": "String", "signature": "String normalizeUrl(@Nonnull String apiUrl)", "full_signature": "static String normalizeUrl(@Nonnull String apiUrl)", "class_method_signature": "GithubScm.normalizeUrl(@Nonnull String apiUrl)", "testcase": false, "constructor": false}, {"identifier": "validateAndCreate", "parameters": "(@JsonBody JSONObject request)", "modifiers": "@Override public", "return": "HttpResponse", "signature": "HttpResponse validateAndCreate(@JsonBody JSONObject request)", "full_signature": "@Override public HttpResponse validateAndCreate(@JsonBody JSONObject request)", "class_method_signature": "GithubScm.validateAndCreate(@JsonBody JSONObject request)", "testcase": false, "constructor": false}, {"identifier": "connect", "parameters": "(String apiUrl, String accessToken)", "modifiers": "protected static", "return": "HttpURLConnection", "signature": "HttpURLConnection connect(String apiUrl, String accessToken)", "full_signature": "protected static HttpURLConnection connect(String apiUrl, String accessToken)", "class_method_signature": "GithubScm.connect(String apiUrl, String accessToken)", "testcase": false, "constructor": false}, {"identifier": "validateExistingAccessToken", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void validateExistingAccessToken()", "full_signature": "protected void validateExistingAccessToken()", "class_method_signature": "GithubScm.validateExistingAccessToken()", "testcase": false, "constructor": false}, {"identifier": "validateAccessTokenScopes", "parameters": "(HttpURLConnection connection)", "modifiers": "static", "return": "void", "signature": "void validateAccessTokenScopes(HttpURLConnection connection)", "full_signature": "static void validateAccessTokenScopes(HttpURLConnection connection)", "class_method_signature": "GithubScm.validateAccessTokenScopes(HttpURLConnection connection)", "testcase": false, "constructor": false}, {"identifier": "validateUserHasPushPermission", "parameters": "(@Nonnull String apiUrl, @Nullable String accessToken, @Nullable String owner, @Nullable String repoName)", "modifiers": "static", "return": "void", "signature": "void validateUserHasPushPermission(@Nonnull String apiUrl, @Nullable String accessToken, @Nullable String owner, @Nullable String repoName)", "full_signature": "static void validateUserHasPushPermission(@Nonnull String apiUrl, @Nullable String accessToken, @Nullable String owner, @Nullable String repoName)", "class_method_signature": "GithubScm.validateUserHasPushPermission(@Nonnull String apiUrl, @Nullable String accessToken, @Nullable String owner, @Nullable String repoName)", "testcase": false, "constructor": false}], "file": "blueocean-github-pipeline/src/main/java/io/jenkins/blueocean/blueocean_github_pipeline/GithubScm.java"}, "focal_method": {"identifier": "getOrganizations", "parameters": "()", "modifiers": "@Override public", "return": "Container<ScmOrganization>", "body": "@Override\n    public Container<ScmOrganization> getOrganizations() {\n        StaplerRequest request = Stapler.getCurrentRequest();\n        String credentialId = GithubCredentialUtils.computeCredentialId(getCredentialIdFromRequest(request), getId(), getUri());\n\n        User authenticatedUser = getAuthenticatedUser();\n        final StandardUsernamePasswordCredentials credential = CredentialsUtils.findCredential(credentialId, StandardUsernamePasswordCredentials.class, new BlueOceanDomainRequirement());\n\n        if(credential == null){\n            throw new ServiceException.BadRequestException(String.format(\"Credential id: %s not found for user %s\", credentialId, authenticatedUser.getId()));\n        }\n\n        String accessToken = credential.getPassword().getPlainText();\n\n        try {\n            GitHub github = GitHubFactory.connect(accessToken, getUri());\n\n            final Link link = getLink().rel(\"organizations\");\n\n            Map<String, ScmOrganization> orgMap = new LinkedHashMap<>(); // preserve the same order that github org api returns\n\n            for(Map.Entry<String, GHOrganization> entry: github.getMyOrganizations().entrySet()){\n                    orgMap.put(entry.getKey(),\n                            new GithubOrganization(GithubScm.this, entry.getValue(), credential, link));\n            }\n\n            GHMyself user = github.getMyself();\n            if(orgMap.get(user.getLogin()) == null){ //this is to take care of case if/when github starts reporting user login as org later on\n                orgMap = new HashMap<>(orgMap);\n                orgMap.put(user.getLogin(), new GithubUserOrganization(user, credential, this));\n            }\n            final Map<String, ScmOrganization> orgs = orgMap;\n            return new Container<ScmOrganization>() {\n                @Override\n                public ScmOrganization get(String name) {\n                    ScmOrganization org = orgs.get(name);\n                    if(org == null){\n                        throw new ServiceException.NotFoundException(String.format(\"GitHub organization %s not found\", name));\n                    }\n                    return org;\n                }\n\n                @Override\n                public Link getLink() {\n                    return link;\n                }\n\n                @Override\n                public Iterator<ScmOrganization> iterator() {\n                    return orgs.values().iterator();\n                }\n            };\n        } catch (IOException e) {\n            if(e instanceof HttpException) {\n                HttpException ex = (HttpException) e;\n                if (ex.getResponseCode() == 401) {\n                    throw new ServiceException\n                            .PreconditionRequired(\"Invalid GitHub accessToken\", ex);\n                }else if(ex.getResponseCode() == 403){\n                    throw new ServiceException\n                            .PreconditionRequired(\"GitHub accessToken does not have required scopes. Expected scopes 'user:email, repo'\", ex);\n                }\n            }\n            throw new ServiceException.UnexpectedErrorException(e.getMessage(), e);\n        }\n    }", "signature": "Container<ScmOrganization> getOrganizations()", "full_signature": "@Override public Container<ScmOrganization> getOrganizations()", "class_method_signature": "GithubScm.getOrganizations()", "testcase": false, "constructor": false, "invocations": ["getCurrentRequest", "computeCredentialId", "getCredentialIdFromRequest", "getId", "getUri", "getAuthenticatedUser", "findCredential", "format", "getId", "getPlainText", "getPassword", "connect", "getUri", "rel", "getLink", "entrySet", "getMyOrganizations", "put", "getKey", "getValue", "getMyself", "get", "getLogin", "put", "getLogin", "get", "format", "iterator", "values", "getResponseCode", "getResponseCode", "getMessage"]}, "repository": {"repo_id": 50250915, "url": "https://github.com/jenkinsci/blueocean-plugin", "stars": 2605, "created": "1/23/2016 6:02:45 PM +00:00", "updates": "2020-01-25T17:58:46+00:00", "fork": "False", "license": "licensed"}}