{"test_class": {"identifier": "SavepointCoordinatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-runtime/src/test/java/org/apache/flink/runtime/checkpoint/SavepointCoordinatorTest.java"}, "test_case": {"identifier": "testAbortSavepointIfTriggerTasksNotExecuted", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAbortSavepointIfTriggerTasksNotExecuted() throws Exception {\n\t\tJobID jobId = new JobID();\n\t\tExecutionVertex[] triggerVertices = new ExecutionVertex[] {\n\t\t\t\tmock(ExecutionVertex.class),\n\t\t\t\tmock(ExecutionVertex.class) };\n\t\tExecutionVertex[] ackVertices = new ExecutionVertex[] {\n\t\t\t\tmockExecutionVertex(jobId),\n\t\t\t\tmockExecutionVertex(jobId) };\n\n\t\tSavepointCoordinator coordinator = createSavepointCoordinator(\n\t\t\t\tjobId,\n\t\t\t\t60 * 1000,\n\t\t\t\ttriggerVertices,\n\t\t\t\tackVertices,\n\t\t\t\tnew ExecutionVertex[] {},\n\t\t\t\tnew MockCheckpointIdCounter(),\n\t\t\t\tnew HeapStateStore<CompletedCheckpoint>());\n\n\t\t// Trigger savepoint\n\t\tFuture<String> savepointPathFuture = coordinator.triggerSavepoint(1238123);\n\n\t\t// Abort the savepoint, because the vertices are not running\n\t\tassertTrue(savepointPathFuture.isCompleted());\n\n\t\ttry {\n\t\t\tAwait.result(savepointPathFuture, FiniteDuration.Zero());\n\t\t\tfail(\"Did not throw expected Exception after shutdown\");\n\t\t}\n\t\tcatch (Exception ignored) {\n\t\t}\n\n\t\t// Verify all promises removed\n\t\tassertEquals(0, getSavepointPromises(coordinator).size());\n\n\t\tcoordinator.shutdown();\n\t}", "signature": "void testAbortSavepointIfTriggerTasksNotExecuted()", "full_signature": "@Test public void testAbortSavepointIfTriggerTasksNotExecuted()", "class_method_signature": "SavepointCoordinatorTest.testAbortSavepointIfTriggerTasksNotExecuted()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mockExecutionVertex", "mockExecutionVertex", "createSavepointCoordinator", "triggerSavepoint", "assertTrue", "isCompleted", "result", "Zero", "fail", "assertEquals", "size", "getSavepointPromises", "shutdown"]}, "focal_class": {"identifier": "SavepointCoordinator", "superclass": "extends CheckpointCoordinator", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(SavepointCoordinator.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(SavepointCoordinator.class)", "var_name": "LOG"}, {"original_string": "private StateStore<CompletedCheckpoint> savepointStore;", "modifier": "private", "type": "StateStore<CompletedCheckpoint>", "declarator": "savepointStore", "var_name": "savepointStore"}, {"original_string": "private final Map<Long, Promise<String>> savepointPromises;", "modifier": "private final", "type": "Map<Long, Promise<String>>", "declarator": "savepointPromises", "var_name": "savepointPromises"}, {"original_string": "private volatile String savepointRestorePath;", "modifier": "private volatile", "type": "String", "declarator": "savepointRestorePath", "var_name": "savepointRestorePath"}], "methods": [{"identifier": "SavepointCoordinator", "parameters": "(\n\t\t\tJobID jobId,\n\t\t\tlong baseInterval,\n\t\t\tlong checkpointTimeout,\n\t\t\tExecutionVertex[] tasksToTrigger,\n\t\t\tExecutionVertex[] tasksToWaitFor,\n\t\t\tExecutionVertex[] tasksToCommitTo,\n\t\t\tClassLoader userClassLoader,\n\t\t\tCheckpointIDCounter checkpointIDCounter,\n\t\t\tStateStore<CompletedCheckpoint> savepointStore,\n\t\t\tCheckpointStatsTracker statsTracker)", "modifiers": "public", "return": "", "signature": " SavepointCoordinator(\n\t\t\tJobID jobId,\n\t\t\tlong baseInterval,\n\t\t\tlong checkpointTimeout,\n\t\t\tExecutionVertex[] tasksToTrigger,\n\t\t\tExecutionVertex[] tasksToWaitFor,\n\t\t\tExecutionVertex[] tasksToCommitTo,\n\t\t\tClassLoader userClassLoader,\n\t\t\tCheckpointIDCounter checkpointIDCounter,\n\t\t\tStateStore<CompletedCheckpoint> savepointStore,\n\t\t\tCheckpointStatsTracker statsTracker)", "full_signature": "public  SavepointCoordinator(\n\t\t\tJobID jobId,\n\t\t\tlong baseInterval,\n\t\t\tlong checkpointTimeout,\n\t\t\tExecutionVertex[] tasksToTrigger,\n\t\t\tExecutionVertex[] tasksToWaitFor,\n\t\t\tExecutionVertex[] tasksToCommitTo,\n\t\t\tClassLoader userClassLoader,\n\t\t\tCheckpointIDCounter checkpointIDCounter,\n\t\t\tStateStore<CompletedCheckpoint> savepointStore,\n\t\t\tCheckpointStatsTracker statsTracker)", "class_method_signature": "SavepointCoordinator.SavepointCoordinator(\n\t\t\tJobID jobId,\n\t\t\tlong baseInterval,\n\t\t\tlong checkpointTimeout,\n\t\t\tExecutionVertex[] tasksToTrigger,\n\t\t\tExecutionVertex[] tasksToWaitFor,\n\t\t\tExecutionVertex[] tasksToCommitTo,\n\t\t\tClassLoader userClassLoader,\n\t\t\tCheckpointIDCounter checkpointIDCounter,\n\t\t\tStateStore<CompletedCheckpoint> savepointStore,\n\t\t\tCheckpointStatsTracker statsTracker)", "testcase": false, "constructor": true}, {"identifier": "getSavepointRestorePath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSavepointRestorePath()", "full_signature": "public String getSavepointRestorePath()", "class_method_signature": "SavepointCoordinator.getSavepointRestorePath()", "testcase": false, "constructor": false}, {"identifier": "triggerSavepoint", "parameters": "(long timestamp)", "modifiers": "public", "return": "Future<String>", "signature": "Future<String> triggerSavepoint(long timestamp)", "full_signature": "public Future<String> triggerSavepoint(long timestamp)", "class_method_signature": "SavepointCoordinator.triggerSavepoint(long timestamp)", "testcase": false, "constructor": false}, {"identifier": "restoreSavepoint", "parameters": "(\n\t\t\tMap<JobVertexID, ExecutionJobVertex> tasks,\n\t\t\tString savepointPath)", "modifiers": "public", "return": "void", "signature": "void restoreSavepoint(\n\t\t\tMap<JobVertexID, ExecutionJobVertex> tasks,\n\t\t\tString savepointPath)", "full_signature": "public void restoreSavepoint(\n\t\t\tMap<JobVertexID, ExecutionJobVertex> tasks,\n\t\t\tString savepointPath)", "class_method_signature": "SavepointCoordinator.restoreSavepoint(\n\t\t\tMap<JobVertexID, ExecutionJobVertex> tasks,\n\t\t\tString savepointPath)", "testcase": false, "constructor": false}, {"identifier": "onShutdown", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void onShutdown()", "full_signature": "@Override protected void onShutdown()", "class_method_signature": "SavepointCoordinator.onShutdown()", "testcase": false, "constructor": false}, {"identifier": "onCancelCheckpoint", "parameters": "(long canceledCheckpointId)", "modifiers": "@Override protected", "return": "void", "signature": "void onCancelCheckpoint(long canceledCheckpointId)", "full_signature": "@Override protected void onCancelCheckpoint(long canceledCheckpointId)", "class_method_signature": "SavepointCoordinator.onCancelCheckpoint(long canceledCheckpointId)", "testcase": false, "constructor": false}, {"identifier": "onFullyAcknowledgedCheckpoint", "parameters": "(CompletedCheckpoint checkpoint)", "modifiers": "@Override protected", "return": "void", "signature": "void onFullyAcknowledgedCheckpoint(CompletedCheckpoint checkpoint)", "full_signature": "@Override protected void onFullyAcknowledgedCheckpoint(CompletedCheckpoint checkpoint)", "class_method_signature": "SavepointCoordinator.onFullyAcknowledgedCheckpoint(CompletedCheckpoint checkpoint)", "testcase": false, "constructor": false}, {"identifier": "createActivatorDeactivator", "parameters": "(\n\t\t\tActorSystem actorSystem,\n\t\t\tUUID leaderSessionID)", "modifiers": "@Override public", "return": "ActorGateway", "signature": "ActorGateway createActivatorDeactivator(\n\t\t\tActorSystem actorSystem,\n\t\t\tUUID leaderSessionID)", "full_signature": "@Override public ActorGateway createActivatorDeactivator(\n\t\t\tActorSystem actorSystem,\n\t\t\tUUID leaderSessionID)", "class_method_signature": "SavepointCoordinator.createActivatorDeactivator(\n\t\t\tActorSystem actorSystem,\n\t\t\tUUID leaderSessionID)", "testcase": false, "constructor": false}], "file": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/SavepointCoordinator.java"}, "focal_method": {"identifier": "triggerSavepoint", "parameters": "(long timestamp)", "modifiers": "public", "return": "Future<String>", "body": "public Future<String> triggerSavepoint(long timestamp) throws Exception {\n\t\tfinal Promise<String> promise = new scala.concurrent.impl.Promise.DefaultPromise<>();\n\n\t\ttry {\n\t\t\t// Get the checkpoint ID up front. If we fail to trigger the checkpoint,\n\t\t\t// the ID will have changed, but this is OK as long as the checkpoint ID\n\t\t\t// generates ascending IDs.\n\t\t\tfinal long checkpointId = getAndIncrementCheckpointId();\n\n\t\t\tif (checkpointId == -1) {\n\t\t\t\tthrow new IllegalStateException(\"Failed to get checkpoint Id\");\n\t\t\t}\n\n\t\t\t// Important: make sure to add the promise to the map before calling\n\t\t\t// any methods that might trigger callbacks, which require the promise.\n\t\t\t// Otherwise, the might be race conditions.\n\t\t\tif (savepointPromises.put(checkpointId, promise) == null) {\n\t\t\t\tboolean success = false;\n\n\t\t\t\ttry {\n\t\t\t\t\t// All good. The future will be completed as soon as the\n\t\t\t\t\t// triggered checkpoint is done.\n\t\t\t\t\tsuccess = triggerCheckpoint(timestamp, checkpointId);\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\tif (!success) {\n\t\t\t\t\t\tsavepointPromises.remove(checkpointId);\n\t\t\t\t\t\tpromise.failure(new Exception(\"Failed to trigger savepoint\"));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new IllegalStateException(\"Duplicate checkpoint ID\");\n\t\t\t}\n\t\t}\n\t\tcatch (Throwable t) {\n\t\t\tpromise.failure(new Exception(\"Failed to trigger savepoint\", t));\n\t\t}\n\n\t\treturn promise.future();\n\t}", "signature": "Future<String> triggerSavepoint(long timestamp)", "full_signature": "public Future<String> triggerSavepoint(long timestamp)", "class_method_signature": "SavepointCoordinator.triggerSavepoint(long timestamp)", "testcase": false, "constructor": false, "invocations": ["getAndIncrementCheckpointId", "put", "triggerCheckpoint", "remove", "failure", "failure", "future"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}