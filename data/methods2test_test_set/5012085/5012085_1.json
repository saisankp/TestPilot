{"test_class": {"identifier": "ConcurrentUUIDFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "netflix-commons-util/src/test/java/com/netflix/util/concurrent/ConcurrentUUIDFactoryTest.java"}, "test_case": {"identifier": "testGenerateRandomUuidVersionAndVariant", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGenerateRandomUuidVersionAndVariant() throws Exception {\n        final UUID uuid = new ConcurrentUUIDFactory().generateRandomUuid();\n\n        Assert.assertEquals(4, uuid.version());\n        Assert.assertEquals(2, uuid.variant());\n    }", "signature": "void testGenerateRandomUuidVersionAndVariant()", "full_signature": "@Test public void testGenerateRandomUuidVersionAndVariant()", "class_method_signature": "ConcurrentUUIDFactoryTest.testGenerateRandomUuidVersionAndVariant()", "testcase": true, "constructor": false, "invocations": ["generateRandomUuid", "assertEquals", "version", "assertEquals", "variant"]}, "focal_class": {"identifier": "ConcurrentUUIDFactory", "superclass": "", "interfaces": "implements UUIDFactory", "fields": [], "methods": [{"identifier": "generateRandomUuid", "parameters": "()", "modifiers": "@Override public", "return": "UUID", "signature": "UUID generateRandomUuid()", "full_signature": "@Override public UUID generateRandomUuid()", "class_method_signature": "ConcurrentUUIDFactory.generateRandomUuid()", "testcase": false, "constructor": false}], "file": "netflix-commons-util/src/main/java/com/netflix/util/concurrent/ConcurrentUUIDFactory.java"}, "focal_method": {"identifier": "generateRandomUuid", "parameters": "()", "modifiers": "@Override public", "return": "UUID", "body": "@Override\n    public UUID generateRandomUuid() {\n        final Random rnd = ThreadLocalRandom.current();\n        long mostSig  = rnd.nextLong();\n        long leastSig = rnd.nextLong();\n\n        // Identify this as a version 4 UUID, that is one based on a random value.\n        mostSig &= 0xffffffffffff0fffL;\n        mostSig |= 0x0000000000004000L;\n\n        // Set the variant identifier as specified for version 4 UUID values.  The two\n        // high order bits of the lower word are required to be one and zero, respectively.\n        leastSig &= 0x3fffffffffffffffL;\n        leastSig |= 0x8000000000000000L;\n\n        return new UUID(mostSig, leastSig);\n    }", "signature": "UUID generateRandomUuid()", "full_signature": "@Override public UUID generateRandomUuid()", "class_method_signature": "ConcurrentUUIDFactory.generateRandomUuid()", "testcase": false, "constructor": false, "invocations": ["current", "nextLong", "nextLong"]}, "repository": {"repo_id": 5012085, "url": "https://github.com/Netflix/netflix-commons", "language": "Java", "is_fork": false, "fork_count": 74, "stargazer_count": 145, "size": 404, "license": "licensed"}}