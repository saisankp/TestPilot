{"test_class": {"identifier": "TeamServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(TeamServiceTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(TeamServiceTest.class)", "var_name": "LOG"}, {"original_string": "TeamService teamService = new TeamService();", "modifier": "", "type": "TeamService", "declarator": "teamService = new TeamService()", "var_name": "teamService"}], "file": "submarine-server/server-core/src/test/java/org/apache/submarine/server/workbench/database/service/TeamServiceTest.java"}, "test_case": {"identifier": "queryPageList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void queryPageList() throws Exception {\n    TeamMember teamMember = new TeamMember();\n    teamMember.setTeamName(\"submarine\");\n    teamMember.setInviter(0);\n    teamMember.setMember(\"admin\");\n    teamMember.setCreateBy(\"createByteamMember\");\n\n    Team team = new Team();\n    team.setTeamName(\"submarine\");\n    team.setOwner(\"test_sub\");\n    team.setCreateBy(\"createByteam\");\n    List list = new ArrayList<TeamMember>();\n    list.add(teamMember);\n    team.setCollaborators(list);\n    Boolean ret = teamService.add(team);\n    assertTrue(ret);\n\n    List<Team> teamList = teamService.queryPageList(\"test_sub\", \"create_time\", \"desc\", 0, 100);\n    assertEquals(teamList.size(), 1);\n    Team teamDb = teamList.get(0);\n    assertEquals(team.getTeamName(), teamDb.getTeamName());\n    assertEquals(team.getOwner(), teamDb.getOwner());\n    assertEquals(team.getCreateBy(), teamDb.getCreateBy());\n\n    assertEquals(teamDb.getCollaborators().size(), 1);\n    TeamMember teamMemberDb = teamDb.getCollaborators().get(0);\n    assertEquals(team.getId(), teamMemberDb.getTeamId());\n    assertEquals(teamMember.getTeamName(), teamMemberDb.getTeamName());\n    assertEquals(teamMember.getInviter(), teamMemberDb.getInviter());\n    assertEquals(teamMember.getMember(), teamMemberDb.getMember());\n    assertEquals(teamMember.getCreateBy(), teamMemberDb.getCreateBy());\n  }", "signature": "void queryPageList()", "full_signature": "@Test public void queryPageList()", "class_method_signature": "TeamServiceTest.queryPageList()", "testcase": true, "constructor": false, "invocations": ["setTeamName", "setInviter", "setMember", "setCreateBy", "setTeamName", "setOwner", "setCreateBy", "add", "setCollaborators", "add", "assertTrue", "queryPageList", "assertEquals", "size", "get", "assertEquals", "getTeamName", "getTeamName", "assertEquals", "getOwner", "getOwner", "assertEquals", "getCreateBy", "getCreateBy", "assertEquals", "size", "getCollaborators", "get", "getCollaborators", "assertEquals", "getId", "getTeamId", "assertEquals", "getTeamName", "getTeamName", "assertEquals", "getInviter", "getInviter", "assertEquals", "getMember", "getMember", "assertEquals", "getCreateBy", "getCreateBy"]}, "focal_class": {"identifier": "TeamService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(TeamService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(TeamService.class)", "var_name": "LOG"}], "methods": [{"identifier": "queryPageList", "parameters": "(String owner,\n                                  String column,\n                                  String order,\n                                  int pageNo,\n                                  int pageSize)", "modifiers": "public", "return": "List<Team>", "signature": "List<Team> queryPageList(String owner,\n                                  String column,\n                                  String order,\n                                  int pageNo,\n                                  int pageSize)", "full_signature": "public List<Team> queryPageList(String owner,\n                                  String column,\n                                  String order,\n                                  int pageNo,\n                                  int pageSize)", "class_method_signature": "TeamService.queryPageList(String owner,\n                                  String column,\n                                  String order,\n                                  int pageNo,\n                                  int pageSize)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Team team)", "modifiers": "public", "return": "boolean", "signature": "boolean add(Team team)", "full_signature": "public boolean add(Team team)", "class_method_signature": "TeamService.add(Team team)", "testcase": false, "constructor": false}, {"identifier": "updateByPrimaryKeySelective", "parameters": "(Team team)", "modifiers": "public", "return": "boolean", "signature": "boolean updateByPrimaryKeySelective(Team team)", "full_signature": "public boolean updateByPrimaryKeySelective(Team team)", "class_method_signature": "TeamService.updateByPrimaryKeySelective(Team team)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(String id)", "modifiers": "public", "return": "boolean", "signature": "boolean delete(String id)", "full_signature": "public boolean delete(String id)", "class_method_signature": "TeamService.delete(String id)", "testcase": false, "constructor": false}], "file": "submarine-server/server-core/src/main/java/org/apache/submarine/server/workbench/database/service/TeamService.java"}, "focal_method": {"identifier": "queryPageList", "parameters": "(String owner,\n                                  String column,\n                                  String order,\n                                  int pageNo,\n                                  int pageSize)", "modifiers": "public", "return": "List<Team>", "body": "public List<Team> queryPageList(String owner,\n                                  String column,\n                                  String order,\n                                  int pageNo,\n                                  int pageSize) throws Exception {\n    LOG.info(\"queryPageList owner:{}, column:{}, order:{}, pageNo:{}, pageSize:{}\",\n        owner, column, order, pageNo, pageSize);\n\n    List<Team> list = null;\n    try (SqlSession sqlSession = MyBatisUtil.getSqlSession()) {\n      TeamMapper teamMapper = sqlSession.getMapper(TeamMapper.class);\n      Map<String, Object> where = new HashMap<>();\n      where.put(\"owner\", owner);\n      where.put(\"column\", column);\n      where.put(\"order\", order);\n      list = teamMapper.selectAll(where, new RowBounds(pageNo, pageSize));\n\n      TeamMemberMapper teamMemberMapper = sqlSession.getMapper(TeamMemberMapper.class);\n      // query from team_member table, and set to team\n      for (Team team : list) {\n        Map<String, Object> whereMember = new HashMap<>();\n        whereMember.put(\"teamId\", team.getId());\n        List<TeamMember> teamMembers = teamMemberMapper.selectAll(whereMember);\n        for (TeamMember teamMember : teamMembers) {\n          team.addCollaborator(teamMember);\n        }\n      }\n    } catch (Exception e) {\n      LOG.error(e.getMessage(), e);\n      throw new Exception(e);\n    }\n    return list;\n  }", "signature": "List<Team> queryPageList(String owner,\n                                  String column,\n                                  String order,\n                                  int pageNo,\n                                  int pageSize)", "full_signature": "public List<Team> queryPageList(String owner,\n                                  String column,\n                                  String order,\n                                  int pageNo,\n                                  int pageSize)", "class_method_signature": "TeamService.queryPageList(String owner,\n                                  String column,\n                                  String order,\n                                  int pageNo,\n                                  int pageSize)", "testcase": false, "constructor": false, "invocations": ["info", "getSqlSession", "getMapper", "put", "put", "put", "selectAll", "getMapper", "put", "getId", "selectAll", "addCollaborator", "error", "getMessage"]}, "repository": {"repo_id": 209459144, "url": "https://github.com/apache/submarine", "stars": 185, "created": "9/19/2019 4:00:17 AM +00:00", "updates": "2020-01-27T15:27:05+00:00", "fork": "False", "license": "licensed"}}