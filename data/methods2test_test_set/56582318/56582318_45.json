{"test_class": {"identifier": "GM_LineStringTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "IDirectPosition p1;", "modifier": "", "type": "IDirectPosition", "declarator": "p1", "var_name": "p1"}, {"original_string": "IDirectPosition p2;", "modifier": "", "type": "IDirectPosition", "declarator": "p2", "var_name": "p2"}, {"original_string": "IDirectPosition p3;", "modifier": "", "type": "IDirectPosition", "declarator": "p3", "var_name": "p3"}, {"original_string": "IDirectPosition p4;", "modifier": "", "type": "IDirectPosition", "declarator": "p4", "var_name": "p4"}, {"original_string": "IDirectPosition p5;", "modifier": "", "type": "IDirectPosition", "declarator": "p5", "var_name": "p5"}, {"original_string": "IDirectPosition p6;", "modifier": "", "type": "IDirectPosition", "declarator": "p6", "var_name": "p6"}, {"original_string": "GM_LineString line1;", "modifier": "", "type": "GM_LineString", "declarator": "line1", "var_name": "line1"}, {"original_string": "GM_LineString line2;", "modifier": "", "type": "GM_LineString", "declarator": "line2", "var_name": "line2"}, {"original_string": "GM_Curve curve;", "modifier": "", "type": "GM_Curve", "declarator": "curve", "var_name": "curve"}], "file": "geoxygene-spatial/src/test/java/fr/ign/cogit/geoxygene/spatial/coordgeom/GM_LineStringTest.java"}, "test_case": {"identifier": "testParamForPoint", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testParamForPoint() {\n    double param = line1.paramForPoint(new DirectPosition(1, 0.5, 0))[0];\n    Assert.assertEquals(1.5, param, 0.01);\n    param = curve.paramForPoint(new DirectPosition(1, 0.5, 0))[0];\n    Assert.assertEquals(1.5, param, 0.01);\n    param = line2.paramForPoint(p5)[0];\n    Assert.assertEquals(1, param, 0.01);\n    param = curve.paramForPoint(p5)[0];\n    Assert.assertEquals(4, param, 0.01);\n  }", "signature": "void testParamForPoint()", "full_signature": "@Test public void testParamForPoint()", "class_method_signature": "GM_LineStringTest.testParamForPoint()", "testcase": true, "constructor": false, "invocations": ["paramForPoint", "assertEquals", "paramForPoint", "assertEquals", "paramForPoint", "assertEquals", "paramForPoint", "assertEquals"]}, "focal_class": {"identifier": "GM_LineString", "superclass": "extends GM_CurveSegment", "interfaces": "implements ILineString", "fields": [{"original_string": "private static Logger LOGGER = Logger\n      .getLogger(GM_LineString.class.getName());", "modifier": "private static", "type": "Logger", "declarator": "LOGGER = Logger\n      .getLogger(GM_LineString.class.getName())", "var_name": "LOGGER"}, {"original_string": "protected IDirectPositionList controlPoint;", "modifier": "protected", "type": "IDirectPositionList", "declarator": "controlPoint", "var_name": "controlPoint"}], "methods": [{"identifier": "getControlPoint", "parameters": "()", "modifiers": "@Override public", "return": "IDirectPositionList", "signature": "IDirectPositionList getControlPoint()", "full_signature": "@Override public IDirectPositionList getControlPoint()", "class_method_signature": "GM_LineString.getControlPoint()", "testcase": false, "constructor": false}, {"identifier": "getControlPoint", "parameters": "(int i)", "modifiers": "@Override public", "return": "IDirectPosition", "signature": "IDirectPosition getControlPoint(int i)", "full_signature": "@Override public IDirectPosition getControlPoint(int i)", "class_method_signature": "GM_LineString.getControlPoint(int i)", "testcase": false, "constructor": false}, {"identifier": "setControlPoint", "parameters": "(int i, IDirectPosition value)", "modifiers": "@Override public", "return": "void", "signature": "void setControlPoint(int i, IDirectPosition value)", "full_signature": "@Override public void setControlPoint(int i, IDirectPosition value)", "class_method_signature": "GM_LineString.setControlPoint(int i, IDirectPosition value)", "testcase": false, "constructor": false}, {"identifier": "addControlPoint", "parameters": "(IDirectPosition value)", "modifiers": "@Override public", "return": "void", "signature": "void addControlPoint(IDirectPosition value)", "full_signature": "@Override public void addControlPoint(IDirectPosition value)", "class_method_signature": "GM_LineString.addControlPoint(IDirectPosition value)", "testcase": false, "constructor": false}, {"identifier": "addControlPoint", "parameters": "(IDirectPosition value, boolean allowRepeated)", "modifiers": "public", "return": "void", "signature": "void addControlPoint(IDirectPosition value, boolean allowRepeated)", "full_signature": "public void addControlPoint(IDirectPosition value, boolean allowRepeated)", "class_method_signature": "GM_LineString.addControlPoint(IDirectPosition value, boolean allowRepeated)", "testcase": false, "constructor": false}, {"identifier": "addControlPoint", "parameters": "(int i, IDirectPosition value)", "modifiers": "@Override public", "return": "void", "signature": "void addControlPoint(int i, IDirectPosition value)", "full_signature": "@Override public void addControlPoint(int i, IDirectPosition value)", "class_method_signature": "GM_LineString.addControlPoint(int i, IDirectPosition value)", "testcase": false, "constructor": false}, {"identifier": "removeControlPoint", "parameters": "(IDirectPosition value)", "modifiers": "@Override public", "return": "void", "signature": "void removeControlPoint(IDirectPosition value)", "full_signature": "@Override public void removeControlPoint(IDirectPosition value)", "class_method_signature": "GM_LineString.removeControlPoint(IDirectPosition value)", "testcase": false, "constructor": false}, {"identifier": "removeControlPoint", "parameters": "(int i)", "modifiers": "@Override public", "return": "void", "signature": "void removeControlPoint(int i)", "full_signature": "@Override public void removeControlPoint(int i)", "class_method_signature": "GM_LineString.removeControlPoint(int i)", "testcase": false, "constructor": false}, {"identifier": "sizeControlPoint", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int sizeControlPoint()", "full_signature": "@Override public int sizeControlPoint()", "class_method_signature": "GM_LineString.sizeControlPoint()", "testcase": false, "constructor": false}, {"identifier": "GM_LineString", "parameters": "(List<IDirectPosition> list, boolean allowRepeated)", "modifiers": "public", "return": "", "signature": " GM_LineString(List<IDirectPosition> list, boolean allowRepeated)", "full_signature": "public  GM_LineString(List<IDirectPosition> list, boolean allowRepeated)", "class_method_signature": "GM_LineString.GM_LineString(List<IDirectPosition> list, boolean allowRepeated)", "testcase": false, "constructor": true}, {"identifier": "GM_LineString", "parameters": "(List<IDirectPosition> list)", "modifiers": "public", "return": "", "signature": " GM_LineString(List<IDirectPosition> list)", "full_signature": "public  GM_LineString(List<IDirectPosition> list)", "class_method_signature": "GM_LineString.GM_LineString(List<IDirectPosition> list)", "testcase": false, "constructor": true}, {"identifier": "GM_LineString", "parameters": "(IDirectPosition... list)", "modifiers": "public", "return": "", "signature": " GM_LineString(IDirectPosition... list)", "full_signature": "public  GM_LineString(IDirectPosition... list)", "class_method_signature": "GM_LineString.GM_LineString(IDirectPosition... list)", "testcase": false, "constructor": true}, {"identifier": "GM_LineString", "parameters": "(IDirectPositionList points)", "modifiers": "public", "return": "", "signature": " GM_LineString(IDirectPositionList points)", "full_signature": "public  GM_LineString(IDirectPositionList points)", "class_method_signature": "GM_LineString.GM_LineString(IDirectPositionList points)", "testcase": false, "constructor": true}, {"identifier": "GM_LineString", "parameters": "(IDirectPositionList points, boolean allowRepeated)", "modifiers": "public", "return": "", "signature": " GM_LineString(IDirectPositionList points, boolean allowRepeated)", "full_signature": "public  GM_LineString(IDirectPositionList points, boolean allowRepeated)", "class_method_signature": "GM_LineString.GM_LineString(IDirectPositionList points, boolean allowRepeated)", "testcase": false, "constructor": true}, {"identifier": "asGM_LineSegment", "parameters": "()", "modifiers": "@Override public", "return": "List<ILineSegment>", "signature": "List<ILineSegment> asGM_LineSegment()", "full_signature": "@Override public List<ILineSegment> asGM_LineSegment()", "class_method_signature": "GM_LineString.asGM_LineSegment()", "testcase": false, "constructor": false}, {"identifier": "coord", "parameters": "()", "modifiers": "@Override public", "return": "IDirectPositionList", "signature": "IDirectPositionList coord()", "full_signature": "@Override public IDirectPositionList coord()", "class_method_signature": "GM_LineString.coord()", "testcase": false, "constructor": false}, {"identifier": "reverse", "parameters": "()", "modifiers": "@Override public", "return": "ILineString", "signature": "ILineString reverse()", "full_signature": "@Override public ILineString reverse()", "class_method_signature": "GM_LineString.reverse()", "testcase": false, "constructor": false}, {"identifier": "isClosed", "parameters": "(double tolerance)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isClosed(double tolerance)", "full_signature": "@Override public boolean isClosed(double tolerance)", "class_method_signature": "GM_LineString.isClosed(double tolerance)", "testcase": false, "constructor": false}, {"identifier": "isClosed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isClosed()", "full_signature": "@Override public boolean isClosed()", "class_method_signature": "GM_LineString.isClosed()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object clone()", "full_signature": "@Override public Object clone()", "class_method_signature": "GM_LineString.clone()", "testcase": false, "constructor": false}, {"identifier": "getNegative", "parameters": "()", "modifiers": "@Override public", "return": "GM_LineString", "signature": "GM_LineString getNegative()", "full_signature": "@Override public GM_LineString getNegative()", "class_method_signature": "GM_LineString.getNegative()", "testcase": false, "constructor": false}, {"identifier": "isLineString", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isLineString()", "full_signature": "@Override public boolean isLineString()", "class_method_signature": "GM_LineString.isLineString()", "testcase": false, "constructor": false}, {"identifier": "getInterpolation", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getInterpolation()", "full_signature": "@Override public String getInterpolation()", "class_method_signature": "GM_LineString.getInterpolation()", "testcase": false, "constructor": false}, {"identifier": "param", "parameters": "(double s)", "modifiers": "@Override public", "return": "IDirectPosition", "signature": "IDirectPosition param(double s)", "full_signature": "@Override public IDirectPosition param(double s)", "class_method_signature": "GM_LineString.param(double s)", "testcase": false, "constructor": false}, {"identifier": "paramForPoint", "parameters": "(IDirectPosition p)", "modifiers": "@Override public", "return": "double[]", "signature": "double[] paramForPoint(IDirectPosition p)", "full_signature": "@Override public double[] paramForPoint(IDirectPosition p)", "class_method_signature": "GM_LineString.paramForPoint(IDirectPosition p)", "testcase": false, "constructor": false}], "file": "geoxygene-spatial/src/main/java/fr/ign/cogit/geoxygene/spatial/coordgeom/GM_LineString.java"}, "focal_method": {"identifier": "paramForPoint", "parameters": "(IDirectPosition p)", "modifiers": "@Override public", "return": "double[]", "body": "@Override\n  public double[] paramForPoint(IDirectPosition p) {\n    double minDistance = Double.POSITIVE_INFINITY;\n    double minParam = -1;\n    double d = 0;\n    for (int i = 0; i < this.sizeControlPoint() - 1; i++) {\n      IDirectPosition p1 = this.getControlPoint(i);\n      IDirectPosition p2 = this.getControlPoint(i + 1);\n      double param = Operateurs.paramForPoint(p, p1, p2);\n      IDirectPosition point = Operateurs.param(param, p1, p2);\n      double distance = p.distance(point);\n      if (distance < minDistance) {\n        minDistance = distance;\n        minParam = d + param;\n      }\n      d += p1.distance(p2);\n    }\n    return new double[] { minParam };\n  }", "signature": "double[] paramForPoint(IDirectPosition p)", "full_signature": "@Override public double[] paramForPoint(IDirectPosition p)", "class_method_signature": "GM_LineString.paramForPoint(IDirectPosition p)", "testcase": false, "constructor": false, "invocations": ["sizeControlPoint", "getControlPoint", "getControlPoint", "paramForPoint", "param", "distance", "distance"]}, "repository": {"repo_id": 56582318, "url": "https://github.com/IGNF/geoxygene", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 22, "size": 323511, "license": "licensed"}}