{"test_class": {"identifier": "BinaryTreeTest", "superclass": "", "interfaces": "", "fields": [], "file": "legacy/src/test/java/org/openscience/cdk/smsd/helper/BinaryTreeTest.java"}, "test_case": {"identifier": "testSetNotEqual", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSetNotEqual() {\n        BinaryTree instance = new BinaryTree(15);\n        BinaryTree equal = new BinaryTree(15);\n        BinaryTree notEqual = new BinaryTree(10);\n        instance.setEqual(equal);\n        instance.setNotEqual(notEqual);\n        BinaryTree expResult = notEqual;\n        BinaryTree result = instance.getNotEqual();\n        assertEquals(expResult, result);\n    }", "signature": "void testSetNotEqual()", "full_signature": "@Test public void testSetNotEqual()", "class_method_signature": "BinaryTreeTest.testSetNotEqual()", "testcase": true, "constructor": false, "invocations": ["setEqual", "setNotEqual", "getNotEqual", "assertEquals"]}, "focal_class": {"identifier": "BinaryTree", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BinaryTree equal    = null;", "modifier": "private", "type": "BinaryTree", "declarator": "equal    = null", "var_name": "equal"}, {"original_string": "private BinaryTree notEqual = null;", "modifier": "private", "type": "BinaryTree", "declarator": "notEqual = null", "var_name": "notEqual"}, {"original_string": "private int        value    = -1;", "modifier": "private", "type": "int", "declarator": "value    = -1", "var_name": "value"}], "methods": [{"identifier": "BinaryTree", "parameters": "(int value)", "modifiers": "public", "return": "", "signature": " BinaryTree(int value)", "full_signature": "public  BinaryTree(int value)", "class_method_signature": "BinaryTree.BinaryTree(int value)", "testcase": false, "constructor": true}, {"identifier": "getValue", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getValue()", "full_signature": "public int getValue()", "class_method_signature": "BinaryTree.getValue()", "testcase": false, "constructor": false}, {"identifier": "getEqual", "parameters": "()", "modifiers": "public", "return": "BinaryTree", "signature": "BinaryTree getEqual()", "full_signature": "public BinaryTree getEqual()", "class_method_signature": "BinaryTree.getEqual()", "testcase": false, "constructor": false}, {"identifier": "setEqual", "parameters": "(BinaryTree equal)", "modifiers": "public", "return": "void", "signature": "void setEqual(BinaryTree equal)", "full_signature": "public void setEqual(BinaryTree equal)", "class_method_signature": "BinaryTree.setEqual(BinaryTree equal)", "testcase": false, "constructor": false}, {"identifier": "getNotEqual", "parameters": "()", "modifiers": "public", "return": "BinaryTree", "signature": "BinaryTree getNotEqual()", "full_signature": "public BinaryTree getNotEqual()", "class_method_signature": "BinaryTree.getNotEqual()", "testcase": false, "constructor": false}, {"identifier": "setNotEqual", "parameters": "(BinaryTree notEqual)", "modifiers": "public", "return": "void", "signature": "void setNotEqual(BinaryTree notEqual)", "full_signature": "public void setNotEqual(BinaryTree notEqual)", "class_method_signature": "BinaryTree.setNotEqual(BinaryTree notEqual)", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/org/openscience/cdk/smsd/helper/BinaryTree.java"}, "focal_method": {"identifier": "setNotEqual", "parameters": "(BinaryTree notEqual)", "modifiers": "public", "return": "void", "body": "public void setNotEqual(BinaryTree notEqual) {\n        this.notEqual = notEqual;\n    }", "signature": "void setNotEqual(BinaryTree notEqual)", "full_signature": "public void setNotEqual(BinaryTree notEqual)", "class_method_signature": "BinaryTree.setNotEqual(BinaryTree notEqual)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}