{"test_class": {"identifier": "DefaultErrorHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public MockitoRule rule = MockitoJUnit.rule();", "modifier": "@Rule public", "type": "MockitoRule", "declarator": "rule = MockitoJUnit.rule()", "var_name": "rule"}, {"original_string": "@Spy private DefaultErrorHandler handler = new DefaultErrorHandler();", "modifier": "@Spy private", "type": "DefaultErrorHandler", "declarator": "handler = new DefaultErrorHandler()", "var_name": "handler"}], "file": "library/src/test/java/com/github/pwittchen/reactivenetwork/library/rx2/internet/observing/error/DefaultErrorHandlerTest.java"}, "test_case": {"identifier": "shouldHandleErrorDuringClosingSocket", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void shouldHandleErrorDuringClosingSocket() {\n    // given\n    final String errorMsg = \"Could not close the socket\";\n    final Exception exception = new Exception(errorMsg);\n\n    // when\n    handler.handleError(exception, errorMsg);\n\n    // then\n    verify(handler, times(1)).handleError(exception, errorMsg);\n  }", "signature": "void shouldHandleErrorDuringClosingSocket()", "full_signature": "@Test public void shouldHandleErrorDuringClosingSocket()", "class_method_signature": "DefaultErrorHandlerTest.shouldHandleErrorDuringClosingSocket()", "testcase": true, "constructor": false, "invocations": ["handleError", "handleError", "verify", "times"]}, "focal_class": {"identifier": "DefaultErrorHandler", "superclass": "", "interfaces": "implements ErrorHandler", "fields": [], "methods": [{"identifier": "handleError", "parameters": "(final Exception exception, final String message)", "modifiers": "@Override public", "return": "void", "signature": "void handleError(final Exception exception, final String message)", "full_signature": "@Override public void handleError(final Exception exception, final String message)", "class_method_signature": "DefaultErrorHandler.handleError(final Exception exception, final String message)", "testcase": false, "constructor": false}], "file": "library/src/main/java/com/github/pwittchen/reactivenetwork/library/rx2/internet/observing/error/DefaultErrorHandler.java"}, "focal_method": {"identifier": "handleError", "parameters": "(final Exception exception, final String message)", "modifiers": "@Override public", "return": "void", "body": "@Override public void handleError(final Exception exception, final String message) {\n    Log.e(LOG_TAG, message, exception);\n  }", "signature": "void handleError(final Exception exception, final String message)", "full_signature": "@Override public void handleError(final Exception exception, final String message)", "class_method_signature": "DefaultErrorHandler.handleError(final Exception exception, final String message)", "testcase": false, "constructor": false, "invocations": ["e"]}, "repository": {"repo_id": 40492118, "url": "https://github.com/pwittchen/ReactiveNetwork", "stars": 2282, "created": "8/10/2015 4:06:58 PM +00:00", "updates": "2020-01-26T20:59:17+00:00", "fork": "False", "license": "licensed"}}