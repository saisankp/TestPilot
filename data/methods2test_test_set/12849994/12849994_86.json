{"test_class": {"identifier": "RedisStreamReaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int SIZE = 8192;", "modifier": "private static final", "type": "int", "declarator": "SIZE = 8192", "var_name": "SIZE"}, {"original_string": "RedisStreamReader reader;", "modifier": "", "type": "RedisStreamReader", "declarator": "reader", "var_name": "reader"}, {"original_string": "@Mock\n  private InputStream inputStream;", "modifier": "@Mock\n  private", "type": "InputStream", "declarator": "inputStream", "var_name": "inputStream"}], "file": "imcache-redis/src/test/java/com/cetsoft/imcache/redis/client/RedisStreamReaderTest.java"}, "test_case": {"identifier": "readPostiveInt", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void readPostiveInt() throws IOException {\n    final byte[] bytes = {'1', '0', '\\r', '\\n'};\n    setupInputStreamRead(bytes, 1);\n    int actualInt = reader.readInt();\n    assertEquals(10, actualInt);\n  }", "signature": "void readPostiveInt()", "full_signature": "@Test public void readPostiveInt()", "class_method_signature": "RedisStreamReaderTest.readPostiveInt()", "testcase": true, "constructor": false, "invocations": ["setupInputStreamRead", "readInt", "assertEquals"]}, "focal_class": {"identifier": "RedisStreamReader", "superclass": "", "interfaces": "implements Closeable", "fields": [{"original_string": "public static final int BUFFER_SIZE = 8192;", "modifier": "public static final", "type": "int", "declarator": "BUFFER_SIZE = 8192", "var_name": "BUFFER_SIZE"}, {"original_string": "private final InputStream inputStream;", "modifier": "private final", "type": "InputStream", "declarator": "inputStream", "var_name": "inputStream"}], "methods": [{"identifier": "RedisStreamReader", "parameters": "(InputStream inputStream)", "modifiers": "public", "return": "", "signature": " RedisStreamReader(InputStream inputStream)", "full_signature": "public  RedisStreamReader(InputStream inputStream)", "class_method_signature": "RedisStreamReader.RedisStreamReader(InputStream inputStream)", "testcase": false, "constructor": true}, {"identifier": "readByte", "parameters": "()", "modifiers": "public", "return": "byte", "signature": "byte readByte()", "full_signature": "public byte readByte()", "class_method_signature": "RedisStreamReader.readByte()", "testcase": false, "constructor": false}, {"identifier": "readString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String readString()", "full_signature": "public String readString()", "class_method_signature": "RedisStreamReader.readString()", "testcase": false, "constructor": false}, {"identifier": "readInt", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int readInt()", "full_signature": "public int readInt()", "class_method_signature": "RedisStreamReader.readInt()", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(int length)", "modifiers": "public", "return": "byte[]", "signature": "byte[] read(int length)", "full_signature": "public byte[] read(int length)", "class_method_signature": "RedisStreamReader.read(int length)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "RedisStreamReader.close()", "testcase": false, "constructor": false}], "file": "imcache-redis/src/main/java/com/cetsoft/imcache/redis/client/RedisStreamReader.java"}, "focal_method": {"identifier": "readInt", "parameters": "()", "modifiers": "public", "return": "int", "body": "public int readInt() throws IOException {\n    int length = 0;\n    final byte[] allIntBytes = new byte[13]; // maximum integer length + minus symbol + CR + LF = 13\n    while ((allIntBytes[length++] = readByte()) != RedisBytes.CARRIAGE_RETURN_BYTE) {\n      ;\n    }\n    //Read Line feed byte\n    readByte();\n    int number = 0;\n    final boolean negative = allIntBytes.length > 0 && allIntBytes[0] == RedisBytes.DASH_BYTE;\n    //We don't read last value if it's negative\n    for (int i = length - 2, j = 0; i > (negative ? 0 : -1); i--, j++) {\n      number += (int) (Math.pow(10, j) * (allIntBytes[i] - RedisBytes.ZERO_BYTE));\n    }\n    number = number * (negative ? -1 : 1);\n    return number;\n  }", "signature": "int readInt()", "full_signature": "public int readInt()", "class_method_signature": "RedisStreamReader.readInt()", "testcase": false, "constructor": false, "invocations": ["readByte", "readByte", "pow"]}, "repository": {"repo_id": 12849994, "url": "https://github.com/Cetsoft/imcache", "language": "Java", "is_fork": false, "fork_count": 38, "stargazer_count": 121, "size": 1599, "license": "licensed"}}