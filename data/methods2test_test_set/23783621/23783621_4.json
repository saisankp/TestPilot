{"test_class": {"identifier": "VanillaChronicleTest", "superclass": "extends VanillaChronicleTestBase", "interfaces": "", "fields": [{"original_string": "private static final int N_THREADS = 4;", "modifier": "private static final", "type": "int", "declarator": "N_THREADS = 4", "var_name": "N_THREADS"}], "file": "chronicle/src/test/java/net/openhft/chronicle/VanillaChronicleTest.java"}, "test_case": {"identifier": "testLastIndex", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLastIndex() throws Exception {\n        final String baseDir = getTestPath();\n        assertNotNull(baseDir);\n\n        // Create with small index size to ensure multiple index files are created\n        final VanillaChronicleConfig config = new VanillaChronicleConfig();\n        config.indexBlockSize(64);\n\n        final VanillaChronicle chronicle = new VanillaChronicle(baseDir, config);\n        chronicle.clear();\n\n        try {\n            final ExcerptAppender appender = chronicle.createAppender();\n\n            final long index0 = chronicle.lastIndex();\n            assertEquals(-1, index0);\n\n            appendValues(appender, 1, 3);\n            final long index1 = chronicle.lastIndex();\n            assertTrue(index1 > index0);\n\n            appendValues(appender, 1, 5);\n            final long index2 = chronicle.lastIndex();\n            assertTrue(index2 > index1);\n\n            // The index file will hold 8 entries, so this call will create a new index file\n            appendValues(appender, 1, 2);\n            final long index3 = chronicle.lastIndex();\n            assertTrue(index3 > index2);\n\n            appendValues(appender, 1, 20);\n            final long index4 = chronicle.lastIndex();\n            assertTrue(index4 > index3);\n\n            appender.close();\n\n            chronicle.checkCounts(1, 1);\n\n        } finally {\n            chronicle.close();\n            chronicle.clear();\n\n            assertFalse(new File(baseDir).exists());\n        }\n    }", "signature": "void testLastIndex()", "full_signature": "@Test public void testLastIndex()", "class_method_signature": "VanillaChronicleTest.testLastIndex()", "testcase": true, "constructor": false, "invocations": ["getTestPath", "assertNotNull", "indexBlockSize", "clear", "createAppender", "lastIndex", "assertEquals", "appendValues", "lastIndex", "assertTrue", "appendValues", "lastIndex", "assertTrue", "appendValues", "lastIndex", "assertTrue", "appendValues", "lastIndex", "assertTrue", "close", "checkCounts", "close", "clear", "assertFalse", "exists"]}, "focal_class": {"identifier": "VanillaChronicle", "superclass": "", "interfaces": "implements Chronicle", "fields": [{"original_string": "private final String name;", "modifier": "private final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private final String basePath;", "modifier": "private final", "type": "String", "declarator": "basePath", "var_name": "basePath"}, {"original_string": "private final VanillaChronicleConfig config;", "modifier": "private final", "type": "VanillaChronicleConfig", "declarator": "config", "var_name": "config"}, {"original_string": "private final ThreadLocal<WeakReference<BytesMarshallerFactory>> marshallersCache;", "modifier": "private final", "type": "ThreadLocal<WeakReference<BytesMarshallerFactory>>", "declarator": "marshallersCache", "var_name": "marshallersCache"}, {"original_string": "private final ThreadLocal<WeakReference<VanillaTailer>> tailerCache;", "modifier": "private final", "type": "ThreadLocal<WeakReference<VanillaTailer>>", "declarator": "tailerCache", "var_name": "tailerCache"}, {"original_string": "private final ThreadLocal<WeakReference<VanillaAppender>> appenderCache;", "modifier": "private final", "type": "ThreadLocal<WeakReference<VanillaAppender>>", "declarator": "appenderCache", "var_name": "appenderCache"}, {"original_string": "private final VanillaIndexCache indexCache;", "modifier": "private final", "type": "VanillaIndexCache", "declarator": "indexCache", "var_name": "indexCache"}, {"original_string": "private final VanillaDataCache dataCache;", "modifier": "private final", "type": "VanillaDataCache", "declarator": "dataCache", "var_name": "dataCache"}, {"original_string": "private final int indexBlockLongsBits;", "modifier": "private final", "type": "int", "declarator": "indexBlockLongsBits", "var_name": "indexBlockLongsBits"}, {"original_string": "private final int indexBlockLongsMask;", "modifier": "private final", "type": "int", "declarator": "indexBlockLongsMask", "var_name": "indexBlockLongsMask"}, {"original_string": "private final int dataBlockSizeBits;", "modifier": "private final", "type": "int", "declarator": "dataBlockSizeBits", "var_name": "dataBlockSizeBits"}, {"original_string": "private final int dataBlockSizeMask;", "modifier": "private final", "type": "int", "declarator": "dataBlockSizeMask", "var_name": "dataBlockSizeMask"}, {"original_string": "private final int entriesForCycleBits;", "modifier": "private final", "type": "int", "declarator": "entriesForCycleBits", "var_name": "entriesForCycleBits"}, {"original_string": "private final long entriesForCycleMask;", "modifier": "private final", "type": "long", "declarator": "entriesForCycleMask", "var_name": "entriesForCycleMask"}, {"original_string": "private final AtomicLong lastWrittenIndex = new AtomicLong(-1L);", "modifier": "private final", "type": "AtomicLong", "declarator": "lastWrittenIndex = new AtomicLong(-1L)", "var_name": "lastWrittenIndex"}, {"original_string": "private volatile boolean closed = false;", "modifier": "private volatile", "type": "boolean", "declarator": "closed = false", "var_name": "closed"}], "methods": [{"identifier": "VanillaChronicle", "parameters": "(String basePath)", "modifiers": "public", "return": "", "signature": " VanillaChronicle(String basePath)", "full_signature": "public  VanillaChronicle(String basePath)", "class_method_signature": "VanillaChronicle.VanillaChronicle(String basePath)", "testcase": false, "constructor": true}, {"identifier": "VanillaChronicle", "parameters": "(String basePath, VanillaChronicleConfig config)", "modifiers": "public", "return": "", "signature": " VanillaChronicle(String basePath, VanillaChronicleConfig config)", "full_signature": "public  VanillaChronicle(String basePath, VanillaChronicleConfig config)", "class_method_signature": "VanillaChronicle.VanillaChronicle(String basePath, VanillaChronicleConfig config)", "testcase": false, "constructor": true}, {"identifier": "checkNotClosed", "parameters": "()", "modifiers": "", "return": "void", "signature": "void checkNotClosed()", "full_signature": " void checkNotClosed()", "class_method_signature": "VanillaChronicle.checkNotClosed()", "testcase": false, "constructor": false}, {"identifier": "name", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String name()", "full_signature": "@Override public String name()", "class_method_signature": "VanillaChronicle.name()", "testcase": false, "constructor": false}, {"identifier": "getEntriesForCycleBits", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getEntriesForCycleBits()", "full_signature": "public int getEntriesForCycleBits()", "class_method_signature": "VanillaChronicle.getEntriesForCycleBits()", "testcase": false, "constructor": false}, {"identifier": "acquireBMF", "parameters": "()", "modifiers": "", "return": "BytesMarshallerFactory", "signature": "BytesMarshallerFactory acquireBMF()", "full_signature": " BytesMarshallerFactory acquireBMF()", "class_method_signature": "VanillaChronicle.acquireBMF()", "testcase": false, "constructor": false}, {"identifier": "createBMF", "parameters": "()", "modifiers": "", "return": "BytesMarshallerFactory", "signature": "BytesMarshallerFactory createBMF()", "full_signature": " BytesMarshallerFactory createBMF()", "class_method_signature": "VanillaChronicle.createBMF()", "testcase": false, "constructor": false}, {"identifier": "lastIndex", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long lastIndex()", "full_signature": "public long lastIndex()", "class_method_signature": "VanillaChronicle.lastIndex()", "testcase": false, "constructor": false}, {"identifier": "createTailer", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "ExcerptTailer", "signature": "ExcerptTailer createTailer()", "full_signature": "@NotNull @Override public ExcerptTailer createTailer()", "class_method_signature": "VanillaChronicle.createTailer()", "testcase": false, "constructor": false}, {"identifier": "createTailer0", "parameters": "()", "modifiers": "private", "return": "VanillaTailer", "signature": "VanillaTailer createTailer0()", "full_signature": "private VanillaTailer createTailer0()", "class_method_signature": "VanillaChronicle.createTailer0()", "testcase": false, "constructor": false}, {"identifier": "createAppender", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "VanillaAppender", "signature": "VanillaAppender createAppender()", "full_signature": "@NotNull @Override public VanillaAppender createAppender()", "class_method_signature": "VanillaChronicle.createAppender()", "testcase": false, "constructor": false}, {"identifier": "createAppender0", "parameters": "()", "modifiers": "private", "return": "VanillaAppender", "signature": "VanillaAppender createAppender0()", "full_signature": "private VanillaAppender createAppender0()", "class_method_signature": "VanillaChronicle.createAppender0()", "testcase": false, "constructor": false}, {"identifier": "createExcerpt", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "Excerpt", "signature": "Excerpt createExcerpt()", "full_signature": "@NotNull @Override public Excerpt createExcerpt()", "class_method_signature": "VanillaChronicle.createExcerpt()", "testcase": false, "constructor": false}, {"identifier": "lastWrittenIndex", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long lastWrittenIndex()", "full_signature": "@Override public long lastWrittenIndex()", "class_method_signature": "VanillaChronicle.lastWrittenIndex()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long size()", "full_signature": "@Override public long size()", "class_method_signature": "VanillaChronicle.size()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "VanillaChronicle.close()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "VanillaChronicle.clear()", "testcase": false, "constructor": false}, {"identifier": "checkCounts", "parameters": "(int min, int max)", "modifiers": "public", "return": "void", "signature": "void checkCounts(int min, int max)", "full_signature": "public void checkCounts(int min, int max)", "class_method_signature": "VanillaChronicle.checkCounts(int min, int max)", "testcase": false, "constructor": false}], "file": "chronicle/src/main/java/net/openhft/chronicle/VanillaChronicle.java"}, "focal_method": {"identifier": "lastIndex", "parameters": "()", "modifiers": "public", "return": "long", "body": "public long lastIndex() {\n        int cycle = (int) indexCache.lastCycle();\n        int lastIndexCount = indexCache.lastIndexFile(cycle, -1);\n        if (lastIndexCount >= 0) {\n            try {\n                final VanillaMappedBytes buffer = indexCache.indexFor(cycle, lastIndexCount, false);\n                final long indices = VanillaIndexCache.countIndices(buffer);\n                buffer.release();\n\n                final long indexEntryNumber = (indices > 0) ? indices - 1 : 0;\n                return (((long) cycle) << entriesForCycleBits) + (((long) lastIndexCount) << indexBlockLongsBits) + indexEntryNumber;\n\n            } catch (IOException e) {\n                throw new AssertionError(e);\n            }\n        } else {\n            return -1;\n        }\n    }", "signature": "long lastIndex()", "full_signature": "public long lastIndex()", "class_method_signature": "VanillaChronicle.lastIndex()", "testcase": false, "constructor": false, "invocations": ["lastCycle", "lastIndexFile", "indexFor", "countIndices", "release"]}, "repository": {"repo_id": 23783621, "url": "https://github.com/peter-lawrey/Java-Chronicle-OLD", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 33, "size": 1275, "license": "licensed"}}