{"test_class": {"identifier": "WorkspaceScannerTest", "superclass": "", "interfaces": "", "fields": [], "file": "org.jabylon.properties/src/test/java/org/jabylon/properties/util/scanner/WorkspaceScannerTest.java"}, "test_case": {"identifier": "testPartialScanWithComplicatedInclude", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPartialScanWithComplicatedInclude()\n    {\n        File baseDir = new File(\"src/test/resources/project/master\");\n        ScanConfiguration scanConfig = PropertiesFactory.eINSTANCE.createScanConfiguration();\n        scanConfig.setInclude(\"**/jabylon/properties/util/autotranslate/*.properties\");\n        WorkspaceScanner scanner = new WorkspaceScanner();\n        final List<String> filenames = new ArrayList<String>();\n        scanner.partialScan(new PropertyFileAcceptor() {\n\n            @Override\n            public void newMatch(File file) {\n                filenames.add(file.getName());\n\n            }\n        }, baseDir, new JavaPropertyScanner(), scanConfig, new File(\"src/test/resources/project/master/org/jabylon/properties/util/autotranslate/messages.properties\"));\n        int index = 0;\n        assertEquals(1, filenames.size());\n        assertEquals(\"messages.properties\", filenames.get(index++));\n    }", "signature": "void testPartialScanWithComplicatedInclude()", "full_signature": "@Test public void testPartialScanWithComplicatedInclude()", "class_method_signature": "WorkspaceScannerTest.testPartialScanWithComplicatedInclude()", "testcase": true, "constructor": false, "invocations": ["createScanConfiguration", "setInclude", "partialScan", "add", "getName", "assertEquals", "size", "assertEquals", "get"]}, "focal_class": {"identifier": "WorkspaceScanner", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "WorkspaceScanner", "parameters": "()", "modifiers": "public", "return": "", "signature": " WorkspaceScanner()", "full_signature": "public  WorkspaceScanner()", "class_method_signature": "WorkspaceScanner.WorkspaceScanner()", "testcase": false, "constructor": true}, {"identifier": "fullScan", "parameters": "(PropertyFileAcceptor acceptor, File baseDir, PropertyScanner scanner, ScanConfiguration config, IProgressMonitor monitor)", "modifiers": "public", "return": "void", "signature": "void fullScan(PropertyFileAcceptor acceptor, File baseDir, PropertyScanner scanner, ScanConfiguration config, IProgressMonitor monitor)", "full_signature": "public void fullScan(PropertyFileAcceptor acceptor, File baseDir, PropertyScanner scanner, ScanConfiguration config, IProgressMonitor monitor)", "class_method_signature": "WorkspaceScanner.fullScan(PropertyFileAcceptor acceptor, File baseDir, PropertyScanner scanner, ScanConfiguration config, IProgressMonitor monitor)", "testcase": false, "constructor": false}, {"identifier": "checkCanceled", "parameters": "(IProgressMonitor monitor)", "modifiers": "private", "return": "void", "signature": "void checkCanceled(IProgressMonitor monitor)", "full_signature": "private void checkCanceled(IProgressMonitor monitor)", "class_method_signature": "WorkspaceScanner.checkCanceled(IProgressMonitor monitor)", "testcase": false, "constructor": false}, {"identifier": "partialScan", "parameters": "(PropertyFileAcceptor acceptor, File baseDir, PropertyScanner scanner, ScanConfiguration config, File singleFile)", "modifiers": "public", "return": "void", "signature": "void partialScan(PropertyFileAcceptor acceptor, File baseDir, PropertyScanner scanner, ScanConfiguration config, File singleFile)", "full_signature": "public void partialScan(PropertyFileAcceptor acceptor, File baseDir, PropertyScanner scanner, ScanConfiguration config, File singleFile)", "class_method_signature": "WorkspaceScanner.partialScan(PropertyFileAcceptor acceptor, File baseDir, PropertyScanner scanner, ScanConfiguration config, File singleFile)", "testcase": false, "constructor": false}, {"identifier": "partialScan", "parameters": "(File baseDir, PropertyScanner scanner, ScanConfiguration config, File singleFile)", "modifiers": "public", "return": "boolean", "signature": "boolean partialScan(File baseDir, PropertyScanner scanner, ScanConfiguration config, File singleFile)", "full_signature": "public boolean partialScan(File baseDir, PropertyScanner scanner, ScanConfiguration config, File singleFile)", "class_method_signature": "WorkspaceScanner.partialScan(File baseDir, PropertyScanner scanner, ScanConfiguration config, File singleFile)", "testcase": false, "constructor": false}, {"identifier": "createFileSet", "parameters": "(ScanConfiguration config)", "modifiers": "private", "return": "FileSet", "signature": "FileSet createFileSet(ScanConfiguration config)", "full_signature": "private FileSet createFileSet(ScanConfiguration config)", "class_method_signature": "WorkspaceScanner.createFileSet(ScanConfiguration config)", "testcase": false, "constructor": false}, {"identifier": "normalizePattern", "parameters": "(String p)", "modifiers": "private static", "return": "String", "signature": "String normalizePattern(String p)", "full_signature": "private static String normalizePattern(String p)", "class_method_signature": "WorkspaceScanner.normalizePattern(String p)", "testcase": false, "constructor": false}], "file": "org.jabylon.properties/src/main/java/org/jabylon/properties/util/scanner/WorkspaceScanner.java"}, "focal_method": {"identifier": "partialScan", "parameters": "(PropertyFileAcceptor acceptor, File baseDir, PropertyScanner scanner, ScanConfiguration config, File singleFile)", "modifiers": "public", "return": "void", "body": "public void partialScan(PropertyFileAcceptor acceptor, File baseDir, PropertyScanner scanner, ScanConfiguration config, File singleFile) {\n        Project antProject = new org.apache.tools.ant.Project();\n        FileSet fs = createFileSet(config);\n        String[] excludes = fs.mergeExcludes(antProject);\n        if(excludes!=null)\n        {\n            for (String exclude : excludes) {\n                if(SelectorUtils.match(normalizePattern(exclude), singleFile.getPath()))\n                    return;\n            }\n        }\n        String[] includes = fs.mergeIncludes(antProject);\n        if(includes==null)\n            return;\n        for (String include : includes) {\n            if(SelectorUtils.match(normalizePattern(include), singleFile.getPath()))\n            {\n                if (baseDir.exists()) {\n\n//\t\t\t\t\tif(scanner.isTemplate(singleFile, config)) {\n                        acceptor.newMatch(singleFile);\n//\t\t\t\t\t}\n\n                }\n                break;\n            }\n        }\n    }", "signature": "void partialScan(PropertyFileAcceptor acceptor, File baseDir, PropertyScanner scanner, ScanConfiguration config, File singleFile)", "full_signature": "public void partialScan(PropertyFileAcceptor acceptor, File baseDir, PropertyScanner scanner, ScanConfiguration config, File singleFile)", "class_method_signature": "WorkspaceScanner.partialScan(PropertyFileAcceptor acceptor, File baseDir, PropertyScanner scanner, ScanConfiguration config, File singleFile)", "testcase": false, "constructor": false, "invocations": ["createFileSet", "mergeExcludes", "match", "normalizePattern", "getPath", "mergeIncludes", "match", "normalizePattern", "getPath", "exists", "newMatch"]}, "repository": {"repo_id": 3986627, "url": "https://github.com/jutzig/jabylon", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 51, "size": 13400, "license": "licensed"}}