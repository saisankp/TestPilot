{"test_class": {"identifier": "RuleProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@org.junit.Rule\n    public Timeout rule = Timeout.seconds(5);", "modifier": "@org.junit.Rule\n    public", "type": "Timeout", "declarator": "rule = Timeout.seconds(5)", "var_name": "rule"}, {"original_string": "private Vertx vertx;", "modifier": "private", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private String rulesPath;", "modifier": "private", "type": "String", "declarator": "rulesPath", "var_name": "rulesPath"}, {"original_string": "private ResourceStorage storage;", "modifier": "private", "type": "ResourceStorage", "declarator": "storage", "var_name": "storage"}, {"original_string": "private Map<String, Object> properties;", "modifier": "private", "type": "Map<String, Object>", "declarator": "properties", "var_name": "properties"}, {"original_string": "private final String RULES_STORAGE_INITIAL = \"{\\n\" +\n            \" \\\"/playground/css/(.*)\\\": {\\n\" +\n            \"  \\\"description\\\": \\\"Pages CSS\\\",\\n\" +\n            \"  \\\"path\\\": \\\"/playground/server/pages/css/$1\\\",\\n\" +\n            \"  \\\"storage\\\": \\\"main\\\"\\n\" +\n            \" },\\n\" +\n            \" \\\"/playground/js/(.*)\\\": {\\n\" +\n            \"  \\\"description\\\": \\\"Pages JS\\\",\\n\" +\n            \"  \\\"path\\\": \\\"/playground/server/pages/js/$1\\\",\\n\" +\n            \"  \\\"storage\\\": \\\"main\\\"\\n\" +\n            \" },\\n\" +\n            \" \\\"/playground/img/(.*)\\\": {\\n\" +\n            \"  \\\"description\\\": \\\"Pages Images\\\",\\n\" +\n            \"  \\\"path\\\": \\\"/playground/server/pages/img/$1\\\",\\n\" +\n            \"  \\\"storage\\\": \\\"main\\\"\\n\" +\n            \" }\\n\" +\n            \"}\";", "modifier": "private final", "type": "String", "declarator": "RULES_STORAGE_INITIAL = \"{\\n\" +\n            \" \\\"/playground/css/(.*)\\\": {\\n\" +\n            \"  \\\"description\\\": \\\"Pages CSS\\\",\\n\" +\n            \"  \\\"path\\\": \\\"/playground/server/pages/css/$1\\\",\\n\" +\n            \"  \\\"storage\\\": \\\"main\\\"\\n\" +\n            \" },\\n\" +\n            \" \\\"/playground/js/(.*)\\\": {\\n\" +\n            \"  \\\"description\\\": \\\"Pages JS\\\",\\n\" +\n            \"  \\\"path\\\": \\\"/playground/server/pages/js/$1\\\",\\n\" +\n            \"  \\\"storage\\\": \\\"main\\\"\\n\" +\n            \" },\\n\" +\n            \" \\\"/playground/img/(.*)\\\": {\\n\" +\n            \"  \\\"description\\\": \\\"Pages Images\\\",\\n\" +\n            \"  \\\"path\\\": \\\"/playground/server/pages/img/$1\\\",\\n\" +\n            \"  \\\"storage\\\": \\\"main\\\"\\n\" +\n            \" }\\n\" +\n            \"}\"", "var_name": "RULES_STORAGE_INITIAL"}, {"original_string": "private final String RULES_STORAGE_UPDATED = \"{\\n\" +\n            \" \\\"/playground/css/(.*)\\\": {\\n\" +\n            \"  \\\"description\\\": \\\"Pages CSS\\\",\\n\" +\n            \"  \\\"path\\\": \\\"/playground/server/pages/css/$1\\\",\\n\" +\n            \"  \\\"storage\\\": \\\"main\\\"\\n\" +\n            \" },\\n\" +\n            \" \\\"/playground/img/(.*)\\\": {\\n\" +\n            \"  \\\"description\\\": \\\"Pages Images\\\",\\n\" +\n            \"  \\\"path\\\": \\\"/playground/server/pages/img/$1\\\",\\n\" +\n            \"  \\\"storage\\\": \\\"main\\\"\\n\" +\n            \" }\\n\" +\n            \"}\";", "modifier": "private final", "type": "String", "declarator": "RULES_STORAGE_UPDATED = \"{\\n\" +\n            \" \\\"/playground/css/(.*)\\\": {\\n\" +\n            \"  \\\"description\\\": \\\"Pages CSS\\\",\\n\" +\n            \"  \\\"path\\\": \\\"/playground/server/pages/css/$1\\\",\\n\" +\n            \"  \\\"storage\\\": \\\"main\\\"\\n\" +\n            \" },\\n\" +\n            \" \\\"/playground/img/(.*)\\\": {\\n\" +\n            \"  \\\"description\\\": \\\"Pages Images\\\",\\n\" +\n            \"  \\\"path\\\": \\\"/playground/server/pages/img/$1\\\",\\n\" +\n            \"  \\\"storage\\\": \\\"main\\\"\\n\" +\n            \" }\\n\" +\n            \"}\"", "var_name": "RULES_STORAGE_UPDATED"}, {"original_string": "private final String RULES_WITH_MISSING_PROPS = \"{\\n\"\n            + \"  \\\"/gateleen/rule/1\\\": {\\n\"\n            + \"    \\\"description\\\": \\\"Test Rule 1\\\",\\n\"\n            + \"    \\\"url\\\": \\\"${gateleen.test.prop.1}/gateleen/rule/1\\\"\\n\"\n            + \"  },\\n\"\n            + \"  \\\"/gateleen/rule/2\\\": {\\n\"\n            + \"    \\\"description\\\": \\\"Test Rule 2\\\",\\n\"\n            + \"    \\\"url\\\": \\\"${gateleen.test.prop.2}/gateleen/rule/2\\\"\\n\"\n            + \"  }\\n\"\n            + \"}\";", "modifier": "private final", "type": "String", "declarator": "RULES_WITH_MISSING_PROPS = \"{\\n\"\n            + \"  \\\"/gateleen/rule/1\\\": {\\n\"\n            + \"    \\\"description\\\": \\\"Test Rule 1\\\",\\n\"\n            + \"    \\\"url\\\": \\\"${gateleen.test.prop.1}/gateleen/rule/1\\\"\\n\"\n            + \"  },\\n\"\n            + \"  \\\"/gateleen/rule/2\\\": {\\n\"\n            + \"    \\\"description\\\": \\\"Test Rule 2\\\",\\n\"\n            + \"    \\\"url\\\": \\\"${gateleen.test.prop.2}/gateleen/rule/2\\\"\\n\"\n            + \"  }\\n\"\n            + \"}\"", "var_name": "RULES_WITH_MISSING_PROPS"}], "file": "gateleen-routing/src/test/java/org/swisspush/gateleen/routing/RuleProviderTest.java"}, "test_case": {"identifier": "testGetRulesWithWrongRulesPath", "parameters": "(TestContext context)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetRulesWithWrongRulesPath(TestContext context){\n        RuleProvider ruleProvider = new RuleProvider(vertx, \"/some/wrong/path\", storage, properties);\n        Future<List<Rule>> rulesFuture = ruleProvider.getRules();\n        context.assertTrue(rulesFuture.failed(), \"getRules() future should not have been successful\");\n        context.assertNotNull(rulesFuture.cause());\n        context.assertTrue(rulesFuture.cause().getMessage().contains(\"Could not get URL\"));\n    }", "signature": "void testGetRulesWithWrongRulesPath(TestContext context)", "full_signature": "@Test public void testGetRulesWithWrongRulesPath(TestContext context)", "class_method_signature": "RuleProviderTest.testGetRulesWithWrongRulesPath(TestContext context)", "testcase": true, "constructor": false, "invocations": ["getRules", "assertTrue", "failed", "assertNotNull", "cause", "assertTrue", "contains", "getMessage", "cause"]}, "focal_class": {"identifier": "RuleProvider", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Logger log = LoggerFactory.getLogger(RuleProvider.class);", "modifier": "private", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(RuleProvider.class)", "var_name": "log"}, {"original_string": "private String rulesPath;", "modifier": "private", "type": "String", "declarator": "rulesPath", "var_name": "rulesPath"}, {"original_string": "private String routingRulesSchema;", "modifier": "private", "type": "String", "declarator": "routingRulesSchema", "var_name": "routingRulesSchema"}, {"original_string": "private ResourceStorage storage;", "modifier": "private", "type": "ResourceStorage", "declarator": "storage", "var_name": "storage"}, {"original_string": "final Map<String, Object> properties;", "modifier": "final", "type": "Map<String, Object>", "declarator": "properties", "var_name": "properties"}, {"original_string": "private List<RuleChangesObserver> observers = new ArrayList<>();", "modifier": "private", "type": "List<RuleChangesObserver>", "declarator": "observers = new ArrayList<>()", "var_name": "observers"}], "methods": [{"identifier": "RuleProvider", "parameters": "(Vertx vertx, String rulesPath, ResourceStorage storage, Map<String, Object> properties)", "modifiers": "public", "return": "", "signature": " RuleProvider(Vertx vertx, String rulesPath, ResourceStorage storage, Map<String, Object> properties)", "full_signature": "public  RuleProvider(Vertx vertx, String rulesPath, ResourceStorage storage, Map<String, Object> properties)", "class_method_signature": "RuleProvider.RuleProvider(Vertx vertx, String rulesPath, ResourceStorage storage, Map<String, Object> properties)", "testcase": false, "constructor": true}, {"identifier": "registerObserver", "parameters": "(RuleChangesObserver observer)", "modifiers": "public", "return": "void", "signature": "void registerObserver(RuleChangesObserver observer)", "full_signature": "public void registerObserver(RuleChangesObserver observer)", "class_method_signature": "RuleProvider.registerObserver(RuleChangesObserver observer)", "testcase": false, "constructor": false}, {"identifier": "getRules", "parameters": "()", "modifiers": "public", "return": "Future<List<Rule>>", "signature": "Future<List<Rule>> getRules()", "full_signature": "public Future<List<Rule>> getRules()", "class_method_signature": "RuleProvider.getRules()", "testcase": false, "constructor": false}, {"identifier": "notifyRuleChangesObservers", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void notifyRuleChangesObservers()", "full_signature": "private void notifyRuleChangesObservers()", "class_method_signature": "RuleProvider.notifyRuleChangesObservers()", "testcase": false, "constructor": false}], "file": "gateleen-routing/src/main/java/org/swisspush/gateleen/routing/RuleProvider.java"}, "focal_method": {"identifier": "getRules", "parameters": "()", "modifiers": "public", "return": "Future<List<Rule>>", "body": "public Future<List<Rule>> getRules(){\n        Future<List<Rule>> future = Future.future();\n        storage.get(rulesPath, buffer -> {\n            if (buffer != null) {\n                try {\n                    List<Rule> rules = new RuleFactory(properties, routingRulesSchema).parseRules(buffer);\n                    future.complete(rules);\n                } catch (ValidationException e) {\n                    log.error(\"Could parse routing rules\", e);\n                    future.fail(e);\n                }\n            } else {\n                future.fail(\"Could not get URL '\" + (rulesPath == null ? \"<null>\" : rulesPath) + \"' (getting rules).\");\n            }\n        });\n        return future;\n    }", "signature": "Future<List<Rule>> getRules()", "full_signature": "public Future<List<Rule>> getRules()", "class_method_signature": "RuleProvider.getRules()", "testcase": false, "constructor": false, "invocations": ["future", "get", "parseRules", "complete", "error", "fail", "fail"]}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}