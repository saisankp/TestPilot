{"test_class": {"identifier": "OptionalContextTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Object SOURCE = new Object();", "modifier": "static final", "type": "Object", "declarator": "SOURCE = new Object()", "var_name": "SOURCE"}, {"original_string": "static final Command<Object> COMMAND = context -> 1;", "modifier": "static final", "type": "Command<Object>", "declarator": "COMMAND = context -> 1", "var_name": "COMMAND"}, {"original_string": "static final CommandNode<Object> NODE = mock(CommandNode.class);", "modifier": "static final", "type": "CommandNode<Object>", "declarator": "NODE = mock(CommandNode.class)", "var_name": "NODE"}, {"original_string": "static final StringRange RANGE = new StringRange(0, 0);", "modifier": "static final", "type": "StringRange", "declarator": "RANGE = new StringRange(0, 0)", "var_name": "RANGE"}, {"original_string": "static final RedirectModifier<Object> MODIFIER = context -> List.of();", "modifier": "static final", "type": "RedirectModifier<Object>", "declarator": "MODIFIER = context -> List.of()", "var_name": "MODIFIER"}, {"original_string": "static final CommandContext<Object> DELEGATE = new CommandContext<>(SOURCE, \"\", Map.of(\"argument\", new ParsedArgument<>(0, 1, \"value\")), COMMAND, NODE, List.of(), RANGE, null, MODIFIER, false);", "modifier": "static final", "type": "CommandContext<Object>", "declarator": "DELEGATE = new CommandContext<>(SOURCE, \"\", Map.of(\"argument\", new ParsedArgument<>(0, 1, \"value\")), COMMAND, NODE, List.of(), RANGE, null, MODIFIER, false)", "var_name": "DELEGATE"}, {"original_string": "static final OptionalContext<Object> CONTEXT = new OptionalContext<>(DELEGATE);", "modifier": "static final", "type": "OptionalContext<Object>", "declarator": "CONTEXT = new OptionalContext<>(DELEGATE)", "var_name": "CONTEXT"}], "file": "commons/src/test/java/com/karuslabs/commons/command/OptionalContextTest.java"}, "test_case": {"identifier": "getOptionalArgument_null", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void getOptionalArgument_null() {\n        assertNull(CONTEXT.getOptionalArgument(\"invalid\", String.class));\n    }", "signature": "void getOptionalArgument_null()", "full_signature": "@Test void getOptionalArgument_null()", "class_method_signature": "OptionalContextTest.getOptionalArgument_null()", "testcase": true, "constructor": false, "invocations": ["assertNull", "getOptionalArgument"]}, "focal_class": {"identifier": "OptionalContext", "superclass": "extends CommandContext<T>", "interfaces": "", "fields": [{"original_string": "static final VarHandle ARGUMENTS;", "modifier": "static final", "type": "VarHandle", "declarator": "ARGUMENTS", "var_name": "ARGUMENTS"}, {"original_string": "private final CommandContext<T> context;", "modifier": "private final", "type": "CommandContext<T>", "declarator": "context", "var_name": "context"}, {"original_string": "private @Nullable Map<String, ParsedArgument<T, ?>> arguments;", "modifier": "private @Nullable", "type": "Map<String, ParsedArgument<T, ?>>", "declarator": "arguments", "var_name": "arguments"}], "methods": [{"identifier": "OptionalContext", "parameters": "(CommandContext<T> context)", "modifiers": "public", "return": "", "signature": " OptionalContext(CommandContext<T> context)", "full_signature": "public  OptionalContext(CommandContext<T> context)", "class_method_signature": "OptionalContext.OptionalContext(CommandContext<T> context)", "testcase": false, "constructor": true}, {"identifier": "getOptionalArgument", "parameters": "(String name, Class<V> type)", "modifiers": "public", "return": "V", "signature": "V getOptionalArgument(String name, Class<V> type)", "full_signature": "public V getOptionalArgument(String name, Class<V> type)", "class_method_signature": "OptionalContext.getOptionalArgument(String name, Class<V> type)", "testcase": false, "constructor": false}, {"identifier": "getOptionalArgument", "parameters": "(String name, Class<V> type, V value)", "modifiers": "public", "return": "V", "signature": "V getOptionalArgument(String name, Class<V> type, V value)", "full_signature": "public V getOptionalArgument(String name, Class<V> type, V value)", "class_method_signature": "OptionalContext.getOptionalArgument(String name, Class<V> type, V value)", "testcase": false, "constructor": false}, {"identifier": "copyFor", "parameters": "(T source)", "modifiers": "@Override public", "return": "OptionalContext<T>", "signature": "OptionalContext<T> copyFor(T source)", "full_signature": "@Override public OptionalContext<T> copyFor(T source)", "class_method_signature": "OptionalContext.copyFor(T source)", "testcase": false, "constructor": false}, {"identifier": "getChild", "parameters": "()", "modifiers": "@Override public", "return": "CommandContext<T>", "signature": "CommandContext<T> getChild()", "full_signature": "@Override public CommandContext<T> getChild()", "class_method_signature": "OptionalContext.getChild()", "testcase": false, "constructor": false}, {"identifier": "getLastChild", "parameters": "()", "modifiers": "@Override public", "return": "CommandContext<T>", "signature": "CommandContext<T> getLastChild()", "full_signature": "@Override public CommandContext<T> getLastChild()", "class_method_signature": "OptionalContext.getLastChild()", "testcase": false, "constructor": false}, {"identifier": "getCommand", "parameters": "()", "modifiers": "@Override public", "return": "Command<T>", "signature": "Command<T> getCommand()", "full_signature": "@Override public Command<T> getCommand()", "class_method_signature": "OptionalContext.getCommand()", "testcase": false, "constructor": false}, {"identifier": "getSource", "parameters": "()", "modifiers": "@Override public", "return": "T", "signature": "T getSource()", "full_signature": "@Override public T getSource()", "class_method_signature": "OptionalContext.getSource()", "testcase": false, "constructor": false}, {"identifier": "getArgument", "parameters": "(String name, Class<V> type)", "modifiers": "@Override public", "return": "V", "signature": "V getArgument(String name, Class<V> type)", "full_signature": "@Override public V getArgument(String name, Class<V> type)", "class_method_signature": "OptionalContext.getArgument(String name, Class<V> type)", "testcase": false, "constructor": false}, {"identifier": "getRedirectModifier", "parameters": "()", "modifiers": "@Override public", "return": "RedirectModifier<T>", "signature": "RedirectModifier<T> getRedirectModifier()", "full_signature": "@Override public RedirectModifier<T> getRedirectModifier()", "class_method_signature": "OptionalContext.getRedirectModifier()", "testcase": false, "constructor": false}, {"identifier": "getRange", "parameters": "()", "modifiers": "@Override public", "return": "StringRange", "signature": "StringRange getRange()", "full_signature": "@Override public StringRange getRange()", "class_method_signature": "OptionalContext.getRange()", "testcase": false, "constructor": false}, {"identifier": "getInput", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getInput()", "full_signature": "@Override public String getInput()", "class_method_signature": "OptionalContext.getInput()", "testcase": false, "constructor": false}, {"identifier": "getNodes", "parameters": "()", "modifiers": "@Override public", "return": "List<ParsedCommandNode<T>>", "signature": "List<ParsedCommandNode<T>> getNodes()", "full_signature": "@Override public List<ParsedCommandNode<T>> getNodes()", "class_method_signature": "OptionalContext.getNodes()", "testcase": false, "constructor": false}, {"identifier": "isForked", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isForked()", "full_signature": "@Override public boolean isForked()", "class_method_signature": "OptionalContext.isForked()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object other)", "full_signature": "@Override public boolean equals(Object other)", "class_method_signature": "OptionalContext.equals(Object other)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "OptionalContext.hashCode()", "testcase": false, "constructor": false}], "file": "commons/src/main/java/com/karuslabs/commons/command/OptionalContext.java"}, "focal_method": {"identifier": "getOptionalArgument", "parameters": "(String name, Class<V> type)", "modifiers": "public", "return": "V", "body": "public <V> @Nullable V getOptionalArgument(String name, Class<V> type) {\n        return getOptionalArgument(name, type, null);\n    }", "signature": "V getOptionalArgument(String name, Class<V> type)", "full_signature": "public V getOptionalArgument(String name, Class<V> type)", "class_method_signature": "OptionalContext.getOptionalArgument(String name, Class<V> type)", "testcase": false, "constructor": false, "invocations": ["getOptionalArgument"]}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}