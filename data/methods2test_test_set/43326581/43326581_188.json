{"test_class": {"identifier": "RemoteAttachmentDownloaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String url = DatabaseSettings.COUCH_DB_URL;", "modifier": "private static final", "type": "String", "declarator": "url = DatabaseSettings.COUCH_DB_URL", "var_name": "url"}, {"original_string": "private static final String dbName = DatabaseSettings.COUCH_DB_ATTACHMENTS;", "modifier": "private static final", "type": "String", "declarator": "dbName = DatabaseSettings.COUCH_DB_ATTACHMENTS", "var_name": "dbName"}, {"original_string": "private AttachmentConnector attachmentConnector;", "modifier": "private", "type": "AttachmentConnector", "declarator": "attachmentConnector", "var_name": "attachmentConnector"}, {"original_string": "private AttachmentRepository repository;", "modifier": "private", "type": "AttachmentRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "private List<String> garbage;", "modifier": "private", "type": "List<String>", "declarator": "garbage", "var_name": "garbage"}, {"original_string": "private Duration downloadTimeout = Duration.durationOf(5, TimeUnit.SECONDS);", "modifier": "private", "type": "Duration", "declarator": "downloadTimeout = Duration.durationOf(5, TimeUnit.SECONDS)", "var_name": "downloadTimeout"}, {"original_string": "private User dummyUser = new User().setEmail(\"dummy@some.domain\");", "modifier": "private", "type": "User", "declarator": "dummyUser = new User().setEmail(\"dummy@some.domain\")", "var_name": "dummyUser"}], "file": "backend/utils/src/test/java/org/eclipse/sw360/attachments/db/RemoteAttachmentDownloaderTest.java"}, "test_case": {"identifier": "testWithBlackHole", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWithBlackHole() throws Exception {\n        assumeThat(getAvailableNetworkInterface(), isAvailable());\n\n        saveRemoteAttachment(\"http://\" + BLACK_HOLE_ADDRESS + \"/filename\");\n        assertThat(repository.getOnlyRemoteAttachments(), hasSize(1));\n\n        ExecutorService executor = newSingleThreadExecutor();\n\n        try {\n            Future<Integer> future = executor.submit(new Callable<Integer>() {\n                @Override\n                public Integer call() throws Exception {\n                    return retrieveRemoteAttachments(DatabaseSettings.getConfiguredHttpClient(), dbName, downloadTimeout);\n                }\n            });\n\n            try {\n                Integer downloadedSuccessfully = future.get(1, TimeUnit.MINUTES);\n                assertThat(downloadedSuccessfully, is(0));\n            } catch (TimeoutException e) {\n                fail(\"retriever got stuck on a black hole\");\n                throw e; // unreachable\n            }\n        } finally {\n            executor.shutdown();\n            executor.awaitTermination(1, TimeUnit.MINUTES);\n        }\n\n        assertThat(repository.getOnlyRemoteAttachments(), hasSize(1));\n    }", "signature": "void testWithBlackHole()", "full_signature": "@Test public void testWithBlackHole()", "class_method_signature": "RemoteAttachmentDownloaderTest.testWithBlackHole()", "testcase": true, "constructor": false, "invocations": ["assumeThat", "getAvailableNetworkInterface", "isAvailable", "saveRemoteAttachment", "assertThat", "getOnlyRemoteAttachments", "hasSize", "newSingleThreadExecutor", "submit", "retrieveRemoteAttachments", "getConfiguredHttpClient", "get", "assertThat", "is", "fail", "shutdown", "awaitTermination", "assertThat", "getOnlyRemoteAttachments", "hasSize"]}, "focal_class": {"identifier": "RemoteAttachmentDownloader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = getLogger(RemoteAttachmentDownloader.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = getLogger(RemoteAttachmentDownloader.class)", "var_name": "log"}], "methods": [{"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "RemoteAttachmentDownloader.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "retrieveRemoteAttachments", "parameters": "(Supplier<HttpClient> httpClient, String dbAttachments, Duration downloadTimeout)", "modifiers": "public static", "return": "int", "signature": "int retrieveRemoteAttachments(Supplier<HttpClient> httpClient, String dbAttachments, Duration downloadTimeout)", "full_signature": "public static int retrieveRemoteAttachments(Supplier<HttpClient> httpClient, String dbAttachments, Duration downloadTimeout)", "class_method_signature": "RemoteAttachmentDownloader.retrieveRemoteAttachments(Supplier<HttpClient> httpClient, String dbAttachments, Duration downloadTimeout)", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "(InputStream stream)", "modifiers": "protected static", "return": "long", "signature": "long length(InputStream stream)", "full_signature": "protected static long length(InputStream stream)", "class_method_signature": "RemoteAttachmentDownloader.length(InputStream stream)", "testcase": false, "constructor": false}], "file": "backend/utils/src/main/java/org/eclipse/sw360/attachments/db/RemoteAttachmentDownloader.java"}, "focal_method": {"identifier": "retrieveRemoteAttachments", "parameters": "(Supplier<HttpClient> httpClient, String dbAttachments, Duration downloadTimeout)", "modifiers": "public static", "return": "int", "body": "public static int retrieveRemoteAttachments(Supplier<HttpClient> httpClient, String dbAttachments, Duration downloadTimeout) throws MalformedURLException {\n        AttachmentConnector attachmentConnector = new AttachmentConnector(httpClient, dbAttachments, downloadTimeout);\n        AttachmentRepository attachmentRepository = new AttachmentRepository(new DatabaseConnector(httpClient, dbAttachments));\n\n        List<AttachmentContent> remoteAttachments = attachmentRepository.getOnlyRemoteAttachments();\n        log.info(format(\"we have %d remote attachments to retrieve\", remoteAttachments.size()));\n\n        int count = 0;\n\n        for (AttachmentContent attachmentContent : remoteAttachments) {\n            if (!attachmentContent.isOnlyRemote()) {\n                log.info(format(\"skipping attachment (%s), which should already be available\", attachmentContent.getId()));\n                continue;\n            }\n\n            String attachmentContentId = attachmentContent.getId();\n            log.info(format(\"retrieving attachment (%s) {filename=%s}\", attachmentContentId, attachmentContent.getFilename()));\n            log.debug(\"url is \" + attachmentContent.getRemoteUrl());\n\n            InputStream content = null;\n            try {\n                content = attachmentConnector.unsafeGetAttachmentStream(attachmentContent);\n                if (content == null) {\n                    log.error(\"null content retrieving attachment \" + attachmentContentId);\n                    continue;\n                }\n                try {\n                    long length = length(content);\n                    log.info(format(\"retrieved attachment (%s), it was %d bytes long\", attachmentContentId, length));\n                    count++;\n                } catch (IOException e) {\n                    log.error(\"attachment was downloaded but somehow not available in database \" + attachmentContentId, e);\n                }\n            } catch (SW360Exception e) {\n                log.error(\"cannot retrieve attachment \" + attachmentContentId, e);\n            } finally {\n                closeQuietly(content, log);\n            }\n        }\n\n        return count;\n    }", "signature": "int retrieveRemoteAttachments(Supplier<HttpClient> httpClient, String dbAttachments, Duration downloadTimeout)", "full_signature": "public static int retrieveRemoteAttachments(Supplier<HttpClient> httpClient, String dbAttachments, Duration downloadTimeout)", "class_method_signature": "RemoteAttachmentDownloader.retrieveRemoteAttachments(Supplier<HttpClient> httpClient, String dbAttachments, Duration downloadTimeout)", "testcase": false, "constructor": false, "invocations": ["getOnlyRemoteAttachments", "info", "format", "size", "isOnlyRemote", "info", "format", "getId", "getId", "info", "format", "getFilename", "debug", "getRemoteUrl", "unsafeGetAttachmentStream", "error", "length", "info", "format", "error", "error", "closeQuietly"]}, "repository": {"repo_id": 43326581, "url": "https://github.com/sw360/sw360portal", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 31, "size": 8770, "license": "licensed"}}