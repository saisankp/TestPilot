{"test_class": {"identifier": "PolygonEncoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PolygonEncoder polygonEncoder = new PolygonEncoder();", "modifier": "private", "type": "PolygonEncoder", "declarator": "polygonEncoder = new PolygonEncoder()", "var_name": "polygonEncoder"}], "file": "proto/src/test/java/openlr/proto/encoder/PolygonEncoderTest.java"}, "test_case": {"identifier": "testEncodePolygon", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEncodePolygon() throws OpenLRProtoException {\n        List<GeoCoordinates> geoCoordinates = new ArrayList<>();\n        geoCoordinates.add(new GeoCoordinatesProtoImpl(-122.915, 39.045));\n        geoCoordinates.add(new GeoCoordinatesProtoImpl(-122.914, 39.046));\n        geoCoordinates.add(new GeoCoordinatesProtoImpl(-122.913, 39.047));\n\n        RawPolygonLocRef rawLocationReference = new RawPolygonLocRef(\"1\", geoCoordinates);\n\n        LocationReference locationReference = polygonEncoder.encode(rawLocationReference);\n\n        assertNotNull(locationReference);\n        assertEquals(locationReference.getID(), \"1\");\n        assertEquals(locationReference.getLocationType(), LocationType.POLYGON);\n        assertEquals(locationReference.getDataIdentifier(), \"proto\");\n        assertEquals(locationReference.getDataClass(), LocationReferenceData.class);\n\n        Object locationReferenceData = locationReference.getLocationReferenceData();\n\n        assertTrue(locationReferenceData instanceof LocationReferenceData);\n\n        LocationReferenceData data = (LocationReferenceData) locationReferenceData;\n\n        assertTrue(data.hasPolygonLocationReference());\n\n        PolygonLocationReference polygonLocationReference = data.getPolygonLocationReference();\n\n        List<Coordinates> coordinatesList = polygonLocationReference.getCoordinatesList();\n\n        assertEquals(coordinatesList.size(), 3);\n\n        Coordinates first = coordinatesList.get(0);\n        assertNotNull(first);\n        assertEquals(first.getLongitude(), -122.915);\n        assertEquals(first.getLatitude(), 39.045);\n\n        Coordinates second = coordinatesList.get(1);\n        assertNotNull(second);\n        assertEquals(second.getLongitude(), -122.914);\n        assertEquals(second.getLatitude(), 39.046);\n\n        Coordinates third = coordinatesList.get(2);\n        assertNotNull(third);\n        assertEquals(third.getLongitude(), -122.913);\n        assertEquals(third.getLatitude(), 39.047);\n    }", "signature": "void testEncodePolygon()", "full_signature": "@Test public void testEncodePolygon()", "class_method_signature": "PolygonEncoderTest.testEncodePolygon()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "encode", "assertNotNull", "assertEquals", "getID", "assertEquals", "getLocationType", "assertEquals", "getDataIdentifier", "assertEquals", "getDataClass", "getLocationReferenceData", "assertTrue", "assertTrue", "hasPolygonLocationReference", "getPolygonLocationReference", "getCoordinatesList", "assertEquals", "size", "get", "assertNotNull", "assertEquals", "getLongitude", "assertEquals", "getLatitude", "get", "assertNotNull", "assertEquals", "getLongitude", "assertEquals", "getLatitude", "get", "assertNotNull", "assertEquals", "getLongitude", "assertEquals", "getLatitude"]}, "focal_class": {"identifier": "PolygonEncoder", "superclass": "", "interfaces": "implements LocationReferenceEncoder", "fields": [], "methods": [{"identifier": "encode", "parameters": "(RawLocationReference rawLocationReference)", "modifiers": "@Override public", "return": "LocationReference", "signature": "LocationReference encode(RawLocationReference rawLocationReference)", "full_signature": "@Override public LocationReference encode(RawLocationReference rawLocationReference)", "class_method_signature": "PolygonEncoder.encode(RawLocationReference rawLocationReference)", "testcase": false, "constructor": false}], "file": "proto/src/main/java/openlr/proto/encoder/PolygonEncoder.java"}, "focal_method": {"identifier": "encode", "parameters": "(RawLocationReference rawLocationReference)", "modifiers": "@Override public", "return": "LocationReference", "body": "@Override\n    public LocationReference encode(RawLocationReference rawLocationReference) throws OpenLRProtoException {\n        if (rawLocationReference.getLocationType() != LocationType.POLYGON) {\n            throw new OpenLRProtoException(OpenLRProtoStatusCode.INVALID_LOCATION_REFERENCE);\n        }\n\n        List<Coordinates> coordinates = new ArrayList<>();\n\n        for (GeoCoordinates cornerPoint : rawLocationReference.getCornerPoints()) {\n            Coordinates c = Coordinates.newBuilder()\n                    .setLongitude(cornerPoint.getLongitudeDeg())\n                    .setLatitude(cornerPoint.getLatitudeDeg())\n                    .build();\n            coordinates.add(c);\n        }\n\n        PolygonLocationReference polygonLocationReference = PolygonLocationReference.newBuilder()\n                .addAllCoordinates(coordinates)\n                .build();\n\n        LocationReferenceData locationReferenceData = LocationReferenceData.newBuilder()\n                .setPolygonLocationReference(polygonLocationReference)\n                .build();\n\n        return new LocationReferenceProtoImpl(rawLocationReference.getID(), LocationType.POLYGON, locationReferenceData);\n    }", "signature": "LocationReference encode(RawLocationReference rawLocationReference)", "full_signature": "@Override public LocationReference encode(RawLocationReference rawLocationReference)", "class_method_signature": "PolygonEncoder.encode(RawLocationReference rawLocationReference)", "testcase": false, "constructor": false, "invocations": ["getLocationType", "getCornerPoints", "build", "setLatitude", "setLongitude", "newBuilder", "getLongitudeDeg", "getLatitudeDeg", "add", "build", "addAllCoordinates", "newBuilder", "build", "setPolygonLocationReference", "newBuilder", "getID"]}, "repository": {"repo_id": 187195345, "url": "https://github.com/tomtom-international/openlr", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 24, "size": 4809, "license": "licensed"}}