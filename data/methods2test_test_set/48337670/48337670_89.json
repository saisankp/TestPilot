{"test_class": {"identifier": "ThingManagerImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private @Mock @NonNullByDefault({}) Bundle bundleMock;", "modifier": "private @Mock @NonNullByDefault({})", "type": "Bundle", "declarator": "bundleMock", "var_name": "bundleMock"}, {"original_string": "private @Mock @NonNullByDefault({}) BundleResolver bundleResolverMock;", "modifier": "private @Mock @NonNullByDefault({})", "type": "BundleResolver", "declarator": "bundleResolverMock", "var_name": "bundleResolverMock"}, {"original_string": "private @Mock @NonNullByDefault({}) ChannelGroupTypeRegistry channelGroupTypeRegistryMock;", "modifier": "private @Mock @NonNullByDefault({})", "type": "ChannelGroupTypeRegistry", "declarator": "channelGroupTypeRegistryMock", "var_name": "channelGroupTypeRegistryMock"}, {"original_string": "private @Mock @NonNullByDefault({}) ChannelTypeRegistry channelTypeRegistryMock;", "modifier": "private @Mock @NonNullByDefault({})", "type": "ChannelTypeRegistry", "declarator": "channelTypeRegistryMock", "var_name": "channelTypeRegistryMock"}, {"original_string": "private @Mock @NonNullByDefault({}) CommunicationManager communicationManagerMock;", "modifier": "private @Mock @NonNullByDefault({})", "type": "CommunicationManager", "declarator": "communicationManagerMock", "var_name": "communicationManagerMock"}, {"original_string": "private @Mock @NonNullByDefault({}) EventPublisher eventPublisherMock;", "modifier": "private @Mock @NonNullByDefault({})", "type": "EventPublisher", "declarator": "eventPublisherMock", "var_name": "eventPublisherMock"}, {"original_string": "private @Mock @NonNullByDefault({}) ConfigDescriptionRegistry configDescriptionRegistryMock;", "modifier": "private @Mock @NonNullByDefault({})", "type": "ConfigDescriptionRegistry", "declarator": "configDescriptionRegistryMock", "var_name": "configDescriptionRegistryMock"}, {"original_string": "private @Mock @NonNullByDefault({}) ConfigDescriptionValidator configDescriptionValidatorMock;", "modifier": "private @Mock @NonNullByDefault({})", "type": "ConfigDescriptionValidator", "declarator": "configDescriptionValidatorMock", "var_name": "configDescriptionValidatorMock"}, {"original_string": "private @Mock @NonNullByDefault({}) ItemChannelLinkRegistry itemChannelLinkRegistryMock;", "modifier": "private @Mock @NonNullByDefault({})", "type": "ItemChannelLinkRegistry", "declarator": "itemChannelLinkRegistryMock", "var_name": "itemChannelLinkRegistryMock"}, {"original_string": "private @Mock @NonNullByDefault({}) ThingTypeRegistry thingTypeRegistryMock;", "modifier": "private @Mock @NonNullByDefault({})", "type": "ThingTypeRegistry", "declarator": "thingTypeRegistryMock", "var_name": "thingTypeRegistryMock"}, {"original_string": "private @Mock @NonNullByDefault({}) ReadyService readyServiceMock;", "modifier": "private @Mock @NonNullByDefault({})", "type": "ReadyService", "declarator": "readyServiceMock", "var_name": "readyServiceMock"}, {"original_string": "private @Mock @NonNullByDefault({}) SafeCaller safeCallerMock;", "modifier": "private @Mock @NonNullByDefault({})", "type": "SafeCaller", "declarator": "safeCallerMock", "var_name": "safeCallerMock"}, {"original_string": "private @Mock @NonNullByDefault({}) Storage<Object> storageMock;", "modifier": "private @Mock @NonNullByDefault({})", "type": "Storage<Object>", "declarator": "storageMock", "var_name": "storageMock"}, {"original_string": "private @Mock @NonNullByDefault({}) StorageService storageServiceMock;", "modifier": "private @Mock @NonNullByDefault({})", "type": "StorageService", "declarator": "storageServiceMock", "var_name": "storageServiceMock"}, {"original_string": "private @Mock @NonNullByDefault({}) Thing thingMock;", "modifier": "private @Mock @NonNullByDefault({})", "type": "Thing", "declarator": "thingMock", "var_name": "thingMock"}, {"original_string": "private @Mock @NonNullByDefault({}) ThingRegistryImpl thingRegistryMock;", "modifier": "private @Mock @NonNullByDefault({})", "type": "ThingRegistryImpl", "declarator": "thingRegistryMock", "var_name": "thingRegistryMock"}, {"original_string": "private final ThingStatusInfoI18nLocalizationService thingStatusInfoI18nLocalizationService = new ThingStatusInfoI18nLocalizationService();", "modifier": "private final", "type": "ThingStatusInfoI18nLocalizationService", "declarator": "thingStatusInfoI18nLocalizationService = new ThingStatusInfoI18nLocalizationService()", "var_name": "thingStatusInfoI18nLocalizationService"}], "file": "bundles/org.openhab.core.thing/src/test/java/org/openhab/core/thing/internal/ThingManagerImplTest.java"}, "test_case": {"identifier": "setEnabledWithUnknownThingUID", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void setEnabledWithUnknownThingUID() throws Exception {\n        ThingUID unknownUID = new ThingUID(\"someBundle\", \"someType\", \"someID\");\n\n        when(storageServiceMock.getStorage(eq(\"thing_status_storage\"), any(ClassLoader.class))).thenReturn(storageMock);\n\n        ThingManagerImpl thingManager = createThingManager();\n\n        thingManager.setEnabled(unknownUID, true);\n        verify(storageMock).remove(eq(unknownUID.getAsString()));\n\n        thingManager.setEnabled(unknownUID, false);\n        verify(storageMock).put(eq(unknownUID.getAsString()), eq(\"\"));\n    }", "signature": "void setEnabledWithUnknownThingUID()", "full_signature": "@Test public void setEnabledWithUnknownThingUID()", "class_method_signature": "ThingManagerImplTest.setEnabledWithUnknownThingUID()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getStorage", "eq", "any", "createThingManager", "setEnabled", "remove", "verify", "eq", "getAsString", "setEnabled", "put", "verify", "eq", "getAsString", "eq"]}, "focal_class": {"identifier": "ThingManagerImpl", "superclass": "", "interfaces": "implements ThingManager, ThingTracker, ThingTypeMigrationService, ReadyService.ReadyTracker", "fields": [{"original_string": "static final String XML_THING_TYPE = \"esh.xmlThingTypes\";", "modifier": "static final", "type": "String", "declarator": "XML_THING_TYPE = \"esh.xmlThingTypes\"", "var_name": "XML_THING_TYPE"}, {"original_string": "private static final String THING_STATUS_STORAGE_NAME = \"thing_status_storage\";", "modifier": "private static final", "type": "String", "declarator": "THING_STATUS_STORAGE_NAME = \"thing_status_storage\"", "var_name": "THING_STATUS_STORAGE_NAME"}, {"original_string": "private static final String FORCEREMOVE_THREADPOOL_NAME = \"forceRemove\";", "modifier": "private static final", "type": "String", "declarator": "FORCEREMOVE_THREADPOOL_NAME = \"forceRemove\"", "var_name": "FORCEREMOVE_THREADPOOL_NAME"}, {"original_string": "private static final String THING_MANAGER_THREADPOOL_NAME = \"thingManager\";", "modifier": "private static final", "type": "String", "declarator": "THING_MANAGER_THREADPOOL_NAME = \"thingManager\"", "var_name": "THING_MANAGER_THREADPOOL_NAME"}, {"original_string": "private final Logger logger = LoggerFactory.getLogger(ThingManagerImpl.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ThingManagerImpl.class)", "var_name": "logger"}, {"original_string": "private final ScheduledExecutorService scheduler = ThreadPoolManager\n            .getScheduledPool(THING_MANAGER_THREADPOOL_NAME);", "modifier": "private final", "type": "ScheduledExecutorService", "declarator": "scheduler = ThreadPoolManager\n            .getScheduledPool(THING_MANAGER_THREADPOOL_NAME)", "var_name": "scheduler"}, {"original_string": "private final List<ThingHandlerFactory> thingHandlerFactories = new CopyOnWriteArrayList<>();", "modifier": "private final", "type": "List<ThingHandlerFactory>", "declarator": "thingHandlerFactories = new CopyOnWriteArrayList<>()", "var_name": "thingHandlerFactories"}, {"original_string": "private final Map<ThingUID, ThingHandler> thingHandlers = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<ThingUID, ThingHandler>", "declarator": "thingHandlers = new ConcurrentHashMap<>()", "var_name": "thingHandlers"}, {"original_string": "private final Map<ThingHandlerFactory, Set<ThingHandler>> thingHandlersByFactory = new HashMap<>();", "modifier": "private final", "type": "Map<ThingHandlerFactory, Set<ThingHandler>>", "declarator": "thingHandlersByFactory = new HashMap<>()", "var_name": "thingHandlersByFactory"}, {"original_string": "private final Set<Thing> things = new CopyOnWriteArraySet<>();", "modifier": "private final", "type": "Set<Thing>", "declarator": "things = new CopyOnWriteArraySet<>()", "var_name": "things"}, {"original_string": "private final Map<ThingUID, Lock> thingLocks = new HashMap<>();", "modifier": "private final", "type": "Map<ThingUID, Lock>", "declarator": "thingLocks = new HashMap<>()", "var_name": "thingLocks"}, {"original_string": "private final Set<ThingUID> thingUpdatedLock = new HashSet<>();", "modifier": "private final", "type": "Set<ThingUID>", "declarator": "thingUpdatedLock = new HashSet<>()", "var_name": "thingUpdatedLock"}, {"original_string": "private final Set<String> loadedXmlThingTypes = new CopyOnWriteArraySet<>();", "modifier": "private final", "type": "Set<String>", "declarator": "loadedXmlThingTypes = new CopyOnWriteArraySet<>()", "var_name": "loadedXmlThingTypes"}, {"original_string": "private BundleResolver bundleResolver;", "modifier": "private", "type": "BundleResolver", "declarator": "bundleResolver", "var_name": "bundleResolver"}, {"original_string": "private final ChannelGroupTypeRegistry channelGroupTypeRegistry;", "modifier": "private final", "type": "ChannelGroupTypeRegistry", "declarator": "channelGroupTypeRegistry", "var_name": "channelGroupTypeRegistry"}, {"original_string": "private final ChannelTypeRegistry channelTypeRegistry;", "modifier": "private final", "type": "ChannelTypeRegistry", "declarator": "channelTypeRegistry", "var_name": "channelTypeRegistry"}, {"original_string": "private final CommunicationManager communicationManager;", "modifier": "private final", "type": "CommunicationManager", "declarator": "communicationManager", "var_name": "communicationManager"}, {"original_string": "private final ConfigDescriptionRegistry configDescriptionRegistry;", "modifier": "private final", "type": "ConfigDescriptionRegistry", "declarator": "configDescriptionRegistry", "var_name": "configDescriptionRegistry"}, {"original_string": "private final ConfigDescriptionValidator configDescriptionValidator;", "modifier": "private final", "type": "ConfigDescriptionValidator", "declarator": "configDescriptionValidator", "var_name": "configDescriptionValidator"}, {"original_string": "private final EventPublisher eventPublisher;", "modifier": "private final", "type": "EventPublisher", "declarator": "eventPublisher", "var_name": "eventPublisher"}, {"original_string": "private final ThingTypeRegistry thingTypeRegistry;", "modifier": "private final", "type": "ThingTypeRegistry", "declarator": "thingTypeRegistry", "var_name": "thingTypeRegistry"}, {"original_string": "private final ItemChannelLinkRegistry itemChannelLinkRegistry;", "modifier": "private final", "type": "ItemChannelLinkRegistry", "declarator": "itemChannelLinkRegistry", "var_name": "itemChannelLinkRegistry"}, {"original_string": "private final ReadyService readyService;", "modifier": "private final", "type": "ReadyService", "declarator": "readyService", "var_name": "readyService"}, {"original_string": "private final SafeCaller safeCaller;", "modifier": "private final", "type": "SafeCaller", "declarator": "safeCaller", "var_name": "safeCaller"}, {"original_string": "private final Storage<String> storage;", "modifier": "private final", "type": "Storage<String>", "declarator": "storage", "var_name": "storage"}, {"original_string": "private final ThingRegistryImpl thingRegistry;", "modifier": "private final", "type": "ThingRegistryImpl", "declarator": "thingRegistry", "var_name": "thingRegistry"}, {"original_string": "private final ThingStatusInfoI18nLocalizationService thingStatusInfoI18nLocalizationService;", "modifier": "private final", "type": "ThingStatusInfoI18nLocalizationService", "declarator": "thingStatusInfoI18nLocalizationService", "var_name": "thingStatusInfoI18nLocalizationService"}, {"original_string": "private final ThingHandlerCallback thingHandlerCallback = new ThingHandlerCallback() {\n\n        @Override\n        public void stateUpdated(ChannelUID channelUID, State state) {\n            communicationManager.stateUpdated(channelUID, state);\n        }\n\n        @Override\n        public void postCommand(ChannelUID channelUID, Command command) {\n            communicationManager.postCommand(channelUID, command);\n        }\n\n        @Override\n        public void channelTriggered(Thing thing, ChannelUID channelUID, String event) {\n            communicationManager.channelTriggered(thing, channelUID, event);\n        }\n\n        @Override\n        public void statusUpdated(Thing thing, ThingStatusInfo statusInfo) {\n            // note: all provoked operations based on a status update should be executed asynchronously!\n            ThingStatusInfo oldStatusInfo = thing.getStatusInfo();\n            ensureValidStatus(oldStatusInfo.getStatus(), statusInfo.getStatus());\n\n            if (ThingStatus.REMOVING.equals(oldStatusInfo.getStatus())\n                    && !ThingStatus.REMOVED.equals(statusInfo.getStatus())) {\n                // only allow REMOVING -> REMOVED transition, all others are illegal\n                throw new IllegalArgumentException(MessageFormat.format(\n                        \"Illegal status transition from REMOVING to {0}, only REMOVED would have been allowed.\",\n                        statusInfo.getStatus()));\n            }\n\n            // update thing status and send event about new status\n            setThingStatus(thing, statusInfo);\n\n            // if thing is a bridge\n            if (isBridge(thing)) {\n                handleBridgeStatusUpdate((Bridge) thing, statusInfo, oldStatusInfo);\n            }\n            // if thing has a bridge\n            if (hasBridge(thing)) {\n                handleBridgeChildStatusUpdate(thing, oldStatusInfo);\n            }\n            // notify thing registry about thing removal\n            if (ThingStatus.REMOVED.equals(thing.getStatus())) {\n                notifyRegistryAboutForceRemove(thing);\n            }\n        }\n\n        private void ensureValidStatus(ThingStatus oldStatus, ThingStatus newStatus) {\n            if (!(ThingStatus.UNKNOWN.equals(newStatus) || ThingStatus.ONLINE.equals(newStatus)\n                    || ThingStatus.OFFLINE.equals(newStatus) || ThingStatus.REMOVED.equals(newStatus))) {\n                throw new IllegalArgumentException(MessageFormat.format(\n                        \"Illegal status {0}. Bindings only may set {1}, {2}, {3} or {4}.\", newStatus,\n                        ThingStatus.UNKNOWN, ThingStatus.ONLINE, ThingStatus.OFFLINE, ThingStatus.REMOVED));\n            }\n            if (ThingStatus.REMOVED.equals(newStatus) && !ThingStatus.REMOVING.equals(oldStatus)) {\n                throw new IllegalArgumentException(\n                        MessageFormat.format(\"Illegal status {0}. The thing was in state {1} and not in {2}\", newStatus,\n                                oldStatus, ThingStatus.REMOVING));\n            }\n        }\n\n        private void handleBridgeStatusUpdate(Bridge bridge, ThingStatusInfo statusInfo,\n                ThingStatusInfo oldStatusInfo) {\n            if (ThingHandlerHelper.isHandlerInitialized(bridge)\n                    && (ThingStatus.INITIALIZING.equals(oldStatusInfo.getStatus()))) {\n                // bridge has just been initialized: initialize child things as well\n                registerChildHandlers(bridge);\n            } else if (!statusInfo.equals(oldStatusInfo)) {\n                // bridge status has been changed: notify child things about status change\n                notifyThingsAboutBridgeStatusChange(bridge, statusInfo);\n            }\n        }\n\n        private void handleBridgeChildStatusUpdate(Thing thing, ThingStatusInfo oldStatusInfo) {\n            if (ThingHandlerHelper.isHandlerInitialized(thing)\n                    && ThingStatus.INITIALIZING.equals(oldStatusInfo.getStatus())) {\n                // child thing has just been initialized: notify bridge about it\n                notifyBridgeAboutChildHandlerInitialization(thing);\n            }\n        }\n\n        @Override\n        public void thingUpdated(final Thing thing) {\n            thingUpdatedLock.add(thing.getUID());\n            AccessController.doPrivileged(new PrivilegedAction<@Nullable Void>() {\n                @Override\n                public @Nullable Void run() {\n                    Provider<Thing> provider = thingRegistry.getProvider(thing);\n                    if (provider == null) {\n                        throw new IllegalArgumentException(MessageFormat.format(\n                                \"Provider for thing {0} cannot be determined because it is not known to the registry\",\n                                thing.getUID().getAsString()));\n                    }\n                    if (provider instanceof ManagedProvider) {\n                        @SuppressWarnings(\"unchecked\")\n                        ManagedProvider<Thing, ThingUID> managedProvider = (ManagedProvider<Thing, ThingUID>) provider;\n                        managedProvider.update(thing);\n                    } else {\n                        logger.debug(\"Only updating thing {} in the registry because provider {} is not managed.\",\n                                thing.getUID().getAsString(), provider);\n                        Thing oldThing = thingRegistry.get(thing.getUID());\n                        if (oldThing == null) {\n                            throw new IllegalArgumentException(MessageFormat.format(\n                                    \"Cannot update thing {0} because it is not known to the registry\",\n                                    thing.getUID().getAsString()));\n                        }\n                        thingRegistry.updated(provider, oldThing, thing);\n                    }\n                    return null;\n                }\n            });\n            thingUpdatedLock.remove(thing.getUID());\n        }\n\n        @Override\n        public void validateConfigurationParameters(Thing thing, Map<String, Object> configurationParameters) {\n            ThingType thingType = thingTypeRegistry.getThingType(thing.getThingTypeUID());\n            if (thingType != null && thingType.getConfigDescriptionURI() != null) {\n                configDescriptionValidator.validate(configurationParameters, thingType.getConfigDescriptionURI());\n            }\n        }\n\n        @Override\n        public void configurationUpdated(Thing thing) {\n            if (!ThingHandlerHelper.isHandlerInitialized(thing)) {\n                initializeHandler(thing);\n            }\n        }\n\n        @Override\n        public void migrateThingType(final Thing thing, final ThingTypeUID thingTypeUID,\n                final Configuration configuration) {\n            ThingManagerImpl.this.migrateThingType(thing, thingTypeUID, configuration);\n        }\n\n        @Override\n        public ChannelBuilder createChannelBuilder(ChannelUID channelUID, ChannelTypeUID channelTypeUID) {\n            ChannelType channelType = channelTypeRegistry.getChannelType(channelTypeUID);\n            if (channelType == null) {\n                throw new IllegalArgumentException(String.format(\"Channel type '%s' is not known\", channelTypeUID));\n            }\n            return ThingFactoryHelper.createChannelBuilder(channelUID, channelType, configDescriptionRegistry);\n        };\n\n        @Override\n        public ChannelBuilder editChannel(Thing thing, ChannelUID channelUID) {\n            Channel channel = thing.getChannel(channelUID.getId());\n            if (channel == null) {\n                throw new IllegalArgumentException(\n                        String.format(\"Channel '%s' does not exist for thing '%s'\", channelUID, thing.getUID()));\n            }\n            return ChannelBuilder.create(channel);\n        }\n\n        @Override\n        public List<ChannelBuilder> createChannelBuilders(ChannelGroupUID channelGroupUID,\n                ChannelGroupTypeUID channelGroupTypeUID) {\n            ChannelGroupType channelGroupType = channelGroupTypeRegistry.getChannelGroupType(channelGroupTypeUID);\n            if (channelGroupType == null) {\n                throw new IllegalArgumentException(\n                        String.format(\"Channel group type '%s' is not known\", channelGroupTypeUID));\n            }\n            List<ChannelBuilder> channelBuilders = new ArrayList<>();\n            for (ChannelDefinition channelDefinition : channelGroupType.getChannelDefinitions()) {\n                ChannelType channelType = channelTypeRegistry.getChannelType(channelDefinition.getChannelTypeUID());\n                if (channelType != null) {\n                    ChannelUID channelUID = new ChannelUID(channelGroupUID, channelDefinition.getId());\n                    channelBuilders.add(ThingFactoryHelper.createChannelBuilder(channelUID, channelType,\n                            configDescriptionRegistry));\n                }\n            }\n            return channelBuilders;\n        }\n\n        @Override\n        public boolean isChannelLinked(ChannelUID channelUID) {\n            return itemChannelLinkRegistry.isLinked(channelUID);\n        }\n\n        @Override\n        public @Nullable Bridge getBridge(ThingUID bridgeUID) {\n            return (Bridge) thingRegistry.get(bridgeUID);\n        }\n    };", "modifier": "private final", "type": "ThingHandlerCallback", "declarator": "thingHandlerCallback = new ThingHandlerCallback() {\n\n        @Override\n        public void stateUpdated(ChannelUID channelUID, State state) {\n            communicationManager.stateUpdated(channelUID, state);\n        }\n\n        @Override\n        public void postCommand(ChannelUID channelUID, Command command) {\n            communicationManager.postCommand(channelUID, command);\n        }\n\n        @Override\n        public void channelTriggered(Thing thing, ChannelUID channelUID, String event) {\n            communicationManager.channelTriggered(thing, channelUID, event);\n        }\n\n        @Override\n        public void statusUpdated(Thing thing, ThingStatusInfo statusInfo) {\n            // note: all provoked operations based on a status update should be executed asynchronously!\n            ThingStatusInfo oldStatusInfo = thing.getStatusInfo();\n            ensureValidStatus(oldStatusInfo.getStatus(), statusInfo.getStatus());\n\n            if (ThingStatus.REMOVING.equals(oldStatusInfo.getStatus())\n                    && !ThingStatus.REMOVED.equals(statusInfo.getStatus())) {\n                // only allow REMOVING -> REMOVED transition, all others are illegal\n                throw new IllegalArgumentException(MessageFormat.format(\n                        \"Illegal status transition from REMOVING to {0}, only REMOVED would have been allowed.\",\n                        statusInfo.getStatus()));\n            }\n\n            // update thing status and send event about new status\n            setThingStatus(thing, statusInfo);\n\n            // if thing is a bridge\n            if (isBridge(thing)) {\n                handleBridgeStatusUpdate((Bridge) thing, statusInfo, oldStatusInfo);\n            }\n            // if thing has a bridge\n            if (hasBridge(thing)) {\n                handleBridgeChildStatusUpdate(thing, oldStatusInfo);\n            }\n            // notify thing registry about thing removal\n            if (ThingStatus.REMOVED.equals(thing.getStatus())) {\n                notifyRegistryAboutForceRemove(thing);\n            }\n        }\n\n        private void ensureValidStatus(ThingStatus oldStatus, ThingStatus newStatus) {\n            if (!(ThingStatus.UNKNOWN.equals(newStatus) || ThingStatus.ONLINE.equals(newStatus)\n                    || ThingStatus.OFFLINE.equals(newStatus) || ThingStatus.REMOVED.equals(newStatus))) {\n                throw new IllegalArgumentException(MessageFormat.format(\n                        \"Illegal status {0}. Bindings only may set {1}, {2}, {3} or {4}.\", newStatus,\n                        ThingStatus.UNKNOWN, ThingStatus.ONLINE, ThingStatus.OFFLINE, ThingStatus.REMOVED));\n            }\n            if (ThingStatus.REMOVED.equals(newStatus) && !ThingStatus.REMOVING.equals(oldStatus)) {\n                throw new IllegalArgumentException(\n                        MessageFormat.format(\"Illegal status {0}. The thing was in state {1} and not in {2}\", newStatus,\n                                oldStatus, ThingStatus.REMOVING));\n            }\n        }\n\n        private void handleBridgeStatusUpdate(Bridge bridge, ThingStatusInfo statusInfo,\n                ThingStatusInfo oldStatusInfo) {\n            if (ThingHandlerHelper.isHandlerInitialized(bridge)\n                    && (ThingStatus.INITIALIZING.equals(oldStatusInfo.getStatus()))) {\n                // bridge has just been initialized: initialize child things as well\n                registerChildHandlers(bridge);\n            } else if (!statusInfo.equals(oldStatusInfo)) {\n                // bridge status has been changed: notify child things about status change\n                notifyThingsAboutBridgeStatusChange(bridge, statusInfo);\n            }\n        }\n\n        private void handleBridgeChildStatusUpdate(Thing thing, ThingStatusInfo oldStatusInfo) {\n            if (ThingHandlerHelper.isHandlerInitialized(thing)\n                    && ThingStatus.INITIALIZING.equals(oldStatusInfo.getStatus())) {\n                // child thing has just been initialized: notify bridge about it\n                notifyBridgeAboutChildHandlerInitialization(thing);\n            }\n        }\n\n        @Override\n        public void thingUpdated(final Thing thing) {\n            thingUpdatedLock.add(thing.getUID());\n            AccessController.doPrivileged(new PrivilegedAction<@Nullable Void>() {\n                @Override\n                public @Nullable Void run() {\n                    Provider<Thing> provider = thingRegistry.getProvider(thing);\n                    if (provider == null) {\n                        throw new IllegalArgumentException(MessageFormat.format(\n                                \"Provider for thing {0} cannot be determined because it is not known to the registry\",\n                                thing.getUID().getAsString()));\n                    }\n                    if (provider instanceof ManagedProvider) {\n                        @SuppressWarnings(\"unchecked\")\n                        ManagedProvider<Thing, ThingUID> managedProvider = (ManagedProvider<Thing, ThingUID>) provider;\n                        managedProvider.update(thing);\n                    } else {\n                        logger.debug(\"Only updating thing {} in the registry because provider {} is not managed.\",\n                                thing.getUID().getAsString(), provider);\n                        Thing oldThing = thingRegistry.get(thing.getUID());\n                        if (oldThing == null) {\n                            throw new IllegalArgumentException(MessageFormat.format(\n                                    \"Cannot update thing {0} because it is not known to the registry\",\n                                    thing.getUID().getAsString()));\n                        }\n                        thingRegistry.updated(provider, oldThing, thing);\n                    }\n                    return null;\n                }\n            });\n            thingUpdatedLock.remove(thing.getUID());\n        }\n\n        @Override\n        public void validateConfigurationParameters(Thing thing, Map<String, Object> configurationParameters) {\n            ThingType thingType = thingTypeRegistry.getThingType(thing.getThingTypeUID());\n            if (thingType != null && thingType.getConfigDescriptionURI() != null) {\n                configDescriptionValidator.validate(configurationParameters, thingType.getConfigDescriptionURI());\n            }\n        }\n\n        @Override\n        public void configurationUpdated(Thing thing) {\n            if (!ThingHandlerHelper.isHandlerInitialized(thing)) {\n                initializeHandler(thing);\n            }\n        }\n\n        @Override\n        public void migrateThingType(final Thing thing, final ThingTypeUID thingTypeUID,\n                final Configuration configuration) {\n            ThingManagerImpl.this.migrateThingType(thing, thingTypeUID, configuration);\n        }\n\n        @Override\n        public ChannelBuilder createChannelBuilder(ChannelUID channelUID, ChannelTypeUID channelTypeUID) {\n            ChannelType channelType = channelTypeRegistry.getChannelType(channelTypeUID);\n            if (channelType == null) {\n                throw new IllegalArgumentException(String.format(\"Channel type '%s' is not known\", channelTypeUID));\n            }\n            return ThingFactoryHelper.createChannelBuilder(channelUID, channelType, configDescriptionRegistry);\n        };\n\n        @Override\n        public ChannelBuilder editChannel(Thing thing, ChannelUID channelUID) {\n            Channel channel = thing.getChannel(channelUID.getId());\n            if (channel == null) {\n                throw new IllegalArgumentException(\n                        String.format(\"Channel '%s' does not exist for thing '%s'\", channelUID, thing.getUID()));\n            }\n            return ChannelBuilder.create(channel);\n        }\n\n        @Override\n        public List<ChannelBuilder> createChannelBuilders(ChannelGroupUID channelGroupUID,\n                ChannelGroupTypeUID channelGroupTypeUID) {\n            ChannelGroupType channelGroupType = channelGroupTypeRegistry.getChannelGroupType(channelGroupTypeUID);\n            if (channelGroupType == null) {\n                throw new IllegalArgumentException(\n                        String.format(\"Channel group type '%s' is not known\", channelGroupTypeUID));\n            }\n            List<ChannelBuilder> channelBuilders = new ArrayList<>();\n            for (ChannelDefinition channelDefinition : channelGroupType.getChannelDefinitions()) {\n                ChannelType channelType = channelTypeRegistry.getChannelType(channelDefinition.getChannelTypeUID());\n                if (channelType != null) {\n                    ChannelUID channelUID = new ChannelUID(channelGroupUID, channelDefinition.getId());\n                    channelBuilders.add(ThingFactoryHelper.createChannelBuilder(channelUID, channelType,\n                            configDescriptionRegistry));\n                }\n            }\n            return channelBuilders;\n        }\n\n        @Override\n        public boolean isChannelLinked(ChannelUID channelUID) {\n            return itemChannelLinkRegistry.isLinked(channelUID);\n        }\n\n        @Override\n        public @Nullable Bridge getBridge(ThingUID bridgeUID) {\n            return (Bridge) thingRegistry.get(bridgeUID);\n        }\n    }", "var_name": "thingHandlerCallback"}], "methods": [{"identifier": "ThingManagerImpl", "parameters": "( //\n            final @Reference BundleResolver bundleResolver,\n            final @Reference ChannelGroupTypeRegistry channelGroupTypeRegistry,\n            final @Reference ChannelTypeRegistry channelTypeRegistry,\n            final @Reference CommunicationManager communicationManager,\n            final @Reference ConfigDescriptionRegistry configDescriptionRegistry,\n            final @Reference ConfigDescriptionValidator configDescriptionValidator,\n            final @Reference EventPublisher eventPublisher,\n            final @Reference ItemChannelLinkRegistry itemChannelLinkRegistry,\n            final @Reference ReadyService readyService, //\n            final @Reference SafeCaller safeCaller, //\n            final @Reference StorageService storageService, //\n            final @Reference ThingRegistry thingRegistry,\n            final @Reference ThingStatusInfoI18nLocalizationService thingStatusInfoI18nLocalizationService,\n            final @Reference ThingTypeRegistry thingTypeRegistry)", "modifiers": "@Activate public", "return": "", "signature": " ThingManagerImpl( //\n            final @Reference BundleResolver bundleResolver,\n            final @Reference ChannelGroupTypeRegistry channelGroupTypeRegistry,\n            final @Reference ChannelTypeRegistry channelTypeRegistry,\n            final @Reference CommunicationManager communicationManager,\n            final @Reference ConfigDescriptionRegistry configDescriptionRegistry,\n            final @Reference ConfigDescriptionValidator configDescriptionValidator,\n            final @Reference EventPublisher eventPublisher,\n            final @Reference ItemChannelLinkRegistry itemChannelLinkRegistry,\n            final @Reference ReadyService readyService, //\n            final @Reference SafeCaller safeCaller, //\n            final @Reference StorageService storageService, //\n            final @Reference ThingRegistry thingRegistry,\n            final @Reference ThingStatusInfoI18nLocalizationService thingStatusInfoI18nLocalizationService,\n            final @Reference ThingTypeRegistry thingTypeRegistry)", "full_signature": "@Activate public  ThingManagerImpl( //\n            final @Reference BundleResolver bundleResolver,\n            final @Reference ChannelGroupTypeRegistry channelGroupTypeRegistry,\n            final @Reference ChannelTypeRegistry channelTypeRegistry,\n            final @Reference CommunicationManager communicationManager,\n            final @Reference ConfigDescriptionRegistry configDescriptionRegistry,\n            final @Reference ConfigDescriptionValidator configDescriptionValidator,\n            final @Reference EventPublisher eventPublisher,\n            final @Reference ItemChannelLinkRegistry itemChannelLinkRegistry,\n            final @Reference ReadyService readyService, //\n            final @Reference SafeCaller safeCaller, //\n            final @Reference StorageService storageService, //\n            final @Reference ThingRegistry thingRegistry,\n            final @Reference ThingStatusInfoI18nLocalizationService thingStatusInfoI18nLocalizationService,\n            final @Reference ThingTypeRegistry thingTypeRegistry)", "class_method_signature": "ThingManagerImpl.ThingManagerImpl( //\n            final @Reference BundleResolver bundleResolver,\n            final @Reference ChannelGroupTypeRegistry channelGroupTypeRegistry,\n            final @Reference ChannelTypeRegistry channelTypeRegistry,\n            final @Reference CommunicationManager communicationManager,\n            final @Reference ConfigDescriptionRegistry configDescriptionRegistry,\n            final @Reference ConfigDescriptionValidator configDescriptionValidator,\n            final @Reference EventPublisher eventPublisher,\n            final @Reference ItemChannelLinkRegistry itemChannelLinkRegistry,\n            final @Reference ReadyService readyService, //\n            final @Reference SafeCaller safeCaller, //\n            final @Reference StorageService storageService, //\n            final @Reference ThingRegistry thingRegistry,\n            final @Reference ThingStatusInfoI18nLocalizationService thingStatusInfoI18nLocalizationService,\n            final @Reference ThingTypeRegistry thingTypeRegistry)", "testcase": false, "constructor": true}, {"identifier": "deactivate", "parameters": "(ComponentContext componentContext)", "modifiers": "@Deactivate protected synchronized", "return": "void", "signature": "void deactivate(ComponentContext componentContext)", "full_signature": "@Deactivate protected synchronized void deactivate(ComponentContext componentContext)", "class_method_signature": "ThingManagerImpl.deactivate(ComponentContext componentContext)", "testcase": false, "constructor": false}, {"identifier": "migrateThingType", "parameters": "(final Thing thing, final ThingTypeUID thingTypeUID,\n            final @Nullable Configuration configuration)", "modifiers": "@Override public", "return": "void", "signature": "void migrateThingType(final Thing thing, final ThingTypeUID thingTypeUID,\n            final @Nullable Configuration configuration)", "full_signature": "@Override public void migrateThingType(final Thing thing, final ThingTypeUID thingTypeUID,\n            final @Nullable Configuration configuration)", "class_method_signature": "ThingManagerImpl.migrateThingType(final Thing thing, final ThingTypeUID thingTypeUID,\n            final @Nullable Configuration configuration)", "testcase": false, "constructor": false}, {"identifier": "thingAdded", "parameters": "(Thing thing, ThingTrackerEvent thingTrackerEvent)", "modifiers": "@Override public", "return": "void", "signature": "void thingAdded(Thing thing, ThingTrackerEvent thingTrackerEvent)", "full_signature": "@Override public void thingAdded(Thing thing, ThingTrackerEvent thingTrackerEvent)", "class_method_signature": "ThingManagerImpl.thingAdded(Thing thing, ThingTrackerEvent thingTrackerEvent)", "testcase": false, "constructor": false}, {"identifier": "thingRemoving", "parameters": "(Thing thing, ThingTrackerEvent thingTrackerEvent)", "modifiers": "@Override public", "return": "void", "signature": "void thingRemoving(Thing thing, ThingTrackerEvent thingTrackerEvent)", "full_signature": "@Override public void thingRemoving(Thing thing, ThingTrackerEvent thingTrackerEvent)", "class_method_signature": "ThingManagerImpl.thingRemoving(Thing thing, ThingTrackerEvent thingTrackerEvent)", "testcase": false, "constructor": false}, {"identifier": "thingRemoved", "parameters": "(final Thing thing, ThingTrackerEvent thingTrackerEvent)", "modifiers": "@Override public", "return": "void", "signature": "void thingRemoved(final Thing thing, ThingTrackerEvent thingTrackerEvent)", "full_signature": "@Override public void thingRemoved(final Thing thing, ThingTrackerEvent thingTrackerEvent)", "class_method_signature": "ThingManagerImpl.thingRemoved(final Thing thing, ThingTrackerEvent thingTrackerEvent)", "testcase": false, "constructor": false}, {"identifier": "thingUpdated", "parameters": "(final Thing thing, ThingTrackerEvent thingTrackerEvent)", "modifiers": "@Override public", "return": "void", "signature": "void thingUpdated(final Thing thing, ThingTrackerEvent thingTrackerEvent)", "full_signature": "@Override public void thingUpdated(final Thing thing, ThingTrackerEvent thingTrackerEvent)", "class_method_signature": "ThingManagerImpl.thingUpdated(final Thing thing, ThingTrackerEvent thingTrackerEvent)", "testcase": false, "constructor": false}, {"identifier": "replaceThing", "parameters": "(@Nullable Thing oldThing, Thing newThing)", "modifiers": "private @Nullable", "return": "ThingHandler", "signature": "ThingHandler replaceThing(@Nullable Thing oldThing, Thing newThing)", "full_signature": "private @Nullable ThingHandler replaceThing(@Nullable Thing oldThing, Thing newThing)", "class_method_signature": "ThingManagerImpl.replaceThing(@Nullable Thing oldThing, Thing newThing)", "testcase": false, "constructor": false}, {"identifier": "getThing", "parameters": "(ThingUID id)", "modifiers": "private @Nullable", "return": "Thing", "signature": "Thing getThing(ThingUID id)", "full_signature": "private @Nullable Thing getThing(ThingUID id)", "class_method_signature": "ThingManagerImpl.getThing(ThingUID id)", "testcase": false, "constructor": false}, {"identifier": "getThingType", "parameters": "(Thing thing)", "modifiers": "private @Nullable", "return": "ThingType", "signature": "ThingType getThingType(Thing thing)", "full_signature": "private @Nullable ThingType getThingType(Thing thing)", "class_method_signature": "ThingManagerImpl.getThingType(Thing thing)", "testcase": false, "constructor": false}, {"identifier": "findThingHandlerFactory", "parameters": "(ThingTypeUID thingTypeUID)", "modifiers": "private @Nullable", "return": "ThingHandlerFactory", "signature": "ThingHandlerFactory findThingHandlerFactory(ThingTypeUID thingTypeUID)", "full_signature": "private @Nullable ThingHandlerFactory findThingHandlerFactory(ThingTypeUID thingTypeUID)", "class_method_signature": "ThingManagerImpl.findThingHandlerFactory(ThingTypeUID thingTypeUID)", "testcase": false, "constructor": false}, {"identifier": "registerHandler", "parameters": "(Thing thing, ThingHandlerFactory thingHandlerFactory)", "modifiers": "private", "return": "void", "signature": "void registerHandler(Thing thing, ThingHandlerFactory thingHandlerFactory)", "full_signature": "private void registerHandler(Thing thing, ThingHandlerFactory thingHandlerFactory)", "class_method_signature": "ThingManagerImpl.registerHandler(Thing thing, ThingHandlerFactory thingHandlerFactory)", "testcase": false, "constructor": false}, {"identifier": "doRegisterHandler", "parameters": "(final Thing thing, final ThingHandlerFactory thingHandlerFactory)", "modifiers": "private", "return": "void", "signature": "void doRegisterHandler(final Thing thing, final ThingHandlerFactory thingHandlerFactory)", "full_signature": "private void doRegisterHandler(final Thing thing, final ThingHandlerFactory thingHandlerFactory)", "class_method_signature": "ThingManagerImpl.doRegisterHandler(final Thing thing, final ThingHandlerFactory thingHandlerFactory)", "testcase": false, "constructor": false}, {"identifier": "registerChildHandlers", "parameters": "(final Bridge bridge)", "modifiers": "private", "return": "void", "signature": "void registerChildHandlers(final Bridge bridge)", "full_signature": "private void registerChildHandlers(final Bridge bridge)", "class_method_signature": "ThingManagerImpl.registerChildHandlers(final Bridge bridge)", "testcase": false, "constructor": false}, {"identifier": "initializeHandler", "parameters": "(Thing thing)", "modifiers": "private", "return": "void", "signature": "void initializeHandler(Thing thing)", "full_signature": "private void initializeHandler(Thing thing)", "class_method_signature": "ThingManagerImpl.initializeHandler(Thing thing)", "testcase": false, "constructor": false}, {"identifier": "isInitializable", "parameters": "(Thing thing, @Nullable ThingType thingType)", "modifiers": "private", "return": "boolean", "signature": "boolean isInitializable(Thing thing, @Nullable ThingType thingType)", "full_signature": "private boolean isInitializable(Thing thing, @Nullable ThingType thingType)", "class_method_signature": "ThingManagerImpl.isInitializable(Thing thing, @Nullable ThingType thingType)", "testcase": false, "constructor": false}, {"identifier": "isComplete", "parameters": "(@Nullable T prototype, UID targetUID,\n            Function<T, @Nullable URI> configDescriptionURIFunction, Configuration configuration)", "modifiers": "private", "return": "boolean", "signature": "boolean isComplete(@Nullable T prototype, UID targetUID,\n            Function<T, @Nullable URI> configDescriptionURIFunction, Configuration configuration)", "full_signature": "private boolean isComplete(@Nullable T prototype, UID targetUID,\n            Function<T, @Nullable URI> configDescriptionURIFunction, Configuration configuration)", "class_method_signature": "ThingManagerImpl.isComplete(@Nullable T prototype, UID targetUID,\n            Function<T, @Nullable URI> configDescriptionURIFunction, Configuration configuration)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(@Nullable URI configDescriptionURI, @Nullable Locale locale)", "modifiers": "private @Nullable", "return": "ConfigDescription", "signature": "ConfigDescription resolve(@Nullable URI configDescriptionURI, @Nullable Locale locale)", "full_signature": "private @Nullable ConfigDescription resolve(@Nullable URI configDescriptionURI, @Nullable Locale locale)", "class_method_signature": "ThingManagerImpl.resolve(@Nullable URI configDescriptionURI, @Nullable Locale locale)", "testcase": false, "constructor": false}, {"identifier": "getRequiredParameters", "parameters": "(ConfigDescription description)", "modifiers": "private", "return": "List<String>", "signature": "List<String> getRequiredParameters(ConfigDescription description)", "full_signature": "private List<String> getRequiredParameters(ConfigDescription description)", "class_method_signature": "ThingManagerImpl.getRequiredParameters(ConfigDescription description)", "testcase": false, "constructor": false}, {"identifier": "doInitializeHandler", "parameters": "(final ThingHandler thingHandler)", "modifiers": "private", "return": "void", "signature": "void doInitializeHandler(final ThingHandler thingHandler)", "full_signature": "private void doInitializeHandler(final ThingHandler thingHandler)", "class_method_signature": "ThingManagerImpl.doInitializeHandler(final ThingHandler thingHandler)", "testcase": false, "constructor": false}, {"identifier": "isInitializing", "parameters": "(Thing thing)", "modifiers": "private", "return": "boolean", "signature": "boolean isInitializing(Thing thing)", "full_signature": "private boolean isInitializing(Thing thing)", "class_method_signature": "ThingManagerImpl.isInitializing(Thing thing)", "testcase": false, "constructor": false}, {"identifier": "isHandlerRegistered", "parameters": "(Thing thing)", "modifiers": "private", "return": "boolean", "signature": "boolean isHandlerRegistered(Thing thing)", "full_signature": "private boolean isHandlerRegistered(Thing thing)", "class_method_signature": "ThingManagerImpl.isHandlerRegistered(Thing thing)", "testcase": false, "constructor": false}, {"identifier": "isBridge", "parameters": "(Thing thing)", "modifiers": "private", "return": "boolean", "signature": "boolean isBridge(Thing thing)", "full_signature": "private boolean isBridge(Thing thing)", "class_method_signature": "ThingManagerImpl.isBridge(Thing thing)", "testcase": false, "constructor": false}, {"identifier": "hasBridge", "parameters": "(final Thing thing)", "modifiers": "private", "return": "boolean", "signature": "boolean hasBridge(final Thing thing)", "full_signature": "private boolean hasBridge(final Thing thing)", "class_method_signature": "ThingManagerImpl.hasBridge(final Thing thing)", "testcase": false, "constructor": false}, {"identifier": "getBridge", "parameters": "(@Nullable ThingUID bridgeUID)", "modifiers": "private @Nullable", "return": "Bridge", "signature": "Bridge getBridge(@Nullable ThingUID bridgeUID)", "full_signature": "private @Nullable Bridge getBridge(@Nullable ThingUID bridgeUID)", "class_method_signature": "ThingManagerImpl.getBridge(@Nullable ThingUID bridgeUID)", "testcase": false, "constructor": false}, {"identifier": "unregisterHandler", "parameters": "(Thing thing, ThingHandlerFactory thingHandlerFactory)", "modifiers": "private", "return": "void", "signature": "void unregisterHandler(Thing thing, ThingHandlerFactory thingHandlerFactory)", "full_signature": "private void unregisterHandler(Thing thing, ThingHandlerFactory thingHandlerFactory)", "class_method_signature": "ThingManagerImpl.unregisterHandler(Thing thing, ThingHandlerFactory thingHandlerFactory)", "testcase": false, "constructor": false}, {"identifier": "doUnregisterHandler", "parameters": "(final Thing thing, final ThingHandlerFactory thingHandlerFactory)", "modifiers": "private", "return": "void", "signature": "void doUnregisterHandler(final Thing thing, final ThingHandlerFactory thingHandlerFactory)", "full_signature": "private void doUnregisterHandler(final Thing thing, final ThingHandlerFactory thingHandlerFactory)", "class_method_signature": "ThingManagerImpl.doUnregisterHandler(final Thing thing, final ThingHandlerFactory thingHandlerFactory)", "testcase": false, "constructor": false}, {"identifier": "disposeHandler", "parameters": "(Thing thing, ThingHandler thingHandler)", "modifiers": "private", "return": "void", "signature": "void disposeHandler(Thing thing, ThingHandler thingHandler)", "full_signature": "private void disposeHandler(Thing thing, ThingHandler thingHandler)", "class_method_signature": "ThingManagerImpl.disposeHandler(Thing thing, ThingHandler thingHandler)", "testcase": false, "constructor": false}, {"identifier": "doDisposeHandler", "parameters": "(final ThingHandler thingHandler)", "modifiers": "private", "return": "void", "signature": "void doDisposeHandler(final ThingHandler thingHandler)", "full_signature": "private void doDisposeHandler(final ThingHandler thingHandler)", "class_method_signature": "ThingManagerImpl.doDisposeHandler(final ThingHandler thingHandler)", "testcase": false, "constructor": false}, {"identifier": "unregisterAndDisposeChildHandlers", "parameters": "(Bridge bridge, ThingHandlerFactory thingHandlerFactory)", "modifiers": "private", "return": "void", "signature": "void unregisterAndDisposeChildHandlers(Bridge bridge, ThingHandlerFactory thingHandlerFactory)", "full_signature": "private void unregisterAndDisposeChildHandlers(Bridge bridge, ThingHandlerFactory thingHandlerFactory)", "class_method_signature": "ThingManagerImpl.unregisterAndDisposeChildHandlers(Bridge bridge, ThingHandlerFactory thingHandlerFactory)", "testcase": false, "constructor": false}, {"identifier": "unregisterAndDisposeHandler", "parameters": "(ThingHandlerFactory thingHandlerFactory, Thing thing,\n            ThingHandler handler)", "modifiers": "private", "return": "void", "signature": "void unregisterAndDisposeHandler(ThingHandlerFactory thingHandlerFactory, Thing thing,\n            ThingHandler handler)", "full_signature": "private void unregisterAndDisposeHandler(ThingHandlerFactory thingHandlerFactory, Thing thing,\n            ThingHandler handler)", "class_method_signature": "ThingManagerImpl.unregisterAndDisposeHandler(ThingHandlerFactory thingHandlerFactory, Thing thing,\n            ThingHandler handler)", "testcase": false, "constructor": false}, {"identifier": "addThingsToBridge", "parameters": "(Bridge bridge)", "modifiers": "private", "return": "void", "signature": "void addThingsToBridge(Bridge bridge)", "full_signature": "private void addThingsToBridge(Bridge bridge)", "class_method_signature": "ThingManagerImpl.addThingsToBridge(Bridge bridge)", "testcase": false, "constructor": false}, {"identifier": "notifyThingsAboutBridgeStatusChange", "parameters": "(final Bridge bridge, final ThingStatusInfo bridgeStatus)", "modifiers": "private", "return": "void", "signature": "void notifyThingsAboutBridgeStatusChange(final Bridge bridge, final ThingStatusInfo bridgeStatus)", "full_signature": "private void notifyThingsAboutBridgeStatusChange(final Bridge bridge, final ThingStatusInfo bridgeStatus)", "class_method_signature": "ThingManagerImpl.notifyThingsAboutBridgeStatusChange(final Bridge bridge, final ThingStatusInfo bridgeStatus)", "testcase": false, "constructor": false}, {"identifier": "notifyBridgeAboutChildHandlerInitialization", "parameters": "(final Thing thing)", "modifiers": "private", "return": "void", "signature": "void notifyBridgeAboutChildHandlerInitialization(final Thing thing)", "full_signature": "private void notifyBridgeAboutChildHandlerInitialization(final Thing thing)", "class_method_signature": "ThingManagerImpl.notifyBridgeAboutChildHandlerInitialization(final Thing thing)", "testcase": false, "constructor": false}, {"identifier": "notifyBridgeAboutChildHandlerDisposal", "parameters": "(final Thing thing, final ThingHandler thingHandler)", "modifiers": "private", "return": "void", "signature": "void notifyBridgeAboutChildHandlerDisposal(final Thing thing, final ThingHandler thingHandler)", "full_signature": "private void notifyBridgeAboutChildHandlerDisposal(final Thing thing, final ThingHandler thingHandler)", "class_method_signature": "ThingManagerImpl.notifyBridgeAboutChildHandlerDisposal(final Thing thing, final ThingHandler thingHandler)", "testcase": false, "constructor": false}, {"identifier": "notifyThingHandlerAboutRemoval", "parameters": "(final Thing thing)", "modifiers": "private", "return": "void", "signature": "void notifyThingHandlerAboutRemoval(final Thing thing)", "full_signature": "private void notifyThingHandlerAboutRemoval(final Thing thing)", "class_method_signature": "ThingManagerImpl.notifyThingHandlerAboutRemoval(final Thing thing)", "testcase": false, "constructor": false}, {"identifier": "notifyRegistryAboutForceRemove", "parameters": "(final Thing thing)", "modifiers": "private", "return": "void", "signature": "void notifyRegistryAboutForceRemove(final Thing thing)", "full_signature": "private void notifyRegistryAboutForceRemove(final Thing thing)", "class_method_signature": "ThingManagerImpl.notifyRegistryAboutForceRemove(final Thing thing)", "testcase": false, "constructor": false}, {"identifier": "addThingHandlerFactory", "parameters": "(ThingHandlerFactory thingHandlerFactory)", "modifiers": "@Reference(cardinality = ReferenceCardinality.MULTIPLE, policy = ReferencePolicy.DYNAMIC) protected synchronized", "return": "void", "signature": "void addThingHandlerFactory(ThingHandlerFactory thingHandlerFactory)", "full_signature": "@Reference(cardinality = ReferenceCardinality.MULTIPLE, policy = ReferencePolicy.DYNAMIC) protected synchronized void addThingHandlerFactory(ThingHandlerFactory thingHandlerFactory)", "class_method_signature": "ThingManagerImpl.addThingHandlerFactory(ThingHandlerFactory thingHandlerFactory)", "testcase": false, "constructor": false}, {"identifier": "onReadyMarkerAdded", "parameters": "(ReadyMarker readyMarker)", "modifiers": "@Override public", "return": "void", "signature": "void onReadyMarkerAdded(ReadyMarker readyMarker)", "full_signature": "@Override public void onReadyMarkerAdded(ReadyMarker readyMarker)", "class_method_signature": "ThingManagerImpl.onReadyMarkerAdded(ReadyMarker readyMarker)", "testcase": false, "constructor": false}, {"identifier": "onReadyMarkerRemoved", "parameters": "(ReadyMarker readyMarker)", "modifiers": "@Override public", "return": "void", "signature": "void onReadyMarkerRemoved(ReadyMarker readyMarker)", "full_signature": "@Override public void onReadyMarkerRemoved(ReadyMarker readyMarker)", "class_method_signature": "ThingManagerImpl.onReadyMarkerRemoved(ReadyMarker readyMarker)", "testcase": false, "constructor": false}, {"identifier": "handleThingHandlerFactoryAddition", "parameters": "(String bundleIdentifier)", "modifiers": "private", "return": "void", "signature": "void handleThingHandlerFactoryAddition(String bundleIdentifier)", "full_signature": "private void handleThingHandlerFactoryAddition(String bundleIdentifier)", "class_method_signature": "ThingManagerImpl.handleThingHandlerFactoryAddition(String bundleIdentifier)", "testcase": false, "constructor": false}, {"identifier": "getBundleIdentifier", "parameters": "(ThingHandlerFactory thingHandlerFactory)", "modifiers": "private", "return": "String", "signature": "String getBundleIdentifier(ThingHandlerFactory thingHandlerFactory)", "full_signature": "private String getBundleIdentifier(ThingHandlerFactory thingHandlerFactory)", "class_method_signature": "ThingManagerImpl.getBundleIdentifier(ThingHandlerFactory thingHandlerFactory)", "testcase": false, "constructor": false}, {"identifier": "registerAndInitializeHandler", "parameters": "(final Thing thing,\n            final @Nullable ThingHandlerFactory thingHandlerFactory)", "modifiers": "private", "return": "void", "signature": "void registerAndInitializeHandler(final Thing thing,\n            final @Nullable ThingHandlerFactory thingHandlerFactory)", "full_signature": "private void registerAndInitializeHandler(final Thing thing,\n            final @Nullable ThingHandlerFactory thingHandlerFactory)", "class_method_signature": "ThingManagerImpl.registerAndInitializeHandler(final Thing thing,\n            final @Nullable ThingHandlerFactory thingHandlerFactory)", "testcase": false, "constructor": false}, {"identifier": "getThingHandlerFactory", "parameters": "(Thing thing)", "modifiers": "private @Nullable", "return": "ThingHandlerFactory", "signature": "ThingHandlerFactory getThingHandlerFactory(Thing thing)", "full_signature": "private @Nullable ThingHandlerFactory getThingHandlerFactory(Thing thing)", "class_method_signature": "ThingManagerImpl.getThingHandlerFactory(Thing thing)", "testcase": false, "constructor": false}, {"identifier": "removeThingHandlerFactory", "parameters": "(ThingHandlerFactory thingHandlerFactory)", "modifiers": "protected synchronized", "return": "void", "signature": "void removeThingHandlerFactory(ThingHandlerFactory thingHandlerFactory)", "full_signature": "protected synchronized void removeThingHandlerFactory(ThingHandlerFactory thingHandlerFactory)", "class_method_signature": "ThingManagerImpl.removeThingHandlerFactory(ThingHandlerFactory thingHandlerFactory)", "testcase": false, "constructor": false}, {"identifier": "handleThingHandlerFactoryRemoval", "parameters": "(ThingHandlerFactory thingHandlerFactory)", "modifiers": "private", "return": "void", "signature": "void handleThingHandlerFactoryRemoval(ThingHandlerFactory thingHandlerFactory)", "full_signature": "private void handleThingHandlerFactoryRemoval(ThingHandlerFactory thingHandlerFactory)", "class_method_signature": "ThingManagerImpl.handleThingHandlerFactoryRemoval(ThingHandlerFactory thingHandlerFactory)", "testcase": false, "constructor": false}, {"identifier": "getLockForThing", "parameters": "(ThingUID thingUID)", "modifiers": "private synchronized", "return": "Lock", "signature": "Lock getLockForThing(ThingUID thingUID)", "full_signature": "private synchronized Lock getLockForThing(ThingUID thingUID)", "class_method_signature": "ThingManagerImpl.getLockForThing(ThingUID thingUID)", "testcase": false, "constructor": false}, {"identifier": "buildStatusInfo", "parameters": "(ThingStatus thingStatus, ThingStatusDetail thingStatusDetail,\n            @Nullable String description)", "modifiers": "private", "return": "ThingStatusInfo", "signature": "ThingStatusInfo buildStatusInfo(ThingStatus thingStatus, ThingStatusDetail thingStatusDetail,\n            @Nullable String description)", "full_signature": "private ThingStatusInfo buildStatusInfo(ThingStatus thingStatus, ThingStatusDetail thingStatusDetail,\n            @Nullable String description)", "class_method_signature": "ThingManagerImpl.buildStatusInfo(ThingStatus thingStatus, ThingStatusDetail thingStatusDetail,\n            @Nullable String description)", "testcase": false, "constructor": false}, {"identifier": "buildStatusInfo", "parameters": "(ThingStatus thingStatus, ThingStatusDetail thingStatusDetail)", "modifiers": "private", "return": "ThingStatusInfo", "signature": "ThingStatusInfo buildStatusInfo(ThingStatus thingStatus, ThingStatusDetail thingStatusDetail)", "full_signature": "private ThingStatusInfo buildStatusInfo(ThingStatus thingStatus, ThingStatusDetail thingStatusDetail)", "class_method_signature": "ThingManagerImpl.buildStatusInfo(ThingStatus thingStatus, ThingStatusDetail thingStatusDetail)", "testcase": false, "constructor": false}, {"identifier": "setThingStatus", "parameters": "(Thing thing, ThingStatusInfo thingStatusInfo)", "modifiers": "private", "return": "void", "signature": "void setThingStatus(Thing thing, ThingStatusInfo thingStatusInfo)", "full_signature": "private void setThingStatus(Thing thing, ThingStatusInfo thingStatusInfo)", "class_method_signature": "ThingManagerImpl.setThingStatus(Thing thing, ThingStatusInfo thingStatusInfo)", "testcase": false, "constructor": false}, {"identifier": "setEnabled", "parameters": "(ThingUID thingUID, boolean enabled)", "modifiers": "@Override public", "return": "void", "signature": "void setEnabled(ThingUID thingUID, boolean enabled)", "full_signature": "@Override public void setEnabled(ThingUID thingUID, boolean enabled)", "class_method_signature": "ThingManagerImpl.setEnabled(ThingUID thingUID, boolean enabled)", "testcase": false, "constructor": false}, {"identifier": "updateChildThingStatusForDisabledBridges", "parameters": "(Bridge bridge)", "modifiers": "private", "return": "void", "signature": "void updateChildThingStatusForDisabledBridges(Bridge bridge)", "full_signature": "private void updateChildThingStatusForDisabledBridges(Bridge bridge)", "class_method_signature": "ThingManagerImpl.updateChildThingStatusForDisabledBridges(Bridge bridge)", "testcase": false, "constructor": false}, {"identifier": "persistThingEnableStatus", "parameters": "(ThingUID thingUID, boolean enabled)", "modifiers": "private", "return": "void", "signature": "void persistThingEnableStatus(ThingUID thingUID, boolean enabled)", "full_signature": "private void persistThingEnableStatus(ThingUID thingUID, boolean enabled)", "class_method_signature": "ThingManagerImpl.persistThingEnableStatus(ThingUID thingUID, boolean enabled)", "testcase": false, "constructor": false}, {"identifier": "isEnabled", "parameters": "(ThingUID thingUID)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEnabled(ThingUID thingUID)", "full_signature": "@Override public boolean isEnabled(ThingUID thingUID)", "class_method_signature": "ThingManagerImpl.isEnabled(ThingUID thingUID)", "testcase": false, "constructor": false}, {"identifier": "isDisabledByStorage", "parameters": "(ThingUID thingUID)", "modifiers": "private", "return": "boolean", "signature": "boolean isDisabledByStorage(ThingUID thingUID)", "full_signature": "private boolean isDisabledByStorage(ThingUID thingUID)", "class_method_signature": "ThingManagerImpl.isDisabledByStorage(ThingUID thingUID)", "testcase": false, "constructor": false}, {"identifier": "setBundleResolver", "parameters": "(BundleResolver bundleResolver)", "modifiers": "", "return": "void", "signature": "void setBundleResolver(BundleResolver bundleResolver)", "full_signature": " void setBundleResolver(BundleResolver bundleResolver)", "class_method_signature": "ThingManagerImpl.setBundleResolver(BundleResolver bundleResolver)", "testcase": false, "constructor": false}], "file": "bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/internal/ThingManagerImpl.java"}, "focal_method": {"identifier": "setEnabled", "parameters": "(ThingUID thingUID, boolean enabled)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void setEnabled(ThingUID thingUID, boolean enabled) {\n        Thing thing = getThing(thingUID);\n\n        persistThingEnableStatus(thingUID, enabled);\n\n        if (thing == null) {\n            logger.debug(\"Thing with the UID {} is unknown, cannot set its enabled status.\", thingUID);\n            return;\n        }\n\n        if (enabled) {\n            // Enable a thing\n            if (thing.isEnabled()) {\n                logger.debug(\"Thing {} is already enabled.\", thingUID);\n                return;\n            }\n\n            logger.debug(\"Thing {} will be enabled.\", thingUID);\n\n            if (isHandlerRegistered(thing)) {\n                // A handler is already registered for that thing. Try to initialize it.\n                initializeHandler(thing);\n            } else {\n                // No handler registered. Try to register handler and initialize the thing.\n                registerAndInitializeHandler(thing, findThingHandlerFactory(thing.getThingTypeUID()));\n                // Check if registration was successful\n                if (!hasBridge(thing) && !isHandlerRegistered(thing)) {\n                    setThingStatus(thing,\n                            buildStatusInfo(ThingStatus.UNINITIALIZED, ThingStatusDetail.HANDLER_MISSING_ERROR));\n                }\n            }\n        } else {\n            if (!thing.isEnabled()) {\n                logger.debug(\"Thing {} is already disabled.\", thingUID);\n                return;\n            }\n\n            logger.debug(\"Thing {} will be disabled.\", thingUID);\n\n            boolean disposed = false;\n\n            if (isHandlerRegistered(thing)) {\n                // Dispose handler if registered.\n                ThingHandler thingHandler = thing.getHandler();\n                ThingHandlerFactory thingHandlerFactory = findThingHandlerFactory(thing.getThingTypeUID());\n                if (thingHandler != null && thingHandlerFactory != null) {\n                    unregisterAndDisposeHandler(thingHandlerFactory, thing, thingHandler);\n                    disposed = true;\n                }\n            }\n\n            if (!disposed) {\n                // Only set the correct status to the thing. There is no handler to be disposed\n                setThingStatus(thing, buildStatusInfo(ThingStatus.UNINITIALIZED, ThingStatusDetail.DISABLED));\n            }\n\n            if (isBridge(thing)) {\n                updateChildThingStatusForDisabledBridges((Bridge) thing);\n            }\n        }\n    }", "signature": "void setEnabled(ThingUID thingUID, boolean enabled)", "full_signature": "@Override public void setEnabled(ThingUID thingUID, boolean enabled)", "class_method_signature": "ThingManagerImpl.setEnabled(ThingUID thingUID, boolean enabled)", "testcase": false, "constructor": false, "invocations": ["getThing", "persistThingEnableStatus", "debug", "isEnabled", "debug", "debug", "isHandlerRegistered", "initializeHandler", "registerAndInitializeHandler", "findThingHandlerFactory", "getThingTypeUID", "hasBridge", "isHandlerRegistered", "setThingStatus", "buildStatusInfo", "isEnabled", "debug", "debug", "isHandlerRegistered", "getHandler", "findThingHandlerFactory", "getThingTypeUID", "unregisterAndDisposeHandler", "setThingStatus", "buildStatusInfo", "isBridge", "updateChildThingStatusForDisabledBridges"]}, "repository": {"repo_id": 48337670, "url": "https://github.com/openhab/openhab-core", "stars": 241, "created": "12/20/2015 9:23:20 PM +00:00", "updates": "2020-01-27T16:55:53+00:00", "fork": "False", "license": "licensed"}}