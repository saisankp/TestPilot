{"test_class": {"identifier": "RoundRobinConnectionStrategyTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/ldaptive/RoundRobinConnectionStrategyTest.java"}, "test_case": {"identifier": "hasNext", "parameters": "(final String actual, final LdapURL[] expected, final int count)", "modifiers": "@Test(groups = \"conn\", dataProvider = \"urls\") public", "return": "void", "body": "@Test(groups = \"conn\", dataProvider = \"urls\")\n  public void hasNext(final String actual, final LdapURL[] expected, final int count)\n  {\n    final RoundRobinConnectionStrategy strategy = new RoundRobinConnectionStrategy();\n    strategy.initialize(actual, ldapURL -> true);\n    final Iterator<LdapURL> iter = strategy.iterator();\n    for (int i = 0; i < count; i++) {\n      strategy.iterator();\n    }\n    int i = 0;\n    while (iter.hasNext()) {\n      iter.next();\n      i++;\n    }\n    Assert.assertEquals(i, expected.length);\n  }", "signature": "void hasNext(final String actual, final LdapURL[] expected, final int count)", "full_signature": "@Test(groups = \"conn\", dataProvider = \"urls\") public void hasNext(final String actual, final LdapURL[] expected, final int count)", "class_method_signature": "RoundRobinConnectionStrategyTest.hasNext(final String actual, final LdapURL[] expected, final int count)", "testcase": true, "constructor": false, "invocations": ["initialize", "iterator", "iterator", "hasNext", "next", "assertEquals"]}, "focal_class": {"identifier": "RoundRobinConnectionStrategy", "superclass": "extends AbstractConnectionStrategy", "interfaces": "", "fields": [{"original_string": "private final AtomicInteger counter = new AtomicInteger();", "modifier": "private final", "type": "AtomicInteger", "declarator": "counter = new AtomicInteger()", "var_name": "counter"}, {"original_string": "private final Function<List<LdapURL>, Iterator<LdapURL>> iterFunction;", "modifier": "private final", "type": "Function<List<LdapURL>, Iterator<LdapURL>>", "declarator": "iterFunction", "var_name": "iterFunction"}], "methods": [{"identifier": "RoundRobinConnectionStrategy", "parameters": "()", "modifiers": "public", "return": "", "signature": " RoundRobinConnectionStrategy()", "full_signature": "public  RoundRobinConnectionStrategy()", "class_method_signature": "RoundRobinConnectionStrategy.RoundRobinConnectionStrategy()", "testcase": false, "constructor": true}, {"identifier": "RoundRobinConnectionStrategy", "parameters": "(final Function<List<LdapURL>, Iterator<LdapURL>> function)", "modifiers": "public", "return": "", "signature": " RoundRobinConnectionStrategy(final Function<List<LdapURL>, Iterator<LdapURL>> function)", "full_signature": "public  RoundRobinConnectionStrategy(final Function<List<LdapURL>, Iterator<LdapURL>> function)", "class_method_signature": "RoundRobinConnectionStrategy.RoundRobinConnectionStrategy(final Function<List<LdapURL>, Iterator<LdapURL>> function)", "testcase": false, "constructor": true}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public synchronized", "return": "Iterator<LdapURL>", "signature": "Iterator<LdapURL> iterator()", "full_signature": "@Override public synchronized Iterator<LdapURL> iterator()", "class_method_signature": "RoundRobinConnectionStrategy.iterator()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/ldaptive/RoundRobinConnectionStrategy.java"}, "focal_method": {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public synchronized", "return": "Iterator<LdapURL>", "body": "@Override\n  public synchronized Iterator<LdapURL> iterator()\n  {\n    if (!isInitialized()) {\n      throw new IllegalStateException(\"Strategy is not initialized\");\n    }\n    final List<LdapURL> urls = new ArrayList<>(ldapURLSet.getActiveUrls());\n    if (urls.size() > 1) {\n      for (int i = 0; i < counter.get(); i++) {\n        urls.add(urls.remove(0));\n      }\n    }\n    urls.addAll(ldapURLSet.getInactiveUrls());\n    counter.incrementAndGet();\n    if (iterFunction != null) {\n      return iterFunction.apply(ldapURLSet.getUrls());\n    }\n    return new DefaultLdapURLIterator(urls);\n  }", "signature": "Iterator<LdapURL> iterator()", "full_signature": "@Override public synchronized Iterator<LdapURL> iterator()", "class_method_signature": "RoundRobinConnectionStrategy.iterator()", "testcase": false, "constructor": false, "invocations": ["isInitialized", "getActiveUrls", "size", "get", "add", "remove", "addAll", "getInactiveUrls", "incrementAndGet", "apply", "getUrls"]}, "repository": {"repo_id": 25927306, "url": "https://github.com/vt-middleware/ldaptive", "stars": 32, "created": "10/29/2014 3:27:31 PM +00:00", "updates": "2020-01-14T22:18:12+00:00", "fork": "False", "license": "licensed"}}