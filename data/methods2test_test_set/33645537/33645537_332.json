{"test_class": {"identifier": "FindSumsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private FindSums findSums;", "modifier": "private", "type": "FindSums", "declarator": "findSums", "var_name": "findSums"}], "file": "algs/src/test/java/com/github/pedrovgs/problem28/FindSumsTest.java"}, "test_case": {"identifier": "shouldNotAcceptNullArraysLinear", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class) public void shouldNotAcceptNullArraysLinear() {\n    findSums.findLinearComplexityOrder(null, 2);\n  }", "signature": "void shouldNotAcceptNullArraysLinear()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void shouldNotAcceptNullArraysLinear()", "class_method_signature": "FindSumsTest.shouldNotAcceptNullArraysLinear()", "testcase": true, "constructor": false, "invocations": ["findLinearComplexityOrder"]}, "focal_class": {"identifier": "FindSums", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "find", "parameters": "(int[] numbers, int value)", "modifiers": "public", "return": "List<Pair<Integer, Integer>>", "signature": "List<Pair<Integer, Integer>> find(int[] numbers, int value)", "full_signature": "public List<Pair<Integer, Integer>> find(int[] numbers, int value)", "class_method_signature": "FindSums.find(int[] numbers, int value)", "testcase": false, "constructor": false}, {"identifier": "findLinearComplexityOrder", "parameters": "(int[] numbers, int n)", "modifiers": "public", "return": "List<Pair<Integer, Integer>>", "signature": "List<Pair<Integer, Integer>> findLinearComplexityOrder(int[] numbers, int n)", "full_signature": "public List<Pair<Integer, Integer>> findLinearComplexityOrder(int[] numbers, int n)", "class_method_signature": "FindSums.findLinearComplexityOrder(int[] numbers, int n)", "testcase": false, "constructor": false}, {"identifier": "validateInput", "parameters": "(int[] numbers)", "modifiers": "private", "return": "void", "signature": "void validateInput(int[] numbers)", "full_signature": "private void validateInput(int[] numbers)", "class_method_signature": "FindSums.validateInput(int[] numbers)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem28/FindSums.java"}, "focal_method": {"identifier": "findLinearComplexityOrder", "parameters": "(int[] numbers, int n)", "modifiers": "public", "return": "List<Pair<Integer, Integer>>", "body": "public List<Pair<Integer, Integer>> findLinearComplexityOrder(int[] numbers, int n) {\n    validateInput(numbers);\n    List<Pair<Integer, Integer>> sums = new LinkedList<Pair<Integer, Integer>>();\n    Map<Integer, Integer> partialElements = new HashMap<Integer, Integer>();\n    for (int number : numbers) {\n      if (partialElements.containsKey(number)) {\n        sums.add(new Pair<Integer, Integer>(number, partialElements.get(number)));\n      } else {\n        partialElements.put(n - number, number);\n      }\n    }\n    return sums;\n  }", "signature": "List<Pair<Integer, Integer>> findLinearComplexityOrder(int[] numbers, int n)", "full_signature": "public List<Pair<Integer, Integer>> findLinearComplexityOrder(int[] numbers, int n)", "class_method_signature": "FindSums.findLinearComplexityOrder(int[] numbers, int n)", "testcase": false, "constructor": false, "invocations": ["validateInput", "containsKey", "add", "get", "put"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}