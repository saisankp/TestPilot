{"test_class": {"identifier": "VersionTitleProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String NOT_FOUND = \"unknown (no manifest file)\";", "modifier": "private static final", "type": "String", "declarator": "NOT_FOUND = \"unknown (no manifest file)\"", "var_name": "NOT_FOUND"}, {"original_string": "@Mock\n    private PackageProvider packageProvider;", "modifier": "@Mock\n    private", "type": "PackageProvider", "declarator": "packageProvider", "var_name": "packageProvider"}, {"original_string": "@InjectMocks\n    private VersionTitleProvider underTest;", "modifier": "@InjectMocks\n    private", "type": "VersionTitleProvider", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "@Mock\n    private Package packageOfUnderTest;", "modifier": "@Mock\n    private", "type": "Package", "declarator": "packageOfUnderTest", "var_name": "packageOfUnderTest"}], "file": "wilma-application/modules/wilma-common/src/test/java/com/epam/wilma/common/helper/VersionTitleProviderTest.java"}, "test_case": {"identifier": "testWhenManifestsNotFoundTextShouldBeReturned", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWhenManifestsNotFoundTextShouldBeReturned() {\n        //GIVEN\n        given(packageProvider.getPackageOfObject(underTest)).willReturn(packageOfUnderTest);\n        given(packageOfUnderTest.getImplementationTitle()).willReturn(null);\n        //WHEN\n        String result = underTest.getVersionTitle();\n        //THEN\n        assertEquals(NOT_FOUND, result);\n    }", "signature": "void testWhenManifestsNotFoundTextShouldBeReturned()", "full_signature": "@Test public void testWhenManifestsNotFoundTextShouldBeReturned()", "class_method_signature": "VersionTitleProviderTest.testWhenManifestsNotFoundTextShouldBeReturned()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "getPackageOfObject", "willReturn", "given", "getImplementationTitle", "getVersionTitle", "assertEquals"]}, "focal_class": {"identifier": "VersionTitleProvider", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String NOT_FOUND = \"unknown (no manifest file)\";", "modifier": "private static final", "type": "String", "declarator": "NOT_FOUND = \"unknown (no manifest file)\"", "var_name": "NOT_FOUND"}, {"original_string": "@Autowired\n    private PackageProvider packageProvider;", "modifier": "@Autowired\n    private", "type": "PackageProvider", "declarator": "packageProvider", "var_name": "packageProvider"}], "methods": [{"identifier": "getVersionTitle", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getVersionTitle()", "full_signature": "public String getVersionTitle()", "class_method_signature": "VersionTitleProvider.getVersionTitle()", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-common/src/main/java/com/epam/wilma/common/helper/VersionTitleProvider.java"}, "focal_method": {"identifier": "getVersionTitle", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String getVersionTitle() {\n        String versionTitle = packageProvider.getPackageOfObject(this).getImplementationTitle();\n        return versionTitle != null ? versionTitle : NOT_FOUND;\n    }", "signature": "String getVersionTitle()", "full_signature": "public String getVersionTitle()", "class_method_signature": "VersionTitleProvider.getVersionTitle()", "testcase": false, "constructor": false, "invocations": ["getImplementationTitle", "getPackageOfObject"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}