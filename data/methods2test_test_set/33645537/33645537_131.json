{"test_class": {"identifier": "BinaryTreePostOrderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BinaryTreePostOrder binaryTreePostOrder;", "modifier": "private", "type": "BinaryTreePostOrder", "declarator": "binaryTreePostOrder", "var_name": "binaryTreePostOrder"}], "file": "algs/src/test/java/com/github/pedrovgs/problem16/BinaryTreePostOrderTest.java"}, "test_case": {"identifier": "shouldReturnJustOneElementIfTheTreeContainsJustOneElementIterative", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void shouldReturnJustOneElementIfTheTreeContainsJustOneElementIterative() {\n    BinaryNode<Integer> root = new BinaryNode<Integer>(0);\n\n    List<BinaryNode> result = binaryTreePostOrder.getIterative(root);\n\n    List<BinaryNode<Integer>> expected = Arrays.asList(root);\n    assertEquals(expected, result);\n  }", "signature": "void shouldReturnJustOneElementIfTheTreeContainsJustOneElementIterative()", "full_signature": "@Test public void shouldReturnJustOneElementIfTheTreeContainsJustOneElementIterative()", "class_method_signature": "BinaryTreePostOrderTest.shouldReturnJustOneElementIfTheTreeContainsJustOneElementIterative()", "testcase": true, "constructor": false, "invocations": ["getIterative", "asList", "assertEquals"]}, "focal_class": {"identifier": "BinaryTreePostOrder", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getRecursive", "parameters": "(BinaryNode root)", "modifiers": "public", "return": "List<BinaryNode>", "signature": "List<BinaryNode> getRecursive(BinaryNode root)", "full_signature": "public List<BinaryNode> getRecursive(BinaryNode root)", "class_method_signature": "BinaryTreePostOrder.getRecursive(BinaryNode root)", "testcase": false, "constructor": false}, {"identifier": "getInner", "parameters": "(BinaryNode root)", "modifiers": "private", "return": "List<BinaryNode>", "signature": "List<BinaryNode> getInner(BinaryNode root)", "full_signature": "private List<BinaryNode> getInner(BinaryNode root)", "class_method_signature": "BinaryTreePostOrder.getInner(BinaryNode root)", "testcase": false, "constructor": false}, {"identifier": "getIterative", "parameters": "(BinaryNode root)", "modifiers": "public", "return": "List<BinaryNode>", "signature": "List<BinaryNode> getIterative(BinaryNode root)", "full_signature": "public List<BinaryNode> getIterative(BinaryNode root)", "class_method_signature": "BinaryTreePostOrder.getIterative(BinaryNode root)", "testcase": false, "constructor": false}, {"identifier": "validateTree", "parameters": "(BinaryNode root)", "modifiers": "private", "return": "void", "signature": "void validateTree(BinaryNode root)", "full_signature": "private void validateTree(BinaryNode root)", "class_method_signature": "BinaryTreePostOrder.validateTree(BinaryNode root)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem16/BinaryTreePostOrder.java"}, "focal_method": {"identifier": "getIterative", "parameters": "(BinaryNode root)", "modifiers": "public", "return": "List<BinaryNode>", "body": "public List<BinaryNode> getIterative(BinaryNode root) {\n    validateTree(root);\n    List<BinaryNode> result = new LinkedList<BinaryNode>();\n    Stack<BinaryNode> stack = new Stack<BinaryNode>();\n    stack.push(root);\n\n    BinaryNode prev = null;\n    while (!stack.empty()) {\n      BinaryNode current = stack.peek();\n\n      //Go down the tree. check if current node is leaf, if so, process it and pop stack, otherwise,\n      //keep going down\n      if (prev == null || prev.getLeft() == current || prev.getRight() == current) {\n        //prev == null is the situation for the root node\n        if (current.getLeft() != null) {\n          stack.push(current.getLeft());\n        } else if (current.getRight() != null) {\n          stack.push(current.getRight());\n        } else {\n          stack.pop();\n          result.add(current);\n        }\n\n        //Go up the tree from left node need to check if there is a right child\n        //if yes, push it to stack otherwise, process parent and pop stack\n      } else if (current.getLeft() == prev) {\n        if (current.getRight() != null) {\n          stack.push(current.getRight());\n        } else {\n          stack.pop();\n          result.add(current);\n        }\n\n        //Go up the tree from right node after coming back from right node, process parent node\n        //and pop stack.\n      } else if (current.getRight() == prev) {\n        stack.pop();\n        result.add(current);\n      }\n\n      prev = current;\n    }\n    return result;\n  }", "signature": "List<BinaryNode> getIterative(BinaryNode root)", "full_signature": "public List<BinaryNode> getIterative(BinaryNode root)", "class_method_signature": "BinaryTreePostOrder.getIterative(BinaryNode root)", "testcase": false, "constructor": false, "invocations": ["validateTree", "push", "empty", "peek", "getLeft", "getRight", "getLeft", "push", "getLeft", "getRight", "push", "getRight", "pop", "add", "getLeft", "getRight", "push", "getRight", "pop", "add", "getRight", "pop", "add"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}