{"test_class": {"identifier": "ToBeSignedJwtTest", "superclass": "", "interfaces": "", "fields": [], "file": "java_src/src/test/java/com/google/crypto/tink/jwt/ToBeSignedJwtTest.java"}, "test_case": {"identifier": "compact_success", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void compact_success() throws Exception {\n    // The encoded header -- the part before the first dot -- is copied from\n    // https://tools.ietf.org/html/rfc7797#section-4.1.\n    String expectedToken = \"eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJibGFoIn0\";\n    ToBeSignedJwt token = new ToBeSignedJwt.Builder().setJwtId(\"blah\").build();\n    String compact = token.compact(\"HS256\");\n\n    assertThat(compact).isEqualTo(expectedToken);\n  }", "signature": "void compact_success()", "full_signature": "@Test public void compact_success()", "class_method_signature": "ToBeSignedJwtTest.compact_success()", "testcase": true, "constructor": false, "invocations": ["build", "setJwtId", "compact", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "ToBeSignedJwt", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Charset UTF_8 = Charset.forName(\"UTF-8\");", "modifier": "private static final", "type": "Charset", "declarator": "UTF_8 = Charset.forName(\"UTF-8\")", "var_name": "UTF_8"}, {"original_string": "@SuppressWarnings(\"Immutable\") // We do not mutate the header.\n  private final JSONObject header;", "modifier": "@SuppressWarnings(\"Immutable\") // We do not mutate the header.\n  private final", "type": "JSONObject", "declarator": "header", "var_name": "header"}, {"original_string": "@SuppressWarnings(\"Immutable\") // We do not mutate the payload.\n  private final JSONObject payload;", "modifier": "@SuppressWarnings(\"Immutable\") // We do not mutate the payload.\n  private final", "type": "JSONObject", "declarator": "payload", "var_name": "payload"}], "methods": [{"identifier": "ToBeSignedJwt", "parameters": "(Builder builder)", "modifiers": "private", "return": "", "signature": " ToBeSignedJwt(Builder builder)", "full_signature": "private  ToBeSignedJwt(Builder builder)", "class_method_signature": "ToBeSignedJwt.ToBeSignedJwt(Builder builder)", "testcase": false, "constructor": true}, {"identifier": "getHeader", "parameters": "(String name)", "modifiers": "", "return": "String", "signature": "String getHeader(String name)", "full_signature": " String getHeader(String name)", "class_method_signature": "ToBeSignedJwt.getHeader(String name)", "testcase": false, "constructor": false}, {"identifier": "getHeader", "parameters": "()", "modifiers": "", "return": "JSONObject", "signature": "JSONObject getHeader()", "full_signature": " JSONObject getHeader()", "class_method_signature": "ToBeSignedJwt.getHeader()", "testcase": false, "constructor": false}, {"identifier": "getPayload", "parameters": "()", "modifiers": "", "return": "JSONObject", "signature": "JSONObject getPayload()", "full_signature": " JSONObject getPayload()", "class_method_signature": "ToBeSignedJwt.getPayload()", "testcase": false, "constructor": false}, {"identifier": "getClaim", "parameters": "(String name)", "modifiers": "", "return": "Object", "signature": "Object getClaim(String name)", "full_signature": " Object getClaim(String name)", "class_method_signature": "ToBeSignedJwt.getClaim(String name)", "testcase": false, "constructor": false}, {"identifier": "getAlgorithm", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getAlgorithm()", "full_signature": " String getAlgorithm()", "class_method_signature": "ToBeSignedJwt.getAlgorithm()", "testcase": false, "constructor": false}, {"identifier": "getAudiences", "parameters": "()", "modifiers": "", "return": "List<String>", "signature": "List<String> getAudiences()", "full_signature": " List<String> getAudiences()", "class_method_signature": "ToBeSignedJwt.getAudiences()", "testcase": false, "constructor": false}, {"identifier": "getInstant", "parameters": "(String name)", "modifiers": "private", "return": "Instant", "signature": "Instant getInstant(String name)", "full_signature": "private Instant getInstant(String name)", "class_method_signature": "ToBeSignedJwt.getInstant(String name)", "testcase": false, "constructor": false}, {"identifier": "getExpiration", "parameters": "()", "modifiers": "", "return": "Instant", "signature": "Instant getExpiration()", "full_signature": " Instant getExpiration()", "class_method_signature": "ToBeSignedJwt.getExpiration()", "testcase": false, "constructor": false}, {"identifier": "getNotBefore", "parameters": "()", "modifiers": "", "return": "Instant", "signature": "Instant getNotBefore()", "full_signature": " Instant getNotBefore()", "class_method_signature": "ToBeSignedJwt.getNotBefore()", "testcase": false, "constructor": false}, {"identifier": "getIssuedAt", "parameters": "()", "modifiers": "", "return": "Instant", "signature": "Instant getIssuedAt()", "full_signature": " Instant getIssuedAt()", "class_method_signature": "ToBeSignedJwt.getIssuedAt()", "testcase": false, "constructor": false}, {"identifier": "compact", "parameters": "(String alg)", "modifiers": "", "return": "String", "signature": "String compact(String alg)", "full_signature": " String compact(String alg)", "class_method_signature": "ToBeSignedJwt.compact(String alg)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/jwt/ToBeSignedJwt.java"}, "focal_method": {"identifier": "compact", "parameters": "(String alg)", "modifiers": "", "return": "String", "body": "String compact(String alg) {\n    JSONObject copy;\n\n    try {\n      copy = new JSONObject(this.header.toString());\n      copy.put(JwtNames.HEADER_ALGORITHM, alg);\n    } catch (JSONException ex) {\n      // Should never happen.\n      throw new IllegalStateException(ex);\n    }\n\n    String headerStr = Base64.urlSafeEncode(copy.toString().getBytes(UTF_8));\n    String payloadStr = Base64.urlSafeEncode(this.payload.toString().getBytes(UTF_8));\n    return headerStr + \".\" + payloadStr;\n  }", "signature": "String compact(String alg)", "full_signature": " String compact(String alg)", "class_method_signature": "ToBeSignedJwt.compact(String alg)", "testcase": false, "constructor": false, "invocations": ["toString", "put", "urlSafeEncode", "getBytes", "toString", "urlSafeEncode", "getBytes", "toString"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}