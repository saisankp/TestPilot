{"test_class": {"identifier": "TestUsernamePassword", "superclass": "", "interfaces": "", "fields": [], "file": "bonecp/src/test/java/com/jolbox/bonecp/TestUsernamePassword.java"}, "test_case": {"identifier": "testUsernamePassword", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testUsernamePassword(){\n\t\tUsernamePassword up = new UsernamePassword(\"foo\", \"bar\");\n\t\tassertEquals(\"foo\", up.getUsername());\n\t\tassertEquals(\"bar\", up.getPassword());\n\t\t\n\t\tUsernamePassword up2 = new UsernamePassword(\"foo\", \"bar\");\n\t\tUsernamePassword up3 = new UsernamePassword(\"foo\", \"bar2\");\n\t\tassertTrue(up.equals( up2 ) );\n\t\tassertFalse(up.equals( up3 ) );\n\t\t\n\t\t\n\t\tUsernamePassword up4 = new UsernamePassword(\"foo\", \"bar\");\n\t\tassertFalse(up4.equals(new String()));\n\t\t\n\t\tassertNotNull(up.hashCode());\n\t}", "signature": "void testUsernamePassword()", "full_signature": "@Test public void testUsernamePassword()", "class_method_signature": "TestUsernamePassword.testUsernamePassword()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getUsername", "assertEquals", "getPassword", "assertTrue", "equals", "assertFalse", "equals", "assertFalse", "equals", "assertNotNull", "hashCode"]}, "focal_class": {"identifier": "UsernamePassword", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String username;", "modifier": "private", "type": "String", "declarator": "username", "var_name": "username"}, {"original_string": "private String password;", "modifier": "private", "type": "String", "declarator": "password", "var_name": "password"}], "methods": [{"identifier": "UsernamePassword", "parameters": "(String username, String password)", "modifiers": "public", "return": "", "signature": " UsernamePassword(String username, String password)", "full_signature": "public  UsernamePassword(String username, String password)", "class_method_signature": "UsernamePassword.UsernamePassword(String username, String password)", "testcase": false, "constructor": true}, {"identifier": "getUsername", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUsername()", "full_signature": "public String getUsername()", "class_method_signature": "UsernamePassword.getUsername()", "testcase": false, "constructor": false}, {"identifier": "getPassword", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPassword()", "full_signature": "public String getPassword()", "class_method_signature": "UsernamePassword.getPassword()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "UsernamePassword.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "UsernamePassword.hashCode()", "testcase": false, "constructor": false}], "file": "bonecp/src/main/java/com/jolbox/bonecp/UsernamePassword.java"}, "focal_method": {"identifier": "UsernamePassword", "parameters": "(String username, String password)", "modifiers": "public", "return": "", "body": "public UsernamePassword(String username, String password) {\n\t\tthis.username = username;\n\t\tthis.password = password;\n\t}", "signature": " UsernamePassword(String username, String password)", "full_signature": "public  UsernamePassword(String username, String password)", "class_method_signature": "UsernamePassword.UsernamePassword(String username, String password)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 466142, "url": "https://github.com/wwadge/bonecp", "language": "Java", "is_fork": false, "fork_count": 161, "stargazer_count": 544, "size": 3833, "license": "licensed"}}