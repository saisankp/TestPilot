{"test_class": {"identifier": "TestComponentCommandOrder", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final Logger log =\n      LoggerFactory.getLogger(TestComponentCommandOrder.class);", "modifier": "protected static final", "type": "Logger", "declarator": "log =\n      LoggerFactory.getLogger(TestComponentCommandOrder.class)", "var_name": "log"}, {"original_string": "private final MockContainerId containerId = new MockContainerId(1);", "modifier": "private final", "type": "MockContainerId", "declarator": "containerId = new MockContainerId(1)", "var_name": "containerId"}, {"original_string": "private static ConfTreeOperations resources = new ConfTreeOperations(\n      new ConfTree());", "modifier": "private static", "type": "ConfTreeOperations", "declarator": "resources = new ConfTreeOperations(\n      new ConfTree())", "var_name": "resources"}], "file": "slider-core/src/test/java/org/apache/slider/providers/agent/TestComponentCommandOrder.java"}, "test_case": {"identifier": "testComponentCommandOrderPrefixes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testComponentCommandOrderPrefixes() throws Exception {\n    ConfTreeOperations resources = new ConfTreeOperations(new ConfTree());\n    resources.getOrAddComponent(\"a-A\").put(ROLE_PREFIX, \"a-\");\n    resources.getOrAddComponent(\"b-B1\").put(ROLE_PREFIX, \"b-\");\n    resources.getOrAddComponent(\"b-B2\").put(ROLE_PREFIX, \"b-\");\n    resources.getOrAddComponent(\"c-C\").put(ROLE_PREFIX, \"c-\");\n\n    CommandOrder co1 = new CommandOrder();\n    co1.setCommand(\"b-START\");\n    co1.setRequires(\"a-STARTED\");\n    CommandOrder co2 = new CommandOrder();\n    co2.setCommand(\"c-START\");\n    co2.setRequires(\"b-STARTED\");\n\n    ComponentCommandOrder cco = new ComponentCommandOrder(\n        Arrays.asList(co1, co2), resources);\n\n    ComponentInstanceState cisA = new ComponentInstanceState(\"a-A\", containerId, \"aid\");\n    ComponentInstanceState cisB1 = new ComponentInstanceState(\"b-B1\", containerId, \"aid\");\n    ComponentInstanceState cisB2 = new ComponentInstanceState(\"b-B2\", containerId, \"aid\");\n    ComponentInstanceState cisC = new ComponentInstanceState(\"c-C\", containerId, \"aid\");\n    cisA.setState(State.INSTALLED);\n    cisB1.setState(State.INSTALLED);\n    cisB2.setState(State.INSTALLED);\n    cisC.setState(State.INSTALLED);\n    List<ComponentInstanceState> states = Arrays.asList(cisA, cisB1, cisB2, cisC);\n    Assert.assertTrue(cco.canExecute(\"a-A\", Command.START, states));\n    Assert.assertFalse(cco.canExecute(\"b-B1\", Command.START, states));\n    Assert.assertFalse(cco.canExecute(\"b-B2\", Command.START, states));\n    Assert.assertFalse(cco.canExecute(\"c-C\", Command.START, states));\n    cisA.setState(State.STARTED);\n    Assert.assertTrue(cco.canExecute(\"b-B1\", Command.START, states));\n    Assert.assertTrue(cco.canExecute(\"b-B2\", Command.START, states));\n    Assert.assertFalse(cco.canExecute(\"c-C\", Command.START, states));\n    cisB1.setState(State.STARTED);\n    Assert.assertFalse(cco.canExecute(\"c-C\", Command.START, states));\n    cisB2.setState(State.STARTED);\n    Assert.assertTrue(cco.canExecute(\"c-C\", Command.START, states));\n  }", "signature": "void testComponentCommandOrderPrefixes()", "full_signature": "@Test public void testComponentCommandOrderPrefixes()", "class_method_signature": "TestComponentCommandOrder.testComponentCommandOrderPrefixes()", "testcase": true, "constructor": false, "invocations": ["put", "getOrAddComponent", "put", "getOrAddComponent", "put", "getOrAddComponent", "put", "getOrAddComponent", "setCommand", "setRequires", "setCommand", "setRequires", "asList", "setState", "setState", "setState", "setState", "asList", "assertTrue", "canExecute", "assertFalse", "canExecute", "assertFalse", "canExecute", "assertFalse", "canExecute", "setState", "assertTrue", "canExecute", "assertTrue", "canExecute", "assertFalse", "canExecute", "setState", "assertFalse", "canExecute", "setState", "assertTrue", "canExecute"]}, "focal_class": {"identifier": "ComponentCommandOrder", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Logger log =\n      LoggerFactory.getLogger(ComponentCommandOrder.class);", "modifier": "public static final", "type": "Logger", "declarator": "log =\n      LoggerFactory.getLogger(ComponentCommandOrder.class)", "var_name": "log"}, {"original_string": "private static char SPLIT_CHAR = '-';", "modifier": "private static", "type": "char", "declarator": "SPLIT_CHAR = '-'", "var_name": "SPLIT_CHAR"}, {"original_string": "Map<Command, Map<String, List<ComponentState>>> dependencies =\n      new HashMap<Command, Map<String, List<ComponentState>>>();", "modifier": "", "type": "Map<Command, Map<String, List<ComponentState>>>", "declarator": "dependencies =\n      new HashMap<Command, Map<String, List<ComponentState>>>()", "var_name": "dependencies"}, {"original_string": "Map<String, Collection<String>> prefixRoleMap = new HashMap<>();", "modifier": "", "type": "Map<String, Collection<String>>", "declarator": "prefixRoleMap = new HashMap<>()", "var_name": "prefixRoleMap"}, {"original_string": "Map<String, String> rolePrefixMap = new HashMap<>();", "modifier": "", "type": "Map<String, String>", "declarator": "rolePrefixMap = new HashMap<>()", "var_name": "rolePrefixMap"}], "methods": [{"identifier": "ComponentCommandOrder", "parameters": "()", "modifiers": "public", "return": "", "signature": " ComponentCommandOrder()", "full_signature": "public  ComponentCommandOrder()", "class_method_signature": "ComponentCommandOrder.ComponentCommandOrder()", "testcase": false, "constructor": true}, {"identifier": "ComponentCommandOrder", "parameters": "(List<CommandOrder> commandOrders,\n      ConfTreeOperations resources)", "modifiers": "public", "return": "", "signature": " ComponentCommandOrder(List<CommandOrder> commandOrders,\n      ConfTreeOperations resources)", "full_signature": "public  ComponentCommandOrder(List<CommandOrder> commandOrders,\n      ConfTreeOperations resources)", "class_method_signature": "ComponentCommandOrder.ComponentCommandOrder(List<CommandOrder> commandOrders,\n      ConfTreeOperations resources)", "testcase": false, "constructor": true}, {"identifier": "mergeCommandOrders", "parameters": "(List<CommandOrder> commandOrders,\n      ConfTreeOperations resources)", "modifiers": "", "return": "void", "signature": "void mergeCommandOrders(List<CommandOrder> commandOrders,\n      ConfTreeOperations resources)", "full_signature": " void mergeCommandOrders(List<CommandOrder> commandOrders,\n      ConfTreeOperations resources)", "class_method_signature": "ComponentCommandOrder.mergeCommandOrders(List<CommandOrder> commandOrders,\n      ConfTreeOperations resources)", "testcase": false, "constructor": false}, {"identifier": "parseRequiredStates", "parameters": "(String requires,\n      ConfTreeOperations resources)", "modifiers": "private", "return": "List<ComponentState>", "signature": "List<ComponentState> parseRequiredStates(String requires,\n      ConfTreeOperations resources)", "full_signature": "private List<ComponentState> parseRequiredStates(String requires,\n      ConfTreeOperations resources)", "class_method_signature": "ComponentCommandOrder.parseRequiredStates(String requires,\n      ConfTreeOperations resources)", "testcase": false, "constructor": false}, {"identifier": "getComponentCommand", "parameters": "(String compCmdStr,\n      ConfTreeOperations resources)", "modifiers": "private", "return": "ComponentCommand", "signature": "ComponentCommand getComponentCommand(String compCmdStr,\n      ConfTreeOperations resources)", "full_signature": "private ComponentCommand getComponentCommand(String compCmdStr,\n      ConfTreeOperations resources)", "class_method_signature": "ComponentCommandOrder.getComponentCommand(String compCmdStr,\n      ConfTreeOperations resources)", "testcase": false, "constructor": false}, {"identifier": "getComponentState", "parameters": "(String compStStr,\n      ConfTreeOperations resources)", "modifiers": "private", "return": "ComponentState", "signature": "ComponentState getComponentState(String compStStr,\n      ConfTreeOperations resources)", "full_signature": "private ComponentState getComponentState(String compStStr,\n      ConfTreeOperations resources)", "class_method_signature": "ComponentCommandOrder.getComponentState(String compStStr,\n      ConfTreeOperations resources)", "testcase": false, "constructor": false}, {"identifier": "canExecute", "parameters": "(String component, Command command, Collection<ComponentInstanceState> currentStates)", "modifiers": "public", "return": "boolean", "signature": "boolean canExecute(String component, Command command, Collection<ComponentInstanceState> currentStates)", "full_signature": "public boolean canExecute(String component, Command command, Collection<ComponentInstanceState> currentStates)", "class_method_signature": "ComponentCommandOrder.canExecute(String component, Command command, Collection<ComponentInstanceState> currentStates)", "testcase": false, "constructor": false}], "file": "slider-core/src/main/java/org/apache/slider/providers/agent/ComponentCommandOrder.java"}, "focal_method": {"identifier": "canExecute", "parameters": "(String component, Command command, Collection<ComponentInstanceState> currentStates)", "modifiers": "public", "return": "boolean", "body": "public boolean canExecute(String component, Command command, Collection<ComponentInstanceState> currentStates) {\n    if (!dependencies.containsKey(command)) {\n      return true;\n    }\n    List<ComponentState> required = new ArrayList<>();\n    if (dependencies.get(command).containsKey(component)) {\n      required.addAll(dependencies.get(command).get(component));\n    }\n    String prefix = rolePrefixMap.get(component);\n    if (prefix != null && dependencies.get(command).containsKey(prefix)) {\n      required.addAll(dependencies.get(command).get(prefix));\n    }\n\n    for (ComponentState stateToMatch : required) {\n      for (ComponentInstanceState currState : currentStates) {\n        log.debug(\"Checking schedule {} {} against dependency {} is {}\",\n            component, command, currState.getComponentName(), currState.getState());\n        if (currState.getComponentName().equals(stateToMatch.componentName) ||\n            (prefixRoleMap.containsKey(stateToMatch.componentName) &&\n                prefixRoleMap.get(stateToMatch.componentName).contains(currState.getComponentName()))) {\n          if (currState.getState() != stateToMatch.state) {\n            if (stateToMatch.state == State.STARTED) {\n              log.info(\"Cannot schedule {} {} as dependency {} is {}\",\n                  component, command, currState.getComponentName(), currState.getState());\n              return false;\n            } else {\n              //state is INSTALLED\n              if (currState.getState() != State.STARTING && currState.getState() != State.STARTED) {\n                log.info(\"Cannot schedule {} {} as dependency {} is {}\",\n                    component, command, currState.getComponentName(), currState.getState());\n                return false;\n              }\n            }\n          }\n        }\n      }\n    }\n    return true;\n  }", "signature": "boolean canExecute(String component, Command command, Collection<ComponentInstanceState> currentStates)", "full_signature": "public boolean canExecute(String component, Command command, Collection<ComponentInstanceState> currentStates)", "class_method_signature": "ComponentCommandOrder.canExecute(String component, Command command, Collection<ComponentInstanceState> currentStates)", "testcase": false, "constructor": false, "invocations": ["containsKey", "containsKey", "get", "addAll", "get", "get", "get", "containsKey", "get", "addAll", "get", "get", "debug", "getComponentName", "getState", "equals", "getComponentName", "containsKey", "contains", "get", "getComponentName", "getState", "info", "getComponentName", "getState", "getState", "getState", "info", "getComponentName", "getState"]}, "repository": {"repo_id": 20051204, "url": "https://github.com/apache/incubator-retired-slider", "language": "Java", "is_fork": false, "fork_count": 73, "stargazer_count": 74, "size": 16472, "license": "licensed"}}