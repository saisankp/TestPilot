{"test_class": {"identifier": "RingBufferTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final Random RANDOM = new Random();", "modifier": "protected static final", "type": "Random", "declarator": "RANDOM = new Random()", "var_name": "RANDOM"}, {"original_string": "protected volatile boolean print = false;", "modifier": "protected volatile", "type": "boolean", "declarator": "print = false", "var_name": "print"}, {"original_string": "protected volatile boolean slightPausesInConsumers = false;", "modifier": "protected volatile", "type": "boolean", "declarator": "slightPausesInConsumers = false", "var_name": "slightPausesInConsumers"}], "file": "modeshape-common/src/test/java/org/modeshape/common/collection/ring/RingBufferTest.java"}, "test_case": {"identifier": "shouldAutomaticallySetTheBufferSizeToTheNextPowerOf2", "parameters": "()", "modifiers": "@Test @FixFor( \"MODE-2195\" ) public", "return": "void", "body": "@Test\n    @FixFor( \"MODE-2195\" )\n    public void shouldAutomaticallySetTheBufferSizeToTheNextPowerOf2() throws Exception {\n        Executor executor = Executors.newCachedThreadPool();\n        RingBuffer<Long, Consumer<Long>> ringBuffer = RingBufferBuilder.withSingleProducer(executor, Long.class).ofSize(5)\n                                                                       .garbageCollect(false).build();    \n        assertEquals(8, ringBuffer.getBufferSize());\n\n        ringBuffer = RingBufferBuilder.withSingleProducer(executor, Long.class).ofSize(1023).garbageCollect(false).build();\n        assertEquals(1024, ringBuffer.getBufferSize());\n    }", "signature": "void shouldAutomaticallySetTheBufferSizeToTheNextPowerOf2()", "full_signature": "@Test @FixFor( \"MODE-2195\" ) public void shouldAutomaticallySetTheBufferSizeToTheNextPowerOf2()", "class_method_signature": "RingBufferTest.shouldAutomaticallySetTheBufferSizeToTheNextPowerOf2()", "testcase": true, "constructor": false, "invocations": ["newCachedThreadPool", "build", "garbageCollect", "ofSize", "withSingleProducer", "assertEquals", "getBufferSize", "build", "garbageCollect", "ofSize", "withSingleProducer", "assertEquals", "getBufferSize"]}, "focal_class": {"identifier": "RingBuffer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final int bufferSize;", "modifier": "private final", "type": "int", "declarator": "bufferSize", "var_name": "bufferSize"}, {"original_string": "private final int mask;", "modifier": "private final", "type": "int", "declarator": "mask", "var_name": "mask"}, {"original_string": "protected final Cursor cursor;", "modifier": "protected final", "type": "Cursor", "declarator": "cursor", "var_name": "cursor"}, {"original_string": "private final Object[] buffer;", "modifier": "private final", "type": "Object[]", "declarator": "buffer", "var_name": "buffer"}, {"original_string": "private final Executor executor;", "modifier": "private final", "type": "Executor", "declarator": "executor", "var_name": "executor"}, {"original_string": "protected final AtomicBoolean addEntries = new AtomicBoolean(true);", "modifier": "protected final", "type": "AtomicBoolean", "declarator": "addEntries = new AtomicBoolean(true)", "var_name": "addEntries"}, {"original_string": "protected final ConsumerAdapter<T, C> consumerAdapter;", "modifier": "protected final", "type": "ConsumerAdapter<T, C>", "declarator": "consumerAdapter", "var_name": "consumerAdapter"}, {"original_string": "private final Set<ConsumerRunner> consumers = new CopyOnWriteArraySet<>();", "modifier": "private final", "type": "Set<ConsumerRunner>", "declarator": "consumers = new CopyOnWriteArraySet<>()", "var_name": "consumers"}, {"original_string": "private final GarbageCollectingConsumer gcConsumer;", "modifier": "private final", "type": "GarbageCollectingConsumer", "declarator": "gcConsumer", "var_name": "gcConsumer"}, {"original_string": "private final Lock producerLock;", "modifier": "private final", "type": "Lock", "declarator": "producerLock", "var_name": "producerLock"}, {"original_string": "protected final Logger logger = Logger.getLogger(getClass());", "modifier": "protected final", "type": "Logger", "declarator": "logger = Logger.getLogger(getClass())", "var_name": "logger"}], "methods": [{"identifier": "RingBuffer", "parameters": "( String name,\n                Cursor cursor,\n                Executor executor,\n                ConsumerAdapter<T, C> consumerAdapter,\n                boolean gcEntries,\n                boolean singleProducer )", "modifiers": "", "return": "", "signature": " RingBuffer( String name,\n                Cursor cursor,\n                Executor executor,\n                ConsumerAdapter<T, C> consumerAdapter,\n                boolean gcEntries,\n                boolean singleProducer )", "full_signature": "  RingBuffer( String name,\n                Cursor cursor,\n                Executor executor,\n                ConsumerAdapter<T, C> consumerAdapter,\n                boolean gcEntries,\n                boolean singleProducer )", "class_method_signature": "RingBuffer.RingBuffer( String name,\n                Cursor cursor,\n                Executor executor,\n                ConsumerAdapter<T, C> consumerAdapter,\n                boolean gcEntries,\n                boolean singleProducer )", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "( T entry )", "modifiers": "public", "return": "boolean", "signature": "boolean add( T entry )", "full_signature": "public boolean add( T entry )", "class_method_signature": "RingBuffer.add( T entry )", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "( T[] entries )", "modifiers": "public", "return": "boolean", "signature": "boolean add( T[] entries )", "full_signature": "public boolean add( T[] entries )", "class_method_signature": "RingBuffer.add( T[] entries )", "testcase": false, "constructor": false}, {"identifier": "getEntry", "parameters": "( long position )", "modifiers": "@SuppressWarnings( \"unchecked\" ) protected", "return": "T", "signature": "T getEntry( long position )", "full_signature": "@SuppressWarnings( \"unchecked\" ) protected T getEntry( long position )", "class_method_signature": "RingBuffer.getEntry( long position )", "testcase": false, "constructor": false}, {"identifier": "clearEntry", "parameters": "( long position )", "modifiers": "protected", "return": "void", "signature": "void clearEntry( long position )", "full_signature": "protected void clearEntry( long position )", "class_method_signature": "RingBuffer.clearEntry( long position )", "testcase": false, "constructor": false}, {"identifier": "addConsumer", "parameters": "( final C consumer )", "modifiers": "public", "return": "boolean", "signature": "boolean addConsumer( final C consumer )", "full_signature": "public boolean addConsumer( final C consumer )", "class_method_signature": "RingBuffer.addConsumer( final C consumer )", "testcase": false, "constructor": false}, {"identifier": "addConsumer", "parameters": "( final C consumer,\n                                final int timesToRetryUponTimeout )", "modifiers": "public", "return": "boolean", "signature": "boolean addConsumer( final C consumer,\n                                final int timesToRetryUponTimeout )", "full_signature": "public boolean addConsumer( final C consumer,\n                                final int timesToRetryUponTimeout )", "class_method_signature": "RingBuffer.addConsumer( final C consumer,\n                                final int timesToRetryUponTimeout )", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "( C consumer )", "modifiers": "public", "return": "boolean", "signature": "boolean remove( C consumer )", "full_signature": "public boolean remove( C consumer )", "class_method_signature": "RingBuffer.remove( C consumer )", "testcase": false, "constructor": false}, {"identifier": "disconnect", "parameters": "( ConsumerRunner runner )", "modifiers": "protected", "return": "void", "signature": "void disconnect( ConsumerRunner runner )", "full_signature": "protected void disconnect( ConsumerRunner runner )", "class_method_signature": "RingBuffer.disconnect( ConsumerRunner runner )", "testcase": false, "constructor": false}, {"identifier": "getBufferSize", "parameters": "()", "modifiers": "protected", "return": "int", "signature": "int getBufferSize()", "full_signature": "protected int getBufferSize()", "class_method_signature": "RingBuffer.getBufferSize()", "testcase": false, "constructor": false}, {"identifier": "hasConsumers", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasConsumers()", "full_signature": "public boolean hasConsumers()", "class_method_signature": "RingBuffer.hasConsumers()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "RingBuffer.shutdown()", "testcase": false, "constructor": false}], "file": "modeshape-common/src/main/java/org/modeshape/common/collection/ring/RingBuffer.java"}, "focal_method": {"identifier": "getBufferSize", "parameters": "()", "modifiers": "protected", "return": "int", "body": "protected int getBufferSize() {\n        return bufferSize;\n    }", "signature": "int getBufferSize()", "full_signature": "protected int getBufferSize()", "class_method_signature": "RingBuffer.getBufferSize()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}