{"test_class": {"identifier": "TestByteAndBitConverter", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/dk/alexandra/fresco/framework/util/TestByteAndBitConverter.java"}, "test_case": {"identifier": "testToHex", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testToHex() {\n    Assert.assertThat(ByteAndBitConverter.toHex(\n        new boolean[]{false, false, false, false, false, false, false, false}), Is.is(\"00\"));\n    Assert.assertThat(\n        ByteAndBitConverter.toHex(new boolean[]{true, true, true, true, true, true, true, true}),\n        Is.is(\"ff\"));\n    Assert.assertThat(\n        ByteAndBitConverter.toHex(new boolean[]{true, true, true, true, true, true, true}),\n        Is.is(\"7f\"));\n    Assert.assertThat(\n        ByteAndBitConverter.toHex(new boolean[]{true, true, true, true, true, true}),\n        Is.is(\"3f\"));\n    Assert.assertThat(ByteAndBitConverter.toHex(new boolean[]{true, true, true, true, true}),\n        Is.is(\"1f\"));\n    Assert.assertThat(ByteAndBitConverter.toHex(new boolean[]{true, true, true, true}),\n        Is.is(\"0f\"));\n    Assert.assertThat(\n        ByteAndBitConverter\n            .toHex(new boolean[]{false, true, true, true, true, true, true, true, true}),\n        Is.is(\"00ff\"));\n    Assert.assertThat(ByteAndBitConverter.toHex(\n        new boolean[]{true, true, true, true, true, true, true, true, true}), Is.is(\"01ff\"));\n    Assert.assertThat(\n        ByteAndBitConverter.toHex(Arrays\n            .asList((new Boolean[]{true, true, true, true, true, true, true, true, true}))),\n        Is.is(\"01ff\"));\n  }", "signature": "void testToHex()", "full_signature": "@Test public void testToHex()", "class_method_signature": "TestByteAndBitConverter.testToHex()", "testcase": true, "constructor": false, "invocations": ["assertThat", "toHex", "is", "assertThat", "toHex", "is", "assertThat", "toHex", "is", "assertThat", "toHex", "is", "assertThat", "toHex", "is", "assertThat", "toHex", "is", "assertThat", "toHex", "is", "assertThat", "toHex", "is", "assertThat", "toHex", "asList", "is"]}, "focal_class": {"identifier": "ByteAndBitConverter", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ByteAndBitConverter", "parameters": "()", "modifiers": "private", "return": "", "signature": " ByteAndBitConverter()", "full_signature": "private  ByteAndBitConverter()", "class_method_signature": "ByteAndBitConverter.ByteAndBitConverter()", "testcase": false, "constructor": true}, {"identifier": "toByteArray", "parameters": "(long value)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(long value)", "full_signature": "public static byte[] toByteArray(long value)", "class_method_signature": "ByteAndBitConverter.toByteArray(long value)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(int value)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(int value)", "full_signature": "public static byte[] toByteArray(int value)", "class_method_signature": "ByteAndBitConverter.toByteArray(int value)", "testcase": false, "constructor": false}, {"identifier": "intToBitSet", "parameters": "(int i)", "modifiers": "public static", "return": "BitSet", "signature": "BitSet intToBitSet(int i)", "full_signature": "public static BitSet intToBitSet(int i)", "class_method_signature": "ByteAndBitConverter.intToBitSet(int i)", "testcase": false, "constructor": false}, {"identifier": "toBoolean", "parameters": "(String hex)", "modifiers": "public static", "return": "Boolean[]", "signature": "Boolean[] toBoolean(String hex)", "full_signature": "public static Boolean[] toBoolean(String hex)", "class_method_signature": "ByteAndBitConverter.toBoolean(String hex)", "testcase": false, "constructor": false}, {"identifier": "toHex", "parameters": "(boolean[] bits)", "modifiers": "public static", "return": "String", "signature": "String toHex(boolean[] bits)", "full_signature": "public static String toHex(boolean[] bits)", "class_method_signature": "ByteAndBitConverter.toHex(boolean[] bits)", "testcase": false, "constructor": false}, {"identifier": "toHex", "parameters": "(List<Boolean> bits)", "modifiers": "public static", "return": "String", "signature": "String toHex(List<Boolean> bits)", "full_signature": "public static String toHex(List<Boolean> bits)", "class_method_signature": "ByteAndBitConverter.toHex(List<Boolean> bits)", "testcase": false, "constructor": false}, {"identifier": "convertArray", "parameters": "(Boolean[] in)", "modifiers": "private static", "return": "boolean[]", "signature": "boolean[] convertArray(Boolean[] in)", "full_signature": "private static boolean[] convertArray(Boolean[] in)", "class_method_signature": "ByteAndBitConverter.convertArray(Boolean[] in)", "testcase": false, "constructor": false}], "file": "core/src/main/java/dk/alexandra/fresco/framework/util/ByteAndBitConverter.java"}, "focal_method": {"identifier": "toHex", "parameters": "(boolean[] bits)", "modifiers": "public static", "return": "String", "body": "public static String toHex(boolean[] bits) {\n    StringBuilder hex = new StringBuilder();\n    boolean[] niceBits = null;\n    if (bits.length % 4 == 0) {\n      niceBits = bits;\n    } else {\n      niceBits = new boolean[4 * ((bits.length / 4) + 1)];\n      int offset = 4 - (bits.length % 4);\n      System.arraycopy(bits, 0, niceBits, offset, bits.length);\n    }\n\n    StringBuilder binb = new StringBuilder();\n    for (boolean niceBit : niceBits) {\n      binb.append(niceBit ? \"1\" : \"0\");\n    }\n    String bin = binb.toString();\n    for (int i = 0; i < bin.length() / 4; i++) {\n      String digit = bin.substring(i * 4, i * 4 + 4);\n      Integer dec = Integer.parseInt(digit, 2);\n      String hexStr = Integer.toHexString(dec);\n      hex.append(hexStr);\n    }\n    if (hex.length() % 2 != 0) {\n      hex.insert(0, \"0\");\n    }\n    return hex.toString();\n  }", "signature": "String toHex(boolean[] bits)", "full_signature": "public static String toHex(boolean[] bits)", "class_method_signature": "ByteAndBitConverter.toHex(boolean[] bits)", "testcase": false, "constructor": false, "invocations": ["arraycopy", "append", "toString", "length", "substring", "parseInt", "toHexString", "append", "length", "insert", "toString"]}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}