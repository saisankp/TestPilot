{"test_class": {"identifier": "OnErrorStageFactoryTest", "superclass": "extends StageTestBase", "interfaces": "", "fields": [{"original_string": "private final OnErrorStageFactory factory = new OnErrorStageFactory();", "modifier": "private final", "type": "OnErrorStageFactory", "declarator": "factory = new OnErrorStageFactory()", "var_name": "factory"}], "file": "implementation/src/test/java/io/smallrye/reactive/streams/stages/OnErrorStageFactoryTest.java"}, "test_case": {"identifier": "create", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void create() throws ExecutionException, InterruptedException {\n        Flowable<Integer> flowable = Flowable.fromArray(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n                .subscribeOn(Schedulers.computation());\n\n        AtomicReference<Throwable> error = new AtomicReference<>();\n        ReactiveStreams.fromPublisher(flowable)\n                .filter(i -> i < 4)\n                .map(this::squareOrFailed)\n                .onError(error::set)\n                .map(this::asString)\n                .toList()\n                .run().toCompletableFuture().exceptionally(x -> Collections.emptyList()).get();\n        assertThat(error.get()).hasMessage(\"failed\");\n    }", "signature": "void create()", "full_signature": "@Test public void create()", "class_method_signature": "OnErrorStageFactoryTest.create()", "testcase": true, "constructor": false, "invocations": ["subscribeOn", "fromArray", "computation", "get", "exceptionally", "toCompletableFuture", "run", "toList", "map", "onError", "map", "filter", "fromPublisher", "emptyList", "hasMessage", "assertThat", "get"]}, "focal_class": {"identifier": "OnErrorStageFactory", "superclass": "", "interfaces": "implements ProcessingStageFactory<Stage.OnError>", "fields": [], "methods": [{"identifier": "create", "parameters": "(Engine engine, Stage.OnError stage)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "ProcessingStage<I, O>", "signature": "ProcessingStage<I, O> create(Engine engine, Stage.OnError stage)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public ProcessingStage<I, O> create(Engine engine, Stage.OnError stage)", "class_method_signature": "OnErrorStageFactory.create(Engine engine, Stage.OnError stage)", "testcase": false, "constructor": false}], "file": "implementation/src/main/java/io/smallrye/reactive/streams/stages/OnErrorStageFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(Engine engine, Stage.OnError stage)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "ProcessingStage<I, O>", "body": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public <I, O> ProcessingStage<I, O> create(Engine engine, Stage.OnError stage) {\n        Consumer<Throwable> consumer = Objects.requireNonNull(stage).getConsumer();\n        Objects.requireNonNull(consumer);\n        return source -> (Flowable<O>) source.doOnError(consumer::accept);\n    }", "signature": "ProcessingStage<I, O> create(Engine engine, Stage.OnError stage)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public ProcessingStage<I, O> create(Engine engine, Stage.OnError stage)", "class_method_signature": "OnErrorStageFactory.create(Engine engine, Stage.OnError stage)", "testcase": false, "constructor": false, "invocations": ["getConsumer", "requireNonNull", "requireNonNull", "doOnError"]}, "repository": {"repo_id": 139009007, "url": "https://github.com/smallrye/smallrye-reactive-streams-operators", "stars": 14, "created": "6/28/2018 11:27:21 AM +00:00", "updates": "2020-01-20T06:48:19+00:00", "fork": "False", "license": "licensed"}}