{"test_class": {"identifier": "PublishNotificationMessagesAdviceTest", "superclass": "extends AbstractServiceTest", "interfaces": "", "fields": [{"original_string": "@Mock\n    private NotificationMessageInMemoryQueue notificationMessageInMemoryQueue;", "modifier": "@Mock\n    private", "type": "NotificationMessageInMemoryQueue", "declarator": "notificationMessageInMemoryQueue", "var_name": "notificationMessageInMemoryQueue"}, {"original_string": "@Mock\n    private NotificationMessagePublishingServiceImpl notificationMessagePublishingService;", "modifier": "@Mock\n    private", "type": "NotificationMessagePublishingServiceImpl", "declarator": "notificationMessagePublishingService", "var_name": "notificationMessagePublishingService"}, {"original_string": "@InjectMocks\n    private PublishNotificationMessagesAdvice publishNotificationMessagesAdvice;", "modifier": "@InjectMocks\n    private", "type": "PublishNotificationMessagesAdvice", "declarator": "publishNotificationMessagesAdvice", "var_name": "publishNotificationMessagesAdvice"}], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/advice/PublishNotificationMessagesAdviceTest.java"}, "test_case": {"identifier": "testPublishNotificationMessagesDatabaseException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPublishNotificationMessagesDatabaseException() throws Throwable\n    {\n        // Create a notification message.\n        NotificationMessage notificationMessage = new NotificationMessage(MessageTypeEntity.MessageEventTypes.SQS.name(), AWS_SQS_QUEUE_NAME, MESSAGE_TEXT,\n            Collections.singletonList(new MessageHeader(KEY, VALUE)));\n\n        // Mock a join point of the method call.\n        ProceedingJoinPoint joinPoint = getMockedProceedingJoinPoint(\"testPublishNotificationMessages\");\n\n        // Mock the external calls.\n        doCallRealMethod().when(notificationMessageInMemoryQueue).clear();\n        doCallRealMethod().when(notificationMessageInMemoryQueue).add(notificationMessage);\n        when(notificationMessageInMemoryQueue.isEmpty()).thenCallRealMethod();\n        doCallRealMethod().when(notificationMessageInMemoryQueue).remove();\n        doThrow(new AmazonServiceException(ERROR_MESSAGE)).when(notificationMessagePublishingService).publishNotificationMessage(notificationMessage);\n        doThrow(new RuntimeException(ERROR_MESSAGE)).when(notificationMessagePublishingService).addNotificationMessageToDatabaseQueue(notificationMessage);\n\n        // Clear the queue.\n        notificationMessageInMemoryQueue.clear();\n\n        // Add the notification message to the queue.\n        notificationMessageInMemoryQueue.add(notificationMessage);\n\n        // Validate that the queue is not empty now.\n        assertFalse(notificationMessageInMemoryQueue.isEmpty());\n\n        // Call the method under test.\n        publishNotificationMessagesAdvice.publishNotificationMessages(joinPoint);\n\n        // Verify the external calls.\n        verify(notificationMessageInMemoryQueue, times(2)).clear();\n        verify(notificationMessageInMemoryQueue).add(notificationMessage);\n        verify(notificationMessageInMemoryQueue, times(3)).isEmpty();\n        verify(notificationMessageInMemoryQueue).remove();\n        verify(notificationMessagePublishingService).publishNotificationMessage(notificationMessage);\n        verify(notificationMessagePublishingService).addNotificationMessageToDatabaseQueue(notificationMessage);\n        verifyNoMoreInteractionsHelper();\n\n        // Validate the results.\n        assertTrue(notificationMessageInMemoryQueue.isEmpty());\n    }", "signature": "void testPublishNotificationMessagesDatabaseException()", "full_signature": "@Test public void testPublishNotificationMessagesDatabaseException()", "class_method_signature": "PublishNotificationMessagesAdviceTest.testPublishNotificationMessagesDatabaseException()", "testcase": true, "constructor": false, "invocations": ["name", "singletonList", "getMockedProceedingJoinPoint", "clear", "when", "doCallRealMethod", "add", "when", "doCallRealMethod", "thenCallRealMethod", "when", "isEmpty", "remove", "when", "doCallRealMethod", "publishNotificationMessage", "when", "doThrow", "addNotificationMessageToDatabaseQueue", "when", "doThrow", "clear", "add", "assertFalse", "isEmpty", "publishNotificationMessages", "clear", "verify", "times", "add", "verify", "isEmpty", "verify", "times", "remove", "verify", "publishNotificationMessage", "verify", "addNotificationMessageToDatabaseQueue", "verify", "verifyNoMoreInteractionsHelper", "assertTrue", "isEmpty"]}, "focal_class": {"identifier": "PublishNotificationMessagesAdvice", "superclass": "extends AbstractServiceAdvice", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(PublishNotificationMessagesAdvice.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(PublishNotificationMessagesAdvice.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private NotificationMessageInMemoryQueue notificationMessageInMemoryQueue;", "modifier": "@Autowired\n    private", "type": "NotificationMessageInMemoryQueue", "declarator": "notificationMessageInMemoryQueue", "var_name": "notificationMessageInMemoryQueue"}, {"original_string": "@Autowired\n    private NotificationMessagePublishingService notificationMessagePublishingService;", "modifier": "@Autowired\n    private", "type": "NotificationMessagePublishingService", "declarator": "notificationMessagePublishingService", "var_name": "notificationMessagePublishingService"}], "methods": [{"identifier": "publishNotificationMessages", "parameters": "(ProceedingJoinPoint joinPoint)", "modifiers": "@Around(\"serviceMethods()\") public", "return": "Object", "signature": "Object publishNotificationMessages(ProceedingJoinPoint joinPoint)", "full_signature": "@Around(\"serviceMethods()\") public Object publishNotificationMessages(ProceedingJoinPoint joinPoint)", "class_method_signature": "PublishNotificationMessagesAdvice.publishNotificationMessages(ProceedingJoinPoint joinPoint)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/advice/PublishNotificationMessagesAdvice.java"}, "focal_method": {"identifier": "publishNotificationMessages", "parameters": "(ProceedingJoinPoint joinPoint)", "modifiers": "@Around(\"serviceMethods()\") public", "return": "Object", "body": "@Around(\"serviceMethods()\")\n    public Object publishNotificationMessages(ProceedingJoinPoint joinPoint) throws Throwable\n    {\n        MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();\n        Method method = methodSignature.getMethod();\n\n        boolean publishNotificationMessages = method.isAnnotationPresent(PublishNotificationMessages.class);\n\n        // Proceed to the join point (i.e. call the method and let it return).\n        try\n        {\n            Object returnValue = joinPoint.proceed();\n\n            if (publishNotificationMessages)\n            {\n                if (LOGGER.isDebugEnabled())\n                {\n                    // Get the target class being called.\n                    Class<?> targetClass = joinPoint.getTarget().getClass();\n\n                    LOGGER.debug(\"Method is initiating notification message publishing. javaMethod=\\\"{}.{}\\\" notificationMessageInMemoryQueueSize={}\",\n                        targetClass.getName(), methodSignature.getName(), notificationMessageInMemoryQueue.size());\n                }\n\n                // Publish all notification messages stored in the \"in-memory\" notification message queue.\n                while (!notificationMessageInMemoryQueue.isEmpty())\n                {\n                    // Get notification message from the \"in-memory\" queue.\n                    NotificationMessage notificationMessage = notificationMessageInMemoryQueue.remove();\n\n                    // Publish the message.\n                    try\n                    {\n                        notificationMessagePublishingService.publishNotificationMessage(notificationMessage);\n                    }\n                    catch (Exception sqsException)\n                    {\n                        // On error, add this notification message to the database queue.\n                        try\n                        {\n                            notificationMessagePublishingService.addNotificationMessageToDatabaseQueue(notificationMessage);\n                        }\n                        catch (Exception dbException)\n                        {\n                            // Log the error.\n                            LOGGER\n                                .error(\"Failed to add notification message to the database queue. messageType=\\\"{}\\\" messageDestination=\\\"{}\\\" messageText={}\",\n                                    notificationMessage.getMessageType(), notificationMessage.getMessageDestination(), notificationMessage.getMessageText(),\n                                    dbException);\n                        }\n                    }\n                }\n            }\n\n            return returnValue;\n        }\n        finally\n        {\n            // Removes all of the elements from the queue, since the thread might be reused from the thread pool.\n            if (publishNotificationMessages)\n            {\n                notificationMessageInMemoryQueue.clear();\n            }\n        }\n    }", "signature": "Object publishNotificationMessages(ProceedingJoinPoint joinPoint)", "full_signature": "@Around(\"serviceMethods()\") public Object publishNotificationMessages(ProceedingJoinPoint joinPoint)", "class_method_signature": "PublishNotificationMessagesAdvice.publishNotificationMessages(ProceedingJoinPoint joinPoint)", "testcase": false, "constructor": false, "invocations": ["getSignature", "getMethod", "isAnnotationPresent", "proceed", "isDebugEnabled", "getClass", "getTarget", "debug", "getName", "getName", "size", "isEmpty", "remove", "publishNotificationMessage", "addNotificationMessageToDatabaseQueue", "error", "getMessageType", "getMessageDestination", "getMessageText", "clear"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}