{"test_class": {"identifier": "CyclomaticComplexityVisitorTest", "superclass": "", "interfaces": "", "fields": [], "file": "dart-lang/src/test/java/fr/insideapp/sonarqube/dart/lang/antlr/CyclomaticComplexityVisitorTest.java"}, "test_case": {"identifier": "complexity", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void complexity() throws IOException {\n        final CharStream charStream = CharStreams.fromStream(this.getClass().getResourceAsStream(\"/dart/complexity.dart\"));\n        final Dart2Lexer lexer = new Dart2Lexer(charStream);\n        lexer.removeErrorListeners();\n        final CommonTokenStream stream = new CommonTokenStream(lexer);\n        stream.fill();\n        final Dart2Parser parser = new Dart2Parser(stream);\n        parser.removeErrorListeners();\n        final ParseTree root = parser.compilationUnit();\n\n        CyclomaticComplexityVisitor visitor = new CyclomaticComplexityVisitor();\n        CustomTreeVisitor customTreeVisitor = new CustomTreeVisitor(visitor);\n        customTreeVisitor.visit(root);\n        assertThat(visitor.getComplexity()).isEqualTo(7);\n    }", "signature": "void complexity()", "full_signature": "@Test public void complexity()", "class_method_signature": "CyclomaticComplexityVisitorTest.complexity()", "testcase": true, "constructor": false, "invocations": ["fromStream", "getResourceAsStream", "getClass", "removeErrorListeners", "fill", "removeErrorListeners", "compilationUnit", "visit", "isEqualTo", "assertThat", "getComplexity"]}, "focal_class": {"identifier": "CyclomaticComplexityVisitor", "superclass": "", "interfaces": "implements ParseTreeItemVisitor", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(CyclomaticComplexityVisitor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(CyclomaticComplexityVisitor.class)", "var_name": "LOGGER"}, {"original_string": "private int complexity = 0;", "modifier": "private", "type": "int", "declarator": "complexity = 0", "var_name": "complexity"}], "methods": [{"identifier": "apply", "parameters": "(ParseTree tree)", "modifiers": "@Override public", "return": "void", "signature": "void apply(ParseTree tree)", "full_signature": "@Override public void apply(ParseTree tree)", "class_method_signature": "CyclomaticComplexityVisitor.apply(ParseTree tree)", "testcase": false, "constructor": false}, {"identifier": "fillContext", "parameters": "(SensorContext context, AntlrContext antlrContext)", "modifiers": "@Override public", "return": "void", "signature": "void fillContext(SensorContext context, AntlrContext antlrContext)", "full_signature": "@Override public void fillContext(SensorContext context, AntlrContext antlrContext)", "class_method_signature": "CyclomaticComplexityVisitor.fillContext(SensorContext context, AntlrContext antlrContext)", "testcase": false, "constructor": false}, {"identifier": "getComplexity", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getComplexity()", "full_signature": "public int getComplexity()", "class_method_signature": "CyclomaticComplexityVisitor.getComplexity()", "testcase": false, "constructor": false}], "file": "dart-lang/src/main/java/fr/insideapp/sonarqube/dart/lang/antlr/CyclomaticComplexityVisitor.java"}, "focal_method": {"identifier": "getComplexity", "parameters": "()", "modifiers": "public", "return": "int", "body": "public int getComplexity() {\n        return complexity;\n    }", "signature": "int getComplexity()", "full_signature": "public int getComplexity()", "class_method_signature": "CyclomaticComplexityVisitor.getComplexity()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 235879795, "url": "https://github.com/insideapp-oss/sonar-flutter", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 70, "size": 799, "license": "licensed"}}