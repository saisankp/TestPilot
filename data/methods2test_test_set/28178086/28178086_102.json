{"test_class": {"identifier": "TsFillerAsProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Runnable doNothing = () -> {\n    };", "modifier": "private final", "type": "Runnable", "declarator": "doNothing = () -> {\n    }", "var_name": "doNothing"}], "file": "jtss/src/test/java/ec/tss/tsproviders/utils/TsFillerAsProviderTest.java"}, "test_case": {"identifier": "testFactories", "parameters": "()", "modifiers": "@Test @SuppressWarnings(\"null\") public", "return": "void", "body": "@Test\n    @SuppressWarnings(\"null\")\n    public void testFactories() {\n        assertThatThrownBy(() -> TsFillerAsProvider.of(null, TsAsyncMode.None, TsFiller.noOp())).isInstanceOf(NullPointerException.class);\n        assertThatThrownBy(() -> TsFillerAsProvider.of(\"provider\", null, TsFiller.noOp())).isInstanceOf(NullPointerException.class);\n        assertThatThrownBy(() -> TsFillerAsProvider.of(\"provider\", TsAsyncMode.None, null)).isInstanceOf(NullPointerException.class);\n\n        assertThatThrownBy(() -> TsFillerAsProvider.of(null, TsAsyncMode.None, TsFiller.noOp(), doNothing)).isInstanceOf(NullPointerException.class);\n        assertThatThrownBy(() -> TsFillerAsProvider.of(\"provider\", null, TsFiller.noOp(), doNothing)).isInstanceOf(NullPointerException.class);\n        assertThatThrownBy(() -> TsFillerAsProvider.of(\"provider\", TsAsyncMode.None, null, doNothing)).isInstanceOf(NullPointerException.class);\n        assertThatThrownBy(() -> TsFillerAsProvider.of(\"provider\", TsAsyncMode.None, TsFiller.noOp(), null)).isInstanceOf(NullPointerException.class);\n    }", "signature": "void testFactories()", "full_signature": "@Test @SuppressWarnings(\"null\") public void testFactories()", "class_method_signature": "TsFillerAsProviderTest.testFactories()", "testcase": true, "constructor": false, "invocations": ["isInstanceOf", "assertThatThrownBy", "of", "noOp", "isInstanceOf", "assertThatThrownBy", "of", "noOp", "isInstanceOf", "assertThatThrownBy", "of", "isInstanceOf", "assertThatThrownBy", "of", "noOp", "isInstanceOf", "assertThatThrownBy", "of", "noOp", "isInstanceOf", "assertThatThrownBy", "of", "isInstanceOf", "assertThatThrownBy", "of", "noOp"]}, "focal_class": {"identifier": "TsFillerAsProvider", "superclass": "", "interfaces": "implements ITsProvider", "fields": [{"original_string": "private final String providerName;", "modifier": "private final", "type": "String", "declarator": "providerName", "var_name": "providerName"}, {"original_string": "private final Runnable cacheCleaner;", "modifier": "private final", "type": "Runnable", "declarator": "cacheCleaner", "var_name": "cacheCleaner"}, {"original_string": "private static final Runnable NO_CACHE = () -> {\n    };", "modifier": "private static final", "type": "Runnable", "declarator": "NO_CACHE = () -> {\n    }", "var_name": "NO_CACHE"}], "methods": [{"identifier": "of", "parameters": "(@NonNull String providerName, @NonNull TsAsyncMode asyncMode, @NonNull TsFiller filler)", "modifiers": "@NonNull public static", "return": "ITsProvider", "signature": "ITsProvider of(@NonNull String providerName, @NonNull TsAsyncMode asyncMode, @NonNull TsFiller filler)", "full_signature": "@NonNull public static ITsProvider of(@NonNull String providerName, @NonNull TsAsyncMode asyncMode, @NonNull TsFiller filler)", "class_method_signature": "TsFillerAsProvider.of(@NonNull String providerName, @NonNull TsAsyncMode asyncMode, @NonNull TsFiller filler)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(@NonNull String providerName, @NonNull TsAsyncMode asyncMode, @NonNull TsFiller filler, @NonNull Runnable cacheCleaner)", "modifiers": "@NonNull public static", "return": "ITsProvider", "signature": "ITsProvider of(@NonNull String providerName, @NonNull TsAsyncMode asyncMode, @NonNull TsFiller filler, @NonNull Runnable cacheCleaner)", "full_signature": "@NonNull public static ITsProvider of(@NonNull String providerName, @NonNull TsAsyncMode asyncMode, @NonNull TsFiller filler, @NonNull Runnable cacheCleaner)", "class_method_signature": "TsFillerAsProvider.of(@NonNull String providerName, @NonNull TsAsyncMode asyncMode, @NonNull TsFiller filler, @NonNull Runnable cacheCleaner)", "testcase": false, "constructor": false}, {"identifier": "TsFillerAsProvider", "parameters": "(String providerName, Runnable cacheCleaner)", "modifiers": "private", "return": "", "signature": " TsFillerAsProvider(String providerName, Runnable cacheCleaner)", "full_signature": "private  TsFillerAsProvider(String providerName, Runnable cacheCleaner)", "class_method_signature": "TsFillerAsProvider.TsFillerAsProvider(String providerName, Runnable cacheCleaner)", "testcase": false, "constructor": true}, {"identifier": "getSource", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getSource()", "full_signature": "@Override public String getSource()", "class_method_signature": "TsFillerAsProvider.getSource()", "testcase": false, "constructor": false}, {"identifier": "clearCache", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clearCache()", "full_signature": "@Override public void clearCache()", "class_method_signature": "TsFillerAsProvider.clearCache()", "testcase": false, "constructor": false}], "file": "jtss/src/main/java/ec/tss/tsproviders/utils/TsFillerAsProvider.java"}, "focal_method": {"identifier": "of", "parameters": "(@NonNull String providerName, @NonNull TsAsyncMode asyncMode, @NonNull TsFiller filler)", "modifiers": "@NonNull public static", "return": "ITsProvider", "body": "@NonNull\n    public static ITsProvider of(@NonNull String providerName, @NonNull TsAsyncMode asyncMode, @NonNull TsFiller filler) {\n        return of(providerName, asyncMode, filler, NO_CACHE);\n    }", "signature": "ITsProvider of(@NonNull String providerName, @NonNull TsAsyncMode asyncMode, @NonNull TsFiller filler)", "full_signature": "@NonNull public static ITsProvider of(@NonNull String providerName, @NonNull TsAsyncMode asyncMode, @NonNull TsFiller filler)", "class_method_signature": "TsFillerAsProvider.of(@NonNull String providerName, @NonNull TsAsyncMode asyncMode, @NonNull TsFiller filler)", "testcase": false, "constructor": false, "invocations": ["of"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}