{"test_class": {"identifier": "ClientsResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public MockitoRule mockito = MockitoJUnit.rule();", "modifier": "@Rule public", "type": "MockitoRule", "declarator": "mockito = MockitoJUnit.rule()", "var_name": "mockito"}, {"original_string": "@Mock AclDAO aclDAO;", "modifier": "@Mock", "type": "AclDAO", "declarator": "aclDAO", "var_name": "aclDAO"}, {"original_string": "@Mock ClientDAO clientDAO;", "modifier": "@Mock", "type": "ClientDAO", "declarator": "clientDAO", "var_name": "clientDAO"}, {"original_string": "User user = User.named(\"user\");", "modifier": "", "type": "User", "declarator": "user = User.named(\"user\")", "var_name": "user"}, {"original_string": "ApiDate now = ApiDate.now();", "modifier": "", "type": "ApiDate", "declarator": "now = ApiDate.now()", "var_name": "now"}, {"original_string": "Client client =\n      new Client(1, \"client\", \"1st client\", null, now, \"test\", now, \"test\", null, null, true, false\n      );", "modifier": "", "type": "Client", "declarator": "client =\n      new Client(1, \"client\", \"1st client\", null, now, \"test\", now, \"test\", null, null, true, false\n      )", "var_name": "client"}, {"original_string": "AuditLog auditLog = new SimpleLogger();", "modifier": "", "type": "AuditLog", "declarator": "auditLog = new SimpleLogger()", "var_name": "auditLog"}, {"original_string": "ClientsResource resource;", "modifier": "", "type": "ClientsResource", "declarator": "resource", "var_name": "resource"}], "file": "server/src/test/java/keywhiz/service/resources/admin/ClientsResourceTest.java"}, "test_case": {"identifier": "notFoundWhenRetrievingBadName", "parameters": "()", "modifiers": "@Test(expected = NotFoundException.class) public", "return": "void", "body": "@Test(expected = NotFoundException.class)\n  public void notFoundWhenRetrievingBadName() {\n    when(clientDAO.getClientByName(\"non-existent-client\")).thenReturn(Optional.empty());\n    resource.getClientByName(user, \"non-existent-client\");\n  }", "signature": "void notFoundWhenRetrievingBadName()", "full_signature": "@Test(expected = NotFoundException.class) public void notFoundWhenRetrievingBadName()", "class_method_signature": "ClientsResourceTest.notFoundWhenRetrievingBadName()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getClientByName", "empty", "getClientByName"]}, "focal_class": {"identifier": "ClientsResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ClientsResource.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ClientsResource.class)", "var_name": "logger"}, {"original_string": "private final AclDAO aclDAO;", "modifier": "private final", "type": "AclDAO", "declarator": "aclDAO", "var_name": "aclDAO"}, {"original_string": "private final ClientDAO clientDAO;", "modifier": "private final", "type": "ClientDAO", "declarator": "clientDAO", "var_name": "clientDAO"}, {"original_string": "private final AuditLog auditLog;", "modifier": "private final", "type": "AuditLog", "declarator": "auditLog", "var_name": "auditLog"}], "methods": [{"identifier": "ClientsResource", "parameters": "(AclDAOFactory aclDAOFactory, ClientDAOFactory clientDAOFactory,\n      AuditLog auditLog)", "modifiers": "@Inject public", "return": "", "signature": " ClientsResource(AclDAOFactory aclDAOFactory, ClientDAOFactory clientDAOFactory,\n      AuditLog auditLog)", "full_signature": "@Inject public  ClientsResource(AclDAOFactory aclDAOFactory, ClientDAOFactory clientDAOFactory,\n      AuditLog auditLog)", "class_method_signature": "ClientsResource.ClientsResource(AclDAOFactory aclDAOFactory, ClientDAOFactory clientDAOFactory,\n      AuditLog auditLog)", "testcase": false, "constructor": true}, {"identifier": "ClientsResource", "parameters": "(AclDAO aclDAO, ClientDAO clientDAO, AuditLog auditLog)", "modifiers": "@VisibleForTesting", "return": "", "signature": " ClientsResource(AclDAO aclDAO, ClientDAO clientDAO, AuditLog auditLog)", "full_signature": "@VisibleForTesting  ClientsResource(AclDAO aclDAO, ClientDAO clientDAO, AuditLog auditLog)", "class_method_signature": "ClientsResource.ClientsResource(AclDAO aclDAO, ClientDAO clientDAO, AuditLog auditLog)", "testcase": false, "constructor": true}, {"identifier": "findClients", "parameters": "(@Auth User user, @DefaultValue(\"\") @QueryParam(\"name\") String name)", "modifiers": "@Timed @ExceptionMetered @GET public", "return": "Response", "signature": "Response findClients(@Auth User user, @DefaultValue(\"\") @QueryParam(\"name\") String name)", "full_signature": "@Timed @ExceptionMetered @GET public Response findClients(@Auth User user, @DefaultValue(\"\") @QueryParam(\"name\") String name)", "class_method_signature": "ClientsResource.findClients(@Auth User user, @DefaultValue(\"\") @QueryParam(\"name\") String name)", "testcase": false, "constructor": false}, {"identifier": "listClients", "parameters": "(@Auth User user)", "modifiers": "protected", "return": "List<Client>", "signature": "List<Client> listClients(@Auth User user)", "full_signature": "protected List<Client> listClients(@Auth User user)", "class_method_signature": "ClientsResource.listClients(@Auth User user)", "testcase": false, "constructor": false}, {"identifier": "getClientByName", "parameters": "(@Auth User user, String name)", "modifiers": "protected", "return": "Client", "signature": "Client getClientByName(@Auth User user, String name)", "full_signature": "protected Client getClientByName(@Auth User user, String name)", "class_method_signature": "ClientsResource.getClientByName(@Auth User user, String name)", "testcase": false, "constructor": false}, {"identifier": "createClient", "parameters": "(@Auth User user,\n      @Valid CreateClientRequestV2 createClientRequest)", "modifiers": "@Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) public", "return": "Response", "signature": "Response createClient(@Auth User user,\n      @Valid CreateClientRequestV2 createClientRequest)", "full_signature": "@Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) public Response createClient(@Auth User user,\n      @Valid CreateClientRequestV2 createClientRequest)", "class_method_signature": "ClientsResource.createClient(@Auth User user,\n      @Valid CreateClientRequestV2 createClientRequest)", "testcase": false, "constructor": false}, {"identifier": "getClient", "parameters": "(@Auth User user,\n      @PathParam(\"clientId\") LongParam clientId)", "modifiers": "@Path(\"{clientId}\") @Timed @ExceptionMetered @GET public", "return": "ClientDetailResponse", "signature": "ClientDetailResponse getClient(@Auth User user,\n      @PathParam(\"clientId\") LongParam clientId)", "full_signature": "@Path(\"{clientId}\") @Timed @ExceptionMetered @GET public ClientDetailResponse getClient(@Auth User user,\n      @PathParam(\"clientId\") LongParam clientId)", "class_method_signature": "ClientsResource.getClient(@Auth User user,\n      @PathParam(\"clientId\") LongParam clientId)", "testcase": false, "constructor": false}, {"identifier": "deleteClient", "parameters": "(@Auth User user, @PathParam(\"clientId\") LongParam clientId)", "modifiers": "@Path(\"{clientId}\") @Timed @ExceptionMetered @DELETE public", "return": "Response", "signature": "Response deleteClient(@Auth User user, @PathParam(\"clientId\") LongParam clientId)", "full_signature": "@Path(\"{clientId}\") @Timed @ExceptionMetered @DELETE public Response deleteClient(@Auth User user, @PathParam(\"clientId\") LongParam clientId)", "class_method_signature": "ClientsResource.deleteClient(@Auth User user, @PathParam(\"clientId\") LongParam clientId)", "testcase": false, "constructor": false}, {"identifier": "clientDetailResponseFromId", "parameters": "(long clientId)", "modifiers": "private", "return": "ClientDetailResponse", "signature": "ClientDetailResponse clientDetailResponseFromId(long clientId)", "full_signature": "private ClientDetailResponse clientDetailResponseFromId(long clientId)", "class_method_signature": "ClientsResource.clientDetailResponseFromId(long clientId)", "testcase": false, "constructor": false}, {"identifier": "clientFromName", "parameters": "(String clientName)", "modifiers": "private", "return": "Client", "signature": "Client clientFromName(String clientName)", "full_signature": "private Client clientFromName(String clientName)", "class_method_signature": "ClientsResource.clientFromName(String clientName)", "testcase": false, "constructor": false}], "file": "server/src/main/java/keywhiz/service/resources/admin/ClientsResource.java"}, "focal_method": {"identifier": "getClientByName", "parameters": "(@Auth User user, String name)", "modifiers": "protected", "return": "Client", "body": "protected Client getClientByName(@Auth User user, String name) {\n    logger.info(\"User '{}' retrieving client name={}.\", user, name);\n    return clientFromName(name);\n  }", "signature": "Client getClientByName(@Auth User user, String name)", "full_signature": "protected Client getClientByName(@Auth User user, String name)", "class_method_signature": "ClientsResource.getClientByName(@Auth User user, String name)", "testcase": false, "constructor": false, "invocations": ["info", "clientFromName"]}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}