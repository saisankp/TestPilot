{"test_class": {"identifier": "TimedCacheTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected TimedCache<CacheEntry> cache;", "modifier": "protected", "type": "TimedCache<CacheEntry>", "declarator": "cache", "var_name": "cache"}], "file": "network-level/fl-ho-nl/src/test/java/net/floodlightcontroller/util/TimedCacheTest.java"}, "test_case": {"identifier": "testCapacity", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCapacity() throws InterruptedException {\n        int timeout = 5000;\n        cache = new TimedCache<TimedCacheTest.CacheEntry>(2, timeout);\n        \n        // Testing the capacity is tricky since the capacity can be \n        // exceeded for short amounts of time, so we try to flood the cache\n        // to make sure the first entry is expired\n        CacheEntry e1 = new CacheEntry(1);\n        for (int i=0; i < 100; i++) {\n            CacheEntry e = new CacheEntry(i);\n            cache.update(e);\n        }\n        \n        // entry 1 should have been expired due to capacity limits \n        assertEquals(false, cache.update(e1));\n    }", "signature": "void testCapacity()", "full_signature": "@Test public void testCapacity()", "class_method_signature": "TimedCacheTest.testCapacity()", "testcase": true, "constructor": false, "invocations": ["update", "assertEquals", "update"]}, "focal_class": {"identifier": "TimedCache", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final long timeoutInterval;", "modifier": "private final", "type": "long", "declarator": "timeoutInterval", "var_name": "timeoutInterval"}, {"original_string": "private ConcurrentMap<K, Long> cache;", "modifier": "private", "type": "ConcurrentMap<K, Long>", "declarator": "cache", "var_name": "cache"}], "methods": [{"identifier": "TimedCache", "parameters": "(int capacity, int timeToLive)", "modifiers": "public", "return": "", "signature": " TimedCache(int capacity, int timeToLive)", "full_signature": "public  TimedCache(int capacity, int timeToLive)", "class_method_signature": "TimedCache.TimedCache(int capacity, int timeToLive)", "testcase": false, "constructor": true}, {"identifier": "getTimeoutInterval", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getTimeoutInterval()", "full_signature": "public long getTimeoutInterval()", "class_method_signature": "TimedCache.getTimeoutInterval()", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(K key)", "modifiers": "public", "return": "boolean", "signature": "boolean update(K key)", "full_signature": "public boolean update(K key)", "class_method_signature": "TimedCache.update(K key)", "testcase": false, "constructor": false}], "file": "network-level/fl-ho-nl/src/main/java/net/floodlightcontroller/util/TimedCache.java"}, "focal_method": {"identifier": "update", "parameters": "(K key)", "modifiers": "public", "return": "boolean", "body": "public boolean update(K key)\n    {\n        Long curr = new Long(System.currentTimeMillis());\n        Long prev = cache.putIfAbsent(key, curr);\n        \n        if (prev == null) {\n        \t\treturn false;\n        }\n\n        if (curr - prev > this.timeoutInterval) {\n            if (cache.replace(key, prev, curr)) {\n            \t\treturn false;\n            }\n        }\n        \n        return true;\n    }", "signature": "boolean update(K key)", "full_signature": "public boolean update(K key)", "class_method_signature": "TimedCache.update(K key)", "testcase": false, "constructor": false, "invocations": ["currentTimeMillis", "putIfAbsent", "replace"]}, "repository": {"repo_id": 10459637, "url": "https://github.com/rizard/geni-openflow-vertical-handover", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 7, "size": 33971, "license": "licensed"}}