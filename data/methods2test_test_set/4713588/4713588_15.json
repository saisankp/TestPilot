{"test_class": {"identifier": "DrugOrderCohortDefinitionEvaluatorTest", "superclass": "extends BaseModuleContextSensitiveTest", "interfaces": "", "fields": [{"original_string": "protected static final String TEST_DATA = \"org/openmrs/module/reporting/include/DrugOrderCohortEvaluationData.xml\";", "modifier": "protected static final", "type": "String", "declarator": "TEST_DATA = \"org/openmrs/module/reporting/include/DrugOrderCohortEvaluationData.xml\"", "var_name": "TEST_DATA"}, {"original_string": "private DrugOrderCohortDefinition cohortDefinition;", "modifier": "private", "type": "DrugOrderCohortDefinition", "declarator": "cohortDefinition", "var_name": "cohortDefinition"}], "file": "api-1.10/src/test/java/org/openmrs/module/reporting/cohort/definition/evaluator/DrugOrderCohortDefinitionEvaluatorTest.java"}, "test_case": {"identifier": "evaluateShouldReturnAllPatientsTakingAnyDrugWithinADateRange", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  \tpublic void evaluateShouldReturnAllPatientsTakingAnyDrugWithinADateRange() throws Exception {\n  \t\tcohortDefinition.setActivatedOnOrAfter(DateUtil.getDateTime(2008, 8, 1));\n  \t\tcohortDefinition.setActivatedOnOrBefore(DateUtil.getDateTime(2008, 8, 8));\n  \t\tCohort cohort = Context.getService(CohortDefinitionService.class).evaluate(cohortDefinition, null);\n  \t\tAssert.assertTrue(cohort.contains(2));\n  \t\tAssert.assertTrue(cohort.contains(7));\n  \t\tAssert.assertTrue(cohort.contains(8));\n  \t\tAssert.assertTrue(cohort.contains(21));\n  \t\tAssert.assertTrue(cohort.contains(22));\n  \t\tAssert.assertEquals(5, cohort.size());\n  \t}", "signature": "void evaluateShouldReturnAllPatientsTakingAnyDrugWithinADateRange()", "full_signature": "@Test public void evaluateShouldReturnAllPatientsTakingAnyDrugWithinADateRange()", "class_method_signature": "DrugOrderCohortDefinitionEvaluatorTest.evaluateShouldReturnAllPatientsTakingAnyDrugWithinADateRange()", "testcase": true, "constructor": false, "invocations": ["setActivatedOnOrAfter", "getDateTime", "setActivatedOnOrBefore", "getDateTime", "evaluate", "getService", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertEquals", "size"]}, "focal_class": {"identifier": "DrugOrderCohortDefinitionEvaluator", "superclass": "", "interfaces": "implements CohortDefinitionEvaluator", "fields": [{"original_string": "@Autowired\n\tEvaluationService evaluationService;", "modifier": "@Autowired", "type": "EvaluationService", "declarator": "evaluationService", "var_name": "evaluationService"}], "methods": [{"identifier": "DrugOrderCohortDefinitionEvaluator", "parameters": "()", "modifiers": "public", "return": "", "signature": " DrugOrderCohortDefinitionEvaluator()", "full_signature": "public  DrugOrderCohortDefinitionEvaluator()", "class_method_signature": "DrugOrderCohortDefinitionEvaluator.DrugOrderCohortDefinitionEvaluator()", "testcase": false, "constructor": true}, {"identifier": "evaluate", "parameters": "(CohortDefinition cohortDefinition, EvaluationContext context)", "modifiers": "public", "return": "EvaluatedCohort", "signature": "EvaluatedCohort evaluate(CohortDefinition cohortDefinition, EvaluationContext context)", "full_signature": "public EvaluatedCohort evaluate(CohortDefinition cohortDefinition, EvaluationContext context)", "class_method_signature": "DrugOrderCohortDefinitionEvaluator.evaluate(CohortDefinition cohortDefinition, EvaluationContext context)", "testcase": false, "constructor": false}], "file": "api-1.10/src/main/java/org/openmrs/module/reporting/cohort/definition/evaluator/DrugOrderCohortDefinitionEvaluator.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(CohortDefinition cohortDefinition, EvaluationContext context)", "modifiers": "public", "return": "EvaluatedCohort", "body": "public EvaluatedCohort evaluate(CohortDefinition cohortDefinition, EvaluationContext context) {\n\t\tDrugOrderCohortDefinition drugOrderCohortDefinition = (DrugOrderCohortDefinition) cohortDefinition;\n\t\tcontext = ObjectUtil.nvl(context, new EvaluationContext());\n\n\t\tHqlQueryBuilder query = new HqlQueryBuilder();\n\t\tquery.select(\"drugOrder.patient.patientId\");\n\t\tquery.from(DrugOrder.class, \"drugOrder\");\n\n\t\tquery.wherePatientIn(\"drugOrder.patient.patientId\", context);\n\t\t\n\t\tif (drugOrderCohortDefinition.getWhich() == null) drugOrderCohortDefinition.setWhich(Match.ANY); \n\t\t\t\n\t    if (drugOrderCohortDefinition.getDrugSets() != null) {\n\t    \t\n\t    \tif (drugOrderCohortDefinition.getWhich() == Match.ANY) {\n\t\t    \tquery.whereInAny(\"drugOrder.concept\", drugOrderCohortDefinition.getDrugSets().toArray());\n\t    \t} \n\t    \telse if (drugOrderCohortDefinition.getWhich() == Match.ALL) {\n\t\t    \tquery.whereIn(\"drugOrder.concept\", drugOrderCohortDefinition.getDrugSets());\n\t\t    \tquery.groupBy(\n\t\t\t        \t\t\"drugOrder.patient.patientId\" + \" having count(distinct drugOrder.concept.conceptId) = \" + drugOrderCohortDefinition.getDrugSets().size());\n\t    \t} \n\t    \telse if (drugOrderCohortDefinition.getWhich() == Match.NONE) {\n\t\t    \tquery.whereNotInAny(\"drugOrder.concept\", drugOrderCohortDefinition.getDrugSets());\n\t    \t}\n\t    }\n\t\n\t    if (drugOrderCohortDefinition.getDrugConcepts() != null) {\n\t    \tif (drugOrderCohortDefinition.getWhich() == Match.ANY) {\n\t    \t\tquery.whereInAny(\"drugOrder.concept\", drugOrderCohortDefinition.getDrugConcepts().toArray());\n\t    \t} \n\t    \telse if (drugOrderCohortDefinition.getWhich() == Match.ALL) {\n\t    \t\tquery.whereIn(\"drugOrder.concept\", drugOrderCohortDefinition.getDrugConcepts());\n\t    \t\tquery.groupBy(\n\t    \t\t\t\t\"drugOrder.patient.patientId\" + \" having count(distinct drugOrder.concept.conceptId) = \" + drugOrderCohortDefinition.getDrugSets().size());\n\t    \t} \n\t    \telse if (drugOrderCohortDefinition.getWhich() == Match.NONE) {\n\t    \t\tquery.whereNotInAny(\"drugOrder.concept\", drugOrderCohortDefinition.getDrugConcepts());\n\t    \t}\n\t    }\n\t\n\t    if (drugOrderCohortDefinition.getDrugs() != null) {\n\t    \tif (drugOrderCohortDefinition.getWhich() == Match.ANY) {\n\t    \t\tquery.whereInAny(\"drugOrder.drug\", drugOrderCohortDefinition.getDrugs().toArray());\n\t    \t} \n\t    \telse if (drugOrderCohortDefinition.getWhich() == Match.ALL) {\n\t    \t\tquery.whereIn(\"drugOrder.drug\", drugOrderCohortDefinition.getDrugs());\n\t    \t\tquery.groupBy(\n\t    \t\t\t\t\"drugOrder.patient.patientId\" + \" having count(distinct drugOrder.drug.drugId) = \" + drugOrderCohortDefinition.getDrugs().size());\n\t    \t} \n\t    \telse if (drugOrderCohortDefinition.getWhich() == Match.NONE) {\n\t    \t\tquery.whereNotInAny(\"drugOrder.drug\", drugOrderCohortDefinition.getDrugs());\n\t    \t}\n\t    }\n\t \n    \tquery.whereLessOrEqualTo(\"drugOrder.dateActivated\", drugOrderCohortDefinition.getActivatedOnOrBefore());\n    \tquery.whereGreaterOrEqualTo(\"drugOrder.dateActivated\", drugOrderCohortDefinition.getActivatedOnOrAfter());\n    \tquery.whereEqual(\"drugOrder.careSetting\", drugOrderCohortDefinition.getCareSetting());\n    \t\n    \tif (drugOrderCohortDefinition.getActiveOnOrBefore() != null) {\n\t    \tquery.whereNotNull(\"drugOrder.dateActivated\").and()\n\t    \t\t .whereLessOrEqualTo(\"drugOrder.dateStopped\", drugOrderCohortDefinition.getActiveOnOrBefore())\n\t    \t\t .or()\n\t    \t\t .whereLessOrEqualTo(\"drugOrder.autoExpireDate\", drugOrderCohortDefinition.getActiveOnOrBefore());\n    \t}\n    \t\n    \tquery.whereNotNull(\"drugOrder.dateActivated\").and()\n    \t\t .whereGreaterEqualOrNull(\"drugOrder.dateStopped\", drugOrderCohortDefinition.getActiveOnOrAfter())\n    \t\t .and()\n    \t\t .whereGreaterEqualOrNull(\"drugOrder.autoExpireDate\", drugOrderCohortDefinition.getActiveOnOrAfter());\n    \t\t \n    \tquery.whereNotNull(\"drugOrder.dateActivated\").and()\n    \t\t .whereLessOrEqualTo(\"drugOrder.dateActivated\", drugOrderCohortDefinition.getActiveOnDate())    \t\t \n    \t\t .whereGreaterOrNull(\"drugOrder.dateStopped\", drugOrderCohortDefinition.getActiveOnDate())\n    \t\t .and()\n    \t\t .whereGreaterOrNull(\"drugOrder.autoExpireDate\", drugOrderCohortDefinition.getActiveOnDate());\n    \t\t \n\t    List<Integer> patientIds = evaluationService.evaluateToList(query, Integer.class, context);\n\t    Cohort cohort = new Cohort(patientIds);\n\t\n\t    return new EvaluatedCohort(cohort, drugOrderCohortDefinition, context);\n\t}", "signature": "EvaluatedCohort evaluate(CohortDefinition cohortDefinition, EvaluationContext context)", "full_signature": "public EvaluatedCohort evaluate(CohortDefinition cohortDefinition, EvaluationContext context)", "class_method_signature": "DrugOrderCohortDefinitionEvaluator.evaluate(CohortDefinition cohortDefinition, EvaluationContext context)", "testcase": false, "constructor": false, "invocations": ["nvl", "select", "from", "wherePatientIn", "getWhich", "setWhich", "getDrugSets", "getWhich", "whereInAny", "toArray", "getDrugSets", "getWhich", "whereIn", "getDrugSets", "groupBy", "size", "getDrugSets", "getWhich", "whereNotInAny", "getDrugSets", "getDrugConcepts", "getWhich", "whereInAny", "toArray", "getDrugConcepts", "getWhich", "whereIn", "getDrugConcepts", "groupBy", "size", "getDrugSets", "getWhich", "whereNotInAny", "getDrugConcepts", "getDrugs", "getWhich", "whereInAny", "toArray", "getDrugs", "getWhich", "whereIn", "getDrugs", "groupBy", "size", "getDrugs", "getWhich", "whereNotInAny", "getDrugs", "whereLessOrEqualTo", "getActivatedOnOrBefore", "whereGreaterOrEqualTo", "getActivatedOnOrAfter", "whereEqual", "getCareSetting", "getActiveOnOrBefore", "whereLessOrEqualTo", "or", "whereLessOrEqualTo", "and", "whereNotNull", "getActiveOnOrBefore", "getActiveOnOrBefore", "whereGreaterEqualOrNull", "and", "whereGreaterEqualOrNull", "and", "whereNotNull", "getActiveOnOrAfter", "getActiveOnOrAfter", "whereGreaterOrNull", "and", "whereGreaterOrNull", "whereLessOrEqualTo", "and", "whereNotNull", "getActiveOnDate", "getActiveOnDate", "getActiveOnDate", "evaluateToList"]}, "repository": {"repo_id": 4713588, "url": "https://github.com/openmrs/openmrs-module-reporting", "language": "Java", "is_fork": false, "fork_count": 206, "stargazer_count": 15, "size": 58709, "license": "licensed"}}