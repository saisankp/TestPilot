{"test_class": {"identifier": "StorageJetCacheTest", "superclass": "extends TestWithSpring", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(StorageJetCache.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(StorageJetCache.class)", "var_name": "logger"}, {"original_string": "@Autowired\n    IStorage<String, AccountEntity> iStorage;", "modifier": "@Autowired", "type": "IStorage<String, AccountEntity>", "declarator": "iStorage", "var_name": "iStorage"}, {"original_string": "@Autowired\n    private IStorage<Long, ContainerEntity> containerEntityIStorage;", "modifier": "@Autowired\n    private", "type": "IStorage<Long, ContainerEntity>", "declarator": "containerEntityIStorage", "var_name": "containerEntityIStorage"}, {"original_string": "@Test\n    void \u66f4\u65b0\u4e0d\u5b58\u5728\u7684\u5b9e\u4f53() {\n        ContainerEntity entity = new ContainerEntity().setRoleId(1000L);", "modifier": "@Test", "type": "void", "declarator": "entity = new ContainerEntity().setRoleId(1000L)", "var_name": "entity"}, {"original_string": "Container packContainer = new Container();", "modifier": "", "type": "Container", "declarator": "packContainer = new Container()", "var_name": "packContainer"}, {"original_string": "entity.getType2ContainerMap().put(ContainerType.PACK,packContainer);", "modifier": "", "type": "entity.getType2ContainerMap().put", "declarator": "PACK", "var_name": "PACK"}, {"original_string": "containerEntityIStorage.create(entity);", "modifier": "", "type": "containerEntityIStorage.create", "declarator": "entity", "var_name": "entity"}, {"original_string": "containerEntityIStorage.update(entity);", "modifier": "", "type": "containerEntityIStorage.update", "declarator": "entity", "var_name": "entity"}], "file": "virtualGameServer/src/test/java/com/mmorpg/mbdl/framework/storage/config/JetCache/StorageJetCacheTest.java"}, "test_case": {"identifier": "get", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void get() {\n        String account = \"createNotExsist\";\n        AccountEntity accountEntity = createNotExists();\n        Assertions.assertEquals(accountEntity,iStorage.get(account));\n    }", "signature": "void get()", "full_signature": "@Test void get()", "class_method_signature": "StorageJetCacheTest.get()", "testcase": true, "constructor": false, "invocations": ["createNotExists", "assertEquals", "get"]}, "focal_class": {"identifier": "StorageJetCache", "superclass": "extends SimpleJpaRepository<E,PK>", "interfaces": "implements IStorage<PK,E>", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(StorageJetCache.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(StorageJetCache.class)", "var_name": "logger"}, {"original_string": "private Cache<PK,E> cache;", "modifier": "private", "type": "Cache<PK,E>", "declarator": "cache", "var_name": "cache"}, {"original_string": "private int delay;", "modifier": "private", "type": "int", "declarator": "delay", "var_name": "delay"}, {"original_string": "private IStorage<PK,E> proxy;", "modifier": "private", "type": "IStorage<PK,E>", "declarator": "proxy", "var_name": "proxy"}, {"original_string": "private final EntityManager entityManager;", "modifier": "private final", "type": "EntityManager", "declarator": "entityManager", "var_name": "entityManager"}], "methods": [{"identifier": "StorageJetCache", "parameters": "(JpaEntityInformation<E, ?> entityInformation, EntityManager entityManager)", "modifiers": "public", "return": "", "signature": " StorageJetCache(JpaEntityInformation<E, ?> entityInformation, EntityManager entityManager)", "full_signature": "public  StorageJetCache(JpaEntityInformation<E, ?> entityInformation, EntityManager entityManager)", "class_method_signature": "StorageJetCache.StorageJetCache(JpaEntityInformation<E, ?> entityInformation, EntityManager entityManager)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(E entity)", "modifiers": "@Override @Transactional(rollbackFor = Exception.class) public", "return": "E", "signature": "E create(E entity)", "full_signature": "@Override @Transactional(rollbackFor = Exception.class) public E create(E entity)", "class_method_signature": "StorageJetCache.create(E entity)", "testcase": false, "constructor": false}, {"identifier": "doInsert", "parameters": "(E entity)", "modifiers": "private", "return": "E", "signature": "E doInsert(E entity)", "full_signature": "private E doInsert(E entity)", "class_method_signature": "StorageJetCache.doInsert(E entity)", "testcase": false, "constructor": false}, {"identifier": "doUpdate", "parameters": "(E entity)", "modifiers": "private", "return": "void", "signature": "void doUpdate(E entity)", "full_signature": "private void doUpdate(E entity)", "class_method_signature": "StorageJetCache.doUpdate(E entity)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(E entity)", "modifiers": "@Override @Transactional(rollbackFor = Exception.class) public", "return": "void", "signature": "void update(E entity)", "full_signature": "@Override @Transactional(rollbackFor = Exception.class) public void update(E entity)", "class_method_signature": "StorageJetCache.update(E entity)", "testcase": false, "constructor": false}, {"identifier": "executeUpdate", "parameters": "(E entity)", "modifiers": "private", "return": "void", "signature": "void executeUpdate(E entity)", "full_signature": "private void executeUpdate(E entity)", "class_method_signature": "StorageJetCache.executeUpdate(E entity)", "testcase": false, "constructor": false}, {"identifier": "mergeUpdate", "parameters": "(E entity)", "modifiers": "@Override public", "return": "void", "signature": "void mergeUpdate(E entity)", "full_signature": "@Override public void mergeUpdate(E entity)", "class_method_signature": "StorageJetCache.mergeUpdate(E entity)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(PK id)", "modifiers": "@Override public", "return": "E", "signature": "E get(PK id)", "full_signature": "@Override public E get(PK id)", "class_method_signature": "StorageJetCache.get(PK id)", "testcase": false, "constructor": false}, {"identifier": "getOrCreate", "parameters": "(PK id, EntityCreator<PK, E> entityCreator)", "modifiers": "@Override @Transactional(rollbackFor = Exception.class) public", "return": "E", "signature": "E getOrCreate(PK id, EntityCreator<PK, E> entityCreator)", "full_signature": "@Override @Transactional(rollbackFor = Exception.class) public E getOrCreate(PK id, EntityCreator<PK, E> entityCreator)", "class_method_signature": "StorageJetCache.getOrCreate(PK id, EntityCreator<PK, E> entityCreator)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(PK id)", "modifiers": "@Override @Transactional(rollbackFor = Exception.class) public", "return": "E", "signature": "E remove(PK id)", "full_signature": "@Override @Transactional(rollbackFor = Exception.class) public E remove(PK id)", "class_method_signature": "StorageJetCache.remove(PK id)", "testcase": false, "constructor": false}, {"identifier": "setDelay", "parameters": "(int delay)", "modifiers": "public", "return": "void", "signature": "void setDelay(int delay)", "full_signature": "public void setDelay(int delay)", "class_method_signature": "StorageJetCache.setDelay(int delay)", "testcase": false, "constructor": false}, {"identifier": "setProxy", "parameters": "(IStorage<PK, E> proxy)", "modifiers": "public", "return": "void", "signature": "void setProxy(IStorage<PK, E> proxy)", "full_signature": "public void setProxy(IStorage<PK, E> proxy)", "class_method_signature": "StorageJetCache.setProxy(IStorage<PK, E> proxy)", "testcase": false, "constructor": false}, {"identifier": "setCache", "parameters": "(Cache<PK, E> cache)", "modifiers": "public", "return": "void", "signature": "void setCache(Cache<PK, E> cache)", "full_signature": "public void setCache(Cache<PK, E> cache)", "class_method_signature": "StorageJetCache.setCache(Cache<PK, E> cache)", "testcase": false, "constructor": false}], "file": "virtualGameServer/src/main/java/com/mmorpg/mbdl/framework/storage/config/JetCache/StorageJetCache.java"}, "focal_method": {"identifier": "get", "parameters": "(PK id)", "modifiers": "@Override public", "return": "E", "body": "@Override\n    public E get(PK id) {\n        Preconditions.checkNotNull(id,\"id\u4e0d\u80fd\u4e3anull\");\n        CacheGetResult<E> cacheGetResult = cache.GET(id);\n        if (cacheGetResult.isSuccess()){\n            E entityFromCache = cacheGetResult.getValue();\n            return entityFromCache;\n        }else {\n            E entity = findOne(id);\n            // \u4e0d\u7ba1\u662fnull\u8fd8\u662f\u5b9e\u4f53\u90fd\u7f13\u5b58\u8d77\u6765\n            cache.put(id,entity);\n            return entity;\n        }\n    }", "signature": "E get(PK id)", "full_signature": "@Override public E get(PK id)", "class_method_signature": "StorageJetCache.get(PK id)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "GET", "isSuccess", "getValue", "findOne", "put"]}, "repository": {"repo_id": 150668624, "url": "https://github.com/sandogeek/VirtualMMORPGGame-hyc", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 1316, "license": "licensed"}}