{"test_class": {"identifier": "WakeOnLanInstallationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private WakeOnLanInstallation wakeOnLanInstallation;", "modifier": "private", "type": "WakeOnLanInstallation", "declarator": "wakeOnLanInstallation", "var_name": "wakeOnLanInstallation"}, {"original_string": "private String wakeOnLanProgramPath = \"/usr/bin/wakeonlan\";", "modifier": "private", "type": "String", "declarator": "wakeOnLanProgramPath = \"/usr/bin/wakeonlan\"", "var_name": "wakeOnLanProgramPath"}], "file": "wakeonlan-service/src/test/java/br/com/autonomiccs/wakeonlan/installation/WakeOnLanInstallationTest.java"}, "test_case": {"identifier": "installWakeOnLanTestIfNotInstalled", "parameters": "()", "modifiers": "@Test @PrepareForTest(WakeOnLanInstallation.class) public", "return": "void", "body": "@Test\n    @PrepareForTest(WakeOnLanInstallation.class)\n    public void installWakeOnLanTestIfNotInstalled() throws Exception {\n        prepareMockedFileThatRepresentsTheWakeOnLanCommand(false);\n\n        String command = \"aptitude -y install wakeonlan\";\n        final String returnOfInstallationCommand = \"return of command\";\n        Mockito.when(wakeOnLanInstallation.shellCommandUtils.executeCommand(command)).thenReturn(returnOfInstallationCommand);\n\n        wakeOnLanInstallation.installWakeOnLan();\n        InOrder inOrder = Mockito.inOrder(wakeOnLanInstallation.shellCommandUtils, wakeOnLanInstallation.logger);\n        inOrder.verify(wakeOnLanInstallation.logger).info(\"Checking if wakeonlan is installed.\");\n        inOrder.verify(wakeOnLanInstallation.logger).info(\"Wakeonlan is not installed.\");\n        inOrder.verify(wakeOnLanInstallation.logger).info(\"Installing wakeonlan.\");\n        inOrder.verify(wakeOnLanInstallation.shellCommandUtils).executeCommand(command);\n        inOrder.verify(wakeOnLanInstallation.logger).info(returnOfInstallationCommand);\n        inOrder.verify(wakeOnLanInstallation.logger).info(\"Installation finished.\");\n\n        Mockito.verify(wakeOnLanInstallation.logger, Mockito.times(0)).info(\"Wakeonlan is already installed.\");\n    }", "signature": "void installWakeOnLanTestIfNotInstalled()", "full_signature": "@Test @PrepareForTest(WakeOnLanInstallation.class) public void installWakeOnLanTestIfNotInstalled()", "class_method_signature": "WakeOnLanInstallationTest.installWakeOnLanTestIfNotInstalled()", "testcase": true, "constructor": false, "invocations": ["prepareMockedFileThatRepresentsTheWakeOnLanCommand", "thenReturn", "when", "executeCommand", "installWakeOnLan", "inOrder", "info", "verify", "info", "verify", "info", "verify", "executeCommand", "verify", "info", "verify", "info", "verify", "info", "verify", "times"]}, "focal_class": {"identifier": "WakeOnLanInstallation", "superclass": "", "interfaces": "implements InitializingBean", "fields": [{"original_string": "protected Logger logger = LoggerFactory.getLogger(this.getClass());", "modifier": "protected", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(this.getClass())", "var_name": "logger"}, {"original_string": "@Autowired\n    protected ShellCommandUtils shellCommandUtils;", "modifier": "@Autowired\n    protected", "type": "ShellCommandUtils", "declarator": "shellCommandUtils", "var_name": "shellCommandUtils"}, {"original_string": "private final String wakeOnLanCommand = \"/usr/bin/wakeonlan\";", "modifier": "private final", "type": "String", "declarator": "wakeOnLanCommand = \"/usr/bin/wakeonlan\"", "var_name": "wakeOnLanCommand"}, {"original_string": "private final String aptitudeInstallWakeOnLan = \"aptitude -y install wakeonlan\";", "modifier": "private final", "type": "String", "declarator": "aptitudeInstallWakeOnLan = \"aptitude -y install wakeonlan\"", "var_name": "aptitudeInstallWakeOnLan"}], "methods": [{"identifier": "installWakeOnLan", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void installWakeOnLan()", "full_signature": "protected void installWakeOnLan()", "class_method_signature": "WakeOnLanInstallation.installWakeOnLan()", "testcase": false, "constructor": false}, {"identifier": "afterPropertiesSet", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void afterPropertiesSet()", "full_signature": "@Override public void afterPropertiesSet()", "class_method_signature": "WakeOnLanInstallation.afterPropertiesSet()", "testcase": false, "constructor": false}], "file": "wakeonlan-service/src/main/java/br/com/autonomiccs/wakeonlan/installation/WakeOnLanInstallation.java"}, "focal_method": {"identifier": "installWakeOnLan", "parameters": "()", "modifiers": "protected", "return": "void", "body": "protected void installWakeOnLan() {\n        logger.info(\"Checking if wakeonlan is installed.\");\n        File file = new File(wakeOnLanCommand);\n        boolean isWakeOnLanInstalled = file.exists();\n        if (isWakeOnLanInstalled) {\n            logger.info(\"Wakeonlan is already installed.\");\n            return;\n        }\n        logger.info(\"Wakeonlan is not installed.\");\n        logger.info(\"Installing wakeonlan.\");\n        String logInstallation = shellCommandUtils.executeCommand(String.format(\"%s\", aptitudeInstallWakeOnLan));\n        logger.info(logInstallation);\n        logger.info(\"Installation finished.\");\n    }", "signature": "void installWakeOnLan()", "full_signature": "protected void installWakeOnLan()", "class_method_signature": "WakeOnLanInstallation.installWakeOnLan()", "testcase": false, "constructor": false, "invocations": ["info", "exists", "info", "info", "info", "executeCommand", "format", "info", "info"]}, "repository": {"repo_id": 56359101, "url": "https://github.com/Autonomiccs/autonomiccs-platform", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 944, "license": "licensed"}}