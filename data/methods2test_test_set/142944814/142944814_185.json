{"test_class": {"identifier": "CryptoUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/util/src/test/java/hera/util/CryptoUtilsTest.java"}, "test_case": {"identifier": "testEncryptToAes256Gcm", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testEncryptToAes256Gcm() throws Exception {\n    final Random random = new Random();\n    for (int i = 0; i < 100; ++i) {\n      byte[] message = randomUUID().toString().getBytes();\n      byte[] nonce = Arrays.copyOfRange(randomUUID().toString().getBytes(), 0, 14);\n      byte[] password = new byte[32];\n      random.nextBytes(password);\n      assertNotNull(CryptoUtils.encryptToAesGcm(message, password, nonce));\n    }\n  }", "signature": "void testEncryptToAes256Gcm()", "full_signature": "@Test public void testEncryptToAes256Gcm()", "class_method_signature": "CryptoUtilsTest.testEncryptToAes256Gcm()", "testcase": true, "constructor": false, "invocations": ["getBytes", "toString", "randomUUID", "copyOfRange", "getBytes", "toString", "randomUUID", "nextBytes", "assertNotNull", "encryptToAesGcm"]}, "focal_class": {"identifier": "CryptoUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String CIPHER_CHARSET = \"UTF-8\";", "modifier": "public static final", "type": "String", "declarator": "CIPHER_CHARSET = \"UTF-8\"", "var_name": "CIPHER_CHARSET"}, {"original_string": "public static final String CIPHER_NAME = \"AES/ECB/PKCS5Padding\";", "modifier": "public static final", "type": "String", "declarator": "CIPHER_NAME = \"AES/ECB/PKCS5Padding\"", "var_name": "CIPHER_NAME"}, {"original_string": "protected static final String DEFAULT_PASSWORD = \"tn595hil2n9kolh9\";", "modifier": "protected static final", "type": "String", "declarator": "DEFAULT_PASSWORD = \"tn595hil2n9kolh9\"", "var_name": "DEFAULT_PASSWORD"}, {"original_string": "protected static SecureRandom random;", "modifier": "protected static", "type": "SecureRandom", "declarator": "random", "var_name": "random"}, {"original_string": "protected static MessageDigest sha;", "modifier": "protected static", "type": "MessageDigest", "declarator": "sha", "var_name": "sha"}, {"original_string": "protected static MessageDigest md5;", "modifier": "protected static", "type": "MessageDigest", "declarator": "md5", "var_name": "md5"}, {"original_string": "protected static SecretKeySpec keySpec;", "modifier": "protected static", "type": "SecretKeySpec", "declarator": "keySpec", "var_name": "keySpec"}], "methods": [{"identifier": "createSecret", "parameters": "(final byte[] password, final int length)", "modifiers": "public static", "return": "SecretKeySpec", "signature": "SecretKeySpec createSecret(final byte[] password, final int length)", "full_signature": "public static SecretKeySpec createSecret(final byte[] password, final int length)", "class_method_signature": "CryptoUtils.createSecret(final byte[] password, final int length)", "testcase": false, "constructor": false}, {"identifier": "encryptToAes128EcbWithBase64", "parameters": "(final String source)", "modifiers": "public static", "return": "String", "signature": "String encryptToAes128EcbWithBase64(final String source)", "full_signature": "public static String encryptToAes128EcbWithBase64(final String source)", "class_method_signature": "CryptoUtils.encryptToAes128EcbWithBase64(final String source)", "testcase": false, "constructor": false}, {"identifier": "encryptToAes128EcbWithBase64", "parameters": "(final String source, final String password)", "modifiers": "public static", "return": "String", "signature": "String encryptToAes128EcbWithBase64(final String source, final String password)", "full_signature": "public static String encryptToAes128EcbWithBase64(final String source, final String password)", "class_method_signature": "CryptoUtils.encryptToAes128EcbWithBase64(final String source, final String password)", "testcase": false, "constructor": false}, {"identifier": "encryptToAes128EcbWithBase64", "parameters": "(final byte[] message,\n      final SecretKeySpec secretKeySpec)", "modifiers": "public static", "return": "String", "signature": "String encryptToAes128EcbWithBase64(final byte[] message,\n      final SecretKeySpec secretKeySpec)", "full_signature": "public static String encryptToAes128EcbWithBase64(final byte[] message,\n      final SecretKeySpec secretKeySpec)", "class_method_signature": "CryptoUtils.encryptToAes128EcbWithBase64(final byte[] message,\n      final SecretKeySpec secretKeySpec)", "testcase": false, "constructor": false}, {"identifier": "encryptToAesGcm", "parameters": "(final byte[] message, final byte[] password,\n      final byte[] nonce)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] encryptToAesGcm(final byte[] message, final byte[] password,\n      final byte[] nonce)", "full_signature": "public static byte[] encryptToAesGcm(final byte[] message, final byte[] password,\n      final byte[] nonce)", "class_method_signature": "CryptoUtils.encryptToAesGcm(final byte[] message, final byte[] password,\n      final byte[] nonce)", "testcase": false, "constructor": false}, {"identifier": "decryptFromAes128EcbWithBase64", "parameters": "(final String source)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] decryptFromAes128EcbWithBase64(final String source)", "full_signature": "public static byte[] decryptFromAes128EcbWithBase64(final String source)", "class_method_signature": "CryptoUtils.decryptFromAes128EcbWithBase64(final String source)", "testcase": false, "constructor": false}, {"identifier": "decryptFromAes128EcbWithBase64", "parameters": "(final String source, final String password)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] decryptFromAes128EcbWithBase64(final String source, final String password)", "full_signature": "public static byte[] decryptFromAes128EcbWithBase64(final String source, final String password)", "class_method_signature": "CryptoUtils.decryptFromAes128EcbWithBase64(final String source, final String password)", "testcase": false, "constructor": false}, {"identifier": "decryptFromAes128EcbWithBase64", "parameters": "(final String source,\n      final SecretKeySpec secretKeySpec)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] decryptFromAes128EcbWithBase64(final String source,\n      final SecretKeySpec secretKeySpec)", "full_signature": "public static byte[] decryptFromAes128EcbWithBase64(final String source,\n      final SecretKeySpec secretKeySpec)", "class_method_signature": "CryptoUtils.decryptFromAes128EcbWithBase64(final String source,\n      final SecretKeySpec secretKeySpec)", "testcase": false, "constructor": false}, {"identifier": "decryptFromAesGcm", "parameters": "(final byte[] source, final byte[] password,\n      final byte[] nonce)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] decryptFromAesGcm(final byte[] source, final byte[] password,\n      final byte[] nonce)", "full_signature": "public static byte[] decryptFromAesGcm(final byte[] source, final byte[] password,\n      final byte[] nonce)", "class_method_signature": "CryptoUtils.decryptFromAesGcm(final byte[] source, final byte[] password,\n      final byte[] nonce)", "testcase": false, "constructor": false}], "file": "core/util/src/main/java/hera/util/CryptoUtils.java"}, "focal_method": {"identifier": "encryptToAesGcm", "parameters": "(final byte[] message, final byte[] password,\n      final byte[] nonce)", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] encryptToAesGcm(final byte[] message, final byte[] password,\n      final byte[] nonce) throws IllegalStateException, InvalidCipherTextException {\n    final GCMBlockCipher cipher = new GCMBlockCipher(new AESEngine());\n    CipherParameters ivAndKey = new ParametersWithIV(new KeyParameter(password), nonce);\n    cipher.init(true, ivAndKey);\n    final byte[] outBuf = new byte[cipher.getOutputSize(message.length)];\n    int outOff = cipher.processBytes(message, 0, message.length, outBuf, 0);\n    cipher.doFinal(outBuf, outOff);\n    return outBuf;\n  }", "signature": "byte[] encryptToAesGcm(final byte[] message, final byte[] password,\n      final byte[] nonce)", "full_signature": "public static byte[] encryptToAesGcm(final byte[] message, final byte[] password,\n      final byte[] nonce)", "class_method_signature": "CryptoUtils.encryptToAesGcm(final byte[] message, final byte[] password,\n      final byte[] nonce)", "testcase": false, "constructor": false, "invocations": ["init", "getOutputSize", "processBytes", "doFinal"]}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}