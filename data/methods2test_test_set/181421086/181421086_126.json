{"test_class": {"identifier": "BSNTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected byte[] probePkt = {\n\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // src mac\n\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x04, // dst mac\n\t\t(byte) 0x89, 0x42, // BSN type\n        0x20, 0x00, 0x06, 0x04, 0x00, 0x01, 0x00, 0x00, // BSN header\n\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // controller id\n\t\t0x00, 0x00, 0x00, 0x03, // sequence id\n\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // src mac\n\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x04, // dst mac\n\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, // switch dpid\n\t\t0x00, 0x00, 0x00, 0x01 // port number\n    };", "modifier": "protected", "type": "byte[]", "declarator": "probePkt = {\n\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // src mac\n\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x04, // dst mac\n\t\t(byte) 0x89, 0x42, // BSN type\n        0x20, 0x00, 0x06, 0x04, 0x00, 0x01, 0x00, 0x00, // BSN header\n\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // controller id\n\t\t0x00, 0x00, 0x00, 0x03, // sequence id\n\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // src mac\n\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x04, // dst mac\n\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, // switch dpid\n\t\t0x00, 0x00, 0x00, 0x01 // port number\n    }", "var_name": "probePkt"}], "file": "src/agents/apps/floodlight/floodlight-1.2/src/test/java/net/floodlightcontroller/packet/BSNTest.java"}, "test_case": {"identifier": "testDeserialize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDeserialize() throws Exception {\n        Ethernet pkt = (Ethernet) new Ethernet().deserialize(probePkt, 0, probePkt.length);\n        byte[] pktarr = pkt.serialize();\n        assertTrue(Arrays.equals(probePkt, pktarr));\n\n        Ethernet expected = getProbePacket();\n        assertEquals(expected, pkt);\n    }", "signature": "void testDeserialize()", "full_signature": "@Test public void testDeserialize()", "class_method_signature": "BSNTest.testDeserialize()", "testcase": true, "constructor": false, "invocations": ["deserialize", "serialize", "assertTrue", "equals", "getProbePacket", "assertEquals"]}, "focal_class": {"identifier": "BSN", "superclass": "extends BasePacket", "interfaces": "", "fields": [{"original_string": "public static final int BSN_MAGIC = 0x20000604;", "modifier": "public static final", "type": "int", "declarator": "BSN_MAGIC = 0x20000604", "var_name": "BSN_MAGIC"}, {"original_string": "public static final short BSN_VERSION_CURRENT = 0x0;", "modifier": "public static final", "type": "short", "declarator": "BSN_VERSION_CURRENT = 0x0", "var_name": "BSN_VERSION_CURRENT"}, {"original_string": "public static final short BSN_TYPE_PROBE = 0x1;", "modifier": "public static final", "type": "short", "declarator": "BSN_TYPE_PROBE = 0x1", "var_name": "BSN_TYPE_PROBE"}, {"original_string": "public static final short BSN_TYPE_BDDP  = 0x2;", "modifier": "public static final", "type": "short", "declarator": "BSN_TYPE_BDDP  = 0x2", "var_name": "BSN_TYPE_BDDP"}, {"original_string": "public static Map<Short, Class<? extends IPacket>> typeClassMap;", "modifier": "public static", "type": "Map<Short, Class<? extends IPacket>>", "declarator": "typeClassMap", "var_name": "typeClassMap"}, {"original_string": "protected short type;", "modifier": "protected", "type": "short", "declarator": "type", "var_name": "type"}, {"original_string": "protected short version;", "modifier": "protected", "type": "short", "declarator": "version", "var_name": "version"}], "methods": [{"identifier": "BSN", "parameters": "()", "modifiers": "public", "return": "", "signature": " BSN()", "full_signature": "public  BSN()", "class_method_signature": "BSN.BSN()", "testcase": false, "constructor": true}, {"identifier": "BSN", "parameters": "(short type)", "modifiers": "public", "return": "", "signature": " BSN(short type)", "full_signature": "public  BSN(short type)", "class_method_signature": "BSN.BSN(short type)", "testcase": false, "constructor": true}, {"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "short", "signature": "short getType()", "full_signature": "public short getType()", "class_method_signature": "BSN.getType()", "testcase": false, "constructor": false}, {"identifier": "setType", "parameters": "(short type)", "modifiers": "public", "return": "BSN", "signature": "BSN setType(short type)", "full_signature": "public BSN setType(short type)", "class_method_signature": "BSN.setType(short type)", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "public", "return": "short", "signature": "short getVersion()", "full_signature": "public short getVersion()", "class_method_signature": "BSN.getVersion()", "testcase": false, "constructor": false}, {"identifier": "setVersion", "parameters": "(short version)", "modifiers": "public", "return": "BSN", "signature": "BSN setVersion(short version)", "full_signature": "public BSN setVersion(short version)", "class_method_signature": "BSN.setVersion(short version)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "()", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] serialize()", "full_signature": "@Override public byte[] serialize()", "class_method_signature": "BSN.serialize()", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(byte[] data, int offset, int length)", "modifiers": "@Override public", "return": "IPacket", "signature": "IPacket deserialize(byte[] data, int offset, int length)", "full_signature": "@Override public IPacket deserialize(byte[] data, int offset, int length)", "class_method_signature": "BSN.deserialize(byte[] data, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "BSN.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "BSN.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "BSN.toString()", "testcase": false, "constructor": false}], "file": "src/agents/apps/floodlight/floodlight-1.2/src/main/java/net/floodlightcontroller/packet/BSN.java"}, "focal_method": {"identifier": "deserialize", "parameters": "(byte[] data, int offset, int length)", "modifiers": "@Override public", "return": "IPacket", "body": "@Override\n    public IPacket deserialize(byte[] data, int offset, int length)\n            throws PacketParsingException {\n        ByteBuffer bb = ByteBuffer.wrap(data, offset, length);\n\n        int magic = bb.getInt();\n        if (magic != BSN_MAGIC) {\n            throw new PacketParsingException(\"Invalid BSN magic \" + magic);\n        }\n\n        this.type = bb.getShort();\n        this.version = bb.getShort();\n        if (this.version != BSN_VERSION_CURRENT) {\n            throw new PacketParsingException(\n                    \"Invalid BSN packet version \" + this.version + \", should be \"\n                    + BSN_VERSION_CURRENT);\n        }\n\n        IPacket payload;\n        if (typeClassMap.containsKey(this.type)) {\n            Class<? extends IPacket> clazz = typeClassMap.get(this.type);\n            try {\n                payload = clazz.newInstance();\n            } catch (Exception e) {\n                throw new RuntimeException(\"Error parsing payload for BSN packet\" + e);\n            }\n        } else {\n            payload = new Data();\n        }\n\n        this.payload = payload.deserialize(data, bb.position(), bb.limit() - bb.position());\n        this.payload.setParent(this);\n\n        return this;\n    }", "signature": "IPacket deserialize(byte[] data, int offset, int length)", "full_signature": "@Override public IPacket deserialize(byte[] data, int offset, int length)", "class_method_signature": "BSN.deserialize(byte[] data, int offset, int length)", "testcase": false, "constructor": false, "invocations": ["wrap", "getInt", "getShort", "getShort", "containsKey", "get", "newInstance", "deserialize", "position", "limit", "position", "setParent"]}, "repository": {"repo_id": 181421086, "url": "https://github.com/seungsoo-lee/DELTA", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 35, "size": 99244, "license": "licensed"}}