{"test_class": {"identifier": "TableDDLTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static TableName dropTable;", "modifier": "private static", "type": "TableName", "declarator": "dropTable", "var_name": "dropTable"}, {"original_string": "private static final String    DEFAULT_SCHEMA = \"test\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_SCHEMA = \"test\"", "var_name": "DEFAULT_SCHEMA"}, {"original_string": "private static final String    DEFAULT_TABLE  = \"t1\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_TABLE  = \"t1\"", "var_name": "DEFAULT_TABLE"}, {"original_string": "private static final String    JOIN_TABLE = \"t2\";", "modifier": "private static final", "type": "String", "declarator": "JOIN_TABLE = \"t2\"", "var_name": "JOIN_TABLE"}, {"original_string": "private static final String    JOIN_NAME = \"test/t1/c1/test/test.t2/c2\";", "modifier": "private static final", "type": "String", "declarator": "JOIN_NAME = \"test/t1/c1/test/test.t2/c2\"", "var_name": "JOIN_NAME"}, {"original_string": "protected SQLParser parser;", "modifier": "protected", "type": "SQLParser", "declarator": "parser", "var_name": "parser"}, {"original_string": "private DDLFunctionsMock ddlFunctions;", "modifier": "private", "type": "DDLFunctionsMock", "declarator": "ddlFunctions", "var_name": "ddlFunctions"}, {"original_string": "private TypesRegistry typesRegistry;", "modifier": "private", "type": "TypesRegistry", "declarator": "typesRegistry", "var_name": "typesRegistry"}, {"original_string": "private TestAISBuilder builder;", "modifier": "private", "type": "TestAISBuilder", "declarator": "builder", "var_name": "builder"}], "file": "fdb-sql-layer-core/src/test/java/com/foundationdb/sql/aisddl/TableDDLTest.java"}, "test_case": {"identifier": "joinToUnknown", "parameters": "()", "modifiers": "@Test(expected=JoinToUnknownTableException.class) public", "return": "void", "body": "@Test(expected=JoinToUnknownTableException.class)\n    public void joinToUnknown() throws StandardException {\n        String sql = \"CREATE TABLE t(id1 INT PRIMARY KEY, xid INT, GROUPING FOREIGN KEY(xid) REFERENCES x(id))\";\n        StatementNode stmt = parser.parseStatement(sql);\n        TableDDL.createTable(ddlFunctions, null, DEFAULT_SCHEMA, (CreateTableNode)stmt, null);\n    }", "signature": "void joinToUnknown()", "full_signature": "@Test(expected=JoinToUnknownTableException.class) public void joinToUnknown()", "class_method_signature": "TableDDLTest.joinToUnknown()", "testcase": true, "constructor": false, "invocations": ["parseStatement", "createTable"]}, "focal_class": {"identifier": "TableDDL", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(TableDDL.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(TableDDL.class)", "var_name": "logger"}], "methods": [{"identifier": "TableDDL", "parameters": "()", "modifiers": "private", "return": "", "signature": " TableDDL()", "full_signature": "private  TableDDL()", "class_method_signature": "TableDDL.TableDDL()", "testcase": false, "constructor": true}, {"identifier": "dropTable", "parameters": "(DDLFunctions ddlFunctions,\n                                  Session session, \n                                  String defaultSchemaName,\n                                  DropTableNode dropTable,\n                                  QueryContext context)", "modifiers": "public static", "return": "void", "signature": "void dropTable(DDLFunctions ddlFunctions,\n                                  Session session, \n                                  String defaultSchemaName,\n                                  DropTableNode dropTable,\n                                  QueryContext context)", "full_signature": "public static void dropTable(DDLFunctions ddlFunctions,\n                                  Session session, \n                                  String defaultSchemaName,\n                                  DropTableNode dropTable,\n                                  QueryContext context)", "class_method_signature": "TableDDL.dropTable(DDLFunctions ddlFunctions,\n                                  Session session, \n                                  String defaultSchemaName,\n                                  DropTableNode dropTable,\n                                  QueryContext context)", "testcase": false, "constructor": false}, {"identifier": "dropGroup", "parameters": "(DDLFunctions ddlFunctions,\n                                    Session session,\n                                    String defaultSchemaName,\n                                    DropGroupNode dropGroup,\n                                    QueryContext context)", "modifiers": "public static", "return": "void", "signature": "void dropGroup(DDLFunctions ddlFunctions,\n                                    Session session,\n                                    String defaultSchemaName,\n                                    DropGroupNode dropGroup,\n                                    QueryContext context)", "full_signature": "public static void dropGroup(DDLFunctions ddlFunctions,\n                                    Session session,\n                                    String defaultSchemaName,\n                                    DropGroupNode dropGroup,\n                                    QueryContext context)", "class_method_signature": "TableDDL.dropGroup(DDLFunctions ddlFunctions,\n                                    Session session,\n                                    String defaultSchemaName,\n                                    DropGroupNode dropGroup,\n                                    QueryContext context)", "testcase": false, "constructor": false}, {"identifier": "checkForeignKeyDropTable", "parameters": "(Table table)", "modifiers": "private static", "return": "void", "signature": "void checkForeignKeyDropTable(Table table)", "full_signature": "private static void checkForeignKeyDropTable(Table table)", "class_method_signature": "TableDDL.checkForeignKeyDropTable(Table table)", "testcase": false, "constructor": false}, {"identifier": "renameTable", "parameters": "(DDLFunctions ddlFunctions,\n                                    Session session,\n                                    String defaultSchemaName,\n                                    RenameNode renameTable)", "modifiers": "public static", "return": "void", "signature": "void renameTable(DDLFunctions ddlFunctions,\n                                    Session session,\n                                    String defaultSchemaName,\n                                    RenameNode renameTable)", "full_signature": "public static void renameTable(DDLFunctions ddlFunctions,\n                                    Session session,\n                                    String defaultSchemaName,\n                                    RenameNode renameTable)", "class_method_signature": "TableDDL.renameTable(DDLFunctions ddlFunctions,\n                                    Session session,\n                                    String defaultSchemaName,\n                                    RenameNode renameTable)", "testcase": false, "constructor": false}, {"identifier": "createTable", "parameters": "(DDLFunctions ddlFunctions,\n                                   Session session,\n                                   String defaultSchemaName,\n                                   CreateTableNode createTable,\n                                   QueryContext context)", "modifiers": "public static", "return": "void", "signature": "void createTable(DDLFunctions ddlFunctions,\n                                   Session session,\n                                   String defaultSchemaName,\n                                   CreateTableNode createTable,\n                                   QueryContext context)", "full_signature": "public static void createTable(DDLFunctions ddlFunctions,\n                                   Session session,\n                                   String defaultSchemaName,\n                                   CreateTableNode createTable,\n                                   QueryContext context)", "class_method_signature": "TableDDL.createTable(DDLFunctions ddlFunctions,\n                                   Session session,\n                                   String defaultSchemaName,\n                                   CreateTableNode createTable,\n                                   QueryContext context)", "testcase": false, "constructor": false}, {"identifier": "createTable", "parameters": "(DDLFunctions ddlFunctions,\n                                   Session session,\n                                   String defaultSchemaName,\n                                   CreateTableNode createTable,\n                                   QueryContext context,\n                                   List<DataTypeDescriptor>  descriptors,\n                                   List<String> columnNames,\n                                   ServerSession server)", "modifiers": "public static", "return": "void", "signature": "void createTable(DDLFunctions ddlFunctions,\n                                   Session session,\n                                   String defaultSchemaName,\n                                   CreateTableNode createTable,\n                                   QueryContext context,\n                                   List<DataTypeDescriptor>  descriptors,\n                                   List<String> columnNames,\n                                   ServerSession server)", "full_signature": "public static void createTable(DDLFunctions ddlFunctions,\n                                   Session session,\n                                   String defaultSchemaName,\n                                   CreateTableNode createTable,\n                                   QueryContext context,\n                                   List<DataTypeDescriptor>  descriptors,\n                                   List<String> columnNames,\n                                   ServerSession server)", "class_method_signature": "TableDDL.createTable(DDLFunctions ddlFunctions,\n                                   Session session,\n                                   String defaultSchemaName,\n                                   CreateTableNode createTable,\n                                   QueryContext context,\n                                   List<DataTypeDescriptor>  descriptors,\n                                   List<String> columnNames,\n                                   ServerSession server)", "testcase": false, "constructor": false}, {"identifier": "cloneReferencedTables", "parameters": "(String defaultSchema,\n                                      AISCloner cloner,\n                                      AkibanInformationSchema curAIS,\n                                      final AkibanInformationSchema targetAIS,\n                                      TableElementList nodes)", "modifiers": "static", "return": "void", "signature": "void cloneReferencedTables(String defaultSchema,\n                                      AISCloner cloner,\n                                      AkibanInformationSchema curAIS,\n                                      final AkibanInformationSchema targetAIS,\n                                      TableElementList nodes)", "full_signature": "static void cloneReferencedTables(String defaultSchema,\n                                      AISCloner cloner,\n                                      AkibanInformationSchema curAIS,\n                                      final AkibanInformationSchema targetAIS,\n                                      TableElementList nodes)", "class_method_signature": "TableDDL.cloneReferencedTables(String defaultSchema,\n                                      AISCloner cloner,\n                                      AkibanInformationSchema curAIS,\n                                      final AkibanInformationSchema targetAIS,\n                                      TableElementList nodes)", "testcase": false, "constructor": false}, {"identifier": "setTableStorage", "parameters": "(DDLFunctions ddlFunctions, CreateTableNode createTable,\n                                        AISBuilder builder, String tableName, Table table, String schemaName)", "modifiers": "private static", "return": "void", "signature": "void setTableStorage(DDLFunctions ddlFunctions, CreateTableNode createTable,\n                                        AISBuilder builder, String tableName, Table table, String schemaName)", "full_signature": "private static void setTableStorage(DDLFunctions ddlFunctions, CreateTableNode createTable,\n                                        AISBuilder builder, String tableName, Table table, String schemaName)", "class_method_signature": "TableDDL.setTableStorage(DDLFunctions ddlFunctions, CreateTableNode createTable,\n                                        AISBuilder builder, String tableName, Table table, String schemaName)", "testcase": false, "constructor": false}, {"identifier": "setGroup", "parameters": "(Table table, AISBuilder builder, String tableName, String schemaName)", "modifiers": "static", "return": "void", "signature": "void setGroup(Table table, AISBuilder builder, String tableName, String schemaName)", "full_signature": "static void setGroup(Table table, AISBuilder builder, String tableName, String schemaName)", "class_method_signature": "TableDDL.setGroup(Table table, AISBuilder builder, String tableName, String schemaName)", "testcase": false, "constructor": false}, {"identifier": "setStorage", "parameters": "(DDLFunctions ddlFunctions,\n                                  HasStorage object, \n                                  StorageFormatNode storage)", "modifiers": "public static", "return": "void", "signature": "void setStorage(DDLFunctions ddlFunctions,\n                                  HasStorage object, \n                                  StorageFormatNode storage)", "full_signature": "public static void setStorage(DDLFunctions ddlFunctions,\n                                  HasStorage object, \n                                  StorageFormatNode storage)", "class_method_signature": "TableDDL.setStorage(DDLFunctions ddlFunctions,\n                                  HasStorage object, \n                                  StorageFormatNode storage)", "testcase": false, "constructor": false}, {"identifier": "addColumn", "parameters": "(final AISBuilder builder, final TypesTranslator typesTranslator, final ColumnDefinitionNode cdn,\n                           final String schemaName, final String tableName, int colpos)", "modifiers": "static", "return": "void", "signature": "void addColumn(final AISBuilder builder, final TypesTranslator typesTranslator, final ColumnDefinitionNode cdn,\n                           final String schemaName, final String tableName, int colpos)", "full_signature": "static void addColumn(final AISBuilder builder, final TypesTranslator typesTranslator, final ColumnDefinitionNode cdn,\n                           final String schemaName, final String tableName, int colpos)", "class_method_signature": "TableDDL.addColumn(final AISBuilder builder, final TypesTranslator typesTranslator, final ColumnDefinitionNode cdn,\n                           final String schemaName, final String tableName, int colpos)", "testcase": false, "constructor": false}, {"identifier": "addColumn", "parameters": "(final AISBuilder builder, final String schemaName,\n                           final String tableName, int colpos, final String columnName,\n                           final TypesTranslator typesTranslator, final DataTypeDescriptor d)", "modifiers": "static", "return": "void", "signature": "void addColumn(final AISBuilder builder, final String schemaName,\n                           final String tableName, int colpos, final String columnName,\n                           final TypesTranslator typesTranslator, final DataTypeDescriptor d)", "full_signature": "static void addColumn(final AISBuilder builder, final String schemaName,\n                           final String tableName, int colpos, final String columnName,\n                           final TypesTranslator typesTranslator, final DataTypeDescriptor d)", "class_method_signature": "TableDDL.addColumn(final AISBuilder builder, final String schemaName,\n                           final String tableName, int colpos, final String columnName,\n                           final TypesTranslator typesTranslator, final DataTypeDescriptor d)", "testcase": false, "constructor": false}, {"identifier": "setAutoIncrement", "parameters": "(AISBuilder builder, String schema, String table, ColumnDefinitionNode cdn)", "modifiers": "public static", "return": "void", "signature": "void setAutoIncrement(AISBuilder builder, String schema, String table, ColumnDefinitionNode cdn)", "full_signature": "public static void setAutoIncrement(AISBuilder builder, String schema, String table, ColumnDefinitionNode cdn)", "class_method_signature": "TableDDL.setAutoIncrement(AISBuilder builder, String schema, String table, ColumnDefinitionNode cdn)", "testcase": false, "constructor": false}, {"identifier": "setAutoIncrement", "parameters": "(AISBuilder builder, String schemaName, String tableName, String columnName,\n                                        boolean defaultIdentity, long start, long increment)", "modifiers": "public static", "return": "void", "signature": "void setAutoIncrement(AISBuilder builder, String schemaName, String tableName, String columnName,\n                                        boolean defaultIdentity, long start, long increment)", "full_signature": "public static void setAutoIncrement(AISBuilder builder, String schemaName, String tableName, String columnName,\n                                        boolean defaultIdentity, long start, long increment)", "class_method_signature": "TableDDL.setAutoIncrement(AISBuilder builder, String schemaName, String tableName, String columnName,\n                                        boolean defaultIdentity, long start, long increment)", "testcase": false, "constructor": false}, {"identifier": "getColumnDefault", "parameters": "(ColumnDefinitionNode cdn, \n                                     String schemaName, String tableName)", "modifiers": "static", "return": "String[]", "signature": "String[] getColumnDefault(ColumnDefinitionNode cdn, \n                                     String schemaName, String tableName)", "full_signature": "static String[] getColumnDefault(ColumnDefinitionNode cdn, \n                                     String schemaName, String tableName)", "class_method_signature": "TableDDL.getColumnDefault(ColumnDefinitionNode cdn, \n                                     String schemaName, String tableName)", "testcase": false, "constructor": false}, {"identifier": "addColumn", "parameters": "(final AISBuilder builder, final TypesTranslator typesTranslator,\n                          final String schemaName, final String tableName, final String columnName,\n                          int colpos, DataTypeDescriptor sqlType,\n                          final String defaultValue, final String defaultFunction)", "modifiers": "static", "return": "void", "signature": "void addColumn(final AISBuilder builder, final TypesTranslator typesTranslator,\n                          final String schemaName, final String tableName, final String columnName,\n                          int colpos, DataTypeDescriptor sqlType,\n                          final String defaultValue, final String defaultFunction)", "full_signature": "static void addColumn(final AISBuilder builder, final TypesTranslator typesTranslator,\n                          final String schemaName, final String tableName, final String columnName,\n                          int colpos, DataTypeDescriptor sqlType,\n                          final String defaultValue, final String defaultFunction)", "class_method_signature": "TableDDL.addColumn(final AISBuilder builder, final TypesTranslator typesTranslator,\n                          final String schemaName, final String tableName, final String columnName,\n                          int colpos, DataTypeDescriptor sqlType,\n                          final String defaultValue, final String defaultFunction)", "testcase": false, "constructor": false}, {"identifier": "addIndex", "parameters": "(IndexNameGenerator namer, AISBuilder builder, ConstraintDefinitionNode cdn,\n                                  String schemaName, String tableName, QueryContext context)", "modifiers": "public static", "return": "String", "signature": "String addIndex(IndexNameGenerator namer, AISBuilder builder, ConstraintDefinitionNode cdn,\n                                  String schemaName, String tableName, QueryContext context)", "full_signature": "public static String addIndex(IndexNameGenerator namer, AISBuilder builder, ConstraintDefinitionNode cdn,\n                                  String schemaName, String tableName, QueryContext context)", "class_method_signature": "TableDDL.addIndex(IndexNameGenerator namer, AISBuilder builder, ConstraintDefinitionNode cdn,\n                                  String schemaName, String tableName, QueryContext context)", "testcase": false, "constructor": false}, {"identifier": "addIndex", "parameters": "(IndexNameGenerator namer,\n                                  AISBuilder builder,\n                                  IndexDefinitionNode idn,\n                                  String schemaName,\n                                  String tableName,\n                                  QueryContext context,\n                                  DDLFunctions ddl)", "modifiers": "public static", "return": "String", "signature": "String addIndex(IndexNameGenerator namer,\n                                  AISBuilder builder,\n                                  IndexDefinitionNode idn,\n                                  String schemaName,\n                                  String tableName,\n                                  QueryContext context,\n                                  DDLFunctions ddl)", "full_signature": "public static String addIndex(IndexNameGenerator namer,\n                                  AISBuilder builder,\n                                  IndexDefinitionNode idn,\n                                  String schemaName,\n                                  String tableName,\n                                  QueryContext context,\n                                  DDLFunctions ddl)", "class_method_signature": "TableDDL.addIndex(IndexNameGenerator namer,\n                                  AISBuilder builder,\n                                  IndexDefinitionNode idn,\n                                  String schemaName,\n                                  String tableName,\n                                  QueryContext context,\n                                  DDLFunctions ddl)", "testcase": false, "constructor": false}, {"identifier": "getReferencedName", "parameters": "(String schemaName, FKConstraintDefinitionNode fkdn)", "modifiers": "public static", "return": "TableName", "signature": "TableName getReferencedName(String schemaName, FKConstraintDefinitionNode fkdn)", "full_signature": "public static TableName getReferencedName(String schemaName, FKConstraintDefinitionNode fkdn)", "class_method_signature": "TableDDL.getReferencedName(String schemaName, FKConstraintDefinitionNode fkdn)", "testcase": false, "constructor": false}, {"identifier": "addJoin", "parameters": "(final AISBuilder builder, final FKConstraintDefinitionNode fkdn,\n                               final String defaultSchemaName, final String schemaName, final String tableName)", "modifiers": "public static", "return": "void", "signature": "void addJoin(final AISBuilder builder, final FKConstraintDefinitionNode fkdn,\n                               final String defaultSchemaName, final String schemaName, final String tableName)", "full_signature": "public static void addJoin(final AISBuilder builder, final FKConstraintDefinitionNode fkdn,\n                               final String defaultSchemaName, final String schemaName, final String tableName)", "class_method_signature": "TableDDL.addJoin(final AISBuilder builder, final FKConstraintDefinitionNode fkdn,\n                               final String defaultSchemaName, final String schemaName, final String tableName)", "testcase": false, "constructor": false}, {"identifier": "columnNamesFromListOrPK", "parameters": "(ResultColumnList list, PrimaryKey pk)", "modifiers": "private static", "return": "String[]", "signature": "String[] columnNamesFromListOrPK(ResultColumnList list, PrimaryKey pk)", "full_signature": "private static String[] columnNamesFromListOrPK(ResultColumnList list, PrimaryKey pk)", "class_method_signature": "TableDDL.columnNamesFromListOrPK(ResultColumnList list, PrimaryKey pk)", "testcase": false, "constructor": false}, {"identifier": "generateTableIndex", "parameters": "(IndexNameGenerator namer,\n            AISBuilder builder,\n            IndexDefinition id,\n            String indexName,\n            Table table,\n            QueryContext context,\n            DDLFunctions ddl\n            )", "modifiers": "private static", "return": "String", "signature": "String generateTableIndex(IndexNameGenerator namer,\n            AISBuilder builder,\n            IndexDefinition id,\n            String indexName,\n            Table table,\n            QueryContext context,\n            DDLFunctions ddl\n            )", "full_signature": "private static String generateTableIndex(IndexNameGenerator namer,\n            AISBuilder builder,\n            IndexDefinition id,\n            String indexName,\n            Table table,\n            QueryContext context,\n            DDLFunctions ddl\n            )", "class_method_signature": "TableDDL.generateTableIndex(IndexNameGenerator namer,\n            AISBuilder builder,\n            IndexDefinition id,\n            String indexName,\n            Table table,\n            QueryContext context,\n            DDLFunctions ddl\n            )", "testcase": false, "constructor": false}, {"identifier": "addForeignKey", "parameters": "(AISBuilder builder,\n                                        AkibanInformationSchema sourceAIS,\n                                        FKConstraintDefinitionNode fkdn,\n                                        String defaultSchemaName,\n                                        String referencingSchemaName,\n                                        String referencingTableName)", "modifiers": "protected static", "return": "void", "signature": "void addForeignKey(AISBuilder builder,\n                                        AkibanInformationSchema sourceAIS,\n                                        FKConstraintDefinitionNode fkdn,\n                                        String defaultSchemaName,\n                                        String referencingSchemaName,\n                                        String referencingTableName)", "full_signature": "protected static void addForeignKey(AISBuilder builder,\n                                        AkibanInformationSchema sourceAIS,\n                                        FKConstraintDefinitionNode fkdn,\n                                        String defaultSchemaName,\n                                        String referencingSchemaName,\n                                        String referencingTableName)", "class_method_signature": "TableDDL.addForeignKey(AISBuilder builder,\n                                        AkibanInformationSchema sourceAIS,\n                                        FKConstraintDefinitionNode fkdn,\n                                        String defaultSchemaName,\n                                        String referencingSchemaName,\n                                        String referencingTableName)", "testcase": false, "constructor": false}, {"identifier": "convertReferentialAction", "parameters": "(int action)", "modifiers": "private static", "return": "ForeignKey.Action", "signature": "ForeignKey.Action convertReferentialAction(int action)", "full_signature": "private static ForeignKey.Action convertReferentialAction(int action)", "class_method_signature": "TableDDL.convertReferentialAction(int action)", "testcase": false, "constructor": false}], "file": "fdb-sql-layer-core/src/main/java/com/foundationdb/sql/aisddl/TableDDL.java"}, "focal_method": {"identifier": "createTable", "parameters": "(DDLFunctions ddlFunctions,\n                                   Session session,\n                                   String defaultSchemaName,\n                                   CreateTableNode createTable,\n                                   QueryContext context)", "modifiers": "public static", "return": "void", "body": "public static void createTable(DDLFunctions ddlFunctions,\n                                   Session session,\n                                   String defaultSchemaName,\n                                   CreateTableNode createTable,\n                                   QueryContext context) {\n        if (createTable.getQueryExpression() != null)\n            throw new UnsupportedCreateSelectException();\n\n        TableName fullName = convertName(defaultSchemaName, createTable.getObjectName());\n        String schemaName = fullName.getSchemaName();\n        String tableName = fullName.getTableName();\n        AkibanInformationSchema ais = ddlFunctions.getAIS(session);\n\n        Table curTable = ais.getTable(fullName);\n        if((curTable != null) &&\n           skipOrThrow(context, createTable.getExistenceCheck(), curTable, new DuplicateTableNameException(fullName))) {\n            return;\n        }\n\n        TypesTranslator typesTranslator = ddlFunctions.getTypesTranslator();\n        AISBuilder builder = new AISBuilder();\n        builder.getNameGenerator().mergeAIS(ais);\n        builder.table(schemaName, tableName);\n        Table table = builder.akibanInformationSchema().getTable(schemaName, tableName);\n        IndexNameGenerator namer = DefaultIndexNameGenerator.forTable(table);\n\n        cloneReferencedTables(defaultSchemaName,\n                              ddlFunctions.getAISCloner(),\n                              ais,\n                              builder.akibanInformationSchema(),\n                              createTable.getTableElementList());\n\n        // First pass: Columns.\n        int colpos = 0;\n        for (TableElementNode tableElement : createTable.getTableElementList()) {\n            if (tableElement instanceof ColumnDefinitionNode) {\n                addColumn (builder, typesTranslator,\n                           (ColumnDefinitionNode)tableElement, schemaName, tableName, colpos++);\n            }\n        }\n\n        // Second pass: GROUPING, PRIMARY, UNIQUE and INDEX.\n        // Requires the columns to have already been created.\n        for (TableElementNode tableElement : createTable.getTableElementList()) {\n            if (tableElement instanceof FKConstraintDefinitionNode) {\n                FKConstraintDefinitionNode fkdn = (FKConstraintDefinitionNode)tableElement;\n                if (fkdn.isGrouping()) {\n                    addJoin (builder, fkdn, defaultSchemaName, schemaName, tableName);\n                }\n                // else: regular FK, done in third pass below\n            }\n            else if (tableElement instanceof ConstraintDefinitionNode) {\n                addIndex (namer, builder, (ConstraintDefinitionNode)tableElement, schemaName, tableName, context);\n            } else if (tableElement instanceof IndexDefinitionNode) {\n                addIndex (namer, builder, (IndexDefinitionNode)tableElement, schemaName, tableName, context, ddlFunctions);\n            } else if (!(tableElement instanceof ColumnDefinitionNode)) {\n                throw new UnsupportedSQLException(\"Unexpected TableElement\", tableElement);\n            }\n        }\n\n        // Third pass: FOREIGN KEY.\n        // Separate pass as to not create extraneous indexes, if possible.\n        for (TableElementNode tableElement : createTable.getTableElementList()) {\n            if (tableElement instanceof FKConstraintDefinitionNode) {\n                FKConstraintDefinitionNode fkdn = (FKConstraintDefinitionNode)tableElement;\n                if (!fkdn.isGrouping()) {\n                    addForeignKey(builder, ddlFunctions.getAIS(session), fkdn, defaultSchemaName, schemaName, tableName);\n                }\n            }\n        }\n\n        setTableStorage(ddlFunctions, createTable, builder, tableName, table, schemaName);\n        builder.basicSchemaIsComplete();\n        builder.groupingIsComplete();\n        ddlFunctions.createTable(session, table);\n    }", "signature": "void createTable(DDLFunctions ddlFunctions,\n                                   Session session,\n                                   String defaultSchemaName,\n                                   CreateTableNode createTable,\n                                   QueryContext context)", "full_signature": "public static void createTable(DDLFunctions ddlFunctions,\n                                   Session session,\n                                   String defaultSchemaName,\n                                   CreateTableNode createTable,\n                                   QueryContext context)", "class_method_signature": "TableDDL.createTable(DDLFunctions ddlFunctions,\n                                   Session session,\n                                   String defaultSchemaName,\n                                   CreateTableNode createTable,\n                                   QueryContext context)", "testcase": false, "constructor": false, "invocations": ["getQueryExpression", "convertName", "getObjectName", "getSchemaName", "getTableName", "getAIS", "getTable", "skipOrThrow", "getExistenceCheck", "getTypesTranslator", "mergeAIS", "getNameGenerator", "table", "getTable", "akibanInformationSchema", "forTable", "cloneReferencedTables", "getAISCloner", "akibanInformationSchema", "getTableElementList", "getTableElementList", "addColumn", "getTableElementList", "isGrouping", "addJoin", "addIndex", "addIndex", "getTableElementList", "isGrouping", "addForeignKey", "getAIS", "setTableStorage", "basicSchemaIsComplete", "groupingIsComplete", "createTable"]}, "repository": {"repo_id": 32884360, "url": "https://github.com/jaytaylor/sql-layer", "language": "Java", "is_fork": false, "fork_count": 120, "stargazer_count": 77, "size": 138665, "license": "licensed"}}