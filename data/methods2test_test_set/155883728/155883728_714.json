{"test_class": {"identifier": "OakMachineTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final File testOutDir = new File(\"target/test-out/OakMachineTest\");", "modifier": "final", "type": "File", "declarator": "testOutDir = new File(\"target/test-out/OakMachineTest\")", "var_name": "testOutDir"}], "file": "core/src/test/java/net/adamcin/oakpal/core/OakMachineTest.java"}, "test_case": {"identifier": "testScanOnListenerExceptionFromIdentifySubpackage_silencedTho", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testScanOnListenerExceptionFromIdentifySubpackage_silencedTho() throws Exception {\n        final File testPackage = TestPackageUtil.prepareTestPackage(\"subsubtest.zip\");\n        final ProgressCheck check = mock(ProgressCheck.class, withSettings().lenient());\n        final ErrorListener errorListener = mock(ErrorListener.class, withSettings().lenient());\n        doThrow(RuntimeException.class).when(check).identifySubpackage(\n                any(PackageId.class),\n                any(PackageId.class)\n        );\n        final CompletableFuture<Exception> eLatch = new CompletableFuture<>();\n        final CompletableFuture<ProgressCheck> handlerLatch = new CompletableFuture<>();\n        final CompletableFuture<PackageId> idLatch = new CompletableFuture<>();\n        doAnswer(call -> {\n            eLatch.complete(call.getArgument(0, Exception.class));\n            handlerLatch.complete(call.getArgument(1, ProgressCheck.class));\n            idLatch.complete(call.getArgument(2, PackageId.class));\n            return true;\n        }).when(errorListener).onListenerException(any(Exception.class), any(ProgressCheck.class), any(PackageId.class));\n        builder().withProgressCheck(check).withErrorListener(errorListener)\n                .withSubpackageSilencer(((subpackageId, parentId) -> true)).build().scanPackage(testPackage);\n        assertFalse(\"error is not thrown\", eLatch.isDone());\n    }", "signature": "void testScanOnListenerExceptionFromIdentifySubpackage_silencedTho()", "full_signature": "@Test public void testScanOnListenerExceptionFromIdentifySubpackage_silencedTho()", "class_method_signature": "OakMachineTest.testScanOnListenerExceptionFromIdentifySubpackage_silencedTho()", "testcase": true, "constructor": false, "invocations": ["prepareTestPackage", "mock", "lenient", "withSettings", "mock", "lenient", "withSettings", "identifySubpackage", "when", "doThrow", "any", "any", "onListenerException", "when", "doAnswer", "complete", "getArgument", "complete", "getArgument", "complete", "getArgument", "any", "any", "any", "scanPackage", "build", "withSubpackageSilencer", "withErrorListener", "withProgressCheck", "builder", "assertFalse", "isDone"]}, "focal_class": {"identifier": "OakMachine", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String NS_URI_OAKPAL = \"oakpaltmp\";", "modifier": "public static final", "type": "String", "declarator": "NS_URI_OAKPAL = \"oakpaltmp\"", "var_name": "NS_URI_OAKPAL"}, {"original_string": "public static final String NS_PREFIX_OAKPAL = \"oakpaltmp\";", "modifier": "public static final", "type": "String", "declarator": "NS_PREFIX_OAKPAL = \"oakpaltmp\"", "var_name": "NS_PREFIX_OAKPAL"}, {"original_string": "public static final String LN_UNDECLARED = \"Undeclared\";", "modifier": "public static final", "type": "String", "declarator": "LN_UNDECLARED = \"Undeclared\"", "var_name": "LN_UNDECLARED"}, {"original_string": "public static final String NT_UNDECLARED = \"{\" + NS_URI_OAKPAL + \"}\" + LN_UNDECLARED;", "modifier": "public static final", "type": "String", "declarator": "NT_UNDECLARED = \"{\" + NS_URI_OAKPAL + \"}\" + LN_UNDECLARED", "var_name": "NT_UNDECLARED"}, {"original_string": "private final Packaging packagingService;", "modifier": "private final", "type": "Packaging", "declarator": "packagingService", "var_name": "packagingService"}, {"original_string": "private final List<ProgressCheck> progressChecks;", "modifier": "private final", "type": "List<ProgressCheck>", "declarator": "progressChecks", "var_name": "progressChecks"}, {"original_string": "private final ErrorListener errorListener;", "modifier": "private final", "type": "ErrorListener", "declarator": "errorListener", "var_name": "errorListener"}, {"original_string": "private final List<URL> preInstallUrls;", "modifier": "private final", "type": "List<URL>", "declarator": "preInstallUrls", "var_name": "preInstallUrls"}, {"original_string": "private final List<InitStage> initStages;", "modifier": "private final", "type": "List<InitStage>", "declarator": "initStages", "var_name": "initStages"}, {"original_string": "private final JcrCustomizer jcrCustomizer;", "modifier": "private final", "type": "JcrCustomizer", "declarator": "jcrCustomizer", "var_name": "jcrCustomizer"}, {"original_string": "private final InstallHookProcessorFactory installHookProcessorFactory;", "modifier": "private final", "type": "InstallHookProcessorFactory", "declarator": "installHookProcessorFactory", "var_name": "installHookProcessorFactory"}, {"original_string": "private final ClassLoader installHookClassLoader;", "modifier": "private final", "type": "ClassLoader", "declarator": "installHookClassLoader", "var_name": "installHookClassLoader"}, {"original_string": "private final boolean enablePreInstallHooks;", "modifier": "private final", "type": "boolean", "declarator": "enablePreInstallHooks", "var_name": "enablePreInstallHooks"}, {"original_string": "private final InstallHookPolicy scanInstallHookPolicy;", "modifier": "private final", "type": "InstallHookPolicy", "declarator": "scanInstallHookPolicy", "var_name": "scanInstallHookPolicy"}, {"original_string": "private final Supplier<NodeStore> nodeStoreSupplier;", "modifier": "private final", "type": "Supplier<NodeStore>", "declarator": "nodeStoreSupplier", "var_name": "nodeStoreSupplier"}, {"original_string": "private final SubpackageSilencer subpackageSilencer;", "modifier": "private final", "type": "SubpackageSilencer", "declarator": "subpackageSilencer", "var_name": "subpackageSilencer"}, {"original_string": "private final RepoInitProcessor repoInitProcessor;", "modifier": "private final", "type": "RepoInitProcessor", "declarator": "repoInitProcessor", "var_name": "repoInitProcessor"}, {"original_string": "private final SlingSimulatorBackend slingSimulator;", "modifier": "private final", "type": "SlingSimulatorBackend", "declarator": "slingSimulator", "var_name": "slingSimulator"}, {"original_string": "private final Set<String> runModes;", "modifier": "private final", "type": "Set<String>", "declarator": "runModes", "var_name": "runModes"}], "methods": [{"identifier": "OakMachine", "parameters": "(final Packaging packagingService,\n                       final List<ProgressCheck> progressChecks,\n                       final ErrorListener errorListener,\n                       final List<URL> preInstallUrls,\n                       final List<InitStage> initStages,\n                       final JcrCustomizer jcrCustomizer,\n                       final InstallHookProcessorFactory installHookProcessorFactory,\n                       final ClassLoader installHookClassLoader,\n                       final boolean enablePreInstallHooks,\n                       final InstallHookPolicy scanInstallHookPolicy,\n                       final Supplier<NodeStore> nodeStoreSupplier,\n                       final SubpackageSilencer subpackageSilencer,\n                       final RepoInitProcessor repoInitProcessor,\n                       final SlingSimulatorBackend slingSimulator,\n                       final Set<String> runModes)", "modifiers": "private", "return": "", "signature": " OakMachine(final Packaging packagingService,\n                       final List<ProgressCheck> progressChecks,\n                       final ErrorListener errorListener,\n                       final List<URL> preInstallUrls,\n                       final List<InitStage> initStages,\n                       final JcrCustomizer jcrCustomizer,\n                       final InstallHookProcessorFactory installHookProcessorFactory,\n                       final ClassLoader installHookClassLoader,\n                       final boolean enablePreInstallHooks,\n                       final InstallHookPolicy scanInstallHookPolicy,\n                       final Supplier<NodeStore> nodeStoreSupplier,\n                       final SubpackageSilencer subpackageSilencer,\n                       final RepoInitProcessor repoInitProcessor,\n                       final SlingSimulatorBackend slingSimulator,\n                       final Set<String> runModes)", "full_signature": "private  OakMachine(final Packaging packagingService,\n                       final List<ProgressCheck> progressChecks,\n                       final ErrorListener errorListener,\n                       final List<URL> preInstallUrls,\n                       final List<InitStage> initStages,\n                       final JcrCustomizer jcrCustomizer,\n                       final InstallHookProcessorFactory installHookProcessorFactory,\n                       final ClassLoader installHookClassLoader,\n                       final boolean enablePreInstallHooks,\n                       final InstallHookPolicy scanInstallHookPolicy,\n                       final Supplier<NodeStore> nodeStoreSupplier,\n                       final SubpackageSilencer subpackageSilencer,\n                       final RepoInitProcessor repoInitProcessor,\n                       final SlingSimulatorBackend slingSimulator,\n                       final Set<String> runModes)", "class_method_signature": "OakMachine.OakMachine(final Packaging packagingService,\n                       final List<ProgressCheck> progressChecks,\n                       final ErrorListener errorListener,\n                       final List<URL> preInstallUrls,\n                       final List<InitStage> initStages,\n                       final JcrCustomizer jcrCustomizer,\n                       final InstallHookProcessorFactory installHookProcessorFactory,\n                       final ClassLoader installHookClassLoader,\n                       final boolean enablePreInstallHooks,\n                       final InstallHookPolicy scanInstallHookPolicy,\n                       final Supplier<NodeStore> nodeStoreSupplier,\n                       final SubpackageSilencer subpackageSilencer,\n                       final RepoInitProcessor repoInitProcessor,\n                       final SlingSimulatorBackend slingSimulator,\n                       final Set<String> runModes)", "testcase": false, "constructor": true}, {"identifier": "getProgressChecks", "parameters": "()", "modifiers": "public", "return": "List<ProgressCheck>", "signature": "List<ProgressCheck> getProgressChecks()", "full_signature": "public List<ProgressCheck> getProgressChecks()", "class_method_signature": "OakMachine.getProgressChecks()", "testcase": false, "constructor": false}, {"identifier": "getErrorListener", "parameters": "()", "modifiers": "public", "return": "ErrorListener", "signature": "ErrorListener getErrorListener()", "full_signature": "public ErrorListener getErrorListener()", "class_method_signature": "OakMachine.getErrorListener()", "testcase": false, "constructor": false}, {"identifier": "getPreInstallFiles", "parameters": "()", "modifiers": "@Deprecated public", "return": "List<File>", "signature": "List<File> getPreInstallFiles()", "full_signature": "@Deprecated public List<File> getPreInstallFiles()", "class_method_signature": "OakMachine.getPreInstallFiles()", "testcase": false, "constructor": false}, {"identifier": "getPreInstallUrls", "parameters": "()", "modifiers": "public", "return": "List<URL>", "signature": "List<URL> getPreInstallUrls()", "full_signature": "public List<URL> getPreInstallUrls()", "class_method_signature": "OakMachine.getPreInstallUrls()", "testcase": false, "constructor": false}, {"identifier": "initAndInspect", "parameters": "(final InspectBody<E> inspectBody)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public", "return": "void", "signature": "void initAndInspect(final InspectBody<E> inspectBody)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public void initAndInspect(final InspectBody<E> inspectBody)", "class_method_signature": "OakMachine.initAndInspect(final InspectBody<E> inspectBody)", "testcase": false, "constructor": false}, {"identifier": "adminInitAndInspect", "parameters": "(final InspectBody<E> inspectBody)", "modifiers": "public", "return": "void", "signature": "void adminInitAndInspect(final InspectBody<E> inspectBody)", "full_signature": "public void adminInitAndInspect(final InspectBody<E> inspectBody)", "class_method_signature": "OakMachine.adminInitAndInspect(final InspectBody<E> inspectBody)", "testcase": false, "constructor": false}, {"identifier": "initSlingSimulator", "parameters": "(final Session admin, final JcrPackageManager manager, final ErrorListener errorListener)", "modifiers": "", "return": "void", "signature": "void initSlingSimulator(final Session admin, final JcrPackageManager manager, final ErrorListener errorListener)", "full_signature": " void initSlingSimulator(final Session admin, final JcrPackageManager manager, final ErrorListener errorListener)", "class_method_signature": "OakMachine.initSlingSimulator(final Session admin, final JcrPackageManager manager, final ErrorListener errorListener)", "testcase": false, "constructor": false}, {"identifier": "scanPackage", "parameters": "(final @NotNull File... file)", "modifiers": "public", "return": "List<CheckReport>", "signature": "List<CheckReport> scanPackage(final @NotNull File... file)", "full_signature": "public List<CheckReport> scanPackage(final @NotNull File... file)", "class_method_signature": "OakMachine.scanPackage(final @NotNull File... file)", "testcase": false, "constructor": false}, {"identifier": "scanPackages", "parameters": "(final List<File> files)", "modifiers": "public", "return": "List<CheckReport>", "signature": "List<CheckReport> scanPackages(final List<File> files)", "full_signature": "public List<CheckReport> scanPackages(final List<File> files)", "class_method_signature": "OakMachine.scanPackages(final List<File> files)", "testcase": false, "constructor": false}, {"identifier": "addOakpalTypes", "parameters": "(final Session admin)", "modifiers": "private", "return": "void", "signature": "void addOakpalTypes(final Session admin)", "full_signature": "private void addOakpalTypes(final Session admin)", "class_method_signature": "OakMachine.addOakpalTypes(final Session admin)", "testcase": false, "constructor": false}, {"identifier": "processPackage", "parameters": "(Session admin, JcrPackageManager manager, JcrPackage jcrPackage, final boolean preInstall)", "modifiers": "private", "return": "void", "signature": "void processPackage(Session admin, JcrPackageManager manager, JcrPackage jcrPackage, final boolean preInstall)", "full_signature": "private void processPackage(Session admin, JcrPackageManager manager, JcrPackage jcrPackage, final boolean preInstall)", "class_method_signature": "OakMachine.processPackage(Session admin, JcrPackageManager manager, JcrPackage jcrPackage, final boolean preInstall)", "testcase": false, "constructor": false}, {"identifier": "preprocessInstallableSubpackages", "parameters": "(final JcrPackageManager manager,\n                                                     final PackageId parentPackageId,\n                                                     final SubPackageHandling subPackageHandling,\n                                                     final List<PackageId> subpacks)", "modifiers": "", "return": "List<PackageId>", "signature": "List<PackageId> preprocessInstallableSubpackages(final JcrPackageManager manager,\n                                                     final PackageId parentPackageId,\n                                                     final SubPackageHandling subPackageHandling,\n                                                     final List<PackageId> subpacks)", "full_signature": " List<PackageId> preprocessInstallableSubpackages(final JcrPackageManager manager,\n                                                     final PackageId parentPackageId,\n                                                     final SubPackageHandling subPackageHandling,\n                                                     final List<PackageId> subpacks)", "class_method_signature": "OakMachine.preprocessInstallableSubpackages(final JcrPackageManager manager,\n                                                     final PackageId parentPackageId,\n                                                     final SubPackageHandling subPackageHandling,\n                                                     final List<PackageId> subpacks)", "testcase": false, "constructor": false}, {"identifier": "newProgressCheckEventConsumer", "parameters": "(final boolean silenced,\n                                  final @NotNull Fun.ThrowingConsumer<ProgressCheck> checkVisitor,\n                                  final @NotNull BiConsumer<ProgressCheck, Exception> onError)", "modifiers": "static", "return": "Consumer<ProgressCheck>", "signature": "Consumer<ProgressCheck> newProgressCheckEventConsumer(final boolean silenced,\n                                  final @NotNull Fun.ThrowingConsumer<ProgressCheck> checkVisitor,\n                                  final @NotNull BiConsumer<ProgressCheck, Exception> onError)", "full_signature": "static Consumer<ProgressCheck> newProgressCheckEventConsumer(final boolean silenced,\n                                  final @NotNull Fun.ThrowingConsumer<ProgressCheck> checkVisitor,\n                                  final @NotNull BiConsumer<ProgressCheck, Exception> onError)", "class_method_signature": "OakMachine.newProgressCheckEventConsumer(final boolean silenced,\n                                  final @NotNull Fun.ThrowingConsumer<ProgressCheck> checkVisitor,\n                                  final @NotNull BiConsumer<ProgressCheck, Exception> onError)", "testcase": false, "constructor": false}, {"identifier": "propagateCheckPackageEvent", "parameters": "(final boolean silenced,\n                                          final @NotNull PackageId packageId,\n                                          final @NotNull Fun.ThrowingConsumer<ProgressCheck> checkVisitor)", "modifiers": "final", "return": "void", "signature": "void propagateCheckPackageEvent(final boolean silenced,\n                                          final @NotNull PackageId packageId,\n                                          final @NotNull Fun.ThrowingConsumer<ProgressCheck> checkVisitor)", "full_signature": "final void propagateCheckPackageEvent(final boolean silenced,\n                                          final @NotNull PackageId packageId,\n                                          final @NotNull Fun.ThrowingConsumer<ProgressCheck> checkVisitor)", "class_method_signature": "OakMachine.propagateCheckPackageEvent(final boolean silenced,\n                                          final @NotNull PackageId packageId,\n                                          final @NotNull Fun.ThrowingConsumer<ProgressCheck> checkVisitor)", "testcase": false, "constructor": false}, {"identifier": "propagateCheckPathEvent", "parameters": "(final boolean silenced,\n                                       final @NotNull PackageId packageId,\n                                       final @NotNull String path,\n                                       final @NotNull Fun.ThrowingConsumer<ProgressCheck> checkVisitor)", "modifiers": "final", "return": "void", "signature": "void propagateCheckPathEvent(final boolean silenced,\n                                       final @NotNull PackageId packageId,\n                                       final @NotNull String path,\n                                       final @NotNull Fun.ThrowingConsumer<ProgressCheck> checkVisitor)", "full_signature": "final void propagateCheckPathEvent(final boolean silenced,\n                                       final @NotNull PackageId packageId,\n                                       final @NotNull String path,\n                                       final @NotNull Fun.ThrowingConsumer<ProgressCheck> checkVisitor)", "class_method_signature": "OakMachine.propagateCheckPathEvent(final boolean silenced,\n                                       final @NotNull PackageId packageId,\n                                       final @NotNull String path,\n                                       final @NotNull Fun.ThrowingConsumer<ProgressCheck> checkVisitor)", "testcase": false, "constructor": false}, {"identifier": "internalProcessSubpackage", "parameters": "(final @NotNull Session admin,\n                                         final @NotNull JcrPackageManager manager,\n                                         final @NotNull PackageId packageId,\n                                         final boolean preInstall,\n                                         final @NotNull Fun.ThrowingSupplier<JcrPackage> jcrPackageSupplier,\n                                         final @NotNull Fun.ThrowingConsumer<ProgressCheck> identifyEvent,\n                                         final @NotNull Consumer<Exception> onError)", "modifiers": "final", "return": "void", "signature": "void internalProcessSubpackage(final @NotNull Session admin,\n                                         final @NotNull JcrPackageManager manager,\n                                         final @NotNull PackageId packageId,\n                                         final boolean preInstall,\n                                         final @NotNull Fun.ThrowingSupplier<JcrPackage> jcrPackageSupplier,\n                                         final @NotNull Fun.ThrowingConsumer<ProgressCheck> identifyEvent,\n                                         final @NotNull Consumer<Exception> onError)", "full_signature": "final void internalProcessSubpackage(final @NotNull Session admin,\n                                         final @NotNull JcrPackageManager manager,\n                                         final @NotNull PackageId packageId,\n                                         final boolean preInstall,\n                                         final @NotNull Fun.ThrowingSupplier<JcrPackage> jcrPackageSupplier,\n                                         final @NotNull Fun.ThrowingConsumer<ProgressCheck> identifyEvent,\n                                         final @NotNull Consumer<Exception> onError)", "class_method_signature": "OakMachine.internalProcessSubpackage(final @NotNull Session admin,\n                                         final @NotNull JcrPackageManager manager,\n                                         final @NotNull PackageId packageId,\n                                         final boolean preInstall,\n                                         final @NotNull Fun.ThrowingSupplier<JcrPackage> jcrPackageSupplier,\n                                         final @NotNull Fun.ThrowingConsumer<ProgressCheck> identifyEvent,\n                                         final @NotNull Consumer<Exception> onError)", "testcase": false, "constructor": false}, {"identifier": "processSubpackage", "parameters": "(final @NotNull Session admin,\n                                 final @NotNull JcrPackageManager manager,\n                                 final @NotNull PackageId packageId,\n                                 final @NotNull PackageId parentId,\n                                 final boolean preInstall)", "modifiers": "final", "return": "void", "signature": "void processSubpackage(final @NotNull Session admin,\n                                 final @NotNull JcrPackageManager manager,\n                                 final @NotNull PackageId packageId,\n                                 final @NotNull PackageId parentId,\n                                 final boolean preInstall)", "full_signature": "final void processSubpackage(final @NotNull Session admin,\n                                 final @NotNull JcrPackageManager manager,\n                                 final @NotNull PackageId packageId,\n                                 final @NotNull PackageId parentId,\n                                 final boolean preInstall)", "class_method_signature": "OakMachine.processSubpackage(final @NotNull Session admin,\n                                 final @NotNull JcrPackageManager manager,\n                                 final @NotNull PackageId packageId,\n                                 final @NotNull PackageId parentId,\n                                 final boolean preInstall)", "testcase": false, "constructor": false}, {"identifier": "processEmbeddedPackage", "parameters": "(final @NotNull Session admin,\n                                      final @NotNull JcrPackageManager manager,\n                                      final @NotNull EmbeddedPackageInstallable installable,\n                                      final boolean preInstall)", "modifiers": "final", "return": "void", "signature": "void processEmbeddedPackage(final @NotNull Session admin,\n                                      final @NotNull JcrPackageManager manager,\n                                      final @NotNull EmbeddedPackageInstallable installable,\n                                      final boolean preInstall)", "full_signature": "final void processEmbeddedPackage(final @NotNull Session admin,\n                                      final @NotNull JcrPackageManager manager,\n                                      final @NotNull EmbeddedPackageInstallable installable,\n                                      final boolean preInstall)", "class_method_signature": "OakMachine.processEmbeddedPackage(final @NotNull Session admin,\n                                      final @NotNull JcrPackageManager manager,\n                                      final @NotNull EmbeddedPackageInstallable installable,\n                                      final boolean preInstall)", "testcase": false, "constructor": false}, {"identifier": "processUploadedPackage", "parameters": "(final @NotNull Session admin,\n                                        final @NotNull JcrPackageManager manager,\n                                        final boolean preInstall,\n                                        final @NotNull JcrPackage jcrPackage)", "modifiers": "private", "return": "void", "signature": "void processUploadedPackage(final @NotNull Session admin,\n                                        final @NotNull JcrPackageManager manager,\n                                        final boolean preInstall,\n                                        final @NotNull JcrPackage jcrPackage)", "full_signature": "private void processUploadedPackage(final @NotNull Session admin,\n                                        final @NotNull JcrPackageManager manager,\n                                        final boolean preInstall,\n                                        final @NotNull JcrPackage jcrPackage)", "class_method_signature": "OakMachine.processUploadedPackage(final @NotNull Session admin,\n                                        final @NotNull JcrPackageManager manager,\n                                        final boolean preInstall,\n                                        final @NotNull JcrPackage jcrPackage)", "testcase": false, "constructor": false}, {"identifier": "processInstallableQueue", "parameters": "(final @NotNull Session admin,\n                                 final @NotNull JcrPackageManager manager,\n                                 final @NotNull PackageId lastPackageId,\n                                 final boolean preInstall)", "modifiers": "", "return": "void", "signature": "void processInstallableQueue(final @NotNull Session admin,\n                                 final @NotNull JcrPackageManager manager,\n                                 final @NotNull PackageId lastPackageId,\n                                 final boolean preInstall)", "full_signature": " void processInstallableQueue(final @NotNull Session admin,\n                                 final @NotNull JcrPackageManager manager,\n                                 final @NotNull PackageId lastPackageId,\n                                 final boolean preInstall)", "class_method_signature": "OakMachine.processInstallableQueue(final @NotNull Session admin,\n                                 final @NotNull JcrPackageManager manager,\n                                 final @NotNull PackageId lastPackageId,\n                                 final boolean preInstall)", "testcase": false, "constructor": false}, {"identifier": "processPackageUrl", "parameters": "(final @NotNull Session admin,\n                                 final @NotNull JcrPackageManager manager,\n                                 final boolean preInstall,\n                                 final @NotNull URL url)", "modifiers": "final", "return": "void", "signature": "void processPackageUrl(final @NotNull Session admin,\n                                 final @NotNull JcrPackageManager manager,\n                                 final boolean preInstall,\n                                 final @NotNull URL url)", "full_signature": "final void processPackageUrl(final @NotNull Session admin,\n                                 final @NotNull JcrPackageManager manager,\n                                 final boolean preInstall,\n                                 final @NotNull URL url)", "class_method_signature": "OakMachine.processPackageUrl(final @NotNull Session admin,\n                                 final @NotNull JcrPackageManager manager,\n                                 final boolean preInstall,\n                                 final @NotNull URL url)", "testcase": false, "constructor": false}, {"identifier": "processPackageFile", "parameters": "(final @NotNull Session admin,\n                                  final @NotNull JcrPackageManager manager,\n                                  final boolean preInstall,\n                                  final @NotNull File file)", "modifiers": "final", "return": "void", "signature": "void processPackageFile(final @NotNull Session admin,\n                                  final @NotNull JcrPackageManager manager,\n                                  final boolean preInstall,\n                                  final @NotNull File file)", "full_signature": "final void processPackageFile(final @NotNull Session admin,\n                                  final @NotNull JcrPackageManager manager,\n                                  final boolean preInstall,\n                                  final @NotNull File file)", "class_method_signature": "OakMachine.processPackageFile(final @NotNull Session admin,\n                                  final @NotNull JcrPackageManager manager,\n                                  final boolean preInstall,\n                                  final @NotNull File file)", "testcase": false, "constructor": false}, {"identifier": "authzPath", "parameters": "(final NodeBuilder parent, final String name)", "modifiers": "private static", "return": "NodeBuilder", "signature": "NodeBuilder authzPath(final NodeBuilder parent, final String name)", "full_signature": "private static NodeBuilder authzPath(final NodeBuilder parent, final String name)", "class_method_signature": "OakMachine.authzPath(final NodeBuilder parent, final String name)", "testcase": false, "constructor": false}, {"identifier": "initRepository", "parameters": "()", "modifiers": "private", "return": "Repository", "signature": "Repository initRepository()", "full_signature": "private Repository initRepository()", "class_method_signature": "OakMachine.initRepository()", "testcase": false, "constructor": false}, {"identifier": "shutdownRepository", "parameters": "(Repository repository)", "modifiers": "private", "return": "void", "signature": "void shutdownRepository(Repository repository)", "full_signature": "private void shutdownRepository(Repository repository)", "class_method_signature": "OakMachine.shutdownRepository(Repository repository)", "testcase": false, "constructor": false}, {"identifier": "loginAdmin", "parameters": "(Repository repository)", "modifiers": "private", "return": "Session", "signature": "Session loginAdmin(Repository repository)", "full_signature": "private Session loginAdmin(Repository repository)", "class_method_signature": "OakMachine.loginAdmin(Repository repository)", "testcase": false, "constructor": false}, {"identifier": "installVltNodetypes", "parameters": "(final Session admin)", "modifiers": "private", "return": "void", "signature": "void installVltNodetypes(final Session admin)", "full_signature": "private void installVltNodetypes(final Session admin)", "class_method_signature": "OakMachine.installVltNodetypes(final Session admin)", "testcase": false, "constructor": false}, {"identifier": "newOakpalPackagingService", "parameters": "()", "modifiers": "public static", "return": "Packaging", "signature": "Packaging newOakpalPackagingService()", "full_signature": "public static Packaging newOakpalPackagingService()", "class_method_signature": "OakMachine.newOakpalPackagingService()", "testcase": false, "constructor": false}, {"identifier": "newOakpalPackagingService", "parameters": "(final @NotNull ClassLoader classLoader)", "modifiers": "public static", "return": "Packaging", "signature": "Packaging newOakpalPackagingService(final @NotNull ClassLoader classLoader)", "full_signature": "public static Packaging newOakpalPackagingService(final @NotNull ClassLoader classLoader)", "class_method_signature": "OakMachine.newOakpalPackagingService(final @NotNull ClassLoader classLoader)", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/OakMachine.java"}, "focal_method": {"identifier": "scanPackage", "parameters": "(final @NotNull File... file)", "modifiers": "public", "return": "List<CheckReport>", "body": "public List<CheckReport> scanPackage(final @NotNull File... file) throws AbortedScanException {\n        return scanPackages(Arrays.asList(file));\n    }", "signature": "List<CheckReport> scanPackage(final @NotNull File... file)", "full_signature": "public List<CheckReport> scanPackage(final @NotNull File... file)", "class_method_signature": "OakMachine.scanPackage(final @NotNull File... file)", "testcase": false, "constructor": false, "invocations": ["scanPackages", "asList"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}