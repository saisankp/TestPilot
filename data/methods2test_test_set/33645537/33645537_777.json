{"test_class": {"identifier": "OnSubscribeDeferTest", "superclass": "", "interfaces": "", "fields": [], "file": "zava/src/test/java/rx/internal/operators/OnSubscribeDeferTest.java"}, "test_case": {"identifier": "testDefer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDefer() throws Throwable {\n\n        Func0<Observable<String>> factory = mock(Func0.class);\n\n        Observable<String> firstObservable = Observable.just(\"one\", \"two\");\n        Observable<String> secondObservable = Observable.just(\"three\", \"four\");\n        when(factory.call()).thenReturn(firstObservable, secondObservable);\n\n        Observable<String> deferred = Observable.defer(factory);\n\n        verifyZeroInteractions(factory);\n\n        Observer<String> firstObserver = mock(Observer.class);\n        deferred.subscribe(firstObserver);\n\n        verify(factory, times(1)).call();\n        verify(firstObserver, times(1)).onNext(\"one\");\n        verify(firstObserver, times(1)).onNext(\"two\");\n        verify(firstObserver, times(0)).onNext(\"three\");\n        verify(firstObserver, times(0)).onNext(\"four\");\n        verify(firstObserver, times(1)).onCompleted();\n\n        Observer<String> secondObserver = mock(Observer.class);\n        deferred.subscribe(secondObserver);\n\n        verify(factory, times(2)).call();\n        verify(secondObserver, times(0)).onNext(\"one\");\n        verify(secondObserver, times(0)).onNext(\"two\");\n        verify(secondObserver, times(1)).onNext(\"three\");\n        verify(secondObserver, times(1)).onNext(\"four\");\n        verify(secondObserver, times(1)).onCompleted();\n\n    }", "signature": "void testDefer()", "full_signature": "@Test public void testDefer()", "class_method_signature": "OnSubscribeDeferTest.testDefer()", "testcase": true, "constructor": false, "invocations": ["mock", "just", "just", "thenReturn", "when", "call", "defer", "verifyZeroInteractions", "mock", "subscribe", "call", "verify", "times", "onNext", "verify", "times", "onNext", "verify", "times", "onNext", "verify", "times", "onNext", "verify", "times", "onCompleted", "verify", "times", "mock", "subscribe", "call", "verify", "times", "onNext", "verify", "times", "onNext", "verify", "times", "onNext", "verify", "times", "onNext", "verify", "times", "onCompleted", "verify", "times"]}, "focal_class": {"identifier": "OnSubscribeDefer", "superclass": "", "interfaces": "implements OnSubscribe<T>", "fields": [{"original_string": "final Func0<? extends Observable<? extends T>> observableFactory;", "modifier": "final", "type": "Func0<? extends Observable<? extends T>>", "declarator": "observableFactory", "var_name": "observableFactory"}], "methods": [{"identifier": "OnSubscribeDefer", "parameters": "(Func0<? extends Observable<? extends T>> observableFactory)", "modifiers": "public", "return": "", "signature": " OnSubscribeDefer(Func0<? extends Observable<? extends T>> observableFactory)", "full_signature": "public  OnSubscribeDefer(Func0<? extends Observable<? extends T>> observableFactory)", "class_method_signature": "OnSubscribeDefer.OnSubscribeDefer(Func0<? extends Observable<? extends T>> observableFactory)", "testcase": false, "constructor": true}, {"identifier": "call", "parameters": "(Subscriber<? super T> s)", "modifiers": "@Override public", "return": "void", "signature": "void call(Subscriber<? super T> s)", "full_signature": "@Override public void call(Subscriber<? super T> s)", "class_method_signature": "OnSubscribeDefer.call(Subscriber<? super T> s)", "testcase": false, "constructor": false}], "file": "zava/src/main/java/rx/internal/operators/OnSubscribeDefer.java"}, "focal_method": {"identifier": "call", "parameters": "(Subscriber<? super T> s)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void call(Subscriber<? super T> s) {\n        Observable<? extends T> o;\n        try {\n            o = observableFactory.call();\n        } catch (Throwable t) {\n            s.onError(t);\n            return;\n        }\n        o.unsafeSubscribe(s);\n    }", "signature": "void call(Subscriber<? super T> s)", "full_signature": "@Override public void call(Subscriber<? super T> s)", "class_method_signature": "OnSubscribeDefer.call(Subscriber<? super T> s)", "testcase": false, "constructor": false, "invocations": ["call", "onError", "unsafeSubscribe"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}