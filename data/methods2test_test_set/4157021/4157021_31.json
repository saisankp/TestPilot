{"test_class": {"identifier": "ExpressionUserMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "ExpressionUserMapper mapper;", "modifier": "", "type": "ExpressionUserMapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "private Map<String, String> attributeMappings;", "modifier": "private", "type": "Map<String, String>", "declarator": "attributeMappings", "var_name": "attributeMappings"}, {"original_string": "String SAMPLE_JSON = \"{\\\"user_id\\\":\\\"123\\\",\\\"email\\\":\\\"myemail@email.com\\\"}\";", "modifier": "", "type": "String", "declarator": "SAMPLE_JSON = \"{\\\"user_id\\\":\\\"123\\\",\\\"email\\\":\\\"myemail@email.com\\\"}\"", "var_name": "SAMPLE_JSON"}], "file": "src/core/security/src/test/java/it/geosolutions/geostore/core/security/ExpressionUserMapperTest.java"}, "test_case": {"identifier": "testMapMapping", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMapMapping() {\n        mapper = new MapExpressionUserMapper(attributeMappings);\n        User user = new User();\n        attributeMappings.put(\"transformed\", \"my_email\");\n        Map<String, String> attributes = new HashMap<String, String>();\n        attributes.put(\"my_email\", \"myemail@email.com\");\n        mapper.mapUser(attributes, user);\n        \n        assertEquals(1, user.getAttribute().size());\n        assertEquals(\"transformed\", user.getAttribute().get(0).getName());\n        assertEquals(\"myemail@email.com\", user.getAttribute().get(0).getValue());\n    }", "signature": "void testMapMapping()", "full_signature": "@Test public void testMapMapping()", "class_method_signature": "ExpressionUserMapperTest.testMapMapping()", "testcase": true, "constructor": false, "invocations": ["put", "put", "mapUser", "assertEquals", "size", "getAttribute", "assertEquals", "getName", "get", "getAttribute", "assertEquals", "getValue", "get", "getAttribute"]}, "focal_class": {"identifier": "ExpressionUserMapper", "superclass": "", "interfaces": "implements UserMapper", "fields": [{"original_string": "Map<String, String> attributeMappings;", "modifier": "", "type": "Map<String, String>", "declarator": "attributeMappings", "var_name": "attributeMappings"}, {"original_string": "public static SpelExpressionParser parser = new SpelExpressionParser();", "modifier": "public static", "type": "SpelExpressionParser", "declarator": "parser = new SpelExpressionParser()", "var_name": "parser"}, {"original_string": "protected StandardEvaluationContext evaluationContext = new StandardEvaluationContext();", "modifier": "protected", "type": "StandardEvaluationContext", "declarator": "evaluationContext = new StandardEvaluationContext()", "var_name": "evaluationContext"}], "methods": [{"identifier": "ExpressionUserMapper", "parameters": "(Map<String, String> attributeMappings)", "modifiers": "public", "return": "", "signature": " ExpressionUserMapper(Map<String, String> attributeMappings)", "full_signature": "public  ExpressionUserMapper(Map<String, String> attributeMappings)", "class_method_signature": "ExpressionUserMapper.ExpressionUserMapper(Map<String, String> attributeMappings)", "testcase": false, "constructor": true}, {"identifier": "mapUser", "parameters": "(Object details, User user)", "modifiers": "@Override /** * If details is a UserDetailsWithAttributes object, its attributes are mapped to User * attributes. * Each mapping is an SpEL expression using the UserDetailsWithAttributes as a source. * */ public", "return": "void", "signature": "void mapUser(Object details, User user)", "full_signature": "@Override /** * If details is a UserDetailsWithAttributes object, its attributes are mapped to User * attributes. * Each mapping is an SpEL expression using the UserDetailsWithAttributes as a source. * */ public void mapUser(Object details, User user)", "class_method_signature": "ExpressionUserMapper.mapUser(Object details, User user)", "testcase": false, "constructor": false}, {"identifier": "preProcessDetails", "parameters": "(Object details)", "modifiers": "protected", "return": "Object", "signature": "Object preProcessDetails(Object details)", "full_signature": "protected Object preProcessDetails(Object details)", "class_method_signature": "ExpressionUserMapper.preProcessDetails(Object details)", "testcase": false, "constructor": false}], "file": "src/core/security/src/main/java/it/geosolutions/geostore/core/security/ExpressionUserMapper.java"}, "focal_method": {"identifier": "mapUser", "parameters": "(Object details, User user)", "modifiers": "@Override /** * If details is a UserDetailsWithAttributes object, its attributes are mapped to User * attributes. * Each mapping is an SpEL expression using the UserDetailsWithAttributes as a source. * */ public", "return": "void", "body": "@Override\n    /**\n     * If details is a UserDetailsWithAttributes object, its attributes are mapped to User\n     * attributes.\n     * Each mapping is an SpEL expression using the UserDetailsWithAttributes as a source.\n     * \n     */\n    public void mapUser(Object details, User user) {\n        List<UserAttribute> attributes = new ArrayList<UserAttribute>();\n        details = preProcessDetails(details);\n        for(String attributeName : attributeMappings.keySet()) {\n            \n            Expression exp = parser.parseExpression(attributeMappings.get(attributeName));\n            UserAttribute userAttribute = new UserAttribute();\n            userAttribute.setName(attributeName);\n            Object value = exp.getValue(evaluationContext, details);\n            userAttribute.setValue(value == null ? null : value.toString());\n            attributes.add(userAttribute);\n        }\n        user.setAttribute(attributes);\n        \n    }", "signature": "void mapUser(Object details, User user)", "full_signature": "@Override /** * If details is a UserDetailsWithAttributes object, its attributes are mapped to User * attributes. * Each mapping is an SpEL expression using the UserDetailsWithAttributes as a source. * */ public void mapUser(Object details, User user)", "class_method_signature": "ExpressionUserMapper.mapUser(Object details, User user)", "testcase": false, "constructor": false, "invocations": ["preProcessDetails", "keySet", "parseExpression", "get", "setName", "getValue", "setValue", "toString", "add", "setAttribute"]}, "repository": {"repo_id": 4157021, "url": "https://github.com/geosolutions-it/geostore", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 19, "size": 1798, "license": "licensed"}}