{"test_class": {"identifier": "PutSystemDateInSessionTest", "superclass": "extends PipeTestBase<PutSystemDateInSession>", "interfaces": "", "fields": [{"original_string": "@Rule\n\tpublic ExpectedException expectedEx = ExpectedException.none();", "modifier": "@Rule\n\tpublic", "type": "ExpectedException", "declarator": "expectedEx = ExpectedException.none()", "var_name": "expectedEx"}, {"original_string": "private IPipeLineSession session = new PipeLineSessionBase();", "modifier": "private", "type": "IPipeLineSession", "declarator": "session = new PipeLineSessionBase()", "var_name": "session"}], "file": "core/src/test/java/nl/nn/adapterframework/pipes/PutSystemDateInSessionTest.java"}, "test_case": {"identifier": "testConfigureNullDateFormat", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testConfigureNullDateFormat() throws Exception {\n\t\texpectedEx.expectMessage(\"has a null value for dateFormat\");\n\t\tpipe.setDateFormat(null);\n\t\tconfigureAndStartPipe();\n\t}", "signature": "void testConfigureNullDateFormat()", "full_signature": "@Test public void testConfigureNullDateFormat()", "class_method_signature": "PutSystemDateInSessionTest.testConfigureNullDateFormat()", "testcase": true, "constructor": false, "invocations": ["expectMessage", "setDateFormat", "configureAndStartPipe"]}, "focal_class": {"identifier": "PutSystemDateInSession", "superclass": "extends FixedForwardPipe", "interfaces": "", "fields": [{"original_string": "public final static Object OBJECT = new Object();", "modifier": "public final static", "type": "Object", "declarator": "OBJECT = new Object()", "var_name": "OBJECT"}, {"original_string": "public final static String FIXEDDATETIME  =\"2001-12-17 09:30:47\";", "modifier": "public final static", "type": "String", "declarator": "FIXEDDATETIME  =\"2001-12-17 09:30:47\"", "var_name": "FIXEDDATETIME"}, {"original_string": "public final static String FORMAT_FIXEDDATETIME  =\"yyyy-MM-dd HH:mm:ss\";", "modifier": "public final static", "type": "String", "declarator": "FORMAT_FIXEDDATETIME  =\"yyyy-MM-dd HH:mm:ss\"", "var_name": "FORMAT_FIXEDDATETIME"}, {"original_string": "public final static String FIXEDDATE_STUB4TESTTOOL_KEY  =\"stub4testtool.fixeddate\";", "modifier": "public final static", "type": "String", "declarator": "FIXEDDATE_STUB4TESTTOOL_KEY  =\"stub4testtool.fixeddate\"", "var_name": "FIXEDDATE_STUB4TESTTOOL_KEY"}, {"original_string": "private String sessionKey=\"systemDate\";", "modifier": "private", "type": "String", "declarator": "sessionKey=\"systemDate\"", "var_name": "sessionKey"}, {"original_string": "private String dateFormat=DateUtils.fullIsoFormat;", "modifier": "private", "type": "String", "declarator": "dateFormat=DateUtils.fullIsoFormat", "var_name": "dateFormat"}, {"original_string": "private SimpleDateFormat formatter;", "modifier": "private", "type": "SimpleDateFormat", "declarator": "formatter", "var_name": "formatter"}, {"original_string": "private boolean returnFixedDate=false;", "modifier": "private", "type": "boolean", "declarator": "returnFixedDate=false", "var_name": "returnFixedDate"}, {"original_string": "private long sleepWhenEqualToPrevious = -1;", "modifier": "private", "type": "long", "declarator": "sleepWhenEqualToPrevious = -1", "var_name": "sleepWhenEqualToPrevious"}, {"original_string": "private TimeZone timeZone=null;", "modifier": "private", "type": "TimeZone", "declarator": "timeZone=null", "var_name": "timeZone"}, {"original_string": "private String previousFormattedDate;", "modifier": "private", "type": "String", "declarator": "previousFormattedDate", "var_name": "previousFormattedDate"}, {"original_string": "private boolean getCurrentTimeStampInMillis = false;", "modifier": "private", "type": "boolean", "declarator": "getCurrentTimeStampInMillis = false", "var_name": "getCurrentTimeStampInMillis"}], "methods": [{"identifier": "configure", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void configure()", "full_signature": "@Override public void configure()", "class_method_signature": "PutSystemDateInSession.configure()", "testcase": false, "constructor": false}, {"identifier": "doPipe", "parameters": "(Message message, IPipeLineSession session)", "modifiers": "@Override public", "return": "PipeRunResult", "signature": "PipeRunResult doPipe(Message message, IPipeLineSession session)", "full_signature": "@Override public PipeRunResult doPipe(Message message, IPipeLineSession session)", "class_method_signature": "PutSystemDateInSession.doPipe(Message message, IPipeLineSession session)", "testcase": false, "constructor": false}, {"identifier": "setSessionKey", "parameters": "(String newSessionKey)", "modifiers": "@IbisDoc({\"key of session variable to store systemdate in\", \"systemdate\"}) public", "return": "void", "signature": "void setSessionKey(String newSessionKey)", "full_signature": "@IbisDoc({\"key of session variable to store systemdate in\", \"systemdate\"}) public void setSessionKey(String newSessionKey)", "class_method_signature": "PutSystemDateInSession.setSessionKey(String newSessionKey)", "testcase": false, "constructor": false}, {"identifier": "getSessionKey", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSessionKey()", "full_signature": "public String getSessionKey()", "class_method_signature": "PutSystemDateInSession.getSessionKey()", "testcase": false, "constructor": false}, {"identifier": "setDateFormat", "parameters": "(String rhs)", "modifiers": "@IbisDoc({\"format to store date in\", \"fullisoformat: yyyy-mm-dd't'hh:mm:sszzz\"}) public", "return": "void", "signature": "void setDateFormat(String rhs)", "full_signature": "@IbisDoc({\"format to store date in\", \"fullisoformat: yyyy-mm-dd't'hh:mm:sszzz\"}) public void setDateFormat(String rhs)", "class_method_signature": "PutSystemDateInSession.setDateFormat(String rhs)", "testcase": false, "constructor": false}, {"identifier": "getDateFormat", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDateFormat()", "full_signature": "public String getDateFormat()", "class_method_signature": "PutSystemDateInSession.getDateFormat()", "testcase": false, "constructor": false}, {"identifier": "setTimeZone", "parameters": "(String timeZone)", "modifiers": "@IbisDoc({\"the time zone to use for the formatter\", \"the default time zone for the jvm\"}) public", "return": "void", "signature": "void setTimeZone(String timeZone)", "full_signature": "@IbisDoc({\"the time zone to use for the formatter\", \"the default time zone for the jvm\"}) public void setTimeZone(String timeZone)", "class_method_signature": "PutSystemDateInSession.setTimeZone(String timeZone)", "testcase": false, "constructor": false}, {"identifier": "setSleepWhenEqualToPrevious", "parameters": "(long sleepWhenEqualToPrevious)", "modifiers": "@IbisDoc({\"set to a time in millisecond to create a value that is different to the previous returned value by a putsystemdateinsession pipe in this virtual machine. the thread will sleep for the specified time before recalculating a new value. set the timezone to a value without daylight saving time (like gmt+1) to prevent this pipe to generate two equal value's when the clock is set back. <b>note:</b> when you're looking for a guid parameter for you xslt it might be better to use &lt;param name=&quot;guid&quot; pattern=&quot;{hostname}_{uid}&quot;/&gt;, see {@link nl.nn.adapterframework.parameters.parameter}\", \"-1 (disabled)\"}) public", "return": "void", "signature": "void setSleepWhenEqualToPrevious(long sleepWhenEqualToPrevious)", "full_signature": "@IbisDoc({\"set to a time in millisecond to create a value that is different to the previous returned value by a putsystemdateinsession pipe in this virtual machine. the thread will sleep for the specified time before recalculating a new value. set the timezone to a value without daylight saving time (like gmt+1) to prevent this pipe to generate two equal value's when the clock is set back. <b>note:</b> when you're looking for a guid parameter for you xslt it might be better to use &lt;param name=&quot;guid&quot; pattern=&quot;{hostname}_{uid}&quot;/&gt;, see {@link nl.nn.adapterframework.parameters.parameter}\", \"-1 (disabled)\"}) public void setSleepWhenEqualToPrevious(long sleepWhenEqualToPrevious)", "class_method_signature": "PutSystemDateInSession.setSleepWhenEqualToPrevious(long sleepWhenEqualToPrevious)", "testcase": false, "constructor": false}, {"identifier": "setReturnFixedDate", "parameters": "(boolean b)", "modifiers": "@IbisDoc({\"if <code>true</code>, the date/time returned will always be december 17, 2001, 09:30:47 (for testing purposes only). it is overridden by the value of the pipelinesession key <code>stub4testtool.fixeddate</code> when it exists\", \"<code>false</code>\"}) public", "return": "void", "signature": "void setReturnFixedDate(boolean b)", "full_signature": "@IbisDoc({\"if <code>true</code>, the date/time returned will always be december 17, 2001, 09:30:47 (for testing purposes only). it is overridden by the value of the pipelinesession key <code>stub4testtool.fixeddate</code> when it exists\", \"<code>false</code>\"}) public void setReturnFixedDate(boolean b)", "class_method_signature": "PutSystemDateInSession.setReturnFixedDate(boolean b)", "testcase": false, "constructor": false}, {"identifier": "isReturnFixedDate", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isReturnFixedDate()", "full_signature": "public boolean isReturnFixedDate()", "class_method_signature": "PutSystemDateInSession.isReturnFixedDate()", "testcase": false, "constructor": false}, {"identifier": "isGetCurrentTimeStampInMillis", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isGetCurrentTimeStampInMillis()", "full_signature": "public boolean isGetCurrentTimeStampInMillis()", "class_method_signature": "PutSystemDateInSession.isGetCurrentTimeStampInMillis()", "testcase": false, "constructor": false}, {"identifier": "setGetCurrentTimeStampInMillis", "parameters": "(boolean getCurrentTimeStampInMillis)", "modifiers": "@IbisDoc({\"If set to 'true' then current time stamp in millisecond will be stored in the sessionKey\", \"false\"}) public", "return": "void", "signature": "void setGetCurrentTimeStampInMillis(boolean getCurrentTimeStampInMillis)", "full_signature": "@IbisDoc({\"If set to 'true' then current time stamp in millisecond will be stored in the sessionKey\", \"false\"}) public void setGetCurrentTimeStampInMillis(boolean getCurrentTimeStampInMillis)", "class_method_signature": "PutSystemDateInSession.setGetCurrentTimeStampInMillis(boolean getCurrentTimeStampInMillis)", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/pipes/PutSystemDateInSession.java"}, "focal_method": {"identifier": "setDateFormat", "parameters": "(String rhs)", "modifiers": "@IbisDoc({\"format to store date in\", \"fullisoformat: yyyy-mm-dd't'hh:mm:sszzz\"}) public", "return": "void", "body": "@IbisDoc({\"format to store date in\", \"fullisoformat: yyyy-mm-dd't'hh:mm:sszzz\"})\n\tpublic void setDateFormat(String rhs) {\n\t\tdateFormat = rhs;\n\t}", "signature": "void setDateFormat(String rhs)", "full_signature": "@IbisDoc({\"format to store date in\", \"fullisoformat: yyyy-mm-dd't'hh:mm:sszzz\"}) public void setDateFormat(String rhs)", "class_method_signature": "PutSystemDateInSession.setDateFormat(String rhs)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}