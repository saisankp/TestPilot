{"test_class": {"identifier": "DependencyResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AnnotationProcessor mockProcessor = new AnnotationProcessor();", "modifier": "private", "type": "AnnotationProcessor", "declarator": "mockProcessor = new AnnotationProcessor()", "var_name": "mockProcessor"}, {"original_string": "private DependencyResolver sut;", "modifier": "private", "type": "DependencyResolver", "declarator": "sut", "var_name": "sut"}], "file": "plugface-core/src/test/java/org/plugface/core/internal/DependencyResolverTest.java"}, "test_case": {"identifier": "shouldResolvePluginsWithoutDependencies", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldResolvePluginsWithoutDependencies() {\n        List<Class<?>> plugins = newArrayList(TestPlugin.class, OptionalPlugin.class);\n        final Collection<Node<?>> nodes = sut.resolve(plugins);\n        assertEquals(plugins.size(), nodes.size());\n        for (Node<?> node : nodes) {\n            assertTrue(plugins.contains(node.getRefClass()));\n        }\n    }", "signature": "void shouldResolvePluginsWithoutDependencies()", "full_signature": "@Test public void shouldResolvePluginsWithoutDependencies()", "class_method_signature": "DependencyResolverTest.shouldResolvePluginsWithoutDependencies()", "testcase": true, "constructor": false, "invocations": ["newArrayList", "resolve", "assertEquals", "size", "size", "assertTrue", "contains", "getRefClass"]}, "focal_class": {"identifier": "DependencyResolver", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final AnnotationProcessor processor;", "modifier": "private final", "type": "AnnotationProcessor", "declarator": "processor", "var_name": "processor"}], "methods": [{"identifier": "DependencyResolver", "parameters": "(AnnotationProcessor processor)", "modifiers": "public", "return": "", "signature": " DependencyResolver(AnnotationProcessor processor)", "full_signature": "public  DependencyResolver(AnnotationProcessor processor)", "class_method_signature": "DependencyResolver.DependencyResolver(AnnotationProcessor processor)", "testcase": false, "constructor": true}, {"identifier": "resolve", "parameters": "(Collection<Class<?>> pluginClasses)", "modifiers": "public", "return": "Collection<Node<?>>", "signature": "Collection<Node<?>> resolve(Collection<Class<?>> pluginClasses)", "full_signature": "public Collection<Node<?>> resolve(Collection<Class<?>> pluginClasses)", "class_method_signature": "DependencyResolver.resolve(Collection<Class<?>> pluginClasses)", "testcase": false, "constructor": false}], "file": "plugface-core/src/main/java/org/plugface/core/internal/DependencyResolver.java"}, "focal_method": {"identifier": "resolve", "parameters": "(Collection<Class<?>> pluginClasses)", "modifiers": "public", "return": "Collection<Node<?>>", "body": "public Collection<Node<?>> resolve(Collection<Class<?>> pluginClasses) {\n\n        final Graph graph = new Graph();\n        for (Class<?> pluginClass : pluginClasses) {\n            final Collection<Node<?>> deps = processor.getDependencies(pluginClass);\n            final Node<?> node = new Node<>(pluginClass);\n            if (deps.isEmpty()) {\n                graph.addLeaf(node);\n            } else {\n                graph.addEdges(node, deps);\n            }\n        }\n\n        return graph.resolve();\n    }", "signature": "Collection<Node<?>> resolve(Collection<Class<?>> pluginClasses)", "full_signature": "public Collection<Node<?>> resolve(Collection<Class<?>> pluginClasses)", "class_method_signature": "DependencyResolver.resolve(Collection<Class<?>> pluginClasses)", "testcase": false, "constructor": false, "invocations": ["getDependencies", "isEmpty", "addLeaf", "addEdges", "resolve"]}, "repository": {"repo_id": 84065080, "url": "https://github.com/MatteoJoliveau/PlugFace", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 34, "size": 10277, "license": "licensed"}}