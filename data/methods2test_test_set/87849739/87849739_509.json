{"test_class": {"identifier": "ContentTypeValidationDirectiveTest", "superclass": "extends JUnitRouteTest", "interfaces": "", "fields": [{"original_string": "private final Supplier<Route> COMPLETE_OK = () -> complete(StatusCodes.OK);", "modifier": "private final", "type": "Supplier<Route>", "declarator": "COMPLETE_OK = () -> complete(StatusCodes.OK)", "var_name": "COMPLETE_OK"}], "file": "services/gateway/endpoints/src/test/java/org/eclipse/ditto/services/gateway/endpoints/directives/ContentTypeValidationDirectiveTest.java"}, "test_case": {"identifier": "testWithNonParsableContentType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWithNonParsableContentType() {\n        // Arrange\n        final DittoHeaders dittoHeaders = DittoHeaders.empty();\n        final String nonParsableMediaType = \"application-json\";\n\n        // Act\n        final TestRouteResult result =\n                testRoute(extractRequestContext(\n                        ctx -> ensureValidContentType(Set.of(nonParsableMediaType), ctx, dittoHeaders, COMPLETE_OK)))\n                        .run(HttpRequest.PUT(\"someUrl\")\n                                .addHeader(HttpHeader.parse(\"content-type\", nonParsableMediaType))\n                                .withEntity(ContentTypes.APPLICATION_OCTET_STREAM, \"something\".getBytes()));\n\n        // Assert\n        result.assertStatusCode(StatusCodes.OK);\n    }", "signature": "void testWithNonParsableContentType()", "full_signature": "@Test public void testWithNonParsableContentType()", "class_method_signature": "ContentTypeValidationDirectiveTest.testWithNonParsableContentType()", "testcase": true, "constructor": false, "invocations": ["empty", "run", "testRoute", "extractRequestContext", "ensureValidContentType", "of", "withEntity", "addHeader", "PUT", "parse", "getBytes", "assertStatusCode"]}, "focal_class": {"identifier": "ContentTypeValidationDirective", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ThreadSafeDittoLogger LOGGER =\n             DittoLoggerFactory.getThreadSafeLogger(ContentTypeValidationDirective.class);", "modifier": "private static final", "type": "ThreadSafeDittoLogger", "declarator": "LOGGER =\n             DittoLoggerFactory.getThreadSafeLogger(ContentTypeValidationDirective.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "ContentTypeValidationDirective", "parameters": "()", "modifiers": "private", "return": "", "signature": " ContentTypeValidationDirective()", "full_signature": "private  ContentTypeValidationDirective()", "class_method_signature": "ContentTypeValidationDirective.ContentTypeValidationDirective()", "testcase": false, "constructor": true}, {"identifier": "ensureValidContentType", "parameters": "(final Set<String> supportedMediaTypes,\n             final RequestContext ctx,\n             final DittoHeaders dittoHeaders,\n             final Supplier<Route> inner)", "modifiers": "public static", "return": "Route", "signature": "Route ensureValidContentType(final Set<String> supportedMediaTypes,\n             final RequestContext ctx,\n             final DittoHeaders dittoHeaders,\n             final Supplier<Route> inner)", "full_signature": "public static Route ensureValidContentType(final Set<String> supportedMediaTypes,\n             final RequestContext ctx,\n             final DittoHeaders dittoHeaders,\n             final Supplier<Route> inner)", "class_method_signature": "ContentTypeValidationDirective.ensureValidContentType(final Set<String> supportedMediaTypes,\n             final RequestContext ctx,\n             final DittoHeaders dittoHeaders,\n             final Supplier<Route> inner)", "testcase": false, "constructor": false}, {"identifier": "extractMediaType", "parameters": "(final HttpRequest request)", "modifiers": "private static", "return": "String", "signature": "String extractMediaType(final HttpRequest request)", "full_signature": "private static String extractMediaType(final HttpRequest request)", "class_method_signature": "ContentTypeValidationDirective.extractMediaType(final HttpRequest request)", "testcase": false, "constructor": false}, {"identifier": "requestToLogString", "parameters": "(final HttpRequest request)", "modifiers": "private static", "return": "String", "signature": "String requestToLogString(final HttpRequest request)", "full_signature": "private static String requestToLogString(final HttpRequest request)", "class_method_signature": "ContentTypeValidationDirective.requestToLogString(final HttpRequest request)", "testcase": false, "constructor": false}], "file": "services/gateway/endpoints/src/main/java/org/eclipse/ditto/services/gateway/endpoints/directives/ContentTypeValidationDirective.java"}, "focal_method": {"identifier": "ensureValidContentType", "parameters": "(final Set<String> supportedMediaTypes,\n             final RequestContext ctx,\n             final DittoHeaders dittoHeaders,\n             final Supplier<Route> inner)", "modifiers": "public static", "return": "Route", "body": "public static Route ensureValidContentType(final Set<String> supportedMediaTypes,\n             final RequestContext ctx,\n             final DittoHeaders dittoHeaders,\n             final Supplier<Route> inner) {\n\n         final String requestsMediaType = extractMediaType(ctx.getRequest());\n         if (supportedMediaTypes.contains(requestsMediaType)) {\n             return inner.get();\n         } else {\n             if (LOGGER.isInfoEnabled()) {\n                 LOGGER.withCorrelationId(dittoHeaders)\n                        .info(\"Request rejected: unsupported media-type: <{}>  request: <{}>\", requestsMediaType,\n                                requestToLogString(ctx.getRequest()));\n             }\n             throw UnsupportedMediaTypeException\n                     .withDetailedInformationBuilder(requestsMediaType, supportedMediaTypes)\n                     .dittoHeaders(dittoHeaders)\n                     .build();\n         }\n     }", "signature": "Route ensureValidContentType(final Set<String> supportedMediaTypes,\n             final RequestContext ctx,\n             final DittoHeaders dittoHeaders,\n             final Supplier<Route> inner)", "full_signature": "public static Route ensureValidContentType(final Set<String> supportedMediaTypes,\n             final RequestContext ctx,\n             final DittoHeaders dittoHeaders,\n             final Supplier<Route> inner)", "class_method_signature": "ContentTypeValidationDirective.ensureValidContentType(final Set<String> supportedMediaTypes,\n             final RequestContext ctx,\n             final DittoHeaders dittoHeaders,\n             final Supplier<Route> inner)", "testcase": false, "constructor": false, "invocations": ["extractMediaType", "getRequest", "contains", "get", "isInfoEnabled", "info", "withCorrelationId", "requestToLogString", "getRequest", "build", "dittoHeaders", "withDetailedInformationBuilder"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}