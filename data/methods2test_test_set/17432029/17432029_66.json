{"test_class": {"identifier": "IntegratedNetworkResponseParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String jsonContent = \"{\\\"imageUrl\\\":\\\"http://static.naver.com/volley-ext.jpg\\\",\" +\n\t\t\t   \"\\\"title\\\":\\\"Volley extention has released\\\",\" +\n\t\t\t   \"\\\"content\\\":\\\"Very good News\\\"}\";", "modifier": "private static final", "type": "String", "declarator": "jsonContent = \"{\\\"imageUrl\\\":\\\"http://static.naver.com/volley-ext.jpg\\\",\" +\n\t\t\t   \"\\\"title\\\":\\\"Volley extention has released\\\",\" +\n\t\t\t   \"\\\"content\\\":\\\"Very good News\\\"}\"", "var_name": "jsonContent"}, {"original_string": "private static final int DEFAULT_STATUS_CODE = 200;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_STATUS_CODE = 200", "var_name": "DEFAULT_STATUS_CODE"}, {"original_string": "private NetworkResponse networkResponse = null;", "modifier": "private", "type": "NetworkResponse", "declarator": "networkResponse = null", "var_name": "networkResponse"}, {"original_string": "private Map<ContentType, NetworkResponseParser> parsers = null;", "modifier": "private", "type": "Map<ContentType, NetworkResponseParser>", "declarator": "parsers = null", "var_name": "parsers"}, {"original_string": "private NetworkResponseParser integratedResponseParser = null;", "modifier": "private", "type": "NetworkResponseParser", "declarator": "integratedResponseParser = null", "var_name": "integratedResponseParser"}], "file": "volleyer/src/test/java/com/navercorp/volleyextensions/volleyer/response/parser/IntegratedNetworkResponseParserTest.java"}, "test_case": {"identifier": "parserShouldReturnVolleyErrorWhenContentTypeIsNotSpecified", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void parserShouldReturnVolleyErrorWhenContentTypeIsNotSpecified() {\n\t\t// Given\n\t\tnetworkResponse = new NetworkResponse(jsonContent.getBytes());\n\t\tNetworkResponseParser responseParser = mock(NetworkResponseParser.class);\n\t\tparsers.put(ContentType.CONTENT_TYPE_APPLICATION_JSON, responseParser);\n\t\tintegratedResponseParser = createIntegratedNetworkResponseParser(parsers);\n\t\tClass<News> clazz = News.class;\n\t\t// When\n\t\tResponse<News> response = integratedResponseParser.parseNetworkResponse(networkResponse, clazz);\n\t\t// Then\n\t\tassertNotNull(response.error);\n\t}", "signature": "void parserShouldReturnVolleyErrorWhenContentTypeIsNotSpecified()", "full_signature": "@Test public void parserShouldReturnVolleyErrorWhenContentTypeIsNotSpecified()", "class_method_signature": "IntegratedNetworkResponseParserTest.parserShouldReturnVolleyErrorWhenContentTypeIsNotSpecified()", "testcase": true, "constructor": false, "invocations": ["getBytes", "mock", "put", "createIntegratedNetworkResponseParser", "parseNetworkResponse", "assertNotNull"]}, "focal_class": {"identifier": "IntegratedNetworkResponseParser", "superclass": "", "interfaces": "implements NetworkResponseParser", "fields": [{"original_string": "private static final String CONTENT_TYPE_HEADER_KEY = \"Content-Type\";", "modifier": "private static final", "type": "String", "declarator": "CONTENT_TYPE_HEADER_KEY = \"Content-Type\"", "var_name": "CONTENT_TYPE_HEADER_KEY"}, {"original_string": "private static final NetworkResponseParser STRING_NETWORK_RESPONSE_PARSER = new StringNetworkResponseParser();", "modifier": "private static final", "type": "NetworkResponseParser", "declarator": "STRING_NETWORK_RESPONSE_PARSER = new StringNetworkResponseParser()", "var_name": "STRING_NETWORK_RESPONSE_PARSER"}, {"original_string": "private final Map<ContentType, NetworkResponseParser> parsers = new HashMap<ContentType, NetworkResponseParser>();", "modifier": "private final", "type": "Map<ContentType, NetworkResponseParser>", "declarator": "parsers = new HashMap<ContentType, NetworkResponseParser>()", "var_name": "parsers"}], "methods": [{"identifier": "IntegratedNetworkResponseParser", "parameters": "(Map<ContentType, NetworkResponseParser> parsers)", "modifiers": "", "return": "", "signature": " IntegratedNetworkResponseParser(Map<ContentType, NetworkResponseParser> parsers)", "full_signature": "  IntegratedNetworkResponseParser(Map<ContentType, NetworkResponseParser> parsers)", "class_method_signature": "IntegratedNetworkResponseParser.IntegratedNetworkResponseParser(Map<ContentType, NetworkResponseParser> parsers)", "testcase": false, "constructor": true}, {"identifier": "parseNetworkResponse", "parameters": "(NetworkResponse response, Class<T> clazz)", "modifiers": "@Override public", "return": "Response<T>", "signature": "Response<T> parseNetworkResponse(NetworkResponse response, Class<T> clazz)", "full_signature": "@Override public Response<T> parseNetworkResponse(NetworkResponse response, Class<T> clazz)", "class_method_signature": "IntegratedNetworkResponseParser.parseNetworkResponse(NetworkResponse response, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "getResponseHeader", "parameters": "(NetworkResponse response, String headerKey)", "modifiers": "protected", "return": "String", "signature": "String getResponseHeader(NetworkResponse response, String headerKey)", "full_signature": "protected String getResponseHeader(NetworkResponse response, String headerKey)", "class_method_signature": "IntegratedNetworkResponseParser.getResponseHeader(NetworkResponse response, String headerKey)", "testcase": false, "constructor": false}], "file": "volleyer/src/main/java/com/navercorp/volleyextensions/volleyer/response/parser/IntegratedNetworkResponseParser.java"}, "focal_method": {"identifier": "parseNetworkResponse", "parameters": "(NetworkResponse response, Class<T> clazz)", "modifiers": "@Override public", "return": "Response<T>", "body": "@Override\n\tpublic <T> Response<T> parseNetworkResponse(NetworkResponse response, Class<T> clazz) {\n\t\tAssert.notNull(response, \"NetworkResponse\");\n\t\tAssert.notNull(clazz, \"Target class token\");\n\n\t\t// Skip parsing if target class is {@code Void}\n\t\tif (clazz == Void.class) {\n\t\t\treturn Response.success(null, null);\n\t\t}\n\n\t\t// Use StringNetworkResponseParser if target class is String\n\t\tif (clazz == String.class) {\n\t\t\treturn STRING_NETWORK_RESPONSE_PARSER.parseNetworkResponse(response, clazz);\n\t\t}\n\n\t\t// Return the response without using any other parser if target class is NetworkResponse\n\t\tif (clazz == NetworkResponse.class) {\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tResponse<T> successResponse = (Response<T>) Response.success(response, HttpHeaderParser.parseCacheHeaders(response));\n\t\t\treturn successResponse;\n\t\t}\n\n\t\t// Get a content type string from the response header\n\t\tString contentTypeString = getResponseHeader(response, CONTENT_TYPE_HEADER_KEY);\n\t\t// Throw an error if content type is null\n\t\tif (contentTypeString == null) {\n\t\t\treturn Response.error(new ParseError(new UnsupportedContentTypeException(\"It cannot find any response parser, \"\n\t\t\t\t\t+ \"because the response content type is null.\")));\n\t\t}\n\n\t\t// Create a content type instance\n\t\tContentType contentType = ContentType.createContentType(contentTypeString);\n\t\t// Get a network response parser from parsers collection\n\t\tNetworkResponseParser responseParser = parsers.get(contentType);\n\t\t// Throw an error if it cannot find any response parser\n\t\tif (responseParser == null) {\n\t\t\treturn Response.error(new ParseError(new UnsupportedContentTypeException(\"It cannot find any response parser \"\n\t\t\t\t\t+ \"for the response content type.\")));\t\n\t\t}\n\n\t\t// Parse the response and return it\n\t\treturn responseParser.parseNetworkResponse(response, clazz);\n\t}", "signature": "Response<T> parseNetworkResponse(NetworkResponse response, Class<T> clazz)", "full_signature": "@Override public Response<T> parseNetworkResponse(NetworkResponse response, Class<T> clazz)", "class_method_signature": "IntegratedNetworkResponseParser.parseNetworkResponse(NetworkResponse response, Class<T> clazz)", "testcase": false, "constructor": false, "invocations": ["notNull", "notNull", "success", "parseNetworkResponse", "success", "parseCacheHeaders", "getResponseHeader", "error", "createContentType", "get", "error", "parseNetworkResponse"]}, "repository": {"repo_id": 17432029, "url": "https://github.com/naver/volley-extensions", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 138, "size": 666, "license": "licensed"}}