{"test_class": {"identifier": "CIPToolTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "static SmilesParser   smiles = new SmilesParser(SilentChemObjectBuilder.getInstance());", "modifier": "static", "type": "SmilesParser", "declarator": "smiles = new SmilesParser(SilentChemObjectBuilder.getInstance())", "var_name": "smiles"}, {"original_string": "static IAtomContainer molecule;", "modifier": "static", "type": "IAtomContainer", "declarator": "molecule", "var_name": "molecule"}, {"original_string": "static ILigand[]      ligands;", "modifier": "static", "type": "ILigand[]", "declarator": "ligands", "var_name": "ligands"}], "file": "descriptor/cip/src/test/java/org/openscience/cdk/geometry/cip/CIPToolTest.java"}, "test_case": {"identifier": "label", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void label() throws Exception {\n        IAtomContainer container = new SmilesParser(SilentChemObjectBuilder.getInstance())\n                .parseSmiles(\"C/C=C/[C@@H](C)C(/C)=C(/C)C[C@H](C)O\");\n        CIPTool.label(container);\n        assertThat(container.getAtom(3).getProperty(CDKConstants.CIP_DESCRIPTOR, String.class), CoreMatchers.is(\"R\"));\n        assertThat(container.getAtom(10).getProperty(CDKConstants.CIP_DESCRIPTOR, String.class), CoreMatchers.is(\"S\"));\n        assertThat(\n                container.getBond(container.getAtom(1), container.getAtom(2)).getProperty(CDKConstants.CIP_DESCRIPTOR,\n                        String.class), CoreMatchers.is(\"E\"));\n        assertThat(\n                container.getBond(container.getAtom(5), container.getAtom(7)).getProperty(CDKConstants.CIP_DESCRIPTOR,\n                        String.class), CoreMatchers.is(\"Z\"));\n    }", "signature": "void label()", "full_signature": "@Test public void label()", "class_method_signature": "CIPToolTest.label()", "testcase": true, "constructor": false, "invocations": ["parseSmiles", "getInstance", "label", "assertThat", "getProperty", "getAtom", "is", "assertThat", "getProperty", "getAtom", "is", "assertThat", "getProperty", "getBond", "getAtom", "getAtom", "is", "assertThat", "getProperty", "getBond", "getAtom", "getAtom", "is"]}, "focal_class": {"identifier": "CIPTool", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int      HYDROGEN = -1;", "modifier": "public static final", "type": "int", "declarator": "HYDROGEN = -1", "var_name": "HYDROGEN"}, {"original_string": "private static CIPLigandRule cipRule  = new CIPLigandRule();", "modifier": "private static", "type": "CIPLigandRule", "declarator": "cipRule  = new CIPLigandRule()", "var_name": "cipRule"}], "methods": [{"identifier": "getCIPChirality", "parameters": "(LigancyFourChirality stereoCenter)", "modifiers": "public static", "return": "CIP_CHIRALITY", "signature": "CIP_CHIRALITY getCIPChirality(LigancyFourChirality stereoCenter)", "full_signature": "public static CIP_CHIRALITY getCIPChirality(LigancyFourChirality stereoCenter)", "class_method_signature": "CIPTool.getCIPChirality(LigancyFourChirality stereoCenter)", "testcase": false, "constructor": false}, {"identifier": "label", "parameters": "(IAtomContainer container)", "modifiers": "public static", "return": "void", "signature": "void label(IAtomContainer container)", "full_signature": "public static void label(IAtomContainer container)", "class_method_signature": "CIPTool.label(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "getCIPChirality", "parameters": "(IAtomContainer container, ITetrahedralChirality stereoCenter)", "modifiers": "public static", "return": "CIP_CHIRALITY", "signature": "CIP_CHIRALITY getCIPChirality(IAtomContainer container, ITetrahedralChirality stereoCenter)", "full_signature": "public static CIP_CHIRALITY getCIPChirality(IAtomContainer container, ITetrahedralChirality stereoCenter)", "class_method_signature": "CIPTool.getCIPChirality(IAtomContainer container, ITetrahedralChirality stereoCenter)", "testcase": false, "constructor": false}, {"identifier": "getCIPChirality", "parameters": "(IAtomContainer container, IDoubleBondStereochemistry stereoCenter)", "modifiers": "public static", "return": "CIP_CHIRALITY", "signature": "CIP_CHIRALITY getCIPChirality(IAtomContainer container, IDoubleBondStereochemistry stereoCenter)", "full_signature": "public static CIP_CHIRALITY getCIPChirality(IAtomContainer container, IDoubleBondStereochemistry stereoCenter)", "class_method_signature": "CIPTool.getCIPChirality(IAtomContainer container, IDoubleBondStereochemistry stereoCenter)", "testcase": false, "constructor": false}, {"identifier": "getLigands", "parameters": "(IAtom atom, IAtomContainer container, IAtom exclude)", "modifiers": "private static", "return": "ILigand[]", "signature": "ILigand[] getLigands(IAtom atom, IAtomContainer container, IAtom exclude)", "full_signature": "private static ILigand[] getLigands(IAtom atom, IAtomContainer container, IAtom exclude)", "class_method_signature": "CIPTool.getLigands(IAtom atom, IAtomContainer container, IAtom exclude)", "testcase": false, "constructor": false}, {"identifier": "checkIfAllLigandsAreDifferent", "parameters": "(ILigand[] ligands)", "modifiers": "public static", "return": "boolean", "signature": "boolean checkIfAllLigandsAreDifferent(ILigand[] ligands)", "full_signature": "public static boolean checkIfAllLigandsAreDifferent(ILigand[] ligands)", "class_method_signature": "CIPTool.checkIfAllLigandsAreDifferent(ILigand[] ligands)", "testcase": false, "constructor": false}, {"identifier": "order", "parameters": "(ILigand[] ligands)", "modifiers": "public static", "return": "ILigand[]", "signature": "ILigand[] order(ILigand[] ligands)", "full_signature": "public static ILigand[] order(ILigand[] ligands)", "class_method_signature": "CIPTool.order(ILigand[] ligands)", "testcase": false, "constructor": false}, {"identifier": "permParity", "parameters": "(final ILigand[] ligands)", "modifiers": "private static", "return": "int", "signature": "int permParity(final ILigand[] ligands)", "full_signature": "private static int permParity(final ILigand[] ligands)", "class_method_signature": "CIPTool.permParity(final ILigand[] ligands)", "testcase": false, "constructor": false}, {"identifier": "defineLigancyFourChirality", "parameters": "(IAtomContainer container, int chiralAtom,\n            int ligand1, int ligand2, int ligand3, int ligand4, Stereo stereo)", "modifiers": "public static", "return": "LigancyFourChirality", "signature": "LigancyFourChirality defineLigancyFourChirality(IAtomContainer container, int chiralAtom,\n            int ligand1, int ligand2, int ligand3, int ligand4, Stereo stereo)", "full_signature": "public static LigancyFourChirality defineLigancyFourChirality(IAtomContainer container, int chiralAtom,\n            int ligand1, int ligand2, int ligand3, int ligand4, Stereo stereo)", "class_method_signature": "CIPTool.defineLigancyFourChirality(IAtomContainer container, int chiralAtom,\n            int ligand1, int ligand2, int ligand3, int ligand4, Stereo stereo)", "testcase": false, "constructor": false}, {"identifier": "defineLigand", "parameters": "(IAtomContainer container, VisitedAtoms visitedAtoms, int chiralAtom,\n            int ligandAtom)", "modifiers": "public static", "return": "ILigand", "signature": "ILigand defineLigand(IAtomContainer container, VisitedAtoms visitedAtoms, int chiralAtom,\n            int ligandAtom)", "full_signature": "public static ILigand defineLigand(IAtomContainer container, VisitedAtoms visitedAtoms, int chiralAtom,\n            int ligandAtom)", "class_method_signature": "CIPTool.defineLigand(IAtomContainer container, VisitedAtoms visitedAtoms, int chiralAtom,\n            int ligandAtom)", "testcase": false, "constructor": false}, {"identifier": "getLigandLigands", "parameters": "(ILigand ligand)", "modifiers": "public static", "return": "ILigand[]", "signature": "ILigand[] getLigandLigands(ILigand ligand)", "full_signature": "public static ILigand[] getLigandLigands(ILigand ligand)", "class_method_signature": "CIPTool.getLigandLigands(ILigand ligand)", "testcase": false, "constructor": false}, {"identifier": "getDuplication", "parameters": "(Order order)", "modifiers": "private static", "return": "int", "signature": "int getDuplication(Order order)", "full_signature": "private static int getDuplication(Order order)", "class_method_signature": "CIPTool.getDuplication(Order order)", "testcase": false, "constructor": false}], "file": "descriptor/cip/src/main/java/org/openscience/cdk/geometry/cip/CIPTool.java"}, "focal_method": {"identifier": "label", "parameters": "(IAtomContainer container)", "modifiers": "public static", "return": "void", "body": "public static void label(IAtomContainer container) {\n\n        for (IStereoElement stereoElement : container.stereoElements()) {\n            if (stereoElement instanceof ITetrahedralChirality) {\n                ITetrahedralChirality tc = (ITetrahedralChirality) stereoElement;\n                tc.getChiralAtom().setProperty(CDKConstants.CIP_DESCRIPTOR, getCIPChirality(container, tc).toString());\n            } else if (stereoElement instanceof IDoubleBondStereochemistry) {\n                IDoubleBondStereochemistry dbs = (IDoubleBondStereochemistry) stereoElement;\n                dbs.getStereoBond()\n                        .setProperty(CDKConstants.CIP_DESCRIPTOR, getCIPChirality(container, dbs).toString());\n            }\n        }\n\n    }", "signature": "void label(IAtomContainer container)", "full_signature": "public static void label(IAtomContainer container)", "class_method_signature": "CIPTool.label(IAtomContainer container)", "testcase": false, "constructor": false, "invocations": ["stereoElements", "setProperty", "getChiralAtom", "toString", "getCIPChirality", "setProperty", "getStereoBond", "toString", "getCIPChirality"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}