{"test_class": {"identifier": "CrossValidationTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/ml/src/test/java/org/apache/ignite/ml/selection/cv/CrossValidationTest.java"}, "test_case": {"identifier": "testScoreWithBadDataset", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testScoreWithBadDataset() {\n        Map<Integer, double[]> data = new HashMap<>();\n\n        for (int i = 0; i < 1000; i++)\n            data.put(i, new double[] { i, i % 2 == 0 ? 1.0 : 0.0});\n\n        Vectorizer<Integer, double[], Integer, Double> vectorizer = new DoubleArrayVectorizer<Integer>().labeled(Vectorizer.LabelCoordinate.FIRST);\n\n        DecisionTreeClassificationTrainer trainer = new DecisionTreeClassificationTrainer(1, 0);\n\n        DebugCrossValidation<DecisionTreeNode, Double, Integer, double[]> scoreCalculator =\n            new DebugCrossValidation<>();\n\n        int folds = 4;\n\n        scoreCalculator\n            .withUpstreamMap(data)\n            .withAmountOfParts(1)\n            .withTrainer(trainer)\n            .withMetric(new Accuracy<>())\n\n            .withPreprocessor(vectorizer)\n            .withAmountOfFolds(folds)\n            .isRunningOnPipeline(false);\n\n        double[] scores = scoreCalculator.scoreByFolds();\n\n        assertEquals(folds, scores.length);\n\n        for (int i = 0; i < folds; i++)\n            assertTrue(scores[i] < 0.6);\n    }", "signature": "void testScoreWithBadDataset()", "full_signature": "@Test public void testScoreWithBadDataset()", "class_method_signature": "CrossValidationTest.testScoreWithBadDataset()", "testcase": true, "constructor": false, "invocations": ["put", "labeled", "isRunningOnPipeline", "withAmountOfFolds", "withPreprocessor", "withMetric", "withTrainer", "withAmountOfParts", "withUpstreamMap", "scoreByFolds", "assertEquals", "assertTrue"]}, "focal_class": {"identifier": "CrossValidation", "superclass": "extends AbstractCrossValidation<M, L, K, V>", "interfaces": "", "fields": [{"original_string": "private Ignite ignite;", "modifier": "private", "type": "Ignite", "declarator": "ignite", "var_name": "ignite"}, {"original_string": "private IgniteCache<K, V> upstreamCache;", "modifier": "private", "type": "IgniteCache<K, V>", "declarator": "upstreamCache", "var_name": "upstreamCache"}], "methods": [{"identifier": "scoreByFolds", "parameters": "()", "modifiers": "@Override public", "return": "double[]", "signature": "double[] scoreByFolds()", "full_signature": "@Override public double[] scoreByFolds()", "class_method_signature": "CrossValidation.scoreByFolds()", "testcase": false, "constructor": false}, {"identifier": "scorePipelineOnIgnite", "parameters": "()", "modifiers": "private", "return": "double[]", "signature": "double[] scorePipelineOnIgnite()", "full_signature": "private double[] scorePipelineOnIgnite()", "class_method_signature": "CrossValidation.scorePipelineOnIgnite()", "testcase": false, "constructor": false}, {"identifier": "scoreOnIgnite", "parameters": "()", "modifiers": "private", "return": "double[]", "signature": "double[] scoreOnIgnite()", "full_signature": "private double[] scoreOnIgnite()", "class_method_signature": "CrossValidation.scoreOnIgnite()", "testcase": false, "constructor": false}, {"identifier": "withIgnite", "parameters": "(Ignite ignite)", "modifiers": "public", "return": "CrossValidation<M, L, K, V>", "signature": "CrossValidation<M, L, K, V> withIgnite(Ignite ignite)", "full_signature": "public CrossValidation<M, L, K, V> withIgnite(Ignite ignite)", "class_method_signature": "CrossValidation.withIgnite(Ignite ignite)", "testcase": false, "constructor": false}, {"identifier": "withUpstreamCache", "parameters": "(IgniteCache<K, V> upstreamCache)", "modifiers": "public", "return": "CrossValidation<M, L, K, V>", "signature": "CrossValidation<M, L, K, V> withUpstreamCache(IgniteCache<K, V> upstreamCache)", "full_signature": "public CrossValidation<M, L, K, V> withUpstreamCache(IgniteCache<K, V> upstreamCache)", "class_method_signature": "CrossValidation.withUpstreamCache(IgniteCache<K, V> upstreamCache)", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/selection/cv/CrossValidation.java"}, "focal_method": {"identifier": "scoreByFolds", "parameters": "()", "modifiers": "@Override public", "return": "double[]", "body": "@Override public double[] scoreByFolds() {\n        double[] locScores;\n\n        locScores = isRunningOnPipeline ? scorePipelineOnIgnite() : scoreOnIgnite();\n\n        return locScores;\n    }", "signature": "double[] scoreByFolds()", "full_signature": "@Override public double[] scoreByFolds()", "class_method_signature": "CrossValidation.scoreByFolds()", "testcase": false, "constructor": false, "invocations": ["scorePipelineOnIgnite", "scoreOnIgnite"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}