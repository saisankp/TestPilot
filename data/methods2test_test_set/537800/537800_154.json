{"test_class": {"identifier": "ConsoleReporterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Locale locale = Locale.US;", "modifier": "private final", "type": "Locale", "declarator": "locale = Locale.US", "var_name": "locale"}, {"original_string": "private final TimeZone timeZone = TimeZone.getTimeZone(\"America/Los_Angeles\");", "modifier": "private final", "type": "TimeZone", "declarator": "timeZone = TimeZone.getTimeZone(\"America/Los_Angeles\")", "var_name": "timeZone"}, {"original_string": "private final MetricRegistry registry = mock(MetricRegistry.class);", "modifier": "private final", "type": "MetricRegistry", "declarator": "registry = mock(MetricRegistry.class)", "var_name": "registry"}, {"original_string": "private final Clock clock = mock(Clock.class);", "modifier": "private final", "type": "Clock", "declarator": "clock = mock(Clock.class)", "var_name": "clock"}, {"original_string": "private final ByteArrayOutputStream bytes = new ByteArrayOutputStream();", "modifier": "private final", "type": "ByteArrayOutputStream", "declarator": "bytes = new ByteArrayOutputStream()", "var_name": "bytes"}, {"original_string": "private final PrintStream output = new PrintStream(bytes);", "modifier": "private final", "type": "PrintStream", "declarator": "output = new PrintStream(bytes)", "var_name": "output"}, {"original_string": "private final ConsoleReporter reporter = ConsoleReporter.forRegistry(registry)\n            .outputTo(output)\n            .formattedFor(locale)\n            .withClock(clock)\n            .formattedFor(timeZone)\n            .convertRatesTo(TimeUnit.SECONDS)\n            .convertDurationsTo(TimeUnit.MILLISECONDS)\n            .filter(MetricFilter.ALL)\n            .build();", "modifier": "private final", "type": "ConsoleReporter", "declarator": "reporter = ConsoleReporter.forRegistry(registry)\n            .outputTo(output)\n            .formattedFor(locale)\n            .withClock(clock)\n            .formattedFor(timeZone)\n            .convertRatesTo(TimeUnit.SECONDS)\n            .convertDurationsTo(TimeUnit.MILLISECONDS)\n            .filter(MetricFilter.ALL)\n            .build()", "var_name": "reporter"}, {"original_string": "private String dateHeader;", "modifier": "private", "type": "String", "declarator": "dateHeader", "var_name": "dateHeader"}], "file": "metrics-core/src/test/java/com/codahale/metrics/ConsoleReporterTest.java"}, "test_case": {"identifier": "reportsMeterValues", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void reportsMeterValues() throws Exception {\n        final Meter meter = mock(Meter.class);\n        when(meter.getCount()).thenReturn(1L);\n        when(meter.getMeanRate()).thenReturn(2.0);\n        when(meter.getOneMinuteRate()).thenReturn(3.0);\n        when(meter.getFiveMinuteRate()).thenReturn(4.0);\n        when(meter.getFifteenMinuteRate()).thenReturn(5.0);\n\n        reporter.report(map(),\n                map(),\n                map(),\n                map(\"test.meter\", meter),\n                map());\n\n        assertThat(consoleOutput())\n                .isEqualTo(lines(\n                        dateHeader,\n                        \"\",\n                        \"-- Meters ----------------------------------------------------------------------\",\n                        \"test.meter\",\n                        \"             count = 1\",\n                        \"         mean rate = 2.00 events/second\",\n                        \"     1-minute rate = 3.00 events/second\",\n                        \"     5-minute rate = 4.00 events/second\",\n                        \"    15-minute rate = 5.00 events/second\",\n                        \"\",\n                        \"\"\n                ));\n    }", "signature": "void reportsMeterValues()", "full_signature": "@Test public void reportsMeterValues()", "class_method_signature": "ConsoleReporterTest.reportsMeterValues()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getCount", "thenReturn", "when", "getMeanRate", "thenReturn", "when", "getOneMinuteRate", "thenReturn", "when", "getFiveMinuteRate", "thenReturn", "when", "getFifteenMinuteRate", "report", "map", "map", "map", "map", "map", "isEqualTo", "assertThat", "consoleOutput", "lines"]}, "focal_class": {"identifier": "ConsoleReporter", "superclass": "extends ScheduledReporter", "interfaces": "", "fields": [{"original_string": "private static final int CONSOLE_WIDTH = 80;", "modifier": "private static final", "type": "int", "declarator": "CONSOLE_WIDTH = 80", "var_name": "CONSOLE_WIDTH"}, {"original_string": "private final PrintStream output;", "modifier": "private final", "type": "PrintStream", "declarator": "output", "var_name": "output"}, {"original_string": "private final Locale locale;", "modifier": "private final", "type": "Locale", "declarator": "locale", "var_name": "locale"}, {"original_string": "private final Clock clock;", "modifier": "private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "private final DateFormat dateFormat;", "modifier": "private final", "type": "DateFormat", "declarator": "dateFormat", "var_name": "dateFormat"}], "methods": [{"identifier": "forRegistry", "parameters": "(MetricRegistry registry)", "modifiers": "public static", "return": "Builder", "signature": "Builder forRegistry(MetricRegistry registry)", "full_signature": "public static Builder forRegistry(MetricRegistry registry)", "class_method_signature": "ConsoleReporter.forRegistry(MetricRegistry registry)", "testcase": false, "constructor": false}, {"identifier": "ConsoleReporter", "parameters": "(MetricRegistry registry,\n                            PrintStream output,\n                            Locale locale,\n                            Clock clock,\n                            TimeZone timeZone,\n                            TimeUnit rateUnit,\n                            TimeUnit durationUnit,\n                            MetricFilter filter,\n                            ScheduledExecutorService executor,\n                            boolean shutdownExecutorOnStop,\n                            Set<MetricAttribute> disabledMetricAttributes)", "modifiers": "private", "return": "", "signature": " ConsoleReporter(MetricRegistry registry,\n                            PrintStream output,\n                            Locale locale,\n                            Clock clock,\n                            TimeZone timeZone,\n                            TimeUnit rateUnit,\n                            TimeUnit durationUnit,\n                            MetricFilter filter,\n                            ScheduledExecutorService executor,\n                            boolean shutdownExecutorOnStop,\n                            Set<MetricAttribute> disabledMetricAttributes)", "full_signature": "private  ConsoleReporter(MetricRegistry registry,\n                            PrintStream output,\n                            Locale locale,\n                            Clock clock,\n                            TimeZone timeZone,\n                            TimeUnit rateUnit,\n                            TimeUnit durationUnit,\n                            MetricFilter filter,\n                            ScheduledExecutorService executor,\n                            boolean shutdownExecutorOnStop,\n                            Set<MetricAttribute> disabledMetricAttributes)", "class_method_signature": "ConsoleReporter.ConsoleReporter(MetricRegistry registry,\n                            PrintStream output,\n                            Locale locale,\n                            Clock clock,\n                            TimeZone timeZone,\n                            TimeUnit rateUnit,\n                            TimeUnit durationUnit,\n                            MetricFilter filter,\n                            ScheduledExecutorService executor,\n                            boolean shutdownExecutorOnStop,\n                            Set<MetricAttribute> disabledMetricAttributes)", "testcase": false, "constructor": true}, {"identifier": "report", "parameters": "(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "modifiers": "@Override @SuppressWarnings(\"rawtypes\") public", "return": "void", "signature": "void report(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "full_signature": "@Override @SuppressWarnings(\"rawtypes\") public void report(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "class_method_signature": "ConsoleReporter.report(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "testcase": false, "constructor": false}, {"identifier": "printMeter", "parameters": "(Meter meter)", "modifiers": "private", "return": "void", "signature": "void printMeter(Meter meter)", "full_signature": "private void printMeter(Meter meter)", "class_method_signature": "ConsoleReporter.printMeter(Meter meter)", "testcase": false, "constructor": false}, {"identifier": "printCounter", "parameters": "(Map.Entry<String, Counter> entry)", "modifiers": "private", "return": "void", "signature": "void printCounter(Map.Entry<String, Counter> entry)", "full_signature": "private void printCounter(Map.Entry<String, Counter> entry)", "class_method_signature": "ConsoleReporter.printCounter(Map.Entry<String, Counter> entry)", "testcase": false, "constructor": false}, {"identifier": "printGauge", "parameters": "(Gauge<?> gauge)", "modifiers": "private", "return": "void", "signature": "void printGauge(Gauge<?> gauge)", "full_signature": "private void printGauge(Gauge<?> gauge)", "class_method_signature": "ConsoleReporter.printGauge(Gauge<?> gauge)", "testcase": false, "constructor": false}, {"identifier": "printHistogram", "parameters": "(Histogram histogram)", "modifiers": "private", "return": "void", "signature": "void printHistogram(Histogram histogram)", "full_signature": "private void printHistogram(Histogram histogram)", "class_method_signature": "ConsoleReporter.printHistogram(Histogram histogram)", "testcase": false, "constructor": false}, {"identifier": "printTimer", "parameters": "(Timer timer)", "modifiers": "private", "return": "void", "signature": "void printTimer(Timer timer)", "full_signature": "private void printTimer(Timer timer)", "class_method_signature": "ConsoleReporter.printTimer(Timer timer)", "testcase": false, "constructor": false}, {"identifier": "printWithBanner", "parameters": "(String s, char c)", "modifiers": "private", "return": "void", "signature": "void printWithBanner(String s, char c)", "full_signature": "private void printWithBanner(String s, char c)", "class_method_signature": "ConsoleReporter.printWithBanner(String s, char c)", "testcase": false, "constructor": false}, {"identifier": "printIfEnabled", "parameters": "(MetricAttribute type, String status)", "modifiers": "private", "return": "void", "signature": "void printIfEnabled(MetricAttribute type, String status)", "full_signature": "private void printIfEnabled(MetricAttribute type, String status)", "class_method_signature": "ConsoleReporter.printIfEnabled(MetricAttribute type, String status)", "testcase": false, "constructor": false}], "file": "metrics-core/src/main/java/com/codahale/metrics/ConsoleReporter.java"}, "focal_method": {"identifier": "report", "parameters": "(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "modifiers": "@Override @SuppressWarnings(\"rawtypes\") public", "return": "void", "body": "@Override\n    @SuppressWarnings(\"rawtypes\")\n    public void report(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers) {\n        final String dateTime = dateFormat.format(new Date(clock.getTime()));\n        printWithBanner(dateTime, '=');\n        output.println();\n\n        if (!gauges.isEmpty()) {\n            printWithBanner(\"-- Gauges\", '-');\n            for (Map.Entry<String, Gauge> entry : gauges.entrySet()) {\n                output.println(entry.getKey());\n                printGauge(entry.getValue());\n            }\n            output.println();\n        }\n\n        if (!counters.isEmpty()) {\n            printWithBanner(\"-- Counters\", '-');\n            for (Map.Entry<String, Counter> entry : counters.entrySet()) {\n                output.println(entry.getKey());\n                printCounter(entry);\n            }\n            output.println();\n        }\n\n        if (!histograms.isEmpty()) {\n            printWithBanner(\"-- Histograms\", '-');\n            for (Map.Entry<String, Histogram> entry : histograms.entrySet()) {\n                output.println(entry.getKey());\n                printHistogram(entry.getValue());\n            }\n            output.println();\n        }\n\n        if (!meters.isEmpty()) {\n            printWithBanner(\"-- Meters\", '-');\n            for (Map.Entry<String, Meter> entry : meters.entrySet()) {\n                output.println(entry.getKey());\n                printMeter(entry.getValue());\n            }\n            output.println();\n        }\n\n        if (!timers.isEmpty()) {\n            printWithBanner(\"-- Timers\", '-');\n            for (Map.Entry<String, Timer> entry : timers.entrySet()) {\n                output.println(entry.getKey());\n                printTimer(entry.getValue());\n            }\n            output.println();\n        }\n\n        output.println();\n        output.flush();\n    }", "signature": "void report(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "full_signature": "@Override @SuppressWarnings(\"rawtypes\") public void report(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "class_method_signature": "ConsoleReporter.report(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "testcase": false, "constructor": false, "invocations": ["format", "getTime", "printWithBanner", "println", "isEmpty", "printWithBanner", "entrySet", "println", "getKey", "printGauge", "getValue", "println", "isEmpty", "printWithBanner", "entrySet", "println", "getKey", "printCounter", "println", "isEmpty", "printWithBanner", "entrySet", "println", "getKey", "printHistogram", "getValue", "println", "isEmpty", "printWithBanner", "entrySet", "println", "getKey", "printMeter", "getValue", "println", "isEmpty", "printWithBanner", "entrySet", "println", "getKey", "printTimer", "getValue", "println", "println", "flush"]}, "repository": {"repo_id": 537800, "url": "https://github.com/dropwizard/metrics", "stars": 6879, "created": "2/26/2010 7:44:42 PM +00:00", "updates": "2020-01-26T22:33:14+00:00", "fork": "False", "license": "licensed"}}