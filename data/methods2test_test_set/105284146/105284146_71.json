{"test_class": {"identifier": "AsciiTableFormatterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TableFormatterConfig config = new TableFormatterConfig(Locale.US, \"inv\");", "modifier": "private", "type": "TableFormatterConfig", "declarator": "config = new TableFormatterConfig(Locale.US, \"inv\")", "var_name": "config"}, {"original_string": "@Rule\n    public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}], "file": "commons/src/test/java/com/powsybl/commons/io/table/AsciiTableFormatterTest.java"}, "test_case": {"identifier": "testUnauthorizedColspan", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUnauthorizedColspan() throws IOException {\n        thrown.expect(IllegalArgumentException.class);\n        thrown.expectMessage(\"You have exceded the authorized colspan\");\n\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        try (Writer writer = new OutputStreamWriter(bos, StandardCharsets.UTF_8);\n             AsciiTableFormatter formatter = new AsciiTableFormatter(writer,  null, config,\n                new Column(\"column1\").setColspan(4).setHorizontalAlignment(HorizontalAlignment.CENTER),\n                new Column(\"column2\").setColspan(2).setHorizontalAlignment(HorizontalAlignment.CENTER))) {\n            formatter.writeCell(\"Line:1 Cell:1\", 1)\n                    .writeCell(\"Line:1 Cell:2\", 1)\n                    .writeCell(\"Line:1 Cell:3\", 1)\n                    .writeCell(\"Line:1 Cell:4\", 2)\n                    .writeCell(\"Line:1 Cell:5\", 1);\n        }\n    }", "signature": "void testUnauthorizedColspan()", "full_signature": "@Test public void testUnauthorizedColspan()", "class_method_signature": "AsciiTableFormatterTest.testUnauthorizedColspan()", "testcase": true, "constructor": false, "invocations": ["expect", "expectMessage", "setHorizontalAlignment", "setColspan", "setHorizontalAlignment", "setColspan", "writeCell", "writeCell", "writeCell", "writeCell", "writeCell"]}, "focal_class": {"identifier": "AsciiTableFormatter", "superclass": "extends AbstractTableFormatter", "interfaces": "", "fields": [{"original_string": "private final String title;", "modifier": "private final", "type": "String", "declarator": "title", "var_name": "title"}, {"original_string": "private final Table table;", "modifier": "private final", "type": "Table", "declarator": "table", "var_name": "table"}, {"original_string": "private final int cellsCount;", "modifier": "private final", "type": "int", "declarator": "cellsCount", "var_name": "cellsCount"}, {"original_string": "private int rowCellIndex = 0;", "modifier": "private", "type": "int", "declarator": "rowCellIndex = 0", "var_name": "rowCellIndex"}, {"original_string": "private int cellIndex = 0;", "modifier": "private", "type": "int", "declarator": "cellIndex = 0", "var_name": "cellIndex"}], "methods": [{"identifier": "AsciiTableFormatter", "parameters": "(Writer writer, String title, TableFormatterConfig config, Column... columns)", "modifiers": "public", "return": "", "signature": " AsciiTableFormatter(Writer writer, String title, TableFormatterConfig config, Column... columns)", "full_signature": "public  AsciiTableFormatter(Writer writer, String title, TableFormatterConfig config, Column... columns)", "class_method_signature": "AsciiTableFormatter.AsciiTableFormatter(Writer writer, String title, TableFormatterConfig config, Column... columns)", "testcase": false, "constructor": true}, {"identifier": "AsciiTableFormatter", "parameters": "(String title, Column... columns)", "modifiers": "public", "return": "", "signature": " AsciiTableFormatter(String title, Column... columns)", "full_signature": "public  AsciiTableFormatter(String title, Column... columns)", "class_method_signature": "AsciiTableFormatter.AsciiTableFormatter(String title, Column... columns)", "testcase": false, "constructor": true}, {"identifier": "AsciiTableFormatter", "parameters": "(Writer writer, String title, Column... columns)", "modifiers": "public", "return": "", "signature": " AsciiTableFormatter(Writer writer, String title, Column... columns)", "full_signature": "public  AsciiTableFormatter(Writer writer, String title, Column... columns)", "class_method_signature": "AsciiTableFormatter.AsciiTableFormatter(Writer writer, String title, Column... columns)", "testcase": false, "constructor": true}, {"identifier": "writeEmptyLine", "parameters": "()", "modifiers": "@Override public", "return": "TableFormatter", "signature": "TableFormatter writeEmptyLine()", "full_signature": "@Override public TableFormatter writeEmptyLine()", "class_method_signature": "AsciiTableFormatter.writeEmptyLine()", "testcase": false, "constructor": false}, {"identifier": "writeComment", "parameters": "(String comment)", "modifiers": "@Override public", "return": "TableFormatter", "signature": "TableFormatter writeComment(String comment)", "full_signature": "@Override public TableFormatter writeComment(String comment)", "class_method_signature": "AsciiTableFormatter.writeComment(String comment)", "testcase": false, "constructor": false}, {"identifier": "writeCell", "parameters": "(String value, int colspan)", "modifiers": "@Override public", "return": "TableFormatter", "signature": "TableFormatter writeCell(String value, int colspan)", "full_signature": "@Override public TableFormatter writeCell(String value, int colspan)", "class_method_signature": "AsciiTableFormatter.writeCell(String value, int colspan)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(String value)", "modifiers": "@Override protected", "return": "TableFormatter", "signature": "TableFormatter write(String value)", "full_signature": "@Override protected TableFormatter write(String value)", "class_method_signature": "AsciiTableFormatter.write(String value)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "AsciiTableFormatter.close()", "testcase": false, "constructor": false}, {"identifier": "convertCellStyle", "parameters": "(HorizontalAlignment horizontalAlignment)", "modifiers": "private static", "return": "CellStyle", "signature": "CellStyle convertCellStyle(HorizontalAlignment horizontalAlignment)", "full_signature": "private static CellStyle convertCellStyle(HorizontalAlignment horizontalAlignment)", "class_method_signature": "AsciiTableFormatter.convertCellStyle(HorizontalAlignment horizontalAlignment)", "testcase": false, "constructor": false}], "file": "commons/src/main/java/com/powsybl/commons/io/table/AsciiTableFormatter.java"}, "focal_method": {"identifier": "writeCell", "parameters": "(String value, int colspan)", "modifiers": "@Override public", "return": "TableFormatter", "body": "@Override\n    public TableFormatter writeCell(String value, int colspan) {\n        if (colspan > columns[column].getColspan() - cellIndex) {\n            throw new IllegalArgumentException(\"You have exceded the authorized colspan\");\n        }\n\n        HorizontalAlignment horizontalAlignment = (colspan == 1) ? columns[column].getHorizontalAlignment() : HorizontalAlignment.CENTER;\n        table.addCell(value, convertCellStyle(horizontalAlignment), colspan);\n\n        rowCellIndex = (rowCellIndex + 1) % cellsCount;\n        cellIndex = (cellIndex + colspan) % columns[column].getColspan();\n        if (cellIndex == 0) {\n            column = (column + 1) % columns.length;\n        }\n        return this;\n    }", "signature": "TableFormatter writeCell(String value, int colspan)", "full_signature": "@Override public TableFormatter writeCell(String value, int colspan)", "class_method_signature": "AsciiTableFormatter.writeCell(String value, int colspan)", "testcase": false, "constructor": false, "invocations": ["getColspan", "getHorizontalAlignment", "addCell", "convertCellStyle", "getColspan"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}