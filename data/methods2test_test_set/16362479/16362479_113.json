{"test_class": {"identifier": "MessageTrackerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(MessageTrackerTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(MessageTrackerTest.class)", "var_name": "LOG"}, {"original_string": "private FakeTicker ticker;", "modifier": "private", "type": "FakeTicker", "declarator": "ticker", "var_name": "ticker"}, {"original_string": "private MessageTracker messageTracker;", "modifier": "private", "type": "MessageTracker", "declarator": "messageTracker", "var_name": "messageTracker"}], "file": "opendaylight/md-sal/sal-clustering-commons/src/test/java/org/opendaylight/controller/cluster/common/actor/MessageTrackerTest.java"}, "test_case": {"identifier": "testNoTracking", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNoTracking() {\n        MessageTracker.Context context1 = messageTracker.received(new Foo());\n        context1.close();\n\n        ticker.advance(20, MILLISECONDS);\n        MessageTracker.Context context2 = messageTracker.received(new Foo());\n        context2.close();\n    }", "signature": "void testNoTracking()", "full_signature": "@Test public void testNoTracking()", "class_method_signature": "MessageTrackerTest.testNoTracking()", "testcase": true, "constructor": false, "invocations": ["received", "close", "advance", "received", "close"]}, "focal_class": {"identifier": "MessageTracker", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(MessageTracker.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(MessageTracker.class)", "var_name": "LOG"}, {"original_string": "private static final Context NO_OP_CONTEXT = new Context() {\n        @Override\n        public void close() {\n            // No-op\n        }\n\n        @Override\n        public Optional<Error> error() {\n            return Optional.empty();\n        }\n    };", "modifier": "private static final", "type": "Context", "declarator": "NO_OP_CONTEXT = new Context() {\n        @Override\n        public void close() {\n            // No-op\n        }\n\n        @Override\n        public Optional<Error> error() {\n            return Optional.empty();\n        }\n    }", "var_name": "NO_OP_CONTEXT"}, {"original_string": "private final List<MessageProcessingTime> messagesSinceLastExpectedMessage = new LinkedList<>();", "modifier": "private final", "type": "List<MessageProcessingTime>", "declarator": "messagesSinceLastExpectedMessage = new LinkedList<>()", "var_name": "messagesSinceLastExpectedMessage"}, {"original_string": "private final CurrentMessageContext currentMessageContext;", "modifier": "private final", "type": "CurrentMessageContext", "declarator": "currentMessageContext", "var_name": "currentMessageContext"}, {"original_string": "private final Stopwatch expectedMessageWatch;", "modifier": "private final", "type": "Stopwatch", "declarator": "expectedMessageWatch", "var_name": "expectedMessageWatch"}, {"original_string": "private final Class<?> expectedMessageClass;", "modifier": "private final", "type": "Class<?>", "declarator": "expectedMessageClass", "var_name": "expectedMessageClass"}, {"original_string": "private final long expectedArrivalInterval;", "modifier": "private final", "type": "long", "declarator": "expectedArrivalInterval", "var_name": "expectedArrivalInterval"}, {"original_string": "private final Ticker ticker;", "modifier": "private final", "type": "Ticker", "declarator": "ticker", "var_name": "ticker"}, {"original_string": "private Object lastExpectedMessage;", "modifier": "private", "type": "Object", "declarator": "lastExpectedMessage", "var_name": "lastExpectedMessage"}], "methods": [{"identifier": "MessageTracker", "parameters": "(final Class<?> expectedMessageClass, final long expectedArrivalIntervalInMillis,\n            final Ticker ticker)", "modifiers": "@VisibleForTesting", "return": "", "signature": " MessageTracker(final Class<?> expectedMessageClass, final long expectedArrivalIntervalInMillis,\n            final Ticker ticker)", "full_signature": "@VisibleForTesting  MessageTracker(final Class<?> expectedMessageClass, final long expectedArrivalIntervalInMillis,\n            final Ticker ticker)", "class_method_signature": "MessageTracker.MessageTracker(final Class<?> expectedMessageClass, final long expectedArrivalIntervalInMillis,\n            final Ticker ticker)", "testcase": false, "constructor": true}, {"identifier": "MessageTracker", "parameters": "(final Class<?> expectedMessageClass, final long expectedArrivalIntervalInMillis)", "modifiers": "public", "return": "", "signature": " MessageTracker(final Class<?> expectedMessageClass, final long expectedArrivalIntervalInMillis)", "full_signature": "public  MessageTracker(final Class<?> expectedMessageClass, final long expectedArrivalIntervalInMillis)", "class_method_signature": "MessageTracker.MessageTracker(final Class<?> expectedMessageClass, final long expectedArrivalIntervalInMillis)", "testcase": false, "constructor": true}, {"identifier": "begin", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void begin()", "full_signature": "public void begin()", "class_method_signature": "MessageTracker.begin()", "testcase": false, "constructor": false}, {"identifier": "received", "parameters": "(final Object message)", "modifiers": "public", "return": "Context", "signature": "Context received(final Object message)", "full_signature": "public Context received(final Object message)", "class_method_signature": "MessageTracker.received(final Object message)", "testcase": false, "constructor": false}, {"identifier": "processed", "parameters": "(final Object message, final long messageElapseTimeInNanos)", "modifiers": "", "return": "void", "signature": "void processed(final Object message, final long messageElapseTimeInNanos)", "full_signature": " void processed(final Object message, final long messageElapseTimeInNanos)", "class_method_signature": "MessageTracker.processed(final Object message, final long messageElapseTimeInNanos)", "testcase": false, "constructor": false}, {"identifier": "getMessagesSinceLastExpectedMessage", "parameters": "()", "modifiers": "public", "return": "List<MessageProcessingTime>", "signature": "List<MessageProcessingTime> getMessagesSinceLastExpectedMessage()", "full_signature": "public List<MessageProcessingTime> getMessagesSinceLastExpectedMessage()", "class_method_signature": "MessageTracker.getMessagesSinceLastExpectedMessage()", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-clustering-commons/src/main/java/org/opendaylight/controller/cluster/common/actor/MessageTracker.java"}, "focal_method": {"identifier": "received", "parameters": "(final Object message)", "modifiers": "public", "return": "Context", "body": "public Context received(final Object message) {\n        if (!expectedMessageWatch.isRunning()) {\n            return NO_OP_CONTEXT;\n        }\n\n        if (expectedMessageClass.isInstance(message)) {\n            final long actualElapsedTime = expectedMessageWatch.elapsed(NANOSECONDS);\n            if (actualElapsedTime > expectedArrivalInterval) {\n                return new ErrorContext(message, new FailedExpectation(lastExpectedMessage, message,\n                        messagesSinceLastExpectedMessage, expectedArrivalInterval, actualElapsedTime));\n            }\n            lastExpectedMessage = message;\n            messagesSinceLastExpectedMessage.clear();\n            expectedMessageWatch.reset().start();\n        }\n\n        currentMessageContext.reset(message);\n        return currentMessageContext;\n    }", "signature": "Context received(final Object message)", "full_signature": "public Context received(final Object message)", "class_method_signature": "MessageTracker.received(final Object message)", "testcase": false, "constructor": false, "invocations": ["isRunning", "isInstance", "elapsed", "clear", "start", "reset", "reset"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}