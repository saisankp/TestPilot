{"test_class": {"identifier": "TestConcurrentRowCallables", "superclass": "extends TestBase", "interfaces": "", "fields": [{"original_string": "private ExecutorService threadPool;", "modifier": "private", "type": "ExecutorService", "declarator": "threadPool", "var_name": "threadPool"}], "file": "themis-client/src/test/java/org/apache/hadoop/hbase/themis/TestConcurrentRowCallables.java"}, "test_case": {"identifier": "testDuplicateRowCallable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testDuplicateRowCallable() throws IOException {\n    ConcurrentRowCallables<byte[]> callables = new ConcurrentRowCallables<byte[]>(threadPool);\n    callables.addCallable(new TimeoutRowCallable(TABLENAME, ROW));\n    callables.addCallable(new TimeoutRowCallable(TABLENAME, ANOTHER_ROW));\n    callables.addCallable(new TimeoutRowCallable(TABLENAME, ANOTHER_FAMILY));\n    callables.addCallable(new TimeoutRowCallable(TABLENAME, ANOTHER_QUALIFIER));\n    try {\n      // duplicated with futures\n      callables.addCallable(new TimeoutRowCallable(TABLENAME, ROW));\n      Assert.fail();\n    } catch (ThemisFatalException e) {}\n    try {\n      callables.addCallable(new TimeoutRowCallable(TABLENAME, ANOTHER_QUALIFIER));\n      Assert.fail();\n    } catch (ThemisFatalException e) {}\n  }", "signature": "void testDuplicateRowCallable()", "full_signature": "@Test public void testDuplicateRowCallable()", "class_method_signature": "TestConcurrentRowCallables.testDuplicateRowCallable()", "testcase": true, "constructor": false, "invocations": ["addCallable", "addCallable", "addCallable", "addCallable", "addCallable", "fail", "addCallable", "fail"]}, "focal_class": {"identifier": "ConcurrentRowCallables", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ExecutorService threadPool;", "modifier": "private final", "type": "ExecutorService", "declarator": "threadPool", "var_name": "threadPool"}, {"original_string": "Map<TableAndRow, Future<R>> futureMaps = new TreeMap<TableAndRow, Future<R>>();", "modifier": "", "type": "Map<TableAndRow, Future<R>>", "declarator": "futureMaps = new TreeMap<TableAndRow, Future<R>>()", "var_name": "futureMaps"}, {"original_string": "Map<TableAndRow, R> resultMaps = new TreeMap<TableAndRow, R>();", "modifier": "", "type": "Map<TableAndRow, R>", "declarator": "resultMaps = new TreeMap<TableAndRow, R>()", "var_name": "resultMaps"}, {"original_string": "Map<TableAndRow, IOException> exceptionMaps = new TreeMap<TableAndRow, IOException>();", "modifier": "", "type": "Map<TableAndRow, IOException>", "declarator": "exceptionMaps = new TreeMap<TableAndRow, IOException>()", "var_name": "exceptionMaps"}], "methods": [{"identifier": "ConcurrentRowCallables", "parameters": "(ExecutorService threadPool)", "modifiers": "public", "return": "", "signature": " ConcurrentRowCallables(ExecutorService threadPool)", "full_signature": "public  ConcurrentRowCallables(ExecutorService threadPool)", "class_method_signature": "ConcurrentRowCallables.ConcurrentRowCallables(ExecutorService threadPool)", "testcase": false, "constructor": true}, {"identifier": "addCallable", "parameters": "(RowCallable<R> callable)", "modifiers": "public", "return": "void", "signature": "void addCallable(RowCallable<R> callable)", "full_signature": "public void addCallable(RowCallable<R> callable)", "class_method_signature": "ConcurrentRowCallables.addCallable(RowCallable<R> callable)", "testcase": false, "constructor": false}, {"identifier": "waitForResult", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void waitForResult()", "full_signature": "public void waitForResult()", "class_method_signature": "ConcurrentRowCallables.waitForResult()", "testcase": false, "constructor": false}, {"identifier": "getResults", "parameters": "()", "modifiers": "public", "return": "Map<TableAndRow, R>", "signature": "Map<TableAndRow, R> getResults()", "full_signature": "public Map<TableAndRow, R> getResults()", "class_method_signature": "ConcurrentRowCallables.getResults()", "testcase": false, "constructor": false}, {"identifier": "getResult", "parameters": "(byte[] tableName, byte[] rowkey)", "modifiers": "public", "return": "R", "signature": "R getResult(byte[] tableName, byte[] rowkey)", "full_signature": "public R getResult(byte[] tableName, byte[] rowkey)", "class_method_signature": "ConcurrentRowCallables.getResult(byte[] tableName, byte[] rowkey)", "testcase": false, "constructor": false}, {"identifier": "getExceptions", "parameters": "()", "modifiers": "public", "return": "Map<TableAndRow, IOException>", "signature": "Map<TableAndRow, IOException> getExceptions()", "full_signature": "public Map<TableAndRow, IOException> getExceptions()", "class_method_signature": "ConcurrentRowCallables.getExceptions()", "testcase": false, "constructor": false}, {"identifier": "getException", "parameters": "(byte[] tableName, byte[] rowkey)", "modifiers": "public", "return": "IOException", "signature": "IOException getException(byte[] tableName, byte[] rowkey)", "full_signature": "public IOException getException(byte[] tableName, byte[] rowkey)", "class_method_signature": "ConcurrentRowCallables.getException(byte[] tableName, byte[] rowkey)", "testcase": false, "constructor": false}], "file": "themis-client/src/main/java/org/apache/hadoop/hbase/themis/ConcurrentRowCallables.java"}, "focal_method": {"identifier": "addCallable", "parameters": "(RowCallable<R> callable)", "modifiers": "public", "return": "void", "body": "public void addCallable(RowCallable<R> callable) throws IOException {\n    TableAndRow tableAndRow = callable.getTableAndRow();\n    if (this.futureMaps.containsKey(tableAndRow) || this.exceptionMaps.containsKey(tableAndRow)) {\n      throw new ThemisFatalException(\"add duplicated row callable, tableAndRow=\" + tableAndRow);\n    }\n    try {\n      Future<R> future = this.threadPool.submit(callable);\n      this.futureMaps.put(tableAndRow, future);\n    } catch (Throwable e) {\n      exceptionMaps.put(tableAndRow, new IOException(e));\n    }\n  }", "signature": "void addCallable(RowCallable<R> callable)", "full_signature": "public void addCallable(RowCallable<R> callable)", "class_method_signature": "ConcurrentRowCallables.addCallable(RowCallable<R> callable)", "testcase": false, "constructor": false, "invocations": ["getTableAndRow", "containsKey", "containsKey", "submit", "put", "put"]}, "repository": {"repo_id": 19147361, "url": "https://github.com/XiaoMi/themis", "language": "Java", "is_fork": false, "fork_count": 57, "stargazer_count": 212, "size": 1400, "license": "Apache License 2.0"}}