{"test_class": {"identifier": "InstantColumnTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final InstantColumn instanceColumn = InstantColumn.create(\"Test\");", "modifier": "private final", "type": "InstantColumn", "declarator": "instanceColumn = InstantColumn.create(\"Test\")", "var_name": "instanceColumn"}, {"original_string": "private Instant now = Instant.now();", "modifier": "private", "type": "Instant", "declarator": "now = Instant.now()", "var_name": "now"}, {"original_string": "private long baseline = now.getEpochSecond();", "modifier": "private", "type": "long", "declarator": "baseline = now.getEpochSecond()", "var_name": "baseline"}, {"original_string": "private long before = baseline - 100L;", "modifier": "private", "type": "long", "declarator": "before = baseline - 100L", "var_name": "before"}, {"original_string": "private long after = baseline + 100L;", "modifier": "private", "type": "long", "declarator": "after = baseline + 100L", "var_name": "after"}, {"original_string": "private Instant baselineInst = Instant.ofEpochSecond(baseline);", "modifier": "private", "type": "Instant", "declarator": "baselineInst = Instant.ofEpochSecond(baseline)", "var_name": "baselineInst"}, {"original_string": "private Instant beforeInst = Instant.ofEpochSecond(before);", "modifier": "private", "type": "Instant", "declarator": "beforeInst = Instant.ofEpochSecond(before)", "var_name": "beforeInst"}, {"original_string": "private Instant afterInst = Instant.ofEpochSecond(after);", "modifier": "private", "type": "Instant", "declarator": "afterInst = Instant.ofEpochSecond(after)", "var_name": "afterInst"}], "file": "core/src/test/java/tech/tablesaw/api/InstantColumnTest.java"}, "test_case": {"identifier": "isMissing", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void isMissing() {\n    assertEquals(3, instanceColumn.isMissing().get(0));\n  }", "signature": "void isMissing()", "full_signature": "@Test void isMissing()", "class_method_signature": "InstantColumnTest.isMissing()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "get", "isMissing"]}, "focal_class": {"identifier": "InstantColumn", "superclass": "extends AbstractColumn<InstantColumn, Instant>", "interfaces": "implements InstantMapFunctions,\n        TemporalFillers<Instant, InstantColumn>,\n        TemporalFilters<Instant>,\n        CategoricalColumn<Instant>", "fields": [{"original_string": "private LongArrayList data;", "modifier": "private", "type": "LongArrayList", "declarator": "data", "var_name": "data"}, {"original_string": "private final IntComparator comparator =\n      (r1, r2) -> {\n        long f1 = getPackedDateTime(r1);\n        long f2 = getPackedDateTime(r2);\n        return Long.compare(f1, f2);\n      };", "modifier": "private final", "type": "IntComparator", "declarator": "comparator =\n      (r1, r2) -> {\n        long f1 = getPackedDateTime(r1);\n        long f2 = getPackedDateTime(r2);\n        return Long.compare(f1, f2);\n      }", "var_name": "comparator"}, {"original_string": "private InstantColumnFormatter printFormatter = new InstantColumnFormatter();", "modifier": "private", "type": "InstantColumnFormatter", "declarator": "printFormatter = new InstantColumnFormatter()", "var_name": "printFormatter"}], "methods": [{"identifier": "InstantColumn", "parameters": "(String name, LongArrayList data)", "modifiers": "private", "return": "", "signature": " InstantColumn(String name, LongArrayList data)", "full_signature": "private  InstantColumn(String name, LongArrayList data)", "class_method_signature": "InstantColumn.InstantColumn(String name, LongArrayList data)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(String name)", "modifiers": "public static", "return": "InstantColumn", "signature": "InstantColumn create(String name)", "full_signature": "public static InstantColumn create(String name)", "class_method_signature": "InstantColumn.create(String name)", "testcase": false, "constructor": false}, {"identifier": "createInternal", "parameters": "(String name, long[] data)", "modifiers": "public static", "return": "InstantColumn", "signature": "InstantColumn createInternal(String name, long[] data)", "full_signature": "public static InstantColumn createInternal(String name, long[] data)", "class_method_signature": "InstantColumn.createInternal(String name, long[] data)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String name, int initialSize)", "modifiers": "public static", "return": "InstantColumn", "signature": "InstantColumn create(String name, int initialSize)", "full_signature": "public static InstantColumn create(String name, int initialSize)", "class_method_signature": "InstantColumn.create(String name, int initialSize)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String name, Collection<Instant> data)", "modifiers": "public static", "return": "InstantColumn", "signature": "InstantColumn create(String name, Collection<Instant> data)", "full_signature": "public static InstantColumn create(String name, Collection<Instant> data)", "class_method_signature": "InstantColumn.create(String name, Collection<Instant> data)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String name, Instant... data)", "modifiers": "public static", "return": "InstantColumn", "signature": "InstantColumn create(String name, Instant... data)", "full_signature": "public static InstantColumn create(String name, Instant... data)", "class_method_signature": "InstantColumn.create(String name, Instant... data)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String name, Stream<Instant> stream)", "modifiers": "public static", "return": "InstantColumn", "signature": "InstantColumn create(String name, Stream<Instant> stream)", "full_signature": "public static InstantColumn create(String name, Stream<Instant> stream)", "class_method_signature": "InstantColumn.create(String name, Stream<Instant> stream)", "testcase": false, "constructor": false}, {"identifier": "valueIsMissing", "parameters": "(long value)", "modifiers": "public static", "return": "boolean", "signature": "boolean valueIsMissing(long value)", "full_signature": "public static boolean valueIsMissing(long value)", "class_method_signature": "InstantColumn.valueIsMissing(long value)", "testcase": false, "constructor": false}, {"identifier": "isMissing", "parameters": "(int rowNumber)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isMissing(int rowNumber)", "full_signature": "@Override public boolean isMissing(int rowNumber)", "class_method_signature": "InstantColumn.isMissing(int rowNumber)", "testcase": false, "constructor": false}, {"identifier": "plus", "parameters": "(long amountToAdd, ChronoUnit unit)", "modifiers": "@Override public", "return": "InstantColumn", "signature": "InstantColumn plus(long amountToAdd, ChronoUnit unit)", "full_signature": "@Override public InstantColumn plus(long amountToAdd, ChronoUnit unit)", "class_method_signature": "InstantColumn.plus(long amountToAdd, ChronoUnit unit)", "testcase": false, "constructor": false}, {"identifier": "subset", "parameters": "(final int[] rows)", "modifiers": "@Override public", "return": "InstantColumn", "signature": "InstantColumn subset(final int[] rows)", "full_signature": "@Override public InstantColumn subset(final int[] rows)", "class_method_signature": "InstantColumn.subset(final int[] rows)", "testcase": false, "constructor": false}, {"identifier": "removeMissing", "parameters": "()", "modifiers": "@Override public", "return": "InstantColumn", "signature": "InstantColumn removeMissing()", "full_signature": "@Override public InstantColumn removeMissing()", "class_method_signature": "InstantColumn.removeMissing()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Instant dateTime)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(Instant dateTime)", "full_signature": "@Override public boolean contains(Instant dateTime)", "class_method_signature": "InstantColumn.contains(Instant dateTime)", "testcase": false, "constructor": false}, {"identifier": "setMissing", "parameters": "(int i)", "modifiers": "@Override public", "return": "InstantColumn", "signature": "InstantColumn setMissing(int i)", "full_signature": "@Override public InstantColumn setMissing(int i)", "class_method_signature": "InstantColumn.setMissing(int i)", "testcase": false, "constructor": false}, {"identifier": "where", "parameters": "(Selection selection)", "modifiers": "public", "return": "InstantColumn", "signature": "InstantColumn where(Selection selection)", "full_signature": "public InstantColumn where(Selection selection)", "class_method_signature": "InstantColumn.where(Selection selection)", "testcase": false, "constructor": false}, {"identifier": "setPrintFormatter", "parameters": "(InstantColumnFormatter formatter)", "modifiers": "public", "return": "void", "signature": "void setPrintFormatter(InstantColumnFormatter formatter)", "full_signature": "public void setPrintFormatter(InstantColumnFormatter formatter)", "class_method_signature": "InstantColumn.setPrintFormatter(InstantColumnFormatter formatter)", "testcase": false, "constructor": false}, {"identifier": "lag", "parameters": "(int n)", "modifiers": "@Override public", "return": "InstantColumn", "signature": "InstantColumn lag(int n)", "full_signature": "@Override public InstantColumn lag(int n)", "class_method_signature": "InstantColumn.lag(int n)", "testcase": false, "constructor": false}, {"identifier": "appendCell", "parameters": "(String stringValue)", "modifiers": "@Override public", "return": "InstantColumn", "signature": "InstantColumn appendCell(String stringValue)", "full_signature": "@Override public InstantColumn appendCell(String stringValue)", "class_method_signature": "InstantColumn.appendCell(String stringValue)", "testcase": false, "constructor": false}, {"identifier": "appendCell", "parameters": "(String stringValue, AbstractColumnParser<?> parser)", "modifiers": "@Override public", "return": "InstantColumn", "signature": "InstantColumn appendCell(String stringValue, AbstractColumnParser<?> parser)", "full_signature": "@Override public InstantColumn appendCell(String stringValue, AbstractColumnParser<?> parser)", "class_method_signature": "InstantColumn.appendCell(String stringValue, AbstractColumnParser<?> parser)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(Instant dateTime)", "modifiers": "public", "return": "InstantColumn", "signature": "InstantColumn append(Instant dateTime)", "full_signature": "public InstantColumn append(Instant dateTime)", "class_method_signature": "InstantColumn.append(Instant dateTime)", "testcase": false, "constructor": false}, {"identifier": "appendObj", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "InstantColumn", "signature": "InstantColumn appendObj(Object obj)", "full_signature": "@Override public InstantColumn appendObj(Object obj)", "class_method_signature": "InstantColumn.appendObj(Object obj)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "InstantColumn.size()", "testcase": false, "constructor": false}, {"identifier": "appendInternal", "parameters": "(long dateTime)", "modifiers": "public", "return": "InstantColumn", "signature": "InstantColumn appendInternal(long dateTime)", "full_signature": "public InstantColumn appendInternal(long dateTime)", "class_method_signature": "InstantColumn.appendInternal(long dateTime)", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "(int row)", "modifiers": "@Override public", "return": "String", "signature": "String getString(int row)", "full_signature": "@Override public String getString(int row)", "class_method_signature": "InstantColumn.getString(int row)", "testcase": false, "constructor": false}, {"identifier": "getUnformattedString", "parameters": "(int row)", "modifiers": "@Override public", "return": "String", "signature": "String getUnformattedString(int row)", "full_signature": "@Override public String getUnformattedString(int row)", "class_method_signature": "InstantColumn.getUnformattedString(int row)", "testcase": false, "constructor": false}, {"identifier": "emptyCopy", "parameters": "()", "modifiers": "@Override public", "return": "InstantColumn", "signature": "InstantColumn emptyCopy()", "full_signature": "@Override public InstantColumn emptyCopy()", "class_method_signature": "InstantColumn.emptyCopy()", "testcase": false, "constructor": false}, {"identifier": "emptyCopy", "parameters": "(int rowSize)", "modifiers": "@Override public", "return": "InstantColumn", "signature": "InstantColumn emptyCopy(int rowSize)", "full_signature": "@Override public InstantColumn emptyCopy(int rowSize)", "class_method_signature": "InstantColumn.emptyCopy(int rowSize)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "()", "modifiers": "@Override public", "return": "InstantColumn", "signature": "InstantColumn copy()", "full_signature": "@Override public InstantColumn copy()", "class_method_signature": "InstantColumn.copy()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "InstantColumn.clear()", "testcase": false, "constructor": false}, {"identifier": "sortAscending", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void sortAscending()", "full_signature": "@Override public void sortAscending()", "class_method_signature": "InstantColumn.sortAscending()", "testcase": false, "constructor": false}, {"identifier": "sortDescending", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void sortDescending()", "full_signature": "@Override public void sortDescending()", "class_method_signature": "InstantColumn.sortDescending()", "testcase": false, "constructor": false}, {"identifier": "summary", "parameters": "()", "modifiers": "@Override public", "return": "Table", "signature": "Table summary()", "full_signature": "@Override public Table summary()", "class_method_signature": "InstantColumn.summary()", "testcase": false, "constructor": false}, {"identifier": "countUnique", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int countUnique()", "full_signature": "@Override public int countUnique()", "class_method_signature": "InstantColumn.countUnique()", "testcase": false, "constructor": false}, {"identifier": "unique", "parameters": "()", "modifiers": "@Override public", "return": "InstantColumn", "signature": "InstantColumn unique()", "full_signature": "@Override public InstantColumn unique()", "class_method_signature": "InstantColumn.unique()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "InstantColumn.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "getLongInternal", "parameters": "(int index)", "modifiers": "public", "return": "long", "signature": "long getLongInternal(int index)", "full_signature": "public long getLongInternal(int index)", "class_method_signature": "InstantColumn.getLongInternal(int index)", "testcase": false, "constructor": false}, {"identifier": "getPackedDateTime", "parameters": "(int index)", "modifiers": "protected", "return": "long", "signature": "long getPackedDateTime(int index)", "full_signature": "protected long getPackedDateTime(int index)", "class_method_signature": "InstantColumn.getPackedDateTime(int index)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(int index)", "modifiers": "public", "return": "Instant", "signature": "Instant get(int index)", "full_signature": "public Instant get(int index)", "class_method_signature": "InstantColumn.get(int index)", "testcase": false, "constructor": false}, {"identifier": "rowComparator", "parameters": "()", "modifiers": "@Override public", "return": "IntComparator", "signature": "IntComparator rowComparator()", "full_signature": "@Override public IntComparator rowComparator()", "class_method_signature": "InstantColumn.rowComparator()", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(Selection rowSelection, Instant newValue)", "modifiers": "@Override public", "return": "InstantColumn", "signature": "InstantColumn set(Selection rowSelection, Instant newValue)", "full_signature": "@Override public InstantColumn set(Selection rowSelection, Instant newValue)", "class_method_signature": "InstantColumn.set(Selection rowSelection, Instant newValue)", "testcase": false, "constructor": false}, {"identifier": "countMissing", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int countMissing()", "full_signature": "@Override public int countMissing()", "class_method_signature": "InstantColumn.countMissing()", "testcase": false, "constructor": false}, {"identifier": "asEpochSecondArray", "parameters": "()", "modifiers": "public", "return": "long[]", "signature": "long[] asEpochSecondArray()", "full_signature": "public long[] asEpochSecondArray()", "class_method_signature": "InstantColumn.asEpochSecondArray()", "testcase": false, "constructor": false}, {"identifier": "asEpochSecondArray", "parameters": "(ZoneOffset offset)", "modifiers": "public", "return": "long[]", "signature": "long[] asEpochSecondArray(ZoneOffset offset)", "full_signature": "public long[] asEpochSecondArray(ZoneOffset offset)", "class_method_signature": "InstantColumn.asEpochSecondArray(ZoneOffset offset)", "testcase": false, "constructor": false}, {"identifier": "asEpochMillisArray", "parameters": "()", "modifiers": "public", "return": "long[]", "signature": "long[] asEpochMillisArray()", "full_signature": "public long[] asEpochMillisArray()", "class_method_signature": "InstantColumn.asEpochMillisArray()", "testcase": false, "constructor": false}, {"identifier": "asEpochMillisArray", "parameters": "(ZoneOffset offset)", "modifiers": "public", "return": "long[]", "signature": "long[] asEpochMillisArray(ZoneOffset offset)", "full_signature": "public long[] asEpochMillisArray(ZoneOffset offset)", "class_method_signature": "InstantColumn.asEpochMillisArray(ZoneOffset offset)", "testcase": false, "constructor": false}, {"identifier": "asLocalDateTimeColumn", "parameters": "()", "modifiers": "public", "return": "DateTimeColumn", "signature": "DateTimeColumn asLocalDateTimeColumn()", "full_signature": "public DateTimeColumn asLocalDateTimeColumn()", "class_method_signature": "InstantColumn.asLocalDateTimeColumn()", "testcase": false, "constructor": false}, {"identifier": "asLocalDateTimeColumn", "parameters": "(ZoneId zone)", "modifiers": "public", "return": "DateTimeColumn", "signature": "DateTimeColumn asLocalDateTimeColumn(ZoneId zone)", "full_signature": "public DateTimeColumn asLocalDateTimeColumn(ZoneId zone)", "class_method_signature": "InstantColumn.asLocalDateTimeColumn(ZoneId zone)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(Column<Instant> column)", "modifiers": "@Override public", "return": "InstantColumn", "signature": "InstantColumn append(Column<Instant> column)", "full_signature": "@Override public InstantColumn append(Column<Instant> column)", "class_method_signature": "InstantColumn.append(Column<Instant> column)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(Column<Instant> column, int row)", "modifiers": "@Override public", "return": "InstantColumn", "signature": "InstantColumn append(Column<Instant> column, int row)", "full_signature": "@Override public InstantColumn append(Column<Instant> column, int row)", "class_method_signature": "InstantColumn.append(Column<Instant> column, int row)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int row, Column<Instant> column, int sourceRow)", "modifiers": "@Override public", "return": "InstantColumn", "signature": "InstantColumn set(int row, Column<Instant> column, int sourceRow)", "full_signature": "@Override public InstantColumn set(int row, Column<Instant> column, int sourceRow)", "class_method_signature": "InstantColumn.set(int row, Column<Instant> column, int sourceRow)", "testcase": false, "constructor": false}, {"identifier": "max", "parameters": "()", "modifiers": "public", "return": "Instant", "signature": "Instant max()", "full_signature": "public Instant max()", "class_method_signature": "InstantColumn.max()", "testcase": false, "constructor": false}, {"identifier": "appendMissing", "parameters": "()", "modifiers": "@Override public", "return": "InstantColumn", "signature": "InstantColumn appendMissing()", "full_signature": "@Override public InstantColumn appendMissing()", "class_method_signature": "InstantColumn.appendMissing()", "testcase": false, "constructor": false}, {"identifier": "min", "parameters": "()", "modifiers": "@Override public", "return": "Instant", "signature": "Instant min()", "full_signature": "@Override public Instant min()", "class_method_signature": "InstantColumn.min()", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int index, long value)", "modifiers": "public", "return": "InstantColumn", "signature": "InstantColumn set(int index, long value)", "full_signature": "public InstantColumn set(int index, long value)", "class_method_signature": "InstantColumn.set(int index, long value)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int index, Instant value)", "modifiers": "@Override public", "return": "InstantColumn", "signature": "InstantColumn set(int index, Instant value)", "full_signature": "@Override public InstantColumn set(int index, Instant value)", "class_method_signature": "InstantColumn.set(int index, Instant value)", "testcase": false, "constructor": false}, {"identifier": "top", "parameters": "(int n)", "modifiers": "public", "return": "List<Instant>", "signature": "List<Instant> top(int n)", "full_signature": "public List<Instant> top(int n)", "class_method_signature": "InstantColumn.top(int n)", "testcase": false, "constructor": false}, {"identifier": "bottom", "parameters": "(int n)", "modifiers": "public", "return": "List<Instant>", "signature": "List<Instant> bottom(int n)", "full_signature": "public List<Instant> bottom(int n)", "class_method_signature": "InstantColumn.bottom(int n)", "testcase": false, "constructor": false}, {"identifier": "longIterator", "parameters": "()", "modifiers": "public", "return": "LongIterator", "signature": "LongIterator longIterator()", "full_signature": "public LongIterator longIterator()", "class_method_signature": "InstantColumn.longIterator()", "testcase": false, "constructor": false}, {"identifier": "asSet", "parameters": "()", "modifiers": "public", "return": "Set<Instant>", "signature": "Set<Instant> asSet()", "full_signature": "public Set<Instant> asSet()", "class_method_signature": "InstantColumn.asSet()", "testcase": false, "constructor": false}, {"identifier": "byteSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int byteSize()", "full_signature": "public int byteSize()", "class_method_signature": "InstantColumn.byteSize()", "testcase": false, "constructor": false}, {"identifier": "asBytes", "parameters": "(int rowNumber)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] asBytes(int rowNumber)", "full_signature": "@Override public byte[] asBytes(int rowNumber)", "class_method_signature": "InstantColumn.asBytes(int rowNumber)", "testcase": false, "constructor": false}, {"identifier": "getDouble", "parameters": "(int i)", "modifiers": "public", "return": "double", "signature": "double getDouble(int i)", "full_signature": "public double getDouble(int i)", "class_method_signature": "InstantColumn.getDouble(int i)", "testcase": false, "constructor": false}, {"identifier": "asDoubleArray", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] asDoubleArray()", "full_signature": "public double[] asDoubleArray()", "class_method_signature": "InstantColumn.asDoubleArray()", "testcase": false, "constructor": false}, {"identifier": "asDoubleColumn", "parameters": "()", "modifiers": "public", "return": "DoubleColumn", "signature": "DoubleColumn asDoubleColumn()", "full_signature": "public DoubleColumn asDoubleColumn()", "class_method_signature": "InstantColumn.asDoubleColumn()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Instant>", "signature": "Iterator<Instant> iterator()", "full_signature": "@Override public Iterator<Instant> iterator()", "class_method_signature": "InstantColumn.iterator()", "testcase": false, "constructor": false}, {"identifier": "fillWith", "parameters": "(\n      int count, Iterator<Instant> iterator, Consumer<Instant> acceptor)", "modifiers": "private", "return": "InstantColumn", "signature": "InstantColumn fillWith(\n      int count, Iterator<Instant> iterator, Consumer<Instant> acceptor)", "full_signature": "private InstantColumn fillWith(\n      int count, Iterator<Instant> iterator, Consumer<Instant> acceptor)", "class_method_signature": "InstantColumn.fillWith(\n      int count, Iterator<Instant> iterator, Consumer<Instant> acceptor)", "testcase": false, "constructor": false}, {"identifier": "fillWith", "parameters": "(Iterator<Instant> iterator)", "modifiers": "@Override public", "return": "InstantColumn", "signature": "InstantColumn fillWith(Iterator<Instant> iterator)", "full_signature": "@Override public InstantColumn fillWith(Iterator<Instant> iterator)", "class_method_signature": "InstantColumn.fillWith(Iterator<Instant> iterator)", "testcase": false, "constructor": false}, {"identifier": "fillWith", "parameters": "(\n      int count, Iterable<Instant> iterable, Consumer<Instant> acceptor)", "modifiers": "private", "return": "InstantColumn", "signature": "InstantColumn fillWith(\n      int count, Iterable<Instant> iterable, Consumer<Instant> acceptor)", "full_signature": "private InstantColumn fillWith(\n      int count, Iterable<Instant> iterable, Consumer<Instant> acceptor)", "class_method_signature": "InstantColumn.fillWith(\n      int count, Iterable<Instant> iterable, Consumer<Instant> acceptor)", "testcase": false, "constructor": false}, {"identifier": "fillWith", "parameters": "(Iterable<Instant> iterable)", "modifiers": "@Override public", "return": "InstantColumn", "signature": "InstantColumn fillWith(Iterable<Instant> iterable)", "full_signature": "@Override public InstantColumn fillWith(Iterable<Instant> iterable)", "class_method_signature": "InstantColumn.fillWith(Iterable<Instant> iterable)", "testcase": false, "constructor": false}, {"identifier": "fillWith", "parameters": "(\n      int count, Supplier<Instant> supplier, Consumer<Instant> acceptor)", "modifiers": "private", "return": "InstantColumn", "signature": "InstantColumn fillWith(\n      int count, Supplier<Instant> supplier, Consumer<Instant> acceptor)", "full_signature": "private InstantColumn fillWith(\n      int count, Supplier<Instant> supplier, Consumer<Instant> acceptor)", "class_method_signature": "InstantColumn.fillWith(\n      int count, Supplier<Instant> supplier, Consumer<Instant> acceptor)", "testcase": false, "constructor": false}, {"identifier": "fillWith", "parameters": "(Supplier<Instant> supplier)", "modifiers": "@Override public", "return": "InstantColumn", "signature": "InstantColumn fillWith(Supplier<Instant> supplier)", "full_signature": "@Override public InstantColumn fillWith(Supplier<Instant> supplier)", "class_method_signature": "InstantColumn.fillWith(Supplier<Instant> supplier)", "testcase": false, "constructor": false}, {"identifier": "asObjectArray", "parameters": "()", "modifiers": "@Override public", "return": "Instant[]", "signature": "Instant[] asObjectArray()", "full_signature": "@Override public Instant[] asObjectArray()", "class_method_signature": "InstantColumn.asObjectArray()", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(Instant o1, Instant o2)", "modifiers": "@Override public", "return": "int", "signature": "int compare(Instant o1, Instant o2)", "full_signature": "@Override public int compare(Instant o1, Instant o2)", "class_method_signature": "InstantColumn.compare(Instant o1, Instant o2)", "testcase": false, "constructor": false}, {"identifier": "isMissing", "parameters": "()", "modifiers": "@Override public", "return": "Selection", "signature": "Selection isMissing()", "full_signature": "@Override public Selection isMissing()", "class_method_signature": "InstantColumn.isMissing()", "testcase": false, "constructor": false}, {"identifier": "isNotMissing", "parameters": "()", "modifiers": "@Override public", "return": "Selection", "signature": "Selection isNotMissing()", "full_signature": "@Override public Selection isNotMissing()", "class_method_signature": "InstantColumn.isNotMissing()", "testcase": false, "constructor": false}], "file": "core/src/main/java/tech/tablesaw/api/InstantColumn.java"}, "focal_method": {"identifier": "isMissing", "parameters": "(int rowNumber)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n  public boolean isMissing(int rowNumber) {\n    return valueIsMissing(getLongInternal(rowNumber));\n  }", "signature": "boolean isMissing(int rowNumber)", "full_signature": "@Override public boolean isMissing(int rowNumber)", "class_method_signature": "InstantColumn.isMissing(int rowNumber)", "testcase": false, "constructor": false, "invocations": ["valueIsMissing", "getLongInternal"]}, "repository": {"repo_id": 48880766, "url": "https://github.com/jtablesaw/tablesaw", "stars": 2021, "created": "1/1/2016 2:58:28 PM +00:00", "updates": "2020-01-24T23:26:07+00:00", "fork": "False", "license": "licensed"}}