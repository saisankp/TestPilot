{"test_class": {"identifier": "TestOutputMessageBuffer", "superclass": "", "interfaces": "", "fields": [], "file": "org.jvoicexml.voicexmlunit/src/test/java/org/jvoicexml/voicexmlunit/TestOutputMessageBuffer.java"}, "test_case": {"identifier": "testNextMessage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNextMessage() throws Exception, JVoiceXMLEvent {\n        final TextServer server = new TextServer(9494);\n        final OutputMessageBuffer buffer = new OutputMessageBuffer(server);\n        final SsmlDocument document = new SsmlDocument();\n        final Speak speak = document.getSpeak();\n        speak.addText(\"hello world\");\n        final Runnable runnable = new Runnable() {\n            @Override\n            public void run() {\n                buffer.outputSsml(null, document);\n            }\n        };\n        final Thread thread = new Thread(runnable);\n        thread.start();\n        final SsmlDocument next = buffer.nextMessage();\n        Assert.assertEquals(document, next);\n    }", "signature": "void testNextMessage()", "full_signature": "@Test public void testNextMessage()", "class_method_signature": "TestOutputMessageBuffer.testNextMessage()", "testcase": true, "constructor": false, "invocations": ["getSpeak", "addText", "outputSsml", "start", "nextMessage", "assertEquals"]}, "focal_class": {"identifier": "OutputMessageBuffer", "superclass": "", "interfaces": "implements TextListener", "fields": [{"original_string": "private static final Logger LOGGER = Logger\n            .getLogger(OutputMessageBuffer.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger\n            .getLogger(OutputMessageBuffer.class)", "var_name": "LOGGER"}, {"original_string": "private final BlockingQueue<BufferedSsmlDocument> documents;", "modifier": "private final", "type": "BlockingQueue<BufferedSsmlDocument>", "declarator": "documents", "var_name": "documents"}, {"original_string": "private JVoiceXMLEvent event;", "modifier": "private", "type": "JVoiceXMLEvent", "declarator": "event", "var_name": "event"}, {"original_string": "private final TextServer server;", "modifier": "private final", "type": "TextServer", "declarator": "server", "var_name": "server"}, {"original_string": "private boolean receivedDisconnect;", "modifier": "private", "type": "boolean", "declarator": "receivedDisconnect", "var_name": "receivedDisconnect"}], "methods": [{"identifier": "OutputMessageBuffer", "parameters": "(final TextServer textServer)", "modifiers": "", "return": "", "signature": " OutputMessageBuffer(final TextServer textServer)", "full_signature": "  OutputMessageBuffer(final TextServer textServer)", "class_method_signature": "OutputMessageBuffer.OutputMessageBuffer(final TextServer textServer)", "testcase": false, "constructor": true}, {"identifier": "nextMessage", "parameters": "()", "modifiers": "public", "return": "SsmlDocument", "signature": "SsmlDocument nextMessage()", "full_signature": "public SsmlDocument nextMessage()", "class_method_signature": "OutputMessageBuffer.nextMessage()", "testcase": false, "constructor": false}, {"identifier": "nextMessage", "parameters": "(final long timeout)", "modifiers": "public", "return": "SsmlDocument", "signature": "SsmlDocument nextMessage(final long timeout)", "full_signature": "public SsmlDocument nextMessage(final long timeout)", "class_method_signature": "OutputMessageBuffer.nextMessage(final long timeout)", "testcase": false, "constructor": false}, {"identifier": "started", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void started()", "full_signature": "@Override public void started()", "class_method_signature": "OutputMessageBuffer.started()", "testcase": false, "constructor": false}, {"identifier": "connected", "parameters": "(final InetSocketAddress remote)", "modifiers": "@Override public", "return": "void", "signature": "void connected(final InetSocketAddress remote)", "full_signature": "@Override public void connected(final InetSocketAddress remote)", "class_method_signature": "OutputMessageBuffer.connected(final InetSocketAddress remote)", "testcase": false, "constructor": false}, {"identifier": "outputSsml", "parameters": "(final TextMessageEvent evt,\n            final SsmlDocument document)", "modifiers": "@Override public", "return": "void", "signature": "void outputSsml(final TextMessageEvent evt,\n            final SsmlDocument document)", "full_signature": "@Override public void outputSsml(final TextMessageEvent evt,\n            final SsmlDocument document)", "class_method_signature": "OutputMessageBuffer.outputSsml(final TextMessageEvent evt,\n            final SsmlDocument document)", "testcase": false, "constructor": false}, {"identifier": "expectingInput", "parameters": "(final TextMessageEvent evt)", "modifiers": "@Override public", "return": "void", "signature": "void expectingInput(final TextMessageEvent evt)", "full_signature": "@Override public void expectingInput(final TextMessageEvent evt)", "class_method_signature": "OutputMessageBuffer.expectingInput(final TextMessageEvent evt)", "testcase": false, "constructor": false}, {"identifier": "inputClosed", "parameters": "(final TextMessageEvent evt)", "modifiers": "@Override public", "return": "void", "signature": "void inputClosed(final TextMessageEvent evt)", "full_signature": "@Override public void inputClosed(final TextMessageEvent evt)", "class_method_signature": "OutputMessageBuffer.inputClosed(final TextMessageEvent evt)", "testcase": false, "constructor": false}, {"identifier": "disconnected", "parameters": "(final TextMessageEvent evt)", "modifiers": "@Override public", "return": "void", "signature": "void disconnected(final TextMessageEvent evt)", "full_signature": "@Override public void disconnected(final TextMessageEvent evt)", "class_method_signature": "OutputMessageBuffer.disconnected(final TextMessageEvent evt)", "testcase": false, "constructor": false}, {"identifier": "hasReceivedDisconnect", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasReceivedDisconnect()", "full_signature": "public boolean hasReceivedDisconnect()", "class_method_signature": "OutputMessageBuffer.hasReceivedDisconnect()", "testcase": false, "constructor": false}, {"identifier": "acknowledgeBye", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void acknowledgeBye()", "full_signature": "public void acknowledgeBye()", "class_method_signature": "OutputMessageBuffer.acknowledgeBye()", "testcase": false, "constructor": false}, {"identifier": "acknowledge", "parameters": "(final TextMessage message)", "modifiers": "private", "return": "void", "signature": "void acknowledge(final TextMessage message)", "full_signature": "private void acknowledge(final TextMessage message)", "class_method_signature": "OutputMessageBuffer.acknowledge(final TextMessage message)", "testcase": false, "constructor": false}], "file": "org.jvoicexml.voicexmlunit/src/main/java/org/jvoicexml/voicexmlunit/OutputMessageBuffer.java"}, "focal_method": {"identifier": "nextMessage", "parameters": "()", "modifiers": "public", "return": "SsmlDocument", "body": "public SsmlDocument nextMessage() throws InterruptedException,\n            JVoiceXMLEvent, IOException {\n        final BufferedSsmlDocument buffer = documents.take();\n        if (event != null) {\n            throw event;\n        }\n        final TextMessage message = buffer.getTextMessage();\n        acknowledge(message);\n        if (message.getType() == TextMessageType.BYE) {\n            throw new ConnectionDisconnectHangupEvent();\n        }\n        return buffer.getDocument();\n    }", "signature": "SsmlDocument nextMessage()", "full_signature": "public SsmlDocument nextMessage()", "class_method_signature": "OutputMessageBuffer.nextMessage()", "testcase": false, "constructor": false, "invocations": ["take", "getTextMessage", "acknowledge", "getType", "getDocument"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}