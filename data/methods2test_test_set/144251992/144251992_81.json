{"test_class": {"identifier": "ThumbnailPhotoMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String ID_ATTR_VALUE = \"sAMAccountName\";", "modifier": "private final", "type": "String", "declarator": "ID_ATTR_VALUE = \"sAMAccountName\"", "var_name": "ID_ATTR_VALUE"}, {"original_string": "private ThumbnailPhotoMapper mapper;", "modifier": "private", "type": "ThumbnailPhotoMapper", "declarator": "mapper", "var_name": "mapper"}], "file": "backend/project-board/src/test/java/de/adesso/projectboard/ad/service/mapper/ThumbnailPhotoMapperTest.java"}, "test_case": {"identifier": "mapFromAttributes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void mapFromAttributes() throws NamingException {\n        // given\n        var expectedId = \"user-id\";\n        var expectedThumbnailPhoto = new byte[] {-2, 10, 39, 32};\n        var expectedEntry = Map.entry(expectedId, expectedThumbnailPhoto);\n\n        var idAttr = new BasicAttribute(ID_ATTR_VALUE, expectedId);\n        var thumbnailPhotoAttr = new BasicAttribute(\"thumbnailPhoto\", expectedThumbnailPhoto);\n\n        var attributes = new BasicAttributes();\n        attributes.put(idAttr);\n        attributes.put(thumbnailPhotoAttr);\n\n        // when\n        var actualEntry = mapper.mapFromAttributes(attributes);\n\n        // then\n        assertThat(actualEntry).isEqualTo(expectedEntry);\n    }", "signature": "void mapFromAttributes()", "full_signature": "@Test public void mapFromAttributes()", "class_method_signature": "ThumbnailPhotoMapperTest.mapFromAttributes()", "testcase": true, "constructor": false, "invocations": ["entry", "put", "put", "mapFromAttributes", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "ThumbnailPhotoMapper", "superclass": "extends BaseAttributeMapper<Map.Entry<String, byte[]>>", "interfaces": "", "fields": [{"original_string": "private final String idAttribute;", "modifier": "private final", "type": "String", "declarator": "idAttribute", "var_name": "idAttribute"}], "methods": [{"identifier": "ThumbnailPhotoMapper", "parameters": "(String idAttribute)", "modifiers": "public", "return": "", "signature": " ThumbnailPhotoMapper(String idAttribute)", "full_signature": "public  ThumbnailPhotoMapper(String idAttribute)", "class_method_signature": "ThumbnailPhotoMapper.ThumbnailPhotoMapper(String idAttribute)", "testcase": false, "constructor": true}, {"identifier": "mapFromAttributes", "parameters": "(Attributes attributes)", "modifiers": "@Override public", "return": "Map.Entry<String, byte[]>", "signature": "Map.Entry<String, byte[]> mapFromAttributes(Attributes attributes)", "full_signature": "@Override public Map.Entry<String, byte[]> mapFromAttributes(Attributes attributes)", "class_method_signature": "ThumbnailPhotoMapper.mapFromAttributes(Attributes attributes)", "testcase": false, "constructor": false}], "file": "backend/project-board/src/main/java/de/adesso/projectboard/ad/service/mapper/ThumbnailPhotoMapper.java"}, "focal_method": {"identifier": "mapFromAttributes", "parameters": "(Attributes attributes)", "modifiers": "@Override public", "return": "Map.Entry<String, byte[]>", "body": "@Override\n    public Map.Entry<String, byte[]> mapFromAttributes(Attributes attributes) throws NamingException {\n        var id = getSingleAttributeValue(attributes, idAttribute, String.class);\n        var thumbnailPhoto = getSingleAttributeValue(attributes, \"thumbnailPhoto\", byte[].class);\n\n        return Map.entry(id, thumbnailPhoto);\n    }", "signature": "Map.Entry<String, byte[]> mapFromAttributes(Attributes attributes)", "full_signature": "@Override public Map.Entry<String, byte[]> mapFromAttributes(Attributes attributes)", "class_method_signature": "ThumbnailPhotoMapper.mapFromAttributes(Attributes attributes)", "testcase": false, "constructor": false, "invocations": ["getSingleAttributeValue", "getSingleAttributeValue", "entry"]}, "repository": {"repo_id": 144251992, "url": "https://github.com/adessoAG/project-board", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 2608, "license": "licensed"}}