{"test_class": {"identifier": "S3KeyGeneratorFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "aws/src/test/java/co/smartreceipts/aws/s3/S3KeyGeneratorFactoryTest.java"}, "test_case": {"identifier": "getAmazonS3", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getAmazonS3() {\n        final S3KeyGeneratorFactory factory = new S3KeyGeneratorFactory();\n\n        factory.get().test()\n                .assertComplete()\n                .assertNoErrors();\n\n        final S3KeyGenerator generator1 = factory.get().blockingFirst();\n        final S3KeyGenerator generator2 = factory.get().blockingFirst();\n        assertNotNull(generator1);\n        assertNotNull(generator2);\n        assertEquals(generator1, generator2);\n    }", "signature": "void getAmazonS3()", "full_signature": "@Test public void getAmazonS3()", "class_method_signature": "S3KeyGeneratorFactoryTest.getAmazonS3()", "testcase": true, "constructor": false, "invocations": ["assertNoErrors", "assertComplete", "test", "get", "blockingFirst", "get", "blockingFirst", "get", "assertNotNull", "assertNotNull", "assertEquals"]}, "focal_class": {"identifier": "S3KeyGeneratorFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ReplaySubject<S3KeyGenerator> s3KeyGeneratorReplaySubject;", "modifier": "private", "type": "ReplaySubject<S3KeyGenerator>", "declarator": "s3KeyGeneratorReplaySubject", "var_name": "s3KeyGeneratorReplaySubject"}], "methods": [{"identifier": "get", "parameters": "()", "modifiers": "@NonNull public synchronized", "return": "Observable<S3KeyGenerator>", "signature": "Observable<S3KeyGenerator> get()", "full_signature": "@NonNull public synchronized Observable<S3KeyGenerator> get()", "class_method_signature": "S3KeyGeneratorFactory.get()", "testcase": false, "constructor": false}], "file": "aws/src/main/java/co/smartreceipts/aws/s3/S3KeyGeneratorFactory.java"}, "focal_method": {"identifier": "get", "parameters": "()", "modifiers": "@NonNull public synchronized", "return": "Observable<S3KeyGenerator>", "body": "@NonNull\n    public synchronized Observable<S3KeyGenerator> get() {\n        if (s3KeyGeneratorReplaySubject == null) {\n            s3KeyGeneratorReplaySubject = ReplaySubject.create(1);\n            Observable.<S3KeyGenerator>create(emitter -> {\n                emitter.onNext(new S3KeyGenerator());\n                emitter.onComplete();\n            })\n                    .subscribe(s3KeyGeneratorReplaySubject);\n        }\n        return s3KeyGeneratorReplaySubject;\n    }", "signature": "Observable<S3KeyGenerator> get()", "full_signature": "@NonNull public synchronized Observable<S3KeyGenerator> get()", "class_method_signature": "S3KeyGeneratorFactory.get()", "testcase": false, "constructor": false, "invocations": ["create", "subscribe", "create", "onNext", "onComplete"]}, "repository": {"repo_id": 2684727, "url": "https://github.com/wbaumann/SmartReceiptsLibrary", "stars": 166, "created": "11/1/2011 12:32:39 AM +00:00", "updates": "2020-01-26T22:04:24+00:00", "fork": "False", "license": "licensed"}}