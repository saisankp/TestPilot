{"test_class": {"identifier": "DefaultPackageInfoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String RESOURCE_DIR = \"/test-packages/\";", "modifier": "private static final", "type": "String", "declarator": "RESOURCE_DIR = \"/test-packages/\"", "var_name": "RESOURCE_DIR"}], "file": "vault-core/src/test/java/org/apache/jackrabbit/vault/packaging/impl/DefaultPackageInfoTest.java"}, "test_case": {"identifier": "test_non_valid_package", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_non_valid_package() throws Exception {\n        PackageInfo info = DefaultPackageInfo.read(load(\"non-valid-package.zip\"));\n        assertNull(\"PackageInfo\", info);\n    }", "signature": "void test_non_valid_package()", "full_signature": "@Test public void test_non_valid_package()", "class_method_signature": "DefaultPackageInfoTest.test_non_valid_package()", "testcase": true, "constructor": false, "invocations": ["read", "load", "assertNull"]}, "focal_class": {"identifier": "DefaultPackageInfo", "superclass": "", "interfaces": "implements PackageInfo", "fields": [{"original_string": "private static final File PROPERTIES_FILE = new File(Constants.META_DIR + \"/\" + Constants.PROPERTIES_XML);", "modifier": "private static final", "type": "File", "declarator": "PROPERTIES_FILE = new File(Constants.META_DIR + \"/\" + Constants.PROPERTIES_XML)", "var_name": "PROPERTIES_FILE"}, {"original_string": "private static final File FILTER_FILE = new File(Constants.META_DIR + \"/\" + Constants.FILTER_XML);", "modifier": "private static final", "type": "File", "declarator": "FILTER_FILE = new File(Constants.META_DIR + \"/\" + Constants.FILTER_XML)", "var_name": "FILTER_FILE"}, {"original_string": "private static final File MANIFEST_FILE = new File(JarFile.MANIFEST_NAME);", "modifier": "private static final", "type": "File", "declarator": "MANIFEST_FILE = new File(JarFile.MANIFEST_NAME)", "var_name": "MANIFEST_FILE"}, {"original_string": "private final PackageId id;", "modifier": "private final", "type": "PackageId", "declarator": "id", "var_name": "id"}, {"original_string": "private final WorkspaceFilter filter;", "modifier": "private final", "type": "WorkspaceFilter", "declarator": "filter", "var_name": "filter"}, {"original_string": "private final PackageType packageType;", "modifier": "private final", "type": "PackageType", "declarator": "packageType", "var_name": "packageType"}], "methods": [{"identifier": "DefaultPackageInfo", "parameters": "(PackageId id, WorkspaceFilter filter, PackageType packageType)", "modifiers": "public", "return": "", "signature": " DefaultPackageInfo(PackageId id, WorkspaceFilter filter, PackageType packageType)", "full_signature": "public  DefaultPackageInfo(PackageId id, WorkspaceFilter filter, PackageType packageType)", "class_method_signature": "DefaultPackageInfo.DefaultPackageInfo(PackageId id, WorkspaceFilter filter, PackageType packageType)", "testcase": false, "constructor": true}, {"identifier": "read", "parameters": "(@NotNull File file)", "modifiers": "public static @Nullable", "return": "PackageInfo", "signature": "PackageInfo read(@NotNull File file)", "full_signature": "public static @Nullable PackageInfo read(@NotNull File file)", "class_method_signature": "DefaultPackageInfo.read(@NotNull File file)", "testcase": false, "constructor": false}, {"identifier": "readFromInputStream", "parameters": "(File file, InputStream input, PackageInfo alreadyFoundInfo)", "modifiers": "private static", "return": "DefaultPackageInfo", "signature": "DefaultPackageInfo readFromInputStream(File file, InputStream input, PackageInfo alreadyFoundInfo)", "full_signature": "private static DefaultPackageInfo readFromInputStream(File file, InputStream input, PackageInfo alreadyFoundInfo)", "class_method_signature": "DefaultPackageInfo.readFromInputStream(File file, InputStream input, PackageInfo alreadyFoundInfo)", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "public", "return": "PackageId", "signature": "PackageId getId()", "full_signature": "public PackageId getId()", "class_method_signature": "DefaultPackageInfo.getId()", "testcase": false, "constructor": false}, {"identifier": "getFilter", "parameters": "()", "modifiers": "public", "return": "WorkspaceFilter", "signature": "WorkspaceFilter getFilter()", "full_signature": "public WorkspaceFilter getFilter()", "class_method_signature": "DefaultPackageInfo.getFilter()", "testcase": false, "constructor": false}, {"identifier": "getPackageType", "parameters": "()", "modifiers": "public", "return": "PackageType", "signature": "PackageType getPackageType()", "full_signature": "public PackageType getPackageType()", "class_method_signature": "DefaultPackageInfo.getPackageType()", "testcase": false, "constructor": false}], "file": "vault-core/src/main/java/org/apache/jackrabbit/vault/packaging/impl/DefaultPackageInfo.java"}, "focal_method": {"identifier": "read", "parameters": "(@NotNull File file)", "modifiers": "public static @Nullable", "return": "PackageInfo", "body": "public static @Nullable PackageInfo read(@NotNull File file) throws IOException {\n        DefaultPackageInfo info = new DefaultPackageInfo(null, null, PackageType.MIXED);\n        if (!file.exists()) {\n            throw new FileNotFoundException(\"Could not find file \" + file);\n        }\n        if (file.isDirectory()) {\n            for (File directoryFile : FileUtils.listFiles(file, new NameFileFilter(new String[] { \"MANIFEST.MF\", Constants.PROPERTIES_XML, Constants.FILTER_XML}),\n                    new SuffixFileFilter(new String[] { Constants.META_INF, Constants.VAULT_DIR }))) {\n                try (InputStream input = new BufferedInputStream(new FileInputStream(directoryFile))) {\n                    info = readFromInputStream(new File(file.toURI().relativize(directoryFile.toURI()).getPath()), input, info);\n                    // bail out as soon as all info was found\n                    if (info.getId() != null && info.getFilter() != null) {\n                        break;\n                    }\n                }\n\n            }\n            if (info.getId() == null || info.getFilter() == null) {\n                return null;\n            } else {\n                return info;\n            }\n        } else if (file.getName().endsWith(\".zip\")) {\n            // try to derive from vault-work?\n            try (ZipFile zip = new ZipFile(file)) {\n                Enumeration<? extends ZipEntry> entries = zip.entries();\n                while (entries.hasMoreElements()) {\n                    ZipEntry e = entries.nextElement();\n                    try (InputStream input = zip.getInputStream(e)) {\n                        info = readFromInputStream(new File(e.getName()), input, info);\n                        // bail out as soon as all info was found\n                        if (info.getId() != null && info.getFilter() != null) {\n                            break;\n                        }\n                    }\n                }\n            }\n            if (info.getId() == null || info.getFilter() == null) {\n                return null;\n            } else {\n                return info;\n            }\n        } else {\n            throw new IOException(\"Only metadata from zip files could be extracted but the given file is not a zip:\" + file);\n        }\n    }", "signature": "PackageInfo read(@NotNull File file)", "full_signature": "public static @Nullable PackageInfo read(@NotNull File file)", "class_method_signature": "DefaultPackageInfo.read(@NotNull File file)", "testcase": false, "constructor": false, "invocations": ["exists", "isDirectory", "listFiles", "readFromInputStream", "getPath", "relativize", "toURI", "toURI", "getId", "getFilter", "getId", "getFilter", "endsWith", "getName", "entries", "hasMoreElements", "nextElement", "getInputStream", "readFromInputStream", "getName", "getId", "getFilter", "getId", "getFilter"]}, "repository": {"repo_id": 16021499, "url": "https://github.com/apache/jackrabbit-filevault", "stars": 24, "created": "1/18/2014 8:00:07 AM +00:00", "updates": "2020-01-22T11:47:21+00:00", "fork": "False", "license": "licensed"}}