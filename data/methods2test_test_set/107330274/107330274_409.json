{"test_class": {"identifier": "CellInfoUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "titus-server-federation/src/test/java/com/netflix/titus/federation/service/CellInfoUtilTest.java"}, "test_case": {"identifier": "duplicatedRoutingRulesAreIgnored", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void duplicatedRoutingRulesAreIgnored() {\n        Cell cell = new Cell(\"cell1\", \"1\");\n        String cellsSpec = \"cell1=(app1.*);cell1=(app2.*)\";\n        Map<Cell, String> routingRules = CellInfoUtil.extractCellRoutingFromCellSpecification(\n                Collections.singletonList(cell), cellsSpec\n        );\n        assertThat(routingRules).isNotNull();\n        assertThat(routingRules).hasSize(1);\n        // second value got ignored\n        assertThat(routingRules.get(cell)).isEqualTo(\"(app1.*)\");\n    }", "signature": "void duplicatedRoutingRulesAreIgnored()", "full_signature": "@Test public void duplicatedRoutingRulesAreIgnored()", "class_method_signature": "CellInfoUtilTest.duplicatedRoutingRulesAreIgnored()", "testcase": true, "constructor": false, "invocations": ["extractCellRoutingFromCellSpecification", "singletonList", "isNotNull", "assertThat", "hasSize", "assertThat", "isEqualTo", "assertThat", "get"]}, "focal_class": {"identifier": "CellInfoUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(CellInfoUtil.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CellInfoUtil.class)", "var_name": "logger"}, {"original_string": "private static final String CELL_HOST_DELIM = \";\";", "modifier": "private static final", "type": "String", "declarator": "CELL_HOST_DELIM = \";\"", "var_name": "CELL_HOST_DELIM"}, {"original_string": "private static final String CELL_HOST_RULE_DELIM = \"=\";", "modifier": "private static final", "type": "String", "declarator": "CELL_HOST_RULE_DELIM = \"=\"", "var_name": "CELL_HOST_RULE_DELIM"}, {"original_string": "private static final String CELL_ROUTE_DELIM = \";\";", "modifier": "private static final", "type": "String", "declarator": "CELL_ROUTE_DELIM = \";\"", "var_name": "CELL_ROUTE_DELIM"}, {"original_string": "private static final String CELL_ROUTE_RULE_DELIM = \"=\";", "modifier": "private static final", "type": "String", "declarator": "CELL_ROUTE_RULE_DELIM = \"=\"", "var_name": "CELL_ROUTE_RULE_DELIM"}], "methods": [{"identifier": "extractCellsFromCellSpecification", "parameters": "(String cellsSpecification)", "modifiers": "public static", "return": "List<Cell>", "signature": "List<Cell> extractCellsFromCellSpecification(String cellsSpecification)", "full_signature": "public static List<Cell> extractCellsFromCellSpecification(String cellsSpecification)", "class_method_signature": "CellInfoUtil.extractCellsFromCellSpecification(String cellsSpecification)", "testcase": false, "constructor": false}, {"identifier": "extractCellRoutingFromCellSpecification", "parameters": "(List<Cell> cells, String cellRoutingSpecification)", "modifiers": "public static", "return": "Map<Cell, String>", "signature": "Map<Cell, String> extractCellRoutingFromCellSpecification(List<Cell> cells, String cellRoutingSpecification)", "full_signature": "public static Map<Cell, String> extractCellRoutingFromCellSpecification(List<Cell> cells, String cellRoutingSpecification)", "class_method_signature": "CellInfoUtil.extractCellRoutingFromCellSpecification(List<Cell> cells, String cellRoutingSpecification)", "testcase": false, "constructor": false}, {"identifier": "isCellConfigured", "parameters": "(Map<String, Cell> cellsByName, CellRoutingSpec spec)", "modifiers": "private static", "return": "boolean", "signature": "boolean isCellConfigured(Map<String, Cell> cellsByName, CellRoutingSpec spec)", "full_signature": "private static boolean isCellConfigured(Map<String, Cell> cellsByName, CellRoutingSpec spec)", "class_method_signature": "CellInfoUtil.isCellConfigured(Map<String, Cell> cellsByName, CellRoutingSpec spec)", "testcase": false, "constructor": false}, {"identifier": "mergeKeepingFirst", "parameters": "(V v1, V v2)", "modifiers": "private static", "return": "V", "signature": "V mergeKeepingFirst(V v1, V v2)", "full_signature": "private static V mergeKeepingFirst(V v1, V v2)", "class_method_signature": "CellInfoUtil.mergeKeepingFirst(V v1, V v2)", "testcase": false, "constructor": false}], "file": "titus-server-federation/src/main/java/com/netflix/titus/federation/service/CellInfoUtil.java"}, "focal_method": {"identifier": "extractCellRoutingFromCellSpecification", "parameters": "(List<Cell> cells, String cellRoutingSpecification)", "modifiers": "public static", "return": "Map<Cell, String>", "body": "public static Map<Cell, String> extractCellRoutingFromCellSpecification(List<Cell> cells, String cellRoutingSpecification) {\n        Map<String, Cell> cellsByName = CollectionsExt.indexBy(cells, Cell::getName);\n\n        return Arrays.stream(cellRoutingSpecification.split(CELL_ROUTE_DELIM))\n                .filter(cellRoutingSpec -> cellRoutingSpec.contains(CELL_ROUTE_RULE_DELIM))\n                .map(CellRoutingSpec::new)\n                .filter(spec -> isCellConfigured(cellsByName, spec))\n                .collect(Collectors.toMap(\n                        spec -> cellsByName.get(spec.getCellName()),\n                        CellRoutingSpec::getRoutingRule,\n                        CellInfoUtil::mergeKeepingFirst,\n                        LinkedHashMap::new\n                ));\n    }", "signature": "Map<Cell, String> extractCellRoutingFromCellSpecification(List<Cell> cells, String cellRoutingSpecification)", "full_signature": "public static Map<Cell, String> extractCellRoutingFromCellSpecification(List<Cell> cells, String cellRoutingSpecification)", "class_method_signature": "CellInfoUtil.extractCellRoutingFromCellSpecification(List<Cell> cells, String cellRoutingSpecification)", "testcase": false, "constructor": false, "invocations": ["indexBy", "collect", "filter", "map", "filter", "stream", "split", "contains", "isCellConfigured", "toMap", "get", "getCellName"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}