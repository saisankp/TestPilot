{"test_class": {"identifier": "AdditionalPropertiesParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "Kafka/KafkaJCAAPI/src/test/java/fish/payara/cloud/connectors/kafka/tools/AdditionalPropertiesParserTest.java"}, "test_case": {"identifier": "testMerge", "parameters": "(Properties base, Properties additional, Properties expectedMergeResult)", "modifiers": "@Test(dataProvider = \"MergingResultProvider\") public", "return": "void", "body": "@Test(dataProvider = \"MergingResultProvider\")\n    public void testMerge(Properties base, Properties additional, Properties expectedMergeResult) throws Exception {\n        assertEquals(expectedMergeResult, AdditionalPropertiesParser.merge(base, additional), \"Wrong result properties from merging found.\");\n    }", "signature": "void testMerge(Properties base, Properties additional, Properties expectedMergeResult)", "full_signature": "@Test(dataProvider = \"MergingResultProvider\") public void testMerge(Properties base, Properties additional, Properties expectedMergeResult)", "class_method_signature": "AdditionalPropertiesParserTest.testMerge(Properties base, Properties additional, Properties expectedMergeResult)", "testcase": true, "constructor": false, "invocations": ["assertEquals", "merge"]}, "focal_class": {"identifier": "AdditionalPropertiesParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = Logger.getLogger(AdditionalPropertiesParser.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(AdditionalPropertiesParser.class.getName())", "var_name": "LOG"}, {"original_string": "private static final String LIST_SEPARATOR = \",\";", "modifier": "private static final", "type": "String", "declarator": "LIST_SEPARATOR = \",\"", "var_name": "LIST_SEPARATOR"}, {"original_string": "private static final String KEY_VALUE_SEPARATOR = \"=\";", "modifier": "private static final", "type": "String", "declarator": "KEY_VALUE_SEPARATOR = \"=\"", "var_name": "KEY_VALUE_SEPARATOR"}, {"original_string": "private static final char ESCAPE_CHARACTER = '\\'';", "modifier": "private static final", "type": "char", "declarator": "ESCAPE_CHARACTER = '\\''", "var_name": "ESCAPE_CHARACTER"}, {"original_string": "private String propertiesString;", "modifier": "private", "type": "String", "declarator": "propertiesString", "var_name": "propertiesString"}], "methods": [{"identifier": "AdditionalPropertiesParser", "parameters": "(String propertiesString)", "modifiers": "public", "return": "", "signature": " AdditionalPropertiesParser(String propertiesString)", "full_signature": "public  AdditionalPropertiesParser(String propertiesString)", "class_method_signature": "AdditionalPropertiesParser.AdditionalPropertiesParser(String propertiesString)", "testcase": false, "constructor": true}, {"identifier": "split", "parameters": "(String propertiesString, String separator)", "modifiers": "private static", "return": "String[]", "signature": "String[] split(String propertiesString, String separator)", "full_signature": "private static String[] split(String propertiesString, String separator)", "class_method_signature": "AdditionalPropertiesParser.split(String propertiesString, String separator)", "testcase": false, "constructor": false}, {"identifier": "correctSingleQuotes", "parameters": "(String val)", "modifiers": "private static", "return": "String", "signature": "String correctSingleQuotes(String val)", "full_signature": "private static String correctSingleQuotes(String val)", "class_method_signature": "AdditionalPropertiesParser.correctSingleQuotes(String val)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(Properties base, Properties addtional)", "modifiers": "public static", "return": "Properties", "signature": "Properties merge(Properties base, Properties addtional)", "full_signature": "public static Properties merge(Properties base, Properties addtional)", "class_method_signature": "AdditionalPropertiesParser.merge(Properties base, Properties addtional)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "()", "modifiers": "public", "return": "Properties", "signature": "Properties parse()", "full_signature": "public Properties parse()", "class_method_signature": "AdditionalPropertiesParser.parse()", "testcase": false, "constructor": false}], "file": "Kafka/KafkaJCAAPI/src/main/java/fish/payara/cloud/connectors/kafka/tools/AdditionalPropertiesParser.java"}, "focal_method": {"identifier": "merge", "parameters": "(Properties base, Properties addtional)", "modifiers": "public static", "return": "Properties", "body": "public static Properties merge(Properties base, Properties addtional){\n        Properties properties = new Properties();\n        properties.putAll(base);\n        if(addtional != null){\n            for(String key : addtional.stringPropertyNames()){\n                properties.putIfAbsent(key, addtional.getProperty(key));\n            }\n        }\n        return properties;\n    }", "signature": "Properties merge(Properties base, Properties addtional)", "full_signature": "public static Properties merge(Properties base, Properties addtional)", "class_method_signature": "AdditionalPropertiesParser.merge(Properties base, Properties addtional)", "testcase": false, "constructor": false, "invocations": ["putAll", "stringPropertyNames", "putIfAbsent", "getProperty"]}, "repository": {"repo_id": 86734489, "url": "https://github.com/payara/Cloud-Connectors", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 30, "size": 311, "license": "licensed"}}