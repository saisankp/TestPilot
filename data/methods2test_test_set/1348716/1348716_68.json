{"test_class": {"identifier": "DateFormatterTest", "superclass": "", "interfaces": "", "fields": [], "file": "userInterface/src/test/java/org/mifos/ui/ftl/DateFormatterTest.java"}, "test_case": {"identifier": "formatJodaDateInEnglish", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void formatJodaDateInEnglish() throws TemplateModelException {\n        List<Object> args = getJodaDateArgs(Locale.ENGLISH);\n        DateFormatter formatter = new DateFormatter();\n        String result = (String) formatter.exec(args);\n        String expected = \"January\";\n        assertEquals(expected, result);\n    }", "signature": "void formatJodaDateInEnglish()", "full_signature": "@Test public void formatJodaDateInEnglish()", "class_method_signature": "DateFormatterTest.formatJodaDateInEnglish()", "testcase": true, "constructor": false, "invocations": ["getJodaDateArgs", "exec", "assertEquals"]}, "focal_class": {"identifier": "DateFormatter", "superclass": "", "interfaces": "implements TemplateMethodModelEx", "fields": [], "methods": [{"identifier": "exec", "parameters": "(List args)", "modifiers": "@Override public", "return": "Object", "signature": "Object exec(List args)", "full_signature": "@Override public Object exec(List args)", "class_method_signature": "DateFormatter.exec(List args)", "testcase": false, "constructor": false}], "file": "userInterface/src/main/java/org/mifos/ui/ftl/DateFormatter.java"}, "focal_method": {"identifier": "exec", "parameters": "(List args)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object exec(List args) throws TemplateModelException {\n        if (args.size() != 3) {\n            throw new IllegalArgumentException(\"Wrong arguments\");\n        }\n        Object date = DeepUnwrap.unwrap((TemplateModel) args.get(0));\n        String pattern = (String) DeepUnwrap.unwrap((TemplateModel) args.get(1));\n        Locale locale = (Locale) DeepUnwrap.unwrap((TemplateModel) args.get(2));\n\n        if (date instanceof LocalDate) {\n            date = ((LocalDate)date).toDateTimeAtStartOfDay();\n        }\n        \n        String formatted = \"\";\n        if (date instanceof DateTime) {\n            formatted = DateTimeFormat.forPattern(pattern).withLocale(locale).print((DateTime) date);\n        } else if (date instanceof Date) {\n            formatted = new SimpleDateFormat(pattern, locale).format((Date) date);\n        } else if (date != null) {\n            throw new IllegalArgumentException(\"Unsupported date type: \" + date.getClass());\n        }\n        return formatted;\n    }", "signature": "Object exec(List args)", "full_signature": "@Override public Object exec(List args)", "class_method_signature": "DateFormatter.exec(List args)", "testcase": false, "constructor": false, "invocations": ["size", "unwrap", "get", "unwrap", "get", "unwrap", "get", "toDateTimeAtStartOfDay", "print", "withLocale", "forPattern", "format", "getClass"]}, "repository": {"repo_id": 1348716, "url": "https://github.com/mifos/head", "language": "Java", "is_fork": false, "fork_count": 91, "stargazer_count": 55, "size": 532732, "license": "licensed"}}