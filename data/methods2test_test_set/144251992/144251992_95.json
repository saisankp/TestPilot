{"test_class": {"identifier": "RepositoryProjectServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String PROJECT_ID = \"project\";", "modifier": "private final", "type": "String", "declarator": "PROJECT_ID = \"project\"", "var_name": "PROJECT_ID"}, {"original_string": "@Mock\n    private ProjectRepository projectRepo;", "modifier": "@Mock\n    private", "type": "ProjectRepository", "declarator": "projectRepo", "var_name": "projectRepo"}, {"original_string": "@Mock\n    private ProjectApplicationRepository applicationRepo;", "modifier": "@Mock\n    private", "type": "ProjectApplicationRepository", "declarator": "applicationRepo", "var_name": "applicationRepo"}, {"original_string": "@Mock\n    private UserRepository userRepo;", "modifier": "@Mock\n    private", "type": "UserRepository", "declarator": "userRepo", "var_name": "userRepo"}, {"original_string": "@Mock\n    private UserService userService;", "modifier": "@Mock\n    private", "type": "UserService", "declarator": "userService", "var_name": "userService"}, {"original_string": "@Mock\n    private Project projectMock;", "modifier": "@Mock\n    private", "type": "Project", "declarator": "projectMock", "var_name": "projectMock"}, {"original_string": "@Mock\n    private User userMock;", "modifier": "@Mock\n    private", "type": "User", "declarator": "userMock", "var_name": "userMock"}, {"original_string": "private Clock clock;", "modifier": "private", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "private RepositoryProjectService projectService;", "modifier": "private", "type": "RepositoryProjectService", "declarator": "projectService", "var_name": "projectService"}], "file": "backend/project-board/src/test/java/de/adesso/projectboard/ad/project/service/RepositoryProjectServiceTest.java"}, "test_case": {"identifier": "projectExistsReturnsTrueForExistingProjectForId", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void projectExistsReturnsTrueForExistingProjectForId() {\n        // given\n        when(projectRepo.existsById(PROJECT_ID)).thenReturn(true);\n\n        // when\n        boolean actualExists = projectService.projectExists(PROJECT_ID);\n\n        // then\n        assertThat(actualExists).isTrue();\n    }", "signature": "void projectExistsReturnsTrueForExistingProjectForId()", "full_signature": "@Test public void projectExistsReturnsTrueForExistingProjectForId()", "class_method_signature": "RepositoryProjectServiceTest.projectExistsReturnsTrueForExistingProjectForId()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "existsById", "projectExists", "isTrue", "assertThat"]}, "focal_class": {"identifier": "RepositoryProjectService", "superclass": "", "interfaces": "implements ProjectService", "fields": [{"original_string": "private final ProjectRepository projectRepo;", "modifier": "private final", "type": "ProjectRepository", "declarator": "projectRepo", "var_name": "projectRepo"}, {"original_string": "private final ProjectApplicationRepository applicationRepo;", "modifier": "private final", "type": "ProjectApplicationRepository", "declarator": "applicationRepo", "var_name": "applicationRepo"}, {"original_string": "private final UserRepository userRepo;", "modifier": "private final", "type": "UserRepository", "declarator": "userRepo", "var_name": "userRepo"}, {"original_string": "private final UserService userService;", "modifier": "private final", "type": "UserService", "declarator": "userService", "var_name": "userService"}, {"original_string": "private final Clock clock;", "modifier": "private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}], "methods": [{"identifier": "RepositoryProjectService", "parameters": "(ProjectRepository projectRepo,\n                                    ProjectApplicationRepository applicationRepo,\n                                    UserRepository userRepo,\n                                    UserService userService,\n                                    Clock clock)", "modifiers": "@Autowired public", "return": "", "signature": " RepositoryProjectService(ProjectRepository projectRepo,\n                                    ProjectApplicationRepository applicationRepo,\n                                    UserRepository userRepo,\n                                    UserService userService,\n                                    Clock clock)", "full_signature": "@Autowired public  RepositoryProjectService(ProjectRepository projectRepo,\n                                    ProjectApplicationRepository applicationRepo,\n                                    UserRepository userRepo,\n                                    UserService userService,\n                                    Clock clock)", "class_method_signature": "RepositoryProjectService.RepositoryProjectService(ProjectRepository projectRepo,\n                                    ProjectApplicationRepository applicationRepo,\n                                    UserRepository userRepo,\n                                    UserService userService,\n                                    Clock clock)", "testcase": false, "constructor": true}, {"identifier": "getProjectById", "parameters": "(String projectId)", "modifiers": "@Override @Transactional(readOnly = true) public", "return": "Project", "signature": "Project getProjectById(String projectId)", "full_signature": "@Override @Transactional(readOnly = true) public Project getProjectById(String projectId)", "class_method_signature": "RepositoryProjectService.getProjectById(String projectId)", "testcase": false, "constructor": false}, {"identifier": "projectExists", "parameters": "(String projectId)", "modifiers": "@Override @Transactional(readOnly = true) public", "return": "boolean", "signature": "boolean projectExists(String projectId)", "full_signature": "@Override @Transactional(readOnly = true) public boolean projectExists(String projectId)", "class_method_signature": "RepositoryProjectService.projectExists(String projectId)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(Project project)", "modifiers": "@Override public", "return": "Project", "signature": "Project save(Project project)", "full_signature": "@Override public Project save(Project project)", "class_method_signature": "RepositoryProjectService.save(Project project)", "testcase": false, "constructor": false}, {"identifier": "saveAll", "parameters": "(List<Project> projects)", "modifiers": "@Override public", "return": "List<Project>", "signature": "List<Project> saveAll(List<Project> projects)", "full_signature": "@Override public List<Project> saveAll(List<Project> projects)", "class_method_signature": "RepositoryProjectService.saveAll(List<Project> projects)", "testcase": false, "constructor": false}, {"identifier": "createProject", "parameters": "(Project project)", "modifiers": "@Override public", "return": "Project", "signature": "Project createProject(Project project)", "full_signature": "@Override public Project createProject(Project project)", "class_method_signature": "RepositoryProjectService.createProject(Project project)", "testcase": false, "constructor": false}, {"identifier": "createOrUpdateProject", "parameters": "(Project project, String projectId)", "modifiers": "", "return": "Project", "signature": "Project createOrUpdateProject(Project project, String projectId)", "full_signature": " Project createOrUpdateProject(Project project, String projectId)", "class_method_signature": "RepositoryProjectService.createOrUpdateProject(Project project, String projectId)", "testcase": false, "constructor": false}], "file": "backend/project-board/src/main/java/de/adesso/projectboard/ad/project/service/RepositoryProjectService.java"}, "focal_method": {"identifier": "projectExists", "parameters": "(String projectId)", "modifiers": "@Override @Transactional(readOnly = true) public", "return": "boolean", "body": "@Override\n    @Transactional(readOnly = true)\n    public boolean projectExists(String projectId) {\n        return projectRepo.existsById(projectId);\n    }", "signature": "boolean projectExists(String projectId)", "full_signature": "@Override @Transactional(readOnly = true) public boolean projectExists(String projectId)", "class_method_signature": "RepositoryProjectService.projectExists(String projectId)", "testcase": false, "constructor": false, "invocations": ["existsById"]}, "repository": {"repo_id": 144251992, "url": "https://github.com/adessoAG/project-board", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 2608, "license": "licensed"}}