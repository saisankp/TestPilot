{"test_class": {"identifier": "DependencySetTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock private Module myModule;", "modifier": "@Mock private", "type": "Module", "declarator": "myModule", "var_name": "myModule"}, {"original_string": "private DependencySet myDependencies;", "modifier": "private", "type": "DependencySet", "declarator": "myDependencies", "var_name": "myDependencies"}], "file": "android/testSrc/com/android/tools/idea/gradle/project/sync/setup/module/dependency/DependencySetTest.java"}, "test_case": {"identifier": "onLibrariesMaintainInsertionOrder_2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void onLibrariesMaintainInsertionOrder_2() {\n    addDependency(\"file_c.jar\", \"library_c\");\n    addDependency(\"file_d.jar\", \"library_d\");\n    addDependency(\"file_a.jar\", \"library_a\");\n    addDependency(\"file_b.jar\", \"library_b\");\n\n    List<String> dependencyNames = myDependencies.onLibraries().stream().map(LibraryDependency::getName).collect(Collectors.toList());\n    assertThat(dependencyNames).hasSize(4);\n    assertThat(dependencyNames)\n      .containsExactly(\"Gradle: library_c\", \"Gradle: library_d\", \"Gradle: library_a\", \"Gradle: library_b\").inOrder();\n  }", "signature": "void onLibrariesMaintainInsertionOrder_2()", "full_signature": "@Test public void onLibrariesMaintainInsertionOrder_2()", "class_method_signature": "DependencySetTest.onLibrariesMaintainInsertionOrder_2()", "testcase": true, "constructor": false, "invocations": ["addDependency", "addDependency", "addDependency", "addDependency", "collect", "map", "stream", "onLibraries", "toList", "hasSize", "assertThat", "inOrder", "containsExactly", "assertThat"]}, "focal_class": {"identifier": "DependencySet", "superclass": "", "interfaces": "", "fields": [{"original_string": "@NotNull public static final DependencySet EMPTY = new DependencySet();", "modifier": "@NotNull public static final", "type": "DependencySet", "declarator": "EMPTY = new DependencySet()", "var_name": "EMPTY"}, {"original_string": "private final Multimap<String, LibraryDependency> myLibrariesByName = LinkedListMultimap.create();", "modifier": "private final", "type": "Multimap<String, LibraryDependency>", "declarator": "myLibrariesByName = LinkedListMultimap.create()", "var_name": "myLibrariesByName"}, {"original_string": "private final Map<String, ModuleDependency> myModulesByPath = Maps.newLinkedHashMap();", "modifier": "private final", "type": "Map<String, ModuleDependency>", "declarator": "myModulesByPath = Maps.newLinkedHashMap()", "var_name": "myModulesByPath"}], "methods": [{"identifier": "DependencySet", "parameters": "()", "modifiers": "", "return": "", "signature": " DependencySet()", "full_signature": "  DependencySet()", "class_method_signature": "DependencySet.DependencySet()", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(@NotNull LibraryDependency dependency)", "modifiers": "", "return": "void", "signature": "void add(@NotNull LibraryDependency dependency)", "full_signature": " void add(@NotNull LibraryDependency dependency)", "class_method_signature": "DependencySet.add(@NotNull LibraryDependency dependency)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(DependencySet other)", "modifiers": "public", "return": "void", "signature": "void addAll(DependencySet other)", "full_signature": "public void addAll(DependencySet other)", "class_method_signature": "DependencySet.addAll(DependencySet other)", "testcase": false, "constructor": false}, {"identifier": "areSameArtifact", "parameters": "(@NotNull LibraryDependency d1, @NotNull LibraryDependency d2)", "modifiers": "private static", "return": "boolean", "signature": "boolean areSameArtifact(@NotNull LibraryDependency d1, @NotNull LibraryDependency d2)", "full_signature": "private static boolean areSameArtifact(@NotNull LibraryDependency d1, @NotNull LibraryDependency d2)", "class_method_signature": "DependencySet.areSameArtifact(@NotNull LibraryDependency d1, @NotNull LibraryDependency d2)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(@NotNull ModuleDependency dependency)", "modifiers": "", "return": "void", "signature": "void add(@NotNull ModuleDependency dependency)", "full_signature": " void add(@NotNull ModuleDependency dependency)", "class_method_signature": "DependencySet.add(@NotNull ModuleDependency dependency)", "testcase": false, "constructor": false}, {"identifier": "hasHigherScope", "parameters": "(T d1, T d2)", "modifiers": "private static", "return": "boolean", "signature": "boolean hasHigherScope(T d1, T d2)", "full_signature": "private static boolean hasHigherScope(T d1, T d2)", "class_method_signature": "DependencySet.hasHigherScope(T d1, T d2)", "testcase": false, "constructor": false}, {"identifier": "onLibraries", "parameters": "()", "modifiers": "@NotNull public", "return": "ImmutableCollection<LibraryDependency>", "signature": "ImmutableCollection<LibraryDependency> onLibraries()", "full_signature": "@NotNull public ImmutableCollection<LibraryDependency> onLibraries()", "class_method_signature": "DependencySet.onLibraries()", "testcase": false, "constructor": false}, {"identifier": "onModules", "parameters": "()", "modifiers": "@NotNull public", "return": "ImmutableCollection<ModuleDependency>", "signature": "ImmutableCollection<ModuleDependency> onModules()", "full_signature": "@NotNull public ImmutableCollection<ModuleDependency> onModules()", "class_method_signature": "DependencySet.onModules()", "testcase": false, "constructor": false}], "file": "android/src/com/android/tools/idea/gradle/project/sync/setup/module/dependency/DependencySet.java"}, "focal_method": {"identifier": "onLibraries", "parameters": "()", "modifiers": "@NotNull public", "return": "ImmutableCollection<LibraryDependency>", "body": "@NotNull\n  public ImmutableCollection<LibraryDependency> onLibraries() {\n    return ImmutableList.copyOf(myLibrariesByName.values());\n  }", "signature": "ImmutableCollection<LibraryDependency> onLibraries()", "full_signature": "@NotNull public ImmutableCollection<LibraryDependency> onLibraries()", "class_method_signature": "DependencySet.onLibraries()", "testcase": false, "constructor": false, "invocations": ["copyOf", "values"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}