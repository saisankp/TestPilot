{"test_class": {"identifier": "TestAbstractConfigurationProvider", "superclass": "", "interfaces": "", "fields": [], "file": "flume-ng-node/src/test/java/org/apache/flume/node/TestAbstractConfigurationProvider.java"}, "test_case": {"identifier": "testUnspecifiedChannel", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testUnspecifiedChannel() throws Exception {\n    String agentName = \"agent1\";\n    Map<String, String> properties = getPropertiesForChannel(agentName,\n                                                             UnspecifiedChannel.class.getName());\n    MemoryConfigurationProvider provider =\n        new MemoryConfigurationProvider(agentName, properties);\n\n    MaterializedConfiguration config1 = provider.getConfiguration();\n    Channel channel1 = config1.getChannels().values().iterator().next();\n    Assert.assertTrue(channel1 instanceof UnspecifiedChannel);\n\n    MaterializedConfiguration config2 = provider.getConfiguration();\n    Channel channel2 = config2.getChannels().values().iterator().next();\n    Assert.assertTrue(channel2 instanceof UnspecifiedChannel);\n\n    Assert.assertSame(channel1, channel2);\n  }", "signature": "void testUnspecifiedChannel()", "full_signature": "@Test public void testUnspecifiedChannel()", "class_method_signature": "TestAbstractConfigurationProvider.testUnspecifiedChannel()", "testcase": true, "constructor": false, "invocations": ["getPropertiesForChannel", "getName", "getConfiguration", "next", "iterator", "values", "getChannels", "assertTrue", "getConfiguration", "next", "iterator", "values", "getChannels", "assertTrue", "assertSame"]}, "focal_class": {"identifier": "AbstractConfigurationProvider", "superclass": "", "interfaces": "implements ConfigurationProvider", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(AbstractConfigurationProvider.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(AbstractConfigurationProvider.class)", "var_name": "LOGGER"}, {"original_string": "private final String agentName;", "modifier": "private final", "type": "String", "declarator": "agentName", "var_name": "agentName"}, {"original_string": "private final SourceFactory sourceFactory;", "modifier": "private final", "type": "SourceFactory", "declarator": "sourceFactory", "var_name": "sourceFactory"}, {"original_string": "private final SinkFactory sinkFactory;", "modifier": "private final", "type": "SinkFactory", "declarator": "sinkFactory", "var_name": "sinkFactory"}, {"original_string": "private final ChannelFactory channelFactory;", "modifier": "private final", "type": "ChannelFactory", "declarator": "channelFactory", "var_name": "channelFactory"}, {"original_string": "private final Map<Class<? extends Channel>, Map<String, Channel>> channelCache;", "modifier": "private final", "type": "Map<Class<? extends Channel>, Map<String, Channel>>", "declarator": "channelCache", "var_name": "channelCache"}], "methods": [{"identifier": "AbstractConfigurationProvider", "parameters": "(String agentName)", "modifiers": "public", "return": "", "signature": " AbstractConfigurationProvider(String agentName)", "full_signature": "public  AbstractConfigurationProvider(String agentName)", "class_method_signature": "AbstractConfigurationProvider.AbstractConfigurationProvider(String agentName)", "testcase": false, "constructor": true}, {"identifier": "getFlumeConfiguration", "parameters": "()", "modifiers": "protected abstract", "return": "FlumeConfiguration", "signature": "FlumeConfiguration getFlumeConfiguration()", "full_signature": "protected abstract FlumeConfiguration getFlumeConfiguration()", "class_method_signature": "AbstractConfigurationProvider.getFlumeConfiguration()", "testcase": false, "constructor": false}, {"identifier": "getConfiguration", "parameters": "()", "modifiers": "public", "return": "MaterializedConfiguration", "signature": "MaterializedConfiguration getConfiguration()", "full_signature": "public MaterializedConfiguration getConfiguration()", "class_method_signature": "AbstractConfigurationProvider.getConfiguration()", "testcase": false, "constructor": false}, {"identifier": "getAgentName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAgentName()", "full_signature": "public String getAgentName()", "class_method_signature": "AbstractConfigurationProvider.getAgentName()", "testcase": false, "constructor": false}, {"identifier": "loadChannels", "parameters": "(AgentConfiguration agentConf,\n      Map<String, ChannelComponent> channelComponentMap)", "modifiers": "private", "return": "void", "signature": "void loadChannels(AgentConfiguration agentConf,\n      Map<String, ChannelComponent> channelComponentMap)", "full_signature": "private void loadChannels(AgentConfiguration agentConf,\n      Map<String, ChannelComponent> channelComponentMap)", "class_method_signature": "AbstractConfigurationProvider.loadChannels(AgentConfiguration agentConf,\n      Map<String, ChannelComponent> channelComponentMap)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateChannel", "parameters": "(\n      ListMultimap<Class<? extends Channel>, String> channelsNotReused,\n      String name, String type)", "modifiers": "private", "return": "Channel", "signature": "Channel getOrCreateChannel(\n      ListMultimap<Class<? extends Channel>, String> channelsNotReused,\n      String name, String type)", "full_signature": "private Channel getOrCreateChannel(\n      ListMultimap<Class<? extends Channel>, String> channelsNotReused,\n      String name, String type)", "class_method_signature": "AbstractConfigurationProvider.getOrCreateChannel(\n      ListMultimap<Class<? extends Channel>, String> channelsNotReused,\n      String name, String type)", "testcase": false, "constructor": false}, {"identifier": "loadSources", "parameters": "(AgentConfiguration agentConf,\n      Map<String, ChannelComponent> channelComponentMap,\n      Map<String, SourceRunner> sourceRunnerMap)", "modifiers": "private", "return": "void", "signature": "void loadSources(AgentConfiguration agentConf,\n      Map<String, ChannelComponent> channelComponentMap,\n      Map<String, SourceRunner> sourceRunnerMap)", "full_signature": "private void loadSources(AgentConfiguration agentConf,\n      Map<String, ChannelComponent> channelComponentMap,\n      Map<String, SourceRunner> sourceRunnerMap)", "class_method_signature": "AbstractConfigurationProvider.loadSources(AgentConfiguration agentConf,\n      Map<String, ChannelComponent> channelComponentMap,\n      Map<String, SourceRunner> sourceRunnerMap)", "testcase": false, "constructor": false}, {"identifier": "getSourceChannels", "parameters": "(Map<String, ChannelComponent> channelComponentMap,\n                  Source source, Collection<String> channelNames)", "modifiers": "private", "return": "List<Channel>", "signature": "List<Channel> getSourceChannels(Map<String, ChannelComponent> channelComponentMap,\n                  Source source, Collection<String> channelNames)", "full_signature": "private List<Channel> getSourceChannels(Map<String, ChannelComponent> channelComponentMap,\n                  Source source, Collection<String> channelNames)", "class_method_signature": "AbstractConfigurationProvider.getSourceChannels(Map<String, ChannelComponent> channelComponentMap,\n                  Source source, Collection<String> channelNames)", "testcase": false, "constructor": false}, {"identifier": "checkSourceChannelCompatibility", "parameters": "(Source source, Channel channel)", "modifiers": "private", "return": "void", "signature": "void checkSourceChannelCompatibility(Source source, Channel channel)", "full_signature": "private void checkSourceChannelCompatibility(Source source, Channel channel)", "class_method_signature": "AbstractConfigurationProvider.checkSourceChannelCompatibility(Source source, Channel channel)", "testcase": false, "constructor": false}, {"identifier": "checkSinkChannelCompatibility", "parameters": "(Sink sink, Channel channel)", "modifiers": "private", "return": "void", "signature": "void checkSinkChannelCompatibility(Sink sink, Channel channel)", "full_signature": "private void checkSinkChannelCompatibility(Sink sink, Channel channel)", "class_method_signature": "AbstractConfigurationProvider.checkSinkChannelCompatibility(Sink sink, Channel channel)", "testcase": false, "constructor": false}, {"identifier": "loadSinks", "parameters": "(AgentConfiguration agentConf,\n      Map<String, ChannelComponent> channelComponentMap, Map<String, SinkRunner> sinkRunnerMap)", "modifiers": "private", "return": "void", "signature": "void loadSinks(AgentConfiguration agentConf,\n      Map<String, ChannelComponent> channelComponentMap, Map<String, SinkRunner> sinkRunnerMap)", "full_signature": "private void loadSinks(AgentConfiguration agentConf,\n      Map<String, ChannelComponent> channelComponentMap, Map<String, SinkRunner> sinkRunnerMap)", "class_method_signature": "AbstractConfigurationProvider.loadSinks(AgentConfiguration agentConf,\n      Map<String, ChannelComponent> channelComponentMap, Map<String, SinkRunner> sinkRunnerMap)", "testcase": false, "constructor": false}, {"identifier": "loadSinkGroups", "parameters": "(AgentConfiguration agentConf,\n      Map<String, Sink> sinks, Map<String, SinkRunner> sinkRunnerMap)", "modifiers": "private", "return": "void", "signature": "void loadSinkGroups(AgentConfiguration agentConf,\n      Map<String, Sink> sinks, Map<String, SinkRunner> sinkRunnerMap)", "full_signature": "private void loadSinkGroups(AgentConfiguration agentConf,\n      Map<String, Sink> sinks, Map<String, SinkRunner> sinkRunnerMap)", "class_method_signature": "AbstractConfigurationProvider.loadSinkGroups(AgentConfiguration agentConf,\n      Map<String, Sink> sinks, Map<String, SinkRunner> sinkRunnerMap)", "testcase": false, "constructor": false}, {"identifier": "toMap", "parameters": "(Properties properties)", "modifiers": "protected", "return": "Map<String, String>", "signature": "Map<String, String> toMap(Properties properties)", "full_signature": "protected Map<String, String> toMap(Properties properties)", "class_method_signature": "AbstractConfigurationProvider.toMap(Properties properties)", "testcase": false, "constructor": false}], "file": "flume-ng-node/src/main/java/org/apache/flume/node/AbstractConfigurationProvider.java"}, "focal_method": {"identifier": "getConfiguration", "parameters": "()", "modifiers": "public", "return": "MaterializedConfiguration", "body": "public MaterializedConfiguration getConfiguration() {\n    MaterializedConfiguration conf = new SimpleMaterializedConfiguration();\n    FlumeConfiguration fconfig = getFlumeConfiguration();\n    AgentConfiguration agentConf = fconfig.getConfigurationFor(getAgentName());\n    if (agentConf != null) {\n      Map<String, ChannelComponent> channelComponentMap = Maps.newHashMap();\n      Map<String, SourceRunner> sourceRunnerMap = Maps.newHashMap();\n      Map<String, SinkRunner> sinkRunnerMap = Maps.newHashMap();\n      try {\n        loadChannels(agentConf, channelComponentMap);\n        loadSources(agentConf, channelComponentMap, sourceRunnerMap);\n        loadSinks(agentConf, channelComponentMap, sinkRunnerMap);\n        Set<String> channelNames = new HashSet<String>(channelComponentMap.keySet());\n        for (String channelName : channelNames) {\n          ChannelComponent channelComponent = channelComponentMap.get(channelName);\n          if (channelComponent.components.isEmpty()) {\n            LOGGER.warn(String.format(\"Channel %s has no components connected\" +\n                \" and has been removed.\", channelName));\n            channelComponentMap.remove(channelName);\n            Map<String, Channel> nameChannelMap =\n                channelCache.get(channelComponent.channel.getClass());\n            if (nameChannelMap != null) {\n              nameChannelMap.remove(channelName);\n            }\n          } else {\n            LOGGER.info(String.format(\"Channel %s connected to %s\",\n                channelName, channelComponent.components.toString()));\n            conf.addChannel(channelName, channelComponent.channel);\n          }\n        }\n        for (Map.Entry<String, SourceRunner> entry : sourceRunnerMap.entrySet()) {\n          conf.addSourceRunner(entry.getKey(), entry.getValue());\n        }\n        for (Map.Entry<String, SinkRunner> entry : sinkRunnerMap.entrySet()) {\n          conf.addSinkRunner(entry.getKey(), entry.getValue());\n        }\n      } catch (InstantiationException ex) {\n        LOGGER.error(\"Failed to instantiate component\", ex);\n      } finally {\n        channelComponentMap.clear();\n        sourceRunnerMap.clear();\n        sinkRunnerMap.clear();\n      }\n    } else {\n      LOGGER.warn(\"No configuration found for this host:{}\", getAgentName());\n    }\n    return conf;\n  }", "signature": "MaterializedConfiguration getConfiguration()", "full_signature": "public MaterializedConfiguration getConfiguration()", "class_method_signature": "AbstractConfigurationProvider.getConfiguration()", "testcase": false, "constructor": false, "invocations": ["getFlumeConfiguration", "getConfigurationFor", "getAgentName", "newHashMap", "newHashMap", "newHashMap", "loadChannels", "loadSources", "loadSinks", "keySet", "get", "isEmpty", "warn", "format", "remove", "get", "getClass", "remove", "info", "format", "toString", "addChannel", "entrySet", "addSourceRunner", "getKey", "getValue", "entrySet", "addSinkRunner", "getKey", "getValue", "error", "clear", "clear", "clear", "warn", "getAgentName"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}