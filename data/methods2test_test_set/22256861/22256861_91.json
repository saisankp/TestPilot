{"test_class": {"identifier": "DumpInformationMergerTest", "superclass": "", "interfaces": "", "fields": [], "file": "s3tbx-slstr-pdu-stitching/src/test/java/org/esa/s3tbx/slstr/pdu/stitching/manifest/DumpInformationMergerTest.java"}, "test_case": {"identifier": "testMergeNodes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMergeNodes() throws Exception {\n        List<Node> fromParents = new ArrayList<>();\n        fromParents.add(ManifestTestUtils.createNode(\n                \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n                        \"            <sentinel3:dumpInformation>\\n\" +\n                        \"              <sentinel3:granuleNumber>4</sentinel3:granuleNumber>\\n\" +\n                        \"              <sentinel3:granulePosition>NONE</sentinel3:granulePosition>\\n\" +\n                        \"              <sentinel3:dumpStart>2013-07-07T15:12:52.000000Z</sentinel3:dumpStart>\\n\" +\n                        \"              <sentinel3:receivingGroundStation>CGS</sentinel3:receivingGroundStation>\\n\" +\n                        \"              <sentinel3:receivingStartTime>2015-02-17T18:26:57.418621Z</sentinel3:receivingStartTime>\\n\" +\n                        \"              <sentinel3:receivingStopTime>2015-02-17T18:27:10.880813Z</sentinel3:receivingStopTime>\\n\" +\n                        \"            </sentinel3:dumpInformation>\").getFirstChild());\n\n        fromParents.add(ManifestTestUtils.createNode(\n                \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n                        \"                        <sentinel3:dumpInformation>\\n\" +\n                        \"                            <sentinel3:granuleNumber>5</sentinel3:granuleNumber>\\n\" +\n                        \"                            <sentinel3:granulePosition>NONE</sentinel3:granulePosition>\\n\" +\n                        \"                            <sentinel3:dumpStart>2013-07-07T15:12:52.000000Z</sentinel3:dumpStart>\\n\" +\n                        \"                            <sentinel3:receivingGroundStation>CGS</sentinel3:receivingGroundStation>\\n\" +\n                        \"                            <sentinel3:receivingStartTime>2015-02-17T18:27:10.909138Z</sentinel3:receivingStartTime>\\n\" +\n                        \"                            <sentinel3:receivingStopTime>2015-02-17T18:27:24.371332Z</sentinel3:receivingStopTime>\\n\" +\n                        \"                        </sentinel3:dumpInformation>\").getFirstChild());\n        fromParents.add(ManifestTestUtils.createNode(\n                \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n                        \"            <sentinel3:dumpInformation>\\n\" +\n                        \"              <sentinel3:granuleNumber>6</sentinel3:granuleNumber>\\n\" +\n                        \"              <sentinel3:granulePosition>NONE</sentinel3:granulePosition>\\n\" +\n                        \"              <sentinel3:dumpStart>2013-07-07T15:12:52.000000Z</sentinel3:dumpStart>\\n\" +\n                        \"              <sentinel3:receivingGroundStation>CGS</sentinel3:receivingGroundStation>\\n\" +\n                        \"              <sentinel3:receivingStartTime>2015-02-17T18:27:24.399655Z</sentinel3:receivingStartTime>\\n\" +\n                        \"              <sentinel3:receivingStopTime>2015-02-17T18:27:37.861849Z</sentinel3:receivingStopTime>\\n\" +\n                        \"            </sentinel3:dumpInformation>\").getFirstChild());\n\n        Document manifest = ManifestTestUtils.createDocument();\n        final Element parentElement = manifest.createElement(\"parent\");\n        final Element manifestElement = manifest.createElement(\"sentinel3:dumpInformation\");\n        parentElement.appendChild(manifestElement);\n        manifest.appendChild(parentElement);\n\n        new DumpInformationMerger().mergeNodes(fromParents, manifestElement, manifest);\n\n        final NodeList manifestChildNodes = parentElement.getChildNodes();\n        assertEquals(3, manifestChildNodes.getLength());\n\n        for (int i = 0; i < fromParents.size(); i++) {\n            assertEqualsElement(fromParents.get(i), manifestChildNodes.item(i));\n        }\n    }", "signature": "void testMergeNodes()", "full_signature": "@Test public void testMergeNodes()", "class_method_signature": "DumpInformationMergerTest.testMergeNodes()", "testcase": true, "constructor": false, "invocations": ["add", "getFirstChild", "createNode", "add", "getFirstChild", "createNode", "add", "getFirstChild", "createNode", "createDocument", "createElement", "createElement", "appendChild", "appendChild", "mergeNodes", "getChildNodes", "assertEquals", "getLength", "size", "assertEqualsElement", "get", "item"]}, "focal_class": {"identifier": "DumpInformationMerger", "superclass": "extends AbstractElementMerger", "interfaces": "", "fields": [], "methods": [{"identifier": "mergeNodes", "parameters": "(List<Node> fromParents, Element toParent, Document toDocument)", "modifiers": "@Override public", "return": "void", "signature": "void mergeNodes(List<Node> fromParents, Element toParent, Document toDocument)", "full_signature": "@Override public void mergeNodes(List<Node> fromParents, Element toParent, Document toDocument)", "class_method_signature": "DumpInformationMerger.mergeNodes(List<Node> fromParents, Element toParent, Document toDocument)", "testcase": false, "constructor": false}], "file": "s3tbx-slstr-pdu-stitching/src/main/java/org/esa/s3tbx/slstr/pdu/stitching/manifest/DumpInformationMerger.java"}, "focal_method": {"identifier": "mergeNodes", "parameters": "(List<Node> fromParents, Element toParent, Document toDocument)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void mergeNodes(List<Node> fromParents, Element toParent, Document toDocument) throws PDUStitchingException {\n        final Node actualParent = toParent.getParentNode();\n        actualParent.removeChild(toParent);\n        for (Node fromParent : fromParents) {\n            final Element newDumpElement = toDocument.createElement(fromParent.getNodeName());\n            final NodeList origChildNodes = fromParent.getChildNodes();\n            for (int j = 0; j < origChildNodes.getLength(); j++) {\n                final Node origChild = origChildNodes.item(j);\n                if (!(origChild.getNodeType() == Node.TEXT_NODE) && !origChild.getTextContent().contains(\"\\n\")) {\n                    final Element dumpChildElement = toDocument.createElement(origChild.getNodeName());\n                    final String textContent = origChild.getTextContent();\n                    final Text textNode = toDocument.createTextNode(textContent);\n                    dumpChildElement.appendChild(textNode);\n                    newDumpElement.appendChild(dumpChildElement);\n                }\n            }\n            actualParent.appendChild(newDumpElement);\n        }\n    }", "signature": "void mergeNodes(List<Node> fromParents, Element toParent, Document toDocument)", "full_signature": "@Override public void mergeNodes(List<Node> fromParents, Element toParent, Document toDocument)", "class_method_signature": "DumpInformationMerger.mergeNodes(List<Node> fromParents, Element toParent, Document toDocument)", "testcase": false, "constructor": false, "invocations": ["getParentNode", "removeChild", "createElement", "getNodeName", "getChildNodes", "getLength", "item", "getNodeType", "contains", "getTextContent", "createElement", "getNodeName", "getTextContent", "createTextNode", "appendChild", "appendChild", "appendChild"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}