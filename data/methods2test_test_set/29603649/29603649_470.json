{"test_class": {"identifier": "GzipDecompressorProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String GZIP_ENCODING = \"Content-Encoding\";", "modifier": "private static final", "type": "String", "declarator": "GZIP_ENCODING = \"Content-Encoding\"", "var_name": "GZIP_ENCODING"}, {"original_string": "private static final String GZIP = \"gzip\";", "modifier": "private static final", "type": "String", "declarator": "GZIP = \"gzip\"", "var_name": "GZIP"}, {"original_string": "@Mock\n    private GzipCompressionService decompressor;", "modifier": "@Mock\n    private", "type": "GzipCompressionService", "declarator": "decompressor", "var_name": "decompressor"}, {"original_string": "@Mock\n    private WilmaHttpEntity entity;", "modifier": "@Mock\n    private", "type": "WilmaHttpEntity", "declarator": "entity", "var_name": "entity"}, {"original_string": "@Mock\n    private InputStream inputStream;", "modifier": "@Mock\n    private", "type": "InputStream", "declarator": "inputStream", "var_name": "inputStream"}, {"original_string": "@Mock\n    private ByteArrayOutputStream body;", "modifier": "@Mock\n    private", "type": "ByteArrayOutputStream", "declarator": "body", "var_name": "body"}, {"original_string": "@InjectMocks\n    private GzipDecompressorProcessor underTest;", "modifier": "@InjectMocks\n    private", "type": "GzipDecompressorProcessor", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-core/src/test/java/com/epam/wilma/core/processor/entity/GzipDecompressorProcessorTest.java"}, "test_case": {"identifier": "testProcessShouldNotSetBodyWhenDecompressionNotNeeded", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProcessShouldNotSetBodyWhenDecompressionNotNeeded() throws ApplicationException {\n        //GIVEN\n        given(entity.getHeader(GZIP_ENCODING)).willReturn(\"xml\");\n        given(entity.getInputStream()).willReturn(inputStream);\n        given(decompressor.decompress(inputStream)).willReturn(body);\n        //WHEN\n        underTest.process(entity);\n        //THEN\n        verify(decompressor, never()).decompress(inputStream);\n    }", "signature": "void testProcessShouldNotSetBodyWhenDecompressionNotNeeded()", "full_signature": "@Test public void testProcessShouldNotSetBodyWhenDecompressionNotNeeded()", "class_method_signature": "GzipDecompressorProcessorTest.testProcessShouldNotSetBodyWhenDecompressionNotNeeded()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "getHeader", "willReturn", "given", "getInputStream", "willReturn", "given", "decompress", "process", "decompress", "verify", "never"]}, "focal_class": {"identifier": "GzipDecompressorProcessor", "superclass": "extends ProcessorBase", "interfaces": "", "fields": [{"original_string": "private static final String GZIP_ENCODING = \"Content-Encoding\";", "modifier": "private static final", "type": "String", "declarator": "GZIP_ENCODING = \"Content-Encoding\"", "var_name": "GZIP_ENCODING"}, {"original_string": "private static final String GZIP = \"gzip\";", "modifier": "private static final", "type": "String", "declarator": "GZIP = \"gzip\"", "var_name": "GZIP"}, {"original_string": "@Autowired\n    private GzipCompressionService decompressor;", "modifier": "@Autowired\n    private", "type": "GzipCompressionService", "declarator": "decompressor", "var_name": "decompressor"}], "methods": [{"identifier": "process", "parameters": "(final WilmaHttpEntity entity)", "modifiers": "@Override public", "return": "void", "signature": "void process(final WilmaHttpEntity entity)", "full_signature": "@Override public void process(final WilmaHttpEntity entity)", "class_method_signature": "GzipDecompressorProcessor.process(final WilmaHttpEntity entity)", "testcase": false, "constructor": false}, {"identifier": "isContentGzipEncoded", "parameters": "(final WilmaHttpEntity wilmaHttpEntity)", "modifiers": "private", "return": "boolean", "signature": "boolean isContentGzipEncoded(final WilmaHttpEntity wilmaHttpEntity)", "full_signature": "private boolean isContentGzipEncoded(final WilmaHttpEntity wilmaHttpEntity)", "class_method_signature": "GzipDecompressorProcessor.isContentGzipEncoded(final WilmaHttpEntity wilmaHttpEntity)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-core/src/main/java/com/epam/wilma/core/processor/entity/GzipDecompressorProcessor.java"}, "focal_method": {"identifier": "process", "parameters": "(final WilmaHttpEntity entity)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void process(final WilmaHttpEntity entity) throws ApplicationException {\n        if (isContentGzipEncoded(entity)) {\n            ByteArrayOutputStream baos = decompressor.decompress(entity.getInputStream());\n            ByteArrayInputStream inputStream = new ByteArrayInputStream(baos.toByteArray());\n            entity.setInputStream(inputStream);\n            entity.setBody(baos.toString());\n        }\n    }", "signature": "void process(final WilmaHttpEntity entity)", "full_signature": "@Override public void process(final WilmaHttpEntity entity)", "class_method_signature": "GzipDecompressorProcessor.process(final WilmaHttpEntity entity)", "testcase": false, "constructor": false, "invocations": ["isContentGzipEncoded", "decompress", "getInputStream", "toByteArray", "setInputStream", "setBody", "toString"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}