{"test_class": {"identifier": "VectorTest", "superclass": "", "interfaces": "", "fields": [], "file": "itext/src/test/java/com/itextpdf/text/pdf/parser/VectorTest.java"}, "test_case": {"identifier": "testCrossVector", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCrossVector() {\n        Vector v = new Vector(2, 3, 4);\n        Matrix m = new Matrix(5, 6, 7, 8, 9, 10);\n        Vector shouldBe = new Vector(67, 76, 4);\n        \n        Vector rslt = v.cross(m);\n        Assert.assertEquals(shouldBe, rslt);\n    }", "signature": "void testCrossVector()", "full_signature": "@Test public void testCrossVector()", "class_method_signature": "VectorTest.testCrossVector()", "testcase": true, "constructor": false, "invocations": ["cross", "assertEquals"]}, "focal_class": {"identifier": "Vector", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int I1 = 0;", "modifier": "public static final", "type": "int", "declarator": "I1 = 0", "var_name": "I1"}, {"original_string": "public static final int I2 = 1;", "modifier": "public static final", "type": "int", "declarator": "I2 = 1", "var_name": "I2"}, {"original_string": "public static final int I3 = 2;", "modifier": "public static final", "type": "int", "declarator": "I3 = 2", "var_name": "I3"}, {"original_string": "private final float[] vals = new float[]{\n            0,0,0\n    };", "modifier": "private final", "type": "float[]", "declarator": "vals = new float[]{\n            0,0,0\n    }", "var_name": "vals"}], "methods": [{"identifier": "Vector", "parameters": "(final float x, final float y, final float z)", "modifiers": "public", "return": "", "signature": " Vector(final float x, final float y, final float z)", "full_signature": "public  Vector(final float x, final float y, final float z)", "class_method_signature": "Vector.Vector(final float x, final float y, final float z)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "(final int index)", "modifiers": "public", "return": "float", "signature": "float get(final int index)", "full_signature": "public float get(final int index)", "class_method_signature": "Vector.get(final int index)", "testcase": false, "constructor": false}, {"identifier": "cross", "parameters": "(final Matrix by)", "modifiers": "public", "return": "Vector", "signature": "Vector cross(final Matrix by)", "full_signature": "public Vector cross(final Matrix by)", "class_method_signature": "Vector.cross(final Matrix by)", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "(final Vector v)", "modifiers": "public", "return": "Vector", "signature": "Vector subtract(final Vector v)", "full_signature": "public Vector subtract(final Vector v)", "class_method_signature": "Vector.subtract(final Vector v)", "testcase": false, "constructor": false}, {"identifier": "cross", "parameters": "(final Vector with)", "modifiers": "public", "return": "Vector", "signature": "Vector cross(final Vector with)", "full_signature": "public Vector cross(final Vector with)", "class_method_signature": "Vector.cross(final Vector with)", "testcase": false, "constructor": false}, {"identifier": "normalize", "parameters": "()", "modifiers": "public", "return": "Vector", "signature": "Vector normalize()", "full_signature": "public Vector normalize()", "class_method_signature": "Vector.normalize()", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "(final float by)", "modifiers": "public", "return": "Vector", "signature": "Vector multiply(final float by)", "full_signature": "public Vector multiply(final float by)", "class_method_signature": "Vector.multiply(final float by)", "testcase": false, "constructor": false}, {"identifier": "dot", "parameters": "(final Vector with)", "modifiers": "public", "return": "float", "signature": "float dot(final Vector with)", "full_signature": "public float dot(final Vector with)", "class_method_signature": "Vector.dot(final Vector with)", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float length()", "full_signature": "public float length()", "class_method_signature": "Vector.length()", "testcase": false, "constructor": false}, {"identifier": "lengthSquared", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float lengthSquared()", "full_signature": "public float lengthSquared()", "class_method_signature": "Vector.lengthSquared()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Vector.toString()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Vector.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object obj)", "full_signature": "@Override public boolean equals(final Object obj)", "class_method_signature": "Vector.equals(final Object obj)", "testcase": false, "constructor": false}], "file": "itext/src/main/java/com/itextpdf/text/pdf/parser/Vector.java"}, "focal_method": {"identifier": "cross", "parameters": "(final Matrix by)", "modifiers": "public", "return": "Vector", "body": "public Vector cross(final Matrix by){\n\n        float x = vals[I1]*by.get(Matrix.I11) + vals[I2]*by.get(Matrix.I21) + vals[I3]*by.get(Matrix.I31);\n        float y = vals[I1]*by.get(Matrix.I12) + vals[I2]*by.get(Matrix.I22) + vals[I3]*by.get(Matrix.I32);\n        float z = vals[I1]*by.get(Matrix.I13) + vals[I2]*by.get(Matrix.I23) + vals[I3]*by.get(Matrix.I33);\n\n        return new Vector(x, y, z);\n    }", "signature": "Vector cross(final Matrix by)", "full_signature": "public Vector cross(final Matrix by)", "class_method_signature": "Vector.cross(final Matrix by)", "testcase": false, "constructor": false, "invocations": ["get", "get", "get", "get", "get", "get", "get", "get", "get"]}, "repository": {"repo_id": 14892248, "url": "https://github.com/itext/itextpdf", "language": "Java", "is_fork": false, "fork_count": 400, "stargazer_count": 1164, "size": 115070, "license": "licensed"}}