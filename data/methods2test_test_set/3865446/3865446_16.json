{"test_class": {"identifier": "IndividualUtilsTest", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "jcool/benchmark/src/test/java/cz/cvut/felk/cig/jcool/benchmark/util/IndividualUtilsTest.java"}, "test_case": {"identifier": "testGetBestIndividual", "parameters": "()", "modifiers": "@Test // test whether the the function finds best individual in non-first population public", "return": "void", "body": "@Test\n    // test whether the the function finds best individual in non-first population\n    public void testGetBestIndividual(){\n        Individual ind1 = new SimpleIndividual(0, 1.0, null);\n        ind1.setValue(4.0);\n        Individual ind2 = new SimpleIndividual(0, 1.0, null);\n        ind2.setValue(1.0);\n        Individual ind3 = new SimpleIndividual(0, 1.0, null);\n        ind3.setValue(2.0);\n        Population[] inputPopulations = new Population[]{new SimplePopulation(new Individual[]{ind1}),\n                                                        new SimplePopulation(new Individual[]{ind2}),\n                                                        new SimplePopulation(new Individual[]{ind3})};\n        Individual bestIndividual = IndividualUtils.getBestIndividual(inputPopulations);\n        assertNotNull(bestIndividual);\n        assertSame(ind2, bestIndividual);\n    }", "signature": "void testGetBestIndividual()", "full_signature": "@Test // test whether the the function finds best individual in non-first population public void testGetBestIndividual()", "class_method_signature": "IndividualUtilsTest.testGetBestIndividual()", "testcase": true, "constructor": false, "invocations": ["setValue", "setValue", "setValue", "getBestIndividual", "assertNotNull", "assertSame"]}, "focal_class": {"identifier": "IndividualUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "makeCopy", "parameters": "(Individual[] sourceIndividuals, int birthday)", "modifiers": "public static", "return": "Individual[]", "signature": "Individual[] makeCopy(Individual[] sourceIndividuals, int birthday)", "full_signature": "public static Individual[] makeCopy(Individual[] sourceIndividuals, int birthday)", "class_method_signature": "IndividualUtils.makeCopy(Individual[] sourceIndividuals, int birthday)", "testcase": false, "constructor": false}, {"identifier": "getBestIndividual", "parameters": "(Population[] populations)", "modifiers": "public static", "return": "Individual", "signature": "Individual getBestIndividual(Population[] populations)", "full_signature": "public static Individual getBestIndividual(Population[] populations)", "class_method_signature": "IndividualUtils.getBestIndividual(Population[] populations)", "testcase": false, "constructor": false}, {"identifier": "getAllIndividuals", "parameters": "(Population[] populations)", "modifiers": "public static", "return": "Individual[]", "signature": "Individual[] getAllIndividuals(Population[] populations)", "full_signature": "public static Individual[] getAllIndividuals(Population[] populations)", "class_method_signature": "IndividualUtils.getAllIndividuals(Population[] populations)", "testcase": false, "constructor": false}, {"identifier": "getIndividuals", "parameters": "(Population[] populations, int maxIndexExclusive)", "modifiers": "public static", "return": "Individual[]", "signature": "Individual[] getIndividuals(Population[] populations, int maxIndexExclusive)", "full_signature": "public static Individual[] getIndividuals(Population[] populations, int maxIndexExclusive)", "class_method_signature": "IndividualUtils.getIndividuals(Population[] populations, int maxIndexExclusive)", "testcase": false, "constructor": false}], "file": "jcool/benchmark/src/main/java/cz/cvut/felk/cig/jcool/benchmark/util/IndividualUtils.java"}, "focal_method": {"identifier": "getBestIndividual", "parameters": "(Population[] populations)", "modifiers": "public static", "return": "Individual", "body": "public static Individual getBestIndividual(Population[] populations){\n        Individual globalBest = null;\n        Individual currentBest;\n\n        if (populations != null){\n            for (Population population : populations){\n                currentBest = population.getBestIndividual();\n                // initialize globalBest if null, else compare non-null currentBest\n                if (globalBest == null){\n                    globalBest = currentBest;\n                } else if (currentBest != null && currentBest.getValue() < globalBest.getValue()){\n                    globalBest = currentBest;\n                }\n            }\n        }\n        return globalBest;\n    }", "signature": "Individual getBestIndividual(Population[] populations)", "full_signature": "public static Individual getBestIndividual(Population[] populations)", "class_method_signature": "IndividualUtils.getBestIndividual(Population[] populations)", "testcase": false, "constructor": false, "invocations": ["getBestIndividual", "getValue", "getValue"]}, "repository": {"repo_id": 3865446, "url": "https://github.com/dhonza/JCOOL", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 415, "license": "licensed"}}