{"test_class": {"identifier": "DynamodbStreamRecordTransformerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String keyNK = \"Id\";", "modifier": "private static final", "type": "String", "declarator": "keyNK = \"Id\"", "var_name": "keyNK"}, {"original_string": "private static final String keyNSK = \"KeyNS\";", "modifier": "private static final", "type": "String", "declarator": "keyNSK = \"KeyNS\"", "var_name": "keyNSK"}, {"original_string": "private static final String keySK = \"SKey\";", "modifier": "private static final", "type": "String", "declarator": "keySK = \"SKey\"", "var_name": "keySK"}, {"original_string": "private static final String keySSK = \"KeySS\";", "modifier": "private static final", "type": "String", "declarator": "keySSK = \"KeySS\"", "var_name": "keySSK"}, {"original_string": "private static final String keyBK = \"BKey\";", "modifier": "private static final", "type": "String", "declarator": "keyBK = \"BKey\"", "var_name": "keyBK"}, {"original_string": "private static final String keyBSK = \"KeyBS\";", "modifier": "private static final", "type": "String", "declarator": "keyBSK = \"KeyBS\"", "var_name": "keyBSK"}, {"original_string": "private static final String keyBOOLK = \"IsBool\";", "modifier": "private static final", "type": "String", "declarator": "keyBOOLK = \"IsBool\"", "var_name": "keyBOOLK"}, {"original_string": "private static final String keyNULK = \"nil\";", "modifier": "private static final", "type": "String", "declarator": "keyNULK = \"nil\"", "var_name": "keyNULK"}, {"original_string": "private static final String keyMK = \"MapKey\";", "modifier": "private static final", "type": "String", "declarator": "keyMK = \"MapKey\"", "var_name": "keyMK"}, {"original_string": "private static final String keyLK = \"LongNum\";", "modifier": "private static final", "type": "String", "declarator": "keyLK = \"LongNum\"", "var_name": "keyLK"}, {"original_string": "private static final String oldImageSK = \"Message\";", "modifier": "private static final", "type": "String", "declarator": "oldImageSK = \"Message\"", "var_name": "oldImageSK"}, {"original_string": "private static final String newImageSK = \"Message\";", "modifier": "private static final", "type": "String", "declarator": "newImageSK = \"Message\"", "var_name": "newImageSK"}, {"original_string": "private static final String streamViewType = StreamViewType.NEW_AND_OLD_IMAGES.toString();", "modifier": "private static final", "type": "String", "declarator": "streamViewType = StreamViewType.NEW_AND_OLD_IMAGES.toString()", "var_name": "streamViewType"}, {"original_string": "private static final String sequenceNumber = \"222\";", "modifier": "private static final", "type": "String", "declarator": "sequenceNumber = \"222\"", "var_name": "sequenceNumber"}, {"original_string": "private static final Long sizeBytes = 59L;", "modifier": "private static final", "type": "Long", "declarator": "sizeBytes = 59L", "var_name": "sizeBytes"}, {"original_string": "private static final Date approximateCreationDateTime = new Date();", "modifier": "private static final", "type": "Date", "declarator": "approximateCreationDateTime = new Date()", "var_name": "approximateCreationDateTime"}, {"original_string": "public static final com.amazonaws.services.lambda.runtime.events.models.dynamodb.StreamRecord streamRecord_event =\n            new com.amazonaws.services.lambda.runtime.events.models.dynamodb.StreamRecord()\n                    .withKeys(ImmutableMap.<String, AttributeValue> builder()\n                            .put(keyNK, attributeValueN_event)\n                            .put(keyNSK, attributeValueNS_event)\n                            .put(keySK, attributeValueS_event)\n                            .put(keySSK, attributeValueSS_event)\n                            .put(keyBK, attributeValueB_event)\n                            .put(keyBSK, attributeValueBS_event)\n                            .put(keyBOOLK, attributeValueBOOL_event)\n                            .put(keyNULK, attributeValueNUL_event)\n                            .put(keyMK, attributeValueM_event)\n                            .put(keyLK, attributeValueL_event)\n                            .build()\n                    )\n                    .withOldImage(ImmutableMap.of(\n                            oldImageSK, attributeValueS_event,\n                            keyNK, attributeValueN_event\n                    ))\n                    .withNewImage(ImmutableMap.of(\n                            newImageSK, attributeValueS_event,\n                            keyNK, attributeValueN_event\n                    ))\n                    .withStreamViewType(StreamViewType.fromValue(streamViewType))\n                    .withSequenceNumber(sequenceNumber)\n                    .withSizeBytes(sizeBytes)\n                    .withApproximateCreationDateTime(approximateCreationDateTime);", "modifier": "public static final", "type": "com.amazonaws.services.lambda.runtime.events.models.dynamodb.StreamRecord", "declarator": "streamRecord_event =\n            new com.amazonaws.services.lambda.runtime.events.models.dynamodb.StreamRecord()\n                    .withKeys(ImmutableMap.<String, AttributeValue> builder()\n                            .put(keyNK, attributeValueN_event)\n                            .put(keyNSK, attributeValueNS_event)\n                            .put(keySK, attributeValueS_event)\n                            .put(keySSK, attributeValueSS_event)\n                            .put(keyBK, attributeValueB_event)\n                            .put(keyBSK, attributeValueBS_event)\n                            .put(keyBOOLK, attributeValueBOOL_event)\n                            .put(keyNULK, attributeValueNUL_event)\n                            .put(keyMK, attributeValueM_event)\n                            .put(keyLK, attributeValueL_event)\n                            .build()\n                    )\n                    .withOldImage(ImmutableMap.of(\n                            oldImageSK, attributeValueS_event,\n                            keyNK, attributeValueN_event\n                    ))\n                    .withNewImage(ImmutableMap.of(\n                            newImageSK, attributeValueS_event,\n                            keyNK, attributeValueN_event\n                    ))\n                    .withStreamViewType(StreamViewType.fromValue(streamViewType))\n                    .withSequenceNumber(sequenceNumber)\n                    .withSizeBytes(sizeBytes)\n                    .withApproximateCreationDateTime(approximateCreationDateTime)", "var_name": "streamRecord_event"}, {"original_string": "public static final StreamRecord streamRecord_v2 = StreamRecord.builder()\n            .approximateCreationDateTime(approximateCreationDateTime.toInstant())\n            .keys(ImmutableMap.<String, software.amazon.awssdk.services.dynamodb.model.AttributeValue> builder()\n                    .put(keyNK, attributeValueN_v2)\n                    .put(keyNSK, attributeValueNS_v2)\n                    .put(keySK, attributeValueS_v2)\n                    .put(keySSK, attributeValueSS_v2)\n                    .put(keyBK, attributeValueB_v2)\n                    .put(keyBSK, attributeValueBS_v2)\n                    .put(keyBOOLK, attributeValueBOOL_v2)\n                    .put(keyNULK, attributeValueNUL_v2)\n                    .put(keyMK, attributeValueM_v2)\n                    .put(keyLK, attributeValueL_v2)\n                    .build()\n            )\n            .oldImage(ImmutableMap.of(\n                    oldImageSK, attributeValueS_v2,\n                    keyNK, attributeValueN_v2\n            ))\n            .newImage(ImmutableMap.of(\n                    newImageSK, attributeValueS_v2,\n                    keyNK, attributeValueN_v2\n            ))\n            .sequenceNumber(sequenceNumber)\n            .sizeBytes(sizeBytes)\n            .streamViewType(streamViewType)\n            .build();", "modifier": "public static final", "type": "StreamRecord", "declarator": "streamRecord_v2 = StreamRecord.builder()\n            .approximateCreationDateTime(approximateCreationDateTime.toInstant())\n            .keys(ImmutableMap.<String, software.amazon.awssdk.services.dynamodb.model.AttributeValue> builder()\n                    .put(keyNK, attributeValueN_v2)\n                    .put(keyNSK, attributeValueNS_v2)\n                    .put(keySK, attributeValueS_v2)\n                    .put(keySSK, attributeValueSS_v2)\n                    .put(keyBK, attributeValueB_v2)\n                    .put(keyBSK, attributeValueBS_v2)\n                    .put(keyBOOLK, attributeValueBOOL_v2)\n                    .put(keyNULK, attributeValueNUL_v2)\n                    .put(keyMK, attributeValueM_v2)\n                    .put(keyLK, attributeValueL_v2)\n                    .build()\n            )\n            .oldImage(ImmutableMap.of(\n                    oldImageSK, attributeValueS_v2,\n                    keyNK, attributeValueN_v2\n            ))\n            .newImage(ImmutableMap.of(\n                    newImageSK, attributeValueS_v2,\n                    keyNK, attributeValueN_v2\n            ))\n            .sequenceNumber(sequenceNumber)\n            .sizeBytes(sizeBytes)\n            .streamViewType(streamViewType)\n            .build()", "var_name": "streamRecord_v2"}], "file": "aws-lambda-java-events-sdk-transformer/src/test/java/com/amazonaws/services/lambda/runtime/events/transformers/dynamodb/DynamodbStreamRecordTransformerTest.java"}, "test_case": {"identifier": "testToStreamRecordV2WhenOldImageIsNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToStreamRecordV2WhenOldImageIsNull() {\n        com.amazonaws.services.lambda.runtime.events.models.dynamodb.StreamRecord streamRecord = streamRecord_event.clone();\n        streamRecord.setOldImage(null);\n\n        Assertions.assertDoesNotThrow(() -> {\n            DynamodbStreamRecordTransformer.toStreamRecordV2(streamRecord);\n        });\n    }", "signature": "void testToStreamRecordV2WhenOldImageIsNull()", "full_signature": "@Test public void testToStreamRecordV2WhenOldImageIsNull()", "class_method_signature": "DynamodbStreamRecordTransformerTest.testToStreamRecordV2WhenOldImageIsNull()", "testcase": true, "constructor": false, "invocations": ["clone", "setOldImage", "assertDoesNotThrow", "toStreamRecordV2"]}, "focal_class": {"identifier": "DynamodbStreamRecordTransformer", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "toStreamRecordV2", "parameters": "(final com.amazonaws.services.lambda.runtime.events.models.dynamodb.StreamRecord streamRecord)", "modifiers": "public static", "return": "StreamRecord", "signature": "StreamRecord toStreamRecordV2(final com.amazonaws.services.lambda.runtime.events.models.dynamodb.StreamRecord streamRecord)", "full_signature": "public static StreamRecord toStreamRecordV2(final com.amazonaws.services.lambda.runtime.events.models.dynamodb.StreamRecord streamRecord)", "class_method_signature": "DynamodbStreamRecordTransformer.toStreamRecordV2(final com.amazonaws.services.lambda.runtime.events.models.dynamodb.StreamRecord streamRecord)", "testcase": false, "constructor": false}], "file": "aws-lambda-java-events-sdk-transformer/src/main/java/com/amazonaws/services/lambda/runtime/events/transformers/dynamodb/DynamodbStreamRecordTransformer.java"}, "focal_method": {"identifier": "toStreamRecordV2", "parameters": "(final com.amazonaws.services.lambda.runtime.events.models.dynamodb.StreamRecord streamRecord)", "modifiers": "public static", "return": "StreamRecord", "body": "public static StreamRecord toStreamRecordV2(final com.amazonaws.services.lambda.runtime.events.models.dynamodb.StreamRecord streamRecord) {\n\n        return StreamRecord.builder()\n                .approximateCreationDateTime(\n                    streamRecord.getApproximateCreationDateTime().toInstant()\n                )\n                .keys(\n                    DynamodbAttributeValueTransformer.toAttributeValueMapV2(streamRecord.getKeys())\n                )\n                .newImage(\n                    streamRecord.getNewImage() != null\n                        ? DynamodbAttributeValueTransformer.toAttributeValueMapV2(streamRecord.getNewImage())\n                        : null\n                )\n                .oldImage(\n                    streamRecord.getOldImage() != null\n                        ? DynamodbAttributeValueTransformer.toAttributeValueMapV2(streamRecord.getOldImage())\n                        : null\n                )\n                .sequenceNumber(streamRecord.getSequenceNumber())\n                .sizeBytes(streamRecord.getSizeBytes())\n                .streamViewType(streamRecord.getStreamViewType())\n                .build();\n    }", "signature": "StreamRecord toStreamRecordV2(final com.amazonaws.services.lambda.runtime.events.models.dynamodb.StreamRecord streamRecord)", "full_signature": "public static StreamRecord toStreamRecordV2(final com.amazonaws.services.lambda.runtime.events.models.dynamodb.StreamRecord streamRecord)", "class_method_signature": "DynamodbStreamRecordTransformer.toStreamRecordV2(final com.amazonaws.services.lambda.runtime.events.models.dynamodb.StreamRecord streamRecord)", "testcase": false, "constructor": false, "invocations": ["build", "streamViewType", "sizeBytes", "sequenceNumber", "oldImage", "newImage", "keys", "approximateCreationDateTime", "builder", "toInstant", "getApproximateCreationDateTime", "toAttributeValueMapV2", "getKeys", "getNewImage", "toAttributeValueMapV2", "getNewImage", "getOldImage", "toAttributeValueMapV2", "getOldImage", "getSequenceNumber", "getSizeBytes", "getStreamViewType"]}, "repository": {"repo_id": 35844242, "url": "https://github.com/aws/aws-lambda-java-libs", "stars": 240, "created": "5/18/2015 9:43:45 PM +00:00", "updates": "2020-01-23T10:22:17+00:00", "fork": "False", "license": "licensed"}}