{"test_class": {"identifier": "BondTest", "superclass": "extends AbstractBondTest", "interfaces": "", "fields": [], "file": "base/silent/src/test/java/org/openscience/cdk/silent/BondTest.java"}, "test_case": {"identifier": "testBond", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBond() {\n        IBond bond = new Bond();\n        Assert.assertEquals(0, bond.getAtomCount());\n        Assert.assertNull(bond.getBegin());\n        Assert.assertNull(bond.getEnd());\n        Assert.assertNull(bond.getOrder());\n        Assert.assertEquals(IBond.Stereo.NONE, bond.getStereo());\n    }", "signature": "void testBond()", "full_signature": "@Test public void testBond()", "class_method_signature": "BondTest.testBond()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getAtomCount", "assertNull", "getBegin", "assertNull", "getEnd", "assertNull", "getOrder", "assertEquals", "getStereo"]}, "focal_class": {"identifier": "Bond", "superclass": "extends ElectronContainer", "interfaces": "implements IBond, Serializable, Cloneable", "fields": [{"original_string": "private static final long serialVersionUID = 7057060562283387384L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 7057060562283387384L", "var_name": "serialVersionUID"}, {"original_string": "protected IBond.Order     order            = (Order) CDKConstants.UNSET;", "modifier": "protected", "type": "IBond.Order", "declarator": "order            = (Order) CDKConstants.UNSET", "var_name": "order"}, {"original_string": "protected int             atomCount        = 0;", "modifier": "protected", "type": "int", "declarator": "atomCount        = 0", "var_name": "atomCount"}, {"original_string": "protected IAtom[]         atoms            = new IAtom[2];", "modifier": "protected", "type": "IAtom[]", "declarator": "atoms            = new IAtom[2]", "var_name": "atoms"}, {"original_string": "protected IBond.Stereo    stereo;", "modifier": "protected", "type": "IBond.Stereo", "declarator": "stereo", "var_name": "stereo"}, {"original_string": "protected IBond.Display   display = Display.Solid;", "modifier": "protected", "type": "IBond.Display", "declarator": "display = Display.Solid", "var_name": "display"}], "methods": [{"identifier": "Bond", "parameters": "()", "modifiers": "public", "return": "", "signature": " Bond()", "full_signature": "public  Bond()", "class_method_signature": "Bond.Bond()", "testcase": false, "constructor": true}, {"identifier": "Bond", "parameters": "(IAtom atom1, IAtom atom2)", "modifiers": "public", "return": "", "signature": " Bond(IAtom atom1, IAtom atom2)", "full_signature": "public  Bond(IAtom atom1, IAtom atom2)", "class_method_signature": "Bond.Bond(IAtom atom1, IAtom atom2)", "testcase": false, "constructor": true}, {"identifier": "Bond", "parameters": "(IAtom atom1, IAtom atom2, Order order)", "modifiers": "public", "return": "", "signature": " Bond(IAtom atom1, IAtom atom2, Order order)", "full_signature": "public  Bond(IAtom atom1, IAtom atom2, Order order)", "class_method_signature": "Bond.Bond(IAtom atom1, IAtom atom2, Order order)", "testcase": false, "constructor": true}, {"identifier": "Bond", "parameters": "(IAtom[] atoms)", "modifiers": "public", "return": "", "signature": " Bond(IAtom[] atoms)", "full_signature": "public  Bond(IAtom[] atoms)", "class_method_signature": "Bond.Bond(IAtom[] atoms)", "testcase": false, "constructor": true}, {"identifier": "Bond", "parameters": "(IAtom[] atoms, Order order)", "modifiers": "public", "return": "", "signature": " Bond(IAtom[] atoms, Order order)", "full_signature": "public  Bond(IAtom[] atoms, Order order)", "class_method_signature": "Bond.Bond(IAtom[] atoms, Order order)", "testcase": false, "constructor": true}, {"identifier": "Bond", "parameters": "(IAtom beg, IAtom end, Order order, IBond.Stereo stereo)", "modifiers": "public", "return": "", "signature": " Bond(IAtom beg, IAtom end, Order order, IBond.Stereo stereo)", "full_signature": "public  Bond(IAtom beg, IAtom end, Order order, IBond.Stereo stereo)", "class_method_signature": "Bond.Bond(IAtom beg, IAtom end, Order order, IBond.Stereo stereo)", "testcase": false, "constructor": true}, {"identifier": "atoms", "parameters": "()", "modifiers": "@Override public", "return": "Iterable<IAtom>", "signature": "Iterable<IAtom> atoms()", "full_signature": "@Override public Iterable<IAtom> atoms()", "class_method_signature": "Bond.atoms()", "testcase": false, "constructor": false}, {"identifier": "getIndex", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getIndex()", "full_signature": "@Override public int getIndex()", "class_method_signature": "Bond.getIndex()", "testcase": false, "constructor": false}, {"identifier": "getContainer", "parameters": "()", "modifiers": "@Override public", "return": "IAtomContainer", "signature": "IAtomContainer getContainer()", "full_signature": "@Override public IAtomContainer getContainer()", "class_method_signature": "Bond.getContainer()", "testcase": false, "constructor": false}, {"identifier": "setAtoms", "parameters": "(IAtom[] atoms)", "modifiers": "@Override public", "return": "void", "signature": "void setAtoms(IAtom[] atoms)", "full_signature": "@Override public void setAtoms(IAtom[] atoms)", "class_method_signature": "Bond.setAtoms(IAtom[] atoms)", "testcase": false, "constructor": false}, {"identifier": "getAtomCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getAtomCount()", "full_signature": "@Override public int getAtomCount()", "class_method_signature": "Bond.getAtomCount()", "testcase": false, "constructor": false}, {"identifier": "getAtom", "parameters": "(int position)", "modifiers": "@Override public", "return": "IAtom", "signature": "IAtom getAtom(int position)", "full_signature": "@Override public IAtom getAtom(int position)", "class_method_signature": "Bond.getAtom(int position)", "testcase": false, "constructor": false}, {"identifier": "getBegin", "parameters": "()", "modifiers": "public", "return": "IAtom", "signature": "IAtom getBegin()", "full_signature": "public IAtom getBegin()", "class_method_signature": "Bond.getBegin()", "testcase": false, "constructor": false}, {"identifier": "getEnd", "parameters": "()", "modifiers": "public", "return": "IAtom", "signature": "IAtom getEnd()", "full_signature": "public IAtom getEnd()", "class_method_signature": "Bond.getEnd()", "testcase": false, "constructor": false}, {"identifier": "getOther", "parameters": "(IAtom atom)", "modifiers": "@Override public", "return": "IAtom", "signature": "IAtom getOther(IAtom atom)", "full_signature": "@Override public IAtom getOther(IAtom atom)", "class_method_signature": "Bond.getOther(IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "getConnectedAtom", "parameters": "(IAtom atom)", "modifiers": "@Override public", "return": "IAtom", "signature": "IAtom getConnectedAtom(IAtom atom)", "full_signature": "@Override public IAtom getConnectedAtom(IAtom atom)", "class_method_signature": "Bond.getConnectedAtom(IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "getConnectedAtoms", "parameters": "(IAtom atom)", "modifiers": "@Override public", "return": "IAtom[]", "signature": "IAtom[] getConnectedAtoms(IAtom atom)", "full_signature": "@Override public IAtom[] getConnectedAtoms(IAtom atom)", "class_method_signature": "Bond.getConnectedAtoms(IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(IAtom atom)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(IAtom atom)", "full_signature": "@Override public boolean contains(IAtom atom)", "class_method_signature": "Bond.contains(IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "setAtom", "parameters": "(IAtom atom, int position)", "modifiers": "@Override public", "return": "void", "signature": "void setAtom(IAtom atom, int position)", "full_signature": "@Override public void setAtom(IAtom atom, int position)", "class_method_signature": "Bond.setAtom(IAtom atom, int position)", "testcase": false, "constructor": false}, {"identifier": "getOrder", "parameters": "()", "modifiers": "@Override public", "return": "Order", "signature": "Order getOrder()", "full_signature": "@Override public Order getOrder()", "class_method_signature": "Bond.getOrder()", "testcase": false, "constructor": false}, {"identifier": "setOrder", "parameters": "(Order order)", "modifiers": "@Override public", "return": "void", "signature": "void setOrder(Order order)", "full_signature": "@Override public void setOrder(Order order)", "class_method_signature": "Bond.setOrder(Order order)", "testcase": false, "constructor": false}, {"identifier": "getStereo", "parameters": "()", "modifiers": "@Override public", "return": "IBond.Stereo", "signature": "IBond.Stereo getStereo()", "full_signature": "@Override public IBond.Stereo getStereo()", "class_method_signature": "Bond.getStereo()", "testcase": false, "constructor": false}, {"identifier": "setStereo", "parameters": "(IBond.Stereo stereo)", "modifiers": "@Override public", "return": "void", "signature": "void setStereo(IBond.Stereo stereo)", "full_signature": "@Override public void setStereo(IBond.Stereo stereo)", "class_method_signature": "Bond.setStereo(IBond.Stereo stereo)", "testcase": false, "constructor": false}, {"identifier": "getDisplay", "parameters": "()", "modifiers": "public", "return": "IBond.Display", "signature": "IBond.Display getDisplay()", "full_signature": "public IBond.Display getDisplay()", "class_method_signature": "Bond.getDisplay()", "testcase": false, "constructor": false}, {"identifier": "setDisplay", "parameters": "(IBond.Display display)", "modifiers": "public", "return": "void", "signature": "void setDisplay(IBond.Display display)", "full_signature": "public void setDisplay(IBond.Display display)", "class_method_signature": "Bond.setDisplay(IBond.Display display)", "testcase": false, "constructor": false}, {"identifier": "get2DCenter", "parameters": "()", "modifiers": "@Override public", "return": "Point2d", "signature": "Point2d get2DCenter()", "full_signature": "@Override public Point2d get2DCenter()", "class_method_signature": "Bond.get2DCenter()", "testcase": false, "constructor": false}, {"identifier": "get3DCenter", "parameters": "()", "modifiers": "@Override public", "return": "Point3d", "signature": "Point3d get3DCenter()", "full_signature": "@Override public Point3d get3DCenter()", "class_method_signature": "Bond.get3DCenter()", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(Object object)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean compare(Object object)", "full_signature": "@Override public boolean compare(Object object)", "class_method_signature": "Bond.compare(Object object)", "testcase": false, "constructor": false}, {"identifier": "isConnectedTo", "parameters": "(IBond bond)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isConnectedTo(IBond bond)", "full_signature": "@Override public boolean isConnectedTo(IBond bond)", "class_method_signature": "Bond.isConnectedTo(IBond bond)", "testcase": false, "constructor": false}, {"identifier": "isAromatic", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAromatic()", "full_signature": "@Override public boolean isAromatic()", "class_method_signature": "Bond.isAromatic()", "testcase": false, "constructor": false}, {"identifier": "setIsAromatic", "parameters": "(boolean arom)", "modifiers": "@Override public", "return": "void", "signature": "void setIsAromatic(boolean arom)", "full_signature": "@Override public void setIsAromatic(boolean arom)", "class_method_signature": "Bond.setIsAromatic(boolean arom)", "testcase": false, "constructor": false}, {"identifier": "isInRing", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isInRing()", "full_signature": "@Override public boolean isInRing()", "class_method_signature": "Bond.isInRing()", "testcase": false, "constructor": false}, {"identifier": "setIsInRing", "parameters": "(boolean ring)", "modifiers": "@Override public", "return": "void", "signature": "void setIsInRing(boolean ring)", "full_signature": "@Override public void setIsInRing(boolean ring)", "class_method_signature": "Bond.setIsInRing(boolean ring)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "IBond", "signature": "IBond clone()", "full_signature": "@Override public IBond clone()", "class_method_signature": "Bond.clone()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Bond.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "Bond.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Bond.toString()", "testcase": false, "constructor": false}], "file": "base/silent/src/main/java/org/openscience/cdk/silent/Bond.java"}, "focal_method": {"identifier": "Bond", "parameters": "()", "modifiers": "public", "return": "", "body": "public Bond() {\n        this(null, null, null, IBond.Stereo.NONE);\n        atomCount = 0;\n    }", "signature": " Bond()", "full_signature": "public  Bond()", "class_method_signature": "Bond.Bond()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}