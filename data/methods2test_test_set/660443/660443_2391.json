{"test_class": {"identifier": "AdductionSodiumLPReactionTest", "superclass": "extends ReactionProcessTest", "interfaces": "", "fields": [{"original_string": "private final LonePairElectronChecker lpcheck = new LonePairElectronChecker();", "modifier": "private final", "type": "LonePairElectronChecker", "declarator": "lpcheck = new LonePairElectronChecker()", "var_name": "lpcheck"}, {"original_string": "private IChemObjectBuilder            builder = SilentChemObjectBuilder.getInstance();", "modifier": "private", "type": "IChemObjectBuilder", "declarator": "builder = SilentChemObjectBuilder.getInstance()", "var_name": "builder"}], "file": "base/reaction/src/test/java/org/openscience/cdk/reaction/type/AdductionSodiumLPReactionTest.java"}, "test_case": {"identifier": "testMapping", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMapping() throws Exception {\n        IReactionProcess type = new AdductionSodiumLPReaction();\n\n        IAtomContainerSet setOfReactants = getExampleReactants();\n        IAtomContainer molecule = setOfReactants.getAtomContainer(0);\n\n        /* automatic looking for active center */\n        List<IParameterReact> paramList = new ArrayList<IParameterReact>();\n        IParameterReact param = new SetReactionCenter();\n        param.setParameter(Boolean.FALSE);\n        paramList.add(param);\n        type.setParameterList(paramList);\n        /* initiate */\n\n        IReactionSet setOfReactions = type.initiate(setOfReactants, null);\n\n        IAtomContainer product = setOfReactions.getReaction(0).getProducts().getAtomContainer(0);\n\n        Assert.assertEquals(8, setOfReactions.getReaction(0).getMappingCount());\n\n        IAtom mappedProductA0 = (IAtom) ReactionManipulator.getMappedChemObject(setOfReactions.getReaction(0),\n                molecule.getAtom(0));\n        Assert.assertEquals(mappedProductA0, product.getAtom(0));\n\n    }", "signature": "void testMapping()", "full_signature": "@Test public void testMapping()", "class_method_signature": "AdductionSodiumLPReactionTest.testMapping()", "testcase": true, "constructor": false, "invocations": ["getExampleReactants", "getAtomContainer", "setParameter", "add", "setParameterList", "initiate", "getAtomContainer", "getProducts", "getReaction", "assertEquals", "getMappingCount", "getReaction", "getMappedChemObject", "getReaction", "getAtom", "assertEquals", "getAtom"]}, "focal_class": {"identifier": "AdductionSodiumLPReaction", "superclass": "extends ReactionEngine", "interfaces": "implements IReactionProcess", "fields": [{"original_string": "private static ILoggingTool logger = LoggingToolFactory.createLoggingTool(AdductionSodiumLPReaction.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(AdductionSodiumLPReaction.class)", "var_name": "logger"}], "methods": [{"identifier": "AdductionSodiumLPReaction", "parameters": "()", "modifiers": "public", "return": "", "signature": " AdductionSodiumLPReaction()", "full_signature": "public  AdductionSodiumLPReaction()", "class_method_signature": "AdductionSodiumLPReaction.AdductionSodiumLPReaction()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "ReactionSpecification", "signature": "ReactionSpecification getSpecification()", "full_signature": "@Override public ReactionSpecification getSpecification()", "class_method_signature": "AdductionSodiumLPReaction.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "initiate", "parameters": "(IAtomContainerSet reactants, IAtomContainerSet agents)", "modifiers": "@Override public", "return": "IReactionSet", "signature": "IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "full_signature": "@Override public IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "class_method_signature": "AdductionSodiumLPReaction.initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "testcase": false, "constructor": false}, {"identifier": "setActiveCenters", "parameters": "(IAtomContainer reactant)", "modifiers": "private", "return": "void", "signature": "void setActiveCenters(IAtomContainer reactant)", "full_signature": "private void setActiveCenters(IAtomContainer reactant)", "class_method_signature": "AdductionSodiumLPReaction.setActiveCenters(IAtomContainer reactant)", "testcase": false, "constructor": false}], "file": "base/reaction/src/main/java/org/openscience/cdk/reaction/type/AdductionSodiumLPReaction.java"}, "focal_method": {"identifier": "initiate", "parameters": "(IAtomContainerSet reactants, IAtomContainerSet agents)", "modifiers": "@Override public", "return": "IReactionSet", "body": "@Override\n    public IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents) throws CDKException {\n\n        logger.debug(\"initiate reaction: AdductionSodiumLPReaction\");\n\n        if (reactants.getAtomContainerCount() != 1) {\n            throw new CDKException(\"AdductionSodiumLPReaction only expects one reactant\");\n        }\n        if (agents != null) {\n            throw new CDKException(\"AdductionSodiumLPReaction don't expects agents\");\n        }\n\n        IReactionSet setOfReactions = reactants.getBuilder().newInstance(IReactionSet.class);\n        IAtomContainer reactant = reactants.getAtomContainer(0);\n\n        /*\n         * if the parameter hasActiveCenter is not fixed yet, set the active\n         * centers\n         */\n        IParameterReact ipr = super.getParameterClass(SetReactionCenter.class);\n        if (ipr != null && !ipr.isSetParameter()) setActiveCenters(reactant);\n\n        if (AtomContainerManipulator.getTotalCharge(reactant) > 0) return setOfReactions;\n\n        Iterator<IAtom> atoms = reactant.atoms().iterator();\n        while (atoms.hasNext()) {\n            IAtom atomi = atoms.next(); // Atom pos 1\n            if (atomi.getFlag(CDKConstants.REACTIVE_CENTER)\n                    && (atomi.getFormalCharge() == CDKConstants.UNSET ? 0 : atomi.getFormalCharge()) <= 0\n                    && reactant.getConnectedLonePairsCount(atomi) > 0\n                    && reactant.getConnectedSingleElectronsCount(atomi) == 0) {\n\n                ArrayList<IAtom> atomList = new ArrayList<IAtom>();\n                atomList.add(atomi);\n                IAtom atomH = reactant.getBuilder().newInstance(IAtom.class, \"Na\");\n                atomH.setFormalCharge(1);\n                atomList.add(atomH);\n\n                IAtomContainerSet moleculeSet = reactant.getBuilder().newInstance(IAtomContainerSet.class);\n                moleculeSet.addAtomContainer(reactant);\n                IAtomContainer adduct = reactant.getBuilder().newInstance(IAtomContainer.class);\n                adduct.addAtom(atomH);\n                moleculeSet.addAtomContainer(adduct);\n\n                IReaction reaction = mechanism.initiate(moleculeSet, atomList, null);\n                if (reaction == null)\n                    continue;\n                else\n                    setOfReactions.addReaction(reaction);\n\n            }\n        }\n\n        return setOfReactions;\n    }", "signature": "IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "full_signature": "@Override public IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "class_method_signature": "AdductionSodiumLPReaction.initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "testcase": false, "constructor": false, "invocations": ["debug", "getAtomContainerCount", "newInstance", "getBuilder", "getAtomContainer", "getParameterClass", "isSetParameter", "setActiveCenters", "getTotalCharge", "iterator", "atoms", "hasNext", "next", "getFlag", "getFormalCharge", "getFormalCharge", "getConnectedLonePairsCount", "getConnectedSingleElectronsCount", "add", "newInstance", "getBuilder", "setFormalCharge", "add", "newInstance", "getBuilder", "addAtomContainer", "newInstance", "getBuilder", "addAtom", "addAtomContainer", "initiate", "addReaction"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}