{"test_class": {"identifier": "MapScreenshotProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MapScreenshotProvider mapScreenshotProvider;", "modifier": "private", "type": "MapScreenshotProvider", "declarator": "mapScreenshotProvider", "var_name": "mapScreenshotProvider"}, {"original_string": "@Mock\n    private Context applicationContext;", "modifier": "@Mock\n    private", "type": "Context", "declarator": "applicationContext", "var_name": "applicationContext"}], "file": "bugshaker/src/test/java/com/github/stkent/bugshaker/flow/email/screenshot/maps/MapScreenshotProviderTest.java"}, "test_case": {"identifier": "testThat_noExceptionThrown_when_searchingViewHierarchyThatContainsMultipleViews", "parameters": "()", "modifiers": "@SuppressWarnings(\"MethodName\") @Test public", "return": "void", "body": "@SuppressWarnings(\"MethodName\")\n    @Test\n    public void testThat_noExceptionThrown_when_searchingViewHierarchyThatContainsMultipleViews() {\n        // Arrange\n        final ViewGroup mockRootView = mock(ViewGroup.class);\n        final int numberOfChildViews = 4;\n        assert numberOfChildViews > 1;\n\n        when(mockRootView.getChildCount()).thenReturn(numberOfChildViews);\n        when(mockRootView.getChildAt(anyInt())).thenReturn(mock(View.class));\n\n        // Act\n        mapScreenshotProvider.locateMapViewsInHierarchy(mockRootView);\n    }", "signature": "void testThat_noExceptionThrown_when_searchingViewHierarchyThatContainsMultipleViews()", "full_signature": "@SuppressWarnings(\"MethodName\") @Test public void testThat_noExceptionThrown_when_searchingViewHierarchyThatContainsMultipleViews()", "class_method_signature": "MapScreenshotProviderTest.testThat_noExceptionThrown_when_searchingViewHierarchyThatContainsMultipleViews()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getChildCount", "thenReturn", "when", "getChildAt", "anyInt", "mock", "locateMapViewsInHierarchy"]}, "focal_class": {"identifier": "MapScreenshotProvider", "superclass": "extends BaseScreenshotProvider", "interfaces": "", "fields": [{"original_string": "private static final Func2<Bitmap, List<LocatedBitmap>, Bitmap> BITMAP_COMBINING_FUNCTION\n            = new Func2<Bitmap, List<LocatedBitmap>, Bitmap>() {\n        @Override\n        public Bitmap call(\n                final Bitmap baseLocatedBitmap,\n                final List<LocatedBitmap> overlayLocatedBitmaps) {\n\n            final Canvas canvas = new Canvas(baseLocatedBitmap);\n\n            for (final LocatedBitmap locatedBitmap : overlayLocatedBitmaps) {\n                final int[] overlayLocation = locatedBitmap.getLocation();\n\n                canvas.drawBitmap(\n                        locatedBitmap.getBitmap(),\n                        overlayLocation[0],\n                        overlayLocation[1],\n                        MAP_PAINT);\n            }\n\n            return baseLocatedBitmap;\n        }\n    };", "modifier": "private static final", "type": "Func2<Bitmap, List<LocatedBitmap>, Bitmap>", "declarator": "BITMAP_COMBINING_FUNCTION\n            = new Func2<Bitmap, List<LocatedBitmap>, Bitmap>() {\n        @Override\n        public Bitmap call(\n                final Bitmap baseLocatedBitmap,\n                final List<LocatedBitmap> overlayLocatedBitmaps) {\n\n            final Canvas canvas = new Canvas(baseLocatedBitmap);\n\n            for (final LocatedBitmap locatedBitmap : overlayLocatedBitmaps) {\n                final int[] overlayLocation = locatedBitmap.getLocation();\n\n                canvas.drawBitmap(\n                        locatedBitmap.getBitmap(),\n                        overlayLocation[0],\n                        overlayLocation[1],\n                        MAP_PAINT);\n            }\n\n            return baseLocatedBitmap;\n        }\n    }", "var_name": "BITMAP_COMBINING_FUNCTION"}, {"original_string": "private static final Paint MAP_PAINT = new Paint();", "modifier": "private static final", "type": "Paint", "declarator": "MAP_PAINT = new Paint()", "var_name": "MAP_PAINT"}], "methods": [{"identifier": "MapScreenshotProvider", "parameters": "(\n            @NonNull final Context applicationContext,\n            @NonNull final Logger logger)", "modifiers": "public", "return": "", "signature": " MapScreenshotProvider(\n            @NonNull final Context applicationContext,\n            @NonNull final Logger logger)", "full_signature": "public  MapScreenshotProvider(\n            @NonNull final Context applicationContext,\n            @NonNull final Logger logger)", "class_method_signature": "MapScreenshotProvider.MapScreenshotProvider(\n            @NonNull final Context applicationContext,\n            @NonNull final Logger logger)", "testcase": false, "constructor": true}, {"identifier": "getScreenshotBitmap", "parameters": "(@NonNull final Activity activity)", "modifiers": "@NonNull @Override public", "return": "Observable<Bitmap>", "signature": "Observable<Bitmap> getScreenshotBitmap(@NonNull final Activity activity)", "full_signature": "@NonNull @Override public Observable<Bitmap> getScreenshotBitmap(@NonNull final Activity activity)", "class_method_signature": "MapScreenshotProvider.getScreenshotBitmap(@NonNull final Activity activity)", "testcase": false, "constructor": false}, {"identifier": "getMapViewBitmapsObservable", "parameters": "(@NonNull final List<MapView> mapViews)", "modifiers": "@NonNull private", "return": "Observable<List<LocatedBitmap>>", "signature": "Observable<List<LocatedBitmap>> getMapViewBitmapsObservable(@NonNull final List<MapView> mapViews)", "full_signature": "@NonNull private Observable<List<LocatedBitmap>> getMapViewBitmapsObservable(@NonNull final List<MapView> mapViews)", "class_method_signature": "MapScreenshotProvider.getMapViewBitmapsObservable(@NonNull final List<MapView> mapViews)", "testcase": false, "constructor": false}, {"identifier": "locateMapViewsInHierarchy", "parameters": "(@NonNull final View view)", "modifiers": "@NonNull @VisibleForTesting", "return": "List<MapView>", "signature": "List<MapView> locateMapViewsInHierarchy(@NonNull final View view)", "full_signature": "@NonNull @VisibleForTesting List<MapView> locateMapViewsInHierarchy(@NonNull final View view)", "class_method_signature": "MapScreenshotProvider.locateMapViewsInHierarchy(@NonNull final View view)", "testcase": false, "constructor": false}], "file": "bugshaker/src/main/java/com/github/stkent/bugshaker/flow/email/screenshot/maps/MapScreenshotProvider.java"}, "focal_method": {"identifier": "locateMapViewsInHierarchy", "parameters": "(@NonNull final View view)", "modifiers": "@NonNull @VisibleForTesting", "return": "List<MapView>", "body": "@NonNull\n    @VisibleForTesting\n        /* default */ List<MapView> locateMapViewsInHierarchy(@NonNull final View view) {\n        final List<MapView> result = new ArrayList<>();\n\n        final Queue<View> viewsToProcess = new LinkedList<>();\n        viewsToProcess.add(view);\n\n        while (!viewsToProcess.isEmpty()) {\n            final View viewToProcess = viewsToProcess.remove();\n\n            if (viewToProcess instanceof MapView && viewToProcess.getVisibility() == VISIBLE) {\n                result.add((MapView) viewToProcess);\n            } else if (viewToProcess instanceof ViewGroup) {\n                final ViewGroup viewGroup = (ViewGroup) viewToProcess;\n\n                for (int childIndex = 0; childIndex < viewGroup.getChildCount(); childIndex++) {\n                    viewsToProcess.add(viewGroup.getChildAt(childIndex));\n                }\n            }\n        }\n\n        return result;\n    }", "signature": "List<MapView> locateMapViewsInHierarchy(@NonNull final View view)", "full_signature": "@NonNull @VisibleForTesting List<MapView> locateMapViewsInHierarchy(@NonNull final View view)", "class_method_signature": "MapScreenshotProvider.locateMapViewsInHierarchy(@NonNull final View view)", "testcase": false, "constructor": false, "invocations": ["add", "isEmpty", "remove", "getVisibility", "add", "getChildCount", "add", "getChildAt"]}, "repository": {"repo_id": 49236241, "url": "https://github.com/stkent/bugshaker-android", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 121, "size": 7207, "license": "licensed"}}