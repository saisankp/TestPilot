{"test_class": {"identifier": "TestRolledUpMonitoredService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RolledUpMonitoredService rolledUpService;", "modifier": "private", "type": "RolledUpMonitoredService", "declarator": "rolledUpService", "var_name": "rolledUpService"}, {"original_string": "MonitoredService mockService1;", "modifier": "", "type": "MonitoredService", "declarator": "mockService1", "var_name": "mockService1"}, {"original_string": "MonitoredService mockService2;", "modifier": "", "type": "MonitoredService", "declarator": "mockService2", "var_name": "mockService2"}, {"original_string": "private static final String ROLLEDUP_SERVICE_NAME = \"Rolledup Service\";", "modifier": "private static final", "type": "String", "declarator": "ROLLEDUP_SERVICE_NAME = \"Rolledup Service\"", "var_name": "ROLLEDUP_SERVICE_NAME"}, {"original_string": "private static final String SERVICE_1_NAME=\"Service 1\";", "modifier": "private static final", "type": "String", "declarator": "SERVICE_1_NAME=\"Service 1\"", "var_name": "SERVICE_1_NAME"}, {"original_string": "private static final String SERVICE_2_NAME=\"Service 2\";", "modifier": "private static final", "type": "String", "declarator": "SERVICE_2_NAME=\"Service 2\"", "var_name": "SERVICE_2_NAME"}, {"original_string": "private static final String SERVICE_1_REASON = \"Service 1 Reason\";", "modifier": "private static final", "type": "String", "declarator": "SERVICE_1_REASON = \"Service 1 Reason\"", "var_name": "SERVICE_1_REASON"}, {"original_string": "private static final String SERVICE_2_REASON = \"Service 2 Reason\";", "modifier": "private static final", "type": "String", "declarator": "SERVICE_2_REASON = \"Service 2 Reason\"", "var_name": "SERVICE_2_REASON"}], "file": "jrugged-core/src/test/java/org/fishwife/jrugged/TestRolledUpMonitoredService.java"}, "test_case": {"identifier": "testCriticalDegraded", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCriticalDegraded() {\n        expect(mockService1.getServiceStatus()).andReturn(\n                new ServiceStatus(SERVICE_1_NAME, Status.DEGRADED, SERVICE_1_REASON));\n        expect(mockService2.getServiceStatus()).andReturn(new ServiceStatus(SERVICE_2_NAME, Status.UP));\n        replay(mockService1);\n        replay(mockService2);\n\n        ServiceStatus serviceStatus = rolledUpService.getServiceStatus();\n\n        assertEquals(ROLLEDUP_SERVICE_NAME, serviceStatus.getName());\n        assertEquals(serviceStatus.getStatus(), Status.DEGRADED);\n        assertTrue(serviceStatus.getReasons().contains(SERVICE_1_NAME + \":\" + SERVICE_1_REASON));\n    }", "signature": "void testCriticalDegraded()", "full_signature": "@Test public void testCriticalDegraded()", "class_method_signature": "TestRolledUpMonitoredService.testCriticalDegraded()", "testcase": true, "constructor": false, "invocations": ["andReturn", "expect", "getServiceStatus", "andReturn", "expect", "getServiceStatus", "replay", "replay", "getServiceStatus", "assertEquals", "getName", "assertEquals", "getStatus", "assertTrue", "contains", "getReasons"]}, "focal_class": {"identifier": "RolledUpMonitoredService", "superclass": "", "interfaces": "implements MonitoredService", "fields": [{"original_string": "private String name;", "modifier": "private", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private Collection<? extends MonitoredService> criticals;", "modifier": "private", "type": "Collection<? extends MonitoredService>", "declarator": "criticals", "var_name": "criticals"}, {"original_string": "private Collection<? extends MonitoredService> noncriticals;", "modifier": "private", "type": "Collection<? extends MonitoredService>", "declarator": "noncriticals", "var_name": "noncriticals"}], "methods": [{"identifier": "RolledUpMonitoredService", "parameters": "(String name,\n            Collection<? extends MonitoredService> criticals,\n            Collection<? extends MonitoredService> noncriticals)", "modifiers": "public", "return": "", "signature": " RolledUpMonitoredService(String name,\n            Collection<? extends MonitoredService> criticals,\n            Collection<? extends MonitoredService> noncriticals)", "full_signature": "public  RolledUpMonitoredService(String name,\n            Collection<? extends MonitoredService> criticals,\n            Collection<? extends MonitoredService> noncriticals)", "class_method_signature": "RolledUpMonitoredService.RolledUpMonitoredService(String name,\n            Collection<? extends MonitoredService> criticals,\n            Collection<? extends MonitoredService> noncriticals)", "testcase": false, "constructor": true}, {"identifier": "getServiceStatus", "parameters": "()", "modifiers": "public", "return": "ServiceStatus", "signature": "ServiceStatus getServiceStatus()", "full_signature": "public ServiceStatus getServiceStatus()", "class_method_signature": "RolledUpMonitoredService.getServiceStatus()", "testcase": false, "constructor": false}, {"identifier": "getAllStatuses", "parameters": "()", "modifiers": "public", "return": "List<ServiceStatus>", "signature": "List<ServiceStatus> getAllStatuses()", "full_signature": "public List<ServiceStatus> getAllStatuses()", "class_method_signature": "RolledUpMonitoredService.getAllStatuses()", "testcase": false, "constructor": false}, {"identifier": "getCriticalStatuses", "parameters": "()", "modifiers": "public", "return": "List<ServiceStatus>", "signature": "List<ServiceStatus> getCriticalStatuses()", "full_signature": "public List<ServiceStatus> getCriticalStatuses()", "class_method_signature": "RolledUpMonitoredService.getCriticalStatuses()", "testcase": false, "constructor": false}, {"identifier": "getNonCriticalStatuses", "parameters": "()", "modifiers": "public", "return": "List<ServiceStatus>", "signature": "List<ServiceStatus> getNonCriticalStatuses()", "full_signature": "public List<ServiceStatus> getNonCriticalStatuses()", "class_method_signature": "RolledUpMonitoredService.getNonCriticalStatuses()", "testcase": false, "constructor": false}, {"identifier": "statusIsNotUp", "parameters": "(Status status)", "modifiers": "private", "return": "boolean", "signature": "boolean statusIsNotUp(Status status)", "full_signature": "private boolean statusIsNotUp(Status status)", "class_method_signature": "RolledUpMonitoredService.statusIsNotUp(Status status)", "testcase": false, "constructor": false}], "file": "jrugged-core/src/main/java/org/fishwife/jrugged/RolledUpMonitoredService.java"}, "focal_method": {"identifier": "getServiceStatus", "parameters": "()", "modifiers": "public", "return": "ServiceStatus", "body": "public ServiceStatus getServiceStatus() {\n        List<String> reasons = new ArrayList<String>();\n\n        Status criticalStatus = Status.UP;\n\n        for (MonitoredService m : criticals) {\n            ServiceStatus serviceStatus = m.getServiceStatus();\n            Status status = serviceStatus.getStatus();\n\n            if (statusIsNotUp(status)) {\n                for (String reason : serviceStatus.getReasons()) {\n                    reasons.add(serviceStatus.getName() + \":\" + reason);\n                }\n            }\n\n            if (status.getValue() < criticalStatus.getValue()) {\n                criticalStatus = status;\n            }\n        }\n\n        Status result = Status.UP;\n\n        for (MonitoredService m : noncriticals) {\n            ServiceStatus serviceStatus = m.getServiceStatus();\n            Status status = serviceStatus.getStatus();\n\n            if (statusIsNotUp(status)) {\n                for (String reason : serviceStatus.getReasons()) {\n                    reasons.add(serviceStatus.getName() + \":\" + reason);\n                }\n                result = Status.DEGRADED;\n            }\n        }\n\n        if (criticalStatus.getValue() < result.getValue()) {\n            result = criticalStatus;\n        }\n\n        return new ServiceStatus(name, result, reasons);\n    }", "signature": "ServiceStatus getServiceStatus()", "full_signature": "public ServiceStatus getServiceStatus()", "class_method_signature": "RolledUpMonitoredService.getServiceStatus()", "testcase": false, "constructor": false, "invocations": ["getServiceStatus", "getStatus", "statusIsNotUp", "getReasons", "add", "getName", "getValue", "getValue", "getServiceStatus", "getStatus", "statusIsNotUp", "getReasons", "add", "getName", "getValue", "getValue"]}, "repository": {"repo_id": 6602723, "url": "https://github.com/Comcast/jrugged", "language": "Java", "is_fork": false, "fork_count": 90, "stargazer_count": 236, "size": 1302, "license": "licensed"}}