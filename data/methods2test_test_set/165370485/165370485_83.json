{"test_class": {"identifier": "HtmlFormBuilderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String LABEL = \"Some label\";", "modifier": "private static final", "type": "String", "declarator": "LABEL = \"Some label\"", "var_name": "LABEL"}, {"original_string": "private static final String VALUE1 = \"Value 1\";", "modifier": "private static final", "type": "String", "declarator": "VALUE1 = \"Value 1\"", "var_name": "VALUE1"}, {"original_string": "private static final String VALUE2 = \"Value 2\";", "modifier": "private static final", "type": "String", "declarator": "VALUE2 = \"Value 2\"", "var_name": "VALUE2"}, {"original_string": "private static final String VALUE3 = \"Value 3\";", "modifier": "private static final", "type": "String", "declarator": "VALUE3 = \"Value 3\"", "var_name": "VALUE3"}, {"original_string": "private DataForm form = new DataForm(DataForm.Type.form);", "modifier": "private", "type": "DataForm", "declarator": "form = new DataForm(DataForm.Type.form)", "var_name": "form"}, {"original_string": "private HtmlFormBuilder builder = new HtmlFormBuilder();", "modifier": "private", "type": "HtmlFormBuilder", "declarator": "builder = new HtmlFormBuilder()", "var_name": "builder"}], "file": "server/admin-console/src/test/java/org/apache/vysper/console/HtmlFormBuilderTest.java"}, "test_case": {"identifier": "testTextSingleField", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTextSingleField() {\n        FormField field = new FormField(\"abc def\");\n        field.setType(FormField.Type.text_single);\n        field.addValue(VALUE1);\n        form.addField(field);\n        \n        String actual = builder.build(form);\n        String expected = \"<p><input id='abc-def' name='abc def' value='Value 1' /></p>\";\n        \n        Assert.assertEquals(expected, actual);\n    }", "signature": "void testTextSingleField()", "full_signature": "@Test public void testTextSingleField()", "class_method_signature": "HtmlFormBuilderTest.testTextSingleField()", "testcase": true, "constructor": false, "invocations": ["setType", "addValue", "addField", "build", "assertEquals"]}, "focal_class": {"identifier": "HtmlFormBuilder", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "build", "parameters": "(DataForm form)", "modifiers": "public", "return": "String", "signature": "String build(DataForm form)", "full_signature": "public String build(DataForm form)", "class_method_signature": "HtmlFormBuilder.build(DataForm form)", "testcase": false, "constructor": false}, {"identifier": "labelToHtml", "parameters": "(FormField field)", "modifiers": "private", "return": "String", "signature": "String labelToHtml(FormField field)", "full_signature": "private String labelToHtml(FormField field)", "class_method_signature": "HtmlFormBuilder.labelToHtml(FormField field)", "testcase": false, "constructor": false}, {"identifier": "descToHtml", "parameters": "(FormField field)", "modifiers": "private", "return": "String", "signature": "String descToHtml(FormField field)", "full_signature": "private String descToHtml(FormField field)", "class_method_signature": "HtmlFormBuilder.descToHtml(FormField field)", "testcase": false, "constructor": false}, {"identifier": "fixedFieldToHtml", "parameters": "(FormField field)", "modifiers": "private", "return": "String", "signature": "String fixedFieldToHtml(FormField field)", "full_signature": "private String fixedFieldToHtml(FormField field)", "class_method_signature": "HtmlFormBuilder.fixedFieldToHtml(FormField field)", "testcase": false, "constructor": false}, {"identifier": "hiddenFieldToHtml", "parameters": "(FormField field)", "modifiers": "private", "return": "String", "signature": "String hiddenFieldToHtml(FormField field)", "full_signature": "private String hiddenFieldToHtml(FormField field)", "class_method_signature": "HtmlFormBuilder.hiddenFieldToHtml(FormField field)", "testcase": false, "constructor": false}, {"identifier": "jidSingleFieldToHtml", "parameters": "(FormField field)", "modifiers": "private", "return": "String", "signature": "String jidSingleFieldToHtml(FormField field)", "full_signature": "private String jidSingleFieldToHtml(FormField field)", "class_method_signature": "HtmlFormBuilder.jidSingleFieldToHtml(FormField field)", "testcase": false, "constructor": false}, {"identifier": "textSingleFieldToHtml", "parameters": "(FormField field)", "modifiers": "private", "return": "String", "signature": "String textSingleFieldToHtml(FormField field)", "full_signature": "private String textSingleFieldToHtml(FormField field)", "class_method_signature": "HtmlFormBuilder.textSingleFieldToHtml(FormField field)", "testcase": false, "constructor": false}, {"identifier": "textPrivateFieldToHtml", "parameters": "(FormField field)", "modifiers": "private", "return": "String", "signature": "String textPrivateFieldToHtml(FormField field)", "full_signature": "private String textPrivateFieldToHtml(FormField field)", "class_method_signature": "HtmlFormBuilder.textPrivateFieldToHtml(FormField field)", "testcase": false, "constructor": false}, {"identifier": "textMultiFieldToHtml", "parameters": "(FormField field)", "modifiers": "private", "return": "String", "signature": "String textMultiFieldToHtml(FormField field)", "full_signature": "private String textMultiFieldToHtml(FormField field)", "class_method_signature": "HtmlFormBuilder.textMultiFieldToHtml(FormField field)", "testcase": false, "constructor": false}, {"identifier": "listSingleFieldToHtml", "parameters": "(FormField field)", "modifiers": "private", "return": "String", "signature": "String listSingleFieldToHtml(FormField field)", "full_signature": "private String listSingleFieldToHtml(FormField field)", "class_method_signature": "HtmlFormBuilder.listSingleFieldToHtml(FormField field)", "testcase": false, "constructor": false}, {"identifier": "listMultiFieldToHtml", "parameters": "(FormField field)", "modifiers": "private", "return": "String", "signature": "String listMultiFieldToHtml(FormField field)", "full_signature": "private String listMultiFieldToHtml(FormField field)", "class_method_signature": "HtmlFormBuilder.listMultiFieldToHtml(FormField field)", "testcase": false, "constructor": false}, {"identifier": "listFieldToHtml", "parameters": "(FormField field, List<CharSequence> values, boolean multiple)", "modifiers": "private", "return": "String", "signature": "String listFieldToHtml(FormField field, List<CharSequence> values, boolean multiple)", "full_signature": "private String listFieldToHtml(FormField field, List<CharSequence> values, boolean multiple)", "class_method_signature": "HtmlFormBuilder.listFieldToHtml(FormField field, List<CharSequence> values, boolean multiple)", "testcase": false, "constructor": false}, {"identifier": "booleanFieldToHtml", "parameters": "(FormField field)", "modifiers": "private", "return": "String", "signature": "String booleanFieldToHtml(FormField field)", "full_signature": "private String booleanFieldToHtml(FormField field)", "class_method_signature": "HtmlFormBuilder.booleanFieldToHtml(FormField field)", "testcase": false, "constructor": false}, {"identifier": "singleValueFieldToHtml", "parameters": "(FormField field, String type, String placeholder)", "modifiers": "private", "return": "String", "signature": "String singleValueFieldToHtml(FormField field, String type, String placeholder)", "full_signature": "private String singleValueFieldToHtml(FormField field, String type, String placeholder)", "class_method_signature": "HtmlFormBuilder.singleValueFieldToHtml(FormField field, String type, String placeholder)", "testcase": false, "constructor": false}, {"identifier": "required", "parameters": "(FormField field)", "modifiers": "private", "return": "String", "signature": "String required(FormField field)", "full_signature": "private String required(FormField field)", "class_method_signature": "HtmlFormBuilder.required(FormField field)", "testcase": false, "constructor": false}, {"identifier": "getSingleValue", "parameters": "(FormField field)", "modifiers": "private", "return": "CharSequence", "signature": "CharSequence getSingleValue(FormField field)", "full_signature": "private CharSequence getSingleValue(FormField field)", "class_method_signature": "HtmlFormBuilder.getSingleValue(FormField field)", "testcase": false, "constructor": false}, {"identifier": "varToId", "parameters": "(String var)", "modifiers": "private", "return": "String", "signature": "String varToId(String var)", "full_signature": "private String varToId(String var)", "class_method_signature": "HtmlFormBuilder.varToId(String var)", "testcase": false, "constructor": false}], "file": "server/admin-console/src/main/java/org/apache/vysper/console/HtmlFormBuilder.java"}, "focal_method": {"identifier": "build", "parameters": "(DataForm form)", "modifiers": "public", "return": "String", "body": "public String build(DataForm form) {\n        if (form == null)\n            return \"\";\n\n        StringBuilder sb = new StringBuilder();\n        List<String> instructions = form.getInstructions();\n        for (String instruction: instructions) {\n            sb.append(\"<p class='instruction'>\" + instruction + \"</p>\");\n        }\n\n        Iterator<FormField> fields = form.getFields().iterator();\n        while (fields.hasNext()) {\n            FormField field = fields.next();\n            FormField.Type type = field.getType();\n            sb.append(\"<p>\");\n            if (type == FormField.Type.hidden) {\n                sb.append(hiddenFieldToHtml(field));\n            } else if (type == FormField.Type.fixed) {\n                sb.append(fixedFieldToHtml(field));\n            } else if (type == FormField.Type.jid_single) {\n                sb.append(jidSingleFieldToHtml(field));\n            } else if (type == FormField.Type.text_single || type == null) {\n                sb.append(textSingleFieldToHtml(field));\n            } else if (type == FormField.Type.text_private) {\n                sb.append(textPrivateFieldToHtml(field));\n            } else if (type == FormField.Type.text_multi) {\n                sb.append(textMultiFieldToHtml(field));\n            } else if (type == FormField.Type.list_single) {\n                sb.append(listSingleFieldToHtml(field));\n            } else if (type == FormField.Type.list_multi) {\n                sb.append(listMultiFieldToHtml(field));\n            } else if (type == FormField.Type.jid_multi) {\n                // for now, do jid-multi as a textarea\n                sb.append(textMultiFieldToHtml(field));\n            } else if (type == FormField.Type.bool) {\n                sb.append(booleanFieldToHtml(field));\n            } else {\n                throw new RuntimeException(\"Unknown field type: \" + type);\n            }\n            sb.append(descToHtml(field));\n            sb.append(\"</p>\");\n        }\n\n        return sb.toString();\n    }", "signature": "String build(DataForm form)", "full_signature": "public String build(DataForm form)", "class_method_signature": "HtmlFormBuilder.build(DataForm form)", "testcase": false, "constructor": false, "invocations": ["getInstructions", "append", "iterator", "getFields", "hasNext", "next", "getType", "append", "append", "hiddenFieldToHtml", "append", "fixedFieldToHtml", "append", "jidSingleFieldToHtml", "append", "textSingleFieldToHtml", "append", "textPrivateFieldToHtml", "append", "textMultiFieldToHtml", "append", "listSingleFieldToHtml", "append", "listMultiFieldToHtml", "append", "textMultiFieldToHtml", "append", "booleanFieldToHtml", "append", "descToHtml", "append", "toString"]}, "repository": {"repo_id": 165370485, "url": "https://github.com/apache/mina-vysper", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 29305, "license": "licensed"}}