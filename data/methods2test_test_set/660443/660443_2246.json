{"test_class": {"identifier": "BioPolymerTest", "superclass": "extends AbstractBioPolymerTest", "interfaces": "", "fields": [], "file": "base/silent/src/test/java/org/openscience/cdk/silent/BioPolymerTest.java"}, "test_case": {"identifier": "testBioPolymer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBioPolymer() {\n        IBioPolymer oBioPolymer = new BioPolymer();\n        Assert.assertNotNull(oBioPolymer);\n        Assert.assertEquals(oBioPolymer.getMonomerCount(), 0);\n\n        IStrand oStrand1 = oBioPolymer.getBuilder().newInstance(IStrand.class);\n        oStrand1.setStrandName(\"A\");\n        IStrand oStrand2 = oBioPolymer.getBuilder().newInstance(IStrand.class);\n        oStrand2.setStrandName(\"B\");\n        IMonomer oMono1 = oBioPolymer.getBuilder().newInstance(IMonomer.class);\n        oMono1.setMonomerName(new String(\"TRP279\"));\n        IMonomer oMono2 = oBioPolymer.getBuilder().newInstance(IMonomer.class);\n        oMono2.setMonomerName(new String(\"HOH\"));\n        IMonomer oMono3 = oBioPolymer.getBuilder().newInstance(IMonomer.class);\n        oMono3.setMonomerName(new String(\"GLYA16\"));\n        IAtom oAtom1 = oBioPolymer.getBuilder().newInstance(IAtom.class, \"C\");\n        IAtom oAtom2 = oBioPolymer.getBuilder().newInstance(IAtom.class, \"C\");\n        IAtom oAtom3 = oBioPolymer.getBuilder().newInstance(IAtom.class, \"C\");\n        IAtom oAtom4 = oBioPolymer.getBuilder().newInstance(IAtom.class, \"C\");\n        IAtom oAtom5 = oBioPolymer.getBuilder().newInstance(IAtom.class, \"C\");\n\n        oBioPolymer.addAtom(oAtom1);\n        oBioPolymer.addAtom(oAtom2, oStrand1);\n        oBioPolymer.addAtom(oAtom3, oMono1, oStrand1);\n        oBioPolymer.addAtom(oAtom4, oMono2, oStrand2);\n        oBioPolymer.addAtom(oAtom5, oMono3, oStrand2);\n        Assert.assertNotNull(oBioPolymer.getAtom(0));\n        Assert.assertNotNull(oBioPolymer.getAtom(1));\n        Assert.assertNotNull(oBioPolymer.getAtom(2));\n        Assert.assertNotNull(oBioPolymer.getAtom(3));\n        Assert.assertNotNull(oBioPolymer.getAtom(4));\n        Assert.assertEquals(oAtom1, oBioPolymer.getAtom(0));\n        Assert.assertEquals(oAtom2, oBioPolymer.getAtom(1));\n        Assert.assertEquals(oAtom3, oBioPolymer.getAtom(2));\n        Assert.assertEquals(oAtom4, oBioPolymer.getAtom(3));\n        Assert.assertEquals(oAtom5, oBioPolymer.getAtom(4));\n\n        Assert.assertNull(oBioPolymer.getMonomer(\"0815\", \"A\"));\n        Assert.assertNull(oBioPolymer.getMonomer(\"0815\", \"B\"));\n        Assert.assertNull(oBioPolymer.getMonomer(\"0815\", \"\"));\n        Assert.assertNull(oBioPolymer.getStrand(\"\"));\n        Assert.assertNotNull(oBioPolymer.getMonomer(\"TRP279\", \"A\"));\n        Assert.assertEquals(oMono1, oBioPolymer.getMonomer(\"TRP279\", \"A\"));\n        Assert.assertEquals(oBioPolymer.getMonomer(\"TRP279\", \"A\").getAtomCount(), 1);\n        Assert.assertNotNull(oBioPolymer.getMonomer(\"HOH\", \"B\"));\n        Assert.assertEquals(oMono2, oBioPolymer.getMonomer(\"HOH\", \"B\"));\n        Assert.assertEquals(oBioPolymer.getMonomer(\"HOH\", \"B\").getAtomCount(), 1);\n        Assert.assertEquals(oBioPolymer.getStrand(\"B\").getAtomCount(), 2);\n        Assert.assertEquals(oBioPolymer.getStrand(\"B\").getMonomerCount(), 2);\n        Assert.assertNull(oBioPolymer.getStrand(\"C\"));\n        Assert.assertNotNull(oBioPolymer.getStrand(\"B\"));\n    }", "signature": "void testBioPolymer()", "full_signature": "@Test public void testBioPolymer()", "class_method_signature": "BioPolymerTest.testBioPolymer()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "assertEquals", "getMonomerCount", "newInstance", "getBuilder", "setStrandName", "newInstance", "getBuilder", "setStrandName", "newInstance", "getBuilder", "setMonomerName", "newInstance", "getBuilder", "setMonomerName", "newInstance", "getBuilder", "setMonomerName", "newInstance", "getBuilder", "newInstance", "getBuilder", "newInstance", "getBuilder", "newInstance", "getBuilder", "newInstance", "getBuilder", "addAtom", "addAtom", "addAtom", "addAtom", "addAtom", "assertNotNull", "getAtom", "assertNotNull", "getAtom", "assertNotNull", "getAtom", "assertNotNull", "getAtom", "assertNotNull", "getAtom", "assertEquals", "getAtom", "assertEquals", "getAtom", "assertEquals", "getAtom", "assertEquals", "getAtom", "assertEquals", "getAtom", "assertNull", "getMonomer", "assertNull", "getMonomer", "assertNull", "getMonomer", "assertNull", "getStrand", "assertNotNull", "getMonomer", "assertEquals", "getMonomer", "assertEquals", "getAtomCount", "getMonomer", "assertNotNull", "getMonomer", "assertEquals", "getMonomer", "assertEquals", "getAtomCount", "getMonomer", "assertEquals", "getAtomCount", "getStrand", "assertEquals", "getMonomerCount", "getStrand", "assertNull", "getStrand", "assertNotNull", "getStrand"]}, "focal_class": {"identifier": "BioPolymer", "superclass": "extends Polymer", "interfaces": "implements java.io.Serializable, IBioPolymer", "fields": [{"original_string": "private static final long    serialVersionUID = -5001873073769634393L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -5001873073769634393L", "var_name": "serialVersionUID"}, {"original_string": "private Map<String, IStrand> strands;", "modifier": "private", "type": "Map<String, IStrand>", "declarator": "strands", "var_name": "strands"}], "methods": [{"identifier": "BioPolymer", "parameters": "()", "modifiers": "public", "return": "", "signature": " BioPolymer()", "full_signature": "public  BioPolymer()", "class_method_signature": "BioPolymer.BioPolymer()", "testcase": false, "constructor": true}, {"identifier": "addAtom", "parameters": "(IAtom oAtom, IStrand oStrand)", "modifiers": "@Override public", "return": "void", "signature": "void addAtom(IAtom oAtom, IStrand oStrand)", "full_signature": "@Override public void addAtom(IAtom oAtom, IStrand oStrand)", "class_method_signature": "BioPolymer.addAtom(IAtom oAtom, IStrand oStrand)", "testcase": false, "constructor": false}, {"identifier": "addAtom", "parameters": "(IAtom oAtom, IMonomer oMonomer, IStrand oStrand)", "modifiers": "@Override public", "return": "void", "signature": "void addAtom(IAtom oAtom, IMonomer oMonomer, IStrand oStrand)", "full_signature": "@Override public void addAtom(IAtom oAtom, IMonomer oMonomer, IStrand oStrand)", "class_method_signature": "BioPolymer.addAtom(IAtom oAtom, IMonomer oMonomer, IStrand oStrand)", "testcase": false, "constructor": false}, {"identifier": "getMonomerCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMonomerCount()", "full_signature": "@Override public int getMonomerCount()", "class_method_signature": "BioPolymer.getMonomerCount()", "testcase": false, "constructor": false}, {"identifier": "getMonomer", "parameters": "(String monName, String strandName)", "modifiers": "@Override public", "return": "IMonomer", "signature": "IMonomer getMonomer(String monName, String strandName)", "full_signature": "@Override public IMonomer getMonomer(String monName, String strandName)", "class_method_signature": "BioPolymer.getMonomer(String monName, String strandName)", "testcase": false, "constructor": false}, {"identifier": "getMonomerNames", "parameters": "()", "modifiers": "@Override public", "return": "Collection<String>", "signature": "Collection<String> getMonomerNames()", "full_signature": "@Override public Collection<String> getMonomerNames()", "class_method_signature": "BioPolymer.getMonomerNames()", "testcase": false, "constructor": false}, {"identifier": "getStrandCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getStrandCount()", "full_signature": "@Override public int getStrandCount()", "class_method_signature": "BioPolymer.getStrandCount()", "testcase": false, "constructor": false}, {"identifier": "getStrand", "parameters": "(String cName)", "modifiers": "@Override public", "return": "IStrand", "signature": "IStrand getStrand(String cName)", "full_signature": "@Override public IStrand getStrand(String cName)", "class_method_signature": "BioPolymer.getStrand(String cName)", "testcase": false, "constructor": false}, {"identifier": "getStrandNames", "parameters": "()", "modifiers": "@Override public", "return": "Collection<String>", "signature": "Collection<String> getStrandNames()", "full_signature": "@Override public Collection<String> getStrandNames()", "class_method_signature": "BioPolymer.getStrandNames()", "testcase": false, "constructor": false}, {"identifier": "removeStrand", "parameters": "(String name)", "modifiers": "@Override public", "return": "void", "signature": "void removeStrand(String name)", "full_signature": "@Override public void removeStrand(String name)", "class_method_signature": "BioPolymer.removeStrand(String name)", "testcase": false, "constructor": false}, {"identifier": "getStrands", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, IStrand>", "signature": "Map<String, IStrand> getStrands()", "full_signature": "@Override public Map<String, IStrand> getStrands()", "class_method_signature": "BioPolymer.getStrands()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "BioPolymer.toString()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "IBioPolymer", "signature": "IBioPolymer clone()", "full_signature": "@Override public IBioPolymer clone()", "class_method_signature": "BioPolymer.clone()", "testcase": false, "constructor": false}], "file": "base/silent/src/main/java/org/openscience/cdk/silent/BioPolymer.java"}, "focal_method": {"identifier": "BioPolymer", "parameters": "()", "modifiers": "public", "return": "", "body": "public BioPolymer() {\n        super();\n        // Strand stuff\n        strands = new Hashtable<String, IStrand>();\n    }", "signature": " BioPolymer()", "full_signature": "public  BioPolymer()", "class_method_signature": "BioPolymer.BioPolymer()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}