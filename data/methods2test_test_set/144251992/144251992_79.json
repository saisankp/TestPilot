{"test_class": {"identifier": "LdapAdapterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String ID_ATTR = \"sAMAccountName\";", "modifier": "private final", "type": "String", "declarator": "ID_ATTR = \"sAMAccountName\"", "var_name": "ID_ATTR"}, {"original_string": "@Mock\n    private LdapTemplate ldapTemplateMock;", "modifier": "@Mock\n    private", "type": "LdapTemplate", "declarator": "ldapTemplateMock", "var_name": "ldapTemplateMock"}, {"original_string": "@Mock\n    private LdapConfigurationProperties ldapPropertiesMock;", "modifier": "@Mock\n    private", "type": "LdapConfigurationProperties", "declarator": "ldapPropertiesMock", "var_name": "ldapPropertiesMock"}, {"original_string": "private Clock clock;", "modifier": "private", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "private LdapAdapter ldapAdapter;", "modifier": "private", "type": "LdapAdapter", "declarator": "ldapAdapter", "var_name": "ldapAdapter"}], "file": "backend/project-board/src/test/java/de/adesso/projectboard/ad/service/LdapAdapterTest.java"}, "test_case": {"identifier": "getThumbnailPhotos", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getThumbnailPhotos() {\n        // given\n\n\n        // when\n\n        // then\n    }", "signature": "void getThumbnailPhotos()", "full_signature": "@Test public void getThumbnailPhotos()", "class_method_signature": "LdapAdapterTest.getThumbnailPhotos()", "testcase": true, "constructor": false, "invocations": []}, "focal_class": {"identifier": "LdapAdapter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String[] USER_NODE_ATTRIBUTES = new String[] {\"name\", \"givenName\", \"mail\", \"manager\", \"sn\", \"department\", \"division\", \"directReports\", \"distinguishedName\"};", "modifier": "private static final", "type": "String[]", "declarator": "USER_NODE_ATTRIBUTES = new String[] {\"name\", \"givenName\", \"mail\", \"manager\", \"sn\", \"department\", \"division\", \"directReports\", \"distinguishedName\"}", "var_name": "USER_NODE_ATTRIBUTES"}, {"original_string": "private static final long EPOCH_OFFSET = 116_444_736_000_000_000L;", "modifier": "private static final", "type": "long", "declarator": "EPOCH_OFFSET = 116_444_736_000_000_000L", "var_name": "EPOCH_OFFSET"}, {"original_string": "private final LdapTemplate ldapTemplate;", "modifier": "private final", "type": "LdapTemplate", "declarator": "ldapTemplate", "var_name": "ldapTemplate"}, {"original_string": "private final Clock clock;", "modifier": "private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "private final String base;", "modifier": "private final", "type": "String", "declarator": "base", "var_name": "base"}, {"original_string": "private final String idAttribute;", "modifier": "private final", "type": "String", "declarator": "idAttribute", "var_name": "idAttribute"}], "methods": [{"identifier": "LdapAdapter", "parameters": "(LdapTemplate ldapTemplate, LdapConfigurationProperties properties, Clock clock)", "modifiers": "@Autowired public", "return": "", "signature": " LdapAdapter(LdapTemplate ldapTemplate, LdapConfigurationProperties properties, Clock clock)", "full_signature": "@Autowired public  LdapAdapter(LdapTemplate ldapTemplate, LdapConfigurationProperties properties, Clock clock)", "class_method_signature": "LdapAdapter.LdapAdapter(LdapTemplate ldapTemplate, LdapConfigurationProperties properties, Clock clock)", "testcase": false, "constructor": true}, {"identifier": "getAllUserNodes", "parameters": "()", "modifiers": "public", "return": "Collection<LdapUserNode>", "signature": "Collection<LdapUserNode> getAllUserNodes()", "full_signature": "public Collection<LdapUserNode> getAllUserNodes()", "class_method_signature": "LdapAdapter.getAllUserNodes()", "testcase": false, "constructor": false}, {"identifier": "getThumbnailPhotos", "parameters": "(@NonNull Collection<String> userIds)", "modifiers": "public", "return": "Map<String, byte[]>", "signature": "Map<String, byte[]> getThumbnailPhotos(@NonNull Collection<String> userIds)", "full_signature": "public Map<String, byte[]> getThumbnailPhotos(@NonNull Collection<String> userIds)", "class_method_signature": "LdapAdapter.getThumbnailPhotos(@NonNull Collection<String> userIds)", "testcase": false, "constructor": false}, {"identifier": "buildIdCriteria", "parameters": "(@NotNull Collection<String> userIds)", "modifiers": "", "return": "ContainerCriteria", "signature": "ContainerCriteria buildIdCriteria(@NotNull Collection<String> userIds)", "full_signature": " ContainerCriteria buildIdCriteria(@NotNull Collection<String> userIds)", "class_method_signature": "LdapAdapter.buildIdCriteria(@NotNull Collection<String> userIds)", "testcase": false, "constructor": false}, {"identifier": "getActiveDirectoryTimestamp", "parameters": "(@NonNull LocalDateTime dateTime)", "modifiers": "", "return": "String", "signature": "String getActiveDirectoryTimestamp(@NonNull LocalDateTime dateTime)", "full_signature": " String getActiveDirectoryTimestamp(@NonNull LocalDateTime dateTime)", "class_method_signature": "LdapAdapter.getActiveDirectoryTimestamp(@NonNull LocalDateTime dateTime)", "testcase": false, "constructor": false}], "file": "backend/project-board/src/main/java/de/adesso/projectboard/ad/service/LdapAdapter.java"}, "focal_method": {"identifier": "getThumbnailPhotos", "parameters": "(@NonNull Collection<String> userIds)", "modifiers": "public", "return": "Map<String, byte[]>", "body": "public Map<String, byte[]> getThumbnailPhotos(@NonNull Collection<String> userIds) {\n        if(userIds.isEmpty()) {\n            return new HashMap<>();\n        }\n\n        var query = query()\n                .base(base)\n                .attributes(idAttribute, \"thumbnailPhoto\")\n                .countLimit(userIds.size())\n                .where(idAttribute).isPresent()\n                .and(\"thumbnailPhoto\").isPresent()\n                .and(buildIdCriteria(userIds));\n\n        var mapEntries = ldapTemplate.search(query, new ThumbnailPhotoMapper(idAttribute));\n\n        return mapEntries.stream()\n                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n    }", "signature": "Map<String, byte[]> getThumbnailPhotos(@NonNull Collection<String> userIds)", "full_signature": "public Map<String, byte[]> getThumbnailPhotos(@NonNull Collection<String> userIds)", "class_method_signature": "LdapAdapter.getThumbnailPhotos(@NonNull Collection<String> userIds)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "and", "isPresent", "and", "isPresent", "where", "countLimit", "attributes", "base", "query", "size", "buildIdCriteria", "search", "collect", "stream", "toMap"]}, "repository": {"repo_id": 144251992, "url": "https://github.com/adessoAG/project-board", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 2608, "license": "licensed"}}