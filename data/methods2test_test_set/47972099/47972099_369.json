{"test_class": {"identifier": "InstanceManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static ActorSystem system;", "modifier": "static", "type": "ActorSystem", "declarator": "system", "var_name": "system"}, {"original_string": "static UUID leaderSessionID = UUID.randomUUID();", "modifier": "static", "type": "UUID", "declarator": "leaderSessionID = UUID.randomUUID()", "var_name": "leaderSessionID"}], "file": "flink-runtime/src/test/java/org/apache/flink/runtime/instance/InstanceManagerTest.java"}, "test_case": {"identifier": "testReportHeartbeat", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testReportHeartbeat() {\n\t\ttry {\n\t\t\tInstanceManager cm = new InstanceManager();\n\t\t\t\n\t\t\tfinal int dataPort = 20000;\n\n\t\t\tHardwareDescription hardwareDescription = HardwareDescription.extractFromSystem(4096);\n\n\t\t\tInetAddress address = InetAddress.getByName(\"127.0.0.1\");\n\t\t\t\n\t\t\t// register three instances\n\t\t\tInstanceConnectionInfo ici1 = new InstanceConnectionInfo(address, dataPort);\n\t\t\tInstanceConnectionInfo ici2 = new InstanceConnectionInfo(address, dataPort + 1);\n\t\t\tInstanceConnectionInfo ici3 = new InstanceConnectionInfo(address, dataPort + 2);\n\n\t\t\tJavaTestKit probe1 = new JavaTestKit(system);\n\t\t\tJavaTestKit probe2 = new JavaTestKit(system);\n\t\t\tJavaTestKit probe3 = new JavaTestKit(system);\n\t\t\t\n\t\t\tInstanceID i1 = cm.registerTaskManager(probe1.getRef(), ici1, hardwareDescription, 1, leaderSessionID);\n\t\t\tInstanceID i2 = cm.registerTaskManager(probe2.getRef(), ici2, hardwareDescription, 1, leaderSessionID);\n\t\t\tInstanceID i3 = cm.registerTaskManager(probe3.getRef(), ici3, hardwareDescription, 1, leaderSessionID);\n\n\t\t\t// report some immediate heart beats\n\t\t\tassertTrue(cm.reportHeartBeat(i1, new byte[] {}));\n\t\t\tassertTrue(cm.reportHeartBeat(i2, new byte[] {}));\n\t\t\tassertTrue(cm.reportHeartBeat(i3, new byte[] {}));\n\t\t\t\n\t\t\t// report heart beat for non-existing instance\n\t\t\tassertFalse(cm.reportHeartBeat(new InstanceID(), new byte[] {}));\n\t\t\t\n\t\t\tfinal long WAIT = 200;\n\t\t\tCommonTestUtils.sleepUninterruptibly(WAIT);\n\n\t\t\tIterator<Instance> it = cm.getAllRegisteredInstances().iterator();\n\n\t\t\tInstance instance1 = it.next();\n\n\t\t\tlong h1 = instance1.getLastHeartBeat();\n\t\t\tlong h2 = it.next().getLastHeartBeat();\n\t\t\tlong h3 = it.next().getLastHeartBeat();\n\n\t\t\t// send one heart beat again and verify that the\n\t\t\tassertTrue(cm.reportHeartBeat(instance1.getId(), new byte[] {}));\n\t\t\tlong newH1 = instance1.getLastHeartBeat();\n\t\t\t\n\t\t\tlong now = System.currentTimeMillis();\n\t\t\t\n\t\t\tassertTrue(now - h1 >= WAIT);\n\t\t\tassertTrue(now - h2 >= WAIT);\n\t\t\tassertTrue(now - h3 >= WAIT);\n\t\t\tassertTrue(now - newH1 <= WAIT);\n\t\t\t\n\t\t\tcm.shutdown();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tSystem.err.println(e.getMessage());\n\t\t\te.printStackTrace();\n\t\t\tAssert.fail(\"Test erroneous: \" + e.getMessage());\n\t\t}\n\t}", "signature": "void testReportHeartbeat()", "full_signature": "@Test public void testReportHeartbeat()", "class_method_signature": "InstanceManagerTest.testReportHeartbeat()", "testcase": true, "constructor": false, "invocations": ["extractFromSystem", "getByName", "registerTaskManager", "getRef", "registerTaskManager", "getRef", "registerTaskManager", "getRef", "assertTrue", "reportHeartBeat", "assertTrue", "reportHeartBeat", "assertTrue", "reportHeartBeat", "assertFalse", "reportHeartBeat", "sleepUninterruptibly", "iterator", "getAllRegisteredInstances", "next", "getLastHeartBeat", "getLastHeartBeat", "next", "getLastHeartBeat", "next", "assertTrue", "reportHeartBeat", "getId", "getLastHeartBeat", "currentTimeMillis", "assertTrue", "assertTrue", "assertTrue", "assertTrue", "shutdown", "println", "getMessage", "printStackTrace", "fail", "getMessage"]}, "focal_class": {"identifier": "InstanceManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(InstanceManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(InstanceManager.class)", "var_name": "LOG"}, {"original_string": "private final Object lock = new Object();", "modifier": "private final", "type": "Object", "declarator": "lock = new Object()", "var_name": "lock"}, {"original_string": "private final Map<InstanceID, Instance> registeredHostsById;", "modifier": "private final", "type": "Map<InstanceID, Instance>", "declarator": "registeredHostsById", "var_name": "registeredHostsById"}, {"original_string": "private final Map<ActorRef, Instance> registeredHostsByConnection;", "modifier": "private final", "type": "Map<ActorRef, Instance>", "declarator": "registeredHostsByConnection", "var_name": "registeredHostsByConnection"}, {"original_string": "private final Set<ActorRef> deadHosts;", "modifier": "private final", "type": "Set<ActorRef>", "declarator": "deadHosts", "var_name": "deadHosts"}, {"original_string": "private final List<InstanceListener> instanceListeners = new ArrayList<InstanceListener>();", "modifier": "private final", "type": "List<InstanceListener>", "declarator": "instanceListeners = new ArrayList<InstanceListener>()", "var_name": "instanceListeners"}, {"original_string": "private int totalNumberOfAliveTaskSlots;", "modifier": "private", "type": "int", "declarator": "totalNumberOfAliveTaskSlots", "var_name": "totalNumberOfAliveTaskSlots"}, {"original_string": "private volatile boolean isShutdown;", "modifier": "private volatile", "type": "boolean", "declarator": "isShutdown", "var_name": "isShutdown"}], "methods": [{"identifier": "InstanceManager", "parameters": "()", "modifiers": "public", "return": "", "signature": " InstanceManager()", "full_signature": "public  InstanceManager()", "class_method_signature": "InstanceManager.InstanceManager()", "testcase": false, "constructor": true}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "InstanceManager.shutdown()", "testcase": false, "constructor": false}, {"identifier": "reportHeartBeat", "parameters": "(InstanceID instanceId, byte[] lastMetricsReport)", "modifiers": "public", "return": "boolean", "signature": "boolean reportHeartBeat(InstanceID instanceId, byte[] lastMetricsReport)", "full_signature": "public boolean reportHeartBeat(InstanceID instanceId, byte[] lastMetricsReport)", "class_method_signature": "InstanceManager.reportHeartBeat(InstanceID instanceId, byte[] lastMetricsReport)", "testcase": false, "constructor": false}, {"identifier": "registerTaskManager", "parameters": "(\n\t\t\tActorRef taskManager,\n\t\t\tInstanceConnectionInfo connectionInfo,\n\t\t\tHardwareDescription resources,\n\t\t\tint numberOfSlots,\n\t\t\tUUID leaderSessionID)", "modifiers": "public", "return": "InstanceID", "signature": "InstanceID registerTaskManager(\n\t\t\tActorRef taskManager,\n\t\t\tInstanceConnectionInfo connectionInfo,\n\t\t\tHardwareDescription resources,\n\t\t\tint numberOfSlots,\n\t\t\tUUID leaderSessionID)", "full_signature": "public InstanceID registerTaskManager(\n\t\t\tActorRef taskManager,\n\t\t\tInstanceConnectionInfo connectionInfo,\n\t\t\tHardwareDescription resources,\n\t\t\tint numberOfSlots,\n\t\t\tUUID leaderSessionID)", "class_method_signature": "InstanceManager.registerTaskManager(\n\t\t\tActorRef taskManager,\n\t\t\tInstanceConnectionInfo connectionInfo,\n\t\t\tHardwareDescription resources,\n\t\t\tint numberOfSlots,\n\t\t\tUUID leaderSessionID)", "testcase": false, "constructor": false}, {"identifier": "unregisterTaskManager", "parameters": "(ActorRef taskManager, boolean terminated)", "modifiers": "public", "return": "void", "signature": "void unregisterTaskManager(ActorRef taskManager, boolean terminated)", "full_signature": "public void unregisterTaskManager(ActorRef taskManager, boolean terminated)", "class_method_signature": "InstanceManager.unregisterTaskManager(ActorRef taskManager, boolean terminated)", "testcase": false, "constructor": false}, {"identifier": "unregisterAllTaskManagers", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void unregisterAllTaskManagers()", "full_signature": "public void unregisterAllTaskManagers()", "class_method_signature": "InstanceManager.unregisterAllTaskManagers()", "testcase": false, "constructor": false}, {"identifier": "isRegistered", "parameters": "(ActorRef taskManager)", "modifiers": "public", "return": "boolean", "signature": "boolean isRegistered(ActorRef taskManager)", "full_signature": "public boolean isRegistered(ActorRef taskManager)", "class_method_signature": "InstanceManager.isRegistered(ActorRef taskManager)", "testcase": false, "constructor": false}, {"identifier": "getNumberOfRegisteredTaskManagers", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNumberOfRegisteredTaskManagers()", "full_signature": "public int getNumberOfRegisteredTaskManagers()", "class_method_signature": "InstanceManager.getNumberOfRegisteredTaskManagers()", "testcase": false, "constructor": false}, {"identifier": "getTotalNumberOfSlots", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTotalNumberOfSlots()", "full_signature": "public int getTotalNumberOfSlots()", "class_method_signature": "InstanceManager.getTotalNumberOfSlots()", "testcase": false, "constructor": false}, {"identifier": "getNumberOfAvailableSlots", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNumberOfAvailableSlots()", "full_signature": "public int getNumberOfAvailableSlots()", "class_method_signature": "InstanceManager.getNumberOfAvailableSlots()", "testcase": false, "constructor": false}, {"identifier": "getAllRegisteredInstances", "parameters": "()", "modifiers": "public", "return": "Collection<Instance>", "signature": "Collection<Instance> getAllRegisteredInstances()", "full_signature": "public Collection<Instance> getAllRegisteredInstances()", "class_method_signature": "InstanceManager.getAllRegisteredInstances()", "testcase": false, "constructor": false}, {"identifier": "getRegisteredInstanceById", "parameters": "(InstanceID instanceID)", "modifiers": "public", "return": "Instance", "signature": "Instance getRegisteredInstanceById(InstanceID instanceID)", "full_signature": "public Instance getRegisteredInstanceById(InstanceID instanceID)", "class_method_signature": "InstanceManager.getRegisteredInstanceById(InstanceID instanceID)", "testcase": false, "constructor": false}, {"identifier": "getRegisteredInstance", "parameters": "(ActorRef ref)", "modifiers": "public", "return": "Instance", "signature": "Instance getRegisteredInstance(ActorRef ref)", "full_signature": "public Instance getRegisteredInstance(ActorRef ref)", "class_method_signature": "InstanceManager.getRegisteredInstance(ActorRef ref)", "testcase": false, "constructor": false}, {"identifier": "addInstanceListener", "parameters": "(InstanceListener listener)", "modifiers": "public", "return": "void", "signature": "void addInstanceListener(InstanceListener listener)", "full_signature": "public void addInstanceListener(InstanceListener listener)", "class_method_signature": "InstanceManager.addInstanceListener(InstanceListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeInstanceListener", "parameters": "(InstanceListener listener)", "modifiers": "public", "return": "void", "signature": "void removeInstanceListener(InstanceListener listener)", "full_signature": "public void removeInstanceListener(InstanceListener listener)", "class_method_signature": "InstanceManager.removeInstanceListener(InstanceListener listener)", "testcase": false, "constructor": false}, {"identifier": "notifyNewInstance", "parameters": "(Instance instance)", "modifiers": "private", "return": "void", "signature": "void notifyNewInstance(Instance instance)", "full_signature": "private void notifyNewInstance(Instance instance)", "class_method_signature": "InstanceManager.notifyNewInstance(Instance instance)", "testcase": false, "constructor": false}, {"identifier": "notifyDeadInstance", "parameters": "(Instance instance)", "modifiers": "private", "return": "void", "signature": "void notifyDeadInstance(Instance instance)", "full_signature": "private void notifyDeadInstance(Instance instance)", "class_method_signature": "InstanceManager.notifyDeadInstance(Instance instance)", "testcase": false, "constructor": false}], "file": "flink-runtime/src/main/java/org/apache/flink/runtime/instance/InstanceManager.java"}, "focal_method": {"identifier": "reportHeartBeat", "parameters": "(InstanceID instanceId, byte[] lastMetricsReport)", "modifiers": "public", "return": "boolean", "body": "public boolean reportHeartBeat(InstanceID instanceId, byte[] lastMetricsReport) {\n\t\tif (instanceId == null) {\n\t\t\tthrow new IllegalArgumentException(\"InstanceID may not be null.\");\n\t\t}\n\n\t\tsynchronized (this.lock) {\n\t\t\tif (this.isShutdown) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tInstance host = registeredHostsById.get(instanceId);\n\n\t\t\tif (host == null){\n\t\t\t\tif (LOG.isDebugEnabled()) {\n\t\t\t\t\tLOG.debug(\"Received heartbeat from unknown TaskManager with instance ID \" + instanceId.toString() +\n\t\t\t\t\t\t\t\" Possibly TaskManager was marked as dead (timed-out) earlier. \" +\n\t\t\t\t\t\t\t\"Reporting back that task manager is no longer known.\");\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\thost.reportHeartBeat();\n\t\t\thost.setMetricsReport(lastMetricsReport);\n\n\t\t\tif (LOG.isDebugEnabled()) {\n\t\t\t\tLOG.debug(\"Received heartbeat from TaskManager \" + host);\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\t}", "signature": "boolean reportHeartBeat(InstanceID instanceId, byte[] lastMetricsReport)", "full_signature": "public boolean reportHeartBeat(InstanceID instanceId, byte[] lastMetricsReport)", "class_method_signature": "InstanceManager.reportHeartBeat(InstanceID instanceId, byte[] lastMetricsReport)", "testcase": false, "constructor": false, "invocations": ["get", "isDebugEnabled", "debug", "toString", "reportHeartBeat", "setMetricsReport", "isDebugEnabled", "debug"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}