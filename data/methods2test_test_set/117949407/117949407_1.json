{"test_class": {"identifier": "ZuulFiltersModuleTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    AbstractConfiguration configuration;", "modifier": "@Mock", "type": "AbstractConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "ZuulFiltersModule module = new ZuulFiltersModule();", "modifier": "", "type": "ZuulFiltersModule", "declarator": "module = new ZuulFiltersModule()", "var_name": "module"}], "file": "zuul2-core/src/test/java/com/netflix/zuul/init/ZuulFiltersModuleTest.java"}, "test_case": {"identifier": "testEmptyFilterLocations", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEmptyFilterLocations() {\n        when(configuration.getStringArray(eq(\"zuul.filters.locations\"))).thenReturn(new String[0]);\n\n        String[] filterLocations = module.findFilterLocations(configuration);\n\n        assertThat(filterLocations.length, equalTo(0));\n    }", "signature": "void testEmptyFilterLocations()", "full_signature": "@Test public void testEmptyFilterLocations()", "class_method_signature": "ZuulFiltersModuleTest.testEmptyFilterLocations()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getStringArray", "eq", "findFilterLocations", "assertThat", "equalTo"]}, "focal_class": {"identifier": "ZuulFiltersModule", "superclass": "extends AbstractModule", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ZuulFiltersModule.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ZuulFiltersModule.class)", "var_name": "LOG"}, {"original_string": "private static Predicate<String> blank = String::isEmpty;", "modifier": "private static", "type": "Predicate<String>", "declarator": "blank = String::isEmpty", "var_name": "blank"}], "methods": [{"identifier": "configure", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void configure()", "full_signature": "@Override protected void configure()", "class_method_signature": "ZuulFiltersModule.configure()", "testcase": false, "constructor": false}, {"identifier": "provideFilterFileManagerConfig", "parameters": "()", "modifiers": "@Provides", "return": "FilterFileManagerConfig", "signature": "FilterFileManagerConfig provideFilterFileManagerConfig()", "full_signature": "@Provides FilterFileManagerConfig provideFilterFileManagerConfig()", "class_method_signature": "ZuulFiltersModule.provideFilterFileManagerConfig()", "testcase": false, "constructor": false}, {"identifier": "findClassNames", "parameters": "(AbstractConfiguration config)", "modifiers": "@VisibleForTesting", "return": "String[]", "signature": "String[] findClassNames(AbstractConfiguration config)", "full_signature": "@VisibleForTesting String[] findClassNames(AbstractConfiguration config)", "class_method_signature": "ZuulFiltersModule.findClassNames(AbstractConfiguration config)", "testcase": false, "constructor": false}, {"identifier": "findFilterLocations", "parameters": "(AbstractConfiguration config)", "modifiers": "@VisibleForTesting", "return": "String[]", "signature": "String[] findFilterLocations(AbstractConfiguration config)", "full_signature": "@VisibleForTesting String[] findFilterLocations(AbstractConfiguration config)", "class_method_signature": "ZuulFiltersModule.findFilterLocations(AbstractConfiguration config)", "testcase": false, "constructor": false}], "file": "zuul2-core/src/main/java/com/netflix/zuul/init/ZuulFiltersModule.java"}, "focal_method": {"identifier": "findFilterLocations", "parameters": "(AbstractConfiguration config)", "modifiers": "@VisibleForTesting", "return": "String[]", "body": "@VisibleForTesting\n    String[] findFilterLocations(AbstractConfiguration config) {\n        String[] locations = config.getStringArray(\"zuul.filters.locations\");\n        if (locations == null) {\n            locations = new String[]{\"inbound\",\"outbound\",\"endpoint\"};\n        }\n        String[] filterLocations = Arrays.stream(locations)\n                .map(String::trim)\n                .filter(blank.negate())\n                .toArray(String[]::new);\n\n        if (filterLocations.length != 0) {\n            LOG.info(\"Using filter locations: \");\n            for (String location : filterLocations) {\n                LOG.info(\"  \" + location);\n            }\n        }\n        return filterLocations;\n    }", "signature": "String[] findFilterLocations(AbstractConfiguration config)", "full_signature": "@VisibleForTesting String[] findFilterLocations(AbstractConfiguration config)", "class_method_signature": "ZuulFiltersModule.findFilterLocations(AbstractConfiguration config)", "testcase": false, "constructor": false, "invocations": ["getStringArray", "toArray", "filter", "map", "stream", "negate", "info", "info"]}, "repository": {"repo_id": 117949407, "url": "https://github.com/linking12/zuul2", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 10, "size": 302, "license": "licensed"}}