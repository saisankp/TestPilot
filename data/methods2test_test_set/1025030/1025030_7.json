{"test_class": {"identifier": "PdfBoxMigrationTest", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "private static final String wsdlLoc =\n                         \"/pserv-pa-pdfbox/PDFBoxMigrate?wsdl\";", "modifier": "private static final", "type": "String", "declarator": "wsdlLoc =\n                         \"/pserv-pa-pdfbox/PDFBoxMigrate?wsdl\"", "var_name": "wsdlLoc"}, {"original_string": "private Migrate dom = null;", "modifier": "private", "type": "Migrate", "declarator": "dom = null", "var_name": "dom"}, {"original_string": "private final File texttestpdf =\n        new File(\"PA/pdfbox/test/resources/text_test.pdf\");", "modifier": "private final", "type": "File", "declarator": "texttestpdf =\n        new File(\"PA/pdfbox/test/resources/text_test.pdf\")", "var_name": "texttestpdf"}, {"original_string": "private final File htmltestpdf =\n        new File(\"PA/pdfbox/test/resources/html_test.pdf\");", "modifier": "private final", "type": "File", "declarator": "htmltestpdf =\n        new File(\"PA/pdfbox/test/resources/html_test.pdf\")", "var_name": "htmltestpdf"}], "file": "services/pdfbox/src/test/java/eu/planets_project/services/migration/pdfbox/PdfBoxMigrationTest.java"}, "test_case": {"identifier": "testTextMigration", "parameters": "()", "modifiers": "@Test public final", "return": "void", "body": "@Test\n    public final void testTextMigration() {\n\n        try {\n            System.out.println(texttestpdf.getCanonicalPath());\n\n            /**\n             * Testing the web services by calling it with\n             * a digital object instance containing a PDF file version 1.4\n             * and expect the service to return a file containing UTF-8 text.\n             */\n            final DigitalObject doInput =\n                new DigitalObject.Builder(\n                    Content.byReference((texttestpdf).toURI().toURL()))\n                    .permanentUri(URI.create(\"http://example.com/test.pdf\"))\n                    .title(\"test.pdf\")\n                    .build();\n            System.out.println(\"Input \" + doInput);\n\n            URI inputformatpdf = null;\n            URI outputformatUnicode = null;\n\n            inputformatpdf = new URI(\"info:pronom/fmt/18\");\n            outputformatUnicode = new URI(\"info:pronom/x-fmt/16\");\n\n            final MigrateResult mr = dom.migrate(doInput, inputformatpdf,\n                outputformatUnicode, null);\n            final DigitalObject doOutput = mr.getDigitalObject();\n\n            assertNotNull(\"Resulting digital object is null.\", doOutput);\n\n            System.out.println(\"Output\" + doOutput);\n\n            final File resultText = DigitalObjectUtils.toFile(doOutput); // TODO need extension?\n\n            assertTrue(\"Result file was not created successfully!\",\n                        resultText.exists());\n\n            System.out.println(\"Please find the result text file here: \\n\"\n                    + resultText.getAbsolutePath());\n\n            assertFalse(\"Resulting digital object equal to the original.\",\n                    doInput.equals(doOutput));\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }", "signature": "void testTextMigration()", "full_signature": "@Test public final void testTextMigration()", "class_method_signature": "PdfBoxMigrationTest.testTextMigration()", "testcase": true, "constructor": false, "invocations": ["println", "getCanonicalPath", "build", "title", "permanentUri", "byReference", "toURL", "toURI", "create", "println", "migrate", "getDigitalObject", "assertNotNull", "println", "toFile", "assertTrue", "exists", "println", "getAbsolutePath", "assertFalse", "equals", "printStackTrace"]}, "focal_class": {"identifier": "PdfBoxMigration", "superclass": "", "interfaces": "implements Migrate, Serializable", "fields": [{"original_string": "private static Logger log = Logger.getLogger(PdfBoxMigration.class.getName());", "modifier": "private static", "type": "Logger", "declarator": "log = Logger.getLogger(PdfBoxMigration.class.getName())", "var_name": "log"}, {"original_string": "private static final long serialVersionUID = -1639737711901176613L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -1639737711901176613L", "var_name": "serialVersionUID"}, {"original_string": "public static final String NAME = \"PdfBoxMigration\";", "modifier": "public static final", "type": "String", "declarator": "NAME = \"PdfBoxMigration\"", "var_name": "NAME"}, {"original_string": "private static URI outputformatHtml = URI.create(\"info:pronom/fmt/99\");", "modifier": "private static", "type": "URI", "declarator": "outputformatHtml = URI.create(\"info:pronom/fmt/99\")", "var_name": "outputformatHtml"}, {"original_string": "private static URI outputformatUnicode = URI.create(\"info:pronom/x-fmt/16\");", "modifier": "private static", "type": "URI", "declarator": "outputformatUnicode = URI.create(\"info:pronom/x-fmt/16\")", "var_name": "outputformatUnicode"}], "methods": [{"identifier": "migrate", "parameters": "(final DigitalObject digitalObject,\n                                       final URI inputFormat, final URI outputFormat,\n                                       final List<Parameter> parameters)", "modifiers": "public final", "return": "MigrateResult", "signature": "MigrateResult migrate(final DigitalObject digitalObject,\n                                       final URI inputFormat, final URI outputFormat,\n                                       final List<Parameter> parameters)", "full_signature": "public final MigrateResult migrate(final DigitalObject digitalObject,\n                                       final URI inputFormat, final URI outputFormat,\n                                       final List<Parameter> parameters)", "class_method_signature": "PdfBoxMigration.migrate(final DigitalObject digitalObject,\n                                       final URI inputFormat, final URI outputFormat,\n                                       final List<Parameter> parameters)", "testcase": false, "constructor": false}, {"identifier": "textMigration", "parameters": "(\n            final DigitalObject digitalObject, final ServiceReport report)", "modifiers": "private", "return": "MigrateResult", "signature": "MigrateResult textMigration(\n            final DigitalObject digitalObject, final ServiceReport report)", "full_signature": "private MigrateResult textMigration(\n            final DigitalObject digitalObject, final ServiceReport report)", "class_method_signature": "PdfBoxMigration.textMigration(\n            final DigitalObject digitalObject, final ServiceReport report)", "testcase": false, "constructor": false}, {"identifier": "htmlMigration", "parameters": "(\n            final DigitalObject digitalObject, final ServiceReport report)", "modifiers": "private", "return": "MigrateResult", "signature": "MigrateResult htmlMigration(\n            final DigitalObject digitalObject, final ServiceReport report)", "full_signature": "private MigrateResult htmlMigration(\n            final DigitalObject digitalObject, final ServiceReport report)", "class_method_signature": "PdfBoxMigration.htmlMigration(\n            final DigitalObject digitalObject, final ServiceReport report)", "testcase": false, "constructor": false}, {"identifier": "checkMigrateArgs", "parameters": "(final DigitalObject digitalObject,\n                                  final URI inputFormat, final URI outputFormat,\n                                  final ServiceReport report)", "modifiers": "private", "return": "ServiceReport", "signature": "ServiceReport checkMigrateArgs(final DigitalObject digitalObject,\n                                  final URI inputFormat, final URI outputFormat,\n                                  final ServiceReport report)", "full_signature": "private ServiceReport checkMigrateArgs(final DigitalObject digitalObject,\n                                  final URI inputFormat, final URI outputFormat,\n                                  final ServiceReport report)", "class_method_signature": "PdfBoxMigration.checkMigrateArgs(final DigitalObject digitalObject,\n                                  final URI inputFormat, final URI outputFormat,\n                                  final ServiceReport report)", "testcase": false, "constructor": false}, {"identifier": "describe", "parameters": "()", "modifiers": "public final", "return": "ServiceDescription", "signature": "ServiceDescription describe()", "full_signature": "public final ServiceDescription describe()", "class_method_signature": "PdfBoxMigration.describe()", "testcase": false, "constructor": false}, {"identifier": "fail", "parameters": "(final ServiceReport report)", "modifiers": "private", "return": "MigrateResult", "signature": "MigrateResult fail(final ServiceReport report)", "full_signature": "private MigrateResult fail(final ServiceReport report)", "class_method_signature": "PdfBoxMigration.fail(final ServiceReport report)", "testcase": false, "constructor": false}], "file": "services/pdfbox/src/main/java/eu/planets_project/services/migration/pdfbox/PdfBoxMigration.java"}, "focal_method": {"identifier": "textMigration", "parameters": "(\n            final DigitalObject digitalObject, final ServiceReport report)", "modifiers": "private", "return": "MigrateResult", "body": "private MigrateResult textMigration(\n            final DigitalObject digitalObject, final ServiceReport report) {\n        try {\n            final TextExtractor te = new TextExtractor();\n            final String textBlob = te.getText(\n                    digitalObject.getContent().getInputStream());\n            final DigitalObject.Builder factory =\n                    new DigitalObject.Builder(\n                            Content.byValue(textBlob.getBytes()));\n            factory.title(digitalObject.getTitle() + \".txt\");\n            // Unicode File format (UTF-16)\n            factory.format(outputformatUnicode);\n            final DigitalObject textObject = factory.build();\n\n            return new MigrateResult(textObject, report);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n            return this.fail(new ServiceReport(Type.ERROR, Status.TOOL_ERROR, e\n                    .toString()));\n        }\n    }", "signature": "MigrateResult textMigration(\n            final DigitalObject digitalObject, final ServiceReport report)", "full_signature": "private MigrateResult textMigration(\n            final DigitalObject digitalObject, final ServiceReport report)", "class_method_signature": "PdfBoxMigration.textMigration(\n            final DigitalObject digitalObject, final ServiceReport report)", "testcase": false, "constructor": false, "invocations": ["getText", "getInputStream", "getContent", "byValue", "getBytes", "title", "getTitle", "format", "build", "printStackTrace", "fail", "toString"]}, "repository": {"repo_id": 1025030, "url": "https://github.com/opf-labs/planets-suite", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 9, "size": 198462, "license": "licensed"}}