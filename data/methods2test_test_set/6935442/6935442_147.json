{"test_class": {"identifier": "AnnotationsTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/metamodel/src/test/java/org/apache/isis/core/metamodel/facets/AnnotationsTest.java"}, "test_case": {"identifier": "when_null", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void when_null() throws Exception {\n        final List<String> fieldNameCandidates = Annotations.fieldNameCandidatesFor(null);\n        assertThat(fieldNameCandidates, is(not(nullValue())));\n        assertThat(fieldNameCandidates.size(), is(0));\n    }", "signature": "void when_null()", "full_signature": "@Test public void when_null()", "class_method_signature": "AnnotationsTest.when_null()", "testcase": true, "constructor": false, "invocations": ["fieldNameCandidatesFor", "assertThat", "is", "not", "nullValue", "assertThat", "size", "is"]}, "focal_class": {"identifier": "Annotations", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "Annotations", "parameters": "()", "modifiers": "private", "return": "", "signature": " Annotations()", "full_signature": "private  Annotations()", "class_method_signature": "Annotations.Annotations()", "testcase": false, "constructor": true}, {"identifier": "isString", "parameters": "(final Class<?> cls)", "modifiers": "public static", "return": "boolean", "signature": "boolean isString(final Class<?> cls)", "full_signature": "public static boolean isString(final Class<?> cls)", "class_method_signature": "Annotations.isString(final Class<?> cls)", "testcase": false, "constructor": false}, {"identifier": "getDeclaredAnnotation", "parameters": "(Class<?> cls, Class<T> annotationClass)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "signature": "T getDeclaredAnnotation(Class<?> cls, Class<T> annotationClass)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T getDeclaredAnnotation(Class<?> cls, Class<T> annotationClass)", "class_method_signature": "Annotations.getDeclaredAnnotation(Class<?> cls, Class<T> annotationClass)", "testcase": false, "constructor": false}, {"identifier": "getAnnotation", "parameters": "(final Class<?> cls, final Class<T> annotationClass)", "modifiers": "public static", "return": "T", "signature": "T getAnnotation(final Class<?> cls, final Class<T> annotationClass)", "full_signature": "public static T getAnnotation(final Class<?> cls, final Class<T> annotationClass)", "class_method_signature": "Annotations.getAnnotation(final Class<?> cls, final Class<T> annotationClass)", "testcase": false, "constructor": false}, {"identifier": "getAnnotations", "parameters": "(\n            final Class<?> cls,\n            final Class<T> annotationClass)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> getAnnotations(\n            final Class<?> cls,\n            final Class<T> annotationClass)", "full_signature": "public static List<T> getAnnotations(\n            final Class<?> cls,\n            final Class<T> annotationClass)", "class_method_signature": "Annotations.getAnnotations(\n            final Class<?> cls,\n            final Class<T> annotationClass)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(\n            final Annotation annotation,\n            final Class<T> annotationClass,\n            final List<AnnotationAndDepth<T>> annotationAndDepths)", "modifiers": "private static", "return": "void", "signature": "void append(\n            final Annotation annotation,\n            final Class<T> annotationClass,\n            final List<AnnotationAndDepth<T>> annotationAndDepths)", "full_signature": "private static void append(\n            final Annotation annotation,\n            final Class<T> annotationClass,\n            final List<AnnotationAndDepth<T>> annotationAndDepths)", "class_method_signature": "Annotations.append(\n            final Annotation annotation,\n            final Class<T> annotationClass,\n            final List<AnnotationAndDepth<T>> annotationAndDepths)", "testcase": false, "constructor": false}, {"identifier": "appendWithDepth", "parameters": "(\n            final Annotation annotation,\n            final Class<T> annotationClass,\n            final List<AnnotationAndDepth<T>> annotationAndDepths,\n            final int depth,\n            final List<Annotation> visited)", "modifiers": "private static", "return": "void", "signature": "void appendWithDepth(\n            final Annotation annotation,\n            final Class<T> annotationClass,\n            final List<AnnotationAndDepth<T>> annotationAndDepths,\n            final int depth,\n            final List<Annotation> visited)", "full_signature": "private static void appendWithDepth(\n            final Annotation annotation,\n            final Class<T> annotationClass,\n            final List<AnnotationAndDepth<T>> annotationAndDepths,\n            final int depth,\n            final List<Annotation> visited)", "class_method_signature": "Annotations.appendWithDepth(\n            final Annotation annotation,\n            final Class<T> annotationClass,\n            final List<AnnotationAndDepth<T>> annotationAndDepths,\n            final int depth,\n            final List<Annotation> visited)", "testcase": false, "constructor": false}, {"identifier": "getEvaluators", "parameters": "(\n            final Class<?> cls,\n            final Class<T> annotationClass)", "modifiers": "public static", "return": "List<Evaluator<T>>", "signature": "List<Evaluator<T>> getEvaluators(\n            final Class<?> cls,\n            final Class<T> annotationClass)", "full_signature": "public static List<Evaluator<T>> getEvaluators(\n            final Class<?> cls,\n            final Class<T> annotationClass)", "class_method_signature": "Annotations.getEvaluators(\n            final Class<?> cls,\n            final Class<T> annotationClass)", "testcase": false, "constructor": false}, {"identifier": "firstEvaluatorsInHierarchyHaving", "parameters": "(\n            final Class<?> cls,\n            final Class<T> annotationClass,\n            final Predicate<Evaluator<T>> filter)", "modifiers": "public static", "return": "List<Evaluator<T>>", "signature": "List<Evaluator<T>> firstEvaluatorsInHierarchyHaving(\n            final Class<?> cls,\n            final Class<T> annotationClass,\n            final Predicate<Evaluator<T>> filter)", "full_signature": "public static List<Evaluator<T>> firstEvaluatorsInHierarchyHaving(\n            final Class<?> cls,\n            final Class<T> annotationClass,\n            final Predicate<Evaluator<T>> filter)", "class_method_signature": "Annotations.firstEvaluatorsInHierarchyHaving(\n            final Class<?> cls,\n            final Class<T> annotationClass,\n            final Predicate<Evaluator<T>> filter)", "testcase": false, "constructor": false}, {"identifier": "visitEvaluators", "parameters": "(\n            final Class<?> cls,\n            final Class<T> annotationClass,\n            final Consumer<Evaluator<T>> visitor)", "modifiers": "private static", "return": "void", "signature": "void visitEvaluators(\n            final Class<?> cls,\n            final Class<T> annotationClass,\n            final Consumer<Evaluator<T>> visitor)", "full_signature": "private static void visitEvaluators(\n            final Class<?> cls,\n            final Class<T> annotationClass,\n            final Consumer<Evaluator<T>> visitor)", "class_method_signature": "Annotations.visitEvaluators(\n            final Class<?> cls,\n            final Class<T> annotationClass,\n            final Consumer<Evaluator<T>> visitor)", "testcase": false, "constructor": false}, {"identifier": "visitEvaluatorsWhile", "parameters": "(\n            final Class<?> cls,\n            final Class<T> annotationClass,\n            Predicate<Class<?>> filter,\n            final Consumer<Evaluator<T>> visitor)", "modifiers": "private static", "return": "void", "signature": "void visitEvaluatorsWhile(\n            final Class<?> cls,\n            final Class<T> annotationClass,\n            Predicate<Class<?>> filter,\n            final Consumer<Evaluator<T>> visitor)", "full_signature": "private static void visitEvaluatorsWhile(\n            final Class<?> cls,\n            final Class<T> annotationClass,\n            Predicate<Class<?>> filter,\n            final Consumer<Evaluator<T>> visitor)", "class_method_signature": "Annotations.visitEvaluatorsWhile(\n            final Class<?> cls,\n            final Class<T> annotationClass,\n            Predicate<Class<?>> filter,\n            final Consumer<Evaluator<T>> visitor)", "testcase": false, "constructor": false}, {"identifier": "visitMethodEvaluators", "parameters": "(\n            final Class<?> cls,\n            final Class<T> annotationClass,\n            final Consumer<Evaluator<T>> visitor)", "modifiers": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) private static", "return": "void", "signature": "void visitMethodEvaluators(\n            final Class<?> cls,\n            final Class<T> annotationClass,\n            final Consumer<Evaluator<T>> visitor)", "full_signature": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) private static void visitMethodEvaluators(\n            final Class<?> cls,\n            final Class<T> annotationClass,\n            final Consumer<Evaluator<T>> visitor)", "class_method_signature": "Annotations.visitMethodEvaluators(\n            final Class<?> cls,\n            final Class<T> annotationClass,\n            final Consumer<Evaluator<T>> visitor)", "testcase": false, "constructor": false}, {"identifier": "visitFieldEvaluators", "parameters": "(\n            final Class<?> cls,\n            final Class<T> annotationClass,\n            final Consumer<Evaluator<T>> visitor)", "modifiers": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) private static", "return": "void", "signature": "void visitFieldEvaluators(\n            final Class<?> cls,\n            final Class<T> annotationClass,\n            final Consumer<Evaluator<T>> visitor)", "full_signature": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) private static void visitFieldEvaluators(\n            final Class<?> cls,\n            final Class<T> annotationClass,\n            final Consumer<Evaluator<T>> visitor)", "class_method_signature": "Annotations.visitFieldEvaluators(\n            final Class<?> cls,\n            final Class<T> annotationClass,\n            final Consumer<Evaluator<T>> visitor)", "testcase": false, "constructor": false}, {"identifier": "fieldNameCandidatesFor", "parameters": "(final String methodName)", "modifiers": "static", "return": "List<String>", "signature": "List<String> fieldNameCandidatesFor(final String methodName)", "full_signature": "static List<String> fieldNameCandidatesFor(final String methodName)", "class_method_signature": "Annotations.fieldNameCandidatesFor(final String methodName)", "testcase": false, "constructor": false}, {"identifier": "isAnnotationPresent", "parameters": "(\n            final Method method, \n            final Class<? extends Annotation> annotationClass)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAnnotationPresent(\n            final Method method, \n            final Class<? extends Annotation> annotationClass)", "full_signature": "public static boolean isAnnotationPresent(\n            final Method method, \n            final Class<? extends Annotation> annotationClass)", "class_method_signature": "Annotations.isAnnotationPresent(\n            final Method method, \n            final Class<? extends Annotation> annotationClass)", "testcase": false, "constructor": false}, {"identifier": "getAnnotations", "parameters": "(\n            final Method method,\n            final int paramNum,\n            final Class<T> annotationClass)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> getAnnotations(\n            final Method method,\n            final int paramNum,\n            final Class<T> annotationClass)", "full_signature": "public static List<T> getAnnotations(\n            final Method method,\n            final int paramNum,\n            final Class<T> annotationClass)", "class_method_signature": "Annotations.getAnnotations(\n            final Method method,\n            final int paramNum,\n            final Class<T> annotationClass)", "testcase": false, "constructor": false}], "file": "core/metamodel/src/main/java/org/apache/isis/core/metamodel/facets/Annotations.java"}, "focal_method": {"identifier": "fieldNameCandidatesFor", "parameters": "(final String methodName)", "modifiers": "static", "return": "List<String>", "body": "static List<String> fieldNameCandidatesFor(final String methodName) {\n        if(methodName == null) {\n            return Collections.emptyList();\n        }\n        int beginIndex;\n        if (methodName.startsWith(\"get\")) {\n            beginIndex = 3;\n        } else if (methodName.startsWith(\"is\")) {\n            beginIndex = 2;\n        } else {\n            beginIndex = -1;\n        }\n        if(beginIndex == -1) {\n            return Collections.emptyList();\n        }\n        final String suffix = methodName.substring(beginIndex);\n        if(suffix.length() == 0) {\n            return Collections.emptyList();\n        }\n        final char c = suffix.charAt(0);\n        final char lower = Character.toLowerCase(c);\n        final String candidate = \"\" + lower + suffix.substring(1);\n        return Arrays.asList(candidate, \"_\" + candidate);\n    }", "signature": "List<String> fieldNameCandidatesFor(final String methodName)", "full_signature": "static List<String> fieldNameCandidatesFor(final String methodName)", "class_method_signature": "Annotations.fieldNameCandidatesFor(final String methodName)", "testcase": false, "constructor": false, "invocations": ["emptyList", "startsWith", "startsWith", "emptyList", "substring", "length", "emptyList", "charAt", "toLowerCase", "substring", "asList"]}, "repository": {"repo_id": 6935442, "url": "https://github.com/apache/isis", "stars": 516, "created": "11/30/2012 8:00:24 AM +00:00", "updates": "2020-01-27T13:28:09+00:00", "fork": "False", "license": "licensed"}}