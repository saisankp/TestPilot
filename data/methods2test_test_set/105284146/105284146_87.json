{"test_class": {"identifier": "SecurityAnalysisToolTest", "superclass": "extends AbstractToolTest", "interfaces": "", "fields": [{"original_string": "private SecurityAnalysisTool tool;", "modifier": "private", "type": "SecurityAnalysisTool", "declarator": "tool", "var_name": "tool"}], "file": "security-analysis-api/src/test/java/com/powsybl/security/tools/SecurityAnalysisToolTest.java"}, "test_case": {"identifier": "testRunWithLog", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRunWithLog() throws Exception {\n        try (ByteArrayOutputStream bout = new ByteArrayOutputStream();\n             ByteArrayOutputStream berr = new ByteArrayOutputStream();\n             PrintStream out = new PrintStream(bout);\n             PrintStream err = new PrintStream(berr);\n             ComputationManager cm = mock(ComputationManager.class)) {\n            CommandLine cl = mockCommandLine(ImmutableMap.of(\"case-file\", \"network.xml\",\n                    \"log-file\", \"out.zip\"), ImmutableSet.of(\"skip-postproc\"));\n\n            ToolRunningContext context = new ToolRunningContext(out, err, fileSystem, cm, cm);\n\n            SecurityAnalysisFactory saFactory = new SecurityAnalysisMockFactory();\n            SecurityAnalysis sa = saFactory.create(null, cm, 1);\n\n            SecurityAnalysisExecutionBuilder builder = new SecurityAnalysisExecutionBuilder(ExternalSecurityAnalysisConfig::new,\n                () -> saFactory,\n                executionInput -> new SecurityAnalysisInput(executionInput.getNetworkVariant()));\n\n            // execute\n            tool.run(cl, context, builder,\n                    SecurityAnalysisParameters::new,\n                    new ImportersLoaderList(new NetworkImporterMock()),\n                    TableFormatterConfig::new);\n\n            // verify that runWithLog() called instead of run();\n            verify(sa, never()).run(any(), any(), any());\n            verify(sa, times(1)).runWithLog(any(), any(), any());\n\n            when(cl.hasOption(\"log-file\")).thenReturn(false);\n            // execute\n            tool.run(cl, context, builder,\n                    SecurityAnalysisParameters::new,\n                    new ImportersLoaderList(new NetworkImporterMock()),\n                    TableFormatterConfig::new);\n            verify(sa, times(1)).run(any(), any(), any());\n\n            // exception happens\n            SecurityAnalysisFactory saFactory2 = new SecurityAnalysisMockFactory(true);\n            SecurityAnalysisExecutionBuilder builder2 = new SecurityAnalysisExecutionBuilder(ExternalSecurityAnalysisConfig::new,\n                () -> saFactory2,\n                executionInput -> new SecurityAnalysisInput(executionInput.getNetworkVariant()));\n            try {\n                tool.run(cl, context, builder2,\n                        SecurityAnalysisParameters::new,\n                        new ImportersLoaderList(new NetworkImporterMock()),\n                        TableFormatterConfig::new);\n                fail();\n            } catch (CompletionException exception) {\n                assertTrue(exception.getCause() instanceof ComputationException);\n            }\n        }\n    }", "signature": "void testRunWithLog()", "full_signature": "@Test public void testRunWithLog()", "class_method_signature": "SecurityAnalysisToolTest.testRunWithLog()", "testcase": true, "constructor": false, "invocations": ["mock", "mockCommandLine", "of", "of", "create", "getNetworkVariant", "run", "run", "verify", "never", "any", "any", "any", "runWithLog", "verify", "times", "any", "any", "any", "thenReturn", "when", "hasOption", "run", "run", "verify", "times", "any", "any", "any", "getNetworkVariant", "run", "fail", "assertTrue", "getCause"]}, "focal_class": {"identifier": "SecurityAnalysisTool", "superclass": "", "interfaces": "implements Tool", "fields": [], "methods": [{"identifier": "getCommand", "parameters": "()", "modifiers": "@Override public", "return": "Command", "signature": "Command getCommand()", "full_signature": "@Override public Command getCommand()", "class_method_signature": "SecurityAnalysisTool.getCommand()", "testcase": false, "constructor": false}, {"identifier": "updateInput", "parameters": "(ToolOptions options, SecurityAnalysisExecutionInput inputs)", "modifiers": "static", "return": "void", "signature": "void updateInput(ToolOptions options, SecurityAnalysisExecutionInput inputs)", "full_signature": "static void updateInput(ToolOptions options, SecurityAnalysisExecutionInput inputs)", "class_method_signature": "SecurityAnalysisTool.updateInput(ToolOptions options, SecurityAnalysisExecutionInput inputs)", "testcase": false, "constructor": false}, {"identifier": "configBasedInputBuildStrategy", "parameters": "(PlatformConfig config)", "modifiers": "private static", "return": "SecurityAnalysisInputBuildStrategy", "signature": "SecurityAnalysisInputBuildStrategy configBasedInputBuildStrategy(PlatformConfig config)", "full_signature": "private static SecurityAnalysisInputBuildStrategy configBasedInputBuildStrategy(PlatformConfig config)", "class_method_signature": "SecurityAnalysisTool.configBasedInputBuildStrategy(PlatformConfig config)", "testcase": false, "constructor": false}, {"identifier": "preprocessedInputBuildStrategy", "parameters": "(Supplier<LimitViolationFilter> filterInitializer,\n                                                                             SecurityAnalysisPreprocessorFactory preprocessorFactory)", "modifiers": "private static", "return": "SecurityAnalysisInputBuildStrategy", "signature": "SecurityAnalysisInputBuildStrategy preprocessedInputBuildStrategy(Supplier<LimitViolationFilter> filterInitializer,\n                                                                             SecurityAnalysisPreprocessorFactory preprocessorFactory)", "full_signature": "private static SecurityAnalysisInputBuildStrategy preprocessedInputBuildStrategy(Supplier<LimitViolationFilter> filterInitializer,\n                                                                             SecurityAnalysisPreprocessorFactory preprocessorFactory)", "class_method_signature": "SecurityAnalysisTool.preprocessedInputBuildStrategy(Supplier<LimitViolationFilter> filterInitializer,\n                                                                             SecurityAnalysisPreprocessorFactory preprocessorFactory)", "testcase": false, "constructor": false}, {"identifier": "buildPreprocessedInput", "parameters": "(SecurityAnalysisExecutionInput executionInput,\n                                                        Supplier<LimitViolationFilter> filterInitializer,\n                                                        SecurityAnalysisPreprocessorFactory preprocessorFactory)", "modifiers": "static", "return": "SecurityAnalysisInput", "signature": "SecurityAnalysisInput buildPreprocessedInput(SecurityAnalysisExecutionInput executionInput,\n                                                        Supplier<LimitViolationFilter> filterInitializer,\n                                                        SecurityAnalysisPreprocessorFactory preprocessorFactory)", "full_signature": "static SecurityAnalysisInput buildPreprocessedInput(SecurityAnalysisExecutionInput executionInput,\n                                                        Supplier<LimitViolationFilter> filterInitializer,\n                                                        SecurityAnalysisPreprocessorFactory preprocessorFactory)", "class_method_signature": "SecurityAnalysisTool.buildPreprocessedInput(SecurityAnalysisExecutionInput executionInput,\n                                                        Supplier<LimitViolationFilter> filterInitializer,\n                                                        SecurityAnalysisPreprocessorFactory preprocessorFactory)", "testcase": false, "constructor": false}, {"identifier": "createBuilder", "parameters": "(PlatformConfig platformConfig)", "modifiers": "private static", "return": "SecurityAnalysisExecutionBuilder", "signature": "SecurityAnalysisExecutionBuilder createBuilder(PlatformConfig platformConfig)", "full_signature": "private static SecurityAnalysisExecutionBuilder createBuilder(PlatformConfig platformConfig)", "class_method_signature": "SecurityAnalysisTool.createBuilder(PlatformConfig platformConfig)", "testcase": false, "constructor": false}, {"identifier": "buildExecution", "parameters": "(ToolOptions options, SecurityAnalysisExecutionBuilder builder)", "modifiers": "private static", "return": "SecurityAnalysisExecution", "signature": "SecurityAnalysisExecution buildExecution(ToolOptions options, SecurityAnalysisExecutionBuilder builder)", "full_signature": "private static SecurityAnalysisExecution buildExecution(ToolOptions options, SecurityAnalysisExecutionBuilder builder)", "class_method_signature": "SecurityAnalysisTool.buildExecution(ToolOptions options, SecurityAnalysisExecutionBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "runSecurityAnalysisWithLog", "parameters": "(ComputationManager computationManager,\n                                                             SecurityAnalysisExecution execution,\n                                                             SecurityAnalysisExecutionInput input,\n                                                             Path logPath)", "modifiers": "private static", "return": "SecurityAnalysisResult", "signature": "SecurityAnalysisResult runSecurityAnalysisWithLog(ComputationManager computationManager,\n                                                             SecurityAnalysisExecution execution,\n                                                             SecurityAnalysisExecutionInput input,\n                                                             Path logPath)", "full_signature": "private static SecurityAnalysisResult runSecurityAnalysisWithLog(ComputationManager computationManager,\n                                                             SecurityAnalysisExecution execution,\n                                                             SecurityAnalysisExecutionInput input,\n                                                             Path logPath)", "class_method_signature": "SecurityAnalysisTool.runSecurityAnalysisWithLog(ComputationManager computationManager,\n                                                             SecurityAnalysisExecution execution,\n                                                             SecurityAnalysisExecutionInput input,\n                                                             Path logPath)", "testcase": false, "constructor": false}, {"identifier": "readNetwork", "parameters": "(CommandLine line, ToolRunningContext context, ImportersLoader importersLoader)", "modifiers": "static", "return": "Network", "signature": "Network readNetwork(CommandLine line, ToolRunningContext context, ImportersLoader importersLoader)", "full_signature": "static Network readNetwork(CommandLine line, ToolRunningContext context, ImportersLoader importersLoader)", "class_method_signature": "SecurityAnalysisTool.readNetwork(CommandLine line, ToolRunningContext context, ImportersLoader importersLoader)", "testcase": false, "constructor": false}, {"identifier": "uncheckedWriteBytes", "parameters": "(byte[] bytes, Path path)", "modifiers": "private static", "return": "void", "signature": "void uncheckedWriteBytes(byte[] bytes, Path path)", "full_signature": "private static void uncheckedWriteBytes(byte[] bytes, Path path)", "class_method_signature": "SecurityAnalysisTool.uncheckedWriteBytes(byte[] bytes, Path path)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "(CommandLine line, ToolRunningContext context)", "modifiers": "@Override public", "return": "void", "signature": "void run(CommandLine line, ToolRunningContext context)", "full_signature": "@Override public void run(CommandLine line, ToolRunningContext context)", "class_method_signature": "SecurityAnalysisTool.run(CommandLine line, ToolRunningContext context)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "(CommandLine line, ToolRunningContext context,\n             SecurityAnalysisExecutionBuilder executionBuilder,\n             Supplier<SecurityAnalysisParameters> parametersLoader,\n             ImportersLoader importersLoader,\n             Supplier<TableFormatterConfig> tableFormatterConfigLoader)", "modifiers": "", "return": "void", "signature": "void run(CommandLine line, ToolRunningContext context,\n             SecurityAnalysisExecutionBuilder executionBuilder,\n             Supplier<SecurityAnalysisParameters> parametersLoader,\n             ImportersLoader importersLoader,\n             Supplier<TableFormatterConfig> tableFormatterConfigLoader)", "full_signature": " void run(CommandLine line, ToolRunningContext context,\n             SecurityAnalysisExecutionBuilder executionBuilder,\n             Supplier<SecurityAnalysisParameters> parametersLoader,\n             ImportersLoader importersLoader,\n             Supplier<TableFormatterConfig> tableFormatterConfigLoader)", "class_method_signature": "SecurityAnalysisTool.run(CommandLine line, ToolRunningContext context,\n             SecurityAnalysisExecutionBuilder executionBuilder,\n             Supplier<SecurityAnalysisParameters> parametersLoader,\n             ImportersLoader importersLoader,\n             Supplier<TableFormatterConfig> tableFormatterConfigLoader)", "testcase": false, "constructor": false}], "file": "security-analysis-api/src/main/java/com/powsybl/security/tools/SecurityAnalysisTool.java"}, "focal_method": {"identifier": "run", "parameters": "(CommandLine line, ToolRunningContext context)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void run(CommandLine line, ToolRunningContext context) throws Exception {\n        run(line, context,\n                createBuilder(PlatformConfig.defaultConfig()),\n                SecurityAnalysisParameters::load,\n                new ImportersServiceLoader(),\n                TableFormatterConfig::load);\n    }", "signature": "void run(CommandLine line, ToolRunningContext context)", "full_signature": "@Override public void run(CommandLine line, ToolRunningContext context)", "class_method_signature": "SecurityAnalysisTool.run(CommandLine line, ToolRunningContext context)", "testcase": false, "constructor": false, "invocations": ["run", "createBuilder", "defaultConfig"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}