{"test_class": {"identifier": "DynamoDBSSHRecordStoreConnectionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String tableName = \"cert-table\";", "modifier": "private final", "type": "String", "declarator": "tableName = \"cert-table\"", "var_name": "tableName"}, {"original_string": "@Mock private DynamoDB dynamoDB;", "modifier": "@Mock private", "type": "DynamoDB", "declarator": "dynamoDB", "var_name": "dynamoDB"}, {"original_string": "@Mock private Table table;", "modifier": "@Mock private", "type": "Table", "declarator": "table", "var_name": "table"}, {"original_string": "@Mock private Item item;", "modifier": "@Mock private", "type": "Item", "declarator": "item", "var_name": "item"}, {"original_string": "@Mock private PutItemOutcome putOutcome;", "modifier": "@Mock private", "type": "PutItemOutcome", "declarator": "putOutcome", "var_name": "putOutcome"}, {"original_string": "@Mock private DeleteItemOutcome deleteOutcome;", "modifier": "@Mock private", "type": "DeleteItemOutcome", "declarator": "deleteOutcome", "var_name": "deleteOutcome"}, {"original_string": "@Mock private UpdateItemOutcome updateOutcome;", "modifier": "@Mock private", "type": "UpdateItemOutcome", "declarator": "updateOutcome", "var_name": "updateOutcome"}], "file": "servers/zts/src/test/java/com/yahoo/athenz/zts/cert/impl/DynamoDBSSHRecordStoreConnectionTest.java"}, "test_case": {"identifier": "testGetSSHCertRecord", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetSSHCertRecord() {\n\n        Mockito.doReturn(item).when(table).getItem(\"primaryKey\", \"cn:1234\");\n\n        Mockito.doReturn(\"1234\").when(item).getString(\"instanceId\");\n        Mockito.doReturn(\"cn\").when(item).getString(\"service\");\n        Mockito.doReturn(\"host1,host2\").when(item).getString(\"principals\");\n        Mockito.doReturn(\"10.10.10.11\").when(item).getString(\"clientIP\");\n        Mockito.doReturn(\"10.10.10.12\").when(item).getString(\"privateIP\");\n\n        DynamoDBSSHRecordStoreConnection dbConn = new DynamoDBSSHRecordStoreConnection(dynamoDB, tableName);\n        dbConn.setOperationTimeout(10);\n        SSHCertRecord certRecord = dbConn.getSSHCertRecord(\"1234\", \"cn\");\n\n        assertEquals(certRecord.getInstanceId(), \"1234\");\n        assertEquals(certRecord.getService(), \"cn\");\n        assertEquals(certRecord.getPrincipals(), \"host1,host2\");\n        assertEquals(certRecord.getClientIP(), \"10.10.10.11\");\n        assertEquals(certRecord.getPrivateIP(), \"10.10.10.12\");\n\n        dbConn.close();\n    }", "signature": "void testGetSSHCertRecord()", "full_signature": "@Test public void testGetSSHCertRecord()", "class_method_signature": "DynamoDBSSHRecordStoreConnectionTest.testGetSSHCertRecord()", "testcase": true, "constructor": false, "invocations": ["getItem", "when", "doReturn", "getString", "when", "doReturn", "getString", "when", "doReturn", "getString", "when", "doReturn", "getString", "when", "doReturn", "getString", "when", "doReturn", "setOperationTimeout", "getSSHCertRecord", "assertEquals", "getInstanceId", "assertEquals", "getService", "assertEquals", "getPrincipals", "assertEquals", "getClientIP", "assertEquals", "getPrivateIP", "close"]}, "focal_class": {"identifier": "DynamoDBSSHRecordStoreConnection", "superclass": "", "interfaces": "implements SSHRecordStoreConnection", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(DynamoDBSSHRecordStoreConnection.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DynamoDBSSHRecordStoreConnection.class)", "var_name": "LOGGER"}, {"original_string": "private static final String KEY_PRIMARY = \"primaryKey\";", "modifier": "private static final", "type": "String", "declarator": "KEY_PRIMARY = \"primaryKey\"", "var_name": "KEY_PRIMARY"}, {"original_string": "private static final String KEY_INSTANCE_ID = \"instanceId\";", "modifier": "private static final", "type": "String", "declarator": "KEY_INSTANCE_ID = \"instanceId\"", "var_name": "KEY_INSTANCE_ID"}, {"original_string": "private static final String KEY_SERVICE = \"service\";", "modifier": "private static final", "type": "String", "declarator": "KEY_SERVICE = \"service\"", "var_name": "KEY_SERVICE"}, {"original_string": "private static final String KEY_PRINCIPALS = \"principals\";", "modifier": "private static final", "type": "String", "declarator": "KEY_PRINCIPALS = \"principals\"", "var_name": "KEY_PRINCIPALS"}, {"original_string": "private static final String KEY_CLIENT_IP = \"clientIP\";", "modifier": "private static final", "type": "String", "declarator": "KEY_CLIENT_IP = \"clientIP\"", "var_name": "KEY_CLIENT_IP"}, {"original_string": "private static final String KEY_PRIVATE_IP = \"privateIP\";", "modifier": "private static final", "type": "String", "declarator": "KEY_PRIVATE_IP = \"privateIP\"", "var_name": "KEY_PRIVATE_IP"}, {"original_string": "private static final String KEY_TTL = \"ttl\";", "modifier": "private static final", "type": "String", "declarator": "KEY_TTL = \"ttl\"", "var_name": "KEY_TTL"}, {"original_string": "private static long expiryTime = 3660 * Long.parseLong(\n            System.getProperty(ZTSConsts.ZTS_PROP_SSH_DYNAMODB_ITEM_TTL_HOURS, \"720\"));", "modifier": "private static", "type": "long", "declarator": "expiryTime = 3660 * Long.parseLong(\n            System.getProperty(ZTSConsts.ZTS_PROP_SSH_DYNAMODB_ITEM_TTL_HOURS, \"720\"))", "var_name": "expiryTime"}, {"original_string": "private Table table;", "modifier": "private", "type": "Table", "declarator": "table", "var_name": "table"}], "methods": [{"identifier": "DynamoDBSSHRecordStoreConnection", "parameters": "(DynamoDB dynamoDB, final String tableName)", "modifiers": "public", "return": "", "signature": " DynamoDBSSHRecordStoreConnection(DynamoDB dynamoDB, final String tableName)", "full_signature": "public  DynamoDBSSHRecordStoreConnection(DynamoDB dynamoDB, final String tableName)", "class_method_signature": "DynamoDBSSHRecordStoreConnection.DynamoDBSSHRecordStoreConnection(DynamoDB dynamoDB, final String tableName)", "testcase": false, "constructor": true}, {"identifier": "setOperationTimeout", "parameters": "(int queryTimeout)", "modifiers": "@Override public", "return": "void", "signature": "void setOperationTimeout(int queryTimeout)", "full_signature": "@Override public void setOperationTimeout(int queryTimeout)", "class_method_signature": "DynamoDBSSHRecordStoreConnection.setOperationTimeout(int queryTimeout)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "DynamoDBSSHRecordStoreConnection.close()", "testcase": false, "constructor": false}, {"identifier": "getSSHCertRecord", "parameters": "(String instanceId, String service)", "modifiers": "@Override public", "return": "SSHCertRecord", "signature": "SSHCertRecord getSSHCertRecord(String instanceId, String service)", "full_signature": "@Override public SSHCertRecord getSSHCertRecord(String instanceId, String service)", "class_method_signature": "DynamoDBSSHRecordStoreConnection.getSSHCertRecord(String instanceId, String service)", "testcase": false, "constructor": false}, {"identifier": "updateSSHCertRecord", "parameters": "(SSHCertRecord certRecord)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateSSHCertRecord(SSHCertRecord certRecord)", "full_signature": "@Override public boolean updateSSHCertRecord(SSHCertRecord certRecord)", "class_method_signature": "DynamoDBSSHRecordStoreConnection.updateSSHCertRecord(SSHCertRecord certRecord)", "testcase": false, "constructor": false}, {"identifier": "insertSSHCertRecord", "parameters": "(SSHCertRecord certRecord)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean insertSSHCertRecord(SSHCertRecord certRecord)", "full_signature": "@Override public boolean insertSSHCertRecord(SSHCertRecord certRecord)", "class_method_signature": "DynamoDBSSHRecordStoreConnection.insertSSHCertRecord(SSHCertRecord certRecord)", "testcase": false, "constructor": false}, {"identifier": "deleteSSHCertRecord", "parameters": "(String instanceId, String service)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deleteSSHCertRecord(String instanceId, String service)", "full_signature": "@Override public boolean deleteSSHCertRecord(String instanceId, String service)", "class_method_signature": "DynamoDBSSHRecordStoreConnection.deleteSSHCertRecord(String instanceId, String service)", "testcase": false, "constructor": false}, {"identifier": "deleteExpiredSSHCertRecords", "parameters": "(int expiryTimeMins)", "modifiers": "@Override public", "return": "int", "signature": "int deleteExpiredSSHCertRecords(int expiryTimeMins)", "full_signature": "@Override public int deleteExpiredSSHCertRecords(int expiryTimeMins)", "class_method_signature": "DynamoDBSSHRecordStoreConnection.deleteExpiredSSHCertRecords(int expiryTimeMins)", "testcase": false, "constructor": false}, {"identifier": "getPrimaryKey", "parameters": "(final String instanceId, final String service)", "modifiers": "private", "return": "String", "signature": "String getPrimaryKey(final String instanceId, final String service)", "full_signature": "private String getPrimaryKey(final String instanceId, final String service)", "class_method_signature": "DynamoDBSSHRecordStoreConnection.getPrimaryKey(final String instanceId, final String service)", "testcase": false, "constructor": false}], "file": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBSSHRecordStoreConnection.java"}, "focal_method": {"identifier": "getSSHCertRecord", "parameters": "(String instanceId, String service)", "modifiers": "@Override public", "return": "SSHCertRecord", "body": "@Override\n    public SSHCertRecord getSSHCertRecord(String instanceId, String service) {\n\n        final String primaryKey = getPrimaryKey(instanceId, service);\n        try {\n            Item item = table.getItem(KEY_PRIMARY, primaryKey);\n            if (item == null) {\n                LOGGER.error(\"DynamoDB Get Error for {}: item not found\", primaryKey);\n                return null;\n            }\n            SSHCertRecord certRecord = new SSHCertRecord();\n            certRecord.setInstanceId(instanceId);\n            certRecord.setService(service);\n            certRecord.setPrincipals(item.getString(KEY_PRINCIPALS));\n            certRecord.setClientIP(item.getString(KEY_CLIENT_IP));\n            certRecord.setPrivateIP(item.getString(KEY_PRIVATE_IP));\n            return certRecord;\n        } catch (Exception ex) {\n            LOGGER.error(\"DynamoDB Get Error for {}: {}/{}\", primaryKey, ex.getClass(), ex.getMessage());\n            return null;\n        }\n    }", "signature": "SSHCertRecord getSSHCertRecord(String instanceId, String service)", "full_signature": "@Override public SSHCertRecord getSSHCertRecord(String instanceId, String service)", "class_method_signature": "DynamoDBSSHRecordStoreConnection.getSSHCertRecord(String instanceId, String service)", "testcase": false, "constructor": false, "invocations": ["getPrimaryKey", "getItem", "error", "setInstanceId", "setService", "setPrincipals", "getString", "setClientIP", "getString", "setPrivateIP", "getString", "error", "getClass", "getMessage"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}