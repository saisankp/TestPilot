{"test_class": {"identifier": "EchoTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/net/adamcin/oakpal/core/checks/EchoTest.java"}, "test_case": {"identifier": "testAfterScanPackage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAfterScanPackage() throws RepositoryException {\n        new Echo().afterScanPackage(null, null);\n    }", "signature": "void testAfterScanPackage()", "full_signature": "@Test public void testAfterScanPackage()", "class_method_signature": "EchoTest.testAfterScanPackage()", "testcase": true, "constructor": false, "invocations": ["afterScanPackage"]}, "focal_class": {"identifier": "Echo", "superclass": "", "interfaces": "implements ProgressCheck", "fields": [{"original_string": "private final AtomicLong lastEvent = new AtomicLong(System.nanoTime());", "modifier": "private final", "type": "AtomicLong", "declarator": "lastEvent = new AtomicLong(System.nanoTime())", "var_name": "lastEvent"}], "methods": [{"identifier": "getReportedViolations", "parameters": "()", "modifiers": "@Override public", "return": "Collection<Violation>", "signature": "Collection<Violation> getReportedViolations()", "full_signature": "@Override public Collection<Violation> getReportedViolations()", "class_method_signature": "Echo.getReportedViolations()", "testcase": false, "constructor": false}, {"identifier": "stopInterval", "parameters": "()", "modifiers": "private", "return": "Duration", "signature": "Duration stopInterval()", "full_signature": "private Duration stopInterval()", "class_method_signature": "Echo.stopInterval()", "testcase": false, "constructor": false}, {"identifier": "formatDuration", "parameters": "(final @NotNull Duration duration)", "modifiers": "private", "return": "String", "signature": "String formatDuration(final @NotNull Duration duration)", "full_signature": "private String formatDuration(final @NotNull Duration duration)", "class_method_signature": "Echo.formatDuration(final @NotNull Duration duration)", "testcase": false, "constructor": false}, {"identifier": "echo", "parameters": "(final String message, final @NotNull Object... formatArgs)", "modifiers": "protected", "return": "void", "signature": "void echo(final String message, final @NotNull Object... formatArgs)", "full_signature": "protected void echo(final String message, final @NotNull Object... formatArgs)", "class_method_signature": "Echo.echo(final String message, final @NotNull Object... formatArgs)", "testcase": false, "constructor": false}, {"identifier": "getCheckName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getCheckName()", "full_signature": "@Override public String getCheckName()", "class_method_signature": "Echo.getCheckName()", "testcase": false, "constructor": false}, {"identifier": "identifyPackage", "parameters": "(final PackageId packageId, final File file)", "modifiers": "@Override public", "return": "void", "signature": "void identifyPackage(final PackageId packageId, final File file)", "full_signature": "@Override public void identifyPackage(final PackageId packageId, final File file)", "class_method_signature": "Echo.identifyPackage(final PackageId packageId, final File file)", "testcase": false, "constructor": false}, {"identifier": "identifySubpackage", "parameters": "(final PackageId packageId, final PackageId parentId)", "modifiers": "@Override public", "return": "void", "signature": "void identifySubpackage(final PackageId packageId, final PackageId parentId)", "full_signature": "@Override public void identifySubpackage(final PackageId packageId, final PackageId parentId)", "class_method_signature": "Echo.identifySubpackage(final PackageId packageId, final PackageId parentId)", "testcase": false, "constructor": false}, {"identifier": "readManifest", "parameters": "(final PackageId packageId, final Manifest manifest)", "modifiers": "@Override public", "return": "void", "signature": "void readManifest(final PackageId packageId, final Manifest manifest)", "full_signature": "@Override public void readManifest(final PackageId packageId, final Manifest manifest)", "class_method_signature": "Echo.readManifest(final PackageId packageId, final Manifest manifest)", "testcase": false, "constructor": false}, {"identifier": "beforeExtract", "parameters": "(final PackageId packageId, final Session inspectSession,\n                              final PackageProperties packageProperties, final MetaInf metaInf,\n                              final List<PackageId> subpackages)", "modifiers": "@Override public", "return": "void", "signature": "void beforeExtract(final PackageId packageId, final Session inspectSession,\n                              final PackageProperties packageProperties, final MetaInf metaInf,\n                              final List<PackageId> subpackages)", "full_signature": "@Override public void beforeExtract(final PackageId packageId, final Session inspectSession,\n                              final PackageProperties packageProperties, final MetaInf metaInf,\n                              final List<PackageId> subpackages)", "class_method_signature": "Echo.beforeExtract(final PackageId packageId, final Session inspectSession,\n                              final PackageProperties packageProperties, final MetaInf metaInf,\n                              final List<PackageId> subpackages)", "testcase": false, "constructor": false}, {"identifier": "importedPath", "parameters": "(final PackageId packageId, final String path, final Node node)", "modifiers": "@Deprecated public", "return": "void", "signature": "void importedPath(final PackageId packageId, final String path, final Node node)", "full_signature": "@Deprecated public void importedPath(final PackageId packageId, final String path, final Node node)", "class_method_signature": "Echo.importedPath(final PackageId packageId, final String path, final Node node)", "testcase": false, "constructor": false}, {"identifier": "importedPath", "parameters": "(final PackageId packageId, final String path, final Node node, final PathAction action)", "modifiers": "@Override public", "return": "void", "signature": "void importedPath(final PackageId packageId, final String path, final Node node, final PathAction action)", "full_signature": "@Override public void importedPath(final PackageId packageId, final String path, final Node node, final PathAction action)", "class_method_signature": "Echo.importedPath(final PackageId packageId, final String path, final Node node, final PathAction action)", "testcase": false, "constructor": false}, {"identifier": "deletedPath", "parameters": "(final PackageId packageId, final String path, final Session inspectSession)", "modifiers": "@Override public", "return": "void", "signature": "void deletedPath(final PackageId packageId, final String path, final Session inspectSession)", "full_signature": "@Override public void deletedPath(final PackageId packageId, final String path, final Session inspectSession)", "class_method_signature": "Echo.deletedPath(final PackageId packageId, final String path, final Session inspectSession)", "testcase": false, "constructor": false}, {"identifier": "afterExtract", "parameters": "(final PackageId packageId, final Session inspectSession)", "modifiers": "@Override public", "return": "void", "signature": "void afterExtract(final PackageId packageId, final Session inspectSession)", "full_signature": "@Override public void afterExtract(final PackageId packageId, final Session inspectSession)", "class_method_signature": "Echo.afterExtract(final PackageId packageId, final Session inspectSession)", "testcase": false, "constructor": false}, {"identifier": "simulateSling", "parameters": "(final SlingSimulator slingSimulator, final Set<String> runModes)", "modifiers": "@Override public", "return": "void", "signature": "void simulateSling(final SlingSimulator slingSimulator, final Set<String> runModes)", "full_signature": "@Override public void simulateSling(final SlingSimulator slingSimulator, final Set<String> runModes)", "class_method_signature": "Echo.simulateSling(final SlingSimulator slingSimulator, final Set<String> runModes)", "testcase": false, "constructor": false}, {"identifier": "identifyEmbeddedPackage", "parameters": "(final PackageId packageId, final PackageId parentId, final EmbeddedPackageInstallable slingInstallable)", "modifiers": "@Override public", "return": "void", "signature": "void identifyEmbeddedPackage(final PackageId packageId, final PackageId parentId, final EmbeddedPackageInstallable slingInstallable)", "full_signature": "@Override public void identifyEmbeddedPackage(final PackageId packageId, final PackageId parentId, final EmbeddedPackageInstallable slingInstallable)", "class_method_signature": "Echo.identifyEmbeddedPackage(final PackageId packageId, final PackageId parentId, final EmbeddedPackageInstallable slingInstallable)", "testcase": false, "constructor": false}, {"identifier": "beforeSlingInstall", "parameters": "(final PackageId scanPackageId, final SlingInstallable slingInstallable, final Session inspectSession)", "modifiers": "@Override public", "return": "void", "signature": "void beforeSlingInstall(final PackageId scanPackageId, final SlingInstallable slingInstallable, final Session inspectSession)", "full_signature": "@Override public void beforeSlingInstall(final PackageId scanPackageId, final SlingInstallable slingInstallable, final Session inspectSession)", "class_method_signature": "Echo.beforeSlingInstall(final PackageId scanPackageId, final SlingInstallable slingInstallable, final Session inspectSession)", "testcase": false, "constructor": false}, {"identifier": "appliedRepoInitScripts", "parameters": "(final PackageId scanPackageId, final List<String> scripts, final SlingInstallable slingInstallable, final Session inspectSession)", "modifiers": "@Override public", "return": "void", "signature": "void appliedRepoInitScripts(final PackageId scanPackageId, final List<String> scripts, final SlingInstallable slingInstallable, final Session inspectSession)", "full_signature": "@Override public void appliedRepoInitScripts(final PackageId scanPackageId, final List<String> scripts, final SlingInstallable slingInstallable, final Session inspectSession)", "class_method_signature": "Echo.appliedRepoInitScripts(final PackageId scanPackageId, final List<String> scripts, final SlingInstallable slingInstallable, final Session inspectSession)", "testcase": false, "constructor": false}, {"identifier": "afterScanPackage", "parameters": "(final PackageId scanPackageId, final Session inspectSession)", "modifiers": "@Override public", "return": "void", "signature": "void afterScanPackage(final PackageId scanPackageId, final Session inspectSession)", "full_signature": "@Override public void afterScanPackage(final PackageId scanPackageId, final Session inspectSession)", "class_method_signature": "Echo.afterScanPackage(final PackageId scanPackageId, final Session inspectSession)", "testcase": false, "constructor": false}, {"identifier": "sessionToString", "parameters": "(final @Nullable Session session)", "modifiers": "@Nullable", "return": "String", "signature": "String sessionToString(final @Nullable Session session)", "full_signature": "@Nullable String sessionToString(final @Nullable Session session)", "class_method_signature": "Echo.sessionToString(final @Nullable Session session)", "testcase": false, "constructor": false}, {"identifier": "startedScan", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void startedScan()", "full_signature": "@Override public void startedScan()", "class_method_signature": "Echo.startedScan()", "testcase": false, "constructor": false}, {"identifier": "finishedScan", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void finishedScan()", "full_signature": "@Override public void finishedScan()", "class_method_signature": "Echo.finishedScan()", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/checks/Echo.java"}, "focal_method": {"identifier": "afterScanPackage", "parameters": "(final PackageId scanPackageId, final Session inspectSession)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void afterScanPackage(final PackageId scanPackageId, final Session inspectSession) throws RepositoryException {\n        echo(\"afterScanPackage(scanPackageId: %s, inspectSession: %s)\", scanPackageId, sessionToString(inspectSession));\n    }", "signature": "void afterScanPackage(final PackageId scanPackageId, final Session inspectSession)", "full_signature": "@Override public void afterScanPackage(final PackageId scanPackageId, final Session inspectSession)", "class_method_signature": "Echo.afterScanPackage(final PackageId scanPackageId, final Session inspectSession)", "testcase": false, "constructor": false, "invocations": ["echo", "sessionToString"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}