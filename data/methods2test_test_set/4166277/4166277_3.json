{"test_class": {"identifier": "MBeanHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "sjk-core/src/test/java/org/gridkit/jvmtool/MBeanHelperTest.java"}, "test_case": {"identifier": "test_os_bean_describer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_os_bean_describer() throws Exception {\n        MBeanHelper helper = new MBeanHelper(ManagementFactory.getPlatformMBeanServer());\n        System.out.println(helper.describe(osMXBean()));\n    }", "signature": "void test_os_bean_describer()", "full_signature": "@Test public void test_os_bean_describer()", "class_method_signature": "MBeanHelperTest.test_os_bean_describer()", "testcase": true, "constructor": false, "invocations": ["getPlatformMBeanServer", "println", "describe", "osMXBean"]}, "focal_class": {"identifier": "MBeanHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static String FORMAT_TABLE_COLUMN_WIDTH_THRESHOLD = \"table.column.maxWidth\";", "modifier": "public static", "type": "String", "declarator": "FORMAT_TABLE_COLUMN_WIDTH_THRESHOLD = \"table.column.maxWidth\"", "var_name": "FORMAT_TABLE_COLUMN_WIDTH_THRESHOLD"}, {"original_string": "public static String FORMAT_COMPOSITE_FIELD_WIDTH_THRESHODL = \"composite.field.maxWidth\";", "modifier": "public static", "type": "String", "declarator": "FORMAT_COMPOSITE_FIELD_WIDTH_THRESHODL = \"composite.field.maxWidth\"", "var_name": "FORMAT_COMPOSITE_FIELD_WIDTH_THRESHODL"}, {"original_string": "private MBeanServerConnection mserver;", "modifier": "private", "type": "MBeanServerConnection", "declarator": "mserver", "var_name": "mserver"}, {"original_string": "private int widthThresholdTable = 40;", "modifier": "private", "type": "int", "declarator": "widthThresholdTable = 40", "var_name": "widthThresholdTable"}, {"original_string": "private int widthThresholdComposite = 1000;", "modifier": "private", "type": "int", "declarator": "widthThresholdComposite = 1000", "var_name": "widthThresholdComposite"}, {"original_string": "static Map<String, Object> ARRAY_MAP = new HashMap<String, Object>();", "modifier": "static", "type": "Map<String, Object>", "declarator": "ARRAY_MAP = new HashMap<String, Object>()", "var_name": "ARRAY_MAP"}, {"original_string": "static Map<String, String> TYPE_MAP = new HashMap<String, String>();", "modifier": "static", "type": "Map<String, String>", "declarator": "TYPE_MAP = new HashMap<String, String>()", "var_name": "TYPE_MAP"}], "methods": [{"identifier": "MBeanHelper", "parameters": "(MBeanServerConnection connection)", "modifiers": "public", "return": "", "signature": " MBeanHelper(MBeanServerConnection connection)", "full_signature": "public  MBeanHelper(MBeanServerConnection connection)", "class_method_signature": "MBeanHelper.MBeanHelper(MBeanServerConnection connection)", "testcase": false, "constructor": true}, {"identifier": "setFormatingOption", "parameters": "(String name, Object value)", "modifiers": "public", "return": "void", "signature": "void setFormatingOption(String name, Object value)", "full_signature": "public void setFormatingOption(String name, Object value)", "class_method_signature": "MBeanHelper.setFormatingOption(String name, Object value)", "testcase": false, "constructor": false}, {"identifier": "getAttributeInfos", "parameters": "(ObjectName bean, Collection<String> attrs, boolean read, boolean write)", "modifiers": "private", "return": "Map<String, MBeanAttributeInfo>", "signature": "Map<String, MBeanAttributeInfo> getAttributeInfos(ObjectName bean, Collection<String> attrs, boolean read, boolean write)", "full_signature": "private Map<String, MBeanAttributeInfo> getAttributeInfos(ObjectName bean, Collection<String> attrs, boolean read, boolean write)", "class_method_signature": "MBeanHelper.getAttributeInfos(ObjectName bean, Collection<String> attrs, boolean read, boolean write)", "testcase": false, "constructor": false}, {"identifier": "getAttributes", "parameters": "(ObjectName bean, Collection<String> attrs)", "modifiers": "private", "return": "Map<String, Object>", "signature": "Map<String, Object> getAttributes(ObjectName bean, Collection<String> attrs)", "full_signature": "private Map<String, Object> getAttributes(ObjectName bean, Collection<String> attrs)", "class_method_signature": "MBeanHelper.getAttributes(ObjectName bean, Collection<String> attrs)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(ObjectName bean, Collection<String> attrs)", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> get(ObjectName bean, Collection<String> attrs)", "full_signature": "public Map<String, String> get(ObjectName bean, Collection<String> attrs)", "class_method_signature": "MBeanHelper.get(ObjectName bean, Collection<String> attrs)", "testcase": false, "constructor": false}, {"identifier": "getAsTable", "parameters": "(ObjectName bean, Collection<String> attrs, MTable table)", "modifiers": "public", "return": "void", "signature": "void getAsTable(ObjectName bean, Collection<String> attrs, MTable table)", "full_signature": "public void getAsTable(ObjectName bean, Collection<String> attrs, MTable table)", "class_method_signature": "MBeanHelper.getAsTable(ObjectName bean, Collection<String> attrs, MTable table)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(ObjectName bean, String attr, String value)", "modifiers": "public", "return": "void", "signature": "void set(ObjectName bean, String attr, String value)", "full_signature": "public void set(ObjectName bean, String attr, String value)", "class_method_signature": "MBeanHelper.set(ObjectName bean, String attr, String value)", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(ObjectName bean, String operation, String... params)", "modifiers": "public", "return": "String", "signature": "String invoke(ObjectName bean, String operation, String... params)", "full_signature": "public String invoke(ObjectName bean, String operation, String... params)", "class_method_signature": "MBeanHelper.invoke(ObjectName bean, String operation, String... params)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(Object v, String type)", "modifiers": "private", "return": "String", "signature": "String format(Object v, String type)", "full_signature": "private String format(Object v, String type)", "class_method_signature": "MBeanHelper.format(Object v, String type)", "testcase": false, "constructor": false}, {"identifier": "formatTable", "parameters": "(List<String[]> content, int maxCell, boolean table)", "modifiers": "private", "return": "String", "signature": "String formatTable(List<String[]> content, int maxCell, boolean table)", "full_signature": "private String formatTable(List<String[]> content, int maxCell, boolean table)", "class_method_signature": "MBeanHelper.formatTable(List<String[]> content, int maxCell, boolean table)", "testcase": false, "constructor": false}, {"identifier": "formatLine", "parameters": "(Object v, String type)", "modifiers": "private", "return": "String", "signature": "String formatLine(Object v, String type)", "full_signature": "private String formatLine(Object v, String type)", "class_method_signature": "MBeanHelper.formatLine(Object v, String type)", "testcase": false, "constructor": false}, {"identifier": "formatRow", "parameters": "(CompositeData row, List<String> header)", "modifiers": "private", "return": "String[]", "signature": "String[] formatRow(CompositeData row, List<String> header)", "full_signature": "private String[] formatRow(CompositeData row, List<String> header)", "class_method_signature": "MBeanHelper.formatRow(CompositeData row, List<String> header)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(String value, String type)", "modifiers": "private", "return": "Object", "signature": "Object convert(String value, String type)", "full_signature": "private Object convert(String value, String type)", "class_method_signature": "MBeanHelper.convert(String value, String type)", "testcase": false, "constructor": false}, {"identifier": "describe", "parameters": "(ObjectName bean)", "modifiers": "public", "return": "String", "signature": "String describe(ObjectName bean)", "full_signature": "public String describe(ObjectName bean)", "class_method_signature": "MBeanHelper.describe(ObjectName bean)", "testcase": false, "constructor": false}, {"identifier": "toPrintableType", "parameters": "(String type)", "modifiers": "static", "return": "String", "signature": "String toPrintableType(String type)", "full_signature": "static String toPrintableType(String type)", "class_method_signature": "MBeanHelper.toPrintableType(String type)", "testcase": false, "constructor": false}], "file": "sjk-core/src/main/java/org/gridkit/jvmtool/MBeanHelper.java"}, "focal_method": {"identifier": "describe", "parameters": "(ObjectName bean)", "modifiers": "public", "return": "String", "body": "public String describe(ObjectName bean) throws Exception {\n        MBeanInfo mbinfo = mserver.getMBeanInfo(bean);\n        StringBuilder sb = new StringBuilder();\n        sb.append(bean);\n        sb.append('\\n');\n        sb.append(mbinfo.getClassName());\n        sb.append('\\n');\n        sb.append(\" - \" + mbinfo.getDescription());\n        sb.append('\\n');\n        for(MBeanAttributeInfo ai: mbinfo.getAttributes()) {\n            sb.append(\" (A) \");\n            sb.append(ai.getName()).append(\" : \").append(toPrintableType(ai.getType())).append(\"\");\n            if (!ai.isReadable()) {\n                sb.append(\" - WRITEONLY\");\n            }\n            else if (ai.isWritable()) {\n                sb.append(\" - WRITEABLE\");\n            }\n            sb.append('\\n');\n            if (!ai.getName().equals(ai.getDescription())) {\n                sb.append(\"  - \" + ai.getDescription());\n                sb.append('\\n');\n            }\n        }\n        for (MBeanOperationInfo oi: mbinfo.getOperations()) {\n            sb.append(\" (O) \");\n            sb.append(oi.getName()).append(\"(\");\n            for(MBeanParameterInfo pi: oi.getSignature()) {\n                String name = pi.getName();\n                String type = toPrintableType(pi.getType());\n                sb.append(type).append(' ').append(name).append(\", \");\n            }\n            if (oi.getSignature().length > 0) {\n                sb.setLength(sb.length() - 2);\n            }\n            sb.append(\") : \").append(toPrintableType(oi.getReturnType()));\n            sb.append('\\n');\n            if (!oi.getName().equals(oi.getDescription())) {\n                sb.append(\"  - \" + oi.getDescription());\n                sb.append('\\n');\n            }\n        }\n        return sb.toString();\n    }", "signature": "String describe(ObjectName bean)", "full_signature": "public String describe(ObjectName bean)", "class_method_signature": "MBeanHelper.describe(ObjectName bean)", "testcase": false, "constructor": false, "invocations": ["getMBeanInfo", "append", "append", "append", "getClassName", "append", "append", "getDescription", "append", "getAttributes", "append", "append", "append", "append", "append", "getName", "toPrintableType", "getType", "isReadable", "append", "isWritable", "append", "append", "equals", "getName", "getDescription", "append", "getDescription", "append", "getOperations", "append", "append", "append", "getName", "getSignature", "getName", "toPrintableType", "getType", "append", "append", "append", "append", "getSignature", "setLength", "length", "append", "append", "toPrintableType", "getReturnType", "append", "equals", "getName", "getDescription", "append", "getDescription", "append", "toString"]}, "repository": {"repo_id": 4166277, "url": "https://github.com/aragozin/jvm-tools", "language": "Java", "is_fork": false, "fork_count": 443, "stargazer_count": 2728, "size": 4961, "license": "licensed"}}