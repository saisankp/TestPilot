{"test_class": {"identifier": "Base58UtilsTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [{"original_string": "public static final byte[] DECODED = \"Hello Aergo this is hera the queen\".getBytes();", "modifier": "public static final", "type": "byte[]", "declarator": "DECODED = \"Hello Aergo this is hera the queen\".getBytes()", "var_name": "DECODED"}, {"original_string": "public static final String ENCODED = \"2dvaTHm2BaTDBPnm6R2thH1wHtyVdfTpBd98uxhdLxeTdNV\";", "modifier": "public static final", "type": "String", "declarator": "ENCODED = \"2dvaTHm2BaTDBPnm6R2thH1wHtyVdfTpBd98uxhdLxeTdNV\"", "var_name": "ENCODED"}, {"original_string": "public static final byte[] DECODED_WITH_CHECKSUM = {0x42, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\n      13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33};", "modifier": "public static final", "type": "byte[]", "declarator": "DECODED_WITH_CHECKSUM = {0x42, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\n      13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33}", "var_name": "DECODED_WITH_CHECKSUM"}, {"original_string": "public static final String ENCODED_WITH_CHECKSUM =\n      \"AmJaNDXoPbBRn9XHh9onKbDKuAzj88n5Bzt7KniYA78qUEc5EwBd\";", "modifier": "public static final", "type": "String", "declarator": "ENCODED_WITH_CHECKSUM =\n      \"AmJaNDXoPbBRn9XHh9onKbDKuAzj88n5Bzt7KniYA78qUEc5EwBd\"", "var_name": "ENCODED_WITH_CHECKSUM"}], "file": "core/util/src/test/java/hera/util/Base58UtilsTest.java"}, "test_case": {"identifier": "testDecodeWithCheck", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testDecodeWithCheck() throws IOException {\n    assertTrue(\n        Arrays.equals(DECODED_WITH_CHECKSUM, Base58Utils.decodeWithCheck(ENCODED_WITH_CHECKSUM)));\n    assertTrue(Arrays.equals(new byte[0], Base58Utils.decodeWithCheck(\"\")));\n    assertTrue(Arrays.equals(new byte[0], Base58Utils.decodeWithCheck(null)));\n  }", "signature": "void testDecodeWithCheck()", "full_signature": "@Test public void testDecodeWithCheck()", "class_method_signature": "Base58UtilsTest.testDecodeWithCheck()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "equals", "decodeWithCheck", "assertTrue", "equals", "decodeWithCheck", "assertTrue", "equals", "decodeWithCheck"]}, "focal_class": {"identifier": "Base58Utils", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final Logger logger = getLogger(Base58Utils.class);", "modifier": "protected static final", "type": "Logger", "declarator": "logger = getLogger(Base58Utils.class)", "var_name": "logger"}, {"original_string": "protected static final char[] BASE58_CHARS =\n      \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\".toCharArray();", "modifier": "protected static final", "type": "char[]", "declarator": "BASE58_CHARS =\n      \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\".toCharArray()", "var_name": "BASE58_CHARS"}, {"original_string": "protected static final char ENCODED_ZERO = BASE58_CHARS[0];", "modifier": "protected static final", "type": "char", "declarator": "ENCODED_ZERO = BASE58_CHARS[0]", "var_name": "ENCODED_ZERO"}, {"original_string": "protected static final int[] INDEXES = new int[128];", "modifier": "protected static final", "type": "int[]", "declarator": "INDEXES = new int[128]", "var_name": "INDEXES"}, {"original_string": "protected static final int CHECKSUM_LEN = 4;", "modifier": "protected static final", "type": "int", "declarator": "CHECKSUM_LEN = 4", "var_name": "CHECKSUM_LEN"}], "methods": [{"identifier": "encode", "parameters": "(final byte[] input)", "modifiers": "public static", "return": "String", "signature": "String encode(final byte[] input)", "full_signature": "public static String encode(final byte[] input)", "class_method_signature": "Base58Utils.encode(final byte[] input)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(final String input)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] decode(final String input)", "full_signature": "public static byte[] decode(final String input)", "class_method_signature": "Base58Utils.decode(final String input)", "testcase": false, "constructor": false}, {"identifier": "divmod", "parameters": "(byte[] number, int firstDigit, int base, int divisor)", "modifiers": "private static", "return": "byte", "signature": "byte divmod(byte[] number, int firstDigit, int base, int divisor)", "full_signature": "private static byte divmod(byte[] number, int firstDigit, int base, int divisor)", "class_method_signature": "Base58Utils.divmod(byte[] number, int firstDigit, int base, int divisor)", "testcase": false, "constructor": false}, {"identifier": "encodeWithCheck", "parameters": "(final byte[] rawData)", "modifiers": "public static", "return": "String", "signature": "String encodeWithCheck(final byte[] rawData)", "full_signature": "public static String encodeWithCheck(final byte[] rawData)", "class_method_signature": "Base58Utils.encodeWithCheck(final byte[] rawData)", "testcase": false, "constructor": false}, {"identifier": "decodeWithCheck", "parameters": "(final String encoded)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] decodeWithCheck(final String encoded)", "full_signature": "public static byte[] decodeWithCheck(final String encoded)", "class_method_signature": "Base58Utils.decodeWithCheck(final String encoded)", "testcase": false, "constructor": false}, {"identifier": "calculateCheckSum", "parameters": "(final byte[] rawData)", "modifiers": "protected static", "return": "byte[]", "signature": "byte[] calculateCheckSum(final byte[] rawData)", "full_signature": "protected static byte[] calculateCheckSum(final byte[] rawData)", "class_method_signature": "Base58Utils.calculateCheckSum(final byte[] rawData)", "testcase": false, "constructor": false}], "file": "core/util/src/main/java/hera/util/Base58Utils.java"}, "focal_method": {"identifier": "decodeWithCheck", "parameters": "(final String encoded)", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] decodeWithCheck(final String encoded) throws IOException {\n    if (null == encoded || encoded.length() == 0) {\n      return new byte[0];\n    }\n    final byte[] rawTotal = decode(encoded);\n    final byte[] rawData = Arrays.copyOfRange(rawTotal, 0, rawTotal.length - CHECKSUM_LEN);\n    final byte[] checkSum =\n        Arrays.copyOfRange(rawTotal, rawTotal.length - CHECKSUM_LEN, rawTotal.length);\n    final byte[] calculatedCheckSum = calculateCheckSum(rawData);\n    if (!Arrays.equals(checkSum, calculatedCheckSum)) {\n      logger.info(\"Checksum is mismatch - Input: {}, Computed: {}\", checkSum, calculatedCheckSum);\n      throw new IllegalArgumentException(\"Checksum is mismatch\");\n    }\n    return rawData;\n  }", "signature": "byte[] decodeWithCheck(final String encoded)", "full_signature": "public static byte[] decodeWithCheck(final String encoded)", "class_method_signature": "Base58Utils.decodeWithCheck(final String encoded)", "testcase": false, "constructor": false, "invocations": ["length", "decode", "copyOfRange", "copyOfRange", "calculateCheckSum", "equals", "info"]}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}