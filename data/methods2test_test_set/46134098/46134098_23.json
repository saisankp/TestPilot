{"test_class": {"identifier": "POTResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final File INPUT_FILE = new File(\"src/test/resource/resfilter/pot/input.pot\");", "modifier": "private static final", "type": "File", "declarator": "INPUT_FILE = new File(\"src/test/resource/resfilter/pot/input.pot\")", "var_name": "INPUT_FILE"}, {"original_string": "private static final File EXPECTED_WRITE_FILE = new File(\"src/test/resource/resfilter/pot/write-output.pot\");", "modifier": "private static final", "type": "File", "declarator": "EXPECTED_WRITE_FILE = new File(\"src/test/resource/resfilter/pot/write-output.pot\")", "var_name": "EXPECTED_WRITE_FILE"}, {"original_string": "private static final File MERGE_INPUT_1_FILE = new File(\"src/test/resource/resfilter/pot/merge-input-1.pot\");", "modifier": "private static final", "type": "File", "declarator": "MERGE_INPUT_1_FILE = new File(\"src/test/resource/resfilter/pot/merge-input-1.pot\")", "var_name": "MERGE_INPUT_1_FILE"}, {"original_string": "private static final File MERGE_INPUT_2_FILE = new File(\"src/test/resource/resfilter/pot/merge-input-2.pot\");", "modifier": "private static final", "type": "File", "declarator": "MERGE_INPUT_2_FILE = new File(\"src/test/resource/resfilter/pot/merge-input-2.pot\")", "var_name": "MERGE_INPUT_2_FILE"}, {"original_string": "private static final File EXPECTED_MERGE_1_FILE = new File(\"src/test/resource/resfilter/pot/merge-output-1.pot\");", "modifier": "private static final", "type": "File", "declarator": "EXPECTED_MERGE_1_FILE = new File(\"src/test/resource/resfilter/pot/merge-output-1.pot\")", "var_name": "EXPECTED_MERGE_1_FILE"}, {"original_string": "private static final File EXPECTED_MERGE_2_FILE = new File(\"src/test/resource/resfilter/pot/merge-output-2.pot\");", "modifier": "private static final", "type": "File", "declarator": "EXPECTED_MERGE_2_FILE = new File(\"src/test/resource/resfilter/pot/merge-output-2.pot\")", "var_name": "EXPECTED_MERGE_2_FILE"}, {"original_string": "private static final Collection<ResourceString> EXPECTED_INPUT_RES_LIST;", "modifier": "private static final", "type": "Collection<ResourceString>", "declarator": "EXPECTED_INPUT_RES_LIST", "var_name": "EXPECTED_INPUT_RES_LIST"}, {"original_string": "private static LanguageBundle WRITE_BUNDLE;", "modifier": "private static", "type": "LanguageBundle", "declarator": "WRITE_BUNDLE", "var_name": "WRITE_BUNDLE"}, {"original_string": "private static LanguageBundle MERGE_BUNDLE;", "modifier": "private static", "type": "LanguageBundle", "declarator": "MERGE_BUNDLE", "var_name": "MERGE_BUNDLE"}, {"original_string": "private static final POTResource res = new POTResource();", "modifier": "private static final", "type": "POTResource", "declarator": "res = new POTResource()", "var_name": "res"}], "file": "gp-res-filter/src/test/java/com/ibm/g11n/pipeline/resfilter/impl/POTResourceTest.java"}, "test_case": {"identifier": "testParse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParse() throws IOException, ResourceFilterException {\n        assertTrue(\"The input test file <\" + INPUT_FILE + \"> does not exist.\", INPUT_FILE.exists());\n\n        try (InputStream is = new FileInputStream(INPUT_FILE)) {\n            LanguageBundle bundle = res.parse(is, null);\n            List<ResourceString> resStrList = new ArrayList<>(bundle.getResourceStrings());\n            Collections.sort(resStrList, new ResourceStringComparator());\n            assertEquals(\"ResourceStrings did not match.\", EXPECTED_INPUT_RES_LIST, resStrList);\n        }\n    }", "signature": "void testParse()", "full_signature": "@Test public void testParse()", "class_method_signature": "POTResourceTest.testParse()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "exists", "parse", "getResourceStrings", "sort", "assertEquals"]}, "focal_class": {"identifier": "POTResource", "superclass": "extends ResourceFilter", "interfaces": "", "fields": [{"original_string": "static final String CHAR_SET = \"UTF-8\";", "modifier": "static final", "type": "String", "declarator": "CHAR_SET = \"UTF-8\"", "var_name": "CHAR_SET"}, {"original_string": "static final String ENTRY_PREFIX_PATTERN = \"^(msgid|msgstr).*\";", "modifier": "static final", "type": "String", "declarator": "ENTRY_PREFIX_PATTERN = \"^(msgid|msgstr).*\"", "var_name": "ENTRY_PREFIX_PATTERN"}, {"original_string": "static final String UNTRANSLATED_STRING_PREFIX = \"msgid \";", "modifier": "static final", "type": "String", "declarator": "UNTRANSLATED_STRING_PREFIX = \"msgid \"", "var_name": "UNTRANSLATED_STRING_PREFIX"}, {"original_string": "static final String UNTRANSLATED_PLURAL_STRING_PREFIX = \"msgid_plural \";", "modifier": "static final", "type": "String", "declarator": "UNTRANSLATED_PLURAL_STRING_PREFIX = \"msgid_plural \"", "var_name": "UNTRANSLATED_PLURAL_STRING_PREFIX"}, {"original_string": "static final String TRANSLATED_STRING_PREFIX = \"msgstr \";", "modifier": "static final", "type": "String", "declarator": "TRANSLATED_STRING_PREFIX = \"msgstr \"", "var_name": "TRANSLATED_STRING_PREFIX"}, {"original_string": "static final String TRANSLATED_PLURAL_STRING_PREFIX = \"msgstr[\";", "modifier": "static final", "type": "String", "declarator": "TRANSLATED_PLURAL_STRING_PREFIX = \"msgstr[\"", "var_name": "TRANSLATED_PLURAL_STRING_PREFIX"}, {"original_string": "static final String TRANSLATED_PLURAL_0_STRING_PREFIX = \"msgstr[0] \";", "modifier": "static final", "type": "String", "declarator": "TRANSLATED_PLURAL_0_STRING_PREFIX = \"msgstr[0] \"", "var_name": "TRANSLATED_PLURAL_0_STRING_PREFIX"}, {"original_string": "static final String TRANSLATED_PLURAL_1_STRING_PREFIX = \"msgstr[1] \";", "modifier": "static final", "type": "String", "declarator": "TRANSLATED_PLURAL_1_STRING_PREFIX = \"msgstr[1] \"", "var_name": "TRANSLATED_PLURAL_1_STRING_PREFIX"}, {"original_string": "static final String PLURAL_KEY_PREFIX = \"{n} \";", "modifier": "static final", "type": "String", "declarator": "PLURAL_KEY_PREFIX = \"{n} \"", "var_name": "PLURAL_KEY_PREFIX"}, {"original_string": "static final String HEADER = \"# Translations template for PROJECT.\\n\" + \"# Copyright (C) %s ORGANIZATION\\n\"\n            + \"# This file is distributed under the same license as the \" + \"PROJECT project.\\n\"\n            + \"# FIRST AUTHOR <EMAIL@ADDRESS>, %s.\\n\" + \"#\\n\" + \"#, fuzzy\\n\" + \"msgid \\\"\\\"\\n\" + \"msgstr \\\"\\\"\\n\"\n            + \"\\\"Project-Id-Version: PROJECT VERSION\\\\n\\\"\\n\" + \"\\\"Report-Msgid-Bugs-To: EMAIL@ADDRESS\\\\n\\\"\\n\"\n            + \"\\\"POT-Creation-Date: %s\\\\n\\\"\\n\" + \"\\\"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\\\\n\\\"\\n\"\n            + \"\\\"Last-Translator: FULL NAME <EMAIL@ADDRESS>\\\\n\\\"\\n\" + \"\\\"Language-Team: LANGUAGE <LL@li.org>\\\\n\\\"\\n\"\n            + \"\\\"MIME-Version: 1.0\\\\n\\\"\\n\" + \"\\\"Content-Type: text/plain; charset=%s\\\\n\\\"\\n\"\n            + \"\\\"Content-Transfer-Encoding: 8bit\\\\n\\\"\\n\" + \"\\\"Generated-By: Globalization Pipeline\\\\n\\\"\\n\";", "modifier": "static final", "type": "String", "declarator": "HEADER = \"# Translations template for PROJECT.\\n\" + \"# Copyright (C) %s ORGANIZATION\\n\"\n            + \"# This file is distributed under the same license as the \" + \"PROJECT project.\\n\"\n            + \"# FIRST AUTHOR <EMAIL@ADDRESS>, %s.\\n\" + \"#\\n\" + \"#, fuzzy\\n\" + \"msgid \\\"\\\"\\n\" + \"msgstr \\\"\\\"\\n\"\n            + \"\\\"Project-Id-Version: PROJECT VERSION\\\\n\\\"\\n\" + \"\\\"Report-Msgid-Bugs-To: EMAIL@ADDRESS\\\\n\\\"\\n\"\n            + \"\\\"POT-Creation-Date: %s\\\\n\\\"\\n\" + \"\\\"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\\\\n\\\"\\n\"\n            + \"\\\"Last-Translator: FULL NAME <EMAIL@ADDRESS>\\\\n\\\"\\n\" + \"\\\"Language-Team: LANGUAGE <LL@li.org>\\\\n\\\"\\n\"\n            + \"\\\"MIME-Version: 1.0\\\\n\\\"\\n\" + \"\\\"Content-Type: text/plain; charset=%s\\\\n\\\"\\n\"\n            + \"\\\"Content-Transfer-Encoding: 8bit\\\\n\\\"\\n\" + \"\\\"Generated-By: Globalization Pipeline\\\\n\\\"\\n\"", "var_name": "HEADER"}], "methods": [{"identifier": "parse", "parameters": "(InputStream inStream, FilterOptions options)", "modifiers": "@Override public", "return": "LanguageBundle", "signature": "LanguageBundle parse(InputStream inStream, FilterOptions options)", "full_signature": "@Override public LanguageBundle parse(InputStream inStream, FilterOptions options)", "class_method_signature": "POTResource.parse(InputStream inStream, FilterOptions options)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "modifiers": "@Override public", "return": "void", "signature": "void write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "full_signature": "@Override public void write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "class_method_signature": "POTResource.write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "modifiers": "@Override public", "return": "void", "signature": "void merge(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "full_signature": "@Override public void merge(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "class_method_signature": "POTResource.merge(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "testcase": false, "constructor": false}, {"identifier": "extractMessage", "parameters": "(String firstLine, BufferedReader reader)", "modifiers": "static", "return": "String", "signature": "String extractMessage(String firstLine, BufferedReader reader)", "full_signature": "static String extractMessage(String firstLine, BufferedReader reader)", "class_method_signature": "POTResource.extractMessage(String firstLine, BufferedReader reader)", "testcase": false, "constructor": false}, {"identifier": "extractMsgBetweenQuotes", "parameters": "(String line)", "modifiers": "static", "return": "String", "signature": "String extractMsgBetweenQuotes(String line)", "full_signature": "static String extractMsgBetweenQuotes(String line)", "class_method_signature": "POTResource.extractMsgBetweenQuotes(String line)", "testcase": false, "constructor": false}, {"identifier": "formatMessage", "parameters": "(String prefix, String message, BreakIterator brkItr)", "modifiers": "static", "return": "String", "signature": "String formatMessage(String prefix, String message, BreakIterator brkItr)", "full_signature": "static String formatMessage(String prefix, String message, BreakIterator brkItr)", "class_method_signature": "POTResource.formatMessage(String prefix, String message, BreakIterator brkItr)", "testcase": false, "constructor": false}, {"identifier": "getHeader", "parameters": "()", "modifiers": "static", "return": "String", "signature": "String getHeader()", "full_signature": "static String getHeader()", "class_method_signature": "POTResource.getHeader()", "testcase": false, "constructor": false}], "file": "gp-res-filter/src/main/java/com/ibm/g11n/pipeline/resfilter/impl/POTResource.java"}, "focal_method": {"identifier": "parse", "parameters": "(InputStream inStream, FilterOptions options)", "modifiers": "@Override public", "return": "LanguageBundle", "body": "@Override\n    public LanguageBundle parse(InputStream inStream, FilterOptions options)\n            throws IOException, ResourceFilterException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(inStream, CHAR_SET));\n        LanguageBundleBuilder bb = new LanguageBundleBuilder(true);\n        String line, value;\n        while ((line = reader.readLine()) != null) {\n            value = extractMessage(line, reader);\n            if (value == null || value.isEmpty()) {\n                continue;\n            }\n\n            if (line.startsWith(UNTRANSLATED_STRING_PREFIX) || line.startsWith(UNTRANSLATED_PLURAL_STRING_PREFIX)) {\n\n                bb.addResourceString(value, value);\n            }\n        }\n        return bb.build();\n    }", "signature": "LanguageBundle parse(InputStream inStream, FilterOptions options)", "full_signature": "@Override public LanguageBundle parse(InputStream inStream, FilterOptions options)", "class_method_signature": "POTResource.parse(InputStream inStream, FilterOptions options)", "testcase": false, "constructor": false, "invocations": ["readLine", "extractMessage", "isEmpty", "startsWith", "startsWith", "addResourceString", "build"]}, "repository": {"repo_id": 46134098, "url": "https://github.com/IBM-Cloud/gp-java-tools", "language": "Java", "is_fork": false, "fork_count": 16, "stargazer_count": 9, "size": 6216, "license": "licensed"}}