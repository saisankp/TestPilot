{"test_class": {"identifier": "ExtensibleFilterTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/ldaptive/filter/ExtensibleFilterTest.java"}, "test_case": {"identifier": "encode", "parameters": "(final ExtensibleFilter filter, final byte[] berValue)", "modifiers": "@Test(dataProvider = \"component\") public", "return": "void", "body": "@Test(dataProvider = \"component\")\n  public void encode(final ExtensibleFilter filter, final byte[] berValue)\n    throws Exception\n  {\n    Assert.assertEquals(filter.getEncoder().encode(), berValue);\n  }", "signature": "void encode(final ExtensibleFilter filter, final byte[] berValue)", "full_signature": "@Test(dataProvider = \"component\") public void encode(final ExtensibleFilter filter, final byte[] berValue)", "class_method_signature": "ExtensibleFilterTest.encode(final ExtensibleFilter filter, final byte[] berValue)", "testcase": true, "constructor": false, "invocations": ["assertEquals", "encode", "getEncoder"]}, "focal_class": {"identifier": "ExtensibleFilter", "superclass": "", "interfaces": "implements Filter", "fields": [{"original_string": "private static final int HASH_CODE_SEED = 10061;", "modifier": "private static final", "type": "int", "declarator": "HASH_CODE_SEED = 10061", "var_name": "HASH_CODE_SEED"}, {"original_string": "private final String matchingRuleID;", "modifier": "private final", "type": "String", "declarator": "matchingRuleID", "var_name": "matchingRuleID"}, {"original_string": "private final String attributeDesc;", "modifier": "private final", "type": "String", "declarator": "attributeDesc", "var_name": "attributeDesc"}, {"original_string": "private final byte[] assertionValue;", "modifier": "private final", "type": "byte[]", "declarator": "assertionValue", "var_name": "assertionValue"}, {"original_string": "private final boolean dnAttributes;", "modifier": "private final", "type": "boolean", "declarator": "dnAttributes", "var_name": "dnAttributes"}], "methods": [{"identifier": "ExtensibleFilter", "parameters": "(final String matchingRule, final String type, final String value)", "modifiers": "public", "return": "", "signature": " ExtensibleFilter(final String matchingRule, final String type, final String value)", "full_signature": "public  ExtensibleFilter(final String matchingRule, final String type, final String value)", "class_method_signature": "ExtensibleFilter.ExtensibleFilter(final String matchingRule, final String type, final String value)", "testcase": false, "constructor": true}, {"identifier": "ExtensibleFilter", "parameters": "(final String matchingRule, final String type, final String value, final boolean dnAttrs)", "modifiers": "public", "return": "", "signature": " ExtensibleFilter(final String matchingRule, final String type, final String value, final boolean dnAttrs)", "full_signature": "public  ExtensibleFilter(final String matchingRule, final String type, final String value, final boolean dnAttrs)", "class_method_signature": "ExtensibleFilter.ExtensibleFilter(final String matchingRule, final String type, final String value, final boolean dnAttrs)", "testcase": false, "constructor": true}, {"identifier": "ExtensibleFilter", "parameters": "(final String matchingRule, final String type, final byte[] value)", "modifiers": "public", "return": "", "signature": " ExtensibleFilter(final String matchingRule, final String type, final byte[] value)", "full_signature": "public  ExtensibleFilter(final String matchingRule, final String type, final byte[] value)", "class_method_signature": "ExtensibleFilter.ExtensibleFilter(final String matchingRule, final String type, final byte[] value)", "testcase": false, "constructor": true}, {"identifier": "ExtensibleFilter", "parameters": "(final String matchingRule, final String type, final byte[] value, final boolean dnAttrs)", "modifiers": "public", "return": "", "signature": " ExtensibleFilter(final String matchingRule, final String type, final byte[] value, final boolean dnAttrs)", "full_signature": "public  ExtensibleFilter(final String matchingRule, final String type, final byte[] value, final boolean dnAttrs)", "class_method_signature": "ExtensibleFilter.ExtensibleFilter(final String matchingRule, final String type, final byte[] value, final boolean dnAttrs)", "testcase": false, "constructor": true}, {"identifier": "getMatchingRuleID", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getMatchingRuleID()", "full_signature": "public String getMatchingRuleID()", "class_method_signature": "ExtensibleFilter.getMatchingRuleID()", "testcase": false, "constructor": false}, {"identifier": "getAttributeDesc", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAttributeDesc()", "full_signature": "public String getAttributeDesc()", "class_method_signature": "ExtensibleFilter.getAttributeDesc()", "testcase": false, "constructor": false}, {"identifier": "getAssertionValue", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getAssertionValue()", "full_signature": "public byte[] getAssertionValue()", "class_method_signature": "ExtensibleFilter.getAssertionValue()", "testcase": false, "constructor": false}, {"identifier": "getDnAttributes", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getDnAttributes()", "full_signature": "public boolean getDnAttributes()", "class_method_signature": "ExtensibleFilter.getDnAttributes()", "testcase": false, "constructor": false}, {"identifier": "getEncoder", "parameters": "()", "modifiers": "@Override public", "return": "DEREncoder", "signature": "DEREncoder getEncoder()", "full_signature": "@Override public DEREncoder getEncoder()", "class_method_signature": "ExtensibleFilter.getEncoder()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "ExtensibleFilter.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ExtensibleFilter.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ExtensibleFilter.toString()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/ldaptive/filter/ExtensibleFilter.java"}, "focal_method": {"identifier": "getEncoder", "parameters": "()", "modifiers": "@Override public", "return": "DEREncoder", "body": "@Override\n  public DEREncoder getEncoder()\n  {\n    // CheckStyle:MagicNumber OFF\n    final DEREncoder[] encoders = new DEREncoder[4];\n    encoders[0] = matchingRuleID != null ? new OctetStringType(new ContextDERTag(1, false), matchingRuleID) : null;\n    encoders[1] = attributeDesc != null ? new OctetStringType(new ContextDERTag(2, false), attributeDesc) : null;\n    encoders[2] = assertionValue != null ? new OctetStringType(new ContextDERTag(3, false), assertionValue) : null;\n    encoders[3] = dnAttributes ? new BooleanType(new ContextDERTag(4, false), true) : null;\n    // CheckStyle:MagicNumber ON\n    return new ConstructedDEREncoder(\n      new ContextDERTag(Filter.Type.EXTENSIBLE_MATCH.ordinal(), true),\n      Stream.of(encoders).filter(Objects::nonNull).toArray(DEREncoder[]::new));\n  }", "signature": "DEREncoder getEncoder()", "full_signature": "@Override public DEREncoder getEncoder()", "class_method_signature": "ExtensibleFilter.getEncoder()", "testcase": false, "constructor": false, "invocations": ["ordinal", "toArray", "filter", "of"]}, "repository": {"repo_id": 25927306, "url": "https://github.com/vt-middleware/ldaptive", "stars": 32, "created": "10/29/2014 3:27:31 PM +00:00", "updates": "2020-01-14T22:18:12+00:00", "fork": "False", "license": "licensed"}}