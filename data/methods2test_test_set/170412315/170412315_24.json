{"test_class": {"identifier": "ApiServletTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ApiServlet servlet = new ApiServlet();", "modifier": "private", "type": "ApiServlet", "declarator": "servlet = new ApiServlet()", "var_name": "servlet"}, {"original_string": "private HttpServletRequest requestMock = Mockito.mock(HttpServletRequest.class);", "modifier": "private", "type": "HttpServletRequest", "declarator": "requestMock = Mockito.mock(HttpServletRequest.class)", "var_name": "requestMock"}, {"original_string": "private HttpServletResponse responseMock = Mockito.mock(HttpServletResponse.class);", "modifier": "private", "type": "HttpServletResponse", "declarator": "responseMock = Mockito.mock(HttpServletResponse.class)", "var_name": "responseMock"}, {"original_string": "private StringWriter responseBody = new StringWriter();", "modifier": "private", "type": "StringWriter", "declarator": "responseBody = new StringWriter()", "var_name": "responseBody"}, {"original_string": "public JsonObject postedBody;", "modifier": "public", "type": "JsonObject", "declarator": "postedBody", "var_name": "postedBody"}, {"original_string": "public Optional<Boolean> admin;", "modifier": "public", "type": "Optional<Boolean>", "declarator": "admin", "var_name": "admin"}, {"original_string": "public int amount;", "modifier": "public", "type": "int", "declarator": "amount", "var_name": "amount"}, {"original_string": "private URL contextRoot;", "modifier": "private", "type": "URL", "declarator": "contextRoot", "var_name": "contextRoot"}, {"original_string": "private FakeServletResponse response = new FakeServletResponse();", "modifier": "private", "type": "FakeServletResponse", "declarator": "response = new FakeServletResponse()", "var_name": "response"}, {"original_string": "@Rule\n    public ExpectedLogEventsRule expectedLogEvents = new ExpectedLogEventsRule(Level.WARN);", "modifier": "@Rule\n    public", "type": "ExpectedLogEventsRule", "declarator": "expectedLogEvents = new ExpectedLogEventsRule(Level.WARN)", "var_name": "expectedLogEvents"}], "file": "action-controller/src/test/java/org/actioncontroller/servlet/ApiServletTest.java"}, "test_case": {"identifier": "shouldGive400OnParameterConversion", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldGive400OnParameterConversion() throws IOException {\n        FakeServletRequest request = new FakeServletRequest(\"GET\", contextRoot, \"/api\", \"/goodbye\");\n        request.setParameter(\"amount\", \"one\");\n\n        servlet.service(request, response);\n\n        assertThat(response.getStatus()).isEqualTo(400);\n        assertThat(response.getStatusMessage()).isEqualTo(\"Could not convert amount=one to int\");\n    }", "signature": "void shouldGive400OnParameterConversion()", "full_signature": "@Test public void shouldGive400OnParameterConversion()", "class_method_signature": "ApiServletTest.shouldGive400OnParameterConversion()", "testcase": true, "constructor": false, "invocations": ["setParameter", "service", "isEqualTo", "assertThat", "getStatus", "isEqualTo", "assertThat", "getStatusMessage"]}, "focal_class": {"identifier": "ApiServlet", "superclass": "extends HttpServlet", "interfaces": "implements UserContext", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ApiServlet.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ApiServlet.class)", "var_name": "logger"}, {"original_string": "private final List<Object> controllers = new ArrayList<>();", "modifier": "private final", "type": "List<Object>", "declarator": "controllers = new ArrayList<>()", "var_name": "controllers"}, {"original_string": "private final ApiControllerActionRouter actions = new ApiControllerActionRouter();", "modifier": "private final", "type": "ApiControllerActionRouter", "declarator": "actions = new ApiControllerActionRouter()", "var_name": "actions"}, {"original_string": "private final ApiControllerContext context = new ApiControllerContext();", "modifier": "private final", "type": "ApiControllerContext", "declarator": "context = new ApiControllerContext()", "var_name": "context"}, {"original_string": "private TimerRegistry timerRegistery = TimerRegistry.NULL;", "modifier": "private", "type": "TimerRegistry", "declarator": "timerRegistery = TimerRegistry.NULL", "var_name": "timerRegistery"}, {"original_string": "private ActionControllerConfigurationCompositeException controllerException;", "modifier": "private", "type": "ActionControllerConfigurationCompositeException", "declarator": "controllerException", "var_name": "controllerException"}], "methods": [{"identifier": "ApiServlet", "parameters": "()", "modifiers": "public", "return": "", "signature": " ApiServlet()", "full_signature": "public  ApiServlet()", "class_method_signature": "ApiServlet.ApiServlet()", "testcase": false, "constructor": true}, {"identifier": "ApiServlet", "parameters": "(Object controller)", "modifiers": "public", "return": "", "signature": " ApiServlet(Object controller)", "full_signature": "public  ApiServlet(Object controller)", "class_method_signature": "ApiServlet.ApiServlet(Object controller)", "testcase": false, "constructor": true}, {"identifier": "getContext", "parameters": "()", "modifiers": "public", "return": "ApiControllerContext", "signature": "ApiControllerContext getContext()", "full_signature": "public ApiControllerContext getContext()", "class_method_signature": "ApiServlet.getContext()", "testcase": false, "constructor": false}, {"identifier": "isUserLoggedIn", "parameters": "(ApiHttpExchange exchange)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isUserLoggedIn(ApiHttpExchange exchange)", "full_signature": "@Override public boolean isUserLoggedIn(ApiHttpExchange exchange)", "class_method_signature": "ApiServlet.isUserLoggedIn(ApiHttpExchange exchange)", "testcase": false, "constructor": false}, {"identifier": "isUserInRole", "parameters": "(ApiHttpExchange exchange, String role)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isUserInRole(ApiHttpExchange exchange, String role)", "full_signature": "@Override public boolean isUserInRole(ApiHttpExchange exchange, String role)", "class_method_signature": "ApiServlet.isUserInRole(ApiHttpExchange exchange, String role)", "testcase": false, "constructor": false}, {"identifier": "service", "parameters": "(HttpServletRequest req, HttpServletResponse resp)", "modifiers": "@Override protected", "return": "void", "signature": "void service(HttpServletRequest req, HttpServletResponse resp)", "full_signature": "@Override protected void service(HttpServletRequest req, HttpServletResponse resp)", "class_method_signature": "ApiServlet.service(HttpServletRequest req, HttpServletResponse resp)", "testcase": false, "constructor": false}, {"identifier": "invokeAction", "parameters": "(ApiHttpExchange httpExchange)", "modifiers": "private", "return": "void", "signature": "void invokeAction(ApiHttpExchange httpExchange)", "full_signature": "private void invokeAction(ApiHttpExchange httpExchange)", "class_method_signature": "ApiServlet.invokeAction(ApiHttpExchange httpExchange)", "testcase": false, "constructor": false}, {"identifier": "registerController", "parameters": "(Object controller)", "modifiers": "public", "return": "void", "signature": "void registerController(Object controller)", "full_signature": "public void registerController(Object controller)", "class_method_signature": "ApiServlet.registerController(Object controller)", "testcase": false, "constructor": false}, {"identifier": "registerControllers", "parameters": "(Object... controllers)", "modifiers": "public", "return": "void", "signature": "void registerControllers(Object... controllers)", "full_signature": "public void registerControllers(Object... controllers)", "class_method_signature": "ApiServlet.registerControllers(Object... controllers)", "testcase": false, "constructor": false}, {"identifier": "registerControllerList", "parameters": "(List<Object> controllers)", "modifiers": "public", "return": "void", "signature": "void registerControllerList(List<Object> controllers)", "full_signature": "public void registerControllerList(List<Object> controllers)", "class_method_signature": "ApiServlet.registerControllerList(List<Object> controllers)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(ServletConfig config)", "modifiers": "@Override public", "return": "void", "signature": "void init(ServletConfig config)", "full_signature": "@Override public void init(ServletConfig config)", "class_method_signature": "ApiServlet.init(ServletConfig config)", "testcase": false, "constructor": false}, {"identifier": "setupActions", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void setupActions()", "full_signature": "protected void setupActions()", "class_method_signature": "ApiServlet.setupActions()", "testcase": false, "constructor": false}, {"identifier": "registerMBeans", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void registerMBeans()", "full_signature": "public void registerMBeans()", "class_method_signature": "ApiServlet.registerMBeans()", "testcase": false, "constructor": false}, {"identifier": "registerMBeans", "parameters": "(MBeanServer mBeanServer)", "modifiers": "public", "return": "void", "signature": "void registerMBeans(MBeanServer mBeanServer)", "full_signature": "public void registerMBeans(MBeanServer mBeanServer)", "class_method_signature": "ApiServlet.registerMBeans(MBeanServer mBeanServer)", "testcase": false, "constructor": false}, {"identifier": "getTimerRegistry", "parameters": "()", "modifiers": "@Override public", "return": "TimerRegistry", "signature": "TimerRegistry getTimerRegistry()", "full_signature": "@Override public TimerRegistry getTimerRegistry()", "class_method_signature": "ApiServlet.getTimerRegistry()", "testcase": false, "constructor": false}, {"identifier": "setTimerRegistry", "parameters": "(TimerRegistry timerRegistry)", "modifiers": "public", "return": "void", "signature": "void setTimerRegistry(TimerRegistry timerRegistry)", "full_signature": "public void setTimerRegistry(TimerRegistry timerRegistry)", "class_method_signature": "ApiServlet.setTimerRegistry(TimerRegistry timerRegistry)", "testcase": false, "constructor": false}], "file": "action-controller/src/main/java/org/actioncontroller/servlet/ApiServlet.java"}, "focal_method": {"identifier": "service", "parameters": "(HttpServletRequest req, HttpServletResponse resp)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n    protected void service(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n        try (\n                MDC.MDCCloseable ignored = MDC.putCloseable(\"clientIp\", req.getRemoteAddr());\n                MDC.MDCCloseable ignored2 = MDC.putCloseable(\"requestPath\", req.getContextPath() + req.getServletPath() + req.getPathInfo())\n        ) {\n            controllerException.verifyNoExceptions();\n            invokeAction(new ServletHttpExchange(req, resp));\n        }\n    }", "signature": "void service(HttpServletRequest req, HttpServletResponse resp)", "full_signature": "@Override protected void service(HttpServletRequest req, HttpServletResponse resp)", "class_method_signature": "ApiServlet.service(HttpServletRequest req, HttpServletResponse resp)", "testcase": false, "constructor": false, "invocations": ["putCloseable", "getRemoteAddr", "putCloseable", "getContextPath", "getServletPath", "getPathInfo", "verifyNoExceptions", "invokeAction"]}, "repository": {"repo_id": 170412315, "url": "https://github.com/jhannes/action-controller", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 1800, "license": "licensed"}}