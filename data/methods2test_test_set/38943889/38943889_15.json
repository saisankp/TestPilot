{"test_class": {"identifier": "ImageObjectTest", "superclass": "", "interfaces": "", "fields": [], "file": "tlc-commons-project/tlc-io-cims/src/test/java/com/thelastcheck/io/cims/ImageObjectTest.java"}, "test_case": {"identifier": "getSegmentType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getSegmentType() throws Exception {\n        byte[] imageIntel = readTiffImage();\n        byte[] imageMotorola = readTiffImageMotorola();\n        ImageObject io = new ImageObject();\n        io.addSegment(1, imageIntel);\n        io.addSegment(2, imageMotorola);\n        assertEquals(\"should be TIFF\", ImageObject.TYPE_TIFF, io.getSegmentType(1));\n        assertEquals(\"should be TIFF\", ImageObject.TYPE_TIFF, io.getSegmentType(2));\n    }", "signature": "void getSegmentType()", "full_signature": "@Test public void getSegmentType()", "class_method_signature": "ImageObjectTest.getSegmentType()", "testcase": true, "constructor": false, "invocations": ["readTiffImage", "readTiffImageMotorola", "addSegment", "addSegment", "assertEquals", "getSegmentType", "assertEquals", "getSegmentType"]}, "focal_class": {"identifier": "ImageObject", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger log = LoggerFactory.getLogger(ImageObject.class);", "modifier": "private static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ImageObject.class)", "var_name": "log"}, {"original_string": "public static final int MAX_SEGMENTS = 15;", "modifier": "public static final", "type": "int", "declarator": "MAX_SEGMENTS = 15", "var_name": "MAX_SEGMENTS"}, {"original_string": "public static final String TYPE_JPEG = \"24\";", "modifier": "public static final", "type": "String", "declarator": "TYPE_JPEG = \"24\"", "var_name": "TYPE_JPEG"}, {"original_string": "public static final String TYPE_TIFF = \"00\";", "modifier": "public static final", "type": "String", "declarator": "TYPE_TIFF = \"00\"", "var_name": "TYPE_TIFF"}, {"original_string": "public final static int FRONTBW = 1;", "modifier": "public final static", "type": "int", "declarator": "FRONTBW = 1", "var_name": "FRONTBW"}, {"original_string": "public final static int FRONTGS = 2;", "modifier": "public final static", "type": "int", "declarator": "FRONTGS = 2", "var_name": "FRONTGS"}, {"original_string": "public final static int REARBW = 3;", "modifier": "public final static", "type": "int", "declarator": "REARBW = 3", "var_name": "REARBW"}, {"original_string": "public final static int REARGS = 4;", "modifier": "public final static", "type": "int", "declarator": "REARGS = 4", "var_name": "REARGS"}, {"original_string": "CimsObjectHeader cimsObjectHeader;", "modifier": "", "type": "CimsObjectHeader", "declarator": "cimsObjectHeader", "var_name": "cimsObjectHeader"}, {"original_string": "CimsCodedDataHeader cimsCodedDataHeader;", "modifier": "", "type": "CimsCodedDataHeader", "declarator": "cimsCodedDataHeader", "var_name": "cimsCodedDataHeader"}, {"original_string": "byte[][] segmentArray = new byte[MAX_SEGMENTS][];", "modifier": "", "type": "byte[][]", "declarator": "segmentArray = new byte[MAX_SEGMENTS][]", "var_name": "segmentArray"}], "methods": [{"identifier": "ImageObject", "parameters": "()", "modifiers": "public", "return": "", "signature": " ImageObject()", "full_signature": "public  ImageObject()", "class_method_signature": "ImageObject.ImageObject()", "testcase": false, "constructor": true}, {"identifier": "ImageObject", "parameters": "(CimsObjectHeader header)", "modifiers": "public", "return": "", "signature": " ImageObject(CimsObjectHeader header)", "full_signature": "public  ImageObject(CimsObjectHeader header)", "class_method_signature": "ImageObject.ImageObject(CimsObjectHeader header)", "testcase": false, "constructor": true}, {"identifier": "ImageObject", "parameters": "(ByteArray buffer)", "modifiers": "public", "return": "", "signature": " ImageObject(ByteArray buffer)", "full_signature": "public  ImageObject(ByteArray buffer)", "class_method_signature": "ImageObject.ImageObject(ByteArray buffer)", "testcase": false, "constructor": true}, {"identifier": "toByteArray", "parameters": "()", "modifiers": "public", "return": "ByteArray", "signature": "ByteArray toByteArray()", "full_signature": "public ByteArray toByteArray()", "class_method_signature": "ImageObject.toByteArray()", "testcase": false, "constructor": false}, {"identifier": "updateCimsObjectHeader", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateCimsObjectHeader()", "full_signature": "private void updateCimsObjectHeader()", "class_method_signature": "ImageObject.updateCimsObjectHeader()", "testcase": false, "constructor": false}, {"identifier": "getSegmentLength", "parameters": "(int segmentNumber)", "modifiers": "public", "return": "int", "signature": "int getSegmentLength(int segmentNumber)", "full_signature": "public int getSegmentLength(int segmentNumber)", "class_method_signature": "ImageObject.getSegmentLength(int segmentNumber)", "testcase": false, "constructor": false}, {"identifier": "getSegmentType", "parameters": "(int segmentNumber)", "modifiers": "public", "return": "String", "signature": "String getSegmentType(int segmentNumber)", "full_signature": "public String getSegmentType(int segmentNumber)", "class_method_signature": "ImageObject.getSegmentType(int segmentNumber)", "testcase": false, "constructor": false}, {"identifier": "isTypeTiff", "parameters": "(byte[] buffer)", "modifiers": "private", "return": "boolean", "signature": "boolean isTypeTiff(byte[] buffer)", "full_signature": "private boolean isTypeTiff(byte[] buffer)", "class_method_signature": "ImageObject.isTypeTiff(byte[] buffer)", "testcase": false, "constructor": false}, {"identifier": "getSegment", "parameters": "(int segmentNumber)", "modifiers": "public", "return": "byte[]", "signature": "byte[] getSegment(int segmentNumber)", "full_signature": "public byte[] getSegment(int segmentNumber)", "class_method_signature": "ImageObject.getSegment(int segmentNumber)", "testcase": false, "constructor": false}, {"identifier": "addSegment", "parameters": "(int segmentNumber, byte[] segmentBuffer)", "modifiers": "public", "return": "void", "signature": "void addSegment(int segmentNumber, byte[] segmentBuffer)", "full_signature": "public void addSegment(int segmentNumber, byte[] segmentBuffer)", "class_method_signature": "ImageObject.addSegment(int segmentNumber, byte[] segmentBuffer)", "testcase": false, "constructor": false}, {"identifier": "removeSegment", "parameters": "(int segmentNumber)", "modifiers": "public", "return": "void", "signature": "void removeSegment(int segmentNumber)", "full_signature": "public void removeSegment(int segmentNumber)", "class_method_signature": "ImageObject.removeSegment(int segmentNumber)", "testcase": false, "constructor": false}, {"identifier": "getLengthOfImageSegments", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int getLengthOfImageSegments()", "full_signature": "private int getLengthOfImageSegments()", "class_method_signature": "ImageObject.getLengthOfImageSegments()", "testcase": false, "constructor": false}, {"identifier": "getSegmentCount", "parameters": "()", "modifiers": "public", "return": "byte", "signature": "byte getSegmentCount()", "full_signature": "public byte getSegmentCount()", "class_method_signature": "ImageObject.getSegmentCount()", "testcase": false, "constructor": false}, {"identifier": "getCimsObjectHeader", "parameters": "()", "modifiers": "public", "return": "CimsObjectHeader", "signature": "CimsObjectHeader getCimsObjectHeader()", "full_signature": "public CimsObjectHeader getCimsObjectHeader()", "class_method_signature": "ImageObject.getCimsObjectHeader()", "testcase": false, "constructor": false}, {"identifier": "getCimsCodedDataHeader", "parameters": "()", "modifiers": "public", "return": "CimsCodedDataHeader", "signature": "CimsCodedDataHeader getCimsCodedDataHeader()", "full_signature": "public CimsCodedDataHeader getCimsCodedDataHeader()", "class_method_signature": "ImageObject.getCimsCodedDataHeader()", "testcase": false, "constructor": false}, {"identifier": "setCimsObjectHeader", "parameters": "(CimsObjectHeader header)", "modifiers": "public", "return": "void", "signature": "void setCimsObjectHeader(CimsObjectHeader header)", "full_signature": "public void setCimsObjectHeader(CimsObjectHeader header)", "class_method_signature": "ImageObject.setCimsObjectHeader(CimsObjectHeader header)", "testcase": false, "constructor": false}, {"identifier": "setCimsCodedDataHeader", "parameters": "(CimsCodedDataHeader segment0)", "modifiers": "public", "return": "void", "signature": "void setCimsCodedDataHeader(CimsCodedDataHeader segment0)", "full_signature": "public void setCimsCodedDataHeader(CimsCodedDataHeader segment0)", "class_method_signature": "ImageObject.setCimsCodedDataHeader(CimsCodedDataHeader segment0)", "testcase": false, "constructor": false}], "file": "tlc-commons-project/tlc-io-cims/src/main/java/com/thelastcheck/io/cims/ImageObject.java"}, "focal_method": {"identifier": "getSegmentType", "parameters": "(int segmentNumber)", "modifiers": "public", "return": "String", "body": "public String getSegmentType(int segmentNumber) {\n        if (log.isDebugEnabled())\n            log.debug(\"getSegmentType:\" + segmentNumber);\n\n        if (segmentNumber < 1 || segmentNumber > MAX_SEGMENTS) {\n            throw new IllegalArgumentException();\n        }\n\n        if (segmentArray[segmentNumber - 1] == null || segmentArray[segmentNumber - 1].length == 0)\n            return null;\n\n        byte[] buffer = segmentArray[segmentNumber - 1];\n        if (isTypeTiff(buffer)) {\n            return TYPE_TIFF;\n        } else {\n            return TYPE_JPEG;\n        }\n    }", "signature": "String getSegmentType(int segmentNumber)", "full_signature": "public String getSegmentType(int segmentNumber)", "class_method_signature": "ImageObject.getSegmentType(int segmentNumber)", "testcase": false, "constructor": false, "invocations": ["isDebugEnabled", "debug", "isTypeTiff"]}, "repository": {"repo_id": 38943889, "url": "https://github.com/TheLastCheck/tlc.open.java", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 5, "size": 1247, "license": "licensed"}}