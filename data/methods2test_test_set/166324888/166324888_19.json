{"test_class": {"identifier": "NodeSettingsPresenterTest", "superclass": "extends BaseTestCase", "interfaces": "", "fields": [{"original_string": "private NodeSettingsPresenter presenter;", "modifier": "private", "type": "NodeSettingsPresenter", "declarator": "presenter", "var_name": "presenter"}, {"original_string": "@Mock\n    private NodeSettingsContract.View  view;", "modifier": "@Mock\n    private", "type": "NodeSettingsContract.View", "declarator": "view", "var_name": "view"}], "file": "wallet/src/test/java/com/platon/aton/component/ui/presenter/NodeSettingsPresenterTest.java"}, "test_case": {"identifier": "insertNodeList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void insertNodeList(){\n        List<Node> nodeList = new ArrayList<>();\n        Node node =new Node();\n        node.setNodeAddress(\"https://192.168.12.22\");\n        node.setDefaultNode(false);\n        node.setMainNetworkNode(false);\n        node.setChecked(false);\n        node.setChainId(\"103\");\n        node.setFormatCorrect(false);\n        nodeList.add(node);\n\n        Node node2 =new Node();\n        node2.setNodeAddress(\"https://192.168.12.82\");\n        node2.setDefaultNode(true);\n        node2.setMainNetworkNode(true);\n        node2.setChecked(false);\n        node2.setChainId(\"103\");\n        node2.setFormatCorrect(false);\n        nodeList.add(node2);\n\n        Node node3 =new Node();\n        node3.setNodeAddress(\"https://192.168.12.182\");\n        node3.setDefaultNode(true);\n        node3.setMainNetworkNode(false);\n        node3.setChecked(false);\n        node3.setChainId(\"103\");\n        node3.setFormatCorrect(false);\n        nodeList.add(node3);\n\n        Flowable.fromIterable(nodeList)\n                .map(new Function<Node, NodeEntity>() {\n                    @Override\n                    public NodeEntity apply(Node node) throws Exception {\n                        return node.createNodeInfo();\n                    }\n                }).toList()\n                .map(new Function<List<NodeEntity>, Boolean>() {\n                    @Override\n                    public Boolean apply(List<NodeEntity> nodeEntities) throws Exception {\n                        return nodeEntities.size()> 0;\n                    }\n                }).subscribeOn(Schedulers.io())\n                .compose(new SchedulersTransformer())\n                .subscribe(new Consumer<Boolean>() {\n\n                    @Override\n                    public void accept(Boolean aBoolean) throws Exception {\n                        if (aBoolean.booleanValue()) {\n                            System.out.println(R.string.save_node_succeed);\n                        }\n                    }\n                }, new Consumer<Throwable>() {\n                    @Override\n                    public void accept(Throwable throwable) throws Exception {\n                        Log.e(\"NodesettingsPresenterTest\", throwable.getMessage());\n                    }\n                });\n\n    }", "signature": "void insertNodeList()", "full_signature": "@Test public void insertNodeList()", "class_method_signature": "NodeSettingsPresenterTest.insertNodeList()", "testcase": true, "constructor": false, "invocations": ["setNodeAddress", "setDefaultNode", "setMainNetworkNode", "setChecked", "setChainId", "setFormatCorrect", "add", "setNodeAddress", "setDefaultNode", "setMainNetworkNode", "setChecked", "setChainId", "setFormatCorrect", "add", "setNodeAddress", "setDefaultNode", "setMainNetworkNode", "setChecked", "setChainId", "setFormatCorrect", "add", "subscribe", "compose", "subscribeOn", "map", "toList", "map", "fromIterable", "createNodeInfo", "size", "io", "booleanValue", "println", "e", "getMessage"]}, "focal_class": {"identifier": "NodeSettingsPresenter", "superclass": "extends BasePresenter<NodeSettingsContract.View>", "interfaces": "implements NodeSettingsContract.Presenter", "fields": [{"original_string": "private final static String TAG = NodeSettingsPresenter.class.getSimpleName();", "modifier": "private final static", "type": "String", "declarator": "TAG = NodeSettingsPresenter.class.getSimpleName()", "var_name": "TAG"}, {"original_string": "private final static String IP_WITH_HTTP_PREFIX = \"^(http(s?)://)?((25[0-5]|2[0-4]\\\\d|((1\\\\d{2})|([1-9]?\\\\d)))\\\\.){3}(25[0-5]|2[0-4]\\\\d|((1\\\\d{2})|([1-9]?\\\\d)):\\\\d{3,})\";", "modifier": "private final static", "type": "String", "declarator": "IP_WITH_HTTP_PREFIX = \"^(http(s?)://)?((25[0-5]|2[0-4]\\\\d|((1\\\\d{2})|([1-9]?\\\\d)))\\\\.){3}(25[0-5]|2[0-4]\\\\d|((1\\\\d{2})|([1-9]?\\\\d)):\\\\d{3,})\"", "var_name": "IP_WITH_HTTP_PREFIX"}, {"original_string": "private final static String IP_WITHOUT_HTTP_PREFIX = \"((25[0-5]|2[0-4]\\\\d|((1\\\\d{2})|([1-9]?\\\\d)))\\\\.){3}(25[0-5]|2[0-4]\\\\d|((1\\\\d{2})|([1-9]?\\\\d)):\\\\d{3,})\";", "modifier": "private final static", "type": "String", "declarator": "IP_WITHOUT_HTTP_PREFIX = \"((25[0-5]|2[0-4]\\\\d|((1\\\\d{2})|([1-9]?\\\\d)))\\\\.){3}(25[0-5]|2[0-4]\\\\d|((1\\\\d{2})|([1-9]?\\\\d)):\\\\d{3,})\"", "var_name": "IP_WITHOUT_HTTP_PREFIX"}], "methods": [{"identifier": "fetchNodes", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void fetchNodes()", "full_signature": "@Override public void fetchNodes()", "class_method_signature": "NodeSettingsPresenter.fetchNodes()", "testcase": false, "constructor": false}, {"identifier": "updateNode", "parameters": "(Node nodeEntity, boolean isChecked)", "modifiers": "@Override public", "return": "void", "signature": "void updateNode(Node nodeEntity, boolean isChecked)", "full_signature": "@Override public void updateNode(Node nodeEntity, boolean isChecked)", "class_method_signature": "NodeSettingsPresenter.updateNode(Node nodeEntity, boolean isChecked)", "testcase": false, "constructor": false}, {"identifier": "checkWalletList", "parameters": "()", "modifiers": "private", "return": "Single<Boolean>", "signature": "Single<Boolean> checkWalletList()", "full_signature": "private Single<Boolean> checkWalletList()", "class_method_signature": "NodeSettingsPresenter.checkWalletList()", "testcase": false, "constructor": false}, {"identifier": "insertNodeList", "parameters": "(List<Node> nodeEntityList)", "modifiers": "private", "return": "void", "signature": "void insertNodeList(List<Node> nodeEntityList)", "full_signature": "private void insertNodeList(List<Node> nodeEntityList)", "class_method_signature": "NodeSettingsPresenter.insertNodeList(List<Node> nodeEntityList)", "testcase": false, "constructor": false}], "file": "wallet/src/main/java/com/platon/aton/component/ui/presenter/NodeSettingsPresenter.java"}, "focal_method": {"identifier": "insertNodeList", "parameters": "(List<Node> nodeEntityList)", "modifiers": "private", "return": "void", "body": "private void insertNodeList(List<Node> nodeEntityList) {\n\n        NodeManager.getInstance()\n                .insertNodeList(nodeEntityList)\n                .compose(new SchedulersTransformer())\n                .subscribe(new Consumer<Boolean>() {\n                    @Override\n                    public void accept(Boolean aBoolean) throws Exception {\n                        if (aBoolean.booleanValue()) {\n                            showLongToast(string(R.string.save_node_succeed));\n                        }\n                    }\n                }, new Consumer<Throwable>() {\n                    @Override\n                    public void accept(Throwable throwable) throws Exception {\n                        Log.e(TAG, throwable.getMessage());\n                    }\n                });\n    }", "signature": "void insertNodeList(List<Node> nodeEntityList)", "full_signature": "private void insertNodeList(List<Node> nodeEntityList)", "class_method_signature": "NodeSettingsPresenter.insertNodeList(List<Node> nodeEntityList)", "testcase": false, "constructor": false, "invocations": ["subscribe", "compose", "insertNodeList", "getInstance", "booleanValue", "showLongToast", "string", "e", "getMessage"]}, "repository": {"repo_id": 166324888, "url": "https://github.com/PlatONnetwork/ATON-Android", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 8, "size": 118901, "license": "licensed"}}