{"test_class": {"identifier": "AuthenticatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/ldaptive/auth/AuthenticatorTest.java"}, "test_case": {"identifier": "close", "parameters": "()", "modifiers": "@Test(groups = \"auth\") public", "return": "void", "body": "@Test(groups = \"auth\")\n  public void close()\n  {\n    final Authenticator auth = new Authenticator();\n    auth.setDnResolver(new SearchDnResolver(new MockConnectionFactory(new ConnectionConfig())));\n    auth.setAuthenticationHandler(\n      new SimpleBindAuthenticationHandler(new MockConnectionFactory(new ConnectionConfig())));\n    auth.setEntryResolver(new SearchEntryResolver(new MockConnectionFactory(new ConnectionConfig())));\n    auth.close();\n\n    Assert.assertFalse(\n      ((MockConnectionFactory)\n        ((SearchDnResolver) auth.getDnResolver()).getConnectionFactory()).isOpen());\n    Assert.assertFalse(\n      ((MockConnectionFactory)\n        ((SimpleBindAuthenticationHandler) auth.getAuthenticationHandler()).getConnectionFactory()).isOpen());\n    Assert.assertFalse(\n      ((MockConnectionFactory)\n        ((SearchEntryResolver) auth.getEntryResolver()).getConnectionFactory()).isOpen());\n  }", "signature": "void close()", "full_signature": "@Test(groups = \"auth\") public void close()", "class_method_signature": "AuthenticatorTest.close()", "testcase": true, "constructor": false, "invocations": ["setDnResolver", "setAuthenticationHandler", "setEntryResolver", "close", "assertFalse", "isOpen", "getConnectionFactory", "getDnResolver", "assertFalse", "isOpen", "getConnectionFactory", "getAuthenticationHandler", "assertFalse", "isOpen", "getConnectionFactory", "getEntryResolver"]}, "focal_class": {"identifier": "Authenticator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final EntryResolver NOOP_RESOLVER = new NoOpEntryResolver();", "modifier": "private static final", "type": "EntryResolver", "declarator": "NOOP_RESOLVER = new NoOpEntryResolver()", "var_name": "NOOP_RESOLVER"}, {"original_string": "protected final Logger logger = LoggerFactory.getLogger(getClass());", "modifier": "protected final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(getClass())", "var_name": "logger"}, {"original_string": "private DnResolver dnResolver;", "modifier": "private", "type": "DnResolver", "declarator": "dnResolver", "var_name": "dnResolver"}, {"original_string": "private AuthenticationHandler authenticationHandler;", "modifier": "private", "type": "AuthenticationHandler", "declarator": "authenticationHandler", "var_name": "authenticationHandler"}, {"original_string": "private EntryResolver entryResolver;", "modifier": "private", "type": "EntryResolver", "declarator": "entryResolver", "var_name": "entryResolver"}, {"original_string": "private String[] returnAttributes;", "modifier": "private", "type": "String[]", "declarator": "returnAttributes", "var_name": "returnAttributes"}, {"original_string": "private AuthenticationRequestHandler[] requestHandlers;", "modifier": "private", "type": "AuthenticationRequestHandler[]", "declarator": "requestHandlers", "var_name": "requestHandlers"}, {"original_string": "private AuthenticationResponseHandler[] responseHandlers;", "modifier": "private", "type": "AuthenticationResponseHandler[]", "declarator": "responseHandlers", "var_name": "responseHandlers"}, {"original_string": "private boolean resolveEntryOnFailure;", "modifier": "private", "type": "boolean", "declarator": "resolveEntryOnFailure", "var_name": "resolveEntryOnFailure"}], "methods": [{"identifier": "Authenticator", "parameters": "()", "modifiers": "public", "return": "", "signature": " Authenticator()", "full_signature": "public  Authenticator()", "class_method_signature": "Authenticator.Authenticator()", "testcase": false, "constructor": true}, {"identifier": "Authenticator", "parameters": "(final DnResolver resolver, final AuthenticationHandler handler)", "modifiers": "public", "return": "", "signature": " Authenticator(final DnResolver resolver, final AuthenticationHandler handler)", "full_signature": "public  Authenticator(final DnResolver resolver, final AuthenticationHandler handler)", "class_method_signature": "Authenticator.Authenticator(final DnResolver resolver, final AuthenticationHandler handler)", "testcase": false, "constructor": true}, {"identifier": "getDnResolver", "parameters": "()", "modifiers": "public", "return": "DnResolver", "signature": "DnResolver getDnResolver()", "full_signature": "public DnResolver getDnResolver()", "class_method_signature": "Authenticator.getDnResolver()", "testcase": false, "constructor": false}, {"identifier": "setDnResolver", "parameters": "(final DnResolver resolver)", "modifiers": "public", "return": "void", "signature": "void setDnResolver(final DnResolver resolver)", "full_signature": "public void setDnResolver(final DnResolver resolver)", "class_method_signature": "Authenticator.setDnResolver(final DnResolver resolver)", "testcase": false, "constructor": false}, {"identifier": "getAuthenticationHandler", "parameters": "()", "modifiers": "public", "return": "AuthenticationHandler", "signature": "AuthenticationHandler getAuthenticationHandler()", "full_signature": "public AuthenticationHandler getAuthenticationHandler()", "class_method_signature": "Authenticator.getAuthenticationHandler()", "testcase": false, "constructor": false}, {"identifier": "setAuthenticationHandler", "parameters": "(final AuthenticationHandler handler)", "modifiers": "public", "return": "void", "signature": "void setAuthenticationHandler(final AuthenticationHandler handler)", "full_signature": "public void setAuthenticationHandler(final AuthenticationHandler handler)", "class_method_signature": "Authenticator.setAuthenticationHandler(final AuthenticationHandler handler)", "testcase": false, "constructor": false}, {"identifier": "getEntryResolver", "parameters": "()", "modifiers": "public", "return": "EntryResolver", "signature": "EntryResolver getEntryResolver()", "full_signature": "public EntryResolver getEntryResolver()", "class_method_signature": "Authenticator.getEntryResolver()", "testcase": false, "constructor": false}, {"identifier": "setEntryResolver", "parameters": "(final EntryResolver resolver)", "modifiers": "public", "return": "void", "signature": "void setEntryResolver(final EntryResolver resolver)", "full_signature": "public void setEntryResolver(final EntryResolver resolver)", "class_method_signature": "Authenticator.setEntryResolver(final EntryResolver resolver)", "testcase": false, "constructor": false}, {"identifier": "getResolveEntryOnFailure", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getResolveEntryOnFailure()", "full_signature": "public boolean getResolveEntryOnFailure()", "class_method_signature": "Authenticator.getResolveEntryOnFailure()", "testcase": false, "constructor": false}, {"identifier": "setResolveEntryOnFailure", "parameters": "(final boolean b)", "modifiers": "public", "return": "void", "signature": "void setResolveEntryOnFailure(final boolean b)", "full_signature": "public void setResolveEntryOnFailure(final boolean b)", "class_method_signature": "Authenticator.setResolveEntryOnFailure(final boolean b)", "testcase": false, "constructor": false}, {"identifier": "getReturnAttributes", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] getReturnAttributes()", "full_signature": "public String[] getReturnAttributes()", "class_method_signature": "Authenticator.getReturnAttributes()", "testcase": false, "constructor": false}, {"identifier": "setReturnAttributes", "parameters": "(final String... attrs)", "modifiers": "public", "return": "void", "signature": "void setReturnAttributes(final String... attrs)", "full_signature": "public void setReturnAttributes(final String... attrs)", "class_method_signature": "Authenticator.setReturnAttributes(final String... attrs)", "testcase": false, "constructor": false}, {"identifier": "getRequestHandlers", "parameters": "()", "modifiers": "public", "return": "AuthenticationRequestHandler[]", "signature": "AuthenticationRequestHandler[] getRequestHandlers()", "full_signature": "public AuthenticationRequestHandler[] getRequestHandlers()", "class_method_signature": "Authenticator.getRequestHandlers()", "testcase": false, "constructor": false}, {"identifier": "setRequestHandlers", "parameters": "(final AuthenticationRequestHandler... handlers)", "modifiers": "public", "return": "void", "signature": "void setRequestHandlers(final AuthenticationRequestHandler... handlers)", "full_signature": "public void setRequestHandlers(final AuthenticationRequestHandler... handlers)", "class_method_signature": "Authenticator.setRequestHandlers(final AuthenticationRequestHandler... handlers)", "testcase": false, "constructor": false}, {"identifier": "getResponseHandlers", "parameters": "()", "modifiers": "public", "return": "AuthenticationResponseHandler[]", "signature": "AuthenticationResponseHandler[] getResponseHandlers()", "full_signature": "public AuthenticationResponseHandler[] getResponseHandlers()", "class_method_signature": "Authenticator.getResponseHandlers()", "testcase": false, "constructor": false}, {"identifier": "setResponseHandlers", "parameters": "(final AuthenticationResponseHandler... handlers)", "modifiers": "public", "return": "void", "signature": "void setResponseHandlers(final AuthenticationResponseHandler... handlers)", "full_signature": "public void setResponseHandlers(final AuthenticationResponseHandler... handlers)", "class_method_signature": "Authenticator.setResponseHandlers(final AuthenticationResponseHandler... handlers)", "testcase": false, "constructor": false}, {"identifier": "resolveDn", "parameters": "(final User user)", "modifiers": "public", "return": "String", "signature": "String resolveDn(final User user)", "full_signature": "public String resolveDn(final User user)", "class_method_signature": "Authenticator.resolveDn(final User user)", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "(final AuthenticationRequest request)", "modifiers": "public", "return": "AuthenticationResponse", "signature": "AuthenticationResponse authenticate(final AuthenticationRequest request)", "full_signature": "public AuthenticationResponse authenticate(final AuthenticationRequest request)", "class_method_signature": "Authenticator.authenticate(final AuthenticationRequest request)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "Authenticator.close()", "testcase": false, "constructor": false}, {"identifier": "closeConnectionFactoryManagers", "parameters": "(final ConnectionFactoryManager... managers)", "modifiers": "private", "return": "void", "signature": "void closeConnectionFactoryManagers(final ConnectionFactoryManager... managers)", "full_signature": "private void closeConnectionFactoryManagers(final ConnectionFactoryManager... managers)", "class_method_signature": "Authenticator.closeConnectionFactoryManagers(final ConnectionFactoryManager... managers)", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "(final String dn, final AuthenticationRequest request)", "modifiers": "protected", "return": "AuthenticationResponse", "signature": "AuthenticationResponse authenticate(final String dn, final AuthenticationRequest request)", "full_signature": "protected AuthenticationResponse authenticate(final String dn, final AuthenticationRequest request)", "class_method_signature": "Authenticator.authenticate(final String dn, final AuthenticationRequest request)", "testcase": false, "constructor": false}, {"identifier": "validateInput", "parameters": "(final String dn, final AuthenticationRequest request)", "modifiers": "protected", "return": "AuthenticationResponse", "signature": "AuthenticationResponse validateInput(final String dn, final AuthenticationRequest request)", "full_signature": "protected AuthenticationResponse validateInput(final String dn, final AuthenticationRequest request)", "class_method_signature": "Authenticator.validateInput(final String dn, final AuthenticationRequest request)", "testcase": false, "constructor": false}, {"identifier": "processRequest", "parameters": "(final String dn, final AuthenticationRequest request)", "modifiers": "protected", "return": "AuthenticationRequest", "signature": "AuthenticationRequest processRequest(final String dn, final AuthenticationRequest request)", "full_signature": "protected AuthenticationRequest processRequest(final String dn, final AuthenticationRequest request)", "class_method_signature": "Authenticator.processRequest(final String dn, final AuthenticationRequest request)", "testcase": false, "constructor": false}, {"identifier": "resolveEntry", "parameters": "(\n    final AuthenticationCriteria criteria,\n    final AuthenticationHandlerResponse response)", "modifiers": "protected", "return": "LdapEntry", "signature": "LdapEntry resolveEntry(\n    final AuthenticationCriteria criteria,\n    final AuthenticationHandlerResponse response)", "full_signature": "protected LdapEntry resolveEntry(\n    final AuthenticationCriteria criteria,\n    final AuthenticationHandlerResponse response)", "class_method_signature": "Authenticator.resolveEntry(\n    final AuthenticationCriteria criteria,\n    final AuthenticationHandlerResponse response)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Authenticator.toString()", "testcase": false, "constructor": false}, {"identifier": "builder", "parameters": "()", "modifiers": "public static", "return": "Builder", "signature": "Builder builder()", "full_signature": "public static Builder builder()", "class_method_signature": "Authenticator.builder()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/ldaptive/auth/Authenticator.java"}, "focal_method": {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void close()\n  {\n    if (dnResolver instanceof ConnectionFactoryManager) {\n      closeConnectionFactoryManagers((ConnectionFactoryManager) dnResolver);\n    } else if (dnResolver instanceof AggregateDnResolver) {\n      final Map<String, DnResolver> resolvers = ((AggregateDnResolver) dnResolver).getDnResolvers();\n      if (resolvers != null) {\n        closeConnectionFactoryManagers(resolvers.values().toArray(new ConnectionFactoryManager[0]));\n      }\n    }\n    if (authenticationHandler instanceof ConnectionFactoryManager) {\n      closeConnectionFactoryManagers((ConnectionFactoryManager) authenticationHandler);\n    } else if (authenticationHandler instanceof AggregateAuthenticationHandler) {\n      final Map<String, AuthenticationHandler> handlers =\n        ((AggregateAuthenticationHandler) authenticationHandler).getAuthenticationHandlers();\n      if (handlers != null) {\n        closeConnectionFactoryManagers(handlers.values().toArray(new ConnectionFactoryManager[0]));\n      }\n    }\n    if (entryResolver instanceof ConnectionFactoryManager) {\n      closeConnectionFactoryManagers((ConnectionFactoryManager) entryResolver);\n    } else if (entryResolver instanceof AggregateEntryResolver) {\n      final Map<String, EntryResolver> resolvers = ((AggregateEntryResolver) entryResolver).getEntryResolvers();\n      if (resolvers != null) {\n        closeConnectionFactoryManagers(resolvers.values().toArray(new ConnectionFactoryManager[0]));\n      }\n    }\n  }", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "Authenticator.close()", "testcase": false, "constructor": false, "invocations": ["closeConnectionFactoryManagers", "getDnResolvers", "closeConnectionFactoryManagers", "toArray", "values", "closeConnectionFactoryManagers", "getAuthenticationHandlers", "closeConnectionFactoryManagers", "toArray", "values", "closeConnectionFactoryManagers", "getEntryResolvers", "closeConnectionFactoryManagers", "toArray", "values"]}, "repository": {"repo_id": 25927306, "url": "https://github.com/vt-middleware/ldaptive", "stars": 32, "created": "10/29/2014 3:27:31 PM +00:00", "updates": "2020-01-14T22:18:12+00:00", "fork": "False", "license": "licensed"}}