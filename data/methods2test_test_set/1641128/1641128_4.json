{"test_class": {"identifier": "JanbaneryFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "AsyncHttpClient asyncHttpClient;", "modifier": "", "type": "AsyncHttpClient", "declarator": "asyncHttpClient", "var_name": "asyncHttpClient"}, {"original_string": "Configuration configuration;", "modifier": "", "type": "Configuration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "JanbaneryFactory janbaneryFactory;", "modifier": "", "type": "JanbaneryFactory", "declarator": "janbaneryFactory", "var_name": "janbaneryFactory"}, {"original_string": "Janbanery janbanery;", "modifier": "", "type": "Janbanery", "declarator": "janbanery", "var_name": "janbanery"}], "file": "janbanery-core/src/test/java/pl/project13/janbanery/core/JanbaneryFactoryTest.java"}, "test_case": {"identifier": "shouldConnectAndKeepUsingUserPassMode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldConnectAndKeepUsingUserPassMode() throws Exception {\n    // given\n    Properties properties = new Properties();\n    properties.load(new FileInputStream(VALID_CONF_FILE_LOCATION));\n    String user = (String) properties.get(\"username\");\n    String password = (String) properties.get(\"password\");\n\n    // when\n    janbanery = janbaneryFactory.connectAndKeepUsing(user, password);\n\n    // then, should use API key mode\n    AuthProvider usedAuthProvider = janbanery.getAuthMode();\n    assertThat(usedAuthProvider).isInstanceOf(UserPassAuthProvider.class);\n  }", "signature": "void shouldConnectAndKeepUsingUserPassMode()", "full_signature": "@Test public void shouldConnectAndKeepUsingUserPassMode()", "class_method_signature": "JanbaneryFactoryTest.shouldConnectAndKeepUsingUserPassMode()", "testcase": true, "constructor": false, "invocations": ["load", "get", "get", "connectAndKeepUsing", "getAuthMode", "isInstanceOf", "assertThat"]}, "focal_class": {"identifier": "JanbaneryFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Logger log = LoggerFactory.getLogger(getClass());", "modifier": "private", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(getClass())", "var_name": "log"}, {"original_string": "private AsyncHttpClient asyncHttpClient;", "modifier": "private", "type": "AsyncHttpClient", "declarator": "asyncHttpClient", "var_name": "asyncHttpClient"}, {"original_string": "private ReflectionBodyGenerator encodedBodyGenerator = new ReflectionBodyGenerator();", "modifier": "private", "type": "ReflectionBodyGenerator", "declarator": "encodedBodyGenerator = new ReflectionBodyGenerator()", "var_name": "encodedBodyGenerator"}, {"original_string": "private Gson gson = GsonFactory.create();", "modifier": "private", "type": "Gson", "declarator": "gson = GsonFactory.create()", "var_name": "gson"}, {"original_string": "private RestClient restClient;", "modifier": "private", "type": "RestClient", "declarator": "restClient", "var_name": "restClient"}], "methods": [{"identifier": "JanbaneryFactory", "parameters": "()", "modifiers": "public", "return": "", "signature": " JanbaneryFactory()", "full_signature": "public  JanbaneryFactory()", "class_method_signature": "JanbaneryFactory.JanbaneryFactory()", "testcase": false, "constructor": true}, {"identifier": "JanbaneryFactory", "parameters": "(AsyncHttpClient asyncHttpClient)", "modifiers": "public", "return": "", "signature": " JanbaneryFactory(AsyncHttpClient asyncHttpClient)", "full_signature": "public  JanbaneryFactory(AsyncHttpClient asyncHttpClient)", "class_method_signature": "JanbaneryFactory.JanbaneryFactory(AsyncHttpClient asyncHttpClient)", "testcase": false, "constructor": true}, {"identifier": "JanbaneryFactory", "parameters": "(RestClient restClient)", "modifiers": "public", "return": "", "signature": " JanbaneryFactory(RestClient restClient)", "full_signature": "public  JanbaneryFactory(RestClient restClient)", "class_method_signature": "JanbaneryFactory.JanbaneryFactory(RestClient restClient)", "testcase": false, "constructor": true}, {"identifier": "connectUsing", "parameters": "(Configuration configuration)", "modifiers": "public", "return": "JanbaneryToWorkspace", "signature": "JanbaneryToWorkspace connectUsing(Configuration configuration)", "full_signature": "public JanbaneryToWorkspace connectUsing(Configuration configuration)", "class_method_signature": "JanbaneryFactory.connectUsing(Configuration configuration)", "testcase": false, "constructor": false}, {"identifier": "connectUsing", "parameters": "(String apiKey)", "modifiers": "public", "return": "JanbaneryToWorkspace", "signature": "JanbaneryToWorkspace connectUsing(String apiKey)", "full_signature": "public JanbaneryToWorkspace connectUsing(String apiKey)", "class_method_signature": "JanbaneryFactory.connectUsing(String apiKey)", "testcase": false, "constructor": false}, {"identifier": "connectUsing", "parameters": "(String user, String password)", "modifiers": "public", "return": "JanbaneryToWorkspace", "signature": "JanbaneryToWorkspace connectUsing(String user, String password)", "full_signature": "public JanbaneryToWorkspace connectUsing(String user, String password)", "class_method_signature": "JanbaneryFactory.connectUsing(String user, String password)", "testcase": false, "constructor": false}, {"identifier": "getCurrentUserApiKey", "parameters": "(Janbanery janbanery)", "modifiers": "private", "return": "String", "signature": "String getCurrentUserApiKey(Janbanery janbanery)", "full_signature": "private String getCurrentUserApiKey(Janbanery janbanery)", "class_method_signature": "JanbaneryFactory.getCurrentUserApiKey(Janbanery janbanery)", "testcase": false, "constructor": false}, {"identifier": "connectAndKeepUsing", "parameters": "(String user, String password)", "modifiers": "public", "return": "Janbanery", "signature": "Janbanery connectAndKeepUsing(String user, String password)", "full_signature": "public Janbanery connectAndKeepUsing(String user, String password)", "class_method_signature": "JanbaneryFactory.connectAndKeepUsing(String user, String password)", "testcase": false, "constructor": false}, {"identifier": "getRestClient", "parameters": "(Configuration configuration)", "modifiers": "private", "return": "RestClient", "signature": "RestClient getRestClient(Configuration configuration)", "full_signature": "private RestClient getRestClient(Configuration configuration)", "class_method_signature": "JanbaneryFactory.getRestClient(Configuration configuration)", "testcase": false, "constructor": false}, {"identifier": "setAsyncHttpClient", "parameters": "(AsyncHttpClient asyncHttpClient)", "modifiers": "public", "return": "void", "signature": "void setAsyncHttpClient(AsyncHttpClient asyncHttpClient)", "full_signature": "public void setAsyncHttpClient(AsyncHttpClient asyncHttpClient)", "class_method_signature": "JanbaneryFactory.setAsyncHttpClient(AsyncHttpClient asyncHttpClient)", "testcase": false, "constructor": false}, {"identifier": "setEncodedBodyGenerator", "parameters": "(ReflectionBodyGenerator encodedBodyGenerator)", "modifiers": "public", "return": "void", "signature": "void setEncodedBodyGenerator(ReflectionBodyGenerator encodedBodyGenerator)", "full_signature": "public void setEncodedBodyGenerator(ReflectionBodyGenerator encodedBodyGenerator)", "class_method_signature": "JanbaneryFactory.setEncodedBodyGenerator(ReflectionBodyGenerator encodedBodyGenerator)", "testcase": false, "constructor": false}, {"identifier": "setGson", "parameters": "(Gson gson)", "modifiers": "public", "return": "void", "signature": "void setGson(Gson gson)", "full_signature": "public void setGson(Gson gson)", "class_method_signature": "JanbaneryFactory.setGson(Gson gson)", "testcase": false, "constructor": false}], "file": "janbanery-core/src/main/java/pl/project13/janbanery/core/JanbaneryFactory.java"}, "focal_method": {"identifier": "connectAndKeepUsing", "parameters": "(String user, String password)", "modifiers": "public", "return": "Janbanery", "body": "public Janbanery connectAndKeepUsing(String user, String password) throws ServerCommunicationException {\n    DefaultConfiguration conf = new DefaultConfiguration(user, password);\n    RestClient restClient = getRestClient(conf);\n    return new Janbanery(conf, restClient);\n  }", "signature": "Janbanery connectAndKeepUsing(String user, String password)", "full_signature": "public Janbanery connectAndKeepUsing(String user, String password)", "class_method_signature": "JanbaneryFactory.connectAndKeepUsing(String user, String password)", "testcase": false, "constructor": false, "invocations": ["getRestClient"]}, "repository": {"repo_id": 1641128, "url": "https://github.com/ktoso/janbanery", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 2250, "license": "licensed"}}