{"test_class": {"identifier": "ByteArrayComparatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ByteArrayComparator comparator = ByteArrayComparator.getInstance();", "modifier": "private static final", "type": "ByteArrayComparator", "declarator": "comparator = ByteArrayComparator.getInstance()", "var_name": "comparator"}], "file": "logstore/src/test/java/com/puresoltechnologies/ductiledb/logstore/utils/ByteArrayComparatorTest.java"}, "test_case": {"identifier": "testGreater", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGreater() {\n\tassertEquals(1, comparator.compare(new byte[] { 1 }, new byte[] {}));\n\tassertEquals(1, comparator.compare(new byte[] { 1, 1 }, new byte[] { 1 }));\n\tassertEquals(1, comparator.compare(new byte[] { 1, 1, 1 }, new byte[] { 1, 1 }));\n\n\tassertEquals(1, comparator.compare(new byte[] { 2 }, new byte[] { 1 }));\n\tassertEquals(1, comparator.compare(new byte[] { 1, 2 }, new byte[] { 1, 1 }));\n\tassertEquals(1, comparator.compare(new byte[] { 1, 1, 2 }, new byte[] { 1, 1, 1 }));\n    }", "signature": "void testGreater()", "full_signature": "@Test public void testGreater()", "class_method_signature": "ByteArrayComparatorTest.testGreater()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "compare", "assertEquals", "compare", "assertEquals", "compare", "assertEquals", "compare", "assertEquals", "compare", "assertEquals", "compare"]}, "focal_class": {"identifier": "ByteArrayComparator", "superclass": "", "interfaces": "implements Comparator<byte[]>", "fields": [{"original_string": "private static final ByteArrayComparator instance = new ByteArrayComparator();", "modifier": "private static final", "type": "ByteArrayComparator", "declarator": "instance = new ByteArrayComparator()", "var_name": "instance"}], "methods": [{"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "ByteArrayComparator", "signature": "ByteArrayComparator getInstance()", "full_signature": "public static ByteArrayComparator getInstance()", "class_method_signature": "ByteArrayComparator.getInstance()", "testcase": false, "constructor": false}, {"identifier": "compareArrays", "parameters": "(byte[] o1, byte[] o2)", "modifiers": "public static", "return": "int", "signature": "int compareArrays(byte[] o1, byte[] o2)", "full_signature": "public static int compareArrays(byte[] o1, byte[] o2)", "class_method_signature": "ByteArrayComparator.compareArrays(byte[] o1, byte[] o2)", "testcase": false, "constructor": false}, {"identifier": "ByteArrayComparator", "parameters": "()", "modifiers": "private", "return": "", "signature": " ByteArrayComparator()", "full_signature": "private  ByteArrayComparator()", "class_method_signature": "ByteArrayComparator.ByteArrayComparator()", "testcase": false, "constructor": true}, {"identifier": "compare", "parameters": "(byte[] o1, byte[] o2)", "modifiers": "@Override public", "return": "int", "signature": "int compare(byte[] o1, byte[] o2)", "full_signature": "@Override public int compare(byte[] o1, byte[] o2)", "class_method_signature": "ByteArrayComparator.compare(byte[] o1, byte[] o2)", "testcase": false, "constructor": false}], "file": "logstore/src/main/java/com/puresoltechnologies/ductiledb/logstore/utils/ByteArrayComparator.java"}, "focal_method": {"identifier": "compare", "parameters": "(byte[] o1, byte[] o2)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int compare(byte[] o1, byte[] o2) {\n\tfor (int i = 0; i < Math.min(o1.length, o2.length); i++) {\n\t    if (o1[i] != o2[i]) {\n\t\treturn (o1[i] & 0xFF) - (o2[i] & 0xFF);\n\t    }\n\t}\n\tif (o1.length == o2.length) {\n\t    return 0;\n\t} else if (o1.length < o2.length) {\n\t    return -1;\n\t} else {\n\t    return +1;\n\t}\n    }", "signature": "int compare(byte[] o1, byte[] o2)", "full_signature": "@Override public int compare(byte[] o1, byte[] o2)", "class_method_signature": "ByteArrayComparator.compare(byte[] o1, byte[] o2)", "testcase": false, "constructor": false, "invocations": ["min"]}, "repository": {"repo_id": 45098765, "url": "https://github.com/PureSolTechnologies/DuctileDB", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 14, "size": 12564, "license": "licensed"}}