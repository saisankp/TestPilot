{"test_class": {"identifier": "PerspectivePluginManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PERSPECTIVE_ID = \"Persp1\";", "modifier": "private static final", "type": "String", "declarator": "PERSPECTIVE_ID = \"Persp1\"", "var_name": "PERSPECTIVE_ID"}, {"original_string": "private static final NavTree TEST_NAV_TREE = new NavTreeBuilder()\n            .item(PERSPECTIVE_ID, \"name1\", \"description1\", true, perspective(PERSPECTIVE_ID))\n            .build();", "modifier": "private static final", "type": "NavTree", "declarator": "TEST_NAV_TREE = new NavTreeBuilder()\n            .item(PERSPECTIVE_ID, \"name1\", \"description1\", true, perspective(PERSPECTIVE_ID))\n            .build()", "var_name": "TEST_NAV_TREE"}, {"original_string": "@Mock\n    private NavigationManager navigationManager;", "modifier": "@Mock\n    private", "type": "NavigationManager", "declarator": "navigationManager", "var_name": "navigationManager"}, {"original_string": "@Mock\n    private ClientTypeRegistry clientTypeRegistry;", "modifier": "@Mock\n    private", "type": "ClientTypeRegistry", "declarator": "clientTypeRegistry", "var_name": "clientTypeRegistry"}, {"original_string": "@Mock\n    private PerspectivePluginServices pluginServices;", "modifier": "@Mock\n    private", "type": "PerspectivePluginServices", "declarator": "pluginServices", "var_name": "pluginServices"}, {"original_string": "@Mock\n    private Event<PerspectivePluginsChangedEvent> perspectiveChangedEvent;", "modifier": "@Mock\n    private", "type": "Event<PerspectivePluginsChangedEvent>", "declarator": "perspectiveChangedEvent", "var_name": "perspectiveChangedEvent"}, {"original_string": "private PluginAdded pluginAddedEvent;", "modifier": "private", "type": "PluginAdded", "declarator": "pluginAddedEvent", "var_name": "pluginAddedEvent"}, {"original_string": "private PluginSaved pluginSavedEvent;", "modifier": "private", "type": "PluginSaved", "declarator": "pluginSavedEvent", "var_name": "pluginSavedEvent"}, {"original_string": "private PluginRenamed pluginRenamedEvent;", "modifier": "private", "type": "PluginRenamed", "declarator": "pluginRenamedEvent", "var_name": "pluginRenamedEvent"}, {"original_string": "private PluginDeleted pluginDeletedEvent;", "modifier": "private", "type": "PluginDeleted", "declarator": "pluginDeletedEvent", "var_name": "pluginDeletedEvent"}, {"original_string": "private Plugin perspectivePlugin;", "modifier": "private", "type": "Plugin", "declarator": "perspectivePlugin", "var_name": "perspectivePlugin"}, {"original_string": "private Plugin perspectiveRenamedPlugin;", "modifier": "private", "type": "Plugin", "declarator": "perspectiveRenamedPlugin", "var_name": "perspectiveRenamedPlugin"}, {"original_string": "private PerspectivePluginManager testedPluginManager;", "modifier": "private", "type": "PerspectivePluginManager", "declarator": "testedPluginManager", "var_name": "testedPluginManager"}], "file": "dashbuilder-client/dashbuilder-navigation-client/src/test/java/org/dashbuilder/client/navigation/plugin/PerspectivePluginManagerTest.java"}, "test_case": {"identifier": "testPluginRenamed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPluginRenamed() {\n        NavTree tree = TEST_NAV_TREE.cloneTree();\n        List<NavItem> items = tree.searchItems(NavWorkbenchCtx.perspective(PERSPECTIVE_ID));\n\n        assertThat((items).get(0).getName()).isEqualTo(\"name1\");\n        assertThat((items).get(0).getContext()).contains(\"resourceId=\" + PERSPECTIVE_ID);\n\n        when(navigationManager.getNavTree()).thenReturn(tree);\n        testedPluginManager.onPlugInRenamed(pluginRenamedEvent);\n\n        assertThat(tree.searchItems(NavWorkbenchCtx.perspective(PERSPECTIVE_ID))).isEmpty();\n        assertThat(tree.searchItems(NavWorkbenchCtx.perspective(perspectiveRenamedPlugin.getName())).get(0).getContext()).contains(\"resourceId=\" + perspectiveRenamedPlugin.getName());\n\n        ArgumentCaptor<Command> argumentCaptor = ArgumentCaptor.forClass(Command.class);\n\n        verify(navigationManager, times(1)).saveNavTree(anyObject(), argumentCaptor.capture());\n        verify(perspectiveChangedEvent).fire(anyObject());\n    }", "signature": "void testPluginRenamed()", "full_signature": "@Test public void testPluginRenamed()", "class_method_signature": "PerspectivePluginManagerTest.testPluginRenamed()", "testcase": true, "constructor": false, "invocations": ["cloneTree", "searchItems", "perspective", "isEqualTo", "assertThat", "getName", "get", "contains", "assertThat", "getContext", "get", "thenReturn", "when", "getNavTree", "onPlugInRenamed", "isEmpty", "assertThat", "searchItems", "perspective", "contains", "assertThat", "getContext", "get", "searchItems", "perspective", "getName", "getName", "forClass", "saveNavTree", "verify", "times", "anyObject", "capture", "fire", "verify", "anyObject"]}, "focal_class": {"identifier": "PerspectivePluginManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ClientTypeRegistry clientTypeRegistry;", "modifier": "private", "type": "ClientTypeRegistry", "declarator": "clientTypeRegistry", "var_name": "clientTypeRegistry"}, {"original_string": "private LayoutGenerator layoutGenerator;", "modifier": "private", "type": "LayoutGenerator", "declarator": "layoutGenerator", "var_name": "layoutGenerator"}, {"original_string": "private NavigationManager navigationManager;", "modifier": "private", "type": "NavigationManager", "declarator": "navigationManager", "var_name": "navigationManager"}, {"original_string": "private Caller<PerspectivePluginServices> pluginServices;", "modifier": "private", "type": "Caller<PerspectivePluginServices>", "declarator": "pluginServices", "var_name": "pluginServices"}, {"original_string": "private Event<PerspectivePluginsChangedEvent> perspectivesChangedEvent;", "modifier": "private", "type": "Event<PerspectivePluginsChangedEvent>", "declarator": "perspectivesChangedEvent", "var_name": "perspectivesChangedEvent"}, {"original_string": "private Map<String, Plugin> pluginMap = new HashMap<>();", "modifier": "private", "type": "Map<String, Plugin>", "declarator": "pluginMap = new HashMap<>()", "var_name": "pluginMap"}, {"original_string": "private boolean pluginsLoaded = false;", "modifier": "private", "type": "boolean", "declarator": "pluginsLoaded = false", "var_name": "pluginsLoaded"}, {"original_string": "private Stack<NavGroup> navGroupStack = new Stack<>();", "modifier": "private", "type": "Stack<NavGroup>", "declarator": "navGroupStack = new Stack<>()", "var_name": "navGroupStack"}], "methods": [{"identifier": "PerspectivePluginManager", "parameters": "(ClientTypeRegistry clientTypeRegistry,\n                                    LayoutGenerator layoutGenerator,\n                                    NavigationManager navigationManager,\n                                    Caller<PerspectivePluginServices> pluginServices,\n                                    Event<PerspectivePluginsChangedEvent> perspectivesChangedEvent)", "modifiers": "@Inject public", "return": "", "signature": " PerspectivePluginManager(ClientTypeRegistry clientTypeRegistry,\n                                    LayoutGenerator layoutGenerator,\n                                    NavigationManager navigationManager,\n                                    Caller<PerspectivePluginServices> pluginServices,\n                                    Event<PerspectivePluginsChangedEvent> perspectivesChangedEvent)", "full_signature": "@Inject public  PerspectivePluginManager(ClientTypeRegistry clientTypeRegistry,\n                                    LayoutGenerator layoutGenerator,\n                                    NavigationManager navigationManager,\n                                    Caller<PerspectivePluginServices> pluginServices,\n                                    Event<PerspectivePluginsChangedEvent> perspectivesChangedEvent)", "class_method_signature": "PerspectivePluginManager.PerspectivePluginManager(ClientTypeRegistry clientTypeRegistry,\n                                    LayoutGenerator layoutGenerator,\n                                    NavigationManager navigationManager,\n                                    Caller<PerspectivePluginServices> pluginServices,\n                                    Event<PerspectivePluginsChangedEvent> perspectivesChangedEvent)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "@PostConstruct private", "return": "void", "signature": "void init()", "full_signature": "@PostConstruct private void init()", "class_method_signature": "PerspectivePluginManager.init()", "testcase": false, "constructor": false}, {"identifier": "getPerspectivePlugins", "parameters": "(ParameterizedCommand<Collection<Plugin>> callback)", "modifiers": "public", "return": "void", "signature": "void getPerspectivePlugins(ParameterizedCommand<Collection<Plugin>> callback)", "full_signature": "public void getPerspectivePlugins(ParameterizedCommand<Collection<Plugin>> callback)", "class_method_signature": "PerspectivePluginManager.getPerspectivePlugins(ParameterizedCommand<Collection<Plugin>> callback)", "testcase": false, "constructor": false}, {"identifier": "loadPlugins", "parameters": "(ParameterizedCommand<Collection<Plugin>> callback)", "modifiers": "private", "return": "void", "signature": "void loadPlugins(ParameterizedCommand<Collection<Plugin>> callback)", "full_signature": "private void loadPlugins(ParameterizedCommand<Collection<Plugin>> callback)", "class_method_signature": "PerspectivePluginManager.loadPlugins(ParameterizedCommand<Collection<Plugin>> callback)", "testcase": false, "constructor": false}, {"identifier": "isRuntimePerspective", "parameters": "(Plugin plugin)", "modifiers": "public", "return": "boolean", "signature": "boolean isRuntimePerspective(Plugin plugin)", "full_signature": "public boolean isRuntimePerspective(Plugin plugin)", "class_method_signature": "PerspectivePluginManager.isRuntimePerspective(Plugin plugin)", "testcase": false, "constructor": false}, {"identifier": "isRuntimePerspective", "parameters": "(NavItem navItem)", "modifiers": "public", "return": "boolean", "signature": "boolean isRuntimePerspective(NavItem navItem)", "full_signature": "public boolean isRuntimePerspective(NavItem navItem)", "class_method_signature": "PerspectivePluginManager.isRuntimePerspective(NavItem navItem)", "testcase": false, "constructor": false}, {"identifier": "isRuntimePerspective", "parameters": "(String perspectiveId)", "modifiers": "public", "return": "boolean", "signature": "boolean isRuntimePerspective(String perspectiveId)", "full_signature": "public boolean isRuntimePerspective(String perspectiveId)", "class_method_signature": "PerspectivePluginManager.isRuntimePerspective(String perspectiveId)", "testcase": false, "constructor": false}, {"identifier": "getRuntimePerspectiveId", "parameters": "(NavItem navItem)", "modifiers": "public", "return": "String", "signature": "String getRuntimePerspectiveId(NavItem navItem)", "full_signature": "public String getRuntimePerspectiveId(NavItem navItem)", "class_method_signature": "PerspectivePluginManager.getRuntimePerspectiveId(NavItem navItem)", "testcase": false, "constructor": false}, {"identifier": "existsPerspectivePlugin", "parameters": "(String perspectiveName)", "modifiers": "public", "return": "boolean", "signature": "boolean existsPerspectivePlugin(String perspectiveName)", "full_signature": "public boolean existsPerspectivePlugin(String perspectiveName)", "class_method_signature": "PerspectivePluginManager.existsPerspectivePlugin(String perspectiveName)", "testcase": false, "constructor": false}, {"identifier": "buildPerspectiveWidget", "parameters": "(String perspectiveName, ParameterizedCommand<IsWidget> afterBuild, ParameterizedCommand<LayoutRecursionIssue> onInfiniteRecursion)", "modifiers": "public", "return": "void", "signature": "void buildPerspectiveWidget(String perspectiveName, ParameterizedCommand<IsWidget> afterBuild, ParameterizedCommand<LayoutRecursionIssue> onInfiniteRecursion)", "full_signature": "public void buildPerspectiveWidget(String perspectiveName, ParameterizedCommand<IsWidget> afterBuild, ParameterizedCommand<LayoutRecursionIssue> onInfiniteRecursion)", "class_method_signature": "PerspectivePluginManager.buildPerspectiveWidget(String perspectiveName, ParameterizedCommand<IsWidget> afterBuild, ParameterizedCommand<LayoutRecursionIssue> onInfiniteRecursion)", "testcase": false, "constructor": false}, {"identifier": "getLayoutTemplateInfo", "parameters": "(String perspectiveName, ParameterizedCommand<LayoutTemplateInfo> callback)", "modifiers": "public", "return": "void", "signature": "void getLayoutTemplateInfo(String perspectiveName, ParameterizedCommand<LayoutTemplateInfo> callback)", "full_signature": "public void getLayoutTemplateInfo(String perspectiveName, ParameterizedCommand<LayoutTemplateInfo> callback)", "class_method_signature": "PerspectivePluginManager.getLayoutTemplateInfo(String perspectiveName, ParameterizedCommand<LayoutTemplateInfo> callback)", "testcase": false, "constructor": false}, {"identifier": "getLayoutTemplateInfo", "parameters": "(LayoutTemplate layoutTemplate, ParameterizedCommand<LayoutTemplateInfo> callback)", "modifiers": "public", "return": "void", "signature": "void getLayoutTemplateInfo(LayoutTemplate layoutTemplate, ParameterizedCommand<LayoutTemplateInfo> callback)", "full_signature": "public void getLayoutTemplateInfo(LayoutTemplate layoutTemplate, ParameterizedCommand<LayoutTemplateInfo> callback)", "class_method_signature": "PerspectivePluginManager.getLayoutTemplateInfo(LayoutTemplate layoutTemplate, ParameterizedCommand<LayoutTemplateInfo> callback)", "testcase": false, "constructor": false}, {"identifier": "buildPerspectiveWidget", "parameters": "(String perspectiveName, LayoutTemplateContext layoutCtx, ParameterizedCommand<IsWidget> afterBuild, ParameterizedCommand<LayoutRecursionIssue> onInfiniteRecursion)", "modifiers": "public", "return": "void", "signature": "void buildPerspectiveWidget(String perspectiveName, LayoutTemplateContext layoutCtx, ParameterizedCommand<IsWidget> afterBuild, ParameterizedCommand<LayoutRecursionIssue> onInfiniteRecursion)", "full_signature": "public void buildPerspectiveWidget(String perspectiveName, LayoutTemplateContext layoutCtx, ParameterizedCommand<IsWidget> afterBuild, ParameterizedCommand<LayoutRecursionIssue> onInfiniteRecursion)", "class_method_signature": "PerspectivePluginManager.buildPerspectiveWidget(String perspectiveName, LayoutTemplateContext layoutCtx, ParameterizedCommand<IsWidget> afterBuild, ParameterizedCommand<LayoutRecursionIssue> onInfiniteRecursion)", "testcase": false, "constructor": false}, {"identifier": "getLastBuildPerspectiveNavGroup", "parameters": "()", "modifiers": "public", "return": "NavGroup", "signature": "NavGroup getLastBuildPerspectiveNavGroup()", "full_signature": "public NavGroup getLastBuildPerspectiveNavGroup()", "class_method_signature": "PerspectivePluginManager.getLastBuildPerspectiveNavGroup()", "testcase": false, "constructor": false}, {"identifier": "onPlugInAdded", "parameters": "(@Observes final PluginAdded event)", "modifiers": "public", "return": "void", "signature": "void onPlugInAdded(@Observes final PluginAdded event)", "full_signature": "public void onPlugInAdded(@Observes final PluginAdded event)", "class_method_signature": "PerspectivePluginManager.onPlugInAdded(@Observes final PluginAdded event)", "testcase": false, "constructor": false}, {"identifier": "onPlugInSaved", "parameters": "(@Observes final PluginSaved event)", "modifiers": "public", "return": "void", "signature": "void onPlugInSaved(@Observes final PluginSaved event)", "full_signature": "public void onPlugInSaved(@Observes final PluginSaved event)", "class_method_signature": "PerspectivePluginManager.onPlugInSaved(@Observes final PluginSaved event)", "testcase": false, "constructor": false}, {"identifier": "onPlugInRenamed", "parameters": "(@Observes final PluginRenamed event)", "modifiers": "public", "return": "void", "signature": "void onPlugInRenamed(@Observes final PluginRenamed event)", "full_signature": "public void onPlugInRenamed(@Observes final PluginRenamed event)", "class_method_signature": "PerspectivePluginManager.onPlugInRenamed(@Observes final PluginRenamed event)", "testcase": false, "constructor": false}, {"identifier": "onPlugInDeleted", "parameters": "(@Observes final PluginDeleted event)", "modifiers": "public", "return": "void", "signature": "void onPlugInDeleted(@Observes final PluginDeleted event)", "full_signature": "public void onPlugInDeleted(@Observes final PluginDeleted event)", "class_method_signature": "PerspectivePluginManager.onPlugInDeleted(@Observes final PluginDeleted event)", "testcase": false, "constructor": false}], "file": "dashbuilder-client/dashbuilder-navigation-client/src/main/java/org/dashbuilder/client/navigation/plugin/PerspectivePluginManager.java"}, "focal_method": {"identifier": "onPlugInRenamed", "parameters": "(@Observes final PluginRenamed event)", "modifiers": "public", "return": "void", "body": "public void onPlugInRenamed(@Observes final PluginRenamed event) {\n        Plugin plugin = event.getPlugin();\n        if (isRuntimePerspective(plugin)) {\n            pluginMap.remove(event.getOldPluginName());\n            pluginMap.put(plugin.getName(), plugin);\n\n            NavWorkbenchCtx ctx = NavWorkbenchCtx.perspective(event.getOldPluginName());\n            NavWorkbenchCtx newCtx = NavWorkbenchCtx.perspective(event.getPlugin().getName());\n            List<NavItem> itemsToRename = navigationManager.getNavTree().searchItems(ctx);\n            for (NavItem navItem : itemsToRename) {\n                navItem.setContext(newCtx.toString());\n            }\n            if (!itemsToRename.isEmpty()) {\n                navigationManager.saveNavTree(navigationManager.getNavTree(), () -> {});\n            }\n            perspectivesChangedEvent.fire(new PerspectivePluginsChangedEvent());\n        }\n    }", "signature": "void onPlugInRenamed(@Observes final PluginRenamed event)", "full_signature": "public void onPlugInRenamed(@Observes final PluginRenamed event)", "class_method_signature": "PerspectivePluginManager.onPlugInRenamed(@Observes final PluginRenamed event)", "testcase": false, "constructor": false, "invocations": ["getPlugin", "isRuntimePerspective", "remove", "getOldPluginName", "put", "getName", "perspective", "getOldPluginName", "perspective", "getName", "getPlugin", "searchItems", "getNavTree", "setContext", "toString", "isEmpty", "saveNavTree", "getNavTree", "fire"]}, "repository": {"repo_id": 17898911, "url": "https://github.com/dashbuilder/dashbuilder", "language": "Java", "is_fork": false, "fork_count": 119, "stargazer_count": 160, "size": 10456, "license": "licensed"}}