{"test_class": {"identifier": "TotalCancelledTendersExcelControllerTest", "superclass": "extends AbstractExcelControllerTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private TotalCancelledTendersExcelController totalCancelledTendersExcelController;", "modifier": "@Autowired\n    private", "type": "TotalCancelledTendersExcelController", "declarator": "totalCancelledTendersExcelController", "var_name": "totalCancelledTendersExcelController"}], "file": "web/src/test/java/org/devgateway/ocds/web/rest/controller/excelchart/TotalCancelledTendersExcelControllerTest.java"}, "test_case": {"identifier": "cancelledFundingExcelChart", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void cancelledFundingExcelChart() throws Exception {\n        LangYearFilterPagingRequest filter = getLangYearFilterMockRequest();\n        totalCancelledTendersExcelController.cancelledFundingExcelChart(\n                filter,\n                mockHttpServletResponse);\n\n        final byte[] responseOutput = mockHttpServletResponse.getContentAsByteArray();\n        final Workbook workbook = new XSSFWorkbook(new ByteArrayInputStream(responseOutput));\n        Assert.assertNotNull(workbook);\n\n        final Sheet sheet = workbook.getSheet(ChartType.area.toString());\n        Assert.assertNotNull(\"check chart type, sheet name should be the same as the type\", sheet);\n\n        final XSSFDrawing drawing = (XSSFDrawing) sheet.getDrawingPatriarch();\n        final List<XSSFChart> charts =  drawing.getCharts();\n        Assert.assertEquals(\"number of charts\", 1, charts.size());\n\n        final XSSFChart chart = charts.get(0);\n        Assert.assertEquals(\"chart title\",\n                translationService.getValue(filter.getLanguage(),\"charts:cancelledAmounts:title\"),\n                chart.getTitle().getString());\n\n        final List<? extends XSSFChartAxis> axis = chart.getAxis();\n        Assert.assertEquals(\"number of axis\", 2, axis.size());\n\n        final CTChart ctChart = chart.getCTChart();\n        Assert.assertEquals(\"Check if we have 1 area chart\", 1, ctChart.getPlotArea().getAreaChartArray().length);\n    }", "signature": "void cancelledFundingExcelChart()", "full_signature": "@Test public void cancelledFundingExcelChart()", "class_method_signature": "TotalCancelledTendersExcelControllerTest.cancelledFundingExcelChart()", "testcase": true, "constructor": false, "invocations": ["getLangYearFilterMockRequest", "cancelledFundingExcelChart", "getContentAsByteArray", "assertNotNull", "getSheet", "toString", "assertNotNull", "getDrawingPatriarch", "getCharts", "assertEquals", "size", "get", "assertEquals", "getValue", "getLanguage", "getString", "getTitle", "getAxis", "assertEquals", "size", "getCTChart", "assertEquals", "getAreaChartArray", "getPlotArea"]}, "focal_class": {"identifier": "TotalCancelledTendersExcelController", "superclass": "extends ExcelChartOCDSController", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ExcelChartGenerator excelChartGenerator;", "modifier": "@Autowired\n    private", "type": "ExcelChartGenerator", "declarator": "excelChartGenerator", "var_name": "excelChartGenerator"}, {"original_string": "@Autowired\n    private ExcelChartHelper excelChartHelper;", "modifier": "@Autowired\n    private", "type": "ExcelChartHelper", "declarator": "excelChartHelper", "var_name": "excelChartHelper"}, {"original_string": "@Autowired\n    private TotalCancelledTendersByYearController totalCancelledTendersByYearController;", "modifier": "@Autowired\n    private", "type": "TotalCancelledTendersByYearController", "declarator": "totalCancelledTendersByYearController", "var_name": "totalCancelledTendersByYearController"}], "methods": [{"identifier": "cancelledFundingExcelChart", "parameters": "(@ModelAttribute @Valid final LangYearFilterPagingRequest filter,\n                                           final HttpServletResponse response)", "modifiers": "@ApiOperation(value = \"Exports *Cancelled funding* dashboard in Excel format.\") @RequestMapping(value = \"/api/ocds/cancelledFundingExcelChart\", method = {RequestMethod.GET, RequestMethod.POST}) public", "return": "void", "signature": "void cancelledFundingExcelChart(@ModelAttribute @Valid final LangYearFilterPagingRequest filter,\n                                           final HttpServletResponse response)", "full_signature": "@ApiOperation(value = \"Exports *Cancelled funding* dashboard in Excel format.\") @RequestMapping(value = \"/api/ocds/cancelledFundingExcelChart\", method = {RequestMethod.GET, RequestMethod.POST}) public void cancelledFundingExcelChart(@ModelAttribute @Valid final LangYearFilterPagingRequest filter,\n                                           final HttpServletResponse response)", "class_method_signature": "TotalCancelledTendersExcelController.cancelledFundingExcelChart(@ModelAttribute @Valid final LangYearFilterPagingRequest filter,\n                                           final HttpServletResponse response)", "testcase": false, "constructor": false}], "file": "web/src/main/java/org/devgateway/ocds/web/rest/controller/excelchart/TotalCancelledTendersExcelController.java"}, "focal_method": {"identifier": "cancelledFundingExcelChart", "parameters": "(@ModelAttribute @Valid final LangYearFilterPagingRequest filter,\n                                           final HttpServletResponse response)", "modifiers": "@ApiOperation(value = \"Exports *Cancelled funding* dashboard in Excel format.\") @RequestMapping(value = \"/api/ocds/cancelledFundingExcelChart\", method = {RequestMethod.GET, RequestMethod.POST}) public", "return": "void", "body": "@ApiOperation(value = \"Exports *Cancelled funding* dashboard in Excel format.\")\n    @RequestMapping(value = \"/api/ocds/cancelledFundingExcelChart\", method = {RequestMethod.GET, RequestMethod.POST})\n    public void cancelledFundingExcelChart(@ModelAttribute @Valid final LangYearFilterPagingRequest filter,\n                                           final HttpServletResponse response) throws IOException {\n        final String chartTitle = translationService.getValue(filter.getLanguage(),\n                \"charts:cancelledAmounts:title\");\n\n        // fetch the data that will be displayed in the chart\n        final List<Document> totalCancelledTenders = totalCancelledTendersByYearController\n                .totalCancelledTendersByYear(filter);\n\n        final List<?> categories = excelChartHelper.getCategoriesFromDBObject(getExportYearMonthXAxis(filter),\n                totalCancelledTenders);\n        final List<List<? extends Number>> values = new ArrayList<>();\n\n        final List<Number> cancelledAmount = excelChartHelper.getValuesFromDBObject(totalCancelledTenders, categories,\n                getExportYearMonthXAxis(filter),\n                TotalCancelledTendersByYearController.Keys.TOTAL_CANCELLED_TENDERS_AMOUNT);\n        if (!cancelledAmount.isEmpty()) {\n            values.add(cancelledAmount);\n        }\n\n        // check if we have anything to display before setting the *seriesTitle*.\n        final List<String> seriesTitle;\n        if (!values.isEmpty()) {\n            seriesTitle = Arrays.asList(\n                    translationService.getValue(filter.getLanguage(), \"charts:cancelledAmounts:yAxisName\"));\n        } else {\n            seriesTitle = new ArrayList<>();\n        }\n\n        response.setContentType(\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\");\n        response.setHeader(\"Content-Disposition\", \"attachment; filename=\" + chartTitle + \".xlsx\");\n        response.getOutputStream().write(\n                excelChartGenerator.getExcelChart(\n                        ChartType.area,\n                        chartTitle,\n                        seriesTitle,\n                        categories, values));\n    }", "signature": "void cancelledFundingExcelChart(@ModelAttribute @Valid final LangYearFilterPagingRequest filter,\n                                           final HttpServletResponse response)", "full_signature": "@ApiOperation(value = \"Exports *Cancelled funding* dashboard in Excel format.\") @RequestMapping(value = \"/api/ocds/cancelledFundingExcelChart\", method = {RequestMethod.GET, RequestMethod.POST}) public void cancelledFundingExcelChart(@ModelAttribute @Valid final LangYearFilterPagingRequest filter,\n                                           final HttpServletResponse response)", "class_method_signature": "TotalCancelledTendersExcelController.cancelledFundingExcelChart(@ModelAttribute @Valid final LangYearFilterPagingRequest filter,\n                                           final HttpServletResponse response)", "testcase": false, "constructor": false, "invocations": ["getValue", "getLanguage", "totalCancelledTendersByYear", "getCategoriesFromDBObject", "getExportYearMonthXAxis", "getValuesFromDBObject", "getExportYearMonthXAxis", "isEmpty", "add", "isEmpty", "asList", "getValue", "getLanguage", "setContentType", "setHeader", "write", "getOutputStream", "getExcelChart"]}, "repository": {"repo_id": 59118773, "url": "https://github.com/devgateway/oc-explorer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 9004, "license": "licensed"}}