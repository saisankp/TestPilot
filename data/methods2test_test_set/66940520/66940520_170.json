{"test_class": {"identifier": "ProgramInstanceSupplierTest", "superclass": "extends AbstractSupplierTest<ProgramInstance>", "interfaces": "", "fields": [{"original_string": "private ProgramInstanceSupplier subject;", "modifier": "private", "type": "ProgramInstanceSupplier", "declarator": "subject", "var_name": "subject"}, {"original_string": "@Mock\n    private ProgramSupplier programSupplier;", "modifier": "@Mock\n    private", "type": "ProgramSupplier", "declarator": "programSupplier", "var_name": "programSupplier"}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/ProgramInstanceSupplierTest.java"}, "test_case": {"identifier": "handleNullEvents", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void handleNullEvents()\n    {\n        assertNotNull( subject.get( ImportOptions.getDefaultImportOptions(), new HashMap<>(), null ) );\n    }", "signature": "void handleNullEvents()", "full_signature": "@Test public void handleNullEvents()", "class_method_signature": "ProgramInstanceSupplierTest.handleNullEvents()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "get", "getDefaultImportOptions"]}, "focal_class": {"identifier": "ProgramInstanceSupplier", "superclass": "extends AbstractSupplier<Map<String, ProgramInstance>>", "interfaces": "", "fields": [{"original_string": "private final ProgramSupplier programSupplier;", "modifier": "private final", "type": "ProgramSupplier", "declarator": "programSupplier", "var_name": "programSupplier"}], "methods": [{"identifier": "ProgramInstanceSupplier", "parameters": "( NamedParameterJdbcTemplate jdbcTemplate, ProgramSupplier programSupplier )", "modifiers": "public", "return": "", "signature": " ProgramInstanceSupplier( NamedParameterJdbcTemplate jdbcTemplate, ProgramSupplier programSupplier )", "full_signature": "public  ProgramInstanceSupplier( NamedParameterJdbcTemplate jdbcTemplate, ProgramSupplier programSupplier )", "class_method_signature": "ProgramInstanceSupplier.ProgramInstanceSupplier( NamedParameterJdbcTemplate jdbcTemplate, ProgramSupplier programSupplier )", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "( ImportOptions importOptions,\n        Map<String, Pair<TrackedEntityInstance, Boolean>> teiMap, List<Event> events )", "modifiers": "public", "return": "Map<String, ProgramInstance>", "signature": "Map<String, ProgramInstance> get( ImportOptions importOptions,\n        Map<String, Pair<TrackedEntityInstance, Boolean>> teiMap, List<Event> events )", "full_signature": "public Map<String, ProgramInstance> get( ImportOptions importOptions,\n        Map<String, Pair<TrackedEntityInstance, Boolean>> teiMap, List<Event> events )", "class_method_signature": "ProgramInstanceSupplier.get( ImportOptions importOptions,\n        Map<String, Pair<TrackedEntityInstance, Boolean>> teiMap, List<Event> events )", "testcase": false, "constructor": false}, {"identifier": "mapEventsToProgramInstanceByTei", "parameters": "( ImportOptions importOptions, List<Event> events,\n        Map<String, ProgramInstance> programInstances, Map<String, Pair<TrackedEntityInstance, Boolean>> teiMap )", "modifiers": "private", "return": "void", "signature": "void mapEventsToProgramInstanceByTei( ImportOptions importOptions, List<Event> events,\n        Map<String, ProgramInstance> programInstances, Map<String, Pair<TrackedEntityInstance, Boolean>> teiMap )", "full_signature": "private void mapEventsToProgramInstanceByTei( ImportOptions importOptions, List<Event> events,\n        Map<String, ProgramInstance> programInstances, Map<String, Pair<TrackedEntityInstance, Boolean>> teiMap )", "class_method_signature": "ProgramInstanceSupplier.mapEventsToProgramInstanceByTei( ImportOptions importOptions, List<Event> events,\n        Map<String, ProgramInstance> programInstances, Map<String, Pair<TrackedEntityInstance, Boolean>> teiMap )", "testcase": false, "constructor": false}, {"identifier": "mapExistingEventsToProgramInstances", "parameters": "( ImportOptions importOptions, List<Event> events,\n        Map<String, ProgramInstance> programInstances )", "modifiers": "private", "return": "void", "signature": "void mapExistingEventsToProgramInstances( ImportOptions importOptions, List<Event> events,\n        Map<String, ProgramInstance> programInstances )", "full_signature": "private void mapExistingEventsToProgramInstances( ImportOptions importOptions, List<Event> events,\n        Map<String, ProgramInstance> programInstances )", "class_method_signature": "ProgramInstanceSupplier.mapExistingEventsToProgramInstances( ImportOptions importOptions, List<Event> events,\n        Map<String, ProgramInstance> programInstances )", "testcase": false, "constructor": false}, {"identifier": "getProgramById", "parameters": "( long id, Collection<Program> programs )", "modifiers": "private", "return": "Program", "signature": "Program getProgramById( long id, Collection<Program> programs )", "full_signature": "private Program getProgramById( long id, Collection<Program> programs )", "class_method_signature": "ProgramInstanceSupplier.getProgramById( long id, Collection<Program> programs )", "testcase": false, "constructor": false}, {"identifier": "getProgramByUid", "parameters": "( String uid, Collection<Program> programs )", "modifiers": "private", "return": "Program", "signature": "Program getProgramByUid( String uid, Collection<Program> programs )", "full_signature": "private Program getProgramByUid( String uid, Collection<Program> programs )", "class_method_signature": "ProgramInstanceSupplier.getProgramByUid( String uid, Collection<Program> programs )", "testcase": false, "constructor": false}, {"identifier": "getByTeiAndProgram", "parameters": "( ImportOptions importOptions, Long teiId, Long programId, Event event )", "modifiers": "private", "return": "ProgramInstance", "signature": "ProgramInstance getByTeiAndProgram( ImportOptions importOptions, Long teiId, Long programId, Event event )", "full_signature": "private ProgramInstance getByTeiAndProgram( ImportOptions importOptions, Long teiId, Long programId, Event event )", "class_method_signature": "ProgramInstanceSupplier.getByTeiAndProgram( ImportOptions importOptions, Long teiId, Long programId, Event event )", "testcase": false, "constructor": false}, {"identifier": "getProgramInstanceByEvent", "parameters": "( ImportOptions importOptions, List<Event> events )", "modifiers": "private", "return": "Map<String, ProgramInstance>", "signature": "Map<String, ProgramInstance> getProgramInstanceByEvent( ImportOptions importOptions, List<Event> events )", "full_signature": "private Map<String, ProgramInstance> getProgramInstanceByEvent( ImportOptions importOptions, List<Event> events )", "class_method_signature": "ProgramInstanceSupplier.getProgramInstanceByEvent( ImportOptions importOptions, List<Event> events )", "testcase": false, "constructor": false}, {"identifier": "getProgramInstancesByUid", "parameters": "( ImportOptions importOptions, List<Event> events,\n        Multimap<String, String> programInstanceToEvent, Set<String> uids )", "modifiers": "private", "return": "Map<String, ProgramInstance>", "signature": "Map<String, ProgramInstance> getProgramInstancesByUid( ImportOptions importOptions, List<Event> events,\n        Multimap<String, String> programInstanceToEvent, Set<String> uids )", "full_signature": "private Map<String, ProgramInstance> getProgramInstancesByUid( ImportOptions importOptions, List<Event> events,\n        Multimap<String, String> programInstanceToEvent, Set<String> uids )", "class_method_signature": "ProgramInstanceSupplier.getProgramInstancesByUid( ImportOptions importOptions, List<Event> events,\n        Multimap<String, String> programInstanceToEvent, Set<String> uids )", "testcase": false, "constructor": false}, {"identifier": "mapFromResultset", "parameters": "( ResultSet rs, ImportOptions importOptions, List<Event> events )", "modifiers": "private", "return": "ProgramInstance", "signature": "ProgramInstance mapFromResultset( ResultSet rs, ImportOptions importOptions, List<Event> events )", "full_signature": "private ProgramInstance mapFromResultset( ResultSet rs, ImportOptions importOptions, List<Event> events )", "class_method_signature": "ProgramInstanceSupplier.mapFromResultset( ResultSet rs, ImportOptions importOptions, List<Event> events )", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "( ImportOptions importOptions, List<Event> events )", "modifiers": "@Override public", "return": "Map<String, ProgramInstance>", "signature": "Map<String, ProgramInstance> get( ImportOptions importOptions, List<Event> events )", "full_signature": "@Override public Map<String, ProgramInstance> get( ImportOptions importOptions, List<Event> events )", "class_method_signature": "ProgramInstanceSupplier.get( ImportOptions importOptions, List<Event> events )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/ProgramInstanceSupplier.java"}, "focal_method": {"identifier": "get", "parameters": "( ImportOptions importOptions,\n        Map<String, Pair<TrackedEntityInstance, Boolean>> teiMap, List<Event> events )", "modifiers": "public", "return": "Map<String, ProgramInstance>", "body": "public Map<String, ProgramInstance> get( ImportOptions importOptions,\n        Map<String, Pair<TrackedEntityInstance, Boolean>> teiMap, List<Event> events )\n    {\n        if ( events == null )\n        {\n            return new HashMap<>();\n        }\n\n        // Collect all the program instance UIDs to pass as SQL query argument\n        Set<String> programInstanceUids = events.stream()\n            .filter( e -> StringUtils.isNotEmpty( e.getEnrollment() ) )\n            .map( Event::getEnrollment ).collect( Collectors.toSet() );\n\n        Map<String, ProgramInstance> programInstances = new HashMap<>();\n\n        if ( !programInstanceUids.isEmpty() )\n        {\n            // Create a bi-directional map enrollment uid -> event uid\n            Multimap<String, String> programInstanceToEvent = HashMultimap.create();\n            for ( Event event : events )\n            {\n                programInstanceToEvent.put( event.getEnrollment(), event.getUid() );\n            }\n\n            // Collect all the Program Stage Instances specified in the Events (enrollment\n            // property)\n            programInstances = getProgramInstancesByUid( importOptions, events, programInstanceToEvent,\n                programInstanceUids );\n        }\n\n        mapExistingEventsToProgramInstances( importOptions, events, programInstances );\n\n        mapEventsToProgramInstanceByTei( importOptions, events, programInstances, teiMap );\n\n        return programInstances;\n    }", "signature": "Map<String, ProgramInstance> get( ImportOptions importOptions,\n        Map<String, Pair<TrackedEntityInstance, Boolean>> teiMap, List<Event> events )", "full_signature": "public Map<String, ProgramInstance> get( ImportOptions importOptions,\n        Map<String, Pair<TrackedEntityInstance, Boolean>> teiMap, List<Event> events )", "class_method_signature": "ProgramInstanceSupplier.get( ImportOptions importOptions,\n        Map<String, Pair<TrackedEntityInstance, Boolean>> teiMap, List<Event> events )", "testcase": false, "constructor": false, "invocations": ["collect", "map", "filter", "stream", "isNotEmpty", "getEnrollment", "toSet", "isEmpty", "create", "put", "getEnrollment", "getUid", "getProgramInstancesByUid", "mapExistingEventsToProgramInstances", "mapEventsToProgramInstanceByTei"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}