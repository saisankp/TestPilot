{"test_class": {"identifier": "ValidatorsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public TemporaryFolder tmpFolder = new TemporaryFolder();", "modifier": "@Rule public", "type": "TemporaryFolder", "declarator": "tmpFolder = new TemporaryFolder()", "var_name": "tmpFolder"}], "file": "java_src/src/test/java/com/google/crypto/tink/subtle/ValidatorsTest.java"}, "test_case": {"identifier": "testValidateTypeUrl", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testValidateTypeUrl() throws Exception {\n    String goodUrlPrefix = \"type.googleapis.com/\";\n\n    // Some invalid type URLs.\n    try {\n      Validators.validateTypeUrl(\"some.bad.url/that.is.invalid\");\n      fail(\"Invalid type URL, should have thrown exception\");\n    } catch (GeneralSecurityException e) {\n      // Expected.\n      TestUtil.assertExceptionContains(e, \"type URL\");\n      TestUtil.assertExceptionContains(e, \"invalid\");\n    }\n    try {\n      Validators.validateTypeUrl(goodUrlPrefix);\n      fail(\"Invalid type URL, should have thrown exception.\");\n    } catch (GeneralSecurityException e) {\n      // Expected.\n      TestUtil.assertExceptionContains(e, \"type URL\");\n      TestUtil.assertExceptionContains(e, \"invalid\");\n      TestUtil.assertExceptionContains(e, \"has no message name\");\n    }\n\n    // A valid type URL.\n    Validators.validateTypeUrl(goodUrlPrefix + \"somepackage.somemessage\");\n  }", "signature": "void testValidateTypeUrl()", "full_signature": "@Test public void testValidateTypeUrl()", "class_method_signature": "ValidatorsTest.testValidateTypeUrl()", "testcase": true, "constructor": false, "invocations": ["validateTypeUrl", "fail", "assertExceptionContains", "assertExceptionContains", "validateTypeUrl", "fail", "assertExceptionContains", "assertExceptionContains", "assertExceptionContains", "validateTypeUrl"]}, "focal_class": {"identifier": "Validators", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TYPE_URL_PREFIX = \"type.googleapis.com/\";", "modifier": "private static final", "type": "String", "declarator": "TYPE_URL_PREFIX = \"type.googleapis.com/\"", "var_name": "TYPE_URL_PREFIX"}, {"original_string": "private static final int MIN_RSA_MODULUS_SIZE = 2048;", "modifier": "private static final", "type": "int", "declarator": "MIN_RSA_MODULUS_SIZE = 2048", "var_name": "MIN_RSA_MODULUS_SIZE"}, {"original_string": "private static final String URI_UNRESERVED_CHARS = \"([0-9a-zA-Z\\\\-\\\\.\\\\_~])+\";", "modifier": "private static final", "type": "String", "declarator": "URI_UNRESERVED_CHARS = \"([0-9a-zA-Z\\\\-\\\\.\\\\_~])+\"", "var_name": "URI_UNRESERVED_CHARS"}, {"original_string": "private static final Pattern GCP_KMS_CRYPTO_KEY_PATTERN =\n      Pattern.compile(\n          String.format(\n              \"^projects/%s/locations/%s/keyRings/%s/cryptoKeys/%s$\",\n              URI_UNRESERVED_CHARS,\n              URI_UNRESERVED_CHARS,\n              URI_UNRESERVED_CHARS,\n              URI_UNRESERVED_CHARS),\n          Pattern.CASE_INSENSITIVE);", "modifier": "private static final", "type": "Pattern", "declarator": "GCP_KMS_CRYPTO_KEY_PATTERN =\n      Pattern.compile(\n          String.format(\n              \"^projects/%s/locations/%s/keyRings/%s/cryptoKeys/%s$\",\n              URI_UNRESERVED_CHARS,\n              URI_UNRESERVED_CHARS,\n              URI_UNRESERVED_CHARS,\n              URI_UNRESERVED_CHARS),\n          Pattern.CASE_INSENSITIVE)", "var_name": "GCP_KMS_CRYPTO_KEY_PATTERN"}, {"original_string": "private static final Pattern GCP_KMS_CRYPTO_KEY_VERSION_PATTERN =\n      Pattern.compile(\n          String.format(\n              \"^projects/%s/locations/%s/keyRings/%s/cryptoKeys/%s/cryptoKeyVersions/%s$\",\n              URI_UNRESERVED_CHARS,\n              URI_UNRESERVED_CHARS,\n              URI_UNRESERVED_CHARS,\n              URI_UNRESERVED_CHARS,\n              URI_UNRESERVED_CHARS),\n          Pattern.CASE_INSENSITIVE);", "modifier": "private static final", "type": "Pattern", "declarator": "GCP_KMS_CRYPTO_KEY_VERSION_PATTERN =\n      Pattern.compile(\n          String.format(\n              \"^projects/%s/locations/%s/keyRings/%s/cryptoKeys/%s/cryptoKeyVersions/%s$\",\n              URI_UNRESERVED_CHARS,\n              URI_UNRESERVED_CHARS,\n              URI_UNRESERVED_CHARS,\n              URI_UNRESERVED_CHARS,\n              URI_UNRESERVED_CHARS),\n          Pattern.CASE_INSENSITIVE)", "var_name": "GCP_KMS_CRYPTO_KEY_VERSION_PATTERN"}], "methods": [{"identifier": "Validators", "parameters": "()", "modifiers": "private", "return": "", "signature": " Validators()", "full_signature": "private  Validators()", "class_method_signature": "Validators.Validators()", "testcase": false, "constructor": true}, {"identifier": "validateTypeUrl", "parameters": "(String typeUrl)", "modifiers": "public static", "return": "void", "signature": "void validateTypeUrl(String typeUrl)", "full_signature": "public static void validateTypeUrl(String typeUrl)", "class_method_signature": "Validators.validateTypeUrl(String typeUrl)", "testcase": false, "constructor": false}, {"identifier": "validateAesKeySize", "parameters": "(int sizeInBytes)", "modifiers": "public static", "return": "void", "signature": "void validateAesKeySize(int sizeInBytes)", "full_signature": "public static void validateAesKeySize(int sizeInBytes)", "class_method_signature": "Validators.validateAesKeySize(int sizeInBytes)", "testcase": false, "constructor": false}, {"identifier": "validateVersion", "parameters": "(int candidate, int maxExpected)", "modifiers": "public static", "return": "void", "signature": "void validateVersion(int candidate, int maxExpected)", "full_signature": "public static void validateVersion(int candidate, int maxExpected)", "class_method_signature": "Validators.validateVersion(int candidate, int maxExpected)", "testcase": false, "constructor": false}, {"identifier": "validateSignatureHash", "parameters": "(HashType hash)", "modifiers": "public static", "return": "void", "signature": "void validateSignatureHash(HashType hash)", "full_signature": "public static void validateSignatureHash(HashType hash)", "class_method_signature": "Validators.validateSignatureHash(HashType hash)", "testcase": false, "constructor": false}, {"identifier": "validateRsaModulusSize", "parameters": "(int modulusSize)", "modifiers": "public static", "return": "void", "signature": "void validateRsaModulusSize(int modulusSize)", "full_signature": "public static void validateRsaModulusSize(int modulusSize)", "class_method_signature": "Validators.validateRsaModulusSize(int modulusSize)", "testcase": false, "constructor": false}, {"identifier": "validateRsaPublicExponent", "parameters": "(\n      BigInteger publicExponent)", "modifiers": "public static", "return": "void", "signature": "void validateRsaPublicExponent(\n      BigInteger publicExponent)", "full_signature": "public static void validateRsaPublicExponent(\n      BigInteger publicExponent)", "class_method_signature": "Validators.validateRsaPublicExponent(\n      BigInteger publicExponent)", "testcase": false, "constructor": false}, {"identifier": "validateNotExists", "parameters": "(File f)", "modifiers": "public static", "return": "void", "signature": "void validateNotExists(File f)", "full_signature": "public static void validateNotExists(File f)", "class_method_signature": "Validators.validateNotExists(File f)", "testcase": false, "constructor": false}, {"identifier": "validateExists", "parameters": "(File f)", "modifiers": "public static", "return": "void", "signature": "void validateExists(File f)", "full_signature": "public static void validateExists(File f)", "class_method_signature": "Validators.validateExists(File f)", "testcase": false, "constructor": false}, {"identifier": "validateKmsKeyUriAndRemovePrefix", "parameters": "(String expectedPrefix, String kmsKeyUri)", "modifiers": "public static", "return": "String", "signature": "String validateKmsKeyUriAndRemovePrefix(String expectedPrefix, String kmsKeyUri)", "full_signature": "public static String validateKmsKeyUriAndRemovePrefix(String expectedPrefix, String kmsKeyUri)", "class_method_signature": "Validators.validateKmsKeyUriAndRemovePrefix(String expectedPrefix, String kmsKeyUri)", "testcase": false, "constructor": false}, {"identifier": "validateCryptoKeyUri", "parameters": "(String kmsKeyUri)", "modifiers": "public static", "return": "void", "signature": "void validateCryptoKeyUri(String kmsKeyUri)", "full_signature": "public static void validateCryptoKeyUri(String kmsKeyUri)", "class_method_signature": "Validators.validateCryptoKeyUri(String kmsKeyUri)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/subtle/Validators.java"}, "focal_method": {"identifier": "validateTypeUrl", "parameters": "(String typeUrl)", "modifiers": "public static", "return": "void", "body": "public static void validateTypeUrl(String typeUrl) throws GeneralSecurityException {\n    if (!typeUrl.startsWith(TYPE_URL_PREFIX)) {\n      throw new GeneralSecurityException(\n          String.format(\n              \"Error: type URL %s is invalid; it must start with %s.\\n\", typeUrl, TYPE_URL_PREFIX));\n    }\n    if (typeUrl.length() == TYPE_URL_PREFIX.length()) {\n      throw new GeneralSecurityException(\n          String.format(\"Error: type URL %s is invalid; it has no message name.\\n\", typeUrl));\n    }\n  }", "signature": "void validateTypeUrl(String typeUrl)", "full_signature": "public static void validateTypeUrl(String typeUrl)", "class_method_signature": "Validators.validateTypeUrl(String typeUrl)", "testcase": false, "constructor": false, "invocations": ["startsWith", "format", "length", "length", "format"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}