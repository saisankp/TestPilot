{"test_class": {"identifier": "ParameterRepositoryServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PARAM_NAME = \"SHIELDS_ON\";", "modifier": "private static final", "type": "String", "declarator": "PARAM_NAME = \"SHIELDS_ON\"", "var_name": "PARAM_NAME"}, {"original_string": "private static final String PARAM_APP_ID = \"BORG_HUNT\";", "modifier": "private static final", "type": "String", "declarator": "PARAM_APP_ID = \"BORG_HUNT\"", "var_name": "PARAM_APP_ID"}, {"original_string": "private static final String PARAM_NAME_SPACE = \"TNG\";", "modifier": "private static final", "type": "String", "declarator": "PARAM_NAME_SPACE = \"TNG\"", "var_name": "PARAM_NAME_SPACE"}, {"original_string": "private static final String PARAM_COMP_CODE = \"C\";", "modifier": "private static final", "type": "String", "declarator": "PARAM_COMP_CODE = \"C\"", "var_name": "PARAM_COMP_CODE"}, {"original_string": "private static final String PARAM_VALUE = \"true\";", "modifier": "private static final", "type": "String", "declarator": "PARAM_VALUE = \"true\"", "var_name": "PARAM_VALUE"}, {"original_string": "private static final String PARAM_DESCR = \"turn the shields on\";", "modifier": "private static final", "type": "String", "declarator": "PARAM_DESCR = \"turn the shields on\"", "var_name": "PARAM_DESCR"}, {"original_string": "private static final String PARAM_TYPE_NAME = \"Config\";", "modifier": "private static final", "type": "String", "declarator": "PARAM_TYPE_NAME = \"Config\"", "var_name": "PARAM_TYPE_NAME"}, {"original_string": "private static final String PARAM_TYPE_CODE = \"PC\";", "modifier": "private static final", "type": "String", "declarator": "PARAM_TYPE_CODE = \"PC\"", "var_name": "PARAM_TYPE_CODE"}, {"original_string": "static final Parameter parameter = createParameter();", "modifier": "static final", "type": "Parameter", "declarator": "parameter = createParameter()", "var_name": "parameter"}, {"original_string": "static final ParameterKey key =\n            ParameterKey.create(PARAM_APP_ID, PARAM_NAME_SPACE, PARAM_COMP_CODE, PARAM_NAME);", "modifier": "static final", "type": "ParameterKey", "declarator": "key =\n            ParameterKey.create(PARAM_APP_ID, PARAM_NAME_SPACE, PARAM_COMP_CODE, PARAM_NAME)", "var_name": "key"}, {"original_string": "ParameterBo bo = ParameterBo.from(parameter);", "modifier": "", "type": "ParameterBo", "declarator": "bo = ParameterBo.from(parameter)", "var_name": "bo"}, {"original_string": "@Mock private DataObjectService dataObjectService;", "modifier": "@Mock private", "type": "DataObjectService", "declarator": "dataObjectService", "var_name": "dataObjectService"}, {"original_string": "@InjectMocks private ParameterRepositoryServiceImpl parameterRepositoryService\n                                        = new ParameterRepositoryServiceImpl();", "modifier": "@InjectMocks private", "type": "ParameterRepositoryServiceImpl", "declarator": "parameterRepositoryService\n                                        = new ParameterRepositoryServiceImpl()", "var_name": "parameterRepositoryService"}, {"original_string": "private ParameterRepositoryService parameterService = parameterRepositoryService;", "modifier": "private", "type": "ParameterRepositoryService", "declarator": "parameterService = parameterRepositoryService", "var_name": "parameterService"}], "file": "rice-middleware/core-service/impl/src/test/java/org/kuali/rice/coreservice/impl/parameter/ParameterRepositoryServiceImplTest.java"}, "test_case": {"identifier": "test_get_sub_parameter_value_as_string_single_match", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_get_sub_parameter_value_as_string_single_match() throws Exception{\n        //adding whitespace\n        bo.setValue(\"foo= f1; bar=b1; baz=z1\");\n        when(dataObjectService.find(Matchers.argThat(new ClassOrSubclassMatcher<ParameterBo>(\n                ParameterBo.class)), any(QueryByCriteria.class))).thenReturn(bo);\n        assertEquals(\"f1\", getParameterRepositoryService().getSubParameterValueAsString(key, \"foo\"));\n        verify(dataObjectService, times(1)).find(Matchers.argThat(new ClassOrSubclassMatcher<ParameterBo>(\n                ParameterBo.class)), any(QueryByCriteria.class));\n    }", "signature": "void test_get_sub_parameter_value_as_string_single_match()", "full_signature": "@Test public void test_get_sub_parameter_value_as_string_single_match()", "class_method_signature": "ParameterRepositoryServiceImplTest.test_get_sub_parameter_value_as_string_single_match()", "testcase": true, "constructor": false, "invocations": ["setValue", "thenReturn", "when", "find", "argThat", "any", "assertEquals", "getSubParameterValueAsString", "getParameterRepositoryService", "find", "verify", "times", "argThat", "any"]}, "focal_class": {"identifier": "ParameterRepositoryServiceImpl", "superclass": "", "interfaces": "implements ParameterRepositoryService", "fields": [{"original_string": "private static final String SUB_PARAM_SEPARATOR = \"=\";", "modifier": "private static final", "type": "String", "declarator": "SUB_PARAM_SEPARATOR = \"=\"", "var_name": "SUB_PARAM_SEPARATOR"}, {"original_string": "private DataObjectService dataObjectService;", "modifier": "private", "type": "DataObjectService", "declarator": "dataObjectService", "var_name": "dataObjectService"}], "methods": [{"identifier": "createParameter", "parameters": "(Parameter parameter)", "modifiers": "@Override @Transactional public", "return": "Parameter", "signature": "Parameter createParameter(Parameter parameter)", "full_signature": "@Override @Transactional public Parameter createParameter(Parameter parameter)", "class_method_signature": "ParameterRepositoryServiceImpl.createParameter(Parameter parameter)", "testcase": false, "constructor": false}, {"identifier": "updateParameter", "parameters": "(Parameter parameter)", "modifiers": "@Override @Transactional public", "return": "Parameter", "signature": "Parameter updateParameter(Parameter parameter)", "full_signature": "@Override @Transactional public Parameter updateParameter(Parameter parameter)", "class_method_signature": "ParameterRepositoryServiceImpl.updateParameter(Parameter parameter)", "testcase": false, "constructor": false}, {"identifier": "getParameter", "parameters": "(ParameterKey key)", "modifiers": "@Override public", "return": "Parameter", "signature": "Parameter getParameter(ParameterKey key)", "full_signature": "@Override public Parameter getParameter(ParameterKey key)", "class_method_signature": "ParameterRepositoryServiceImpl.getParameter(ParameterKey key)", "testcase": false, "constructor": false}, {"identifier": "getParameterBo", "parameters": "(ParameterKey key)", "modifiers": "private", "return": "ParameterBo", "signature": "ParameterBo getParameterBo(ParameterKey key)", "full_signature": "private ParameterBo getParameterBo(ParameterKey key)", "class_method_signature": "ParameterRepositoryServiceImpl.getParameterBo(ParameterKey key)", "testcase": false, "constructor": false}, {"identifier": "getParameterValueAsString", "parameters": "(ParameterKey key)", "modifiers": "@Override public", "return": "String", "signature": "String getParameterValueAsString(ParameterKey key)", "full_signature": "@Override public String getParameterValueAsString(ParameterKey key)", "class_method_signature": "ParameterRepositoryServiceImpl.getParameterValueAsString(ParameterKey key)", "testcase": false, "constructor": false}, {"identifier": "getParameterValueAsBoolean", "parameters": "(ParameterKey key)", "modifiers": "@Override public", "return": "Boolean", "signature": "Boolean getParameterValueAsBoolean(ParameterKey key)", "full_signature": "@Override public Boolean getParameterValueAsBoolean(ParameterKey key)", "class_method_signature": "ParameterRepositoryServiceImpl.getParameterValueAsBoolean(ParameterKey key)", "testcase": false, "constructor": false}, {"identifier": "getParameterValuesAsString", "parameters": "(ParameterKey key)", "modifiers": "@Override public", "return": "Collection<String>", "signature": "Collection<String> getParameterValuesAsString(ParameterKey key)", "full_signature": "@Override public Collection<String> getParameterValuesAsString(ParameterKey key)", "class_method_signature": "ParameterRepositoryServiceImpl.getParameterValuesAsString(ParameterKey key)", "testcase": false, "constructor": false}, {"identifier": "getSubParameterValueAsString", "parameters": "(ParameterKey key, String subParameterName)", "modifiers": "@Override public", "return": "String", "signature": "String getSubParameterValueAsString(ParameterKey key, String subParameterName)", "full_signature": "@Override public String getSubParameterValueAsString(ParameterKey key, String subParameterName)", "class_method_signature": "ParameterRepositoryServiceImpl.getSubParameterValueAsString(ParameterKey key, String subParameterName)", "testcase": false, "constructor": false}, {"identifier": "getSubParameterValuesAsString", "parameters": "(ParameterKey key, String subParameterName)", "modifiers": "@Override public", "return": "Collection<String>", "signature": "Collection<String> getSubParameterValuesAsString(ParameterKey key, String subParameterName)", "full_signature": "@Override public Collection<String> getSubParameterValuesAsString(ParameterKey key, String subParameterName)", "class_method_signature": "ParameterRepositoryServiceImpl.getSubParameterValuesAsString(ParameterKey key, String subParameterName)", "testcase": false, "constructor": false}, {"identifier": "getSubParameter", "parameters": "(Collection<String> values, String subParameterName)", "modifiers": "private", "return": "String", "signature": "String getSubParameter(Collection<String> values, String subParameterName)", "full_signature": "private String getSubParameter(Collection<String> values, String subParameterName)", "class_method_signature": "ParameterRepositoryServiceImpl.getSubParameter(Collection<String> values, String subParameterName)", "testcase": false, "constructor": false}, {"identifier": "splitOn", "parameters": "(String strValues, String delim)", "modifiers": "private", "return": "Collection<String>", "signature": "Collection<String> splitOn(String strValues, String delim)", "full_signature": "private Collection<String> splitOn(String strValues, String delim)", "class_method_signature": "ParameterRepositoryServiceImpl.splitOn(String strValues, String delim)", "testcase": false, "constructor": false}, {"identifier": "findParameters", "parameters": "(QueryByCriteria queryByCriteria)", "modifiers": "@Override public", "return": "ParameterQueryResults", "signature": "ParameterQueryResults findParameters(QueryByCriteria queryByCriteria)", "full_signature": "@Override public ParameterQueryResults findParameters(QueryByCriteria queryByCriteria)", "class_method_signature": "ParameterRepositoryServiceImpl.findParameters(QueryByCriteria queryByCriteria)", "testcase": false, "constructor": false}, {"identifier": "getDataObjectService", "parameters": "()", "modifiers": "public", "return": "DataObjectService", "signature": "DataObjectService getDataObjectService()", "full_signature": "public DataObjectService getDataObjectService()", "class_method_signature": "ParameterRepositoryServiceImpl.getDataObjectService()", "testcase": false, "constructor": false}, {"identifier": "setDataObjectService", "parameters": "(DataObjectService dataObjectService)", "modifiers": "@Required public", "return": "void", "signature": "void setDataObjectService(DataObjectService dataObjectService)", "full_signature": "@Required public void setDataObjectService(DataObjectService dataObjectService)", "class_method_signature": "ParameterRepositoryServiceImpl.setDataObjectService(DataObjectService dataObjectService)", "testcase": false, "constructor": false}], "file": "rice-middleware/core-service/impl/src/main/java/org/kuali/rice/coreservice/impl/parameter/ParameterRepositoryServiceImpl.java"}, "focal_method": {"identifier": "getSubParameterValueAsString", "parameters": "(ParameterKey key, String subParameterName)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getSubParameterValueAsString(ParameterKey key, String subParameterName) {\n        if (StringUtils.isBlank(subParameterName)) {\n            throw new RiceIllegalArgumentException(\"subParameterName is blank\");\n        }\n\n        Collection<String> values = getParameterValuesAsString(key);\n        return getSubParameter(values, subParameterName);\n    }", "signature": "String getSubParameterValueAsString(ParameterKey key, String subParameterName)", "full_signature": "@Override public String getSubParameterValueAsString(ParameterKey key, String subParameterName)", "class_method_signature": "ParameterRepositoryServiceImpl.getSubParameterValueAsString(ParameterKey key, String subParameterName)", "testcase": false, "constructor": false, "invocations": ["isBlank", "getParameterValuesAsString", "getSubParameter"]}, "repository": {"repo_id": 25359676, "url": "https://github.com/kuali/rice", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 16, "size": 289156, "license": "licensed"}}