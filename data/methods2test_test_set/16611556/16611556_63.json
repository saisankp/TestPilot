{"test_class": {"identifier": "UpdateSingleCacheAdviceTest", "superclass": "extends AbstractCacheTest<UpdateSingleCacheAdvice>", "interfaces": "", "fields": [{"original_string": "private static final String NS = \"XYZABC\";", "modifier": "private static final", "type": "String", "declarator": "NS = \"XYZABC\"", "var_name": "NS"}, {"original_string": "private static final int EXPIRATION = 222;", "modifier": "private static final", "type": "int", "declarator": "EXPIRATION = 222", "var_name": "EXPIRATION"}, {"original_string": "private final Object returnValue;", "modifier": "private final", "type": "Object", "declarator": "returnValue", "var_name": "returnValue"}, {"original_string": "private final Object expectedValue;", "modifier": "private final", "type": "Object", "declarator": "expectedValue", "var_name": "expectedValue"}], "file": "simple-spring-memcached/src/test/java/com/google/code/ssm/aop/UpdateSingleCacheAdviceTest.java"}, "test_case": {"identifier": "invalid", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void invalid() throws Throwable {\n        Assume.assumeThat(isValid, CoreMatchers.is(false));\n\n        advice.cacheUpdateSingle(pjp, returnValue);\n\n        verify(cache, never()).set(anyString(), anyInt(), any(), any(SerializationType.class));\n    }", "signature": "void invalid()", "full_signature": "@Test public void invalid()", "class_method_signature": "UpdateSingleCacheAdviceTest.invalid()", "testcase": true, "constructor": false, "invocations": ["assumeThat", "is", "cacheUpdateSingle", "set", "verify", "never", "anyString", "anyInt", "any", "any"]}, "focal_class": {"identifier": "UpdateSingleCacheAdvice", "superclass": "extends SingleUpdateCacheAdvice<UpdateSingleCache>", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(UpdateSingleCacheAdvice.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(UpdateSingleCacheAdvice.class)", "var_name": "LOG"}], "methods": [{"identifier": "UpdateSingleCacheAdvice", "parameters": "()", "modifiers": "public", "return": "", "signature": " UpdateSingleCacheAdvice()", "full_signature": "public  UpdateSingleCacheAdvice()", "class_method_signature": "UpdateSingleCacheAdvice.UpdateSingleCacheAdvice()", "testcase": false, "constructor": true}, {"identifier": "updateSingle", "parameters": "()", "modifiers": "@Pointcut(\"@annotation(com.google.code.ssm.api.UpdateSingleCache)\") public", "return": "void", "signature": "void updateSingle()", "full_signature": "@Pointcut(\"@annotation(com.google.code.ssm.api.UpdateSingleCache)\") public void updateSingle()", "class_method_signature": "UpdateSingleCacheAdvice.updateSingle()", "testcase": false, "constructor": false}, {"identifier": "cacheUpdateSingle", "parameters": "(final JoinPoint jp, final Object retVal)", "modifiers": "@AfterReturning(pointcut = \"updateSingle()\", returning = \"retVal\") public", "return": "void", "signature": "void cacheUpdateSingle(final JoinPoint jp, final Object retVal)", "full_signature": "@AfterReturning(pointcut = \"updateSingle()\", returning = \"retVal\") public void cacheUpdateSingle(final JoinPoint jp, final Object retVal)", "class_method_signature": "UpdateSingleCacheAdvice.cacheUpdateSingle(final JoinPoint jp, final Object retVal)", "testcase": false, "constructor": false}, {"identifier": "getCacheKey", "parameters": "(final AnnotationData data, final Object[] args, final String methodDesc)", "modifiers": "@Override protected", "return": "String", "signature": "String getCacheKey(final AnnotationData data, final Object[] args, final String methodDesc)", "full_signature": "@Override protected String getCacheKey(final AnnotationData data, final Object[] args, final String methodDesc)", "class_method_signature": "UpdateSingleCacheAdvice.getCacheKey(final AnnotationData data, final Object[] args, final String methodDesc)", "testcase": false, "constructor": false}, {"identifier": "getLogger", "parameters": "()", "modifiers": "@Override protected", "return": "Logger", "signature": "Logger getLogger()", "full_signature": "@Override protected Logger getLogger()", "class_method_signature": "UpdateSingleCacheAdvice.getLogger()", "testcase": false, "constructor": false}], "file": "simple-spring-memcached/src/main/java/com/google/code/ssm/aop/UpdateSingleCacheAdvice.java"}, "focal_method": {"identifier": "cacheUpdateSingle", "parameters": "(final JoinPoint jp, final Object retVal)", "modifiers": "@AfterReturning(pointcut = \"updateSingle()\", returning = \"retVal\") public", "return": "void", "body": "@AfterReturning(pointcut = \"updateSingle()\", returning = \"retVal\")\n    public void cacheUpdateSingle(final JoinPoint jp, final Object retVal) throws Throwable {\n        update(jp, retVal);\n    }", "signature": "void cacheUpdateSingle(final JoinPoint jp, final Object retVal)", "full_signature": "@AfterReturning(pointcut = \"updateSingle()\", returning = \"retVal\") public void cacheUpdateSingle(final JoinPoint jp, final Object retVal)", "class_method_signature": "UpdateSingleCacheAdvice.cacheUpdateSingle(final JoinPoint jp, final Object retVal)", "testcase": false, "constructor": false, "invocations": ["update"]}, "repository": {"repo_id": 16611556, "url": "https://github.com/ragnor/simple-spring-memcached", "language": "Java", "is_fork": false, "fork_count": 86, "stargazer_count": 181, "size": 3625, "license": "licensed"}}