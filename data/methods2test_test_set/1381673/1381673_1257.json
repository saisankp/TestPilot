{"test_class": {"identifier": "KiePMMLASTFactoryUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap;", "modifier": "private static", "type": "Map<String, KiePMMLOriginalTypeGeneratedType>", "declarator": "fieldTypeMap", "var_name": "fieldTypeMap"}, {"original_string": "private static Map<String, DataType> simplePredicateNameType;", "modifier": "private static", "type": "Map<String, DataType>", "declarator": "simplePredicateNameType", "var_name": "simplePredicateNameType"}, {"original_string": "private static List<SimplePredicate> simplePredicates;", "modifier": "private static", "type": "List<SimplePredicate>", "declarator": "simplePredicates", "var_name": "simplePredicates"}, {"original_string": "private static List<CompoundPredicate> compoundPredicates;", "modifier": "private static", "type": "List<CompoundPredicate>", "declarator": "compoundPredicates", "var_name": "compoundPredicates"}], "file": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/utils/KiePMMLASTFactoryUtilsTest.java"}, "test_case": {"identifier": "populateKiePMMLFieldOperatorValueListWithCompoundPredicates", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void populateKiePMMLFieldOperatorValueListWithCompoundPredicates() {\n        final List<KiePMMLFieldOperatorValue> toPopulate = new ArrayList<>();\n        KiePMMLASTFactoryUtils.populateKiePMMLFieldOperatorValueListWithCompoundPredicates(toPopulate,\n                                                                                           compoundPredicates,\n                                                                                           fieldTypeMap);\n        assertFalse(toPopulate.isEmpty());\n        assertEquals(2, toPopulate.size()); // one entry is for \"AND\" compounds and the other is for \"OR\" ones\n        final Map<CompoundPredicate.BooleanOperator, List<CompoundPredicate>> partitionedCompoundPredicates =\n                compoundPredicates.stream()\n                .collect(Collectors.groupingBy(CompoundPredicate::getBooleanOperator));\n        partitionedCompoundPredicates.forEach((booleanOperator, compoundPredicates) -> {\n            final KiePMMLFieldOperatorValue operatorValue = toPopulate.stream()\n                    .filter(kiePMMLFieldOperatorValue -> kiePMMLFieldOperatorValue.getOperator().equals(BOOLEAN_OPERATOR.byName(booleanOperator.value())))\n                    .findFirst()\n                    .orElseThrow(() -> new RuntimeException(\"Failed toRetrieve KiePMMLFieldOperatorValue for \" +\n                                                                    \"BooleanOperator \" + booleanOperator));\n            final List<KiePMMLFieldOperatorValue> nestedKiePMMLFieldOperatorValues =\n                    operatorValue.getNestedKiePMMLFieldOperatorValues();\n            final List<Predicate> nestedPredicates =\n                    compoundPredicates.stream().flatMap(compoundPredicate -> compoundPredicate.getPredicates().stream()).collect(Collectors.toList());\n            assertEquals(nestedPredicates.size(), nestedKiePMMLFieldOperatorValues.size());\n            nestedKiePMMLFieldOperatorValues.forEach(new Consumer<KiePMMLFieldOperatorValue>() {\n                @Override\n                public void accept(KiePMMLFieldOperatorValue kiePMMLFieldOperatorValue) {\n                    assertEquals(1, kiePMMLFieldOperatorValue.getKiePMMLOperatorValues().size());\n                    final KiePMMLOperatorValue kiePMMLOperatorValue =\n                            kiePMMLFieldOperatorValue.getKiePMMLOperatorValues().get(0);\n                    SimplePredicate simplePredicate = nestedPredicates.stream()\n                            .map(predicate -> (SimplePredicate) predicate)\n                            .filter(predicate -> predicate.getField().getValue().equals(getOriginalPredicateName(kiePMMLFieldOperatorValue.getName())))\n                            .findFirst()\n                            .orElseThrow(() -> new RuntimeException(\"Failed to find SimplePredicate for \" + kiePMMLFieldOperatorValue.getName()));\n                    commonVerifyKiePMMLOperatorValue(kiePMMLOperatorValue, simplePredicate);\n                    nestedPredicates.remove(simplePredicate);\n                }\n            });\n            assertTrue(nestedPredicates.isEmpty());\n        });\n    }", "signature": "void populateKiePMMLFieldOperatorValueListWithCompoundPredicates()", "full_signature": "@Test public void populateKiePMMLFieldOperatorValueListWithCompoundPredicates()", "class_method_signature": "KiePMMLASTFactoryUtilsTest.populateKiePMMLFieldOperatorValueListWithCompoundPredicates()", "testcase": true, "constructor": false, "invocations": ["populateKiePMMLFieldOperatorValueListWithCompoundPredicates", "assertFalse", "isEmpty", "assertEquals", "size", "collect", "stream", "groupingBy", "forEach", "orElseThrow", "findFirst", "filter", "stream", "equals", "getOperator", "byName", "value", "getNestedKiePMMLFieldOperatorValues", "collect", "flatMap", "stream", "stream", "getPredicates", "toList", "assertEquals", "size", "size", "forEach", "assertEquals", "size", "getKiePMMLOperatorValues", "get", "getKiePMMLOperatorValues", "orElseThrow", "findFirst", "filter", "map", "stream", "equals", "getValue", "getField", "getOriginalPredicateName", "getName", "getName", "commonVerifyKiePMMLOperatorValue", "remove", "assertTrue", "isEmpty"]}, "focal_class": {"identifier": "KiePMMLASTFactoryUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "KiePMMLASTFactoryUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " KiePMMLASTFactoryUtils()", "full_signature": "private  KiePMMLASTFactoryUtils()", "class_method_signature": "KiePMMLASTFactoryUtils.KiePMMLASTFactoryUtils()", "testcase": false, "constructor": true}, {"identifier": "getConstraintEntriesFromAndOrCompoundPredicate", "parameters": "(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap)", "modifiers": "public static", "return": "List<KiePMMLFieldOperatorValue>", "signature": "List<KiePMMLFieldOperatorValue> getConstraintEntriesFromAndOrCompoundPredicate(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap)", "full_signature": "public static List<KiePMMLFieldOperatorValue> getConstraintEntriesFromAndOrCompoundPredicate(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap)", "class_method_signature": "KiePMMLASTFactoryUtils.getConstraintEntriesFromAndOrCompoundPredicate(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap)", "testcase": false, "constructor": false}, {"identifier": "getConstraintEntriesFromXOrCompoundPredicate", "parameters": "(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap)", "modifiers": "public static", "return": "List<KiePMMLFieldOperatorValue>", "signature": "List<KiePMMLFieldOperatorValue> getConstraintEntriesFromXOrCompoundPredicate(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap)", "full_signature": "public static List<KiePMMLFieldOperatorValue> getConstraintEntriesFromXOrCompoundPredicate(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap)", "class_method_signature": "KiePMMLASTFactoryUtils.getConstraintEntriesFromXOrCompoundPredicate(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap)", "testcase": false, "constructor": false}, {"identifier": "getConstraintEntryFromSimplePredicates", "parameters": "(final String fieldName,\n                                                                                   final BOOLEAN_OPERATOR containerOperator,\n                                                                                   final List<SimplePredicate> simplePredicates,\n                                                                                   final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap)", "modifiers": "public static", "return": "KiePMMLFieldOperatorValue", "signature": "KiePMMLFieldOperatorValue getConstraintEntryFromSimplePredicates(final String fieldName,\n                                                                                   final BOOLEAN_OPERATOR containerOperator,\n                                                                                   final List<SimplePredicate> simplePredicates,\n                                                                                   final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap)", "full_signature": "public static KiePMMLFieldOperatorValue getConstraintEntryFromSimplePredicates(final String fieldName,\n                                                                                   final BOOLEAN_OPERATOR containerOperator,\n                                                                                   final List<SimplePredicate> simplePredicates,\n                                                                                   final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap)", "class_method_signature": "KiePMMLASTFactoryUtils.getConstraintEntryFromSimplePredicates(final String fieldName,\n                                                                                   final BOOLEAN_OPERATOR containerOperator,\n                                                                                   final List<SimplePredicate> simplePredicates,\n                                                                                   final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap)", "testcase": false, "constructor": false}, {"identifier": "getXORConstraintEntryFromSimplePredicates", "parameters": "(final List<Predicate> predicates, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap)", "modifiers": "public static", "return": "List<KiePMMLFieldOperatorValue>", "signature": "List<KiePMMLFieldOperatorValue> getXORConstraintEntryFromSimplePredicates(final List<Predicate> predicates, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap)", "full_signature": "public static List<KiePMMLFieldOperatorValue> getXORConstraintEntryFromSimplePredicates(final List<Predicate> predicates, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap)", "class_method_signature": "KiePMMLASTFactoryUtils.getXORConstraintEntryFromSimplePredicates(final List<Predicate> predicates, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap)", "testcase": false, "constructor": false}, {"identifier": "getCorrectlyFormattedObject", "parameters": "(final SimplePredicate simplePredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap)", "modifiers": "public static", "return": "Object", "signature": "Object getCorrectlyFormattedObject(final SimplePredicate simplePredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap)", "full_signature": "public static Object getCorrectlyFormattedObject(final SimplePredicate simplePredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap)", "class_method_signature": "KiePMMLASTFactoryUtils.getCorrectlyFormattedObject(final SimplePredicate simplePredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap)", "testcase": false, "constructor": false}, {"identifier": "populateKiePMMLFieldOperatorValueListWithSimplePredicates", "parameters": "(final List<KiePMMLFieldOperatorValue> toPopulate,\n                                                                          final CompoundPredicate.BooleanOperator booleanOperator,\n                                                                          final Map<String, List<SimplePredicate>> predicatesByField,\n                                                                          final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap)", "modifiers": "static", "return": "void", "signature": "void populateKiePMMLFieldOperatorValueListWithSimplePredicates(final List<KiePMMLFieldOperatorValue> toPopulate,\n                                                                          final CompoundPredicate.BooleanOperator booleanOperator,\n                                                                          final Map<String, List<SimplePredicate>> predicatesByField,\n                                                                          final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap)", "full_signature": "static void populateKiePMMLFieldOperatorValueListWithSimplePredicates(final List<KiePMMLFieldOperatorValue> toPopulate,\n                                                                          final CompoundPredicate.BooleanOperator booleanOperator,\n                                                                          final Map<String, List<SimplePredicate>> predicatesByField,\n                                                                          final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap)", "class_method_signature": "KiePMMLASTFactoryUtils.populateKiePMMLFieldOperatorValueListWithSimplePredicates(final List<KiePMMLFieldOperatorValue> toPopulate,\n                                                                          final CompoundPredicate.BooleanOperator booleanOperator,\n                                                                          final Map<String, List<SimplePredicate>> predicatesByField,\n                                                                          final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap)", "testcase": false, "constructor": false}, {"identifier": "populateKiePMMLFieldOperatorValueListWithCompoundPredicates", "parameters": "(final List<KiePMMLFieldOperatorValue> toPopulate,\n                                                                            final List<CompoundPredicate> compoundPredicates,\n                                                                            final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap)", "modifiers": "static", "return": "void", "signature": "void populateKiePMMLFieldOperatorValueListWithCompoundPredicates(final List<KiePMMLFieldOperatorValue> toPopulate,\n                                                                            final List<CompoundPredicate> compoundPredicates,\n                                                                            final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap)", "full_signature": "static void populateKiePMMLFieldOperatorValueListWithCompoundPredicates(final List<KiePMMLFieldOperatorValue> toPopulate,\n                                                                            final List<CompoundPredicate> compoundPredicates,\n                                                                            final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap)", "class_method_signature": "KiePMMLASTFactoryUtils.populateKiePMMLFieldOperatorValueListWithCompoundPredicates(final List<KiePMMLFieldOperatorValue> toPopulate,\n                                                                            final List<CompoundPredicate> compoundPredicates,\n                                                                            final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap)", "testcase": false, "constructor": false}], "file": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/utils/KiePMMLASTFactoryUtils.java"}, "focal_method": {"identifier": "populateKiePMMLFieldOperatorValueListWithCompoundPredicates", "parameters": "(final List<KiePMMLFieldOperatorValue> toPopulate,\n                                                                            final List<CompoundPredicate> compoundPredicates,\n                                                                            final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap)", "modifiers": "static", "return": "void", "body": "static void populateKiePMMLFieldOperatorValueListWithCompoundPredicates(final List<KiePMMLFieldOperatorValue> toPopulate,\n                                                                            final List<CompoundPredicate> compoundPredicates,\n                                                                            final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {\n        final List<KiePMMLFieldOperatorValue> nestedAndPredicates = new LinkedList<>();\n        final List<KiePMMLFieldOperatorValue> nestedOrPredicates = new LinkedList<>();\n        compoundPredicates.forEach(nestedCompoundPredicate -> {\n            switch ((nestedCompoundPredicate).getBooleanOperator()) {\n                case OR:\n                    nestedOrPredicates.addAll(getConstraintEntriesFromAndOrCompoundPredicate(nestedCompoundPredicate, fieldTypeMap));\n                    break;\n                case AND:\n                    nestedAndPredicates.addAll(getConstraintEntriesFromAndOrCompoundPredicate(nestedCompoundPredicate, fieldTypeMap));\n                    break;\n                default:\n                    throw new IllegalStateException(String.format(\"Unmanaged CompoundPredicate.booleanOperator %s at populateKiePMMLFieldOperatorValueListWithCompoundPredicates\", nestedCompoundPredicate.getBooleanOperator()));\n            }\n        });\n        if (!nestedAndPredicates.isEmpty()) {\n            toPopulate.add(new KiePMMLFieldOperatorValue(null, BOOLEAN_OPERATOR.AND, Collections.emptyList(), nestedAndPredicates));\n        }\n        if (!nestedOrPredicates.isEmpty()) {\n            toPopulate.add(new KiePMMLFieldOperatorValue(null, BOOLEAN_OPERATOR.OR, Collections.emptyList(), nestedOrPredicates));\n        }\n    }", "signature": "void populateKiePMMLFieldOperatorValueListWithCompoundPredicates(final List<KiePMMLFieldOperatorValue> toPopulate,\n                                                                            final List<CompoundPredicate> compoundPredicates,\n                                                                            final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap)", "full_signature": "static void populateKiePMMLFieldOperatorValueListWithCompoundPredicates(final List<KiePMMLFieldOperatorValue> toPopulate,\n                                                                            final List<CompoundPredicate> compoundPredicates,\n                                                                            final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap)", "class_method_signature": "KiePMMLASTFactoryUtils.populateKiePMMLFieldOperatorValueListWithCompoundPredicates(final List<KiePMMLFieldOperatorValue> toPopulate,\n                                                                            final List<CompoundPredicate> compoundPredicates,\n                                                                            final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap)", "testcase": false, "constructor": false, "invocations": ["forEach", "getBooleanOperator", "addAll", "getConstraintEntriesFromAndOrCompoundPredicate", "addAll", "getConstraintEntriesFromAndOrCompoundPredicate", "format", "getBooleanOperator", "isEmpty", "add", "emptyList", "isEmpty", "add", "emptyList"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}