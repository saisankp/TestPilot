{"test_class": {"identifier": "HystrixCommandTest", "superclass": "extends CommonHystrixCommandTests<TestHystrixCommand<Integer>>", "interfaces": "", "fields": [{"original_string": "@Rule\n    public HystrixRequestContextRule ctx = new HystrixRequestContextRule();", "modifier": "@Rule\n    public", "type": "HystrixRequestContextRule", "declarator": "ctx = new HystrixRequestContextRule()", "var_name": "ctx"}, {"original_string": "static AtomicInteger uniqueNameCounter = new AtomicInteger(1);", "modifier": "static", "type": "AtomicInteger", "declarator": "uniqueNameCounter = new AtomicInteger(1)", "var_name": "uniqueNameCounter"}], "file": "hystrix-core/src/test/java/com/netflix/hystrix/HystrixCommandTest.java"}, "test_case": {"identifier": "testCircuitBreakerAcrossMultipleCommandsButSameCircuitBreaker", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCircuitBreakerAcrossMultipleCommandsButSameCircuitBreaker() throws InterruptedException {\n        HystrixCommandKey key = HystrixCommandKey.Factory.asKey(\"SharedCircuitBreaker\");\n        TestCircuitBreaker circuitBreaker = new TestCircuitBreaker(key);\n        /* fail 3 times and then it should trip the circuit and stop executing */\n        // failure 1\n        TestHystrixCommand<Integer> attempt1 = getSharedCircuitBreakerCommand(key, ExecutionIsolationStrategy.THREAD, AbstractTestHystrixCommand.FallbackResult.SUCCESS, circuitBreaker);\n        System.out.println(\"COMMAND KEY (from cmd): \" + attempt1.commandKey.name());\n        attempt1.execute();\n        Thread.sleep(100);\n        assertTrue(attempt1.isResponseFromFallback());\n        assertFalse(attempt1.isCircuitBreakerOpen());\n        assertFalse(attempt1.isResponseShortCircuited());\n\n        // failure 2 with a different command, same circuit breaker\n        TestHystrixCommand<Integer> attempt2 = getSharedCircuitBreakerCommand(key, ExecutionIsolationStrategy.THREAD, AbstractTestHystrixCommand.FallbackResult.SUCCESS, circuitBreaker);\n        attempt2.execute();\n        Thread.sleep(100);\n        assertTrue(attempt2.isFailedExecution());\n        assertTrue(attempt2.isResponseFromFallback());\n        assertFalse(attempt2.isCircuitBreakerOpen());\n        assertFalse(attempt2.isResponseShortCircuited());\n\n        // failure 3 of the Hystrix, 2nd for this particular HystrixCommand\n        TestHystrixCommand<Integer> attempt3 = getSharedCircuitBreakerCommand(key, ExecutionIsolationStrategy.THREAD, AbstractTestHystrixCommand.FallbackResult.SUCCESS, circuitBreaker);\n        attempt3.execute();\n        Thread.sleep(100);\n        assertTrue(attempt3.isFailedExecution());\n        assertTrue(attempt3.isResponseFromFallback());\n        assertFalse(attempt3.isResponseShortCircuited());\n\n        // it should now be 'open' and prevent further executions\n        // after having 3 failures on the Hystrix that these 2 different HystrixCommand objects are for\n        assertTrue(attempt3.isCircuitBreakerOpen());\n\n        // attempt 4\n        TestHystrixCommand<Integer> attempt4 = getSharedCircuitBreakerCommand(key, ExecutionIsolationStrategy.THREAD, AbstractTestHystrixCommand.FallbackResult.SUCCESS, circuitBreaker);\n        attempt4.execute();\n        Thread.sleep(100);\n        assertTrue(attempt4.isResponseFromFallback());\n        // this should now be true as the response will be short-circuited\n        assertTrue(attempt4.isResponseShortCircuited());\n        // this should remain open\n        assertTrue(attempt4.isCircuitBreakerOpen());\n\n        assertSaneHystrixRequestLog(4);\n        assertCommandExecutionEvents(attempt1, HystrixEventType.FAILURE, HystrixEventType.FALLBACK_SUCCESS);\n        assertCommandExecutionEvents(attempt2, HystrixEventType.FAILURE, HystrixEventType.FALLBACK_SUCCESS);\n        assertCommandExecutionEvents(attempt3, HystrixEventType.FAILURE, HystrixEventType.FALLBACK_SUCCESS);\n        assertCommandExecutionEvents(attempt4, HystrixEventType.SHORT_CIRCUITED, HystrixEventType.FALLBACK_SUCCESS);\n    }", "signature": "void testCircuitBreakerAcrossMultipleCommandsButSameCircuitBreaker()", "full_signature": "@Test public void testCircuitBreakerAcrossMultipleCommandsButSameCircuitBreaker()", "class_method_signature": "HystrixCommandTest.testCircuitBreakerAcrossMultipleCommandsButSameCircuitBreaker()", "testcase": true, "constructor": false, "invocations": ["asKey", "getSharedCircuitBreakerCommand", "println", "name", "execute", "sleep", "assertTrue", "isResponseFromFallback", "assertFalse", "isCircuitBreakerOpen", "assertFalse", "isResponseShortCircuited", "getSharedCircuitBreakerCommand", "execute", "sleep", "assertTrue", "isFailedExecution", "assertTrue", "isResponseFromFallback", "assertFalse", "isCircuitBreakerOpen", "assertFalse", "isResponseShortCircuited", "getSharedCircuitBreakerCommand", "execute", "sleep", "assertTrue", "isFailedExecution", "assertTrue", "isResponseFromFallback", "assertFalse", "isResponseShortCircuited", "assertTrue", "isCircuitBreakerOpen", "getSharedCircuitBreakerCommand", "execute", "sleep", "assertTrue", "isResponseFromFallback", "assertTrue", "isResponseShortCircuited", "assertTrue", "isCircuitBreakerOpen", "assertSaneHystrixRequestLog", "assertCommandExecutionEvents", "assertCommandExecutionEvents", "assertCommandExecutionEvents", "assertCommandExecutionEvents"]}, "focal_class": {"identifier": "HystrixCommand", "superclass": "extends AbstractCommand<R>", "interfaces": "implements HystrixExecutable<R>, HystrixInvokableInfo<R>, HystrixObservable<R>", "fields": [{"original_string": "private final AtomicReference<Thread> executionThread = new AtomicReference<Thread>();", "modifier": "private final", "type": "AtomicReference<Thread>", "declarator": "executionThread = new AtomicReference<Thread>()", "var_name": "executionThread"}, {"original_string": "private final AtomicBoolean interruptOnFutureCancel = new AtomicBoolean(false);", "modifier": "private final", "type": "AtomicBoolean", "declarator": "interruptOnFutureCancel = new AtomicBoolean(false)", "var_name": "interruptOnFutureCancel"}], "methods": [{"identifier": "HystrixCommand", "parameters": "(HystrixCommandGroupKey group)", "modifiers": "protected", "return": "", "signature": " HystrixCommand(HystrixCommandGroupKey group)", "full_signature": "protected  HystrixCommand(HystrixCommandGroupKey group)", "class_method_signature": "HystrixCommand.HystrixCommand(HystrixCommandGroupKey group)", "testcase": false, "constructor": true}, {"identifier": "HystrixCommand", "parameters": "(HystrixCommandGroupKey group, HystrixThreadPoolKey threadPool)", "modifiers": "protected", "return": "", "signature": " HystrixCommand(HystrixCommandGroupKey group, HystrixThreadPoolKey threadPool)", "full_signature": "protected  HystrixCommand(HystrixCommandGroupKey group, HystrixThreadPoolKey threadPool)", "class_method_signature": "HystrixCommand.HystrixCommand(HystrixCommandGroupKey group, HystrixThreadPoolKey threadPool)", "testcase": false, "constructor": true}, {"identifier": "HystrixCommand", "parameters": "(HystrixCommandGroupKey group, int executionIsolationThreadTimeoutInMilliseconds)", "modifiers": "protected", "return": "", "signature": " HystrixCommand(HystrixCommandGroupKey group, int executionIsolationThreadTimeoutInMilliseconds)", "full_signature": "protected  HystrixCommand(HystrixCommandGroupKey group, int executionIsolationThreadTimeoutInMilliseconds)", "class_method_signature": "HystrixCommand.HystrixCommand(HystrixCommandGroupKey group, int executionIsolationThreadTimeoutInMilliseconds)", "testcase": false, "constructor": true}, {"identifier": "HystrixCommand", "parameters": "(HystrixCommandGroupKey group, HystrixThreadPoolKey threadPool, int executionIsolationThreadTimeoutInMilliseconds)", "modifiers": "protected", "return": "", "signature": " HystrixCommand(HystrixCommandGroupKey group, HystrixThreadPoolKey threadPool, int executionIsolationThreadTimeoutInMilliseconds)", "full_signature": "protected  HystrixCommand(HystrixCommandGroupKey group, HystrixThreadPoolKey threadPool, int executionIsolationThreadTimeoutInMilliseconds)", "class_method_signature": "HystrixCommand.HystrixCommand(HystrixCommandGroupKey group, HystrixThreadPoolKey threadPool, int executionIsolationThreadTimeoutInMilliseconds)", "testcase": false, "constructor": true}, {"identifier": "HystrixCommand", "parameters": "(Setter setter)", "modifiers": "protected", "return": "", "signature": " HystrixCommand(Setter setter)", "full_signature": "protected  HystrixCommand(Setter setter)", "class_method_signature": "HystrixCommand.HystrixCommand(Setter setter)", "testcase": false, "constructor": true}, {"identifier": "HystrixCommand", "parameters": "(HystrixCommandGroupKey group, HystrixCommandKey key, HystrixThreadPoolKey threadPoolKey, HystrixCircuitBreaker circuitBreaker, HystrixThreadPool threadPool,\n            HystrixCommandProperties.Setter commandPropertiesDefaults, HystrixThreadPoolProperties.Setter threadPoolPropertiesDefaults,\n            HystrixCommandMetrics metrics, TryableSemaphore fallbackSemaphore, TryableSemaphore executionSemaphore,\n            HystrixPropertiesStrategy propertiesStrategy, HystrixCommandExecutionHook executionHook)", "modifiers": "", "return": "", "signature": " HystrixCommand(HystrixCommandGroupKey group, HystrixCommandKey key, HystrixThreadPoolKey threadPoolKey, HystrixCircuitBreaker circuitBreaker, HystrixThreadPool threadPool,\n            HystrixCommandProperties.Setter commandPropertiesDefaults, HystrixThreadPoolProperties.Setter threadPoolPropertiesDefaults,\n            HystrixCommandMetrics metrics, TryableSemaphore fallbackSemaphore, TryableSemaphore executionSemaphore,\n            HystrixPropertiesStrategy propertiesStrategy, HystrixCommandExecutionHook executionHook)", "full_signature": "  HystrixCommand(HystrixCommandGroupKey group, HystrixCommandKey key, HystrixThreadPoolKey threadPoolKey, HystrixCircuitBreaker circuitBreaker, HystrixThreadPool threadPool,\n            HystrixCommandProperties.Setter commandPropertiesDefaults, HystrixThreadPoolProperties.Setter threadPoolPropertiesDefaults,\n            HystrixCommandMetrics metrics, TryableSemaphore fallbackSemaphore, TryableSemaphore executionSemaphore,\n            HystrixPropertiesStrategy propertiesStrategy, HystrixCommandExecutionHook executionHook)", "class_method_signature": "HystrixCommand.HystrixCommand(HystrixCommandGroupKey group, HystrixCommandKey key, HystrixThreadPoolKey threadPoolKey, HystrixCircuitBreaker circuitBreaker, HystrixThreadPool threadPool,\n            HystrixCommandProperties.Setter commandPropertiesDefaults, HystrixThreadPoolProperties.Setter threadPoolPropertiesDefaults,\n            HystrixCommandMetrics metrics, TryableSemaphore fallbackSemaphore, TryableSemaphore executionSemaphore,\n            HystrixPropertiesStrategy propertiesStrategy, HystrixCommandExecutionHook executionHook)", "testcase": false, "constructor": true}, {"identifier": "run", "parameters": "()", "modifiers": "protected abstract", "return": "R", "signature": "R run()", "full_signature": "protected abstract R run()", "class_method_signature": "HystrixCommand.run()", "testcase": false, "constructor": false}, {"identifier": "getFallback", "parameters": "()", "modifiers": "protected", "return": "R", "signature": "R getFallback()", "full_signature": "protected R getFallback()", "class_method_signature": "HystrixCommand.getFallback()", "testcase": false, "constructor": false}, {"identifier": "getExecutionObservable", "parameters": "()", "modifiers": "@Override final protected", "return": "Observable<R>", "signature": "Observable<R> getExecutionObservable()", "full_signature": "@Override final protected Observable<R> getExecutionObservable()", "class_method_signature": "HystrixCommand.getExecutionObservable()", "testcase": false, "constructor": false}, {"identifier": "getFallbackObservable", "parameters": "()", "modifiers": "@Override final protected", "return": "Observable<R>", "signature": "Observable<R> getFallbackObservable()", "full_signature": "@Override final protected Observable<R> getFallbackObservable()", "class_method_signature": "HystrixCommand.getFallbackObservable()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "()", "modifiers": "public", "return": "R", "signature": "R execute()", "full_signature": "public R execute()", "class_method_signature": "HystrixCommand.execute()", "testcase": false, "constructor": false}, {"identifier": "queue", "parameters": "()", "modifiers": "public", "return": "Future<R>", "signature": "Future<R> queue()", "full_signature": "public Future<R> queue()", "class_method_signature": "HystrixCommand.queue()", "testcase": false, "constructor": false}, {"identifier": "getFallbackMethodName", "parameters": "()", "modifiers": "@Override protected", "return": "String", "signature": "String getFallbackMethodName()", "full_signature": "@Override protected String getFallbackMethodName()", "class_method_signature": "HystrixCommand.getFallbackMethodName()", "testcase": false, "constructor": false}, {"identifier": "isFallbackUserDefined", "parameters": "()", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean isFallbackUserDefined()", "full_signature": "@Override protected boolean isFallbackUserDefined()", "class_method_signature": "HystrixCommand.isFallbackUserDefined()", "testcase": false, "constructor": false}, {"identifier": "commandIsScalar", "parameters": "()", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean commandIsScalar()", "full_signature": "@Override protected boolean commandIsScalar()", "class_method_signature": "HystrixCommand.commandIsScalar()", "testcase": false, "constructor": false}], "file": "hystrix-core/src/main/java/com/netflix/hystrix/HystrixCommand.java"}, "focal_method": {"identifier": "execute", "parameters": "()", "modifiers": "public", "return": "R", "body": "public R execute() {\n        try {\n            return queue().get();\n        } catch (Exception e) {\n            throw Exceptions.sneakyThrow(decomposeException(e));\n        }\n    }", "signature": "R execute()", "full_signature": "public R execute()", "class_method_signature": "HystrixCommand.execute()", "testcase": false, "constructor": false, "invocations": ["get", "queue", "sneakyThrow", "decomposeException"]}, "repository": {"repo_id": 6766558, "url": "https://github.com/Netflix/Hystrix", "stars": 19028, "created": "11/19/2012 8:14:46 PM +00:00", "updates": "2020-01-27T17:55:28+00:00", "fork": "False", "license": "licensed"}}