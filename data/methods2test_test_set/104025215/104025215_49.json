{"test_class": {"identifier": "StringUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "room/runtime/src/test/java/android/arch/persistence/room/util/StringUtilTest.java"}, "test_case": {"identifier": "ignoreMalformed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void ignoreMalformed() {\n        assertThat(StringUtil.splitToIntList(\"-4,a,5,7\"), is(asList(-4, 5, 7)));\n    }", "signature": "void ignoreMalformed()", "full_signature": "@Test public void ignoreMalformed()", "class_method_signature": "StringUtilTest.ignoreMalformed()", "testcase": true, "constructor": false, "invocations": ["assertThat", "splitToIntList", "is", "asList"]}, "focal_class": {"identifier": "StringUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String[] EMPTY_STRING_ARRAY = new String[0];", "modifier": "public static final", "type": "String[]", "declarator": "EMPTY_STRING_ARRAY = new String[0]", "var_name": "EMPTY_STRING_ARRAY"}], "methods": [{"identifier": "newStringBuilder", "parameters": "()", "modifiers": "public static", "return": "StringBuilder", "signature": "StringBuilder newStringBuilder()", "full_signature": "public static StringBuilder newStringBuilder()", "class_method_signature": "StringUtil.newStringBuilder()", "testcase": false, "constructor": false}, {"identifier": "appendPlaceholders", "parameters": "(StringBuilder builder, int count)", "modifiers": "public static", "return": "void", "signature": "void appendPlaceholders(StringBuilder builder, int count)", "full_signature": "public static void appendPlaceholders(StringBuilder builder, int count)", "class_method_signature": "StringUtil.appendPlaceholders(StringBuilder builder, int count)", "testcase": false, "constructor": false}, {"identifier": "splitToIntList", "parameters": "(@Nullable String input)", "modifiers": "@Nullable public static", "return": "List<Integer>", "signature": "List<Integer> splitToIntList(@Nullable String input)", "full_signature": "@Nullable public static List<Integer> splitToIntList(@Nullable String input)", "class_method_signature": "StringUtil.splitToIntList(@Nullable String input)", "testcase": false, "constructor": false}, {"identifier": "joinIntoString", "parameters": "(@Nullable List<Integer> input)", "modifiers": "@Nullable public static", "return": "String", "signature": "String joinIntoString(@Nullable List<Integer> input)", "full_signature": "@Nullable public static String joinIntoString(@Nullable List<Integer> input)", "class_method_signature": "StringUtil.joinIntoString(@Nullable List<Integer> input)", "testcase": false, "constructor": false}], "file": "room/runtime/src/main/java/android/arch/persistence/room/util/StringUtil.java"}, "focal_method": {"identifier": "splitToIntList", "parameters": "(@Nullable String input)", "modifiers": "@Nullable public static", "return": "List<Integer>", "body": "@Nullable\n    public static List<Integer> splitToIntList(@Nullable String input) {\n        if (input == null) {\n            return null;\n        }\n        List<Integer> result = new ArrayList<>();\n        StringTokenizer tokenizer = new StringTokenizer(input, \",\");\n        while (tokenizer.hasMoreElements()) {\n            final String item = tokenizer.nextToken();\n            try {\n                result.add(Integer.parseInt(item));\n            } catch (NumberFormatException ex) {\n                Log.e(\"ROOM\", \"Malformed integer list\", ex);\n            }\n        }\n        return result;\n    }", "signature": "List<Integer> splitToIntList(@Nullable String input)", "full_signature": "@Nullable public static List<Integer> splitToIntList(@Nullable String input)", "class_method_signature": "StringUtil.splitToIntList(@Nullable String input)", "testcase": false, "constructor": false, "invocations": ["hasMoreElements", "nextToken", "add", "parseInt", "e"]}, "repository": {"repo_id": 104025215, "url": "https://github.com/Rayduh/support", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 8, "size": 253405, "license": "licensed"}}