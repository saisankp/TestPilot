{"test_class": {"identifier": "ArgumentLexerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "ArgumentLexer lexer = new ArgumentLexer();", "modifier": "", "type": "ArgumentLexer", "declarator": "lexer = new ArgumentLexer()", "var_name": "lexer"}, {"original_string": "Environment environment = mock(Environment.class);", "modifier": "", "type": "Environment", "declarator": "environment = mock(Environment.class)", "var_name": "environment"}, {"original_string": "Element location = mock(Element.class);", "modifier": "", "type": "Element", "declarator": "location = mock(Element.class)", "var_name": "location"}], "file": "commons/src/test/java/com/karuslabs/commons/command/aot/lexers/ArgumentLexerTest.java"}, "test_case": {"identifier": "lex", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void lex() {\n        var tokens = lexer.lex(environment, location, \"<argument>\");\n        var token = tokens.get(0);\n        \n        assertEquals(1, tokens.size());\n        assertEquals(location, token.location);\n        assertEquals(\"<argument>\", token.literal);\n        assertEquals(\"argument\", token.lexeme);\n    }", "signature": "void lex()", "full_signature": "@Test void lex()", "class_method_signature": "ArgumentLexerTest.lex()", "testcase": true, "constructor": false, "invocations": ["lex", "get", "assertEquals", "size", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "ArgumentLexer", "superclass": "extends MemoizeLexer", "interfaces": "", "fields": [], "methods": [{"identifier": "lex", "parameters": "(Logger logger, String lexeme)", "modifiers": "@Override public", "return": "List<Token>", "signature": "List<Token> lex(Logger logger, String lexeme)", "full_signature": "@Override public List<Token> lex(Logger logger, String lexeme)", "class_method_signature": "ArgumentLexer.lex(Logger logger, String lexeme)", "testcase": false, "constructor": false}], "file": "commons/src/main/java/com/karuslabs/commons/command/aot/lexers/ArgumentLexer.java"}, "focal_method": {"identifier": "lex", "parameters": "(Logger logger, String lexeme)", "modifiers": "@Override public", "return": "List<Token>", "body": "@Override\n    public List<Token> lex(Logger logger, String lexeme) {\n        if (!lexeme.startsWith(\"<\") || !lexeme.endsWith(\">\")) {\n            logger.error(lexeme, \"is an invalid argument\", \"should be enclosed by \\\"<\\\" and \\\">\\\"\");\n            return EMPTY_LIST;\n        }\n        \n        if (lexeme.contains(\"|\")) {\n            logger.error(lexeme, \"contains \\\"|\\\"\", \"an argument should not have aliases\");\n            return EMPTY_LIST;\n        }\n        \n        var argument = lexeme.substring(1, lexeme.length() - 1);\n        if (argument.isEmpty()) {\n            logger.error(lexeme, \"is empty\", \"an argument should not be empty\");\n            return EMPTY_LIST;\n        }\n        \n        if (argument.startsWith(\"<\") || argument.endsWith(\">\")) {\n            logger.error(lexeme, \"contains trailing \\\"<\\\"s or \\\">\\\"s\");\n        }\n        \n        return List.of(token(ARGUMENT, lexeme, argument, Set.of()));\n    }", "signature": "List<Token> lex(Logger logger, String lexeme)", "full_signature": "@Override public List<Token> lex(Logger logger, String lexeme)", "class_method_signature": "ArgumentLexer.lex(Logger logger, String lexeme)", "testcase": false, "constructor": false, "invocations": ["startsWith", "endsWith", "error", "contains", "error", "substring", "length", "isEmpty", "error", "startsWith", "endsWith", "error", "of", "token", "of"]}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}