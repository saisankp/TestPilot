{"test_class": {"identifier": "DisplayerSubtypeSelectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    DisplayerSubtypeSelector.View subtypeView;", "modifier": "@Mock", "type": "DisplayerSubtypeSelector.View", "declarator": "subtypeView", "var_name": "subtypeView"}, {"original_string": "@Mock\n    RendererManager rendererManager;", "modifier": "@Mock", "type": "RendererManager", "declarator": "rendererManager", "var_name": "rendererManager"}, {"original_string": "@Mock\n    RendererLibrary rendererLibrary;", "modifier": "@Mock", "type": "RendererLibrary", "declarator": "rendererLibrary", "var_name": "rendererLibrary"}, {"original_string": "@Mock\n    EventSourceMock<DisplayerSubtypeSelectedEvent> subtypeSelectedEvent;", "modifier": "@Mock", "type": "EventSourceMock<DisplayerSubtypeSelectedEvent>", "declarator": "subtypeSelectedEvent", "var_name": "subtypeSelectedEvent"}, {"original_string": "DisplayerSubtypeSelector presenter;", "modifier": "", "type": "DisplayerSubtypeSelector", "declarator": "presenter", "var_name": "presenter"}], "file": "dashbuilder-client/dashbuilder-displayer-client/src/test/java/org/dashbuilder/displayer/client/widgets/DisplayerSubtypeSelectorTest.java"}, "test_case": {"identifier": "testOnSelect", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOnSelect() {\n        presenter.onSelect(LINE);\n        assertEquals(presenter.getSelectedSubtype(), LINE);\n        verify(subtypeSelectedEvent).fire(any(DisplayerSubtypeSelectedEvent.class));\n    }", "signature": "void testOnSelect()", "full_signature": "@Test public void testOnSelect()", "class_method_signature": "DisplayerSubtypeSelectorTest.testOnSelect()", "testcase": true, "constructor": false, "invocations": ["onSelect", "assertEquals", "getSelectedSubtype", "fire", "verify", "any"]}, "focal_class": {"identifier": "DisplayerSubtypeSelector", "superclass": "", "interfaces": "implements IsWidget", "fields": [{"original_string": "View view = null;", "modifier": "", "type": "View", "declarator": "view = null", "var_name": "view"}, {"original_string": "RendererManager rendererManager;", "modifier": "", "type": "RendererManager", "declarator": "rendererManager", "var_name": "rendererManager"}, {"original_string": "DisplayerSubType selectedSubtype;", "modifier": "", "type": "DisplayerSubType", "declarator": "selectedSubtype", "var_name": "selectedSubtype"}, {"original_string": "Event<DisplayerSubtypeSelectedEvent> selectEvent;", "modifier": "", "type": "Event<DisplayerSubtypeSelectedEvent>", "declarator": "selectEvent", "var_name": "selectEvent"}], "methods": [{"identifier": "DisplayerSubtypeSelector", "parameters": "(View view,\n                                    RendererManager rendererManager,\n                                    Event<DisplayerSubtypeSelectedEvent> selectEvent)", "modifiers": "@Inject public", "return": "", "signature": " DisplayerSubtypeSelector(View view,\n                                    RendererManager rendererManager,\n                                    Event<DisplayerSubtypeSelectedEvent> selectEvent)", "full_signature": "@Inject public  DisplayerSubtypeSelector(View view,\n                                    RendererManager rendererManager,\n                                    Event<DisplayerSubtypeSelectedEvent> selectEvent)", "class_method_signature": "DisplayerSubtypeSelector.DisplayerSubtypeSelector(View view,\n                                    RendererManager rendererManager,\n                                    Event<DisplayerSubtypeSelectedEvent> selectEvent)", "testcase": false, "constructor": true}, {"identifier": "asWidget", "parameters": "()", "modifiers": "@Override public", "return": "Widget", "signature": "Widget asWidget()", "full_signature": "@Override public Widget asWidget()", "class_method_signature": "DisplayerSubtypeSelector.asWidget()", "testcase": false, "constructor": false}, {"identifier": "getSelectedSubtype", "parameters": "()", "modifiers": "public", "return": "DisplayerSubType", "signature": "DisplayerSubType getSelectedSubtype()", "full_signature": "public DisplayerSubType getSelectedSubtype()", "class_method_signature": "DisplayerSubtypeSelector.getSelectedSubtype()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(DisplayerType type, DisplayerSubType selectedSubType)", "modifiers": "public", "return": "void", "signature": "void init(DisplayerType type, DisplayerSubType selectedSubType)", "full_signature": "public void init(DisplayerType type, DisplayerSubType selectedSubType)", "class_method_signature": "DisplayerSubtypeSelector.init(DisplayerType type, DisplayerSubType selectedSubType)", "testcase": false, "constructor": false}, {"identifier": "onSelect", "parameters": "(DisplayerSubType subtype)", "modifiers": "", "return": "void", "signature": "void onSelect(DisplayerSubType subtype)", "full_signature": " void onSelect(DisplayerSubType subtype)", "class_method_signature": "DisplayerSubtypeSelector.onSelect(DisplayerSubType subtype)", "testcase": false, "constructor": false}], "file": "dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/DisplayerSubtypeSelector.java"}, "focal_method": {"identifier": "onSelect", "parameters": "(DisplayerSubType subtype)", "modifiers": "", "return": "void", "body": "void onSelect(DisplayerSubType subtype) {\n        selectedSubtype = subtype;\n        selectEvent.fire(new DisplayerSubtypeSelectedEvent(selectedSubtype));\n    }", "signature": "void onSelect(DisplayerSubType subtype)", "full_signature": " void onSelect(DisplayerSubType subtype)", "class_method_signature": "DisplayerSubtypeSelector.onSelect(DisplayerSubType subtype)", "testcase": false, "constructor": false, "invocations": ["fire"]}, "repository": {"repo_id": 17898911, "url": "https://github.com/dashbuilder/dashbuilder", "language": "Java", "is_fork": false, "fork_count": 119, "stargazer_count": 160, "size": 10456, "license": "licensed"}}