{"test_class": {"identifier": "LoggerFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-common/src/test/java/com/alibaba/dubbo/common/logger/LoggerFactoryTest.java"}, "test_case": {"identifier": "testGetLogger", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetLogger() {\n        Logger logger1 = LoggerFactory.getLogger(this.getClass());\n        Logger logger2 = LoggerFactory.getLogger(this.getClass());\n\n        assertThat(logger1, is(logger2));\n    }", "signature": "void testGetLogger()", "full_signature": "@Test public void testGetLogger()", "class_method_signature": "LoggerFactoryTest.testGetLogger()", "testcase": true, "constructor": false, "invocations": ["getLogger", "getClass", "getLogger", "getClass", "assertThat", "is"]}, "focal_class": {"identifier": "LoggerFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ConcurrentMap<String, FailsafeLogger> LOGGERS = new ConcurrentHashMap<String, FailsafeLogger>();", "modifier": "private static final", "type": "ConcurrentMap<String, FailsafeLogger>", "declarator": "LOGGERS = new ConcurrentHashMap<String, FailsafeLogger>()", "var_name": "LOGGERS"}, {"original_string": "private static volatile LoggerAdapter LOGGER_ADAPTER;", "modifier": "private static volatile", "type": "LoggerAdapter", "declarator": "LOGGER_ADAPTER", "var_name": "LOGGER_ADAPTER"}], "methods": [{"identifier": "LoggerFactory", "parameters": "()", "modifiers": "private", "return": "", "signature": " LoggerFactory()", "full_signature": "private  LoggerFactory()", "class_method_signature": "LoggerFactory.LoggerFactory()", "testcase": false, "constructor": true}, {"identifier": "setLoggerAdapter", "parameters": "(String loggerAdapter)", "modifiers": "public static", "return": "void", "signature": "void setLoggerAdapter(String loggerAdapter)", "full_signature": "public static void setLoggerAdapter(String loggerAdapter)", "class_method_signature": "LoggerFactory.setLoggerAdapter(String loggerAdapter)", "testcase": false, "constructor": false}, {"identifier": "setLoggerAdapter", "parameters": "(LoggerAdapter loggerAdapter)", "modifiers": "public static", "return": "void", "signature": "void setLoggerAdapter(LoggerAdapter loggerAdapter)", "full_signature": "public static void setLoggerAdapter(LoggerAdapter loggerAdapter)", "class_method_signature": "LoggerFactory.setLoggerAdapter(LoggerAdapter loggerAdapter)", "testcase": false, "constructor": false}, {"identifier": "getLogger", "parameters": "(Class<?> key)", "modifiers": "public static", "return": "Logger", "signature": "Logger getLogger(Class<?> key)", "full_signature": "public static Logger getLogger(Class<?> key)", "class_method_signature": "LoggerFactory.getLogger(Class<?> key)", "testcase": false, "constructor": false}, {"identifier": "getLogger", "parameters": "(String key)", "modifiers": "public static", "return": "Logger", "signature": "Logger getLogger(String key)", "full_signature": "public static Logger getLogger(String key)", "class_method_signature": "LoggerFactory.getLogger(String key)", "testcase": false, "constructor": false}, {"identifier": "getLevel", "parameters": "()", "modifiers": "public static", "return": "Level", "signature": "Level getLevel()", "full_signature": "public static Level getLevel()", "class_method_signature": "LoggerFactory.getLevel()", "testcase": false, "constructor": false}, {"identifier": "setLevel", "parameters": "(Level level)", "modifiers": "public static", "return": "void", "signature": "void setLevel(Level level)", "full_signature": "public static void setLevel(Level level)", "class_method_signature": "LoggerFactory.setLevel(Level level)", "testcase": false, "constructor": false}, {"identifier": "getFile", "parameters": "()", "modifiers": "public static", "return": "File", "signature": "File getFile()", "full_signature": "public static File getFile()", "class_method_signature": "LoggerFactory.getFile()", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/com/alibaba/dubbo/common/logger/LoggerFactory.java"}, "focal_method": {"identifier": "getLogger", "parameters": "(Class<?> key)", "modifiers": "public static", "return": "Logger", "body": "public static Logger getLogger(Class<?> key) {\n        FailsafeLogger logger = LOGGERS.get(key.getName());\n        if (logger == null) {\n            LOGGERS.putIfAbsent(key.getName(), new FailsafeLogger(LOGGER_ADAPTER.getLogger(key)));\n            logger = LOGGERS.get(key.getName());\n        }\n        return logger;\n    }", "signature": "Logger getLogger(Class<?> key)", "full_signature": "public static Logger getLogger(Class<?> key)", "class_method_signature": "LoggerFactory.getLogger(Class<?> key)", "testcase": false, "constructor": false, "invocations": ["get", "getName", "putIfAbsent", "getName", "getLogger", "get", "getName"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}