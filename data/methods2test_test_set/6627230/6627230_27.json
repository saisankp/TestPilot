{"test_class": {"identifier": "FieldTokenResolverTest", "superclass": "extends AbstractTokenResolverTest", "interfaces": "", "fields": [], "file": "dal-jdbc/src/test/java/org/unidal/dal/jdbc/query/token/resolver/FieldTokenResolverTest.java"}, "test_case": {"identifier": "testFieldWithSameTable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testFieldWithSameTable() throws Exception {\n      QueryDef query = new QueryDef(\"test\", UserEntity.class, QueryType.SELECT, \"<FIELD name='user-id' table='user'/>\");\n      Readset<?> readset = UserEntity.READSET_FULL;\n      User user = new User();\n      QueryContext ctx = getSelectContext(query, user, readset);\n\n      m_queryResolver.resolve(ctx);\n      Assert.assertEquals(\"u.user_id\", ctx.getSqlStatement());\n   }", "signature": "void testFieldWithSameTable()", "full_signature": "@Test public void testFieldWithSameTable()", "class_method_signature": "FieldTokenResolverTest.testFieldWithSameTable()", "testcase": true, "constructor": false, "invocations": ["getSelectContext", "resolve", "assertEquals", "getSqlStatement"]}, "focal_class": {"identifier": "FieldTokenResolver", "superclass": "", "interfaces": "implements TokenResolver", "fields": [{"original_string": "@Inject\n   private EntityInfoManager m_manager;", "modifier": "@Inject\n   private", "type": "EntityInfoManager", "declarator": "m_manager", "var_name": "m_manager"}, {"original_string": "@Inject\n   private ExpressionResolver m_expressionResolver;", "modifier": "@Inject\n   private", "type": "ExpressionResolver", "declarator": "m_expressionResolver", "var_name": "m_expressionResolver"}, {"original_string": "@Inject\n   private QueryNaming m_naming;", "modifier": "@Inject\n   private", "type": "QueryNaming", "declarator": "m_naming", "var_name": "m_naming"}], "methods": [{"identifier": "resolve", "parameters": "(Token token, QueryContext ctx)", "modifiers": "public", "return": "String", "signature": "String resolve(Token token, QueryContext ctx)", "full_signature": "public String resolve(Token token, QueryContext ctx)", "class_method_signature": "FieldTokenResolver.resolve(Token token, QueryContext ctx)", "testcase": false, "constructor": false}], "file": "dal-jdbc/src/main/java/org/unidal/dal/jdbc/query/token/resolver/FieldTokenResolver.java"}, "focal_method": {"identifier": "resolve", "parameters": "(Token token, QueryContext ctx)", "modifiers": "public", "return": "String", "body": "public String resolve(Token token, QueryContext ctx) {\n      if (token.getType() != TokenType.FIELD) {\n         throw new DalRuntimeException(\"Internal error: only FIELD token is supported by \" + getClass());\n      }\n\n      SimpleTagToken field = (SimpleTagToken) token;\n      String fieldName = field.getAttribute(\"name\", null);\n      String tableName = field.getAttribute(\"table\", ctx.getEntityInfo().getLogicalName());\n      String[] logicalNameAndAlias = ctx.getEntityInfo().getLogicalNameAndAlias(tableName);\n      EntityInfo entityInfo = m_manager.getEntityInfo(logicalNameAndAlias[0]);\n      Attribute attribute = entityInfo.getAttribute(fieldName);\n\n      if (attribute != null) {\n         switch (ctx.getQuery().getType()) {\n         case SELECT:\n            if (!ctx.isTableResolved()) {\n               DataField f = entityInfo.getFieldByName(fieldName);\n\n               ctx.addOutField(f);\n               ctx.addOutSubObjectName(null);\n            }\n\n            if (attribute.selectExpr().length() > 0) {\n               return m_expressionResolver.resolve(ctx, attribute.selectExpr());\n            } else {\n               String tableAlias = logicalNameAndAlias[1];\n\n               return m_naming.getField(attribute.field(), tableAlias);\n            }\n         case INSERT:\n            return m_naming.getField(attribute.field());\n         case UPDATE:\n            return m_naming.getField(attribute.field());\n         case DELETE:\n            return m_naming.getField(attribute.field());\n         default:\n            throw new DalRuntimeException(\"TABLE token does not support query type: \" + ctx.getQuery().getType());\n         }\n      } else {\n         throw new DalRuntimeException(\"DataField(\" + fieldName + \") is not defined in \"\n               + ctx.getQuery().getEntityClass() + \". Query: \" + ctx.getQuery());\n      }\n   }", "signature": "String resolve(Token token, QueryContext ctx)", "full_signature": "public String resolve(Token token, QueryContext ctx)", "class_method_signature": "FieldTokenResolver.resolve(Token token, QueryContext ctx)", "testcase": false, "constructor": false, "invocations": ["getType", "getClass", "getAttribute", "getAttribute", "getLogicalName", "getEntityInfo", "getLogicalNameAndAlias", "getEntityInfo", "getEntityInfo", "getAttribute", "getType", "getQuery", "isTableResolved", "getFieldByName", "addOutField", "addOutSubObjectName", "length", "selectExpr", "resolve", "selectExpr", "getField", "field", "getField", "field", "getField", "field", "getField", "field", "getType", "getQuery", "getEntityClass", "getQuery", "getQuery"]}, "repository": {"repo_id": 6627230, "url": "https://github.com/unidal/frameworks", "language": "Java", "is_fork": false, "fork_count": 96, "stargazer_count": 100, "size": 3009, "license": "licensed"}}