{"test_class": {"identifier": "RpkiObjectCleanupServiceTest", "superclass": "extends GenericStorageTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private TrustAnchorsFactory factory;", "modifier": "@Autowired\n    private", "type": "TrustAnchorsFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "@Autowired\n    private RpkiObjectCleanupService subject;", "modifier": "@Autowired\n    private", "type": "RpkiObjectCleanupService", "declarator": "subject", "var_name": "subject"}, {"original_string": "@Autowired\n    private RpkiObjects rpkiObjects;", "modifier": "@Autowired\n    private", "type": "RpkiObjects", "declarator": "rpkiObjects", "var_name": "rpkiObjects"}], "file": "rpki-validator/src/test/java/net/ripe/rpki/validator3/domain/cleanup/RpkiObjectCleanupServiceTest.java"}, "test_case": {"identifier": "should_delete_objects_not_reachable_from_manifest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_delete_objects_not_reachable_from_manifest() throws Exception {\n        BigInteger serial = TrustAnchorsFactory.nextSerial();\n        TrustAnchor trustAnchor = wtx(tx -> factory.createTrustAnchor(tx, ta ->\n                ta.roaPrefixes(Collections.singletonList(RoaPrefix.of(IpRange.parse(\"127.0.0.0/8\"), null, Asn.parse(\n                        \"123\"), DateTime.now().toInstant().getMillis(),\n                        DateTime.now().plusYears(1).toInstant().getMillis(),\n                        serial)))));\n\n        // No orphans, so nothing to delete\n        assertThat(subject.cleanupRpkiObjects()).isEqualTo(0);\n\n\n        RpkiObject orphan = new RpkiObject(\n            new X509ResourceCertificateBuilder()\n                .withResources(IpResourceSet.parse(\"10.0.0.0/8\"))\n                .withIssuerDN(trustAnchor.getCertificate().getSubject())\n                .withSubjectDN(new X500Principal(\"CN=orphan\"))\n                .withSerial(serial)\n                .withPublicKey(KEY_PAIR_FACTORY.generate().getPublic())\n                .withSigningKeyPair(KEY_PAIR_FACTORY.generate())\n                .withValidityPeriod(new ValidityPeriod(DateTime.now(), DateTime.now().plusYears(1)))\n                .build()\n        );\n        wtx0(tx -> rpkiObjects.put(tx, orphan));\n\n        // Orphan is still new, so nothing to delete\n        assertThat(subject.cleanupRpkiObjects()).isEqualTo(0);\n\n        wtx0(tx -> rpkiObjects.markReachable(tx, orphan.key(), InstantWithoutNanos.now().minus(Duration.ofDays(10))));\n\n        // Orphan is now old, so should be deleted\n        assertThat(subject.cleanupRpkiObjects()).isEqualTo(1);\n    }", "signature": "void should_delete_objects_not_reachable_from_manifest()", "full_signature": "@Test public void should_delete_objects_not_reachable_from_manifest()", "class_method_signature": "RpkiObjectCleanupServiceTest.should_delete_objects_not_reachable_from_manifest()", "testcase": true, "constructor": false, "invocations": ["nextSerial", "wtx", "createTrustAnchor", "roaPrefixes", "singletonList", "of", "parse", "parse", "getMillis", "toInstant", "now", "getMillis", "toInstant", "plusYears", "now", "isEqualTo", "assertThat", "cleanupRpkiObjects", "build", "withValidityPeriod", "withSigningKeyPair", "withPublicKey", "withSerial", "withSubjectDN", "withIssuerDN", "withResources", "parse", "getSubject", "getCertificate", "getPublic", "generate", "generate", "now", "plusYears", "now", "wtx0", "put", "isEqualTo", "assertThat", "cleanupRpkiObjects", "wtx0", "markReachable", "key", "minus", "now", "ofDays", "isEqualTo", "assertThat", "cleanupRpkiObjects"]}, "focal_class": {"identifier": "RpkiObjectCleanupService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private RpkiObjects rpkiObjects;", "modifier": "@Autowired\n    private", "type": "RpkiObjects", "declarator": "rpkiObjects", "var_name": "rpkiObjects"}, {"original_string": "private final Duration cleanupGraceDuration;", "modifier": "private final", "type": "Duration", "declarator": "cleanupGraceDuration", "var_name": "cleanupGraceDuration"}, {"original_string": "private final Storage storage;", "modifier": "private final", "type": "Storage", "declarator": "storage", "var_name": "storage"}], "methods": [{"identifier": "RpkiObjectCleanupService", "parameters": "(@Value(\"${rpki.validator.rpki.object.cleanup.grace.duration}\") String cleanupGraceDuration,\n                                    Storage storage)", "modifiers": "public", "return": "", "signature": " RpkiObjectCleanupService(@Value(\"${rpki.validator.rpki.object.cleanup.grace.duration}\") String cleanupGraceDuration,\n                                    Storage storage)", "full_signature": "public  RpkiObjectCleanupService(@Value(\"${rpki.validator.rpki.object.cleanup.grace.duration}\") String cleanupGraceDuration,\n                                    Storage storage)", "class_method_signature": "RpkiObjectCleanupService.RpkiObjectCleanupService(@Value(\"${rpki.validator.rpki.object.cleanup.grace.duration}\") String cleanupGraceDuration,\n                                    Storage storage)", "testcase": false, "constructor": true}, {"identifier": "cleanupRpkiObjects", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long cleanupRpkiObjects()", "full_signature": "public long cleanupRpkiObjects()", "class_method_signature": "RpkiObjectCleanupService.cleanupRpkiObjects()", "testcase": false, "constructor": false}], "file": "rpki-validator/src/main/java/net/ripe/rpki/validator3/domain/cleanup/RpkiObjectCleanupService.java"}, "focal_method": {"identifier": "cleanupRpkiObjects", "parameters": "()", "modifiers": "public", "return": "long", "body": "public long cleanupRpkiObjects() throws Exception {\n        final InstantWithoutNanos unreachableSince = InstantWithoutNanos.now().minus(cleanupGraceDuration);\n        final Pair<Long, Long> deleted = Time.timed(() -> rpkiObjects.deleteUnreachableObjects(unreachableSince));\n        log.info(\"Removed {} RPKI objects that have not been marked reachable since {}, took {}ms\", deleted.getLeft(), unreachableSince, deleted.getRight());\n        storage.gc();\n        return deleted.getLeft();\n    }", "signature": "long cleanupRpkiObjects()", "full_signature": "public long cleanupRpkiObjects()", "class_method_signature": "RpkiObjectCleanupService.cleanupRpkiObjects()", "testcase": false, "constructor": false, "invocations": ["minus", "now", "timed", "deleteUnreachableObjects", "info", "getLeft", "getRight", "gc", "getLeft"]}, "repository": {"repo_id": 104217624, "url": "https://github.com/RIPE-NCC/rpki-validator-3", "stars": 32, "created": "9/20/2017 1:15:05 PM +00:00", "updates": "2020-01-27T10:48:38+00:00", "fork": "False", "license": "licensed"}}