{"test_class": {"identifier": "PipelineNodeUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "blueocean-pipeline-api-impl/src/test/java/io/jenkins/blueocean/rest/impl/pipeline/PipelineNodeUtilTest.java"}, "test_case": {"identifier": "getCauseOfBlockage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getCauseOfBlockage() throws Exception {\n        CauseOfBlockage blockage = mock(CauseOfBlockage.class);\n        CauseOfBlockage taskBlockage = mock(CauseOfBlockage.class);\n\n        FlowNode stage = mock(FlowNode.class);\n        FlowNode nodeBlock = mock(FlowNode.class);\n        Queue.Item item = mock(Queue.Item.class);\n        mockStatic(QueueItemAction.class);\n        String cause = null;\n\n        cause = PipelineNodeUtil.getCauseOfBlockage(stage, null);\n        assertNull(cause);\n\n        when(nodeBlock.getParents()).thenReturn(ImmutableList.of());\n        cause = PipelineNodeUtil.getCauseOfBlockage(stage, null);\n        assertNull(cause);\n\n        when(nodeBlock.getParents()).thenReturn(ImmutableList.of(stage));\n        when(QueueItemAction.getQueueItem(nodeBlock)).thenReturn(null);\n        cause = PipelineNodeUtil.getCauseOfBlockage(stage, null);\n        assertNull(cause);\n\n        when(QueueItemAction.getQueueItem(nodeBlock)).thenReturn(item);\n        when(item.getCauseOfBlockage()).thenReturn(null);\n        cause = PipelineNodeUtil.getCauseOfBlockage(stage, null);\n        assertNull(cause);\n\n        when(blockage.getShortDescription()).thenReturn(\"test\");\n        when(item.getCauseOfBlockage()).thenReturn(blockage);\n        cause = PipelineNodeUtil.getCauseOfBlockage(stage, nodeBlock);\n        assertEquals(\"test\", cause);\n\n        when(blockage.getShortDescription()).thenReturn(null);\n        cause = PipelineNodeUtil.getCauseOfBlockage(stage, null);\n        assertNull(cause);\n\n        when(taskBlockage.getShortDescription()).thenReturn(\"test1\");\n        Whitebox.setInternalState(item,\"task\", mock(Queue.Task.class));\n        when(item.task.getCauseOfBlockage()).thenReturn(taskBlockage);\n        cause = PipelineNodeUtil.getCauseOfBlockage(stage, nodeBlock);\n        assertEquals(\"test1\", cause);\n    }", "signature": "void getCauseOfBlockage()", "full_signature": "@Test public void getCauseOfBlockage()", "class_method_signature": "PipelineNodeUtilTest.getCauseOfBlockage()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "mock", "mock", "mockStatic", "getCauseOfBlockage", "assertNull", "thenReturn", "when", "getParents", "of", "getCauseOfBlockage", "assertNull", "thenReturn", "when", "getParents", "of", "thenReturn", "when", "getQueueItem", "getCauseOfBlockage", "assertNull", "thenReturn", "when", "getQueueItem", "thenReturn", "when", "getCauseOfBlockage", "getCauseOfBlockage", "assertNull", "thenReturn", "when", "getShortDescription", "thenReturn", "when", "getCauseOfBlockage", "getCauseOfBlockage", "assertEquals", "thenReturn", "when", "getShortDescription", "getCauseOfBlockage", "assertNull", "thenReturn", "when", "getShortDescription", "setInternalState", "mock", "thenReturn", "when", "getCauseOfBlockage", "getCauseOfBlockage", "assertEquals"]}, "focal_class": {"identifier": "PipelineNodeUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Predicate<FlowNode> isLoggable = input -> {\n            if(input == null)\n                return false;\n            return input.getAction(LogAction.class) != null;\n    };", "modifier": "public static final", "type": "Predicate<FlowNode>", "declarator": "isLoggable = input -> {\n            if(input == null)\n                return false;\n            return input.getAction(LogAction.class) != null;\n    }", "var_name": "isLoggable"}], "methods": [{"identifier": "getStatus", "parameters": "(@Nullable ErrorAction errorAction)", "modifiers": "@Nonnull public static", "return": "BlueRun.BlueRunResult", "signature": "BlueRun.BlueRunResult getStatus(@Nullable ErrorAction errorAction)", "full_signature": "@Nonnull public static BlueRun.BlueRunResult getStatus(@Nullable ErrorAction errorAction)", "class_method_signature": "PipelineNodeUtil.getStatus(@Nullable ErrorAction errorAction)", "testcase": false, "constructor": false}, {"identifier": "getStatus", "parameters": "(@Nonnull Throwable error)", "modifiers": "@Nonnull public static", "return": "BlueRun.BlueRunResult", "signature": "BlueRun.BlueRunResult getStatus(@Nonnull Throwable error)", "full_signature": "@Nonnull public static BlueRun.BlueRunResult getStatus(@Nonnull Throwable error)", "class_method_signature": "PipelineNodeUtil.getStatus(@Nonnull Throwable error)", "testcase": false, "constructor": false}, {"identifier": "getDisplayName", "parameters": "(@Nonnull FlowNode node)", "modifiers": "@Nonnull public static", "return": "String", "signature": "String getDisplayName(@Nonnull FlowNode node)", "full_signature": "@Nonnull public static String getDisplayName(@Nonnull FlowNode node)", "class_method_signature": "PipelineNodeUtil.getDisplayName(@Nonnull FlowNode node)", "testcase": false, "constructor": false}, {"identifier": "isStage", "parameters": "(FlowNode node)", "modifiers": "public static", "return": "boolean", "signature": "boolean isStage(FlowNode node)", "full_signature": "public static boolean isStage(FlowNode node)", "class_method_signature": "PipelineNodeUtil.isStage(FlowNode node)", "testcase": false, "constructor": false}, {"identifier": "isSyntheticStage", "parameters": "(@Nullable FlowNode node)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSyntheticStage(@Nullable FlowNode node)", "full_signature": "public static boolean isSyntheticStage(@Nullable FlowNode node)", "class_method_signature": "PipelineNodeUtil.isSyntheticStage(@Nullable FlowNode node)", "testcase": false, "constructor": false}, {"identifier": "getSyntheticStage", "parameters": "(@Nullable FlowNode node)", "modifiers": "@CheckForNull public static", "return": "TagsAction", "signature": "TagsAction getSyntheticStage(@Nullable FlowNode node)", "full_signature": "@CheckForNull public static TagsAction getSyntheticStage(@Nullable FlowNode node)", "class_method_signature": "PipelineNodeUtil.getSyntheticStage(@Nullable FlowNode node)", "testcase": false, "constructor": false}, {"identifier": "isPostSyntheticStage", "parameters": "(@Nullable FlowNode node)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPostSyntheticStage(@Nullable FlowNode node)", "full_signature": "public static boolean isPostSyntheticStage(@Nullable FlowNode node)", "class_method_signature": "PipelineNodeUtil.isPostSyntheticStage(@Nullable FlowNode node)", "testcase": false, "constructor": false}, {"identifier": "isSkippedStage", "parameters": "(@Nullable FlowNode node)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSkippedStage(@Nullable FlowNode node)", "full_signature": "public static boolean isSkippedStage(@Nullable FlowNode node)", "class_method_signature": "PipelineNodeUtil.isSkippedStage(@Nullable FlowNode node)", "testcase": false, "constructor": false}, {"identifier": "isPreSyntheticStage", "parameters": "(@Nullable FlowNode node)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPreSyntheticStage(@Nullable FlowNode node)", "full_signature": "public static boolean isPreSyntheticStage(@Nullable FlowNode node)", "class_method_signature": "PipelineNodeUtil.isPreSyntheticStage(@Nullable FlowNode node)", "testcase": false, "constructor": false}, {"identifier": "isParallelBranch", "parameters": "(@Nullable FlowNode node)", "modifiers": "public static", "return": "boolean", "signature": "boolean isParallelBranch(@Nullable FlowNode node)", "full_signature": "public static boolean isParallelBranch(@Nullable FlowNode node)", "class_method_signature": "PipelineNodeUtil.isParallelBranch(@Nullable FlowNode node)", "testcase": false, "constructor": false}, {"identifier": "getCauseOfBlockage", "parameters": "(@Nonnull FlowNode stage, @Nullable FlowNode nodeBlock)", "modifiers": "public static @CheckForNull", "return": "String", "signature": "String getCauseOfBlockage(@Nonnull FlowNode stage, @Nullable FlowNode nodeBlock)", "full_signature": "public static @CheckForNull String getCauseOfBlockage(@Nonnull FlowNode stage, @Nullable FlowNode nodeBlock)", "class_method_signature": "PipelineNodeUtil.getCauseOfBlockage(@Nonnull FlowNode stage, @Nullable FlowNode nodeBlock)", "testcase": false, "constructor": false}, {"identifier": "isPausedForInputStep", "parameters": "(@Nonnull StepAtomNode step, @Nullable InputAction inputAction)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPausedForInputStep(@Nonnull StepAtomNode step, @Nullable InputAction inputAction)", "full_signature": "public static boolean isPausedForInputStep(@Nonnull StepAtomNode step, @Nullable InputAction inputAction)", "class_method_signature": "PipelineNodeUtil.isPausedForInputStep(@Nonnull StepAtomNode step, @Nullable InputAction inputAction)", "testcase": false, "constructor": false}, {"identifier": "isAgentStart", "parameters": "(@Nullable FlowNode node)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAgentStart(@Nullable FlowNode node)", "full_signature": "public static boolean isAgentStart(@Nullable FlowNode node)", "class_method_signature": "PipelineNodeUtil.isAgentStart(@Nullable FlowNode node)", "testcase": false, "constructor": false}], "file": "blueocean-pipeline-api-impl/src/main/java/io/jenkins/blueocean/rest/impl/pipeline/PipelineNodeUtil.java"}, "focal_method": {"identifier": "getCauseOfBlockage", "parameters": "(@Nonnull FlowNode stage, @Nullable FlowNode nodeBlock)", "modifiers": "public static @CheckForNull", "return": "String", "body": "public static @CheckForNull String getCauseOfBlockage(@Nonnull FlowNode stage, @Nullable FlowNode nodeBlock) {\n        if(nodeBlock != null){\n            //Check and see if this node block is inside this stage\n            for(FlowNode p:nodeBlock.getParents()){\n                if(p.equals(stage)){\n                    Queue.Item item = QueueItemAction.getQueueItem(nodeBlock);\n                    if (item != null) {\n                        CauseOfBlockage causeOfBlockage = item.getCauseOfBlockage();\n                        String cause = null;\n                        if (causeOfBlockage != null) {\n                            cause = causeOfBlockage.getShortDescription();\n                            if (cause == null) {\n                                causeOfBlockage = item.task.getCauseOfBlockage();\n                                if(causeOfBlockage != null) {\n                                    return causeOfBlockage.getShortDescription();\n                                }\n                            }\n                        }\n                        return cause;\n                    }\n                }\n            }\n        }\n        return null;\n    }", "signature": "String getCauseOfBlockage(@Nonnull FlowNode stage, @Nullable FlowNode nodeBlock)", "full_signature": "public static @CheckForNull String getCauseOfBlockage(@Nonnull FlowNode stage, @Nullable FlowNode nodeBlock)", "class_method_signature": "PipelineNodeUtil.getCauseOfBlockage(@Nonnull FlowNode stage, @Nullable FlowNode nodeBlock)", "testcase": false, "constructor": false, "invocations": ["getParents", "equals", "getQueueItem", "getCauseOfBlockage", "getShortDescription", "getCauseOfBlockage", "getShortDescription"]}, "repository": {"repo_id": 50250915, "url": "https://github.com/jenkinsci/blueocean-plugin", "stars": 2605, "created": "1/23/2016 6:02:45 PM +00:00", "updates": "2020-01-25T17:58:46+00:00", "fork": "False", "license": "licensed"}}