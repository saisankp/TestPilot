{"test_class": {"identifier": "SimplifiedTimeSeriesLoaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TSC_DATASET_PATH_PREFIX = \"data\" + File.separator;", "modifier": "private static final", "type": "String", "declarator": "TSC_DATASET_PATH_PREFIX = \"data\" + File.separator", "var_name": "TSC_DATASET_PATH_PREFIX"}], "file": "JAICore/jaicore-ml/src/test/java/ai/libs/jaicore/ml/classification/singlelabel/timeseries/util/SimplifiedTimeSeriesLoaderTest.java"}, "test_case": {"identifier": "testMultivariateArffFileLoadingStringClass", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testMultivariateArffFileLoadingStringClass() throws TimeSeriesLoadingException {\n\n\t\tFile datasetFile0 = new File(TSC_DATASET_PATH_PREFIX\n\t\t\t\t+ \"multivariate\" + File.separator + \"FingerMovements\" + File.separator\n\t\t\t\t+ \"FingerMovementsDimension1_TRAIN.arff\");\n\t\tFile datasetFile1 = new File(TSC_DATASET_PATH_PREFIX\n\t\t\t\t+ \"multivariate\" + File.separator + \"FingerMovements\" + File.separator\n\t\t\t\t+ \"FingerMovementsDimension2_TRAIN.arff\");\n\n\t\tfinal Pair<TimeSeriesDataset2, ClassMapper> pairResult = SimplifiedTimeSeriesLoader.loadArffs(datasetFile0,\n\t\t\t\tdatasetFile1);\n\t\tTimeSeriesDataset2 result = pairResult.getX();\n\n\t\tfinal int expectedNumInstances = 316;\n\t\tfinal int expectedNumSteps = 50;\n\t\tfinal int expectedNumVariables = 2; // Multivariate\n\t\tfinal int expectedNumTargets = 316;\n\t\tfinal List<String> expectedClassDomain = Arrays.asList(\"left\", \"right\");\n\n\t\tassertEquals(expectedNumInstances, result.getNumberOfInstances());\n\t\tassertEquals(expectedNumSteps, result.getValues(0)[0].length);\n\t\tassertEquals(expectedNumVariables, result.getNumberOfVariables());\n\t\tassertEquals(expectedNumTargets, result.getTargets().length);\n\t\tassertEquals(expectedClassDomain, pairResult.getY().getClassValues());\n\t}", "signature": "void testMultivariateArffFileLoadingStringClass()", "full_signature": "@Test public void testMultivariateArffFileLoadingStringClass()", "class_method_signature": "SimplifiedTimeSeriesLoaderTest.testMultivariateArffFileLoadingStringClass()", "testcase": true, "constructor": false, "invocations": ["loadArffs", "getX", "asList", "assertEquals", "getNumberOfInstances", "assertEquals", "getValues", "assertEquals", "getNumberOfVariables", "assertEquals", "getTargets", "assertEquals", "getClassValues", "getY"]}, "focal_class": {"identifier": "SimplifiedTimeSeriesLoader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(SimplifiedTimeSeriesLoader.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(SimplifiedTimeSeriesLoader.class)", "var_name": "LOGGER"}, {"original_string": "public static final String DEFAULT_CHARSET = \"UTF-8\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_CHARSET = \"UTF-8\"", "var_name": "DEFAULT_CHARSET"}, {"original_string": "private static final String ARFF_ATTRIBUTE_PREFIX = \"@attribute\";", "modifier": "private static final", "type": "String", "declarator": "ARFF_ATTRIBUTE_PREFIX = \"@attribute\"", "var_name": "ARFF_ATTRIBUTE_PREFIX"}, {"original_string": "private static final String ARFF_VALUE_DELIMITER = \",\";", "modifier": "private static final", "type": "String", "declarator": "ARFF_VALUE_DELIMITER = \",\"", "var_name": "ARFF_VALUE_DELIMITER"}, {"original_string": "private static final String ARFF_DATA_FLAG = \"@data\";", "modifier": "private static final", "type": "String", "declarator": "ARFF_DATA_FLAG = \"@data\"", "var_name": "ARFF_DATA_FLAG"}], "methods": [{"identifier": "SimplifiedTimeSeriesLoader", "parameters": "()", "modifiers": "private", "return": "", "signature": " SimplifiedTimeSeriesLoader()", "full_signature": "private  SimplifiedTimeSeriesLoader()", "class_method_signature": "SimplifiedTimeSeriesLoader.SimplifiedTimeSeriesLoader()", "testcase": false, "constructor": true}, {"identifier": "loadArff", "parameters": "(final File arffFile)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Pair<TimeSeriesDataset2, ClassMapper>", "signature": "Pair<TimeSeriesDataset2, ClassMapper> loadArff(final File arffFile)", "full_signature": "@SuppressWarnings(\"unchecked\") public static Pair<TimeSeriesDataset2, ClassMapper> loadArff(final File arffFile)", "class_method_signature": "SimplifiedTimeSeriesLoader.loadArff(final File arffFile)", "testcase": false, "constructor": false}, {"identifier": "loadArffs", "parameters": "(final File... arffFiles)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Pair<TimeSeriesDataset2, ClassMapper>", "signature": "Pair<TimeSeriesDataset2, ClassMapper> loadArffs(final File... arffFiles)", "full_signature": "@SuppressWarnings(\"unchecked\") public static Pair<TimeSeriesDataset2, ClassMapper> loadArffs(final File... arffFiles)", "class_method_signature": "SimplifiedTimeSeriesLoader.loadArffs(final File... arffFiles)", "testcase": false, "constructor": false}, {"identifier": "loadTimeSeriesWithTargetFromArffFile", "parameters": "(final File arffFile)", "modifiers": "private static", "return": "Object[]", "signature": "Object[] loadTimeSeriesWithTargetFromArffFile(final File arffFile)", "full_signature": "private static Object[] loadTimeSeriesWithTargetFromArffFile(final File arffFile)", "class_method_signature": "SimplifiedTimeSeriesLoader.loadTimeSeriesWithTargetFromArffFile(final File arffFile)", "testcase": false, "constructor": false}, {"identifier": "getInterval", "parameters": "(final double[][] matrix, final int begin, final int end)", "modifiers": "private static", "return": "double[][]", "signature": "double[][] getInterval(final double[][] matrix, final int begin, final int end)", "full_signature": "private static double[][] getInterval(final double[][] matrix, final int begin, final int end)", "class_method_signature": "SimplifiedTimeSeriesLoader.getInterval(final double[][] matrix, final int begin, final int end)", "testcase": false, "constructor": false}, {"identifier": "getInterval", "parameters": "(final int[] array, final int begin, final int end)", "modifiers": "private static", "return": "int[]", "signature": "int[] getInterval(final int[] array, final int begin, final int end)", "full_signature": "private static int[] getInterval(final int[] array, final int begin, final int end)", "class_method_signature": "SimplifiedTimeSeriesLoader.getInterval(final int[] array, final int begin, final int end)", "testcase": false, "constructor": false}, {"identifier": "countFileLines", "parameters": "(final File file)", "modifiers": "public static", "return": "int", "signature": "int countFileLines(final File file)", "full_signature": "public static int countFileLines(final File file)", "class_method_signature": "SimplifiedTimeSeriesLoader.countFileLines(final File file)", "testcase": false, "constructor": false}], "file": "JAICore/jaicore-ml/src/main/java/ai/libs/jaicore/ml/classification/singlelabel/timeseries/util/SimplifiedTimeSeriesLoader.java"}, "focal_method": {"identifier": "loadArffs", "parameters": "(final File... arffFiles)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Pair<TimeSeriesDataset2, ClassMapper>", "body": "@SuppressWarnings(\"unchecked\")\n\tpublic static Pair<TimeSeriesDataset2, ClassMapper> loadArffs(final File... arffFiles) throws TimeSeriesLoadingException {\n\t\tif (arffFiles == null) {\n\t\t\tthrow new IllegalArgumentException(\"Parameter 'arffFiles' must not be null!\");\n\t\t}\n\n\t\tfinal List<double[][]> matrices = new ArrayList<>();\n\t\tint[] target = null;\n\t\tList<String> classNames = null;\n\n\t\tfor (final File arffFile : arffFiles) {\n\t\t\tObject[] tsTargetClassNames = loadTimeSeriesWithTargetFromArffFile(arffFile);\n\n\t\t\tif (classNames == null && tsTargetClassNames[2] != null) {\n\t\t\t\tclassNames = (List<String>) tsTargetClassNames[2];\n\t\t\t} else {\n\t\t\t\t// Check whether the same class names are used among all of the time series\n\t\t\t\tList<String> furtherClassNames = (List<String>) tsTargetClassNames[2];\n\t\t\t\tif ((classNames != null && furtherClassNames == null) || (furtherClassNames != null && !furtherClassNames.equals(classNames))) {\n\t\t\t\t\tthrow new TimeSeriesLoadingException(\"Could not load multivariate time series with different targets. Target values have to be stored in each \" + \"time series arff file and must be equal!\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (target == null) {\n\t\t\t\ttarget = (int[]) tsTargetClassNames[1];\n\t\t\t} else {\n\t\t\t\t// Check whether the same targets are used among all of the time series\n\t\t\t\tint[] furtherTarget = (int[]) tsTargetClassNames[1];\n\t\t\t\tif (furtherTarget == null || target.length != furtherTarget.length || !Arrays.equals(target, furtherTarget)) {\n\t\t\t\t\tthrow new TimeSeriesLoadingException(\"Could not load multivariate time series with different targets. Target values have to be stored in each \" + \"time series arff file and must be equal!\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Check for same instance length\n\t\t\tif (!matrices.isEmpty() && ((double[][]) tsTargetClassNames[0]).length != matrices.get(0).length) {\n\t\t\t\tthrow new TimeSeriesLoadingException(\"All time series must have the same first dimensionality (number of instances).\");\n\t\t\t}\n\n\t\t\tmatrices.add((double[][]) tsTargetClassNames[0]);\n\t\t}\n\t\tClassMapper cm = null;\n\t\tif (classNames != null) {\n\t\t\tcm = new ClassMapper(classNames);\n\t\t}\n\n\t\treturn new Pair<>(new TimeSeriesDataset2(matrices, new ArrayList<>(), target), cm);\n\t}", "signature": "Pair<TimeSeriesDataset2, ClassMapper> loadArffs(final File... arffFiles)", "full_signature": "@SuppressWarnings(\"unchecked\") public static Pair<TimeSeriesDataset2, ClassMapper> loadArffs(final File... arffFiles)", "class_method_signature": "SimplifiedTimeSeriesLoader.loadArffs(final File... arffFiles)", "testcase": false, "constructor": false, "invocations": ["loadTimeSeriesWithTargetFromArffFile", "equals", "equals", "isEmpty", "get", "add"]}, "repository": {"repo_id": 95635499, "url": "https://github.com/fmohr/AILibs", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 25, "size": 155873, "license": "licensed"}}