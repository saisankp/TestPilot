{"test_class": {"identifier": "ChunkTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String _4SPACES = \"    4spaces    \";", "modifier": "private static final", "type": "String", "declarator": "_4SPACES = \"    4spaces    \"", "var_name": "_4SPACES"}, {"original_string": "private static final String _TAB = \"\\t4spaces    \";", "modifier": "private static final", "type": "String", "declarator": "_TAB = \"\\t4spaces    \"", "var_name": "_TAB"}, {"original_string": "public static final String SOURCE11 = \"./src/test/resources/com/itextpdf/text/Chunk/source11.pdf\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE11 = \"./src/test/resources/com/itextpdf/text/Chunk/source11.pdf\"", "var_name": "SOURCE11"}, {"original_string": "public static final String SOURCE12 = \"./src/test/resources/com/itextpdf/text/Chunk/source12.pdf\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE12 = \"./src/test/resources/com/itextpdf/text/Chunk/source12.pdf\"", "var_name": "SOURCE12"}, {"original_string": "public static final String SOURCE13 = \"./src/test/resources/com/itextpdf/text/Chunk/source13.pdf\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE13 = \"./src/test/resources/com/itextpdf/text/Chunk/source13.pdf\"", "var_name": "SOURCE13"}, {"original_string": "public static final String SOURCE14 = \"./src/test/resources/com/itextpdf/text/Chunk/source14.pdf\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE14 = \"./src/test/resources/com/itextpdf/text/Chunk/source14.pdf\"", "var_name": "SOURCE14"}, {"original_string": "public static final String SOURCE15 = \"./src/test/resources/com/itextpdf/text/Chunk/source15.pdf\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE15 = \"./src/test/resources/com/itextpdf/text/Chunk/source15.pdf\"", "var_name": "SOURCE15"}, {"original_string": "public static final String SOURCE16 = \"./src/test/resources/com/itextpdf/text/Chunk/source16.pdf\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE16 = \"./src/test/resources/com/itextpdf/text/Chunk/source16.pdf\"", "var_name": "SOURCE16"}, {"original_string": "public static final String SOURCE17 = \"./src/test/resources/com/itextpdf/text/Chunk/source17.pdf\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE17 = \"./src/test/resources/com/itextpdf/text/Chunk/source17.pdf\"", "var_name": "SOURCE17"}, {"original_string": "public static final String SOURCE_FOLDER = \"./src/test/resources/com/itextpdf/text/Chunk/\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE_FOLDER = \"./src/test/resources/com/itextpdf/text/Chunk/\"", "var_name": "SOURCE_FOLDER"}, {"original_string": "public static final String OUTFOLDER = \"./target/com/itextpdf/test/Chunk\";", "modifier": "public static final", "type": "String", "declarator": "OUTFOLDER = \"./target/com/itextpdf/test/Chunk\"", "var_name": "OUTFOLDER"}, {"original_string": "public static final String OUTTABSPACED = OUTFOLDER + \"/tabspaceDocument.pdf\";", "modifier": "public static final", "type": "String", "declarator": "OUTTABSPACED = OUTFOLDER + \"/tabspaceDocument.pdf\"", "var_name": "OUTTABSPACED"}, {"original_string": "public static final String OUTABSPACEC = OUTFOLDER + \"/tabspaceColumnText.pdf\";", "modifier": "public static final", "type": "String", "declarator": "OUTABSPACEC = OUTFOLDER + \"/tabspaceColumnText.pdf\"", "var_name": "OUTABSPACEC"}, {"original_string": "public static final String OUTTABD = OUTFOLDER + \"/tabDocument.pdf\";", "modifier": "public static final", "type": "String", "declarator": "OUTTABD = OUTFOLDER + \"/tabDocument.pdf\"", "var_name": "OUTTABD"}, {"original_string": "public static final String OUTABC = OUTFOLDER + \"/tabColumnText.pdf\";", "modifier": "public static final", "type": "String", "declarator": "OUTABC = OUTFOLDER + \"/tabColumnText.pdf\"", "var_name": "OUTABC"}, {"original_string": "public static final String OUTABSTOPSC = OUTFOLDER + \"/tabstopsColumnText.pdf\";", "modifier": "public static final", "type": "String", "declarator": "OUTABSTOPSC = OUTFOLDER + \"/tabstopsColumnText.pdf\"", "var_name": "OUTABSTOPSC"}, {"original_string": "public static final String OUTSPTRIMDOC = OUTFOLDER + \"/spaceTrimDoc.pdf\";", "modifier": "public static final", "type": "String", "declarator": "OUTSPTRIMDOC = OUTFOLDER + \"/spaceTrimDoc.pdf\"", "var_name": "OUTSPTRIMDOC"}, {"original_string": "public static final String OUTSPTRIMCT = OUTFOLDER + \"/spaceTrimColumnText.pdf\";", "modifier": "public static final", "type": "String", "declarator": "OUTSPTRIMCT = OUTFOLDER + \"/spaceTrimColumnText.pdf\"", "var_name": "OUTSPTRIMCT"}], "file": "itext/src/test/java/com/itextpdf/text/ChunkTest.java"}, "test_case": {"identifier": "tabColumnTextTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void tabColumnTextTest() throws Exception {\n        Font f = FontFactory.getFont(FontFactory.COURIER, 11);\n        Document doc = new Document();\n        Paragraph p;\n        FileOutputStream fs = new FileOutputStream(OUTABC);\n        PdfWriter writer = PdfWriter.getInstance(doc, fs);\n        writer.setCompressionLevel(0);\n        doc.open();\n        ColumnText ct = new ColumnText(writer.getDirectContent());\n        ct.setSimpleColumn(36, 36, 436, 800);\n        java.util.List<TabStop> tabStopsList = new ArrayList<TabStop>();\n        tabStopsList.add(new TabStop(100, new DottedLineSeparator()));\n        tabStopsList.add(new TabStop(200, new LineSeparator(), TabStop.Alignment.CENTER));\n        tabStopsList.add(new TabStop(300, new DottedLineSeparator(), TabStop.Alignment.RIGHT));\n        p = new Paragraph(new Chunk(\"Hello world\", f));\n        p.setTabSettings(new TabSettings(tabStopsList, 50));\n        addTabs(p, f, 0, \"la|la\");\n        ct.addElement(p);\n\n        tabStopsList = new ArrayList<TabStop>();\n        tabStopsList.add(new TabStop(100, new DottedLineSeparator()));\n        tabStopsList.add(new TabStop(200, new LineSeparator(), TabStop.Alignment.ANCHOR));\n        tabStopsList.add(new TabStop(300, new DottedLineSeparator(), TabStop.Alignment.ANCHOR));\n        p = new Paragraph(new Chunk(\"Hello World!!!\"));\n        p.setTabSettings(new TabSettings(tabStopsList, 50));\n        addTabs(p, f, 12, \"l.aal\");\n        addTabs(p, f, 12, \"laa.l\");\n        addTabs(p, f, 12, \"la.al\");\n        ct.addElement(p);\n\n        f.setSize(16);\n        p = new Paragraph(new Chunk(\"Hello world\", f));\n        tabStopsList = new ArrayList<TabStop>();\n        tabStopsList.add(new TabStop(100, new DottedLineSeparator()));\n        tabStopsList.add(new TabStop(200, new LineSeparator(), TabStop.Alignment.ANCHOR, ','));\n        tabStopsList.add(new TabStop(300, new DottedLineSeparator(), TabStop.Alignment.ANCHOR));\n        p.setTabSettings(new TabSettings(tabStopsList, 50));\n        addTabs(p, f, 15, \"l.aal\");\n        addTabs(p, f, 13, \"laa,l\");\n        addTabs(p, f, 13, \"laa.l\");\n        addTabs(p, f, 13, \"l,aal\");\n        ct.addElement(p);\n\n        f = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12);\n        p = new Paragraph(new Chunk(\"Hello world\", f));\n        p.setTabSettings(new TabSettings(38));\n        addTabs(p, f, 0);\n        ct.addElement(p);\n\n        f.setSize(20);\n        p = new Paragraph(new Chunk(\"Hello world\", f));\n        p.setTabSettings(new TabSettings(38));\n        addTabs(p, f, 0);\n        ct.addElement(p);\n        ct.go();\n        doc.close();\n        fs.close();\n        Assert.assertTrue(compareInnerText(SOURCE14, OUTABC));\n\n    }", "signature": "void tabColumnTextTest()", "full_signature": "@Test public void tabColumnTextTest()", "class_method_signature": "ChunkTest.tabColumnTextTest()", "testcase": true, "constructor": false, "invocations": ["getFont", "getInstance", "setCompressionLevel", "open", "getDirectContent", "setSimpleColumn", "add", "add", "add", "setTabSettings", "addTabs", "addElement", "add", "add", "add", "setTabSettings", "addTabs", "addTabs", "addTabs", "addElement", "setSize", "add", "add", "add", "setTabSettings", "addTabs", "addTabs", "addTabs", "addTabs", "addElement", "getFont", "setTabSettings", "addTabs", "addElement", "setSize", "setTabSettings", "addTabs", "addElement", "go", "close", "close", "assertTrue", "compareInnerText"]}, "focal_class": {"identifier": "Chunk", "superclass": "", "interfaces": "implements Element, IAccessibleElement", "fields": [{"original_string": "public static final String OBJECT_REPLACEMENT_CHARACTER = \"\\ufffc\";", "modifier": "public static final", "type": "String", "declarator": "OBJECT_REPLACEMENT_CHARACTER = \"\\ufffc\"", "var_name": "OBJECT_REPLACEMENT_CHARACTER"}, {"original_string": "public static final Chunk NEWLINE = new Chunk(\"\\n\");", "modifier": "public static final", "type": "Chunk", "declarator": "NEWLINE = new Chunk(\"\\n\")", "var_name": "NEWLINE"}, {"original_string": "public static final Chunk NEXTPAGE = new Chunk(\"\");", "modifier": "public static final", "type": "Chunk", "declarator": "NEXTPAGE = new Chunk(\"\")", "var_name": "NEXTPAGE"}, {"original_string": "public static final Chunk TABBING = new Chunk(Float.NaN, false);", "modifier": "public static final", "type": "Chunk", "declarator": "TABBING = new Chunk(Float.NaN, false)", "var_name": "TABBING"}, {"original_string": "public static final Chunk SPACETABBING = new Chunk(Float.NaN, true);", "modifier": "public static final", "type": "Chunk", "declarator": "SPACETABBING = new Chunk(Float.NaN, true)", "var_name": "SPACETABBING"}, {"original_string": "protected StringBuffer content = null;", "modifier": "protected", "type": "StringBuffer", "declarator": "content = null", "var_name": "content"}, {"original_string": "protected Font font = null;", "modifier": "protected", "type": "Font", "declarator": "font = null", "var_name": "font"}, {"original_string": "protected HashMap<String, Object> attributes = null;", "modifier": "protected", "type": "HashMap<String, Object>", "declarator": "attributes = null", "var_name": "attributes"}, {"original_string": "protected PdfName role = null;", "modifier": "protected", "type": "PdfName", "declarator": "role = null", "var_name": "role"}, {"original_string": "protected HashMap<PdfName, PdfObject> accessibleAttributes = null;", "modifier": "protected", "type": "HashMap<PdfName, PdfObject>", "declarator": "accessibleAttributes = null", "var_name": "accessibleAttributes"}, {"original_string": "private AccessibleElementId id = null;", "modifier": "private", "type": "AccessibleElementId", "declarator": "id = null", "var_name": "id"}, {"original_string": "public static final String SEPARATOR = \"SEPARATOR\";", "modifier": "public static final", "type": "String", "declarator": "SEPARATOR = \"SEPARATOR\"", "var_name": "SEPARATOR"}, {"original_string": "public static final String TAB = \"TAB\";", "modifier": "public static final", "type": "String", "declarator": "TAB = \"TAB\"", "var_name": "TAB"}, {"original_string": "public static final String TABSETTINGS = \"TABSETTINGS\";", "modifier": "public static final", "type": "String", "declarator": "TABSETTINGS = \"TABSETTINGS\"", "var_name": "TABSETTINGS"}, {"original_string": "private String contentWithNoTabs = null;", "modifier": "private", "type": "String", "declarator": "contentWithNoTabs = null", "var_name": "contentWithNoTabs"}, {"original_string": "public static final String HSCALE = \"HSCALE\";", "modifier": "public static final", "type": "String", "declarator": "HSCALE = \"HSCALE\"", "var_name": "HSCALE"}, {"original_string": "public static final String UNDERLINE = \"UNDERLINE\";", "modifier": "public static final", "type": "String", "declarator": "UNDERLINE = \"UNDERLINE\"", "var_name": "UNDERLINE"}, {"original_string": "public static final String SUBSUPSCRIPT = \"SUBSUPSCRIPT\";", "modifier": "public static final", "type": "String", "declarator": "SUBSUPSCRIPT = \"SUBSUPSCRIPT\"", "var_name": "SUBSUPSCRIPT"}, {"original_string": "public static final String SKEW = \"SKEW\";", "modifier": "public static final", "type": "String", "declarator": "SKEW = \"SKEW\"", "var_name": "SKEW"}, {"original_string": "public static final String BACKGROUND = \"BACKGROUND\";", "modifier": "public static final", "type": "String", "declarator": "BACKGROUND = \"BACKGROUND\"", "var_name": "BACKGROUND"}, {"original_string": "public static final String TEXTRENDERMODE = \"TEXTRENDERMODE\";", "modifier": "public static final", "type": "String", "declarator": "TEXTRENDERMODE = \"TEXTRENDERMODE\"", "var_name": "TEXTRENDERMODE"}, {"original_string": "public static final String SPLITCHARACTER = \"SPLITCHARACTER\";", "modifier": "public static final", "type": "String", "declarator": "SPLITCHARACTER = \"SPLITCHARACTER\"", "var_name": "SPLITCHARACTER"}, {"original_string": "public static final String HYPHENATION = \"HYPHENATION\";", "modifier": "public static final", "type": "String", "declarator": "HYPHENATION = \"HYPHENATION\"", "var_name": "HYPHENATION"}, {"original_string": "public static final String REMOTEGOTO = \"REMOTEGOTO\";", "modifier": "public static final", "type": "String", "declarator": "REMOTEGOTO = \"REMOTEGOTO\"", "var_name": "REMOTEGOTO"}, {"original_string": "public static final String LOCALGOTO = \"LOCALGOTO\";", "modifier": "public static final", "type": "String", "declarator": "LOCALGOTO = \"LOCALGOTO\"", "var_name": "LOCALGOTO"}, {"original_string": "public static final String LOCALDESTINATION = \"LOCALDESTINATION\";", "modifier": "public static final", "type": "String", "declarator": "LOCALDESTINATION = \"LOCALDESTINATION\"", "var_name": "LOCALDESTINATION"}, {"original_string": "public static final String GENERICTAG = \"GENERICTAG\";", "modifier": "public static final", "type": "String", "declarator": "GENERICTAG = \"GENERICTAG\"", "var_name": "GENERICTAG"}, {"original_string": "public static final String LINEHEIGHT = \"LINEHEIGHT\";", "modifier": "public static final", "type": "String", "declarator": "LINEHEIGHT = \"LINEHEIGHT\"", "var_name": "LINEHEIGHT"}, {"original_string": "public static final String IMAGE = \"IMAGE\";", "modifier": "public static final", "type": "String", "declarator": "IMAGE = \"IMAGE\"", "var_name": "IMAGE"}, {"original_string": "public static final String ACTION = \"ACTION\";", "modifier": "public static final", "type": "String", "declarator": "ACTION = \"ACTION\"", "var_name": "ACTION"}, {"original_string": "public static final String NEWPAGE = \"NEWPAGE\";", "modifier": "public static final", "type": "String", "declarator": "NEWPAGE = \"NEWPAGE\"", "var_name": "NEWPAGE"}, {"original_string": "public static final String PDFANNOTATION = \"PDFANNOTATION\";", "modifier": "public static final", "type": "String", "declarator": "PDFANNOTATION = \"PDFANNOTATION\"", "var_name": "PDFANNOTATION"}, {"original_string": "public static final String COLOR = \"COLOR\";", "modifier": "public static final", "type": "String", "declarator": "COLOR = \"COLOR\"", "var_name": "COLOR"}, {"original_string": "public static final String ENCODING = \"ENCODING\";", "modifier": "public static final", "type": "String", "declarator": "ENCODING = \"ENCODING\"", "var_name": "ENCODING"}, {"original_string": "public static final String CHAR_SPACING = \"CHAR_SPACING\";", "modifier": "public static final", "type": "String", "declarator": "CHAR_SPACING = \"CHAR_SPACING\"", "var_name": "CHAR_SPACING"}, {"original_string": "public static final String WORD_SPACING = \"WORD_SPACING\";", "modifier": "public static final", "type": "String", "declarator": "WORD_SPACING = \"WORD_SPACING\"", "var_name": "WORD_SPACING"}, {"original_string": "public static final String WHITESPACE = \"WHITESPACE\";", "modifier": "public static final", "type": "String", "declarator": "WHITESPACE = \"WHITESPACE\"", "var_name": "WHITESPACE"}], "methods": [{"identifier": "Chunk", "parameters": "()", "modifiers": "public", "return": "", "signature": " Chunk()", "full_signature": "public  Chunk()", "class_method_signature": "Chunk.Chunk()", "testcase": false, "constructor": true}, {"identifier": "Chunk", "parameters": "(final Chunk ck)", "modifiers": "public", "return": "", "signature": " Chunk(final Chunk ck)", "full_signature": "public  Chunk(final Chunk ck)", "class_method_signature": "Chunk.Chunk(final Chunk ck)", "testcase": false, "constructor": true}, {"identifier": "Chunk", "parameters": "(final String content, final Font font)", "modifiers": "public", "return": "", "signature": " Chunk(final String content, final Font font)", "full_signature": "public  Chunk(final String content, final Font font)", "class_method_signature": "Chunk.Chunk(final String content, final Font font)", "testcase": false, "constructor": true}, {"identifier": "Chunk", "parameters": "(final String content)", "modifiers": "public", "return": "", "signature": " Chunk(final String content)", "full_signature": "public  Chunk(final String content)", "class_method_signature": "Chunk.Chunk(final String content)", "testcase": false, "constructor": true}, {"identifier": "Chunk", "parameters": "(final char c, final Font font)", "modifiers": "public", "return": "", "signature": " Chunk(final char c, final Font font)", "full_signature": "public  Chunk(final char c, final Font font)", "class_method_signature": "Chunk.Chunk(final char c, final Font font)", "testcase": false, "constructor": true}, {"identifier": "Chunk", "parameters": "(final char c)", "modifiers": "public", "return": "", "signature": " Chunk(final char c)", "full_signature": "public  Chunk(final char c)", "class_method_signature": "Chunk.Chunk(final char c)", "testcase": false, "constructor": true}, {"identifier": "Chunk", "parameters": "(final Image image, final float offsetX, final float offsetY)", "modifiers": "public", "return": "", "signature": " Chunk(final Image image, final float offsetX, final float offsetY)", "full_signature": "public  Chunk(final Image image, final float offsetX, final float offsetY)", "class_method_signature": "Chunk.Chunk(final Image image, final float offsetX, final float offsetY)", "testcase": false, "constructor": true}, {"identifier": "Chunk", "parameters": "(final DrawInterface separator)", "modifiers": "public", "return": "", "signature": " Chunk(final DrawInterface separator)", "full_signature": "public  Chunk(final DrawInterface separator)", "class_method_signature": "Chunk.Chunk(final DrawInterface separator)", "testcase": false, "constructor": true}, {"identifier": "Chunk", "parameters": "(final DrawInterface separator, final boolean vertical)", "modifiers": "public", "return": "", "signature": " Chunk(final DrawInterface separator, final boolean vertical)", "full_signature": "public  Chunk(final DrawInterface separator, final boolean vertical)", "class_method_signature": "Chunk.Chunk(final DrawInterface separator, final boolean vertical)", "testcase": false, "constructor": true}, {"identifier": "Chunk", "parameters": "(final DrawInterface separator, final float tabPosition)", "modifiers": "@Deprecated public", "return": "", "signature": " Chunk(final DrawInterface separator, final float tabPosition)", "full_signature": "@Deprecated public  Chunk(final DrawInterface separator, final float tabPosition)", "class_method_signature": "Chunk.Chunk(final DrawInterface separator, final float tabPosition)", "testcase": false, "constructor": true}, {"identifier": "Chunk", "parameters": "(final DrawInterface separator, final float tabPosition, final boolean newline)", "modifiers": "@Deprecated public", "return": "", "signature": " Chunk(final DrawInterface separator, final float tabPosition, final boolean newline)", "full_signature": "@Deprecated public  Chunk(final DrawInterface separator, final float tabPosition, final boolean newline)", "class_method_signature": "Chunk.Chunk(final DrawInterface separator, final float tabPosition, final boolean newline)", "testcase": false, "constructor": true}, {"identifier": "Chunk", "parameters": "(final Float tabInterval, final boolean isWhitespace)", "modifiers": "private", "return": "", "signature": " Chunk(final Float tabInterval, final boolean isWhitespace)", "full_signature": "private  Chunk(final Float tabInterval, final boolean isWhitespace)", "class_method_signature": "Chunk.Chunk(final Float tabInterval, final boolean isWhitespace)", "testcase": false, "constructor": true}, {"identifier": "Chunk", "parameters": "(final Image image, final float offsetX, final float offsetY,\n\t\t\tfinal boolean changeLeading)", "modifiers": "public", "return": "", "signature": " Chunk(final Image image, final float offsetX, final float offsetY,\n\t\t\tfinal boolean changeLeading)", "full_signature": "public  Chunk(final Image image, final float offsetX, final float offsetY,\n\t\t\tfinal boolean changeLeading)", "class_method_signature": "Chunk.Chunk(final Image image, final float offsetX, final float offsetY,\n\t\t\tfinal boolean changeLeading)", "testcase": false, "constructor": true}, {"identifier": "process", "parameters": "(final ElementListener listener)", "modifiers": "public", "return": "boolean", "signature": "boolean process(final ElementListener listener)", "full_signature": "public boolean process(final ElementListener listener)", "class_method_signature": "Chunk.process(final ElementListener listener)", "testcase": false, "constructor": false}, {"identifier": "type", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int type()", "full_signature": "public int type()", "class_method_signature": "Chunk.type()", "testcase": false, "constructor": false}, {"identifier": "getChunks", "parameters": "()", "modifiers": "public", "return": "List<Chunk>", "signature": "List<Chunk> getChunks()", "full_signature": "public List<Chunk> getChunks()", "class_method_signature": "Chunk.getChunks()", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(final String string)", "modifiers": "public", "return": "StringBuffer", "signature": "StringBuffer append(final String string)", "full_signature": "public StringBuffer append(final String string)", "class_method_signature": "Chunk.append(final String string)", "testcase": false, "constructor": false}, {"identifier": "setFont", "parameters": "(final Font font)", "modifiers": "public", "return": "void", "signature": "void setFont(final Font font)", "full_signature": "public void setFont(final Font font)", "class_method_signature": "Chunk.setFont(final Font font)", "testcase": false, "constructor": false}, {"identifier": "getFont", "parameters": "()", "modifiers": "public", "return": "Font", "signature": "Font getFont()", "full_signature": "public Font getFont()", "class_method_signature": "Chunk.getFont()", "testcase": false, "constructor": false}, {"identifier": "getContent", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getContent()", "full_signature": "public String getContent()", "class_method_signature": "Chunk.getContent()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Chunk.toString()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "Chunk.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "getWidthPoint", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getWidthPoint()", "full_signature": "public float getWidthPoint()", "class_method_signature": "Chunk.getWidthPoint()", "testcase": false, "constructor": false}, {"identifier": "hasAttributes", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasAttributes()", "full_signature": "public boolean hasAttributes()", "class_method_signature": "Chunk.hasAttributes()", "testcase": false, "constructor": false}, {"identifier": "hasAccessibleAttributes", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasAccessibleAttributes()", "full_signature": "public boolean hasAccessibleAttributes()", "class_method_signature": "Chunk.hasAccessibleAttributes()", "testcase": false, "constructor": false}, {"identifier": "getAttributes", "parameters": "()", "modifiers": "public", "return": "HashMap<String, Object>", "signature": "HashMap<String, Object> getAttributes()", "full_signature": "public HashMap<String, Object> getAttributes()", "class_method_signature": "Chunk.getAttributes()", "testcase": false, "constructor": false}, {"identifier": "setAttributes", "parameters": "(final HashMap<String, Object> attributes)", "modifiers": "public", "return": "void", "signature": "void setAttributes(final HashMap<String, Object> attributes)", "full_signature": "public void setAttributes(final HashMap<String, Object> attributes)", "class_method_signature": "Chunk.setAttributes(final HashMap<String, Object> attributes)", "testcase": false, "constructor": false}, {"identifier": "setAttribute", "parameters": "(final String name, final Object obj)", "modifiers": "private", "return": "Chunk", "signature": "Chunk setAttribute(final String name, final Object obj)", "full_signature": "private Chunk setAttribute(final String name, final Object obj)", "class_method_signature": "Chunk.setAttribute(final String name, final Object obj)", "testcase": false, "constructor": false}, {"identifier": "setHorizontalScaling", "parameters": "(final float scale)", "modifiers": "public", "return": "Chunk", "signature": "Chunk setHorizontalScaling(final float scale)", "full_signature": "public Chunk setHorizontalScaling(final float scale)", "class_method_signature": "Chunk.setHorizontalScaling(final float scale)", "testcase": false, "constructor": false}, {"identifier": "getHorizontalScaling", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getHorizontalScaling()", "full_signature": "public float getHorizontalScaling()", "class_method_signature": "Chunk.getHorizontalScaling()", "testcase": false, "constructor": false}, {"identifier": "setUnderline", "parameters": "(final float thickness, final float yPosition)", "modifiers": "public", "return": "Chunk", "signature": "Chunk setUnderline(final float thickness, final float yPosition)", "full_signature": "public Chunk setUnderline(final float thickness, final float yPosition)", "class_method_signature": "Chunk.setUnderline(final float thickness, final float yPosition)", "testcase": false, "constructor": false}, {"identifier": "setUnderline", "parameters": "(final BaseColor color, final float thickness, final float thicknessMul,\n\t\t\tfinal float yPosition, final float yPositionMul, final int cap)", "modifiers": "public", "return": "Chunk", "signature": "Chunk setUnderline(final BaseColor color, final float thickness, final float thicknessMul,\n\t\t\tfinal float yPosition, final float yPositionMul, final int cap)", "full_signature": "public Chunk setUnderline(final BaseColor color, final float thickness, final float thicknessMul,\n\t\t\tfinal float yPosition, final float yPositionMul, final int cap)", "class_method_signature": "Chunk.setUnderline(final BaseColor color, final float thickness, final float thicknessMul,\n\t\t\tfinal float yPosition, final float yPositionMul, final int cap)", "testcase": false, "constructor": false}, {"identifier": "setTextRise", "parameters": "(final float rise)", "modifiers": "public", "return": "Chunk", "signature": "Chunk setTextRise(final float rise)", "full_signature": "public Chunk setTextRise(final float rise)", "class_method_signature": "Chunk.setTextRise(final float rise)", "testcase": false, "constructor": false}, {"identifier": "getTextRise", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getTextRise()", "full_signature": "public float getTextRise()", "class_method_signature": "Chunk.getTextRise()", "testcase": false, "constructor": false}, {"identifier": "setSkew", "parameters": "(float alpha, float beta)", "modifiers": "public", "return": "Chunk", "signature": "Chunk setSkew(float alpha, float beta)", "full_signature": "public Chunk setSkew(float alpha, float beta)", "class_method_signature": "Chunk.setSkew(float alpha, float beta)", "testcase": false, "constructor": false}, {"identifier": "setBackground", "parameters": "(final BaseColor color)", "modifiers": "public", "return": "Chunk", "signature": "Chunk setBackground(final BaseColor color)", "full_signature": "public Chunk setBackground(final BaseColor color)", "class_method_signature": "Chunk.setBackground(final BaseColor color)", "testcase": false, "constructor": false}, {"identifier": "setBackground", "parameters": "(final BaseColor color, final float extraLeft, final float extraBottom,\n\t\t\tfinal float extraRight, final float extraTop)", "modifiers": "public", "return": "Chunk", "signature": "Chunk setBackground(final BaseColor color, final float extraLeft, final float extraBottom,\n\t\t\tfinal float extraRight, final float extraTop)", "full_signature": "public Chunk setBackground(final BaseColor color, final float extraLeft, final float extraBottom,\n\t\t\tfinal float extraRight, final float extraTop)", "class_method_signature": "Chunk.setBackground(final BaseColor color, final float extraLeft, final float extraBottom,\n\t\t\tfinal float extraRight, final float extraTop)", "testcase": false, "constructor": false}, {"identifier": "setTextRenderMode", "parameters": "(final int mode, final float strokeWidth,\n\t\t\tfinal BaseColor strokeColor)", "modifiers": "public", "return": "Chunk", "signature": "Chunk setTextRenderMode(final int mode, final float strokeWidth,\n\t\t\tfinal BaseColor strokeColor)", "full_signature": "public Chunk setTextRenderMode(final int mode, final float strokeWidth,\n\t\t\tfinal BaseColor strokeColor)", "class_method_signature": "Chunk.setTextRenderMode(final int mode, final float strokeWidth,\n\t\t\tfinal BaseColor strokeColor)", "testcase": false, "constructor": false}, {"identifier": "setSplitCharacter", "parameters": "(final SplitCharacter splitCharacter)", "modifiers": "public", "return": "Chunk", "signature": "Chunk setSplitCharacter(final SplitCharacter splitCharacter)", "full_signature": "public Chunk setSplitCharacter(final SplitCharacter splitCharacter)", "class_method_signature": "Chunk.setSplitCharacter(final SplitCharacter splitCharacter)", "testcase": false, "constructor": false}, {"identifier": "setHyphenation", "parameters": "(final HyphenationEvent hyphenation)", "modifiers": "public", "return": "Chunk", "signature": "Chunk setHyphenation(final HyphenationEvent hyphenation)", "full_signature": "public Chunk setHyphenation(final HyphenationEvent hyphenation)", "class_method_signature": "Chunk.setHyphenation(final HyphenationEvent hyphenation)", "testcase": false, "constructor": false}, {"identifier": "setRemoteGoto", "parameters": "(final String filename, final String name)", "modifiers": "public", "return": "Chunk", "signature": "Chunk setRemoteGoto(final String filename, final String name)", "full_signature": "public Chunk setRemoteGoto(final String filename, final String name)", "class_method_signature": "Chunk.setRemoteGoto(final String filename, final String name)", "testcase": false, "constructor": false}, {"identifier": "setRemoteGoto", "parameters": "(final String filename, final int page)", "modifiers": "public", "return": "Chunk", "signature": "Chunk setRemoteGoto(final String filename, final int page)", "full_signature": "public Chunk setRemoteGoto(final String filename, final int page)", "class_method_signature": "Chunk.setRemoteGoto(final String filename, final int page)", "testcase": false, "constructor": false}, {"identifier": "setLocalGoto", "parameters": "(final String name)", "modifiers": "public", "return": "Chunk", "signature": "Chunk setLocalGoto(final String name)", "full_signature": "public Chunk setLocalGoto(final String name)", "class_method_signature": "Chunk.setLocalGoto(final String name)", "testcase": false, "constructor": false}, {"identifier": "setLocalDestination", "parameters": "(final String name)", "modifiers": "public", "return": "Chunk", "signature": "Chunk setLocalDestination(final String name)", "full_signature": "public Chunk setLocalDestination(final String name)", "class_method_signature": "Chunk.setLocalDestination(final String name)", "testcase": false, "constructor": false}, {"identifier": "setGenericTag", "parameters": "(final String text)", "modifiers": "public", "return": "Chunk", "signature": "Chunk setGenericTag(final String text)", "full_signature": "public Chunk setGenericTag(final String text)", "class_method_signature": "Chunk.setGenericTag(final String text)", "testcase": false, "constructor": false}, {"identifier": "setLineHeight", "parameters": "(float lineheight)", "modifiers": "public", "return": "Chunk", "signature": "Chunk setLineHeight(float lineheight)", "full_signature": "public Chunk setLineHeight(float lineheight)", "class_method_signature": "Chunk.setLineHeight(float lineheight)", "testcase": false, "constructor": false}, {"identifier": "getImage", "parameters": "()", "modifiers": "public", "return": "Image", "signature": "Image getImage()", "full_signature": "public Image getImage()", "class_method_signature": "Chunk.getImage()", "testcase": false, "constructor": false}, {"identifier": "setAction", "parameters": "(final PdfAction action)", "modifiers": "public", "return": "Chunk", "signature": "Chunk setAction(final PdfAction action)", "full_signature": "public Chunk setAction(final PdfAction action)", "class_method_signature": "Chunk.setAction(final PdfAction action)", "testcase": false, "constructor": false}, {"identifier": "setAnchor", "parameters": "(final URL url)", "modifiers": "public", "return": "Chunk", "signature": "Chunk setAnchor(final URL url)", "full_signature": "public Chunk setAnchor(final URL url)", "class_method_signature": "Chunk.setAnchor(final URL url)", "testcase": false, "constructor": false}, {"identifier": "setAnchor", "parameters": "(final String url)", "modifiers": "public", "return": "Chunk", "signature": "Chunk setAnchor(final String url)", "full_signature": "public Chunk setAnchor(final String url)", "class_method_signature": "Chunk.setAnchor(final String url)", "testcase": false, "constructor": false}, {"identifier": "setNewPage", "parameters": "()", "modifiers": "public", "return": "Chunk", "signature": "Chunk setNewPage()", "full_signature": "public Chunk setNewPage()", "class_method_signature": "Chunk.setNewPage()", "testcase": false, "constructor": false}, {"identifier": "setAnnotation", "parameters": "(final PdfAnnotation annotation)", "modifiers": "public", "return": "Chunk", "signature": "Chunk setAnnotation(final PdfAnnotation annotation)", "full_signature": "public Chunk setAnnotation(final PdfAnnotation annotation)", "class_method_signature": "Chunk.setAnnotation(final PdfAnnotation annotation)", "testcase": false, "constructor": false}, {"identifier": "isContent", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isContent()", "full_signature": "public boolean isContent()", "class_method_signature": "Chunk.isContent()", "testcase": false, "constructor": false}, {"identifier": "isNestable", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isNestable()", "full_signature": "public boolean isNestable()", "class_method_signature": "Chunk.isNestable()", "testcase": false, "constructor": false}, {"identifier": "getHyphenation", "parameters": "()", "modifiers": "public", "return": "HyphenationEvent", "signature": "HyphenationEvent getHyphenation()", "full_signature": "public HyphenationEvent getHyphenation()", "class_method_signature": "Chunk.getHyphenation()", "testcase": false, "constructor": false}, {"identifier": "setCharacterSpacing", "parameters": "(final float charSpace)", "modifiers": "public", "return": "Chunk", "signature": "Chunk setCharacterSpacing(final float charSpace)", "full_signature": "public Chunk setCharacterSpacing(final float charSpace)", "class_method_signature": "Chunk.setCharacterSpacing(final float charSpace)", "testcase": false, "constructor": false}, {"identifier": "getCharacterSpacing", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getCharacterSpacing()", "full_signature": "public float getCharacterSpacing()", "class_method_signature": "Chunk.getCharacterSpacing()", "testcase": false, "constructor": false}, {"identifier": "setWordSpacing", "parameters": "(final float wordSpace)", "modifiers": "public", "return": "Chunk", "signature": "Chunk setWordSpacing(final float wordSpace)", "full_signature": "public Chunk setWordSpacing(final float wordSpace)", "class_method_signature": "Chunk.setWordSpacing(final float wordSpace)", "testcase": false, "constructor": false}, {"identifier": "getWordSpacing", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getWordSpacing()", "full_signature": "public float getWordSpacing()", "class_method_signature": "Chunk.getWordSpacing()", "testcase": false, "constructor": false}, {"identifier": "createWhitespace", "parameters": "(final String content)", "modifiers": "public static", "return": "Chunk", "signature": "Chunk createWhitespace(final String content)", "full_signature": "public static Chunk createWhitespace(final String content)", "class_method_signature": "Chunk.createWhitespace(final String content)", "testcase": false, "constructor": false}, {"identifier": "createWhitespace", "parameters": "(final String content, final boolean preserve)", "modifiers": "public static", "return": "Chunk", "signature": "Chunk createWhitespace(final String content, final boolean preserve)", "full_signature": "public static Chunk createWhitespace(final String content, final boolean preserve)", "class_method_signature": "Chunk.createWhitespace(final String content, final boolean preserve)", "testcase": false, "constructor": false}, {"identifier": "isWhitespace", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isWhitespace()", "full_signature": "public boolean isWhitespace()", "class_method_signature": "Chunk.isWhitespace()", "testcase": false, "constructor": false}, {"identifier": "createTabspace", "parameters": "()", "modifiers": "@Deprecated public static", "return": "Chunk", "signature": "Chunk createTabspace()", "full_signature": "@Deprecated public static Chunk createTabspace()", "class_method_signature": "Chunk.createTabspace()", "testcase": false, "constructor": false}, {"identifier": "createTabspace", "parameters": "(float spacing)", "modifiers": "@Deprecated public static", "return": "Chunk", "signature": "Chunk createTabspace(float spacing)", "full_signature": "@Deprecated public static Chunk createTabspace(float spacing)", "class_method_signature": "Chunk.createTabspace(float spacing)", "testcase": false, "constructor": false}, {"identifier": "isTabspace", "parameters": "()", "modifiers": "@Deprecated public", "return": "boolean", "signature": "boolean isTabspace()", "full_signature": "@Deprecated public boolean isTabspace()", "class_method_signature": "Chunk.isTabspace()", "testcase": false, "constructor": false}, {"identifier": "getAccessibleAttribute", "parameters": "(final PdfName key)", "modifiers": "public", "return": "PdfObject", "signature": "PdfObject getAccessibleAttribute(final PdfName key)", "full_signature": "public PdfObject getAccessibleAttribute(final PdfName key)", "class_method_signature": "Chunk.getAccessibleAttribute(final PdfName key)", "testcase": false, "constructor": false}, {"identifier": "setAccessibleAttribute", "parameters": "(final PdfName key, final PdfObject value)", "modifiers": "public", "return": "void", "signature": "void setAccessibleAttribute(final PdfName key, final PdfObject value)", "full_signature": "public void setAccessibleAttribute(final PdfName key, final PdfObject value)", "class_method_signature": "Chunk.setAccessibleAttribute(final PdfName key, final PdfObject value)", "testcase": false, "constructor": false}, {"identifier": "getAccessibleAttributes", "parameters": "()", "modifiers": "public", "return": "HashMap<PdfName, PdfObject>", "signature": "HashMap<PdfName, PdfObject> getAccessibleAttributes()", "full_signature": "public HashMap<PdfName, PdfObject> getAccessibleAttributes()", "class_method_signature": "Chunk.getAccessibleAttributes()", "testcase": false, "constructor": false}, {"identifier": "getRole", "parameters": "()", "modifiers": "public", "return": "PdfName", "signature": "PdfName getRole()", "full_signature": "public PdfName getRole()", "class_method_signature": "Chunk.getRole()", "testcase": false, "constructor": false}, {"identifier": "setRole", "parameters": "(final PdfName role)", "modifiers": "public", "return": "void", "signature": "void setRole(final PdfName role)", "full_signature": "public void setRole(final PdfName role)", "class_method_signature": "Chunk.setRole(final PdfName role)", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "public", "return": "AccessibleElementId", "signature": "AccessibleElementId getId()", "full_signature": "public AccessibleElementId getId()", "class_method_signature": "Chunk.getId()", "testcase": false, "constructor": false}, {"identifier": "setId", "parameters": "(final AccessibleElementId id)", "modifiers": "public", "return": "void", "signature": "void setId(final AccessibleElementId id)", "full_signature": "public void setId(final AccessibleElementId id)", "class_method_signature": "Chunk.setId(final AccessibleElementId id)", "testcase": false, "constructor": false}, {"identifier": "isInline", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isInline()", "full_signature": "public boolean isInline()", "class_method_signature": "Chunk.isInline()", "testcase": false, "constructor": false}, {"identifier": "getTextExpansion", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTextExpansion()", "full_signature": "public String getTextExpansion()", "class_method_signature": "Chunk.getTextExpansion()", "testcase": false, "constructor": false}, {"identifier": "setTextExpansion", "parameters": "(String value)", "modifiers": "public", "return": "void", "signature": "void setTextExpansion(String value)", "full_signature": "public void setTextExpansion(String value)", "class_method_signature": "Chunk.setTextExpansion(String value)", "testcase": false, "constructor": false}], "file": "itext/src/main/java/com/itextpdf/text/Chunk.java"}, "focal_method": {"identifier": "getFont", "parameters": "()", "modifiers": "public", "return": "Font", "body": "public Font getFont() {\n\t\treturn font;\n\t}", "signature": "Font getFont()", "full_signature": "public Font getFont()", "class_method_signature": "Chunk.getFont()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 14892248, "url": "https://github.com/itext/itextpdf", "language": "Java", "is_fork": false, "fork_count": 400, "stargazer_count": 1164, "size": 115070, "license": "licensed"}}