{"test_class": {"identifier": "FunctionsTest", "superclass": "", "interfaces": "", "fields": [], "file": "func/src/test/java/uk/ac/ebi/beam/FunctionsTest.java"}, "test_case": {"identifier": "atomBasedDBStereo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void atomBasedDBStereo() throws Exception {\n        Graph g = Graph.fromSmiles(\"F/C=C/F\");\n        assertThat(Functions.atomBasedDBStereo(g).toSmiles(),\n                   is(\"F[C@H]=[C@@H]F\"));\n    }", "signature": "void atomBasedDBStereo()", "full_signature": "@Test public void atomBasedDBStereo()", "class_method_signature": "FunctionsTest.atomBasedDBStereo()", "testcase": true, "constructor": false, "invocations": ["fromSmiles", "assertThat", "toSmiles", "atomBasedDBStereo", "is"]}, "focal_class": {"identifier": "Functions", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ToTrigonalTopology ttt = new ToTrigonalTopology();", "modifier": "private static final", "type": "ToTrigonalTopology", "declarator": "ttt = new ToTrigonalTopology()", "var_name": "ttt"}, {"original_string": "private static final FromTrigonalTopology ftt = new FromTrigonalTopology();", "modifier": "private static final", "type": "FromTrigonalTopology", "declarator": "ftt = new FromTrigonalTopology()", "var_name": "ftt"}, {"original_string": "private static final ExplicitToImplicit eti = new ExplicitToImplicit();", "modifier": "private static final", "type": "ExplicitToImplicit", "declarator": "eti = new ExplicitToImplicit()", "var_name": "eti"}, {"original_string": "private static final ImplicitToExplicit ite = new ImplicitToExplicit();", "modifier": "private static final", "type": "ImplicitToExplicit", "declarator": "ite = new ImplicitToExplicit()", "var_name": "ite"}, {"original_string": "private static final ToSubsetAtoms tsa = new ToSubsetAtoms();", "modifier": "private static final", "type": "ToSubsetAtoms", "declarator": "tsa = new ToSubsetAtoms()", "var_name": "tsa"}, {"original_string": "private static final FromSubsetAtoms fsa = new FromSubsetAtoms();", "modifier": "private static final", "type": "FromSubsetAtoms", "declarator": "fsa = new FromSubsetAtoms()", "var_name": "fsa"}, {"original_string": "private static final NormaliseDirectionalLabels ndl = new NormaliseDirectionalLabels();", "modifier": "private static final", "type": "NormaliseDirectionalLabels", "declarator": "ndl = new NormaliseDirectionalLabels()", "var_name": "ndl"}, {"original_string": "private static final AddDirectionalLabels adl = new AddDirectionalLabels();", "modifier": "private static final", "type": "AddDirectionalLabels", "declarator": "adl = new AddDirectionalLabels()", "var_name": "adl"}], "methods": [{"identifier": "Functions", "parameters": "()", "modifiers": "private", "return": "", "signature": " Functions()", "full_signature": "private  Functions()", "class_method_signature": "Functions.Functions()", "testcase": false, "constructor": true}, {"identifier": "randomise", "parameters": "(Graph g)", "modifiers": "public static", "return": "Graph", "signature": "Graph randomise(Graph g)", "full_signature": "public static Graph randomise(Graph g)", "class_method_signature": "Functions.randomise(Graph g)", "testcase": false, "constructor": false}, {"identifier": "reverse", "parameters": "(Graph g)", "modifiers": "public static", "return": "Graph", "signature": "Graph reverse(Graph g)", "full_signature": "public static Graph reverse(Graph g)", "class_method_signature": "Functions.reverse(Graph g)", "testcase": false, "constructor": false}, {"identifier": "atomBasedDBStereo", "parameters": "(Graph g)", "modifiers": "public static", "return": "Graph", "signature": "Graph atomBasedDBStereo(Graph g)", "full_signature": "public static Graph atomBasedDBStereo(Graph g)", "class_method_signature": "Functions.atomBasedDBStereo(Graph g)", "testcase": false, "constructor": false}, {"identifier": "bondBasedDBStereo", "parameters": "(Graph g)", "modifiers": "public static", "return": "Graph", "signature": "Graph bondBasedDBStereo(Graph g)", "full_signature": "public static Graph bondBasedDBStereo(Graph g)", "class_method_signature": "Functions.bondBasedDBStereo(Graph g)", "testcase": false, "constructor": false}, {"identifier": "expand", "parameters": "(Graph g)", "modifiers": "public static", "return": "Graph", "signature": "Graph expand(Graph g)", "full_signature": "public static Graph expand(Graph g)", "class_method_signature": "Functions.expand(Graph g)", "testcase": false, "constructor": false}, {"identifier": "collapse", "parameters": "(Graph g)", "modifiers": "public static", "return": "Graph", "signature": "Graph collapse(Graph g)", "full_signature": "public static Graph collapse(Graph g)", "class_method_signature": "Functions.collapse(Graph g)", "testcase": false, "constructor": false}, {"identifier": "normaliseDirectionalLabels", "parameters": "(Graph g)", "modifiers": "public static", "return": "Graph", "signature": "Graph normaliseDirectionalLabels(Graph g)", "full_signature": "public static Graph normaliseDirectionalLabels(Graph g)", "class_method_signature": "Functions.normaliseDirectionalLabels(Graph g)", "testcase": false, "constructor": false}, {"identifier": "ident", "parameters": "(int n)", "modifiers": "private static", "return": "int[]", "signature": "int[] ident(int n)", "full_signature": "private static int[] ident(int n)", "class_method_signature": "Functions.ident(int n)", "testcase": false, "constructor": false}, {"identifier": "canonicalize", "parameters": "(final Graph g,\n                                     final long[] labels)", "modifiers": "public static", "return": "Graph", "signature": "Graph canonicalize(final Graph g,\n                                     final long[] labels)", "full_signature": "public static Graph canonicalize(final Graph g,\n                                     final long[] labels)", "class_method_signature": "Functions.canonicalize(final Graph g,\n                                     final long[] labels)", "testcase": false, "constructor": false}, {"identifier": "renumberAtomMaps", "parameters": "(final Graph g)", "modifiers": "public static", "return": "Graph", "signature": "Graph renumberAtomMaps(final Graph g)", "full_signature": "public static Graph renumberAtomMaps(final Graph g)", "class_method_signature": "Functions.renumberAtomMaps(final Graph g)", "testcase": false, "constructor": false}, {"identifier": "random", "parameters": "(int n)", "modifiers": "private static", "return": "int[]", "signature": "int[] random(int n)", "full_signature": "private static int[] random(int n)", "class_method_signature": "Functions.random(int n)", "testcase": false, "constructor": false}, {"identifier": "reverse", "parameters": "(int n)", "modifiers": "private static", "return": "int[]", "signature": "int[] reverse(int n)", "full_signature": "private static int[] reverse(int n)", "class_method_signature": "Functions.reverse(int n)", "testcase": false, "constructor": false}, {"identifier": "inv", "parameters": "(int[] p)", "modifiers": "private static", "return": "int[]", "signature": "int[] inv(int[] p)", "full_signature": "private static int[] inv(int[] p)", "class_method_signature": "Functions.inv(int[] p)", "testcase": false, "constructor": false}, {"identifier": "swap", "parameters": "(int[] p, int i, int j)", "modifiers": "private static", "return": "void", "signature": "void swap(int[] p, int i, int j)", "full_signature": "private static void swap(int[] p, int i, int j)", "class_method_signature": "Functions.swap(int[] p, int i, int j)", "testcase": false, "constructor": false}], "file": "func/src/main/java/uk/ac/ebi/beam/Functions.java"}, "focal_method": {"identifier": "atomBasedDBStereo", "parameters": "(Graph g)", "modifiers": "public static", "return": "Graph", "body": "public static Graph atomBasedDBStereo(Graph g) {\n        return eti.apply(ttt.apply(ite.apply(g)));\n    }", "signature": "Graph atomBasedDBStereo(Graph g)", "full_signature": "public static Graph atomBasedDBStereo(Graph g)", "class_method_signature": "Functions.atomBasedDBStereo(Graph g)", "testcase": false, "constructor": false, "invocations": ["apply", "apply", "apply"]}, "repository": {"repo_id": 12061606, "url": "https://github.com/johnmay/beam", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 19, "size": 825, "license": "licensed"}}