{"test_class": {"identifier": "DialogUtilsTest", "superclass": "extends GraphicsTestBase", "interfaces": "", "fields": [{"original_string": "private static final boolean displayLabelImage = false;", "modifier": "private static final", "type": "boolean", "declarator": "displayLabelImage = false", "var_name": "displayLabelImage"}], "file": "modules/unsupported/swing/src/test/java/org/geotools/swing/dialog/DialogUtilsTest.java"}, "test_case": {"identifier": "labelTextIsFittedProperly", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void labelTextIsFittedProperly() throws Exception {\n        final StringBuilder sb = new StringBuilder();\n        sb.append(\"<html>\");\n        \n        // Red dot at start of text\n        sb.append(\"<span style=\\\"color: #FF0000;\\\">.</span>\");\n        \n        // Long text\n        sb.append(\"This is a very very very very very very very very very very \");\n        sb.append(\"very very very very very very very very very very very very \");\n        sb.append(\"very very very very very very very very very very very very \");\n        sb.append(\"long message\");\n        \n        // Blue dot at end of text\n        sb.append(\"<span style=\\\"color: #0000FF;\\\">.</span>\");\n        sb.append(\"</html>\");\n    \n        final int labelWidth = 300;\n        final Dimension dim = DialogUtils.getHtmlLabelTextExtent(sb.toString(), labelWidth, true);\n        \n        JFrame frame = GuiActionRunner.execute(new GuiQuery<JFrame>() {\n            @Override\n            protected JFrame executeInEDT() throws Throwable {\n                JFrame frame = new JFrame();\n                \n                /**\n                 * mbedward: \n                 * I tried overriding the label's paintComponent method to\n                 * disable text anti-aliasing in order to make searching for\n                 * the red and blue dots easier, but the rendering hint did\n                 * not seem to affect HTML rendering. So instead, the\n                 * findColorInRange method is used to allow for the fuzz of\n                 * colour values.\n                 */\n                JLabel label = new JLabel(sb.toString());\n                label.setName(\"TheLabel\");\n                \n                label.setPreferredSize(dim);\n                frame.add(label);\n                \n                frame.pack();\n                return frame;\n            }\n        });\n        \n        FrameFixture fixture = new FrameFixture(frame);\n        Insets insets = frame.getInsets();\n        fixture.show();\n        \n        JLabelFixture lf = fixture.label(\"TheLabel\");\n        Point pos = lf.component().getLocationOnScreen();\n        Dimension size = lf.component().getSize();\n        \n        Robot robot = new Robot();\n        BufferedImage img = robot.createScreenCapture(new Rectangle(pos, dim));\n        fixture.close();\n        \n        if (displayLabelImage) {\n            CountDownLatch latch = TestImageFrame.showImage(img, \"Label screen shot\");\n            latch.await();\n        }\n\n        // Search for the red-ish start dot\n        int[] lower = new int[] {200, 0, 0};\n        int[] upper = new int[] {255, 80, 80};\n        Rectangle bounds = new Rectangle(img.getMinX(), img.getMinY(), 20, 20);\n        assertTrue( findColorInRange(img, bounds, lower, upper) );\n        \n        // Search for the blue-ish end dot\n        lower = new int[] {0, 0, 200};\n        upper = new int[] {80, 80, 255};\n        bounds = new Rectangle(\n                img.getMinX(), img.getMinY() + img.getHeight() - 20, \n                img.getWidth(), 20);\n        assertTrue( findColorInRange(img, bounds, lower, upper));\n        \n        fixture.cleanUp();\n    }", "signature": "void labelTextIsFittedProperly()", "full_signature": "@Test public void labelTextIsFittedProperly()", "class_method_signature": "DialogUtilsTest.labelTextIsFittedProperly()", "testcase": true, "constructor": false, "invocations": ["append", "append", "append", "append", "append", "append", "append", "append", "getHtmlLabelTextExtent", "toString", "execute", "toString", "setName", "setPreferredSize", "add", "pack", "getInsets", "show", "label", "getLocationOnScreen", "component", "getSize", "component", "createScreenCapture", "close", "showImage", "await", "getMinX", "getMinY", "assertTrue", "findColorInRange", "getMinX", "getMinY", "getHeight", "getWidth", "assertTrue", "findColorInRange", "cleanUp"]}, "focal_class": {"identifier": "DialogUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "showCentred", "parameters": "(final Window dialog)", "modifiers": "public static", "return": "void", "signature": "void showCentred(final Window dialog)", "full_signature": "public static void showCentred(final Window dialog)", "class_method_signature": "DialogUtils.showCentred(final Window dialog)", "testcase": false, "constructor": false}, {"identifier": "showCentredOnParent", "parameters": "(final Window parent, final Window dialog)", "modifiers": "public static", "return": "void", "signature": "void showCentredOnParent(final Window parent, final Window dialog)", "full_signature": "public static void showCentredOnParent(final Window parent, final Window dialog)", "class_method_signature": "DialogUtils.showCentredOnParent(final Window parent, final Window dialog)", "testcase": false, "constructor": false}, {"identifier": "getChildComponents", "parameters": "(\n            Class<T> clazz, Container parent, boolean includeNested)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> getChildComponents(\n            Class<T> clazz, Container parent, boolean includeNested)", "full_signature": "public static List<T> getChildComponents(\n            Class<T> clazz, Container parent, boolean includeNested)", "class_method_signature": "DialogUtils.getChildComponents(\n            Class<T> clazz, Container parent, boolean includeNested)", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "(String input, String fallback)", "modifiers": "public static", "return": "String", "signature": "String getString(String input, String fallback)", "full_signature": "public static String getString(String input, String fallback)", "class_method_signature": "DialogUtils.getString(String input, String fallback)", "testcase": false, "constructor": false}, {"identifier": "doShowCentred", "parameters": "(Window parent, Window dialog)", "modifiers": "private static", "return": "void", "signature": "void doShowCentred(Window parent, Window dialog)", "full_signature": "private static void doShowCentred(Window parent, Window dialog)", "class_method_signature": "DialogUtils.doShowCentred(Window parent, Window dialog)", "testcase": false, "constructor": false}, {"identifier": "doCentre", "parameters": "(Window dialog, Dimension parentDim)", "modifiers": "private static", "return": "void", "signature": "void doCentre(Window dialog, Dimension parentDim)", "full_signature": "private static void doCentre(Window dialog, Dimension parentDim)", "class_method_signature": "DialogUtils.doCentre(Window dialog, Dimension parentDim)", "testcase": false, "constructor": false}, {"identifier": "getHtmlLabelTextExtent", "parameters": "(final String labelText, \n            final int fixedDimSize, \n            final boolean width)", "modifiers": "public static", "return": "Dimension", "signature": "Dimension getHtmlLabelTextExtent(final String labelText, \n            final int fixedDimSize, \n            final boolean width)", "full_signature": "public static Dimension getHtmlLabelTextExtent(final String labelText, \n            final int fixedDimSize, \n            final boolean width)", "class_method_signature": "DialogUtils.getHtmlLabelTextExtent(final String labelText, \n            final int fixedDimSize, \n            final boolean width)", "testcase": false, "constructor": false}, {"identifier": "doGetHtmlTextExtent", "parameters": "(String labelText, int fixedDimSize, boolean width)", "modifiers": "private static", "return": "Dimension", "signature": "Dimension doGetHtmlTextExtent(String labelText, int fixedDimSize, boolean width)", "full_signature": "private static Dimension doGetHtmlTextExtent(String labelText, int fixedDimSize, boolean width)", "class_method_signature": "DialogUtils.doGetHtmlTextExtent(String labelText, int fixedDimSize, boolean width)", "testcase": false, "constructor": false}], "file": "modules/unsupported/swing/src/main/java/org/geotools/swing/dialog/DialogUtils.java"}, "focal_method": {"identifier": "getHtmlLabelTextExtent", "parameters": "(final String labelText, \n            final int fixedDimSize, \n            final boolean width)", "modifiers": "public static", "return": "Dimension", "body": "public static Dimension getHtmlLabelTextExtent(final String labelText, \n            final int fixedDimSize, \n            final boolean width) {\n        \n        final Dimension[] result = new Dimension[1];\n        \n        if (SwingUtilities.isEventDispatchThread()) {\n            result[0] = doGetHtmlTextExtent(labelText, fixedDimSize, width);\n        } else {\n            try {\n                SwingUtilities.invokeAndWait(new Runnable() {\n                    @Override\n                    public void run() {\n                        result[0] = doGetHtmlTextExtent(labelText, fixedDimSize, width);\n                    }\n                });\n                \n            } catch (Exception ex) {\n                // Either an InterruptedException or an InvocationTargetException\n                // both of which are fatal\n                throw new RuntimeException(ex);\n            }\n        }\n        \n        return result[0];\n    }", "signature": "Dimension getHtmlLabelTextExtent(final String labelText, \n            final int fixedDimSize, \n            final boolean width)", "full_signature": "public static Dimension getHtmlLabelTextExtent(final String labelText, \n            final int fixedDimSize, \n            final boolean width)", "class_method_signature": "DialogUtils.getHtmlLabelTextExtent(final String labelText, \n            final int fixedDimSize, \n            final boolean width)", "testcase": false, "constructor": false, "invocations": ["isEventDispatchThread", "doGetHtmlTextExtent", "invokeAndWait", "doGetHtmlTextExtent"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}