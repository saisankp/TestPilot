{"test_class": {"identifier": "ConverterTest", "superclass": "extends RobolectricTest", "interfaces": "", "fields": [], "file": "MSDKUIKit/MSDKUILib/src/test/java/com/here/msdkui/common/measurements/ConverterTest.java"}, "test_case": {"identifier": "testIsMetric", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsMetric() {\n        assertTrue(Converter.isMetric(MeasurementUnit.METER));\n        assertTrue(Converter.isMetric(MeasurementUnit.KILOMETER));\n        assertTrue(Converter.isMetric(MeasurementUnit.KILOMETERS_PER_HOUR));\n        assertTrue(Converter.isMetric(MeasurementUnit.METERS_PER_SECOND));\n\n        assertFalse(Converter.isMetric(MeasurementUnit.FOOT));\n        assertFalse(Converter.isMetric(MeasurementUnit.YARD));\n        assertFalse(Converter.isMetric(MeasurementUnit.MILE));\n        assertFalse(Converter.isMetric(MeasurementUnit.MILES_PER_HOUR));\n    }", "signature": "void testIsMetric()", "full_signature": "@Test public void testIsMetric()", "class_method_signature": "ConverterTest.testIsMetric()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isMetric", "assertTrue", "isMetric", "assertTrue", "isMetric", "assertTrue", "isMetric", "assertFalse", "isMetric", "assertFalse", "isMetric", "assertFalse", "isMetric", "assertFalse", "isMetric"]}, "focal_class": {"identifier": "Converter", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final double KILOMETER_IN_METERS = 1000;", "modifier": "protected static final", "type": "double", "declarator": "KILOMETER_IN_METERS = 1000", "var_name": "KILOMETER_IN_METERS"}], "methods": [{"identifier": "convert", "parameters": "(double in, MeasurementUnit from, MeasurementUnit to)", "modifiers": "public", "return": "Measurement", "signature": "Measurement convert(double in, MeasurementUnit from, MeasurementUnit to)", "full_signature": "public Measurement convert(double in, MeasurementUnit from, MeasurementUnit to)", "class_method_signature": "Converter.convert(double in, MeasurementUnit from, MeasurementUnit to)", "testcase": false, "constructor": false}, {"identifier": "toBaseUnit", "parameters": "(double in, MeasurementUnit unit)", "modifiers": "protected abstract", "return": "double", "signature": "double toBaseUnit(double in, MeasurementUnit unit)", "full_signature": "protected abstract double toBaseUnit(double in, MeasurementUnit unit)", "class_method_signature": "Converter.toBaseUnit(double in, MeasurementUnit unit)", "testcase": false, "constructor": false}, {"identifier": "fromBaseTo", "parameters": "(double in, MeasurementUnit unit)", "modifiers": "protected abstract", "return": "double", "signature": "double fromBaseTo(double in, MeasurementUnit unit)", "full_signature": "protected abstract double fromBaseTo(double in, MeasurementUnit unit)", "class_method_signature": "Converter.fromBaseTo(double in, MeasurementUnit unit)", "testcase": false, "constructor": false}, {"identifier": "round", "parameters": "(double value, int places)", "modifiers": "public static", "return": "double", "signature": "double round(double value, int places)", "full_signature": "public static double round(double value, int places)", "class_method_signature": "Converter.round(double value, int places)", "testcase": false, "constructor": false}, {"identifier": "isSpeed", "parameters": "(MeasurementUnit unit)", "modifiers": "protected static", "return": "boolean", "signature": "boolean isSpeed(MeasurementUnit unit)", "full_signature": "protected static boolean isSpeed(MeasurementUnit unit)", "class_method_signature": "Converter.isSpeed(MeasurementUnit unit)", "testcase": false, "constructor": false}, {"identifier": "isLength", "parameters": "(MeasurementUnit unit)", "modifiers": "protected static", "return": "boolean", "signature": "boolean isLength(MeasurementUnit unit)", "full_signature": "protected static boolean isLength(MeasurementUnit unit)", "class_method_signature": "Converter.isLength(MeasurementUnit unit)", "testcase": false, "constructor": false}, {"identifier": "isMetric", "parameters": "(MeasurementUnit unit)", "modifiers": "protected static", "return": "boolean", "signature": "boolean isMetric(MeasurementUnit unit)", "full_signature": "protected static boolean isMetric(MeasurementUnit unit)", "class_method_signature": "Converter.isMetric(MeasurementUnit unit)", "testcase": false, "constructor": false}, {"identifier": "areUnitsCompatible", "parameters": "(MeasurementUnit u1, MeasurementUnit u2)", "modifiers": "private static", "return": "boolean", "signature": "boolean areUnitsCompatible(MeasurementUnit u1, MeasurementUnit u2)", "full_signature": "private static boolean areUnitsCompatible(MeasurementUnit u1, MeasurementUnit u2)", "class_method_signature": "Converter.areUnitsCompatible(MeasurementUnit u1, MeasurementUnit u2)", "testcase": false, "constructor": false}], "file": "MSDKUIKit/MSDKUILib/src/main/java/com/here/msdkui/common/measurements/Converter.java"}, "focal_method": {"identifier": "isMetric", "parameters": "(MeasurementUnit unit)", "modifiers": "protected static", "return": "boolean", "body": "protected static boolean isMetric(MeasurementUnit unit) {\n        switch (unit) {\n            case KILOMETERS_PER_HOUR:\n            case METERS_PER_SECOND:\n            case KILOMETER:\n            case METER:\n                return true;\n\n            default:\n                return false;\n        }\n    }", "signature": "boolean isMetric(MeasurementUnit unit)", "full_signature": "protected static boolean isMetric(MeasurementUnit unit)", "class_method_signature": "Converter.isMetric(MeasurementUnit unit)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 141680627, "url": "https://github.com/heremaps/msdkui-android", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 35, "size": 5559, "license": "licensed"}}