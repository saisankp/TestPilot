{"test_class": {"identifier": "MessageParamsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ObjectMapper objectMapper = new ObjectMapper();", "modifier": "private", "type": "ObjectMapper", "declarator": "objectMapper = new ObjectMapper()", "var_name": "objectMapper"}], "file": "restx-i18n/src/test/java/restx/i18n/MessageParamsTest.java"}, "test_case": {"identifier": "should_serialize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_serialize() throws Exception {\n        String s = objectMapper.writer().writeValueAsString(MessageParams.of(\"key1\", \"value1\"));\n        assertThat(s).isEqualTo(\"{\\\"key1\\\":\\\"value1\\\"}\");\n    }", "signature": "void should_serialize()", "full_signature": "@Test public void should_serialize()", "class_method_signature": "MessageParamsTest.should_serialize()", "testcase": true, "constructor": false, "invocations": ["writeValueAsString", "writer", "of", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "MessageParams", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final MessageParams EMPTY = new MessageParams(ImmutableMap.<String, Object>of());", "modifier": "private static final", "type": "MessageParams", "declarator": "EMPTY = new MessageParams(ImmutableMap.<String, Object>of())", "var_name": "EMPTY"}, {"original_string": "private final ImmutableMap<String, ?> map;", "modifier": "private final", "type": "ImmutableMap<String, ?>", "declarator": "map", "var_name": "map"}], "methods": [{"identifier": "empty", "parameters": "()", "modifiers": "public static", "return": "MessageParams", "signature": "MessageParams empty()", "full_signature": "public static MessageParams empty()", "class_method_signature": "MessageParams.empty()", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(String k1, Object v1)", "modifiers": "public static", "return": "MessageParams", "signature": "MessageParams of(String k1, Object v1)", "full_signature": "public static MessageParams of(String k1, Object v1)", "class_method_signature": "MessageParams.of(String k1, Object v1)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(String k1, Object v1, String k2, Object v2)", "modifiers": "public static", "return": "MessageParams", "signature": "MessageParams of(String k1, Object v1, String k2, Object v2)", "full_signature": "public static MessageParams of(String k1, Object v1, String k2, Object v2)", "class_method_signature": "MessageParams.of(String k1, Object v1, String k2, Object v2)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(String k1, Object v1, String k2, Object v2, String k3, Object v3)", "modifiers": "public static", "return": "MessageParams", "signature": "MessageParams of(String k1, Object v1, String k2, Object v2, String k3, Object v3)", "full_signature": "public static MessageParams of(String k1, Object v1, String k2, Object v2, String k3, Object v3)", "class_method_signature": "MessageParams.of(String k1, Object v1, String k2, Object v2, String k3, Object v3)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(String k1, Object v1, String k2, Object v2, String k3, Object v3, String k4, Object v4)", "modifiers": "public static", "return": "MessageParams", "signature": "MessageParams of(String k1, Object v1, String k2, Object v2, String k3, Object v3, String k4, Object v4)", "full_signature": "public static MessageParams of(String k1, Object v1, String k2, Object v2, String k3, Object v3, String k4, Object v4)", "class_method_signature": "MessageParams.of(String k1, Object v1, String k2, Object v2, String k3, Object v3, String k4, Object v4)", "testcase": false, "constructor": false}, {"identifier": "value", "parameters": "(Object v)", "modifiers": "private static", "return": "Object", "signature": "Object value(Object v)", "full_signature": "private static Object value(Object v)", "class_method_signature": "MessageParams.value(Object v)", "testcase": false, "constructor": false}, {"identifier": "MessageParams", "parameters": "(ImmutableMap<String, ?> map)", "modifiers": "public", "return": "", "signature": " MessageParams(ImmutableMap<String, ?> map)", "full_signature": "public  MessageParams(ImmutableMap<String, ?> map)", "class_method_signature": "MessageParams.MessageParams(ImmutableMap<String, ?> map)", "testcase": false, "constructor": true}, {"identifier": "concat", "parameters": "(String key, Object value)", "modifiers": "public", "return": "MessageParams", "signature": "MessageParams concat(String key, Object value)", "full_signature": "public MessageParams concat(String key, Object value)", "class_method_signature": "MessageParams.concat(String key, Object value)", "testcase": false, "constructor": false}, {"identifier": "toMap", "parameters": "()", "modifiers": "public", "return": "Map<String, ?>", "signature": "Map<String, ?> toMap()", "full_signature": "public Map<String, ?> toMap()", "class_method_signature": "MessageParams.toMap()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "MessageParams.toString()", "testcase": false, "constructor": false}], "file": "restx-i18n/src/main/java/restx/i18n/MessageParams.java"}, "focal_method": {"identifier": "of", "parameters": "(String k1, Object v1)", "modifiers": "public static", "return": "MessageParams", "body": "public static MessageParams of(String k1, Object v1) {\n        return new MessageParams(ImmutableMap.of(k1, value(v1)));\n    }", "signature": "MessageParams of(String k1, Object v1)", "full_signature": "public static MessageParams of(String k1, Object v1)", "class_method_signature": "MessageParams.of(String k1, Object v1)", "testcase": false, "constructor": false, "invocations": ["of", "value"]}, "repository": {"repo_id": 9836833, "url": "https://github.com/restx/restx", "language": "Java", "is_fork": false, "fork_count": 78, "stargazer_count": 433, "size": 7896, "license": "licensed"}}