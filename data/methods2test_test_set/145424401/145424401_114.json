{"test_class": {"identifier": "AarAnalyzerTest", "superclass": "", "interfaces": "", "fields": [], "file": "lang-java/src/test/java/org/eclipse/steady/java/AarAnalyzerTest.java"}, "test_case": {"identifier": "testAarAnalyzer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testAarAnalyzer() {\n    try {\n      final AarAnalyzer aa = new AarAnalyzer();\n      aa.analyze(new File(\"./src/test/resources/cucumber-android-4.3.0.aar\"));\n      final Set<ConstructId> cids = aa.getConstructIds();\n      assertTrue(!cids.isEmpty());\n    } catch (FileAnalysisException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n  }", "signature": "void testAarAnalyzer()", "full_signature": "@Test public void testAarAnalyzer()", "class_method_signature": "AarAnalyzerTest.testAarAnalyzer()", "testcase": true, "constructor": false, "invocations": ["analyze", "getConstructIds", "assertTrue", "isEmpty", "printStackTrace", "assertTrue"]}, "focal_class": {"identifier": "AarAnalyzer", "superclass": "extends JarAnalyzer", "interfaces": "", "fields": [{"original_string": "private static final Logger log = org.apache.logging.log4j.LogManager.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "log = org.apache.logging.log4j.LogManager.getLogger()", "var_name": "log"}, {"original_string": "private static final String CLASSES_JAR = \"classes.jar\";", "modifier": "private static final", "type": "String", "declarator": "CLASSES_JAR = \"classes.jar\"", "var_name": "CLASSES_JAR"}, {"original_string": "private JarWriter aarWriter;", "modifier": "private", "type": "JarWriter", "declarator": "aarWriter", "var_name": "aarWriter"}, {"original_string": "private Path tmpDir = null;", "modifier": "private", "type": "Path", "declarator": "tmpDir = null", "var_name": "tmpDir"}], "methods": [{"identifier": "getSupportedFileExtensions", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getSupportedFileExtensions()", "full_signature": "@Override public String[] getSupportedFileExtensions()", "class_method_signature": "AarAnalyzer.getSupportedFileExtensions()", "testcase": false, "constructor": false}, {"identifier": "analyze", "parameters": "(final File _file)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void analyze(final File _file)", "full_signature": "@Override public synchronized void analyze(final File _file)", "class_method_signature": "AarAnalyzer.analyze(final File _file)", "testcase": false, "constructor": false}, {"identifier": "getSHA1", "parameters": "()", "modifiers": "@Override public synchronized", "return": "String", "signature": "String getSHA1()", "full_signature": "@Override public synchronized String getSHA1()", "class_method_signature": "AarAnalyzer.getSHA1()", "testcase": false, "constructor": false}, {"identifier": "getFileName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFileName()", "full_signature": "public String getFileName()", "class_method_signature": "AarAnalyzer.getFileName()", "testcase": false, "constructor": false}], "file": "lang-java/src/main/java/org/eclipse/steady/java/AarAnalyzer.java"}, "focal_method": {"identifier": "analyze", "parameters": "(final File _file)", "modifiers": "@Override public synchronized", "return": "void", "body": "@Override\n  public synchronized void analyze(final File _file) throws FileAnalysisException {\n    try {\n      // this.aar = new JarFile(_file, false, java.util.zip.ZipFile.OPEN_READ);\n      this.aarWriter = new JarWriter(_file.toPath());\n      this.url = _file.getAbsolutePath().toString();\n\n      try {\n        this.tmpDir = java.nio.file.Files.createTempDirectory(\"aar_analysis_\");\n      } catch (IOException e) {\n        throw new IllegalStateException(\"Unable to create temp directory\", e);\n      }\n\n      this.aarWriter.extract(this.tmpDir);\n\n      // TODO: What if no classes.jar\n      final File classes_jar = this.tmpDir.resolve(CLASSES_JAR).toFile();\n      if (classes_jar != null && FileUtil.isAccessibleFile(classes_jar.toPath())) {\n        JarAnalyzer.insertClasspath(classes_jar.toPath().toAbsolutePath().toString());\n        this.jar = new JarFile(classes_jar, false, java.util.zip.ZipFile.OPEN_READ);\n        this.jarWriter = new JarWriter(classes_jar.toPath());\n      } else {\n        log.warn(\"No \" + CLASSES_JAR + \" found in [\" + _file.toPath().toAbsolutePath() + \"]\");\n      }\n    } catch (IllegalStateException e) {\n      log.error(\"IllegalStateException when analyzing file [\" + _file + \"]: \" + e.getMessage());\n      throw new FileAnalysisException(\n          \"Error when analyzing file [\" + _file + \"]: \" + e.getMessage(), e);\n    } catch (IOException e) {\n      log.error(\"IOException when analyzing file [\" + _file + \"]: \" + e.getMessage());\n      throw new FileAnalysisException(\n          \"Error when analyzing file [\" + _file + \"]: \" + e.getMessage(), e);\n    } catch (Exception e) {\n      log.error(\"Exception when analyzing file [\" + _file + \"]: \" + e.getMessage());\n      throw new FileAnalysisException(\n          \"Error when analyzing file [\" + _file + \"]: \" + e.getMessage(), e);\n    }\n  }", "signature": "void analyze(final File _file)", "full_signature": "@Override public synchronized void analyze(final File _file)", "class_method_signature": "AarAnalyzer.analyze(final File _file)", "testcase": false, "constructor": false, "invocations": ["toPath", "toString", "getAbsolutePath", "createTempDirectory", "extract", "toFile", "resolve", "isAccessibleFile", "toPath", "insertClasspath", "toString", "toAbsolutePath", "toPath", "toPath", "warn", "toAbsolutePath", "toPath", "error", "getMessage", "getMessage", "error", "getMessage", "getMessage", "error", "getMessage", "getMessage"]}, "repository": {"repo_id": 145424401, "url": "https://github.com/eclipse/steady", "stars": 353, "created": "8/20/2018 1:54:15 PM +00:00", "updates": "2020-01-25T08:37:00+00:00", "fork": "False", "license": "licensed"}}