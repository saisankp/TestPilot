{"test_class": {"identifier": "AnyScopePropertyAccessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AnyScopePropertyAccessor accessor;", "modifier": "private", "type": "AnyScopePropertyAccessor", "declarator": "accessor", "var_name": "accessor"}], "file": "tiles-ognl/src/test/java/org/apache/tiles/ognl/AnyScopePropertyAccessorTest.java"}, "test_case": {"identifier": "testSetProperty", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Test public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testSetProperty() {\n        Request request = createMock(Request.class);\n        Map<String, Object> oneScope = createMock(Map.class);\n        Map<String, Object> twoScope = createMock(Map.class);\n\n        expect(request.getAvailableScopes()).andReturn(Arrays.asList(new String[] {\"one\", \"two\"})).anyTimes();\n        expect(request.getContext(\"one\")).andReturn(oneScope).anyTimes();\n        expect(request.getContext(\"two\")).andReturn(twoScope).anyTimes();\n        expect(oneScope.containsKey(\"name1\")).andReturn(true);\n        expect(oneScope.put(\"name1\", \"otherValue1\")).andReturn(\"value1\");\n        expect(oneScope.containsKey(\"name2\")).andReturn(false);\n        expect(oneScope.containsKey(\"name3\")).andReturn(false);\n        expect(twoScope.containsKey(\"name2\")).andReturn(true);\n        expect(twoScope.put(\"name2\", \"otherValue2\")).andReturn(\"value2\");\n        expect(twoScope.containsKey(\"name3\")).andReturn(false);\n        expect(oneScope.put(\"name3\", \"otherValue3\")).andReturn(null);\n\n        replay(request, oneScope, twoScope);\n        accessor.setProperty(null, request, \"name1\", \"otherValue1\");\n        accessor.setProperty(null, request, \"name2\", \"otherValue2\");\n        accessor.setProperty(null, request, \"name3\", \"otherValue3\");\n        verify(request, oneScope, twoScope);\n    }", "signature": "void testSetProperty()", "full_signature": "@SuppressWarnings(\"unchecked\") @Test public void testSetProperty()", "class_method_signature": "AnyScopePropertyAccessorTest.testSetProperty()", "testcase": true, "constructor": false, "invocations": ["createMock", "createMock", "createMock", "anyTimes", "andReturn", "expect", "getAvailableScopes", "asList", "anyTimes", "andReturn", "expect", "getContext", "anyTimes", "andReturn", "expect", "getContext", "andReturn", "expect", "containsKey", "andReturn", "expect", "put", "andReturn", "expect", "containsKey", "andReturn", "expect", "containsKey", "andReturn", "expect", "containsKey", "andReturn", "expect", "put", "andReturn", "expect", "containsKey", "andReturn", "expect", "put", "replay", "setProperty", "setProperty", "setProperty", "verify"]}, "focal_class": {"identifier": "AnyScopePropertyAccessor", "superclass": "", "interfaces": "implements PropertyAccessor", "fields": [], "methods": [{"identifier": "getProperty", "parameters": "(@SuppressWarnings(\"rawtypes\") Map context, Object target, Object name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getProperty(@SuppressWarnings(\"rawtypes\") Map context, Object target, Object name)", "full_signature": "@Override public Object getProperty(@SuppressWarnings(\"rawtypes\") Map context, Object target, Object name)", "class_method_signature": "AnyScopePropertyAccessor.getProperty(@SuppressWarnings(\"rawtypes\") Map context, Object target, Object name)", "testcase": false, "constructor": false}, {"identifier": "getSourceAccessor", "parameters": "(OgnlContext context, Object target,\n            Object index)", "modifiers": "@Override public", "return": "String", "signature": "String getSourceAccessor(OgnlContext context, Object target,\n            Object index)", "full_signature": "@Override public String getSourceAccessor(OgnlContext context, Object target,\n            Object index)", "class_method_signature": "AnyScopePropertyAccessor.getSourceAccessor(OgnlContext context, Object target,\n            Object index)", "testcase": false, "constructor": false}, {"identifier": "getSourceSetter", "parameters": "(OgnlContext context, Object target,\n            Object index)", "modifiers": "@Override public", "return": "String", "signature": "String getSourceSetter(OgnlContext context, Object target,\n            Object index)", "full_signature": "@Override public String getSourceSetter(OgnlContext context, Object target,\n            Object index)", "class_method_signature": "AnyScopePropertyAccessor.getSourceSetter(OgnlContext context, Object target,\n            Object index)", "testcase": false, "constructor": false}, {"identifier": "setProperty", "parameters": "(@SuppressWarnings(\"rawtypes\") Map context, Object target, Object name,\n            Object value)", "modifiers": "@Override public", "return": "void", "signature": "void setProperty(@SuppressWarnings(\"rawtypes\") Map context, Object target, Object name,\n            Object value)", "full_signature": "@Override public void setProperty(@SuppressWarnings(\"rawtypes\") Map context, Object target, Object name,\n            Object value)", "class_method_signature": "AnyScopePropertyAccessor.setProperty(@SuppressWarnings(\"rawtypes\") Map context, Object target, Object name,\n            Object value)", "testcase": false, "constructor": false}], "file": "tiles-ognl/src/main/java/org/apache/tiles/ognl/AnyScopePropertyAccessor.java"}, "focal_method": {"identifier": "setProperty", "parameters": "(@SuppressWarnings(\"rawtypes\") Map context, Object target, Object name,\n            Object value)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void setProperty(@SuppressWarnings(\"rawtypes\") Map context, Object target, Object name,\n            Object value) {\n        Request request = (Request) target;\n        String attributeName = (String) name;\n        String[] availableScopes = request.getAvailableScopes().toArray(new String[0]);\n        for (String scopeName : availableScopes) {\n            Map<String, Object> scope = request.getContext(scopeName);\n            if (scope.containsKey(attributeName)) {\n                scope.put(attributeName, value);\n                return;\n            }\n        }\n        if (availableScopes.length > 0) {\n            request.getContext(availableScopes[0]).put(attributeName, value);\n        }\n    }", "signature": "void setProperty(@SuppressWarnings(\"rawtypes\") Map context, Object target, Object name,\n            Object value)", "full_signature": "@Override public void setProperty(@SuppressWarnings(\"rawtypes\") Map context, Object target, Object name,\n            Object value)", "class_method_signature": "AnyScopePropertyAccessor.setProperty(@SuppressWarnings(\"rawtypes\") Map context, Object target, Object name,\n            Object value)", "testcase": false, "constructor": false, "invocations": ["toArray", "getAvailableScopes", "getContext", "containsKey", "put", "put", "getContext"]}, "repository": {"repo_id": 2641714, "url": "https://github.com/apache/tiles", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 99, "size": 12554, "license": "licensed"}}