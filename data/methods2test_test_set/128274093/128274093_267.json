{"test_class": {"identifier": "BlockingSubscriberTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/subscribers/BlockingSubscriberTest.java"}, "test_case": {"identifier": "cancelOnRequest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void cancelOnRequest() {\n\n        final BlockingFirstSubscriber<Integer> bf = new BlockingFirstSubscriber<Integer>();\n\n        final AtomicBoolean b = new AtomicBoolean();\n\n        Subscription s = new Subscription() {\n            @Override\n            public void request(long n) {\n                bf.cancelled = true;\n            }\n            @Override\n            public void cancel() {\n                b.set(true);\n            }\n        };\n\n        bf.onSubscribe(s);\n\n        assertTrue(b.get());\n    }", "signature": "void cancelOnRequest()", "full_signature": "@Test public void cancelOnRequest()", "class_method_signature": "BlockingSubscriberTest.cancelOnRequest()", "testcase": true, "constructor": false, "invocations": ["set", "onSubscribe", "assertTrue", "get"]}, "focal_class": {"identifier": "BlockingSubscriber", "superclass": "extends AtomicReference<Subscription>", "interfaces": "implements FlowableSubscriber<T>, Subscription", "fields": [{"original_string": "private static final long serialVersionUID = -4875965440900746268L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -4875965440900746268L", "var_name": "serialVersionUID"}, {"original_string": "public static final Object TERMINATED = new Object();", "modifier": "public static final", "type": "Object", "declarator": "TERMINATED = new Object()", "var_name": "TERMINATED"}, {"original_string": "final Queue<Object> queue;", "modifier": "final", "type": "Queue<Object>", "declarator": "queue", "var_name": "queue"}], "methods": [{"identifier": "BlockingSubscriber", "parameters": "(Queue<Object> queue)", "modifiers": "public", "return": "", "signature": " BlockingSubscriber(Queue<Object> queue)", "full_signature": "public  BlockingSubscriber(Queue<Object> queue)", "class_method_signature": "BlockingSubscriber.BlockingSubscriber(Queue<Object> queue)", "testcase": false, "constructor": true}, {"identifier": "onSubscribe", "parameters": "(Subscription s)", "modifiers": "@Override public", "return": "void", "signature": "void onSubscribe(Subscription s)", "full_signature": "@Override public void onSubscribe(Subscription s)", "class_method_signature": "BlockingSubscriber.onSubscribe(Subscription s)", "testcase": false, "constructor": false}, {"identifier": "onNext", "parameters": "(T t)", "modifiers": "@Override public", "return": "void", "signature": "void onNext(T t)", "full_signature": "@Override public void onNext(T t)", "class_method_signature": "BlockingSubscriber.onNext(T t)", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(Throwable t)", "modifiers": "@Override public", "return": "void", "signature": "void onError(Throwable t)", "full_signature": "@Override public void onError(Throwable t)", "class_method_signature": "BlockingSubscriber.onError(Throwable t)", "testcase": false, "constructor": false}, {"identifier": "onComplete", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onComplete()", "full_signature": "@Override public void onComplete()", "class_method_signature": "BlockingSubscriber.onComplete()", "testcase": false, "constructor": false}, {"identifier": "request", "parameters": "(long n)", "modifiers": "@Override public", "return": "void", "signature": "void request(long n)", "full_signature": "@Override public void request(long n)", "class_method_signature": "BlockingSubscriber.request(long n)", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void cancel()", "full_signature": "@Override public void cancel()", "class_method_signature": "BlockingSubscriber.cancel()", "testcase": false, "constructor": false}, {"identifier": "isCancelled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCancelled()", "full_signature": "public boolean isCancelled()", "class_method_signature": "BlockingSubscriber.isCancelled()", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/subscribers/BlockingSubscriber.java"}, "focal_method": {"identifier": "onSubscribe", "parameters": "(Subscription s)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onSubscribe(Subscription s) {\n        if (SubscriptionHelper.setOnce(this, s)) {\n            queue.offer(NotificationLite.subscription(this));\n        }\n    }", "signature": "void onSubscribe(Subscription s)", "full_signature": "@Override public void onSubscribe(Subscription s)", "class_method_signature": "BlockingSubscriber.onSubscribe(Subscription s)", "testcase": false, "constructor": false, "invocations": ["setOnce", "offer", "subscription"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}