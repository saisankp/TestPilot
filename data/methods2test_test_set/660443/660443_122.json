{"test_class": {"identifier": "AtomSymbolTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Font font = new Font(\"Verdana\", Font.PLAIN, 12);", "modifier": "private final", "type": "Font", "declarator": "font = new Font(\"Verdana\", Font.PLAIN, 12)", "var_name": "font"}], "file": "display/renderbasic/src/test/java/org/openscience/cdk/renderer/generators/standard/AtomSymbolTest.java"}, "test_case": {"identifier": "testGetOutlines", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetOutlines() throws Exception {\n        TextOutline outline = new TextOutline(\"Cl\", font);\n        AtomSymbol symbol = new AtomSymbol(outline, Collections.<TextOutline> emptyList());\n        Rectangle outlineBounds = outline.getOutline().getBounds();\n        Rectangle symbolBounds = symbol.getOutlines().get(0).getBounds();\n        assertThat(outlineBounds.getX(), closeTo(symbolBounds.getX(), 0.01));\n        assertThat(outlineBounds.getY(), closeTo(symbolBounds.getY(), 0.01));\n        assertThat(outlineBounds.getMaxX(), closeTo(symbolBounds.getMaxX(), 0.01));\n        assertThat(outlineBounds.getMaxY(), closeTo(symbolBounds.getMaxY(), 0.01));\n    }", "signature": "void testGetOutlines()", "full_signature": "@Test public void testGetOutlines()", "class_method_signature": "AtomSymbolTest.testGetOutlines()", "testcase": true, "constructor": false, "invocations": ["emptyList", "getBounds", "getOutline", "getBounds", "get", "getOutlines", "assertThat", "getX", "closeTo", "getX", "assertThat", "getY", "closeTo", "getY", "assertThat", "getMaxX", "closeTo", "getMaxX", "assertThat", "getMaxY", "closeTo", "getMaxY"]}, "focal_class": {"identifier": "AtomSymbol", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TextOutline       element;", "modifier": "private final", "type": "TextOutline", "declarator": "element", "var_name": "element"}, {"original_string": "private final List<TextOutline> adjuncts;", "modifier": "private final", "type": "List<TextOutline>", "declarator": "adjuncts", "var_name": "adjuncts"}, {"original_string": "private final List<TextOutline> annotationAdjuncts;", "modifier": "private final", "type": "List<TextOutline>", "declarator": "annotationAdjuncts", "var_name": "annotationAdjuncts"}, {"original_string": "private final SymbolAlignment   alignment;", "modifier": "private final", "type": "SymbolAlignment", "declarator": "alignment", "var_name": "alignment"}, {"original_string": "private final ConvexHull        hull;", "modifier": "private final", "type": "ConvexHull", "declarator": "hull", "var_name": "hull"}], "methods": [{"identifier": "AtomSymbol", "parameters": "(TextOutline element, List<TextOutline> adjuncts)", "modifiers": "", "return": "", "signature": " AtomSymbol(TextOutline element, List<TextOutline> adjuncts)", "full_signature": "  AtomSymbol(TextOutline element, List<TextOutline> adjuncts)", "class_method_signature": "AtomSymbol.AtomSymbol(TextOutline element, List<TextOutline> adjuncts)", "testcase": false, "constructor": true}, {"identifier": "AtomSymbol", "parameters": "(TextOutline element, List<TextOutline> adjuncts, List<TextOutline> annotationAdjuncts,\n            SymbolAlignment alignment, ConvexHull hull)", "modifiers": "private", "return": "", "signature": " AtomSymbol(TextOutline element, List<TextOutline> adjuncts, List<TextOutline> annotationAdjuncts,\n            SymbolAlignment alignment, ConvexHull hull)", "full_signature": "private  AtomSymbol(TextOutline element, List<TextOutline> adjuncts, List<TextOutline> annotationAdjuncts,\n            SymbolAlignment alignment, ConvexHull hull)", "class_method_signature": "AtomSymbol.AtomSymbol(TextOutline element, List<TextOutline> adjuncts, List<TextOutline> annotationAdjuncts,\n            SymbolAlignment alignment, ConvexHull hull)", "testcase": false, "constructor": true}, {"identifier": "alignTo", "parameters": "(SymbolAlignment alignment)", "modifiers": "", "return": "AtomSymbol", "signature": "AtomSymbol alignTo(SymbolAlignment alignment)", "full_signature": " AtomSymbol alignTo(SymbolAlignment alignment)", "class_method_signature": "AtomSymbol.alignTo(SymbolAlignment alignment)", "testcase": false, "constructor": false}, {"identifier": "addAnnotation", "parameters": "(TextOutline annotation)", "modifiers": "", "return": "AtomSymbol", "signature": "AtomSymbol addAnnotation(TextOutline annotation)", "full_signature": " AtomSymbol addAnnotation(TextOutline annotation)", "class_method_signature": "AtomSymbol.addAnnotation(TextOutline annotation)", "testcase": false, "constructor": false}, {"identifier": "getAlignmentCenter", "parameters": "()", "modifiers": "", "return": "Point2D", "signature": "Point2D getAlignmentCenter()", "full_signature": " Point2D getAlignmentCenter()", "class_method_signature": "AtomSymbol.getAlignmentCenter()", "testcase": false, "constructor": false}, {"identifier": "elementOutline", "parameters": "()", "modifiers": "", "return": "TextOutline", "signature": "TextOutline elementOutline()", "full_signature": " TextOutline elementOutline()", "class_method_signature": "AtomSymbol.elementOutline()", "testcase": false, "constructor": false}, {"identifier": "adjunctOutlines", "parameters": "()", "modifiers": "", "return": "List<TextOutline>", "signature": "List<TextOutline> adjunctOutlines()", "full_signature": " List<TextOutline> adjunctOutlines()", "class_method_signature": "AtomSymbol.adjunctOutlines()", "testcase": false, "constructor": false}, {"identifier": "getOutlines", "parameters": "()", "modifiers": "", "return": "List<Shape>", "signature": "List<Shape> getOutlines()", "full_signature": " List<Shape> getOutlines()", "class_method_signature": "AtomSymbol.getOutlines()", "testcase": false, "constructor": false}, {"identifier": "getAnnotationOutlines", "parameters": "()", "modifiers": "", "return": "List<Shape>", "signature": "List<Shape> getAnnotationOutlines()", "full_signature": " List<Shape> getAnnotationOutlines()", "class_method_signature": "AtomSymbol.getAnnotationOutlines()", "testcase": false, "constructor": false}, {"identifier": "getConvexHull", "parameters": "()", "modifiers": "", "return": "ConvexHull", "signature": "ConvexHull getConvexHull()", "full_signature": " ConvexHull getConvexHull()", "class_method_signature": "AtomSymbol.getConvexHull()", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(AffineTransform transform)", "modifiers": "", "return": "AtomSymbol", "signature": "AtomSymbol transform(AffineTransform transform)", "full_signature": " AtomSymbol transform(AffineTransform transform)", "class_method_signature": "AtomSymbol.transform(AffineTransform transform)", "testcase": false, "constructor": false}, {"identifier": "resize", "parameters": "(double scaleX, double scaleY)", "modifiers": "", "return": "AtomSymbol", "signature": "AtomSymbol resize(double scaleX, double scaleY)", "full_signature": " AtomSymbol resize(double scaleX, double scaleY)", "class_method_signature": "AtomSymbol.resize(double scaleX, double scaleY)", "testcase": false, "constructor": false}, {"identifier": "center", "parameters": "(double x, double y)", "modifiers": "", "return": "AtomSymbol", "signature": "AtomSymbol center(double x, double y)", "full_signature": " AtomSymbol center(double x, double y)", "class_method_signature": "AtomSymbol.center(double x, double y)", "testcase": false, "constructor": false}, {"identifier": "translate", "parameters": "(double x, double y)", "modifiers": "", "return": "AtomSymbol", "signature": "AtomSymbol translate(double x, double y)", "full_signature": " AtomSymbol translate(double x, double y)", "class_method_signature": "AtomSymbol.translate(double x, double y)", "testcase": false, "constructor": false}], "file": "display/renderbasic/src/main/java/org/openscience/cdk/renderer/generators/standard/AtomSymbol.java"}, "focal_method": {"identifier": "getOutlines", "parameters": "()", "modifiers": "", "return": "List<Shape>", "body": "List<Shape> getOutlines() {\n        List<Shape> shapes = new ArrayList<Shape>();\n        shapes.add(element.getOutline());\n        for (TextOutline adjunct : adjuncts)\n            shapes.add(adjunct.getOutline());\n        return shapes;\n    }", "signature": "List<Shape> getOutlines()", "full_signature": " List<Shape> getOutlines()", "class_method_signature": "AtomSymbol.getOutlines()", "testcase": false, "constructor": false, "invocations": ["add", "getOutline", "add", "getOutline"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}