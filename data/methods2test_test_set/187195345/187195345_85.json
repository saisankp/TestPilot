{"test_class": {"identifier": "PathUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int VALUE_5 = 5;", "modifier": "private static final", "type": "int", "declarator": "VALUE_5 = 5", "var_name": "VALUE_5"}, {"original_string": "private static final int VALUE_100 = 100;", "modifier": "private static final", "type": "int", "declarator": "VALUE_100 = 100", "var_name": "VALUE_100"}, {"original_string": "private static final int VALUE_400 = 400;", "modifier": "private static final", "type": "int", "declarator": "VALUE_400 = 400", "var_name": "VALUE_400"}, {"original_string": "private static final int VALUE_500 = 500;", "modifier": "private static final", "type": "int", "declarator": "VALUE_500 = 500", "var_name": "VALUE_500"}, {"original_string": "private static final int RETURN_CODE_MINUS_ONE = -1;", "modifier": "private static final", "type": "int", "declarator": "RETURN_CODE_MINUS_ONE = -1", "var_name": "RETURN_CODE_MINUS_ONE"}, {"original_string": "private static final int PATH_LENGTH = 2553;", "modifier": "private static final", "type": "int", "declarator": "PATH_LENGTH = 2553", "var_name": "PATH_LENGTH"}, {"original_string": "private final ArrayList<Line> path = new ArrayList<Line>();", "modifier": "private final", "type": "ArrayList<Line>", "declarator": "path = new ArrayList<Line>()", "var_name": "path"}, {"original_string": "private final ArrayList<Line> emptyPath = new ArrayList<Line>();", "modifier": "private final", "type": "ArrayList<Line>", "declarator": "emptyPath = new ArrayList<Line>()", "var_name": "emptyPath"}, {"original_string": "private final ArrayList<Line> notConnectedPath = new ArrayList<Line>();", "modifier": "private final", "type": "ArrayList<Line>", "declarator": "notConnectedPath = new ArrayList<Line>()", "var_name": "notConnectedPath"}, {"original_string": "private final PriorityQueue<PQElem> pq = new PriorityQueue<PQElem>(11,\n            new PQElem.PQElemComparator());", "modifier": "private final", "type": "PriorityQueue<PQElem>", "declarator": "pq = new PriorityQueue<PQElem>(11,\n            new PQElem.PQElemComparator())", "var_name": "pq"}, {"original_string": "private Line l1;", "modifier": "private", "type": "Line", "declarator": "l1", "var_name": "l1"}, {"original_string": "private PQElem elem1;", "modifier": "private", "type": "PQElem", "declarator": "elem1", "var_name": "elem1"}, {"original_string": "private Line l4;", "modifier": "private", "type": "Line", "declarator": "l4", "var_name": "l4"}, {"original_string": "private PQElem elem4;", "modifier": "private", "type": "PQElem", "declarator": "elem4", "var_name": "elem4"}, {"original_string": "private Line l3;", "modifier": "private", "type": "Line", "declarator": "l3", "var_name": "l3"}, {"original_string": "private PQElem elem5;", "modifier": "private", "type": "PQElem", "declarator": "elem5", "var_name": "elem5"}, {"original_string": "private PQElem elem6;", "modifier": "private", "type": "PQElem", "declarator": "elem6", "var_name": "elem6"}], "file": "map/src/test/java/openlr/map/utils/PathUtilsTest.java"}, "test_case": {"identifier": "testGetLength2", "parameters": "()", "modifiers": "@Test public final", "return": "void", "body": "@Test\n    public final void testGetLength2() {\n        assertEquals(PathUtils.getLength(path, path.get(0), path.get(path\n                .size() - 1)), PATH_LENGTH);\n        assertEquals(PathUtils.getLength(path, null, null), RETURN_CODE_MINUS_ONE);\n        assertEquals(PathUtils.getLength(null, null, null), 0);\n        assertEquals(PathUtils.getLength(emptyPath, null, null), 0);\n        assertEquals(PathUtils.getLength(path, path.get(path.size() - 1), path\n                .get(0)), RETURN_CODE_MINUS_ONE);\n        assertEquals(PathUtils.getLength(path, path.get(0), null),\n                RETURN_CODE_MINUS_ONE);\n        assertEquals(PathUtils.getLength(path, null, path.get(0)),\n                RETURN_CODE_MINUS_ONE);\n    }", "signature": "void testGetLength2()", "full_signature": "@Test public final void testGetLength2()", "class_method_signature": "PathUtilsTest.testGetLength2()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getLength", "get", "get", "size", "assertEquals", "getLength", "assertEquals", "getLength", "assertEquals", "getLength", "assertEquals", "getLength", "get", "size", "get", "assertEquals", "getLength", "get", "assertEquals", "getLength", "get"]}, "focal_class": {"identifier": "PathUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "PathUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " PathUtils()", "full_signature": "private  PathUtils()", "class_method_signature": "PathUtils.PathUtils()", "testcase": false, "constructor": true}, {"identifier": "getLength", "parameters": "(final List<Line> path, final Line start,\n                                final Line end)", "modifiers": "public static", "return": "int", "signature": "int getLength(final List<Line> path, final Line start,\n                                final Line end)", "full_signature": "public static int getLength(final List<Line> path, final Line start,\n                                final Line end)", "class_method_signature": "PathUtils.getLength(final List<Line> path, final Line start,\n                                final Line end)", "testcase": false, "constructor": false}, {"identifier": "getLength", "parameters": "(final List<Line> path)", "modifiers": "public static", "return": "int", "signature": "int getLength(final List<Line> path)", "full_signature": "public static int getLength(final List<Line> path)", "class_method_signature": "PathUtils.getLength(final List<Line> path)", "testcase": false, "constructor": false}, {"identifier": "checkPathConnection", "parameters": "(final List<Line> path)", "modifiers": "public static", "return": "boolean", "signature": "boolean checkPathConnection(final List<Line> path)", "full_signature": "public static boolean checkPathConnection(final List<Line> path)", "class_method_signature": "PathUtils.checkPathConnection(final List<Line> path)", "testcase": false, "constructor": false}, {"identifier": "constructPath", "parameters": "(final LineLinkedListElement dest)", "modifiers": "public static", "return": "List<Line>", "signature": "List<Line> constructPath(final LineLinkedListElement dest)", "full_signature": "public static List<Line> constructPath(final LineLinkedListElement dest)", "class_method_signature": "PathUtils.constructPath(final LineLinkedListElement dest)", "testcase": false, "constructor": false}, {"identifier": "findElementInQueue", "parameters": "(\n            final Queue<? extends LineLinkedListElement> pq, final Line line)", "modifiers": "public static", "return": "LineLinkedListElement", "signature": "LineLinkedListElement findElementInQueue(\n            final Queue<? extends LineLinkedListElement> pq, final Line line)", "full_signature": "public static LineLinkedListElement findElementInQueue(\n            final Queue<? extends LineLinkedListElement> pq, final Line line)", "class_method_signature": "PathUtils.findElementInQueue(\n            final Queue<? extends LineLinkedListElement> pq, final Line line)", "testcase": false, "constructor": false}, {"identifier": "findCommonLineInPaths", "parameters": "(final List<? extends Line> location,\n                                             final LineLinkedListElement el)", "modifiers": "public static", "return": "Line", "signature": "Line findCommonLineInPaths(final List<? extends Line> location,\n                                             final LineLinkedListElement el)", "full_signature": "public static Line findCommonLineInPaths(final List<? extends Line> location,\n                                             final LineLinkedListElement el)", "class_method_signature": "PathUtils.findCommonLineInPaths(final List<? extends Line> location,\n                                             final LineLinkedListElement el)", "testcase": false, "constructor": false}], "file": "map/src/main/java/openlr/map/utils/PathUtils.java"}, "focal_method": {"identifier": "getLength", "parameters": "(final List<Line> path, final Line start,\n                                final Line end)", "modifiers": "public static", "return": "int", "body": "public static int getLength(final List<Line> path, final Line start,\n                                final Line end) {\n        if (path == null || path.isEmpty()) {\n            return 0;\n        }\n        int posStart = path.indexOf(start);\n        int posEnd = path.indexOf(end);\n        if (posStart < 0 || posEnd < 0 || posEnd < posStart) {\n            return -1;\n        }\n        int length = 0;\n        int i = posStart;\n        while (i <= posEnd) {\n            length += path.get(i).getLineLength();\n            i++;\n        }\n        return length;\n    }", "signature": "int getLength(final List<Line> path, final Line start,\n                                final Line end)", "full_signature": "public static int getLength(final List<Line> path, final Line start,\n                                final Line end)", "class_method_signature": "PathUtils.getLength(final List<Line> path, final Line start,\n                                final Line end)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "indexOf", "indexOf", "getLineLength", "get"]}, "repository": {"repo_id": 187195345, "url": "https://github.com/tomtom-international/openlr", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 24, "size": 4809, "license": "licensed"}}