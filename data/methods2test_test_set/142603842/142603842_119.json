{"test_class": {"identifier": "CountryCodeValidatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "optaweb-vehicle-routing-backend/src/test/java/org/optaweb/vehiclerouting/domain/CountryCodeValidatorTest.java"}, "test_case": {"identifier": "should_ignore_case_and_convert_to_upper_case", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void should_ignore_case_and_convert_to_upper_case() {\n        assertThat(validate(Arrays.asList(\"us\"))).containsExactly(\"US\");\n    }", "signature": "void should_ignore_case_and_convert_to_upper_case()", "full_signature": "@Test void should_ignore_case_and_convert_to_upper_case()", "class_method_signature": "CountryCodeValidatorTest.should_ignore_case_and_convert_to_upper_case()", "testcase": true, "constructor": false, "invocations": ["containsExactly", "assertThat", "validate", "asList"]}, "focal_class": {"identifier": "CountryCodeValidator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(CountryCodeValidator.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CountryCodeValidator.class)", "var_name": "logger"}], "methods": [{"identifier": "CountryCodeValidator", "parameters": "()", "modifiers": "private", "return": "", "signature": " CountryCodeValidator()", "full_signature": "private  CountryCodeValidator()", "class_method_signature": "CountryCodeValidator.CountryCodeValidator()", "testcase": false, "constructor": true}, {"identifier": "validate", "parameters": "(List<String> countryCodes)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> validate(List<String> countryCodes)", "full_signature": "public static List<String> validate(List<String> countryCodes)", "class_method_signature": "CountryCodeValidator.validate(List<String> countryCodes)", "testcase": false, "constructor": false}], "file": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/domain/CountryCodeValidator.java"}, "focal_method": {"identifier": "validate", "parameters": "(List<String> countryCodes)", "modifiers": "public static", "return": "List<String>", "body": "public static List<String> validate(List<String> countryCodes) {\n        List<String> upperCaseCountries = Objects.requireNonNull(countryCodes).stream()\n                .map(String::toUpperCase)\n                .collect(toList());\n        List<String> invalidCodes = upperCaseCountries.stream()\n                .filter(s -> CountryCode.getByAlpha2Code(s) == null)\n                .collect(toList());\n        if (!invalidCodes.isEmpty()) {\n            throw new IllegalArgumentException(\n                    \"Following elements (\" + invalidCodes + \") are not valid ISO 3166-1 alpha-2 country codes\");\n        }\n        List<String> uniqueCountries = upperCaseCountries.stream().distinct().collect(toList());\n        if (uniqueCountries.size() < countryCodes.size()) {\n            logger.warn(\"Duplicate items were removed from {}\", countryCodes);\n        }\n        return uniqueCountries;\n    }", "signature": "List<String> validate(List<String> countryCodes)", "full_signature": "public static List<String> validate(List<String> countryCodes)", "class_method_signature": "CountryCodeValidator.validate(List<String> countryCodes)", "testcase": false, "constructor": false, "invocations": ["collect", "map", "stream", "requireNonNull", "toList", "collect", "filter", "stream", "getByAlpha2Code", "toList", "isEmpty", "collect", "distinct", "stream", "toList", "size", "size", "warn"]}, "repository": {"repo_id": 142603842, "url": "https://github.com/kiegroup/optaweb-vehicle-routing", "stars": 42, "created": "7/27/2018 5:08:08 PM +00:00", "updates": "2020-01-27T22:19:48+00:00", "fork": "False", "license": "licensed"}}