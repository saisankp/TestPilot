{"test_class": {"identifier": "AggregationDistinctQueryResultTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AggregationDistinctQueryResult aggregationDistinctQueryResult;", "modifier": "private", "type": "AggregationDistinctQueryResult", "declarator": "aggregationDistinctQueryResult", "var_name": "aggregationDistinctQueryResult"}], "file": "zebra/zebra-thirdparty/sharding-core-execute/src/test/java/org/apache/shardingsphere/core/execute/sql/execute/result/AggregationDistinctQueryResultTest.java"}, "test_case": {"identifier": "assertGetInputStreamByColumnIndex", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void assertGetInputStreamByColumnIndex() throws IOException {\n        aggregationDistinctQueryResult.next();\n        assertThat(aggregationDistinctQueryResult.getInputStream(1, \"Unicode\").read(), is(getInputStream(10).read()));\n    }", "signature": "void assertGetInputStreamByColumnIndex()", "full_signature": "@Test public void assertGetInputStreamByColumnIndex()", "class_method_signature": "AggregationDistinctQueryResultTest.assertGetInputStreamByColumnIndex()", "testcase": true, "constructor": false, "invocations": ["next", "assertThat", "read", "getInputStream", "is", "read", "getInputStream"]}, "focal_class": {"identifier": "AggregationDistinctQueryResult", "superclass": "extends DistinctQueryResult", "interfaces": "", "fields": [{"original_string": "private final AggregationDistinctQueryMetaData metaData;", "modifier": "private final", "type": "AggregationDistinctQueryMetaData", "declarator": "metaData", "var_name": "metaData"}], "methods": [{"identifier": "AggregationDistinctQueryResult", "parameters": "(final QueryResultMetaData queryResultMetaData, final Iterator<QueryRow> resultData, final AggregationDistinctQueryMetaData distinctQueryMetaData)", "modifiers": "private", "return": "", "signature": " AggregationDistinctQueryResult(final QueryResultMetaData queryResultMetaData, final Iterator<QueryRow> resultData, final AggregationDistinctQueryMetaData distinctQueryMetaData)", "full_signature": "private  AggregationDistinctQueryResult(final QueryResultMetaData queryResultMetaData, final Iterator<QueryRow> resultData, final AggregationDistinctQueryMetaData distinctQueryMetaData)", "class_method_signature": "AggregationDistinctQueryResult.AggregationDistinctQueryResult(final QueryResultMetaData queryResultMetaData, final Iterator<QueryRow> resultData, final AggregationDistinctQueryMetaData distinctQueryMetaData)", "testcase": false, "constructor": true}, {"identifier": "AggregationDistinctQueryResult", "parameters": "(final Collection<QueryResult> queryResults, final List<AggregationDistinctSelectItem> aggregationDistinctSelectItems)", "modifiers": "public", "return": "", "signature": " AggregationDistinctQueryResult(final Collection<QueryResult> queryResults, final List<AggregationDistinctSelectItem> aggregationDistinctSelectItems)", "full_signature": "public  AggregationDistinctQueryResult(final Collection<QueryResult> queryResults, final List<AggregationDistinctSelectItem> aggregationDistinctSelectItems)", "class_method_signature": "AggregationDistinctQueryResult.AggregationDistinctQueryResult(final Collection<QueryResult> queryResults, final List<AggregationDistinctSelectItem> aggregationDistinctSelectItems)", "testcase": false, "constructor": true}, {"identifier": "divide", "parameters": "()", "modifiers": "@Override public", "return": "List<DistinctQueryResult>", "signature": "List<DistinctQueryResult> divide()", "full_signature": "@Override public List<DistinctQueryResult> divide()", "class_method_signature": "AggregationDistinctQueryResult.divide()", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(final int columnIndex)", "modifiers": "private", "return": "Object", "signature": "Object getValue(final int columnIndex)", "full_signature": "private Object getValue(final int columnIndex)", "class_method_signature": "AggregationDistinctQueryResult.getValue(final int columnIndex)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(final String columnLabel)", "modifiers": "private", "return": "Object", "signature": "Object getValue(final String columnLabel)", "full_signature": "private Object getValue(final String columnLabel)", "class_method_signature": "AggregationDistinctQueryResult.getValue(final String columnLabel)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(final int columnIndex, final Class<?> type)", "modifiers": "@Override public", "return": "Object", "signature": "Object getValue(final int columnIndex, final Class<?> type)", "full_signature": "@Override public Object getValue(final int columnIndex, final Class<?> type)", "class_method_signature": "AggregationDistinctQueryResult.getValue(final int columnIndex, final Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(final String columnLabel, final Class<?> type)", "modifiers": "@Override public", "return": "Object", "signature": "Object getValue(final String columnLabel, final Class<?> type)", "full_signature": "@Override public Object getValue(final String columnLabel, final Class<?> type)", "class_method_signature": "AggregationDistinctQueryResult.getValue(final String columnLabel, final Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "getCalendarValue", "parameters": "(final int columnIndex, final Class<?> type, final Calendar calendar)", "modifiers": "@Override public", "return": "Object", "signature": "Object getCalendarValue(final int columnIndex, final Class<?> type, final Calendar calendar)", "full_signature": "@Override public Object getCalendarValue(final int columnIndex, final Class<?> type, final Calendar calendar)", "class_method_signature": "AggregationDistinctQueryResult.getCalendarValue(final int columnIndex, final Class<?> type, final Calendar calendar)", "testcase": false, "constructor": false}, {"identifier": "getCalendarValue", "parameters": "(final String columnLabel, final Class<?> type, final Calendar calendar)", "modifiers": "@Override public", "return": "Object", "signature": "Object getCalendarValue(final String columnLabel, final Class<?> type, final Calendar calendar)", "full_signature": "@Override public Object getCalendarValue(final String columnLabel, final Class<?> type, final Calendar calendar)", "class_method_signature": "AggregationDistinctQueryResult.getCalendarValue(final String columnLabel, final Class<?> type, final Calendar calendar)", "testcase": false, "constructor": false}, {"identifier": "getInputStream", "parameters": "(final int columnIndex, final String type)", "modifiers": "@Override public", "return": "InputStream", "signature": "InputStream getInputStream(final int columnIndex, final String type)", "full_signature": "@Override public InputStream getInputStream(final int columnIndex, final String type)", "class_method_signature": "AggregationDistinctQueryResult.getInputStream(final int columnIndex, final String type)", "testcase": false, "constructor": false}, {"identifier": "getInputStream", "parameters": "(final String columnLabel, final String type)", "modifiers": "@Override public", "return": "InputStream", "signature": "InputStream getInputStream(final String columnLabel, final String type)", "full_signature": "@Override public InputStream getInputStream(final String columnLabel, final String type)", "class_method_signature": "AggregationDistinctQueryResult.getInputStream(final String columnLabel, final String type)", "testcase": false, "constructor": false}, {"identifier": "wasNull", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean wasNull()", "full_signature": "@Override public boolean wasNull()", "class_method_signature": "AggregationDistinctQueryResult.wasNull()", "testcase": false, "constructor": false}, {"identifier": "getColumnLabel", "parameters": "(final int columnIndex)", "modifiers": "@Override public", "return": "String", "signature": "String getColumnLabel(final int columnIndex)", "full_signature": "@Override public String getColumnLabel(final int columnIndex)", "class_method_signature": "AggregationDistinctQueryResult.getColumnLabel(final int columnIndex)", "testcase": false, "constructor": false}, {"identifier": "getColumnIndex", "parameters": "(final String columnLabel)", "modifiers": "@Override protected", "return": "Integer", "signature": "Integer getColumnIndex(final String columnLabel)", "full_signature": "@Override protected Integer getColumnIndex(final String columnLabel)", "class_method_signature": "AggregationDistinctQueryResult.getColumnIndex(final String columnLabel)", "testcase": false, "constructor": false}, {"identifier": "isContainColumnLabel", "parameters": "(final String columnLabel)", "modifiers": "private", "return": "boolean", "signature": "boolean isContainColumnLabel(final String columnLabel)", "full_signature": "private boolean isContainColumnLabel(final String columnLabel)", "class_method_signature": "AggregationDistinctQueryResult.isContainColumnLabel(final String columnLabel)", "testcase": false, "constructor": false}], "file": "zebra/zebra-thirdparty/sharding-core-execute/src/main/java/org/apache/shardingsphere/core/execute/sql/execute/result/AggregationDistinctQueryResult.java"}, "focal_method": {"identifier": "getInputStream", "parameters": "(final int columnIndex, final String type)", "modifiers": "@Override public", "return": "InputStream", "body": "@Override\n    public InputStream getInputStream(final int columnIndex, final String type) {\n        return getInputStream(getValue(columnIndex));\n    }", "signature": "InputStream getInputStream(final int columnIndex, final String type)", "full_signature": "@Override public InputStream getInputStream(final int columnIndex, final String type)", "class_method_signature": "AggregationDistinctQueryResult.getInputStream(final int columnIndex, final String type)", "testcase": false, "constructor": false, "invocations": ["getInputStream", "getValue"]}, "repository": {"repo_id": 227543326, "url": "https://github.com/gszebra/zebra", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 15, "size": 2223, "license": "licensed"}}