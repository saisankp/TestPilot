{"test_class": {"identifier": "DeviceConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final DeviceConverter converter = new DeviceConverter();", "modifier": "private final", "type": "DeviceConverter", "declarator": "converter = new DeviceConverter()", "var_name": "converter"}], "file": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/test/java/org/opensmartgridplatform/adapter/protocol/dlms/application/mapping/DeviceConverterTest.java"}, "test_case": {"identifier": "convertsSmartMeteringDtoToDlmsDevice", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void convertsSmartMeteringDtoToDlmsDevice() {\n        final SmartMeteringDeviceDto dto = new SmartMeteringDeviceDtoBuilder().build();\n        final DlmsDevice result = this.converter.convertTo(dto, null, null);\n\n        final DlmsDevice expected = this.converted(dto);\n\n        Assertions.assertThat(result)\n                .isEqualToIgnoringGivenFields(expected, \"creationTime\", \"modificationTime\", \"version\");\n        Assertions.assertThat(result.getSecurityKeys())\n                .usingElementComparatorIgnoringFields(\"creationTime\", \"modificationTime\", \"version\")\n                .isEqualTo(expected.getSecurityKeys());\n    }", "signature": "void convertsSmartMeteringDtoToDlmsDevice()", "full_signature": "@Test public void convertsSmartMeteringDtoToDlmsDevice()", "class_method_signature": "DeviceConverterTest.convertsSmartMeteringDtoToDlmsDevice()", "testcase": true, "constructor": false, "invocations": ["build", "convertTo", "converted", "isEqualToIgnoringGivenFields", "assertThat", "isEqualTo", "usingElementComparatorIgnoringFields", "assertThat", "getSecurityKeys", "getSecurityKeys"]}, "focal_class": {"identifier": "DeviceConverter", "superclass": "extends BidirectionalConverter<SmartMeteringDeviceDto, DlmsDevice>", "interfaces": "", "fields": [], "methods": [{"identifier": "convertTo", "parameters": "(final SmartMeteringDeviceDto source, final Type<DlmsDevice> destinationType,\n            final MappingContext context)", "modifiers": "@Override public", "return": "DlmsDevice", "signature": "DlmsDevice convertTo(final SmartMeteringDeviceDto source, final Type<DlmsDevice> destinationType,\n            final MappingContext context)", "full_signature": "@Override public DlmsDevice convertTo(final SmartMeteringDeviceDto source, final Type<DlmsDevice> destinationType,\n            final MappingContext context)", "class_method_signature": "DeviceConverter.convertTo(final SmartMeteringDeviceDto source, final Type<DlmsDevice> destinationType,\n            final MappingContext context)", "testcase": false, "constructor": false}, {"identifier": "convertFrom", "parameters": "(final DlmsDevice source,\n            final Type<SmartMeteringDeviceDto> destinationType, final MappingContext context)", "modifiers": "@Override public", "return": "SmartMeteringDeviceDto", "signature": "SmartMeteringDeviceDto convertFrom(final DlmsDevice source,\n            final Type<SmartMeteringDeviceDto> destinationType, final MappingContext context)", "full_signature": "@Override public SmartMeteringDeviceDto convertFrom(final DlmsDevice source,\n            final Type<SmartMeteringDeviceDto> destinationType, final MappingContext context)", "class_method_signature": "DeviceConverter.convertFrom(final DlmsDevice source,\n            final Type<SmartMeteringDeviceDto> destinationType, final MappingContext context)", "testcase": false, "constructor": false}], "file": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/mapping/DeviceConverter.java"}, "focal_method": {"identifier": "convertTo", "parameters": "(final SmartMeteringDeviceDto source, final Type<DlmsDevice> destinationType,\n            final MappingContext context)", "modifiers": "@Override public", "return": "DlmsDevice", "body": "@Override\n    public DlmsDevice convertTo(final SmartMeteringDeviceDto source, final Type<DlmsDevice> destinationType,\n            final MappingContext context) {\n        final DlmsDevice dlmsDevice = new DlmsDevice();\n        dlmsDevice.setDeviceIdentification(source.getDeviceIdentification());\n        dlmsDevice.setCommunicationMethod(source.getCommunicationMethod());\n        dlmsDevice.setCommunicationProvider(source.getCommunicationProvider());\n        dlmsDevice.setIccId(source.getICCId());\n        dlmsDevice.setHls3Active(source.isHLS3Active());\n        dlmsDevice.setHls4Active(source.isHLS4Active());\n        dlmsDevice.setHls5Active(source.isHLS5Active());\n        dlmsDevice.setMbusIdentificationNumber(source.getMbusIdentificationNumber());\n        dlmsDevice.setMbusManufacturerIdentification(source.getMbusManufacturerIdentification());\n        dlmsDevice.setProtocol(source.getProtocolName(), source.getProtocolVersion());\n\n        if (source.getMasterKey() != null) {\n            dlmsDevice.addSecurityKey(new SecurityKey(dlmsDevice, SecurityKeyType.E_METER_MASTER,\n                    Hex.encodeHexString(source.getMasterKey()), source.getDeliveryDate(), null));\n        }\n\n        if (source.getAuthenticationKey() != null) {\n            dlmsDevice.addSecurityKey(new SecurityKey(dlmsDevice, SecurityKeyType.E_METER_AUTHENTICATION,\n                    Hex.encodeHexString(source.getAuthenticationKey()), source.getDeliveryDate(), null));\n        }\n\n        if (source.getGlobalEncryptionUnicastKey() != null) {\n            dlmsDevice.addSecurityKey(new SecurityKey(dlmsDevice, SecurityKeyType.E_METER_ENCRYPTION,\n                    Hex.encodeHexString(source.getGlobalEncryptionUnicastKey()), source.getDeliveryDate(), null));\n        }\n\n        if (source.getMbusDefaultKey() != null) {\n            dlmsDevice.addSecurityKey(new SecurityKey(dlmsDevice, SecurityKeyType.G_METER_MASTER,\n                    Hex.encodeHexString(source.getMbusDefaultKey()), source.getDeliveryDate(), null));\n        }\n\n        return dlmsDevice;\n    }", "signature": "DlmsDevice convertTo(final SmartMeteringDeviceDto source, final Type<DlmsDevice> destinationType,\n            final MappingContext context)", "full_signature": "@Override public DlmsDevice convertTo(final SmartMeteringDeviceDto source, final Type<DlmsDevice> destinationType,\n            final MappingContext context)", "class_method_signature": "DeviceConverter.convertTo(final SmartMeteringDeviceDto source, final Type<DlmsDevice> destinationType,\n            final MappingContext context)", "testcase": false, "constructor": false, "invocations": ["setDeviceIdentification", "getDeviceIdentification", "setCommunicationMethod", "getCommunicationMethod", "setCommunicationProvider", "getCommunicationProvider", "setIccId", "getICCId", "setHls3Active", "isHLS3Active", "setHls4Active", "isHLS4Active", "setHls5Active", "isHLS5Active", "setMbusIdentificationNumber", "getMbusIdentificationNumber", "setMbusManufacturerIdentification", "getMbusManufacturerIdentification", "setProtocol", "getProtocolName", "getProtocolVersion", "getMasterKey", "addSecurityKey", "encodeHexString", "getMasterKey", "getDeliveryDate", "getAuthenticationKey", "addSecurityKey", "encodeHexString", "getAuthenticationKey", "getDeliveryDate", "getGlobalEncryptionUnicastKey", "addSecurityKey", "encodeHexString", "getGlobalEncryptionUnicastKey", "getDeliveryDate", "getMbusDefaultKey", "addSecurityKey", "encodeHexString", "getMbusDefaultKey", "getDeliveryDate"]}, "repository": {"repo_id": 154302277, "url": "https://github.com/OSGP/open-smart-grid-platform", "stars": 30, "created": "10/23/2018 9:41:12 AM +00:00", "updates": "2020-01-26T20:15:09+00:00", "fork": "False", "license": "licensed"}}