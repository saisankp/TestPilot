{"test_class": {"identifier": "JsonParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private JsonParser  parser;", "modifier": "private", "type": "JsonParser", "declarator": "parser", "var_name": "parser"}, {"original_string": "private JsonHandler handler;", "modifier": "private", "type": "JsonHandler", "declarator": "handler", "var_name": "handler"}], "file": "everrest-core/src/test/java/org/everrest/core/impl/provider/json/JsonParserTest.java"}, "test_case": {"identifier": "failsParseInvalidJson", "parameters": "(String jsonString)", "modifiers": "@UseDataProvider(\"invalidJson\") @Test(expected = JsonException.class) public", "return": "void", "body": "@UseDataProvider(\"invalidJson\")\n    @Test(expected = JsonException.class)\n    public void failsParseInvalidJson(String jsonString) throws Exception {\n        parser.parse(new InputStreamReader(new ByteArrayInputStream(jsonString.getBytes())));\n    }", "signature": "void failsParseInvalidJson(String jsonString)", "full_signature": "@UseDataProvider(\"invalidJson\") @Test(expected = JsonException.class) public void failsParseInvalidJson(String jsonString)", "class_method_signature": "JsonParserTest.failsParseInvalidJson(String jsonString)", "testcase": true, "constructor": false, "invocations": ["parse", "getBytes"]}, "focal_class": {"identifier": "JsonParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int END_OF_STREAM = 0;", "modifier": "private static final", "type": "int", "declarator": "END_OF_STREAM = 0", "var_name": "END_OF_STREAM"}, {"original_string": "private final JsonHandler eventHandler;", "modifier": "private final", "type": "JsonHandler", "declarator": "eventHandler", "var_name": "eventHandler"}, {"original_string": "private final JsonStack<JsonToken> stack;", "modifier": "private final", "type": "JsonStack<JsonToken>", "declarator": "stack", "var_name": "stack"}, {"original_string": "private PushbackReader pushbackReader;", "modifier": "private", "type": "PushbackReader", "declarator": "pushbackReader", "var_name": "pushbackReader"}], "methods": [{"identifier": "JsonParser", "parameters": "()", "modifiers": "public", "return": "", "signature": " JsonParser()", "full_signature": "public  JsonParser()", "class_method_signature": "JsonParser.JsonParser()", "testcase": false, "constructor": true}, {"identifier": "JsonParser", "parameters": "(JsonHandler eventHandler)", "modifiers": "protected", "return": "", "signature": " JsonParser(JsonHandler eventHandler)", "full_signature": "protected  JsonParser(JsonHandler eventHandler)", "class_method_signature": "JsonParser.JsonParser(JsonHandler eventHandler)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(Reader reader)", "modifiers": "public", "return": "void", "signature": "void parse(Reader reader)", "full_signature": "public void parse(Reader reader)", "class_method_signature": "JsonParser.parse(Reader reader)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(InputStream stream)", "modifiers": "public", "return": "void", "signature": "void parse(InputStream stream)", "full_signature": "public void parse(InputStream stream)", "class_method_signature": "JsonParser.parse(InputStream stream)", "testcase": false, "constructor": false}, {"identifier": "getJsonObject", "parameters": "()", "modifiers": "public", "return": "JsonValue", "signature": "JsonValue getJsonObject()", "full_signature": "public JsonValue getJsonObject()", "class_method_signature": "JsonParser.getJsonObject()", "testcase": false, "constructor": false}, {"identifier": "readObject", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void readObject()", "full_signature": "private void readObject()", "class_method_signature": "JsonParser.readObject()", "testcase": false, "constructor": false}, {"identifier": "endObject", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void endObject()", "full_signature": "private void endObject()", "class_method_signature": "JsonParser.endObject()", "testcase": false, "constructor": false}, {"identifier": "startObject", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void startObject()", "full_signature": "private void startObject()", "class_method_signature": "JsonParser.startObject()", "testcase": false, "constructor": false}, {"identifier": "readArray", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void readArray()", "full_signature": "private void readArray()", "class_method_signature": "JsonParser.readArray()", "testcase": false, "constructor": false}, {"identifier": "startArray", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void startArray()", "full_signature": "private void startArray()", "class_method_signature": "JsonParser.startArray()", "testcase": false, "constructor": false}, {"identifier": "endArray", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void endArray()", "full_signature": "private void endArray()", "class_method_signature": "JsonParser.endArray()", "testcase": false, "constructor": false}, {"identifier": "readKey", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void readKey()", "full_signature": "private void readKey()", "class_method_signature": "JsonParser.readKey()", "testcase": false, "constructor": false}, {"identifier": "readValue", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void readValue()", "full_signature": "private void readValue()", "class_method_signature": "JsonParser.readValue()", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "private", "return": "char", "signature": "char next()", "full_signature": "private char next()", "class_method_signature": "JsonParser.next()", "testcase": false, "constructor": false}, {"identifier": "skipLine", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void skipLine()", "full_signature": "private void skipLine()", "class_method_signature": "JsonParser.skipLine()", "testcase": false, "constructor": false}, {"identifier": "skipComment", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void skipComment()", "full_signature": "private void skipComment()", "class_method_signature": "JsonParser.skipComment()", "testcase": false, "constructor": false}, {"identifier": "nextAny", "parameters": "()", "modifiers": "private", "return": "char", "signature": "char nextAny()", "full_signature": "private char nextAny()", "class_method_signature": "JsonParser.nextAny()", "testcase": false, "constructor": false}, {"identifier": "assertNextIs", "parameters": "(char expectedCharacter)", "modifiers": "private", "return": "char", "signature": "char assertNextIs(char expectedCharacter)", "full_signature": "private char assertNextIs(char expectedCharacter)", "class_method_signature": "JsonParser.assertNextIs(char expectedCharacter)", "testcase": false, "constructor": false}, {"identifier": "assertNextIs", "parameters": "(String expectedCharacters)", "modifiers": "private", "return": "char", "signature": "char assertNextIs(String expectedCharacters)", "full_signature": "private char assertNextIs(String expectedCharacters)", "class_method_signature": "JsonParser.assertNextIs(String expectedCharacters)", "testcase": false, "constructor": false}, {"identifier": "nextString", "parameters": "()", "modifiers": "private", "return": "char[]", "signature": "char[] nextString()", "full_signature": "private char[] nextString()", "class_method_signature": "JsonParser.nextString()", "testcase": false, "constructor": false}, {"identifier": "readUnicodeCharacter", "parameters": "()", "modifiers": "private", "return": "char", "signature": "char readUnicodeCharacter()", "full_signature": "private char readUnicodeCharacter()", "class_method_signature": "JsonParser.readUnicodeCharacter()", "testcase": false, "constructor": false}, {"identifier": "pushBack", "parameters": "(char c)", "modifiers": "private", "return": "void", "signature": "void pushBack(char c)", "full_signature": "private void pushBack(char c)", "class_method_signature": "JsonParser.pushBack(char c)", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/impl/provider/json/JsonParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(Reader reader)", "modifiers": "public", "return": "void", "body": "public void parse(Reader reader) throws JsonException {\n        pushbackReader = new PushbackReader(reader);\n        eventHandler.reset();\n        stack.clear();\n        char c;\n        while ((c = next()) != END_OF_STREAM) {\n            if (c == '{') {\n                readObject();\n            } else if (c == '[') {\n                readArray();\n            } else {\n                throw new JsonException(String.format(\"Syntax error. Unexpected '%s'. Must be '{'.\", c));\n            }\n            c = assertNextIs(\",]}\");\n            if (c != END_OF_STREAM) {\n                pushBack(c);\n            }\n        }\n        if (!stack.isEmpty()) {\n            throw new JsonException(\"Syntax error. Missing one or more close bracket(s).\");\n        }\n    }", "signature": "void parse(Reader reader)", "full_signature": "public void parse(Reader reader)", "class_method_signature": "JsonParser.parse(Reader reader)", "testcase": false, "constructor": false, "invocations": ["reset", "clear", "next", "readObject", "readArray", "format", "assertNextIs", "pushBack", "isEmpty"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}