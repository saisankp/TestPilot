{"test_class": {"identifier": "AnyMapAdapterTest", "superclass": "", "interfaces": "", "fields": [], "file": "anymaps-google/src/test/java/com/car2go/maps/google/adapter/AnyMapAdapterTest.java"}, "test_case": {"identifier": "testAdaptList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAdaptList() throws Exception {\n\t\t// Given\n\t\tAnyMapAdapter adapter = new AnyMapAdapter();\n\n\t\tMapper<Input, ?> mapper = mock(Mapper.class);\n\n\t\tadapter.registerMapper(Input.class, mapper);\n\n\t\tList<Input> inputList = asList(\n\t\t\t\tnew Input(),\n\t\t\t\tnew Input()\n\t\t);\n\n\t\t// When\n\t\tadapter.mapList(Input.class, inputList);\n\n\t\t// Then\n\t\tverify(mapper, times(inputList.size())).map(any(Input.class));\n\t}", "signature": "void testAdaptList()", "full_signature": "@Test public void testAdaptList()", "class_method_signature": "AnyMapAdapterTest.testAdaptList()", "testcase": true, "constructor": false, "invocations": ["mock", "registerMapper", "asList", "mapList", "map", "verify", "times", "size", "any"]}, "focal_class": {"identifier": "AnyMapAdapter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final AnyMapAdapter INSTANCE = new AnyMapAdapter();", "modifier": "private static final", "type": "AnyMapAdapter", "declarator": "INSTANCE = new AnyMapAdapter()", "var_name": "INSTANCE"}, {"original_string": "private final HashMap<Class<?>, Mapper> mappers = new HashMap<>();", "modifier": "private final", "type": "HashMap<Class<?>, Mapper>", "declarator": "mappers = new HashMap<>()", "var_name": "mappers"}], "methods": [{"identifier": "AnyMapAdapter", "parameters": "()", "modifiers": "", "return": "", "signature": " AnyMapAdapter()", "full_signature": "  AnyMapAdapter()", "class_method_signature": "AnyMapAdapter.AnyMapAdapter()", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "private static", "return": "AnyMapAdapter", "signature": "AnyMapAdapter getInstance()", "full_signature": "private static AnyMapAdapter getInstance()", "class_method_signature": "AnyMapAdapter.getInstance()", "testcase": false, "constructor": false}, {"identifier": "adapt", "parameters": "(I object)", "modifiers": "public static", "return": "O", "signature": "O adapt(I object)", "full_signature": "public static O adapt(I object)", "class_method_signature": "AnyMapAdapter.adapt(I object)", "testcase": false, "constructor": false}, {"identifier": "adaptList", "parameters": "(Class<? extends I> type, List<I> list)", "modifiers": "public static", "return": "List<O>", "signature": "List<O> adaptList(Class<? extends I> type, List<I> list)", "full_signature": "public static List<O> adaptList(Class<? extends I> type, List<I> list)", "class_method_signature": "AnyMapAdapter.adaptList(Class<? extends I> type, List<I> list)", "testcase": false, "constructor": false}, {"identifier": "registerGoogleToAnyMapMappers", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void registerGoogleToAnyMapMappers()", "full_signature": "private void registerGoogleToAnyMapMappers()", "class_method_signature": "AnyMapAdapter.registerGoogleToAnyMapMappers()", "testcase": false, "constructor": false}, {"identifier": "registerAnyMapToGoogleMappers", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void registerAnyMapToGoogleMappers()", "full_signature": "private void registerAnyMapToGoogleMappers()", "class_method_signature": "AnyMapAdapter.registerAnyMapToGoogleMappers()", "testcase": false, "constructor": false}, {"identifier": "registerMapper", "parameters": "(Class<? extends I> inputClass, Mapper<I, ?> mapper)", "modifiers": "public", "return": "void", "signature": "void registerMapper(Class<? extends I> inputClass, Mapper<I, ?> mapper)", "full_signature": "public void registerMapper(Class<? extends I> inputClass, Mapper<I, ?> mapper)", "class_method_signature": "AnyMapAdapter.registerMapper(Class<? extends I> inputClass, Mapper<I, ?> mapper)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(I object)", "modifiers": "public", "return": "O", "signature": "O map(I object)", "full_signature": "public O map(I object)", "class_method_signature": "AnyMapAdapter.map(I object)", "testcase": false, "constructor": false}, {"identifier": "mapList", "parameters": "(Class<? extends I> type, List<I> input)", "modifiers": "public", "return": "List<O>", "signature": "List<O> mapList(Class<? extends I> type, List<I> input)", "full_signature": "public List<O> mapList(Class<? extends I> type, List<I> input)", "class_method_signature": "AnyMapAdapter.mapList(Class<? extends I> type, List<I> input)", "testcase": false, "constructor": false}, {"identifier": "findMapper", "parameters": "(Class<?> type)", "modifiers": "@SuppressWarnings(\"unchecked\") @NonNull private", "return": "Mapper<I, O>", "signature": "Mapper<I, O> findMapper(Class<?> type)", "full_signature": "@SuppressWarnings(\"unchecked\") @NonNull private Mapper<I, O> findMapper(Class<?> type)", "class_method_signature": "AnyMapAdapter.findMapper(Class<?> type)", "testcase": false, "constructor": false}], "file": "anymaps-google/src/main/java/com/car2go/maps/google/adapter/AnyMapAdapter.java"}, "focal_method": {"identifier": "adaptList", "parameters": "(Class<? extends I> type, List<I> list)", "modifiers": "public static", "return": "List<O>", "body": "public static <I, O> List<O> adaptList(Class<? extends I> type, List<I> list) {\n\t\treturn getInstance().mapList(type, list);\n\t}", "signature": "List<O> adaptList(Class<? extends I> type, List<I> list)", "full_signature": "public static List<O> adaptList(Class<? extends I> type, List<I> list)", "class_method_signature": "AnyMapAdapter.adaptList(Class<? extends I> type, List<I> list)", "testcase": false, "constructor": false, "invocations": ["mapList", "getInstance"]}, "repository": {"repo_id": 86897067, "url": "https://github.com/sharenowTech/AnyMaps", "language": "Java", "is_fork": false, "fork_count": 34, "stargazer_count": 163, "size": 19958, "license": "licensed"}}