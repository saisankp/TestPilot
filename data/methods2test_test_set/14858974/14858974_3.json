{"test_class": {"identifier": "LicenseTest", "superclass": "", "interfaces": "", "fields": [], "file": "commons/src/test/java/org/axway/grapes/commons/datamodel/LicenseTest.java"}, "test_case": {"identifier": "checkEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void checkEquals(){\n\t\tLicense license = DataModelFactory.createLicense(\"name\", \"longName\", \"comments\", \"regexp\", \"url\");\n\t\tLicense license2 = DataModelFactory.createLicense(\"name\", \"longName\", \"comments\", \"regexp\", \"url\");\n\t\tLicense license3 = DataModelFactory.createLicense(\"name\", \"longName\", \"comments\", \"regexp\", \"url&\");\n\t\tLicense license4 = DataModelFactory.createLicense(\"name\", \"longName\", \"comments\", \"regexp&\", \"url\");\n\t\tLicense license5 = DataModelFactory.createLicense(\"name\", \"longName\", \"comments&\", \"regexp\", \"url\");\n\t\tLicense license6 = DataModelFactory.createLicense(\"name\", \"longName&\", \"comments\", \"regexp\", \"url\");\n\t\tLicense license7 = DataModelFactory.createLicense(\"name&\", \"longName\", \"comments\", \"regexp\", \"url\");\n\n\t\tassertTrue(license.equals(license2));\n\t\tassertFalse(license.equals(license3));\n\t\tassertFalse(license.equals(license4));\n\t\tassertFalse(license.equals(license5));\n\t\tassertFalse(license.equals(license6));\n\t\tassertFalse(license.equals(license7));\n\t\tassertFalse(license.equals(\"test\"));\n\t}", "signature": "void checkEquals()", "full_signature": "@Test public void checkEquals()", "class_method_signature": "LicenseTest.checkEquals()", "testcase": true, "constructor": false, "invocations": ["createLicense", "createLicense", "createLicense", "createLicense", "createLicense", "createLicense", "createLicense", "assertTrue", "equals", "assertFalse", "equals", "assertFalse", "equals", "assertFalse", "equals", "assertFalse", "equals", "assertFalse", "equals", "assertFalse", "equals"]}, "focal_class": {"identifier": "License", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String name = \"\";", "modifier": "private", "type": "String", "declarator": "name = \"\"", "var_name": "name"}, {"original_string": "private String longName = \"\";", "modifier": "private", "type": "String", "declarator": "longName = \"\"", "var_name": "longName"}, {"original_string": "private String url = \"\";", "modifier": "private", "type": "String", "declarator": "url = \"\"", "var_name": "url"}, {"original_string": "private String comments = \"\";", "modifier": "private", "type": "String", "declarator": "comments = \"\"", "var_name": "comments"}, {"original_string": "private String regexp = \"\";", "modifier": "private", "type": "String", "declarator": "regexp = \"\"", "var_name": "regexp"}, {"original_string": "private boolean approved = false;", "modifier": "private", "type": "boolean", "declarator": "approved = false", "var_name": "approved"}, {"original_string": "private boolean unknown = false;", "modifier": "private", "type": "boolean", "declarator": "unknown = false", "var_name": "unknown"}, {"original_string": "private boolean pending = false;", "modifier": "private", "type": "boolean", "declarator": "pending = false", "var_name": "pending"}], "methods": [{"identifier": "License", "parameters": "()", "modifiers": "protected", "return": "", "signature": " License()", "full_signature": "protected  License()", "class_method_signature": "License.License()", "testcase": false, "constructor": true}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "License.getName()", "testcase": false, "constructor": false}, {"identifier": "setName", "parameters": "(final String name)", "modifiers": "public", "return": "void", "signature": "void setName(final String name)", "full_signature": "public void setName(final String name)", "class_method_signature": "License.setName(final String name)", "testcase": false, "constructor": false}, {"identifier": "getLongName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getLongName()", "full_signature": "public String getLongName()", "class_method_signature": "License.getLongName()", "testcase": false, "constructor": false}, {"identifier": "setLongName", "parameters": "(final String longName)", "modifiers": "public", "return": "void", "signature": "void setLongName(final String longName)", "full_signature": "public void setLongName(final String longName)", "class_method_signature": "License.setLongName(final String longName)", "testcase": false, "constructor": false}, {"identifier": "getUrl", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUrl()", "full_signature": "public String getUrl()", "class_method_signature": "License.getUrl()", "testcase": false, "constructor": false}, {"identifier": "setUrl", "parameters": "(final String url)", "modifiers": "public", "return": "void", "signature": "void setUrl(final String url)", "full_signature": "public void setUrl(final String url)", "class_method_signature": "License.setUrl(final String url)", "testcase": false, "constructor": false}, {"identifier": "getComments", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getComments()", "full_signature": "public String getComments()", "class_method_signature": "License.getComments()", "testcase": false, "constructor": false}, {"identifier": "setComments", "parameters": "(final String comments)", "modifiers": "public", "return": "void", "signature": "void setComments(final String comments)", "full_signature": "public void setComments(final String comments)", "class_method_signature": "License.setComments(final String comments)", "testcase": false, "constructor": false}, {"identifier": "getRegexp", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getRegexp()", "full_signature": "public String getRegexp()", "class_method_signature": "License.getRegexp()", "testcase": false, "constructor": false}, {"identifier": "setRegexp", "parameters": "(final String regexp)", "modifiers": "public", "return": "void", "signature": "void setRegexp(final String regexp)", "full_signature": "public void setRegexp(final String regexp)", "class_method_signature": "License.setRegexp(final String regexp)", "testcase": false, "constructor": false}, {"identifier": "isApproved", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isApproved()", "full_signature": "public boolean isApproved()", "class_method_signature": "License.isApproved()", "testcase": false, "constructor": false}, {"identifier": "setApproved", "parameters": "(final boolean approved)", "modifiers": "public", "return": "void", "signature": "void setApproved(final boolean approved)", "full_signature": "public void setApproved(final boolean approved)", "class_method_signature": "License.setApproved(final boolean approved)", "testcase": false, "constructor": false}, {"identifier": "isUnknown", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isUnknown()", "full_signature": "public boolean isUnknown()", "class_method_signature": "License.isUnknown()", "testcase": false, "constructor": false}, {"identifier": "setUnknown", "parameters": "(boolean unknown)", "modifiers": "public", "return": "void", "signature": "void setUnknown(boolean unknown)", "full_signature": "public void setUnknown(boolean unknown)", "class_method_signature": "License.setUnknown(boolean unknown)", "testcase": false, "constructor": false}, {"identifier": "isPending", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPending()", "full_signature": "public boolean isPending()", "class_method_signature": "License.isPending()", "testcase": false, "constructor": false}, {"identifier": "setPending", "parameters": "(boolean pending)", "modifiers": "public", "return": "void", "signature": "void setPending(boolean pending)", "full_signature": "public void setPending(boolean pending)", "class_method_signature": "License.setPending(boolean pending)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object obj)", "full_signature": "@Override public boolean equals(final Object obj)", "class_method_signature": "License.equals(final Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "License.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "License.toString()", "testcase": false, "constructor": false}], "file": "commons/src/main/java/org/axway/grapes/commons/datamodel/License.java"}, "focal_method": {"identifier": "equals", "parameters": "(final Object obj)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean equals(final Object obj){\n\t\tif(obj instanceof License){\n\t\t\treturn hashCode() == obj.hashCode();\n\t\t}\n\t\t\n\t\treturn false;\n\t}", "signature": "boolean equals(final Object obj)", "full_signature": "@Override public boolean equals(final Object obj)", "class_method_signature": "License.equals(final Object obj)", "testcase": false, "constructor": false, "invocations": ["hashCode", "hashCode"]}, "repository": {"repo_id": 14858974, "url": "https://github.com/Axway/Grapes", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 8, "size": 3620, "license": "licensed"}}