{"test_class": {"identifier": "ResponseBuilderArgumentResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ArgumentResolver resolver = new ResponseBuilderArgumentResolver();", "modifier": "private", "type": "ArgumentResolver", "declarator": "resolver = new ResponseBuilderArgumentResolver()", "var_name": "resolver"}, {"original_string": "@Mock\n  SkillContext mockSkillContext;", "modifier": "@Mock", "type": "SkillContext", "declarator": "mockSkillContext", "var_name": "mockSkillContext"}], "file": "ask-sdk-mvc/src/test/java/com/amazon/ask/mvc/argument/ResponseBuilderArgumentResolverTest.java"}, "test_case": {"identifier": "testResolvesNewInstance", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testResolvesNewInstance() throws NoSuchMethodException {\n    MethodParameter methodParameter = new MethodParameter(\n        this.getClass().getMethod(\"testSupportAndResolve\"),\n        0,\n        ResponseBuilder.class,\n        MethodParameter.EMPTY_ANNOTATIONS\n    );\n\n    RequestEnvelope envelope = Utils.buildSimpleEnvelope(\"intent\");\n    HandlerInput handlerInput =  HandlerInput.builder().withRequestEnvelope(envelope).build();\n    ArgumentResolverContext input = new ArgumentResolverContext(mockSkillContext, methodParameter, handlerInput);\n\n    Object resolved = resolver.resolve(input);\n    Object secondResolved = resolver.resolve(input);\n\n    assertNotSame(handlerInput.getResponseBuilder(), resolved);\n    assertNotSame(secondResolved, resolved);\n  }", "signature": "void testResolvesNewInstance()", "full_signature": "@Test public void testResolvesNewInstance()", "class_method_signature": "ResponseBuilderArgumentResolverTest.testResolvesNewInstance()", "testcase": true, "constructor": false, "invocations": ["getMethod", "getClass", "buildSimpleEnvelope", "build", "withRequestEnvelope", "builder", "resolve", "resolve", "assertNotSame", "getResponseBuilder", "assertNotSame"]}, "focal_class": {"identifier": "ResponseBuilderArgumentResolver", "superclass": "", "interfaces": "implements ArgumentResolver", "fields": [], "methods": [{"identifier": "resolve", "parameters": "(ArgumentResolverContext input)", "modifiers": "@Override public", "return": "Optional<Object>", "signature": "Optional<Object> resolve(ArgumentResolverContext input)", "full_signature": "@Override public Optional<Object> resolve(ArgumentResolverContext input)", "class_method_signature": "ResponseBuilderArgumentResolver.resolve(ArgumentResolverContext input)", "testcase": false, "constructor": false}], "file": "ask-sdk-mvc/src/main/java/com/amazon/ask/mvc/argument/ResponseBuilderArgumentResolver.java"}, "focal_method": {"identifier": "resolve", "parameters": "(ArgumentResolverContext input)", "modifiers": "@Override public", "return": "Optional<Object>", "body": "@Override\n    public Optional<Object> resolve(ArgumentResolverContext input) {\n        if (input.parameterTypeEquals(ResponseBuilder.class)) {\n            return Optional.of(input.getHandlerInput().getResponseBuilder());\n        }\n        return Optional.empty();\n    }", "signature": "Optional<Object> resolve(ArgumentResolverContext input)", "full_signature": "@Override public Optional<Object> resolve(ArgumentResolverContext input)", "class_method_signature": "ResponseBuilderArgumentResolver.resolve(ArgumentResolverContext input)", "testcase": false, "constructor": false, "invocations": ["parameterTypeEquals", "of", "getResponseBuilder", "getHandlerInput", "empty"]}, "repository": {"repo_id": 143249569, "url": "https://github.com/amazon-archives/ask-sdk-frameworks-java", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 12, "size": 313, "license": "licensed"}}