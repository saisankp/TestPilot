{"test_class": {"identifier": "HttpServicesTest", "superclass": "", "interfaces": "", "fields": [], "file": "ui/src/test/java/org/glowroot/ui/HttpServicesTest.java"}, "test_case": {"identifier": "shouldLogRegularException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldLogRegularException() {\n        // given\n        Exception e = new Exception();\n        // when\n        assertThat(HttpServices.shouldLogException(e)).isTrue();\n    }", "signature": "void shouldLogRegularException()", "full_signature": "@Test public void shouldLogRegularException()", "class_method_signature": "HttpServicesTest.shouldLogRegularException()", "testcase": true, "constructor": false, "invocations": ["isTrue", "assertThat", "shouldLogException"]}, "focal_class": {"identifier": "HttpServices", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(HttpServices.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(HttpServices.class)", "var_name": "logger"}, {"original_string": "private static final ImmutableSet<String> BROWSER_DISCONNECT_MESSAGES =\n            ImmutableSet.of(\"An existing connection was forcibly closed by the remote host\",\n                    \"An established connection was aborted by the software in your host machine\",\n                    \"Connection reset by peer\");", "modifier": "private static final", "type": "ImmutableSet<String>", "declarator": "BROWSER_DISCONNECT_MESSAGES =\n            ImmutableSet.of(\"An existing connection was forcibly closed by the remote host\",\n                    \"An established connection was aborted by the software in your host machine\",\n                    \"Connection reset by peer\")", "var_name": "BROWSER_DISCONNECT_MESSAGES"}], "methods": [{"identifier": "HttpServices", "parameters": "()", "modifiers": "private", "return": "", "signature": " HttpServices()", "full_signature": "private  HttpServices()", "class_method_signature": "HttpServices.HttpServices()", "testcase": false, "constructor": true}, {"identifier": "addErrorListener", "parameters": "(ChannelFuture future)", "modifiers": "@SuppressWarnings(\"argument.type.incompatible\") static", "return": "void", "signature": "void addErrorListener(ChannelFuture future)", "full_signature": "@SuppressWarnings(\"argument.type.incompatible\") static void addErrorListener(ChannelFuture future)", "class_method_signature": "HttpServices.addErrorListener(ChannelFuture future)", "testcase": false, "constructor": false}, {"identifier": "addCloseListener", "parameters": "(ChannelFuture future)", "modifiers": "@SuppressWarnings(\"argument.type.incompatible\") static", "return": "void", "signature": "void addCloseListener(ChannelFuture future)", "full_signature": "@SuppressWarnings(\"argument.type.incompatible\") static void addCloseListener(ChannelFuture future)", "class_method_signature": "HttpServices.addCloseListener(ChannelFuture future)", "testcase": false, "constructor": false}, {"identifier": "shouldLogException", "parameters": "(Throwable t)", "modifiers": "static", "return": "boolean", "signature": "boolean shouldLogException(Throwable t)", "full_signature": "static boolean shouldLogException(Throwable t)", "class_method_signature": "HttpServices.shouldLogException(Throwable t)", "testcase": false, "constructor": false}], "file": "ui/src/main/java/org/glowroot/ui/HttpServices.java"}, "focal_method": {"identifier": "shouldLogException", "parameters": "(Throwable t)", "modifiers": "static", "return": "boolean", "body": "static boolean shouldLogException(Throwable t) {\n        if (t instanceof InterruptedException) {\n            // ignore, probably just termination\n            logger.debug(t.getMessage(), t);\n            return false;\n        }\n        if (t instanceof IOException && BROWSER_DISCONNECT_MESSAGES.contains(t.getMessage())) {\n            // ignore, just a browser disconnect\n            logger.debug(t.getMessage(), t);\n            return false;\n        }\n        if (t instanceof ClosedChannelException) {\n            // ignore, just a browser disconnect\n            logger.debug(t.getMessage(), t);\n            return false;\n        }\n        return true;\n    }", "signature": "boolean shouldLogException(Throwable t)", "full_signature": "static boolean shouldLogException(Throwable t)", "class_method_signature": "HttpServices.shouldLogException(Throwable t)", "testcase": false, "constructor": false, "invocations": ["debug", "getMessage", "contains", "getMessage", "debug", "getMessage", "debug", "getMessage"]}, "repository": {"repo_id": 16336212, "url": "https://github.com/glowroot/glowroot", "stars": 736, "created": "1/29/2014 5:25:58 AM +00:00", "updates": "2020-01-24T11:13:42+00:00", "fork": "False", "license": "licensed"}}