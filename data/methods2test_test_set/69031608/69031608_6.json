{"test_class": {"identifier": "CodeBlocksTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public CompilationRule compilationRule = new CompilationRule();", "modifier": "@Rule\n    public", "type": "CompilationRule", "declarator": "compilationRule = new CompilationRule()", "var_name": "compilationRule"}, {"original_string": "private Elements elements;", "modifier": "private", "type": "Elements", "declarator": "elements", "var_name": "elements"}], "file": "shade-processor/src/test/java/io/t28/shade/processor/util/CodeBlocksTest.java"}, "test_case": {"identifier": "createUnmodifiableStatementShouldCopyListDefensively", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void createUnmodifiableStatementShouldCopyListDefensively() throws Exception {\n        // setup\n        final TypeElement element = elements.getTypeElement(List.class.getCanonicalName());\n        final TypeMirror mirror = element.asType();\n\n        // exercise\n        final CodeBlock actual = CodeBlocks.createUnmodifiableStatement(mirror, \"value\");\n\n        // verify\n        assertThat(actual.toString())\n                .isEqualTo(\"new java.util.ArrayList<>(value)\");\n    }", "signature": "void createUnmodifiableStatementShouldCopyListDefensively()", "full_signature": "@Test public void createUnmodifiableStatementShouldCopyListDefensively()", "class_method_signature": "CodeBlocksTest.createUnmodifiableStatementShouldCopyListDefensively()", "testcase": true, "constructor": false, "invocations": ["getTypeElement", "getCanonicalName", "asType", "createUnmodifiableStatement", "isEqualTo", "assertThat", "toString"]}, "focal_class": {"identifier": "CodeBlocks", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "CodeBlocks", "parameters": "()", "modifiers": "private", "return": "", "signature": " CodeBlocks()", "full_signature": "private  CodeBlocks()", "class_method_signature": "CodeBlocks.CodeBlocks()", "testcase": false, "constructor": true}, {"identifier": "createUnmodifiableStatement", "parameters": "(@Nonnull TypeMirror type, @Nonnull String variable)", "modifiers": "@Nonnull public static", "return": "CodeBlock", "signature": "CodeBlock createUnmodifiableStatement(@Nonnull TypeMirror type, @Nonnull String variable)", "full_signature": "@Nonnull public static CodeBlock createUnmodifiableStatement(@Nonnull TypeMirror type, @Nonnull String variable)", "class_method_signature": "CodeBlocks.createUnmodifiableStatement(@Nonnull TypeMirror type, @Nonnull String variable)", "testcase": false, "constructor": false}], "file": "shade-processor/src/main/java/io/t28/shade/processor/util/CodeBlocks.java"}, "focal_method": {"identifier": "createUnmodifiableStatement", "parameters": "(@Nonnull TypeMirror type, @Nonnull String variable)", "modifiers": "@Nonnull public static", "return": "CodeBlock", "body": "@Nonnull\n    public static CodeBlock createUnmodifiableStatement(@Nonnull TypeMirror type, @Nonnull String variable) {\n        if (type.getKind() == TypeKind.ARRAY) {\n            return CodeBlock.of(\"$T.copyOf($N, $N.length)\", Arrays.class, variable, variable);\n        }\n\n        if (MoreTypes.isTypeOf(List.class, type)) {\n            return CodeBlock.of(\"new $T<>($N)\", ArrayList.class, variable);\n        }\n\n        if (MoreTypes.isTypeOf(Set.class, type)) {\n            return CodeBlock.of(\"new $T<>($N)\", HashSet.class, variable);\n        }\n\n        if (MoreTypes.isTypeOf(Map.class, type)) {\n            return CodeBlock.of(\"new $T<>($N)\", HashMap.class, variable);\n        }\n        return CodeBlock.of(\"$N\", variable);\n    }", "signature": "CodeBlock createUnmodifiableStatement(@Nonnull TypeMirror type, @Nonnull String variable)", "full_signature": "@Nonnull public static CodeBlock createUnmodifiableStatement(@Nonnull TypeMirror type, @Nonnull String variable)", "class_method_signature": "CodeBlocks.createUnmodifiableStatement(@Nonnull TypeMirror type, @Nonnull String variable)", "testcase": false, "constructor": false, "invocations": ["getKind", "of", "isTypeOf", "of", "isTypeOf", "of", "isTypeOf", "of", "of"]}, "repository": {"repo_id": 69031608, "url": "https://github.com/t28hub/shade", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 27, "size": 486, "license": "licensed"}}