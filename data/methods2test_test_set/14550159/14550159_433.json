{"test_class": {"identifier": "FieldInjectorImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}, {"original_string": "private ParameterResolverFactory parameterResolverFactory;", "modifier": "private", "type": "ParameterResolverFactory", "declarator": "parameterResolverFactory", "var_name": "parameterResolverFactory"}, {"original_string": "private ParameterResolver<PathParam> pathParameterResolver;", "modifier": "private", "type": "ParameterResolver<PathParam>", "declarator": "pathParameterResolver", "var_name": "pathParameterResolver"}, {"original_string": "private ParameterResolver<QueryParam> queryParameterResolver;", "modifier": "private", "type": "ParameterResolver<QueryParam>", "declarator": "queryParameterResolver", "var_name": "queryParameterResolver"}, {"original_string": "private ParameterResolver<MatrixParam> matrixParameterResolver;", "modifier": "private", "type": "ParameterResolver<MatrixParam>", "declarator": "matrixParameterResolver", "var_name": "matrixParameterResolver"}, {"original_string": "private ParameterResolver<CookieParam> cookieParameterResolver;", "modifier": "private", "type": "ParameterResolver<CookieParam>", "declarator": "cookieParameterResolver", "var_name": "cookieParameterResolver"}, {"original_string": "private ParameterResolver<HeaderParam> headerParameterResolver;", "modifier": "private", "type": "ParameterResolver<HeaderParam>", "declarator": "headerParameterResolver", "var_name": "headerParameterResolver"}, {"original_string": "private ApplicationContext applicationContext;", "modifier": "private", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}, {"original_string": "private DependencySupplier dependencySupplier;", "modifier": "private", "type": "DependencySupplier", "declarator": "dependencySupplier", "var_name": "dependencySupplier"}], "file": "everrest-core/src/test/java/org/everrest/core/impl/FieldInjectorImplTest.java"}, "test_case": {"identifier": "throwsWebApplicationExceptionWithStatus_NOT_FOUND_WhenFieldAnnotatedWithPathParamAnnotationCanNotBeResolved", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void throwsWebApplicationExceptionWithStatus_NOT_FOUND_WhenFieldAnnotatedWithPathParamAnnotationCanNotBeResolved() throws Exception {\n        when(pathParameterResolver.resolve(isA(Parameter.class), eq(applicationContext))).thenThrow(new Exception());\n\n        FieldInjectorImpl fieldInjector = new FieldInjectorImpl(Resource.class.getDeclaredField(\"pathParam\"), parameterResolverFactory);\n        Resource instance = new Resource();\n\n        thrown.expect(webApplicationExceptionWithStatusMatcher(NOT_FOUND));\n        fieldInjector.inject(instance, applicationContext);\n    }", "signature": "void throwsWebApplicationExceptionWithStatus_NOT_FOUND_WhenFieldAnnotatedWithPathParamAnnotationCanNotBeResolved()", "full_signature": "@Test public void throwsWebApplicationExceptionWithStatus_NOT_FOUND_WhenFieldAnnotatedWithPathParamAnnotationCanNotBeResolved()", "class_method_signature": "FieldInjectorImplTest.throwsWebApplicationExceptionWithStatus_NOT_FOUND_WhenFieldAnnotatedWithPathParamAnnotationCanNotBeResolved()", "testcase": true, "constructor": false, "invocations": ["thenThrow", "when", "resolve", "isA", "eq", "getDeclaredField", "expect", "webApplicationExceptionWithStatusMatcher", "inject"]}, "focal_class": {"identifier": "FieldInjectorImpl", "superclass": "", "interfaces": "implements FieldInjector", "fields": [{"original_string": "private final Annotation[] annotations;", "modifier": "private final", "type": "Annotation[]", "declarator": "annotations", "var_name": "annotations"}, {"original_string": "private final Annotation annotation;", "modifier": "private final", "type": "Annotation", "declarator": "annotation", "var_name": "annotation"}, {"original_string": "private final String defaultValue;", "modifier": "private final", "type": "String", "declarator": "defaultValue", "var_name": "defaultValue"}, {"original_string": "private final boolean encoded;", "modifier": "private final", "type": "boolean", "declarator": "encoded", "var_name": "encoded"}, {"original_string": "private final Field  field;", "modifier": "private final", "type": "Field", "declarator": "field", "var_name": "field"}, {"original_string": "private final ParameterResolverFactory parameterResolverFactory;", "modifier": "private final", "type": "ParameterResolverFactory", "declarator": "parameterResolverFactory", "var_name": "parameterResolverFactory"}, {"original_string": "private final Method setter;", "modifier": "private final", "type": "Method", "declarator": "setter", "var_name": "setter"}], "methods": [{"identifier": "FieldInjectorImpl", "parameters": "(Field field, ParameterResolverFactory parameterResolverFactory)", "modifiers": "public", "return": "", "signature": " FieldInjectorImpl(Field field, ParameterResolverFactory parameterResolverFactory)", "full_signature": "public  FieldInjectorImpl(Field field, ParameterResolverFactory parameterResolverFactory)", "class_method_signature": "FieldInjectorImpl.FieldInjectorImpl(Field field, ParameterResolverFactory parameterResolverFactory)", "testcase": false, "constructor": true}, {"identifier": "getSetter", "parameters": "(Class<?> clazz, Field field)", "modifiers": "private", "return": "Method", "signature": "Method getSetter(Class<?> clazz, Field field)", "full_signature": "private Method getSetter(Class<?> clazz, Field field)", "class_method_signature": "FieldInjectorImpl.getSetter(Class<?> clazz, Field field)", "testcase": false, "constructor": false}, {"identifier": "getAnnotation", "parameters": "()", "modifiers": "@Override public", "return": "Annotation", "signature": "Annotation getAnnotation()", "full_signature": "@Override public Annotation getAnnotation()", "class_method_signature": "FieldInjectorImpl.getAnnotation()", "testcase": false, "constructor": false}, {"identifier": "getAnnotations", "parameters": "()", "modifiers": "@Override public", "return": "Annotation[]", "signature": "Annotation[] getAnnotations()", "full_signature": "@Override public Annotation[] getAnnotations()", "class_method_signature": "FieldInjectorImpl.getAnnotations()", "testcase": false, "constructor": false}, {"identifier": "getDefaultValue", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDefaultValue()", "full_signature": "@Override public String getDefaultValue()", "class_method_signature": "FieldInjectorImpl.getDefaultValue()", "testcase": false, "constructor": false}, {"identifier": "getParameterClass", "parameters": "()", "modifiers": "@Override public", "return": "Class<?>", "signature": "Class<?> getParameterClass()", "full_signature": "@Override public Class<?> getParameterClass()", "class_method_signature": "FieldInjectorImpl.getParameterClass()", "testcase": false, "constructor": false}, {"identifier": "getGenericType", "parameters": "()", "modifiers": "@Override public", "return": "Type", "signature": "Type getGenericType()", "full_signature": "@Override public Type getGenericType()", "class_method_signature": "FieldInjectorImpl.getGenericType()", "testcase": false, "constructor": false}, {"identifier": "isEncoded", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEncoded()", "full_signature": "@Override public boolean isEncoded()", "class_method_signature": "FieldInjectorImpl.isEncoded()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "FieldInjectorImpl.getName()", "testcase": false, "constructor": false}, {"identifier": "inject", "parameters": "(Object resource, ApplicationContext context)", "modifiers": "@Override public", "return": "void", "signature": "void inject(Object resource, ApplicationContext context)", "full_signature": "@Override public void inject(Object resource, ApplicationContext context)", "class_method_signature": "FieldInjectorImpl.inject(Object resource, ApplicationContext context)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "FieldInjectorImpl.toString()", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/impl/FieldInjectorImpl.java"}, "focal_method": {"identifier": "inject", "parameters": "(Object resource, ApplicationContext context)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void inject(Object resource, ApplicationContext context) {\n        try {\n            Object value = null;\n            if (annotation != null) {\n                value = parameterResolverFactory.createParameterResolver(annotation).resolve(this, context);\n            } else {\n                DependencySupplier dependencies = context.getDependencySupplier();\n                if (dependencies != null) {\n                    value = dependencies.getInstance(this);\n                }\n            }\n\n            if (value != null) {\n                if (setter != null) {\n                    setter.invoke(resource, value);\n                } else {\n                    if (!Modifier.isPublic(field.getModifiers())) {\n                        field.setAccessible(true);\n                    }\n                    field.set(resource, value);\n                }\n            }\n        } catch (Exception e) {\n            if (annotation != null) {\n                Class<?> annotationType = annotation.annotationType();\n                if (annotationType == PathParam.class || annotationType == QueryParam.class || annotationType == MatrixParam.class) {\n                    throw new WebApplicationException(e, Response.status(NOT_FOUND).build());\n                }\n                throw new WebApplicationException(e, Response.status(BAD_REQUEST).build());\n            }\n            throw new WebApplicationException(e, Response.status(INTERNAL_SERVER_ERROR).build());\n        }\n    }", "signature": "void inject(Object resource, ApplicationContext context)", "full_signature": "@Override public void inject(Object resource, ApplicationContext context)", "class_method_signature": "FieldInjectorImpl.inject(Object resource, ApplicationContext context)", "testcase": false, "constructor": false, "invocations": ["resolve", "createParameterResolver", "getDependencySupplier", "getInstance", "invoke", "isPublic", "getModifiers", "setAccessible", "set", "annotationType", "build", "status", "build", "status", "build", "status"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}