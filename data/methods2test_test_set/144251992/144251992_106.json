{"test_class": {"identifier": "UserUpdaterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private HierarchyTreeNodeRepository hierarchyTreeNodeRepoMock;", "modifier": "@Mock\n    private", "type": "HierarchyTreeNodeRepository", "declarator": "hierarchyTreeNodeRepoMock", "var_name": "hierarchyTreeNodeRepoMock"}, {"original_string": "@Mock\n    private LdapAdapter ldapAdapterMock;", "modifier": "@Mock\n    private", "type": "LdapAdapter", "declarator": "ldapAdapterMock", "var_name": "ldapAdapterMock"}, {"original_string": "@Mock\n    private RepositoryUserService repoUserServiceMock;", "modifier": "@Mock\n    private", "type": "RepositoryUserService", "declarator": "repoUserServiceMock", "var_name": "repoUserServiceMock"}, {"original_string": "@Mock\n    private UserDataRepository userDataRepoMock;", "modifier": "@Mock\n    private", "type": "UserDataRepository", "declarator": "userDataRepoMock", "var_name": "userDataRepoMock"}, {"original_string": "@Mock\n    private Normalizer<UserData> normalizerMock;", "modifier": "@Mock\n    private", "type": "Normalizer<UserData>", "declarator": "normalizerMock", "var_name": "normalizerMock"}, {"original_string": "@Captor\n    private ArgumentCaptor<Collection<UserData>> userDataCaptor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<Collection<UserData>>", "declarator": "userDataCaptor", "var_name": "userDataCaptor"}, {"original_string": "private UserUpdater userUpdater;", "modifier": "private", "type": "UserUpdater", "declarator": "userUpdater", "var_name": "userUpdater"}], "file": "backend/project-board/src/test/java/de/adesso/projectboard/ad/updater/UserUpdaterTest.java"}, "test_case": {"identifier": "getChildNodesInLevelOrderReturnsChildNodesInLevelOrder", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getChildNodesInLevelOrderReturnsChildNodesInLevelOrder() {\n        // given\n        var firstLevelNodeDn1 = \"first-level-child-1\";\n        var firstLevelNodeDn2 = \"first-level-child-2\";\n        var secondLevelNodeDn = \"second-level-child\";\n\n        var rootNode = new LdapUserNode()\n                .setDirectReportsDn(List.of(firstLevelNodeDn1, firstLevelNodeDn2));\n        var firstLevelNode1 = new LdapUserNode()\n                .setDirectReportsDn(List.of(secondLevelNodeDn));\n        var firstLevelNode2 = new LdapUserNode();\n        var secondLevelNode = new LdapUserNode();\n\n        var dnNodeMap = Map.of(\n                firstLevelNodeDn1, firstLevelNode1,\n                firstLevelNodeDn2, firstLevelNode2,\n                secondLevelNodeDn, secondLevelNode);\n\n        var expectedOrder = List.of(firstLevelNode1, firstLevelNode2, secondLevelNode);\n\n        // when\n        var actualOrder = userUpdater.getChildNodesInLevelOrder(rootNode, dnNodeMap);\n\n        // then\n        assertThat(actualOrder).containsExactlyElementsOf(expectedOrder);\n    }", "signature": "void getChildNodesInLevelOrderReturnsChildNodesInLevelOrder()", "full_signature": "@Test public void getChildNodesInLevelOrderReturnsChildNodesInLevelOrder()", "class_method_signature": "UserUpdaterTest.getChildNodesInLevelOrderReturnsChildNodesInLevelOrder()", "testcase": true, "constructor": false, "invocations": ["setDirectReportsDn", "of", "setDirectReportsDn", "of", "of", "of", "getChildNodesInLevelOrder", "containsExactlyElementsOf", "assertThat"]}, "focal_class": {"identifier": "UserUpdater", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final HierarchyTreeNodeRepository hierarchyTreeNodeRepo;", "modifier": "private final", "type": "HierarchyTreeNodeRepository", "declarator": "hierarchyTreeNodeRepo", "var_name": "hierarchyTreeNodeRepo"}, {"original_string": "private final RepositoryUserService repoUserService;", "modifier": "private final", "type": "RepositoryUserService", "declarator": "repoUserService", "var_name": "repoUserService"}, {"original_string": "private final UserDataRepository userDataRepo;", "modifier": "private final", "type": "UserDataRepository", "declarator": "userDataRepo", "var_name": "userDataRepo"}, {"original_string": "private final LdapAdapter ldapAdapter;", "modifier": "private final", "type": "LdapAdapter", "declarator": "ldapAdapter", "var_name": "ldapAdapter"}, {"original_string": "private final List<Normalizer<UserData>> normalizers;", "modifier": "private final", "type": "List<Normalizer<UserData>>", "declarator": "normalizers", "var_name": "normalizers"}], "methods": [{"identifier": "UserUpdater", "parameters": "(HierarchyTreeNodeRepository hierarchyTreeNodeRepo,\n                       RepositoryUserService repoUserService,\n                       UserDataRepository userDataRepo,\n                       LdapAdapter ldapAdapter,\n                       List<Normalizer<UserData>> normalizers)", "modifiers": "public", "return": "", "signature": " UserUpdater(HierarchyTreeNodeRepository hierarchyTreeNodeRepo,\n                       RepositoryUserService repoUserService,\n                       UserDataRepository userDataRepo,\n                       LdapAdapter ldapAdapter,\n                       List<Normalizer<UserData>> normalizers)", "full_signature": "public  UserUpdater(HierarchyTreeNodeRepository hierarchyTreeNodeRepo,\n                       RepositoryUserService repoUserService,\n                       UserDataRepository userDataRepo,\n                       LdapAdapter ldapAdapter,\n                       List<Normalizer<UserData>> normalizers)", "class_method_signature": "UserUpdater.UserUpdater(HierarchyTreeNodeRepository hierarchyTreeNodeRepo,\n                       RepositoryUserService repoUserService,\n                       UserDataRepository userDataRepo,\n                       LdapAdapter ldapAdapter,\n                       List<Normalizer<UserData>> normalizers)", "testcase": false, "constructor": true}, {"identifier": "updateHierarchyAndUserData", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void updateHierarchyAndUserData()", "full_signature": "public void updateHierarchyAndUserData()", "class_method_signature": "UserUpdater.updateHierarchyAndUserData()", "testcase": false, "constructor": false}, {"identifier": "updateHierarchy", "parameters": "(@NonNull Collection<LdapUserNode> nodes)", "modifiers": "", "return": "void", "signature": "void updateHierarchy(@NonNull Collection<LdapUserNode> nodes)", "full_signature": " void updateHierarchy(@NonNull Collection<LdapUserNode> nodes)", "class_method_signature": "UserUpdater.updateHierarchy(@NonNull Collection<LdapUserNode> nodes)", "testcase": false, "constructor": false}, {"identifier": "updateUserData", "parameters": "(@NonNull Collection<LdapUserNode> nodes)", "modifiers": "", "return": "void", "signature": "void updateUserData(@NonNull Collection<LdapUserNode> nodes)", "full_signature": " void updateUserData(@NonNull Collection<LdapUserNode> nodes)", "class_method_signature": "UserUpdater.updateUserData(@NonNull Collection<LdapUserNode> nodes)", "testcase": false, "constructor": false}, {"identifier": "normalizeAndSaveUserData", "parameters": "(List<UserData> userData)", "modifiers": "", "return": "void", "signature": "void normalizeAndSaveUserData(List<UserData> userData)", "full_signature": " void normalizeAndSaveUserData(List<UserData> userData)", "class_method_signature": "UserUpdater.normalizeAndSaveUserData(List<UserData> userData)", "testcase": false, "constructor": false}, {"identifier": "getRootNodes", "parameters": "(@NonNull Collection<LdapUserNode> nodes)", "modifiers": "", "return": "Set<LdapUserNode>", "signature": "Set<LdapUserNode> getRootNodes(@NonNull Collection<LdapUserNode> nodes)", "full_signature": " Set<LdapUserNode> getRootNodes(@NonNull Collection<LdapUserNode> nodes)", "class_method_signature": "UserUpdater.getRootNodes(@NonNull Collection<LdapUserNode> nodes)", "testcase": false, "constructor": false}, {"identifier": "buildHierarchyTrees", "parameters": "(@NonNull Collection<LdapUserNode> rootNodes, @NonNull Collection<LdapUserNode> allNodes)", "modifiers": "", "return": "Collection<HierarchyTreeNode>", "signature": "Collection<HierarchyTreeNode> buildHierarchyTrees(@NonNull Collection<LdapUserNode> rootNodes, @NonNull Collection<LdapUserNode> allNodes)", "full_signature": " Collection<HierarchyTreeNode> buildHierarchyTrees(@NonNull Collection<LdapUserNode> rootNodes, @NonNull Collection<LdapUserNode> allNodes)", "class_method_signature": "UserUpdater.buildHierarchyTrees(@NonNull Collection<LdapUserNode> rootNodes, @NonNull Collection<LdapUserNode> allNodes)", "testcase": false, "constructor": false}, {"identifier": "buildHierarchyNode", "parameters": "(@NonNull LdapUserNode rootNode, @NonNull List<LdapUserNode> childNodes)", "modifiers": "", "return": "HierarchyTreeNode", "signature": "HierarchyTreeNode buildHierarchyNode(@NonNull LdapUserNode rootNode, @NonNull List<LdapUserNode> childNodes)", "full_signature": " HierarchyTreeNode buildHierarchyNode(@NonNull LdapUserNode rootNode, @NonNull List<LdapUserNode> childNodes)", "class_method_signature": "UserUpdater.buildHierarchyNode(@NonNull LdapUserNode rootNode, @NonNull List<LdapUserNode> childNodes)", "testcase": false, "constructor": false}, {"identifier": "getChildNodesInLevelOrder", "parameters": "(@NonNull LdapUserNode node, @NonNull Map<String, LdapUserNode> dnNodeMap)", "modifiers": "", "return": "List<LdapUserNode>", "signature": "List<LdapUserNode> getChildNodesInLevelOrder(@NonNull LdapUserNode node, @NonNull Map<String, LdapUserNode> dnNodeMap)", "full_signature": " List<LdapUserNode> getChildNodesInLevelOrder(@NonNull LdapUserNode node, @NonNull Map<String, LdapUserNode> dnNodeMap)", "class_method_signature": "UserUpdater.getChildNodesInLevelOrder(@NonNull LdapUserNode node, @NonNull Map<String, LdapUserNode> dnNodeMap)", "testcase": false, "constructor": false}, {"identifier": "filterNodesWithMissingManager", "parameters": "(@NonNull Collection<LdapUserNode> nodes)", "modifiers": "", "return": "Set<LdapUserNode>", "signature": "Set<LdapUserNode> filterNodesWithMissingManager(@NonNull Collection<LdapUserNode> nodes)", "full_signature": " Set<LdapUserNode> filterNodesWithMissingManager(@NonNull Collection<LdapUserNode> nodes)", "class_method_signature": "UserUpdater.filterNodesWithMissingManager(@NonNull Collection<LdapUserNode> nodes)", "testcase": false, "constructor": false}, {"identifier": "cleanDirectReports", "parameters": "(@NonNull Collection<LdapUserNode> nodes)", "modifiers": "", "return": "Set<LdapUserNode>", "signature": "Set<LdapUserNode> cleanDirectReports(@NonNull Collection<LdapUserNode> nodes)", "full_signature": " Set<LdapUserNode> cleanDirectReports(@NonNull Collection<LdapUserNode> nodes)", "class_method_signature": "UserUpdater.cleanDirectReports(@NonNull Collection<LdapUserNode> nodes)", "testcase": false, "constructor": false}], "file": "backend/project-board/src/main/java/de/adesso/projectboard/ad/updater/UserUpdater.java"}, "focal_method": {"identifier": "getChildNodesInLevelOrder", "parameters": "(@NonNull LdapUserNode node, @NonNull Map<String, LdapUserNode> dnNodeMap)", "modifiers": "", "return": "List<LdapUserNode>", "body": "List<LdapUserNode> getChildNodesInLevelOrder(@NonNull LdapUserNode node, @NonNull Map<String, LdapUserNode> dnNodeMap) {\n        var childNodesInLevelOrder = new ArrayList<LdapUserNode>();\n        var childDnDeque = new LinkedList<>(node.getDirectReportsDn());\n\n        while(!childDnDeque.isEmpty()) {\n            var childDn = childDnDeque.removeFirst();\n\n            if(!dnNodeMap.containsKey(childDn)) {\n                var message = String.format(\"Child node with DN '%s' not found!\", childDn);\n\n                throw new IllegalArgumentException(message);\n            }\n\n            var childNode = dnNodeMap.get(childDn);\n            childDnDeque.addAll(childNode.getDirectReportsDn());\n            childNodesInLevelOrder.add(childNode);\n        }\n\n        return childNodesInLevelOrder;\n    }", "signature": "List<LdapUserNode> getChildNodesInLevelOrder(@NonNull LdapUserNode node, @NonNull Map<String, LdapUserNode> dnNodeMap)", "full_signature": " List<LdapUserNode> getChildNodesInLevelOrder(@NonNull LdapUserNode node, @NonNull Map<String, LdapUserNode> dnNodeMap)", "class_method_signature": "UserUpdater.getChildNodesInLevelOrder(@NonNull LdapUserNode node, @NonNull Map<String, LdapUserNode> dnNodeMap)", "testcase": false, "constructor": false, "invocations": ["getDirectReportsDn", "isEmpty", "removeFirst", "containsKey", "format", "get", "addAll", "getDirectReportsDn", "add"]}, "repository": {"repo_id": 144251992, "url": "https://github.com/adessoAG/project-board", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 2608, "license": "licensed"}}