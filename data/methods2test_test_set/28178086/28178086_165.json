{"test_class": {"identifier": "TswFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final TswFactory oldFactory = TswFactory.OldTswFactory.INSTANCE;", "modifier": "final", "type": "TswFactory", "declarator": "oldFactory = TswFactory.OldTswFactory.INSTANCE", "var_name": "oldFactory"}, {"original_string": "final TswFactory newFactory = TswFactory.NewTswFactory.INSTANCE;", "modifier": "final", "type": "TswFactory", "declarator": "newFactory = TswFactory.NewTswFactory.INSTANCE", "var_name": "newFactory"}], "file": "commonprovider/src/test/java/ec/tss/tsproviders/common/tsw/TswFactoryTest.java"}, "test_case": {"identifier": "testNanObs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNanObs() throws URISyntaxException, IOException {\n        Path file = getResource(\"NanObs\");\n        for (TswFactory factory : asList(oldFactory, newFactory)) {\n            List<TswSeries> items = factory.loadFile(file);\n            assertEquals(1, items.size());\n\n            TswSeries single = items.get(0);\n            assertEquals(\"ipiSPAIN\", single.name);\n            assertEquals(new TsDomain(TsFrequency.Monthly, 1983, 1, 158), single.data.get().getDomain());\n            assertEquals(158 - 4, single.data.get().getObsCount());\n            assertEquals(Double.NaN, single.data.get().get(4), 0);\n        }\n    }", "signature": "void testNanObs()", "full_signature": "@Test public void testNanObs()", "class_method_signature": "TswFactoryTest.testNanObs()", "testcase": true, "constructor": false, "invocations": ["getResource", "asList", "loadFile", "assertEquals", "size", "get", "assertEquals", "assertEquals", "getDomain", "get", "assertEquals", "getObsCount", "get", "assertEquals", "get", "get"]}, "focal_class": {"identifier": "TswFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Charset TSW_CHARSET = StandardCharsets.US_ASCII;", "modifier": "private static final", "type": "Charset", "declarator": "TSW_CHARSET = StandardCharsets.US_ASCII", "var_name": "TSW_CHARSET"}, {"original_string": "private static final int TSW_NAN = -99999;", "modifier": "private static final", "type": "int", "declarator": "TSW_NAN = -99999", "var_name": "TSW_NAN"}], "methods": [{"identifier": "load", "parameters": "(@NonNull Path repository)", "modifiers": "@NonNull abstract public", "return": "TswSource", "signature": "TswSource load(@NonNull Path repository)", "full_signature": "@NonNull abstract public TswSource load(@NonNull Path repository)", "class_method_signature": "TswFactory.load(@NonNull Path repository)", "testcase": false, "constructor": false}, {"identifier": "loadFile", "parameters": "(@NonNull Path file)", "modifiers": "@NonNull abstract public", "return": "List<TswSeries>", "signature": "List<TswSeries> loadFile(@NonNull Path file)", "full_signature": "@NonNull abstract public List<TswSeries> loadFile(@NonNull Path file)", "class_method_signature": "TswFactory.loadFile(@NonNull Path file)", "testcase": false, "constructor": false}, {"identifier": "getDefault", "parameters": "()", "modifiers": "@NonNull public static", "return": "TswFactory", "signature": "TswFactory getDefault()", "full_signature": "@NonNull public static TswFactory getDefault()", "class_method_signature": "TswFactory.getDefault()", "testcase": false, "constructor": false}, {"identifier": "loadSeries", "parameters": "(@NonNull String fileName, @NonNull CheckedIterator<String, IOException> iterator)", "modifiers": "@Nullable private static", "return": "TswSeries", "signature": "TswSeries loadSeries(@NonNull String fileName, @NonNull CheckedIterator<String, IOException> iterator)", "full_signature": "@Nullable private static TswSeries loadSeries(@NonNull String fileName, @NonNull CheckedIterator<String, IOException> iterator)", "class_method_signature": "TswFactory.loadSeries(@NonNull String fileName, @NonNull CheckedIterator<String, IOException> iterator)", "testcase": false, "constructor": false}], "file": "commonprovider/src/main/java/ec/tss/tsproviders/common/tsw/TswFactory.java"}, "focal_method": {"identifier": "loadFile", "parameters": "(@NonNull Path file)", "modifiers": "@NonNull abstract public", "return": "List<TswSeries>", "body": "@NonNull\n    abstract public List<TswSeries> loadFile(@NonNull Path file) throws IOException;", "signature": "List<TswSeries> loadFile(@NonNull Path file)", "full_signature": "@NonNull abstract public List<TswSeries> loadFile(@NonNull Path file)", "class_method_signature": "TswFactory.loadFile(@NonNull Path file)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}