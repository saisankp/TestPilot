{"test_class": {"identifier": "TestSyslogParser", "superclass": "", "interfaces": "", "fields": [], "file": "flume-ng-core/src/test/java/org/apache/flume/source/TestSyslogParser.java"}, "test_case": {"identifier": "testMessageParsing", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testMessageParsing() {\n    SyslogParser parser = new SyslogParser();\n    Charset charset = Charsets.UTF_8;\n    List<String> messages = Lists.newArrayList();\n\n    // supported examples from RFC 3164\n    messages.add(\"<34>Oct 11 22:14:15 mymachine su: 'su root' failed for \" +\n        \"lonvick on /dev/pts/8\");\n    messages.add(\"<13>Feb  5 17:32:18 10.0.0.99 Use the BFG!\");\n    messages.add(\"<165>Aug 24 05:34:00 CST 1987 mymachine myproc[10]: %% \" +\n        \"It's time to make the do-nuts.  %%  Ingredients: Mix=OK, Jelly=OK # \" +\n         \"Devices: Mixer=OK, Jelly_Injector=OK, Frier=OK # Transport: \" +\n         \"Conveyer1=OK, Conveyer2=OK # %%\");\n    messages.add(\"<0>Oct 22 10:52:12 scapegoat 1990 Oct 22 10:52:01 TZ-6 \" +\n         \"scapegoat.dmz.example.org 10.1.2.3 sched[0]: That's All Folks!\");\n\n    // supported examples from RFC 5424\n    messages.add(\"<34>1 2003-10-11T22:14:15.003Z mymachine.example.com su - \" +\n        \"ID47 - BOM'su root' failed for lonvick on /dev/pts/8\");\n    messages.add(\"<165>1 2003-08-24T05:14:15.000003-07:00 192.0.2.1 myproc \" +\n        \"8710 - - %% It's time to make the do-nuts.\");\n\n    // non-standard (but common) messages (RFC3339 dates, no version digit)\n    messages.add(\"<13>2003-08-24T05:14:15Z localhost snarf?\");\n    messages.add(\"<13>2012-08-16T14:34:03-08:00 127.0.0.1 test shnap!\");\n\n    // test with default keepFields = false\n    for (String msg : messages) {\n      Set<String> keepFields = new HashSet<String>();\n      Event event = parser.parseMessage(msg, charset, keepFields);\n      Assert.assertNull(\"Failure to parse known-good syslog message\",\n                        event.getHeaders().get(SyslogUtils.EVENT_STATUS));\n    }\n\n    // test that priority, timestamp and hostname are preserved in event body\n    for (String msg : messages) {\n      Set<String> keepFields = new HashSet<String>();\n      keepFields.add(SyslogUtils.KEEP_FIELDS_ALL);\n      Event event = parser.parseMessage(msg, charset, keepFields);\n      Assert.assertArrayEquals(event.getBody(), msg.getBytes());\n      Assert.assertNull(\"Failure to parse known-good syslog message\",\n          event.getHeaders().get(SyslogUtils.EVENT_STATUS));\n    }\n\n    // test that hostname is preserved in event body\n    for (String msg : messages) {\n      Set<String> keepFields = new HashSet<String>();\n      keepFields.add(SyslogSourceConfigurationConstants.CONFIG_KEEP_FIELDS_HOSTNAME);\n      Event event = parser.parseMessage(msg, charset, keepFields);\n      Assert.assertTrue(\"Failure to persist hostname\",\n          new String(event.getBody()).contains(event.getHeaders().get(\"host\")));\n      Assert.assertNull(\"Failure to parse known-good syslog message\",\n          event.getHeaders().get(SyslogUtils.EVENT_STATUS));\n    }\n  }", "signature": "void testMessageParsing()", "full_signature": "@Test public void testMessageParsing()", "class_method_signature": "TestSyslogParser.testMessageParsing()", "testcase": true, "constructor": false, "invocations": ["newArrayList", "add", "add", "add", "add", "add", "add", "add", "add", "parseMessage", "assertNull", "get", "getHeaders", "add", "parseMessage", "assertArrayEquals", "getBody", "getBytes", "assertNull", "get", "getHeaders", "add", "parseMessage", "assertTrue", "contains", "getBody", "get", "getHeaders", "assertNull", "get", "getHeaders"]}, "focal_class": {"identifier": "SyslogParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger =\n      LoggerFactory.getLogger(SyslogParser.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger =\n      LoggerFactory.getLogger(SyslogParser.class)", "var_name": "logger"}, {"original_string": "private static final int TS_CACHE_MAX = 1000;", "modifier": "private static final", "type": "int", "declarator": "TS_CACHE_MAX = 1000", "var_name": "TS_CACHE_MAX"}, {"original_string": "private static final Pattern TWO_SPACES = Pattern.compile(\"  \");", "modifier": "private static final", "type": "Pattern", "declarator": "TWO_SPACES = Pattern.compile(\"  \")", "var_name": "TWO_SPACES"}, {"original_string": "private static final DateTimeFormatter rfc3164Format =\n      DateTimeFormat.forPattern(\"MMM d HH:mm:ss\").withZoneUTC();", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "rfc3164Format =\n      DateTimeFormat.forPattern(\"MMM d HH:mm:ss\").withZoneUTC()", "var_name": "rfc3164Format"}, {"original_string": "private static final String timePat = \"yyyy-MM-dd'T'HH:mm:ss\";", "modifier": "private static final", "type": "String", "declarator": "timePat = \"yyyy-MM-dd'T'HH:mm:ss\"", "var_name": "timePat"}, {"original_string": "private static final int RFC3164_LEN = 15;", "modifier": "private static final", "type": "int", "declarator": "RFC3164_LEN = 15", "var_name": "RFC3164_LEN"}, {"original_string": "private static final int RFC5424_PREFIX_LEN = 19;", "modifier": "private static final", "type": "int", "declarator": "RFC5424_PREFIX_LEN = 19", "var_name": "RFC5424_PREFIX_LEN"}, {"original_string": "private final DateTimeFormatter timeParser;", "modifier": "private final", "type": "DateTimeFormatter", "declarator": "timeParser", "var_name": "timeParser"}, {"original_string": "private Cache<String, Long> timestampCache;", "modifier": "private", "type": "Cache<String, Long>", "declarator": "timestampCache", "var_name": "timestampCache"}], "methods": [{"identifier": "SyslogParser", "parameters": "()", "modifiers": "public", "return": "", "signature": " SyslogParser()", "full_signature": "public  SyslogParser()", "class_method_signature": "SyslogParser.SyslogParser()", "testcase": false, "constructor": true}, {"identifier": "parseMessage", "parameters": "(String msg, Charset charset, Set<String> keepFields)", "modifiers": "public", "return": "Event", "signature": "Event parseMessage(String msg, Charset charset, Set<String> keepFields)", "full_signature": "public Event parseMessage(String msg, Charset charset, Set<String> keepFields)", "class_method_signature": "SyslogParser.parseMessage(String msg, Charset charset, Set<String> keepFields)", "testcase": false, "constructor": false}, {"identifier": "parseRfc5424Date", "parameters": "(String msg)", "modifiers": "protected", "return": "long", "signature": "long parseRfc5424Date(String msg)", "full_signature": "protected long parseRfc5424Date(String msg)", "class_method_signature": "SyslogParser.parseRfc5424Date(String msg)", "testcase": false, "constructor": false}, {"identifier": "parseRfc3164Time", "parameters": "(String ts)", "modifiers": "protected", "return": "long", "signature": "long parseRfc3164Time(String ts)", "full_signature": "protected long parseRfc3164Time(String ts)", "class_method_signature": "SyslogParser.parseRfc3164Time(String ts)", "testcase": false, "constructor": false}], "file": "flume-ng-core/src/main/java/org/apache/flume/source/SyslogParser.java"}, "focal_method": {"identifier": "parseMessage", "parameters": "(String msg, Charset charset, Set<String> keepFields)", "modifiers": "public", "return": "Event", "body": "public Event parseMessage(String msg, Charset charset, Set<String> keepFields) {\n    Map<String, String> headers = Maps.newHashMap();\n\n    int msgLen = msg.length();\n\n    int curPos = 0;\n\n    Preconditions.checkArgument(msg.charAt(curPos) == '<',\n        \"Bad format: invalid priority: cannot find open bracket '<' (%s)\", msg);\n\n    int endBracketPos = msg.indexOf('>');\n    Preconditions.checkArgument(endBracketPos > 0 && endBracketPos <= 6,\n        \"Bad format: invalid priority: cannot find end bracket '>' (%s)\", msg);\n\n    String priority = msg.substring(1, endBracketPos);\n    int pri = Integer.parseInt(priority);\n    int facility = pri / 8;\n    int severity = pri % 8;\n\n    // Remember priority\n    headers.put(SyslogUtils.SYSLOG_PRIORITY, priority);\n\n    // put fac / sev into header\n    headers.put(SyslogUtils.SYSLOG_FACILITY, String.valueOf(facility));\n    headers.put(SyslogUtils.SYSLOG_SEVERITY, String.valueOf(severity));\n\n    Preconditions.checkArgument(msgLen > endBracketPos + 1,\n        \"Bad format: no data except priority (%s)\", msg);\n\n    // update parsing position\n    curPos = endBracketPos + 1;\n\n    // remember version string\n    String version = null;\n    if (msgLen > curPos + 2 && \"1 \".equals(msg.substring(curPos, curPos + 2))) {\n      version = msg.substring(curPos, curPos + 1);\n      headers.put(SyslogUtils.SYSLOG_VERSION, version);\n      curPos += 2;\n    }\n\n    // now parse timestamp (handle different varieties)\n\n    long ts;\n    String tsString;\n    char dateStartChar = msg.charAt(curPos);\n\n    try {\n\n      // no timestamp specified; use relay current time\n      if (dateStartChar == '-') {\n        tsString = Character.toString(dateStartChar);\n        ts = System.currentTimeMillis();\n        if (msgLen <= curPos + 2) {\n          throw new IllegalArgumentException(\n              \"bad syslog format (missing hostname)\");\n        }\n        curPos += 2; // assume we skip past a space to get to the hostname\n\n      // rfc3164 timestamp\n      } else if (dateStartChar >= 'A' && dateStartChar <= 'Z') {\n        if (msgLen <= curPos + RFC3164_LEN) {\n          throw new IllegalArgumentException(\"bad timestamp format\");\n        }\n        tsString = msg.substring(curPos, curPos + RFC3164_LEN);\n        ts = parseRfc3164Time(tsString);\n        curPos += RFC3164_LEN + 1;\n\n      // rfc 5424 timestamp\n      } else {\n        int nextSpace = msg.indexOf(' ', curPos);\n        if (nextSpace == -1) {\n          throw new IllegalArgumentException(\"bad timestamp format\");\n        }\n        tsString = msg.substring(curPos, nextSpace);\n        ts = parseRfc5424Date(tsString);\n        curPos = nextSpace + 1;\n      }\n\n    } catch (IllegalArgumentException ex) {\n      throw new IllegalArgumentException(\"Unable to parse message: \" + msg, ex);\n    }\n\n    headers.put(\"timestamp\", String.valueOf(ts));\n\n    // parse out hostname\n    int nextSpace = msg.indexOf(' ', curPos);\n    if (nextSpace == -1) {\n      throw new IllegalArgumentException(\n          \"bad syslog format (missing hostname)\");\n    }\n    // copy the host string to avoid holding the message string in memory\n    // if using a memory-based queue\n    String hostname = new String(msg.substring(curPos, nextSpace));\n    headers.put(\"host\", hostname);\n\n    // EventBuilder will do a copy of its own, so no defensive copy of the body\n    String data = \"\";\n    if (msgLen > nextSpace + 1 && !SyslogUtils.keepAllFields(keepFields)) {\n      curPos = nextSpace + 1;\n      data = msg.substring(curPos);\n      data = SyslogUtils.addFieldsToBody(keepFields, data, priority, version, tsString, hostname);\n    } else {\n      data = msg;\n    }\n\n    Event event = EventBuilder.withBody(data, charset, headers);\n\n    return event;\n  }", "signature": "Event parseMessage(String msg, Charset charset, Set<String> keepFields)", "full_signature": "public Event parseMessage(String msg, Charset charset, Set<String> keepFields)", "class_method_signature": "SyslogParser.parseMessage(String msg, Charset charset, Set<String> keepFields)", "testcase": false, "constructor": false, "invocations": ["newHashMap", "length", "checkArgument", "charAt", "indexOf", "checkArgument", "substring", "parseInt", "put", "put", "valueOf", "put", "valueOf", "checkArgument", "equals", "substring", "substring", "put", "charAt", "toString", "currentTimeMillis", "substring", "parseRfc3164Time", "indexOf", "substring", "parseRfc5424Date", "put", "valueOf", "indexOf", "substring", "put", "keepAllFields", "substring", "addFieldsToBody", "withBody"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}