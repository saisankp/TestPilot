{"test_class": {"identifier": "RuleDatabaseItemUpdateRunnableTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Context mockContext;", "modifier": "private", "type": "Context", "declarator": "mockContext", "var_name": "mockContext"}, {"original_string": "private File file;", "modifier": "private", "type": "File", "declarator": "file", "var_name": "file"}, {"original_string": "private SingleWriterMultipleReaderFile singleWriterMultipleReaderFile;", "modifier": "private", "type": "SingleWriterMultipleReaderFile", "declarator": "singleWriterMultipleReaderFile", "var_name": "singleWriterMultipleReaderFile"}, {"original_string": "private HttpURLConnection connection;", "modifier": "private", "type": "HttpURLConnection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private CountingAnswer finishAnswer;", "modifier": "private", "type": "CountingAnswer", "declarator": "finishAnswer", "var_name": "finishAnswer"}, {"original_string": "private CountingAnswer failAnswer;", "modifier": "private", "type": "CountingAnswer", "declarator": "failAnswer", "var_name": "failAnswer"}, {"original_string": "private URL url;", "modifier": "private", "type": "URL", "declarator": "url", "var_name": "url"}, {"original_string": "private RuleDatabaseUpdateTask realTask;", "modifier": "private", "type": "RuleDatabaseUpdateTask", "declarator": "realTask", "var_name": "realTask"}, {"original_string": "private RuleDatabaseUpdateTask mockTask;", "modifier": "private", "type": "RuleDatabaseUpdateTask", "declarator": "mockTask", "var_name": "mockTask"}, {"original_string": "private ContentResolver mockResolver;", "modifier": "private", "type": "ContentResolver", "declarator": "mockResolver", "var_name": "mockResolver"}], "file": "app/src/test/java/org/jak_linux/dns66/db/RuleDatabaseItemUpdateRunnableTest.java"}, "test_case": {"identifier": "testRun", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRun() throws Exception {\n        CountingAnswer downloadCount = new CountingAnswer(null);\n        when(mockTask.doInBackground()).thenCallRealMethod();\n\n        mockTask.context = mockContext;\n        mockTask.errors = new ArrayList<>();\n        mockTask.done = new ArrayList<>();\n        mockTask.pending = new ArrayList<>();\n        mockTask.configuration = new Configuration();\n        mockTask.configuration.hosts = new Configuration.Hosts();\n        mockTask.configuration.hosts.items.add(new Configuration.Item());\n        mockTask.configuration.hosts.items.add(new Configuration.Item());\n        mockTask.configuration.hosts.items.add(new Configuration.Item());\n        mockTask.configuration.hosts.items.add(new Configuration.Item());\n        mockTask.configuration.hosts.items.get(0).title = \"http-title\";\n        mockTask.configuration.hosts.items.get(0).state = Configuration.Item.STATE_DENY;\n        mockTask.configuration.hosts.items.get(0).location = \"http://foo\";\n\n        when(mockTask, \"addError\", any(Configuration.Item.class), anyString()).thenCallRealMethod();\n        when(mockTask, \"addDone\", any(Configuration.Item.class)).thenCallRealMethod();\n\n        RuleDatabaseItemUpdateRunnable itemUpdateRunnable = mock(RuleDatabaseItemUpdateRunnable.class);\n        itemUpdateRunnable.parentTask = mockTask;\n        itemUpdateRunnable.context = mockContext;\n        itemUpdateRunnable.item = mockTask.configuration.hosts.items.get(0);\n\n        when(itemUpdateRunnable, \"run\").thenCallRealMethod();\n        when(itemUpdateRunnable, \"shouldDownload\").thenCallRealMethod();\n        when(mockTask.getCommand(any(Configuration.Item.class))).thenReturn(itemUpdateRunnable);\n        when(itemUpdateRunnable, \"downloadFile\", any(File.class), any(SingleWriterMultipleReaderFile.class), any(HttpURLConnection.class)).then(downloadCount);\n\n\n        // Scenario 1: Validate response fails\n        assertTrue(itemUpdateRunnable.shouldDownload());\n        itemUpdateRunnable.run();\n        assertEquals(0, downloadCount.numCalls);\n        assertEquals(1, mockTask.done.size());\n\n        // Scenario 2: Validate response succeeds\n        when(itemUpdateRunnable.validateResponse(any(HttpURLConnection.class))).thenReturn(true);\n        when(itemUpdateRunnable.getHttpURLConnection(any(File.class), any(SingleWriterMultipleReaderFile.class), any(URL.class))).thenCallRealMethod();\n        when(itemUpdateRunnable.internalOpenHttpConnection(any(URL.class))).thenReturn(connection);\n        assertTrue(itemUpdateRunnable.shouldDownload());\n        itemUpdateRunnable.run();\n        assertEquals(1, downloadCount.numCalls);\n        assertEquals(2, mockTask.done.size());\n\n        // Scenario 3: Download file throws an exception\n        CountingAnswer downloadExceptionCount = new CountingAnswer(null) {\n            @Override\n            public Object answer(InvocationOnMock invocation) throws Throwable {\n                super.answer(invocation);\n                throw new IOException(\"FooBarException\");\n            }\n        };\n        when(itemUpdateRunnable, \"downloadFile\", any(File.class), any(SingleWriterMultipleReaderFile.class), any(HttpURLConnection.class)).then(downloadExceptionCount);\n        assertTrue(itemUpdateRunnable.shouldDownload());\n        itemUpdateRunnable.run();\n        assertEquals(1, downloadExceptionCount.numCalls);\n        assertEquals(1, mockTask.errors.size());\n        assertEquals(3, mockTask.done.size());\n        assertTrue(\"http-title in\" + mockTask.errors.get(0), mockTask.errors.get(0).matches(\".*http-title.*\"));\n    }", "signature": "void testRun()", "full_signature": "@Test public void testRun()", "class_method_signature": "RuleDatabaseItemUpdateRunnableTest.testRun()", "testcase": true, "constructor": false, "invocations": ["thenCallRealMethod", "when", "doInBackground", "add", "add", "add", "add", "get", "get", "get", "thenCallRealMethod", "when", "any", "anyString", "thenCallRealMethod", "when", "any", "mock", "get", "thenCallRealMethod", "when", "thenCallRealMethod", "when", "thenReturn", "when", "getCommand", "any", "then", "when", "any", "any", "any", "assertTrue", "shouldDownload", "run", "assertEquals", "assertEquals", "size", "thenReturn", "when", "validateResponse", "any", "thenCallRealMethod", "when", "getHttpURLConnection", "any", "any", "any", "thenReturn", "when", "internalOpenHttpConnection", "any", "assertTrue", "shouldDownload", "run", "assertEquals", "assertEquals", "size", "answer", "then", "when", "any", "any", "any", "assertTrue", "shouldDownload", "run", "assertEquals", "assertEquals", "size", "assertEquals", "size", "assertTrue", "get", "matches", "get"]}, "focal_class": {"identifier": "RuleDatabaseItemUpdateRunnable", "superclass": "", "interfaces": "implements Runnable", "fields": [{"original_string": "private static final int CONNECT_TIMEOUT_MILLIS = 30000;", "modifier": "private static final", "type": "int", "declarator": "CONNECT_TIMEOUT_MILLIS = 30000", "var_name": "CONNECT_TIMEOUT_MILLIS"}, {"original_string": "private static final int READ_TIMEOUT_MILLIS = 10000;", "modifier": "private static final", "type": "int", "declarator": "READ_TIMEOUT_MILLIS = 10000", "var_name": "READ_TIMEOUT_MILLIS"}, {"original_string": "private static final String TAG = \"RuleDbItemUpdate\";", "modifier": "private static final", "type": "String", "declarator": "TAG = \"RuleDbItemUpdate\"", "var_name": "TAG"}, {"original_string": "RuleDatabaseUpdateTask parentTask;", "modifier": "", "type": "RuleDatabaseUpdateTask", "declarator": "parentTask", "var_name": "parentTask"}, {"original_string": "Configuration.Item item;", "modifier": "", "type": "Configuration.Item", "declarator": "item", "var_name": "item"}, {"original_string": "Context context;", "modifier": "", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "private URL url;", "modifier": "private", "type": "URL", "declarator": "url", "var_name": "url"}, {"original_string": "private File file;", "modifier": "private", "type": "File", "declarator": "file", "var_name": "file"}], "methods": [{"identifier": "RuleDatabaseItemUpdateRunnable", "parameters": "(@NonNull RuleDatabaseUpdateTask parentTask, @NonNull Context context, @NonNull Configuration.Item item)", "modifiers": "", "return": "", "signature": " RuleDatabaseItemUpdateRunnable(@NonNull RuleDatabaseUpdateTask parentTask, @NonNull Context context, @NonNull Configuration.Item item)", "full_signature": "  RuleDatabaseItemUpdateRunnable(@NonNull RuleDatabaseUpdateTask parentTask, @NonNull Context context, @NonNull Configuration.Item item)", "class_method_signature": "RuleDatabaseItemUpdateRunnable.RuleDatabaseItemUpdateRunnable(@NonNull RuleDatabaseUpdateTask parentTask, @NonNull Context context, @NonNull Configuration.Item item)", "testcase": false, "constructor": true}, {"identifier": "shouldDownload", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean shouldDownload()", "full_signature": " boolean shouldDownload()", "class_method_signature": "RuleDatabaseItemUpdateRunnable.shouldDownload()", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "RuleDatabaseItemUpdateRunnable.run()", "testcase": false, "constructor": false}, {"identifier": "parseUri", "parameters": "(String uri)", "modifiers": "", "return": "Uri", "signature": "Uri parseUri(String uri)", "full_signature": " Uri parseUri(String uri)", "class_method_signature": "RuleDatabaseItemUpdateRunnable.parseUri(String uri)", "testcase": false, "constructor": false}, {"identifier": "getHttpURLConnection", "parameters": "(File file, SingleWriterMultipleReaderFile singleWriterMultipleReaderFile, URL url)", "modifiers": "@NonNull", "return": "HttpURLConnection", "signature": "HttpURLConnection getHttpURLConnection(File file, SingleWriterMultipleReaderFile singleWriterMultipleReaderFile, URL url)", "full_signature": "@NonNull HttpURLConnection getHttpURLConnection(File file, SingleWriterMultipleReaderFile singleWriterMultipleReaderFile, URL url)", "class_method_signature": "RuleDatabaseItemUpdateRunnable.getHttpURLConnection(File file, SingleWriterMultipleReaderFile singleWriterMultipleReaderFile, URL url)", "testcase": false, "constructor": false}, {"identifier": "internalOpenHttpConnection", "parameters": "(URL url)", "modifiers": "", "return": "HttpURLConnection", "signature": "HttpURLConnection internalOpenHttpConnection(URL url)", "full_signature": " HttpURLConnection internalOpenHttpConnection(URL url)", "class_method_signature": "RuleDatabaseItemUpdateRunnable.internalOpenHttpConnection(URL url)", "testcase": false, "constructor": false}, {"identifier": "validateResponse", "parameters": "(HttpURLConnection connection)", "modifiers": "", "return": "boolean", "signature": "boolean validateResponse(HttpURLConnection connection)", "full_signature": " boolean validateResponse(HttpURLConnection connection)", "class_method_signature": "RuleDatabaseItemUpdateRunnable.validateResponse(HttpURLConnection connection)", "testcase": false, "constructor": false}, {"identifier": "downloadFile", "parameters": "(File file, SingleWriterMultipleReaderFile singleWriterMultipleReaderFile, HttpURLConnection connection)", "modifiers": "", "return": "void", "signature": "void downloadFile(File file, SingleWriterMultipleReaderFile singleWriterMultipleReaderFile, HttpURLConnection connection)", "full_signature": " void downloadFile(File file, SingleWriterMultipleReaderFile singleWriterMultipleReaderFile, HttpURLConnection connection)", "class_method_signature": "RuleDatabaseItemUpdateRunnable.downloadFile(File file, SingleWriterMultipleReaderFile singleWriterMultipleReaderFile, HttpURLConnection connection)", "testcase": false, "constructor": false}, {"identifier": "copyStream", "parameters": "(InputStream inStream, OutputStream outStream)", "modifiers": "", "return": "void", "signature": "void copyStream(InputStream inStream, OutputStream outStream)", "full_signature": " void copyStream(InputStream inStream, OutputStream outStream)", "class_method_signature": "RuleDatabaseItemUpdateRunnable.copyStream(InputStream inStream, OutputStream outStream)", "testcase": false, "constructor": false}], "file": "app/src/main/java/org/jak_linux/dns66/db/RuleDatabaseItemUpdateRunnable.java"}, "focal_method": {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void run() {\n        try {\n            android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_BACKGROUND);\n        } catch (UnsatisfiedLinkError e) {\n        } catch (RuntimeException e) {\n            if (!e.toString().contains(\"not mocked\"))\n                throw e;\n        }\n\n        if (item.location.startsWith(\"content:/\")) {\n            try {\n                Uri uri = parseUri(item.location);\n                context.getContentResolver().takePersistableUriPermission(uri, Intent.FLAG_GRANT_READ_URI_PERMISSION);\n\n                context.getContentResolver().openInputStream(uri).close();\n                Log.d(TAG, \"run: Permission requested for \" + item.location);\n            } catch (SecurityException e) {\n                Log.d(TAG, \"doInBackground: Error taking permission: \", e);\n                parentTask.addError(item, context.getString(R.string.permission_denied));\n            } catch (FileNotFoundException e) {\n                parentTask.addError(item, context.getString(R.string.file_not_found));\n            } catch (IOException e) {\n                parentTask.addError(item, context.getString(R.string.unknown_error_s, e.getLocalizedMessage()));\n            }\n            return;\n        }\n\n        SingleWriterMultipleReaderFile singleWriterMultipleReaderFile = new SingleWriterMultipleReaderFile(file);\n        HttpURLConnection connection = null;\n        parentTask.addBegin(item);\n        try {\n            connection = getHttpURLConnection(file, singleWriterMultipleReaderFile, url);\n\n            if (!validateResponse(connection))\n                return;\n            downloadFile(file, singleWriterMultipleReaderFile, connection);\n        } catch (SocketTimeoutException e) {\n            parentTask.addError(item, context.getString(R.string.requested_timed_out));\n        }catch (IOException e) {\n            parentTask.addError(item, context.getString(R.string.unknown_error_s, e.toString()));\n        } finally {\n            parentTask.addDone(item);\n            if (connection != null)\n                connection.disconnect();\n        }\n    }", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "RuleDatabaseItemUpdateRunnable.run()", "testcase": false, "constructor": false, "invocations": ["setThreadPriority", "contains", "toString", "startsWith", "parseUri", "takePersistableUriPermission", "getContentResolver", "close", "openInputStream", "getContentResolver", "d", "d", "addError", "getString", "addError", "getString", "addError", "getString", "getLocalizedMessage", "addBegin", "getHttpURLConnection", "validateResponse", "downloadFile", "addError", "getString", "addError", "getString", "toString", "addDone", "disconnect"]}, "repository": {"repo_id": 70996010, "url": "https://github.com/julian-klode/dns66", "stars": 1372, "created": "10/15/2016 3:27:17 PM +00:00", "updates": "2020-01-26T10:51:30+00:00", "fork": "False", "license": "licensed"}}