{"test_class": {"identifier": "AbstractDataStoreClientBehaviorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final String SHARD = \"default\";", "modifier": "protected static final", "type": "String", "declarator": "SHARD = \"default\"", "var_name": "SHARD"}, {"original_string": "private static final String PERSISTENCE_ID = \"per-1\";", "modifier": "private static final", "type": "String", "declarator": "PERSISTENCE_ID = \"per-1\"", "var_name": "PERSISTENCE_ID"}, {"original_string": "private ActorSystem system;", "modifier": "private", "type": "ActorSystem", "declarator": "system", "var_name": "system"}, {"original_string": "private ClientActorContext clientContext;", "modifier": "private", "type": "ClientActorContext", "declarator": "clientContext", "var_name": "clientContext"}, {"original_string": "private TestProbe clientActorProbe;", "modifier": "private", "type": "TestProbe", "declarator": "clientActorProbe", "var_name": "clientActorProbe"}, {"original_string": "private TestProbe actorContextProbe;", "modifier": "private", "type": "TestProbe", "declarator": "actorContextProbe", "var_name": "actorContextProbe"}, {"original_string": "private AbstractDataStoreClientBehavior behavior;", "modifier": "private", "type": "AbstractDataStoreClientBehavior", "declarator": "behavior", "var_name": "behavior"}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/databroker/actors/dds/AbstractDataStoreClientBehaviorTest.java"}, "test_case": {"identifier": "testOnCommand", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOnCommand() {\n        final TestProbe probe = new TestProbe(system);\n        final GetClientRequest request = new GetClientRequest(probe.ref());\n        final AbstractDataStoreClientBehavior nextBehavior = behavior.onCommand(request);\n        final Status.Success success = probe.expectMsgClass(Status.Success.class);\n        Assert.assertEquals(behavior, success.status());\n        Assert.assertSame(behavior, nextBehavior);\n    }", "signature": "void testOnCommand()", "full_signature": "@Test public void testOnCommand()", "class_method_signature": "AbstractDataStoreClientBehaviorTest.testOnCommand()", "testcase": true, "constructor": false, "invocations": ["ref", "onCommand", "expectMsgClass", "assertEquals", "status", "assertSame"]}, "focal_class": {"identifier": "AbstractDataStoreClientBehavior", "superclass": "extends ClientActorBehavior<ShardBackendInfo>", "interfaces": "implements DataStoreClient", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(AbstractDataStoreClientBehavior.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(AbstractDataStoreClientBehavior.class)", "var_name": "LOG"}, {"original_string": "private final Map<LocalHistoryIdentifier, ClientLocalHistory> histories = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<LocalHistoryIdentifier, ClientLocalHistory>", "declarator": "histories = new ConcurrentHashMap<>()", "var_name": "histories"}, {"original_string": "private final AtomicLong nextHistoryId = new AtomicLong(1);", "modifier": "private final", "type": "AtomicLong", "declarator": "nextHistoryId = new AtomicLong(1)", "var_name": "nextHistoryId"}, {"original_string": "private final StampedLock lock = new StampedLock();", "modifier": "private final", "type": "StampedLock", "declarator": "lock = new StampedLock()", "var_name": "lock"}, {"original_string": "private final SingleClientHistory singleHistory;", "modifier": "private final", "type": "SingleClientHistory", "declarator": "singleHistory", "var_name": "singleHistory"}, {"original_string": "private volatile Throwable aborted;", "modifier": "private volatile", "type": "Throwable", "declarator": "aborted", "var_name": "aborted"}], "methods": [{"identifier": "AbstractDataStoreClientBehavior", "parameters": "(final ClientActorContext context,\n            final BackendInfoResolver<ShardBackendInfo> resolver)", "modifiers": "", "return": "", "signature": " AbstractDataStoreClientBehavior(final ClientActorContext context,\n            final BackendInfoResolver<ShardBackendInfo> resolver)", "full_signature": "  AbstractDataStoreClientBehavior(final ClientActorContext context,\n            final BackendInfoResolver<ShardBackendInfo> resolver)", "class_method_signature": "AbstractDataStoreClientBehavior.AbstractDataStoreClientBehavior(final ClientActorContext context,\n            final BackendInfoResolver<ShardBackendInfo> resolver)", "testcase": false, "constructor": true}, {"identifier": "haltClient", "parameters": "(final Throwable cause)", "modifiers": "@Override protected final", "return": "void", "signature": "void haltClient(final Throwable cause)", "full_signature": "@Override protected final void haltClient(final Throwable cause)", "class_method_signature": "AbstractDataStoreClientBehavior.haltClient(final Throwable cause)", "testcase": false, "constructor": false}, {"identifier": "abortOperations", "parameters": "(final Throwable cause)", "modifiers": "private", "return": "void", "signature": "void abortOperations(final Throwable cause)", "full_signature": "private void abortOperations(final Throwable cause)", "class_method_signature": "AbstractDataStoreClientBehavior.abortOperations(final Throwable cause)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "(final ClientActorBehavior<ShardBackendInfo> currentBehavior)", "modifiers": "private", "return": "AbstractDataStoreClientBehavior", "signature": "AbstractDataStoreClientBehavior shutdown(final ClientActorBehavior<ShardBackendInfo> currentBehavior)", "full_signature": "private AbstractDataStoreClientBehavior shutdown(final ClientActorBehavior<ShardBackendInfo> currentBehavior)", "class_method_signature": "AbstractDataStoreClientBehavior.shutdown(final ClientActorBehavior<ShardBackendInfo> currentBehavior)", "testcase": false, "constructor": false}, {"identifier": "onCommand", "parameters": "(final Object command)", "modifiers": "@Override protected final", "return": "AbstractDataStoreClientBehavior", "signature": "AbstractDataStoreClientBehavior onCommand(final Object command)", "full_signature": "@Override protected final AbstractDataStoreClientBehavior onCommand(final Object command)", "class_method_signature": "AbstractDataStoreClientBehavior.onCommand(final Object command)", "testcase": false, "constructor": false}, {"identifier": "connectionUp", "parameters": "(final ConnectedClientConnection<ShardBackendInfo> newConn)", "modifiers": "@Override protected final", "return": "ConnectionConnectCohort", "signature": "ConnectionConnectCohort connectionUp(final ConnectedClientConnection<ShardBackendInfo> newConn)", "full_signature": "@Override protected final ConnectionConnectCohort connectionUp(final ConnectedClientConnection<ShardBackendInfo> newConn)", "class_method_signature": "AbstractDataStoreClientBehavior.connectionUp(final ConnectedClientConnection<ShardBackendInfo> newConn)", "testcase": false, "constructor": false}, {"identifier": "finishReconnect", "parameters": "(final ConnectedClientConnection<ShardBackendInfo> newConn,\n            final long stamp, final Collection<HistoryReconnectCohort> cohorts,\n            final Collection<ConnectionEntry> previousEntries)", "modifiers": "private", "return": "ReconnectForwarder", "signature": "ReconnectForwarder finishReconnect(final ConnectedClientConnection<ShardBackendInfo> newConn,\n            final long stamp, final Collection<HistoryReconnectCohort> cohorts,\n            final Collection<ConnectionEntry> previousEntries)", "full_signature": "private ReconnectForwarder finishReconnect(final ConnectedClientConnection<ShardBackendInfo> newConn,\n            final long stamp, final Collection<HistoryReconnectCohort> cohorts,\n            final Collection<ConnectionEntry> previousEntries)", "class_method_signature": "AbstractDataStoreClientBehavior.finishReconnect(final ConnectedClientConnection<ShardBackendInfo> newConn,\n            final long stamp, final Collection<HistoryReconnectCohort> cohorts,\n            final Collection<ConnectionEntry> previousEntries)", "testcase": false, "constructor": false}, {"identifier": "startReconnect", "parameters": "(final AbstractClientHistory history,\n            final ConnectedClientConnection<ShardBackendInfo> newConn,\n            final Collection<HistoryReconnectCohort> cohorts)", "modifiers": "private static", "return": "void", "signature": "void startReconnect(final AbstractClientHistory history,\n            final ConnectedClientConnection<ShardBackendInfo> newConn,\n            final Collection<HistoryReconnectCohort> cohorts)", "full_signature": "private static void startReconnect(final AbstractClientHistory history,\n            final ConnectedClientConnection<ShardBackendInfo> newConn,\n            final Collection<HistoryReconnectCohort> cohorts)", "class_method_signature": "AbstractDataStoreClientBehavior.startReconnect(final AbstractClientHistory history,\n            final ConnectedClientConnection<ShardBackendInfo> newConn,\n            final Collection<HistoryReconnectCohort> cohorts)", "testcase": false, "constructor": false}, {"identifier": "createLocalHistory", "parameters": "()", "modifiers": "@Override public final", "return": "ClientLocalHistory", "signature": "ClientLocalHistory createLocalHistory()", "full_signature": "@Override public final ClientLocalHistory createLocalHistory()", "class_method_signature": "AbstractDataStoreClientBehavior.createLocalHistory()", "testcase": false, "constructor": false}, {"identifier": "createTransaction", "parameters": "()", "modifiers": "@Override public final", "return": "ClientTransaction", "signature": "ClientTransaction createTransaction()", "full_signature": "@Override public final ClientTransaction createTransaction()", "class_method_signature": "AbstractDataStoreClientBehavior.createTransaction()", "testcase": false, "constructor": false}, {"identifier": "createSnapshot", "parameters": "()", "modifiers": "@Override public final", "return": "ClientSnapshot", "signature": "ClientSnapshot createSnapshot()", "full_signature": "@Override public final ClientSnapshot createSnapshot()", "class_method_signature": "AbstractDataStoreClientBehavior.createSnapshot()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "AbstractDataStoreClientBehavior.close()", "testcase": false, "constructor": false}, {"identifier": "resolveShardForPath", "parameters": "(YangInstanceIdentifier path)", "modifiers": "abstract", "return": "Long", "signature": "Long resolveShardForPath(YangInstanceIdentifier path)", "full_signature": "abstract Long resolveShardForPath(YangInstanceIdentifier path)", "class_method_signature": "AbstractDataStoreClientBehavior.resolveShardForPath(YangInstanceIdentifier path)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/databroker/actors/dds/AbstractDataStoreClientBehavior.java"}, "focal_method": {"identifier": "onCommand", "parameters": "(final Object command)", "modifiers": "@Override protected final", "return": "AbstractDataStoreClientBehavior", "body": "@Override\n    protected final AbstractDataStoreClientBehavior onCommand(final Object command) {\n        if (command instanceof GetClientRequest) {\n            ((GetClientRequest) command).getReplyTo().tell(new Status.Success(this), ActorRef.noSender());\n        } else {\n            LOG.warn(\"{}: ignoring unhandled command {}\", persistenceId(), command);\n        }\n\n        return this;\n    }", "signature": "AbstractDataStoreClientBehavior onCommand(final Object command)", "full_signature": "@Override protected final AbstractDataStoreClientBehavior onCommand(final Object command)", "class_method_signature": "AbstractDataStoreClientBehavior.onCommand(final Object command)", "testcase": false, "constructor": false, "invocations": ["tell", "getReplyTo", "noSender", "warn", "persistenceId"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}