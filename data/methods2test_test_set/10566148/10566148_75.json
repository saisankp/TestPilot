{"test_class": {"identifier": "UUIDTimeoutIdTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}], "file": "saga-lib/src/test/java/com/codebullets/sagalib/timeout/UUIDTimeoutIdTest.java"}, "test_case": {"identifier": "hashCode_twoDifferentInstancesSameId_haveSameHashCode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void hashCode_twoDifferentInstancesSameId_haveSameHashCode() {\n        // given\n        UUID uuid = UUID.randomUUID();\n        UUIDTimeoutId instance1 = new UUIDTimeoutId(uuid);\n        UUIDTimeoutId instance2 = new UUIDTimeoutId(uuid);\n\n        // when\n        int hc1 = instance1.hashCode();\n        int hc2 = instance2.hashCode();\n\n        // then\n        assertThat(\"Expected both hash codes to be equal\", hc1, equalTo(hc2));\n    }", "signature": "void hashCode_twoDifferentInstancesSameId_haveSameHashCode()", "full_signature": "@Test public void hashCode_twoDifferentInstancesSameId_haveSameHashCode()", "class_method_signature": "UUIDTimeoutIdTest.hashCode_twoDifferentInstancesSameId_haveSameHashCode()", "testcase": true, "constructor": false, "invocations": ["randomUUID", "hashCode", "hashCode", "assertThat", "equalTo"]}, "focal_class": {"identifier": "UUIDTimeoutId", "superclass": "", "interfaces": "implements TimeoutId, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private final UUID id;", "modifier": "private final", "type": "UUID", "declarator": "id", "var_name": "id"}], "methods": [{"identifier": "UUIDTimeoutId", "parameters": "(final UUID id)", "modifiers": "public", "return": "", "signature": " UUIDTimeoutId(final UUID id)", "full_signature": "public  UUIDTimeoutId(final UUID id)", "class_method_signature": "UUIDTimeoutId.UUIDTimeoutId(final UUID id)", "testcase": false, "constructor": true}, {"identifier": "generateNewId", "parameters": "()", "modifiers": "public static", "return": "UUIDTimeoutId", "signature": "UUIDTimeoutId generateNewId()", "full_signature": "public static UUIDTimeoutId generateNewId()", "class_method_signature": "UUIDTimeoutId.generateNewId()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "UUIDTimeoutId.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object obj)", "full_signature": "@Override public boolean equals(final Object obj)", "class_method_signature": "UUIDTimeoutId.equals(final Object obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "UUIDTimeoutId.toString()", "testcase": false, "constructor": false}], "file": "saga-lib/src/main/java/com/codebullets/sagalib/timeout/UUIDTimeoutId.java"}, "focal_method": {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int hashCode() {\n        return id.hashCode();\n    }", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "UUIDTimeoutId.hashCode()", "testcase": false, "constructor": false, "invocations": ["hashCode"]}, "repository": {"repo_id": 10566148, "url": "https://github.com/Domo42/saga-lib", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 32, "size": 545, "license": "licensed"}}