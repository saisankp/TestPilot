{"test_class": {"identifier": "HttpHeaderAuthenticationFilterTest", "superclass": "extends AbstractAppTest", "interfaces": "", "fields": [{"original_string": "private final String[] TEST_FUNCTIONS = {\"test_function_1\", \"test_function_2\"};", "modifier": "private final", "type": "String[]", "declarator": "TEST_FUNCTIONS = {\"test_function_1\", \"test_function_2\"}", "var_name": "TEST_FUNCTIONS"}], "file": "herd-code/herd-app/src/test/java/org/finra/herd/app/security/HttpHeaderAuthenticationFilterTest.java"}, "test_case": {"identifier": "testHttpHeaderAuthenticationFilterUserAuthorizationInvalidConfigurationValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHttpHeaderAuthenticationFilterUserAuthorizationInvalidConfigurationValue() throws Exception\n    {\n        // Create and persist the relative database entities.\n        userDaoTestHelper.createUserEntity(USER_ID, true);\n        namespaceDaoTestHelper.createNamespaceEntity(NAMESPACE);\n        namespaceDaoTestHelper.createNamespaceEntity(NAMESPACE_2);\n\n        // Create an ordered set of expected namespace authorizations.\n        Set<NamespaceAuthorization> expectedNamespaceAuthorizations = new HashSet<>();\n        expectedNamespaceAuthorizations.add(new NamespaceAuthorization(NAMESPACE, SUPPORTED_NAMESPACE_PERMISSIONS));\n        expectedNamespaceAuthorizations.add(new NamespaceAuthorization(NAMESPACE_2, SUPPORTED_NAMESPACE_PERMISSIONS));\n\n        setupTestFunctions(\"testRole\");\n        Map<String, Object> overrideMap = getDefaultSecurityEnvironmentVariables();\n        overrideMap.put(ConfigurationValue.USER_NAMESPACE_AUTHORIZATION_ENABLED.getKey(), \"NOT_A_BOOLEAN\");\n        modifyPropertySourceInEnvironment(overrideMap);\n\n        try\n        {\n            MockHttpServletRequest request =\n                getRequestWithHeaders(USER_ID, \"testFirstName\", \"testLastName\", \"testEmail\", \"testRole\", \"Wed, 11 Mar 2015 10:24:09\");\n\n            // Invalidate user session if exists.\n            invalidateApplicationUser(request);\n\n            httpHeaderAuthenticationFilter.init(new MockFilterConfig());\n            httpHeaderAuthenticationFilter.doFilter(request, new MockHttpServletResponse(), new MockFilterChain());\n\n            // Validate that there is no authentication.\n            assertNull(SecurityContextHolder.getContext().getAuthentication());\n        }\n        finally\n        {\n            restorePropertySourceInEnvironment();\n        }\n    }", "signature": "void testHttpHeaderAuthenticationFilterUserAuthorizationInvalidConfigurationValue()", "full_signature": "@Test public void testHttpHeaderAuthenticationFilterUserAuthorizationInvalidConfigurationValue()", "class_method_signature": "HttpHeaderAuthenticationFilterTest.testHttpHeaderAuthenticationFilterUserAuthorizationInvalidConfigurationValue()", "testcase": true, "constructor": false, "invocations": ["createUserEntity", "createNamespaceEntity", "createNamespaceEntity", "add", "add", "setupTestFunctions", "getDefaultSecurityEnvironmentVariables", "put", "getKey", "modifyPropertySourceInEnvironment", "getRequestWithHeaders", "invalidateApplicationUser", "init", "doFilter", "assertNull", "getAuthentication", "getContext", "restorePropertySourceInEnvironment"]}, "focal_class": {"identifier": "HttpHeaderAuthenticationFilter", "superclass": "extends GenericFilterBean", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(HttpHeaderAuthenticationFilter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(HttpHeaderAuthenticationFilter.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private SecurityHelper securityHelper;", "modifier": "@Autowired\n    private", "type": "SecurityHelper", "declarator": "securityHelper", "var_name": "securityHelper"}, {"original_string": "@Autowired\n    private HerdErrorInformationExceptionHandler herdErrorInformationExceptionHandler;", "modifier": "@Autowired\n    private", "type": "HerdErrorInformationExceptionHandler", "declarator": "herdErrorInformationExceptionHandler", "var_name": "herdErrorInformationExceptionHandler"}, {"original_string": "@Autowired\n    private XmlHelper xmlHelper;", "modifier": "@Autowired\n    private", "type": "XmlHelper", "declarator": "xmlHelper", "var_name": "xmlHelper"}, {"original_string": "private AuthenticationTrustResolver authenticationTrustResolver = new AuthenticationTrustResolverImpl();", "modifier": "private", "type": "AuthenticationTrustResolver", "declarator": "authenticationTrustResolver = new AuthenticationTrustResolverImpl()", "var_name": "authenticationTrustResolver"}, {"original_string": "private AuthenticationDetailsSource<HttpServletRequest, WebAuthenticationDetails> authenticationDetailsSource = new WebAuthenticationDetailsSource();", "modifier": "private", "type": "AuthenticationDetailsSource<HttpServletRequest, WebAuthenticationDetails>", "declarator": "authenticationDetailsSource = new WebAuthenticationDetailsSource()", "var_name": "authenticationDetailsSource"}, {"original_string": "private AuthenticationManager authenticationManager = null;", "modifier": "private", "type": "AuthenticationManager", "declarator": "authenticationManager = null", "var_name": "authenticationManager"}, {"original_string": "private ApplicationUserBuilder applicationUserBuilder;", "modifier": "private", "type": "ApplicationUserBuilder", "declarator": "applicationUserBuilder", "var_name": "applicationUserBuilder"}], "methods": [{"identifier": "HttpHeaderAuthenticationFilter", "parameters": "(AuthenticationManager authenticationManager, ApplicationUserBuilder applicationUserBuilder)", "modifiers": "public", "return": "", "signature": " HttpHeaderAuthenticationFilter(AuthenticationManager authenticationManager, ApplicationUserBuilder applicationUserBuilder)", "full_signature": "public  HttpHeaderAuthenticationFilter(AuthenticationManager authenticationManager, ApplicationUserBuilder applicationUserBuilder)", "class_method_signature": "HttpHeaderAuthenticationFilter.HttpHeaderAuthenticationFilter(AuthenticationManager authenticationManager, ApplicationUserBuilder applicationUserBuilder)", "testcase": false, "constructor": true}, {"identifier": "doFilter", "parameters": "(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)", "modifiers": "@Override @SuppressFBWarnings(value = \"BC_UNCONFIRMED_CAST\", justification = \"The ServletRequest is cast to an HttpServletRequest which is always the case since all requests use the HTTP protocol.\") public", "return": "void", "signature": "void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)", "full_signature": "@Override @SuppressFBWarnings(value = \"BC_UNCONFIRMED_CAST\", justification = \"The ServletRequest is cast to an HttpServletRequest which is always the case since all requests use the HTTP protocol.\") public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)", "class_method_signature": "HttpHeaderAuthenticationFilter.doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)", "testcase": false, "constructor": false}, {"identifier": "doHttpFilter", "parameters": "(HttpServletRequest servletRequest, HttpServletResponse servletResponse, FilterChain filterChain)", "modifiers": "public", "return": "void", "signature": "void doHttpFilter(HttpServletRequest servletRequest, HttpServletResponse servletResponse, FilterChain filterChain)", "full_signature": "public void doHttpFilter(HttpServletRequest servletRequest, HttpServletResponse servletResponse, FilterChain filterChain)", "class_method_signature": "HttpHeaderAuthenticationFilter.doHttpFilter(HttpServletRequest servletRequest, HttpServletResponse servletResponse, FilterChain filterChain)", "testcase": false, "constructor": false}, {"identifier": "authenticateUser", "parameters": "(HttpServletRequest servletRequest)", "modifiers": "private", "return": "void", "signature": "void authenticateUser(HttpServletRequest servletRequest)", "full_signature": "private void authenticateUser(HttpServletRequest servletRequest)", "class_method_signature": "HttpHeaderAuthenticationFilter.authenticateUser(HttpServletRequest servletRequest)", "testcase": false, "constructor": false}, {"identifier": "processUserNotLoggedIn", "parameters": "(HttpServletRequest servletRequest)", "modifiers": "protected", "return": "void", "signature": "void processUserNotLoggedIn(HttpServletRequest servletRequest)", "full_signature": "protected void processUserNotLoggedIn(HttpServletRequest servletRequest)", "class_method_signature": "HttpHeaderAuthenticationFilter.processUserNotLoggedIn(HttpServletRequest servletRequest)", "testcase": false, "constructor": false}, {"identifier": "invalidateUser", "parameters": "(HttpServletRequest servletRequest, boolean invalidateSession)", "modifiers": "protected", "return": "void", "signature": "void invalidateUser(HttpServletRequest servletRequest, boolean invalidateSession)", "full_signature": "protected void invalidateUser(HttpServletRequest servletRequest, boolean invalidateSession)", "class_method_signature": "HttpHeaderAuthenticationFilter.invalidateUser(HttpServletRequest servletRequest, boolean invalidateSession)", "testcase": false, "constructor": false}, {"identifier": "getExistingUserId", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getExistingUserId()", "full_signature": "protected String getExistingUserId()", "class_method_signature": "HttpHeaderAuthenticationFilter.getExistingUserId()", "testcase": false, "constructor": false}, {"identifier": "getExistingSessionInitTime", "parameters": "()", "modifiers": "protected", "return": "Date", "signature": "Date getExistingSessionInitTime()", "full_signature": "protected Date getExistingSessionInitTime()", "class_method_signature": "HttpHeaderAuthenticationFilter.getExistingSessionInitTime()", "testcase": false, "constructor": false}, {"identifier": "getExistingUser", "parameters": "()", "modifiers": "protected", "return": "ApplicationUser", "signature": "ApplicationUser getExistingUser()", "full_signature": "protected ApplicationUser getExistingUser()", "class_method_signature": "HttpHeaderAuthenticationFilter.getExistingUser()", "testcase": false, "constructor": false}, {"identifier": "successfulAuthentication", "parameters": "(Authentication authResult)", "modifiers": "protected", "return": "void", "signature": "void successfulAuthentication(Authentication authResult)", "full_signature": "protected void successfulAuthentication(Authentication authResult)", "class_method_signature": "HttpHeaderAuthenticationFilter.successfulAuthentication(Authentication authResult)", "testcase": false, "constructor": false}, {"identifier": "unsuccessfulAuthentication", "parameters": "(HttpServletRequest servletRequest, AuthenticationException authenticationException)", "modifiers": "protected", "return": "void", "signature": "void unsuccessfulAuthentication(HttpServletRequest servletRequest, AuthenticationException authenticationException)", "full_signature": "protected void unsuccessfulAuthentication(HttpServletRequest servletRequest, AuthenticationException authenticationException)", "class_method_signature": "HttpHeaderAuthenticationFilter.unsuccessfulAuthentication(HttpServletRequest servletRequest, AuthenticationException authenticationException)", "testcase": false, "constructor": false}], "file": "herd-code/herd-app/src/main/java/org/finra/herd/app/security/HttpHeaderAuthenticationFilter.java"}, "focal_method": {"identifier": "doFilter", "parameters": "(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)", "modifiers": "@Override @SuppressFBWarnings(value = \"BC_UNCONFIRMED_CAST\", justification = \"The ServletRequest is cast to an HttpServletRequest which is always the case since all requests use the HTTP protocol.\") public", "return": "void", "body": "@Override\n    @SuppressFBWarnings(value = \"BC_UNCONFIRMED_CAST\",\n        justification = \"The ServletRequest is cast to an HttpServletRequest which is always the case since all requests use the HTTP protocol.\")\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException\n    {\n        doHttpFilter((HttpServletRequest) servletRequest, (HttpServletResponse) servletResponse, filterChain);\n    }", "signature": "void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)", "full_signature": "@Override @SuppressFBWarnings(value = \"BC_UNCONFIRMED_CAST\", justification = \"The ServletRequest is cast to an HttpServletRequest which is always the case since all requests use the HTTP protocol.\") public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)", "class_method_signature": "HttpHeaderAuthenticationFilter.doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)", "testcase": false, "constructor": false, "invocations": ["doHttpFilter"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}