{"test_class": {"identifier": "EventBusTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/api/src/test/java/com/alipay/sofa/rpc/event/EventBusTest.java"}, "test_case": {"identifier": "post", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void post() throws Exception {\n        TestSubscriber subscriber = new TestSubscriber();\n        try {\n            Assert.assertEquals(EventBus.isEnable(TestEvent.class), false);\n            EventBus.register(TestEvent.class, subscriber);\n            Assert.assertEquals(EventBus.isEnable(TestEvent.class), true);\n\n            EventBus.post(new NullTestEvent());\n            EventBus.post(new TestEvent(\"xxx\"));\n            Assert.assertEquals(subscriber.getCache(), \"xxx\");\n        } finally {\n            EventBus.unRegister(TestEvent.class, subscriber);\n        }\n        Assert.assertEquals(EventBus.isEnable(TestEvent.class), false);\n    }", "signature": "void post()", "full_signature": "@Test public void post()", "class_method_signature": "EventBusTest.post()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "isEnable", "register", "assertEquals", "isEnable", "post", "post", "assertEquals", "getCache", "unRegister", "assertEquals", "isEnable"]}, "focal_class": {"identifier": "EventBus", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger  LOGGER           = LoggerFactory.getLogger(EventBus.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER           = LoggerFactory.getLogger(EventBus.class)", "var_name": "LOGGER"}, {"original_string": "private static final boolean EVENT_BUS_ENABLE = RpcConfigs.getBooleanValue(RpcOptions.EVENT_BUS_ENABLE);", "modifier": "private static final", "type": "boolean", "declarator": "EVENT_BUS_ENABLE = RpcConfigs.getBooleanValue(RpcOptions.EVENT_BUS_ENABLE)", "var_name": "EVENT_BUS_ENABLE"}, {"original_string": "private final static ConcurrentMap<Class<? extends Event>, CopyOnWriteArraySet<Subscriber>> SUBSCRIBER_MAP = new ConcurrentHashMap<Class<? extends Event>, CopyOnWriteArraySet<Subscriber>>();", "modifier": "private final static", "type": "ConcurrentMap<Class<? extends Event>, CopyOnWriteArraySet<Subscriber>>", "declarator": "SUBSCRIBER_MAP = new ConcurrentHashMap<Class<? extends Event>, CopyOnWriteArraySet<Subscriber>>()", "var_name": "SUBSCRIBER_MAP"}], "methods": [{"identifier": "isEnable", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isEnable()", "full_signature": "public static boolean isEnable()", "class_method_signature": "EventBus.isEnable()", "testcase": false, "constructor": false}, {"identifier": "isEnable", "parameters": "(Class<? extends Event> eventClass)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEnable(Class<? extends Event> eventClass)", "full_signature": "public static boolean isEnable(Class<? extends Event> eventClass)", "class_method_signature": "EventBus.isEnable(Class<? extends Event> eventClass)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(Class<? extends Event> eventClass, Subscriber subscriber)", "modifiers": "public static", "return": "void", "signature": "void register(Class<? extends Event> eventClass, Subscriber subscriber)", "full_signature": "public static void register(Class<? extends Event> eventClass, Subscriber subscriber)", "class_method_signature": "EventBus.register(Class<? extends Event> eventClass, Subscriber subscriber)", "testcase": false, "constructor": false}, {"identifier": "unRegister", "parameters": "(Class<? extends Event> eventClass, Subscriber subscriber)", "modifiers": "public static", "return": "void", "signature": "void unRegister(Class<? extends Event> eventClass, Subscriber subscriber)", "full_signature": "public static void unRegister(Class<? extends Event> eventClass, Subscriber subscriber)", "class_method_signature": "EventBus.unRegister(Class<? extends Event> eventClass, Subscriber subscriber)", "testcase": false, "constructor": false}, {"identifier": "post", "parameters": "(final Event event)", "modifiers": "public static", "return": "void", "signature": "void post(final Event event)", "full_signature": "public static void post(final Event event)", "class_method_signature": "EventBus.post(final Event event)", "testcase": false, "constructor": false}, {"identifier": "handleEvent", "parameters": "(final Subscriber subscriber, final Event event)", "modifiers": "private static", "return": "void", "signature": "void handleEvent(final Subscriber subscriber, final Event event)", "full_signature": "private static void handleEvent(final Subscriber subscriber, final Event event)", "class_method_signature": "EventBus.handleEvent(final Subscriber subscriber, final Event event)", "testcase": false, "constructor": false}], "file": "core/api/src/main/java/com/alipay/sofa/rpc/event/EventBus.java"}, "focal_method": {"identifier": "post", "parameters": "(final Event event)", "modifiers": "public static", "return": "void", "body": "public static void post(final Event event) {\n        if (!isEnable()) {\n            return;\n        }\n        CopyOnWriteArraySet<Subscriber> subscribers = SUBSCRIBER_MAP.get(event.getClass());\n        if (CommonUtils.isNotEmpty(subscribers)) {\n            for (final Subscriber subscriber : subscribers) {\n                if (subscriber.isSync()) {\n                    handleEvent(subscriber, event);\n                } else { // \u5f02\u6b65\n                    final RpcInternalContext context = RpcInternalContext.peekContext();\n                    final ThreadPoolExecutor asyncThreadPool = AsyncRuntime.getAsyncThreadPool();\n                    try {\n                        asyncThreadPool.execute(\n                            new Runnable() {\n                                @Override\n                                public void run() {\n                                    try {\n                                        RpcInternalContext.setContext(context);\n                                        handleEvent(subscriber, event);\n                                    } finally {\n                                        RpcInternalContext.removeContext();\n                                    }\n                                }\n                            });\n                    } catch (RejectedExecutionException e) {\n                        LOGGER\n                            .warn(\"This queue is full when post event to async execute, queue size is \" +\n                                asyncThreadPool.getQueue().size() +\n                                \", please optimize this async thread pool of eventbus.\");\n                    }\n                }\n            }\n        }\n    }", "signature": "void post(final Event event)", "full_signature": "public static void post(final Event event)", "class_method_signature": "EventBus.post(final Event event)", "testcase": false, "constructor": false, "invocations": ["isEnable", "get", "getClass", "isNotEmpty", "isSync", "handleEvent", "peekContext", "getAsyncThreadPool", "execute", "setContext", "handleEvent", "removeContext", "warn", "size", "getQueue"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}