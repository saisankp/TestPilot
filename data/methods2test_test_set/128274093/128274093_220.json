{"test_class": {"identifier": "LambdaObserverTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/observers/LambdaObserverTest.java"}, "test_case": {"identifier": "customOnErrorShouldReportCustomOnError", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void customOnErrorShouldReportCustomOnError() {\n        LambdaObserver<Integer> o = new LambdaObserver<Integer>(Functions.<Integer>emptyConsumer(),\n                Functions.<Throwable>emptyConsumer(),\n                Functions.EMPTY_ACTION,\n                Functions.<Disposable>emptyConsumer());\n\n        assertTrue(o.hasCustomOnError());\n    }", "signature": "void customOnErrorShouldReportCustomOnError()", "full_signature": "@Test public void customOnErrorShouldReportCustomOnError()", "class_method_signature": "LambdaObserverTest.customOnErrorShouldReportCustomOnError()", "testcase": true, "constructor": false, "invocations": ["emptyConsumer", "emptyConsumer", "emptyConsumer", "assertTrue", "hasCustomOnError"]}, "focal_class": {"identifier": "LambdaObserver", "superclass": "extends AtomicReference<Disposable>", "interfaces": "implements Observer<T>, Disposable, LambdaConsumerIntrospection", "fields": [{"original_string": "private static final long serialVersionUID = -7251123623727029452L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -7251123623727029452L", "var_name": "serialVersionUID"}, {"original_string": "final Consumer<? super T> onNext;", "modifier": "final", "type": "Consumer<? super T>", "declarator": "onNext", "var_name": "onNext"}, {"original_string": "final Consumer<? super Throwable> onError;", "modifier": "final", "type": "Consumer<? super Throwable>", "declarator": "onError", "var_name": "onError"}, {"original_string": "final Action onComplete;", "modifier": "final", "type": "Action", "declarator": "onComplete", "var_name": "onComplete"}, {"original_string": "final Consumer<? super Disposable> onSubscribe;", "modifier": "final", "type": "Consumer<? super Disposable>", "declarator": "onSubscribe", "var_name": "onSubscribe"}], "methods": [{"identifier": "LambdaObserver", "parameters": "(Consumer<? super T> onNext, Consumer<? super Throwable> onError,\n            Action onComplete,\n            Consumer<? super Disposable> onSubscribe)", "modifiers": "public", "return": "", "signature": " LambdaObserver(Consumer<? super T> onNext, Consumer<? super Throwable> onError,\n            Action onComplete,\n            Consumer<? super Disposable> onSubscribe)", "full_signature": "public  LambdaObserver(Consumer<? super T> onNext, Consumer<? super Throwable> onError,\n            Action onComplete,\n            Consumer<? super Disposable> onSubscribe)", "class_method_signature": "LambdaObserver.LambdaObserver(Consumer<? super T> onNext, Consumer<? super Throwable> onError,\n            Action onComplete,\n            Consumer<? super Disposable> onSubscribe)", "testcase": false, "constructor": true}, {"identifier": "onSubscribe", "parameters": "(Disposable s)", "modifiers": "@Override public", "return": "void", "signature": "void onSubscribe(Disposable s)", "full_signature": "@Override public void onSubscribe(Disposable s)", "class_method_signature": "LambdaObserver.onSubscribe(Disposable s)", "testcase": false, "constructor": false}, {"identifier": "onNext", "parameters": "(T t)", "modifiers": "@Override public", "return": "void", "signature": "void onNext(T t)", "full_signature": "@Override public void onNext(T t)", "class_method_signature": "LambdaObserver.onNext(T t)", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(Throwable t)", "modifiers": "@Override public", "return": "void", "signature": "void onError(Throwable t)", "full_signature": "@Override public void onError(Throwable t)", "class_method_signature": "LambdaObserver.onError(Throwable t)", "testcase": false, "constructor": false}, {"identifier": "onComplete", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onComplete()", "full_signature": "@Override public void onComplete()", "class_method_signature": "LambdaObserver.onComplete()", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "LambdaObserver.dispose()", "testcase": false, "constructor": false}, {"identifier": "isDisposed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDisposed()", "full_signature": "@Override public boolean isDisposed()", "class_method_signature": "LambdaObserver.isDisposed()", "testcase": false, "constructor": false}, {"identifier": "hasCustomOnError", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasCustomOnError()", "full_signature": "@Override public boolean hasCustomOnError()", "class_method_signature": "LambdaObserver.hasCustomOnError()", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/observers/LambdaObserver.java"}, "focal_method": {"identifier": "hasCustomOnError", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean hasCustomOnError() {\n        return onError != Functions.ON_ERROR_MISSING;\n    }", "signature": "boolean hasCustomOnError()", "full_signature": "@Override public boolean hasCustomOnError()", "class_method_signature": "LambdaObserver.hasCustomOnError()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}