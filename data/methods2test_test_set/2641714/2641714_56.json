{"test_class": {"identifier": "ImportAttributeModelTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int ATTRIBUTES_SIZE = 4;", "modifier": "private static final", "type": "int", "declarator": "ATTRIBUTES_SIZE = 4", "var_name": "ATTRIBUTES_SIZE"}, {"original_string": "private ImportAttributeModel model;", "modifier": "private", "type": "ImportAttributeModel", "declarator": "model", "var_name": "model"}], "file": "tiles-template/src/test/java/org/apache/tiles/template/ImportAttributeModelTest.java"}, "test_case": {"identifier": "testExecuteSingleNullAttributeValueException", "parameters": "()", "modifiers": "@Test(expected = NoSuchAttributeException.class) public", "return": "void", "body": "@Test(expected = NoSuchAttributeException.class)\n    public void testExecuteSingleNullAttributeValueException() {\n        TilesContainer container = createMock(TilesContainer.class);\n        Request request = createMock(Request.class);\n        AttributeContext attributeContext = createMock(AttributeContext.class);\n        Attribute attribute = new Attribute();\n        ApplicationContext applicationContext = createMock(ApplicationContext.class);\n        Map<String, Object> requestScope = new HashMap<String, Object>();\n        requestScope.put(TilesAccess.CURRENT_CONTAINER_ATTRIBUTE_NAME, container);\n\n        expect(request.getApplicationContext()).andReturn(applicationContext);\n        expect(request.getContext(\"request\")).andReturn(requestScope).anyTimes();\n        expect(container.getAttributeContext(request)).andReturn(attributeContext);\n        expect(attributeContext.getAttribute(\"myName\")).andReturn(attribute);\n        expect(container.evaluate(attribute, request)).andReturn(null);\n\n        replay(container, attributeContext, request, applicationContext);\n        try {\n            model.execute(\"myName\", \"request\", null, false, request);\n        } finally {\n            verify(container, attributeContext, request, applicationContext);\n        }\n    }", "signature": "void testExecuteSingleNullAttributeValueException()", "full_signature": "@Test(expected = NoSuchAttributeException.class) public void testExecuteSingleNullAttributeValueException()", "class_method_signature": "ImportAttributeModelTest.testExecuteSingleNullAttributeValueException()", "testcase": true, "constructor": false, "invocations": ["createMock", "createMock", "createMock", "createMock", "put", "andReturn", "expect", "getApplicationContext", "anyTimes", "andReturn", "expect", "getContext", "andReturn", "expect", "getAttributeContext", "andReturn", "expect", "getAttribute", "andReturn", "expect", "evaluate", "replay", "execute", "verify"]}, "focal_class": {"identifier": "ImportAttributeModel", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Logger log = LoggerFactory.getLogger(getClass());", "modifier": "private", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(getClass())", "var_name": "log"}], "methods": [{"identifier": "execute", "parameters": "(String name, String scope, String toName, boolean ignore, Request request)", "modifiers": "public", "return": "void", "signature": "void execute(String name, String scope, String toName, boolean ignore, Request request)", "full_signature": "public void execute(String name, String scope, String toName, boolean ignore, Request request)", "class_method_signature": "ImportAttributeModel.execute(String name, String scope, String toName, boolean ignore, Request request)", "testcase": false, "constructor": false}, {"identifier": "getImportedAttributes", "parameters": "(String name,\n            String toName, boolean ignore, Request request)", "modifiers": "private", "return": "Map<String, Object>", "signature": "Map<String, Object> getImportedAttributes(String name,\n            String toName, boolean ignore, Request request)", "full_signature": "private Map<String, Object> getImportedAttributes(String name,\n            String toName, boolean ignore, Request request)", "class_method_signature": "ImportAttributeModel.getImportedAttributes(String name,\n            String toName, boolean ignore, Request request)", "testcase": false, "constructor": false}, {"identifier": "importSingleAttribute", "parameters": "(TilesContainer container,\n            AttributeContext attributeContext, String name, String toName,\n            boolean ignore, Map<String, Object> attributes,\n            Request request)", "modifiers": "private", "return": "void", "signature": "void importSingleAttribute(TilesContainer container,\n            AttributeContext attributeContext, String name, String toName,\n            boolean ignore, Map<String, Object> attributes,\n            Request request)", "full_signature": "private void importSingleAttribute(TilesContainer container,\n            AttributeContext attributeContext, String name, String toName,\n            boolean ignore, Map<String, Object> attributes,\n            Request request)", "class_method_signature": "ImportAttributeModel.importSingleAttribute(TilesContainer container,\n            AttributeContext attributeContext, String name, String toName,\n            boolean ignore, Map<String, Object> attributes,\n            Request request)", "testcase": false, "constructor": false}, {"identifier": "importAttributes", "parameters": "(Collection<String> names,\n            TilesContainer container, AttributeContext attributeContext,\n            Map<String, Object> attributes, boolean ignore,\n            Request request)", "modifiers": "private", "return": "void", "signature": "void importAttributes(Collection<String> names,\n            TilesContainer container, AttributeContext attributeContext,\n            Map<String, Object> attributes, boolean ignore,\n            Request request)", "full_signature": "private void importAttributes(Collection<String> names,\n            TilesContainer container, AttributeContext attributeContext,\n            Map<String, Object> attributes, boolean ignore,\n            Request request)", "class_method_signature": "ImportAttributeModel.importAttributes(Collection<String> names,\n            TilesContainer container, AttributeContext attributeContext,\n            Map<String, Object> attributes, boolean ignore,\n            Request request)", "testcase": false, "constructor": false}], "file": "tiles-template/src/main/java/org/apache/tiles/template/ImportAttributeModel.java"}, "focal_method": {"identifier": "execute", "parameters": "(String name, String scope, String toName, boolean ignore, Request request)", "modifiers": "public", "return": "void", "body": "public void execute(String name, String scope, String toName, boolean ignore, Request request) {\n        Map<String, Object> attributes = getImportedAttributes(\n                name, toName, ignore, request);\n        if (scope == null) {\n            scope = request.getAvailableScopes().get(0);\n        }\n        request.getContext(scope).putAll(attributes);\n    }", "signature": "void execute(String name, String scope, String toName, boolean ignore, Request request)", "full_signature": "public void execute(String name, String scope, String toName, boolean ignore, Request request)", "class_method_signature": "ImportAttributeModel.execute(String name, String scope, String toName, boolean ignore, Request request)", "testcase": false, "constructor": false, "invocations": ["getImportedAttributes", "get", "getAvailableScopes", "putAll", "getContext"]}, "repository": {"repo_id": 2641714, "url": "https://github.com/apache/tiles", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 99, "size": 12554, "license": "licensed"}}