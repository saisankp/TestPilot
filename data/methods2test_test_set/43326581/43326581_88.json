{"test_class": {"identifier": "CveSearchGuesserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CveSearchGuesser cveSearchGuesser;", "modifier": "private", "type": "CveSearchGuesser", "declarator": "cveSearchGuesser", "var_name": "cveSearchGuesser"}, {"original_string": "private CveSearchApiImpl cveSearchApi;", "modifier": "private", "type": "CveSearchApiImpl", "declarator": "cveSearchApi", "var_name": "cveSearchApi"}], "file": "backend/src/src-cvesearch/src/test/java/org/eclipse/sw360/cvesearch/datasource/CveSearchGuesserTest.java"}, "test_case": {"identifier": "guessProductTestMavenFullMatch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void guessProductTestMavenFullMatch() throws Exception {\n        String apache = \"apache\";\n        String maven  = \"maven\";\n\n        String result2 = this.cveSearchGuesser.guessProducts(apache,maven).get(0).getNeedle();\n        assert(result2.equals(maven));\n    }", "signature": "void guessProductTestMavenFullMatch()", "full_signature": "@Test public void guessProductTestMavenFullMatch()", "class_method_signature": "CveSearchGuesserTest.guessProductTestMavenFullMatch()", "testcase": true, "constructor": false, "invocations": ["getNeedle", "get", "guessProducts", "equals"]}, "focal_class": {"identifier": "CveSearchGuesser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final CveSearchApi cveSearchApi;", "modifier": "private final", "type": "CveSearchApi", "declarator": "cveSearchApi", "var_name": "cveSearchApi"}, {"original_string": "private ListMatcher vendorMatcher;", "modifier": "private", "type": "ListMatcher", "declarator": "vendorMatcher", "var_name": "vendorMatcher"}, {"original_string": "private Map<String,ListMatcher> productMatchers;", "modifier": "private", "type": "Map<String,ListMatcher>", "declarator": "productMatchers", "var_name": "productMatchers"}, {"original_string": "private int vendorThreshold = 0;", "modifier": "private", "type": "int", "declarator": "vendorThreshold = 0", "var_name": "vendorThreshold"}, {"original_string": "private int productThreshold = 0;", "modifier": "private", "type": "int", "declarator": "productThreshold = 0", "var_name": "productThreshold"}, {"original_string": "private int cutoff = Integer.MAX_VALUE;", "modifier": "private", "type": "int", "declarator": "cutoff = Integer.MAX_VALUE", "var_name": "cutoff"}, {"original_string": "Logger log = Logger.getLogger(CveSearchGuesser.class);", "modifier": "", "type": "Logger", "declarator": "log = Logger.getLogger(CveSearchGuesser.class)", "var_name": "log"}], "methods": [{"identifier": "CveSearchGuesser", "parameters": "(CveSearchApi cveSearchApi)", "modifiers": "public", "return": "", "signature": " CveSearchGuesser(CveSearchApi cveSearchApi)", "full_signature": "public  CveSearchGuesser(CveSearchApi cveSearchApi)", "class_method_signature": "CveSearchGuesser.CveSearchGuesser(CveSearchApi cveSearchApi)", "testcase": false, "constructor": true}, {"identifier": "setVendorThreshold", "parameters": "(int vendorThreshold)", "modifiers": "public", "return": "void", "signature": "void setVendorThreshold(int vendorThreshold)", "full_signature": "public void setVendorThreshold(int vendorThreshold)", "class_method_signature": "CveSearchGuesser.setVendorThreshold(int vendorThreshold)", "testcase": false, "constructor": false}, {"identifier": "setProductThreshold", "parameters": "(int productThreshold)", "modifiers": "public", "return": "void", "signature": "void setProductThreshold(int productThreshold)", "full_signature": "public void setProductThreshold(int productThreshold)", "class_method_signature": "CveSearchGuesser.setProductThreshold(int productThreshold)", "testcase": false, "constructor": false}, {"identifier": "setCutoff", "parameters": "(int cutoff)", "modifiers": "public", "return": "void", "signature": "void setCutoff(int cutoff)", "full_signature": "public void setCutoff(int cutoff)", "class_method_signature": "CveSearchGuesser.setCutoff(int cutoff)", "testcase": false, "constructor": false}, {"identifier": "addVendorGuesserIfNeeded", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean addVendorGuesserIfNeeded()", "full_signature": "public boolean addVendorGuesserIfNeeded()", "class_method_signature": "CveSearchGuesser.addVendorGuesserIfNeeded()", "testcase": false, "constructor": false}, {"identifier": "addProductGuesserIfNeeded", "parameters": "(String vendor)", "modifiers": "public", "return": "boolean", "signature": "boolean addProductGuesserIfNeeded(String vendor)", "full_signature": "public boolean addProductGuesserIfNeeded(String vendor)", "class_method_signature": "CveSearchGuesser.addProductGuesserIfNeeded(String vendor)", "testcase": false, "constructor": false}, {"identifier": "getBest", "parameters": "(List<Match> matches, int threshold)", "modifiers": "public", "return": "List<Match>", "signature": "List<Match> getBest(List<Match> matches, int threshold)", "full_signature": "public List<Match> getBest(List<Match> matches, int threshold)", "class_method_signature": "CveSearchGuesser.getBest(List<Match> matches, int threshold)", "testcase": false, "constructor": false}, {"identifier": "guessVendors", "parameters": "(String vendorHaystack)", "modifiers": "public", "return": "List<Match>", "signature": "List<Match> guessVendors(String vendorHaystack)", "full_signature": "public List<Match> guessVendors(String vendorHaystack)", "class_method_signature": "CveSearchGuesser.guessVendors(String vendorHaystack)", "testcase": false, "constructor": false}, {"identifier": "guessProducts", "parameters": "(String vendor, String productHaystack)", "modifiers": "public", "return": "List<Match>", "signature": "List<Match> guessProducts(String vendor, String productHaystack)", "full_signature": "public List<Match> guessProducts(String vendor, String productHaystack)", "class_method_signature": "CveSearchGuesser.guessProducts(String vendor, String productHaystack)", "testcase": false, "constructor": false}, {"identifier": "guessVendorAndProducts", "parameters": "(String haystack)", "modifiers": "public", "return": "List<Match>", "signature": "List<Match> guessVendorAndProducts(String haystack)", "full_signature": "public List<Match> guessVendorAndProducts(String haystack)", "class_method_signature": "CveSearchGuesser.guessVendorAndProducts(String haystack)", "testcase": false, "constructor": false}, {"identifier": "guessVendorAndProducts", "parameters": "(String vendorHaystack, String productHaystack)", "modifiers": "public", "return": "List<Match>", "signature": "List<Match> guessVendorAndProducts(String vendorHaystack, String productHaystack)", "full_signature": "public List<Match> guessVendorAndProducts(String vendorHaystack, String productHaystack)", "class_method_signature": "CveSearchGuesser.guessVendorAndProducts(String vendorHaystack, String productHaystack)", "testcase": false, "constructor": false}], "file": "backend/src/src-cvesearch/src/main/java/org/eclipse/sw360/cvesearch/datasource/CveSearchGuesser.java"}, "focal_method": {"identifier": "guessProducts", "parameters": "(String vendor, String productHaystack)", "modifiers": "public", "return": "List<Match>", "body": "public List<Match> guessProducts(String vendor, String productHaystack) throws IOException {\n        if (!addProductGuesserIfNeeded(vendor)) {\n            throw new IOException(\"Was not able to instantiate product guesser for vendor \" + vendor);\n        }\n        return getBest(productMatchers.get(vendor).getMatches(productHaystack), productThreshold);\n    }", "signature": "List<Match> guessProducts(String vendor, String productHaystack)", "full_signature": "public List<Match> guessProducts(String vendor, String productHaystack)", "class_method_signature": "CveSearchGuesser.guessProducts(String vendor, String productHaystack)", "testcase": false, "constructor": false, "invocations": ["addProductGuesserIfNeeded", "getBest", "getMatches", "get"]}, "repository": {"repo_id": 43326581, "url": "https://github.com/sw360/sw360portal", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 31, "size": 8770, "license": "licensed"}}