{"test_class": {"identifier": "EtcdServiceDiscoveryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static EtcdServiceDiscovery etcdServiceDiscovery;", "modifier": "static", "type": "EtcdServiceDiscovery", "declarator": "etcdServiceDiscovery", "var_name": "etcdServiceDiscovery"}], "file": "dubbo-registry/dubbo-registry-etcd3/src/test/java/org/apache/dubbo/registry/etcd/EtcdServiceDiscoveryTest.java"}, "test_case": {"identifier": "testGetInstances", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetInstances() throws Exception {\n        String serviceName = \"EtcdTest77Service\";\n        Assertions.assertTrue(etcdServiceDiscovery.getInstances(serviceName).isEmpty());\n        etcdServiceDiscovery.register(new DefaultServiceInstance(valueOf(System.nanoTime()), serviceName, \"127.0.0.1\", 8080));\n        etcdServiceDiscovery.register(new DefaultServiceInstance(valueOf(System.nanoTime()), serviceName, \"127.0.0.1\", 9809));\n        Assertions.assertFalse(etcdServiceDiscovery.getInstances(serviceName).isEmpty());\n        List<String> r = convertToIpPort(etcdServiceDiscovery.getInstances(serviceName));\n        Assertions.assertTrue(r.contains(\"127.0.0.1:8080\"));\n        Assertions.assertTrue(r.contains(\"127.0.0.1:9809\"));\n    }", "signature": "void testGetInstances()", "full_signature": "@Test public void testGetInstances()", "class_method_signature": "EtcdServiceDiscoveryTest.testGetInstances()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isEmpty", "getInstances", "register", "valueOf", "nanoTime", "register", "valueOf", "nanoTime", "assertFalse", "isEmpty", "getInstances", "convertToIpPort", "getInstances", "assertTrue", "contains", "assertTrue", "contains"]}, "focal_class": {"identifier": "EtcdServiceDiscovery", "superclass": "extends AbstractServiceDiscovery", "interfaces": "implements EventListener<ServiceInstancesChangedEvent>", "fields": [{"original_string": "private final static Logger logger = LoggerFactory.getLogger(EtcdServiceDiscovery.class);", "modifier": "private final static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(EtcdServiceDiscovery.class)", "var_name": "logger"}, {"original_string": "private final String root = \"/services\";", "modifier": "private final", "type": "String", "declarator": "root = \"/services\"", "var_name": "root"}, {"original_string": "private final Set<String> services = new ConcurrentHashSet<>();", "modifier": "private final", "type": "Set<String>", "declarator": "services = new ConcurrentHashSet<>()", "var_name": "services"}, {"original_string": "private final Map<String, ChildListener> childListenerMap = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<String, ChildListener>", "declarator": "childListenerMap = new ConcurrentHashMap<>()", "var_name": "childListenerMap"}, {"original_string": "EtcdClient etcdClient;", "modifier": "", "type": "EtcdClient", "declarator": "etcdClient", "var_name": "etcdClient"}, {"original_string": "EventDispatcher dispatcher;", "modifier": "", "type": "EventDispatcher", "declarator": "dispatcher", "var_name": "dispatcher"}, {"original_string": "ServiceInstance serviceInstance;", "modifier": "", "type": "ServiceInstance", "declarator": "serviceInstance", "var_name": "serviceInstance"}], "methods": [{"identifier": "onEvent", "parameters": "(ServiceInstancesChangedEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void onEvent(ServiceInstancesChangedEvent event)", "full_signature": "@Override public void onEvent(ServiceInstancesChangedEvent event)", "class_method_signature": "EtcdServiceDiscovery.onEvent(ServiceInstancesChangedEvent event)", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "(URL registryURL)", "modifiers": "@Override public", "return": "void", "signature": "void initialize(URL registryURL)", "full_signature": "@Override public void initialize(URL registryURL)", "class_method_signature": "EtcdServiceDiscovery.initialize(URL registryURL)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "EtcdServiceDiscovery.destroy()", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(ServiceInstance serviceInstance)", "modifiers": "@Override public", "return": "void", "signature": "void register(ServiceInstance serviceInstance)", "full_signature": "@Override public void register(ServiceInstance serviceInstance)", "class_method_signature": "EtcdServiceDiscovery.register(ServiceInstance serviceInstance)", "testcase": false, "constructor": false}, {"identifier": "toPath", "parameters": "(ServiceInstance serviceInstance)", "modifiers": "", "return": "String", "signature": "String toPath(ServiceInstance serviceInstance)", "full_signature": " String toPath(ServiceInstance serviceInstance)", "class_method_signature": "EtcdServiceDiscovery.toPath(ServiceInstance serviceInstance)", "testcase": false, "constructor": false}, {"identifier": "toParentPath", "parameters": "(String serviceName)", "modifiers": "", "return": "String", "signature": "String toParentPath(String serviceName)", "full_signature": " String toParentPath(String serviceName)", "class_method_signature": "EtcdServiceDiscovery.toParentPath(String serviceName)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(ServiceInstance serviceInstance)", "modifiers": "@Override public", "return": "void", "signature": "void update(ServiceInstance serviceInstance)", "full_signature": "@Override public void update(ServiceInstance serviceInstance)", "class_method_signature": "EtcdServiceDiscovery.update(ServiceInstance serviceInstance)", "testcase": false, "constructor": false}, {"identifier": "unregister", "parameters": "(ServiceInstance serviceInstance)", "modifiers": "@Override public", "return": "void", "signature": "void unregister(ServiceInstance serviceInstance)", "full_signature": "@Override public void unregister(ServiceInstance serviceInstance)", "class_method_signature": "EtcdServiceDiscovery.unregister(ServiceInstance serviceInstance)", "testcase": false, "constructor": false}, {"identifier": "getServices", "parameters": "()", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> getServices()", "full_signature": "@Override public Set<String> getServices()", "class_method_signature": "EtcdServiceDiscovery.getServices()", "testcase": false, "constructor": false}, {"identifier": "addServiceInstancesChangedListener", "parameters": "(ServiceInstancesChangedListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void addServiceInstancesChangedListener(ServiceInstancesChangedListener listener)", "full_signature": "@Override public void addServiceInstancesChangedListener(ServiceInstancesChangedListener listener)", "class_method_signature": "EtcdServiceDiscovery.addServiceInstancesChangedListener(ServiceInstancesChangedListener listener)", "testcase": false, "constructor": false}, {"identifier": "getInstances", "parameters": "(String serviceName)", "modifiers": "@Override public", "return": "List<ServiceInstance>", "signature": "List<ServiceInstance> getInstances(String serviceName)", "full_signature": "@Override public List<ServiceInstance> getInstances(String serviceName)", "class_method_signature": "EtcdServiceDiscovery.getInstances(String serviceName)", "testcase": false, "constructor": false}, {"identifier": "registerServiceWatcher", "parameters": "(String serviceName)", "modifiers": "protected", "return": "void", "signature": "void registerServiceWatcher(String serviceName)", "full_signature": "protected void registerServiceWatcher(String serviceName)", "class_method_signature": "EtcdServiceDiscovery.registerServiceWatcher(String serviceName)", "testcase": false, "constructor": false}, {"identifier": "recover", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void recover()", "full_signature": "private void recover()", "class_method_signature": "EtcdServiceDiscovery.recover()", "testcase": false, "constructor": false}], "file": "dubbo-registry/dubbo-registry-etcd3/src/main/java/org/apache/dubbo/registry/etcd/EtcdServiceDiscovery.java"}, "focal_method": {"identifier": "getInstances", "parameters": "(String serviceName)", "modifiers": "@Override public", "return": "List<ServiceInstance>", "body": "@Override\n    public List<ServiceInstance> getInstances(String serviceName) {\n        List<String> children = etcdClient.getChildren(toParentPath(serviceName));\n        if (CollectionUtils.isEmpty(children)) {\n            return Collections.EMPTY_LIST;\n        }\n        List<ServiceInstance> list = new ArrayList<>(children.size());\n        for (String child : children) {\n            ServiceInstance serviceInstance = new Gson().fromJson(etcdClient.getKVValue(child), DefaultServiceInstance.class);\n            list.add(serviceInstance);\n        }\n        return list;\n    }", "signature": "List<ServiceInstance> getInstances(String serviceName)", "full_signature": "@Override public List<ServiceInstance> getInstances(String serviceName)", "class_method_signature": "EtcdServiceDiscovery.getInstances(String serviceName)", "testcase": false, "constructor": false, "invocations": ["getChildren", "toParentPath", "isEmpty", "size", "fromJson", "getKVValue", "add"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}