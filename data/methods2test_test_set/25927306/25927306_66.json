{"test_class": {"identifier": "GeneralizedTimeValueTranscoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final GeneralizedTimeValueTranscoder transcoder = new GeneralizedTimeValueTranscoder();", "modifier": "private final", "type": "GeneralizedTimeValueTranscoder", "declarator": "transcoder = new GeneralizedTimeValueTranscoder()", "var_name": "transcoder"}], "file": "core/src/test/java/org/ldaptive/transcode/GeneralizedTimeValueTranscoderTest.java"}, "test_case": {"identifier": "testInvalid", "parameters": "(final String generalizedTime)", "modifiers": "@Test(groups = \"transcode\", dataProvider = \"invalid\") public", "return": "void", "body": "@Test(groups = \"transcode\", dataProvider = \"invalid\")\n  public void testInvalid(final String generalizedTime)\n    throws Exception\n  {\n    try {\n      transcoder.decodeStringValue(generalizedTime);\n      Assert.fail(\"Should have thrown exception\");\n    } catch (Exception e) {\n      Assert.assertEquals(e.getClass(), IllegalArgumentException.class);\n    }\n  }", "signature": "void testInvalid(final String generalizedTime)", "full_signature": "@Test(groups = \"transcode\", dataProvider = \"invalid\") public void testInvalid(final String generalizedTime)", "class_method_signature": "GeneralizedTimeValueTranscoderTest.testInvalid(final String generalizedTime)", "testcase": true, "constructor": false, "invocations": ["decodeStringValue", "fail", "assertEquals", "getClass"]}, "focal_class": {"identifier": "GeneralizedTimeValueTranscoder", "superclass": "extends AbstractStringValueTranscoder<ZonedDateTime>", "interfaces": "", "fields": [{"original_string": "private static final String YEAR_PATTERN = \"(\\\\d{4})\";", "modifier": "private static final", "type": "String", "declarator": "YEAR_PATTERN = \"(\\\\d{4})\"", "var_name": "YEAR_PATTERN"}, {"original_string": "private static final String MONTH_PATTERN = \"((?:\\\\x30[\\\\x31-\\\\x39])|(?:\\\\x31[\\\\x30-\\\\x32]))\";", "modifier": "private static final", "type": "String", "declarator": "MONTH_PATTERN = \"((?:\\\\x30[\\\\x31-\\\\x39])|(?:\\\\x31[\\\\x30-\\\\x32]))\"", "var_name": "MONTH_PATTERN"}, {"original_string": "private static final String DAY_PATTERN = \"((?:\\\\x30[\\\\x31-\\\\x39])\" +\n    \"|(?:[\\\\x31-\\\\x32][\\\\x30-\\\\x39])\" +\n    \"|(?:\\\\x33[\\\\x30-\\\\x31]))\";", "modifier": "private static final", "type": "String", "declarator": "DAY_PATTERN = \"((?:\\\\x30[\\\\x31-\\\\x39])\" +\n    \"|(?:[\\\\x31-\\\\x32][\\\\x30-\\\\x39])\" +\n    \"|(?:\\\\x33[\\\\x30-\\\\x31]))\"", "var_name": "DAY_PATTERN"}, {"original_string": "private static final String HOUR_PATTERN = \"((?:[\\\\x30-\\\\x31][\\\\x30-\\\\x39])|(?:\\\\x32[\\\\x30-\\\\x33]))\";", "modifier": "private static final", "type": "String", "declarator": "HOUR_PATTERN = \"((?:[\\\\x30-\\\\x31][\\\\x30-\\\\x39])|(?:\\\\x32[\\\\x30-\\\\x33]))\"", "var_name": "HOUR_PATTERN"}, {"original_string": "private static final String MIN_PATTERN = \"([\\\\x30-\\\\x35][\\\\x30-\\\\x39])?\";", "modifier": "private static final", "type": "String", "declarator": "MIN_PATTERN = \"([\\\\x30-\\\\x35][\\\\x30-\\\\x39])?\"", "var_name": "MIN_PATTERN"}, {"original_string": "private static final String SECOND_PATTERN = \"([\\\\x30-\\\\x35][\\\\x30-\\\\x39])?\";", "modifier": "private static final", "type": "String", "declarator": "SECOND_PATTERN = \"([\\\\x30-\\\\x35][\\\\x30-\\\\x39])?\"", "var_name": "SECOND_PATTERN"}, {"original_string": "private static final String FRACTION_PATTERN = \"([,.](\\\\d+))?\";", "modifier": "private static final", "type": "String", "declarator": "FRACTION_PATTERN = \"([,.](\\\\d+))?\"", "var_name": "FRACTION_PATTERN"}, {"original_string": "private static final String TIMEZONE_PATTERN = \"(Z|(?:[+-]\" + HOUR_PATTERN + MIN_PATTERN + \"))\";", "modifier": "private static final", "type": "String", "declarator": "TIMEZONE_PATTERN = \"(Z|(?:[+-]\" + HOUR_PATTERN + MIN_PATTERN + \"))\"", "var_name": "TIMEZONE_PATTERN"}, {"original_string": "private static final Pattern TIME_REGEX = Pattern.compile(\n    YEAR_PATTERN + MONTH_PATTERN + DAY_PATTERN + HOUR_PATTERN + MIN_PATTERN + SECOND_PATTERN + FRACTION_PATTERN +\n    TIMEZONE_PATTERN);", "modifier": "private static final", "type": "Pattern", "declarator": "TIME_REGEX = Pattern.compile(\n    YEAR_PATTERN + MONTH_PATTERN + DAY_PATTERN + HOUR_PATTERN + MIN_PATTERN + SECOND_PATTERN + FRACTION_PATTERN +\n    TIMEZONE_PATTERN)", "var_name": "TIME_REGEX"}, {"original_string": "private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern(\"yyyyMMddHHmmss.SSS'Z'\");", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "DATE_FORMAT = DateTimeFormatter.ofPattern(\"yyyyMMddHHmmss.SSS'Z'\")", "var_name": "DATE_FORMAT"}], "methods": [{"identifier": "decodeStringValue", "parameters": "(final String value)", "modifiers": "@Override public", "return": "ZonedDateTime", "signature": "ZonedDateTime decodeStringValue(final String value)", "full_signature": "@Override public ZonedDateTime decodeStringValue(final String value)", "class_method_signature": "GeneralizedTimeValueTranscoder.decodeStringValue(final String value)", "testcase": false, "constructor": false}, {"identifier": "encodeStringValue", "parameters": "(final ZonedDateTime value)", "modifiers": "@Override public", "return": "String", "signature": "String encodeStringValue(final ZonedDateTime value)", "full_signature": "@Override public String encodeStringValue(final ZonedDateTime value)", "class_method_signature": "GeneralizedTimeValueTranscoder.encodeStringValue(final ZonedDateTime value)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "@Override public", "return": "Class<ZonedDateTime>", "signature": "Class<ZonedDateTime> getType()", "full_signature": "@Override public Class<ZonedDateTime> getType()", "class_method_signature": "GeneralizedTimeValueTranscoder.getType()", "testcase": false, "constructor": false}, {"identifier": "parseGeneralizedTime", "parameters": "(final String value)", "modifiers": "protected", "return": "ZonedDateTime", "signature": "ZonedDateTime parseGeneralizedTime(final String value)", "full_signature": "protected ZonedDateTime parseGeneralizedTime(final String value)", "class_method_signature": "GeneralizedTimeValueTranscoder.parseGeneralizedTime(final String value)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/ldaptive/transcode/GeneralizedTimeValueTranscoder.java"}, "focal_method": {"identifier": "decodeStringValue", "parameters": "(final String value)", "modifiers": "@Override public", "return": "ZonedDateTime", "body": "@Override\n  public ZonedDateTime decodeStringValue(final String value)\n  {\n    try {\n      return parseGeneralizedTime(value);\n    } catch (ParseException | DateTimeException e) {\n      throw new IllegalArgumentException(e);\n    }\n  }", "signature": "ZonedDateTime decodeStringValue(final String value)", "full_signature": "@Override public ZonedDateTime decodeStringValue(final String value)", "class_method_signature": "GeneralizedTimeValueTranscoder.decodeStringValue(final String value)", "testcase": false, "constructor": false, "invocations": ["parseGeneralizedTime"]}, "repository": {"repo_id": 25927306, "url": "https://github.com/vt-middleware/ldaptive", "stars": 32, "created": "10/29/2014 3:27:31 PM +00:00", "updates": "2020-01-14T22:18:12+00:00", "fork": "False", "license": "licensed"}}