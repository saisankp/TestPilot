{"test_class": {"identifier": "DateTimeColumnTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DateTimeColumn column1;", "modifier": "private", "type": "DateTimeColumn", "declarator": "column1", "var_name": "column1"}], "file": "core/src/test/java/tech/tablesaw/api/DateTimeColumnTest.java"}, "test_case": {"identifier": "testCountUnique", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCountUnique() {\n    column1.append(LocalDateTime.of(2000, 1, 1, 0, 0));\n    column1.append(LocalDateTime.of(2000, 1, 1, 0, 0));\n    column1.append(LocalDateTime.of(2000, 2, 1, 0, 0));\n    column1.appendMissing();\n\n    assertEquals(3, column1.countUnique());\n  }", "signature": "void testCountUnique()", "full_signature": "@Test public void testCountUnique()", "class_method_signature": "DateTimeColumnTest.testCountUnique()", "testcase": true, "constructor": false, "invocations": ["append", "of", "append", "of", "append", "of", "appendMissing", "assertEquals", "countUnique"]}, "focal_class": {"identifier": "DateTimeColumn", "superclass": "extends AbstractColumn<DateTimeColumn, LocalDateTime>", "interfaces": "implements DateTimeMapFunctions,\n        DateTimeFilters,\n        TemporalFillers<LocalDateTime, DateTimeColumn>,\n        CategoricalColumn<LocalDateTime>", "fields": [{"original_string": "private LongArrayList data;", "modifier": "private", "type": "LongArrayList", "declarator": "data", "var_name": "data"}, {"original_string": "private final IntComparator comparator =\n      (r1, r2) -> {\n        long f1 = getPackedDateTime(r1);\n        long f2 = getPackedDateTime(r2);\n        return Long.compare(f1, f2);\n      };", "modifier": "private final", "type": "IntComparator", "declarator": "comparator =\n      (r1, r2) -> {\n        long f1 = getPackedDateTime(r1);\n        long f2 = getPackedDateTime(r2);\n        return Long.compare(f1, f2);\n      }", "var_name": "comparator"}, {"original_string": "private DateTimeColumnFormatter printFormatter = new DateTimeColumnFormatter();", "modifier": "private", "type": "DateTimeColumnFormatter", "declarator": "printFormatter = new DateTimeColumnFormatter()", "var_name": "printFormatter"}], "methods": [{"identifier": "DateTimeColumn", "parameters": "(String name, LongArrayList data)", "modifiers": "private", "return": "", "signature": " DateTimeColumn(String name, LongArrayList data)", "full_signature": "private  DateTimeColumn(String name, LongArrayList data)", "class_method_signature": "DateTimeColumn.DateTimeColumn(String name, LongArrayList data)", "testcase": false, "constructor": true}, {"identifier": "createInternal", "parameters": "(String name, long[] longs)", "modifiers": "public static", "return": "DateTimeColumn", "signature": "DateTimeColumn createInternal(String name, long[] longs)", "full_signature": "public static DateTimeColumn createInternal(String name, long[] longs)", "class_method_signature": "DateTimeColumn.createInternal(String name, long[] longs)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String name)", "modifiers": "public static", "return": "DateTimeColumn", "signature": "DateTimeColumn create(String name)", "full_signature": "public static DateTimeColumn create(String name)", "class_method_signature": "DateTimeColumn.create(String name)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String name, int initialSize)", "modifiers": "public static", "return": "DateTimeColumn", "signature": "DateTimeColumn create(String name, int initialSize)", "full_signature": "public static DateTimeColumn create(String name, int initialSize)", "class_method_signature": "DateTimeColumn.create(String name, int initialSize)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String name, Collection<LocalDateTime> data)", "modifiers": "public static", "return": "DateTimeColumn", "signature": "DateTimeColumn create(String name, Collection<LocalDateTime> data)", "full_signature": "public static DateTimeColumn create(String name, Collection<LocalDateTime> data)", "class_method_signature": "DateTimeColumn.create(String name, Collection<LocalDateTime> data)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String name, Stream<LocalDateTime> stream)", "modifiers": "public static", "return": "DateTimeColumn", "signature": "DateTimeColumn create(String name, Stream<LocalDateTime> stream)", "full_signature": "public static DateTimeColumn create(String name, Stream<LocalDateTime> stream)", "class_method_signature": "DateTimeColumn.create(String name, Stream<LocalDateTime> stream)", "testcase": false, "constructor": false}, {"identifier": "plus", "parameters": "(long amountToAdd, ChronoUnit unit)", "modifiers": "@Override public", "return": "DateTimeColumn", "signature": "DateTimeColumn plus(long amountToAdd, ChronoUnit unit)", "full_signature": "@Override public DateTimeColumn plus(long amountToAdd, ChronoUnit unit)", "class_method_signature": "DateTimeColumn.plus(long amountToAdd, ChronoUnit unit)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String name, LocalDateTime... data)", "modifiers": "public static", "return": "DateTimeColumn", "signature": "DateTimeColumn create(String name, LocalDateTime... data)", "full_signature": "public static DateTimeColumn create(String name, LocalDateTime... data)", "class_method_signature": "DateTimeColumn.create(String name, LocalDateTime... data)", "testcase": false, "constructor": false}, {"identifier": "valueIsMissing", "parameters": "(long value)", "modifiers": "public static", "return": "boolean", "signature": "boolean valueIsMissing(long value)", "full_signature": "public static boolean valueIsMissing(long value)", "class_method_signature": "DateTimeColumn.valueIsMissing(long value)", "testcase": false, "constructor": false}, {"identifier": "isMissing", "parameters": "(int rowNumber)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isMissing(int rowNumber)", "full_signature": "@Override public boolean isMissing(int rowNumber)", "class_method_signature": "DateTimeColumn.isMissing(int rowNumber)", "testcase": false, "constructor": false}, {"identifier": "subset", "parameters": "(final int[] rows)", "modifiers": "@Override public", "return": "DateTimeColumn", "signature": "DateTimeColumn subset(final int[] rows)", "full_signature": "@Override public DateTimeColumn subset(final int[] rows)", "class_method_signature": "DateTimeColumn.subset(final int[] rows)", "testcase": false, "constructor": false}, {"identifier": "removeMissing", "parameters": "()", "modifiers": "@Override public", "return": "DateTimeColumn", "signature": "DateTimeColumn removeMissing()", "full_signature": "@Override public DateTimeColumn removeMissing()", "class_method_signature": "DateTimeColumn.removeMissing()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(LocalDateTime dateTime)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(LocalDateTime dateTime)", "full_signature": "@Override public boolean contains(LocalDateTime dateTime)", "class_method_signature": "DateTimeColumn.contains(LocalDateTime dateTime)", "testcase": false, "constructor": false}, {"identifier": "setMissing", "parameters": "(int i)", "modifiers": "@Override public", "return": "DateTimeColumn", "signature": "DateTimeColumn setMissing(int i)", "full_signature": "@Override public DateTimeColumn setMissing(int i)", "class_method_signature": "DateTimeColumn.setMissing(int i)", "testcase": false, "constructor": false}, {"identifier": "where", "parameters": "(Selection selection)", "modifiers": "public", "return": "DateTimeColumn", "signature": "DateTimeColumn where(Selection selection)", "full_signature": "public DateTimeColumn where(Selection selection)", "class_method_signature": "DateTimeColumn.where(Selection selection)", "testcase": false, "constructor": false}, {"identifier": "setPrintFormatter", "parameters": "(DateTimeFormatter dateTimeFormatter, String missingValueString)", "modifiers": "public", "return": "void", "signature": "void setPrintFormatter(DateTimeFormatter dateTimeFormatter, String missingValueString)", "full_signature": "public void setPrintFormatter(DateTimeFormatter dateTimeFormatter, String missingValueString)", "class_method_signature": "DateTimeColumn.setPrintFormatter(DateTimeFormatter dateTimeFormatter, String missingValueString)", "testcase": false, "constructor": false}, {"identifier": "setPrintFormatter", "parameters": "(DateTimeFormatter dateTimeFormatter)", "modifiers": "public", "return": "void", "signature": "void setPrintFormatter(DateTimeFormatter dateTimeFormatter)", "full_signature": "public void setPrintFormatter(DateTimeFormatter dateTimeFormatter)", "class_method_signature": "DateTimeColumn.setPrintFormatter(DateTimeFormatter dateTimeFormatter)", "testcase": false, "constructor": false}, {"identifier": "setPrintFormatter", "parameters": "(DateTimeColumnFormatter formatter)", "modifiers": "public", "return": "void", "signature": "void setPrintFormatter(DateTimeColumnFormatter formatter)", "full_signature": "public void setPrintFormatter(DateTimeColumnFormatter formatter)", "class_method_signature": "DateTimeColumn.setPrintFormatter(DateTimeColumnFormatter formatter)", "testcase": false, "constructor": false}, {"identifier": "lag", "parameters": "(int n)", "modifiers": "@Override public", "return": "DateTimeColumn", "signature": "DateTimeColumn lag(int n)", "full_signature": "@Override public DateTimeColumn lag(int n)", "class_method_signature": "DateTimeColumn.lag(int n)", "testcase": false, "constructor": false}, {"identifier": "appendCell", "parameters": "(String stringValue)", "modifiers": "@Override public", "return": "DateTimeColumn", "signature": "DateTimeColumn appendCell(String stringValue)", "full_signature": "@Override public DateTimeColumn appendCell(String stringValue)", "class_method_signature": "DateTimeColumn.appendCell(String stringValue)", "testcase": false, "constructor": false}, {"identifier": "appendCell", "parameters": "(String stringValue, AbstractColumnParser<?> parser)", "modifiers": "@Override public", "return": "DateTimeColumn", "signature": "DateTimeColumn appendCell(String stringValue, AbstractColumnParser<?> parser)", "full_signature": "@Override public DateTimeColumn appendCell(String stringValue, AbstractColumnParser<?> parser)", "class_method_signature": "DateTimeColumn.appendCell(String stringValue, AbstractColumnParser<?> parser)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(LocalDateTime dateTime)", "modifiers": "public", "return": "DateTimeColumn", "signature": "DateTimeColumn append(LocalDateTime dateTime)", "full_signature": "public DateTimeColumn append(LocalDateTime dateTime)", "class_method_signature": "DateTimeColumn.append(LocalDateTime dateTime)", "testcase": false, "constructor": false}, {"identifier": "appendObj", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "DateTimeColumn", "signature": "DateTimeColumn appendObj(Object obj)", "full_signature": "@Override public DateTimeColumn appendObj(Object obj)", "class_method_signature": "DateTimeColumn.appendObj(Object obj)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "DateTimeColumn.size()", "testcase": false, "constructor": false}, {"identifier": "appendInternal", "parameters": "(long dateTime)", "modifiers": "public", "return": "DateTimeColumn", "signature": "DateTimeColumn appendInternal(long dateTime)", "full_signature": "public DateTimeColumn appendInternal(long dateTime)", "class_method_signature": "DateTimeColumn.appendInternal(long dateTime)", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "(int row)", "modifiers": "@Override public", "return": "String", "signature": "String getString(int row)", "full_signature": "@Override public String getString(int row)", "class_method_signature": "DateTimeColumn.getString(int row)", "testcase": false, "constructor": false}, {"identifier": "getUnformattedString", "parameters": "(int row)", "modifiers": "@Override public", "return": "String", "signature": "String getUnformattedString(int row)", "full_signature": "@Override public String getUnformattedString(int row)", "class_method_signature": "DateTimeColumn.getUnformattedString(int row)", "testcase": false, "constructor": false}, {"identifier": "emptyCopy", "parameters": "()", "modifiers": "@Override public", "return": "DateTimeColumn", "signature": "DateTimeColumn emptyCopy()", "full_signature": "@Override public DateTimeColumn emptyCopy()", "class_method_signature": "DateTimeColumn.emptyCopy()", "testcase": false, "constructor": false}, {"identifier": "emptyCopy", "parameters": "(int rowSize)", "modifiers": "@Override public", "return": "DateTimeColumn", "signature": "DateTimeColumn emptyCopy(int rowSize)", "full_signature": "@Override public DateTimeColumn emptyCopy(int rowSize)", "class_method_signature": "DateTimeColumn.emptyCopy(int rowSize)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "()", "modifiers": "@Override public", "return": "DateTimeColumn", "signature": "DateTimeColumn copy()", "full_signature": "@Override public DateTimeColumn copy()", "class_method_signature": "DateTimeColumn.copy()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "DateTimeColumn.clear()", "testcase": false, "constructor": false}, {"identifier": "sortAscending", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void sortAscending()", "full_signature": "@Override public void sortAscending()", "class_method_signature": "DateTimeColumn.sortAscending()", "testcase": false, "constructor": false}, {"identifier": "sortDescending", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void sortDescending()", "full_signature": "@Override public void sortDescending()", "class_method_signature": "DateTimeColumn.sortDescending()", "testcase": false, "constructor": false}, {"identifier": "summary", "parameters": "()", "modifiers": "@Override public", "return": "Table", "signature": "Table summary()", "full_signature": "@Override public Table summary()", "class_method_signature": "DateTimeColumn.summary()", "testcase": false, "constructor": false}, {"identifier": "countUnique", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int countUnique()", "full_signature": "@Override public int countUnique()", "class_method_signature": "DateTimeColumn.countUnique()", "testcase": false, "constructor": false}, {"identifier": "unique", "parameters": "()", "modifiers": "@Override public", "return": "DateTimeColumn", "signature": "DateTimeColumn unique()", "full_signature": "@Override public DateTimeColumn unique()", "class_method_signature": "DateTimeColumn.unique()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "DateTimeColumn.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "getLongInternal", "parameters": "(int index)", "modifiers": "public", "return": "long", "signature": "long getLongInternal(int index)", "full_signature": "public long getLongInternal(int index)", "class_method_signature": "DateTimeColumn.getLongInternal(int index)", "testcase": false, "constructor": false}, {"identifier": "getPackedDateTime", "parameters": "(int index)", "modifiers": "protected", "return": "long", "signature": "long getPackedDateTime(int index)", "full_signature": "protected long getPackedDateTime(int index)", "class_method_signature": "DateTimeColumn.getPackedDateTime(int index)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(int index)", "modifiers": "public", "return": "LocalDateTime", "signature": "LocalDateTime get(int index)", "full_signature": "public LocalDateTime get(int index)", "class_method_signature": "DateTimeColumn.get(int index)", "testcase": false, "constructor": false}, {"identifier": "rowComparator", "parameters": "()", "modifiers": "@Override public", "return": "IntComparator", "signature": "IntComparator rowComparator()", "full_signature": "@Override public IntComparator rowComparator()", "class_method_signature": "DateTimeColumn.rowComparator()", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(Selection rowSelection, LocalDateTime newValue)", "modifiers": "@Override public", "return": "DateTimeColumn", "signature": "DateTimeColumn set(Selection rowSelection, LocalDateTime newValue)", "full_signature": "@Override public DateTimeColumn set(Selection rowSelection, LocalDateTime newValue)", "class_method_signature": "DateTimeColumn.set(Selection rowSelection, LocalDateTime newValue)", "testcase": false, "constructor": false}, {"identifier": "countMissing", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int countMissing()", "full_signature": "@Override public int countMissing()", "class_method_signature": "DateTimeColumn.countMissing()", "testcase": false, "constructor": false}, {"identifier": "asEpochSecondArray", "parameters": "()", "modifiers": "public", "return": "long[]", "signature": "long[] asEpochSecondArray()", "full_signature": "public long[] asEpochSecondArray()", "class_method_signature": "DateTimeColumn.asEpochSecondArray()", "testcase": false, "constructor": false}, {"identifier": "asEpochSecondArray", "parameters": "(ZoneOffset offset)", "modifiers": "public", "return": "long[]", "signature": "long[] asEpochSecondArray(ZoneOffset offset)", "full_signature": "public long[] asEpochSecondArray(ZoneOffset offset)", "class_method_signature": "DateTimeColumn.asEpochSecondArray(ZoneOffset offset)", "testcase": false, "constructor": false}, {"identifier": "asEpochMillisArray", "parameters": "()", "modifiers": "public", "return": "long[]", "signature": "long[] asEpochMillisArray()", "full_signature": "public long[] asEpochMillisArray()", "class_method_signature": "DateTimeColumn.asEpochMillisArray()", "testcase": false, "constructor": false}, {"identifier": "asEpochMillisArray", "parameters": "(ZoneOffset offset)", "modifiers": "public", "return": "long[]", "signature": "long[] asEpochMillisArray(ZoneOffset offset)", "full_signature": "public long[] asEpochMillisArray(ZoneOffset offset)", "class_method_signature": "DateTimeColumn.asEpochMillisArray(ZoneOffset offset)", "testcase": false, "constructor": false}, {"identifier": "asInstantColumn", "parameters": "()", "modifiers": "public", "return": "InstantColumn", "signature": "InstantColumn asInstantColumn()", "full_signature": "public InstantColumn asInstantColumn()", "class_method_signature": "DateTimeColumn.asInstantColumn()", "testcase": false, "constructor": false}, {"identifier": "asInstantColumn", "parameters": "(ZoneId zone)", "modifiers": "public", "return": "InstantColumn", "signature": "InstantColumn asInstantColumn(ZoneId zone)", "full_signature": "public InstantColumn asInstantColumn(ZoneId zone)", "class_method_signature": "DateTimeColumn.asInstantColumn(ZoneId zone)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(Column<LocalDateTime> column)", "modifiers": "@Override public", "return": "DateTimeColumn", "signature": "DateTimeColumn append(Column<LocalDateTime> column)", "full_signature": "@Override public DateTimeColumn append(Column<LocalDateTime> column)", "class_method_signature": "DateTimeColumn.append(Column<LocalDateTime> column)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(Column<LocalDateTime> column, int row)", "modifiers": "@Override public", "return": "DateTimeColumn", "signature": "DateTimeColumn append(Column<LocalDateTime> column, int row)", "full_signature": "@Override public DateTimeColumn append(Column<LocalDateTime> column, int row)", "class_method_signature": "DateTimeColumn.append(Column<LocalDateTime> column, int row)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int row, Column<LocalDateTime> column, int sourceRow)", "modifiers": "@Override public", "return": "DateTimeColumn", "signature": "DateTimeColumn set(int row, Column<LocalDateTime> column, int sourceRow)", "full_signature": "@Override public DateTimeColumn set(int row, Column<LocalDateTime> column, int sourceRow)", "class_method_signature": "DateTimeColumn.set(int row, Column<LocalDateTime> column, int sourceRow)", "testcase": false, "constructor": false}, {"identifier": "max", "parameters": "()", "modifiers": "public", "return": "LocalDateTime", "signature": "LocalDateTime max()", "full_signature": "public LocalDateTime max()", "class_method_signature": "DateTimeColumn.max()", "testcase": false, "constructor": false}, {"identifier": "appendMissing", "parameters": "()", "modifiers": "@Override public", "return": "DateTimeColumn", "signature": "DateTimeColumn appendMissing()", "full_signature": "@Override public DateTimeColumn appendMissing()", "class_method_signature": "DateTimeColumn.appendMissing()", "testcase": false, "constructor": false}, {"identifier": "min", "parameters": "()", "modifiers": "@Override public", "return": "LocalDateTime", "signature": "LocalDateTime min()", "full_signature": "@Override public LocalDateTime min()", "class_method_signature": "DateTimeColumn.min()", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int index, long value)", "modifiers": "public", "return": "DateTimeColumn", "signature": "DateTimeColumn set(int index, long value)", "full_signature": "public DateTimeColumn set(int index, long value)", "class_method_signature": "DateTimeColumn.set(int index, long value)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int index, LocalDateTime value)", "modifiers": "@Override public", "return": "DateTimeColumn", "signature": "DateTimeColumn set(int index, LocalDateTime value)", "full_signature": "@Override public DateTimeColumn set(int index, LocalDateTime value)", "class_method_signature": "DateTimeColumn.set(int index, LocalDateTime value)", "testcase": false, "constructor": false}, {"identifier": "top", "parameters": "(int n)", "modifiers": "public", "return": "List<LocalDateTime>", "signature": "List<LocalDateTime> top(int n)", "full_signature": "public List<LocalDateTime> top(int n)", "class_method_signature": "DateTimeColumn.top(int n)", "testcase": false, "constructor": false}, {"identifier": "bottom", "parameters": "(int n)", "modifiers": "public", "return": "List<LocalDateTime>", "signature": "List<LocalDateTime> bottom(int n)", "full_signature": "public List<LocalDateTime> bottom(int n)", "class_method_signature": "DateTimeColumn.bottom(int n)", "testcase": false, "constructor": false}, {"identifier": "longIterator", "parameters": "()", "modifiers": "public", "return": "LongIterator", "signature": "LongIterator longIterator()", "full_signature": "public LongIterator longIterator()", "class_method_signature": "DateTimeColumn.longIterator()", "testcase": false, "constructor": false}, {"identifier": "asSet", "parameters": "()", "modifiers": "public", "return": "Set<LocalDateTime>", "signature": "Set<LocalDateTime> asSet()", "full_signature": "public Set<LocalDateTime> asSet()", "class_method_signature": "DateTimeColumn.asSet()", "testcase": false, "constructor": false}, {"identifier": "byteSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int byteSize()", "full_signature": "public int byteSize()", "class_method_signature": "DateTimeColumn.byteSize()", "testcase": false, "constructor": false}, {"identifier": "asBytes", "parameters": "(int rowNumber)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] asBytes(int rowNumber)", "full_signature": "@Override public byte[] asBytes(int rowNumber)", "class_method_signature": "DateTimeColumn.asBytes(int rowNumber)", "testcase": false, "constructor": false}, {"identifier": "getDouble", "parameters": "(int i)", "modifiers": "public", "return": "double", "signature": "double getDouble(int i)", "full_signature": "public double getDouble(int i)", "class_method_signature": "DateTimeColumn.getDouble(int i)", "testcase": false, "constructor": false}, {"identifier": "asDoubleArray", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] asDoubleArray()", "full_signature": "public double[] asDoubleArray()", "class_method_signature": "DateTimeColumn.asDoubleArray()", "testcase": false, "constructor": false}, {"identifier": "asDoubleColumn", "parameters": "()", "modifiers": "public", "return": "DoubleColumn", "signature": "DoubleColumn asDoubleColumn()", "full_signature": "public DoubleColumn asDoubleColumn()", "class_method_signature": "DateTimeColumn.asDoubleColumn()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<LocalDateTime>", "signature": "Iterator<LocalDateTime> iterator()", "full_signature": "@Override public Iterator<LocalDateTime> iterator()", "class_method_signature": "DateTimeColumn.iterator()", "testcase": false, "constructor": false}, {"identifier": "fillWith", "parameters": "(\n      int count, Iterator<LocalDateTime> iterator, Consumer<LocalDateTime> acceptor)", "modifiers": "private", "return": "DateTimeColumn", "signature": "DateTimeColumn fillWith(\n      int count, Iterator<LocalDateTime> iterator, Consumer<LocalDateTime> acceptor)", "full_signature": "private DateTimeColumn fillWith(\n      int count, Iterator<LocalDateTime> iterator, Consumer<LocalDateTime> acceptor)", "class_method_signature": "DateTimeColumn.fillWith(\n      int count, Iterator<LocalDateTime> iterator, Consumer<LocalDateTime> acceptor)", "testcase": false, "constructor": false}, {"identifier": "fillWith", "parameters": "(Iterator<LocalDateTime> iterator)", "modifiers": "@Override public", "return": "DateTimeColumn", "signature": "DateTimeColumn fillWith(Iterator<LocalDateTime> iterator)", "full_signature": "@Override public DateTimeColumn fillWith(Iterator<LocalDateTime> iterator)", "class_method_signature": "DateTimeColumn.fillWith(Iterator<LocalDateTime> iterator)", "testcase": false, "constructor": false}, {"identifier": "fillWith", "parameters": "(\n      int count, Iterable<LocalDateTime> iterable, Consumer<LocalDateTime> acceptor)", "modifiers": "private", "return": "DateTimeColumn", "signature": "DateTimeColumn fillWith(\n      int count, Iterable<LocalDateTime> iterable, Consumer<LocalDateTime> acceptor)", "full_signature": "private DateTimeColumn fillWith(\n      int count, Iterable<LocalDateTime> iterable, Consumer<LocalDateTime> acceptor)", "class_method_signature": "DateTimeColumn.fillWith(\n      int count, Iterable<LocalDateTime> iterable, Consumer<LocalDateTime> acceptor)", "testcase": false, "constructor": false}, {"identifier": "fillWith", "parameters": "(Iterable<LocalDateTime> iterable)", "modifiers": "@Override public", "return": "DateTimeColumn", "signature": "DateTimeColumn fillWith(Iterable<LocalDateTime> iterable)", "full_signature": "@Override public DateTimeColumn fillWith(Iterable<LocalDateTime> iterable)", "class_method_signature": "DateTimeColumn.fillWith(Iterable<LocalDateTime> iterable)", "testcase": false, "constructor": false}, {"identifier": "fillWith", "parameters": "(\n      int count, Supplier<LocalDateTime> supplier, Consumer<LocalDateTime> acceptor)", "modifiers": "private", "return": "DateTimeColumn", "signature": "DateTimeColumn fillWith(\n      int count, Supplier<LocalDateTime> supplier, Consumer<LocalDateTime> acceptor)", "full_signature": "private DateTimeColumn fillWith(\n      int count, Supplier<LocalDateTime> supplier, Consumer<LocalDateTime> acceptor)", "class_method_signature": "DateTimeColumn.fillWith(\n      int count, Supplier<LocalDateTime> supplier, Consumer<LocalDateTime> acceptor)", "testcase": false, "constructor": false}, {"identifier": "fillWith", "parameters": "(Supplier<LocalDateTime> supplier)", "modifiers": "@Override public", "return": "DateTimeColumn", "signature": "DateTimeColumn fillWith(Supplier<LocalDateTime> supplier)", "full_signature": "@Override public DateTimeColumn fillWith(Supplier<LocalDateTime> supplier)", "class_method_signature": "DateTimeColumn.fillWith(Supplier<LocalDateTime> supplier)", "testcase": false, "constructor": false}, {"identifier": "asObjectArray", "parameters": "()", "modifiers": "@Override public", "return": "LocalDateTime[]", "signature": "LocalDateTime[] asObjectArray()", "full_signature": "@Override public LocalDateTime[] asObjectArray()", "class_method_signature": "DateTimeColumn.asObjectArray()", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(LocalDateTime o1, LocalDateTime o2)", "modifiers": "@Override public", "return": "int", "signature": "int compare(LocalDateTime o1, LocalDateTime o2)", "full_signature": "@Override public int compare(LocalDateTime o1, LocalDateTime o2)", "class_method_signature": "DateTimeColumn.compare(LocalDateTime o1, LocalDateTime o2)", "testcase": false, "constructor": false}], "file": "core/src/main/java/tech/tablesaw/api/DateTimeColumn.java"}, "focal_method": {"identifier": "countUnique", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n  public int countUnique() {\n    LongSet ints = new LongOpenHashSet(data.size());\n    for (long i : data) {\n      ints.add(i);\n    }\n    return ints.size();\n  }", "signature": "int countUnique()", "full_signature": "@Override public int countUnique()", "class_method_signature": "DateTimeColumn.countUnique()", "testcase": false, "constructor": false, "invocations": ["size", "add", "size"]}, "repository": {"repo_id": 48880766, "url": "https://github.com/jtablesaw/tablesaw", "stars": 2021, "created": "1/1/2016 2:58:28 PM +00:00", "updates": "2020-01-24T23:26:07+00:00", "fork": "False", "license": "licensed"}}