{"test_class": {"identifier": "MotorTest", "superclass": "", "interfaces": "implements Observer", "fields": [{"original_string": "private Motor motor = null;", "modifier": "private", "type": "Motor", "declarator": "motor = null", "var_name": "motor"}, {"original_string": "private boolean observed;", "modifier": "private", "type": "boolean", "declarator": "observed", "var_name": "observed"}], "file": "src/osip-model/src/test/java/edu/kit/pse/osip/core/model/base/MotorTest.java"}, "test_case": {"identifier": "testNegative", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void testNegative() {\n        motor.setRPM(-1);\n    }", "signature": "void testNegative()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testNegative()", "class_method_signature": "MotorTest.testNegative()", "testcase": true, "constructor": false, "invocations": ["setRPM"]}, "focal_class": {"identifier": "Motor", "superclass": "extends Observable", "interfaces": "", "fields": [{"original_string": "private int rpm;", "modifier": "private", "type": "int", "declarator": "rpm", "var_name": "rpm"}, {"original_string": "private int initialRpm;", "modifier": "private", "type": "int", "declarator": "initialRpm", "var_name": "initialRpm"}], "methods": [{"identifier": "Motor", "parameters": "(int initialRpm)", "modifiers": "public", "return": "", "signature": " Motor(int initialRpm)", "full_signature": "public  Motor(int initialRpm)", "class_method_signature": "Motor.Motor(int initialRpm)", "testcase": false, "constructor": true}, {"identifier": "setRPM", "parameters": "(int rpm)", "modifiers": "public synchronized", "return": "void", "signature": "void setRPM(int rpm)", "full_signature": "public synchronized void setRPM(int rpm)", "class_method_signature": "Motor.setRPM(int rpm)", "testcase": false, "constructor": false}, {"identifier": "getRPM", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRPM()", "full_signature": "public int getRPM()", "class_method_signature": "Motor.getRPM()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void reset()", "full_signature": "public synchronized void reset()", "class_method_signature": "Motor.reset()", "testcase": false, "constructor": false}], "file": "src/osip-model/src/main/java/edu/kit/pse/osip/core/model/base/Motor.java"}, "focal_method": {"identifier": "setRPM", "parameters": "(int rpm)", "modifiers": "public synchronized", "return": "void", "body": "public synchronized void setRPM(int rpm) {\n        if (rpm < 0 || rpm > SimulationConstants.MAX_MOTOR_SPEED) {\n            throw new IllegalArgumentException(\"Motor RPM needs to be in range 0 to 3000\");\n        }\n        this.rpm = rpm;\n        setChanged();\n        notifyObservers();\n    }", "signature": "void setRPM(int rpm)", "full_signature": "public synchronized void setRPM(int rpm)", "class_method_signature": "Motor.setRPM(int rpm)", "testcase": false, "constructor": false, "invocations": ["setChanged", "notifyObservers"]}, "repository": {"repo_id": 74042107, "url": "https://github.com/ByteHamster/PSE", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 18396, "license": "licensed"}}