{"test_class": {"identifier": "RankSorterTest", "superclass": "", "interfaces": "", "fields": [], "file": "jskill/src/test/java/jskills/RankSorterTest.java"}, "test_case": {"identifier": "sortUnsortedTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void sortUnsortedTest() {\n        List<String> people = Arrays.asList(\"Five\", \"Two1\", \"Two2\", \"One\", \"Four\");\n        int[] ranks = {5, 2, 2, 1, 4};\n        int[] sortedRanks = {1, 2, 2, 4, 5};\n\n        people = RankSorter.sort(people, ranks);\n\n        // assertEquals doesn't work on primitive arrays\n        // see http://code.google.com/p/testng/issues/detail?id=4\n        for (int i = 0; i < people.size(); i++) {\n            assertEquals(String.format(\"Different at index %d. Expected <%d>, was <%d>.\", i, sortedRanks[i], ranks[i]), ranks[i], sortedRanks[i]);\n        }\n        assertEquals(people, Arrays.asList(\"One\", \"Two1\", \"Two2\", \"Four\", \"Five\"));\n    }", "signature": "void sortUnsortedTest()", "full_signature": "@Test public void sortUnsortedTest()", "class_method_signature": "RankSorterTest.sortUnsortedTest()", "testcase": true, "constructor": false, "invocations": ["asList", "sort", "size", "assertEquals", "format", "assertEquals", "asList"]}, "focal_class": {"identifier": "RankSorter", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "sort", "parameters": "(Collection<T> items, int[] itemRanks)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> sort(Collection<T> items, int[] itemRanks)", "full_signature": "public static List<T> sort(Collection<T> items, int[] itemRanks)", "class_method_signature": "RankSorter.sort(Collection<T> items, int[] itemRanks)", "testcase": false, "constructor": false}], "file": "jskill/src/main/java/jskills/RankSorter.java"}, "focal_method": {"identifier": "sort", "parameters": "(Collection<T> items, int[] itemRanks)", "modifiers": "public static", "return": "List<T>", "body": "public static <T> List<T> sort(Collection<T> items, int[] itemRanks) {\n        Guard.argumentNotNull(items, \"items\");\n        Guard.argumentNotNull(itemRanks, \"itemRanks\");\n\n        int lastObserverdRank = 0;\n        boolean needToSort = false;\n\n        for (int currentRank : itemRanks) {\n            // We're expecting ranks to go up (e.g. 1, 2, 2, 3, ...)\n            // If it goes down, then we've got to sort it.\n            if (currentRank < lastObserverdRank) {\n                needToSort = true;\n                break;\n            }\n\n            lastObserverdRank = currentRank;\n        }\n\n        // Don't bother doing more work, it's already in a good order\n        if (!needToSort) return new ArrayList<T>(items);\n\n        // Get the existing items as an indexable list.\n        List<T> itemsInList = new ArrayList<T>(items);\n\n        // item -> rank\n        final Map<T, Integer> itemToRank = new HashMap<T, Integer>();\n        for (int i = 0; i < itemsInList.size(); i++)\n            itemToRank.put(itemsInList.get(i), itemRanks[i]);\n\n        Collections.sort(itemsInList, new Comparator<T>() {\n            public int compare(T o1, T o2) {\n                return itemToRank.get(o1).compareTo(itemToRank.get(o2));\n            }\n        });\n\n        Arrays.sort(itemRanks);\n        return itemsInList;\n    }", "signature": "List<T> sort(Collection<T> items, int[] itemRanks)", "full_signature": "public static List<T> sort(Collection<T> items, int[] itemRanks)", "class_method_signature": "RankSorter.sort(Collection<T> items, int[] itemRanks)", "testcase": false, "constructor": false, "invocations": ["argumentNotNull", "argumentNotNull", "size", "put", "get", "sort", "compareTo", "get", "get", "sort"]}, "repository": {"repo_id": 69645155, "url": "https://github.com/VoxelGamesLib/VoxelGamesLib", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 15, "size": 15703, "license": "licensed"}}