{"test_class": {"identifier": "DurationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Duration duration;", "modifier": "private", "type": "Duration", "declarator": "duration", "var_name": "duration"}], "file": "modeshape-common/src/test/java/org/modeshape/common/math/DurationTest.java"}, "test_case": {"identifier": "shouldHaveComponentsWhenInitialized", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldHaveComponentsWhenInitialized() {\n        assertNotNull(this.duration.getComponents());\n    }", "signature": "void shouldHaveComponentsWhenInitialized()", "full_signature": "@Test public void shouldHaveComponentsWhenInitialized()", "class_method_signature": "DurationTest.shouldHaveComponentsWhenInitialized()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "getComponents"]}, "focal_class": {"identifier": "Duration", "superclass": "extends Number", "interfaces": "implements Comparable<Duration>", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private final long durationInNanos;", "modifier": "private final", "type": "long", "declarator": "durationInNanos", "var_name": "durationInNanos"}, {"original_string": "private Components components;", "modifier": "private", "type": "Components", "declarator": "components", "var_name": "components"}], "methods": [{"identifier": "Duration", "parameters": "( long nanos )", "modifiers": "public", "return": "", "signature": " Duration( long nanos )", "full_signature": "public  Duration( long nanos )", "class_method_signature": "Duration.Duration( long nanos )", "testcase": false, "constructor": true}, {"identifier": "Duration", "parameters": "( long duration,\n                     TimeUnit unit )", "modifiers": "public", "return": "", "signature": " Duration( long duration,\n                     TimeUnit unit )", "full_signature": "public  Duration( long duration,\n                     TimeUnit unit )", "class_method_signature": "Duration.Duration( long duration,\n                     TimeUnit unit )", "testcase": false, "constructor": true}, {"identifier": "doubleValue", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double doubleValue()", "full_signature": "@Override public double doubleValue()", "class_method_signature": "Duration.doubleValue()", "testcase": false, "constructor": false}, {"identifier": "floatValue", "parameters": "()", "modifiers": "@Override public", "return": "float", "signature": "float floatValue()", "full_signature": "@Override public float floatValue()", "class_method_signature": "Duration.floatValue()", "testcase": false, "constructor": false}, {"identifier": "intValue", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int intValue()", "full_signature": "@Override public int intValue()", "class_method_signature": "Duration.intValue()", "testcase": false, "constructor": false}, {"identifier": "longValue", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long longValue()", "full_signature": "@Override public long longValue()", "class_method_signature": "Duration.longValue()", "testcase": false, "constructor": false}, {"identifier": "toBigDecimal", "parameters": "()", "modifiers": "public", "return": "BigDecimal", "signature": "BigDecimal toBigDecimal()", "full_signature": "public BigDecimal toBigDecimal()", "class_method_signature": "Duration.toBigDecimal()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "( long duration,\n                         TimeUnit unit )", "modifiers": "public", "return": "Duration", "signature": "Duration add( long duration,\n                         TimeUnit unit )", "full_signature": "public Duration add( long duration,\n                         TimeUnit unit )", "class_method_signature": "Duration.add( long duration,\n                         TimeUnit unit )", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "( long duration,\n                              TimeUnit unit )", "modifiers": "public", "return": "Duration", "signature": "Duration subtract( long duration,\n                              TimeUnit unit )", "full_signature": "public Duration subtract( long duration,\n                              TimeUnit unit )", "class_method_signature": "Duration.subtract( long duration,\n                              TimeUnit unit )", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "( Duration duration )", "modifiers": "public", "return": "Duration", "signature": "Duration add( Duration duration )", "full_signature": "public Duration add( Duration duration )", "class_method_signature": "Duration.add( Duration duration )", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "( Duration duration )", "modifiers": "public", "return": "Duration", "signature": "Duration subtract( Duration duration )", "full_signature": "public Duration subtract( Duration duration )", "class_method_signature": "Duration.subtract( Duration duration )", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "( long scale )", "modifiers": "public", "return": "Duration", "signature": "Duration multiply( long scale )", "full_signature": "public Duration multiply( long scale )", "class_method_signature": "Duration.multiply( long scale )", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "( long denominator )", "modifiers": "public", "return": "Duration", "signature": "Duration divide( long denominator )", "full_signature": "public Duration divide( long denominator )", "class_method_signature": "Duration.divide( long denominator )", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "( Duration duration )", "modifiers": "public", "return": "double", "signature": "double divide( Duration duration )", "full_signature": "public double divide( Duration duration )", "class_method_signature": "Duration.divide( Duration duration )", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "( Duration that )", "modifiers": "@Override public", "return": "int", "signature": "int compareTo( Duration that )", "full_signature": "@Override public int compareTo( Duration that )", "class_method_signature": "Duration.compareTo( Duration that )", "testcase": false, "constructor": false}, {"identifier": "getDuratinInNanoseconds", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getDuratinInNanoseconds()", "full_signature": "public long getDuratinInNanoseconds()", "class_method_signature": "Duration.getDuratinInNanoseconds()", "testcase": false, "constructor": false}, {"identifier": "getDurationInMicroseconds", "parameters": "()", "modifiers": "public", "return": "BigDecimal", "signature": "BigDecimal getDurationInMicroseconds()", "full_signature": "public BigDecimal getDurationInMicroseconds()", "class_method_signature": "Duration.getDurationInMicroseconds()", "testcase": false, "constructor": false}, {"identifier": "getDurationInMilliseconds", "parameters": "()", "modifiers": "public", "return": "BigDecimal", "signature": "BigDecimal getDurationInMilliseconds()", "full_signature": "public BigDecimal getDurationInMilliseconds()", "class_method_signature": "Duration.getDurationInMilliseconds()", "testcase": false, "constructor": false}, {"identifier": "getDurationInSeconds", "parameters": "()", "modifiers": "public", "return": "BigDecimal", "signature": "BigDecimal getDurationInSeconds()", "full_signature": "public BigDecimal getDurationInSeconds()", "class_method_signature": "Duration.getDurationInSeconds()", "testcase": false, "constructor": false}, {"identifier": "getComponents", "parameters": "()", "modifiers": "public", "return": "Components", "signature": "Components getComponents()", "full_signature": "public Components getComponents()", "class_method_signature": "Duration.getComponents()", "testcase": false, "constructor": false}, {"identifier": "getDuration", "parameters": "( TimeUnit unit )", "modifiers": "public", "return": "long", "signature": "long getDuration( TimeUnit unit )", "full_signature": "public long getDuration( TimeUnit unit )", "class_method_signature": "Duration.getDuration( TimeUnit unit )", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Duration.toString()", "testcase": false, "constructor": false}, {"identifier": "toSimpleString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toSimpleString()", "full_signature": "public String toSimpleString()", "class_method_signature": "Duration.toSimpleString()", "testcase": false, "constructor": false}], "file": "modeshape-common/src/main/java/org/modeshape/common/math/Duration.java"}, "focal_method": {"identifier": "getComponents", "parameters": "()", "modifiers": "public", "return": "Components", "body": "public Components getComponents() {\n        if (this.components == null) {\n            // This is idempotent, so no need to synchronize ...\n\n            // Calculate how many seconds, and don't lose any information ...\n            BigDecimal bigSeconds = new BigDecimal(this.durationInNanos).divide(new BigDecimal(1000000000));\n            // Calculate the minutes, and round to lose the seconds\n            int minutes = bigSeconds.intValue() / 60;\n            // Remove the minutes from the seconds, to just have the remainder of seconds\n            double dMinutes = minutes;\n            double seconds = bigSeconds.doubleValue() - dMinutes * 60;\n            // Now compute the number of full hours, and change 'minutes' to hold the remainding minutes\n            int hours = minutes / 60;\n            minutes = minutes - (hours * 60);\n            this.components = new Components(hours, minutes, seconds);\n        }\n        return this.components;\n    }", "signature": "Components getComponents()", "full_signature": "public Components getComponents()", "class_method_signature": "Duration.getComponents()", "testcase": false, "constructor": false, "invocations": ["divide", "intValue", "doubleValue"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}