{"test_class": {"identifier": "CpuThreadStateDataSeriesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final FakeTimer myTimer = new FakeTimer();", "modifier": "private final", "type": "FakeTimer", "declarator": "myTimer = new FakeTimer()", "var_name": "myTimer"}, {"original_string": "private final FakeIdeProfilerServices myIdeProfilerServices = new FakeIdeProfilerServices();", "modifier": "private final", "type": "FakeIdeProfilerServices", "declarator": "myIdeProfilerServices = new FakeIdeProfilerServices()", "var_name": "myIdeProfilerServices"}, {"original_string": "private final FakeCpuService myService = new FakeCpuService();", "modifier": "private final", "type": "FakeCpuService", "declarator": "myService = new FakeCpuService()", "var_name": "myService"}, {"original_string": "private final FakeTransportService myTransportService = new FakeTransportService(myTimer);", "modifier": "private final", "type": "FakeTransportService", "declarator": "myTransportService = new FakeTransportService(myTimer)", "var_name": "myTransportService"}, {"original_string": "private CpuProfilerStage myProfilerStage;", "modifier": "private", "type": "CpuProfilerStage", "declarator": "myProfilerStage", "var_name": "myProfilerStage"}, {"original_string": "private boolean myIsUnifiedPipeline;", "modifier": "private", "type": "boolean", "declarator": "myIsUnifiedPipeline", "var_name": "myIsUnifiedPipeline"}, {"original_string": "@Rule\n  public FakeGrpcChannel myGrpcChannel =\n    new FakeGrpcChannel(\"CpuProfilerStageTestChannel\", myService, myTransportService, new FakeProfilerService(myTimer),\n                        new FakeMemoryService(), new FakeEventService(), FakeNetworkService.newBuilder().build());", "modifier": "@Rule\n  public", "type": "FakeGrpcChannel", "declarator": "myGrpcChannel =\n    new FakeGrpcChannel(\"CpuProfilerStageTestChannel\", myService, myTransportService, new FakeProfilerService(myTimer),\n                        new FakeMemoryService(), new FakeEventService(), FakeNetworkService.newBuilder().build())", "var_name": "myGrpcChannel"}], "file": "profilers/testSrc/com/android/tools/profilers/cpu/CpuThreadStateDataSeriesTest.java"}, "test_case": {"identifier": "nonEmptyRange", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void nonEmptyRange() {\n    // Range of the threads from FakeCpuService#buildThreads\n    Range range = new Range(TimeUnit.SECONDS.toMicros(1), TimeUnit.SECONDS.toMicros(15));\n    // Create a series with the range that contains both thread1 and thread2 and thread2 tid\n    DataSeries<CpuProfilerStage.ThreadState> series = createThreadSeries(2);\n    List<SeriesData<CpuProfilerStage.ThreadState>> dataSeries = series.getDataForRange(range);\n    assertNotNull(dataSeries);\n    // thread2 state changes are RUNNING, STOPPED, SLEEPING, WAITING and DEAD\n    assertEquals(5, dataSeries.size());\n\n    assertEquals(CpuProfilerStage.ThreadState.RUNNING, dataSeries.get(0).value);\n    // Any state different than RUNNING, SLEEPING, WAITING or DEAD (expected states) is mapped to UNKNOWN\n    assertEquals(CpuProfilerStage.ThreadState.UNKNOWN, dataSeries.get(1).value);\n    assertEquals(CpuProfilerStage.ThreadState.SLEEPING, dataSeries.get(2).value);\n    assertEquals(CpuProfilerStage.ThreadState.WAITING, dataSeries.get(3).value);\n    assertEquals(CpuProfilerStage.ThreadState.DEAD, dataSeries.get(4).value);\n  }", "signature": "void nonEmptyRange()", "full_signature": "@Test public void nonEmptyRange()", "class_method_signature": "CpuThreadStateDataSeriesTest.nonEmptyRange()", "testcase": true, "constructor": false, "invocations": ["toMicros", "toMicros", "createThreadSeries", "getDataForRange", "assertNotNull", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "CpuThreadStateDataSeries", "superclass": "", "interfaces": "implements DataSeries<CpuProfilerStage.ThreadState>", "fields": [{"original_string": "@NotNull private final TransportServiceGrpc.TransportServiceBlockingStub myClient;", "modifier": "@NotNull private final", "type": "TransportServiceGrpc.TransportServiceBlockingStub", "declarator": "myClient", "var_name": "myClient"}, {"original_string": "private final long myStreamId;", "modifier": "private final", "type": "long", "declarator": "myStreamId", "var_name": "myStreamId"}, {"original_string": "private final int myPid;", "modifier": "private final", "type": "int", "declarator": "myPid", "var_name": "myPid"}, {"original_string": "private final int myThreadId;", "modifier": "private final", "type": "int", "declarator": "myThreadId", "var_name": "myThreadId"}, {"original_string": "@Nullable private final CpuCapture mySelectedCapture;", "modifier": "@Nullable private final", "type": "CpuCapture", "declarator": "mySelectedCapture", "var_name": "mySelectedCapture"}], "methods": [{"identifier": "CpuThreadStateDataSeries", "parameters": "(@NotNull TransportServiceGrpc.TransportServiceBlockingStub client,\n                                  long streamId,\n                                  int pid,\n                                  int threadId,\n                                  @Nullable CpuCapture selectedCapture)", "modifiers": "public", "return": "", "signature": " CpuThreadStateDataSeries(@NotNull TransportServiceGrpc.TransportServiceBlockingStub client,\n                                  long streamId,\n                                  int pid,\n                                  int threadId,\n                                  @Nullable CpuCapture selectedCapture)", "full_signature": "public  CpuThreadStateDataSeries(@NotNull TransportServiceGrpc.TransportServiceBlockingStub client,\n                                  long streamId,\n                                  int pid,\n                                  int threadId,\n                                  @Nullable CpuCapture selectedCapture)", "class_method_signature": "CpuThreadStateDataSeries.CpuThreadStateDataSeries(@NotNull TransportServiceGrpc.TransportServiceBlockingStub client,\n                                  long streamId,\n                                  int pid,\n                                  int threadId,\n                                  @Nullable CpuCapture selectedCapture)", "testcase": false, "constructor": true}, {"identifier": "getDataForRange", "parameters": "(Range rangeUs)", "modifiers": "@Override public", "return": "List<SeriesData<CpuProfilerStage.ThreadState>>", "signature": "List<SeriesData<CpuProfilerStage.ThreadState>> getDataForRange(Range rangeUs)", "full_signature": "@Override public List<SeriesData<CpuProfilerStage.ThreadState>> getDataForRange(Range rangeUs)", "class_method_signature": "CpuThreadStateDataSeries.getDataForRange(Range rangeUs)", "testcase": false, "constructor": false}], "file": "profilers/src/com/android/tools/profilers/cpu/CpuThreadStateDataSeries.java"}, "focal_method": {"identifier": "getDataForRange", "parameters": "(Range rangeUs)", "modifiers": "@Override public", "return": "List<SeriesData<CpuProfilerStage.ThreadState>>", "body": "@Override\n  public List<SeriesData<CpuProfilerStage.ThreadState>> getDataForRange(Range rangeUs) {\n    List<SeriesData<CpuProfilerStage.ThreadState>> series = new ArrayList<>();\n    long minNs = TimeUnit.MICROSECONDS.toNanos((long)rangeUs.getMin());\n    long maxNs = TimeUnit.MICROSECONDS.toNanos((long)rangeUs.getMax());\n    GetEventGroupsResponse response = myClient.getEventGroups(\n      GetEventGroupsRequest.newBuilder()\n        .setStreamId(myStreamId)\n        .setPid(myPid)\n        .setKind(Common.Event.Kind.CPU_THREAD)\n        .setGroupId(myThreadId)\n        .setFromTimestamp(minNs)\n        .setToTimestamp(maxNs)\n        .build());\n    // We don't expect more than one data group for the given group ID.\n    assert response.getGroupsCount() <= 1;\n    if (response.getGroupsCount() == 1) {\n      // Merges information from traces and samples:\n      ArrayList<Double> captureTimes = new ArrayList<>(2);\n      if (mySelectedCapture != null && mySelectedCapture.getThreads().stream().anyMatch(t -> t.getId() == myThreadId)) {\n        captureTimes.add(mySelectedCapture.getRange().getMin());\n        captureTimes.add(mySelectedCapture.getRange().getMax());\n      }\n\n      int i = 0;\n      int j = 0;\n      boolean inCapture = false;\n      Cpu.CpuThreadData.State state = Cpu.CpuThreadData.State.UNSPECIFIED;\n      List<Common.Event> events = response.getGroups(0).getEventsList();\n      while (i < events.size()) {\n        Common.Event event = events.get(i);\n        long timestamp = TimeUnit.NANOSECONDS.toMicros(event.getTimestamp());\n        long captureTime = j < captureTimes.size() ? captureTimes.get(j).longValue() : Long.MAX_VALUE;\n\n        long time;\n        if (captureTime < timestamp) {\n          inCapture = !inCapture;\n          time = captureTime;\n          j++;\n        }\n        else {\n          state = event.getCpuThread().getState();\n          time = timestamp;\n          i++;\n        }\n        // We shouldn't add an activity if capture has started before the first activity for the current thread.\n        if (state != Cpu.CpuThreadData.State.UNSPECIFIED) {\n          series.add(new SeriesData<>(time, CpuThreadsModel.getState(state, inCapture)));\n        }\n      }\n      while (j < captureTimes.size()) {\n        inCapture = !inCapture;\n        series.add(new SeriesData<>(captureTimes.get(j).longValue(), CpuThreadsModel.getState(state, inCapture)));\n        j++;\n      }\n    }\n\n    return series;\n  }", "signature": "List<SeriesData<CpuProfilerStage.ThreadState>> getDataForRange(Range rangeUs)", "full_signature": "@Override public List<SeriesData<CpuProfilerStage.ThreadState>> getDataForRange(Range rangeUs)", "class_method_signature": "CpuThreadStateDataSeries.getDataForRange(Range rangeUs)", "testcase": false, "constructor": false, "invocations": ["toNanos", "getMin", "toNanos", "getMax", "getEventGroups", "build", "setToTimestamp", "setFromTimestamp", "setGroupId", "setKind", "setPid", "setStreamId", "newBuilder", "getGroupsCount", "getGroupsCount", "anyMatch", "stream", "getThreads", "getId", "add", "getMin", "getRange", "add", "getMax", "getRange", "getEventsList", "getGroups", "size", "get", "toMicros", "getTimestamp", "size", "longValue", "get", "getState", "getCpuThread", "add", "getState", "size", "add", "longValue", "get", "getState"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}