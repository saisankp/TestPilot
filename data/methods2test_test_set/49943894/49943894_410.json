{"test_class": {"identifier": "CommandCreationWorkerTest", "superclass": "", "interfaces": "", "fields": [], "file": "server/src/test/java/com/cloud/api/dispatch/CommandCreationWorkerTest.java"}, "test_case": {"identifier": "testHandle", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHandle() throws ResourceAllocationException {\n        // Prepare\n        final BaseAsyncCreateCmd asyncCreateCmd = mock(BaseAsyncCreateCmd.class);\n        final Map<String, String> params = new HashMap<String, String>();\n        Account account = new AccountVO(\"testaccount\", 1L, \"networkdomain\", (short) 0, \"uuid\");\n        UserVO user = new UserVO(1, \"testuser\", \"password\", \"firstname\", \"lastName\", \"email\", \"timezone\", UUID.randomUUID().toString(), User.Source.UNKNOWN);\n        CallContext.register(user, account);\n\n        // Execute\n        final CommandCreationWorker creationWorker = new CommandCreationWorker();\n\n        creationWorker.handle(new DispatchTask(asyncCreateCmd, params));\n\n        // Assert\n        verify(asyncCreateCmd, times(1)).create();\n    }", "signature": "void testHandle()", "full_signature": "@Test public void testHandle()", "class_method_signature": "CommandCreationWorkerTest.testHandle()", "testcase": true, "constructor": false, "invocations": ["mock", "toString", "randomUUID", "register", "handle", "create", "verify", "times"]}, "focal_class": {"identifier": "CommandCreationWorker", "superclass": "", "interfaces": "implements DispatchWorker", "fields": [{"original_string": "private static final String ATTEMP_TO_CREATE_NON_CREATION_CMD =\n            \"Trying to invoke creation on a Command that is not \" +\n            BaseAsyncCreateCmd.class.getName();", "modifier": "private static final", "type": "String", "declarator": "ATTEMP_TO_CREATE_NON_CREATION_CMD =\n            \"Trying to invoke creation on a Command that is not \" +\n            BaseAsyncCreateCmd.class.getName()", "var_name": "ATTEMP_TO_CREATE_NON_CREATION_CMD"}], "methods": [{"identifier": "handle", "parameters": "(final DispatchTask task)", "modifiers": "@Override public", "return": "void", "signature": "void handle(final DispatchTask task)", "full_signature": "@Override public void handle(final DispatchTask task)", "class_method_signature": "CommandCreationWorker.handle(final DispatchTask task)", "testcase": false, "constructor": false}], "file": "server/src/main/java/com/cloud/api/dispatch/CommandCreationWorker.java"}, "focal_method": {"identifier": "handle", "parameters": "(final DispatchTask task)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void handle(final DispatchTask task) {\n        final BaseCmd cmd = task.getCmd();\n\n        if (cmd instanceof BaseAsyncCreateCmd) {\n            try {\n                CallContext.current().setEventDisplayEnabled(cmd.isDisplay());\n                ((BaseAsyncCreateCmd)cmd).create();\n            } catch (final ResourceAllocationException e) {\n                throw new ServerApiException(ApiErrorCode.RESOURCE_ALLOCATION_ERROR,\n                        e.getMessage(), e);\n            }\n        } else {\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,\n                    ATTEMP_TO_CREATE_NON_CREATION_CMD);\n        }\n    }", "signature": "void handle(final DispatchTask task)", "full_signature": "@Override public void handle(final DispatchTask task)", "class_method_signature": "CommandCreationWorker.handle(final DispatchTask task)", "testcase": false, "constructor": false, "invocations": ["getCmd", "setEventDisplayEnabled", "current", "isDisplay", "create", "getMessage"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}