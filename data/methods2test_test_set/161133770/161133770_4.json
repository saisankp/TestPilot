{"test_class": {"identifier": "ProcessAndValidateFeatureRowsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public transient TestPipeline p = TestPipeline.create();", "modifier": "@Rule public transient", "type": "TestPipeline", "declarator": "p = TestPipeline.create()", "var_name": "p"}, {"original_string": "private static final TupleTag<FeatureRow> SUCCESS_TAG = new TupleTag<FeatureRow>() {};", "modifier": "private static final", "type": "TupleTag<FeatureRow>", "declarator": "SUCCESS_TAG = new TupleTag<FeatureRow>() {}", "var_name": "SUCCESS_TAG"}, {"original_string": "private static final TupleTag<FailedElement> FAILURE_TAG = new TupleTag<FailedElement>() {};", "modifier": "private static final", "type": "TupleTag<FailedElement>", "declarator": "FAILURE_TAG = new TupleTag<FailedElement>() {}", "var_name": "FAILURE_TAG"}], "file": "ingestion/src/test/java/feast/ingestion/transform/ProcessAndValidateFeatureRowsTest.java"}, "test_case": {"identifier": "shouldWriteSuccessAndFailureTagsCorrectly", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldWriteSuccessAndFailureTagsCorrectly() {\n    FeatureSetSpec fs1 =\n        FeatureSetSpec.newBuilder()\n            .setName(\"feature_set\")\n            .setProject(\"myproject\")\n            .addEntities(\n                EntitySpec.newBuilder()\n                    .setName(\"entity_id_primary\")\n                    .setValueType(Enum.INT32)\n                    .build())\n            .addEntities(\n                EntitySpec.newBuilder()\n                    .setName(\"entity_id_secondary\")\n                    .setValueType(Enum.STRING)\n                    .build())\n            .addFeatures(\n                FeatureSpec.newBuilder().setName(\"feature_1\").setValueType(Enum.STRING).build())\n            .addFeatures(\n                FeatureSpec.newBuilder().setName(\"feature_2\").setValueType(Enum.INT64).build())\n            .build();\n\n    FeatureSetSpec fs2 =\n        FeatureSetSpec.newBuilder()\n            .setName(\"feature_set_2\")\n            .setProject(\"myproject\")\n            .addEntities(\n                EntitySpec.newBuilder()\n                    .setName(\"entity_id_primary\")\n                    .setValueType(Enum.INT32)\n                    .build())\n            .addEntities(\n                EntitySpec.newBuilder()\n                    .setName(\"entity_id_secondary\")\n                    .setValueType(Enum.STRING)\n                    .build())\n            .addFeatures(\n                FeatureSpec.newBuilder().setName(\"feature_1\").setValueType(Enum.STRING).build())\n            .addFeatures(\n                FeatureSpec.newBuilder().setName(\"feature_2\").setValueType(Enum.INT64).build())\n            .build();\n\n    Map<String, FeatureSetSpec> featureSetSpecs = new HashMap<>();\n    featureSetSpecs.put(\"myproject/feature_set\", fs1);\n    featureSetSpecs.put(\"myproject/feature_set_2\", fs2);\n\n    List<FeatureRow> input = new ArrayList<>();\n    List<FeatureRow> expected = new ArrayList<>();\n\n    for (FeatureSetSpec featureSetSpec : featureSetSpecs.values()) {\n      FeatureRow randomRow = TestUtil.createRandomFeatureRow(featureSetSpec);\n      input.add(randomRow);\n      expected.add(randomRow);\n    }\n\n    FeatureRow invalidRow =\n        FeatureRow.newBuilder()\n            .setFeatureSet(getFeatureSetStringRef(fs1))\n            .addFields(\n                Field.newBuilder()\n                    .setName(\"feature_1\")\n                    .setValue(Value.newBuilder().setBoolVal(false).build())\n                    .build())\n            .build();\n\n    input.add(invalidRow);\n\n    PCollectionView<Map<String, Iterable<FeatureSetSpec>>> specsView =\n        p.apply(\"StaticSpecs\", Create.of(featureSetSpecs)).apply(View.asMultimap());\n\n    PCollectionTuple output =\n        p.apply(Create.of(input))\n            .setCoder(ProtoCoder.of(FeatureRow.class))\n            .apply(\n                ProcessAndValidateFeatureRows.newBuilder()\n                    .setDefaultProject(\"myproject\")\n                    .setFailureTag(FAILURE_TAG)\n                    .setSuccessTag(SUCCESS_TAG)\n                    .setFeatureSetSpecs(specsView)\n                    .build());\n\n    PAssert.that(output.get(SUCCESS_TAG)).containsInAnyOrder(expected);\n    PAssert.that(output.get(FAILURE_TAG).apply(Count.globally())).containsInAnyOrder(1L);\n\n    p.run();\n  }", "signature": "void shouldWriteSuccessAndFailureTagsCorrectly()", "full_signature": "@Test public void shouldWriteSuccessAndFailureTagsCorrectly()", "class_method_signature": "ProcessAndValidateFeatureRowsTest.shouldWriteSuccessAndFailureTagsCorrectly()", "testcase": true, "constructor": false, "invocations": ["build", "addFeatures", "addFeatures", "addEntities", "addEntities", "setProject", "setName", "newBuilder", "build", "setValueType", "setName", "newBuilder", "build", "setValueType", "setName", "newBuilder", "build", "setValueType", "setName", "newBuilder", "build", "setValueType", "setName", "newBuilder", "build", "addFeatures", "addFeatures", "addEntities", "addEntities", "setProject", "setName", "newBuilder", "build", "setValueType", "setName", "newBuilder", "build", "setValueType", "setName", "newBuilder", "build", "setValueType", "setName", "newBuilder", "build", "setValueType", "setName", "newBuilder", "put", "put", "values", "createRandomFeatureRow", "add", "add", "build", "addFields", "setFeatureSet", "newBuilder", "getFeatureSetStringRef", "build", "setValue", "setName", "newBuilder", "build", "setBoolVal", "newBuilder", "add", "apply", "apply", "of", "asMultimap", "apply", "setCoder", "apply", "of", "of", "build", "setFeatureSetSpecs", "setSuccessTag", "setFailureTag", "setDefaultProject", "newBuilder", "containsInAnyOrder", "that", "get", "containsInAnyOrder", "that", "apply", "get", "globally", "run"]}, "focal_class": {"identifier": "ProcessAndValidateFeatureRows", "superclass": "extends PTransform<PCollection<FeatureRow>, PCollectionTuple>", "interfaces": "", "fields": [], "methods": [{"identifier": "getFeatureSetSpecs", "parameters": "()", "modifiers": "public abstract", "return": "PCollectionView<Map<String, Iterable<FeatureSetProto.FeatureSetSpec>>>", "signature": "PCollectionView<Map<String, Iterable<FeatureSetProto.FeatureSetSpec>>> getFeatureSetSpecs()", "full_signature": "public abstract PCollectionView<Map<String, Iterable<FeatureSetProto.FeatureSetSpec>>> getFeatureSetSpecs()", "class_method_signature": "ProcessAndValidateFeatureRows.getFeatureSetSpecs()", "testcase": false, "constructor": false}, {"identifier": "getDefaultProject", "parameters": "()", "modifiers": "public abstract", "return": "String", "signature": "String getDefaultProject()", "full_signature": "public abstract String getDefaultProject()", "class_method_signature": "ProcessAndValidateFeatureRows.getDefaultProject()", "testcase": false, "constructor": false}, {"identifier": "getSuccessTag", "parameters": "()", "modifiers": "public abstract", "return": "TupleTag<FeatureRow>", "signature": "TupleTag<FeatureRow> getSuccessTag()", "full_signature": "public abstract TupleTag<FeatureRow> getSuccessTag()", "class_method_signature": "ProcessAndValidateFeatureRows.getSuccessTag()", "testcase": false, "constructor": false}, {"identifier": "getFailureTag", "parameters": "()", "modifiers": "public abstract", "return": "TupleTag<FailedElement>", "signature": "TupleTag<FailedElement> getFailureTag()", "full_signature": "public abstract TupleTag<FailedElement> getFailureTag()", "class_method_signature": "ProcessAndValidateFeatureRows.getFailureTag()", "testcase": false, "constructor": false}, {"identifier": "newBuilder", "parameters": "()", "modifiers": "public static", "return": "Builder", "signature": "Builder newBuilder()", "full_signature": "public static Builder newBuilder()", "class_method_signature": "ProcessAndValidateFeatureRows.newBuilder()", "testcase": false, "constructor": false}, {"identifier": "expand", "parameters": "(PCollection<FeatureRow> input)", "modifiers": "@Override public", "return": "PCollectionTuple", "signature": "PCollectionTuple expand(PCollection<FeatureRow> input)", "full_signature": "@Override public PCollectionTuple expand(PCollection<FeatureRow> input)", "class_method_signature": "ProcessAndValidateFeatureRows.expand(PCollection<FeatureRow> input)", "testcase": false, "constructor": false}], "file": "ingestion/src/main/java/feast/ingestion/transform/ProcessAndValidateFeatureRows.java"}, "focal_method": {"identifier": "newBuilder", "parameters": "()", "modifiers": "public static", "return": "Builder", "body": "public static Builder newBuilder() {\n    return new AutoValue_ProcessAndValidateFeatureRows.Builder();\n  }", "signature": "Builder newBuilder()", "full_signature": "public static Builder newBuilder()", "class_method_signature": "ProcessAndValidateFeatureRows.newBuilder()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 161133770, "url": "https://github.com/gojek/feast", "stars": 633, "created": "12/10/2018 7:20:15 AM +00:00", "updates": "2020-01-27T12:39:33+00:00", "fork": "False", "license": "licensed"}}