{"test_class": {"identifier": "BitmapWriterTest", "superclass": "extends RobolectricTest", "interfaces": "", "fields": [], "file": "library/src/test/java/com/climate/mirage/cache/disk/writers/BitmapWriterTest.java"}, "test_case": {"identifier": "testWritesPng", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testWritesPng() {\n\t\tFile file = new File(getContext().getCacheDir(), \"test_file\");\n\t\tBitmap bitmap = Mockito.mock(Bitmap.class);\n\t\tMockito.when(bitmap.hasAlpha()).thenReturn(true);\n\t\tMockito.when(\n\t\t\t\tbitmap.compress((Bitmap.CompressFormat) Mockito.any(), Mockito.anyInt(),\n\t\t\t\t\t\t(OutputStream) Mockito.any())).\n\t\t\t\tthenReturn(true);\n\t\tMockito.when(bitmap.getWidth()).thenReturn(400);\n\t\tMockito.when(bitmap.getHeight()).thenReturn(400);\n\n\t\t// According to the docs, hasAlpha should return true for ARGB_8888\n\t\t// which i think it does on a real device. Use Mockito to get around this\n\t\t// on Robolectric\n//\t\tBitmap bitmap = Bitmap.createBitmap(400, 400, Bitmap.Config.ARGB_8888);\n\t\tBitmapWriter writer = new BitmapWriter(bitmap);\n\t\tboolean result = writer.write(file);\n\t\tAssert.assertTrue(result);\n\n\t\tShadowBitmapFactory.provideWidthAndHeightHints(file.getAbsolutePath(), 400, 400);\n\t\tBitmap writtenBitmap = BitmapFactory.decodeFile(file.getAbsolutePath());\n\t\tAssert.assertNotNull(writtenBitmap);\n\t\tAssert.assertEquals(bitmap.getWidth(), writtenBitmap.getWidth());\n\t\tAssert.assertEquals(bitmap.getHeight(), writtenBitmap.getHeight());\n\t\t// ShadowBitmapFactory doesn't save the state of the bitmap.\n\t\t// Can't test this with robolectric it seems\n//\t\tAssert.assertTrue(writtenBitmap.hasAlpha());\n\t}", "signature": "void testWritesPng()", "full_signature": "@Test public void testWritesPng()", "class_method_signature": "BitmapWriterTest.testWritesPng()", "testcase": true, "constructor": false, "invocations": ["getCacheDir", "getContext", "mock", "thenReturn", "when", "hasAlpha", "thenReturn", "when", "compress", "any", "anyInt", "any", "thenReturn", "when", "getWidth", "thenReturn", "when", "getHeight", "write", "assertTrue", "provideWidthAndHeightHints", "getAbsolutePath", "decodeFile", "getAbsolutePath", "assertNotNull", "assertEquals", "getWidth", "getWidth", "assertEquals", "getHeight", "getHeight"]}, "focal_class": {"identifier": "BitmapWriter", "superclass": "", "interfaces": "implements DiskCache.Writer", "fields": [{"original_string": "private Bitmap bitmap;", "modifier": "private", "type": "Bitmap", "declarator": "bitmap", "var_name": "bitmap"}, {"original_string": "private static final String TAG = BitmapWriter.class.getSimpleName();", "modifier": "private static final", "type": "String", "declarator": "TAG = BitmapWriter.class.getSimpleName()", "var_name": "TAG"}], "methods": [{"identifier": "BitmapWriter", "parameters": "(Bitmap bitmap)", "modifiers": "public", "return": "", "signature": " BitmapWriter(Bitmap bitmap)", "full_signature": "public  BitmapWriter(Bitmap bitmap)", "class_method_signature": "BitmapWriter.BitmapWriter(Bitmap bitmap)", "testcase": false, "constructor": true}, {"identifier": "write", "parameters": "(File file)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean write(File file)", "full_signature": "@Override public boolean write(File file)", "class_method_signature": "BitmapWriter.write(File file)", "testcase": false, "constructor": false}], "file": "library/src/main/java/com/climate/mirage/cache/disk/writers/BitmapWriter.java"}, "focal_method": {"identifier": "write", "parameters": "(File file)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean write(File file) {\n\t\tFileOutputStream fos = null;\n\t\ttry {\n\t\t\tfos = new FileOutputStream(file);\n\t\t\tif (bitmap.hasAlpha()) {\n\t\t\t\tbitmap.compress(Bitmap.CompressFormat.PNG, 100, fos);\n\t\t\t} else {\n\t\t\t\tbitmap.compress(Bitmap.CompressFormat.JPEG, 90, fos);\n\t\t\t}\n\t\t\treturn true;\n\t\t} catch (IOException e) {\n\t\t\tLog.w(TAG, \"Could not write bitmap to file\", e);\n\t\t} finally {\n\t\t\tIOUtils.close(fos);\n\t\t}\n\t\treturn false;\n\t}", "signature": "boolean write(File file)", "full_signature": "@Override public boolean write(File file)", "class_method_signature": "BitmapWriter.write(File file)", "testcase": false, "constructor": false, "invocations": ["hasAlpha", "compress", "compress", "w", "close"]}, "repository": {"repo_id": 35564219, "url": "https://github.com/TheClimateCorporation/mirage", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 8, "size": 3928, "license": "licensed"}}