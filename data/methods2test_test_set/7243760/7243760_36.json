{"test_class": {"identifier": "TestMarketDisplayBaseImpl", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ValueFactory factory = new ValueFactoryImpl();", "modifier": "private static final", "type": "ValueFactory", "declarator": "factory = new ValueFactoryImpl()", "var_name": "factory"}, {"original_string": "public static MarketDisplay display = new MarketDisplayBaseImpl();", "modifier": "public static", "type": "MarketDisplay", "declarator": "display = new MarketDisplayBaseImpl()", "var_name": "display"}, {"original_string": "public static Fraction BIN_Z00 = factory.newFraction(2, 0);", "modifier": "public static", "type": "Fraction", "declarator": "BIN_Z00 = factory.newFraction(2, 0)", "var_name": "BIN_Z00"}, {"original_string": "public static Fraction BIN_N01 = factory.newFraction(2, -1);", "modifier": "public static", "type": "Fraction", "declarator": "BIN_N01 = factory.newFraction(2, -1)", "var_name": "BIN_N01"}, {"original_string": "public static Fraction BIN_N02 = factory.newFraction(2, -2);", "modifier": "public static", "type": "Fraction", "declarator": "BIN_N02 = factory.newFraction(2, -2)", "var_name": "BIN_N02"}, {"original_string": "public static Fraction BIN_N03 = factory.newFraction(2, -3);", "modifier": "public static", "type": "Fraction", "declarator": "BIN_N03 = factory.newFraction(2, -3)", "var_name": "BIN_N03"}, {"original_string": "public static Fraction BIN_N04 = factory.newFraction(2, -4);", "modifier": "public static", "type": "Fraction", "declarator": "BIN_N04 = factory.newFraction(2, -4)", "var_name": "BIN_N04"}, {"original_string": "public static Fraction BIN_N07 = factory.newFraction(2, -7);", "modifier": "public static", "type": "Fraction", "declarator": "BIN_N07 = factory.newFraction(2, -7)", "var_name": "BIN_N07"}, {"original_string": "public static Fraction DEC_Z00 = factory.newFraction(10, 0);", "modifier": "public static", "type": "Fraction", "declarator": "DEC_Z00 = factory.newFraction(10, 0)", "var_name": "DEC_Z00"}, {"original_string": "public static Fraction DEC_N01 = factory.newFraction(10, -1);", "modifier": "public static", "type": "Fraction", "declarator": "DEC_N01 = factory.newFraction(10, -1)", "var_name": "DEC_N01"}, {"original_string": "public static Fraction DEC_N02 = factory.newFraction(10, -2);", "modifier": "public static", "type": "Fraction", "declarator": "DEC_N02 = factory.newFraction(10, -2)", "var_name": "DEC_N02"}, {"original_string": "public static Fraction DEC_N03 = factory.newFraction(10, -3);", "modifier": "public static", "type": "Fraction", "declarator": "DEC_N03 = factory.newFraction(10, -3)", "var_name": "DEC_N03"}, {"original_string": "public static Fraction DEC_N04 = factory.newFraction(10, -4);", "modifier": "public static", "type": "Fraction", "declarator": "DEC_N04 = factory.newFraction(10, -4)", "var_name": "DEC_N04"}, {"original_string": "public static Fraction DEC_N05 = factory.newFraction(10, -5);", "modifier": "public static", "type": "Fraction", "declarator": "DEC_N05 = factory.newFraction(10, -5)", "var_name": "DEC_N05"}, {"original_string": "public static Fraction DEC_N06 = factory.newFraction(10, -6);", "modifier": "public static", "type": "Fraction", "declarator": "DEC_N06 = factory.newFraction(10, -6)", "var_name": "DEC_N06"}, {"original_string": "public static Fraction DEC_N07 = factory.newFraction(10, -7);", "modifier": "public static", "type": "Fraction", "declarator": "DEC_N07 = factory.newFraction(10, -7)", "var_name": "DEC_N07"}], "file": "base/src/test/java/com/barchart/feed/base/provider/TestMarketDisplayBaseImpl.java"}, "test_case": {"identifier": "testMonthShort", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testMonthShort() {\n\t\t\n\t\tfinal TimeValue time = newTime(0);\n\t\tfinal String text = display.timeMonthShort(time);\n\t\tSystem.out.println(\"month : >\" + text + \"<\");\n\t\t\n\t}", "signature": "void testMonthShort()", "full_signature": "@Test public void testMonthShort()", "class_method_signature": "TestMarketDisplayBaseImpl.testMonthShort()", "testcase": true, "constructor": false, "invocations": ["newTime", "timeMonthShort", "println"]}, "focal_class": {"identifier": "MarketDisplayBaseImpl", "superclass": "", "interfaces": "implements MarketDisplay", "fields": [{"original_string": "private final static DateTimeFormatter YEAR_FULL = DateTimeFormat\n\t\t\t.forPattern(\"yyyy\");", "modifier": "private final static", "type": "DateTimeFormatter", "declarator": "YEAR_FULL = DateTimeFormat\n\t\t\t.forPattern(\"yyyy\")", "var_name": "YEAR_FULL"}, {"original_string": "private final static DateTimeFormatter YEAR_SHORT = DateTimeFormat\n\t\t\t.forPattern(\"yy\");", "modifier": "private final static", "type": "DateTimeFormatter", "declarator": "YEAR_SHORT = DateTimeFormat\n\t\t\t.forPattern(\"yy\")", "var_name": "YEAR_SHORT"}, {"original_string": "private final static DateTimeFormatter MONTH_FULL = DateTimeFormat\n\t\t\t.forPattern(\"MMMMMMMMMMMM\");", "modifier": "private final static", "type": "DateTimeFormatter", "declarator": "MONTH_FULL = DateTimeFormat\n\t\t\t.forPattern(\"MMMMMMMMMMMM\")", "var_name": "MONTH_FULL"}, {"original_string": "private final static DateTimeFormatter MONTH_SHORT = DateTimeFormat\n\t\t\t.forPattern(\"MMM\");", "modifier": "private final static", "type": "DateTimeFormatter", "declarator": "MONTH_SHORT = DateTimeFormat\n\t\t\t.forPattern(\"MMM\")", "var_name": "MONTH_SHORT"}, {"original_string": "private final static DateTimeFormatter TIME_SHORT = DateTimeFormat\n\t\t\t.forPattern(\"HH:mm:ss\");", "modifier": "private final static", "type": "DateTimeFormatter", "declarator": "TIME_SHORT = DateTimeFormat\n\t\t\t.forPattern(\"HH:mm:ss\")", "var_name": "TIME_SHORT"}, {"original_string": "private final static DateTimeFormatter DATE_SHORT = DateTimeFormat\n\t\t\t.forPattern(\"MM/dd/yyyy\");", "modifier": "private final static", "type": "DateTimeFormatter", "declarator": "DATE_SHORT = DateTimeFormat\n\t\t\t.forPattern(\"MM/dd/yyyy\")", "var_name": "DATE_SHORT"}, {"original_string": "private final static DateTimeFormatter TIME_WITH_DATE = DateTimeFormat\n\t\t\t.forPattern(\"MM/dd/yyyy HH:mm:ss\");", "modifier": "private final static", "type": "DateTimeFormatter", "declarator": "TIME_WITH_DATE = DateTimeFormat\n\t\t\t.forPattern(\"MM/dd/yyyy HH:mm:ss\")", "var_name": "TIME_WITH_DATE"}], "methods": [{"identifier": "filter", "parameters": "(final TimeValue time)", "modifiers": "private static", "return": "TimeValue", "signature": "TimeValue filter(final TimeValue time)", "full_signature": "private static TimeValue filter(final TimeValue time)", "class_method_signature": "MarketDisplayBaseImpl.filter(final TimeValue time)", "testcase": false, "constructor": false}, {"identifier": "timeYearFull", "parameters": "(TimeValue time)", "modifiers": "@Override public", "return": "String", "signature": "String timeYearFull(TimeValue time)", "full_signature": "@Override public String timeYearFull(TimeValue time)", "class_method_signature": "MarketDisplayBaseImpl.timeYearFull(TimeValue time)", "testcase": false, "constructor": false}, {"identifier": "timeYearShort", "parameters": "(TimeValue time)", "modifiers": "@Override public", "return": "String", "signature": "String timeYearShort(TimeValue time)", "full_signature": "@Override public String timeYearShort(TimeValue time)", "class_method_signature": "MarketDisplayBaseImpl.timeYearShort(TimeValue time)", "testcase": false, "constructor": false}, {"identifier": "timeMonthFull", "parameters": "(TimeValue time)", "modifiers": "@Override public", "return": "String", "signature": "String timeMonthFull(TimeValue time)", "full_signature": "@Override public String timeMonthFull(TimeValue time)", "class_method_signature": "MarketDisplayBaseImpl.timeMonthFull(TimeValue time)", "testcase": false, "constructor": false}, {"identifier": "timeMonthShort", "parameters": "(TimeValue time)", "modifiers": "@Override public", "return": "String", "signature": "String timeMonthShort(TimeValue time)", "full_signature": "@Override public String timeMonthShort(TimeValue time)", "class_method_signature": "MarketDisplayBaseImpl.timeMonthShort(TimeValue time)", "testcase": false, "constructor": false}, {"identifier": "timeMonthCode", "parameters": "(TimeValue time)", "modifiers": "@Override public", "return": "String", "signature": "String timeMonthCode(TimeValue time)", "full_signature": "@Override public String timeMonthCode(TimeValue time)", "class_method_signature": "MarketDisplayBaseImpl.timeMonthCode(TimeValue time)", "testcase": false, "constructor": false}, {"identifier": "priceFractionText", "parameters": "(PriceValue price, Fraction frac)", "modifiers": "@Override public", "return": "String", "signature": "String priceFractionText(PriceValue price, Fraction frac)", "full_signature": "@Override public String priceFractionText(PriceValue price, Fraction frac)", "class_method_signature": "MarketDisplayBaseImpl.priceFractionText(PriceValue price, Fraction frac)", "testcase": false, "constructor": false}, {"identifier": "priceText", "parameters": "(PriceValue price, Fraction frac)", "modifiers": "@Override public", "return": "String", "signature": "String priceText(PriceValue price, Fraction frac)", "full_signature": "@Override public String priceText(PriceValue price, Fraction frac)", "class_method_signature": "MarketDisplayBaseImpl.priceText(PriceValue price, Fraction frac)", "testcase": false, "constructor": false}, {"identifier": "priceText", "parameters": "(PriceValue price, long base, long exponent)", "modifiers": "@Override public", "return": "String", "signature": "String priceText(PriceValue price, long base, long exponent)", "full_signature": "@Override public String priceText(PriceValue price, long base, long exponent)", "class_method_signature": "MarketDisplayBaseImpl.priceText(PriceValue price, long base, long exponent)", "testcase": false, "constructor": false}, {"identifier": "priceText", "parameters": "(long mantissa, int exponent, long base, long baseExp)", "modifiers": "@Override public", "return": "String", "signature": "String priceText(long mantissa, int exponent, long base, long baseExp)", "full_signature": "@Override public String priceText(long mantissa, int exponent, long base, long baseExp)", "class_method_signature": "MarketDisplayBaseImpl.priceText(long mantissa, int exponent, long base, long baseExp)", "testcase": false, "constructor": false}, {"identifier": "sizeText", "parameters": "(SizeValue size)", "modifiers": "@Override public", "return": "String", "signature": "String sizeText(SizeValue size)", "full_signature": "@Override public String sizeText(SizeValue size)", "class_method_signature": "MarketDisplayBaseImpl.sizeText(SizeValue size)", "testcase": false, "constructor": false}, {"identifier": "sizeText", "parameters": "(long size)", "modifiers": "@Override public", "return": "String", "signature": "String sizeText(long size)", "full_signature": "@Override public String sizeText(long size)", "class_method_signature": "MarketDisplayBaseImpl.sizeText(long size)", "testcase": false, "constructor": false}, {"identifier": "timeTextISO", "parameters": "(TimeValue value)", "modifiers": "@Override public", "return": "String", "signature": "String timeTextISO(TimeValue value)", "full_signature": "@Override public String timeTextISO(TimeValue value)", "class_method_signature": "MarketDisplayBaseImpl.timeTextISO(TimeValue value)", "testcase": false, "constructor": false}, {"identifier": "timeTextShort", "parameters": "(TimeValue value)", "modifiers": "@Override public", "return": "String", "signature": "String timeTextShort(TimeValue value)", "full_signature": "@Override public String timeTextShort(TimeValue value)", "class_method_signature": "MarketDisplayBaseImpl.timeTextShort(TimeValue value)", "testcase": false, "constructor": false}, {"identifier": "dateTimeText", "parameters": "(TimeValue value)", "modifiers": "@Override public", "return": "String", "signature": "String dateTimeText(TimeValue value)", "full_signature": "@Override public String dateTimeText(TimeValue value)", "class_method_signature": "MarketDisplayBaseImpl.dateTimeText(TimeValue value)", "testcase": false, "constructor": false}, {"identifier": "dateTextShort", "parameters": "(TimeValue value)", "modifiers": "@Override public", "return": "String", "signature": "String dateTextShort(TimeValue value)", "full_signature": "@Override public String dateTextShort(TimeValue value)", "class_method_signature": "MarketDisplayBaseImpl.dateTextShort(TimeValue value)", "testcase": false, "constructor": false}, {"identifier": "timeTextShort", "parameters": "(TimeValue value, DateTimeZone zone)", "modifiers": "@Override public", "return": "String", "signature": "String timeTextShort(TimeValue value, DateTimeZone zone)", "full_signature": "@Override public String timeTextShort(TimeValue value, DateTimeZone zone)", "class_method_signature": "MarketDisplayBaseImpl.timeTextShort(TimeValue value, DateTimeZone zone)", "testcase": false, "constructor": false}], "file": "base/src/main/java/com/barchart/feed/base/provider/MarketDisplayBaseImpl.java"}, "focal_method": {"identifier": "timeMonthShort", "parameters": "(TimeValue time)", "modifiers": "@Override public", "return": "String", "body": "@Override\n\tpublic String timeMonthShort(TimeValue time) {\n\t\ttime = filter(time);\n\t\treturn MONTH_SHORT.print(time.asMillisUTC()).toUpperCase();\n\t}", "signature": "String timeMonthShort(TimeValue time)", "full_signature": "@Override public String timeMonthShort(TimeValue time)", "class_method_signature": "MarketDisplayBaseImpl.timeMonthShort(TimeValue time)", "testcase": false, "constructor": false, "invocations": ["filter", "toUpperCase", "print", "asMillisUTC"]}, "repository": {"repo_id": 7243760, "url": "https://github.com/barchart/barchart-feed", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 6, "size": 64172, "license": "licensed"}}