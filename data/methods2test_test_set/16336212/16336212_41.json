{"test_class": {"identifier": "GaugeCollectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private GaugeCollector gaugeCollector;", "modifier": "private", "type": "GaugeCollector", "declarator": "gaugeCollector", "var_name": "gaugeCollector"}, {"original_string": "private LazyPlatformMBeanServer lazyPlatformMBeanServer;", "modifier": "private", "type": "LazyPlatformMBeanServer", "declarator": "lazyPlatformMBeanServer", "var_name": "lazyPlatformMBeanServer"}, {"original_string": "private Clock clock;", "modifier": "private", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "private Ticker ticker;", "modifier": "private", "type": "Ticker", "declarator": "ticker", "var_name": "ticker"}, {"original_string": "private Logger logger;", "modifier": "private", "type": "Logger", "declarator": "logger", "var_name": "logger"}], "file": "agent/core/src/test/java/org/glowroot/agent/init/GaugeCollectorTest.java"}, "test_case": {"identifier": "shouldHandleMBeanAttributeNotANumber", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldHandleMBeanAttributeNotANumber() throws Exception {\n        // given\n        GaugeConfig gaugeConfig = ImmutableGaugeConfig.builder()\n                .mbeanObjectName(\"xyz:aaa=bbb\")\n                .addMbeanAttributes(ImmutableMBeanAttribute.of(\"ccc\", false))\n                .addMbeanAttributes(ImmutableMBeanAttribute.of(\"ddd\", false))\n                .build();\n        when(lazyPlatformMBeanServer.getAttribute(any(ObjectName.class), anyString(),\n                anyMBeanServerList())).thenReturn(\"not a number\");\n\n        // when\n        collectGaugeValues(gaugeConfig);\n        collectGaugeValues(gaugeConfig);\n        collectGaugeValues(gaugeConfig);\n        collectGaugeValues(gaugeConfig);\n        collectGaugeValues(gaugeConfig);\n\n        // then\n        verify(logger).warn(\"error accessing mbean attribute {} {}: {}\", \"xyz:aaa=bbb\", \"ccc\",\n                \"MBean attribute value is not a valid number: \\\"not a number\\\"\");\n        verify(logger).warn(\"error accessing mbean attribute {} {}: {}\", \"xyz:aaa=bbb\", \"ddd\",\n                \"MBean attribute value is not a valid number: \\\"not a number\\\"\");\n    }", "signature": "void shouldHandleMBeanAttributeNotANumber()", "full_signature": "@Test public void shouldHandleMBeanAttributeNotANumber()", "class_method_signature": "GaugeCollectorTest.shouldHandleMBeanAttributeNotANumber()", "testcase": true, "constructor": false, "invocations": ["build", "addMbeanAttributes", "addMbeanAttributes", "mbeanObjectName", "builder", "of", "of", "thenReturn", "when", "getAttribute", "any", "anyString", "anyMBeanServerList", "collectGaugeValues", "collectGaugeValues", "collectGaugeValues", "collectGaugeValues", "collectGaugeValues", "warn", "verify", "warn", "verify"]}, "focal_class": {"identifier": "GaugeCollector", "superclass": "extends ScheduledRunnable", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(GaugeCollector.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(GaugeCollector.class)", "var_name": "logger"}, {"original_string": "private static final int PENDING_LIMIT = 60;", "modifier": "private static final", "type": "int", "declarator": "PENDING_LIMIT = 60", "var_name": "PENDING_LIMIT"}, {"original_string": "private final ConfigService configService;", "modifier": "private final", "type": "ConfigService", "declarator": "configService", "var_name": "configService"}, {"original_string": "private final Collector collector;", "modifier": "private final", "type": "Collector", "declarator": "collector", "var_name": "collector"}, {"original_string": "private final LazyPlatformMBeanServer lazyPlatformMBeanServer;", "modifier": "private final", "type": "LazyPlatformMBeanServer", "declarator": "lazyPlatformMBeanServer", "var_name": "lazyPlatformMBeanServer"}, {"original_string": "private final Clock clock;", "modifier": "private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "private final Ticker ticker;", "modifier": "private final", "type": "Ticker", "declarator": "ticker", "var_name": "ticker"}, {"original_string": "private final long startTimeMillis;", "modifier": "private final", "type": "long", "declarator": "startTimeMillis", "var_name": "startTimeMillis"}, {"original_string": "private final Set<String> pendingLoggedMBeanGauges = Sets.newConcurrentHashSet();", "modifier": "private final", "type": "Set<String>", "declarator": "pendingLoggedMBeanGauges = Sets.newConcurrentHashSet()", "var_name": "pendingLoggedMBeanGauges"}, {"original_string": "private final Set<String> loggedMBeanGauges = Sets.newConcurrentHashSet();", "modifier": "private final", "type": "Set<String>", "declarator": "loggedMBeanGauges = Sets.newConcurrentHashSet()", "var_name": "loggedMBeanGauges"}, {"original_string": "private final ScheduledExecutorService collectionExecutor;", "modifier": "private final", "type": "ScheduledExecutorService", "declarator": "collectionExecutor", "var_name": "collectionExecutor"}, {"original_string": "private final ExecutorService flushingExecutor;", "modifier": "private final", "type": "ExecutorService", "declarator": "flushingExecutor", "var_name": "flushingExecutor"}, {"original_string": "private final BlockingQueue<List<GaugeValue>> pending =\n            Queues.newLinkedBlockingQueue(PENDING_LIMIT);", "modifier": "private final", "type": "BlockingQueue<List<GaugeValue>>", "declarator": "pending =\n            Queues.newLinkedBlockingQueue(PENDING_LIMIT)", "var_name": "pending"}, {"original_string": "private final RateLimitedLogger backPressureLogger =\n            new RateLimitedLogger(GaugeCollector.class);", "modifier": "private final", "type": "RateLimitedLogger", "declarator": "backPressureLogger =\n            new RateLimitedLogger(GaugeCollector.class)", "var_name": "backPressureLogger"}, {"original_string": "private @MonotonicNonNull Map<String, RawCounterValue> priorRawCounterValues;", "modifier": "private @MonotonicNonNull", "type": "Map<String, RawCounterValue>", "declarator": "priorRawCounterValues", "var_name": "priorRawCounterValues"}, {"original_string": "private volatile boolean closed;", "modifier": "private volatile", "type": "boolean", "declarator": "closed", "var_name": "closed"}], "methods": [{"identifier": "GaugeCollector", "parameters": "(ConfigService configService, Collector collector,\n            LazyPlatformMBeanServer lazyPlatformMBeanServer,\n            final @Nullable Instrumentation instrumentation, Clock clock, Ticker ticker)", "modifiers": "", "return": "", "signature": " GaugeCollector(ConfigService configService, Collector collector,\n            LazyPlatformMBeanServer lazyPlatformMBeanServer,\n            final @Nullable Instrumentation instrumentation, Clock clock, Ticker ticker)", "full_signature": "  GaugeCollector(ConfigService configService, Collector collector,\n            LazyPlatformMBeanServer lazyPlatformMBeanServer,\n            final @Nullable Instrumentation instrumentation, Clock clock, Ticker ticker)", "class_method_signature": "GaugeCollector.GaugeCollector(ConfigService configService, Collector collector,\n            LazyPlatformMBeanServer lazyPlatformMBeanServer,\n            final @Nullable Instrumentation instrumentation, Clock clock, Ticker ticker)", "testcase": false, "constructor": true}, {"identifier": "runInternal", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void runInternal()", "full_signature": "@Override protected void runInternal()", "class_method_signature": "GaugeCollector.runInternal()", "testcase": false, "constructor": false}, {"identifier": "scheduleWithFixedDelay", "parameters": "(long period, TimeUnit unit)", "modifiers": "", "return": "void", "signature": "void scheduleWithFixedDelay(long period, TimeUnit unit)", "full_signature": " void scheduleWithFixedDelay(long period, TimeUnit unit)", "class_method_signature": "GaugeCollector.scheduleWithFixedDelay(long period, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "", "return": "void", "signature": "void close()", "full_signature": " void close()", "class_method_signature": "GaugeCollector.close()", "testcase": false, "constructor": false}, {"identifier": "collectGaugeValues", "parameters": "(GaugeConfig gaugeConfig, List<MBeanServer> mbeanServers)", "modifiers": "@VisibleForTesting @RequiresNonNull(\"priorRawCounterValues\")", "return": "List<GaugeValue>", "signature": "List<GaugeValue> collectGaugeValues(GaugeConfig gaugeConfig, List<MBeanServer> mbeanServers)", "full_signature": "@VisibleForTesting @RequiresNonNull(\"priorRawCounterValues\") List<GaugeValue> collectGaugeValues(GaugeConfig gaugeConfig, List<MBeanServer> mbeanServers)", "class_method_signature": "GaugeCollector.collectGaugeValues(GaugeConfig gaugeConfig, List<MBeanServer> mbeanServers)", "testcase": false, "constructor": false}, {"identifier": "collectGaugeValues", "parameters": "(ObjectName objectName,\n            List<ImmutableMBeanAttribute> mbeanAttributes, String mbeanObjectName,\n            List<MBeanServer> mbeanServers)", "modifiers": "@RequiresNonNull(\"priorRawCounterValues\") private", "return": "List<GaugeValue>", "signature": "List<GaugeValue> collectGaugeValues(ObjectName objectName,\n            List<ImmutableMBeanAttribute> mbeanAttributes, String mbeanObjectName,\n            List<MBeanServer> mbeanServers)", "full_signature": "@RequiresNonNull(\"priorRawCounterValues\") private List<GaugeValue> collectGaugeValues(ObjectName objectName,\n            List<ImmutableMBeanAttribute> mbeanAttributes, String mbeanObjectName,\n            List<MBeanServer> mbeanServers)", "class_method_signature": "GaugeCollector.collectGaugeValues(ObjectName objectName,\n            List<ImmutableMBeanAttribute> mbeanAttributes, String mbeanObjectName,\n            List<MBeanServer> mbeanServers)", "testcase": false, "constructor": false}, {"identifier": "logFirstTimeMBeanNotMatchedOrFound", "parameters": "(String mbeanObjectName)", "modifiers": "private", "return": "void", "signature": "void logFirstTimeMBeanNotMatchedOrFound(String mbeanObjectName)", "full_signature": "private void logFirstTimeMBeanNotMatchedOrFound(String mbeanObjectName)", "class_method_signature": "GaugeCollector.logFirstTimeMBeanNotMatchedOrFound(String mbeanObjectName)", "testcase": false, "constructor": false}, {"identifier": "logFirstTimeMBeanAttributeNotFound", "parameters": "(String mbeanObjectName,\n            String mbeanAttributeName)", "modifiers": "private", "return": "void", "signature": "void logFirstTimeMBeanAttributeNotFound(String mbeanObjectName,\n            String mbeanAttributeName)", "full_signature": "private void logFirstTimeMBeanAttributeNotFound(String mbeanObjectName,\n            String mbeanAttributeName)", "class_method_signature": "GaugeCollector.logFirstTimeMBeanAttributeNotFound(String mbeanObjectName,\n            String mbeanAttributeName)", "testcase": false, "constructor": false}, {"identifier": "logFirstTimeMBeanException", "parameters": "(String mbeanObjectName, Exception e)", "modifiers": "private", "return": "void", "signature": "void logFirstTimeMBeanException(String mbeanObjectName, Exception e)", "full_signature": "private void logFirstTimeMBeanException(String mbeanObjectName, Exception e)", "class_method_signature": "GaugeCollector.logFirstTimeMBeanException(String mbeanObjectName, Exception e)", "testcase": false, "constructor": false}, {"identifier": "logFirstTimeMBeanAttributeError", "parameters": "(String mbeanObjectName, String mbeanAttributeName,\n            String message)", "modifiers": "private", "return": "void", "signature": "void logFirstTimeMBeanAttributeError(String mbeanObjectName, String mbeanAttributeName,\n            String message)", "full_signature": "private void logFirstTimeMBeanAttributeError(String mbeanObjectName, String mbeanAttributeName,\n            String message)", "class_method_signature": "GaugeCollector.logFirstTimeMBeanAttributeError(String mbeanObjectName, String mbeanAttributeName,\n            String message)", "testcase": false, "constructor": false}, {"identifier": "logFirstTimeMBeanAttributeError", "parameters": "(String mbeanObjectName, String mbeanAttributeName,\n            Exception e)", "modifiers": "private", "return": "void", "signature": "void logFirstTimeMBeanAttributeError(String mbeanObjectName, String mbeanAttributeName,\n            Exception e)", "full_signature": "private void logFirstTimeMBeanAttributeError(String mbeanObjectName, String mbeanAttributeName,\n            Exception e)", "class_method_signature": "GaugeCollector.logFirstTimeMBeanAttributeError(String mbeanObjectName, String mbeanAttributeName,\n            Exception e)", "testcase": false, "constructor": false}], "file": "agent/core/src/main/java/org/glowroot/agent/init/GaugeCollector.java"}, "focal_method": {"identifier": "collectGaugeValues", "parameters": "(GaugeConfig gaugeConfig, List<MBeanServer> mbeanServers)", "modifiers": "@VisibleForTesting @RequiresNonNull(\"priorRawCounterValues\")", "return": "List<GaugeValue>", "body": "@VisibleForTesting\n    @RequiresNonNull(\"priorRawCounterValues\")\n    List<GaugeValue> collectGaugeValues(GaugeConfig gaugeConfig, List<MBeanServer> mbeanServers)\n            throws Exception {\n        String mbeanObjectName = gaugeConfig.mbeanObjectName();\n        ObjectName objectName;\n        try {\n            objectName = ObjectName.getInstance(mbeanObjectName);\n        } catch (MalformedObjectNameException e) {\n            logger.debug(e.getMessage(), e);\n            logFirstTimeMBeanException(mbeanObjectName, e);\n            return ImmutableList.of();\n        }\n        if (!objectName.isPattern()) {\n            return collectGaugeValues(objectName, gaugeConfig.mbeanAttributes(), mbeanObjectName,\n                    mbeanServers);\n        }\n        Set<ObjectName> matchingObjectNames =\n                lazyPlatformMBeanServer.queryNames(objectName, null, mbeanServers);\n        if (matchingObjectNames.isEmpty()) {\n            logFirstTimeMBeanNotMatchedOrFound(mbeanObjectName);\n            return ImmutableList.of();\n        }\n        // remove from pendingLoggedMBeanGauges so if it is later not found, it will be logged\n        // normally and not with \"waited ... seconds after jvm startup before logging this\" message\n        pendingLoggedMBeanGauges.remove(mbeanObjectName);\n        List<GaugeValue> gaugeValues = Lists.newArrayList();\n        for (ObjectName matchingObjectName : matchingObjectNames) {\n            gaugeValues.addAll(collectGaugeValues(matchingObjectName, gaugeConfig.mbeanAttributes(),\n                    matchingObjectName.getDomain() + \":\"\n                            + matchingObjectName.getKeyPropertyListString(),\n                    mbeanServers));\n        }\n        return gaugeValues;\n    }", "signature": "List<GaugeValue> collectGaugeValues(GaugeConfig gaugeConfig, List<MBeanServer> mbeanServers)", "full_signature": "@VisibleForTesting @RequiresNonNull(\"priorRawCounterValues\") List<GaugeValue> collectGaugeValues(GaugeConfig gaugeConfig, List<MBeanServer> mbeanServers)", "class_method_signature": "GaugeCollector.collectGaugeValues(GaugeConfig gaugeConfig, List<MBeanServer> mbeanServers)", "testcase": false, "constructor": false, "invocations": ["mbeanObjectName", "getInstance", "debug", "getMessage", "logFirstTimeMBeanException", "of", "isPattern", "collectGaugeValues", "mbeanAttributes", "queryNames", "isEmpty", "logFirstTimeMBeanNotMatchedOrFound", "of", "remove", "newArrayList", "addAll", "collectGaugeValues", "mbeanAttributes", "getDomain", "getKeyPropertyListString"]}, "repository": {"repo_id": 16336212, "url": "https://github.com/glowroot/glowroot", "stars": 736, "created": "1/29/2014 5:25:58 AM +00:00", "updates": "2020-01-24T11:13:42+00:00", "fork": "False", "license": "licensed"}}