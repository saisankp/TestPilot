{"test_class": {"identifier": "TestInputItemRecognitionEventStrategy", "superclass": "", "interfaces": "", "fields": [{"original_string": "private VoiceXmlInterpreterContext context;", "modifier": "private", "type": "VoiceXmlInterpreterContext", "declarator": "context", "var_name": "context"}, {"original_string": "private VoiceXmlInterpreter interpreter;", "modifier": "private", "type": "VoiceXmlInterpreter", "declarator": "interpreter", "var_name": "interpreter"}], "file": "org.jvoicexml/src/test/java/org/jvoicexml/interpreter/event/TestInputItemRecognitionEventStrategy.java"}, "test_case": {"identifier": "testHandleEvent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHandleEvent() throws Exception, JVoiceXMLEvent {\n        final VoiceXmlDocument document = new VoiceXmlDocument();\n        final Vxml vxml = document.getVxml();\n        final Form form = vxml.appendChild(Form.class);\n\n        final Field field = form.appendChild(Field.class);\n        field.setName(\"field\");\n\n        final RecognitionResult result = Mockito.mock(RecognitionResult.class);\n        Mockito.when(result.getUtterance()).thenReturn(\"hello world\");\n        Mockito.when(result.isAccepted()).thenReturn(true);\n        Mockito.when(result.getConfidence()).thenReturn(0.55f);\n        Mockito.when(result.getMode()).thenReturn(ModeType.VOICE);\n\n        Mockito.when(context.getProperty(\"confidencelevel\", \"0.5\")).thenReturn(\n                \"0.5\");\n\n        final FieldFormItem formItem = new FieldFormItem(context, field);\n        final InputItemRecognitionEventStrategy strategy = new InputItemRecognitionEventStrategy(\n                context, interpreter, null, formItem);\n        final JVoiceXMLEvent event = new RecognitionEvent(null, null, result);\n        final boolean handled = strategy.handleEvent(formItem, event);\n        Assert.assertTrue(\"event should have been handled\", handled);\n        Mockito.verify(context.getDataModel()).createVariable(\n                \"lastresult$.utterance\", \"hello world\", Scope.APPLICATION);\n    }", "signature": "void testHandleEvent()", "full_signature": "@Test public void testHandleEvent()", "class_method_signature": "TestInputItemRecognitionEventStrategy.testHandleEvent()", "testcase": true, "constructor": false, "invocations": ["getVxml", "appendChild", "appendChild", "setName", "mock", "thenReturn", "when", "getUtterance", "thenReturn", "when", "isAccepted", "thenReturn", "when", "getConfidence", "thenReturn", "when", "getMode", "thenReturn", "when", "getProperty", "handleEvent", "assertTrue", "createVariable", "verify", "getDataModel"]}, "focal_class": {"identifier": "InputItemRecognitionEventStrategy", "superclass": "extends AbstractInputItemEventStrategy<FieldFormItem>", "interfaces": "implements EventStrategyPrototype", "fields": [{"original_string": "private static final Logger LOGGER = LogManager\n            .getLogger(InputItemRecognitionEventStrategy.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LogManager\n            .getLogger(InputItemRecognitionEventStrategy.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "InputItemRecognitionEventStrategy", "parameters": "()", "modifiers": "", "return": "", "signature": " InputItemRecognitionEventStrategy()", "full_signature": "  InputItemRecognitionEventStrategy()", "class_method_signature": "InputItemRecognitionEventStrategy.InputItemRecognitionEventStrategy()", "testcase": false, "constructor": true}, {"identifier": "InputItemRecognitionEventStrategy", "parameters": "(\n            final VoiceXmlInterpreterContext ctx,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm algorithm,\n            final FormItem formItem)", "modifiers": "public", "return": "", "signature": " InputItemRecognitionEventStrategy(\n            final VoiceXmlInterpreterContext ctx,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm algorithm,\n            final FormItem formItem)", "full_signature": "public  InputItemRecognitionEventStrategy(\n            final VoiceXmlInterpreterContext ctx,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm algorithm,\n            final FormItem formItem)", "class_method_signature": "InputItemRecognitionEventStrategy.InputItemRecognitionEventStrategy(\n            final VoiceXmlInterpreterContext ctx,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm algorithm,\n            final FormItem formItem)", "testcase": false, "constructor": true}, {"identifier": "setApplicationLastResult", "parameters": "(final RecognitionResult result)", "modifiers": "private", "return": "void", "signature": "void setApplicationLastResult(final RecognitionResult result)", "full_signature": "private void setApplicationLastResult(final RecognitionResult result)", "class_method_signature": "InputItemRecognitionEventStrategy.setApplicationLastResult(final RecognitionResult result)", "testcase": false, "constructor": false}, {"identifier": "handleEvent", "parameters": "(final FieldFormItem field,\n            final JVoiceXMLEvent event)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean handleEvent(final FieldFormItem field,\n            final JVoiceXMLEvent event)", "full_signature": "@Override protected boolean handleEvent(final FieldFormItem field,\n            final JVoiceXMLEvent event)", "class_method_signature": "InputItemRecognitionEventStrategy.handleEvent(final FieldFormItem field,\n            final JVoiceXMLEvent event)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(final VoiceXmlInterpreterContext ctx,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item)", "modifiers": "@Override public", "return": "EventStrategy", "signature": "EventStrategy newInstance(final VoiceXmlInterpreterContext ctx,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item)", "full_signature": "@Override public EventStrategy newInstance(final VoiceXmlInterpreterContext ctx,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item)", "class_method_signature": "InputItemRecognitionEventStrategy.newInstance(final VoiceXmlInterpreterContext ctx,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item)", "testcase": false, "constructor": false}], "file": "org.jvoicexml/src/main/java/org/jvoicexml/interpreter/event/InputItemRecognitionEventStrategy.java"}, "focal_method": {"identifier": "handleEvent", "parameters": "(final FieldFormItem field,\n            final JVoiceXMLEvent event)", "modifiers": "@Override protected", "return": "boolean", "body": "@Override\n    protected boolean handleEvent(final FieldFormItem field,\n            final JVoiceXMLEvent event) throws JVoiceXMLEvent {\n        // First, set the application last result values\n        final RecognitionEvent recognitionEvent = (RecognitionEvent) event;\n        final RecognitionResult result = recognitionEvent\n                .getRecognitionResult();\n        setApplicationLastResult(result);\n\n        // Check if a (correct) confidencelevel was specified.\n        // If there was no confidencelevel set, refer to the default of 0.5\n        // see http://www.w3.org/TR/voicexml20/#dml6.3.2\n        final VoiceXmlInterpreterContext ctx = getVoiceXmlInterpreterContext();\n        final String confidencelevel = ctx\n                .getProperty(\"confidencelevel\", \"0.5\");\n        float level;\n        try {\n            level = Float.parseFloat(confidencelevel);\n        } catch (Exception e) {\n            throw new SemanticError(\"The <property>'s confidencelevel '\"\n                    + confidencelevel + \"'could not be parsed.\", e);\n        }\n        if (result.getConfidence() < level) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(\"result not accepted: \"\n                        + \"confidence was too low: \" + \"expected: \" + level\n                        + \", \" + \"actual: \" + result.getConfidence());\n            }\n            throw new NomatchEvent(recognitionEvent.getSource(),\n                    recognitionEvent.getSessionId(), result);\n        }\n\n        // Simply reject, if the result was not accepted\n        if (!result.isAccepted()) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(\"result not accepted\");\n            }\n            return false;\n        }\n        return true;\n    }", "signature": "boolean handleEvent(final FieldFormItem field,\n            final JVoiceXMLEvent event)", "full_signature": "@Override protected boolean handleEvent(final FieldFormItem field,\n            final JVoiceXMLEvent event)", "class_method_signature": "InputItemRecognitionEventStrategy.handleEvent(final FieldFormItem field,\n            final JVoiceXMLEvent event)", "testcase": false, "constructor": false, "invocations": ["getRecognitionResult", "setApplicationLastResult", "getVoiceXmlInterpreterContext", "getProperty", "parseFloat", "getConfidence", "isDebugEnabled", "debug", "getConfidence", "getSource", "getSessionId", "isAccepted", "isDebugEnabled", "debug"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}