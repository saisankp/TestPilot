{"test_class": {"identifier": "TopologicalSorterTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/github/swissquote/carnotzet/core/maven/TopologicalSorterTest.java"}, "test_case": {"identifier": "depth_first_counter_example", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void depth_first_counter_example() {\n\t\tNode a = createNode(\"a\", \"1\");\n\t\tNode b = createNode(\"b\", \"1\");\n\t\tNode c = createNode(\"c\", \"2\");\n\t\tNode oc = createOmittedNode(\"c\", \"1\");\n\t\tNode d = createNode(\"d\", \"1\");\n\n\t\ta.addChildNode(oc);\n\t\ta.addChildNode(b);\n\t\tb.addChildNode(c);\n\t\tc.addChildNode(d);\n\t\t// unexpressed : oc depends on d\n\n\t\tList<Node> resultNodes = new TopologicalSorter().sort(a, true);\n\t\tList<String> r = resultNodes.stream().map(Node::getArtifactId).collect(Collectors.toList());\n\t\tAssert.assertTrue(r.indexOf(\"a\") > r.indexOf(\"c\"));\n\t\tAssert.assertTrue(r.indexOf(\"a\") > r.indexOf(\"b\"));\n\t\tAssert.assertTrue(r.indexOf(\"b\") > r.indexOf(\"c\"));\n\t\tAssert.assertTrue(r.indexOf(\"c\") > r.indexOf(\"d\"));\n\t\tAssert.assertTrue(resultNodes.contains(c));\n\t}", "signature": "void depth_first_counter_example()", "full_signature": "@Test public void depth_first_counter_example()", "class_method_signature": "TopologicalSorterTest.depth_first_counter_example()", "testcase": true, "constructor": false, "invocations": ["createNode", "createNode", "createNode", "createOmittedNode", "createNode", "addChildNode", "addChildNode", "addChildNode", "addChildNode", "sort", "collect", "map", "stream", "toList", "assertTrue", "indexOf", "indexOf", "assertTrue", "indexOf", "indexOf", "assertTrue", "indexOf", "indexOf", "assertTrue", "indexOf", "indexOf", "assertTrue", "contains"]}, "focal_class": {"identifier": "TopologicalSorter", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "sort", "parameters": "(Node root, boolean failOnCycles)", "modifiers": "public", "return": "List<Node>", "signature": "List<Node> sort(Node root, boolean failOnCycles)", "full_signature": "public List<Node> sort(Node root, boolean failOnCycles)", "class_method_signature": "TopologicalSorter.sort(Node root, boolean failOnCycles)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/github/swissquote/carnotzet/core/maven/TopologicalSorter.java"}, "focal_method": {"identifier": "sort", "parameters": "(Node root, boolean failOnCycles)", "modifiers": "public", "return": "List<Node>", "body": "public List<Node> sort(Node root, boolean failOnCycles) {\n\t\treturn new Sort(root, failOnCycles).compute();\n\t}", "signature": "List<Node> sort(Node root, boolean failOnCycles)", "full_signature": "public List<Node> sort(Node root, boolean failOnCycles)", "class_method_signature": "TopologicalSorter.sort(Node root, boolean failOnCycles)", "testcase": false, "constructor": false, "invocations": ["compute"]}, "repository": {"repo_id": 86467203, "url": "https://github.com/swissquote/carnotzet", "language": "Java", "is_fork": false, "fork_count": 16, "stargazer_count": 36, "size": 803, "license": "licensed"}}