{"test_class": {"identifier": "JavaModuleDependencyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IdeaModuleDependency myOriginalDependency;", "modifier": "private", "type": "IdeaModuleDependency", "declarator": "myOriginalDependency", "var_name": "myOriginalDependency"}, {"original_string": "private IdeaModule myIdeaModule;", "modifier": "private", "type": "IdeaModule", "declarator": "myIdeaModule", "var_name": "myIdeaModule"}, {"original_string": "private IdeaProject myIdeaProject;", "modifier": "private", "type": "IdeaProject", "declarator": "myIdeaProject", "var_name": "myIdeaProject"}], "file": "android/testSrc/com/android/tools/idea/gradle/model/java/JavaModuleDependencyTest.java"}, "test_case": {"identifier": "testCopyWithNullModuleName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCopyWithNullModuleName() {\n    expect(myIdeaProject.getModules()).andReturn(ImmutableDomainObjectSet.of(ImmutableList.of()));\n    expect(myIdeaModule.getName()).andStubReturn(null);\n    replay(myOriginalDependency, myIdeaModule, myIdeaProject);\n    assertNull(JavaModuleDependency.copy(myIdeaProject, myOriginalDependency));\n    verify(myOriginalDependency, myIdeaModule);\n  }", "signature": "void testCopyWithNullModuleName()", "full_signature": "@Test public void testCopyWithNullModuleName()", "class_method_signature": "JavaModuleDependencyTest.testCopyWithNullModuleName()", "testcase": true, "constructor": false, "invocations": ["andReturn", "expect", "getModules", "of", "of", "andStubReturn", "expect", "getName", "replay", "assertNull", "copy", "verify"]}, "focal_class": {"identifier": "JavaModuleDependency", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 3L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 3L", "var_name": "serialVersionUID"}, {"original_string": "@NotNull private final String myModuleName;", "modifier": "@NotNull private final", "type": "String", "declarator": "myModuleName", "var_name": "myModuleName"}, {"original_string": "@NotNull private final String myModuleId;", "modifier": "@NotNull private final", "type": "String", "declarator": "myModuleId", "var_name": "myModuleId"}, {"original_string": "@Nullable private final String myScope;", "modifier": "@Nullable private final", "type": "String", "declarator": "myScope", "var_name": "myScope"}, {"original_string": "private final boolean myExported;", "modifier": "private final", "type": "boolean", "declarator": "myExported", "var_name": "myExported"}], "methods": [{"identifier": "copy", "parameters": "(IdeaProject project, IdeaModuleDependency original)", "modifiers": "@Nullable public static", "return": "JavaModuleDependency", "signature": "JavaModuleDependency copy(IdeaProject project, IdeaModuleDependency original)", "full_signature": "@Nullable public static JavaModuleDependency copy(IdeaProject project, IdeaModuleDependency original)", "class_method_signature": "JavaModuleDependency.copy(IdeaProject project, IdeaModuleDependency original)", "testcase": false, "constructor": false}, {"identifier": "JavaModuleDependency", "parameters": "(@NotNull String moduleName, @NotNull String moduleId, @Nullable String scope, boolean exported)", "modifiers": "@PropertyMapping({ \"myModuleName\", \"myModuleId\", \"myScope\", \"myExported\" }) public", "return": "", "signature": " JavaModuleDependency(@NotNull String moduleName, @NotNull String moduleId, @Nullable String scope, boolean exported)", "full_signature": "@PropertyMapping({ \"myModuleName\", \"myModuleId\", \"myScope\", \"myExported\" }) public  JavaModuleDependency(@NotNull String moduleName, @NotNull String moduleId, @Nullable String scope, boolean exported)", "class_method_signature": "JavaModuleDependency.JavaModuleDependency(@NotNull String moduleName, @NotNull String moduleId, @Nullable String scope, boolean exported)", "testcase": false, "constructor": true}, {"identifier": "getModuleName", "parameters": "()", "modifiers": "@NotNull public", "return": "String", "signature": "String getModuleName()", "full_signature": "@NotNull public String getModuleName()", "class_method_signature": "JavaModuleDependency.getModuleName()", "testcase": false, "constructor": false}, {"identifier": "getModuleId", "parameters": "()", "modifiers": "@NotNull public", "return": "String", "signature": "String getModuleId()", "full_signature": "@NotNull public String getModuleId()", "class_method_signature": "JavaModuleDependency.getModuleId()", "testcase": false, "constructor": false}, {"identifier": "getScope", "parameters": "()", "modifiers": "@Nullable public", "return": "String", "signature": "String getScope()", "full_signature": "@Nullable public String getScope()", "class_method_signature": "JavaModuleDependency.getScope()", "testcase": false, "constructor": false}, {"identifier": "isExported", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isExported()", "full_signature": "public boolean isExported()", "class_method_signature": "JavaModuleDependency.isExported()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "JavaModuleDependency.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "JavaModuleDependency.equals(Object obj)", "testcase": false, "constructor": false}], "file": "android/src/com/android/tools/idea/gradle/model/java/JavaModuleDependency.java"}, "focal_method": {"identifier": "copy", "parameters": "(IdeaProject project, IdeaModuleDependency original)", "modifiers": "@Nullable public static", "return": "JavaModuleDependency", "body": "@Nullable\n  public static JavaModuleDependency copy(IdeaProject project, IdeaModuleDependency original) {\n    IdeaModule targetModule = null;\n    for (IdeaModule module : project.getModules()) {\n      if (module.getName().equals(original.getTargetModuleName())) {\n         targetModule= module;\n      }\n    }\n\n    if (targetModule != null && isNotEmpty(targetModule.getName())) {\n      String scope = null;\n      IdeaDependencyScope originalScope = original.getScope();\n      if (originalScope != null) {\n        scope = originalScope.getScope();\n      }\n      GradleProject gradleProject = targetModule.getGradleProject();\n\n      File projectFolder;\n      try {\n        projectFolder = gradleProject.getProjectIdentifier().getBuildIdentifier().getRootDir();\n      }\n      catch (UnsupportedMethodException ex) {\n        // Old version of Gradle doesn't support getProjectIdentifier, find folder path of the root project.\n        GradleProject rootGradleProject = gradleProject;\n        while (rootGradleProject.getParent() != null) {\n          rootGradleProject = rootGradleProject.getParent();\n        }\n        projectFolder = rootGradleProject.getProjectDirectory();\n      }\n      String moduleId = createUniqueModuleId(projectFolder, gradleProject.getPath());\n      return new JavaModuleDependency(targetModule.getName(), moduleId, scope, original.getExported());\n    }\n    return null;\n  }", "signature": "JavaModuleDependency copy(IdeaProject project, IdeaModuleDependency original)", "full_signature": "@Nullable public static JavaModuleDependency copy(IdeaProject project, IdeaModuleDependency original)", "class_method_signature": "JavaModuleDependency.copy(IdeaProject project, IdeaModuleDependency original)", "testcase": false, "constructor": false, "invocations": ["getModules", "equals", "getName", "getTargetModuleName", "isNotEmpty", "getName", "getScope", "getScope", "getGradleProject", "getRootDir", "getBuildIdentifier", "getProjectIdentifier", "getParent", "getParent", "getProjectDirectory", "createUniqueModuleId", "getPath", "getName", "getExported"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}