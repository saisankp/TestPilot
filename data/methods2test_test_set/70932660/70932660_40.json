{"test_class": {"identifier": "AzureClientIdCertificateCredentialFactoryImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "String clientId = \"client-id\";", "modifier": "", "type": "String", "declarator": "clientId = \"client-id\"", "var_name": "clientId"}, {"original_string": "String keystorePath = \"keystore-path\";", "modifier": "", "type": "String", "declarator": "keystorePath = \"keystore-path\"", "var_name": "keystorePath"}, {"original_string": "String keystorePassword = \"keystore-password\";", "modifier": "", "type": "String", "declarator": "keystorePassword = \"keystore-password\"", "var_name": "keystorePassword"}, {"original_string": "String certificatePassword = \"certificate-password\";", "modifier": "", "type": "String", "declarator": "certificatePassword = \"certificate-password\"", "var_name": "certificatePassword"}], "file": "nvadaemon-azure/src/test/java/com/microsoft/azure/practices/nvadaemon/credentials/AzureClientIdCertificateCredentialFactoryImplTest.java"}, "test_case": {"identifier": "testInvalidFilePath", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testInvalidFilePath() {\n        AzureClientIdCertificateCredentialFactoryImpl factory =\n            new AzureClientIdCertificateCredentialFactoryImpl(clientId,\n            keystorePath, keystorePassword, certificatePassword);\n        Assertions.assertThrows(GeneralSecurityException.class,\n            () -> factory.create(\"resource\"));\n    }", "signature": "void testInvalidFilePath()", "full_signature": "@Test void testInvalidFilePath()", "class_method_signature": "AzureClientIdCertificateCredentialFactoryImplTest.testInvalidFilePath()", "testcase": true, "constructor": false, "invocations": ["assertThrows", "create"]}, "focal_class": {"identifier": "AzureClientIdCertificateCredentialFactoryImpl", "superclass": "", "interfaces": "implements AsymmetricKeyCredentialFactory", "fields": [{"original_string": "private String clientId;", "modifier": "private", "type": "String", "declarator": "clientId", "var_name": "clientId"}, {"original_string": "private String keyStorePath;", "modifier": "private", "type": "String", "declarator": "keyStorePath", "var_name": "keyStorePath"}, {"original_string": "private String keyStorePassword;", "modifier": "private", "type": "String", "declarator": "keyStorePassword", "var_name": "keyStorePassword"}, {"original_string": "private String certificatePassword;", "modifier": "private", "type": "String", "declarator": "certificatePassword", "var_name": "certificatePassword"}], "methods": [{"identifier": "AzureClientIdCertificateCredentialFactoryImpl", "parameters": "(String clientId, String keyStorePath,\n                                                         String keyStorePassword,\n                                                         String certificatePassword)", "modifiers": "public", "return": "", "signature": " AzureClientIdCertificateCredentialFactoryImpl(String clientId, String keyStorePath,\n                                                         String keyStorePassword,\n                                                         String certificatePassword)", "full_signature": "public  AzureClientIdCertificateCredentialFactoryImpl(String clientId, String keyStorePath,\n                                                         String keyStorePassword,\n                                                         String certificatePassword)", "class_method_signature": "AzureClientIdCertificateCredentialFactoryImpl.AzureClientIdCertificateCredentialFactoryImpl(String clientId, String keyStorePath,\n                                                         String keyStorePassword,\n                                                         String certificatePassword)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(String resource)", "modifiers": "@Override public", "return": "AsymmetricKeyCredential", "signature": "AsymmetricKeyCredential create(String resource)", "full_signature": "@Override public AsymmetricKeyCredential create(String resource)", "class_method_signature": "AzureClientIdCertificateCredentialFactoryImpl.create(String resource)", "testcase": false, "constructor": false}], "file": "nvadaemon-azure/src/main/java/com/microsoft/azure/practices/nvadaemon/credentials/AzureClientIdCertificateCredentialFactoryImpl.java"}, "focal_method": {"identifier": "create", "parameters": "(String resource)", "modifiers": "@Override public", "return": "AsymmetricKeyCredential", "body": "@Override\n    public AsymmetricKeyCredential create(String resource) throws GeneralSecurityException {\n        // We don't care about the resource in our scenario, so we will ignore it.\n        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\n        try (FileInputStream inputStream = new FileInputStream(\n            this.keyStorePath)) {\n            keyStore.load(inputStream, this.keyStorePassword.toCharArray());\n            // Assuming there is only one entry here.\n            String alias = keyStore.aliases().nextElement();\n            KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry)keyStore.getEntry(alias,\n                new KeyStore.PasswordProtection(this.certificatePassword.toCharArray()));\n            AsymmetricKeyCredential credential = AsymmetricKeyCredential.create(\n                this.clientId, privateKeyEntry.getPrivateKey(),\n                (X509Certificate)privateKeyEntry.getCertificate());\n            return credential;\n        } catch (IOException e) {\n            throw new GeneralSecurityException(\"Could not load KeyStore file\", e);\n        }\n    }", "signature": "AsymmetricKeyCredential create(String resource)", "full_signature": "@Override public AsymmetricKeyCredential create(String resource)", "class_method_signature": "AzureClientIdCertificateCredentialFactoryImpl.create(String resource)", "testcase": false, "constructor": false, "invocations": ["getInstance", "getDefaultType", "load", "toCharArray", "nextElement", "aliases", "getEntry", "toCharArray", "create", "getPrivateKey", "getCertificate"]}, "repository": {"repo_id": 70932660, "url": "https://github.com/mspnp/ha-nva", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 27, "size": 38331, "license": "licensed"}}