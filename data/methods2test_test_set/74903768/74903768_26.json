{"test_class": {"identifier": "SmartCardReaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public final ExpectedException exception = ExpectedException.none();", "modifier": "@Rule public final", "type": "ExpectedException", "declarator": "exception = ExpectedException.none()", "var_name": "exception"}, {"original_string": "private SmartCardReader smartCardReader;", "modifier": "private", "type": "SmartCardReader", "declarator": "smartCardReader", "var_name": "smartCardReader"}], "file": "smart-card-reader-lib/src/test/java/ee/ria/DigiDoc/smartcardreader/SmartCardReaderTest.java"}, "test_case": {"identifier": "transmit_response9000", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void transmit_response9000() throws Exception {\n        when(smartCardReader.transmit(any()))\n                .thenReturn(new byte[] {(byte) 0x90, 0x00});\n\n        assertThat(smartCardReader.transmit(0x00, 0x00, 0x00, 0x00, null, null))\n                .isEqualTo(new byte[0]);\n    }", "signature": "void transmit_response9000()", "full_signature": "@Test public void transmit_response9000()", "class_method_signature": "SmartCardReaderTest.transmit_response9000()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "transmit", "any", "isEqualTo", "assertThat", "transmit"]}, "focal_class": {"identifier": "SmartCardReader", "superclass": "", "interfaces": "implements AutoCloseable", "fields": [], "methods": [{"identifier": "supports", "parameters": "(UsbDevice usbDevice)", "modifiers": "public abstract", "return": "boolean", "signature": "boolean supports(UsbDevice usbDevice)", "full_signature": "public abstract boolean supports(UsbDevice usbDevice)", "class_method_signature": "SmartCardReader.supports(UsbDevice usbDevice)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(UsbDevice usbDevice)", "modifiers": "public abstract", "return": "void", "signature": "void open(UsbDevice usbDevice)", "full_signature": "public abstract void open(UsbDevice usbDevice)", "class_method_signature": "SmartCardReader.open(UsbDevice usbDevice)", "testcase": false, "constructor": false}, {"identifier": "connected", "parameters": "()", "modifiers": "public abstract", "return": "boolean", "signature": "boolean connected()", "full_signature": "public abstract boolean connected()", "class_method_signature": "SmartCardReader.connected()", "testcase": false, "constructor": false}, {"identifier": "atr", "parameters": "()", "modifiers": "public abstract", "return": "byte[]", "signature": "byte[] atr()", "full_signature": "public abstract byte[] atr()", "class_method_signature": "SmartCardReader.atr()", "testcase": false, "constructor": false}, {"identifier": "transmit", "parameters": "(byte[] apdu)", "modifiers": "protected abstract", "return": "byte[]", "signature": "byte[] transmit(byte[] apdu)", "full_signature": "protected abstract byte[] transmit(byte[] apdu)", "class_method_signature": "SmartCardReader.transmit(byte[] apdu)", "testcase": false, "constructor": false}, {"identifier": "transmit", "parameters": "(int cla, int ins, int p1, int p2, byte[] data, Integer le)", "modifiers": "public final", "return": "byte[]", "signature": "byte[] transmit(int cla, int ins, int p1, int p2, byte[] data, Integer le)", "full_signature": "public final byte[] transmit(int cla, int ins, int p1, int p2, byte[] data, Integer le)", "class_method_signature": "SmartCardReader.transmit(int cla, int ins, int p1, int p2, byte[] data, Integer le)", "testcase": false, "constructor": false}, {"identifier": "appendLe", "parameters": "(byte[] apdu, Integer le)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] appendLe(byte[] apdu, Integer le)", "full_signature": "private static byte[] appendLe(byte[] apdu, Integer le)", "class_method_signature": "SmartCardReader.appendLe(byte[] apdu, Integer le)", "testcase": false, "constructor": false}], "file": "smart-card-reader-lib/src/main/java/ee/ria/DigiDoc/smartcardreader/SmartCardReader.java"}, "focal_method": {"identifier": "transmit", "parameters": "(byte[] apdu)", "modifiers": "protected abstract", "return": "byte[]", "body": "protected abstract byte[] transmit(byte[] apdu) throws SmartCardReaderException;", "signature": "byte[] transmit(byte[] apdu)", "full_signature": "protected abstract byte[] transmit(byte[] apdu)", "class_method_signature": "SmartCardReader.transmit(byte[] apdu)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 74903768, "url": "https://github.com/open-eid/MOPP-Android", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 9, "size": 526035, "license": "licensed"}}