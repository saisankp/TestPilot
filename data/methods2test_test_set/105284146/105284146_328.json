{"test_class": {"identifier": "StoredDoubleTimeSeriesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException exception = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "exception = ExpectedException.none()", "var_name": "exception"}], "file": "time-series/time-series-api/src/test/java/com/powsybl/timeseries/StoredDoubleTimeSeriesTest.java"}, "test_case": {"identifier": "testCreate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreate() {\n        TimeSeriesIndex index = new TestTimeSeriesIndex(0L, 3);\n        DoubleTimeSeries ts1 = TimeSeries.createDouble(\"ts1\", index, 0d, 1d, 2d);\n        assertEquals(\"ts1\", ts1.getMetadata().getName());\n        assertEquals(TimeSeriesDataType.DOUBLE, ts1.getMetadata().getDataType());\n        assertArrayEquals(new double[] {0d, 1d, 2d}, ts1.toArray(), 0d);\n    }", "signature": "void testCreate()", "full_signature": "@Test public void testCreate()", "class_method_signature": "StoredDoubleTimeSeriesTest.testCreate()", "testcase": true, "constructor": false, "invocations": ["createDouble", "assertEquals", "getName", "getMetadata", "assertEquals", "getDataType", "getMetadata", "assertArrayEquals", "toArray"]}, "focal_class": {"identifier": "StoredDoubleTimeSeries", "superclass": "extends AbstractTimeSeries<DoublePoint, DoubleDataChunk, DoubleTimeSeries>", "interfaces": "implements DoubleTimeSeries", "fields": [{"original_string": "private static final double[] NAN_ARRAY = new double[] {Double.NaN};", "modifier": "private static final", "type": "double[]", "declarator": "NAN_ARRAY = new double[] {Double.NaN}", "var_name": "NAN_ARRAY"}], "methods": [{"identifier": "StoredDoubleTimeSeries", "parameters": "(TimeSeriesMetadata metadata, DoubleDataChunk... chunks)", "modifiers": "public", "return": "", "signature": " StoredDoubleTimeSeries(TimeSeriesMetadata metadata, DoubleDataChunk... chunks)", "full_signature": "public  StoredDoubleTimeSeries(TimeSeriesMetadata metadata, DoubleDataChunk... chunks)", "class_method_signature": "StoredDoubleTimeSeries.StoredDoubleTimeSeries(TimeSeriesMetadata metadata, DoubleDataChunk... chunks)", "testcase": false, "constructor": true}, {"identifier": "StoredDoubleTimeSeries", "parameters": "(TimeSeriesMetadata metadata, List<DoubleDataChunk> chunks)", "modifiers": "public", "return": "", "signature": " StoredDoubleTimeSeries(TimeSeriesMetadata metadata, List<DoubleDataChunk> chunks)", "full_signature": "public  StoredDoubleTimeSeries(TimeSeriesMetadata metadata, List<DoubleDataChunk> chunks)", "class_method_signature": "StoredDoubleTimeSeries.StoredDoubleTimeSeries(TimeSeriesMetadata metadata, List<DoubleDataChunk> chunks)", "testcase": false, "constructor": true}, {"identifier": "createGapFillingChunk", "parameters": "(int i, int length)", "modifiers": "protected", "return": "CompressedDoubleDataChunk", "signature": "CompressedDoubleDataChunk createGapFillingChunk(int i, int length)", "full_signature": "protected CompressedDoubleDataChunk createGapFillingChunk(int i, int length)", "class_method_signature": "StoredDoubleTimeSeries.createGapFillingChunk(int i, int length)", "testcase": false, "constructor": false}, {"identifier": "createTimeSeries", "parameters": "(DoubleDataChunk chunk)", "modifiers": "@Override protected", "return": "DoubleTimeSeries", "signature": "DoubleTimeSeries createTimeSeries(DoubleDataChunk chunk)", "full_signature": "@Override protected DoubleTimeSeries createTimeSeries(DoubleDataChunk chunk)", "class_method_signature": "StoredDoubleTimeSeries.createTimeSeries(DoubleDataChunk chunk)", "testcase": false, "constructor": false}, {"identifier": "forEachChunk", "parameters": "(Consumer<DoubleDataChunk> consumer)", "modifiers": "private", "return": "void", "signature": "void forEachChunk(Consumer<DoubleDataChunk> consumer)", "full_signature": "private void forEachChunk(Consumer<DoubleDataChunk> consumer)", "class_method_signature": "StoredDoubleTimeSeries.forEachChunk(Consumer<DoubleDataChunk> consumer)", "testcase": false, "constructor": false}, {"identifier": "fillBuffer", "parameters": "(DoubleBuffer buffer, int timeSeriesOffset)", "modifiers": "@Override public", "return": "void", "signature": "void fillBuffer(DoubleBuffer buffer, int timeSeriesOffset)", "full_signature": "@Override public void fillBuffer(DoubleBuffer buffer, int timeSeriesOffset)", "class_method_signature": "StoredDoubleTimeSeries.fillBuffer(DoubleBuffer buffer, int timeSeriesOffset)", "testcase": false, "constructor": false}, {"identifier": "fillBuffer", "parameters": "(BigDoubleBuffer buffer, long timeSeriesOffset)", "modifiers": "@Override public", "return": "void", "signature": "void fillBuffer(BigDoubleBuffer buffer, long timeSeriesOffset)", "full_signature": "@Override public void fillBuffer(BigDoubleBuffer buffer, long timeSeriesOffset)", "class_method_signature": "StoredDoubleTimeSeries.fillBuffer(BigDoubleBuffer buffer, long timeSeriesOffset)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "()", "modifiers": "@Override public", "return": "double[]", "signature": "double[] toArray()", "full_signature": "@Override public double[] toArray()", "class_method_signature": "StoredDoubleTimeSeries.toArray()", "testcase": false, "constructor": false}], "file": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/StoredDoubleTimeSeries.java"}, "focal_method": {"identifier": "toArray", "parameters": "()", "modifiers": "@Override public", "return": "double[]", "body": "@Override\n    public double[] toArray() {\n        DoubleBuffer buffer = DoubleBuffer.allocate(metadata.getIndex().getPointCount());\n        for (int i = 0; i < metadata.getIndex().getPointCount(); i++) {\n            buffer.put(i, Double.NaN);\n        }\n        fillBuffer(buffer, 0);\n        return buffer.array();\n    }", "signature": "double[] toArray()", "full_signature": "@Override public double[] toArray()", "class_method_signature": "StoredDoubleTimeSeries.toArray()", "testcase": false, "constructor": false, "invocations": ["allocate", "getPointCount", "getIndex", "getPointCount", "getIndex", "put", "fillBuffer", "array"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}