{"test_class": {"identifier": "GeneratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Path wd;", "modifier": "private static", "type": "Path", "declarator": "wd", "var_name": "wd"}], "file": "org.eclipse.winery.generators.ia/src/test/java/org/eclipse/winery/generators/ia/GeneratorTest.java"}, "test_case": {"identifier": "testOneOpNoParams", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOneOpNoParams() throws Exception {\n        TInterface i = new TInterface();\n        i.setName(\"http://www.example.org/interfaces/lifecycle\");\n\n        TOperation op = new TOperation();\n        op.setName(\"install\");\n        i.getOperation().add(op);\n\n        Generator gen = new Generator(i, \"org.opentosca.ia.test\", new URL(\"http://test.com\"), \"TestOneOpNoParams\", wd.toFile());\n        gen.generateProject();\n    }", "signature": "void testOneOpNoParams()", "full_signature": "@Test public void testOneOpNoParams()", "class_method_signature": "GeneratorTest.testOneOpNoParams()", "testcase": true, "constructor": false, "invocations": ["setName", "setName", "add", "getOperation", "toFile", "generateProject"]}, "focal_class": {"identifier": "Generator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(Generator.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(Generator.class)", "var_name": "LOGGER"}, {"original_string": "private static final String PLACEHOLDER_JAVA_PACKAGE = \"IA_PACKAGE\";", "modifier": "private static final", "type": "String", "declarator": "PLACEHOLDER_JAVA_PACKAGE = \"IA_PACKAGE\"", "var_name": "PLACEHOLDER_JAVA_PACKAGE"}, {"original_string": "private static final String PLACEHOLDER_NAMESPACE = \"IA_NAMESPACE\";", "modifier": "private static final", "type": "String", "declarator": "PLACEHOLDER_NAMESPACE = \"IA_NAMESPACE\"", "var_name": "PLACEHOLDER_NAMESPACE"}, {"original_string": "private static final String PLACEHOLDER_CLASS_NAME = \"IA_CLASS_NAME\";", "modifier": "private static final", "type": "String", "declarator": "PLACEHOLDER_CLASS_NAME = \"IA_CLASS_NAME\"", "var_name": "PLACEHOLDER_CLASS_NAME"}, {"original_string": "private static final String PLACEHOLDER_IA_ARTIFACT_TEMPLATE_UPLOAD_URL = \"IA_ARTIFACT_TEMPLATE_UPLOAD_URL\";", "modifier": "private static final", "type": "String", "declarator": "PLACEHOLDER_IA_ARTIFACT_TEMPLATE_UPLOAD_URL = \"IA_ARTIFACT_TEMPLATE_UPLOAD_URL\"", "var_name": "PLACEHOLDER_IA_ARTIFACT_TEMPLATE_UPLOAD_URL"}, {"original_string": "private static final String PLACEHOLDER_GENERATED_WEBSERVICE_METHODS = \"GENERATED_WEBSERVICE_METHODS\";", "modifier": "private static final", "type": "String", "declarator": "PLACEHOLDER_GENERATED_WEBSERVICE_METHODS = \"GENERATED_WEBSERVICE_METHODS\"", "var_name": "PLACEHOLDER_GENERATED_WEBSERVICE_METHODS"}, {"original_string": "private static final String TEMPLATE_PROJECT_FOLDER = \"template/project\";", "modifier": "private static final", "type": "String", "declarator": "TEMPLATE_PROJECT_FOLDER = \"template/project\"", "var_name": "TEMPLATE_PROJECT_FOLDER"}, {"original_string": "private static final String TEMPLATE_JAVA_FOLDER = \"template/java\";", "modifier": "private static final", "type": "String", "declarator": "TEMPLATE_JAVA_FOLDER = \"template/java\"", "var_name": "TEMPLATE_JAVA_FOLDER"}, {"original_string": "private static final String TEMPLATE_JAVA_ABSTRACT_IA_SERVICE = \"AbstractIAService.java.template\";", "modifier": "private static final", "type": "String", "declarator": "TEMPLATE_JAVA_ABSTRACT_IA_SERVICE = \"AbstractIAService.java.template\"", "var_name": "TEMPLATE_JAVA_ABSTRACT_IA_SERVICE"}, {"original_string": "private static final String TEMPLATE_JAVA_TEMPLATE_SERVICE = \"TemplateService.java.template\";", "modifier": "private static final", "type": "String", "declarator": "TEMPLATE_JAVA_TEMPLATE_SERVICE = \"TemplateService.java.template\"", "var_name": "TEMPLATE_JAVA_TEMPLATE_SERVICE"}, {"original_string": "private final TInterface tInterface;", "modifier": "private final", "type": "TInterface", "declarator": "tInterface", "var_name": "tInterface"}, {"original_string": "private final File workingDir;", "modifier": "private final", "type": "File", "declarator": "workingDir", "var_name": "workingDir"}, {"original_string": "private final File outDir;", "modifier": "private final", "type": "File", "declarator": "outDir", "var_name": "outDir"}, {"original_string": "private final String name;", "modifier": "private final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private final String javaPackage;", "modifier": "private final", "type": "String", "declarator": "javaPackage", "var_name": "javaPackage"}, {"original_string": "private final String namespace;", "modifier": "private final", "type": "String", "declarator": "namespace", "var_name": "namespace"}, {"original_string": "private final URL iaArtifactTemplateUploadUrl;", "modifier": "private final", "type": "URL", "declarator": "iaArtifactTemplateUploadUrl", "var_name": "iaArtifactTemplateUploadUrl"}], "methods": [{"identifier": "Generator", "parameters": "(TInterface tInterface, String packageAndNamespace, URL iaArtifactTemplateUploadUrl, String name, File workingDir)", "modifiers": "public", "return": "", "signature": " Generator(TInterface tInterface, String packageAndNamespace, URL iaArtifactTemplateUploadUrl, String name, File workingDir)", "full_signature": "public  Generator(TInterface tInterface, String packageAndNamespace, URL iaArtifactTemplateUploadUrl, String name, File workingDir)", "class_method_signature": "Generator.Generator(TInterface tInterface, String packageAndNamespace, URL iaArtifactTemplateUploadUrl, String name, File workingDir)", "testcase": false, "constructor": true}, {"identifier": "generateProject", "parameters": "()", "modifiers": "public", "return": "Path", "signature": "Path generateProject()", "full_signature": "public Path generateProject()", "class_method_signature": "Generator.generateProject()", "testcase": false, "constructor": false}, {"identifier": "generateAndZipProject", "parameters": "()", "modifiers": "public", "return": "File", "signature": "File generateAndZipProject()", "full_signature": "public File generateAndZipProject()", "class_method_signature": "Generator.generateAndZipProject()", "testcase": false, "constructor": false}, {"identifier": "generateJavaFile", "parameters": "(File javaService)", "modifiers": "private", "return": "void", "signature": "void generateJavaFile(File javaService)", "full_signature": "private void generateJavaFile(File javaService)", "class_method_signature": "Generator.generateJavaFile(File javaService)", "testcase": false, "constructor": false}, {"identifier": "updateFilesRecursively", "parameters": "(File folderOrFile)", "modifiers": "private", "return": "void", "signature": "void updateFilesRecursively(File folderOrFile)", "full_signature": "private void updateFilesRecursively(File folderOrFile)", "class_method_signature": "Generator.updateFilesRecursively(File folderOrFile)", "testcase": false, "constructor": false}, {"identifier": "packageProject", "parameters": "(Path projectDir)", "modifiers": "private", "return": "File", "signature": "File packageProject(Path projectDir)", "full_signature": "private File packageProject(Path projectDir)", "class_method_signature": "Generator.packageProject(Path projectDir)", "testcase": false, "constructor": false}, {"identifier": "addFilesRecursively", "parameters": "(File folderOrFile, String baseDir, ArchiveOutputStream zos)", "modifiers": "private", "return": "void", "signature": "void addFilesRecursively(File folderOrFile, String baseDir, ArchiveOutputStream zos)", "full_signature": "private void addFilesRecursively(File folderOrFile, String baseDir, ArchiveOutputStream zos)", "class_method_signature": "Generator.addFilesRecursively(File folderOrFile, String baseDir, ArchiveOutputStream zos)", "testcase": false, "constructor": false}], "file": "org.eclipse.winery.generators.ia/src/main/java/org/eclipse/winery/generators/ia/Generator.java"}, "focal_method": {"identifier": "generateProject", "parameters": "()", "modifiers": "public", "return": "Path", "body": "public Path generateProject() throws Exception {\n        Path workingDirPath = this.workingDir.toPath();\n        Files.createDirectories(workingDirPath);\n\n        // directory to store the template files to generate the java files from\n        Path javaTemplateDir = workingDirPath.resolve(\"../java\");\n        Files.createDirectories(javaTemplateDir);\n\n        // Copy template project and template java files\n        String s = this.getClass().getResource(\"\").getPath();\n        if (s.contains(\"jar!\")) {\n            Generator.LOGGER.trace(\"we work on a jar file\");\n            Generator.LOGGER.trace(\"Location of the current class: {}\", s);\n\n            // we have a jar file\n            // format: file:/location...jar!...path-in-the-jar\n            // we only want to have location :)\n            int excl = s.lastIndexOf(\"!\");\n            s = s.substring(0, excl);\n            s = s.substring(\"file:\".length());\n\n            try (JarFile jf = new JarFile(s);) {\n                Enumeration<JarEntry> entries = jf.entries();\n                while (entries.hasMoreElements()) {\n                    JarEntry je = entries.nextElement();\n                    String name = je.getName();\n                    if (name.startsWith(Generator.TEMPLATE_PROJECT_FOLDER + \"/\") && (name.length() > (Generator.TEMPLATE_PROJECT_FOLDER.length() + 1))) {\n                        // strip \"template/\" from the beginning to have paths without \"template\" starting relatively from the working dir\n                        name = name.substring(Generator.TEMPLATE_PROJECT_FOLDER.length() + 1);\n                        if (je.isDirectory()) {\n                            // directory found\n                            Path dir = workingDirPath.resolve(name);\n                            Files.createDirectory(dir);\n                        } else {\n                            Path file = workingDirPath.resolve(name);\n                            try (InputStream is = jf.getInputStream(je);) {\n                                Files.copy(is, file, StandardCopyOption.REPLACE_EXISTING);\n                            }\n                        }\n                    } else if (name.startsWith(Generator.TEMPLATE_JAVA_FOLDER + \"/\") && (name.length() > (Generator.TEMPLATE_JAVA_FOLDER.length() + 1))) {\n                        if (!je.isDirectory()) {\n                            // we copy the file directly into javaTemplateDir\n                            File f = new File(name);\n                            Path file = javaTemplateDir.resolve(f.getName());\n                            try (InputStream is = jf.getInputStream(je);) {\n                                Files.copy(is, file, StandardCopyOption.REPLACE_EXISTING);\n                            }\n                        }\n                    }\n                }\n            }\n        } else {\n            // we're running in debug mode, we can work on the plain file system\n            File templateProjectDir = new File(this.getClass().getResource(\"/\" + Generator.TEMPLATE_PROJECT_FOLDER).getFile());\n            FileUtils.copyDirectory(templateProjectDir, this.workingDir);\n\n            File javaTemplatesDir = new File(this.getClass().getResource(\"/\" + Generator.TEMPLATE_JAVA_FOLDER).getFile());\n            FileUtils.copyDirectory(javaTemplatesDir, javaTemplateDir.toFile());\n        }\n\n        // Create Java Code Folder\n        String[] splitPkg = this.javaPackage.split(\"\\\\.\");\n        StringBuilder javaFolderString = new StringBuilder(this.workingDir.getAbsolutePath() + File.separator + \"src\" + File.separator + \"main\" + File.separator + \"java\");\n        for (String value : splitPkg) {\n            javaFolderString.append(File.separator).append(value);\n        }\n\n        // Copy and rename TEMPLATE_JAVA_TEMPLATE_SERVICE\n        Path templateJavaService = javaTemplateDir.resolve(Generator.TEMPLATE_JAVA_TEMPLATE_SERVICE);\n        File javaService = new File(javaFolderString + File.separator + this.name + \".java\");\n        Files.createDirectories(javaService.toPath().getParent());\n        Files.copy(templateJavaService, javaService.toPath(), StandardCopyOption.REPLACE_EXISTING);\n\n        this.generateJavaFile(javaService);\n        this.updateFilesRecursively(this.workingDir);\n\n        return this.workingDir.toPath();\n    }", "signature": "Path generateProject()", "full_signature": "public Path generateProject()", "class_method_signature": "Generator.generateProject()", "testcase": false, "constructor": false, "invocations": ["toPath", "createDirectories", "resolve", "createDirectories", "getPath", "getResource", "getClass", "contains", "trace", "trace", "lastIndexOf", "substring", "substring", "length", "entries", "hasMoreElements", "nextElement", "getName", "startsWith", "length", "length", "substring", "length", "isDirectory", "resolve", "createDirectory", "resolve", "getInputStream", "copy", "startsWith", "length", "length", "isDirectory", "resolve", "getName", "getInputStream", "copy", "getFile", "getResource", "getClass", "copyDirectory", "getFile", "getResource", "getClass", "copyDirectory", "toFile", "split", "getAbsolutePath", "append", "append", "resolve", "createDirectories", "getParent", "toPath", "copy", "toPath", "generateJavaFile", "updateFilesRecursively", "toPath"]}, "repository": {"repo_id": 42622157, "url": "https://github.com/eclipse/winery", "stars": 34, "created": "9/17/2015 12:31:44 AM +00:00", "updates": "2020-01-22T09:32:00+00:00", "fork": "False", "license": "licensed"}}