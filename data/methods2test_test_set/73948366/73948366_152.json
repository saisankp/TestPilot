{"test_class": {"identifier": "S3ChangeLogStoreTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DEFAULT_TIMEOUT_SECONDS = \"athenz.zts.bucket.threads.timeout\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_TIMEOUT_SECONDS = \"athenz.zts.bucket.threads.timeout\"", "var_name": "DEFAULT_TIMEOUT_SECONDS"}, {"original_string": "private final int defaultTimeoutSeconds = Integer.parseInt(System.getProperty(DEFAULT_TIMEOUT_SECONDS, \"1800\"));", "modifier": "private final", "type": "int", "declarator": "defaultTimeoutSeconds = Integer.parseInt(System.getProperty(DEFAULT_TIMEOUT_SECONDS, \"1800\"))", "var_name": "defaultTimeoutSeconds"}], "file": "libs/java/server_common/src/test/java/com/yahoo/athenz/common/server/store/impl/S3ChangeLogStoreTest.java"}, "test_case": {"identifier": "testListObjectsAllObjectsMultiplePages", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testListObjectsAllObjectsMultiplePages() {\n        \n        MockS3ChangeLogStore store = new MockS3ChangeLogStore();\n        \n        ArrayList<S3ObjectSummary> objectList1 = new ArrayList<>();\n        S3ObjectSummary objectSummary = new S3ObjectSummary();\n        objectSummary.setKey(\"iaas\");\n        objectList1.add(objectSummary);\n        objectSummary = new S3ObjectSummary();\n        objectSummary.setKey(\"iaas.athenz\");\n        objectList1.add(objectSummary);\n        \n        ArrayList<S3ObjectSummary> objectList2 = new ArrayList<>();\n        objectSummary = new S3ObjectSummary();\n        objectSummary.setKey(\"cd\");\n        objectList2.add(objectSummary);\n        objectSummary = new S3ObjectSummary();\n        objectSummary.setKey(\"cd.docker\");\n        objectList2.add(objectSummary);\n        \n        ArrayList<S3ObjectSummary> objectList3 = new ArrayList<>();\n        objectSummary = new S3ObjectSummary();\n        objectSummary.setKey(\"platforms\");\n        objectList3.add(objectSummary);\n        objectSummary = new S3ObjectSummary();\n        objectSummary.setKey(\"platforms.mh2\");\n        objectList3.add(objectSummary);\n        \n        ObjectListing objectListing = mock(ObjectListing.class);\n        when(objectListing.getObjectSummaries())\n            .thenReturn(objectList1)\n            .thenReturn(objectList2)\n            .thenReturn(objectList3);\n        when(objectListing.isTruncated())\n            .thenReturn(true)\n            .thenReturn(true)\n            .thenReturn(false);\n        when(store.awsS3Client.listObjects(any(ListObjectsRequest.class))).thenReturn(objectListing);\n        when(store.awsS3Client.listNextBatchOfObjects(any(ObjectListing.class))).thenReturn(objectListing);\n\n        ArrayList<String> domains = new ArrayList<>();\n        store.listObjects(store.awsS3Client, domains, 0);\n        \n        assertEquals(domains.size(), 6);\n        assertTrue(domains.contains(\"iaas\"));\n        assertTrue(domains.contains(\"iaas.athenz\"));\n        assertTrue(domains.contains(\"cd\"));\n        assertTrue(domains.contains(\"cd.docker\"));\n        assertTrue(domains.contains(\"platforms\"));\n        assertTrue(domains.contains(\"platforms.mh2\"));\n    }", "signature": "void testListObjectsAllObjectsMultiplePages()", "full_signature": "@Test public void testListObjectsAllObjectsMultiplePages()", "class_method_signature": "S3ChangeLogStoreTest.testListObjectsAllObjectsMultiplePages()", "testcase": true, "constructor": false, "invocations": ["setKey", "add", "setKey", "add", "setKey", "add", "setKey", "add", "setKey", "add", "setKey", "add", "mock", "thenReturn", "thenReturn", "thenReturn", "when", "getObjectSummaries", "thenReturn", "thenReturn", "thenReturn", "when", "isTruncated", "thenReturn", "when", "listObjects", "any", "thenReturn", "when", "listNextBatchOfObjects", "any", "listObjects", "assertEquals", "size", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains"]}, "focal_class": {"identifier": "S3ChangeLogStore", "superclass": "", "interfaces": "implements ChangeLogStore", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(S3ChangeLogStore.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(S3ChangeLogStore.class)", "var_name": "LOGGER"}, {"original_string": "long lastModTime;", "modifier": "", "type": "long", "declarator": "lastModTime", "var_name": "lastModTime"}, {"original_string": "AmazonS3 awsS3Client = null;", "modifier": "", "type": "AmazonS3", "declarator": "awsS3Client = null", "var_name": "awsS3Client"}, {"original_string": "private String s3BucketName;", "modifier": "private", "type": "String", "declarator": "s3BucketName", "var_name": "s3BucketName"}, {"original_string": "private String awsRegion;", "modifier": "private", "type": "String", "declarator": "awsRegion", "var_name": "awsRegion"}, {"original_string": "private ObjectMapper jsonMapper;", "modifier": "private", "type": "ObjectMapper", "declarator": "jsonMapper", "var_name": "jsonMapper"}, {"original_string": "private static final String NUMBER_OF_THREADS = \"athenz.zts.bucket.threads\";", "modifier": "private static final", "type": "String", "declarator": "NUMBER_OF_THREADS = \"athenz.zts.bucket.threads\"", "var_name": "NUMBER_OF_THREADS"}, {"original_string": "private static final String DEFAULT_TIMEOUT_SECONDS = \"athenz.zts.bucket.threads.timeout\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_TIMEOUT_SECONDS = \"athenz.zts.bucket.threads.timeout\"", "var_name": "DEFAULT_TIMEOUT_SECONDS"}, {"original_string": "private int nThreads = Integer.parseInt(System.getProperty(NUMBER_OF_THREADS, \"10\"));", "modifier": "private", "type": "int", "declarator": "nThreads = Integer.parseInt(System.getProperty(NUMBER_OF_THREADS, \"10\"))", "var_name": "nThreads"}, {"original_string": "private int defaultTimeoutSeconds = Integer.parseInt(System.getProperty(DEFAULT_TIMEOUT_SECONDS, \"1800\"));", "modifier": "private", "type": "int", "declarator": "defaultTimeoutSeconds = Integer.parseInt(System.getProperty(DEFAULT_TIMEOUT_SECONDS, \"1800\"))", "var_name": "defaultTimeoutSeconds"}, {"original_string": "private volatile HashMap<String, SignedDomain> tempSignedDomainMap = new HashMap<>();", "modifier": "private volatile", "type": "HashMap<String, SignedDomain>", "declarator": "tempSignedDomainMap = new HashMap<>()", "var_name": "tempSignedDomainMap"}], "methods": [{"identifier": "S3ChangeLogStore", "parameters": "()", "modifiers": "public", "return": "", "signature": " S3ChangeLogStore()", "full_signature": "public  S3ChangeLogStore()", "class_method_signature": "S3ChangeLogStore.S3ChangeLogStore()", "testcase": false, "constructor": true}, {"identifier": "S3ChangeLogStore", "parameters": "(String awsRegion)", "modifiers": "public", "return": "", "signature": " S3ChangeLogStore(String awsRegion)", "full_signature": "public  S3ChangeLogStore(String awsRegion)", "class_method_signature": "S3ChangeLogStore.S3ChangeLogStore(String awsRegion)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "", "return": "void", "signature": "void init()", "full_signature": " void init()", "class_method_signature": "S3ChangeLogStore.init()", "testcase": false, "constructor": false}, {"identifier": "initAwsRegion", "parameters": "()", "modifiers": "", "return": "void", "signature": "void initAwsRegion()", "full_signature": " void initAwsRegion()", "class_method_signature": "S3ChangeLogStore.initAwsRegion()", "testcase": false, "constructor": false}, {"identifier": "supportsFullRefresh", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsFullRefresh()", "full_signature": "@Override public boolean supportsFullRefresh()", "class_method_signature": "S3ChangeLogStore.supportsFullRefresh()", "testcase": false, "constructor": false}, {"identifier": "getLocalSignedDomain", "parameters": "(String domainName)", "modifiers": "@Override public", "return": "SignedDomain", "signature": "SignedDomain getLocalSignedDomain(String domainName)", "full_signature": "@Override public SignedDomain getLocalSignedDomain(String domainName)", "class_method_signature": "S3ChangeLogStore.getLocalSignedDomain(String domainName)", "testcase": false, "constructor": false}, {"identifier": "getSignedDomain", "parameters": "(AmazonS3 s3, String domainName)", "modifiers": "", "return": "SignedDomain", "signature": "SignedDomain getSignedDomain(AmazonS3 s3, String domainName)", "full_signature": " SignedDomain getSignedDomain(AmazonS3 s3, String domainName)", "class_method_signature": "S3ChangeLogStore.getSignedDomain(AmazonS3 s3, String domainName)", "testcase": false, "constructor": false}, {"identifier": "removeLocalDomain", "parameters": "(String domainName)", "modifiers": "@SuppressWarnings(\"EmptyMethod\") @Override public", "return": "void", "signature": "void removeLocalDomain(String domainName)", "full_signature": "@SuppressWarnings(\"EmptyMethod\") @Override public void removeLocalDomain(String domainName)", "class_method_signature": "S3ChangeLogStore.removeLocalDomain(String domainName)", "testcase": false, "constructor": false}, {"identifier": "saveLocalDomain", "parameters": "(String domainName, SignedDomain signedDomain)", "modifiers": "@SuppressWarnings(\"EmptyMethod\") @Override public", "return": "void", "signature": "void saveLocalDomain(String domainName, SignedDomain signedDomain)", "full_signature": "@SuppressWarnings(\"EmptyMethod\") @Override public void saveLocalDomain(String domainName, SignedDomain signedDomain)", "class_method_signature": "S3ChangeLogStore.saveLocalDomain(String domainName, SignedDomain signedDomain)", "testcase": false, "constructor": false}, {"identifier": "listObjects", "parameters": "(AmazonS3 s3, Collection<String> domains, long modTime)", "modifiers": "", "return": "void", "signature": "void listObjects(AmazonS3 s3, Collection<String> domains, long modTime)", "full_signature": " void listObjects(AmazonS3 s3, Collection<String> domains, long modTime)", "class_method_signature": "S3ChangeLogStore.listObjects(AmazonS3 s3, Collection<String> domains, long modTime)", "testcase": false, "constructor": false}, {"identifier": "getLocalDomainList", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getLocalDomainList()", "full_signature": "@Override public List<String> getLocalDomainList()", "class_method_signature": "S3ChangeLogStore.getLocalDomainList()", "testcase": false, "constructor": false}, {"identifier": "getAllSignedDomains", "parameters": "(List<String> domains)", "modifiers": "public", "return": "boolean", "signature": "boolean getAllSignedDomains(List<String> domains)", "full_signature": "public boolean getAllSignedDomains(List<String> domains)", "class_method_signature": "S3ChangeLogStore.getAllSignedDomains(List<String> domains)", "testcase": false, "constructor": false}, {"identifier": "getServerDomainList", "parameters": "()", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> getServerDomainList()", "full_signature": "@Override public Set<String> getServerDomainList()", "class_method_signature": "S3ChangeLogStore.getServerDomainList()", "testcase": false, "constructor": false}, {"identifier": "getServerDomainModifiedList", "parameters": "()", "modifiers": "@Override public", "return": "SignedDomains", "signature": "SignedDomains getServerDomainModifiedList()", "full_signature": "@Override public SignedDomains getServerDomainModifiedList()", "class_method_signature": "S3ChangeLogStore.getServerDomainModifiedList()", "testcase": false, "constructor": false}, {"identifier": "getServerSignedDomain", "parameters": "(String domainName)", "modifiers": "@Override public", "return": "SignedDomain", "signature": "SignedDomain getServerSignedDomain(String domainName)", "full_signature": "@Override public SignedDomain getServerSignedDomain(String domainName)", "class_method_signature": "S3ChangeLogStore.getServerSignedDomain(String domainName)", "testcase": false, "constructor": false}, {"identifier": "getUpdatedSignedDomains", "parameters": "(StringBuilder lastModTimeBuffer)", "modifiers": "@Override public", "return": "SignedDomains", "signature": "SignedDomains getUpdatedSignedDomains(StringBuilder lastModTimeBuffer)", "full_signature": "@Override public SignedDomains getUpdatedSignedDomains(StringBuilder lastModTimeBuffer)", "class_method_signature": "S3ChangeLogStore.getUpdatedSignedDomains(StringBuilder lastModTimeBuffer)", "testcase": false, "constructor": false}, {"identifier": "setLastModificationTimestamp", "parameters": "(String newLastModTime)", "modifiers": "@Override public", "return": "void", "signature": "void setLastModificationTimestamp(String newLastModTime)", "full_signature": "@Override public void setLastModificationTimestamp(String newLastModTime)", "class_method_signature": "S3ChangeLogStore.setLastModificationTimestamp(String newLastModTime)", "testcase": false, "constructor": false}, {"identifier": "getS3Client", "parameters": "()", "modifiers": "", "return": "AmazonS3", "signature": "AmazonS3 getS3Client()", "full_signature": " AmazonS3 getS3Client()", "class_method_signature": "S3ChangeLogStore.getS3Client()", "testcase": false, "constructor": false}, {"identifier": "getExecutorService", "parameters": "()", "modifiers": "public", "return": "ExecutorService", "signature": "ExecutorService getExecutorService()", "full_signature": "public ExecutorService getExecutorService()", "class_method_signature": "S3ChangeLogStore.getExecutorService()", "testcase": false, "constructor": false}], "file": "libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/store/impl/S3ChangeLogStore.java"}, "focal_method": {"identifier": "listObjects", "parameters": "(AmazonS3 s3, Collection<String> domains, long modTime)", "modifiers": "", "return": "void", "body": "void listObjects(AmazonS3 s3, Collection<String> domains, long modTime) {\n\n        if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"listObjects: Retrieving domains from {} with mod time > {}\",\n                    s3BucketName, modTime);\n        }\n\n        ObjectListing objectListing = s3.listObjects(new ListObjectsRequest()\n                .withBucketName(s3BucketName));\n\n        String objectName;\n        while (objectListing != null) {\n\n            // process each entry in our result set and add the domain\n            // name to our return list\n\n            final List<S3ObjectSummary> objectSummaries = objectListing.getObjectSummaries();\n            boolean listTruncated = objectListing.isTruncated();\n\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(\"listObjects: retrieved {} objects, more objects available - {}\",\n                        objectSummaries.size(), listTruncated);\n            }\n\n            for (S3ObjectSummary objectSummary : objectSummaries) {\n\n                // if mod time is specified then make sure we automatically skip\n                // any domains older than the specified value\n\n                if (modTime > 0 && objectSummary.getLastModified().getTime() <= modTime) {\n                    continue;\n                }\n\n                // for now skip any folders/objects that start with '.'\n\n                objectName = objectSummary.getKey();\n                if (objectName.charAt(0) == '.') {\n                    continue;\n                }\n                domains.add(objectName);\n            }\n\n            // check if the object listing is truncated or not (break out in this case)\n            // technically we can skip this call and just call listNextBatchOfResults\n            // since that returns null if the object listing is not truncated but\n            // this direct check here makes the logic easier to follow\n\n            if (!listTruncated) {\n                break;\n            }\n\n            objectListing = s3.listNextBatchOfObjects(objectListing);\n        }\n    }", "signature": "void listObjects(AmazonS3 s3, Collection<String> domains, long modTime)", "full_signature": " void listObjects(AmazonS3 s3, Collection<String> domains, long modTime)", "class_method_signature": "S3ChangeLogStore.listObjects(AmazonS3 s3, Collection<String> domains, long modTime)", "testcase": false, "constructor": false, "invocations": ["isDebugEnabled", "debug", "listObjects", "withBucketName", "getObjectSummaries", "isTruncated", "isDebugEnabled", "debug", "size", "getTime", "getLastModified", "getKey", "charAt", "add", "listNextBatchOfObjects"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}