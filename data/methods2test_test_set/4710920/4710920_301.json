{"test_class": {"identifier": "EtcdDynamicConfigurationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static EtcdDynamicConfiguration config;", "modifier": "private static", "type": "EtcdDynamicConfiguration", "declarator": "config", "var_name": "config"}, {"original_string": "public EtcdCluster etcdCluster = EtcdClusterFactory.buildCluster(getClass().getSimpleName(), 3, false);", "modifier": "public", "type": "EtcdCluster", "declarator": "etcdCluster = EtcdClusterFactory.buildCluster(getClass().getSimpleName(), 3, false)", "var_name": "etcdCluster"}, {"original_string": "private static Client client;", "modifier": "private static", "type": "Client", "declarator": "client", "var_name": "client"}], "file": "dubbo-configcenter/dubbo-configcenter-etcd/src/test/java/org/apache/dubbo/configcenter/support/etcd/EtcdDynamicConfigurationTest.java"}, "test_case": {"identifier": "testAddListener", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddListener() throws Exception {\n        CountDownLatch latch = new CountDownLatch(4);\n        TestListener listener1 = new TestListener(latch);\n        TestListener listener2 = new TestListener(latch);\n        TestListener listener3 = new TestListener(latch);\n        TestListener listener4 = new TestListener(latch);\n        config.addListener(\"AService.configurators\", listener1);\n        config.addListener(\"AService.configurators\", listener2);\n        config.addListener(\"testapp.tagrouters\", listener3);\n        config.addListener(\"testapp.tagrouters\", listener4);\n\n        put(\"/dubbo/config/AService/configurators\", \"new value1\");\n        Thread.sleep(200);\n        put(\"/dubbo/config/testapp/tagrouters\", \"new value2\");\n        Thread.sleep(200);\n        put(\"/dubbo/config/testapp\", \"new value3\");\n\n        Thread.sleep(1000);\n\n        Assert.assertTrue(latch.await(5, TimeUnit.SECONDS));\n        Assert.assertEquals(1, listener1.getCount(\"/dubbo/config/AService/configurators\"));\n        Assert.assertEquals(1, listener2.getCount(\"/dubbo/config/AService/configurators\"));\n        Assert.assertEquals(1, listener3.getCount(\"/dubbo/config/testapp/tagrouters\"));\n        Assert.assertEquals(1, listener4.getCount(\"/dubbo/config/testapp/tagrouters\"));\n\n        Assert.assertEquals(\"new value1\", listener1.getValue());\n        Assert.assertEquals(\"new value1\", listener2.getValue());\n        Assert.assertEquals(\"new value2\", listener3.getValue());\n        Assert.assertEquals(\"new value2\", listener4.getValue());\n    }", "signature": "void testAddListener()", "full_signature": "@Test public void testAddListener()", "class_method_signature": "EtcdDynamicConfigurationTest.testAddListener()", "testcase": true, "constructor": false, "invocations": ["addListener", "addListener", "addListener", "addListener", "put", "sleep", "put", "sleep", "put", "sleep", "assertTrue", "await", "assertEquals", "getCount", "assertEquals", "getCount", "assertEquals", "getCount", "assertEquals", "getCount", "assertEquals", "getValue", "assertEquals", "getValue", "assertEquals", "getValue", "assertEquals", "getValue"]}, "focal_class": {"identifier": "EtcdDynamicConfiguration", "superclass": "", "interfaces": "implements DynamicConfiguration", "fields": [{"original_string": "private String rootPath;", "modifier": "private", "type": "String", "declarator": "rootPath", "var_name": "rootPath"}, {"original_string": "private final JEtcdClient etcdClient;", "modifier": "private final", "type": "JEtcdClient", "declarator": "etcdClient", "var_name": "etcdClient"}, {"original_string": "private final ConcurrentMap<ConfigurationListener, EtcdConfigWatcher> watchListenerMap;", "modifier": "private final", "type": "ConcurrentMap<ConfigurationListener, EtcdConfigWatcher>", "declarator": "watchListenerMap", "var_name": "watchListenerMap"}], "methods": [{"identifier": "EtcdDynamicConfiguration", "parameters": "(URL url)", "modifiers": "", "return": "", "signature": " EtcdDynamicConfiguration(URL url)", "full_signature": "  EtcdDynamicConfiguration(URL url)", "class_method_signature": "EtcdDynamicConfiguration.EtcdDynamicConfiguration(URL url)", "testcase": false, "constructor": true}, {"identifier": "addListener", "parameters": "(String key, String group, ConfigurationListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void addListener(String key, String group, ConfigurationListener listener)", "full_signature": "@Override public void addListener(String key, String group, ConfigurationListener listener)", "class_method_signature": "EtcdDynamicConfiguration.addListener(String key, String group, ConfigurationListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeListener", "parameters": "(String key, String group, ConfigurationListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void removeListener(String key, String group, ConfigurationListener listener)", "full_signature": "@Override public void removeListener(String key, String group, ConfigurationListener listener)", "class_method_signature": "EtcdDynamicConfiguration.removeListener(String key, String group, ConfigurationListener listener)", "testcase": false, "constructor": false}, {"identifier": "getConfig", "parameters": "(String key, String group, long timeout)", "modifiers": "@Override public", "return": "String", "signature": "String getConfig(String key, String group, long timeout)", "full_signature": "@Override public String getConfig(String key, String group, long timeout)", "class_method_signature": "EtcdDynamicConfiguration.getConfig(String key, String group, long timeout)", "testcase": false, "constructor": false}, {"identifier": "getInternalProperty", "parameters": "(String key)", "modifiers": "@Override public", "return": "Object", "signature": "Object getInternalProperty(String key)", "full_signature": "@Override public Object getInternalProperty(String key)", "class_method_signature": "EtcdDynamicConfiguration.getInternalProperty(String key)", "testcase": false, "constructor": false}, {"identifier": "buildPath", "parameters": "(String group)", "modifiers": "private", "return": "String", "signature": "String buildPath(String group)", "full_signature": "private String buildPath(String group)", "class_method_signature": "EtcdDynamicConfiguration.buildPath(String group)", "testcase": false, "constructor": false}, {"identifier": "convertKey", "parameters": "(String group, String key)", "modifiers": "private", "return": "String", "signature": "String convertKey(String group, String key)", "full_signature": "private String convertKey(String group, String key)", "class_method_signature": "EtcdDynamicConfiguration.convertKey(String group, String key)", "testcase": false, "constructor": false}, {"identifier": "recover", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void recover()", "full_signature": "private void recover()", "class_method_signature": "EtcdDynamicConfiguration.recover()", "testcase": false, "constructor": false}], "file": "dubbo-configcenter/dubbo-configcenter-etcd/src/main/java/org/apache/dubbo/configcenter/support/etcd/EtcdDynamicConfiguration.java"}, "focal_method": {"identifier": "addListener", "parameters": "(String key, String group, ConfigurationListener listener)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void addListener(String key, String group, ConfigurationListener listener) {\n        if (watchListenerMap.get(listener) == null) {\n            EtcdConfigWatcher watcher = new EtcdConfigWatcher(key, group, listener);\n            watchListenerMap.put(listener, watcher);\n            watcher.watch();\n        }\n    }", "signature": "void addListener(String key, String group, ConfigurationListener listener)", "full_signature": "@Override public void addListener(String key, String group, ConfigurationListener listener)", "class_method_signature": "EtcdDynamicConfiguration.addListener(String key, String group, ConfigurationListener listener)", "testcase": false, "constructor": false, "invocations": ["get", "put", "watch"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}