{"test_class": {"identifier": "IntentSlotRendererTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Set<PromptVariation> confirmations = Collections.singleton(\n        PromptVariation.builder()\n            .withType(\"PlainText\")\n            .withValue(\"confirmation\")\n            .build()\n    );", "modifier": "private final", "type": "Set<PromptVariation>", "declarator": "confirmations = Collections.singleton(\n        PromptVariation.builder()\n            .withType(\"PlainText\")\n            .withValue(\"confirmation\")\n            .build()\n    )", "var_name": "confirmations"}, {"original_string": "private final Set<PromptVariation> elicitations = Collections.singleton(\n        PromptVariation.builder()\n            .withType(\"PlainText\")\n            .withValue(\"elicit\")\n            .build()\n    );", "modifier": "private final", "type": "Set<PromptVariation>", "declarator": "elicitations = Collections.singleton(\n        PromptVariation.builder()\n            .withType(\"PlainText\")\n            .withValue(\"elicit\")\n            .build()\n    )", "var_name": "elicitations"}, {"original_string": "@Mock\n    private IntentDefinition mockIntentDefinition;", "modifier": "@Mock\n    private", "type": "IntentDefinition", "declarator": "mockIntentDefinition", "var_name": "mockIntentDefinition"}, {"original_string": "@Mock\n    private SlotTypeDefinition mockSlotTypeDefinition;", "modifier": "@Mock\n    private", "type": "SlotTypeDefinition", "declarator": "mockSlotTypeDefinition", "var_name": "mockSlotTypeDefinition"}, {"original_string": "@Mock\n    private IntentSlotData mockSlotMetadata;", "modifier": "@Mock\n    private", "type": "IntentSlotData", "declarator": "mockSlotMetadata", "var_name": "mockSlotMetadata"}, {"original_string": "IntentSlotRenderer underTest = new IntentSlotRenderer();", "modifier": "", "type": "IntentSlotRenderer", "declarator": "underTest = new IntentSlotRenderer()", "var_name": "underTest"}], "file": "ask-sdk-interaction-model-mapper/src/test/java/com/amazon/ask/interaction/renderer/IntentSlotRendererTest.java"}, "test_case": {"identifier": "testRenderSlot_AddSamples", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRenderSlot_AddSamples() {\n        Slot expected = Slot.builder()\n            .withName(\"slot_name\")\n            .withType(\"slot_type\")\n            .withSamples(Collections.singletonList(\"test\"))\n            .build();\n\n        Slot actual = underTest.renderSlot(\"slot_name\", mockSlotTypeDefinition, IntentData.builder()\n            .addSlot(\"slot_name\", IntentSlotData.builder()\n                .addSamples(Collections.singletonList(\"test\"))\n                .build())\n            .build());\n\n        assertEquals(expected, actual);\n    }", "signature": "void testRenderSlot_AddSamples()", "full_signature": "@Test public void testRenderSlot_AddSamples()", "class_method_signature": "IntentSlotRendererTest.testRenderSlot_AddSamples()", "testcase": true, "constructor": false, "invocations": ["build", "withSamples", "withType", "withName", "builder", "singletonList", "renderSlot", "build", "addSlot", "builder", "build", "addSamples", "builder", "singletonList", "assertEquals"]}, "focal_class": {"identifier": "IntentSlotRenderer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CONFIRM_PREFIX = \"Confirm\";", "modifier": "private static final", "type": "String", "declarator": "CONFIRM_PREFIX = \"Confirm\"", "var_name": "CONFIRM_PREFIX"}, {"original_string": "private static final String ELICIT_PREFIX = \"Elicit\";", "modifier": "private static final", "type": "String", "declarator": "ELICIT_PREFIX = \"Elicit\"", "var_name": "ELICIT_PREFIX"}], "methods": [{"identifier": "renderSlot", "parameters": "(String slotName, SlotTypeDefinition slotType, IntentData intentData)", "modifiers": "public", "return": "Slot", "signature": "Slot renderSlot(String slotName, SlotTypeDefinition slotType, IntentData intentData)", "full_signature": "public Slot renderSlot(String slotName, SlotTypeDefinition slotType, IntentData intentData)", "class_method_signature": "IntentSlotRenderer.renderSlot(String slotName, SlotTypeDefinition slotType, IntentData intentData)", "testcase": false, "constructor": false}, {"identifier": "renderDialogSlot", "parameters": "(IntentDefinition intentDefinition, String slotName, SlotTypeDefinition slotType, IntentSlotData slotData)", "modifiers": "public", "return": "DialogSlot", "signature": "DialogSlot renderDialogSlot(IntentDefinition intentDefinition, String slotName, SlotTypeDefinition slotType, IntentSlotData slotData)", "full_signature": "public DialogSlot renderDialogSlot(IntentDefinition intentDefinition, String slotName, SlotTypeDefinition slotType, IntentSlotData slotData)", "class_method_signature": "IntentSlotRenderer.renderDialogSlot(IntentDefinition intentDefinition, String slotName, SlotTypeDefinition slotType, IntentSlotData slotData)", "testcase": false, "constructor": false}, {"identifier": "renderSlotPrompts", "parameters": "(IntentDefinition intentDefinition, String slotName, IntentSlotData slotData)", "modifiers": "public", "return": "List<Prompt>", "signature": "List<Prompt> renderSlotPrompts(IntentDefinition intentDefinition, String slotName, IntentSlotData slotData)", "full_signature": "public List<Prompt> renderSlotPrompts(IntentDefinition intentDefinition, String slotName, IntentSlotData slotData)", "class_method_signature": "IntentSlotRenderer.renderSlotPrompts(IntentDefinition intentDefinition, String slotName, IntentSlotData slotData)", "testcase": false, "constructor": false}, {"identifier": "getConfirmPromptName", "parameters": "(IntentDefinition intentDefinition, String slotName, IntentSlotData slotData)", "modifiers": "protected", "return": "String", "signature": "String getConfirmPromptName(IntentDefinition intentDefinition, String slotName, IntentSlotData slotData)", "full_signature": "protected String getConfirmPromptName(IntentDefinition intentDefinition, String slotName, IntentSlotData slotData)", "class_method_signature": "IntentSlotRenderer.getConfirmPromptName(IntentDefinition intentDefinition, String slotName, IntentSlotData slotData)", "testcase": false, "constructor": false}, {"identifier": "getElicitPromptName", "parameters": "(IntentDefinition intentDefinition, String slotName, IntentSlotData slotData)", "modifiers": "protected", "return": "String", "signature": "String getElicitPromptName(IntentDefinition intentDefinition, String slotName, IntentSlotData slotData)", "full_signature": "protected String getElicitPromptName(IntentDefinition intentDefinition, String slotName, IntentSlotData slotData)", "class_method_signature": "IntentSlotRenderer.getElicitPromptName(IntentDefinition intentDefinition, String slotName, IntentSlotData slotData)", "testcase": false, "constructor": false}, {"identifier": "getPromptName", "parameters": "(IntentDefinition intentDefinition, String slotName, IntentSlotData slotData,\n                                   Function<IntentSlotData, Set<PromptVariation>> getVariations, Function<DialogSlotPrompt, String> getPromptId,\n                                   String prefix)", "modifiers": "protected", "return": "String", "signature": "String getPromptName(IntentDefinition intentDefinition, String slotName, IntentSlotData slotData,\n                                   Function<IntentSlotData, Set<PromptVariation>> getVariations, Function<DialogSlotPrompt, String> getPromptId,\n                                   String prefix)", "full_signature": "protected String getPromptName(IntentDefinition intentDefinition, String slotName, IntentSlotData slotData,\n                                   Function<IntentSlotData, Set<PromptVariation>> getVariations, Function<DialogSlotPrompt, String> getPromptId,\n                                   String prefix)", "class_method_signature": "IntentSlotRenderer.getPromptName(IntentDefinition intentDefinition, String slotName, IntentSlotData slotData,\n                                   Function<IntentSlotData, Set<PromptVariation>> getVariations, Function<DialogSlotPrompt, String> getPromptId,\n                                   String prefix)", "testcase": false, "constructor": false}, {"identifier": "getPrompt", "parameters": "(String name, Set<PromptVariation> values)", "modifiers": "private static", "return": "Prompt", "signature": "Prompt getPrompt(String name, Set<PromptVariation> values)", "full_signature": "private static Prompt getPrompt(String name, Set<PromptVariation> values)", "class_method_signature": "IntentSlotRenderer.getPrompt(String name, Set<PromptVariation> values)", "testcase": false, "constructor": false}], "file": "ask-sdk-interaction-model-mapper/src/main/java/com/amazon/ask/interaction/renderer/IntentSlotRenderer.java"}, "focal_method": {"identifier": "renderSlot", "parameters": "(String slotName, SlotTypeDefinition slotType, IntentData intentData)", "modifiers": "public", "return": "Slot", "body": "public Slot renderSlot(String slotName, SlotTypeDefinition slotType, IntentData intentData) {\n        IntentSlotData data = intentData.getSlots().get(slotName);\n        List<String> samples = null;\n        if (data != null && !data.getSamples().isEmpty()) {\n            samples = new ArrayList<>(data.getSamples());\n        }\n        return Slot.builder()\n            .withName(slotName)\n            .withType(slotType.getName())\n            .withSamples(samples)\n            .build();\n    }", "signature": "Slot renderSlot(String slotName, SlotTypeDefinition slotType, IntentData intentData)", "full_signature": "public Slot renderSlot(String slotName, SlotTypeDefinition slotType, IntentData intentData)", "class_method_signature": "IntentSlotRenderer.renderSlot(String slotName, SlotTypeDefinition slotType, IntentData intentData)", "testcase": false, "constructor": false, "invocations": ["get", "getSlots", "isEmpty", "getSamples", "getSamples", "build", "withSamples", "withType", "withName", "builder", "getName"]}, "repository": {"repo_id": 143249569, "url": "https://github.com/amazon-archives/ask-sdk-frameworks-java", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 12, "size": 313, "license": "licensed"}}