{"test_class": {"identifier": "RelationalTableRegistrationRestControllerTest", "superclass": "extends AbstractRestTest", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private RelationalTableRegistrationRestController relationalTableRegistrationRestController;", "modifier": "@InjectMocks\n    private", "type": "RelationalTableRegistrationRestController", "declarator": "relationalTableRegistrationRestController", "var_name": "relationalTableRegistrationRestController"}, {"original_string": "@Mock\n    private RelationalTableRegistrationService relationalTableRegistrationService;", "modifier": "@Mock\n    private", "type": "RelationalTableRegistrationService", "declarator": "relationalTableRegistrationService", "var_name": "relationalTableRegistrationService"}], "file": "herd-code/herd-rest/src/test/java/org/finra/herd/rest/RelationalTableRegistrationRestControllerTest.java"}, "test_case": {"identifier": "testRelationalTableRegistrationRestController", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRelationalTableRegistrationRestController()\n    {\n        RelationalTableRegistrationCreateRequest createRequest = new RelationalTableRegistrationCreateRequest();\n        createRequest.setNamespace(BDEF_NAMESPACE);\n        createRequest.setDataProviderName(DATA_PROVIDER_NAME);\n        createRequest.setBusinessObjectDefinitionName(BDEF_NAME);\n        createRequest.setBusinessObjectFormatUsage(FORMAT_USAGE_CODE);\n        createRequest.setRelationalTableName(RELATIONAL_TABLE_NAME);\n        createRequest.setStorageName(STORAGE_NAME);\n\n        BusinessObjectData businessObjectData = new BusinessObjectData();\n        businessObjectData.setId(businessObjectData.getId());\n        businessObjectData.setNamespace(BDEF_NAMESPACE);\n        businessObjectData.setBusinessObjectDefinitionName(BDEF_NAME);\n        businessObjectData.setBusinessObjectFormatUsage(FORMAT_USAGE_CODE);\n        businessObjectData.setVersion(0);\n        businessObjectData.setStatus(\"VALID\");\n        businessObjectData.setLatestVersion(true);\n        businessObjectData.setBusinessObjectFormatFileType(FileTypeEntity.RELATIONAL_TABLE_FILE_TYPE);\n        businessObjectData.setPartitionValue(BusinessObjectDataServiceImpl.NO_PARTITIONING_PARTITION_VALUE);\n        businessObjectData.setPartitionKey(BusinessObjectDataServiceImpl.NO_PARTITIONING_PARTITION_KEY);\n\n\n        when(relationalTableRegistrationService.createRelationalTableRegistration(createRequest, APPEND_TO_EXISTING_BUSINESS_OBJECT_DEFINTION_FALSE))\n            .thenReturn(businessObjectData);\n\n        BusinessObjectData returnedBusinessObjectData =\n            relationalTableRegistrationRestController.createRelationalTableRegistration(createRequest, APPEND_TO_EXISTING_BUSINESS_OBJECT_DEFINTION_FALSE);\n\n        // Verify the external calls.\n        verify(relationalTableRegistrationService).createRelationalTableRegistration(createRequest, APPEND_TO_EXISTING_BUSINESS_OBJECT_DEFINTION_FALSE);\n        verifyNoMoreInteractions(relationalTableRegistrationService);\n\n        // Validate the returned object.\n        assertEquals(businessObjectData, returnedBusinessObjectData);\n    }", "signature": "void testRelationalTableRegistrationRestController()", "full_signature": "@Test public void testRelationalTableRegistrationRestController()", "class_method_signature": "RelationalTableRegistrationRestControllerTest.testRelationalTableRegistrationRestController()", "testcase": true, "constructor": false, "invocations": ["setNamespace", "setDataProviderName", "setBusinessObjectDefinitionName", "setBusinessObjectFormatUsage", "setRelationalTableName", "setStorageName", "setId", "getId", "setNamespace", "setBusinessObjectDefinitionName", "setBusinessObjectFormatUsage", "setVersion", "setStatus", "setLatestVersion", "setBusinessObjectFormatFileType", "setPartitionValue", "setPartitionKey", "thenReturn", "when", "createRelationalTableRegistration", "createRelationalTableRegistration", "createRelationalTableRegistration", "verify", "verifyNoMoreInteractions", "assertEquals"]}, "focal_class": {"identifier": "RelationalTableRegistrationRestController", "superclass": "extends HerdBaseController", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private RelationalTableRegistrationService relationalTableRegistrationService;", "modifier": "@Autowired\n    private", "type": "RelationalTableRegistrationService", "declarator": "relationalTableRegistrationService", "var_name": "relationalTableRegistrationService"}], "methods": [{"identifier": "createRelationalTableRegistration", "parameters": "(@RequestBody RelationalTableRegistrationCreateRequest relationalTableRegistrationCreateRequest,\n        @RequestParam(value = \"appendToExistingBusinessObjectDefinition\", required = false, defaultValue = \"false\")\n            Boolean appendToExistingBusinessObjectDefinition)", "modifiers": "@RequestMapping(value = \"/relationalTableRegistrations\", method = RequestMethod.POST, consumes = {\"application/xml\", \"application/json\"}) @Secured(SecurityFunctions.FN_RELATIONAL_TABLE_REGISTRATIONS_POST) public", "return": "BusinessObjectData", "signature": "BusinessObjectData createRelationalTableRegistration(@RequestBody RelationalTableRegistrationCreateRequest relationalTableRegistrationCreateRequest,\n        @RequestParam(value = \"appendToExistingBusinessObjectDefinition\", required = false, defaultValue = \"false\")\n            Boolean appendToExistingBusinessObjectDefinition)", "full_signature": "@RequestMapping(value = \"/relationalTableRegistrations\", method = RequestMethod.POST, consumes = {\"application/xml\", \"application/json\"}) @Secured(SecurityFunctions.FN_RELATIONAL_TABLE_REGISTRATIONS_POST) public BusinessObjectData createRelationalTableRegistration(@RequestBody RelationalTableRegistrationCreateRequest relationalTableRegistrationCreateRequest,\n        @RequestParam(value = \"appendToExistingBusinessObjectDefinition\", required = false, defaultValue = \"false\")\n            Boolean appendToExistingBusinessObjectDefinition)", "class_method_signature": "RelationalTableRegistrationRestController.createRelationalTableRegistration(@RequestBody RelationalTableRegistrationCreateRequest relationalTableRegistrationCreateRequest,\n        @RequestParam(value = \"appendToExistingBusinessObjectDefinition\", required = false, defaultValue = \"false\")\n            Boolean appendToExistingBusinessObjectDefinition)", "testcase": false, "constructor": false}], "file": "herd-code/herd-rest/src/main/java/org/finra/herd/rest/RelationalTableRegistrationRestController.java"}, "focal_method": {"identifier": "createRelationalTableRegistration", "parameters": "(@RequestBody RelationalTableRegistrationCreateRequest relationalTableRegistrationCreateRequest,\n        @RequestParam(value = \"appendToExistingBusinessObjectDefinition\", required = false, defaultValue = \"false\")\n            Boolean appendToExistingBusinessObjectDefinition)", "modifiers": "@RequestMapping(value = \"/relationalTableRegistrations\", method = RequestMethod.POST, consumes = {\"application/xml\", \"application/json\"}) @Secured(SecurityFunctions.FN_RELATIONAL_TABLE_REGISTRATIONS_POST) public", "return": "BusinessObjectData", "body": "@RequestMapping(value = \"/relationalTableRegistrations\", method = RequestMethod.POST, consumes = {\"application/xml\", \"application/json\"})\n    @Secured(SecurityFunctions.FN_RELATIONAL_TABLE_REGISTRATIONS_POST)\n    public BusinessObjectData createRelationalTableRegistration(@RequestBody RelationalTableRegistrationCreateRequest relationalTableRegistrationCreateRequest,\n        @RequestParam(value = \"appendToExistingBusinessObjectDefinition\", required = false, defaultValue = \"false\")\n            Boolean appendToExistingBusinessObjectDefinition)\n    {\n        return relationalTableRegistrationService\n            .createRelationalTableRegistration(relationalTableRegistrationCreateRequest, appendToExistingBusinessObjectDefinition);\n    }", "signature": "BusinessObjectData createRelationalTableRegistration(@RequestBody RelationalTableRegistrationCreateRequest relationalTableRegistrationCreateRequest,\n        @RequestParam(value = \"appendToExistingBusinessObjectDefinition\", required = false, defaultValue = \"false\")\n            Boolean appendToExistingBusinessObjectDefinition)", "full_signature": "@RequestMapping(value = \"/relationalTableRegistrations\", method = RequestMethod.POST, consumes = {\"application/xml\", \"application/json\"}) @Secured(SecurityFunctions.FN_RELATIONAL_TABLE_REGISTRATIONS_POST) public BusinessObjectData createRelationalTableRegistration(@RequestBody RelationalTableRegistrationCreateRequest relationalTableRegistrationCreateRequest,\n        @RequestParam(value = \"appendToExistingBusinessObjectDefinition\", required = false, defaultValue = \"false\")\n            Boolean appendToExistingBusinessObjectDefinition)", "class_method_signature": "RelationalTableRegistrationRestController.createRelationalTableRegistration(@RequestBody RelationalTableRegistrationCreateRequest relationalTableRegistrationCreateRequest,\n        @RequestParam(value = \"appendToExistingBusinessObjectDefinition\", required = false, defaultValue = \"false\")\n            Boolean appendToExistingBusinessObjectDefinition)", "testcase": false, "constructor": false, "invocations": ["createRelationalTableRegistration"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}