{"test_class": {"identifier": "TestParamParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DocumentMap map;", "modifier": "private", "type": "DocumentMap", "declarator": "map", "var_name": "map"}, {"original_string": "private JVoiceXmlDocumentServer server;", "modifier": "private", "type": "JVoiceXmlDocumentServer", "declarator": "server", "var_name": "server"}, {"original_string": "private Session session;", "modifier": "private", "type": "Session", "declarator": "session", "var_name": "session"}], "file": "org.jvoicexml/src/test/java/org/jvoicexml/interpreter/TestParamParser.java"}, "test_case": {"identifier": "testGetParameterValues", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetParameterValues() throws Exception, JVoiceXMLEvent {\n        String test = \"actor\";\n        final URI uri = map.getUri(\"/test\");\n        map.addDocument(uri, test);\n\n        final DataModel model = Mockito.mock(DataModel.class);\n        Mockito.when(model.evaluateExpression(\"last\", Object.class))\n                .thenReturn(\"Buchholz\");\n\n        final VoiceXmlDocument doc = new VoiceXmlDocument();\n        final Vxml vxml = doc.getVxml();\n        final Form form = vxml.appendChild(Form.class);\n        final ObjectTag object = form.appendChild(ObjectTag.class);\n        final Param param1 = object.appendChild(Param.class);\n        param1.setName(\"firstname\");\n        param1.setValue(\"Horst\");\n        final Param param2 = object.appendChild(Param.class);\n        param2.setName(\"lastname\");\n        param2.setExpr(\"last\");\n        final Param param3 = object.appendChild(Param.class);\n        param3.setName(\"job\");\n        param3.setValue(uri.toString());\n        param3.setValuetype(ParamValueType.REF);\n        param3.setType(\"text/plain\");\n\n        final ParamParser parser = new ParamParser(object, model, server,\n                session);\n        final Collection<Object> params = parser.getParameterValues();\n        Assert.assertEquals(3, params.size());\n        final Iterator<Object> iterator = params.iterator();\n        Assert.assertEquals(\"Horst\", iterator.next());\n        Assert.assertEquals(\"Buchholz\", iterator.next());\n        Assert.assertEquals(test, iterator.next());\n    }", "signature": "void testGetParameterValues()", "full_signature": "@Test public void testGetParameterValues()", "class_method_signature": "TestParamParser.testGetParameterValues()", "testcase": true, "constructor": false, "invocations": ["getUri", "addDocument", "mock", "thenReturn", "when", "evaluateExpression", "getVxml", "appendChild", "appendChild", "appendChild", "setName", "setValue", "appendChild", "setName", "setExpr", "appendChild", "setName", "setValue", "toString", "setValuetype", "setType", "getParameterValues", "assertEquals", "size", "iterator", "assertEquals", "next", "assertEquals", "next", "assertEquals", "next"]}, "focal_class": {"identifier": "ParamParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final VoiceXmlNode node;", "modifier": "private final", "type": "VoiceXmlNode", "declarator": "node", "var_name": "node"}, {"original_string": "private final DataModel model;", "modifier": "private final", "type": "DataModel", "declarator": "model", "var_name": "model"}, {"original_string": "private final DocumentServer server;", "modifier": "private final", "type": "DocumentServer", "declarator": "server", "var_name": "server"}, {"original_string": "private final String sessionId;", "modifier": "private final", "type": "String", "declarator": "sessionId", "var_name": "sessionId"}], "methods": [{"identifier": "ParamParser", "parameters": "(final VoiceXmlNode vxml, final DataModel dataModel,\n            final DocumentServer documentServer, final Session currentSession)", "modifiers": "", "return": "", "signature": " ParamParser(final VoiceXmlNode vxml, final DataModel dataModel,\n            final DocumentServer documentServer, final Session currentSession)", "full_signature": "  ParamParser(final VoiceXmlNode vxml, final DataModel dataModel,\n            final DocumentServer documentServer, final Session currentSession)", "class_method_signature": "ParamParser.ParamParser(final VoiceXmlNode vxml, final DataModel dataModel,\n            final DocumentServer documentServer, final Session currentSession)", "testcase": false, "constructor": true}, {"identifier": "getParameters", "parameters": "()", "modifiers": "public", "return": "Map<String, Object>", "signature": "Map<String, Object> getParameters()", "full_signature": "public Map<String, Object> getParameters()", "class_method_signature": "ParamParser.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getParameterValues", "parameters": "()", "modifiers": "public", "return": "Collection<Object>", "signature": "Collection<Object> getParameterValues()", "full_signature": "public Collection<Object> getParameterValues()", "class_method_signature": "ParamParser.getParameterValues()", "testcase": false, "constructor": false}], "file": "org.jvoicexml/src/main/java/org/jvoicexml/interpreter/ParamParser.java"}, "focal_method": {"identifier": "getParameterValues", "parameters": "()", "modifiers": "public", "return": "Collection<Object>", "body": "public Collection<Object> getParameterValues() throws SemanticError,\n            BadFetchError {\n        final Collection<Param> paramtags = node.getChildNodes(Param.class);\n\n        final Collection<Object> parameters = new java.util.ArrayList<Object>();\n\n        for (Param param : paramtags) {\n            Object value = param.getValue();\n            if (value == null) {\n                final String expr = param.getExpr();\n                if (expr == null) {\n                    throw new BadFetchError(\"Exactly one of \\\"value\\\" or \"\n                            + \"\\\"expr\\\" must be specified in a param tag!\");\n                }\n                final String unescapedExpr = StringEscapeUtils\n                        .unescapeXml(expr);\n                value = model.evaluateExpression(unescapedExpr, Object.class);\n            } else {\n                final ParamValueType valueType = param.getValuetype();\n                if (valueType == ParamValueType.REF) {\n                    final URI uri;\n                    try {\n                        uri = new URI(value.toString());\n                    } catch (URISyntaxException e) {\n                        throw new BadFetchError(\"'\" + value\n                                + \"' is not a valid URI\");\n                    }\n                    final String type = param.getType();\n                    final DocumentDescriptor descriptor =\n                            new DocumentDescriptor(uri);\n                    value = server.getObject(sessionId, descriptor, type);\n                }\n            }\n            parameters.add(value);\n        }\n\n        return parameters;\n    }", "signature": "Collection<Object> getParameterValues()", "full_signature": "public Collection<Object> getParameterValues()", "class_method_signature": "ParamParser.getParameterValues()", "testcase": false, "constructor": false, "invocations": ["getChildNodes", "getValue", "getExpr", "unescapeXml", "evaluateExpression", "getValuetype", "toString", "getType", "getObject", "add"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}