{"test_class": {"identifier": "OrderedComparatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/common/src/test/java/com/alipay/sofa/rpc/common/struct/OrderedComparatorTest.java"}, "test_case": {"identifier": "testCompare", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCompare() throws Exception {\n        List<Obj> list = new ArrayList<Obj>();\n        list.add(new Obj(\"a\", 10));\n        list.add(new Obj(\"b\", 2));\n        list.add(new Obj(\"c\", 6));\n        list.add(new Obj(\"d\", 6));\n        list.add(new Obj(\"e\", 0));\n        list.add(new Obj(\"f\", -1));\n        list.add(new Obj(\"g\", 10));\n\n        Collections.sort(list, new OrderedComparator<Obj>());\n        StringBuilder sb = new StringBuilder();\n        for (Obj test : list) {\n            sb.append(test.getName());\n        }\n        Assert.assertEquals(sb.toString(), \"febcdag\");\n\n        Collections.sort(list, new OrderedComparator<Obj>(false));\n        sb = new StringBuilder();\n        for (Obj test : list) {\n            sb.append(test.getName());\n        }\n        Assert.assertEquals(sb.toString(), \"agcdbef\");\n    }", "signature": "void testCompare()", "full_signature": "@Test public void testCompare()", "class_method_signature": "OrderedComparatorTest.testCompare()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "add", "add", "add", "add", "sort", "append", "getName", "assertEquals", "toString", "sort", "append", "getName", "assertEquals", "toString"]}, "focal_class": {"identifier": "OrderedComparator", "superclass": "", "interfaces": "implements Comparator<T>, Serializable", "fields": [{"original_string": "private final boolean order;", "modifier": "private final", "type": "boolean", "declarator": "order", "var_name": "order"}], "methods": [{"identifier": "OrderedComparator", "parameters": "()", "modifiers": "public", "return": "", "signature": " OrderedComparator()", "full_signature": "public  OrderedComparator()", "class_method_signature": "OrderedComparator.OrderedComparator()", "testcase": false, "constructor": true}, {"identifier": "OrderedComparator", "parameters": "(boolean smallToLarge)", "modifiers": "public", "return": "", "signature": " OrderedComparator(boolean smallToLarge)", "full_signature": "public  OrderedComparator(boolean smallToLarge)", "class_method_signature": "OrderedComparator.OrderedComparator(boolean smallToLarge)", "testcase": false, "constructor": true}, {"identifier": "compare", "parameters": "(T o1, T o2)", "modifiers": "@Override public", "return": "int", "signature": "int compare(T o1, T o2)", "full_signature": "@Override public int compare(T o1, T o2)", "class_method_signature": "OrderedComparator.compare(T o1, T o2)", "testcase": false, "constructor": false}], "file": "core/common/src/main/java/com/alipay/sofa/rpc/common/struct/OrderedComparator.java"}, "focal_method": {"identifier": "compare", "parameters": "(T o1, T o2)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int compare(T o1, T o2) {\n        // order\u4e00\u6837\u7684\u60c5\u51b5\u4e0b\uff0c\u987a\u5e8f\u4e0d\u53d8\n        return order ? o1.getOrder() - o2.getOrder() :\n            o2.getOrder() - o1.getOrder();\n    }", "signature": "int compare(T o1, T o2)", "full_signature": "@Override public int compare(T o1, T o2)", "class_method_signature": "OrderedComparator.compare(T o1, T o2)", "testcase": false, "constructor": false, "invocations": ["getOrder", "getOrder", "getOrder", "getOrder"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}