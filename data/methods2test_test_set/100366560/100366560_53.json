{"test_class": {"identifier": "AbstractGenericConverterTest", "superclass": "", "interfaces": "", "fields": [], "file": "beanmother-core/src/test/java/io/beanmother/core/converter/AbstractGenericConverterTest.java"}, "test_case": {"identifier": "getSourceTypeToken", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getSourceTypeToken() throws Exception {\n        TestGenericConverter converter = new TestGenericConverter();\n        assertTrue(converter.getSourceTypeToken().equals(TypeToken.of(Integer.class)));\n    }", "signature": "void getSourceTypeToken()", "full_signature": "@Test public void getSourceTypeToken()", "class_method_signature": "AbstractGenericConverterTest.getSourceTypeToken()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "equals", "getSourceTypeToken", "of"]}, "focal_class": {"identifier": "AbstractGenericConverter", "superclass": "extends AbstractConverter", "interfaces": "", "fields": [{"original_string": "private TypeToken<S> sourceTypeToken = new TypeToken<S>(getClass()) {};", "modifier": "private", "type": "TypeToken<S>", "declarator": "sourceTypeToken = new TypeToken<S>(getClass()) {}", "var_name": "sourceTypeToken"}, {"original_string": "private TypeToken<D> targetTypeToken = new TypeToken<D>(getClass()) {};", "modifier": "private", "type": "TypeToken<D>", "declarator": "targetTypeToken = new TypeToken<D>(getClass()) {}", "var_name": "targetTypeToken"}], "methods": [{"identifier": "AbstractGenericConverter", "parameters": "()", "modifiers": "public", "return": "", "signature": " AbstractGenericConverter()", "full_signature": "public  AbstractGenericConverter()", "class_method_signature": "AbstractGenericConverter.AbstractGenericConverter()", "testcase": false, "constructor": true}, {"identifier": "AbstractGenericConverter", "parameters": "(int priority)", "modifiers": "public", "return": "", "signature": " AbstractGenericConverter(int priority)", "full_signature": "public  AbstractGenericConverter(int priority)", "class_method_signature": "AbstractGenericConverter.AbstractGenericConverter(int priority)", "testcase": false, "constructor": true}, {"identifier": "convert", "parameters": "(Object source, TypeToken<?> typeToken)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "Object", "signature": "Object convert(Object source, TypeToken<?> typeToken)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public Object convert(Object source, TypeToken<?> typeToken)", "class_method_signature": "AbstractGenericConverter.convert(Object source, TypeToken<?> typeToken)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(S source)", "modifiers": "public abstract", "return": "D", "signature": "D convert(S source)", "full_signature": "public abstract D convert(S source)", "class_method_signature": "AbstractGenericConverter.convert(S source)", "testcase": false, "constructor": false}, {"identifier": "canHandle", "parameters": "(Object source, TypeToken<?> typeToken)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canHandle(Object source, TypeToken<?> typeToken)", "full_signature": "@Override public boolean canHandle(Object source, TypeToken<?> typeToken)", "class_method_signature": "AbstractGenericConverter.canHandle(Object source, TypeToken<?> typeToken)", "testcase": false, "constructor": false}, {"identifier": "getSourceTypeToken", "parameters": "()", "modifiers": "public", "return": "TypeToken<S>", "signature": "TypeToken<S> getSourceTypeToken()", "full_signature": "public TypeToken<S> getSourceTypeToken()", "class_method_signature": "AbstractGenericConverter.getSourceTypeToken()", "testcase": false, "constructor": false}, {"identifier": "getTargetTypeToken", "parameters": "()", "modifiers": "public", "return": "TypeToken<D>", "signature": "TypeToken<D> getTargetTypeToken()", "full_signature": "public TypeToken<D> getTargetTypeToken()", "class_method_signature": "AbstractGenericConverter.getTargetTypeToken()", "testcase": false, "constructor": false}], "file": "beanmother-core/src/main/java/io/beanmother/core/converter/AbstractGenericConverter.java"}, "focal_method": {"identifier": "getSourceTypeToken", "parameters": "()", "modifiers": "public", "return": "TypeToken<S>", "body": "public TypeToken<S> getSourceTypeToken() {\n        return sourceTypeToken;\n    }", "signature": "TypeToken<S> getSourceTypeToken()", "full_signature": "public TypeToken<S> getSourceTypeToken()", "class_method_signature": "AbstractGenericConverter.getSourceTypeToken()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 100366560, "url": "https://github.com/keepcosmos/beanmother", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 95, "size": 688, "license": "licensed"}}