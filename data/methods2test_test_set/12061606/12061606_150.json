{"test_class": {"identifier": "MaximumMatchingTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/uk/ac/ebi/beam/MaximumMatchingTest.java"}, "test_case": {"identifier": "furan_augment", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void furan_augment() throws Exception {\n        Graph g = Graph.fromSmiles(\"o1cccc1\");\n        IntSet s = IntSet.allOf(1, 2, 3, 4); // exclude the oxygen\n        Matching m = Matching.empty(g);\n        m.match(2, 3);\n        MaximumMatching.maximise(g, m, 2, s);\n        assertThat(m.matches(), hasItems(Tuple.of(1, 2),\n                                         Tuple.of(3, 4)));\n    }", "signature": "void furan_augment()", "full_signature": "@Test public void furan_augment()", "class_method_signature": "MaximumMatchingTest.furan_augment()", "testcase": true, "constructor": false, "invocations": ["fromSmiles", "allOf", "empty", "match", "maximise", "assertThat", "matches", "hasItems", "of", "of"]}, "focal_class": {"identifier": "MaximumMatching", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Graph graph;", "modifier": "private final", "type": "Graph", "declarator": "graph", "var_name": "graph"}, {"original_string": "private final Matching matching;", "modifier": "private final", "type": "Matching", "declarator": "matching", "var_name": "matching"}, {"original_string": "private final IntSet subset;", "modifier": "private final", "type": "IntSet", "declarator": "subset", "var_name": "subset"}, {"original_string": "private final int[] even, odd;", "modifier": "private final", "type": "int[]", "declarator": "even", "var_name": "even"}, {"original_string": "private static final int nil = -1;", "modifier": "private static final", "type": "int", "declarator": "nil = -1", "var_name": "nil"}, {"original_string": "private final FixedSizeQueue queue;", "modifier": "private final", "type": "FixedSizeQueue", "declarator": "queue", "var_name": "queue"}, {"original_string": "private final UnionFind uf;", "modifier": "private final", "type": "UnionFind", "declarator": "uf", "var_name": "uf"}, {"original_string": "private final Map<Integer, Tuple> bridges = new HashMap<Integer, Tuple>();", "modifier": "private final", "type": "Map<Integer, Tuple>", "declarator": "bridges = new HashMap<Integer, Tuple>()", "var_name": "bridges"}, {"original_string": "private final int[]  path;", "modifier": "private final", "type": "int[]", "declarator": "path", "var_name": "path"}, {"original_string": "private final BitSet vAncestors, wAncestors;", "modifier": "private final", "type": "BitSet", "declarator": "vAncestors", "var_name": "vAncestors"}, {"original_string": "private final int nMatched;", "modifier": "private final", "type": "int", "declarator": "nMatched", "var_name": "nMatched"}], "methods": [{"identifier": "MaximumMatching", "parameters": "(Graph graph, Matching matching, int nMatched, IntSet subset)", "modifiers": "private", "return": "", "signature": " MaximumMatching(Graph graph, Matching matching, int nMatched, IntSet subset)", "full_signature": "private  MaximumMatching(Graph graph, Matching matching, int nMatched, IntSet subset)", "class_method_signature": "MaximumMatching.MaximumMatching(Graph graph, Matching matching, int nMatched, IntSet subset)", "testcase": false, "constructor": true}, {"identifier": "augment", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean augment()", "full_signature": "private boolean augment()", "class_method_signature": "MaximumMatching.augment()", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(int v, int w)", "modifiers": "private", "return": "boolean", "signature": "boolean check(int v, int w)", "full_signature": "private boolean check(int v, int w)", "class_method_signature": "MaximumMatching.check(int v, int w)", "testcase": false, "constructor": false}, {"identifier": "parent", "parameters": "(BitSet ancestors, int curr)", "modifiers": "private", "return": "int", "signature": "int parent(BitSet ancestors, int curr)", "full_signature": "private int parent(BitSet ancestors, int curr)", "class_method_signature": "MaximumMatching.parent(BitSet ancestors, int curr)", "testcase": false, "constructor": false}, {"identifier": "blossom", "parameters": "(int v, int w, int base)", "modifiers": "private", "return": "void", "signature": "void blossom(int v, int w, int base)", "full_signature": "private void blossom(int v, int w, int base)", "class_method_signature": "MaximumMatching.blossom(int v, int w, int base)", "testcase": false, "constructor": false}, {"identifier": "blossomSupports", "parameters": "(int v, int w, int base)", "modifiers": "private", "return": "int[]", "signature": "int[] blossomSupports(int v, int w, int base)", "full_signature": "private int[] blossomSupports(int v, int w, int base)", "class_method_signature": "MaximumMatching.blossomSupports(int v, int w, int base)", "testcase": false, "constructor": false}, {"identifier": "augment", "parameters": "(int v)", "modifiers": "private", "return": "void", "signature": "void augment(int v)", "full_signature": "private void augment(int v)", "class_method_signature": "MaximumMatching.augment(int v)", "testcase": false, "constructor": false}, {"identifier": "buildPath", "parameters": "(int[] path, int i, int start, int goal)", "modifiers": "private", "return": "int", "signature": "int buildPath(int[] path, int i, int start, int goal)", "full_signature": "private int buildPath(int[] path, int i, int start, int goal)", "class_method_signature": "MaximumMatching.buildPath(int[] path, int i, int start, int goal)", "testcase": false, "constructor": false}, {"identifier": "maximise", "parameters": "(Graph g, Matching m, int n, IntSet s)", "modifiers": "static", "return": "int", "signature": "int maximise(Graph g, Matching m, int n, IntSet s)", "full_signature": "static int maximise(Graph g, Matching m, int n, IntSet s)", "class_method_signature": "MaximumMatching.maximise(Graph g, Matching m, int n, IntSet s)", "testcase": false, "constructor": false}, {"identifier": "maximise", "parameters": "(Graph g, Matching m, int n)", "modifiers": "static", "return": "int", "signature": "int maximise(Graph g, Matching m, int n)", "full_signature": "static int maximise(Graph g, Matching m, int n)", "class_method_signature": "MaximumMatching.maximise(Graph g, Matching m, int n)", "testcase": false, "constructor": false}, {"identifier": "maximal", "parameters": "(Graph g)", "modifiers": "static", "return": "Matching", "signature": "Matching maximal(Graph g)", "full_signature": "static Matching maximal(Graph g)", "class_method_signature": "MaximumMatching.maximal(Graph g)", "testcase": false, "constructor": false}, {"identifier": "reverse", "parameters": "(int[] path, int i, int j)", "modifiers": "static", "return": "void", "signature": "void reverse(int[] path, int i, int j)", "full_signature": "static void reverse(int[] path, int i, int j)", "class_method_signature": "MaximumMatching.reverse(int[] path, int i, int j)", "testcase": false, "constructor": false}], "file": "core/src/main/java/uk/ac/ebi/beam/MaximumMatching.java"}, "focal_method": {"identifier": "maximise", "parameters": "(Graph g, Matching m, int n, IntSet s)", "modifiers": "static", "return": "int", "body": "static int maximise(Graph g, Matching m, int n, IntSet s) {\n        MaximumMatching mm = new MaximumMatching(g, m, n, s);\n        return mm.nMatched;\n    }", "signature": "int maximise(Graph g, Matching m, int n, IntSet s)", "full_signature": "static int maximise(Graph g, Matching m, int n, IntSet s)", "class_method_signature": "MaximumMatching.maximise(Graph g, Matching m, int n, IntSet s)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 12061606, "url": "https://github.com/johnmay/beam", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 19, "size": 825, "license": "licensed"}}