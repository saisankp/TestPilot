{"test_class": {"identifier": "PublicKeyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(PublicKeyTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(PublicKeyTest.class)", "var_name": "LOGGER"}], "file": "src/main/java/com/gxchain/client/graphenej/PublicKeyTest.java"}, "test_case": {"identifier": "equals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void equals() throws Exception {\n        Address address1 = new Address(\"BTS8RiFgs8HkcVPVobHLKEv6yL3iXcC9SWjbPVS15dDAXLG9GYhnY\");\n        Address address2 = new Address(\"BTS8RiFgs8HkcVPVobHLKEv6yL3iXcC9SWjbPVS15dDAXLG9GYhnY\");\n        Address address3 = new Address(\"BTS8RiFgs8HkcVPVobHLKEv6yL3iXcC9SWjbPVS15dDAXLG9GYp00\");\n        PublicKey pk1 = address1.getPublicKey();\n        PublicKey pk2 = address2.getPublicKey();\n        PublicKey pk3 = address3.getPublicKey();\n        assertEquals(\"Public keys must be equal\", pk1, pk2);\n        assertNotEquals(\"Public keys must not be equal\", pk1, pk3);\n    }", "signature": "void equals()", "full_signature": "@Test public void equals()", "class_method_signature": "PublicKeyTest.equals()", "testcase": true, "constructor": false, "invocations": ["getPublicKey", "getPublicKey", "getPublicKey", "assertEquals", "assertNotEquals"]}, "focal_class": {"identifier": "PublicKey", "superclass": "", "interfaces": "implements ByteSerializable, Serializable", "fields": [{"original_string": "private ECKey publicKey;", "modifier": "private", "type": "ECKey", "declarator": "publicKey", "var_name": "publicKey"}], "methods": [{"identifier": "PublicKey", "parameters": "(ECKey key)", "modifiers": "public", "return": "", "signature": " PublicKey(ECKey key)", "full_signature": "public  PublicKey(ECKey key)", "class_method_signature": "PublicKey.PublicKey(ECKey key)", "testcase": false, "constructor": true}, {"identifier": "getKey", "parameters": "()", "modifiers": "public", "return": "ECKey", "signature": "ECKey getKey()", "full_signature": "public ECKey getKey()", "class_method_signature": "PublicKey.getKey()", "testcase": false, "constructor": false}, {"identifier": "toBytes", "parameters": "()", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] toBytes()", "full_signature": "@Override public byte[] toBytes()", "class_method_signature": "PublicKey.toBytes()", "testcase": false, "constructor": false}, {"identifier": "getAddress", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAddress()", "full_signature": "public String getAddress()", "class_method_signature": "PublicKey.getAddress()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "PublicKey.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "PublicKey.equals(Object obj)", "testcase": false, "constructor": false}], "file": "src/main/java/com/gxchain/client/graphenej/PublicKey.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean equals(Object obj) {\n        PublicKey other = (PublicKey) obj;\n        return this.publicKey.equals(other.getKey());\n    }", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "PublicKey.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["equals", "getKey"]}, "repository": {"repo_id": 140260316, "url": "https://github.com/gxchain/gxclient-java", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 11, "size": 457, "license": "licensed"}}