{"test_class": {"identifier": "GattSerialMessageTest", "superclass": "", "interfaces": "", "fields": [], "file": "sdk/src/test/java/com/punchthrough/bean/sdk/internal/serial/GattSerialMessageTest.java"}, "test_case": {"identifier": "testParseMessage2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseMessage2() {\n        byte[] payload = new byte[]{0x0, 0x0, 0x61};\n        byte[] serial = new byte[]{3, 0, 0, 0, 97, 89, -125};\n        byte[] result = GattSerialMessage.parse(serial);\n        assertThat(Arrays.equals(payload, result)).isTrue();\n    }", "signature": "void testParseMessage2()", "full_signature": "@Test public void testParseMessage2()", "class_method_signature": "GattSerialMessageTest.testParseMessage2()", "testcase": true, "constructor": false, "invocations": ["parse", "isTrue", "assertThat", "equals"]}, "focal_class": {"identifier": "GattSerialMessage", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TAG = \"GattSerialMessage\";", "modifier": "private static final", "type": "String", "declarator": "TAG = \"GattSerialMessage\"", "var_name": "TAG"}, {"original_string": "private final Buffer mBuffer;", "modifier": "private final", "type": "Buffer", "declarator": "mBuffer", "var_name": "mBuffer"}], "methods": [{"identifier": "GattSerialMessage", "parameters": "(Buffer buffer)", "modifiers": "private", "return": "", "signature": " GattSerialMessage(Buffer buffer)", "full_signature": "private  GattSerialMessage(Buffer buffer)", "class_method_signature": "GattSerialMessage.GattSerialMessage(Buffer buffer)", "testcase": false, "constructor": true}, {"identifier": "fromPayload", "parameters": "(byte[] payload)", "modifiers": "public static", "return": "GattSerialMessage", "signature": "GattSerialMessage fromPayload(byte[] payload)", "full_signature": "public static GattSerialMessage fromPayload(byte[] payload)", "class_method_signature": "GattSerialMessage.fromPayload(byte[] payload)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(byte[] payload)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] parse(byte[] payload)", "full_signature": "public static byte[] parse(byte[] payload)", "class_method_signature": "GattSerialMessage.parse(byte[] payload)", "testcase": false, "constructor": false}, {"identifier": "computeCRC16", "parameters": "(byte[] data, int offset, int length)", "modifiers": "static", "return": "int", "signature": "int computeCRC16(byte[] data, int offset, int length)", "full_signature": "static int computeCRC16(byte[] data, int offset, int length)", "class_method_signature": "GattSerialMessage.computeCRC16(byte[] data, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "computeCRC16", "parameters": "(int startingCrc, byte[] data, int offset, int length)", "modifiers": "static", "return": "int", "signature": "int computeCRC16(int startingCrc, byte[] data, int offset, int length)", "full_signature": "static int computeCRC16(int startingCrc, byte[] data, int offset, int length)", "class_method_signature": "GattSerialMessage.computeCRC16(int startingCrc, byte[] data, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "getBuffer", "parameters": "()", "modifiers": "public", "return": "Buffer", "signature": "Buffer getBuffer()", "full_signature": "public Buffer getBuffer()", "class_method_signature": "GattSerialMessage.getBuffer()", "testcase": false, "constructor": false}], "file": "sdk/src/main/java/com/punchthrough/bean/sdk/internal/serial/GattSerialMessage.java"}, "focal_method": {"identifier": "parse", "parameters": "(byte[] payload)", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] parse(byte[] payload) {\n        int length = (payload[0] & 0xff);\n        Buffer buffer = new Buffer();\n        buffer.write(payload, 2, length);\n        int crc = computeCRC16(payload, 0, payload.length - 2);\n        int checkCrc = (((payload[payload.length - 1] & 0xff) << 8)) + (payload[payload.length - 2] & 0xff);\n        if (crc != checkCrc) {\n            Log.w(TAG, \"Checksum failed\");\n            throw new IllegalStateException(\"Checksum mismatch\");\n        }\n        return buffer.readByteArray();\n    }", "signature": "byte[] parse(byte[] payload)", "full_signature": "public static byte[] parse(byte[] payload)", "class_method_signature": "GattSerialMessage.parse(byte[] payload)", "testcase": false, "constructor": false, "invocations": ["write", "computeCRC16", "w", "readByteArray"]}, "repository": {"repo_id": 33499067, "url": "https://github.com/PunchThrough/bean-sdk-android", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 55, "size": 2818, "license": "licensed"}}