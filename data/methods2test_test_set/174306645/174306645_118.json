{"test_class": {"identifier": "JsonSchemaUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static String example =\"{\\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\",\\n\" + \n            \"    \\\"type\\\": \\\"object\\\",\\n\" + \n            \"    \\\"properties\\\": {\\n\" + \n            \"        \\\"traveller\\\": {\\n\" + \n            \"            \\\"type\\\": \\\"object\\\",\\n\" + \n            \"            \\\"properties\\\": {\\n\" + \n            \"                \\\"address\\\": {\\n\" + \n            \"                    \\\"type\\\": \\\"object\\\",\\n\" + \n            \"                    \\\"properties\\\": {\\n\" + \n            \"                        \\\"city\\\": {\\n\" + \n            \"                            \\\"type\\\": \\\"string\\\"\\n\" + \n            \"                        },\\n\" + \n            \"                        \\\"country\\\": {\\n\" + \n            \"                            \\\"type\\\": \\\"string\\\"\\n\" + \n            \"                        },\\n\" + \n            \"                        \\\"street\\\": {\\n\" + \n            \"                            \\\"type\\\": \\\"string\\\"\\n\" + \n            \"                        },\\n\" + \n            \"                        \\\"zipCode\\\": {\\n\" + \n            \"                            \\\"type\\\": \\\"string\\\"\\n\" + \n            \"                        }\\n\" + \n            \"                    }\\n\" + \n            \"                },\\n\" + \n            \"                \\\"email\\\": {\\n\" + \n            \"                    \\\"type\\\": \\\"string\\\"\\n\" + \n            \"                },\\n\" + \n            \"                \\\"firstName\\\": {\\n\" + \n            \"                    \\\"type\\\": \\\"string\\\"\\n\" + \n            \"                },\\n\" + \n            \"                \\\"lastName\\\": {\\n\" + \n            \"                    \\\"type\\\": \\\"string\\\"\\n\" + \n            \"                },\\n\" + \n            \"                \\\"nationality\\\": {\\n\" + \n            \"                    \\\"type\\\": \\\"string\\\"\\n\" + \n            \"                }\\n\" + \n            \"            },\\n\" + \n            \"            \\\"input\\\": true\\n\" + \n            \"        },\\n\" + \n            \"        \\\"approved\\\": {\\n\" + \n            \"            \\\"type\\\": \\\"boolean\\\",\\n\" + \n            \"            \\\"output\\\": true\\n\" + \n            \"        }\\n\" + \n            \"    }}\";", "modifier": "private final static", "type": "String", "declarator": "example =\"{\\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\",\\n\" + \n            \"    \\\"type\\\": \\\"object\\\",\\n\" + \n            \"    \\\"properties\\\": {\\n\" + \n            \"        \\\"traveller\\\": {\\n\" + \n            \"            \\\"type\\\": \\\"object\\\",\\n\" + \n            \"            \\\"properties\\\": {\\n\" + \n            \"                \\\"address\\\": {\\n\" + \n            \"                    \\\"type\\\": \\\"object\\\",\\n\" + \n            \"                    \\\"properties\\\": {\\n\" + \n            \"                        \\\"city\\\": {\\n\" + \n            \"                            \\\"type\\\": \\\"string\\\"\\n\" + \n            \"                        },\\n\" + \n            \"                        \\\"country\\\": {\\n\" + \n            \"                            \\\"type\\\": \\\"string\\\"\\n\" + \n            \"                        },\\n\" + \n            \"                        \\\"street\\\": {\\n\" + \n            \"                            \\\"type\\\": \\\"string\\\"\\n\" + \n            \"                        },\\n\" + \n            \"                        \\\"zipCode\\\": {\\n\" + \n            \"                            \\\"type\\\": \\\"string\\\"\\n\" + \n            \"                        }\\n\" + \n            \"                    }\\n\" + \n            \"                },\\n\" + \n            \"                \\\"email\\\": {\\n\" + \n            \"                    \\\"type\\\": \\\"string\\\"\\n\" + \n            \"                },\\n\" + \n            \"                \\\"firstName\\\": {\\n\" + \n            \"                    \\\"type\\\": \\\"string\\\"\\n\" + \n            \"                },\\n\" + \n            \"                \\\"lastName\\\": {\\n\" + \n            \"                    \\\"type\\\": \\\"string\\\"\\n\" + \n            \"                },\\n\" + \n            \"                \\\"nationality\\\": {\\n\" + \n            \"                    \\\"type\\\": \\\"string\\\"\\n\" + \n            \"                }\\n\" + \n            \"            },\\n\" + \n            \"            \\\"input\\\": true\\n\" + \n            \"        },\\n\" + \n            \"        \\\"approved\\\": {\\n\" + \n            \"            \\\"type\\\": \\\"boolean\\\",\\n\" + \n            \"            \\\"output\\\": true\\n\" + \n            \"        }\\n\" + \n            \"    }}\"", "var_name": "example"}], "file": "jbpm/jbpm-flow/src/test/java/org/jbpm/util/JsonSchemaUtilTest.java"}, "test_case": {"identifier": "testJsonSchema", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testJsonSchema() throws IOException {\n        InputStream in = new ByteArrayInputStream(example.getBytes());\n        Map<String,Object> schemaMap = JsonSchemaUtil.load(in);\n        in.close();\n        assertEquals (\"object\", schemaMap.get(\"type\"));\n        Map<String,Object> properties = (Map<String,Object>)schemaMap.get(\"properties\");\n        assertEquals(2,properties.size());\n        assertTrue((Boolean)((Map)properties.get(\"approved\")).get(\"output\"));\n        assertTrue((Boolean)((Map)properties.get(\"traveller\")).get(\"input\"));\n    }", "signature": "void testJsonSchema()", "full_signature": "@Test void testJsonSchema()", "class_method_signature": "JsonSchemaUtilTest.testJsonSchema()", "testcase": true, "constructor": false, "invocations": ["getBytes", "load", "close", "assertEquals", "get", "get", "assertEquals", "size", "assertTrue", "get", "get", "assertTrue", "get", "get"]}, "focal_class": {"identifier": "JsonSchemaUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static ObjectMapper mapper = new ObjectMapper();", "modifier": "private static", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}, {"original_string": "private static Path jsonDir = Paths.get(\"META-INF\", \"jsonSchema\");", "modifier": "private static", "type": "Path", "declarator": "jsonDir = Paths.get(\"META-INF\", \"jsonSchema\")", "var_name": "jsonDir"}], "methods": [{"identifier": "JsonSchemaUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " JsonSchemaUtil()", "full_signature": "private  JsonSchemaUtil()", "class_method_signature": "JsonSchemaUtil.JsonSchemaUtil()", "testcase": false, "constructor": true}, {"identifier": "getJsonSchemaName", "parameters": "(String processId, String taskName)", "modifiers": "public static", "return": "String", "signature": "String getJsonSchemaName(String processId, String taskName)", "full_signature": "public static String getJsonSchemaName(String processId, String taskName)", "class_method_signature": "JsonSchemaUtil.getJsonSchemaName(String processId, String taskName)", "testcase": false, "constructor": false}, {"identifier": "getJsonDir", "parameters": "()", "modifiers": "public static", "return": "Path", "signature": "Path getJsonDir()", "full_signature": "public static Path getJsonDir()", "class_method_signature": "JsonSchemaUtil.getJsonDir()", "testcase": false, "constructor": false}, {"identifier": "getFileName", "parameters": "(String key)", "modifiers": "public static", "return": "String", "signature": "String getFileName(String key)", "full_signature": "public static String getFileName(String key)", "class_method_signature": "JsonSchemaUtil.getFileName(String key)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(ClassLoader cl, String processId, String taskName)", "modifiers": "public static", "return": "Map<String, Object>", "signature": "Map<String, Object> load(ClassLoader cl, String processId, String taskName)", "full_signature": "public static Map<String, Object> load(ClassLoader cl, String processId, String taskName)", "class_method_signature": "JsonSchemaUtil.load(ClassLoader cl, String processId, String taskName)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(InputStream in)", "modifiers": "public static", "return": "Map<String, Object>", "signature": "Map<String, Object> load(InputStream in)", "full_signature": "public static Map<String, Object> load(InputStream in)", "class_method_signature": "JsonSchemaUtil.load(InputStream in)", "testcase": false, "constructor": false}, {"identifier": "addPhases", "parameters": "(Process<T> process,\n                                                    Application application,\n                                                    String processInstanceId,\n                                                    String workItemId,\n                                                    Policy<?>[] policies,\n                                                    Map<String, Object> jsonSchema)", "modifiers": "public static", "return": "Map<String, Object>", "signature": "Map<String, Object> addPhases(Process<T> process,\n                                                    Application application,\n                                                    String processInstanceId,\n                                                    String workItemId,\n                                                    Policy<?>[] policies,\n                                                    Map<String, Object> jsonSchema)", "full_signature": "public static Map<String, Object> addPhases(Process<T> process,\n                                                    Application application,\n                                                    String processInstanceId,\n                                                    String workItemId,\n                                                    Policy<?>[] policies,\n                                                    Map<String, Object> jsonSchema)", "class_method_signature": "JsonSchemaUtil.addPhases(Process<T> process,\n                                                    Application application,\n                                                    String processInstanceId,\n                                                    String workItemId,\n                                                    Policy<?>[] policies,\n                                                    Map<String, Object> jsonSchema)", "testcase": false, "constructor": false}, {"identifier": "allowedPhases", "parameters": "(WorkItemHandler handler, WorkItem workItem)", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> allowedPhases(WorkItemHandler handler, WorkItem workItem)", "full_signature": "public static Set<String> allowedPhases(WorkItemHandler handler, WorkItem workItem)", "class_method_signature": "JsonSchemaUtil.allowedPhases(WorkItemHandler handler, WorkItem workItem)", "testcase": false, "constructor": false}], "file": "jbpm/jbpm-flow/src/main/java/org/jbpm/util/JsonSchemaUtil.java"}, "focal_method": {"identifier": "load", "parameters": "(ClassLoader cl, String processId, String taskName)", "modifiers": "public static", "return": "Map<String, Object>", "body": "public static Map<String, Object> load(ClassLoader cl, String processId, String taskName) {\n        Path jsonFile = jsonDir.resolve(getFileName(getJsonSchemaName(processId, taskName)));\n        try (InputStream in = cl.getResourceAsStream(jsonFile.toString())) {\n            if (in == null) {\n                throw new IllegalArgumentException(\"Cannot find file \" + jsonFile + \" in classpath\");\n            }\n            return load(in);\n        } catch (IOException io) {\n            throw new IllegalStateException(\"Error loading schema \" + jsonFile, io);\n        }\n    }", "signature": "Map<String, Object> load(ClassLoader cl, String processId, String taskName)", "full_signature": "public static Map<String, Object> load(ClassLoader cl, String processId, String taskName)", "class_method_signature": "JsonSchemaUtil.load(ClassLoader cl, String processId, String taskName)", "testcase": false, "constructor": false, "invocations": ["resolve", "getFileName", "getJsonSchemaName", "getResourceAsStream", "toString", "load"]}, "repository": {"repo_id": 174306645, "url": "https://github.com/kiegroup/kogito-runtimes", "stars": 78, "created": "3/7/2019 8:49:09 AM +00:00", "updates": "2020-01-26T20:41:49+00:00", "fork": "False", "license": "licensed"}}