{"test_class": {"identifier": "CertificateLoaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n  public", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}], "file": "outland-feature-java/src/test/java/outland/feature/CertificateLoaderTest.java"}, "test_case": {"identifier": "build", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void build() {\n    OkHttpClient.Builder builder = new OkHttpClient.Builder();\n    CertificateLoader securitySupport =\n        new CertificateLoader(\"classpath:certs\");\n\n    try {\n      securitySupport.applySslSocketFactory(builder);\n      OkHttpClient build = builder.build();\n\n      Request request = new Request.Builder()\n          .url(\"https://helloworld.letsencrypt.org\")\n          .get()\n          .build();\n\n      build.newCall(request).execute();\n    } catch (Exception e) {\n      fail(\"expected custom letsencrypt install to succeed \" + e.getMessage());\n    }\n  }", "signature": "void build()", "full_signature": "@Test public void build()", "class_method_signature": "CertificateLoaderTest.build()", "testcase": true, "constructor": false, "invocations": ["applySslSocketFactory", "build", "build", "get", "url", "execute", "newCall", "fail", "getMessage"]}, "focal_class": {"identifier": "CertificateLoader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(\"FeatureClient\");", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(\"FeatureClient\")", "var_name": "logger"}, {"original_string": "private final String certificatePath;", "modifier": "private final", "type": "String", "declarator": "certificatePath", "var_name": "certificatePath"}, {"original_string": "private SSLContext sslContext;", "modifier": "private", "type": "SSLContext", "declarator": "sslContext", "var_name": "sslContext"}, {"original_string": "private X509TrustManager trustManager;", "modifier": "private", "type": "X509TrustManager", "declarator": "trustManager", "var_name": "trustManager"}], "methods": [{"identifier": "CertificateLoader", "parameters": "(String certificatePath)", "modifiers": "", "return": "", "signature": " CertificateLoader(String certificatePath)", "full_signature": "  CertificateLoader(String certificatePath)", "class_method_signature": "CertificateLoader.CertificateLoader(String certificatePath)", "testcase": false, "constructor": true}, {"identifier": "getResourceUrl", "parameters": "(String resourceName)", "modifiers": "private static", "return": "URL", "signature": "URL getResourceUrl(String resourceName)", "full_signature": "private static URL getResourceUrl(String resourceName)", "class_method_signature": "CertificateLoader.getResourceUrl(String resourceName)", "testcase": false, "constructor": false}, {"identifier": "resolvePath", "parameters": "(String certificatePath)", "modifiers": "@VisibleForTesting static", "return": "Path", "signature": "Path resolvePath(String certificatePath)", "full_signature": "@VisibleForTesting static Path resolvePath(String certificatePath)", "class_method_signature": "CertificateLoader.resolvePath(String certificatePath)", "testcase": false, "constructor": false}, {"identifier": "applySslSocketFactory", "parameters": "(OkHttpClient.Builder builder)", "modifiers": "", "return": "void", "signature": "void applySslSocketFactory(OkHttpClient.Builder builder)", "full_signature": " void applySslSocketFactory(OkHttpClient.Builder builder)", "class_method_signature": "CertificateLoader.applySslSocketFactory(OkHttpClient.Builder builder)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String certificatePath)", "modifiers": "private", "return": "void", "signature": "void create(String certificatePath)", "full_signature": "private void create(String certificatePath)", "class_method_signature": "CertificateLoader.create(String certificatePath)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Path path)", "modifiers": "private", "return": "void", "signature": "void create(Path path)", "full_signature": "private void create(Path path)", "class_method_signature": "CertificateLoader.create(Path path)", "testcase": false, "constructor": false}, {"identifier": "installCertificates", "parameters": "(Path path, KeyStore keyStore)", "modifiers": "private", "return": "void", "signature": "void installCertificates(Path path, KeyStore keyStore)", "full_signature": "private void installCertificates(Path path, KeyStore keyStore)", "class_method_signature": "CertificateLoader.installCertificates(Path path, KeyStore keyStore)", "testcase": false, "constructor": false}, {"identifier": "sslContext", "parameters": "()", "modifiers": "", "return": "SSLContext", "signature": "SSLContext sslContext()", "full_signature": " SSLContext sslContext()", "class_method_signature": "CertificateLoader.sslContext()", "testcase": false, "constructor": false}, {"identifier": "trustManager", "parameters": "()", "modifiers": "", "return": "X509TrustManager", "signature": "X509TrustManager trustManager()", "full_signature": " X509TrustManager trustManager()", "class_method_signature": "CertificateLoader.trustManager()", "testcase": false, "constructor": false}], "file": "outland-feature-java/src/main/java/outland/feature/CertificateLoader.java"}, "focal_method": {"identifier": "applySslSocketFactory", "parameters": "(OkHttpClient.Builder builder)", "modifiers": "", "return": "void", "body": "void applySslSocketFactory(OkHttpClient.Builder builder)\n      throws FeatureException {\n\n    try {\n      MDC.put(\"security_context\", \"[security_support]\");\n      if (certificatePath == null) {\n        logger.info(\"no custom certificate path supplied, using system default\");\n        return;\n      }\n\n      builder.sslSocketFactory(sslContext.getSocketFactory(), trustManager);\n      logger.info(\"ok, custom socket factory and trust manager added to builder\");\n    } finally {\n      MDC.remove(\"security_context\");\n    }\n  }", "signature": "void applySslSocketFactory(OkHttpClient.Builder builder)", "full_signature": " void applySslSocketFactory(OkHttpClient.Builder builder)", "class_method_signature": "CertificateLoader.applySslSocketFactory(OkHttpClient.Builder builder)", "testcase": false, "constructor": false, "invocations": ["put", "info", "sslSocketFactory", "getSocketFactory", "info", "remove"]}, "repository": {"repo_id": 83838306, "url": "https://github.com/dehora/outland", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 944, "license": "licensed"}}