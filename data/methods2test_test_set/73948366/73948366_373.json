{"test_class": {"identifier": "CertificateIdentityParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ClassLoader classLoader = this.getClass().getClassLoader();", "modifier": "private final", "type": "ClassLoader", "declarator": "classLoader = this.getClass().getClassLoader()", "var_name": "classLoader"}], "file": "libs/java/auth_core/src/test/java/com/yahoo/athenz/auth/impl/CertificateIdentityParserTest.java"}, "test_case": {"identifier": "testCertificateIdentityParser", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCertificateIdentityParser() {\n        BiFunction<Field, CertificateIdentityParser, Object> getFieldValue = (f, object) -> {\n            try {\n                f.setAccessible(true);\n                return f.get(object);\n            } catch (IllegalArgumentException | IllegalAccessException e) {\n                throw new RuntimeException(e);\n            }\n        };\n        CertificateIdentityParser parser;\n\n        parser = new CertificateIdentityParser(null, false);\n        assertNotNull(parser);\n        for (Field f : parser.getClass().getDeclaredFields()) {\n            switch (f.getName()) {\n            case \"excludedPrincipalSet\":\n                assertEquals(getFieldValue.apply(f, parser), null);\n                break;\n            case \"excludeRoleCertificates\":\n                assertEquals(getFieldValue.apply(f, parser), false);\n                break;\n            }\n        }\n\n        parser = new CertificateIdentityParser(new HashSet<>(Arrays.asList(\"principal_1\", \"principal_2\")), true);\n        assertNotNull(parser);\n        for (Field f : parser.getClass().getDeclaredFields()) {\n            switch (f.getName()) {\n            case \"excludedPrincipalSet\":\n                assertEquals(getFieldValue.apply(f, parser), new HashSet<>(Arrays.asList(\"principal_1\", \"principal_2\")));\n                break;\n            case \"excludeRoleCertificates\":\n                assertEquals(getFieldValue.apply(f, parser), true);\n                break;\n            }\n        }\n    }", "signature": "void testCertificateIdentityParser()", "full_signature": "@Test public void testCertificateIdentityParser()", "class_method_signature": "CertificateIdentityParserTest.testCertificateIdentityParser()", "testcase": true, "constructor": false, "invocations": ["setAccessible", "get", "assertNotNull", "getDeclaredFields", "getClass", "getName", "assertEquals", "apply", "assertEquals", "apply", "asList", "assertNotNull", "getDeclaredFields", "getClass", "getName", "assertEquals", "apply", "asList", "assertEquals", "apply"]}, "focal_class": {"identifier": "CertificateIdentityParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String JAVAX_CERT_ATTR = \"javax.servlet.request.X509Certificate\";", "modifier": "public static final", "type": "String", "declarator": "JAVAX_CERT_ATTR = \"javax.servlet.request.X509Certificate\"", "var_name": "JAVAX_CERT_ATTR"}, {"original_string": "public static final String ZTS_CERT_ROLE_URI = \"athenz://role/\";", "modifier": "public static final", "type": "String", "declarator": "ZTS_CERT_ROLE_URI = \"athenz://role/\"", "var_name": "ZTS_CERT_ROLE_URI"}, {"original_string": "public static final String EMPTY_CERT_ERR_MSG = \"No certificate available in request\";", "modifier": "public static final", "type": "String", "declarator": "EMPTY_CERT_ERR_MSG = \"No certificate available in request\"", "var_name": "EMPTY_CERT_ERR_MSG"}, {"original_string": "private Set<String> excludedPrincipalSet = null;", "modifier": "private", "type": "Set<String>", "declarator": "excludedPrincipalSet = null", "var_name": "excludedPrincipalSet"}, {"original_string": "private boolean excludeRoleCertificates;", "modifier": "private", "type": "boolean", "declarator": "excludeRoleCertificates", "var_name": "excludeRoleCertificates"}], "methods": [{"identifier": "CertificateIdentityParser", "parameters": "(Set<String> excludedPrincipalSet, boolean excludeRoleCertificates)", "modifiers": "public", "return": "", "signature": " CertificateIdentityParser(Set<String> excludedPrincipalSet, boolean excludeRoleCertificates)", "full_signature": "public  CertificateIdentityParser(Set<String> excludedPrincipalSet, boolean excludeRoleCertificates)", "class_method_signature": "CertificateIdentityParser.CertificateIdentityParser(Set<String> excludedPrincipalSet, boolean excludeRoleCertificates)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(HttpServletRequest request)", "modifiers": "public", "return": "CertificateIdentity", "signature": "CertificateIdentity parse(HttpServletRequest request)", "full_signature": "public CertificateIdentity parse(HttpServletRequest request)", "class_method_signature": "CertificateIdentityParser.parse(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(X509Certificate[] certs)", "modifiers": "public", "return": "CertificateIdentity", "signature": "CertificateIdentity parse(X509Certificate[] certs)", "full_signature": "public CertificateIdentity parse(X509Certificate[] certs)", "class_method_signature": "CertificateIdentityParser.parse(X509Certificate[] certs)", "testcase": false, "constructor": false}], "file": "libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/impl/CertificateIdentityParser.java"}, "focal_method": {"identifier": "CertificateIdentityParser", "parameters": "(Set<String> excludedPrincipalSet, boolean excludeRoleCertificates)", "modifiers": "public", "return": "", "body": "public CertificateIdentityParser(Set<String> excludedPrincipalSet, boolean excludeRoleCertificates) {\n        this.excludedPrincipalSet = excludedPrincipalSet;\n        this.excludeRoleCertificates = excludeRoleCertificates;\n    }", "signature": " CertificateIdentityParser(Set<String> excludedPrincipalSet, boolean excludeRoleCertificates)", "full_signature": "public  CertificateIdentityParser(Set<String> excludedPrincipalSet, boolean excludeRoleCertificates)", "class_method_signature": "CertificateIdentityParser.CertificateIdentityParser(Set<String> excludedPrincipalSet, boolean excludeRoleCertificates)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}