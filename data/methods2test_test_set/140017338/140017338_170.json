{"test_class": {"identifier": "ArtifactToReleaseUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException thrownException = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "thrownException = ExpectedException.none()", "var_name": "thrownException"}], "file": "modules/sw360/sw360-workflow/src/test/java/org/eclipse/sw360/antenna/sw360/utils/ArtifactToReleaseUtilsTest.java"}, "test_case": {"identifier": "artifactIsMappedToSw360ReleaseCorrectlyWithoutOverwritten", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void artifactIsMappedToSw360ReleaseCorrectlyWithoutOverwritten() {\n        Artifact artifact = TestUtils.mkArtifact(\"Test1\", false);\n        SW360Component sw360Component = new SW360Component();\n        sw360Component.setName(\"artifactIdtest1\");\n        SW360Release release = ArtifactToReleaseUtils.convertToReleaseWithoutAttachments(artifact);\n\n        assertThat(release.getClearingState()).isEqualTo(TestUtils.RELEASE_CLEARING_STATE);\n        assertThat(release.getChangeStatus()).isEqualTo(TestUtils.RELEASE_CHANGESTATUS);\n\n        assertThat(release.getDownloadurl()).isEqualTo(TestUtils.RELEASE_DOWNLOAD_URL);\n        assertThat(release.getReleaseTagUrl()).isEqualTo(TestUtils.RELEASE_RELEASE_TAG_URL);\n        assertThat(release.getSoftwareHeritageId()).isEqualTo(TestUtils.RELEASE_SOFTWAREHERITGAE_ID);\n        new ArtifactSoftwareHeritageID.Builder(release.getSoftwareHeritageId()).build();\n\n        assertThat(release.getCoordinates()).containsKeys(\"maven\");\n        assertThat(release.getCoordinates()).hasSize(1);\n        assertThat(release.getCoordinates()).containsValue(\"pkg:maven/org.group.id/artifactIdTest1@\" + TestUtils.RELEASE_VERSION1);\n\n        assertThat(release.getHashes()).hasSize(1);\n        assertThat(release.getHashes()).\n                isEqualTo(artifact.askForAll(ArtifactFilename.class)\n                        .stream()\n                        .map(ArtifactFilename::getArtifactFilenameEntries)\n                        .flatMap(Collection::stream)\n                        .map(ArtifactFilename.ArtifactFilenameEntry::getHash)\n                        .collect(Collectors.toSet()));\n\n        assertThat(release.getOverriddenLicense()).isNull();\n        assertThat(release.getObservedLicense()).isEqualTo(TestUtils.RELEASE_OBSERVED_LICENSE);\n        assertThat(release.getDeclaredLicense()).isEqualTo(TestUtils.RELEASE_DECLEARED_LICENSE);\n\n        assertThat(release.getCopyrights()).isEqualTo(TestUtils.RELEASE_COPYRIGHT);\n        assertThat(release.getHomepageUrl()).isEqualTo(TestUtils.HOMEPAGE_URL);\n    }", "signature": "void artifactIsMappedToSw360ReleaseCorrectlyWithoutOverwritten()", "full_signature": "@Test public void artifactIsMappedToSw360ReleaseCorrectlyWithoutOverwritten()", "class_method_signature": "ArtifactToReleaseUtilsTest.artifactIsMappedToSw360ReleaseCorrectlyWithoutOverwritten()", "testcase": true, "constructor": false, "invocations": ["mkArtifact", "setName", "convertToReleaseWithoutAttachments", "isEqualTo", "assertThat", "getClearingState", "isEqualTo", "assertThat", "getChangeStatus", "isEqualTo", "assertThat", "getDownloadurl", "isEqualTo", "assertThat", "getReleaseTagUrl", "isEqualTo", "assertThat", "getSoftwareHeritageId", "build", "getSoftwareHeritageId", "containsKeys", "assertThat", "getCoordinates", "hasSize", "assertThat", "getCoordinates", "containsValue", "assertThat", "getCoordinates", "hasSize", "assertThat", "getHashes", "isEqualTo", "assertThat", "getHashes", "collect", "map", "flatMap", "map", "stream", "askForAll", "toSet", "isNull", "assertThat", "getOverriddenLicense", "isEqualTo", "assertThat", "getObservedLicense", "isEqualTo", "assertThat", "getDeclaredLicense", "isEqualTo", "assertThat", "getCopyrights", "isEqualTo", "assertThat", "getHomepageUrl"]}, "focal_class": {"identifier": "ArtifactToReleaseUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ArtifactToReleaseUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ArtifactToReleaseUtils.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "ArtifactToReleaseUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " ArtifactToReleaseUtils()", "full_signature": "private  ArtifactToReleaseUtils()", "class_method_signature": "ArtifactToReleaseUtils.ArtifactToReleaseUtils()", "testcase": false, "constructor": true}, {"identifier": "convertToArtifactWithoutSourceFile", "parameters": "(SW360Release release, Artifact artifact)", "modifiers": "public static", "return": "Artifact", "signature": "Artifact convertToArtifactWithoutSourceFile(SW360Release release, Artifact artifact)", "full_signature": "public static Artifact convertToArtifactWithoutSourceFile(SW360Release release, Artifact artifact)", "class_method_signature": "ArtifactToReleaseUtils.convertToArtifactWithoutSourceFile(SW360Release release, Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "addLicenseFact", "parameters": "(Optional<String> licenseRawData, Artifact artifact, Function<LicenseInformation, ArtifactLicenseInformation> licenseCreator, boolean isAlreadyPresent)", "modifiers": "static", "return": "void", "signature": "void addLicenseFact(Optional<String> licenseRawData, Artifact artifact, Function<LicenseInformation, ArtifactLicenseInformation> licenseCreator, boolean isAlreadyPresent)", "full_signature": "static void addLicenseFact(Optional<String> licenseRawData, Artifact artifact, Function<LicenseInformation, ArtifactLicenseInformation> licenseCreator, boolean isAlreadyPresent)", "class_method_signature": "ArtifactToReleaseUtils.addLicenseFact(Optional<String> licenseRawData, Artifact artifact, Function<LicenseInformation, ArtifactLicenseInformation> licenseCreator, boolean isAlreadyPresent)", "testcase": false, "constructor": false}, {"identifier": "addFactAndLogWarning", "parameters": "(Artifact artifact, boolean isAlreadyPresent, ArtifactLicenseInformation expression)", "modifiers": "private static", "return": "void", "signature": "void addFactAndLogWarning(Artifact artifact, boolean isAlreadyPresent, ArtifactLicenseInformation expression)", "full_signature": "private static void addFactAndLogWarning(Artifact artifact, boolean isAlreadyPresent, ArtifactLicenseInformation expression)", "class_method_signature": "ArtifactToReleaseUtils.addFactAndLogWarning(Artifact artifact, boolean isAlreadyPresent, ArtifactLicenseInformation expression)", "testcase": false, "constructor": false}, {"identifier": "convertToReleaseWithoutAttachments", "parameters": "(Artifact artifact)", "modifiers": "public static", "return": "SW360Release", "signature": "SW360Release convertToReleaseWithoutAttachments(Artifact artifact)", "full_signature": "public static SW360Release convertToReleaseWithoutAttachments(Artifact artifact)", "class_method_signature": "ArtifactToReleaseUtils.convertToReleaseWithoutAttachments(Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "setHomepageUrl", "parameters": "(SW360Release release, Artifact artifact)", "modifiers": "private static", "return": "void", "signature": "void setHomepageUrl(SW360Release release, Artifact artifact)", "full_signature": "private static void setHomepageUrl(SW360Release release, Artifact artifact)", "class_method_signature": "ArtifactToReleaseUtils.setHomepageUrl(SW360Release release, Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "createSW360ReleaseVersion", "parameters": "(Artifact artifact)", "modifiers": "public static", "return": "String", "signature": "String createSW360ReleaseVersion(Artifact artifact)", "full_signature": "public static String createSW360ReleaseVersion(Artifact artifact)", "class_method_signature": "ArtifactToReleaseUtils.createSW360ReleaseVersion(Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "setVersion", "parameters": "(SW360Release release, Artifact artifact)", "modifiers": "public static", "return": "void", "signature": "void setVersion(SW360Release release, Artifact artifact)", "full_signature": "public static void setVersion(SW360Release release, Artifact artifact)", "class_method_signature": "ArtifactToReleaseUtils.setVersion(SW360Release release, Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "setCPEId", "parameters": "(SW360Release release, Artifact artifact)", "modifiers": "private static", "return": "void", "signature": "void setCPEId(SW360Release release, Artifact artifact)", "full_signature": "private static void setCPEId(SW360Release release, Artifact artifact)", "class_method_signature": "ArtifactToReleaseUtils.setCPEId(SW360Release release, Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "setCoordinates", "parameters": "(SW360Release release, Artifact artifact)", "modifiers": "private static", "return": "void", "signature": "void setCoordinates(SW360Release release, Artifact artifact)", "full_signature": "private static void setCoordinates(SW360Release release, Artifact artifact)", "class_method_signature": "ArtifactToReleaseUtils.setCoordinates(SW360Release release, Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "getMapOfCoordinates", "parameters": "(Artifact artifact)", "modifiers": "private static", "return": "Map<String, String>", "signature": "Map<String, String> getMapOfCoordinates(Artifact artifact)", "full_signature": "private static Map<String, String> getMapOfCoordinates(Artifact artifact)", "class_method_signature": "ArtifactToReleaseUtils.getMapOfCoordinates(Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "setOverriddenLicense", "parameters": "(SW360Release release, Artifact artifact)", "modifiers": "private static", "return": "void", "signature": "void setOverriddenLicense(SW360Release release, Artifact artifact)", "full_signature": "private static void setOverriddenLicense(SW360Release release, Artifact artifact)", "class_method_signature": "ArtifactToReleaseUtils.setOverriddenLicense(SW360Release release, Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "setDeclaredLicense", "parameters": "(SW360Release release, Artifact artifact)", "modifiers": "private static", "return": "void", "signature": "void setDeclaredLicense(SW360Release release, Artifact artifact)", "full_signature": "private static void setDeclaredLicense(SW360Release release, Artifact artifact)", "class_method_signature": "ArtifactToReleaseUtils.setDeclaredLicense(SW360Release release, Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "setObservedLicense", "parameters": "(SW360Release release, Artifact artifact)", "modifiers": "private static", "return": "void", "signature": "void setObservedLicense(SW360Release release, Artifact artifact)", "full_signature": "private static void setObservedLicense(SW360Release release, Artifact artifact)", "class_method_signature": "ArtifactToReleaseUtils.setObservedLicense(SW360Release release, Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "setSourceUrl", "parameters": "(SW360Release release, Artifact artifact)", "modifiers": "private static", "return": "void", "signature": "void setSourceUrl(SW360Release release, Artifact artifact)", "full_signature": "private static void setSourceUrl(SW360Release release, Artifact artifact)", "class_method_signature": "ArtifactToReleaseUtils.setSourceUrl(SW360Release release, Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "setReleaseTagUrl", "parameters": "(SW360Release release, Artifact artifact)", "modifiers": "private static", "return": "void", "signature": "void setReleaseTagUrl(SW360Release release, Artifact artifact)", "full_signature": "private static void setReleaseTagUrl(SW360Release release, Artifact artifact)", "class_method_signature": "ArtifactToReleaseUtils.setReleaseTagUrl(SW360Release release, Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "setSwhId", "parameters": "(SW360Release release, Artifact artifact)", "modifiers": "private static", "return": "void", "signature": "void setSwhId(SW360Release release, Artifact artifact)", "full_signature": "private static void setSwhId(SW360Release release, Artifact artifact)", "class_method_signature": "ArtifactToReleaseUtils.setSwhId(SW360Release release, Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "setHashes", "parameters": "(SW360Release release, Artifact artifact)", "modifiers": "private static", "return": "void", "signature": "void setHashes(SW360Release release, Artifact artifact)", "full_signature": "private static void setHashes(SW360Release release, Artifact artifact)", "class_method_signature": "ArtifactToReleaseUtils.setHashes(SW360Release release, Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "setClearingStatus", "parameters": "(SW360Release release, Artifact artifact)", "modifiers": "private static", "return": "void", "signature": "void setClearingStatus(SW360Release release, Artifact artifact)", "full_signature": "private static void setClearingStatus(SW360Release release, Artifact artifact)", "class_method_signature": "ArtifactToReleaseUtils.setClearingStatus(SW360Release release, Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "setChangeStatus", "parameters": "(SW360Release release, Artifact artifact)", "modifiers": "private static", "return": "void", "signature": "void setChangeStatus(SW360Release release, Artifact artifact)", "full_signature": "private static void setChangeStatus(SW360Release release, Artifact artifact)", "class_method_signature": "ArtifactToReleaseUtils.setChangeStatus(SW360Release release, Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "setCopyrights", "parameters": "(SW360Release release, Artifact artifact)", "modifiers": "private static", "return": "void", "signature": "void setCopyrights(SW360Release release, Artifact artifact)", "full_signature": "private static void setCopyrights(SW360Release release, Artifact artifact)", "class_method_signature": "ArtifactToReleaseUtils.setCopyrights(SW360Release release, Artifact artifact)", "testcase": false, "constructor": false}], "file": "modules/sw360/sw360-workflow/src/main/java/org/eclipse/sw360/antenna/sw360/utils/ArtifactToReleaseUtils.java"}, "focal_method": {"identifier": "convertToReleaseWithoutAttachments", "parameters": "(Artifact artifact)", "modifiers": "public static", "return": "SW360Release", "body": "public static SW360Release convertToReleaseWithoutAttachments(Artifact artifact) {\n        SW360Release release = new SW360Release();\n        String componentName = ArtifactToComponentUtils.createComponentName(artifact);\n\n        ArtifactToReleaseUtils.setVersion(release, artifact);\n        ArtifactToReleaseUtils.setCPEId(release, artifact);\n        release.setName(componentName);\n\n        ArtifactToReleaseUtils.setCoordinates(release, artifact);\n        ArtifactToReleaseUtils.setOverriddenLicense(release, artifact);\n        ArtifactToReleaseUtils.setDeclaredLicense(release, artifact);\n        ArtifactToReleaseUtils.setObservedLicense(release, artifact);\n        ArtifactToReleaseUtils.setSourceUrl(release, artifact);\n        ArtifactToReleaseUtils.setReleaseTagUrl(release, artifact);\n        ArtifactToReleaseUtils.setSwhId(release, artifact);\n        ArtifactToReleaseUtils.setHashes(release, artifact);\n        ArtifactToReleaseUtils.setClearingStatus(release, artifact);\n        ArtifactToReleaseUtils.setChangeStatus(release, artifact);\n        ArtifactToReleaseUtils.setCopyrights(release, artifact);\n        ArtifactToReleaseUtils.setHomepageUrl(release, artifact);\n        release.setProprietary(artifact.isProprietary());\n\n        return release;\n    }", "signature": "SW360Release convertToReleaseWithoutAttachments(Artifact artifact)", "full_signature": "public static SW360Release convertToReleaseWithoutAttachments(Artifact artifact)", "class_method_signature": "ArtifactToReleaseUtils.convertToReleaseWithoutAttachments(Artifact artifact)", "testcase": false, "constructor": false, "invocations": ["createComponentName", "setVersion", "setCPEId", "setName", "setCoordinates", "setOverriddenLicense", "setDeclaredLicense", "setObservedLicense", "setSourceUrl", "setReleaseTagUrl", "setSwhId", "setHashes", "setClearingStatus", "setChangeStatus", "setCopyrights", "setHomepageUrl", "setProprietary", "isProprietary"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}