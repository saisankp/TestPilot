{"test_class": {"identifier": "AbstractDiscretePartitionRefinerTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [], "file": "tool/group/src/test/java/org/openscience/cdk/group/AbstractDiscretePartitionRefinerTest.java"}, "test_case": {"identifier": "getConnectivityTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getConnectivityTest() {\n        int n = 3;\n        Graph g = new Graph(n);\n        g.connectionTable = new int[][]{{0, 1, 0}, {1, 0, 1}, {0, 1, 0}};\n        MockRefiner refiner = new MockRefiner(g);\n        Assert.assertEquals(1, refiner.getConnectivity(0, 1));\n    }", "signature": "void getConnectivityTest()", "full_signature": "@Test public void getConnectivityTest()", "class_method_signature": "AbstractDiscretePartitionRefinerTest.getConnectivityTest()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getConnectivity"]}, "focal_class": {"identifier": "AbstractDiscretePartitionRefiner", "superclass": "", "interfaces": "implements DiscretePartitionRefiner", "fields": [{"original_string": "private boolean                    bestExist;", "modifier": "private", "type": "boolean", "declarator": "bestExist", "var_name": "bestExist"}, {"original_string": "private Permutation                best;", "modifier": "private", "type": "Permutation", "declarator": "best", "var_name": "best"}, {"original_string": "private Permutation                first;", "modifier": "private", "type": "Permutation", "declarator": "first", "var_name": "first"}, {"original_string": "private EquitablePartitionRefiner equitableRefiner;", "modifier": "private", "type": "EquitablePartitionRefiner", "declarator": "equitableRefiner", "var_name": "equitableRefiner"}, {"original_string": "private PermutationGroup           group;", "modifier": "private", "type": "PermutationGroup", "declarator": "group", "var_name": "group"}], "methods": [{"identifier": "AbstractDiscretePartitionRefiner", "parameters": "()", "modifiers": "public", "return": "", "signature": " AbstractDiscretePartitionRefiner()", "full_signature": "public  AbstractDiscretePartitionRefiner()", "class_method_signature": "AbstractDiscretePartitionRefiner.AbstractDiscretePartitionRefiner()", "testcase": false, "constructor": true}, {"identifier": "getVertexCount", "parameters": "()", "modifiers": "protected abstract", "return": "int", "signature": "int getVertexCount()", "full_signature": "protected abstract int getVertexCount()", "class_method_signature": "AbstractDiscretePartitionRefiner.getVertexCount()", "testcase": false, "constructor": false}, {"identifier": "getConnectivity", "parameters": "(int vertexI, int vertexJ)", "modifiers": "protected abstract", "return": "int", "signature": "int getConnectivity(int vertexI, int vertexJ)", "full_signature": "protected abstract int getConnectivity(int vertexI, int vertexJ)", "class_method_signature": "AbstractDiscretePartitionRefiner.getConnectivity(int vertexI, int vertexJ)", "testcase": false, "constructor": false}, {"identifier": "setup", "parameters": "(PermutationGroup group, EquitablePartitionRefiner refiner)", "modifiers": "public", "return": "void", "signature": "void setup(PermutationGroup group, EquitablePartitionRefiner refiner)", "full_signature": "public void setup(PermutationGroup group, EquitablePartitionRefiner refiner)", "class_method_signature": "AbstractDiscretePartitionRefiner.setup(PermutationGroup group, EquitablePartitionRefiner refiner)", "testcase": false, "constructor": false}, {"identifier": "firstIsIdentity", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean firstIsIdentity()", "full_signature": "public boolean firstIsIdentity()", "class_method_signature": "AbstractDiscretePartitionRefiner.firstIsIdentity()", "testcase": false, "constructor": false}, {"identifier": "getAutomorphismPartition", "parameters": "()", "modifiers": "public", "return": "Partition", "signature": "Partition getAutomorphismPartition()", "full_signature": "public Partition getAutomorphismPartition()", "class_method_signature": "AbstractDiscretePartitionRefiner.getAutomorphismPartition()", "testcase": false, "constructor": false}, {"identifier": "getHalfMatrixString", "parameters": "(Permutation permutation)", "modifiers": "private", "return": "String", "signature": "String getHalfMatrixString(Permutation permutation)", "full_signature": "private String getHalfMatrixString(Permutation permutation)", "class_method_signature": "AbstractDiscretePartitionRefiner.getHalfMatrixString(Permutation permutation)", "testcase": false, "constructor": false}, {"identifier": "getFirstHalfMatrixString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFirstHalfMatrixString()", "full_signature": "public String getFirstHalfMatrixString()", "class_method_signature": "AbstractDiscretePartitionRefiner.getFirstHalfMatrixString()", "testcase": false, "constructor": false}, {"identifier": "getHalfMatrixString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getHalfMatrixString()", "full_signature": "public String getHalfMatrixString()", "class_method_signature": "AbstractDiscretePartitionRefiner.getHalfMatrixString()", "testcase": false, "constructor": false}, {"identifier": "getAutomorphismGroup", "parameters": "()", "modifiers": "public", "return": "PermutationGroup", "signature": "PermutationGroup getAutomorphismGroup()", "full_signature": "public PermutationGroup getAutomorphismGroup()", "class_method_signature": "AbstractDiscretePartitionRefiner.getAutomorphismGroup()", "testcase": false, "constructor": false}, {"identifier": "getBest", "parameters": "()", "modifiers": "public", "return": "Permutation", "signature": "Permutation getBest()", "full_signature": "public Permutation getBest()", "class_method_signature": "AbstractDiscretePartitionRefiner.getBest()", "testcase": false, "constructor": false}, {"identifier": "getFirst", "parameters": "()", "modifiers": "public", "return": "Permutation", "signature": "Permutation getFirst()", "full_signature": "public Permutation getFirst()", "class_method_signature": "AbstractDiscretePartitionRefiner.getFirst()", "testcase": false, "constructor": false}, {"identifier": "isCanonical", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCanonical()", "full_signature": "public boolean isCanonical()", "class_method_signature": "AbstractDiscretePartitionRefiner.isCanonical()", "testcase": false, "constructor": false}, {"identifier": "refine", "parameters": "(Partition partition)", "modifiers": "public", "return": "void", "signature": "void refine(Partition partition)", "full_signature": "public void refine(Partition partition)", "class_method_signature": "AbstractDiscretePartitionRefiner.refine(Partition partition)", "testcase": false, "constructor": false}, {"identifier": "refine", "parameters": "(PermutationGroup group, Partition coarser)", "modifiers": "private", "return": "void", "signature": "void refine(PermutationGroup group, Partition coarser)", "full_signature": "private void refine(PermutationGroup group, Partition coarser)", "class_method_signature": "AbstractDiscretePartitionRefiner.refine(PermutationGroup group, Partition coarser)", "testcase": false, "constructor": false}, {"identifier": "compareRowwise", "parameters": "(Permutation perm)", "modifiers": "private", "return": "Result", "signature": "Result compareRowwise(Permutation perm)", "full_signature": "private Result compareRowwise(Permutation perm)", "class_method_signature": "AbstractDiscretePartitionRefiner.compareRowwise(Permutation perm)", "testcase": false, "constructor": false}], "file": "tool/group/src/main/java/org/openscience/cdk/group/AbstractDiscretePartitionRefiner.java"}, "focal_method": {"identifier": "getConnectivity", "parameters": "(int vertexI, int vertexJ)", "modifiers": "protected abstract", "return": "int", "body": "protected abstract int getConnectivity(int vertexI, int vertexJ);", "signature": "int getConnectivity(int vertexI, int vertexJ)", "full_signature": "protected abstract int getConnectivity(int vertexI, int vertexJ)", "class_method_signature": "AbstractDiscretePartitionRefiner.getConnectivity(int vertexI, int vertexJ)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}