{"test_class": {"identifier": "SpelKeyGeneratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final KeyGenerator keyGenerator = new SpelKeyGenerator(new DefaultConversionService());", "modifier": "private final", "type": "KeyGenerator", "declarator": "keyGenerator = new SpelKeyGenerator(new DefaultConversionService())", "var_name": "keyGenerator"}, {"original_string": "private final MessageService service = new MessageService();", "modifier": "private final", "type": "MessageService", "declarator": "service = new MessageService()", "var_name": "service"}, {"original_string": "private final Method sendMessageMethod;", "modifier": "private final", "type": "Method", "declarator": "sendMessageMethod", "var_name": "sendMessageMethod"}], "file": "distributed-lock-core/src/test/java/com/github/alturkovic/lock/key/SpelKeyGeneratorTest.java"}, "test_case": {"identifier": "shouldFailWithExpressionThatEvaluatesInEmptyList", "parameters": "()", "modifiers": "@Test(expected = EvaluationConvertException.class) public", "return": "void", "body": "@Test(expected = EvaluationConvertException.class)\n  public void shouldFailWithExpressionThatEvaluatesInEmptyList() {\n    keyGenerator.resolveKeys(\"lock_\", \"T(java.util.Collections).emptyList()\", service, sendMessageMethod, new Object[]{\"hello\"});\n    fail(\"Expected exception with expression that evaluated in empty list\");\n  }", "signature": "void shouldFailWithExpressionThatEvaluatesInEmptyList()", "full_signature": "@Test(expected = EvaluationConvertException.class) public void shouldFailWithExpressionThatEvaluatesInEmptyList()", "class_method_signature": "SpelKeyGeneratorTest.shouldFailWithExpressionThatEvaluatesInEmptyList()", "testcase": true, "constructor": false, "invocations": ["resolveKeys", "fail"]}, "focal_class": {"identifier": "SpelKeyGenerator", "superclass": "extends CachedExpressionEvaluator", "interfaces": "implements KeyGenerator", "fields": [{"original_string": "private final ConversionService conversionService;", "modifier": "private final", "type": "ConversionService", "declarator": "conversionService", "var_name": "conversionService"}, {"original_string": "private final Map<ExpressionKey, Expression> conditionCache = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<ExpressionKey, Expression>", "declarator": "conditionCache = new ConcurrentHashMap<>()", "var_name": "conditionCache"}, {"original_string": "private final Map<AnnotatedElementKey, Method> targetMethodCache = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<AnnotatedElementKey, Method>", "declarator": "targetMethodCache = new ConcurrentHashMap<>()", "var_name": "targetMethodCache"}], "methods": [{"identifier": "resolveKeys", "parameters": "(final String lockKeyPrefix, final String expression, final Object object, final Method method, final Object[] args)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> resolveKeys(final String lockKeyPrefix, final String expression, final Object object, final Method method, final Object[] args)", "full_signature": "@Override public List<String> resolveKeys(final String lockKeyPrefix, final String expression, final Object object, final Method method, final Object[] args)", "class_method_signature": "SpelKeyGenerator.resolveKeys(final String lockKeyPrefix, final String expression, final Object object, final Method method, final Object[] args)", "testcase": false, "constructor": false}, {"identifier": "convertResultToList", "parameters": "(final Object expressionValue)", "modifiers": "protected", "return": "List<String>", "signature": "List<String> convertResultToList(final Object expressionValue)", "full_signature": "protected List<String> convertResultToList(final Object expressionValue)", "class_method_signature": "SpelKeyGenerator.convertResultToList(final Object expressionValue)", "testcase": false, "constructor": false}, {"identifier": "evaluateExpression", "parameters": "(final String expression, final Object object, final Method method, final Object[] args)", "modifiers": "private", "return": "Object", "signature": "Object evaluateExpression(final String expression, final Object object, final Method method, final Object[] args)", "full_signature": "private Object evaluateExpression(final String expression, final Object object, final Method method, final Object[] args)", "class_method_signature": "SpelKeyGenerator.evaluateExpression(final String expression, final Object object, final Method method, final Object[] args)", "testcase": false, "constructor": false}, {"identifier": "iterableToList", "parameters": "(final Object expressionValue)", "modifiers": "private", "return": "List<String>", "signature": "List<String> iterableToList(final Object expressionValue)", "full_signature": "private List<String> iterableToList(final Object expressionValue)", "class_method_signature": "SpelKeyGenerator.iterableToList(final Object expressionValue)", "testcase": false, "constructor": false}, {"identifier": "arrayToList", "parameters": "(final Object expressionValue)", "modifiers": "private", "return": "List<String>", "signature": "List<String> arrayToList(final Object expressionValue)", "full_signature": "private List<String> arrayToList(final Object expressionValue)", "class_method_signature": "SpelKeyGenerator.arrayToList(final Object expressionValue)", "testcase": false, "constructor": false}], "file": "distributed-lock-core/src/main/java/com/github/alturkovic/lock/key/SpelKeyGenerator.java"}, "focal_method": {"identifier": "resolveKeys", "parameters": "(final String lockKeyPrefix, final String expression, final Object object, final Method method, final Object[] args)", "modifiers": "@Override public", "return": "List<String>", "body": "@Override\n  public List<String> resolveKeys(final String lockKeyPrefix, final String expression, final Object object, final Method method, final Object[] args) {\n    final Object expressionValue = evaluateExpression(expression, object, method, args);\n    final List<String> keys = convertResultToList(expressionValue);\n\n    if (keys.stream().anyMatch(Objects::isNull)) {\n      throw new EvaluationConvertException(\"null keys are not supported: \" + keys);\n    }\n\n    if (StringUtils.isEmpty(lockKeyPrefix)) {\n      return keys;\n    }\n\n    return keys.stream().map(key -> lockKeyPrefix + key).collect(Collectors.toList());\n  }", "signature": "List<String> resolveKeys(final String lockKeyPrefix, final String expression, final Object object, final Method method, final Object[] args)", "full_signature": "@Override public List<String> resolveKeys(final String lockKeyPrefix, final String expression, final Object object, final Method method, final Object[] args)", "class_method_signature": "SpelKeyGenerator.resolveKeys(final String lockKeyPrefix, final String expression, final Object object, final Method method, final Object[] args)", "testcase": false, "constructor": false, "invocations": ["evaluateExpression", "convertResultToList", "anyMatch", "stream", "isEmpty", "collect", "map", "stream", "toList"]}, "repository": {"repo_id": 93310060, "url": "https://github.com/alturkovic/distributed-lock", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 77, "size": 282, "license": "licensed"}}