{"test_class": {"identifier": "EventRouterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException exceptionRule = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "exceptionRule = ExpectedException.none()", "var_name": "exceptionRule"}], "file": "debezium-core/src/test/java/io/debezium/transforms/outbox/EventRouterTest.java"}, "test_case": {"identifier": "shouldFailOnInvalidConfigurationForOperationBehavior", "parameters": "()", "modifiers": "@Test(expected = ConnectException.class) public", "return": "void", "body": "@Test(expected = ConnectException.class)\n    public void shouldFailOnInvalidConfigurationForOperationBehavior() {\n        final EventRouter<SourceRecord> router = new EventRouter<>();\n        final Map<String, String> config = new HashMap<>();\n        config.put(EventRouterConfigDefinition.OPERATION_INVALID_BEHAVIOR.name(), \"invalidOption\");\n        router.configure(config);\n    }", "signature": "void shouldFailOnInvalidConfigurationForOperationBehavior()", "full_signature": "@Test(expected = ConnectException.class) public void shouldFailOnInvalidConfigurationForOperationBehavior()", "class_method_signature": "EventRouterTest.shouldFailOnInvalidConfigurationForOperationBehavior()", "testcase": true, "constructor": false, "invocations": ["put", "name", "configure"]}, "focal_class": {"identifier": "EventRouter", "superclass": "", "interfaces": "implements Transformation<R>", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(EventRouter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(EventRouter.class)", "var_name": "LOGGER"}, {"original_string": "private static final String ENVELOPE_PAYLOAD = \"payload\";", "modifier": "private static final", "type": "String", "declarator": "ENVELOPE_PAYLOAD = \"payload\"", "var_name": "ENVELOPE_PAYLOAD"}, {"original_string": "private final ExtractField<R> afterExtractor = new ExtractField.Value<>();", "modifier": "private final", "type": "ExtractField<R>", "declarator": "afterExtractor = new ExtractField.Value<>()", "var_name": "afterExtractor"}, {"original_string": "private final RegexRouter<R> regexRouter = new RegexRouter<>();", "modifier": "private final", "type": "RegexRouter<R>", "declarator": "regexRouter = new RegexRouter<>()", "var_name": "regexRouter"}, {"original_string": "private EventRouterConfigDefinition.InvalidOperationBehavior invalidOperationBehavior;", "modifier": "private", "type": "EventRouterConfigDefinition.InvalidOperationBehavior", "declarator": "invalidOperationBehavior", "var_name": "invalidOperationBehavior"}, {"original_string": "private String fieldEventId;", "modifier": "private", "type": "String", "declarator": "fieldEventId", "var_name": "fieldEventId"}, {"original_string": "private String fieldEventKey;", "modifier": "private", "type": "String", "declarator": "fieldEventKey", "var_name": "fieldEventKey"}, {"original_string": "private String fieldEventTimestamp;", "modifier": "private", "type": "String", "declarator": "fieldEventTimestamp", "var_name": "fieldEventTimestamp"}, {"original_string": "private String fieldPayload;", "modifier": "private", "type": "String", "declarator": "fieldPayload", "var_name": "fieldPayload"}, {"original_string": "private String fieldPayloadId;", "modifier": "private", "type": "String", "declarator": "fieldPayloadId", "var_name": "fieldPayloadId"}, {"original_string": "private String fieldSchemaVersion;", "modifier": "private", "type": "String", "declarator": "fieldSchemaVersion", "var_name": "fieldSchemaVersion"}, {"original_string": "private String routeByField;", "modifier": "private", "type": "String", "declarator": "routeByField", "var_name": "routeByField"}, {"original_string": "private boolean routeTombstoneOnEmptyPayload;", "modifier": "private", "type": "boolean", "declarator": "routeTombstoneOnEmptyPayload", "var_name": "routeTombstoneOnEmptyPayload"}, {"original_string": "private List<AdditionalField> additionalFields;", "modifier": "private", "type": "List<AdditionalField>", "declarator": "additionalFields", "var_name": "additionalFields"}, {"original_string": "private Schema defaultValueSchema;", "modifier": "private", "type": "Schema", "declarator": "defaultValueSchema", "var_name": "defaultValueSchema"}, {"original_string": "private final Map<Integer, Schema> versionedValueSchema = new HashMap<>();", "modifier": "private final", "type": "Map<Integer, Schema>", "declarator": "versionedValueSchema = new HashMap<>()", "var_name": "versionedValueSchema"}, {"original_string": "private boolean onlyHeadersInOutputMessage = false;", "modifier": "private", "type": "boolean", "declarator": "onlyHeadersInOutputMessage = false", "var_name": "onlyHeadersInOutputMessage"}, {"original_string": "private SmtManager<R> smtManager;", "modifier": "private", "type": "SmtManager<R>", "declarator": "smtManager", "var_name": "smtManager"}], "methods": [{"identifier": "apply", "parameters": "(R r)", "modifiers": "@Override public", "return": "R", "signature": "R apply(R r)", "full_signature": "@Override public R apply(R r)", "class_method_signature": "EventRouter.apply(R r)", "testcase": false, "constructor": false}, {"identifier": "getEventTimestampMs", "parameters": "(Struct debeziumEventValue, Struct eventStruct)", "modifiers": "private", "return": "Long", "signature": "Long getEventTimestampMs(Struct debeziumEventValue, Struct eventStruct)", "full_signature": "private Long getEventTimestampMs(Struct debeziumEventValue, Struct eventStruct)", "class_method_signature": "EventRouter.getEventTimestampMs(Struct debeziumEventValue, Struct eventStruct)", "testcase": false, "constructor": false}, {"identifier": "defineRecordKeySchema", "parameters": "(Schema eventStruct, Field fallbackKeyField)", "modifiers": "private", "return": "Schema", "signature": "Schema defineRecordKeySchema(Schema eventStruct, Field fallbackKeyField)", "full_signature": "private Schema defineRecordKeySchema(Schema eventStruct, Field fallbackKeyField)", "class_method_signature": "EventRouter.defineRecordKeySchema(Schema eventStruct, Field fallbackKeyField)", "testcase": false, "constructor": false}, {"identifier": "defineRecordKey", "parameters": "(Struct eventStruct, Object fallbackKey)", "modifiers": "private", "return": "Object", "signature": "Object defineRecordKey(Struct eventStruct, Object fallbackKey)", "full_signature": "private Object defineRecordKey(Struct eventStruct, Object fallbackKey)", "class_method_signature": "EventRouter.defineRecordKey(Struct eventStruct, Object fallbackKey)", "testcase": false, "constructor": false}, {"identifier": "handleUnexpectedOperation", "parameters": "(R r)", "modifiers": "private", "return": "void", "signature": "void handleUnexpectedOperation(R r)", "full_signature": "private void handleUnexpectedOperation(R r)", "class_method_signature": "EventRouter.handleUnexpectedOperation(R r)", "testcase": false, "constructor": false}, {"identifier": "config", "parameters": "()", "modifiers": "@Override public", "return": "ConfigDef", "signature": "ConfigDef config()", "full_signature": "@Override public ConfigDef config()", "class_method_signature": "EventRouter.config()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "EventRouter.close()", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(Map<String, ?> configMap)", "modifiers": "@Override public", "return": "void", "signature": "void configure(Map<String, ?> configMap)", "full_signature": "@Override public void configure(Map<String, ?> configMap)", "class_method_signature": "EventRouter.configure(Map<String, ?> configMap)", "testcase": false, "constructor": false}, {"identifier": "getValueSchema", "parameters": "(Schema debeziumEventSchema, String routedTopic)", "modifiers": "private", "return": "Schema", "signature": "Schema getValueSchema(Schema debeziumEventSchema, String routedTopic)", "full_signature": "private Schema getValueSchema(Schema debeziumEventSchema, String routedTopic)", "class_method_signature": "EventRouter.getValueSchema(Schema debeziumEventSchema, String routedTopic)", "testcase": false, "constructor": false}, {"identifier": "getValueSchema", "parameters": "(Schema debeziumEventSchema, Integer version, String routedTopic)", "modifiers": "private", "return": "Schema", "signature": "Schema getValueSchema(Schema debeziumEventSchema, Integer version, String routedTopic)", "full_signature": "private Schema getValueSchema(Schema debeziumEventSchema, Integer version, String routedTopic)", "class_method_signature": "EventRouter.getValueSchema(Schema debeziumEventSchema, Integer version, String routedTopic)", "testcase": false, "constructor": false}, {"identifier": "getSchemaBuilder", "parameters": "(Schema debeziumEventSchema, String routedTopic)", "modifiers": "private", "return": "SchemaBuilder", "signature": "SchemaBuilder getSchemaBuilder(Schema debeziumEventSchema, String routedTopic)", "full_signature": "private SchemaBuilder getSchemaBuilder(Schema debeziumEventSchema, String routedTopic)", "class_method_signature": "EventRouter.getSchemaBuilder(Schema debeziumEventSchema, String routedTopic)", "testcase": false, "constructor": false}, {"identifier": "getSchemaName", "parameters": "(Schema debeziumEventSchema, String routedTopic)", "modifiers": "private", "return": "String", "signature": "String getSchemaName(Schema debeziumEventSchema, String routedTopic)", "full_signature": "private String getSchemaName(Schema debeziumEventSchema, String routedTopic)", "class_method_signature": "EventRouter.getSchemaName(Schema debeziumEventSchema, String routedTopic)", "testcase": false, "constructor": false}], "file": "debezium-core/src/main/java/io/debezium/transforms/outbox/EventRouter.java"}, "focal_method": {"identifier": "configure", "parameters": "(Map<String, ?> configMap)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void configure(Map<String, ?> configMap) {\n        final Configuration config = Configuration.from(configMap);\n        smtManager = new SmtManager<>(config);\n\n        io.debezium.config.Field.Set allFields = io.debezium.config.Field.setOf(EventRouterConfigDefinition.CONFIG_FIELDS);\n        if (!config.validateAndRecord(allFields, LOGGER::error)) {\n            throw new ConnectException(\"Unable to validate config.\");\n        }\n\n        invalidOperationBehavior = EventRouterConfigDefinition.InvalidOperationBehavior.parse(\n                config.getString(EventRouterConfigDefinition.OPERATION_INVALID_BEHAVIOR));\n\n        fieldEventId = config.getString(EventRouterConfigDefinition.FIELD_EVENT_ID);\n        fieldEventKey = config.getString(EventRouterConfigDefinition.FIELD_EVENT_KEY);\n        fieldEventTimestamp = config.getString(EventRouterConfigDefinition.FIELD_EVENT_TIMESTAMP);\n        fieldPayload = config.getString(EventRouterConfigDefinition.FIELD_PAYLOAD);\n        fieldPayloadId = config.getString(EventRouterConfigDefinition.FIELD_PAYLOAD_ID);\n        fieldSchemaVersion = config.getString(EventRouterConfigDefinition.FIELD_SCHEMA_VERSION);\n        routeByField = config.getString(EventRouterConfigDefinition.ROUTE_BY_FIELD);\n        routeTombstoneOnEmptyPayload = config.getBoolean(EventRouterConfigDefinition.ROUTE_TOMBSTONE_ON_EMPTY_PAYLOAD);\n\n        final Map<String, String> regexRouterConfig = new HashMap<>();\n        regexRouterConfig.put(\"regex\", config.getString(EventRouterConfigDefinition.ROUTE_TOPIC_REGEX));\n        regexRouterConfig.put(\"replacement\", config.getString(EventRouterConfigDefinition.ROUTE_TOPIC_REPLACEMENT));\n\n        regexRouter.configure(regexRouterConfig);\n\n        final Map<String, String> afterExtractorConfig = new HashMap<>();\n        afterExtractorConfig.put(\"field\", Envelope.FieldName.AFTER);\n\n        afterExtractor.configure(afterExtractorConfig);\n\n        additionalFields = parseAdditionalFieldsConfig(config);\n        onlyHeadersInOutputMessage = !additionalFields.stream().anyMatch(field -> field.getPlacement() == EventRouterConfigDefinition.AdditionalFieldPlacement.ENVELOPE);\n    }", "signature": "void configure(Map<String, ?> configMap)", "full_signature": "@Override public void configure(Map<String, ?> configMap)", "class_method_signature": "EventRouter.configure(Map<String, ?> configMap)", "testcase": false, "constructor": false, "invocations": ["from", "setOf", "validateAndRecord", "parse", "getString", "getString", "getString", "getString", "getString", "getString", "getString", "getString", "getBoolean", "put", "getString", "put", "getString", "configure", "put", "configure", "parseAdditionalFieldsConfig", "anyMatch", "stream", "getPlacement"]}, "repository": {"repo_id": 50205233, "url": "https://github.com/debezium/debezium", "stars": 2686, "created": "1/22/2016 8:17:05 PM +00:00", "updates": "2020-01-27T20:48:54+00:00", "fork": "False", "license": "licensed"}}