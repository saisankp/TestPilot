{"test_class": {"identifier": "FruIdEventsHelperUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = Logger.getLogger( FruIdEventsHelperUtilTest.class );", "modifier": "private static", "type": "Logger", "declarator": "logger = Logger.getLogger( FruIdEventsHelperUtilTest.class )", "var_name": "logger"}], "file": "modules/hms-aggregator/src/test/java/com/vmware/vrack/hms/aggregator/util/FruIdEventsHelperUtilTest.java"}, "test_case": {"identifier": "addFruIDtoEthernetControllerEventsTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void addFruIDtoEthernetControllerEventsTest()\n    {\n\n        List<Event> events = new ArrayList<Event>();\n        List<Event> ethernetControllerEventsFruID = new ArrayList<Event>();\n        Event event = new Event();\n        Body body = new Body();\n        Header header = new Header();\n\n        try\n        {\n            // Construct Ethernet Controller or NIC Event for Testing\n            body.setDescription( \"NIC for rack EVO:RACK node N5 Ethernet Controller {EC} and NIC vmnic2 Link status is down\" );\n            Map<String, String> data = new HashMap<String, String>();\n            data.put( \"unit\", \"DISCRETE\" );\n            data.put( \"eventName\", \"NIC_LINK_DOWN\" );\n            body.setData( data );\n\n            Map<EventComponent, String> compIdentifier = new HashMap<EventComponent, String>();\n            compIdentifier.put( EventComponent.NIC, \"vmnic0\" );\n            compIdentifier.put( EventComponent.SERVER, \"N5\" );\n            header.addComponentIdentifier( compIdentifier );\n            header.setAgent( \"HMS\" );\n            header.setEventName( EventCatalog.NIC_LINK_DOWN );\n            header.setSeverity( EventSeverity.ERROR );\n            header.setVersion( \"1.0\" );\n\n            event.setBody( body );\n            event.setHeader( header );\n            events.add( event );\n\n            // Construct Ethernet Controller FRU Information\n            List<EthernetController> ethernetControllerInfoList = new ArrayList<EthernetController>();\n            List<PortInfo> portInfoList = new ArrayList<PortInfo>();\n            PortInfo portInfo = new PortInfo();\n            EthernetController ethernetController = new EthernetController();\n            ComponentIdentifier ethernetControllerComponentIdentifier = new ComponentIdentifier();\n            ethernetControllerComponentIdentifier.setManufacturer( \"Intel Corporation\" );\n            ethernetControllerComponentIdentifier.setProduct( \"I350 Gigabit Network Connection\" );\n            ethernetController.setComponentIdentifier( ethernetControllerComponentIdentifier );\n            ethernetController.setFruId( \"32023948731211679985\" );\n            ethernetController.setHostId( \"N5\" );\n            ethernetController.setSpeedInMbps( \"1000\" );\n            ethernetController.setFirmwareVersion( \"1.61, 0x80000919\" );\n\n            portInfo.setMacAddress( \"c4:54:44:72:c5:d4\" );\n            portInfo.setDeviceName( \"vmnic0\" );\n            portInfoList.add( portInfo );\n            ethernetController.setPortInfos( portInfoList );\n\n            ethernetControllerInfoList.add( ethernetController );\n\n            ethernetControllerEventsFruID =\n                FruIdEventsHelperUtil.addFruIDtoEthernetControllerEvents( events, ethernetControllerInfoList );\n            Map<String, String> eventData = ethernetControllerEventsFruID.get( 0 ).getBody().getData();\n            assertNotNull( eventData.get( \"fruID\" ) );\n        }\n        catch ( Exception e )\n        {\n            logger.info( \"Integrate FRU ID with Ethernet Controller Events Test Failed\" );\n        }\n    }", "signature": "void addFruIDtoEthernetControllerEventsTest()", "full_signature": "@Test public void addFruIDtoEthernetControllerEventsTest()", "class_method_signature": "FruIdEventsHelperUtilTest.addFruIDtoEthernetControllerEventsTest()", "testcase": true, "constructor": false, "invocations": ["setDescription", "put", "put", "setData", "put", "put", "addComponentIdentifier", "setAgent", "setEventName", "setSeverity", "setVersion", "setBody", "setHeader", "add", "setManufacturer", "setProduct", "setComponentIdentifier", "setFruId", "setHostId", "setSpeedInMbps", "setFirmwareVersion", "setMacAddress", "setDeviceName", "add", "setPortInfos", "add", "addFruIDtoEthernetControllerEvents", "getData", "getBody", "get", "assertNotNull", "get", "info"]}, "focal_class": {"identifier": "FruIdEventsHelperUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = Logger.getLogger( FruIdEventsHelperUtil.class );", "modifier": "private static", "type": "Logger", "declarator": "logger = Logger.getLogger( FruIdEventsHelperUtil.class )", "var_name": "logger"}], "methods": [{"identifier": "addFruIDtoEvents", "parameters": "( List<Event> aggregatedEvents, String nodeID,\n                                                ServerComponent serverComponent )", "modifiers": "public static", "return": "List<Event>", "signature": "List<Event> addFruIDtoEvents( List<Event> aggregatedEvents, String nodeID,\n                                                ServerComponent serverComponent )", "full_signature": "public static List<Event> addFruIDtoEvents( List<Event> aggregatedEvents, String nodeID,\n                                                ServerComponent serverComponent )", "class_method_signature": "FruIdEventsHelperUtil.addFruIDtoEvents( List<Event> aggregatedEvents, String nodeID,\n                                                ServerComponent serverComponent )", "testcase": false, "constructor": false}, {"identifier": "addFruIDtoSwitchEventsHelper", "parameters": "( List<Event> aggregatedSwitchEvents, String switchID )", "modifiers": "public static", "return": "List<Event>", "signature": "List<Event> addFruIDtoSwitchEventsHelper( List<Event> aggregatedSwitchEvents, String switchID )", "full_signature": "public static List<Event> addFruIDtoSwitchEventsHelper( List<Event> aggregatedSwitchEvents, String switchID )", "class_method_signature": "FruIdEventsHelperUtil.addFruIDtoSwitchEventsHelper( List<Event> aggregatedSwitchEvents, String switchID )", "testcase": false, "constructor": false}, {"identifier": "addFruIDtoCpuEvents", "parameters": "( List<Event> aggregatedEvents, List<CpuInfo> cpuInfoList )", "modifiers": "public static", "return": "List<Event>", "signature": "List<Event> addFruIDtoCpuEvents( List<Event> aggregatedEvents, List<CpuInfo> cpuInfoList )", "full_signature": "public static List<Event> addFruIDtoCpuEvents( List<Event> aggregatedEvents, List<CpuInfo> cpuInfoList )", "class_method_signature": "FruIdEventsHelperUtil.addFruIDtoCpuEvents( List<Event> aggregatedEvents, List<CpuInfo> cpuInfoList )", "testcase": false, "constructor": false}, {"identifier": "addFruIDtoMemoryEvents", "parameters": "( List<Event> aggregatedEvents, List<MemoryInfo> memoryInfoList )", "modifiers": "public static", "return": "List<Event>", "signature": "List<Event> addFruIDtoMemoryEvents( List<Event> aggregatedEvents, List<MemoryInfo> memoryInfoList )", "full_signature": "public static List<Event> addFruIDtoMemoryEvents( List<Event> aggregatedEvents, List<MemoryInfo> memoryInfoList )", "class_method_signature": "FruIdEventsHelperUtil.addFruIDtoMemoryEvents( List<Event> aggregatedEvents, List<MemoryInfo> memoryInfoList )", "testcase": false, "constructor": false}, {"identifier": "addFruIDtoStorageEvents", "parameters": "( List<Event> aggregatedEvents, List<StorageInfo> storageInfoList )", "modifiers": "public static", "return": "List<Event>", "signature": "List<Event> addFruIDtoStorageEvents( List<Event> aggregatedEvents, List<StorageInfo> storageInfoList )", "full_signature": "public static List<Event> addFruIDtoStorageEvents( List<Event> aggregatedEvents, List<StorageInfo> storageInfoList )", "class_method_signature": "FruIdEventsHelperUtil.addFruIDtoStorageEvents( List<Event> aggregatedEvents, List<StorageInfo> storageInfoList )", "testcase": false, "constructor": false}, {"identifier": "addFruIDtoStorageControllerEvents", "parameters": "( List<Event> aggregatedEvents,\n                                                                 List<StorageController> storageControllerList )", "modifiers": "public static", "return": "List<Event>", "signature": "List<Event> addFruIDtoStorageControllerEvents( List<Event> aggregatedEvents,\n                                                                 List<StorageController> storageControllerList )", "full_signature": "public static List<Event> addFruIDtoStorageControllerEvents( List<Event> aggregatedEvents,\n                                                                 List<StorageController> storageControllerList )", "class_method_signature": "FruIdEventsHelperUtil.addFruIDtoStorageControllerEvents( List<Event> aggregatedEvents,\n                                                                 List<StorageController> storageControllerList )", "testcase": false, "constructor": false}, {"identifier": "addFruIDtoEthernetControllerEvents", "parameters": "( List<Event> aggregatedEvents,\n                                                                  List<EthernetController> ethernetControllerList )", "modifiers": "public static", "return": "List<Event>", "signature": "List<Event> addFruIDtoEthernetControllerEvents( List<Event> aggregatedEvents,\n                                                                  List<EthernetController> ethernetControllerList )", "full_signature": "public static List<Event> addFruIDtoEthernetControllerEvents( List<Event> aggregatedEvents,\n                                                                  List<EthernetController> ethernetControllerList )", "class_method_signature": "FruIdEventsHelperUtil.addFruIDtoEthernetControllerEvents( List<Event> aggregatedEvents,\n                                                                  List<EthernetController> ethernetControllerList )", "testcase": false, "constructor": false}, {"identifier": "addFruIDtoHostEvents", "parameters": "( List<Event> aggregatedEvents, String serverFruID )", "modifiers": "public static", "return": "List<Event>", "signature": "List<Event> addFruIDtoHostEvents( List<Event> aggregatedEvents, String serverFruID )", "full_signature": "public static List<Event> addFruIDtoHostEvents( List<Event> aggregatedEvents, String serverFruID )", "class_method_signature": "FruIdEventsHelperUtil.addFruIDtoHostEvents( List<Event> aggregatedEvents, String serverFruID )", "testcase": false, "constructor": false}, {"identifier": "addFruIDtoSwitchEvents", "parameters": "( List<Event> aggregatedEvents, String switchFruID )", "modifiers": "public static", "return": "List<Event>", "signature": "List<Event> addFruIDtoSwitchEvents( List<Event> aggregatedEvents, String switchFruID )", "full_signature": "public static List<Event> addFruIDtoSwitchEvents( List<Event> aggregatedEvents, String switchFruID )", "class_method_signature": "FruIdEventsHelperUtil.addFruIDtoSwitchEvents( List<Event> aggregatedEvents, String switchFruID )", "testcase": false, "constructor": false}], "file": "modules/hms-aggregator/src/main/java/com/vmware/vrack/hms/aggregator/util/FruIdEventsHelperUtil.java"}, "focal_method": {"identifier": "addFruIDtoEthernetControllerEvents", "parameters": "( List<Event> aggregatedEvents,\n                                                                  List<EthernetController> ethernetControllerList )", "modifiers": "public static", "return": "List<Event>", "body": "public static List<Event> addFruIDtoEthernetControllerEvents( List<Event> aggregatedEvents,\n                                                                  List<EthernetController> ethernetControllerList )\n    {\n\n        List<Event> events = new ArrayList<Event>();\n        EthernetController ethernetController = new EthernetController();\n\n        try\n        {\n            for ( int i = 0; i < aggregatedEvents.size(); i++ )\n            {\n                Event event = aggregatedEvents.get( i );\n                Map<EventComponent, String> eventComponentIdentifier = event.getHeader().getComponentIdentifier();\n                Map<String, String> eventBody = event.getBody().getData();\n                String componentId = eventComponentIdentifier.get( EventComponent.NIC );\n\n                boolean foundEthernetControllerFru = false;\n                for ( int j = 0; j < ethernetControllerList.size() && foundEthernetControllerFru == false; j++ )\n                {\n                    for ( int k = 0; k < ethernetControllerList.get( j ).getPortInfos().size(); k++ )\n                    {\n                        if ( componentId.contains( ethernetControllerList.get( j ).getPortInfos().get( k ).getDeviceName() ) )\n                        {\n                            ethernetController = ethernetControllerList.get( j );\n                            eventBody.put( \"fruID\", ethernetController.getFruId() );\n                            foundEthernetControllerFru = true;\n                            break;\n                        }\n                    }\n                }\n                events.add( event );\n            }\n            return events;\n        }\n        catch ( Exception e )\n        {\n            logger.error( \"HMS aggregator error in adding Fru ID to Ethernet Controller or NIC Events\", e );\n        }\n\n        return null;\n    }", "signature": "List<Event> addFruIDtoEthernetControllerEvents( List<Event> aggregatedEvents,\n                                                                  List<EthernetController> ethernetControllerList )", "full_signature": "public static List<Event> addFruIDtoEthernetControllerEvents( List<Event> aggregatedEvents,\n                                                                  List<EthernetController> ethernetControllerList )", "class_method_signature": "FruIdEventsHelperUtil.addFruIDtoEthernetControllerEvents( List<Event> aggregatedEvents,\n                                                                  List<EthernetController> ethernetControllerList )", "testcase": false, "constructor": false, "invocations": ["size", "get", "getComponentIdentifier", "getHeader", "getData", "getBody", "get", "size", "size", "getPortInfos", "get", "contains", "getDeviceName", "get", "getPortInfos", "get", "get", "put", "getFruId", "add", "error"]}, "repository": {"repo_id": 61566208, "url": "https://github.com/vmware-archive/OHMS", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 16092, "license": "licensed"}}