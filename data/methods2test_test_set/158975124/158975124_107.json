{"test_class": {"identifier": "DirectoryStrategyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "List<String> dataDirList;", "modifier": "", "type": "List<String>", "declarator": "dataDirList", "var_name": "dataDirList"}, {"original_string": "Set<Integer> fullDirIndexSet;", "modifier": "", "type": "Set<Integer>", "declarator": "fullDirIndexSet", "var_name": "fullDirIndexSet"}], "file": "server/src/test/java/org/apache/iotdb/db/conf/directories/strategy/DirectoryStrategyTest.java"}, "test_case": {"identifier": "testAllDiskFull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testAllDiskFull() {\n    for (int i = 0; i < dataDirList.size(); i++) {\n      PowerMockito.when(CommonUtils.hasSpace(dataDirList.get(i))).thenReturn(false);\n    }\n\n    SequenceStrategy sequenceStrategy = new SequenceStrategy();\n    try {\n      sequenceStrategy.setFolders(dataDirList);\n      fail();\n    } catch (DiskSpaceInsufficientException e) {\n    }\n\n    MaxDiskUsableSpaceFirstStrategy maxDiskUsableSpaceFirstStrategy = new MaxDiskUsableSpaceFirstStrategy();\n    try {\n      maxDiskUsableSpaceFirstStrategy.setFolders(dataDirList);\n      fail();\n    } catch (DiskSpaceInsufficientException e) {\n    }\n\n    MinFolderOccupiedSpaceFirstStrategy minFolderOccupiedSpaceFirstStrategy = new MinFolderOccupiedSpaceFirstStrategy();\n    try {\n      minFolderOccupiedSpaceFirstStrategy.setFolders(dataDirList);\n      fail();\n    } catch (DiskSpaceInsufficientException e) {\n    }\n  }", "signature": "void testAllDiskFull()", "full_signature": "@Test public void testAllDiskFull()", "class_method_signature": "DirectoryStrategyTest.testAllDiskFull()", "testcase": true, "constructor": false, "invocations": ["size", "thenReturn", "when", "hasSpace", "get", "setFolders", "fail", "setFolders", "fail", "setFolders", "fail"]}, "focal_class": {"identifier": "DirectoryStrategy", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final Logger logger = LoggerFactory.getLogger(DirectoryStrategy.class);", "modifier": "protected static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(DirectoryStrategy.class)", "var_name": "logger"}, {"original_string": "List<String> folders = new ArrayList<>();", "modifier": "", "type": "List<String>", "declarator": "folders = new ArrayList<>()", "var_name": "folders"}], "methods": [{"identifier": "setFolders", "parameters": "(List<String> folders)", "modifiers": "public", "return": "void", "signature": "void setFolders(List<String> folders)", "full_signature": "public void setFolders(List<String> folders)", "class_method_signature": "DirectoryStrategy.setFolders(List<String> folders)", "testcase": false, "constructor": false}, {"identifier": "nextFolderIndex", "parameters": "()", "modifiers": "public abstract", "return": "int", "signature": "int nextFolderIndex()", "full_signature": "public abstract int nextFolderIndex()", "class_method_signature": "DirectoryStrategy.nextFolderIndex()", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/iotdb/db/conf/directories/strategy/DirectoryStrategy.java"}, "focal_method": {"identifier": "setFolders", "parameters": "(List<String> folders)", "modifiers": "public", "return": "void", "body": "public void setFolders(List<String> folders) throws DiskSpaceInsufficientException {\n    boolean hasSpace = false;\n    for (String folder : folders) {\n      if (CommonUtils.hasSpace(folder)) {\n        hasSpace = true;\n        break;\n      }\n    }\n    if (!hasSpace) {\n      IoTDBDescriptor.getInstance().getConfig().setReadOnly(true);\n      throw new DiskSpaceInsufficientException(folders);\n    }\n\n    this.folders = folders;\n  }", "signature": "void setFolders(List<String> folders)", "full_signature": "public void setFolders(List<String> folders)", "class_method_signature": "DirectoryStrategy.setFolders(List<String> folders)", "testcase": false, "constructor": false, "invocations": ["hasSpace", "setReadOnly", "getConfig", "getInstance"]}, "repository": {"repo_id": 158975124, "url": "https://github.com/apache/incubator-iotdb", "stars": 449, "created": "11/24/2018 9:29:17 PM +00:00", "updates": "2020-01-21T08:10:15+00:00", "fork": "False", "license": "licensed"}}