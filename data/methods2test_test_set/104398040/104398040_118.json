{"test_class": {"identifier": "PomAddModuleTest", "superclass": "extends TransformationUtilityTestHelper", "interfaces": "", "fields": [], "file": "butterfly-utilities/src/test/java/com/paypal/butterfly/utilities/operations/pom/PomAddModuleTest.java"}, "test_case": {"identifier": "moduleAlreadyPresentOverwriteTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void moduleAlreadyPresentOverwriteTest() throws IOException, SAXException, ParserConfigurationException, XmlPullParserException {\n        PomAddModule pomAddModule = new PomAddModule(\"module1\").relative(\"pom.xml\").overwriteIfPresent();\n        TOExecutionResult executionResult = pomAddModule.execution(transformedAppFolder, transformationContext);\n\n        assertEquals(executionResult.getType(), TOExecutionResult.Type.SUCCESS);\n        assertNull(executionResult.getException());\n        assertEquals(executionResult.getWarnings().size(), 0);\n\n        Model pomModelAfterChange = getTransformedPomModel(\"pom.xml\");\n        assertEquals(pomModelAfterChange.getModules().size(), 1);\n        assertTrue(pomModelAfterChange.getModules().contains(\"module1\"));\n\n// FIXME\n// Uncomment this when STAX based version of this TO is implemented\n//        assertNotChangedFile(\"pom.xml\");\n    }", "signature": "void moduleAlreadyPresentOverwriteTest()", "full_signature": "@Test public void moduleAlreadyPresentOverwriteTest()", "class_method_signature": "PomAddModuleTest.moduleAlreadyPresentOverwriteTest()", "testcase": true, "constructor": false, "invocations": ["overwriteIfPresent", "relative", "execution", "assertEquals", "getType", "assertNull", "getException", "assertEquals", "size", "getWarnings", "getTransformedPomModel", "assertEquals", "size", "getModules", "assertTrue", "contains", "getModules"]}, "focal_class": {"identifier": "PomAddModule", "superclass": "extends AbstractPomOperation<PomAddModule>", "interfaces": "implements AddElement<PomAddModule>", "fields": [{"original_string": "private static final String DESCRIPTION = \"Add module %s to POM file %s\";", "modifier": "private static final", "type": "String", "declarator": "DESCRIPTION = \"Add module %s to POM file %s\"", "var_name": "DESCRIPTION"}, {"original_string": "private String moduleName;", "modifier": "private", "type": "String", "declarator": "moduleName", "var_name": "moduleName"}, {"original_string": "private IfPresent ifPresent = IfPresent.Fail;", "modifier": "private", "type": "IfPresent", "declarator": "ifPresent = IfPresent.Fail", "var_name": "ifPresent"}], "methods": [{"identifier": "PomAddModule", "parameters": "()", "modifiers": "public", "return": "", "signature": " PomAddModule()", "full_signature": "public  PomAddModule()", "class_method_signature": "PomAddModule.PomAddModule()", "testcase": false, "constructor": true}, {"identifier": "PomAddModule", "parameters": "(String moduleName)", "modifiers": "public", "return": "", "signature": " PomAddModule(String moduleName)", "full_signature": "public  PomAddModule(String moduleName)", "class_method_signature": "PomAddModule.PomAddModule(String moduleName)", "testcase": false, "constructor": true}, {"identifier": "failIfPresent", "parameters": "()", "modifiers": "@Override public", "return": "PomAddModule", "signature": "PomAddModule failIfPresent()", "full_signature": "@Override public PomAddModule failIfPresent()", "class_method_signature": "PomAddModule.failIfPresent()", "testcase": false, "constructor": false}, {"identifier": "warnNotAddIfPresent", "parameters": "()", "modifiers": "@Override public", "return": "PomAddModule", "signature": "PomAddModule warnNotAddIfPresent()", "full_signature": "@Override public PomAddModule warnNotAddIfPresent()", "class_method_signature": "PomAddModule.warnNotAddIfPresent()", "testcase": false, "constructor": false}, {"identifier": "warnButAddIfPresent", "parameters": "()", "modifiers": "@Override public", "return": "PomAddModule", "signature": "PomAddModule warnButAddIfPresent()", "full_signature": "@Override public PomAddModule warnButAddIfPresent()", "class_method_signature": "PomAddModule.warnButAddIfPresent()", "testcase": false, "constructor": false}, {"identifier": "noOpIfPresent", "parameters": "()", "modifiers": "@Override public", "return": "PomAddModule", "signature": "PomAddModule noOpIfPresent()", "full_signature": "@Override public PomAddModule noOpIfPresent()", "class_method_signature": "PomAddModule.noOpIfPresent()", "testcase": false, "constructor": false}, {"identifier": "overwriteIfPresent", "parameters": "()", "modifiers": "@Override public", "return": "PomAddModule", "signature": "PomAddModule overwriteIfPresent()", "full_signature": "@Override public PomAddModule overwriteIfPresent()", "class_method_signature": "PomAddModule.overwriteIfPresent()", "testcase": false, "constructor": false}, {"identifier": "setModuleName", "parameters": "(String moduleName)", "modifiers": "public", "return": "PomAddModule", "signature": "PomAddModule setModuleName(String moduleName)", "full_signature": "public PomAddModule setModuleName(String moduleName)", "class_method_signature": "PomAddModule.setModuleName(String moduleName)", "testcase": false, "constructor": false}, {"identifier": "getModuleName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getModuleName()", "full_signature": "public String getModuleName()", "class_method_signature": "PomAddModule.getModuleName()", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDescription()", "full_signature": "@Override public String getDescription()", "class_method_signature": "PomAddModule.getDescription()", "testcase": false, "constructor": false}, {"identifier": "pomExecution", "parameters": "(String relativePomFile, Model model)", "modifiers": "@Override protected", "return": "TOExecutionResult", "signature": "TOExecutionResult pomExecution(String relativePomFile, Model model)", "full_signature": "@Override protected TOExecutionResult pomExecution(String relativePomFile, Model model)", "class_method_signature": "PomAddModule.pomExecution(String relativePomFile, Model model)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "PomAddModule.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "PomAddModule.hashCode()", "testcase": false, "constructor": false}], "file": "butterfly-utilities/src/main/java/com/paypal/butterfly/utilities/operations/pom/PomAddModule.java"}, "focal_method": {"identifier": "overwriteIfPresent", "parameters": "()", "modifiers": "@Override public", "return": "PomAddModule", "body": "@Override\n    public PomAddModule overwriteIfPresent() {\n        ifPresent = IfPresent.Overwrite;\n        return this;\n    }", "signature": "PomAddModule overwriteIfPresent()", "full_signature": "@Override public PomAddModule overwriteIfPresent()", "class_method_signature": "PomAddModule.overwriteIfPresent()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 104398040, "url": "https://github.com/paypal/butterfly", "language": "Java", "is_fork": false, "fork_count": 42, "stargazer_count": 26, "size": 6906, "license": "licensed"}}