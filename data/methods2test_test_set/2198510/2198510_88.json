{"test_class": {"identifier": "TestUUIDInterceptor", "superclass": "extends Assert", "interfaces": "", "fields": [{"original_string": "private static final String ID = \"id\";", "modifier": "private static final", "type": "String", "declarator": "ID = \"id\"", "var_name": "ID"}], "file": "flume-ng-sinks/flume-ng-morphline-solr-sink/src/test/java/org/apache/flume/sink/solr/morphline/TestUUIDInterceptor.java"}, "test_case": {"identifier": "testBasic", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testBasic() throws Exception {\n    Context context = new Context();\n    context.put(UUIDInterceptor.HEADER_NAME, ID);\n    context.put(UUIDInterceptor.PRESERVE_EXISTING_NAME, \"true\");\n    Event event = new SimpleEvent();\n    assertTrue(build(context).intercept(event).getHeaders().get(ID).length() > 0);\n  }", "signature": "void testBasic()", "full_signature": "@Test public void testBasic()", "class_method_signature": "TestUUIDInterceptor.testBasic()", "testcase": true, "constructor": false, "invocations": ["put", "put", "assertTrue", "length", "get", "getHeaders", "intercept", "build"]}, "focal_class": {"identifier": "UUIDInterceptor", "superclass": "", "interfaces": "implements Interceptor", "fields": [{"original_string": "private String headerName;", "modifier": "private", "type": "String", "declarator": "headerName", "var_name": "headerName"}, {"original_string": "private boolean preserveExisting;", "modifier": "private", "type": "boolean", "declarator": "preserveExisting", "var_name": "preserveExisting"}, {"original_string": "private String prefix;", "modifier": "private", "type": "String", "declarator": "prefix", "var_name": "prefix"}, {"original_string": "public static final String HEADER_NAME = \"headerName\";", "modifier": "public static final", "type": "String", "declarator": "HEADER_NAME = \"headerName\"", "var_name": "HEADER_NAME"}, {"original_string": "public static final String PRESERVE_EXISTING_NAME = \"preserveExisting\";", "modifier": "public static final", "type": "String", "declarator": "PRESERVE_EXISTING_NAME = \"preserveExisting\"", "var_name": "PRESERVE_EXISTING_NAME"}, {"original_string": "public static final String PREFIX_NAME = \"prefix\";", "modifier": "public static final", "type": "String", "declarator": "PREFIX_NAME = \"prefix\"", "var_name": "PREFIX_NAME"}], "methods": [{"identifier": "UUIDInterceptor", "parameters": "(Context context)", "modifiers": "protected", "return": "", "signature": " UUIDInterceptor(Context context)", "full_signature": "protected  UUIDInterceptor(Context context)", "class_method_signature": "UUIDInterceptor.UUIDInterceptor(Context context)", "testcase": false, "constructor": true}, {"identifier": "initialize", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void initialize()", "full_signature": "@Override public void initialize()", "class_method_signature": "UUIDInterceptor.initialize()", "testcase": false, "constructor": false}, {"identifier": "getPrefix", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getPrefix()", "full_signature": "protected String getPrefix()", "class_method_signature": "UUIDInterceptor.getPrefix()", "testcase": false, "constructor": false}, {"identifier": "generateUUID", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String generateUUID()", "full_signature": "protected String generateUUID()", "class_method_signature": "UUIDInterceptor.generateUUID()", "testcase": false, "constructor": false}, {"identifier": "isMatch", "parameters": "(Event event)", "modifiers": "protected", "return": "boolean", "signature": "boolean isMatch(Event event)", "full_signature": "protected boolean isMatch(Event event)", "class_method_signature": "UUIDInterceptor.isMatch(Event event)", "testcase": false, "constructor": false}, {"identifier": "intercept", "parameters": "(Event event)", "modifiers": "@Override public", "return": "Event", "signature": "Event intercept(Event event)", "full_signature": "@Override public Event intercept(Event event)", "class_method_signature": "UUIDInterceptor.intercept(Event event)", "testcase": false, "constructor": false}, {"identifier": "intercept", "parameters": "(List<Event> events)", "modifiers": "@Override public", "return": "List<Event>", "signature": "List<Event> intercept(List<Event> events)", "full_signature": "@Override public List<Event> intercept(List<Event> events)", "class_method_signature": "UUIDInterceptor.intercept(List<Event> events)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "UUIDInterceptor.close()", "testcase": false, "constructor": false}], "file": "flume-ng-sinks/flume-ng-morphline-solr-sink/src/main/java/org/apache/flume/sink/solr/morphline/UUIDInterceptor.java"}, "focal_method": {"identifier": "intercept", "parameters": "(Event event)", "modifiers": "@Override public", "return": "Event", "body": "@Override\n  public Event intercept(Event event) {\n    Map<String, String> headers = event.getHeaders();\n    if (preserveExisting && headers.containsKey(headerName)) {\n      // we must preserve the existing id\n    } else if (isMatch(event)) {\n      headers.put(headerName, generateUUID());\n    }\n    return event;\n  }", "signature": "Event intercept(Event event)", "full_signature": "@Override public Event intercept(Event event)", "class_method_signature": "UUIDInterceptor.intercept(Event event)", "testcase": false, "constructor": false, "invocations": ["getHeaders", "containsKey", "isMatch", "put", "generateUUID"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}