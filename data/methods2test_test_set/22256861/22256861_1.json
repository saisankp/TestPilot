{"test_class": {"identifier": "MOD08FileFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "s3tbx-meris-sdr/src/test/java/org/esa/s3tbx/meris/aerosol/MOD08FileFactoryTest.java"}, "test_case": {"identifier": "testCreateTemporalFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateTemporalFile() {\n        final DateFormat dateFormat = UTCTest.getDateTimeFormat();\n        final MOD08FileFactory ff = new MOD08FileFactory();\n        File f;\n        TemporalFile tf;\n\n        // fub files\n        f = new File(\"MOD08_E3.A2003001.004.2003337033342.hdf_FUB.hdf\");\n        tf = ff.createTemporalFile(f);\n        assertNotNull(tf);\n        assertEquals(\"01.01.2003 00:00:00\", dateFormat.format(tf.getStartDate()));\n        assertEquals(\"08.01.2003 23:59:59\", dateFormat.format(tf.getEndDate()));\n\n        f = new File(\"MOD08_E3.A2003169.004.2003343085247.hdf_FUB.hdf\");\n        tf = ff.createTemporalFile(f);\n        assertNotNull(tf);\n        assertEquals(\"18.06.2003 00:00:00\", dateFormat.format(tf.getStartDate()));\n        assertEquals(\"25.06.2003 23:59:59\", dateFormat.format(tf.getEndDate()));\n\n        f = new File(\"MOD08_E3.A2003365.004.2003343085247.hdf_FUB.hdf\");\n        tf = ff.createTemporalFile(f);\n        assertNotNull(tf);\n        assertEquals(\"31.12.2003 00:00:00\", dateFormat.format(tf.getStartDate()));\n        assertEquals(\"07.01.2004 23:59:59\", dateFormat.format(tf.getEndDate()));\n\n        // nasa files\n        f = new File(\"MOD08PSMOD08_E3.A2005001.004.2005011171600.hdf\");\n        tf = ff.createTemporalFile(f);\n        assertNotNull(tf);\n        assertEquals(\"01.01.2005 00:00:00\", dateFormat.format(tf.getStartDate()));\n\n        f = new File(\"MOD08_E3_MOD08SUB.A2006025.0000.001.2006038141658.hdf\");\n        tf = ff.createTemporalFile(f);\n        assertNotNull(tf);\n        assertEquals(\"25.01.2006 00:00:00\", dateFormat.format(tf.getStartDate()));\n    }", "signature": "void testCreateTemporalFile()", "full_signature": "@Test public void testCreateTemporalFile()", "class_method_signature": "MOD08FileFactoryTest.testCreateTemporalFile()", "testcase": true, "constructor": false, "invocations": ["getDateTimeFormat", "createTemporalFile", "assertNotNull", "assertEquals", "format", "getStartDate", "assertEquals", "format", "getEndDate", "createTemporalFile", "assertNotNull", "assertEquals", "format", "getStartDate", "assertEquals", "format", "getEndDate", "createTemporalFile", "assertNotNull", "assertEquals", "format", "getStartDate", "assertEquals", "format", "getEndDate", "createTemporalFile", "assertNotNull", "assertEquals", "format", "getStartDate", "createTemporalFile", "assertNotNull", "assertEquals", "format", "getStartDate"]}, "focal_class": {"identifier": "MOD08FileFactory", "superclass": "", "interfaces": "implements TemporalFileFactory", "fields": [{"original_string": "private static final int AVG_PERIOD_IN_DAYS = 8;", "modifier": "private static final", "type": "int", "declarator": "AVG_PERIOD_IN_DAYS = 8", "var_name": "AVG_PERIOD_IN_DAYS"}, {"original_string": "private static final long AVG_PERIOD_IN_MILLIS = AVG_PERIOD_IN_DAYS * (24L * 60L * 60L * 1000L);", "modifier": "private static final", "type": "long", "declarator": "AVG_PERIOD_IN_MILLIS = AVG_PERIOD_IN_DAYS * (24L * 60L * 60L * 1000L)", "var_name": "AVG_PERIOD_IN_MILLIS"}, {"original_string": "private static final String FILENAME_PART = \"MOD08_E3\";", "modifier": "private static final", "type": "String", "declarator": "FILENAME_PART = \"MOD08_E3\"", "var_name": "FILENAME_PART"}, {"original_string": "private static final String FILENAME_DATE_START = \".A\";", "modifier": "private static final", "type": "String", "declarator": "FILENAME_DATE_START = \".A\"", "var_name": "FILENAME_DATE_START"}, {"original_string": "private static final String FILENAME_SUFFIX = \".hdf\";", "modifier": "private static final", "type": "String", "declarator": "FILENAME_SUFFIX = \".hdf\"", "var_name": "FILENAME_SUFFIX"}], "methods": [{"identifier": "createTemporalFile", "parameters": "(final File file)", "modifiers": "public", "return": "TemporalFile", "signature": "TemporalFile createTemporalFile(final File file)", "full_signature": "public TemporalFile createTemporalFile(final File file)", "class_method_signature": "MOD08FileFactory.createTemporalFile(final File file)", "testcase": false, "constructor": false}, {"identifier": "computeTime", "parameters": "(final int year, final int dayOfYear)", "modifiers": "private static", "return": "long", "signature": "long computeTime(final int year, final int dayOfYear)", "full_signature": "private static long computeTime(final int year, final int dayOfYear)", "class_method_signature": "MOD08FileFactory.computeTime(final int year, final int dayOfYear)", "testcase": false, "constructor": false}, {"identifier": "createUTCCalendar", "parameters": "()", "modifiers": "private static", "return": "Calendar", "signature": "Calendar createUTCCalendar()", "full_signature": "private static Calendar createUTCCalendar()", "class_method_signature": "MOD08FileFactory.createUTCCalendar()", "testcase": false, "constructor": false}], "file": "s3tbx-meris-sdr/src/main/java/org/esa/s3tbx/meris/aerosol/MOD08FileFactory.java"}, "focal_method": {"identifier": "createTemporalFile", "parameters": "(final File file)", "modifiers": "public", "return": "TemporalFile", "body": "public TemporalFile createTemporalFile(final File file) {\n        final String filename = file.getName();\n        if (!filename.endsWith(FILENAME_SUFFIX)) {\n            return null;\n        }\n\n        if ((filename.indexOf(FILENAME_PART) == -1) ||\n                filename.indexOf(FILENAME_DATE_START) == -1) {\n            return null;\n        }\n        final int dateStart = filename.indexOf(FILENAME_DATE_START);\n        final int yearOffset = dateStart + FILENAME_DATE_START.length();\n        final int dayOffset = yearOffset + 4;\n        int year;\n        int dayOfYear;\n\n        try {\n            year = Integer.parseInt(filename.substring(yearOffset, yearOffset + 4));\n            dayOfYear = Integer.parseInt(filename.substring(dayOffset, dayOffset + 3));\n        } catch (NumberFormatException e) {\n            return null;\n        }\n        final long startTime = computeTime(year, dayOfYear);\n        final long endTime = startTime + AVG_PERIOD_IN_MILLIS - 1;\n        return new TemporalFile(file, new Date(startTime), new Date(endTime));\n    }", "signature": "TemporalFile createTemporalFile(final File file)", "full_signature": "public TemporalFile createTemporalFile(final File file)", "class_method_signature": "MOD08FileFactory.createTemporalFile(final File file)", "testcase": false, "constructor": false, "invocations": ["getName", "endsWith", "indexOf", "indexOf", "indexOf", "length", "parseInt", "substring", "parseInt", "substring", "computeTime"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}