{"test_class": {"identifier": "FltTest", "superclass": "", "interfaces": "", "fields": [], "file": "reflekt/src/test/java/io/advantageous/boon/primitive/FltTest.java"}, "test_case": {"identifier": "testSliceOf", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSliceOf() {\n        float[] array = Flt.array(0f, 1f, 2f, 3f, 4f, 5f, 6f);\n        float[] array2 = Flt.sliceOf(array, 0, 100);\n        puts(array, array2);\n        Flt.equalsOrDie(array, array2);\n\n    }", "signature": "void testSliceOf()", "full_signature": "@Test public void testSliceOf()", "class_method_signature": "FltTest.testSliceOf()", "testcase": true, "constructor": false, "invocations": ["array", "sliceOf", "puts", "equalsOrDie"]}, "focal_class": {"identifier": "Flt", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "grow", "parameters": "( float[] array, final int size )", "modifiers": "public static", "return": "float[]", "signature": "float[] grow( float[] array, final int size )", "full_signature": "public static float[] grow( float[] array, final int size )", "class_method_signature": "Flt.grow( float[] array, final int size )", "testcase": false, "constructor": false}, {"identifier": "grow", "parameters": "( float[] array )", "modifiers": "public static", "return": "float[]", "signature": "float[] grow( float[] array )", "full_signature": "public static float[] grow( float[] array )", "class_method_signature": "Flt.grow( float[] array )", "testcase": false, "constructor": false}, {"identifier": "shrink", "parameters": "( float[] array, int size )", "modifiers": "public static", "return": "float[]", "signature": "float[] shrink( float[] array, int size )", "full_signature": "public static float[] shrink( float[] array, int size )", "class_method_signature": "Flt.shrink( float[] array, int size )", "testcase": false, "constructor": false}, {"identifier": "compact", "parameters": "( float[] array )", "modifiers": "public static", "return": "float[]", "signature": "float[] compact( float[] array )", "full_signature": "public static float[] compact( float[] array )", "class_method_signature": "Flt.compact( float[] array )", "testcase": false, "constructor": false}, {"identifier": "arrayOfFloat", "parameters": "( final int size )", "modifiers": "public static", "return": "float[]", "signature": "float[] arrayOfFloat( final int size )", "full_signature": "public static float[] arrayOfFloat( final int size )", "class_method_signature": "Flt.arrayOfFloat( final int size )", "testcase": false, "constructor": false}, {"identifier": "array", "parameters": "( final float... array )", "modifiers": "public static", "return": "float[]", "signature": "float[] array( final float... array )", "full_signature": "public static float[] array( final float... array )", "class_method_signature": "Flt.array( final float... array )", "testcase": false, "constructor": false}, {"identifier": "lengthOf", "parameters": "( float[] array )", "modifiers": "public static", "return": "int", "signature": "int lengthOf( float[] array )", "full_signature": "public static int lengthOf( float[] array )", "class_method_signature": "Flt.lengthOf( float[] array )", "testcase": false, "constructor": false}, {"identifier": "len", "parameters": "( float[] array )", "modifiers": "public static", "return": "int", "signature": "int len( float[] array )", "full_signature": "public static int len( float[] array )", "class_method_signature": "Flt.len( float[] array )", "testcase": false, "constructor": false}, {"identifier": "atIndex", "parameters": "( final float[] array, final int index )", "modifiers": "public static", "return": "float", "signature": "float atIndex( final float[] array, final int index )", "full_signature": "public static float atIndex( final float[] array, final int index )", "class_method_signature": "Flt.atIndex( final float[] array, final int index )", "testcase": false, "constructor": false}, {"identifier": "idx", "parameters": "( final float[] array, final int index )", "modifiers": "public static", "return": "float", "signature": "float idx( final float[] array, final int index )", "full_signature": "public static float idx( final float[] array, final int index )", "class_method_signature": "Flt.idx( final float[] array, final int index )", "testcase": false, "constructor": false}, {"identifier": "atIndex", "parameters": "( final float[] array, int index, float value )", "modifiers": "public static", "return": "void", "signature": "void atIndex( final float[] array, int index, float value )", "full_signature": "public static void atIndex( final float[] array, int index, float value )", "class_method_signature": "Flt.atIndex( final float[] array, int index, float value )", "testcase": false, "constructor": false}, {"identifier": "idx", "parameters": "( final float[] array, int index, float value )", "modifiers": "public static", "return": "void", "signature": "void idx( final float[] array, int index, float value )", "full_signature": "public static void idx( final float[] array, int index, float value )", "class_method_signature": "Flt.idx( final float[] array, int index, float value )", "testcase": false, "constructor": false}, {"identifier": "sliceOf", "parameters": "( float[] array, int startIndex, int endIndex )", "modifiers": "public static", "return": "float[]", "signature": "float[] sliceOf( float[] array, int startIndex, int endIndex )", "full_signature": "public static float[] sliceOf( float[] array, int startIndex, int endIndex )", "class_method_signature": "Flt.sliceOf( float[] array, int startIndex, int endIndex )", "testcase": false, "constructor": false}, {"identifier": "slc", "parameters": "( float[] array, int startIndex, int endIndex )", "modifiers": "public static", "return": "float[]", "signature": "float[] slc( float[] array, int startIndex, int endIndex )", "full_signature": "public static float[] slc( float[] array, int startIndex, int endIndex )", "class_method_signature": "Flt.slc( float[] array, int startIndex, int endIndex )", "testcase": false, "constructor": false}, {"identifier": "sliceOf", "parameters": "( float[] array, int startIndex )", "modifiers": "public static", "return": "float[]", "signature": "float[] sliceOf( float[] array, int startIndex )", "full_signature": "public static float[] sliceOf( float[] array, int startIndex )", "class_method_signature": "Flt.sliceOf( float[] array, int startIndex )", "testcase": false, "constructor": false}, {"identifier": "slc", "parameters": "( float[] array, int startIndex )", "modifiers": "public static", "return": "float[]", "signature": "float[] slc( float[] array, int startIndex )", "full_signature": "public static float[] slc( float[] array, int startIndex )", "class_method_signature": "Flt.slc( float[] array, int startIndex )", "testcase": false, "constructor": false}, {"identifier": "endOfSlice", "parameters": "( float[] array, int endIndex )", "modifiers": "public static", "return": "float[]", "signature": "float[] endOfSlice( float[] array, int endIndex )", "full_signature": "public static float[] endOfSlice( float[] array, int endIndex )", "class_method_signature": "Flt.endOfSlice( float[] array, int endIndex )", "testcase": false, "constructor": false}, {"identifier": "slcEnd", "parameters": "( float[] array, int endIndex )", "modifiers": "public static", "return": "float[]", "signature": "float[] slcEnd( float[] array, int endIndex )", "full_signature": "public static float[] slcEnd( float[] array, int endIndex )", "class_method_signature": "Flt.slcEnd( float[] array, int endIndex )", "testcase": false, "constructor": false}, {"identifier": "in", "parameters": "( float value, float[] array )", "modifiers": "public static", "return": "boolean", "signature": "boolean in( float value, float[] array )", "full_signature": "public static boolean in( float value, float[] array )", "class_method_signature": "Flt.in( float value, float[] array )", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "( float[] array )", "modifiers": "public static", "return": "float[]", "signature": "float[] copy( float[] array )", "full_signature": "public static float[] copy( float[] array )", "class_method_signature": "Flt.copy( float[] array )", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "( float[] array, float v )", "modifiers": "public static", "return": "float[]", "signature": "float[] add( float[] array, float v )", "full_signature": "public static float[] add( float[] array, float v )", "class_method_signature": "Flt.add( float[] array, float v )", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "( float[] array, float[] array2 )", "modifiers": "public static", "return": "float[]", "signature": "float[] add( float[] array, float[] array2 )", "full_signature": "public static float[] add( float[] array, float[] array2 )", "class_method_signature": "Flt.add( float[] array, float[] array2 )", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "( final float[] array, final int idx, final float v )", "modifiers": "public static", "return": "float[]", "signature": "float[] insert( final float[] array, final int idx, final float v )", "full_signature": "public static float[] insert( final float[] array, final int idx, final float v )", "class_method_signature": "Flt.insert( final float[] array, final int idx, final float v )", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "( final float[] array, final int fromIndex, final float[] values )", "modifiers": "public static", "return": "float[]", "signature": "float[] insert( final float[] array, final int fromIndex, final float[] values )", "full_signature": "public static float[] insert( final float[] array, final int fromIndex, final float[] values )", "class_method_signature": "Flt.insert( final float[] array, final int fromIndex, final float[] values )", "testcase": false, "constructor": false}, {"identifier": "calculateIndex", "parameters": "( float[] array, int originalIndex )", "modifiers": "private static", "return": "int", "signature": "int calculateIndex( float[] array, int originalIndex )", "full_signature": "private static int calculateIndex( float[] array, int originalIndex )", "class_method_signature": "Flt.calculateIndex( float[] array, int originalIndex )", "testcase": false, "constructor": false}, {"identifier": "calculateEndIndex", "parameters": "( float[] array, int originalIndex )", "modifiers": "private static", "return": "int", "signature": "int calculateEndIndex( float[] array, int originalIndex )", "full_signature": "private static int calculateEndIndex( float[] array, int originalIndex )", "class_method_signature": "Flt.calculateEndIndex( float[] array, int originalIndex )", "testcase": false, "constructor": false}, {"identifier": "equalsOrDie", "parameters": "(float[] expected, float[] got)", "modifiers": "public static", "return": "boolean", "signature": "boolean equalsOrDie(float[] expected, float[] got)", "full_signature": "public static boolean equalsOrDie(float[] expected, float[] got)", "class_method_signature": "Flt.equalsOrDie(float[] expected, float[] got)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(float[] expected, float[] got)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals(float[] expected, float[] got)", "full_signature": "public static boolean equals(float[] expected, float[] got)", "class_method_signature": "Flt.equals(float[] expected, float[] got)", "testcase": false, "constructor": false}, {"identifier": "reduceBy", "parameters": "( final float[] array, ReduceBy reduceBy )", "modifiers": "public static", "return": "double", "signature": "double reduceBy( final float[] array, ReduceBy reduceBy )", "full_signature": "public static double reduceBy( final float[] array, ReduceBy reduceBy )", "class_method_signature": "Flt.reduceBy( final float[] array, ReduceBy reduceBy )", "testcase": false, "constructor": false}, {"identifier": "reduceBy", "parameters": "( final float[] array, final int start, final int length, ReduceBy reduceBy )", "modifiers": "public static", "return": "double", "signature": "double reduceBy( final float[] array, final int start, final int length, ReduceBy reduceBy )", "full_signature": "public static double reduceBy( final float[] array, final int start, final int length, ReduceBy reduceBy )", "class_method_signature": "Flt.reduceBy( final float[] array, final int start, final int length, ReduceBy reduceBy )", "testcase": false, "constructor": false}, {"identifier": "reduceBy", "parameters": "( final float[] array, final int length, ReduceBy reduceBy )", "modifiers": "public static", "return": "double", "signature": "double reduceBy( final float[] array, final int length, ReduceBy reduceBy )", "full_signature": "public static double reduceBy( final float[] array, final int length, ReduceBy reduceBy )", "class_method_signature": "Flt.reduceBy( final float[] array, final int length, ReduceBy reduceBy )", "testcase": false, "constructor": false}, {"identifier": "reduceBy", "parameters": "( final float[] array, T object )", "modifiers": "public static", "return": "double", "signature": "double reduceBy( final float[] array, T object )", "full_signature": "public static double reduceBy( final float[] array, T object )", "class_method_signature": "Flt.reduceBy( final float[] array, T object )", "testcase": false, "constructor": false}, {"identifier": "reduceBy", "parameters": "( final float[] array, T object, String methodName )", "modifiers": "public static", "return": "double", "signature": "double reduceBy( final float[] array, T object, String methodName )", "full_signature": "public static double reduceBy( final float[] array, T object, String methodName )", "class_method_signature": "Flt.reduceBy( final float[] array, T object, String methodName )", "testcase": false, "constructor": false}, {"identifier": "reduceByR", "parameters": "( final float[] array, T object )", "modifiers": "private static", "return": "double", "signature": "double reduceByR( final float[] array, T object )", "full_signature": "private static double reduceByR( final float[] array, T object )", "class_method_signature": "Flt.reduceByR( final float[] array, T object )", "testcase": false, "constructor": false}, {"identifier": "reduceByR", "parameters": "( final float[] array, T object, String methodName )", "modifiers": "private static", "return": "double", "signature": "double reduceByR( final float[] array, T object, String methodName )", "full_signature": "private static double reduceByR( final float[] array, T object, String methodName )", "class_method_signature": "Flt.reduceByR( final float[] array, T object, String methodName )", "testcase": false, "constructor": false}, {"identifier": "reduceByR", "parameters": "( final float[] array, int length, T object, String methodName )", "modifiers": "private static", "return": "double", "signature": "double reduceByR( final float[] array, int length, T object, String methodName )", "full_signature": "private static double reduceByR( final float[] array, int length, T object, String methodName )", "class_method_signature": "Flt.reduceByR( final float[] array, int length, T object, String methodName )", "testcase": false, "constructor": false}, {"identifier": "reduceByR", "parameters": "( final float[] array, int length, T object )", "modifiers": "private static", "return": "double", "signature": "double reduceByR( final float[] array, int length, T object )", "full_signature": "private static double reduceByR( final float[] array, int length, T object )", "class_method_signature": "Flt.reduceByR( final float[] array, int length, T object )", "testcase": false, "constructor": false}, {"identifier": "reduceBy", "parameters": "( final float[] array,  int length,\n                                 Object object )", "modifiers": "public static", "return": "double", "signature": "double reduceBy( final float[] array,  int length,\n                                 Object object )", "full_signature": "public static double reduceBy( final float[] array,  int length,\n                                 Object object )", "class_method_signature": "Flt.reduceBy( final float[] array,  int length,\n                                 Object object )", "testcase": false, "constructor": false}, {"identifier": "reduceBy", "parameters": "( final float[] array,  int length,\n                                 Object function, String functionName )", "modifiers": "public static", "return": "double", "signature": "double reduceBy( final float[] array,  int length,\n                                 Object function, String functionName )", "full_signature": "public static double reduceBy( final float[] array,  int length,\n                                 Object function, String functionName )", "class_method_signature": "Flt.reduceBy( final float[] array,  int length,\n                                 Object function, String functionName )", "testcase": false, "constructor": false}, {"identifier": "reduceBy", "parameters": "( final float[] array, int start, int length,\n                                 Object object )", "modifiers": "public static", "return": "double", "signature": "double reduceBy( final float[] array, int start, int length,\n                                 Object object )", "full_signature": "public static double reduceBy( final float[] array, int start, int length,\n                                 Object object )", "class_method_signature": "Flt.reduceBy( final float[] array, int start, int length,\n                                 Object object )", "testcase": false, "constructor": false}, {"identifier": "equalsOrDie", "parameters": "(float expected, float got)", "modifiers": "public static", "return": "boolean", "signature": "boolean equalsOrDie(float expected, float got)", "full_signature": "public static boolean equalsOrDie(float expected, float got)", "class_method_signature": "Flt.equalsOrDie(float expected, float got)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(float expected, float got)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals(float expected, float got)", "full_signature": "public static boolean equals(float expected, float got)", "class_method_signature": "Flt.equals(float expected, float got)", "testcase": false, "constructor": false}, {"identifier": "sum", "parameters": "( float[] values )", "modifiers": "public static", "return": "double", "signature": "double sum( float[] values )", "full_signature": "public static double sum( float[] values )", "class_method_signature": "Flt.sum( float[] values )", "testcase": false, "constructor": false}, {"identifier": "sum", "parameters": "( float[] values,  int length )", "modifiers": "public static", "return": "float", "signature": "float sum( float[] values,  int length )", "full_signature": "public static float sum( float[] values,  int length )", "class_method_signature": "Flt.sum( float[] values,  int length )", "testcase": false, "constructor": false}, {"identifier": "sum", "parameters": "( float[] values, int start, int length )", "modifiers": "public static", "return": "float", "signature": "float sum( float[] values, int start, int length )", "full_signature": "public static float sum( float[] values, int start, int length )", "class_method_signature": "Flt.sum( float[] values, int start, int length )", "testcase": false, "constructor": false}, {"identifier": "bigSum", "parameters": "( float[] values )", "modifiers": "public static", "return": "double", "signature": "double bigSum( float[] values )", "full_signature": "public static double bigSum( float[] values )", "class_method_signature": "Flt.bigSum( float[] values )", "testcase": false, "constructor": false}, {"identifier": "bigSum", "parameters": "( float[] values,  int length )", "modifiers": "public static", "return": "double", "signature": "double bigSum( float[] values,  int length )", "full_signature": "public static double bigSum( float[] values,  int length )", "class_method_signature": "Flt.bigSum( float[] values,  int length )", "testcase": false, "constructor": false}, {"identifier": "bigSum", "parameters": "( float[] values, int start, int length )", "modifiers": "public static", "return": "double", "signature": "double bigSum( float[] values, int start, int length )", "full_signature": "public static double bigSum( float[] values, int start, int length )", "class_method_signature": "Flt.bigSum( float[] values, int start, int length )", "testcase": false, "constructor": false}, {"identifier": "max", "parameters": "( float[] values, final int start, final int length )", "modifiers": "public static", "return": "float", "signature": "float max( float[] values, final int start, final int length )", "full_signature": "public static float max( float[] values, final int start, final int length )", "class_method_signature": "Flt.max( float[] values, final int start, final int length )", "testcase": false, "constructor": false}, {"identifier": "max", "parameters": "( float[] values )", "modifiers": "public static", "return": "float", "signature": "float max( float[] values )", "full_signature": "public static float max( float[] values )", "class_method_signature": "Flt.max( float[] values )", "testcase": false, "constructor": false}, {"identifier": "max", "parameters": "( float[] values, int length )", "modifiers": "public static", "return": "float", "signature": "float max( float[] values, int length )", "full_signature": "public static float max( float[] values, int length )", "class_method_signature": "Flt.max( float[] values, int length )", "testcase": false, "constructor": false}, {"identifier": "min", "parameters": "( float[] values, final int start, final int length )", "modifiers": "public static", "return": "float", "signature": "float min( float[] values, final int start, final int length )", "full_signature": "public static float min( float[] values, final int start, final int length )", "class_method_signature": "Flt.min( float[] values, final int start, final int length )", "testcase": false, "constructor": false}, {"identifier": "min", "parameters": "( float[] values )", "modifiers": "public static", "return": "float", "signature": "float min( float[] values )", "full_signature": "public static float min( float[] values )", "class_method_signature": "Flt.min( float[] values )", "testcase": false, "constructor": false}, {"identifier": "min", "parameters": "( float[] values, int length )", "modifiers": "public static", "return": "float", "signature": "float min( float[] values, int length )", "full_signature": "public static float min( float[] values, int length )", "class_method_signature": "Flt.min( float[] values, int length )", "testcase": false, "constructor": false}, {"identifier": "mean", "parameters": "( float[] values, final int start, final int length )", "modifiers": "public static", "return": "float", "signature": "float mean( float[] values, final int start, final int length )", "full_signature": "public static float mean( float[] values, final int start, final int length )", "class_method_signature": "Flt.mean( float[] values, final int start, final int length )", "testcase": false, "constructor": false}, {"identifier": "mean", "parameters": "( float[] values, final int length )", "modifiers": "public static", "return": "float", "signature": "float mean( float[] values, final int length )", "full_signature": "public static float mean( float[] values, final int length )", "class_method_signature": "Flt.mean( float[] values, final int length )", "testcase": false, "constructor": false}, {"identifier": "mean", "parameters": "( float[] values )", "modifiers": "public static", "return": "float", "signature": "float mean( float[] values )", "full_signature": "public static float mean( float[] values )", "class_method_signature": "Flt.mean( float[] values )", "testcase": false, "constructor": false}, {"identifier": "variance", "parameters": "(float[] values, final int start, final int length)", "modifiers": "public static", "return": "float", "signature": "float variance(float[] values, final int start, final int length)", "full_signature": "public static float variance(float[] values, final int start, final int length)", "class_method_signature": "Flt.variance(float[] values, final int start, final int length)", "testcase": false, "constructor": false}, {"identifier": "meanDouble", "parameters": "( float[] values, final int start, final int length )", "modifiers": "private static", "return": "double", "signature": "double meanDouble( float[] values, final int start, final int length )", "full_signature": "private static double meanDouble( float[] values, final int start, final int length )", "class_method_signature": "Flt.meanDouble( float[] values, final int start, final int length )", "testcase": false, "constructor": false}, {"identifier": "varianceDouble", "parameters": "(float[] values, final int start, final int length)", "modifiers": "public static", "return": "double", "signature": "double varianceDouble(float[] values, final int start, final int length)", "full_signature": "public static double varianceDouble(float[] values, final int start, final int length)", "class_method_signature": "Flt.varianceDouble(float[] values, final int start, final int length)", "testcase": false, "constructor": false}, {"identifier": "variance", "parameters": "(float[] values,  final int length)", "modifiers": "public static", "return": "float", "signature": "float variance(float[] values,  final int length)", "full_signature": "public static float variance(float[] values,  final int length)", "class_method_signature": "Flt.variance(float[] values,  final int length)", "testcase": false, "constructor": false}, {"identifier": "variance", "parameters": "(float[] values)", "modifiers": "public static", "return": "float", "signature": "float variance(float[] values)", "full_signature": "public static float variance(float[] values)", "class_method_signature": "Flt.variance(float[] values)", "testcase": false, "constructor": false}, {"identifier": "standardDeviation", "parameters": "(float[] values, final int start, final int length)", "modifiers": "public static", "return": "float", "signature": "float standardDeviation(float[] values, final int start, final int length)", "full_signature": "public static float standardDeviation(float[] values, final int start, final int length)", "class_method_signature": "Flt.standardDeviation(float[] values, final int start, final int length)", "testcase": false, "constructor": false}, {"identifier": "standardDeviation", "parameters": "(float[] values,  final int length)", "modifiers": "public static", "return": "float", "signature": "float standardDeviation(float[] values,  final int length)", "full_signature": "public static float standardDeviation(float[] values,  final int length)", "class_method_signature": "Flt.standardDeviation(float[] values,  final int length)", "testcase": false, "constructor": false}, {"identifier": "standardDeviation", "parameters": "(float[] values)", "modifiers": "public static", "return": "float", "signature": "float standardDeviation(float[] values)", "full_signature": "public static float standardDeviation(float[] values)", "class_method_signature": "Flt.standardDeviation(float[] values)", "testcase": false, "constructor": false}, {"identifier": "median", "parameters": "(float[] values, final int start, final int length)", "modifiers": "public static", "return": "float", "signature": "float median(float[] values, final int start, final int length)", "full_signature": "public static float median(float[] values, final int start, final int length)", "class_method_signature": "Flt.median(float[] values, final int start, final int length)", "testcase": false, "constructor": false}, {"identifier": "median", "parameters": "(float[] values, final int length)", "modifiers": "public static", "return": "float", "signature": "float median(float[] values, final int length)", "full_signature": "public static float median(float[] values, final int length)", "class_method_signature": "Flt.median(float[] values, final int length)", "testcase": false, "constructor": false}, {"identifier": "median", "parameters": "(float[] values)", "modifiers": "public static", "return": "float", "signature": "float median(float[] values)", "full_signature": "public static float median(float[] values)", "class_method_signature": "Flt.median(float[] values)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(int start, int end, float[] expected, float[] got)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals(int start, int end, float[] expected, float[] got)", "full_signature": "public static boolean equals(int start, int end, float[] expected, float[] got)", "class_method_signature": "Flt.equals(int start, int end, float[] expected, float[] got)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "(float array[])", "modifiers": "public static", "return": "int", "signature": "int hashCode(float array[])", "full_signature": "public static int hashCode(float array[])", "class_method_signature": "Flt.hashCode(float array[])", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "(int start, int end, float array[])", "modifiers": "public static", "return": "int", "signature": "int hashCode(int start, int end, float array[])", "full_signature": "public static int hashCode(int start, int end, float array[])", "class_method_signature": "Flt.hashCode(int start, int end, float array[])", "testcase": false, "constructor": false}], "file": "reflekt/src/main/java/io/advantageous/boon/primitive/Flt.java"}, "focal_method": {"identifier": "sliceOf", "parameters": "( float[] array, int startIndex, int endIndex )", "modifiers": "public static", "return": "float[]", "body": "public static float[] sliceOf( float[] array, int startIndex, int endIndex ) {\n\n        return slc(array, startIndex, endIndex);\n    }", "signature": "float[] sliceOf( float[] array, int startIndex, int endIndex )", "full_signature": "public static float[] sliceOf( float[] array, int startIndex, int endIndex )", "class_method_signature": "Flt.sliceOf( float[] array, int startIndex, int endIndex )", "testcase": false, "constructor": false, "invocations": ["slc"]}, "repository": {"repo_id": 33015857, "url": "https://github.com/advantageous/boon", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 18, "size": 6174, "license": "licensed"}}