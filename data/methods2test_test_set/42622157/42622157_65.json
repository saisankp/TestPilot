{"test_class": {"identifier": "CookbookConfigurationToscaConverterTest", "superclass": "", "interfaces": "", "fields": [], "file": "org.eclipse.winery.crawler/src/test/java/org/eclipse/winery/crawler/chefcookbooks/chefcookbook/CookbookConfigurationToscaConverterTest.java"}, "test_case": {"identifier": "createMyAppNode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void createMyAppNode() {\n        List<TNodeType> nodeTypes;\n        ChefCookbookConfiguration cookbookConfiguration = new ChefCookbookConfiguration();\n        cookbookConfiguration.setName(\"myapp\");\n        cookbookConfiguration.setVersion(\"1.0.0\");\n        cookbookConfiguration.setSupports(new Platform(\"ubuntu\", \"16.04\"));\n        cookbookConfiguration.addRequiredPackage(new ChefPackage(\"openjdk-8-jdk\"));\n        cookbookConfiguration.addRequiredPackage(new ChefPackage(\"openjdk-8-jre-headless\"));\n        cookbookConfiguration.addInstalledPackage(new ChefPackage(\"myapp\", \"1.1\"));\n        cookbookConfiguration.addInstalledPackage(new ChefPackage(\"myappaddon\", \"1.2\"));\n        nodeTypes = new CookbookConfigurationToscaConverter().convertCookbookConfigurationToToscaNode(cookbookConfiguration, 1);\n\n        assertEquals(2, nodeTypes.size());\n        assertEquals(true, nodeTypes.get(0).getCapabilityDefinitions().getCapabilityDefinition().get(0).getCapabilityType().toString().endsWith(\"myapp-1.1\"));\n        assertEquals(true, nodeTypes.get(0).getCapabilityDefinitions().getCapabilityDefinition().get(1).getCapabilityType().toString().endsWith(\"myappaddon-1.2\"));\n        assertEquals(true, nodeTypes.get(0).getRequirementDefinitions().getRequirementDefinition().get(1).getRequirementType().toString().endsWith(\"openjdk-8-jdk\"));\n        assertEquals(true, nodeTypes.get(0).getRequirementDefinitions().getRequirementDefinition().get(2).getRequirementType().toString().endsWith(\"openjdk-8-jre-headless\"));\n\n        assertEquals(true, nodeTypes.get(1).getCapabilityDefinitions().getCapabilityDefinition().get(0).getCapabilityType().toString().endsWith(\"ubuntu_16.04\" + WineryVersion.WINERY_VERSION_SEPARATOR + WineryVersion.WINERY_VERSION_PREFIX + \"1\"));\n    }", "signature": "void createMyAppNode()", "full_signature": "@Test public void createMyAppNode()", "class_method_signature": "CookbookConfigurationToscaConverterTest.createMyAppNode()", "testcase": true, "constructor": false, "invocations": ["setName", "setVersion", "setSupports", "addRequiredPackage", "addRequiredPackage", "addInstalledPackage", "addInstalledPackage", "convertCookbookConfigurationToToscaNode", "assertEquals", "size", "assertEquals", "endsWith", "toString", "getCapabilityType", "get", "getCapabilityDefinition", "getCapabilityDefinitions", "get", "assertEquals", "endsWith", "toString", "getCapabilityType", "get", "getCapabilityDefinition", "getCapabilityDefinitions", "get", "assertEquals", "endsWith", "toString", "getRequirementType", "get", "getRequirementDefinition", "getRequirementDefinitions", "get", "assertEquals", "endsWith", "toString", "getRequirementType", "get", "getRequirementDefinition", "getRequirementDefinitions", "get", "assertEquals", "endsWith", "toString", "getCapabilityType", "get", "getCapabilityDefinition", "getCapabilityDefinitions", "get"]}, "focal_class": {"identifier": "CookbookConfigurationToscaConverter", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "convertCookbookConfigurationToToscaNode", "parameters": "(ChefCookbookConfiguration cookbookConfiguration, int counter)", "modifiers": "public", "return": "List<TNodeType>", "signature": "List<TNodeType> convertCookbookConfigurationToToscaNode(ChefCookbookConfiguration cookbookConfiguration, int counter)", "full_signature": "public List<TNodeType> convertCookbookConfigurationToToscaNode(ChefCookbookConfiguration cookbookConfiguration, int counter)", "class_method_signature": "CookbookConfigurationToscaConverter.convertCookbookConfigurationToToscaNode(ChefCookbookConfiguration cookbookConfiguration, int counter)", "testcase": false, "constructor": false}, {"identifier": "saveToscaNodeType", "parameters": "(TNodeType tNodeType)", "modifiers": "public", "return": "void", "signature": "void saveToscaNodeType(TNodeType tNodeType)", "full_signature": "public void saveToscaNodeType(TNodeType tNodeType)", "class_method_signature": "CookbookConfigurationToscaConverter.saveToscaNodeType(TNodeType tNodeType)", "testcase": false, "constructor": false}, {"identifier": "convertInstalledPackagesToCapabilities", "parameters": "(LinkedHashMap<String, ChefPackage> installedPackages, String namespace)", "modifiers": "private", "return": "List<TCapabilityDefinition>", "signature": "List<TCapabilityDefinition> convertInstalledPackagesToCapabilities(LinkedHashMap<String, ChefPackage> installedPackages, String namespace)", "full_signature": "private List<TCapabilityDefinition> convertInstalledPackagesToCapabilities(LinkedHashMap<String, ChefPackage> installedPackages, String namespace)", "class_method_signature": "CookbookConfigurationToscaConverter.convertInstalledPackagesToCapabilities(LinkedHashMap<String, ChefPackage> installedPackages, String namespace)", "testcase": false, "constructor": false}, {"identifier": "convertRequiredPackagesToRequirements", "parameters": "(LinkedHashMap<String, ChefPackage> requiredPackages, String namespace)", "modifiers": "private", "return": "List<TRequirementDefinition>", "signature": "List<TRequirementDefinition> convertRequiredPackagesToRequirements(LinkedHashMap<String, ChefPackage> requiredPackages, String namespace)", "full_signature": "private List<TRequirementDefinition> convertRequiredPackagesToRequirements(LinkedHashMap<String, ChefPackage> requiredPackages, String namespace)", "class_method_signature": "CookbookConfigurationToscaConverter.convertRequiredPackagesToRequirements(LinkedHashMap<String, ChefPackage> requiredPackages, String namespace)", "testcase": false, "constructor": false}, {"identifier": "convertPackageToCapability", "parameters": "(ChefPackage chefPackage, String namespace, int counter)", "modifiers": "private", "return": "TCapabilityDefinition", "signature": "TCapabilityDefinition convertPackageToCapability(ChefPackage chefPackage, String namespace, int counter)", "full_signature": "private TCapabilityDefinition convertPackageToCapability(ChefPackage chefPackage, String namespace, int counter)", "class_method_signature": "CookbookConfigurationToscaConverter.convertPackageToCapability(ChefPackage chefPackage, String namespace, int counter)", "testcase": false, "constructor": false}, {"identifier": "convertPackageToRequirement", "parameters": "(ChefPackage chefPackage, String namespace, int counter)", "modifiers": "private", "return": "TRequirementDefinition", "signature": "TRequirementDefinition convertPackageToRequirement(ChefPackage chefPackage, String namespace, int counter)", "full_signature": "private TRequirementDefinition convertPackageToRequirement(ChefPackage chefPackage, String namespace, int counter)", "class_method_signature": "CookbookConfigurationToscaConverter.convertPackageToRequirement(ChefPackage chefPackage, String namespace, int counter)", "testcase": false, "constructor": false}, {"identifier": "convertPlatformToRequirement", "parameters": "(Platform platform, String namespace)", "modifiers": "private", "return": "TRequirementDefinition", "signature": "TRequirementDefinition convertPlatformToRequirement(Platform platform, String namespace)", "full_signature": "private TRequirementDefinition convertPlatformToRequirement(Platform platform, String namespace)", "class_method_signature": "CookbookConfigurationToscaConverter.convertPlatformToRequirement(Platform platform, String namespace)", "testcase": false, "constructor": false}, {"identifier": "convertPlatformToCapability", "parameters": "(Platform platform, String namespace)", "modifiers": "private", "return": "TCapabilityDefinition", "signature": "TCapabilityDefinition convertPlatformToCapability(Platform platform, String namespace)", "full_signature": "private TCapabilityDefinition convertPlatformToCapability(Platform platform, String namespace)", "class_method_signature": "CookbookConfigurationToscaConverter.convertPlatformToCapability(Platform platform, String namespace)", "testcase": false, "constructor": false}, {"identifier": "buildNamespaceForCookbookConfigs", "parameters": "(String cookbookName, String cookbookVersion)", "modifiers": "private", "return": "String", "signature": "String buildNamespaceForCookbookConfigs(String cookbookName, String cookbookVersion)", "full_signature": "private String buildNamespaceForCookbookConfigs(String cookbookName, String cookbookVersion)", "class_method_signature": "CookbookConfigurationToscaConverter.buildNamespaceForCookbookConfigs(String cookbookName, String cookbookVersion)", "testcase": false, "constructor": false}, {"identifier": "buildNamespaceForPlatforms", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String buildNamespaceForPlatforms()", "full_signature": "private String buildNamespaceForPlatforms()", "class_method_signature": "CookbookConfigurationToscaConverter.buildNamespaceForPlatforms()", "testcase": false, "constructor": false}, {"identifier": "convertPlatformToNodeType", "parameters": "(Platform platform, String namespace)", "modifiers": "private", "return": "TNodeType", "signature": "TNodeType convertPlatformToNodeType(Platform platform, String namespace)", "full_signature": "private TNodeType convertPlatformToNodeType(Platform platform, String namespace)", "class_method_signature": "CookbookConfigurationToscaConverter.convertPlatformToNodeType(Platform platform, String namespace)", "testcase": false, "constructor": false}], "file": "org.eclipse.winery.crawler/src/main/java/org/eclipse/winery/crawler/chefcookbooks/chefcookbook/CookbookConfigurationToscaConverter.java"}, "focal_method": {"identifier": "convertCookbookConfigurationToToscaNode", "parameters": "(ChefCookbookConfiguration cookbookConfiguration, int counter)", "modifiers": "public", "return": "List<TNodeType>", "body": "public List<TNodeType> convertCookbookConfigurationToToscaNode(ChefCookbookConfiguration cookbookConfiguration, int counter) {\n        List<TNodeType> nodeTypes = new ArrayList<>();\n        String cookbookName = cookbookConfiguration.getName();\n        String version = cookbookConfiguration.getVersion();\n\n        String namespace = buildNamespaceForCookbookConfigs(cookbookName, version);\n\n        TNodeType.Builder configurationNodeType = new TNodeType.Builder(cookbookName + WineryVersion.WINERY_VERSION_SEPARATOR + WineryVersion.WINERY_VERSION_PREFIX + counter);\n        configurationNodeType.setTargetNamespace(namespace);\n\n        TRequirementDefinition platform = convertPlatformToRequirement(cookbookConfiguration.getSupports(), namespace);\n        configurationNodeType.addRequirementDefinitions(platform);\n\n        TCapabilityDefinition installedPackage;\n        List<TCapabilityDefinition> installedPackages = convertInstalledPackagesToCapabilities(cookbookConfiguration.getInstalledPackages(), namespace);\n        for (int i = 0; i < installedPackages.size(); i++) {\n            installedPackage = installedPackages.get(i);\n            configurationNodeType.addCapabilityDefinitions(installedPackage);\n        }\n\n        TRequirementDefinition requiredPackage;\n        List<TRequirementDefinition> requiredPackages = convertRequiredPackagesToRequirements(cookbookConfiguration.getRequiredPackages(), namespace);\n        for (int i = 0; i < requiredPackages.size(); i++) {\n            requiredPackage = requiredPackages.get(i);\n            configurationNodeType.addRequirementDefinitions(requiredPackage);\n        }\n\n        TNodeType tNodeType = new TNodeType(configurationNodeType);\n\n        TNodeType platformNodeType = convertPlatformToNodeType(cookbookConfiguration.getSupports(), namespace);\n\n        nodeTypes.add(tNodeType);\n        nodeTypes.add(platformNodeType);\n        return nodeTypes;\n    }", "signature": "List<TNodeType> convertCookbookConfigurationToToscaNode(ChefCookbookConfiguration cookbookConfiguration, int counter)", "full_signature": "public List<TNodeType> convertCookbookConfigurationToToscaNode(ChefCookbookConfiguration cookbookConfiguration, int counter)", "class_method_signature": "CookbookConfigurationToscaConverter.convertCookbookConfigurationToToscaNode(ChefCookbookConfiguration cookbookConfiguration, int counter)", "testcase": false, "constructor": false, "invocations": ["getName", "getVersion", "buildNamespaceForCookbookConfigs", "setTargetNamespace", "convertPlatformToRequirement", "getSupports", "addRequirementDefinitions", "convertInstalledPackagesToCapabilities", "getInstalledPackages", "size", "get", "addCapabilityDefinitions", "convertRequiredPackagesToRequirements", "getRequiredPackages", "size", "get", "addRequirementDefinitions", "convertPlatformToNodeType", "getSupports", "add", "add"]}, "repository": {"repo_id": 42622157, "url": "https://github.com/eclipse/winery", "stars": 34, "created": "9/17/2015 12:31:44 AM +00:00", "updates": "2020-01-22T09:32:00+00:00", "fork": "False", "license": "licensed"}}