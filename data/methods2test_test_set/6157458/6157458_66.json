{"test_class": {"identifier": "LegacyExtensionFinderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@TempDir\n    Path pluginsPath;", "modifier": "@TempDir", "type": "Path", "declarator": "pluginsPath", "var_name": "pluginsPath"}], "file": "pf4j/src/test/java/org/pf4j/LegacyExtensionFinderTest.java"}, "test_case": {"identifier": "shouldUnlockFileAfterReadingExtensionsFromPlugin", "parameters": "()", "modifiers": "@Test @EnabledOnOs(WINDOWS) public", "return": "void", "body": "@Test\n    @EnabledOnOs(WINDOWS)\n    public void shouldUnlockFileAfterReadingExtensionsFromPlugin() throws Exception {\n        PluginJar pluginJar = new PluginJar.Builder(pluginsPath.resolve(\"test-plugin.jar\"), \"test-plugin\")\n                .pluginClass(TestPlugin.class.getName())\n                .pluginVersion(\"1.2.3\")\n                .extension(TestExtension.class.getName())\n                .build();\n\n        assertTrue(pluginJar.file().exists());\n\n        PluginManager pluginManager = new JarPluginManager(pluginsPath);\n        pluginManager.loadPlugins();\n\n        assertEquals(1, pluginManager.getPlugins().size());\n\n        LegacyExtensionFinder extensionFinder = new LegacyExtensionFinder(pluginManager);\n        Map<String, Set<String>> pluginsStorages = extensionFinder.readPluginsStorages();\n        assertNotNull(pluginsStorages);\n\n        pluginManager.unloadPlugin(pluginJar.pluginId());\n        boolean fileDeleted = pluginJar.file().delete();\n\n        Set<String> pluginStorages = pluginsStorages.get(pluginJar.pluginId());\n        assertNotNull(pluginStorages);\n        assertEquals(1, pluginStorages.size());\n        assertThat(pluginStorages, contains(TestExtension.class.getName()));\n        assertTrue(fileDeleted);\n        assertFalse(pluginJar.file().exists());\n    }", "signature": "void shouldUnlockFileAfterReadingExtensionsFromPlugin()", "full_signature": "@Test @EnabledOnOs(WINDOWS) public void shouldUnlockFileAfterReadingExtensionsFromPlugin()", "class_method_signature": "LegacyExtensionFinderTest.shouldUnlockFileAfterReadingExtensionsFromPlugin()", "testcase": true, "constructor": false, "invocations": ["build", "extension", "pluginVersion", "pluginClass", "resolve", "getName", "getName", "assertTrue", "exists", "file", "loadPlugins", "assertEquals", "size", "getPlugins", "readPluginsStorages", "assertNotNull", "unloadPlugin", "pluginId", "delete", "file", "get", "pluginId", "assertNotNull", "assertEquals", "size", "assertThat", "contains", "getName", "assertTrue", "assertFalse", "exists", "file"]}, "focal_class": {"identifier": "LegacyExtensionFinder", "superclass": "extends AbstractExtensionFinder", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(LegacyExtensionFinder.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(LegacyExtensionFinder.class)", "var_name": "log"}, {"original_string": "public static final String EXTENSIONS_RESOURCE = LegacyExtensionStorage.EXTENSIONS_RESOURCE;", "modifier": "public static final", "type": "String", "declarator": "EXTENSIONS_RESOURCE = LegacyExtensionStorage.EXTENSIONS_RESOURCE", "var_name": "EXTENSIONS_RESOURCE"}], "methods": [{"identifier": "LegacyExtensionFinder", "parameters": "(PluginManager pluginManager)", "modifiers": "public", "return": "", "signature": " LegacyExtensionFinder(PluginManager pluginManager)", "full_signature": "public  LegacyExtensionFinder(PluginManager pluginManager)", "class_method_signature": "LegacyExtensionFinder.LegacyExtensionFinder(PluginManager pluginManager)", "testcase": false, "constructor": true}, {"identifier": "readClasspathStorages", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, Set<String>>", "signature": "Map<String, Set<String>> readClasspathStorages()", "full_signature": "@Override public Map<String, Set<String>> readClasspathStorages()", "class_method_signature": "LegacyExtensionFinder.readClasspathStorages()", "testcase": false, "constructor": false}, {"identifier": "readPluginsStorages", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, Set<String>>", "signature": "Map<String, Set<String>> readPluginsStorages()", "full_signature": "@Override public Map<String, Set<String>> readPluginsStorages()", "class_method_signature": "LegacyExtensionFinder.readPluginsStorages()", "testcase": false, "constructor": false}, {"identifier": "collectExtensions", "parameters": "(Enumeration<URL> urls, Set<String> bucket)", "modifiers": "private", "return": "void", "signature": "void collectExtensions(Enumeration<URL> urls, Set<String> bucket)", "full_signature": "private void collectExtensions(Enumeration<URL> urls, Set<String> bucket)", "class_method_signature": "LegacyExtensionFinder.collectExtensions(Enumeration<URL> urls, Set<String> bucket)", "testcase": false, "constructor": false}, {"identifier": "collectExtensions", "parameters": "(InputStream inputStream, Set<String> bucket)", "modifiers": "private", "return": "void", "signature": "void collectExtensions(InputStream inputStream, Set<String> bucket)", "full_signature": "private void collectExtensions(InputStream inputStream, Set<String> bucket)", "class_method_signature": "LegacyExtensionFinder.collectExtensions(InputStream inputStream, Set<String> bucket)", "testcase": false, "constructor": false}], "file": "pf4j/src/main/java/org/pf4j/LegacyExtensionFinder.java"}, "focal_method": {"identifier": "readPluginsStorages", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, Set<String>>", "body": "@Override\n    public Map<String, Set<String>> readPluginsStorages() {\n        log.debug(\"Reading extensions storages from plugins\");\n        Map<String, Set<String>> result = new LinkedHashMap<>();\n\n        List<PluginWrapper> plugins = pluginManager.getPlugins();\n        for (PluginWrapper plugin : plugins) {\n            String pluginId = plugin.getDescriptor().getPluginId();\n            log.debug(\"Reading extensions storage from plugin '{}'\", pluginId);\n            Set<String> bucket = new HashSet<>();\n\n            try {\n                log.debug(\"Read '{}'\", EXTENSIONS_RESOURCE);\n                ClassLoader pluginClassLoader = plugin.getPluginClassLoader();\n                try (InputStream resourceStream = pluginClassLoader.getResourceAsStream(EXTENSIONS_RESOURCE)) {\n                    if (resourceStream == null) {\n                        log.debug(\"Cannot find '{}'\", EXTENSIONS_RESOURCE);\n                    } else {\n                        collectExtensions(resourceStream, bucket);\n                    }\n                }\n\n                debugExtensions(bucket);\n\n                result.put(pluginId, bucket);\n            } catch (IOException e) {\n                log.error(e.getMessage(), e);\n            }\n        }\n\n        return result;\n    }", "signature": "Map<String, Set<String>> readPluginsStorages()", "full_signature": "@Override public Map<String, Set<String>> readPluginsStorages()", "class_method_signature": "LegacyExtensionFinder.readPluginsStorages()", "testcase": false, "constructor": false, "invocations": ["debug", "getPlugins", "getPluginId", "getDescriptor", "debug", "debug", "getPluginClassLoader", "getResourceAsStream", "debug", "collectExtensions", "debugExtensions", "put", "error", "getMessage"]}, "repository": {"repo_id": 6157458, "url": "https://github.com/pf4j/pf4j", "stars": 1034, "created": "10/10/2012 1:10:32 PM +00:00", "updates": "2020-01-20T02:39:14+00:00", "fork": "False", "license": "licensed"}}