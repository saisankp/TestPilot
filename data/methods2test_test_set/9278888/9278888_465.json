{"test_class": {"identifier": "ErrorParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock SpanCustomizer customizer;", "modifier": "@Mock", "type": "SpanCustomizer", "declarator": "customizer", "var_name": "customizer"}, {"original_string": "@Mock ScopedSpan scopedSpan;", "modifier": "@Mock", "type": "ScopedSpan", "declarator": "scopedSpan", "var_name": "scopedSpan"}, {"original_string": "ErrorParser parser = new ErrorParser();", "modifier": "", "type": "ErrorParser", "declarator": "parser = new ErrorParser()", "var_name": "parser"}, {"original_string": "ErrorParser subclassErrorParser = new ErrorParser() {\n    @Override protected void error(Throwable error, Object span) {\n      tag(span, \"noterror\", \"the cake is fine\");\n    }\n  };", "modifier": "", "type": "ErrorParser", "declarator": "subclassErrorParser = new ErrorParser() {\n    @Override protected void error(Throwable error, Object span) {\n      tag(span, \"noterror\", \"the cake is fine\");\n    }\n  }", "var_name": "subclassErrorParser"}], "file": "brave/src/test/java/brave/ErrorParserTest.java"}, "test_case": {"identifier": "error_customizer_asTag", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void error_customizer_asTag() {\n    parser.tag(new RuntimeException(\"this cake is a lie\"), customizer);\n\n    verify(customizer).tag(\"error\", \"this cake is a lie\");\n  }", "signature": "void error_customizer_asTag()", "full_signature": "@Test public void error_customizer_asTag()", "class_method_signature": "ErrorParserTest.error_customizer_asTag()", "testcase": true, "constructor": false, "invocations": ["tag", "tag", "verify"]}, "focal_class": {"identifier": "ErrorParser", "superclass": "extends Tag<Throwable>", "interfaces": "", "fields": [{"original_string": "public static final ErrorParser NOOP = new ErrorParser() {\n    @Override protected void error(Throwable error, Object customizer) {\n    }\n  };", "modifier": "public static final", "type": "ErrorParser", "declarator": "NOOP = new ErrorParser() {\n    @Override protected void error(Throwable error, Object customizer) {\n    }\n  }", "var_name": "NOOP"}], "methods": [{"identifier": "ErrorParser", "parameters": "()", "modifiers": "public", "return": "", "signature": " ErrorParser()", "full_signature": "public  ErrorParser()", "class_method_signature": "ErrorParser.ErrorParser()", "testcase": false, "constructor": true}, {"identifier": "error", "parameters": "(Throwable error, SpanCustomizer customizer)", "modifiers": "public final", "return": "void", "signature": "void error(Throwable error, SpanCustomizer customizer)", "full_signature": "public final void error(Throwable error, SpanCustomizer customizer)", "class_method_signature": "ErrorParser.error(Throwable error, SpanCustomizer customizer)", "testcase": false, "constructor": false}, {"identifier": "error", "parameters": "(Throwable error, MutableSpan span)", "modifiers": "public final", "return": "void", "signature": "void error(Throwable error, MutableSpan span)", "full_signature": "public final void error(Throwable error, MutableSpan span)", "class_method_signature": "ErrorParser.error(Throwable error, MutableSpan span)", "testcase": false, "constructor": false}, {"identifier": "error", "parameters": "(Throwable error, Object span)", "modifiers": "protected", "return": "void", "signature": "void error(Throwable error, Object span)", "full_signature": "protected void error(Throwable error, Object span)", "class_method_signature": "ErrorParser.error(Throwable error, Object span)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(Throwable error)", "modifiers": "static", "return": "String", "signature": "String parse(Throwable error)", "full_signature": "static String parse(Throwable error)", "class_method_signature": "ErrorParser.parse(Throwable error)", "testcase": false, "constructor": false}, {"identifier": "annotate", "parameters": "(Object span, String value)", "modifiers": "protected final", "return": "void", "signature": "void annotate(Object span, String value)", "full_signature": "protected final void annotate(Object span, String value)", "class_method_signature": "ErrorParser.annotate(Object span, String value)", "testcase": false, "constructor": false}, {"identifier": "tag", "parameters": "(Object span, String key, String message)", "modifiers": "protected final", "return": "void", "signature": "void tag(Object span, String key, String message)", "full_signature": "protected final void tag(Object span, String key, String message)", "class_method_signature": "ErrorParser.tag(Object span, String key, String message)", "testcase": false, "constructor": false}, {"identifier": "key", "parameters": "(Throwable input)", "modifiers": "@Override protected final", "return": "String", "signature": "String key(Throwable input)", "full_signature": "@Override protected final String key(Throwable input)", "class_method_signature": "ErrorParser.key(Throwable input)", "testcase": false, "constructor": false}, {"identifier": "parseValue", "parameters": "(Throwable input, TraceContext context)", "modifiers": "@Override protected final", "return": "String", "signature": "String parseValue(Throwable input, TraceContext context)", "full_signature": "@Override protected final String parseValue(Throwable input, TraceContext context)", "class_method_signature": "ErrorParser.parseValue(Throwable input, TraceContext context)", "testcase": false, "constructor": false}], "file": "brave/src/main/java/brave/ErrorParser.java"}, "focal_method": {"identifier": "tag", "parameters": "(Object span, String key, String message)", "modifiers": "protected final", "return": "void", "body": "protected final void tag(Object span, String key, String message) {\n    if (span instanceof SpanCustomizer) {\n      ((SpanCustomizer) span).tag(key, message);\n    } else if (span instanceof MutableSpan) {\n      ((MutableSpan) span).tag(key, message);\n    } else if (span instanceof KeyValueAdapter) {\n      KeyValueAdapter keyValueAdapter = (KeyValueAdapter) span;\n      keyValueAdapter.key = key;\n      keyValueAdapter.value = message;\n    }\n  }", "signature": "void tag(Object span, String key, String message)", "full_signature": "protected final void tag(Object span, String key, String message)", "class_method_signature": "ErrorParser.tag(Object span, String key, String message)", "testcase": false, "constructor": false, "invocations": ["tag", "tag"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}