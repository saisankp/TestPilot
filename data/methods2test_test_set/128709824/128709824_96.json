{"test_class": {"identifier": "ConfigValueHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/api/src/test/java/com/alipay/sofa/rpc/config/ConfigValueHelperTest.java"}, "test_case": {"identifier": "assertFalse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void assertFalse() {\n        Assert.assertTrue(ConfigValueHelper.assertFalse(null));\n        Assert.assertTrue(ConfigValueHelper.assertFalse(\"\"));\n        Assert.assertTrue(ConfigValueHelper.assertFalse(\"fALse\"));\n        Assert.assertTrue(ConfigValueHelper.assertFalse(\"null\"));\n        Assert.assertFalse(ConfigValueHelper.assertFalse(\"xasda\"));\n    }", "signature": "void assertFalse()", "full_signature": "@Test public void assertFalse()", "class_method_signature": "ConfigValueHelperTest.assertFalse()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "assertFalse", "assertTrue", "assertFalse", "assertTrue", "assertFalse", "assertTrue", "assertFalse", "assertFalse", "assertFalse"]}, "focal_class": {"identifier": "ConfigValueHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected final static Pattern NORMAL                 = Pattern.compile(\"^[a-zA-Z0-9\\\\-\\\\_\\\\.]+$\");", "modifier": "protected final static", "type": "Pattern", "declarator": "NORMAL                 = Pattern.compile(\"^[a-zA-Z0-9\\\\-\\\\_\\\\.]+$\")", "var_name": "NORMAL"}, {"original_string": "protected final static Pattern NORMAL_COMMA           = Pattern.compile(\"^[a-zA-Z0-9\\\\-\\\\_\\\\.,]+$\");", "modifier": "protected final static", "type": "Pattern", "declarator": "NORMAL_COMMA           = Pattern.compile(\"^[a-zA-Z0-9\\\\-\\\\_\\\\.,]+$\")", "var_name": "NORMAL_COMMA"}, {"original_string": "protected final static Pattern NORMAL_COLON           = Pattern.compile(\"^[a-zA-Z0-9\\\\-\\\\_\\\\.:]+$\");", "modifier": "protected final static", "type": "Pattern", "declarator": "NORMAL_COLON           = Pattern.compile(\"^[a-zA-Z0-9\\\\-\\\\_\\\\.:]+$\")", "var_name": "NORMAL_COLON"}, {"original_string": "protected final static Pattern NORMAL_SEMICOLON       = Pattern.compile(\"^[a-zA-Z0-9\\\\-\\\\_\\\\.;]+$\");", "modifier": "protected final static", "type": "Pattern", "declarator": "NORMAL_SEMICOLON       = Pattern.compile(\"^[a-zA-Z0-9\\\\-\\\\_\\\\.;]+$\")", "var_name": "NORMAL_SEMICOLON"}, {"original_string": "protected final static Pattern NORMAL_COMMA_COLON     = Pattern.compile(\"^[a-zA-Z0-9\\\\-\\\\_\\\\.,:]+$\");", "modifier": "protected final static", "type": "Pattern", "declarator": "NORMAL_COMMA_COLON     = Pattern.compile(\"^[a-zA-Z0-9\\\\-\\\\_\\\\.,:]+$\")", "var_name": "NORMAL_COMMA_COLON"}, {"original_string": "protected final static Pattern NORMAL_SEMICOLON_COLON = Pattern.compile(\"^[a-zA-Z0-9\\\\-\\\\_\\\\.;:]+$\");", "modifier": "protected final static", "type": "Pattern", "declarator": "NORMAL_SEMICOLON_COLON = Pattern.compile(\"^[a-zA-Z0-9\\\\-\\\\_\\\\.;:]+$\")", "var_name": "NORMAL_SEMICOLON_COLON"}], "methods": [{"identifier": "assertFalse", "parameters": "(String string)", "modifiers": "protected static", "return": "boolean", "signature": "boolean assertFalse(String string)", "full_signature": "protected static boolean assertFalse(String string)", "class_method_signature": "ConfigValueHelper.assertFalse(String string)", "testcase": false, "constructor": false}, {"identifier": "match", "parameters": "(Pattern pattern, String configValue)", "modifiers": "protected static", "return": "boolean", "signature": "boolean match(Pattern pattern, String configValue)", "full_signature": "protected static boolean match(Pattern pattern, String configValue)", "class_method_signature": "ConfigValueHelper.match(Pattern pattern, String configValue)", "testcase": false, "constructor": false}, {"identifier": "checkNormal", "parameters": "(String configKey, String configValue)", "modifiers": "protected static", "return": "void", "signature": "void checkNormal(String configKey, String configValue)", "full_signature": "protected static void checkNormal(String configKey, String configValue)", "class_method_signature": "ConfigValueHelper.checkNormal(String configKey, String configValue)", "testcase": false, "constructor": false}, {"identifier": "checkNormalWithComma", "parameters": "(String configKey, String configValue)", "modifiers": "protected static", "return": "void", "signature": "void checkNormalWithComma(String configKey, String configValue)", "full_signature": "protected static void checkNormalWithComma(String configKey, String configValue)", "class_method_signature": "ConfigValueHelper.checkNormalWithComma(String configKey, String configValue)", "testcase": false, "constructor": false}, {"identifier": "checkNormalWithColon", "parameters": "(String configKey, String configValue)", "modifiers": "protected static", "return": "void", "signature": "void checkNormalWithColon(String configKey, String configValue)", "full_signature": "protected static void checkNormalWithColon(String configKey, String configValue)", "class_method_signature": "ConfigValueHelper.checkNormalWithColon(String configKey, String configValue)", "testcase": false, "constructor": false}, {"identifier": "checkNormalWithCommaColon", "parameters": "(String configKey, String configValue)", "modifiers": "protected static", "return": "void", "signature": "void checkNormalWithCommaColon(String configKey, String configValue)", "full_signature": "protected static void checkNormalWithCommaColon(String configKey, String configValue)", "class_method_signature": "ConfigValueHelper.checkNormalWithCommaColon(String configKey, String configValue)", "testcase": false, "constructor": false}, {"identifier": "checkPattern", "parameters": "(String configKey, String configValue, Pattern pattern, String message)", "modifiers": "protected static", "return": "void", "signature": "void checkPattern(String configKey, String configValue, Pattern pattern, String message)", "full_signature": "protected static void checkPattern(String configKey, String configValue, Pattern pattern, String message)", "class_method_signature": "ConfigValueHelper.checkPattern(String configKey, String configValue, Pattern pattern, String message)", "testcase": false, "constructor": false}, {"identifier": "checkPositiveInteger", "parameters": "(String configKey, int configValue)", "modifiers": "protected static", "return": "void", "signature": "void checkPositiveInteger(String configKey, int configValue)", "full_signature": "protected static void checkPositiveInteger(String configKey, int configValue)", "class_method_signature": "ConfigValueHelper.checkPositiveInteger(String configKey, int configValue)", "testcase": false, "constructor": false}, {"identifier": "checkNotNegativeInteger", "parameters": "(String configKey, int configValue)", "modifiers": "protected static", "return": "void", "signature": "void checkNotNegativeInteger(String configKey, int configValue)", "full_signature": "protected static void checkNotNegativeInteger(String configKey, int configValue)", "class_method_signature": "ConfigValueHelper.checkNotNegativeInteger(String configKey, int configValue)", "testcase": false, "constructor": false}], "file": "core/api/src/main/java/com/alipay/sofa/rpc/config/ConfigValueHelper.java"}, "focal_method": {"identifier": "assertFalse", "parameters": "(String string)", "modifiers": "protected static", "return": "boolean", "body": "protected static boolean assertFalse(String string) {\n        return string == null\n            || StringUtils.EMPTY.equals(string)\n            || StringUtils.FALSE.equalsIgnoreCase(string)\n            || StringUtils.NULL.equals(string);\n    }", "signature": "boolean assertFalse(String string)", "full_signature": "protected static boolean assertFalse(String string)", "class_method_signature": "ConfigValueHelper.assertFalse(String string)", "testcase": false, "constructor": false, "invocations": ["equals", "equalsIgnoreCase", "equals"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}