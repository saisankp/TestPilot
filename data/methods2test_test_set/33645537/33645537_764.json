{"test_class": {"identifier": "IndexedRingBufferTest", "superclass": "", "interfaces": "", "fields": [], "file": "zava/src/test/java/rx/internal/util/IndexedRingBufferTest.java"}, "test_case": {"identifier": "add", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void add() {\n        @SuppressWarnings(\"unchecked\")\n        IndexedRingBuffer<LSubscription> list = IndexedRingBuffer.getInstance();\n        list.add(new LSubscription(1));\n        list.add(new LSubscription(2));\n        final AtomicInteger c = new AtomicInteger();\n\n        list.forEach(newCounterAction(c));\n        assertEquals(2, c.get());\n    }", "signature": "void add()", "full_signature": "@Test public void add()", "class_method_signature": "IndexedRingBufferTest.add()", "testcase": true, "constructor": false, "invocations": ["getInstance", "add", "add", "forEach", "newCounterAction", "assertEquals", "get"]}, "focal_class": {"identifier": "IndexedRingBuffer", "superclass": "", "interfaces": "implements Subscription", "fields": [{"original_string": "private static final ObjectPool<IndexedRingBuffer> POOL = new ObjectPool<IndexedRingBuffer>() {\n\n        @Override\n        protected IndexedRingBuffer createObject() {\n            return new IndexedRingBuffer();\n        }\n\n    };", "modifier": "private static final", "type": "ObjectPool<IndexedRingBuffer>", "declarator": "POOL = new ObjectPool<IndexedRingBuffer>() {\n\n        @Override\n        protected IndexedRingBuffer createObject() {\n            return new IndexedRingBuffer();\n        }\n\n    }", "var_name": "POOL"}, {"original_string": "private final ElementSection<E> elements = new ElementSection<E>();", "modifier": "private final", "type": "ElementSection<E>", "declarator": "elements = new ElementSection<E>()", "var_name": "elements"}, {"original_string": "private final IndexSection removed = new IndexSection();", "modifier": "private final", "type": "IndexSection", "declarator": "removed = new IndexSection()", "var_name": "removed"}, {"original_string": "final AtomicInteger index = new AtomicInteger();", "modifier": "final", "type": "AtomicInteger", "declarator": "index = new AtomicInteger()", "var_name": "index"}, {"original_string": "final AtomicInteger removedIndex = new AtomicInteger();", "modifier": "final", "type": "AtomicInteger", "declarator": "removedIndex = new AtomicInteger()", "var_name": "removedIndex"}, {"original_string": "static int _size = 256;", "modifier": "static", "type": "int", "declarator": "_size = 256", "var_name": "_size"}, {"original_string": "static final int SIZE = _size;", "modifier": "static final", "type": "int", "declarator": "SIZE = _size", "var_name": "SIZE"}], "methods": [{"identifier": "getInstance", "parameters": "()", "modifiers": "public final static", "return": "IndexedRingBuffer", "signature": "IndexedRingBuffer getInstance()", "full_signature": "public final static IndexedRingBuffer getInstance()", "class_method_signature": "IndexedRingBuffer.getInstance()", "testcase": false, "constructor": false}, {"identifier": "releaseToPool", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void releaseToPool()", "full_signature": "public void releaseToPool()", "class_method_signature": "IndexedRingBuffer.releaseToPool()", "testcase": false, "constructor": false}, {"identifier": "unsubscribe", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void unsubscribe()", "full_signature": "@Override public void unsubscribe()", "class_method_signature": "IndexedRingBuffer.unsubscribe()", "testcase": false, "constructor": false}, {"identifier": "IndexedRingBuffer", "parameters": "()", "modifiers": "private", "return": "", "signature": " IndexedRingBuffer()", "full_signature": "private  IndexedRingBuffer()", "class_method_signature": "IndexedRingBuffer.IndexedRingBuffer()", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(E e)", "modifiers": "public", "return": "int", "signature": "int add(E e)", "full_signature": "public int add(E e)", "class_method_signature": "IndexedRingBuffer.add(E e)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(int index)", "modifiers": "public", "return": "E", "signature": "E remove(int index)", "full_signature": "public E remove(int index)", "class_method_signature": "IndexedRingBuffer.remove(int index)", "testcase": false, "constructor": false}, {"identifier": "getIndexSection", "parameters": "(int index)", "modifiers": "private", "return": "IndexSection", "signature": "IndexSection getIndexSection(int index)", "full_signature": "private IndexSection getIndexSection(int index)", "class_method_signature": "IndexedRingBuffer.getIndexSection(int index)", "testcase": false, "constructor": false}, {"identifier": "getElementSection", "parameters": "(int index)", "modifiers": "private", "return": "ElementSection<E>", "signature": "ElementSection<E> getElementSection(int index)", "full_signature": "private ElementSection<E> getElementSection(int index)", "class_method_signature": "IndexedRingBuffer.getElementSection(int index)", "testcase": false, "constructor": false}, {"identifier": "getIndexForAdd", "parameters": "()", "modifiers": "private synchronized", "return": "int", "signature": "int getIndexForAdd()", "full_signature": "private synchronized int getIndexForAdd()", "class_method_signature": "IndexedRingBuffer.getIndexForAdd()", "testcase": false, "constructor": false}, {"identifier": "getIndexFromPreviouslyRemoved", "parameters": "()", "modifiers": "private synchronized", "return": "int", "signature": "int getIndexFromPreviouslyRemoved()", "full_signature": "private synchronized int getIndexFromPreviouslyRemoved()", "class_method_signature": "IndexedRingBuffer.getIndexFromPreviouslyRemoved()", "testcase": false, "constructor": false}, {"identifier": "pushRemovedIndex", "parameters": "(int elementIndex)", "modifiers": "private synchronized", "return": "void", "signature": "void pushRemovedIndex(int elementIndex)", "full_signature": "private synchronized void pushRemovedIndex(int elementIndex)", "class_method_signature": "IndexedRingBuffer.pushRemovedIndex(int elementIndex)", "testcase": false, "constructor": false}, {"identifier": "isUnsubscribed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isUnsubscribed()", "full_signature": "@Override public boolean isUnsubscribed()", "class_method_signature": "IndexedRingBuffer.isUnsubscribed()", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(Func1<? super E, Boolean> action)", "modifiers": "public", "return": "int", "signature": "int forEach(Func1<? super E, Boolean> action)", "full_signature": "public int forEach(Func1<? super E, Boolean> action)", "class_method_signature": "IndexedRingBuffer.forEach(Func1<? super E, Boolean> action)", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(Func1<? super E, Boolean> action, int startIndex)", "modifiers": "public", "return": "int", "signature": "int forEach(Func1<? super E, Boolean> action, int startIndex)", "full_signature": "public int forEach(Func1<? super E, Boolean> action, int startIndex)", "class_method_signature": "IndexedRingBuffer.forEach(Func1<? super E, Boolean> action, int startIndex)", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(Func1<? super E, Boolean> action, int startIndex, int endIndex)", "modifiers": "private", "return": "int", "signature": "int forEach(Func1<? super E, Boolean> action, int startIndex, int endIndex)", "full_signature": "private int forEach(Func1<? super E, Boolean> action, int startIndex, int endIndex)", "class_method_signature": "IndexedRingBuffer.forEach(Func1<? super E, Boolean> action, int startIndex, int endIndex)", "testcase": false, "constructor": false}], "file": "zava/src/main/java/rx/internal/util/IndexedRingBuffer.java"}, "focal_method": {"identifier": "add", "parameters": "(E e)", "modifiers": "public", "return": "int", "body": "public int add(E e) {\n        int i = getIndexForAdd();\n        if (i < SIZE) {\n            // fast-path when we are in the first section\n            elements.array.set(i, e);\n            return i;\n        } else {\n            int sectionIndex = i % SIZE;\n            getElementSection(i).array.set(sectionIndex, e);\n            return i;\n        }\n    }", "signature": "int add(E e)", "full_signature": "public int add(E e)", "class_method_signature": "IndexedRingBuffer.add(E e)", "testcase": false, "constructor": false, "invocations": ["getIndexForAdd", "set", "set", "getElementSection"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}