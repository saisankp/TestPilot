{"test_class": {"identifier": "GaussianNaiveBayesModelTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/ml/src/test/java/org/apache/ignite/ml/naivebayes/gaussian/GaussianNaiveBayesModelTest.java"}, "test_case": {"identifier": "testPredictWithTwoClasses", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPredictWithTwoClasses() {\n        double first = 1;\n        double second = 2;\n        double[][] means = new double[][] {\n            {5.855, 176.25, 11.25},\n            {5.4175, 132.5, 7.5},\n        };\n        double[][] variances = new double[][] {\n            {3.5033E-2, 1.2292E2, 9.1667E-1},\n            {9.7225E-2, 5.5833E2, 1.6667},\n        };\n        double[] probabilities = new double[] {.5, .5};\n        GaussianNaiveBayesModel mdl = new GaussianNaiveBayesModel(means, variances, probabilities, new double[] {first, second}, null);\n        Vector observation = VectorUtils.of(6, 130, 8);\n\n        Assert.assertEquals(second, mdl.predict(observation), 0.0001);\n    }", "signature": "void testPredictWithTwoClasses()", "full_signature": "@Test public void testPredictWithTwoClasses()", "class_method_signature": "GaussianNaiveBayesModelTest.testPredictWithTwoClasses()", "testcase": true, "constructor": false, "invocations": ["of", "assertEquals", "predict"]}, "focal_class": {"identifier": "GaussianNaiveBayesModel", "superclass": "", "interfaces": "implements IgniteModel<Vector, Double>, Exportable<GaussianNaiveBayesModel>, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = -127386523291350345L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -127386523291350345L", "var_name": "serialVersionUID"}, {"original_string": "private final double[][] means;", "modifier": "private final", "type": "double[][]", "declarator": "means", "var_name": "means"}, {"original_string": "private final double[][] variances;", "modifier": "private final", "type": "double[][]", "declarator": "variances", "var_name": "variances"}, {"original_string": "private final double[] classProbabilities;", "modifier": "private final", "type": "double[]", "declarator": "classProbabilities", "var_name": "classProbabilities"}, {"original_string": "private final double[] labels;", "modifier": "private final", "type": "double[]", "declarator": "labels", "var_name": "labels"}, {"original_string": "private final GaussianNaiveBayesSumsHolder sumsHolder;", "modifier": "private final", "type": "GaussianNaiveBayesSumsHolder", "declarator": "sumsHolder", "var_name": "sumsHolder"}], "methods": [{"identifier": "GaussianNaiveBayesModel", "parameters": "(double[][] means, double[][] variances,\n        double[] classProbabilities, double[] labels, GaussianNaiveBayesSumsHolder sumsHolder)", "modifiers": "public", "return": "", "signature": " GaussianNaiveBayesModel(double[][] means, double[][] variances,\n        double[] classProbabilities, double[] labels, GaussianNaiveBayesSumsHolder sumsHolder)", "full_signature": "public  GaussianNaiveBayesModel(double[][] means, double[][] variances,\n        double[] classProbabilities, double[] labels, GaussianNaiveBayesSumsHolder sumsHolder)", "class_method_signature": "GaussianNaiveBayesModel.GaussianNaiveBayesModel(double[][] means, double[][] variances,\n        double[] classProbabilities, double[] labels, GaussianNaiveBayesSumsHolder sumsHolder)", "testcase": false, "constructor": true}, {"identifier": "saveModel", "parameters": "(Exporter<GaussianNaiveBayesModel, P> exporter, P path)", "modifiers": "@Override public", "return": "void", "signature": "void saveModel(Exporter<GaussianNaiveBayesModel, P> exporter, P path)", "full_signature": "@Override public void saveModel(Exporter<GaussianNaiveBayesModel, P> exporter, P path)", "class_method_signature": "GaussianNaiveBayesModel.saveModel(Exporter<GaussianNaiveBayesModel, P> exporter, P path)", "testcase": false, "constructor": false}, {"identifier": "predict", "parameters": "(Vector vector)", "modifiers": "@Override public", "return": "Double", "signature": "Double predict(Vector vector)", "full_signature": "@Override public Double predict(Vector vector)", "class_method_signature": "GaussianNaiveBayesModel.predict(Vector vector)", "testcase": false, "constructor": false}, {"identifier": "getMeans", "parameters": "()", "modifiers": "public", "return": "double[][]", "signature": "double[][] getMeans()", "full_signature": "public double[][] getMeans()", "class_method_signature": "GaussianNaiveBayesModel.getMeans()", "testcase": false, "constructor": false}, {"identifier": "getVariances", "parameters": "()", "modifiers": "public", "return": "double[][]", "signature": "double[][] getVariances()", "full_signature": "public double[][] getVariances()", "class_method_signature": "GaussianNaiveBayesModel.getVariances()", "testcase": false, "constructor": false}, {"identifier": "getClassProbabilities", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getClassProbabilities()", "full_signature": "public double[] getClassProbabilities()", "class_method_signature": "GaussianNaiveBayesModel.getClassProbabilities()", "testcase": false, "constructor": false}, {"identifier": "getSumsHolder", "parameters": "()", "modifiers": "public", "return": "GaussianNaiveBayesSumsHolder", "signature": "GaussianNaiveBayesSumsHolder getSumsHolder()", "full_signature": "public GaussianNaiveBayesSumsHolder getSumsHolder()", "class_method_signature": "GaussianNaiveBayesModel.getSumsHolder()", "testcase": false, "constructor": false}, {"identifier": "gauss", "parameters": "(double x, double mean, double variance)", "modifiers": "private", "return": "double", "signature": "double gauss(double x, double mean, double variance)", "full_signature": "private double gauss(double x, double mean, double variance)", "class_method_signature": "GaussianNaiveBayesModel.gauss(double x, double mean, double variance)", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/naivebayes/gaussian/GaussianNaiveBayesModel.java"}, "focal_method": {"identifier": "predict", "parameters": "(Vector vector)", "modifiers": "@Override public", "return": "Double", "body": "@Override public Double predict(Vector vector) {\n        int k = classProbabilities.length;\n\n        double maxProbability = .0;\n        int max = 0;\n\n        for (int i = 0; i < k; i++) {\n            double p = classProbabilities[i];\n            for (int j = 0; j < vector.size(); j++) {\n                double x = vector.get(j);\n                double g = gauss(x, means[i][j], variances[i][j]);\n                p *= g;\n            }\n            if (p > maxProbability) {\n                max = i;\n                maxProbability = p;\n            }\n        }\n        return labels[max];\n    }", "signature": "Double predict(Vector vector)", "full_signature": "@Override public Double predict(Vector vector)", "class_method_signature": "GaussianNaiveBayesModel.predict(Vector vector)", "testcase": false, "constructor": false, "invocations": ["size", "get", "gauss"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}