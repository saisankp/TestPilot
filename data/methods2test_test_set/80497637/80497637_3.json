{"test_class": {"identifier": "UCSClientTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n\tpublic MockWebServer mockServer = new MockWebServer();", "modifier": "@Rule\n\tpublic", "type": "MockWebServer", "declarator": "mockServer = new MockWebServer()", "var_name": "mockServer"}, {"original_string": "UCSClient ucs;", "modifier": "", "type": "UCSClient", "declarator": "ucs", "var_name": "ucs"}, {"original_string": "String cookie;", "modifier": "", "type": "String", "declarator": "cookie", "var_name": "cookie"}], "file": "mercator-ucs/src/test/java/org/lendingclub/mercator/ucs/UCSClientTest.java"}, "test_case": {"identifier": "testDummyExchange", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testDummyExchange() {\n\t\tmockServer.enqueue(new MockResponse().setBody(\"<foo response=\\\"yes\\\"> </foo>\"));\n\t\tElement element = ucs.exec(\"foo\", \"fizz\",\"buzz\");\n\t\t\n\t\tAssertions.assertThat(element.getName()).isEqualTo(\"foo\");\n\t\tAssertions.assertThat(element.getAttributeValue(\"response\")).isEqualTo(\"yes\");\n\t}", "signature": "void testDummyExchange()", "full_signature": "@Test public void testDummyExchange()", "class_method_signature": "UCSClientTest.testDummyExchange()", "testcase": true, "constructor": false, "invocations": ["enqueue", "setBody", "exec", "isEqualTo", "assertThat", "getName", "isEqualTo", "assertThat", "getAttributeValue"]}, "focal_class": {"identifier": "UCSClient", "superclass": "", "interfaces": "", "fields": [{"original_string": "static Logger logger = LoggerFactory.getLogger(UCSClient.class);", "modifier": "static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(UCSClient.class)", "var_name": "logger"}, {"original_string": "OkRestTarget target;", "modifier": "", "type": "OkRestTarget", "declarator": "target", "var_name": "target"}, {"original_string": "Builder builder;", "modifier": "", "type": "Builder", "declarator": "builder", "var_name": "builder"}, {"original_string": "String username;", "modifier": "", "type": "String", "declarator": "username", "var_name": "username"}, {"original_string": "String password;", "modifier": "", "type": "String", "declarator": "password", "var_name": "password"}, {"original_string": "TokenSupplier tokenSupplier = new TokenSupplier();", "modifier": "", "type": "TokenSupplier", "declarator": "tokenSupplier = new TokenSupplier()", "var_name": "tokenSupplier"}, {"original_string": "AtomicReference<Token> tokenRef = new AtomicReference<>();", "modifier": "", "type": "AtomicReference<Token>", "declarator": "tokenRef = new AtomicReference<>()", "var_name": "tokenRef"}], "methods": [{"identifier": "refresh", "parameters": "(Token token)", "modifiers": "private", "return": "Token", "signature": "Token refresh(Token token)", "full_signature": "private Token refresh(Token token)", "class_method_signature": "UCSClient.refresh(Token token)", "testcase": false, "constructor": false}, {"identifier": "logout", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void logout()", "full_signature": "public void logout()", "class_method_signature": "UCSClient.logout()", "testcase": false, "constructor": false}, {"identifier": "forceLogout", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void forceLogout()", "full_signature": "protected void forceLogout()", "class_method_signature": "UCSClient.forceLogout()", "testcase": false, "constructor": false}, {"identifier": "getToken", "parameters": "()", "modifiers": "public", "return": "Token", "signature": "Token getToken()", "full_signature": "public Token getToken()", "class_method_signature": "UCSClient.getToken()", "testcase": false, "constructor": false}, {"identifier": "logDebug", "parameters": "(String message, Element element)", "modifiers": "public", "return": "void", "signature": "void logDebug(String message, Element element)", "full_signature": "public void logDebug(String message, Element element)", "class_method_signature": "UCSClient.logDebug(String message, Element element)", "testcase": false, "constructor": false}, {"identifier": "logInfo", "parameters": "(String message, Element element)", "modifiers": "public", "return": "void", "signature": "void logInfo(String message, Element element)", "full_signature": "public void logInfo(String message, Element element)", "class_method_signature": "UCSClient.logInfo(String message, Element element)", "testcase": false, "constructor": false}, {"identifier": "resolveClass", "parameters": "(String classId, boolean inHierarchical)", "modifiers": "public", "return": "List<Element>", "signature": "List<Element> resolveClass(String classId, boolean inHierarchical)", "full_signature": "public List<Element> resolveClass(String classId, boolean inHierarchical)", "class_method_signature": "UCSClient.resolveClass(String classId, boolean inHierarchical)", "testcase": false, "constructor": false}, {"identifier": "resolveClass", "parameters": "(String classId)", "modifiers": "public", "return": "List<Element>", "signature": "List<Element> resolveClass(String classId)", "full_signature": "public List<Element> resolveClass(String classId)", "class_method_signature": "UCSClient.resolveClass(String classId)", "testcase": false, "constructor": false}, {"identifier": "resolveDn", "parameters": "(String dn)", "modifiers": "public", "return": "Element", "signature": "Element resolveDn(String dn)", "full_signature": "public Element resolveDn(String dn)", "class_method_signature": "UCSClient.resolveDn(String dn)", "testcase": false, "constructor": false}, {"identifier": "toMap", "parameters": "(String... args)", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> toMap(String... args)", "full_signature": "public Map<String, String> toMap(String... args)", "class_method_signature": "UCSClient.toMap(String... args)", "testcase": false, "constructor": false}, {"identifier": "exec", "parameters": "(String command, String... args)", "modifiers": "public", "return": "Element", "signature": "Element exec(String command, String... args)", "full_signature": "public Element exec(String command, String... args)", "class_method_signature": "UCSClient.exec(String command, String... args)", "testcase": false, "constructor": false}, {"identifier": "exec", "parameters": "(String command, Map<String, String> args)", "modifiers": "public", "return": "Element", "signature": "Element exec(String command, Map<String, String> args)", "full_signature": "public Element exec(String command, Map<String, String> args)", "class_method_signature": "UCSClient.exec(String command, Map<String, String> args)", "testcase": false, "constructor": false}, {"identifier": "getUCSManagerId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUCSManagerId()", "full_signature": "public String getUCSManagerId()", "class_method_signature": "UCSClient.getUCSManagerId()", "testcase": false, "constructor": false}, {"identifier": "resolveChildren", "parameters": "(String dn, String classId)", "modifiers": "public", "return": "List<Element>", "signature": "List<Element> resolveChildren(String dn, String classId)", "full_signature": "public List<Element> resolveChildren(String dn, String classId)", "class_method_signature": "UCSClient.resolveChildren(String dn, String classId)", "testcase": false, "constructor": false}], "file": "mercator-ucs/src/main/java/org/lendingclub/mercator/ucs/UCSClient.java"}, "focal_method": {"identifier": "exec", "parameters": "(String command, String... args)", "modifiers": "public", "return": "Element", "body": "public Element exec(String command, String... args) {\n\t\treturn exec(command, toMap(args));\n\t}", "signature": "Element exec(String command, String... args)", "full_signature": "public Element exec(String command, String... args)", "class_method_signature": "UCSClient.exec(String command, String... args)", "testcase": false, "constructor": false, "invocations": ["exec", "toMap"]}, "repository": {"repo_id": 80497637, "url": "https://github.com/LendingClub/mercator", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 64, "size": 646, "license": "licensed"}}