{"test_class": {"identifier": "WaitForSeInsertionTest", "superclass": "extends CoreBaseTest", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(WaitForSeInsertionTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(WaitForSeInsertionTest.class)", "var_name": "logger"}, {"original_string": "final String READER_NAME = \"WaitForSeInsertionTest\";", "modifier": "final", "type": "String", "declarator": "READER_NAME = \"WaitForSeInsertionTest\"", "var_name": "READER_NAME"}, {"original_string": "AbstractObservableState waitForInsert;", "modifier": "", "type": "AbstractObservableState", "declarator": "waitForInsert", "var_name": "waitForInsert"}, {"original_string": "AbstractObservableLocalReader r;", "modifier": "", "type": "AbstractObservableLocalReader", "declarator": "r", "var_name": "r"}, {"original_string": "final Long WAIT = 500l;", "modifier": "final", "type": "Long", "declarator": "WAIT = 500l", "var_name": "WAIT"}, {"original_string": "static final Integer X_TIMES = 5;", "modifier": "static final", "type": "Integer", "declarator": "X_TIMES = 5", "var_name": "X_TIMES"}], "file": "java/component/keyple-core/src/test/java/org/eclipse/keyple/core/seproxy/plugin/reader/WaitForSeInsertionTest.java"}, "test_case": {"identifier": "testInsertSe_Notmatched", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testInsertSe_Notmatched() throws Exception {\n    /*\n     * input SE inserted SE doesnt matched Back to Detection\n     */\n    doReturn(new ReaderEvent(\"\", \"\", ReaderEvent.EventType.SE_INSERTED, null))\n        .when(r)\n        .processSeInserted();\n\n    /* test */\n    waitForInsert.onActivate();\n    waitForInsert.onEvent(AbstractObservableLocalReader.InternalEvent.SE_INSERTED);\n    /* Assert */\n\n    Thread.sleep(WAIT); // wait for the monitoring to act\n\n    // switched to the same state to relaunch the monitoring job\n    verify(r, times(1)).switchState(WAIT_FOR_SE_PROCESSING);\n  }", "signature": "void testInsertSe_Notmatched()", "full_signature": "@Test public void testInsertSe_Notmatched()", "class_method_signature": "WaitForSeInsertionTest.testInsertSe_Notmatched()", "testcase": true, "constructor": false, "invocations": ["processSeInserted", "when", "doReturn", "onActivate", "onEvent", "sleep", "switchState", "verify", "times"]}, "focal_class": {"identifier": "WaitForSeInsertion", "superclass": "extends AbstractObservableState", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(WaitForSeInsertion.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(WaitForSeInsertion.class)", "var_name": "logger"}], "methods": [{"identifier": "WaitForSeInsertion", "parameters": "(AbstractObservableLocalReader reader)", "modifiers": "public", "return": "", "signature": " WaitForSeInsertion(AbstractObservableLocalReader reader)", "full_signature": "public  WaitForSeInsertion(AbstractObservableLocalReader reader)", "class_method_signature": "WaitForSeInsertion.WaitForSeInsertion(AbstractObservableLocalReader reader)", "testcase": false, "constructor": true}, {"identifier": "WaitForSeInsertion", "parameters": "(\n      AbstractObservableLocalReader reader,\n      AbstractMonitoringJob monitoringJob,\n      ExecutorService executorService)", "modifiers": "public", "return": "", "signature": " WaitForSeInsertion(\n      AbstractObservableLocalReader reader,\n      AbstractMonitoringJob monitoringJob,\n      ExecutorService executorService)", "full_signature": "public  WaitForSeInsertion(\n      AbstractObservableLocalReader reader,\n      AbstractMonitoringJob monitoringJob,\n      ExecutorService executorService)", "class_method_signature": "WaitForSeInsertion.WaitForSeInsertion(\n      AbstractObservableLocalReader reader,\n      AbstractMonitoringJob monitoringJob,\n      ExecutorService executorService)", "testcase": false, "constructor": true}, {"identifier": "onEvent", "parameters": "(AbstractObservableLocalReader.InternalEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void onEvent(AbstractObservableLocalReader.InternalEvent event)", "full_signature": "@Override public void onEvent(AbstractObservableLocalReader.InternalEvent event)", "class_method_signature": "WaitForSeInsertion.onEvent(AbstractObservableLocalReader.InternalEvent event)", "testcase": false, "constructor": false}], "file": "java/component/keyple-core/src/main/java/org/eclipse/keyple/core/seproxy/plugin/reader/WaitForSeInsertion.java"}, "focal_method": {"identifier": "onEvent", "parameters": "(AbstractObservableLocalReader.InternalEvent event)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void onEvent(AbstractObservableLocalReader.InternalEvent event) {\n    if (logger.isTraceEnabled()) {\n      logger.trace(\n          \"[{}] onEvent => Event {} received in currentState {}\", reader.getName(), event, state);\n    }\n    /*\n     * Process InternalEvent\n     */\n    switch (event) {\n      case SE_INSERTED:\n        // process default selection if any, return an event, can be null\n        ReaderEvent seEvent = this.reader.processSeInserted();\n        if (seEvent != null) {\n          // switch internal state\n          switchState(MonitoringState.WAIT_FOR_SE_PROCESSING);\n          // notify the external observer of the event\n          reader.notifyObservers(seEvent);\n        } else {\n          // if none event was sent to the application, back to SE detection\n          // stay in the same state, however switch to WAIT_FOR_SE_INSERTION to relaunch\n          // the monitoring job\n          if (logger.isTraceEnabled()) {\n            logger.trace(\"[{}] onEvent => Inserted SE hasn't matched\", reader.getName());\n          }\n          switchState(MonitoringState.WAIT_FOR_SE_REMOVAL);\n        }\n        break;\n\n      case STOP_DETECT:\n        switchState(MonitoringState.WAIT_FOR_START_DETECTION);\n        break;\n\n      case SE_REMOVED:\n        // TODO Check if this case really happens (NFC?)\n        // SE has been removed during default selection\n        if (reader.getPollingMode() == ObservableReader.PollingMode.REPEATING) {\n          switchState(MonitoringState.WAIT_FOR_SE_INSERTION);\n        } else {\n          switchState(MonitoringState.WAIT_FOR_START_DETECTION);\n        }\n        break;\n\n      default:\n        logger.warn(\n            \"[{}] Ignore =>  Event {} received in currentState {}\", reader.getName(), event, state);\n        break;\n    }\n  }", "signature": "void onEvent(AbstractObservableLocalReader.InternalEvent event)", "full_signature": "@Override public void onEvent(AbstractObservableLocalReader.InternalEvent event)", "class_method_signature": "WaitForSeInsertion.onEvent(AbstractObservableLocalReader.InternalEvent event)", "testcase": false, "constructor": false, "invocations": ["isTraceEnabled", "trace", "getName", "processSeInserted", "switchState", "notifyObservers", "isTraceEnabled", "trace", "getName", "switchState", "switchState", "getPollingMode", "switchState", "switchState", "warn", "getName"]}, "repository": {"repo_id": 156416177, "url": "https://github.com/eclipse/keyple-java", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 10325, "license": "licensed"}}