{"test_class": {"identifier": "OverlappingBloomFilterBasedWindowTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private OverlappingBloomFilterBasedWindow window;", "modifier": "private", "type": "OverlappingBloomFilterBasedWindow", "declarator": "window", "var_name": "window"}, {"original_string": "private int count;", "modifier": "private", "type": "int", "declarator": "count", "var_name": "count"}, {"original_string": "int windowSize;", "modifier": "", "type": "int", "declarator": "windowSize", "var_name": "windowSize"}], "file": "bigdata-intro/cep-intro/siddhi3-quick-start/src/main/java/org/wso2/siddhi/bloomfilter/OverlappingBloomFilterBasedWindowTest.java"}, "test_case": {"identifier": "testWithStateEvent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWithStateEvent() {\n\n        StreamEvent[] streamEvents1 =\n                { createStreamEvent(\"Hp\", 210.45, 23),\n                        createStreamEvent(\"Apple\", 3500.50, 10),\n                        createStreamEvent(\"Dell\", 245.95, 78) };\n\n        //addStateEvent(new StateEvent(streamEvents1), 3);\n\n        Assert.assertTrue(window.find(\"price\", 1000.55).isEmpty());\n        Assert.assertFalse(window.find(\"price\", 3500.50).isEmpty());\n\n        StreamEvent[] streamEvents2 =\n                { createStreamEvent(\"Toshiba\", 234.45, 24),\n                        createStreamEvent(\"Dell\", 456.45, 80),\n                        createStreamEvent(\"Hp\", 875.98, 70),\n                        createStreamEvent(\"Hp\", 223.87, 190),\n                        createStreamEvent(\"Apple\", 356.97, 76) };\n\n        //addStateEvent(new StateEvent(streamEvents2), 5);\n        Assert.assertFalse(window.find(\"price\", 3500.50).isEmpty());\n\n        StreamEvent[] streamEvents3 =\n                { createStreamEvent(\"Hp\", 678.87, 65),\n                        createStreamEvent(\"Toshiba\", 235.95, 19),\n                        createStreamEvent(\"Dell\", 879.25, 57),\n                        createStreamEvent(\"Hp\", 345.45, 19),\n                        createStreamEvent(\"Hp\", 879.76, 86),\n                        createStreamEvent(\"Apple\", 719.82, 29),\n                        createStreamEvent(\"Hp\", 985.30, 112) };\n\n        //addStateEvent(new StateEvent(streamEvents3), 7);\n\n        Assert.assertTrue(window.find(\"price\", 3500.50).isEmpty());\n\n    }", "signature": "void testWithStateEvent()", "full_signature": "@Test public void testWithStateEvent()", "class_method_signature": "OverlappingBloomFilterBasedWindowTest.testWithStateEvent()", "testcase": true, "constructor": false, "invocations": ["createStreamEvent", "createStreamEvent", "createStreamEvent", "assertTrue", "isEmpty", "find", "assertFalse", "isEmpty", "find", "createStreamEvent", "createStreamEvent", "createStreamEvent", "createStreamEvent", "createStreamEvent", "assertFalse", "isEmpty", "find", "createStreamEvent", "createStreamEvent", "createStreamEvent", "createStreamEvent", "createStreamEvent", "createStreamEvent", "createStreamEvent", "assertTrue", "isEmpty", "find"]}, "focal_class": {"identifier": "OverlappingBloomFilterBasedWindow", "superclass": "", "interfaces": "", "fields": [{"original_string": "private int expectedNoOfEventsPerWindow;", "modifier": "private", "type": "int", "declarator": "expectedNoOfEventsPerWindow", "var_name": "expectedNoOfEventsPerWindow"}, {"original_string": "private int[] joinAttributeId;", "modifier": "private", "type": "int[]", "declarator": "joinAttributeId", "var_name": "joinAttributeId"}, {"original_string": "private int overLapPrecentage;", "modifier": "private", "type": "int", "declarator": "overLapPrecentage", "var_name": "overLapPrecentage"}, {"original_string": "private ArrayList<BloomFilter> filterList;", "modifier": "private", "type": "ArrayList<BloomFilter>", "declarator": "filterList", "var_name": "filterList"}, {"original_string": "private ArrayList<Integer> noOfEventList;", "modifier": "private", "type": "ArrayList<Integer>", "declarator": "noOfEventList", "var_name": "noOfEventList"}, {"original_string": "private BlockingQueue<StreamEvent> eventQueue;", "modifier": "private", "type": "BlockingQueue<StreamEvent>", "declarator": "eventQueue", "var_name": "eventQueue"}, {"original_string": "private int bloomFilterSize;", "modifier": "private", "type": "int", "declarator": "bloomFilterSize", "var_name": "bloomFilterSize"}, {"original_string": "private int nonOverLapEvents;", "modifier": "private", "type": "int", "declarator": "nonOverLapEvents", "var_name": "nonOverLapEvents"}, {"original_string": "private int noOfHash;", "modifier": "private", "type": "int", "declarator": "noOfHash", "var_name": "noOfHash"}, {"original_string": "private int oldestAddingFilter;", "modifier": "private", "type": "int", "declarator": "oldestAddingFilter", "var_name": "oldestAddingFilter"}, {"original_string": "private int newestAddingFilter;", "modifier": "private", "type": "int", "declarator": "newestAddingFilter", "var_name": "newestAddingFilter"}, {"original_string": "private int removeEventCount;", "modifier": "private", "type": "int", "declarator": "removeEventCount", "var_name": "removeEventCount"}], "methods": [{"identifier": "init", "parameters": "(Expression[] expressions)", "modifiers": "public", "return": "void", "signature": "void init(Expression[] expressions)", "full_signature": "public void init(Expression[] expressions)", "class_method_signature": "OverlappingBloomFilterBasedWindow.init(Expression[] expressions)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(ComplexEvent event)", "modifiers": "public", "return": "void", "signature": "void add(ComplexEvent event)", "full_signature": "public void add(ComplexEvent event)", "class_method_signature": "OverlappingBloomFilterBasedWindow.add(ComplexEvent event)", "testcase": false, "constructor": false}, {"identifier": "getLast", "parameters": "(Boolean remove)", "modifiers": "public", "return": "ComplexEvent", "signature": "ComplexEvent getLast(Boolean remove)", "full_signature": "public ComplexEvent getLast(Boolean remove)", "class_method_signature": "OverlappingBloomFilterBasedWindow.getLast(Boolean remove)", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(String attributeName, Object value)", "modifiers": "public", "return": "List<ComplexEvent>", "signature": "List<ComplexEvent> find(String attributeName, Object value)", "full_signature": "public List<ComplexEvent> find(String attributeName, Object value)", "class_method_signature": "OverlappingBloomFilterBasedWindow.find(String attributeName, Object value)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(ComplexEvent event)", "modifiers": "public", "return": "void", "signature": "void remove(ComplexEvent event)", "full_signature": "public void remove(ComplexEvent event)", "class_method_signature": "OverlappingBloomFilterBasedWindow.remove(ComplexEvent event)", "testcase": false, "constructor": false}, {"identifier": "currentState", "parameters": "()", "modifiers": "public", "return": "Object[]", "signature": "Object[] currentState()", "full_signature": "public Object[] currentState()", "class_method_signature": "OverlappingBloomFilterBasedWindow.currentState()", "testcase": false, "constructor": false}, {"identifier": "restoreState", "parameters": "(Object[] objects)", "modifiers": "public", "return": "void", "signature": "void restoreState(Object[] objects)", "full_signature": "public void restoreState(Object[] objects)", "class_method_signature": "OverlappingBloomFilterBasedWindow.restoreState(Object[] objects)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "OverlappingBloomFilterBasedWindow.size()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void destroy()", "full_signature": "public void destroy()", "class_method_signature": "OverlappingBloomFilterBasedWindow.destroy()", "testcase": false, "constructor": false}, {"identifier": "addStreamEvent", "parameters": "(StreamEvent streamEvent)", "modifiers": "private", "return": "void", "signature": "void addStreamEvent(StreamEvent streamEvent)", "full_signature": "private void addStreamEvent(StreamEvent streamEvent)", "class_method_signature": "OverlappingBloomFilterBasedWindow.addStreamEvent(StreamEvent streamEvent)", "testcase": false, "constructor": false}, {"identifier": "removLastEventFromFilters", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void removLastEventFromFilters()", "full_signature": "private void removLastEventFromFilters()", "class_method_signature": "OverlappingBloomFilterBasedWindow.removLastEventFromFilters()", "testcase": false, "constructor": false}], "file": "bigdata-intro/cep-intro/siddhi3-quick-start/src/main/java/org/wso2/siddhi/bloomfilter/OverlappingBloomFilterBasedWindow.java"}, "focal_method": {"identifier": "find", "parameters": "(String attributeName, Object value)", "modifiers": "public", "return": "List<ComplexEvent>", "body": "public List<ComplexEvent> find(String attributeName, Object value) {\n\n        Key key = new Key(value.toString().getBytes());\n        List<ComplexEvent> foundEventList = new ArrayList<ComplexEvent>();\n\n        boolean isInFilters = false;\n\n        for (int i = 0; i <= oldestAddingFilter; i++) {\n            if (filterList.get(i).membershipTest(key)) {\n                isInFilters = true;\n                break;\n            }\n        }\n\n        if (isInFilters) {\n            Iterator<StreamEvent> iterator = eventQueue.iterator();\n            while (iterator.hasNext()) {\n                StreamEvent streamEvent = iterator.next();\n                if (streamEvent.getAttribute(joinAttributeId).equals(value)) {\n                    foundEventList.add(streamEvent);\n                }\n            }\n        }\n\n        return foundEventList;\n\n    }", "signature": "List<ComplexEvent> find(String attributeName, Object value)", "full_signature": "public List<ComplexEvent> find(String attributeName, Object value)", "class_method_signature": "OverlappingBloomFilterBasedWindow.find(String attributeName, Object value)", "testcase": false, "constructor": false, "invocations": ["getBytes", "toString", "membershipTest", "get", "iterator", "hasNext", "next", "equals", "getAttribute", "add"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}