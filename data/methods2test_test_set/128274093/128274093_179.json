{"test_class": {"identifier": "CompositeDisposableTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/disposables/CompositeDisposableTest.java"}, "test_case": {"identifier": "addRace", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void addRace() {\n        for (int i = 0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {\n            final CompositeDisposable cd = new CompositeDisposable();\n\n            Runnable run = new Runnable() {\n                @Override\n                public void run() {\n                    cd.add(Disposables.empty());\n                }\n            };\n\n            TestHelper.race(run, run);\n        }\n    }", "signature": "void addRace()", "full_signature": "@Test public void addRace()", "class_method_signature": "CompositeDisposableTest.addRace()", "testcase": true, "constructor": false, "invocations": ["add", "empty", "race"]}, "focal_class": {"identifier": "CompositeDisposable", "superclass": "", "interfaces": "implements Disposable, DisposableContainer", "fields": [{"original_string": "OpenHashSet<Disposable> resources;", "modifier": "", "type": "OpenHashSet<Disposable>", "declarator": "resources", "var_name": "resources"}, {"original_string": "volatile boolean disposed;", "modifier": "volatile", "type": "boolean", "declarator": "disposed", "var_name": "disposed"}], "methods": [{"identifier": "CompositeDisposable", "parameters": "()", "modifiers": "public", "return": "", "signature": " CompositeDisposable()", "full_signature": "public  CompositeDisposable()", "class_method_signature": "CompositeDisposable.CompositeDisposable()", "testcase": false, "constructor": true}, {"identifier": "CompositeDisposable", "parameters": "(@NonNull Disposable... resources)", "modifiers": "public", "return": "", "signature": " CompositeDisposable(@NonNull Disposable... resources)", "full_signature": "public  CompositeDisposable(@NonNull Disposable... resources)", "class_method_signature": "CompositeDisposable.CompositeDisposable(@NonNull Disposable... resources)", "testcase": false, "constructor": true}, {"identifier": "CompositeDisposable", "parameters": "(@NonNull Iterable<? extends Disposable> resources)", "modifiers": "public", "return": "", "signature": " CompositeDisposable(@NonNull Iterable<? extends Disposable> resources)", "full_signature": "public  CompositeDisposable(@NonNull Iterable<? extends Disposable> resources)", "class_method_signature": "CompositeDisposable.CompositeDisposable(@NonNull Iterable<? extends Disposable> resources)", "testcase": false, "constructor": true}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "CompositeDisposable.dispose()", "testcase": false, "constructor": false}, {"identifier": "isDisposed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDisposed()", "full_signature": "@Override public boolean isDisposed()", "class_method_signature": "CompositeDisposable.isDisposed()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(@NonNull Disposable d)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(@NonNull Disposable d)", "full_signature": "@Override public boolean add(@NonNull Disposable d)", "class_method_signature": "CompositeDisposable.add(@NonNull Disposable d)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(@NonNull Disposable... ds)", "modifiers": "public", "return": "boolean", "signature": "boolean addAll(@NonNull Disposable... ds)", "full_signature": "public boolean addAll(@NonNull Disposable... ds)", "class_method_signature": "CompositeDisposable.addAll(@NonNull Disposable... ds)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(@NonNull Disposable d)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean remove(@NonNull Disposable d)", "full_signature": "@Override public boolean remove(@NonNull Disposable d)", "class_method_signature": "CompositeDisposable.remove(@NonNull Disposable d)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(@NonNull Disposable d)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean delete(@NonNull Disposable d)", "full_signature": "@Override public boolean delete(@NonNull Disposable d)", "class_method_signature": "CompositeDisposable.delete(@NonNull Disposable d)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "CompositeDisposable.clear()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "CompositeDisposable.size()", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "(OpenHashSet<Disposable> set)", "modifiers": "", "return": "void", "signature": "void dispose(OpenHashSet<Disposable> set)", "full_signature": " void dispose(OpenHashSet<Disposable> set)", "class_method_signature": "CompositeDisposable.dispose(OpenHashSet<Disposable> set)", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/disposables/CompositeDisposable.java"}, "focal_method": {"identifier": "add", "parameters": "(@NonNull Disposable d)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean add(@NonNull Disposable d) {\n        ObjectHelper.requireNonNull(d, \"d is null\");\n        if (!disposed) {\n            synchronized (this) {\n                if (!disposed) {\n                    OpenHashSet<Disposable> set = resources;\n                    if (set == null) {\n                        set = new OpenHashSet<Disposable>();\n                        resources = set;\n                    }\n                    set.add(d);\n                    return true;\n                }\n            }\n        }\n        d.dispose();\n        return false;\n    }", "signature": "boolean add(@NonNull Disposable d)", "full_signature": "@Override public boolean add(@NonNull Disposable d)", "class_method_signature": "CompositeDisposable.add(@NonNull Disposable d)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "add", "dispose"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}