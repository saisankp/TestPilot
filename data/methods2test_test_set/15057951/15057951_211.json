{"test_class": {"identifier": "IntegerTypeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IntegerType type = new IntegerType();", "modifier": "private", "type": "IntegerType", "declarator": "type = new IntegerType()", "var_name": "type"}], "file": "smartparam-engine/src/test/java/org/smartparam/engine/types/integer/IntegerTypeTest.java"}, "test_case": {"identifier": "testEncode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEncode() {\n\n        // przypadki testowe\n        Object[][] testCases = {\n            {-100L, \"-100\"},\n            {0L, \"0\"},\n            {999L, \"999\"},\n            {2147483648L, \"2147483648\"},\n            {null, null}\n        };\n\n        // wykonanie testow\n        for (Object[] testCase : testCases) {\n            Long number = (Long) testCase[0];\n            String expectedResult = (String) testCase[1];\n\n            String result = type.encode(new IntegerHolder(number));\n            assertEquals(expectedResult, result);\n        }\n    }", "signature": "void testEncode()", "full_signature": "@Test public void testEncode()", "class_method_signature": "IntegerTypeTest.testEncode()", "testcase": true, "constructor": false, "invocations": ["encode", "assertEquals"]}, "focal_class": {"identifier": "IntegerType", "superclass": "", "interfaces": "implements Type<IntegerHolder>", "fields": [{"original_string": "public static final String TYPE_NAME = \"integer\";", "modifier": "public static final", "type": "String", "declarator": "TYPE_NAME = \"integer\"", "var_name": "TYPE_NAME"}], "methods": [{"identifier": "encode", "parameters": "(IntegerHolder value)", "modifiers": "@Override public", "return": "String", "signature": "String encode(IntegerHolder value)", "full_signature": "@Override public String encode(IntegerHolder value)", "class_method_signature": "IntegerType.encode(IntegerHolder value)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(String text)", "modifiers": "@Override public", "return": "IntegerHolder", "signature": "IntegerHolder decode(String text)", "full_signature": "@Override public IntegerHolder decode(String text)", "class_method_signature": "IntegerType.decode(String text)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "IntegerHolder", "signature": "IntegerHolder convert(Object obj)", "full_signature": "@Override public IntegerHolder convert(Object obj)", "class_method_signature": "IntegerType.convert(Object obj)", "testcase": false, "constructor": false}, {"identifier": "newArray", "parameters": "(int size)", "modifiers": "@Override public", "return": "IntegerHolder[]", "signature": "IntegerHolder[] newArray(int size)", "full_signature": "@Override public IntegerHolder[] newArray(int size)", "class_method_signature": "IntegerType.newArray(int size)", "testcase": false, "constructor": false}], "file": "smartparam-engine/src/main/java/org/smartparam/engine/types/integer/IntegerType.java"}, "focal_method": {"identifier": "encode", "parameters": "(IntegerHolder value)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String encode(IntegerHolder value) {\n        Long v = value.getValue();\n        return v != null ? v.toString() : null;\n    }", "signature": "String encode(IntegerHolder value)", "full_signature": "@Override public String encode(IntegerHolder value)", "class_method_signature": "IntegerType.encode(IntegerHolder value)", "testcase": false, "constructor": false, "invocations": ["getValue", "toString"]}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}