{"test_class": {"identifier": "PayloadRootQNameEndpointMappingTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PayloadRootQNameEndpointMapping mapping;", "modifier": "private", "type": "PayloadRootQNameEndpointMapping", "declarator": "mapping", "var_name": "mapping"}], "file": "spring-ws-core/src/test/java/org/springframework/ws/server/endpoint/mapping/PayloadRootQNameEndpointMappingTest.java"}, "test_case": {"identifier": "testResolveQNames", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testResolveQNames() throws Exception {\n\t\tMockWebServiceMessage request = new MockWebServiceMessage(\"<root/>\");\n\t\tMessageContext context = new DefaultMessageContext(request, new MockWebServiceMessageFactory());\n\n\t\tQName qName = mapping.resolveQName(context);\n\t\tAssert.assertNotNull(\"mapping returns null\", qName);\n\t\tAssert.assertEquals(\"mapping returns invalid qualified name\", new QName(\"root\"), qName);\n\t}", "signature": "void testResolveQNames()", "full_signature": "@Test public void testResolveQNames()", "class_method_signature": "PayloadRootQNameEndpointMappingTest.testResolveQNames()", "testcase": true, "constructor": false, "invocations": ["resolveQName", "assertNotNull", "assertEquals"]}, "focal_class": {"identifier": "PayloadRootQNameEndpointMapping", "superclass": "extends AbstractQNameEndpointMapping", "interfaces": "", "fields": [{"original_string": "private static TransformerFactory transformerFactory;", "modifier": "private static", "type": "TransformerFactory", "declarator": "transformerFactory", "var_name": "transformerFactory"}], "methods": [{"identifier": "setTransformerFactory", "parameters": "(TransformerFactory transformerFactory)", "modifiers": "public static", "return": "void", "signature": "void setTransformerFactory(TransformerFactory transformerFactory)", "full_signature": "public static void setTransformerFactory(TransformerFactory transformerFactory)", "class_method_signature": "PayloadRootQNameEndpointMapping.setTransformerFactory(TransformerFactory transformerFactory)", "testcase": false, "constructor": false}, {"identifier": "resolveQName", "parameters": "(MessageContext messageContext)", "modifiers": "@Override protected", "return": "QName", "signature": "QName resolveQName(MessageContext messageContext)", "full_signature": "@Override protected QName resolveQName(MessageContext messageContext)", "class_method_signature": "PayloadRootQNameEndpointMapping.resolveQName(MessageContext messageContext)", "testcase": false, "constructor": false}], "file": "spring-ws-core/src/main/java/org/springframework/ws/server/endpoint/mapping/PayloadRootQNameEndpointMapping.java"}, "focal_method": {"identifier": "resolveQName", "parameters": "(MessageContext messageContext)", "modifiers": "@Override protected", "return": "QName", "body": "@Override\n\tprotected QName resolveQName(MessageContext messageContext) throws TransformerException {\n\t\treturn PayloadRootUtils.getPayloadRootQName(messageContext.getRequest().getPayloadSource(), transformerFactory);\n\t}", "signature": "QName resolveQName(MessageContext messageContext)", "full_signature": "@Override protected QName resolveQName(MessageContext messageContext)", "class_method_signature": "PayloadRootQNameEndpointMapping.resolveQName(MessageContext messageContext)", "testcase": false, "constructor": false, "invocations": ["getPayloadRootQName", "getPayloadSource", "getRequest"]}, "repository": {"repo_id": 7914484, "url": "https://github.com/spring-projects/spring-ws", "language": "Java", "is_fork": false, "fork_count": 232, "stargazer_count": 209, "size": 20360, "license": "licensed"}}