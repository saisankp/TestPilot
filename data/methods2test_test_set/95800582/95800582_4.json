{"test_class": {"identifier": "ListUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final List<Integer> list05 = Arrays.asList(0,1,2,3,4,5);", "modifier": "private static final", "type": "List<Integer>", "declarator": "list05 = Arrays.asList(0,1,2,3,4,5)", "var_name": "list05"}, {"original_string": "private static final List<Integer> list15 = Arrays.asList(1,2,3,4,5);", "modifier": "private static final", "type": "List<Integer>", "declarator": "list15 = Arrays.asList(1,2,3,4,5)", "var_name": "list15"}, {"original_string": "private static final List<Integer> list06 = Arrays.asList(0,1,2,3,4,5,6);", "modifier": "private static final", "type": "List<Integer>", "declarator": "list06 = Arrays.asList(0,1,2,3,4,5,6)", "var_name": "list06"}, {"original_string": "private static final List<Integer> listFlip = Arrays.asList(0,1,2,3,5,4);", "modifier": "private static final", "type": "List<Integer>", "declarator": "listFlip = Arrays.asList(0,1,2,3,5,4)", "var_name": "listFlip"}, {"original_string": "private static final List<Integer> listGap = Arrays.asList(5,0,1,2,3,4);", "modifier": "private static final", "type": "List<Integer>", "declarator": "listGap = Arrays.asList(5,0,1,2,3,4)", "var_name": "listGap"}, {"original_string": "private static final List<Integer> listMultiReorder = Arrays.asList(5,0,4,1,2,3);", "modifier": "private static final", "type": "List<Integer>", "declarator": "listMultiReorder = Arrays.asList(5,0,4,1,2,3)", "var_name": "listMultiReorder"}, {"original_string": "private static final List<Integer> listSwap = Arrays.asList(5,1,2,3,4,0);", "modifier": "private static final", "type": "List<Integer>", "declarator": "listSwap = Arrays.asList(5,1,2,3,4,0)", "var_name": "listSwap"}], "file": "adapper/src/test/java/com/scopely/adapper/utils/ListUtilsTest.java"}, "test_case": {"identifier": "testSingleDeletionHead", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSingleDeletionHead() {\n        SparseBooleanArray deletions = ListUtils.getDeletions(list05, list15);\n        assertThat(deletions.size(), is(1));\n        assertThat(deletions.get(0), is(true));\n    }", "signature": "void testSingleDeletionHead()", "full_signature": "@Test public void testSingleDeletionHead()", "class_method_signature": "ListUtilsTest.testSingleDeletionHead()", "testcase": true, "constructor": false, "invocations": ["getDeletions", "assertThat", "size", "is", "assertThat", "get", "is"]}, "focal_class": {"identifier": "ListUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getInsertions", "parameters": "(@Nullable List<? extends Item> oldList, @NonNull List<? extends Item> newList)", "modifiers": "public static", "return": "SparseBooleanArray", "signature": "SparseBooleanArray getInsertions(@Nullable List<? extends Item> oldList, @NonNull List<? extends Item> newList)", "full_signature": "public static SparseBooleanArray getInsertions(@Nullable List<? extends Item> oldList, @NonNull List<? extends Item> newList)", "class_method_signature": "ListUtils.getInsertions(@Nullable List<? extends Item> oldList, @NonNull List<? extends Item> newList)", "testcase": false, "constructor": false}, {"identifier": "getDeletions", "parameters": "(@Nullable List<? extends Item> oldList, @NonNull List<? extends Item> newList)", "modifiers": "public static", "return": "SparseBooleanArray", "signature": "SparseBooleanArray getDeletions(@Nullable List<? extends Item> oldList, @NonNull List<? extends Item> newList)", "full_signature": "public static SparseBooleanArray getDeletions(@Nullable List<? extends Item> oldList, @NonNull List<? extends Item> newList)", "class_method_signature": "ListUtils.getDeletions(@Nullable List<? extends Item> oldList, @NonNull List<? extends Item> newList)", "testcase": false, "constructor": false}, {"identifier": "getReorderings", "parameters": "(List<? extends Item> oldList, List<? extends Item> newList)", "modifiers": "public static", "return": "SparseIntArray", "signature": "SparseIntArray getReorderings(List<? extends Item> oldList, List<? extends Item> newList)", "full_signature": "public static SparseIntArray getReorderings(List<? extends Item> oldList, List<? extends Item> newList)", "class_method_signature": "ListUtils.getReorderings(List<? extends Item> oldList, List<? extends Item> newList)", "testcase": false, "constructor": false}, {"identifier": "calculateMoves", "parameters": "(List<? extends Item> oldList, List<? extends Item> newList)", "modifiers": "private static", "return": "List<Pair<Integer, Integer>>", "signature": "List<Pair<Integer, Integer>> calculateMoves(List<? extends Item> oldList, List<? extends Item> newList)", "full_signature": "private static List<Pair<Integer, Integer>> calculateMoves(List<? extends Item> oldList, List<? extends Item> newList)", "class_method_signature": "ListUtils.calculateMoves(List<? extends Item> oldList, List<? extends Item> newList)", "testcase": false, "constructor": false}, {"identifier": "calculateNetMoveScores", "parameters": "(List<Pair<Integer, Integer>> moveList)", "modifiers": "private static", "return": "List<Integer>", "signature": "List<Integer> calculateNetMoveScores(List<Pair<Integer, Integer>> moveList)", "full_signature": "private static List<Integer> calculateNetMoveScores(List<Pair<Integer, Integer>> moveList)", "class_method_signature": "ListUtils.calculateNetMoveScores(List<Pair<Integer, Integer>> moveList)", "testcase": false, "constructor": false}, {"identifier": "extractReordering", "parameters": "(List<Pair<Integer, Integer>> moveList, List<Integer> netMoveScores, SparseIntArray reorderings)", "modifiers": "private static", "return": "boolean", "signature": "boolean extractReordering(List<Pair<Integer, Integer>> moveList, List<Integer> netMoveScores, SparseIntArray reorderings)", "full_signature": "private static boolean extractReordering(List<Pair<Integer, Integer>> moveList, List<Integer> netMoveScores, SparseIntArray reorderings)", "class_method_signature": "ListUtils.extractReordering(List<Pair<Integer, Integer>> moveList, List<Integer> netMoveScores, SparseIntArray reorderings)", "testcase": false, "constructor": false}, {"identifier": "generateString", "parameters": "(List<Pair<Integer, Integer>> moveList)", "modifiers": "private static", "return": "String", "signature": "String generateString(List<Pair<Integer, Integer>> moveList)", "full_signature": "private static String generateString(List<Pair<Integer, Integer>> moveList)", "class_method_signature": "ListUtils.generateString(List<Pair<Integer, Integer>> moveList)", "testcase": false, "constructor": false}, {"identifier": "cleanNetMoveList", "parameters": "(List<Integer> netMoveScores, List<Pair<Integer, Integer>> moveList)", "modifiers": "private static", "return": "void", "signature": "void cleanNetMoveList(List<Integer> netMoveScores, List<Pair<Integer, Integer>> moveList)", "full_signature": "private static void cleanNetMoveList(List<Integer> netMoveScores, List<Pair<Integer, Integer>> moveList)", "class_method_signature": "ListUtils.cleanNetMoveList(List<Integer> netMoveScores, List<Pair<Integer, Integer>> moveList)", "testcase": false, "constructor": false}, {"identifier": "indexOfHighestNetMove", "parameters": "(List<Integer> netMoveScores)", "modifiers": "private static", "return": "int", "signature": "int indexOfHighestNetMove(List<Integer> netMoveScores)", "full_signature": "private static int indexOfHighestNetMove(List<Integer> netMoveScores)", "class_method_signature": "ListUtils.indexOfHighestNetMove(List<Integer> netMoveScores)", "testcase": false, "constructor": false}, {"identifier": "getNewIndicesOfOldIndicesAboveIndex", "parameters": "(Integer index, List<Pair<Integer, Integer>> moveList)", "modifiers": "private static", "return": "List<Integer>", "signature": "List<Integer> getNewIndicesOfOldIndicesAboveIndex(Integer index, List<Pair<Integer, Integer>> moveList)", "full_signature": "private static List<Integer> getNewIndicesOfOldIndicesAboveIndex(Integer index, List<Pair<Integer, Integer>> moveList)", "class_method_signature": "ListUtils.getNewIndicesOfOldIndicesAboveIndex(Integer index, List<Pair<Integer, Integer>> moveList)", "testcase": false, "constructor": false}], "file": "adapper/src/main/java/com/scopely/adapper/utils/ListUtils.java"}, "focal_method": {"identifier": "getDeletions", "parameters": "(@Nullable List<? extends Item> oldList, @NonNull List<? extends Item> newList)", "modifiers": "public static", "return": "SparseBooleanArray", "body": "public static <Item> SparseBooleanArray getDeletions(@Nullable List<? extends Item> oldList, @NonNull List<? extends Item> newList) {\n        SparseBooleanArray list = new SparseBooleanArray();\n        if(oldList != null) {\n            int size = oldList.size();\n            for (int oldIndex = 0; oldIndex < size; oldIndex++) {\n                Item itemFromOldList = oldList.get(oldIndex);\n                if (newList.indexOf(itemFromOldList) == NOT_PRESENT) {\n                    list.put(oldIndex, true);\n                }\n            }\n        }\n        return list;\n    }", "signature": "SparseBooleanArray getDeletions(@Nullable List<? extends Item> oldList, @NonNull List<? extends Item> newList)", "full_signature": "public static SparseBooleanArray getDeletions(@Nullable List<? extends Item> oldList, @NonNull List<? extends Item> newList)", "class_method_signature": "ListUtils.getDeletions(@Nullable List<? extends Item> oldList, @NonNull List<? extends Item> newList)", "testcase": false, "constructor": false, "invocations": ["size", "get", "indexOf", "put"]}, "repository": {"repo_id": 95800582, "url": "https://github.com/scopely/adapper", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 9, "size": 224, "license": "licensed"}}