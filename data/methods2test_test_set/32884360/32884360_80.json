{"test_class": {"identifier": "SchemaDDLTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected SQLParser parser;", "modifier": "protected", "type": "SQLParser", "declarator": "parser", "var_name": "parser"}], "file": "fdb-sql-layer-core/src/test/java/com/foundationdb/sql/aisddl/SchemaDDLTest.java"}, "test_case": {"identifier": "dropSchemaUsed", "parameters": "()", "modifiers": "@Test(expected=ReferencedSchemaException.class) public", "return": "void", "body": "@Test(expected=ReferencedSchemaException.class)\n    public void dropSchemaUsed() throws Exception\n    {\n        String sql = \"DROP SCHEMA S RESTRICT\";\n        AkibanInformationSchema ais = factory();\n        \n        assertNotNull(ais.getTable(\"s\", \"t\"));\n        \n        StatementNode stmt = parser.parseStatement(sql);\n        assertTrue (stmt instanceof DropSchemaNode);\n        DDLFunctions ddlFunctions = new TableDDLTest.DDLFunctionsMock(ais);\n        \n        SchemaDDL.dropSchema(ddlFunctions, null, (DropSchemaNode)stmt, null);\n    }", "signature": "void dropSchemaUsed()", "full_signature": "@Test(expected=ReferencedSchemaException.class) public void dropSchemaUsed()", "class_method_signature": "SchemaDDLTest.dropSchemaUsed()", "testcase": true, "constructor": false, "invocations": ["factory", "assertNotNull", "getTable", "parseStatement", "assertTrue", "dropSchema"]}, "focal_class": {"identifier": "SchemaDDL", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "SchemaDDL", "parameters": "()", "modifiers": "private", "return": "", "signature": " SchemaDDL()", "full_signature": "private  SchemaDDL()", "class_method_signature": "SchemaDDL.SchemaDDL()", "testcase": false, "constructor": true}, {"identifier": "createSchema", "parameters": "(AkibanInformationSchema ais,\n                                   String defaultSchemaName,\n                                   CreateSchemaNode createSchema,\n                                   QueryContext context)", "modifiers": "public static", "return": "void", "signature": "void createSchema(AkibanInformationSchema ais,\n                                   String defaultSchemaName,\n                                   CreateSchemaNode createSchema,\n                                   QueryContext context)", "full_signature": "public static void createSchema(AkibanInformationSchema ais,\n                                   String defaultSchemaName,\n                                   CreateSchemaNode createSchema,\n                                   QueryContext context)", "class_method_signature": "SchemaDDL.createSchema(AkibanInformationSchema ais,\n                                   String defaultSchemaName,\n                                   CreateSchemaNode createSchema,\n                                   QueryContext context)", "testcase": false, "constructor": false}, {"identifier": "dropSchema", "parameters": "(DDLFunctions ddlFunctions,\n            Session session,\n            DropSchemaNode dropSchema,\n            QueryContext context)", "modifiers": "public static", "return": "void", "signature": "void dropSchema(DDLFunctions ddlFunctions,\n            Session session,\n            DropSchemaNode dropSchema,\n            QueryContext context)", "full_signature": "public static void dropSchema(DDLFunctions ddlFunctions,\n            Session session,\n            DropSchemaNode dropSchema,\n            QueryContext context)", "class_method_signature": "SchemaDDL.dropSchema(DDLFunctions ddlFunctions,\n            Session session,\n            DropSchemaNode dropSchema,\n            QueryContext context)", "testcase": false, "constructor": false}], "file": "fdb-sql-layer-core/src/main/java/com/foundationdb/sql/aisddl/SchemaDDL.java"}, "focal_method": {"identifier": "dropSchema", "parameters": "(DDLFunctions ddlFunctions,\n            Session session,\n            DropSchemaNode dropSchema,\n            QueryContext context)", "modifiers": "public static", "return": "void", "body": "public static void dropSchema (DDLFunctions ddlFunctions,\n            Session session,\n            DropSchemaNode dropSchema,\n            QueryContext context)\n    {\n        AkibanInformationSchema ais = ddlFunctions.getAIS(session);\n        final String schemaName = dropSchema.getSchemaName();\n\n        Schema curSchema = ais.getSchema(schemaName);\n        if((curSchema == null) &&\n           skipOrThrow(context, dropSchema.getExistenceCheck(), curSchema, new NoSuchSchemaException(schemaName))) {\n            return;\n        }\n        // 1 == RESTRICT, meaning no drop if the schema isn't empty\n        if (dropSchema.getDropBehavior() == StatementType.DROP_RESTRICT ||\n                dropSchema.getDropBehavior() == StatementType.DROP_DEFAULT)\n            throw new ReferencedSchemaException(schemaName);\n        // If the schema isn't used by any existing tables, it has effectively\n        // been dropped, so the drop \"succeeds\".\n        else if (dropSchema.getDropBehavior() == StatementType.DROP_CASCADE)\n            ddlFunctions.dropSchema(session, schemaName);\n    }", "signature": "void dropSchema(DDLFunctions ddlFunctions,\n            Session session,\n            DropSchemaNode dropSchema,\n            QueryContext context)", "full_signature": "public static void dropSchema(DDLFunctions ddlFunctions,\n            Session session,\n            DropSchemaNode dropSchema,\n            QueryContext context)", "class_method_signature": "SchemaDDL.dropSchema(DDLFunctions ddlFunctions,\n            Session session,\n            DropSchemaNode dropSchema,\n            QueryContext context)", "testcase": false, "constructor": false, "invocations": ["getAIS", "getSchemaName", "getSchema", "skipOrThrow", "getExistenceCheck", "getDropBehavior", "getDropBehavior", "getDropBehavior", "dropSchema"]}, "repository": {"repo_id": 32884360, "url": "https://github.com/jaytaylor/sql-layer", "language": "Java", "is_fork": false, "fork_count": 120, "stargazer_count": 77, "size": 138665, "license": "licensed"}}