{"test_class": {"identifier": "FileTxnLogTest", "superclass": "extends ZKTestCase", "interfaces": "", "fields": [{"original_string": "protected static final Logger LOG = LoggerFactory.getLogger(FileTxnLogTest.class);", "modifier": "protected static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(FileTxnLogTest.class)", "var_name": "LOG"}, {"original_string": "private static final int KB = 1024;", "modifier": "private static final", "type": "int", "declarator": "KB = 1024", "var_name": "KB"}], "file": "zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java"}, "test_case": {"identifier": "testSetPreallocSize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSetPreallocSize() {\n    long customPreallocSize = 10101;\n    FileTxnLog.setPreallocSize(customPreallocSize);\n    Assert.assertThat(FilePadding.getPreAllocSize(), is(equalTo(customPreallocSize)));\n  }", "signature": "void testSetPreallocSize()", "full_signature": "@Test public void testSetPreallocSize()", "class_method_signature": "FileTxnLogTest.testSetPreallocSize()", "testcase": true, "constructor": false, "invocations": ["setPreallocSize", "assertThat", "getPreAllocSize", "is", "equalTo"]}, "focal_class": {"identifier": "FileTxnLog", "superclass": "", "interfaces": "implements TxnLog", "fields": [{"original_string": "private static final Logger LOG;", "modifier": "private static final", "type": "Logger", "declarator": "LOG", "var_name": "LOG"}, {"original_string": "public final static int TXNLOG_MAGIC =\n        ByteBuffer.wrap(\"ZKLG\".getBytes()).getInt();", "modifier": "public final static", "type": "int", "declarator": "TXNLOG_MAGIC =\n        ByteBuffer.wrap(\"ZKLG\".getBytes()).getInt()", "var_name": "TXNLOG_MAGIC"}, {"original_string": "public final static int VERSION = 2;", "modifier": "public final static", "type": "int", "declarator": "VERSION = 2", "var_name": "VERSION"}, {"original_string": "public static final String LOG_FILE_PREFIX = \"log\";", "modifier": "public static final", "type": "String", "declarator": "LOG_FILE_PREFIX = \"log\"", "var_name": "LOG_FILE_PREFIX"}, {"original_string": "static final String FSYNC_WARNING_THRESHOLD_MS_PROPERTY = \"fsync.warningthresholdms\";", "modifier": "static final", "type": "String", "declarator": "FSYNC_WARNING_THRESHOLD_MS_PROPERTY = \"fsync.warningthresholdms\"", "var_name": "FSYNC_WARNING_THRESHOLD_MS_PROPERTY"}, {"original_string": "static final String ZOOKEEPER_FSYNC_WARNING_THRESHOLD_MS_PROPERTY = \"zookeeper.\" + FSYNC_WARNING_THRESHOLD_MS_PROPERTY;", "modifier": "static final", "type": "String", "declarator": "ZOOKEEPER_FSYNC_WARNING_THRESHOLD_MS_PROPERTY = \"zookeeper.\" + FSYNC_WARNING_THRESHOLD_MS_PROPERTY", "var_name": "ZOOKEEPER_FSYNC_WARNING_THRESHOLD_MS_PROPERTY"}, {"original_string": "private final static long fsyncWarningThresholdMS;", "modifier": "private final static", "type": "long", "declarator": "fsyncWarningThresholdMS", "var_name": "fsyncWarningThresholdMS"}, {"original_string": "long lastZxidSeen;", "modifier": "", "type": "long", "declarator": "lastZxidSeen", "var_name": "lastZxidSeen"}, {"original_string": "volatile BufferedOutputStream logStream = null;", "modifier": "volatile", "type": "BufferedOutputStream", "declarator": "logStream = null", "var_name": "logStream"}, {"original_string": "volatile OutputArchive oa;", "modifier": "volatile", "type": "OutputArchive", "declarator": "oa", "var_name": "oa"}, {"original_string": "volatile FileOutputStream fos = null;", "modifier": "volatile", "type": "FileOutputStream", "declarator": "fos = null", "var_name": "fos"}, {"original_string": "File logDir;", "modifier": "", "type": "File", "declarator": "logDir", "var_name": "logDir"}, {"original_string": "private final boolean forceSync = !System.getProperty(\"zookeeper.forceSync\", \"yes\").equals(\"no\");", "modifier": "private final", "type": "boolean", "declarator": "forceSync = !System.getProperty(\"zookeeper.forceSync\", \"yes\").equals(\"no\")", "var_name": "forceSync"}, {"original_string": "long dbId;", "modifier": "", "type": "long", "declarator": "dbId", "var_name": "dbId"}, {"original_string": "private LinkedList<FileOutputStream> streamsToFlush =\n        new LinkedList<FileOutputStream>();", "modifier": "private", "type": "LinkedList<FileOutputStream>", "declarator": "streamsToFlush =\n        new LinkedList<FileOutputStream>()", "var_name": "streamsToFlush"}, {"original_string": "File logFileWrite = null;", "modifier": "", "type": "File", "declarator": "logFileWrite = null", "var_name": "logFileWrite"}, {"original_string": "private FilePadding filePadding = new FilePadding();", "modifier": "private", "type": "FilePadding", "declarator": "filePadding = new FilePadding()", "var_name": "filePadding"}, {"original_string": "private ServerStats serverStats;", "modifier": "private", "type": "ServerStats", "declarator": "serverStats", "var_name": "serverStats"}, {"original_string": "private volatile long syncElapsedMS = -1L;", "modifier": "private volatile", "type": "long", "declarator": "syncElapsedMS = -1L", "var_name": "syncElapsedMS"}], "methods": [{"identifier": "FileTxnLog", "parameters": "(File logDir)", "modifiers": "public", "return": "", "signature": " FileTxnLog(File logDir)", "full_signature": "public  FileTxnLog(File logDir)", "class_method_signature": "FileTxnLog.FileTxnLog(File logDir)", "testcase": false, "constructor": true}, {"identifier": "setPreallocSize", "parameters": "(long size)", "modifiers": "public static", "return": "void", "signature": "void setPreallocSize(long size)", "full_signature": "public static void setPreallocSize(long size)", "class_method_signature": "FileTxnLog.setPreallocSize(long size)", "testcase": false, "constructor": false}, {"identifier": "setServerStats", "parameters": "(ServerStats serverStats)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void setServerStats(ServerStats serverStats)", "full_signature": "@Override public synchronized void setServerStats(ServerStats serverStats)", "class_method_signature": "FileTxnLog.setServerStats(ServerStats serverStats)", "testcase": false, "constructor": false}, {"identifier": "makeChecksumAlgorithm", "parameters": "()", "modifiers": "protected", "return": "Checksum", "signature": "Checksum makeChecksumAlgorithm()", "full_signature": "protected Checksum makeChecksumAlgorithm()", "class_method_signature": "FileTxnLog.makeChecksumAlgorithm()", "testcase": false, "constructor": false}, {"identifier": "rollLog", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void rollLog()", "full_signature": "public synchronized void rollLog()", "class_method_signature": "FileTxnLog.rollLog()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void close()", "full_signature": "public synchronized void close()", "class_method_signature": "FileTxnLog.close()", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(TxnHeader hdr, Record txn)", "modifiers": "public synchronized", "return": "boolean", "signature": "boolean append(TxnHeader hdr, Record txn)", "full_signature": "public synchronized boolean append(TxnHeader hdr, Record txn)", "class_method_signature": "FileTxnLog.append(TxnHeader hdr, Record txn)", "testcase": false, "constructor": false}, {"identifier": "getLogFiles", "parameters": "(File[] logDirList,long snapshotZxid)", "modifiers": "public static", "return": "File[]", "signature": "File[] getLogFiles(File[] logDirList,long snapshotZxid)", "full_signature": "public static File[] getLogFiles(File[] logDirList,long snapshotZxid)", "class_method_signature": "FileTxnLog.getLogFiles(File[] logDirList,long snapshotZxid)", "testcase": false, "constructor": false}, {"identifier": "getLastLoggedZxid", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getLastLoggedZxid()", "full_signature": "public long getLastLoggedZxid()", "class_method_signature": "FileTxnLog.getLastLoggedZxid()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(TxnIterator itr)", "modifiers": "private", "return": "void", "signature": "void close(TxnIterator itr)", "full_signature": "private void close(TxnIterator itr)", "class_method_signature": "FileTxnLog.close(TxnIterator itr)", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void commit()", "full_signature": "public synchronized void commit()", "class_method_signature": "FileTxnLog.commit()", "testcase": false, "constructor": false}, {"identifier": "getTxnLogSyncElapsedTime", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getTxnLogSyncElapsedTime()", "full_signature": "public long getTxnLogSyncElapsedTime()", "class_method_signature": "FileTxnLog.getTxnLogSyncElapsedTime()", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(long zxid)", "modifiers": "public", "return": "TxnIterator", "signature": "TxnIterator read(long zxid)", "full_signature": "public TxnIterator read(long zxid)", "class_method_signature": "FileTxnLog.read(long zxid)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(long zxid, boolean fastForward)", "modifiers": "public", "return": "TxnIterator", "signature": "TxnIterator read(long zxid, boolean fastForward)", "full_signature": "public TxnIterator read(long zxid, boolean fastForward)", "class_method_signature": "FileTxnLog.read(long zxid, boolean fastForward)", "testcase": false, "constructor": false}, {"identifier": "truncate", "parameters": "(long zxid)", "modifiers": "public", "return": "boolean", "signature": "boolean truncate(long zxid)", "full_signature": "public boolean truncate(long zxid)", "class_method_signature": "FileTxnLog.truncate(long zxid)", "testcase": false, "constructor": false}, {"identifier": "readHeader", "parameters": "(File file)", "modifiers": "private static", "return": "FileHeader", "signature": "FileHeader readHeader(File file)", "full_signature": "private static FileHeader readHeader(File file)", "class_method_signature": "FileTxnLog.readHeader(File file)", "testcase": false, "constructor": false}, {"identifier": "getDbId", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getDbId()", "full_signature": "public long getDbId()", "class_method_signature": "FileTxnLog.getDbId()", "testcase": false, "constructor": false}, {"identifier": "isForceSync", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isForceSync()", "full_signature": "public boolean isForceSync()", "class_method_signature": "FileTxnLog.isForceSync()", "testcase": false, "constructor": false}], "file": "zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java"}, "focal_method": {"identifier": "setPreallocSize", "parameters": "(long size)", "modifiers": "public static", "return": "void", "body": "public static void setPreallocSize(long size) {\n        FilePadding.setPreallocSize(size);\n    }", "signature": "void setPreallocSize(long size)", "full_signature": "public static void setPreallocSize(long size)", "class_method_signature": "FileTxnLog.setPreallocSize(long size)", "testcase": false, "constructor": false, "invocations": ["setPreallocSize"]}, "repository": {"repo_id": 230430206, "url": "https://github.com/boomblog/zookeeper-vip2", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 10, "size": 3105, "license": "licensed"}}