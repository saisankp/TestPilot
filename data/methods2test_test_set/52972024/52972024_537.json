{"test_class": {"identifier": "CachedCollectionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ICachedCollection collection;", "modifier": "private", "type": "ICachedCollection", "declarator": "collection", "var_name": "collection"}, {"original_string": "private IStorageConnection connection;", "modifier": "private", "type": "IStorageConnection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private String collectionName;", "modifier": "private", "type": "String", "declarator": "collectionName", "var_name": "collectionName"}, {"original_string": "private IField collectionNameField;", "modifier": "private", "type": "IField", "declarator": "collectionNameField", "var_name": "collectionNameField"}, {"original_string": "private IField keyNameField;", "modifier": "private", "type": "IField", "declarator": "keyNameField", "var_name": "keyNameField"}, {"original_string": "private IField keyValueField;", "modifier": "private", "type": "IField", "declarator": "keyValueField", "var_name": "keyValueField"}, {"original_string": "private IField specificKeyNameField;", "modifier": "private", "type": "IField", "declarator": "specificKeyNameField", "var_name": "specificKeyNameField"}, {"original_string": "private IField documentField;", "modifier": "private", "type": "IField", "declarator": "documentField", "var_name": "documentField"}, {"original_string": "private IField idField;", "modifier": "private", "type": "IField", "declarator": "idField", "var_name": "idField"}, {"original_string": "private IField isActiveField;", "modifier": "private", "type": "IField", "declarator": "isActiveField", "var_name": "isActiveField"}, {"original_string": "private IField searchResultField;", "modifier": "private", "type": "IField", "declarator": "searchResultField", "var_name": "searchResultField"}], "file": "CoreFeatures/Database/CachedCollection/src/test/java/info/smart_tools/smartactors/database/cached_collection/CachedCollectionTest.java"}, "test_case": {"identifier": "ShouldSetPreviousActiveValue_When_ExecuteExceptionIsThrown", "parameters": "()", "modifiers": "@Test(expected = UpsertCacheItemException.class) public", "return": "void", "body": "@Test(expected = UpsertCacheItemException.class)\n    public void ShouldSetPreviousActiveValue_When_ExecuteExceptionIsThrown() throws Exception {\n\n        IObject query = mock(IObject.class);\n\n        IObject upsertQuery = mock(IObject.class);\n        IKey keyIObject = mock(IKey.class);\n        when(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.iobject.IObject\")).thenReturn(keyIObject);\n        when(IOC.resolve(keyIObject)).thenReturn(upsertQuery);\n        when(specificKeyNameField.in(query)).thenReturn(\"key\");\n\n        IDatabaseTask upsertTask = mock(IDatabaseTask.class);\n        IKey keyTask = mock(IKey.class);\n        when(Keys.getOrAdd(\"db.cached_collection.upsert\")).thenReturn(keyTask);\n        when(IOC.resolve(eq(keyTask), any(), eq(collectionName), eq(query))).thenReturn(upsertTask);\n        doThrow(new TaskExecutionException(\"\")).when(upsertTask).execute();\n\n        try {\n            collection.upsert(query);\n        } catch (UpsertCacheItemException e) {\n            verify(upsertTask).execute();\n            verify(specificKeyNameField, never()).in(eq(query));\n            verify(isActiveField, times(1)).out(eq(query), eq(true));\n            verify(isActiveField, times(1)).out(eq(query), eq(true));\n            throw e;\n        }\n        fail();\n    }", "signature": "void ShouldSetPreviousActiveValue_When_ExecuteExceptionIsThrown()", "full_signature": "@Test(expected = UpsertCacheItemException.class) public void ShouldSetPreviousActiveValue_When_ExecuteExceptionIsThrown()", "class_method_signature": "CachedCollectionTest.ShouldSetPreviousActiveValue_When_ExecuteExceptionIsThrown()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "thenReturn", "when", "getOrAdd", "thenReturn", "when", "resolve", "thenReturn", "when", "in", "mock", "mock", "thenReturn", "when", "getOrAdd", "thenReturn", "when", "resolve", "eq", "any", "eq", "eq", "execute", "when", "doThrow", "upsert", "execute", "verify", "in", "verify", "never", "eq", "out", "verify", "times", "eq", "eq", "out", "verify", "times", "eq", "eq", "fail"]}, "focal_class": {"identifier": "CachedCollection", "superclass": "", "interfaces": "implements ICachedCollection", "fields": [{"original_string": "private IField collectionNameField;", "modifier": "private", "type": "IField", "declarator": "collectionNameField", "var_name": "collectionNameField"}, {"original_string": "private IField keyNameField;", "modifier": "private", "type": "IField", "declarator": "keyNameField", "var_name": "keyNameField"}, {"original_string": "private IField specificKeyNameField;", "modifier": "private", "type": "IField", "declarator": "specificKeyNameField", "var_name": "specificKeyNameField"}, {"original_string": "private IField idField;", "modifier": "private", "type": "IField", "declarator": "idField", "var_name": "idField"}, {"original_string": "private IField isActiveField;", "modifier": "private", "type": "IField", "declarator": "isActiveField", "var_name": "isActiveField"}, {"original_string": "private IPool connectionPool;", "modifier": "private", "type": "IPool", "declarator": "connectionPool", "var_name": "connectionPool"}, {"original_string": "private String collectionName;", "modifier": "private", "type": "String", "declarator": "collectionName", "var_name": "collectionName"}, {"original_string": "private String keyName;", "modifier": "private", "type": "String", "declarator": "keyName", "var_name": "keyName"}, {"original_string": "private ConcurrentMap<String, List<IObject>> map;", "modifier": "private", "type": "ConcurrentMap<String, List<IObject>>", "declarator": "map", "var_name": "map"}], "methods": [{"identifier": "CachedCollection", "parameters": "(final IObject config)", "modifiers": "public", "return": "", "signature": " CachedCollection(final IObject config)", "full_signature": "public  CachedCollection(final IObject config)", "class_method_signature": "CachedCollection.CachedCollection(final IObject config)", "testcase": false, "constructor": true}, {"identifier": "getItems", "parameters": "(final String key)", "modifiers": "@Override public", "return": "List<IObject>", "signature": "List<IObject> getItems(final String key)", "full_signature": "@Override public List<IObject> getItems(final String key)", "class_method_signature": "CachedCollection.getItems(final String key)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(final IObject message)", "modifiers": "@Override public", "return": "void", "signature": "void delete(final IObject message)", "full_signature": "@Override public void delete(final IObject message)", "class_method_signature": "CachedCollection.delete(final IObject message)", "testcase": false, "constructor": false}, {"identifier": "upsert", "parameters": "(final IObject message)", "modifiers": "@Override public", "return": "void", "signature": "void upsert(final IObject message)", "full_signature": "@Override public void upsert(final IObject message)", "class_method_signature": "CachedCollection.upsert(final IObject message)", "testcase": false, "constructor": false}, {"identifier": "clearCache", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clearCache()", "full_signature": "@Override public void clearCache()", "class_method_signature": "CachedCollection.clearCache()", "testcase": false, "constructor": false}], "file": "CoreFeatures/Database/CachedCollection/src/main/java/info/smart_tools/smartactors/database/cached_collection/CachedCollection.java"}, "focal_method": {"identifier": "upsert", "parameters": "(final IObject message)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void upsert(final IObject message) throws UpsertCacheItemException {\n\n        try {\n            try (IPoolGuard poolGuard = new PoolGuard(connectionPool)) {\n                Boolean isActive = isActiveField.in(message);\n                isActiveField.out(message, true);\n                IDatabaseTask upsertTask = IOC.resolve(\n                    Keys.getOrAdd(\"db.cached_collection.upsert\"),\n                    poolGuard.getObject(),\n                    collectionName,\n                    message\n                );\n                try {\n                    upsertTask.execute();\n                } catch (TaskExecutionException e) {\n                    isActiveField.out(message, isActive);\n                    throw new UpsertCacheItemException(\"Error during execution upsert task.\", e);\n                }\n            } catch (PoolGuardException e) {\n                throw new UpsertCacheItemException(\"Can't get connection from pool.\", e);\n            } catch (InvalidArgumentException e) {\n                throw new UpsertCacheItemException(\"Error during operate with isActive field.\", e);\n            }\n            String key = specificKeyNameField.in(message);\n            List<IObject> items = map.get(key);\n            if (items != null && !items.isEmpty()) {\n                Boolean isInsert = true;\n                for (IObject obj : items) {\n                    if (idField.in(obj).equals(idField.in(message))) {\n                        items.remove(obj);\n                        items.add(message);\n                        isInsert = false;\n                        break;\n                    }\n                }\n\n                if (isInsert) {\n                    items.add(message);\n                }\n            } else {\n                map.put(key, new ArrayList<>(Arrays.asList(message)));\n            }\n        } catch (InvalidArgumentException | ReadValueException | ChangeValueException e) {\n            throw new UpsertCacheItemException(\"Can't add or update cached object.\", e);\n        } catch (ResolutionException e) {\n            throw new UpsertCacheItemException(\"Can't resolve cached object.\", e);\n        }\n    }", "signature": "void upsert(final IObject message)", "full_signature": "@Override public void upsert(final IObject message)", "class_method_signature": "CachedCollection.upsert(final IObject message)", "testcase": false, "constructor": false, "invocations": ["in", "out", "resolve", "getOrAdd", "getObject", "execute", "out", "in", "get", "isEmpty", "equals", "in", "in", "remove", "add", "add", "put", "asList"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}