{"test_class": {"identifier": "BondSigmaElectronegativityDescriptorTest", "superclass": "extends BondDescriptorTest", "interfaces": "", "fields": [], "file": "descriptor/qsarbond/src/test/java/org/openscience/cdk/qsar/descriptors/bond/BondSigmaElectronegativityDescriptorTest.java"}, "test_case": {"identifier": "testBondSigmaElectronegativityDescriptor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBondSigmaElectronegativityDescriptor() throws java.lang.Exception {\n        double[] testResult = {2.5882, 1.1894};/*\n                                                * from Petra online:\n                                                * http://www2.\n                                                * chemie.uni-erlangen\n                                                * .de/services\n                                                * /petra/smiles.phtml\n                                                */\n        Integer[] params = new Integer[1];\n\n        SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance());\n        IAtomContainer mol = sp.parseSmiles(\"CF\");\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(mol);\n        addExplicitHydrogens(mol);\n        LonePairElectronChecker lpcheck = new LonePairElectronChecker();\n        lpcheck.saturate(mol);\n\n        for (int i = 0; i < 2; i++) {\n            params[0] = 6;\n            descriptor.setParameters(params);\n            double result = ((DoubleResult) descriptor.calculate(mol.getBond(i), mol).getValue()).doubleValue();\n            Assert.assertEquals(testResult[i], result, 0.01);\n        }\n\n    }", "signature": "void testBondSigmaElectronegativityDescriptor()", "full_signature": "@Test public void testBondSigmaElectronegativityDescriptor()", "class_method_signature": "BondSigmaElectronegativityDescriptorTest.testBondSigmaElectronegativityDescriptor()", "testcase": true, "constructor": false, "invocations": ["getInstance", "parseSmiles", "percieveAtomTypesAndConfigureAtoms", "addExplicitHydrogens", "saturate", "setParameters", "doubleValue", "getValue", "calculate", "getBond", "assertEquals"]}, "focal_class": {"identifier": "BondSigmaElectronegativityDescriptor", "superclass": "extends AbstractBondDescriptor", "interfaces": "implements IBondDescriptor", "fields": [{"original_string": "private int maxIterations = 6;", "modifier": "private", "type": "int", "declarator": "maxIterations = 6", "var_name": "maxIterations"}, {"original_string": "private Electronegativity electronegativity;", "modifier": "private", "type": "Electronegativity", "declarator": "electronegativity", "var_name": "electronegativity"}, {"original_string": "private static final String[] NAMES = {\"elecSigB\"};", "modifier": "private static final", "type": "String[]", "declarator": "NAMES = {\"elecSigB\"}", "var_name": "NAMES"}], "methods": [{"identifier": "BondSigmaElectronegativityDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " BondSigmaElectronegativityDescriptor()", "full_signature": "public  BondSigmaElectronegativityDescriptor()", "class_method_signature": "BondSigmaElectronegativityDescriptor.BondSigmaElectronegativityDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "BondSigmaElectronegativityDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "BondSigmaElectronegativityDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "BondSigmaElectronegativityDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "BondSigmaElectronegativityDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "getDummyDescriptorValue", "parameters": "(Exception e)", "modifiers": "private", "return": "DescriptorValue", "signature": "DescriptorValue getDummyDescriptorValue(Exception e)", "full_signature": "private DescriptorValue getDummyDescriptorValue(Exception e)", "class_method_signature": "BondSigmaElectronegativityDescriptor.getDummyDescriptorValue(Exception e)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IBond aBond, IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IBond aBond, IAtomContainer atomContainer)", "full_signature": "@Override public DescriptorValue calculate(IBond aBond, IAtomContainer atomContainer)", "class_method_signature": "BondSigmaElectronegativityDescriptor.calculate(IBond aBond, IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "BondSigmaElectronegativityDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "BondSigmaElectronegativityDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}], "file": "descriptor/qsarbond/src/main/java/org/openscience/cdk/qsar/descriptors/bond/BondSigmaElectronegativityDescriptor.java"}, "focal_method": {"identifier": "BondSigmaElectronegativityDescriptor", "parameters": "()", "modifiers": "public", "return": "", "body": "public BondSigmaElectronegativityDescriptor() {\n        electronegativity = new Electronegativity();\n    }", "signature": " BondSigmaElectronegativityDescriptor()", "full_signature": "public  BondSigmaElectronegativityDescriptor()", "class_method_signature": "BondSigmaElectronegativityDescriptor.BondSigmaElectronegativityDescriptor()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}