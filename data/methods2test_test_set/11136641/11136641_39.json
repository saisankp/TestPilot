{"test_class": {"identifier": "TransactionAwareContextSourceProxyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ContextSource contextSourceMock;", "modifier": "private", "type": "ContextSource", "declarator": "contextSourceMock", "var_name": "contextSourceMock"}, {"original_string": "private TransactionAwareContextSourceProxy tested;", "modifier": "private", "type": "TransactionAwareContextSourceProxy", "declarator": "tested", "var_name": "tested"}, {"original_string": "private LdapContext ldapContextMock;", "modifier": "private", "type": "LdapContext", "declarator": "ldapContextMock", "var_name": "ldapContextMock"}, {"original_string": "private DirContext dirContextMock;", "modifier": "private", "type": "DirContext", "declarator": "dirContextMock", "var_name": "dirContextMock"}], "file": "core/src/test/java/org/springframework/ldap/transaction/compensating/manager/TransactionAwareContextSourceProxyTest.java"}, "test_case": {"identifier": "testGetReadWriteContext_LdapContext", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetReadWriteContext_LdapContext() {\n        when(contextSourceMock.getReadWriteContext()).thenReturn(ldapContextMock);\n\n        DirContext result = tested.getReadWriteContext();\n\n        assertThat(result).isNotNull();\n        assertThat(result instanceof LdapContext).isTrue();\n        assertThat(result instanceof DirContextProxy).isTrue();\n    }", "signature": "void testGetReadWriteContext_LdapContext()", "full_signature": "@Test public void testGetReadWriteContext_LdapContext()", "class_method_signature": "TransactionAwareContextSourceProxyTest.testGetReadWriteContext_LdapContext()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getReadWriteContext", "getReadWriteContext", "isNotNull", "assertThat", "isTrue", "assertThat", "isTrue", "assertThat"]}, "focal_class": {"identifier": "TransactionAwareContextSourceProxy", "superclass": "extends DelegatingBaseLdapPathContextSourceSupport", "interfaces": "implements ContextSource", "fields": [{"original_string": "private ContextSource target;", "modifier": "private", "type": "ContextSource", "declarator": "target", "var_name": "target"}], "methods": [{"identifier": "TransactionAwareContextSourceProxy", "parameters": "(ContextSource target)", "modifiers": "public", "return": "", "signature": " TransactionAwareContextSourceProxy(ContextSource target)", "full_signature": "public  TransactionAwareContextSourceProxy(ContextSource target)", "class_method_signature": "TransactionAwareContextSourceProxy.TransactionAwareContextSourceProxy(ContextSource target)", "testcase": false, "constructor": true}, {"identifier": "getTarget", "parameters": "()", "modifiers": "@Override public", "return": "ContextSource", "signature": "ContextSource getTarget()", "full_signature": "@Override public ContextSource getTarget()", "class_method_signature": "TransactionAwareContextSourceProxy.getTarget()", "testcase": false, "constructor": false}, {"identifier": "getReadOnlyContext", "parameters": "()", "modifiers": "@Override public", "return": "DirContext", "signature": "DirContext getReadOnlyContext()", "full_signature": "@Override public DirContext getReadOnlyContext()", "class_method_signature": "TransactionAwareContextSourceProxy.getReadOnlyContext()", "testcase": false, "constructor": false}, {"identifier": "getTransactionAwareDirContextProxy", "parameters": "(DirContext context,\n            ContextSource target)", "modifiers": "private", "return": "DirContext", "signature": "DirContext getTransactionAwareDirContextProxy(DirContext context,\n            ContextSource target)", "full_signature": "private DirContext getTransactionAwareDirContextProxy(DirContext context,\n            ContextSource target)", "class_method_signature": "TransactionAwareContextSourceProxy.getTransactionAwareDirContextProxy(DirContext context,\n            ContextSource target)", "testcase": false, "constructor": false}, {"identifier": "getReadWriteContext", "parameters": "()", "modifiers": "@Override public", "return": "DirContext", "signature": "DirContext getReadWriteContext()", "full_signature": "@Override public DirContext getReadWriteContext()", "class_method_signature": "TransactionAwareContextSourceProxy.getReadWriteContext()", "testcase": false, "constructor": false}, {"identifier": "getContext", "parameters": "(String principal, String credentials)", "modifiers": "@Override public", "return": "DirContext", "signature": "DirContext getContext(String principal, String credentials)", "full_signature": "@Override public DirContext getContext(String principal, String credentials)", "class_method_signature": "TransactionAwareContextSourceProxy.getContext(String principal, String credentials)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/springframework/ldap/transaction/compensating/manager/TransactionAwareContextSourceProxy.java"}, "focal_method": {"identifier": "getReadWriteContext", "parameters": "()", "modifiers": "@Override public", "return": "DirContext", "body": "@Override\n    public DirContext getReadWriteContext() {\n        DirContextHolder contextHolder = (DirContextHolder) TransactionSynchronizationManager\n                .getResource(target);\n        DirContext ctx = null;\n\n        if (contextHolder != null) {\n            ctx = contextHolder.getCtx();\n        }\n\n        if (ctx == null) {\n            ctx = target.getReadWriteContext();\n            if (contextHolder != null) {\n                contextHolder.setCtx(ctx);\n            }\n        }\n        return getTransactionAwareDirContextProxy(ctx, target);\n    }", "signature": "DirContext getReadWriteContext()", "full_signature": "@Override public DirContext getReadWriteContext()", "class_method_signature": "TransactionAwareContextSourceProxy.getReadWriteContext()", "testcase": false, "constructor": false, "invocations": ["getResource", "getCtx", "getReadWriteContext", "setCtx", "getTransactionAwareDirContextProxy"]}, "repository": {"repo_id": 11136641, "url": "https://github.com/spring-projects/spring-ldap", "language": "Java", "is_fork": false, "fork_count": 433, "stargazer_count": 240, "size": 24447, "license": "licensed"}}