{"test_class": {"identifier": "BloomFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public BloomFilter bf;", "modifier": "public", "type": "BloomFilter", "declarator": "bf", "var_name": "bf"}, {"original_string": "static final int ELEMENTS = 10000;", "modifier": "static final", "type": "int", "declarator": "ELEMENTS = 10000", "var_name": "ELEMENTS"}], "file": "ml/streaminer/src/test/java/org/streaminer/stream/membership/BloomFilterTest.java"}, "test_case": {"identifier": "testAdd", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAdd() {\n        System.out.println(\"add\");\n        \n        for (int i = 0; i < 100; i++) {\n            String val = UUID.randomUUID().toString();\n            Key k = new Key(val.getBytes());\n            bf.add(k);\n            assertTrue(bf.membershipTest(k));\n        }\n    }", "signature": "void testAdd()", "full_signature": "@Test public void testAdd()", "class_method_signature": "BloomFilterTest.testAdd()", "testcase": true, "constructor": false, "invocations": ["println", "toString", "randomUUID", "getBytes", "add", "assertTrue", "membershipTest"]}, "focal_class": {"identifier": "BloomFilter", "superclass": "extends AbstractFilter", "interfaces": "", "fields": [{"original_string": "private static final byte[] bitvalues = new byte[] {\n    (byte)0x01,\n    (byte)0x02,\n    (byte)0x04,\n    (byte)0x08,\n    (byte)0x10,\n    (byte)0x20,\n    (byte)0x40,\n    (byte)0x80\n  };", "modifier": "private static final", "type": "byte[]", "declarator": "bitvalues = new byte[] {\n    (byte)0x01,\n    (byte)0x02,\n    (byte)0x04,\n    (byte)0x08,\n    (byte)0x10,\n    (byte)0x20,\n    (byte)0x40,\n    (byte)0x80\n  }", "var_name": "bitvalues"}, {"original_string": "BitSet bits;", "modifier": "", "type": "BitSet", "declarator": "bits", "var_name": "bits"}], "methods": [{"identifier": "BloomFilter", "parameters": "()", "modifiers": "public", "return": "", "signature": " BloomFilter()", "full_signature": "public  BloomFilter()", "class_method_signature": "BloomFilter.BloomFilter()", "testcase": false, "constructor": true}, {"identifier": "BloomFilter", "parameters": "(int vectorSize, int nbHash, int hashType)", "modifiers": "public", "return": "", "signature": " BloomFilter(int vectorSize, int nbHash, int hashType)", "full_signature": "public  BloomFilter(int vectorSize, int nbHash, int hashType)", "class_method_signature": "BloomFilter.BloomFilter(int vectorSize, int nbHash, int hashType)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(Key key)", "modifiers": "@Override public", "return": "void", "signature": "void add(Key key)", "full_signature": "@Override public void add(Key key)", "class_method_signature": "BloomFilter.add(Key key)", "testcase": false, "constructor": false}, {"identifier": "and", "parameters": "(AbstractFilter filter)", "modifiers": "@Override public", "return": "void", "signature": "void and(AbstractFilter filter)", "full_signature": "@Override public void and(AbstractFilter filter)", "class_method_signature": "BloomFilter.and(AbstractFilter filter)", "testcase": false, "constructor": false}, {"identifier": "membershipTest", "parameters": "(Key key)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean membershipTest(Key key)", "full_signature": "@Override public boolean membershipTest(Key key)", "class_method_signature": "BloomFilter.membershipTest(Key key)", "testcase": false, "constructor": false}, {"identifier": "not", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void not()", "full_signature": "@Override public void not()", "class_method_signature": "BloomFilter.not()", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(AbstractFilter filter)", "modifiers": "@Override public", "return": "void", "signature": "void or(AbstractFilter filter)", "full_signature": "@Override public void or(AbstractFilter filter)", "class_method_signature": "BloomFilter.or(AbstractFilter filter)", "testcase": false, "constructor": false}, {"identifier": "xor", "parameters": "(AbstractFilter filter)", "modifiers": "@Override public", "return": "void", "signature": "void xor(AbstractFilter filter)", "full_signature": "@Override public void xor(AbstractFilter filter)", "class_method_signature": "BloomFilter.xor(AbstractFilter filter)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "BloomFilter.toString()", "testcase": false, "constructor": false}, {"identifier": "getVectorSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getVectorSize()", "full_signature": "public int getVectorSize()", "class_method_signature": "BloomFilter.getVectorSize()", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(DataOutput out)", "modifiers": "@Override public", "return": "void", "signature": "void write(DataOutput out)", "full_signature": "@Override public void write(DataOutput out)", "class_method_signature": "BloomFilter.write(DataOutput out)", "testcase": false, "constructor": false}, {"identifier": "readFields", "parameters": "(DataInput in)", "modifiers": "@Override public", "return": "void", "signature": "void readFields(DataInput in)", "full_signature": "@Override public void readFields(DataInput in)", "class_method_signature": "BloomFilter.readFields(DataInput in)", "testcase": false, "constructor": false}, {"identifier": "getNBytes", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int getNBytes()", "full_signature": "private int getNBytes()", "class_method_signature": "BloomFilter.getNBytes()", "testcase": false, "constructor": false}], "file": "ml/streaminer/src/main/java/org/streaminer/stream/membership/BloomFilter.java"}, "focal_method": {"identifier": "add", "parameters": "(Key key)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void add(Key key) {\n    if(key == null) {\n      throw new NullPointerException(\"key cannot be null\");\n    }\n\n    int[] h = hash.hash(key);\n    hash.clear();\n\n    for(int i = 0; i < nbHash; i++) {\n      bits.set(h[i]);\n    }\n  }", "signature": "void add(Key key)", "full_signature": "@Override public void add(Key key)", "class_method_signature": "BloomFilter.add(Key key)", "testcase": false, "constructor": false, "invocations": ["hash", "clear", "set"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}