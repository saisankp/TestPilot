{"test_class": {"identifier": "NotificationIconDecoratorTest", "superclass": "extends BaseNotificationDecoratorTest<NotificationIconDecorator>", "interfaces": "", "fields": [{"original_string": "private Context mContext;", "modifier": "private", "type": "Context", "declarator": "mContext", "var_name": "mContext"}, {"original_string": "private Resources mResources;", "modifier": "private", "type": "Resources", "declarator": "mResources", "var_name": "mResources"}], "file": "sdk-libs/halo-notifications/src/test/java/com/mobgen/halo/android/notifications/decorator/NotificationIconDecoratorTest.java"}, "test_case": {"identifier": "emptyIconTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void emptyIconTest() {\n        final boolean[] marker = new boolean[1];\n        PackageManager manager = mock(PackageManager.class);\n        when(mContext.getPackageManager()).thenReturn(manager);\n        ApplicationInfo info = mock(ApplicationInfo.class);\n        info.icon = 2;\n        try {\n            when(manager.getApplicationInfo(null, PackageManager.GET_META_DATA)).thenReturn(info);\n        } catch (PackageManager.NameNotFoundException e) {\n            Assert.fail();\n        }\n        Bundle bundle = BundleTestUtils.builder().build();\n        when(getBuilder().setSmallIcon(any(Integer.class))).then(new Answer<Object>() {\n            @Override\n            public Object answer(InvocationOnMock invocation) throws Throwable {\n                marker[0] = true;\n                return null;\n            }\n        });\n        getDecorator().decorate(getBuilder(), bundle);\n        Assert.assertTrue(marker[0]);\n    }", "signature": "void emptyIconTest()", "full_signature": "@Test public void emptyIconTest()", "class_method_signature": "NotificationIconDecoratorTest.emptyIconTest()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getPackageManager", "mock", "thenReturn", "when", "getApplicationInfo", "fail", "build", "builder", "then", "when", "setSmallIcon", "getBuilder", "any", "decorate", "getDecorator", "getBuilder", "assertTrue"]}, "focal_class": {"identifier": "NotificationIconDecorator", "superclass": "extends HaloNotificationDecorator", "interfaces": "", "fields": [{"original_string": "private Context mContext;", "modifier": "private", "type": "Context", "declarator": "mContext", "var_name": "mContext"}], "methods": [{"identifier": "NotificationIconDecorator", "parameters": "(Context context, HaloNotificationDecorator decorator)", "modifiers": "public", "return": "", "signature": " NotificationIconDecorator(Context context, HaloNotificationDecorator decorator)", "full_signature": "public  NotificationIconDecorator(Context context, HaloNotificationDecorator decorator)", "class_method_signature": "NotificationIconDecorator.NotificationIconDecorator(Context context, HaloNotificationDecorator decorator)", "testcase": false, "constructor": true}, {"identifier": "decorate", "parameters": "(@NonNull NotificationCompat.Builder builder, @NonNull Bundle bundle)", "modifiers": "@Override public", "return": "NotificationCompat.Builder", "signature": "NotificationCompat.Builder decorate(@NonNull NotificationCompat.Builder builder, @NonNull Bundle bundle)", "full_signature": "@Override public NotificationCompat.Builder decorate(@NonNull NotificationCompat.Builder builder, @NonNull Bundle bundle)", "class_method_signature": "NotificationIconDecorator.decorate(@NonNull NotificationCompat.Builder builder, @NonNull Bundle bundle)", "testcase": false, "constructor": false}], "file": "sdk-libs/halo-notifications/src/main/java/com/mobgen/halo/android/notifications/decorator/NotificationIconDecorator.java"}, "focal_method": {"identifier": "decorate", "parameters": "(@NonNull NotificationCompat.Builder builder, @NonNull Bundle bundle)", "modifiers": "@Override public", "return": "NotificationCompat.Builder", "body": "@Override\n    public NotificationCompat.Builder decorate(@NonNull NotificationCompat.Builder builder, @NonNull Bundle bundle) {\n        String iconName = bundle.getString(\"icon\");\n        if (TextUtils.isEmpty(iconName)) {\n            iconName = \"\";\n        }\n        Resources resources = mContext.getResources();\n        int drawableId = resources.getIdentifier(iconName, \"drawable\", mContext.getPackageName());\n        if (drawableId == 0) {\n            drawableId = resources.getIdentifier(iconName, \"mipmap\", mContext.getPackageName());\n        }\n        if (drawableId == 0) { // Get the default application icon\n            try {\n                drawableId = mContext.getPackageManager().getApplicationInfo(mContext.getPackageName(), PackageManager.GET_META_DATA).icon;\n            } catch (PackageManager.NameNotFoundException e) {\n                Halog.e(getClass(), \"Could not get the application icon.\");\n            }\n        }\n        builder.setSmallIcon(drawableId);\n        return chain(builder, bundle);\n    }", "signature": "NotificationCompat.Builder decorate(@NonNull NotificationCompat.Builder builder, @NonNull Bundle bundle)", "full_signature": "@Override public NotificationCompat.Builder decorate(@NonNull NotificationCompat.Builder builder, @NonNull Bundle bundle)", "class_method_signature": "NotificationIconDecorator.decorate(@NonNull NotificationCompat.Builder builder, @NonNull Bundle bundle)", "testcase": false, "constructor": false, "invocations": ["getString", "isEmpty", "getResources", "getIdentifier", "getPackageName", "getIdentifier", "getPackageName", "getApplicationInfo", "getPackageManager", "getPackageName", "e", "getClass", "setSmallIcon", "chain"]}, "repository": {"repo_id": 72189814, "url": "https://github.com/mobgen/halo-android", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 6, "size": 3343, "license": "licensed"}}