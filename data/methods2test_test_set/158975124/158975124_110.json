{"test_class": {"identifier": "CompressionRatioTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final IoTDBConfig CONFIG = IoTDBDescriptor.getInstance().getConfig();", "modifier": "private static final", "type": "IoTDBConfig", "declarator": "CONFIG = IoTDBDescriptor.getInstance().getConfig()", "var_name": "CONFIG"}, {"original_string": "private CompressionRatio compressionRatio = CompressionRatio.getInstance();", "modifier": "private", "type": "CompressionRatio", "declarator": "compressionRatio = CompressionRatio.getInstance()", "var_name": "compressionRatio"}, {"original_string": "private static final String directory = FilePathUtils.regularizePath(CONFIG.getSystemDir())\n      + CompressionRatio.COMPRESSION_RATIO_DIR;", "modifier": "private static final", "type": "String", "declarator": "directory = FilePathUtils.regularizePath(CONFIG.getSystemDir())\n      + CompressionRatio.COMPRESSION_RATIO_DIR", "var_name": "directory"}], "file": "server/src/test/java/org/apache/iotdb/db/conf/adapter/CompressionRatioTest.java"}, "test_case": {"identifier": "testRestore", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testRestore() throws IOException {\n    double compressionRatioSum = 0;\n    int calcuTimes = 0;\n    if (new File(directory, String.format(Locale.ENGLISH, CompressionRatio.RATIO_FILE_PATH_FORMAT, compressionRatioSum , calcuTimes)).exists()) {\n      fail();\n    }\n    int compressionRatio = 10;\n    for(int i = 0; i < 100 ; i+= compressionRatio){\n      this.compressionRatio.updateRatio(compressionRatio);\n      if (new File(directory, String.format(Locale.ENGLISH, CompressionRatio.RATIO_FILE_PATH_FORMAT, compressionRatioSum , calcuTimes)).exists()) {\n        fail();\n      }\n      calcuTimes++;\n      compressionRatioSum += compressionRatio;\n      if (!new File(directory, String.format(Locale.ENGLISH, CompressionRatio.RATIO_FILE_PATH_FORMAT, compressionRatioSum , calcuTimes)).exists()) {\n        fail();\n      }\n      assertEquals(0, Double\n          .compare(compressionRatioSum / calcuTimes, this.compressionRatio.getRatio()));\n    }\n    this.compressionRatio.restore();\n    assertEquals(10, this.compressionRatio.getCalcTimes());\n    assertEquals(0, Double\n        .compare(compressionRatioSum / calcuTimes, this.compressionRatio.getRatio()));\n  }", "signature": "void testRestore()", "full_signature": "@Test public void testRestore()", "class_method_signature": "CompressionRatioTest.testRestore()", "testcase": true, "constructor": false, "invocations": ["exists", "format", "fail", "updateRatio", "exists", "format", "fail", "exists", "format", "fail", "assertEquals", "compare", "getRatio", "restore", "assertEquals", "getCalcTimes", "assertEquals", "compare", "getRatio"]}, "focal_class": {"identifier": "CompressionRatio", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(CompressionRatio.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(CompressionRatio.class)", "var_name": "LOGGER"}, {"original_string": "private static final IoTDBConfig CONFIG = IoTDBDescriptor.getInstance().getConfig();", "modifier": "private static final", "type": "IoTDBConfig", "declarator": "CONFIG = IoTDBDescriptor.getInstance().getConfig()", "var_name": "CONFIG"}, {"original_string": "static final String COMPRESSION_RATIO_DIR = \"compression_ratio\";", "modifier": "static final", "type": "String", "declarator": "COMPRESSION_RATIO_DIR = \"compression_ratio\"", "var_name": "COMPRESSION_RATIO_DIR"}, {"original_string": "private static final String FILE_PREFIX = \"Ratio-\";", "modifier": "private static final", "type": "String", "declarator": "FILE_PREFIX = \"Ratio-\"", "var_name": "FILE_PREFIX"}, {"original_string": "private static final String SEPARATOR = \"-\";", "modifier": "private static final", "type": "String", "declarator": "SEPARATOR = \"-\"", "var_name": "SEPARATOR"}, {"original_string": "static final String RATIO_FILE_PATH_FORMAT = FILE_PREFIX + \"%f\" + SEPARATOR + \"%d\";", "modifier": "static final", "type": "String", "declarator": "RATIO_FILE_PATH_FORMAT = FILE_PREFIX + \"%f\" + SEPARATOR + \"%d\"", "var_name": "RATIO_FILE_PATH_FORMAT"}, {"original_string": "private static final double DEFAULT_COMPRESSION_RATIO = 2.0;", "modifier": "private static final", "type": "double", "declarator": "DEFAULT_COMPRESSION_RATIO = 2.0", "var_name": "DEFAULT_COMPRESSION_RATIO"}, {"original_string": "private AtomicDouble compressionRatio = new AtomicDouble(DEFAULT_COMPRESSION_RATIO);", "modifier": "private", "type": "AtomicDouble", "declarator": "compressionRatio = new AtomicDouble(DEFAULT_COMPRESSION_RATIO)", "var_name": "compressionRatio"}, {"original_string": "private double compressionRatioSum;", "modifier": "private", "type": "double", "declarator": "compressionRatioSum", "var_name": "compressionRatioSum"}, {"original_string": "private long calcTimes;", "modifier": "private", "type": "long", "declarator": "calcTimes", "var_name": "calcTimes"}, {"original_string": "private File directory;", "modifier": "private", "type": "File", "declarator": "directory", "var_name": "directory"}], "methods": [{"identifier": "CompressionRatio", "parameters": "()", "modifiers": "private", "return": "", "signature": " CompressionRatio()", "full_signature": "private  CompressionRatio()", "class_method_signature": "CompressionRatio.CompressionRatio()", "testcase": false, "constructor": true}, {"identifier": "updateRatio", "parameters": "(double currentCompressionRatio)", "modifiers": "public synchronized", "return": "void", "signature": "void updateRatio(double currentCompressionRatio)", "full_signature": "public synchronized void updateRatio(double currentCompressionRatio)", "class_method_signature": "CompressionRatio.updateRatio(double currentCompressionRatio)", "testcase": false, "constructor": false}, {"identifier": "getRatio", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getRatio()", "full_signature": "public double getRatio()", "class_method_signature": "CompressionRatio.getRatio()", "testcase": false, "constructor": false}, {"identifier": "persist", "parameters": "(File oldFile, File newFile)", "modifiers": "private", "return": "void", "signature": "void persist(File oldFile, File newFile)", "full_signature": "private void persist(File oldFile, File newFile)", "class_method_signature": "CompressionRatio.persist(File oldFile, File newFile)", "testcase": false, "constructor": false}, {"identifier": "checkDirectoryExist", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkDirectoryExist()", "full_signature": "private void checkDirectoryExist()", "class_method_signature": "CompressionRatio.checkDirectoryExist()", "testcase": false, "constructor": false}, {"identifier": "restore", "parameters": "()", "modifiers": "", "return": "void", "signature": "void restore()", "full_signature": " void restore()", "class_method_signature": "CompressionRatio.restore()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "", "return": "void", "signature": "void reset()", "full_signature": " void reset()", "class_method_signature": "CompressionRatio.reset()", "testcase": false, "constructor": false}, {"identifier": "getCompressionRatioSum", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getCompressionRatioSum()", "full_signature": "public double getCompressionRatioSum()", "class_method_signature": "CompressionRatio.getCompressionRatioSum()", "testcase": false, "constructor": false}, {"identifier": "getCalcTimes", "parameters": "()", "modifiers": "", "return": "long", "signature": "long getCalcTimes()", "full_signature": " long getCalcTimes()", "class_method_signature": "CompressionRatio.getCalcTimes()", "testcase": false, "constructor": false}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "CompressionRatio", "signature": "CompressionRatio getInstance()", "full_signature": "public static CompressionRatio getInstance()", "class_method_signature": "CompressionRatio.getInstance()", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/iotdb/db/conf/adapter/CompressionRatio.java"}, "focal_method": {"identifier": "restore", "parameters": "()", "modifiers": "", "return": "void", "body": "void restore() {\n    if (!directory.exists()) {\n      return;\n    }\n    File[] ratioFiles = directory.listFiles((dir, name) -> name.startsWith(FILE_PREFIX));\n    if (ratioFiles != null && ratioFiles.length > 0) {\n      long maxTimes = 0;\n      double maxCompressionRatioSum = 0;\n      int maxRatioIndex = 0;\n      for (int i = 0; i < ratioFiles.length; i++) {\n        String[] splits = ratioFiles[i].getName().split(\"-\");\n        long times = Long.parseLong(splits[2]);\n        if (times > maxTimes) {\n          maxTimes = times;\n          maxCompressionRatioSum = Double.parseDouble(splits[1]);\n          maxRatioIndex = i;\n        }\n      }\n      calcTimes = maxTimes;\n      compressionRatioSum = maxCompressionRatioSum;\n      if (calcTimes != 0) {\n        compressionRatio.set(compressionRatioSum / calcTimes);\n      }\n      LOGGER.debug(\n          \"After restoring from compression ratio file, compressionRatioSum = {}, calcTimes = {}\",\n          compressionRatioSum, calcTimes);\n      for (int i = 0; i < ratioFiles.length; i++) {\n        if (i != maxRatioIndex) {\n          ratioFiles[i].delete();\n        }\n      }\n    }\n  }", "signature": "void restore()", "full_signature": " void restore()", "class_method_signature": "CompressionRatio.restore()", "testcase": false, "constructor": false, "invocations": ["exists", "listFiles", "startsWith", "split", "getName", "parseLong", "parseDouble", "set", "debug", "delete"]}, "repository": {"repo_id": 158975124, "url": "https://github.com/apache/incubator-iotdb", "stars": 449, "created": "11/24/2018 9:29:17 PM +00:00", "updates": "2020-01-21T08:10:15+00:00", "fork": "False", "license": "licensed"}}