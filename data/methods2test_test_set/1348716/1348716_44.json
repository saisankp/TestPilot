{"test_class": {"identifier": "QuestionControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private QuestionController questionController;", "modifier": "private", "type": "QuestionController", "declarator": "questionController", "var_name": "questionController"}, {"original_string": "@Mock\n    private RequestContext requestContext;", "modifier": "@Mock\n    private", "type": "RequestContext", "declarator": "requestContext", "var_name": "requestContext"}, {"original_string": "@Mock\n    private QuestionnaireServiceFacade questionnaireServiceFacade;", "modifier": "@Mock\n    private", "type": "QuestionnaireServiceFacade", "declarator": "questionnaireServiceFacade", "var_name": "questionnaireServiceFacade"}, {"original_string": "private static final String TITLE = \"Title\";", "modifier": "private static final", "type": "String", "declarator": "TITLE = \"Title\"", "var_name": "TITLE"}, {"original_string": "@Mock\n    private MessageContext messageContext;", "modifier": "@Mock\n    private", "type": "MessageContext", "declarator": "messageContext", "var_name": "messageContext"}, {"original_string": "@Mock\n    private ModelMap model;", "modifier": "@Mock\n    private", "type": "ModelMap", "declarator": "model", "var_name": "model"}, {"original_string": "@Mock\n    private HttpServletRequest httpServletRequest;", "modifier": "@Mock\n    private", "type": "HttpServletRequest", "declarator": "httpServletRequest", "var_name": "httpServletRequest"}, {"original_string": "MifosBeanValidator validator = new MifosBeanValidator();", "modifier": "", "type": "MifosBeanValidator", "declarator": "validator = new MifosBeanValidator()", "var_name": "validator"}, {"original_string": "LocalValidatorFactoryBean targetValidator = new LocalValidatorFactoryBean();", "modifier": "", "type": "LocalValidatorFactoryBean", "declarator": "targetValidator = new LocalValidatorFactoryBean()", "var_name": "targetValidator"}], "file": "questionnaire/src/test/java/org/mifos/platform/questionnaire/ui/controller/QuestionControllerTest.java"}, "test_case": {"identifier": "testAddQuestionForFailureWhenLessThanTwoChoicesAreGivenForMultiSelect", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddQuestionForFailureWhenLessThanTwoChoicesAreGivenForMultiSelect() throws Exception {\n        QuestionForm questionForm = new QuestionForm();\n        questionForm.getCurrentQuestion().setText(\"  \" + TITLE + \"    \");\n        questionForm.getCurrentQuestion().setType(\"multiSelect\");\n        questionForm.getCurrentQuestion().setCurrentChoice(\"C1\");\n        questionForm.getCurrentQuestion().addAnswerChoice();\n        when(requestContext.getMessageContext()).thenReturn(messageContext);\n        String result = questionController.addQuestion(questionForm, requestContext, true);\n        Assert.assertThat(result, is(notNullValue()));\n        Assert.assertThat(result, is(\"failure\"));\n        Mockito.verify(requestContext).getMessageContext();\n        Mockito.verify(messageContext).addMessage(argThat(new MessageMatcher(\"questionnaire.error.question.choices\")));\n    }", "signature": "void testAddQuestionForFailureWhenLessThanTwoChoicesAreGivenForMultiSelect()", "full_signature": "@Test public void testAddQuestionForFailureWhenLessThanTwoChoicesAreGivenForMultiSelect()", "class_method_signature": "QuestionControllerTest.testAddQuestionForFailureWhenLessThanTwoChoicesAreGivenForMultiSelect()", "testcase": true, "constructor": false, "invocations": ["setText", "getCurrentQuestion", "setType", "getCurrentQuestion", "setCurrentChoice", "getCurrentQuestion", "addAnswerChoice", "getCurrentQuestion", "thenReturn", "when", "getMessageContext", "addQuestion", "assertThat", "is", "notNullValue", "assertThat", "is", "getMessageContext", "verify", "addMessage", "verify", "argThat"]}, "focal_class": {"identifier": "QuestionController", "superclass": "extends QuestionnaireController", "interfaces": "", "fields": [], "methods": [{"identifier": "QuestionController", "parameters": "()", "modifiers": "@SuppressWarnings({\"UnusedDeclaration\"}) public", "return": "", "signature": " QuestionController()", "full_signature": "@SuppressWarnings({\"UnusedDeclaration\"}) public  QuestionController()", "class_method_signature": "QuestionController.QuestionController()", "testcase": false, "constructor": true}, {"identifier": "QuestionController", "parameters": "(QuestionnaireServiceFacade questionnaireServiceFacade)", "modifiers": "public", "return": "", "signature": " QuestionController(QuestionnaireServiceFacade questionnaireServiceFacade)", "full_signature": "public  QuestionController(QuestionnaireServiceFacade questionnaireServiceFacade)", "class_method_signature": "QuestionController.QuestionController(QuestionnaireServiceFacade questionnaireServiceFacade)", "testcase": false, "constructor": true}, {"identifier": "getAllQuestions", "parameters": "(ModelMap model)", "modifiers": "@RequestMapping(\"/viewQuestions.ftl\") public", "return": "String", "signature": "String getAllQuestions(ModelMap model)", "full_signature": "@RequestMapping(\"/viewQuestions.ftl\") public String getAllQuestions(ModelMap model)", "class_method_signature": "QuestionController.getAllQuestions(ModelMap model)", "testcase": false, "constructor": false}, {"identifier": "addQuestion", "parameters": "(QuestionForm questionForm, RequestContext requestContext, boolean createMode)", "modifiers": "public", "return": "String", "signature": "String addQuestion(QuestionForm questionForm, RequestContext requestContext, boolean createMode)", "full_signature": "public String addQuestion(QuestionForm questionForm, RequestContext requestContext, boolean createMode)", "class_method_signature": "QuestionController.addQuestion(QuestionForm questionForm, RequestContext requestContext, boolean createMode)", "testcase": false, "constructor": false}, {"identifier": "addSmartChoiceTag", "parameters": "(QuestionForm questionForm, RequestContext requestContext, int choiceIndex)", "modifiers": "public", "return": "String", "signature": "String addSmartChoiceTag(QuestionForm questionForm, RequestContext requestContext, int choiceIndex)", "full_signature": "public String addSmartChoiceTag(QuestionForm questionForm, RequestContext requestContext, int choiceIndex)", "class_method_signature": "QuestionController.addSmartChoiceTag(QuestionForm questionForm, RequestContext requestContext, int choiceIndex)", "testcase": false, "constructor": false}, {"identifier": "validateSmartChoice", "parameters": "(QuestionForm questionForm, MessageContext context, int choiceIndex)", "modifiers": "private", "return": "boolean", "signature": "boolean validateSmartChoice(QuestionForm questionForm, MessageContext context, int choiceIndex)", "full_signature": "private boolean validateSmartChoice(QuestionForm questionForm, MessageContext context, int choiceIndex)", "class_method_signature": "QuestionController.validateSmartChoice(QuestionForm questionForm, MessageContext context, int choiceIndex)", "testcase": false, "constructor": false}, {"identifier": "validateQuestion", "parameters": "(QuestionForm questionForm, MessageContext context, boolean createMode)", "modifiers": "private", "return": "boolean", "signature": "boolean validateQuestion(QuestionForm questionForm, MessageContext context, boolean createMode)", "full_signature": "private boolean validateQuestion(QuestionForm questionForm, MessageContext context, boolean createMode)", "class_method_signature": "QuestionController.validateQuestion(QuestionForm questionForm, MessageContext context, boolean createMode)", "testcase": false, "constructor": false}, {"identifier": "checkDuplicateTextForEditOperation", "parameters": "(QuestionForm questionForm, boolean createMode, String text)", "modifiers": "private", "return": "boolean", "signature": "boolean checkDuplicateTextForEditOperation(QuestionForm questionForm, boolean createMode, String text)", "full_signature": "private boolean checkDuplicateTextForEditOperation(QuestionForm questionForm, boolean createMode, String text)", "class_method_signature": "QuestionController.checkDuplicateTextForEditOperation(QuestionForm questionForm, boolean createMode, String text)", "testcase": false, "constructor": false}, {"identifier": "checkDuplicateTitleForCreateOperation", "parameters": "(QuestionForm questionForm, boolean createMode)", "modifiers": "private", "return": "boolean", "signature": "boolean checkDuplicateTitleForCreateOperation(QuestionForm questionForm, boolean createMode)", "full_signature": "private boolean checkDuplicateTitleForCreateOperation(QuestionForm questionForm, boolean createMode)", "class_method_signature": "QuestionController.checkDuplicateTitleForCreateOperation(QuestionForm questionForm, boolean createMode)", "testcase": false, "constructor": false}, {"identifier": "removeQuestion", "parameters": "(QuestionForm questionForm, String questionTitle)", "modifiers": "public", "return": "void", "signature": "void removeQuestion(QuestionForm questionForm, String questionTitle)", "full_signature": "public void removeQuestion(QuestionForm questionForm, String questionTitle)", "class_method_signature": "QuestionController.removeQuestion(QuestionForm questionForm, String questionTitle)", "testcase": false, "constructor": false}, {"identifier": "createQuestions", "parameters": "(QuestionForm questionForm, RequestContext requestContext)", "modifiers": "public", "return": "String", "signature": "String createQuestions(QuestionForm questionForm, RequestContext requestContext)", "full_signature": "public String createQuestions(QuestionForm questionForm, RequestContext requestContext)", "class_method_signature": "QuestionController.createQuestions(QuestionForm questionForm, RequestContext requestContext)", "testcase": false, "constructor": false}, {"identifier": "getQuestionDetails", "parameters": "(QuestionForm questionForm)", "modifiers": "private", "return": "List<QuestionDetail>", "signature": "List<QuestionDetail> getQuestionDetails(QuestionForm questionForm)", "full_signature": "private List<QuestionDetail> getQuestionDetails(QuestionForm questionForm)", "class_method_signature": "QuestionController.getQuestionDetails(QuestionForm questionForm)", "testcase": false, "constructor": false}, {"identifier": "isDuplicateQuestion", "parameters": "(QuestionForm questionForm)", "modifiers": "private", "return": "boolean", "signature": "boolean isDuplicateQuestion(QuestionForm questionForm)", "full_signature": "private boolean isDuplicateQuestion(QuestionForm questionForm)", "class_method_signature": "QuestionController.isDuplicateQuestion(QuestionForm questionForm)", "testcase": false, "constructor": false}], "file": "questionnaire/src/main/java/org/mifos/platform/questionnaire/ui/controller/QuestionController.java"}, "focal_method": {"identifier": "addQuestion", "parameters": "(QuestionForm questionForm, RequestContext requestContext, boolean createMode)", "modifiers": "public", "return": "String", "body": "public String addQuestion(QuestionForm questionForm, RequestContext requestContext, boolean createMode) {\n        MessageContext context = requestContext.getMessageContext();\n        boolean result = validateQuestion(questionForm, context, createMode);\n        if (result) {\n            questionForm.addCurrentQuestion();\n        }\n        return result? \"success\": \"failure\";\n    }", "signature": "String addQuestion(QuestionForm questionForm, RequestContext requestContext, boolean createMode)", "full_signature": "public String addQuestion(QuestionForm questionForm, RequestContext requestContext, boolean createMode)", "class_method_signature": "QuestionController.addQuestion(QuestionForm questionForm, RequestContext requestContext, boolean createMode)", "testcase": false, "constructor": false, "invocations": ["getMessageContext", "validateQuestion", "addCurrentQuestion"]}, "repository": {"repo_id": 1348716, "url": "https://github.com/mifos/head", "language": "Java", "is_fork": false, "fork_count": 91, "stargazer_count": 55, "size": 532732, "license": "licensed"}}