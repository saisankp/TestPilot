{"test_class": {"identifier": "ModifiedLevenshteinDistanceTest", "superclass": "", "interfaces": "", "fields": [], "file": "backend/src/src-cvesearch/src/test/java/org/eclipse/sw360/cvesearch/datasource/matcher/ModifiedLevenshteinDistanceTest.java"}, "test_case": {"identifier": "testBasicRules", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBasicRules() {\n        String needle = \"needle\";\n        String neele = \"neele\";\n        String needDle = \"needDle\";\n\n        // equal strings have distance 0\n        assertThat(levenshteinMatch(needle,needle).getDistance(), is(0));\n\n        // appending or prepending adds 1 to the distance\n        assertThat(levenshteinMatch(needle,needle + \"a\").getDistance(), is(1));\n        assertThat(levenshteinMatch(needle, \"a\" + needle ).getDistance(), is(1));\n        assertThat(levenshteinMatch(needle, \"a\" + needle + \"a\").getDistance(), is(2));\n        assertThat(levenshteinMatch(needle, needDle).getDistance(), is(1));\n        assertThat(levenshteinMatch(needDle, needle).getDistance(), is(1));\n\n        // dropping adds 1 to the distance\n        assertThat(levenshteinMatch(needle, neele).getDistance(), is(1));\n        assertThat(levenshteinMatch(neele, needle).getDistance(), is(1));\n\n        // should be able to find the best match\n        assertThat(levenshteinMatch(needle, needle + \" \" + neele).getDistance(), is(0));\n        assertThat(levenshteinMatch(needle, neele + \" \" + needle).getDistance(), is(0));\n\n        // seperated by spaces does not change distance\n        assertThat(levenshteinMatch(needle,needle + \" a\").getDistance(), is(0));\n        assertThat(levenshteinMatch(needle, \"a \" + needle ).getDistance(), is(0));\n        assertThat(levenshteinMatch(needle, \"a\" + needle + \" a\").getDistance(), is(1));\n        assertThat(levenshteinMatch(needle, \"a \" + needle + \"a\").getDistance(), is(1));\n        assertThat(levenshteinMatch(needle, \"a \" + needle + \" a\").getDistance(), is(0));\n    }", "signature": "void testBasicRules()", "full_signature": "@Test public void testBasicRules()", "class_method_signature": "ModifiedLevenshteinDistanceTest.testBasicRules()", "testcase": true, "constructor": false, "invocations": ["assertThat", "getDistance", "levenshteinMatch", "is", "assertThat", "getDistance", "levenshteinMatch", "is", "assertThat", "getDistance", "levenshteinMatch", "is", "assertThat", "getDistance", "levenshteinMatch", "is", "assertThat", "getDistance", "levenshteinMatch", "is", "assertThat", "getDistance", "levenshteinMatch", "is", "assertThat", "getDistance", "levenshteinMatch", "is", "assertThat", "getDistance", "levenshteinMatch", "is", "assertThat", "getDistance", "levenshteinMatch", "is", "assertThat", "getDistance", "levenshteinMatch", "is", "assertThat", "getDistance", "levenshteinMatch", "is", "assertThat", "getDistance", "levenshteinMatch", "is", "assertThat", "getDistance", "levenshteinMatch", "is", "assertThat", "getDistance", "levenshteinMatch", "is", "assertThat", "getDistance", "levenshteinMatch", "is"]}, "focal_class": {"identifier": "ModifiedLevenshteinDistance", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "levenshteinMatch", "parameters": "(String needle, String haystack)", "modifiers": "public static", "return": "Match", "signature": "Match levenshteinMatch(String needle, String haystack)", "full_signature": "public static Match levenshteinMatch(String needle, String haystack)", "class_method_signature": "ModifiedLevenshteinDistance.levenshteinMatch(String needle, String haystack)", "testcase": false, "constructor": false}, {"identifier": "calculateModifiedLevenshteinDistance", "parameters": "(String needle, String haystack)", "modifiers": "public static", "return": "int", "signature": "int calculateModifiedLevenshteinDistance(String needle, String haystack)", "full_signature": "public static int calculateModifiedLevenshteinDistance(String needle, String haystack)", "class_method_signature": "ModifiedLevenshteinDistance.calculateModifiedLevenshteinDistance(String needle, String haystack)", "testcase": false, "constructor": false}, {"identifier": "calculateModifiedLevenshteinDistance", "parameters": "(String needle, String haystack, char space)", "modifiers": "public static", "return": "int", "signature": "int calculateModifiedLevenshteinDistance(String needle, String haystack, char space)", "full_signature": "public static int calculateModifiedLevenshteinDistance(String needle, String haystack, char space)", "class_method_signature": "ModifiedLevenshteinDistance.calculateModifiedLevenshteinDistance(String needle, String haystack, char space)", "testcase": false, "constructor": false}], "file": "backend/src/src-cvesearch/src/main/java/org/eclipse/sw360/cvesearch/datasource/matcher/ModifiedLevenshteinDistance.java"}, "focal_method": {"identifier": "levenshteinMatch", "parameters": "(String needle, String haystack)", "modifiers": "public static", "return": "Match", "body": "public static Match levenshteinMatch(String needle, String haystack){\n        return new Match(needle,\n                calculateModifiedLevenshteinDistance(needle, nullToEmptyString(haystack).replace(' ', '_')));\n    }", "signature": "Match levenshteinMatch(String needle, String haystack)", "full_signature": "public static Match levenshteinMatch(String needle, String haystack)", "class_method_signature": "ModifiedLevenshteinDistance.levenshteinMatch(String needle, String haystack)", "testcase": false, "constructor": false, "invocations": ["calculateModifiedLevenshteinDistance", "replace", "nullToEmptyString"]}, "repository": {"repo_id": 43326581, "url": "https://github.com/sw360/sw360portal", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 31, "size": 8770, "license": "licensed"}}