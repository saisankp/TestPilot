{"test_class": {"identifier": "MarshallingUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "spring-ws-core/src/test/java/org/springframework/ws/support/MarshallingUtilsTest.java"}, "test_case": {"identifier": "testMarshalMime", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testMarshalMime() throws Exception {\n\t\tMimeMarshaller marshallerMock = createMock(MimeMarshaller.class);\n\t\tMimeMessage messageMock = createMock(MimeMessage.class);\n\n\t\tResult result = new StringResult();\n\t\tObject marshalled = new Object();\n\t\texpect(messageMock.getPayloadResult()).andReturn(result);\n\t\tmarshallerMock.marshal(eq(marshalled), eq(result), isA(MimeContainer.class));\n\n\t\treplay(marshallerMock, messageMock);\n\n\t\tMarshallingUtils.marshal(marshallerMock, marshalled, messageMock);\n\n\t\tverify(marshallerMock, messageMock);\n\t}", "signature": "void testMarshalMime()", "full_signature": "@Test public void testMarshalMime()", "class_method_signature": "MarshallingUtilsTest.testMarshalMime()", "testcase": true, "constructor": false, "invocations": ["createMock", "createMock", "andReturn", "expect", "getPayloadResult", "marshal", "eq", "eq", "isA", "replay", "marshal", "verify"]}, "focal_class": {"identifier": "MarshallingUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "MarshallingUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " MarshallingUtils()", "full_signature": "private  MarshallingUtils()", "class_method_signature": "MarshallingUtils.MarshallingUtils()", "testcase": false, "constructor": true}, {"identifier": "unmarshal", "parameters": "(Unmarshaller unmarshaller, WebServiceMessage message)", "modifiers": "public static", "return": "Object", "signature": "Object unmarshal(Unmarshaller unmarshaller, WebServiceMessage message)", "full_signature": "public static Object unmarshal(Unmarshaller unmarshaller, WebServiceMessage message)", "class_method_signature": "MarshallingUtils.unmarshal(Unmarshaller unmarshaller, WebServiceMessage message)", "testcase": false, "constructor": false}, {"identifier": "marshal", "parameters": "(Marshaller marshaller, Object graph, WebServiceMessage message)", "modifiers": "public static", "return": "void", "signature": "void marshal(Marshaller marshaller, Object graph, WebServiceMessage message)", "full_signature": "public static void marshal(Marshaller marshaller, Object graph, WebServiceMessage message)", "class_method_signature": "MarshallingUtils.marshal(Marshaller marshaller, Object graph, WebServiceMessage message)", "testcase": false, "constructor": false}], "file": "spring-ws-core/src/main/java/org/springframework/ws/support/MarshallingUtils.java"}, "focal_method": {"identifier": "marshal", "parameters": "(Marshaller marshaller, Object graph, WebServiceMessage message)", "modifiers": "public static", "return": "void", "body": "public static void marshal(Marshaller marshaller, Object graph, WebServiceMessage message) throws IOException {\n\t\tif (marshaller instanceof MimeMarshaller && message instanceof MimeMessage) {\n\t\t\tMimeMarshaller mimeMarshaller = (MimeMarshaller) marshaller;\n\t\t\tMimeMessageContainer container = new MimeMessageContainer((MimeMessage) message);\n\t\t\tmimeMarshaller.marshal(graph, message.getPayloadResult(), container);\n\t\t} else {\n\t\t\tmarshaller.marshal(graph, message.getPayloadResult());\n\t\t}\n\t}", "signature": "void marshal(Marshaller marshaller, Object graph, WebServiceMessage message)", "full_signature": "public static void marshal(Marshaller marshaller, Object graph, WebServiceMessage message)", "class_method_signature": "MarshallingUtils.marshal(Marshaller marshaller, Object graph, WebServiceMessage message)", "testcase": false, "constructor": false, "invocations": ["marshal", "getPayloadResult", "marshal", "getPayloadResult"]}, "repository": {"repo_id": 7914484, "url": "https://github.com/spring-projects/spring-ws", "language": "Java", "is_fork": false, "fork_count": 232, "stargazer_count": 209, "size": 20360, "license": "licensed"}}