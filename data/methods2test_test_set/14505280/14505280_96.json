{"test_class": {"identifier": "HibernateLayerTest", "superclass": "extends AbstractHibernateLayerModelTest", "interfaces": "", "fields": [], "file": "plugin/layer-hibernate/hibernate/src/test/java/org/geomajas/layer/hibernate/HibernateLayerTest.java"}, "test_case": {"identifier": "testUpdate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testUpdate() throws Exception {\n\t\tHibernateTestFeature f1 = (HibernateTestFeature) layer.create(HibernateTestFeature.getDefaultInstance1(null));\n\t\tAssert.assertNotNull(f1.getId());\n\t\tObject feature = layer.read(f1.getId().toString());\n\t\tAssert.assertNotNull(\"The requested feature could not be found!\", feature);\n\n\t\t// Create a detached copy\n\t\tHibernateTestFeature detached = HibernateTestFeature.getDefaultInstance1(null);\n\t\tdetached.setId(((HibernateTestFeature) feature).getId());\n\t\tMap<String, Attribute> attributes = new HashMap<String, Attribute>();\n\t\tattributes.put(PARAM_TEXT_ATTR, new StringAttribute(\"new name\"));\n\t\tattributes.put(PARAM_FLOAT_ATTR, new FloatAttribute(5f));\n\t\tCalendar c = Calendar.getInstance();\n\t\tattributes.put(PARAM_DATE_ATTR, new DateAttribute(c.getTime()));\n\t\tattributes.put(PARAM_BOOLEAN_ATTR, new BooleanAttribute(false));\n\n\t\t// Set a ManyToOne attribute without an ID (a new one)\n\t\tattributes.put(PARAM_MANY_TO_ONE, HibernateTestManyToOne.getDefaultAttributeInstance1(null));\n\n\t\tlayer.getFeatureModel().setAttributes(detached, attributes);\n\t\tlayer.saveOrUpdate(detached);\n\n\t\tfeature = layer.read(f1.getId().toString());\n\t\tAssert.assertEquals(\"new name\", layer.getFeatureModel().getAttribute(feature, PARAM_TEXT_ATTR).getValue());\n\t\tAssert.assertEquals(5f, layer.getFeatureModel().getAttribute(feature, PARAM_FLOAT_ATTR).getValue());\n\t\tAssert.assertEquals(c.getTime(), layer.getFeatureModel().getAttribute(feature, PARAM_DATE_ATTR).getValue());\n\t\tAssert.assertEquals(false, layer.getFeatureModel().getAttribute(feature, PARAM_BOOLEAN_ATTR).getValue());\n\t\tManyToOneAttribute manytoOne = (ManyToOneAttribute) layer.getFeatureModel().getAttribute(feature,\n\t\t\t\tPARAM_MANY_TO_ONE);\n\t\tAssert.assertNotNull(manytoOne.getValue());\n\t\tAssert.assertNotNull(manytoOne.getValue().getId()); // Test for ID\n\t}", "signature": "void testUpdate()", "full_signature": "@Test public void testUpdate()", "class_method_signature": "HibernateLayerTest.testUpdate()", "testcase": true, "constructor": false, "invocations": ["create", "getDefaultInstance1", "assertNotNull", "getId", "read", "toString", "getId", "assertNotNull", "getDefaultInstance1", "setId", "getId", "put", "put", "getInstance", "put", "getTime", "put", "put", "getDefaultAttributeInstance1", "setAttributes", "getFeatureModel", "saveOrUpdate", "read", "toString", "getId", "assertEquals", "getValue", "getAttribute", "getFeatureModel", "assertEquals", "getValue", "getAttribute", "getFeatureModel", "assertEquals", "getTime", "getValue", "getAttribute", "getFeatureModel", "assertEquals", "getValue", "getAttribute", "getFeatureModel", "getAttribute", "getFeatureModel", "assertNotNull", "getValue", "assertNotNull", "getId", "getValue"]}, "focal_class": {"identifier": "HibernateLayer", "superclass": "extends HibernateLayerUtil", "interfaces": "implements VectorLayer, VectorLayerAssociationSupport,\n\t\tVectorLayerLazyFeatureConversionSupport", "fields": [{"original_string": "private FeatureModel featureModel;", "modifier": "private", "type": "FeatureModel", "declarator": "featureModel", "var_name": "featureModel"}, {"original_string": "private boolean scrollableResultSet;", "modifier": "private", "type": "boolean", "declarator": "scrollableResultSet", "var_name": "scrollableResultSet"}, {"original_string": "private DateFormat dateFormat = new SimpleDateFormat(\"dd/MM/yyyy\");", "modifier": "private", "type": "DateFormat", "declarator": "dateFormat = new SimpleDateFormat(\"dd/MM/yyyy\")", "var_name": "dateFormat"}, {"original_string": "@Autowired\n\tprivate FilterService filterService;", "modifier": "@Autowired\n\tprivate", "type": "FilterService", "declarator": "filterService", "var_name": "filterService"}, {"original_string": "@Autowired\n\tprivate DtoConverterService converterService;", "modifier": "@Autowired\n\tprivate", "type": "DtoConverterService", "declarator": "converterService", "var_name": "converterService"}, {"original_string": "@Autowired\n\tprivate GeoService geoService;", "modifier": "@Autowired\n\tprivate", "type": "GeoService", "declarator": "geoService", "var_name": "geoService"}, {"original_string": "@Autowired\n\tprivate ApplicationContext applicationContext;", "modifier": "@Autowired\n\tprivate", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}, {"original_string": "private CoordinateReferenceSystem crs;", "modifier": "private", "type": "CoordinateReferenceSystem", "declarator": "crs", "var_name": "crs"}, {"original_string": "private int srid;", "modifier": "private", "type": "int", "declarator": "srid", "var_name": "srid"}, {"original_string": "private String id;", "modifier": "private", "type": "String", "declarator": "id", "var_name": "id"}, {"original_string": "private boolean useLazyFeatureConversion = true;", "modifier": "private", "type": "boolean", "declarator": "useLazyFeatureConversion = true", "var_name": "useLazyFeatureConversion"}], "methods": [{"identifier": "getId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getId()", "full_signature": "@Override public String getId()", "class_method_signature": "HibernateLayer.getId()", "testcase": false, "constructor": false}, {"identifier": "setId", "parameters": "(String id)", "modifiers": "@Api public", "return": "void", "signature": "void setId(String id)", "full_signature": "@Api public void setId(String id)", "class_method_signature": "HibernateLayer.setId(String id)", "testcase": false, "constructor": false}, {"identifier": "getCrs", "parameters": "()", "modifiers": "@Override public", "return": "CoordinateReferenceSystem", "signature": "CoordinateReferenceSystem getCrs()", "full_signature": "@Override public CoordinateReferenceSystem getCrs()", "class_method_signature": "HibernateLayer.getCrs()", "testcase": false, "constructor": false}, {"identifier": "getFeatureModel", "parameters": "()", "modifiers": "@Override public", "return": "FeatureModel", "signature": "FeatureModel getFeatureModel()", "full_signature": "@Override public FeatureModel getFeatureModel()", "class_method_signature": "HibernateLayer.getFeatureModel()", "testcase": false, "constructor": false}, {"identifier": "useLazyFeatureConversion", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean useLazyFeatureConversion()", "full_signature": "@Override public boolean useLazyFeatureConversion()", "class_method_signature": "HibernateLayer.useLazyFeatureConversion()", "testcase": false, "constructor": false}, {"identifier": "setUseLazyFeatureConversion", "parameters": "(boolean useLazyFeatureConversion)", "modifiers": "@Api public", "return": "void", "signature": "void setUseLazyFeatureConversion(boolean useLazyFeatureConversion)", "full_signature": "@Api public void setUseLazyFeatureConversion(boolean useLazyFeatureConversion)", "class_method_signature": "HibernateLayer.setUseLazyFeatureConversion(boolean useLazyFeatureConversion)", "testcase": false, "constructor": false}, {"identifier": "setLayerInfo", "parameters": "(VectorLayerInfo layerInfo)", "modifiers": "@Api @Override public", "return": "void", "signature": "void setLayerInfo(VectorLayerInfo layerInfo)", "full_signature": "@Api @Override public void setLayerInfo(VectorLayerInfo layerInfo)", "class_method_signature": "HibernateLayer.setLayerInfo(VectorLayerInfo layerInfo)", "testcase": false, "constructor": false}, {"identifier": "postConstruct", "parameters": "()", "modifiers": "@PostConstruct @SuppressWarnings(\"unused\") protected", "return": "void", "signature": "void postConstruct()", "full_signature": "@PostConstruct @SuppressWarnings(\"unused\") protected void postConstruct()", "class_method_signature": "HibernateLayer.postConstruct()", "testcase": false, "constructor": false}, {"identifier": "isCreateCapable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCreateCapable()", "full_signature": "@Override public boolean isCreateCapable()", "class_method_signature": "HibernateLayer.isCreateCapable()", "testcase": false, "constructor": false}, {"identifier": "isUpdateCapable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isUpdateCapable()", "full_signature": "@Override public boolean isUpdateCapable()", "class_method_signature": "HibernateLayer.isUpdateCapable()", "testcase": false, "constructor": false}, {"identifier": "isDeleteCapable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDeleteCapable()", "full_signature": "@Override public boolean isDeleteCapable()", "class_method_signature": "HibernateLayer.isDeleteCapable()", "testcase": false, "constructor": false}, {"identifier": "setFeatureModel", "parameters": "(FeatureModel featureModel)", "modifiers": "@Api public", "return": "void", "signature": "void setFeatureModel(FeatureModel featureModel)", "full_signature": "@Api public void setFeatureModel(FeatureModel featureModel)", "class_method_signature": "HibernateLayer.setFeatureModel(FeatureModel featureModel)", "testcase": false, "constructor": false}, {"identifier": "setSessionFactory", "parameters": "(SessionFactory sessionFactory)", "modifiers": "@Api public", "return": "void", "signature": "void setSessionFactory(SessionFactory sessionFactory)", "full_signature": "@Api public void setSessionFactory(SessionFactory sessionFactory)", "class_method_signature": "HibernateLayer.setSessionFactory(SessionFactory sessionFactory)", "testcase": false, "constructor": false}, {"identifier": "getElements", "parameters": "(Filter filter, int offset, int maxResultSize)", "modifiers": "public", "return": "Iterator<?>", "signature": "Iterator<?> getElements(Filter filter, int offset, int maxResultSize)", "full_signature": "public Iterator<?> getElements(Filter filter, int offset, int maxResultSize)", "class_method_signature": "HibernateLayer.getElements(Filter filter, int offset, int maxResultSize)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Object feature)", "modifiers": "@Override public", "return": "Object", "signature": "Object create(Object feature)", "full_signature": "@Override public Object create(Object feature)", "class_method_signature": "HibernateLayer.create(Object feature)", "testcase": false, "constructor": false}, {"identifier": "saveOrUpdate", "parameters": "(Object feature)", "modifiers": "@Override public", "return": "Object", "signature": "Object saveOrUpdate(Object feature)", "full_signature": "@Override public Object saveOrUpdate(Object feature)", "class_method_signature": "HibernateLayer.saveOrUpdate(Object feature)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(String featureId)", "modifiers": "@Override public", "return": "void", "signature": "void delete(String featureId)", "full_signature": "@Override public void delete(String featureId)", "class_method_signature": "HibernateLayer.delete(String featureId)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(String featureId)", "modifiers": "@Override public", "return": "Object", "signature": "Object read(String featureId)", "full_signature": "@Override public Object read(String featureId)", "class_method_signature": "HibernateLayer.read(String featureId)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(Object feature)", "modifiers": "public", "return": "void", "signature": "void update(Object feature)", "full_signature": "public void update(Object feature)", "class_method_signature": "HibernateLayer.update(Object feature)", "testcase": false, "constructor": false}, {"identifier": "getBounds", "parameters": "()", "modifiers": "@Override public", "return": "Envelope", "signature": "Envelope getBounds()", "full_signature": "@Override public Envelope getBounds()", "class_method_signature": "HibernateLayer.getBounds()", "testcase": false, "constructor": false}, {"identifier": "getBounds", "parameters": "(Filter filter)", "modifiers": "public", "return": "Envelope", "signature": "Envelope getBounds(Filter filter)", "full_signature": "public Envelope getBounds(Filter filter)", "class_method_signature": "HibernateLayer.getBounds(Filter filter)", "testcase": false, "constructor": false}, {"identifier": "getAttributes", "parameters": "(String attributeName, Filter filter)", "modifiers": "@Override public", "return": "List<Attribute<?>>", "signature": "List<Attribute<?>> getAttributes(String attributeName, Filter filter)", "full_signature": "@Override public List<Attribute<?>> getAttributes(String attributeName, Filter filter)", "class_method_signature": "HibernateLayer.getAttributes(String attributeName, Filter filter)", "testcase": false, "constructor": false}, {"identifier": "getDateFormat", "parameters": "()", "modifiers": "public", "return": "DateFormat", "signature": "DateFormat getDateFormat()", "full_signature": "public DateFormat getDateFormat()", "class_method_signature": "HibernateLayer.getDateFormat()", "testcase": false, "constructor": false}, {"identifier": "setDateFormat", "parameters": "(DateFormat dateFormat)", "modifiers": "public", "return": "void", "signature": "void setDateFormat(DateFormat dateFormat)", "full_signature": "public void setDateFormat(DateFormat dateFormat)", "class_method_signature": "HibernateLayer.setDateFormat(DateFormat dateFormat)", "testcase": false, "constructor": false}, {"identifier": "isScrollableResultSet", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isScrollableResultSet()", "full_signature": "public boolean isScrollableResultSet()", "class_method_signature": "HibernateLayer.isScrollableResultSet()", "testcase": false, "constructor": false}, {"identifier": "setScrollableResultSet", "parameters": "(boolean scrollableResultSet)", "modifiers": "@Api public", "return": "void", "signature": "void setScrollableResultSet(boolean scrollableResultSet)", "full_signature": "@Api public void setScrollableResultSet(boolean scrollableResultSet)", "class_method_signature": "HibernateLayer.setScrollableResultSet(boolean scrollableResultSet)", "testcase": false, "constructor": false}, {"identifier": "enforceSrid", "parameters": "(Object feature)", "modifiers": "private", "return": "void", "signature": "void enforceSrid(Object feature)", "full_signature": "private void enforceSrid(Object feature)", "class_method_signature": "HibernateLayer.enforceSrid(Object feature)", "testcase": false, "constructor": false}, {"identifier": "getBoundsLocal", "parameters": "(Filter filter)", "modifiers": "private", "return": "Envelope", "signature": "Envelope getBoundsLocal(Filter filter)", "full_signature": "private Envelope getBoundsLocal(Filter filter)", "class_method_signature": "HibernateLayer.getBoundsLocal(Filter filter)", "testcase": false, "constructor": false}, {"identifier": "getFeature", "parameters": "(String featureId)", "modifiers": "private", "return": "Object", "signature": "Object getFeature(String featureId)", "full_signature": "private Object getFeature(String featureId)", "class_method_signature": "HibernateLayer.getFeature(String featureId)", "testcase": false, "constructor": false}, {"identifier": "getRecursiveAttributeInfo", "parameters": "(String name, List<AttributeInfo> infos)", "modifiers": "private", "return": "AssociationAttributeInfo", "signature": "AssociationAttributeInfo getRecursiveAttributeInfo(String name, List<AttributeInfo> infos)", "full_signature": "private AssociationAttributeInfo getRecursiveAttributeInfo(String name, List<AttributeInfo> infos)", "class_method_signature": "HibernateLayer.getRecursiveAttributeInfo(String name, List<AttributeInfo> infos)", "testcase": false, "constructor": false}], "file": "plugin/layer-hibernate/hibernate/src/main/java/org/geomajas/layer/hibernate/HibernateLayer.java"}, "focal_method": {"identifier": "update", "parameters": "(Object feature)", "modifiers": "public", "return": "void", "body": "public void update(Object feature) throws LayerException {\n\t\tSession session = getSessionFactory().getCurrentSession();\n\t\tsession.update(feature);\n\t}", "signature": "void update(Object feature)", "full_signature": "public void update(Object feature)", "class_method_signature": "HibernateLayer.update(Object feature)", "testcase": false, "constructor": false, "invocations": ["getCurrentSession", "getSessionFactory", "update"]}, "repository": {"repo_id": 14505280, "url": "https://github.com/geomajas/geomajas-project-server", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 13, "size": 124882, "license": "licensed"}}