{"test_class": {"identifier": "TreeDataIndexTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private double[][] features = {\n        {1., 2., 3., 4.},\n        {2., 3., 4., 1.},\n        {3., 4., 1., 2.},\n        {4., 1., 2., 3.}\n    };", "modifier": "private", "type": "double[][]", "declarator": "features = {\n        {1., 2., 3., 4.},\n        {2., 3., 4., 1.},\n        {3., 4., 1., 2.},\n        {4., 1., 2., 3.}\n    }", "var_name": "features"}, {"original_string": "private double[] labels = {1., 2., 3, 4.};", "modifier": "private", "type": "double[]", "declarator": "labels = {1., 2., 3, 4.}", "var_name": "labels"}, {"original_string": "private double[][] labelsInSortedOrder = {\n        {1., 4., 3., 2.},\n        {2., 1., 4., 3.},\n        {3., 2., 1., 4.},\n        {4., 3., 2., 1.}\n    };", "modifier": "private", "type": "double[][]", "declarator": "labelsInSortedOrder = {\n        {1., 4., 3., 2.},\n        {2., 1., 4., 3.},\n        {3., 2., 1., 4.},\n        {4., 3., 2., 1.}\n    }", "var_name": "labelsInSortedOrder"}, {"original_string": "private double[][][] featuresInSortedOrder = {\n        {\n            {1., 2., 3., 4.},\n            {4., 1., 2., 3.},\n            {3., 4., 1., 2.},\n            {2., 3., 4., 1.},\n        },\n        {\n            {2., 3., 4., 1.},\n            {1., 2., 3., 4.},\n            {4., 1., 2., 3.},\n            {3., 4., 1., 2.},\n        },\n        {\n            {3., 4., 1., 2.},\n            {2., 3., 4., 1.},\n            {1., 2., 3., 4.},\n            {4., 1., 2., 3.},\n        },\n        {\n            {4., 1., 2., 3.},\n            {3., 4., 1., 2.},\n            {2., 3., 4., 1.},\n            {1., 2., 3., 4.},\n        }\n    };", "modifier": "private", "type": "double[][][]", "declarator": "featuresInSortedOrder = {\n        {\n            {1., 2., 3., 4.},\n            {4., 1., 2., 3.},\n            {3., 4., 1., 2.},\n            {2., 3., 4., 1.},\n        },\n        {\n            {2., 3., 4., 1.},\n            {1., 2., 3., 4.},\n            {4., 1., 2., 3.},\n            {3., 4., 1., 2.},\n        },\n        {\n            {3., 4., 1., 2.},\n            {2., 3., 4., 1.},\n            {1., 2., 3., 4.},\n            {4., 1., 2., 3.},\n        },\n        {\n            {4., 1., 2., 3.},\n            {3., 4., 1., 2.},\n            {2., 3., 4., 1.},\n            {1., 2., 3., 4.},\n        }\n    }", "var_name": "featuresInSortedOrder"}, {"original_string": "private TreeDataIndex idx = new TreeDataIndex(features, labels);", "modifier": "private", "type": "TreeDataIndex", "declarator": "idx = new TreeDataIndex(features, labels)", "var_name": "idx"}], "file": "modules/ml/src/test/java/org/apache/ignite/ml/tree/data/TreeDataIndexTest.java"}, "test_case": {"identifier": "filterTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void filterTest() {\n        TreeFilter filter1 = features -> features[0] > 2;\n        TreeFilter filter2 = features -> features[1] > 2;\n        TreeFilter filterAnd = filter1.and(features -> features[1] > 2);\n\n        TreeDataIndex filtered1 = idx.filter(filter1);\n        TreeDataIndex filtered2 = filtered1.filter(filter2);\n        TreeDataIndex filtered3 = idx.filter(filterAnd);\n\n        assertEquals(2, filtered1.rowsCount());\n        assertEquals(4, filtered1.columnsCount());\n        assertEquals(1, filtered2.rowsCount());\n        assertEquals(4, filtered2.columnsCount());\n        assertEquals(1, filtered3.rowsCount());\n        assertEquals(4, filtered3.columnsCount());\n\n        double[] obj1 = {3, 4, 1, 2};\n        double[] obj2 = {4, 1, 2, 3};\n        double[][] restObjs = new double[][] {obj1, obj2};\n        int[][] restObjIndxInSortedOrderPerFeatures = new int[][] {\n            {0, 1}, //feature 0\n            {1, 0}, //feature 1\n            {0, 1}, //feature 2\n            {0, 1}, //feature 3\n        };\n\n        for (int featureId = 0; featureId < filtered1.columnsCount(); featureId++) {\n            for (int k = 0; k < filtered1.rowsCount(); k++) {\n                int objId = restObjIndxInSortedOrderPerFeatures[featureId][k];\n                double[] obj = restObjs[objId];\n                assertArrayEquals(obj, filtered1.featuresInSortedOrder(k, featureId), 0.01);\n            }\n        }\n\n        for (int featureId = 0; featureId < filtered2.columnsCount(); featureId++) {\n            for (int k = 0; k < filtered2.rowsCount(); k++) {\n                assertArrayEquals(obj1, filtered2.featuresInSortedOrder(k, featureId), 0.01);\n                assertArrayEquals(obj1, filtered3.featuresInSortedOrder(k, featureId), 0.01);\n            }\n        }\n    }", "signature": "void filterTest()", "full_signature": "@Test public void filterTest()", "class_method_signature": "TreeDataIndexTest.filterTest()", "testcase": true, "constructor": false, "invocations": ["and", "filter", "filter", "filter", "assertEquals", "rowsCount", "assertEquals", "columnsCount", "assertEquals", "rowsCount", "assertEquals", "columnsCount", "assertEquals", "rowsCount", "assertEquals", "columnsCount", "columnsCount", "rowsCount", "assertArrayEquals", "featuresInSortedOrder", "columnsCount", "rowsCount", "assertArrayEquals", "featuresInSortedOrder", "assertArrayEquals", "featuresInSortedOrder"]}, "focal_class": {"identifier": "TreeDataIndex", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final int[][] idx;", "modifier": "private final", "type": "int[][]", "declarator": "idx", "var_name": "idx"}, {"original_string": "private final double[][] features;", "modifier": "private final", "type": "double[][]", "declarator": "features", "var_name": "features"}, {"original_string": "private final double[] labels;", "modifier": "private final", "type": "double[]", "declarator": "labels", "var_name": "labels"}], "methods": [{"identifier": "TreeDataIndex", "parameters": "(double[][] features, double[] labels)", "modifiers": "public", "return": "", "signature": " TreeDataIndex(double[][] features, double[] labels)", "full_signature": "public  TreeDataIndex(double[][] features, double[] labels)", "class_method_signature": "TreeDataIndex.TreeDataIndex(double[][] features, double[] labels)", "testcase": false, "constructor": true}, {"identifier": "TreeDataIndex", "parameters": "(int[][] idxProj, double[][] features, double[] labels)", "modifiers": "private", "return": "", "signature": " TreeDataIndex(int[][] idxProj, double[][] features, double[] labels)", "full_signature": "private  TreeDataIndex(int[][] idxProj, double[][] features, double[] labels)", "class_method_signature": "TreeDataIndex.TreeDataIndex(int[][] idxProj, double[][] features, double[] labels)", "testcase": false, "constructor": true}, {"identifier": "labelInSortedOrder", "parameters": "(int k, int featureId)", "modifiers": "public", "return": "double", "signature": "double labelInSortedOrder(int k, int featureId)", "full_signature": "public double labelInSortedOrder(int k, int featureId)", "class_method_signature": "TreeDataIndex.labelInSortedOrder(int k, int featureId)", "testcase": false, "constructor": false}, {"identifier": "featuresInSortedOrder", "parameters": "(int k, int featureId)", "modifiers": "public", "return": "double[]", "signature": "double[] featuresInSortedOrder(int k, int featureId)", "full_signature": "public double[] featuresInSortedOrder(int k, int featureId)", "class_method_signature": "TreeDataIndex.featuresInSortedOrder(int k, int featureId)", "testcase": false, "constructor": false}, {"identifier": "featureInSortedOrder", "parameters": "(int k, int featureId)", "modifiers": "public", "return": "double", "signature": "double featureInSortedOrder(int k, int featureId)", "full_signature": "public double featureInSortedOrder(int k, int featureId)", "class_method_signature": "TreeDataIndex.featureInSortedOrder(int k, int featureId)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(TreeFilter filter)", "modifiers": "public", "return": "TreeDataIndex", "signature": "TreeDataIndex filter(TreeFilter filter)", "full_signature": "public TreeDataIndex filter(TreeFilter filter)", "class_method_signature": "TreeDataIndex.filter(TreeFilter filter)", "testcase": false, "constructor": false}, {"identifier": "rowsCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int rowsCount()", "full_signature": "public int rowsCount()", "class_method_signature": "TreeDataIndex.rowsCount()", "testcase": false, "constructor": false}, {"identifier": "columnsCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int columnsCount()", "full_signature": "public int columnsCount()", "class_method_signature": "TreeDataIndex.columnsCount()", "testcase": false, "constructor": false}, {"identifier": "sortIndex", "parameters": "(double[][] features, int col, int from, int to)", "modifiers": "private", "return": "void", "signature": "void sortIndex(double[][] features, int col, int from, int to)", "full_signature": "private void sortIndex(double[][] features, int col, int from, int to)", "class_method_signature": "TreeDataIndex.sortIndex(double[][] features, int col, int from, int to)", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/tree/data/TreeDataIndex.java"}, "focal_method": {"identifier": "filter", "parameters": "(TreeFilter filter)", "modifiers": "public", "return": "TreeDataIndex", "body": "public TreeDataIndex filter(TreeFilter filter) {\n        int projSize = 0;\n        for (int i = 0; i < rowsCount(); i++) {\n            if (filter.test(featuresInSortedOrder(i, 0)))\n                projSize++;\n        }\n\n        int[][] prj = new int[projSize][columnsCount()];\n        for (int feature = 0; feature < columnsCount(); feature++) {\n            int ptr = 0;\n            for (int row = 0; row < rowsCount(); row++) {\n                if (filter.test(featuresInSortedOrder(row, feature)))\n                    prj[ptr++][feature] = idx[row][feature];\n            }\n        }\n\n        return new TreeDataIndex(prj, features, labels);\n    }", "signature": "TreeDataIndex filter(TreeFilter filter)", "full_signature": "public TreeDataIndex filter(TreeFilter filter)", "class_method_signature": "TreeDataIndex.filter(TreeFilter filter)", "testcase": false, "constructor": false, "invocations": ["rowsCount", "test", "featuresInSortedOrder", "columnsCount", "columnsCount", "rowsCount", "test", "featuresInSortedOrder"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}