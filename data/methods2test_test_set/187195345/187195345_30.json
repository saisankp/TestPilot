{"test_class": {"identifier": "LocRefPointTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int LINE_FOR_COMPARISON_TEST = 19;", "modifier": "private static final", "type": "int", "declarator": "LINE_FOR_COMPARISON_TEST = 19", "var_name": "LINE_FOR_COMPARISON_TEST"}, {"original_string": "private static final int EXPECTED_DNP = 835;", "modifier": "private static final", "type": "int", "declarator": "EXPECTED_DNP = 835", "var_name": "EXPECTED_DNP"}, {"original_string": "private static final double EXPECTED_BEARING = 135.0879067689071;", "modifier": "private static final", "type": "double", "declarator": "EXPECTED_BEARING = 135.0879067689071", "var_name": "EXPECTED_BEARING"}, {"original_string": "private TestData td = TestData.getInstance();", "modifier": "private", "type": "TestData", "declarator": "td = TestData.getInstance()", "var_name": "td"}], "file": "encoder/src/test/java/openlr/encoder/data/LocRefPointTest.java"}, "test_case": {"identifier": "testLocRefPoint", "parameters": "()", "modifiers": "@Test public final", "return": "void", "body": "@Test\n    public final void testLocRefPoint() {\n        LocRefData lrd = new LocRefData(td.getRoute());\n        lrd.setExpansion(td.getLRLocation());\n        List<Line> path = ExpansionHelper.getExpandedLocation(lrd);\n        LocRefPoint lrp1 = null;\n        LocRefPoint lrp2 = null;\n        try {\n            lrp1 = new LocRefPoint(path, td.getProperties());\n            lrp2 = new LocRefPoint(path, td.getProperties());\n        } catch (OpenLRProcessingException e) {\n            fail(\"\", e);\n        }\n        lrp1.setNextLRP(lrp2);\n        assertEquals(lrp1.getLfrc(), FunctionalRoadClass.FRC_5);\n        assertEquals(lrp1.getBearing(),\n                EXPECTED_BEARING);\n        assertEquals(lrp1.getDistanceToNext(), EXPECTED_DNP);\n    }", "signature": "void testLocRefPoint()", "full_signature": "@Test public final void testLocRefPoint()", "class_method_signature": "LocRefPointTest.testLocRefPoint()", "testcase": true, "constructor": false, "invocations": ["getRoute", "setExpansion", "getLRLocation", "getExpandedLocation", "getProperties", "getProperties", "fail", "setNextLRP", "assertEquals", "getLfrc", "assertEquals", "getBearing", "assertEquals", "getDistanceToNext"]}, "focal_class": {"identifier": "LocRefPoint", "superclass": "", "interfaces": "implements LocationReferencePoint", "fields": [{"original_string": "private final Line line;", "modifier": "private final", "type": "Line", "declarator": "line", "var_name": "line"}, {"original_string": "private final List<Line> subroute;", "modifier": "private final", "type": "List<Line>", "declarator": "subroute", "var_name": "subroute"}, {"original_string": "private final boolean isPointOnLine;", "modifier": "private final", "type": "boolean", "declarator": "isPointOnLine", "var_name": "isPointOnLine"}, {"original_string": "private final boolean isLast;", "modifier": "private final", "type": "boolean", "declarator": "isLast", "var_name": "isLast"}, {"original_string": "private final double longitude;", "modifier": "private final", "type": "double", "declarator": "longitude", "var_name": "longitude"}, {"original_string": "private final double latitude;", "modifier": "private final", "type": "double", "declarator": "latitude", "var_name": "latitude"}, {"original_string": "private final double bearing;", "modifier": "private final", "type": "double", "declarator": "bearing", "var_name": "bearing"}, {"original_string": "private LocRefPoint next;", "modifier": "private", "type": "LocRefPoint", "declarator": "next", "var_name": "next"}, {"original_string": "private int sequenceNumber;", "modifier": "private", "type": "int", "declarator": "sequenceNumber", "var_name": "sequenceNumber"}], "methods": [{"identifier": "LocRefPoint", "parameters": "(final List<Line> route, final OpenLREncoderProperties p)", "modifiers": "public", "return": "", "signature": " LocRefPoint(final List<Line> route, final OpenLREncoderProperties p)", "full_signature": "public  LocRefPoint(final List<Line> route, final OpenLREncoderProperties p)", "class_method_signature": "LocRefPoint.LocRefPoint(final List<Line> route, final OpenLREncoderProperties p)", "testcase": false, "constructor": true}, {"identifier": "LocRefPoint", "parameters": "(final Line l, final OpenLREncoderProperties p)", "modifiers": "public", "return": "", "signature": " LocRefPoint(final Line l, final OpenLREncoderProperties p)", "full_signature": "public  LocRefPoint(final Line l, final OpenLREncoderProperties p)", "class_method_signature": "LocRefPoint.LocRefPoint(final Line l, final OpenLREncoderProperties p)", "testcase": false, "constructor": true}, {"identifier": "LocRefPoint", "parameters": "(final Line l, final double lon, final double lat,\n                       final OpenLREncoderProperties p, final boolean lastLRP)", "modifiers": "public", "return": "", "signature": " LocRefPoint(final Line l, final double lon, final double lat,\n                       final OpenLREncoderProperties p, final boolean lastLRP)", "full_signature": "public  LocRefPoint(final Line l, final double lon, final double lat,\n                       final OpenLREncoderProperties p, final boolean lastLRP)", "class_method_signature": "LocRefPoint.LocRefPoint(final Line l, final double lon, final double lat,\n                       final OpenLREncoderProperties p, final boolean lastLRP)", "testcase": false, "constructor": true}, {"identifier": "LocRefPoint", "parameters": "(final Line l, final List<Line> route, final boolean isOnLine, final double lon,\n                        final double lat, final OpenLREncoderProperties p,\n                        final boolean lastLRP)", "modifiers": "private", "return": "", "signature": " LocRefPoint(final Line l, final List<Line> route, final boolean isOnLine, final double lon,\n                        final double lat, final OpenLREncoderProperties p,\n                        final boolean lastLRP)", "full_signature": "private  LocRefPoint(final Line l, final List<Line> route, final boolean isOnLine, final double lon,\n                        final double lat, final OpenLREncoderProperties p,\n                        final boolean lastLRP)", "class_method_signature": "LocRefPoint.LocRefPoint(final Line l, final List<Line> route, final boolean isOnLine, final double lon,\n                        final double lat, final OpenLREncoderProperties p,\n                        final boolean lastLRP)", "testcase": false, "constructor": true}, {"identifier": "setNextLRP", "parameters": "(final LocRefPoint n)", "modifiers": "public final", "return": "void", "signature": "void setNextLRP(final LocRefPoint n)", "full_signature": "public final void setNextLRP(final LocRefPoint n)", "class_method_signature": "LocRefPoint.setNextLRP(final LocRefPoint n)", "testcase": false, "constructor": false}, {"identifier": "getLongitudeDeg", "parameters": "()", "modifiers": "@Override public final", "return": "double", "signature": "double getLongitudeDeg()", "full_signature": "@Override public final double getLongitudeDeg()", "class_method_signature": "LocRefPoint.getLongitudeDeg()", "testcase": false, "constructor": false}, {"identifier": "getLatitudeDeg", "parameters": "()", "modifiers": "@Override public final", "return": "double", "signature": "double getLatitudeDeg()", "full_signature": "@Override public final double getLatitudeDeg()", "class_method_signature": "LocRefPoint.getLatitudeDeg()", "testcase": false, "constructor": false}, {"identifier": "getLRPNode", "parameters": "()", "modifiers": "public final", "return": "Node", "signature": "Node getLRPNode()", "full_signature": "public final Node getLRPNode()", "class_method_signature": "LocRefPoint.getLRPNode()", "testcase": false, "constructor": false}, {"identifier": "getDistanceToNext", "parameters": "()", "modifiers": "@Override public final", "return": "int", "signature": "int getDistanceToNext()", "full_signature": "@Override public final int getDistanceToNext()", "class_method_signature": "LocRefPoint.getDistanceToNext()", "testcase": false, "constructor": false}, {"identifier": "getRoute", "parameters": "()", "modifiers": "public final", "return": "List<Line>", "signature": "List<Line> getRoute()", "full_signature": "public final List<Line> getRoute()", "class_method_signature": "LocRefPoint.getRoute()", "testcase": false, "constructor": false}, {"identifier": "getLfrc", "parameters": "()", "modifiers": "@Override public final", "return": "FunctionalRoadClass", "signature": "FunctionalRoadClass getLfrc()", "full_signature": "@Override public final FunctionalRoadClass getLfrc()", "class_method_signature": "LocRefPoint.getLfrc()", "testcase": false, "constructor": false}, {"identifier": "calculateBearing", "parameters": "(final OpenLREncoderProperties properties)", "modifiers": "private", "return": "double", "signature": "double calculateBearing(final OpenLREncoderProperties properties)", "full_signature": "private double calculateBearing(final OpenLREncoderProperties properties)", "class_method_signature": "LocRefPoint.calculateBearing(final OpenLREncoderProperties properties)", "testcase": false, "constructor": false}, {"identifier": "getFOW", "parameters": "()", "modifiers": "@Override public final", "return": "FormOfWay", "signature": "FormOfWay getFOW()", "full_signature": "@Override public final FormOfWay getFOW()", "class_method_signature": "LocRefPoint.getFOW()", "testcase": false, "constructor": false}, {"identifier": "getFRC", "parameters": "()", "modifiers": "@Override public final", "return": "FunctionalRoadClass", "signature": "FunctionalRoadClass getFRC()", "full_signature": "@Override public final FunctionalRoadClass getFRC()", "class_method_signature": "LocRefPoint.getFRC()", "testcase": false, "constructor": false}, {"identifier": "isLRPOnLine", "parameters": "()", "modifiers": "public final", "return": "boolean", "signature": "boolean isLRPOnLine()", "full_signature": "public final boolean isLRPOnLine()", "class_method_signature": "LocRefPoint.isLRPOnLine()", "testcase": false, "constructor": false}, {"identifier": "isLastLRP", "parameters": "()", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean isLastLRP()", "full_signature": "@Override public final boolean isLastLRP()", "class_method_signature": "LocRefPoint.isLastLRP()", "testcase": false, "constructor": false}, {"identifier": "getBearing", "parameters": "()", "modifiers": "@Override public final", "return": "double", "signature": "double getBearing()", "full_signature": "@Override public final double getBearing()", "class_method_signature": "LocRefPoint.getBearing()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public final", "return": "String", "signature": "String toString()", "full_signature": "@Override public final String toString()", "class_method_signature": "LocRefPoint.toString()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public final", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public final int hashCode()", "class_method_signature": "LocRefPoint.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object obj)", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean equals(final Object obj)", "full_signature": "@Override public final boolean equals(final Object obj)", "class_method_signature": "LocRefPoint.equals(final Object obj)", "testcase": false, "constructor": false}, {"identifier": "getSequenceNumber", "parameters": "()", "modifiers": "@Override public final", "return": "int", "signature": "int getSequenceNumber()", "full_signature": "@Override public final int getSequenceNumber()", "class_method_signature": "LocRefPoint.getSequenceNumber()", "testcase": false, "constructor": false}, {"identifier": "setSequenceNumber", "parameters": "(final int seqNr)", "modifiers": "public final", "return": "void", "signature": "void setSequenceNumber(final int seqNr)", "full_signature": "public final void setSequenceNumber(final int seqNr)", "class_method_signature": "LocRefPoint.setSequenceNumber(final int seqNr)", "testcase": false, "constructor": false}, {"identifier": "getLine", "parameters": "()", "modifiers": "public final", "return": "Line", "signature": "Line getLine()", "full_signature": "public final Line getLine()", "class_method_signature": "LocRefPoint.getLine()", "testcase": false, "constructor": false}, {"identifier": "getLastLineOfSubRoute", "parameters": "()", "modifiers": "public final", "return": "Line", "signature": "Line getLastLineOfSubRoute()", "full_signature": "public final Line getLastLineOfSubRoute()", "class_method_signature": "LocRefPoint.getLastLineOfSubRoute()", "testcase": false, "constructor": false}], "file": "encoder/src/main/java/openlr/encoder/data/LocRefPoint.java"}, "focal_method": {"identifier": "LocRefPoint", "parameters": "(final List<Line> route, final OpenLREncoderProperties p)", "modifiers": "public", "return": "", "body": "public LocRefPoint(final List<Line> route, final OpenLREncoderProperties p)\n            throws OpenLRProcessingException {\n        this(route.get(0), route, false, route.get(0).getStartNode()\n                .getLongitudeDeg(), route.get(0).getStartNode()\n                .getLatitudeDeg(), p, false);\n    }", "signature": " LocRefPoint(final List<Line> route, final OpenLREncoderProperties p)", "full_signature": "public  LocRefPoint(final List<Line> route, final OpenLREncoderProperties p)", "class_method_signature": "LocRefPoint.LocRefPoint(final List<Line> route, final OpenLREncoderProperties p)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 187195345, "url": "https://github.com/tomtom-international/openlr", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 24, "size": 4809, "license": "licensed"}}