{"test_class": {"identifier": "DefaultWebApplicationRequestMapperTest", "superclass": "", "interfaces": "", "fields": [], "file": "webapp/impl/src/test/java/cloud/piranha/webapp/impl/DefaultWebApplicationRequestMapperTest.java"}, "test_case": {"identifier": "testAddFilterMapping", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testAddFilterMapping() {\n        DefaultWebApplicationRequestMapper requestMapper = new DefaultWebApplicationRequestMapper();\n        Set<String> result = requestMapper.addFilterMapping(\"filter\", \"/*\");\n        assertTrue(result.isEmpty());\n        Collection<String> filters = requestMapper.findFilterMappings(\"/one_two\");\n        assertFalse(filters.isEmpty());\n    }", "signature": "void testAddFilterMapping()", "full_signature": "@Test void testAddFilterMapping()", "class_method_signature": "DefaultWebApplicationRequestMapperTest.testAddFilterMapping()", "testcase": true, "constructor": false, "invocations": ["addFilterMapping", "assertTrue", "isEmpty", "findFilterMappings", "assertFalse", "isEmpty"]}, "focal_class": {"identifier": "DefaultWebApplicationRequestMapper", "superclass": "", "interfaces": "implements WebApplicationRequestMapper", "fields": [{"original_string": "protected final List<FilterMapping> filterMappings = new ArrayList<>();", "modifier": "protected final", "type": "List<FilterMapping>", "declarator": "filterMappings = new ArrayList<>()", "var_name": "filterMappings"}, {"original_string": "protected final ConcurrentHashMap<String, String> servletMappings = new ConcurrentHashMap<>();", "modifier": "protected final", "type": "ConcurrentHashMap<String, String>", "declarator": "servletMappings = new ConcurrentHashMap<>()", "var_name": "servletMappings"}], "methods": [{"identifier": "addFilterMapping", "parameters": "(Set<DispatcherType> dispatcherTypes, String filterName, String... urlPatterns)", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> addFilterMapping(Set<DispatcherType> dispatcherTypes, String filterName, String... urlPatterns)", "full_signature": "@Override public Set<String> addFilterMapping(Set<DispatcherType> dispatcherTypes, String filterName, String... urlPatterns)", "class_method_signature": "DefaultWebApplicationRequestMapper.addFilterMapping(Set<DispatcherType> dispatcherTypes, String filterName, String... urlPatterns)", "testcase": false, "constructor": false}, {"identifier": "addFilterMappingBeforeExisting", "parameters": "(Set<DispatcherType> dispatcherTypes, String filterName, String... urlPatterns)", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> addFilterMappingBeforeExisting(Set<DispatcherType> dispatcherTypes, String filterName, String... urlPatterns)", "full_signature": "@Override public Set<String> addFilterMappingBeforeExisting(Set<DispatcherType> dispatcherTypes, String filterName, String... urlPatterns)", "class_method_signature": "DefaultWebApplicationRequestMapper.addFilterMappingBeforeExisting(Set<DispatcherType> dispatcherTypes, String filterName, String... urlPatterns)", "testcase": false, "constructor": false}, {"identifier": "addServletMapping", "parameters": "(String servletName, String... urlPatterns)", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> addServletMapping(String servletName, String... urlPatterns)", "full_signature": "@Override public Set<String> addServletMapping(String servletName, String... urlPatterns)", "class_method_signature": "DefaultWebApplicationRequestMapper.addServletMapping(String servletName, String... urlPatterns)", "testcase": false, "constructor": false}, {"identifier": "findFilterMappings", "parameters": "(DispatcherType dispatcherType, String path)", "modifiers": "@Override public", "return": "Collection<String>", "signature": "Collection<String> findFilterMappings(DispatcherType dispatcherType, String path)", "full_signature": "@Override public Collection<String> findFilterMappings(DispatcherType dispatcherType, String path)", "class_method_signature": "DefaultWebApplicationRequestMapper.findFilterMappings(DispatcherType dispatcherType, String path)", "testcase": false, "constructor": false}, {"identifier": "doAddFilterMapping", "parameters": "(Set<DispatcherType> dispatcherTypes, String filterName, String... urlPatterns)", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> doAddFilterMapping(Set<DispatcherType> dispatcherTypes, String filterName, String... urlPatterns)", "full_signature": "private Set<String> doAddFilterMapping(Set<DispatcherType> dispatcherTypes, String filterName, String... urlPatterns)", "class_method_signature": "DefaultWebApplicationRequestMapper.doAddFilterMapping(Set<DispatcherType> dispatcherTypes, String filterName, String... urlPatterns)", "testcase": false, "constructor": false}, {"identifier": "doAddFilterMappingBeforeExisting", "parameters": "(Set<DispatcherType> dispatcherTypes, String filterName, String... urlPatterns)", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> doAddFilterMappingBeforeExisting(Set<DispatcherType> dispatcherTypes, String filterName, String... urlPatterns)", "full_signature": "private Set<String> doAddFilterMappingBeforeExisting(Set<DispatcherType> dispatcherTypes, String filterName, String... urlPatterns)", "class_method_signature": "DefaultWebApplicationRequestMapper.doAddFilterMappingBeforeExisting(Set<DispatcherType> dispatcherTypes, String filterName, String... urlPatterns)", "testcase": false, "constructor": false}, {"identifier": "findServletExactMatch", "parameters": "(String path)", "modifiers": "private", "return": "DefaultWebApplicationRequestMapping", "signature": "DefaultWebApplicationRequestMapping findServletExactMatch(String path)", "full_signature": "private DefaultWebApplicationRequestMapping findServletExactMatch(String path)", "class_method_signature": "DefaultWebApplicationRequestMapper.findServletExactMatch(String path)", "testcase": false, "constructor": false}, {"identifier": "findServletExtensionMatch", "parameters": "(String path)", "modifiers": "private", "return": "DefaultWebApplicationRequestMapping", "signature": "DefaultWebApplicationRequestMapping findServletExtensionMatch(String path)", "full_signature": "private DefaultWebApplicationRequestMapping findServletExtensionMatch(String path)", "class_method_signature": "DefaultWebApplicationRequestMapper.findServletExtensionMatch(String path)", "testcase": false, "constructor": false}, {"identifier": "findServletMapping", "parameters": "(String path)", "modifiers": "@Override public", "return": "DefaultWebApplicationRequestMapping", "signature": "DefaultWebApplicationRequestMapping findServletMapping(String path)", "full_signature": "@Override public DefaultWebApplicationRequestMapping findServletMapping(String path)", "class_method_signature": "DefaultWebApplicationRequestMapper.findServletMapping(String path)", "testcase": false, "constructor": false}, {"identifier": "findServletPrefixMatch", "parameters": "(String path)", "modifiers": "private", "return": "DefaultWebApplicationRequestMapping", "signature": "DefaultWebApplicationRequestMapping findServletPrefixMatch(String path)", "full_signature": "private DefaultWebApplicationRequestMapping findServletPrefixMatch(String path)", "class_method_signature": "DefaultWebApplicationRequestMapper.findServletPrefixMatch(String path)", "testcase": false, "constructor": false}, {"identifier": "findServletPrefixMatch", "parameters": "(String path, DefaultWebApplicationRequestMapping currentPrefix)", "modifiers": "private", "return": "DefaultWebApplicationRequestMapping", "signature": "DefaultWebApplicationRequestMapping findServletPrefixMatch(String path, DefaultWebApplicationRequestMapping currentPrefix)", "full_signature": "private DefaultWebApplicationRequestMapping findServletPrefixMatch(String path, DefaultWebApplicationRequestMapping currentPrefix)", "class_method_signature": "DefaultWebApplicationRequestMapper.findServletPrefixMatch(String path, DefaultWebApplicationRequestMapping currentPrefix)", "testcase": false, "constructor": false}, {"identifier": "getServletMappings", "parameters": "(String servletName)", "modifiers": "@Override public", "return": "Collection<String>", "signature": "Collection<String> getServletMappings(String servletName)", "full_signature": "@Override public Collection<String> getServletMappings(String servletName)", "class_method_signature": "DefaultWebApplicationRequestMapper.getServletMappings(String servletName)", "testcase": false, "constructor": false}, {"identifier": "getServletName", "parameters": "(String mapping)", "modifiers": "@Override public", "return": "String", "signature": "String getServletName(String mapping)", "full_signature": "@Override public String getServletName(String mapping)", "class_method_signature": "DefaultWebApplicationRequestMapper.getServletName(String mapping)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(Collection<?> collection)", "modifiers": "private", "return": "boolean", "signature": "boolean isEmpty(Collection<?> collection)", "full_signature": "private boolean isEmpty(Collection<?> collection)", "class_method_signature": "DefaultWebApplicationRequestMapper.isEmpty(Collection<?> collection)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(String[] strings)", "modifiers": "private", "return": "boolean", "signature": "boolean isEmpty(String[] strings)", "full_signature": "private boolean isEmpty(String[] strings)", "class_method_signature": "DefaultWebApplicationRequestMapper.isEmpty(String[] strings)", "testcase": false, "constructor": false}], "file": "webapp/impl/src/main/java/cloud/piranha/webapp/impl/DefaultWebApplicationRequestMapper.java"}, "focal_method": {"identifier": "addFilterMapping", "parameters": "(Set<DispatcherType> dispatcherTypes, String filterName, String... urlPatterns)", "modifiers": "@Override public", "return": "Set<String>", "body": "@Override\n    public Set<String> addFilterMapping(Set<DispatcherType> dispatcherTypes, String filterName, String... urlPatterns) {\n        return doAddFilterMapping(isEmpty(dispatcherTypes)? EnumSet.of(REQUEST) : dispatcherTypes, filterName, urlPatterns);\n    }", "signature": "Set<String> addFilterMapping(Set<DispatcherType> dispatcherTypes, String filterName, String... urlPatterns)", "full_signature": "@Override public Set<String> addFilterMapping(Set<DispatcherType> dispatcherTypes, String filterName, String... urlPatterns)", "class_method_signature": "DefaultWebApplicationRequestMapper.addFilterMapping(Set<DispatcherType> dispatcherTypes, String filterName, String... urlPatterns)", "testcase": false, "constructor": false, "invocations": ["doAddFilterMapping", "isEmpty", "of"]}, "repository": {"repo_id": 114777829, "url": "https://github.com/piranhacloud/piranha", "stars": 27, "created": "12/19/2017 2:55:23 PM +00:00", "updates": "2020-01-27T11:57:41+00:00", "fork": "False", "license": "licensed"}}