{"test_class": {"identifier": "AminoAcidCountDescriptorTest", "superclass": "extends MolecularDescriptorTest", "interfaces": "", "fields": [{"original_string": "private IMolecularDescriptor descriptor;", "modifier": "private", "type": "IMolecularDescriptor", "declarator": "descriptor", "var_name": "descriptor"}], "file": "descriptor/qsarprotein/src/test/java/org/openscience/cdk/qsar/descriptors/molecular/AminoAcidCountDescriptorTest.java"}, "test_case": {"identifier": "testTCount", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTCount() throws Exception {\n        IBioPolymer protein = ProteinBuilderTool.createProtein(\"TT\", SilentChemObjectBuilder.getInstance());\n        IDescriptorResult result = descriptor.calculate(protein).getValue();\n        Assert.assertTrue(result instanceof IntegerArrayResult);\n        IntegerArrayResult iaResult = (IntegerArrayResult) result;\n        Assert.assertEquals(2, iaResult.get(8));\n        Assert.assertEquals(2, iaResult.get(16));\n    }", "signature": "void testTCount()", "full_signature": "@Test public void testTCount()", "class_method_signature": "AminoAcidCountDescriptorTest.testTCount()", "testcase": true, "constructor": false, "invocations": ["createProtein", "getInstance", "getValue", "calculate", "assertTrue", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "AminoAcidCountDescriptor", "superclass": "extends AbstractMolecularDescriptor", "interfaces": "implements IMolecularDescriptor", "fields": [{"original_string": "private IAtomContainerSet substructureSet;", "modifier": "private", "type": "IAtomContainerSet", "declarator": "substructureSet", "var_name": "substructureSet"}, {"original_string": "private static String[]   names;", "modifier": "private static", "type": "String[]", "declarator": "names", "var_name": "names"}], "methods": [{"identifier": "AminoAcidCountDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " AminoAcidCountDescriptor()", "full_signature": "public  AminoAcidCountDescriptor()", "class_method_signature": "AminoAcidCountDescriptor.AminoAcidCountDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "AminoAcidCountDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "AminoAcidCountDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "AminoAcidCountDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "AminoAcidCountDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtomContainer ac)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtomContainer ac)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer ac)", "class_method_signature": "AminoAcidCountDescriptor.calculate(IAtomContainer ac)", "testcase": false, "constructor": false}, {"identifier": "getDescriptorResultType", "parameters": "()", "modifiers": "@Override public", "return": "IDescriptorResult", "signature": "IDescriptorResult getDescriptorResultType()", "full_signature": "@Override public IDescriptorResult getDescriptorResultType()", "class_method_signature": "AminoAcidCountDescriptor.getDescriptorResultType()", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "AminoAcidCountDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "AminoAcidCountDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}], "file": "descriptor/qsarprotein/src/main/java/org/openscience/cdk/qsar/descriptors/molecular/AminoAcidCountDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtomContainer ac)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtomContainer ac) {\n        ac = clone(ac); // don't modify input\n        int resultLength = substructureSet.getAtomContainerCount();\n        IntegerArrayResult results = new IntegerArrayResult(resultLength);\n\n        UniversalIsomorphismTester universalIsomorphismTester = new UniversalIsomorphismTester();\n        IAtomContainer substructure;\n        for (int i = 0; i < resultLength; i++) {\n            substructure = substructureSet.getAtomContainer(i);\n            List<List<RMap>> maps;\n            try {\n                maps = universalIsomorphismTester.getSubgraphMaps(ac, substructure);\n            } catch (CDKException e) {\n                // TODO is it OK to cast Double.NaN to int?\n                for (int j = 0; j < resultLength; j++)\n                    results.add((int) Double.NaN);\n                return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), results,\n                        getDescriptorNames(), new CDKException(\"Error in substructure search: \" + e.getMessage()));\n            }\n            if (maps != null) {\n                results.add(maps.size());\n            }\n        }\n\n        return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), results,\n                getDescriptorNames());\n    }", "signature": "DescriptorValue calculate(IAtomContainer ac)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer ac)", "class_method_signature": "AminoAcidCountDescriptor.calculate(IAtomContainer ac)", "testcase": false, "constructor": false, "invocations": ["clone", "getAtomContainerCount", "getAtomContainer", "getSubgraphMaps", "add", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames", "getMessage", "add", "size", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}