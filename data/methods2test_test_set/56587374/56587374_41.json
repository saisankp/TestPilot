{"test_class": {"identifier": "ConfigUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static SaxonConfigurationFactory configFactory;", "modifier": "private static", "type": "SaxonConfigurationFactory", "declarator": "configFactory", "var_name": "configFactory"}, {"original_string": "private static HashMap<QName,ParameterValue> emptyInputParams;", "modifier": "private static", "type": "HashMap<QName,ParameterValue>", "declarator": "emptyInputParams", "var_name": "emptyInputParams"}, {"original_string": "private static DatatypeFactory datatypeFactory;", "modifier": "private static", "type": "DatatypeFactory", "declarator": "datatypeFactory", "var_name": "datatypeFactory"}], "file": "gaulois-pipe/src/test/java/fr/efl/chaine/xslt/config/ConfigUtilTest.java"}, "test_case": {"identifier": "testBoundedAbstractParamWrongValue", "parameters": "()", "modifiers": "@Test(expected = InvalidSyntaxException.class) public", "return": "void", "body": "@Test(expected = InvalidSyntaxException.class)\n    public void testBoundedAbstractParamWrongValue() throws Exception {\n        String configFilename = \"src/test/resources/config/abstractParam.xml\";\n        GauloisPipe piper = new GauloisPipe(configFactory);\n        ConfigUtil cu = new ConfigUtil(configFactory.getConfiguration(), piper.getUriResolver(), configFilename);\n        HashMap<QName,ParameterValue> cliParameters = new HashMap<>();\n        ParameterValue pv = new ParameterValue(new QName(\"int\"), \"foe\", datatypeFactory.XS_STRING);\n        cliParameters.put(pv.getKey(), pv);\n        Config config = cu.buildConfig(cliParameters);\n        config.verify();\n    }", "signature": "void testBoundedAbstractParamWrongValue()", "full_signature": "@Test(expected = InvalidSyntaxException.class) public void testBoundedAbstractParamWrongValue()", "class_method_signature": "ConfigUtilTest.testBoundedAbstractParamWrongValue()", "testcase": true, "constructor": false, "invocations": ["getConfiguration", "getUriResolver", "put", "getKey", "buildConfig", "verify"]}, "focal_class": {"identifier": "ConfigUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ConfigUtil.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ConfigUtil.class)", "var_name": "LOGGER"}, {"original_string": "private static final QName CONFIG_EL = new QName(Config.NS, \"config\");", "modifier": "private static final", "type": "QName", "declarator": "CONFIG_EL = new QName(Config.NS, \"config\")", "var_name": "CONFIG_EL"}, {"original_string": "private static final QName PARAM_NAME = new QName(\"name\");", "modifier": "private static final", "type": "QName", "declarator": "PARAM_NAME = new QName(\"name\")", "var_name": "PARAM_NAME"}, {"original_string": "private static final QName PARAM_VALUE = new QName(\"value\");", "modifier": "private static final", "type": "QName", "declarator": "PARAM_VALUE = new QName(\"value\")", "var_name": "PARAM_VALUE"}, {"original_string": "private static final QName PARAM_ABSTRACT = new QName(\"abstract\");", "modifier": "private static final", "type": "QName", "declarator": "PARAM_ABSTRACT = new QName(\"abstract\")", "var_name": "PARAM_ABSTRACT"}, {"original_string": "private static final QName PARAM_AS = new QName(\"as\");", "modifier": "private static final", "type": "QName", "declarator": "PARAM_AS = new QName(\"as\")", "var_name": "PARAM_AS"}, {"original_string": "private static final QName QN_PATTERN = new QName(\"pattern\");", "modifier": "private static final", "type": "QName", "declarator": "QN_PATTERN = new QName(\"pattern\")", "var_name": "QN_PATTERN"}, {"original_string": "private static final QName QN_RECURSE = new QName(\"recurse\");", "modifier": "private static final", "type": "QName", "declarator": "QN_RECURSE = new QName(\"recurse\")", "var_name": "QN_RECURSE"}, {"original_string": "private static final QName QN_PARAM = new QName(Config.NS,\"param\");", "modifier": "private static final", "type": "QName", "declarator": "QN_PARAM = new QName(Config.NS,\"param\")", "var_name": "QN_PARAM"}, {"original_string": "private static final QName QN_NULL = new QName(Config.NS, \"null\");", "modifier": "private static final", "type": "QName", "declarator": "QN_NULL = new QName(Config.NS, \"null\")", "var_name": "QN_NULL"}, {"original_string": "private static final QName AS_NAME = new QName(\"as\");", "modifier": "private static final", "type": "QName", "declarator": "AS_NAME = new QName(\"as\")", "var_name": "AS_NAME"}, {"original_string": "private static final QName QN_GRAMMARS = new QName(Config.NS, \"grammars\");", "modifier": "private static final", "type": "QName", "declarator": "QN_GRAMMARS = new QName(Config.NS, \"grammars\")", "var_name": "QN_GRAMMARS"}, {"original_string": "private final File currentDir;", "modifier": "private final", "type": "File", "declarator": "currentDir", "var_name": "currentDir"}, {"original_string": "private final Configuration saxonConfig;", "modifier": "private final", "type": "Configuration", "declarator": "saxonConfig", "var_name": "saxonConfig"}, {"original_string": "private final URIResolver uriResolver;", "modifier": "private final", "type": "URIResolver", "declarator": "uriResolver", "var_name": "uriResolver"}, {"original_string": "private final String configUri;", "modifier": "private final", "type": "String", "declarator": "configUri", "var_name": "configUri"}, {"original_string": "private final boolean skipSchemaValidation;", "modifier": "private final", "type": "boolean", "declarator": "skipSchemaValidation", "var_name": "skipSchemaValidation"}, {"original_string": "private boolean __isConfigUriTrueURI = false;", "modifier": "private", "type": "boolean", "declarator": "__isConfigUriTrueURI = false", "var_name": "__isConfigUriTrueURI"}, {"original_string": "private DatatypeFactory factory;", "modifier": "private", "type": "DatatypeFactory", "declarator": "factory", "var_name": "factory"}], "methods": [{"identifier": "ConfigUtil", "parameters": "(Configuration saxonConfig, URIResolver uriResolver, String configUri)", "modifiers": "public", "return": "", "signature": " ConfigUtil(Configuration saxonConfig, URIResolver uriResolver, String configUri)", "full_signature": "public  ConfigUtil(Configuration saxonConfig, URIResolver uriResolver, String configUri)", "class_method_signature": "ConfigUtil.ConfigUtil(Configuration saxonConfig, URIResolver uriResolver, String configUri)", "testcase": false, "constructor": true}, {"identifier": "ConfigUtil", "parameters": "(Configuration saxonConfig, URIResolver uriResolver, String configUri, final boolean skipSchemaValidation, final String currentDir)", "modifiers": "public", "return": "", "signature": " ConfigUtil(Configuration saxonConfig, URIResolver uriResolver, String configUri, final boolean skipSchemaValidation, final String currentDir)", "full_signature": "public  ConfigUtil(Configuration saxonConfig, URIResolver uriResolver, String configUri, final boolean skipSchemaValidation, final String currentDir)", "class_method_signature": "ConfigUtil.ConfigUtil(Configuration saxonConfig, URIResolver uriResolver, String configUri, final boolean skipSchemaValidation, final String currentDir)", "testcase": false, "constructor": true}, {"identifier": "buildConfig", "parameters": "(HashMap<QName,ParameterValue> inputParameters)", "modifiers": "public", "return": "Config", "signature": "Config buildConfig(HashMap<QName,ParameterValue> inputParameters)", "full_signature": "public Config buildConfig(HashMap<QName,ParameterValue> inputParameters)", "class_method_signature": "ConfigUtil.buildConfig(HashMap<QName,ParameterValue> inputParameters)", "testcase": false, "constructor": false}, {"identifier": "buildPipe", "parameters": "(XdmNode pipeNode, HashMap<QName,ParameterValue> parameters)", "modifiers": "private", "return": "Pipe", "signature": "Pipe buildPipe(XdmNode pipeNode, HashMap<QName,ParameterValue> parameters)", "full_signature": "private Pipe buildPipe(XdmNode pipeNode, HashMap<QName,ParameterValue> parameters)", "class_method_signature": "ConfigUtil.buildPipe(XdmNode pipeNode, HashMap<QName,ParameterValue> parameters)", "testcase": false, "constructor": false}, {"identifier": "buildPipe", "parameters": "(XdmNode pipeNode, HashMap<QName,ParameterValue> parameters, Tee parentTee)", "modifiers": "private", "return": "Pipe", "signature": "Pipe buildPipe(XdmNode pipeNode, HashMap<QName,ParameterValue> parameters, Tee parentTee)", "full_signature": "private Pipe buildPipe(XdmNode pipeNode, HashMap<QName,ParameterValue> parameters, Tee parentTee)", "class_method_signature": "ConfigUtil.buildPipe(XdmNode pipeNode, HashMap<QName,ParameterValue> parameters, Tee parentTee)", "testcase": false, "constructor": false}, {"identifier": "buildTee", "parameters": "(XdmNode teeNode, HashMap<QName,ParameterValue> parameters)", "modifiers": "private", "return": "Tee", "signature": "Tee buildTee(XdmNode teeNode, HashMap<QName,ParameterValue> parameters)", "full_signature": "private Tee buildTee(XdmNode teeNode, HashMap<QName,ParameterValue> parameters)", "class_method_signature": "ConfigUtil.buildTee(XdmNode teeNode, HashMap<QName,ParameterValue> parameters)", "testcase": false, "constructor": false}, {"identifier": "buildSources", "parameters": "(XdmNode sourcesNode, HashMap<QName,ParameterValue> parameters)", "modifiers": "private", "return": "Sources", "signature": "Sources buildSources(XdmNode sourcesNode, HashMap<QName,ParameterValue> parameters)", "full_signature": "private Sources buildSources(XdmNode sourcesNode, HashMap<QName,ParameterValue> parameters)", "class_method_signature": "ConfigUtil.buildSources(XdmNode sourcesNode, HashMap<QName,ParameterValue> parameters)", "testcase": false, "constructor": false}, {"identifier": "buildListener", "parameters": "(XdmNode listenerNode, HashMap<QName,ParameterValue> parameters)", "modifiers": "private", "return": "Listener", "signature": "Listener buildListener(XdmNode listenerNode, HashMap<QName,ParameterValue> parameters)", "full_signature": "private Listener buildListener(XdmNode listenerNode, HashMap<QName,ParameterValue> parameters)", "class_method_signature": "ConfigUtil.buildListener(XdmNode listenerNode, HashMap<QName,ParameterValue> parameters)", "testcase": false, "constructor": false}, {"identifier": "buildXslt", "parameters": "(XdmNode xsltNode, HashMap<QName,ParameterValue> parameters)", "modifiers": "private", "return": "Xslt", "signature": "Xslt buildXslt(XdmNode xsltNode, HashMap<QName,ParameterValue> parameters)", "full_signature": "private Xslt buildXslt(XdmNode xsltNode, HashMap<QName,ParameterValue> parameters)", "class_method_signature": "ConfigUtil.buildXslt(XdmNode xsltNode, HashMap<QName,ParameterValue> parameters)", "testcase": false, "constructor": false}, {"identifier": "buildJavaStep", "parameters": "(XdmNode javaNode, HashMap<QName,ParameterValue> parameters)", "modifiers": "private", "return": "JavaStep", "signature": "JavaStep buildJavaStep(XdmNode javaNode, HashMap<QName,ParameterValue> parameters)", "full_signature": "private JavaStep buildJavaStep(XdmNode javaNode, HashMap<QName,ParameterValue> parameters)", "class_method_signature": "ConfigUtil.buildJavaStep(XdmNode javaNode, HashMap<QName,ParameterValue> parameters)", "testcase": false, "constructor": false}, {"identifier": "buildChooseStep", "parameters": "(XdmNode chooseNode, HashMap<QName,ParameterValue> parameters)", "modifiers": "private", "return": "ChooseStep", "signature": "ChooseStep buildChooseStep(XdmNode chooseNode, HashMap<QName,ParameterValue> parameters)", "full_signature": "private ChooseStep buildChooseStep(XdmNode chooseNode, HashMap<QName,ParameterValue> parameters)", "class_method_signature": "ConfigUtil.buildChooseStep(XdmNode chooseNode, HashMap<QName,ParameterValue> parameters)", "testcase": false, "constructor": false}, {"identifier": "buildWhen", "parameters": "(XdmNode whenNode, HashMap<QName,ParameterValue> parameters)", "modifiers": "private", "return": "WhenEntry", "signature": "WhenEntry buildWhen(XdmNode whenNode, HashMap<QName,ParameterValue> parameters)", "full_signature": "private WhenEntry buildWhen(XdmNode whenNode, HashMap<QName,ParameterValue> parameters)", "class_method_signature": "ConfigUtil.buildWhen(XdmNode whenNode, HashMap<QName,ParameterValue> parameters)", "testcase": false, "constructor": false}, {"identifier": "buildParameter", "parameters": "(XdmNode param, HashMap<QName,ParameterValue> parameters)", "modifiers": "private", "return": "ParameterValue", "signature": "ParameterValue buildParameter(XdmNode param, HashMap<QName,ParameterValue> parameters)", "full_signature": "private ParameterValue buildParameter(XdmNode param, HashMap<QName,ParameterValue> parameters)", "class_method_signature": "ConfigUtil.buildParameter(XdmNode param, HashMap<QName,ParameterValue> parameters)", "testcase": false, "constructor": false}, {"identifier": "resolveQName", "parameters": "(String name)", "modifiers": "public static", "return": "QName", "signature": "QName resolveQName(String name)", "full_signature": "public static QName resolveQName(String name)", "class_method_signature": "ConfigUtil.resolveQName(String name)", "testcase": false, "constructor": false}, {"identifier": "buildFile", "parameters": "(XdmNode node, HashMap<QName,ParameterValue> parameters)", "modifiers": "private", "return": "CfgFile", "signature": "CfgFile buildFile(XdmNode node, HashMap<QName,ParameterValue> parameters)", "full_signature": "private CfgFile buildFile(XdmNode node, HashMap<QName,ParameterValue> parameters)", "class_method_signature": "ConfigUtil.buildFile(XdmNode node, HashMap<QName,ParameterValue> parameters)", "testcase": false, "constructor": false}, {"identifier": "resolveEscapes", "parameters": "(Object input, HashMap<QName,ParameterValue> params)", "modifiers": "", "return": "Object", "signature": "Object resolveEscapes(Object input, HashMap<QName,ParameterValue> params)", "full_signature": " Object resolveEscapes(Object input, HashMap<QName,ParameterValue> params)", "class_method_signature": "ConfigUtil.resolveEscapes(Object input, HashMap<QName,ParameterValue> params)", "testcase": false, "constructor": false}, {"identifier": "resolveEscapes", "parameters": "(String input, HashMap<QName,ParameterValue> params)", "modifiers": "", "return": "String", "signature": "String resolveEscapes(String input, HashMap<QName,ParameterValue> params)", "full_signature": " String resolveEscapes(String input, HashMap<QName,ParameterValue> params)", "class_method_signature": "ConfigUtil.resolveEscapes(String input, HashMap<QName,ParameterValue> params)", "testcase": false, "constructor": false}, {"identifier": "buildFolderContent", "parameters": "(XdmNode node, HashMap<QName,ParameterValue> parameters)", "modifiers": "private", "return": "Collection<CfgFile>", "signature": "Collection<CfgFile> buildFolderContent(XdmNode node, HashMap<QName,ParameterValue> parameters)", "full_signature": "private Collection<CfgFile> buildFolderContent(XdmNode node, HashMap<QName,ParameterValue> parameters)", "class_method_signature": "ConfigUtil.buildFolderContent(XdmNode node, HashMap<QName,ParameterValue> parameters)", "testcase": false, "constructor": false}, {"identifier": "makeAsUri", "parameters": "(final Path p)", "modifiers": "private", "return": "String", "signature": "String makeAsUri(final Path p)", "full_signature": "private String makeAsUri(final Path p)", "class_method_signature": "ConfigUtil.makeAsUri(final Path p)", "testcase": false, "constructor": false}, {"identifier": "buildOutput", "parameters": "(XdmNode node, HashMap<QName,ParameterValue> parameters)", "modifiers": "private", "return": "Output", "signature": "Output buildOutput(XdmNode node, HashMap<QName,ParameterValue> parameters)", "full_signature": "private Output buildOutput(XdmNode node, HashMap<QName,ParameterValue> parameters)", "class_method_signature": "ConfigUtil.buildOutput(XdmNode node, HashMap<QName,ParameterValue> parameters)", "testcase": false, "constructor": false}, {"identifier": "getFilesFromDirectory", "parameters": "(File directory, FilenameFilter filter, boolean recurse)", "modifiers": "", "return": "List<CfgFile>", "signature": "List<CfgFile> getFilesFromDirectory(File directory, FilenameFilter filter, boolean recurse)", "full_signature": " List<CfgFile> getFilesFromDirectory(File directory, FilenameFilter filter, boolean recurse)", "class_method_signature": "ConfigUtil.getFilesFromDirectory(File directory, FilenameFilter filter, boolean recurse)", "testcase": false, "constructor": false}, {"identifier": "getBooleanValue", "parameters": "(String v)", "modifiers": "private", "return": "boolean", "signature": "boolean getBooleanValue(String v)", "full_signature": "private boolean getBooleanValue(String v)", "class_method_signature": "ConfigUtil.getBooleanValue(String v)", "testcase": false, "constructor": false}, {"identifier": "addConfigParameter", "parameters": "(Config config, String parameterPattern, DatatypeFactory factory)", "modifiers": "public static", "return": "void", "signature": "void addConfigParameter(Config config, String parameterPattern, DatatypeFactory factory)", "full_signature": "public static void addConfigParameter(Config config, String parameterPattern, DatatypeFactory factory)", "class_method_signature": "ConfigUtil.addConfigParameter(Config config, String parameterPattern, DatatypeFactory factory)", "testcase": false, "constructor": false}, {"identifier": "parseParameterPattern", "parameters": "(String parameterPattern, DatatypeFactory factory)", "modifiers": "public static", "return": "ParameterValue", "signature": "ParameterValue parseParameterPattern(String parameterPattern, DatatypeFactory factory)", "full_signature": "public static ParameterValue parseParameterPattern(String parameterPattern, DatatypeFactory factory)", "class_method_signature": "ConfigUtil.parseParameterPattern(String parameterPattern, DatatypeFactory factory)", "testcase": false, "constructor": false}, {"identifier": "setNbThreads", "parameters": "(Config config, String argument)", "modifiers": "public static", "return": "void", "signature": "void setNbThreads(Config config, String argument)", "full_signature": "public static void setNbThreads(Config config, String argument)", "class_method_signature": "ConfigUtil.setNbThreads(Config config, String argument)", "testcase": false, "constructor": false}, {"identifier": "addInputFile", "parameters": "(Config config, String argument, DatatypeFactory factory)", "modifiers": "public static", "return": "void", "signature": "void addInputFile(Config config, String argument, DatatypeFactory factory)", "full_signature": "public static void addInputFile(Config config, String argument, DatatypeFactory factory)", "class_method_signature": "ConfigUtil.addInputFile(Config config, String argument, DatatypeFactory factory)", "testcase": false, "constructor": false}, {"identifier": "addTemplate", "parameters": "(Config config, String argument, DatatypeFactory factory)", "modifiers": "public static", "return": "void", "signature": "void addTemplate(Config config, String argument, DatatypeFactory factory)", "full_signature": "public static void addTemplate(Config config, String argument, DatatypeFactory factory)", "class_method_signature": "ConfigUtil.addTemplate(Config config, String argument, DatatypeFactory factory)", "testcase": false, "constructor": false}, {"identifier": "setOutput", "parameters": "(Config config, String argument)", "modifiers": "public static", "return": "void", "signature": "void setOutput(Config config, String argument)", "full_signature": "public static void setOutput(Config config, String argument)", "class_method_signature": "ConfigUtil.setOutput(Config config, String argument)", "testcase": false, "constructor": false}, {"identifier": "resolveTemplate", "parameters": "(String path, DatatypeFactory factory)", "modifiers": "private static", "return": "Xslt", "signature": "Xslt resolveTemplate(String path, DatatypeFactory factory)", "full_signature": "private static Xslt resolveTemplate(String path, DatatypeFactory factory)", "class_method_signature": "ConfigUtil.resolveTemplate(String path, DatatypeFactory factory)", "testcase": false, "constructor": false}, {"identifier": "resolveInputFile", "parameters": "(String path, DatatypeFactory factory)", "modifiers": "private static", "return": "CfgFile", "signature": "CfgFile resolveInputFile(String path, DatatypeFactory factory)", "full_signature": "private static CfgFile resolveInputFile(String path, DatatypeFactory factory)", "class_method_signature": "ConfigUtil.resolveInputFile(String path, DatatypeFactory factory)", "testcase": false, "constructor": false}, {"identifier": "getParametersOfTemplate", "parameters": "(final String s, DatatypeFactory factory)", "modifiers": "private static", "return": "List<ParameterValue>", "signature": "List<ParameterValue> getParametersOfTemplate(final String s, DatatypeFactory factory)", "full_signature": "private static List<ParameterValue> getParametersOfTemplate(final String s, DatatypeFactory factory)", "class_method_signature": "ConfigUtil.getParametersOfTemplate(final String s, DatatypeFactory factory)", "testcase": false, "constructor": false}], "file": "gaulois-pipe/src/main/java/fr/efl/chaine/xslt/config/ConfigUtil.java"}, "focal_method": {"identifier": "buildConfig", "parameters": "(HashMap<QName,ParameterValue> inputParameters)", "modifiers": "public", "return": "Config", "body": "public Config buildConfig(HashMap<QName,ParameterValue> inputParameters) throws SaxonApiException, InvalidSyntaxException {\n        try {\n            Processor processor = new Processor(saxonConfig);\n            if(!skipSchemaValidation) {\n                try {\n                    System.setProperty(\"javax.xml.validation.SchemaFactory:http://www.w3.org/2001/XMLSchema/v1.1\",\"org.apache.xerces.jaxp.validation.XMLSchema11Factory\");\n                    SchemaFactory schemaFactory = SchemaFactory.newInstance(\"http://www.w3.org/2001/XMLSchema/v1.1\");\n                    Source schemaSource = saxonConfig.getURIResolver().resolve(\"cp:/fr/efl/chaine/xslt/schemas/gaulois-pipe_config.xsd\", null);\n                    Schema schema = schemaFactory.newSchema(schemaSource);\n                    SchemaValidationErrorListener errListener = new SchemaValidationErrorListener();\n                    Validator validator = schema.newValidator();\n                    validator.setErrorHandler(errListener);\n                    SAXSource saxSource = new SAXSource(\n                            __isConfigUriTrueURI ? new InputSource(new URL(configUri).openStream()) :\n                                    new InputSource(new FileInputStream(new File(configUri)))\n                    );\n                    validator.validate(saxSource);\n                    if(errListener.hasErrors()) {\n                        throw new InvalidSyntaxException(configUri+\" does not respect gaulois-pipe schema\");\n                    }\n                } catch(SAXException | TransformerException | IOException ex) {\n                    LOGGER.error(\"while verifying schema conformity\",ex);\n                } catch(Error er) {\n                    LOGGER.error(\"java.protocol.handler.pkgs=\"+System.getProperty(\"java.protocol.handler.pkgs\"));\n                    LOGGER.error(\"while parsing config\",er);\n                    throw er;\n                }\n            }\n            if(LOGGER.isDebugEnabled() && __isConfigUriTrueURI) {\n                // check if resolver can resolve URI\n                LOGGER.debug(\"trying to resolve \"+configUri);\n                Source source = uriResolver.resolve(configUri, null);\n                if(source==null) {\n                    LOGGER.error(configUri+\" can not be resolved. Please try again, setting org.xmlresolver logger to DEBUG\");\n                }\n            }\n            XdmNode configRoot = \n                    __isConfigUriTrueURI ? \n                    processor.newDocumentBuilder().build(uriResolver.resolve(configUri,null)) :\n                    processor.newDocumentBuilder().build(new File(configUri));\n            XPathCompiler xc = processor.newXPathCompiler();\n            xc.declareNamespace(\"cfg\", Config.NS);\n            XPathSelector xs = xc.compile(\"/*\").load();\n            xs.setContextItem(configRoot);\n            XdmNode root = (XdmNode)xs.evaluateSingle();\n            if(CONFIG_EL.equals(root.getNodeName())) {\n                Config config = new Config(root);\n                // namespaces\n                XdmSequenceIterator it = root.axisIterator(Axis.CHILD, Namespaces.QNAME);\n                Namespaces namespaces = new Namespaces();\n                while(it.hasNext()) {\n                    XdmNode ns = (XdmNode)it.next();\n                    XdmSequenceIterator itm = ns.axisIterator(Axis.CHILD, Namespaces.QN_MAPPING);\n                    while(itm.hasNext()) {\n                        XdmNode node = (XdmNode)itm.next();\n                        String prefix = node.getAttributeValue(Namespaces.ATTR_PREFIX);\n                        String uri = node.getAttributeValue(Namespaces.ATTR_URI);\n                        namespaces.getMappings().put(prefix, uri);\n                    }\n                }\n                config.setNamespaces(namespaces);\n                it.close();\n                // grammars issue #40\n                XPathSelector gs = xc.compile(\"cfg:grammars/cfg:schema/@href\").load();\n                gs.setContextItem(root);\n                it=gs.evaluate().iterator();\n                List<String> grammars = new ArrayList<>();\n                while(it.hasNext()) {\n                    String href = it.next().getStringValue();\n                    grammars.add(href);\n                }\n                it.close();\n                config.setSchemaLocations(grammars);\n                // params\n//                config.getParams().putAll(inputParameters);\n                HashMap<QName, ParameterValue> configParameters = new HashMap<>();\n                it = root.axisIterator(Axis.CHILD, Config.PARAMS_CHILD);\n                while(it.hasNext()) {\n                    XdmNode params = (XdmNode)it.next();\n                    XdmSequenceIterator itp = params.axisIterator(Axis.CHILD, new QName(Config.NS, \"param\"));\n                    while(itp.hasNext()) {\n                        //config.addParameter(buildParameter((XdmNode)itp.next(),inputParameters));\n                        ParameterValue pv = buildParameter((XdmNode)itp.next(),inputParameters);\n                        configParameters.put(pv.getKey(), pv);\n                    }\n                }\n                config.getParams().putAll(ParametersMerger.merge(inputParameters, configParameters));\n                // pipe\n                config.setPipe(buildPipe((XdmNode)(root.axisIterator(Axis.CHILD, Pipe.QNAME).next()),config.getParams()));\n                // sources\n                XdmSequenceIterator sourceIterator = root.axisIterator(Axis.CHILD, Sources.QNAME);\n                if(sourceIterator.hasNext()) {\n                    config.setSources(buildSources((XdmNode)(sourceIterator.next()), config.getParams()));\n                }\n                // output\n                // pour compatibilit\u00e9 ascendante, si on a un output sous la config, on essaie de le mettre sur le pipe\n                // possible uniquement si le pipe est rectiligne\n                XdmSequenceIterator outputIt = root.axisIterator(Axis.CHILD, Output.QNAME);\n                if(outputIt.hasNext()) {\n                    LOGGER.warn(\"Defining <output/> in config is now deprecated - but still works. You should define it in <pipe/>\");\n                    if(config.getPipe().getOutput()==null) {\n                        config.getPipe().setOutput(buildOutput((XdmNode)(outputIt.next()), config.getParams()));\n                    } else {\n                        throw new InvalidSyntaxException(\"Using output outside of pipe is deprecated but supported, only if pipe has no output defined\");\n                    }\n                }\n                return config;\n            } else {\n                throw new InvalidSyntaxException(\"The file \"+configUri+\" does not respect schema saxon-pipe_config.xsd\");\n            }\n        } catch(TransformerException ex) {\n            throw new InvalidSyntaxException(configUri+\" can not be read.\");\n        }\n    }", "signature": "Config buildConfig(HashMap<QName,ParameterValue> inputParameters)", "full_signature": "public Config buildConfig(HashMap<QName,ParameterValue> inputParameters)", "class_method_signature": "ConfigUtil.buildConfig(HashMap<QName,ParameterValue> inputParameters)", "testcase": false, "constructor": false, "invocations": ["setProperty", "newInstance", "resolve", "getURIResolver", "newSchema", "newValidator", "setErrorHandler", "openStream", "validate", "hasErrors", "error", "error", "getProperty", "error", "isDebugEnabled", "debug", "resolve", "error", "build", "newDocumentBuilder", "resolve", "build", "newDocumentBuilder", "newXPathCompiler", "declareNamespace", "load", "compile", "setContextItem", "evaluateSingle", "equals", "getNodeName", "axisIterator", "hasNext", "next", "axisIterator", "hasNext", "next", "getAttributeValue", "getAttributeValue", "put", "getMappings", "setNamespaces", "close", "load", "compile", "setContextItem", "iterator", "evaluate", "hasNext", "getStringValue", "next", "add", "close", "setSchemaLocations", "axisIterator", "hasNext", "next", "axisIterator", "hasNext", "buildParameter", "next", "put", "getKey", "putAll", "getParams", "merge", "setPipe", "buildPipe", "next", "axisIterator", "getParams", "axisIterator", "hasNext", "setSources", "buildSources", "next", "getParams", "axisIterator", "hasNext", "warn", "getOutput", "getPipe", "setOutput", "getPipe", "buildOutput", "next", "getParams"]}, "repository": {"repo_id": 56587374, "url": "https://github.com/cmarchand/gaulois-pipe", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 6, "size": 506, "license": "licensed"}}