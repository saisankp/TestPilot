{"test_class": {"identifier": "PublishPackageTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "core/src/test/java/ship/command/PublishPackageTest.java"}, "test_case": {"identifier": "testExecute", "parameters": "()", "modifiers": "@Test @PrepareForTest({PublishPackage.class, FileSet.class}) public", "return": "void", "body": "@Test\n  @PrepareForTest({PublishPackage.class, FileSet.class})\n  public void testExecute() throws Exception {\n    final ProjectFile projectFile = new ProjectFile();\n    projectFile.setTarget(randomUUID().toString());\n    final PublishPackage publishPackage = new PublishPackage() {\n      @Override\n      public ProjectFile readProject() {\n        return projectFile;\n      }\n    };\n    FileSet fileSet = mock(FileSet.class);\n    mockStatic(FileSet.class);\n    when(FileSet.from(any())).thenReturn(fileSet);\n\n    final BuildProject buildProject = mock(BuildProject.class);\n    whenNew(BuildProject.class).withAnyArguments().thenReturn(buildProject);\n    mockStatic(Files.class);\n    publishPackage.execute();\n\n  }", "signature": "void testExecute()", "full_signature": "@Test @PrepareForTest({PublishPackage.class, FileSet.class}) public void testExecute()", "class_method_signature": "PublishPackageTest.testExecute()", "testcase": true, "constructor": false, "invocations": ["setTarget", "toString", "randomUUID", "mock", "mockStatic", "thenReturn", "when", "from", "any", "mock", "thenReturn", "withAnyArguments", "whenNew", "mockStatic", "execute"]}, "focal_class": {"identifier": "PublishPackage", "superclass": "extends AbstractCommand", "interfaces": "", "fields": [{"original_string": "protected static final String NL_0 = PublishPackage.class.getName() + \".0\";", "modifier": "protected static final", "type": "String", "declarator": "NL_0 = PublishPackage.class.getName() + \".0\"", "var_name": "NL_0"}, {"original_string": "protected static final String NL_1 = PublishPackage.class.getName() + \".1\";", "modifier": "protected static final", "type": "String", "declarator": "NL_1 = PublishPackage.class.getName() + \".1\"", "var_name": "NL_1"}, {"original_string": "protected static final String NL_2 = PublishPackage.class.getName() + \".2\";", "modifier": "protected static final", "type": "String", "declarator": "NL_2 = PublishPackage.class.getName() + \".2\"", "var_name": "NL_2"}], "methods": [{"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "PublishPackage.execute()", "testcase": false, "constructor": false}], "file": "core/src/main/java/ship/command/PublishPackage.java"}, "focal_method": {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void execute() throws Exception {\n    logger.trace(\"Starting {}...\", this);\n\n    final ProjectFile rootProject = readProject();\n    final String buildTarget = rootProject.getTarget();\n    assertNotNull(buildTarget, bind(NL_0));\n\n    if (!exists(Paths.get(buildTarget))) {\n      new BuildProject().execute();\n    }\n\n    final String publishRepository = append(System.getProperty(\"user.home\"), MODULES_BASE);\n    final Path publishPath = Paths.get(append(publishRepository, rootProject.getName()));\n    if (exists(publishPath)) {\n      deleteRecursively(publishPath, ALLOW_INSECURE);\n    }\n    createDirectories(publishPath);\n    FileSet.from(Paths.get(\".\")).copyTo(publishPath);\n    printer.println(NL_1, rootProject.getName());\n    printer.println(NL_2, publishPath);\n  }", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "PublishPackage.execute()", "testcase": false, "constructor": false, "invocations": ["trace", "readProject", "getTarget", "assertNotNull", "bind", "exists", "get", "execute", "append", "getProperty", "get", "append", "getName", "exists", "deleteRecursively", "createDirectories", "copyTo", "from", "get", "println", "getName", "println"]}, "repository": {"repo_id": 149694816, "url": "https://github.com/aergoio/ship", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 11, "size": 1743, "license": "licensed"}}