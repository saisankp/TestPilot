{"test_class": {"identifier": "AbstractExternalRequestTest", "superclass": "", "interfaces": "", "fields": [], "file": "stagemonitor-tracing/src/test/java/org/stagemonitor/tracing/AbstractExternalRequestTest.java"}, "test_case": {"identifier": "testDontMonitorClientRootSpans", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testDontMonitorClientRootSpans() throws Exception {\n\t\tMockTracer tracer = new MockTracer();\n\t\tnew AbstractExternalRequest(tracer) {\n\t\t\t@Override\n\t\t\tprotected String getType() {\n\t\t\t\treturn \"jdbc\";\n\t\t\t}\n\t\t}.createSpan().finish();\n\n\t\tassertThat(tracer.finishedSpans().get(0).tags().get(Tags.SAMPLING_PRIORITY.getKey())).isEqualTo(0);\n\t}", "signature": "void testDontMonitorClientRootSpans()", "full_signature": "@Test public void testDontMonitorClientRootSpans()", "class_method_signature": "AbstractExternalRequestTest.testDontMonitorClientRootSpans()", "testcase": true, "constructor": false, "invocations": ["finish", "createSpan", "isEqualTo", "assertThat", "get", "tags", "get", "finishedSpans", "getKey"]}, "focal_class": {"identifier": "AbstractExternalRequest", "superclass": "extends MonitoredRequest", "interfaces": "", "fields": [{"original_string": "public static final String EXTERNAL_REQUEST_METHOD = \"method\";", "modifier": "public static final", "type": "String", "declarator": "EXTERNAL_REQUEST_METHOD = \"method\"", "var_name": "EXTERNAL_REQUEST_METHOD"}, {"original_string": "private final Tracer tracer;", "modifier": "private final", "type": "Tracer", "declarator": "tracer", "var_name": "tracer"}, {"original_string": "private final String operationName;", "modifier": "private final", "type": "String", "declarator": "operationName", "var_name": "operationName"}], "methods": [{"identifier": "AbstractExternalRequest", "parameters": "(Tracer tracer)", "modifiers": "protected", "return": "", "signature": " AbstractExternalRequest(Tracer tracer)", "full_signature": "protected  AbstractExternalRequest(Tracer tracer)", "class_method_signature": "AbstractExternalRequest.AbstractExternalRequest(Tracer tracer)", "testcase": false, "constructor": true}, {"identifier": "AbstractExternalRequest", "parameters": "(Tracer tracer, String operationName)", "modifiers": "public", "return": "", "signature": " AbstractExternalRequest(Tracer tracer, String operationName)", "full_signature": "public  AbstractExternalRequest(Tracer tracer, String operationName)", "class_method_signature": "AbstractExternalRequest.AbstractExternalRequest(Tracer tracer, String operationName)", "testcase": false, "constructor": true}, {"identifier": "createSpan", "parameters": "()", "modifiers": "@Override public", "return": "Span", "signature": "Span createSpan()", "full_signature": "@Override public Span createSpan()", "class_method_signature": "AbstractExternalRequest.createSpan()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "protected abstract", "return": "String", "signature": "String getType()", "full_signature": "protected abstract String getType()", "class_method_signature": "AbstractExternalRequest.getType()", "testcase": false, "constructor": false}, {"identifier": "trackMetricsPerOperationName", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean trackMetricsPerOperationName()", "full_signature": "protected boolean trackMetricsPerOperationName()", "class_method_signature": "AbstractExternalRequest.trackMetricsPerOperationName()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "AbstractExternalRequest.execute()", "testcase": false, "constructor": false}], "file": "stagemonitor-tracing/src/main/java/org/stagemonitor/tracing/AbstractExternalRequest.java"}, "focal_method": {"identifier": "createSpan", "parameters": "()", "modifiers": "@Override public", "return": "Span", "body": "@Override\n\tpublic Span createSpan() {\n\t\tfinal Tracer.SpanBuilder spanBuilder;\n\t\tfinal Span activeSpan = tracer.scopeManager().activeSpan();\n\t\tif (activeSpan != null) {\n\t\t\tspanBuilder = tracer.buildSpan(operationName)\n\t\t\t\t\t.withTag(Tags.SPAN_KIND.getKey(), Tags.SPAN_KIND_CLIENT);\n\t\t} else {\n\t\t\t// client spans should not be root spans\n\t\t\tspanBuilder = tracer.buildSpan(operationName)\n\t\t\t\t\t.withTag(Tags.SAMPLING_PRIORITY.getKey(), 0)\n\t\t\t\t\t.withTag(Tags.SPAN_KIND.getKey(), Tags.SPAN_KIND_CLIENT);\n\t\t}\n\t\tif (trackMetricsPerOperationName()) {\n\t\t\tspanBuilder.withTag(MetricsSpanEventListener.ENABLE_TRACKING_METRICS_TAG, true);\n\t\t}\n\t\tspanBuilder.withTag(SpanUtils.OPERATION_TYPE, getType());\n\t\treturn spanBuilder.start();\n\t}", "signature": "Span createSpan()", "full_signature": "@Override public Span createSpan()", "class_method_signature": "AbstractExternalRequest.createSpan()", "testcase": false, "constructor": false, "invocations": ["activeSpan", "scopeManager", "withTag", "buildSpan", "getKey", "withTag", "withTag", "buildSpan", "getKey", "getKey", "trackMetricsPerOperationName", "withTag", "withTag", "getType", "start"]}, "repository": {"repo_id": 11845993, "url": "https://github.com/stagemonitor/stagemonitor", "language": "Java", "is_fork": false, "fork_count": 268, "stargazer_count": 1585, "size": 10342, "license": "licensed"}}