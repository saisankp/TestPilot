{"test_class": {"identifier": "ZipSlipAnalyzerTest", "superclass": "", "interfaces": "", "fields": [], "file": "lang/src/test/java/org/eclipse/steady/malice/ZipSlipAnalyzerTest.java"}, "test_case": {"identifier": "testZipSlipFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testZipSlipFile() {\n    final MaliciousnessAnalyzer mala = new ZipSlipAnalyzer();\n\n    MaliciousnessAnalysisResult is_mal;\n\n    // Test the 4 archives from https://github.com/snyk/zip-slip-vulnerability\n\n    is_mal = mala.isMalicious(new File(\"src/test/resources/zip-slip.zip\"));\n    assertEquals(1d, is_mal.getResult(), 0d);\n\n    is_mal = mala.isMalicious(new File(\"src/test/resources/zip-slip-win.zip\"));\n    assertEquals(1d, is_mal.getResult(), 0d);\n\n    is_mal = mala.isMalicious(new File(\"src/test/resources/zip-slip.tar\"));\n    assertEquals(1d, is_mal.getResult(), 0d);\n\n    is_mal = mala.isMalicious(new File(\"src/test/resources/zip-slip-win.tar\"));\n    assertEquals(1d, is_mal.getResult(), 0d);\n\n    // A malicious JAR\n    is_mal = mala.isMalicious(new File(\"src/test/resources/zip-slip.jar\"));\n    assertEquals(1d, is_mal.getResult(), 0d);\n\n    // A benign ZIP\n    is_mal = mala.isMalicious(new File(\"src/test/resources/no-zip-slip.zip\"));\n    assertEquals(0d, is_mal.getResult(), 0d);\n  }", "signature": "void testZipSlipFile()", "full_signature": "@Test public void testZipSlipFile()", "class_method_signature": "ZipSlipAnalyzerTest.testZipSlipFile()", "testcase": true, "constructor": false, "invocations": ["isMalicious", "assertEquals", "getResult", "isMalicious", "assertEquals", "getResult", "isMalicious", "assertEquals", "getResult", "isMalicious", "assertEquals", "getResult", "isMalicious", "assertEquals", "getResult", "isMalicious", "assertEquals", "getResult"]}, "focal_class": {"identifier": "ZipSlipAnalyzer", "superclass": "", "interfaces": "implements MaliciousnessAnalyzer", "fields": [{"original_string": "private static final Logger log = org.apache.logging.log4j.LogManager.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "log = org.apache.logging.log4j.LogManager.getLogger()", "var_name": "log"}, {"original_string": "private Path destinationPath =\n      VulasConfiguration.getGlobal()\n          .getTmpDir()\n          .toAbsolutePath()\n          .resolve(StringUtil.getRandonString(10));", "modifier": "private", "type": "Path", "declarator": "destinationPath =\n      VulasConfiguration.getGlobal()\n          .getTmpDir()\n          .toAbsolutePath()\n          .resolve(StringUtil.getRandonString(10))", "var_name": "destinationPath"}], "methods": [{"identifier": "isMalicious", "parameters": "(File _file)", "modifiers": "@Override public", "return": "MaliciousnessAnalysisResult", "signature": "MaliciousnessAnalysisResult isMalicious(File _file)", "full_signature": "@Override public MaliciousnessAnalysisResult isMalicious(File _file)", "class_method_signature": "ZipSlipAnalyzer.isMalicious(File _file)", "testcase": false, "constructor": false}, {"identifier": "isMalicious", "parameters": "(InputStream _is, boolean _log)", "modifiers": "@Override public", "return": "MaliciousnessAnalysisResult", "signature": "MaliciousnessAnalysisResult isMalicious(InputStream _is, boolean _log)", "full_signature": "@Override public MaliciousnessAnalysisResult isMalicious(InputStream _is, boolean _log)", "class_method_signature": "ZipSlipAnalyzer.isMalicious(InputStream _is, boolean _log)", "testcase": false, "constructor": false}], "file": "lang/src/main/java/org/eclipse/steady/malice/ZipSlipAnalyzer.java"}, "focal_method": {"identifier": "isMalicious", "parameters": "(File _file)", "modifiers": "@Override public", "return": "MaliciousnessAnalysisResult", "body": "@Override\n  public MaliciousnessAnalysisResult isMalicious(File _file) {\n    MaliciousnessAnalysisResult mal = null;\n    final String name = _file.getName();\n\n    try (final InputStream fis = new FileInputStream(_file)) {\n      // Analyze\n      if (name.endsWith(\".zip\")\n          || name.endsWith(\".jar\")\n          || name.endsWith(\".war\")\n          || name.endsWith(\".ear\")\n          || name.endsWith(\".aar\")) {\n        mal = this.isMalicious(new ZipInputStream(fis), false);\n      } else if (name.endsWith(\".tar\")) {\n        mal = this.isMalicious(new TarArchiveInputStream(fis), false);\n      } else if (name.endsWith(\".tar.gz\")) {\n        mal =\n            this.isMalicious(\n                new TarArchiveInputStream(\n                    new GzipCompressorInputStream(new BufferedInputStream(fis))),\n                false);\n      } else {\n        log.warn(\"Cannot analyze [\" + _file.toPath().toAbsolutePath() + \"]\");\n      }\n\n      // Log\n      if (mal != null) {\n        mal.setReason(\"[\" + _file.toPath().toAbsolutePath() + \"] \" + mal.getReason());\n        if (mal.isMalicious()) log.warn(mal.getReason());\n        else log.info(mal.getReason());\n      }\n    } catch (FileNotFoundException fnfe) {\n      log.error(\"File [\" + _file.getAbsolutePath() + \"] cannot be found\");\n    } catch (IOException ioe) {\n      log.error(\n          ioe.getClass().getSimpleName()\n              + \" when opening [\"\n              + _file.getAbsolutePath()\n              + \"]: \"\n              + ioe.getMessage(),\n          ioe);\n    }\n    return mal;\n  }", "signature": "MaliciousnessAnalysisResult isMalicious(File _file)", "full_signature": "@Override public MaliciousnessAnalysisResult isMalicious(File _file)", "class_method_signature": "ZipSlipAnalyzer.isMalicious(File _file)", "testcase": false, "constructor": false, "invocations": ["getName", "endsWith", "endsWith", "endsWith", "endsWith", "endsWith", "isMalicious", "endsWith", "isMalicious", "endsWith", "isMalicious", "warn", "toAbsolutePath", "toPath", "setReason", "toAbsolutePath", "toPath", "getReason", "isMalicious", "warn", "getReason", "info", "getReason", "error", "getAbsolutePath", "error", "getSimpleName", "getClass", "getAbsolutePath", "getMessage"]}, "repository": {"repo_id": 145424401, "url": "https://github.com/eclipse/steady", "stars": 353, "created": "8/20/2018 1:54:15 PM +00:00", "updates": "2020-01-25T08:37:00+00:00", "fork": "False", "license": "licensed"}}