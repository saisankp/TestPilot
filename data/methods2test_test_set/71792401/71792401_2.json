{"test_class": {"identifier": "MyJavaRulesDefinitionTest", "superclass": "", "interfaces": "", "fields": [], "file": "java-custom-rules/src/test/java/org/sonar/samples/java/MyJavaRulesDefinitionTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void test() {\n    MyJavaRulesDefinition rulesDefinition = new MyJavaRulesDefinition();\n    RulesDefinition.Context context = new RulesDefinition.Context();\n    rulesDefinition.define(context);\n    RulesDefinition.Repository repository = context.repository(MyJavaRulesDefinition.REPOSITORY_KEY);\n\n    assertThat(repository.name()).isEqualTo(\"MyCompany Custom Repository\");\n    assertThat(repository.language()).isEqualTo(\"java\");\n    assertThat(repository.rules()).hasSize(RulesList.getChecks().size());\n\n    assertRuleProperties(repository);\n    assertParameterProperties(repository);\n    assertAllRuleParametersHaveDescription(repository);\n  }", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "MyJavaRulesDefinitionTest.test()", "testcase": true, "constructor": false, "invocations": ["define", "repository", "isEqualTo", "assertThat", "name", "isEqualTo", "assertThat", "language", "hasSize", "assertThat", "rules", "size", "getChecks", "assertRuleProperties", "assertParameterProperties", "assertAllRuleParametersHaveDescription"]}, "focal_class": {"identifier": "MyJavaRulesDefinition", "superclass": "", "interfaces": "implements RulesDefinition", "fields": [{"original_string": "private static final String RESOURCE_BASE_PATH = \"/org/sonar/l10n/java/rules/squid\";", "modifier": "private static final", "type": "String", "declarator": "RESOURCE_BASE_PATH = \"/org/sonar/l10n/java/rules/squid\"", "var_name": "RESOURCE_BASE_PATH"}, {"original_string": "public static final String REPOSITORY_KEY = \"mycompany-java\";", "modifier": "public static final", "type": "String", "declarator": "REPOSITORY_KEY = \"mycompany-java\"", "var_name": "REPOSITORY_KEY"}, {"original_string": "private final Gson gson = new Gson();", "modifier": "private final", "type": "Gson", "declarator": "gson = new Gson()", "var_name": "gson"}], "methods": [{"identifier": "define", "parameters": "(Context context)", "modifiers": "@Override public", "return": "void", "signature": "void define(Context context)", "full_signature": "@Override public void define(Context context)", "class_method_signature": "MyJavaRulesDefinition.define(Context context)", "testcase": false, "constructor": false}, {"identifier": "newRule", "parameters": "(Class<? extends JavaCheck> ruleClass, NewRepository repository)", "modifiers": "protected", "return": "void", "signature": "void newRule(Class<? extends JavaCheck> ruleClass, NewRepository repository)", "full_signature": "protected void newRule(Class<? extends JavaCheck> ruleClass, NewRepository repository)", "class_method_signature": "MyJavaRulesDefinition.newRule(Class<? extends JavaCheck> ruleClass, NewRepository repository)", "testcase": false, "constructor": false}, {"identifier": "ruleMetadata", "parameters": "(NewRule rule)", "modifiers": "private", "return": "void", "signature": "void ruleMetadata(NewRule rule)", "full_signature": "private void ruleMetadata(NewRule rule)", "class_method_signature": "MyJavaRulesDefinition.ruleMetadata(NewRule rule)", "testcase": false, "constructor": false}, {"identifier": "addMetadata", "parameters": "(NewRule rule, String metadataKey)", "modifiers": "private", "return": "void", "signature": "void addMetadata(NewRule rule, String metadataKey)", "full_signature": "private void addMetadata(NewRule rule, String metadataKey)", "class_method_signature": "MyJavaRulesDefinition.addMetadata(NewRule rule, String metadataKey)", "testcase": false, "constructor": false}, {"identifier": "addHtmlDescription", "parameters": "(NewRule rule, String metadataKey)", "modifiers": "private static", "return": "void", "signature": "void addHtmlDescription(NewRule rule, String metadataKey)", "full_signature": "private static void addHtmlDescription(NewRule rule, String metadataKey)", "class_method_signature": "MyJavaRulesDefinition.addHtmlDescription(NewRule rule, String metadataKey)", "testcase": false, "constructor": false}, {"identifier": "readResource", "parameters": "(URL resource)", "modifiers": "private static", "return": "String", "signature": "String readResource(URL resource)", "full_signature": "private static String readResource(URL resource)", "class_method_signature": "MyJavaRulesDefinition.readResource(URL resource)", "testcase": false, "constructor": false}], "file": "java-custom-rules/src/main/java/org/sonar/samples/java/MyJavaRulesDefinition.java"}, "focal_method": {"identifier": "define", "parameters": "(Context context)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void define(Context context) {\n    NewRepository repository = context\n      .createRepository(REPOSITORY_KEY, \"java\")\n      .setName(\"MyCompany Custom Repository\");\n\n    for (Class<? extends JavaCheck> check : RulesList.getChecks()) {\n      new RulesDefinitionAnnotationLoader().load(repository, check);\n      newRule(check, repository);\n    }\n    repository.done();\n  }", "signature": "void define(Context context)", "full_signature": "@Override public void define(Context context)", "class_method_signature": "MyJavaRulesDefinition.define(Context context)", "testcase": false, "constructor": false, "invocations": ["setName", "createRepository", "getChecks", "load", "newRule", "done"]}, "repository": {"repo_id": 71792401, "url": "https://github.com/SonarSource/sonar-custom-rules-examples", "language": "Java", "is_fork": false, "fork_count": 349, "stargazer_count": 156, "size": 190, "license": "licensed"}}