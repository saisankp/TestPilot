{"test_class": {"identifier": "ElectionTermImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(RaftActorRecoverySupportTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(RaftActorRecoverySupportTest.class)", "var_name": "LOG"}, {"original_string": "@Mock\n    private DataPersistenceProvider mockPersistence;", "modifier": "@Mock\n    private", "type": "DataPersistenceProvider", "declarator": "mockPersistence", "var_name": "mockPersistence"}], "file": "opendaylight/md-sal/sal-akka-raft/src/test/java/org/opendaylight/controller/cluster/raft/ElectionTermImplTest.java"}, "test_case": {"identifier": "testUpdateAndPersist", "parameters": "()", "modifiers": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) @Test public", "return": "void", "body": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n    @Test\n    public void testUpdateAndPersist() throws Exception {\n        ElectionTermImpl impl = new ElectionTermImpl(mockPersistence, \"test\", LOG);\n\n        impl.updateAndPersist(10, \"member-1\");\n\n        assertEquals(\"getCurrentTerm\", 10, impl.getCurrentTerm());\n        assertEquals(\"getVotedFor\", \"member-1\", impl.getVotedFor());\n\n        ArgumentCaptor<Object> message = ArgumentCaptor.forClass(Object.class);\n        ArgumentCaptor<Procedure> procedure = ArgumentCaptor.forClass(Procedure.class);\n        verify(mockPersistence).persist(message.capture(), procedure.capture());\n\n        assertEquals(\"Message type\", UpdateElectionTerm.class, message.getValue().getClass());\n        UpdateElectionTerm update = (UpdateElectionTerm)message.getValue();\n        assertEquals(\"getCurrentTerm\", 10, update.getCurrentTerm());\n        assertEquals(\"getVotedFor\", \"member-1\", update.getVotedFor());\n\n        procedure.getValue().apply(null);\n    }", "signature": "void testUpdateAndPersist()", "full_signature": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) @Test public void testUpdateAndPersist()", "class_method_signature": "ElectionTermImplTest.testUpdateAndPersist()", "testcase": true, "constructor": false, "invocations": ["updateAndPersist", "assertEquals", "getCurrentTerm", "assertEquals", "getVotedFor", "forClass", "forClass", "persist", "verify", "capture", "capture", "assertEquals", "getClass", "getValue", "getValue", "assertEquals", "getCurrentTerm", "assertEquals", "getVotedFor", "apply", "getValue"]}, "focal_class": {"identifier": "ElectionTermImpl", "superclass": "", "interfaces": "implements ElectionTerm", "fields": [{"original_string": "private long currentTerm = 0;", "modifier": "private", "type": "long", "declarator": "currentTerm = 0", "var_name": "currentTerm"}, {"original_string": "private String votedFor = null;", "modifier": "private", "type": "String", "declarator": "votedFor = null", "var_name": "votedFor"}, {"original_string": "private final DataPersistenceProvider persistence;", "modifier": "private final", "type": "DataPersistenceProvider", "declarator": "persistence", "var_name": "persistence"}, {"original_string": "private final Logger log;", "modifier": "private final", "type": "Logger", "declarator": "log", "var_name": "log"}, {"original_string": "private final String logId;", "modifier": "private final", "type": "String", "declarator": "logId", "var_name": "logId"}], "methods": [{"identifier": "ElectionTermImpl", "parameters": "(DataPersistenceProvider persistence, String logId, Logger log)", "modifiers": "", "return": "", "signature": " ElectionTermImpl(DataPersistenceProvider persistence, String logId, Logger log)", "full_signature": "  ElectionTermImpl(DataPersistenceProvider persistence, String logId, Logger log)", "class_method_signature": "ElectionTermImpl.ElectionTermImpl(DataPersistenceProvider persistence, String logId, Logger log)", "testcase": false, "constructor": true}, {"identifier": "getCurrentTerm", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getCurrentTerm()", "full_signature": "@Override public long getCurrentTerm()", "class_method_signature": "ElectionTermImpl.getCurrentTerm()", "testcase": false, "constructor": false}, {"identifier": "getVotedFor", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getVotedFor()", "full_signature": "@Override public String getVotedFor()", "class_method_signature": "ElectionTermImpl.getVotedFor()", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(long newTerm, String newVotedFor)", "modifiers": "@Override public", "return": "void", "signature": "void update(long newTerm, String newVotedFor)", "full_signature": "@Override public void update(long newTerm, String newVotedFor)", "class_method_signature": "ElectionTermImpl.update(long newTerm, String newVotedFor)", "testcase": false, "constructor": false}, {"identifier": "updateAndPersist", "parameters": "(long newTerm, String newVotedFor)", "modifiers": "@Override public", "return": "void", "signature": "void updateAndPersist(long newTerm, String newVotedFor)", "full_signature": "@Override public void updateAndPersist(long newTerm, String newVotedFor)", "class_method_signature": "ElectionTermImpl.updateAndPersist(long newTerm, String newVotedFor)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-akka-raft/src/main/java/org/opendaylight/controller/cluster/raft/ElectionTermImpl.java"}, "focal_method": {"identifier": "updateAndPersist", "parameters": "(long newTerm, String newVotedFor)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void updateAndPersist(long newTerm, String newVotedFor) {\n        update(newTerm, newVotedFor);\n        // FIXME : Maybe first persist then update the state\n        persistence.persist(new UpdateElectionTerm(this.currentTerm, this.votedFor), NoopProcedure.instance());\n    }", "signature": "void updateAndPersist(long newTerm, String newVotedFor)", "full_signature": "@Override public void updateAndPersist(long newTerm, String newVotedFor)", "class_method_signature": "ElectionTermImpl.updateAndPersist(long newTerm, String newVotedFor)", "testcase": false, "constructor": false, "invocations": ["update", "persist", "instance"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}