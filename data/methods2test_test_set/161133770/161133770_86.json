{"test_class": {"identifier": "DataflowJobManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Dataflow dataflow;", "modifier": "private", "type": "Dataflow", "declarator": "dataflow", "var_name": "dataflow"}, {"original_string": "private DataflowRunnerConfigOptions defaults;", "modifier": "private", "type": "DataflowRunnerConfigOptions", "declarator": "defaults", "var_name": "defaults"}, {"original_string": "private IngestionJobProto.SpecsStreamingUpdateConfig specsStreamingUpdateConfig;", "modifier": "private", "type": "IngestionJobProto.SpecsStreamingUpdateConfig", "declarator": "specsStreamingUpdateConfig", "var_name": "specsStreamingUpdateConfig"}, {"original_string": "private DataflowJobManager dfJobManager;", "modifier": "private", "type": "DataflowJobManager", "declarator": "dfJobManager", "var_name": "dfJobManager"}, {"original_string": "private StoreProto.Store store;", "modifier": "private", "type": "StoreProto.Store", "declarator": "store", "var_name": "store"}, {"original_string": "private SourceProto.Source source;", "modifier": "private", "type": "SourceProto.Source", "declarator": "source", "var_name": "source"}], "file": "job-controller/src/test/java/feast/jobcontroller/runner/dataflow/DataflowJobManagerTest.java"}, "test_case": {"identifier": "shouldHandleNullResponseFromDataflow", "parameters": "()", "modifiers": "@Test @SneakyThrows public", "return": "void", "body": "@Test\n  @SneakyThrows\n  public void shouldHandleNullResponseFromDataflow() {\n    when(dataflow\n            .projects()\n            .locations()\n            .jobs()\n            .list(\"project\", \"region\")\n            .setFilter(\"ACTIVE\")\n            .execute()\n            .getJobs())\n        .thenReturn(null);\n\n    assertThat(dfJobManager.listRunningJobs(), hasSize(0));\n  }", "signature": "void shouldHandleNullResponseFromDataflow()", "full_signature": "@Test @SneakyThrows public void shouldHandleNullResponseFromDataflow()", "class_method_signature": "DataflowJobManagerTest.shouldHandleNullResponseFromDataflow()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getJobs", "execute", "setFilter", "list", "jobs", "locations", "projects", "assertThat", "listRunningJobs", "hasSize"]}, "focal_class": {"identifier": "DataflowJobManager", "superclass": "", "interfaces": "implements JobManager", "fields": [{"original_string": "private final Runner RUNNER_TYPE = Runner.DATAFLOW;", "modifier": "private final", "type": "Runner", "declarator": "RUNNER_TYPE = Runner.DATAFLOW", "var_name": "RUNNER_TYPE"}, {"original_string": "private final String projectId;", "modifier": "private final", "type": "String", "declarator": "projectId", "var_name": "projectId"}, {"original_string": "private final String location;", "modifier": "private final", "type": "String", "declarator": "location", "var_name": "location"}, {"original_string": "private final Dataflow dataflow;", "modifier": "private final", "type": "Dataflow", "declarator": "dataflow", "var_name": "dataflow"}, {"original_string": "private final DataflowRunnerConfig defaultOptions;", "modifier": "private final", "type": "DataflowRunnerConfig", "declarator": "defaultOptions", "var_name": "defaultOptions"}, {"original_string": "private final MetricsProperties metrics;", "modifier": "private final", "type": "MetricsProperties", "declarator": "metrics", "var_name": "metrics"}, {"original_string": "private final IngestionJobProto.SpecsStreamingUpdateConfig specsStreamingUpdateConfig;", "modifier": "private final", "type": "IngestionJobProto.SpecsStreamingUpdateConfig", "declarator": "specsStreamingUpdateConfig", "var_name": "specsStreamingUpdateConfig"}, {"original_string": "private final Map<String, String> jobSelector;", "modifier": "private final", "type": "Map<String, String>", "declarator": "jobSelector", "var_name": "jobSelector"}], "methods": [{"identifier": "of", "parameters": "(\n      DataflowRunnerConfigOptions runnerConfigOptions,\n      MetricsProperties metricsProperties,\n      IngestionJobProto.SpecsStreamingUpdateConfig specsStreamingUpdateConfig,\n      Map<String, String> jobSelector)", "modifiers": "public static", "return": "DataflowJobManager", "signature": "DataflowJobManager of(\n      DataflowRunnerConfigOptions runnerConfigOptions,\n      MetricsProperties metricsProperties,\n      IngestionJobProto.SpecsStreamingUpdateConfig specsStreamingUpdateConfig,\n      Map<String, String> jobSelector)", "full_signature": "public static DataflowJobManager of(\n      DataflowRunnerConfigOptions runnerConfigOptions,\n      MetricsProperties metricsProperties,\n      IngestionJobProto.SpecsStreamingUpdateConfig specsStreamingUpdateConfig,\n      Map<String, String> jobSelector)", "class_method_signature": "DataflowJobManager.of(\n      DataflowRunnerConfigOptions runnerConfigOptions,\n      MetricsProperties metricsProperties,\n      IngestionJobProto.SpecsStreamingUpdateConfig specsStreamingUpdateConfig,\n      Map<String, String> jobSelector)", "testcase": false, "constructor": false}, {"identifier": "DataflowJobManager", "parameters": "(\n      DataflowRunnerConfigOptions runnerConfigOptions,\n      MetricsProperties metricsProperties,\n      IngestionJobProto.SpecsStreamingUpdateConfig specsStreamingUpdateConfig,\n      Map<String, String> jobSelector,\n      Dataflow dataflow)", "modifiers": "", "return": "", "signature": " DataflowJobManager(\n      DataflowRunnerConfigOptions runnerConfigOptions,\n      MetricsProperties metricsProperties,\n      IngestionJobProto.SpecsStreamingUpdateConfig specsStreamingUpdateConfig,\n      Map<String, String> jobSelector,\n      Dataflow dataflow)", "full_signature": "  DataflowJobManager(\n      DataflowRunnerConfigOptions runnerConfigOptions,\n      MetricsProperties metricsProperties,\n      IngestionJobProto.SpecsStreamingUpdateConfig specsStreamingUpdateConfig,\n      Map<String, String> jobSelector,\n      Dataflow dataflow)", "class_method_signature": "DataflowJobManager.DataflowJobManager(\n      DataflowRunnerConfigOptions runnerConfigOptions,\n      MetricsProperties metricsProperties,\n      IngestionJobProto.SpecsStreamingUpdateConfig specsStreamingUpdateConfig,\n      Map<String, String> jobSelector,\n      Dataflow dataflow)", "testcase": false, "constructor": true}, {"identifier": "getGoogleCredential", "parameters": "()", "modifiers": "private static", "return": "Credential", "signature": "Credential getGoogleCredential()", "full_signature": "private static Credential getGoogleCredential()", "class_method_signature": "DataflowJobManager.getGoogleCredential()", "testcase": false, "constructor": false}, {"identifier": "getRunnerType", "parameters": "()", "modifiers": "@Override public", "return": "Runner", "signature": "Runner getRunnerType()", "full_signature": "@Override public Runner getRunnerType()", "class_method_signature": "DataflowJobManager.getRunnerType()", "testcase": false, "constructor": false}, {"identifier": "startJob", "parameters": "(Job job)", "modifiers": "@Override public", "return": "Job", "signature": "Job startJob(Job job)", "full_signature": "@Override public Job startJob(Job job)", "class_method_signature": "DataflowJobManager.startJob(Job job)", "testcase": false, "constructor": false}, {"identifier": "updateJob", "parameters": "(Job job)", "modifiers": "@Override public", "return": "Job", "signature": "Job updateJob(Job job)", "full_signature": "@Override public Job updateJob(Job job)", "class_method_signature": "DataflowJobManager.updateJob(Job job)", "testcase": false, "constructor": false}, {"identifier": "abortJob", "parameters": "(Job job)", "modifiers": "@Override public", "return": "Job", "signature": "Job abortJob(Job job)", "full_signature": "@Override public Job abortJob(Job job)", "class_method_signature": "DataflowJobManager.abortJob(Job job)", "testcase": false, "constructor": false}, {"identifier": "restartJob", "parameters": "(Job job)", "modifiers": "@Override public", "return": "Job", "signature": "Job restartJob(Job job)", "full_signature": "@Override public Job restartJob(Job job)", "class_method_signature": "DataflowJobManager.restartJob(Job job)", "testcase": false, "constructor": false}, {"identifier": "getJobStatus", "parameters": "(Job job)", "modifiers": "@Override public", "return": "JobStatus", "signature": "JobStatus getJobStatus(Job job)", "full_signature": "@Override public JobStatus getJobStatus(Job job)", "class_method_signature": "DataflowJobManager.getJobStatus(Job job)", "testcase": false, "constructor": false}, {"identifier": "listRunningJobs", "parameters": "()", "modifiers": "@Override public", "return": "List<Job>", "signature": "List<Job> listRunningJobs()", "full_signature": "@Override public List<Job> listRunningJobs()", "class_method_signature": "DataflowJobManager.listRunningJobs()", "testcase": false, "constructor": false}, {"identifier": "submitDataflowJob", "parameters": "(\n      String jobName,\n      SourceProto.Source source,\n      Set<StoreProto.Store> sinks,\n      Map<String, String> labels,\n      boolean update)", "modifiers": "private", "return": "String", "signature": "String submitDataflowJob(\n      String jobName,\n      SourceProto.Source source,\n      Set<StoreProto.Store> sinks,\n      Map<String, String> labels,\n      boolean update)", "full_signature": "private String submitDataflowJob(\n      String jobName,\n      SourceProto.Source source,\n      Set<StoreProto.Store> sinks,\n      Map<String, String> labels,\n      boolean update)", "class_method_signature": "DataflowJobManager.submitDataflowJob(\n      String jobName,\n      SourceProto.Source source,\n      Set<StoreProto.Store> sinks,\n      Map<String, String> labels,\n      boolean update)", "testcase": false, "constructor": false}, {"identifier": "getPipelineOptions", "parameters": "(\n      String jobName,\n      SourceProto.Source source,\n      Set<StoreProto.Store> sinks,\n      Map<String, String> labels,\n      boolean update)", "modifiers": "private", "return": "ImportOptions", "signature": "ImportOptions getPipelineOptions(\n      String jobName,\n      SourceProto.Source source,\n      Set<StoreProto.Store> sinks,\n      Map<String, String> labels,\n      boolean update)", "full_signature": "private ImportOptions getPipelineOptions(\n      String jobName,\n      SourceProto.Source source,\n      Set<StoreProto.Store> sinks,\n      Map<String, String> labels,\n      boolean update)", "class_method_signature": "DataflowJobManager.getPipelineOptions(\n      String jobName,\n      SourceProto.Source source,\n      Set<StoreProto.Store> sinks,\n      Map<String, String> labels,\n      boolean update)", "testcase": false, "constructor": false}, {"identifier": "runPipeline", "parameters": "(ImportOptions pipelineOptions)", "modifiers": "public", "return": "DataflowPipelineJob", "signature": "DataflowPipelineJob runPipeline(ImportOptions pipelineOptions)", "full_signature": "public DataflowPipelineJob runPipeline(ImportOptions pipelineOptions)", "class_method_signature": "DataflowJobManager.runPipeline(ImportOptions pipelineOptions)", "testcase": false, "constructor": false}, {"identifier": "waitForJobToRun", "parameters": "(DataflowPipelineJob pipelineResult)", "modifiers": "private", "return": "String", "signature": "String waitForJobToRun(DataflowPipelineJob pipelineResult)", "full_signature": "private String waitForJobToRun(DataflowPipelineJob pipelineResult)", "class_method_signature": "DataflowJobManager.waitForJobToRun(DataflowPipelineJob pipelineResult)", "testcase": false, "constructor": false}], "file": "job-controller/src/main/java/feast/jobcontroller/runner/dataflow/DataflowJobManager.java"}, "focal_method": {"identifier": "listRunningJobs", "parameters": "()", "modifiers": "@Override public", "return": "List<Job>", "body": "@Override\n  public List<Job> listRunningJobs() {\n    List<com.google.api.services.dataflow.model.Job> jobs;\n\n    try {\n      jobs =\n          dataflow\n              .projects()\n              .locations()\n              .jobs()\n              .list(projectId, location)\n              .setFilter(\"ACTIVE\")\n              .execute()\n              .getJobs();\n    } catch (IOException e) {\n      throw new RuntimeException(\n          String.format(\"Unable to retrieve list of jobs from dataflow: %s\", e.getMessage()));\n    }\n\n    if (jobs == null) {\n      return Collections.emptyList();\n    }\n\n    return jobs.stream()\n        .map(\n            dfJob -> {\n              try {\n                return dataflow\n                    .projects()\n                    .locations()\n                    .jobs()\n                    .get(projectId, location, dfJob.getId())\n                    .setView(\"JOB_VIEW_ALL\")\n                    .execute();\n              } catch (IOException e) {\n                log.error(\n                    \"Job's detailed info {} couldn't be loaded from Dataflow: {}\",\n                    dfJob.getId(),\n                    e.getMessage());\n                return null;\n              }\n            })\n        .filter(\n            dfJob ->\n                dfJob != null\n                    && (dfJob.getLabels() != null || this.jobSelector.isEmpty())\n                    && this.jobSelector.entrySet().stream()\n                        .allMatch(\n                            entry ->\n                                dfJob\n                                    .getLabels()\n                                    .getOrDefault(entry.getKey(), \"\")\n                                    .equals(entry.getValue())))\n        .map(\n            dfJob -> {\n              Map<String, Object> options =\n                  (Map<String, Object>)\n                      dfJob.getEnvironment().getSdkPipelineOptions().get(\"options\");\n\n              List<StoreProto.Store> stores =\n                  parseStoreJsonList((List<String>) options.get(\"storesJson\"));\n              SourceProto.Source source = parseSourceJson((String) options.get(\"sourceJson\"));\n\n              Job job =\n                  Job.builder()\n                      .setId((String) options.get(\"jobName\"))\n                      .setSource(source)\n                      .setStores(\n                          stores.stream()\n                              .collect(Collectors.toMap(StoreProto.Store::getName, s -> s)))\n                      .setLabels(\n                          dfJob.getLabels() == null\n                              ? new HashMap<>()\n                              : new HashMap<>(dfJob.getLabels()))\n                      .build();\n\n              job.setExtId(dfJob.getId());\n              job.setStatus(JobStatus.RUNNING);\n              if (dfJob.getCreateTime() != null) {\n                job.setCreated(DateTime.parse(dfJob.getCreateTime()).toDate());\n              }\n\n              return job;\n            })\n        .collect(Collectors.toList());\n  }", "signature": "List<Job> listRunningJobs()", "full_signature": "@Override public List<Job> listRunningJobs()", "class_method_signature": "DataflowJobManager.listRunningJobs()", "testcase": false, "constructor": false, "invocations": ["getJobs", "execute", "setFilter", "list", "jobs", "locations", "projects", "format", "getMessage", "emptyList", "collect", "map", "filter", "map", "stream", "execute", "setView", "get", "jobs", "locations", "projects", "getId", "error", "getId", "getMessage", "getLabels", "isEmpty", "allMatch", "stream", "entrySet", "equals", "getOrDefault", "getLabels", "getKey", "getValue", "get", "getSdkPipelineOptions", "getEnvironment", "parseStoreJsonList", "get", "parseSourceJson", "get", "build", "setLabels", "setStores", "setSource", "setId", "builder", "get", "collect", "stream", "toMap", "getLabels", "getLabels", "setExtId", "getId", "setStatus", "getCreateTime", "setCreated", "toDate", "parse", "getCreateTime", "toList"]}, "repository": {"repo_id": 161133770, "url": "https://github.com/gojek/feast", "stars": 633, "created": "12/10/2018 7:20:15 AM +00:00", "updates": "2020-01-27T12:39:33+00:00", "fork": "False", "license": "licensed"}}