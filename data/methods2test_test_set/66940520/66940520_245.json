{"test_class": {"identifier": "QueryUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Schema schema;", "modifier": "private", "type": "Schema", "declarator": "schema", "var_name": "schema"}, {"original_string": "@Rule\n    public ExpectedException exceptionRule = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "exceptionRule = ExpectedException.none()", "var_name": "exceptionRule"}], "file": "dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/query/QueryUtilsTest.java"}, "test_case": {"identifier": "testParseFilterOperator", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseFilterOperator()\n    {\n        assertEquals( \"= 5\", QueryUtils.parseFilterOperator( \"eq\", \"5\" ) );\n\n        assertEquals( \"= 'ABC'\", QueryUtils.parseFilterOperator( \"eq\", \"ABC\" ) );\n\n        assertEquals( \"like '%abc%'\", QueryUtils.parseFilterOperator( \"like\", \"abc\" ) );\n\n        assertEquals( \" like '%abc'\", QueryUtils.parseFilterOperator( \"$like\", \"abc\" ) );\n\n        assertEquals( \"in ('a','b','c')\", QueryUtils.parseFilterOperator( \"in\", \"[a,b,c]\" ) );\n\n        assertEquals( \"in (1,2,3)\", QueryUtils.parseFilterOperator( \"in\", \"[1,2,3]\" ) );\n\n        assertEquals( \"is not null\", QueryUtils.parseFilterOperator( \"!null\", null ) );\n    }", "signature": "void testParseFilterOperator()", "full_signature": "@Test public void testParseFilterOperator()", "class_method_signature": "QueryUtilsTest.testParseFilterOperator()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "parseFilterOperator", "assertEquals", "parseFilterOperator", "assertEquals", "parseFilterOperator", "assertEquals", "parseFilterOperator", "assertEquals", "parseFilterOperator", "assertEquals", "parseFilterOperator", "assertEquals", "parseFilterOperator"]}, "focal_class": {"identifier": "QueryUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "parseValue", "parameters": "( Class<T> klass, Object objectValue )", "modifiers": "public static", "return": "T", "signature": "T parseValue( Class<T> klass, Object objectValue )", "full_signature": "public static T parseValue( Class<T> klass, Object objectValue )", "class_method_signature": "QueryUtils.parseValue( Class<T> klass, Object objectValue )", "testcase": false, "constructor": false}, {"identifier": "parseValue", "parameters": "( Class<T> klass, Class<?> secondaryKlass, Object objectValue )", "modifiers": "@SuppressWarnings( \"unchecked\" ) public static", "return": "T", "signature": "T parseValue( Class<T> klass, Class<?> secondaryKlass, Object objectValue )", "full_signature": "@SuppressWarnings( \"unchecked\" ) public static T parseValue( Class<T> klass, Class<?> secondaryKlass, Object objectValue )", "class_method_signature": "QueryUtils.parseValue( Class<T> klass, Class<?> secondaryKlass, Object objectValue )", "testcase": false, "constructor": false}, {"identifier": "getEnumValue", "parameters": "( Class<T> klass, String value )", "modifiers": "@SuppressWarnings( { \"unchecked\", \"rawtypes\" } ) public static", "return": "T", "signature": "T getEnumValue( Class<T> klass, String value )", "full_signature": "@SuppressWarnings( { \"unchecked\", \"rawtypes\" } ) public static T getEnumValue( Class<T> klass, String value )", "class_method_signature": "QueryUtils.getEnumValue( Class<T> klass, String value )", "testcase": false, "constructor": false}, {"identifier": "parseValue", "parameters": "( String value )", "modifiers": "public static", "return": "Object", "signature": "Object parseValue( String value )", "full_signature": "public static Object parseValue( String value )", "class_method_signature": "QueryUtils.parseValue( String value )", "testcase": false, "constructor": false}, {"identifier": "parseSelectFields", "parameters": "( List<String> fields )", "modifiers": "public static", "return": "String", "signature": "String parseSelectFields( List<String> fields )", "full_signature": "public static String parseSelectFields( List<String> fields )", "class_method_signature": "QueryUtils.parseSelectFields( List<String> fields )", "testcase": false, "constructor": false}, {"identifier": "convertCollectionValue", "parameters": "( String value )", "modifiers": "public static", "return": "String", "signature": "String convertCollectionValue( String value )", "full_signature": "public static String convertCollectionValue( String value )", "class_method_signature": "QueryUtils.convertCollectionValue( String value )", "testcase": false, "constructor": false}, {"identifier": "parseFilterOperator", "parameters": "( String operator, String value )", "modifiers": "public static", "return": "String", "signature": "String parseFilterOperator( String operator, String value )", "full_signature": "public static String parseFilterOperator( String operator, String value )", "class_method_signature": "QueryUtils.parseFilterOperator( String operator, String value )", "testcase": false, "constructor": false}, {"identifier": "convertOrderStrings", "parameters": "( @Nullable Collection<String> orders, @Nonnull Schema schema )", "modifiers": "@Nonnull public static", "return": "List<Order>", "signature": "List<Order> convertOrderStrings( @Nullable Collection<String> orders, @Nonnull Schema schema )", "full_signature": "@Nonnull public static List<Order> convertOrderStrings( @Nullable Collection<String> orders, @Nonnull Schema schema )", "class_method_signature": "QueryUtils.convertOrderStrings( @Nullable Collection<String> orders, @Nonnull Schema schema )", "testcase": false, "constructor": false}, {"identifier": "validProperty", "parameters": "( Property property )", "modifiers": "private static", "return": "boolean", "signature": "boolean validProperty( Property property )", "full_signature": "private static boolean validProperty( Property property )", "class_method_signature": "QueryUtils.validProperty( Property property )", "testcase": false, "constructor": false}, {"identifier": "validDirection", "parameters": "( String direction )", "modifiers": "private static", "return": "boolean", "signature": "boolean validDirection( String direction )", "full_signature": "private static boolean validDirection( String direction )", "class_method_signature": "QueryUtils.validDirection( String direction )", "testcase": false, "constructor": false}, {"identifier": "getSingleResult", "parameters": "( TypedQuery<T> query )", "modifiers": "public static", "return": "T", "signature": "T getSingleResult( TypedQuery<T> query )", "full_signature": "public static T getSingleResult( TypedQuery<T> query )", "class_method_signature": "QueryUtils.getSingleResult( TypedQuery<T> query )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/query/QueryUtils.java"}, "focal_method": {"identifier": "parseFilterOperator", "parameters": "( String operator, String value )", "modifiers": "public static", "return": "String", "body": "public static String parseFilterOperator( String operator, String value )\n    {\n\n        if ( StringUtils.isEmpty( operator ) )\n        {\n            throw new QueryParserException( \"Filter Operator is null\" );\n        }\n\n        switch ( operator )\n        {\n            case \"eq\":\n            {\n                return \"= \" + QueryUtils.parseValue( value );\n            }\n            case \"!eq\":\n            {\n                return \"!= \" + QueryUtils.parseValue( value );\n            }\n            case \"ne\":\n            {\n                return \"!= \" + QueryUtils.parseValue( value );\n            }\n            case \"neq\":\n            {\n                return \"!= \" + QueryUtils.parseValue( value );\n            }\n            case \"gt\":\n            {\n                return \"> \" + QueryUtils.parseValue( value );\n            }\n            case \"lt\":\n            {\n                return \"< \" + QueryUtils.parseValue( value );\n            }\n            case \"gte\":\n            {\n                return \">= \" + QueryUtils.parseValue( value );\n            }\n            case \"ge\":\n            {\n                return \">= \" + QueryUtils.parseValue( value );\n            }\n            case \"lte\":\n            {\n                return \"<= \" + QueryUtils.parseValue( value );\n            }\n            case \"le\":\n            {\n                return \"<= \" + QueryUtils.parseValue( value );\n            }\n            case \"like\":\n            {\n                return \"like '%\" + value + \"%'\";\n            }\n            case \"!like\":\n            {\n                return \"not like '%\" + value + \"%'\";\n            }\n            case \"^like\":\n            {\n                return \" like '\" + value + \"%'\";\n            }\n            case \"!^like\":\n            {\n                return \" not like '\" + value + \"%'\";\n            }\n            case \"$like\":\n            {\n                return \" like '%\" + value + \"'\";\n            }\n            case \"!$like\":\n            {\n                return \" not like '%\" + value + \"'\";\n            }\n            case \"ilike\":\n            {\n                return \" ilike '%\" + value + \"%'\";\n            }\n            case \"!ilike\":\n            {\n                return \" not ilike '%\" + value + \"%'\";\n            }\n            case \"^ilike\":\n            {\n                return \" ilike '\" + value + \"%'\";\n            }\n            case \"!^ilike\":\n            {\n                return \" not ilike '\" + value + \"%'\";\n            }\n            case \"$ilike\":\n            {\n                return \" ilike '%\" + value + \"'\";\n            }\n            case \"!$ilike\":\n            {\n                return \" not ilike '%\" + value + \"'\";\n            }\n            case \"in\":\n            {\n                return \"in \" + QueryUtils.convertCollectionValue( value );\n            }\n            case \"!in\":\n            {\n                return \" not in \" + QueryUtils.convertCollectionValue( value );\n            }\n            case \"null\":\n            {\n                return \"is null\";\n            }\n            case \"!null\":\n            {\n                return \"is not null\";\n            }\n            default:\n            {\n                throw new QueryParserException( \"`\" + operator + \"` is not a valid operator.\" );\n            }\n        }\n    }", "signature": "String parseFilterOperator( String operator, String value )", "full_signature": "public static String parseFilterOperator( String operator, String value )", "class_method_signature": "QueryUtils.parseFilterOperator( String operator, String value )", "testcase": false, "constructor": false, "invocations": ["isEmpty", "parseValue", "parseValue", "parseValue", "parseValue", "parseValue", "parseValue", "parseValue", "parseValue", "parseValue", "parseValue", "convertCollectionValue", "convertCollectionValue"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}