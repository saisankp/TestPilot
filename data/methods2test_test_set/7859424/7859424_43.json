{"test_class": {"identifier": "RaveNodeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RaveNode node;", "modifier": "private", "type": "RaveNode", "declarator": "node", "var_name": "node"}, {"original_string": "private CoordinateSystem coords;", "modifier": "private", "type": "CoordinateSystem", "declarator": "coords", "var_name": "coords"}], "file": "src/edu/lclark/orego/mcts/RaveNodeTest.java"}, "test_case": {"identifier": "testAddRaveLoss", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAddRaveLoss() {\n\t\tnode.addRaveLoss(at(\"a1\"));\n\t\tassertEquals(3, node.getRaveRuns(at(\"a1\")), 0.001);\n\t\tassertEquals(1, node.getRaveWins(at(\"a1\")), 0.001);\n\t\tassertEquals(1.0/3.0, node.getRaveWinRate(at(\"a1\")), 0.001);\n\t}", "signature": "void testAddRaveLoss()", "full_signature": "@Test public void testAddRaveLoss()", "class_method_signature": "RaveNodeTest.testAddRaveLoss()", "testcase": true, "constructor": false, "invocations": ["addRaveLoss", "at", "assertEquals", "getRaveRuns", "at", "assertEquals", "getRaveWins", "at", "assertEquals", "getRaveWinRate", "at"]}, "focal_class": {"identifier": "RaveNode", "superclass": "extends SimpleSearchNode", "interfaces": "", "fields": [{"original_string": "private final int[] raveRuns;", "modifier": "private final", "type": "int[]", "declarator": "raveRuns", "var_name": "raveRuns"}, {"original_string": "private final float[] raveWinRates;", "modifier": "private final", "type": "float[]", "declarator": "raveWinRates", "var_name": "raveWinRates"}], "methods": [{"identifier": "RaveNode", "parameters": "(CoordinateSystem coords)", "modifiers": "public", "return": "", "signature": " RaveNode(CoordinateSystem coords)", "full_signature": "public  RaveNode(CoordinateSystem coords)", "class_method_signature": "RaveNode.RaveNode(CoordinateSystem coords)", "testcase": false, "constructor": true}, {"identifier": "addRaveLoss", "parameters": "(short p)", "modifiers": "public", "return": "void", "signature": "void addRaveLoss(short p)", "full_signature": "public void addRaveLoss(short p)", "class_method_signature": "RaveNode.addRaveLoss(short p)", "testcase": false, "constructor": false}, {"identifier": "addRaveRun", "parameters": "(int p, float w)", "modifiers": "public", "return": "void", "signature": "void addRaveRun(int p, float w)", "full_signature": "public void addRaveRun(int p, float w)", "class_method_signature": "RaveNode.addRaveRun(int p, float w)", "testcase": false, "constructor": false}, {"identifier": "addRaveWin", "parameters": "(short p)", "modifiers": "public", "return": "void", "signature": "void addRaveWin(short p)", "full_signature": "public void addRaveWin(short p)", "class_method_signature": "RaveNode.addRaveWin(short p)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "(long fancyHash, CoordinateSystem coords)", "modifiers": "@Override public", "return": "void", "signature": "void clear(long fancyHash, CoordinateSystem coords)", "full_signature": "@Override public void clear(long fancyHash, CoordinateSystem coords)", "class_method_signature": "RaveNode.clear(long fancyHash, CoordinateSystem coords)", "testcase": false, "constructor": false}, {"identifier": "getRaveRuns", "parameters": "(short p)", "modifiers": "public", "return": "int", "signature": "int getRaveRuns(short p)", "full_signature": "public int getRaveRuns(short p)", "class_method_signature": "RaveNode.getRaveRuns(short p)", "testcase": false, "constructor": false}, {"identifier": "getRaveWinRate", "parameters": "(short p)", "modifiers": "public", "return": "float", "signature": "float getRaveWinRate(short p)", "full_signature": "public float getRaveWinRate(short p)", "class_method_signature": "RaveNode.getRaveWinRate(short p)", "testcase": false, "constructor": false}, {"identifier": "getRaveWins", "parameters": "(int p)", "modifiers": "public", "return": "float", "signature": "float getRaveWins(int p)", "full_signature": "public float getRaveWins(int p)", "class_method_signature": "RaveNode.getRaveWins(int p)", "testcase": false, "constructor": false}, {"identifier": "recordPlayout", "parameters": "(float winProportion, McRunnable runnable, int t)", "modifiers": "@Override public", "return": "void", "signature": "void recordPlayout(float winProportion, McRunnable runnable, int t)", "full_signature": "@Override public void recordPlayout(float winProportion, McRunnable runnable, int t)", "class_method_signature": "RaveNode.recordPlayout(float winProportion, McRunnable runnable, int t)", "testcase": false, "constructor": false}, {"identifier": "recordPlayout", "parameters": "(float winProportion, short[] moves, int t, int turn,\n\t\t\tShortSet playedPoints)", "modifiers": "", "return": "void", "signature": "void recordPlayout(float winProportion, short[] moves, int t, int turn,\n\t\t\tShortSet playedPoints)", "full_signature": " void recordPlayout(float winProportion, short[] moves, int t, int turn,\n\t\t\tShortSet playedPoints)", "class_method_signature": "RaveNode.recordPlayout(float winProportion, short[] moves, int t, int turn,\n\t\t\tShortSet playedPoints)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(CoordinateSystem coords)", "modifiers": "@Override public", "return": "String", "signature": "String toString(CoordinateSystem coords)", "full_signature": "@Override public String toString(CoordinateSystem coords)", "class_method_signature": "RaveNode.toString(CoordinateSystem coords)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(short p, CoordinateSystem coords)", "modifiers": "@Override @SuppressWarnings(\"boxing\")", "return": "String", "signature": "String toString(short p, CoordinateSystem coords)", "full_signature": "@Override @SuppressWarnings(\"boxing\") String toString(short p, CoordinateSystem coords)", "class_method_signature": "RaveNode.toString(short p, CoordinateSystem coords)", "testcase": false, "constructor": false}], "file": "src/edu/lclark/orego/mcts/RaveNode.java"}, "focal_method": {"identifier": "addRaveLoss", "parameters": "(short p)", "modifiers": "public", "return": "void", "body": "public void addRaveLoss(short p) {\n\t\taddRaveRun(p, 0);\n\t}", "signature": "void addRaveLoss(short p)", "full_signature": "public void addRaveLoss(short p)", "class_method_signature": "RaveNode.addRaveLoss(short p)", "testcase": false, "constructor": false, "invocations": ["addRaveRun"]}, "repository": {"repo_id": 7859424, "url": "https://github.com/Orego/Orego", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 1341444, "license": "licensed"}}