{"test_class": {"identifier": "RouteChangedEventPublisherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ApplicationEventPublisher publisher;", "modifier": "@Mock\n    private", "type": "ApplicationEventPublisher", "declarator": "publisher", "var_name": "publisher"}, {"original_string": "@InjectMocks\n    private RouteChangedEventPublisher routeChangedEventPublisher;", "modifier": "@InjectMocks\n    private", "type": "RouteChangedEventPublisher", "declarator": "routeChangedEventPublisher", "var_name": "routeChangedEventPublisher"}], "file": "optaweb-vehicle-routing-backend/src/test/java/org/optaweb/vehiclerouting/plugin/planner/RouteChangedEventPublisherTest.java"}, "test_case": {"identifier": "fail_fast_if_vehicles_next_visit_doesnt_exist", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void fail_fast_if_vehicles_next_visit_doesnt_exist() {\n        PlanningVehicle vehicle = testVehicle(1);\n        vehicle.setNextVisit(testVisit(2));\n\n        VehicleRoutingSolution solution = solutionFromVisits(\n                singletonList(vehicle),\n                new PlanningDepot(testLocation(1)),\n                singletonList(testVisit(3)));\n\n        assertThatIllegalArgumentException()\n                .isThrownBy(() -> RouteChangedEventPublisher.solutionToEvent(solution, this))\n                .withMessageContaining(\"Visit\");\n    }", "signature": "void fail_fast_if_vehicles_next_visit_doesnt_exist()", "full_signature": "@Test void fail_fast_if_vehicles_next_visit_doesnt_exist()", "class_method_signature": "RouteChangedEventPublisherTest.fail_fast_if_vehicles_next_visit_doesnt_exist()", "testcase": true, "constructor": false, "invocations": ["testVehicle", "setNextVisit", "testVisit", "solutionFromVisits", "singletonList", "testLocation", "singletonList", "testVisit", "withMessageContaining", "isThrownBy", "assertThatIllegalArgumentException", "solutionToEvent"]}, "focal_class": {"identifier": "RouteChangedEventPublisher", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(RouteChangedEventPublisher.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(RouteChangedEventPublisher.class)", "var_name": "logger"}, {"original_string": "private final ApplicationEventPublisher eventPublisher;", "modifier": "private final", "type": "ApplicationEventPublisher", "declarator": "eventPublisher", "var_name": "eventPublisher"}], "methods": [{"identifier": "RouteChangedEventPublisher", "parameters": "(ApplicationEventPublisher eventPublisher)", "modifiers": "@Autowired", "return": "", "signature": " RouteChangedEventPublisher(ApplicationEventPublisher eventPublisher)", "full_signature": "@Autowired  RouteChangedEventPublisher(ApplicationEventPublisher eventPublisher)", "class_method_signature": "RouteChangedEventPublisher.RouteChangedEventPublisher(ApplicationEventPublisher eventPublisher)", "testcase": false, "constructor": true}, {"identifier": "publishSolution", "parameters": "(VehicleRoutingSolution solution)", "modifiers": "", "return": "void", "signature": "void publishSolution(VehicleRoutingSolution solution)", "full_signature": " void publishSolution(VehicleRoutingSolution solution)", "class_method_signature": "RouteChangedEventPublisher.publishSolution(VehicleRoutingSolution solution)", "testcase": false, "constructor": false}, {"identifier": "solutionToEvent", "parameters": "(VehicleRoutingSolution solution, Object source)", "modifiers": "static", "return": "RouteChangedEvent", "signature": "RouteChangedEvent solutionToEvent(VehicleRoutingSolution solution, Object source)", "full_signature": "static RouteChangedEvent solutionToEvent(VehicleRoutingSolution solution, Object source)", "class_method_signature": "RouteChangedEventPublisher.solutionToEvent(VehicleRoutingSolution solution, Object source)", "testcase": false, "constructor": false}, {"identifier": "visitIds", "parameters": "(VehicleRoutingSolution solution)", "modifiers": "private static", "return": "List<Long>", "signature": "List<Long> visitIds(VehicleRoutingSolution solution)", "full_signature": "private static List<Long> visitIds(VehicleRoutingSolution solution)", "class_method_signature": "RouteChangedEventPublisher.visitIds(VehicleRoutingSolution solution)", "testcase": false, "constructor": false}, {"identifier": "routes", "parameters": "(VehicleRoutingSolution solution)", "modifiers": "private static", "return": "List<ShallowRoute>", "signature": "List<ShallowRoute> routes(VehicleRoutingSolution solution)", "full_signature": "private static List<ShallowRoute> routes(VehicleRoutingSolution solution)", "class_method_signature": "RouteChangedEventPublisher.routes(VehicleRoutingSolution solution)", "testcase": false, "constructor": false}, {"identifier": "vehicleIds", "parameters": "(VehicleRoutingSolution solution)", "modifiers": "private static", "return": "List<Long>", "signature": "List<Long> vehicleIds(VehicleRoutingSolution solution)", "full_signature": "private static List<Long> vehicleIds(VehicleRoutingSolution solution)", "class_method_signature": "RouteChangedEventPublisher.vehicleIds(VehicleRoutingSolution solution)", "testcase": false, "constructor": false}, {"identifier": "depotId", "parameters": "(VehicleRoutingSolution solution)", "modifiers": "private static", "return": "Long", "signature": "Long depotId(VehicleRoutingSolution solution)", "full_signature": "private static Long depotId(VehicleRoutingSolution solution)", "class_method_signature": "RouteChangedEventPublisher.depotId(VehicleRoutingSolution solution)", "testcase": false, "constructor": false}], "file": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/planner/RouteChangedEventPublisher.java"}, "focal_method": {"identifier": "solutionToEvent", "parameters": "(VehicleRoutingSolution solution, Object source)", "modifiers": "static", "return": "RouteChangedEvent", "body": "static RouteChangedEvent solutionToEvent(VehicleRoutingSolution solution, Object source) {\n        List<ShallowRoute> routes = routes(solution);\n        return new RouteChangedEvent(\n                source,\n                // Turn negative soft score into a positive amount of time.\n                Distance.ofMillis(-solution.getScore().getSoftScore()),\n                vehicleIds(solution),\n                depotId(solution),\n                visitIds(solution),\n                routes);\n    }", "signature": "RouteChangedEvent solutionToEvent(VehicleRoutingSolution solution, Object source)", "full_signature": "static RouteChangedEvent solutionToEvent(VehicleRoutingSolution solution, Object source)", "class_method_signature": "RouteChangedEventPublisher.solutionToEvent(VehicleRoutingSolution solution, Object source)", "testcase": false, "constructor": false, "invocations": ["routes", "ofMillis", "getSoftScore", "getScore", "vehicleIds", "depotId", "visitIds"]}, "repository": {"repo_id": 142603842, "url": "https://github.com/kiegroup/optaweb-vehicle-routing", "stars": 42, "created": "7/27/2018 5:08:08 PM +00:00", "updates": "2020-01-27T22:19:48+00:00", "fork": "False", "license": "licensed"}}