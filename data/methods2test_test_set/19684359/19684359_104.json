{"test_class": {"identifier": "BigQueryUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Bigquery mockBigQuery;", "modifier": "private", "type": "Bigquery", "declarator": "mockBigQuery", "var_name": "mockBigQuery"}, {"original_string": "private Progressable mockProgressable;", "modifier": "private", "type": "Progressable", "declarator": "mockProgressable", "var_name": "mockProgressable"}, {"original_string": "private String projectId = \"Test\";", "modifier": "private", "type": "String", "declarator": "projectId = \"Test\"", "var_name": "projectId"}, {"original_string": "private JobReference jobReference;", "modifier": "private", "type": "JobReference", "declarator": "jobReference", "var_name": "jobReference"}, {"original_string": "private Bigquery.Jobs mockBigQueryJobs;", "modifier": "private", "type": "Bigquery.Jobs", "declarator": "mockBigQueryJobs", "var_name": "mockBigQueryJobs"}, {"original_string": "private Bigquery.Jobs.Get mockJobsGet;", "modifier": "private", "type": "Bigquery.Jobs.Get", "declarator": "mockJobsGet", "var_name": "mockJobsGet"}, {"original_string": "private JobStatus jobStatus;", "modifier": "private", "type": "JobStatus", "declarator": "jobStatus", "var_name": "jobStatus"}, {"original_string": "private JobStatus notDoneJobStatus;", "modifier": "private", "type": "JobStatus", "declarator": "notDoneJobStatus", "var_name": "notDoneJobStatus"}, {"original_string": "private Job job;", "modifier": "private", "type": "Job", "declarator": "job", "var_name": "job"}, {"original_string": "private Job notDoneJob;", "modifier": "private", "type": "Job", "declarator": "notDoneJob", "var_name": "notDoneJob"}], "file": "bigquery/src/test/java/com/google/cloud/hadoop/io/bigquery/BigQueryUtilsTest.java"}, "test_case": {"identifier": "testGetSchemaFromStringWithMissingType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetSchemaFromStringWithMissingType() {\n    // Bad schema, missing 'type' in the second entry.\n    String fields =\n        \"[{'name': 'MyName', 'type': 'STRING'},\"\n        + \"{'name': 'Number', 'mode': 'sample'}]\";\n    assertThrows(IllegalArgumentException.class, () -> BigQueryUtils.getSchemaFromString(fields));\n  }", "signature": "void testGetSchemaFromStringWithMissingType()", "full_signature": "@Test public void testGetSchemaFromStringWithMissingType()", "class_method_signature": "BigQueryUtilsTest.testGetSchemaFromStringWithMissingType()", "testcase": true, "constructor": false, "invocations": ["assertThrows", "getSchemaFromString"]}, "focal_class": {"identifier": "BigQueryUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final GoogleLogger logger = GoogleLogger.forEnclosingClass();", "modifier": "private static final", "type": "GoogleLogger", "declarator": "logger = GoogleLogger.forEnclosingClass()", "var_name": "logger"}, {"original_string": "public static final int POLL_WAIT_INITIAL_MILLIS =\n      (int) TimeUnit.MILLISECONDS.convert(10, TimeUnit.SECONDS);", "modifier": "public static final", "type": "int", "declarator": "POLL_WAIT_INITIAL_MILLIS =\n      (int) TimeUnit.MILLISECONDS.convert(10, TimeUnit.SECONDS)", "var_name": "POLL_WAIT_INITIAL_MILLIS"}, {"original_string": "public static final int POLL_WAIT_INTERVAL_MAX_MILLIS =\n      (int) TimeUnit.MILLISECONDS.convert(180, TimeUnit.SECONDS);", "modifier": "public static final", "type": "int", "declarator": "POLL_WAIT_INTERVAL_MAX_MILLIS =\n      (int) TimeUnit.MILLISECONDS.convert(180, TimeUnit.SECONDS)", "var_name": "POLL_WAIT_INTERVAL_MAX_MILLIS"}, {"original_string": "public static final int POLL_WAIT_MAX_ELAPSED_MILLIS =\n      (int) TimeUnit.MILLISECONDS.convert(1, TimeUnit.DAYS);", "modifier": "public static final", "type": "int", "declarator": "POLL_WAIT_MAX_ELAPSED_MILLIS =\n      (int) TimeUnit.MILLISECONDS.convert(1, TimeUnit.DAYS)", "var_name": "POLL_WAIT_MAX_ELAPSED_MILLIS"}], "methods": [{"identifier": "waitForJobCompletion", "parameters": "(\n      Bigquery bigquery, String projectId, JobReference jobReference, Progressable progressable)", "modifiers": "public static", "return": "void", "signature": "void waitForJobCompletion(\n      Bigquery bigquery, String projectId, JobReference jobReference, Progressable progressable)", "full_signature": "public static void waitForJobCompletion(\n      Bigquery bigquery, String projectId, JobReference jobReference, Progressable progressable)", "class_method_signature": "BigQueryUtils.waitForJobCompletion(\n      Bigquery bigquery, String projectId, JobReference jobReference, Progressable progressable)", "testcase": false, "constructor": false}, {"identifier": "getSchemaFromString", "parameters": "(String fields)", "modifiers": "public static", "return": "List<TableFieldSchema>", "signature": "List<TableFieldSchema> getSchemaFromString(String fields)", "full_signature": "public static List<TableFieldSchema> getSchemaFromString(String fields)", "class_method_signature": "BigQueryUtils.getSchemaFromString(String fields)", "testcase": false, "constructor": false}], "file": "bigquery/src/main/java/com/google/cloud/hadoop/io/bigquery/BigQueryUtils.java"}, "focal_method": {"identifier": "getSchemaFromString", "parameters": "(String fields)", "modifiers": "public static", "return": "List<TableFieldSchema>", "body": "public static List<TableFieldSchema> getSchemaFromString(String fields) {\n    logger.atFine().log(\"getSchemaFromString('%s')\", fields);\n\n    // Parse the output schema for Json from fields.\n    JsonParser jsonParser = new JsonParser();\n    JsonArray json = jsonParser.parse(fields).getAsJsonArray();\n    List<TableFieldSchema> fieldsList = new ArrayList<>();\n\n    // For each item in the list of fields.\n    for (JsonElement jsonElement : json) {\n      checkArgument(\n          jsonElement.isJsonObject(), \"Expected JsonObject for element, got '%s'.\", jsonElement);\n      JsonObject jsonObject = jsonElement.getAsJsonObject();\n\n      // Set the name and type.\n      checkArgument(\n          jsonObject.get(\"name\") != null,\n          \"Expected non-null entry for key 'name' in JsonObject '%s'\", jsonObject);\n      checkArgument(\n          jsonObject.get(\"type\") != null,\n          \"Expected non-null entry for key 'type' in JsonObject '%s'\", jsonObject);\n      TableFieldSchema fieldDef = new TableFieldSchema();\n      fieldDef.setName(jsonObject.get(\"name\").getAsString());\n      fieldDef.setType(jsonObject.get(\"type\").getAsString());\n\n      // If mode is not null, set mode.\n      if (jsonObject.get(\"mode\") != null) {\n        fieldDef.setMode(jsonObject.get(\"mode\").getAsString());\n      }\n\n      // If the type is RECORD set the fields.\n      if (jsonObject.get(\"type\").getAsString().equals(\"RECORD\")) {\n        checkArgument(\n            jsonObject.get(\"fields\") != null,\n            \"Expected non-null entry for key 'fields' in JsonObject of type RECORD: '%s'\",\n            jsonObject);\n        fieldDef.setFields(getSchemaFromString(jsonObject.get(\"fields\").toString()));\n      }\n\n      fieldsList.add(fieldDef);\n    }\n    // Return list of TableFieldSchema.\n    return fieldsList;\n  }", "signature": "List<TableFieldSchema> getSchemaFromString(String fields)", "full_signature": "public static List<TableFieldSchema> getSchemaFromString(String fields)", "class_method_signature": "BigQueryUtils.getSchemaFromString(String fields)", "testcase": false, "constructor": false, "invocations": ["log", "atFine", "getAsJsonArray", "parse", "checkArgument", "isJsonObject", "getAsJsonObject", "checkArgument", "get", "checkArgument", "get", "setName", "getAsString", "get", "setType", "getAsString", "get", "get", "setMode", "getAsString", "get", "equals", "getAsString", "get", "checkArgument", "get", "setFields", "getSchemaFromString", "toString", "get", "add"]}, "repository": {"repo_id": 19684359, "url": "https://github.com/GoogleCloudDataproc/bigdata-interop", "stars": 178, "created": "5/12/2014 3:11:55 AM +00:00", "updates": "2020-01-23T23:10:40+00:00", "fork": "False", "license": "licensed"}}