{"test_class": {"identifier": "UpsertIntoCachedCollectionTaskTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private UpsertIntoCachedCollectionTask task;", "modifier": "private", "type": "UpsertIntoCachedCollectionTask", "declarator": "task", "var_name": "task"}, {"original_string": "private IField startDateTimeField;", "modifier": "private", "type": "IField", "declarator": "startDateTimeField", "var_name": "startDateTimeField"}, {"original_string": "private IField collectionNameField;", "modifier": "private", "type": "IField", "declarator": "collectionNameField", "var_name": "collectionNameField"}, {"original_string": "private IField documentField;", "modifier": "private", "type": "IField", "declarator": "documentField", "var_name": "documentField"}, {"original_string": "private IStorageConnection connection;", "modifier": "private", "type": "IStorageConnection", "declarator": "connection", "var_name": "connection"}], "file": "CoreFeatures/Database/CachedCollection/src/test/java/info/smart_tools/smartactors/database/cached_collection/task/UpsertIntoCachedCollectionTaskTest.java"}, "test_case": {"identifier": "ShouldThrowException_When_ResolutionExceptionIsThrown", "parameters": "()", "modifiers": "@Test(expected = TaskPrepareException.class) public", "return": "void", "body": "@Test(expected = TaskPrepareException.class)\n    public void ShouldThrowException_When_ResolutionExceptionIsThrown() throws Exception {\n\n        IObject rawQuery = mock(IObject.class);\n        when(startDateTimeField.in(rawQuery)).thenThrow(ChangeValueException.class);\n\n        task.prepare(rawQuery);\n    }", "signature": "void ShouldThrowException_When_ResolutionExceptionIsThrown()", "full_signature": "@Test(expected = TaskPrepareException.class) public void ShouldThrowException_When_ResolutionExceptionIsThrown()", "class_method_signature": "UpsertIntoCachedCollectionTaskTest.ShouldThrowException_When_ResolutionExceptionIsThrown()", "testcase": true, "constructor": false, "invocations": ["mock", "thenThrow", "when", "in", "prepare"]}, "focal_class": {"identifier": "UpsertIntoCachedCollectionTask", "superclass": "", "interfaces": "implements IDatabaseTask", "fields": [{"original_string": "private IDatabaseTask upsertTask;", "modifier": "private", "type": "IDatabaseTask", "declarator": "upsertTask", "var_name": "upsertTask"}, {"original_string": "private IStorageConnection connection;", "modifier": "private", "type": "IStorageConnection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private IField startDateTimeField;", "modifier": "private", "type": "IField", "declarator": "startDateTimeField", "var_name": "startDateTimeField"}, {"original_string": "private IField collectionNameField;", "modifier": "private", "type": "IField", "declarator": "collectionNameField", "var_name": "collectionNameField"}, {"original_string": "private IField documentField;", "modifier": "private", "type": "IField", "declarator": "documentField", "var_name": "documentField"}, {"original_string": "private DateTimeFormatter formatter;", "modifier": "private", "type": "DateTimeFormatter", "declarator": "formatter", "var_name": "formatter"}], "methods": [{"identifier": "UpsertIntoCachedCollectionTask", "parameters": "(final IStorageConnection connection)", "modifiers": "public", "return": "", "signature": " UpsertIntoCachedCollectionTask(final IStorageConnection connection)", "full_signature": "public  UpsertIntoCachedCollectionTask(final IStorageConnection connection)", "class_method_signature": "UpsertIntoCachedCollectionTask.UpsertIntoCachedCollectionTask(final IStorageConnection connection)", "testcase": false, "constructor": true}, {"identifier": "prepare", "parameters": "(final IObject query)", "modifiers": "@Override public", "return": "void", "signature": "void prepare(final IObject query)", "full_signature": "@Override public void prepare(final IObject query)", "class_method_signature": "UpsertIntoCachedCollectionTask.prepare(final IObject query)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "UpsertIntoCachedCollectionTask.execute()", "testcase": false, "constructor": false}], "file": "CoreFeatures/Database/CachedCollection/src/main/java/info/smart_tools/smartactors/database/cached_collection/task/UpsertIntoCachedCollectionTask.java"}, "focal_method": {"identifier": "prepare", "parameters": "(final IObject query)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void prepare(final IObject query) throws TaskPrepareException {\n\n        try {\n            if (startDateTimeField.in(query) == null) {\n                startDateTimeField.out(query, LocalDateTime.now().format(formatter));\n            }\n            upsertTask = IOC.resolve(\n                Keys.getOrAdd(\"db.collection.upsert\"),\n                connection,\n                collectionNameField.in(query),\n                documentField.in(query)\n            );\n        } catch (InvalidArgumentException | ReadValueException | ChangeValueException | ResolutionException e) {\n            throw new TaskPrepareException(\"Can't prepare query for upsert into cached collection\", e);\n        }\n    }", "signature": "void prepare(final IObject query)", "full_signature": "@Override public void prepare(final IObject query)", "class_method_signature": "UpsertIntoCachedCollectionTask.prepare(final IObject query)", "testcase": false, "constructor": false, "invocations": ["in", "out", "format", "now", "resolve", "getOrAdd", "in", "in"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}