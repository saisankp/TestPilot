{"test_class": {"identifier": "GetHeaderFromRequestRulePluginTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private GetHeaderFromRequestRulePlugin plugin;", "modifier": "private", "type": "GetHeaderFromRequestRulePlugin", "declarator": "plugin", "var_name": "plugin"}, {"original_string": "private IBootstrap bootstrap;", "modifier": "private", "type": "IBootstrap", "declarator": "bootstrap", "var_name": "bootstrap"}], "file": "CoreFeatures/HttpEndpoint-plugins/PluginGetHeaderRule/src/test/java/info/smart_tools/smartactors/http_endpoint_plugins/get_header_from_request_rule_plugin/GetHeaderFromRequestRulePluginTest.java"}, "test_case": {"identifier": "MustCorrectLoadPlugin", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void MustCorrectLoadPlugin() throws Exception {\n\n        BootstrapItem bootstrapItem = mock(BootstrapItem.class);\n        whenNew(BootstrapItem.class).withArguments(\"GetHeaderFromRequestRulePlugin\").thenReturn(bootstrapItem);\n\n        when(bootstrapItem.after(anyString())).thenReturn(bootstrapItem);\n        when(bootstrapItem.before(anyString())).thenReturn(bootstrapItem);\n\n        plugin.load();\n\n        verifyNew(BootstrapItem.class).withArguments(\"GetHeaderFromRequestRulePlugin\");\n\n        ArgumentCaptor<IPoorAction> actionArgumentCaptor = ArgumentCaptor.forClass(IPoorAction.class);\n\n//        verify(bootstrapItem).after(\"IOC\");\n//        verify(bootstrapItem).after(\"wds_object\");\n//        verify(bootstrapItem).before(\"starter\");\n        verify(bootstrapItem).process(actionArgumentCaptor.capture());\n\n        verify(bootstrap).add(bootstrapItem);\n\n        IKey strategyKey = mock(IKey.class);\n        when(Keys.getOrAdd(IResolveDependencyStrategy.class.getCanonicalName())).thenReturn(strategyKey);\n\n        GetHeaderFromRequestRule targetObject = mock(GetHeaderFromRequestRule.class);\n        whenNew(GetHeaderFromRequestRule.class).withNoArguments().thenReturn(targetObject);\n\n\n        actionArgumentCaptor.getValue().execute();\n\n        verifyStatic();\n        Keys.getOrAdd(IResolveDependencyStrategy.class.getCanonicalName());\n\n        verifyNew(GetHeaderFromRequestRule.class).withNoArguments();\n\n        verifyStatic();\n        IOC.resolve(strategyKey, \"getHeaderFromRequestRule\", targetObject);\n        /*IKey ruleKey = mock(IKey.class);\n        when(Keys.getOrAdd(GetHeaderFromRequestRule.class.getCanonicalName())).thenReturn(ruleKey);\n\n        actionArgumentCaptor.getValue().execute();\n\n        verifyStatic();\n        Keys.getOrAdd(GetHeaderFromRequestRule.class.getCanonicalName());\n\n        ArgumentCaptor<CreateNewInstanceStrategy> createNewInstanceStrategyArgumentCaptor = ArgumentCaptor.forClass(CreateNewInstanceStrategy.class);\n\n        verifyStatic();\n        IOC.register(eq(ruleKey), createNewInstanceStrategyArgumentCaptor.capture());\n\n        IObject arg = mock(IObject.class);\n\n        GetHeaderFromRequestRule rule = mock(GetHeaderFromRequestRule.class);\n        whenNew(GetHeaderFromRequestRule.class).withNoArguments().thenReturn(rule);\n\n        assertTrue(\"Objects must return correct object\", createNewInstanceStrategyArgumentCaptor.getValue().resolve(arg) == rule);\n\n        verifyNew(GetHeaderFromRequestRule.class).withNoArguments();*/\n    }", "signature": "void MustCorrectLoadPlugin()", "full_signature": "@Test public void MustCorrectLoadPlugin()", "class_method_signature": "GetHeaderFromRequestRulePluginTest.MustCorrectLoadPlugin()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "withArguments", "whenNew", "thenReturn", "when", "after", "anyString", "thenReturn", "when", "before", "anyString", "load", "withArguments", "verifyNew", "forClass", "process", "verify", "capture", "add", "verify", "mock", "thenReturn", "when", "getOrAdd", "getCanonicalName", "mock", "thenReturn", "withNoArguments", "whenNew", "execute", "getValue", "verifyStatic", "getOrAdd", "getCanonicalName", "withNoArguments", "verifyNew", "verifyStatic", "resolve"]}, "focal_class": {"identifier": "GetHeaderFromRequestRulePlugin", "superclass": "", "interfaces": "implements IPlugin", "fields": [{"original_string": "private final IBootstrap<IBootstrapItem<String>> bootstrap;", "modifier": "private final", "type": "IBootstrap<IBootstrapItem<String>>", "declarator": "bootstrap", "var_name": "bootstrap"}], "methods": [{"identifier": "GetHeaderFromRequestRulePlugin", "parameters": "(final IBootstrap<IBootstrapItem<String>> bootstrap)", "modifiers": "public", "return": "", "signature": " GetHeaderFromRequestRulePlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "full_signature": "public  GetHeaderFromRequestRulePlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "class_method_signature": "GetHeaderFromRequestRulePlugin.GetHeaderFromRequestRulePlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "testcase": false, "constructor": true}, {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "GetHeaderFromRequestRulePlugin.load()", "testcase": false, "constructor": false}], "file": "CoreFeatures/HttpEndpoint-plugins/PluginGetHeaderRule/src/main/java/info/smart_tools/smartactors/http_endpoint_plugins/get_header_from_request_rule_plugin/GetHeaderFromRequestRulePlugin.java"}, "focal_method": {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void load() throws PluginException {\n        try {\n            IBootstrapItem<String> item = new BootstrapItem(\"GetHeaderFromRequestRulePlugin\");\n\n            item\n//                .after(\"IOC\")\n//                .after(\"wds_object\")\n//                .before(\"starter\")\n                    .process(() -> {\n                        try {\n                            //call IOC.resolve for put GetHeaderFromRequestRule into cache of ResolveByNameDependency strategy\n                            IOC.resolve(\n                                Keys.getOrAdd(IResolveDependencyStrategy.class.getCanonicalName()),\n                                \"getHeaderFromRequestRule\",\n                                new GetHeaderFromRequestRule()\n                            );\n                        } catch (ResolutionException e) {\n                            throw new ActionExecuteException(\n                                \"GetHeaderFromRequestRule plugin can't load: can't get GetHeaderFromRequestRule key\", e\n                            );\n                        }\n                    });\n            bootstrap.add(item);\n        } catch (InvalidArgumentException e) {\n            throw new PluginException(\"Can't load GetHeaderFromRequestRule plugin\", e);\n        }\n    }", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "GetHeaderFromRequestRulePlugin.load()", "testcase": false, "constructor": false, "invocations": ["process", "resolve", "getOrAdd", "getCanonicalName", "add"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}