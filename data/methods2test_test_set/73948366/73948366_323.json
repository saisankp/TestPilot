{"test_class": {"identifier": "OAuthAuthorityUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "libs/java/auth_core/src/test/java/com/yahoo/athenz/auth/oauth/util/OAuthAuthorityUtilsTest.java"}, "test_case": {"identifier": "testExtractHeaderToken", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExtractHeaderToken() {\n        String tokenString = null;\n        Enumeration<String> headers = null;\n        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);\n\n        // strict bearer token\n        headers = Collections.enumeration(Arrays.asList(\"Bearer dummy_access_token_1\"));\n        Mockito.when(request.getHeaders(\"Authorization\")).thenReturn(headers);\n        tokenString = OAuthAuthorityUtils.extractHeaderToken(request);\n        assertEquals(tokenString, \"dummy_access_token_1\");\n\n        // case-insensitive bearer token\n        headers = Collections.enumeration(Arrays.asList(\"bearer dummy_access_token_2\"));\n        Mockito.when(request.getHeaders(\"Authorization\")).thenReturn(headers);\n        tokenString = OAuthAuthorityUtils.extractHeaderToken(request);\n        assertEquals(tokenString, \"dummy_access_token_2\");\n\n        // multiple bearer token\n        headers = Collections.enumeration(Arrays.asList(\"Bearer dummy_access_token_3,dummy_access_token_4\"));\n        Mockito.when(request.getHeaders(\"Authorization\")).thenReturn(headers);\n        tokenString = OAuthAuthorityUtils.extractHeaderToken(request);\n        assertEquals(tokenString, \"dummy_access_token_3\");\n\n        // empty header\n        Mockito.when(request.getHeaders(\"Authorization\")).thenReturn(Collections.emptyEnumeration());\n        tokenString = OAuthAuthorityUtils.extractHeaderToken(request);\n        assertEquals(tokenString, null);\n\n        // non-bearer header\n        headers = Collections.enumeration(Arrays.asList(\"Basic encoded_password\"));\n        Mockito.when(request.getHeaders(\"Authorization\")).thenReturn(headers);\n        tokenString = OAuthAuthorityUtils.extractHeaderToken(request);\n        assertEquals(tokenString, null);\n    }", "signature": "void testExtractHeaderToken()", "full_signature": "@Test public void testExtractHeaderToken()", "class_method_signature": "OAuthAuthorityUtilsTest.testExtractHeaderToken()", "testcase": true, "constructor": false, "invocations": ["mock", "enumeration", "asList", "thenReturn", "when", "getHeaders", "extractHeaderToken", "assertEquals", "enumeration", "asList", "thenReturn", "when", "getHeaders", "extractHeaderToken", "assertEquals", "enumeration", "asList", "thenReturn", "when", "getHeaders", "extractHeaderToken", "assertEquals", "thenReturn", "when", "getHeaders", "emptyEnumeration", "extractHeaderToken", "assertEquals", "enumeration", "asList", "thenReturn", "when", "getHeaders", "extractHeaderToken", "assertEquals"]}, "focal_class": {"identifier": "OAuthAuthorityUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getProperty", "parameters": "(String key, String def)", "modifiers": "public static final", "return": "String", "signature": "String getProperty(String key, String def)", "full_signature": "public static final String getProperty(String key, String def)", "class_method_signature": "OAuthAuthorityUtils.getProperty(String key, String def)", "testcase": false, "constructor": false}, {"identifier": "csvToSet", "parameters": "(String csv, String delimiter)", "modifiers": "public static final", "return": "Set<String>", "signature": "Set<String> csvToSet(String csv, String delimiter)", "full_signature": "public static final Set<String> csvToSet(String csv, String delimiter)", "class_method_signature": "OAuthAuthorityUtils.csvToSet(String csv, String delimiter)", "testcase": false, "constructor": false}, {"identifier": "extractHeaderToken", "parameters": "(HttpServletRequest request)", "modifiers": "public static final", "return": "String", "signature": "String extractHeaderToken(HttpServletRequest request)", "full_signature": "public static final String extractHeaderToken(HttpServletRequest request)", "class_method_signature": "OAuthAuthorityUtils.extractHeaderToken(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "OAuthAuthorityUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " OAuthAuthorityUtils()", "full_signature": "private  OAuthAuthorityUtils()", "class_method_signature": "OAuthAuthorityUtils.OAuthAuthorityUtils()", "testcase": false, "constructor": true}], "file": "libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/oauth/util/OAuthAuthorityUtils.java"}, "focal_method": {"identifier": "extractHeaderToken", "parameters": "(HttpServletRequest request)", "modifiers": "public static final", "return": "String", "body": "public static final String extractHeaderToken(HttpServletRequest request) {\n        Enumeration<String> headers = request.getHeaders(OAuthAuthorityConsts.AUTH_HEADER);\n        while (headers.hasMoreElements()) {\n            // typically there is only one (most servers enforce that)\n            String value = headers.nextElement();\n            if ((value.toLowerCase().startsWith(OAuthAuthorityConsts.BEARER_TYPE))) {\n                String authHeaderValue = value.substring(OAuthAuthorityConsts.BEARER_TYPE.length()).trim();\n                int commaIndex = authHeaderValue.indexOf(',');\n                if (commaIndex > 0) {\n                    authHeaderValue = authHeaderValue.substring(0, commaIndex);\n                }\n                return authHeaderValue;\n            }\n        }\n\n        return null;\n    }", "signature": "String extractHeaderToken(HttpServletRequest request)", "full_signature": "public static final String extractHeaderToken(HttpServletRequest request)", "class_method_signature": "OAuthAuthorityUtils.extractHeaderToken(HttpServletRequest request)", "testcase": false, "constructor": false, "invocations": ["getHeaders", "hasMoreElements", "nextElement", "startsWith", "toLowerCase", "trim", "substring", "length", "indexOf", "substring"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}