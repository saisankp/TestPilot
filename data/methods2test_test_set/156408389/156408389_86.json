{"test_class": {"identifier": "KeyPairTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SEED = \"1123740522f11bfef6b3671f51e159ccf589ccf8965262dd5f97d1721d383dd4\";", "modifier": "private static final", "type": "String", "declarator": "SEED = \"1123740522f11bfef6b3671f51e159ccf589ccf8965262dd5f97d1721d383dd4\"", "var_name": "SEED"}], "file": "kin-sdk/kin-base/src/test/java/kin/base/KeyPairTest.java"}, "test_case": {"identifier": "testSign", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSign() {\n        String expectedSig = \"587d4b472eeef7d07aafcd0b049640b0bb3f39784118c2e2b73a04fa2f64c9c538b4b2d0f5335e968a480021fdc23e98c0ddf424cb15d8131df8cb6c4bb58309\";\n        KeyPair keypair = KeyPair.fromSecretSeed(Util.hexToBytes(SEED));\n        String data = \"hello world\";\n        byte[] sig = keypair.sign(data.getBytes());\n        Assert.assertArrayEquals(Util.hexToBytes(expectedSig), sig);\n    }", "signature": "void testSign()", "full_signature": "@Test public void testSign()", "class_method_signature": "KeyPairTest.testSign()", "testcase": true, "constructor": false, "invocations": ["fromSecretSeed", "hexToBytes", "sign", "getBytes", "assertArrayEquals", "hexToBytes"]}, "focal_class": {"identifier": "KeyPair", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final EdDSANamedCurveSpec ed25519 = EdDSANamedCurveTable.ED_25519_CURVE_SPEC;", "modifier": "private static final", "type": "EdDSANamedCurveSpec", "declarator": "ed25519 = EdDSANamedCurveTable.ED_25519_CURVE_SPEC", "var_name": "ed25519"}, {"original_string": "private final EdDSAPublicKey mPublicKey;", "modifier": "private final", "type": "EdDSAPublicKey", "declarator": "mPublicKey", "var_name": "mPublicKey"}, {"original_string": "private final EdDSAPrivateKey mPrivateKey;", "modifier": "private final", "type": "EdDSAPrivateKey", "declarator": "mPrivateKey", "var_name": "mPrivateKey"}], "methods": [{"identifier": "KeyPair", "parameters": "(EdDSAPublicKey publicKey)", "modifiers": "public", "return": "", "signature": " KeyPair(EdDSAPublicKey publicKey)", "full_signature": "public  KeyPair(EdDSAPublicKey publicKey)", "class_method_signature": "KeyPair.KeyPair(EdDSAPublicKey publicKey)", "testcase": false, "constructor": true}, {"identifier": "KeyPair", "parameters": "(EdDSAPublicKey publicKey, EdDSAPrivateKey privateKey)", "modifiers": "public", "return": "", "signature": " KeyPair(EdDSAPublicKey publicKey, EdDSAPrivateKey privateKey)", "full_signature": "public  KeyPair(EdDSAPublicKey publicKey, EdDSAPrivateKey privateKey)", "class_method_signature": "KeyPair.KeyPair(EdDSAPublicKey publicKey, EdDSAPrivateKey privateKey)", "testcase": false, "constructor": true}, {"identifier": "canSign", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean canSign()", "full_signature": "public boolean canSign()", "class_method_signature": "KeyPair.canSign()", "testcase": false, "constructor": false}, {"identifier": "fromSecretSeed", "parameters": "(char[] seed)", "modifiers": "public static", "return": "KeyPair", "signature": "KeyPair fromSecretSeed(char[] seed)", "full_signature": "public static KeyPair fromSecretSeed(char[] seed)", "class_method_signature": "KeyPair.fromSecretSeed(char[] seed)", "testcase": false, "constructor": false}, {"identifier": "fromSecretSeed", "parameters": "(String seed)", "modifiers": "public static", "return": "KeyPair", "signature": "KeyPair fromSecretSeed(String seed)", "full_signature": "public static KeyPair fromSecretSeed(String seed)", "class_method_signature": "KeyPair.fromSecretSeed(String seed)", "testcase": false, "constructor": false}, {"identifier": "fromSecretSeed", "parameters": "(byte[] seed)", "modifiers": "public static", "return": "KeyPair", "signature": "KeyPair fromSecretSeed(byte[] seed)", "full_signature": "public static KeyPair fromSecretSeed(byte[] seed)", "class_method_signature": "KeyPair.fromSecretSeed(byte[] seed)", "testcase": false, "constructor": false}, {"identifier": "fromAccountId", "parameters": "(String accountId)", "modifiers": "public static", "return": "KeyPair", "signature": "KeyPair fromAccountId(String accountId)", "full_signature": "public static KeyPair fromAccountId(String accountId)", "class_method_signature": "KeyPair.fromAccountId(String accountId)", "testcase": false, "constructor": false}, {"identifier": "fromPublicKey", "parameters": "(byte[] publicKey)", "modifiers": "public static", "return": "KeyPair", "signature": "KeyPair fromPublicKey(byte[] publicKey)", "full_signature": "public static KeyPair fromPublicKey(byte[] publicKey)", "class_method_signature": "KeyPair.fromPublicKey(byte[] publicKey)", "testcase": false, "constructor": false}, {"identifier": "random", "parameters": "()", "modifiers": "public static", "return": "KeyPair", "signature": "KeyPair random()", "full_signature": "public static KeyPair random()", "class_method_signature": "KeyPair.random()", "testcase": false, "constructor": false}, {"identifier": "getAccountId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAccountId()", "full_signature": "public String getAccountId()", "class_method_signature": "KeyPair.getAccountId()", "testcase": false, "constructor": false}, {"identifier": "getSecretSeed", "parameters": "()", "modifiers": "public", "return": "char[]", "signature": "char[] getSecretSeed()", "full_signature": "public char[] getSecretSeed()", "class_method_signature": "KeyPair.getSecretSeed()", "testcase": false, "constructor": false}, {"identifier": "getRawSecretSeed", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getRawSecretSeed()", "full_signature": "public byte[] getRawSecretSeed()", "class_method_signature": "KeyPair.getRawSecretSeed()", "testcase": false, "constructor": false}, {"identifier": "getPublicKey", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getPublicKey()", "full_signature": "public byte[] getPublicKey()", "class_method_signature": "KeyPair.getPublicKey()", "testcase": false, "constructor": false}, {"identifier": "getSignatureHint", "parameters": "()", "modifiers": "public", "return": "SignatureHint", "signature": "SignatureHint getSignatureHint()", "full_signature": "public SignatureHint getSignatureHint()", "class_method_signature": "KeyPair.getSignatureHint()", "testcase": false, "constructor": false}, {"identifier": "getXdrPublicKey", "parameters": "()", "modifiers": "public", "return": "PublicKey", "signature": "PublicKey getXdrPublicKey()", "full_signature": "public PublicKey getXdrPublicKey()", "class_method_signature": "KeyPair.getXdrPublicKey()", "testcase": false, "constructor": false}, {"identifier": "getXdrSignerKey", "parameters": "()", "modifiers": "public", "return": "SignerKey", "signature": "SignerKey getXdrSignerKey()", "full_signature": "public SignerKey getXdrSignerKey()", "class_method_signature": "KeyPair.getXdrSignerKey()", "testcase": false, "constructor": false}, {"identifier": "fromXdrPublicKey", "parameters": "(PublicKey key)", "modifiers": "public static", "return": "KeyPair", "signature": "KeyPair fromXdrPublicKey(PublicKey key)", "full_signature": "public static KeyPair fromXdrPublicKey(PublicKey key)", "class_method_signature": "KeyPair.fromXdrPublicKey(PublicKey key)", "testcase": false, "constructor": false}, {"identifier": "fromXdrSignerKey", "parameters": "(SignerKey key)", "modifiers": "public static", "return": "KeyPair", "signature": "KeyPair fromXdrSignerKey(SignerKey key)", "full_signature": "public static KeyPair fromXdrSignerKey(SignerKey key)", "class_method_signature": "KeyPair.fromXdrSignerKey(SignerKey key)", "testcase": false, "constructor": false}, {"identifier": "sign", "parameters": "(byte[] data)", "modifiers": "public", "return": "byte[]", "signature": "byte[] sign(byte[] data)", "full_signature": "public byte[] sign(byte[] data)", "class_method_signature": "KeyPair.sign(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "signDecorated", "parameters": "(byte[] data)", "modifiers": "public", "return": "DecoratedSignature", "signature": "DecoratedSignature signDecorated(byte[] data)", "full_signature": "public DecoratedSignature signDecorated(byte[] data)", "class_method_signature": "KeyPair.signDecorated(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "verify", "parameters": "(byte[] data, byte[] signature)", "modifiers": "public", "return": "boolean", "signature": "boolean verify(byte[] data, byte[] signature)", "full_signature": "public boolean verify(byte[] data, byte[] signature)", "class_method_signature": "KeyPair.verify(byte[] data, byte[] signature)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "KeyPair.equals(Object obj)", "testcase": false, "constructor": false}], "file": "kin-sdk/kin-base/src/main/java/kin/base/KeyPair.java"}, "focal_method": {"identifier": "sign", "parameters": "(byte[] data)", "modifiers": "public", "return": "byte[]", "body": "public byte[] sign(byte[] data) {\n        if (mPrivateKey == null) {\n            throw new RuntimeException(\"KeyPair does not contain secret key. Use KeyPair.fromSecretSeed method to create a new KeyPair with a secret key.\");\n        }\n        try {\n            Signature sgr = new EdDSAEngine(MessageDigest.getInstance(\"SHA-512\"));\n            sgr.initSign(mPrivateKey);\n            sgr.update(data);\n            return sgr.sign();\n        } catch (GeneralSecurityException e) {\n            throw new RuntimeException(e);\n        }\n    }", "signature": "byte[] sign(byte[] data)", "full_signature": "public byte[] sign(byte[] data)", "class_method_signature": "KeyPair.sign(byte[] data)", "testcase": false, "constructor": false, "invocations": ["getInstance", "initSign", "update", "sign"]}, "repository": {"repo_id": 156408389, "url": "https://github.com/kinecosystem/kin-sdk-android", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 9, "size": 3232, "license": "licensed"}}