{"test_class": {"identifier": "RedisTimeSupplierTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static RedisClient client;", "modifier": "private static", "type": "RedisClient", "declarator": "client", "var_name": "client"}, {"original_string": "private static StatefulRedisConnection<String, String> connect;", "modifier": "private static", "type": "StatefulRedisConnection<String, String>", "declarator": "connect", "var_name": "connect"}], "file": "ratelimitj-redis/src/test/java/es/moki/ratelimitj/redis/time/RedisTimeSupplierTest.java"}, "test_case": {"identifier": "shouldGetSystemCurrentTime", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void shouldGetSystemCurrentTime() {\n        Long time = new RedisTimeSupplier(connect).get();\n        assertThat(time).isNotNull().isNotNegative().isNotZero();\n    }", "signature": "void shouldGetSystemCurrentTime()", "full_signature": "@Test void shouldGetSystemCurrentTime()", "class_method_signature": "RedisTimeSupplierTest.shouldGetSystemCurrentTime()", "testcase": true, "constructor": false, "invocations": ["get", "isNotZero", "isNotNegative", "isNotNull", "assertThat"]}, "focal_class": {"identifier": "RedisTimeSupplier", "superclass": "", "interfaces": "implements TimeSupplier", "fields": [{"original_string": "private final StatefulRedisConnection<String, String> connection;", "modifier": "private final", "type": "StatefulRedisConnection<String, String>", "declarator": "connection", "var_name": "connection"}], "methods": [{"identifier": "RedisTimeSupplier", "parameters": "(StatefulRedisConnection<String, String> connection)", "modifiers": "public", "return": "", "signature": " RedisTimeSupplier(StatefulRedisConnection<String, String> connection)", "full_signature": "public  RedisTimeSupplier(StatefulRedisConnection<String, String> connection)", "class_method_signature": "RedisTimeSupplier.RedisTimeSupplier(StatefulRedisConnection<String, String> connection)", "testcase": false, "constructor": true}, {"identifier": "getAsync", "parameters": "()", "modifiers": "@Deprecated @Override public", "return": "CompletionStage<Long>", "signature": "CompletionStage<Long> getAsync()", "full_signature": "@Deprecated @Override public CompletionStage<Long> getAsync()", "class_method_signature": "RedisTimeSupplier.getAsync()", "testcase": false, "constructor": false}, {"identifier": "getReactive", "parameters": "()", "modifiers": "@Override public", "return": "Mono<Long>", "signature": "Mono<Long> getReactive()", "full_signature": "@Override public Mono<Long> getReactive()", "class_method_signature": "RedisTimeSupplier.getReactive()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long get()", "full_signature": "@Override public long get()", "class_method_signature": "RedisTimeSupplier.get()", "testcase": false, "constructor": false}], "file": "ratelimitj-redis/src/main/java/es/moki/ratelimitj/redis/time/RedisTimeSupplier.java"}, "focal_method": {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "long", "body": "@Override\n    public long get() {\n        return Long.parseLong(connection.sync().time().get(0));\n    }", "signature": "long get()", "full_signature": "@Override public long get()", "class_method_signature": "RedisTimeSupplier.get()", "testcase": false, "constructor": false, "invocations": ["parseLong", "get", "time", "sync"]}, "repository": {"repo_id": 60940117, "url": "https://github.com/mokies/ratelimitj", "stars": 284, "created": "6/12/2016 3:27:46 AM +00:00", "updates": "2020-01-21T19:53:03+00:00", "fork": "False", "license": "licensed"}}