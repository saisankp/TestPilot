{"test_class": {"identifier": "ActionEventUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final long EVENT_ID = 1;", "modifier": "public static final", "type": "long", "declarator": "EVENT_ID = 1", "var_name": "EVENT_ID"}, {"original_string": "public static final long USER_ID = 1;", "modifier": "public static final", "type": "long", "declarator": "USER_ID = 1", "var_name": "USER_ID"}, {"original_string": "public static final long ACCOUNT_ID = 1;", "modifier": "public static final", "type": "long", "declarator": "ACCOUNT_ID = 1", "var_name": "ACCOUNT_ID"}, {"original_string": "protected Map<String, Object> staticFieldValues = new HashMap<>();", "modifier": "protected", "type": "Map<String, Object>", "declarator": "staticFieldValues = new HashMap<>()", "var_name": "staticFieldValues"}, {"original_string": "protected List<Event> publishedEvents = new ArrayList<>();", "modifier": "protected", "type": "List<Event>", "declarator": "publishedEvents = new ArrayList<>()", "var_name": "publishedEvents"}, {"original_string": "@Mock\n    protected EventDao eventDao;", "modifier": "@Mock\n    protected", "type": "EventDao", "declarator": "eventDao", "var_name": "eventDao"}, {"original_string": "@Mock\n    protected AccountDao accountDao;", "modifier": "@Mock\n    protected", "type": "AccountDao", "declarator": "accountDao", "var_name": "accountDao"}, {"original_string": "@Mock\n    protected UserDao userDao;", "modifier": "@Mock\n    protected", "type": "UserDao", "declarator": "userDao", "var_name": "userDao"}, {"original_string": "@Mock\n    protected ProjectDao projectDao;", "modifier": "@Mock\n    protected", "type": "ProjectDao", "declarator": "projectDao", "var_name": "projectDao"}, {"original_string": "@Mock\n    protected EntityManager entityMgr;", "modifier": "@Mock\n    protected", "type": "EntityManager", "declarator": "entityMgr", "var_name": "entityMgr"}, {"original_string": "@Mock\n    protected ConfigurationDao configDao;", "modifier": "@Mock\n    protected", "type": "ConfigurationDao", "declarator": "configDao", "var_name": "configDao"}, {"original_string": "@Mock\n    protected EventBus eventBus;", "modifier": "@Mock\n    protected", "type": "EventBus", "declarator": "eventBus", "var_name": "eventBus"}], "file": "server/src/test/java/com/cloud/event/ActionEventUtilsTest.java"}, "test_case": {"identifier": "testPopulateFirstClassEntities", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPopulateFirstClassEntities() {\n        AccountVO account = new AccountVO(\"testaccount\", 1L, \"networkdomain\", (short) 0, \"uuid\");\n        account.setId(ACCOUNT_ID);\n        UserVO user = new UserVO(1, \"testuser\", \"password\", \"firstname\", \"lastName\", \"email\", \"timezone\",\n                UUID.randomUUID().toString(), User.Source.UNKNOWN);\n\n        Mockito.when(accountDao.findById(ACCOUNT_ID)).thenReturn(account);\n        Mockito.when(userDao.findById(USER_ID)).thenReturn(user);\n\n        CallContext.register(user, account);\n\n        //Inject some entity UUIDs into the call context\n        String instanceUuid = UUID.randomUUID().toString();\n        String ipUuid = UUID.randomUUID().toString();\n        CallContext.current().putContextParameter(VirtualMachine.class, instanceUuid);\n        CallContext.current().putContextParameter(IpAddress.class, ipUuid);\n\n        ActionEventUtils.onActionEvent(USER_ID, ACCOUNT_ID, account.getDomainId(), \"StaticNat\", \"Test event\");\n\n        //Assertions\n        Assert.assertNotEquals(publishedEvents.size(), 0);\n        Assert.assertEquals(publishedEvents.size(), 1);\n\n        Event event = publishedEvents.get(0);\n        Assert.assertNotNull(event.getDescription());\n\n        JsonObject json = new JsonParser().parse(event.getDescription()).getAsJsonObject();\n\n        Assert.assertTrue(json.has(\"VirtualMachine\"));\n        Assert.assertTrue(json.has(\"IpAddress\"));\n        Assert.assertEquals(json.get(\"VirtualMachine\").getAsString(), instanceUuid);\n        Assert.assertEquals(json.get(\"IpAddress\").getAsString(), ipUuid);\n\n        CallContext.unregister();\n    }", "signature": "void testPopulateFirstClassEntities()", "full_signature": "@Test public void testPopulateFirstClassEntities()", "class_method_signature": "ActionEventUtilsTest.testPopulateFirstClassEntities()", "testcase": true, "constructor": false, "invocations": ["setId", "toString", "randomUUID", "thenReturn", "when", "findById", "thenReturn", "when", "findById", "register", "toString", "randomUUID", "toString", "randomUUID", "putContextParameter", "current", "putContextParameter", "current", "onActionEvent", "getDomainId", "assertNotEquals", "size", "assertEquals", "size", "get", "assertNotNull", "getDescription", "getAsJsonObject", "parse", "getDescription", "assertTrue", "has", "assertTrue", "has", "assertEquals", "getAsString", "get", "assertEquals", "getAsString", "get", "unregister"]}, "focal_class": {"identifier": "ActionEventUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger s_logger = LoggerFactory.getLogger(ActionEventUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(ActionEventUtils.class)", "var_name": "s_logger"}, {"original_string": "private static EventDao s_eventDao;", "modifier": "private static", "type": "EventDao", "declarator": "s_eventDao", "var_name": "s_eventDao"}, {"original_string": "private static AccountDao s_accountDao;", "modifier": "private static", "type": "AccountDao", "declarator": "s_accountDao", "var_name": "s_accountDao"}, {"original_string": "private static ProjectDao s_projectDao;", "modifier": "private static", "type": "ProjectDao", "declarator": "s_projectDao", "var_name": "s_projectDao"}, {"original_string": "protected static UserDao s_userDao;", "modifier": "protected static", "type": "UserDao", "declarator": "s_userDao", "var_name": "s_userDao"}, {"original_string": "protected static EventBus s_eventBus = null;", "modifier": "protected static", "type": "EventBus", "declarator": "s_eventBus = null", "var_name": "s_eventBus"}, {"original_string": "protected static EntityManager s_entityMgr;", "modifier": "protected static", "type": "EntityManager", "declarator": "s_entityMgr", "var_name": "s_entityMgr"}, {"original_string": "protected static ConfigurationDao s_configDao;", "modifier": "protected static", "type": "ConfigurationDao", "declarator": "s_configDao", "var_name": "s_configDao"}, {"original_string": "public static final String EventDetails = \"event_details\";", "modifier": "public static final", "type": "String", "declarator": "EventDetails = \"event_details\"", "var_name": "EventDetails"}, {"original_string": "public static final String EventId = \"event_id\";", "modifier": "public static final", "type": "String", "declarator": "EventId = \"event_id\"", "var_name": "EventId"}, {"original_string": "public static final String EntityType = \"entity_type\";", "modifier": "public static final", "type": "String", "declarator": "EntityType = \"entity_type\"", "var_name": "EntityType"}, {"original_string": "public static final String EntityUuid = \"entity_uuid\";", "modifier": "public static final", "type": "String", "declarator": "EntityUuid = \"entity_uuid\"", "var_name": "EntityUuid"}, {"original_string": "public static final String EntityDetails = \"entity_details\";", "modifier": "public static final", "type": "String", "declarator": "EntityDetails = \"entity_details\"", "var_name": "EntityDetails"}, {"original_string": "@Inject\n    EventDao eventDao;", "modifier": "@Inject", "type": "EventDao", "declarator": "eventDao", "var_name": "eventDao"}, {"original_string": "@Inject\n    AccountDao accountDao;", "modifier": "@Inject", "type": "AccountDao", "declarator": "accountDao", "var_name": "accountDao"}, {"original_string": "@Inject\n    UserDao userDao;", "modifier": "@Inject", "type": "UserDao", "declarator": "userDao", "var_name": "userDao"}, {"original_string": "@Inject\n    ProjectDao projectDao;", "modifier": "@Inject", "type": "ProjectDao", "declarator": "projectDao", "var_name": "projectDao"}, {"original_string": "@Inject\n    EntityManager entityMgr;", "modifier": "@Inject", "type": "EntityManager", "declarator": "entityMgr", "var_name": "entityMgr"}, {"original_string": "@Inject\n    ConfigurationDao configDao;", "modifier": "@Inject", "type": "ConfigurationDao", "declarator": "configDao", "var_name": "configDao"}], "methods": [{"identifier": "ActionEventUtils", "parameters": "()", "modifiers": "public", "return": "", "signature": " ActionEventUtils()", "full_signature": "public  ActionEventUtils()", "class_method_signature": "ActionEventUtils.ActionEventUtils()", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "@PostConstruct", "return": "void", "signature": "void init()", "full_signature": "@PostConstruct void init()", "class_method_signature": "ActionEventUtils.init()", "testcase": false, "constructor": false}, {"identifier": "onActionEvent", "parameters": "(Long userId, Long accountId, Long domainId, String type, String description)", "modifiers": "public static", "return": "Long", "signature": "Long onActionEvent(Long userId, Long accountId, Long domainId, String type, String description)", "full_signature": "public static Long onActionEvent(Long userId, Long accountId, Long domainId, String type, String description)", "class_method_signature": "ActionEventUtils.onActionEvent(Long userId, Long accountId, Long domainId, String type, String description)", "testcase": false, "constructor": false}, {"identifier": "onScheduledActionEvent", "parameters": "(Long userId, Long accountId, String type, String description, boolean eventDisplayEnabled, long startEventId)", "modifiers": "public static", "return": "Long", "signature": "Long onScheduledActionEvent(Long userId, Long accountId, String type, String description, boolean eventDisplayEnabled, long startEventId)", "full_signature": "public static Long onScheduledActionEvent(Long userId, Long accountId, String type, String description, boolean eventDisplayEnabled, long startEventId)", "class_method_signature": "ActionEventUtils.onScheduledActionEvent(Long userId, Long accountId, String type, String description, boolean eventDisplayEnabled, long startEventId)", "testcase": false, "constructor": false}, {"identifier": "startNestedActionEvent", "parameters": "(String eventType, String eventDescription)", "modifiers": "public static", "return": "void", "signature": "void startNestedActionEvent(String eventType, String eventDescription)", "full_signature": "public static void startNestedActionEvent(String eventType, String eventDescription)", "class_method_signature": "ActionEventUtils.startNestedActionEvent(String eventType, String eventDescription)", "testcase": false, "constructor": false}, {"identifier": "onStartedActionEventFromContext", "parameters": "(String eventType, String eventDescription, boolean eventDisplayEnabled)", "modifiers": "public static", "return": "void", "signature": "void onStartedActionEventFromContext(String eventType, String eventDescription, boolean eventDisplayEnabled)", "full_signature": "public static void onStartedActionEventFromContext(String eventType, String eventDescription, boolean eventDisplayEnabled)", "class_method_signature": "ActionEventUtils.onStartedActionEventFromContext(String eventType, String eventDescription, boolean eventDisplayEnabled)", "testcase": false, "constructor": false}, {"identifier": "onStartedActionEvent", "parameters": "(Long userId, Long accountId, String type, String description, boolean eventDisplayEnabled, long startEventId)", "modifiers": "public static", "return": "Long", "signature": "Long onStartedActionEvent(Long userId, Long accountId, String type, String description, boolean eventDisplayEnabled, long startEventId)", "full_signature": "public static Long onStartedActionEvent(Long userId, Long accountId, String type, String description, boolean eventDisplayEnabled, long startEventId)", "class_method_signature": "ActionEventUtils.onStartedActionEvent(Long userId, Long accountId, String type, String description, boolean eventDisplayEnabled, long startEventId)", "testcase": false, "constructor": false}, {"identifier": "onCompletedActionEvent", "parameters": "(Long userId, Long accountId, String level, String type, String description, long startEventId)", "modifiers": "public static", "return": "Long", "signature": "Long onCompletedActionEvent(Long userId, Long accountId, String level, String type, String description, long startEventId)", "full_signature": "public static Long onCompletedActionEvent(Long userId, Long accountId, String level, String type, String description, long startEventId)", "class_method_signature": "ActionEventUtils.onCompletedActionEvent(Long userId, Long accountId, String level, String type, String description, long startEventId)", "testcase": false, "constructor": false}, {"identifier": "onCompletedActionEvent", "parameters": "(Long userId, Long accountId, String level, String type, boolean eventDisplayEnabled, String description, long startEventId)", "modifiers": "public static", "return": "Long", "signature": "Long onCompletedActionEvent(Long userId, Long accountId, String level, String type, boolean eventDisplayEnabled, String description, long startEventId)", "full_signature": "public static Long onCompletedActionEvent(Long userId, Long accountId, String level, String type, boolean eventDisplayEnabled, String description, long startEventId)", "class_method_signature": "ActionEventUtils.onCompletedActionEvent(Long userId, Long accountId, String level, String type, boolean eventDisplayEnabled, String description, long startEventId)", "testcase": false, "constructor": false}, {"identifier": "onCreatedActionEvent", "parameters": "(Long userId, Long accountId, String level, String type, boolean eventDisplayEnabled, String description)", "modifiers": "public static", "return": "Long", "signature": "Long onCreatedActionEvent(Long userId, Long accountId, String level, String type, boolean eventDisplayEnabled, String description)", "full_signature": "public static Long onCreatedActionEvent(Long userId, Long accountId, String level, String type, boolean eventDisplayEnabled, String description)", "class_method_signature": "ActionEventUtils.onCreatedActionEvent(Long userId, Long accountId, String level, String type, boolean eventDisplayEnabled, String description)", "testcase": false, "constructor": false}, {"identifier": "persistActionEvent", "parameters": "(Long userId, Long accountId, Long domainId, String level, String type,\n                                            Event.State state, boolean eventDisplayEnabled, String description, Long startEventId)", "modifiers": "private static", "return": "Event", "signature": "Event persistActionEvent(Long userId, Long accountId, Long domainId, String level, String type,\n                                            Event.State state, boolean eventDisplayEnabled, String description, Long startEventId)", "full_signature": "private static Event persistActionEvent(Long userId, Long accountId, Long domainId, String level, String type,\n                                            Event.State state, boolean eventDisplayEnabled, String description, Long startEventId)", "class_method_signature": "ActionEventUtils.persistActionEvent(Long userId, Long accountId, Long domainId, String level, String type,\n                                            Event.State state, boolean eventDisplayEnabled, String description, Long startEventId)", "testcase": false, "constructor": false}, {"identifier": "publishOnEventBus", "parameters": "(long userId, long accountId, String eventCategory, String eventType, Event.State state, String description)", "modifiers": "private static", "return": "void", "signature": "void publishOnEventBus(long userId, long accountId, String eventCategory, String eventType, Event.State state, String description)", "full_signature": "private static void publishOnEventBus(long userId, long accountId, String eventCategory, String eventType, Event.State state, String description)", "class_method_signature": "ActionEventUtils.publishOnEventBus(long userId, long accountId, String eventCategory, String eventType, Event.State state, String description)", "testcase": false, "constructor": false}, {"identifier": "getEntityUuid", "parameters": "(Class<?> entityType, Object entityId)", "modifiers": "private static", "return": "String", "signature": "String getEntityUuid(Class<?> entityType, Object entityId)", "full_signature": "private static String getEntityUuid(Class<?> entityType, Object entityId)", "class_method_signature": "ActionEventUtils.getEntityUuid(Class<?> entityType, Object entityId)", "testcase": false, "constructor": false}, {"identifier": "getDomainId", "parameters": "(long accountId)", "modifiers": "private static", "return": "long", "signature": "long getDomainId(long accountId)", "full_signature": "private static long getDomainId(long accountId)", "class_method_signature": "ActionEventUtils.getDomainId(long accountId)", "testcase": false, "constructor": false}, {"identifier": "populateFirstClassEntities", "parameters": "(Map<String, String> eventDescription)", "modifiers": "private static", "return": "void", "signature": "void populateFirstClassEntities(Map<String, String> eventDescription)", "full_signature": "private static void populateFirstClassEntities(Map<String, String> eventDescription)", "class_method_signature": "ActionEventUtils.populateFirstClassEntities(Map<String, String> eventDescription)", "testcase": false, "constructor": false}], "file": "server/src/main/java/com/cloud/event/ActionEventUtils.java"}, "focal_method": {"identifier": "populateFirstClassEntities", "parameters": "(Map<String, String> eventDescription)", "modifiers": "private static", "return": "void", "body": "private static void populateFirstClassEntities(Map<String, String> eventDescription){\n\n        CallContext context = CallContext.current();\n        Map<Object, Object> contextMap = context.getContextParameters();\n\n        for(Map.Entry<Object, Object> entry : contextMap.entrySet()){\n            try{\n                Class<?> clz = (Class<?>)entry.getKey();\n                if(clz != null && Identity.class.isAssignableFrom(clz)){\n                    String uuid = getEntityUuid(clz, entry.getValue());\n                    eventDescription.put(ReflectUtil.getEntityName(clz), uuid);\n                }\n            } catch (Exception e){\n                s_logger.trace(\"Caught exception while populating first class entities for event bus, moving on\");\n            }\n        }\n\n    }", "signature": "void populateFirstClassEntities(Map<String, String> eventDescription)", "full_signature": "private static void populateFirstClassEntities(Map<String, String> eventDescription)", "class_method_signature": "ActionEventUtils.populateFirstClassEntities(Map<String, String> eventDescription)", "testcase": false, "constructor": false, "invocations": ["current", "getContextParameters", "entrySet", "getKey", "isAssignableFrom", "getEntityUuid", "getValue", "put", "getEntityName", "trace"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}