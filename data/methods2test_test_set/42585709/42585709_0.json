{"test_class": {"identifier": "UserServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Inject\n    private PersistentTokenRepository persistentTokenRepository;", "modifier": "@Inject\n    private", "type": "PersistentTokenRepository", "declarator": "persistentTokenRepository", "var_name": "persistentTokenRepository"}, {"original_string": "@Inject\n    private UserRepository userRepository;", "modifier": "@Inject\n    private", "type": "UserRepository", "declarator": "userRepository", "var_name": "userRepository"}, {"original_string": "@Inject\n    private UserService userService;", "modifier": "@Inject\n    private", "type": "UserService", "declarator": "userService", "var_name": "userService"}], "file": "Editor/src/test/java/ch/hsr/servicestoolkit/editor/service/UserServiceTest.java"}, "test_case": {"identifier": "testRemoveOldPersistentTokens", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRemoveOldPersistentTokens() {\n        User admin = userRepository.findOneByLogin(\"admin\").get();\n        int existingCount = persistentTokenRepository.findByUser(admin).size();\n        generateUserToken(admin, \"1111-1111\", new LocalDate());\n        LocalDate now = new LocalDate();\n        generateUserToken(admin, \"2222-2222\", now.minusDays(32));\n        assertThat(persistentTokenRepository.findByUser(admin)).hasSize(existingCount + 2);\n        userService.removeOldPersistentTokens();\n        assertThat(persistentTokenRepository.findByUser(admin)).hasSize(existingCount + 1);\n    }", "signature": "void testRemoveOldPersistentTokens()", "full_signature": "@Test public void testRemoveOldPersistentTokens()", "class_method_signature": "UserServiceTest.testRemoveOldPersistentTokens()", "testcase": true, "constructor": false, "invocations": ["get", "findOneByLogin", "size", "findByUser", "generateUserToken", "generateUserToken", "minusDays", "hasSize", "assertThat", "findByUser", "removeOldPersistentTokens", "hasSize", "assertThat", "findByUser"]}, "focal_class": {"identifier": "UserService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger log = LoggerFactory.getLogger(UserService.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(UserService.class)", "var_name": "log"}, {"original_string": "@Inject\n\tprivate PasswordEncoder passwordEncoder;", "modifier": "@Inject\n\tprivate", "type": "PasswordEncoder", "declarator": "passwordEncoder", "var_name": "passwordEncoder"}, {"original_string": "@Inject\n\tprivate UserRepository userRepository;", "modifier": "@Inject\n\tprivate", "type": "UserRepository", "declarator": "userRepository", "var_name": "userRepository"}, {"original_string": "@Inject\n\tprivate PersistentTokenRepository persistentTokenRepository;", "modifier": "@Inject\n\tprivate", "type": "PersistentTokenRepository", "declarator": "persistentTokenRepository", "var_name": "persistentTokenRepository"}, {"original_string": "@Inject\n\tprivate AuthorityRepository authorityRepository;", "modifier": "@Inject\n\tprivate", "type": "AuthorityRepository", "declarator": "authorityRepository", "var_name": "authorityRepository"}], "methods": [{"identifier": "activateRegistration", "parameters": "(final String key)", "modifiers": "public", "return": "Optional<User>", "signature": "Optional<User> activateRegistration(final String key)", "full_signature": "public Optional<User> activateRegistration(final String key)", "class_method_signature": "UserService.activateRegistration(final String key)", "testcase": false, "constructor": false}, {"identifier": "completePasswordReset", "parameters": "(final String newPassword, final String key)", "modifiers": "public", "return": "Optional<User>", "signature": "Optional<User> completePasswordReset(final String newPassword, final String key)", "full_signature": "public Optional<User> completePasswordReset(final String newPassword, final String key)", "class_method_signature": "UserService.completePasswordReset(final String newPassword, final String key)", "testcase": false, "constructor": false}, {"identifier": "requestPasswordReset", "parameters": "(final String mail)", "modifiers": "public", "return": "Optional<User>", "signature": "Optional<User> requestPasswordReset(final String mail)", "full_signature": "public Optional<User> requestPasswordReset(final String mail)", "class_method_signature": "UserService.requestPasswordReset(final String mail)", "testcase": false, "constructor": false}, {"identifier": "createUserInformation", "parameters": "(final String login, final String password, final String firstName, final String lastName, final String email, final String langKey)", "modifiers": "public", "return": "User", "signature": "User createUserInformation(final String login, final String password, final String firstName, final String lastName, final String email, final String langKey)", "full_signature": "public User createUserInformation(final String login, final String password, final String firstName, final String lastName, final String email, final String langKey)", "class_method_signature": "UserService.createUserInformation(final String login, final String password, final String firstName, final String lastName, final String email, final String langKey)", "testcase": false, "constructor": false}, {"identifier": "updateUserInformation", "parameters": "(final String firstName, final String lastName, final String email, final String langKey)", "modifiers": "public", "return": "void", "signature": "void updateUserInformation(final String firstName, final String lastName, final String email, final String langKey)", "full_signature": "public void updateUserInformation(final String firstName, final String lastName, final String email, final String langKey)", "class_method_signature": "UserService.updateUserInformation(final String firstName, final String lastName, final String email, final String langKey)", "testcase": false, "constructor": false}, {"identifier": "changePassword", "parameters": "(final String password)", "modifiers": "public", "return": "void", "signature": "void changePassword(final String password)", "full_signature": "public void changePassword(final String password)", "class_method_signature": "UserService.changePassword(final String password)", "testcase": false, "constructor": false}, {"identifier": "getUserWithAuthoritiesByLogin", "parameters": "(final String login)", "modifiers": "@Transactional(readOnly = true) public", "return": "Optional<User>", "signature": "Optional<User> getUserWithAuthoritiesByLogin(final String login)", "full_signature": "@Transactional(readOnly = true) public Optional<User> getUserWithAuthoritiesByLogin(final String login)", "class_method_signature": "UserService.getUserWithAuthoritiesByLogin(final String login)", "testcase": false, "constructor": false}, {"identifier": "getUserWithAuthorities", "parameters": "(final Long id)", "modifiers": "@Transactional(readOnly = true) public", "return": "User", "signature": "User getUserWithAuthorities(final Long id)", "full_signature": "@Transactional(readOnly = true) public User getUserWithAuthorities(final Long id)", "class_method_signature": "UserService.getUserWithAuthorities(final Long id)", "testcase": false, "constructor": false}, {"identifier": "getUserWithAuthorities", "parameters": "()", "modifiers": "@Transactional(readOnly = true) public", "return": "User", "signature": "User getUserWithAuthorities()", "full_signature": "@Transactional(readOnly = true) public User getUserWithAuthorities()", "class_method_signature": "UserService.getUserWithAuthorities()", "testcase": false, "constructor": false}, {"identifier": "removeOldPersistentTokens", "parameters": "()", "modifiers": "@Scheduled(cron = \"0 0 0 * * ?\") public", "return": "void", "signature": "void removeOldPersistentTokens()", "full_signature": "@Scheduled(cron = \"0 0 0 * * ?\") public void removeOldPersistentTokens()", "class_method_signature": "UserService.removeOldPersistentTokens()", "testcase": false, "constructor": false}, {"identifier": "removeNotActivatedUsers", "parameters": "()", "modifiers": "@Scheduled(cron = \"0 0 1 * * ?\") public", "return": "void", "signature": "void removeNotActivatedUsers()", "full_signature": "@Scheduled(cron = \"0 0 1 * * ?\") public void removeNotActivatedUsers()", "class_method_signature": "UserService.removeNotActivatedUsers()", "testcase": false, "constructor": false}], "file": "Editor/src/main/java/ch/hsr/servicestoolkit/editor/service/UserService.java"}, "focal_method": {"identifier": "removeOldPersistentTokens", "parameters": "()", "modifiers": "@Scheduled(cron = \"0 0 0 * * ?\") public", "return": "void", "body": "@Scheduled(cron = \"0 0 0 * * ?\")\n\tpublic void removeOldPersistentTokens() {\n\t\tLocalDate now = new LocalDate();\n\t\tpersistentTokenRepository.findByTokenDateBefore(now.minusMonths(1)).stream().forEach(token -> {\n\t\t\tlog.debug(\"Deleting token {}\", token.getSeries());\n\t\t\tUser user = token.getUser();\n\t\t\tuser.getPersistentTokens().remove(token);\n\t\t\tpersistentTokenRepository.delete(token);\n\t\t});\n\t}", "signature": "void removeOldPersistentTokens()", "full_signature": "@Scheduled(cron = \"0 0 0 * * ?\") public void removeOldPersistentTokens()", "class_method_signature": "UserService.removeOldPersistentTokens()", "testcase": false, "constructor": false, "invocations": ["forEach", "stream", "findByTokenDateBefore", "minusMonths", "debug", "getSeries", "getUser", "remove", "getPersistentTokens", "delete"]}, "repository": {"repo_id": 42585709, "url": "https://github.com/ServiceCutter/ServiceCutter", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 29, "size": 8580, "license": "licensed"}}