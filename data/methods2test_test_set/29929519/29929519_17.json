{"test_class": {"identifier": "SchemaGeneratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n\tpublic ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n\tpublic", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}, {"original_string": "private SchemaVersion schemaVersion;", "modifier": "private", "type": "SchemaVersion", "declarator": "schemaVersion", "var_name": "schemaVersion"}, {"original_string": "private Schema.SchemaBuilder schemaBuilder;", "modifier": "private", "type": "Schema.SchemaBuilder", "declarator": "schemaBuilder", "var_name": "schemaBuilder"}, {"original_string": "private JavaTypeMapper mapper;", "modifier": "private", "type": "JavaTypeMapper", "declarator": "mapper", "var_name": "mapper"}], "file": "compiler/src/test/java/com/expedia/tesla/compiler/SchemaGeneratorTest.java"}, "test_case": {"identifier": "testGenerateTml", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGenerateTml() throws Exception {\n\t\tFile tmlFile = File.createTempFile(\"TestObjectSchema\", \".tml\");\n\t\ttry (FileOutputStream output = new FileOutputStream(tmlFile)) {\n\t\t\tSchemaGenerator.genTml(Arrays.asList(TestClass.class.getCanonicalName()), schemaVersion, output, null);\n\t\t} \n\t\t// Load the generated schema file and do the checks.\n\t\tSchema schema = Schema.build(tmlFile.getAbsolutePath());\n\t\ttmlFile.deleteOnExit();\n\t\tassertEquals(this.schemaVersion.getName(), schema.getVersion().getName());\n\t\tassertEquals(this.schemaVersion.getVersionNumber(), schema.getVersion().getVersionNumber());\n\t\tassertNotNull(schema.findType(\"com.expedia.tesla.compiler.Empty\"));\n\t\tassertNotNull(schema.findType(\"com.expedia.tesla.compiler.TestInterface\"));\n\t\tassertNotNull(schema.findType(\"com.expedia.tesla.compiler.Base\"));\n\t\tassertNotNull(schema.findType(\"com.expedia.tesla.compiler.Sex\"));\n\t\tassertNotNull(schema.findType(\"com.expedia.tesla.compiler.TestClass\"));\n\t}", "signature": "void testGenerateTml()", "full_signature": "@Test public void testGenerateTml()", "class_method_signature": "SchemaGeneratorTest.testGenerateTml()", "testcase": true, "constructor": false, "invocations": ["createTempFile", "genTml", "asList", "getCanonicalName", "build", "getAbsolutePath", "deleteOnExit", "assertEquals", "getName", "getName", "getVersion", "assertEquals", "getVersionNumber", "getVersionNumber", "getVersion", "assertNotNull", "findType", "assertNotNull", "findType", "assertNotNull", "findType", "assertNotNull", "findType", "assertNotNull", "findType"]}, "focal_class": {"identifier": "SchemaGenerator", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "genTml", "parameters": "(Collection<String> classes, SchemaVersion schemaVersion, OutputStream output, \n\t\t\tString classpath)", "modifiers": "public static", "return": "void", "signature": "void genTml(Collection<String> classes, SchemaVersion schemaVersion, OutputStream output, \n\t\t\tString classpath)", "full_signature": "public static void genTml(Collection<String> classes, SchemaVersion schemaVersion, OutputStream output, \n\t\t\tString classpath)", "class_method_signature": "SchemaGenerator.genTml(Collection<String> classes, SchemaVersion schemaVersion, OutputStream output, \n\t\t\tString classpath)", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "SchemaGenerator.main(String[] args)", "testcase": false, "constructor": false}], "file": "compiler/src/main/java/com/expedia/tesla/compiler/SchemaGenerator.java"}, "focal_method": {"identifier": "genTml", "parameters": "(Collection<String> classes, SchemaVersion schemaVersion, OutputStream output, \n\t\t\tString classpath)", "modifiers": "public static", "return": "void", "body": "public static void genTml(Collection<String> classes, SchemaVersion schemaVersion, OutputStream output, \n\t\t\tString classpath) throws IOException, TeslaSchemaException, ClassNotFoundException, JAXBException {\n\t\tJavaTypeMapper mapper = new JavaTypeMapper();\n\t\tSchema.SchemaBuilder schemaBuilder = new Schema.SchemaBuilder();\n\t\tschemaBuilder.setVersion(schemaVersion);\n\n\t\tfor (String name : classes) {\n\t\t\tjava.lang.Class<?> clzz = Util.loadClass(name, classpath);\n\t\t\tmapper.fromJavaClass(schemaBuilder, clzz);\n\t\t}\n\t\tschemaBuilder.build().save(output);\n\t}", "signature": "void genTml(Collection<String> classes, SchemaVersion schemaVersion, OutputStream output, \n\t\t\tString classpath)", "full_signature": "public static void genTml(Collection<String> classes, SchemaVersion schemaVersion, OutputStream output, \n\t\t\tString classpath)", "class_method_signature": "SchemaGenerator.genTml(Collection<String> classes, SchemaVersion schemaVersion, OutputStream output, \n\t\t\tString classpath)", "testcase": false, "constructor": false, "invocations": ["setVersion", "loadClass", "fromJavaClass", "save", "build"]}, "repository": {"repo_id": 29929519, "url": "https://github.com/ExpediaDotCom/tesla", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 15, "size": 819, "license": "licensed"}}