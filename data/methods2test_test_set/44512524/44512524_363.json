{"test_class": {"identifier": "VocabularyTest", "superclass": "", "interfaces": "", "fields": [], "file": "storm/trident-ml/src/test/java/com/github/pmerienne/trident/ml/nlp/VocabularyTest.java"}, "test_case": {"identifier": "testFrequency", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testFrequency() {\n\t\tVocabulary vocabulary = new Vocabulary();\n\t\tvocabulary.add(\"only one\");\n\t\tvocabulary.add(\"we are 2\");\n\t\tvocabulary.add(\"we are 2\");\n\t\tvocabulary.add(\"I like kitten\");\n\n\t\tassertEquals(0.25, vocabulary.frequency(\"only one\"), 0.001);\n\t\tassertEquals(0.5, vocabulary.frequency(\"we are 2\"), 0.001);\n\t\tassertEquals(0.0, vocabulary.frequency(\"I'm not here\"), 0.001);\n\t}", "signature": "void testFrequency()", "full_signature": "@Test public void testFrequency()", "class_method_signature": "VocabularyTest.testFrequency()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "add", "assertEquals", "frequency", "assertEquals", "frequency", "assertEquals", "frequency"]}, "focal_class": {"identifier": "Vocabulary", "superclass": "", "interfaces": "implements Iterable<String>, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 7827671824674205961L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 7827671824674205961L", "var_name": "serialVersionUID"}, {"original_string": "private TreeMap<String, Integer> wordCounts = new ValueComparableMap<String, Integer>(Ordering.natural().reverse());", "modifier": "private", "type": "TreeMap<String, Integer>", "declarator": "wordCounts = new ValueComparableMap<String, Integer>(Ordering.natural().reverse())", "var_name": "wordCounts"}, {"original_string": "private Integer size = 0;", "modifier": "private", "type": "Integer", "declarator": "size = 0", "var_name": "size"}], "methods": [{"identifier": "Vocabulary", "parameters": "()", "modifiers": "public", "return": "", "signature": " Vocabulary()", "full_signature": "public  Vocabulary()", "class_method_signature": "Vocabulary.Vocabulary()", "testcase": false, "constructor": true}, {"identifier": "Vocabulary", "parameters": "(List<String> words)", "modifiers": "public", "return": "", "signature": " Vocabulary(List<String> words)", "full_signature": "public  Vocabulary(List<String> words)", "class_method_signature": "Vocabulary.Vocabulary(List<String> words)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(String word)", "modifiers": "public", "return": "void", "signature": "void add(String word)", "full_signature": "public void add(String word)", "class_method_signature": "Vocabulary.add(String word)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(List<String> words)", "modifiers": "public", "return": "void", "signature": "void addAll(List<String> words)", "full_signature": "public void addAll(List<String> words)", "class_method_signature": "Vocabulary.addAll(List<String> words)", "testcase": false, "constructor": false}, {"identifier": "limitWords", "parameters": "(Integer maxWords)", "modifiers": "public", "return": "void", "signature": "void limitWords(Integer maxWords)", "full_signature": "public void limitWords(Integer maxWords)", "class_method_signature": "Vocabulary.limitWords(Integer maxWords)", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "(String word)", "modifiers": "public", "return": "Integer", "signature": "Integer count(String word)", "full_signature": "public Integer count(String word)", "class_method_signature": "Vocabulary.count(String word)", "testcase": false, "constructor": false}, {"identifier": "frequency", "parameters": "(String word)", "modifiers": "public", "return": "Double", "signature": "Double frequency(String word)", "full_signature": "public Double frequency(String word)", "class_method_signature": "Vocabulary.frequency(String word)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(String word)", "modifiers": "public", "return": "Boolean", "signature": "Boolean contains(String word)", "full_signature": "public Boolean contains(String word)", "class_method_signature": "Vocabulary.contains(String word)", "testcase": false, "constructor": false}, {"identifier": "wordCount", "parameters": "()", "modifiers": "public", "return": "Integer", "signature": "Integer wordCount()", "full_signature": "public Integer wordCount()", "class_method_signature": "Vocabulary.wordCount()", "testcase": false, "constructor": false}, {"identifier": "totalCount", "parameters": "()", "modifiers": "public", "return": "Integer", "signature": "Integer totalCount()", "full_signature": "public Integer totalCount()", "class_method_signature": "Vocabulary.totalCount()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<String>", "signature": "Iterator<String> iterator()", "full_signature": "@Override public Iterator<String> iterator()", "class_method_signature": "Vocabulary.iterator()", "testcase": false, "constructor": false}, {"identifier": "wordSet", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> wordSet()", "full_signature": "public Set<String> wordSet()", "class_method_signature": "Vocabulary.wordSet()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Vocabulary.toString()", "testcase": false, "constructor": false}], "file": "storm/trident-ml/src/main/java/com/github/pmerienne/trident/ml/nlp/Vocabulary.java"}, "focal_method": {"identifier": "frequency", "parameters": "(String word)", "modifiers": "public", "return": "Double", "body": "public Double frequency(String word) {\n\t\treturn this.count(word).doubleValue() / this.size.doubleValue();\n\t}", "signature": "Double frequency(String word)", "full_signature": "public Double frequency(String word)", "class_method_signature": "Vocabulary.frequency(String word)", "testcase": false, "constructor": false, "invocations": ["doubleValue", "count", "doubleValue"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}