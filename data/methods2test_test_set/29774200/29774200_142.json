{"test_class": {"identifier": "DemoConnectionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "DemoConnection connection;", "modifier": "", "type": "DemoConnection", "declarator": "connection", "var_name": "connection"}], "file": "component/core/src/test/java/fr/norad/visuwall/plugin/demo/DemoConnectionTest.java"}, "test_case": {"identifier": "should_get_empty_unit_test_result_if_there_is_no_data", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_get_empty_unit_test_result_if_there_is_no_data() {\n        TestResult testResult = connection.analyzeIntegrationTests(earth);\n        assertEquals(0, testResult.getCoverage(), 0);\n        assertEquals(0, testResult.getFailCount());\n        assertEquals(0, testResult.getSkipCount());\n        assertEquals(0, testResult.getPassCount());\n    }", "signature": "void should_get_empty_unit_test_result_if_there_is_no_data()", "full_signature": "@Test public void should_get_empty_unit_test_result_if_there_is_no_data()", "class_method_signature": "DemoConnectionTest.should_get_empty_unit_test_result_if_there_is_no_data()", "testcase": true, "constructor": false, "invocations": ["analyzeIntegrationTests", "assertEquals", "getCoverage", "assertEquals", "getFailCount", "assertEquals", "getSkipCount", "assertEquals", "getPassCount"]}, "focal_class": {"identifier": "DemoConnection", "superclass": "", "interfaces": "implements BuildCapability, TestCapability, ViewCapability, MetricCapability", "fields": [{"original_string": "private boolean connected;", "modifier": "private", "type": "boolean", "declarator": "connected", "var_name": "connected"}, {"original_string": "private Map<SoftwareProjectId, String> softwareProjectIds = new HashMap<SoftwareProjectId, String>();", "modifier": "private", "type": "Map<SoftwareProjectId, String>", "declarator": "softwareProjectIds = new HashMap<SoftwareProjectId, String>()", "var_name": "softwareProjectIds"}, {"original_string": "private Map<SoftwareProjectId, BuildState> buildStates = new HashMap<SoftwareProjectId, BuildState>();", "modifier": "private", "type": "Map<SoftwareProjectId, BuildState>", "declarator": "buildStates = new HashMap<SoftwareProjectId, BuildState>()", "var_name": "buildStates"}, {"original_string": "private Map<SoftwareProjectId, TestResult> unitTestResults = new HashMap<SoftwareProjectId, TestResult>();", "modifier": "private", "type": "Map<SoftwareProjectId, TestResult>", "declarator": "unitTestResults = new HashMap<SoftwareProjectId, TestResult>()", "var_name": "unitTestResults"}, {"original_string": "private Map<SoftwareProjectId, TestResult> integrationTestResults = new HashMap<SoftwareProjectId, TestResult>();", "modifier": "private", "type": "Map<SoftwareProjectId, TestResult>", "declarator": "integrationTestResults = new HashMap<SoftwareProjectId, TestResult>()", "var_name": "integrationTestResults"}, {"original_string": "private Map<SoftwareProjectId, QualityResult> qualityResults = new HashMap<SoftwareProjectId, QualityResult>();", "modifier": "private", "type": "Map<SoftwareProjectId, QualityResult>", "declarator": "qualityResults = new HashMap<SoftwareProjectId, QualityResult>()", "var_name": "qualityResults"}, {"original_string": "private List<String> views = new ArrayList<String>();", "modifier": "private", "type": "List<String>", "declarator": "views = new ArrayList<String>()", "var_name": "views"}, {"original_string": "private Integer marsBuildId = 1;", "modifier": "private", "type": "Integer", "declarator": "marsBuildId = 1", "var_name": "marsBuildId"}, {"original_string": "private List<String> marsBuildIds = new ArrayList<String>();", "modifier": "private", "type": "List<String>", "declarator": "marsBuildIds = new ArrayList<String>()", "var_name": "marsBuildIds"}, {"original_string": "private ChangeStateProject marsProj = new ChangeStateProject();", "modifier": "private", "type": "ChangeStateProject", "declarator": "marsProj = new ChangeStateProject()", "var_name": "marsProj"}], "methods": [{"identifier": "DemoConnection", "parameters": "()", "modifiers": "public", "return": "", "signature": " DemoConnection()", "full_signature": "public  DemoConnection()", "class_method_signature": "DemoConnection.DemoConnection()", "testcase": false, "constructor": true}, {"identifier": "createQualityMeasure", "parameters": "(String key, String name, String formattedValue, double value)", "modifiers": "private", "return": "QualityMeasure", "signature": "QualityMeasure createQualityMeasure(String key, String name, String formattedValue, double value)", "full_signature": "private QualityMeasure createQualityMeasure(String key, String name, String formattedValue, double value)", "class_method_signature": "DemoConnection.createQualityMeasure(String key, String name, String formattedValue, double value)", "testcase": false, "constructor": false}, {"identifier": "createTestResult", "parameters": "(int coverage, int passCount, int failCount, int skipCount)", "modifiers": "private", "return": "TestResult", "signature": "TestResult createTestResult(int coverage, int passCount, int failCount, int skipCount)", "full_signature": "private TestResult createTestResult(int coverage, int passCount, int failCount, int skipCount)", "class_method_signature": "DemoConnection.createTestResult(int coverage, int passCount, int failCount, int skipCount)", "testcase": false, "constructor": false}, {"identifier": "connect", "parameters": "(String url, String login, String password)", "modifiers": "@Override public", "return": "void", "signature": "void connect(String url, String login, String password)", "full_signature": "@Override public void connect(String url, String login, String password)", "class_method_signature": "DemoConnection.connect(String url, String login, String password)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "DemoConnection.close()", "testcase": false, "constructor": false}, {"identifier": "isClosed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isClosed()", "full_signature": "@Override public boolean isClosed()", "class_method_signature": "DemoConnection.isClosed()", "testcase": false, "constructor": false}, {"identifier": "listSoftwareProjectIds", "parameters": "()", "modifiers": "@Override public", "return": "Map<SoftwareProjectId, String>", "signature": "Map<SoftwareProjectId, String> listSoftwareProjectIds()", "full_signature": "@Override public Map<SoftwareProjectId, String> listSoftwareProjectIds()", "class_method_signature": "DemoConnection.listSoftwareProjectIds()", "testcase": false, "constructor": false}, {"identifier": "getMavenId", "parameters": "(SoftwareProjectId softwareProjectId)", "modifiers": "@Override public", "return": "String", "signature": "String getMavenId(SoftwareProjectId softwareProjectId)", "full_signature": "@Override public String getMavenId(SoftwareProjectId softwareProjectId)", "class_method_signature": "DemoConnection.getMavenId(SoftwareProjectId softwareProjectId)", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "(SoftwareProjectId softwareProjectId)", "modifiers": "@Override public", "return": "String", "signature": "String getDescription(SoftwareProjectId softwareProjectId)", "full_signature": "@Override public String getDescription(SoftwareProjectId softwareProjectId)", "class_method_signature": "DemoConnection.getDescription(SoftwareProjectId softwareProjectId)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "(SoftwareProjectId projectId)", "modifiers": "@Override public", "return": "String", "signature": "String getName(SoftwareProjectId projectId)", "full_signature": "@Override public String getName(SoftwareProjectId projectId)", "class_method_signature": "DemoConnection.getName(SoftwareProjectId projectId)", "testcase": false, "constructor": false}, {"identifier": "identify", "parameters": "(ProjectKey projectKey)", "modifiers": "@Override public", "return": "SoftwareProjectId", "signature": "SoftwareProjectId identify(ProjectKey projectKey)", "full_signature": "@Override public SoftwareProjectId identify(ProjectKey projectKey)", "class_method_signature": "DemoConnection.identify(ProjectKey projectKey)", "testcase": false, "constructor": false}, {"identifier": "getByName", "parameters": "(String projectName)", "modifiers": "private", "return": "SoftwareProjectId", "signature": "SoftwareProjectId getByName(String projectName)", "full_signature": "private SoftwareProjectId getByName(String projectName)", "class_method_signature": "DemoConnection.getByName(String projectName)", "testcase": false, "constructor": false}, {"identifier": "isProjectDisabled", "parameters": "(SoftwareProjectId softwareProjectId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isProjectDisabled(SoftwareProjectId softwareProjectId)", "full_signature": "@Override public boolean isProjectDisabled(SoftwareProjectId softwareProjectId)", "class_method_signature": "DemoConnection.isProjectDisabled(SoftwareProjectId softwareProjectId)", "testcase": false, "constructor": false}, {"identifier": "getMetricsByCategory", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, List<QualityMetric>>", "signature": "Map<String, List<QualityMetric>> getMetricsByCategory()", "full_signature": "@Override public Map<String, List<QualityMetric>> getMetricsByCategory()", "class_method_signature": "DemoConnection.getMetricsByCategory()", "testcase": false, "constructor": false}, {"identifier": "analyzeQuality", "parameters": "(SoftwareProjectId projectId, String... metrics)", "modifiers": "@Override public", "return": "QualityResult", "signature": "QualityResult analyzeQuality(SoftwareProjectId projectId, String... metrics)", "full_signature": "@Override public QualityResult analyzeQuality(SoftwareProjectId projectId, String... metrics)", "class_method_signature": "DemoConnection.analyzeQuality(SoftwareProjectId projectId, String... metrics)", "testcase": false, "constructor": false}, {"identifier": "findSoftwareProjectIdsByViews", "parameters": "(List<String> views)", "modifiers": "@Override public", "return": "List<SoftwareProjectId>", "signature": "List<SoftwareProjectId> findSoftwareProjectIdsByViews(List<String> views)", "full_signature": "@Override public List<SoftwareProjectId> findSoftwareProjectIdsByViews(List<String> views)", "class_method_signature": "DemoConnection.findSoftwareProjectIdsByViews(List<String> views)", "testcase": false, "constructor": false}, {"identifier": "findViews", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> findViews()", "full_signature": "@Override public List<String> findViews()", "class_method_signature": "DemoConnection.findViews()", "testcase": false, "constructor": false}, {"identifier": "findProjectNamesByView", "parameters": "(String viewName)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> findProjectNamesByView(String viewName)", "full_signature": "@Override public List<String> findProjectNamesByView(String viewName)", "class_method_signature": "DemoConnection.findProjectNamesByView(String viewName)", "testcase": false, "constructor": false}, {"identifier": "analyzeUnitTests", "parameters": "(SoftwareProjectId projectId)", "modifiers": "@Override public", "return": "TestResult", "signature": "TestResult analyzeUnitTests(SoftwareProjectId projectId)", "full_signature": "@Override public TestResult analyzeUnitTests(SoftwareProjectId projectId)", "class_method_signature": "DemoConnection.analyzeUnitTests(SoftwareProjectId projectId)", "testcase": false, "constructor": false}, {"identifier": "analyzeIntegrationTests", "parameters": "(SoftwareProjectId projectId)", "modifiers": "@Override public", "return": "TestResult", "signature": "TestResult analyzeIntegrationTests(SoftwareProjectId projectId)", "full_signature": "@Override public TestResult analyzeIntegrationTests(SoftwareProjectId projectId)", "class_method_signature": "DemoConnection.analyzeIntegrationTests(SoftwareProjectId projectId)", "testcase": false, "constructor": false}, {"identifier": "getBuildCommiters", "parameters": "(SoftwareProjectId softwareProjectId, String buildId)", "modifiers": "@Override public", "return": "List<Commiter>", "signature": "List<Commiter> getBuildCommiters(SoftwareProjectId softwareProjectId, String buildId)", "full_signature": "@Override public List<Commiter> getBuildCommiters(SoftwareProjectId softwareProjectId, String buildId)", "class_method_signature": "DemoConnection.getBuildCommiters(SoftwareProjectId softwareProjectId, String buildId)", "testcase": false, "constructor": false}, {"identifier": "getBuildTime", "parameters": "(SoftwareProjectId softwareProjectId, String buildId)", "modifiers": "@Override public", "return": "BuildTime", "signature": "BuildTime getBuildTime(SoftwareProjectId softwareProjectId, String buildId)", "full_signature": "@Override public BuildTime getBuildTime(SoftwareProjectId softwareProjectId, String buildId)", "class_method_signature": "DemoConnection.getBuildTime(SoftwareProjectId softwareProjectId, String buildId)", "testcase": false, "constructor": false}, {"identifier": "randomPastDate", "parameters": "()", "modifiers": "private", "return": "Date", "signature": "Date randomPastDate()", "full_signature": "private Date randomPastDate()", "class_method_signature": "DemoConnection.randomPastDate()", "testcase": false, "constructor": false}, {"identifier": "randomDuration", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int randomDuration()", "full_signature": "private int randomDuration()", "class_method_signature": "DemoConnection.randomDuration()", "testcase": false, "constructor": false}, {"identifier": "getBuildIds", "parameters": "(SoftwareProjectId softwareProjectId)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getBuildIds(SoftwareProjectId softwareProjectId)", "full_signature": "@Override public List<String> getBuildIds(SoftwareProjectId softwareProjectId)", "class_method_signature": "DemoConnection.getBuildIds(SoftwareProjectId softwareProjectId)", "testcase": false, "constructor": false}, {"identifier": "getBuildState", "parameters": "(SoftwareProjectId projectId, String buildId)", "modifiers": "@Override public", "return": "BuildState", "signature": "BuildState getBuildState(SoftwareProjectId projectId, String buildId)", "full_signature": "@Override public BuildState getBuildState(SoftwareProjectId projectId, String buildId)", "class_method_signature": "DemoConnection.getBuildState(SoftwareProjectId projectId, String buildId)", "testcase": false, "constructor": false}, {"identifier": "getEstimatedFinishTime", "parameters": "(SoftwareProjectId projectId, String buildId)", "modifiers": "@Override public", "return": "Date", "signature": "Date getEstimatedFinishTime(SoftwareProjectId projectId, String buildId)", "full_signature": "@Override public Date getEstimatedFinishTime(SoftwareProjectId projectId, String buildId)", "class_method_signature": "DemoConnection.getEstimatedFinishTime(SoftwareProjectId projectId, String buildId)", "testcase": false, "constructor": false}, {"identifier": "isBuilding", "parameters": "(SoftwareProjectId projectId, String buildId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isBuilding(SoftwareProjectId projectId, String buildId)", "full_signature": "@Override public boolean isBuilding(SoftwareProjectId projectId, String buildId)", "class_method_signature": "DemoConnection.isBuilding(SoftwareProjectId projectId, String buildId)", "testcase": false, "constructor": false}, {"identifier": "getLastBuildId", "parameters": "(SoftwareProjectId softwareProjectId)", "modifiers": "@Override public", "return": "String", "signature": "String getLastBuildId(SoftwareProjectId softwareProjectId)", "full_signature": "@Override public String getLastBuildId(SoftwareProjectId softwareProjectId)", "class_method_signature": "DemoConnection.getLastBuildId(SoftwareProjectId softwareProjectId)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DemoConnection.toString()", "testcase": false, "constructor": false}], "file": "component/core/src/main/java/fr/norad/visuwall/plugin/demo/DemoConnection.java"}, "focal_method": {"identifier": "analyzeIntegrationTests", "parameters": "(SoftwareProjectId projectId)", "modifiers": "@Override public", "return": "TestResult", "body": "@Override\n    public TestResult analyzeIntegrationTests(SoftwareProjectId projectId) {\n        TestResult testResult = integrationTestResults.get(projectId);\n        if (testResult == null) {\n            testResult = new TestResult();\n        }\n        return testResult;\n    }", "signature": "TestResult analyzeIntegrationTests(SoftwareProjectId projectId)", "full_signature": "@Override public TestResult analyzeIntegrationTests(SoftwareProjectId projectId)", "class_method_signature": "DemoConnection.analyzeIntegrationTests(SoftwareProjectId projectId)", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 29774200, "url": "https://github.com/n0rad/visuwall", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 5, "size": 19747, "license": "licensed"}}