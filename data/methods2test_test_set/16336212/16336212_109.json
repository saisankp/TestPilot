{"test_class": {"identifier": "TimerNameCacheTest", "superclass": "", "interfaces": "", "fields": [], "file": "agent/core/src/test/java/org/glowroot/agent/impl/TimerNameCacheTest.java"}, "test_case": {"identifier": "testClassWithEmptyTimerName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testClassWithEmptyTimerName() {\n        // given\n        TimerNameCache timerNameCache = new TimerNameCache();\n        // when\n        TimerName timerName = timerNameCache.getTimerName(B.class);\n        // then\n        assertThat(((TimerNameImpl) timerName).name()).isEqualTo(\"unknown\");\n    }", "signature": "void testClassWithEmptyTimerName()", "full_signature": "@Test public void testClassWithEmptyTimerName()", "class_method_signature": "TimerNameCacheTest.testClassWithEmptyTimerName()", "testcase": true, "constructor": false, "invocations": ["getTimerName", "isEqualTo", "assertThat", "name"]}, "focal_class": {"identifier": "TimerNameCache", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String AUXILIARY_THREAD_ROOT_TIMER_NAME = \"auxiliary thread\";", "modifier": "public static final", "type": "String", "declarator": "AUXILIARY_THREAD_ROOT_TIMER_NAME = \"auxiliary thread\"", "var_name": "AUXILIARY_THREAD_ROOT_TIMER_NAME"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(TimerNameCache.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(TimerNameCache.class)", "var_name": "logger"}, {"original_string": "private final LoadingCache<String, TimerNameImpl> names = CacheBuilder.newBuilder()\n            .weakValues()\n            .build(new CacheLoader<String, TimerNameImpl>() {\n                @Override\n                public TimerNameImpl load(String name) {\n                    return ImmutableTimerNameImpl.of(name, false);\n                }\n            });", "modifier": "private final", "type": "LoadingCache<String, TimerNameImpl>", "declarator": "names = CacheBuilder.newBuilder()\n            .weakValues()\n            .build(new CacheLoader<String, TimerNameImpl>() {\n                @Override\n                public TimerNameImpl load(String name) {\n                    return ImmutableTimerNameImpl.of(name, false);\n                }\n            })", "var_name": "names"}, {"original_string": "private final TimerName unknownTimerName = names.getUnchecked(\"unknown\");", "modifier": "private final", "type": "TimerName", "declarator": "unknownTimerName = names.getUnchecked(\"unknown\")", "var_name": "unknownTimerName"}, {"original_string": "private final TimerName auxThreadTimerName =\n            names.getUnchecked(AUXILIARY_THREAD_ROOT_TIMER_NAME);", "modifier": "private final", "type": "TimerName", "declarator": "auxThreadTimerName =\n            names.getUnchecked(AUXILIARY_THREAD_ROOT_TIMER_NAME)", "var_name": "auxThreadTimerName"}], "methods": [{"identifier": "getTimerName", "parameters": "(Class<?> adviceClass)", "modifiers": "public", "return": "TimerName", "signature": "TimerName getTimerName(Class<?> adviceClass)", "full_signature": "public TimerName getTimerName(Class<?> adviceClass)", "class_method_signature": "TimerNameCache.getTimerName(Class<?> adviceClass)", "testcase": false, "constructor": false}, {"identifier": "getTimerName", "parameters": "(String name)", "modifiers": "", "return": "TimerName", "signature": "TimerName getTimerName(String name)", "full_signature": " TimerName getTimerName(String name)", "class_method_signature": "TimerNameCache.getTimerName(String name)", "testcase": false, "constructor": false}, {"identifier": "getAuxThreadTimerName", "parameters": "()", "modifiers": "", "return": "TimerName", "signature": "TimerName getAuxThreadTimerName()", "full_signature": " TimerName getAuxThreadTimerName()", "class_method_signature": "TimerNameCache.getAuxThreadTimerName()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "(String name)", "modifiers": "private", "return": "TimerName", "signature": "TimerName getName(String name)", "full_signature": "private TimerName getName(String name)", "class_method_signature": "TimerNameCache.getName(String name)", "testcase": false, "constructor": false}], "file": "agent/core/src/main/java/org/glowroot/agent/impl/TimerNameCache.java"}, "focal_method": {"identifier": "getTimerName", "parameters": "(Class<?> adviceClass)", "modifiers": "public", "return": "TimerName", "body": "public TimerName getTimerName(Class<?> adviceClass) {\n        if (adviceClass == null) {\n            logger.error(\"getTimerName(): argument 'adviceClass' must be non-null\");\n            return unknownTimerName;\n        }\n        Pointcut pointcut = adviceClass.getAnnotation(Pointcut.class);\n        if (pointcut == null) {\n            logger.warn(\"advice has no @Pointcut: {}\", adviceClass.getName());\n            return unknownTimerName;\n        } else if (pointcut.timerName().isEmpty()) {\n            logger.warn(\"advice @Pointcut has no timerName() attribute: {}\", adviceClass.getName());\n            return unknownTimerName;\n        } else {\n            return getName(pointcut.timerName());\n        }\n    }", "signature": "TimerName getTimerName(Class<?> adviceClass)", "full_signature": "public TimerName getTimerName(Class<?> adviceClass)", "class_method_signature": "TimerNameCache.getTimerName(Class<?> adviceClass)", "testcase": false, "constructor": false, "invocations": ["error", "getAnnotation", "warn", "getName", "isEmpty", "timerName", "warn", "getName", "getName", "timerName"]}, "repository": {"repo_id": 16336212, "url": "https://github.com/glowroot/glowroot", "stars": 736, "created": "1/29/2014 5:25:58 AM +00:00", "updates": "2020-01-24T11:13:42+00:00", "fork": "False", "license": "licensed"}}