{"test_class": {"identifier": "FunctionsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int VALUE = 42;", "modifier": "private static final", "type": "int", "declarator": "VALUE = 42", "var_name": "VALUE"}, {"original_string": "private static final int VALUE_PLUS_TWO = 44;", "modifier": "private static final", "type": "int", "declarator": "VALUE_PLUS_TWO = 44", "var_name": "VALUE_PLUS_TWO"}, {"original_string": "private static final int RECOVER_VALUE = 43;", "modifier": "private static final", "type": "int", "declarator": "RECOVER_VALUE = 43", "var_name": "RECOVER_VALUE"}, {"original_string": "private static final String INPUT_STRING = \"input\";", "modifier": "private static final", "type": "String", "declarator": "INPUT_STRING = \"input\"", "var_name": "INPUT_STRING"}, {"original_string": "private static final List<String> INPUT_LIST = asList(\"some\", \"strings\", \"for\", \"testing\");", "modifier": "private static final", "type": "List<String>", "declarator": "INPUT_LIST = asList(\"some\", \"strings\", \"for\", \"testing\")", "var_name": "INPUT_LIST"}, {"original_string": "@SuppressWarnings(\"ThrowableInstanceNeverThrown\")\n  private static final Throwable THROWABLE = new Throwable();", "modifier": "@SuppressWarnings(\"ThrowableInstanceNeverThrown\")\n  private static final", "type": "Throwable", "declarator": "THROWABLE = new Throwable()", "var_name": "THROWABLE"}, {"original_string": "private static final Result<Integer> FAILURE = failure(THROWABLE);", "modifier": "private static final", "type": "Result<Integer>", "declarator": "FAILURE = failure(THROWABLE)", "var_name": "FAILURE"}, {"original_string": "private static final Result<Integer> RECOVER_SUCCESS = success(RECOVER_VALUE);", "modifier": "private static final", "type": "Result<Integer>", "declarator": "RECOVER_SUCCESS = success(RECOVER_VALUE)", "var_name": "RECOVER_SUCCESS"}, {"original_string": "private static final Result<Integer> PRESENT_WITH_VALUE = present(VALUE);", "modifier": "private static final", "type": "Result<Integer>", "declarator": "PRESENT_WITH_VALUE = present(VALUE)", "var_name": "PRESENT_WITH_VALUE"}, {"original_string": "private static final Result<Integer> ABSENT = absent();", "modifier": "private static final", "type": "Result<Integer>", "declarator": "ABSENT = absent()", "var_name": "ABSENT"}, {"original_string": "private static final Result<List<Integer>> FAILURE_LIST = failure(THROWABLE);", "modifier": "private static final", "type": "Result<List<Integer>>", "declarator": "FAILURE_LIST = failure(THROWABLE)", "var_name": "FAILURE_LIST"}, {"original_string": "private static final Result<List<Integer>> ABSENT_LIST = absent();", "modifier": "private static final", "type": "Result<List<Integer>>", "declarator": "ABSENT_LIST = absent()", "var_name": "ABSENT_LIST"}, {"original_string": "private static final Result<List<String>> PRESENT_WITH_LIST = present(INPUT_LIST);", "modifier": "private static final", "type": "Result<List<String>>", "declarator": "PRESENT_WITH_LIST = present(INPUT_LIST)", "var_name": "PRESENT_WITH_LIST"}, {"original_string": "@Mock\n  private Function<Integer, Result<Integer>> mockDivideTenFunction;", "modifier": "@Mock\n  private", "type": "Function<Integer, Result<Integer>>", "declarator": "mockDivideTenFunction", "var_name": "mockDivideTenFunction"}, {"original_string": "@Mock\n  private Function<Integer, Integer> mockPlusTwoFunction;", "modifier": "@Mock\n  private", "type": "Function<Integer, Integer>", "declarator": "mockPlusTwoFunction", "var_name": "mockPlusTwoFunction"}, {"original_string": "@Mock\n  private Function<Throwable, Result<Integer>> mockTryRecoverFunction;", "modifier": "@Mock\n  private", "type": "Function<Throwable, Result<Integer>>", "declarator": "mockTryRecoverFunction", "var_name": "mockTryRecoverFunction"}, {"original_string": "@Mock\n  private Function<Throwable, Integer> mockRecoverFunction;", "modifier": "@Mock\n  private", "type": "Function<Throwable, Integer>", "declarator": "mockRecoverFunction", "var_name": "mockRecoverFunction"}, {"original_string": "@Mock\n  private Supplier<String> mockSupplier;", "modifier": "@Mock\n  private", "type": "Supplier<String>", "declarator": "mockSupplier", "var_name": "mockSupplier"}], "file": "agera/src/test/java/com/google/android/agera/FunctionsTest.java"}, "test_case": {"identifier": "shouldCreateFunctionFromListToSortedList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldCreateFunctionFromListToSortedList() {\n    final Function<List<String>, List<Integer>> function = functionFromListOf(String.class)\n        .map(new StringLength())\n        .thenSort(new Comparator<Integer>() {\n          @Override\n          public int compare(Integer lhs, Integer rhs) {\n            return lhs.compareTo(rhs);\n          }\n        });\n\n    final List<String> inputList = new ArrayList<>(INPUT_LIST);\n    assertThat(function.apply(inputList), contains(3, 4, 7, 7));\n  }", "signature": "void shouldCreateFunctionFromListToSortedList()", "full_signature": "@Test public void shouldCreateFunctionFromListToSortedList()", "class_method_signature": "FunctionsTest.shouldCreateFunctionFromListToSortedList()", "testcase": true, "constructor": false, "invocations": ["thenSort", "map", "functionFromListOf", "compareTo", "assertThat", "apply", "contains"]}, "focal_class": {"identifier": "Functions", "superclass": "", "interfaces": "", "fields": [{"original_string": "@NonNull\n  private static final ResultAsListFunction<Object> RESULT_AS_LIST_FUNCTION =\n      new ResultAsListFunction<>();", "modifier": "@NonNull\n  private static final", "type": "ResultAsListFunction<Object>", "declarator": "RESULT_AS_LIST_FUNCTION =\n      new ResultAsListFunction<>()", "var_name": "RESULT_AS_LIST_FUNCTION"}, {"original_string": "@NonNull\n  private static final ItemAsListFunction<Object> ITEM_AS_LIST_FUNCTION =\n      new ItemAsListFunction<>();", "modifier": "@NonNull\n  private static final", "type": "ItemAsListFunction<Object>", "declarator": "ITEM_AS_LIST_FUNCTION =\n      new ItemAsListFunction<>()", "var_name": "ITEM_AS_LIST_FUNCTION"}, {"original_string": "@NonNull\n  private static final ResultListAsListFunction<Object> RESULT_LIST_AS_LIST_FUNCTION =\n      new ResultListAsListFunction<>();", "modifier": "@NonNull\n  private static final", "type": "ResultListAsListFunction<Object>", "declarator": "RESULT_LIST_AS_LIST_FUNCTION =\n      new ResultListAsListFunction<>()", "var_name": "RESULT_LIST_AS_LIST_FUNCTION"}], "methods": [{"identifier": "staticFunction", "parameters": "(@NonNull final T object)", "modifiers": "@NonNull public static", "return": "Function<F, T>", "signature": "Function<F, T> staticFunction(@NonNull final T object)", "full_signature": "@NonNull public static Function<F, T> staticFunction(@NonNull final T object)", "class_method_signature": "Functions.staticFunction(@NonNull final T object)", "testcase": false, "constructor": false}, {"identifier": "supplierAsFunction", "parameters": "(\n      @NonNull final Supplier<? extends T> supplier)", "modifiers": "@NonNull public static", "return": "Function<F, T>", "signature": "Function<F, T> supplierAsFunction(\n      @NonNull final Supplier<? extends T> supplier)", "full_signature": "@NonNull public static Function<F, T> supplierAsFunction(\n      @NonNull final Supplier<? extends T> supplier)", "class_method_signature": "Functions.supplierAsFunction(\n      @NonNull final Supplier<? extends T> supplier)", "testcase": false, "constructor": false}, {"identifier": "identityFunction", "parameters": "()", "modifiers": "@NonNull public static", "return": "Function<T, T>", "signature": "Function<T, T> identityFunction()", "full_signature": "@NonNull public static Function<T, T> identityFunction()", "class_method_signature": "Functions.identityFunction()", "testcase": false, "constructor": false}, {"identifier": "functionFrom", "parameters": "(@Nullable Class<F> from)", "modifiers": "@NonNull @SuppressWarnings({\"unchecked\", \"UnusedParameters\"}) public static", "return": "FItem<F, F>", "signature": "FItem<F, F> functionFrom(@Nullable Class<F> from)", "full_signature": "@NonNull @SuppressWarnings({\"unchecked\", \"UnusedParameters\"}) public static FItem<F, F> functionFrom(@Nullable Class<F> from)", "class_method_signature": "Functions.functionFrom(@Nullable Class<F> from)", "testcase": false, "constructor": false}, {"identifier": "functionFromListOf", "parameters": "(\n      @Nullable final Class<F> from)", "modifiers": "@NonNull @SuppressWarnings({\"unchecked\", \"UnusedParameters\"}) public static", "return": "FList<F, List<F>, List<F>>", "signature": "FList<F, List<F>, List<F>> functionFromListOf(\n      @Nullable final Class<F> from)", "full_signature": "@NonNull @SuppressWarnings({\"unchecked\", \"UnusedParameters\"}) public static FList<F, List<F>, List<F>> functionFromListOf(\n      @Nullable final Class<F> from)", "class_method_signature": "Functions.functionFromListOf(\n      @Nullable final Class<F> from)", "testcase": false, "constructor": false}, {"identifier": "failedResult", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @NonNull public static", "return": "Function<Throwable, Result<T>>", "signature": "Function<Throwable, Result<T>> failedResult()", "full_signature": "@SuppressWarnings(\"unchecked\") @NonNull public static Function<Throwable, Result<T>> failedResult()", "class_method_signature": "Functions.failedResult()", "testcase": false, "constructor": false}, {"identifier": "resultAsList", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @NonNull public static", "return": "Function<Result<T>, List<T>>", "signature": "Function<Result<T>, List<T>> resultAsList()", "full_signature": "@SuppressWarnings(\"unchecked\") @NonNull public static Function<Result<T>, List<T>> resultAsList()", "class_method_signature": "Functions.resultAsList()", "testcase": false, "constructor": false}, {"identifier": "itemAsList", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @NonNull public static", "return": "Function<T, List<T>>", "signature": "Function<T, List<T>> itemAsList()", "full_signature": "@SuppressWarnings(\"unchecked\") @NonNull public static Function<T, List<T>> itemAsList()", "class_method_signature": "Functions.itemAsList()", "testcase": false, "constructor": false}, {"identifier": "resultListAsList", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @NonNull public static", "return": "Function<Result<List<T>>, List<T>>", "signature": "Function<Result<List<T>>, List<T>> resultListAsList()", "full_signature": "@SuppressWarnings(\"unchecked\") @NonNull public static Function<Result<List<T>>, List<T>> resultListAsList()", "class_method_signature": "Functions.resultListAsList()", "testcase": false, "constructor": false}, {"identifier": "Functions", "parameters": "()", "modifiers": "private", "return": "", "signature": " Functions()", "full_signature": "private  Functions()", "class_method_signature": "Functions.Functions()", "testcase": false, "constructor": true}], "file": "agera/src/main/java/com/google/android/agera/Functions.java"}, "focal_method": {"identifier": "functionFromListOf", "parameters": "(\n      @Nullable final Class<F> from)", "modifiers": "@NonNull @SuppressWarnings({\"unchecked\", \"UnusedParameters\"}) public static", "return": "FList<F, List<F>, List<F>>", "body": "@NonNull\n  @SuppressWarnings({\"unchecked\", \"UnusedParameters\"})\n  public static <F> FList<F, List<F>, List<F>> functionFromListOf(\n      @Nullable final Class<F> from) {\n    return functionCompiler();\n  }", "signature": "FList<F, List<F>, List<F>> functionFromListOf(\n      @Nullable final Class<F> from)", "full_signature": "@NonNull @SuppressWarnings({\"unchecked\", \"UnusedParameters\"}) public static FList<F, List<F>, List<F>> functionFromListOf(\n      @Nullable final Class<F> from)", "class_method_signature": "Functions.functionFromListOf(\n      @Nullable final Class<F> from)", "testcase": false, "constructor": false, "invocations": ["functionCompiler"]}, "repository": {"repo_id": 48175620, "url": "https://github.com/google/agera", "language": "Java", "is_fork": false, "fork_count": 669, "stargazer_count": 7333, "size": 968, "license": "licensed"}}