{"test_class": {"identifier": "NcFileStitcherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private File targetDirectory;", "modifier": "private", "type": "File", "declarator": "targetDirectory", "var_name": "targetDirectory"}, {"original_string": "private NetcdfFile netcdfFile;", "modifier": "private", "type": "NetcdfFile", "declarator": "netcdfFile", "var_name": "netcdfFile"}], "file": "s3tbx-slstr-pdu-stitching/src/test/java/org/esa/s3tbx/slstr/pdu/stitching/NcFileStitcherTest.java"}, "test_case": {"identifier": "testSetGlobalAttributes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSetGlobalAttributes() throws IOException {\n        final File file = new File(targetDirectory, \"something.nc\");\n        SlstrNFileWritable netcdfWriteable = new SlstrNFileWritable(file.getAbsolutePath());\n        List<Attribute>[] attributeLists = new List[2];\n        attributeLists[0] = new ArrayList<>();\n        attributeLists[0].add(new Attribute(\"xyz\", \"yz\"));\n        attributeLists[0].add(new Attribute(\"abc\", \"23\"));\n        final ArrayByte someArray = new ArrayByte(new int[]{2}, true);\n        someArray.setByte(0, (byte) 5);\n        someArray.setByte(0, (byte) 5);\n        attributeLists[0].add(new Attribute(\"def\", someArray));\n        attributeLists[1] = new ArrayList<>();\n        attributeLists[1].add(new Attribute(\"xyz\", \"yz\"));\n        attributeLists[1].add(new Attribute(\"abc\", \"44\"));\n        attributeLists[1].add(new Attribute(\"defg\", someArray));\n        final DateFormatConverter globalAttributesDateFormatConverter =\n                new DateFormatConverter(new SimpleDateFormat(\"yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'\"));\n        final String someTimeAsString = globalAttributesDateFormatConverter.format(new GregorianCalendar(2013, 6, 7, 15, 32, 52).getTime());\n        attributeLists[1].add(new Attribute(\"creation_time\", someTimeAsString));\n\n        final Date now = Calendar.getInstance().getTime();\n        final String nowAsString = globalAttributesDateFormatConverter.format(now);\n        NcFileStitcher.setGlobalAttributes(netcdfWriteable, attributeLists, targetDirectory.getName(), now);\n        netcdfWriteable.create();\n        netcdfWriteable.close();\n        netcdfFile = NetcdfFileOpener.open(file);\n        assertNotNull(netcdfFile);\n        final List<Attribute> globalAttributes = netcdfFile.getGlobalAttributes();\n\n        assertEquals(7, globalAttributes.size());\n        assertEquals(\"xyz\", globalAttributes.get(0).getFullName());\n        assertEquals(\"yz\", globalAttributes.get(0).getStringValue());\n        assertEquals(\"abc_1\", globalAttributes.get(1).getFullName());\n        assertEquals(\"44\", globalAttributes.get(1).getStringValue());\n        assertEquals(\"abc\", globalAttributes.get(2).getFullName());\n        assertEquals(\"23\", globalAttributes.get(2).getStringValue());\n        assertEquals(\"def\", globalAttributes.get(3).getFullName());\n        assertEquals(someArray.toString(), globalAttributes.get(3).getStringValue());\n        assertEquals(\"defg\", globalAttributes.get(4).getFullName());\n        assertEquals(someArray.toString(), globalAttributes.get(4).getStringValue());\n        assertEquals(\"creation_time\", globalAttributes.get(5).getFullName());\n        assertEquals(nowAsString, globalAttributes.get(5).getStringValue());\n    }", "signature": "void testSetGlobalAttributes()", "full_signature": "@Test public void testSetGlobalAttributes()", "class_method_signature": "NcFileStitcherTest.testSetGlobalAttributes()", "testcase": true, "constructor": false, "invocations": ["getAbsolutePath", "add", "add", "setByte", "setByte", "add", "add", "add", "add", "format", "getTime", "add", "getTime", "getInstance", "format", "setGlobalAttributes", "getName", "create", "close", "open", "assertNotNull", "getGlobalAttributes", "assertEquals", "size", "assertEquals", "getFullName", "get", "assertEquals", "getStringValue", "get", "assertEquals", "getFullName", "get", "assertEquals", "getStringValue", "get", "assertEquals", "getFullName", "get", "assertEquals", "getStringValue", "get", "assertEquals", "getFullName", "get", "assertEquals", "toString", "getStringValue", "get", "assertEquals", "getFullName", "get", "assertEquals", "toString", "getStringValue", "get", "assertEquals", "getFullName", "get", "assertEquals", "getStringValue", "get"]}, "focal_class": {"identifier": "NcFileStitcher", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PRODUCT_NAME = \"product_name\";", "modifier": "private static final", "type": "String", "declarator": "PRODUCT_NAME = \"product_name\"", "var_name": "PRODUCT_NAME"}, {"original_string": "private static final String CREATION_TIME = \"creation_time\";", "modifier": "private static final", "type": "String", "declarator": "CREATION_TIME = \"creation_time\"", "var_name": "CREATION_TIME"}], "methods": [{"identifier": "stitchNcFiles", "parameters": "(String fileName, File targetDirectory, Date creationDate,\n                              File[] ncFiles, ImageSize targetImageSize, ImageSize[] imageSizes)", "modifiers": "static", "return": "File", "signature": "File stitchNcFiles(String fileName, File targetDirectory, Date creationDate,\n                              File[] ncFiles, ImageSize targetImageSize, ImageSize[] imageSizes)", "full_signature": "static File stitchNcFiles(String fileName, File targetDirectory, Date creationDate,\n                              File[] ncFiles, ImageSize targetImageSize, ImageSize[] imageSizes)", "class_method_signature": "NcFileStitcher.stitchNcFiles(String fileName, File targetDirectory, Date creationDate,\n                              File[] ncFiles, ImageSize targetImageSize, ImageSize[] imageSizes)", "testcase": false, "constructor": false}, {"identifier": "defineVariables", "parameters": "(SlstrNFileWritable netcdfWriteable, List<Variable>[] variableLists,\n                                                      ImageSize targetImageSize, ImageSize[] imageSizes)", "modifiers": "private static", "return": "Map<String, Array>", "signature": "Map<String, Array> defineVariables(SlstrNFileWritable netcdfWriteable, List<Variable>[] variableLists,\n                                                      ImageSize targetImageSize, ImageSize[] imageSizes)", "full_signature": "private static Map<String, Array> defineVariables(SlstrNFileWritable netcdfWriteable, List<Variable>[] variableLists,\n                                                      ImageSize targetImageSize, ImageSize[] imageSizes)", "class_method_signature": "NcFileStitcher.defineVariables(SlstrNFileWritable netcdfWriteable, List<Variable>[] variableLists,\n                                                      ImageSize targetImageSize, ImageSize[] imageSizes)", "testcase": false, "constructor": false}, {"identifier": "getValidArrayFromVariable", "parameters": "(Variable variable)", "modifiers": "private static", "return": "Array", "signature": "Array getValidArrayFromVariable(Variable variable)", "full_signature": "private static Array getValidArrayFromVariable(Variable variable)", "class_method_signature": "NcFileStitcher.getValidArrayFromVariable(Variable variable)", "testcase": false, "constructor": false}, {"identifier": "addVariableToWritable", "parameters": "(SlstrNFileWritable netcdfWriteable, Variable variable)", "modifiers": "private static", "return": "SlstrN4Variable", "signature": "SlstrN4Variable addVariableToWritable(SlstrNFileWritable netcdfWriteable, Variable variable)", "full_signature": "private static SlstrN4Variable addVariableToWritable(SlstrNFileWritable netcdfWriteable, Variable variable)", "class_method_signature": "NcFileStitcher.addVariableToWritable(SlstrNFileWritable netcdfWriteable, Variable variable)", "testcase": false, "constructor": false}, {"identifier": "createStitchedArray", "parameters": "(Variable variable, ImageSize targetImageSize, ImageSize[] imageSizes,\n                                             int indexOfRowDimension, List<Variable>[] variableLists, Number fillValue)", "modifiers": "private static", "return": "Array", "signature": "Array createStitchedArray(Variable variable, ImageSize targetImageSize, ImageSize[] imageSizes,\n                                             int indexOfRowDimension, List<Variable>[] variableLists, Number fillValue)", "full_signature": "private static Array createStitchedArray(Variable variable, ImageSize targetImageSize, ImageSize[] imageSizes,\n                                             int indexOfRowDimension, List<Variable>[] variableLists, Number fillValue)", "class_method_signature": "NcFileStitcher.createStitchedArray(Variable variable, ImageSize targetImageSize, ImageSize[] imageSizes,\n                                             int indexOfRowDimension, List<Variable>[] variableLists, Number fillValue)", "testcase": false, "constructor": false}, {"identifier": "getPreFilledArray", "parameters": "(DataType dataType, int[] shape, Number fillValue)", "modifiers": "private static", "return": "Array", "signature": "Array getPreFilledArray(DataType dataType, int[] shape, Number fillValue)", "full_signature": "private static Array getPreFilledArray(DataType dataType, int[] shape, Number fillValue)", "class_method_signature": "NcFileStitcher.getPreFilledArray(DataType dataType, int[] shape, Number fillValue)", "testcase": false, "constructor": false}, {"identifier": "addVariableAttributes", "parameters": "(SlstrN4Variable nVariable, Variable variable, int variableIndex,\n                                              List<Variable>[] variableLists)", "modifiers": "private static", "return": "void", "signature": "void addVariableAttributes(SlstrN4Variable nVariable, Variable variable, int variableIndex,\n                                              List<Variable>[] variableLists)", "full_signature": "private static void addVariableAttributes(SlstrN4Variable nVariable, Variable variable, int variableIndex,\n                                              List<Variable>[] variableLists)", "class_method_signature": "NcFileStitcher.addVariableAttributes(SlstrN4Variable nVariable, Variable variable, int variableIndex,\n                                              List<Variable>[] variableLists)", "testcase": false, "constructor": false}, {"identifier": "checkWhetherVariableHasSameDimensionsAcrossFiles", "parameters": "(int listIndex, Variable variable,\n                                                                         List<Variable>[] variableLists)", "modifiers": "private static", "return": "void", "signature": "void checkWhetherVariableHasSameDimensionsAcrossFiles(int listIndex, Variable variable,\n                                                                         List<Variable>[] variableLists)", "full_signature": "private static void checkWhetherVariableHasSameDimensionsAcrossFiles(int listIndex, Variable variable,\n                                                                         List<Variable>[] variableLists)", "class_method_signature": "NcFileStitcher.checkWhetherVariableHasSameDimensionsAcrossFiles(int listIndex, Variable variable,\n                                                                         List<Variable>[] variableLists)", "testcase": false, "constructor": false}, {"identifier": "getIndexOfRowDimension", "parameters": "(List<Dimension> variableDimensions)", "modifiers": "private static", "return": "int", "signature": "int getIndexOfRowDimension(List<Dimension> variableDimensions)", "full_signature": "private static int getIndexOfRowDimension(List<Dimension> variableDimensions)", "class_method_signature": "NcFileStitcher.getIndexOfRowDimension(List<Dimension> variableDimensions)", "testcase": false, "constructor": false}, {"identifier": "addAttributeToNVariable", "parameters": "(SlstrN4Variable nVariable, Attribute referenceAttribute, int index)", "modifiers": "private static", "return": "void", "signature": "void addAttributeToNVariable(SlstrN4Variable nVariable, Attribute referenceAttribute, int index)", "full_signature": "private static void addAttributeToNVariable(SlstrN4Variable nVariable, Attribute referenceAttribute, int index)", "class_method_signature": "NcFileStitcher.addAttributeToNVariable(SlstrN4Variable nVariable, Attribute referenceAttribute, int index)", "testcase": false, "constructor": false}, {"identifier": "addAttributeToNVariable", "parameters": "(SlstrN4Variable nVariable, Attribute referenceAttribute)", "modifiers": "private static", "return": "void", "signature": "void addAttributeToNVariable(SlstrN4Variable nVariable, Attribute referenceAttribute)", "full_signature": "private static void addAttributeToNVariable(SlstrN4Variable nVariable, Attribute referenceAttribute)", "class_method_signature": "NcFileStitcher.addAttributeToNVariable(SlstrN4Variable nVariable, Attribute referenceAttribute)", "testcase": false, "constructor": false}, {"identifier": "addAttributeToNVariable", "parameters": "(SlstrN4Variable nVariable, String name, Attribute referenceAttribute)", "modifiers": "private static", "return": "void", "signature": "void addAttributeToNVariable(SlstrN4Variable nVariable, String name, Attribute referenceAttribute)", "full_signature": "private static void addAttributeToNVariable(SlstrN4Variable nVariable, String name, Attribute referenceAttribute)", "class_method_signature": "NcFileStitcher.addAttributeToNVariable(SlstrN4Variable nVariable, String name, Attribute referenceAttribute)", "testcase": false, "constructor": false}, {"identifier": "getDimensionFromList", "parameters": "(String name, List<Dimension> dimensionList)", "modifiers": "private static", "return": "Dimension", "signature": "Dimension getDimensionFromList(String name, List<Dimension> dimensionList)", "full_signature": "private static Dimension getDimensionFromList(String name, List<Dimension> dimensionList)", "class_method_signature": "NcFileStitcher.getDimensionFromList(String name, List<Dimension> dimensionList)", "testcase": false, "constructor": false}, {"identifier": "getAttributeFromList", "parameters": "(String name, List<Attribute> attributeList)", "modifiers": "private static", "return": "Attribute", "signature": "Attribute getAttributeFromList(String name, List<Attribute> attributeList)", "full_signature": "private static Attribute getAttributeFromList(String name, List<Attribute> attributeList)", "class_method_signature": "NcFileStitcher.getAttributeFromList(String name, List<Attribute> attributeList)", "testcase": false, "constructor": false}, {"identifier": "getVariableFromList", "parameters": "(String name, List<Variable> variableList)", "modifiers": "private static", "return": "Variable", "signature": "Variable getVariableFromList(String name, List<Variable> variableList)", "full_signature": "private static Variable getVariableFromList(String name, List<Variable> variableList)", "class_method_signature": "NcFileStitcher.getVariableFromList(String name, List<Variable> variableList)", "testcase": false, "constructor": false}, {"identifier": "determineDestinationOffsets", "parameters": "(int[] rowOffsets, int[] numberOfRows,\n                                               int[] sectionSizes, int[][] sourceOffsets)", "modifiers": "static", "return": "int[][]", "signature": "int[][] determineDestinationOffsets(int[] rowOffsets, int[] numberOfRows,\n                                               int[] sectionSizes, int[][] sourceOffsets)", "full_signature": "static int[][] determineDestinationOffsets(int[] rowOffsets, int[] numberOfRows,\n                                               int[] sectionSizes, int[][] sourceOffsets)", "class_method_signature": "NcFileStitcher.determineDestinationOffsets(int[] rowOffsets, int[] numberOfRows,\n                                               int[] sectionSizes, int[][] sourceOffsets)", "testcase": false, "constructor": false}, {"identifier": "determineSourceOffsets", "parameters": "(int sectionSize, Variable variable)", "modifiers": "static", "return": "int[]", "signature": "int[] determineSourceOffsets(int sectionSize, Variable variable)", "full_signature": "static int[] determineSourceOffsets(int sectionSize, Variable variable)", "class_method_signature": "NcFileStitcher.determineSourceOffsets(int sectionSize, Variable variable)", "testcase": false, "constructor": false}, {"identifier": "determineSectionSize", "parameters": "(int indexOfRowDimension, Variable variable)", "modifiers": "static", "return": "int", "signature": "int determineSectionSize(int indexOfRowDimension, Variable variable)", "full_signature": "static int determineSectionSize(int indexOfRowDimension, Variable variable)", "class_method_signature": "NcFileStitcher.determineSectionSize(int indexOfRowDimension, Variable variable)", "testcase": false, "constructor": false}, {"identifier": "setDimensions", "parameters": "(SlstrNFileWritable nFileWriteable, List<Dimension>[] dimensionLists,\n                              ImageSize targetImageSize, List<Variable>[] variableLists)", "modifiers": "static", "return": "void", "signature": "void setDimensions(SlstrNFileWritable nFileWriteable, List<Dimension>[] dimensionLists,\n                              ImageSize targetImageSize, List<Variable>[] variableLists)", "full_signature": "static void setDimensions(SlstrNFileWritable nFileWriteable, List<Dimension>[] dimensionLists,\n                              ImageSize targetImageSize, List<Variable>[] variableLists)", "class_method_signature": "NcFileStitcher.setDimensions(SlstrNFileWritable nFileWriteable, List<Dimension>[] dimensionLists,\n                              ImageSize targetImageSize, List<Variable>[] variableLists)", "testcase": false, "constructor": false}, {"identifier": "checkWhetherEquallyNamedVariablesContainEqualValues", "parameters": "(String dimensionName, int dimensionIndex,\n                                                                            List<Variable>[] variableLists)", "modifiers": "private static", "return": "void", "signature": "void checkWhetherEquallyNamedVariablesContainEqualValues(String dimensionName, int dimensionIndex,\n                                                                            List<Variable>[] variableLists)", "full_signature": "private static void checkWhetherEquallyNamedVariablesContainEqualValues(String dimensionName, int dimensionIndex,\n                                                                            List<Variable>[] variableLists)", "class_method_signature": "NcFileStitcher.checkWhetherEquallyNamedVariablesContainEqualValues(String dimensionName, int dimensionIndex,\n                                                                            List<Variable>[] variableLists)", "testcase": false, "constructor": false}, {"identifier": "checkWhetherDimensionLengthIsEqualAcrossAllEquallyNamedDimensions", "parameters": "(Dimension dimension,\n                                                                                          int dimensionIndex,\n                                                                                          List<Dimension>[] dimensionLists)", "modifiers": "private static", "return": "void", "signature": "void checkWhetherDimensionLengthIsEqualAcrossAllEquallyNamedDimensions(Dimension dimension,\n                                                                                          int dimensionIndex,\n                                                                                          List<Dimension>[] dimensionLists)", "full_signature": "private static void checkWhetherDimensionLengthIsEqualAcrossAllEquallyNamedDimensions(Dimension dimension,\n                                                                                          int dimensionIndex,\n                                                                                          List<Dimension>[] dimensionLists)", "class_method_signature": "NcFileStitcher.checkWhetherDimensionLengthIsEqualAcrossAllEquallyNamedDimensions(Dimension dimension,\n                                                                                          int dimensionIndex,\n                                                                                          List<Dimension>[] dimensionLists)", "testcase": false, "constructor": false}, {"identifier": "setGlobalAttributes", "parameters": "(SlstrNFileWritable nFileWriteable, List<Attribute>[] globalAttributeLists,\n                                    String parentDirectoryName, Date creationDate)", "modifiers": "static", "return": "void", "signature": "void setGlobalAttributes(SlstrNFileWritable nFileWriteable, List<Attribute>[] globalAttributeLists,\n                                    String parentDirectoryName, Date creationDate)", "full_signature": "static void setGlobalAttributes(SlstrNFileWritable nFileWriteable, List<Attribute>[] globalAttributeLists,\n                                    String parentDirectoryName, Date creationDate)", "class_method_signature": "NcFileStitcher.setGlobalAttributes(SlstrNFileWritable nFileWriteable, List<Attribute>[] globalAttributeLists,\n                                    String parentDirectoryName, Date creationDate)", "testcase": false, "constructor": false}, {"identifier": "areAttributeValuesEqual", "parameters": "(Attribute attribute1, Attribute attribute2)", "modifiers": "private static", "return": "boolean", "signature": "boolean areAttributeValuesEqual(Attribute attribute1, Attribute attribute2)", "full_signature": "private static boolean areAttributeValuesEqual(Attribute attribute1, Attribute attribute2)", "class_method_signature": "NcFileStitcher.areAttributeValuesEqual(Attribute attribute1, Attribute attribute2)", "testcase": false, "constructor": false}, {"identifier": "areArraysEqual", "parameters": "(Array array1, Array array2)", "modifiers": "private static", "return": "boolean", "signature": "boolean areArraysEqual(Array array1, Array array2)", "full_signature": "private static boolean areArraysEqual(Array array1, Array array2)", "class_method_signature": "NcFileStitcher.areArraysEqual(Array array1, Array array2)", "testcase": false, "constructor": false}], "file": "s3tbx-slstr-pdu-stitching/src/main/java/org/esa/s3tbx/slstr/pdu/stitching/NcFileStitcher.java"}, "focal_method": {"identifier": "setGlobalAttributes", "parameters": "(SlstrNFileWritable nFileWriteable, List<Attribute>[] globalAttributeLists,\n                                    String parentDirectoryName, Date creationDate)", "modifiers": "static", "return": "void", "body": "static void setGlobalAttributes(SlstrNFileWritable nFileWriteable, List<Attribute>[] globalAttributeLists,\n                                    String parentDirectoryName, Date creationDate) throws IOException {\n        final DateFormatConverter globalAttributesDateFormatConverter =\n                new DateFormatConverter(new SimpleDateFormat(\"yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'\"));\n        List<String> namesOfAddedAttributes = new ArrayList<>();\n        for (int i = 0; i < globalAttributeLists.length; i++) {\n            List<Attribute> globalAttributes = globalAttributeLists[i];\n            for (Attribute globalAttribute : globalAttributes) {\n                final String globalAttributeName = globalAttribute.getFullName();\n                if (!namesOfAddedAttributes.contains(globalAttributeName)) {\n                    if (globalAttributeName.equals(PRODUCT_NAME)) {\n                        nFileWriteable.addGlobalAttribute(PRODUCT_NAME, parentDirectoryName);\n                    } else if (globalAttributeName.equals(CREATION_TIME)) {\n                        nFileWriteable.addGlobalAttribute(CREATION_TIME,\n                                                          globalAttributesDateFormatConverter.format(creationDate));\n                    } else if (globalAttribute.isArray()) {\n                        final Array values = globalAttribute.getValues();\n                        for (int j = i; j < globalAttributeLists.length; j++) {\n                            final Attribute otherGlobalAttribute =\n                                    getAttributeFromList(globalAttributeName, globalAttributeLists[j]);\n                            if (otherGlobalAttribute != null && values != otherGlobalAttribute.getValues() && !otherGlobalAttribute.getFullName().equals(globalAttribute.getFullName())) {\n                                nFileWriteable.addGlobalAttribute(globalAttributeName + \"_\" + j,\n                                                                  otherGlobalAttribute.getValues().toString());\n                                break;\n                            }\n                        }\n                        nFileWriteable.addGlobalAttribute(globalAttributeName, values.toString());\n                    } else if (globalAttribute.getDataType().isNumeric()) {\n                        final Number value = globalAttribute.getNumericValue();\n                        for (int j = i; j < globalAttributeLists.length; j++) {\n                            final Attribute otherGlobalAttribute =\n                                    getAttributeFromList(globalAttributeName, globalAttributeLists[j]);\n                            if (otherGlobalAttribute != null && !value.equals(otherGlobalAttribute.getNumericValue())) {\n                                nFileWriteable.addGlobalAttribute(globalAttributeName + \"_\" + j,\n                                                                  otherGlobalAttribute.getNumericValue());\n                                break;\n                            }\n                        }\n                        nFileWriteable.addGlobalAttribute(globalAttributeName, value.toString());\n                    } else {\n                        final String value = globalAttribute.getStringValue();\n                        for (int j = i; j < globalAttributeLists.length; j++) {\n                            final Attribute otherGlobalAttribute =\n                                    getAttributeFromList(globalAttributeName, globalAttributeLists[j]);\n                            if ((otherGlobalAttribute != null && otherGlobalAttribute.getStringValue() != null)) {\n                                if (!value.equals(otherGlobalAttribute.getStringValue())) {\n                                    nFileWriteable.addGlobalAttribute(globalAttributeName + \"_\" + j,\n                                            otherGlobalAttribute.getStringValue());\n                                    break;\n\n                                }\n                            }\n                        }\n                        if (value != null) {\n                            nFileWriteable.addGlobalAttribute(globalAttributeName, value);\n                        }\n                    }\n                }\n                namesOfAddedAttributes.add(globalAttributeName);\n            }\n        }\n    }", "signature": "void setGlobalAttributes(SlstrNFileWritable nFileWriteable, List<Attribute>[] globalAttributeLists,\n                                    String parentDirectoryName, Date creationDate)", "full_signature": "static void setGlobalAttributes(SlstrNFileWritable nFileWriteable, List<Attribute>[] globalAttributeLists,\n                                    String parentDirectoryName, Date creationDate)", "class_method_signature": "NcFileStitcher.setGlobalAttributes(SlstrNFileWritable nFileWriteable, List<Attribute>[] globalAttributeLists,\n                                    String parentDirectoryName, Date creationDate)", "testcase": false, "constructor": false, "invocations": ["getFullName", "contains", "equals", "addGlobalAttribute", "equals", "addGlobalAttribute", "format", "isArray", "getValues", "getAttributeFromList", "getValues", "equals", "getFullName", "getFullName", "addGlobalAttribute", "toString", "getValues", "addGlobalAttribute", "toString", "isNumeric", "getDataType", "getNumericValue", "getAttributeFromList", "equals", "getNumericValue", "addGlobalAttribute", "getNumericValue", "addGlobalAttribute", "toString", "getStringValue", "getAttributeFromList", "getStringValue", "equals", "getStringValue", "addGlobalAttribute", "getStringValue", "addGlobalAttribute", "add"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}