{"test_class": {"identifier": "TestDefaultHardwareClock", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DefaultHardwareClock.Env mockEnv;", "modifier": "private", "type": "DefaultHardwareClock.Env", "declarator": "mockEnv", "var_name": "mockEnv"}, {"original_string": "private DefaultHardwareClock impl;", "modifier": "private", "type": "DefaultHardwareClock", "declarator": "impl", "var_name": "impl"}, {"original_string": "private Random random;", "modifier": "private", "type": "Random", "declarator": "random", "var_name": "random"}], "file": "jrugged-core/src/test/java/org/fishwife/jrugged/clocks/TestDefaultHardwareClock.java"}, "test_case": {"identifier": "canRetrieveClockReadingInterval", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void canRetrieveClockReadingInterval() {\n        impl = new DefaultHardwareClock();\n        assertTrue(impl.getNanoTime() instanceof DiscreteInterval);\n    }", "signature": "void canRetrieveClockReadingInterval()", "full_signature": "@Test public void canRetrieveClockReadingInterval()", "class_method_signature": "TestDefaultHardwareClock.canRetrieveClockReadingInterval()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "getNanoTime"]}, "focal_class": {"identifier": "DefaultHardwareClock", "superclass": "", "interfaces": "implements HardwareClock", "fields": [{"original_string": "private static long DEFAULT_PERIOD_MILLIS = 100 * 1000L;", "modifier": "private static", "type": "long", "declarator": "DEFAULT_PERIOD_MILLIS = 100 * 1000L", "var_name": "DEFAULT_PERIOD_MILLIS"}, {"original_string": "private long periodMillis = DEFAULT_PERIOD_MILLIS;", "modifier": "private", "type": "long", "declarator": "periodMillis = DEFAULT_PERIOD_MILLIS", "var_name": "periodMillis"}, {"original_string": "private static int DEFAULT_NUM_SAMPLES = 100;", "modifier": "private static", "type": "int", "declarator": "DEFAULT_NUM_SAMPLES = 100", "var_name": "DEFAULT_NUM_SAMPLES"}, {"original_string": "private static long MIN_CLOCK_TIME = 1000000000L * 3600 * 24 * 365;", "modifier": "private static", "type": "long", "declarator": "MIN_CLOCK_TIME = 1000000000L * 3600 * 24 * 365", "var_name": "MIN_CLOCK_TIME"}, {"original_string": "private AtomicLong lastSampleTime = new AtomicLong(0L);", "modifier": "private", "type": "AtomicLong", "declarator": "lastSampleTime = new AtomicLong(0L)", "var_name": "lastSampleTime"}, {"original_string": "private int sampleIndex = 0;", "modifier": "private", "type": "int", "declarator": "sampleIndex = 0", "var_name": "sampleIndex"}, {"original_string": "private long maxGranularity;", "modifier": "private", "type": "long", "declarator": "maxGranularity", "var_name": "maxGranularity"}, {"original_string": "private long[] samples;", "modifier": "private", "type": "long[]", "declarator": "samples", "var_name": "samples"}, {"original_string": "private Long offset;", "modifier": "private", "type": "Long", "declarator": "offset", "var_name": "offset"}, {"original_string": "private Env env;", "modifier": "private", "type": "Env", "declarator": "env", "var_name": "env"}], "methods": [{"identifier": "DefaultHardwareClock", "parameters": "()", "modifiers": "public", "return": "", "signature": " DefaultHardwareClock()", "full_signature": "public  DefaultHardwareClock()", "class_method_signature": "DefaultHardwareClock.DefaultHardwareClock()", "testcase": false, "constructor": true}, {"identifier": "DefaultHardwareClock", "parameters": "(Env env)", "modifiers": "public", "return": "", "signature": " DefaultHardwareClock(Env env)", "full_signature": "public  DefaultHardwareClock(Env env)", "class_method_signature": "DefaultHardwareClock.DefaultHardwareClock(Env env)", "testcase": false, "constructor": true}, {"identifier": "DefaultHardwareClock", "parameters": "(Env env, int numSamples, long periodMillis)", "modifiers": "public", "return": "", "signature": " DefaultHardwareClock(Env env, int numSamples, long periodMillis)", "full_signature": "public  DefaultHardwareClock(Env env, int numSamples, long periodMillis)", "class_method_signature": "DefaultHardwareClock.DefaultHardwareClock(Env env, int numSamples, long periodMillis)", "testcase": false, "constructor": true}, {"identifier": "elapsedTime", "parameters": "(long start, long end)", "modifiers": "", "return": "long", "signature": "long elapsedTime(long start, long end)", "full_signature": " long elapsedTime(long start, long end)", "class_method_signature": "DefaultHardwareClock.elapsedTime(long start, long end)", "testcase": false, "constructor": false}, {"identifier": "sampleGranularity", "parameters": "()", "modifiers": "", "return": "long", "signature": "long sampleGranularity()", "full_signature": " long sampleGranularity()", "class_method_signature": "DefaultHardwareClock.sampleGranularity()", "testcase": false, "constructor": false}, {"identifier": "getGranularity", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getGranularity()", "full_signature": "public long getGranularity()", "class_method_signature": "DefaultHardwareClock.getGranularity()", "testcase": false, "constructor": false}, {"identifier": "getNanoTime", "parameters": "()", "modifiers": "public", "return": "DiscreteInterval", "signature": "DiscreteInterval getNanoTime()", "full_signature": "public DiscreteInterval getNanoTime()", "class_method_signature": "DefaultHardwareClock.getNanoTime()", "testcase": false, "constructor": false}, {"identifier": "getOffset", "parameters": "()", "modifiers": "private", "return": "long", "signature": "long getOffset()", "full_signature": "private long getOffset()", "class_method_signature": "DefaultHardwareClock.getOffset()", "testcase": false, "constructor": false}], "file": "jrugged-core/src/main/java/org/fishwife/jrugged/clocks/DefaultHardwareClock.java"}, "focal_method": {"identifier": "getNanoTime", "parameters": "()", "modifiers": "public", "return": "DiscreteInterval", "body": "public DiscreteInterval getNanoTime() {\n        long granularity = getGranularity();\n        long err = granularity / 2;\n        if (granularity % 2 == 1) err += 1;\n        long now = env.nanoTime() + getOffset();\n        return new DiscreteInterval(now - err, now + err);\n    }", "signature": "DiscreteInterval getNanoTime()", "full_signature": "public DiscreteInterval getNanoTime()", "class_method_signature": "DefaultHardwareClock.getNanoTime()", "testcase": false, "constructor": false, "invocations": ["getGranularity", "nanoTime", "getOffset"]}, "repository": {"repo_id": 6602723, "url": "https://github.com/Comcast/jrugged", "language": "Java", "is_fork": false, "fork_count": 90, "stargazer_count": 236, "size": 1302, "license": "licensed"}}