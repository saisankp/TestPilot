{"test_class": {"identifier": "CommandTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(CommandTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CommandTest.class)", "var_name": "logger"}], "file": "karate-core/src/test/java/com/intuit/karate/shell/CommandTest.java"}, "test_case": {"identifier": "testCommandReturn", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCommandReturn() {\n        String cmd = FileUtils.isOsWindows() ? \"cmd /c dir\" : \"ls\";\n        String result = Command.execLine(new File(\"target\"), cmd);\n        assertTrue(result.contains(\"karate\"));\n    }", "signature": "void testCommandReturn()", "full_signature": "@Test public void testCommandReturn()", "class_method_signature": "CommandTest.testCommandReturn()", "testcase": true, "constructor": false, "invocations": ["isOsWindows", "execLine", "assertTrue", "contains"]}, "focal_class": {"identifier": "Command", "superclass": "extends Thread", "interfaces": "", "fields": [{"original_string": "protected static final org.slf4j.Logger LOGGER = LoggerFactory.getLogger(Command.class);", "modifier": "protected static final", "type": "org.slf4j.Logger", "declarator": "LOGGER = LoggerFactory.getLogger(Command.class)", "var_name": "LOGGER"}, {"original_string": "private final boolean useLineFeed;", "modifier": "private final", "type": "boolean", "declarator": "useLineFeed", "var_name": "useLineFeed"}, {"original_string": "private final File workingDir;", "modifier": "private final", "type": "File", "declarator": "workingDir", "var_name": "workingDir"}, {"original_string": "private final String uniqueName;", "modifier": "private final", "type": "String", "declarator": "uniqueName", "var_name": "uniqueName"}, {"original_string": "private final Logger logger;", "modifier": "private final", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "private final String[] args;", "modifier": "private final", "type": "String[]", "declarator": "args", "var_name": "args"}, {"original_string": "private final List argList;", "modifier": "private final", "type": "List", "declarator": "argList", "var_name": "argList"}, {"original_string": "private final boolean sharedAppender;", "modifier": "private final", "type": "boolean", "declarator": "sharedAppender", "var_name": "sharedAppender"}, {"original_string": "private final LogAppender appender;", "modifier": "private final", "type": "LogAppender", "declarator": "appender", "var_name": "appender"}, {"original_string": "private Map<String, String> environment;", "modifier": "private", "type": "Map<String, String>", "declarator": "environment", "var_name": "environment"}, {"original_string": "private Consumer<String> listener;", "modifier": "private", "type": "Consumer<String>", "declarator": "listener", "var_name": "listener"}, {"original_string": "private Consumer<String> errorListener;", "modifier": "private", "type": "Consumer<String>", "declarator": "errorListener", "var_name": "errorListener"}, {"original_string": "private boolean redirectErrorStream = true;", "modifier": "private", "type": "boolean", "declarator": "redirectErrorStream = true", "var_name": "redirectErrorStream"}, {"original_string": "private Console sysOut;", "modifier": "private", "type": "Console", "declarator": "sysOut", "var_name": "sysOut"}, {"original_string": "private Console sysErr;", "modifier": "private", "type": "Console", "declarator": "sysErr", "var_name": "sysErr"}, {"original_string": "private Process process;", "modifier": "private", "type": "Process", "declarator": "process", "var_name": "process"}, {"original_string": "private int exitCode = -1;", "modifier": "private", "type": "int", "declarator": "exitCode = -1", "var_name": "exitCode"}, {"original_string": "private Exception failureReason;", "modifier": "private", "type": "Exception", "declarator": "failureReason", "var_name": "failureReason"}, {"original_string": "private static final Set<Integer> PORTS_IN_USE = ConcurrentHashMap.newKeySet();", "modifier": "private static final", "type": "Set<Integer>", "declarator": "PORTS_IN_USE = ConcurrentHashMap.newKeySet()", "var_name": "PORTS_IN_USE"}, {"original_string": "private static final int SLEEP_TIME = 2000;", "modifier": "private static final", "type": "int", "declarator": "SLEEP_TIME = 2000", "var_name": "SLEEP_TIME"}, {"original_string": "private static final int POLL_ATTEMPTS_MAX = 30;", "modifier": "private static final", "type": "int", "declarator": "POLL_ATTEMPTS_MAX = 30", "var_name": "POLL_ATTEMPTS_MAX"}], "methods": [{"identifier": "isFailed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isFailed()", "full_signature": "public boolean isFailed()", "class_method_signature": "Command.isFailed()", "testcase": false, "constructor": false}, {"identifier": "getFailureReason", "parameters": "()", "modifiers": "public", "return": "Exception", "signature": "Exception getFailureReason()", "full_signature": "public Exception getFailureReason()", "class_method_signature": "Command.getFailureReason()", "testcase": false, "constructor": false}, {"identifier": "setEnvironment", "parameters": "(Map<String, String> environment)", "modifiers": "public", "return": "void", "signature": "void setEnvironment(Map<String, String> environment)", "full_signature": "public void setEnvironment(Map<String, String> environment)", "class_method_signature": "Command.setEnvironment(Map<String, String> environment)", "testcase": false, "constructor": false}, {"identifier": "setListener", "parameters": "(Consumer<String> listener)", "modifiers": "public", "return": "void", "signature": "void setListener(Consumer<String> listener)", "full_signature": "public void setListener(Consumer<String> listener)", "class_method_signature": "Command.setListener(Consumer<String> listener)", "testcase": false, "constructor": false}, {"identifier": "setErrorListener", "parameters": "(Consumer<String> errorListener)", "modifiers": "public", "return": "void", "signature": "void setErrorListener(Consumer<String> errorListener)", "full_signature": "public void setErrorListener(Consumer<String> errorListener)", "class_method_signature": "Command.setErrorListener(Consumer<String> errorListener)", "testcase": false, "constructor": false}, {"identifier": "setRedirectErrorStream", "parameters": "(boolean redirectErrorStream)", "modifiers": "public", "return": "void", "signature": "void setRedirectErrorStream(boolean redirectErrorStream)", "full_signature": "public void setRedirectErrorStream(boolean redirectErrorStream)", "class_method_signature": "Command.setRedirectErrorStream(boolean redirectErrorStream)", "testcase": false, "constructor": false}, {"identifier": "getSysOut", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSysOut()", "full_signature": "public String getSysOut()", "class_method_signature": "Command.getSysOut()", "testcase": false, "constructor": false}, {"identifier": "getSysErr", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSysErr()", "full_signature": "public String getSysErr()", "class_method_signature": "Command.getSysErr()", "testcase": false, "constructor": false}, {"identifier": "exec", "parameters": "(boolean useLineFeed, File workingDir, String... args)", "modifiers": "public static", "return": "String", "signature": "String exec(boolean useLineFeed, File workingDir, String... args)", "full_signature": "public static String exec(boolean useLineFeed, File workingDir, String... args)", "class_method_signature": "Command.exec(boolean useLineFeed, File workingDir, String... args)", "testcase": false, "constructor": false}, {"identifier": "tokenize", "parameters": "(String command)", "modifiers": "public static", "return": "String[]", "signature": "String[] tokenize(String command)", "full_signature": "public static String[] tokenize(String command)", "class_method_signature": "Command.tokenize(String command)", "testcase": false, "constructor": false}, {"identifier": "execLine", "parameters": "(File workingDir, String command)", "modifiers": "public static", "return": "String", "signature": "String execLine(File workingDir, String command)", "full_signature": "public static String execLine(File workingDir, String command)", "class_method_signature": "Command.execLine(File workingDir, String command)", "testcase": false, "constructor": false}, {"identifier": "getBuildDir", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getBuildDir()", "full_signature": "public static String getBuildDir()", "class_method_signature": "Command.getBuildDir()", "testcase": false, "constructor": false}, {"identifier": "getFreePort", "parameters": "(int preferred)", "modifiers": "public static synchronized", "return": "int", "signature": "int getFreePort(int preferred)", "full_signature": "public static synchronized int getFreePort(int preferred)", "class_method_signature": "Command.getFreePort(int preferred)", "testcase": false, "constructor": false}, {"identifier": "sleep", "parameters": "(int millis)", "modifiers": "private static", "return": "void", "signature": "void sleep(int millis)", "full_signature": "private static void sleep(int millis)", "class_method_signature": "Command.sleep(int millis)", "testcase": false, "constructor": false}, {"identifier": "waitForPort", "parameters": "(String host, int port)", "modifiers": "public static", "return": "boolean", "signature": "boolean waitForPort(String host, int port)", "full_signature": "public static boolean waitForPort(String host, int port)", "class_method_signature": "Command.waitForPort(String host, int port)", "testcase": false, "constructor": false}, {"identifier": "waitForHttp", "parameters": "(String url)", "modifiers": "public static", "return": "boolean", "signature": "boolean waitForHttp(String url)", "full_signature": "public static boolean waitForHttp(String url)", "class_method_signature": "Command.waitForHttp(String url)", "testcase": false, "constructor": false}, {"identifier": "waitForSocket", "parameters": "(int port)", "modifiers": "public static", "return": "boolean", "signature": "boolean waitForSocket(int port)", "full_signature": "public static boolean waitForSocket(int port)", "class_method_signature": "Command.waitForSocket(int port)", "testcase": false, "constructor": false}, {"identifier": "Command", "parameters": "(String... args)", "modifiers": "public", "return": "", "signature": " Command(String... args)", "full_signature": "public  Command(String... args)", "class_method_signature": "Command.Command(String... args)", "testcase": false, "constructor": true}, {"identifier": "Command", "parameters": "(boolean useLineFeed, File workingDir, String... args)", "modifiers": "public", "return": "", "signature": " Command(boolean useLineFeed, File workingDir, String... args)", "full_signature": "public  Command(boolean useLineFeed, File workingDir, String... args)", "class_method_signature": "Command.Command(boolean useLineFeed, File workingDir, String... args)", "testcase": false, "constructor": true}, {"identifier": "Command", "parameters": "(boolean useLineFeed, Logger logger, String uniqueName, String logFile, File workingDir, String... args)", "modifiers": "public", "return": "", "signature": " Command(boolean useLineFeed, Logger logger, String uniqueName, String logFile, File workingDir, String... args)", "full_signature": "public  Command(boolean useLineFeed, Logger logger, String uniqueName, String logFile, File workingDir, String... args)", "class_method_signature": "Command.Command(boolean useLineFeed, Logger logger, String uniqueName, String logFile, File workingDir, String... args)", "testcase": false, "constructor": true}, {"identifier": "getEnvironment", "parameters": "()", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> getEnvironment()", "full_signature": "public Map<String, String> getEnvironment()", "class_method_signature": "Command.getEnvironment()", "testcase": false, "constructor": false}, {"identifier": "getWorkingDir", "parameters": "()", "modifiers": "public", "return": "File", "signature": "File getWorkingDir()", "full_signature": "public File getWorkingDir()", "class_method_signature": "Command.getWorkingDir()", "testcase": false, "constructor": false}, {"identifier": "getArgList", "parameters": "()", "modifiers": "public", "return": "List", "signature": "List getArgList()", "full_signature": "public List getArgList()", "class_method_signature": "Command.getArgList()", "testcase": false, "constructor": false}, {"identifier": "getLogger", "parameters": "()", "modifiers": "public", "return": "Logger", "signature": "Logger getLogger()", "full_signature": "public Logger getLogger()", "class_method_signature": "Command.getLogger()", "testcase": false, "constructor": false}, {"identifier": "getAppender", "parameters": "()", "modifiers": "public", "return": "LogAppender", "signature": "LogAppender getAppender()", "full_signature": "public LogAppender getAppender()", "class_method_signature": "Command.getAppender()", "testcase": false, "constructor": false}, {"identifier": "getUniqueName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUniqueName()", "full_signature": "public String getUniqueName()", "class_method_signature": "Command.getUniqueName()", "testcase": false, "constructor": false}, {"identifier": "getExitCode", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getExitCode()", "full_signature": "public int getExitCode()", "class_method_signature": "Command.getExitCode()", "testcase": false, "constructor": false}, {"identifier": "waitSync", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int waitSync()", "full_signature": "public int waitSync()", "class_method_signature": "Command.waitSync()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(boolean force)", "modifiers": "public", "return": "void", "signature": "void close(boolean force)", "full_signature": "public void close(boolean force)", "class_method_signature": "Command.close(boolean force)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "Command.run()", "testcase": false, "constructor": false}], "file": "karate-core/src/main/java/com/intuit/karate/shell/Command.java"}, "focal_method": {"identifier": "execLine", "parameters": "(File workingDir, String command)", "modifiers": "public static", "return": "String", "body": "public static String execLine(File workingDir, String command) {\n        return exec(false, workingDir, tokenize(command));\n    }", "signature": "String execLine(File workingDir, String command)", "full_signature": "public static String execLine(File workingDir, String command)", "class_method_signature": "Command.execLine(File workingDir, String command)", "testcase": false, "constructor": false, "invocations": ["exec", "tokenize"]}, "repository": {"repo_id": 81226206, "url": "https://github.com/intuit/karate", "stars": 2712, "created": "2/7/2017 3:59:17 PM +00:00", "updates": "2020-01-27T21:00:57+00:00", "fork": "False", "license": "licensed"}}