{"test_class": {"identifier": "AutomationClientResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public MockitoRule mockito = MockitoJUnit.rule();", "modifier": "@Rule public", "type": "MockitoRule", "declarator": "mockito = MockitoJUnit.rule()", "var_name": "mockito"}, {"original_string": "@Mock ClientDAO clientDAO;", "modifier": "@Mock", "type": "ClientDAO", "declarator": "clientDAO", "var_name": "clientDAO"}, {"original_string": "@Mock AclDAO aclDAO;", "modifier": "@Mock", "type": "AclDAO", "declarator": "aclDAO", "var_name": "aclDAO"}, {"original_string": "ApiDate now = ApiDate.now();", "modifier": "", "type": "ApiDate", "declarator": "now = ApiDate.now()", "var_name": "now"}, {"original_string": "AutomationClient automation = AutomationClient.of(\n      new Client(1, \"automation\", \"Automation client\", null, now, \"test\", now, \"test\", null, null, true,\n          true));", "modifier": "", "type": "AutomationClient", "declarator": "automation = AutomationClient.of(\n      new Client(1, \"automation\", \"Automation client\", null, now, \"test\", now, \"test\", null, null, true,\n          true))", "var_name": "automation"}, {"original_string": "AuditLog auditLog = new SimpleLogger();", "modifier": "", "type": "AuditLog", "declarator": "auditLog = new SimpleLogger()", "var_name": "auditLog"}, {"original_string": "AutomationClientResource resource;", "modifier": "", "type": "AutomationClientResource", "declarator": "resource", "var_name": "resource"}], "file": "server/src/test/java/keywhiz/service/resources/automation/AutomationClientResourceTest.java"}, "test_case": {"identifier": "createNewClient", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void createNewClient() {\n    Client client = new Client(543L, \"client\", \"2nd client\", null, now, \"test\", now, \"test\", null, null,\n        true, false);\n\n    CreateClientRequest request = new CreateClientRequest(\"client\");\n\n    when(clientDAO.getClientByName(\"client\")).thenReturn(Optional.empty());\n    when(clientDAO.createClient(\"client\", automation.getName(), \"\", null)).thenReturn(543L);\n    when(clientDAO.getClientById(543L)).thenReturn(Optional.of(client));\n    when(aclDAO.getGroupsFor(client)).thenReturn(ImmutableSet.of());\n\n    ClientDetailResponse response = ClientDetailResponse.fromClient(client, ImmutableList.of(),\n        ImmutableList.of());\n    ClientDetailResponse response1 = resource.createClient(automation, request);\n\n    assertThat(response.name).isEqualTo(response1.name);\n  }", "signature": "void createNewClient()", "full_signature": "@Test public void createNewClient()", "class_method_signature": "AutomationClientResourceTest.createNewClient()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getClientByName", "empty", "thenReturn", "when", "createClient", "getName", "thenReturn", "when", "getClientById", "of", "thenReturn", "when", "getGroupsFor", "of", "fromClient", "of", "of", "createClient", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "AutomationClientResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ClientsResource.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ClientsResource.class)", "var_name": "logger"}, {"original_string": "private final ClientDAO clientDAO;", "modifier": "private final", "type": "ClientDAO", "declarator": "clientDAO", "var_name": "clientDAO"}, {"original_string": "private final AclDAO aclDAO;", "modifier": "private final", "type": "AclDAO", "declarator": "aclDAO", "var_name": "aclDAO"}, {"original_string": "private final AuditLog auditLog;", "modifier": "private final", "type": "AuditLog", "declarator": "auditLog", "var_name": "auditLog"}], "methods": [{"identifier": "AutomationClientResource", "parameters": "(ClientDAOFactory clientDAOFactory, AclDAOFactory aclDAOFactory,\n      AuditLog auditLog)", "modifiers": "@Inject public", "return": "", "signature": " AutomationClientResource(ClientDAOFactory clientDAOFactory, AclDAOFactory aclDAOFactory,\n      AuditLog auditLog)", "full_signature": "@Inject public  AutomationClientResource(ClientDAOFactory clientDAOFactory, AclDAOFactory aclDAOFactory,\n      AuditLog auditLog)", "class_method_signature": "AutomationClientResource.AutomationClientResource(ClientDAOFactory clientDAOFactory, AclDAOFactory aclDAOFactory,\n      AuditLog auditLog)", "testcase": false, "constructor": true}, {"identifier": "AutomationClientResource", "parameters": "(ClientDAO clientDAO, AclDAO aclDAO,\n      AuditLog auditLog)", "modifiers": "@VisibleForTesting", "return": "", "signature": " AutomationClientResource(ClientDAO clientDAO, AclDAO aclDAO,\n      AuditLog auditLog)", "full_signature": "@VisibleForTesting  AutomationClientResource(ClientDAO clientDAO, AclDAO aclDAO,\n      AuditLog auditLog)", "class_method_signature": "AutomationClientResource.AutomationClientResource(ClientDAO clientDAO, AclDAO aclDAO,\n      AuditLog auditLog)", "testcase": false, "constructor": true}, {"identifier": "findClientById", "parameters": "(\n      @Auth AutomationClient automationClient,\n      @PathParam(\"clientId\") LongParam clientId)", "modifiers": "@Timed @ExceptionMetered @GET @Path(\"{clientId}\") public", "return": "Response", "signature": "Response findClientById(\n      @Auth AutomationClient automationClient,\n      @PathParam(\"clientId\") LongParam clientId)", "full_signature": "@Timed @ExceptionMetered @GET @Path(\"{clientId}\") public Response findClientById(\n      @Auth AutomationClient automationClient,\n      @PathParam(\"clientId\") LongParam clientId)", "class_method_signature": "AutomationClientResource.findClientById(\n      @Auth AutomationClient automationClient,\n      @PathParam(\"clientId\") LongParam clientId)", "testcase": false, "constructor": false}, {"identifier": "findClient", "parameters": "(\n      @Auth AutomationClient automationClient,\n      @QueryParam(\"name\") Optional<String> name)", "modifiers": "@Timed @ExceptionMetered @GET public", "return": "Response", "signature": "Response findClient(\n      @Auth AutomationClient automationClient,\n      @QueryParam(\"name\") Optional<String> name)", "full_signature": "@Timed @ExceptionMetered @GET public Response findClient(\n      @Auth AutomationClient automationClient,\n      @QueryParam(\"name\") Optional<String> name)", "class_method_signature": "AutomationClientResource.findClient(\n      @Auth AutomationClient automationClient,\n      @QueryParam(\"name\") Optional<String> name)", "testcase": false, "constructor": false}, {"identifier": "createClient", "parameters": "(\n      @Auth AutomationClient automationClient,\n      @Valid CreateClientRequest clientRequest)", "modifiers": "@Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) public", "return": "ClientDetailResponse", "signature": "ClientDetailResponse createClient(\n      @Auth AutomationClient automationClient,\n      @Valid CreateClientRequest clientRequest)", "full_signature": "@Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) public ClientDetailResponse createClient(\n      @Auth AutomationClient automationClient,\n      @Valid CreateClientRequest clientRequest)", "class_method_signature": "AutomationClientResource.createClient(\n      @Auth AutomationClient automationClient,\n      @Valid CreateClientRequest clientRequest)", "testcase": false, "constructor": false}, {"identifier": "deleteClient", "parameters": "(@Auth AutomationClient automationClient,\n      @PathParam(\"clientId\") LongParam clientId)", "modifiers": "@Timed @ExceptionMetered @DELETE @Path(\"{clientId}\") public", "return": "Response", "signature": "Response deleteClient(@Auth AutomationClient automationClient,\n      @PathParam(\"clientId\") LongParam clientId)", "full_signature": "@Timed @ExceptionMetered @DELETE @Path(\"{clientId}\") public Response deleteClient(@Auth AutomationClient automationClient,\n      @PathParam(\"clientId\") LongParam clientId)", "class_method_signature": "AutomationClientResource.deleteClient(@Auth AutomationClient automationClient,\n      @PathParam(\"clientId\") LongParam clientId)", "testcase": false, "constructor": false}], "file": "server/src/main/java/keywhiz/service/resources/automation/AutomationClientResource.java"}, "focal_method": {"identifier": "createClient", "parameters": "(\n      @Auth AutomationClient automationClient,\n      @Valid CreateClientRequest clientRequest)", "modifiers": "@Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) public", "return": "ClientDetailResponse", "body": "@Timed @ExceptionMetered\n  @POST\n  @Consumes(APPLICATION_JSON)\n  public ClientDetailResponse createClient(\n      @Auth AutomationClient automationClient,\n      @Valid CreateClientRequest clientRequest) {\n\n    Optional<Client> client = clientDAO.getClientByName(clientRequest.name);\n    if (client.isPresent()) {\n      logger.info(\"Automation ({}) - Client {} already exists\", automationClient.getName(),\n          clientRequest.name);\n      throw new ConflictException(\"Client name already exists.\");\n    }\n\n    long id = clientDAO.createClient(clientRequest.name, automationClient.getName(), \"\", null);\n    client = clientDAO.getClientById(id);\n\n    if (client.isPresent()) {\n      Map<String, String> extraInfo = new HashMap<>();\n      extraInfo.put(\"deprecated\", \"true\");\n      auditLog.recordEvent(\n          new Event(Instant.now(), EventTag.CLIENT_CREATE, automationClient.getName(),\n              client.get().getName(), extraInfo));\n    }\n\n    return ClientDetailResponse.fromClient(client.get(), ImmutableList.of(), ImmutableList.of());\n  }", "signature": "ClientDetailResponse createClient(\n      @Auth AutomationClient automationClient,\n      @Valid CreateClientRequest clientRequest)", "full_signature": "@Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) public ClientDetailResponse createClient(\n      @Auth AutomationClient automationClient,\n      @Valid CreateClientRequest clientRequest)", "class_method_signature": "AutomationClientResource.createClient(\n      @Auth AutomationClient automationClient,\n      @Valid CreateClientRequest clientRequest)", "testcase": false, "constructor": false, "invocations": ["getClientByName", "isPresent", "info", "getName", "createClient", "getName", "getClientById", "isPresent", "put", "recordEvent", "now", "getName", "getName", "get", "fromClient", "get", "of", "of"]}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}