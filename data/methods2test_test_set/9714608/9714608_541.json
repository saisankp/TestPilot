{"test_class": {"identifier": "XMLGISElementUtilTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [{"original_string": "private final static URL url = Resources.getResource(XMLGISElementUtilTest.class, \"test.xml\");", "modifier": "private final static", "type": "URL", "declarator": "url = Resources.getResource(XMLGISElementUtilTest.class, \"test.xml\")", "var_name": "url"}, {"original_string": "private final static URL url2 = Resources.getResource(XMLGISElementUtilTest.class, \"test2.xml\");", "modifier": "private final static", "type": "URL", "declarator": "url2 = Resources.getResource(XMLGISElementUtilTest.class, \"test2.xml\")", "var_name": "url2"}, {"original_string": "private Document document;", "modifier": "private", "type": "Document", "declarator": "document", "var_name": "document"}], "file": "advanced/gis/gisinputoutput/src/test/java/org/arakhne/afc/gis/io/xml/XMLGISElementUtilTest.java"}, "test_case": {"identifier": "writeGISElementAttributesElementGISElementXMLBuilderXMLResources", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void writeGISElementAttributesElementGISElementXMLBuilderXMLResources() throws Exception {\n\t\tPathBuilder pathBuilder = new SimplePathBuilder();\n\t\tXMLResources res = new XMLResources(pathBuilder);\n\t\tMapPoint point = new MapPoint(3, 4);\n\t\tpoint.setName(\"name1\"); //$NON-NLS-1$\n\t\tpoint.setAttribute(\"attr1\", \"Text\"); //$NON-NLS-1$ //$NON-NLS-2$\n\n\t\tfinal String source = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"no\\\"?><root><a><b id=\\\"v\\\"/></a></root>\"; //$NON-NLS-1$\n\t\tfinal Document doc;\n\t\ttry (ByteArrayInputStream reader = new ByteArrayInputStream(source.getBytes())) {\n\t\t\tdoc = XMLUtil.readXML(reader);\n\t\t}\n\n\t\tXMLBuilder xmlBuilder = new XMLBuilder() {\n\t\t\t@Override\n\t\t\tpublic Document getDocument() throws DOMException {\n\t\t\t\treturn doc;\n\t\t\t}\n\t\t};\n\n\t\tXMLGISElementUtil.writeGISElementAttributes(doc.getDocumentElement(), point, xmlBuilder, res);\n\t\t\n\t\tString actual;\n\t\ttry (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {\n\t\t\tXMLUtil.writeXML(doc, baos);\n\t\t\tbaos.flush();\n\t\t\tactual = new String(baos.toByteArray());\n\t\t}\n\t\tfinal String id = point.getUUID().toString();\n\t\tfinal String expected = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"no\\\"?>\" //$NON-NLS-1$\n\t\t\t\t+ \"<root geoId=\\\"39e072ec9ca6460ee679103fd10d53dc#3;4;3;4\\\" \" //$NON-NLS-1$\n\t\t\t\t+ \"id=\\\"\" + id + \"\\\" name=\\\"name1\\\">\" //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\t+ \"<a><b id=\\\"v\\\"/></a>\" //$NON-NLS-1$\n\t\t\t\t+ \"<attributes><attribute name=\\\"attr1\\\" type=\\\"STRING\\\" value=\\\"Text\\\"/></attributes>\" //$NON-NLS-1$\n\t\t\t\t+ \"</root>\"; //$NON-NLS-1$\n\t\tassertEquals(expected, actual);\n\t}", "signature": "void writeGISElementAttributesElementGISElementXMLBuilderXMLResources()", "full_signature": "@Test public void writeGISElementAttributesElementGISElementXMLBuilderXMLResources()", "class_method_signature": "XMLGISElementUtilTest.writeGISElementAttributesElementGISElementXMLBuilderXMLResources()", "testcase": true, "constructor": false, "invocations": ["setName", "setAttribute", "getBytes", "readXML", "writeGISElementAttributes", "getDocumentElement", "writeXML", "flush", "toByteArray", "toString", "getUUID", "assertEquals"]}, "focal_class": {"identifier": "XMLGISElementUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String NODE_CIRCLE = \"circle\";", "modifier": "public static final", "type": "String", "declarator": "NODE_CIRCLE = \"circle\"", "var_name": "NODE_CIRCLE"}, {"original_string": "public static final String NODE_ELEMENTS = \"elements\";", "modifier": "public static final", "type": "String", "declarator": "NODE_ELEMENTS = \"elements\"", "var_name": "NODE_ELEMENTS"}, {"original_string": "public static final String NODE_GROUP = \"group\";", "modifier": "public static final", "type": "String", "declarator": "NODE_GROUP = \"group\"", "var_name": "NODE_GROUP"}, {"original_string": "public static final String NODE_GROUPS = \"groups\";", "modifier": "public static final", "type": "String", "declarator": "NODE_GROUPS = \"groups\"", "var_name": "NODE_GROUPS"}, {"original_string": "public static final String NODE_MULTIPOINT = \"multipoint\";", "modifier": "public static final", "type": "String", "declarator": "NODE_MULTIPOINT = \"multipoint\"", "var_name": "NODE_MULTIPOINT"}, {"original_string": "public static final String NODE_POINT = \"point\";", "modifier": "public static final", "type": "String", "declarator": "NODE_POINT = \"point\"", "var_name": "NODE_POINT"}, {"original_string": "public static final String NODE_POINTS = \"points\";", "modifier": "public static final", "type": "String", "declarator": "NODE_POINTS = \"points\"", "var_name": "NODE_POINTS"}, {"original_string": "public static final String NODE_POLYGON = \"polygon\";", "modifier": "public static final", "type": "String", "declarator": "NODE_POLYGON = \"polygon\"", "var_name": "NODE_POLYGON"}, {"original_string": "public static final String NODE_POLYLINE = \"polyline\";", "modifier": "public static final", "type": "String", "declarator": "NODE_POLYLINE = \"polyline\"", "var_name": "NODE_POLYLINE"}, {"original_string": "public static final String ATTR_DOUBLEFRAME = \"doubleFrame\";", "modifier": "public static final", "type": "String", "declarator": "ATTR_DOUBLEFRAME = \"doubleFrame\"", "var_name": "ATTR_DOUBLEFRAME"}, {"original_string": "public static final String ATTR_FIRSTPOINTINDEX = \"firstPointIndex\";", "modifier": "public static final", "type": "String", "declarator": "ATTR_FIRSTPOINTINDEX = \"firstPointIndex\"", "var_name": "ATTR_FIRSTPOINTINDEX"}, {"original_string": "public static final String ATTR_LASTPOINTINDEX = \"lastPointIndex\";", "modifier": "public static final", "type": "String", "declarator": "ATTR_LASTPOINTINDEX = \"lastPointIndex\"", "var_name": "ATTR_LASTPOINTINDEX"}, {"original_string": "public static final String ATTR_RADIUS = \"radius\";", "modifier": "public static final", "type": "String", "declarator": "ATTR_RADIUS = \"radius\"", "var_name": "ATTR_RADIUS"}, {"original_string": "public static final String ATTR_SIZE = \"size\";", "modifier": "public static final", "type": "String", "declarator": "ATTR_SIZE = \"size\"", "var_name": "ATTR_SIZE"}, {"original_string": "public static final String ATTR_WIDE = \"wide\";", "modifier": "public static final", "type": "String", "declarator": "ATTR_WIDE = \"wide\"", "var_name": "ATTR_WIDE"}, {"original_string": "public static final String ATTR_WIDTH = \"width\";", "modifier": "public static final", "type": "String", "declarator": "ATTR_WIDTH = \"width\"", "var_name": "ATTR_WIDTH"}, {"original_string": "public static final String ATTR_X = \"x\";", "modifier": "public static final", "type": "String", "declarator": "ATTR_X = \"x\"", "var_name": "ATTR_X"}, {"original_string": "public static final String ATTR_Y = \"y\";", "modifier": "public static final", "type": "String", "declarator": "ATTR_Y = \"y\"", "var_name": "ATTR_Y"}], "methods": [{"identifier": "XMLGISElementUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " XMLGISElementUtil()", "full_signature": "private  XMLGISElementUtil()", "class_method_signature": "XMLGISElementUtil.XMLGISElementUtil()", "testcase": false, "constructor": true}, {"identifier": "writeMapElement", "parameters": "(MapElement primitive, XMLBuilder builder, XMLResources resources)", "modifiers": "public static", "return": "Element", "signature": "Element writeMapElement(MapElement primitive, XMLBuilder builder, XMLResources resources)", "full_signature": "public static Element writeMapElement(MapElement primitive, XMLBuilder builder, XMLResources resources)", "class_method_signature": "XMLGISElementUtil.writeMapElement(MapElement primitive, XMLBuilder builder, XMLResources resources)", "testcase": false, "constructor": false}, {"identifier": "writeMapElement", "parameters": "(MapElement primitive, String primitiveNodeName,\n\t\t\tXMLBuilder builder, XMLResources resources)", "modifiers": "@SuppressWarnings({\"checkstyle:cyclomaticcomplexity\", \"checkstyle:npathcomplexity\"}) public static", "return": "Element", "signature": "Element writeMapElement(MapElement primitive, String primitiveNodeName,\n\t\t\tXMLBuilder builder, XMLResources resources)", "full_signature": "@SuppressWarnings({\"checkstyle:cyclomaticcomplexity\", \"checkstyle:npathcomplexity\"}) public static Element writeMapElement(MapElement primitive, String primitiveNodeName,\n\t\t\tXMLBuilder builder, XMLResources resources)", "class_method_signature": "XMLGISElementUtil.writeMapElement(MapElement primitive, String primitiveNodeName,\n\t\t\tXMLBuilder builder, XMLResources resources)", "testcase": false, "constructor": false}, {"identifier": "readMapElement", "parameters": "(Element element, String elementNodeName,\n\t\t\tPathBuilder pathBuilder, XMLResources resources)", "modifiers": "public static", "return": "MapElement", "signature": "MapElement readMapElement(Element element, String elementNodeName,\n\t\t\tPathBuilder pathBuilder, XMLResources resources)", "full_signature": "public static MapElement readMapElement(Element element, String elementNodeName,\n\t\t\tPathBuilder pathBuilder, XMLResources resources)", "class_method_signature": "XMLGISElementUtil.readMapElement(Element element, String elementNodeName,\n\t\t\tPathBuilder pathBuilder, XMLResources resources)", "testcase": false, "constructor": false}, {"identifier": "readMapElement", "parameters": "(Element element, String elementNodeName,\n\t\t\tClass<T> type, PathBuilder pathBuilder, XMLResources resources)", "modifiers": "@SuppressWarnings({\"unchecked\", \"checkstyle:cyclomaticcomplexity\", \"checkstyle:npathcomplexity\"}) public static", "return": "T", "signature": "T readMapElement(Element element, String elementNodeName,\n\t\t\tClass<T> type, PathBuilder pathBuilder, XMLResources resources)", "full_signature": "@SuppressWarnings({\"unchecked\", \"checkstyle:cyclomaticcomplexity\", \"checkstyle:npathcomplexity\"}) public static T readMapElement(Element element, String elementNodeName,\n\t\t\tClass<T> type, PathBuilder pathBuilder, XMLResources resources)", "class_method_signature": "XMLGISElementUtil.readMapElement(Element element, String elementNodeName,\n\t\t\tClass<T> type, PathBuilder pathBuilder, XMLResources resources)", "testcase": false, "constructor": false}, {"identifier": "getDefaultMapElementNodeName", "parameters": "(Class<? extends MapElement> type)", "modifiers": "public static", "return": "String", "signature": "String getDefaultMapElementNodeName(Class<? extends MapElement> type)", "full_signature": "public static String getDefaultMapElementNodeName(Class<? extends MapElement> type)", "class_method_signature": "XMLGISElementUtil.getDefaultMapElementNodeName(Class<? extends MapElement> type)", "testcase": false, "constructor": false}, {"identifier": "readMapComposedElementPoints", "parameters": "(Node element, MapComposedElement mapElement)", "modifiers": "private static", "return": "void", "signature": "void readMapComposedElementPoints(Node element, MapComposedElement mapElement)", "full_signature": "private static void readMapComposedElementPoints(Node element, MapComposedElement mapElement)", "class_method_signature": "XMLGISElementUtil.readMapComposedElementPoints(Node element, MapComposedElement mapElement)", "testcase": false, "constructor": false}, {"identifier": "readPoints", "parameters": "(Node element)", "modifiers": "private static", "return": "Point2d[]", "signature": "Point2d[] readPoints(Node element)", "full_signature": "private static Point2d[] readPoints(Node element)", "class_method_signature": "XMLGISElementUtil.readPoints(Node element)", "testcase": false, "constructor": false}, {"identifier": "readGroups", "parameters": "(Node element, Point2d[] points, MapComposedElement mapElement)", "modifiers": "private static", "return": "void", "signature": "void readGroups(Node element, Point2d[] points, MapComposedElement mapElement)", "full_signature": "private static void readGroups(Node element, Point2d[] points, MapComposedElement mapElement)", "class_method_signature": "XMLGISElementUtil.readGroups(Node element, Point2d[] points, MapComposedElement mapElement)", "testcase": false, "constructor": false}, {"identifier": "writeGISElementContainer", "parameters": "(Element xmlNode, GISElementContainer<?> primitive,\n\t\t\tXMLBuilder builder, PathBuilder pathBuilder, XMLResources resources)", "modifiers": "public static", "return": "void", "signature": "void writeGISElementContainer(Element xmlNode, GISElementContainer<?> primitive,\n\t\t\tXMLBuilder builder, PathBuilder pathBuilder, XMLResources resources)", "full_signature": "public static void writeGISElementContainer(Element xmlNode, GISElementContainer<?> primitive,\n\t\t\tXMLBuilder builder, PathBuilder pathBuilder, XMLResources resources)", "class_method_signature": "XMLGISElementUtil.writeGISElementContainer(Element xmlNode, GISElementContainer<?> primitive,\n\t\t\tXMLBuilder builder, PathBuilder pathBuilder, XMLResources resources)", "testcase": false, "constructor": false}, {"identifier": "writeGISElementContainer", "parameters": "(Element xmlNode, GISElementContainer<?> primitive,\n\t\t\tString elementNodeName, XMLBuilder builder, PathBuilder pathBuilder, XMLResources resources)", "modifiers": "public static", "return": "void", "signature": "void writeGISElementContainer(Element xmlNode, GISElementContainer<?> primitive,\n\t\t\tString elementNodeName, XMLBuilder builder, PathBuilder pathBuilder, XMLResources resources)", "full_signature": "public static void writeGISElementContainer(Element xmlNode, GISElementContainer<?> primitive,\n\t\t\tString elementNodeName, XMLBuilder builder, PathBuilder pathBuilder, XMLResources resources)", "class_method_signature": "XMLGISElementUtil.writeGISElementContainer(Element xmlNode, GISElementContainer<?> primitive,\n\t\t\tString elementNodeName, XMLBuilder builder, PathBuilder pathBuilder, XMLResources resources)", "testcase": false, "constructor": false}, {"identifier": "readGISElementContainer", "parameters": "(Element xmlNode,\n\t\t\tGISElementContainer<T> primitive, PathBuilder pathBuilder, XMLResources resources)", "modifiers": "public static", "return": "void", "signature": "void readGISElementContainer(Element xmlNode,\n\t\t\tGISElementContainer<T> primitive, PathBuilder pathBuilder, XMLResources resources)", "full_signature": "public static void readGISElementContainer(Element xmlNode,\n\t\t\tGISElementContainer<T> primitive, PathBuilder pathBuilder, XMLResources resources)", "class_method_signature": "XMLGISElementUtil.readGISElementContainer(Element xmlNode,\n\t\t\tGISElementContainer<T> primitive, PathBuilder pathBuilder, XMLResources resources)", "testcase": false, "constructor": false}, {"identifier": "readGISElementContainer", "parameters": "(Element xmlNode,\n\t\t\tGISElementContainer<T> primitive, String elementNodeName, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "modifiers": "@SuppressWarnings({\"checkstyle:cyclomaticcomplexity\", \"checkstyle:npathcomplexity\", \"checkstyle:nestedifdepth\", \"resource\"}) public static", "return": "void", "signature": "void readGISElementContainer(Element xmlNode,\n\t\t\tGISElementContainer<T> primitive, String elementNodeName, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "full_signature": "@SuppressWarnings({\"checkstyle:cyclomaticcomplexity\", \"checkstyle:npathcomplexity\", \"checkstyle:nestedifdepth\", \"resource\"}) public static void readGISElementContainer(Element xmlNode,\n\t\t\tGISElementContainer<T> primitive, String elementNodeName, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "class_method_signature": "XMLGISElementUtil.readGISElementContainer(Element xmlNode,\n\t\t\tGISElementContainer<T> primitive, String elementNodeName, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "testcase": false, "constructor": false}, {"identifier": "createShapeReader", "parameters": "(URL shapeURL,\n\t\t\tClass<? extends T> elementType, DBaseFileReader attrReader, URL attrSourceURL,\n\t\t\tMapMetricProjection mapProjection)", "modifiers": "private static", "return": "GISShapeFileReader", "signature": "GISShapeFileReader createShapeReader(URL shapeURL,\n\t\t\tClass<? extends T> elementType, DBaseFileReader attrReader, URL attrSourceURL,\n\t\t\tMapMetricProjection mapProjection)", "full_signature": "private static GISShapeFileReader createShapeReader(URL shapeURL,\n\t\t\tClass<? extends T> elementType, DBaseFileReader attrReader, URL attrSourceURL,\n\t\t\tMapMetricProjection mapProjection)", "class_method_signature": "XMLGISElementUtil.createShapeReader(URL shapeURL,\n\t\t\tClass<? extends T> elementType, DBaseFileReader attrReader, URL attrSourceURL,\n\t\t\tMapMetricProjection mapProjection)", "testcase": false, "constructor": false}, {"identifier": "createShapeReader", "parameters": "(InputStream shapeStream,\n\t\t\tClass<? extends T> elementType, DBaseFileReader attrReader, URL attrSourceURL,\n\t\t\tMapMetricProjection mapProjection)", "modifiers": "private static", "return": "GISShapeFileReader", "signature": "GISShapeFileReader createShapeReader(InputStream shapeStream,\n\t\t\tClass<? extends T> elementType, DBaseFileReader attrReader, URL attrSourceURL,\n\t\t\tMapMetricProjection mapProjection)", "full_signature": "private static GISShapeFileReader createShapeReader(InputStream shapeStream,\n\t\t\tClass<? extends T> elementType, DBaseFileReader attrReader, URL attrSourceURL,\n\t\t\tMapMetricProjection mapProjection)", "class_method_signature": "XMLGISElementUtil.createShapeReader(InputStream shapeStream,\n\t\t\tClass<? extends T> elementType, DBaseFileReader attrReader, URL attrSourceURL,\n\t\t\tMapMetricProjection mapProjection)", "testcase": false, "constructor": false}, {"identifier": "writeGISElementAttributes", "parameters": "(Element element, GISElement primitive, XMLBuilder builder,\n\t\t\tXMLResources resources)", "modifiers": "public static", "return": "void", "signature": "void writeGISElementAttributes(Element element, GISElement primitive, XMLBuilder builder,\n\t\t\tXMLResources resources)", "full_signature": "public static void writeGISElementAttributes(Element element, GISElement primitive, XMLBuilder builder,\n\t\t\tXMLResources resources)", "class_method_signature": "XMLGISElementUtil.writeGISElementAttributes(Element element, GISElement primitive, XMLBuilder builder,\n\t\t\tXMLResources resources)", "testcase": false, "constructor": false}, {"identifier": "readGISElementAttributes", "parameters": "(Element element, GISElement primitive, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "modifiers": "public static", "return": "void", "signature": "void readGISElementAttributes(Element element, GISElement primitive, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "full_signature": "public static void readGISElementAttributes(Element element, GISElement primitive, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "class_method_signature": "XMLGISElementUtil.readGISElementAttributes(Element element, GISElement primitive, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "testcase": false, "constructor": false}], "file": "advanced/gis/gisinputoutput/src/main/java/org/arakhne/afc/gis/io/xml/XMLGISElementUtil.java"}, "focal_method": {"identifier": "writeGISElementAttributes", "parameters": "(Element element, GISElement primitive, XMLBuilder builder,\n\t\t\tXMLResources resources)", "modifiers": "public static", "return": "void", "body": "public static void writeGISElementAttributes(Element element, GISElement primitive, XMLBuilder builder,\n\t\t\tXMLResources resources) throws IOException {\n\t\tXMLAttributeUtil.writeAttributeContainer(element, primitive, builder, resources, false);\n\t\telement.setAttribute(XMLUtil.ATTR_NAME, primitive.getName());\n\t\telement.setAttribute(XMLAttributeUtil.ATTR_GEOID, primitive.getGeoId().toString());\n\t\telement.setAttribute(XMLUtil.ATTR_ID, primitive.getUUID().toString());\n\t}", "signature": "void writeGISElementAttributes(Element element, GISElement primitive, XMLBuilder builder,\n\t\t\tXMLResources resources)", "full_signature": "public static void writeGISElementAttributes(Element element, GISElement primitive, XMLBuilder builder,\n\t\t\tXMLResources resources)", "class_method_signature": "XMLGISElementUtil.writeGISElementAttributes(Element element, GISElement primitive, XMLBuilder builder,\n\t\t\tXMLResources resources)", "testcase": false, "constructor": false, "invocations": ["writeAttributeContainer", "setAttribute", "getName", "setAttribute", "toString", "getGeoId", "setAttribute", "toString", "getUUID"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}