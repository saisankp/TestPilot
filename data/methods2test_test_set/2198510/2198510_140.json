{"test_class": {"identifier": "TestTaildirMatcher", "superclass": "", "interfaces": "", "fields": [{"original_string": "private File tmpDir;", "modifier": "private", "type": "File", "declarator": "tmpDir", "var_name": "tmpDir"}, {"original_string": "private Map<String, File> files;", "modifier": "private", "type": "Map<String, File>", "declarator": "files", "var_name": "files"}, {"original_string": "private boolean isCachingNeeded = true;", "modifier": "private", "type": "boolean", "declarator": "isCachingNeeded = true", "var_name": "isCachingNeeded"}, {"original_string": "final String msgAlreadyExistingFile = \"a file was not found but it was created before matcher\";", "modifier": "final", "type": "String", "declarator": "msgAlreadyExistingFile = \"a file was not found but it was created before matcher\"", "var_name": "msgAlreadyExistingFile"}, {"original_string": "final String msgAfterNewFileCreated = \"files which were created after last check are not found\";", "modifier": "final", "type": "String", "declarator": "msgAfterNewFileCreated = \"files which were created after last check are not found\"", "var_name": "msgAfterNewFileCreated"}, {"original_string": "final String msgAfterAppend = \"a file was not found although it was just appended within the dir\";", "modifier": "final", "type": "String", "declarator": "msgAfterAppend = \"a file was not found although it was just appended within the dir\"", "var_name": "msgAfterAppend"}, {"original_string": "final String msgEmptyDir = \"empty dir should return an empty list\";", "modifier": "final", "type": "String", "declarator": "msgEmptyDir = \"empty dir should return an empty list\"", "var_name": "msgEmptyDir"}, {"original_string": "final String msgNoMatch = \"no match should return an empty list\";", "modifier": "final", "type": "String", "declarator": "msgNoMatch = \"no match should return an empty list\"", "var_name": "msgNoMatch"}, {"original_string": "final String msgSubDirs = \"only files on the same level as the pattern should be returned\";", "modifier": "final", "type": "String", "declarator": "msgSubDirs = \"only files on the same level as the pattern should be returned\"", "var_name": "msgSubDirs"}, {"original_string": "final String msgNoChange = \"file wasn't touched after last check cannot be found\";", "modifier": "final", "type": "String", "declarator": "msgNoChange = \"file wasn't touched after last check cannot be found\"", "var_name": "msgNoChange"}, {"original_string": "final String msgAfterDelete = \"file was returned even after it was deleted\";", "modifier": "final", "type": "String", "declarator": "msgAfterDelete = \"file was returned even after it was deleted\"", "var_name": "msgAfterDelete"}], "file": "flume-ng-sources/flume-taildir-source/src/test/java/org/apache/flume/source/taildir/TestTaildirMatcher.java"}, "test_case": {"identifier": "testEmtpyDirMatching", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testEmtpyDirMatching() throws Exception {\n    TaildirMatcher tm = new TaildirMatcher(\"empty\",\n                                           tmpDir.getAbsolutePath() + File.separator + \".*\",\n                                           isCachingNeeded);\n    List<File> files = tm.getMatchingFiles();\n    assertNotNull(msgEmptyDir, files);\n    assertTrue(msgEmptyDir, files.isEmpty());\n  }", "signature": "void testEmtpyDirMatching()", "full_signature": "@Test public void testEmtpyDirMatching()", "class_method_signature": "TestTaildirMatcher.testEmtpyDirMatching()", "testcase": true, "constructor": false, "invocations": ["getAbsolutePath", "getMatchingFiles", "assertNotNull", "assertTrue", "isEmpty"]}, "focal_class": {"identifier": "TaildirMatcher", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(TaildirMatcher.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(TaildirMatcher.class)", "var_name": "logger"}, {"original_string": "private static final FileSystem FS = FileSystems.getDefault();", "modifier": "private static final", "type": "FileSystem", "declarator": "FS = FileSystems.getDefault()", "var_name": "FS"}, {"original_string": "private final boolean cachePatternMatching;", "modifier": "private final", "type": "boolean", "declarator": "cachePatternMatching", "var_name": "cachePatternMatching"}, {"original_string": "private final String fileGroup;", "modifier": "private final", "type": "String", "declarator": "fileGroup", "var_name": "fileGroup"}, {"original_string": "private final String filePattern;", "modifier": "private final", "type": "String", "declarator": "filePattern", "var_name": "filePattern"}, {"original_string": "private final File parentDir;", "modifier": "private final", "type": "File", "declarator": "parentDir", "var_name": "parentDir"}, {"original_string": "private final DirectoryStream.Filter<Path> fileFilter;", "modifier": "private final", "type": "DirectoryStream.Filter<Path>", "declarator": "fileFilter", "var_name": "fileFilter"}, {"original_string": "private long lastSeenParentDirMTime = -1;", "modifier": "private", "type": "long", "declarator": "lastSeenParentDirMTime = -1", "var_name": "lastSeenParentDirMTime"}, {"original_string": "private long lastCheckedTime = -1;", "modifier": "private", "type": "long", "declarator": "lastCheckedTime = -1", "var_name": "lastCheckedTime"}, {"original_string": "private List<File> lastMatchedFiles = Lists.newArrayList();", "modifier": "private", "type": "List<File>", "declarator": "lastMatchedFiles = Lists.newArrayList()", "var_name": "lastMatchedFiles"}], "methods": [{"identifier": "TaildirMatcher", "parameters": "(String fileGroup, String filePattern, boolean cachePatternMatching)", "modifiers": "", "return": "", "signature": " TaildirMatcher(String fileGroup, String filePattern, boolean cachePatternMatching)", "full_signature": "  TaildirMatcher(String fileGroup, String filePattern, boolean cachePatternMatching)", "class_method_signature": "TaildirMatcher.TaildirMatcher(String fileGroup, String filePattern, boolean cachePatternMatching)", "testcase": false, "constructor": true}, {"identifier": "getMatchingFiles", "parameters": "()", "modifiers": "", "return": "List<File>", "signature": "List<File> getMatchingFiles()", "full_signature": " List<File> getMatchingFiles()", "class_method_signature": "TaildirMatcher.getMatchingFiles()", "testcase": false, "constructor": false}, {"identifier": "getMatchingFilesNoCache", "parameters": "()", "modifiers": "private", "return": "List<File>", "signature": "List<File> getMatchingFilesNoCache()", "full_signature": "private List<File> getMatchingFilesNoCache()", "class_method_signature": "TaildirMatcher.getMatchingFilesNoCache()", "testcase": false, "constructor": false}, {"identifier": "sortByLastModifiedTime", "parameters": "(List<File> files)", "modifiers": "private static", "return": "List<File>", "signature": "List<File> sortByLastModifiedTime(List<File> files)", "full_signature": "private static List<File> sortByLastModifiedTime(List<File> files)", "class_method_signature": "TaildirMatcher.sortByLastModifiedTime(List<File> files)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "TaildirMatcher.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "TaildirMatcher.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "TaildirMatcher.hashCode()", "testcase": false, "constructor": false}, {"identifier": "getFileGroup", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFileGroup()", "full_signature": "public String getFileGroup()", "class_method_signature": "TaildirMatcher.getFileGroup()", "testcase": false, "constructor": false}], "file": "flume-ng-sources/flume-taildir-source/src/main/java/org/apache/flume/source/taildir/TaildirMatcher.java"}, "focal_method": {"identifier": "getMatchingFiles", "parameters": "()", "modifiers": "", "return": "List<File>", "body": "List<File> getMatchingFiles() {\n    long now = TimeUnit.SECONDS.toMillis(\n        TimeUnit.MILLISECONDS.toSeconds(System.currentTimeMillis()));\n    long currentParentDirMTime = parentDir.lastModified();\n    List<File> result;\n\n    // calculate matched files if\n    // - we don't want to use cache (recalculate every time) OR\n    // - directory was clearly updated after the last check OR\n    // - last mtime change wasn't already checked for sure\n    //   (system clock hasn't passed that second yet)\n    if (!cachePatternMatching ||\n        lastSeenParentDirMTime < currentParentDirMTime ||\n        !(currentParentDirMTime < lastCheckedTime)) {\n      lastMatchedFiles = sortByLastModifiedTime(getMatchingFilesNoCache());\n      lastSeenParentDirMTime = currentParentDirMTime;\n      lastCheckedTime = now;\n    }\n\n    return lastMatchedFiles;\n  }", "signature": "List<File> getMatchingFiles()", "full_signature": " List<File> getMatchingFiles()", "class_method_signature": "TaildirMatcher.getMatchingFiles()", "testcase": false, "constructor": false, "invocations": ["toMillis", "toSeconds", "currentTimeMillis", "lastModified", "sortByLastModifiedTime", "getMatchingFilesNoCache"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}