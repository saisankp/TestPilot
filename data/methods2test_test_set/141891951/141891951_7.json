{"test_class": {"identifier": "MappedFileQueueTest", "superclass": "", "interfaces": "", "fields": [], "file": "store/src/test/java/org/apache/rocketmq/store/MappedFileQueueTest.java"}, "test_case": {"identifier": "testDeleteExpiredFileByTime", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDeleteExpiredFileByTime() throws Exception {\n        MappedFileQueue mappedFileQueue =\n            new MappedFileQueue(\"target/unit_test_store/f/\", 1024, null);\n\n        for (int i = 0; i < 100; i++) {\n            MappedFile mappedFile = mappedFileQueue.getLastMappedFile(0);\n            assertThat(mappedFile).isNotNull();\n            byte[] bytes = new byte[512];\n            assertThat(mappedFile.appendMessage(bytes)).isTrue();\n        }\n\n        assertThat(mappedFileQueue.getMappedFiles().size()).isEqualTo(50);\n        long expiredTime =  100 * 1000;\n        for (int i = 0; i < mappedFileQueue.getMappedFiles().size(); i++) {\n            MappedFile mappedFile = mappedFileQueue.getMappedFiles().get(i);\n           if (i < 5) {\n               mappedFile.getFile().setLastModified(System.currentTimeMillis() - expiredTime * 2);\n           }\n           if (i > 20) {\n               mappedFile.getFile().setLastModified(System.currentTimeMillis() - expiredTime * 2);\n           }\n        }\n        mappedFileQueue.deleteExpiredFileByTime(expiredTime, 0, 0, false);\n        assertThat(mappedFileQueue.getMappedFiles().size()).isEqualTo(45);\n    }", "signature": "void testDeleteExpiredFileByTime()", "full_signature": "@Test public void testDeleteExpiredFileByTime()", "class_method_signature": "MappedFileQueueTest.testDeleteExpiredFileByTime()", "testcase": true, "constructor": false, "invocations": ["getLastMappedFile", "isNotNull", "assertThat", "isTrue", "assertThat", "appendMessage", "isEqualTo", "assertThat", "size", "getMappedFiles", "size", "getMappedFiles", "get", "getMappedFiles", "setLastModified", "getFile", "currentTimeMillis", "setLastModified", "getFile", "currentTimeMillis", "deleteExpiredFileByTime", "isEqualTo", "assertThat", "size", "getMappedFiles"]}, "focal_class": {"identifier": "MappedFileQueue", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME)", "var_name": "log"}, {"original_string": "private static final Logger LOG_ERROR = LoggerFactory.getLogger(LoggerName.STORE_ERROR_LOGGER_NAME);", "modifier": "private static final", "type": "Logger", "declarator": "LOG_ERROR = LoggerFactory.getLogger(LoggerName.STORE_ERROR_LOGGER_NAME)", "var_name": "LOG_ERROR"}, {"original_string": "private static final int DELETE_FILES_BATCH_MAX = 10;", "modifier": "private static final", "type": "int", "declarator": "DELETE_FILES_BATCH_MAX = 10", "var_name": "DELETE_FILES_BATCH_MAX"}, {"original_string": "private final String storePath;", "modifier": "private final", "type": "String", "declarator": "storePath", "var_name": "storePath"}, {"original_string": "private final int mappedFileSize;", "modifier": "private final", "type": "int", "declarator": "mappedFileSize", "var_name": "mappedFileSize"}, {"original_string": "private final CopyOnWriteArrayList<MappedFile> mappedFiles = new CopyOnWriteArrayList<MappedFile>();", "modifier": "private final", "type": "CopyOnWriteArrayList<MappedFile>", "declarator": "mappedFiles = new CopyOnWriteArrayList<MappedFile>()", "var_name": "mappedFiles"}, {"original_string": "private final AllocateMappedFileService allocateMappedFileService;", "modifier": "private final", "type": "AllocateMappedFileService", "declarator": "allocateMappedFileService", "var_name": "allocateMappedFileService"}, {"original_string": "private long flushedWhere = 0;", "modifier": "private", "type": "long", "declarator": "flushedWhere = 0", "var_name": "flushedWhere"}, {"original_string": "private long committedWhere = 0;", "modifier": "private", "type": "long", "declarator": "committedWhere = 0", "var_name": "committedWhere"}, {"original_string": "private volatile long storeTimestamp = 0;", "modifier": "private volatile", "type": "long", "declarator": "storeTimestamp = 0", "var_name": "storeTimestamp"}], "methods": [{"identifier": "MappedFileQueue", "parameters": "(final String storePath, int mappedFileSize,\n        AllocateMappedFileService allocateMappedFileService)", "modifiers": "public", "return": "", "signature": " MappedFileQueue(final String storePath, int mappedFileSize,\n        AllocateMappedFileService allocateMappedFileService)", "full_signature": "public  MappedFileQueue(final String storePath, int mappedFileSize,\n        AllocateMappedFileService allocateMappedFileService)", "class_method_signature": "MappedFileQueue.MappedFileQueue(final String storePath, int mappedFileSize,\n        AllocateMappedFileService allocateMappedFileService)", "testcase": false, "constructor": true}, {"identifier": "checkSelf", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void checkSelf()", "full_signature": "public void checkSelf()", "class_method_signature": "MappedFileQueue.checkSelf()", "testcase": false, "constructor": false}, {"identifier": "getMappedFileByTime", "parameters": "(final long timestamp)", "modifiers": "public", "return": "MappedFile", "signature": "MappedFile getMappedFileByTime(final long timestamp)", "full_signature": "public MappedFile getMappedFileByTime(final long timestamp)", "class_method_signature": "MappedFileQueue.getMappedFileByTime(final long timestamp)", "testcase": false, "constructor": false}, {"identifier": "copyMappedFiles", "parameters": "(final int reservedMappedFiles)", "modifiers": "private", "return": "Object[]", "signature": "Object[] copyMappedFiles(final int reservedMappedFiles)", "full_signature": "private Object[] copyMappedFiles(final int reservedMappedFiles)", "class_method_signature": "MappedFileQueue.copyMappedFiles(final int reservedMappedFiles)", "testcase": false, "constructor": false}, {"identifier": "truncateDirtyFiles", "parameters": "(long offset)", "modifiers": "public", "return": "void", "signature": "void truncateDirtyFiles(long offset)", "full_signature": "public void truncateDirtyFiles(long offset)", "class_method_signature": "MappedFileQueue.truncateDirtyFiles(long offset)", "testcase": false, "constructor": false}, {"identifier": "deleteExpiredFile", "parameters": "(List<MappedFile> files)", "modifiers": "", "return": "void", "signature": "void deleteExpiredFile(List<MappedFile> files)", "full_signature": " void deleteExpiredFile(List<MappedFile> files)", "class_method_signature": "MappedFileQueue.deleteExpiredFile(List<MappedFile> files)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean load()", "full_signature": "public boolean load()", "class_method_signature": "MappedFileQueue.load()", "testcase": false, "constructor": false}, {"identifier": "howMuchFallBehind", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long howMuchFallBehind()", "full_signature": "public long howMuchFallBehind()", "class_method_signature": "MappedFileQueue.howMuchFallBehind()", "testcase": false, "constructor": false}, {"identifier": "getLastMappedFile", "parameters": "(final long startOffset, boolean needCreate)", "modifiers": "public", "return": "MappedFile", "signature": "MappedFile getLastMappedFile(final long startOffset, boolean needCreate)", "full_signature": "public MappedFile getLastMappedFile(final long startOffset, boolean needCreate)", "class_method_signature": "MappedFileQueue.getLastMappedFile(final long startOffset, boolean needCreate)", "testcase": false, "constructor": false}, {"identifier": "getLastMappedFile", "parameters": "(final long startOffset)", "modifiers": "public", "return": "MappedFile", "signature": "MappedFile getLastMappedFile(final long startOffset)", "full_signature": "public MappedFile getLastMappedFile(final long startOffset)", "class_method_signature": "MappedFileQueue.getLastMappedFile(final long startOffset)", "testcase": false, "constructor": false}, {"identifier": "getLastMappedFile", "parameters": "()", "modifiers": "public", "return": "MappedFile", "signature": "MappedFile getLastMappedFile()", "full_signature": "public MappedFile getLastMappedFile()", "class_method_signature": "MappedFileQueue.getLastMappedFile()", "testcase": false, "constructor": false}, {"identifier": "resetOffset", "parameters": "(long offset)", "modifiers": "public", "return": "boolean", "signature": "boolean resetOffset(long offset)", "full_signature": "public boolean resetOffset(long offset)", "class_method_signature": "MappedFileQueue.resetOffset(long offset)", "testcase": false, "constructor": false}, {"identifier": "getMinOffset", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getMinOffset()", "full_signature": "public long getMinOffset()", "class_method_signature": "MappedFileQueue.getMinOffset()", "testcase": false, "constructor": false}, {"identifier": "getMaxOffset", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getMaxOffset()", "full_signature": "public long getMaxOffset()", "class_method_signature": "MappedFileQueue.getMaxOffset()", "testcase": false, "constructor": false}, {"identifier": "getMaxWrotePosition", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getMaxWrotePosition()", "full_signature": "public long getMaxWrotePosition()", "class_method_signature": "MappedFileQueue.getMaxWrotePosition()", "testcase": false, "constructor": false}, {"identifier": "remainHowManyDataToCommit", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long remainHowManyDataToCommit()", "full_signature": "public long remainHowManyDataToCommit()", "class_method_signature": "MappedFileQueue.remainHowManyDataToCommit()", "testcase": false, "constructor": false}, {"identifier": "remainHowManyDataToFlush", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long remainHowManyDataToFlush()", "full_signature": "public long remainHowManyDataToFlush()", "class_method_signature": "MappedFileQueue.remainHowManyDataToFlush()", "testcase": false, "constructor": false}, {"identifier": "deleteLastMappedFile", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void deleteLastMappedFile()", "full_signature": "public void deleteLastMappedFile()", "class_method_signature": "MappedFileQueue.deleteLastMappedFile()", "testcase": false, "constructor": false}, {"identifier": "deleteExpiredFileByTime", "parameters": "(final long expiredTime,\n        final int deleteFilesInterval,\n        final long intervalForcibly,\n        final boolean cleanImmediately)", "modifiers": "public", "return": "int", "signature": "int deleteExpiredFileByTime(final long expiredTime,\n        final int deleteFilesInterval,\n        final long intervalForcibly,\n        final boolean cleanImmediately)", "full_signature": "public int deleteExpiredFileByTime(final long expiredTime,\n        final int deleteFilesInterval,\n        final long intervalForcibly,\n        final boolean cleanImmediately)", "class_method_signature": "MappedFileQueue.deleteExpiredFileByTime(final long expiredTime,\n        final int deleteFilesInterval,\n        final long intervalForcibly,\n        final boolean cleanImmediately)", "testcase": false, "constructor": false}, {"identifier": "deleteExpiredFileByOffset", "parameters": "(long offset, int unitSize)", "modifiers": "public", "return": "int", "signature": "int deleteExpiredFileByOffset(long offset, int unitSize)", "full_signature": "public int deleteExpiredFileByOffset(long offset, int unitSize)", "class_method_signature": "MappedFileQueue.deleteExpiredFileByOffset(long offset, int unitSize)", "testcase": false, "constructor": false}, {"identifier": "flush", "parameters": "(final int flushLeastPages)", "modifiers": "public", "return": "boolean", "signature": "boolean flush(final int flushLeastPages)", "full_signature": "public boolean flush(final int flushLeastPages)", "class_method_signature": "MappedFileQueue.flush(final int flushLeastPages)", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "(final int commitLeastPages)", "modifiers": "public", "return": "boolean", "signature": "boolean commit(final int commitLeastPages)", "full_signature": "public boolean commit(final int commitLeastPages)", "class_method_signature": "MappedFileQueue.commit(final int commitLeastPages)", "testcase": false, "constructor": false}, {"identifier": "findMappedFileByOffset", "parameters": "(final long offset, final boolean returnFirstOnNotFound)", "modifiers": "public", "return": "MappedFile", "signature": "MappedFile findMappedFileByOffset(final long offset, final boolean returnFirstOnNotFound)", "full_signature": "public MappedFile findMappedFileByOffset(final long offset, final boolean returnFirstOnNotFound)", "class_method_signature": "MappedFileQueue.findMappedFileByOffset(final long offset, final boolean returnFirstOnNotFound)", "testcase": false, "constructor": false}, {"identifier": "deleteMappedFileByOffset", "parameters": "(final long offset)", "modifiers": "public", "return": "void", "signature": "void deleteMappedFileByOffset(final long offset)", "full_signature": "public void deleteMappedFileByOffset(final long offset)", "class_method_signature": "MappedFileQueue.deleteMappedFileByOffset(final long offset)", "testcase": false, "constructor": false}, {"identifier": "getFirstMappedFile", "parameters": "()", "modifiers": "public", "return": "MappedFile", "signature": "MappedFile getFirstMappedFile()", "full_signature": "public MappedFile getFirstMappedFile()", "class_method_signature": "MappedFileQueue.getFirstMappedFile()", "testcase": false, "constructor": false}, {"identifier": "findMappedFileByOffset", "parameters": "(final long offset)", "modifiers": "public", "return": "MappedFile", "signature": "MappedFile findMappedFileByOffset(final long offset)", "full_signature": "public MappedFile findMappedFileByOffset(final long offset)", "class_method_signature": "MappedFileQueue.findMappedFileByOffset(final long offset)", "testcase": false, "constructor": false}, {"identifier": "getMappedMemorySize", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getMappedMemorySize()", "full_signature": "public long getMappedMemorySize()", "class_method_signature": "MappedFileQueue.getMappedMemorySize()", "testcase": false, "constructor": false}, {"identifier": "retryDeleteFirstFile", "parameters": "(final long intervalForcibly)", "modifiers": "public", "return": "boolean", "signature": "boolean retryDeleteFirstFile(final long intervalForcibly)", "full_signature": "public boolean retryDeleteFirstFile(final long intervalForcibly)", "class_method_signature": "MappedFileQueue.retryDeleteFirstFile(final long intervalForcibly)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "(final long intervalForcibly)", "modifiers": "public", "return": "void", "signature": "void shutdown(final long intervalForcibly)", "full_signature": "public void shutdown(final long intervalForcibly)", "class_method_signature": "MappedFileQueue.shutdown(final long intervalForcibly)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void destroy()", "full_signature": "public void destroy()", "class_method_signature": "MappedFileQueue.destroy()", "testcase": false, "constructor": false}, {"identifier": "getFlushedWhere", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getFlushedWhere()", "full_signature": "public long getFlushedWhere()", "class_method_signature": "MappedFileQueue.getFlushedWhere()", "testcase": false, "constructor": false}, {"identifier": "setFlushedWhere", "parameters": "(long flushedWhere)", "modifiers": "public", "return": "void", "signature": "void setFlushedWhere(long flushedWhere)", "full_signature": "public void setFlushedWhere(long flushedWhere)", "class_method_signature": "MappedFileQueue.setFlushedWhere(long flushedWhere)", "testcase": false, "constructor": false}, {"identifier": "getStoreTimestamp", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getStoreTimestamp()", "full_signature": "public long getStoreTimestamp()", "class_method_signature": "MappedFileQueue.getStoreTimestamp()", "testcase": false, "constructor": false}, {"identifier": "getMappedFiles", "parameters": "()", "modifiers": "public", "return": "List<MappedFile>", "signature": "List<MappedFile> getMappedFiles()", "full_signature": "public List<MappedFile> getMappedFiles()", "class_method_signature": "MappedFileQueue.getMappedFiles()", "testcase": false, "constructor": false}, {"identifier": "getMappedFileSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMappedFileSize()", "full_signature": "public int getMappedFileSize()", "class_method_signature": "MappedFileQueue.getMappedFileSize()", "testcase": false, "constructor": false}, {"identifier": "getCommittedWhere", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getCommittedWhere()", "full_signature": "public long getCommittedWhere()", "class_method_signature": "MappedFileQueue.getCommittedWhere()", "testcase": false, "constructor": false}, {"identifier": "setCommittedWhere", "parameters": "(final long committedWhere)", "modifiers": "public", "return": "void", "signature": "void setCommittedWhere(final long committedWhere)", "full_signature": "public void setCommittedWhere(final long committedWhere)", "class_method_signature": "MappedFileQueue.setCommittedWhere(final long committedWhere)", "testcase": false, "constructor": false}], "file": "store/src/main/java/org/apache/rocketmq/store/MappedFileQueue.java"}, "focal_method": {"identifier": "deleteExpiredFileByTime", "parameters": "(final long expiredTime,\n        final int deleteFilesInterval,\n        final long intervalForcibly,\n        final boolean cleanImmediately)", "modifiers": "public", "return": "int", "body": "public int deleteExpiredFileByTime(final long expiredTime,\n        final int deleteFilesInterval,\n        final long intervalForcibly,\n        final boolean cleanImmediately) {\n        Object[] mfs = this.copyMappedFiles(0);\n\n        if (null == mfs)\n            return 0;\n\n        int mfsLength = mfs.length - 1;\n        int deleteCount = 0;\n        List<MappedFile> files = new ArrayList<MappedFile>();\n        if (null != mfs) {\n            for (int i = 0; i < mfsLength; i++) {\n                MappedFile mappedFile = (MappedFile) mfs[i];\n                long liveMaxTimestamp = mappedFile.getLastModifiedTimestamp() + expiredTime;\n                if (System.currentTimeMillis() >= liveMaxTimestamp || cleanImmediately) {\n                    if (mappedFile.destroy(intervalForcibly)) {\n                        files.add(mappedFile);\n                        deleteCount++;\n\n                        if (files.size() >= DELETE_FILES_BATCH_MAX) {\n                            break;\n                        }\n\n                        if (deleteFilesInterval > 0 && (i + 1) < mfsLength) {\n                            try {\n                                Thread.sleep(deleteFilesInterval);\n                            } catch (InterruptedException e) {\n                            }\n                        }\n                    } else {\n                        break;\n                    }\n                } else {\n                    //avoid deleting files in the middle\n                    break;\n                }\n            }\n        }\n\n        deleteExpiredFile(files);\n\n        return deleteCount;\n    }", "signature": "int deleteExpiredFileByTime(final long expiredTime,\n        final int deleteFilesInterval,\n        final long intervalForcibly,\n        final boolean cleanImmediately)", "full_signature": "public int deleteExpiredFileByTime(final long expiredTime,\n        final int deleteFilesInterval,\n        final long intervalForcibly,\n        final boolean cleanImmediately)", "class_method_signature": "MappedFileQueue.deleteExpiredFileByTime(final long expiredTime,\n        final int deleteFilesInterval,\n        final long intervalForcibly,\n        final boolean cleanImmediately)", "testcase": false, "constructor": false, "invocations": ["copyMappedFiles", "getLastModifiedTimestamp", "currentTimeMillis", "destroy", "add", "size", "sleep", "deleteExpiredFile"]}, "repository": {"repo_id": 141891951, "url": "https://github.com/longlong524/store", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 9, "size": 122, "license": "licensed"}}