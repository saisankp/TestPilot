{"test_class": {"identifier": "DEFetchReceiverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private DEFetchReceiver mDEFetchReceiver;", "modifier": "@Mock\n    private", "type": "DEFetchReceiver", "declarator": "mDEFetchReceiver", "var_name": "mDEFetchReceiver"}, {"original_string": "@Mock\n    private NetworkChecker mMockNetworkChecker;", "modifier": "@Mock\n    private", "type": "NetworkChecker", "declarator": "mMockNetworkChecker", "var_name": "mMockNetworkChecker"}, {"original_string": "@Mock\n    private AutoFetchTodaysSentenceUC mAutoFetchTodaysSentenceUC;", "modifier": "@Mock\n    private", "type": "AutoFetchTodaysSentenceUC", "declarator": "mAutoFetchTodaysSentenceUC", "var_name": "mAutoFetchTodaysSentenceUC"}, {"original_string": "@Mock\n    private Intent mIntent;", "modifier": "@Mock\n    private", "type": "Intent", "declarator": "mIntent", "var_name": "mIntent"}], "file": "app/src/test/java/com/xixicm/de/infrastructure/receiver/DEFetchReceiverTest.java"}, "test_case": {"identifier": "testOnReceive_CONNECTIVITY_ACTION_NotAvailableNetwork", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOnReceive_CONNECTIVITY_ACTION_NotAvailableNetwork() {\n        doReturn(false).when(mMockNetworkChecker).isNetworkAvailable();\n        doReturn(ConnectivityManager.CONNECTIVITY_ACTION).when(mIntent).getAction();\n        mDEFetchReceiver.onReceive(null, mIntent);\n\n        // wait to execute\n        waitToRun(100);\n        verify(mAutoFetchTodaysSentenceUC, atMost(0)).run();\n    }", "signature": "void testOnReceive_CONNECTIVITY_ACTION_NotAvailableNetwork()", "full_signature": "@Test public void testOnReceive_CONNECTIVITY_ACTION_NotAvailableNetwork()", "class_method_signature": "DEFetchReceiverTest.testOnReceive_CONNECTIVITY_ACTION_NotAvailableNetwork()", "testcase": true, "constructor": false, "invocations": ["isNetworkAvailable", "when", "doReturn", "getAction", "when", "doReturn", "onReceive", "waitToRun", "run", "verify", "atMost"]}, "focal_class": {"identifier": "DEFetchReceiver", "superclass": "extends BroadcastReceiver", "interfaces": "", "fields": [], "methods": [{"identifier": "onReceive", "parameters": "(Context context, Intent intent)", "modifiers": "@Override public", "return": "void", "signature": "void onReceive(Context context, Intent intent)", "full_signature": "@Override public void onReceive(Context context, Intent intent)", "class_method_signature": "DEFetchReceiver.onReceive(Context context, Intent intent)", "testcase": false, "constructor": false}, {"identifier": "getAutoFetchTodaysSentenceUC", "parameters": "(Context context)", "modifiers": "@VisibleForTesting public", "return": "AutoFetchTodaysSentenceUC", "signature": "AutoFetchTodaysSentenceUC getAutoFetchTodaysSentenceUC(Context context)", "full_signature": "@VisibleForTesting public AutoFetchTodaysSentenceUC getAutoFetchTodaysSentenceUC(Context context)", "class_method_signature": "DEFetchReceiver.getAutoFetchTodaysSentenceUC(Context context)", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/xixicm/de/infrastructure/receiver/DEFetchReceiver.java"}, "focal_method": {"identifier": "onReceive", "parameters": "(Context context, Intent intent)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onReceive(Context context, Intent intent) {\n        LogUtils.v(Constants.TAG, \"DEFetchReceiver: \" + intent);\n        // work on previous android N\n        if (ConnectivityManager.CONNECTIVITY_ACTION.equals(intent.getAction()) && !NetworkUtils.isNetworkAvailable()) {\n            LogUtils.d(Constants.TAG, \"Network is not available, abort fetching.\");\n            return;\n        }\n\n        DefaultUseCaseHandler.createParallelUCHandler().execute(getAutoFetchTodaysSentenceUC(context));\n    }", "signature": "void onReceive(Context context, Intent intent)", "full_signature": "@Override public void onReceive(Context context, Intent intent)", "class_method_signature": "DEFetchReceiver.onReceive(Context context, Intent intent)", "testcase": false, "constructor": false, "invocations": ["v", "equals", "getAction", "isNetworkAvailable", "d", "execute", "createParallelUCHandler", "getAutoFetchTodaysSentenceUC"]}, "repository": {"repo_id": 66622989, "url": "https://github.com/enuoCM/DE-MVP-Clean", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 17, "size": 278, "license": "licensed"}}