{"test_class": {"identifier": "AbstractScenarioRunnerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static int SCENARIO_DATA = 5;", "modifier": "private final static", "type": "int", "declarator": "SCENARIO_DATA = 5", "var_name": "SCENARIO_DATA"}, {"original_string": "@Mock\n    protected KieContainer kieContainerMock;", "modifier": "@Mock\n    protected", "type": "KieContainer", "declarator": "kieContainerMock", "var_name": "kieContainerMock"}, {"original_string": "protected AbstractScenarioRunner abstractScenarioRunnerLocal;", "modifier": "protected", "type": "AbstractScenarioRunner", "declarator": "abstractScenarioRunnerLocal", "var_name": "abstractScenarioRunnerLocal"}, {"original_string": "protected Settings settingsLocal;", "modifier": "protected", "type": "Settings", "declarator": "settingsLocal", "var_name": "settingsLocal"}, {"original_string": "private ScenarioRunnerDTO scenarioRunnerDTOLocal;", "modifier": "private", "type": "ScenarioRunnerDTO", "declarator": "scenarioRunnerDTOLocal", "var_name": "scenarioRunnerDTOLocal"}], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/runner/AbstractScenarioRunnerTest.java"}, "test_case": {"identifier": "getSpecificRunnerProvider", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getSpecificRunnerProvider() {\n        // all existing types should have a dedicated runner\n        for (ScenarioSimulationModel.Type value : ScenarioSimulationModel.Type.values()) {\n            final ScenarioRunnerProvider retrieved = AbstractScenarioRunner.getSpecificRunnerProvider(value);\n            assertNotNull(retrieved);\n        }\n    }", "signature": "void getSpecificRunnerProvider()", "full_signature": "@Test public void getSpecificRunnerProvider()", "class_method_signature": "AbstractScenarioRunnerTest.getSpecificRunnerProvider()", "testcase": true, "constructor": false, "invocations": ["values", "getSpecificRunnerProvider", "assertNotNull"]}, "focal_class": {"identifier": "AbstractScenarioRunner", "superclass": "extends Runner", "interfaces": "", "fields": [{"original_string": "protected final ClassLoader classLoader;", "modifier": "protected final", "type": "ClassLoader", "declarator": "classLoader", "var_name": "classLoader"}, {"original_string": "protected final ExpressionEvaluatorFactory expressionEvaluatorFactory;", "modifier": "protected final", "type": "ExpressionEvaluatorFactory", "declarator": "expressionEvaluatorFactory", "var_name": "expressionEvaluatorFactory"}, {"original_string": "protected final Description desc;", "modifier": "protected final", "type": "Description", "declarator": "desc", "var_name": "desc"}, {"original_string": "protected final KieContainer kieContainer;", "modifier": "protected final", "type": "KieContainer", "declarator": "kieContainer", "var_name": "kieContainer"}, {"original_string": "protected final ScenarioRunnerDTO scenarioRunnerDTO;", "modifier": "protected final", "type": "ScenarioRunnerDTO", "declarator": "scenarioRunnerDTO", "var_name": "scenarioRunnerDTO"}, {"original_string": "protected SimulationRunMetadataBuilder simulationRunMetadataBuilder;", "modifier": "protected", "type": "SimulationRunMetadataBuilder", "declarator": "simulationRunMetadataBuilder", "var_name": "simulationRunMetadataBuilder"}], "methods": [{"identifier": "AbstractScenarioRunner", "parameters": "(KieContainer kieContainer,\n                                  ScenarioRunnerDTO scenarioRunnerDTO,\n                                  ExpressionEvaluatorFactory expressionEvaluatorFactory)", "modifiers": "public", "return": "", "signature": " AbstractScenarioRunner(KieContainer kieContainer,\n                                  ScenarioRunnerDTO scenarioRunnerDTO,\n                                  ExpressionEvaluatorFactory expressionEvaluatorFactory)", "full_signature": "public  AbstractScenarioRunner(KieContainer kieContainer,\n                                  ScenarioRunnerDTO scenarioRunnerDTO,\n                                  ExpressionEvaluatorFactory expressionEvaluatorFactory)", "class_method_signature": "AbstractScenarioRunner.AbstractScenarioRunner(KieContainer kieContainer,\n                                  ScenarioRunnerDTO scenarioRunnerDTO,\n                                  ExpressionEvaluatorFactory expressionEvaluatorFactory)", "testcase": false, "constructor": true}, {"identifier": "getDescriptionForSimulation", "parameters": "(Optional<String> className, List<ScenarioWithIndex> scenarios)", "modifiers": "public static", "return": "Description", "signature": "Description getDescriptionForSimulation(Optional<String> className, List<ScenarioWithIndex> scenarios)", "full_signature": "public static Description getDescriptionForSimulation(Optional<String> className, List<ScenarioWithIndex> scenarios)", "class_method_signature": "AbstractScenarioRunner.getDescriptionForSimulation(Optional<String> className, List<ScenarioWithIndex> scenarios)", "testcase": false, "constructor": false}, {"identifier": "getDescriptionForScenario", "parameters": "(Optional<String> className, int index, Scenario scenario)", "modifiers": "public static", "return": "Description", "signature": "Description getDescriptionForScenario(Optional<String> className, int index, Scenario scenario)", "full_signature": "public static Description getDescriptionForScenario(Optional<String> className, int index, Scenario scenario)", "class_method_signature": "AbstractScenarioRunner.getDescriptionForScenario(Optional<String> className, int index, Scenario scenario)", "testcase": false, "constructor": false}, {"identifier": "getSpecificRunnerProvider", "parameters": "(Type type)", "modifiers": "public static", "return": "ScenarioRunnerProvider", "signature": "ScenarioRunnerProvider getSpecificRunnerProvider(Type type)", "full_signature": "public static ScenarioRunnerProvider getSpecificRunnerProvider(Type type)", "class_method_signature": "AbstractScenarioRunner.getSpecificRunnerProvider(Type type)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "(RunNotifier notifier)", "modifiers": "@Override public", "return": "void", "signature": "void run(RunNotifier notifier)", "full_signature": "@Override public void run(RunNotifier notifier)", "class_method_signature": "AbstractScenarioRunner.run(RunNotifier notifier)", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "@Override public", "return": "Description", "signature": "Description getDescription()", "full_signature": "@Override public Description getDescription()", "class_method_signature": "AbstractScenarioRunner.getDescription()", "testcase": false, "constructor": false}, {"identifier": "singleRunScenario", "parameters": "(ScenarioWithIndex scenarioWithIndex, RunNotifier runNotifier, Settings settings, Background background)", "modifiers": "protected", "return": "Optional<ScenarioResultMetadata>", "signature": "Optional<ScenarioResultMetadata> singleRunScenario(ScenarioWithIndex scenarioWithIndex, RunNotifier runNotifier, Settings settings, Background background)", "full_signature": "protected Optional<ScenarioResultMetadata> singleRunScenario(ScenarioWithIndex scenarioWithIndex, RunNotifier runNotifier, Settings settings, Background background)", "class_method_signature": "AbstractScenarioRunner.singleRunScenario(ScenarioWithIndex scenarioWithIndex, RunNotifier runNotifier, Settings settings, Background background)", "testcase": false, "constructor": false}, {"identifier": "internalRunScenario", "parameters": "(ScenarioWithIndex scenarioWithIndex, ScenarioRunnerData scenarioRunnerData, Settings settings, Background background)", "modifiers": "protected", "return": "void", "signature": "void internalRunScenario(ScenarioWithIndex scenarioWithIndex, ScenarioRunnerData scenarioRunnerData, Settings settings, Background background)", "full_signature": "protected void internalRunScenario(ScenarioWithIndex scenarioWithIndex, ScenarioRunnerData scenarioRunnerData, Settings settings, Background background)", "class_method_signature": "AbstractScenarioRunner.internalRunScenario(ScenarioWithIndex scenarioWithIndex, ScenarioRunnerData scenarioRunnerData, Settings settings, Background background)", "testcase": false, "constructor": false}, {"identifier": "getFileName", "parameters": "()", "modifiers": "public", "return": "Optional<String>", "signature": "Optional<String> getFileName()", "full_signature": "public Optional<String> getFileName()", "class_method_signature": "AbstractScenarioRunner.getFileName()", "testcase": false, "constructor": false}, {"identifier": "getClassLoader", "parameters": "()", "modifiers": "public", "return": "ClassLoader", "signature": "ClassLoader getClassLoader()", "full_signature": "public ClassLoader getClassLoader()", "class_method_signature": "AbstractScenarioRunner.getClassLoader()", "testcase": false, "constructor": false}, {"identifier": "getKieContainer", "parameters": "()", "modifiers": "public", "return": "KieContainer", "signature": "KieContainer getKieContainer()", "full_signature": "public KieContainer getKieContainer()", "class_method_signature": "AbstractScenarioRunner.getKieContainer()", "testcase": false, "constructor": false}, {"identifier": "getLastRunResultMetadata", "parameters": "()", "modifiers": "public", "return": "Optional<SimulationRunMetadata>", "signature": "Optional<SimulationRunMetadata> getLastRunResultMetadata()", "full_signature": "public Optional<SimulationRunMetadata> getLastRunResultMetadata()", "class_method_signature": "AbstractScenarioRunner.getLastRunResultMetadata()", "testcase": false, "constructor": false}, {"identifier": "newRunnerHelper", "parameters": "()", "modifiers": "protected abstract", "return": "AbstractRunnerHelper", "signature": "AbstractRunnerHelper newRunnerHelper()", "full_signature": "protected abstract AbstractRunnerHelper newRunnerHelper()", "class_method_signature": "AbstractScenarioRunner.newRunnerHelper()", "testcase": false, "constructor": false}], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/main/java/org/drools/scenariosimulation/backend/runner/AbstractScenarioRunner.java"}, "focal_method": {"identifier": "getSpecificRunnerProvider", "parameters": "(Type type)", "modifiers": "public static", "return": "ScenarioRunnerProvider", "body": "public static ScenarioRunnerProvider getSpecificRunnerProvider(Type type) {\n        if (Type.RULE.equals(type)) {\n            return RuleScenarioRunner::new;\n        } else if (Type.DMN.equals(type)) {\n            return DMNScenarioRunner::new;\n        } else {\n            throw new IllegalArgumentException(\"Impossible to run simulation of type \" + type);\n        }\n    }", "signature": "ScenarioRunnerProvider getSpecificRunnerProvider(Type type)", "full_signature": "public static ScenarioRunnerProvider getSpecificRunnerProvider(Type type)", "class_method_signature": "AbstractScenarioRunner.getSpecificRunnerProvider(Type type)", "testcase": false, "constructor": false, "invocations": ["equals", "equals"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}