{"test_class": {"identifier": "NetworkSchemaTest", "superclass": "", "interfaces": "", "fields": [], "file": "series/src/test/java/com/barchart/feed/series/network/NetworkSchemaTest.java"}, "test_case": {"identifier": "testGetPublishers", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetPublishers() {\n    \tNetworkSchema.setSchemaFilePath(\"testNetworks.txt\");\n    \tNetworkSchema.reloadDefinitions();\n    \t\n    \tNetworkDescriptor schema = NetworkSchema.getNetwork(\"PivotPoint\");\n    \tassertNotNull(schema);\n    \t\n    \tassertEquals(\"PivotPoint\", schema.getNetworkName());\n    \tassertEquals(8, schema.getNodeDescriptors().size());\n    \t\n    \tList<AnalyticNodeDescriptor> publishers = schema.getPublishers();\n    \tassertTrue(!publishers.isEmpty());\n    \tassertEquals(7, publishers.size());\n    \tfor(AnalyticNodeDescriptor and : publishers) {\n    \t\tassertTrue(!and.getSpecifier().equals(\"PP_R2\"));\n    \t}\n    }", "signature": "void testGetPublishers()", "full_signature": "@Test public void testGetPublishers()", "class_method_signature": "NetworkSchemaTest.testGetPublishers()", "testcase": true, "constructor": false, "invocations": ["setSchemaFilePath", "reloadDefinitions", "getNetwork", "assertNotNull", "assertEquals", "getNetworkName", "assertEquals", "size", "getNodeDescriptors", "getPublishers", "assertTrue", "isEmpty", "assertEquals", "size", "assertTrue", "equals", "getSpecifier"]}, "focal_class": {"identifier": "NetworkSchema", "superclass": "", "interfaces": "implements NetworkDescriptor", "fields": [{"original_string": "private static final String DEFAULT_SCHEMA_FILENAME = \"networks.txt\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_SCHEMA_FILENAME = \"networks.txt\"", "var_name": "DEFAULT_SCHEMA_FILENAME"}, {"original_string": "private static final int IDX_NETWORK_NAME = 0;", "modifier": "private static final", "type": "int", "declarator": "IDX_NETWORK_NAME = 0", "var_name": "IDX_NETWORK_NAME"}, {"original_string": "private static final int IDX_NODE_NAME = 1;", "modifier": "private static final", "type": "int", "declarator": "IDX_NODE_NAME = 1", "var_name": "IDX_NODE_NAME"}, {"original_string": "private static final int IDX_ANALYTIC_CLASS = 2;", "modifier": "private static final", "type": "int", "declarator": "IDX_ANALYTIC_CLASS = 2", "var_name": "IDX_ANALYTIC_CLASS"}, {"original_string": "private static final int IDX_CONSTRUCTOR_ARGS = 3;", "modifier": "private static final", "type": "int", "declarator": "IDX_CONSTRUCTOR_ARGS = 3", "var_name": "IDX_CONSTRUCTOR_ARGS"}, {"original_string": "private static final int IDX_OUTPUT_KEY = 4;", "modifier": "private static final", "type": "int", "declarator": "IDX_OUTPUT_KEY = 4", "var_name": "IDX_OUTPUT_KEY"}, {"original_string": "private static final int IDX_INPUT_CONFIG = 5;", "modifier": "private static final", "type": "int", "declarator": "IDX_INPUT_CONFIG = 5", "var_name": "IDX_INPUT_CONFIG"}, {"original_string": "private static Map<String,List<String[]>> networkDefinitions = new HashMap<String, List<String[]>>();", "modifier": "private static", "type": "Map<String,List<String[]>>", "declarator": "networkDefinitions = new HashMap<String, List<String[]>>()", "var_name": "networkDefinitions"}, {"original_string": "private static Map<String, AnalyticNodeDescriptor> allDescriptors = new LinkedHashMap<String, AnalyticNodeDescriptor>();", "modifier": "private static", "type": "Map<String, AnalyticNodeDescriptor>", "declarator": "allDescriptors = new LinkedHashMap<String, AnalyticNodeDescriptor>()", "var_name": "allDescriptors"}, {"original_string": "private static Map<String, List<AnalyticNodeDescriptor>> descriptorsByNetwork = new LinkedHashMap<String, List<AnalyticNodeDescriptor>>();", "modifier": "private static", "type": "Map<String, List<AnalyticNodeDescriptor>>", "declarator": "descriptorsByNetwork = new LinkedHashMap<String, List<AnalyticNodeDescriptor>>()", "var_name": "descriptorsByNetwork"}, {"original_string": "private static String schemaFileName = DEFAULT_SCHEMA_FILENAME;", "modifier": "private static", "type": "String", "declarator": "schemaFileName = DEFAULT_SCHEMA_FILENAME", "var_name": "schemaFileName"}, {"original_string": "private String name;", "modifier": "private", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private List<AnalyticNodeDescriptor> nodes;", "modifier": "private", "type": "List<AnalyticNodeDescriptor>", "declarator": "nodes", "var_name": "nodes"}, {"original_string": "private List<AnalyticNodeDescriptor> mainPublishers;", "modifier": "private", "type": "List<AnalyticNodeDescriptor>", "declarator": "mainPublishers", "var_name": "mainPublishers"}], "methods": [{"identifier": "NetworkSchema", "parameters": "(String name)", "modifiers": "public", "return": "", "signature": " NetworkSchema(String name)", "full_signature": "public  NetworkSchema(String name)", "class_method_signature": "NetworkSchema.NetworkSchema(String name)", "testcase": false, "constructor": true}, {"identifier": "NetworkSchema", "parameters": "(String name, List<AnalyticNodeDescriptor> nodes)", "modifiers": "public", "return": "", "signature": " NetworkSchema(String name, List<AnalyticNodeDescriptor> nodes)", "full_signature": "public  NetworkSchema(String name, List<AnalyticNodeDescriptor> nodes)", "class_method_signature": "NetworkSchema.NetworkSchema(String name, List<AnalyticNodeDescriptor> nodes)", "testcase": false, "constructor": true}, {"identifier": "getSpecifier", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getSpecifier()", "full_signature": "@Override public String getSpecifier()", "class_method_signature": "NetworkSchema.getSpecifier()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "@Override public", "return": "NodeType", "signature": "NodeType getType()", "full_signature": "@Override public NodeType getType()", "class_method_signature": "NetworkSchema.getType()", "testcase": false, "constructor": false}, {"identifier": "getNetworkName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getNetworkName()", "full_signature": "@Override public String getNetworkName()", "class_method_signature": "NetworkSchema.getNetworkName()", "testcase": false, "constructor": false}, {"identifier": "setNetworkName", "parameters": "(String name)", "modifiers": "@Override public", "return": "void", "signature": "void setNetworkName(String name)", "full_signature": "@Override public void setNetworkName(String name)", "class_method_signature": "NetworkSchema.setNetworkName(String name)", "testcase": false, "constructor": false}, {"identifier": "getNodeDescriptors", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "List<AnalyticNodeDescriptor>", "signature": "List<AnalyticNodeDescriptor> getNodeDescriptors()", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public List<AnalyticNodeDescriptor> getNodeDescriptors()", "class_method_signature": "NetworkSchema.getNodeDescriptors()", "testcase": false, "constructor": false}, {"identifier": "setNodeDescriptors", "parameters": "(List<T> nodes)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "signature": "void setNodeDescriptors(List<T> nodes)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void setNodeDescriptors(List<T> nodes)", "class_method_signature": "NetworkSchema.setNodeDescriptors(List<T> nodes)", "testcase": false, "constructor": false}, {"identifier": "getPublishers", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "List<AnalyticNodeDescriptor>", "signature": "List<AnalyticNodeDescriptor> getPublishers()", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public List<AnalyticNodeDescriptor> getPublishers()", "class_method_signature": "NetworkSchema.getPublishers()", "testcase": false, "constructor": false}, {"identifier": "hasNetworkByName", "parameters": "(String networkName)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasNetworkByName(String networkName)", "full_signature": "public static boolean hasNetworkByName(String networkName)", "class_method_signature": "NetworkSchema.hasNetworkByName(String networkName)", "testcase": false, "constructor": false}, {"identifier": "getSchemaFilePath", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getSchemaFilePath()", "full_signature": "public static String getSchemaFilePath()", "class_method_signature": "NetworkSchema.getSchemaFilePath()", "testcase": false, "constructor": false}, {"identifier": "setSchemaFilePath", "parameters": "(String filePath)", "modifiers": "public static", "return": "void", "signature": "void setSchemaFilePath(String filePath)", "full_signature": "public static void setSchemaFilePath(String filePath)", "class_method_signature": "NetworkSchema.setSchemaFilePath(String filePath)", "testcase": false, "constructor": false}, {"identifier": "lookup", "parameters": "(String name, int timeFrames)", "modifiers": "public static", "return": "AnalyticNodeDescriptor", "signature": "AnalyticNodeDescriptor lookup(String name, int timeFrames)", "full_signature": "public static AnalyticNodeDescriptor lookup(String name, int timeFrames)", "class_method_signature": "NetworkSchema.lookup(String name, int timeFrames)", "testcase": false, "constructor": false}, {"identifier": "lookup", "parameters": "(SeriesSubscription subscription)", "modifiers": "public static", "return": "AnalyticNodeDescriptor", "signature": "AnalyticNodeDescriptor lookup(SeriesSubscription subscription)", "full_signature": "public static AnalyticNodeDescriptor lookup(SeriesSubscription subscription)", "class_method_signature": "NetworkSchema.lookup(SeriesSubscription subscription)", "testcase": false, "constructor": false}, {"identifier": "reloadDefinitions", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void reloadDefinitions()", "full_signature": "public static void reloadDefinitions()", "class_method_signature": "NetworkSchema.reloadDefinitions()", "testcase": false, "constructor": false}, {"identifier": "getNetwork", "parameters": "(String name)", "modifiers": "public static", "return": "NetworkSchema", "signature": "NetworkSchema getNetwork(String name)", "full_signature": "public static NetworkSchema getNetwork(String name)", "class_method_signature": "NetworkSchema.getNetwork(String name)", "testcase": false, "constructor": false}, {"identifier": "loadDescriptor", "parameters": "(String[] entry)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "AnalyticNodeDescriptor", "signature": "AnalyticNodeDescriptor loadDescriptor(String[] entry)", "full_signature": "@SuppressWarnings(\"unchecked\") public static AnalyticNodeDescriptor loadDescriptor(String[] entry)", "class_method_signature": "NetworkSchema.loadDescriptor(String[] entry)", "testcase": false, "constructor": false}, {"identifier": "loadAllDescriptors", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void loadAllDescriptors()", "full_signature": "public static void loadAllDescriptors()", "class_method_signature": "NetworkSchema.loadAllDescriptors()", "testcase": false, "constructor": false}, {"identifier": "loadDefinitionsFile", "parameters": "(String fileName)", "modifiers": "public static", "return": "void", "signature": "void loadDefinitionsFile(String fileName)", "full_signature": "public static void loadDefinitionsFile(String fileName)", "class_method_signature": "NetworkSchema.loadDefinitionsFile(String fileName)", "testcase": false, "constructor": false}, {"identifier": "loadFromStream", "parameters": "(InputStream stream)", "modifiers": "public static", "return": "void", "signature": "void loadFromStream(InputStream stream)", "full_signature": "public static void loadFromStream(InputStream stream)", "class_method_signature": "NetworkSchema.loadFromStream(InputStream stream)", "testcase": false, "constructor": false}], "file": "series/src/main/java/com/barchart/feed/series/network/NetworkSchema.java"}, "focal_method": {"identifier": "getPublishers", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "List<AnalyticNodeDescriptor>", "body": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public List<AnalyticNodeDescriptor> getPublishers() {\n    \tif(nodes == null || nodes.size() < 1) {\n    \t\tthrow new IllegalStateException(\"Network: \" + name + \" was initialized with no nodes!\");\n    \t}\n    \t\n    \tif(mainPublishers == null) {\n    \t\tmainPublishers = new ArrayList<AnalyticNodeDescriptor>();\n    \t}\n    \t\n    \tint len = nodes.size();\n    \tfor(int i = 0;i < len;i++) {\n    \t\tAnalyticNodeDescriptor currCheck = nodes.get(i);\n    \t\tboolean isPublisher = true;\n    \t\tfor(int j = 0;j < len;j++) {\n    \t\t\tAnalyticNodeDescriptor iter = nodes.get(j);\n    \t\t\tif(!(isPublisher = !iter.getInputNodeDescriptors().contains(currCheck))) {\n    \t\t\t\tbreak;\n    \t\t\t}\n    \t\t}\n    \t\tif(isPublisher) mainPublishers.add(currCheck);\n    \t}\n    \treturn mainPublishers;\n    }", "signature": "List<AnalyticNodeDescriptor> getPublishers()", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public List<AnalyticNodeDescriptor> getPublishers()", "class_method_signature": "NetworkSchema.getPublishers()", "testcase": false, "constructor": false, "invocations": ["size", "size", "get", "get", "contains", "getInputNodeDescriptors", "add"]}, "repository": {"repo_id": 7243760, "url": "https://github.com/barchart/barchart-feed", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 6, "size": 64172, "license": "licensed"}}