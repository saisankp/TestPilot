{"test_class": {"identifier": "EdgeListInputStreamReaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "graphalytics-core/src/test/java/science/atlarge/graphalytics/util/io/EdgeListInputStreamReaderTest.java"}, "test_case": {"identifier": "testHasNextEdgeOnEmptyLines", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testHasNextEdgeOnEmptyLines() throws IOException {\n\t\tString input = \"\\n  \\n\t\\n\";\n\t\tInputStream inputStream = new ByteArrayInputStream(input.getBytes());\n\n\t\ttry (EdgeListInputStreamReader reader = new EdgeListInputStreamReader(inputStream)) {\n\t\t\tassertFalse(reader.hasNextEdge());\n\t\t}\n\t}", "signature": "void testHasNextEdgeOnEmptyLines()", "full_signature": "@Test public void testHasNextEdgeOnEmptyLines()", "class_method_signature": "EdgeListInputStreamReaderTest.testHasNextEdgeOnEmptyLines()", "testcase": true, "constructor": false, "invocations": ["getBytes", "assertFalse", "hasNextEdge"]}, "focal_class": {"identifier": "EdgeListInputStreamReader", "superclass": "", "interfaces": "implements EdgeListStream", "fields": [{"original_string": "private final BufferedReader reader;", "modifier": "private final", "type": "BufferedReader", "declarator": "reader", "var_name": "reader"}, {"original_string": "private final EdgeData cache = new EdgeData();", "modifier": "private final", "type": "EdgeData", "declarator": "cache = new EdgeData()", "var_name": "cache"}, {"original_string": "private boolean cacheValid;", "modifier": "private", "type": "boolean", "declarator": "cacheValid", "var_name": "cacheValid"}], "methods": [{"identifier": "EdgeListInputStreamReader", "parameters": "(InputStream inputStream)", "modifiers": "public", "return": "", "signature": " EdgeListInputStreamReader(InputStream inputStream)", "full_signature": "public  EdgeListInputStreamReader(InputStream inputStream)", "class_method_signature": "EdgeListInputStreamReader.EdgeListInputStreamReader(InputStream inputStream)", "testcase": false, "constructor": true}, {"identifier": "hasNextEdge", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasNextEdge()", "full_signature": "@Override public boolean hasNextEdge()", "class_method_signature": "EdgeListInputStreamReader.hasNextEdge()", "testcase": false, "constructor": false}, {"identifier": "getNextEdge", "parameters": "()", "modifiers": "@Override public", "return": "EdgeData", "signature": "EdgeData getNextEdge()", "full_signature": "@Override public EdgeData getNextEdge()", "class_method_signature": "EdgeListInputStreamReader.getNextEdge()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "EdgeListInputStreamReader.close()", "testcase": false, "constructor": false}], "file": "graphalytics-core/src/main/java/science/atlarge/graphalytics/util/io/EdgeListInputStreamReader.java"}, "focal_method": {"identifier": "hasNextEdge", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean hasNextEdge() throws IOException {\n\t\tif (cacheValid) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\tfor (String line = reader.readLine(); line != null; line = reader.readLine()) {\n\t\t\t\tline = line.trim();\n\t\t\t\tif (line.isEmpty()) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tString[] tokens = line.split(\" \");\n\n\t\t\t\tif (tokens.length < 2) {\n\t\t\t\t\tthrow new IOException(\"Malformed edge data in stream: \\\"\" + line + \"\\\".\");\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tcache.setSourceId(Long.parseLong(tokens[0]));\n\t\t\t\t\tcache.setDestinationId(Long.parseLong(tokens[1]));\n\t\t\t\t} catch (NumberFormatException ex) {\n\t\t\t\t\tthrow new IOException(\"Failed to parse vertex identifier from stream.\", ex);\n\t\t\t\t}\n\n\t\t\t\tif (cache.getValues().length == tokens.length - 2) {\n\t\t\t\t\tSystem.arraycopy(tokens, 2, cache.getValues(), 0, tokens.length - 2);\n\t\t\t\t} else {\n\t\t\t\t\tcache.setValues(Arrays.copyOfRange(tokens, 2, tokens.length));\n\t\t\t\t}\n\n\t\t\t\tcacheValid = true;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}", "signature": "boolean hasNextEdge()", "full_signature": "@Override public boolean hasNextEdge()", "class_method_signature": "EdgeListInputStreamReader.hasNextEdge()", "testcase": false, "constructor": false, "invocations": ["readLine", "readLine", "trim", "isEmpty", "split", "setSourceId", "parseLong", "setDestinationId", "parseLong", "getValues", "arraycopy", "getValues", "setValues", "copyOfRange"]}, "repository": {"repo_id": 22430702, "url": "https://github.com/ldbc/ldbc_graphalytics", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 51, "size": 2664, "license": "licensed"}}