{"test_class": {"identifier": "MetadataUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final org.slf4j.Logger log = LoggerFactory.getLogger(MetadataUtilTest.class);", "modifier": "private static final", "type": "org.slf4j.Logger", "declarator": "log = LoggerFactory.getLogger(MetadataUtilTest.class)", "var_name": "log"}, {"original_string": "private static File workDir;", "modifier": "private static", "type": "File", "declarator": "workDir", "var_name": "workDir"}, {"original_string": "private static final String tempDir = System.getProperty(\"java.io.tmpdir\");", "modifier": "private static final", "type": "String", "declarator": "tempDir = System.getProperty(\"java.io.tmpdir\")", "var_name": "tempDir"}, {"original_string": "private static String AExml = \"ne_AEmeta.xml\";", "modifier": "private static", "type": "String", "declarator": "AExml = \"ne_AEmeta.xml\"", "var_name": "AExml"}, {"original_string": "private static String CRxml = \"ne_CRmeta.xml\";", "modifier": "private static", "type": "String", "declarator": "CRxml = \"ne_CRmeta.xml\"", "var_name": "CRxml"}], "file": "coastal-hazards-portal/src/test/java/gov/usgs/cida/coastalhazards/rest/data/util/MetadataUtilTest.java"}, "test_case": {"identifier": "testWktBuilder", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWktBuilder() throws FactoryException {\n        String expString = getStringFromWKTBuilder();\n\n        CRSParameters parms = new CRSParameters();\n        parms.setDenflat(298.257222101);\n        parms.setEllips(\"GRS 1980\");\n        parms.setFeast(0.0);\n        parms.setFnorth(0.0);\n        parms.setGcs(\"GCS_North_American_1983\");\n        parms.setHorizdn(\"North American Datum 1983\");\n        parms.setLatprjo(23.0);\n        parms.setLengthUnit(\"Meter\");\n        parms.setLengthValue(1.0);\n        parms.setLongcm(-96.0);\n        parms.setMapprojn(\"Albers Conical Equal Area\");\n        parms.setPrimeM(\"Greenwich\\\",0.0]\");\n        parms.setProjection(\"Albers\");\n        parms.setSemiaxis(6378137.0);\n        parms.setStdparll(45.5);\n        parms.setUnit(\"Degree\\\",0.0174532925199433]]\");\n\n        String built = buildWkt(parms);\n        System.out.println(\"String builtVia wkt parm dto: \" + built);\n\n        assertEquals(expString, built);\n\n    }", "signature": "void testWktBuilder()", "full_signature": "@Test public void testWktBuilder()", "class_method_signature": "MetadataUtilTest.testWktBuilder()", "testcase": true, "constructor": false, "invocations": ["getStringFromWKTBuilder", "setDenflat", "setEllips", "setFeast", "setFnorth", "setGcs", "setHorizdn", "setLatprjo", "setLengthUnit", "setLengthValue", "setLongcm", "setMapprojn", "setPrimeM", "setProjection", "setSemiaxis", "setStdparll", "setUnit", "buildWkt", "println", "assertEquals"]}, "focal_class": {"identifier": "MetadataUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(MetadataUtil.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(MetadataUtil.class)", "var_name": "log"}, {"original_string": "public static final String[] XML_PROLOG_PATTERNS = {\"<\\\\?xml[^>]*>\", \"<!DOCTYPE[^>]*>\"};", "modifier": "public static final", "type": "String[]", "declarator": "XML_PROLOG_PATTERNS = {\"<\\\\?xml[^>]*>\", \"<!DOCTYPE[^>]*>\"}", "var_name": "XML_PROLOG_PATTERNS"}], "methods": [{"identifier": "parseMetadataBody", "parameters": "(String postBody)", "modifiers": "public static", "return": "Document", "signature": "Document parseMetadataBody(String postBody)", "full_signature": "public static Document parseMetadataBody(String postBody)", "class_method_signature": "MetadataUtil.parseMetadataBody(String postBody)", "testcase": false, "constructor": false}, {"identifier": "parseMetadataXmlFile", "parameters": "(String postBody)", "modifiers": "public static", "return": "ParsedMetadata", "signature": "ParsedMetadata parseMetadataXmlFile(String postBody)", "full_signature": "public static ParsedMetadata parseMetadataXmlFile(String postBody)", "class_method_signature": "MetadataUtil.parseMetadataXmlFile(String postBody)", "testcase": false, "constructor": false}, {"identifier": "stripXMLProlog", "parameters": "(String xml)", "modifiers": "public static", "return": "String", "signature": "String stripXMLProlog(String xml)", "full_signature": "public static String stripXMLProlog(String xml)", "class_method_signature": "MetadataUtil.stripXMLProlog(String xml)", "testcase": false, "constructor": false}, {"identifier": "extractStringsFromCswDoc", "parameters": "(Document cswDoc, String path)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> extractStringsFromCswDoc(Document cswDoc, String path)", "full_signature": "public static List<String> extractStringsFromCswDoc(Document cswDoc, String path)", "class_method_signature": "MetadataUtil.extractStringsFromCswDoc(Document cswDoc, String path)", "testcase": false, "constructor": false}, {"identifier": "extractCollectionDateFromXml", "parameters": "(Document xml, String attr)", "modifiers": "public static", "return": "String", "signature": "String extractCollectionDateFromXml(Document xml, String attr)", "full_signature": "public static String extractCollectionDateFromXml(Document xml, String attr)", "class_method_signature": "MetadataUtil.extractCollectionDateFromXml(Document xml, String attr)", "testcase": false, "constructor": false}, {"identifier": "getBoundingBoxFromFgdcMetadata", "parameters": "(String inMetadata)", "modifiers": "public static", "return": "Bbox", "signature": "Bbox getBoundingBoxFromFgdcMetadata(String inMetadata)", "full_signature": "public static Bbox getBoundingBoxFromFgdcMetadata(String inMetadata)", "class_method_signature": "MetadataUtil.getBoundingBoxFromFgdcMetadata(String inMetadata)", "testcase": false, "constructor": false}, {"identifier": "getCrsFromFgdcMetadata", "parameters": "(String inMetadata)", "modifiers": "public static", "return": "CoordinateReferenceSystem", "signature": "CoordinateReferenceSystem getCrsFromFgdcMetadata(String inMetadata)", "full_signature": "public static CoordinateReferenceSystem getCrsFromFgdcMetadata(String inMetadata)", "class_method_signature": "MetadataUtil.getCrsFromFgdcMetadata(String inMetadata)", "testcase": false, "constructor": false}, {"identifier": "buildWkt", "parameters": "(CRSParameters parms)", "modifiers": "private static", "return": "String", "signature": "String buildWkt(CRSParameters parms)", "full_signature": "private static String buildWkt(CRSParameters parms)", "class_method_signature": "MetadataUtil.buildWkt(CRSParameters parms)", "testcase": false, "constructor": false}, {"identifier": "getParameterNode", "parameters": "(String name, double value)", "modifiers": "private static", "return": "String", "signature": "String getParameterNode(String name, double value)", "full_signature": "private static String getParameterNode(String name, double value)", "class_method_signature": "MetadataUtil.getParameterNode(String name, double value)", "testcase": false, "constructor": false}, {"identifier": "getResourcesFromXml", "parameters": "(Document doc, String path)", "modifiers": "public static", "return": "List<Publication>", "signature": "List<Publication> getResourcesFromXml(Document doc, String path)", "full_signature": "public static List<Publication> getResourcesFromXml(Document doc, String path)", "class_method_signature": "MetadataUtil.getResourcesFromXml(Document doc, String path)", "testcase": false, "constructor": false}], "file": "coastal-hazards-portal/src/main/java/gov/usgs/cida/coastalhazards/rest/data/util/MetadataUtil.java"}, "focal_method": {"identifier": "buildWkt", "parameters": "(CRSParameters parms)", "modifiers": "private static", "return": "String", "body": "private static String buildWkt(CRSParameters parms)\n                {\n                StringBuilder builder = new StringBuilder(500);\n                final String lineSep = System.getProperty(\"line.separator\", \"\\n\");\n                \n                builder.append(\"PROJCS[\")\n                .append(\"\\\"\")  // quote\n                .append(parms.getMapprojn())\n                .append(\"\\\"\")  // quote\n                .append(\",\")   // comma\n                .append(lineSep)\n                \n                .append(\"GEOGCS[\")\n                .append(\"\\\"\")  // quote\n                .append(parms.getGcs())  // replace if the Gcs is found in the meta-data\n                .append(\"\\\"\")  // quote\n                .append(\",\")   // comma\n                .append(lineSep)\n                \n                .append(\"DATUM[\")\n                .append(\"\\\"\")  // quote\n                .append(parms.getHorizdn())\n                .append(\"\\\"\")  // quote\n                .append(\",\")   // comma\n                .append(lineSep)                \n                               \n                .append(\"SPHEROID[\")\n                .append(\"\\\"\")  // quote\n                .append(parms.getEllips())\n                .append(\"\\\"\")  // quote\n                .append(\",\")   // comma                \n                .append(parms.getSemiaxis())\n                .append(\",\")   // comma\n                .append(parms.getDenflat())\n                .append(\"]]\")\n                .append(\",\")   // comma\n                .append(lineSep)\n                \n                .append(\"PRIMEM[\")\n                .append(\"\\\"\")  // quote\n                .append(parms.getPrimeM())\n                .append(\",\")\n                .append(lineSep)\n                \n                .append(\"UNIT[\")\n                .append(\"\\\"\")  // quote\n                .append(parms.getUnit())  //get pa\n                .append(\",\")\n                .append(lineSep)\n             \n                .append(\"PROJECTION[\")\n                .append(\"\\\"\")  // quote\n                .append(parms.getProjection())\n                .append(\"\\\"]\")  // quote\n                .append(\",\")\n                .append(lineSep)\n                \n                .append(getParameterNode(\"False_Easting\",parms.getFeast()))\n                .append(\",\")\n                .append(lineSep)\n                \n                .append(getParameterNode(\"False_Northing\",parms.getFnorth()))\n                .append(\",\")\n                .append(lineSep)\n\n                .append(getParameterNode(\"Central_Meridian\",parms.getLongcm()))\n                .append(\",\")\n                .append(lineSep)                \n                \n                .append(getParameterNode(\"Standard_Parallel_1\",29.5)) //#TODO# relace with value\n                .append(\",\")\n                .append(lineSep)\n                \n                .append(getParameterNode(\"Standard_Parallel_2\",parms.getStdparll()))\n                .append(\",\")\n                .append(lineSep)\n\n                .append(getParameterNode(\"Latitude_Of_Origin\",parms.getLatprjo()))\n                .append(\",\") \n                .append(lineSep)\n                \n                .append(\"UNIT[\")\n                .append(\"\\\"\")  // quote\n                .append(parms.getLengthUnit()) //Meter\n                .append(\"\\\"\")  // quote\n                .append(\",\")\n                .append(parms.getLengthValue())\n                .append(\"]]\");\n                   \n                return builder.toString();\n        }", "signature": "String buildWkt(CRSParameters parms)", "full_signature": "private static String buildWkt(CRSParameters parms)", "class_method_signature": "MetadataUtil.buildWkt(CRSParameters parms)", "testcase": false, "constructor": false, "invocations": ["getProperty", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "getMapprojn", "getGcs", "getHorizdn", "getEllips", "getSemiaxis", "getDenflat", "getPrimeM", "getUnit", "getProjection", "getParameterNode", "getFeast", "getParameterNode", "getFnorth", "getParameterNode", "getLongcm", "getParameterNode", "getParameterNode", "getStdparll", "getParameterNode", "getLatprjo", "getLengthUnit", "getLengthValue", "toString"]}, "repository": {"repo_id": 6888625, "url": "https://github.com/USGS-CIDA/coastal-hazards", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 5, "size": 37212, "license": "licensed"}}