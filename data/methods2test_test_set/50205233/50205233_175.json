{"test_class": {"identifier": "SelectorsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Predicate<TableId> filter;", "modifier": "private", "type": "Predicate<TableId>", "declarator": "filter", "var_name": "filter"}], "file": "debezium-core/src/test/java/io/debezium/relational/SelectorsTest.java"}, "test_case": {"identifier": "shouldCreateFilterWithSchemaWhitelistAndTableWhitelist", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldCreateFilterWithSchemaWhitelistAndTableWhitelist() {\n        filter = Selectors.tableSelector()\n                .includeSchemas(\"sc1,sc2\")\n                .includeTables(\"db\\\\.sc1\\\\.A,db\\\\.sc2\\\\.B\")\n                .build();\n\n        assertAllowed(filter, \"db\", \"sc1\", \"A\");\n        assertNotAllowed(filter, \"db\", \"sc1\", \"B\");\n        assertAllowed(filter, \"db\", \"sc2\", \"B\");\n        assertNotAllowed(filter, \"db\", \"sc2\", \"A\");\n        assertNotAllowed(filter, \"db\", \"sc1\", \"C\");\n        assertNotAllowed(filter, \"db2\", \"sc2\", \"D\");\n        assertNotAllowed(filter, \"db\", \"sc3\", \"A\");\n        assertNotAllowed(filter, \"db2\", \"sc4\", \"B\");\n    }", "signature": "void shouldCreateFilterWithSchemaWhitelistAndTableWhitelist()", "full_signature": "@Test public void shouldCreateFilterWithSchemaWhitelistAndTableWhitelist()", "class_method_signature": "SelectorsTest.shouldCreateFilterWithSchemaWhitelistAndTableWhitelist()", "testcase": true, "constructor": false, "invocations": ["build", "includeTables", "includeSchemas", "tableSelector", "assertAllowed", "assertNotAllowed", "assertAllowed", "assertNotAllowed", "assertNotAllowed", "assertNotAllowed", "assertNotAllowed", "assertNotAllowed"]}, "focal_class": {"identifier": "Selectors", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "databaseSelector", "parameters": "()", "modifiers": "public static", "return": "DatabaseSelectionPredicateBuilder", "signature": "DatabaseSelectionPredicateBuilder databaseSelector()", "full_signature": "public static DatabaseSelectionPredicateBuilder databaseSelector()", "class_method_signature": "Selectors.databaseSelector()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(String value)", "modifiers": "private static", "return": "boolean", "signature": "boolean isEmpty(String value)", "full_signature": "private static boolean isEmpty(String value)", "class_method_signature": "Selectors.isEmpty(String value)", "testcase": false, "constructor": false}, {"identifier": "tableSelector", "parameters": "()", "modifiers": "public static", "return": "TableSelectionPredicateBuilder", "signature": "TableSelectionPredicateBuilder tableSelector()", "full_signature": "public static TableSelectionPredicateBuilder tableSelector()", "class_method_signature": "Selectors.tableSelector()", "testcase": false, "constructor": false}], "file": "debezium-core/src/main/java/io/debezium/relational/Selectors.java"}, "focal_method": {"identifier": "tableSelector", "parameters": "()", "modifiers": "public static", "return": "TableSelectionPredicateBuilder", "body": "public static TableSelectionPredicateBuilder tableSelector() {\n        return new TableSelectionPredicateBuilder();\n    }", "signature": "TableSelectionPredicateBuilder tableSelector()", "full_signature": "public static TableSelectionPredicateBuilder tableSelector()", "class_method_signature": "Selectors.tableSelector()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 50205233, "url": "https://github.com/debezium/debezium", "stars": 2686, "created": "1/22/2016 8:17:05 PM +00:00", "updates": "2020-01-27T20:48:54+00:00", "fork": "False", "license": "licensed"}}