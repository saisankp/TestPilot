{"test_class": {"identifier": "EchoProtocolTcpTaskTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CORRECT_MESSAGE = \"TCP payload!\";", "modifier": "private static final", "type": "String", "declarator": "CORRECT_MESSAGE = \"TCP payload!\"", "var_name": "CORRECT_MESSAGE"}, {"original_string": "private static final String WRONG_MESSAGE_ADDITIONAL_WHITESPACE = \"TCP payload! \";", "modifier": "private static final", "type": "String", "declarator": "WRONG_MESSAGE_ADDITIONAL_WHITESPACE = \"TCP payload! \"", "var_name": "WRONG_MESSAGE_ADDITIONAL_WHITESPACE"}, {"original_string": "private static final String WRONG_MESSAGE = \"UDP payload!\";", "modifier": "private static final", "type": "String", "declarator": "WRONG_MESSAGE = \"UDP payload!\"", "var_name": "WRONG_MESSAGE"}, {"original_string": "private static final String ECHO_SERVICE_HOST = \"echo.host\";", "modifier": "private static final", "type": "String", "declarator": "ECHO_SERVICE_HOST = \"echo.host\"", "var_name": "ECHO_SERVICE_HOST"}, {"original_string": "private OutputStream testOutputStream;", "modifier": "private", "type": "OutputStream", "declarator": "testOutputStream", "var_name": "testOutputStream"}, {"original_string": "private QualityOfServiceTest qosTest;", "modifier": "private", "type": "QualityOfServiceTest", "declarator": "qosTest", "var_name": "qosTest"}, {"original_string": "private TestSettings testSettings;", "modifier": "private", "type": "TestSettings", "declarator": "testSettings", "var_name": "testSettings"}, {"original_string": "private RMBTClient clientHolder;", "modifier": "private", "type": "RMBTClient", "declarator": "clientHolder", "var_name": "clientHolder"}], "file": "RMBTClient/src/test/java/at/rtr/rmbt/client/v2/task/EchoProtocolTcpTaskTest.java"}, "test_case": {"identifier": "testTcpEchoResponseWithSocketError", "parameters": "(@Mocked final Socket socket)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTcpEchoResponseWithSocketError (@Mocked final Socket socket) throws Exception {\n\n        new Expectations() {{\n\n            //return a custom exception (failed connection)\n            socket.getOutputStream();\n            result = new SocketException(\"Forcefully thrown exception\");\n\n            //ignore\n            socket.connect((SocketAddress) any, anyInt);\n\n        }};\n\n        final EchoProtocolTcpTask task = new EchoProtocolTcpTask(qosTest, clientHolder.getTaskDescList().get(0), 0);\n        final QoSTestResult res = task.call();\n\n        assertEquals(\"Result did not return ERROR\",\"ERROR\", res.getResultMap().get(AbstractEchoProtocolTask.RESULT_STATUS));\n        assertEquals(\"Wrong echo service host in result\", ECHO_SERVICE_HOST, res.getResultMap().get(\"echo_protocol_objective_host\"));\n        assertEquals(\"Wrong protocol type in result\", AbstractEchoProtocolTask.PROTOCOL_TCP, res.getResultMap().get(AbstractEchoProtocolTask.RESULT_PROTOCOL));\n    }", "signature": "void testTcpEchoResponseWithSocketError(@Mocked final Socket socket)", "full_signature": "@Test public void testTcpEchoResponseWithSocketError(@Mocked final Socket socket)", "class_method_signature": "EchoProtocolTcpTaskTest.testTcpEchoResponseWithSocketError(@Mocked final Socket socket)", "testcase": true, "constructor": false, "invocations": ["getOutputStream", "connect", "get", "getTaskDescList", "call", "assertEquals", "get", "getResultMap", "assertEquals", "get", "getResultMap", "assertEquals", "get", "getResultMap"]}, "focal_class": {"identifier": "EchoProtocolTcpTask", "superclass": "extends AbstractEchoProtocolTask", "interfaces": "", "fields": [], "methods": [{"identifier": "EchoProtocolTcpTask", "parameters": "(QualityOfServiceTest nnTest, TaskDesc taskDesc, int threadId)", "modifiers": "public", "return": "", "signature": " EchoProtocolTcpTask(QualityOfServiceTest nnTest, TaskDesc taskDesc, int threadId)", "full_signature": "public  EchoProtocolTcpTask(QualityOfServiceTest nnTest, TaskDesc taskDesc, int threadId)", "class_method_signature": "EchoProtocolTcpTask.EchoProtocolTcpTask(QualityOfServiceTest nnTest, TaskDesc taskDesc, int threadId)", "testcase": false, "constructor": true}, {"identifier": "call", "parameters": "()", "modifiers": "public", "return": "QoSTestResult", "signature": "QoSTestResult call()", "full_signature": "public QoSTestResult call()", "class_method_signature": "EchoProtocolTcpTask.call()", "testcase": false, "constructor": false}], "file": "RMBTClient/src/main/java/at/rtr/rmbt/client/v2/task/EchoProtocolTcpTask.java"}, "focal_method": {"identifier": "call", "parameters": "()", "modifiers": "public", "return": "QoSTestResult", "body": "public QoSTestResult call() throws Exception {\n\t\tfinal QoSTestResult result = initQoSTestResult(QosMeasurementType.ECHO_PROTOCOL);\n\t\ttry {\n\t\t\tonStart(result);\n\n\t\t\ttry {\n\t\t\t\tSystem.out.println(\"ECHO_PROTOCOL_TCP_TASK: \" + getTestServerAddr() + \":\" + getTestServerPort());\n\t\t    \t\n\n\t\t    \tif (this.testPort != null && this.testHost != null) {\n\t\t\t\t\ttry (Socket socket = getSocket(testHost, testPort, false, (int)(timeout/1000000))){\n\t\t\t\t\t\tsocket.setSoTimeout((int)(timeout/1000000));\n\t\t\t\t\t\t\n\t\t\t\t\t\tfinal long startTime = System.nanoTime();\n\t\t\t\t\t\tsendMessage(socket, this.payload + \"\\n\");\n\t\t\t\t\t\tfinal String testResponse = readLine(socket);\n\t\t\t\t\t\tfinal long duration = System.nanoTime() - startTime;\n\n\t\t\t\t\t\tresult.getResultMap().put(RESULT, testResponse);\n\t\t\t\t\t\tsocket.close();\n\t\t\t\t\t\tif (this.payload.equals(testResponse)) {\n\t\t\t\t\t\t\tresult.getResultMap().put(RESULT_STATUS, \"OK\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.getResultMap().put(RESULT_STATUS, \"ERROR\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresult.getResultMap().put(RESULT_RTT_NS, Long.toString(duration));\n\t\t\t\t\t}\n\t\t\t\t\tcatch (SocketTimeoutException e) {\n\t\t\t\t\t\tresult.getResultMap().put(RESULT_STATUS, \"TIMEOUT\");\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t\tresult.getResultMap().put(RESULT_STATUS, \"ERROR\");\n\t\t\t\t\t}\n\t\t    \t} else {\n\t\t    \t\tresult.getResultMap().put(RESULT_STATUS, \"ERROR\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t\tresult.getResultMap().put(RESULT_STATUS, \"ERROR\");\n\t\t\t}\n\t\t\t\n\t\t\treturn result;\n\t\t}\n\t\tcatch (Exception e)  {\n\t\t\tthrow e;\n\t\t}\n\t\tfinally {\n\n\t\t\tif (this.testPort != null) {\n\t\t\t\tresult.getResultMap().put(RESULT_PORT, testPort);\n\t\t\t}\n\n\t\t\tif (this.testHost != null) {\n\t\t\t\tresult.getResultMap().put(\"echo_protocol_objective_host\", this.testHost);\n\t\t\t}\n\n\t\t\tresult.getResultMap().put(RESULT_TIMEOUT, timeout);\n\n\t\t\tif (this.payload != null) {\n\t\t\t\tresult.getResultMap().put(AbstractEchoProtocolTask.PARAM_PAYLOAD, this.payload);\n\t\t\t}\n\n\t\t\tresult.getResultMap().put(AbstractEchoProtocolTask.RESULT_PROTOCOL, AbstractEchoProtocolTask.PROTOCOL_TCP);\n\n\t\t\tonEnd(result);\n\t\t}\n\t}", "signature": "QoSTestResult call()", "full_signature": "public QoSTestResult call()", "class_method_signature": "EchoProtocolTcpTask.call()", "testcase": false, "constructor": false, "invocations": ["initQoSTestResult", "onStart", "println", "getTestServerAddr", "getTestServerPort", "getSocket", "setSoTimeout", "nanoTime", "sendMessage", "readLine", "nanoTime", "put", "getResultMap", "close", "equals", "put", "getResultMap", "put", "getResultMap", "put", "getResultMap", "toString", "put", "getResultMap", "put", "getResultMap", "put", "getResultMap", "printStackTrace", "put", "getResultMap", "put", "getResultMap", "put", "getResultMap", "put", "getResultMap", "put", "getResultMap", "put", "getResultMap", "onEnd"]}, "repository": {"repo_id": 87583205, "url": "https://github.com/rtr-nettest/open-rmbt", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 15, "size": 21100, "license": "licensed"}}