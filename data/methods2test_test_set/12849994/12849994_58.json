{"test_class": {"identifier": "HeapCacheTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  CacheLoader<String, String> cacheLoader;", "modifier": "@Mock", "type": "CacheLoader<String, String>", "declarator": "cacheLoader", "var_name": "cacheLoader"}, {"original_string": "@Mock\n  EvictionListener<String, String> evictionListener;", "modifier": "@Mock", "type": "EvictionListener<String, String>", "declarator": "evictionListener", "var_name": "evictionListener"}, {"original_string": "@Mock\n  IndexHandler<String, String> indexHandler;", "modifier": "@Mock", "type": "IndexHandler<String, String>", "declarator": "indexHandler", "var_name": "indexHandler"}, {"original_string": "HeapCache<String, String> cache;", "modifier": "", "type": "HeapCache<String, String>", "declarator": "cache", "var_name": "cache"}], "file": "imcache-heap/src/test/java/com/cetsoft/imcache/heap/HeapCacheTest.java"}, "test_case": {"identifier": "getLoadsData", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void getLoadsData() {\n    doReturn(\"d\").when(cacheLoader).load(\"c\");\n\n    assertEquals(cache.get(\"c\"), \"d\");\n    verify(indexHandler).add(\"c\", \"d\");\n  }", "signature": "void getLoadsData()", "full_signature": "@Test public void getLoadsData()", "class_method_signature": "HeapCacheTest.getLoadsData()", "testcase": true, "constructor": false, "invocations": ["load", "when", "doReturn", "assertEquals", "get", "add", "verify"]}, "focal_class": {"identifier": "HeapCache", "superclass": "extends AbstractSearchableCache<K, V>", "interfaces": "", "fields": [{"original_string": "private final com.github.benmanes.caffeine.cache.Cache<K, V> caffeine;", "modifier": "private final", "type": "com.github.benmanes.caffeine.cache.Cache<K, V>", "declarator": "caffeine", "var_name": "caffeine"}, {"original_string": "private final ConcurrentCacheStats stats = new ConcurrentCacheStats();", "modifier": "private final", "type": "ConcurrentCacheStats", "declarator": "stats = new ConcurrentCacheStats()", "var_name": "stats"}], "methods": [{"identifier": "HeapCache", "parameters": "(final String name, final CacheLoader<K, V> cacheLoader,\n      final EvictionListener<K, V> evictionListener, final IndexHandler<K, V> indexHandler,\n      final long limit, final TimeUnit expiryUnit, final long expiry)", "modifiers": "public", "return": "", "signature": " HeapCache(final String name, final CacheLoader<K, V> cacheLoader,\n      final EvictionListener<K, V> evictionListener, final IndexHandler<K, V> indexHandler,\n      final long limit, final TimeUnit expiryUnit, final long expiry)", "full_signature": "public  HeapCache(final String name, final CacheLoader<K, V> cacheLoader,\n      final EvictionListener<K, V> evictionListener, final IndexHandler<K, V> indexHandler,\n      final long limit, final TimeUnit expiryUnit, final long expiry)", "class_method_signature": "HeapCache.HeapCache(final String name, final CacheLoader<K, V> cacheLoader,\n      final EvictionListener<K, V> evictionListener, final IndexHandler<K, V> indexHandler,\n      final long limit, final TimeUnit expiryUnit, final long expiry)", "testcase": false, "constructor": true}, {"identifier": "put", "parameters": "(final K key, final V value)", "modifiers": "@Override public", "return": "void", "signature": "void put(final K key, final V value)", "full_signature": "@Override public void put(final K key, final V value)", "class_method_signature": "HeapCache.put(final K key, final V value)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(final K key, final V value, final TimeUnit timeUnit, final long duration)", "modifiers": "@Override public", "return": "void", "signature": "void put(final K key, final V value, final TimeUnit timeUnit, final long duration)", "full_signature": "@Override public void put(final K key, final V value, final TimeUnit timeUnit, final long duration)", "class_method_signature": "HeapCache.put(final K key, final V value, final TimeUnit timeUnit, final long duration)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final K key)", "modifiers": "@Override public", "return": "V", "signature": "V get(final K key)", "full_signature": "@Override public V get(final K key)", "class_method_signature": "HeapCache.get(final K key)", "testcase": false, "constructor": false}, {"identifier": "invalidate", "parameters": "(final K key)", "modifiers": "@Override public", "return": "V", "signature": "V invalidate(final K key)", "full_signature": "@Override public V invalidate(final K key)", "class_method_signature": "HeapCache.invalidate(final K key)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(final K key)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(final K key)", "full_signature": "@Override public boolean contains(final K key)", "class_method_signature": "HeapCache.contains(final K key)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "HeapCache.clear()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long size()", "full_signature": "@Override public long size()", "class_method_signature": "HeapCache.size()", "testcase": false, "constructor": false}, {"identifier": "stats", "parameters": "()", "modifiers": "@Override public", "return": "CacheStats", "signature": "CacheStats stats()", "full_signature": "@Override public CacheStats stats()", "class_method_signature": "HeapCache.stats()", "testcase": false, "constructor": false}], "file": "imcache-heap/src/main/java/com/cetsoft/imcache/heap/HeapCache.java"}, "focal_method": {"identifier": "get", "parameters": "(final K key)", "modifiers": "@Override public", "return": "V", "body": "@Override\n  public V get(final K key) {\n    V value = caffeine.getIfPresent(key);\n    if (value != null) {\n      stats.incrementHitCount();\n      return value;\n    }\n    stats.incrementMissCount();\n    //Explicitly not locking at the cost of loading item once more\n    if (cacheLoader != null) {\n      value = cacheLoader.load(key);\n      if (value != null) {\n        this.put(key, value);\n        stats.incrementLoadCount();\n        return value;\n      }\n    }\n    return null;\n  }", "signature": "V get(final K key)", "full_signature": "@Override public V get(final K key)", "class_method_signature": "HeapCache.get(final K key)", "testcase": false, "constructor": false, "invocations": ["getIfPresent", "incrementHitCount", "incrementMissCount", "load", "put", "incrementLoadCount"]}, "repository": {"repo_id": 12849994, "url": "https://github.com/Cetsoft/imcache", "language": "Java", "is_fork": false, "fork_count": 38, "stargazer_count": 121, "size": 1599, "license": "licensed"}}