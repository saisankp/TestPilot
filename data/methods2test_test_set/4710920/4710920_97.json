{"test_class": {"identifier": "ClusterUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/ClusterUtilsTest.java"}, "test_case": {"identifier": "testMergeUrl", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMergeUrl() throws Exception {\n        URL providerURL = URL.valueOf(\"dubbo://localhost:55555\");\n        providerURL = providerURL.setPath(\"path\")\n                .setUsername(\"username\")\n                .setPassword(\"password\");\n\n        providerURL = URLBuilder.from(providerURL)\n                .addParameter(GROUP_KEY, \"dubbo\")\n                .addParameter(VERSION_KEY, \"1.2.3\")\n                .addParameter(DUBBO_VERSION_KEY, \"2.3.7\")\n                .addParameter(THREADPOOL_KEY, \"fixed\")\n                .addParameter(THREADS_KEY, Integer.MAX_VALUE)\n                .addParameter(THREAD_NAME_KEY, \"test\")\n                .addParameter(CORE_THREADS_KEY, Integer.MAX_VALUE)\n                .addParameter(QUEUES_KEY, Integer.MAX_VALUE)\n                .addParameter(ALIVE_KEY, Integer.MAX_VALUE)\n                .addParameter(DEFAULT_KEY_PREFIX + THREADS_KEY, Integer.MAX_VALUE)\n                .addParameter(DEFAULT_KEY_PREFIX + THREADPOOL_KEY, \"fixed\")\n                .addParameter(DEFAULT_KEY_PREFIX + CORE_THREADS_KEY, Integer.MAX_VALUE)\n                .addParameter(DEFAULT_KEY_PREFIX + QUEUES_KEY, Integer.MAX_VALUE)\n                .addParameter(DEFAULT_KEY_PREFIX + ALIVE_KEY, Integer.MAX_VALUE)\n                .addParameter(DEFAULT_KEY_PREFIX + THREAD_NAME_KEY, \"test\")\n                .addParameter(APPLICATION_KEY, \"provider\")\n                .addParameter(REFERENCE_FILTER_KEY, \"filter1,filter2\")\n                .build();\n\n        URL consumerURL = new URLBuilder(DUBBO_PROTOCOL, \"localhost\", 55555)\n                .addParameter(PID_KEY, \"1234\")\n                .addParameter(THREADPOOL_KEY, \"foo\")\n                .addParameter(APPLICATION_KEY, \"consumer\")\n                .addParameter(REFERENCE_FILTER_KEY, \"filter3\")\n                .build();\n\n        URL url = ClusterUtils.mergeUrl(providerURL, consumerURL.getParameters());\n\n        Assertions.assertFalse(url.hasParameter(THREADS_KEY));\n        Assertions.assertFalse(url.hasParameter(DEFAULT_KEY_PREFIX + THREADS_KEY));\n\n        Assertions.assertFalse(url.hasParameter(DEFAULT_KEY_PREFIX + THREADPOOL_KEY));\n\n        Assertions.assertFalse(url.hasParameter(CORE_THREADS_KEY));\n        Assertions.assertFalse(url.hasParameter(DEFAULT_KEY_PREFIX + CORE_THREADS_KEY));\n\n        Assertions.assertFalse(url.hasParameter(QUEUES_KEY));\n        Assertions.assertFalse(url.hasParameter(DEFAULT_KEY_PREFIX + QUEUES_KEY));\n\n        Assertions.assertFalse(url.hasParameter(ALIVE_KEY));\n        Assertions.assertFalse(url.hasParameter(DEFAULT_KEY_PREFIX + ALIVE_KEY));\n\n        Assertions.assertFalse(url.hasParameter(THREAD_NAME_KEY));\n        Assertions.assertFalse(url.hasParameter(DEFAULT_KEY_PREFIX + THREAD_NAME_KEY));\n\n        Assertions.assertEquals(url.getPath(), \"path\");\n        Assertions.assertEquals(url.getUsername(), \"username\");\n        Assertions.assertEquals(url.getPassword(), \"password\");\n        Assertions.assertEquals(url.getParameter(PID_KEY), \"1234\");\n        Assertions.assertEquals(url.getParameter(THREADPOOL_KEY), \"foo\");\n        Assertions.assertEquals(url.getParameter(APPLICATION_KEY), \"consumer\");\n        Assertions.assertEquals(url.getParameter(REMOTE_APPLICATION_KEY), \"provider\");\n        Assertions.assertEquals(url.getParameter(REFERENCE_FILTER_KEY), \"filter1,filter2,filter3\");\n    }", "signature": "void testMergeUrl()", "full_signature": "@Test public void testMergeUrl()", "class_method_signature": "ClusterUtilsTest.testMergeUrl()", "testcase": true, "constructor": false, "invocations": ["valueOf", "setPassword", "setUsername", "setPath", "build", "addParameter", "addParameter", "addParameter", "addParameter", "addParameter", "addParameter", "addParameter", "addParameter", "addParameter", "addParameter", "addParameter", "addParameter", "addParameter", "addParameter", "addParameter", "addParameter", "addParameter", "from", "build", "addParameter", "addParameter", "addParameter", "addParameter", "mergeUrl", "getParameters", "assertFalse", "hasParameter", "assertFalse", "hasParameter", "assertFalse", "hasParameter", "assertFalse", "hasParameter", "assertFalse", "hasParameter", "assertFalse", "hasParameter", "assertFalse", "hasParameter", "assertFalse", "hasParameter", "assertFalse", "hasParameter", "assertFalse", "hasParameter", "assertFalse", "hasParameter", "assertEquals", "getPath", "assertEquals", "getUsername", "assertEquals", "getPassword", "assertEquals", "getParameter", "assertEquals", "getParameter", "assertEquals", "getParameter", "assertEquals", "getParameter", "assertEquals", "getParameter"]}, "focal_class": {"identifier": "ClusterUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ClusterUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " ClusterUtils()", "full_signature": "private  ClusterUtils()", "class_method_signature": "ClusterUtils.ClusterUtils()", "testcase": false, "constructor": true}, {"identifier": "mergeUrl", "parameters": "(URL remoteUrl, Map<String, String> localMap)", "modifiers": "public static", "return": "URL", "signature": "URL mergeUrl(URL remoteUrl, Map<String, String> localMap)", "full_signature": "public static URL mergeUrl(URL remoteUrl, Map<String, String> localMap)", "class_method_signature": "ClusterUtils.mergeUrl(URL remoteUrl, Map<String, String> localMap)", "testcase": false, "constructor": false}, {"identifier": "mergeProviderUrl", "parameters": "(URL remoteUrl, Map<String, String> localMap)", "modifiers": "public static", "return": "URL", "signature": "URL mergeProviderUrl(URL remoteUrl, Map<String, String> localMap)", "full_signature": "public static URL mergeProviderUrl(URL remoteUrl, Map<String, String> localMap)", "class_method_signature": "ClusterUtils.mergeProviderUrl(URL remoteUrl, Map<String, String> localMap)", "testcase": false, "constructor": false}], "file": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/ClusterUtils.java"}, "focal_method": {"identifier": "mergeUrl", "parameters": "(URL remoteUrl, Map<String, String> localMap)", "modifiers": "public static", "return": "URL", "body": "public static URL mergeUrl(URL remoteUrl, Map<String, String> localMap) {\n        Map<String, String> map = new HashMap<String, String>();\n        Map<String, String> remoteMap = remoteUrl.getParameters();\n\n        if (remoteMap != null && remoteMap.size() > 0) {\n            map.putAll(remoteMap);\n\n            // Remove configurations from provider, some items should be affected by provider.\n            map.remove(THREAD_NAME_KEY);\n            map.remove(DEFAULT_KEY_PREFIX + THREAD_NAME_KEY);\n\n            map.remove(THREADPOOL_KEY);\n            map.remove(DEFAULT_KEY_PREFIX + THREADPOOL_KEY);\n\n            map.remove(CORE_THREADS_KEY);\n            map.remove(DEFAULT_KEY_PREFIX + CORE_THREADS_KEY);\n\n            map.remove(THREADS_KEY);\n            map.remove(DEFAULT_KEY_PREFIX + THREADS_KEY);\n\n            map.remove(QUEUES_KEY);\n            map.remove(DEFAULT_KEY_PREFIX + QUEUES_KEY);\n\n            map.remove(ALIVE_KEY);\n            map.remove(DEFAULT_KEY_PREFIX + ALIVE_KEY);\n\n            map.remove(Constants.TRANSPORTER_KEY);\n            map.remove(DEFAULT_KEY_PREFIX + Constants.TRANSPORTER_KEY);\n        }\n\n        if (localMap != null && localMap.size() > 0) {\n            Map<String, String> copyOfLocalMap = new HashMap<>(localMap);\n\n            if(map.containsKey(GROUP_KEY)){\n                copyOfLocalMap.remove(GROUP_KEY);\n            }\n            if(map.containsKey(VERSION_KEY)){\n                copyOfLocalMap.remove(VERSION_KEY);\n            }\n\n            copyOfLocalMap.remove(RELEASE_KEY);\n            copyOfLocalMap.remove(DUBBO_VERSION_KEY);\n            copyOfLocalMap.remove(METHODS_KEY);\n            copyOfLocalMap.remove(TIMESTAMP_KEY);\n            copyOfLocalMap.remove(TAG_KEY);\n\n            map.putAll(copyOfLocalMap);\n\n            map.put(REMOTE_APPLICATION_KEY, remoteMap.get(APPLICATION_KEY));\n\n            // Combine filters and listeners on Provider and Consumer\n            String remoteFilter = remoteMap.get(REFERENCE_FILTER_KEY);\n            String localFilter = copyOfLocalMap.get(REFERENCE_FILTER_KEY);\n            if (remoteFilter != null && remoteFilter.length() > 0\n                    && localFilter != null && localFilter.length() > 0) {\n                map.put(REFERENCE_FILTER_KEY, remoteFilter + \",\" + localFilter);\n            }\n            String remoteListener = remoteMap.get(INVOKER_LISTENER_KEY);\n            String localListener = copyOfLocalMap.get(INVOKER_LISTENER_KEY);\n            if (remoteListener != null && remoteListener.length() > 0\n                    && localListener != null && localListener.length() > 0) {\n                map.put(INVOKER_LISTENER_KEY, remoteListener + \",\" + localListener);\n            }\n        }\n\n        return remoteUrl.clearParameters().addParameters(map);\n    }", "signature": "URL mergeUrl(URL remoteUrl, Map<String, String> localMap)", "full_signature": "public static URL mergeUrl(URL remoteUrl, Map<String, String> localMap)", "class_method_signature": "ClusterUtils.mergeUrl(URL remoteUrl, Map<String, String> localMap)", "testcase": false, "constructor": false, "invocations": ["getParameters", "size", "putAll", "remove", "remove", "remove", "remove", "remove", "remove", "remove", "remove", "remove", "remove", "remove", "remove", "remove", "remove", "size", "containsKey", "remove", "containsKey", "remove", "remove", "remove", "remove", "remove", "remove", "putAll", "put", "get", "get", "get", "length", "length", "put", "get", "get", "length", "length", "put", "addParameters", "clearParameters"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}