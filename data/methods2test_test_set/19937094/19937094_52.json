{"test_class": {"identifier": "SessionTest", "superclass": "", "interfaces": "", "fields": [], "file": "quickfixj-core/src/test/java/quickfix/SessionTest.java"}, "test_case": {"identifier": "testStartOfInitiatorInsideOfSessionTime", "parameters": "()", "modifiers": "@Test // QFJ-716 - we need to make sure that the first message sent is a Logon public", "return": "void", "body": "@Test\n    // QFJ-716 - we need to make sure that the first message sent is a Logon\n    public void testStartOfInitiatorInsideOfSessionTime() throws Exception {\n\n        final LocalDateTime now = LocalDateTime.now();\n        ZoneOffset offset = ZoneOffset.systemDefault().getRules().getOffset(now);\n        final MockSystemTimeSource systemTimeSource = new MockSystemTimeSource(\n                now.toInstant(offset).toEpochMilli());\n        SystemTime.setTimeSource(systemTimeSource);\n        // set up some basic stuff\n        final SessionID sessionID = new SessionID(\n                FixVersions.BEGINSTRING_FIX44, \"SENDER\", \"TARGET\");\n        final SessionSettings settings = SessionSettingsTest.setUpSession(null);\n        // we want to start the initiator before the StartTime\n        // make sure we start inside the Session time\n        settings.setString(\"StartTime\", UtcTimeOnlyConverter.convert(now.toLocalTime().minus(2000L, ChronoUnit.MILLIS), UtcTimestampPrecision.SECONDS));\n        settings.setString(\"EndTime\",   UtcTimeOnlyConverter.convert(now.toLocalTime().plus(3600000L, ChronoUnit.MILLIS), UtcTimestampPrecision.SECONDS));\n        settings.setString(\"TimeZone\", TimeZone.getDefault().getID());\n        setupFileStoreForQFJ357(sessionID, settings);\n\n        // Session gets constructed, triggering a reset\n        final UnitTestApplication application = new UnitTestApplication();\n        try (Session session = setUpFileStoreSession(application, true,\n                new UnitTestResponder(), settings, sessionID)) {\n            final SessionState state = getSessionState(session);\n            \n            assertEquals(1, state.getNextSenderMsgSeqNum());\n            assertEquals(1, state.getNextTargetMsgSeqNum());\n            \n            session.next();\n            systemTimeSource.increment(1000);\n            session.next();\n            systemTimeSource.increment(1000);\n            session.next();\n            \n            // we should have sent a Logon since we are inside of the SessionTime\n            assertEquals(1, application.toAdminMessages.size());\n            assertEquals(MsgType.LOGON, application.toAdminMessages.get(0)\n                    .getHeader().getString(MsgType.FIELD));\n            // no reset should have been triggered by QF/J\n            assertEquals(0, application.sessionResets);\n            \n            assertEquals(2, state.getNextSenderMsgSeqNum());\n            assertEquals(1, state.getNextTargetMsgSeqNum());\n        }\n    }", "signature": "void testStartOfInitiatorInsideOfSessionTime()", "full_signature": "@Test // QFJ-716 - we need to make sure that the first message sent is a Logon public void testStartOfInitiatorInsideOfSessionTime()", "class_method_signature": "SessionTest.testStartOfInitiatorInsideOfSessionTime()", "testcase": true, "constructor": false, "invocations": ["now", "getOffset", "getRules", "systemDefault", "toEpochMilli", "toInstant", "setTimeSource", "setUpSession", "setString", "convert", "minus", "toLocalTime", "setString", "convert", "plus", "toLocalTime", "setString", "getID", "getDefault", "setupFileStoreForQFJ357", "setUpFileStoreSession", "getSessionState", "assertEquals", "getNextSenderMsgSeqNum", "assertEquals", "getNextTargetMsgSeqNum", "next", "increment", "next", "increment", "next", "assertEquals", "size", "assertEquals", "getString", "getHeader", "get", "assertEquals", "assertEquals", "getNextSenderMsgSeqNum", "assertEquals", "getNextTargetMsgSeqNum"]}, "focal_class": {"identifier": "Session", "superclass": "", "interfaces": "implements Closeable", "fields": [{"original_string": "public static final String SETTING_HEARTBTINT = \"HeartBtInt\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_HEARTBTINT = \"HeartBtInt\"", "var_name": "SETTING_HEARTBTINT"}, {"original_string": "public static final String SETTING_CHECK_LATENCY = \"CheckLatency\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_CHECK_LATENCY = \"CheckLatency\"", "var_name": "SETTING_CHECK_LATENCY"}, {"original_string": "public static final String SETTING_CHECK_COMP_ID = \"CheckCompID\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_CHECK_COMP_ID = \"CheckCompID\"", "var_name": "SETTING_CHECK_COMP_ID"}, {"original_string": "public static final String SETTING_MAX_LATENCY = \"MaxLatency\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_MAX_LATENCY = \"MaxLatency\"", "var_name": "SETTING_MAX_LATENCY"}, {"original_string": "public static final String SETTING_TEST_REQUEST_DELAY_MULTIPLIER = \"TestRequestDelayMultiplier\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_TEST_REQUEST_DELAY_MULTIPLIER = \"TestRequestDelayMultiplier\"", "var_name": "SETTING_TEST_REQUEST_DELAY_MULTIPLIER"}, {"original_string": "public static final String SETTING_HEARTBEAT_TIMEOUT_MULTIPLIER = \"HeartBeatTimeoutMultiplier\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_HEARTBEAT_TIMEOUT_MULTIPLIER = \"HeartBeatTimeoutMultiplier\"", "var_name": "SETTING_HEARTBEAT_TIMEOUT_MULTIPLIER"}, {"original_string": "public static final String SETTING_NON_STOP_SESSION = \"NonStopSession\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_NON_STOP_SESSION = \"NonStopSession\"", "var_name": "SETTING_NON_STOP_SESSION"}, {"original_string": "public static final String SETTING_START_DAY = \"StartDay\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_START_DAY = \"StartDay\"", "var_name": "SETTING_START_DAY"}, {"original_string": "public static final String SETTING_END_DAY = \"EndDay\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_END_DAY = \"EndDay\"", "var_name": "SETTING_END_DAY"}, {"original_string": "public static final String SETTING_TIMEZONE = \"TimeZone\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_TIMEZONE = \"TimeZone\"", "var_name": "SETTING_TIMEZONE"}, {"original_string": "public static final String SETTING_START_TIME = \"StartTime\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_START_TIME = \"StartTime\"", "var_name": "SETTING_START_TIME"}, {"original_string": "public static final String SETTING_END_TIME = \"EndTime\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_END_TIME = \"EndTime\"", "var_name": "SETTING_END_TIME"}, {"original_string": "public static final String SETTING_WEEKDAYS = \"Weekdays\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_WEEKDAYS = \"Weekdays\"", "var_name": "SETTING_WEEKDAYS"}, {"original_string": "public static final String SETTING_USE_DATA_DICTIONARY = \"UseDataDictionary\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_USE_DATA_DICTIONARY = \"UseDataDictionary\"", "var_name": "SETTING_USE_DATA_DICTIONARY"}, {"original_string": "public static final String SETTING_DATA_DICTIONARY = \"DataDictionary\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_DATA_DICTIONARY = \"DataDictionary\"", "var_name": "SETTING_DATA_DICTIONARY"}, {"original_string": "public static final String SETTING_TRANSPORT_DATA_DICTIONARY = \"TransportDataDictionary\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_TRANSPORT_DATA_DICTIONARY = \"TransportDataDictionary\"", "var_name": "SETTING_TRANSPORT_DATA_DICTIONARY"}, {"original_string": "public static final String SETTING_APP_DATA_DICTIONARY = \"AppDataDictionary\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_APP_DATA_DICTIONARY = \"AppDataDictionary\"", "var_name": "SETTING_APP_DATA_DICTIONARY"}, {"original_string": "public static final String SETTING_VALIDATE_FIELDS_OUT_OF_ORDER = \"ValidateFieldsOutOfOrder\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_VALIDATE_FIELDS_OUT_OF_ORDER = \"ValidateFieldsOutOfOrder\"", "var_name": "SETTING_VALIDATE_FIELDS_OUT_OF_ORDER"}, {"original_string": "public static final String SETTING_VALIDATE_UNORDERED_GROUP_FIELDS = \"ValidateUnorderedGroupFields\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_VALIDATE_UNORDERED_GROUP_FIELDS = \"ValidateUnorderedGroupFields\"", "var_name": "SETTING_VALIDATE_UNORDERED_GROUP_FIELDS"}, {"original_string": "public static final String SETTING_VALIDATE_FIELDS_HAVE_VALUES = \"ValidateFieldsHaveValues\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_VALIDATE_FIELDS_HAVE_VALUES = \"ValidateFieldsHaveValues\"", "var_name": "SETTING_VALIDATE_FIELDS_HAVE_VALUES"}, {"original_string": "public static final String SETTING_VALIDATE_INCOMING_MESSAGE = \"ValidateIncomingMessage\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_VALIDATE_INCOMING_MESSAGE = \"ValidateIncomingMessage\"", "var_name": "SETTING_VALIDATE_INCOMING_MESSAGE"}, {"original_string": "public static final String SETTING_LOGON_TIMEOUT = \"LogonTimeout\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_LOGON_TIMEOUT = \"LogonTimeout\"", "var_name": "SETTING_LOGON_TIMEOUT"}, {"original_string": "public static final String SETTING_LOGOUT_TIMEOUT = \"LogoutTimeout\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_LOGOUT_TIMEOUT = \"LogoutTimeout\"", "var_name": "SETTING_LOGOUT_TIMEOUT"}, {"original_string": "public static final String SETTING_LOGON_TAG = \"LogonTag\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_LOGON_TAG = \"LogonTag\"", "var_name": "SETTING_LOGON_TAG"}, {"original_string": "public static final String SETTING_RESET_ON_LOGOUT = \"ResetOnLogout\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_RESET_ON_LOGOUT = \"ResetOnLogout\"", "var_name": "SETTING_RESET_ON_LOGOUT"}, {"original_string": "public static final String SETTING_VALIDATE_SEQUENCE_NUMBERS = \"ValidateSequenceNumbers\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_VALIDATE_SEQUENCE_NUMBERS = \"ValidateSequenceNumbers\"", "var_name": "SETTING_VALIDATE_SEQUENCE_NUMBERS"}, {"original_string": "public static final String SETTING_RESET_ON_DISCONNECT = \"ResetOnDisconnect\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_RESET_ON_DISCONNECT = \"ResetOnDisconnect\"", "var_name": "SETTING_RESET_ON_DISCONNECT"}, {"original_string": "public static final String SETTING_RESET_ON_ERROR = \"ResetOnError\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_RESET_ON_ERROR = \"ResetOnError\"", "var_name": "SETTING_RESET_ON_ERROR"}, {"original_string": "public static final String SETTING_DISCONNECT_ON_ERROR = \"DisconnectOnError\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_DISCONNECT_ON_ERROR = \"DisconnectOnError\"", "var_name": "SETTING_DISCONNECT_ON_ERROR"}, {"original_string": "public static final String SETTING_TIMESTAMP_PRECISION = \"TimeStampPrecision\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_TIMESTAMP_PRECISION = \"TimeStampPrecision\"", "var_name": "SETTING_TIMESTAMP_PRECISION"}, {"original_string": "public static final String SETTING_VALIDATE_USER_DEFINED_FIELDS = \"ValidateUserDefinedFields\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_VALIDATE_USER_DEFINED_FIELDS = \"ValidateUserDefinedFields\"", "var_name": "SETTING_VALIDATE_USER_DEFINED_FIELDS"}, {"original_string": "public static final String SETTING_RESET_ON_LOGON = \"ResetOnLogon\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_RESET_ON_LOGON = \"ResetOnLogon\"", "var_name": "SETTING_RESET_ON_LOGON"}, {"original_string": "public static final String SETTING_DESCRIPTION = \"Description\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_DESCRIPTION = \"Description\"", "var_name": "SETTING_DESCRIPTION"}, {"original_string": "public static final String SETTING_REFRESH_ON_LOGON = \"RefreshOnLogon\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_REFRESH_ON_LOGON = \"RefreshOnLogon\"", "var_name": "SETTING_REFRESH_ON_LOGON"}, {"original_string": "public static final String SETTING_SEND_REDUNDANT_RESEND_REQUEST = \"SendRedundantResendRequests\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_SEND_REDUNDANT_RESEND_REQUEST = \"SendRedundantResendRequests\"", "var_name": "SETTING_SEND_REDUNDANT_RESEND_REQUEST"}, {"original_string": "public static final String SETTING_PERSIST_MESSAGES = \"PersistMessages\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_PERSIST_MESSAGES = \"PersistMessages\"", "var_name": "SETTING_PERSIST_MESSAGES"}, {"original_string": "public static final String SETTING_USE_CLOSED_RESEND_INTERVAL = \"ClosedResendInterval\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_USE_CLOSED_RESEND_INTERVAL = \"ClosedResendInterval\"", "var_name": "SETTING_USE_CLOSED_RESEND_INTERVAL"}, {"original_string": "public static final String SETTING_ALLOW_UNKNOWN_MSG_FIELDS = \"AllowUnknownMsgFields\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_ALLOW_UNKNOWN_MSG_FIELDS = \"AllowUnknownMsgFields\"", "var_name": "SETTING_ALLOW_UNKNOWN_MSG_FIELDS"}, {"original_string": "public static final String SETTING_DEFAULT_APPL_VER_ID = \"DefaultApplVerID\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_DEFAULT_APPL_VER_ID = \"DefaultApplVerID\"", "var_name": "SETTING_DEFAULT_APPL_VER_ID"}, {"original_string": "public static final String SETTING_DISABLE_HEART_BEAT_CHECK = \"DisableHeartBeatCheck\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_DISABLE_HEART_BEAT_CHECK = \"DisableHeartBeatCheck\"", "var_name": "SETTING_DISABLE_HEART_BEAT_CHECK"}, {"original_string": "public static final String SETTING_ENABLE_LAST_MSG_SEQ_NUM_PROCESSED = \"EnableLastMsgSeqNumProcessed\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_ENABLE_LAST_MSG_SEQ_NUM_PROCESSED = \"EnableLastMsgSeqNumProcessed\"", "var_name": "SETTING_ENABLE_LAST_MSG_SEQ_NUM_PROCESSED"}, {"original_string": "public static final String SETTING_ENABLE_NEXT_EXPECTED_MSG_SEQ_NUM = \"EnableNextExpectedMsgSeqNum\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_ENABLE_NEXT_EXPECTED_MSG_SEQ_NUM = \"EnableNextExpectedMsgSeqNum\"", "var_name": "SETTING_ENABLE_NEXT_EXPECTED_MSG_SEQ_NUM"}, {"original_string": "public static final String SETTING_REJECT_GARBLED_MESSAGE = \"RejectGarbledMessage\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_REJECT_GARBLED_MESSAGE = \"RejectGarbledMessage\"", "var_name": "SETTING_REJECT_GARBLED_MESSAGE"}, {"original_string": "public static final String SETTING_REJECT_INVALID_MESSAGE = \"RejectInvalidMessage\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_REJECT_INVALID_MESSAGE = \"RejectInvalidMessage\"", "var_name": "SETTING_REJECT_INVALID_MESSAGE"}, {"original_string": "public static final String SETTING_REJECT_MESSAGE_ON_UNHANDLED_EXCEPTION = \"RejectMessageOnUnhandledException\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_REJECT_MESSAGE_ON_UNHANDLED_EXCEPTION = \"RejectMessageOnUnhandledException\"", "var_name": "SETTING_REJECT_MESSAGE_ON_UNHANDLED_EXCEPTION"}, {"original_string": "public static final String SETTING_REQUIRES_ORIG_SENDING_TIME = \"RequiresOrigSendingTime\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_REQUIRES_ORIG_SENDING_TIME = \"RequiresOrigSendingTime\"", "var_name": "SETTING_REQUIRES_ORIG_SENDING_TIME"}, {"original_string": "public static final String SETTING_FORCE_RESEND_WHEN_CORRUPTED_STORE = \"ForceResendWhenCorruptedStore\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_FORCE_RESEND_WHEN_CORRUPTED_STORE = \"ForceResendWhenCorruptedStore\"", "var_name": "SETTING_FORCE_RESEND_WHEN_CORRUPTED_STORE"}, {"original_string": "public static final String SETTING_ALLOWED_REMOTE_ADDRESSES = \"AllowedRemoteAddresses\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_ALLOWED_REMOTE_ADDRESSES = \"AllowedRemoteAddresses\"", "var_name": "SETTING_ALLOWED_REMOTE_ADDRESSES"}, {"original_string": "public static final String SETTING_RESEND_REQUEST_CHUNK_SIZE = \"ResendRequestChunkSize\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_RESEND_REQUEST_CHUNK_SIZE = \"ResendRequestChunkSize\"", "var_name": "SETTING_RESEND_REQUEST_CHUNK_SIZE"}, {"original_string": "public static final String SETTING_MAX_SCHEDULED_WRITE_REQUESTS = \"MaxScheduledWriteRequests\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_MAX_SCHEDULED_WRITE_REQUESTS = \"MaxScheduledWriteRequests\"", "var_name": "SETTING_MAX_SCHEDULED_WRITE_REQUESTS"}, {"original_string": "public static final String SETTING_VALIDATE_CHECKSUM = \"ValidateChecksum\";", "modifier": "public static final", "type": "String", "declarator": "SETTING_VALIDATE_CHECKSUM = \"ValidateChecksum\"", "var_name": "SETTING_VALIDATE_CHECKSUM"}, {"original_string": "private static final ConcurrentMap<SessionID, Session> sessions = new ConcurrentHashMap<>();", "modifier": "private static final", "type": "ConcurrentMap<SessionID, Session>", "declarator": "sessions = new ConcurrentHashMap<>()", "var_name": "sessions"}, {"original_string": "private final Application application;", "modifier": "private final", "type": "Application", "declarator": "application", "var_name": "application"}, {"original_string": "private final SessionID sessionID;", "modifier": "private final", "type": "SessionID", "declarator": "sessionID", "var_name": "sessionID"}, {"original_string": "private final SessionSchedule sessionSchedule;", "modifier": "private final", "type": "SessionSchedule", "declarator": "sessionSchedule", "var_name": "sessionSchedule"}, {"original_string": "private final MessageFactory messageFactory;", "modifier": "private final", "type": "MessageFactory", "declarator": "messageFactory", "var_name": "messageFactory"}, {"original_string": "private final SessionState state;", "modifier": "private final", "type": "SessionState", "declarator": "state", "var_name": "state"}, {"original_string": "private volatile boolean enabled;", "modifier": "private volatile", "type": "boolean", "declarator": "enabled", "var_name": "enabled"}, {"original_string": "private final Object responderLock = new Object();", "modifier": "private final", "type": "Object", "declarator": "responderLock = new Object()", "var_name": "responderLock"}, {"original_string": "private Responder responder;", "modifier": "private", "type": "Responder", "declarator": "responder", "var_name": "responder"}, {"original_string": "private long lastSessionTimeCheck = 0;", "modifier": "private", "type": "long", "declarator": "lastSessionTimeCheck = 0", "var_name": "lastSessionTimeCheck"}, {"original_string": "private int logonAttempts = 0;", "modifier": "private", "type": "int", "declarator": "logonAttempts = 0", "var_name": "logonAttempts"}, {"original_string": "private long lastSessionLogon = 0;", "modifier": "private", "type": "long", "declarator": "lastSessionLogon = 0", "var_name": "lastSessionLogon"}, {"original_string": "private final DataDictionaryProvider dataDictionaryProvider;", "modifier": "private final", "type": "DataDictionaryProvider", "declarator": "dataDictionaryProvider", "var_name": "dataDictionaryProvider"}, {"original_string": "private final boolean checkLatency;", "modifier": "private final", "type": "boolean", "declarator": "checkLatency", "var_name": "checkLatency"}, {"original_string": "private final int maxLatency;", "modifier": "private final", "type": "int", "declarator": "maxLatency", "var_name": "maxLatency"}, {"original_string": "private int resendRequestChunkSize = 0;", "modifier": "private", "type": "int", "declarator": "resendRequestChunkSize = 0", "var_name": "resendRequestChunkSize"}, {"original_string": "private final boolean resetOnLogon;", "modifier": "private final", "type": "boolean", "declarator": "resetOnLogon", "var_name": "resetOnLogon"}, {"original_string": "private final boolean resetOnLogout;", "modifier": "private final", "type": "boolean", "declarator": "resetOnLogout", "var_name": "resetOnLogout"}, {"original_string": "private final boolean resetOnDisconnect;", "modifier": "private final", "type": "boolean", "declarator": "resetOnDisconnect", "var_name": "resetOnDisconnect"}, {"original_string": "private final boolean resetOnError;", "modifier": "private final", "type": "boolean", "declarator": "resetOnError", "var_name": "resetOnError"}, {"original_string": "private final boolean disconnectOnError;", "modifier": "private final", "type": "boolean", "declarator": "disconnectOnError", "var_name": "disconnectOnError"}, {"original_string": "private final UtcTimestampPrecision timestampPrecision;", "modifier": "private final", "type": "UtcTimestampPrecision", "declarator": "timestampPrecision", "var_name": "timestampPrecision"}, {"original_string": "private final boolean refreshOnLogon;", "modifier": "private final", "type": "boolean", "declarator": "refreshOnLogon", "var_name": "refreshOnLogon"}, {"original_string": "private final boolean redundantResentRequestsAllowed;", "modifier": "private final", "type": "boolean", "declarator": "redundantResentRequestsAllowed", "var_name": "redundantResentRequestsAllowed"}, {"original_string": "private final boolean persistMessages;", "modifier": "private final", "type": "boolean", "declarator": "persistMessages", "var_name": "persistMessages"}, {"original_string": "private final boolean checkCompID;", "modifier": "private final", "type": "boolean", "declarator": "checkCompID", "var_name": "checkCompID"}, {"original_string": "private final boolean useClosedRangeForResend;", "modifier": "private final", "type": "boolean", "declarator": "useClosedRangeForResend", "var_name": "useClosedRangeForResend"}, {"original_string": "private boolean disableHeartBeatCheck = false;", "modifier": "private", "type": "boolean", "declarator": "disableHeartBeatCheck = false", "var_name": "disableHeartBeatCheck"}, {"original_string": "private boolean rejectGarbledMessage = false;", "modifier": "private", "type": "boolean", "declarator": "rejectGarbledMessage = false", "var_name": "rejectGarbledMessage"}, {"original_string": "private boolean rejectInvalidMessage = false;", "modifier": "private", "type": "boolean", "declarator": "rejectInvalidMessage = false", "var_name": "rejectInvalidMessage"}, {"original_string": "private boolean rejectMessageOnUnhandledException = false;", "modifier": "private", "type": "boolean", "declarator": "rejectMessageOnUnhandledException = false", "var_name": "rejectMessageOnUnhandledException"}, {"original_string": "private boolean requiresOrigSendingTime = false;", "modifier": "private", "type": "boolean", "declarator": "requiresOrigSendingTime = false", "var_name": "requiresOrigSendingTime"}, {"original_string": "private boolean forceResendWhenCorruptedStore = false;", "modifier": "private", "type": "boolean", "declarator": "forceResendWhenCorruptedStore = false", "var_name": "forceResendWhenCorruptedStore"}, {"original_string": "private boolean enableNextExpectedMsgSeqNum = false;", "modifier": "private", "type": "boolean", "declarator": "enableNextExpectedMsgSeqNum = false", "var_name": "enableNextExpectedMsgSeqNum"}, {"original_string": "private boolean enableLastMsgSeqNumProcessed = false;", "modifier": "private", "type": "boolean", "declarator": "enableLastMsgSeqNumProcessed = false", "var_name": "enableLastMsgSeqNumProcessed"}, {"original_string": "private boolean validateChecksum = true;", "modifier": "private", "type": "boolean", "declarator": "validateChecksum = true", "var_name": "validateChecksum"}, {"original_string": "private int maxScheduledWriteRequests = 0;", "modifier": "private", "type": "int", "declarator": "maxScheduledWriteRequests = 0", "var_name": "maxScheduledWriteRequests"}, {"original_string": "private final AtomicBoolean isResetting = new AtomicBoolean();", "modifier": "private final", "type": "AtomicBoolean", "declarator": "isResetting = new AtomicBoolean()", "var_name": "isResetting"}, {"original_string": "private final AtomicBoolean isResettingState = new AtomicBoolean();", "modifier": "private final", "type": "AtomicBoolean", "declarator": "isResettingState = new AtomicBoolean()", "var_name": "isResettingState"}, {"original_string": "private final ListenerSupport stateListeners = new ListenerSupport(SessionStateListener.class);", "modifier": "private final", "type": "ListenerSupport", "declarator": "stateListeners = new ListenerSupport(SessionStateListener.class)", "var_name": "stateListeners"}, {"original_string": "private final SessionStateListener stateListener = (SessionStateListener) stateListeners\n            .getMulticaster();", "modifier": "private final", "type": "SessionStateListener", "declarator": "stateListener = (SessionStateListener) stateListeners\n            .getMulticaster()", "var_name": "stateListener"}, {"original_string": "private final AtomicReference<ApplVerID> targetDefaultApplVerID = new AtomicReference<>();", "modifier": "private final", "type": "AtomicReference<ApplVerID>", "declarator": "targetDefaultApplVerID = new AtomicReference<>()", "var_name": "targetDefaultApplVerID"}, {"original_string": "private final DefaultApplVerID senderDefaultApplVerID;", "modifier": "private final", "type": "DefaultApplVerID", "declarator": "senderDefaultApplVerID", "var_name": "senderDefaultApplVerID"}, {"original_string": "private final boolean validateSequenceNumbers;", "modifier": "private final", "type": "boolean", "declarator": "validateSequenceNumbers", "var_name": "validateSequenceNumbers"}, {"original_string": "private final boolean validateIncomingMessage;", "modifier": "private final", "type": "boolean", "declarator": "validateIncomingMessage", "var_name": "validateIncomingMessage"}, {"original_string": "private final int[] logonIntervals;", "modifier": "private final", "type": "int[]", "declarator": "logonIntervals", "var_name": "logonIntervals"}, {"original_string": "private final Set<InetAddress> allowedRemoteAddresses;", "modifier": "private final", "type": "Set<InetAddress>", "declarator": "allowedRemoteAddresses", "var_name": "allowedRemoteAddresses"}, {"original_string": "public static final int DEFAULT_MAX_LATENCY = 120;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_MAX_LATENCY = 120", "var_name": "DEFAULT_MAX_LATENCY"}, {"original_string": "public static final int DEFAULT_RESEND_RANGE_CHUNK_SIZE = 0;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_RESEND_RANGE_CHUNK_SIZE = 0", "var_name": "DEFAULT_RESEND_RANGE_CHUNK_SIZE"}, {"original_string": "public static final double DEFAULT_TEST_REQUEST_DELAY_MULTIPLIER = 0.5;", "modifier": "public static final", "type": "double", "declarator": "DEFAULT_TEST_REQUEST_DELAY_MULTIPLIER = 0.5", "var_name": "DEFAULT_TEST_REQUEST_DELAY_MULTIPLIER"}, {"original_string": "public static final double DEFAULT_HEARTBEAT_TIMEOUT_MULTIPLIER = 1.4;", "modifier": "public static final", "type": "double", "declarator": "DEFAULT_HEARTBEAT_TIMEOUT_MULTIPLIER = 1.4", "var_name": "DEFAULT_HEARTBEAT_TIMEOUT_MULTIPLIER"}, {"original_string": "private static final String ENCOUNTERED_END_OF_STREAM = \"Encountered END_OF_STREAM\";", "modifier": "private static final", "type": "String", "declarator": "ENCOUNTERED_END_OF_STREAM = \"Encountered END_OF_STREAM\"", "var_name": "ENCOUNTERED_END_OF_STREAM"}, {"original_string": "private static final int BAD_COMPID_REJ_REASON = SessionRejectReason.COMPID_PROBLEM;", "modifier": "private static final", "type": "int", "declarator": "BAD_COMPID_REJ_REASON = SessionRejectReason.COMPID_PROBLEM", "var_name": "BAD_COMPID_REJ_REASON"}, {"original_string": "private static final String BAD_COMPID_TEXT = new FieldException(BAD_COMPID_REJ_REASON).getMessage();", "modifier": "private static final", "type": "String", "declarator": "BAD_COMPID_TEXT = new FieldException(BAD_COMPID_REJ_REASON).getMessage()", "var_name": "BAD_COMPID_TEXT"}, {"original_string": "private static final int BAD_TIME_REJ_REASON = SessionRejectReason.SENDINGTIME_ACCURACY_PROBLEM;", "modifier": "private static final", "type": "int", "declarator": "BAD_TIME_REJ_REASON = SessionRejectReason.SENDINGTIME_ACCURACY_PROBLEM", "var_name": "BAD_TIME_REJ_REASON"}, {"original_string": "private static final String BAD_ORIG_TIME_TEXT = new FieldException(BAD_TIME_REJ_REASON, OrigSendingTime.FIELD).getMessage();", "modifier": "private static final", "type": "String", "declarator": "BAD_ORIG_TIME_TEXT = new FieldException(BAD_TIME_REJ_REASON, OrigSendingTime.FIELD).getMessage()", "var_name": "BAD_ORIG_TIME_TEXT"}, {"original_string": "private static final String BAD_TIME_TEXT = new FieldException(BAD_TIME_REJ_REASON, SendingTime.FIELD).getMessage();", "modifier": "private static final", "type": "String", "declarator": "BAD_TIME_TEXT = new FieldException(BAD_TIME_REJ_REASON, SendingTime.FIELD).getMessage()", "var_name": "BAD_TIME_TEXT"}, {"original_string": "private final List<StringField> logonTags;", "modifier": "private final", "type": "List<StringField>", "declarator": "logonTags", "var_name": "logonTags"}, {"original_string": "protected static final Logger LOG = LoggerFactory.getLogger(Session.class);", "modifier": "protected static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(Session.class)", "var_name": "LOG"}], "methods": [{"identifier": "Session", "parameters": "(Application application, MessageStoreFactory messageStoreFactory, SessionID sessionID,\n            DataDictionaryProvider dataDictionaryProvider, SessionSchedule sessionSchedule, LogFactory logFactory,\n            MessageFactory messageFactory, int heartbeatInterval)", "modifiers": "", "return": "", "signature": " Session(Application application, MessageStoreFactory messageStoreFactory, SessionID sessionID,\n            DataDictionaryProvider dataDictionaryProvider, SessionSchedule sessionSchedule, LogFactory logFactory,\n            MessageFactory messageFactory, int heartbeatInterval)", "full_signature": "  Session(Application application, MessageStoreFactory messageStoreFactory, SessionID sessionID,\n            DataDictionaryProvider dataDictionaryProvider, SessionSchedule sessionSchedule, LogFactory logFactory,\n            MessageFactory messageFactory, int heartbeatInterval)", "class_method_signature": "Session.Session(Application application, MessageStoreFactory messageStoreFactory, SessionID sessionID,\n            DataDictionaryProvider dataDictionaryProvider, SessionSchedule sessionSchedule, LogFactory logFactory,\n            MessageFactory messageFactory, int heartbeatInterval)", "testcase": false, "constructor": true}, {"identifier": "Session", "parameters": "(Application application, MessageStoreFactory messageStoreFactory, SessionID sessionID,\n            DataDictionaryProvider dataDictionaryProvider, SessionSchedule sessionSchedule,\n            LogFactory logFactory, MessageFactory messageFactory, int heartbeatInterval,\n            boolean checkLatency, int maxLatency, UtcTimestampPrecision timestampPrecision,\n            boolean resetOnLogon, boolean resetOnLogout, boolean resetOnDisconnect,\n            boolean refreshOnLogon, boolean checkCompID,\n            boolean redundantResentRequestsAllowed, boolean persistMessages,\n            boolean useClosedRangeForResend, double testRequestDelayMultiplier,\n            DefaultApplVerID senderDefaultApplVerID, boolean validateSequenceNumbers,\n            int[] logonIntervals, boolean resetOnError, boolean disconnectOnError,\n            boolean disableHeartBeatCheck, boolean rejectGarbledMessage, boolean rejectInvalidMessage,\n            boolean rejectMessageOnUnhandledException, boolean requiresOrigSendingTime,\n            boolean forceResendWhenCorruptedStore, Set<InetAddress> allowedRemoteAddresses,\n            boolean validateIncomingMessage, int resendRequestChunkSize,\n            boolean enableNextExpectedMsgSeqNum, boolean enableLastMsgSeqNumProcessed,\n            boolean validateChecksum, List<StringField> logonTags, double heartBeatTimeoutMultiplier)", "modifiers": "", "return": "", "signature": " Session(Application application, MessageStoreFactory messageStoreFactory, SessionID sessionID,\n            DataDictionaryProvider dataDictionaryProvider, SessionSchedule sessionSchedule,\n            LogFactory logFactory, MessageFactory messageFactory, int heartbeatInterval,\n            boolean checkLatency, int maxLatency, UtcTimestampPrecision timestampPrecision,\n            boolean resetOnLogon, boolean resetOnLogout, boolean resetOnDisconnect,\n            boolean refreshOnLogon, boolean checkCompID,\n            boolean redundantResentRequestsAllowed, boolean persistMessages,\n            boolean useClosedRangeForResend, double testRequestDelayMultiplier,\n            DefaultApplVerID senderDefaultApplVerID, boolean validateSequenceNumbers,\n            int[] logonIntervals, boolean resetOnError, boolean disconnectOnError,\n            boolean disableHeartBeatCheck, boolean rejectGarbledMessage, boolean rejectInvalidMessage,\n            boolean rejectMessageOnUnhandledException, boolean requiresOrigSendingTime,\n            boolean forceResendWhenCorruptedStore, Set<InetAddress> allowedRemoteAddresses,\n            boolean validateIncomingMessage, int resendRequestChunkSize,\n            boolean enableNextExpectedMsgSeqNum, boolean enableLastMsgSeqNumProcessed,\n            boolean validateChecksum, List<StringField> logonTags, double heartBeatTimeoutMultiplier)", "full_signature": "  Session(Application application, MessageStoreFactory messageStoreFactory, SessionID sessionID,\n            DataDictionaryProvider dataDictionaryProvider, SessionSchedule sessionSchedule,\n            LogFactory logFactory, MessageFactory messageFactory, int heartbeatInterval,\n            boolean checkLatency, int maxLatency, UtcTimestampPrecision timestampPrecision,\n            boolean resetOnLogon, boolean resetOnLogout, boolean resetOnDisconnect,\n            boolean refreshOnLogon, boolean checkCompID,\n            boolean redundantResentRequestsAllowed, boolean persistMessages,\n            boolean useClosedRangeForResend, double testRequestDelayMultiplier,\n            DefaultApplVerID senderDefaultApplVerID, boolean validateSequenceNumbers,\n            int[] logonIntervals, boolean resetOnError, boolean disconnectOnError,\n            boolean disableHeartBeatCheck, boolean rejectGarbledMessage, boolean rejectInvalidMessage,\n            boolean rejectMessageOnUnhandledException, boolean requiresOrigSendingTime,\n            boolean forceResendWhenCorruptedStore, Set<InetAddress> allowedRemoteAddresses,\n            boolean validateIncomingMessage, int resendRequestChunkSize,\n            boolean enableNextExpectedMsgSeqNum, boolean enableLastMsgSeqNumProcessed,\n            boolean validateChecksum, List<StringField> logonTags, double heartBeatTimeoutMultiplier)", "class_method_signature": "Session.Session(Application application, MessageStoreFactory messageStoreFactory, SessionID sessionID,\n            DataDictionaryProvider dataDictionaryProvider, SessionSchedule sessionSchedule,\n            LogFactory logFactory, MessageFactory messageFactory, int heartbeatInterval,\n            boolean checkLatency, int maxLatency, UtcTimestampPrecision timestampPrecision,\n            boolean resetOnLogon, boolean resetOnLogout, boolean resetOnDisconnect,\n            boolean refreshOnLogon, boolean checkCompID,\n            boolean redundantResentRequestsAllowed, boolean persistMessages,\n            boolean useClosedRangeForResend, double testRequestDelayMultiplier,\n            DefaultApplVerID senderDefaultApplVerID, boolean validateSequenceNumbers,\n            int[] logonIntervals, boolean resetOnError, boolean disconnectOnError,\n            boolean disableHeartBeatCheck, boolean rejectGarbledMessage, boolean rejectInvalidMessage,\n            boolean rejectMessageOnUnhandledException, boolean requiresOrigSendingTime,\n            boolean forceResendWhenCorruptedStore, Set<InetAddress> allowedRemoteAddresses,\n            boolean validateIncomingMessage, int resendRequestChunkSize,\n            boolean enableNextExpectedMsgSeqNum, boolean enableLastMsgSeqNumProcessed,\n            boolean validateChecksum, List<StringField> logonTags, double heartBeatTimeoutMultiplier)", "testcase": false, "constructor": true}, {"identifier": "getMessageFactory", "parameters": "()", "modifiers": "public", "return": "MessageFactory", "signature": "MessageFactory getMessageFactory()", "full_signature": "public MessageFactory getMessageFactory()", "class_method_signature": "Session.getMessageFactory()", "testcase": false, "constructor": false}, {"identifier": "setResponder", "parameters": "(Responder responder)", "modifiers": "public", "return": "void", "signature": "void setResponder(Responder responder)", "full_signature": "public void setResponder(Responder responder)", "class_method_signature": "Session.setResponder(Responder responder)", "testcase": false, "constructor": false}, {"identifier": "getResponder", "parameters": "()", "modifiers": "public", "return": "Responder", "signature": "Responder getResponder()", "full_signature": "public Responder getResponder()", "class_method_signature": "Session.getResponder()", "testcase": false, "constructor": false}, {"identifier": "hasResponder", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasResponder()", "full_signature": "public boolean hasResponder()", "class_method_signature": "Session.hasResponder()", "testcase": false, "constructor": false}, {"identifier": "getRemoteAddress", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getRemoteAddress()", "full_signature": "public String getRemoteAddress()", "class_method_signature": "Session.getRemoteAddress()", "testcase": false, "constructor": false}, {"identifier": "isCurrentSession", "parameters": "(final long time)", "modifiers": "private", "return": "boolean", "signature": "boolean isCurrentSession(final long time)", "full_signature": "private boolean isCurrentSession(final long time)", "class_method_signature": "Session.isCurrentSession(final long time)", "testcase": false, "constructor": false}, {"identifier": "sendToTarget", "parameters": "(Message message)", "modifiers": "public static", "return": "boolean", "signature": "boolean sendToTarget(Message message)", "full_signature": "public static boolean sendToTarget(Message message)", "class_method_signature": "Session.sendToTarget(Message message)", "testcase": false, "constructor": false}, {"identifier": "sendToTarget", "parameters": "(Message message, String qualifier)", "modifiers": "public static", "return": "boolean", "signature": "boolean sendToTarget(Message message, String qualifier)", "full_signature": "public static boolean sendToTarget(Message message, String qualifier)", "class_method_signature": "Session.sendToTarget(Message message, String qualifier)", "testcase": false, "constructor": false}, {"identifier": "getTargetCompIDFromMessage", "parameters": "(final Message message)", "modifiers": "private static", "return": "String", "signature": "String getTargetCompIDFromMessage(final Message message)", "full_signature": "private static String getTargetCompIDFromMessage(final Message message)", "class_method_signature": "Session.getTargetCompIDFromMessage(final Message message)", "testcase": false, "constructor": false}, {"identifier": "getSenderCompIDFromMessage", "parameters": "(final Message message)", "modifiers": "private static", "return": "String", "signature": "String getSenderCompIDFromMessage(final Message message)", "full_signature": "private static String getSenderCompIDFromMessage(final Message message)", "class_method_signature": "Session.getSenderCompIDFromMessage(final Message message)", "testcase": false, "constructor": false}, {"identifier": "sendToTarget", "parameters": "(Message message, String senderCompID, String targetCompID)", "modifiers": "public static", "return": "boolean", "signature": "boolean sendToTarget(Message message, String senderCompID, String targetCompID)", "full_signature": "public static boolean sendToTarget(Message message, String senderCompID, String targetCompID)", "class_method_signature": "Session.sendToTarget(Message message, String senderCompID, String targetCompID)", "testcase": false, "constructor": false}, {"identifier": "sendToTarget", "parameters": "(Message message, String senderCompID, String targetCompID,\n            String qualifier)", "modifiers": "public static", "return": "boolean", "signature": "boolean sendToTarget(Message message, String senderCompID, String targetCompID,\n            String qualifier)", "full_signature": "public static boolean sendToTarget(Message message, String senderCompID, String targetCompID,\n            String qualifier)", "class_method_signature": "Session.sendToTarget(Message message, String senderCompID, String targetCompID,\n            String qualifier)", "testcase": false, "constructor": false}, {"identifier": "sendToTarget", "parameters": "(Message message, SessionID sessionID)", "modifiers": "public static", "return": "boolean", "signature": "boolean sendToTarget(Message message, SessionID sessionID)", "full_signature": "public static boolean sendToTarget(Message message, SessionID sessionID)", "class_method_signature": "Session.sendToTarget(Message message, SessionID sessionID)", "testcase": false, "constructor": false}, {"identifier": "registerSession", "parameters": "(Session session)", "modifiers": "static", "return": "void", "signature": "void registerSession(Session session)", "full_signature": "static void registerSession(Session session)", "class_method_signature": "Session.registerSession(Session session)", "testcase": false, "constructor": false}, {"identifier": "unregisterSessions", "parameters": "(List<SessionID> sessionIds, boolean doClose)", "modifiers": "static", "return": "void", "signature": "void unregisterSessions(List<SessionID> sessionIds, boolean doClose)", "full_signature": "static void unregisterSessions(List<SessionID> sessionIds, boolean doClose)", "class_method_signature": "Session.unregisterSessions(List<SessionID> sessionIds, boolean doClose)", "testcase": false, "constructor": false}, {"identifier": "unregisterSession", "parameters": "(SessionID sessionId, boolean doClose)", "modifiers": "static", "return": "void", "signature": "void unregisterSession(SessionID sessionId, boolean doClose)", "full_signature": "static void unregisterSession(SessionID sessionId, boolean doClose)", "class_method_signature": "Session.unregisterSession(SessionID sessionId, boolean doClose)", "testcase": false, "constructor": false}, {"identifier": "lookupSession", "parameters": "(SessionID sessionID)", "modifiers": "public static", "return": "Session", "signature": "Session lookupSession(SessionID sessionID)", "full_signature": "public static Session lookupSession(SessionID sessionID)", "class_method_signature": "Session.lookupSession(SessionID sessionID)", "testcase": false, "constructor": false}, {"identifier": "logon", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void logon()", "full_signature": "public void logon()", "class_method_signature": "Session.logon()", "testcase": false, "constructor": false}, {"identifier": "setEnabled", "parameters": "(boolean enabled)", "modifiers": "private", "return": "void", "signature": "void setEnabled(boolean enabled)", "full_signature": "private void setEnabled(boolean enabled)", "class_method_signature": "Session.setEnabled(boolean enabled)", "testcase": false, "constructor": false}, {"identifier": "initializeHeader", "parameters": "(Message.Header header)", "modifiers": "private", "return": "void", "signature": "void initializeHeader(Message.Header header)", "full_signature": "private void initializeHeader(Message.Header header)", "class_method_signature": "Session.initializeHeader(Message.Header header)", "testcase": false, "constructor": false}, {"identifier": "optionallySetID", "parameters": "(Header header, int field, String value)", "modifiers": "private", "return": "void", "signature": "void optionallySetID(Header header, int field, String value)", "full_signature": "private void optionallySetID(Header header, int field, String value)", "class_method_signature": "Session.optionallySetID(Header header, int field, String value)", "testcase": false, "constructor": false}, {"identifier": "insertSendingTime", "parameters": "(Message.Header header)", "modifiers": "private", "return": "void", "signature": "void insertSendingTime(Message.Header header)", "full_signature": "private void insertSendingTime(Message.Header header)", "class_method_signature": "Session.insertSendingTime(Message.Header header)", "testcase": false, "constructor": false}, {"identifier": "getTimestampPrecision", "parameters": "()", "modifiers": "private", "return": "UtcTimestampPrecision", "signature": "UtcTimestampPrecision getTimestampPrecision()", "full_signature": "private UtcTimestampPrecision getTimestampPrecision()", "class_method_signature": "Session.getTimestampPrecision()", "testcase": false, "constructor": false}, {"identifier": "logout", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void logout()", "full_signature": "public void logout()", "class_method_signature": "Session.logout()", "testcase": false, "constructor": false}, {"identifier": "logout", "parameters": "(String reason)", "modifiers": "public", "return": "void", "signature": "void logout(String reason)", "full_signature": "public void logout(String reason)", "class_method_signature": "Session.logout(String reason)", "testcase": false, "constructor": false}, {"identifier": "isEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEnabled()", "full_signature": "public boolean isEnabled()", "class_method_signature": "Session.isEnabled()", "testcase": false, "constructor": false}, {"identifier": "sentLogon", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean sentLogon()", "full_signature": "public boolean sentLogon()", "class_method_signature": "Session.sentLogon()", "testcase": false, "constructor": false}, {"identifier": "receivedLogon", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean receivedLogon()", "full_signature": "public boolean receivedLogon()", "class_method_signature": "Session.receivedLogon()", "testcase": false, "constructor": false}, {"identifier": "sentLogout", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean sentLogout()", "full_signature": "public boolean sentLogout()", "class_method_signature": "Session.sentLogout()", "testcase": false, "constructor": false}, {"identifier": "receivedLogout", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean receivedLogout()", "full_signature": "public boolean receivedLogout()", "class_method_signature": "Session.receivedLogout()", "testcase": false, "constructor": false}, {"identifier": "isLoggedOn", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isLoggedOn()", "full_signature": "public boolean isLoggedOn()", "class_method_signature": "Session.isLoggedOn()", "testcase": false, "constructor": false}, {"identifier": "isResetNeeded", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isResetNeeded()", "full_signature": "private boolean isResetNeeded()", "class_method_signature": "Session.isResetNeeded()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "Session.reset()", "testcase": false, "constructor": false}, {"identifier": "setNextSenderMsgSeqNum", "parameters": "(int num)", "modifiers": "public", "return": "void", "signature": "void setNextSenderMsgSeqNum(int num)", "full_signature": "public void setNextSenderMsgSeqNum(int num)", "class_method_signature": "Session.setNextSenderMsgSeqNum(int num)", "testcase": false, "constructor": false}, {"identifier": "setNextTargetMsgSeqNum", "parameters": "(int num)", "modifiers": "public", "return": "void", "signature": "void setNextTargetMsgSeqNum(int num)", "full_signature": "public void setNextTargetMsgSeqNum(int num)", "class_method_signature": "Session.setNextTargetMsgSeqNum(int num)", "testcase": false, "constructor": false}, {"identifier": "getExpectedSenderNum", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getExpectedSenderNum()", "full_signature": "public int getExpectedSenderNum()", "class_method_signature": "Session.getExpectedSenderNum()", "testcase": false, "constructor": false}, {"identifier": "getExpectedTargetNum", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getExpectedTargetNum()", "full_signature": "public int getExpectedTargetNum()", "class_method_signature": "Session.getExpectedTargetNum()", "testcase": false, "constructor": false}, {"identifier": "getLog", "parameters": "()", "modifiers": "public", "return": "Log", "signature": "Log getLog()", "full_signature": "public Log getLog()", "class_method_signature": "Session.getLog()", "testcase": false, "constructor": false}, {"identifier": "getStore", "parameters": "()", "modifiers": "public", "return": "MessageStore", "signature": "MessageStore getStore()", "full_signature": "public MessageStore getStore()", "class_method_signature": "Session.getStore()", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "(Message message, boolean isProcessingQueuedMessages)", "modifiers": "private", "return": "void", "signature": "void next(Message message, boolean isProcessingQueuedMessages)", "full_signature": "private void next(Message message, boolean isProcessingQueuedMessages)", "class_method_signature": "Session.next(Message message, boolean isProcessingQueuedMessages)", "testcase": false, "constructor": false}, {"identifier": "handleExceptionAndRejectMessage", "parameters": "(final String msgType, final Message message, final HasFieldAndReason e)", "modifiers": "private", "return": "void", "signature": "void handleExceptionAndRejectMessage(final String msgType, final Message message, final HasFieldAndReason e)", "full_signature": "private void handleExceptionAndRejectMessage(final String msgType, final Message message, final HasFieldAndReason e)", "class_method_signature": "Session.handleExceptionAndRejectMessage(final String msgType, final Message message, final HasFieldAndReason e)", "testcase": false, "constructor": false}, {"identifier": "logoutWithErrorMessage", "parameters": "(final String reason)", "modifiers": "private", "return": "void", "signature": "void logoutWithErrorMessage(final String reason)", "full_signature": "private void logoutWithErrorMessage(final String reason)", "class_method_signature": "Session.logoutWithErrorMessage(final String reason)", "testcase": false, "constructor": false}, {"identifier": "logErrorAndDisconnectIfRequired", "parameters": "(final Exception e, Message message)", "modifiers": "private", "return": "boolean", "signature": "boolean logErrorAndDisconnectIfRequired(final Exception e, Message message)", "full_signature": "private boolean logErrorAndDisconnectIfRequired(final Exception e, Message message)", "class_method_signature": "Session.logErrorAndDisconnectIfRequired(final Exception e, Message message)", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "(Message message)", "modifiers": "public", "return": "void", "signature": "void next(Message message)", "full_signature": "public void next(Message message)", "class_method_signature": "Session.next(Message message)", "testcase": false, "constructor": false}, {"identifier": "resetOrDisconnectIfRequired", "parameters": "(Message msg)", "modifiers": "private", "return": "boolean", "signature": "boolean resetOrDisconnectIfRequired(Message msg)", "full_signature": "private boolean resetOrDisconnectIfRequired(Message msg)", "class_method_signature": "Session.resetOrDisconnectIfRequired(Message msg)", "testcase": false, "constructor": false}, {"identifier": "nextReject", "parameters": "(Message reject)", "modifiers": "private", "return": "void", "signature": "void nextReject(Message reject)", "full_signature": "private void nextReject(Message reject)", "class_method_signature": "Session.nextReject(Message reject)", "testcase": false, "constructor": false}, {"identifier": "nextResendRequest", "parameters": "(Message resendRequest)", "modifiers": "private", "return": "void", "signature": "void nextResendRequest(Message resendRequest)", "full_signature": "private void nextResendRequest(Message resendRequest)", "class_method_signature": "Session.nextResendRequest(Message resendRequest)", "testcase": false, "constructor": false}, {"identifier": "manageGapFill", "parameters": "(Message messageOutSync, int beginSeqNo, int endSeqNo)", "modifiers": "private", "return": "void", "signature": "void manageGapFill(Message messageOutSync, int beginSeqNo, int endSeqNo)", "full_signature": "private void manageGapFill(Message messageOutSync, int beginSeqNo, int endSeqNo)", "class_method_signature": "Session.manageGapFill(Message messageOutSync, int beginSeqNo, int endSeqNo)", "testcase": false, "constructor": false}, {"identifier": "formatEndSeqNum", "parameters": "(int seqNo)", "modifiers": "private", "return": "String", "signature": "String formatEndSeqNum(int seqNo)", "full_signature": "private String formatEndSeqNum(int seqNo)", "class_method_signature": "Session.formatEndSeqNum(int seqNo)", "testcase": false, "constructor": false}, {"identifier": "parseMessage", "parameters": "(String messageData)", "modifiers": "private", "return": "Message", "signature": "Message parseMessage(String messageData)", "full_signature": "private Message parseMessage(String messageData)", "class_method_signature": "Session.parseMessage(String messageData)", "testcase": false, "constructor": false}, {"identifier": "isTargetTooLow", "parameters": "(int msgSeqNum)", "modifiers": "private", "return": "boolean", "signature": "boolean isTargetTooLow(int msgSeqNum)", "full_signature": "private boolean isTargetTooLow(int msgSeqNum)", "class_method_signature": "Session.isTargetTooLow(int msgSeqNum)", "testcase": false, "constructor": false}, {"identifier": "generateSequenceReset", "parameters": "(Message receivedMessage, int beginSeqNo, int endSeqNo)", "modifiers": "private", "return": "void", "signature": "void generateSequenceReset(Message receivedMessage, int beginSeqNo, int endSeqNo)", "full_signature": "private void generateSequenceReset(Message receivedMessage, int beginSeqNo, int endSeqNo)", "class_method_signature": "Session.generateSequenceReset(Message receivedMessage, int beginSeqNo, int endSeqNo)", "testcase": false, "constructor": false}, {"identifier": "resendApproved", "parameters": "(Message message)", "modifiers": "private", "return": "boolean", "signature": "boolean resendApproved(Message message)", "full_signature": "private boolean resendApproved(Message message)", "class_method_signature": "Session.resendApproved(Message message)", "testcase": false, "constructor": false}, {"identifier": "initializeResendFields", "parameters": "(Message message)", "modifiers": "private", "return": "void", "signature": "void initializeResendFields(Message message)", "full_signature": "private void initializeResendFields(Message message)", "class_method_signature": "Session.initializeResendFields(Message message)", "testcase": false, "constructor": false}, {"identifier": "logApplicationException", "parameters": "(String location, Throwable t)", "modifiers": "private", "return": "void", "signature": "void logApplicationException(String location, Throwable t)", "full_signature": "private void logApplicationException(String location, Throwable t)", "class_method_signature": "Session.logApplicationException(String location, Throwable t)", "testcase": false, "constructor": false}, {"identifier": "nextLogout", "parameters": "(Message logout)", "modifiers": "private", "return": "void", "signature": "void nextLogout(Message logout)", "full_signature": "private void nextLogout(Message logout)", "class_method_signature": "Session.nextLogout(Message logout)", "testcase": false, "constructor": false}, {"identifier": "generateLogout", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void generateLogout()", "full_signature": "public void generateLogout()", "class_method_signature": "Session.generateLogout()", "testcase": false, "constructor": false}, {"identifier": "generateLogout", "parameters": "(Message otherLogout)", "modifiers": "private", "return": "void", "signature": "void generateLogout(Message otherLogout)", "full_signature": "private void generateLogout(Message otherLogout)", "class_method_signature": "Session.generateLogout(Message otherLogout)", "testcase": false, "constructor": false}, {"identifier": "generateLogout", "parameters": "(String reason)", "modifiers": "private", "return": "void", "signature": "void generateLogout(String reason)", "full_signature": "private void generateLogout(String reason)", "class_method_signature": "Session.generateLogout(String reason)", "testcase": false, "constructor": false}, {"identifier": "generateLogout", "parameters": "(String reason, SessionStatus sessionStatus)", "modifiers": "private", "return": "void", "signature": "void generateLogout(String reason, SessionStatus sessionStatus)", "full_signature": "private void generateLogout(String reason, SessionStatus sessionStatus)", "class_method_signature": "Session.generateLogout(String reason, SessionStatus sessionStatus)", "testcase": false, "constructor": false}, {"identifier": "generateLogout", "parameters": "(Message otherLogout, String text, SessionStatus sessionStatus)", "modifiers": "private", "return": "void", "signature": "void generateLogout(Message otherLogout, String text, SessionStatus sessionStatus)", "full_signature": "private void generateLogout(Message otherLogout, String text, SessionStatus sessionStatus)", "class_method_signature": "Session.generateLogout(Message otherLogout, String text, SessionStatus sessionStatus)", "testcase": false, "constructor": false}, {"identifier": "nextSequenceReset", "parameters": "(Message sequenceReset)", "modifiers": "private", "return": "void", "signature": "void nextSequenceReset(Message sequenceReset)", "full_signature": "private void nextSequenceReset(Message sequenceReset)", "class_method_signature": "Session.nextSequenceReset(Message sequenceReset)", "testcase": false, "constructor": false}, {"identifier": "generateReject", "parameters": "(Message message, String str)", "modifiers": "private", "return": "void", "signature": "void generateReject(Message message, String str)", "full_signature": "private void generateReject(Message message, String str)", "class_method_signature": "Session.generateReject(Message message, String str)", "testcase": false, "constructor": false}, {"identifier": "isPossibleDuplicate", "parameters": "(Message message)", "modifiers": "private", "return": "boolean", "signature": "boolean isPossibleDuplicate(Message message)", "full_signature": "private boolean isPossibleDuplicate(Message message)", "class_method_signature": "Session.isPossibleDuplicate(Message message)", "testcase": false, "constructor": false}, {"identifier": "generateReject", "parameters": "(Message message, int err, int field)", "modifiers": "private", "return": "void", "signature": "void generateReject(Message message, int err, int field)", "full_signature": "private void generateReject(Message message, int err, int field)", "class_method_signature": "Session.generateReject(Message message, int err, int field)", "testcase": false, "constructor": false}, {"identifier": "generateReject", "parameters": "(Message message, String text, int err, int field)", "modifiers": "private", "return": "void", "signature": "void generateReject(Message message, String text, int err, int field)", "full_signature": "private void generateReject(Message message, String text, int err, int field)", "class_method_signature": "Session.generateReject(Message message, String text, int err, int field)", "testcase": false, "constructor": false}, {"identifier": "setRejectReason", "parameters": "(Message reject, String reason)", "modifiers": "private", "return": "void", "signature": "void setRejectReason(Message reject, String reason)", "full_signature": "private void setRejectReason(Message reject, String reason)", "class_method_signature": "Session.setRejectReason(Message reject, String reason)", "testcase": false, "constructor": false}, {"identifier": "setRejectReason", "parameters": "(Message reject, int field, String reason,\n            boolean includeFieldInReason)", "modifiers": "private", "return": "void", "signature": "void setRejectReason(Message reject, int field, String reason,\n            boolean includeFieldInReason)", "full_signature": "private void setRejectReason(Message reject, int field, String reason,\n            boolean includeFieldInReason)", "class_method_signature": "Session.setRejectReason(Message reject, int field, String reason,\n            boolean includeFieldInReason)", "testcase": false, "constructor": false}, {"identifier": "generateBusinessReject", "parameters": "(Message message, int err, int field)", "modifiers": "private", "return": "void", "signature": "void generateBusinessReject(Message message, int err, int field)", "full_signature": "private void generateBusinessReject(Message message, int err, int field)", "class_method_signature": "Session.generateBusinessReject(Message message, int err, int field)", "testcase": false, "constructor": false}, {"identifier": "nextTestRequest", "parameters": "(Message testRequest)", "modifiers": "private", "return": "void", "signature": "void nextTestRequest(Message testRequest)", "full_signature": "private void nextTestRequest(Message testRequest)", "class_method_signature": "Session.nextTestRequest(Message testRequest)", "testcase": false, "constructor": false}, {"identifier": "generateHeartbeat", "parameters": "(Message testRequest)", "modifiers": "private", "return": "void", "signature": "void generateHeartbeat(Message testRequest)", "full_signature": "private void generateHeartbeat(Message testRequest)", "class_method_signature": "Session.generateHeartbeat(Message testRequest)", "testcase": false, "constructor": false}, {"identifier": "nextHeartBeat", "parameters": "(Message heartBeat)", "modifiers": "private", "return": "void", "signature": "void nextHeartBeat(Message heartBeat)", "full_signature": "private void nextHeartBeat(Message heartBeat)", "class_method_signature": "Session.nextHeartBeat(Message heartBeat)", "testcase": false, "constructor": false}, {"identifier": "verify", "parameters": "(Message msg, boolean checkTooHigh, boolean checkTooLow)", "modifiers": "private", "return": "boolean", "signature": "boolean verify(Message msg, boolean checkTooHigh, boolean checkTooLow)", "full_signature": "private boolean verify(Message msg, boolean checkTooHigh, boolean checkTooLow)", "class_method_signature": "Session.verify(Message msg, boolean checkTooHigh, boolean checkTooLow)", "testcase": false, "constructor": false}, {"identifier": "doTargetTooLow", "parameters": "(Message msg)", "modifiers": "private", "return": "boolean", "signature": "boolean doTargetTooLow(Message msg)", "full_signature": "private boolean doTargetTooLow(Message msg)", "class_method_signature": "Session.doTargetTooLow(Message msg)", "testcase": false, "constructor": false}, {"identifier": "doBadCompID", "parameters": "(Message msg)", "modifiers": "private", "return": "void", "signature": "void doBadCompID(Message msg)", "full_signature": "private void doBadCompID(Message msg)", "class_method_signature": "Session.doBadCompID(Message msg)", "testcase": false, "constructor": false}, {"identifier": "doBadTime", "parameters": "(Message msg)", "modifiers": "private", "return": "void", "signature": "void doBadTime(Message msg)", "full_signature": "private void doBadTime(Message msg)", "class_method_signature": "Session.doBadTime(Message msg)", "testcase": false, "constructor": false}, {"identifier": "isGoodTime", "parameters": "(Message message)", "modifiers": "private", "return": "boolean", "signature": "boolean isGoodTime(Message message)", "full_signature": "private boolean isGoodTime(Message message)", "class_method_signature": "Session.isGoodTime(Message message)", "testcase": false, "constructor": false}, {"identifier": "fromCallback", "parameters": "(String msgType, Message msg, SessionID sessionID2)", "modifiers": "private", "return": "void", "signature": "void fromCallback(String msgType, Message msg, SessionID sessionID2)", "full_signature": "private void fromCallback(String msgType, Message msg, SessionID sessionID2)", "class_method_signature": "Session.fromCallback(String msgType, Message msg, SessionID sessionID2)", "testcase": false, "constructor": false}, {"identifier": "validLogonState", "parameters": "(String msgType)", "modifiers": "private synchronized", "return": "boolean", "signature": "boolean validLogonState(String msgType)", "full_signature": "private synchronized boolean validLogonState(String msgType)", "class_method_signature": "Session.validLogonState(String msgType)", "testcase": false, "constructor": false}, {"identifier": "verify", "parameters": "(Message message)", "modifiers": "private", "return": "boolean", "signature": "boolean verify(Message message)", "full_signature": "private boolean verify(Message message)", "class_method_signature": "Session.verify(Message message)", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void next()", "full_signature": "public void next()", "class_method_signature": "Session.next()", "testcase": false, "constructor": false}, {"identifier": "computeNextLogonDelayMillis", "parameters": "()", "modifiers": "private", "return": "long", "signature": "long computeNextLogonDelayMillis()", "full_signature": "private long computeNextLogonDelayMillis()", "class_method_signature": "Session.computeNextLogonDelayMillis()", "testcase": false, "constructor": false}, {"identifier": "isTimeToGenerateLogon", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isTimeToGenerateLogon()", "full_signature": "private boolean isTimeToGenerateLogon()", "class_method_signature": "Session.isTimeToGenerateLogon()", "testcase": false, "constructor": false}, {"identifier": "generateHeartbeat", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void generateHeartbeat()", "full_signature": "public void generateHeartbeat()", "class_method_signature": "Session.generateHeartbeat()", "testcase": false, "constructor": false}, {"identifier": "generateTestRequest", "parameters": "(String id)", "modifiers": "public", "return": "void", "signature": "void generateTestRequest(String id)", "full_signature": "public void generateTestRequest(String id)", "class_method_signature": "Session.generateTestRequest(String id)", "testcase": false, "constructor": false}, {"identifier": "generateLogon", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean generateLogon()", "full_signature": "private boolean generateLogon()", "class_method_signature": "Session.generateLogon()", "testcase": false, "constructor": false}, {"identifier": "disconnect", "parameters": "(String reason, boolean logError)", "modifiers": "public", "return": "void", "signature": "void disconnect(String reason, boolean logError)", "full_signature": "public void disconnect(String reason, boolean logError)", "class_method_signature": "Session.disconnect(String reason, boolean logError)", "testcase": false, "constructor": false}, {"identifier": "nextLogon", "parameters": "(Message logon)", "modifiers": "private", "return": "void", "signature": "void nextLogon(Message logon)", "full_signature": "private void nextLogon(Message logon)", "class_method_signature": "Session.nextLogon(Message logon)", "testcase": false, "constructor": false}, {"identifier": "resendMessages", "parameters": "(Message receivedMessage, int beginSeqNo, int endSeqNo)", "modifiers": "private", "return": "void", "signature": "void resendMessages(Message receivedMessage, int beginSeqNo, int endSeqNo)", "full_signature": "private void resendMessages(Message receivedMessage, int beginSeqNo, int endSeqNo)", "class_method_signature": "Session.resendMessages(Message receivedMessage, int beginSeqNo, int endSeqNo)", "testcase": false, "constructor": false}, {"identifier": "generateSequenceResetIfNeeded", "parameters": "(Message receivedMessage, int beginSeqNo, int endSeqNo, int msgSeqNum)", "modifiers": "private", "return": "void", "signature": "void generateSequenceResetIfNeeded(Message receivedMessage, int beginSeqNo, int endSeqNo, int msgSeqNum)", "full_signature": "private void generateSequenceResetIfNeeded(Message receivedMessage, int beginSeqNo, int endSeqNo, int msgSeqNum)", "class_method_signature": "Session.generateSequenceResetIfNeeded(Message receivedMessage, int beginSeqNo, int endSeqNo, int msgSeqNum)", "testcase": false, "constructor": false}, {"identifier": "nextQueued", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void nextQueued()", "full_signature": "private void nextQueued()", "class_method_signature": "Session.nextQueued()", "testcase": false, "constructor": false}, {"identifier": "nextQueued", "parameters": "(int num)", "modifiers": "private", "return": "boolean", "signature": "boolean nextQueued(int num)", "full_signature": "private boolean nextQueued(int num)", "class_method_signature": "Session.nextQueued(int num)", "testcase": false, "constructor": false}, {"identifier": "nextQueued", "parameters": "(Message msg, String msgType)", "modifiers": "private", "return": "void", "signature": "void nextQueued(Message msg, String msgType)", "full_signature": "private void nextQueued(Message msg, String msgType)", "class_method_signature": "Session.nextQueued(Message msg, String msgType)", "testcase": false, "constructor": false}, {"identifier": "doTargetTooHigh", "parameters": "(Message msg)", "modifiers": "private", "return": "void", "signature": "void doTargetTooHigh(Message msg)", "full_signature": "private void doTargetTooHigh(Message msg)", "class_method_signature": "Session.doTargetTooHigh(Message msg)", "testcase": false, "constructor": false}, {"identifier": "generateResendRequest", "parameters": "(String beginString, int msgSeqNum)", "modifiers": "private", "return": "void", "signature": "void generateResendRequest(String beginString, int msgSeqNum)", "full_signature": "private void generateResendRequest(String beginString, int msgSeqNum)", "class_method_signature": "Session.generateResendRequest(String beginString, int msgSeqNum)", "testcase": false, "constructor": false}, {"identifier": "sendResendRequest", "parameters": "(String beginString, int msgSeqNum, int beginSeqNo, int endSeqNo)", "modifiers": "private", "return": "void", "signature": "void sendResendRequest(String beginString, int msgSeqNum, int beginSeqNo, int endSeqNo)", "full_signature": "private void sendResendRequest(String beginString, int msgSeqNum, int beginSeqNo, int endSeqNo)", "class_method_signature": "Session.sendResendRequest(String beginString, int msgSeqNum, int beginSeqNo, int endSeqNo)", "testcase": false, "constructor": false}, {"identifier": "validatePossDup", "parameters": "(Message msg)", "modifiers": "private", "return": "boolean", "signature": "boolean validatePossDup(Message msg)", "full_signature": "private boolean validatePossDup(Message msg)", "class_method_signature": "Session.validatePossDup(Message msg)", "testcase": false, "constructor": false}, {"identifier": "isTargetTooHigh", "parameters": "(int sequence)", "modifiers": "private", "return": "boolean", "signature": "boolean isTargetTooHigh(int sequence)", "full_signature": "private boolean isTargetTooHigh(int sequence)", "class_method_signature": "Session.isTargetTooHigh(int sequence)", "testcase": false, "constructor": false}, {"identifier": "generateLogon", "parameters": "(Message otherLogon, int expectedTargetNum)", "modifiers": "private", "return": "void", "signature": "void generateLogon(Message otherLogon, int expectedTargetNum)", "full_signature": "private void generateLogon(Message otherLogon, int expectedTargetNum)", "class_method_signature": "Session.generateLogon(Message otherLogon, int expectedTargetNum)", "testcase": false, "constructor": false}, {"identifier": "persist", "parameters": "(Header header, String messageString, int num)", "modifiers": "private", "return": "void", "signature": "void persist(Header header, String messageString, int num)", "full_signature": "private void persist(Header header, String messageString, int num)", "class_method_signature": "Session.persist(Header header, String messageString, int num)", "testcase": false, "constructor": false}, {"identifier": "sendRaw", "parameters": "(Message message, int num)", "modifiers": "private", "return": "boolean", "signature": "boolean sendRaw(Message message, int num)", "full_signature": "private boolean sendRaw(Message message, int num)", "class_method_signature": "Session.sendRaw(Message message, int num)", "testcase": false, "constructor": false}, {"identifier": "enqueueMessage", "parameters": "(final Message msg, final int msgSeqNum)", "modifiers": "private", "return": "void", "signature": "void enqueueMessage(final Message msg, final int msgSeqNum)", "full_signature": "private void enqueueMessage(final Message msg, final int msgSeqNum)", "class_method_signature": "Session.enqueueMessage(final Message msg, final int msgSeqNum)", "testcase": false, "constructor": false}, {"identifier": "resetState", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void resetState()", "full_signature": "private void resetState()", "class_method_signature": "Session.resetState()", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(Message message)", "modifiers": "public", "return": "boolean", "signature": "boolean send(Message message)", "full_signature": "public boolean send(Message message)", "class_method_signature": "Session.send(Message message)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(String messageString)", "modifiers": "private", "return": "boolean", "signature": "boolean send(String messageString)", "full_signature": "private boolean send(String messageString)", "class_method_signature": "Session.send(String messageString)", "testcase": false, "constructor": false}, {"identifier": "isCorrectCompID", "parameters": "(Message message)", "modifiers": "private", "return": "boolean", "signature": "boolean isCorrectCompID(Message message)", "full_signature": "private boolean isCorrectCompID(Message message)", "class_method_signature": "Session.isCorrectCompID(Message message)", "testcase": false, "constructor": false}, {"identifier": "getDataDictionary", "parameters": "()", "modifiers": "public", "return": "DataDictionary", "signature": "DataDictionary getDataDictionary()", "full_signature": "public DataDictionary getDataDictionary()", "class_method_signature": "Session.getDataDictionary()", "testcase": false, "constructor": false}, {"identifier": "getDataDictionaryProvider", "parameters": "()", "modifiers": "public", "return": "DataDictionaryProvider", "signature": "DataDictionaryProvider getDataDictionaryProvider()", "full_signature": "public DataDictionaryProvider getDataDictionaryProvider()", "class_method_signature": "Session.getDataDictionaryProvider()", "testcase": false, "constructor": false}, {"identifier": "getSessionID", "parameters": "()", "modifiers": "public", "return": "SessionID", "signature": "SessionID getSessionID()", "full_signature": "public SessionID getSessionID()", "class_method_signature": "Session.getSessionID()", "testcase": false, "constructor": false}, {"identifier": "isSessionTime", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSessionTime()", "full_signature": "public boolean isSessionTime()", "class_method_signature": "Session.isSessionTime()", "testcase": false, "constructor": false}, {"identifier": "doesSessionExist", "parameters": "(SessionID sessionID)", "modifiers": "public static", "return": "boolean", "signature": "boolean doesSessionExist(SessionID sessionID)", "full_signature": "public static boolean doesSessionExist(SessionID sessionID)", "class_method_signature": "Session.doesSessionExist(SessionID sessionID)", "testcase": false, "constructor": false}, {"identifier": "numSessions", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int numSessions()", "full_signature": "public static int numSessions()", "class_method_signature": "Session.numSessions()", "testcase": false, "constructor": false}, {"identifier": "setLogonTimeout", "parameters": "(int seconds)", "modifiers": "public", "return": "void", "signature": "void setLogonTimeout(int seconds)", "full_signature": "public void setLogonTimeout(int seconds)", "class_method_signature": "Session.setLogonTimeout(int seconds)", "testcase": false, "constructor": false}, {"identifier": "setLogoutTimeout", "parameters": "(int seconds)", "modifiers": "public", "return": "void", "signature": "void setLogoutTimeout(int seconds)", "full_signature": "public void setLogoutTimeout(int seconds)", "class_method_signature": "Session.setLogoutTimeout(int seconds)", "testcase": false, "constructor": false}, {"identifier": "setHeartBeatInterval", "parameters": "(int heartbeatInterval)", "modifiers": "public", "return": "void", "signature": "void setHeartBeatInterval(int heartbeatInterval)", "full_signature": "public void setHeartBeatInterval(int heartbeatInterval)", "class_method_signature": "Session.setHeartBeatInterval(int heartbeatInterval)", "testcase": false, "constructor": false}, {"identifier": "getCheckCompID", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getCheckCompID()", "full_signature": "public boolean getCheckCompID()", "class_method_signature": "Session.getCheckCompID()", "testcase": false, "constructor": false}, {"identifier": "getLogonTimeout", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getLogonTimeout()", "full_signature": "public int getLogonTimeout()", "class_method_signature": "Session.getLogonTimeout()", "testcase": false, "constructor": false}, {"identifier": "getLogoutTimeout", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getLogoutTimeout()", "full_signature": "public int getLogoutTimeout()", "class_method_signature": "Session.getLogoutTimeout()", "testcase": false, "constructor": false}, {"identifier": "getRedundantResentRequestsAllowed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getRedundantResentRequestsAllowed()", "full_signature": "public boolean getRedundantResentRequestsAllowed()", "class_method_signature": "Session.getRedundantResentRequestsAllowed()", "testcase": false, "constructor": false}, {"identifier": "getRefreshOnLogon", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getRefreshOnLogon()", "full_signature": "public boolean getRefreshOnLogon()", "class_method_signature": "Session.getRefreshOnLogon()", "testcase": false, "constructor": false}, {"identifier": "getResetOnDisconnect", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getResetOnDisconnect()", "full_signature": "public boolean getResetOnDisconnect()", "class_method_signature": "Session.getResetOnDisconnect()", "testcase": false, "constructor": false}, {"identifier": "getResetOnLogout", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getResetOnLogout()", "full_signature": "public boolean getResetOnLogout()", "class_method_signature": "Session.getResetOnLogout()", "testcase": false, "constructor": false}, {"identifier": "isLogonAlreadySent", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isLogonAlreadySent()", "full_signature": "public boolean isLogonAlreadySent()", "class_method_signature": "Session.isLogonAlreadySent()", "testcase": false, "constructor": false}, {"identifier": "isLogonReceived", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isLogonReceived()", "full_signature": "public boolean isLogonReceived()", "class_method_signature": "Session.isLogonReceived()", "testcase": false, "constructor": false}, {"identifier": "isLogonSendNeeded", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isLogonSendNeeded()", "full_signature": "public boolean isLogonSendNeeded()", "class_method_signature": "Session.isLogonSendNeeded()", "testcase": false, "constructor": false}, {"identifier": "isLogonSent", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isLogonSent()", "full_signature": "public boolean isLogonSent()", "class_method_signature": "Session.isLogonSent()", "testcase": false, "constructor": false}, {"identifier": "isLogonTimedOut", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isLogonTimedOut()", "full_signature": "public boolean isLogonTimedOut()", "class_method_signature": "Session.isLogonTimedOut()", "testcase": false, "constructor": false}, {"identifier": "isLogoutReceived", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isLogoutReceived()", "full_signature": "public boolean isLogoutReceived()", "class_method_signature": "Session.isLogoutReceived()", "testcase": false, "constructor": false}, {"identifier": "isLogoutSent", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isLogoutSent()", "full_signature": "public boolean isLogoutSent()", "class_method_signature": "Session.isLogoutSent()", "testcase": false, "constructor": false}, {"identifier": "isLogoutTimedOut", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isLogoutTimedOut()", "full_signature": "public boolean isLogoutTimedOut()", "class_method_signature": "Session.isLogoutTimedOut()", "testcase": false, "constructor": false}, {"identifier": "isValidateChecksum", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isValidateChecksum()", "full_signature": "public boolean isValidateChecksum()", "class_method_signature": "Session.isValidateChecksum()", "testcase": false, "constructor": false}, {"identifier": "isRejectGarbledMessage", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRejectGarbledMessage()", "full_signature": "public boolean isRejectGarbledMessage()", "class_method_signature": "Session.isRejectGarbledMessage()", "testcase": false, "constructor": false}, {"identifier": "isUsingDataDictionary", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isUsingDataDictionary()", "full_signature": "public boolean isUsingDataDictionary()", "class_method_signature": "Session.isUsingDataDictionary()", "testcase": false, "constructor": false}, {"identifier": "getStartTime", "parameters": "()", "modifiers": "public", "return": "Date", "signature": "Date getStartTime()", "full_signature": "public Date getStartTime()", "class_method_signature": "Session.getStartTime()", "testcase": false, "constructor": false}, {"identifier": "getTestRequestDelayMultiplier", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getTestRequestDelayMultiplier()", "full_signature": "public double getTestRequestDelayMultiplier()", "class_method_signature": "Session.getTestRequestDelayMultiplier()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Session.toString()", "testcase": false, "constructor": false}, {"identifier": "addStateListener", "parameters": "(SessionStateListener listener)", "modifiers": "public", "return": "void", "signature": "void addStateListener(SessionStateListener listener)", "full_signature": "public void addStateListener(SessionStateListener listener)", "class_method_signature": "Session.addStateListener(SessionStateListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeStateListener", "parameters": "(SessionStateListener listener)", "modifiers": "public", "return": "void", "signature": "void removeStateListener(SessionStateListener listener)", "full_signature": "public void removeStateListener(SessionStateListener listener)", "class_method_signature": "Session.removeStateListener(SessionStateListener listener)", "testcase": false, "constructor": false}, {"identifier": "getSenderDefaultApplicationVersionID", "parameters": "()", "modifiers": "public", "return": "ApplVerID", "signature": "ApplVerID getSenderDefaultApplicationVersionID()", "full_signature": "public ApplVerID getSenderDefaultApplicationVersionID()", "class_method_signature": "Session.getSenderDefaultApplicationVersionID()", "testcase": false, "constructor": false}, {"identifier": "getTargetDefaultApplicationVersionID", "parameters": "()", "modifiers": "public", "return": "ApplVerID", "signature": "ApplVerID getTargetDefaultApplicationVersionID()", "full_signature": "public ApplVerID getTargetDefaultApplicationVersionID()", "class_method_signature": "Session.getTargetDefaultApplicationVersionID()", "testcase": false, "constructor": false}, {"identifier": "setTargetDefaultApplicationVersionID", "parameters": "(ApplVerID applVerID)", "modifiers": "public", "return": "void", "signature": "void setTargetDefaultApplicationVersionID(ApplVerID applVerID)", "full_signature": "public void setTargetDefaultApplicationVersionID(ApplVerID applVerID)", "class_method_signature": "Session.setTargetDefaultApplicationVersionID(ApplVerID applVerID)", "testcase": false, "constructor": false}, {"identifier": "extractNumber", "parameters": "(String txt, int from)", "modifiers": "private static", "return": "String", "signature": "String extractNumber(String txt, int from)", "full_signature": "private static String extractNumber(String txt, int from)", "class_method_signature": "Session.extractNumber(String txt, int from)", "testcase": false, "constructor": false}, {"identifier": "extractExpectedSequenceNumber", "parameters": "(String txt)", "modifiers": "protected static", "return": "Integer", "signature": "Integer extractExpectedSequenceNumber(String txt)", "full_signature": "protected static Integer extractExpectedSequenceNumber(String txt)", "class_method_signature": "Session.extractExpectedSequenceNumber(String txt)", "testcase": false, "constructor": false}, {"identifier": "getMaxScheduledWriteRequests", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxScheduledWriteRequests()", "full_signature": "public int getMaxScheduledWriteRequests()", "class_method_signature": "Session.getMaxScheduledWriteRequests()", "testcase": false, "constructor": false}, {"identifier": "setMaxScheduledWriteRequests", "parameters": "(int maxScheduledWriteRequests)", "modifiers": "public", "return": "void", "signature": "void setMaxScheduledWriteRequests(int maxScheduledWriteRequests)", "full_signature": "public void setMaxScheduledWriteRequests(int maxScheduledWriteRequests)", "class_method_signature": "Session.setMaxScheduledWriteRequests(int maxScheduledWriteRequests)", "testcase": false, "constructor": false}, {"identifier": "setIgnoreHeartBeatFailure", "parameters": "(boolean ignoreHeartBeatFailure)", "modifiers": "public", "return": "void", "signature": "void setIgnoreHeartBeatFailure(boolean ignoreHeartBeatFailure)", "full_signature": "public void setIgnoreHeartBeatFailure(boolean ignoreHeartBeatFailure)", "class_method_signature": "Session.setIgnoreHeartBeatFailure(boolean ignoreHeartBeatFailure)", "testcase": false, "constructor": false}, {"identifier": "setRejectGarbledMessage", "parameters": "(boolean rejectGarbledMessage)", "modifiers": "public", "return": "void", "signature": "void setRejectGarbledMessage(boolean rejectGarbledMessage)", "full_signature": "public void setRejectGarbledMessage(boolean rejectGarbledMessage)", "class_method_signature": "Session.setRejectGarbledMessage(boolean rejectGarbledMessage)", "testcase": false, "constructor": false}, {"identifier": "setValidateChecksum", "parameters": "(\n            final boolean validateChecksum)", "modifiers": "public", "return": "void", "signature": "void setValidateChecksum(\n            final boolean validateChecksum)", "full_signature": "public void setValidateChecksum(\n            final boolean validateChecksum)", "class_method_signature": "Session.setValidateChecksum(\n            final boolean validateChecksum)", "testcase": false, "constructor": false}, {"identifier": "setRejectInvalidMessage", "parameters": "(boolean rejectInvalidMessage)", "modifiers": "public", "return": "void", "signature": "void setRejectInvalidMessage(boolean rejectInvalidMessage)", "full_signature": "public void setRejectInvalidMessage(boolean rejectInvalidMessage)", "class_method_signature": "Session.setRejectInvalidMessage(boolean rejectInvalidMessage)", "testcase": false, "constructor": false}, {"identifier": "setRejectMessageOnUnhandledException", "parameters": "(boolean rejectMessageOnUnhandledException)", "modifiers": "public", "return": "void", "signature": "void setRejectMessageOnUnhandledException(boolean rejectMessageOnUnhandledException)", "full_signature": "public void setRejectMessageOnUnhandledException(boolean rejectMessageOnUnhandledException)", "class_method_signature": "Session.setRejectMessageOnUnhandledException(boolean rejectMessageOnUnhandledException)", "testcase": false, "constructor": false}, {"identifier": "setRequiresOrigSendingTime", "parameters": "(boolean requiresOrigSendingTime)", "modifiers": "public", "return": "void", "signature": "void setRequiresOrigSendingTime(boolean requiresOrigSendingTime)", "full_signature": "public void setRequiresOrigSendingTime(boolean requiresOrigSendingTime)", "class_method_signature": "Session.setRequiresOrigSendingTime(boolean requiresOrigSendingTime)", "testcase": false, "constructor": false}, {"identifier": "setForceResendWhenCorruptedStore", "parameters": "(boolean forceResendWhenCorruptedStore)", "modifiers": "public", "return": "void", "signature": "void setForceResendWhenCorruptedStore(boolean forceResendWhenCorruptedStore)", "full_signature": "public void setForceResendWhenCorruptedStore(boolean forceResendWhenCorruptedStore)", "class_method_signature": "Session.setForceResendWhenCorruptedStore(boolean forceResendWhenCorruptedStore)", "testcase": false, "constructor": false}, {"identifier": "isAllowedForSession", "parameters": "(InetAddress remoteInetAddress)", "modifiers": "public", "return": "boolean", "signature": "boolean isAllowedForSession(InetAddress remoteInetAddress)", "full_signature": "public boolean isAllowedForSession(InetAddress remoteInetAddress)", "class_method_signature": "Session.isAllowedForSession(InetAddress remoteInetAddress)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "Session.close()", "testcase": false, "constructor": false}, {"identifier": "closeIfCloseable", "parameters": "(Object resource)", "modifiers": "private", "return": "void", "signature": "void closeIfCloseable(Object resource)", "full_signature": "private void closeIfCloseable(Object resource)", "class_method_signature": "Session.closeIfCloseable(Object resource)", "testcase": false, "constructor": false}, {"identifier": "resetIfSessionNotCurrent", "parameters": "(SessionID sessionID, long time)", "modifiers": "private", "return": "void", "signature": "void resetIfSessionNotCurrent(SessionID sessionID, long time)", "full_signature": "private void resetIfSessionNotCurrent(SessionID sessionID, long time)", "class_method_signature": "Session.resetIfSessionNotCurrent(SessionID sessionID, long time)", "testcase": false, "constructor": false}, {"identifier": "getMessageToLog", "parameters": "(final Message message)", "modifiers": "private", "return": "String", "signature": "String getMessageToLog(final Message message)", "full_signature": "private String getMessageToLog(final Message message)", "class_method_signature": "Session.getMessageToLog(final Message message)", "testcase": false, "constructor": false}, {"identifier": "setLogonTags", "parameters": "(final Message logon)", "modifiers": "private", "return": "void", "signature": "void setLogonTags(final Message logon)", "full_signature": "private void setLogonTags(final Message logon)", "class_method_signature": "Session.setLogonTags(final Message logon)", "testcase": false, "constructor": false}, {"identifier": "refreshState", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void refreshState()", "full_signature": "private void refreshState()", "class_method_signature": "Session.refreshState()", "testcase": false, "constructor": false}], "file": "quickfixj-core/src/main/java/quickfix/Session.java"}, "focal_method": {"identifier": "next", "parameters": "(Message message, boolean isProcessingQueuedMessages)", "modifiers": "private", "return": "void", "body": "private void next(Message message, boolean isProcessingQueuedMessages) throws FieldNotFound, RejectLogon, IncorrectDataFormat,\n            IncorrectTagValue, UnsupportedMessageType, IOException, InvalidMessage {\n\n        if (message == EventHandlingStrategy.END_OF_STREAM) {\n            disconnect(ENCOUNTERED_END_OF_STREAM, false);\n            return;\n        }\n\n        final Header header = message.getHeader();\n        final String msgType = header.getString(MsgType.FIELD);\n\n        // QFJ-650\n        if (!header.isSetField(MsgSeqNum.FIELD)) {\n            generateLogout(\"Received message without MsgSeqNum\");\n            disconnect(\"Received message without MsgSeqNum: \" + getMessageToLog(message), true);\n            return;\n        }\n\n        final String sessionBeginString = sessionID.getBeginString();\n        try {\n            final String beginString = header.getString(BeginString.FIELD);\n            if (!beginString.equals(sessionBeginString)) {\n                throw new UnsupportedVersion(\"Message version '\" + beginString\n                        + \"' does not match the session version '\" + sessionBeginString + \"'\");\n            }\n\n            if (MsgType.LOGON.equals(msgType)) {\n                if (sessionID.isFIXT()) {\n                    targetDefaultApplVerID.set(new ApplVerID(message\n                            .getString(DefaultApplVerID.FIELD)));\n                }\n\n                // QFJ-648\n                if (message.isSetField(HeartBtInt.FIELD)) {\n                    if (message.getInt(HeartBtInt.FIELD) < 0) {\n                        throw new RejectLogon(\"HeartBtInt must not be negative\");\n                    }\n                }\n            }\n\n            if (validateIncomingMessage && dataDictionaryProvider != null) {\n                final DataDictionary sessionDataDictionary = dataDictionaryProvider\n                        .getSessionDataDictionary(beginString);\n\n                final ApplVerID applVerID = header.isSetField(ApplVerID.FIELD) ? new ApplVerID(\n                        header.getString(ApplVerID.FIELD)) : targetDefaultApplVerID.get();\n\n                final DataDictionary applicationDataDictionary = MessageUtils\n                        .isAdminMessage(msgType) ? dataDictionaryProvider\n                        .getSessionDataDictionary(beginString) : dataDictionaryProvider\n                        .getApplicationDataDictionary(applVerID);\n\n                // related to QFJ-367 : just warn invalid incoming field/tags\n                try {\n                    DataDictionary.validate(message, sessionDataDictionary,\n                            applicationDataDictionary);\n                } catch (final IncorrectTagValue e) {\n                    if (rejectInvalidMessage) {\n                        throw e;\n                    } else {\n                        getLog().onErrorEvent(\"Warn: incoming message with \" + e + \": \" + getMessageToLog(message));\n                    }\n                } catch (final FieldException e) {\n                    if (message.isSetField(e.getField())) {\n                        if (rejectInvalidMessage) {\n                            throw e;\n                        } else {\n                            getLog().onErrorEvent(\n                                    \"Warn: incoming message with incorrect field: \"\n                                            + message.getField(e.getField()) + \": \" + getMessageToLog(message));\n                        }\n                    } else {\n                        if (rejectInvalidMessage) {\n                            throw e;\n                        } else {\n                            getLog().onErrorEvent(\n                                    \"Warn: incoming message with missing field: \" + e.getField()\n                                            + \": \" + e.getMessage() + \": \" + getMessageToLog(message));\n                        }\n                    }\n                } catch (final FieldNotFound e) {\n                    if (rejectInvalidMessage) {\n                        throw e;\n                    } else {\n                        getLog().onErrorEvent(\"Warn: incoming \" + e + \": \" + getMessageToLog(message));\n                    }\n                }\n            }\n\n            switch (msgType) {\n                case MsgType.LOGON:\n                    nextLogon(message);\n                    break;\n                case MsgType.HEARTBEAT:\n                    nextHeartBeat(message);\n                    break;\n                case MsgType.TEST_REQUEST:\n                    nextTestRequest(message);\n                    break;\n                case MsgType.SEQUENCE_RESET:\n                    nextSequenceReset(message);\n                    break;\n                case MsgType.LOGOUT:\n                    nextLogout(message);\n                    break;\n                case MsgType.RESEND_REQUEST:\n                    nextResendRequest(message);\n                    break;\n                case MsgType.REJECT:\n                    nextReject(message);\n                    break;\n                default:\n                    if (!verify(message)) {\n                        return;\n                    }\n                    state.incrNextTargetMsgSeqNum();\n                    break;\n            }\n        } catch (final FieldException | IncorrectDataFormat | IncorrectTagValue e) {\n            if (logErrorAndDisconnectIfRequired(e, message)) {\n                return;\n            }\n            handleExceptionAndRejectMessage(msgType, message, e);\n        } catch (final FieldNotFound e) {\n            if (logErrorAndDisconnectIfRequired(e, message)) {\n                return;\n            }\n            if (sessionBeginString.compareTo(FixVersions.BEGINSTRING_FIX42) >= 0\n                    && message.isApp()) {\n                generateBusinessReject(message,\n                        BusinessRejectReason.CONDITIONALLY_REQUIRED_FIELD_MISSING, e.field);\n            } else {\n                if (MsgType.LOGON.equals(msgType)) {\n                    getLog().onErrorEvent(\"Required field missing from logon\");\n                    disconnect(\"Required field missing from logon\", true);\n                } else {\n                    generateReject(message, SessionRejectReason.REQUIRED_TAG_MISSING, e.field);\n                }\n            }\n        } catch (final InvalidMessage e) {\n            /* InvalidMessage means a low-level error (e.g. checksum problem) and we should\n               ignore the message and let the problem correct itself (optimistic approach).\n               Target sequence number is not incremented, so it will trigger a ResendRequest\n               on the next message that is received.\n               If the message should get rejected and the seqnum get incremented,\n               then setting RejectGarbledMessage=Y needs to be used. */\n            if (rejectGarbledMessage) {\n                getLog().onErrorEvent(\"Processing garbled message: \" + e.getMessage());\n                generateReject(message, \"Message failed basic validity check\");\n            } else {\n                getLog().onErrorEvent(\"Skipping invalid message: \" + e + \": \" + getMessageToLog(message));\n                if (resetOrDisconnectIfRequired(message)) {\n                    return;\n                }\n            }\n        } catch (final RejectLogon e) {\n            final String rejectMessage = e.getMessage() != null ? (\": \" + e) : \"\";\n            getLog().onErrorEvent(\"Logon rejected\" + rejectMessage);\n            if (e.isLogoutBeforeDisconnect()) {\n                if (e.getSessionStatus() > -1) {\n                    generateLogout(e.getMessage(), new SessionStatus(e.getSessionStatus()));\n                } else {\n                    generateLogout(e.getMessage());\n                }\n            }\n            // Only increment seqnum if we are at the expected seqnum\n            if (getExpectedTargetNum() == header.getInt(MsgSeqNum.FIELD)) {\n                state.incrNextTargetMsgSeqNum();\n            }\n            disconnect(\"Logon rejected: \" + e, true);\n        } catch (final UnsupportedMessageType e) {\n            if (logErrorAndDisconnectIfRequired(e, message)) {\n                return;\n            }\n            if (sessionBeginString.compareTo(FixVersions.BEGINSTRING_FIX42) >= 0) {\n                generateBusinessReject(message, BusinessRejectReason.UNSUPPORTED_MESSAGE_TYPE, 0);\n            } else {\n                generateReject(message, \"Unsupported message type\");\n            }\n        } catch (final UnsupportedVersion e) {\n            if (logErrorAndDisconnectIfRequired(e, message)) {\n                return;\n            }\n            if (MsgType.LOGOUT.equals(msgType)) {\n                nextLogout(message);\n            } else {\n                generateLogout(\"Incorrect BeginString: \" + e.getMessage());\n                state.incrNextTargetMsgSeqNum();\n                // 1d_InvalidLogonWrongBeginString.def appears to require\n                // a disconnect although the C++ didn't appear to be doing it.\n                // ???\n                disconnect(\"Incorrect BeginString: \" + e, true);\n            }\n        } catch (final IOException e) {\n            LogUtil.logThrowable(sessionID, \"Error processing message: \" + getMessageToLog(message), e);\n            if (resetOrDisconnectIfRequired(message)) {\n                return;\n            }\n        } catch (Throwable t) { // QFJ-572\n            // If there are any other Throwables we might catch them here if desired.\n            // They were most probably thrown out of fromCallback().\n            if (rejectMessageOnUnhandledException) {\n                getLog().onErrorEvent(\"Rejecting message: \" + t + \": \" + getMessageToLog(message));\n                if (resetOrDisconnectIfRequired(message)) {\n                    return;\n                }\n                if (!(MessageUtils.isAdminMessage(msgType))\n                        && (sessionBeginString.compareTo(FixVersions.BEGINSTRING_FIX42) >= 0)) {\n                    generateBusinessReject(message, BusinessRejectReason.APPLICATION_NOT_AVAILABLE,\n                            0);\n                } else {\n                    if (MsgType.LOGON.equals(msgType)) {\n                        disconnect(\"Problem processing Logon message\", true);\n                    } else {\n                        generateReject(message, SessionRejectReason.OTHER, 0);\n                    }\n                }\n            } else {\n                // Re-throw as quickfix.RuntimeError to keep close to the former behaviour\n                // and to have a clear notion of what is thrown out of this method.\n                // Throwing RuntimeError here means that the target seqnum is not incremented\n                // and a resend will be triggered by the next incoming message.\n                throw new RuntimeError(t);\n            }\n        }\n\n        // QFJ-788: prevent StackOverflow on large queue\n        if (!isProcessingQueuedMessages) {\n            nextQueued();\n            if (isLoggedOn()) {\n                next();\n            }\n        }\n    }", "signature": "void next(Message message, boolean isProcessingQueuedMessages)", "full_signature": "private void next(Message message, boolean isProcessingQueuedMessages)", "class_method_signature": "Session.next(Message message, boolean isProcessingQueuedMessages)", "testcase": false, "constructor": false, "invocations": ["disconnect", "getHeader", "getString", "isSetField", "generateLogout", "disconnect", "getMessageToLog", "getBeginString", "getString", "equals", "equals", "isFIXT", "set", "getString", "isSetField", "getInt", "getSessionDataDictionary", "isSetField", "getString", "get", "isAdminMessage", "getSessionDataDictionary", "getApplicationDataDictionary", "validate", "onErrorEvent", "getLog", "getMessageToLog", "isSetField", "getField", "onErrorEvent", "getLog", "getField", "getField", "getMessageToLog", "onErrorEvent", "getLog", "getField", "getMessage", "getMessageToLog", "onErrorEvent", "getLog", "getMessageToLog", "nextLogon", "nextHeartBeat", "nextTestRequest", "nextSequenceReset", "nextLogout", "nextResendRequest", "nextReject", "verify", "incrNextTargetMsgSeqNum", "logErrorAndDisconnectIfRequired", "handleExceptionAndRejectMessage", "logErrorAndDisconnectIfRequired", "compareTo", "isApp", "generateBusinessReject", "equals", "onErrorEvent", "getLog", "disconnect", "generateReject", "onErrorEvent", "getLog", "getMessage", "generateReject", "onErrorEvent", "getLog", "getMessageToLog", "resetOrDisconnectIfRequired", "getMessage", "onErrorEvent", "getLog", "isLogoutBeforeDisconnect", "getSessionStatus", "generateLogout", "getMessage", "getSessionStatus", "generateLogout", "getMessage", "getExpectedTargetNum", "getInt", "incrNextTargetMsgSeqNum", "disconnect", "logErrorAndDisconnectIfRequired", "compareTo", "generateBusinessReject", "generateReject", "logErrorAndDisconnectIfRequired", "equals", "nextLogout", "generateLogout", "getMessage", "incrNextTargetMsgSeqNum", "disconnect", "logThrowable", "getMessageToLog", "resetOrDisconnectIfRequired", "onErrorEvent", "getLog", "getMessageToLog", "resetOrDisconnectIfRequired", "isAdminMessage", "compareTo", "generateBusinessReject", "equals", "disconnect", "generateReject", "nextQueued", "isLoggedOn", "next"]}, "repository": {"repo_id": 19937094, "url": "https://github.com/quickfix-j/quickfixj", "stars": 538, "created": "5/19/2014 10:04:08 AM +00:00", "updates": "2020-01-26T01:21:15+00:00", "fork": "False", "license": "licensed"}}