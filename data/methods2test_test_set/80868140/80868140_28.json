{"test_class": {"identifier": "LoessInterpolatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "stl-decomp-4j/src/test/java/com/github/servicenow/ds/stats/stl/LoessInterpolatorTest.java"}, "test_case": {"identifier": "linearDataReturnsDataOnLine", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void linearDataReturnsDataOnLine() {\n\t\tdouble[] data = createLinearDataArray();\n\n\t\tLoessInterpolator loess = new LoessInterpolator.Builder().setWidth(5).interpolate(data);\n\n\t\tfor (int i = 0; i < data.length; ++i) {\n\t\t\tDouble y = loess.smoothOnePoint(i, Math.max(0, i - 2), Math.min(i + 2, data.length - 1));\n\t\t\tassertNotNull(y);\n\t\t\tassertEquals(String.format(\"Bad value at %d\", i), data[i], y, 1.0e-8);\n\t\t}\n\t}", "signature": "void linearDataReturnsDataOnLine()", "full_signature": "@Test public void linearDataReturnsDataOnLine()", "class_method_signature": "LoessInterpolatorTest.linearDataReturnsDataOnLine()", "testcase": true, "constructor": false, "invocations": ["createLinearDataArray", "interpolate", "setWidth", "smoothOnePoint", "max", "min", "assertNotNull", "assertEquals", "format"]}, "focal_class": {"identifier": "LoessInterpolator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final int fWidth;", "modifier": "private final", "type": "int", "declarator": "fWidth", "var_name": "fWidth"}, {"original_string": "private final double[] fExternalWeights;", "modifier": "private final", "type": "double[]", "declarator": "fExternalWeights", "var_name": "fExternalWeights"}, {"original_string": "final double[] fData;", "modifier": "final", "type": "double[]", "declarator": "fData", "var_name": "fData"}, {"original_string": "final double[] fWeights;", "modifier": "final", "type": "double[]", "declarator": "fWeights", "var_name": "fWeights"}], "methods": [{"identifier": "smoothOnePoint", "parameters": "(final double x, final int left, final int right)", "modifiers": "", "return": "Double", "signature": "Double smoothOnePoint(final double x, final int left, final int right)", "full_signature": " Double smoothOnePoint(final double x, final int left, final int right)", "class_method_signature": "LoessInterpolator.smoothOnePoint(final double x, final int left, final int right)", "testcase": false, "constructor": false}, {"identifier": "updateWeights", "parameters": "(double x, int left, int right)", "modifiers": "abstract", "return": "void", "signature": "void updateWeights(double x, int left, int right)", "full_signature": "abstract void updateWeights(double x, int left, int right)", "class_method_signature": "LoessInterpolator.updateWeights(double x, int left, int right)", "testcase": false, "constructor": false}, {"identifier": "computeNeighborhoodWeights", "parameters": "(double x, int left, int right)", "modifiers": "private", "return": "State", "signature": "State computeNeighborhoodWeights(double x, int left, int right)", "full_signature": "private State computeNeighborhoodWeights(double x, int left, int right)", "class_method_signature": "LoessInterpolator.computeNeighborhoodWeights(double x, int left, int right)", "testcase": false, "constructor": false}, {"identifier": "LoessInterpolator", "parameters": "(int width, double[] data, double[] externalWeights)", "modifiers": "", "return": "", "signature": " LoessInterpolator(int width, double[] data, double[] externalWeights)", "full_signature": "  LoessInterpolator(int width, double[] data, double[] externalWeights)", "class_method_signature": "LoessInterpolator.LoessInterpolator(int width, double[] data, double[] externalWeights)", "testcase": false, "constructor": true}], "file": "stl-decomp-4j/src/main/java/com/github/servicenow/ds/stats/stl/LoessInterpolator.java"}, "focal_method": {"identifier": "smoothOnePoint", "parameters": "(final double x, final int left, final int right)", "modifiers": "", "return": "Double", "body": "Double smoothOnePoint(final double x, final int left, final int right) {\n\n\t\t// Ordinarily, one doesn't do linear regression one x-value at a time, but LOESS does since\n\t\t// each x-value will typically have a different window. As a result, the weighted linear regression\n\t\t// is recast as a linear operation on the input data, weighted by this.fWeights.\n\n\t\tState state = computeNeighborhoodWeights(x, left, right);\n\n\t\tif (state == State.WEIGHTS_FAILED)\n\t\t\treturn null;\n\n\t\tif (state == State.LINEAR_OK)\n\t\t\tupdateWeights(x, left, right);\n\n\t\tdouble ys = 0.0;\n\t\tfor (int i = left; i <= right; ++i)\n\t\t\tys += fWeights[i] * fData[i];\n\n\t\treturn ys;\n\t}", "signature": "Double smoothOnePoint(final double x, final int left, final int right)", "full_signature": " Double smoothOnePoint(final double x, final int left, final int right)", "class_method_signature": "LoessInterpolator.smoothOnePoint(final double x, final int left, final int right)", "testcase": false, "constructor": false, "invocations": ["computeNeighborhoodWeights", "updateWeights"]}, "repository": {"repo_id": 80868140, "url": "https://github.com/ServiceNow/stl-decomp-4j", "language": "Java", "is_fork": false, "fork_count": 30, "stargazer_count": 79, "size": 3949, "license": "licensed"}}