{"test_class": {"identifier": "PathTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-core/src/test/java/org/apache/flink/core/fs/PathTest.java"}, "test_case": {"identifier": "testParsing", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testParsing() {\n\t\tURI u;\n\t\tString scheme = \"hdfs\";\n\t\tString authority = \"localhost:8000\";\n\t\tString path = \"/test/test\";\n\n\t\t// correct usage\n\t\t// hdfs://localhost:8000/test/test\n\t\tu = new Path(scheme + \"://\" + authority + path).toUri();\n\t\tassertEquals(scheme, u.getScheme());\n\t\tassertEquals(authority, u.getAuthority());\n\t\tassertEquals(path, u.getPath());\n\t\t// hdfs:///test/test\n\t\tu = new Path(scheme + \"://\" + path).toUri();\n\t\tassertEquals(scheme, u.getScheme());\n\t\tassertEquals(null, u.getAuthority());\n\t\tassertEquals(path, u.getPath());\n\t\t// hdfs:/test/test\n\t\tu = new Path(scheme + \":\" + path).toUri();\n\t\tassertEquals(scheme, u.getScheme());\n\t\tassertEquals(null, u.getAuthority());\n\t\tassertEquals(path, u.getPath());\n\n\t\t// incorrect usage\n\t\t// hdfs://test/test\n\t\tu = new Path(scheme + \":/\" + path).toUri();\n\t\tassertEquals(scheme, u.getScheme());\n\t\tassertEquals(\"test\", u.getAuthority());\n\t\tassertEquals(\"/test\", u.getPath());\n\t\t// hdfs:////test/test\n\t\tu = new Path(scheme + \":///\" + path).toUri();\n\t\tassertEquals(\"hdfs\", u.getScheme());\n\t\tassertEquals(null, u.getAuthority());\n\t\tassertEquals(path, u.getPath());\n\t}", "signature": "void testParsing()", "full_signature": "@Test public void testParsing()", "class_method_signature": "PathTest.testParsing()", "testcase": true, "constructor": false, "invocations": ["toUri", "assertEquals", "getScheme", "assertEquals", "getAuthority", "assertEquals", "getPath", "toUri", "assertEquals", "getScheme", "assertEquals", "getAuthority", "assertEquals", "getPath", "toUri", "assertEquals", "getScheme", "assertEquals", "getAuthority", "assertEquals", "getPath", "toUri", "assertEquals", "getScheme", "assertEquals", "getAuthority", "assertEquals", "getPath", "toUri", "assertEquals", "getScheme", "assertEquals", "getAuthority", "assertEquals", "getPath"]}, "focal_class": {"identifier": "Path", "superclass": "", "interfaces": "implements IOReadableWritable, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "public static final String SEPARATOR = \"/\";", "modifier": "public static final", "type": "String", "declarator": "SEPARATOR = \"/\"", "var_name": "SEPARATOR"}, {"original_string": "public static final char SEPARATOR_CHAR = '/';", "modifier": "public static final", "type": "char", "declarator": "SEPARATOR_CHAR = '/'", "var_name": "SEPARATOR_CHAR"}, {"original_string": "public static final String CUR_DIR = \".\";", "modifier": "public static final", "type": "String", "declarator": "CUR_DIR = \".\"", "var_name": "CUR_DIR"}, {"original_string": "private URI uri;", "modifier": "private", "type": "URI", "declarator": "uri", "var_name": "uri"}], "methods": [{"identifier": "Path", "parameters": "()", "modifiers": "public", "return": "", "signature": " Path()", "full_signature": "public  Path()", "class_method_signature": "Path.Path()", "testcase": false, "constructor": true}, {"identifier": "Path", "parameters": "(URI uri)", "modifiers": "public", "return": "", "signature": " Path(URI uri)", "full_signature": "public  Path(URI uri)", "class_method_signature": "Path.Path(URI uri)", "testcase": false, "constructor": true}, {"identifier": "Path", "parameters": "(String parent, String child)", "modifiers": "public", "return": "", "signature": " Path(String parent, String child)", "full_signature": "public  Path(String parent, String child)", "class_method_signature": "Path.Path(String parent, String child)", "testcase": false, "constructor": true}, {"identifier": "Path", "parameters": "(Path parent, String child)", "modifiers": "public", "return": "", "signature": " Path(Path parent, String child)", "full_signature": "public  Path(Path parent, String child)", "class_method_signature": "Path.Path(Path parent, String child)", "testcase": false, "constructor": true}, {"identifier": "Path", "parameters": "(String parent, Path child)", "modifiers": "public", "return": "", "signature": " Path(String parent, Path child)", "full_signature": "public  Path(String parent, Path child)", "class_method_signature": "Path.Path(String parent, Path child)", "testcase": false, "constructor": true}, {"identifier": "Path", "parameters": "(Path parent, Path child)", "modifiers": "public", "return": "", "signature": " Path(Path parent, Path child)", "full_signature": "public  Path(Path parent, Path child)", "class_method_signature": "Path.Path(Path parent, Path child)", "testcase": false, "constructor": true}, {"identifier": "checkAndTrimPathArg", "parameters": "(String path)", "modifiers": "private", "return": "String", "signature": "String checkAndTrimPathArg(String path)", "full_signature": "private String checkAndTrimPathArg(String path)", "class_method_signature": "Path.checkAndTrimPathArg(String path)", "testcase": false, "constructor": false}, {"identifier": "Path", "parameters": "(String pathString)", "modifiers": "public", "return": "", "signature": " Path(String pathString)", "full_signature": "public  Path(String pathString)", "class_method_signature": "Path.Path(String pathString)", "testcase": false, "constructor": true}, {"identifier": "Path", "parameters": "(String scheme, String authority, String path)", "modifiers": "public", "return": "", "signature": " Path(String scheme, String authority, String path)", "full_signature": "public  Path(String scheme, String authority, String path)", "class_method_signature": "Path.Path(String scheme, String authority, String path)", "testcase": false, "constructor": true}, {"identifier": "initialize", "parameters": "(String scheme, String authority, String path)", "modifiers": "private", "return": "void", "signature": "void initialize(String scheme, String authority, String path)", "full_signature": "private void initialize(String scheme, String authority, String path)", "class_method_signature": "Path.initialize(String scheme, String authority, String path)", "testcase": false, "constructor": false}, {"identifier": "normalizePath", "parameters": "(String path)", "modifiers": "private", "return": "String", "signature": "String normalizePath(String path)", "full_signature": "private String normalizePath(String path)", "class_method_signature": "Path.normalizePath(String path)", "testcase": false, "constructor": false}, {"identifier": "hasWindowsDrive", "parameters": "(String path, boolean slashed)", "modifiers": "private", "return": "boolean", "signature": "boolean hasWindowsDrive(String path, boolean slashed)", "full_signature": "private boolean hasWindowsDrive(String path, boolean slashed)", "class_method_signature": "Path.hasWindowsDrive(String path, boolean slashed)", "testcase": false, "constructor": false}, {"identifier": "toUri", "parameters": "()", "modifiers": "public", "return": "URI", "signature": "URI toUri()", "full_signature": "public URI toUri()", "class_method_signature": "Path.toUri()", "testcase": false, "constructor": false}, {"identifier": "getFileSystem", "parameters": "()", "modifiers": "public", "return": "FileSystem", "signature": "FileSystem getFileSystem()", "full_signature": "public FileSystem getFileSystem()", "class_method_signature": "Path.getFileSystem()", "testcase": false, "constructor": false}, {"identifier": "isAbsolute", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAbsolute()", "full_signature": "public boolean isAbsolute()", "class_method_signature": "Path.isAbsolute()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "Path.getName()", "testcase": false, "constructor": false}, {"identifier": "getParent", "parameters": "()", "modifiers": "public", "return": "Path", "signature": "Path getParent()", "full_signature": "public Path getParent()", "class_method_signature": "Path.getParent()", "testcase": false, "constructor": false}, {"identifier": "suffix", "parameters": "(String suffix)", "modifiers": "public", "return": "Path", "signature": "Path suffix(String suffix)", "full_signature": "public Path suffix(String suffix)", "class_method_signature": "Path.suffix(String suffix)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Path.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "Path.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Path.hashCode()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(Object o)", "modifiers": "public", "return": "int", "signature": "int compareTo(Object o)", "full_signature": "public int compareTo(Object o)", "class_method_signature": "Path.compareTo(Object o)", "testcase": false, "constructor": false}, {"identifier": "depth", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int depth()", "full_signature": "public int depth()", "class_method_signature": "Path.depth()", "testcase": false, "constructor": false}, {"identifier": "makeQualified", "parameters": "(FileSystem fs)", "modifiers": "public", "return": "Path", "signature": "Path makeQualified(FileSystem fs)", "full_signature": "public Path makeQualified(FileSystem fs)", "class_method_signature": "Path.makeQualified(FileSystem fs)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(DataInputView in)", "modifiers": "@Override public", "return": "void", "signature": "void read(DataInputView in)", "full_signature": "@Override public void read(DataInputView in)", "class_method_signature": "Path.read(DataInputView in)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(DataOutputView out)", "modifiers": "@Override public", "return": "void", "signature": "void write(DataOutputView out)", "full_signature": "@Override public void write(DataOutputView out)", "class_method_signature": "Path.write(DataOutputView out)", "testcase": false, "constructor": false}], "file": "flink-core/src/main/java/org/apache/flink/core/fs/Path.java"}, "focal_method": {"identifier": "toUri", "parameters": "()", "modifiers": "public", "return": "URI", "body": "public URI toUri() {\n\t\treturn uri;\n\t}", "signature": "URI toUri()", "full_signature": "public URI toUri()", "class_method_signature": "Path.toUri()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}