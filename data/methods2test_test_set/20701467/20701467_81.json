{"test_class": {"identifier": "IcmpDecoderTest", "superclass": "", "interfaces": "", "fields": [], "file": "packethandler/implementation/src/test/java/org/opendaylight/l2switch/packethandler/decoders/IcmpDecoderTest.java"}, "test_case": {"identifier": "testDecode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDecode() throws Exception {\n        byte[] ethPayload = { 0x00, 0x0c, (byte) 0xce, 0x13, (byte) 0xb9, (byte) 0xa0, 0x00, 0x22, 0x5f, 0x3f,\n            (byte) 0x98, (byte) 0x91, 0x08, 0x00, // ethernet\n            0x45, 0x00, 0x00, 0x3c, (byte) 0xc6, 0x3e, 0x00, 0x00, (byte) 0x80, 0x01, (byte) 0xf2, (byte) 0xd7,\n            (byte) 0xc0, (byte) 0xa8, 0x00,\n            0x59, (byte) 0xc0, (byte) 0xa8, 0x00, 0x01, // ipv4\n            0x08, // Type = 8 (Echo request)\n            0x00, // Code = 0\n            0x42, // Checksum (+ next byte)\n            0x5c, //\n            0x02, // Identifier (+ next byte)\n            0x00, //\n            0x09, // Sequence number (+ next byte)\n            0x00, //\n            0, 0, 0, 0 // CRC\n        };\n\n        NotificationProviderService npServiceMock = Mockito.mock(NotificationProviderService.class);\n        ArrayList<PacketChain> packetChainList = new ArrayList<>();\n        packetChainList.add(new PacketChainBuilder().setPacket(new RawPacketBuilder().build()).build());\n        packetChainList.add(new PacketChainBuilder().setPacket(new EthernetPacketBuilder().build()).build());\n        packetChainList.add(new PacketChainBuilder().setPacket(new Ipv4PacketBuilder()\n                .setPayloadOffset(34).build()).build());\n\n        IcmpPacketReceived notification = new IcmpDecoder(npServiceMock)\n                .decode(new Ipv4PacketReceivedBuilder().setPacketChain(packetChainList).setPayload(ethPayload)\n                        .build());\n\n        IcmpPacket icmpPacket = (IcmpPacket) notification.getPacketChain().get(3).getPacket();\n        assertEquals(8, icmpPacket.getType().intValue());\n        assertEquals(0, icmpPacket.getCode().intValue());\n        assertEquals(0x425c, icmpPacket.getCrc().intValue());\n        assertEquals(512, icmpPacket.getIdentifier().intValue());\n        assertEquals(2304, icmpPacket.getSequenceNumber().intValue());\n\n        assertTrue(Arrays.equals(ethPayload, notification.getPayload()));\n    }", "signature": "void testDecode()", "full_signature": "@Test public void testDecode()", "class_method_signature": "IcmpDecoderTest.testDecode()", "testcase": true, "constructor": false, "invocations": ["mock", "add", "build", "setPacket", "build", "add", "build", "setPacket", "build", "add", "build", "setPacket", "build", "setPayloadOffset", "decode", "build", "setPayload", "setPacketChain", "getPacket", "get", "getPacketChain", "assertEquals", "intValue", "getType", "assertEquals", "intValue", "getCode", "assertEquals", "intValue", "getCrc", "assertEquals", "intValue", "getIdentifier", "assertEquals", "intValue", "getSequenceNumber", "assertTrue", "equals", "getPayload"]}, "focal_class": {"identifier": "IcmpDecoder", "superclass": "extends AbstractPacketDecoder<Ipv4PacketReceived, IcmpPacketReceived>", "interfaces": "implements Ipv4PacketListener", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(IcmpDecoder.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(IcmpDecoder.class)", "var_name": "LOG"}], "methods": [{"identifier": "IcmpDecoder", "parameters": "(NotificationProviderService notificationProviderService)", "modifiers": "public", "return": "", "signature": " IcmpDecoder(NotificationProviderService notificationProviderService)", "full_signature": "public  IcmpDecoder(NotificationProviderService notificationProviderService)", "class_method_signature": "IcmpDecoder.IcmpDecoder(NotificationProviderService notificationProviderService)", "testcase": false, "constructor": true}, {"identifier": "decode", "parameters": "(Ipv4PacketReceived ipv4PacketReceived)", "modifiers": "@Override public", "return": "IcmpPacketReceived", "signature": "IcmpPacketReceived decode(Ipv4PacketReceived ipv4PacketReceived)", "full_signature": "@Override public IcmpPacketReceived decode(Ipv4PacketReceived ipv4PacketReceived)", "class_method_signature": "IcmpDecoder.decode(Ipv4PacketReceived ipv4PacketReceived)", "testcase": false, "constructor": false}, {"identifier": "getConsumedNotificationListener", "parameters": "()", "modifiers": "@Override public", "return": "NotificationListener", "signature": "NotificationListener getConsumedNotificationListener()", "full_signature": "@Override public NotificationListener getConsumedNotificationListener()", "class_method_signature": "IcmpDecoder.getConsumedNotificationListener()", "testcase": false, "constructor": false}, {"identifier": "onIpv4PacketReceived", "parameters": "(Ipv4PacketReceived notification)", "modifiers": "@Override public", "return": "void", "signature": "void onIpv4PacketReceived(Ipv4PacketReceived notification)", "full_signature": "@Override public void onIpv4PacketReceived(Ipv4PacketReceived notification)", "class_method_signature": "IcmpDecoder.onIpv4PacketReceived(Ipv4PacketReceived notification)", "testcase": false, "constructor": false}, {"identifier": "canDecode", "parameters": "(Ipv4PacketReceived ipv4PacketReceived)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canDecode(Ipv4PacketReceived ipv4PacketReceived)", "full_signature": "@Override public boolean canDecode(Ipv4PacketReceived ipv4PacketReceived)", "class_method_signature": "IcmpDecoder.canDecode(Ipv4PacketReceived ipv4PacketReceived)", "testcase": false, "constructor": false}], "file": "packethandler/implementation/src/main/java/org/opendaylight/l2switch/packethandler/decoders/IcmpDecoder.java"}, "focal_method": {"identifier": "decode", "parameters": "(Ipv4PacketReceived ipv4PacketReceived)", "modifiers": "@Override public", "return": "IcmpPacketReceived", "body": "@Override\n    public IcmpPacketReceived decode(Ipv4PacketReceived ipv4PacketReceived) {\n        IcmpPacketReceivedBuilder icmpReceivedBuilder = new IcmpPacketReceivedBuilder();\n\n        // Find the latest packet in the packet-chain, which is an\n        // EthernetPacket\n        List<PacketChain> packetChainList = ipv4PacketReceived.getPacketChain();\n        Ipv4Packet ipv4Packet = (Ipv4Packet) packetChainList.get(packetChainList.size() - 1).getPacket();\n        int bitOffset = ipv4Packet.getPayloadOffset() * NetUtils.NUM_BITS_IN_A_BYTE;\n        byte[] data = ipv4PacketReceived.getPayload();\n\n        IcmpPacketBuilder builder = new IcmpPacketBuilder();\n        try {\n            // Decode the ICMP type and ICMP code\n            builder.setType(BitBufferHelper.getShort(BitBufferHelper.getBits(data, bitOffset + 0, 8)));\n            builder.setCode(BitBufferHelper.getShort(BitBufferHelper.getBits(data, bitOffset + 8, 8)));\n\n            // Decode the checksum\n            builder.setCrc(BitBufferHelper.getInt(BitBufferHelper.getBits(data, bitOffset + 16, 16)));\n\n            // Decode the identifier and sequence number\n            builder.setIdentifier(BitBufferHelper.getInt(BitBufferHelper.getBits(data, bitOffset + 32, 16)));\n            builder.setSequenceNumber(BitBufferHelper.getInt(BitBufferHelper.getBits(data, bitOffset + 48, 16)));\n\n            // Decode the ICMP Payload\n            int payloadStartInBits = bitOffset + 64;\n            int payloadEndInBits = data.length * NetUtils.NUM_BITS_IN_A_BYTE - payloadStartInBits - 4\n                    * NetUtils.NUM_BITS_IN_A_BYTE;\n            int start = payloadStartInBits / NetUtils.NUM_BITS_IN_A_BYTE;\n            int end = start + payloadEndInBits / NetUtils.NUM_BITS_IN_A_BYTE;\n            builder.setPayloadOffset(start);\n            builder.setPayloadLength(end - start);\n        } catch (BufferException e) {\n            LOG.debug(\"Exception while decoding ICMP packet\", e.getMessage());\n        }\n\n        // build icmp\n        packetChainList.add(new PacketChainBuilder().setPacket(builder.build()).build());\n        icmpReceivedBuilder.setPacketChain(packetChainList);\n\n        // carry forward the original payload.\n        icmpReceivedBuilder.setPayload(ipv4PacketReceived.getPayload());\n\n        return icmpReceivedBuilder.build();\n    }", "signature": "IcmpPacketReceived decode(Ipv4PacketReceived ipv4PacketReceived)", "full_signature": "@Override public IcmpPacketReceived decode(Ipv4PacketReceived ipv4PacketReceived)", "class_method_signature": "IcmpDecoder.decode(Ipv4PacketReceived ipv4PacketReceived)", "testcase": false, "constructor": false, "invocations": ["getPacketChain", "getPacket", "get", "size", "getPayloadOffset", "getPayload", "setType", "getShort", "getBits", "setCode", "getShort", "getBits", "setCrc", "getInt", "getBits", "setIdentifier", "getInt", "getBits", "setSequenceNumber", "getInt", "getBits", "setPayloadOffset", "setPayloadLength", "debug", "getMessage", "add", "build", "setPacket", "build", "setPacketChain", "setPayload", "getPayload", "build"]}, "repository": {"repo_id": 20701467, "url": "https://github.com/opendaylight/l2switch", "language": "Java", "is_fork": false, "fork_count": 30, "stargazer_count": 25, "size": 4178, "license": "licensed"}}