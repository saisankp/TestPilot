{"test_class": {"identifier": "SequentialIndividualCompleterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String object = \"test\";", "modifier": "private static", "type": "String", "declarator": "object = \"test\"", "var_name": "object"}, {"original_string": "private static Objectives objectives = new Objectives();", "modifier": "private static", "type": "Objectives", "declarator": "objectives = new Objectives()", "var_name": "objectives"}], "file": "opt4j-core/src/test/java/org/opt4j/core/common/completer/SequentialIndividualCompleterTest.java"}, "test_case": {"identifier": "evaluateDifferentObjectivesSize", "parameters": "()", "modifiers": "@Test(expected = AssertionError.class) public", "return": "void", "body": "@Test(expected = AssertionError.class)\n\tpublic void evaluateDifferentObjectivesSize() throws TerminationException {\n\t\tInjector injector = Guice.createInjector(new MockProblemModule());\n\t\tIndividualFactory factory = injector.getInstance(IndividualFactory.class);\n\t\tIndividual i1 = factory.create();\n\t\tIndividual i2 = factory.create();\n\n\t\tSequentialIndividualCompleter completer = injector.getInstance(SequentialIndividualCompleter.class);\n\n\t\ti1.setPhenotype(\"my phenotype\");\n\t\ti2.setPhenotype(\"my other phenotype\");\n\t\tcompleter.evaluate(i1);\n\t\tobjectives.add(new Objective(\"y\"), 4);\n\t\tcompleter.evaluate(i2);\n\t}", "signature": "void evaluateDifferentObjectivesSize()", "full_signature": "@Test(expected = AssertionError.class) public void evaluateDifferentObjectivesSize()", "class_method_signature": "SequentialIndividualCompleterTest.evaluateDifferentObjectivesSize()", "testcase": true, "constructor": false, "invocations": ["createInjector", "getInstance", "create", "create", "getInstance", "setPhenotype", "setPhenotype", "evaluate", "add", "evaluate"]}, "focal_class": {"identifier": "SequentialIndividualCompleter", "superclass": "", "interfaces": "implements IndividualCompleter", "fields": [{"original_string": "protected final Decoder<Genotype, Object> decoder;", "modifier": "protected final", "type": "Decoder<Genotype, Object>", "declarator": "decoder", "var_name": "decoder"}, {"original_string": "protected final Evaluator<Object> evaluator;", "modifier": "protected final", "type": "Evaluator<Object>", "declarator": "evaluator", "var_name": "evaluator"}, {"original_string": "protected final Control control;", "modifier": "protected final", "type": "Control", "declarator": "control", "var_name": "control"}, {"original_string": "private Set<Objective> objectives = null;", "modifier": "private", "type": "Set<Objective>", "declarator": "objectives = null", "var_name": "objectives"}], "methods": [{"identifier": "SequentialIndividualCompleter", "parameters": "(Control control, Decoder<Genotype, Object> decoder,\n\t\t\tEvaluator<Object> evaluator)", "modifiers": "@Inject public", "return": "", "signature": " SequentialIndividualCompleter(Control control, Decoder<Genotype, Object> decoder,\n\t\t\tEvaluator<Object> evaluator)", "full_signature": "@Inject public  SequentialIndividualCompleter(Control control, Decoder<Genotype, Object> decoder,\n\t\t\tEvaluator<Object> evaluator)", "class_method_signature": "SequentialIndividualCompleter.SequentialIndividualCompleter(Control control, Decoder<Genotype, Object> decoder,\n\t\t\tEvaluator<Object> evaluator)", "testcase": false, "constructor": true}, {"identifier": "complete", "parameters": "(Iterable<? extends Individual> iterable)", "modifiers": "@Override public", "return": "void", "signature": "void complete(Iterable<? extends Individual> iterable)", "full_signature": "@Override public void complete(Iterable<? extends Individual> iterable)", "class_method_signature": "SequentialIndividualCompleter.complete(Iterable<? extends Individual> iterable)", "testcase": false, "constructor": false}, {"identifier": "complete", "parameters": "(Individual... individuals)", "modifiers": "@Override public", "return": "void", "signature": "void complete(Individual... individuals)", "full_signature": "@Override public void complete(Individual... individuals)", "class_method_signature": "SequentialIndividualCompleter.complete(Individual... individuals)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(Individual individual)", "modifiers": "protected", "return": "void", "signature": "void evaluate(Individual individual)", "full_signature": "protected void evaluate(Individual individual)", "class_method_signature": "SequentialIndividualCompleter.evaluate(Individual individual)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(Individual individual)", "modifiers": "protected", "return": "void", "signature": "void decode(Individual individual)", "full_signature": "protected void decode(Individual individual)", "class_method_signature": "SequentialIndividualCompleter.decode(Individual individual)", "testcase": false, "constructor": false}, {"identifier": "isSameLength", "parameters": "(Collection<Objective> objectives)", "modifiers": "private", "return": "boolean", "signature": "boolean isSameLength(Collection<Objective> objectives)", "full_signature": "private boolean isSameLength(Collection<Objective> objectives)", "class_method_signature": "SequentialIndividualCompleter.isSameLength(Collection<Objective> objectives)", "testcase": false, "constructor": false}], "file": "opt4j-core/src/main/java/org/opt4j/core/common/completer/SequentialIndividualCompleter.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(Individual individual)", "modifiers": "protected", "return": "void", "body": "protected void evaluate(Individual individual) {\n\t\tState state = individual.getState();\n\n\t\tif (state == State.PHENOTYPED) {\n\t\t\tindividual.setState(State.EVALUATING);\n\t\t\tObject phenotype = individual.getPhenotype();\n\n\t\t\tObjectives objectives = evaluator.evaluate(phenotype);\n\t\t\tassert isSameLength(objectives.getKeys()) : \"Objectives changed: \" + objectives.getKeys();\n\n\t\t\tindividual.setObjectives(objectives);\n\t\t} else {\n\t\t\tthrow new IllegalStateException(\"Cannot evaluate Individual, current state: \" + state);\n\t\t}\n\t}", "signature": "void evaluate(Individual individual)", "full_signature": "protected void evaluate(Individual individual)", "class_method_signature": "SequentialIndividualCompleter.evaluate(Individual individual)", "testcase": false, "constructor": false, "invocations": ["getState", "setState", "getPhenotype", "evaluate", "isSameLength", "getKeys", "getKeys", "setObjectives"]}, "repository": {"repo_id": 119080111, "url": "https://github.com/felixreimann/opt4j", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 11, "size": 8771, "license": "licensed"}}