{"test_class": {"identifier": "TsFileDeserializerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TsFileDeserializer tsFileDeserializer;", "modifier": "private", "type": "TsFileDeserializer", "declarator": "tsFileDeserializer", "var_name": "tsFileDeserializer"}, {"original_string": "private List<String> columnNames;", "modifier": "private", "type": "List<String>", "declarator": "columnNames", "var_name": "columnNames"}, {"original_string": "private List<TypeInfo> columnTypes;", "modifier": "private", "type": "List<TypeInfo>", "declarator": "columnTypes", "var_name": "columnTypes"}], "file": "hive-connector/src/test/java/org/apache/iotdb/hive/TsFileDeserializerTest.java"}, "test_case": {"identifier": "testDeserialize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testDeserialize() {\n    tsFileDeserializer = new TsFileDeserializer();\n    assertEquals(PrimitiveObjectInspector.PrimitiveCategory.LONG, ((PrimitiveTypeInfo)columnTypes.get(0)).getPrimitiveCategory());\n\n    Writable worryWritable1 = new Text();\n    try {\n      tsFileDeserializer.deserialize(columnNames, columnTypes, worryWritable1, \"device_1\");\n      fail(\"Expect a TsFileSerDeException to be thrown!\");\n    } catch (TsFileSerDeException e) {\n      assertEquals(\"Expecting a MapWritable\", e.getMessage());\n    }\n\n    MapWritable worryWritable2 = new MapWritable();\n    worryWritable2.put(new Text(\"device_id\"), new Text(\"device_2\"));\n    worryWritable2.put(new Text(\"time_stamp\"), new LongWritable(1L));\n    worryWritable2.put(new Text(\"sensor_1\"), new LongWritable(1L));\n    try {\n      assertNull(tsFileDeserializer.deserialize(columnNames, columnTypes, worryWritable2, \"device_1\"));\n    } catch (TsFileSerDeException e) {\n      fail(\"Don't expect a TsFileSerDeException to be Thrown!\");\n    }\n\n    MapWritable worryWritable3 = new MapWritable();\n    worryWritable3.put(new Text(\"device_id\"), new Text(\"device_1\"));\n    worryWritable3.put(new Text(\"time_stamp\"), new LongWritable(1L));\n    worryWritable3.put(new Text(\"sensor_1\"), new IntWritable(1));\n    try {\n      tsFileDeserializer.deserialize(columnNames, columnTypes, worryWritable3, \"device_1\");\n      fail(\"Expect a TsFileSerDeException to be thrown!\");\n    } catch (TsFileSerDeException e) {\n      assertEquals(\"Unexpected data type: \"\n                      + worryWritable3.get(new Text(\"sensor_1\")).getClass().getName()\n                      + \" for Date TypeInfo: \"\n                      + PrimitiveObjectInspector.PrimitiveCategory.LONG,\n              e.getMessage());\n    }\n\n    MapWritable writable = new MapWritable();\n    writable.put(new Text(\"device_id\"), new Text(\"device_1\"));\n    writable.put(new Text(\"time_stamp\"), new LongWritable(1L));\n    writable.put(new Text(\"sensor_1\"), new LongWritable(1000000L));\n    try {\n      Object result = tsFileDeserializer.deserialize(columnNames, columnTypes, writable, \"device_1\");\n      assertTrue(result instanceof List);\n      List<Object> row = (List<Object>) result;\n      assertEquals(columnNames.size(), row.size());\n      assertEquals(1L, row.get(0));\n      assertEquals(1000000L, row.get(1));\n    } catch (TsFileSerDeException e) {\n      fail(\"Don't expect a TsFileSerDeException to be Thrown!\");\n    }\n\n  }", "signature": "void testDeserialize()", "full_signature": "@Test public void testDeserialize()", "class_method_signature": "TsFileDeserializerTest.testDeserialize()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getPrimitiveCategory", "get", "deserialize", "fail", "assertEquals", "getMessage", "put", "put", "put", "assertNull", "deserialize", "fail", "put", "put", "put", "deserialize", "fail", "assertEquals", "getName", "getClass", "get", "getMessage", "put", "put", "put", "deserialize", "assertTrue", "assertEquals", "size", "size", "assertEquals", "get", "assertEquals", "get", "fail"]}, "focal_class": {"identifier": "TsFileDeserializer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(TsFileDeserializer.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(TsFileDeserializer.class)", "var_name": "LOG"}, {"original_string": "private List<Object> row;", "modifier": "private", "type": "List<Object>", "declarator": "row", "var_name": "row"}], "methods": [{"identifier": "deserialize", "parameters": "(List<String> columnNames, List<TypeInfo> columnTypes,\n                            Writable writable, String deviceId)", "modifiers": "@SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning public", "return": "Object", "signature": "Object deserialize(List<String> columnNames, List<TypeInfo> columnTypes,\n                            Writable writable, String deviceId)", "full_signature": "@SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning public Object deserialize(List<String> columnNames, List<TypeInfo> columnTypes,\n                            Writable writable, String deviceId)", "class_method_signature": "TsFileDeserializer.deserialize(List<String> columnNames, List<TypeInfo> columnTypes,\n                            Writable writable, String deviceId)", "testcase": false, "constructor": false}], "file": "hive-connector/src/main/java/org/apache/iotdb/hive/TsFileDeserializer.java"}, "focal_method": {"identifier": "deserialize", "parameters": "(List<String> columnNames, List<TypeInfo> columnTypes,\n                            Writable writable, String deviceId)", "modifiers": "@SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning public", "return": "Object", "body": "@SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning\n  public Object deserialize(List<String> columnNames, List<TypeInfo> columnTypes,\n                            Writable writable, String deviceId) throws TsFileSerDeException {\n    if(!(writable instanceof MapWritable)) {\n      throw new TsFileSerDeException(\"Expecting a MapWritable\");\n    }\n\n    if(row == null || row.size() != columnNames.size()) {\n      row = new ArrayList<>(columnNames.size());\n    } else {\n      row.clear();\n    }\n    MapWritable mapWritable = (MapWritable) writable;\n    if (!Objects.equals(mapWritable.get(new Text(\"device_id\")).toString(), deviceId)) {\n      return null;\n    }\n\n    LOG.debug(\"device_id: {}\", mapWritable.get(new Text(\"device_id\")).toString());\n    LOG.debug(\"time_stamp: {}\" , mapWritable.get(new Text(\"time_stamp\")));\n\n    for(int i = 0; i < columnNames.size(); i++) {\n      TypeInfo columnType = columnTypes.get(i);\n      String columnName = columnNames.get(i);\n      Writable data = mapWritable.get(new Text(columnName));\n      if (data == null || data instanceof NullWritable) {\n        row.add(null);\n        continue;\n      }\n      if (columnType.getCategory() != ObjectInspector.Category.PRIMITIVE) {\n        throw new TsFileSerDeException(\"Unknown TypeInfo: \" + columnType.getCategory());\n      }\n      PrimitiveObjectInspector.PrimitiveCategory type = ((PrimitiveTypeInfo) columnType).getPrimitiveCategory();\n      switch (type) {\n        case BOOLEAN:\n          if (data instanceof BooleanWritable) {\n            row.add(((BooleanWritable)data).get());\n          }\n          else {\n            throw new TsFileSerDeException(\"Unexpected data type: \" + data.getClass().getName() + \" for Date TypeInfo: \" + type);\n          }\n          break;\n        case INT:\n          if (data instanceof IntWritable) {\n            row.add(((IntWritable)data).get());\n          }\n          else {\n            throw new TsFileSerDeException(\"Unexpected data type: \" + data.getClass().getName() + \" for Date TypeInfo: \" + type);\n          }\n          break;\n        case LONG:\n          if (data instanceof LongWritable) {\n            row.add(((LongWritable)data).get());\n          }\n          else {\n            throw new TsFileSerDeException(\"Unexpected data type: \" + data.getClass().getName() + \" for Date TypeInfo: \" + type);\n          }\n          break;\n        case FLOAT:\n          if (data instanceof FloatWritable) {\n            row.add(((FloatWritable)data).get());\n          }\n          else {\n            throw new TsFileSerDeException(\"Unexpected data type: \" + data.getClass().getName() + \" for Date TypeInfo: \" + type);\n          }\n          break;\n        case DOUBLE:\n          if (data instanceof DoubleWritable) {\n            row.add(((DoubleWritable)data).get());\n          }\n          else {\n            throw new TsFileSerDeException(\"Unexpected data type: \" + data.getClass().getName() + \" for Date TypeInfo: \" + type);\n          }\n          break;\n        case STRING:\n          if (data instanceof Text) {\n            row.add(data.toString());\n          }\n          else {\n            throw new TsFileSerDeException(\"Unexpected data type: \" + data.getClass().getName() + \" for Date TypeInfo: \" + type);\n          }\n          break;\n        case TIMESTAMP:\n          if (data instanceof LongWritable) {\n            row.add(new Timestamp(((LongWritable)data).get()));\n          }\n          else {\n            throw new TsFileSerDeException(\"Unexpected data type: \" + data.getClass().getName() + \" for Date TypeInfo: \" + type);\n          }\n          break;\n        default:\n          throw new TsFileSerDeException(\"Unknown TypeInfo: \" + columnType.getCategory());\n      }\n    }\n    return row;\n  }", "signature": "Object deserialize(List<String> columnNames, List<TypeInfo> columnTypes,\n                            Writable writable, String deviceId)", "full_signature": "@SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning public Object deserialize(List<String> columnNames, List<TypeInfo> columnTypes,\n                            Writable writable, String deviceId)", "class_method_signature": "TsFileDeserializer.deserialize(List<String> columnNames, List<TypeInfo> columnTypes,\n                            Writable writable, String deviceId)", "testcase": false, "constructor": false, "invocations": ["size", "size", "size", "clear", "equals", "toString", "get", "debug", "toString", "get", "debug", "get", "size", "get", "get", "get", "add", "getCategory", "getCategory", "getPrimitiveCategory", "add", "get", "getName", "getClass", "add", "get", "getName", "getClass", "add", "get", "getName", "getClass", "add", "get", "getName", "getClass", "add", "get", "getName", "getClass", "add", "toString", "getName", "getClass", "add", "get", "getName", "getClass", "getCategory"]}, "repository": {"repo_id": 158975124, "url": "https://github.com/apache/incubator-iotdb", "stars": 449, "created": "11/24/2018 9:29:17 PM +00:00", "updates": "2020-01-21T08:10:15+00:00", "fork": "False", "license": "licensed"}}