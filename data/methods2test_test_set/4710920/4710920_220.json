{"test_class": {"identifier": "ConsulRegistryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static ConsulProcess consul;", "modifier": "private static", "type": "ConsulProcess", "declarator": "consul", "var_name": "consul"}, {"original_string": "private ConsulRegistry consulRegistry;", "modifier": "private", "type": "ConsulRegistry", "declarator": "consulRegistry", "var_name": "consulRegistry"}, {"original_string": "private String service = \"org.apache.dubbo.test.injvmServie\";", "modifier": "private", "type": "String", "declarator": "service = \"org.apache.dubbo.test.injvmServie\"", "var_name": "service"}, {"original_string": "private URL serviceUrl = URL.valueOf(\"consul://127.0.0.1:\" + NetUtils.getAvailablePort() + \"/\" + service + \"?notify=false&methods=test1,test2\");", "modifier": "private", "type": "URL", "declarator": "serviceUrl = URL.valueOf(\"consul://127.0.0.1:\" + NetUtils.getAvailablePort() + \"/\" + service + \"?notify=false&methods=test1,test2\")", "var_name": "serviceUrl"}, {"original_string": "private URL registryUrl;", "modifier": "private", "type": "URL", "declarator": "registryUrl", "var_name": "registryUrl"}, {"original_string": "private ConsulRegistryFactory consulRegistryFactory;", "modifier": "private", "type": "ConsulRegistryFactory", "declarator": "consulRegistryFactory", "var_name": "consulRegistryFactory"}], "file": "dubbo-registry/dubbo-registry-consul/src/test/java/org/apache/dubbo/registry/consul/ConsulRegistryTest.java"}, "test_case": {"identifier": "testRegister", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRegister() {\n        Set<URL> registered;\n\n        for (int i = 0; i < 2; i++) {\n            consulRegistry.register(serviceUrl);\n            registered = consulRegistry.getRegistered();\n            assertThat(registered.contains(serviceUrl), is(true));\n        }\n\n        registered = consulRegistry.getRegistered();\n\n        assertThat(registered.size(), is(1));\n    }", "signature": "void testRegister()", "full_signature": "@Test public void testRegister()", "class_method_signature": "ConsulRegistryTest.testRegister()", "testcase": true, "constructor": false, "invocations": ["register", "getRegistered", "assertThat", "contains", "is", "getRegistered", "assertThat", "size", "is"]}, "focal_class": {"identifier": "ConsulRegistry", "superclass": "extends FailbackRegistry", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ConsulRegistry.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ConsulRegistry.class)", "var_name": "logger"}, {"original_string": "private ConsulClient client;", "modifier": "private", "type": "ConsulClient", "declarator": "client", "var_name": "client"}, {"original_string": "private long checkPassInterval;", "modifier": "private", "type": "long", "declarator": "checkPassInterval", "var_name": "checkPassInterval"}, {"original_string": "private ExecutorService notifierExecutor = newCachedThreadPool(\n            new NamedThreadFactory(\"dubbo-consul-notifier\", true));", "modifier": "private", "type": "ExecutorService", "declarator": "notifierExecutor = newCachedThreadPool(\n            new NamedThreadFactory(\"dubbo-consul-notifier\", true))", "var_name": "notifierExecutor"}, {"original_string": "private ConcurrentMap<URL, ConsulNotifier> notifiers = new ConcurrentHashMap<>();", "modifier": "private", "type": "ConcurrentMap<URL, ConsulNotifier>", "declarator": "notifiers = new ConcurrentHashMap<>()", "var_name": "notifiers"}, {"original_string": "private ScheduledExecutorService ttlConsulCheckExecutor;", "modifier": "private", "type": "ScheduledExecutorService", "declarator": "ttlConsulCheckExecutor", "var_name": "ttlConsulCheckExecutor"}, {"original_string": "private String token;", "modifier": "private", "type": "String", "declarator": "token", "var_name": "token"}], "methods": [{"identifier": "ConsulRegistry", "parameters": "(URL url)", "modifiers": "public", "return": "", "signature": " ConsulRegistry(URL url)", "full_signature": "public  ConsulRegistry(URL url)", "class_method_signature": "ConsulRegistry.ConsulRegistry(URL url)", "testcase": false, "constructor": true}, {"identifier": "register", "parameters": "(URL url)", "modifiers": "@Override public", "return": "void", "signature": "void register(URL url)", "full_signature": "@Override public void register(URL url)", "class_method_signature": "ConsulRegistry.register(URL url)", "testcase": false, "constructor": false}, {"identifier": "doRegister", "parameters": "(URL url)", "modifiers": "@Override public", "return": "void", "signature": "void doRegister(URL url)", "full_signature": "@Override public void doRegister(URL url)", "class_method_signature": "ConsulRegistry.doRegister(URL url)", "testcase": false, "constructor": false}, {"identifier": "unregister", "parameters": "(URL url)", "modifiers": "@Override public", "return": "void", "signature": "void unregister(URL url)", "full_signature": "@Override public void unregister(URL url)", "class_method_signature": "ConsulRegistry.unregister(URL url)", "testcase": false, "constructor": false}, {"identifier": "doUnregister", "parameters": "(URL url)", "modifiers": "@Override public", "return": "void", "signature": "void doUnregister(URL url)", "full_signature": "@Override public void doUnregister(URL url)", "class_method_signature": "ConsulRegistry.doUnregister(URL url)", "testcase": false, "constructor": false}, {"identifier": "subscribe", "parameters": "(URL url, NotifyListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void subscribe(URL url, NotifyListener listener)", "full_signature": "@Override public void subscribe(URL url, NotifyListener listener)", "class_method_signature": "ConsulRegistry.subscribe(URL url, NotifyListener listener)", "testcase": false, "constructor": false}, {"identifier": "doSubscribe", "parameters": "(URL url, NotifyListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void doSubscribe(URL url, NotifyListener listener)", "full_signature": "@Override public void doSubscribe(URL url, NotifyListener listener)", "class_method_signature": "ConsulRegistry.doSubscribe(URL url, NotifyListener listener)", "testcase": false, "constructor": false}, {"identifier": "unsubscribe", "parameters": "(URL url, NotifyListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void unsubscribe(URL url, NotifyListener listener)", "full_signature": "@Override public void unsubscribe(URL url, NotifyListener listener)", "class_method_signature": "ConsulRegistry.unsubscribe(URL url, NotifyListener listener)", "testcase": false, "constructor": false}, {"identifier": "doUnsubscribe", "parameters": "(URL url, NotifyListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void doUnsubscribe(URL url, NotifyListener listener)", "full_signature": "@Override public void doUnsubscribe(URL url, NotifyListener listener)", "class_method_signature": "ConsulRegistry.doUnsubscribe(URL url, NotifyListener listener)", "testcase": false, "constructor": false}, {"identifier": "lookup", "parameters": "(URL url)", "modifiers": "@Override public", "return": "List<URL>", "signature": "List<URL> lookup(URL url)", "full_signature": "@Override public List<URL> lookup(URL url)", "class_method_signature": "ConsulRegistry.lookup(URL url)", "testcase": false, "constructor": false}, {"identifier": "isAvailable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAvailable()", "full_signature": "@Override public boolean isAvailable()", "class_method_signature": "ConsulRegistry.isAvailable()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "ConsulRegistry.destroy()", "testcase": false, "constructor": false}, {"identifier": "checkPass", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkPass()", "full_signature": "private void checkPass()", "class_method_signature": "ConsulRegistry.checkPass()", "testcase": false, "constructor": false}, {"identifier": "getHealthServices", "parameters": "(String service, long index, int watchTimeout)", "modifiers": "private", "return": "Response<List<HealthService>>", "signature": "Response<List<HealthService>> getHealthServices(String service, long index, int watchTimeout)", "full_signature": "private Response<List<HealthService>> getHealthServices(String service, long index, int watchTimeout)", "class_method_signature": "ConsulRegistry.getHealthServices(String service, long index, int watchTimeout)", "testcase": false, "constructor": false}, {"identifier": "getAllServices", "parameters": "(long index, int watchTimeout)", "modifiers": "private", "return": "Response<Map<String, List<String>>>", "signature": "Response<Map<String, List<String>>> getAllServices(long index, int watchTimeout)", "full_signature": "private Response<Map<String, List<String>>> getAllServices(long index, int watchTimeout)", "class_method_signature": "ConsulRegistry.getAllServices(long index, int watchTimeout)", "testcase": false, "constructor": false}, {"identifier": "getHealthServices", "parameters": "(Map<String, List<String>> services)", "modifiers": "private", "return": "List<HealthService>", "signature": "List<HealthService> getHealthServices(Map<String, List<String>> services)", "full_signature": "private List<HealthService> getHealthServices(Map<String, List<String>> services)", "class_method_signature": "ConsulRegistry.getHealthServices(Map<String, List<String>> services)", "testcase": false, "constructor": false}, {"identifier": "isConsumerSide", "parameters": "(URL url)", "modifiers": "private", "return": "boolean", "signature": "boolean isConsumerSide(URL url)", "full_signature": "private boolean isConsumerSide(URL url)", "class_method_signature": "ConsulRegistry.isConsumerSide(URL url)", "testcase": false, "constructor": false}, {"identifier": "isProviderSide", "parameters": "(URL url)", "modifiers": "private", "return": "boolean", "signature": "boolean isProviderSide(URL url)", "full_signature": "private boolean isProviderSide(URL url)", "class_method_signature": "ConsulRegistry.isProviderSide(URL url)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(List<HealthService> services, URL consumerURL)", "modifiers": "private", "return": "List<URL>", "signature": "List<URL> convert(List<HealthService> services, URL consumerURL)", "full_signature": "private List<URL> convert(List<HealthService> services, URL consumerURL)", "class_method_signature": "ConsulRegistry.convert(List<HealthService> services, URL consumerURL)", "testcase": false, "constructor": false}, {"identifier": "emptyURL", "parameters": "(URL consumerURL)", "modifiers": "private", "return": "List<URL>", "signature": "List<URL> emptyURL(URL consumerURL)", "full_signature": "private List<URL> emptyURL(URL consumerURL)", "class_method_signature": "ConsulRegistry.emptyURL(URL consumerURL)", "testcase": false, "constructor": false}, {"identifier": "buildService", "parameters": "(URL url)", "modifiers": "private", "return": "NewService", "signature": "NewService buildService(URL url)", "full_signature": "private NewService buildService(URL url)", "class_method_signature": "ConsulRegistry.buildService(URL url)", "testcase": false, "constructor": false}, {"identifier": "buildTags", "parameters": "(URL url)", "modifiers": "private", "return": "List<String>", "signature": "List<String> buildTags(URL url)", "full_signature": "private List<String> buildTags(URL url)", "class_method_signature": "ConsulRegistry.buildTags(URL url)", "testcase": false, "constructor": false}, {"identifier": "buildId", "parameters": "(URL url)", "modifiers": "private", "return": "String", "signature": "String buildId(URL url)", "full_signature": "private String buildId(URL url)", "class_method_signature": "ConsulRegistry.buildId(URL url)", "testcase": false, "constructor": false}, {"identifier": "buildCheck", "parameters": "(URL url)", "modifiers": "private", "return": "NewService.Check", "signature": "NewService.Check buildCheck(URL url)", "full_signature": "private NewService.Check buildCheck(URL url)", "class_method_signature": "ConsulRegistry.buildCheck(URL url)", "testcase": false, "constructor": false}, {"identifier": "buildWatchTimeout", "parameters": "(URL url)", "modifiers": "private", "return": "int", "signature": "int buildWatchTimeout(URL url)", "full_signature": "private int buildWatchTimeout(URL url)", "class_method_signature": "ConsulRegistry.buildWatchTimeout(URL url)", "testcase": false, "constructor": false}], "file": "dubbo-registry/dubbo-registry-consul/src/main/java/org/apache/dubbo/registry/consul/ConsulRegistry.java"}, "focal_method": {"identifier": "register", "parameters": "(URL url)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void register(URL url) {\n        if (isConsumerSide(url)) {\n            return;\n        }\n\n        super.register(url);\n    }", "signature": "void register(URL url)", "full_signature": "@Override public void register(URL url)", "class_method_signature": "ConsulRegistry.register(URL url)", "testcase": false, "constructor": false, "invocations": ["isConsumerSide", "register"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}