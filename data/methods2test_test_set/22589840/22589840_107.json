{"test_class": {"identifier": "NotificationServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private NotificationServiceImpl notificationServiceImpl;", "modifier": "private", "type": "NotificationServiceImpl", "declarator": "notificationServiceImpl", "var_name": "notificationServiceImpl"}, {"original_string": "private PublisherDao publisherDaoMock;", "modifier": "private", "type": "PublisherDao", "declarator": "publisherDaoMock", "var_name": "publisherDaoMock"}, {"original_string": "private SubscriberDao subscriberDaoMock;", "modifier": "private", "type": "SubscriberDao", "declarator": "subscriberDaoMock", "var_name": "subscriberDaoMock"}, {"original_string": "private Identity identity;", "modifier": "private", "type": "Identity", "declarator": "identity", "var_name": "identity"}, {"original_string": "private Long subscriberId = new Long(1);", "modifier": "private", "type": "Long", "declarator": "subscriberId = new Long(1)", "var_name": "subscriberId"}, {"original_string": "private ICourse courseMock;", "modifier": "private", "type": "ICourse", "declarator": "courseMock", "var_name": "courseMock"}, {"original_string": "private ICourse secondCourseMock;", "modifier": "private", "type": "ICourse", "declarator": "secondCourseMock", "var_name": "secondCourseMock"}], "file": "OLAT-LMS/src/test/java/org/olat/lms/core/notification/impl/NotificationServiceImplTest.java"}, "test_case": {"identifier": "testGetSubscriptions_emptyList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetSubscriptions_emptyList() {\n        List<Subscription> subscriptions = notificationServiceImpl.getSubscriptions(identity);\n        assertNotNull(\"Should not return null\", subscriptions);\n        assertTrue(subscriptions.isEmpty());\n    }", "signature": "void testGetSubscriptions_emptyList()", "full_signature": "@Test public void testGetSubscriptions_emptyList()", "class_method_signature": "NotificationServiceImplTest.testGetSubscriptions_emptyList()", "testcase": true, "constructor": false, "invocations": ["getSubscriptions", "assertNotNull", "assertTrue", "isEmpty"]}, "focal_class": {"identifier": "NotificationServiceImpl", "superclass": "extends CoreBaseService<NotificationServiceMetric<NotificationServiceContext>, NotificationServiceContext>", "interfaces": "implements\n        NotificationService", "fields": [{"original_string": "private static final Logger log = LoggerHelper.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerHelper.getLogger()", "var_name": "log"}, {"original_string": "@Autowired\n    protected PublisherDao publisherDao;", "modifier": "@Autowired\n    protected", "type": "PublisherDao", "declarator": "publisherDao", "var_name": "publisherDao"}, {"original_string": "@Autowired\n    protected SubscriberDao subscriberDao;", "modifier": "@Autowired\n    protected", "type": "SubscriberDao", "declarator": "subscriberDao", "var_name": "subscriberDao"}, {"original_string": "@Autowired\n    SubscriptionDao subscriptionDao;", "modifier": "@Autowired", "type": "SubscriptionDao", "declarator": "subscriptionDao", "var_name": "subscriptionDao"}, {"original_string": "@Autowired\n    NotificationEventDao notificationEventDao;", "modifier": "@Autowired", "type": "NotificationEventDao", "declarator": "notificationEventDao", "var_name": "notificationEventDao"}, {"original_string": "@Autowired\n    PublishDelegate publishDelegate;", "modifier": "@Autowired", "type": "PublishDelegate", "declarator": "publishDelegate", "var_name": "publishDelegate"}, {"original_string": "@Autowired\n    SubscriptionDelegate subscriptionDelegate;", "modifier": "@Autowired", "type": "SubscriptionDelegate", "declarator": "subscriptionDelegate", "var_name": "subscriptionDelegate"}, {"original_string": "@Autowired\n    NotifyDelegate notifyDelegate;", "modifier": "@Autowired", "type": "NotifyDelegate", "declarator": "notifyDelegate", "var_name": "notifyDelegate"}, {"original_string": "@Autowired\n    NewsBuilder newsBuilder;", "modifier": "@Autowired", "type": "NewsBuilder", "declarator": "newsBuilder", "var_name": "newsBuilder"}], "methods": [{"identifier": "setNotifyDelegate", "parameters": "(NotifyDelegate notifyDelegate)", "modifiers": "public", "return": "void", "signature": "void setNotifyDelegate(NotifyDelegate notifyDelegate)", "full_signature": "public void setNotifyDelegate(NotifyDelegate notifyDelegate)", "class_method_signature": "NotificationServiceImpl.setNotifyDelegate(NotifyDelegate notifyDelegate)", "testcase": false, "constructor": false}, {"identifier": "subscribe", "parameters": "(NotificationSubscriptionContext subscriptionContext)", "modifiers": "@Override public", "return": "Subscription", "signature": "Subscription subscribe(NotificationSubscriptionContext subscriptionContext)", "full_signature": "@Override public Subscription subscribe(NotificationSubscriptionContext subscriptionContext)", "class_method_signature": "NotificationServiceImpl.subscribe(NotificationSubscriptionContext subscriptionContext)", "testcase": false, "constructor": false}, {"identifier": "getSubscriptions", "parameters": "(Identity identity)", "modifiers": "@Override public", "return": "List<Subscription>", "signature": "List<Subscription> getSubscriptions(Identity identity)", "full_signature": "@Override public List<Subscription> getSubscriptions(Identity identity)", "class_method_signature": "NotificationServiceImpl.getSubscriptions(Identity identity)", "testcase": false, "constructor": false}, {"identifier": "publishEvent", "parameters": "(PublishEventTO publishEventTO)", "modifiers": "@Override @Retryable // LD reviewed: should use Propagation.REQUIRES_NEW, else it is not possible to be successful in case of retry // @Transactional(propagation = Propagation.REQUIRES_NEW) public", "return": "int", "signature": "int publishEvent(PublishEventTO publishEventTO)", "full_signature": "@Override @Retryable // LD reviewed: should use Propagation.REQUIRES_NEW, else it is not possible to be successful in case of retry // @Transactional(propagation = Propagation.REQUIRES_NEW) public int publishEvent(PublishEventTO publishEventTO)", "class_method_signature": "NotificationServiceImpl.publishEvent(PublishEventTO publishEventTO)", "testcase": false, "constructor": false}, {"identifier": "isPublishRelevant", "parameters": "(PublishEventTO publishEventTO)", "modifiers": "private", "return": "boolean", "signature": "boolean isPublishRelevant(PublishEventTO publishEventTO)", "full_signature": "private boolean isPublishRelevant(PublishEventTO publishEventTO)", "class_method_signature": "NotificationServiceImpl.isPublishRelevant(PublishEventTO publishEventTO)", "testcase": false, "constructor": false}, {"identifier": "notifySubscribers", "parameters": "()", "modifiers": "@Override public", "return": "NotifyStatistics", "signature": "NotifyStatistics notifySubscribers()", "full_signature": "@Override public NotifyStatistics notifySubscribers()", "class_method_signature": "NotificationServiceImpl.notifySubscribers()", "testcase": false, "constructor": false}, {"identifier": "getSubscribersIds", "parameters": "()", "modifiers": "@Override public", "return": "List<Long>", "signature": "List<Long> getSubscribersIds()", "full_signature": "@Override public List<Long> getSubscribersIds()", "class_method_signature": "NotificationServiceImpl.getSubscribersIds()", "testcase": false, "constructor": false}, {"identifier": "notifySubscriber", "parameters": "(Long subscriberId)", "modifiers": "@Override public", "return": "NotifyStatistics", "signature": "NotifyStatistics notifySubscriber(Long subscriberId)", "full_signature": "@Override public NotifyStatistics notifySubscriber(Long subscriberId)", "class_method_signature": "NotificationServiceImpl.notifySubscriber(Long subscriberId)", "testcase": false, "constructor": false}, {"identifier": "setMetrics", "parameters": "(List<NotificationServiceMetric<NotificationServiceContext>> metrics)", "modifiers": "@Autowired @Override protected", "return": "void", "signature": "void setMetrics(List<NotificationServiceMetric<NotificationServiceContext>> metrics)", "full_signature": "@Autowired @Override protected void setMetrics(List<NotificationServiceMetric<NotificationServiceContext>> metrics)", "class_method_signature": "NotificationServiceImpl.setMetrics(List<NotificationServiceMetric<NotificationServiceContext>> metrics)", "testcase": false, "constructor": false}, {"identifier": "unsubscribe", "parameters": "(NotificationSubscriptionContext subscriptionContext)", "modifiers": "@Override public", "return": "void", "signature": "void unsubscribe(NotificationSubscriptionContext subscriptionContext)", "full_signature": "@Override public void unsubscribe(NotificationSubscriptionContext subscriptionContext)", "class_method_signature": "NotificationServiceImpl.unsubscribe(NotificationSubscriptionContext subscriptionContext)", "testcase": false, "constructor": false}, {"identifier": "unsubscribe", "parameters": "(Subscription subscription)", "modifiers": "@Override public", "return": "void", "signature": "void unsubscribe(Subscription subscription)", "full_signature": "@Override public void unsubscribe(Subscription subscription)", "class_method_signature": "NotificationServiceImpl.unsubscribe(Subscription subscription)", "testcase": false, "constructor": false}, {"identifier": "isSubscribed", "parameters": "(NotificationSubscriptionContext subscriptionContext)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSubscribed(NotificationSubscriptionContext subscriptionContext)", "full_signature": "@Override public boolean isSubscribed(NotificationSubscriptionContext subscriptionContext)", "class_method_signature": "NotificationServiceImpl.isSubscribed(NotificationSubscriptionContext subscriptionContext)", "testcase": false, "constructor": false}, {"identifier": "getMetrics", "parameters": "()", "modifiers": "", "return": "List<NotificationServiceMetric<NotificationServiceContext>>", "signature": "List<NotificationServiceMetric<NotificationServiceContext>> getMetrics()", "full_signature": " List<NotificationServiceMetric<NotificationServiceContext>> getMetrics()", "class_method_signature": "NotificationServiceImpl.getMetrics()", "testcase": false, "constructor": false}, {"identifier": "getNews", "parameters": "(Identity identity, DateFilter dateFilter)", "modifiers": "public", "return": "List<UserNotificationEventTO>", "signature": "List<UserNotificationEventTO> getNews(Identity identity, DateFilter dateFilter)", "full_signature": "public List<UserNotificationEventTO> getNews(Identity identity, DateFilter dateFilter)", "class_method_signature": "NotificationServiceImpl.getNews(Identity identity, DateFilter dateFilter)", "testcase": false, "constructor": false}, {"identifier": "getNotificationSubscriptionContexts", "parameters": "(Long subscriberId)", "modifiers": "@Override public", "return": "List<NotificationSubscriptionContext>", "signature": "List<NotificationSubscriptionContext> getNotificationSubscriptionContexts(Long subscriberId)", "full_signature": "@Override public List<NotificationSubscriptionContext> getNotificationSubscriptionContexts(Long subscriberId)", "class_method_signature": "NotificationServiceImpl.getNotificationSubscriptionContexts(Long subscriberId)", "testcase": false, "constructor": false}, {"identifier": "createNotificationSubscriptionContext", "parameters": "(Subscription subscription)", "modifiers": "private", "return": "NotificationSubscriptionContext", "signature": "NotificationSubscriptionContext createNotificationSubscriptionContext(Subscription subscription)", "full_signature": "private NotificationSubscriptionContext createNotificationSubscriptionContext(Subscription subscription)", "class_method_signature": "NotificationServiceImpl.createNotificationSubscriptionContext(Subscription subscription)", "testcase": false, "constructor": false}, {"identifier": "getAllSubscriberKeys", "parameters": "()", "modifiers": "@Override public", "return": "List<Long>", "signature": "List<Long> getAllSubscriberKeys()", "full_signature": "@Override public List<Long> getAllSubscriberKeys()", "class_method_signature": "NotificationServiceImpl.getAllSubscriberKeys()", "testcase": false, "constructor": false}, {"identifier": "invalidateUnaccesibleSubscriptions", "parameters": "(List<NotificationSubscriptionContext> notificationSubscriptionContexts)", "modifiers": "@Override public", "return": "void", "signature": "void invalidateUnaccesibleSubscriptions(List<NotificationSubscriptionContext> notificationSubscriptionContexts)", "full_signature": "@Override public void invalidateUnaccesibleSubscriptions(List<NotificationSubscriptionContext> notificationSubscriptionContexts)", "class_method_signature": "NotificationServiceImpl.invalidateUnaccesibleSubscriptions(List<NotificationSubscriptionContext> notificationSubscriptionContexts)", "testcase": false, "constructor": false}, {"identifier": "invalidateSubscription", "parameters": "(NotificationSubscriptionContext notificationSubscriptionContext)", "modifiers": "private", "return": "void", "signature": "void invalidateSubscription(NotificationSubscriptionContext notificationSubscriptionContext)", "full_signature": "private void invalidateSubscription(NotificationSubscriptionContext notificationSubscriptionContext)", "class_method_signature": "NotificationServiceImpl.invalidateSubscription(NotificationSubscriptionContext notificationSubscriptionContext)", "testcase": false, "constructor": false}, {"identifier": "isNotificationIntervalFor", "parameters": "(Identity identity, Subscriber.NotificationInterval notificationInterval)", "modifiers": "public", "return": "boolean", "signature": "boolean isNotificationIntervalFor(Identity identity, Subscriber.NotificationInterval notificationInterval)", "full_signature": "public boolean isNotificationIntervalFor(Identity identity, Subscriber.NotificationInterval notificationInterval)", "class_method_signature": "NotificationServiceImpl.isNotificationIntervalFor(Identity identity, Subscriber.NotificationInterval notificationInterval)", "testcase": false, "constructor": false}, {"identifier": "setNotificationIntervalFor", "parameters": "(Identity identity, Subscriber.NotificationInterval notificationInterval)", "modifiers": "public", "return": "void", "signature": "void setNotificationIntervalFor(Identity identity, Subscriber.NotificationInterval notificationInterval)", "full_signature": "public void setNotificationIntervalFor(Identity identity, Subscriber.NotificationInterval notificationInterval)", "class_method_signature": "NotificationServiceImpl.setNotificationIntervalFor(Identity identity, Subscriber.NotificationInterval notificationInterval)", "testcase": false, "constructor": false}, {"identifier": "removePublishers", "parameters": "(Set<Long> contextIds)", "modifiers": "public", "return": "void", "signature": "void removePublishers(Set<Long> contextIds)", "full_signature": "public void removePublishers(Set<Long> contextIds)", "class_method_signature": "NotificationServiceImpl.removePublishers(Set<Long> contextIds)", "testcase": false, "constructor": false}, {"identifier": "removeOldEvents", "parameters": "(Date notificationNewsDate)", "modifiers": "@Override public", "return": "void", "signature": "void removeOldEvents(Date notificationNewsDate)", "full_signature": "@Override public void removeOldEvents(Date notificationNewsDate)", "class_method_signature": "NotificationServiceImpl.removeOldEvents(Date notificationNewsDate)", "testcase": false, "constructor": false}, {"identifier": "deleteInvalidSubscribers", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void deleteInvalidSubscribers()", "full_signature": "@Override public void deleteInvalidSubscribers()", "class_method_signature": "NotificationServiceImpl.deleteInvalidSubscribers()", "testcase": false, "constructor": false}], "file": "OLAT-LMS/src/main/java/org/olat/lms/core/notification/impl/NotificationServiceImpl.java"}, "focal_method": {"identifier": "getSubscriptions", "parameters": "(Identity identity)", "modifiers": "@Override public", "return": "List<Subscription>", "body": "@Override\n    public List<Subscription> getSubscriptions(Identity identity) {\n        return subscriptionDelegate.getSubscriptions(identity);\n    }", "signature": "List<Subscription> getSubscriptions(Identity identity)", "full_signature": "@Override public List<Subscription> getSubscriptions(Identity identity)", "class_method_signature": "NotificationServiceImpl.getSubscriptions(Identity identity)", "testcase": false, "constructor": false, "invocations": ["getSubscriptions"]}, "repository": {"repo_id": 22589840, "url": "https://github.com/huihoo/olat", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 10, "size": 69738, "license": "licensed"}}