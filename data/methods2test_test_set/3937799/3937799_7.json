{"test_class": {"identifier": "TestNameNodeResourceChecker", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Configuration conf;", "modifier": "private", "type": "Configuration", "declarator": "conf", "var_name": "conf"}, {"original_string": "private File baseDir;", "modifier": "private", "type": "File", "declarator": "baseDir", "var_name": "baseDir"}, {"original_string": "private File nameDir;", "modifier": "private", "type": "File", "declarator": "nameDir", "var_name": "nameDir"}], "file": "adfs-hdfs-project/adfs-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/TestNameNodeResourceChecker.java"}, "test_case": {"identifier": "testCheckThatNameNodeResourceMonitorIsRunning", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCheckThatNameNodeResourceMonitorIsRunning()\n      throws IOException, InterruptedException {\n    MiniDFSCluster cluster = null;\n    try {\n      conf.set(\"dfs.name.dir\", nameDir.getAbsolutePath());\n      conf.setLong(DFSConfigKeys.DFS_NAMENODE_RESOURCE_CHECK_INTERVAL_KEY, 1);\n      \n      cluster = new MiniDFSCluster(conf, 1, true, null);\n\n      NameNodeResourceChecker mockResourceChecker = Mockito.mock(NameNodeResourceChecker.class);\n      Mockito.when(mockResourceChecker.hasAvailableDiskSpace()).thenReturn(true);\n      cluster.getNameNode().getNamesystem().nnResourceChecker = mockResourceChecker;\n\n      cluster.waitActive();\n\n      String name = NameNodeResourceMonitor.class.getName();\n\n      boolean isNameNodeMonitorRunning = false;\n      Set<Thread> runningThreads = Thread.getAllStackTraces().keySet();\n      for (Thread runningThread : runningThreads) {\n        if (runningThread.toString().startsWith(\"Thread[\" + name)) {\n          isNameNodeMonitorRunning = true;\n          break;\n        }\n      }\n      assertTrue(\"NN resource monitor should be running\",\n          isNameNodeMonitorRunning);\n      assertFalse(\"NN should not presently be in safe mode\",\n          cluster.getNameNode().isInSafeMode());\n      \n      Mockito.when(mockResourceChecker.hasAvailableDiskSpace()).thenReturn(false);\n\n      // Make sure the NNRM thread has a chance to run.\n      long startMillis = System.currentTimeMillis();\n      while (!cluster.getNameNode().isInSafeMode() &&\n          System.currentTimeMillis() < startMillis + (60 * 1000)) {\n        Thread.sleep(1000);\n      }\n\n      assertTrue(\"NN should be in safe mode after resources crossed threshold\",\n          cluster.getNameNode().isInSafeMode());\n    } finally {\n      if (cluster != null)\n        cluster.shutdown();\n    }\n  }", "signature": "void testCheckThatNameNodeResourceMonitorIsRunning()", "full_signature": "@Test public void testCheckThatNameNodeResourceMonitorIsRunning()", "class_method_signature": "TestNameNodeResourceChecker.testCheckThatNameNodeResourceMonitorIsRunning()", "testcase": true, "constructor": false, "invocations": ["set", "getAbsolutePath", "setLong", "mock", "thenReturn", "when", "hasAvailableDiskSpace", "getNamesystem", "getNameNode", "waitActive", "getName", "keySet", "getAllStackTraces", "startsWith", "toString", "assertTrue", "assertFalse", "isInSafeMode", "getNameNode", "thenReturn", "when", "hasAvailableDiskSpace", "currentTimeMillis", "isInSafeMode", "getNameNode", "currentTimeMillis", "sleep", "assertTrue", "isInSafeMode", "getNameNode", "shutdown"]}, "focal_class": {"identifier": "NameNodeResourceChecker", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(NameNodeResourceChecker.class.getName());", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(NameNodeResourceChecker.class.getName())", "var_name": "LOG"}, {"original_string": "private long duReserved;", "modifier": "private", "type": "long", "declarator": "duReserved", "var_name": "duReserved"}, {"original_string": "private final Configuration conf;", "modifier": "private final", "type": "Configuration", "declarator": "conf", "var_name": "conf"}, {"original_string": "private Map<String, DF> volumes;", "modifier": "private", "type": "Map<String, DF>", "declarator": "volumes", "var_name": "volumes"}], "methods": [{"identifier": "NameNodeResourceChecker", "parameters": "(Configuration conf)", "modifiers": "public", "return": "", "signature": " NameNodeResourceChecker(Configuration conf)", "full_signature": "public  NameNodeResourceChecker(Configuration conf)", "class_method_signature": "NameNodeResourceChecker.NameNodeResourceChecker(Configuration conf)", "testcase": false, "constructor": true}, {"identifier": "addDirsToCheck", "parameters": "(Collection<File> directoriesToCheck)", "modifiers": "private", "return": "void", "signature": "void addDirsToCheck(Collection<File> directoriesToCheck)", "full_signature": "private void addDirsToCheck(Collection<File> directoriesToCheck)", "class_method_signature": "NameNodeResourceChecker.addDirsToCheck(Collection<File> directoriesToCheck)", "testcase": false, "constructor": false}, {"identifier": "hasAvailableDiskSpace", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean hasAvailableDiskSpace()", "full_signature": " boolean hasAvailableDiskSpace()", "class_method_signature": "NameNodeResourceChecker.hasAvailableDiskSpace()", "testcase": false, "constructor": false}, {"identifier": "getVolumesLowOnSpace", "parameters": "()", "modifiers": "", "return": "Collection<String>", "signature": "Collection<String> getVolumesLowOnSpace()", "full_signature": " Collection<String> getVolumesLowOnSpace()", "class_method_signature": "NameNodeResourceChecker.getVolumesLowOnSpace()", "testcase": false, "constructor": false}, {"identifier": "setVolumes", "parameters": "(Map<String, DF> volumes)", "modifiers": "", "return": "void", "signature": "void setVolumes(Map<String, DF> volumes)", "full_signature": " void setVolumes(Map<String, DF> volumes)", "class_method_signature": "NameNodeResourceChecker.setVolumes(Map<String, DF> volumes)", "testcase": false, "constructor": false}], "file": "adfs-hdfs-project/adfs-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeResourceChecker.java"}, "focal_method": {"identifier": "hasAvailableDiskSpace", "parameters": "()", "modifiers": "", "return": "boolean", "body": "boolean hasAvailableDiskSpace()\n      throws IOException {\n    return getVolumesLowOnSpace().size() < volumes.size();\n  }", "signature": "boolean hasAvailableDiskSpace()", "full_signature": " boolean hasAvailableDiskSpace()", "class_method_signature": "NameNodeResourceChecker.hasAvailableDiskSpace()", "testcase": false, "constructor": false, "invocations": ["size", "getVolumesLowOnSpace", "size"]}, "repository": {"repo_id": 3937799, "url": "https://github.com/taobao/ADFS", "language": "Java", "is_fork": false, "fork_count": 50, "stargazer_count": 108, "size": 53300, "license": "licensed"}}