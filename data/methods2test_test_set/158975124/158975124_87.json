{"test_class": {"identifier": "SeriesReaderByTimestampTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SERIES_READER_TEST_SG = \"root.seriesReaderTest\";", "modifier": "private static final", "type": "String", "declarator": "SERIES_READER_TEST_SG = \"root.seriesReaderTest\"", "var_name": "SERIES_READER_TEST_SG"}, {"original_string": "private List<String> deviceIds = new ArrayList<>();", "modifier": "private", "type": "List<String>", "declarator": "deviceIds = new ArrayList<>()", "var_name": "deviceIds"}, {"original_string": "private List<MeasurementSchema> measurementSchemas = new ArrayList<>();", "modifier": "private", "type": "List<MeasurementSchema>", "declarator": "measurementSchemas = new ArrayList<>()", "var_name": "measurementSchemas"}, {"original_string": "private List<TsFileResource> seqResources = new ArrayList<>();", "modifier": "private", "type": "List<TsFileResource>", "declarator": "seqResources = new ArrayList<>()", "var_name": "seqResources"}, {"original_string": "private List<TsFileResource> unseqResources = new ArrayList<>();", "modifier": "private", "type": "List<TsFileResource>", "declarator": "unseqResources = new ArrayList<>()", "var_name": "unseqResources"}], "file": "server/src/test/java/org/apache/iotdb/db/query/reader/series/SeriesReaderByTimestampTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void test() throws IOException, IllegalPathException {\n    QueryDataSource dataSource = new QueryDataSource(\n      new PartialPath(SERIES_READER_TEST_SG + \".device0.sensor0\"),\n      seqResources, unseqResources);\n\n    Set<String> allSensors = new HashSet<>();\n    allSensors.add(\"sensor0\");\n\n    SeriesReaderByTimestamp seriesReader = new SeriesReaderByTimestamp(\n      new PartialPath(SERIES_READER_TEST_SG + \".device0.sensor0\"), allSensors,\n      TSDataType.INT32, new QueryContext(), dataSource, null);\n\n    for (int time = 0; time < 500; time++) {\n      Integer value = (Integer) seriesReader.getValueInTimestamp(time);\n      if (time < 200) {\n        Assert.assertEquals(time + 20000, value.intValue());\n      } else if (time < 260 || (time >= 300 && time < 380) || (time >= 400)) {\n        Assert.assertEquals(time + 10000, value.intValue());\n      } else {\n        Assert.assertEquals(time, value.intValue());\n      }\n    }\n  }", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "SeriesReaderByTimestampTest.test()", "testcase": true, "constructor": false, "invocations": ["add", "getValueInTimestamp", "assertEquals", "intValue", "assertEquals", "intValue", "assertEquals", "intValue"]}, "focal_class": {"identifier": "SeriesReaderByTimestamp", "superclass": "", "interfaces": "implements IReaderByTimestamp", "fields": [{"original_string": "protected SeriesReader seriesReader;", "modifier": "protected", "type": "SeriesReader", "declarator": "seriesReader", "var_name": "seriesReader"}, {"original_string": "protected BatchData batchData;", "modifier": "protected", "type": "BatchData", "declarator": "batchData", "var_name": "batchData"}], "methods": [{"identifier": "SeriesReaderByTimestamp", "parameters": "()", "modifiers": "public", "return": "", "signature": " SeriesReaderByTimestamp()", "full_signature": "public  SeriesReaderByTimestamp()", "class_method_signature": "SeriesReaderByTimestamp.SeriesReaderByTimestamp()", "testcase": false, "constructor": true}, {"identifier": "SeriesReaderByTimestamp", "parameters": "(PartialPath seriesPath, Set<String> allSensors,\n      TSDataType dataType, QueryContext context, QueryDataSource dataSource,\n      TsFileFilter fileFilter)", "modifiers": "public", "return": "", "signature": " SeriesReaderByTimestamp(PartialPath seriesPath, Set<String> allSensors,\n      TSDataType dataType, QueryContext context, QueryDataSource dataSource,\n      TsFileFilter fileFilter)", "full_signature": "public  SeriesReaderByTimestamp(PartialPath seriesPath, Set<String> allSensors,\n      TSDataType dataType, QueryContext context, QueryDataSource dataSource,\n      TsFileFilter fileFilter)", "class_method_signature": "SeriesReaderByTimestamp.SeriesReaderByTimestamp(PartialPath seriesPath, Set<String> allSensors,\n      TSDataType dataType, QueryContext context, QueryDataSource dataSource,\n      TsFileFilter fileFilter)", "testcase": false, "constructor": true}, {"identifier": "getValueInTimestamp", "parameters": "(long timestamp)", "modifiers": "@Override public", "return": "Object", "signature": "Object getValueInTimestamp(long timestamp)", "full_signature": "@Override public Object getValueInTimestamp(long timestamp)", "class_method_signature": "SeriesReaderByTimestamp.getValueInTimestamp(long timestamp)", "testcase": false, "constructor": false}, {"identifier": "readerIsEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean readerIsEmpty()", "full_signature": "@Override public boolean readerIsEmpty()", "class_method_signature": "SeriesReaderByTimestamp.readerIsEmpty()", "testcase": false, "constructor": false}, {"identifier": "hasNext", "parameters": "(long timestamp)", "modifiers": "protected", "return": "boolean", "signature": "boolean hasNext(long timestamp)", "full_signature": "protected boolean hasNext(long timestamp)", "class_method_signature": "SeriesReaderByTimestamp.hasNext(long timestamp)", "testcase": false, "constructor": false}, {"identifier": "readChunkData", "parameters": "(long timestamp)", "modifiers": "private", "return": "boolean", "signature": "boolean readChunkData(long timestamp)", "full_signature": "private boolean readChunkData(long timestamp)", "class_method_signature": "SeriesReaderByTimestamp.readChunkData(long timestamp)", "testcase": false, "constructor": false}, {"identifier": "readPageData", "parameters": "(long timestamp)", "modifiers": "private", "return": "boolean", "signature": "boolean readPageData(long timestamp)", "full_signature": "private boolean readPageData(long timestamp)", "class_method_signature": "SeriesReaderByTimestamp.readPageData(long timestamp)", "testcase": false, "constructor": false}, {"identifier": "satisfyTimeFilter", "parameters": "(Statistics statistics)", "modifiers": "private", "return": "boolean", "signature": "boolean satisfyTimeFilter(Statistics statistics)", "full_signature": "private boolean satisfyTimeFilter(Statistics statistics)", "class_method_signature": "SeriesReaderByTimestamp.satisfyTimeFilter(Statistics statistics)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(BatchData batchData)", "modifiers": "private", "return": "boolean", "signature": "boolean isEmpty(BatchData batchData)", "full_signature": "private boolean isEmpty(BatchData batchData)", "class_method_signature": "SeriesReaderByTimestamp.isEmpty(BatchData batchData)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/iotdb/db/query/reader/series/SeriesReaderByTimestamp.java"}, "focal_method": {"identifier": "getValueInTimestamp", "parameters": "(long timestamp)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n  public Object getValueInTimestamp(long timestamp) throws IOException {\n    seriesReader.setTimeFilter(timestamp);\n    if ((batchData == null || (batchData.getTimeByIndex(batchData.length() - 1) < timestamp))\n        && !hasNext(timestamp)) {\n      return null;\n    }\n\n    return batchData.getValueInTimestamp(timestamp);\n  }", "signature": "Object getValueInTimestamp(long timestamp)", "full_signature": "@Override public Object getValueInTimestamp(long timestamp)", "class_method_signature": "SeriesReaderByTimestamp.getValueInTimestamp(long timestamp)", "testcase": false, "constructor": false, "invocations": ["setTimeFilter", "getTimeByIndex", "length", "hasNext", "getValueInTimestamp"]}, "repository": {"repo_id": 158975124, "url": "https://github.com/apache/incubator-iotdb", "stars": 449, "created": "11/24/2018 9:29:17 PM +00:00", "updates": "2020-01-21T08:10:15+00:00", "fork": "False", "license": "licensed"}}