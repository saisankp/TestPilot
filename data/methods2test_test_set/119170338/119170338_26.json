{"test_class": {"identifier": "ImmutableOntologyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Ontology ontology = TestOntology.ontology();", "modifier": "private final", "type": "Ontology", "declarator": "ontology = TestOntology.ontology()", "var_name": "ontology"}], "file": "phenol-core/src/test/java/org/monarchinitiative/phenol/ontology/data/ImmutableOntologyTest.java"}, "test_case": {"identifier": "testBuilderNoRoot", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void testBuilderNoRoot() {\n\n    TermId childId = TermId.of(\"HP:0000001\");\n    Term child = Term.of(childId, \"child\");\n\n    TermId child2Id = TermId.of(\"HP:0000002\");\n    Term child2 = Term.of(child2Id, \"child2\");\n\n    assertThrows(PhenolRuntimeException.class, () -> ImmutableOntology.builder()\n      .terms(ImmutableList.of(child, child2))\n      .relationships(ImmutableList.of())\n      .build(), \"No root candidate found.\");\n  }", "signature": "void testBuilderNoRoot()", "full_signature": "@Test void testBuilderNoRoot()", "class_method_signature": "ImmutableOntologyTest.testBuilderNoRoot()", "testcase": true, "constructor": false, "invocations": ["of", "of", "of", "of", "assertThrows", "build", "relationships", "terms", "builder", "of", "of"]}, "focal_class": {"identifier": "ImmutableOntology", "superclass": "", "interfaces": "implements Ontology", "fields": [{"original_string": "private static final long serialVersionUID = 2L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 2L", "var_name": "serialVersionUID"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(ImmutableOntology.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ImmutableOntology.class)", "var_name": "logger"}, {"original_string": "private final ImmutableSortedMap<String, String> metaInfo;", "modifier": "private final", "type": "ImmutableSortedMap<String, String>", "declarator": "metaInfo", "var_name": "metaInfo"}, {"original_string": "private final DefaultDirectedGraph<TermId, IdLabeledEdge> graph;", "modifier": "private final", "type": "DefaultDirectedGraph<TermId, IdLabeledEdge>", "declarator": "graph", "var_name": "graph"}, {"original_string": "private final TermId rootTermId;", "modifier": "private final", "type": "TermId", "declarator": "rootTermId", "var_name": "rootTermId"}, {"original_string": "private final ImmutableMap<TermId, Term> termMap;", "modifier": "private final", "type": "ImmutableMap<TermId, Term>", "declarator": "termMap", "var_name": "termMap"}, {"original_string": "private final ImmutableSet<TermId> nonObsoleteTermIds;", "modifier": "private final", "type": "ImmutableSet<TermId>", "declarator": "nonObsoleteTermIds", "var_name": "nonObsoleteTermIds"}, {"original_string": "private final ImmutableSet<TermId> obsoleteTermIds;", "modifier": "private final", "type": "ImmutableSet<TermId>", "declarator": "obsoleteTermIds", "var_name": "obsoleteTermIds"}, {"original_string": "private final ImmutableSet<TermId> allTermIds;", "modifier": "private final", "type": "ImmutableSet<TermId>", "declarator": "allTermIds", "var_name": "allTermIds"}, {"original_string": "private final ImmutableMap<Integer, Relationship> relationMap;", "modifier": "private final", "type": "ImmutableMap<Integer, Relationship>", "declarator": "relationMap", "var_name": "relationMap"}, {"original_string": "private final ImmutableMap<TermId, ImmutableSet<TermId>> precomputedAncestors;", "modifier": "private final", "type": "ImmutableMap<TermId, ImmutableSet<TermId>>", "declarator": "precomputedAncestors", "var_name": "precomputedAncestors"}], "methods": [{"identifier": "ImmutableOntology", "parameters": "(\n      ImmutableSortedMap<String, String> metaInfo,\n      DefaultDirectedGraph<TermId, IdLabeledEdge> graph,\n      TermId rootTermId,\n      Collection<TermId> nonObsoleteTermIds,\n      Collection<TermId> obsoleteTermIds,\n      ImmutableMap<TermId, Term> termMap,\n      ImmutableMap<Integer, Relationship> relationMap)", "modifiers": "public", "return": "", "signature": " ImmutableOntology(\n      ImmutableSortedMap<String, String> metaInfo,\n      DefaultDirectedGraph<TermId, IdLabeledEdge> graph,\n      TermId rootTermId,\n      Collection<TermId> nonObsoleteTermIds,\n      Collection<TermId> obsoleteTermIds,\n      ImmutableMap<TermId, Term> termMap,\n      ImmutableMap<Integer, Relationship> relationMap)", "full_signature": "public  ImmutableOntology(\n      ImmutableSortedMap<String, String> metaInfo,\n      DefaultDirectedGraph<TermId, IdLabeledEdge> graph,\n      TermId rootTermId,\n      Collection<TermId> nonObsoleteTermIds,\n      Collection<TermId> obsoleteTermIds,\n      ImmutableMap<TermId, Term> termMap,\n      ImmutableMap<Integer, Relationship> relationMap)", "class_method_signature": "ImmutableOntology.ImmutableOntology(\n      ImmutableSortedMap<String, String> metaInfo,\n      DefaultDirectedGraph<TermId, IdLabeledEdge> graph,\n      TermId rootTermId,\n      Collection<TermId> nonObsoleteTermIds,\n      Collection<TermId> obsoleteTermIds,\n      ImmutableMap<TermId, Term> termMap,\n      ImmutableMap<Integer, Relationship> relationMap)", "testcase": false, "constructor": true}, {"identifier": "precomputeAncestors", "parameters": "()", "modifiers": "private", "return": "ImmutableMap<TermId, ImmutableSet<TermId>>", "signature": "ImmutableMap<TermId, ImmutableSet<TermId>> precomputeAncestors()", "full_signature": "private ImmutableMap<TermId, ImmutableSet<TermId>> precomputeAncestors()", "class_method_signature": "ImmutableOntology.precomputeAncestors()", "testcase": false, "constructor": false}, {"identifier": "getMetaInfo", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, String>", "signature": "Map<String, String> getMetaInfo()", "full_signature": "@Override public Map<String, String> getMetaInfo()", "class_method_signature": "ImmutableOntology.getMetaInfo()", "testcase": false, "constructor": false}, {"identifier": "getGraph", "parameters": "()", "modifiers": "@Override public", "return": "DefaultDirectedGraph<TermId, IdLabeledEdge>", "signature": "DefaultDirectedGraph<TermId, IdLabeledEdge> getGraph()", "full_signature": "@Override public DefaultDirectedGraph<TermId, IdLabeledEdge> getGraph()", "class_method_signature": "ImmutableOntology.getGraph()", "testcase": false, "constructor": false}, {"identifier": "getTermMap", "parameters": "()", "modifiers": "@Override public", "return": "Map<TermId, Term>", "signature": "Map<TermId, Term> getTermMap()", "full_signature": "@Override public Map<TermId, Term> getTermMap()", "class_method_signature": "ImmutableOntology.getTermMap()", "testcase": false, "constructor": false}, {"identifier": "getRelationMap", "parameters": "()", "modifiers": "@Override public", "return": "Map<Integer, Relationship>", "signature": "Map<Integer, Relationship> getRelationMap()", "full_signature": "@Override public Map<Integer, Relationship> getRelationMap()", "class_method_signature": "ImmutableOntology.getRelationMap()", "testcase": false, "constructor": false}, {"identifier": "isRootTerm", "parameters": "(TermId termId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isRootTerm(TermId termId)", "full_signature": "@Override public boolean isRootTerm(TermId termId)", "class_method_signature": "ImmutableOntology.isRootTerm(TermId termId)", "testcase": false, "constructor": false}, {"identifier": "getAncestorTermIds", "parameters": "(TermId termId, boolean includeRoot)", "modifiers": "@Override public", "return": "Set<TermId>", "signature": "Set<TermId> getAncestorTermIds(TermId termId, boolean includeRoot)", "full_signature": "@Override public Set<TermId> getAncestorTermIds(TermId termId, boolean includeRoot)", "class_method_signature": "ImmutableOntology.getAncestorTermIds(TermId termId, boolean includeRoot)", "testcase": false, "constructor": false}, {"identifier": "getAllAncestorTermIds", "parameters": "(Collection<TermId> termIds, boolean includeRoot)", "modifiers": "@Override public", "return": "Set<TermId>", "signature": "Set<TermId> getAllAncestorTermIds(Collection<TermId> termIds, boolean includeRoot)", "full_signature": "@Override public Set<TermId> getAllAncestorTermIds(Collection<TermId> termIds, boolean includeRoot)", "class_method_signature": "ImmutableOntology.getAllAncestorTermIds(Collection<TermId> termIds, boolean includeRoot)", "testcase": false, "constructor": false}, {"identifier": "getRootTermId", "parameters": "()", "modifiers": "@Override public", "return": "TermId", "signature": "TermId getRootTermId()", "full_signature": "@Override public TermId getRootTermId()", "class_method_signature": "ImmutableOntology.getRootTermId()", "testcase": false, "constructor": false}, {"identifier": "getAllTermIds", "parameters": "()", "modifiers": "@Override public", "return": "Set<TermId>", "signature": "Set<TermId> getAllTermIds()", "full_signature": "@Override public Set<TermId> getAllTermIds()", "class_method_signature": "ImmutableOntology.getAllTermIds()", "testcase": false, "constructor": false}, {"identifier": "getTerms", "parameters": "()", "modifiers": "@Override public", "return": "Collection<Term>", "signature": "Collection<Term> getTerms()", "full_signature": "@Override public Collection<Term> getTerms()", "class_method_signature": "ImmutableOntology.getTerms()", "testcase": false, "constructor": false}, {"identifier": "getNonObsoleteTermIds", "parameters": "()", "modifiers": "@Override public", "return": "Set<TermId>", "signature": "Set<TermId> getNonObsoleteTermIds()", "full_signature": "@Override public Set<TermId> getNonObsoleteTermIds()", "class_method_signature": "ImmutableOntology.getNonObsoleteTermIds()", "testcase": false, "constructor": false}, {"identifier": "getObsoleteTermIds", "parameters": "()", "modifiers": "@Override public", "return": "Set<TermId>", "signature": "Set<TermId> getObsoleteTermIds()", "full_signature": "@Override public Set<TermId> getObsoleteTermIds()", "class_method_signature": "ImmutableOntology.getObsoleteTermIds()", "testcase": false, "constructor": false}, {"identifier": "subOntology", "parameters": "(TermId subOntologyRoot)", "modifiers": "@Override public", "return": "Ontology", "signature": "Ontology subOntology(TermId subOntologyRoot)", "full_signature": "@Override public Ontology subOntology(TermId subOntologyRoot)", "class_method_signature": "ImmutableOntology.subOntology(TermId subOntologyRoot)", "testcase": false, "constructor": false}, {"identifier": "builder", "parameters": "()", "modifiers": "public static", "return": "Builder", "signature": "Builder builder()", "full_signature": "public static Builder builder()", "class_method_signature": "ImmutableOntology.builder()", "testcase": false, "constructor": false}], "file": "phenol-core/src/main/java/org/monarchinitiative/phenol/ontology/data/ImmutableOntology.java"}, "focal_method": {"identifier": "builder", "parameters": "()", "modifiers": "public static", "return": "Builder", "body": "public static Builder builder() {\n    return new Builder();\n  }", "signature": "Builder builder()", "full_signature": "public static Builder builder()", "class_method_signature": "ImmutableOntology.builder()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 119170338, "url": "https://github.com/monarch-initiative/phenol", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 5832, "license": "licensed"}}