{"test_class": {"identifier": "GuessingCompactFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "sdmxprovider/src/test/java/ec/tss/tsproviders/sdmx/engine/GuessingCompactFactoryTest.java"}, "test_case": {"identifier": "testCreate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreate() throws Exception {\n        SdmxSource source = new GuessingCompactFactory().create(load(\"/sdmx-compact-sample.xml\"));\n        assertEquals(4, source.items.size());\n\n        SdmxSeries s0 = (SdmxSeries) source.items.get(0);\n        assertEquals(\"COLLECTION=B, FREQ=M, JD_CATEGORY=A, JD_TYPE=P, VIS_CTY=MX\", s0.id);\n        assertEquals(12, s0.data.get().getObsCount());\n        assertEquals(TsFrequency.Monthly, s0.data.get().getFrequency());\n        assertEquals(new TsPeriod(TsFrequency.Monthly, 2000, 0), s0.data.get().getStart());\n        assertEquals(new TsPeriod(TsFrequency.Monthly, 2000, 11), s0.data.get().getLastPeriod());\n        assertArrayEquals(new double[]{3.14, 2.29, 3.14, 5.24, 3.14, 3.78, 3.65, 2.37, 3.14, 3.17, 3.34, 1.21}, s0.data.get().internalStorage(), 0);\n\n        SdmxSeries s1 = (SdmxSeries) source.items.get(1);\n        assertEquals(\"COLLECTION=B, FREQ=A, JD_CATEGORY=A, JD_TYPE=P, VIS_CTY=MX\", s1.id);\n        assertEquals(1, s1.data.get().getObsCount());\n        assertEquals(TsFrequency.Yearly, s1.data.get().getFrequency());\n        assertEquals(new TsPeriod(TsFrequency.Yearly, 2000, 0), s1.data.get().getStart());\n        assertEquals(s1.data.get().getStart(), s1.data.get().getLastPeriod());\n        assertArrayEquals(new double[]{3.14}, s1.data.get().internalStorage(), 0);\n    }", "signature": "void testCreate()", "full_signature": "@Test public void testCreate()", "class_method_signature": "GuessingCompactFactoryTest.testCreate()", "testcase": true, "constructor": false, "invocations": ["create", "load", "assertEquals", "size", "get", "assertEquals", "assertEquals", "getObsCount", "get", "assertEquals", "getFrequency", "get", "assertEquals", "getStart", "get", "assertEquals", "getLastPeriod", "get", "assertArrayEquals", "internalStorage", "get", "get", "assertEquals", "assertEquals", "getObsCount", "get", "assertEquals", "getFrequency", "get", "assertEquals", "getStart", "get", "assertEquals", "getStart", "get", "getLastPeriod", "get", "assertArrayEquals", "internalStorage", "get"]}, "focal_class": {"identifier": "GuessingCompactFactory", "superclass": "extends AbstractDocumentFactory", "interfaces": "", "fields": [{"original_string": "private static final String TIME_FORMAT_ATTRIBUTE = \"TIME_FORMAT\";", "modifier": "private static final", "type": "String", "declarator": "TIME_FORMAT_ATTRIBUTE = \"TIME_FORMAT\"", "var_name": "TIME_FORMAT_ATTRIBUTE"}, {"original_string": "private static final String FREQ_ATTRIBUTE = \"FREQ\";", "modifier": "private static final", "type": "String", "declarator": "FREQ_ATTRIBUTE = \"FREQ\"", "var_name": "FREQ_ATTRIBUTE"}, {"original_string": "private static final String TIME_PERIOD_ATTRIBUTE = \"TIME_PERIOD\";", "modifier": "private static final", "type": "String", "declarator": "TIME_PERIOD_ATTRIBUTE = \"TIME_PERIOD\"", "var_name": "TIME_PERIOD_ATTRIBUTE"}, {"original_string": "private static final String OBS_VALUE_ATTRIBUTE = \"OBS_VALUE\";", "modifier": "private static final", "type": "String", "declarator": "OBS_VALUE_ATTRIBUTE = \"OBS_VALUE\"", "var_name": "OBS_VALUE_ATTRIBUTE"}, {"original_string": "private static final DataFormat DEFAULT_DATA_FORMAT = DataFormat.ROOT;", "modifier": "private static final", "type": "DataFormat", "declarator": "DEFAULT_DATA_FORMAT = DataFormat.ROOT", "var_name": "DEFAULT_DATA_FORMAT"}], "methods": [{"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "GuessingCompactFactory.getName()", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "(Document doc)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isValid(Document doc)", "full_signature": "@Override public boolean isValid(Document doc)", "class_method_signature": "GuessingCompactFactory.isValid(Document doc)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Document doc)", "modifiers": "@Override public", "return": "SdmxSource", "signature": "SdmxSource create(Document doc)", "full_signature": "@Override public SdmxSource create(Document doc)", "class_method_signature": "GuessingCompactFactory.create(Document doc)", "testcase": false, "constructor": false}, {"identifier": "hasKeyFamilyRef", "parameters": "(Node dataSetNode)", "modifiers": "private static", "return": "boolean", "signature": "boolean hasKeyFamilyRef(Node dataSetNode)", "full_signature": "private static boolean hasKeyFamilyRef(Node dataSetNode)", "class_method_signature": "GuessingCompactFactory.hasKeyFamilyRef(Node dataSetNode)", "testcase": false, "constructor": false}, {"identifier": "getSdmxItems", "parameters": "(Node dataSetNode, Calendar cal)", "modifiers": "private static", "return": "List<SdmxItem>", "signature": "List<SdmxItem> getSdmxItems(Node dataSetNode, Calendar cal)", "full_signature": "private static List<SdmxItem> getSdmxItems(Node dataSetNode, Calendar cal)", "class_method_signature": "GuessingCompactFactory.getSdmxItems(Node dataSetNode, Calendar cal)", "testcase": false, "constructor": false}, {"identifier": "getSdmxSeries", "parameters": "(Node seriesNode, Calendar cal)", "modifiers": "private static", "return": "SdmxSeries", "signature": "SdmxSeries getSdmxSeries(Node seriesNode, Calendar cal)", "full_signature": "private static SdmxSeries getSdmxSeries(Node seriesNode, Calendar cal)", "class_method_signature": "GuessingCompactFactory.getSdmxSeries(Node seriesNode, Calendar cal)", "testcase": false, "constructor": false}, {"identifier": "getData", "parameters": "(Node seriesNode, TimeFormat timeFormat, Calendar cal)", "modifiers": "private static", "return": "OptionalTsData", "signature": "OptionalTsData getData(Node seriesNode, TimeFormat timeFormat, Calendar cal)", "full_signature": "private static OptionalTsData getData(Node seriesNode, TimeFormat timeFormat, Calendar cal)", "class_method_signature": "GuessingCompactFactory.getData(Node seriesNode, TimeFormat timeFormat, Calendar cal)", "testcase": false, "constructor": false}, {"identifier": "getPeriod", "parameters": "(NamedNodeMap obs, IParser<Date> toPeriod)", "modifiers": "private static", "return": "Date", "signature": "Date getPeriod(NamedNodeMap obs, IParser<Date> toPeriod)", "full_signature": "private static Date getPeriod(NamedNodeMap obs, IParser<Date> toPeriod)", "class_method_signature": "GuessingCompactFactory.getPeriod(NamedNodeMap obs, IParser<Date> toPeriod)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(NamedNodeMap obs, IParser<Number> toValue)", "modifiers": "private static", "return": "Number", "signature": "Number getValue(NamedNodeMap obs, IParser<Number> toValue)", "full_signature": "private static Number getValue(NamedNodeMap obs, IParser<Number> toValue)", "class_method_signature": "GuessingCompactFactory.getValue(NamedNodeMap obs, IParser<Number> toValue)", "testcase": false, "constructor": false}, {"identifier": "getKey", "parameters": "(Node seriesNode)", "modifiers": "private static", "return": "ImmutableList<Map.Entry<String, String>>", "signature": "ImmutableList<Map.Entry<String, String>> getKey(Node seriesNode)", "full_signature": "private static ImmutableList<Map.Entry<String, String>> getKey(Node seriesNode)", "class_method_signature": "GuessingCompactFactory.getKey(Node seriesNode)", "testcase": false, "constructor": false}, {"identifier": "getTimeFormat", "parameters": "(Node seriesNode)", "modifiers": "private static", "return": "TimeFormat", "signature": "TimeFormat getTimeFormat(Node seriesNode)", "full_signature": "private static TimeFormat getTimeFormat(Node seriesNode)", "class_method_signature": "GuessingCompactFactory.getTimeFormat(Node seriesNode)", "testcase": false, "constructor": false}, {"identifier": "lookupDataSetNode", "parameters": "(Document doc)", "modifiers": "private static", "return": "Optional<Node>", "signature": "Optional<Node> lookupDataSetNode(Document doc)", "full_signature": "private static Optional<Node> lookupDataSetNode(Document doc)", "class_method_signature": "GuessingCompactFactory.lookupDataSetNode(Document doc)", "testcase": false, "constructor": false}, {"identifier": "lookupObservations", "parameters": "(Node seriesNode)", "modifiers": "private static", "return": "Stream<NamedNodeMap>", "signature": "Stream<NamedNodeMap> lookupObservations(Node seriesNode)", "full_signature": "private static Stream<NamedNodeMap> lookupObservations(Node seriesNode)", "class_method_signature": "GuessingCompactFactory.lookupObservations(Node seriesNode)", "testcase": false, "constructor": false}], "file": "sdmxprovider/src/main/java/ec/tss/tsproviders/sdmx/engine/GuessingCompactFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(Document doc)", "modifiers": "@Override public", "return": "SdmxSource", "body": "@Override\n    public SdmxSource create(Document doc) {\n        Optional<Node> dataSetNode = lookupDataSetNode(doc);\n        return new SdmxSource(SdmxSource.Type.COMPACT, getSdmxItems(dataSetNode.get(), new GregorianCalendar()));\n    }", "signature": "SdmxSource create(Document doc)", "full_signature": "@Override public SdmxSource create(Document doc)", "class_method_signature": "GuessingCompactFactory.create(Document doc)", "testcase": false, "constructor": false, "invocations": ["lookupDataSetNode", "getSdmxItems", "get"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}