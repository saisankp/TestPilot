{"test_class": {"identifier": "FileSystemTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private boolean oldLibraryLoaderState;", "modifier": "private", "type": "boolean", "declarator": "oldLibraryLoaderState", "var_name": "oldLibraryLoaderState"}, {"original_string": "private static volatile TestingHandler handler;", "modifier": "private static volatile", "type": "TestingHandler", "declarator": "handler", "var_name": "handler"}], "file": "core/vmutils/src/test/java/org/arakhne/afc/vmutil/FileSystemTest.java"}, "test_case": {"identifier": "extensionString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void extensionString() {\n\t\tassertEquals(\".z\", FileSystem.extension(\"http://toto:titi@www.arakhne.org/path/to/file.x.z.z?toto#frag\"));  //$NON-NLS-1$ //$NON-NLS-2$\n\t\tassertEquals(\".z\", FileSystem.extension(\"jar:file:/home/test/j.jar!/org/arakhne/afc/vmutil/file.x.z.z\"));  //$NON-NLS-1$ //$NON-NLS-2$\n\t\tassertEquals(\".z\", FileSystem.extension(\"jar:jar:file:/home/test/j.jar!/inner/myjar.jar!/org/arakhne/afc/vmutil/file.x.z.z\"));  //$NON-NLS-1$ //$NON-NLS-2$\n\t\tassertEquals(\".z\", FileSystem.extension(\"jar:jar:file:/home/test/j.jar!/inner/myjar.jar!/org/arakhne/afc/vmutil/file.x.z.z\"));  //$NON-NLS-1$ //$NON-NLS-2$\n\t\tassertEquals(\".z\", FileSystem.extension(\"jar:file:/the path/to/file with space.toto!/org/arakhne/afc/vmutil/file.x.z.z\"));  //$NON-NLS-1$ //$NON-NLS-2$\n\t\tassertEquals(\".c\", FileSystem.extension(\"file:///a.b.c/\"));   //$NON-NLS-1$ //$NON-NLS-2$\n\t\tassertEquals(\".c\", FileSystem.extension(\"file:a.b.c\"));   //$NON-NLS-1$ //$NON-NLS-2$\n\t\tassertEquals(\".c\", FileSystem.extension(\"a.b.c\"));   //$NON-NLS-1$ //$NON-NLS-2$\n\t\tassertEquals(\"\", FileSystem.extension(\"file://\"));   //$NON-NLS-1$ //$NON-NLS-2$\n\n\t\tassertEquals(\".dae\", FileSystem.extension(\"D:\\\\vivus_test\\\\export dae\\\\yup\\\\terrain_physx.dae\"));   //$NON-NLS-1$ //$NON-NLS-2$\n\t\tassertEquals(\".dae\", FileSystem.extension(\"file:D:\\\\vivus_test\\\\export dae\\\\yup\\\\terrain_physx.dae\"));   //$NON-NLS-1$ //$NON-NLS-2$\n\t\tassertEquals(\".dae\", FileSystem.extension(\"file:\\\\D:\\\\vivus_test\\\\export dae\\\\yup\\\\terrain_physx.dae\"));   //$NON-NLS-1$ //$NON-NLS-2$\n\t}", "signature": "void extensionString()", "full_signature": "@Test public void extensionString()", "class_method_signature": "FileSystemTest.extensionString()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "extension", "assertEquals", "extension", "assertEquals", "extension", "assertEquals", "extension", "assertEquals", "extension", "assertEquals", "extension", "assertEquals", "extension", "assertEquals", "extension", "assertEquals", "extension", "assertEquals", "extension", "assertEquals", "extension", "assertEquals", "extension"]}, "focal_class": {"identifier": "FileSystem", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final char EXTENSION_SEPARATOR_CHAR = '.';", "modifier": "public static final", "type": "char", "declarator": "EXTENSION_SEPARATOR_CHAR = '.'", "var_name": "EXTENSION_SEPARATOR_CHAR"}, {"original_string": "public static final String CURRENT_DIRECTORY = \".\";", "modifier": "public static final", "type": "String", "declarator": "CURRENT_DIRECTORY = \".\"", "var_name": "CURRENT_DIRECTORY"}, {"original_string": "public static final String PARENT_DIRECTORY = \"..\";", "modifier": "public static final", "type": "String", "declarator": "PARENT_DIRECTORY = \"..\"", "var_name": "PARENT_DIRECTORY"}, {"original_string": "public static final char URL_PATH_SEPARATOR_CHAR = '/';", "modifier": "public static final", "type": "char", "declarator": "URL_PATH_SEPARATOR_CHAR = '/'", "var_name": "URL_PATH_SEPARATOR_CHAR"}, {"original_string": "public static final String URL_PATH_SEPARATOR = \"/\";", "modifier": "public static final", "type": "String", "declarator": "URL_PATH_SEPARATOR = \"/\"", "var_name": "URL_PATH_SEPARATOR"}, {"original_string": "public static final String EXTENSION_SEPARATOR = \".\";", "modifier": "public static final", "type": "String", "declarator": "EXTENSION_SEPARATOR = \".\"", "var_name": "EXTENSION_SEPARATOR"}, {"original_string": "public static final String JAR_URL_FILE_ROOT = \"!/\";", "modifier": "public static final", "type": "String", "declarator": "JAR_URL_FILE_ROOT = \"!/\"", "var_name": "JAR_URL_FILE_ROOT"}, {"original_string": "public static final char WINDOWS_SEPARATOR_CHAR = '\\\\';", "modifier": "public static final", "type": "char", "declarator": "WINDOWS_SEPARATOR_CHAR = '\\\\'", "var_name": "WINDOWS_SEPARATOR_CHAR"}, {"original_string": "public static final String WINDOWS_SEPARATOR_STRING = \"\\\\\";", "modifier": "public static final", "type": "String", "declarator": "WINDOWS_SEPARATOR_STRING = \"\\\\\"", "var_name": "WINDOWS_SEPARATOR_STRING"}, {"original_string": "public static final String UNIX_SEPARATOR_STRING = URL_PATH_SEPARATOR;", "modifier": "public static final", "type": "String", "declarator": "UNIX_SEPARATOR_STRING = URL_PATH_SEPARATOR", "var_name": "UNIX_SEPARATOR_STRING"}, {"original_string": "private static final String WINDOW_NATIVE_FILENAME_PATTERN;", "modifier": "private static final", "type": "String", "declarator": "WINDOW_NATIVE_FILENAME_PATTERN", "var_name": "WINDOW_NATIVE_FILENAME_PATTERN"}, {"original_string": "private static final Random RANDOM = new Random();", "modifier": "private static final", "type": "Random", "declarator": "RANDOM = new Random()", "var_name": "RANDOM"}, {"original_string": "private static final DeleteOnExitHook DELETE_ON_EXIT_HOOK = new DeleteOnExitHook();", "modifier": "private static final", "type": "DeleteOnExitHook", "declarator": "DELETE_ON_EXIT_HOOK = new DeleteOnExitHook()", "var_name": "DELETE_ON_EXIT_HOOK"}, {"original_string": "private static Boolean isFileCompatibleWithURL;", "modifier": "private static", "type": "Boolean", "declarator": "isFileCompatibleWithURL", "var_name": "isFileCompatibleWithURL"}, {"original_string": "private static final int BUFFER_SIZE = 4096;", "modifier": "private static final", "type": "int", "declarator": "BUFFER_SIZE = 4096", "var_name": "BUFFER_SIZE"}, {"original_string": "private static final char[] FILE_PREFIX = {'f', 'i', 'l', 'e', ':', '/', '/'};", "modifier": "private static final", "type": "char[]", "declarator": "FILE_PREFIX = {'f', 'i', 'l', 'e', ':', '/', '/'}", "var_name": "FILE_PREFIX"}], "methods": [{"identifier": "FileSystem", "parameters": "()", "modifiers": "private", "return": "", "signature": " FileSystem()", "full_signature": "private  FileSystem()", "class_method_signature": "FileSystem.FileSystem()", "testcase": false, "constructor": true}, {"identifier": "decodeHTMLEntities", "parameters": "(String string)", "modifiers": "private static", "return": "String", "signature": "String decodeHTMLEntities(String string)", "full_signature": "private static String decodeHTMLEntities(String string)", "class_method_signature": "FileSystem.decodeHTMLEntities(String string)", "testcase": false, "constructor": false}, {"identifier": "encodeHTMLEntities", "parameters": "(String string)", "modifiers": "private static", "return": "String", "signature": "String encodeHTMLEntities(String string)", "full_signature": "private static String encodeHTMLEntities(String string)", "class_method_signature": "FileSystem.encodeHTMLEntities(String string)", "testcase": false, "constructor": false}, {"identifier": "fromFileStandardToURLStandard", "parameters": "(File file)", "modifiers": "private static", "return": "String", "signature": "String fromFileStandardToURLStandard(File file)", "full_signature": "private static String fromFileStandardToURLStandard(File file)", "class_method_signature": "FileSystem.fromFileStandardToURLStandard(File file)", "testcase": false, "constructor": false}, {"identifier": "fromFileStandardToURLStandard", "parameters": "(String file)", "modifiers": "private static", "return": "String", "signature": "String fromFileStandardToURLStandard(String file)", "full_signature": "private static String fromFileStandardToURLStandard(String file)", "class_method_signature": "FileSystem.fromFileStandardToURLStandard(String file)", "testcase": false, "constructor": false}, {"identifier": "isJarURL", "parameters": "(URL url)", "modifiers": "@Pure @Inline(value = \"URISchemeType.JAR.isURL($1)\", imported = {URISchemeType.class}) public static", "return": "boolean", "signature": "boolean isJarURL(URL url)", "full_signature": "@Pure @Inline(value = \"URISchemeType.JAR.isURL($1)\", imported = {URISchemeType.class}) public static boolean isJarURL(URL url)", "class_method_signature": "FileSystem.isJarURL(URL url)", "testcase": false, "constructor": false}, {"identifier": "getJarURL", "parameters": "(URL url)", "modifiers": "@Pure public static", "return": "URL", "signature": "URL getJarURL(URL url)", "full_signature": "@Pure public static URL getJarURL(URL url)", "class_method_signature": "FileSystem.getJarURL(URL url)", "testcase": false, "constructor": false}, {"identifier": "getJarFile", "parameters": "(URL url)", "modifiers": "@Pure public static", "return": "File", "signature": "File getJarFile(URL url)", "full_signature": "@Pure public static File getJarFile(URL url)", "class_method_signature": "FileSystem.getJarFile(URL url)", "testcase": false, "constructor": false}, {"identifier": "toJarURL", "parameters": "(File jarFile, File insideFile)", "modifiers": "@Pure public static", "return": "URL", "signature": "URL toJarURL(File jarFile, File insideFile)", "full_signature": "@Pure public static URL toJarURL(File jarFile, File insideFile)", "class_method_signature": "FileSystem.toJarURL(File jarFile, File insideFile)", "testcase": false, "constructor": false}, {"identifier": "toJarURL", "parameters": "(File jarFile, String insideFile)", "modifiers": "@Pure @Inline(\"toJarURL(($1).toURI().toURL(), ($2))\") public static", "return": "URL", "signature": "URL toJarURL(File jarFile, String insideFile)", "full_signature": "@Pure @Inline(\"toJarURL(($1).toURI().toURL(), ($2))\") public static URL toJarURL(File jarFile, String insideFile)", "class_method_signature": "FileSystem.toJarURL(File jarFile, String insideFile)", "testcase": false, "constructor": false}, {"identifier": "toJarURL", "parameters": "(URL jarFile, File insideFile)", "modifiers": "@Pure public static", "return": "URL", "signature": "URL toJarURL(URL jarFile, File insideFile)", "full_signature": "@Pure public static URL toJarURL(URL jarFile, File insideFile)", "class_method_signature": "FileSystem.toJarURL(URL jarFile, File insideFile)", "testcase": false, "constructor": false}, {"identifier": "toJarURL", "parameters": "(URL jarFile, String insideFile)", "modifiers": "@Pure public static", "return": "URL", "signature": "URL toJarURL(URL jarFile, String insideFile)", "full_signature": "@Pure public static URL toJarURL(URL jarFile, String insideFile)", "class_method_signature": "FileSystem.toJarURL(URL jarFile, String insideFile)", "testcase": false, "constructor": false}, {"identifier": "isCaseSensitiveFilenameSystem", "parameters": "()", "modifiers": "@Pure public static", "return": "boolean", "signature": "boolean isCaseSensitiveFilenameSystem()", "full_signature": "@Pure public static boolean isCaseSensitiveFilenameSystem()", "class_method_signature": "FileSystem.isCaseSensitiveFilenameSystem()", "testcase": false, "constructor": false}, {"identifier": "getFileExtensionCharacter", "parameters": "()", "modifiers": "@Pure @Inline(value = \"EXTENSION_SEPARATOR_CHAR\", constantExpression = true) public static", "return": "char", "signature": "char getFileExtensionCharacter()", "full_signature": "@Pure @Inline(value = \"EXTENSION_SEPARATOR_CHAR\", constantExpression = true) public static char getFileExtensionCharacter()", "class_method_signature": "FileSystem.getFileExtensionCharacter()", "testcase": false, "constructor": false}, {"identifier": "dirname", "parameters": "(File filename)", "modifiers": "@Pure public static", "return": "URL", "signature": "URL dirname(File filename)", "full_signature": "@Pure public static URL dirname(File filename)", "class_method_signature": "FileSystem.dirname(File filename)", "testcase": false, "constructor": false}, {"identifier": "dirname", "parameters": "(URL filename)", "modifiers": "@Pure @SuppressWarnings(\"checkstyle:npathcomplexity\") public static", "return": "URL", "signature": "URL dirname(URL filename)", "full_signature": "@Pure @SuppressWarnings(\"checkstyle:npathcomplexity\") public static URL dirname(URL filename)", "class_method_signature": "FileSystem.dirname(URL filename)", "testcase": false, "constructor": false}, {"identifier": "largeBasename", "parameters": "(String filename)", "modifiers": "@Pure public static", "return": "String", "signature": "String largeBasename(String filename)", "full_signature": "@Pure public static String largeBasename(String filename)", "class_method_signature": "FileSystem.largeBasename(String filename)", "testcase": false, "constructor": false}, {"identifier": "largeBasename", "parameters": "(File filename)", "modifiers": "@Pure @Inline(\"((($1) == null) ? null : ($1).getName())\") public static", "return": "String", "signature": "String largeBasename(File filename)", "full_signature": "@Pure @Inline(\"((($1) == null) ? null : ($1).getName())\") public static String largeBasename(File filename)", "class_method_signature": "FileSystem.largeBasename(File filename)", "testcase": false, "constructor": false}, {"identifier": "largeBasename", "parameters": "(URL filename)", "modifiers": "@Pure public static", "return": "String", "signature": "String largeBasename(URL filename)", "full_signature": "@Pure public static String largeBasename(URL filename)", "class_method_signature": "FileSystem.largeBasename(URL filename)", "testcase": false, "constructor": false}, {"identifier": "basename", "parameters": "(String filename)", "modifiers": "@Pure public static", "return": "String", "signature": "String basename(String filename)", "full_signature": "@Pure public static String basename(String filename)", "class_method_signature": "FileSystem.basename(String filename)", "testcase": false, "constructor": false}, {"identifier": "basename", "parameters": "(File filename)", "modifiers": "@Pure public static", "return": "String", "signature": "String basename(File filename)", "full_signature": "@Pure public static String basename(File filename)", "class_method_signature": "FileSystem.basename(File filename)", "testcase": false, "constructor": false}, {"identifier": "basename", "parameters": "(URL filename)", "modifiers": "@Pure public static", "return": "String", "signature": "String basename(URL filename)", "full_signature": "@Pure public static String basename(URL filename)", "class_method_signature": "FileSystem.basename(URL filename)", "testcase": false, "constructor": false}, {"identifier": "shortBasename", "parameters": "(String filename)", "modifiers": "@Pure public static", "return": "String", "signature": "String shortBasename(String filename)", "full_signature": "@Pure public static String shortBasename(String filename)", "class_method_signature": "FileSystem.shortBasename(String filename)", "testcase": false, "constructor": false}, {"identifier": "shortBasename", "parameters": "(File filename)", "modifiers": "@Pure public static", "return": "String", "signature": "String shortBasename(File filename)", "full_signature": "@Pure public static String shortBasename(File filename)", "class_method_signature": "FileSystem.shortBasename(File filename)", "testcase": false, "constructor": false}, {"identifier": "shortBasename", "parameters": "(URL filename)", "modifiers": "@Pure public static", "return": "String", "signature": "String shortBasename(URL filename)", "full_signature": "@Pure public static String shortBasename(URL filename)", "class_method_signature": "FileSystem.shortBasename(URL filename)", "testcase": false, "constructor": false}, {"identifier": "extension", "parameters": "(File filename)", "modifiers": "@Pure public static", "return": "String", "signature": "String extension(File filename)", "full_signature": "@Pure public static String extension(File filename)", "class_method_signature": "FileSystem.extension(File filename)", "testcase": false, "constructor": false}, {"identifier": "extension", "parameters": "(String filename)", "modifiers": "@Pure public static", "return": "String", "signature": "String extension(String filename)", "full_signature": "@Pure public static String extension(String filename)", "class_method_signature": "FileSystem.extension(String filename)", "testcase": false, "constructor": false}, {"identifier": "extension", "parameters": "(URL filename)", "modifiers": "@Pure public static", "return": "String", "signature": "String extension(URL filename)", "full_signature": "@Pure public static String extension(URL filename)", "class_method_signature": "FileSystem.extension(URL filename)", "testcase": false, "constructor": false}, {"identifier": "extensions", "parameters": "(File filename)", "modifiers": "@Pure public static", "return": "String[]", "signature": "String[] extensions(File filename)", "full_signature": "@Pure public static String[] extensions(File filename)", "class_method_signature": "FileSystem.extensions(File filename)", "testcase": false, "constructor": false}, {"identifier": "extensions", "parameters": "(String filename)", "modifiers": "@Pure public static", "return": "String[]", "signature": "String[] extensions(String filename)", "full_signature": "@Pure public static String[] extensions(String filename)", "class_method_signature": "FileSystem.extensions(String filename)", "testcase": false, "constructor": false}, {"identifier": "extensions", "parameters": "(URL filename)", "modifiers": "@Pure public static", "return": "String[]", "signature": "String[] extensions(URL filename)", "full_signature": "@Pure public static String[] extensions(URL filename)", "class_method_signature": "FileSystem.extensions(URL filename)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(File filename)", "modifiers": "@Pure public static", "return": "String[]", "signature": "String[] split(File filename)", "full_signature": "@Pure public static String[] split(File filename)", "class_method_signature": "FileSystem.split(File filename)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(URL filename)", "modifiers": "@Pure public static", "return": "String[]", "signature": "String[] split(URL filename)", "full_signature": "@Pure public static String[] split(URL filename)", "class_method_signature": "FileSystem.split(URL filename)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(File fileBase, String... elements)", "modifiers": "@Pure public static", "return": "File", "signature": "File join(File fileBase, String... elements)", "full_signature": "@Pure public static File join(File fileBase, String... elements)", "class_method_signature": "FileSystem.join(File fileBase, String... elements)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(File fileBase, File... elements)", "modifiers": "@Pure public static", "return": "File", "signature": "File join(File fileBase, File... elements)", "full_signature": "@Pure public static File join(File fileBase, File... elements)", "class_method_signature": "FileSystem.join(File fileBase, File... elements)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(URL urlBase, String... elements)", "modifiers": "@Pure public static", "return": "URL", "signature": "URL join(URL urlBase, String... elements)", "full_signature": "@Pure public static URL join(URL urlBase, String... elements)", "class_method_signature": "FileSystem.join(URL urlBase, String... elements)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(URL urlBase, File... elements)", "modifiers": "@Pure public static", "return": "URL", "signature": "URL join(URL urlBase, File... elements)", "full_signature": "@Pure public static URL join(URL urlBase, File... elements)", "class_method_signature": "FileSystem.join(URL urlBase, File... elements)", "testcase": false, "constructor": false}, {"identifier": "hasExtension", "parameters": "(File filename, String extension)", "modifiers": "@Pure public static", "return": "boolean", "signature": "boolean hasExtension(File filename, String extension)", "full_signature": "@Pure public static boolean hasExtension(File filename, String extension)", "class_method_signature": "FileSystem.hasExtension(File filename, String extension)", "testcase": false, "constructor": false}, {"identifier": "hasExtension", "parameters": "(String filename, String extension)", "modifiers": "@Pure public static", "return": "boolean", "signature": "boolean hasExtension(String filename, String extension)", "full_signature": "@Pure public static boolean hasExtension(String filename, String extension)", "class_method_signature": "FileSystem.hasExtension(String filename, String extension)", "testcase": false, "constructor": false}, {"identifier": "hasExtension", "parameters": "(URL filename, String extension)", "modifiers": "@Pure public static", "return": "boolean", "signature": "boolean hasExtension(URL filename, String extension)", "full_signature": "@Pure public static boolean hasExtension(URL filename, String extension)", "class_method_signature": "FileSystem.hasExtension(URL filename, String extension)", "testcase": false, "constructor": false}, {"identifier": "removeExtension", "parameters": "(File filename)", "modifiers": "@Pure public static", "return": "File", "signature": "File removeExtension(File filename)", "full_signature": "@Pure public static File removeExtension(File filename)", "class_method_signature": "FileSystem.removeExtension(File filename)", "testcase": false, "constructor": false}, {"identifier": "removeExtension", "parameters": "(URL filename)", "modifiers": "@Pure public static", "return": "URL", "signature": "URL removeExtension(URL filename)", "full_signature": "@Pure public static URL removeExtension(URL filename)", "class_method_signature": "FileSystem.removeExtension(URL filename)", "testcase": false, "constructor": false}, {"identifier": "replaceExtension", "parameters": "(File filename, String extension)", "modifiers": "@Pure public static", "return": "File", "signature": "File replaceExtension(File filename, String extension)", "full_signature": "@Pure public static File replaceExtension(File filename, String extension)", "class_method_signature": "FileSystem.replaceExtension(File filename, String extension)", "testcase": false, "constructor": false}, {"identifier": "replaceExtension", "parameters": "(URL filename, String extension)", "modifiers": "@Pure @SuppressWarnings(\"checkstyle:npathcomplexity\") public static", "return": "URL", "signature": "URL replaceExtension(URL filename, String extension)", "full_signature": "@Pure @SuppressWarnings(\"checkstyle:npathcomplexity\") public static URL replaceExtension(URL filename, String extension)", "class_method_signature": "FileSystem.replaceExtension(URL filename, String extension)", "testcase": false, "constructor": false}, {"identifier": "addExtension", "parameters": "(File filename, String extension)", "modifiers": "@Pure public static", "return": "File", "signature": "File addExtension(File filename, String extension)", "full_signature": "@Pure public static File addExtension(File filename, String extension)", "class_method_signature": "FileSystem.addExtension(File filename, String extension)", "testcase": false, "constructor": false}, {"identifier": "addExtension", "parameters": "(URL filename, String extension)", "modifiers": "@Pure public static", "return": "URL", "signature": "URL addExtension(URL filename, String extension)", "full_signature": "@Pure public static URL addExtension(URL filename, String extension)", "class_method_signature": "FileSystem.addExtension(URL filename, String extension)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(File file)", "modifiers": "public static", "return": "void", "signature": "void delete(File file)", "full_signature": "public static void delete(File file)", "class_method_signature": "FileSystem.delete(File file)", "testcase": false, "constructor": false}, {"identifier": "deleteOnExit", "parameters": "(File file)", "modifiers": "public static", "return": "void", "signature": "void deleteOnExit(File file)", "full_signature": "public static void deleteOnExit(File file)", "class_method_signature": "FileSystem.deleteOnExit(File file)", "testcase": false, "constructor": false}, {"identifier": "undeleteOnExit", "parameters": "(File file)", "modifiers": "public static", "return": "void", "signature": "void undeleteOnExit(File file)", "full_signature": "public static void undeleteOnExit(File file)", "class_method_signature": "FileSystem.undeleteOnExit(File file)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(File in, File out)", "modifiers": "public static", "return": "void", "signature": "void copy(File in, File out)", "full_signature": "public static void copy(File in, File out)", "class_method_signature": "FileSystem.copy(File in, File out)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(URL in, File out)", "modifiers": "public static", "return": "void", "signature": "void copy(URL in, File out)", "full_signature": "public static void copy(URL in, File out)", "class_method_signature": "FileSystem.copy(URL in, File out)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(InputStream in, int inSize, FileOutputStream out)", "modifiers": "@SuppressWarnings(\"checkstyle:magicnumber\") public static", "return": "void", "signature": "void copy(InputStream in, int inSize, FileOutputStream out)", "full_signature": "@SuppressWarnings(\"checkstyle:magicnumber\") public static void copy(InputStream in, int inSize, FileOutputStream out)", "class_method_signature": "FileSystem.copy(InputStream in, int inSize, FileOutputStream out)", "testcase": false, "constructor": false}, {"identifier": "getUserHomeDirectory", "parameters": "()", "modifiers": "@Pure public static", "return": "File", "signature": "File getUserHomeDirectory()", "full_signature": "@Pure public static File getUserHomeDirectory()", "class_method_signature": "FileSystem.getUserHomeDirectory()", "testcase": false, "constructor": false}, {"identifier": "getUserHomeDirectoryName", "parameters": "()", "modifiers": "@Pure public static", "return": "String", "signature": "String getUserHomeDirectoryName()", "full_signature": "@Pure public static String getUserHomeDirectoryName()", "class_method_signature": "FileSystem.getUserHomeDirectoryName()", "testcase": false, "constructor": false}, {"identifier": "getUserConfigurationDirectoryFor", "parameters": "(String software)", "modifiers": "@Pure public static", "return": "File", "signature": "File getUserConfigurationDirectoryFor(String software)", "full_signature": "@Pure public static File getUserConfigurationDirectoryFor(String software)", "class_method_signature": "FileSystem.getUserConfigurationDirectoryFor(String software)", "testcase": false, "constructor": false}, {"identifier": "getUserConfigurationDirectoryNameFor", "parameters": "(String software)", "modifiers": "@Pure public static", "return": "String", "signature": "String getUserConfigurationDirectoryNameFor(String software)", "full_signature": "@Pure public static String getUserConfigurationDirectoryNameFor(String software)", "class_method_signature": "FileSystem.getUserConfigurationDirectoryNameFor(String software)", "testcase": false, "constructor": false}, {"identifier": "getSystemConfigurationDirectoryFor", "parameters": "(String software)", "modifiers": "@Pure public static", "return": "File", "signature": "File getSystemConfigurationDirectoryFor(String software)", "full_signature": "@Pure public static File getSystemConfigurationDirectoryFor(String software)", "class_method_signature": "FileSystem.getSystemConfigurationDirectoryFor(String software)", "testcase": false, "constructor": false}, {"identifier": "getSystemConfigurationDirectoryNameFor", "parameters": "(String software)", "modifiers": "@Pure public static", "return": "String", "signature": "String getSystemConfigurationDirectoryNameFor(String software)", "full_signature": "@Pure public static String getSystemConfigurationDirectoryNameFor(String software)", "class_method_signature": "FileSystem.getSystemConfigurationDirectoryNameFor(String software)", "testcase": false, "constructor": false}, {"identifier": "getSystemSharedLibraryDirectoryFor", "parameters": "(String software)", "modifiers": "@Pure public static", "return": "File", "signature": "File getSystemSharedLibraryDirectoryFor(String software)", "full_signature": "@Pure public static File getSystemSharedLibraryDirectoryFor(String software)", "class_method_signature": "FileSystem.getSystemSharedLibraryDirectoryFor(String software)", "testcase": false, "constructor": false}, {"identifier": "getSystemSharedLibraryDirectoryNameFor", "parameters": "(String software)", "modifiers": "@Pure public static", "return": "String", "signature": "String getSystemSharedLibraryDirectoryNameFor(String software)", "full_signature": "@Pure public static String getSystemSharedLibraryDirectoryNameFor(String software)", "class_method_signature": "FileSystem.getSystemSharedLibraryDirectoryNameFor(String software)", "testcase": false, "constructor": false}, {"identifier": "convertStringToFile", "parameters": "(String filename)", "modifiers": "@Pure public static", "return": "File", "signature": "File convertStringToFile(String filename)", "full_signature": "@Pure public static File convertStringToFile(String filename)", "class_method_signature": "FileSystem.convertStringToFile(String filename)", "testcase": false, "constructor": false}, {"identifier": "convertURLToFile", "parameters": "(URL url)", "modifiers": "@Pure @SuppressWarnings(\"checkstyle:npathcomplexity\") public static", "return": "File", "signature": "File convertURLToFile(URL url)", "full_signature": "@Pure @SuppressWarnings(\"checkstyle:npathcomplexity\") public static File convertURLToFile(URL url)", "class_method_signature": "FileSystem.convertURLToFile(URL url)", "testcase": false, "constructor": false}, {"identifier": "convertStringToURL", "parameters": "(String urlDescription, boolean allowResourceSearch)", "modifiers": "@Pure public static", "return": "URL", "signature": "URL convertStringToURL(String urlDescription, boolean allowResourceSearch)", "full_signature": "@Pure public static URL convertStringToURL(String urlDescription, boolean allowResourceSearch)", "class_method_signature": "FileSystem.convertStringToURL(String urlDescription, boolean allowResourceSearch)", "testcase": false, "constructor": false}, {"identifier": "convertStringToURL", "parameters": "(String urlDescription, boolean allowResourceSearch, boolean repliesFileURL)", "modifiers": "@Pure public static", "return": "URL", "signature": "URL convertStringToURL(String urlDescription, boolean allowResourceSearch, boolean repliesFileURL)", "full_signature": "@Pure public static URL convertStringToURL(String urlDescription, boolean allowResourceSearch, boolean repliesFileURL)", "class_method_signature": "FileSystem.convertStringToURL(String urlDescription, boolean allowResourceSearch, boolean repliesFileURL)", "testcase": false, "constructor": false}, {"identifier": "convertStringToURL", "parameters": "(String urlDescription, boolean allowResourceSearch,\n\t\t\tboolean repliesFileURL, boolean supportWindowsPaths)", "modifiers": "@Pure @SuppressWarnings({\"checkstyle:cyclomaticcomplexity\", \"checkstyle:npathcomplexity\", \"checkstyle:nestedifdepth\"}) static", "return": "URL", "signature": "URL convertStringToURL(String urlDescription, boolean allowResourceSearch,\n\t\t\tboolean repliesFileURL, boolean supportWindowsPaths)", "full_signature": "@Pure @SuppressWarnings({\"checkstyle:cyclomaticcomplexity\", \"checkstyle:npathcomplexity\", \"checkstyle:nestedifdepth\"}) static URL convertStringToURL(String urlDescription, boolean allowResourceSearch,\n\t\t\tboolean repliesFileURL, boolean supportWindowsPaths)", "class_method_signature": "FileSystem.convertStringToURL(String urlDescription, boolean allowResourceSearch,\n\t\t\tboolean repliesFileURL, boolean supportWindowsPaths)", "testcase": false, "constructor": false}, {"identifier": "makeAbsolute", "parameters": "(File filename, File current)", "modifiers": "@Pure public static", "return": "File", "signature": "File makeAbsolute(File filename, File current)", "full_signature": "@Pure public static File makeAbsolute(File filename, File current)", "class_method_signature": "FileSystem.makeAbsolute(File filename, File current)", "testcase": false, "constructor": false}, {"identifier": "makeAbsolute", "parameters": "(URL filename, File current)", "modifiers": "@Pure public static", "return": "URL", "signature": "URL makeAbsolute(URL filename, File current)", "full_signature": "@Pure public static URL makeAbsolute(URL filename, File current)", "class_method_signature": "FileSystem.makeAbsolute(URL filename, File current)", "testcase": false, "constructor": false}, {"identifier": "makeAbsolute", "parameters": "(URL filename, URL current)", "modifiers": "@Pure @SuppressWarnings(\"checkstyle:cyclomaticcomplexity\") public static", "return": "URL", "signature": "URL makeAbsolute(URL filename, URL current)", "full_signature": "@Pure @SuppressWarnings(\"checkstyle:cyclomaticcomplexity\") public static URL makeAbsolute(URL filename, URL current)", "class_method_signature": "FileSystem.makeAbsolute(URL filename, URL current)", "testcase": false, "constructor": false}, {"identifier": "makeAbsolute", "parameters": "(File filename, URL current)", "modifiers": "@Pure public static", "return": "URL", "signature": "URL makeAbsolute(File filename, URL current)", "full_signature": "@Pure public static URL makeAbsolute(File filename, URL current)", "class_method_signature": "FileSystem.makeAbsolute(File filename, URL current)", "testcase": false, "constructor": false}, {"identifier": "getParentURL", "parameters": "(URL url)", "modifiers": "@Pure @SuppressWarnings({\"checkstyle:cyclomaticcomplexity\", \"checkstyle:npathcomplexity\"}) public static", "return": "URL", "signature": "URL getParentURL(URL url)", "full_signature": "@Pure @SuppressWarnings({\"checkstyle:cyclomaticcomplexity\", \"checkstyle:npathcomplexity\"}) public static URL getParentURL(URL url)", "class_method_signature": "FileSystem.getParentURL(URL url)", "testcase": false, "constructor": false}, {"identifier": "extractLocalPath", "parameters": "(String filename)", "modifiers": "@Pure @SuppressWarnings(\"checkstyle:magicnumber\") private static", "return": "String", "signature": "String extractLocalPath(String filename)", "full_signature": "@Pure @SuppressWarnings(\"checkstyle:magicnumber\") private static String extractLocalPath(String filename)", "class_method_signature": "FileSystem.extractLocalPath(String filename)", "testcase": false, "constructor": false}, {"identifier": "isWindowsNativeFilename", "parameters": "(String filename)", "modifiers": "@Pure public static", "return": "boolean", "signature": "boolean isWindowsNativeFilename(String filename)", "full_signature": "@Pure public static boolean isWindowsNativeFilename(String filename)", "class_method_signature": "FileSystem.isWindowsNativeFilename(String filename)", "testcase": false, "constructor": false}, {"identifier": "normalizeWindowsNativeFilename", "parameters": "(String filename)", "modifiers": "@Pure public static", "return": "File", "signature": "File normalizeWindowsNativeFilename(String filename)", "full_signature": "@Pure public static File normalizeWindowsNativeFilename(String filename)", "class_method_signature": "FileSystem.normalizeWindowsNativeFilename(String filename)", "testcase": false, "constructor": false}, {"identifier": "convertFileToURL", "parameters": "(File file)", "modifiers": "@Pure public static", "return": "URL", "signature": "URL convertFileToURL(File file)", "full_signature": "@Pure public static URL convertFileToURL(File file)", "class_method_signature": "FileSystem.convertFileToURL(File file)", "testcase": false, "constructor": false}, {"identifier": "toShortestURL", "parameters": "(String url, URLClassLoader classLoader)", "modifiers": "private static", "return": "URL", "signature": "URL toShortestURL(String url, URLClassLoader classLoader)", "full_signature": "private static URL toShortestURL(String url, URLClassLoader classLoader)", "class_method_signature": "FileSystem.toShortestURL(String url, URLClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "toShortestURL", "parameters": "(URL url)", "modifiers": "@SuppressWarnings(\"resource\") @Pure public static", "return": "URL", "signature": "URL toShortestURL(URL url)", "full_signature": "@SuppressWarnings(\"resource\") @Pure public static URL toShortestURL(URL url)", "class_method_signature": "FileSystem.toShortestURL(URL url)", "testcase": false, "constructor": false}, {"identifier": "searchShortestURL", "parameters": "(URL url)", "modifiers": "private static", "return": "URL", "signature": "URL searchShortestURL(URL url)", "full_signature": "private static URL searchShortestURL(URL url)", "class_method_signature": "FileSystem.searchShortestURL(URL url)", "testcase": false, "constructor": false}, {"identifier": "makeRelative", "parameters": "(File filenameToMakeRelative, File rootPath)", "modifiers": "@Pure public static", "return": "File", "signature": "File makeRelative(File filenameToMakeRelative, File rootPath)", "full_signature": "@Pure public static File makeRelative(File filenameToMakeRelative, File rootPath)", "class_method_signature": "FileSystem.makeRelative(File filenameToMakeRelative, File rootPath)", "testcase": false, "constructor": false}, {"identifier": "makeRelative", "parameters": "(File filenameToMakeRelative, File rootPath,\n\t\t\tboolean appendCurrentDirectorySymbol)", "modifiers": "private static", "return": "File", "signature": "File makeRelative(File filenameToMakeRelative, File rootPath,\n\t\t\tboolean appendCurrentDirectorySymbol)", "full_signature": "private static File makeRelative(File filenameToMakeRelative, File rootPath,\n\t\t\tboolean appendCurrentDirectorySymbol)", "class_method_signature": "FileSystem.makeRelative(File filenameToMakeRelative, File rootPath,\n\t\t\tboolean appendCurrentDirectorySymbol)", "testcase": false, "constructor": false}, {"identifier": "makeRelative", "parameters": "(File filenameToMakeRelative, URL rootPath)", "modifiers": "@Pure public static", "return": "File", "signature": "File makeRelative(File filenameToMakeRelative, URL rootPath)", "full_signature": "@Pure public static File makeRelative(File filenameToMakeRelative, URL rootPath)", "class_method_signature": "FileSystem.makeRelative(File filenameToMakeRelative, URL rootPath)", "testcase": false, "constructor": false}, {"identifier": "makeRelative", "parameters": "(URL filenameToMakeRelative, URL rootPath)", "modifiers": "@Pure public static", "return": "File", "signature": "File makeRelative(URL filenameToMakeRelative, URL rootPath)", "full_signature": "@Pure public static File makeRelative(URL filenameToMakeRelative, URL rootPath)", "class_method_signature": "FileSystem.makeRelative(URL filenameToMakeRelative, URL rootPath)", "testcase": false, "constructor": false}, {"identifier": "makeRelative", "parameters": "(String[] parts1, String[] parts2, String basename)", "modifiers": "@SuppressWarnings(\"checkstyle:npathcomplexity\") private static", "return": "String", "signature": "String makeRelative(String[] parts1, String[] parts2, String basename)", "full_signature": "@SuppressWarnings(\"checkstyle:npathcomplexity\") private static String makeRelative(String[] parts1, String[] parts2, String basename)", "class_method_signature": "FileSystem.makeRelative(String[] parts1, String[] parts2, String basename)", "testcase": false, "constructor": false}, {"identifier": "makeCanonicalURL", "parameters": "(URL url)", "modifiers": "@Pure public static", "return": "URL", "signature": "URL makeCanonicalURL(URL url)", "full_signature": "@Pure public static URL makeCanonicalURL(URL url)", "class_method_signature": "FileSystem.makeCanonicalURL(URL url)", "testcase": false, "constructor": false}, {"identifier": "zipFile", "parameters": "(File input, File output)", "modifiers": "public static", "return": "void", "signature": "void zipFile(File input, File output)", "full_signature": "public static void zipFile(File input, File output)", "class_method_signature": "FileSystem.zipFile(File input, File output)", "testcase": false, "constructor": false}, {"identifier": "zipFile", "parameters": "(File input, OutputStream output)", "modifiers": "@SuppressWarnings(\"checkstyle:npathcomplexity\") public static", "return": "void", "signature": "void zipFile(File input, OutputStream output)", "full_signature": "@SuppressWarnings(\"checkstyle:npathcomplexity\") public static void zipFile(File input, OutputStream output)", "class_method_signature": "FileSystem.zipFile(File input, OutputStream output)", "testcase": false, "constructor": false}, {"identifier": "unzipFile", "parameters": "(InputStream input, File output)", "modifiers": "public static", "return": "void", "signature": "void unzipFile(InputStream input, File output)", "full_signature": "public static void unzipFile(InputStream input, File output)", "class_method_signature": "FileSystem.unzipFile(InputStream input, File output)", "testcase": false, "constructor": false}, {"identifier": "unzipFile", "parameters": "(File input, File output)", "modifiers": "public static", "return": "void", "signature": "void unzipFile(File input, File output)", "full_signature": "public static void unzipFile(File input, File output)", "class_method_signature": "FileSystem.unzipFile(File input, File output)", "testcase": false, "constructor": false}, {"identifier": "createTempDirectory", "parameters": "(String prefix, String suffix)", "modifiers": "public static", "return": "File", "signature": "File createTempDirectory(String prefix, String suffix)", "full_signature": "public static File createTempDirectory(String prefix, String suffix)", "class_method_signature": "FileSystem.createTempDirectory(String prefix, String suffix)", "testcase": false, "constructor": false}, {"identifier": "createTempDirectory", "parameters": "(String prefix, String suffix, File directory)", "modifiers": "public static", "return": "File", "signature": "File createTempDirectory(String prefix, String suffix, File directory)", "full_signature": "public static File createTempDirectory(String prefix, String suffix, File directory)", "class_method_signature": "FileSystem.createTempDirectory(String prefix, String suffix, File directory)", "testcase": false, "constructor": false}], "file": "core/vmutils/src/main/java/org/arakhne/afc/vmutil/FileSystem.java"}, "focal_method": {"identifier": "extension", "parameters": "(File filename)", "modifiers": "@Pure public static", "return": "String", "body": "@Pure\n\tpublic static String extension(File filename) {\n\t\tif (filename == null) {\n\t\t\treturn null;\n\t\t}\n\t\tfinal String largeBasename = largeBasename(filename);\n\t\tfinal int idx = largeBasename.lastIndexOf(getFileExtensionCharacter());\n\t\tif (idx <= 0) {\n\t\t\treturn \"\"; //$NON-NLS-1$\n\t\t}\n\t\treturn largeBasename.substring(idx);\n\t}", "signature": "String extension(File filename)", "full_signature": "@Pure public static String extension(File filename)", "class_method_signature": "FileSystem.extension(File filename)", "testcase": false, "constructor": false, "invocations": ["largeBasename", "lastIndexOf", "getFileExtensionCharacter", "substring"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}