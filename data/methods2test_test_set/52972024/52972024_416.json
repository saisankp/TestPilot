{"test_class": {"identifier": "InitializeReceiverGeneratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "CoreFeatures/MessageProcessing-plugins/PluginReceiverGenerator/src/test/java/info/smart_tools/smartactors/message_processing_plugins/receiver_generator_plugin/InitializeReceiverGeneratorTest.java"}, "test_case": {"identifier": "checkLoadExecution", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void checkLoadExecution()\n            throws Exception {\n        Checker checker = new Checker();\n        checker.item = new BootstrapItem(\"test\");\n        IBootstrap<IBootstrapItem<String>> bootstrap = mock(IBootstrap.class);\n        List<IBootstrapItem<String>> itemList = new ArrayList<>();\n        doAnswer(new Answer<Void>() {\n            public Void answer(InvocationOnMock invocation) {\n                Object[] args = invocation.getArguments();\n                checker.item = (IBootstrapItem<String>) args[0];\n                itemList.add(checker.item);\n                return null;\n            }\n        })\n                .when(bootstrap)\n                .add(any(IBootstrapItem.class));\n        IPlugin plugin = new InitializeReceiverGenerator(bootstrap);\n        plugin.load();\n        assertEquals(itemList.size(), 1);\n        IBootstrapItem<String> item = itemList.get(0);\n        item.executeProcess();\n        IReceiverGenerator rg = IOC.resolve(Keys.getOrAdd(IReceiverGenerator.class.getCanonicalName()));\n        assertNotNull(rg);\n        reset(bootstrap);\n    }", "signature": "void checkLoadExecution()", "full_signature": "@Test public void checkLoadExecution()", "class_method_signature": "InitializeReceiverGeneratorTest.checkLoadExecution()", "testcase": true, "constructor": false, "invocations": ["mock", "add", "when", "doAnswer", "getArguments", "add", "any", "load", "assertEquals", "size", "get", "executeProcess", "resolve", "getOrAdd", "getCanonicalName", "assertNotNull", "reset"]}, "focal_class": {"identifier": "InitializeReceiverGenerator", "superclass": "", "interfaces": "implements IPlugin", "fields": [{"original_string": "private IBootstrap<IBootstrapItem<String>> bootstrap;", "modifier": "private", "type": "IBootstrap<IBootstrapItem<String>>", "declarator": "bootstrap", "var_name": "bootstrap"}], "methods": [{"identifier": "InitializeReceiverGenerator", "parameters": "(final IBootstrap<IBootstrapItem<String>> bootstrap)", "modifiers": "public", "return": "", "signature": " InitializeReceiverGenerator(final IBootstrap<IBootstrapItem<String>> bootstrap)", "full_signature": "public  InitializeReceiverGenerator(final IBootstrap<IBootstrapItem<String>> bootstrap)", "class_method_signature": "InitializeReceiverGenerator.InitializeReceiverGenerator(final IBootstrap<IBootstrapItem<String>> bootstrap)", "testcase": false, "constructor": true}, {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "InitializeReceiverGenerator.load()", "testcase": false, "constructor": false}], "file": "CoreFeatures/MessageProcessing-plugins/PluginReceiverGenerator/src/main/java/info/smart_tools/smartactors/message_processing_plugins/receiver_generator_plugin/InitializeReceiverGenerator.java"}, "focal_method": {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void load() throws PluginException {\n        try {\n            IBootstrapItem<String> item = new BootstrapItem(\"InitializeReceiverGenerator\");\n            item\n                    .after(\"IOC\")\n                    .process(\n                            () -> {\n                                try {\n                                    IReceiverGenerator rg = new ReceiverGenerator(this.getClass().getClassLoader());\n                                    IOC.register(\n                                            Keys.getOrAdd(IReceiverGenerator.class.getCanonicalName()),\n                                            new SingletonStrategy(rg)\n                                    );\n                                } catch (ResolutionException e) {\n                                    throw new ActionExecuteException(\"InitializeReceiverGenerator plugin can't load: can't get InitializeReceiverGenerator key\", e);\n                                } catch (InvalidArgumentException e) {\n                                    throw new ActionExecuteException(\"InitializeReceiverGenerator plugin can't load: can't create strategy\", e);\n                                } catch (RegistrationException e) {\n                                    throw new ActionExecuteException(\"InitializeReceiverGenerator plugin can't load: can't register new strategy\", e);\n                                }\n                            }\n                        );\n            this.bootstrap.add(item);\n        } catch (Throwable e) {\n            throw new PluginException(\"Could not load 'ReceiverGenerator plugin'\", e);\n        }\n    }", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "InitializeReceiverGenerator.load()", "testcase": false, "constructor": false, "invocations": ["process", "after", "getClassLoader", "getClass", "register", "getOrAdd", "getCanonicalName", "add"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}