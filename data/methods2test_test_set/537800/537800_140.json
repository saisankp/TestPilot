{"test_class": {"identifier": "PickledGraphiteTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final SocketFactory socketFactory = mock(SocketFactory.class);", "modifier": "private final", "type": "SocketFactory", "declarator": "socketFactory = mock(SocketFactory.class)", "var_name": "socketFactory"}, {"original_string": "private final InetSocketAddress address = new InetSocketAddress(\"example.com\", 1234);", "modifier": "private final", "type": "InetSocketAddress", "declarator": "address = new InetSocketAddress(\"example.com\", 1234)", "var_name": "address"}, {"original_string": "private final PickledGraphite graphite = new PickledGraphite(address, socketFactory, UTF_8, 2);", "modifier": "private final", "type": "PickledGraphite", "declarator": "graphite = new PickledGraphite(address, socketFactory, UTF_8, 2)", "var_name": "graphite"}, {"original_string": "private final Socket socket = mock(Socket.class);", "modifier": "private final", "type": "Socket", "declarator": "socket = mock(Socket.class)", "var_name": "socket"}, {"original_string": "private final ByteArrayOutputStream output = spy(new ByteArrayOutputStream());", "modifier": "private final", "type": "ByteArrayOutputStream", "declarator": "output = spy(new ByteArrayOutputStream())", "var_name": "output"}, {"original_string": "private CompiledScript unpickleScript;", "modifier": "private", "type": "CompiledScript", "declarator": "unpickleScript", "var_name": "unpickleScript"}], "file": "metrics-graphite/src/test/java/com/codahale/metrics/graphite/PickledGraphiteTest.java"}, "test_case": {"identifier": "doesNotAllowDoubleConnections", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void doesNotAllowDoubleConnections() throws Exception {\n        graphite.connect();\n        try {\n            graphite.connect();\n            failBecauseExceptionWasNotThrown(IllegalStateException.class);\n        } catch (IllegalStateException e) {\n            assertThat(e.getMessage())\n                    .isEqualTo(\"Already connected\");\n        }\n    }", "signature": "void doesNotAllowDoubleConnections()", "full_signature": "@Test public void doesNotAllowDoubleConnections()", "class_method_signature": "PickledGraphiteTest.doesNotAllowDoubleConnections()", "testcase": true, "constructor": false, "invocations": ["connect", "connect", "failBecauseExceptionWasNotThrown", "isEqualTo", "assertThat", "getMessage"]}, "focal_class": {"identifier": "PickledGraphite", "superclass": "", "interfaces": "implements GraphiteSender", "fields": [{"original_string": "private static final char\n            MARK = '(',\n            STOP = '.',\n            LONG = 'L',\n            STRING = 'S',\n            APPEND = 'a',\n            LIST = 'l',\n            TUPLE = 't',\n            QUOTE = '\\'',\n            LF = '\\n';", "modifier": "private static final", "type": "char", "declarator": "MARK = '('", "var_name": "MARK"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(PickledGraphite.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(PickledGraphite.class)", "var_name": "LOGGER"}, {"original_string": "private final static int DEFAULT_BATCH_SIZE = 100;", "modifier": "private final static", "type": "int", "declarator": "DEFAULT_BATCH_SIZE = 100", "var_name": "DEFAULT_BATCH_SIZE"}, {"original_string": "private int batchSize;", "modifier": "private", "type": "int", "declarator": "batchSize", "var_name": "batchSize"}, {"original_string": "private List<MetricTuple> metrics = new ArrayList<>();", "modifier": "private", "type": "List<MetricTuple>", "declarator": "metrics = new ArrayList<>()", "var_name": "metrics"}, {"original_string": "private final String hostname;", "modifier": "private final", "type": "String", "declarator": "hostname", "var_name": "hostname"}, {"original_string": "private final int port;", "modifier": "private final", "type": "int", "declarator": "port", "var_name": "port"}, {"original_string": "private final InetSocketAddress address;", "modifier": "private final", "type": "InetSocketAddress", "declarator": "address", "var_name": "address"}, {"original_string": "private final SocketFactory socketFactory;", "modifier": "private final", "type": "SocketFactory", "declarator": "socketFactory", "var_name": "socketFactory"}, {"original_string": "private final Charset charset;", "modifier": "private final", "type": "Charset", "declarator": "charset", "var_name": "charset"}, {"original_string": "private Socket socket;", "modifier": "private", "type": "Socket", "declarator": "socket", "var_name": "socket"}, {"original_string": "private Writer writer;", "modifier": "private", "type": "Writer", "declarator": "writer", "var_name": "writer"}, {"original_string": "private int failures;", "modifier": "private", "type": "int", "declarator": "failures", "var_name": "failures"}], "methods": [{"identifier": "PickledGraphite", "parameters": "(InetSocketAddress address)", "modifiers": "public", "return": "", "signature": " PickledGraphite(InetSocketAddress address)", "full_signature": "public  PickledGraphite(InetSocketAddress address)", "class_method_signature": "PickledGraphite.PickledGraphite(InetSocketAddress address)", "testcase": false, "constructor": true}, {"identifier": "PickledGraphite", "parameters": "(InetSocketAddress address, int batchSize)", "modifiers": "public", "return": "", "signature": " PickledGraphite(InetSocketAddress address, int batchSize)", "full_signature": "public  PickledGraphite(InetSocketAddress address, int batchSize)", "class_method_signature": "PickledGraphite.PickledGraphite(InetSocketAddress address, int batchSize)", "testcase": false, "constructor": true}, {"identifier": "PickledGraphite", "parameters": "(InetSocketAddress address, SocketFactory socketFactory, int batchSize)", "modifiers": "public", "return": "", "signature": " PickledGraphite(InetSocketAddress address, SocketFactory socketFactory, int batchSize)", "full_signature": "public  PickledGraphite(InetSocketAddress address, SocketFactory socketFactory, int batchSize)", "class_method_signature": "PickledGraphite.PickledGraphite(InetSocketAddress address, SocketFactory socketFactory, int batchSize)", "testcase": false, "constructor": true}, {"identifier": "PickledGraphite", "parameters": "(InetSocketAddress address, SocketFactory socketFactory, Charset charset, int batchSize)", "modifiers": "public", "return": "", "signature": " PickledGraphite(InetSocketAddress address, SocketFactory socketFactory, Charset charset, int batchSize)", "full_signature": "public  PickledGraphite(InetSocketAddress address, SocketFactory socketFactory, Charset charset, int batchSize)", "class_method_signature": "PickledGraphite.PickledGraphite(InetSocketAddress address, SocketFactory socketFactory, Charset charset, int batchSize)", "testcase": false, "constructor": true}, {"identifier": "PickledGraphite", "parameters": "(String hostname, int port)", "modifiers": "public", "return": "", "signature": " PickledGraphite(String hostname, int port)", "full_signature": "public  PickledGraphite(String hostname, int port)", "class_method_signature": "PickledGraphite.PickledGraphite(String hostname, int port)", "testcase": false, "constructor": true}, {"identifier": "PickledGraphite", "parameters": "(String hostname, int port, int batchSize)", "modifiers": "public", "return": "", "signature": " PickledGraphite(String hostname, int port, int batchSize)", "full_signature": "public  PickledGraphite(String hostname, int port, int batchSize)", "class_method_signature": "PickledGraphite.PickledGraphite(String hostname, int port, int batchSize)", "testcase": false, "constructor": true}, {"identifier": "PickledGraphite", "parameters": "(String hostname, int port, SocketFactory socketFactory, int batchSize)", "modifiers": "public", "return": "", "signature": " PickledGraphite(String hostname, int port, SocketFactory socketFactory, int batchSize)", "full_signature": "public  PickledGraphite(String hostname, int port, SocketFactory socketFactory, int batchSize)", "class_method_signature": "PickledGraphite.PickledGraphite(String hostname, int port, SocketFactory socketFactory, int batchSize)", "testcase": false, "constructor": true}, {"identifier": "PickledGraphite", "parameters": "(String hostname, int port, SocketFactory socketFactory, Charset charset, int batchSize)", "modifiers": "public", "return": "", "signature": " PickledGraphite(String hostname, int port, SocketFactory socketFactory, Charset charset, int batchSize)", "full_signature": "public  PickledGraphite(String hostname, int port, SocketFactory socketFactory, Charset charset, int batchSize)", "class_method_signature": "PickledGraphite.PickledGraphite(String hostname, int port, SocketFactory socketFactory, Charset charset, int batchSize)", "testcase": false, "constructor": true}, {"identifier": "connect", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void connect()", "full_signature": "@Override public void connect()", "class_method_signature": "PickledGraphite.connect()", "testcase": false, "constructor": false}, {"identifier": "isConnected", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isConnected()", "full_signature": "@Override public boolean isConnected()", "class_method_signature": "PickledGraphite.isConnected()", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(String name, String value, long timestamp)", "modifiers": "@Override public", "return": "void", "signature": "void send(String name, String value, long timestamp)", "full_signature": "@Override public void send(String name, String value, long timestamp)", "class_method_signature": "PickledGraphite.send(String name, String value, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "flush", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void flush()", "full_signature": "@Override public void flush()", "class_method_signature": "PickledGraphite.flush()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "PickledGraphite.close()", "testcase": false, "constructor": false}, {"identifier": "getFailures", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getFailures()", "full_signature": "@Override public int getFailures()", "class_method_signature": "PickledGraphite.getFailures()", "testcase": false, "constructor": false}, {"identifier": "writeMetrics", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void writeMetrics()", "full_signature": "private void writeMetrics()", "class_method_signature": "PickledGraphite.writeMetrics()", "testcase": false, "constructor": false}, {"identifier": "pickleMetrics", "parameters": "(List<MetricTuple> metrics)", "modifiers": "", "return": "byte[]", "signature": "byte[] pickleMetrics(List<MetricTuple> metrics)", "full_signature": " byte[] pickleMetrics(List<MetricTuple> metrics)", "class_method_signature": "PickledGraphite.pickleMetrics(List<MetricTuple> metrics)", "testcase": false, "constructor": false}, {"identifier": "sanitize", "parameters": "(String s)", "modifiers": "protected", "return": "String", "signature": "String sanitize(String s)", "full_signature": "protected String sanitize(String s)", "class_method_signature": "PickledGraphite.sanitize(String s)", "testcase": false, "constructor": false}], "file": "metrics-graphite/src/main/java/com/codahale/metrics/graphite/PickledGraphite.java"}, "focal_method": {"identifier": "connect", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void connect() throws IllegalStateException, IOException {\n        if (isConnected()) {\n            throw new IllegalStateException(\"Already connected\");\n        }\n        InetSocketAddress address = this.address;\n        if (address == null) {\n            address = new InetSocketAddress(hostname, port);\n        }\n        if (address.getAddress() == null) {\n            throw new UnknownHostException(address.getHostName());\n        }\n\n        this.socket = socketFactory.createSocket(address.getAddress(), address.getPort());\n        this.writer = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream(), charset));\n    }", "signature": "void connect()", "full_signature": "@Override public void connect()", "class_method_signature": "PickledGraphite.connect()", "testcase": false, "constructor": false, "invocations": ["isConnected", "getAddress", "getHostName", "createSocket", "getAddress", "getPort", "getOutputStream"]}, "repository": {"repo_id": 537800, "url": "https://github.com/dropwizard/metrics", "stars": 6879, "created": "2/26/2010 7:44:42 PM +00:00", "updates": "2020-01-26T22:33:14+00:00", "fork": "False", "license": "licensed"}}