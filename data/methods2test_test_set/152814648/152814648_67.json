{"test_class": {"identifier": "SourcePrinterTest", "superclass": "extends ResourceTest", "interfaces": "", "fields": [{"original_string": "private static final String ICON_URL = \"/path/to/icon.png\";", "modifier": "private static final", "type": "String", "declarator": "ICON_URL = \"/path/to/icon.png\"", "var_name": "ICON_URL"}, {"original_string": "private static final String MESSAGE = \"Hello Message\";", "modifier": "private static final", "type": "String", "declarator": "MESSAGE = \"Hello Message\"", "var_name": "MESSAGE"}, {"original_string": "private static final String DESCRIPTION = \"Hello Description\";", "modifier": "private static final", "type": "String", "declarator": "DESCRIPTION = \"Hello Description\"", "var_name": "DESCRIPTION"}, {"original_string": "private static final String NO_DESCRIPTION = StringUtils.EMPTY;", "modifier": "private static final", "type": "String", "declarator": "NO_DESCRIPTION = StringUtils.EMPTY", "var_name": "NO_DESCRIPTION"}], "file": "plugin/src/test/java/io/jenkins/plugins/analysis/core/model/SourcePrinterTest.java"}, "test_case": {"identifier": "shouldFilterTagsInMessageAndDescription", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void shouldFilterTagsInMessageAndDescription() {\n        IssueBuilder builder = new IssueBuilder();\n        Issue issue = builder.setLineStart(7).setMessage(\"Hello <b>Message</b> <script>execute</script>\").build();\n\n        SourcePrinter printer = new SourcePrinter(createJenkinsFacade());\n\n        Document document = Jsoup.parse(printer.render(asStream(\"format-java.txt\"), issue,\n                \"Hello <b>Description</b> <script>execute</script>\", ICON_URL));\n\n        assertThatCodeIsEqualToSourceText(document);\n\n        assertThat(document.getElementsByClass(\"analysis-warning-title\").html())\n                .isEqualToIgnoringWhitespace(\"Hello <b>Message</b>\");\n        assertThat(document.getElementsByClass(\"analysis-detail\").html())\n                .isEqualToIgnoringWhitespace(\"Hello <b>Description</b>\");\n    }", "signature": "void shouldFilterTagsInMessageAndDescription()", "full_signature": "@Test void shouldFilterTagsInMessageAndDescription()", "class_method_signature": "SourcePrinterTest.shouldFilterTagsInMessageAndDescription()", "testcase": true, "constructor": false, "invocations": ["build", "setMessage", "setLineStart", "createJenkinsFacade", "parse", "render", "asStream", "assertThatCodeIsEqualToSourceText", "isEqualToIgnoringWhitespace", "assertThat", "html", "getElementsByClass", "isEqualToIgnoringWhitespace", "assertThat", "html", "getElementsByClass"]}, "focal_class": {"identifier": "SourcePrinter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Sanitizer SANITIZER = new Sanitizer();", "modifier": "private static final", "type": "Sanitizer", "declarator": "SANITIZER = new Sanitizer()", "var_name": "SANITIZER"}, {"original_string": "private final JenkinsFacade jenkinsFacade;", "modifier": "private final", "type": "JenkinsFacade", "declarator": "jenkinsFacade", "var_name": "jenkinsFacade"}], "methods": [{"identifier": "SourcePrinter", "parameters": "()", "modifiers": "public", "return": "", "signature": " SourcePrinter()", "full_signature": "public  SourcePrinter()", "class_method_signature": "SourcePrinter.SourcePrinter()", "testcase": false, "constructor": true}, {"identifier": "SourcePrinter", "parameters": "(final JenkinsFacade jenkinsFacade)", "modifiers": "@VisibleForTesting", "return": "", "signature": " SourcePrinter(final JenkinsFacade jenkinsFacade)", "full_signature": "@VisibleForTesting  SourcePrinter(final JenkinsFacade jenkinsFacade)", "class_method_signature": "SourcePrinter.SourcePrinter(final JenkinsFacade jenkinsFacade)", "testcase": false, "constructor": true}, {"identifier": "render", "parameters": "(final Stream<String> lines, final Issue issue, final String description,\n            final String iconUrl)", "modifiers": "public", "return": "String", "signature": "String render(final Stream<String> lines, final Issue issue, final String description,\n            final String iconUrl)", "full_signature": "public String render(final Stream<String> lines, final Issue issue, final String description,\n            final String iconUrl)", "class_method_signature": "SourcePrinter.render(final Stream<String> lines, final Issue issue, final String description,\n            final String iconUrl)", "testcase": false, "constructor": false}, {"identifier": "readBlockUntilLine", "parameters": "(final LookaheadStream stream, final int end)", "modifiers": "private", "return": "StringBuilder", "signature": "StringBuilder readBlockUntilLine(final LookaheadStream stream, final int end)", "full_signature": "private StringBuilder readBlockUntilLine(final LookaheadStream stream, final int end)", "class_method_signature": "SourcePrinter.readBlockUntilLine(final LookaheadStream stream, final int end)", "testcase": false, "constructor": false}, {"identifier": "createInfoPanel", "parameters": "(final Issue issue, final String description,\n            final String iconUrl)", "modifiers": "private", "return": "String", "signature": "String createInfoPanel(final Issue issue, final String description,\n            final String iconUrl)", "full_signature": "private String createInfoPanel(final Issue issue, final String description,\n            final String iconUrl)", "class_method_signature": "SourcePrinter.createInfoPanel(final Issue issue, final String description,\n            final String iconUrl)", "testcase": false, "constructor": false}, {"identifier": "createIssueBox", "parameters": "(final Issue issue, final String description,\n            final String iconUrl)", "modifiers": "private", "return": "ContainerTag", "signature": "ContainerTag createIssueBox(final Issue issue, final String description,\n            final String iconUrl)", "full_signature": "private ContainerTag createIssueBox(final Issue issue, final String description,\n            final String iconUrl)", "class_method_signature": "SourcePrinter.createIssueBox(final Issue issue, final String description,\n            final String iconUrl)", "testcase": false, "constructor": false}, {"identifier": "createTitle", "parameters": "(final String message, final String iconUrl, final boolean isCollapseVisible)", "modifiers": "private", "return": "ContainerTag", "signature": "ContainerTag createTitle(final String message, final String iconUrl, final boolean isCollapseVisible)", "full_signature": "private ContainerTag createTitle(final String message, final String iconUrl, final boolean isCollapseVisible)", "class_method_signature": "SourcePrinter.createTitle(final String message, final String iconUrl, final boolean isCollapseVisible)", "testcase": false, "constructor": false}, {"identifier": "createCollapseButton", "parameters": "(final boolean isCollapseVisible)", "modifiers": "private", "return": "ContainerTag", "signature": "ContainerTag createCollapseButton(final boolean isCollapseVisible)", "full_signature": "private ContainerTag createCollapseButton(final boolean isCollapseVisible)", "class_method_signature": "SourcePrinter.createCollapseButton(final boolean isCollapseVisible)", "testcase": false, "constructor": false}, {"identifier": "createTitleAndCollapsedDescription", "parameters": "(final String message, final String description,\n            final String iconUrl)", "modifiers": "private", "return": "ContainerTag", "signature": "ContainerTag createTitleAndCollapsedDescription(final String message, final String description,\n            final String iconUrl)", "full_signature": "private ContainerTag createTitleAndCollapsedDescription(final String message, final String description,\n            final String iconUrl)", "class_method_signature": "SourcePrinter.createTitleAndCollapsedDescription(final String message, final String description,\n            final String iconUrl)", "testcase": false, "constructor": false}, {"identifier": "replaceNewLine", "parameters": "(final String message)", "modifiers": "private", "return": "UnescapedText", "signature": "UnescapedText replaceNewLine(final String message)", "full_signature": "private UnescapedText replaceNewLine(final String message)", "class_method_signature": "SourcePrinter.replaceNewLine(final String message)", "testcase": false, "constructor": false}, {"identifier": "unescape", "parameters": "(final String message)", "modifiers": "private", "return": "UnescapedText", "signature": "UnescapedText unescape(final String message)", "full_signature": "private UnescapedText unescape(final String message)", "class_method_signature": "SourcePrinter.unescape(final String message)", "testcase": false, "constructor": false}, {"identifier": "selectLanguageClass", "parameters": "(final Issue issue)", "modifiers": "@SuppressWarnings({\"javancss\", \"PMD.CyclomaticComplexity\"}) private", "return": "String", "signature": "String selectLanguageClass(final Issue issue)", "full_signature": "@SuppressWarnings({\"javancss\", \"PMD.CyclomaticComplexity\"}) private String selectLanguageClass(final Issue issue)", "class_method_signature": "SourcePrinter.selectLanguageClass(final Issue issue)", "testcase": false, "constructor": false}, {"identifier": "asCode", "parameters": "(final StringBuilder text, final String... classes)", "modifiers": "private", "return": "String", "signature": "String asCode(final StringBuilder text, final String... classes)", "full_signature": "private String asCode(final StringBuilder text, final String... classes)", "class_method_signature": "SourcePrinter.asCode(final StringBuilder text, final String... classes)", "testcase": false, "constructor": false}], "file": "plugin/src/main/java/io/jenkins/plugins/analysis/core/model/SourcePrinter.java"}, "focal_method": {"identifier": "render", "parameters": "(final Stream<String> lines, final Issue issue, final String description,\n            final String iconUrl)", "modifiers": "public", "return": "String", "body": "public String render(final Stream<String> lines, final Issue issue, final String description,\n            final String iconUrl) {\n        try (LookaheadStream stream = new LookaheadStream(lines)) {\n            int start = issue.getLineStart();\n            int end = issue.getLineEnd();\n\n            StringBuilder before = readBlockUntilLine(stream, start - 1);\n            StringBuilder marked = readBlockUntilLine(stream, end);\n            StringBuilder after = readBlockUntilLine(stream, Integer.MAX_VALUE);\n\n            String language = selectLanguageClass(issue);\n            String code = asCode(before, language, \"line-numbers\")\n                    + asCode(marked, language, \"highlight\")\n                    + createInfoPanel(issue, description, iconUrl)\n                    + asCode(after, language);\n\n            return pre().with(new UnescapedText(code)).renderFormatted();\n        }\n    }", "signature": "String render(final Stream<String> lines, final Issue issue, final String description,\n            final String iconUrl)", "full_signature": "public String render(final Stream<String> lines, final Issue issue, final String description,\n            final String iconUrl)", "class_method_signature": "SourcePrinter.render(final Stream<String> lines, final Issue issue, final String description,\n            final String iconUrl)", "testcase": false, "constructor": false, "invocations": ["getLineStart", "getLineEnd", "readBlockUntilLine", "readBlockUntilLine", "readBlockUntilLine", "selectLanguageClass", "asCode", "asCode", "createInfoPanel", "asCode", "renderFormatted", "with", "pre"]}, "repository": {"repo_id": 152814648, "url": "https://github.com/jenkinsci/warnings-ng-plugin", "stars": 158, "created": "10/12/2018 10:41:36 PM +00:00", "updates": "2020-01-27T14:00:03+00:00", "fork": "False", "license": "licensed"}}