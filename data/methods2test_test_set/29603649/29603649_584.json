{"test_class": {"identifier": "SequenceDescriptorParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SEQUENCE_DESCRIPTOR_TAG_NAME = \"sequence-descriptor\";", "modifier": "private static final", "type": "String", "declarator": "SEQUENCE_DESCRIPTOR_TAG_NAME = \"sequence-descriptor\"", "var_name": "SEQUENCE_DESCRIPTOR_TAG_NAME"}, {"original_string": "private SequenceDescriptor sequenceDescriptor;", "modifier": "private", "type": "SequenceDescriptor", "declarator": "sequenceDescriptor", "var_name": "sequenceDescriptor"}, {"original_string": "private List<DialogDescriptor> dialogDescriptors;", "modifier": "private", "type": "List<DialogDescriptor>", "declarator": "dialogDescriptors", "var_name": "dialogDescriptors"}, {"original_string": "@Mock\n    private SequenceDescriptorFactory sequenceDescriptorFactory;", "modifier": "@Mock\n    private", "type": "SequenceDescriptorFactory", "declarator": "sequenceDescriptorFactory", "var_name": "sequenceDescriptorFactory"}, {"original_string": "@InjectMocks\n    private SequenceDescriptorParser underTest;", "modifier": "@InjectMocks\n    private", "type": "SequenceDescriptorParser", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "@Mock\n    private Element rootElement;", "modifier": "@Mock\n    private", "type": "Element", "declarator": "rootElement", "var_name": "rootElement"}, {"original_string": "@Mock\n    private Document document;", "modifier": "@Mock\n    private", "type": "Document", "declarator": "document", "var_name": "document"}, {"original_string": "@Mock\n    private NodeList nodeList;", "modifier": "@Mock\n    private", "type": "NodeList", "declarator": "nodeList", "var_name": "nodeList"}, {"original_string": "@Mock\n    private Element sequenceElement;", "modifier": "@Mock\n    private", "type": "Element", "declarator": "sequenceElement", "var_name": "sequenceElement"}], "file": "wilma-application/modules/wilma-stub-configuration-parser/src/test/java/com/epam/wilma/stubconfig/dom/parser/sequence/SequenceDescriptorParserTest.java"}, "test_case": {"identifier": "testParseShouldReturnEmptyListWhenNoSequenceDescriptorExists", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseShouldReturnEmptyListWhenNoSequenceDescriptorExists() {\n        //GIVEN\n        given(rootElement.getElementsByTagName(SEQUENCE_DESCRIPTOR_TAG_NAME)).willReturn(nodeList);\n        given(nodeList.getLength()).willReturn(0);\n        //WHEN\n        List<SequenceDescriptor> result = underTest.parse(document, rootElement, dialogDescriptors);\n        //THEN\n        assertTrue(result.isEmpty());\n    }", "signature": "void testParseShouldReturnEmptyListWhenNoSequenceDescriptorExists()", "full_signature": "@Test public void testParseShouldReturnEmptyListWhenNoSequenceDescriptorExists()", "class_method_signature": "SequenceDescriptorParserTest.testParseShouldReturnEmptyListWhenNoSequenceDescriptorExists()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "getElementsByTagName", "willReturn", "given", "getLength", "parse", "assertTrue", "isEmpty"]}, "focal_class": {"identifier": "SequenceDescriptorParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private SequenceDescriptorFactory sequenceDescriptorFactory;", "modifier": "@Autowired\n    private", "type": "SequenceDescriptorFactory", "declarator": "sequenceDescriptorFactory", "var_name": "sequenceDescriptorFactory"}], "methods": [{"identifier": "parse", "parameters": "(final Document document, final Element root, final List<DialogDescriptor> dialogDescriptors)", "modifiers": "public", "return": "List<SequenceDescriptor>", "signature": "List<SequenceDescriptor> parse(final Document document, final Element root, final List<DialogDescriptor> dialogDescriptors)", "full_signature": "public List<SequenceDescriptor> parse(final Document document, final Element root, final List<DialogDescriptor> dialogDescriptors)", "class_method_signature": "SequenceDescriptorParser.parse(final Document document, final Element root, final List<DialogDescriptor> dialogDescriptors)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-stub-configuration-parser/src/main/java/com/epam/wilma/stubconfig/dom/parser/sequence/SequenceDescriptorParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(final Document document, final Element root, final List<DialogDescriptor> dialogDescriptors)", "modifiers": "public", "return": "List<SequenceDescriptor>", "body": "public List<SequenceDescriptor> parse(final Document document, final Element root, final List<DialogDescriptor> dialogDescriptors) {\n        NodeList sequenceDescriptorNodes = root.getElementsByTagName(SequenceDescriptor.TAG_NAME);\n        List<SequenceDescriptor> sequenceDescriptors = new ArrayList<>();\n        for (int i = 0; i < sequenceDescriptorNodes.getLength(); i++) {\n            Element sequenceElement = (Element) sequenceDescriptorNodes.item(i);\n            SequenceDescriptor sequenceDescriptor = sequenceDescriptorFactory.create(document, sequenceElement, dialogDescriptors);\n            sequenceDescriptors.add(sequenceDescriptor);\n        }\n        return sequenceDescriptors;\n    }", "signature": "List<SequenceDescriptor> parse(final Document document, final Element root, final List<DialogDescriptor> dialogDescriptors)", "full_signature": "public List<SequenceDescriptor> parse(final Document document, final Element root, final List<DialogDescriptor> dialogDescriptors)", "class_method_signature": "SequenceDescriptorParser.parse(final Document document, final Element root, final List<DialogDescriptor> dialogDescriptors)", "testcase": false, "constructor": false, "invocations": ["getElementsByTagName", "getLength", "item", "create", "add"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}