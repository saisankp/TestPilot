{"test_class": {"identifier": "AccessValidatorControllerTest", "superclass": "extends AbstractAccessValidatorTest", "interfaces": "", "fields": [{"original_string": "private static final int MAX_BYTE_DOWNLOAD = 200;", "modifier": "private static final", "type": "int", "declarator": "MAX_BYTE_DOWNLOAD = 200", "var_name": "MAX_BYTE_DOWNLOAD"}, {"original_string": "@InjectMocks\n    private AccessValidatorController accessValidatorController;", "modifier": "@InjectMocks\n    private", "type": "AccessValidatorController", "declarator": "accessValidatorController", "var_name": "accessValidatorController"}, {"original_string": "@Mock\n    private HerdApiClientOperations herdApiClientOperations;", "modifier": "@Mock\n    private", "type": "HerdApiClientOperations", "declarator": "herdApiClientOperations", "var_name": "herdApiClientOperations"}, {"original_string": "@Mock\n    private ObjectListing objectListing;", "modifier": "@Mock\n    private", "type": "ObjectListing", "declarator": "objectListing", "var_name": "objectListing"}, {"original_string": "@Mock\n    private PropertiesHelper propertiesHelper;", "modifier": "@Mock\n    private", "type": "PropertiesHelper", "declarator": "propertiesHelper", "var_name": "propertiesHelper"}, {"original_string": "@Mock\n    private S3Operations s3Operations;", "modifier": "@Mock\n    private", "type": "S3Operations", "declarator": "s3Operations", "var_name": "s3Operations"}], "file": "herd-code/herd-tools/herd-access-validator/src/test/java/org/finra/herd/tools/access/validator/AccessValidatorControllerTest.java"}, "test_case": {"identifier": "testValidateAccessNoStorageFilesZeroByteS3File", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidateAccessNoStorageFilesZeroByteS3File() throws Exception\n    {\n        // Create business object data without any registered storage files, but with storage unit directory path and a zero-byte S3 file.\n        BusinessObjectData businessObjectData = createBusinessObjectData();\n        businessObjectData.getStorageUnits().get(0).setStorageFiles(null);\n        StorageDirectory storageDirectory = new StorageDirectory();\n        storageDirectory.setDirectoryPath(STORAGE_DIRECTORY_PATH);\n        businessObjectData.getStorageUnits().get(0).setStorageDirectory(storageDirectory);\n\n        // Create AWS list objects response with a zero-byte S3 file.\n        S3ObjectSummary s3ObjectSummary = new S3ObjectSummary();\n        s3ObjectSummary.setKey(S3_KEY);\n        s3ObjectSummary.setSize(FILE_SIZE_0_BYTE);\n        objectListing = Mockito.mock(ObjectListing.class);\n        when(objectListing.getObjectSummaries()).thenReturn(Lists.newArrayList(s3ObjectSummary));\n\n        // Create AWS get object request.\n        GetObjectRequest getObjectRequest = new GetObjectRequest(S3_BUCKET_NAME, S3_KEY).withRange(0, MAX_BYTE_DOWNLOAD);\n\n        // Create S3 object.\n        S3Object s3Object = new S3Object();\n        s3Object.setObjectContent(new ByteArrayInputStream(RandomStringUtils.randomAlphabetic(MAX_BYTE_DOWNLOAD).getBytes()));\n\n        // Create S3 object metadata.\n        ObjectMetadata objectMetadata = new ObjectMetadata();\n        objectMetadata.setContentLength(MAX_BYTE_DOWNLOAD);\n\n        // Mock the external calls.\n        when(propertiesHelper.getProperty(HERD_BASE_URL_PROPERTY)).thenReturn(HERD_BASE_URL);\n        when(propertiesHelper.getProperty(HERD_USERNAME_PROPERTY)).thenReturn(HERD_USERNAME);\n        when(propertiesHelper.getProperty(HERD_PASSWORD_PROPERTY)).thenReturn(HERD_PASSWORD);\n        when(propertiesHelper.getProperty(AWS_REGION_PROPERTY)).thenReturn(AWS_REGION_NAME_US_EAST_1);\n        when(propertiesHelper.getProperty(AWS_ROLE_ARN_PROPERTY)).thenReturn(AWS_ROLE_ARN);\n        when(propertiesHelper.getProperty(BUSINESS_OBJECT_FORMAT_VERSION_PROPERTY)).thenReturn(BUSINESS_OBJECT_FORMAT_VERSION.toString());\n        when(propertiesHelper.getProperty(BUSINESS_OBJECT_DATA_VERSION_PROPERTY)).thenReturn(BUSINESS_OBJECT_DATA_VERSION.toString());\n        when(propertiesHelper.getProperty(NAMESPACE_PROPERTY)).thenReturn(NAMESPACE);\n        when(propertiesHelper.getProperty(BUSINESS_OBJECT_DEFINITION_NAME_PROPERTY)).thenReturn(BUSINESS_OBJECT_DEFINITION_NAME);\n        when(propertiesHelper.getProperty(BUSINESS_OBJECT_FORMAT_USAGE_PROPERTY)).thenReturn(BUSINESS_OBJECT_FORMAT_USAGE);\n        when(propertiesHelper.getProperty(BUSINESS_OBJECT_FORMAT_FILE_TYPE_PROPERTY)).thenReturn(BUSINESS_OBJECT_FORMAT_FILE_TYPE);\n        when(propertiesHelper.getProperty(PRIMARY_PARTITION_VALUE_PROPERTY)).thenReturn(PRIMARY_PARTITION_VALUE);\n        when(propertiesHelper.getProperty(SUB_PARTITION_VALUES_PROPERTY)).thenReturn(SUB_PARTITION_VALUES);\n        when(herdApiClientOperations\n            .businessObjectDataGetBusinessObjectData(any(BusinessObjectDataApi.class), eq(NAMESPACE), eq(BUSINESS_OBJECT_DEFINITION_NAME),\n                eq(BUSINESS_OBJECT_FORMAT_USAGE), eq(BUSINESS_OBJECT_FORMAT_FILE_TYPE), eq(null), eq(PRIMARY_PARTITION_VALUE), eq(SUB_PARTITION_VALUES),\n                eq(BUSINESS_OBJECT_FORMAT_VERSION), eq(BUSINESS_OBJECT_DATA_VERSION), eq(null), eq(false), eq(false), eq(false))).thenReturn(businessObjectData);\n        when(s3Operations.listObjects(any(ListObjectsRequest.class), any(AmazonS3.class))).thenReturn(objectListing);\n\n        // Call the method under test with message flag set to \"false\".\n        accessValidatorController.validateAccess(new File(PROPERTIES_FILE_PATH), false);\n\n        // Verify the external calls.\n        verify(herdApiClientOperations).checkPropertiesFile(propertiesHelper, false);\n        verify(propertiesHelper).loadProperties(new File(PROPERTIES_FILE_PATH));\n        verify(propertiesHelper).getProperty(HERD_BASE_URL_PROPERTY);\n        verify(propertiesHelper).getProperty(HERD_USERNAME_PROPERTY);\n        verify(propertiesHelper).getProperty(HERD_PASSWORD_PROPERTY);\n        verify(herdApiClientOperations).applicationGetBuildInfo(any(ApplicationApi.class));\n        verify(herdApiClientOperations).currentUserGetCurrentUser(any(CurrentUserApi.class));\n        verify(propertiesHelper).getProperty(AWS_REGION_PROPERTY);\n        verify(propertiesHelper).getProperty(AWS_ROLE_ARN_PROPERTY);\n        verify(propertiesHelper).getProperty(BUSINESS_OBJECT_FORMAT_VERSION_PROPERTY);\n        verify(propertiesHelper).getProperty(BUSINESS_OBJECT_DATA_VERSION_PROPERTY);\n        verify(propertiesHelper).getProperty(NAMESPACE_PROPERTY);\n        verify(propertiesHelper).getProperty(BUSINESS_OBJECT_DEFINITION_NAME_PROPERTY);\n        verify(propertiesHelper).getProperty(BUSINESS_OBJECT_FORMAT_USAGE_PROPERTY);\n        verify(propertiesHelper).getProperty(BUSINESS_OBJECT_FORMAT_FILE_TYPE_PROPERTY);\n        verify(propertiesHelper).getProperty(PRIMARY_PARTITION_VALUE_PROPERTY);\n        verify(propertiesHelper).getProperty(SUB_PARTITION_VALUES_PROPERTY);\n        verify(herdApiClientOperations)\n            .businessObjectDataGetBusinessObjectData(any(BusinessObjectDataApi.class), eq(NAMESPACE), eq(BUSINESS_OBJECT_DEFINITION_NAME),\n                eq(BUSINESS_OBJECT_FORMAT_USAGE), eq(BUSINESS_OBJECT_FORMAT_FILE_TYPE), eq(null), eq(PRIMARY_PARTITION_VALUE), eq(SUB_PARTITION_VALUES),\n                eq(BUSINESS_OBJECT_FORMAT_VERSION), eq(BUSINESS_OBJECT_DATA_VERSION), eq(null), eq(false), eq(false), eq(false));\n        verify(s3Operations).listObjects(any(ListObjectsRequest.class), any(AmazonS3.class));\n        verifyNoMoreInteractionsHelper();\n    }", "signature": "void testValidateAccessNoStorageFilesZeroByteS3File()", "full_signature": "@Test public void testValidateAccessNoStorageFilesZeroByteS3File()", "class_method_signature": "AccessValidatorControllerTest.testValidateAccessNoStorageFilesZeroByteS3File()", "testcase": true, "constructor": false, "invocations": ["createBusinessObjectData", "setStorageFiles", "get", "getStorageUnits", "setDirectoryPath", "setStorageDirectory", "get", "getStorageUnits", "setKey", "setSize", "mock", "thenReturn", "when", "getObjectSummaries", "newArrayList", "withRange", "setObjectContent", "getBytes", "randomAlphabetic", "setContentLength", "thenReturn", "when", "getProperty", "thenReturn", "when", "getProperty", "thenReturn", "when", "getProperty", "thenReturn", "when", "getProperty", "thenReturn", "when", "getProperty", "thenReturn", "when", "getProperty", "toString", "thenReturn", "when", "getProperty", "toString", "thenReturn", "when", "getProperty", "thenReturn", "when", "getProperty", "thenReturn", "when", "getProperty", "thenReturn", "when", "getProperty", "thenReturn", "when", "getProperty", "thenReturn", "when", "getProperty", "thenReturn", "when", "businessObjectDataGetBusinessObjectData", "any", "eq", "eq", "eq", "eq", "eq", "eq", "eq", "eq", "eq", "eq", "eq", "eq", "eq", "thenReturn", "when", "listObjects", "any", "any", "validateAccess", "checkPropertiesFile", "verify", "loadProperties", "verify", "getProperty", "verify", "getProperty", "verify", "getProperty", "verify", "applicationGetBuildInfo", "verify", "any", "currentUserGetCurrentUser", "verify", "any", "getProperty", "verify", "getProperty", "verify", "getProperty", "verify", "getProperty", "verify", "getProperty", "verify", "getProperty", "verify", "getProperty", "verify", "getProperty", "verify", "getProperty", "verify", "getProperty", "verify", "businessObjectDataGetBusinessObjectData", "verify", "any", "eq", "eq", "eq", "eq", "eq", "eq", "eq", "eq", "eq", "eq", "eq", "eq", "eq", "listObjects", "verify", "any", "any", "verifyNoMoreInteractionsHelper"]}, "focal_class": {"identifier": "AccessValidatorController", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String S3_BUCKET_NAME_ATTRIBUTE = \"bucket.name\";", "modifier": "static final", "type": "String", "declarator": "S3_BUCKET_NAME_ATTRIBUTE = \"bucket.name\"", "var_name": "S3_BUCKET_NAME_ATTRIBUTE"}, {"original_string": "private static final String LINE_FEED = \"\\n\\n\\n\";", "modifier": "private static final", "type": "String", "declarator": "LINE_FEED = \"\\n\\n\\n\"", "var_name": "LINE_FEED"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(AccessValidatorController.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(AccessValidatorController.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private HerdApiClientOperations herdApiClientOperations;", "modifier": "@Autowired\n    private", "type": "HerdApiClientOperations", "declarator": "herdApiClientOperations", "var_name": "herdApiClientOperations"}, {"original_string": "@Autowired\n    private PropertiesHelper propertiesHelper;", "modifier": "@Autowired\n    private", "type": "PropertiesHelper", "declarator": "propertiesHelper", "var_name": "propertiesHelper"}, {"original_string": "@Autowired\n    private S3Operations s3Operations;", "modifier": "@Autowired\n    private", "type": "S3Operations", "declarator": "s3Operations", "var_name": "s3Operations"}], "methods": [{"identifier": "validateAccess", "parameters": "(File propertiesFile, Boolean messageFlag)", "modifiers": "", "return": "void", "signature": "void validateAccess(File propertiesFile, Boolean messageFlag)", "full_signature": " void validateAccess(File propertiesFile, Boolean messageFlag)", "class_method_signature": "AccessValidatorController.validateAccess(File propertiesFile, Boolean messageFlag)", "testcase": false, "constructor": false}, {"identifier": "getBusinessObjectDataKeyFromPropertiesFile", "parameters": "()", "modifiers": "private", "return": "BusinessObjectDataKey", "signature": "BusinessObjectDataKey getBusinessObjectDataKeyFromPropertiesFile()", "full_signature": "private BusinessObjectDataKey getBusinessObjectDataKeyFromPropertiesFile()", "class_method_signature": "AccessValidatorController.getBusinessObjectDataKeyFromPropertiesFile()", "testcase": false, "constructor": false}, {"identifier": "verifyReadAccessToS3Object", "parameters": "(String bucketName, String s3ObjectKey, long s3ObjectSize, AmazonS3 amazonS3)", "modifiers": "private", "return": "boolean", "signature": "boolean verifyReadAccessToS3Object(String bucketName, String s3ObjectKey, long s3ObjectSize, AmazonS3 amazonS3)", "full_signature": "private boolean verifyReadAccessToS3Object(String bucketName, String s3ObjectKey, long s3ObjectSize, AmazonS3 amazonS3)", "class_method_signature": "AccessValidatorController.verifyReadAccessToS3Object(String bucketName, String s3ObjectKey, long s3ObjectSize, AmazonS3 amazonS3)", "testcase": false, "constructor": false}], "file": "herd-code/herd-tools/herd-access-validator/src/main/java/org/finra/herd/tools/access/validator/AccessValidatorController.java"}, "focal_method": {"identifier": "validateAccess", "parameters": "(File propertiesFile, Boolean messageFlag)", "modifiers": "", "return": "void", "body": "void validateAccess(File propertiesFile, Boolean messageFlag) throws IOException, ApiException\n    {\n        // Load properties.\n        propertiesHelper.loadProperties(propertiesFile);\n\n        // Check properties\n        herdApiClientOperations.checkPropertiesFile(propertiesHelper, messageFlag);\n\n        // Create the API client to a specific REST endpoint with proper authentication.\n        ApiClient apiClient = new ApiClient();\n        apiClient.setBasePath(propertiesHelper.getProperty(HERD_BASE_URL_PROPERTY));\n        apiClient.setUsername(propertiesHelper.getProperty(HERD_USERNAME_PROPERTY));\n        apiClient.setPassword(propertiesHelper.getProperty(HERD_PASSWORD_PROPERTY));\n\n        // Setup specific API classes.\n        ApplicationApi applicationApi = new ApplicationApi(apiClient);\n        CurrentUserApi currentUserApi = new CurrentUserApi(apiClient);\n\n        // Retrieve build information from the registration server.\n        LOGGER.info(\"Retrieving build information from the registration server...\");\n        LOGGER.info(\"{}\", herdApiClientOperations.applicationGetBuildInfo(applicationApi));\n\n        // Retrieve user information from the registration server.\n        LOGGER.info(\"Retrieving user information from the registration server...\");\n        LOGGER.info(\"{}\", herdApiClientOperations.currentUserGetCurrentUser(currentUserApi));\n\n        // Create AWS client configuration.\n        ClientConfiguration clientConfiguration = new ClientConfiguration();\n\n        // Get AWS region.\n        String awsRegion = propertiesHelper.getProperty(AWS_REGION_PROPERTY);\n\n        // Get ARN for the AWS role to assume.\n        String awsRoleArn = propertiesHelper.getProperty(AWS_ROLE_ARN_PROPERTY);\n        LOGGER.info(\"Assuming \\\"{}\\\" AWS role...\", awsRoleArn);\n        AWSCredentialsProvider awsCredentialsProvider = new STSAssumeRoleSessionCredentialsProvider.Builder(awsRoleArn, UUID.randomUUID().toString())\n            .withStsClient(AWSSecurityTokenServiceClientBuilder.standard().withClientConfiguration(clientConfiguration).withRegion(awsRegion).build()).build();\n\n        // Create AWS S3 client using the assumed role.\n        LOGGER.info(\"Creating AWS S3 client using role: \\\"{}\\\".\", awsRoleArn);\n\n        AmazonS3 amazonS3 =\n            AmazonS3ClientBuilder.standard().withCredentials(awsCredentialsProvider).withClientConfiguration(clientConfiguration).withRegion(awsRegion).build();\n\n        // Create AWS SQS client using the assumed role.\n        LOGGER.info(\"Creating AWS SQS client using role: \\\"{}\\\".\", awsRoleArn);\n\n        AmazonSQS amazonSQS =\n            AmazonSQSClientBuilder.standard().withCredentials(awsCredentialsProvider).withClientConfiguration(clientConfiguration).withRegion(awsRegion)\n                .build();\n\n        BusinessObjectDataKey bdataKey;\n\n        // Check if -m flag passed\n        if (messageFlag)\n        {\n            String sqsQueueUrl = propertiesHelper.getProperty(AWS_SQS_QUEUE_URL_PROPERTY);\n            LOGGER.info(\"Getting message from SQS queue: {}\", sqsQueueUrl);\n            bdataKey = herdApiClientOperations.getBdataKeySqs(amazonSQS, sqsQueueUrl);\n        }\n        else\n        {\n            LOGGER.info(\"Creating BusinessObjectDataKey from properties file\");\n            bdataKey = getBusinessObjectDataKeyFromPropertiesFile();\n        }\n        LOGGER.info(\"Using business object data key: {}\", bdataKey);\n\n        BusinessObjectDataApi businessObjectDataApi = new BusinessObjectDataApi(apiClient);\n\n        // Retrieve business object data from the registration server.\n        LOGGER.info(\"Retrieving business object data information from the registration server...\");\n        BusinessObjectData businessObjectData = herdApiClientOperations\n            .businessObjectDataGetBusinessObjectData(businessObjectDataApi, bdataKey.getNamespace(), bdataKey.getBusinessObjectDefinitionName(),\n                bdataKey.getBusinessObjectFormatUsage(), bdataKey.getBusinessObjectFormatFileType(), null, bdataKey.getPartitionValue(),\n                StringUtils.join(bdataKey.getSubPartitionValues(), \"|\"), bdataKey.getBusinessObjectFormatVersion(), bdataKey.getBusinessObjectDataVersion(),\n                null, false, false, false);\n\n        // Log business object data information returned by the registration server.\n        Gson gson = new GsonBuilder().setPrettyPrinting().create();\n        LOGGER.info(\"{}\", gson.toJson(businessObjectData));\n\n        // Check if retrieved business object data has storage unit registered with it.\n        Assert.isTrue(CollectionUtils.isNotEmpty(businessObjectData.getStorageUnits()), \"Business object data has no storage unit registered with it.\");\n        Assert.isTrue(businessObjectData.getStorageUnits().get(0).getStorage() != null, \"Business object data storage unit does not have storage information.\");\n\n        // Get S3 bucket name.\n        String bucketName = null;\n        for (Attribute attribute : businessObjectData.getStorageUnits().get(0).getStorage().getAttributes())\n        {\n            if (StringUtils.equals(attribute.getName(), S3_BUCKET_NAME_ATTRIBUTE))\n            {\n                bucketName = attribute.getValue();\n                break;\n            }\n        }\n        Assert.isTrue(StringUtils.isNotBlank(bucketName), \"S3 bucket name is not configured for the storage.\");\n\n        // Validate that S3 files registered with the business object data under can be streamed to disk.\n        LOGGER.info(\"Validating that S3 files registered with the business object data are downloadable.\");\n\n        // Initialize a flag to be used to determine if we did not find any non-zero byte files registered for this business object data.\n        boolean readAccessValidated = false;\n\n        // If business object data has registered storage files, we go though the list until we fail\n        // accessing S3 metadata or find a non-zero byte file that we can try to download.\n        if (CollectionUtils.isNotEmpty(businessObjectData.getStorageUnits().get(0).getStorageFiles()))\n        {\n            // Loop through the list of storage files and attempt to read at least one file which has valid content.\n            for (StorageFile storageFile : businessObjectData.getStorageUnits().get(0).getStorageFiles())\n            {\n                LOGGER.info(\"Attempting to read \\\"{}/{}\\\" S3 file...\", bucketName, storageFile.getFilePath());\n\n                // Get S3 object metadata.\n                ObjectMetadata objectMetadata = s3Operations.getObjectMetadata(bucketName, storageFile.getFilePath(), amazonS3);\n\n                // Try to verify read access to the S3 object.\n                if (verifyReadAccessToS3Object(bucketName, storageFile.getFilePath(), objectMetadata.getContentLength(), amazonS3))\n                {\n                    readAccessValidated = true;\n                    break;\n                }\n            }\n        }\n        // If business object data has no registered storage files, we go though the list of S3 files found under\n        // the storage unit directory path (S3 key prefix) until we find a non-zero byte file that we can try to download.\n        else\n        {\n            // Check if storage unit has a non-blank directory path.\n            Assert.isTrue(businessObjectData.getStorageUnits().get(0).getStorageDirectory() != null &&\n                    StringUtils.isNotBlank(businessObjectData.getStorageUnits().get(0).getStorageDirectory().getDirectoryPath()),\n                \"\" + \"No storage files or directory path is registered with the business object data storage unit.\");\n\n            // Since storage unit directory path represents a directory, we add a trailing '/' character to it.\n            String getS3KeyPrefix = StringUtils.appendIfMissing(businessObjectData.getStorageUnits().get(0).getStorageDirectory().getDirectoryPath(), \"/\");\n\n            // List all S3 files located under the S3 prefix.\n            // We are not using pagination here assuming that AWS page limit is enough to find at least one non-zero byte file.\n            LOGGER.info(\"Attempting to list S3 files located under \\\"{}/{}\\\" S3 key prefix...\", bucketName, getS3KeyPrefix);\n            ListObjectsRequest listObjectsRequest = new ListObjectsRequest().withBucketName(bucketName).withPrefix(getS3KeyPrefix);\n            ObjectListing objectListing = s3Operations.listObjects(listObjectsRequest, amazonS3);\n\n            for (S3ObjectSummary objectSummary : objectListing.getObjectSummaries())\n            {\n                // Try to verify read access to the S3 object.\n                if (verifyReadAccessToS3Object(bucketName, objectSummary.getKey(), objectSummary.getSize(), amazonS3))\n                {\n                    readAccessValidated = true;\n                    break;\n                }\n            }\n        }\n\n        // Report success if we were able to find a non-zero byte file and verify read\n        // access by downloading some number of bytes from the beginning of the file.\n        if (readAccessValidated)\n        {\n            LOGGER.info(\"{}Finished: SUCCESS\", LINE_FEED);\n        }\n        // Otherwise, report a failure.\n        else\n        {\n            LOGGER.error(\"{}Could not read valid content from any file: FAILURE\", LINE_FEED);\n        }\n    }", "signature": "void validateAccess(File propertiesFile, Boolean messageFlag)", "full_signature": " void validateAccess(File propertiesFile, Boolean messageFlag)", "class_method_signature": "AccessValidatorController.validateAccess(File propertiesFile, Boolean messageFlag)", "testcase": false, "constructor": false, "invocations": ["loadProperties", "checkPropertiesFile", "setBasePath", "getProperty", "setUsername", "getProperty", "setPassword", "getProperty", "info", "info", "applicationGetBuildInfo", "info", "info", "currentUserGetCurrentUser", "getProperty", "getProperty", "info", "build", "withStsClient", "toString", "randomUUID", "build", "withRegion", "withClientConfiguration", "standard", "info", "build", "withRegion", "withClientConfiguration", "withCredentials", "standard", "info", "build", "withRegion", "withClientConfiguration", "withCredentials", "standard", "getProperty", "info", "getBdataKeySqs", "info", "getBusinessObjectDataKeyFromPropertiesFile", "info", "info", "businessObjectDataGetBusinessObjectData", "getNamespace", "getBusinessObjectDefinitionName", "getBusinessObjectFormatUsage", "getBusinessObjectFormatFileType", "getPartitionValue", "join", "getSubPartitionValues", "getBusinessObjectFormatVersion", "getBusinessObjectDataVersion", "create", "setPrettyPrinting", "info", "toJson", "isTrue", "isNotEmpty", "getStorageUnits", "isTrue", "getStorage", "get", "getStorageUnits", "getAttributes", "getStorage", "get", "getStorageUnits", "equals", "getName", "getValue", "isTrue", "isNotBlank", "info", "isNotEmpty", "getStorageFiles", "get", "getStorageUnits", "getStorageFiles", "get", "getStorageUnits", "info", "getFilePath", "getObjectMetadata", "getFilePath", "verifyReadAccessToS3Object", "getFilePath", "getContentLength", "isTrue", "getStorageDirectory", "get", "getStorageUnits", "isNotBlank", "getDirectoryPath", "getStorageDirectory", "get", "getStorageUnits", "appendIfMissing", "getDirectoryPath", "getStorageDirectory", "get", "getStorageUnits", "info", "withPrefix", "withBucketName", "listObjects", "getObjectSummaries", "verifyReadAccessToS3Object", "getKey", "getSize", "info", "error"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}