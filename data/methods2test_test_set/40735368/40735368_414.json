{"test_class": {"identifier": "AreaGridProcessTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = Logging.getLogger(AreaGridProcessTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logging.getLogger(AreaGridProcessTest.class)", "var_name": "logger"}], "file": "modules/unsupported/process-raster/src/test/java/org/geotools/process/raster/AreaGridProcessTest.java"}, "test_case": {"identifier": "testAreaGridParameters", "parameters": "()", "modifiers": "@Test(expected = ProcessException.class) public", "return": "void", "body": "@Test(expected = ProcessException.class)\n    public void testAreaGridParameters() throws Exception {\n        logger.info(\"AREAGRIDPROCESS: Performing parameter test\");\n        AreaGridProcess process = new AreaGridProcess();\n        CoordinateReferenceSystem crs = org.geotools.referencing.crs.DefaultGeographicCRS.WGS84;\n        ReferencedEnvelope envelope = new ReferencedEnvelope(-180, 180, -90, 90, crs);\n        process.execute(envelope, -2, 10);\n    }", "signature": "void testAreaGridParameters()", "full_signature": "@Test(expected = ProcessException.class) public void testAreaGridParameters()", "class_method_signature": "AreaGridProcessTest.testAreaGridParameters()", "testcase": true, "constructor": false, "invocations": ["info", "execute"]}, "focal_class": {"identifier": "AreaGridProcess", "superclass": "", "interfaces": "implements RasterProcess", "fields": [{"original_string": "private static final String targetCRSWKT = \"PROJCS[\\\"World_Eckert_IV\\\",GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Eckert_IV\\\"],PARAMETER[\\\"Central_Meridian\\\",0.0],UNIT[\\\"Meter\\\",1.0]]\";", "modifier": "private static final", "type": "String", "declarator": "targetCRSWKT = \"PROJCS[\\\"World_Eckert_IV\\\",GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Eckert_IV\\\"],PARAMETER[\\\"Central_Meridian\\\",0.0],UNIT[\\\"Meter\\\",1.0]]\"", "var_name": "targetCRSWKT"}], "methods": [{"identifier": "execute", "parameters": "(\n            @DescribeParameter(name = \"envelope\", description = \"Bounding box for the computed raster, in WGS84 geographic coordinates.\") ReferencedEnvelope bounds,\n            @DescribeParameter(name = \"width\", description = \"Width of the output raster in pixels\", minValue = 1) int width,\n            @DescribeParameter(name = \"height\", description = \"Height of the output raster in pixels\", minValue = 1) int height)", "modifiers": "@DescribeResult(name = \"result\", description = \"Output raster\") public", "return": "GridCoverage2D", "signature": "GridCoverage2D execute(\n            @DescribeParameter(name = \"envelope\", description = \"Bounding box for the computed raster, in WGS84 geographic coordinates.\") ReferencedEnvelope bounds,\n            @DescribeParameter(name = \"width\", description = \"Width of the output raster in pixels\", minValue = 1) int width,\n            @DescribeParameter(name = \"height\", description = \"Height of the output raster in pixels\", minValue = 1) int height)", "full_signature": "@DescribeResult(name = \"result\", description = \"Output raster\") public GridCoverage2D execute(\n            @DescribeParameter(name = \"envelope\", description = \"Bounding box for the computed raster, in WGS84 geographic coordinates.\") ReferencedEnvelope bounds,\n            @DescribeParameter(name = \"width\", description = \"Width of the output raster in pixels\", minValue = 1) int width,\n            @DescribeParameter(name = \"height\", description = \"Height of the output raster in pixels\", minValue = 1) int height)", "class_method_signature": "AreaGridProcess.execute(\n            @DescribeParameter(name = \"envelope\", description = \"Bounding box for the computed raster, in WGS84 geographic coordinates.\") ReferencedEnvelope bounds,\n            @DescribeParameter(name = \"width\", description = \"Width of the output raster in pixels\", minValue = 1) int width,\n            @DescribeParameter(name = \"height\", description = \"Height of the output raster in pixels\", minValue = 1) int height)", "testcase": false, "constructor": false}], "file": "modules/unsupported/process-raster/src/main/java/org/geotools/process/raster/AreaGridProcess.java"}, "focal_method": {"identifier": "execute", "parameters": "(\n            @DescribeParameter(name = \"envelope\", description = \"Bounding box for the computed raster, in WGS84 geographic coordinates.\") ReferencedEnvelope bounds,\n            @DescribeParameter(name = \"width\", description = \"Width of the output raster in pixels\", minValue = 1) int width,\n            @DescribeParameter(name = \"height\", description = \"Height of the output raster in pixels\", minValue = 1) int height)", "modifiers": "@DescribeResult(name = \"result\", description = \"Output raster\") public", "return": "GridCoverage2D", "body": "@DescribeResult(name = \"result\", description = \"Output raster\")\n    public GridCoverage2D execute(\n            @DescribeParameter(name = \"envelope\", description = \"Bounding box for the computed raster, in WGS84 geographic coordinates.\") ReferencedEnvelope bounds,\n            @DescribeParameter(name = \"width\", description = \"Width of the output raster in pixels\", minValue = 1) int width,\n            @DescribeParameter(name = \"height\", description = \"Height of the output raster in pixels\", minValue = 1) int height)\n            throws ProcessException {\n\n        // basic checks\n        if (height <= 0 || width <= 0) {\n            throw new ProcessException(\"height and width parameters must be greater than 0\");\n        }\n        if (bounds.getCoordinateReferenceSystem() == null) {\n            throw new ProcessException(\"Envelope CRS must not be null\");\n        }\n        // build the grid\n        GeometryFactory geomFactory = new GeometryFactory();\n        try {\n            Polygon polygon = null;\n            \n            CoordinateReferenceSystem sourceCRS = org.geotools.referencing.crs.DefaultGeographicCRS.WGS84;\n            CoordinateReferenceSystem targetCRS = CRS.parseWKT(targetCRSWKT);\n            MathTransform transform = CRS.findMathTransform(sourceCRS, targetCRS);\n            double pX = bounds.getMinX();\n            double pY = bounds.getMaxY();\n            double stepX = (bounds.getMaxX() - bounds.getMinX()) / width;\n            double stepY = (bounds.getMaxY() - bounds.getMinY()) / height;\n            float[][] matrix = new float[height][width];\n            Coordinate[] tempCoordinates = new Coordinate[5];\n\n            // scroll through every cell (by row and then by col)\n            for (int i = 0; i < height; i++) {\n                // start of the row\n                pX = bounds.getMinX();\n                for (int j = 0; j < width; j++) {\n                    double nX = pX + stepX;\n                    double nY = pY - stepY;\n\n                    if(polygon == null) {\n                        tempCoordinates[0] = new Coordinate(pX, pY);\n                        tempCoordinates[1] = new Coordinate(nX, pY);\n                        tempCoordinates[2] = new Coordinate(nX, nY);\n                        tempCoordinates[3] = new Coordinate(pX, nY);\n                        tempCoordinates[4] = tempCoordinates[0];\n                        LinearRing linearRing = geomFactory.createLinearRing(tempCoordinates);\n                        polygon = geomFactory.createPolygon(linearRing, null);\n                    } else {\n                        tempCoordinates[0].x = pX; tempCoordinates[0].y = pY;  \n                        tempCoordinates[1].x = nX; tempCoordinates[1].y = pY;\n                        tempCoordinates[2].x = nX; tempCoordinates[2].y = nY;\n                        tempCoordinates[3].x = pX; tempCoordinates[3].y = nY;\n                        polygon.geometryChanged();\n                    }\n\n                    // transform to EckertIV and compute area\n                    Geometry targetGeometry = JTS.transform(polygon, transform);\n                    matrix[i][j] = (float) targetGeometry.getArea();\n                    // move on\n                    pX = pX + stepX;\n                }\n                // move to next row\n                pY = pY - stepY;\n            }\n\n            // build the grid coverage\n            GridCoverageFactory coverageFactory = new GridCoverageFactory();\n            GridCoverage2D grid = coverageFactory.create(\"AreaGridCoverage\", matrix, bounds);\n            return grid;\n\n        } catch (org.opengis.referencing.FactoryException ef) {\n            throw new ProcessException(\"Unable to create the target CRS\", ef);\n        } catch (org.opengis.referencing.operation.TransformException et) {\n            throw new ProcessException(\"Unable to tranform the coordinate system\", et);\n        }\n\n    }", "signature": "GridCoverage2D execute(\n            @DescribeParameter(name = \"envelope\", description = \"Bounding box for the computed raster, in WGS84 geographic coordinates.\") ReferencedEnvelope bounds,\n            @DescribeParameter(name = \"width\", description = \"Width of the output raster in pixels\", minValue = 1) int width,\n            @DescribeParameter(name = \"height\", description = \"Height of the output raster in pixels\", minValue = 1) int height)", "full_signature": "@DescribeResult(name = \"result\", description = \"Output raster\") public GridCoverage2D execute(\n            @DescribeParameter(name = \"envelope\", description = \"Bounding box for the computed raster, in WGS84 geographic coordinates.\") ReferencedEnvelope bounds,\n            @DescribeParameter(name = \"width\", description = \"Width of the output raster in pixels\", minValue = 1) int width,\n            @DescribeParameter(name = \"height\", description = \"Height of the output raster in pixels\", minValue = 1) int height)", "class_method_signature": "AreaGridProcess.execute(\n            @DescribeParameter(name = \"envelope\", description = \"Bounding box for the computed raster, in WGS84 geographic coordinates.\") ReferencedEnvelope bounds,\n            @DescribeParameter(name = \"width\", description = \"Width of the output raster in pixels\", minValue = 1) int width,\n            @DescribeParameter(name = \"height\", description = \"Height of the output raster in pixels\", minValue = 1) int height)", "testcase": false, "constructor": false, "invocations": ["getCoordinateReferenceSystem", "parseWKT", "findMathTransform", "getMinX", "getMaxY", "getMaxX", "getMinX", "getMaxY", "getMinY", "getMinX", "createLinearRing", "createPolygon", "geometryChanged", "transform", "getArea", "create"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}