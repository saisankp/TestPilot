{"test_class": {"identifier": "DefaultServletRequestDispatcherTest", "superclass": "", "interfaces": "", "fields": [], "file": "webapp/impl/src/test/java/cloud/piranha/webapp/impl/DefaultServletRequestDispatcherTest.java"}, "test_case": {"identifier": "testForward2", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testForward2() throws Exception {\n        TestWebApplicationRequest request = new TestWebApplicationRequest();\n        TestWebApplicationResponse response = new TestWebApplicationResponse();\n        DefaultWebApplication webApp = new DefaultWebApplication();\n        webApp.setWebApplicationRequestMapper(new DefaultWebApplicationRequestMapper());\n        webApp.addServlet(\"Snoop\", TestSnoopServlet.class);\n        webApp.addServletMapping(\"Snoop\", \"/Snoop\");\n        webApp.initialize();\n        webApp.start();\n        RequestDispatcher dispatcher = webApp.getRequestDispatcher(\"/Snoop\");\n        dispatcher.forward(request, response);\n        String responseText = new String(response.getResponseBytes());\n        webApp.stop();\n        assertTrue(responseText.contains(\"<title>Snoop</title>\"));\n    }", "signature": "void testForward2()", "full_signature": "@Test void testForward2()", "class_method_signature": "DefaultServletRequestDispatcherTest.testForward2()", "testcase": true, "constructor": false, "invocations": ["setWebApplicationRequestMapper", "addServlet", "addServletMapping", "initialize", "start", "getRequestDispatcher", "forward", "getResponseBytes", "stop", "assertTrue", "contains"]}, "focal_class": {"identifier": "DefaultServletRequestDispatcher", "superclass": "", "interfaces": "implements RequestDispatcher", "fields": [{"original_string": "private static final List<String> ASYNC_ATTRIBUTES = asList(ASYNC_CONTEXT_PATH, ASYNC_PATH_INFO, ASYNC_QUERY_STRING, ASYNC_REQUEST_URI, ASYNC_SERVLET_PATH);", "modifier": "private static final", "type": "List<String>", "declarator": "ASYNC_ATTRIBUTES = asList(ASYNC_CONTEXT_PATH, ASYNC_PATH_INFO, ASYNC_QUERY_STRING, ASYNC_REQUEST_URI, ASYNC_SERVLET_PATH)", "var_name": "ASYNC_ATTRIBUTES"}, {"original_string": "private final DefaultServletInvocation servletInvocation;", "modifier": "private final", "type": "DefaultServletInvocation", "declarator": "servletInvocation", "var_name": "servletInvocation"}, {"original_string": "private final ServletEnvironment servletEnvironment;", "modifier": "private final", "type": "ServletEnvironment", "declarator": "servletEnvironment", "var_name": "servletEnvironment"}, {"original_string": "private final String path;", "modifier": "private final", "type": "String", "declarator": "path", "var_name": "path"}, {"original_string": "private final DefaultErrorPageManager errorPageManager;", "modifier": "private final", "type": "DefaultErrorPageManager", "declarator": "errorPageManager", "var_name": "errorPageManager"}, {"original_string": "private final DefaultInvocationFinder invocationFinder;", "modifier": "private final", "type": "DefaultInvocationFinder", "declarator": "invocationFinder", "var_name": "invocationFinder"}, {"original_string": "private final DefaultWebApplication webApplication;", "modifier": "private final", "type": "DefaultWebApplication", "declarator": "webApplication", "var_name": "webApplication"}], "methods": [{"identifier": "DefaultServletRequestDispatcher", "parameters": "(DefaultServletInvocation servletInvocation, DefaultWebApplication webApplication)", "modifiers": "public", "return": "", "signature": " DefaultServletRequestDispatcher(DefaultServletInvocation servletInvocation, DefaultWebApplication webApplication)", "full_signature": "public  DefaultServletRequestDispatcher(DefaultServletInvocation servletInvocation, DefaultWebApplication webApplication)", "class_method_signature": "DefaultServletRequestDispatcher.DefaultServletRequestDispatcher(DefaultServletInvocation servletInvocation, DefaultWebApplication webApplication)", "testcase": false, "constructor": true}, {"identifier": "request", "parameters": "(DefaultWebApplicationRequest webappRequest, DefaultWebApplicationResponse httpResponse)", "modifiers": "public", "return": "void", "signature": "void request(DefaultWebApplicationRequest webappRequest, DefaultWebApplicationResponse httpResponse)", "full_signature": "public void request(DefaultWebApplicationRequest webappRequest, DefaultWebApplicationResponse httpResponse)", "class_method_signature": "DefaultServletRequestDispatcher.request(DefaultWebApplicationRequest webappRequest, DefaultWebApplicationResponse httpResponse)", "testcase": false, "constructor": false}, {"identifier": "forward", "parameters": "(ServletRequest servletRequest, ServletResponse servletResponse)", "modifiers": "@Override public", "return": "void", "signature": "void forward(ServletRequest servletRequest, ServletResponse servletResponse)", "full_signature": "@Override public void forward(ServletRequest servletRequest, ServletResponse servletResponse)", "class_method_signature": "DefaultServletRequestDispatcher.forward(ServletRequest servletRequest, ServletResponse servletResponse)", "testcase": false, "constructor": false}, {"identifier": "include", "parameters": "(ServletRequest servletRequest, ServletResponse servletResponse)", "modifiers": "@Override public", "return": "void", "signature": "void include(ServletRequest servletRequest, ServletResponse servletResponse)", "full_signature": "@Override public void include(ServletRequest servletRequest, ServletResponse servletResponse)", "class_method_signature": "DefaultServletRequestDispatcher.include(ServletRequest servletRequest, ServletResponse servletResponse)", "testcase": false, "constructor": false}, {"identifier": "error", "parameters": "(String servletName, ServletRequest servletRequest, ServletResponse servletResponse, Throwable throwable)", "modifiers": "public", "return": "void", "signature": "void error(String servletName, ServletRequest servletRequest, ServletResponse servletResponse, Throwable throwable)", "full_signature": "public void error(String servletName, ServletRequest servletRequest, ServletResponse servletResponse, Throwable throwable)", "class_method_signature": "DefaultServletRequestDispatcher.error(String servletName, ServletRequest servletRequest, ServletResponse servletResponse, Throwable throwable)", "testcase": false, "constructor": false}, {"identifier": "syncForward", "parameters": "(ServletRequest servletRequest, ServletResponse servletResponse)", "modifiers": "private", "return": "void", "signature": "void syncForward(ServletRequest servletRequest, ServletResponse servletResponse)", "full_signature": "private void syncForward(ServletRequest servletRequest, ServletResponse servletResponse)", "class_method_signature": "DefaultServletRequestDispatcher.syncForward(ServletRequest servletRequest, ServletResponse servletResponse)", "testcase": false, "constructor": false}, {"identifier": "isAsyncSupportedInChain", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isAsyncSupportedInChain()", "full_signature": "private boolean isAsyncSupportedInChain()", "class_method_signature": "DefaultServletRequestDispatcher.isAsyncSupportedInChain()", "testcase": false, "constructor": false}, {"identifier": "setForwardAttributes", "parameters": "(HttpServletRequest originalRequest, HttpServletRequest forwardedRequest, String... dispatcherKeys)", "modifiers": "private", "return": "void", "signature": "void setForwardAttributes(HttpServletRequest originalRequest, HttpServletRequest forwardedRequest, String... dispatcherKeys)", "full_signature": "private void setForwardAttributes(HttpServletRequest originalRequest, HttpServletRequest forwardedRequest, String... dispatcherKeys)", "class_method_signature": "DefaultServletRequestDispatcher.setForwardAttributes(HttpServletRequest originalRequest, HttpServletRequest forwardedRequest, String... dispatcherKeys)", "testcase": false, "constructor": false}, {"identifier": "setForwardAttribute", "parameters": "(HttpServletRequest originalRequest, HttpServletRequest forwardedRequest, String dispatcherKey)", "modifiers": "private", "return": "void", "signature": "void setForwardAttribute(HttpServletRequest originalRequest, HttpServletRequest forwardedRequest, String dispatcherKey)", "full_signature": "private void setForwardAttribute(HttpServletRequest originalRequest, HttpServletRequest forwardedRequest, String dispatcherKey)", "class_method_signature": "DefaultServletRequestDispatcher.setForwardAttribute(HttpServletRequest originalRequest, HttpServletRequest forwardedRequest, String dispatcherKey)", "testcase": false, "constructor": false}, {"identifier": "updateCurrentRequest", "parameters": "(HttpServletRequest originalRequest, HttpServletRequest forwardedRequest)", "modifiers": "private", "return": "CurrentRequestHolder", "signature": "CurrentRequestHolder updateCurrentRequest(HttpServletRequest originalRequest, HttpServletRequest forwardedRequest)", "full_signature": "private CurrentRequestHolder updateCurrentRequest(HttpServletRequest originalRequest, HttpServletRequest forwardedRequest)", "class_method_signature": "DefaultServletRequestDispatcher.updateCurrentRequest(HttpServletRequest originalRequest, HttpServletRequest forwardedRequest)", "testcase": false, "constructor": false}, {"identifier": "restoreCurrentRequest", "parameters": "(CurrentRequestHolder currentRequestHolder, HttpServletRequest originalRequest)", "modifiers": "private", "return": "void", "signature": "void restoreCurrentRequest(CurrentRequestHolder currentRequestHolder, HttpServletRequest originalRequest)", "full_signature": "private void restoreCurrentRequest(CurrentRequestHolder currentRequestHolder, HttpServletRequest originalRequest)", "class_method_signature": "DefaultServletRequestDispatcher.restoreCurrentRequest(CurrentRequestHolder currentRequestHolder, HttpServletRequest originalRequest)", "testcase": false, "constructor": false}, {"identifier": "asyncForward", "parameters": "(ServletRequest servletRequest, ServletResponse servletResponse)", "modifiers": "private", "return": "void", "signature": "void asyncForward(ServletRequest servletRequest, ServletResponse servletResponse)", "full_signature": "private void asyncForward(ServletRequest servletRequest, ServletResponse servletResponse)", "class_method_signature": "DefaultServletRequestDispatcher.asyncForward(ServletRequest servletRequest, ServletResponse servletResponse)", "testcase": false, "constructor": false}, {"identifier": "asyncHttpForward", "parameters": "(AsyncHttpDispatchWrapper asyncHttpDispatchWrapper, ServletResponse servletResponse)", "modifiers": "private", "return": "void", "signature": "void asyncHttpForward(AsyncHttpDispatchWrapper asyncHttpDispatchWrapper, ServletResponse servletResponse)", "full_signature": "private void asyncHttpForward(AsyncHttpDispatchWrapper asyncHttpDispatchWrapper, ServletResponse servletResponse)", "class_method_signature": "DefaultServletRequestDispatcher.asyncHttpForward(AsyncHttpDispatchWrapper asyncHttpDispatchWrapper, ServletResponse servletResponse)", "testcase": false, "constructor": false}, {"identifier": "asyncNonHttpForward", "parameters": "(AsyncNonHttpDispatchWrapper asyncNonHttpDispatchWrapper, ServletResponse servletResponse)", "modifiers": "private", "return": "void", "signature": "void asyncNonHttpForward(AsyncNonHttpDispatchWrapper asyncNonHttpDispatchWrapper, ServletResponse servletResponse)", "full_signature": "private void asyncNonHttpForward(AsyncNonHttpDispatchWrapper asyncNonHttpDispatchWrapper, ServletResponse servletResponse)", "class_method_signature": "DefaultServletRequestDispatcher.asyncNonHttpForward(AsyncNonHttpDispatchWrapper asyncNonHttpDispatchWrapper, ServletResponse servletResponse)", "testcase": false, "constructor": false}, {"identifier": "invokeTargetAsyncServlet", "parameters": "(AsyncHttpDispatchWrapper asyncHttpDispatchWrapper, ServletResponse servletResponse)", "modifiers": "private", "return": "void", "signature": "void invokeTargetAsyncServlet(AsyncHttpDispatchWrapper asyncHttpDispatchWrapper, ServletResponse servletResponse)", "full_signature": "private void invokeTargetAsyncServlet(AsyncHttpDispatchWrapper asyncHttpDispatchWrapper, ServletResponse servletResponse)", "class_method_signature": "DefaultServletRequestDispatcher.invokeTargetAsyncServlet(AsyncHttpDispatchWrapper asyncHttpDispatchWrapper, ServletResponse servletResponse)", "testcase": false, "constructor": false}, {"identifier": "invokeTargetAsyncServlet", "parameters": "(HttpServletRequest invokeServletRequest, AsyncHttpDispatchWrapper asyncHttpDispatchWrapper, ServletResponse servletResponse)", "modifiers": "private", "return": "void", "signature": "void invokeTargetAsyncServlet(HttpServletRequest invokeServletRequest, AsyncHttpDispatchWrapper asyncHttpDispatchWrapper, ServletResponse servletResponse)", "full_signature": "private void invokeTargetAsyncServlet(HttpServletRequest invokeServletRequest, AsyncHttpDispatchWrapper asyncHttpDispatchWrapper, ServletResponse servletResponse)", "class_method_signature": "DefaultServletRequestDispatcher.invokeTargetAsyncServlet(HttpServletRequest invokeServletRequest, AsyncHttpDispatchWrapper asyncHttpDispatchWrapper, ServletResponse servletResponse)", "testcase": false, "constructor": false}, {"identifier": "invokeTargetAsyncServlet", "parameters": "(ServletRequest invokeServletRequest, HttpServletRequest previousPathRequest, AsyncHttpDispatchWrapper asyncHttpDispatchWrapper, ServletResponse servletResponse)", "modifiers": "private", "return": "void", "signature": "void invokeTargetAsyncServlet(ServletRequest invokeServletRequest, HttpServletRequest previousPathRequest, AsyncHttpDispatchWrapper asyncHttpDispatchWrapper, ServletResponse servletResponse)", "full_signature": "private void invokeTargetAsyncServlet(ServletRequest invokeServletRequest, HttpServletRequest previousPathRequest, AsyncHttpDispatchWrapper asyncHttpDispatchWrapper, ServletResponse servletResponse)", "class_method_signature": "DefaultServletRequestDispatcher.invokeTargetAsyncServlet(ServletRequest invokeServletRequest, HttpServletRequest previousPathRequest, AsyncHttpDispatchWrapper asyncHttpDispatchWrapper, ServletResponse servletResponse)", "testcase": false, "constructor": false}, {"identifier": "setAsyncAttributes", "parameters": "(HttpServletRequest asyncStartRequest, AsyncHttpDispatchWrapper asyncHttpDispatchWrapper)", "modifiers": "private", "return": "void", "signature": "void setAsyncAttributes(HttpServletRequest asyncStartRequest, AsyncHttpDispatchWrapper asyncHttpDispatchWrapper)", "full_signature": "private void setAsyncAttributes(HttpServletRequest asyncStartRequest, AsyncHttpDispatchWrapper asyncHttpDispatchWrapper)", "class_method_signature": "DefaultServletRequestDispatcher.setAsyncAttributes(HttpServletRequest asyncStartRequest, AsyncHttpDispatchWrapper asyncHttpDispatchWrapper)", "testcase": false, "constructor": false}, {"identifier": "setAsyncAttribute", "parameters": "(HttpServletRequest originalRequest, AsyncHttpDispatchWrapper asyncHttpDispatchWrapper, String dispatcherKey)", "modifiers": "private", "return": "void", "signature": "void setAsyncAttribute(HttpServletRequest originalRequest, AsyncHttpDispatchWrapper asyncHttpDispatchWrapper, String dispatcherKey)", "full_signature": "private void setAsyncAttribute(HttpServletRequest originalRequest, AsyncHttpDispatchWrapper asyncHttpDispatchWrapper, String dispatcherKey)", "class_method_signature": "DefaultServletRequestDispatcher.setAsyncAttribute(HttpServletRequest originalRequest, AsyncHttpDispatchWrapper asyncHttpDispatchWrapper, String dispatcherKey)", "testcase": false, "constructor": false}, {"identifier": "setRequestParameters", "parameters": "(String queryString, AsyncHttpDispatchWrapper asyncHttpDispatchWrapper)", "modifiers": "private", "return": "void", "signature": "void setRequestParameters(String queryString, AsyncHttpDispatchWrapper asyncHttpDispatchWrapper)", "full_signature": "private void setRequestParameters(String queryString, AsyncHttpDispatchWrapper asyncHttpDispatchWrapper)", "class_method_signature": "DefaultServletRequestDispatcher.setRequestParameters(String queryString, AsyncHttpDispatchWrapper asyncHttpDispatchWrapper)", "testcase": false, "constructor": false}, {"identifier": "getServletPath", "parameters": "(String path)", "modifiers": "private", "return": "String", "signature": "String getServletPath(String path)", "full_signature": "private String getServletPath(String path)", "class_method_signature": "DefaultServletRequestDispatcher.getServletPath(String path)", "testcase": false, "constructor": false}, {"identifier": "getQueryString", "parameters": "(String path)", "modifiers": "private", "return": "String", "signature": "String getQueryString(String path)", "full_signature": "private String getQueryString(String path)", "class_method_signature": "DefaultServletRequestDispatcher.getQueryString(String path)", "testcase": false, "constructor": false}, {"identifier": "findHttpServletRequestInChain", "parameters": "(ServletRequest request)", "modifiers": "private", "return": "HttpServletRequest", "signature": "HttpServletRequest findHttpServletRequestInChain(ServletRequest request)", "full_signature": "private HttpServletRequest findHttpServletRequestInChain(ServletRequest request)", "class_method_signature": "DefaultServletRequestDispatcher.findHttpServletRequestInChain(ServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "rethrow", "parameters": "(Throwable exception)", "modifiers": "private", "return": "void", "signature": "void rethrow(Throwable exception)", "full_signature": "private void rethrow(Throwable exception)", "class_method_signature": "DefaultServletRequestDispatcher.rethrow(Throwable exception)", "testcase": false, "constructor": false}], "file": "webapp/impl/src/main/java/cloud/piranha/webapp/impl/DefaultServletRequestDispatcher.java"}, "focal_method": {"identifier": "forward", "parameters": "(ServletRequest servletRequest, ServletResponse servletResponse)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void forward(ServletRequest servletRequest, ServletResponse servletResponse) throws ServletException, IOException {\n        if (servletRequest.getDispatcherType().equals(ASYNC)) {\n\n            // Asynchronous forward\n            asyncForward(servletRequest, servletResponse);\n            return;\n        }\n\n        // Regular (synchronous) forward\n        syncForward(servletRequest, servletResponse);\n    }", "signature": "void forward(ServletRequest servletRequest, ServletResponse servletResponse)", "full_signature": "@Override public void forward(ServletRequest servletRequest, ServletResponse servletResponse)", "class_method_signature": "DefaultServletRequestDispatcher.forward(ServletRequest servletRequest, ServletResponse servletResponse)", "testcase": false, "constructor": false, "invocations": ["equals", "getDispatcherType", "asyncForward", "syncForward"]}, "repository": {"repo_id": 114777829, "url": "https://github.com/piranhacloud/piranha", "stars": 27, "created": "12/19/2017 2:55:23 PM +00:00", "updates": "2020-01-27T11:57:41+00:00", "fork": "False", "license": "licensed"}}