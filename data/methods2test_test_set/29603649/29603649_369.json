{"test_class": {"identifier": "PropertyValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Properties properties;", "modifier": "private", "type": "Properties", "declarator": "properties", "var_name": "properties"}, {"original_string": "private PropertyHolder propertyHolder;", "modifier": "private", "type": "PropertyHolder", "declarator": "propertyHolder", "var_name": "propertyHolder"}, {"original_string": "@Mock\n    private SafeguardLimitValidator safeguardLimitValidator;", "modifier": "@Mock\n    private", "type": "SafeguardLimitValidator", "declarator": "safeguardLimitValidator", "var_name": "safeguardLimitValidator"}, {"original_string": "@InjectMocks\n    private PropertyValidator underTest;", "modifier": "@InjectMocks\n    private", "type": "PropertyValidator", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-engine/src/test/java/com/epam/wilma/engine/properties/validation/PropertyValidatorTest.java"}, "test_case": {"identifier": "testValidatePropertiesWhenNumberFormatExceptionShouldThrowException", "parameters": "()", "modifiers": "@Test(expectedExceptions = InvalidPropertyException.class) public", "return": "void", "body": "@Test(expectedExceptions = InvalidPropertyException.class)\n    public void testValidatePropertiesWhenNumberFormatExceptionShouldThrowException() {\n        //GIVEN\n        String validationExpression = \"#this >1\";\n        String propertyValue = \"bla\";\n        properties.put(\"proxy.port\", validationExpression);\n        propertyHolder.addProperty(\"proxy.port\", propertyValue);\n        //WHEN\n        underTest.validateProperties();\n        //THEN it should throw exception\n    }", "signature": "void testValidatePropertiesWhenNumberFormatExceptionShouldThrowException()", "full_signature": "@Test(expectedExceptions = InvalidPropertyException.class) public void testValidatePropertiesWhenNumberFormatExceptionShouldThrowException()", "class_method_signature": "PropertyValidatorTest.testValidatePropertiesWhenNumberFormatExceptionShouldThrowException()", "testcase": true, "constructor": false, "invocations": ["put", "addProperty", "validateProperties"]}, "focal_class": {"identifier": "PropertyValidator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Properties properties;", "modifier": "private", "type": "Properties", "declarator": "properties", "var_name": "properties"}, {"original_string": "@Autowired\n    private PropertyHolder propertyHolder;", "modifier": "@Autowired\n    private", "type": "PropertyHolder", "declarator": "propertyHolder", "var_name": "propertyHolder"}, {"original_string": "@Autowired\n    private SafeguardLimitValidator safeguardLimitValidator;", "modifier": "@Autowired\n    private", "type": "SafeguardLimitValidator", "declarator": "safeguardLimitValidator", "var_name": "safeguardLimitValidator"}], "methods": [{"identifier": "validateProperties", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void validateProperties()", "full_signature": "public void validateProperties()", "class_method_signature": "PropertyValidator.validateProperties()", "testcase": false, "constructor": false}, {"identifier": "setProperties", "parameters": "(final Properties properties)", "modifiers": "public", "return": "void", "signature": "void setProperties(final Properties properties)", "full_signature": "public void setProperties(final Properties properties)", "class_method_signature": "PropertyValidator.setProperties(final Properties properties)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void validate()", "full_signature": "private void validate()", "class_method_signature": "PropertyValidator.validate()", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-engine/src/main/java/com/epam/wilma/engine/properties/validation/PropertyValidator.java"}, "focal_method": {"identifier": "validateProperties", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void validateProperties() {\n        validate();\n        //special safeguard limit validation that could not be made with Ognl\n        safeguardLimitValidator.validate();\n\n    }", "signature": "void validateProperties()", "full_signature": "public void validateProperties()", "class_method_signature": "PropertyValidator.validateProperties()", "testcase": false, "constructor": false, "invocations": ["validate", "validate"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}