{"test_class": {"identifier": "StreamOutputEntityProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private StreamOutputEntityProvider streamOutputEntityProvider;", "modifier": "private", "type": "StreamOutputEntityProvider", "declarator": "streamOutputEntityProvider", "var_name": "streamOutputEntityProvider"}], "file": "everrest-core/src/test/java/org/everrest/core/impl/provider/StreamOutputEntityProviderTest.java"}, "test_case": {"identifier": "isWritableForStreamingOutput", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void isWritableForStreamingOutput() throws Exception {\n        assertTrue(streamOutputEntityProvider.isWriteable(StreamingOutput.class, null, null, null));\n    }", "signature": "void isWritableForStreamingOutput()", "full_signature": "@Test public void isWritableForStreamingOutput()", "class_method_signature": "StreamOutputEntityProviderTest.isWritableForStreamingOutput()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isWriteable"]}, "focal_class": {"identifier": "StreamOutputEntityProvider", "superclass": "", "interfaces": "implements EntityProvider<StreamingOutput>", "fields": [], "methods": [{"identifier": "isReadable", "parameters": "(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "full_signature": "@Override public boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "class_method_signature": "StreamOutputEntityProvider.isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "readFrom", "parameters": "(Class<StreamingOutput> type,\n                                    Type genericType,\n                                    Annotation[] annotations,\n                                    MediaType mediaType,\n                                    MultivaluedMap<String, String> httpHeaders,\n                                    InputStream entityStream)", "modifiers": "@Override public", "return": "StreamingOutput", "signature": "StreamingOutput readFrom(Class<StreamingOutput> type,\n                                    Type genericType,\n                                    Annotation[] annotations,\n                                    MediaType mediaType,\n                                    MultivaluedMap<String, String> httpHeaders,\n                                    InputStream entityStream)", "full_signature": "@Override public StreamingOutput readFrom(Class<StreamingOutput> type,\n                                    Type genericType,\n                                    Annotation[] annotations,\n                                    MediaType mediaType,\n                                    MultivaluedMap<String, String> httpHeaders,\n                                    InputStream entityStream)", "class_method_signature": "StreamOutputEntityProvider.readFrom(Class<StreamingOutput> type,\n                                    Type genericType,\n                                    Annotation[] annotations,\n                                    MediaType mediaType,\n                                    MultivaluedMap<String, String> httpHeaders,\n                                    InputStream entityStream)", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "(StreamingOutput streamingOutput, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "modifiers": "@Override public", "return": "long", "signature": "long getSize(StreamingOutput streamingOutput, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "full_signature": "@Override public long getSize(StreamingOutput streamingOutput, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "class_method_signature": "StreamOutputEntityProvider.getSize(StreamingOutput streamingOutput, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "isWriteable", "parameters": "(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "full_signature": "@Override public boolean isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "class_method_signature": "StreamOutputEntityProvider.isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "writeTo", "parameters": "(StreamingOutput streamingOutput,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "modifiers": "@Override public", "return": "void", "signature": "void writeTo(StreamingOutput streamingOutput,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "full_signature": "@Override public void writeTo(StreamingOutput streamingOutput,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "class_method_signature": "StreamOutputEntityProvider.writeTo(StreamingOutput streamingOutput,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/impl/provider/StreamOutputEntityProvider.java"}, "focal_method": {"identifier": "isWriteable", "parameters": "(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType) {\n        return StreamingOutput.class.isAssignableFrom(type);\n    }", "signature": "boolean isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "full_signature": "@Override public boolean isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "class_method_signature": "StreamOutputEntityProvider.isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "testcase": false, "constructor": false, "invocations": ["isAssignableFrom"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}