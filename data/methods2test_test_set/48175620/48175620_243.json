{"test_class": {"identifier": "ResultTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@SuppressWarnings(\"ThrowableInstanceNeverThrown\")\n  private static final Throwable THROWABLE = new Throwable();", "modifier": "@SuppressWarnings(\"ThrowableInstanceNeverThrown\")\n  private static final", "type": "Throwable", "declarator": "THROWABLE = new Throwable()", "var_name": "THROWABLE"}, {"original_string": "private static final int VALUE = 42;", "modifier": "private static final", "type": "int", "declarator": "VALUE = 42", "var_name": "VALUE"}, {"original_string": "private static final String STRING_VALUE = \"stringvalue\";", "modifier": "private static final", "type": "String", "declarator": "STRING_VALUE = \"stringvalue\"", "var_name": "STRING_VALUE"}, {"original_string": "private static final int OTHER_VALUE = 1;", "modifier": "private static final", "type": "int", "declarator": "OTHER_VALUE = 1", "var_name": "OTHER_VALUE"}, {"original_string": "private static final float FLOAT_VALUE = 2;", "modifier": "private static final", "type": "float", "declarator": "FLOAT_VALUE = 2", "var_name": "FLOAT_VALUE"}, {"original_string": "private static final Result<Integer> SUCCESS_WITH_VALUE = success(VALUE);", "modifier": "private static final", "type": "Result<Integer>", "declarator": "SUCCESS_WITH_VALUE = success(VALUE)", "var_name": "SUCCESS_WITH_VALUE"}, {"original_string": "private static final Result<Integer> SUCCESS_WITH_OTHER_VALUE = success(OTHER_VALUE);", "modifier": "private static final", "type": "Result<Integer>", "declarator": "SUCCESS_WITH_OTHER_VALUE = success(OTHER_VALUE)", "var_name": "SUCCESS_WITH_OTHER_VALUE"}, {"original_string": "private static final Result<Float> SUCCESS_WITH_FLOAT_VALUE = success(FLOAT_VALUE);", "modifier": "private static final", "type": "Result<Float>", "declarator": "SUCCESS_WITH_FLOAT_VALUE = success(FLOAT_VALUE)", "var_name": "SUCCESS_WITH_FLOAT_VALUE"}, {"original_string": "private static final Result<Integer> FAILURE_WITH_THROWABLE = failure(THROWABLE);", "modifier": "private static final", "type": "Result<Integer>", "declarator": "FAILURE_WITH_THROWABLE = failure(THROWABLE)", "var_name": "FAILURE_WITH_THROWABLE"}, {"original_string": "private static final Result<Integer> FAILURE = failure();", "modifier": "private static final", "type": "Result<Integer>", "declarator": "FAILURE = failure()", "var_name": "FAILURE"}, {"original_string": "private static final Result<Integer> PRESENT_WITH_VALUE = present(VALUE);", "modifier": "private static final", "type": "Result<Integer>", "declarator": "PRESENT_WITH_VALUE = present(VALUE)", "var_name": "PRESENT_WITH_VALUE"}, {"original_string": "private static final Result<Integer> ABSENT = absent();", "modifier": "private static final", "type": "Result<Integer>", "declarator": "ABSENT = absent()", "var_name": "ABSENT"}, {"original_string": "@Mock\n  private Function<Integer, Result<Integer>> mockSucceededValueFunction;", "modifier": "@Mock\n  private", "type": "Function<Integer, Result<Integer>>", "declarator": "mockSucceededValueFunction", "var_name": "mockSucceededValueFunction"}, {"original_string": "@Mock\n  private Function<Integer, Result<Integer>> mockFailedFunction;", "modifier": "@Mock\n  private", "type": "Function<Integer, Result<Integer>>", "declarator": "mockFailedFunction", "var_name": "mockFailedFunction"}, {"original_string": "@Mock\n  private Function<Integer, Integer> mockValueFunction;", "modifier": "@Mock\n  private", "type": "Function<Integer, Integer>", "declarator": "mockValueFunction", "var_name": "mockValueFunction"}, {"original_string": "@Mock\n  private Function<Throwable, Integer> mockRecoverValueFunction;", "modifier": "@Mock\n  private", "type": "Function<Throwable, Integer>", "declarator": "mockRecoverValueFunction", "var_name": "mockRecoverValueFunction"}, {"original_string": "@Mock\n  private Function<Throwable, Result<Integer>> mockAttemptRecoverValueFunction;", "modifier": "@Mock\n  private", "type": "Function<Throwable, Result<Integer>>", "declarator": "mockAttemptRecoverValueFunction", "var_name": "mockAttemptRecoverValueFunction"}, {"original_string": "@Mock\n  private Binder<Integer, String> mockBinder;", "modifier": "@Mock\n  private", "type": "Binder<Integer, String>", "declarator": "mockBinder", "var_name": "mockBinder"}, {"original_string": "@Mock\n  private Merger<Integer, String, Float> mockMerger;", "modifier": "@Mock\n  private", "type": "Merger<Integer, String, Float>", "declarator": "mockMerger", "var_name": "mockMerger"}, {"original_string": "@Mock\n  private Merger<Integer, String, Result<Float>> mockAttemptMerger;", "modifier": "@Mock\n  private", "type": "Merger<Integer, String, Result<Float>>", "declarator": "mockAttemptMerger", "var_name": "mockAttemptMerger"}, {"original_string": "@Mock\n  private Supplier<String> mockSupplier;", "modifier": "@Mock\n  private", "type": "Supplier<String>", "declarator": "mockSupplier", "var_name": "mockSupplier"}, {"original_string": "@Mock\n  private Receiver<Integer> mockReceiver;", "modifier": "@Mock\n  private", "type": "Receiver<Integer>", "declarator": "mockReceiver", "var_name": "mockReceiver"}, {"original_string": "@Mock\n  private Receiver<Throwable> mockThrowableReceiver;", "modifier": "@Mock\n  private", "type": "Receiver<Throwable>", "declarator": "mockThrowableReceiver", "var_name": "mockThrowableReceiver"}, {"original_string": "@Mock\n  private Binder<Throwable, String> mockThrowableStringBinder;", "modifier": "@Mock\n  private", "type": "Binder<Throwable, String>", "declarator": "mockThrowableStringBinder", "var_name": "mockThrowableStringBinder"}, {"original_string": "@Mock\n  private Supplier<Integer> mockOtherValueSupplier;", "modifier": "@Mock\n  private", "type": "Supplier<Integer>", "declarator": "mockOtherValueSupplier", "var_name": "mockOtherValueSupplier"}, {"original_string": "@Mock\n  private Supplier<Result<Integer>> mockOtherValueSuccessfulAttemptSupplier;", "modifier": "@Mock\n  private", "type": "Supplier<Result<Integer>>", "declarator": "mockOtherValueSuccessfulAttemptSupplier", "var_name": "mockOtherValueSuccessfulAttemptSupplier"}, {"original_string": "@Mock\n  private Supplier<Result<Integer>> mockOtherValueFailingAttemptSupplier;", "modifier": "@Mock\n  private", "type": "Supplier<Result<Integer>>", "declarator": "mockOtherValueFailingAttemptSupplier", "var_name": "mockOtherValueFailingAttemptSupplier"}], "file": "agera/src/test/java/com/google/android/agera/ResultTest.java"}, "test_case": {"identifier": "shouldReturnFalseForContainsOfFailure", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldReturnFalseForContainsOfFailure() {\n    assertThat(ABSENT.contains(VALUE), is(false));\n  }", "signature": "void shouldReturnFalseForContainsOfFailure()", "full_signature": "@Test public void shouldReturnFalseForContainsOfFailure()", "class_method_signature": "ResultTest.shouldReturnFalseForContainsOfFailure()", "testcase": true, "constructor": false, "invocations": ["assertThat", "contains", "is"]}, "focal_class": {"identifier": "Result", "superclass": "", "interfaces": "", "fields": [{"original_string": "@NonNull\n  private static final Result<Object> ABSENT;", "modifier": "@NonNull\n  private static final", "type": "Result<Object>", "declarator": "ABSENT", "var_name": "ABSENT"}, {"original_string": "@NonNull\n  private static final Result<Object> FAILURE;", "modifier": "@NonNull\n  private static final", "type": "Result<Object>", "declarator": "FAILURE", "var_name": "FAILURE"}, {"original_string": "@NonNull\n  private static final Throwable ABSENT_THROWABLE;", "modifier": "@NonNull\n  private static final", "type": "Throwable", "declarator": "ABSENT_THROWABLE", "var_name": "ABSENT_THROWABLE"}, {"original_string": "@Nullable\n  private final T value;", "modifier": "@Nullable\n  private final", "type": "T", "declarator": "value", "var_name": "value"}, {"original_string": "@Nullable\n  private transient volatile List<T> list;", "modifier": "@Nullable\n  private transient volatile", "type": "List<T>", "declarator": "list", "var_name": "list"}, {"original_string": "@Nullable\n  private final Throwable failure;", "modifier": "@Nullable\n  private final", "type": "Throwable", "declarator": "failure", "var_name": "failure"}], "methods": [{"identifier": "Result", "parameters": "(@Nullable final T value, @Nullable final Throwable failure)", "modifiers": "", "return": "", "signature": " Result(@Nullable final T value, @Nullable final Throwable failure)", "full_signature": "  Result(@Nullable final T value, @Nullable final Throwable failure)", "class_method_signature": "Result.Result(@Nullable final T value, @Nullable final Throwable failure)", "testcase": false, "constructor": true}, {"identifier": "success", "parameters": "(@NonNull final T value)", "modifiers": "@NonNull public static", "return": "Result<T>", "signature": "Result<T> success(@NonNull final T value)", "full_signature": "@NonNull public static Result<T> success(@NonNull final T value)", "class_method_signature": "Result.success(@NonNull final T value)", "testcase": false, "constructor": false}, {"identifier": "failure", "parameters": "(@NonNull final Throwable failure)", "modifiers": "@NonNull public static", "return": "Result<T>", "signature": "Result<T> failure(@NonNull final Throwable failure)", "full_signature": "@NonNull public static Result<T> failure(@NonNull final Throwable failure)", "class_method_signature": "Result.failure(@NonNull final Throwable failure)", "testcase": false, "constructor": false}, {"identifier": "failure", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @NonNull public static", "return": "Result<T>", "signature": "Result<T> failure()", "full_signature": "@SuppressWarnings(\"unchecked\") @NonNull public static Result<T> failure()", "class_method_signature": "Result.failure()", "testcase": false, "constructor": false}, {"identifier": "present", "parameters": "(@NonNull final T value)", "modifiers": "@NonNull public static", "return": "Result<T>", "signature": "Result<T> present(@NonNull final T value)", "full_signature": "@NonNull public static Result<T> present(@NonNull final T value)", "class_method_signature": "Result.present(@NonNull final T value)", "testcase": false, "constructor": false}, {"identifier": "absent", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @NonNull public static", "return": "Result<T>", "signature": "Result<T> absent()", "full_signature": "@SuppressWarnings(\"unchecked\") @NonNull public static Result<T> absent()", "class_method_signature": "Result.absent()", "testcase": false, "constructor": false}, {"identifier": "absentIfNull", "parameters": "(@Nullable final T value)", "modifiers": "@NonNull public static", "return": "Result<T>", "signature": "Result<T> absentIfNull(@Nullable final T value)", "full_signature": "@NonNull public static Result<T> absentIfNull(@Nullable final T value)", "class_method_signature": "Result.absentIfNull(@Nullable final T value)", "testcase": false, "constructor": false}, {"identifier": "succeeded", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean succeeded()", "full_signature": "public boolean succeeded()", "class_method_signature": "Result.succeeded()", "testcase": false, "constructor": false}, {"identifier": "failed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean failed()", "full_signature": "public boolean failed()", "class_method_signature": "Result.failed()", "testcase": false, "constructor": false}, {"identifier": "isPresent", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPresent()", "full_signature": "public boolean isPresent()", "class_method_signature": "Result.isPresent()", "testcase": false, "constructor": false}, {"identifier": "isAbsent", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAbsent()", "full_signature": "public boolean isAbsent()", "class_method_signature": "Result.isAbsent()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "()", "modifiers": "@NonNull public", "return": "T", "signature": "T get()", "full_signature": "@NonNull public T get()", "class_method_signature": "Result.get()", "testcase": false, "constructor": false}, {"identifier": "asList", "parameters": "()", "modifiers": "@NonNull public", "return": "List<T>", "signature": "List<T> asList()", "full_signature": "@NonNull public List<T> asList()", "class_method_signature": "Result.asList()", "testcase": false, "constructor": false}, {"identifier": "getFailure", "parameters": "()", "modifiers": "@NonNull public", "return": "Throwable", "signature": "Throwable getFailure()", "full_signature": "@NonNull public Throwable getFailure()", "class_method_signature": "Result.getFailure()", "testcase": false, "constructor": false}, {"identifier": "orNull", "parameters": "()", "modifiers": "@Nullable public", "return": "T", "signature": "T orNull()", "full_signature": "@Nullable public T orNull()", "class_method_signature": "Result.orNull()", "testcase": false, "constructor": false}, {"identifier": "failureOrNull", "parameters": "()", "modifiers": "@Nullable public", "return": "Throwable", "signature": "Throwable failureOrNull()", "full_signature": "@Nullable public Throwable failureOrNull()", "class_method_signature": "Result.failureOrNull()", "testcase": false, "constructor": false}, {"identifier": "ifSucceededSendTo", "parameters": "(@NonNull final Receiver<? super T> receiver)", "modifiers": "@NonNull public", "return": "Result<T>", "signature": "Result<T> ifSucceededSendTo(@NonNull final Receiver<? super T> receiver)", "full_signature": "@NonNull public Result<T> ifSucceededSendTo(@NonNull final Receiver<? super T> receiver)", "class_method_signature": "Result.ifSucceededSendTo(@NonNull final Receiver<? super T> receiver)", "testcase": false, "constructor": false}, {"identifier": "ifFailedSendTo", "parameters": "(@NonNull final Receiver<? super Throwable> receiver)", "modifiers": "@NonNull public", "return": "Result<T>", "signature": "Result<T> ifFailedSendTo(@NonNull final Receiver<? super Throwable> receiver)", "full_signature": "@NonNull public Result<T> ifFailedSendTo(@NonNull final Receiver<? super Throwable> receiver)", "class_method_signature": "Result.ifFailedSendTo(@NonNull final Receiver<? super Throwable> receiver)", "testcase": false, "constructor": false}, {"identifier": "ifAbsentFailureSendTo", "parameters": "(@NonNull final Receiver<? super Throwable> receiver)", "modifiers": "@NonNull public", "return": "Result<T>", "signature": "Result<T> ifAbsentFailureSendTo(@NonNull final Receiver<? super Throwable> receiver)", "full_signature": "@NonNull public Result<T> ifAbsentFailureSendTo(@NonNull final Receiver<? super Throwable> receiver)", "class_method_signature": "Result.ifAbsentFailureSendTo(@NonNull final Receiver<? super Throwable> receiver)", "testcase": false, "constructor": false}, {"identifier": "ifNonAbsentFailureSendTo", "parameters": "(@NonNull final Receiver<? super Throwable> receiver)", "modifiers": "@NonNull public", "return": "Result<T>", "signature": "Result<T> ifNonAbsentFailureSendTo(@NonNull final Receiver<? super Throwable> receiver)", "full_signature": "@NonNull public Result<T> ifNonAbsentFailureSendTo(@NonNull final Receiver<? super Throwable> receiver)", "class_method_signature": "Result.ifNonAbsentFailureSendTo(@NonNull final Receiver<? super Throwable> receiver)", "testcase": false, "constructor": false}, {"identifier": "ifSucceededBind", "parameters": "(@NonNull final U bindValue,\n      @NonNull final Binder<? super T, ? super U> binder)", "modifiers": "@NonNull public", "return": "Result<T>", "signature": "Result<T> ifSucceededBind(@NonNull final U bindValue,\n      @NonNull final Binder<? super T, ? super U> binder)", "full_signature": "@NonNull public Result<T> ifSucceededBind(@NonNull final U bindValue,\n      @NonNull final Binder<? super T, ? super U> binder)", "class_method_signature": "Result.ifSucceededBind(@NonNull final U bindValue,\n      @NonNull final Binder<? super T, ? super U> binder)", "testcase": false, "constructor": false}, {"identifier": "ifFailedBind", "parameters": "(@NonNull final U bindValue,\n      @NonNull final Binder<Throwable, ? super U> binder)", "modifiers": "@NonNull public", "return": "Result<T>", "signature": "Result<T> ifFailedBind(@NonNull final U bindValue,\n      @NonNull final Binder<Throwable, ? super U> binder)", "full_signature": "@NonNull public Result<T> ifFailedBind(@NonNull final U bindValue,\n      @NonNull final Binder<Throwable, ? super U> binder)", "class_method_signature": "Result.ifFailedBind(@NonNull final U bindValue,\n      @NonNull final Binder<Throwable, ? super U> binder)", "testcase": false, "constructor": false}, {"identifier": "ifAbsentFailureBind", "parameters": "(@NonNull final U bindValue,\n      @NonNull final Binder<Throwable, ? super U> binder)", "modifiers": "@NonNull public", "return": "Result<T>", "signature": "Result<T> ifAbsentFailureBind(@NonNull final U bindValue,\n      @NonNull final Binder<Throwable, ? super U> binder)", "full_signature": "@NonNull public Result<T> ifAbsentFailureBind(@NonNull final U bindValue,\n      @NonNull final Binder<Throwable, ? super U> binder)", "class_method_signature": "Result.ifAbsentFailureBind(@NonNull final U bindValue,\n      @NonNull final Binder<Throwable, ? super U> binder)", "testcase": false, "constructor": false}, {"identifier": "ifNonAbsentFailureBind", "parameters": "(@NonNull final U bindValue,\n      @NonNull final Binder<Throwable, ? super U> binder)", "modifiers": "@NonNull public", "return": "Result<T>", "signature": "Result<T> ifNonAbsentFailureBind(@NonNull final U bindValue,\n      @NonNull final Binder<Throwable, ? super U> binder)", "full_signature": "@NonNull public Result<T> ifNonAbsentFailureBind(@NonNull final U bindValue,\n      @NonNull final Binder<Throwable, ? super U> binder)", "class_method_signature": "Result.ifNonAbsentFailureBind(@NonNull final U bindValue,\n      @NonNull final Binder<Throwable, ? super U> binder)", "testcase": false, "constructor": false}, {"identifier": "ifSucceededBindFrom", "parameters": "(@NonNull final Supplier<U> supplier,\n      @NonNull final Binder<? super T, ? super U> binder)", "modifiers": "@NonNull public", "return": "Result<T>", "signature": "Result<T> ifSucceededBindFrom(@NonNull final Supplier<U> supplier,\n      @NonNull final Binder<? super T, ? super U> binder)", "full_signature": "@NonNull public Result<T> ifSucceededBindFrom(@NonNull final Supplier<U> supplier,\n      @NonNull final Binder<? super T, ? super U> binder)", "class_method_signature": "Result.ifSucceededBindFrom(@NonNull final Supplier<U> supplier,\n      @NonNull final Binder<? super T, ? super U> binder)", "testcase": false, "constructor": false}, {"identifier": "ifFailedBindFrom", "parameters": "(@NonNull final Supplier<U> supplier,\n      @NonNull final Binder<Throwable, ? super U> binder)", "modifiers": "@NonNull public", "return": "Result<T>", "signature": "Result<T> ifFailedBindFrom(@NonNull final Supplier<U> supplier,\n      @NonNull final Binder<Throwable, ? super U> binder)", "full_signature": "@NonNull public Result<T> ifFailedBindFrom(@NonNull final Supplier<U> supplier,\n      @NonNull final Binder<Throwable, ? super U> binder)", "class_method_signature": "Result.ifFailedBindFrom(@NonNull final Supplier<U> supplier,\n      @NonNull final Binder<Throwable, ? super U> binder)", "testcase": false, "constructor": false}, {"identifier": "ifAbsentFailureBindFrom", "parameters": "(@NonNull final Supplier<U> supplier,\n      @NonNull final Binder<Throwable, ? super U> binder)", "modifiers": "@NonNull public", "return": "Result<T>", "signature": "Result<T> ifAbsentFailureBindFrom(@NonNull final Supplier<U> supplier,\n      @NonNull final Binder<Throwable, ? super U> binder)", "full_signature": "@NonNull public Result<T> ifAbsentFailureBindFrom(@NonNull final Supplier<U> supplier,\n      @NonNull final Binder<Throwable, ? super U> binder)", "class_method_signature": "Result.ifAbsentFailureBindFrom(@NonNull final Supplier<U> supplier,\n      @NonNull final Binder<Throwable, ? super U> binder)", "testcase": false, "constructor": false}, {"identifier": "ifNonAbsentFailureBindFrom", "parameters": "(@NonNull final Supplier<U> supplier,\n      @NonNull final Binder<Throwable, ? super U> binder)", "modifiers": "@NonNull public", "return": "Result<T>", "signature": "Result<T> ifNonAbsentFailureBindFrom(@NonNull final Supplier<U> supplier,\n      @NonNull final Binder<Throwable, ? super U> binder)", "full_signature": "@NonNull public Result<T> ifNonAbsentFailureBindFrom(@NonNull final Supplier<U> supplier,\n      @NonNull final Binder<Throwable, ? super U> binder)", "class_method_signature": "Result.ifNonAbsentFailureBindFrom(@NonNull final Supplier<U> supplier,\n      @NonNull final Binder<Throwable, ? super U> binder)", "testcase": false, "constructor": false}, {"identifier": "sameFailure", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @NonNull public", "return": "Result<U>", "signature": "Result<U> sameFailure()", "full_signature": "@SuppressWarnings(\"unchecked\") @NonNull public Result<U> sameFailure()", "class_method_signature": "Result.sameFailure()", "testcase": false, "constructor": false}, {"identifier": "ifSucceededMap", "parameters": "(@NonNull final Function<? super T, U> function)", "modifiers": "@NonNull public", "return": "Result<U>", "signature": "Result<U> ifSucceededMap(@NonNull final Function<? super T, U> function)", "full_signature": "@NonNull public Result<U> ifSucceededMap(@NonNull final Function<? super T, U> function)", "class_method_signature": "Result.ifSucceededMap(@NonNull final Function<? super T, U> function)", "testcase": false, "constructor": false}, {"identifier": "ifSucceededAttemptMap", "parameters": "(\n      @NonNull final Function<? super T, Result<U>> attemptFunction)", "modifiers": "@NonNull public", "return": "Result<U>", "signature": "Result<U> ifSucceededAttemptMap(\n      @NonNull final Function<? super T, Result<U>> attemptFunction)", "full_signature": "@NonNull public Result<U> ifSucceededAttemptMap(\n      @NonNull final Function<? super T, Result<U>> attemptFunction)", "class_method_signature": "Result.ifSucceededAttemptMap(\n      @NonNull final Function<? super T, Result<U>> attemptFunction)", "testcase": false, "constructor": false}, {"identifier": "ifSucceededMerge", "parameters": "(@NonNull final U mergeValue,\n      @NonNull final Merger<? super T, ? super U, V> merger)", "modifiers": "@NonNull public", "return": "Result<V>", "signature": "Result<V> ifSucceededMerge(@NonNull final U mergeValue,\n      @NonNull final Merger<? super T, ? super U, V> merger)", "full_signature": "@NonNull public Result<V> ifSucceededMerge(@NonNull final U mergeValue,\n      @NonNull final Merger<? super T, ? super U, V> merger)", "class_method_signature": "Result.ifSucceededMerge(@NonNull final U mergeValue,\n      @NonNull final Merger<? super T, ? super U, V> merger)", "testcase": false, "constructor": false}, {"identifier": "ifSucceededAttemptMerge", "parameters": "(@NonNull final U mergeValue,\n      @NonNull final Merger<? super T, ? super U, Result<V>> attemptMerger)", "modifiers": "@NonNull public", "return": "Result<V>", "signature": "Result<V> ifSucceededAttemptMerge(@NonNull final U mergeValue,\n      @NonNull final Merger<? super T, ? super U, Result<V>> attemptMerger)", "full_signature": "@NonNull public Result<V> ifSucceededAttemptMerge(@NonNull final U mergeValue,\n      @NonNull final Merger<? super T, ? super U, Result<V>> attemptMerger)", "class_method_signature": "Result.ifSucceededAttemptMerge(@NonNull final U mergeValue,\n      @NonNull final Merger<? super T, ? super U, Result<V>> attemptMerger)", "testcase": false, "constructor": false}, {"identifier": "ifSucceededMergeFrom", "parameters": "(@NonNull final Supplier<U> mergeValueSupplier,\n      @NonNull final Merger<? super T, ? super U, V> merger)", "modifiers": "@NonNull public", "return": "Result<V>", "signature": "Result<V> ifSucceededMergeFrom(@NonNull final Supplier<U> mergeValueSupplier,\n      @NonNull final Merger<? super T, ? super U, V> merger)", "full_signature": "@NonNull public Result<V> ifSucceededMergeFrom(@NonNull final Supplier<U> mergeValueSupplier,\n      @NonNull final Merger<? super T, ? super U, V> merger)", "class_method_signature": "Result.ifSucceededMergeFrom(@NonNull final Supplier<U> mergeValueSupplier,\n      @NonNull final Merger<? super T, ? super U, V> merger)", "testcase": false, "constructor": false}, {"identifier": "ifSucceededAttemptMergeFrom", "parameters": "(\n      @NonNull final Supplier<U> mergeValueSupplier,\n      @NonNull final Merger<? super T, ? super U, Result<V>> attemptMerger)", "modifiers": "@NonNull public", "return": "Result<V>", "signature": "Result<V> ifSucceededAttemptMergeFrom(\n      @NonNull final Supplier<U> mergeValueSupplier,\n      @NonNull final Merger<? super T, ? super U, Result<V>> attemptMerger)", "full_signature": "@NonNull public Result<V> ifSucceededAttemptMergeFrom(\n      @NonNull final Supplier<U> mergeValueSupplier,\n      @NonNull final Merger<? super T, ? super U, Result<V>> attemptMerger)", "class_method_signature": "Result.ifSucceededAttemptMergeFrom(\n      @NonNull final Supplier<U> mergeValueSupplier,\n      @NonNull final Merger<? super T, ? super U, Result<V>> attemptMerger)", "testcase": false, "constructor": false}, {"identifier": "orElse", "parameters": "(@NonNull final T other)", "modifiers": "@NonNull public", "return": "T", "signature": "T orElse(@NonNull final T other)", "full_signature": "@NonNull public T orElse(@NonNull final T other)", "class_method_signature": "Result.orElse(@NonNull final T other)", "testcase": false, "constructor": false}, {"identifier": "orGetFrom", "parameters": "(@NonNull final Supplier<? extends T> supplier)", "modifiers": "@NonNull public", "return": "T", "signature": "T orGetFrom(@NonNull final Supplier<? extends T> supplier)", "full_signature": "@NonNull public T orGetFrom(@NonNull final Supplier<? extends T> supplier)", "class_method_signature": "Result.orGetFrom(@NonNull final Supplier<? extends T> supplier)", "testcase": false, "constructor": false}, {"identifier": "orAttemptGetFrom", "parameters": "(\n      @NonNull final Supplier<? extends Result<? extends T>> supplier)", "modifiers": "@SuppressWarnings(\"unchecked\") @NonNull public", "return": "Result<T>", "signature": "Result<T> orAttemptGetFrom(\n      @NonNull final Supplier<? extends Result<? extends T>> supplier)", "full_signature": "@SuppressWarnings(\"unchecked\") @NonNull public Result<T> orAttemptGetFrom(\n      @NonNull final Supplier<? extends Result<? extends T>> supplier)", "class_method_signature": "Result.orAttemptGetFrom(\n      @NonNull final Supplier<? extends Result<? extends T>> supplier)", "testcase": false, "constructor": false}, {"identifier": "recover", "parameters": "(@NonNull final Function<? super Throwable, ? extends T> recoverFunction)", "modifiers": "@SuppressWarnings(\"ConstantConditions\") @NonNull public", "return": "T", "signature": "T recover(@NonNull final Function<? super Throwable, ? extends T> recoverFunction)", "full_signature": "@SuppressWarnings(\"ConstantConditions\") @NonNull public T recover(@NonNull final Function<? super Throwable, ? extends T> recoverFunction)", "class_method_signature": "Result.recover(@NonNull final Function<? super Throwable, ? extends T> recoverFunction)", "testcase": false, "constructor": false}, {"identifier": "attemptRecover", "parameters": "(\n      @NonNull final Function<? super Throwable, ? extends Result<? extends T>>\n          attemptRecoverFunction)", "modifiers": "@SuppressWarnings({\"ConstantConditions\", \"unchecked\"}) @NonNull public", "return": "Result<T>", "signature": "Result<T> attemptRecover(\n      @NonNull final Function<? super Throwable, ? extends Result<? extends T>>\n          attemptRecoverFunction)", "full_signature": "@SuppressWarnings({\"ConstantConditions\", \"unchecked\"}) @NonNull public Result<T> attemptRecover(\n      @NonNull final Function<? super Throwable, ? extends Result<? extends T>>\n          attemptRecoverFunction)", "class_method_signature": "Result.attemptRecover(\n      @NonNull final Function<? super Throwable, ? extends Result<? extends T>>\n          attemptRecoverFunction)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(@NonNull final T value)", "modifiers": "public", "return": "boolean", "signature": "boolean contains(@NonNull final T value)", "full_signature": "public boolean contains(@NonNull final T value)", "class_method_signature": "Result.contains(@NonNull final T value)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "Result.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Result.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Result.toString()", "testcase": false, "constructor": false}], "file": "agera/src/main/java/com/google/android/agera/Result.java"}, "focal_method": {"identifier": "contains", "parameters": "(@NonNull final T value)", "modifiers": "public", "return": "boolean", "body": "public boolean contains(@NonNull final T value) {\n    return this.value != null && this.value.equals(value);\n  }", "signature": "boolean contains(@NonNull final T value)", "full_signature": "public boolean contains(@NonNull final T value)", "class_method_signature": "Result.contains(@NonNull final T value)", "testcase": false, "constructor": false, "invocations": ["equals"]}, "repository": {"repo_id": 48175620, "url": "https://github.com/google/agera", "language": "Java", "is_fork": false, "fork_count": 669, "stargazer_count": 7333, "size": 968, "license": "licensed"}}