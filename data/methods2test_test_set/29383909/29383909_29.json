{"test_class": {"identifier": "DagTest", "superclass": "", "interfaces": "", "fields": [], "file": "karamel-core/src/test/java/se/kth/karamel/backend/dag/DagTest.java"}, "test_case": {"identifier": "testPrint", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testPrint() throws DagConstructionException {\n    Dag dag = new Dag();\n    dag.addNode(\"task1\");\n    dag.addDependency(\"task2\", \"task21\");\n    dag.addDependency(\"task3\", \"task31\");\n    dag.addDependency(\"task31\", \"task32\");\n    dag.addDependency(\"task32\", \"task33\");\n    dag.addDependency(\"task21\", \"task31\");\n    System.out.println(dag.print());\n  }", "signature": "void testPrint()", "full_signature": "@Test public void testPrint()", "class_method_signature": "DagTest.testPrint()", "testcase": true, "constructor": false, "invocations": ["addNode", "addDependency", "addDependency", "addDependency", "addDependency", "addDependency", "println", "print"]}, "focal_class": {"identifier": "Dag", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(Dag.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(Dag.class)", "var_name": "logger"}, {"original_string": "private final Map<String, DagNode> allNodes = new HashMap<>();", "modifier": "private final", "type": "Map<String, DagNode>", "declarator": "allNodes = new HashMap<>()", "var_name": "allNodes"}], "methods": [{"identifier": "addNode", "parameters": "(String nodeId)", "modifiers": "public", "return": "void", "signature": "void addNode(String nodeId)", "full_signature": "public void addNode(String nodeId)", "class_method_signature": "Dag.addNode(String nodeId)", "testcase": false, "constructor": false}, {"identifier": "removeNode", "parameters": "(DagNode parent)", "modifiers": "public", "return": "void", "signature": "void removeNode(DagNode parent)", "full_signature": "public void removeNode(DagNode parent)", "class_method_signature": "Dag.removeNode(DagNode parent)", "testcase": false, "constructor": false}, {"identifier": "addTask", "parameters": "(DagTask task)", "modifiers": "public", "return": "void", "signature": "void addTask(DagTask task)", "full_signature": "public void addTask(DagTask task)", "class_method_signature": "Dag.addTask(DagTask task)", "testcase": false, "constructor": false}, {"identifier": "addDependency", "parameters": "(String first, String next)", "modifiers": "public", "return": "boolean", "signature": "boolean addDependency(String first, String next)", "full_signature": "public boolean addDependency(String first, String next)", "class_method_signature": "Dag.addDependency(String first, String next)", "testcase": false, "constructor": false}, {"identifier": "updateLabel", "parameters": "(String nodeId, String label)", "modifiers": "public", "return": "void", "signature": "void updateLabel(String nodeId, String label)", "full_signature": "public void updateLabel(String nodeId, String label)", "class_method_signature": "Dag.updateLabel(String nodeId, String label)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void start()", "full_signature": "public void start()", "class_method_signature": "Dag.start()", "testcase": false, "constructor": false}, {"identifier": "termiante", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void termiante()", "full_signature": "public void termiante()", "class_method_signature": "Dag.termiante()", "testcase": false, "constructor": false}, {"identifier": "isFailed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isFailed()", "full_signature": "public boolean isFailed()", "class_method_signature": "Dag.isFailed()", "testcase": false, "constructor": false}, {"identifier": "isDone", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDone()", "full_signature": "public boolean isDone()", "class_method_signature": "Dag.isDone()", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void validate()", "full_signature": "public void validate()", "class_method_signature": "Dag.validate()", "testcase": false, "constructor": false}, {"identifier": "detectCycles", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void detectCycles()", "full_signature": "public void detectCycles()", "class_method_signature": "Dag.detectCycles()", "testcase": false, "constructor": false}, {"identifier": "findRootNodes", "parameters": "()", "modifiers": "public", "return": "Set<DagNode>", "signature": "Set<DagNode> findRootNodes()", "full_signature": "public Set<DagNode> findRootNodes()", "class_method_signature": "Dag.findRootNodes()", "testcase": false, "constructor": false}, {"identifier": "print", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String print()", "full_signature": "public String print()", "class_method_signature": "Dag.print()", "testcase": false, "constructor": false}, {"identifier": "isRoot", "parameters": "(String nodeId)", "modifiers": "public", "return": "boolean", "signature": "boolean isRoot(String nodeId)", "full_signature": "public boolean isRoot(String nodeId)", "class_method_signature": "Dag.isRoot(String nodeId)", "testcase": false, "constructor": false}, {"identifier": "hasDependency", "parameters": "(String first, String next)", "modifiers": "public", "return": "boolean", "signature": "boolean hasDependency(String first, String next)", "full_signature": "public boolean hasDependency(String first, String next)", "class_method_signature": "Dag.hasDependency(String first, String next)", "testcase": false, "constructor": false}, {"identifier": "asJson", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String asJson()", "full_signature": "public String asJson()", "class_method_signature": "Dag.asJson()", "testcase": false, "constructor": false}], "file": "karamel-core/src/main/java/se/kth/karamel/backend/dag/Dag.java"}, "focal_method": {"identifier": "print", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String print() throws DagConstructionException {\n    detectCycles();\n    for (DagNode node : findRootNodes()) {\n      node.findMaxIndentionLevel(2);\n    }\n    String prob = UUID.randomUUID().toString();\n    StringBuilder builder = new StringBuilder();\n    for (DagNode node : findRootNodes()) {\n      builder.append(\"\\n\").append(node.printBfs(prob, \"1|\", 2));\n    }\n    return builder.toString();\n  }", "signature": "String print()", "full_signature": "public String print()", "class_method_signature": "Dag.print()", "testcase": false, "constructor": false, "invocations": ["detectCycles", "findRootNodes", "findMaxIndentionLevel", "toString", "randomUUID", "findRootNodes", "append", "append", "printBfs", "toString"]}, "repository": {"repo_id": 29383909, "url": "https://github.com/karamelchef/karamel", "language": "Java", "is_fork": false, "fork_count": 17, "stargazer_count": 30, "size": 12029, "license": "licensed"}}