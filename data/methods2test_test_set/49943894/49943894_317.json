{"test_class": {"identifier": "GlobalLoadBalancingRulesServiceImplTest", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "private static final Logger s_logger = LoggerFactory.getLogger(GlobalLoadBalancingRulesServiceImplTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(GlobalLoadBalancingRulesServiceImplTest.class)", "var_name": "s_logger"}], "file": "server/src/test/java/org/apache/cloudstack/region/gslb/GlobalLoadBalancingRulesServiceImplTest.java"}, "test_case": {"identifier": "testCreateGlobalLoadBalancerRule", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateGlobalLoadBalancerRule() throws Exception {\n\n        s_logger.info(\"Running tests for CreateGlobalLoadBalancerRule() service API\");\n\n        /*\n         * TEST 1: given valid parameters CreateGlobalLoadBalancerRule should succeed\n         */\n        runCreateGlobalLoadBalancerRulePostiveTest();\n\n        /*\n         * TEST 2: given invalid algorithm CreateGlobalLoadBalancerRule should fail\n         */\n        runCreateGlobalLoadBalancerRuleInvalidAlgorithm();\n\n        /*\n         * TEST 3: given invalid persistence method CreateGlobalLoadBalancerRule should fail\n         */\n        runCreateGlobalLoadBalancerRuleInvalidStickyMethod();\n\n        /*\n         * TEST 4: given invalid service type CreateGlobalLoadBalancerRule should fail\n         */\n        runCreateGlobalLoadBalancerRuleInvalidServiceType();\n\n        /*\n         * TEST 5: given 'domain name' that is already used by a different GSLB rule CreateGlobalLoadBalancerRule should fail\n         */\n        runCreateGlobalLoadBalancerRuleInvalidDomainName();\n    }", "signature": "void testCreateGlobalLoadBalancerRule()", "full_signature": "@Test public void testCreateGlobalLoadBalancerRule()", "class_method_signature": "GlobalLoadBalancingRulesServiceImplTest.testCreateGlobalLoadBalancerRule()", "testcase": true, "constructor": false, "invocations": ["info", "runCreateGlobalLoadBalancerRulePostiveTest", "runCreateGlobalLoadBalancerRuleInvalidAlgorithm", "runCreateGlobalLoadBalancerRuleInvalidStickyMethod", "runCreateGlobalLoadBalancerRuleInvalidServiceType", "runCreateGlobalLoadBalancerRuleInvalidDomainName"]}, "focal_class": {"identifier": "GlobalLoadBalancingRulesServiceImpl", "superclass": "", "interfaces": "implements GlobalLoadBalancingRulesService", "fields": [{"original_string": "private static final Logger s_logger = LoggerFactory.getLogger(GlobalLoadBalancingRulesServiceImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(GlobalLoadBalancingRulesServiceImpl.class)", "var_name": "s_logger"}, {"original_string": "@Inject\n    AccountManager _accountMgr;", "modifier": "@Inject", "type": "AccountManager", "declarator": "_accountMgr", "var_name": "_accountMgr"}, {"original_string": "@Inject\n    GlobalLoadBalancerRuleDao _gslbRuleDao;", "modifier": "@Inject", "type": "GlobalLoadBalancerRuleDao", "declarator": "_gslbRuleDao", "var_name": "_gslbRuleDao"}, {"original_string": "@Inject\n    GlobalLoadBalancerLbRuleMapDao _gslbLbMapDao;", "modifier": "@Inject", "type": "GlobalLoadBalancerLbRuleMapDao", "declarator": "_gslbLbMapDao", "var_name": "_gslbLbMapDao"}, {"original_string": "@Inject\n    RegionDao _regionDao;", "modifier": "@Inject", "type": "RegionDao", "declarator": "_regionDao", "var_name": "_regionDao"}, {"original_string": "@Inject\n    RulesManager _rulesMgr;", "modifier": "@Inject", "type": "RulesManager", "declarator": "_rulesMgr", "var_name": "_rulesMgr"}, {"original_string": "@Inject\n    LoadBalancerDao _lbDao;", "modifier": "@Inject", "type": "LoadBalancerDao", "declarator": "_lbDao", "var_name": "_lbDao"}, {"original_string": "@Inject\n    NetworkDao _networkDao;", "modifier": "@Inject", "type": "NetworkDao", "declarator": "_networkDao", "var_name": "_networkDao"}, {"original_string": "@Inject\n    ConfigurationDao _globalConfigDao;", "modifier": "@Inject", "type": "ConfigurationDao", "declarator": "_globalConfigDao", "var_name": "_globalConfigDao"}, {"original_string": "@Inject\n    IPAddressDao _ipAddressDao;", "modifier": "@Inject", "type": "IPAddressDao", "declarator": "_ipAddressDao", "var_name": "_ipAddressDao"}, {"original_string": "@Inject\n    AgentManager _agentMgr;", "modifier": "@Inject", "type": "AgentManager", "declarator": "_agentMgr", "var_name": "_agentMgr"}, {"original_string": "protected List<GslbServiceProvider> _gslbProviders;", "modifier": "protected", "type": "List<GslbServiceProvider>", "declarator": "_gslbProviders", "var_name": "_gslbProviders"}], "methods": [{"identifier": "setGslbServiceProviders", "parameters": "(List<GslbServiceProvider> providers)", "modifiers": "public", "return": "void", "signature": "void setGslbServiceProviders(List<GslbServiceProvider> providers)", "full_signature": "public void setGslbServiceProviders(List<GslbServiceProvider> providers)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.setGslbServiceProviders(List<GslbServiceProvider> providers)", "testcase": false, "constructor": false}, {"identifier": "createGlobalLoadBalancerRule", "parameters": "(CreateGlobalLoadBalancerRuleCmd newRule)", "modifiers": "@Override @DB @ActionEvent(eventType = EventTypes.EVENT_GLOBAL_LOAD_BALANCER_CREATE, eventDescription = \"creating global load \" + \"balancer rule\", create = true) public", "return": "GlobalLoadBalancerRule", "signature": "GlobalLoadBalancerRule createGlobalLoadBalancerRule(CreateGlobalLoadBalancerRuleCmd newRule)", "full_signature": "@Override @DB @ActionEvent(eventType = EventTypes.EVENT_GLOBAL_LOAD_BALANCER_CREATE, eventDescription = \"creating global load \" + \"balancer rule\", create = true) public GlobalLoadBalancerRule createGlobalLoadBalancerRule(CreateGlobalLoadBalancerRuleCmd newRule)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.createGlobalLoadBalancerRule(CreateGlobalLoadBalancerRuleCmd newRule)", "testcase": false, "constructor": false}, {"identifier": "assignToGlobalLoadBalancerRule", "parameters": "(AssignToGlobalLoadBalancerRuleCmd assignToGslbCmd)", "modifiers": "@Override @DB @ActionEvent(eventType = EventTypes.EVENT_ASSIGN_TO_GLOBAL_LOAD_BALANCER_RULE, eventDescription = \"Assigning a load balancer rule to global load balancer rule\", async = true) public", "return": "boolean", "signature": "boolean assignToGlobalLoadBalancerRule(AssignToGlobalLoadBalancerRuleCmd assignToGslbCmd)", "full_signature": "@Override @DB @ActionEvent(eventType = EventTypes.EVENT_ASSIGN_TO_GLOBAL_LOAD_BALANCER_RULE, eventDescription = \"Assigning a load balancer rule to global load balancer rule\", async = true) public boolean assignToGlobalLoadBalancerRule(AssignToGlobalLoadBalancerRuleCmd assignToGslbCmd)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.assignToGlobalLoadBalancerRule(AssignToGlobalLoadBalancerRuleCmd assignToGslbCmd)", "testcase": false, "constructor": false}, {"identifier": "removeFromGlobalLoadBalancerRule", "parameters": "(RemoveFromGlobalLoadBalancerRuleCmd removeFromGslbCmd)", "modifiers": "@Override @DB @ActionEvent(eventType = EventTypes.EVENT_REMOVE_FROM_GLOBAL_LOAD_BALANCER_RULE, eventDescription = \"Removing a load balancer rule to be part of global load balancer rule\") public", "return": "boolean", "signature": "boolean removeFromGlobalLoadBalancerRule(RemoveFromGlobalLoadBalancerRuleCmd removeFromGslbCmd)", "full_signature": "@Override @DB @ActionEvent(eventType = EventTypes.EVENT_REMOVE_FROM_GLOBAL_LOAD_BALANCER_RULE, eventDescription = \"Removing a load balancer rule to be part of global load balancer rule\") public boolean removeFromGlobalLoadBalancerRule(RemoveFromGlobalLoadBalancerRuleCmd removeFromGslbCmd)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.removeFromGlobalLoadBalancerRule(RemoveFromGlobalLoadBalancerRuleCmd removeFromGslbCmd)", "testcase": false, "constructor": false}, {"identifier": "deleteGlobalLoadBalancerRule", "parameters": "(DeleteGlobalLoadBalancerRuleCmd deleteGslbCmd)", "modifiers": "@Override @ActionEvent(eventType = EventTypes.EVENT_GLOBAL_LOAD_BALANCER_DELETE, eventDescription = \"Delete global load balancer rule\") public", "return": "boolean", "signature": "boolean deleteGlobalLoadBalancerRule(DeleteGlobalLoadBalancerRuleCmd deleteGslbCmd)", "full_signature": "@Override @ActionEvent(eventType = EventTypes.EVENT_GLOBAL_LOAD_BALANCER_DELETE, eventDescription = \"Delete global load balancer rule\") public boolean deleteGlobalLoadBalancerRule(DeleteGlobalLoadBalancerRuleCmd deleteGslbCmd)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.deleteGlobalLoadBalancerRule(DeleteGlobalLoadBalancerRuleCmd deleteGslbCmd)", "testcase": false, "constructor": false}, {"identifier": "revokeGslbRule", "parameters": "(final long gslbRuleId, Account caller)", "modifiers": "@DB private", "return": "void", "signature": "void revokeGslbRule(final long gslbRuleId, Account caller)", "full_signature": "@DB private void revokeGslbRule(final long gslbRuleId, Account caller)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.revokeGslbRule(final long gslbRuleId, Account caller)", "testcase": false, "constructor": false}, {"identifier": "updateGlobalLoadBalancerRule", "parameters": "(UpdateGlobalLoadBalancerRuleCmd updateGslbCmd)", "modifiers": "@Override public", "return": "GlobalLoadBalancerRule", "signature": "GlobalLoadBalancerRule updateGlobalLoadBalancerRule(UpdateGlobalLoadBalancerRuleCmd updateGslbCmd)", "full_signature": "@Override public GlobalLoadBalancerRule updateGlobalLoadBalancerRule(UpdateGlobalLoadBalancerRuleCmd updateGslbCmd)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.updateGlobalLoadBalancerRule(UpdateGlobalLoadBalancerRuleCmd updateGslbCmd)", "testcase": false, "constructor": false}, {"identifier": "listGlobalLoadBalancerRule", "parameters": "(ListGlobalLoadBalancerRuleCmd listGslbCmd)", "modifiers": "@Override public", "return": "List<GlobalLoadBalancerRule>", "signature": "List<GlobalLoadBalancerRule> listGlobalLoadBalancerRule(ListGlobalLoadBalancerRuleCmd listGslbCmd)", "full_signature": "@Override public List<GlobalLoadBalancerRule> listGlobalLoadBalancerRule(ListGlobalLoadBalancerRuleCmd listGslbCmd)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.listGlobalLoadBalancerRule(ListGlobalLoadBalancerRuleCmd listGslbCmd)", "testcase": false, "constructor": false}, {"identifier": "listSiteLoadBalancers", "parameters": "(long gslbRuleId)", "modifiers": "@Override public", "return": "List<LoadBalancer>", "signature": "List<LoadBalancer> listSiteLoadBalancers(long gslbRuleId)", "full_signature": "@Override public List<LoadBalancer> listSiteLoadBalancers(long gslbRuleId)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.listSiteLoadBalancers(long gslbRuleId)", "testcase": false, "constructor": false}, {"identifier": "applyGlobalLoadBalancerRuleConfig", "parameters": "(long gslbRuleId, boolean revoke)", "modifiers": "private", "return": "boolean", "signature": "boolean applyGlobalLoadBalancerRuleConfig(long gslbRuleId, boolean revoke)", "full_signature": "private boolean applyGlobalLoadBalancerRuleConfig(long gslbRuleId, boolean revoke)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.applyGlobalLoadBalancerRuleConfig(long gslbRuleId, boolean revoke)", "testcase": false, "constructor": false}, {"identifier": "revokeAllGslbRulesForAccount", "parameters": "(com.cloud.user.Account caller, long accountId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean revokeAllGslbRulesForAccount(com.cloud.user.Account caller, long accountId)", "full_signature": "@Override public boolean revokeAllGslbRulesForAccount(com.cloud.user.Account caller, long accountId)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.revokeAllGslbRulesForAccount(com.cloud.user.Account caller, long accountId)", "testcase": false, "constructor": false}, {"identifier": "checkGslbServiceEnabledInZone", "parameters": "(long zoneId, long physicalNetworkId)", "modifiers": "private", "return": "boolean", "signature": "boolean checkGslbServiceEnabledInZone(long zoneId, long physicalNetworkId)", "full_signature": "private boolean checkGslbServiceEnabledInZone(long zoneId, long physicalNetworkId)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.checkGslbServiceEnabledInZone(long zoneId, long physicalNetworkId)", "testcase": false, "constructor": false}, {"identifier": "lookupGslbServiceProvider", "parameters": "()", "modifiers": "protected", "return": "GslbServiceProvider", "signature": "GslbServiceProvider lookupGslbServiceProvider()", "full_signature": "protected GslbServiceProvider lookupGslbServiceProvider()", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.lookupGslbServiceProvider()", "testcase": false, "constructor": false}, {"identifier": "findById", "parameters": "(long gslbRuleId)", "modifiers": "@Override public", "return": "GlobalLoadBalancerRule", "signature": "GlobalLoadBalancerRule findById(long gslbRuleId)", "full_signature": "@Override public GlobalLoadBalancerRule findById(long gslbRuleId)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.findById(long gslbRuleId)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/cloudstack/region/gslb/GlobalLoadBalancingRulesServiceImpl.java"}, "focal_method": {"identifier": "createGlobalLoadBalancerRule", "parameters": "(CreateGlobalLoadBalancerRuleCmd newRule)", "modifiers": "@Override @DB @ActionEvent(eventType = EventTypes.EVENT_GLOBAL_LOAD_BALANCER_CREATE, eventDescription = \"creating global load \" + \"balancer rule\", create = true) public", "return": "GlobalLoadBalancerRule", "body": "@Override\n    @DB\n    @ActionEvent(eventType = EventTypes.EVENT_GLOBAL_LOAD_BALANCER_CREATE, eventDescription = \"creating global load \" + \"balancer rule\", create = true)\n    public GlobalLoadBalancerRule createGlobalLoadBalancerRule(CreateGlobalLoadBalancerRuleCmd newRule) {\n\n        final Integer regionId = newRule.getRegionId();\n        final String algorithm = newRule.getAlgorithm();\n        final String stickyMethod = newRule.getStickyMethod();\n        final String name = newRule.getName();\n        final String description = newRule.getDescription();\n        final String domainName = newRule.getServiceDomainName();\n        final String serviceType = newRule.getServiceType();\n\n        final Account gslbOwner = _accountMgr.getAccount(newRule.getEntityOwnerId());\n\n        if (!GlobalLoadBalancerRule.Algorithm.isValidAlgorithm(algorithm)) {\n            throw new InvalidParameterValueException(\"Invalid Algorithm: \" + algorithm);\n        }\n\n        if (!GlobalLoadBalancerRule.Persistence.isValidPersistence(stickyMethod)) {\n            throw new InvalidParameterValueException(\"Invalid persistence: \" + stickyMethod);\n        }\n\n        if (!GlobalLoadBalancerRule.ServiceType.isValidServiceType(serviceType)) {\n            throw new InvalidParameterValueException(\"Invalid service type: \" + serviceType);\n        }\n\n        if (!NetUtils.verifyDomainName(domainName)) {\n            throw new InvalidParameterValueException(\"Invalid domain name : \" + domainName);\n        }\n\n        GlobalLoadBalancerRuleVO gslbRuleWithDomainName = _gslbRuleDao.findByDomainName(domainName);\n        if (gslbRuleWithDomainName != null) {\n            throw new InvalidParameterValueException(\"Domain name \" + domainName + \"is in use\");\n        }\n\n        Region region = _regionDao.findById(regionId);\n        if (region == null) {\n            throw new InvalidParameterValueException(\"Invalid region ID: \" + regionId);\n        }\n\n        String providerDnsName = _globalConfigDao.getValue(Config.CloudDnsName.key());\n        if (!region.checkIfServiceEnabled(Region.Service.Gslb) || (providerDnsName == null)) {\n            throw new CloudRuntimeException(\"GSLB service is not enabled in region : \" + region.getName());\n        }\n\n        GlobalLoadBalancerRuleVO newGslbRule = Transaction.execute(new TransactionCallback<GlobalLoadBalancerRuleVO>() {\n            @Override\n            public GlobalLoadBalancerRuleVO doInTransaction(TransactionStatus status) {\n                GlobalLoadBalancerRuleVO newGslbRule =\n                    new GlobalLoadBalancerRuleVO(name, description, domainName, algorithm, stickyMethod, serviceType, regionId, gslbOwner.getId(),\n                        gslbOwner.getDomainId(), GlobalLoadBalancerRule.State.Staged);\n                _gslbRuleDao.persist(newGslbRule);\n\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_GLOBAL_LOAD_BALANCER_CREATE, newGslbRule.getAccountId(), 0, newGslbRule.getId(), name,\n                    GlobalLoadBalancerRule.class.getName(), newGslbRule.getUuid());\n\n                return newGslbRule;\n            }\n        });\n\n        s_logger.debug(\"successfully created new global load balancer rule for the account \" + gslbOwner.getId());\n\n        return newGslbRule;\n    }", "signature": "GlobalLoadBalancerRule createGlobalLoadBalancerRule(CreateGlobalLoadBalancerRuleCmd newRule)", "full_signature": "@Override @DB @ActionEvent(eventType = EventTypes.EVENT_GLOBAL_LOAD_BALANCER_CREATE, eventDescription = \"creating global load \" + \"balancer rule\", create = true) public GlobalLoadBalancerRule createGlobalLoadBalancerRule(CreateGlobalLoadBalancerRuleCmd newRule)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.createGlobalLoadBalancerRule(CreateGlobalLoadBalancerRuleCmd newRule)", "testcase": false, "constructor": false, "invocations": ["getRegionId", "getAlgorithm", "getStickyMethod", "getName", "getDescription", "getServiceDomainName", "getServiceType", "getAccount", "getEntityOwnerId", "isValidAlgorithm", "isValidPersistence", "isValidServiceType", "verifyDomainName", "findByDomainName", "findById", "getValue", "key", "checkIfServiceEnabled", "getName", "execute", "getId", "getDomainId", "persist", "publishUsageEvent", "getAccountId", "getId", "getName", "getUuid", "debug", "getId"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}