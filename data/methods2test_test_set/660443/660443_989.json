{"test_class": {"identifier": "MolecularFormulaSetManipulatorTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "private final static IChemObjectBuilder builder = SilentChemObjectBuilder.getInstance();", "modifier": "private final static", "type": "IChemObjectBuilder", "declarator": "builder = SilentChemObjectBuilder.getInstance()", "var_name": "builder"}], "file": "tool/formula/src/test/java/org/openscience/cdk/tools/manipulator/MolecularFormulaSetManipulatorTest.java"}, "test_case": {"identifier": "testRemove_IMolecularFormulaSet_IMolecularFormula_IMolecularFormula", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRemove_IMolecularFormulaSet_IMolecularFormula_IMolecularFormula() {\n\n        IMolecularFormula formulaMin = new MolecularFormula();\n        formulaMin.addIsotope(builder.newInstance(IIsotope.class, \"C\"), 1);\n        formulaMin.addIsotope(builder.newInstance(IIsotope.class, \"H\"), 1);\n        formulaMin.addIsotope(builder.newInstance(IIsotope.class, \"O\"), 1);\n\n        IMolecularFormula formulaMax = new MolecularFormula();\n        formulaMax.addIsotope(builder.newInstance(IIsotope.class, \"C\"), 4);\n        formulaMax.addIsotope(builder.newInstance(IIsotope.class, \"H\"), 12);\n        formulaMax.addIsotope(builder.newInstance(IIsotope.class, \"N\"), 2);\n\n        IMolecularFormula mf1 = new MolecularFormula();\n        mf1.addIsotope(builder.newInstance(IIsotope.class, \"C\"), 3);\n        mf1.addIsotope(builder.newInstance(IIsotope.class, \"H\"), 10);\n        mf1.addIsotope(builder.newInstance(IIsotope.class, \"N\"), 1);\n\n        IMolecularFormulaSet formulaSet = new MolecularFormulaSet();\n        formulaSet.addMolecularFormula(mf1);\n\n        IMolecularFormulaSet newMFSet = MolecularFormulaSetManipulator.remove(formulaSet, formulaMin, formulaMax);\n\n        Assert.assertNull(newMFSet);\n\n    }", "signature": "void testRemove_IMolecularFormulaSet_IMolecularFormula_IMolecularFormula()", "full_signature": "@Test public void testRemove_IMolecularFormulaSet_IMolecularFormula_IMolecularFormula()", "class_method_signature": "MolecularFormulaSetManipulatorTest.testRemove_IMolecularFormulaSet_IMolecularFormula_IMolecularFormula()", "testcase": true, "constructor": false, "invocations": ["addIsotope", "newInstance", "addIsotope", "newInstance", "addIsotope", "newInstance", "addIsotope", "newInstance", "addIsotope", "newInstance", "addIsotope", "newInstance", "addIsotope", "newInstance", "addIsotope", "newInstance", "addIsotope", "newInstance", "addMolecularFormula", "remove", "assertNull"]}, "focal_class": {"identifier": "MolecularFormulaSetManipulator", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getMaxOccurrenceElements", "parameters": "(IMolecularFormulaSet mfSet)", "modifiers": "public static", "return": "IMolecularFormula", "signature": "IMolecularFormula getMaxOccurrenceElements(IMolecularFormulaSet mfSet)", "full_signature": "public static IMolecularFormula getMaxOccurrenceElements(IMolecularFormulaSet mfSet)", "class_method_signature": "MolecularFormulaSetManipulator.getMaxOccurrenceElements(IMolecularFormulaSet mfSet)", "testcase": false, "constructor": false}, {"identifier": "getMinOccurrenceElements", "parameters": "(IMolecularFormulaSet mfSet)", "modifiers": "public static", "return": "IMolecularFormula", "signature": "IMolecularFormula getMinOccurrenceElements(IMolecularFormulaSet mfSet)", "full_signature": "public static IMolecularFormula getMinOccurrenceElements(IMolecularFormulaSet mfSet)", "class_method_signature": "MolecularFormulaSetManipulator.getMinOccurrenceElements(IMolecularFormulaSet mfSet)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(IMolecularFormulaSet formulaSet, IMolecularFormula formulaMin,\n            IMolecularFormula formulaMax)", "modifiers": "public static", "return": "IMolecularFormulaSet", "signature": "IMolecularFormulaSet remove(IMolecularFormulaSet formulaSet, IMolecularFormula formulaMin,\n            IMolecularFormula formulaMax)", "full_signature": "public static IMolecularFormulaSet remove(IMolecularFormulaSet formulaSet, IMolecularFormula formulaMin,\n            IMolecularFormula formulaMax)", "class_method_signature": "MolecularFormulaSetManipulator.remove(IMolecularFormulaSet formulaSet, IMolecularFormula formulaMin,\n            IMolecularFormula formulaMax)", "testcase": false, "constructor": false}, {"identifier": "validCorrelation", "parameters": "(IMolecularFormula formulaMin, IMolecularFormula formulamax)", "modifiers": "private static", "return": "boolean", "signature": "boolean validCorrelation(IMolecularFormula formulaMin, IMolecularFormula formulamax)", "full_signature": "private static boolean validCorrelation(IMolecularFormula formulaMin, IMolecularFormula formulamax)", "class_method_signature": "MolecularFormulaSetManipulator.validCorrelation(IMolecularFormula formulaMin, IMolecularFormula formulamax)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(IMolecularFormulaSet formulaSet, IMolecularFormula formula)", "modifiers": "public static", "return": "boolean", "signature": "boolean contains(IMolecularFormulaSet formulaSet, IMolecularFormula formula)", "full_signature": "public static boolean contains(IMolecularFormulaSet formulaSet, IMolecularFormula formula)", "class_method_signature": "MolecularFormulaSetManipulator.contains(IMolecularFormulaSet formulaSet, IMolecularFormula formula)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(IMolecularFormulaSet formulaSet, MolecularFormulaRange formulaRange)", "modifiers": "public static", "return": "IMolecularFormulaSet", "signature": "IMolecularFormulaSet remove(IMolecularFormulaSet formulaSet, MolecularFormulaRange formulaRange)", "full_signature": "public static IMolecularFormulaSet remove(IMolecularFormulaSet formulaSet, MolecularFormulaRange formulaRange)", "class_method_signature": "MolecularFormulaSetManipulator.remove(IMolecularFormulaSet formulaSet, MolecularFormulaRange formulaRange)", "testcase": false, "constructor": false}], "file": "tool/formula/src/main/java/org/openscience/cdk/tools/manipulator/MolecularFormulaSetManipulator.java"}, "focal_method": {"identifier": "remove", "parameters": "(IMolecularFormulaSet formulaSet, IMolecularFormula formulaMin,\n            IMolecularFormula formulaMax)", "modifiers": "public static", "return": "IMolecularFormulaSet", "body": "public static IMolecularFormulaSet remove(IMolecularFormulaSet formulaSet, IMolecularFormula formulaMin,\n            IMolecularFormula formulaMax) {\n\n        // prove the correlation between maximum and minimum molecularFormula\n        if (!validCorrelation(formulaMin, formulaMax)) return null;\n\n        IMolecularFormulaSet newFormulaSet = formulaSet.getBuilder().newInstance(IMolecularFormulaSet.class);\n\n        for (IMolecularFormula formula : formulaSet.molecularFormulas()) {\n            boolean flagPass = true;\n\n            // the formula must contain all element found into the formulaMin\n            if (!validCorrelation(formula, formulaMin)) continue;\n\n            for (IElement element : MolecularFormulaManipulator.elements(formulaMin)) {\n                int occur = MolecularFormulaManipulator.getElementCount(formula, element);\n                int occurMax = MolecularFormulaManipulator.getElementCount(formulaMax, element);\n                int occurMin = MolecularFormulaManipulator.getElementCount(formulaMin, element);\n\n                if (!(occurMin <= occur) || !(occur <= occurMax)) {\n                    flagPass = false;\n                    break;\n                }\n\n            }\n            if (flagPass) // stored if each IElement occurrence is into the limits\n                newFormulaSet.addMolecularFormula(formula);\n\n        }\n        return newFormulaSet;\n    }", "signature": "IMolecularFormulaSet remove(IMolecularFormulaSet formulaSet, IMolecularFormula formulaMin,\n            IMolecularFormula formulaMax)", "full_signature": "public static IMolecularFormulaSet remove(IMolecularFormulaSet formulaSet, IMolecularFormula formulaMin,\n            IMolecularFormula formulaMax)", "class_method_signature": "MolecularFormulaSetManipulator.remove(IMolecularFormulaSet formulaSet, IMolecularFormula formulaMin,\n            IMolecularFormula formulaMax)", "testcase": false, "constructor": false, "invocations": ["validCorrelation", "newInstance", "getBuilder", "molecularFormulas", "validCorrelation", "elements", "getElementCount", "getElementCount", "getElementCount", "addMolecularFormula"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}