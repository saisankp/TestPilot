{"test_class": {"identifier": "BackgroundMusicManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    MediaPlayer mockMediaPlayer;", "modifier": "@Mock", "type": "MediaPlayer", "declarator": "mockMediaPlayer", "var_name": "mockMediaPlayer"}, {"original_string": "@Mock\n    Media mockMedia;", "modifier": "@Mock", "type": "Media", "declarator": "mockMedia", "var_name": "mockMedia"}, {"original_string": "private BackgroundMusicManager musicManagerSpy;", "modifier": "private", "type": "BackgroundMusicManager", "declarator": "musicManagerSpy", "var_name": "musicManagerSpy"}, {"original_string": "private final String sep = File.separator;", "modifier": "private final", "type": "String", "declarator": "sep = File.separator", "var_name": "sep"}, {"original_string": "private final String localDataFolder =\n        System.getProperty(\"user.dir\") + sep\n            + \"src\" + sep\n            + \"test\" + sep\n            + \"resources\" + sep\n            + \"data\" + sep\n            + \"music\" + sep;", "modifier": "private final", "type": "String", "declarator": "localDataFolder =\n        System.getProperty(\"user.dir\") + sep\n            + \"src\" + sep\n            + \"test\" + sep\n            + \"resources\" + sep\n            + \"data\" + sep\n            + \"music\" + sep", "var_name": "localDataFolder"}, {"original_string": "private MediaPlayer mediaPlayer;", "modifier": "private", "type": "MediaPlayer", "declarator": "mediaPlayer", "var_name": "mediaPlayer"}, {"original_string": "private double previousVolume;", "modifier": "private", "type": "double", "declarator": "previousVolume", "var_name": "previousVolume"}, {"original_string": "private SimpleDoubleProperty volumeProperty = new SimpleDoubleProperty(0.5);", "modifier": "private", "type": "SimpleDoubleProperty", "declarator": "volumeProperty = new SimpleDoubleProperty(0.5)", "var_name": "volumeProperty"}, {"original_string": "ObservableMap<String, Object> metadata = FXCollections.observableHashMap();", "modifier": "", "type": "ObservableMap<String, Object>", "declarator": "metadata = FXCollections.observableHashMap()", "var_name": "metadata"}], "file": "gazeplay-commons/src/test/java/net/gazeplay/commons/utils/games/BackgroundMusicManagerTest.java"}, "test_case": {"identifier": "shouldDownloadAndGetFromCache", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void shouldDownloadAndGetFromCache() throws IOException {\n        File testFile = new File(\"testFolder\");\n\n        new MockUp<GazePlayDirectories>() {\n            @mockit.Mock\n            public File getGazePlayFolder() {\n                return testFile;\n            }\n        };\n\n        URL resource = new URL(\"https://opengameart.org/sites/default/files/TalkingCuteChiptune_0.mp3\");\n        File result = musicManagerSpy.downloadAndGetFromCache(resource, resource.toExternalForm());\n\n        File expected = new File(testFile, \"cache/music/\" +\n            new String(Base64.getEncoder().encode(resource.toExternalForm().getBytes(StandardCharsets.UTF_8)), StandardCharsets.UTF_8));\n        assertEquals(expected, result);\n\n        FileUtils.deleteDirectory(testFile);\n    }", "signature": "void shouldDownloadAndGetFromCache()", "full_signature": "@Test void shouldDownloadAndGetFromCache()", "class_method_signature": "BackgroundMusicManagerTest.shouldDownloadAndGetFromCache()", "testcase": true, "constructor": false, "invocations": ["downloadAndGetFromCache", "toExternalForm", "encode", "getEncoder", "getBytes", "toExternalForm", "assertEquals", "deleteDirectory"]}, "focal_class": {"identifier": "BackgroundMusicManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final List<String> SUPPORTED_FILE_EXTENSIONS = Arrays.asList(\".aif\", \".aiff\", \".fxm\", \".flv\", \".m3u8\",\n        \".mp3\", \".mp4\", \".m4v\", \".m4a\", \".mp4\", \".wav\");", "modifier": "private static final", "type": "List<String>", "declarator": "SUPPORTED_FILE_EXTENSIONS = Arrays.asList(\".aif\", \".aiff\", \".fxm\", \".flv\", \".m3u8\",\n        \".mp3\", \".mp4\", \".m4v\", \".m4a\", \".mp4\", \".wav\")", "var_name": "SUPPORTED_FILE_EXTENSIONS"}, {"original_string": "@Getter\n    private static BackgroundMusicManager instance = new BackgroundMusicManager();", "modifier": "@Getter\n    private static", "type": "BackgroundMusicManager", "declarator": "instance = new BackgroundMusicManager()", "var_name": "instance"}, {"original_string": "@Getter\n    private final List<MediaPlayer> playlist = new ArrayList<>();", "modifier": "@Getter\n    private final", "type": "List<MediaPlayer>", "declarator": "playlist = new ArrayList<>()", "var_name": "playlist"}, {"original_string": "private final List<MediaPlayer> defaultPlayList = new ArrayList<>();", "modifier": "private final", "type": "List<MediaPlayer>", "declarator": "defaultPlayList = new ArrayList<>()", "var_name": "defaultPlayList"}, {"original_string": "@Getter\n    private final List<MediaPlayer> backupPlaylist = new ArrayList<>();", "modifier": "@Getter\n    private final", "type": "List<MediaPlayer>", "declarator": "backupPlaylist = new ArrayList<>()", "var_name": "backupPlaylist"}, {"original_string": "@Getter\n    private MediaPlayer currentMusic;", "modifier": "@Getter\n    private", "type": "MediaPlayer", "declarator": "currentMusic", "var_name": "currentMusic"}, {"original_string": "private final ExecutorService executorService = new ThreadPoolExecutor(1, 1, 3, TimeUnit.MINUTES,\n        new LinkedBlockingQueue<>(), new CustomThreadFactory(this.getClass().getSimpleName(),\n        new GroupingThreadFactory(this.getClass().getSimpleName())));", "modifier": "private final", "type": "ExecutorService", "declarator": "executorService = new ThreadPoolExecutor(1, 1, 3, TimeUnit.MINUTES,\n        new LinkedBlockingQueue<>(), new CustomThreadFactory(this.getClass().getSimpleName(),\n        new GroupingThreadFactory(this.getClass().getSimpleName())))", "var_name": "executorService"}, {"original_string": "@Getter\n    private final BooleanProperty isPlayingProperty = new SimpleBooleanProperty(this, \"isPlaying\", false);", "modifier": "@Getter\n    private final", "type": "BooleanProperty", "declarator": "isPlayingProperty = new SimpleBooleanProperty(this, \"isPlaying\", false)", "var_name": "isPlayingProperty"}, {"original_string": "@Getter\n    private final IntegerProperty musicIndexProperty = new SimpleIntegerProperty(this, \"musicIndex\", 0);", "modifier": "@Getter\n    private final", "type": "IntegerProperty", "declarator": "musicIndexProperty = new SimpleIntegerProperty(this, \"musicIndex\", 0)", "var_name": "musicIndexProperty"}, {"original_string": "@Getter\n    private final BooleanProperty isCustomMusicSet = new SimpleBooleanProperty(this, \"isCustomMusicSet\", false);", "modifier": "@Getter\n    private final", "type": "BooleanProperty", "declarator": "isCustomMusicSet = new SimpleBooleanProperty(this, \"isCustomMusicSet\", false)", "var_name": "isCustomMusicSet"}, {"original_string": "private final ReadOnlyBooleanWrapper isMusicChanging = new ReadOnlyBooleanWrapper(this, \"musicChanged\", false);", "modifier": "private final", "type": "ReadOnlyBooleanWrapper", "declarator": "isMusicChanging = new ReadOnlyBooleanWrapper(this, \"musicChanged\", false)", "var_name": "isMusicChanging"}], "methods": [{"identifier": "onConfigurationChanged", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void onConfigurationChanged()", "full_signature": "public static void onConfigurationChanged()", "class_method_signature": "BackgroundMusicManager.onConfigurationChanged()", "testcase": false, "constructor": false}, {"identifier": "BackgroundMusicManager", "parameters": "()", "modifiers": "public", "return": "", "signature": " BackgroundMusicManager()", "full_signature": "public  BackgroundMusicManager()", "class_method_signature": "BackgroundMusicManager.BackgroundMusicManager()", "testcase": false, "constructor": true}, {"identifier": "onEndGame", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void onEndGame()", "full_signature": "public void onEndGame()", "class_method_signature": "BackgroundMusicManager.onEndGame()", "testcase": false, "constructor": false}, {"identifier": "getAudioFromFolder", "parameters": "(String folderPath)", "modifiers": "public", "return": "void", "signature": "void getAudioFromFolder(String folderPath)", "full_signature": "public void getAudioFromFolder(String folderPath)", "class_method_signature": "BackgroundMusicManager.getAudioFromFolder(String folderPath)", "testcase": false, "constructor": false}, {"identifier": "addFolderRecursively", "parameters": "(final File folder)", "modifiers": "private", "return": "void", "signature": "void addFolderRecursively(final File folder)", "full_signature": "private void addFolderRecursively(final File folder)", "class_method_signature": "BackgroundMusicManager.addFolderRecursively(final File folder)", "testcase": false, "constructor": false}, {"identifier": "changeCurrentMusic", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void changeCurrentMusic()", "full_signature": "private void changeCurrentMusic()", "class_method_signature": "BackgroundMusicManager.changeCurrentMusic()", "testcase": false, "constructor": false}, {"identifier": "isPlaying", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPlaying()", "full_signature": "public boolean isPlaying()", "class_method_signature": "BackgroundMusicManager.isPlaying()", "testcase": false, "constructor": false}, {"identifier": "changeMusic", "parameters": "(int newMusicIndex)", "modifiers": "public", "return": "void", "signature": "void changeMusic(int newMusicIndex)", "full_signature": "public void changeMusic(int newMusicIndex)", "class_method_signature": "BackgroundMusicManager.changeMusic(int newMusicIndex)", "testcase": false, "constructor": false}, {"identifier": "emptyPlaylist", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void emptyPlaylist()", "full_signature": "public void emptyPlaylist()", "class_method_signature": "BackgroundMusicManager.emptyPlaylist()", "testcase": false, "constructor": false}, {"identifier": "backupPlaylist", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void backupPlaylist()", "full_signature": "public void backupPlaylist()", "class_method_signature": "BackgroundMusicManager.backupPlaylist()", "testcase": false, "constructor": false}, {"identifier": "restorePlaylist", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void restorePlaylist()", "full_signature": "public void restorePlaylist()", "class_method_signature": "BackgroundMusicManager.restorePlaylist()", "testcase": false, "constructor": false}, {"identifier": "pause", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void pause()", "full_signature": "public void pause()", "class_method_signature": "BackgroundMusicManager.pause()", "testcase": false, "constructor": false}, {"identifier": "play", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void play()", "full_signature": "public void play()", "class_method_signature": "BackgroundMusicManager.play()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "BackgroundMusicManager.stop()", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void next()", "full_signature": "public void next()", "class_method_signature": "BackgroundMusicManager.next()", "testcase": false, "constructor": false}, {"identifier": "previous", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void previous()", "full_signature": "public void previous()", "class_method_signature": "BackgroundMusicManager.previous()", "testcase": false, "constructor": false}, {"identifier": "setVolume", "parameters": "(double value)", "modifiers": "public", "return": "void", "signature": "void setVolume(double value)", "full_signature": "public void setVolume(double value)", "class_method_signature": "BackgroundMusicManager.setVolume(double value)", "testcase": false, "constructor": false}, {"identifier": "playMusicAlone", "parameters": "(String resourceUrlAsString)", "modifiers": "public", "return": "void", "signature": "void playMusicAlone(String resourceUrlAsString)", "full_signature": "public void playMusicAlone(String resourceUrlAsString)", "class_method_signature": "BackgroundMusicManager.playMusicAlone(String resourceUrlAsString)", "testcase": false, "constructor": false}, {"identifier": "downloadAndGetFromCache", "parameters": "(URL resourceURL, String resourceUrlExternalForm)", "modifiers": "", "return": "File", "signature": "File downloadAndGetFromCache(URL resourceURL, String resourceUrlExternalForm)", "full_signature": " File downloadAndGetFromCache(URL resourceURL, String resourceUrlExternalForm)", "class_method_signature": "BackgroundMusicManager.downloadAndGetFromCache(URL resourceURL, String resourceUrlExternalForm)", "testcase": false, "constructor": false}, {"identifier": "makeMediaPlayer", "parameters": "(Media media)", "modifiers": "", "return": "MediaPlayer", "signature": "MediaPlayer makeMediaPlayer(Media media)", "full_signature": " MediaPlayer makeMediaPlayer(Media media)", "class_method_signature": "BackgroundMusicManager.makeMediaPlayer(Media media)", "testcase": false, "constructor": false}, {"identifier": "createMediaPlayer", "parameters": "(String source)", "modifiers": "", "return": "MediaPlayer", "signature": "MediaPlayer createMediaPlayer(String source)", "full_signature": " MediaPlayer createMediaPlayer(String source)", "class_method_signature": "BackgroundMusicManager.createMediaPlayer(String source)", "testcase": false, "constructor": false}, {"identifier": "getMediaPlayerFromSource", "parameters": "(final String source)", "modifiers": "private", "return": "MediaPlayer", "signature": "MediaPlayer getMediaPlayerFromSource(final String source)", "full_signature": "private MediaPlayer getMediaPlayerFromSource(final String source)", "class_method_signature": "BackgroundMusicManager.getMediaPlayerFromSource(final String source)", "testcase": false, "constructor": false}, {"identifier": "getMusicTitle", "parameters": "(final MediaPlayer music)", "modifiers": "public static", "return": "String", "signature": "String getMusicTitle(final MediaPlayer music)", "full_signature": "public static String getMusicTitle(final MediaPlayer music)", "class_method_signature": "BackgroundMusicManager.getMusicTitle(final MediaPlayer music)", "testcase": false, "constructor": false}, {"identifier": "getMusicTitle", "parameters": "(final String musicPath)", "modifiers": "public static", "return": "String", "signature": "String getMusicTitle(final String musicPath)", "full_signature": "public static String getMusicTitle(final String musicPath)", "class_method_signature": "BackgroundMusicManager.getMusicTitle(final String musicPath)", "testcase": false, "constructor": false}, {"identifier": "getIsMusicChanging", "parameters": "()", "modifiers": "public", "return": "ReadOnlyBooleanProperty", "signature": "ReadOnlyBooleanProperty getIsMusicChanging()", "full_signature": "public ReadOnlyBooleanProperty getIsMusicChanging()", "class_method_signature": "BackgroundMusicManager.getIsMusicChanging()", "testcase": false, "constructor": false}], "file": "gazeplay-commons/src/main/java/net/gazeplay/commons/utils/games/BackgroundMusicManager.java"}, "focal_method": {"identifier": "downloadAndGetFromCache", "parameters": "(URL resourceURL, String resourceUrlExternalForm)", "modifiers": "", "return": "File", "body": "File downloadAndGetFromCache(URL resourceURL, String resourceUrlExternalForm) {\n        // the local cache filename is a Base64 encoding of the URL\n        // so that we avoid name clash,\n        // and so that we have the same local file for the same resource URL\n        final Charset utf8 = StandardCharsets.UTF_8;\n        byte[] encodedUrl = Base64.getEncoder().encode(resourceUrlExternalForm.getBytes(utf8));\n        final String localCacheFileName = new String(encodedUrl, utf8);\n\n        File musicCacheFolder = new File(GazePlayDirectories.getGazePlayFolder(), \"cache/music\");\n        File outputFile = new File(musicCacheFolder, localCacheFileName);\n\n        if (!outputFile.exists()) {\n            // use a temporary file while downloading\n            // to avoid using corrupted file is the download is interrupted\n            File tempOutputFile = new File(outputFile.getAbsolutePath() + \".downloading\");\n            if (tempOutputFile.exists()) {\n                boolean tempOutputFileDeleted = tempOutputFile.delete();\n                log.trace(\"tempOutputFileDeleted = {}\", tempOutputFileDeleted);\n            }\n            try {\n                log.info(\"Downloading music file {}\", resourceURL);\n\n                FileUtils.copyURLToFile(resourceURL, tempOutputFile, 10000, 10000);\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n            boolean renamed = tempOutputFile.renameTo(outputFile);\n            log.debug(\"renamed = {}\", renamed);\n            log.info(\"Finished downloading music file {}\", resourceURL);\n        } else {\n            log.info(\"Found music file in cache for {}\", resourceURL);\n        }\n        return outputFile;\n    }", "signature": "File downloadAndGetFromCache(URL resourceURL, String resourceUrlExternalForm)", "full_signature": " File downloadAndGetFromCache(URL resourceURL, String resourceUrlExternalForm)", "class_method_signature": "BackgroundMusicManager.downloadAndGetFromCache(URL resourceURL, String resourceUrlExternalForm)", "testcase": false, "constructor": false, "invocations": ["encode", "getEncoder", "getBytes", "getGazePlayFolder", "exists", "getAbsolutePath", "exists", "delete", "trace", "info", "copyURLToFile", "renameTo", "debug", "info", "info"]}, "repository": {"repo_id": 81368488, "url": "https://github.com/GazePlay/GazePlay", "stars": 15, "created": "2/8/2017 7:39:08 PM +00:00", "updates": "2020-01-26T16:45:47+00:00", "fork": "False", "license": "licensed"}}