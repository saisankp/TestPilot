{"test_class": {"identifier": "PublisherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String URI = \"amqp://userName:password@hostName:portNumber/virtualHost\";", "modifier": "private static final", "type": "String", "declarator": "URI = \"amqp://userName:password@hostName:portNumber/virtualHost\"", "var_name": "URI"}, {"original_string": "private static final String EXCHANGE = \"dummy-exchange\";", "modifier": "private static final", "type": "String", "declarator": "EXCHANGE = \"dummy-exchange\"", "var_name": "EXCHANGE"}, {"original_string": "private static final String EXCHANGE_TYPE = \"topic\";", "modifier": "private static final", "type": "String", "declarator": "EXCHANGE_TYPE = \"topic\"", "var_name": "EXCHANGE_TYPE"}, {"original_string": "private static final String MESSAGE = \"{name: 'test'}\";", "modifier": "private static final", "type": "String", "declarator": "MESSAGE = \"{name: 'test'}\"", "var_name": "MESSAGE"}, {"original_string": "private static final String ROUTING_KEY = \"main.test\";", "modifier": "private static final", "type": "String", "declarator": "ROUTING_KEY = \"main.test\"", "var_name": "ROUTING_KEY"}, {"original_string": "@Mocked\n\tConnectionFactory factory;", "modifier": "@Mocked", "type": "ConnectionFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "@Mocked\n\tChannel channel;", "modifier": "@Mocked", "type": "Channel", "declarator": "channel", "var_name": "channel"}, {"original_string": "@Mocked\n\tConnection connection;", "modifier": "@Mocked", "type": "Connection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private Publisher publisher;", "modifier": "private", "type": "Publisher", "declarator": "publisher", "var_name": "publisher"}], "file": "server/src/test/java/org/jvalue/ods/pubsub/PublisherTest.java"}, "test_case": {"identifier": "testExchangeType_DIRECT", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n\tpublic void testExchangeType_DIRECT () {\n\t\tpublisher.connect(URI, EXCHANGE, BuiltinExchangeType.DIRECT.getType());\n\t}", "signature": "void testExchangeType_DIRECT()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testExchangeType_DIRECT()", "class_method_signature": "PublisherTest.testExchangeType_DIRECT()", "testcase": true, "constructor": false, "invocations": ["connect", "getType"]}, "focal_class": {"identifier": "Publisher", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ConnectionFactory factory;", "modifier": "private", "type": "ConnectionFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "private Connection connection;", "modifier": "private", "type": "Connection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private Channel channel;", "modifier": "private", "type": "Channel", "declarator": "channel", "var_name": "channel"}, {"original_string": "@NotNull private String exchange;", "modifier": "@NotNull private", "type": "String", "declarator": "exchange", "var_name": "exchange"}, {"original_string": "@NotNull private String uri;", "modifier": "@NotNull private", "type": "String", "declarator": "uri", "var_name": "uri"}], "methods": [{"identifier": "Publisher", "parameters": "(ConnectionFactory factory)", "modifiers": "@Inject public", "return": "", "signature": " Publisher(ConnectionFactory factory)", "full_signature": "@Inject public  Publisher(ConnectionFactory factory)", "class_method_signature": "Publisher.Publisher(ConnectionFactory factory)", "testcase": false, "constructor": true}, {"identifier": "connect", "parameters": "(String uri, String exchange, String exchangeType)", "modifiers": "public", "return": "boolean", "signature": "boolean connect(String uri, String exchange, String exchangeType)", "full_signature": "public boolean connect(String uri, String exchange, String exchangeType)", "class_method_signature": "Publisher.connect(String uri, String exchange, String exchangeType)", "testcase": false, "constructor": false}, {"identifier": "publish", "parameters": "(String message)", "modifiers": "public", "return": "boolean", "signature": "boolean publish(String message)", "full_signature": "public boolean publish(String message)", "class_method_signature": "Publisher.publish(String message)", "testcase": false, "constructor": false}, {"identifier": "publish", "parameters": "(String message, String routingKey)", "modifiers": "public", "return": "boolean", "signature": "boolean publish(String message, String routingKey)", "full_signature": "public boolean publish(String message, String routingKey)", "class_method_signature": "Publisher.publish(String message, String routingKey)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "Publisher.close()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "Publisher.toString()", "testcase": false, "constructor": false}, {"identifier": "assertIsSupportedExchangeType", "parameters": "(String type)", "modifiers": "private", "return": "void", "signature": "void assertIsSupportedExchangeType(String type)", "full_signature": "private void assertIsSupportedExchangeType(String type)", "class_method_signature": "Publisher.assertIsSupportedExchangeType(String type)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/jvalue/ods/pubsub/Publisher.java"}, "focal_method": {"identifier": "connect", "parameters": "(String uri, String exchange, String exchangeType)", "modifiers": "public", "return": "boolean", "body": "public boolean connect(String uri, String exchange, String exchangeType) {\n\t\tassertIsSupportedExchangeType(exchangeType);\n\t\tthis.uri = uri;\n\t\tthis.exchange = exchange;\n\n\t\ttry {\n\t\t\tfactory.setUri(uri);\n\t\t} catch (URISyntaxException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (KeyManagementException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\ttry {\n\t\t\tLog.info(\"Connect to publish/subscribe server: \" + toString());\n\t\t\tconnection = factory.newConnection();\n\t\t\tchannel = connection.createChannel();\n\t\t\tchannel.exchangeDeclare(exchange, exchangeType,true);\n\t\t} catch (IOException | TimeoutException e) {\n\t\t\tLog.error(\"Unable to connect to publish/subscribe server: \" + toString());\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}", "signature": "boolean connect(String uri, String exchange, String exchangeType)", "full_signature": "public boolean connect(String uri, String exchange, String exchangeType)", "class_method_signature": "Publisher.connect(String uri, String exchange, String exchangeType)", "testcase": false, "constructor": false, "invocations": ["assertIsSupportedExchangeType", "setUri", "printStackTrace", "printStackTrace", "printStackTrace", "info", "toString", "newConnection", "createChannel", "exchangeDeclare", "error", "toString", "printStackTrace"]}, "repository": {"repo_id": 14989619, "url": "https://github.com/jvalue/open-data-service-v1", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 6, "size": 4525, "license": "licensed"}}