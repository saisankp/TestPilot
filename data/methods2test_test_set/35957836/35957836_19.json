{"test_class": {"identifier": "FetcherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static int MAX_ATTEMPTS = 3;", "modifier": "private final static", "type": "int", "declarator": "MAX_ATTEMPTS = 3", "var_name": "MAX_ATTEMPTS"}, {"original_string": "private final Fetcher fetcher = mock(Fetcher.class);", "modifier": "private final", "type": "Fetcher", "declarator": "fetcher = mock(Fetcher.class)", "var_name": "fetcher"}, {"original_string": "private final MailSender mailSender = mock(MailSender.class);", "modifier": "private final", "type": "MailSender", "declarator": "mailSender = mock(MailSender.class)", "var_name": "mailSender"}, {"original_string": "private final RetryableFetcher retryableFetcher = new RetryableFetcher(fetcher, MAX_ATTEMPTS, 0, 0, 0, mailSender);", "modifier": "private final", "type": "RetryableFetcher", "declarator": "retryableFetcher = new RetryableFetcher(fetcher, MAX_ATTEMPTS, 0, 0, 0, mailSender)", "var_name": "retryableFetcher"}], "file": "catwatch-backend/src/test/java/org/zalando/catwatch/backend/scheduler/FetcherTest.java"}, "test_case": {"identifier": "shouldRetryThreeTimes", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Test public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void shouldRetryThreeTimes() throws Exception {\n        when(fetcher.fetchData())\n                .thenThrow(CrawlerRetryException.class)\n                .thenThrow(CrawlerRetryException.class)\n                .thenReturn(true);\n\n        retryableFetcher.tryFetchData();\n\n        verify(fetcher, times(3)).fetchData();\n    }", "signature": "void shouldRetryThreeTimes()", "full_signature": "@SuppressWarnings(\"unchecked\") @Test public void shouldRetryThreeTimes()", "class_method_signature": "FetcherTest.shouldRetryThreeTimes()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "thenThrow", "thenThrow", "when", "fetchData", "tryFetchData", "fetchData", "verify", "times"]}, "focal_class": {"identifier": "Fetcher", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(Fetcher.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(Fetcher.class)", "var_name": "logger"}, {"original_string": "private final ProjectRepository projectRepository;", "modifier": "private final", "type": "ProjectRepository", "declarator": "projectRepository", "var_name": "projectRepository"}, {"original_string": "private final StatisticsRepository statisticsRepository;", "modifier": "private final", "type": "StatisticsRepository", "declarator": "statisticsRepository", "var_name": "statisticsRepository"}, {"original_string": "private final ContributorRepository contributorRepository;", "modifier": "private final", "type": "ContributorRepository", "declarator": "contributorRepository", "var_name": "contributorRepository"}, {"original_string": "private final SnapshotProvider snapshotProvider;", "modifier": "private final", "type": "SnapshotProvider", "declarator": "snapshotProvider", "var_name": "snapshotProvider"}, {"original_string": "private final String[] organizations;", "modifier": "private final", "type": "String[]", "declarator": "organizations", "var_name": "organizations"}], "methods": [{"identifier": "Fetcher", "parameters": "(ProjectRepository projectRepository,\n                   StatisticsRepository statisticsRepository,\n                   ContributorRepository contributorRepository,\n                   SnapshotProvider snapshotProvider,\n                   @Value(\"#{'${organization.list}'.split(',')}\") String[] organizations)", "modifiers": "@Autowired public", "return": "", "signature": " Fetcher(ProjectRepository projectRepository,\n                   StatisticsRepository statisticsRepository,\n                   ContributorRepository contributorRepository,\n                   SnapshotProvider snapshotProvider,\n                   @Value(\"#{'${organization.list}'.split(',')}\") String[] organizations)", "full_signature": "@Autowired public  Fetcher(ProjectRepository projectRepository,\n                   StatisticsRepository statisticsRepository,\n                   ContributorRepository contributorRepository,\n                   SnapshotProvider snapshotProvider,\n                   @Value(\"#{'${organization.list}'.split(',')}\") String[] organizations)", "class_method_signature": "Fetcher.Fetcher(ProjectRepository projectRepository,\n                   StatisticsRepository statisticsRepository,\n                   ContributorRepository contributorRepository,\n                   SnapshotProvider snapshotProvider,\n                   @Value(\"#{'${organization.list}'.split(',')}\") String[] organizations)", "testcase": false, "constructor": true}, {"identifier": "fetchData", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean fetchData()", "full_signature": "public boolean fetchData()", "class_method_signature": "Fetcher.fetchData()", "testcase": false, "constructor": false}, {"identifier": "getIpAndMacAddress", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getIpAndMacAddress()", "full_signature": "private String getIpAndMacAddress()", "class_method_signature": "Fetcher.getIpAndMacAddress()", "testcase": false, "constructor": false}], "file": "catwatch-backend/src/main/java/org/zalando/catwatch/backend/scheduler/Fetcher.java"}, "focal_method": {"identifier": "fetchData", "parameters": "()", "modifiers": "public", "return": "boolean", "body": "public boolean fetchData() {\n        Date snapshotDate = from(now());\n\n        logger.info(\"Starting fetching data. Snapshot date: {} {}, IP and MAC Address: {}.\",\n                snapshotDate, snapshotDate.getTime(), getIpAndMacAddress());\n\n        List<Future<Snapshot>> futures = new ArrayList<>();\n\n        try {\n            for (String organizationName : organizations) {\n                futures.add(snapshotProvider.takeSnapshot(organizationName, snapshotDate));\n                logger.info(\"Enqueued task TakeSnapshotTask for organization '{}'.\", organizationName);\n            }\n        } catch (IOException e) {\n            logger.error(\"Unable to fetch data from GitHub API. Missing GitHub API credentials?.\", e);\n            throw new CrawlerRetryException(e);\n        }\n        logger.info(\"Submitted {} TakeSnapshotTasks.\", futures.size());\n\n        for (Future<Snapshot> future : futures) {\n            try {\n                Snapshot snapshot = future.get();\n\n                statisticsRepository.save(snapshot.getStatistics());\n                projectRepository.save(snapshot.getProjects());\n                contributorRepository.save(snapshot.getContributors());\n                // TODO languagesRepository.save(snapshot.getLanguages());\n\n                logger.info(\"Successfully saved data for organization '{}'.\", snapshot.getStatistics()\n                        .getOrganizationName());\n            } catch (InterruptedException | ExecutionException e) {\n                logger.error(\"Error occurred while processing organization.\", e);\n                throw new CrawlerRetryException(e);\n            }\n        }\n        logger.info(\"Finished fetching data.\");\n        return true;\n    }", "signature": "boolean fetchData()", "full_signature": "public boolean fetchData()", "class_method_signature": "Fetcher.fetchData()", "testcase": false, "constructor": false, "invocations": ["from", "now", "info", "getTime", "getIpAndMacAddress", "add", "takeSnapshot", "info", "error", "info", "size", "get", "save", "getStatistics", "save", "getProjects", "save", "getContributors", "info", "getOrganizationName", "getStatistics", "error", "info"]}, "repository": {"repo_id": 35957836, "url": "https://github.com/zalando-incubator/catwatch", "language": "Java", "is_fork": false, "fork_count": 20, "stargazer_count": 55, "size": 1999, "license": "licensed"}}