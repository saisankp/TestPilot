{"test_class": {"identifier": "ContractApiFactoryTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "client/smart-contract/src/test/java/hera/contract/ContractApiFactoryTest.java"}, "test_case": {"identifier": "testCreate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCreate() {\n    final ContractAddress contractAddress = new AergoKeyGenerator().create().getAddress()\n        .adapt(ContractAddress.class);\n    final Class<TestContract> type = TestContract.class;\n    final TryCountAndInterval tryCountAndInterval = TryCountAndInterval.of(3, Time.of(100L));\n    final ContractApiFactory contractApiFactory = new ContractApiFactory();\n    assertNotNull(contractApiFactory.create(contractAddress, type));\n    assertNotNull(contractApiFactory.create(contractAddress, type, tryCountAndInterval));\n    assertNotNull(contractApiFactory.create(contractAddress, type, getClass().getClassLoader()));\n    assertNotNull(contractApiFactory\n        .create(contractAddress, type, tryCountAndInterval, getClass().getClassLoader()));\n  }", "signature": "void testCreate()", "full_signature": "@Test public void testCreate()", "class_method_signature": "ContractApiFactoryTest.testCreate()", "testcase": true, "constructor": false, "invocations": ["adapt", "getAddress", "create", "of", "of", "assertNotNull", "create", "assertNotNull", "create", "assertNotNull", "create", "getClassLoader", "getClass", "assertNotNull", "create", "getClassLoader", "getClass"]}, "focal_class": {"identifier": "ContractApiFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final TryCountAndInterval DEFAULT_TRY_COUNT_AND_INTERVAL = TryCountAndInterval\n      .of(3, Time.of(100L));", "modifier": "public static final", "type": "TryCountAndInterval", "declarator": "DEFAULT_TRY_COUNT_AND_INTERVAL = TryCountAndInterval\n      .of(3, Time.of(100L))", "var_name": "DEFAULT_TRY_COUNT_AND_INTERVAL"}, {"original_string": "protected final transient Logger logger = getLogger(getClass());", "modifier": "protected final transient", "type": "Logger", "declarator": "logger = getLogger(getClass())", "var_name": "logger"}], "methods": [{"identifier": "create", "parameters": "(final ContractAddress contractAddress,\n      final Class<ContractT> type)", "modifiers": "public", "return": "ContractApi<ContractT>", "signature": "ContractApi<ContractT> create(final ContractAddress contractAddress,\n      final Class<ContractT> type)", "full_signature": "public ContractApi<ContractT> create(final ContractAddress contractAddress,\n      final Class<ContractT> type)", "class_method_signature": "ContractApiFactory.create(final ContractAddress contractAddress,\n      final Class<ContractT> type)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(final ContractAddress contractAddress,\n      final Class<ContractT> type, final TryCountAndInterval tryCountAndInterval)", "modifiers": "public", "return": "ContractApi<ContractT>", "signature": "ContractApi<ContractT> create(final ContractAddress contractAddress,\n      final Class<ContractT> type, final TryCountAndInterval tryCountAndInterval)", "full_signature": "public ContractApi<ContractT> create(final ContractAddress contractAddress,\n      final Class<ContractT> type, final TryCountAndInterval tryCountAndInterval)", "class_method_signature": "ContractApiFactory.create(final ContractAddress contractAddress,\n      final Class<ContractT> type, final TryCountAndInterval tryCountAndInterval)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(final ContractAddress contractAddress,\n      final Class<ContractT> type, final ClassLoader classLoader)", "modifiers": "public", "return": "ContractApi<ContractT>", "signature": "ContractApi<ContractT> create(final ContractAddress contractAddress,\n      final Class<ContractT> type, final ClassLoader classLoader)", "full_signature": "public ContractApi<ContractT> create(final ContractAddress contractAddress,\n      final Class<ContractT> type, final ClassLoader classLoader)", "class_method_signature": "ContractApiFactory.create(final ContractAddress contractAddress,\n      final Class<ContractT> type, final ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(final ContractAddress contractAddress,\n      final Class<ContractT> type, final TryCountAndInterval tryCountAndInterval,\n      final ClassLoader classLoader)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "ContractApi<ContractT>", "signature": "ContractApi<ContractT> create(final ContractAddress contractAddress,\n      final Class<ContractT> type, final TryCountAndInterval tryCountAndInterval,\n      final ClassLoader classLoader)", "full_signature": "@SuppressWarnings(\"unchecked\") public ContractApi<ContractT> create(final ContractAddress contractAddress,\n      final Class<ContractT> type, final TryCountAndInterval tryCountAndInterval,\n      final ClassLoader classLoader)", "class_method_signature": "ContractApiFactory.create(final ContractAddress contractAddress,\n      final Class<ContractT> type, final TryCountAndInterval tryCountAndInterval,\n      final ClassLoader classLoader)", "testcase": false, "constructor": false}], "file": "client/smart-contract/src/main/java/hera/contract/ContractApiFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(final ContractAddress contractAddress,\n      final Class<ContractT> type)", "modifiers": "public", "return": "ContractApi<ContractT>", "body": "public <ContractT> ContractApi<ContractT> create(final ContractAddress contractAddress,\n      final Class<ContractT> type) {\n    return create(contractAddress, type, DEFAULT_TRY_COUNT_AND_INTERVAL,\n        getClass().getClassLoader());\n  }", "signature": "ContractApi<ContractT> create(final ContractAddress contractAddress,\n      final Class<ContractT> type)", "full_signature": "public ContractApi<ContractT> create(final ContractAddress contractAddress,\n      final Class<ContractT> type)", "class_method_signature": "ContractApiFactory.create(final ContractAddress contractAddress,\n      final Class<ContractT> type)", "testcase": false, "constructor": false, "invocations": ["create", "getClassLoader", "getClass"]}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}