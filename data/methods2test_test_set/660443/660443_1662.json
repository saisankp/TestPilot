{"test_class": {"identifier": "MassNumberRuleTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "static SmilesParser   smiles = new SmilesParser(SilentChemObjectBuilder.getInstance());", "modifier": "static", "type": "SmilesParser", "declarator": "smiles = new SmilesParser(SilentChemObjectBuilder.getInstance())", "var_name": "smiles"}, {"original_string": "static IAtomContainer molecule;", "modifier": "static", "type": "IAtomContainer", "declarator": "molecule", "var_name": "molecule"}], "file": "descriptor/cip/src/test/java/org/openscience/cdk/geometry/cip/rules/MassNumberRuleTest.java"}, "test_case": {"identifier": "testOrder", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOrder() {\n        VisitedAtoms visitedAtoms = new VisitedAtoms();\n        ILigand ligand1 = new Ligand(molecule, visitedAtoms, molecule.getAtom(1), molecule.getAtom(4));\n        ILigand ligand2 = new Ligand(molecule, visitedAtoms, molecule.getAtom(1), molecule.getAtom(3));\n        ILigand ligand3 = new Ligand(molecule, visitedAtoms, molecule.getAtom(1), molecule.getAtom(2));\n        ILigand ligand4 = new Ligand(molecule, visitedAtoms, molecule.getAtom(1), molecule.getAtom(0));\n        List<ILigand> ligands = new ArrayList<ILigand>();\n        ligands.add(ligand1);\n        ligands.add(ligand2);\n        ligands.add(ligand3);\n        ligands.add(ligand4);\n\n        Collections.sort(ligands, new MassNumberRule());\n        Assert.assertNotNull(ligands.get(0));\n        Assert.assertEquals(\"H\", ligands.get(0).getLigandAtom().getSymbol());\n        Assert.assertEquals(\"H\", ligands.get(1).getLigandAtom().getSymbol());\n        Assert.assertEquals(2, ligands.get(1).getLigandAtom().getMassNumber().intValue());\n        Assert.assertEquals(\"C\", ligands.get(2).getLigandAtom().getSymbol());\n        Assert.assertEquals(\"C\", ligands.get(3).getLigandAtom().getSymbol());\n        Assert.assertEquals(13, ligands.get(3).getLigandAtom().getMassNumber().intValue());\n    }", "signature": "void testOrder()", "full_signature": "@Test public void testOrder()", "class_method_signature": "MassNumberRuleTest.testOrder()", "testcase": true, "constructor": false, "invocations": ["getAtom", "getAtom", "getAtom", "getAtom", "getAtom", "getAtom", "getAtom", "getAtom", "add", "add", "add", "add", "sort", "assertNotNull", "get", "assertEquals", "getSymbol", "getLigandAtom", "get", "assertEquals", "getSymbol", "getLigandAtom", "get", "assertEquals", "intValue", "getMassNumber", "getLigandAtom", "get", "assertEquals", "getSymbol", "getLigandAtom", "get", "assertEquals", "getSymbol", "getLigandAtom", "get", "assertEquals", "intValue", "getMassNumber", "getLigandAtom", "get"]}, "focal_class": {"identifier": "MassNumberRule", "superclass": "", "interfaces": "implements ISequenceSubRule<ILigand>", "fields": [{"original_string": "ILoggingTool   logger = LoggingToolFactory.createLoggingTool(MassNumberRule.class);", "modifier": "", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(MassNumberRule.class)", "var_name": "logger"}, {"original_string": "IsotopeFactory factory;", "modifier": "", "type": "IsotopeFactory", "declarator": "factory", "var_name": "factory"}], "methods": [{"identifier": "compare", "parameters": "(ILigand ligand1, ILigand ligand2)", "modifiers": "@Override public", "return": "int", "signature": "int compare(ILigand ligand1, ILigand ligand2)", "full_signature": "@Override public int compare(ILigand ligand1, ILigand ligand2)", "class_method_signature": "MassNumberRule.compare(ILigand ligand1, ILigand ligand2)", "testcase": false, "constructor": false}, {"identifier": "ensureFactory", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void ensureFactory()", "full_signature": "private void ensureFactory()", "class_method_signature": "MassNumberRule.ensureFactory()", "testcase": false, "constructor": false}, {"identifier": "getMassNumber", "parameters": "(ILigand ligand)", "modifiers": "private", "return": "Integer", "signature": "Integer getMassNumber(ILigand ligand)", "full_signature": "private Integer getMassNumber(ILigand ligand)", "class_method_signature": "MassNumberRule.getMassNumber(ILigand ligand)", "testcase": false, "constructor": false}], "file": "descriptor/cip/src/main/java/org/openscience/cdk/geometry/cip/rules/MassNumberRule.java"}, "focal_method": {"identifier": "getMassNumber", "parameters": "(ILigand ligand)", "modifiers": "private", "return": "Integer", "body": "private Integer getMassNumber(ILigand ligand) {\n        Integer massNumber = ligand.getLigandAtom().getMassNumber();\n        if (massNumber != null) return massNumber;\n        if (factory == null) return 0;\n        return factory.getMajorIsotope(ligand.getLigandAtom().getSymbol()).getMassNumber();\n    }", "signature": "Integer getMassNumber(ILigand ligand)", "full_signature": "private Integer getMassNumber(ILigand ligand)", "class_method_signature": "MassNumberRule.getMassNumber(ILigand ligand)", "testcase": false, "constructor": false, "invocations": ["getMassNumber", "getLigandAtom", "getMassNumber", "getMajorIsotope", "getSymbol", "getLigandAtom"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}