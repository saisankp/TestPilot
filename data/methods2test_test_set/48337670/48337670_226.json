{"test_class": {"identifier": "MetadataRegistryImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ITEM_NAME = \"itemName\";", "modifier": "private static final", "type": "String", "declarator": "ITEM_NAME = \"itemName\"", "var_name": "ITEM_NAME"}, {"original_string": "@SuppressWarnings(\"rawtypes\")\n    private @Mock ServiceReference managedProviderRef;", "modifier": "@SuppressWarnings(\"rawtypes\")\n    private @Mock", "type": "ServiceReference", "declarator": "managedProviderRef", "var_name": "managedProviderRef"}, {"original_string": "private @Mock BundleContext bundleContext;", "modifier": "private @Mock", "type": "BundleContext", "declarator": "bundleContext", "var_name": "bundleContext"}, {"original_string": "private @Mock ManagedMetadataProvider managedProvider;", "modifier": "private @Mock", "type": "ManagedMetadataProvider", "declarator": "managedProvider", "var_name": "managedProvider"}, {"original_string": "private MetadataRegistryImpl registry;", "modifier": "private", "type": "MetadataRegistryImpl", "declarator": "registry", "var_name": "registry"}, {"original_string": "private ServiceListener providerTracker;", "modifier": "private", "type": "ServiceListener", "declarator": "providerTracker", "var_name": "providerTracker"}], "file": "bundles/org.openhab.core/src/test/java/org/openhab/core/internal/items/MetadataRegistryImplTest.java"}, "test_case": {"identifier": "testRemoveItemMetadata", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRemoveItemMetadata() {\n        ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);\n\n        registry.removeItemMetadata(\"itemName\");\n\n        verify(managedProvider).removeItemMetadata(captor.capture());\n        assertEquals(\"itemName\", captor.getValue());\n    }", "signature": "void testRemoveItemMetadata()", "full_signature": "@Test public void testRemoveItemMetadata()", "class_method_signature": "MetadataRegistryImplTest.testRemoveItemMetadata()", "testcase": true, "constructor": false, "invocations": ["forClass", "removeItemMetadata", "removeItemMetadata", "verify", "capture", "assertEquals", "getValue"]}, "focal_class": {"identifier": "MetadataRegistryImpl", "superclass": "extends AbstractRegistry<Metadata, MetadataKey, MetadataProvider>", "interfaces": "implements MetadataRegistry", "fields": [], "methods": [{"identifier": "MetadataRegistryImpl", "parameters": "()", "modifiers": "public", "return": "", "signature": " MetadataRegistryImpl()", "full_signature": "public  MetadataRegistryImpl()", "class_method_signature": "MetadataRegistryImpl.MetadataRegistryImpl()", "testcase": false, "constructor": true}, {"identifier": "activate", "parameters": "(BundleContext context)", "modifiers": "@Override @Activate protected", "return": "void", "signature": "void activate(BundleContext context)", "full_signature": "@Override @Activate protected void activate(BundleContext context)", "class_method_signature": "MetadataRegistryImpl.activate(BundleContext context)", "testcase": false, "constructor": false}, {"identifier": "deactivate", "parameters": "()", "modifiers": "@Override @Deactivate protected", "return": "void", "signature": "void deactivate()", "full_signature": "@Override @Deactivate protected void deactivate()", "class_method_signature": "MetadataRegistryImpl.deactivate()", "testcase": false, "constructor": false}, {"identifier": "isInternalNamespace", "parameters": "(String namespace)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isInternalNamespace(String namespace)", "full_signature": "@Override public boolean isInternalNamespace(String namespace)", "class_method_signature": "MetadataRegistryImpl.isInternalNamespace(String namespace)", "testcase": false, "constructor": false}, {"identifier": "setEventPublisher", "parameters": "(EventPublisher eventPublisher)", "modifiers": "@Reference(cardinality = ReferenceCardinality.OPTIONAL, policy = ReferencePolicy.DYNAMIC) @Override protected", "return": "void", "signature": "void setEventPublisher(EventPublisher eventPublisher)", "full_signature": "@Reference(cardinality = ReferenceCardinality.OPTIONAL, policy = ReferencePolicy.DYNAMIC) @Override protected void setEventPublisher(EventPublisher eventPublisher)", "class_method_signature": "MetadataRegistryImpl.setEventPublisher(EventPublisher eventPublisher)", "testcase": false, "constructor": false}, {"identifier": "unsetEventPublisher", "parameters": "(EventPublisher eventPublisher)", "modifiers": "@Override protected", "return": "void", "signature": "void unsetEventPublisher(EventPublisher eventPublisher)", "full_signature": "@Override protected void unsetEventPublisher(EventPublisher eventPublisher)", "class_method_signature": "MetadataRegistryImpl.unsetEventPublisher(EventPublisher eventPublisher)", "testcase": false, "constructor": false}, {"identifier": "setManagedProvider", "parameters": "(ManagedMetadataProvider provider)", "modifiers": "@Reference(cardinality = ReferenceCardinality.OPTIONAL, policy = ReferencePolicy.DYNAMIC) protected", "return": "void", "signature": "void setManagedProvider(ManagedMetadataProvider provider)", "full_signature": "@Reference(cardinality = ReferenceCardinality.OPTIONAL, policy = ReferencePolicy.DYNAMIC) protected void setManagedProvider(ManagedMetadataProvider provider)", "class_method_signature": "MetadataRegistryImpl.setManagedProvider(ManagedMetadataProvider provider)", "testcase": false, "constructor": false}, {"identifier": "unsetManagedProvider", "parameters": "(ManagedMetadataProvider managedProvider)", "modifiers": "protected", "return": "void", "signature": "void unsetManagedProvider(ManagedMetadataProvider managedProvider)", "full_signature": "protected void unsetManagedProvider(ManagedMetadataProvider managedProvider)", "class_method_signature": "MetadataRegistryImpl.unsetManagedProvider(ManagedMetadataProvider managedProvider)", "testcase": false, "constructor": false}, {"identifier": "removeItemMetadata", "parameters": "(String itemName)", "modifiers": "@Override public", "return": "void", "signature": "void removeItemMetadata(String itemName)", "full_signature": "@Override public void removeItemMetadata(String itemName)", "class_method_signature": "MetadataRegistryImpl.removeItemMetadata(String itemName)", "testcase": false, "constructor": false}], "file": "bundles/org.openhab.core/src/main/java/org/openhab/core/internal/items/MetadataRegistryImpl.java"}, "focal_method": {"identifier": "removeItemMetadata", "parameters": "(String itemName)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void removeItemMetadata(String itemName) {\n        // remove our metadata for that item\n        getManagedProvider()\n                .ifPresent(managedProvider -> ((ManagedMetadataProvider) managedProvider).removeItemMetadata(itemName));\n    }", "signature": "void removeItemMetadata(String itemName)", "full_signature": "@Override public void removeItemMetadata(String itemName)", "class_method_signature": "MetadataRegistryImpl.removeItemMetadata(String itemName)", "testcase": false, "constructor": false, "invocations": ["ifPresent", "getManagedProvider", "removeItemMetadata"]}, "repository": {"repo_id": 48337670, "url": "https://github.com/openhab/openhab-core", "stars": 241, "created": "12/20/2015 9:23:20 PM +00:00", "updates": "2020-01-27T16:55:53+00:00", "fork": "False", "license": "licensed"}}