{"test_class": {"identifier": "FlowTest", "superclass": "", "interfaces": "", "fields": [], "file": "commons/flow/src/test/java/org/openehealth/ipf/commons/flow/domain/FlowTest.java"}, "test_case": {"identifier": "testAcknowledge", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAcknowledge() throws Exception {\n\t    Flow flow = createFlow(\"blah\", 0);\n\t    assertEquals(0, flow.getStatusCount(CLEAN));\n        flow.acknowledge(\"0.0\", false);\n\t    flow.acknowledge(\"0.1\", false);\n        assertEquals(2, flow.getStatusCount(CLEAN));\n\t}", "signature": "void testAcknowledge()", "full_signature": "@Test public void testAcknowledge()", "class_method_signature": "FlowTest.testAcknowledge()", "testcase": true, "constructor": false, "invocations": ["createFlow", "assertEquals", "getStatusCount", "acknowledge", "acknowledge", "assertEquals", "getStatusCount"]}, "focal_class": {"identifier": "Flow", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Id\n    @Column(name=\"C_ID\")\n    @DocumentId\n    private Long identifier;", "modifier": "@Id\n    @Column(name=\"C_ID\")\n    @DocumentId\n    private", "type": "Long", "declarator": "identifier", "var_name": "identifier"}, {"original_string": "@Column(name=\"C_APPLICATION\")\n    @Index(name=\"C_APPLICATION_IDX\")\n    private String application;", "modifier": "@Column(name=\"C_APPLICATION\")\n    @Index(name=\"C_APPLICATION_IDX\")\n    private", "type": "String", "declarator": "application", "var_name": "application"}, {"original_string": "@Lob\n    @Column(name=\"C_PACKET\", length=Integer.MAX_VALUE)\n    private Blob packet;", "modifier": "@Lob\n    @Column(name=\"C_PACKET\", length=Integer.MAX_VALUE)\n    private", "type": "Blob", "declarator": "packet", "var_name": "packet"}, {"original_string": "@Column(name=\"C_CREATION_TIME\")\n    private Date creationTime;", "modifier": "@Column(name=\"C_CREATION_TIME\")\n    private", "type": "Date", "declarator": "creationTime", "var_name": "creationTime"}, {"original_string": "@Column(name=\"C_REPLAY_TIME\")\n    private Date replayTime;", "modifier": "@Column(name=\"C_REPLAY_TIME\")\n    private", "type": "Date", "declarator": "replayTime", "var_name": "replayTime"}, {"original_string": "@Column(name=\"C_REPLAY_COUNT\")\n    private int replayCount;", "modifier": "@Column(name=\"C_REPLAY_COUNT\")\n    private", "type": "int", "declarator": "replayCount", "var_name": "replayCount"}, {"original_string": "@Column(name=\"C_ACK_COUNT_EXPECTED\")\n    private Integer ackCountExpected;", "modifier": "@Column(name=\"C_ACK_COUNT_EXPECTED\")\n    private", "type": "Integer", "declarator": "ackCountExpected", "var_name": "ackCountExpected"}, {"original_string": "@Column(name=\"C_DERIVED_STATUS\")\n    private FlowStatus derivedStatus;", "modifier": "@Column(name=\"C_DERIVED_STATUS\")\n    private", "type": "FlowStatus", "declarator": "derivedStatus", "var_name": "derivedStatus"}, {"original_string": "@OneToMany(fetch=FetchType.LAZY)\n    @JoinColumn(name = \"C_FLOW_ID\")\n    @Cascade({CascadeType.ALL, CascadeType.DELETE_ORPHAN })\n    private Set<FlowPart> parts;", "modifier": "@OneToMany(fetch=FetchType.LAZY)\n    @JoinColumn(name = \"C_FLOW_ID\")\n    @Cascade({CascadeType.ALL, CascadeType.DELETE_ORPHAN })\n    private", "type": "Set<FlowPart>", "declarator": "parts", "var_name": "parts"}, {"original_string": "@IndexedEmbedded(depth = 1)\n    @OneToOne(fetch=FetchType.LAZY)\n    @JoinColumn(name=\"FLOW_MESSAGE_ID\", unique=true, nullable=true, updatable=true)\n    @Cascade({CascadeType.ALL})\n    private FlowMessage flowMessage;", "modifier": "@IndexedEmbedded(depth = 1)\n    @OneToOne(fetch=FetchType.LAZY)\n    @JoinColumn(name=\"FLOW_MESSAGE_ID\", unique=true, nullable=true, updatable=true)\n    @Cascade({CascadeType.ALL})\n    private", "type": "FlowMessage", "declarator": "flowMessage", "var_name": "flowMessage"}], "methods": [{"identifier": "Flow", "parameters": "()", "modifiers": "public", "return": "", "signature": " Flow()", "full_signature": "public  Flow()", "class_method_signature": "Flow.Flow()", "testcase": false, "constructor": true}, {"identifier": "Flow", "parameters": "(String application)", "modifiers": "public", "return": "", "signature": " Flow(String application)", "full_signature": "public  Flow(String application)", "class_method_signature": "Flow.Flow(String application)", "testcase": false, "constructor": true}, {"identifier": "getIdentifier", "parameters": "()", "modifiers": "public", "return": "Long", "signature": "Long getIdentifier()", "full_signature": "public Long getIdentifier()", "class_method_signature": "Flow.getIdentifier()", "testcase": false, "constructor": false}, {"identifier": "setIdentifier", "parameters": "(Long identifier)", "modifiers": "public", "return": "void", "signature": "void setIdentifier(Long identifier)", "full_signature": "public void setIdentifier(Long identifier)", "class_method_signature": "Flow.setIdentifier(Long identifier)", "testcase": false, "constructor": false}, {"identifier": "getApplication", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getApplication()", "full_signature": "public String getApplication()", "class_method_signature": "Flow.getApplication()", "testcase": false, "constructor": false}, {"identifier": "setApplication", "parameters": "(String application)", "modifiers": "public", "return": "void", "signature": "void setApplication(String application)", "full_signature": "public void setApplication(String application)", "class_method_signature": "Flow.setApplication(String application)", "testcase": false, "constructor": false}, {"identifier": "getPacket", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getPacket()", "full_signature": "public byte[] getPacket()", "class_method_signature": "Flow.getPacket()", "testcase": false, "constructor": false}, {"identifier": "setPacket", "parameters": "(byte[] packet)", "modifiers": "public", "return": "void", "signature": "void setPacket(byte[] packet)", "full_signature": "public void setPacket(byte[] packet)", "class_method_signature": "Flow.setPacket(byte[] packet)", "testcase": false, "constructor": false}, {"identifier": "getCreationTime", "parameters": "()", "modifiers": "public", "return": "Date", "signature": "Date getCreationTime()", "full_signature": "public Date getCreationTime()", "class_method_signature": "Flow.getCreationTime()", "testcase": false, "constructor": false}, {"identifier": "setCreationTime", "parameters": "(Date start)", "modifiers": "public", "return": "void", "signature": "void setCreationTime(Date start)", "full_signature": "public void setCreationTime(Date start)", "class_method_signature": "Flow.setCreationTime(Date start)", "testcase": false, "constructor": false}, {"identifier": "getReplayTime", "parameters": "()", "modifiers": "public", "return": "Date", "signature": "Date getReplayTime()", "full_signature": "public Date getReplayTime()", "class_method_signature": "Flow.getReplayTime()", "testcase": false, "constructor": false}, {"identifier": "setReplayTime", "parameters": "(Date replayTime)", "modifiers": "public", "return": "void", "signature": "void setReplayTime(Date replayTime)", "full_signature": "public void setReplayTime(Date replayTime)", "class_method_signature": "Flow.setReplayTime(Date replayTime)", "testcase": false, "constructor": false}, {"identifier": "getReplayCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getReplayCount()", "full_signature": "public int getReplayCount()", "class_method_signature": "Flow.getReplayCount()", "testcase": false, "constructor": false}, {"identifier": "setReplayCount", "parameters": "(int replayCount)", "modifiers": "public", "return": "void", "signature": "void setReplayCount(int replayCount)", "full_signature": "public void setReplayCount(int replayCount)", "class_method_signature": "Flow.setReplayCount(int replayCount)", "testcase": false, "constructor": false}, {"identifier": "incrementReplayCount", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void incrementReplayCount()", "full_signature": "public void incrementReplayCount()", "class_method_signature": "Flow.incrementReplayCount()", "testcase": false, "constructor": false}, {"identifier": "getAckCountExpected", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getAckCountExpected()", "full_signature": "public int getAckCountExpected()", "class_method_signature": "Flow.getAckCountExpected()", "testcase": false, "constructor": false}, {"identifier": "setAckCountExpected", "parameters": "(int ackCountExpected)", "modifiers": "public", "return": "void", "signature": "void setAckCountExpected(int ackCountExpected)", "full_signature": "public void setAckCountExpected(int ackCountExpected)", "class_method_signature": "Flow.setAckCountExpected(int ackCountExpected)", "testcase": false, "constructor": false}, {"identifier": "getDerivedStatus", "parameters": "()", "modifiers": "public", "return": "FlowStatus", "signature": "FlowStatus getDerivedStatus()", "full_signature": "public FlowStatus getDerivedStatus()", "class_method_signature": "Flow.getDerivedStatus()", "testcase": false, "constructor": false}, {"identifier": "setDerivedStatus", "parameters": "(FlowStatus derivedStatus)", "modifiers": "public", "return": "void", "signature": "void setDerivedStatus(FlowStatus derivedStatus)", "full_signature": "public void setDerivedStatus(FlowStatus derivedStatus)", "class_method_signature": "Flow.setDerivedStatus(FlowStatus derivedStatus)", "testcase": false, "constructor": false}, {"identifier": "getParts", "parameters": "()", "modifiers": "public", "return": "Set<FlowPart>", "signature": "Set<FlowPart> getParts()", "full_signature": "public Set<FlowPart> getParts()", "class_method_signature": "Flow.getParts()", "testcase": false, "constructor": false}, {"identifier": "getPart", "parameters": "(String path, FlowStatus status)", "modifiers": "public", "return": "FlowPart", "signature": "FlowPart getPart(String path, FlowStatus status)", "full_signature": "public FlowPart getPart(String path, FlowStatus status)", "class_method_signature": "Flow.getPart(String path, FlowStatus status)", "testcase": false, "constructor": false}, {"identifier": "getPart", "parameters": "(String path)", "modifiers": "public", "return": "FlowPart", "signature": "FlowPart getPart(String path)", "full_signature": "public FlowPart getPart(String path)", "class_method_signature": "Flow.getPart(String path)", "testcase": false, "constructor": false}, {"identifier": "getFlowMessage", "parameters": "()", "modifiers": "", "return": "FlowMessage", "signature": "FlowMessage getFlowMessage()", "full_signature": " FlowMessage getFlowMessage()", "class_method_signature": "Flow.getFlowMessage()", "testcase": false, "constructor": false}, {"identifier": "getFlowMessageText", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFlowMessageText()", "full_signature": "public String getFlowMessageText()", "class_method_signature": "Flow.getFlowMessageText()", "testcase": false, "constructor": false}, {"identifier": "setFlowMessageText", "parameters": "(String message)", "modifiers": "public", "return": "void", "signature": "void setFlowMessageText(String message)", "full_signature": "public void setFlowMessageText(String message)", "class_method_signature": "Flow.setFlowMessageText(String message)", "testcase": false, "constructor": false}, {"identifier": "isAckCountExpectationSet", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAckCountExpectationSet()", "full_signature": "public boolean isAckCountExpectationSet()", "class_method_signature": "Flow.isAckCountExpectationSet()", "testcase": false, "constructor": false}, {"identifier": "isAckCountExpectedReached", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAckCountExpectedReached()", "full_signature": "public boolean isAckCountExpectedReached()", "class_method_signature": "Flow.isAckCountExpectedReached()", "testcase": false, "constructor": false}, {"identifier": "getStatusCount", "parameters": "(FlowStatus status)", "modifiers": "public", "return": "int", "signature": "int getStatusCount(FlowStatus status)", "full_signature": "public int getStatusCount(FlowStatus status)", "class_method_signature": "Flow.getStatusCount(FlowStatus status)", "testcase": false, "constructor": false}, {"identifier": "getStatus", "parameters": "()", "modifiers": "public", "return": "FlowStatus", "signature": "FlowStatus getStatus()", "full_signature": "public FlowStatus getStatus()", "class_method_signature": "Flow.getStatus()", "testcase": false, "constructor": false}, {"identifier": "clearErrorStatus", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearErrorStatus()", "full_signature": "public void clearErrorStatus()", "class_method_signature": "Flow.clearErrorStatus()", "testcase": false, "constructor": false}, {"identifier": "getLatestUpdate", "parameters": "()", "modifiers": "public", "return": "Date", "signature": "Date getLatestUpdate()", "full_signature": "public Date getLatestUpdate()", "class_method_signature": "Flow.getLatestUpdate()", "testcase": false, "constructor": false}, {"identifier": "getPartDuration", "parameters": "(FlowPart part)", "modifiers": "public", "return": "long", "signature": "long getPartDuration(FlowPart part)", "full_signature": "public long getPartDuration(FlowPart part)", "class_method_signature": "Flow.getPartDuration(FlowPart part)", "testcase": false, "constructor": false}, {"identifier": "acknowledge", "parameters": "(String path, boolean cleanup)", "modifiers": "public", "return": "void", "signature": "void acknowledge(String path, boolean cleanup)", "full_signature": "public void acknowledge(String path, boolean cleanup)", "class_method_signature": "Flow.acknowledge(String path, boolean cleanup)", "testcase": false, "constructor": false}, {"identifier": "acknowledge", "parameters": "(String path, boolean cleanup, String partMessageText)", "modifiers": "public", "return": "void", "signature": "void acknowledge(String path, boolean cleanup, String partMessageText)", "full_signature": "public void acknowledge(String path, boolean cleanup, String partMessageText)", "class_method_signature": "Flow.acknowledge(String path, boolean cleanup, String partMessageText)", "testcase": false, "constructor": false}, {"identifier": "invalidate", "parameters": "(String path)", "modifiers": "public", "return": "void", "signature": "void invalidate(String path)", "full_signature": "public void invalidate(String path)", "class_method_signature": "Flow.invalidate(String path)", "testcase": false, "constructor": false}, {"identifier": "invalidate", "parameters": "(String path, String partTextMessage)", "modifiers": "public", "return": "void", "signature": "void invalidate(String path, String partTextMessage)", "full_signature": "public void invalidate(String path, String partTextMessage)", "class_method_signature": "Flow.invalidate(String path, String partTextMessage)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(String path, FlowStatus status)", "modifiers": "protected", "return": "FlowPart", "signature": "FlowPart update(String path, FlowStatus status)", "full_signature": "protected FlowPart update(String path, FlowStatus status)", "class_method_signature": "Flow.update(String path, FlowStatus status)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(String path)", "modifiers": "public", "return": "boolean", "signature": "boolean filter(String path)", "full_signature": "public boolean filter(String path)", "class_method_signature": "Flow.filter(String path)", "testcase": false, "constructor": false}, {"identifier": "isReplayable", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isReplayable()", "full_signature": "public boolean isReplayable()", "class_method_signature": "Flow.isReplayable()", "testcase": false, "constructor": false}, {"identifier": "prepareReplay", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] prepareReplay()", "full_signature": "public byte[] prepareReplay()", "class_method_signature": "Flow.prepareReplay()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "Flow.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Flow.hashCode()", "testcase": false, "constructor": false}, {"identifier": "getInfo", "parameters": "()", "modifiers": "public", "return": "FlowInfo", "signature": "FlowInfo getInfo()", "full_signature": "public FlowInfo getInfo()", "class_method_signature": "Flow.getInfo()", "testcase": false, "constructor": false}, {"identifier": "getInfo", "parameters": "(boolean includeText)", "modifiers": "public", "return": "FlowInfo", "signature": "FlowInfo getInfo(boolean includeText)", "full_signature": "public FlowInfo getInfo(boolean includeText)", "class_method_signature": "Flow.getInfo(boolean includeText)", "testcase": false, "constructor": false}, {"identifier": "getInfos", "parameters": "(List<Flow> flows)", "modifiers": "public static", "return": "List<FlowInfo>", "signature": "List<FlowInfo> getInfos(List<Flow> flows)", "full_signature": "public static List<FlowInfo> getInfos(List<Flow> flows)", "class_method_signature": "Flow.getInfos(List<Flow> flows)", "testcase": false, "constructor": false}, {"identifier": "currentTime", "parameters": "()", "modifiers": "private static", "return": "Date", "signature": "Date currentTime()", "full_signature": "private static Date currentTime()", "class_method_signature": "Flow.currentTime()", "testcase": false, "constructor": false}], "file": "commons/flow/src/main/java/org/openehealth/ipf/commons/flow/domain/Flow.java"}, "focal_method": {"identifier": "acknowledge", "parameters": "(String path, boolean cleanup)", "modifiers": "public", "return": "void", "body": "public void acknowledge(String path, boolean cleanup) {\n        acknowledge(path, cleanup, null);\n    }", "signature": "void acknowledge(String path, boolean cleanup)", "full_signature": "public void acknowledge(String path, boolean cleanup)", "class_method_signature": "Flow.acknowledge(String path, boolean cleanup)", "testcase": false, "constructor": false, "invocations": ["acknowledge"]}, "repository": {"repo_id": 793164, "url": "https://github.com/krasserm/ipf", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 30233, "license": "licensed"}}