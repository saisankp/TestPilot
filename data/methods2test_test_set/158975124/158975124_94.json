{"test_class": {"identifier": "MTreeTest", "superclass": "", "interfaces": "", "fields": [], "file": "server/src/test/java/org/apache/iotdb/db/metadata/MTreeTest.java"}, "test_case": {"identifier": "testIllegalStorageGroup", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testIllegalStorageGroup() {\n    MTree root = new MTree();\n    try {\n      root.setStorageGroup(new PartialPath(\"root.\\\"sg.ln\\\"\"));\n    } catch (MetadataException e) {\n      Assert.assertEquals(\"The storage group name can only be characters, numbers and underscores. root.\\\"sg.ln\\\" is not a legal path\",\n          e.getMessage());\n    }\n  }", "signature": "void testIllegalStorageGroup()", "full_signature": "@Test public void testIllegalStorageGroup()", "class_method_signature": "MTreeTest.testIllegalStorageGroup()", "testcase": true, "constructor": false, "invocations": ["setStorageGroup", "assertEquals", "getMessage"]}, "focal_class": {"identifier": "MTree", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = -4200394435237291964L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -4200394435237291964L", "var_name": "serialVersionUID"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(MTree.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(MTree.class)", "var_name": "logger"}, {"original_string": "private MNode root;", "modifier": "private", "type": "MNode", "declarator": "root", "var_name": "root"}, {"original_string": "private static transient ThreadLocal<Integer> limit = new ThreadLocal<>();", "modifier": "private static transient", "type": "ThreadLocal<Integer>", "declarator": "limit = new ThreadLocal<>()", "var_name": "limit"}, {"original_string": "private static transient ThreadLocal<Integer> offset = new ThreadLocal<>();", "modifier": "private static transient", "type": "ThreadLocal<Integer>", "declarator": "offset = new ThreadLocal<>()", "var_name": "offset"}, {"original_string": "private static transient ThreadLocal<Integer> count = new ThreadLocal<>();", "modifier": "private static transient", "type": "ThreadLocal<Integer>", "declarator": "count = new ThreadLocal<>()", "var_name": "count"}, {"original_string": "private static transient ThreadLocal<Integer> curOffset = new ThreadLocal<>();", "modifier": "private static transient", "type": "ThreadLocal<Integer>", "declarator": "curOffset = new ThreadLocal<>()", "var_name": "curOffset"}, {"original_string": "public static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();", "modifier": "public static final", "type": "Gson", "declarator": "GSON = new GsonBuilder().setPrettyPrinting().create()", "var_name": "GSON"}], "methods": [{"identifier": "MTree", "parameters": "()", "modifiers": "", "return": "", "signature": " MTree()", "full_signature": "  MTree()", "class_method_signature": "MTree.MTree()", "testcase": false, "constructor": true}, {"identifier": "MTree", "parameters": "(MNode root)", "modifiers": "private", "return": "", "signature": " MTree(MNode root)", "full_signature": "private  MTree(MNode root)", "class_method_signature": "MTree.MTree(MNode root)", "testcase": false, "constructor": true}, {"identifier": "createTimeseries", "parameters": "(PartialPath path, TSDataType dataType, TSEncoding encoding,\n      CompressionType compressor, Map<String, String> props, String alias)", "modifiers": "", "return": "MeasurementMNode", "signature": "MeasurementMNode createTimeseries(PartialPath path, TSDataType dataType, TSEncoding encoding,\n      CompressionType compressor, Map<String, String> props, String alias)", "full_signature": " MeasurementMNode createTimeseries(PartialPath path, TSDataType dataType, TSEncoding encoding,\n      CompressionType compressor, Map<String, String> props, String alias)", "class_method_signature": "MTree.createTimeseries(PartialPath path, TSDataType dataType, TSEncoding encoding,\n      CompressionType compressor, Map<String, String> props, String alias)", "testcase": false, "constructor": false}, {"identifier": "getDeviceNodeWithAutoCreating", "parameters": "(PartialPath deviceId, int sgLevel)", "modifiers": "", "return": "MNode", "signature": "MNode getDeviceNodeWithAutoCreating(PartialPath deviceId, int sgLevel)", "full_signature": " MNode getDeviceNodeWithAutoCreating(PartialPath deviceId, int sgLevel)", "class_method_signature": "MTree.getDeviceNodeWithAutoCreating(PartialPath deviceId, int sgLevel)", "testcase": false, "constructor": false}, {"identifier": "isPathExist", "parameters": "(PartialPath path)", "modifiers": "", "return": "boolean", "signature": "boolean isPathExist(PartialPath path)", "full_signature": " boolean isPathExist(PartialPath path)", "class_method_signature": "MTree.isPathExist(PartialPath path)", "testcase": false, "constructor": false}, {"identifier": "setStorageGroup", "parameters": "(PartialPath path)", "modifiers": "", "return": "void", "signature": "void setStorageGroup(PartialPath path)", "full_signature": " void setStorageGroup(PartialPath path)", "class_method_signature": "MTree.setStorageGroup(PartialPath path)", "testcase": false, "constructor": false}, {"identifier": "checkStorageGroup", "parameters": "(String storageGroup)", "modifiers": "private", "return": "void", "signature": "void checkStorageGroup(String storageGroup)", "full_signature": "private void checkStorageGroup(String storageGroup)", "class_method_signature": "MTree.checkStorageGroup(String storageGroup)", "testcase": false, "constructor": false}, {"identifier": "deleteStorageGroup", "parameters": "(PartialPath path)", "modifiers": "", "return": "List<MeasurementMNode>", "signature": "List<MeasurementMNode> deleteStorageGroup(PartialPath path)", "full_signature": " List<MeasurementMNode> deleteStorageGroup(PartialPath path)", "class_method_signature": "MTree.deleteStorageGroup(PartialPath path)", "testcase": false, "constructor": false}, {"identifier": "isStorageGroup", "parameters": "(PartialPath path)", "modifiers": "", "return": "boolean", "signature": "boolean isStorageGroup(PartialPath path)", "full_signature": " boolean isStorageGroup(PartialPath path)", "class_method_signature": "MTree.isStorageGroup(PartialPath path)", "testcase": false, "constructor": false}, {"identifier": "deleteTimeseriesAndReturnEmptyStorageGroup", "parameters": "(PartialPath path)", "modifiers": "", "return": "Pair<PartialPath, MeasurementMNode>", "signature": "Pair<PartialPath, MeasurementMNode> deleteTimeseriesAndReturnEmptyStorageGroup(PartialPath path)", "full_signature": " Pair<PartialPath, MeasurementMNode> deleteTimeseriesAndReturnEmptyStorageGroup(PartialPath path)", "class_method_signature": "MTree.deleteTimeseriesAndReturnEmptyStorageGroup(PartialPath path)", "testcase": false, "constructor": false}, {"identifier": "getSchema", "parameters": "(PartialPath path)", "modifiers": "", "return": "MeasurementSchema", "signature": "MeasurementSchema getSchema(PartialPath path)", "full_signature": " MeasurementSchema getSchema(PartialPath path)", "class_method_signature": "MTree.getSchema(PartialPath path)", "testcase": false, "constructor": false}, {"identifier": "getNodeByPathWithStorageGroupCheck", "parameters": "(PartialPath path)", "modifiers": "", "return": "MNode", "signature": "MNode getNodeByPathWithStorageGroupCheck(PartialPath path)", "full_signature": " MNode getNodeByPathWithStorageGroupCheck(PartialPath path)", "class_method_signature": "MTree.getNodeByPathWithStorageGroupCheck(PartialPath path)", "testcase": false, "constructor": false}, {"identifier": "getStorageGroupNodeByStorageGroupPath", "parameters": "(PartialPath path)", "modifiers": "", "return": "StorageGroupMNode", "signature": "StorageGroupMNode getStorageGroupNodeByStorageGroupPath(PartialPath path)", "full_signature": " StorageGroupMNode getStorageGroupNodeByStorageGroupPath(PartialPath path)", "class_method_signature": "MTree.getStorageGroupNodeByStorageGroupPath(PartialPath path)", "testcase": false, "constructor": false}, {"identifier": "getStorageGroupNodeByPath", "parameters": "(PartialPath path)", "modifiers": "", "return": "StorageGroupMNode", "signature": "StorageGroupMNode getStorageGroupNodeByPath(PartialPath path)", "full_signature": " StorageGroupMNode getStorageGroupNodeByPath(PartialPath path)", "class_method_signature": "MTree.getStorageGroupNodeByPath(PartialPath path)", "testcase": false, "constructor": false}, {"identifier": "getNodeByPath", "parameters": "(PartialPath path)", "modifiers": "", "return": "MNode", "signature": "MNode getNodeByPath(PartialPath path)", "full_signature": " MNode getNodeByPath(PartialPath path)", "class_method_signature": "MTree.getNodeByPath(PartialPath path)", "testcase": false, "constructor": false}, {"identifier": "getStorageGroupByPath", "parameters": "(PartialPath path)", "modifiers": "", "return": "List<String>", "signature": "List<String> getStorageGroupByPath(PartialPath path)", "full_signature": " List<String> getStorageGroupByPath(PartialPath path)", "class_method_signature": "MTree.getStorageGroupByPath(PartialPath path)", "testcase": false, "constructor": false}, {"identifier": "findStorageGroup", "parameters": "(\n      MNode node, String[] nodes, int idx, String parent, List<String> storageGroupNames)", "modifiers": "private", "return": "void", "signature": "void findStorageGroup(\n      MNode node, String[] nodes, int idx, String parent, List<String> storageGroupNames)", "full_signature": "private void findStorageGroup(\n      MNode node, String[] nodes, int idx, String parent, List<String> storageGroupNames)", "class_method_signature": "MTree.findStorageGroup(\n      MNode node, String[] nodes, int idx, String parent, List<String> storageGroupNames)", "testcase": false, "constructor": false}, {"identifier": "getAllStorageGroupPaths", "parameters": "()", "modifiers": "", "return": "List<PartialPath>", "signature": "List<PartialPath> getAllStorageGroupPaths()", "full_signature": " List<PartialPath> getAllStorageGroupPaths()", "class_method_signature": "MTree.getAllStorageGroupPaths()", "testcase": false, "constructor": false}, {"identifier": "getStorageGroupPaths", "parameters": "(PartialPath prefixPath)", "modifiers": "", "return": "List<PartialPath>", "signature": "List<PartialPath> getStorageGroupPaths(PartialPath prefixPath)", "full_signature": " List<PartialPath> getStorageGroupPaths(PartialPath prefixPath)", "class_method_signature": "MTree.getStorageGroupPaths(PartialPath prefixPath)", "testcase": false, "constructor": false}, {"identifier": "findStorageGroupPaths", "parameters": "(MNode node, String[] nodes, int idx, String parent,\n      List<PartialPath> storageGroupPaths)", "modifiers": "private", "return": "void", "signature": "void findStorageGroupPaths(MNode node, String[] nodes, int idx, String parent,\n      List<PartialPath> storageGroupPaths)", "full_signature": "private void findStorageGroupPaths(MNode node, String[] nodes, int idx, String parent,\n      List<PartialPath> storageGroupPaths)", "class_method_signature": "MTree.findStorageGroupPaths(MNode node, String[] nodes, int idx, String parent,\n      List<PartialPath> storageGroupPaths)", "testcase": false, "constructor": false}, {"identifier": "getAllStorageGroupNodes", "parameters": "()", "modifiers": "", "return": "List<StorageGroupMNode>", "signature": "List<StorageGroupMNode> getAllStorageGroupNodes()", "full_signature": " List<StorageGroupMNode> getAllStorageGroupNodes()", "class_method_signature": "MTree.getAllStorageGroupNodes()", "testcase": false, "constructor": false}, {"identifier": "getStorageGroupPath", "parameters": "(PartialPath path)", "modifiers": "", "return": "PartialPath", "signature": "PartialPath getStorageGroupPath(PartialPath path)", "full_signature": " PartialPath getStorageGroupPath(PartialPath path)", "class_method_signature": "MTree.getStorageGroupPath(PartialPath path)", "testcase": false, "constructor": false}, {"identifier": "checkStorageGroupByPath", "parameters": "(PartialPath path)", "modifiers": "", "return": "boolean", "signature": "boolean checkStorageGroupByPath(PartialPath path)", "full_signature": " boolean checkStorageGroupByPath(PartialPath path)", "class_method_signature": "MTree.checkStorageGroupByPath(PartialPath path)", "testcase": false, "constructor": false}, {"identifier": "getAllTimeseriesPath", "parameters": "(PartialPath prefixPath)", "modifiers": "", "return": "List<PartialPath>", "signature": "List<PartialPath> getAllTimeseriesPath(PartialPath prefixPath)", "full_signature": " List<PartialPath> getAllTimeseriesPath(PartialPath prefixPath)", "class_method_signature": "MTree.getAllTimeseriesPath(PartialPath prefixPath)", "testcase": false, "constructor": false}, {"identifier": "getAllTimeseriesPathWithAlias", "parameters": "(PartialPath prefixPath)", "modifiers": "", "return": "List<PartialPath>", "signature": "List<PartialPath> getAllTimeseriesPathWithAlias(PartialPath prefixPath)", "full_signature": " List<PartialPath> getAllTimeseriesPathWithAlias(PartialPath prefixPath)", "class_method_signature": "MTree.getAllTimeseriesPathWithAlias(PartialPath prefixPath)", "testcase": false, "constructor": false}, {"identifier": "getAllTimeseriesCount", "parameters": "(PartialPath prefixPath)", "modifiers": "", "return": "int", "signature": "int getAllTimeseriesCount(PartialPath prefixPath)", "full_signature": " int getAllTimeseriesCount(PartialPath prefixPath)", "class_method_signature": "MTree.getAllTimeseriesCount(PartialPath prefixPath)", "testcase": false, "constructor": false}, {"identifier": "getDevicesNum", "parameters": "(PartialPath prefixPath)", "modifiers": "", "return": "int", "signature": "int getDevicesNum(PartialPath prefixPath)", "full_signature": " int getDevicesNum(PartialPath prefixPath)", "class_method_signature": "MTree.getDevicesNum(PartialPath prefixPath)", "testcase": false, "constructor": false}, {"identifier": "getStorageGroupNum", "parameters": "(PartialPath prefixPath)", "modifiers": "", "return": "int", "signature": "int getStorageGroupNum(PartialPath prefixPath)", "full_signature": " int getStorageGroupNum(PartialPath prefixPath)", "class_method_signature": "MTree.getStorageGroupNum(PartialPath prefixPath)", "testcase": false, "constructor": false}, {"identifier": "getNodesCountInGivenLevel", "parameters": "(PartialPath prefixPath, int level)", "modifiers": "", "return": "int", "signature": "int getNodesCountInGivenLevel(PartialPath prefixPath, int level)", "full_signature": " int getNodesCountInGivenLevel(PartialPath prefixPath, int level)", "class_method_signature": "MTree.getNodesCountInGivenLevel(PartialPath prefixPath, int level)", "testcase": false, "constructor": false}, {"identifier": "getCount", "parameters": "(MNode node, String[] nodes, int idx)", "modifiers": "private", "return": "int", "signature": "int getCount(MNode node, String[] nodes, int idx)", "full_signature": "private int getCount(MNode node, String[] nodes, int idx)", "class_method_signature": "MTree.getCount(MNode node, String[] nodes, int idx)", "testcase": false, "constructor": false}, {"identifier": "getDevicesCount", "parameters": "(MNode node, String[] nodes, int idx)", "modifiers": "private", "return": "int", "signature": "int getDevicesCount(MNode node, String[] nodes, int idx)", "full_signature": "private int getDevicesCount(MNode node, String[] nodes, int idx)", "class_method_signature": "MTree.getDevicesCount(MNode node, String[] nodes, int idx)", "testcase": false, "constructor": false}, {"identifier": "getStorageGroupCount", "parameters": "(\n      MNode node, String[] nodes, int idx, String parent)", "modifiers": "private", "return": "int", "signature": "int getStorageGroupCount(\n      MNode node, String[] nodes, int idx, String parent)", "full_signature": "private int getStorageGroupCount(\n      MNode node, String[] nodes, int idx, String parent)", "class_method_signature": "MTree.getStorageGroupCount(\n      MNode node, String[] nodes, int idx, String parent)", "testcase": false, "constructor": false}, {"identifier": "getCountInGivenLevel", "parameters": "(MNode node, int targetLevel)", "modifiers": "private", "return": "int", "signature": "int getCountInGivenLevel(MNode node, int targetLevel)", "full_signature": "private int getCountInGivenLevel(MNode node, int targetLevel)", "class_method_signature": "MTree.getCountInGivenLevel(MNode node, int targetLevel)", "testcase": false, "constructor": false}, {"identifier": "getAllMeasurementSchemaByHeatOrder", "parameters": "(ShowTimeSeriesPlan plan,\n      QueryContext queryContext)", "modifiers": "", "return": "List<Pair<PartialPath, String[]>>", "signature": "List<Pair<PartialPath, String[]>> getAllMeasurementSchemaByHeatOrder(ShowTimeSeriesPlan plan,\n      QueryContext queryContext)", "full_signature": " List<Pair<PartialPath, String[]>> getAllMeasurementSchemaByHeatOrder(ShowTimeSeriesPlan plan,\n      QueryContext queryContext)", "class_method_signature": "MTree.getAllMeasurementSchemaByHeatOrder(ShowTimeSeriesPlan plan,\n      QueryContext queryContext)", "testcase": false, "constructor": false}, {"identifier": "getAllMeasurementSchema", "parameters": "(ShowTimeSeriesPlan plan)", "modifiers": "", "return": "List<Pair<PartialPath, String[]>>", "signature": "List<Pair<PartialPath, String[]>> getAllMeasurementSchema(ShowTimeSeriesPlan plan)", "full_signature": " List<Pair<PartialPath, String[]>> getAllMeasurementSchema(ShowTimeSeriesPlan plan)", "class_method_signature": "MTree.getAllMeasurementSchema(ShowTimeSeriesPlan plan)", "testcase": false, "constructor": false}, {"identifier": "findPath", "parameters": "(MNode node, String[] nodes, int idx,\n      List<Pair<PartialPath, String[]>> timeseriesSchemaList,\n      boolean hasLimit, boolean needLast, QueryContext queryContext)", "modifiers": "@SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning private", "return": "void", "signature": "void findPath(MNode node, String[] nodes, int idx,\n      List<Pair<PartialPath, String[]>> timeseriesSchemaList,\n      boolean hasLimit, boolean needLast, QueryContext queryContext)", "full_signature": "@SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning private void findPath(MNode node, String[] nodes, int idx,\n      List<Pair<PartialPath, String[]>> timeseriesSchemaList,\n      boolean hasLimit, boolean needLast, QueryContext queryContext)", "class_method_signature": "MTree.findPath(MNode node, String[] nodes, int idx,\n      List<Pair<PartialPath, String[]>> timeseriesSchemaList,\n      boolean hasLimit, boolean needLast, QueryContext queryContext)", "testcase": false, "constructor": false}, {"identifier": "getLastTimeStamp", "parameters": "(MeasurementMNode node, QueryContext queryContext)", "modifiers": "static", "return": "long", "signature": "long getLastTimeStamp(MeasurementMNode node, QueryContext queryContext)", "full_signature": "static long getLastTimeStamp(MeasurementMNode node, QueryContext queryContext)", "class_method_signature": "MTree.getLastTimeStamp(MeasurementMNode node, QueryContext queryContext)", "testcase": false, "constructor": false}, {"identifier": "getChildNodePathInNextLevel", "parameters": "(PartialPath path)", "modifiers": "", "return": "Set<String>", "signature": "Set<String> getChildNodePathInNextLevel(PartialPath path)", "full_signature": " Set<String> getChildNodePathInNextLevel(PartialPath path)", "class_method_signature": "MTree.getChildNodePathInNextLevel(PartialPath path)", "testcase": false, "constructor": false}, {"identifier": "findChildNodePathInNextLevel", "parameters": "(\n      MNode node, String[] nodes, int idx, String parent, Set<String> res, int length)", "modifiers": "@SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning private", "return": "void", "signature": "void findChildNodePathInNextLevel(\n      MNode node, String[] nodes, int idx, String parent, Set<String> res, int length)", "full_signature": "@SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning private void findChildNodePathInNextLevel(\n      MNode node, String[] nodes, int idx, String parent, Set<String> res, int length)", "class_method_signature": "MTree.findChildNodePathInNextLevel(\n      MNode node, String[] nodes, int idx, String parent, Set<String> res, int length)", "testcase": false, "constructor": false}, {"identifier": "getDevices", "parameters": "(PartialPath prefixPath)", "modifiers": "", "return": "Set<PartialPath>", "signature": "Set<PartialPath> getDevices(PartialPath prefixPath)", "full_signature": " Set<PartialPath> getDevices(PartialPath prefixPath)", "class_method_signature": "MTree.getDevices(PartialPath prefixPath)", "testcase": false, "constructor": false}, {"identifier": "findDevices", "parameters": "(MNode node, String[] nodes, int idx, Set<PartialPath> res)", "modifiers": "private", "return": "void", "signature": "void findDevices(MNode node, String[] nodes, int idx, Set<PartialPath> res)", "full_signature": "private void findDevices(MNode node, String[] nodes, int idx, Set<PartialPath> res)", "class_method_signature": "MTree.findDevices(MNode node, String[] nodes, int idx, Set<PartialPath> res)", "testcase": false, "constructor": false}, {"identifier": "getNodesList", "parameters": "(PartialPath path, int nodeLevel)", "modifiers": "", "return": "List<PartialPath>", "signature": "List<PartialPath> getNodesList(PartialPath path, int nodeLevel)", "full_signature": " List<PartialPath> getNodesList(PartialPath path, int nodeLevel)", "class_method_signature": "MTree.getNodesList(PartialPath path, int nodeLevel)", "testcase": false, "constructor": false}, {"identifier": "getNodesList", "parameters": "(PartialPath path, int nodeLevel, StorageGroupFilter filter)", "modifiers": "", "return": "List<PartialPath>", "signature": "List<PartialPath> getNodesList(PartialPath path, int nodeLevel, StorageGroupFilter filter)", "full_signature": " List<PartialPath> getNodesList(PartialPath path, int nodeLevel, StorageGroupFilter filter)", "class_method_signature": "MTree.getNodesList(PartialPath path, int nodeLevel, StorageGroupFilter filter)", "testcase": false, "constructor": false}, {"identifier": "findNodes", "parameters": "(MNode node, PartialPath path, List<PartialPath> res, int targetLevel,\n      StorageGroupFilter filter)", "modifiers": "private", "return": "void", "signature": "void findNodes(MNode node, PartialPath path, List<PartialPath> res, int targetLevel,\n      StorageGroupFilter filter)", "full_signature": "private void findNodes(MNode node, PartialPath path, List<PartialPath> res, int targetLevel,\n      StorageGroupFilter filter)", "class_method_signature": "MTree.findNodes(MNode node, PartialPath path, List<PartialPath> res, int targetLevel,\n      StorageGroupFilter filter)", "testcase": false, "constructor": false}, {"identifier": "serializeTo", "parameters": "(String snapshotPath)", "modifiers": "public", "return": "void", "signature": "void serializeTo(String snapshotPath)", "full_signature": "public void serializeTo(String snapshotPath)", "class_method_signature": "MTree.serializeTo(String snapshotPath)", "testcase": false, "constructor": false}, {"identifier": "deserializeFrom", "parameters": "(File mtreeSnapshot)", "modifiers": "@SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning public static", "return": "MTree", "signature": "MTree deserializeFrom(File mtreeSnapshot)", "full_signature": "@SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning public static MTree deserializeFrom(File mtreeSnapshot)", "class_method_signature": "MTree.deserializeFrom(File mtreeSnapshot)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "MTree.toString()", "testcase": false, "constructor": false}, {"identifier": "jsonToString", "parameters": "(JsonObject jsonObject)", "modifiers": "private static", "return": "String", "signature": "String jsonToString(JsonObject jsonObject)", "full_signature": "private static String jsonToString(JsonObject jsonObject)", "class_method_signature": "MTree.jsonToString(JsonObject jsonObject)", "testcase": false, "constructor": false}, {"identifier": "mNodeToJSON", "parameters": "(MNode node, String storageGroupName)", "modifiers": "private", "return": "JsonObject", "signature": "JsonObject mNodeToJSON(MNode node, String storageGroupName)", "full_signature": "private JsonObject mNodeToJSON(MNode node, String storageGroupName)", "class_method_signature": "MTree.mNodeToJSON(MNode node, String storageGroupName)", "testcase": false, "constructor": false}, {"identifier": "combineMetadataInStrings", "parameters": "(String[] metadataStrs)", "modifiers": "static", "return": "String", "signature": "String combineMetadataInStrings(String[] metadataStrs)", "full_signature": "static String combineMetadataInStrings(String[] metadataStrs)", "class_method_signature": "MTree.combineMetadataInStrings(String[] metadataStrs)", "testcase": false, "constructor": false}, {"identifier": "combineJsonObjects", "parameters": "(JsonObject a, JsonObject b)", "modifiers": "private static", "return": "JsonObject", "signature": "JsonObject combineJsonObjects(JsonObject a, JsonObject b)", "full_signature": "private static JsonObject combineJsonObjects(JsonObject a, JsonObject b)", "class_method_signature": "MTree.combineJsonObjects(JsonObject a, JsonObject b)", "testcase": false, "constructor": false}, {"identifier": "determineStorageGroup", "parameters": "(PartialPath path)", "modifiers": "", "return": "Map<String, String>", "signature": "Map<String, String> determineStorageGroup(PartialPath path)", "full_signature": " Map<String, String> determineStorageGroup(PartialPath path)", "class_method_signature": "MTree.determineStorageGroup(PartialPath path)", "testcase": false, "constructor": false}, {"identifier": "determineStorageGroup", "parameters": "(\n      int depth,\n      String[] nodes,\n      MNode mNode,\n      Map<String, String> paths,\n      Deque<MNode> nodeStack,\n      Deque<Integer> depthStack)", "modifiers": "private", "return": "void", "signature": "void determineStorageGroup(\n      int depth,\n      String[] nodes,\n      MNode mNode,\n      Map<String, String> paths,\n      Deque<MNode> nodeStack,\n      Deque<Integer> depthStack)", "full_signature": "private void determineStorageGroup(\n      int depth,\n      String[] nodes,\n      MNode mNode,\n      Map<String, String> paths,\n      Deque<MNode> nodeStack,\n      Deque<Integer> depthStack)", "class_method_signature": "MTree.determineStorageGroup(\n      int depth,\n      String[] nodes,\n      MNode mNode,\n      Map<String, String> paths,\n      Deque<MNode> nodeStack,\n      Deque<Integer> depthStack)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/iotdb/db/metadata/MTree.java"}, "focal_method": {"identifier": "setStorageGroup", "parameters": "(PartialPath path)", "modifiers": "", "return": "void", "body": "void setStorageGroup(PartialPath path) throws MetadataException {\n    String[] nodeNames = path.getNodes();\n    checkStorageGroup(path.getFullPath());\n    MNode cur = root;\n    if (nodeNames.length <= 1 || !nodeNames[0].equals(root.getName())) {\n      throw new IllegalPathException(path.getFullPath());\n    }\n    int i = 1;\n    // e.g., path = root.a.b.sg, create internal nodes for a, b\n    while (i < nodeNames.length - 1) {\n      MNode temp = cur.getChild(nodeNames[i]);\n      if (temp == null) {\n        cur.addChild(nodeNames[i], new MNode(cur, nodeNames[i]));\n      } else if (temp instanceof StorageGroupMNode) {\n        // before set storage group, check whether the exists or not\n        throw new StorageGroupAlreadySetException(temp.getFullPath());\n      }\n      cur = cur.getChild(nodeNames[i]);\n      i++;\n    }\n    if (cur.hasChild(nodeNames[i])) {\n      // node b has child sg\n      throw new StorageGroupAlreadySetException(path.getFullPath());\n    } else {\n      StorageGroupMNode storageGroupMNode =\n          new StorageGroupMNode(\n              cur, nodeNames[i], IoTDBDescriptor.getInstance().getConfig().getDefaultTTL());\n      cur.addChild(nodeNames[i], storageGroupMNode);\n    }\n  }", "signature": "void setStorageGroup(PartialPath path)", "full_signature": " void setStorageGroup(PartialPath path)", "class_method_signature": "MTree.setStorageGroup(PartialPath path)", "testcase": false, "constructor": false, "invocations": ["getNodes", "checkStorageGroup", "getFullPath", "equals", "getName", "getFullPath", "getChild", "addChild", "getFullPath", "getChild", "hasChild", "getFullPath", "getDefaultTTL", "getConfig", "getInstance", "addChild"]}, "repository": {"repo_id": 158975124, "url": "https://github.com/apache/incubator-iotdb", "stars": 449, "created": "11/24/2018 9:29:17 PM +00:00", "updates": "2020-01-21T08:10:15+00:00", "fork": "False", "license": "licensed"}}