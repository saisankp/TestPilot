{"test_class": {"identifier": "LoadFlowResultsCompletionTest", "superclass": "extends AbstractLoadFlowResultsCompletionTest", "interfaces": "", "fields": [], "file": "loadflow/loadflow-results-completion/src/test/java/com/powsybl/loadflow/resultscompletion/LoadFlowResultsCompletionTest.java"}, "test_case": {"identifier": "run", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void run() throws Exception {\n        setNanValues();\n\n        LoadFlowResultsCompletionParameters parameters = new LoadFlowResultsCompletionParameters();\n        LoadFlowParameters lfParameters = new LoadFlowParameters();\n        CandidateComputation computation = new LoadFlowResultsCompletion(parameters, lfParameters);\n        assertEquals(LoadFlowResultsCompletion.NAME, computation.getName());\n        computation.run(network, null);\n\n        checkResultsCompletion();\n    }", "signature": "void run()", "full_signature": "@Test public void run()", "class_method_signature": "LoadFlowResultsCompletionTest.run()", "testcase": true, "constructor": false, "invocations": ["setNanValues", "assertEquals", "getName", "run", "checkResultsCompletion"]}, "focal_class": {"identifier": "LoadFlowResultsCompletion", "superclass": "", "interfaces": "implements CandidateComputation", "fields": [{"original_string": "public static final String NAME = \"loadflowResultsCompletion\";", "modifier": "public static final", "type": "String", "declarator": "NAME = \"loadflowResultsCompletion\"", "var_name": "NAME"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(LoadFlowResultsCompletion.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(LoadFlowResultsCompletion.class)", "var_name": "LOGGER"}, {"original_string": "private final LoadFlowResultsCompletionParameters parameters;", "modifier": "private final", "type": "LoadFlowResultsCompletionParameters", "declarator": "parameters", "var_name": "parameters"}, {"original_string": "private final LoadFlowParameters lfParameters;", "modifier": "private final", "type": "LoadFlowParameters", "declarator": "lfParameters", "var_name": "lfParameters"}, {"original_string": "private final Z0LineChecker z0checker;", "modifier": "private final", "type": "Z0LineChecker", "declarator": "z0checker", "var_name": "z0checker"}], "methods": [{"identifier": "LoadFlowResultsCompletion", "parameters": "(LoadFlowResultsCompletionParameters parameters, LoadFlowParameters lfParameters)", "modifiers": "public", "return": "", "signature": " LoadFlowResultsCompletion(LoadFlowResultsCompletionParameters parameters, LoadFlowParameters lfParameters)", "full_signature": "public  LoadFlowResultsCompletion(LoadFlowResultsCompletionParameters parameters, LoadFlowParameters lfParameters)", "class_method_signature": "LoadFlowResultsCompletion.LoadFlowResultsCompletion(LoadFlowResultsCompletionParameters parameters, LoadFlowParameters lfParameters)", "testcase": false, "constructor": true}, {"identifier": "LoadFlowResultsCompletion", "parameters": "()", "modifiers": "public", "return": "", "signature": " LoadFlowResultsCompletion()", "full_signature": "public  LoadFlowResultsCompletion()", "class_method_signature": "LoadFlowResultsCompletion.LoadFlowResultsCompletion()", "testcase": false, "constructor": true}, {"identifier": "z0checker", "parameters": "()", "modifiers": "public", "return": "Z0LineChecker", "signature": "Z0LineChecker z0checker()", "full_signature": "public Z0LineChecker z0checker()", "class_method_signature": "LoadFlowResultsCompletion.z0checker()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "LoadFlowResultsCompletion.getName()", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "(Network network, ComputationManager computationManager)", "modifiers": "@Override public", "return": "void", "signature": "void run(Network network, ComputationManager computationManager)", "full_signature": "@Override public void run(Network network, ComputationManager computationManager)", "class_method_signature": "LoadFlowResultsCompletion.run(Network network, ComputationManager computationManager)", "testcase": false, "constructor": false}, {"identifier": "completeTerminalData", "parameters": "(Terminal terminal, Side side, BranchData branchData)", "modifiers": "private", "return": "void", "signature": "void completeTerminalData(Terminal terminal, Side side, BranchData branchData)", "full_signature": "private void completeTerminalData(Terminal terminal, Side side, BranchData branchData)", "class_method_signature": "LoadFlowResultsCompletion.completeTerminalData(Terminal terminal, Side side, BranchData branchData)", "testcase": false, "constructor": false}, {"identifier": "completeTerminalData", "parameters": "(Terminal terminal, ThreeWindingsTransformer.Side side, TwtData twtData)", "modifiers": "private", "return": "void", "signature": "void completeTerminalData(Terminal terminal, ThreeWindingsTransformer.Side side, TwtData twtData)", "full_signature": "private void completeTerminalData(Terminal terminal, ThreeWindingsTransformer.Side side, TwtData twtData)", "class_method_signature": "LoadFlowResultsCompletion.completeTerminalData(Terminal terminal, ThreeWindingsTransformer.Side side, TwtData twtData)", "testcase": false, "constructor": false}], "file": "loadflow/loadflow-results-completion/src/main/java/com/powsybl/loadflow/resultscompletion/LoadFlowResultsCompletion.java"}, "focal_method": {"identifier": "run", "parameters": "(Network network, ComputationManager computationManager)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void run(Network network, ComputationManager computationManager) {\n        Objects.requireNonNull(network);\n        LOGGER.info(\"Running {} on network {}, variant {}\", getName(), network.getId(), network.getVariantManager().getWorkingVariantId());\n        LOGGER.info(\"LoadFlowResultsCompletionParameters={}\", parameters);\n        LOGGER.info(\"LoadFlowParameters={}\", lfParameters);\n\n        network.getLineStream()\n            // Do not try to compute flows on loops\n            .filter(l -> l.getTerminal1().getBusView().getBus() != l.getTerminal2().getBusView().getBus())\n            .forEach(line -> {\n                BranchData lineData = new BranchData(line,\n                                                     parameters.getEpsilonX(),\n                                                     parameters.isApplyReactanceCorrection());\n                completeTerminalData(line.getTerminal(Side.ONE), Side.ONE, lineData);\n                completeTerminalData(line.getTerminal(Side.TWO), Side.TWO, lineData);\n            });\n\n        network.getTwoWindingsTransformerStream().forEach(twt -> {\n            int phaseAngleClock = 0;\n            TwoWindingsTransformerPhaseAngleClock phaseAngleClockExtension = twt.getExtension(TwoWindingsTransformerPhaseAngleClock.class);\n            if (phaseAngleClockExtension != null) {\n                phaseAngleClock = phaseAngleClockExtension.getPhaseAngleClock();\n            }\n\n            BranchData twtData = new BranchData(twt,\n                                                phaseAngleClock,\n                                                parameters.getEpsilonX(),\n                                                parameters.isApplyReactanceCorrection(),\n                                                lfParameters.isTwtSplitShuntAdmittance());\n            completeTerminalData(twt.getTerminal(Side.ONE), Side.ONE, twtData);\n            completeTerminalData(twt.getTerminal(Side.TWO), Side.TWO, twtData);\n        });\n\n        network.getShuntCompensatorStream().forEach(sh -> {\n            Terminal terminal = sh.getTerminal();\n            if (terminal.isConnected()\n                    && Double.isNaN(terminal.getQ())\n                    && terminal.getBusView().getBus() != null\n                    && terminal.getBusView().getBus().isInMainConnectedComponent()) {\n                double v = terminal.getBusView().getBus().getV();\n                double q = -sh.getB() * v * v;\n                LOGGER.debug(\"Shunt {}, setting q = {}\", sh, q);\n                terminal.setQ(q);\n            }\n        });\n\n        network.getThreeWindingsTransformerStream().forEach(twt -> {\n            int phaseAngleClock2 = 0;\n            int phaseAngleClock3 = 0;\n            ThreeWindingsTransformerPhaseAngleClock phaseAngleClockExtension = twt.getExtension(ThreeWindingsTransformerPhaseAngleClock.class);\n            if (phaseAngleClockExtension != null) {\n                phaseAngleClock2 = phaseAngleClockExtension.getPhaseAngleClockLeg2();\n                phaseAngleClock3 = phaseAngleClockExtension.getPhaseAngleClockLeg3();\n            }\n\n            TwtData twtData = new TwtData(twt,\n                                          phaseAngleClock2,\n                                          phaseAngleClock3,\n                                          parameters.getEpsilonX(),\n                                          parameters.isApplyReactanceCorrection(),\n                                          lfParameters.isTwtSplitShuntAdmittance());\n            completeTerminalData(twt.getLeg1().getTerminal(), ThreeWindingsTransformer.Side.ONE, twtData);\n            completeTerminalData(twt.getLeg2().getTerminal(), ThreeWindingsTransformer.Side.TWO, twtData);\n            completeTerminalData(twt.getLeg3().getTerminal(), ThreeWindingsTransformer.Side.THREE, twtData);\n        });\n\n        Z0FlowsCompletion z0FlowsCompletion = new Z0FlowsCompletion(network, z0checker);\n        z0FlowsCompletion.complete();\n    }", "signature": "void run(Network network, ComputationManager computationManager)", "full_signature": "@Override public void run(Network network, ComputationManager computationManager)", "class_method_signature": "LoadFlowResultsCompletion.run(Network network, ComputationManager computationManager)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "info", "getName", "getId", "getWorkingVariantId", "getVariantManager", "info", "info", "forEach", "filter", "getLineStream", "getBus", "getBusView", "getTerminal1", "getBus", "getBusView", "getTerminal2", "getEpsilonX", "isApplyReactanceCorrection", "completeTerminalData", "getTerminal", "completeTerminalData", "getTerminal", "forEach", "getTwoWindingsTransformerStream", "getExtension", "getPhaseAngleClock", "getEpsilonX", "isApplyReactanceCorrection", "isTwtSplitShuntAdmittance", "completeTerminalData", "getTerminal", "completeTerminalData", "getTerminal", "forEach", "getShuntCompensatorStream", "getTerminal", "isConnected", "isNaN", "getQ", "getBus", "getBusView", "isInMainConnectedComponent", "getBus", "getBusView", "getV", "getBus", "getBusView", "getB", "debug", "setQ", "forEach", "getThreeWindingsTransformerStream", "getExtension", "getPhaseAngleClockLeg2", "getPhaseAngleClockLeg3", "getEpsilonX", "isApplyReactanceCorrection", "isTwtSplitShuntAdmittance", "completeTerminalData", "getTerminal", "getLeg1", "completeTerminalData", "getTerminal", "getLeg2", "completeTerminalData", "getTerminal", "getLeg3", "complete"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}