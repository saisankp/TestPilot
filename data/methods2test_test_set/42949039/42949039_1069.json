{"test_class": {"identifier": "SubjectMatterExpertRestControllerTest", "superclass": "extends AbstractRestTest", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private SubjectMatterExpertRestController subjectMatterExpertRestController;", "modifier": "@InjectMocks\n    private", "type": "SubjectMatterExpertRestController", "declarator": "subjectMatterExpertRestController", "var_name": "subjectMatterExpertRestController"}, {"original_string": "@Mock\n    private SubjectMatterExpertService subjectMatterExpertService;", "modifier": "@Mock\n    private", "type": "SubjectMatterExpertService", "declarator": "subjectMatterExpertService", "var_name": "subjectMatterExpertService"}], "file": "herd-code/herd-rest/src/test/java/org/finra/herd/rest/SubjectMatterExpertRestControllerTest.java"}, "test_case": {"identifier": "testGetSubjectMatterExpert", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetSubjectMatterExpert()\n    {\n        SubjectMatterExpert subjectMatterExpert = new SubjectMatterExpert(new SubjectMatterExpertKey(USER_ID),\n            new SubjectMatterExpertContactDetails(USER_FULL_NAME, USER_JOB_TITLE, USER_EMAIL_ADDRESS, USER_TELEPHONE_NUMBER));\n\n        when(subjectMatterExpertService.getSubjectMatterExpert(new SubjectMatterExpertKey(USER_ID))).thenReturn(subjectMatterExpert);\n\n        // Get subject matter expert information.\n        SubjectMatterExpert result = subjectMatterExpertRestController.getSubjectMatterExpert(USER_ID);\n        // Verify the external calls.\n        verify(subjectMatterExpertService).getSubjectMatterExpert(new SubjectMatterExpertKey(USER_ID));\n        verifyNoMoreInteractions(subjectMatterExpertService);\n\n        // Validate the returned object.\n        assertEquals(subjectMatterExpert, result);\n    }", "signature": "void testGetSubjectMatterExpert()", "full_signature": "@Test public void testGetSubjectMatterExpert()", "class_method_signature": "SubjectMatterExpertRestControllerTest.testGetSubjectMatterExpert()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getSubjectMatterExpert", "getSubjectMatterExpert", "getSubjectMatterExpert", "verify", "verifyNoMoreInteractions", "assertEquals"]}, "focal_class": {"identifier": "SubjectMatterExpertRestController", "superclass": "extends HerdBaseController", "interfaces": "", "fields": [{"original_string": "public static final String SUBJECT_MATTER_EXPERTS_URI_PREFIX = \"/subjectMatterExperts\";", "modifier": "public static final", "type": "String", "declarator": "SUBJECT_MATTER_EXPERTS_URI_PREFIX = \"/subjectMatterExperts\"", "var_name": "SUBJECT_MATTER_EXPERTS_URI_PREFIX"}, {"original_string": "@Autowired\n    private SubjectMatterExpertService subjectMatterExpertService;", "modifier": "@Autowired\n    private", "type": "SubjectMatterExpertService", "declarator": "subjectMatterExpertService", "var_name": "subjectMatterExpertService"}], "methods": [{"identifier": "getSubjectMatterExpert", "parameters": "(@PathVariable(\"userId\") String userId)", "modifiers": "@RequestMapping(value = SUBJECT_MATTER_EXPERTS_URI_PREFIX + \"/{userId}\", method = RequestMethod.GET) @Secured(SecurityFunctions.FN_SUBJECT_MATTER_EXPERTS_GET) public", "return": "SubjectMatterExpert", "signature": "SubjectMatterExpert getSubjectMatterExpert(@PathVariable(\"userId\") String userId)", "full_signature": "@RequestMapping(value = SUBJECT_MATTER_EXPERTS_URI_PREFIX + \"/{userId}\", method = RequestMethod.GET) @Secured(SecurityFunctions.FN_SUBJECT_MATTER_EXPERTS_GET) public SubjectMatterExpert getSubjectMatterExpert(@PathVariable(\"userId\") String userId)", "class_method_signature": "SubjectMatterExpertRestController.getSubjectMatterExpert(@PathVariable(\"userId\") String userId)", "testcase": false, "constructor": false}], "file": "herd-code/herd-rest/src/main/java/org/finra/herd/rest/SubjectMatterExpertRestController.java"}, "focal_method": {"identifier": "getSubjectMatterExpert", "parameters": "(@PathVariable(\"userId\") String userId)", "modifiers": "@RequestMapping(value = SUBJECT_MATTER_EXPERTS_URI_PREFIX + \"/{userId}\", method = RequestMethod.GET) @Secured(SecurityFunctions.FN_SUBJECT_MATTER_EXPERTS_GET) public", "return": "SubjectMatterExpert", "body": "@RequestMapping(value = SUBJECT_MATTER_EXPERTS_URI_PREFIX + \"/{userId}\", method = RequestMethod.GET)\n    @Secured(SecurityFunctions.FN_SUBJECT_MATTER_EXPERTS_GET)\n    public SubjectMatterExpert getSubjectMatterExpert(@PathVariable(\"userId\") String userId)\n    {\n        return subjectMatterExpertService.getSubjectMatterExpert(new SubjectMatterExpertKey(userId));\n    }", "signature": "SubjectMatterExpert getSubjectMatterExpert(@PathVariable(\"userId\") String userId)", "full_signature": "@RequestMapping(value = SUBJECT_MATTER_EXPERTS_URI_PREFIX + \"/{userId}\", method = RequestMethod.GET) @Secured(SecurityFunctions.FN_SUBJECT_MATTER_EXPERTS_GET) public SubjectMatterExpert getSubjectMatterExpert(@PathVariable(\"userId\") String userId)", "class_method_signature": "SubjectMatterExpertRestController.getSubjectMatterExpert(@PathVariable(\"userId\") String userId)", "testcase": false, "constructor": false, "invocations": ["getSubjectMatterExpert"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}