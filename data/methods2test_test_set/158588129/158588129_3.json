{"test_class": {"identifier": "AdditionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Addition addition = new Addition();", "modifier": "private final", "type": "Addition", "declarator": "addition = new Addition()", "var_name": "addition"}], "file": "ch02/recipe_2_1_ii/src/test/java/com/apress/springbootrecipes/calculator/operation/AdditionTest.java"}, "test_case": {"identifier": "shouldCorrectlyApplyFormula", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldCorrectlyApplyFormula() {\n        assertThat(addition.apply(2, 2)).isEqualTo(4);\n        assertThat(addition.apply(12, 88)).isEqualTo(100);\n    }", "signature": "void shouldCorrectlyApplyFormula()", "full_signature": "@Test public void shouldCorrectlyApplyFormula()", "class_method_signature": "AdditionTest.shouldCorrectlyApplyFormula()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "apply", "isEqualTo", "assertThat", "apply"]}, "focal_class": {"identifier": "Addition", "superclass": "", "interfaces": "implements Operation", "fields": [], "methods": [{"identifier": "apply", "parameters": "(int lhs, int rhs)", "modifiers": "@Override public", "return": "int", "signature": "int apply(int lhs, int rhs)", "full_signature": "@Override public int apply(int lhs, int rhs)", "class_method_signature": "Addition.apply(int lhs, int rhs)", "testcase": false, "constructor": false}, {"identifier": "handles", "parameters": "(char op)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean handles(char op)", "full_signature": "@Override public boolean handles(char op)", "class_method_signature": "Addition.handles(char op)", "testcase": false, "constructor": false}], "file": "ch02/recipe_2_1_ii/src/main/java/com/apress/springbootrecipes/calculator/operation/Addition.java"}, "focal_method": {"identifier": "apply", "parameters": "(int lhs, int rhs)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int apply(int lhs, int rhs) {\n        return lhs + rhs;\n    }", "signature": "int apply(int lhs, int rhs)", "full_signature": "@Override public int apply(int lhs, int rhs)", "class_method_signature": "Addition.apply(int lhs, int rhs)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 158588129, "url": "https://github.com/Apress/spring-boot-2-recipes", "language": "Java", "is_fork": false, "fork_count": 34, "stargazer_count": 24, "size": 202, "license": "licensed"}}