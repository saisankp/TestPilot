{"test_class": {"identifier": "MeasurementProtocolTest", "superclass": "", "interfaces": "", "fields": [], "file": "app/src/test/java/org/hwyl/sexytopo/comms/MeasurementProtocolTest.java"}, "test_case": {"identifier": "testFlatMeasurementGetsParsedCorrectly", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFlatMeasurementGetsParsedCorrectly() {\n        byte[] packet = new byte[]{1, -31, 7, -94, 50, 58, 3, -5};\n        Assert.assertTrue(MeasurementProtocol.isDataPacket(packet));\n        Leg actual = MeasurementProtocol.parseDataPacket(packet);\n        Leg expected = new Leg(2.017, 71.2, 4.5);\n        assertLegEquality(expected, actual);\n    }", "signature": "void testFlatMeasurementGetsParsedCorrectly()", "full_signature": "@Test public void testFlatMeasurementGetsParsedCorrectly()", "class_method_signature": "MeasurementProtocolTest.testFlatMeasurementGetsParsedCorrectly()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isDataPacket", "parseDataPacket", "assertLegEquality"]}, "focal_class": {"identifier": "MeasurementProtocol", "superclass": "extends DistoXProtocol", "interfaces": "", "fields": [{"original_string": "private static final int DISTANCE_LOW_BYTE = 1;", "modifier": "private static final", "type": "int", "declarator": "DISTANCE_LOW_BYTE = 1", "var_name": "DISTANCE_LOW_BYTE"}, {"original_string": "private static final int DISTANCE_HIGH_BYTE = 2;", "modifier": "private static final", "type": "int", "declarator": "DISTANCE_HIGH_BYTE = 2", "var_name": "DISTANCE_HIGH_BYTE"}, {"original_string": "private static final int AZIMUTH_LOW_BYTE = 3;", "modifier": "private static final", "type": "int", "declarator": "AZIMUTH_LOW_BYTE = 3", "var_name": "AZIMUTH_LOW_BYTE"}, {"original_string": "private static final int AZIMUTH_HIGH_BYTE = 4;", "modifier": "private static final", "type": "int", "declarator": "AZIMUTH_HIGH_BYTE = 4", "var_name": "AZIMUTH_HIGH_BYTE"}, {"original_string": "private static final int INCLINATION_LOW_BYTE = 5;", "modifier": "private static final", "type": "int", "declarator": "INCLINATION_LOW_BYTE = 5", "var_name": "INCLINATION_LOW_BYTE"}, {"original_string": "private static final int INCLINATION_HIGH_BYTE = 6;", "modifier": "private static final", "type": "int", "declarator": "INCLINATION_HIGH_BYTE = 6", "var_name": "INCLINATION_HIGH_BYTE"}, {"original_string": "private static final int ROLL_ANGLE_HIGH_BYTE = 7;", "modifier": "private static final", "type": "int", "declarator": "ROLL_ANGLE_HIGH_BYTE = 7", "var_name": "ROLL_ANGLE_HIGH_BYTE"}, {"original_string": "public static final int DISTANCE_BIT_MASK = 0b01000000;", "modifier": "public static final", "type": "int", "declarator": "DISTANCE_BIT_MASK = 0b01000000", "var_name": "DISTANCE_BIT_MASK"}, {"original_string": "protected byte[] previousPacket = new byte[]{};", "modifier": "protected", "type": "byte[]", "declarator": "previousPacket = new byte[]{}", "var_name": "previousPacket"}, {"original_string": "protected int duplicateCount = 0;", "modifier": "protected", "type": "int", "declarator": "duplicateCount = 0", "var_name": "duplicateCount"}], "methods": [{"identifier": "MeasurementProtocol", "parameters": "(\n            SexyTopoActivity activity, BluetoothDevice bluetoothDevice, SurveyManager dataManager)", "modifiers": "public", "return": "", "signature": " MeasurementProtocol(\n            SexyTopoActivity activity, BluetoothDevice bluetoothDevice, SurveyManager dataManager)", "full_signature": "public  MeasurementProtocol(\n            SexyTopoActivity activity, BluetoothDevice bluetoothDevice, SurveyManager dataManager)", "class_method_signature": "MeasurementProtocol.MeasurementProtocol(\n            SexyTopoActivity activity, BluetoothDevice bluetoothDevice, SurveyManager dataManager)", "testcase": false, "constructor": true}, {"identifier": "parseDataPacket", "parameters": "(byte[] packet)", "modifiers": "public static", "return": "Leg", "signature": "Leg parseDataPacket(byte[] packet)", "full_signature": "public static Leg parseDataPacket(byte[] packet)", "class_method_signature": "MeasurementProtocol.parseDataPacket(byte[] packet)", "testcase": false, "constructor": false}, {"identifier": "go", "parameters": "(DataInputStream inStream, DataOutputStream outStream)", "modifiers": "public", "return": "void", "signature": "void go(DataInputStream inStream, DataOutputStream outStream)", "full_signature": "public void go(DataInputStream inStream, DataOutputStream outStream)", "class_method_signature": "MeasurementProtocol.go(DataInputStream inStream, DataOutputStream outStream)", "testcase": false, "constructor": false}], "file": "app/src/main/java/org/hwyl/sexytopo/comms/MeasurementProtocol.java"}, "focal_method": {"identifier": "parseDataPacket", "parameters": "(byte[] packet)", "modifiers": "public static", "return": "Leg", "body": "public static Leg parseDataPacket(byte[] packet) {\n\n        int d0 = packet[ADMIN] & DISTANCE_BIT_MASK;\n        int d1 = readByte(packet, DISTANCE_LOW_BYTE);\n        int d2 = readByte(packet, DISTANCE_HIGH_BYTE);\n        double distance = (d0 * 1024 + d2 * 256 + d1) / 1000.0;\n\n        double azimuth_reading =\n                readDoubleByte(packet, AZIMUTH_LOW_BYTE, AZIMUTH_HIGH_BYTE);\n        double azimuth = azimuth_reading * 180.0 / 32768.0;\n\n        double inclinationReading =\n                readDoubleByte(packet, INCLINATION_LOW_BYTE, INCLINATION_HIGH_BYTE);\n        double inclination = inclinationReading * 90.0 / 16384.0;\n        if (inclinationReading >= 32768) {\n            inclination = (65536 - inclinationReading) * -90.0 / 16384.0;\n        }\n\n        return new Leg(distance, azimuth, inclination);\n    }", "signature": "Leg parseDataPacket(byte[] packet)", "full_signature": "public static Leg parseDataPacket(byte[] packet)", "class_method_signature": "MeasurementProtocol.parseDataPacket(byte[] packet)", "testcase": false, "constructor": false, "invocations": ["readByte", "readByte", "readDoubleByte", "readDoubleByte"]}, "repository": {"repo_id": 27244573, "url": "https://github.com/richsmith/sexytopo", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 15, "size": 83635, "license": "licensed"}}