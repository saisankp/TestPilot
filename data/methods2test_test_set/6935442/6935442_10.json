{"test_class": {"identifier": "SheetPivoterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "XSSFWorkbook workbook;", "modifier": "", "type": "XSSFWorkbook", "declarator": "workbook", "var_name": "workbook"}, {"original_string": "XSSFSheet sourceSheet;", "modifier": "", "type": "XSSFSheet", "declarator": "sourceSheet", "var_name": "sourceSheet"}, {"original_string": "XSSFSheet targetSheet;", "modifier": "", "type": "XSSFSheet", "declarator": "targetSheet", "var_name": "targetSheet"}, {"original_string": "SheetPivoter p;", "modifier": "", "type": "SheetPivoter", "declarator": "p", "var_name": "p"}, {"original_string": "@Rule\n    public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}], "file": "subdomains/excel/applib/src/test/java/org/apache/isis/subdomains/excel/applib/dom/util/SheetPivoterTest.java"}, "test_case": {"identifier": "headerRow_Fill_works", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void headerRow_Fill_works() {\n        // given case for 3 col, 2 val\n        List<String> annotations = Arrays.asList(\"row\", \"column\", \"column\", \"column\", \"value\", \"value\", \"deco\", \"deco\");\n        List<Integer> orderNumbers = Arrays.asList(0, 1, 2, 3, 1, 2, 1, 2);\n        List<String> typeList = Arrays.asList(null, null, null, null, \"SUM\", \"SUM\", null, null);\n        List<String> fieldNameList = Arrays.asList(\"fn-r1\", \"fn-c\", \"fn-c1\", \"fn-c2\", \"fn-v1\", \"fn-v2\", \"fn-d1\", \"fn-d2\");\n        List<?> v1 = Arrays.asList(\"r1\", \"a\", \"c1-1\", \"c2-1\", null, null, \"r1d1\", null);\n        List<?> v2 = Arrays.asList(\"r2\", \"a\", \"c1-2\", \"c2-1\", null, null, null, \"r2d2\");\n        List<?> v3 = Arrays.asList(\"r3\", \"b\", \"c1-3\", \"c2-2\", null, null, \"r3d1\", \"r3d2\");\n        sourceSheetBuilder(annotations, orderNumbers, typeList, fieldNameList, v1, v2, v3);\n\n        // when\n        p.pivot(sourceSheet, targetSheet);\n\n        // then\n        Assertions.assertThat(targetSheet.getLastRowNum()).isEqualTo(7);\n        testRow(0, null, null, \"fn-c\", \"a\", null, null, null, null, null, null, null, null, null, null, null, \"b\"); //etc\n        testRow(1, null, null, \"fn-c1\", \"c1-1\", null, null, null, \"c1-2\", null, null, null, \"c1-3\", null, null, null, \"c1-1\"); //etc\n        testRow(2, null, null, \"fn-c2\", \"c2-1\", null, \"c2-2\", null, \"c2-1\", null, \"c2-2\", null, \"c2-1\", null, \"c2-2\", null, \"c2-1\"); //etc\n        testRow(3, \"fn-r1\", \"fn-d1\", \"fn-d2\", \"fn-v1 (sum)\", \"fn-v2 (sum)\", \"fn-v1 (sum)\", \"fn-v2 (sum)\", \"fn-v1 (sum)\", \"fn-v2 (sum)\"); //etc\n        testRow(4, \"r1\", \"r1d1\", null); //etc\n        testRow(5, \"r2\", null, \"r2d2\");\n        testRow(6, \"r3\", \"r3d1\", \"r3d2\");\n        // last row is for summing\n\n    }", "signature": "void headerRow_Fill_works()", "full_signature": "@Test public void headerRow_Fill_works()", "class_method_signature": "SheetPivoterTest.headerRow_Fill_works()", "testcase": true, "constructor": false, "invocations": ["asList", "asList", "asList", "asList", "asList", "asList", "asList", "sourceSheetBuilder", "pivot", "isEqualTo", "assertThat", "getLastRowNum", "testRow", "testRow", "testRow", "testRow", "testRow", "testRow", "testRow"]}, "focal_class": {"identifier": "SheetPivoter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Sheet sourceSheet;", "modifier": "private", "type": "Sheet", "declarator": "sourceSheet", "var_name": "sourceSheet"}, {"original_string": "private Sheet targetSheet;", "modifier": "private", "type": "Sheet", "declarator": "targetSheet", "var_name": "targetSheet"}, {"original_string": "private AnnotationList annotations = new AnnotationList(new ArrayList<AnnotationTriplet>());", "modifier": "private", "type": "AnnotationList", "declarator": "annotations = new AnnotationList(new ArrayList<AnnotationTriplet>())", "var_name": "annotations"}, {"original_string": "private int numberOfColumnAnnotationsInSource;", "modifier": "private", "type": "int", "declarator": "numberOfColumnAnnotationsInSource", "var_name": "numberOfColumnAnnotationsInSource"}, {"original_string": "private int numberOfValueAnnotationsInSource;", "modifier": "private", "type": "int", "declarator": "numberOfValueAnnotationsInSource", "var_name": "numberOfValueAnnotationsInSource"}, {"original_string": "private int numberOfDecorationAnnotationsInSource;", "modifier": "private", "type": "int", "declarator": "numberOfDecorationAnnotationsInSource", "var_name": "numberOfDecorationAnnotationsInSource"}, {"original_string": "private int rowAnnotatedColumnNumber;", "modifier": "private", "type": "int", "declarator": "rowAnnotatedColumnNumber", "var_name": "rowAnnotatedColumnNumber"}, {"original_string": "private List<Row> columnHeaderValueRows = new ArrayList<>();", "modifier": "private", "type": "List<Row>", "declarator": "columnHeaderValueRows = new ArrayList<>()", "var_name": "columnHeaderValueRows"}, {"original_string": "private Row fieldNameRow;", "modifier": "private", "type": "Row", "declarator": "fieldNameRow", "var_name": "fieldNameRow"}, {"original_string": "int columnLabelOffsetX;", "modifier": "", "type": "int", "declarator": "columnLabelOffsetX", "var_name": "columnLabelOffsetX"}, {"original_string": "int valueRowOffsetY;", "modifier": "", "type": "int", "declarator": "valueRowOffsetY", "var_name": "valueRowOffsetY"}, {"original_string": "int decoRowOffsetX;", "modifier": "", "type": "int", "declarator": "decoRowOffsetX", "var_name": "decoRowOffsetX"}, {"original_string": "int valuesStartAtRownumber;", "modifier": "", "type": "int", "declarator": "valuesStartAtRownumber", "var_name": "valuesStartAtRownumber"}], "methods": [{"identifier": "pivot", "parameters": "(final Sheet pivotSourceSheet, final Sheet pivotTargetSheet)", "modifiers": "public", "return": "void", "signature": "void pivot(final Sheet pivotSourceSheet, final Sheet pivotTargetSheet)", "full_signature": "public void pivot(final Sheet pivotSourceSheet, final Sheet pivotTargetSheet)", "class_method_signature": "SheetPivoter.pivot(final Sheet pivotSourceSheet, final Sheet pivotTargetSheet)", "testcase": false, "constructor": false}, {"identifier": "getAnnotationsFromSource", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void getAnnotationsFromSource()", "full_signature": "private void getAnnotationsFromSource()", "class_method_signature": "SheetPivoter.getAnnotationsFromSource()", "testcase": false, "constructor": false}, {"identifier": "setOffsets", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setOffsets()", "full_signature": "private void setOffsets()", "class_method_signature": "SheetPivoter.setOffsets()", "testcase": false, "constructor": false}, {"identifier": "validateAndAdaptSourceDataIfNeeded", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void validateAndAdaptSourceDataIfNeeded()", "full_signature": "private void validateAndAdaptSourceDataIfNeeded()", "class_method_signature": "SheetPivoter.validateAndAdaptSourceDataIfNeeded()", "testcase": false, "constructor": false}, {"identifier": "adaptOrCreateEmptySourceCell", "parameters": "(int cellRow, int cellColumn)", "modifiers": "private", "return": "Cell", "signature": "Cell adaptOrCreateEmptySourceCell(int cellRow, int cellColumn)", "full_signature": "private Cell adaptOrCreateEmptySourceCell(int cellRow, int cellColumn)", "class_method_signature": "SheetPivoter.adaptOrCreateEmptySourceCell(int cellRow, int cellColumn)", "testcase": false, "constructor": false}, {"identifier": "sourceNotValid", "parameters": "()", "modifiers": "private", "return": "IllegalArgumentException", "signature": "IllegalArgumentException sourceNotValid()", "full_signature": "private IllegalArgumentException sourceNotValid()", "class_method_signature": "SheetPivoter.sourceNotValid()", "testcase": false, "constructor": false}, {"identifier": "createEmptyHeaderRowsAndCells", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void createEmptyHeaderRowsAndCells()", "full_signature": "private void createEmptyHeaderRowsAndCells()", "class_method_signature": "SheetPivoter.createEmptyHeaderRowsAndCells()", "testcase": false, "constructor": false}, {"identifier": "fillInHeaderRows", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void fillInHeaderRows()", "full_signature": "private void fillInHeaderRows()", "class_method_signature": "SheetPivoter.fillInHeaderRows()", "testcase": false, "constructor": false}, {"identifier": "getFieldNameCell", "parameters": "(final int column, final int row, final int sourceCol)", "modifiers": "private", "return": "void", "signature": "void getFieldNameCell(final int column, final int row, final int sourceCol)", "full_signature": "private void getFieldNameCell(final int column, final int row, final int sourceCol)", "class_method_signature": "SheetPivoter.getFieldNameCell(final int column, final int row, final int sourceCol)", "testcase": false, "constructor": false}, {"identifier": "getColumnLabelCellsFor", "parameters": "(final int column, final int row, final int orderHeaderRow, final int sourceCol)", "modifiers": "private", "return": "void", "signature": "void getColumnLabelCellsFor(final int column, final int row, final int orderHeaderRow, final int sourceCol)", "full_signature": "private void getColumnLabelCellsFor(final int column, final int row, final int orderHeaderRow, final int sourceCol)", "class_method_signature": "SheetPivoter.getColumnLabelCellsFor(final int column, final int row, final int orderHeaderRow, final int sourceCol)", "testcase": false, "constructor": false}, {"identifier": "fillInFieldNameRow", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void fillInFieldNameRow()", "full_signature": "private void fillInFieldNameRow()", "class_method_signature": "SheetPivoter.fillInFieldNameRow()", "testcase": false, "constructor": false}, {"identifier": "pivotSourceRows", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void pivotSourceRows()", "full_signature": "private void pivotSourceRows()", "class_method_signature": "SheetPivoter.pivotSourceRows()", "testcase": false, "constructor": false}, {"identifier": "findDecorationFor", "parameters": "(Cell cell, Integer order)", "modifiers": "private", "return": "Cell", "signature": "Cell findDecorationFor(Cell cell, Integer order)", "full_signature": "private Cell findDecorationFor(Cell cell, Integer order)", "class_method_signature": "SheetPivoter.findDecorationFor(Cell cell, Integer order)", "testcase": false, "constructor": false}, {"identifier": "addValuesToPivot", "parameters": "(final int rowInTarget, final int rowInSource, final int colInSource, final AggregationType type)", "modifiers": "private", "return": "void", "signature": "void addValuesToPivot(final int rowInTarget, final int rowInSource, final int colInSource, final AggregationType type)", "full_signature": "private void addValuesToPivot(final int rowInTarget, final int rowInSource, final int colInSource, final AggregationType type)", "class_method_signature": "SheetPivoter.addValuesToPivot(final int rowInTarget, final int rowInSource, final int colInSource, final AggregationType type)", "testcase": false, "constructor": false}, {"identifier": "getColPosCellInTarget", "parameters": "(Cell cell, int rowNumber, int colStart, int colEnd)", "modifiers": "private", "return": "Integer", "signature": "Integer getColPosCellInTarget(Cell cell, int rowNumber, int colStart, int colEnd)", "full_signature": "private Integer getColPosCellInTarget(Cell cell, int rowNumber, int colStart, int colEnd)", "class_method_signature": "SheetPivoter.getColPosCellInTarget(Cell cell, int rowNumber, int colStart, int colEnd)", "testcase": false, "constructor": false}, {"identifier": "getRowPosCellInTarget", "parameters": "(Cell cell, int colNumber)", "modifiers": "private", "return": "Integer", "signature": "Integer getRowPosCellInTarget(Cell cell, int colNumber)", "full_signature": "private Integer getRowPosCellInTarget(Cell cell, int colNumber)", "class_method_signature": "SheetPivoter.getRowPosCellInTarget(Cell cell, int colNumber)", "testcase": false, "constructor": false}, {"identifier": "addSummations", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void addSummations()", "full_signature": "private void addSummations()", "class_method_signature": "SheetPivoter.addSummations()", "testcase": false, "constructor": false}, {"identifier": "reWriteFieldNamesToReflectAggregationType", "parameters": "(AggregationType type, Cell cell)", "modifiers": "private", "return": "void", "signature": "void reWriteFieldNamesToReflectAggregationType(AggregationType type, Cell cell)", "full_signature": "private void reWriteFieldNamesToReflectAggregationType(AggregationType type, Cell cell)", "class_method_signature": "SheetPivoter.reWriteFieldNamesToReflectAggregationType(AggregationType type, Cell cell)", "testcase": false, "constructor": false}, {"identifier": "getAggregationTypeFromSource", "parameters": "(final int colNumber)", "modifiers": "private", "return": "AggregationType", "signature": "AggregationType getAggregationTypeFromSource(final int colNumber)", "full_signature": "private AggregationType getAggregationTypeFromSource(final int colNumber)", "class_method_signature": "SheetPivoter.getAggregationTypeFromSource(final int colNumber)", "testcase": false, "constructor": false}, {"identifier": "getDistinctValuesInSourceSheetColumn", "parameters": "(Sheet sourceSheet, Integer columnNumber)", "modifiers": "static", "return": "List<Cell>", "signature": "List<Cell> getDistinctValuesInSourceSheetColumn(Sheet sourceSheet, Integer columnNumber)", "full_signature": "static List<Cell> getDistinctValuesInSourceSheetColumn(Sheet sourceSheet, Integer columnNumber)", "class_method_signature": "SheetPivoter.getDistinctValuesInSourceSheetColumn(Sheet sourceSheet, Integer columnNumber)", "testcase": false, "constructor": false}, {"identifier": "defineSomeCellStyles", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void defineSomeCellStyles()", "full_signature": "private void defineSomeCellStyles()", "class_method_signature": "SheetPivoter.defineSomeCellStyles()", "testcase": false, "constructor": false}], "file": "subdomains/excel/applib/src/main/java/org/apache/isis/subdomains/excel/applib/dom/util/SheetPivoter.java"}, "focal_method": {"identifier": "pivot", "parameters": "(final Sheet pivotSourceSheet, final Sheet pivotTargetSheet)", "modifiers": "public", "return": "void", "body": "public void pivot(final Sheet pivotSourceSheet, final Sheet pivotTargetSheet) {\n\n        sourceSheet = pivotSourceSheet;\n        targetSheet = pivotTargetSheet;\n        annotations = new AnnotationList(new ArrayList<AnnotationTriplet>());\n\n        getAnnotationsFromSource();\n        setOffsets();\n        validateAndAdaptSourceDataIfNeeded();\n        defineSomeCellStyles();\n        createEmptyHeaderRowsAndCells();\n        fillInHeaderRows();\n        pivotSourceRows();\n        addSummations();\n    }", "signature": "void pivot(final Sheet pivotSourceSheet, final Sheet pivotTargetSheet)", "full_signature": "public void pivot(final Sheet pivotSourceSheet, final Sheet pivotTargetSheet)", "class_method_signature": "SheetPivoter.pivot(final Sheet pivotSourceSheet, final Sheet pivotTargetSheet)", "testcase": false, "constructor": false, "invocations": ["getAnnotationsFromSource", "setOffsets", "validateAndAdaptSourceDataIfNeeded", "defineSomeCellStyles", "createEmptyHeaderRowsAndCells", "fillInHeaderRows", "pivotSourceRows", "addSummations"]}, "repository": {"repo_id": 6935442, "url": "https://github.com/apache/isis", "stars": 516, "created": "11/30/2012 8:00:24 AM +00:00", "updates": "2020-01-27T13:28:09+00:00", "fork": "False", "license": "licensed"}}