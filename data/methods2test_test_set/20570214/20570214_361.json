{"test_class": {"identifier": "RegistryEciesAeadHkdfDemHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Charset UTF_8 = Charset.forName(\"UTF-8\");", "modifier": "private static final", "type": "Charset", "declarator": "UTF_8 = Charset.forName(\"UTF-8\")", "var_name": "UTF_8"}, {"original_string": "private KeyTemplate[] keyTemplates;", "modifier": "private", "type": "KeyTemplate[]", "declarator": "keyTemplates", "var_name": "keyTemplates"}], "file": "java_src/src/test/java/com/google/crypto/tink/hybrid/RegistryEciesAeadHkdfDemHelperTest.java"}, "test_case": {"identifier": "testGetAead", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetAead() throws Exception {\n    byte[] plaintext = \"some plaintext string\".getBytes(UTF_8);\n    byte[] associatedData = \"some associated data\".getBytes(UTF_8);\n    int count = 0;\n    for (KeyTemplate template : keyTemplates) {\n      RegistryEciesAeadHkdfDemHelper helper = new RegistryEciesAeadHkdfDemHelper(template);\n      byte[] symmetricKey = Random.randBytes(helper.getSymmetricKeySizeInBytes());\n      Aead aead = helper.getAead(symmetricKey);\n      byte[] ciphertext = aead.encrypt(plaintext, associatedData);\n      byte[] decrypted = aead.decrypt(ciphertext, associatedData);\n      assertArrayEquals(plaintext, decrypted);\n\n      // Try using a symmetric key that is too short.\n      symmetricKey = Random.randBytes(helper.getSymmetricKeySizeInBytes() - 1);\n      try {\n        aead = helper.getAead(symmetricKey);\n        fail(\"Symmetric key too short, should have thrown exception:\\n\" + template.toString());\n      } catch (GeneralSecurityException e) {\n        // Expected.\n        assertExceptionContains(e, \"incorrect length\");\n      }\n\n      // Try using a symmetric key that is too long.\n      symmetricKey = Random.randBytes(helper.getSymmetricKeySizeInBytes() + 1);\n      try {\n        aead = helper.getAead(symmetricKey);\n        fail(\"Symmetric key too long, should have thrown exception:\\n\" + template.toString());\n      } catch (GeneralSecurityException e) {\n        // Expected.\n        assertExceptionContains(e, \"incorrect length\");\n      }\n      count++;\n    }\n    assertEquals(keyTemplates.length, count);\n  }", "signature": "void testGetAead()", "full_signature": "@Test public void testGetAead()", "class_method_signature": "RegistryEciesAeadHkdfDemHelperTest.testGetAead()", "testcase": true, "constructor": false, "invocations": ["getBytes", "getBytes", "randBytes", "getSymmetricKeySizeInBytes", "getAead", "encrypt", "decrypt", "assertArrayEquals", "randBytes", "getSymmetricKeySizeInBytes", "getAead", "fail", "toString", "assertExceptionContains", "randBytes", "getSymmetricKeySizeInBytes", "getAead", "fail", "toString", "assertExceptionContains", "assertEquals"]}, "focal_class": {"identifier": "RegistryEciesAeadHkdfDemHelper", "superclass": "", "interfaces": "implements EciesAeadHkdfDemHelper", "fields": [{"original_string": "private final String demKeyTypeUrl;", "modifier": "private final", "type": "String", "declarator": "demKeyTypeUrl", "var_name": "demKeyTypeUrl"}, {"original_string": "private final int symmetricKeySize;", "modifier": "private final", "type": "int", "declarator": "symmetricKeySize", "var_name": "symmetricKeySize"}, {"original_string": "private AesGcmKey aesGcmKey;", "modifier": "private", "type": "AesGcmKey", "declarator": "aesGcmKey", "var_name": "aesGcmKey"}, {"original_string": "private AesCtrHmacAeadKey aesCtrHmacAeadKey;", "modifier": "private", "type": "AesCtrHmacAeadKey", "declarator": "aesCtrHmacAeadKey", "var_name": "aesCtrHmacAeadKey"}, {"original_string": "private int aesCtrKeySize;", "modifier": "private", "type": "int", "declarator": "aesCtrKeySize", "var_name": "aesCtrKeySize"}], "methods": [{"identifier": "RegistryEciesAeadHkdfDemHelper", "parameters": "(KeyTemplate demTemplate)", "modifiers": "", "return": "", "signature": " RegistryEciesAeadHkdfDemHelper(KeyTemplate demTemplate)", "full_signature": "  RegistryEciesAeadHkdfDemHelper(KeyTemplate demTemplate)", "class_method_signature": "RegistryEciesAeadHkdfDemHelper.RegistryEciesAeadHkdfDemHelper(KeyTemplate demTemplate)", "testcase": false, "constructor": true}, {"identifier": "getSymmetricKeySizeInBytes", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getSymmetricKeySizeInBytes()", "full_signature": "@Override public int getSymmetricKeySizeInBytes()", "class_method_signature": "RegistryEciesAeadHkdfDemHelper.getSymmetricKeySizeInBytes()", "testcase": false, "constructor": false}, {"identifier": "getAead", "parameters": "(final byte[] symmetricKeyValue)", "modifiers": "@Override public", "return": "Aead", "signature": "Aead getAead(final byte[] symmetricKeyValue)", "full_signature": "@Override public Aead getAead(final byte[] symmetricKeyValue)", "class_method_signature": "RegistryEciesAeadHkdfDemHelper.getAead(final byte[] symmetricKeyValue)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/hybrid/RegistryEciesAeadHkdfDemHelper.java"}, "focal_method": {"identifier": "getAead", "parameters": "(final byte[] symmetricKeyValue)", "modifiers": "@Override public", "return": "Aead", "body": "@Override\n  public Aead getAead(final byte[] symmetricKeyValue) throws GeneralSecurityException {\n    if (symmetricKeyValue.length != getSymmetricKeySizeInBytes()) {\n      throw new GeneralSecurityException(\"Symmetric key has incorrect length\");\n    }\n    if (demKeyTypeUrl.equals(AeadConfig.AES_GCM_TYPE_URL)) {\n      AesGcmKey aeadKey = AesGcmKey.newBuilder()\n          .mergeFrom(aesGcmKey)\n          .setKeyValue(ByteString.copyFrom(symmetricKeyValue, 0, symmetricKeySize))\n          .build();\n      return Registry.getPrimitive(demKeyTypeUrl, aeadKey, Aead.class);\n    } else if (demKeyTypeUrl.equals(AeadConfig.AES_CTR_HMAC_AEAD_TYPE_URL)) {\n      byte[] aesCtrKeyValue = Arrays.copyOfRange(symmetricKeyValue, 0, aesCtrKeySize);\n      byte[] hmacKeyValue = Arrays.copyOfRange(symmetricKeyValue, aesCtrKeySize, symmetricKeySize);\n      AesCtrKey aesCtrKey =\n          AesCtrKey.newBuilder()\n              .mergeFrom(aesCtrHmacAeadKey.getAesCtrKey())\n              .setKeyValue(ByteString.copyFrom(aesCtrKeyValue))\n              .build();\n      HmacKey hmacKey =\n          HmacKey.newBuilder()\n              .mergeFrom(aesCtrHmacAeadKey.getHmacKey())\n              .setKeyValue(ByteString.copyFrom(hmacKeyValue))\n              .build();\n      AesCtrHmacAeadKey aeadKey =\n          AesCtrHmacAeadKey.newBuilder()\n              .setVersion(aesCtrHmacAeadKey.getVersion())\n              .setAesCtrKey(aesCtrKey)\n              .setHmacKey(hmacKey)\n              .build();\n      return Registry.getPrimitive(demKeyTypeUrl, aeadKey, Aead.class);\n    } else {\n      throw new GeneralSecurityException(\"unknown DEM key type\");\n    }\n  }", "signature": "Aead getAead(final byte[] symmetricKeyValue)", "full_signature": "@Override public Aead getAead(final byte[] symmetricKeyValue)", "class_method_signature": "RegistryEciesAeadHkdfDemHelper.getAead(final byte[] symmetricKeyValue)", "testcase": false, "constructor": false, "invocations": ["getSymmetricKeySizeInBytes", "equals", "build", "setKeyValue", "mergeFrom", "newBuilder", "copyFrom", "getPrimitive", "equals", "copyOfRange", "copyOfRange", "build", "setKeyValue", "mergeFrom", "newBuilder", "getAesCtrKey", "copyFrom", "build", "setKeyValue", "mergeFrom", "newBuilder", "getHmacKey", "copyFrom", "build", "setHmacKey", "setAesCtrKey", "setVersion", "newBuilder", "getVersion", "getPrimitive"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}