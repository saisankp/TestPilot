{"test_class": {"identifier": "ConsolidationAlgorithmBaseTest", "superclass": "extends ConsolidationAlgorithmsTest", "interfaces": "", "fields": [{"original_string": "private ConsolidationAlgorithmBase spyAlgorithm;", "modifier": "private", "type": "ConsolidationAlgorithmBase", "declarator": "spyAlgorithm", "var_name": "spyAlgorithm"}], "file": "autonomic-administration-algorithms/src/test/java/br/com/autonomiccs/autonomic/administration/algorithms/impl/ConsolidationAlgorithmBaseTest.java"}, "test_case": {"identifier": "mapVMsToHost", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void mapVMsToHost() {\n        List<HostResources> hosts = createHosts();\n        Map<Long, HostResources> migrations = spyAlgorithm.mapVMsToHost(hosts);\n\n        long id = hosts.get(1).getVmsResources().get(0).getVmId();\n\n        Assert.assertEquals(1, migrations.size());\n        Assert.assertEquals(3000l, hosts.get(0).getUsedCpu());\n        Assert.assertEquals(1500l, hosts.get(0).getUsedMemoryInMegaBytes());\n        Assert.assertEquals(hosts.get(0).getHostId(), migrations.get(id).getHostId());\n\n        InOrder inOrder = Mockito.inOrder(spyAlgorithm);\n        inOrder.verify(spyAlgorithm).canMigrateVmToHost(hosts.get(1).getVmsResources().get(0), hosts.get(0));\n        inOrder.verify(spyAlgorithm).updateHostUsedResources(hosts.get(1).getVmsResources().get(0), hosts.get(0));\n    }", "signature": "void mapVMsToHost()", "full_signature": "@Test public void mapVMsToHost()", "class_method_signature": "ConsolidationAlgorithmBaseTest.mapVMsToHost()", "testcase": true, "constructor": false, "invocations": ["createHosts", "mapVMsToHost", "getVmId", "get", "getVmsResources", "get", "assertEquals", "size", "assertEquals", "getUsedCpu", "get", "assertEquals", "getUsedMemoryInMegaBytes", "get", "assertEquals", "getHostId", "get", "getHostId", "get", "inOrder", "canMigrateVmToHost", "verify", "get", "getVmsResources", "get", "get", "updateHostUsedResources", "verify", "get", "getVmsResources", "get", "get"]}, "focal_class": {"identifier": "ConsolidationAlgorithmBase", "superclass": "extends ClusterManagementDummyAlgorithm", "interfaces": "", "fields": [{"original_string": "protected final static int BYTES_TO_MEGA_BYTES = 1000000;", "modifier": "protected final static", "type": "int", "declarator": "BYTES_TO_MEGA_BYTES = 1000000", "var_name": "BYTES_TO_MEGA_BYTES"}, {"original_string": "protected boolean canHeuristicShutdownHost = true;", "modifier": "protected", "type": "boolean", "declarator": "canHeuristicShutdownHost = true", "var_name": "canHeuristicShutdownHost"}], "methods": [{"identifier": "getClusterIntervalBetweenConsolidation", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getClusterIntervalBetweenConsolidation()", "full_signature": "@Override public int getClusterIntervalBetweenConsolidation()", "class_method_signature": "ConsolidationAlgorithmBase.getClusterIntervalBetweenConsolidation()", "testcase": false, "constructor": false}, {"identifier": "mapVMsToHost", "parameters": "(List<HostResources> rankedHosts)", "modifiers": "@Override public", "return": "Map<Long, HostResources>", "signature": "Map<Long, HostResources> mapVMsToHost(List<HostResources> rankedHosts)", "full_signature": "@Override public Map<Long, HostResources> mapVMsToHost(List<HostResources> rankedHosts)", "class_method_signature": "ConsolidationAlgorithmBase.mapVMsToHost(List<HostResources> rankedHosts)", "testcase": false, "constructor": false}, {"identifier": "canMigrateVmToHost", "parameters": "(VmResources vm, HostResources host)", "modifiers": "public", "return": "boolean", "signature": "boolean canMigrateVmToHost(VmResources vm, HostResources host)", "full_signature": "public boolean canMigrateVmToHost(VmResources vm, HostResources host)", "class_method_signature": "ConsolidationAlgorithmBase.canMigrateVmToHost(VmResources vm, HostResources host)", "testcase": false, "constructor": false}, {"identifier": "getHostAvailableMemory", "parameters": "(HostResources host)", "modifiers": "protected", "return": "long", "signature": "long getHostAvailableMemory(HostResources host)", "full_signature": "protected long getHostAvailableMemory(HostResources host)", "class_method_signature": "ConsolidationAlgorithmBase.getHostAvailableMemory(HostResources host)", "testcase": false, "constructor": false}, {"identifier": "getHostTotalMemoryInMegaBytes", "parameters": "(HostResources host)", "modifiers": "protected", "return": "long", "signature": "long getHostTotalMemoryInMegaBytes(HostResources host)", "full_signature": "protected long getHostTotalMemoryInMegaBytes(HostResources host)", "class_method_signature": "ConsolidationAlgorithmBase.getHostTotalMemoryInMegaBytes(HostResources host)", "testcase": false, "constructor": false}, {"identifier": "getHostAvailableCpu", "parameters": "(HostResources host)", "modifiers": "protected", "return": "float", "signature": "float getHostAvailableCpu(HostResources host)", "full_signature": "protected float getHostAvailableCpu(HostResources host)", "class_method_signature": "ConsolidationAlgorithmBase.getHostAvailableCpu(HostResources host)", "testcase": false, "constructor": false}, {"identifier": "updateHostUsedResources", "parameters": "(VmResources vm, HostResources host)", "modifiers": "public", "return": "void", "signature": "void updateHostUsedResources(VmResources vm, HostResources host)", "full_signature": "public void updateHostUsedResources(VmResources vm, HostResources host)", "class_method_signature": "ConsolidationAlgorithmBase.updateHostUsedResources(VmResources vm, HostResources host)", "testcase": false, "constructor": false}, {"identifier": "canPowerOffHost", "parameters": "(HostResources hostToPowerOff, CloudResources cloudResources)", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean canPowerOffHost(HostResources hostToPowerOff, CloudResources cloudResources)", "full_signature": "@Override public final boolean canPowerOffHost(HostResources hostToPowerOff, CloudResources cloudResources)", "class_method_signature": "ConsolidationAlgorithmBase.canPowerOffHost(HostResources hostToPowerOff, CloudResources cloudResources)", "testcase": false, "constructor": false}, {"identifier": "internalCanPowerOffHost", "parameters": "(HostResources hostToPowerOff, CloudResources cloudResources)", "modifiers": "protected", "return": "boolean", "signature": "boolean internalCanPowerOffHost(HostResources hostToPowerOff, CloudResources cloudResources)", "full_signature": "protected boolean internalCanPowerOffHost(HostResources hostToPowerOff, CloudResources cloudResources)", "class_method_signature": "ConsolidationAlgorithmBase.internalCanPowerOffHost(HostResources hostToPowerOff, CloudResources cloudResources)", "testcase": false, "constructor": false}, {"identifier": "canPowerOffAnotherHostInCloud", "parameters": "(CloudResources cloudResources)", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean canPowerOffAnotherHostInCloud(CloudResources cloudResources)", "full_signature": "@Override public final boolean canPowerOffAnotherHostInCloud(CloudResources cloudResources)", "class_method_signature": "ConsolidationAlgorithmBase.canPowerOffAnotherHostInCloud(CloudResources cloudResources)", "testcase": false, "constructor": false}, {"identifier": "internalCanPowerOffAnotherHostInCloud", "parameters": "(CloudResources cloudResources)", "modifiers": "protected", "return": "boolean", "signature": "boolean internalCanPowerOffAnotherHostInCloud(CloudResources cloudResources)", "full_signature": "protected boolean internalCanPowerOffAnotherHostInCloud(CloudResources cloudResources)", "class_method_signature": "ConsolidationAlgorithmBase.internalCanPowerOffAnotherHostInCloud(CloudResources cloudResources)", "testcase": false, "constructor": false}, {"identifier": "canHeuristicShutdownHosts", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canHeuristicShutdownHosts()", "full_signature": "@Override public boolean canHeuristicShutdownHosts()", "class_method_signature": "ConsolidationAlgorithmBase.canHeuristicShutdownHosts()", "testcase": false, "constructor": false}], "file": "autonomic-administration-algorithms/src/main/java/br/com/autonomiccs/autonomic/administration/algorithms/impl/ConsolidationAlgorithmBase.java"}, "focal_method": {"identifier": "mapVMsToHost", "parameters": "(List<HostResources> rankedHosts)", "modifiers": "@Override public", "return": "Map<Long, HostResources>", "body": "@Override\n    public Map<Long, HostResources> mapVMsToHost(List<HostResources> rankedHosts) {\n        Map<Long, HostResources> vmsToHost = new HashMap<>();\n        for (int i = rankedHosts.size() - 1; i > 0; i--) {\n            for (VmResources vmResources : rankedHosts.get(i).getVmsResources()) {\n                for (HostResources hostCandidateToStayRunning : rankedHosts) {\n                    if (canMigrateVmToHost(vmResources, hostCandidateToStayRunning)) {\n                        vmsToHost.put(vmResources.getVmId(), hostCandidateToStayRunning);\n                        updateHostUsedResources(vmResources, hostCandidateToStayRunning);\n                        break;\n                    }\n                }\n            }\n        }\n        return vmsToHost;\n    }", "signature": "Map<Long, HostResources> mapVMsToHost(List<HostResources> rankedHosts)", "full_signature": "@Override public Map<Long, HostResources> mapVMsToHost(List<HostResources> rankedHosts)", "class_method_signature": "ConsolidationAlgorithmBase.mapVMsToHost(List<HostResources> rankedHosts)", "testcase": false, "constructor": false, "invocations": ["size", "getVmsResources", "get", "canMigrateVmToHost", "put", "getVmId", "updateHostUsedResources"]}, "repository": {"repo_id": 56359101, "url": "https://github.com/Autonomiccs/autonomiccs-platform", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 944, "license": "licensed"}}