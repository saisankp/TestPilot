{"test_class": {"identifier": "VhdProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "VhdProcessor processor;", "modifier": "", "type": "VhdProcessor", "declarator": "processor", "var_name": "processor"}, {"original_string": "@Mock\n    StorageLayer mockStorageLayer;", "modifier": "@Mock", "type": "StorageLayer", "declarator": "mockStorageLayer", "var_name": "mockStorageLayer"}], "file": "nucleo/src/test/java/com/cloud/storage/template/VhdProcessorTest.java"}, "test_case": {"identifier": "testProcess", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProcess() throws Exception {\n        String templatePath = \"/tmp\";\n        String templateName = \"template\";\n        long virtualSize = 2000;\n        long actualSize = 1000;\n\n        Mockito.when(mockStorageLayer.exists(Mockito.anyString())).thenReturn(true);\n        File mockFile = Mockito.mock(File.class);\n\n        Mockito.when(mockStorageLayer.getFile(Mockito.anyString())).thenReturn(mockFile);\n        Mockito.when(mockStorageLayer.getSize(Mockito.anyString())).thenReturn(actualSize);\n        Mockito.doReturn(virtualSize).when(processor).getTemplateVirtualSize((File) Mockito.any());\n\n        Processor.FormatInfo info = processor.process(templatePath, null, templateName);\n        Assert.assertEquals(Storage.ImageFormat.VHD, info.format);\n        Assert.assertEquals(actualSize, info.size);\n        Assert.assertEquals(virtualSize, info.virtualSize);\n        Assert.assertEquals(templateName + \".vhd\", info.filename);\n    }", "signature": "void testProcess()", "full_signature": "@Test public void testProcess()", "class_method_signature": "VhdProcessorTest.testProcess()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "exists", "anyString", "mock", "thenReturn", "when", "getFile", "anyString", "thenReturn", "when", "getSize", "anyString", "getTemplateVirtualSize", "when", "doReturn", "any", "process", "assertEquals", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "VhdProcessor", "superclass": "extends AdapterBase", "interfaces": "implements Processor", "fields": [{"original_string": "private static final Logger s_logger = LoggerFactory.getLogger(VhdProcessor.class);", "modifier": "private static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(VhdProcessor.class)", "var_name": "s_logger"}, {"original_string": "StorageLayer _storage;", "modifier": "", "type": "StorageLayer", "declarator": "_storage", "var_name": "_storage"}, {"original_string": "private int vhdFooterSize = 512;", "modifier": "private", "type": "int", "declarator": "vhdFooterSize = 512", "var_name": "vhdFooterSize"}, {"original_string": "private int vhdFooterCreatorAppOffset = 28;", "modifier": "private", "type": "int", "declarator": "vhdFooterCreatorAppOffset = 28", "var_name": "vhdFooterCreatorAppOffset"}, {"original_string": "private int vhdFooterCreatorVerOffset = 32;", "modifier": "private", "type": "int", "declarator": "vhdFooterCreatorVerOffset = 32", "var_name": "vhdFooterCreatorVerOffset"}, {"original_string": "private int vhdFooterCurrentSizeOffset = 48;", "modifier": "private", "type": "int", "declarator": "vhdFooterCurrentSizeOffset = 48", "var_name": "vhdFooterCurrentSizeOffset"}, {"original_string": "private byte[][] citrixCreatorApp = { {0x74, 0x61, 0x70, 0x00}, {0x43, 0x54, 0x58, 0x53}};", "modifier": "private", "type": "byte[][]", "declarator": "citrixCreatorApp = { {0x74, 0x61, 0x70, 0x00}, {0x43, 0x54, 0x58, 0x53}}", "var_name": "citrixCreatorApp"}], "methods": [{"identifier": "process", "parameters": "(String templatePath, ImageFormat format, String templateName)", "modifiers": "@Override public", "return": "FormatInfo", "signature": "FormatInfo process(String templatePath, ImageFormat format, String templateName)", "full_signature": "@Override public FormatInfo process(String templatePath, ImageFormat format, String templateName)", "class_method_signature": "VhdProcessor.process(String templatePath, ImageFormat format, String templateName)", "testcase": false, "constructor": false}, {"identifier": "getVirtualSize", "parameters": "(File file)", "modifiers": "@Override public", "return": "long", "signature": "long getVirtualSize(File file)", "full_signature": "@Override public long getVirtualSize(File file)", "class_method_signature": "VhdProcessor.getVirtualSize(File file)", "testcase": false, "constructor": false}, {"identifier": "getTemplateVirtualSize", "parameters": "(File file)", "modifiers": "protected", "return": "long", "signature": "long getTemplateVirtualSize(File file)", "full_signature": "protected long getTemplateVirtualSize(File file)", "class_method_signature": "VhdProcessor.getTemplateVirtualSize(File file)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(String name, Map<String, Object> params)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean configure(String name, Map<String, Object> params)", "full_signature": "@Override public boolean configure(String name, Map<String, Object> params)", "class_method_signature": "VhdProcessor.configure(String name, Map<String, Object> params)", "testcase": false, "constructor": false}], "file": "nucleo/src/main/java/com/cloud/storage/template/VhdProcessor.java"}, "focal_method": {"identifier": "process", "parameters": "(String templatePath, ImageFormat format, String templateName)", "modifiers": "@Override public", "return": "FormatInfo", "body": "@Override\n    public FormatInfo process(String templatePath, ImageFormat format, String templateName) throws InternalErrorException {\n        if (format != null) {\n            s_logger.debug(\"We currently don't handle conversion from \" + format + \" to VHD.\");\n            return null;\n        }\n\n        String vhdPath = templatePath + File.separator + templateName + \".\" + ImageFormat.VHD.getFileExtension();\n        if (!_storage.exists(vhdPath)) {\n            s_logger.debug(\"Unable to find the vhd file: \" + vhdPath);\n            return null;\n        }\n\n        File vhdFile = _storage.getFile(vhdPath);\n\n        FormatInfo info = new FormatInfo();\n        info.format = ImageFormat.VHD;\n        info.filename = templateName + \".\" + ImageFormat.VHD.getFileExtension();\n        info.size = _storage.getSize(vhdPath);\n\n        try {\n            info.virtualSize = getTemplateVirtualSize(vhdFile);\n        } catch (IOException e) {\n            s_logger.error(\"Unable to get the virtual size for \" + vhdPath);\n            throw new InternalErrorException(\"unable to get virtual size from vhd file\");\n        }\n\n        return info;\n    }", "signature": "FormatInfo process(String templatePath, ImageFormat format, String templateName)", "full_signature": "@Override public FormatInfo process(String templatePath, ImageFormat format, String templateName)", "class_method_signature": "VhdProcessor.process(String templatePath, ImageFormat format, String templateName)", "testcase": false, "constructor": false, "invocations": ["debug", "getFileExtension", "exists", "debug", "getFile", "getFileExtension", "getSize", "getTemplateVirtualSize", "error"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}