{"test_class": {"identifier": "QRCodeUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final File savedQrCodeImage = new File(QR_CODE_FILEPATH);", "modifier": "private final", "type": "File", "declarator": "savedQrCodeImage = new File(QR_CODE_FILEPATH)", "var_name": "savedQrCodeImage"}, {"original_string": "private final File md5File = new File(MD5_CACHE_PATH);", "modifier": "private final", "type": "File", "declarator": "md5File = new File(MD5_CACHE_PATH)", "var_name": "md5File"}], "file": "collect_app/src/test/java/org/odk/collect/android/utilities/QRCodeUtilsTest.java"}, "test_case": {"identifier": "readQRCodeFromDiskIfCacheExists", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void readQRCodeFromDiskIfCacheExists() throws NoSuchAlgorithmException, IOException, WriterException {\n        String expectedData = \"{\\\"general\\\":{},\\\"admin\\\":{}}\";\n\n        // stubbing cache and bitmap files\n        new File(Collect.SETTINGS).mkdirs();\n        FileUtils.saveBitmapToFile(QRCodeUtils.generateQRBitMap(expectedData, 100), QR_CODE_FILEPATH);\n        FileUtils.write(md5File, getDigest(expectedData.getBytes()));\n\n        // verify that QRCode and md5 cache files exist\n        assertTrue(savedQrCodeImage.exists());\n        assertTrue(md5File.exists());\n\n        final long lastModifiedQRCode = savedQrCodeImage.lastModified();\n        final long lastModifiedCache = md5File.lastModified();\n\n        final GenerationResults generationResults = new GenerationResults();\n        generateQrCode(generationResults);\n\n        // assert that files were not modified\n        assertEquals(lastModifiedCache, md5File.lastModified());\n        assertEquals(lastModifiedQRCode, savedQrCodeImage.lastModified());\n\n        verifyCachedMd5Data(expectedData);\n    }", "signature": "void readQRCodeFromDiskIfCacheExists()", "full_signature": "@Test public void readQRCodeFromDiskIfCacheExists()", "class_method_signature": "QRCodeUtilsTest.readQRCodeFromDiskIfCacheExists()", "testcase": true, "constructor": false, "invocations": ["mkdirs", "saveBitmapToFile", "generateQRBitMap", "write", "getDigest", "getBytes", "assertTrue", "exists", "assertTrue", "exists", "lastModified", "lastModified", "generateQrCode", "assertEquals", "lastModified", "assertEquals", "lastModified", "verifyCachedMd5Data"]}, "focal_class": {"identifier": "QRCodeUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String QR_CODE_FILEPATH = Collect.SETTINGS + File.separator + \"collect-settings.png\";", "modifier": "public static final", "type": "String", "declarator": "QR_CODE_FILEPATH = Collect.SETTINGS + File.separator + \"collect-settings.png\"", "var_name": "QR_CODE_FILEPATH"}, {"original_string": "private static final int QR_CODE_SIDE_LENGTH = 400;", "modifier": "private static final", "type": "int", "declarator": "QR_CODE_SIDE_LENGTH = 400", "var_name": "QR_CODE_SIDE_LENGTH"}, {"original_string": "private static final String SETTINGS_MD5_FILE = \".collect-settings-hash\";", "modifier": "private static final", "type": "String", "declarator": "SETTINGS_MD5_FILE = \".collect-settings-hash\"", "var_name": "SETTINGS_MD5_FILE"}, {"original_string": "static final String MD5_CACHE_PATH = Collect.SETTINGS + File.separator + SETTINGS_MD5_FILE;", "modifier": "static final", "type": "String", "declarator": "MD5_CACHE_PATH = Collect.SETTINGS + File.separator + SETTINGS_MD5_FILE", "var_name": "MD5_CACHE_PATH"}], "methods": [{"identifier": "QRCodeUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " QRCodeUtils()", "full_signature": "private  QRCodeUtils()", "class_method_signature": "QRCodeUtils.QRCodeUtils()", "testcase": false, "constructor": true}, {"identifier": "decodeFromBitmap", "parameters": "(Bitmap bitmap)", "modifiers": "public static", "return": "String", "signature": "String decodeFromBitmap(Bitmap bitmap)", "full_signature": "public static String decodeFromBitmap(Bitmap bitmap)", "class_method_signature": "QRCodeUtils.decodeFromBitmap(Bitmap bitmap)", "testcase": false, "constructor": false}, {"identifier": "getBinaryBitmap", "parameters": "(Bitmap bitmap)", "modifiers": "@NonNull private static", "return": "BinaryBitmap", "signature": "BinaryBitmap getBinaryBitmap(Bitmap bitmap)", "full_signature": "@NonNull private static BinaryBitmap getBinaryBitmap(Bitmap bitmap)", "class_method_signature": "QRCodeUtils.getBinaryBitmap(Bitmap bitmap)", "testcase": false, "constructor": false}, {"identifier": "generateQRBitMap", "parameters": "(String data, int sideLength)", "modifiers": "public static", "return": "Bitmap", "signature": "Bitmap generateQRBitMap(String data, int sideLength)", "full_signature": "public static Bitmap generateQRBitMap(String data, int sideLength)", "class_method_signature": "QRCodeUtils.generateQRBitMap(String data, int sideLength)", "testcase": false, "constructor": false}, {"identifier": "getQRCodeGeneratorObservable", "parameters": "(Collection<String> selectedPasswordKeys)", "modifiers": "public static", "return": "Observable<Bitmap>", "signature": "Observable<Bitmap> getQRCodeGeneratorObservable(Collection<String> selectedPasswordKeys)", "full_signature": "public static Observable<Bitmap> getQRCodeGeneratorObservable(Collection<String> selectedPasswordKeys)", "class_method_signature": "QRCodeUtils.getQRCodeGeneratorObservable(Collection<String> selectedPasswordKeys)", "testcase": false, "constructor": false}], "file": "collect_app/src/main/java/org/odk/collect/android/utilities/QRCodeUtils.java"}, "focal_method": {"identifier": "generateQRBitMap", "parameters": "(String data, int sideLength)", "modifiers": "public static", "return": "Bitmap", "body": "public static Bitmap generateQRBitMap(String data, int sideLength) throws IOException, WriterException {\n        final long time = System.currentTimeMillis();\n        String compressedData = CompressionUtils.compress(data);\n\n        // Maximum capacity for QR Codes is 4,296 characters (Alphanumeric)\n        if (compressedData.length() > 4000) {\n            throw new IOException(Collect.getInstance().getString(R.string.encoding_max_limit));\n        }\n\n        Map<EncodeHintType, ErrorCorrectionLevel> hints = new HashMap<>();\n        hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);\n        QRCodeWriter qrCodeWriter = new QRCodeWriter();\n        BitMatrix bitMatrix = qrCodeWriter.encode(compressedData, BarcodeFormat.QR_CODE, sideLength, sideLength, hints);\n\n        Bitmap bmp = Bitmap.createBitmap(sideLength, sideLength, Bitmap.Config.RGB_565);\n        for (int x = 0; x < sideLength; x++) {\n            for (int y = 0; y < sideLength; y++) {\n                bmp.setPixel(x, y, bitMatrix.get(x, y) ? Color.BLACK : Color.WHITE);\n            }\n        }\n        Timber.i(\"QR Code generation took : %d ms\", System.currentTimeMillis() - time);\n        return bmp;\n    }", "signature": "Bitmap generateQRBitMap(String data, int sideLength)", "full_signature": "public static Bitmap generateQRBitMap(String data, int sideLength)", "class_method_signature": "QRCodeUtils.generateQRBitMap(String data, int sideLength)", "testcase": false, "constructor": false, "invocations": ["currentTimeMillis", "compress", "length", "getString", "getInstance", "put", "encode", "createBitmap", "setPixel", "get", "i", "currentTimeMillis"]}, "repository": {"repo_id": 166636413, "url": "https://github.com/fieldsight/fieldsight-mobile", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 14, "size": 41030, "license": "licensed"}}