{"test_class": {"identifier": "UserProfileHandlerTest", "superclass": "", "interfaces": "", "fields": [], "file": "gateleen-user/src/test/java/org/swisspush/gateleen/user/UserProfileHandlerTest.java"}, "test_case": {"identifier": "testCleanupProfileDefaultAttributes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCleanupProfileDefaultAttributes() {\n\n        // Arrange\n        Vertx vertx = mock(Vertx.class);\n        when(vertx.eventBus()).thenReturn(mock(EventBus.class));\n        ResourceStorage resourceStorage = mock(ResourceStorage.class);\n\n        UserProfileConfiguration userProfileConfiguration =\n                UserProfileConfiguration.create()\n                        .userProfileUriPattern(\"/users/v1/([^/]+)/profile\")\n                        .addAllowedProfileProperties(\"username\", \"personalNumber\", \"fullname\", \"mail\", \"department\", \"lang\",\n                                \"addAttr1\", \"addAttr2\", \"addAttr3\")\n                        .rolePattern(\"^z-gateleen[-_](.*)$\")\n                        .build();\n\n        UserProfileHandler userProfileHandler = new UserProfileHandler(vertx, resourceStorage, userProfileConfiguration);\n\n        JsonObject profile = new JsonObject();\n        profile.put(\"personalNumber\", \"04146251\");\n        profile.put(\"username\", \"john\");\n        profile.put(\"mail\", \"john.doe@swisspush.org\");\n        profile.put(\"department\", \"sales\");\n        profile.put(\"lang\", \"de\");\n        profile.put(\"additionalAttribute\", \"addVal\");\n\n        // Act\n        userProfileHandler.cleanupUserProfile(profile, updatedProfile -> {\n\n            // Assert\n            assertThat(updatedProfile.getString(\"personalNumber\"), is(\"04146251\"));\n            assertThat(updatedProfile.getString(\"username\"), is(\"john\"));\n            assertThat(updatedProfile.getString(\"mail\"), is(\"john.doe@swisspush.org\"));\n            assertThat(updatedProfile.getString(\"department\"), is(\"sales\"));\n            assertThat(updatedProfile.getString(\"lang\"), is(\"de\"));\n            assertThat(updatedProfile.getString(\"additionalAttribute\"), is(nullValue()));\n        });\n\n    }", "signature": "void testCleanupProfileDefaultAttributes()", "full_signature": "@Test public void testCleanupProfileDefaultAttributes()", "class_method_signature": "UserProfileHandlerTest.testCleanupProfileDefaultAttributes()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "eventBus", "mock", "mock", "build", "rolePattern", "addAllowedProfileProperties", "userProfileUriPattern", "create", "put", "put", "put", "put", "put", "put", "cleanupUserProfile", "assertThat", "getString", "is", "assertThat", "getString", "is", "assertThat", "getString", "is", "assertThat", "getString", "is", "assertThat", "getString", "is", "assertThat", "getString", "is", "nullValue"]}, "focal_class": {"identifier": "UserProfileHandler", "superclass": "", "interfaces": "implements LoggableResource", "fields": [{"original_string": "private Vertx vertx;", "modifier": "private", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private ResourceStorage storage;", "modifier": "private", "type": "ResourceStorage", "declarator": "storage", "var_name": "storage"}, {"original_string": "private String roleProfileKey = \"profile\";", "modifier": "private", "type": "String", "declarator": "roleProfileKey = \"profile\"", "var_name": "roleProfileKey"}, {"original_string": "private UserProfileConfiguration userProfileConfiguration;", "modifier": "private", "type": "UserProfileConfiguration", "declarator": "userProfileConfiguration", "var_name": "userProfileConfiguration"}, {"original_string": "private UserProfileManipulater userProfileManipulater;", "modifier": "private", "type": "UserProfileManipulater", "declarator": "userProfileManipulater", "var_name": "userProfileManipulater"}, {"original_string": "private Logger log = LoggerFactory.getLogger(UserProfileHandler.class);", "modifier": "private", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(UserProfileHandler.class)", "var_name": "log"}, {"original_string": "private Map<String, JsonObject> roleProfiles = new HashMap<>();", "modifier": "private", "type": "Map<String, JsonObject>", "declarator": "roleProfiles = new HashMap<>()", "var_name": "roleProfiles"}, {"original_string": "private RoleExtractor roleExtractor;", "modifier": "private", "type": "RoleExtractor", "declarator": "roleExtractor", "var_name": "roleExtractor"}, {"original_string": "private boolean logUserProfileChanges = false;", "modifier": "private", "type": "boolean", "declarator": "logUserProfileChanges = false", "var_name": "logUserProfileChanges"}], "methods": [{"identifier": "UserProfileHandler", "parameters": "(Vertx vertx, ResourceStorage storage, UserProfileConfiguration userProfileConfiguration)", "modifiers": "public", "return": "", "signature": " UserProfileHandler(Vertx vertx, ResourceStorage storage, UserProfileConfiguration userProfileConfiguration)", "full_signature": "public  UserProfileHandler(Vertx vertx, ResourceStorage storage, UserProfileConfiguration userProfileConfiguration)", "class_method_signature": "UserProfileHandler.UserProfileHandler(Vertx vertx, ResourceStorage storage, UserProfileConfiguration userProfileConfiguration)", "testcase": false, "constructor": true}, {"identifier": "UserProfileHandler", "parameters": "(Vertx vertx, ResourceStorage storage, LoggingResourceManager loggingResourceManager, UserProfileConfiguration userProfileConfiguration)", "modifiers": "@Deprecated public", "return": "", "signature": " UserProfileHandler(Vertx vertx, ResourceStorage storage, LoggingResourceManager loggingResourceManager, UserProfileConfiguration userProfileConfiguration)", "full_signature": "@Deprecated public  UserProfileHandler(Vertx vertx, ResourceStorage storage, LoggingResourceManager loggingResourceManager, UserProfileConfiguration userProfileConfiguration)", "class_method_signature": "UserProfileHandler.UserProfileHandler(Vertx vertx, ResourceStorage storage, LoggingResourceManager loggingResourceManager, UserProfileConfiguration userProfileConfiguration)", "testcase": false, "constructor": true}, {"identifier": "enableResourceLogging", "parameters": "(boolean resourceLoggingEnabled)", "modifiers": "@Override public", "return": "void", "signature": "void enableResourceLogging(boolean resourceLoggingEnabled)", "full_signature": "@Override public void enableResourceLogging(boolean resourceLoggingEnabled)", "class_method_signature": "UserProfileHandler.enableResourceLogging(boolean resourceLoggingEnabled)", "testcase": false, "constructor": false}, {"identifier": "isUserProfileRequest", "parameters": "(HttpServerRequest request)", "modifiers": "public", "return": "boolean", "signature": "boolean isUserProfileRequest(HttpServerRequest request)", "full_signature": "public boolean isUserProfileRequest(HttpServerRequest request)", "class_method_signature": "UserProfileHandler.isUserProfileRequest(HttpServerRequest request)", "testcase": false, "constructor": false}, {"identifier": "handle", "parameters": "(final HttpServerRequest request)", "modifiers": "public", "return": "void", "signature": "void handle(final HttpServerRequest request)", "full_signature": "public void handle(final HttpServerRequest request)", "class_method_signature": "UserProfileHandler.handle(final HttpServerRequest request)", "testcase": false, "constructor": false}, {"identifier": "cleanupUserProfile", "parameters": "(final JsonObject profile, final Handler<JsonObject> profileCallback)", "modifiers": "protected", "return": "void", "signature": "void cleanupUserProfile(final JsonObject profile, final Handler<JsonObject> profileCallback)", "full_signature": "protected void cleanupUserProfile(final JsonObject profile, final Handler<JsonObject> profileCallback)", "class_method_signature": "UserProfileHandler.cleanupUserProfile(final JsonObject profile, final Handler<JsonObject> profileCallback)", "testcase": false, "constructor": false}, {"identifier": "mergeUserProfileWithRoleProfile", "parameters": "(HttpServerRequest request, JsonObject userProfile)", "modifiers": "private", "return": "JsonObject", "signature": "JsonObject mergeUserProfileWithRoleProfile(HttpServerRequest request, JsonObject userProfile)", "full_signature": "private JsonObject mergeUserProfileWithRoleProfile(HttpServerRequest request, JsonObject userProfile)", "class_method_signature": "UserProfileHandler.mergeUserProfileWithRoleProfile(HttpServerRequest request, JsonObject userProfile)", "testcase": false, "constructor": false}, {"identifier": "updateRoleProfiles", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateRoleProfiles()", "full_signature": "private void updateRoleProfiles()", "class_method_signature": "UserProfileHandler.updateRoleProfiles()", "testcase": false, "constructor": false}, {"identifier": "updateRoleProfile", "parameters": "(final String role)", "modifiers": "private", "return": "void", "signature": "void updateRoleProfile(final String role)", "full_signature": "private void updateRoleProfile(final String role)", "class_method_signature": "UserProfileHandler.updateRoleProfile(final String role)", "testcase": false, "constructor": false}, {"identifier": "mergeRole", "parameters": "(String role, Buffer buffer)", "modifiers": "private", "return": "void", "signature": "void mergeRole(String role, Buffer buffer)", "full_signature": "private void mergeRole(String role, Buffer buffer)", "class_method_signature": "UserProfileHandler.mergeRole(String role, Buffer buffer)", "testcase": false, "constructor": false}, {"identifier": "logPayload", "parameters": "(final HttpServerRequest request, final Integer status, Buffer data, final MultiMap responseHeaders)", "modifiers": "private", "return": "void", "signature": "void logPayload(final HttpServerRequest request, final Integer status, Buffer data, final MultiMap responseHeaders)", "full_signature": "private void logPayload(final HttpServerRequest request, final Integer status, Buffer data, final MultiMap responseHeaders)", "class_method_signature": "UserProfileHandler.logPayload(final HttpServerRequest request, final Integer status, Buffer data, final MultiMap responseHeaders)", "testcase": false, "constructor": false}], "file": "gateleen-user/src/main/java/org/swisspush/gateleen/user/UserProfileHandler.java"}, "focal_method": {"identifier": "cleanupUserProfile", "parameters": "(final JsonObject profile, final Handler<JsonObject> profileCallback)", "modifiers": "protected", "return": "void", "body": "protected void cleanupUserProfile(final JsonObject profile, final Handler<JsonObject> profileCallback) {\n        log.debug(\"About to remove 'not allowed' properties from user profile\");\n        JsonObject profileCopy = profile.copy();\n        Set<String> profileFieldNames = profileCopy.fieldNames();\n        profileFieldNames.stream().filter(fieldName -> !userProfileConfiguration.isAllowedProfileProperty(fieldName)).forEach(fieldName -> {\n            log.debug(\"Removing property '\" + fieldName + \"' from user profile\");\n            profile.remove(fieldName);\n        });\n        profileCallback.handle(profile);\n    }", "signature": "void cleanupUserProfile(final JsonObject profile, final Handler<JsonObject> profileCallback)", "full_signature": "protected void cleanupUserProfile(final JsonObject profile, final Handler<JsonObject> profileCallback)", "class_method_signature": "UserProfileHandler.cleanupUserProfile(final JsonObject profile, final Handler<JsonObject> profileCallback)", "testcase": false, "constructor": false, "invocations": ["debug", "copy", "fieldNames", "forEach", "filter", "stream", "isAllowedProfileProperty", "debug", "remove", "handle"]}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}