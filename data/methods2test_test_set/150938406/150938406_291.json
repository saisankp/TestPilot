{"test_class": {"identifier": "TableUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}, {"original_string": "private String[] colNames = new String[]{\"f0\", \"f1\", \"f2\"};", "modifier": "private", "type": "String[]", "declarator": "colNames = new String[]{\"f0\", \"f1\", \"f2\"}", "var_name": "colNames"}, {"original_string": "private TableSchema tableSchema = new TableSchema(colNames,\n        new TypeInformation[]{Types.INT, Types.LONG, Types.STRING});", "modifier": "private", "type": "TableSchema", "declarator": "tableSchema = new TableSchema(colNames,\n        new TypeInformation[]{Types.INT, Types.LONG, Types.STRING})", "var_name": "tableSchema"}], "file": "core/src/test/java/com/alibaba/alink/common/utils/TableUtilTest.java"}, "test_case": {"identifier": "getCategoricalColsTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getCategoricalColsTest() {\n        TableSchema tableSchema = new TableSchema(new String[]{\"f0\", \"f1\", \"f2\", \"f3\"},\n            new TypeInformation[]{Types.INT, Types.LONG, Types.STRING, Types.BOOLEAN});\n\n        Assert.assertArrayEquals(TableUtil.getCategoricalCols(tableSchema, tableSchema.getFieldNames(), null),\n            new String[]{\"f2\", \"f3\"});\n        Assert.assertArrayEquals(\n            TableUtil.getCategoricalCols(tableSchema, new String[]{\"f2\", \"f1\", \"f0\", \"f3\"}, new String[]{\"f0\"}),\n            new String[]{\"f2\", \"f0\", \"f3\"});\n\n        thrown.expect(IllegalArgumentException.class);\n        Assert.assertArrayEquals(\n            TableUtil.getCategoricalCols(tableSchema, new String[]{\"f3\", \"f0\"}, new String[]{\"f2\"}),\n            new String[]{\"f3\", \"f2\"});\n    }", "signature": "void getCategoricalColsTest()", "full_signature": "@Test public void getCategoricalColsTest()", "class_method_signature": "TableUtilTest.getCategoricalColsTest()", "testcase": true, "constructor": false, "invocations": ["assertArrayEquals", "getCategoricalCols", "getFieldNames", "assertArrayEquals", "getCategoricalCols", "expect", "assertArrayEquals", "getCategoricalCols"]}, "focal_class": {"identifier": "TableUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static LevenshteinSimilarity levenshteinSimilarity = new LevenshteinSimilarity();", "modifier": "private static", "type": "LevenshteinSimilarity", "declarator": "levenshteinSimilarity = new LevenshteinSimilarity()", "var_name": "levenshteinSimilarity"}], "methods": [{"identifier": "getTempTableName", "parameters": "()", "modifiers": "public static synchronized", "return": "String", "signature": "String getTempTableName()", "full_signature": "public static synchronized String getTempTableName()", "class_method_signature": "TableUtil.getTempTableName()", "testcase": false, "constructor": false}, {"identifier": "findColIndex", "parameters": "(String[] tableCols, String targetCol)", "modifiers": "public static", "return": "int", "signature": "int findColIndex(String[] tableCols, String targetCol)", "full_signature": "public static int findColIndex(String[] tableCols, String targetCol)", "class_method_signature": "TableUtil.findColIndex(String[] tableCols, String targetCol)", "testcase": false, "constructor": false}, {"identifier": "findColIndexWithAssert", "parameters": "(String[] tableCols, String targetCol)", "modifiers": "public static", "return": "int", "signature": "int findColIndexWithAssert(String[] tableCols, String targetCol)", "full_signature": "public static int findColIndexWithAssert(String[] tableCols, String targetCol)", "class_method_signature": "TableUtil.findColIndexWithAssert(String[] tableCols, String targetCol)", "testcase": false, "constructor": false}, {"identifier": "findColIndexWithAssertAndHint", "parameters": "(String[] tableCols, String targetCol)", "modifiers": "public static", "return": "int", "signature": "int findColIndexWithAssertAndHint(String[] tableCols, String targetCol)", "full_signature": "public static int findColIndexWithAssertAndHint(String[] tableCols, String targetCol)", "class_method_signature": "TableUtil.findColIndexWithAssertAndHint(String[] tableCols, String targetCol)", "testcase": false, "constructor": false}, {"identifier": "findColIndex", "parameters": "(TableSchema tableSchema, String targetCol)", "modifiers": "public static", "return": "int", "signature": "int findColIndex(TableSchema tableSchema, String targetCol)", "full_signature": "public static int findColIndex(TableSchema tableSchema, String targetCol)", "class_method_signature": "TableUtil.findColIndex(TableSchema tableSchema, String targetCol)", "testcase": false, "constructor": false}, {"identifier": "findColIndexWithAssert", "parameters": "(TableSchema tableSchema, String targetCol)", "modifiers": "public static", "return": "int", "signature": "int findColIndexWithAssert(TableSchema tableSchema, String targetCol)", "full_signature": "public static int findColIndexWithAssert(TableSchema tableSchema, String targetCol)", "class_method_signature": "TableUtil.findColIndexWithAssert(TableSchema tableSchema, String targetCol)", "testcase": false, "constructor": false}, {"identifier": "findColIndexWithAssertAndHint", "parameters": "(TableSchema tableSchema, String targetCol)", "modifiers": "public static", "return": "int", "signature": "int findColIndexWithAssertAndHint(TableSchema tableSchema, String targetCol)", "full_signature": "public static int findColIndexWithAssertAndHint(TableSchema tableSchema, String targetCol)", "class_method_signature": "TableUtil.findColIndexWithAssertAndHint(TableSchema tableSchema, String targetCol)", "testcase": false, "constructor": false}, {"identifier": "findColIndices", "parameters": "(String[] tableCols, String[] targetCols)", "modifiers": "public static", "return": "int[]", "signature": "int[] findColIndices(String[] tableCols, String[] targetCols)", "full_signature": "public static int[] findColIndices(String[] tableCols, String[] targetCols)", "class_method_signature": "TableUtil.findColIndices(String[] tableCols, String[] targetCols)", "testcase": false, "constructor": false}, {"identifier": "findColIndicesWithAssert", "parameters": "(String[] tableCols, String[] targetCols)", "modifiers": "public static", "return": "int[]", "signature": "int[] findColIndicesWithAssert(String[] tableCols, String[] targetCols)", "full_signature": "public static int[] findColIndicesWithAssert(String[] tableCols, String[] targetCols)", "class_method_signature": "TableUtil.findColIndicesWithAssert(String[] tableCols, String[] targetCols)", "testcase": false, "constructor": false}, {"identifier": "findColIndicesWithAssertAndHint", "parameters": "(String[] tableCols, String[] targetCols)", "modifiers": "public static", "return": "int[]", "signature": "int[] findColIndicesWithAssertAndHint(String[] tableCols, String[] targetCols)", "full_signature": "public static int[] findColIndicesWithAssertAndHint(String[] tableCols, String[] targetCols)", "class_method_signature": "TableUtil.findColIndicesWithAssertAndHint(String[] tableCols, String[] targetCols)", "testcase": false, "constructor": false}, {"identifier": "findColIndices", "parameters": "(TableSchema tableSchema, String[] targetCols)", "modifiers": "public static", "return": "int[]", "signature": "int[] findColIndices(TableSchema tableSchema, String[] targetCols)", "full_signature": "public static int[] findColIndices(TableSchema tableSchema, String[] targetCols)", "class_method_signature": "TableUtil.findColIndices(TableSchema tableSchema, String[] targetCols)", "testcase": false, "constructor": false}, {"identifier": "findColIndicesWithAssert", "parameters": "(TableSchema tableSchema, String[] targetCols)", "modifiers": "public static", "return": "int[]", "signature": "int[] findColIndicesWithAssert(TableSchema tableSchema, String[] targetCols)", "full_signature": "public static int[] findColIndicesWithAssert(TableSchema tableSchema, String[] targetCols)", "class_method_signature": "TableUtil.findColIndicesWithAssert(TableSchema tableSchema, String[] targetCols)", "testcase": false, "constructor": false}, {"identifier": "findColIndicesWithAssertAndHint", "parameters": "(TableSchema tableSchema, String[] targetCols)", "modifiers": "public static", "return": "int[]", "signature": "int[] findColIndicesWithAssertAndHint(TableSchema tableSchema, String[] targetCols)", "full_signature": "public static int[] findColIndicesWithAssertAndHint(TableSchema tableSchema, String[] targetCols)", "class_method_signature": "TableUtil.findColIndicesWithAssertAndHint(TableSchema tableSchema, String[] targetCols)", "testcase": false, "constructor": false}, {"identifier": "findColTypes", "parameters": "(TableSchema tableSchema, String[] targetCols)", "modifiers": "public static", "return": "TypeInformation[]", "signature": "TypeInformation[] findColTypes(TableSchema tableSchema, String[] targetCols)", "full_signature": "public static TypeInformation[] findColTypes(TableSchema tableSchema, String[] targetCols)", "class_method_signature": "TableUtil.findColTypes(TableSchema tableSchema, String[] targetCols)", "testcase": false, "constructor": false}, {"identifier": "findColTypesWithAssert", "parameters": "(TableSchema tableSchema, String[] targetCols)", "modifiers": "public static", "return": "TypeInformation[]", "signature": "TypeInformation[] findColTypesWithAssert(TableSchema tableSchema, String[] targetCols)", "full_signature": "public static TypeInformation[] findColTypesWithAssert(TableSchema tableSchema, String[] targetCols)", "class_method_signature": "TableUtil.findColTypesWithAssert(TableSchema tableSchema, String[] targetCols)", "testcase": false, "constructor": false}, {"identifier": "findColTypesWithAssertAndHint", "parameters": "(TableSchema tableSchema, String[] targetCols)", "modifiers": "public static", "return": "TypeInformation[]", "signature": "TypeInformation[] findColTypesWithAssertAndHint(TableSchema tableSchema, String[] targetCols)", "full_signature": "public static TypeInformation[] findColTypesWithAssertAndHint(TableSchema tableSchema, String[] targetCols)", "class_method_signature": "TableUtil.findColTypesWithAssertAndHint(TableSchema tableSchema, String[] targetCols)", "testcase": false, "constructor": false}, {"identifier": "findColType", "parameters": "(TableSchema tableSchema, String targetCol)", "modifiers": "public static", "return": "TypeInformation", "signature": "TypeInformation findColType(TableSchema tableSchema, String targetCol)", "full_signature": "public static TypeInformation findColType(TableSchema tableSchema, String targetCol)", "class_method_signature": "TableUtil.findColType(TableSchema tableSchema, String targetCol)", "testcase": false, "constructor": false}, {"identifier": "findColTypeWithAssert", "parameters": "(TableSchema tableSchema, String targetCol)", "modifiers": "public static", "return": "TypeInformation", "signature": "TypeInformation findColTypeWithAssert(TableSchema tableSchema, String targetCol)", "full_signature": "public static TypeInformation findColTypeWithAssert(TableSchema tableSchema, String targetCol)", "class_method_signature": "TableUtil.findColTypeWithAssert(TableSchema tableSchema, String targetCol)", "testcase": false, "constructor": false}, {"identifier": "findColTypeWithAssertAndHint", "parameters": "(TableSchema tableSchema, String targetCol)", "modifiers": "public static", "return": "TypeInformation", "signature": "TypeInformation findColTypeWithAssertAndHint(TableSchema tableSchema, String targetCol)", "full_signature": "public static TypeInformation findColTypeWithAssertAndHint(TableSchema tableSchema, String targetCol)", "class_method_signature": "TableUtil.findColTypeWithAssertAndHint(TableSchema tableSchema, String targetCol)", "testcase": false, "constructor": false}, {"identifier": "isNumber", "parameters": "(TypeInformation dataType)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNumber(TypeInformation dataType)", "full_signature": "public static boolean isNumber(TypeInformation dataType)", "class_method_signature": "TableUtil.isNumber(TypeInformation dataType)", "testcase": false, "constructor": false}, {"identifier": "isString", "parameters": "(TypeInformation dataType)", "modifiers": "public static", "return": "boolean", "signature": "boolean isString(TypeInformation dataType)", "full_signature": "public static boolean isString(TypeInformation dataType)", "class_method_signature": "TableUtil.isString(TypeInformation dataType)", "testcase": false, "constructor": false}, {"identifier": "isVector", "parameters": "(TypeInformation dataType)", "modifiers": "public static", "return": "boolean", "signature": "boolean isVector(TypeInformation dataType)", "full_signature": "public static boolean isVector(TypeInformation dataType)", "class_method_signature": "TableUtil.isVector(TypeInformation dataType)", "testcase": false, "constructor": false}, {"identifier": "assertSelectedColExist", "parameters": "(String[] tableCols, String... selectedCols)", "modifiers": "public static", "return": "void", "signature": "void assertSelectedColExist(String[] tableCols, String... selectedCols)", "full_signature": "public static void assertSelectedColExist(String[] tableCols, String... selectedCols)", "class_method_signature": "TableUtil.assertSelectedColExist(String[] tableCols, String... selectedCols)", "testcase": false, "constructor": false}, {"identifier": "assertNumericalCols", "parameters": "(TableSchema tableSchema, String... selectedCols)", "modifiers": "public static", "return": "void", "signature": "void assertNumericalCols(TableSchema tableSchema, String... selectedCols)", "full_signature": "public static void assertNumericalCols(TableSchema tableSchema, String... selectedCols)", "class_method_signature": "TableUtil.assertNumericalCols(TableSchema tableSchema, String... selectedCols)", "testcase": false, "constructor": false}, {"identifier": "assertStringCols", "parameters": "(TableSchema tableSchema, String... selectedCols)", "modifiers": "public static", "return": "void", "signature": "void assertStringCols(TableSchema tableSchema, String... selectedCols)", "full_signature": "public static void assertStringCols(TableSchema tableSchema, String... selectedCols)", "class_method_signature": "TableUtil.assertStringCols(TableSchema tableSchema, String... selectedCols)", "testcase": false, "constructor": false}, {"identifier": "assertVectorCols", "parameters": "(TableSchema tableSchema, String... selectedCols)", "modifiers": "public static", "return": "void", "signature": "void assertVectorCols(TableSchema tableSchema, String... selectedCols)", "full_signature": "public static void assertVectorCols(TableSchema tableSchema, String... selectedCols)", "class_method_signature": "TableUtil.assertVectorCols(TableSchema tableSchema, String... selectedCols)", "testcase": false, "constructor": false}, {"identifier": "getStringCols", "parameters": "(TableSchema tableSchema)", "modifiers": "public static", "return": "String[]", "signature": "String[] getStringCols(TableSchema tableSchema)", "full_signature": "public static String[] getStringCols(TableSchema tableSchema)", "class_method_signature": "TableUtil.getStringCols(TableSchema tableSchema)", "testcase": false, "constructor": false}, {"identifier": "getStringCols", "parameters": "(TableSchema tableSchema, String[] excludeCols)", "modifiers": "public static", "return": "String[]", "signature": "String[] getStringCols(TableSchema tableSchema, String[] excludeCols)", "full_signature": "public static String[] getStringCols(TableSchema tableSchema, String[] excludeCols)", "class_method_signature": "TableUtil.getStringCols(TableSchema tableSchema, String[] excludeCols)", "testcase": false, "constructor": false}, {"identifier": "getNumericCols", "parameters": "(TableSchema tableSchema)", "modifiers": "public static", "return": "String[]", "signature": "String[] getNumericCols(TableSchema tableSchema)", "full_signature": "public static String[] getNumericCols(TableSchema tableSchema)", "class_method_signature": "TableUtil.getNumericCols(TableSchema tableSchema)", "testcase": false, "constructor": false}, {"identifier": "getNumericCols", "parameters": "(TableSchema tableSchema, String[] excludeCols)", "modifiers": "public static", "return": "String[]", "signature": "String[] getNumericCols(TableSchema tableSchema, String[] excludeCols)", "full_signature": "public static String[] getNumericCols(TableSchema tableSchema, String[] excludeCols)", "class_method_signature": "TableUtil.getNumericCols(TableSchema tableSchema, String[] excludeCols)", "testcase": false, "constructor": false}, {"identifier": "getCategoricalCols", "parameters": "(\n        TableSchema tableSchema, String[] featureCols, String[] categoricalCols)", "modifiers": "public static", "return": "String[]", "signature": "String[] getCategoricalCols(\n        TableSchema tableSchema, String[] featureCols, String[] categoricalCols)", "full_signature": "public static String[] getCategoricalCols(\n        TableSchema tableSchema, String[] featureCols, String[] categoricalCols)", "class_method_signature": "TableUtil.getCategoricalCols(\n        TableSchema tableSchema, String[] featureCols, String[] categoricalCols)", "testcase": false, "constructor": false}, {"identifier": "formatTitle", "parameters": "(String[] colNames)", "modifiers": "public static", "return": "String", "signature": "String formatTitle(String[] colNames)", "full_signature": "public static String formatTitle(String[] colNames)", "class_method_signature": "TableUtil.formatTitle(String[] colNames)", "testcase": false, "constructor": false}, {"identifier": "formatRows", "parameters": "(Row row)", "modifiers": "public static", "return": "String", "signature": "String formatRows(Row row)", "full_signature": "public static String formatRows(Row row)", "class_method_signature": "TableUtil.formatRows(Row row)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(String[] colNames, List<Row> data)", "modifiers": "public static", "return": "String", "signature": "String format(String[] colNames, List<Row> data)", "full_signature": "public static String format(String[] colNames, List<Row> data)", "class_method_signature": "TableUtil.format(String[] colNames, List<Row> data)", "testcase": false, "constructor": false}, {"identifier": "columnsToSqlClause", "parameters": "(String[] colNames)", "modifiers": "public static", "return": "String", "signature": "String columnsToSqlClause(String[] colNames)", "full_signature": "public static String columnsToSqlClause(String[] colNames)", "class_method_signature": "TableUtil.columnsToSqlClause(String[] colNames)", "testcase": false, "constructor": false}, {"identifier": "toSchemaJson", "parameters": "(TableSchema schema)", "modifiers": "public static", "return": "String", "signature": "String toSchemaJson(TableSchema schema)", "full_signature": "public static String toSchemaJson(TableSchema schema)", "class_method_signature": "TableUtil.toSchemaJson(TableSchema schema)", "testcase": false, "constructor": false}, {"identifier": "fromSchemaJson", "parameters": "(String schemaJson)", "modifiers": "public static", "return": "TableSchema", "signature": "TableSchema fromSchemaJson(String schemaJson)", "full_signature": "public static TableSchema fromSchemaJson(String schemaJson)", "class_method_signature": "TableUtil.fromSchemaJson(String schemaJson)", "testcase": false, "constructor": false}, {"identifier": "concatTables", "parameters": "(Table[] tables, Long sessionId)", "modifiers": "public static", "return": "Table", "signature": "Table concatTables(Table[] tables, Long sessionId)", "full_signature": "public static Table concatTables(Table[] tables, Long sessionId)", "class_method_signature": "TableUtil.concatTables(Table[] tables, Long sessionId)", "testcase": false, "constructor": false}, {"identifier": "splitTable", "parameters": "(Table table)", "modifiers": "public static", "return": "Table[]", "signature": "Table[] splitTable(Table table)", "full_signature": "public static Table[] splitTable(Table table)", "class_method_signature": "TableUtil.splitTable(Table table)", "testcase": false, "constructor": false}, {"identifier": "getRow", "parameters": "(Row row, int... keepIdxs)", "modifiers": "public static", "return": "Row", "signature": "Row getRow(Row row, int... keepIdxs)", "full_signature": "public static Row getRow(Row row, int... keepIdxs)", "class_method_signature": "TableUtil.getRow(Row row, int... keepIdxs)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/common/utils/TableUtil.java"}, "focal_method": {"identifier": "getCategoricalCols", "parameters": "(\n        TableSchema tableSchema, String[] featureCols, String[] categoricalCols)", "modifiers": "public static", "return": "String[]", "body": "public static String[] getCategoricalCols(\n        TableSchema tableSchema, String[] featureCols, String[] categoricalCols) {\n        if (null == featureCols) {\n            return categoricalCols;\n        }\n        List<String> categoricalList = null == categoricalCols ? null : Arrays.asList(categoricalCols);\n        List<String> featureList = Arrays.asList(featureCols);\n        if (null != categoricalCols && !featureList.containsAll(categoricalList)) {\n            throw new IllegalArgumentException(\"CategoricalCols must be included in featureCols!\");\n        }\n\n        TypeInformation[] featureColTypes = findColTypes(tableSchema, featureCols);\n        List<String> res = new ArrayList<>();\n        for (int i = 0; i < featureCols.length; i++) {\n            boolean included = null != categoricalList && categoricalList.contains(featureCols[i]);\n            if (included || Types.BOOLEAN == featureColTypes[i] || Types.STRING == featureColTypes[i]) {\n                res.add(featureCols[i]);\n            }\n        }\n\n        return res.toArray(new String[0]);\n    }", "signature": "String[] getCategoricalCols(\n        TableSchema tableSchema, String[] featureCols, String[] categoricalCols)", "full_signature": "public static String[] getCategoricalCols(\n        TableSchema tableSchema, String[] featureCols, String[] categoricalCols)", "class_method_signature": "TableUtil.getCategoricalCols(\n        TableSchema tableSchema, String[] featureCols, String[] categoricalCols)", "testcase": false, "constructor": false, "invocations": ["asList", "asList", "containsAll", "findColTypes", "contains", "add", "toArray"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}