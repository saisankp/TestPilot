{"test_class": {"identifier": "VariationalInferenceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(VariationalInferenceTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(VariationalInferenceTest.class)", "var_name": "log"}], "file": "contrib/src/test/java/macrobase/analysis/stats/mixture/VariationalInferenceTest.java"}, "test_case": {"identifier": "sviStepTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void sviStepTest() {\n        assertEquals(0.9, VariationalInference.step(0, 1, 0.9), 1e-9);\n        assertEquals(19.0, VariationalInference.step(10, 20, 0.9), 1e-9);\n        assertEquals(12.0, VariationalInference.step(10, 20, 0.2), 1e-9);\n\n        double[] array1 = {1, 2, 6};\n        double[] array2 = {2, 3, 8};\n        double[] array3 = {5, 6, 14};\n        RealVector start = new ArrayRealVector(array1);\n        RealVector end = new ArrayRealVector(array3);\n        assertEquals(new ArrayRealVector(array2), VariationalInference.step(start, end, 0.25));\n\n        double[][] matrix1 = {{1, 2}, {3, 10}};\n        double[][] matrix2 = {{2, 6}, {3, 100}};\n        double[][] matrix3 = {{5, 18}, {3, 370}};\n        RealMatrix s = new BlockRealMatrix(matrix1);\n        RealMatrix e = new BlockRealMatrix(matrix3);\n        assertEquals(new BlockRealMatrix(matrix2), VariationalInference.step(s, e, 0.25));\n    }", "signature": "void sviStepTest()", "full_signature": "@Test public void sviStepTest()", "class_method_signature": "VariationalInferenceTest.sviStepTest()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "step", "assertEquals", "step", "assertEquals", "step", "assertEquals", "step", "assertEquals", "step"]}, "focal_class": {"identifier": "VariationalInference", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(VariationalInference.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(VariationalInference.class)", "var_name": "log"}], "methods": [{"identifier": "normalizeLogProbabilities", "parameters": "(double[] lnMixing, double[] lnPrecision, double[][] dataLogLike)", "modifiers": "public static", "return": "double[][]", "signature": "double[][] normalizeLogProbabilities(double[] lnMixing, double[] lnPrecision, double[][] dataLogLike)", "full_signature": "public static double[][] normalizeLogProbabilities(double[] lnMixing, double[] lnPrecision, double[][] dataLogLike)", "class_method_signature": "VariationalInference.normalizeLogProbabilities(double[] lnMixing, double[] lnPrecision, double[][] dataLogLike)", "testcase": false, "constructor": false}, {"identifier": "trainTestStochastic", "parameters": "(VarGMM model, List<Datum> trainData, List<Datum> testData, MixingComponents mixingComponents, NormalWishartClusters clusters, int desiredMinibatchSize, double delay, double forgettingRate)", "modifiers": "public static", "return": "void", "signature": "void trainTestStochastic(VarGMM model, List<Datum> trainData, List<Datum> testData, MixingComponents mixingComponents, NormalWishartClusters clusters, int desiredMinibatchSize, double delay, double forgettingRate)", "full_signature": "public static void trainTestStochastic(VarGMM model, List<Datum> trainData, List<Datum> testData, MixingComponents mixingComponents, NormalWishartClusters clusters, int desiredMinibatchSize, double delay, double forgettingRate)", "class_method_signature": "VariationalInference.trainTestStochastic(VarGMM model, List<Datum> trainData, List<Datum> testData, MixingComponents mixingComponents, NormalWishartClusters clusters, int desiredMinibatchSize, double delay, double forgettingRate)", "testcase": false, "constructor": false}, {"identifier": "trainTestMeanField", "parameters": "(VarGMM model, List<Datum> trainData, List<Datum> testData, MixingComponents mixingComponents, NormalWishartClusters clusters)", "modifiers": "public static", "return": "void", "signature": "void trainTestMeanField(VarGMM model, List<Datum> trainData, List<Datum> testData, MixingComponents mixingComponents, NormalWishartClusters clusters)", "full_signature": "public static void trainTestMeanField(VarGMM model, List<Datum> trainData, List<Datum> testData, MixingComponents mixingComponents, NormalWishartClusters clusters)", "class_method_signature": "VariationalInference.trainTestMeanField(VarGMM model, List<Datum> trainData, List<Datum> testData, MixingComponents mixingComponents, NormalWishartClusters clusters)", "testcase": false, "constructor": false}, {"identifier": "step", "parameters": "(double value, double newValue, double pace)", "modifiers": "public static", "return": "double", "signature": "double step(double value, double newValue, double pace)", "full_signature": "public static double step(double value, double newValue, double pace)", "class_method_signature": "VariationalInference.step(double value, double newValue, double pace)", "testcase": false, "constructor": false}, {"identifier": "step", "parameters": "(RealVector start, RealVector end, double pace)", "modifiers": "public static", "return": "RealVector", "signature": "RealVector step(RealVector start, RealVector end, double pace)", "full_signature": "public static RealVector step(RealVector start, RealVector end, double pace)", "class_method_signature": "VariationalInference.step(RealVector start, RealVector end, double pace)", "testcase": false, "constructor": false}, {"identifier": "step", "parameters": "(RealMatrix start, RealMatrix end, double pace)", "modifiers": "public static", "return": "RealMatrix", "signature": "RealMatrix step(RealMatrix start, RealMatrix end, double pace)", "full_signature": "public static RealMatrix step(RealMatrix start, RealMatrix end, double pace)", "class_method_signature": "VariationalInference.step(RealMatrix start, RealMatrix end, double pace)", "testcase": false, "constructor": false}, {"identifier": "calculateClusterWeights", "parameters": "(double[][] r)", "modifiers": "protected static", "return": "double[]", "signature": "double[] calculateClusterWeights(double[][] r)", "full_signature": "protected static double[] calculateClusterWeights(double[][] r)", "class_method_signature": "VariationalInference.calculateClusterWeights(double[][] r)", "testcase": false, "constructor": false}], "file": "contrib/src/main/java/macrobase/analysis/stats/mixture/VariationalInference.java"}, "focal_method": {"identifier": "step", "parameters": "(double value, double newValue, double pace)", "modifiers": "public static", "return": "double", "body": "public static double step(double value, double newValue, double pace) {\n        return (1 - pace) * value + pace * newValue;\n    }", "signature": "double step(double value, double newValue, double pace)", "full_signature": "public static double step(double value, double newValue, double pace)", "class_method_signature": "VariationalInference.step(double value, double newValue, double pace)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}