{"test_class": {"identifier": "Vector2ifxTest", "superclass": "extends AbstractVector2DTest<Vector2ifx, Point2ifx, Vector2ifx>", "interfaces": "", "fields": [], "file": "advanced/mathfx/src/test/java/org/arakhne/afc/math/geometry/d2/ifx/Vector2ifxTest.java"}, "test_case": {"identifier": "staticToOrientationVector", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void staticToOrientationVector() {\n        assertFpVectorEquals(1, 0, Vector2ifx.toOrientationVector(0));\n        assertFpVectorEquals(-1, 0, Vector2ifx.toOrientationVector(Math.PI));\n        assertFpVectorEquals(0, 1, Vector2ifx.toOrientationVector(Math.PI/2));\n        assertFpVectorEquals(0, -1, Vector2ifx.toOrientationVector(-Math.PI/2));\n\n        assertInlineParameterUsage(Vector2ifx.class, \"toOrientationVector\", double.class); //$NON-NLS-1$\n    }", "signature": "void staticToOrientationVector()", "full_signature": "@Test public void staticToOrientationVector()", "class_method_signature": "Vector2ifxTest.staticToOrientationVector()", "testcase": true, "constructor": false, "invocations": ["assertFpVectorEquals", "toOrientationVector", "assertFpVectorEquals", "toOrientationVector", "assertFpVectorEquals", "toOrientationVector", "assertFpVectorEquals", "toOrientationVector", "assertInlineParameterUsage"]}, "focal_class": {"identifier": "Vector2ifx", "superclass": "extends Tuple2ifx<Vector2ifx>", "interfaces": "implements Vector2D<Vector2ifx, Point2ifx>", "fields": [{"original_string": "private static final long serialVersionUID = 5782200591782721145L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 5782200591782721145L", "var_name": "serialVersionUID"}, {"original_string": "private ReadOnlyDoubleWrapper lengthSquareProperty;", "modifier": "private", "type": "ReadOnlyDoubleWrapper", "declarator": "lengthSquareProperty", "var_name": "lengthSquareProperty"}, {"original_string": "private ReadOnlyDoubleWrapper lengthProperty;", "modifier": "private", "type": "ReadOnlyDoubleWrapper", "declarator": "lengthProperty", "var_name": "lengthProperty"}], "methods": [{"identifier": "Vector2ifx", "parameters": "()", "modifiers": "public", "return": "", "signature": " Vector2ifx()", "full_signature": "public  Vector2ifx()", "class_method_signature": "Vector2ifx.Vector2ifx()", "testcase": false, "constructor": true}, {"identifier": "Vector2ifx", "parameters": "(IntegerProperty xProperty, IntegerProperty yProperty)", "modifiers": "public", "return": "", "signature": " Vector2ifx(IntegerProperty xProperty, IntegerProperty yProperty)", "full_signature": "public  Vector2ifx(IntegerProperty xProperty, IntegerProperty yProperty)", "class_method_signature": "Vector2ifx.Vector2ifx(IntegerProperty xProperty, IntegerProperty yProperty)", "testcase": false, "constructor": true}, {"identifier": "Vector2ifx", "parameters": "(Tuple2D<?> tuple)", "modifiers": "public", "return": "", "signature": " Vector2ifx(Tuple2D<?> tuple)", "full_signature": "public  Vector2ifx(Tuple2D<?> tuple)", "class_method_signature": "Vector2ifx.Vector2ifx(Tuple2D<?> tuple)", "testcase": false, "constructor": true}, {"identifier": "Vector2ifx", "parameters": "(int[] tuple)", "modifiers": "public", "return": "", "signature": " Vector2ifx(int[] tuple)", "full_signature": "public  Vector2ifx(int[] tuple)", "class_method_signature": "Vector2ifx.Vector2ifx(int[] tuple)", "testcase": false, "constructor": true}, {"identifier": "Vector2ifx", "parameters": "(double[] tuple)", "modifiers": "public", "return": "", "signature": " Vector2ifx(double[] tuple)", "full_signature": "public  Vector2ifx(double[] tuple)", "class_method_signature": "Vector2ifx.Vector2ifx(double[] tuple)", "testcase": false, "constructor": true}, {"identifier": "Vector2ifx", "parameters": "(int x, int y)", "modifiers": "public", "return": "", "signature": " Vector2ifx(int x, int y)", "full_signature": "public  Vector2ifx(int x, int y)", "class_method_signature": "Vector2ifx.Vector2ifx(int x, int y)", "testcase": false, "constructor": true}, {"identifier": "Vector2ifx", "parameters": "(float x, float y)", "modifiers": "public", "return": "", "signature": " Vector2ifx(float x, float y)", "full_signature": "public  Vector2ifx(float x, float y)", "class_method_signature": "Vector2ifx.Vector2ifx(float x, float y)", "testcase": false, "constructor": true}, {"identifier": "Vector2ifx", "parameters": "(double x, double y)", "modifiers": "public", "return": "", "signature": " Vector2ifx(double x, double y)", "full_signature": "public  Vector2ifx(double x, double y)", "class_method_signature": "Vector2ifx.Vector2ifx(double x, double y)", "testcase": false, "constructor": true}, {"identifier": "Vector2ifx", "parameters": "(long x, long y)", "modifiers": "public", "return": "", "signature": " Vector2ifx(long x, long y)", "full_signature": "public  Vector2ifx(long x, long y)", "class_method_signature": "Vector2ifx.Vector2ifx(long x, long y)", "testcase": false, "constructor": true}, {"identifier": "convert", "parameters": "(Tuple2D<?> tuple)", "modifiers": "public static", "return": "Vector2ifx", "signature": "Vector2ifx convert(Tuple2D<?> tuple)", "full_signature": "public static Vector2ifx convert(Tuple2D<?> tuple)", "class_method_signature": "Vector2ifx.convert(Tuple2D<?> tuple)", "testcase": false, "constructor": false}, {"identifier": "toOrientationVector", "parameters": "(double angle)", "modifiers": "@Pure @Inline(value = \"new Vector2ifx(Math.cos($1), Math.sin($1))\", imported = {Vector2ifx.class}) public static", "return": "Vector2ifx", "signature": "Vector2ifx toOrientationVector(double angle)", "full_signature": "@Pure @Inline(value = \"new Vector2ifx(Math.cos($1), Math.sin($1))\", imported = {Vector2ifx.class}) public static Vector2ifx toOrientationVector(double angle)", "class_method_signature": "Vector2ifx.toOrientationVector(double angle)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "Vector2ifx", "signature": "Vector2ifx clone()", "full_signature": "@Override public Vector2ifx clone()", "class_method_signature": "Vector2ifx.clone()", "testcase": false, "constructor": false}, {"identifier": "getLength", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getLength()", "full_signature": "@Override public double getLength()", "class_method_signature": "Vector2ifx.getLength()", "testcase": false, "constructor": false}, {"identifier": "lengthProperty", "parameters": "()", "modifiers": "public", "return": "DoubleProperty", "signature": "DoubleProperty lengthProperty()", "full_signature": "public DoubleProperty lengthProperty()", "class_method_signature": "Vector2ifx.lengthProperty()", "testcase": false, "constructor": false}, {"identifier": "getLengthSquared", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getLengthSquared()", "full_signature": "@Override public double getLengthSquared()", "class_method_signature": "Vector2ifx.getLengthSquared()", "testcase": false, "constructor": false}, {"identifier": "lengthSquaredProperty", "parameters": "()", "modifiers": "public", "return": "DoubleProperty", "signature": "DoubleProperty lengthSquaredProperty()", "full_signature": "public DoubleProperty lengthSquaredProperty()", "class_method_signature": "Vector2ifx.lengthSquaredProperty()", "testcase": false, "constructor": false}, {"identifier": "getGeomFactory", "parameters": "()", "modifiers": "@Override public", "return": "GeomFactory2ifx", "signature": "GeomFactory2ifx getGeomFactory()", "full_signature": "@Override public GeomFactory2ifx getGeomFactory()", "class_method_signature": "Vector2ifx.getGeomFactory()", "testcase": false, "constructor": false}, {"identifier": "toUnmodifiable", "parameters": "()", "modifiers": "@Pure @Override public", "return": "UnmodifiableVector2D<Vector2ifx, Point2ifx>", "signature": "UnmodifiableVector2D<Vector2ifx, Point2ifx> toUnmodifiable()", "full_signature": "@Pure @Override public UnmodifiableVector2D<Vector2ifx, Point2ifx> toUnmodifiable()", "class_method_signature": "Vector2ifx.toUnmodifiable()", "testcase": false, "constructor": false}], "file": "advanced/mathfx/src/main/java/org/arakhne/afc/math/geometry/d2/ifx/Vector2ifx.java"}, "focal_method": {"identifier": "toOrientationVector", "parameters": "(double angle)", "modifiers": "@Pure @Inline(value = \"new Vector2ifx(Math.cos($1), Math.sin($1))\", imported = {Vector2ifx.class}) public static", "return": "Vector2ifx", "body": "@Pure\n\t@Inline(value = \"new Vector2ifx(Math.cos($1), Math.sin($1))\", imported = {Vector2ifx.class})\n\tpublic static Vector2ifx toOrientationVector(double angle) {\n\t\treturn new Vector2ifx(Math.cos(angle), Math.sin(angle));\n\t}", "signature": "Vector2ifx toOrientationVector(double angle)", "full_signature": "@Pure @Inline(value = \"new Vector2ifx(Math.cos($1), Math.sin($1))\", imported = {Vector2ifx.class}) public static Vector2ifx toOrientationVector(double angle)", "class_method_signature": "Vector2ifx.toOrientationVector(double angle)", "testcase": false, "constructor": false, "invocations": ["cos", "sin"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}