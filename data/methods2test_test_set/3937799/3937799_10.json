{"test_class": {"identifier": "TestStreamFile", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Configuration CONF = new Configuration();", "modifier": "private", "type": "Configuration", "declarator": "CONF = new Configuration()", "var_name": "CONF"}, {"original_string": "private DFSClient clientMock = Mockito.mock(DFSClient.class);", "modifier": "private", "type": "DFSClient", "declarator": "clientMock = Mockito.mock(DFSClient.class)", "var_name": "clientMock"}, {"original_string": "private HttpServletRequest mockHttpServletRequest = \n    Mockito.mock(HttpServletRequest.class);", "modifier": "private", "type": "HttpServletRequest", "declarator": "mockHttpServletRequest = \n    Mockito.mock(HttpServletRequest.class)", "var_name": "mockHttpServletRequest"}, {"original_string": "private HttpServletResponse mockHttpServletResponse = \n    Mockito.mock(HttpServletResponse.class);", "modifier": "private", "type": "HttpServletResponse", "declarator": "mockHttpServletResponse = \n    Mockito.mock(HttpServletResponse.class)", "var_name": "mockHttpServletResponse"}, {"original_string": "private final ServletContext mockServletContext = \n    Mockito.mock(ServletContext.class);", "modifier": "private final", "type": "ServletContext", "declarator": "mockServletContext = \n    Mockito.mock(ServletContext.class)", "var_name": "mockServletContext"}, {"original_string": "StreamFile sfile = new StreamFile() {\n    private static final long serialVersionUID = -5513776238875189473L;\n  \n    public ServletContext getServletContext() {\n      return mockServletContext;\n    }\n  \n    @Override\n    protected DFSClient getDFSClient(HttpServletRequest request)\n      throws IOException, InterruptedException {\n      return clientMock;\n    }\n  };", "modifier": "", "type": "StreamFile", "declarator": "sfile = new StreamFile() {\n    private static final long serialVersionUID = -5513776238875189473L;\n  \n    public ServletContext getServletContext() {\n      return mockServletContext;\n    }\n  \n    @Override\n    protected DFSClient getDFSClient(HttpServletRequest request)\n      throws IOException, InterruptedException {\n      return clientMock;\n    }\n  }", "var_name": "sfile"}], "file": "adfs-hdfs-project/adfs-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/TestStreamFile.java"}, "test_case": {"identifier": "testWriteTo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testWriteTo() throws IOException, InterruptedException {\n\n    FSInputStream fsin = new MockFSInputStream();\n    ByteArrayOutputStream os = new ByteArrayOutputStream();\n\n    // new int[]{s_1, c_1, s_2, c_2, ..., s_n, c_n} means to test\n    // reading c_i bytes starting at s_i\n    int[] pairs = new int[]{ 0, 10000,\n                             50, 100,\n                             50, 6000,\n                             1000, 2000,\n                             0, 1,\n                             0, 0,\n                             5000, 0,\n                            };\n                            \n    assertTrue(\"Pairs array must be even\", pairs.length % 2 == 0);\n    \n    for (int i = 0; i < pairs.length; i+=2) {\n      StreamFile.copyFromOffset(fsin, os, pairs[i], pairs[i+1]);\n      assertArrayEquals(\"Reading \" + pairs[i+1]\n                        + \" bytes from offset \" + pairs[i],\n                        getOutputArray(pairs[i], pairs[i+1]),\n                        os.toByteArray());\n      os.reset();\n    }\n    \n  }", "signature": "void testWriteTo()", "full_signature": "@Test public void testWriteTo()", "class_method_signature": "TestStreamFile.testWriteTo()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "copyFromOffset", "assertArrayEquals", "getOutputArray", "toByteArray", "reset"]}, "focal_class": {"identifier": "StreamFile", "superclass": "extends DfsServlet", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "public static final String CONTENT_LENGTH = \"Content-Length\";", "modifier": "public static final", "type": "String", "declarator": "CONTENT_LENGTH = \"Content-Length\"", "var_name": "CONTENT_LENGTH"}, {"original_string": "static InetSocketAddress nameNodeAddr;", "modifier": "static", "type": "InetSocketAddress", "declarator": "nameNodeAddr", "var_name": "nameNodeAddr"}, {"original_string": "static DataNode datanode = null;", "modifier": "static", "type": "DataNode", "declarator": "datanode = null", "var_name": "datanode"}], "methods": [{"identifier": "getDFSClient", "parameters": "(HttpServletRequest request)", "modifiers": "protected", "return": "DFSClient", "signature": "DFSClient getDFSClient(HttpServletRequest request)", "full_signature": "protected DFSClient getDFSClient(HttpServletRequest request)", "class_method_signature": "StreamFile.getDFSClient(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "doGet", "parameters": "(HttpServletRequest request, HttpServletResponse response)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void doGet(HttpServletRequest request, HttpServletResponse response)", "full_signature": "@SuppressWarnings(\"unchecked\") public void doGet(HttpServletRequest request, HttpServletResponse response)", "class_method_signature": "StreamFile.doGet(HttpServletRequest request, HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "sendPartialData", "parameters": "(FSInputStream in,\n                              OutputStream out,\n                              HttpServletResponse response,\n                              long contentLength,\n                              List<InclusiveByteRange> ranges)", "modifiers": "static", "return": "void", "signature": "void sendPartialData(FSInputStream in,\n                              OutputStream out,\n                              HttpServletResponse response,\n                              long contentLength,\n                              List<InclusiveByteRange> ranges)", "full_signature": "static void sendPartialData(FSInputStream in,\n                              OutputStream out,\n                              HttpServletResponse response,\n                              long contentLength,\n                              List<InclusiveByteRange> ranges)", "class_method_signature": "StreamFile.sendPartialData(FSInputStream in,\n                              OutputStream out,\n                              HttpServletResponse response,\n                              long contentLength,\n                              List<InclusiveByteRange> ranges)", "testcase": false, "constructor": false}, {"identifier": "copyFromOffset", "parameters": "(FSInputStream in, OutputStream out, long offset,\n      long count)", "modifiers": "static", "return": "void", "signature": "void copyFromOffset(FSInputStream in, OutputStream out, long offset,\n      long count)", "full_signature": "static void copyFromOffset(FSInputStream in, OutputStream out, long offset,\n      long count)", "class_method_signature": "StreamFile.copyFromOffset(FSInputStream in, OutputStream out, long offset,\n      long count)", "testcase": false, "constructor": false}], "file": "adfs-hdfs-project/adfs-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/StreamFile.java"}, "focal_method": {"identifier": "copyFromOffset", "parameters": "(FSInputStream in, OutputStream out, long offset,\n      long count)", "modifiers": "static", "return": "void", "body": "static void copyFromOffset(FSInputStream in, OutputStream out, long offset,\n      long count) throws IOException {\n    in.seek(offset);\n    IOUtils.copyBytes(in, out, count, false);\n  }", "signature": "void copyFromOffset(FSInputStream in, OutputStream out, long offset,\n      long count)", "full_signature": "static void copyFromOffset(FSInputStream in, OutputStream out, long offset,\n      long count)", "class_method_signature": "StreamFile.copyFromOffset(FSInputStream in, OutputStream out, long offset,\n      long count)", "testcase": false, "constructor": false, "invocations": ["seek", "copyBytes"]}, "repository": {"repo_id": 3937799, "url": "https://github.com/taobao/ADFS", "language": "Java", "is_fork": false, "fork_count": 50, "stargazer_count": 108, "size": 53300, "license": "licensed"}}