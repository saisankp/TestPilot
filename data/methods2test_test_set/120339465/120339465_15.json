{"test_class": {"identifier": "IntervalCountTest", "superclass": "", "interfaces": "", "fields": [], "file": "common/transport/src/test/java/com/hashmapinc/server/common/transport/quota/inmemory/IntervalCountTest.java"}, "test_case": {"identifier": "ticksInSameIntervalAreSummed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void ticksInSameIntervalAreSummed() {\n        IntervalCount intervalCount = new IntervalCount(100L);\n        assertEquals(1L, intervalCount.resetIfExpiredAndTick());\n        Clock.shift(100);\n        assertEquals(2L, intervalCount.resetIfExpiredAndTick());\n    }", "signature": "void ticksInSameIntervalAreSummed()", "full_signature": "@Test public void ticksInSameIntervalAreSummed()", "class_method_signature": "IntervalCountTest.ticksInSameIntervalAreSummed()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "resetIfExpiredAndTick", "shift", "assertEquals", "resetIfExpiredAndTick"]}, "focal_class": {"identifier": "IntervalCount", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final LongAdder adder = new LongAdder();", "modifier": "private final", "type": "LongAdder", "declarator": "adder = new LongAdder()", "var_name": "adder"}, {"original_string": "private final long intervalDurationMs;", "modifier": "private final", "type": "long", "declarator": "intervalDurationMs", "var_name": "intervalDurationMs"}, {"original_string": "private volatile long startTime;", "modifier": "private volatile", "type": "long", "declarator": "startTime", "var_name": "startTime"}, {"original_string": "private volatile long lastTickTime;", "modifier": "private volatile", "type": "long", "declarator": "lastTickTime", "var_name": "lastTickTime"}], "methods": [{"identifier": "IntervalCount", "parameters": "(long intervalDurationMs)", "modifiers": "public", "return": "", "signature": " IntervalCount(long intervalDurationMs)", "full_signature": "public  IntervalCount(long intervalDurationMs)", "class_method_signature": "IntervalCount.IntervalCount(long intervalDurationMs)", "testcase": false, "constructor": true}, {"identifier": "resetIfExpiredAndTick", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long resetIfExpiredAndTick()", "full_signature": "public long resetIfExpiredAndTick()", "class_method_signature": "IntervalCount.resetIfExpiredAndTick()", "testcase": false, "constructor": false}, {"identifier": "silenceDuration", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long silenceDuration()", "full_signature": "public long silenceDuration()", "class_method_signature": "IntervalCount.silenceDuration()", "testcase": false, "constructor": false}, {"identifier": "getCount", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getCount()", "full_signature": "public long getCount()", "class_method_signature": "IntervalCount.getCount()", "testcase": false, "constructor": false}, {"identifier": "tick", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void tick()", "full_signature": "private void tick()", "class_method_signature": "IntervalCount.tick()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void reset()", "full_signature": "private void reset()", "class_method_signature": "IntervalCount.reset()", "testcase": false, "constructor": false}, {"identifier": "isExpired", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isExpired()", "full_signature": "private boolean isExpired()", "class_method_signature": "IntervalCount.isExpired()", "testcase": false, "constructor": false}], "file": "common/transport/src/main/java/com/hashmapinc/server/common/transport/quota/inmemory/IntervalCount.java"}, "focal_method": {"identifier": "resetIfExpiredAndTick", "parameters": "()", "modifiers": "public", "return": "long", "body": "public long resetIfExpiredAndTick() {\n        if (isExpired()) {\n            reset();\n        }\n        tick();\n        return adder.sum();\n    }", "signature": "long resetIfExpiredAndTick()", "full_signature": "public long resetIfExpiredAndTick()", "class_method_signature": "IntervalCount.resetIfExpiredAndTick()", "testcase": false, "constructor": false, "invocations": ["isExpired", "reset", "tick", "sum"]}, "repository": {"repo_id": 120339465, "url": "https://github.com/hashmapinc/Tempus", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 22, "size": 57693, "license": "licensed"}}