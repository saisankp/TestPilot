{"test_class": {"identifier": "FastMathTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}], "file": "jme3-core/src/test/java/com/jme3/math/FastMathTest.java"}, "test_case": {"identifier": "testCartesianZToSpherical", "parameters": "()", "modifiers": "@Ignore // test fails due to issue #1349 @Test public", "return": "void", "body": "@Ignore // test fails due to issue #1349\n    @Test\n    public void testCartesianZToSpherical() {\n        final Vector3f cartCoords = new Vector3f(1.1f, 5.8f, 8.1f);\n        final Vector3f store = new Vector3f(0.0f, 0.0f, 0.0f);\n\n        final Vector3f retval = FastMath.cartesianZToSpherical(cartCoords, store);\n\n        assertEquals(store, retval);\n\n        assertNotNull(store);\n        assertEquals(10.022974f, store.getX(), 0.01f);\n        assertEquals(0.61709767f, store.getY(), 0.01f);\n        assertEquals(1.4358196f, store.getZ(), 0.01f);\n\n        assertNotNull(retval);\n        assertEquals(10.022974f, retval.getX(), 0.01f);\n        assertEquals(0.61709767f, retval.getY(), 0.01f);\n        assertEquals(1.4358196f, retval.getZ(), 0.01f);\n        /*\n         * ensure that the transformation is reversible in Octant I\n         */\n        final Vector3f out1 = FastMath.sphericalToCartesianZ(retval, null);\n        assertEquals(cartCoords.x, out1.x, 1e-5f);\n        assertEquals(cartCoords.y, out1.y, 1e-5f);\n        assertEquals(cartCoords.z, out1.z, 1e-5f);\n        /*\n         * test reversibility in the other 7 octants\n         */\n        final Vector3f in2 = new Vector3f(-1.9f, +5.8f, +8.1f);\n        final Vector3f spherical2 = FastMath.cartesianZToSpherical(in2, null);\n        final Vector3f out2 = FastMath.sphericalToCartesianZ(spherical2, null);\n        assertEquals(in2.x, out2.x, 1e-5f);\n        assertEquals(in2.y, out2.y, 1e-5f);\n        assertEquals(in2.z, out2.z, 1e-5f);\n\n        final Vector3f in3 = new Vector3f(+1.7f, -3.8f, +8.6f);\n        final Vector3f spherical3 = FastMath.cartesianZToSpherical(in3, null);\n        final Vector3f out3 = FastMath.sphericalToCartesianZ(spherical3, null);\n        assertEquals(in3.x, out3.x, 1e-5f);\n        assertEquals(in3.y, out3.y, 1e-5f);\n        assertEquals(in3.z, out3.z, 1e-5f);\n\n        final Vector3f in4 = new Vector3f(-1.5f, -3.2f, +4.1f);\n        final Vector3f spherical4 = FastMath.cartesianZToSpherical(in4, null);\n        final Vector3f out4 = FastMath.sphericalToCartesianZ(spherical4, null);\n        assertEquals(in4.x, out4.x, 1e-5f);\n        assertEquals(in4.y, out4.y, 1e-5f);\n        assertEquals(in4.z, out4.z, 1e-5f);\n\n        final Vector3f in5 = new Vector3f(+3.5f, +7.2f, -4.3f);\n        final Vector3f spherical5 = FastMath.cartesianZToSpherical(in5, null);\n        final Vector3f out5 = FastMath.sphericalToCartesianZ(spherical5, null);\n        assertEquals(in5.x, out5.x, 1e-5f);\n        assertEquals(in5.y, out5.y, 1e-5f);\n        assertEquals(in5.z, out5.z, 1e-5f);\n\n        final Vector3f in6 = new Vector3f(-6.9f, +5.8f, -2.1f);\n        final Vector3f spherical6 = FastMath.cartesianZToSpherical(in6, null);\n        final Vector3f out6 = FastMath.sphericalToCartesianZ(spherical6, null);\n        assertEquals(in6.x, out6.x, 1e-5f);\n        assertEquals(in6.y, out6.y, 1e-5f);\n        assertEquals(in6.z, out6.z, 1e-5f);\n\n        final Vector3f in7 = new Vector3f(+1.1f, -3.0f, -8.6f);\n        final Vector3f spherical7 = FastMath.cartesianZToSpherical(in7, null);\n        final Vector3f out7 = FastMath.sphericalToCartesianZ(spherical7, null);\n        assertEquals(in7.x, out7.x, 1e-5f);\n        assertEquals(in7.y, out7.y, 1e-5f);\n        assertEquals(in7.z, out7.z, 1e-5f);\n\n        final Vector3f in8 = new Vector3f(-6.2f, -2.2f, -4.1f);\n        final Vector3f spherical8 = FastMath.cartesianZToSpherical(in8, null);\n        final Vector3f out8 = FastMath.sphericalToCartesianZ(spherical8, null);\n        assertEquals(in8.x, out8.x, 1e-5f);\n        assertEquals(in8.y, out8.y, 1e-5f);\n        assertEquals(in8.z, out8.z, 1e-5f);\n        /*\n         * test reversibility on the origin\n         */\n        final Vector3f in0 = new Vector3f(0f, 0f, 0f);\n        final Vector3f spherical0 = FastMath.cartesianZToSpherical(in0, null);\n        final Vector3f out0 = FastMath.sphericalToCartesianZ(spherical0, null);\n        assertEquals(in0.x, out0.x, 1e-5f);\n        assertEquals(in0.y, out0.y, 1e-5f);\n        assertEquals(in0.z, out0.z, 1e-5f);\n    }", "signature": "void testCartesianZToSpherical()", "full_signature": "@Ignore // test fails due to issue #1349 @Test public void testCartesianZToSpherical()", "class_method_signature": "FastMathTest.testCartesianZToSpherical()", "testcase": true, "constructor": false, "invocations": ["cartesianZToSpherical", "assertEquals", "assertNotNull", "assertEquals", "getX", "assertEquals", "getY", "assertEquals", "getZ", "assertNotNull", "assertEquals", "getX", "assertEquals", "getY", "assertEquals", "getZ", "sphericalToCartesianZ", "assertEquals", "assertEquals", "assertEquals", "cartesianZToSpherical", "sphericalToCartesianZ", "assertEquals", "assertEquals", "assertEquals", "cartesianZToSpherical", "sphericalToCartesianZ", "assertEquals", "assertEquals", "assertEquals", "cartesianZToSpherical", "sphericalToCartesianZ", "assertEquals", "assertEquals", "assertEquals", "cartesianZToSpherical", "sphericalToCartesianZ", "assertEquals", "assertEquals", "assertEquals", "cartesianZToSpherical", "sphericalToCartesianZ", "assertEquals", "assertEquals", "assertEquals", "cartesianZToSpherical", "sphericalToCartesianZ", "assertEquals", "assertEquals", "assertEquals", "cartesianZToSpherical", "sphericalToCartesianZ", "assertEquals", "assertEquals", "assertEquals", "cartesianZToSpherical", "sphericalToCartesianZ", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "FastMath", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final double DBL_EPSILON = 2.220446049250313E-16d;", "modifier": "public static final", "type": "double", "declarator": "DBL_EPSILON = 2.220446049250313E-16d", "var_name": "DBL_EPSILON"}, {"original_string": "public static final float FLT_EPSILON = 1.1920928955078125E-7f;", "modifier": "public static final", "type": "float", "declarator": "FLT_EPSILON = 1.1920928955078125E-7f", "var_name": "FLT_EPSILON"}, {"original_string": "public static final float ZERO_TOLERANCE = 0.0001f;", "modifier": "public static final", "type": "float", "declarator": "ZERO_TOLERANCE = 0.0001f", "var_name": "ZERO_TOLERANCE"}, {"original_string": "public static final float ONE_THIRD = 1f / 3f;", "modifier": "public static final", "type": "float", "declarator": "ONE_THIRD = 1f / 3f", "var_name": "ONE_THIRD"}, {"original_string": "public static final float PI = (float) Math.PI;", "modifier": "public static final", "type": "float", "declarator": "PI = (float) Math.PI", "var_name": "PI"}, {"original_string": "public static final float TWO_PI = 2.0f * PI;", "modifier": "public static final", "type": "float", "declarator": "TWO_PI = 2.0f * PI", "var_name": "TWO_PI"}, {"original_string": "public static final float HALF_PI = 0.5f * PI;", "modifier": "public static final", "type": "float", "declarator": "HALF_PI = 0.5f * PI", "var_name": "HALF_PI"}, {"original_string": "public static final float QUARTER_PI = 0.25f * PI;", "modifier": "public static final", "type": "float", "declarator": "QUARTER_PI = 0.25f * PI", "var_name": "QUARTER_PI"}, {"original_string": "public static final float INV_PI = 1.0f / PI;", "modifier": "public static final", "type": "float", "declarator": "INV_PI = 1.0f / PI", "var_name": "INV_PI"}, {"original_string": "public static final float INV_TWO_PI = 1.0f / TWO_PI;", "modifier": "public static final", "type": "float", "declarator": "INV_TWO_PI = 1.0f / TWO_PI", "var_name": "INV_TWO_PI"}, {"original_string": "public static final float DEG_TO_RAD = PI / 180.0f;", "modifier": "public static final", "type": "float", "declarator": "DEG_TO_RAD = PI / 180.0f", "var_name": "DEG_TO_RAD"}, {"original_string": "public static final float RAD_TO_DEG = 180.0f / PI;", "modifier": "public static final", "type": "float", "declarator": "RAD_TO_DEG = 180.0f / PI", "var_name": "RAD_TO_DEG"}, {"original_string": "public static final Random rand = new Random(System.currentTimeMillis());", "modifier": "public static final", "type": "Random", "declarator": "rand = new Random(System.currentTimeMillis())", "var_name": "rand"}], "methods": [{"identifier": "FastMath", "parameters": "()", "modifiers": "private", "return": "", "signature": " FastMath()", "full_signature": "private  FastMath()", "class_method_signature": "FastMath.FastMath()", "testcase": false, "constructor": true}, {"identifier": "isPowerOfTwo", "parameters": "(int number)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPowerOfTwo(int number)", "full_signature": "public static boolean isPowerOfTwo(int number)", "class_method_signature": "FastMath.isPowerOfTwo(int number)", "testcase": false, "constructor": false}, {"identifier": "nearestPowerOfTwo", "parameters": "(int number)", "modifiers": "public static", "return": "int", "signature": "int nearestPowerOfTwo(int number)", "full_signature": "public static int nearestPowerOfTwo(int number)", "class_method_signature": "FastMath.nearestPowerOfTwo(int number)", "testcase": false, "constructor": false}, {"identifier": "interpolateLinear", "parameters": "(float scale, float startValue, float endValue)", "modifiers": "public static", "return": "float", "signature": "float interpolateLinear(float scale, float startValue, float endValue)", "full_signature": "public static float interpolateLinear(float scale, float startValue, float endValue)", "class_method_signature": "FastMath.interpolateLinear(float scale, float startValue, float endValue)", "testcase": false, "constructor": false}, {"identifier": "interpolateLinear", "parameters": "(float scale, Vector3f startValue,\n            Vector3f endValue, Vector3f store)", "modifiers": "public static", "return": "Vector3f", "signature": "Vector3f interpolateLinear(float scale, Vector3f startValue,\n            Vector3f endValue, Vector3f store)", "full_signature": "public static Vector3f interpolateLinear(float scale, Vector3f startValue,\n            Vector3f endValue, Vector3f store)", "class_method_signature": "FastMath.interpolateLinear(float scale, Vector3f startValue,\n            Vector3f endValue, Vector3f store)", "testcase": false, "constructor": false}, {"identifier": "interpolateLinear", "parameters": "(float scale, Vector3f startValue, Vector3f endValue)", "modifiers": "public static", "return": "Vector3f", "signature": "Vector3f interpolateLinear(float scale, Vector3f startValue, Vector3f endValue)", "full_signature": "public static Vector3f interpolateLinear(float scale, Vector3f startValue, Vector3f endValue)", "class_method_signature": "FastMath.interpolateLinear(float scale, Vector3f startValue, Vector3f endValue)", "testcase": false, "constructor": false}, {"identifier": "extrapolateLinear", "parameters": "(float scale, float startValue, float endValue)", "modifiers": "public static", "return": "float", "signature": "float extrapolateLinear(float scale, float startValue, float endValue)", "full_signature": "public static float extrapolateLinear(float scale, float startValue, float endValue)", "class_method_signature": "FastMath.extrapolateLinear(float scale, float startValue, float endValue)", "testcase": false, "constructor": false}, {"identifier": "extrapolateLinear", "parameters": "(float scale, Vector3f startValue,\n            Vector3f endValue, Vector3f store)", "modifiers": "public static", "return": "Vector3f", "signature": "Vector3f extrapolateLinear(float scale, Vector3f startValue,\n            Vector3f endValue, Vector3f store)", "full_signature": "public static Vector3f extrapolateLinear(float scale, Vector3f startValue,\n            Vector3f endValue, Vector3f store)", "class_method_signature": "FastMath.extrapolateLinear(float scale, Vector3f startValue,\n            Vector3f endValue, Vector3f store)", "testcase": false, "constructor": false}, {"identifier": "extrapolateLinear", "parameters": "(float scale, Vector3f startValue, Vector3f endValue)", "modifiers": "public static", "return": "Vector3f", "signature": "Vector3f extrapolateLinear(float scale, Vector3f startValue, Vector3f endValue)", "full_signature": "public static Vector3f extrapolateLinear(float scale, Vector3f startValue, Vector3f endValue)", "class_method_signature": "FastMath.extrapolateLinear(float scale, Vector3f startValue, Vector3f endValue)", "testcase": false, "constructor": false}, {"identifier": "interpolateCatmullRom", "parameters": "(float u, float T, float p0, float p1, float p2, float p3)", "modifiers": "public static", "return": "float", "signature": "float interpolateCatmullRom(float u, float T, float p0, float p1, float p2, float p3)", "full_signature": "public static float interpolateCatmullRom(float u, float T, float p0, float p1, float p2, float p3)", "class_method_signature": "FastMath.interpolateCatmullRom(float u, float T, float p0, float p1, float p2, float p3)", "testcase": false, "constructor": false}, {"identifier": "interpolateCatmullRom", "parameters": "(float u, float T, Vector3f p0,\n            Vector3f p1, Vector3f p2, Vector3f p3, Vector3f store)", "modifiers": "public static", "return": "Vector3f", "signature": "Vector3f interpolateCatmullRom(float u, float T, Vector3f p0,\n            Vector3f p1, Vector3f p2, Vector3f p3, Vector3f store)", "full_signature": "public static Vector3f interpolateCatmullRom(float u, float T, Vector3f p0,\n            Vector3f p1, Vector3f p2, Vector3f p3, Vector3f store)", "class_method_signature": "FastMath.interpolateCatmullRom(float u, float T, Vector3f p0,\n            Vector3f p1, Vector3f p2, Vector3f p3, Vector3f store)", "testcase": false, "constructor": false}, {"identifier": "interpolateCatmullRom", "parameters": "(float u, float T, Vector3f p0,\n            Vector3f p1, Vector3f p2, Vector3f p3)", "modifiers": "public static", "return": "Vector3f", "signature": "Vector3f interpolateCatmullRom(float u, float T, Vector3f p0,\n            Vector3f p1, Vector3f p2, Vector3f p3)", "full_signature": "public static Vector3f interpolateCatmullRom(float u, float T, Vector3f p0,\n            Vector3f p1, Vector3f p2, Vector3f p3)", "class_method_signature": "FastMath.interpolateCatmullRom(float u, float T, Vector3f p0,\n            Vector3f p1, Vector3f p2, Vector3f p3)", "testcase": false, "constructor": false}, {"identifier": "interpolateBezier", "parameters": "(float u, float p0, float p1, float p2, float p3)", "modifiers": "public static", "return": "float", "signature": "float interpolateBezier(float u, float p0, float p1, float p2, float p3)", "full_signature": "public static float interpolateBezier(float u, float p0, float p1, float p2, float p3)", "class_method_signature": "FastMath.interpolateBezier(float u, float p0, float p1, float p2, float p3)", "testcase": false, "constructor": false}, {"identifier": "interpolateBezier", "parameters": "(float u, Vector3f p0, Vector3f p1,\n            Vector3f p2, Vector3f p3, Vector3f store)", "modifiers": "public static", "return": "Vector3f", "signature": "Vector3f interpolateBezier(float u, Vector3f p0, Vector3f p1,\n            Vector3f p2, Vector3f p3, Vector3f store)", "full_signature": "public static Vector3f interpolateBezier(float u, Vector3f p0, Vector3f p1,\n            Vector3f p2, Vector3f p3, Vector3f store)", "class_method_signature": "FastMath.interpolateBezier(float u, Vector3f p0, Vector3f p1,\n            Vector3f p2, Vector3f p3, Vector3f store)", "testcase": false, "constructor": false}, {"identifier": "interpolateBezier", "parameters": "(float u, Vector3f p0, Vector3f p1, Vector3f p2, Vector3f p3)", "modifiers": "public static", "return": "Vector3f", "signature": "Vector3f interpolateBezier(float u, Vector3f p0, Vector3f p1, Vector3f p2, Vector3f p3)", "full_signature": "public static Vector3f interpolateBezier(float u, Vector3f p0, Vector3f p1, Vector3f p2, Vector3f p3)", "class_method_signature": "FastMath.interpolateBezier(float u, Vector3f p0, Vector3f p1, Vector3f p2, Vector3f p3)", "testcase": false, "constructor": false}, {"identifier": "getCatmullRomP1toP2Length", "parameters": "(Vector3f p0, Vector3f p1,\n            Vector3f p2, Vector3f p3, float startRange, float endRange, float curveTension)", "modifiers": "public static", "return": "float", "signature": "float getCatmullRomP1toP2Length(Vector3f p0, Vector3f p1,\n            Vector3f p2, Vector3f p3, float startRange, float endRange, float curveTension)", "full_signature": "public static float getCatmullRomP1toP2Length(Vector3f p0, Vector3f p1,\n            Vector3f p2, Vector3f p3, float startRange, float endRange, float curveTension)", "class_method_signature": "FastMath.getCatmullRomP1toP2Length(Vector3f p0, Vector3f p1,\n            Vector3f p2, Vector3f p3, float startRange, float endRange, float curveTension)", "testcase": false, "constructor": false}, {"identifier": "getBezierP1toP2Length", "parameters": "(Vector3f p0, Vector3f p1, Vector3f p2, Vector3f p3)", "modifiers": "public static", "return": "float", "signature": "float getBezierP1toP2Length(Vector3f p0, Vector3f p1, Vector3f p2, Vector3f p3)", "full_signature": "public static float getBezierP1toP2Length(Vector3f p0, Vector3f p1, Vector3f p2, Vector3f p3)", "class_method_signature": "FastMath.getBezierP1toP2Length(Vector3f p0, Vector3f p1, Vector3f p2, Vector3f p3)", "testcase": false, "constructor": false}, {"identifier": "acos", "parameters": "(float fValue)", "modifiers": "public static", "return": "float", "signature": "float acos(float fValue)", "full_signature": "public static float acos(float fValue)", "class_method_signature": "FastMath.acos(float fValue)", "testcase": false, "constructor": false}, {"identifier": "asin", "parameters": "(float fValue)", "modifiers": "public static", "return": "float", "signature": "float asin(float fValue)", "full_signature": "public static float asin(float fValue)", "class_method_signature": "FastMath.asin(float fValue)", "testcase": false, "constructor": false}, {"identifier": "atan", "parameters": "(float fValue)", "modifiers": "public static", "return": "float", "signature": "float atan(float fValue)", "full_signature": "public static float atan(float fValue)", "class_method_signature": "FastMath.atan(float fValue)", "testcase": false, "constructor": false}, {"identifier": "atan2", "parameters": "(float fY, float fX)", "modifiers": "public static", "return": "float", "signature": "float atan2(float fY, float fX)", "full_signature": "public static float atan2(float fY, float fX)", "class_method_signature": "FastMath.atan2(float fY, float fX)", "testcase": false, "constructor": false}, {"identifier": "ceil", "parameters": "(float fValue)", "modifiers": "public static", "return": "float", "signature": "float ceil(float fValue)", "full_signature": "public static float ceil(float fValue)", "class_method_signature": "FastMath.ceil(float fValue)", "testcase": false, "constructor": false}, {"identifier": "cos", "parameters": "(float v)", "modifiers": "public static", "return": "float", "signature": "float cos(float v)", "full_signature": "public static float cos(float v)", "class_method_signature": "FastMath.cos(float v)", "testcase": false, "constructor": false}, {"identifier": "sin", "parameters": "(float v)", "modifiers": "public static", "return": "float", "signature": "float sin(float v)", "full_signature": "public static float sin(float v)", "class_method_signature": "FastMath.sin(float v)", "testcase": false, "constructor": false}, {"identifier": "exp", "parameters": "(float fValue)", "modifiers": "public static", "return": "float", "signature": "float exp(float fValue)", "full_signature": "public static float exp(float fValue)", "class_method_signature": "FastMath.exp(float fValue)", "testcase": false, "constructor": false}, {"identifier": "abs", "parameters": "(float fValue)", "modifiers": "public static", "return": "float", "signature": "float abs(float fValue)", "full_signature": "public static float abs(float fValue)", "class_method_signature": "FastMath.abs(float fValue)", "testcase": false, "constructor": false}, {"identifier": "floor", "parameters": "(float fValue)", "modifiers": "public static", "return": "float", "signature": "float floor(float fValue)", "full_signature": "public static float floor(float fValue)", "class_method_signature": "FastMath.floor(float fValue)", "testcase": false, "constructor": false}, {"identifier": "invSqrt", "parameters": "(float fValue)", "modifiers": "public static", "return": "float", "signature": "float invSqrt(float fValue)", "full_signature": "public static float invSqrt(float fValue)", "class_method_signature": "FastMath.invSqrt(float fValue)", "testcase": false, "constructor": false}, {"identifier": "fastInvSqrt", "parameters": "(float x)", "modifiers": "public static", "return": "float", "signature": "float fastInvSqrt(float x)", "full_signature": "public static float fastInvSqrt(float x)", "class_method_signature": "FastMath.fastInvSqrt(float x)", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "(float fValue)", "modifiers": "public static", "return": "float", "signature": "float log(float fValue)", "full_signature": "public static float log(float fValue)", "class_method_signature": "FastMath.log(float fValue)", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "(float value, float base)", "modifiers": "public static", "return": "float", "signature": "float log(float value, float base)", "full_signature": "public static float log(float value, float base)", "class_method_signature": "FastMath.log(float value, float base)", "testcase": false, "constructor": false}, {"identifier": "pow", "parameters": "(float fBase, float fExponent)", "modifiers": "public static", "return": "float", "signature": "float pow(float fBase, float fExponent)", "full_signature": "public static float pow(float fBase, float fExponent)", "class_method_signature": "FastMath.pow(float fBase, float fExponent)", "testcase": false, "constructor": false}, {"identifier": "sqr", "parameters": "(float fValue)", "modifiers": "public static", "return": "float", "signature": "float sqr(float fValue)", "full_signature": "public static float sqr(float fValue)", "class_method_signature": "FastMath.sqr(float fValue)", "testcase": false, "constructor": false}, {"identifier": "sqrt", "parameters": "(float fValue)", "modifiers": "public static", "return": "float", "signature": "float sqrt(float fValue)", "full_signature": "public static float sqrt(float fValue)", "class_method_signature": "FastMath.sqrt(float fValue)", "testcase": false, "constructor": false}, {"identifier": "tan", "parameters": "(float fValue)", "modifiers": "public static", "return": "float", "signature": "float tan(float fValue)", "full_signature": "public static float tan(float fValue)", "class_method_signature": "FastMath.tan(float fValue)", "testcase": false, "constructor": false}, {"identifier": "sign", "parameters": "(int iValue)", "modifiers": "public static", "return": "int", "signature": "int sign(int iValue)", "full_signature": "public static int sign(int iValue)", "class_method_signature": "FastMath.sign(int iValue)", "testcase": false, "constructor": false}, {"identifier": "sign", "parameters": "(float fValue)", "modifiers": "public static", "return": "float", "signature": "float sign(float fValue)", "full_signature": "public static float sign(float fValue)", "class_method_signature": "FastMath.sign(float fValue)", "testcase": false, "constructor": false}, {"identifier": "counterClockwise", "parameters": "(Vector2f p0, Vector2f p1, Vector2f p2)", "modifiers": "public static", "return": "int", "signature": "int counterClockwise(Vector2f p0, Vector2f p1, Vector2f p2)", "full_signature": "public static int counterClockwise(Vector2f p0, Vector2f p1, Vector2f p2)", "class_method_signature": "FastMath.counterClockwise(Vector2f p0, Vector2f p1, Vector2f p2)", "testcase": false, "constructor": false}, {"identifier": "pointInsideTriangle", "parameters": "(Vector2f t0, Vector2f t1, Vector2f t2, Vector2f p)", "modifiers": "public static", "return": "int", "signature": "int pointInsideTriangle(Vector2f t0, Vector2f t1, Vector2f t2, Vector2f p)", "full_signature": "public static int pointInsideTriangle(Vector2f t0, Vector2f t1, Vector2f t2, Vector2f p)", "class_method_signature": "FastMath.pointInsideTriangle(Vector2f t0, Vector2f t1, Vector2f t2, Vector2f p)", "testcase": false, "constructor": false}, {"identifier": "computeNormal", "parameters": "(Vector3f v1, Vector3f v2, Vector3f v3)", "modifiers": "public static", "return": "Vector3f", "signature": "Vector3f computeNormal(Vector3f v1, Vector3f v2, Vector3f v3)", "full_signature": "public static Vector3f computeNormal(Vector3f v1, Vector3f v2, Vector3f v3)", "class_method_signature": "FastMath.computeNormal(Vector3f v1, Vector3f v2, Vector3f v3)", "testcase": false, "constructor": false}, {"identifier": "determinant", "parameters": "(double m00, double m01, double m02,\n            double m03, double m10, double m11, double m12, double m13,\n            double m20, double m21, double m22, double m23, double m30,\n            double m31, double m32, double m33)", "modifiers": "public static", "return": "float", "signature": "float determinant(double m00, double m01, double m02,\n            double m03, double m10, double m11, double m12, double m13,\n            double m20, double m21, double m22, double m23, double m30,\n            double m31, double m32, double m33)", "full_signature": "public static float determinant(double m00, double m01, double m02,\n            double m03, double m10, double m11, double m12, double m13,\n            double m20, double m21, double m22, double m23, double m30,\n            double m31, double m32, double m33)", "class_method_signature": "FastMath.determinant(double m00, double m01, double m02,\n            double m03, double m10, double m11, double m12, double m13,\n            double m20, double m21, double m22, double m23, double m30,\n            double m31, double m32, double m33)", "testcase": false, "constructor": false}, {"identifier": "nextRandomFloat", "parameters": "()", "modifiers": "public static", "return": "float", "signature": "float nextRandomFloat()", "full_signature": "public static float nextRandomFloat()", "class_method_signature": "FastMath.nextRandomFloat()", "testcase": false, "constructor": false}, {"identifier": "nextRandomInt", "parameters": "(int min, int max)", "modifiers": "public static", "return": "int", "signature": "int nextRandomInt(int min, int max)", "full_signature": "public static int nextRandomInt(int min, int max)", "class_method_signature": "FastMath.nextRandomInt(int min, int max)", "testcase": false, "constructor": false}, {"identifier": "nextRandomInt", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int nextRandomInt()", "full_signature": "public static int nextRandomInt()", "class_method_signature": "FastMath.nextRandomInt()", "testcase": false, "constructor": false}, {"identifier": "sphericalToCartesian", "parameters": "(Vector3f sphereCoords,\n            Vector3f store)", "modifiers": "public static", "return": "Vector3f", "signature": "Vector3f sphericalToCartesian(Vector3f sphereCoords,\n            Vector3f store)", "full_signature": "public static Vector3f sphericalToCartesian(Vector3f sphereCoords,\n            Vector3f store)", "class_method_signature": "FastMath.sphericalToCartesian(Vector3f sphereCoords,\n            Vector3f store)", "testcase": false, "constructor": false}, {"identifier": "cartesianToSpherical", "parameters": "(Vector3f cartCoords,\n            Vector3f store)", "modifiers": "public static", "return": "Vector3f", "signature": "Vector3f cartesianToSpherical(Vector3f cartCoords,\n            Vector3f store)", "full_signature": "public static Vector3f cartesianToSpherical(Vector3f cartCoords,\n            Vector3f store)", "class_method_signature": "FastMath.cartesianToSpherical(Vector3f cartCoords,\n            Vector3f store)", "testcase": false, "constructor": false}, {"identifier": "sphericalToCartesianZ", "parameters": "(Vector3f sphereCoords,\n            Vector3f store)", "modifiers": "public static", "return": "Vector3f", "signature": "Vector3f sphericalToCartesianZ(Vector3f sphereCoords,\n            Vector3f store)", "full_signature": "public static Vector3f sphericalToCartesianZ(Vector3f sphereCoords,\n            Vector3f store)", "class_method_signature": "FastMath.sphericalToCartesianZ(Vector3f sphereCoords,\n            Vector3f store)", "testcase": false, "constructor": false}, {"identifier": "cartesianZToSpherical", "parameters": "(Vector3f cartCoords,\n            Vector3f store)", "modifiers": "public static", "return": "Vector3f", "signature": "Vector3f cartesianZToSpherical(Vector3f cartCoords,\n            Vector3f store)", "full_signature": "public static Vector3f cartesianZToSpherical(Vector3f cartCoords,\n            Vector3f store)", "class_method_signature": "FastMath.cartesianZToSpherical(Vector3f cartCoords,\n            Vector3f store)", "testcase": false, "constructor": false}, {"identifier": "normalize", "parameters": "(float val, float min, float max)", "modifiers": "public static", "return": "float", "signature": "float normalize(float val, float min, float max)", "full_signature": "public static float normalize(float val, float min, float max)", "class_method_signature": "FastMath.normalize(float val, float min, float max)", "testcase": false, "constructor": false}, {"identifier": "copysign", "parameters": "(float x, float y)", "modifiers": "public static", "return": "float", "signature": "float copysign(float x, float y)", "full_signature": "public static float copysign(float x, float y)", "class_method_signature": "FastMath.copysign(float x, float y)", "testcase": false, "constructor": false}, {"identifier": "clamp", "parameters": "(float input, float min, float max)", "modifiers": "public static", "return": "float", "signature": "float clamp(float input, float min, float max)", "full_signature": "public static float clamp(float input, float min, float max)", "class_method_signature": "FastMath.clamp(float input, float min, float max)", "testcase": false, "constructor": false}, {"identifier": "saturate", "parameters": "(float input)", "modifiers": "public static", "return": "float", "signature": "float saturate(float input)", "full_signature": "public static float saturate(float input)", "class_method_signature": "FastMath.saturate(float input)", "testcase": false, "constructor": false}, {"identifier": "approximateEquals", "parameters": "(float a, float b)", "modifiers": "public static", "return": "boolean", "signature": "boolean approximateEquals(float a, float b)", "full_signature": "public static boolean approximateEquals(float a, float b)", "class_method_signature": "FastMath.approximateEquals(float a, float b)", "testcase": false, "constructor": false}, {"identifier": "convertHalfToFloat", "parameters": "(short half)", "modifiers": "public static", "return": "float", "signature": "float convertHalfToFloat(short half)", "full_signature": "public static float convertHalfToFloat(short half)", "class_method_signature": "FastMath.convertHalfToFloat(short half)", "testcase": false, "constructor": false}, {"identifier": "convertFloatToHalf", "parameters": "(float flt)", "modifiers": "public static", "return": "short", "signature": "short convertFloatToHalf(float flt)", "full_signature": "public static short convertFloatToHalf(float flt)", "class_method_signature": "FastMath.convertFloatToHalf(float flt)", "testcase": false, "constructor": false}, {"identifier": "unInterpolateLinear", "parameters": "(float value, float min, float max)", "modifiers": "public static", "return": "float", "signature": "float unInterpolateLinear(float value, float min, float max)", "full_signature": "public static float unInterpolateLinear(float value, float min, float max)", "class_method_signature": "FastMath.unInterpolateLinear(float value, float min, float max)", "testcase": false, "constructor": false}], "file": "jme3-core/src/main/java/com/jme3/math/FastMath.java"}, "focal_method": {"identifier": "cartesianZToSpherical", "parameters": "(Vector3f cartCoords,\n            Vector3f store)", "modifiers": "public static", "return": "Vector3f", "body": "public static Vector3f cartesianZToSpherical(Vector3f cartCoords,\n            Vector3f store) {\n        if (store == null) {\n            store = new Vector3f();\n        }\n        float x = cartCoords.x;\n        if (x == 0) {\n            x = FastMath.FLT_EPSILON;\n        }\n        store.x = FastMath.sqrt((x * x)\n                + (cartCoords.y * cartCoords.y)\n                + (cartCoords.z * cartCoords.z));\n        store.z = FastMath.atan(cartCoords.z / x);\n        if (x < 0) {\n            store.z += FastMath.PI;\n        }\n        store.y = FastMath.asin(cartCoords.y / store.x);\n        return store;\n    }", "signature": "Vector3f cartesianZToSpherical(Vector3f cartCoords,\n            Vector3f store)", "full_signature": "public static Vector3f cartesianZToSpherical(Vector3f cartCoords,\n            Vector3f store)", "class_method_signature": "FastMath.cartesianZToSpherical(Vector3f cartCoords,\n            Vector3f store)", "testcase": false, "constructor": false, "invocations": ["sqrt", "atan", "asin"]}, "repository": {"repo_id": 17960746, "url": "https://github.com/jMonkeyEngine/jmonkeyengine", "language": "Java", "is_fork": false, "fork_count": 957, "stargazer_count": 2373, "size": 861551, "license": "licensed"}}