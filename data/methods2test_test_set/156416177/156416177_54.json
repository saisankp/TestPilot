{"test_class": {"identifier": "SeSelectionTest", "superclass": "extends CoreBaseTest", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(SeSelectionTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SeSelectionTest.class)", "var_name": "logger"}], "file": "java/component/keyple-core/src/test/java/org/eclipse/keyple/core/selection/SeSelectionTest.java"}, "test_case": {"identifier": "prepareSelection", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void prepareSelection() {\n    SeSelection seSelection = createSeSelection();\n\n    // let's check if the result is as expected\n    // (see createSelectionSelectionSelection to have a look at the expected values)\n\n    // get the selection operation\n    AbstractDefaultSelectionsRequest selectionOperation = seSelection.getSelectionOperation();\n\n    // check common flags\n    Assert.assertEquals(\n        MultiSeRequestProcessing.FIRST_MATCH, selectionOperation.getMultiSeRequestProcessing());\n    Assert.assertEquals(ChannelControl.KEEP_OPEN, selectionOperation.getChannelControl());\n\n    // get the serequest set\n    List<SeRequest> selectionSeRequests = selectionOperation.getSelectionSeRequests();\n    Assert.assertEquals(2, selectionSeRequests.size());\n\n    // get the two se requests\n    Iterator<SeRequest> iterator = selectionSeRequests.iterator();\n    SeRequest seRequest1 = iterator.next();\n    SeRequest seRequest2 = iterator.next();\n\n    // check selectors\n    Assert.assertEquals(\n        \"AABBCCDDEE\",\n        ByteArrayUtil.toHex(seRequest1.getSeSelector().getAidSelector().getAidToSelect()));\n    Assert.assertEquals(\n        \"1122334455\",\n        ByteArrayUtil.toHex(seRequest2.getSeSelector().getAidSelector().getAidToSelect()));\n\n    Assert.assertEquals(\n        SeSelector.AidSelector.FileOccurrence.FIRST,\n        seRequest1.getSeSelector().getAidSelector().getFileOccurrence());\n    Assert.assertEquals(\n        SeSelector.AidSelector.FileOccurrence.NEXT,\n        seRequest2.getSeSelector().getAidSelector().getFileOccurrence());\n\n    Assert.assertEquals(\n        SeSelector.AidSelector.FileControlInformation.FCI,\n        seRequest1.getSeSelector().getAidSelector().getFileControlInformation());\n    Assert.assertEquals(\n        SeSelector.AidSelector.FileControlInformation.FCP,\n        seRequest2.getSeSelector().getAidSelector().getFileControlInformation());\n\n    Assert.assertNull(\n        seRequest1.getSeSelector().getAidSelector().getSuccessfulSelectionStatusCodes());\n\n    Assert.assertEquals(\n        1, seRequest2.getSeSelector().getAidSelector().getSuccessfulSelectionStatusCodes().size());\n    Assert.assertEquals(\n        0x6283,\n        seRequest2\n            .getSeSelector()\n            .getAidSelector()\n            .getSuccessfulSelectionStatusCodes()\n            .toArray()[0]);\n\n    Assert.assertNull(seRequest1.getSeSelector().getAtrFilter());\n    Assert.assertEquals(\".*\", seRequest2.getSeSelector().getAtrFilter().getAtrRegex());\n\n    Assert.assertEquals(2, seRequest1.getApduRequests().size());\n    Assert.assertEquals(0, seRequest2.getApduRequests().size());\n\n    List<ApduRequest> apduRequests = seRequest1.getApduRequests();\n\n    Assert.assertArrayEquals(apduRequests.get(0).getBytes(), ByteArrayUtil.fromHex(\"001122334455\"));\n    Assert.assertArrayEquals(apduRequests.get(1).getBytes(), ByteArrayUtil.fromHex(\"66778899AABB\"));\n\n    Assert.assertFalse(apduRequests.get(0).isCase4());\n    Assert.assertTrue(apduRequests.get(1).isCase4());\n\n    // that's all!\n  }", "signature": "void prepareSelection()", "full_signature": "@Test public void prepareSelection()", "class_method_signature": "SeSelectionTest.prepareSelection()", "testcase": true, "constructor": false, "invocations": ["createSeSelection", "getSelectionOperation", "assertEquals", "getMultiSeRequestProcessing", "assertEquals", "getChannelControl", "getSelectionSeRequests", "assertEquals", "size", "iterator", "next", "next", "assertEquals", "toHex", "getAidToSelect", "getAidSelector", "getSeSelector", "assertEquals", "toHex", "getAidToSelect", "getAidSelector", "getSeSelector", "assertEquals", "getFileOccurrence", "getAidSelector", "getSeSelector", "assertEquals", "getFileOccurrence", "getAidSelector", "getSeSelector", "assertEquals", "getFileControlInformation", "getAidSelector", "getSeSelector", "assertEquals", "getFileControlInformation", "getAidSelector", "getSeSelector", "assertNull", "getSuccessfulSelectionStatusCodes", "getAidSelector", "getSeSelector", "assertEquals", "size", "getSuccessfulSelectionStatusCodes", "getAidSelector", "getSeSelector", "assertEquals", "toArray", "getSuccessfulSelectionStatusCodes", "getAidSelector", "getSeSelector", "assertNull", "getAtrFilter", "getSeSelector", "assertEquals", "getAtrRegex", "getAtrFilter", "getSeSelector", "assertEquals", "size", "getApduRequests", "assertEquals", "size", "getApduRequests", "getApduRequests", "assertArrayEquals", "getBytes", "get", "fromHex", "assertArrayEquals", "getBytes", "get", "fromHex", "assertFalse", "isCase4", "get", "assertTrue", "isCase4", "get"]}, "focal_class": {"identifier": "SeSelection", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(SeSelection.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SeSelection.class)", "var_name": "logger"}, {"original_string": "private final List<AbstractSeSelectionRequest<? extends AbstractApduCommandBuilder>>\n      seSelectionRequests =\n          new ArrayList<AbstractSeSelectionRequest<? extends AbstractApduCommandBuilder>>();", "modifier": "private final", "type": "List<AbstractSeSelectionRequest<? extends AbstractApduCommandBuilder>>", "declarator": "seSelectionRequests =\n          new ArrayList<AbstractSeSelectionRequest<? extends AbstractApduCommandBuilder>>()", "var_name": "seSelectionRequests"}, {"original_string": "private final MultiSeRequestProcessing multiSeRequestProcessing;", "modifier": "private final", "type": "MultiSeRequestProcessing", "declarator": "multiSeRequestProcessing", "var_name": "multiSeRequestProcessing"}, {"original_string": "private ChannelControl channelControl = ChannelControl.KEEP_OPEN;", "modifier": "private", "type": "ChannelControl", "declarator": "channelControl = ChannelControl.KEEP_OPEN", "var_name": "channelControl"}], "methods": [{"identifier": "SeSelection", "parameters": "(MultiSeRequestProcessing multiSeRequestProcessing)", "modifiers": "public", "return": "", "signature": " SeSelection(MultiSeRequestProcessing multiSeRequestProcessing)", "full_signature": "public  SeSelection(MultiSeRequestProcessing multiSeRequestProcessing)", "class_method_signature": "SeSelection.SeSelection(MultiSeRequestProcessing multiSeRequestProcessing)", "testcase": false, "constructor": true}, {"identifier": "SeSelection", "parameters": "()", "modifiers": "public", "return": "", "signature": " SeSelection()", "full_signature": "public  SeSelection()", "class_method_signature": "SeSelection.SeSelection()", "testcase": false, "constructor": true}, {"identifier": "prepareSelection", "parameters": "(\n      AbstractSeSelectionRequest<? extends AbstractApduCommandBuilder> seSelectionRequest)", "modifiers": "public", "return": "int", "signature": "int prepareSelection(\n      AbstractSeSelectionRequest<? extends AbstractApduCommandBuilder> seSelectionRequest)", "full_signature": "public int prepareSelection(\n      AbstractSeSelectionRequest<? extends AbstractApduCommandBuilder> seSelectionRequest)", "class_method_signature": "SeSelection.prepareSelection(\n      AbstractSeSelectionRequest<? extends AbstractApduCommandBuilder> seSelectionRequest)", "testcase": false, "constructor": false}, {"identifier": "prepareReleaseSeChannel", "parameters": "()", "modifiers": "public final", "return": "void", "signature": "void prepareReleaseSeChannel()", "full_signature": "public final void prepareReleaseSeChannel()", "class_method_signature": "SeSelection.prepareReleaseSeChannel()", "testcase": false, "constructor": false}, {"identifier": "processSelection", "parameters": "(\n      AbstractDefaultSelectionsResponse defaultSelectionsResponse)", "modifiers": "private", "return": "SelectionsResult", "signature": "SelectionsResult processSelection(\n      AbstractDefaultSelectionsResponse defaultSelectionsResponse)", "full_signature": "private SelectionsResult processSelection(\n      AbstractDefaultSelectionsResponse defaultSelectionsResponse)", "class_method_signature": "SeSelection.processSelection(\n      AbstractDefaultSelectionsResponse defaultSelectionsResponse)", "testcase": false, "constructor": false}, {"identifier": "processDefaultSelection", "parameters": "(\n      AbstractDefaultSelectionsResponse defaultSelectionsResponse)", "modifiers": "public", "return": "SelectionsResult", "signature": "SelectionsResult processDefaultSelection(\n      AbstractDefaultSelectionsResponse defaultSelectionsResponse)", "full_signature": "public SelectionsResult processDefaultSelection(\n      AbstractDefaultSelectionsResponse defaultSelectionsResponse)", "class_method_signature": "SeSelection.processDefaultSelection(\n      AbstractDefaultSelectionsResponse defaultSelectionsResponse)", "testcase": false, "constructor": false}, {"identifier": "processExplicitSelection", "parameters": "(SeReader seReader)", "modifiers": "public", "return": "SelectionsResult", "signature": "SelectionsResult processExplicitSelection(SeReader seReader)", "full_signature": "public SelectionsResult processExplicitSelection(SeReader seReader)", "class_method_signature": "SeSelection.processExplicitSelection(SeReader seReader)", "testcase": false, "constructor": false}, {"identifier": "getSelectionOperation", "parameters": "()", "modifiers": "public", "return": "AbstractDefaultSelectionsRequest", "signature": "AbstractDefaultSelectionsRequest getSelectionOperation()", "full_signature": "public AbstractDefaultSelectionsRequest getSelectionOperation()", "class_method_signature": "SeSelection.getSelectionOperation()", "testcase": false, "constructor": false}], "file": "java/component/keyple-core/src/main/java/org/eclipse/keyple/core/selection/SeSelection.java"}, "focal_method": {"identifier": "prepareSelection", "parameters": "(\n      AbstractSeSelectionRequest<? extends AbstractApduCommandBuilder> seSelectionRequest)", "modifiers": "public", "return": "int", "body": "public int prepareSelection(\n      AbstractSeSelectionRequest<? extends AbstractApduCommandBuilder> seSelectionRequest) {\n    if (logger.isTraceEnabled()) {\n      logger.trace(\"SELECTORREQUEST = {}\", seSelectionRequest.getSelectionRequest());\n    }\n    /* keep the selection request */\n    seSelectionRequests.add(seSelectionRequest);\n    /* return the selection index (starting at 0) */\n    return seSelectionRequests.size() - 1;\n  }", "signature": "int prepareSelection(\n      AbstractSeSelectionRequest<? extends AbstractApduCommandBuilder> seSelectionRequest)", "full_signature": "public int prepareSelection(\n      AbstractSeSelectionRequest<? extends AbstractApduCommandBuilder> seSelectionRequest)", "class_method_signature": "SeSelection.prepareSelection(\n      AbstractSeSelectionRequest<? extends AbstractApduCommandBuilder> seSelectionRequest)", "testcase": false, "constructor": false, "invocations": ["isTraceEnabled", "trace", "getSelectionRequest", "add", "size"]}, "repository": {"repo_id": 156416177, "url": "https://github.com/eclipse/keyple-java", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 10325, "license": "licensed"}}