{"test_class": {"identifier": "IntegerGenotypeTest", "superclass": "", "interfaces": "", "fields": [], "file": "opt4j-core/src/test/java/org/opt4j/core/genotype/IntegerGenotypeTest.java"}, "test_case": {"identifier": "testWrongBoundSettingList", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n\tpublic void testWrongBoundSettingList() {\n\t\tRandom rand = new Random();\n\t\tList<Integer> lowerBounds = new ArrayList<>();\n\t\tlowerBounds.add(1);\n\t\tlowerBounds.add(2);\n\t\tlowerBounds.add(3);\n\t\tList<Integer> upperBounds = new ArrayList<>();\n\t\tupperBounds.add(2);\n\t\tupperBounds.add(3);\n\t\tupperBounds.add(4);\n\t\tIntegerBounds bounds = new IntegerBounds(lowerBounds, upperBounds);\n\t\tIntegerGenotype listBoundGeno = new IntegerGenotype(bounds);\n\t\tassertTrue(listBoundGeno.isEmpty());\n\t\tlistBoundGeno.init(rand, 3);\n\t\tassertEquals(3, listBoundGeno.size());\n\t\tlistBoundGeno.init(rand, 4);\n\t}", "signature": "void testWrongBoundSettingList()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testWrongBoundSettingList()", "class_method_signature": "IntegerGenotypeTest.testWrongBoundSettingList()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "add", "add", "add", "assertTrue", "isEmpty", "init", "assertEquals", "size", "init"]}, "focal_class": {"identifier": "IntegerGenotype", "superclass": "extends ArrayList<Integer>", "interfaces": "implements ListGenotype<Integer>", "fields": [{"original_string": "protected final Bounds<Integer> bounds;", "modifier": "protected final", "type": "Bounds<Integer>", "declarator": "bounds", "var_name": "bounds"}, {"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}], "methods": [{"identifier": "IntegerGenotype", "parameters": "(int lowerBound, int upperBound)", "modifiers": "public", "return": "", "signature": " IntegerGenotype(int lowerBound, int upperBound)", "full_signature": "public  IntegerGenotype(int lowerBound, int upperBound)", "class_method_signature": "IntegerGenotype.IntegerGenotype(int lowerBound, int upperBound)", "testcase": false, "constructor": true}, {"identifier": "IntegerGenotype", "parameters": "(Bounds<Integer> bounds)", "modifiers": "public", "return": "", "signature": " IntegerGenotype(Bounds<Integer> bounds)", "full_signature": "public  IntegerGenotype(Bounds<Integer> bounds)", "class_method_signature": "IntegerGenotype.IntegerGenotype(Bounds<Integer> bounds)", "testcase": false, "constructor": true}, {"identifier": "getLowerBound", "parameters": "(int index)", "modifiers": "public", "return": "int", "signature": "int getLowerBound(int index)", "full_signature": "public int getLowerBound(int index)", "class_method_signature": "IntegerGenotype.getLowerBound(int index)", "testcase": false, "constructor": false}, {"identifier": "getUpperBound", "parameters": "(int index)", "modifiers": "public", "return": "int", "signature": "int getUpperBound(int index)", "full_signature": "public int getUpperBound(int index)", "class_method_signature": "IntegerGenotype.getUpperBound(int index)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "G", "signature": "G newInstance()", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public G newInstance()", "class_method_signature": "IntegerGenotype.newInstance()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(Random random, int n)", "modifiers": "public", "return": "void", "signature": "void init(Random random, int n)", "full_signature": "public void init(Random random, int n)", "class_method_signature": "IntegerGenotype.init(Random random, int n)", "testcase": false, "constructor": false}], "file": "opt4j-core/src/main/java/org/opt4j/core/genotype/IntegerGenotype.java"}, "focal_method": {"identifier": "init", "parameters": "(Random random, int n)", "modifiers": "public", "return": "void", "body": "public void init(Random random, int n) {\n\t\ttry {\n\t\t\tgetLowerBound(n - 1);\n\t\t\tgetUpperBound(n - 1);\n\t\t} catch (IndexOutOfBoundsException outOfBoundException) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"Cannot initialize a genotype with \" + n + \" entries with the specified bounds\",\n\t\t\t\t\toutOfBoundException);\n\t\t}\n\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tint lo = getLowerBound(i);\n\t\t\tint hi = getUpperBound(i);\n\t\t\tint value = lo + random.nextInt(hi - lo + 1);\n\t\t\tif (i >= size()) {\n\t\t\t\tadd(value);\n\t\t\t} else {\n\t\t\t\tset(i, value);\n\t\t\t}\n\t\t}\n\t}", "signature": "void init(Random random, int n)", "full_signature": "public void init(Random random, int n)", "class_method_signature": "IntegerGenotype.init(Random random, int n)", "testcase": false, "constructor": false, "invocations": ["getLowerBound", "getUpperBound", "getLowerBound", "getUpperBound", "nextInt", "size", "add", "set"]}, "repository": {"repo_id": 119080111, "url": "https://github.com/felixreimann/opt4j", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 11, "size": 8771, "license": "licensed"}}