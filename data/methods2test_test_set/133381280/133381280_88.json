{"test_class": {"identifier": "PromQLEngineTest", "superclass": "extends TestBase", "interfaces": "", "fields": [{"original_string": "private PromQLEngine   engine;", "modifier": "private", "type": "PromQLEngine", "declarator": "engine", "var_name": "engine"}, {"original_string": "@Mock\n    private Storage        storage;", "modifier": "@Mock\n    private", "type": "Storage", "declarator": "storage", "var_name": "storage"}, {"original_string": "@Mock\n    private Querier        querier;", "modifier": "@Mock\n    private", "type": "Querier", "declarator": "querier", "var_name": "querier"}, {"original_string": "@Mock\n    private QueryStatement queryStatement;", "modifier": "@Mock\n    private", "type": "QueryStatement", "declarator": "queryStatement", "var_name": "queryStatement"}], "file": "server/metrics/promql/src/test/java/com/alipay/sofa/lookout/server/prom/ql/engine/PromQLEngineTest.java"}, "test_case": {"identifier": "newRangeQuery", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void newRangeQuery() {\n        String promql = \"sum_over_time(jvm.gc.young.count{app=\\\"lookout-gateway\\\"}[60s])\";\n        Query query = engine.newRangeQuery(promql, Instant.parse(\"2019-05-29T10:29:30Z\"),\n            Instant.parse(\"2019-05-29T10:32:30Z\"), Duration.ofSeconds(60));\n        Statement statement = query.getStmt();\n        Assert.assertNotNull(statement);\n        Assert.assertTrue(statement instanceof EvalStmt);\n        EvalStmt evalStmt = (EvalStmt) statement;\n        Assert.assertEquals(60, evalStmt.getInterval().getSeconds());\n\n    }", "signature": "void newRangeQuery()", "full_signature": "@Test public void newRangeQuery()", "class_method_signature": "PromQLEngineTest.newRangeQuery()", "testcase": true, "constructor": false, "invocations": ["newRangeQuery", "parse", "parse", "ofSeconds", "getStmt", "assertNotNull", "assertTrue", "assertEquals", "getSeconds", "getInterval"]}, "focal_class": {"identifier": "PromQLEngine", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Storage       storage;", "modifier": "private", "type": "Storage", "declarator": "storage", "var_name": "storage"}, {"original_string": "private EngineOptions options;", "modifier": "private", "type": "EngineOptions", "declarator": "options", "var_name": "options"}, {"original_string": "QueryAnalyzer         queryAnalyzer;", "modifier": "", "type": "QueryAnalyzer", "declarator": "queryAnalyzer", "var_name": "queryAnalyzer"}], "methods": [{"identifier": "PromQLEngine", "parameters": "(Storage storage)", "modifiers": "public", "return": "", "signature": " PromQLEngine(Storage storage)", "full_signature": "public  PromQLEngine(Storage storage)", "class_method_signature": "PromQLEngine.PromQLEngine(Storage storage)", "testcase": false, "constructor": true}, {"identifier": "PromQLEngine", "parameters": "(Storage storage, EngineOptions options)", "modifiers": "public", "return": "", "signature": " PromQLEngine(Storage storage, EngineOptions options)", "full_signature": "public  PromQLEngine(Storage storage, EngineOptions options)", "class_method_signature": "PromQLEngine.PromQLEngine(Storage storage, EngineOptions options)", "testcase": false, "constructor": true}, {"identifier": "newInstantQuery", "parameters": "(String qs, Instant time)", "modifiers": "public", "return": "Query", "signature": "Query newInstantQuery(String qs, Instant time)", "full_signature": "public Query newInstantQuery(String qs, Instant time)", "class_method_signature": "PromQLEngine.newInstantQuery(String qs, Instant time)", "testcase": false, "constructor": false}, {"identifier": "newRangeQuery", "parameters": "(String qs, Instant start, Instant end, Duration interval)", "modifiers": "public", "return": "Query", "signature": "Query newRangeQuery(String qs, Instant start, Instant end, Duration interval)", "full_signature": "public Query newRangeQuery(String qs, Instant start, Instant end, Duration interval)", "class_method_signature": "PromQLEngine.newRangeQuery(String qs, Instant start, Instant end, Duration interval)", "testcase": false, "constructor": false}, {"identifier": "newQuery", "parameters": "(Expr expr, Instant startTime, Instant endTime, Duration interval)", "modifiers": "private", "return": "Query", "signature": "Query newQuery(Expr expr, Instant startTime, Instant endTime, Duration interval)", "full_signature": "private Query newQuery(Expr expr, Instant startTime, Instant endTime, Duration interval)", "class_method_signature": "PromQLEngine.newQuery(Expr expr, Instant startTime, Instant endTime, Duration interval)", "testcase": false, "constructor": false}, {"identifier": "exec", "parameters": "(Query query)", "modifiers": "public", "return": "Value", "signature": "Value exec(Query query)", "full_signature": "public Value exec(Query query)", "class_method_signature": "PromQLEngine.exec(Query query)", "testcase": false, "constructor": false}, {"identifier": "evaluateRangeValue", "parameters": "(EvalStmt s)", "modifiers": "private", "return": "Value", "signature": "Value evaluateRangeValue(EvalStmt s)", "full_signature": "private Value evaluateRangeValue(EvalStmt s)", "class_method_signature": "PromQLEngine.evaluateRangeValue(EvalStmt s)", "testcase": false, "constructor": false}, {"identifier": "evaluateInstantValue", "parameters": "(EvalStmt s)", "modifiers": "private", "return": "Value", "signature": "Value evaluateInstantValue(EvalStmt s)", "full_signature": "private Value evaluateInstantValue(EvalStmt s)", "class_method_signature": "PromQLEngine.evaluateInstantValue(EvalStmt s)", "testcase": false, "constructor": false}, {"identifier": "getStorage", "parameters": "()", "modifiers": "public", "return": "Storage", "signature": "Storage getStorage()", "full_signature": "public Storage getStorage()", "class_method_signature": "PromQLEngine.getStorage()", "testcase": false, "constructor": false}], "file": "server/metrics/promql/src/main/java/com/alipay/sofa/lookout/server/prom/ql/engine/PromQLEngine.java"}, "focal_method": {"identifier": "newRangeQuery", "parameters": "(String qs, Instant start, Instant end, Duration interval)", "modifiers": "public", "return": "Query", "body": "public Query newRangeQuery(String qs, Instant start, Instant end, Duration interval) {\n        Expr expr = Parser.parseExpr(qs);\n        if (expr.type() != ValueType.vector && expr.type() != ValueType.scalar) {\n            throw new IllegalStateException(String.format(\n                \"invalid expression type %s for range query, must be Scalar or instant Vector\",\n                typeString(expr.type())));\n        }\n        Query qry = newQuery(expr, start, end, interval);\n        qry.setQ(qs);\n        return qry;\n    }", "signature": "Query newRangeQuery(String qs, Instant start, Instant end, Duration interval)", "full_signature": "public Query newRangeQuery(String qs, Instant start, Instant end, Duration interval)", "class_method_signature": "PromQLEngine.newRangeQuery(String qs, Instant start, Instant end, Duration interval)", "testcase": false, "constructor": false, "invocations": ["parseExpr", "type", "type", "format", "typeString", "type", "newQuery", "setQ"]}, "repository": {"repo_id": 133381280, "url": "https://github.com/sofastack/sofa-lookout", "language": "Java", "is_fork": false, "fork_count": 113, "stargazer_count": 318, "size": 1394, "license": "licensed"}}