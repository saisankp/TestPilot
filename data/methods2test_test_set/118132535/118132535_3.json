{"test_class": {"identifier": "RxConnectablesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PublishSubject<String> input;", "modifier": "private", "type": "PublishSubject<String>", "declarator": "input", "var_name": "input"}, {"original_string": "private Connectable<String, Integer> connectable;", "modifier": "private", "type": "Connectable<String, Integer>", "declarator": "connectable", "var_name": "connectable"}], "file": "mobius-rx2/src/test/java/com/spotify/mobius/rx2/RxConnectablesTest.java"}, "test_case": {"identifier": "shouldPropagateErrorsFromConnectable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldPropagateErrorsFromConnectable() throws Exception {\n    TestObserver<Integer> observer =\n        input.compose(RxConnectables.toTransformer(connectable)).test();\n\n    input.onNext(\"crash\");\n\n    observer.awaitTerminalEvent(1, TimeUnit.SECONDS);\n    observer.assertError(throwable -> throwable.getMessage().equals(\"crashing!\"));\n  }", "signature": "void shouldPropagateErrorsFromConnectable()", "full_signature": "@Test public void shouldPropagateErrorsFromConnectable()", "class_method_signature": "RxConnectablesTest.shouldPropagateErrorsFromConnectable()", "testcase": true, "constructor": false, "invocations": ["test", "compose", "toTransformer", "onNext", "awaitTerminalEvent", "assertError", "equals", "getMessage"]}, "focal_class": {"identifier": "RxConnectables", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "RxConnectables", "parameters": "()", "modifiers": "private", "return": "", "signature": " RxConnectables()", "full_signature": "private  RxConnectables()", "class_method_signature": "RxConnectables.RxConnectables()", "testcase": false, "constructor": true}, {"identifier": "fromTransformer", "parameters": "(\n      final ObservableTransformer<I, O> transformer)", "modifiers": "public static", "return": "Connectable<I, O>", "signature": "Connectable<I, O> fromTransformer(\n      final ObservableTransformer<I, O> transformer)", "full_signature": "public static Connectable<I, O> fromTransformer(\n      final ObservableTransformer<I, O> transformer)", "class_method_signature": "RxConnectables.fromTransformer(\n      final ObservableTransformer<I, O> transformer)", "testcase": false, "constructor": false}, {"identifier": "toTransformer", "parameters": "(\n      final Connectable<I, O> connectable)", "modifiers": "public static", "return": "ObservableTransformer<I, O>", "signature": "ObservableTransformer<I, O> toTransformer(\n      final Connectable<I, O> connectable)", "full_signature": "public static ObservableTransformer<I, O> toTransformer(\n      final Connectable<I, O> connectable)", "class_method_signature": "RxConnectables.toTransformer(\n      final Connectable<I, O> connectable)", "testcase": false, "constructor": false}], "file": "mobius-rx2/src/main/java/com/spotify/mobius/rx2/RxConnectables.java"}, "focal_method": {"identifier": "toTransformer", "parameters": "(\n      final Connectable<I, O> connectable)", "modifiers": "public static", "return": "ObservableTransformer<I, O>", "body": "public static <I, O> ObservableTransformer<I, O> toTransformer(\n      final Connectable<I, O> connectable) {\n    return new ObservableTransformer<I, O>() {\n      @Override\n      public ObservableSource<O> apply(final Observable<I> upstream) {\n        return Observable.create(\n            new ObservableOnSubscribe<O>() {\n              @Override\n              public void subscribe(final ObservableEmitter<O> emitter) throws Exception {\n                Consumer<O> output =\n                    new Consumer<O>() {\n                      @Override\n                      public void accept(O value) {\n                        emitter.onNext(value);\n                      }\n                    };\n\n                final Connection<I> input = connectable.connect(output);\n\n                final Disposable disposable =\n                    upstream.subscribe(\n                        new io.reactivex.functions.Consumer<I>() {\n                          @Override\n                          public void accept(I f) {\n                            input.accept(f);\n                          }\n                        },\n                        new io.reactivex.functions.Consumer<Throwable>() {\n                          @Override\n                          public void accept(Throwable throwable) throws Exception {\n                            emitter.onError(throwable);\n                          }\n                        },\n                        new Action() {\n                          @Override\n                          public void run() {\n                            emitter.onComplete();\n                          }\n                        });\n\n                emitter.setCancellable(\n                    new Cancellable() {\n                      @Override\n                      public void cancel() throws Exception {\n                        disposable.dispose();\n                        input.dispose();\n                      }\n                    });\n              }\n            });\n      }\n    };\n  }", "signature": "ObservableTransformer<I, O> toTransformer(\n      final Connectable<I, O> connectable)", "full_signature": "public static ObservableTransformer<I, O> toTransformer(\n      final Connectable<I, O> connectable)", "class_method_signature": "RxConnectables.toTransformer(\n      final Connectable<I, O> connectable)", "testcase": false, "constructor": false, "invocations": ["create", "onNext", "connect", "subscribe", "accept", "onError", "onComplete", "setCancellable", "dispose", "dispose"]}, "repository": {"repo_id": 118132535, "url": "https://github.com/spotify/mobius", "stars": 663, "created": "1/19/2018 2:07:51 PM +00:00", "updates": "2020-01-27T22:05:43+00:00", "fork": "False", "license": "licensed"}}