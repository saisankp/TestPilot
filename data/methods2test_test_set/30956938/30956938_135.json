{"test_class": {"identifier": "SpreadsheetImportConfigurationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SpreadsheetImportConfiguration configuration;", "modifier": "private", "type": "SpreadsheetImportConfiguration", "declarator": "configuration", "var_name": "configuration"}], "file": "taverna-spreadsheet-import-activity/src/test/java/org/apache/taverna/activities/spreadsheet/SpreadsheetImportConfigurationTest.java"}, "test_case": {"identifier": "testSetEmptyCellPolicy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSetEmptyCellPolicy() {\n\t\tconfiguration.setEmptyCellPolicy(SpreadsheetEmptyCellPolicy.GENERATE_ERROR);\n\t\tassertEquals(SpreadsheetEmptyCellPolicy.GENERATE_ERROR, configuration.getEmptyCellPolicy());\n\t\tconfiguration.setEmptyCellPolicy(SpreadsheetEmptyCellPolicy.USER_DEFINED);\n\t\tassertEquals(SpreadsheetEmptyCellPolicy.USER_DEFINED, configuration.getEmptyCellPolicy());\n\t\tconfiguration.setEmptyCellPolicy(SpreadsheetEmptyCellPolicy.EMPTY_STRING);\n\t\tassertEquals(SpreadsheetEmptyCellPolicy.EMPTY_STRING, configuration.getEmptyCellPolicy());\n\t}", "signature": "void testSetEmptyCellPolicy()", "full_signature": "@Test public void testSetEmptyCellPolicy()", "class_method_signature": "SpreadsheetImportConfigurationTest.testSetEmptyCellPolicy()", "testcase": true, "constructor": false, "invocations": ["setEmptyCellPolicy", "assertEquals", "getEmptyCellPolicy", "setEmptyCellPolicy", "assertEquals", "getEmptyCellPolicy", "setEmptyCellPolicy", "assertEquals", "getEmptyCellPolicy"]}, "focal_class": {"identifier": "SpreadsheetImportConfiguration", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Range columnRange;", "modifier": "private", "type": "Range", "declarator": "columnRange", "var_name": "columnRange"}, {"original_string": "private Range rowRange;", "modifier": "private", "type": "Range", "declarator": "rowRange", "var_name": "rowRange"}, {"original_string": "private String emptyCellValue;", "modifier": "private", "type": "String", "declarator": "emptyCellValue", "var_name": "emptyCellValue"}, {"original_string": "private Map<String, String> columnNames;", "modifier": "private", "type": "Map<String, String>", "declarator": "columnNames", "var_name": "columnNames"}, {"original_string": "private boolean allRows;", "modifier": "private", "type": "boolean", "declarator": "allRows", "var_name": "allRows"}, {"original_string": "private boolean excludeFirstRow;", "modifier": "private", "type": "boolean", "declarator": "excludeFirstRow", "var_name": "excludeFirstRow"}, {"original_string": "private boolean ignoreBlankRows;", "modifier": "private", "type": "boolean", "declarator": "ignoreBlankRows", "var_name": "ignoreBlankRows"}, {"original_string": "private SpreadsheetEmptyCellPolicy emptyCellPolicy;", "modifier": "private", "type": "SpreadsheetEmptyCellPolicy", "declarator": "emptyCellPolicy", "var_name": "emptyCellPolicy"}, {"original_string": "private SpreadsheetOutputFormat outputFormat;", "modifier": "private", "type": "SpreadsheetOutputFormat", "declarator": "outputFormat", "var_name": "outputFormat"}, {"original_string": "private String csvDelimiter;", "modifier": "private", "type": "String", "declarator": "csvDelimiter", "var_name": "csvDelimiter"}], "methods": [{"identifier": "SpreadsheetImportConfiguration", "parameters": "()", "modifiers": "public", "return": "", "signature": " SpreadsheetImportConfiguration()", "full_signature": "public  SpreadsheetImportConfiguration()", "class_method_signature": "SpreadsheetImportConfiguration.SpreadsheetImportConfiguration()", "testcase": false, "constructor": true}, {"identifier": "SpreadsheetImportConfiguration", "parameters": "(SpreadsheetImportConfiguration configuration)", "modifiers": "public", "return": "", "signature": " SpreadsheetImportConfiguration(SpreadsheetImportConfiguration configuration)", "full_signature": "public  SpreadsheetImportConfiguration(SpreadsheetImportConfiguration configuration)", "class_method_signature": "SpreadsheetImportConfiguration.SpreadsheetImportConfiguration(SpreadsheetImportConfiguration configuration)", "testcase": false, "constructor": true}, {"identifier": "getColumnRange", "parameters": "()", "modifiers": "public", "return": "Range", "signature": "Range getColumnRange()", "full_signature": "public Range getColumnRange()", "class_method_signature": "SpreadsheetImportConfiguration.getColumnRange()", "testcase": false, "constructor": false}, {"identifier": "setColumnRange", "parameters": "(Range columnRange)", "modifiers": "@ConfigurationProperty(name = \"columnRange\", label = \"Column Range\", description = \"The range of columns to be imported (e.g. columns 2 to 7\") public", "return": "void", "signature": "void setColumnRange(Range columnRange)", "full_signature": "@ConfigurationProperty(name = \"columnRange\", label = \"Column Range\", description = \"The range of columns to be imported (e.g. columns 2 to 7\") public void setColumnRange(Range columnRange)", "class_method_signature": "SpreadsheetImportConfiguration.setColumnRange(Range columnRange)", "testcase": false, "constructor": false}, {"identifier": "getRowRange", "parameters": "()", "modifiers": "public", "return": "Range", "signature": "Range getRowRange()", "full_signature": "public Range getRowRange()", "class_method_signature": "SpreadsheetImportConfiguration.getRowRange()", "testcase": false, "constructor": false}, {"identifier": "setRowRange", "parameters": "(Range rowRange)", "modifiers": "@ConfigurationProperty(name = \"rowRange\", label = \"Row Range\", description = \"The range of rows to be imported (e.g. rows 1 to 15\", required = false) public", "return": "void", "signature": "void setRowRange(Range rowRange)", "full_signature": "@ConfigurationProperty(name = \"rowRange\", label = \"Row Range\", description = \"The range of rows to be imported (e.g. rows 1 to 15\", required = false) public void setRowRange(Range rowRange)", "class_method_signature": "SpreadsheetImportConfiguration.setRowRange(Range rowRange)", "testcase": false, "constructor": false}, {"identifier": "getEmptyCellValue", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getEmptyCellValue()", "full_signature": "public String getEmptyCellValue()", "class_method_signature": "SpreadsheetImportConfiguration.getEmptyCellValue()", "testcase": false, "constructor": false}, {"identifier": "setEmptyCellValue", "parameters": "(String emptyCellValue)", "modifiers": "@ConfigurationProperty(name = \"emptyCellValue\", label = \"Empty Cell Value\", description = \"The value to use for empty cells. The default is \\\"\\\"\", required = false) public", "return": "void", "signature": "void setEmptyCellValue(String emptyCellValue)", "full_signature": "@ConfigurationProperty(name = \"emptyCellValue\", label = \"Empty Cell Value\", description = \"The value to use for empty cells. The default is \\\"\\\"\", required = false) public void setEmptyCellValue(String emptyCellValue)", "class_method_signature": "SpreadsheetImportConfiguration.setEmptyCellValue(String emptyCellValue)", "testcase": false, "constructor": false}, {"identifier": "getColumnNames", "parameters": "()", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> getColumnNames()", "full_signature": "public Map<String, String> getColumnNames()", "class_method_signature": "SpreadsheetImportConfiguration.getColumnNames()", "testcase": false, "constructor": false}, {"identifier": "setColumnNames", "parameters": "(Map<String, String> columnNames)", "modifiers": "public", "return": "void", "signature": "void setColumnNames(Map<String, String> columnNames)", "full_signature": "public void setColumnNames(Map<String, String> columnNames)", "class_method_signature": "SpreadsheetImportConfiguration.setColumnNames(Map<String, String> columnNames)", "testcase": false, "constructor": false}, {"identifier": "setColumnNames", "parameters": "(Set<Mapping> columnNames)", "modifiers": "@ConfigurationProperty(name = \"columnNames\", label = \"Column Name Mapping\", description = \"Mapping from column to port names\", required = false) public", "return": "void", "signature": "void setColumnNames(Set<Mapping> columnNames)", "full_signature": "@ConfigurationProperty(name = \"columnNames\", label = \"Column Name Mapping\", description = \"Mapping from column to port names\", required = false) public void setColumnNames(Set<Mapping> columnNames)", "class_method_signature": "SpreadsheetImportConfiguration.setColumnNames(Set<Mapping> columnNames)", "testcase": false, "constructor": false}, {"identifier": "isAllRows", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAllRows()", "full_signature": "public boolean isAllRows()", "class_method_signature": "SpreadsheetImportConfiguration.isAllRows()", "testcase": false, "constructor": false}, {"identifier": "setAllRows", "parameters": "(boolean allRows)", "modifiers": "@ConfigurationProperty(name = \"allRows\", label = \"Import All Rows\", description = \"Imports all the rows containing data\", required = false) public", "return": "void", "signature": "void setAllRows(boolean allRows)", "full_signature": "@ConfigurationProperty(name = \"allRows\", label = \"Import All Rows\", description = \"Imports all the rows containing data\", required = false) public void setAllRows(boolean allRows)", "class_method_signature": "SpreadsheetImportConfiguration.setAllRows(boolean allRows)", "testcase": false, "constructor": false}, {"identifier": "isExcludeFirstRow", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isExcludeFirstRow()", "full_signature": "public boolean isExcludeFirstRow()", "class_method_signature": "SpreadsheetImportConfiguration.isExcludeFirstRow()", "testcase": false, "constructor": false}, {"identifier": "setExcludeFirstRow", "parameters": "(boolean excludeFirstRow)", "modifiers": "@ConfigurationProperty(name = \"excludeFirstRow\", label = \"Exclude First Row\", description = \"Excludes the first row from the import\", required = false) public", "return": "void", "signature": "void setExcludeFirstRow(boolean excludeFirstRow)", "full_signature": "@ConfigurationProperty(name = \"excludeFirstRow\", label = \"Exclude First Row\", description = \"Excludes the first row from the import\", required = false) public void setExcludeFirstRow(boolean excludeFirstRow)", "class_method_signature": "SpreadsheetImportConfiguration.setExcludeFirstRow(boolean excludeFirstRow)", "testcase": false, "constructor": false}, {"identifier": "isIgnoreBlankRows", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isIgnoreBlankRows()", "full_signature": "public boolean isIgnoreBlankRows()", "class_method_signature": "SpreadsheetImportConfiguration.isIgnoreBlankRows()", "testcase": false, "constructor": false}, {"identifier": "setIgnoreBlankRows", "parameters": "(boolean ignoreBlankRows)", "modifiers": "@ConfigurationProperty(name = \"ignoreBlankRows\", label = \"Ignore Blank Rows\", description = \"Excludes blank rows from the import\", required = false) public", "return": "void", "signature": "void setIgnoreBlankRows(boolean ignoreBlankRows)", "full_signature": "@ConfigurationProperty(name = \"ignoreBlankRows\", label = \"Ignore Blank Rows\", description = \"Excludes blank rows from the import\", required = false) public void setIgnoreBlankRows(boolean ignoreBlankRows)", "class_method_signature": "SpreadsheetImportConfiguration.setIgnoreBlankRows(boolean ignoreBlankRows)", "testcase": false, "constructor": false}, {"identifier": "getEmptyCellPolicy", "parameters": "()", "modifiers": "public", "return": "SpreadsheetEmptyCellPolicy", "signature": "SpreadsheetEmptyCellPolicy getEmptyCellPolicy()", "full_signature": "public SpreadsheetEmptyCellPolicy getEmptyCellPolicy()", "class_method_signature": "SpreadsheetImportConfiguration.getEmptyCellPolicy()", "testcase": false, "constructor": false}, {"identifier": "setEmptyCellPolicy", "parameters": "(SpreadsheetEmptyCellPolicy emptyCellPolicy)", "modifiers": "@ConfigurationProperty(name = \"emptyCellPolicy\", label = \"Empty Cell Policy\", description = \"Policy for handling empty cells\", required = false) public", "return": "void", "signature": "void setEmptyCellPolicy(SpreadsheetEmptyCellPolicy emptyCellPolicy)", "full_signature": "@ConfigurationProperty(name = \"emptyCellPolicy\", label = \"Empty Cell Policy\", description = \"Policy for handling empty cells\", required = false) public void setEmptyCellPolicy(SpreadsheetEmptyCellPolicy emptyCellPolicy)", "class_method_signature": "SpreadsheetImportConfiguration.setEmptyCellPolicy(SpreadsheetEmptyCellPolicy emptyCellPolicy)", "testcase": false, "constructor": false}, {"identifier": "getOutputFormat", "parameters": "()", "modifiers": "public", "return": "SpreadsheetOutputFormat", "signature": "SpreadsheetOutputFormat getOutputFormat()", "full_signature": "public SpreadsheetOutputFormat getOutputFormat()", "class_method_signature": "SpreadsheetImportConfiguration.getOutputFormat()", "testcase": false, "constructor": false}, {"identifier": "setOutputFormat", "parameters": "(SpreadsheetOutputFormat outputFormat)", "modifiers": "@ConfigurationProperty(name = \"outputFormat\", label = \"Output Format\", description = \"How the activity outputs are to be formatted\", required = false) public", "return": "void", "signature": "void setOutputFormat(SpreadsheetOutputFormat outputFormat)", "full_signature": "@ConfigurationProperty(name = \"outputFormat\", label = \"Output Format\", description = \"How the activity outputs are to be formatted\", required = false) public void setOutputFormat(SpreadsheetOutputFormat outputFormat)", "class_method_signature": "SpreadsheetImportConfiguration.setOutputFormat(SpreadsheetOutputFormat outputFormat)", "testcase": false, "constructor": false}, {"identifier": "getCsvDelimiter", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCsvDelimiter()", "full_signature": "public String getCsvDelimiter()", "class_method_signature": "SpreadsheetImportConfiguration.getCsvDelimiter()", "testcase": false, "constructor": false}, {"identifier": "setCsvDelimiter", "parameters": "(String csvDelimiter)", "modifiers": "@ConfigurationProperty(name = \"csvDelimiter\", label = \"CSV Delimiter\", description = \"The delimiter to use for CSV input files. The default is ','\", required = false) public", "return": "void", "signature": "void setCsvDelimiter(String csvDelimiter)", "full_signature": "@ConfigurationProperty(name = \"csvDelimiter\", label = \"CSV Delimiter\", description = \"The delimiter to use for CSV input files. The default is ','\", required = false) public void setCsvDelimiter(String csvDelimiter)", "class_method_signature": "SpreadsheetImportConfiguration.setCsvDelimiter(String csvDelimiter)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "SpreadsheetImportConfiguration.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "SpreadsheetImportConfiguration.equals(Object obj)", "testcase": false, "constructor": false}], "file": "taverna-spreadsheet-import-activity/src/main/java/org/apache/taverna/activities/spreadsheet/SpreadsheetImportConfiguration.java"}, "focal_method": {"identifier": "setEmptyCellPolicy", "parameters": "(SpreadsheetEmptyCellPolicy emptyCellPolicy)", "modifiers": "@ConfigurationProperty(name = \"emptyCellPolicy\", label = \"Empty Cell Policy\", description = \"Policy for handling empty cells\", required = false) public", "return": "void", "body": "@ConfigurationProperty(name = \"emptyCellPolicy\", label = \"Empty Cell Policy\", description = \"Policy for handling empty cells\", required = false)\n\tpublic void setEmptyCellPolicy(SpreadsheetEmptyCellPolicy emptyCellPolicy) {\n\t\tthis.emptyCellPolicy = emptyCellPolicy;\n\t}", "signature": "void setEmptyCellPolicy(SpreadsheetEmptyCellPolicy emptyCellPolicy)", "full_signature": "@ConfigurationProperty(name = \"emptyCellPolicy\", label = \"Empty Cell Policy\", description = \"Policy for handling empty cells\", required = false) public void setEmptyCellPolicy(SpreadsheetEmptyCellPolicy emptyCellPolicy)", "class_method_signature": "SpreadsheetImportConfiguration.setEmptyCellPolicy(SpreadsheetEmptyCellPolicy emptyCellPolicy)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 30956938, "url": "https://github.com/apache/incubator-taverna-common-activities", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 8, "size": 5696, "license": "licensed"}}