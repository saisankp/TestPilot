{"test_class": {"identifier": "AutoValueParcelExtensionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public CompilationRule rule = new CompilationRule();", "modifier": "@Rule public", "type": "CompilationRule", "declarator": "rule = new CompilationRule()", "var_name": "rule"}, {"original_string": "AutoValueParcelExtension extension = new AutoValueParcelExtension();", "modifier": "", "type": "AutoValueParcelExtension", "declarator": "extension = new AutoValueParcelExtension()", "var_name": "extension"}, {"original_string": "private Elements elements;", "modifier": "private", "type": "Elements", "declarator": "elements", "var_name": "elements"}, {"original_string": "private TestProcessingEnvironment processingEnvironment;", "modifier": "private", "type": "TestProcessingEnvironment", "declarator": "processingEnvironment", "var_name": "processingEnvironment"}, {"original_string": "private JavaFileObject parcelable;", "modifier": "private", "type": "JavaFileObject", "declarator": "parcelable", "var_name": "parcelable"}, {"original_string": "private JavaFileObject parcel;", "modifier": "private", "type": "JavaFileObject", "declarator": "parcel", "var_name": "parcel"}, {"original_string": "private JavaFileObject nullable;", "modifier": "private", "type": "JavaFileObject", "declarator": "nullable", "var_name": "nullable"}, {"original_string": "private JavaFileObject textUtils;", "modifier": "private", "type": "JavaFileObject", "declarator": "textUtils", "var_name": "textUtils"}], "file": "auto-value-parcel/src/test/java/com/ryanharter/auto/value/parcel/AutoValueParcelExtensionTest.java"}, "test_case": {"identifier": "acceptsParcelableProperties", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void acceptsParcelableProperties() throws Exception {\n    TypeElement type = elements.getTypeElement(SampleTypeWithParcelable.class.getCanonicalName());\n    AutoValueExtension.Context context = createContext(type);\n\n    String generated = extension.generateClass(context, \"Test_TypeWithParcelable\", \"SampleTypeWithParcelable\", true);\n    assertThat(generated).isNotNull();\n  }", "signature": "void acceptsParcelableProperties()", "full_signature": "@Test public void acceptsParcelableProperties()", "class_method_signature": "AutoValueParcelExtensionTest.acceptsParcelableProperties()", "testcase": true, "constructor": false, "invocations": ["getTypeElement", "getCanonicalName", "createContext", "generateClass", "isNotNull", "assertThat"]}, "focal_class": {"identifier": "AutoValueParcelExtension", "superclass": "extends AutoValueExtension", "interfaces": "", "fields": [{"original_string": "static final String FAIL_EXPLOSIVELY = \"avparcel.failExplosively\";", "modifier": "static final", "type": "String", "declarator": "FAIL_EXPLOSIVELY = \"avparcel.failExplosively\"", "var_name": "FAIL_EXPLOSIVELY"}], "methods": [{"identifier": "incrementalType", "parameters": "(ProcessingEnvironment processingEnvironment)", "modifiers": "@Override public", "return": "IncrementalExtensionType", "signature": "IncrementalExtensionType incrementalType(ProcessingEnvironment processingEnvironment)", "full_signature": "@Override public IncrementalExtensionType incrementalType(ProcessingEnvironment processingEnvironment)", "class_method_signature": "AutoValueParcelExtension.incrementalType(ProcessingEnvironment processingEnvironment)", "testcase": false, "constructor": false}, {"identifier": "applicable", "parameters": "(Context context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean applicable(Context context)", "full_signature": "@Override public boolean applicable(Context context)", "class_method_signature": "AutoValueParcelExtension.applicable(Context context)", "testcase": false, "constructor": false}, {"identifier": "mustBeFinal", "parameters": "(Context context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean mustBeFinal(Context context)", "full_signature": "@Override public boolean mustBeFinal(Context context)", "class_method_signature": "AutoValueParcelExtension.mustBeFinal(Context context)", "testcase": false, "constructor": false}, {"identifier": "consumeProperties", "parameters": "(Context context)", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> consumeProperties(Context context)", "full_signature": "@Override public Set<String> consumeProperties(Context context)", "class_method_signature": "AutoValueParcelExtension.consumeProperties(Context context)", "testcase": false, "constructor": false}, {"identifier": "consumeMethods", "parameters": "(Context context)", "modifiers": "@Override public", "return": "Set<ExecutableElement>", "signature": "Set<ExecutableElement> consumeMethods(Context context)", "full_signature": "@Override public Set<ExecutableElement> consumeMethods(Context context)", "class_method_signature": "AutoValueParcelExtension.consumeMethods(Context context)", "testcase": false, "constructor": false}, {"identifier": "generateClass", "parameters": "(Context context, String className, String classToExtend,\n                              boolean isFinal)", "modifiers": "@Override public", "return": "String", "signature": "String generateClass(Context context, String className, String classToExtend,\n                              boolean isFinal)", "full_signature": "@Override public String generateClass(Context context, String className, String classToExtend,\n                              boolean isFinal)", "class_method_signature": "AutoValueParcelExtension.generateClass(Context context, String className, String classToExtend,\n                              boolean isFinal)", "testcase": false, "constructor": false}, {"identifier": "needsContentDescriptor", "parameters": "(Context context)", "modifiers": "private static", "return": "boolean", "signature": "boolean needsContentDescriptor(Context context)", "full_signature": "private static boolean needsContentDescriptor(Context context)", "class_method_signature": "AutoValueParcelExtension.needsContentDescriptor(Context context)", "testcase": false, "constructor": false}, {"identifier": "findWriteToParcel", "parameters": "(Context context)", "modifiers": "private static", "return": "ExecutableElement", "signature": "ExecutableElement findWriteToParcel(Context context)", "full_signature": "private static ExecutableElement findWriteToParcel(Context context)", "class_method_signature": "AutoValueParcelExtension.findWriteToParcel(Context context)", "testcase": false, "constructor": false}, {"identifier": "findCreator", "parameters": "(Context context)", "modifiers": "private static", "return": "VariableElement", "signature": "VariableElement findCreator(Context context)", "full_signature": "private static VariableElement findCreator(Context context)", "class_method_signature": "AutoValueParcelExtension.findCreator(Context context)", "testcase": false, "constructor": false}, {"identifier": "readProperties", "parameters": "(Context context)", "modifiers": "private", "return": "ImmutableList<Property>", "signature": "ImmutableList<Property> readProperties(Context context)", "full_signature": "private ImmutableList<Property> readProperties(Context context)", "class_method_signature": "AutoValueParcelExtension.readProperties(Context context)", "testcase": false, "constructor": false}, {"identifier": "validateProperties", "parameters": "(ProcessingEnvironment env, List<Property> properties)", "modifiers": "private", "return": "boolean", "signature": "boolean validateProperties(ProcessingEnvironment env, List<Property> properties)", "full_signature": "private boolean validateProperties(ProcessingEnvironment env, List<Property> properties)", "class_method_signature": "AutoValueParcelExtension.validateProperties(ProcessingEnvironment env, List<Property> properties)", "testcase": false, "constructor": false}, {"identifier": "generateConstructor", "parameters": "(List<Property> properties)", "modifiers": "", "return": "MethodSpec", "signature": "MethodSpec generateConstructor(List<Property> properties)", "full_signature": " MethodSpec generateConstructor(List<Property> properties)", "class_method_signature": "AutoValueParcelExtension.generateConstructor(List<Property> properties)", "testcase": false, "constructor": false}, {"identifier": "generateCreator", "parameters": "(ProcessingEnvironment env, TypeName autoValueType,\n      List<Property> properties, TypeName type, Map<TypeMirror, FieldSpec> typeAdapters)", "modifiers": "", "return": "FieldSpec", "signature": "FieldSpec generateCreator(ProcessingEnvironment env, TypeName autoValueType,\n      List<Property> properties, TypeName type, Map<TypeMirror, FieldSpec> typeAdapters)", "full_signature": " FieldSpec generateCreator(ProcessingEnvironment env, TypeName autoValueType,\n      List<Property> properties, TypeName type, Map<TypeMirror, FieldSpec> typeAdapters)", "class_method_signature": "AutoValueParcelExtension.generateCreator(ProcessingEnvironment env, TypeName autoValueType,\n      List<Property> properties, TypeName type, Map<TypeMirror, FieldSpec> typeAdapters)", "testcase": false, "constructor": false}, {"identifier": "generateWriteToParcel", "parameters": "(ProcessingEnvironment env, List<Property> properties,\n      Map<TypeMirror, FieldSpec> typeAdapters)", "modifiers": "", "return": "MethodSpec", "signature": "MethodSpec generateWriteToParcel(ProcessingEnvironment env, List<Property> properties,\n      Map<TypeMirror, FieldSpec> typeAdapters)", "full_signature": " MethodSpec generateWriteToParcel(ProcessingEnvironment env, List<Property> properties,\n      Map<TypeMirror, FieldSpec> typeAdapters)", "class_method_signature": "AutoValueParcelExtension.generateWriteToParcel(ProcessingEnvironment env, List<Property> properties,\n      Map<TypeMirror, FieldSpec> typeAdapters)", "testcase": false, "constructor": false}, {"identifier": "createSuppressUncheckedWarningAnnotation", "parameters": "()", "modifiers": "private static", "return": "AnnotationSpec", "signature": "AnnotationSpec createSuppressUncheckedWarningAnnotation()", "full_signature": "private static AnnotationSpec createSuppressUncheckedWarningAnnotation()", "class_method_signature": "AutoValueParcelExtension.createSuppressUncheckedWarningAnnotation()", "testcase": false, "constructor": false}, {"identifier": "getTypeAdapters", "parameters": "(List<Property> properties)", "modifiers": "private", "return": "ImmutableMap<TypeMirror, FieldSpec>", "signature": "ImmutableMap<TypeMirror, FieldSpec> getTypeAdapters(List<Property> properties)", "full_signature": "private ImmutableMap<TypeMirror, FieldSpec> getTypeAdapters(List<Property> properties)", "class_method_signature": "AutoValueParcelExtension.getTypeAdapters(List<Property> properties)", "testcase": false, "constructor": false}, {"identifier": "generateDescribeContents", "parameters": "()", "modifiers": "", "return": "MethodSpec", "signature": "MethodSpec generateDescribeContents()", "full_signature": " MethodSpec generateDescribeContents()", "class_method_signature": "AutoValueParcelExtension.generateDescribeContents()", "testcase": false, "constructor": false}], "file": "auto-value-parcel/src/main/java/com/ryanharter/auto/value/parcel/AutoValueParcelExtension.java"}, "focal_method": {"identifier": "generateClass", "parameters": "(Context context, String className, String classToExtend,\n                              boolean isFinal)", "modifiers": "@Override public", "return": "String", "body": "@Override\n  public String generateClass(Context context, String className, String classToExtend,\n                              boolean isFinal) {\n    ProcessingEnvironment env = context.processingEnvironment();\n    TypeName autoValueType =\n        TypeName.get(env.getTypeUtils().erasure(context.autoValueClass().asType()));\n\n    ImmutableList<Property> properties = readProperties(context);\n    if (!validateProperties(env, properties)) {\n      return null;\n    }\n\n    ImmutableMap<TypeMirror, FieldSpec> typeAdapters = getTypeAdapters(properties);\n\n    TypeName type = ClassName.get(context.packageName(), className);\n    TypeSpec.Builder subclass = TypeSpec.classBuilder(className)\n        .addModifiers(FINAL)\n        .addMethod(generateConstructor(properties))\n        .addMethod(generateWriteToParcel(env, properties, typeAdapters));\n\n    GeneratedAnnotations.generatedAnnotation(env.getElementUtils(), env.getSourceVersion())\n        .map(\n            annotation ->\n                AnnotationSpec.builder(ClassName.get(annotation))\n                    .addMember(\"value\", \"$S\", getClass().getName())\n                    .build())\n        .ifPresent(subclass::addAnnotation);\n\n    if (!typeAdapters.isEmpty()) {\n      for (FieldSpec field : typeAdapters.values()) {\n        subclass.addField(field);\n      }\n    }\n\n    subclass.addField(generateCreator(env, autoValueType, properties, type, typeAdapters));\n\n    ClassName superClass = ClassName.get(context.packageName(), classToExtend);\n    List<? extends TypeParameterElement> tpes = context.autoValueClass().getTypeParameters();\n    if (tpes.isEmpty()) {\n      subclass.superclass(superClass);\n    } else {\n      TypeName[] superTypeVariables = new TypeName[tpes.size()];\n      for (int i = 0, tpesSize = tpes.size(); i < tpesSize; i++) {\n        TypeParameterElement tpe = tpes.get(i);\n        subclass.addTypeVariable(TypeVariableName.get(tpe));\n        superTypeVariables[i] = TypeVariableName.get(tpe.getSimpleName().toString());\n      }\n      subclass.superclass(ParameterizedTypeName.get(superClass, superTypeVariables));\n    }\n    if (needsContentDescriptor(context)) {\n      subclass.addMethod(generateDescribeContents());\n    }\n\n    JavaFile javaFile = JavaFile.builder(context.packageName(), subclass.build()).build();\n    return javaFile.toString();\n  }", "signature": "String generateClass(Context context, String className, String classToExtend,\n                              boolean isFinal)", "full_signature": "@Override public String generateClass(Context context, String className, String classToExtend,\n                              boolean isFinal)", "class_method_signature": "AutoValueParcelExtension.generateClass(Context context, String className, String classToExtend,\n                              boolean isFinal)", "testcase": false, "constructor": false, "invocations": ["processingEnvironment", "get", "erasure", "getTypeUtils", "asType", "autoValueClass", "readProperties", "validateProperties", "getTypeAdapters", "get", "packageName", "addMethod", "addMethod", "addModifiers", "classBuilder", "generateConstructor", "generateWriteToParcel", "ifPresent", "map", "generatedAnnotation", "getElementUtils", "getSourceVersion", "build", "addMember", "builder", "get", "getName", "getClass", "isEmpty", "values", "addField", "addField", "generateCreator", "get", "packageName", "getTypeParameters", "autoValueClass", "isEmpty", "superclass", "size", "size", "get", "addTypeVariable", "get", "get", "toString", "getSimpleName", "superclass", "get", "needsContentDescriptor", "addMethod", "generateDescribeContents", "build", "builder", "packageName", "build", "toString"]}, "repository": {"repo_id": 35555582, "url": "https://github.com/rharter/auto-value-parcel", "language": "Java", "is_fork": false, "fork_count": 60, "stargazer_count": 657, "size": 422, "license": "licensed"}}