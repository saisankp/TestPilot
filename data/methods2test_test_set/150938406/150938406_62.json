{"test_class": {"identifier": "CsvFormatterTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/alibaba/alink/operator/common/io/csv/CsvFormatterTest.java"}, "test_case": {"identifier": "testDoublePrecision", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDoublePrecision() throws Exception {\n        TypeInformation[] types = new TypeInformation[]{Types.DOUBLE};\n\n        CsvFormatter formatter = new CsvFormatter(types, \",\", '\"');\n        CsvParser parser = new CsvParser(types, \",\", '\"');\n\n        Double[] values = new Double[]{Double.MAX_VALUE, Double.MIN_VALUE, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY,\n            new Random().nextDouble()};\n        for (Double v : values) {\n            String text = formatter.format(Row.of(v));\n            Row parsed = parser.parse(text).f1;\n            Double p = (Double) parsed.getField(0);\n            Assert.assertEquals(v, p, 0.);\n        }\n    }", "signature": "void testDoublePrecision()", "full_signature": "@Test public void testDoublePrecision()", "class_method_signature": "CsvFormatterTest.testDoublePrecision()", "testcase": true, "constructor": false, "invocations": ["nextDouble", "format", "of", "parse", "getField", "assertEquals"]}, "focal_class": {"identifier": "CsvFormatter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TypeInformation[] types;", "modifier": "private", "type": "TypeInformation[]", "declarator": "types", "var_name": "types"}, {"original_string": "private String fieldDelim;", "modifier": "private", "type": "String", "declarator": "fieldDelim", "var_name": "fieldDelim"}, {"original_string": "private String quoteChar;", "modifier": "private", "type": "String", "declarator": "quoteChar", "var_name": "quoteChar"}, {"original_string": "private String escapeChar;", "modifier": "private", "type": "String", "declarator": "escapeChar", "var_name": "escapeChar"}], "methods": [{"identifier": "CsvFormatter", "parameters": "(TypeInformation[] types, String fieldDelim, @Nullable Character quoteChar)", "modifiers": "public", "return": "", "signature": " CsvFormatter(TypeInformation[] types, String fieldDelim, @Nullable Character quoteChar)", "full_signature": "public  CsvFormatter(TypeInformation[] types, String fieldDelim, @Nullable Character quoteChar)", "class_method_signature": "CsvFormatter.CsvFormatter(TypeInformation[] types, String fieldDelim, @Nullable Character quoteChar)", "testcase": false, "constructor": true}, {"identifier": "format", "parameters": "(Row row)", "modifiers": "public", "return": "String", "signature": "String format(Row row)", "full_signature": "public String format(Row row)", "class_method_signature": "CsvFormatter.format(Row row)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/common/io/csv/CsvFormatter.java"}, "focal_method": {"identifier": "format", "parameters": "(Row row)", "modifiers": "public", "return": "String", "body": "public String format(Row row) {\n        StringBuilder sbd = new StringBuilder();\n        for (int i = 0; i < row.getArity(); i++) {\n            if (i > 0) {\n                sbd.append(fieldDelim);\n            }\n            Object v = row.getField(i);\n            if (v == null) {\n                continue;\n            }\n            if (quoteChar != null && types[i].equals(Types.STRING)) {\n                String str = (String) v;\n                if (str.isEmpty() || str.contains(fieldDelim) || str.contains(quoteChar)) {\n                    sbd.append(quoteChar);\n                    sbd.append(str.replace(quoteChar, escapeChar + quoteChar));\n                    sbd.append(quoteChar);\n                } else {\n                    sbd.append(v.toString());\n                }\n            } else {\n                sbd.append(v.toString());\n            }\n        }\n        return sbd.toString();\n    }", "signature": "String format(Row row)", "full_signature": "public String format(Row row)", "class_method_signature": "CsvFormatter.format(Row row)", "testcase": false, "constructor": false, "invocations": ["getArity", "append", "getField", "equals", "isEmpty", "contains", "contains", "append", "append", "replace", "append", "append", "toString", "append", "toString", "toString"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}