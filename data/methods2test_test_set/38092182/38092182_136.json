{"test_class": {"identifier": "HtmlBannerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HtmlBanner subject;", "modifier": "private", "type": "HtmlBanner", "declarator": "subject", "var_name": "subject"}, {"original_string": "private HtmlBannerWebView htmlBannerWebView;", "modifier": "private", "type": "HtmlBannerWebView", "declarator": "htmlBannerWebView", "var_name": "htmlBannerWebView"}, {"original_string": "private CustomEventBanner.CustomEventBannerListener customEventBannerListener;", "modifier": "private", "type": "CustomEventBanner.CustomEventBannerListener", "declarator": "customEventBannerListener", "var_name": "customEventBannerListener"}, {"original_string": "private Map<String, Object> localExtras;", "modifier": "private", "type": "Map<String, Object>", "declarator": "localExtras", "var_name": "localExtras"}, {"original_string": "private Map<String, String> serverExtras;", "modifier": "private", "type": "Map<String, String>", "declarator": "serverExtras", "var_name": "serverExtras"}, {"original_string": "private Activity context;", "modifier": "private", "type": "Activity", "declarator": "context", "var_name": "context"}, {"original_string": "private String responseBody;", "modifier": "private", "type": "String", "declarator": "responseBody", "var_name": "responseBody"}], "file": "MoPubAd/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java"}, "test_case": {"identifier": "loadBanner_shouldCauseServerDimensionsToBeHonoredWhenLayingOutView", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void loadBanner_shouldCauseServerDimensionsToBeHonoredWhenLayingOutView() throws Exception {\n        subject.loadBanner(context, customEventBannerListener, localExtras, serverExtras);\n        MoPubView moPubView = TestMoPubViewFactory.getSingletonMock();\n        stub(moPubView.getContext()).toReturn(context);\n        AdViewController adViewController = new AdViewController(context, moPubView);\n\n        HttpResponse response = new TestHttpResponseWithHeaders(200, \"I ain't got no-body\");\n        response.addHeader(\"X-Width\", \"320\");\n        response.addHeader(\"X-Height\", \"50\");\n        adViewController.configureUsingHttpResponse(response);\n\n        adViewController.setAdContentView(htmlBannerWebView);\n        ArgumentCaptor<FrameLayout.LayoutParams> layoutParamsCaptor = ArgumentCaptor.forClass(FrameLayout.LayoutParams.class);\n        verify(moPubView).addView(eq(htmlBannerWebView), layoutParamsCaptor.capture());\n        FrameLayout.LayoutParams layoutParams = layoutParamsCaptor.getValue();\n\n        assertThat(layoutParams.width).isEqualTo(320);\n        assertThat(layoutParams.height).isEqualTo(50);\n        assertThat(layoutParams.gravity).isEqualTo(Gravity.CENTER);\n    }", "signature": "void loadBanner_shouldCauseServerDimensionsToBeHonoredWhenLayingOutView()", "full_signature": "@Test public void loadBanner_shouldCauseServerDimensionsToBeHonoredWhenLayingOutView()", "class_method_signature": "HtmlBannerTest.loadBanner_shouldCauseServerDimensionsToBeHonoredWhenLayingOutView()", "testcase": true, "constructor": false, "invocations": ["loadBanner", "getSingletonMock", "toReturn", "stub", "getContext", "addHeader", "addHeader", "configureUsingHttpResponse", "setAdContentView", "forClass", "addView", "verify", "eq", "capture", "getValue", "isEqualTo", "assertThat", "isEqualTo", "assertThat", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "HtmlBanner", "superclass": "extends CustomEventBanner", "interfaces": "", "fields": [{"original_string": "private HtmlBannerWebView mHtmlBannerWebView;", "modifier": "private", "type": "HtmlBannerWebView", "declarator": "mHtmlBannerWebView", "var_name": "mHtmlBannerWebView"}], "methods": [{"identifier": "loadBanner", "parameters": "(\n            Context context,\n            CustomEventBannerListener customEventBannerListener,\n            Map<String, Object> localExtras,\n            Map<String, String> serverExtras)", "modifiers": "@Override protected", "return": "void", "signature": "void loadBanner(\n            Context context,\n            CustomEventBannerListener customEventBannerListener,\n            Map<String, Object> localExtras,\n            Map<String, String> serverExtras)", "full_signature": "@Override protected void loadBanner(\n            Context context,\n            CustomEventBannerListener customEventBannerListener,\n            Map<String, Object> localExtras,\n            Map<String, String> serverExtras)", "class_method_signature": "HtmlBanner.loadBanner(\n            Context context,\n            CustomEventBannerListener customEventBannerListener,\n            Map<String, Object> localExtras,\n            Map<String, String> serverExtras)", "testcase": false, "constructor": false}, {"identifier": "onInvalidate", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void onInvalidate()", "full_signature": "@Override protected void onInvalidate()", "class_method_signature": "HtmlBanner.onInvalidate()", "testcase": false, "constructor": false}, {"identifier": "extrasAreValid", "parameters": "(Map<String, String> serverExtras)", "modifiers": "private", "return": "boolean", "signature": "boolean extrasAreValid(Map<String, String> serverExtras)", "full_signature": "private boolean extrasAreValid(Map<String, String> serverExtras)", "class_method_signature": "HtmlBanner.extrasAreValid(Map<String, String> serverExtras)", "testcase": false, "constructor": false}], "file": "MoPubAd/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlBanner.java"}, "focal_method": {"identifier": "loadBanner", "parameters": "(\n            Context context,\n            CustomEventBannerListener customEventBannerListener,\n            Map<String, Object> localExtras,\n            Map<String, String> serverExtras)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n    protected void loadBanner(\n            Context context,\n            CustomEventBannerListener customEventBannerListener,\n            Map<String, Object> localExtras,\n            Map<String, String> serverExtras) {\n\n        String htmlData;\n        String redirectUrl;\n        String clickthroughUrl;\n        Boolean isScrollable;\n        if (extrasAreValid(serverExtras)) {\n            htmlData = Uri.decode(serverExtras.get(HTML_RESPONSE_BODY_KEY));\n            redirectUrl = serverExtras.get(REDIRECT_URL_KEY);\n            clickthroughUrl = serverExtras.get(CLICKTHROUGH_URL_KEY);\n            isScrollable = Boolean.valueOf(serverExtras.get(SCROLLABLE_KEY));\n        } else {\n            customEventBannerListener.onBannerFailed(NETWORK_INVALID_STATE);\n            return;\n        }\n\n        AdConfiguration adConfiguration = AdConfiguration.extractFromMap(localExtras);\n        mHtmlBannerWebView = HtmlBannerWebViewFactory.create(context, customEventBannerListener, isScrollable, redirectUrl, clickthroughUrl, adConfiguration);\n        AdViewController.setShouldHonorServerDimensions(mHtmlBannerWebView);\n        mHtmlBannerWebView.loadHtmlResponse(htmlData);\n    }", "signature": "void loadBanner(\n            Context context,\n            CustomEventBannerListener customEventBannerListener,\n            Map<String, Object> localExtras,\n            Map<String, String> serverExtras)", "full_signature": "@Override protected void loadBanner(\n            Context context,\n            CustomEventBannerListener customEventBannerListener,\n            Map<String, Object> localExtras,\n            Map<String, String> serverExtras)", "class_method_signature": "HtmlBanner.loadBanner(\n            Context context,\n            CustomEventBannerListener customEventBannerListener,\n            Map<String, Object> localExtras,\n            Map<String, String> serverExtras)", "testcase": false, "constructor": false, "invocations": ["extrasAreValid", "decode", "get", "get", "get", "valueOf", "get", "onBannerFailed", "extractFromMap", "create", "setShouldHonorServerDimensions", "loadHtmlResponse"]}, "repository": {"repo_id": 38092182, "url": "https://github.com/harshalbenake/hbworkspace2-100", "language": "Java", "is_fork": false, "fork_count": 160, "stargazer_count": 191, "size": 307516, "license": "licensed"}}