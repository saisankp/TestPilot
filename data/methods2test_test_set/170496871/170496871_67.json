{"test_class": {"identifier": "RobinHoodBackwardShiftHashMapTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public Timeout globalTimeout = new Timeout((int) GridTestUtils.DFLT_TEST_TIMEOUT);", "modifier": "@Rule\n    public", "type": "Timeout", "declarator": "globalTimeout = new Timeout((int) GridTestUtils.DFLT_TEST_TIMEOUT)", "var_name": "globalTimeout"}], "file": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/RobinHoodBackwardShiftHashMapTest.java"}, "test_case": {"identifier": "testPutRemoveOnSamePlaces", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPutRemoveOnSamePlaces() throws Exception {\n        withMap(map -> {\n                doAddRemove(map);\n\n                //fill with 1 space left;\n                for (int i = 0; i < 99; i++) {\n                    int grpId = i + 1;\n                    int val = grpId * grpId;\n                    assertSizeChanged(\"Unique put should be successful \" + grpId, map,\n                        () -> map.put(grpId, 1, val, 1));\n                }\n\n                doAddRemove(map);\n            }, 100);\n    }", "signature": "void testPutRemoveOnSamePlaces()", "full_signature": "@Test public void testPutRemoveOnSamePlaces()", "class_method_signature": "RobinHoodBackwardShiftHashMapTest.testPutRemoveOnSamePlaces()", "testcase": true, "constructor": false, "invocations": ["withMap", "doAddRemove", "assertSizeChanged", "put", "doAddRemove"]}, "focal_class": {"identifier": "RobinHoodBackwardShiftHashMap", "superclass": "", "interfaces": "implements LoadedPagesMap", "fields": [{"original_string": "private static final float LOAD_FACTOR = getFloat(IGNITE_LONG_LONG_HASH_MAP_LOAD_FACTOR, 2.5f);", "modifier": "private static final", "type": "float", "declarator": "LOAD_FACTOR = getFloat(IGNITE_LONG_LONG_HASH_MAP_LOAD_FACTOR, 2.5f)", "var_name": "LOAD_FACTOR"}, {"original_string": "private static final int MAPSIZE_SIZE = 4;", "modifier": "private static final", "type": "int", "declarator": "MAPSIZE_SIZE = 4", "var_name": "MAPSIZE_SIZE"}, {"original_string": "private static final int CELL_PADDING = 4;", "modifier": "private static final", "type": "int", "declarator": "CELL_PADDING = 4", "var_name": "CELL_PADDING"}, {"original_string": "private static final int MAPSIZE_PADDING = 4;", "modifier": "private static final", "type": "int", "declarator": "MAPSIZE_PADDING = 4", "var_name": "MAPSIZE_PADDING"}, {"original_string": "private static final int MAPSIZE_OFFSET = 0;", "modifier": "private static final", "type": "int", "declarator": "MAPSIZE_OFFSET = 0", "var_name": "MAPSIZE_OFFSET"}, {"original_string": "private static final int IDEAL_BUCKET_SIZE = 4;", "modifier": "private static final", "type": "int", "declarator": "IDEAL_BUCKET_SIZE = 4", "var_name": "IDEAL_BUCKET_SIZE"}, {"original_string": "private static final int IDEAL_BUCKET_OFFSET = 0;", "modifier": "private static final", "type": "int", "declarator": "IDEAL_BUCKET_OFFSET = 0", "var_name": "IDEAL_BUCKET_OFFSET"}, {"original_string": "private static final int GRP_ID_SIZE = 4;", "modifier": "private static final", "type": "int", "declarator": "GRP_ID_SIZE = 4", "var_name": "GRP_ID_SIZE"}, {"original_string": "private static final int GRP_ID_OFFSET = IDEAL_BUCKET_OFFSET + IDEAL_BUCKET_SIZE;", "modifier": "private static final", "type": "int", "declarator": "GRP_ID_OFFSET = IDEAL_BUCKET_OFFSET + IDEAL_BUCKET_SIZE", "var_name": "GRP_ID_OFFSET"}, {"original_string": "private static final int PAGE_ID_SIZE = 8;", "modifier": "private static final", "type": "int", "declarator": "PAGE_ID_SIZE = 8", "var_name": "PAGE_ID_SIZE"}, {"original_string": "private static final int PAGE_ID_OFFSET = GRP_ID_OFFSET + GRP_ID_SIZE;", "modifier": "private static final", "type": "int", "declarator": "PAGE_ID_OFFSET = GRP_ID_OFFSET + GRP_ID_SIZE", "var_name": "PAGE_ID_OFFSET"}, {"original_string": "private static final int VALUE_SIZE = 8;", "modifier": "private static final", "type": "int", "declarator": "VALUE_SIZE = 8", "var_name": "VALUE_SIZE"}, {"original_string": "private static final int VALUE_OFFSET = PAGE_ID_OFFSET + PAGE_ID_SIZE;", "modifier": "private static final", "type": "int", "declarator": "VALUE_OFFSET = PAGE_ID_OFFSET + PAGE_ID_SIZE", "var_name": "VALUE_OFFSET"}, {"original_string": "private static final int VERSION_SIZE = 4;", "modifier": "private static final", "type": "int", "declarator": "VERSION_SIZE = 4", "var_name": "VERSION_SIZE"}, {"original_string": "private static final int VERSION_OFFSET = VALUE_OFFSET + VALUE_SIZE;", "modifier": "private static final", "type": "int", "declarator": "VERSION_OFFSET = VALUE_OFFSET + VALUE_SIZE", "var_name": "VERSION_OFFSET"}, {"original_string": "private static final long EMPTY_PAGE_ID = 0;", "modifier": "private static final", "type": "long", "declarator": "EMPTY_PAGE_ID = 0", "var_name": "EMPTY_PAGE_ID"}, {"original_string": "private static final int EMPTY_CACHE_GRP_ID = 0;", "modifier": "private static final", "type": "int", "declarator": "EMPTY_CACHE_GRP_ID = 0", "var_name": "EMPTY_CACHE_GRP_ID"}, {"original_string": "private static final int BYTES_PER_CELL = IDEAL_BUCKET_SIZE\n        + GRP_ID_SIZE + PAGE_ID_SIZE\n        + VALUE_SIZE + VERSION_SIZE\n        + CELL_PADDING;", "modifier": "private static final", "type": "int", "declarator": "BYTES_PER_CELL = IDEAL_BUCKET_SIZE\n        + GRP_ID_SIZE + PAGE_ID_SIZE\n        + VALUE_SIZE + VERSION_SIZE\n        + CELL_PADDING", "var_name": "BYTES_PER_CELL"}, {"original_string": "private final int numBuckets;", "modifier": "private final", "type": "int", "declarator": "numBuckets", "var_name": "numBuckets"}, {"original_string": "private long baseAddr;", "modifier": "private", "type": "long", "declarator": "baseAddr", "var_name": "baseAddr"}], "methods": [{"identifier": "requiredMemory", "parameters": "(long elementsCnt)", "modifiers": "public static", "return": "long", "signature": "long requiredMemory(long elementsCnt)", "full_signature": "public static long requiredMemory(long elementsCnt)", "class_method_signature": "RobinHoodBackwardShiftHashMap.requiredMemory(long elementsCnt)", "testcase": false, "constructor": false}, {"identifier": "requiredMemoryByBuckets", "parameters": "(long numBuckets)", "modifiers": "static", "return": "long", "signature": "long requiredMemoryByBuckets(long numBuckets)", "full_signature": "static long requiredMemoryByBuckets(long numBuckets)", "class_method_signature": "RobinHoodBackwardShiftHashMap.requiredMemoryByBuckets(long numBuckets)", "testcase": false, "constructor": false}, {"identifier": "RobinHoodBackwardShiftHashMap", "parameters": "(long baseAddr, long size)", "modifiers": "public", "return": "", "signature": " RobinHoodBackwardShiftHashMap(long baseAddr, long size)", "full_signature": "public  RobinHoodBackwardShiftHashMap(long baseAddr, long size)", "class_method_signature": "RobinHoodBackwardShiftHashMap.RobinHoodBackwardShiftHashMap(long baseAddr, long size)", "testcase": false, "constructor": true}, {"identifier": "entryBase", "parameters": "(int idx)", "modifiers": "private", "return": "long", "signature": "long entryBase(int idx)", "full_signature": "private long entryBase(int idx)", "class_method_signature": "RobinHoodBackwardShiftHashMap.entryBase(int idx)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(int grpId, long pageId, int reqVer, long absent, long outdated)", "modifiers": "@Override public", "return": "long", "signature": "long get(int grpId, long pageId, int reqVer, long absent, long outdated)", "full_signature": "@Override public long get(int grpId, long pageId, int reqVer, long absent, long outdated)", "class_method_signature": "RobinHoodBackwardShiftHashMap.get(int grpId, long pageId, int reqVer, long absent, long outdated)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(int grpId, long pageId, long val, int ver)", "modifiers": "@Override public", "return": "void", "signature": "void put(int grpId, long pageId, long val, int ver)", "full_signature": "@Override public void put(int grpId, long pageId, long val, int ver)", "class_method_signature": "RobinHoodBackwardShiftHashMap.put(int grpId, long pageId, long val, int ver)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(int grpId, long pageId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean remove(int grpId, long pageId)", "full_signature": "@Override public boolean remove(int grpId, long pageId)", "class_method_signature": "RobinHoodBackwardShiftHashMap.remove(int grpId, long pageId)", "testcase": false, "constructor": false}, {"identifier": "doBackwardShift", "parameters": "(int idxRmv)", "modifiers": "private", "return": "void", "signature": "void doBackwardShift(int idxRmv)", "full_signature": "private void doBackwardShift(int idxRmv)", "class_method_signature": "RobinHoodBackwardShiftHashMap.doBackwardShift(int idxRmv)", "testcase": false, "constructor": false}, {"identifier": "getNearestAt", "parameters": "(final int idxStart)", "modifiers": "@Override public", "return": "ReplaceCandidate", "signature": "ReplaceCandidate getNearestAt(final int idxStart)", "full_signature": "@Override public ReplaceCandidate getNearestAt(final int idxStart)", "class_method_signature": "RobinHoodBackwardShiftHashMap.getNearestAt(final int idxStart)", "testcase": false, "constructor": false}, {"identifier": "isEmptyAt", "parameters": "(int idx)", "modifiers": "private", "return": "boolean", "signature": "boolean isEmptyAt(int idx)", "full_signature": "private boolean isEmptyAt(int idx)", "class_method_signature": "RobinHoodBackwardShiftHashMap.isEmptyAt(int idx)", "testcase": false, "constructor": false}, {"identifier": "refresh", "parameters": "(int grpId, long pageId, int ver)", "modifiers": "@Override public", "return": "long", "signature": "long refresh(int grpId, long pageId, int ver)", "full_signature": "@Override public long refresh(int grpId, long pageId, int ver)", "class_method_signature": "RobinHoodBackwardShiftHashMap.refresh(int grpId, long pageId, int ver)", "testcase": false, "constructor": false}, {"identifier": "removeIf", "parameters": "(int startIdxToClear, int endIdxToClear, KeyPredicate keyPred)", "modifiers": "@Override public", "return": "GridLongList", "signature": "GridLongList removeIf(int startIdxToClear, int endIdxToClear, KeyPredicate keyPred)", "full_signature": "@Override public GridLongList removeIf(int startIdxToClear, int endIdxToClear, KeyPredicate keyPred)", "class_method_signature": "RobinHoodBackwardShiftHashMap.removeIf(int startIdxToClear, int endIdxToClear, KeyPredicate keyPred)", "testcase": false, "constructor": false}, {"identifier": "capacity", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int capacity()", "full_signature": "@Override public int capacity()", "class_method_signature": "RobinHoodBackwardShiftHashMap.capacity()", "testcase": false, "constructor": false}, {"identifier": "distance", "parameters": "(int curr, int baseIdx)", "modifiers": "private", "return": "int", "signature": "int distance(int curr, int baseIdx)", "full_signature": "private int distance(int curr, int baseIdx)", "class_method_signature": "RobinHoodBackwardShiftHashMap.distance(int curr, int baseIdx)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(int grpId, long pageId)", "modifiers": "private", "return": "boolean", "signature": "boolean isEmpty(int grpId, long pageId)", "full_signature": "private boolean isEmpty(int grpId, long pageId)", "class_method_signature": "RobinHoodBackwardShiftHashMap.isEmpty(int grpId, long pageId)", "testcase": false, "constructor": false}, {"identifier": "setEmpty", "parameters": "(long addr)", "modifiers": "private", "return": "void", "signature": "void setEmpty(long addr)", "full_signature": "private void setEmpty(long addr)", "class_method_signature": "RobinHoodBackwardShiftHashMap.setEmpty(long addr)", "testcase": false, "constructor": false}, {"identifier": "setIdealBucket", "parameters": "(long base, int idxIdeal)", "modifiers": "private", "return": "void", "signature": "void setIdealBucket(long base, int idxIdeal)", "full_signature": "private void setIdealBucket(long base, int idxIdeal)", "class_method_signature": "RobinHoodBackwardShiftHashMap.setIdealBucket(long base, int idxIdeal)", "testcase": false, "constructor": false}, {"identifier": "dump", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String dump()", "full_signature": "public String dump()", "class_method_signature": "RobinHoodBackwardShiftHashMap.dump()", "testcase": false, "constructor": false}, {"identifier": "dumpEntry", "parameters": "(int idx)", "modifiers": "private", "return": "String", "signature": "String dumpEntry(int idx)", "full_signature": "private String dumpEntry(int idx)", "class_method_signature": "RobinHoodBackwardShiftHashMap.dumpEntry(int idx)", "testcase": false, "constructor": false}, {"identifier": "dumpEntry", "parameters": "(StringBuilder sb, int idx)", "modifiers": "private", "return": "void", "signature": "void dumpEntry(StringBuilder sb, int idx)", "full_signature": "private void dumpEntry(StringBuilder sb, int idx)", "class_method_signature": "RobinHoodBackwardShiftHashMap.dumpEntry(StringBuilder sb, int idx)", "testcase": false, "constructor": false}, {"identifier": "setCellValue", "parameters": "(long base, int idealBucket, int grpId, long pageId, long val, int ver)", "modifiers": "private", "return": "void", "signature": "void setCellValue(long base, int idealBucket, int grpId, long pageId, long val, int ver)", "full_signature": "private void setCellValue(long base, int idealBucket, int grpId, long pageId, long val, int ver)", "class_method_signature": "RobinHoodBackwardShiftHashMap.setCellValue(long base, int idealBucket, int grpId, long pageId, long val, int ver)", "testcase": false, "constructor": false}, {"identifier": "getIdealBucket", "parameters": "(long base)", "modifiers": "private", "return": "int", "signature": "int getIdealBucket(long base)", "full_signature": "private int getIdealBucket(long base)", "class_method_signature": "RobinHoodBackwardShiftHashMap.getIdealBucket(long base)", "testcase": false, "constructor": false}, {"identifier": "getPageId", "parameters": "(long base)", "modifiers": "private", "return": "long", "signature": "long getPageId(long base)", "full_signature": "private long getPageId(long base)", "class_method_signature": "RobinHoodBackwardShiftHashMap.getPageId(long base)", "testcase": false, "constructor": false}, {"identifier": "setPageId", "parameters": "(long base, long pageId)", "modifiers": "private", "return": "void", "signature": "void setPageId(long base, long pageId)", "full_signature": "private void setPageId(long base, long pageId)", "class_method_signature": "RobinHoodBackwardShiftHashMap.setPageId(long base, long pageId)", "testcase": false, "constructor": false}, {"identifier": "getGrpId", "parameters": "(long base)", "modifiers": "private", "return": "int", "signature": "int getGrpId(long base)", "full_signature": "private int getGrpId(long base)", "class_method_signature": "RobinHoodBackwardShiftHashMap.getGrpId(long base)", "testcase": false, "constructor": false}, {"identifier": "setGrpId", "parameters": "(long base, int grpId)", "modifiers": "private", "return": "void", "signature": "void setGrpId(long base, int grpId)", "full_signature": "private void setGrpId(long base, int grpId)", "class_method_signature": "RobinHoodBackwardShiftHashMap.setGrpId(long base, int grpId)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(long base)", "modifiers": "private", "return": "long", "signature": "long getValue(long base)", "full_signature": "private long getValue(long base)", "class_method_signature": "RobinHoodBackwardShiftHashMap.getValue(long base)", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(long base, long val)", "modifiers": "private", "return": "void", "signature": "void setValue(long base, long val)", "full_signature": "private void setValue(long base, long val)", "class_method_signature": "RobinHoodBackwardShiftHashMap.setValue(long base, long val)", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "(long base)", "modifiers": "private", "return": "int", "signature": "int getVersion(long base)", "full_signature": "private int getVersion(long base)", "class_method_signature": "RobinHoodBackwardShiftHashMap.getVersion(long base)", "testcase": false, "constructor": false}, {"identifier": "setVersion", "parameters": "(long base, int ver)", "modifiers": "private", "return": "void", "signature": "void setVersion(long base, int ver)", "full_signature": "private void setVersion(long base, int ver)", "class_method_signature": "RobinHoodBackwardShiftHashMap.setVersion(long base, int ver)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public final", "return": "int", "signature": "int size()", "full_signature": "@Override public final int size()", "class_method_signature": "RobinHoodBackwardShiftHashMap.size()", "testcase": false, "constructor": false}, {"identifier": "setSize", "parameters": "(int sz)", "modifiers": "private", "return": "void", "signature": "void setSize(int sz)", "full_signature": "private void setSize(int sz)", "class_method_signature": "RobinHoodBackwardShiftHashMap.setSize(int sz)", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(BiConsumer<FullPageId, Long> act)", "modifiers": "@Override public", "return": "void", "signature": "void forEach(BiConsumer<FullPageId, Long> act)", "full_signature": "@Override public void forEach(BiConsumer<FullPageId, Long> act)", "class_method_signature": "RobinHoodBackwardShiftHashMap.forEach(BiConsumer<FullPageId, Long> act)", "testcase": false, "constructor": false}, {"identifier": "getFullPageId", "parameters": "(long base)", "modifiers": "@NotNull private", "return": "FullPageId", "signature": "FullPageId getFullPageId(long base)", "full_signature": "@NotNull private FullPageId getFullPageId(long base)", "class_method_signature": "RobinHoodBackwardShiftHashMap.getFullPageId(long base)", "testcase": false, "constructor": false}], "file": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/RobinHoodBackwardShiftHashMap.java"}, "focal_method": {"identifier": "put", "parameters": "(int grpId, long pageId, long val, int ver)", "modifiers": "@Override public", "return": "void", "body": "@Override public void put(int grpId, long pageId, long val, int ver) {\n        assert grpId != 0;\n\n        // initial index is also ideal for inserted element\n        int idxInit = U.safeAbs(FullPageId.hashCode(grpId, pageId)) % numBuckets;\n\n        int swapCnt = 0;\n\n        int grpIdToInsert = grpId;\n        long pageIdToInsert = pageId;\n        long valToInsert = val;\n        int verToInsert = ver;\n        int idxIdealToInsert = idxInit;\n\n        for (int i = 0; i < numBuckets; i++) {\n            int idxCurr = (idxInit + i) % numBuckets;\n\n            final long base = entryBase(idxCurr);\n            final int dibEntryToInsert = distance(idxCurr, idxInit);\n\n            final int curGrpId = getGrpId(base);\n            final long curPageId = getPageId(base);\n            final int curIdealBucket = getIdealBucket(base);\n            final long curVal = getValue(base);\n            final int curVer = getVersion(base);\n            final int dibCurEntry = distance(idxCurr, curIdealBucket);\n\n            if (isEmpty(curGrpId, curPageId)) {\n                setCellValue(base, idxIdealToInsert, grpIdToInsert, pageIdToInsert, valToInsert, verToInsert);\n\n                setSize(size() + 1);\n\n                return;\n            }\n            else if (curGrpId == grpIdToInsert && curPageId == pageIdToInsert) {\n                if (swapCnt != 0)\n                    throw new IllegalStateException(\"Swapped \" + swapCnt + \" times. Entry: \" + dumpEntry(idxCurr));\n\n                setValue(base, valToInsert);\n\n                return; //equal value found\n            }\n            else if (dibCurEntry < dibEntryToInsert) {\n                //swapping *toInsert and state in bucket: save cur state to bucket\n                setCellValue(base, idxIdealToInsert, grpIdToInsert, pageIdToInsert, valToInsert, verToInsert);\n\n                idxIdealToInsert = curIdealBucket;\n                pageIdToInsert = curPageId;\n                grpIdToInsert = curGrpId;\n                valToInsert = curVal;\n                verToInsert = curVer;\n\n                swapCnt++;\n            }\n        }\n\n        // no free space left\n        throw new IgniteOutOfMemoryException(\"No room for a new key\");\n    }", "signature": "void put(int grpId, long pageId, long val, int ver)", "full_signature": "@Override public void put(int grpId, long pageId, long val, int ver)", "class_method_signature": "RobinHoodBackwardShiftHashMap.put(int grpId, long pageId, long val, int ver)", "testcase": false, "constructor": false, "invocations": ["safeAbs", "hashCode", "entryBase", "distance", "getGrpId", "getPageId", "getIdealBucket", "getValue", "getVersion", "distance", "isEmpty", "setCellValue", "setSize", "size", "dumpEntry", "setValue", "setCellValue"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}