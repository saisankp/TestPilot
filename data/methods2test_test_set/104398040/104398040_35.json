{"test_class": {"identifier": "TransformationTemplateTest", "superclass": "extends TestHelper", "interfaces": "", "fields": [], "file": "butterfly-extensions-api/src/test/java/com/paypal/butterfly/extensions/api/TransformationTemplateTest.java"}, "test_case": {"identifier": "addMultipleTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void addMultipleTest() {\n        TransformationTemplate transformationTemplate = getNewTestTransformationTemplate();\n        TransformationOperation<TransformationOperation> transformationOperation = getNewTestTransformationOperation();\n\n        assertEquals(transformationTemplate.addMultiple(transformationOperation), \"NO_EXTENSION:AnonymousTransformationTemplate-1-MultipleOperations\");\n        assertEquals(transformationTemplate.getUtilities().size(), 1);\n\n        MultipleOperations multipleOperations = (MultipleOperations) transformationTemplate.getUtilities().get(0);\n        assertEquals(multipleOperations.getTemplateOperation(), transformationOperation);\n        assertEquals(multipleOperations.getFilesAttributes().length, 0);\n        assertNotNull(multipleOperations.getChildren());\n        assertEquals(multipleOperations.getChildren().size(), 0);\n\n        assertEquals(transformationTemplate.addMultiple(transformationOperation, \"ATT\"), \"NO_EXTENSION:AnonymousTransformationTemplate-2-MultipleOperations\");\n        assertEquals(transformationTemplate.getUtilities().size(), 2);\n\n        MultipleOperations multipleOperations2 = (MultipleOperations) transformationTemplate.getUtilities().get(1);\n        assertEquals(multipleOperations2.getTemplateOperation(), transformationOperation);\n        assertEquals(multipleOperations2.getFilesAttributes().length, 1);\n        assertNotNull(multipleOperations2.getChildren());\n        assertEquals(multipleOperations2.getChildren().size(), 0);\n    }", "signature": "void addMultipleTest()", "full_signature": "@Test public void addMultipleTest()", "class_method_signature": "TransformationTemplateTest.addMultipleTest()", "testcase": true, "constructor": false, "invocations": ["getNewTestTransformationTemplate", "getNewTestTransformationOperation", "assertEquals", "addMultiple", "assertEquals", "size", "getUtilities", "get", "getUtilities", "assertEquals", "getTemplateOperation", "assertEquals", "getFilesAttributes", "assertNotNull", "getChildren", "assertEquals", "size", "getChildren", "assertEquals", "addMultiple", "assertEquals", "size", "getUtilities", "get", "getUtilities", "assertEquals", "getTemplateOperation", "assertEquals", "getFilesAttributes", "assertNotNull", "getChildren", "assertEquals", "size", "getChildren"]}, "focal_class": {"identifier": "TransformationTemplate", "superclass": "", "interfaces": "implements TransformationUtilityList", "fields": [{"original_string": "public static final String BASELINE = \"BASELINE_APPLICATION_LOCATION\";", "modifier": "public static final", "type": "String", "declarator": "BASELINE = \"BASELINE_APPLICATION_LOCATION\"", "var_name": "BASELINE"}, {"original_string": "private List<TransformationUtility> utilityList = new ArrayList<>();", "modifier": "private", "type": "List<TransformationUtility>", "declarator": "utilityList = new ArrayList<>()", "var_name": "utilityList"}, {"original_string": "private Set<String> utilityNames = new HashSet<>();", "modifier": "private", "type": "Set<String>", "declarator": "utilityNames = new HashSet<>()", "var_name": "utilityNames"}, {"original_string": "private String name;", "modifier": "private", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private boolean blank = false;", "modifier": "private", "type": "boolean", "declarator": "blank = false", "var_name": "blank"}], "methods": [{"identifier": "TransformationTemplate", "parameters": "()", "modifiers": "public", "return": "", "signature": " TransformationTemplate()", "full_signature": "public  TransformationTemplate()", "class_method_signature": "TransformationTemplate.TransformationTemplate()", "testcase": false, "constructor": true}, {"identifier": "setName", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setName()", "full_signature": "private void setName()", "class_method_signature": "TransformationTemplate.setName()", "testcase": false, "constructor": false}, {"identifier": "getExtensionClass", "parameters": "()", "modifiers": "public abstract", "return": "Class<? extends Extension>", "signature": "Class<? extends Extension> getExtensionClass()", "full_signature": "public abstract Class<? extends Extension> getExtensionClass()", "class_method_signature": "TransformationTemplate.getExtensionClass()", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "public abstract", "return": "String", "signature": "String getDescription()", "full_signature": "public abstract String getDescription()", "class_method_signature": "TransformationTemplate.getDescription()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(TransformationUtility utility)", "modifiers": "@Override public final", "return": "String", "signature": "String add(TransformationUtility utility)", "full_signature": "@Override public final String add(TransformationUtility utility)", "class_method_signature": "TransformationTemplate.add(TransformationUtility utility)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(TransformationUtility utility, String utilityName)", "modifiers": "@Override public final", "return": "String", "signature": "String add(TransformationUtility utility, String utilityName)", "full_signature": "@Override public final String add(TransformationUtility utility, String utilityName)", "class_method_signature": "TransformationTemplate.add(TransformationUtility utility, String utilityName)", "testcase": false, "constructor": false}, {"identifier": "addMultiple", "parameters": "(TransformationOperation templateOperation, String... attributes)", "modifiers": "@Override public final", "return": "String", "signature": "String addMultiple(TransformationOperation templateOperation, String... attributes)", "full_signature": "@Override public final String addMultiple(TransformationOperation templateOperation, String... attributes)", "class_method_signature": "TransformationTemplate.addMultiple(TransformationOperation templateOperation, String... attributes)", "testcase": false, "constructor": false}, {"identifier": "loop", "parameters": "(TransformationUtility utility, int iterations)", "modifiers": "public final", "return": "String", "signature": "String loop(TransformationUtility utility, int iterations)", "full_signature": "public final String loop(TransformationUtility utility, int iterations)", "class_method_signature": "TransformationTemplate.loop(TransformationUtility utility, int iterations)", "testcase": false, "constructor": false}, {"identifier": "loop", "parameters": "(TransformationUtility utility, String attribute)", "modifiers": "public final", "return": "String", "signature": "String loop(TransformationUtility utility, String attribute)", "full_signature": "public final String loop(TransformationUtility utility, String attribute)", "class_method_signature": "TransformationTemplate.loop(TransformationUtility utility, String attribute)", "testcase": false, "constructor": false}, {"identifier": "loop", "parameters": "(TransformationUtility utility, UtilityCondition condition)", "modifiers": "public final", "return": "String", "signature": "String loop(TransformationUtility utility, UtilityCondition condition)", "full_signature": "public final String loop(TransformationUtility utility, UtilityCondition condition)", "class_method_signature": "TransformationTemplate.loop(TransformationUtility utility, UtilityCondition condition)", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "(String logMessage)", "modifiers": "@Deprecated @Override public final", "return": "void", "signature": "void log(String logMessage)", "full_signature": "@Deprecated @Override public final void log(String logMessage)", "class_method_signature": "TransformationTemplate.log(String logMessage)", "testcase": false, "constructor": false}, {"identifier": "info", "parameters": "(String infoMessage)", "modifiers": "@Override public final", "return": "void", "signature": "void info(String infoMessage)", "full_signature": "@Override public final void info(String infoMessage)", "class_method_signature": "TransformationTemplate.info(String infoMessage)", "testcase": false, "constructor": false}, {"identifier": "debug", "parameters": "(String debugMessage)", "modifiers": "@Override public final", "return": "void", "signature": "void debug(String debugMessage)", "full_signature": "@Override public final void debug(String debugMessage)", "class_method_signature": "TransformationTemplate.debug(String debugMessage)", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "(Level logLevel, String logMessage)", "modifiers": "@Override public final", "return": "void", "signature": "void log(Level logLevel, String logMessage)", "full_signature": "@Override public final void log(Level logLevel, String logMessage)", "class_method_signature": "TransformationTemplate.log(Level logLevel, String logMessage)", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "(String logMessage, String... attributeNames)", "modifiers": "@Deprecated @Override public final", "return": "void", "signature": "void log(String logMessage, String... attributeNames)", "full_signature": "@Deprecated @Override public final void log(String logMessage, String... attributeNames)", "class_method_signature": "TransformationTemplate.log(String logMessage, String... attributeNames)", "testcase": false, "constructor": false}, {"identifier": "info", "parameters": "(String infoMessage, String... attributeNames)", "modifiers": "@Override public final", "return": "void", "signature": "void info(String infoMessage, String... attributeNames)", "full_signature": "@Override public final void info(String infoMessage, String... attributeNames)", "class_method_signature": "TransformationTemplate.info(String infoMessage, String... attributeNames)", "testcase": false, "constructor": false}, {"identifier": "debug", "parameters": "(String debugMessage, String... attributeNames)", "modifiers": "@Override public final", "return": "void", "signature": "void debug(String debugMessage, String... attributeNames)", "full_signature": "@Override public final void debug(String debugMessage, String... attributeNames)", "class_method_signature": "TransformationTemplate.debug(String debugMessage, String... attributeNames)", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "(Level logLevel, String logMessage, String... attributeNames)", "modifiers": "@Override public final", "return": "void", "signature": "void log(Level logLevel, String logMessage, String... attributeNames)", "full_signature": "@Override public final void log(Level logLevel, String logMessage, String... attributeNames)", "class_method_signature": "TransformationTemplate.log(Level logLevel, String logMessage, String... attributeNames)", "testcase": false, "constructor": false}, {"identifier": "getUtilities", "parameters": "()", "modifiers": "@Override public final", "return": "List<TransformationUtility>", "signature": "List<TransformationUtility> getUtilities()", "full_signature": "@Override public final List<TransformationUtility> getUtilities()", "class_method_signature": "TransformationTemplate.getUtilities()", "testcase": false, "constructor": false}, {"identifier": "getChildren", "parameters": "()", "modifiers": "@Override public", "return": "List<TransformationUtility>", "signature": "List<TransformationUtility> getChildren()", "full_signature": "@Override public List<TransformationUtility> getChildren()", "class_method_signature": "TransformationTemplate.getChildren()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public final", "return": "String", "signature": "String getName()", "full_signature": "@Override public final String getName()", "class_method_signature": "TransformationTemplate.getName()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public final", "return": "String", "signature": "String toString()", "full_signature": "@Override public final String toString()", "class_method_signature": "TransformationTemplate.toString()", "testcase": false, "constructor": false}, {"identifier": "getApplicationType", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getApplicationType()", "full_signature": "public String getApplicationType()", "class_method_signature": "TransformationTemplate.getApplicationType()", "testcase": false, "constructor": false}, {"identifier": "getApplicationName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getApplicationName()", "full_signature": "public String getApplicationName()", "class_method_signature": "TransformationTemplate.getApplicationName()", "testcase": false, "constructor": false}, {"identifier": "getSimpleClassName", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getSimpleClassName()", "full_signature": "protected String getSimpleClassName()", "class_method_signature": "TransformationTemplate.getSimpleClassName()", "testcase": false, "constructor": false}, {"identifier": "setBlank", "parameters": "(boolean blank)", "modifiers": "public", "return": "void", "signature": "void setBlank(boolean blank)", "full_signature": "public void setBlank(boolean blank)", "class_method_signature": "TransformationTemplate.setBlank(boolean blank)", "testcase": false, "constructor": false}, {"identifier": "isBlank", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isBlank()", "full_signature": "public boolean isBlank()", "class_method_signature": "TransformationTemplate.isBlank()", "testcase": false, "constructor": false}], "file": "butterfly-extensions-api/src/main/java/com/paypal/butterfly/extensions/api/TransformationTemplate.java"}, "focal_method": {"identifier": "addMultiple", "parameters": "(TransformationOperation templateOperation, String... attributes)", "modifiers": "@Override public final", "return": "String", "body": "@Override\n    public final String addMultiple(TransformationOperation templateOperation, String... attributes) {\n        return add(new MultipleOperations(templateOperation).setFiles(attributes));\n    }", "signature": "String addMultiple(TransformationOperation templateOperation, String... attributes)", "full_signature": "@Override public final String addMultiple(TransformationOperation templateOperation, String... attributes)", "class_method_signature": "TransformationTemplate.addMultiple(TransformationOperation templateOperation, String... attributes)", "testcase": false, "constructor": false, "invocations": ["add", "setFiles"]}, "repository": {"repo_id": 104398040, "url": "https://github.com/paypal/butterfly", "language": "Java", "is_fork": false, "fork_count": 42, "stargazer_count": 26, "size": 6906, "license": "licensed"}}