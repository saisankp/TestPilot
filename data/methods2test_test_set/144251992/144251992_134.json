{"test_class": {"identifier": "ProjectionServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private NamedProjection namedProjectionAnnotationMock;", "modifier": "@Mock\n    private", "type": "NamedProjection", "declarator": "namedProjectionAnnotationMock", "var_name": "namedProjectionAnnotationMock"}, {"original_string": "@Mock\n    private AnnotatedTypeScanner typeScannerMock;", "modifier": "@Mock\n    private", "type": "AnnotatedTypeScanner", "declarator": "typeScannerMock", "var_name": "typeScannerMock"}, {"original_string": "@Mock\n    private AnnotationUtilsWrapper annotationUtilsWrapperMock;", "modifier": "@Mock\n    private", "type": "AnnotationUtilsWrapper", "declarator": "annotationUtilsWrapperMock", "var_name": "annotationUtilsWrapperMock"}, {"original_string": "private Class annotatedClass;", "modifier": "private", "type": "Class", "declarator": "annotatedClass", "var_name": "annotatedClass"}, {"original_string": "private ProjectionService projectionService;", "modifier": "private", "type": "ProjectionService", "declarator": "projectionService", "var_name": "projectionService"}], "file": "backend/project-board/src/test/java/de/adesso/projectboard/base/projection/ProjectionServiceTest.java"}, "test_case": {"identifier": "addProjectionInterfacesAddsProjectionInterfaces", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void addProjectionInterfacesAddsProjectionInterfaces() throws MultipleDefaultProjectionsException, MultipleSimilarlyNamedProjectionsException {\n        // given\n        var expectedName = \"name\";\n        var expectedTarget = (Class) Integer.class;\n        var expectedBasePackage = \"de/test\";\n\n        given(typeScannerMock.findTypes(expectedBasePackage)).willReturn(Set.of(annotatedClass));\n\n        given(annotationUtilsWrapperMock.findAnnotation(annotatedClass, NamedProjection.class))\n                .willReturn(namedProjectionAnnotationMock);\n\n        given(namedProjectionAnnotationMock.target())\n                .willReturn(expectedTarget);\n        given(namedProjectionAnnotationMock.name())\n                .willReturn(expectedName);\n        given(namedProjectionAnnotationMock.defaultProjection())\n                .willReturn(true);\n\n        // when\n        projectionService.addProjectionInterfaces(expectedBasePackage);\n\n        // then\n        var softly = new SoftAssertions();\n\n        softly.assertThat(projectionService.projectionClassMap)\n                .containsExactly(entry(Pair.of(expectedName, expectedTarget), (Class<?>) annotatedClass));\n\n        softly.assertThat(projectionService.defaultProjectionClassMap)\n                .containsExactly(entry((Class<?>) expectedTarget, (Class<?>) annotatedClass));\n\n        softly.assertAll();\n    }", "signature": "void addProjectionInterfacesAddsProjectionInterfaces()", "full_signature": "@Test public void addProjectionInterfacesAddsProjectionInterfaces()", "class_method_signature": "ProjectionServiceTest.addProjectionInterfacesAddsProjectionInterfaces()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "findTypes", "of", "willReturn", "given", "findAnnotation", "willReturn", "given", "target", "willReturn", "given", "name", "willReturn", "given", "defaultProjection", "addProjectionInterfaces", "containsExactly", "assertThat", "entry", "of", "containsExactly", "assertThat", "entry", "assertAll"]}, "focal_class": {"identifier": "ProjectionService", "superclass": "", "interfaces": "implements InitializingBean", "fields": [{"original_string": "private final String BASE_PACKAGE = \"de/adesso/projectboard/base\";", "modifier": "private final", "type": "String", "declarator": "BASE_PACKAGE = \"de/adesso/projectboard/base\"", "var_name": "BASE_PACKAGE"}, {"original_string": "private final AnnotatedTypeScanner typeScanner;", "modifier": "private final", "type": "AnnotatedTypeScanner", "declarator": "typeScanner", "var_name": "typeScanner"}, {"original_string": "private final AnnotationUtilsWrapper annotationUtilsWrapper;", "modifier": "private final", "type": "AnnotationUtilsWrapper", "declarator": "annotationUtilsWrapper", "var_name": "annotationUtilsWrapper"}, {"original_string": "final Map<Pair<String, Class<?>>, Class<?>> projectionClassMap;", "modifier": "final", "type": "Map<Pair<String, Class<?>>, Class<?>>", "declarator": "projectionClassMap", "var_name": "projectionClassMap"}, {"original_string": "final Map<Class<?>, Class<?>> defaultProjectionClassMap;", "modifier": "final", "type": "Map<Class<?>, Class<?>>", "declarator": "defaultProjectionClassMap", "var_name": "defaultProjectionClassMap"}], "methods": [{"identifier": "ProjectionService", "parameters": "(AnnotatedTypeScanner typeScanner, AnnotationUtilsWrapper annotationUtilsWrapper)", "modifiers": "@Autowired public", "return": "", "signature": " ProjectionService(AnnotatedTypeScanner typeScanner, AnnotationUtilsWrapper annotationUtilsWrapper)", "full_signature": "@Autowired public  ProjectionService(AnnotatedTypeScanner typeScanner, AnnotationUtilsWrapper annotationUtilsWrapper)", "class_method_signature": "ProjectionService.ProjectionService(AnnotatedTypeScanner typeScanner, AnnotationUtilsWrapper annotationUtilsWrapper)", "testcase": false, "constructor": true}, {"identifier": "getByNameOrDefault", "parameters": "(@NonNull String projectionName, @NonNull Class<?> projectionTarget)", "modifiers": "public", "return": "Class<?>", "signature": "Class<?> getByNameOrDefault(@NonNull String projectionName, @NonNull Class<?> projectionTarget)", "full_signature": "public Class<?> getByNameOrDefault(@NonNull String projectionName, @NonNull Class<?> projectionTarget)", "class_method_signature": "ProjectionService.getByNameOrDefault(@NonNull String projectionName, @NonNull Class<?> projectionTarget)", "testcase": false, "constructor": false}, {"identifier": "getDefault", "parameters": "(Class<?> projectionTarget)", "modifiers": "public", "return": "Class<?>", "signature": "Class<?> getDefault(Class<?> projectionTarget)", "full_signature": "public Class<?> getDefault(Class<?> projectionTarget)", "class_method_signature": "ProjectionService.getDefault(Class<?> projectionTarget)", "testcase": false, "constructor": false}, {"identifier": "addProjectionInterfaces", "parameters": "(String basePackage)", "modifiers": "", "return": "void", "signature": "void addProjectionInterfaces(String basePackage)", "full_signature": " void addProjectionInterfaces(String basePackage)", "class_method_signature": "ProjectionService.addProjectionInterfaces(String basePackage)", "testcase": false, "constructor": false}, {"identifier": "getAnnotatedInterfaces", "parameters": "(String basePackage)", "modifiers": "", "return": "Set<Class<?>>", "signature": "Set<Class<?>> getAnnotatedInterfaces(String basePackage)", "full_signature": " Set<Class<?>> getAnnotatedInterfaces(String basePackage)", "class_method_signature": "ProjectionService.getAnnotatedInterfaces(String basePackage)", "testcase": false, "constructor": false}, {"identifier": "addProjectionInterface", "parameters": "(NamedProjection annotation, Class<?> annotatedInterface)", "modifiers": "", "return": "void", "signature": "void addProjectionInterface(NamedProjection annotation, Class<?> annotatedInterface)", "full_signature": " void addProjectionInterface(NamedProjection annotation, Class<?> annotatedInterface)", "class_method_signature": "ProjectionService.addProjectionInterface(NamedProjection annotation, Class<?> annotatedInterface)", "testcase": false, "constructor": false}, {"identifier": "getProjectionName", "parameters": "(NamedProjection annotation, Class<?> projectionInterface)", "modifiers": "", "return": "String", "signature": "String getProjectionName(NamedProjection annotation, Class<?> projectionInterface)", "full_signature": " String getProjectionName(NamedProjection annotation, Class<?> projectionInterface)", "class_method_signature": "ProjectionService.getProjectionName(NamedProjection annotation, Class<?> projectionInterface)", "testcase": false, "constructor": false}, {"identifier": "afterPropertiesSet", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void afterPropertiesSet()", "full_signature": "@Override public void afterPropertiesSet()", "class_method_signature": "ProjectionService.afterPropertiesSet()", "testcase": false, "constructor": false}], "file": "backend/project-board/src/main/java/de/adesso/projectboard/base/projection/ProjectionService.java"}, "focal_method": {"identifier": "addProjectionInterfaces", "parameters": "(String basePackage)", "modifiers": "", "return": "void", "body": "void addProjectionInterfaces(String basePackage) throws MultipleDefaultProjectionsException, MultipleSimilarlyNamedProjectionsException {\n        for(var annotatedInterface : getAnnotatedInterfaces(basePackage)) {\n            var annotation = annotationUtilsWrapper.findAnnotation(annotatedInterface, NamedProjection.class);\n            addProjectionInterface(annotation, annotatedInterface);\n        }\n    }", "signature": "void addProjectionInterfaces(String basePackage)", "full_signature": " void addProjectionInterfaces(String basePackage)", "class_method_signature": "ProjectionService.addProjectionInterfaces(String basePackage)", "testcase": false, "constructor": false, "invocations": ["getAnnotatedInterfaces", "findAnnotation", "addProjectionInterface"]}, "repository": {"repo_id": 144251992, "url": "https://github.com/adessoAG/project-board", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 2608, "license": "licensed"}}