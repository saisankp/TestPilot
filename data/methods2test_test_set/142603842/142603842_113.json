{"test_class": {"identifier": "DistanceTest", "superclass": "", "interfaces": "", "fields": [], "file": "optaweb-vehicle-routing-backend/src/test/java/org/optaweb/vehiclerouting/domain/DistanceTest.java"}, "test_case": {"identifier": "toString_should_contain_units_and_be_human_readable", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void toString_should_contain_units_and_be_human_readable() {\n        assertThat(Distance.ofMillis(3600_000 * 37 + 60_000 * 3 + 24_000)).hasToString(\"37h 3m 24s 0ms\");\n        assertThat(Distance.ofMillis(3601_000)).hasToString(\"1h 0m 1s 0ms\");\n        assertThat(Distance.ofMillis(5_123)).hasToString(\"0h 0m 5s 123ms\");\n    }", "signature": "void toString_should_contain_units_and_be_human_readable()", "full_signature": "@Test void toString_should_contain_units_and_be_human_readable()", "class_method_signature": "DistanceTest.toString_should_contain_units_and_be_human_readable()", "testcase": true, "constructor": false, "invocations": ["hasToString", "assertThat", "ofMillis", "hasToString", "assertThat", "ofMillis", "hasToString", "assertThat", "ofMillis"]}, "focal_class": {"identifier": "Distance", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Distance ZERO = Distance.ofMillis(0);", "modifier": "public static final", "type": "Distance", "declarator": "ZERO = Distance.ofMillis(0)", "var_name": "ZERO"}, {"original_string": "private final long millis;", "modifier": "private final", "type": "long", "declarator": "millis", "var_name": "millis"}], "methods": [{"identifier": "ofMillis", "parameters": "(long millis)", "modifiers": "public static", "return": "Distance", "signature": "Distance ofMillis(long millis)", "full_signature": "public static Distance ofMillis(long millis)", "class_method_signature": "Distance.ofMillis(long millis)", "testcase": false, "constructor": false}, {"identifier": "Distance", "parameters": "(long millis)", "modifiers": "private", "return": "", "signature": " Distance(long millis)", "full_signature": "private  Distance(long millis)", "class_method_signature": "Distance.Distance(long millis)", "testcase": false, "constructor": true}, {"identifier": "millis", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long millis()", "full_signature": "public long millis()", "class_method_signature": "Distance.millis()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "Distance.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Distance.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Distance.toString()", "testcase": false, "constructor": false}], "file": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/domain/Distance.java"}, "focal_method": {"identifier": "ofMillis", "parameters": "(long millis)", "modifiers": "public static", "return": "Distance", "body": "public static Distance ofMillis(long millis) {\n        return new Distance(millis);\n    }", "signature": "Distance ofMillis(long millis)", "full_signature": "public static Distance ofMillis(long millis)", "class_method_signature": "Distance.ofMillis(long millis)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 142603842, "url": "https://github.com/kiegroup/optaweb-vehicle-routing", "stars": 42, "created": "7/27/2018 5:08:08 PM +00:00", "updates": "2020-01-27T22:19:48+00:00", "fork": "False", "license": "licensed"}}