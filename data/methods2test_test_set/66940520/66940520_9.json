{"test_class": {"identifier": "ProgramInstanceByTeiHookTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ProgramInstanceByTeiHook hook;", "modifier": "private", "type": "ProgramInstanceByTeiHook", "declarator": "hook", "var_name": "hook"}, {"original_string": "@Mock\n    private ProgramInstanceStore programInstanceStore;", "modifier": "@Mock\n    private", "type": "ProgramInstanceStore", "declarator": "programInstanceStore", "var_name": "programInstanceStore"}, {"original_string": "@Rule\n    public MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}], "file": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/hooks/ProgramInstanceByTeiHookTest.java"}, "test_case": {"identifier": "verifyProgramInstanceAreSetIntoPreheat", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void verifyProgramInstanceAreSetIntoPreheat()\n    {\n        // Given\n        Program program1 = createProgram( 'A' );\n        program1.setUid( CodeGenerator.generateUid() );\n\n        OrganisationUnit ou1 = createOrganisationUnit( 'A' );\n        TrackedEntityInstance t1 = createTrackedEntityInstance( 'A', ou1 );\n        TrackedEntityInstance t2 = createTrackedEntityInstance( 'B', ou1 );\n        TrackedEntityInstance t3 = createTrackedEntityInstance( 'C', ou1 );\n        TrackedEntityInstance t4 = createTrackedEntityInstance( 'D', ou1 );\n\n        ProgramInstance p1 = createProgramInstance( program1 );\n        ProgramInstance p2 = createProgramInstance( program1 );\n        ProgramInstance p3 = createProgramInstance( program1 );\n\n        TrackerPreheatParams params = TrackerPreheatParams.builder().build();\n\n        Event e1 = createEvent( p1, t1 );\n        Event e2 = createEvent( p2, t2 );\n        Event e3 = createEvent( p3, t3 );\n        Event e4 = createEvent( null, program1, t4 );\n\n        params.setEvents( Lists.newArrayList( e1, e2, e3, e4 ) );\n\n        TrackerPreheat trackerPreheat = new TrackerPreheat();\n\n        Map<TrackerIdScheme, Map<String, ProgramInstance>> enrollmentMap = new HashMap<>();\n        Map<String, ProgramInstance> programInstanceMap = new HashMap<>();\n\n        programInstanceMap.put( p1.getUid(), p1 );\n        programInstanceMap.put( p2.getUid(), p2 );\n        programInstanceMap.put( p3.getUid(), p3 );\n\n        enrollmentMap.put( TrackerIdScheme.UID, programInstanceMap );\n        trackerPreheat.setEnrollments( enrollmentMap );\n\n        ProgramInstance p4 = new ProgramInstance();\n        p4.setUid( CodeGenerator.generateUid() );\n        p4.setProgram( program1 );\n        p4.setEntityInstance( t4 );\n\n        when( programInstanceStore.getByProgramAndTrackedEntityInstance( anyList(), eq(ProgramStatus.ACTIVE) ) )\n                .thenReturn( Collections.singletonList( p4 ) );\n\n        // When\n        this.hook.preheat( params, trackerPreheat );\n\n        // Then\n        final Map<String, List<ProgramInstance>> programInstancesByProgramAndTei = trackerPreheat\n                .getProgramInstances();\n        assertThat( programInstancesByProgramAndTei, is( notNullValue() ) );\n        assertThat( programInstancesByProgramAndTei.get( e4.getUid() ), hasSize( 1 ) );\n        assertThat( programInstancesByProgramAndTei.get( e4.getUid() ).get( 0 ), is( p4 ) );\n    }", "signature": "void verifyProgramInstanceAreSetIntoPreheat()", "full_signature": "@Test public void verifyProgramInstanceAreSetIntoPreheat()", "class_method_signature": "ProgramInstanceByTeiHookTest.verifyProgramInstanceAreSetIntoPreheat()", "testcase": true, "constructor": false, "invocations": ["createProgram", "setUid", "generateUid", "createOrganisationUnit", "createTrackedEntityInstance", "createTrackedEntityInstance", "createTrackedEntityInstance", "createTrackedEntityInstance", "createProgramInstance", "createProgramInstance", "createProgramInstance", "build", "builder", "createEvent", "createEvent", "createEvent", "createEvent", "setEvents", "newArrayList", "put", "getUid", "put", "getUid", "put", "getUid", "put", "setEnrollments", "setUid", "generateUid", "setProgram", "setEntityInstance", "thenReturn", "when", "getByProgramAndTrackedEntityInstance", "anyList", "eq", "singletonList", "preheat", "getProgramInstances", "assertThat", "is", "notNullValue", "assertThat", "get", "getUid", "hasSize", "assertThat", "get", "get", "getUid", "is"]}, "focal_class": {"identifier": "ProgramInstanceByTeiHook", "superclass": "", "interfaces": "implements TrackerPreheatHook", "fields": [{"original_string": "private final ProgramInstanceStore programInstanceStore;", "modifier": "private final", "type": "ProgramInstanceStore", "declarator": "programInstanceStore", "var_name": "programInstanceStore"}, {"original_string": "private static final String KEY_SEPARATOR = \"-\";", "modifier": "private static final", "type": "String", "declarator": "KEY_SEPARATOR = \"-\"", "var_name": "KEY_SEPARATOR"}], "methods": [{"identifier": "ProgramInstanceByTeiHook", "parameters": "( ProgramInstanceStore programInstanceStore )", "modifiers": "public", "return": "", "signature": " ProgramInstanceByTeiHook( ProgramInstanceStore programInstanceStore )", "full_signature": "public  ProgramInstanceByTeiHook( ProgramInstanceStore programInstanceStore )", "class_method_signature": "ProgramInstanceByTeiHook.ProgramInstanceByTeiHook( ProgramInstanceStore programInstanceStore )", "testcase": false, "constructor": true}, {"identifier": "preheat", "parameters": "( TrackerPreheatParams params, TrackerPreheat preheat )", "modifiers": "@Override public", "return": "void", "signature": "void preheat( TrackerPreheatParams params, TrackerPreheat preheat )", "full_signature": "@Override public void preheat( TrackerPreheatParams params, TrackerPreheat preheat )", "class_method_signature": "ProgramInstanceByTeiHook.preheat( TrackerPreheatParams params, TrackerPreheat preheat )", "testcase": false, "constructor": false}, {"identifier": "getEventsWithoutProgramInstance", "parameters": "( TrackerPreheatParams params, List<String> enrollmentsUid )", "modifiers": "private", "return": "List<Event>", "signature": "List<Event> getEventsWithoutProgramInstance( TrackerPreheatParams params, List<String> enrollmentsUid )", "full_signature": "private List<Event> getEventsWithoutProgramInstance( TrackerPreheatParams params, List<String> enrollmentsUid )", "class_method_signature": "ProgramInstanceByTeiHook.getEventsWithoutProgramInstance( TrackerPreheatParams params, List<String> enrollmentsUid )", "testcase": false, "constructor": false}, {"identifier": "getProgramInstancesByProgramAndTei", "parameters": "( TrackerPreheat preheat,\n        List<Event> events )", "modifiers": "private", "return": "Map<String, List<ProgramInstance>>", "signature": "Map<String, List<ProgramInstance>> getProgramInstancesByProgramAndTei( TrackerPreheat preheat,\n        List<Event> events )", "full_signature": "private Map<String, List<ProgramInstance>> getProgramInstancesByProgramAndTei( TrackerPreheat preheat,\n        List<Event> events )", "class_method_signature": "ProgramInstanceByTeiHook.getProgramInstancesByProgramAndTei( TrackerPreheat preheat,\n        List<Event> events )", "testcase": false, "constructor": false}, {"identifier": "getProgram", "parameters": "( TrackerPreheat preheat, String uid )", "modifiers": "private", "return": "Program", "signature": "Program getProgram( TrackerPreheat preheat, String uid )", "full_signature": "private Program getProgram( TrackerPreheat preheat, String uid )", "class_method_signature": "ProgramInstanceByTeiHook.getProgram( TrackerPreheat preheat, String uid )", "testcase": false, "constructor": false}, {"identifier": "getTrackedEntityInstance", "parameters": "( TrackerPreheat preheat, String uid )", "modifiers": "private", "return": "TrackedEntityInstance", "signature": "TrackedEntityInstance getTrackedEntityInstance( TrackerPreheat preheat, String uid )", "full_signature": "private TrackedEntityInstance getTrackedEntityInstance( TrackerPreheat preheat, String uid )", "class_method_signature": "ProgramInstanceByTeiHook.getTrackedEntityInstance( TrackerPreheat preheat, String uid )", "testcase": false, "constructor": false}, {"identifier": "makeKey", "parameters": "( ProgramInstance programInstance )", "modifiers": "private", "return": "String", "signature": "String makeKey( ProgramInstance programInstance )", "full_signature": "private String makeKey( ProgramInstance programInstance )", "class_method_signature": "ProgramInstanceByTeiHook.makeKey( ProgramInstance programInstance )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/hooks/ProgramInstanceByTeiHook.java"}, "focal_method": {"identifier": "preheat", "parameters": "( TrackerPreheatParams params, TrackerPreheat preheat )", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void preheat( TrackerPreheatParams params, TrackerPreheat preheat )\n    {\n        final Map<TrackerIdScheme, Map<String, ProgramInstance>> enrollmentsMap = preheat.getEnrollments();\n        final Map<String, ProgramInstance> enrollments = enrollmentsMap.getOrDefault( TrackerIdScheme.UID, new HashMap<>() );\n\n        // List of Events that have no 'enrollment' field or 'enrollment' points to an\n        // invalid PI\n        List<Event> eventWithoutPI = getEventsWithoutProgramInstance( params,\n            enrollments.values().stream().map( BaseIdentifiableObject::getUid ).collect( Collectors.toList() ) );\n\n        if ( isNotEmpty( eventWithoutPI ) )\n        {\n            // Assign the map of event uid -> List Program Instance to the Preheat context\n            preheat.setProgramInstances( getProgramInstancesByProgramAndTei(\n                preheat,\n                eventWithoutPI ) );\n        }\n    }", "signature": "void preheat( TrackerPreheatParams params, TrackerPreheat preheat )", "full_signature": "@Override public void preheat( TrackerPreheatParams params, TrackerPreheat preheat )", "class_method_signature": "ProgramInstanceByTeiHook.preheat( TrackerPreheatParams params, TrackerPreheat preheat )", "testcase": false, "constructor": false, "invocations": ["getEnrollments", "getOrDefault", "getEventsWithoutProgramInstance", "collect", "map", "stream", "values", "toList", "isNotEmpty", "setProgramInstances", "getProgramInstancesByProgramAndTei"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}