{"test_class": {"identifier": "ProductWeightFunctionTest", "superclass": "", "interfaces": "", "fields": [], "file": "mubench/src/test/java/de/tu_darmstadt/stg/mudetect/ranking/ProductWeightFunctionTest.java"}, "test_case": {"identifier": "multipliesWeights", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void multipliesWeights() {\n        Overlap instance = someOverlap();\n        Overlaps overlaps = new Overlaps();\n        Model model = () -> asSet(instance.getPattern());\n\n        ProductWeightFunction weightFunction = new ProductWeightFunction(w((o, os, m) -> 0.5), w((o, os, m) -> 0.5));\n\n        assertThat(weightFunction.getWeight(instance, overlaps, model), is(0.25));\n    }", "signature": "void multipliesWeights()", "full_signature": "@Test public void multipliesWeights()", "class_method_signature": "ProductWeightFunctionTest.multipliesWeights()", "testcase": true, "constructor": false, "invocations": ["someOverlap", "asSet", "getPattern", "w", "w", "assertThat", "getWeight", "is"]}, "focal_class": {"identifier": "ProductWeightFunction", "superclass": "", "interfaces": "implements ViolationWeightFunction", "fields": [{"original_string": "private final ViolationWeightFunction[] factors;", "modifier": "private final", "type": "ViolationWeightFunction[]", "declarator": "factors", "var_name": "factors"}], "methods": [{"identifier": "ProductWeightFunction", "parameters": "(ViolationWeightFunction... factors)", "modifiers": "public", "return": "", "signature": " ProductWeightFunction(ViolationWeightFunction... factors)", "full_signature": "public  ProductWeightFunction(ViolationWeightFunction... factors)", "class_method_signature": "ProductWeightFunction.ProductWeightFunction(ViolationWeightFunction... factors)", "testcase": false, "constructor": true}, {"identifier": "getWeight", "parameters": "(Overlap violation, Overlaps overlaps, Model model)", "modifiers": "@Override public", "return": "double", "signature": "double getWeight(Overlap violation, Overlaps overlaps, Model model)", "full_signature": "@Override public double getWeight(Overlap violation, Overlaps overlaps, Model model)", "class_method_signature": "ProductWeightFunction.getWeight(Overlap violation, Overlaps overlaps, Model model)", "testcase": false, "constructor": false}, {"identifier": "getFormula", "parameters": "(Overlap violation, Overlaps overlaps, Model model)", "modifiers": "@Override public", "return": "String", "signature": "String getFormula(Overlap violation, Overlaps overlaps, Model model)", "full_signature": "@Override public String getFormula(Overlap violation, Overlaps overlaps, Model model)", "class_method_signature": "ProductWeightFunction.getFormula(Overlap violation, Overlaps overlaps, Model model)", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getId()", "full_signature": "@Override public String getId()", "class_method_signature": "ProductWeightFunction.getId()", "testcase": false, "constructor": false}], "file": "mubench/src/main/java/de/tu_darmstadt/stg/mudetect/ranking/ProductWeightFunction.java"}, "focal_method": {"identifier": "getWeight", "parameters": "(Overlap violation, Overlaps overlaps, Model model)", "modifiers": "@Override public", "return": "double", "body": "@Override\n    public double getWeight(Overlap violation, Overlaps overlaps, Model model) {\n        return Arrays.stream(factors)\n                .mapToDouble(factor -> factor.getWeight(violation, overlaps, model))\n                .reduce(1, (a, b) -> a * b);\n    }", "signature": "double getWeight(Overlap violation, Overlaps overlaps, Model model)", "full_signature": "@Override public double getWeight(Overlap violation, Overlaps overlaps, Model model)", "class_method_signature": "ProductWeightFunction.getWeight(Overlap violation, Overlaps overlaps, Model model)", "testcase": false, "constructor": false, "invocations": ["reduce", "mapToDouble", "stream", "getWeight"]}, "repository": {"repo_id": 99890719, "url": "https://github.com/stg-tud/MUDetect", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 5, "size": 11835, "license": "licensed"}}