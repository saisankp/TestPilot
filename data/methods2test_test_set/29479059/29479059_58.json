{"test_class": {"identifier": "DefaultSchedulerServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private DefaultSchedulerService schedulerService;", "modifier": "@InjectMocks\n    private", "type": "DefaultSchedulerService", "declarator": "schedulerService", "var_name": "schedulerService"}, {"original_string": "@Mock\n    private BeanRegistrar beanRegistrar;", "modifier": "@Mock\n    private", "type": "BeanRegistrar", "declarator": "beanRegistrar", "var_name": "beanRegistrar"}, {"original_string": "@Mock\n    private JobRepository jobRepository;", "modifier": "@Mock\n    private", "type": "JobRepository", "declarator": "jobRepository", "var_name": "jobRepository"}, {"original_string": "@Mock\n    private JobRegistry jobRegistry;", "modifier": "@Mock\n    private", "type": "JobRegistry", "declarator": "jobRegistry", "var_name": "jobRegistry"}, {"original_string": "@Mock\n    private ApplicationContext applicationContext;", "modifier": "@Mock\n    private", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}, {"original_string": "@Mock\n    private Scheduler scheduler;", "modifier": "@Mock\n    private", "type": "Scheduler", "declarator": "scheduler", "var_name": "scheduler"}, {"original_string": "private Job sampleJob;", "modifier": "private", "type": "Job", "declarator": "sampleJob", "var_name": "sampleJob"}], "file": "spring-batch-lightmin-core/spring-batch-lightmin-core-service/src/test/java/org/tuxdevelop/spring/batch/lightmin/service/DefaultSchedulerServiceTest.java"}, "test_case": {"identifier": "refreshSchedulerForJobTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void refreshSchedulerForJobTest() {\n        final String beanName = \"schedulerBean\";\n        final JobSchedulerConfiguration jobSchedulerConfiguration = DomainTestHelper.createJobSchedulerConfiguration(null,\n                10L, 10L, JobSchedulerType.PERIOD);\n        jobSchedulerConfiguration.setBeanName(beanName);\n        jobSchedulerConfiguration.setTaskExecutorType(TaskExecutorType.ASYNCHRONOUS);\n        final JobConfiguration jobConfiguration = DomainTestHelper.createJobConfiguration(jobSchedulerConfiguration);\n        final Map<String, Object> jobParameters = new HashMap<>();\n        jobParameters.put(\"LONG\", 10L);\n        jobParameters.put(\"DOUBLE\", 20.2);\n        jobParameters.put(\"STRING\", \"test\");\n        jobParameters.put(\"DATE\", \"2015/03/27 23:19:24:120\");\n        jobParameters.put(\"DATE\", \"2015/03/27\");\n        jobConfiguration.setJobParameters(jobParameters);\n        final SchedulerConstructorWrapper schedulerConstructorWrapper = new SchedulerConstructorWrapper();\n        schedulerConstructorWrapper.setJob(DomainTestHelper.createJob(\"sampleJob\"));\n        schedulerConstructorWrapper.setJobConfiguration(jobConfiguration);\n        schedulerConstructorWrapper.setJobIncrementer(JobIncrementer.NONE);\n        schedulerConstructorWrapper.setJobLauncher(new SimpleJobLauncher());\n        schedulerConstructorWrapper.setJobParameters(new JobParametersBuilder().toJobParameters());\n        //scheduler = new PeriodScheduler(schedulerConstructorWrapper);\n        when(this.applicationContext.containsBean(beanName)).thenReturn(Boolean.TRUE);\n        when(this.applicationContext.getBean(beanName, Scheduler.class)).thenReturn(this.scheduler);\n        when(this.scheduler.getSchedulerStatus()).thenReturn(SchedulerStatus.INITIALIZED);\n        this.schedulerService.refreshSchedulerForJob(jobConfiguration);\n        verify(this.scheduler, times(1)).terminate();\n    }", "signature": "void refreshSchedulerForJobTest()", "full_signature": "@Test public void refreshSchedulerForJobTest()", "class_method_signature": "DefaultSchedulerServiceTest.refreshSchedulerForJobTest()", "testcase": true, "constructor": false, "invocations": ["createJobSchedulerConfiguration", "setBeanName", "setTaskExecutorType", "createJobConfiguration", "put", "put", "put", "put", "put", "setJobParameters", "setJob", "createJob", "setJobConfiguration", "setJobIncrementer", "setJobLauncher", "setJobParameters", "toJobParameters", "thenReturn", "when", "containsBean", "thenReturn", "when", "getBean", "thenReturn", "when", "getSchedulerStatus", "refreshSchedulerForJob", "terminate", "verify", "times"]}, "focal_class": {"identifier": "DefaultSchedulerService", "superclass": "", "interfaces": "implements SchedulerService", "fields": [{"original_string": "private static final String EXECUTOR_SUFFIX = \"_executor\";", "modifier": "private static final", "type": "String", "declarator": "EXECUTOR_SUFFIX = \"_executor\"", "var_name": "EXECUTOR_SUFFIX"}, {"original_string": "private ApplicationContext applicationContext;", "modifier": "private", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}, {"original_string": "private final BeanRegistrar beanRegistrar;", "modifier": "private final", "type": "BeanRegistrar", "declarator": "beanRegistrar", "var_name": "beanRegistrar"}, {"original_string": "private final JobRepository jobRepository;", "modifier": "private final", "type": "JobRepository", "declarator": "jobRepository", "var_name": "jobRepository"}, {"original_string": "private final JobRegistry jobRegistry;", "modifier": "private final", "type": "JobRegistry", "declarator": "jobRegistry", "var_name": "jobRegistry"}], "methods": [{"identifier": "DefaultSchedulerService", "parameters": "(final BeanRegistrar beanRegistrar,\n                                   final JobRepository jobRepository,\n                                   final JobRegistry jobRegistry)", "modifiers": "public", "return": "", "signature": " DefaultSchedulerService(final BeanRegistrar beanRegistrar,\n                                   final JobRepository jobRepository,\n                                   final JobRegistry jobRegistry)", "full_signature": "public  DefaultSchedulerService(final BeanRegistrar beanRegistrar,\n                                   final JobRepository jobRepository,\n                                   final JobRegistry jobRegistry)", "class_method_signature": "DefaultSchedulerService.DefaultSchedulerService(final BeanRegistrar beanRegistrar,\n                                   final JobRepository jobRepository,\n                                   final JobRegistry jobRegistry)", "testcase": false, "constructor": true}, {"identifier": "setApplicationContext", "parameters": "(final ApplicationContext applicationContext)", "modifiers": "@Autowired public", "return": "void", "signature": "void setApplicationContext(final ApplicationContext applicationContext)", "full_signature": "@Autowired public void setApplicationContext(final ApplicationContext applicationContext)", "class_method_signature": "DefaultSchedulerService.setApplicationContext(final ApplicationContext applicationContext)", "testcase": false, "constructor": false}, {"identifier": "registerSchedulerForJob", "parameters": "(final JobConfiguration jobConfiguration)", "modifiers": "@Override public", "return": "String", "signature": "String registerSchedulerForJob(final JobConfiguration jobConfiguration)", "full_signature": "@Override public String registerSchedulerForJob(final JobConfiguration jobConfiguration)", "class_method_signature": "DefaultSchedulerService.registerSchedulerForJob(final JobConfiguration jobConfiguration)", "testcase": false, "constructor": false}, {"identifier": "unregisterSchedulerForJob", "parameters": "(final String beanName)", "modifiers": "@Override public", "return": "void", "signature": "void unregisterSchedulerForJob(final String beanName)", "full_signature": "@Override public void unregisterSchedulerForJob(final String beanName)", "class_method_signature": "DefaultSchedulerService.unregisterSchedulerForJob(final String beanName)", "testcase": false, "constructor": false}, {"identifier": "refreshSchedulerForJob", "parameters": "(final JobConfiguration jobConfiguration)", "modifiers": "@Override public", "return": "void", "signature": "void refreshSchedulerForJob(final JobConfiguration jobConfiguration)", "full_signature": "@Override public void refreshSchedulerForJob(final JobConfiguration jobConfiguration)", "class_method_signature": "DefaultSchedulerService.refreshSchedulerForJob(final JobConfiguration jobConfiguration)", "testcase": false, "constructor": false}, {"identifier": "schedule", "parameters": "(final String beanName, final Boolean forceScheduling)", "modifiers": "@Override public", "return": "void", "signature": "void schedule(final String beanName, final Boolean forceScheduling)", "full_signature": "@Override public void schedule(final String beanName, final Boolean forceScheduling)", "class_method_signature": "DefaultSchedulerService.schedule(final String beanName, final Boolean forceScheduling)", "testcase": false, "constructor": false}, {"identifier": "terminate", "parameters": "(final String beanName)", "modifiers": "@Override public", "return": "void", "signature": "void terminate(final String beanName)", "full_signature": "@Override public void terminate(final String beanName)", "class_method_signature": "DefaultSchedulerService.terminate(final String beanName)", "testcase": false, "constructor": false}, {"identifier": "getSchedulerStatus", "parameters": "(final String beanName)", "modifiers": "@Override public", "return": "SchedulerStatus", "signature": "SchedulerStatus getSchedulerStatus(final String beanName)", "full_signature": "@Override public SchedulerStatus getSchedulerStatus(final String beanName)", "class_method_signature": "DefaultSchedulerService.getSchedulerStatus(final String beanName)", "testcase": false, "constructor": false}, {"identifier": "afterPropertiesSet", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void afterPropertiesSet()", "full_signature": "@Override public void afterPropertiesSet()", "class_method_signature": "DefaultSchedulerService.afterPropertiesSet()", "testcase": false, "constructor": false}, {"identifier": "createLobLauncher", "parameters": "(final TaskExecutorType taskExecutorType, final JobRepository jobRepository)", "modifiers": "@Override public", "return": "JobLauncher", "signature": "JobLauncher createLobLauncher(final TaskExecutorType taskExecutorType, final JobRepository jobRepository)", "full_signature": "@Override public JobLauncher createLobLauncher(final TaskExecutorType taskExecutorType, final JobRepository jobRepository)", "class_method_signature": "DefaultSchedulerService.createLobLauncher(final TaskExecutorType taskExecutorType, final JobRepository jobRepository)", "testcase": false, "constructor": false}, {"identifier": "registerScheduler", "parameters": "(final JobConfiguration jobConfiguration, final Class<?> schedulerClass)", "modifiers": "private", "return": "String", "signature": "String registerScheduler(final JobConfiguration jobConfiguration, final Class<?> schedulerClass)", "full_signature": "private String registerScheduler(final JobConfiguration jobConfiguration, final Class<?> schedulerClass)", "class_method_signature": "DefaultSchedulerService.registerScheduler(final JobConfiguration jobConfiguration, final Class<?> schedulerClass)", "testcase": false, "constructor": false}, {"identifier": "generateSchedulerBeanName", "parameters": "(final String jobName,\n                                             final JobSchedulerType jobSchedulerType)", "modifiers": "private", "return": "String", "signature": "String generateSchedulerBeanName(final String jobName,\n                                             final JobSchedulerType jobSchedulerType)", "full_signature": "private String generateSchedulerBeanName(final String jobName,\n                                             final JobSchedulerType jobSchedulerType)", "class_method_signature": "DefaultSchedulerService.generateSchedulerBeanName(final String jobName,\n                                             final JobSchedulerType jobSchedulerType)", "testcase": false, "constructor": false}, {"identifier": "registerThreadPoolTaskScheduler", "parameters": "(final String jobConfigurationBeanName)", "modifiers": "private", "return": "ThreadPoolTaskScheduler", "signature": "ThreadPoolTaskScheduler registerThreadPoolTaskScheduler(final String jobConfigurationBeanName)", "full_signature": "private ThreadPoolTaskScheduler registerThreadPoolTaskScheduler(final String jobConfigurationBeanName)", "class_method_signature": "DefaultSchedulerService.registerThreadPoolTaskScheduler(final String jobConfigurationBeanName)", "testcase": false, "constructor": false}], "file": "spring-batch-lightmin-core/spring-batch-lightmin-core-service/src/main/java/org/tuxdevelop/spring/batch/lightmin/service/DefaultSchedulerService.java"}, "focal_method": {"identifier": "refreshSchedulerForJob", "parameters": "(final JobConfiguration jobConfiguration)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void refreshSchedulerForJob(final JobConfiguration jobConfiguration) {\n        this.terminate(jobConfiguration.getJobSchedulerConfiguration().getBeanName());\n        this.unregisterSchedulerForJob(jobConfiguration.getJobSchedulerConfiguration().getBeanName());\n        this.registerSchedulerForJob(jobConfiguration);\n    }", "signature": "void refreshSchedulerForJob(final JobConfiguration jobConfiguration)", "full_signature": "@Override public void refreshSchedulerForJob(final JobConfiguration jobConfiguration)", "class_method_signature": "DefaultSchedulerService.refreshSchedulerForJob(final JobConfiguration jobConfiguration)", "testcase": false, "constructor": false, "invocations": ["terminate", "getBeanName", "getJobSchedulerConfiguration", "unregisterSchedulerForJob", "getBeanName", "getJobSchedulerConfiguration", "registerSchedulerForJob"]}, "repository": {"repo_id": 29479059, "url": "https://github.com/tuxdevelop/spring-batch-lightmin", "language": "Java", "is_fork": false, "fork_count": 34, "stargazer_count": 109, "size": 12355, "license": "licensed"}}