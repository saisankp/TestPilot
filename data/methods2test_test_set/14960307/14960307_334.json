{"test_class": {"identifier": "LoadBalancedListsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(LoadBalancedListsTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(LoadBalancedListsTest.class)", "var_name": "logger"}], "file": "ch-commons-util/src/test/java/com/cloudhopper/commons/util/LoadBalancedListsTest.java"}, "test_case": {"identifier": "getNextEqualWeight", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getNextEqualWeight() throws Exception {\n        LoadBalancedList<String> list = LoadBalancedLists.synchronizedList(new RoundRobinLoadBalancedList<String>());\n\n        // add just one item\n        list.set(\"Item1\", 2);\n        list.set(\"Item2\", 2);\n        list.set(\"Item3\", 2);\n\n        Assert.assertEquals(\"Item1\", list.getNext());\n        Assert.assertEquals(\"Item2\", list.getNext());\n        Assert.assertEquals(\"Item3\", list.getNext());\n        Assert.assertEquals(\"Item1\", list.getNext());\n        Assert.assertEquals(\"Item2\", list.getNext());\n        Assert.assertEquals(\"Item3\", list.getNext());\n\n        // k, now we repeat and every item is back in list of possible choices\n        Assert.assertEquals(\"Item1\", list.getNext());\n        Assert.assertEquals(\"Item2\", list.getNext());\n        Assert.assertEquals(\"Item3\", list.getNext());\n\n        // used up all of them once, item1 would normally have 1 more use left\n        // let's reset its weight to 1 (which should remove it from possible list)\n        list.set(\"Item1\", 1);\n\n        Assert.assertEquals(\"Item2\", list.getNext());\n        Assert.assertEquals(\"Item3\", list.getNext());\n\n        Assert.assertEquals(\"Item1\", list.getNext());\n        Assert.assertEquals(\"Item2\", list.getNext());\n        Assert.assertEquals(\"Item3\", list.getNext());\n\n        // reset weight of item1 back to two\n        list.set(\"Item1\", 2);\n\n        Assert.assertEquals(\"Item2\", list.getNext());\n        Assert.assertEquals(\"Item3\", list.getNext());\n        Assert.assertEquals(\"Item1\", list.getNext());\n        Assert.assertEquals(\"Item2\", list.getNext());\n        Assert.assertEquals(\"Item3\", list.getNext());\n        Assert.assertEquals(\"Item1\", list.getNext());\n        Assert.assertEquals(\"Item2\", list.getNext());\n        Assert.assertEquals(\"Item3\", list.getNext());\n        // cycle should repeat now...\n        Assert.assertEquals(\"Item1\", list.getNext());\n        Assert.assertEquals(\"Item2\", list.getNext());\n    }", "signature": "void getNextEqualWeight()", "full_signature": "@Test public void getNextEqualWeight()", "class_method_signature": "LoadBalancedListsTest.getNextEqualWeight()", "testcase": true, "constructor": false, "invocations": ["synchronizedList", "set", "set", "set", "assertEquals", "getNext", "assertEquals", "getNext", "assertEquals", "getNext", "assertEquals", "getNext", "assertEquals", "getNext", "assertEquals", "getNext", "assertEquals", "getNext", "assertEquals", "getNext", "assertEquals", "getNext", "set", "assertEquals", "getNext", "assertEquals", "getNext", "assertEquals", "getNext", "assertEquals", "getNext", "assertEquals", "getNext", "set", "assertEquals", "getNext", "assertEquals", "getNext", "assertEquals", "getNext", "assertEquals", "getNext", "assertEquals", "getNext", "assertEquals", "getNext", "assertEquals", "getNext", "assertEquals", "getNext", "assertEquals", "getNext", "assertEquals", "getNext"]}, "focal_class": {"identifier": "LoadBalancedLists", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "synchronizedList", "parameters": "(LoadBalancedList<E> list)", "modifiers": "static public", "return": "LoadBalancedList<E>", "signature": "LoadBalancedList<E> synchronizedList(LoadBalancedList<E> list)", "full_signature": "static public LoadBalancedList<E> synchronizedList(LoadBalancedList<E> list)", "class_method_signature": "LoadBalancedLists.synchronizedList(LoadBalancedList<E> list)", "testcase": false, "constructor": false}], "file": "ch-commons-util/src/main/java/com/cloudhopper/commons/util/LoadBalancedLists.java"}, "focal_method": {"identifier": "synchronizedList", "parameters": "(LoadBalancedList<E> list)", "modifiers": "static public", "return": "LoadBalancedList<E>", "body": "static public <E> LoadBalancedList<E> synchronizedList(LoadBalancedList<E> list) {\n        return new ConcurrentLoadBalancedList<E>(list);\n    }", "signature": "LoadBalancedList<E> synchronizedList(LoadBalancedList<E> list)", "full_signature": "static public LoadBalancedList<E> synchronizedList(LoadBalancedList<E> list)", "class_method_signature": "LoadBalancedLists.synchronizedList(LoadBalancedList<E> list)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}