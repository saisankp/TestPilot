{"test_class": {"identifier": "JarWriterTest", "superclass": "", "interfaces": "implements JarEntryWriter", "fields": [{"original_string": "private int countCallbacks = 0;", "modifier": "private", "type": "int", "declarator": "countCallbacks = 0", "var_name": "countCallbacks"}], "file": "lang-java/src/test/java/org/eclipse/steady/java/JarWriterTest.java"}, "test_case": {"identifier": "testAppendToClasspath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testAppendToClasspath() {\n    try {\n      final Set<Path> cp = new HashSet<Path>();\n\n      // Needs rewriting\n      final Path with_mf_entry =\n          Paths.get(\"./src/test/resources/org.apache.servicemix.bundles.jaxb-xjc-2.2.4_1.jar\");\n      Path appended_path = JarWriter.appendToClasspath(cp, with_mf_entry, true);\n      assertTrue(!cp.contains(with_mf_entry));\n      assertTrue(!with_mf_entry.equals(appended_path));\n\n      // Does not need rewriting\n      final Path without_mf_entry = Paths.get(\"./src/test/resources/junit-4.12.jar\");\n      appended_path = JarWriter.appendToClasspath(cp, without_mf_entry, true);\n      assertTrue(cp.contains(without_mf_entry));\n      assertTrue(without_mf_entry.equals(appended_path));\n    } catch (Exception e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n  }", "signature": "void testAppendToClasspath()", "full_signature": "@Test public void testAppendToClasspath()", "class_method_signature": "JarWriterTest.testAppendToClasspath()", "testcase": true, "constructor": false, "invocations": ["get", "appendToClasspath", "assertTrue", "contains", "assertTrue", "equals", "get", "appendToClasspath", "assertTrue", "contains", "assertTrue", "equals", "printStackTrace", "assertTrue"]}, "focal_class": {"identifier": "JarWriter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = org.apache.logging.log4j.LogManager.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "log = org.apache.logging.log4j.LogManager.getLogger()", "var_name": "log"}, {"original_string": "public final SimpleDateFormat dateFormat = new SimpleDateFormat(\"d MMM yyyy HH:mm:ss\");", "modifier": "public final", "type": "SimpleDateFormat", "declarator": "dateFormat = new SimpleDateFormat(\"d MMM yyyy HH:mm:ss\")", "var_name": "dateFormat"}, {"original_string": "public static final String MANIFEST_ENTRY_VULAS_MODIF = \"VULAS-modifiedAt\";", "modifier": "public static final", "type": "String", "declarator": "MANIFEST_ENTRY_VULAS_MODIF = \"VULAS-modifiedAt\"", "var_name": "MANIFEST_ENTRY_VULAS_MODIF"}, {"original_string": "public static final String MANIFEST_ENTRY_ORIG_SHA1 = \"VULAS-originalSHA1\";", "modifier": "public static final", "type": "String", "declarator": "MANIFEST_ENTRY_ORIG_SHA1 = \"VULAS-originalSHA1\"", "var_name": "MANIFEST_ENTRY_ORIG_SHA1"}, {"original_string": "protected static final char[] hexArray = \"0123456789ABCDEF\".toCharArray();", "modifier": "protected static final", "type": "char[]", "declarator": "hexArray = \"0123456789ABCDEF\".toCharArray()", "var_name": "hexArray"}, {"original_string": "private JarFile originalJar = null;", "modifier": "private", "type": "JarFile", "declarator": "originalJar = null", "var_name": "originalJar"}, {"original_string": "private long originalFileSize = 0;", "modifier": "private", "type": "long", "declarator": "originalFileSize = 0", "var_name": "originalFileSize"}, {"original_string": "private Manifest originalManifest = null;", "modifier": "private", "type": "Manifest", "declarator": "originalManifest = null", "var_name": "originalManifest"}, {"original_string": "private String sha1 = null;", "modifier": "private", "type": "String", "declarator": "sha1 = null", "var_name": "sha1"}, {"original_string": "private Set<String> mfEntriesToSkip = new HashSet<String>();", "modifier": "private", "type": "Set<String>", "declarator": "mfEntriesToSkip = new HashSet<String>()", "var_name": "mfEntriesToSkip"}, {"original_string": "private Map<String, String> mfEntriesToAdd = new HashMap<String, String>();", "modifier": "private", "type": "Map<String, String>", "declarator": "mfEntriesToAdd = new HashMap<String, String>()", "var_name": "mfEntriesToAdd"}, {"original_string": "private String classifier = null;", "modifier": "private", "type": "String", "declarator": "classifier = null", "var_name": "classifier"}, {"original_string": "private Map<Pattern, JarEntryWriter> callbacks = new HashMap<Pattern, JarEntryWriter>();", "modifier": "private", "type": "Map<Pattern, JarEntryWriter>", "declarator": "callbacks = new HashMap<Pattern, JarEntryWriter>()", "var_name": "callbacks"}, {"original_string": "private File rewrittenFile = null;", "modifier": "private", "type": "File", "declarator": "rewrittenFile = null", "var_name": "rewrittenFile"}, {"original_string": "private Map<String, Path> additionalFiles = new HashMap<String, Path>();", "modifier": "private", "type": "Map<String, Path>", "declarator": "additionalFiles = new HashMap<String, Path>()", "var_name": "additionalFiles"}], "methods": [{"identifier": "JarWriter", "parameters": "(Path _jar)", "modifiers": "public", "return": "", "signature": " JarWriter(Path _jar)", "full_signature": "public  JarWriter(Path _jar)", "class_method_signature": "JarWriter.JarWriter(Path _jar)", "testcase": false, "constructor": true}, {"identifier": "getFileSize", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getFileSize()", "full_signature": "public long getFileSize()", "class_method_signature": "JarWriter.getFileSize()", "testcase": false, "constructor": false}, {"identifier": "getInstrumentedFileSize", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getInstrumentedFileSize()", "full_signature": "public long getInstrumentedFileSize()", "class_method_signature": "JarWriter.getInstrumentedFileSize()", "testcase": false, "constructor": false}, {"identifier": "getOriginalManifest", "parameters": "()", "modifiers": "public", "return": "Manifest", "signature": "Manifest getOriginalManifest()", "full_signature": "public Manifest getOriginalManifest()", "class_method_signature": "JarWriter.getOriginalManifest()", "testcase": false, "constructor": false}, {"identifier": "extract", "parameters": "(Path _todir)", "modifiers": "public", "return": "Path", "signature": "Path extract(Path _todir)", "full_signature": "public Path extract(Path _todir)", "class_method_signature": "JarWriter.extract(Path _todir)", "testcase": false, "constructor": false}, {"identifier": "getSHA1", "parameters": "()", "modifiers": "public synchronized", "return": "String", "signature": "String getSHA1()", "full_signature": "public synchronized String getSHA1()", "class_method_signature": "JarWriter.getSHA1()", "testcase": false, "constructor": false}, {"identifier": "skipManifestEntry", "parameters": "(String _entry)", "modifiers": "public", "return": "void", "signature": "void skipManifestEntry(String _entry)", "full_signature": "public void skipManifestEntry(String _entry)", "class_method_signature": "JarWriter.skipManifestEntry(String _entry)", "testcase": false, "constructor": false}, {"identifier": "addManifestEntry", "parameters": "(String _key, String _val)", "modifiers": "public", "return": "void", "signature": "void addManifestEntry(String _key, String _val)", "full_signature": "public void addManifestEntry(String _key, String _val)", "class_method_signature": "JarWriter.addManifestEntry(String _key, String _val)", "testcase": false, "constructor": false}, {"identifier": "hasManifestEntry", "parameters": "(String _key)", "modifiers": "public", "return": "boolean", "signature": "boolean hasManifestEntry(String _key)", "full_signature": "public boolean hasManifestEntry(String _key)", "class_method_signature": "JarWriter.hasManifestEntry(String _key)", "testcase": false, "constructor": false}, {"identifier": "isRewrittenByVulas", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRewrittenByVulas()", "full_signature": "public boolean isRewrittenByVulas()", "class_method_signature": "JarWriter.isRewrittenByVulas()", "testcase": false, "constructor": false}, {"identifier": "setClassifier", "parameters": "(String _string)", "modifiers": "public", "return": "void", "signature": "void setClassifier(String _string)", "full_signature": "public void setClassifier(String _string)", "class_method_signature": "JarWriter.setClassifier(String _string)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(String _regex, JarEntryWriter _writer)", "modifiers": "public", "return": "void", "signature": "void register(String _regex, JarEntryWriter _writer)", "full_signature": "public void register(String _regex, JarEntryWriter _writer)", "class_method_signature": "JarWriter.register(String _regex, JarEntryWriter _writer)", "testcase": false, "constructor": false}, {"identifier": "createModifiedManifest", "parameters": "()", "modifiers": "private", "return": "Manifest", "signature": "Manifest createModifiedManifest()", "full_signature": "private Manifest createModifiedManifest()", "class_method_signature": "JarWriter.createModifiedManifest()", "testcase": false, "constructor": false}, {"identifier": "getOriginalJarFileName", "parameters": "()", "modifiers": "public", "return": "Path", "signature": "Path getOriginalJarFileName()", "full_signature": "public Path getOriginalJarFileName()", "class_method_signature": "JarWriter.getOriginalJarFileName()", "testcase": false, "constructor": false}, {"identifier": "getRewriteJarFileName", "parameters": "()", "modifiers": "public", "return": "Path", "signature": "Path getRewriteJarFileName()", "full_signature": "public Path getRewriteJarFileName()", "class_method_signature": "JarWriter.getRewriteJarFileName()", "testcase": false, "constructor": false}, {"identifier": "addFiles", "parameters": "(String _target_dir, Set<Path> _paths, boolean _overwrite)", "modifiers": "public", "return": "void", "signature": "void addFiles(String _target_dir, Set<Path> _paths, boolean _overwrite)", "full_signature": "public void addFiles(String _target_dir, Set<Path> _paths, boolean _overwrite)", "class_method_signature": "JarWriter.addFiles(String _target_dir, Set<Path> _paths, boolean _overwrite)", "testcase": false, "constructor": false}, {"identifier": "addFile", "parameters": "(String _target_dir, Path _path, boolean _overwrite)", "modifiers": "public", "return": "void", "signature": "void addFile(String _target_dir, Path _path, boolean _overwrite)", "full_signature": "public void addFile(String _target_dir, Path _path, boolean _overwrite)", "class_method_signature": "JarWriter.addFile(String _target_dir, Path _path, boolean _overwrite)", "testcase": false, "constructor": false}, {"identifier": "hasEntry", "parameters": "(String _entry_name)", "modifiers": "public", "return": "boolean", "signature": "boolean hasEntry(String _entry_name)", "full_signature": "public boolean hasEntry(String _entry_name)", "class_method_signature": "JarWriter.hasEntry(String _entry_name)", "testcase": false, "constructor": false}, {"identifier": "getRewrittenJarFile", "parameters": "()", "modifiers": "public", "return": "File", "signature": "File getRewrittenJarFile()", "full_signature": "public File getRewrittenJarFile()", "class_method_signature": "JarWriter.getRewrittenJarFile()", "testcase": false, "constructor": false}, {"identifier": "rewrite", "parameters": "(Path _todir)", "modifiers": "public", "return": "Path", "signature": "Path rewrite(Path _todir)", "full_signature": "public Path rewrite(Path _todir)", "class_method_signature": "JarWriter.rewrite(Path _todir)", "testcase": false, "constructor": false}, {"identifier": "appendToClasspath", "parameters": "(\n      Set<Path> _classpath, Set<Path> _to_append, boolean _preprocess)", "modifiers": "public static final", "return": "void", "signature": "void appendToClasspath(\n      Set<Path> _classpath, Set<Path> _to_append, boolean _preprocess)", "full_signature": "public static final void appendToClasspath(\n      Set<Path> _classpath, Set<Path> _to_append, boolean _preprocess)", "class_method_signature": "JarWriter.appendToClasspath(\n      Set<Path> _classpath, Set<Path> _to_append, boolean _preprocess)", "testcase": false, "constructor": false}, {"identifier": "appendToClasspath", "parameters": "(\n      Set<Path> _classpath, Path _to_append, boolean _preprocess)", "modifiers": "public static final", "return": "Path", "signature": "Path appendToClasspath(\n      Set<Path> _classpath, Path _to_append, boolean _preprocess)", "full_signature": "public static final Path appendToClasspath(\n      Set<Path> _classpath, Path _to_append, boolean _preprocess)", "class_method_signature": "JarWriter.appendToClasspath(\n      Set<Path> _classpath, Path _to_append, boolean _preprocess)", "testcase": false, "constructor": false}], "file": "lang-java/src/main/java/org/eclipse/steady/java/JarWriter.java"}, "focal_method": {"identifier": "appendToClasspath", "parameters": "(\n      Set<Path> _classpath, Set<Path> _to_append, boolean _preprocess)", "modifiers": "public static final", "return": "void", "body": "public static final void appendToClasspath(\n      Set<Path> _classpath, Set<Path> _to_append, boolean _preprocess) {\n    for (Path p : _to_append) appendToClasspath(_classpath, p, _preprocess);\n  }", "signature": "void appendToClasspath(\n      Set<Path> _classpath, Set<Path> _to_append, boolean _preprocess)", "full_signature": "public static final void appendToClasspath(\n      Set<Path> _classpath, Set<Path> _to_append, boolean _preprocess)", "class_method_signature": "JarWriter.appendToClasspath(\n      Set<Path> _classpath, Set<Path> _to_append, boolean _preprocess)", "testcase": false, "constructor": false, "invocations": ["appendToClasspath"]}, "repository": {"repo_id": 145424401, "url": "https://github.com/eclipse/steady", "stars": 353, "created": "8/20/2018 1:54:15 PM +00:00", "updates": "2020-01-25T08:37:00+00:00", "fork": "False", "license": "licensed"}}