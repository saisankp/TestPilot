{"test_class": {"identifier": "UsageSanityCheckerTest", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "usage/src/test/java/com/cloud/usage/UsageSanityCheckerTest.java"}, "test_case": {"identifier": "testCheckItemCountByPstmt", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCheckItemCountByPstmt() throws SQLException {\n        // Prepare\n        // Mock dependencies to exclude from the test\n        String sqlTemplate1 = \"SELECT * FROM mytable1\";\n        String sqlTemplate2 = \"SELECT * FROM mytable2\";\n\n        Connection conn = Mockito.mock(Connection.class);\n        PreparedStatement pstmt = Mockito.mock(PreparedStatement.class);\n        ResultSet rs = Mockito.mock(ResultSet.class);\n\n        Mockito.when(conn.prepareStatement(sqlTemplate1)).thenReturn(pstmt);\n        Mockito.when(conn.prepareStatement(sqlTemplate2)).thenReturn(pstmt);\n        Mockito.when(pstmt.executeQuery()).thenReturn(rs, rs);\n\n        // First if: true -> 8\n        // Second loop: true -> 16\n        Mockito.when(rs.next()).thenReturn(true, true);\n        Mockito.when(rs.getInt(1)).thenReturn(8, 8, 16, 16);\n\n        // Prepare class under test\n        UsageSanityChecker checker = new UsageSanityChecker();\n        checker.conn = conn;\n        checker.reset();\n        checker.addCheckCase(sqlTemplate1, \"item1\");\n        checker.addCheckCase(sqlTemplate2, \"item2\");\n\n        // Execute\n        checker.checkItemCountByPstmt();\n\n        // Verify\n        Pattern pattern = Pattern.compile(\".*8.*item1.*\\n.*16.*item2.*\");\n        Matcher matcher = pattern.matcher(checker.errors);\n        assertTrue(\"Didn't create complete errors. It should create 2 errors: 8 item1 and 16 item2\", matcher.find());\n    }", "signature": "void testCheckItemCountByPstmt()", "full_signature": "@Test public void testCheckItemCountByPstmt()", "class_method_signature": "UsageSanityCheckerTest.testCheckItemCountByPstmt()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "thenReturn", "when", "prepareStatement", "thenReturn", "when", "prepareStatement", "thenReturn", "when", "executeQuery", "thenReturn", "when", "next", "thenReturn", "when", "getInt", "reset", "addCheckCase", "addCheckCase", "checkItemCountByPstmt", "compile", "matcher", "assertTrue", "find"]}, "focal_class": {"identifier": "UsageSanityChecker", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final Logger s_logger = LoggerFactory.getLogger(UsageSanityChecker.class);", "modifier": "protected static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(UsageSanityChecker.class)", "var_name": "s_logger"}, {"original_string": "protected static final int DEFAULT_AGGREGATION_RANGE = 1440;", "modifier": "protected static final", "type": "int", "declarator": "DEFAULT_AGGREGATION_RANGE = 1440", "var_name": "DEFAULT_AGGREGATION_RANGE"}, {"original_string": "protected StringBuilder errors;", "modifier": "protected", "type": "StringBuilder", "declarator": "errors", "var_name": "errors"}, {"original_string": "protected List<CheckCase> checkCases;", "modifier": "protected", "type": "List<CheckCase>", "declarator": "checkCases", "var_name": "checkCases"}, {"original_string": "protected String lastCheckFile = \"/usr/local/libexec/sanity-check-last-id\";", "modifier": "protected", "type": "String", "declarator": "lastCheckFile = \"/usr/local/libexec/sanity-check-last-id\"", "var_name": "lastCheckFile"}, {"original_string": "protected String lastCheckId = \"\";", "modifier": "protected", "type": "String", "declarator": "lastCheckId = \"\"", "var_name": "lastCheckId"}, {"original_string": "protected int lastId = -1;", "modifier": "protected", "type": "int", "declarator": "lastId = -1", "var_name": "lastId"}, {"original_string": "protected int maxId = -1;", "modifier": "protected", "type": "int", "declarator": "maxId = -1", "var_name": "maxId"}, {"original_string": "protected Connection conn;", "modifier": "protected", "type": "Connection", "declarator": "conn", "var_name": "conn"}], "methods": [{"identifier": "reset", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void reset()", "full_signature": "protected void reset()", "class_method_signature": "UsageSanityChecker.reset()", "testcase": false, "constructor": false}, {"identifier": "checkItemCountByPstmt", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean checkItemCountByPstmt()", "full_signature": "protected boolean checkItemCountByPstmt()", "class_method_signature": "UsageSanityChecker.checkItemCountByPstmt()", "testcase": false, "constructor": false}, {"identifier": "checkItemCountByPstmt", "parameters": "(CheckCase checkCase)", "modifiers": "protected", "return": "boolean", "signature": "boolean checkItemCountByPstmt(CheckCase checkCase)", "full_signature": "protected boolean checkItemCountByPstmt(CheckCase checkCase)", "class_method_signature": "UsageSanityChecker.checkItemCountByPstmt(CheckCase checkCase)", "testcase": false, "constructor": false}, {"identifier": "checkMaxUsage", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void checkMaxUsage()", "full_signature": "protected void checkMaxUsage()", "class_method_signature": "UsageSanityChecker.checkMaxUsage()", "testcase": false, "constructor": false}, {"identifier": "checkVmUsage", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void checkVmUsage()", "full_signature": "protected void checkVmUsage()", "class_method_signature": "UsageSanityChecker.checkVmUsage()", "testcase": false, "constructor": false}, {"identifier": "checkVolumeUsage", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void checkVolumeUsage()", "full_signature": "protected void checkVolumeUsage()", "class_method_signature": "UsageSanityChecker.checkVolumeUsage()", "testcase": false, "constructor": false}, {"identifier": "checkTemplateISOUsage", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void checkTemplateISOUsage()", "full_signature": "protected void checkTemplateISOUsage()", "class_method_signature": "UsageSanityChecker.checkTemplateISOUsage()", "testcase": false, "constructor": false}, {"identifier": "checkSnapshotUsage", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void checkSnapshotUsage()", "full_signature": "protected void checkSnapshotUsage()", "class_method_signature": "UsageSanityChecker.checkSnapshotUsage()", "testcase": false, "constructor": false}, {"identifier": "readLastCheckId", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void readLastCheckId()", "full_signature": "protected void readLastCheckId()", "class_method_signature": "UsageSanityChecker.readLastCheckId()", "testcase": false, "constructor": false}, {"identifier": "readMaxId", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void readMaxId()", "full_signature": "protected void readMaxId()", "class_method_signature": "UsageSanityChecker.readMaxId()", "testcase": false, "constructor": false}, {"identifier": "updateNewMaxId", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void updateNewMaxId()", "full_signature": "protected void updateNewMaxId()", "class_method_signature": "UsageSanityChecker.updateNewMaxId()", "testcase": false, "constructor": false}, {"identifier": "runSanityCheck", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String runSanityCheck()", "full_signature": "public String runSanityCheck()", "class_method_signature": "UsageSanityChecker.runSanityCheck()", "testcase": false, "constructor": false}, {"identifier": "getConnection", "parameters": "()", "modifiers": "protected", "return": "Connection", "signature": "Connection getConnection()", "full_signature": "protected Connection getConnection()", "class_method_signature": "UsageSanityChecker.getConnection()", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String args[])", "modifiers": "public static", "return": "void", "signature": "void main(String args[])", "full_signature": "public static void main(String args[])", "class_method_signature": "UsageSanityChecker.main(String args[])", "testcase": false, "constructor": false}, {"identifier": "addCheckCase", "parameters": "(String sqlTemplate, String itemName, String lastCheckId)", "modifiers": "protected", "return": "void", "signature": "void addCheckCase(String sqlTemplate, String itemName, String lastCheckId)", "full_signature": "protected void addCheckCase(String sqlTemplate, String itemName, String lastCheckId)", "class_method_signature": "UsageSanityChecker.addCheckCase(String sqlTemplate, String itemName, String lastCheckId)", "testcase": false, "constructor": false}, {"identifier": "addCheckCase", "parameters": "(String sqlTemplate, String itemName)", "modifiers": "protected", "return": "void", "signature": "void addCheckCase(String sqlTemplate, String itemName)", "full_signature": "protected void addCheckCase(String sqlTemplate, String itemName)", "class_method_signature": "UsageSanityChecker.addCheckCase(String sqlTemplate, String itemName)", "testcase": false, "constructor": false}], "file": "usage/src/main/java/com/cloud/usage/UsageSanityChecker.java"}, "focal_method": {"identifier": "checkItemCountByPstmt", "parameters": "()", "modifiers": "protected", "return": "boolean", "body": "protected boolean checkItemCountByPstmt() throws SQLException {\n        boolean checkOk = true;\n\n        for(CheckCase check : checkCases) {\n            checkOk &= checkItemCountByPstmt(check);\n        }\n\n        return checkOk;\n    }", "signature": "boolean checkItemCountByPstmt()", "full_signature": "protected boolean checkItemCountByPstmt()", "class_method_signature": "UsageSanityChecker.checkItemCountByPstmt()", "testcase": false, "constructor": false, "invocations": ["checkItemCountByPstmt"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}