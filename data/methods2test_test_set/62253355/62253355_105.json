{"test_class": {"identifier": "SimpleApplicationManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SimpleApplicationManager manager;", "modifier": "private", "type": "SimpleApplicationManager", "declarator": "manager", "var_name": "manager"}, {"original_string": "private static final String ID = \"id\";", "modifier": "private static final", "type": "String", "declarator": "ID = \"id\"", "var_name": "ID"}, {"original_string": "@Mock\n    private ApplicationWrapper applicationWrapper;", "modifier": "@Mock\n    private", "type": "ApplicationWrapper", "declarator": "applicationWrapper", "var_name": "applicationWrapper"}, {"original_string": "@Mock\n    private Application application;", "modifier": "@Mock\n    private", "type": "Application", "declarator": "application", "var_name": "application"}], "file": "com.mobi.platform.config.impl/src/test/java/com/mobi/platform/config/impl/application/SimpleApplicationManagerTest.java"}, "test_case": {"identifier": "getApplicationTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getApplicationTest() throws Exception {\n        Optional<Application> result = manager.getApplication(ID);\n        assertTrue(result.isPresent());\n        assertEquals(application, result.get());\n    }", "signature": "void getApplicationTest()", "full_signature": "@Test public void getApplicationTest()", "class_method_signature": "SimpleApplicationManagerTest.getApplicationTest()", "testcase": true, "constructor": false, "invocations": ["getApplication", "assertTrue", "isPresent", "assertEquals", "get"]}, "focal_class": {"identifier": "SimpleApplicationManager", "superclass": "", "interfaces": "implements ApplicationManager", "fields": [{"original_string": "private Map<String, ApplicationWrapper> applications = new HashMap<>();", "modifier": "private", "type": "Map<String, ApplicationWrapper>", "declarator": "applications = new HashMap<>()", "var_name": "applications"}], "methods": [{"identifier": "addApplication", "parameters": "(ApplicationWrapper applicationWrapper)", "modifiers": "@Reference(type = '*', dynamic = true) public", "return": "void", "signature": "void addApplication(ApplicationWrapper applicationWrapper)", "full_signature": "@Reference(type = '*', dynamic = true) public void addApplication(ApplicationWrapper applicationWrapper)", "class_method_signature": "SimpleApplicationManager.addApplication(ApplicationWrapper applicationWrapper)", "testcase": false, "constructor": false}, {"identifier": "removeApplication", "parameters": "(ApplicationWrapper applicationWrapper)", "modifiers": "public", "return": "void", "signature": "void removeApplication(ApplicationWrapper applicationWrapper)", "full_signature": "public void removeApplication(ApplicationWrapper applicationWrapper)", "class_method_signature": "SimpleApplicationManager.removeApplication(ApplicationWrapper applicationWrapper)", "testcase": false, "constructor": false}, {"identifier": "applicationExists", "parameters": "(String applicationId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean applicationExists(String applicationId)", "full_signature": "@Override public boolean applicationExists(String applicationId)", "class_method_signature": "SimpleApplicationManager.applicationExists(String applicationId)", "testcase": false, "constructor": false}, {"identifier": "getApplication", "parameters": "(String applicationId)", "modifiers": "@Override public", "return": "Optional<Application>", "signature": "Optional<Application> getApplication(String applicationId)", "full_signature": "@Override public Optional<Application> getApplication(String applicationId)", "class_method_signature": "SimpleApplicationManager.getApplication(String applicationId)", "testcase": false, "constructor": false}], "file": "com.mobi.platform.config.impl/src/main/java/com/mobi/platform/config/impl/application/SimpleApplicationManager.java"}, "focal_method": {"identifier": "getApplication", "parameters": "(String applicationId)", "modifiers": "@Override public", "return": "Optional<Application>", "body": "@Override\n    public Optional<Application> getApplication(String applicationId) {\n        if (!applicationExists(applicationId)) {\n            return Optional.empty();\n        }\n        return Optional.ofNullable(applications.get(applicationId).getApplication());\n    }", "signature": "Optional<Application> getApplication(String applicationId)", "full_signature": "@Override public Optional<Application> getApplication(String applicationId)", "class_method_signature": "SimpleApplicationManager.getApplication(String applicationId)", "testcase": false, "constructor": false, "invocations": ["applicationExists", "empty", "ofNullable", "getApplication", "get"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}