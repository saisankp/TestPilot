{"test_class": {"identifier": "FileTimeValueTranscoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final FileTimeValueTranscoder transcoder = new FileTimeValueTranscoder();", "modifier": "private final", "type": "FileTimeValueTranscoder", "declarator": "transcoder = new FileTimeValueTranscoder()", "var_name": "transcoder"}], "file": "core/src/test/java/org/ldaptive/ad/transcode/FileTimeValueTranscoderTest.java"}, "test_case": {"identifier": "decodeStringValue", "parameters": "(final ZonedDateTime date, final String fileTime)", "modifiers": "@Test(groups = \"transcode\", dataProvider = \"times\") public", "return": "void", "body": "@Test(groups = \"transcode\", dataProvider = \"times\")\n  public void decodeStringValue(final ZonedDateTime date, final String fileTime)\n    throws Exception\n  {\n    Assert.assertEquals(transcoder.decodeStringValue(fileTime), date);\n  }", "signature": "void decodeStringValue(final ZonedDateTime date, final String fileTime)", "full_signature": "@Test(groups = \"transcode\", dataProvider = \"times\") public void decodeStringValue(final ZonedDateTime date, final String fileTime)", "class_method_signature": "FileTimeValueTranscoderTest.decodeStringValue(final ZonedDateTime date, final String fileTime)", "testcase": true, "constructor": false, "invocations": ["assertEquals", "decodeStringValue"]}, "focal_class": {"identifier": "FileTimeValueTranscoder", "superclass": "extends AbstractStringValueTranscoder<ZonedDateTime>", "interfaces": "", "fields": [{"original_string": "private static final long ERA_OFFSET = 11644473600000L;", "modifier": "private static final", "type": "long", "declarator": "ERA_OFFSET = 11644473600000L", "var_name": "ERA_OFFSET"}, {"original_string": "private static final long ONE_HUNDRED_NANOSECOND_INTERVAL = 10000L;", "modifier": "private static final", "type": "long", "declarator": "ONE_HUNDRED_NANOSECOND_INTERVAL = 10000L", "var_name": "ONE_HUNDRED_NANOSECOND_INTERVAL"}], "methods": [{"identifier": "decodeStringValue", "parameters": "(final String value)", "modifiers": "@Override public", "return": "ZonedDateTime", "signature": "ZonedDateTime decodeStringValue(final String value)", "full_signature": "@Override public ZonedDateTime decodeStringValue(final String value)", "class_method_signature": "FileTimeValueTranscoder.decodeStringValue(final String value)", "testcase": false, "constructor": false}, {"identifier": "encodeStringValue", "parameters": "(final ZonedDateTime value)", "modifiers": "@Override public", "return": "String", "signature": "String encodeStringValue(final ZonedDateTime value)", "full_signature": "@Override public String encodeStringValue(final ZonedDateTime value)", "class_method_signature": "FileTimeValueTranscoder.encodeStringValue(final ZonedDateTime value)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "@Override public", "return": "Class<ZonedDateTime>", "signature": "Class<ZonedDateTime> getType()", "full_signature": "@Override public Class<ZonedDateTime> getType()", "class_method_signature": "FileTimeValueTranscoder.getType()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/ldaptive/ad/transcode/FileTimeValueTranscoder.java"}, "focal_method": {"identifier": "decodeStringValue", "parameters": "(final String value)", "modifiers": "@Override public", "return": "ZonedDateTime", "body": "@Override\n  public ZonedDateTime decodeStringValue(final String value)\n  {\n    final Instant i = Instant.ofEpochMilli(Long.parseLong(value) / ONE_HUNDRED_NANOSECOND_INTERVAL - ERA_OFFSET);\n    return ZonedDateTime.ofInstant(i, ZoneId.of(\"Z\"));\n  }", "signature": "ZonedDateTime decodeStringValue(final String value)", "full_signature": "@Override public ZonedDateTime decodeStringValue(final String value)", "class_method_signature": "FileTimeValueTranscoder.decodeStringValue(final String value)", "testcase": false, "constructor": false, "invocations": ["ofEpochMilli", "parseLong", "ofInstant", "of"]}, "repository": {"repo_id": 25927306, "url": "https://github.com/vt-middleware/ldaptive", "stars": 32, "created": "10/29/2014 3:27:31 PM +00:00", "updates": "2020-01-14T22:18:12+00:00", "fork": "False", "license": "licensed"}}