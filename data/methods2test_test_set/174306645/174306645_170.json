{"test_class": {"identifier": "CollectedResourceTest", "superclass": "", "interfaces": "", "fields": [], "file": "kogito-codegen/src/test/java/org/kie/kogito/codegen/io/CollectedResourceTest.java"}, "test_case": {"identifier": "shouldNotContainDirectories", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void shouldNotContainDirectories() {\n        assertThat(\n                CollectedResource.fromDirectory(Paths.get(\"src/main/resources\"))\n                        .stream()\n                        .map(CollectedResource::resource)\n                        .map(Resource::getSourcePath)\n                        .map(File::new)\n                        .filter(File::isDirectory)\n                        .count()).isZero();\n    }", "signature": "void shouldNotContainDirectories()", "full_signature": "@Test void shouldNotContainDirectories()", "class_method_signature": "CollectedResourceTest.shouldNotContainDirectories()", "testcase": true, "constructor": false, "invocations": ["isZero", "assertThat", "count", "filter", "map", "map", "map", "stream", "fromDirectory", "get"]}, "focal_class": {"identifier": "CollectedResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Path basePath;", "modifier": "private final", "type": "Path", "declarator": "basePath", "var_name": "basePath"}, {"original_string": "private final Resource resource;", "modifier": "private final", "type": "Resource", "declarator": "resource", "var_name": "resource"}], "methods": [{"identifier": "fromPaths", "parameters": "(Path... paths)", "modifiers": "public static", "return": "Collection<CollectedResource>", "signature": "Collection<CollectedResource> fromPaths(Path... paths)", "full_signature": "public static Collection<CollectedResource> fromPaths(Path... paths)", "class_method_signature": "CollectedResource.fromPaths(Path... paths)", "testcase": false, "constructor": false}, {"identifier": "fromJarFile", "parameters": "(Path jarPath)", "modifiers": "public static", "return": "Collection<CollectedResource>", "signature": "Collection<CollectedResource> fromJarFile(Path jarPath)", "full_signature": "public static Collection<CollectedResource> fromJarFile(Path jarPath)", "class_method_signature": "CollectedResource.fromJarFile(Path jarPath)", "testcase": false, "constructor": false}, {"identifier": "fromDirectory", "parameters": "(Path path)", "modifiers": "public static", "return": "Collection<CollectedResource>", "signature": "Collection<CollectedResource> fromDirectory(Path path)", "full_signature": "public static Collection<CollectedResource> fromDirectory(Path path)", "class_method_signature": "CollectedResource.fromDirectory(Path path)", "testcase": false, "constructor": false}, {"identifier": "fromFiles", "parameters": "(Path basePath, File... files)", "modifiers": "public static", "return": "Collection<CollectedResource>", "signature": "Collection<CollectedResource> fromFiles(Path basePath, File... files)", "full_signature": "public static Collection<CollectedResource> fromFiles(Path basePath, File... files)", "class_method_signature": "CollectedResource.fromFiles(Path basePath, File... files)", "testcase": false, "constructor": false}, {"identifier": "CollectedResource", "parameters": "(Path basePath, Resource resource)", "modifiers": "public", "return": "", "signature": " CollectedResource(Path basePath, Resource resource)", "full_signature": "public  CollectedResource(Path basePath, Resource resource)", "class_method_signature": "CollectedResource.CollectedResource(Path basePath, Resource resource)", "testcase": false, "constructor": true}, {"identifier": "basePath", "parameters": "()", "modifiers": "public", "return": "Path", "signature": "Path basePath()", "full_signature": "public Path basePath()", "class_method_signature": "CollectedResource.basePath()", "testcase": false, "constructor": false}, {"identifier": "resource", "parameters": "()", "modifiers": "public", "return": "Resource", "signature": "Resource resource()", "full_signature": "public Resource resource()", "class_method_signature": "CollectedResource.resource()", "testcase": false, "constructor": false}], "file": "kogito-codegen/src/main/java/org/kie/kogito/codegen/io/CollectedResource.java"}, "focal_method": {"identifier": "fromDirectory", "parameters": "(Path path)", "modifiers": "public static", "return": "Collection<CollectedResource>", "body": "public static Collection<CollectedResource> fromDirectory(Path path) {\n        Collection<CollectedResource> resources = new ArrayList<>();\n        try (Stream<Path> paths = Files.walk(path)) {\n            paths.filter(Files::isRegularFile)\n                    .map(Path::toFile)\n                    .map(f -> new FileSystemResource(f)\n                            .setResourceType(determineResourceType(f.getName())))\n                    .map(f -> new CollectedResource(path, f))\n                    .forEach(resources::add);\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }\n        return resources;\n    }", "signature": "Collection<CollectedResource> fromDirectory(Path path)", "full_signature": "public static Collection<CollectedResource> fromDirectory(Path path)", "class_method_signature": "CollectedResource.fromDirectory(Path path)", "testcase": false, "constructor": false, "invocations": ["walk", "forEach", "map", "map", "map", "filter", "setResourceType", "determineResourceType", "getName"]}, "repository": {"repo_id": 174306645, "url": "https://github.com/kiegroup/kogito-runtimes", "stars": 78, "created": "3/7/2019 8:49:09 AM +00:00", "updates": "2020-01-26T20:41:49+00:00", "fork": "False", "license": "licensed"}}