{"test_class": {"identifier": "PostgresSchemaTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CollectionName collection;", "modifier": "private", "type": "CollectionName", "declarator": "collection", "var_name": "collection"}, {"original_string": "private QueryStatement statement;", "modifier": "private", "type": "QueryStatement", "declarator": "statement", "var_name": "statement"}, {"original_string": "private StringWriter body;", "modifier": "private", "type": "StringWriter", "declarator": "body", "var_name": "body"}], "file": "CoreFeatures/Database-postgresql/PostgresSchema/src/test/java/info/smart_tools/smartactors/database_postgresql/postgres_schema/PostgresSchemaTest.java"}, "test_case": {"identifier": "testCountWithEmptyFilter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCountWithEmptyFilter() throws InvalidArgumentException, QueryBuildException {\n        IObject criteria = new DSObject(\"{ \\\"filter\\\": { } }\");\n        PostgresSchema.count(statement, collection, criteria);\n        assertEquals(\"SELECT COUNT(*) FROM test_collection WHERE (TRUE)\", body.toString());\n        verify(statement, times(0)).pushParameterSetter(any());\n    }", "signature": "void testCountWithEmptyFilter()", "full_signature": "@Test public void testCountWithEmptyFilter()", "class_method_signature": "PostgresSchemaTest.testCountWithEmptyFilter()", "testcase": true, "constructor": false, "invocations": ["count", "assertEquals", "toString", "pushParameterSetter", "verify", "times", "any"]}, "focal_class": {"identifier": "PostgresSchema", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String DOCUMENT_COLUMN = \"document\";", "modifier": "public static final", "type": "String", "declarator": "DOCUMENT_COLUMN = \"document\"", "var_name": "DOCUMENT_COLUMN"}, {"original_string": "public static final String FULLTEXT_COLUMN = \"fulltext\";", "modifier": "public static final", "type": "String", "declarator": "FULLTEXT_COLUMN = \"fulltext\"", "var_name": "FULLTEXT_COLUMN"}, {"original_string": "public static final String ID_FIELD_PATTERN = \"%sID\";", "modifier": "public static final", "type": "String", "declarator": "ID_FIELD_PATTERN = \"%sID\"", "var_name": "ID_FIELD_PATTERN"}, {"original_string": "public static final String FTS_DICTIONARY = \"russian\";", "modifier": "public static final", "type": "String", "declarator": "FTS_DICTIONARY = \"russian\"", "var_name": "FTS_DICTIONARY"}, {"original_string": "public static final int DEFAULT_PAGE_SIZE = 100;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_PAGE_SIZE = 100", "var_name": "DEFAULT_PAGE_SIZE"}], "methods": [{"identifier": "PostgresSchema", "parameters": "()", "modifiers": "private", "return": "", "signature": " PostgresSchema()", "full_signature": "private  PostgresSchema()", "class_method_signature": "PostgresSchema.PostgresSchema()", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(final QueryStatement statement, final CollectionName collection, final IObject options)", "modifiers": "public static", "return": "void", "signature": "void create(final QueryStatement statement, final CollectionName collection, final IObject options)", "full_signature": "public static void create(final QueryStatement statement, final CollectionName collection, final IObject options)", "class_method_signature": "PostgresSchema.create(final QueryStatement statement, final CollectionName collection, final IObject options)", "testcase": false, "constructor": false}, {"identifier": "getIdFieldPath", "parameters": "(final CollectionName collection)", "modifiers": "public static", "return": "FieldPath", "signature": "FieldPath getIdFieldPath(final CollectionName collection)", "full_signature": "public static FieldPath getIdFieldPath(final CollectionName collection)", "class_method_signature": "PostgresSchema.getIdFieldPath(final CollectionName collection)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(final QueryStatement statement, final CollectionName collection)", "modifiers": "public static", "return": "void", "signature": "void insert(final QueryStatement statement, final CollectionName collection)", "full_signature": "public static void insert(final QueryStatement statement, final CollectionName collection)", "class_method_signature": "PostgresSchema.insert(final QueryStatement statement, final CollectionName collection)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(final QueryStatement statement, final CollectionName collection)", "modifiers": "public static", "return": "void", "signature": "void update(final QueryStatement statement, final CollectionName collection)", "full_signature": "public static void update(final QueryStatement statement, final CollectionName collection)", "class_method_signature": "PostgresSchema.update(final QueryStatement statement, final CollectionName collection)", "testcase": false, "constructor": false}, {"identifier": "getById", "parameters": "(final QueryStatement statement, final CollectionName collection)", "modifiers": "public static", "return": "void", "signature": "void getById(final QueryStatement statement, final CollectionName collection)", "full_signature": "public static void getById(final QueryStatement statement, final CollectionName collection)", "class_method_signature": "PostgresSchema.getById(final QueryStatement statement, final CollectionName collection)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(final QueryStatement statement, final CollectionName collection, final IObject criteria)", "modifiers": "public static", "return": "void", "signature": "void search(final QueryStatement statement, final CollectionName collection, final IObject criteria)", "full_signature": "public static void search(final QueryStatement statement, final CollectionName collection, final IObject criteria)", "class_method_signature": "PostgresSchema.search(final QueryStatement statement, final CollectionName collection, final IObject criteria)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(final QueryStatement statement, final CollectionName collection)", "modifiers": "public static", "return": "void", "signature": "void delete(final QueryStatement statement, final CollectionName collection)", "full_signature": "public static void delete(final QueryStatement statement, final CollectionName collection)", "class_method_signature": "PostgresSchema.delete(final QueryStatement statement, final CollectionName collection)", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "(final QueryStatement statement, final CollectionName collection, final IObject criteria)", "modifiers": "public static", "return": "void", "signature": "void count(final QueryStatement statement, final CollectionName collection, final IObject criteria)", "full_signature": "public static void count(final QueryStatement statement, final CollectionName collection, final IObject criteria)", "class_method_signature": "PostgresSchema.count(final QueryStatement statement, final CollectionName collection, final IObject criteria)", "testcase": false, "constructor": false}], "file": "CoreFeatures/Database-postgresql/PostgresSchema/src/main/java/info/smart_tools/smartactors/database_postgresql/postgres_schema/PostgresSchema.java"}, "focal_method": {"identifier": "count", "parameters": "(final QueryStatement statement, final CollectionName collection, final IObject criteria)", "modifiers": "public static", "return": "void", "body": "public static void count(final QueryStatement statement, final CollectionName collection, final IObject criteria)\n            throws QueryBuildException {\n        try {\n            Writer body = statement.getBodyWriter();\n\n            body.write(\"SELECT COUNT(*) FROM \");\n            body.write(collection.toString());\n\n            if (criteria == null) {\n                return;\n            }\n            SearchClauses.writeSearchWhere(statement, criteria);\n        } catch (Exception e) {\n            throw new QueryBuildException(\"Failed to build count query\", e);\n        }\n    }", "signature": "void count(final QueryStatement statement, final CollectionName collection, final IObject criteria)", "full_signature": "public static void count(final QueryStatement statement, final CollectionName collection, final IObject criteria)", "class_method_signature": "PostgresSchema.count(final QueryStatement statement, final CollectionName collection, final IObject criteria)", "testcase": false, "constructor": false, "invocations": ["getBodyWriter", "write", "write", "toString", "writeSearchWhere"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}