{"test_class": {"identifier": "TestBitSetUtils", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/dk/alexandra/fresco/framework/util/TestBitSetUtils.java"}, "test_case": {"identifier": "testInnerProduct", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testInnerProduct() {\n    BitSet a = new BitSet(8);\n    a.set(0);\n    a.set(5);\n    a.set(7);\n    BitSet b = new BitSet(8);\n    b.set(0);\n    b.set(5);\n    Assert.assertFalse(BitSetUtils.innerProduct(a, b));\n    b.set(1);\n    Assert.assertFalse(BitSetUtils.innerProduct(a, b));\n    b.set(7);\n    Assert.assertTrue(BitSetUtils.innerProduct(a, b));\n    BitSet c = new BitSet(10);\n    Assert.assertFalse(BitSetUtils.innerProduct(a, c));\n    c.set(10);\n    Assert.assertFalse(BitSetUtils.innerProduct(a, c));\n    c.set(0);\n    Assert.assertTrue(BitSetUtils.innerProduct(a, c));\n  }", "signature": "void testInnerProduct()", "full_signature": "@Test public void testInnerProduct()", "class_method_signature": "TestBitSetUtils.testInnerProduct()", "testcase": true, "constructor": false, "invocations": ["set", "set", "set", "set", "set", "assertFalse", "innerProduct", "set", "assertFalse", "innerProduct", "set", "assertTrue", "innerProduct", "assertFalse", "innerProduct", "set", "assertFalse", "innerProduct", "set", "assertTrue", "innerProduct"]}, "focal_class": {"identifier": "BitSetUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "BitSetUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " BitSetUtils()", "full_signature": "private  BitSetUtils()", "class_method_signature": "BitSetUtils.BitSetUtils()", "testcase": false, "constructor": true}, {"identifier": "copy", "parameters": "(BitSet b)", "modifiers": "public static", "return": "BitSet", "signature": "BitSet copy(BitSet b)", "full_signature": "public static BitSet copy(BitSet b)", "class_method_signature": "BitSetUtils.copy(BitSet b)", "testcase": false, "constructor": false}, {"identifier": "getRandomBits", "parameters": "(int n, Random random)", "modifiers": "public static", "return": "BitSet", "signature": "BitSet getRandomBits(int n, Random random)", "full_signature": "public static BitSet getRandomBits(int n, Random random)", "class_method_signature": "BitSetUtils.getRandomBits(int n, Random random)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(BitSet bits, int n)", "modifiers": "public static", "return": "String", "signature": "String toString(BitSet bits, int n)", "full_signature": "public static String toString(BitSet bits, int n)", "class_method_signature": "BitSetUtils.toString(BitSet bits, int n)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(BitSet bits)", "modifiers": "public static", "return": "String", "signature": "String toString(BitSet bits)", "full_signature": "public static String toString(BitSet bits)", "class_method_signature": "BitSetUtils.toString(BitSet bits)", "testcase": false, "constructor": false}, {"identifier": "innerProduct", "parameters": "(BitSet a, BitSet b)", "modifiers": "public static", "return": "boolean", "signature": "boolean innerProduct(BitSet a, BitSet b)", "full_signature": "public static boolean innerProduct(BitSet a, BitSet b)", "class_method_signature": "BitSetUtils.innerProduct(BitSet a, BitSet b)", "testcase": false, "constructor": false}, {"identifier": "isOdd", "parameters": "(int n)", "modifiers": "private static", "return": "boolean", "signature": "boolean isOdd(int n)", "full_signature": "private static boolean isOdd(int n)", "class_method_signature": "BitSetUtils.isOdd(int n)", "testcase": false, "constructor": false}, {"identifier": "fromList", "parameters": "(List<Boolean> list)", "modifiers": "public static", "return": "BitSet", "signature": "BitSet fromList(List<Boolean> list)", "full_signature": "public static BitSet fromList(List<Boolean> list)", "class_method_signature": "BitSetUtils.fromList(List<Boolean> list)", "testcase": false, "constructor": false}, {"identifier": "fromArray", "parameters": "(boolean[] array)", "modifiers": "public static", "return": "BitSet", "signature": "BitSet fromArray(boolean[] array)", "full_signature": "public static BitSet fromArray(boolean[] array)", "class_method_signature": "BitSetUtils.fromArray(boolean[] array)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(BitSet bitset, int length)", "modifiers": "public static", "return": "boolean[]", "signature": "boolean[] toArray(BitSet bitset, int length)", "full_signature": "public static boolean[] toArray(BitSet bitset, int length)", "class_method_signature": "BitSetUtils.toArray(BitSet bitset, int length)", "testcase": false, "constructor": false}, {"identifier": "toList", "parameters": "(BitSet bitset, int n)", "modifiers": "public static", "return": "List<Boolean>", "signature": "List<Boolean> toList(BitSet bitset, int n)", "full_signature": "public static List<Boolean> toList(BitSet bitset, int n)", "class_method_signature": "BitSetUtils.toList(BitSet bitset, int n)", "testcase": false, "constructor": false}], "file": "core/src/main/java/dk/alexandra/fresco/framework/util/BitSetUtils.java"}, "focal_method": {"identifier": "innerProduct", "parameters": "(BitSet a, BitSet b)", "modifiers": "public static", "return": "boolean", "body": "public static boolean innerProduct(BitSet a, BitSet b) {\n    BitSet buffer = copy(a);\n    buffer.and(b);\n    return isOdd(buffer.cardinality());\n  }", "signature": "boolean innerProduct(BitSet a, BitSet b)", "full_signature": "public static boolean innerProduct(BitSet a, BitSet b)", "class_method_signature": "BitSetUtils.innerProduct(BitSet a, BitSet b)", "testcase": false, "constructor": false, "invocations": ["copy", "and", "isOdd", "cardinality"]}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}