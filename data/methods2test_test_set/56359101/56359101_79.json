{"test_class": {"identifier": "AutonomicClusterManagementServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AutonomicClusterManagementService autonomicClusterManagementService;", "modifier": "private", "type": "AutonomicClusterManagementService", "declarator": "autonomicClusterManagementService", "var_name": "autonomicClusterManagementService"}, {"original_string": "@Mock\n    private ClusterJdbcDao clusterDaoJdbc;", "modifier": "@Mock\n    private", "type": "ClusterJdbcDao", "declarator": "clusterDaoJdbc", "var_name": "clusterDaoJdbc"}, {"original_string": "@Mock\n    private ClusterDao clusterDao;", "modifier": "@Mock\n    private", "type": "ClusterDao", "declarator": "clusterDao", "var_name": "clusterDao"}], "file": "autonomic-administration-plugin/src/test/java/br/com/autonomiccs/autonomic/administration/plugin/services/AutonomicClusterManagementServiceTest.java"}, "test_case": {"identifier": "canProcessClusterTestIsNotTimeYet", "parameters": "()", "modifiers": "@Test @PrepareForTest(AutonomicClusterManagementService.class) public", "return": "void", "body": "@Test\n    @PrepareForTest(AutonomicClusterManagementService.class)\n    public void canProcessClusterTestIsNotTimeYet() throws Exception {\n        ClusterAdministrationHeuristicAlgorithm algorithm = Mockito.mock(ClusterAdministrationHeuristicAlgorithm.class);\n        setCanProcessCluster(algorithm, getLastAdministrationDate(), 0, 1);\n\n        boolean result = autonomicClusterManagementService.canProcessCluster(0l, algorithm);\n\n        Assert.assertFalse(result);\n        verifyCanProcessClusterCalledMethods(algorithm, 1);\n    }", "signature": "void canProcessClusterTestIsNotTimeYet()", "full_signature": "@Test @PrepareForTest(AutonomicClusterManagementService.class) public void canProcessClusterTestIsNotTimeYet()", "class_method_signature": "AutonomicClusterManagementServiceTest.canProcessClusterTestIsNotTimeYet()", "testcase": true, "constructor": false, "invocations": ["mock", "setCanProcessCluster", "getLastAdministrationDate", "canProcessCluster", "assertFalse", "verifyCanProcessClusterCalledMethods"]}, "focal_class": {"identifier": "AutonomicClusterManagementService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(getClass());", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(getClass())", "var_name": "logger"}, {"original_string": "private static final long ONE_MINUTE_IN_MILLISECONDS = 60000;", "modifier": "private static final", "type": "long", "declarator": "ONE_MINUTE_IN_MILLISECONDS = 60000", "var_name": "ONE_MINUTE_IN_MILLISECONDS"}, {"original_string": "private static final int NUMBER_OF_MINUTES_BETWEEN_CHECKS = 180;", "modifier": "private static final", "type": "int", "declarator": "NUMBER_OF_MINUTES_BETWEEN_CHECKS = 180", "var_name": "NUMBER_OF_MINUTES_BETWEEN_CHECKS"}, {"original_string": "@Autowired\n    protected ClusterJdbcDao clusterDaoJdbc;", "modifier": "@Autowired\n    protected", "type": "ClusterJdbcDao", "declarator": "clusterDaoJdbc", "var_name": "clusterDaoJdbc"}, {"original_string": "@Autowired\n    protected ClusterDao clusterDao;", "modifier": "@Autowired\n    protected", "type": "ClusterDao", "declarator": "clusterDao", "var_name": "clusterDao"}], "methods": [{"identifier": "isClusterBeingAdministrated", "parameters": "(long id)", "modifiers": "public", "return": "boolean", "signature": "boolean isClusterBeingAdministrated(long id)", "full_signature": "public boolean isClusterBeingAdministrated(long id)", "class_method_signature": "AutonomicClusterManagementService.isClusterBeingAdministrated(long id)", "testcase": false, "constructor": false}, {"identifier": "canProcessCluster", "parameters": "(long clusterId, ClusterAdministrationHeuristicAlgorithm algorithm)", "modifiers": "public", "return": "boolean", "signature": "boolean canProcessCluster(long clusterId, ClusterAdministrationHeuristicAlgorithm algorithm)", "full_signature": "public boolean canProcessCluster(long clusterId, ClusterAdministrationHeuristicAlgorithm algorithm)", "class_method_signature": "AutonomicClusterManagementService.canProcessCluster(long clusterId, ClusterAdministrationHeuristicAlgorithm algorithm)", "testcase": false, "constructor": false}, {"identifier": "setClusterWorkInProgress", "parameters": "(long clusterId)", "modifiers": "@Transactional(readOnly = false) public", "return": "void", "signature": "void setClusterWorkInProgress(long clusterId)", "full_signature": "@Transactional(readOnly = false) public void setClusterWorkInProgress(long clusterId)", "class_method_signature": "AutonomicClusterManagementService.setClusterWorkInProgress(long clusterId)", "testcase": false, "constructor": false}, {"identifier": "markAdministrationStatusInClusterAsDone", "parameters": "(long clusterId)", "modifiers": "@Transactional(readOnly = false) public", "return": "void", "signature": "void markAdministrationStatusInClusterAsDone(long clusterId)", "full_signature": "@Transactional(readOnly = false) public void markAdministrationStatusInClusterAsDone(long clusterId)", "class_method_signature": "AutonomicClusterManagementService.markAdministrationStatusInClusterAsDone(long clusterId)", "testcase": false, "constructor": false}, {"identifier": "removeClusterStuckProcessing", "parameters": "()", "modifiers": "@Transactional(readOnly = false) @Scheduled(initialDelay = ONE_MINUTE_IN_MILLISECONDS, fixedDelay = ONE_MINUTE_IN_MILLISECONDS * NUMBER_OF_MINUTES_BETWEEN_CHECKS) public", "return": "void", "signature": "void removeClusterStuckProcessing()", "full_signature": "@Transactional(readOnly = false) @Scheduled(initialDelay = ONE_MINUTE_IN_MILLISECONDS, fixedDelay = ONE_MINUTE_IN_MILLISECONDS * NUMBER_OF_MINUTES_BETWEEN_CHECKS) public void removeClusterStuckProcessing()", "class_method_signature": "AutonomicClusterManagementService.removeClusterStuckProcessing()", "testcase": false, "constructor": false}], "file": "autonomic-administration-plugin/src/main/java/br/com/autonomiccs/autonomic/administration/plugin/services/AutonomicClusterManagementService.java"}, "focal_method": {"identifier": "canProcessCluster", "parameters": "(long clusterId, ClusterAdministrationHeuristicAlgorithm algorithm)", "modifiers": "public", "return": "boolean", "body": "public boolean canProcessCluster(long clusterId, ClusterAdministrationHeuristicAlgorithm algorithm) {\n        Date lastAdministration = clusterDaoJdbc.getClusterLastAdminstration(clusterId);\n        if (lastAdministration == null) {\n            return true;\n        }\n        Calendar lastAdministrationCalendar = Calendar.getInstance();\n        lastAdministrationCalendar.setTime(lastAdministration);\n        lastAdministrationCalendar.add(Calendar.SECOND, algorithm.getClusterIntervalBetweenConsolidation());\n        Calendar calendarNow = Calendar.getInstance();\n        return lastAdministrationCalendar.before(calendarNow);\n    }", "signature": "boolean canProcessCluster(long clusterId, ClusterAdministrationHeuristicAlgorithm algorithm)", "full_signature": "public boolean canProcessCluster(long clusterId, ClusterAdministrationHeuristicAlgorithm algorithm)", "class_method_signature": "AutonomicClusterManagementService.canProcessCluster(long clusterId, ClusterAdministrationHeuristicAlgorithm algorithm)", "testcase": false, "constructor": false, "invocations": ["getClusterLastAdminstration", "getInstance", "setTime", "add", "getClusterIntervalBetweenConsolidation", "getInstance", "before"]}, "repository": {"repo_id": 56359101, "url": "https://github.com/Autonomiccs/autonomiccs-platform", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 944, "license": "licensed"}}