{"test_class": {"identifier": "PolicyEngineTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PolicyEngine testee = PolicyEngineConfigurator.configure(PolicyEngineTestdata.RULESET_CONFIG);", "modifier": "private", "type": "PolicyEngine", "declarator": "testee = PolicyEngineConfigurator.configure(PolicyEngineTestdata.RULESET_CONFIG)", "var_name": "testee"}], "file": "modules/policy/engine/src/test/java/org/eclipse/sw360/antenna/policy/engine/PolicyEngineTest.java"}, "test_case": {"identifier": "testRuleEvaluationRun", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRuleEvaluationRun() {\n        Collection<PolicyViolation> result = testee.evaluate(PolicyEngineTestdata.ARTIFACTS);\n        assertThat(result).isNotNull();\n        assertThat(result.size()).isEqualTo(2);\n        Collection<String> ruleIds = result.stream().map(PolicyViolation::getId).distinct().collect(\n                Collectors.toList());\n        assertThat(ruleIds.size()).isEqualTo(1);\n        ruleIds.forEach(ruleId -> assertThat(ruleId).isEqualTo(PolicyEngineTestdata.ALWAYS_VIOLATED_ID));\n        result.stream().forEach(hashbase -> assertThat(hashbase.getViolationHash()).isEqualTo(\"msVGMmZSMtsiR8fbvd31Sw==\"));\n    }", "signature": "void testRuleEvaluationRun()", "full_signature": "@Test public void testRuleEvaluationRun()", "class_method_signature": "PolicyEngineTest.testRuleEvaluationRun()", "testcase": true, "constructor": false, "invocations": ["evaluate", "isNotNull", "assertThat", "isEqualTo", "assertThat", "size", "collect", "distinct", "map", "stream", "toList", "isEqualTo", "assertThat", "size", "forEach", "isEqualTo", "assertThat", "forEach", "stream", "isEqualTo", "assertThat", "getViolationHash"]}, "focal_class": {"identifier": "PolicyEngine", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(PolicyEngine.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(PolicyEngine.class)", "var_name": "LOGGER"}, {"original_string": "private final Collection<RuleExecutor> executors;", "modifier": "private final", "type": "Collection<RuleExecutor>", "declarator": "executors", "var_name": "executors"}], "methods": [{"identifier": "PolicyEngine", "parameters": "(final Collection<RuleExecutor> executors)", "modifiers": "public", "return": "", "signature": " PolicyEngine(final Collection<RuleExecutor> executors)", "full_signature": "public  PolicyEngine(final Collection<RuleExecutor> executors)", "class_method_signature": "PolicyEngine.PolicyEngine(final Collection<RuleExecutor> executors)", "testcase": false, "constructor": true}, {"identifier": "evaluate", "parameters": "(final Collection<ThirdPartyArtifact> thirdPartyArtifacts)", "modifiers": "public", "return": "Collection<PolicyViolation>", "signature": "Collection<PolicyViolation> evaluate(final Collection<ThirdPartyArtifact> thirdPartyArtifacts)", "full_signature": "public Collection<PolicyViolation> evaluate(final Collection<ThirdPartyArtifact> thirdPartyArtifacts)", "class_method_signature": "PolicyEngine.evaluate(final Collection<ThirdPartyArtifact> thirdPartyArtifacts)", "testcase": false, "constructor": false}, {"identifier": "getRulesets", "parameters": "()", "modifiers": "public", "return": "Collection<Ruleset>", "signature": "Collection<Ruleset> getRulesets()", "full_signature": "public Collection<Ruleset> getRulesets()", "class_method_signature": "PolicyEngine.getRulesets()", "testcase": false, "constructor": false}], "file": "modules/policy/engine/src/main/java/org/eclipse/sw360/antenna/policy/engine/PolicyEngine.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(final Collection<ThirdPartyArtifact> thirdPartyArtifacts)", "modifiers": "public", "return": "Collection<PolicyViolation>", "body": "public Collection<PolicyViolation> evaluate(final Collection<ThirdPartyArtifact> thirdPartyArtifacts) {\n        LOGGER.debug(\"Artifacts are \" + thirdPartyArtifacts.stream()\n                .map(ThirdPartyArtifact::getCoordinates)\n                .flatMap(Collection::stream)\n                .map(Coordinate::canonicalize)\n                .collect(Collectors.joining(\",\", \"[\", \"]\")));\n\n        Collection<PolicyViolation> violations =  executors.parallelStream()\n                .map(executor -> executor.executeRules(thirdPartyArtifacts))\n                .flatMap(Collection::stream)\n                .collect(Collectors.toList());\n\n        if (violations.size() > 0) {\n            LOGGER.warn(\"Number of violations found: \" + violations.size());\n        } else {\n            LOGGER.info(\"No violations found\");\n        }\n\n        return violations;\n    }", "signature": "Collection<PolicyViolation> evaluate(final Collection<ThirdPartyArtifact> thirdPartyArtifacts)", "full_signature": "public Collection<PolicyViolation> evaluate(final Collection<ThirdPartyArtifact> thirdPartyArtifacts)", "class_method_signature": "PolicyEngine.evaluate(final Collection<ThirdPartyArtifact> thirdPartyArtifacts)", "testcase": false, "constructor": false, "invocations": ["debug", "collect", "map", "flatMap", "map", "stream", "joining", "collect", "flatMap", "map", "parallelStream", "executeRules", "toList", "size", "warn", "size", "info"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}