{"test_class": {"identifier": "FileWriterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String FILE_NAME = \"testFile.txt\";", "modifier": "private static final", "type": "String", "declarator": "FILE_NAME = \"testFile.txt\"", "var_name": "FILE_NAME"}, {"original_string": "private static final String EXCEPTION_MESSAGE = \"exception\";", "modifier": "private static final", "type": "String", "declarator": "EXCEPTION_MESSAGE = \"exception\"", "var_name": "EXCEPTION_MESSAGE"}, {"original_string": "private static final String DIRECTORIES = \"\";", "modifier": "private static final", "type": "String", "declarator": "DIRECTORIES = \"\"", "var_name": "DIRECTORIES"}, {"original_string": "private static final byte[] FILE_AS_BYTES = new byte[0];", "modifier": "private static final", "type": "byte[]", "declarator": "FILE_AS_BYTES = new byte[0]", "var_name": "FILE_AS_BYTES"}, {"original_string": "@Mock\n    private FileOutputStreamFactory fileOutputStreamFactory;", "modifier": "@Mock\n    private", "type": "FileOutputStreamFactory", "declarator": "fileOutputStreamFactory", "var_name": "fileOutputStreamFactory"}, {"original_string": "@Mock\n    private FileOutputStream fileOutputStream;", "modifier": "@Mock\n    private", "type": "FileOutputStream", "declarator": "fileOutputStream", "var_name": "fileOutputStream"}, {"original_string": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\n    private FileFactory fileFactory;", "modifier": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\n    private", "type": "FileFactory", "declarator": "fileFactory", "var_name": "fileFactory"}, {"original_string": "@Mock\n    private File file;", "modifier": "@Mock\n    private", "type": "File", "declarator": "file", "var_name": "file"}, {"original_string": "@Mock\n    private InputStream inputStream;", "modifier": "@Mock\n    private", "type": "InputStream", "declarator": "inputStream", "var_name": "inputStream"}, {"original_string": "@Mock\n    private ByteArrayInputStreamFactory byteArrayInputStreamFactory;", "modifier": "@Mock\n    private", "type": "ByteArrayInputStreamFactory", "declarator": "byteArrayInputStreamFactory", "var_name": "byteArrayInputStreamFactory"}, {"original_string": "@Mock\n    private ByteArrayInputStream byteArrayInputStream;", "modifier": "@Mock\n    private", "type": "ByteArrayInputStream", "declarator": "byteArrayInputStream", "var_name": "byteArrayInputStream"}, {"original_string": "@Mock\n    private ClassFilePathAssembler classFilePathAssembler;", "modifier": "@Mock\n    private", "type": "ClassFilePathAssembler", "declarator": "classFilePathAssembler", "var_name": "classFilePathAssembler"}, {"original_string": "@Mock\n    private InputStreamUtil inputStreamUtil;", "modifier": "@Mock\n    private", "type": "InputStreamUtil", "declarator": "inputStreamUtil", "var_name": "inputStreamUtil"}, {"original_string": "@Mock\n    private JarValidator jarValidator;", "modifier": "@Mock\n    private", "type": "JarValidator", "declarator": "jarValidator", "var_name": "jarValidator"}, {"original_string": "@InjectMocks\n    private FileWriter underTest;", "modifier": "@InjectMocks\n    private", "type": "FileWriter", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-webapp/src/test/java/com/epam/wilma/webapp/config/servlet/stub/upload/helper/FileWriterTest.java"}, "test_case": {"identifier": "testWriteShouldCloseOutputStream", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWriteShouldCloseOutputStream() throws IOException {\n        //GIVEN\n        given(file.getParent()).willReturn(DIRECTORIES);\n        given(fileOutputStreamFactory.createFileOutputStream(file)).willReturn(fileOutputStream);\n        //WHEN\n        underTest.write(inputStream, FILE_NAME, EXCEPTION_MESSAGE);\n        //THEN\n        verify(fileOutputStream).close();\n    }", "signature": "void testWriteShouldCloseOutputStream()", "full_signature": "@Test public void testWriteShouldCloseOutputStream()", "class_method_signature": "FileWriterTest.testWriteShouldCloseOutputStream()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "getParent", "willReturn", "given", "createFileOutputStream", "write", "close", "verify"]}, "focal_class": {"identifier": "FileWriter", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private FileOutputStreamFactory fileOutputStreamFactory;", "modifier": "@Autowired\n    private", "type": "FileOutputStreamFactory", "declarator": "fileOutputStreamFactory", "var_name": "fileOutputStreamFactory"}, {"original_string": "@Autowired\n    private FileFactory fileFactory;", "modifier": "@Autowired\n    private", "type": "FileFactory", "declarator": "fileFactory", "var_name": "fileFactory"}, {"original_string": "@Autowired\n    private ClassFilePathAssembler classFilePathAssembler;", "modifier": "@Autowired\n    private", "type": "ClassFilePathAssembler", "declarator": "classFilePathAssembler", "var_name": "classFilePathAssembler"}, {"original_string": "@Autowired\n    private ByteArrayInputStreamFactory byteArrayInputStreamFactory;", "modifier": "@Autowired\n    private", "type": "ByteArrayInputStreamFactory", "declarator": "byteArrayInputStreamFactory", "var_name": "byteArrayInputStreamFactory"}, {"original_string": "@Autowired\n    private InputStreamUtil inputStreamUtil;", "modifier": "@Autowired\n    private", "type": "InputStreamUtil", "declarator": "inputStreamUtil", "var_name": "inputStreamUtil"}, {"original_string": "@Autowired\n    private JarValidator jarValidator;", "modifier": "@Autowired\n    private", "type": "JarValidator", "declarator": "jarValidator", "var_name": "jarValidator"}], "methods": [{"identifier": "write", "parameters": "(final InputStream inputStream, final String fileName, final String exceptionMessage)", "modifiers": "public", "return": "void", "signature": "void write(final InputStream inputStream, final String fileName, final String exceptionMessage)", "full_signature": "public void write(final InputStream inputStream, final String fileName, final String exceptionMessage)", "class_method_signature": "FileWriter.write(final InputStream inputStream, final String fileName, final String exceptionMessage)", "testcase": false, "constructor": false}, {"identifier": "writeOther", "parameters": "(final String fileName, final InputStream inputStream, final String exceptionMessage)", "modifiers": "private", "return": "void", "signature": "void writeOther(final String fileName, final InputStream inputStream, final String exceptionMessage)", "full_signature": "private void writeOther(final String fileName, final InputStream inputStream, final String exceptionMessage)", "class_method_signature": "FileWriter.writeOther(final String fileName, final InputStream inputStream, final String exceptionMessage)", "testcase": false, "constructor": false}, {"identifier": "writeClass", "parameters": "(final String fileName, final InputStream inputStream, final String exceptionMessage)", "modifiers": "private", "return": "void", "signature": "void writeClass(final String fileName, final InputStream inputStream, final String exceptionMessage)", "full_signature": "private void writeClass(final String fileName, final InputStream inputStream, final String exceptionMessage)", "class_method_signature": "FileWriter.writeClass(final String fileName, final InputStream inputStream, final String exceptionMessage)", "testcase": false, "constructor": false}, {"identifier": "writeJar", "parameters": "(final String fileName, final InputStream inputStream, final String exceptionMessage)", "modifiers": "private", "return": "void", "signature": "void writeJar(final String fileName, final InputStream inputStream, final String exceptionMessage)", "full_signature": "private void writeJar(final String fileName, final InputStream inputStream, final String exceptionMessage)", "class_method_signature": "FileWriter.writeJar(final String fileName, final InputStream inputStream, final String exceptionMessage)", "testcase": false, "constructor": false}, {"identifier": "writeFile", "parameters": "(final String filePath, final InputStream inputStreamToWrite)", "modifiers": "private", "return": "void", "signature": "void writeFile(final String filePath, final InputStream inputStreamToWrite)", "full_signature": "private void writeFile(final String filePath, final InputStream inputStreamToWrite)", "class_method_signature": "FileWriter.writeFile(final String filePath, final InputStream inputStreamToWrite)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-webapp/src/main/java/com/epam/wilma/webapp/config/servlet/stub/upload/helper/FileWriter.java"}, "focal_method": {"identifier": "write", "parameters": "(final InputStream inputStream, final String fileName, final String exceptionMessage)", "modifiers": "public", "return": "void", "body": "public void write(final InputStream inputStream, final String fileName, final String exceptionMessage) {\n        boolean isClass = fileName.endsWith(\".class\");\n        boolean isJar = fileName.endsWith(\".jar\");\n        if (isClass) {\n            writeClass(fileName, inputStream, exceptionMessage);\n        } else if (isJar) {\n            writeJar(fileName, inputStream, exceptionMessage);\n        } else {\n            writeOther(fileName, inputStream, exceptionMessage);\n        }\n    }", "signature": "void write(final InputStream inputStream, final String fileName, final String exceptionMessage)", "full_signature": "public void write(final InputStream inputStream, final String fileName, final String exceptionMessage)", "class_method_signature": "FileWriter.write(final InputStream inputStream, final String fileName, final String exceptionMessage)", "testcase": false, "constructor": false, "invocations": ["endsWith", "endsWith", "writeClass", "writeJar", "writeOther"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}