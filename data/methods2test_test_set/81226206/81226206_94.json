{"test_class": {"identifier": "RunnerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(RunnerTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(RunnerTest.class)", "var_name": "logger"}], "file": "karate-core/src/test/java/com/intuit/karate/RunnerTest.java"}, "test_case": {"identifier": "testParallel", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test \n    public void testParallel() {\n        Results results = Runner.parallel(getClass(), 1);\n        assertEquals(2, results.getFailCount());\n        String pathBase = \"target/surefire-reports/com.intuit.karate.\";\n        assertTrue(contains(pathBase + \"core.scenario.xml\", \"Then match b == { foo: 'bar'}\"));\n        assertTrue(contains(pathBase + \"core.outline.xml\", \"Then assert a == 55\"));\n        assertTrue(contains(pathBase + \"multi-scenario.xml\", \"Then assert a != 2\"));\n        // a scenario failure should not stop other features from running\n        assertTrue(contains(pathBase + \"multi-scenario-fail.xml\", \"Then assert a != 2 ........................................................ passed\"));\n        assertEquals(2, results.getFailedMap().size());\n        assertTrue(results.getFailedMap().keySet().contains(\"com.intuit.karate.no-scenario-name\"));\n        assertTrue(results.getFailedMap().keySet().contains(\"com.intuit.karate.multi-scenario-fail\"));\n    }", "signature": "void testParallel()", "full_signature": "@Test public void testParallel()", "class_method_signature": "RunnerTest.testParallel()", "testcase": true, "constructor": false, "invocations": ["parallel", "getClass", "assertEquals", "getFailCount", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertEquals", "size", "getFailedMap", "assertTrue", "contains", "keySet", "getFailedMap", "assertTrue", "contains", "keySet", "getFailedMap"]}, "focal_class": {"identifier": "Runner", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final org.slf4j.Logger LOGGER = LoggerFactory.getLogger(Runner.class);", "modifier": "private static final", "type": "org.slf4j.Logger", "declarator": "LOGGER = LoggerFactory.getLogger(Runner.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "path", "parameters": "(String... paths)", "modifiers": "public static", "return": "Builder", "signature": "Builder path(String... paths)", "full_signature": "public static Builder path(String... paths)", "class_method_signature": "Runner.path(String... paths)", "testcase": false, "constructor": false}, {"identifier": "path", "parameters": "(List<String> paths)", "modifiers": "public static", "return": "Builder", "signature": "Builder path(List<String> paths)", "full_signature": "public static Builder path(List<String> paths)", "class_method_signature": "Runner.path(List<String> paths)", "testcase": false, "constructor": false}, {"identifier": "parallel", "parameters": "(Class<?> clazz, int threadCount)", "modifiers": "public static", "return": "Results", "signature": "Results parallel(Class<?> clazz, int threadCount)", "full_signature": "public static Results parallel(Class<?> clazz, int threadCount)", "class_method_signature": "Runner.parallel(Class<?> clazz, int threadCount)", "testcase": false, "constructor": false}, {"identifier": "parallel", "parameters": "(Class<?> clazz, int threadCount, String reportDir)", "modifiers": "public static", "return": "Results", "signature": "Results parallel(Class<?> clazz, int threadCount, String reportDir)", "full_signature": "public static Results parallel(Class<?> clazz, int threadCount, String reportDir)", "class_method_signature": "Runner.parallel(Class<?> clazz, int threadCount, String reportDir)", "testcase": false, "constructor": false}, {"identifier": "parallel", "parameters": "(List<String> tags, List<String> paths, int threadCount, String reportDir)", "modifiers": "public static", "return": "Results", "signature": "Results parallel(List<String> tags, List<String> paths, int threadCount, String reportDir)", "full_signature": "public static Results parallel(List<String> tags, List<String> paths, int threadCount, String reportDir)", "class_method_signature": "Runner.parallel(List<String> tags, List<String> paths, int threadCount, String reportDir)", "testcase": false, "constructor": false}, {"identifier": "parallel", "parameters": "(int threadCount, String... tagsOrPaths)", "modifiers": "public static", "return": "Results", "signature": "Results parallel(int threadCount, String... tagsOrPaths)", "full_signature": "public static Results parallel(int threadCount, String... tagsOrPaths)", "class_method_signature": "Runner.parallel(int threadCount, String... tagsOrPaths)", "testcase": false, "constructor": false}, {"identifier": "parallel", "parameters": "(String reportDir, int threadCount, String... tagsOrPaths)", "modifiers": "public static", "return": "Results", "signature": "Results parallel(String reportDir, int threadCount, String... tagsOrPaths)", "full_signature": "public static Results parallel(String reportDir, int threadCount, String... tagsOrPaths)", "class_method_signature": "Runner.parallel(String reportDir, int threadCount, String... tagsOrPaths)", "testcase": false, "constructor": false}, {"identifier": "parallel", "parameters": "(List<String> tags, List<String> paths, String scenarioName,\n            List<ExecutionHook> hooks, int threadCount, String reportDir)", "modifiers": "public static", "return": "Results", "signature": "Results parallel(List<String> tags, List<String> paths, String scenarioName,\n            List<ExecutionHook> hooks, int threadCount, String reportDir)", "full_signature": "public static Results parallel(List<String> tags, List<String> paths, String scenarioName,\n            List<ExecutionHook> hooks, int threadCount, String reportDir)", "class_method_signature": "Runner.parallel(List<String> tags, List<String> paths, String scenarioName,\n            List<ExecutionHook> hooks, int threadCount, String reportDir)", "testcase": false, "constructor": false}, {"identifier": "parallel", "parameters": "(List<Resource> resources, int threadCount, String reportDir)", "modifiers": "public static", "return": "Results", "signature": "Results parallel(List<Resource> resources, int threadCount, String reportDir)", "full_signature": "public static Results parallel(List<Resource> resources, int threadCount, String reportDir)", "class_method_signature": "Runner.parallel(List<Resource> resources, int threadCount, String reportDir)", "testcase": false, "constructor": false}, {"identifier": "onFeatureDone", "parameters": "(Results results, ExecutionContext execContext, String reportDir, int index, int count)", "modifiers": "private static", "return": "void", "signature": "void onFeatureDone(Results results, ExecutionContext execContext, String reportDir, int index, int count)", "full_signature": "private static void onFeatureDone(Results results, ExecutionContext execContext, String reportDir, int index, int count)", "class_method_signature": "Runner.onFeatureDone(Results results, ExecutionContext execContext, String reportDir, int index, int count)", "testcase": false, "constructor": false}, {"identifier": "parallel", "parameters": "(Builder options)", "modifiers": "public static", "return": "Results", "signature": "Results parallel(Builder options)", "full_signature": "public static Results parallel(Builder options)", "class_method_signature": "Runner.parallel(Builder options)", "testcase": false, "constructor": false}, {"identifier": "runFeature", "parameters": "(Feature feature, Map<String, Object> vars, boolean evalKarateConfig)", "modifiers": "public static", "return": "Map<String, Object>", "signature": "Map<String, Object> runFeature(Feature feature, Map<String, Object> vars, boolean evalKarateConfig)", "full_signature": "public static Map<String, Object> runFeature(Feature feature, Map<String, Object> vars, boolean evalKarateConfig)", "class_method_signature": "Runner.runFeature(Feature feature, Map<String, Object> vars, boolean evalKarateConfig)", "testcase": false, "constructor": false}, {"identifier": "runFeature", "parameters": "(File file, Map<String, Object> vars, boolean evalKarateConfig)", "modifiers": "public static", "return": "Map<String, Object>", "signature": "Map<String, Object> runFeature(File file, Map<String, Object> vars, boolean evalKarateConfig)", "full_signature": "public static Map<String, Object> runFeature(File file, Map<String, Object> vars, boolean evalKarateConfig)", "class_method_signature": "Runner.runFeature(File file, Map<String, Object> vars, boolean evalKarateConfig)", "testcase": false, "constructor": false}, {"identifier": "runFeature", "parameters": "(Class relativeTo, String path, Map<String, Object> vars, boolean evalKarateConfig)", "modifiers": "public static", "return": "Map<String, Object>", "signature": "Map<String, Object> runFeature(Class relativeTo, String path, Map<String, Object> vars, boolean evalKarateConfig)", "full_signature": "public static Map<String, Object> runFeature(Class relativeTo, String path, Map<String, Object> vars, boolean evalKarateConfig)", "class_method_signature": "Runner.runFeature(Class relativeTo, String path, Map<String, Object> vars, boolean evalKarateConfig)", "testcase": false, "constructor": false}, {"identifier": "runFeature", "parameters": "(String path, Map<String, Object> vars, boolean evalKarateConfig)", "modifiers": "public static", "return": "Map<String, Object>", "signature": "Map<String, Object> runFeature(String path, Map<String, Object> vars, boolean evalKarateConfig)", "full_signature": "public static Map<String, Object> runFeature(String path, Map<String, Object> vars, boolean evalKarateConfig)", "class_method_signature": "Runner.runFeature(String path, Map<String, Object> vars, boolean evalKarateConfig)", "testcase": false, "constructor": false}, {"identifier": "callAsync", "parameters": "(String path, List<String> tags, Map<String, Object> arg, ExecutionHook hook, Consumer<Runnable> system, Runnable next)", "modifiers": "public static", "return": "void", "signature": "void callAsync(String path, List<String> tags, Map<String, Object> arg, ExecutionHook hook, Consumer<Runnable> system, Runnable next)", "full_signature": "public static void callAsync(String path, List<String> tags, Map<String, Object> arg, ExecutionHook hook, Consumer<Runnable> system, Runnable next)", "class_method_signature": "Runner.callAsync(String path, List<String> tags, Map<String, Object> arg, ExecutionHook hook, Consumer<Runnable> system, Runnable next)", "testcase": false, "constructor": false}], "file": "karate-core/src/main/java/com/intuit/karate/Runner.java"}, "focal_method": {"identifier": "parallel", "parameters": "(Class<?> clazz, int threadCount)", "modifiers": "public static", "return": "Results", "body": "public static Results parallel(Class<?> clazz, int threadCount) {\n        return parallel(clazz, threadCount, null);\n    }", "signature": "Results parallel(Class<?> clazz, int threadCount)", "full_signature": "public static Results parallel(Class<?> clazz, int threadCount)", "class_method_signature": "Runner.parallel(Class<?> clazz, int threadCount)", "testcase": false, "constructor": false, "invocations": ["parallel"]}, "repository": {"repo_id": 81226206, "url": "https://github.com/intuit/karate", "stars": 2712, "created": "2/7/2017 3:59:17 PM +00:00", "updates": "2020-01-27T21:00:57+00:00", "fork": "False", "license": "licensed"}}