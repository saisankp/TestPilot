{"test_class": {"identifier": "ColorItemTest", "superclass": "", "interfaces": "", "fields": [], "file": "bundles/org.openhab.core/src/test/java/org/openhab/core/library/items/ColorItemTest.java"}, "test_case": {"identifier": "testSetStateWithOnOffType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSetStateWithOnOffType() {\n        ColorItem item = new ColorItem(\"test\");\n        item.setState(OnOffType.ON);\n        assertEquals(new HSBType(\"0,0,100\"), item.getState());\n        item.setState(OnOffType.OFF);\n        assertEquals(new HSBType(\"0,0,0\"), item.getState());\n    }", "signature": "void testSetStateWithOnOffType()", "full_signature": "@Test public void testSetStateWithOnOffType()", "class_method_signature": "ColorItemTest.testSetStateWithOnOffType()", "testcase": true, "constructor": false, "invocations": ["setState", "assertEquals", "getState", "setState", "assertEquals", "getState"]}, "focal_class": {"identifier": "ColorItem", "superclass": "extends DimmerItem", "interfaces": "", "fields": [{"original_string": "private static List<Class<? extends State>> acceptedDataTypes = new ArrayList<>();", "modifier": "private static", "type": "List<Class<? extends State>>", "declarator": "acceptedDataTypes = new ArrayList<>()", "var_name": "acceptedDataTypes"}, {"original_string": "private static List<Class<? extends Command>> acceptedCommandTypes = new ArrayList<>();", "modifier": "private static", "type": "List<Class<? extends Command>>", "declarator": "acceptedCommandTypes = new ArrayList<>()", "var_name": "acceptedCommandTypes"}], "methods": [{"identifier": "ColorItem", "parameters": "(String name)", "modifiers": "public", "return": "", "signature": " ColorItem(String name)", "full_signature": "public  ColorItem(String name)", "class_method_signature": "ColorItem.ColorItem(String name)", "testcase": false, "constructor": true}, {"identifier": "send", "parameters": "(HSBType command)", "modifiers": "public", "return": "void", "signature": "void send(HSBType command)", "full_signature": "public void send(HSBType command)", "class_method_signature": "ColorItem.send(HSBType command)", "testcase": false, "constructor": false}, {"identifier": "getAcceptedDataTypes", "parameters": "()", "modifiers": "@Override public", "return": "List<Class<? extends State>>", "signature": "List<Class<? extends State>> getAcceptedDataTypes()", "full_signature": "@Override public List<Class<? extends State>> getAcceptedDataTypes()", "class_method_signature": "ColorItem.getAcceptedDataTypes()", "testcase": false, "constructor": false}, {"identifier": "getAcceptedCommandTypes", "parameters": "()", "modifiers": "@Override public", "return": "List<Class<? extends Command>>", "signature": "List<Class<? extends Command>> getAcceptedCommandTypes()", "full_signature": "@Override public List<Class<? extends Command>> getAcceptedCommandTypes()", "class_method_signature": "ColorItem.getAcceptedCommandTypes()", "testcase": false, "constructor": false}, {"identifier": "setState", "parameters": "(State state)", "modifiers": "@Override public", "return": "void", "signature": "void setState(State state)", "full_signature": "@Override public void setState(State state)", "class_method_signature": "ColorItem.setState(State state)", "testcase": false, "constructor": false}], "file": "bundles/org.openhab.core/src/main/java/org/openhab/core/library/items/ColorItem.java"}, "focal_method": {"identifier": "setState", "parameters": "(State state)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void setState(State state) {\n        if (isAcceptedState(acceptedDataTypes, state)) {\n            State currentState = this.state;\n\n            if (currentState instanceof HSBType) {\n                DecimalType hue = ((HSBType) currentState).getHue();\n                PercentType saturation = ((HSBType) currentState).getSaturation();\n                // we map ON/OFF values to dark/bright, so that the hue and saturation values are not changed\n                if (state == OnOffType.OFF) {\n                    applyState(new HSBType(hue, saturation, PercentType.ZERO));\n                } else if (state == OnOffType.ON) {\n                    applyState(new HSBType(hue, saturation, PercentType.HUNDRED));\n                } else if (state instanceof PercentType && !(state instanceof HSBType)) {\n                    applyState(new HSBType(hue, saturation, (PercentType) state));\n                } else if (state instanceof DecimalType && !(state instanceof HSBType)) {\n                    applyState(new HSBType(hue, saturation,\n                            new PercentType(((DecimalType) state).toBigDecimal().multiply(BigDecimal.valueOf(100)))));\n                } else {\n                    applyState(state);\n                }\n            } else {\n                // try conversion\n                State convertedState = state.as(HSBType.class);\n                if (convertedState != null) {\n                    applyState(convertedState);\n                } else {\n                    applyState(state);\n                }\n            }\n        } else {\n            logSetTypeError(state);\n        }\n    }", "signature": "void setState(State state)", "full_signature": "@Override public void setState(State state)", "class_method_signature": "ColorItem.setState(State state)", "testcase": false, "constructor": false, "invocations": ["isAcceptedState", "getHue", "getSaturation", "applyState", "applyState", "applyState", "applyState", "multiply", "toBigDecimal", "valueOf", "applyState", "as", "applyState", "applyState", "logSetTypeError"]}, "repository": {"repo_id": 48337670, "url": "https://github.com/openhab/openhab-core", "stars": 241, "created": "12/20/2015 9:23:20 PM +00:00", "updates": "2020-01-27T16:55:53+00:00", "fork": "False", "license": "licensed"}}