{"test_class": {"identifier": "DateUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static long INSTANT_IN_EPOCH_SECONDS = 1583971200L;", "modifier": "private static", "type": "long", "declarator": "INSTANT_IN_EPOCH_SECONDS = 1583971200L", "var_name": "INSTANT_IN_EPOCH_SECONDS"}], "file": "anomdetect/src/test/java/com/expedia/adaptivealerting/anomdetect/util/DateUtilTest.java"}, "test_case": {"identifier": "testEpochSecondToString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEpochSecondToString() {\n        assertEquals(\"2020-03-12T00:00:00Z\", DateUtil.epochSecondToString(INSTANT_IN_EPOCH_SECONDS));\n    }", "signature": "void testEpochSecondToString()", "full_signature": "@Test public void testEpochSecondToString()", "class_method_signature": "DateUtilTest.testEpochSecondToString()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "epochSecondToString"]}, "focal_class": {"identifier": "DateUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int MIDNIGHT_HOUR = 0;", "modifier": "public static final", "type": "int", "declarator": "MIDNIGHT_HOUR = 0", "var_name": "MIDNIGHT_HOUR"}], "methods": [{"identifier": "truncatedToDay", "parameters": "(Instant date)", "modifiers": "public static", "return": "Instant", "signature": "Instant truncatedToDay(Instant date)", "full_signature": "public static Instant truncatedToDay(Instant date)", "class_method_signature": "DateUtil.truncatedToDay(Instant date)", "testcase": false, "constructor": false}, {"identifier": "truncatedToWeek", "parameters": "(Instant date)", "modifiers": "public static", "return": "Instant", "signature": "Instant truncatedToWeek(Instant date)", "full_signature": "public static Instant truncatedToWeek(Instant date)", "class_method_signature": "DateUtil.truncatedToWeek(Instant date)", "testcase": false, "constructor": false}, {"identifier": "snapToSeconds", "parameters": "(Instant date, int seconds)", "modifiers": "public static", "return": "Instant", "signature": "Instant snapToSeconds(Instant date, int seconds)", "full_signature": "public static Instant snapToSeconds(Instant date, int seconds)", "class_method_signature": "DateUtil.snapToSeconds(Instant date, int seconds)", "testcase": false, "constructor": false}, {"identifier": "truncatedToSeconds", "parameters": "(Instant date)", "modifiers": "public static", "return": "Instant", "signature": "Instant truncatedToSeconds(Instant date)", "full_signature": "public static Instant truncatedToSeconds(Instant date)", "class_method_signature": "DateUtil.truncatedToSeconds(Instant date)", "testcase": false, "constructor": false}, {"identifier": "epochSecondToString", "parameters": "(long metricTimestamp)", "modifiers": "public static", "return": "String", "signature": "String epochSecondToString(long metricTimestamp)", "full_signature": "public static String epochSecondToString(long metricTimestamp)", "class_method_signature": "DateUtil.epochSecondToString(long metricTimestamp)", "testcase": false, "constructor": false}, {"identifier": "epochSecondToInstant", "parameters": "(long metricTimestamp)", "modifiers": "public static", "return": "Instant", "signature": "Instant epochSecondToInstant(long metricTimestamp)", "full_signature": "public static Instant epochSecondToInstant(long metricTimestamp)", "class_method_signature": "DateUtil.epochSecondToInstant(long metricTimestamp)", "testcase": false, "constructor": false}, {"identifier": "isBetweenHours", "parameters": "(int hour, int startHour, int endHour)", "modifiers": "public static", "return": "boolean", "signature": "boolean isBetweenHours(int hour, int startHour, int endHour)", "full_signature": "public static boolean isBetweenHours(int hour, int startHour, int endHour)", "class_method_signature": "DateUtil.isBetweenHours(int hour, int startHour, int endHour)", "testcase": false, "constructor": false}, {"identifier": "crossesMidnight", "parameters": "(int startHour, int endHour)", "modifiers": "public static", "return": "boolean", "signature": "boolean crossesMidnight(int startHour, int endHour)", "full_signature": "public static boolean crossesMidnight(int startHour, int endHour)", "class_method_signature": "DateUtil.crossesMidnight(int startHour, int endHour)", "testcase": false, "constructor": false}, {"identifier": "instantToUTCDateTime", "parameters": "(Instant epochSecond)", "modifiers": "public static", "return": "ZonedDateTime", "signature": "ZonedDateTime instantToUTCDateTime(Instant epochSecond)", "full_signature": "public static ZonedDateTime instantToUTCDateTime(Instant epochSecond)", "class_method_signature": "DateUtil.instantToUTCDateTime(Instant epochSecond)", "testcase": false, "constructor": false}], "file": "anomdetect/src/main/java/com/expedia/adaptivealerting/anomdetect/util/DateUtil.java"}, "focal_method": {"identifier": "epochSecondToString", "parameters": "(long metricTimestamp)", "modifiers": "public static", "return": "String", "body": "public static String epochSecondToString(long metricTimestamp) {\n        return epochSecondToInstant(metricTimestamp).toString();\n    }", "signature": "String epochSecondToString(long metricTimestamp)", "full_signature": "public static String epochSecondToString(long metricTimestamp)", "class_method_signature": "DateUtil.epochSecondToString(long metricTimestamp)", "testcase": false, "constructor": false, "invocations": ["toString", "epochSecondToInstant"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}