{"test_class": {"identifier": "AssociationColumnRemapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String ASSOC = \"Associations\";", "modifier": "private final", "type": "String", "declarator": "ASSOC = \"Associations\"", "var_name": "ASSOC"}], "file": "vars-query/src/test/java/vars/query/ui/db/AssociationColumnRemapperTest.java"}, "test_case": {"identifier": "testWithOneAssociation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWithOneAssociation() {\n        List list = Lists.newArrayList(\"assoc1 | foo | bar\", null, \"assoc1 | not foo | not bar\");\n        QueryResults queryResults = buildQueryResults(list);\n        AssociationColumnRemapper.apply(queryResults);\n        assertFalse(\"Found Association Column\", queryResults.containsColumnName(ASSOC));\n        assertTrue(\"Did not find new assoc1 column\", queryResults.containsColumnName(\"assoc1\"));\n        assertTrue(\"Did not find correct # of associations\", queryResults.getResults(\"assoc1\").size() == 3);\n    }", "signature": "void testWithOneAssociation()", "full_signature": "@Test public void testWithOneAssociation()", "class_method_signature": "AssociationColumnRemapperTest.testWithOneAssociation()", "testcase": true, "constructor": false, "invocations": ["newArrayList", "buildQueryResults", "apply", "assertFalse", "containsColumnName", "assertTrue", "containsColumnName", "assertTrue", "size", "getResults"]}, "focal_class": {"identifier": "AssociationColumnRemapper", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "apply", "parameters": "(QueryResults queryResults)", "modifiers": "public static", "return": "void", "signature": "void apply(QueryResults queryResults)", "full_signature": "public static void apply(QueryResults queryResults)", "class_method_signature": "AssociationColumnRemapper.apply(QueryResults queryResults)", "testcase": false, "constructor": false}], "file": "vars-query/src/main/java/vars/query/ui/db/AssociationColumnRemapper.java"}, "focal_method": {"identifier": "apply", "parameters": "(QueryResults queryResults)", "modifiers": "public static", "return": "void", "body": "public static void apply(QueryResults queryResults) {\n        Map<String, List<Object>> resultsMap = queryResults.getResultsMap();\n        Map<String, List<Object>> associationsMap = new TreeMap<>();\n\n        // --- Find all distinct linkNames used in the Associations\n        if (resultsMap.containsKey(\"Associations\")) {\n            List associationResults = queryResults.getResults(\"Associations\");\n            Set<String> linkNames = new HashSet<>();\n            for (Object a : associationResults) {\n                if (a != null) {\n                    String s = (String) a;\n                    String[] parts = s.split(ILink.DELIMITER);\n                    linkNames.add(parts[0].trim());\n                }\n            }\n\n            // --- Generate an empty list of the correct size to account for null values\n            for (String linkName : linkNames) {\n                List<Object> list = new ArrayList<>(queryResults.rowCount());\n                for (int i = 0; i < queryResults.rowCount(); i++) {\n                    list.add(null);\n                }\n                associationsMap.put(linkName, list);\n            }\n\n            // --- Put the association in the correct column\n            for (int i = 0; i < queryResults.rowCount(); i++) {\n                String association = (String) associationResults.get(i);\n                if (association != null) {\n                    String[] parts = association.split(ILink.DELIMITER);\n                    String linkName = parts[0];\n                    List<Object> list = associationsMap.get(linkName);\n                    list.set(i, association);\n                }\n            }\n\n            resultsMap.remove(\"Associations\");\n            resultsMap.putAll(associationsMap);\n        }\n\n    }", "signature": "void apply(QueryResults queryResults)", "full_signature": "public static void apply(QueryResults queryResults)", "class_method_signature": "AssociationColumnRemapper.apply(QueryResults queryResults)", "testcase": false, "constructor": false, "invocations": ["getResultsMap", "containsKey", "getResults", "split", "add", "trim", "rowCount", "rowCount", "add", "put", "rowCount", "get", "split", "get", "set", "remove", "putAll"]}, "repository": {"repo_id": 13933675, "url": "https://github.com/hohonuuli/vars", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 9, "size": 18273, "license": "licensed"}}