{"test_class": {"identifier": "PointStackerProcessTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/unsupported/process-feature/src/test/java/org/geotools/process/vector/PointStackerProcessTest.java"}, "test_case": {"identifier": "testReprojected", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReprojected() throws NoSuchAuthorityCodeException, FactoryException, ProcessException, TransformException {\n\n        ReferencedEnvelope inBounds = new ReferencedEnvelope(0, 10, 0, 10, DefaultGeographicCRS.WGS84);\n        \n        // Dataset with some points located in appropriate area\n        // points are close enough to create a single cluster\n        Coordinate[] data = new Coordinate[] { new Coordinate(-121.813201, 48.777343), new Coordinate(-121.813, 48.777) };\n        \n        \n        SimpleFeatureCollection fc = createPoints(data, inBounds);\n        ProgressListener monitor = null;\n\n        // Google Mercator BBOX for northern Washington State (roughly)\n        CoordinateReferenceSystem webMerc = CRS.decode(\"EPSG:3785\");\n        ReferencedEnvelope outBounds = new ReferencedEnvelope(-1.4045034049133E7, -1.2937920131607E7, 5916835.1504419, 6386464.2521607, webMerc);\n\n        PointStackerProcess psp = new PointStackerProcess();\n        SimpleFeatureCollection result = psp.execute(fc, 100, // cellSize\n                null, // normalize\n                null, // preserve location\n                outBounds, // outputBBOX\n                1810, // outputWidth\n                768, // outputHeight\n                monitor);\n        \n        checkSchemaCorrect(result.getSchema(), false);\n        assertEquals(1, result.size());\n        assertEquals(inBounds.getCoordinateReferenceSystem(), result.getBounds().getCoordinateReferenceSystem());\n        checkResultPoint(result, new Coordinate(-121.813201, 48.777343), 2, 2, null, null);\n    }", "signature": "void testReprojected()", "full_signature": "@Test public void testReprojected()", "class_method_signature": "PointStackerProcessTest.testReprojected()", "testcase": true, "constructor": false, "invocations": ["createPoints", "decode", "execute", "checkSchemaCorrect", "getSchema", "assertEquals", "size", "assertEquals", "getCoordinateReferenceSystem", "getCoordinateReferenceSystem", "getBounds", "checkResultPoint"]}, "focal_class": {"identifier": "PointStackerProcess", "superclass": "", "interfaces": "implements VectorProcess", "fields": [{"original_string": "public static final String ATTR_GEOM = \"geom\";", "modifier": "public static final", "type": "String", "declarator": "ATTR_GEOM = \"geom\"", "var_name": "ATTR_GEOM"}, {"original_string": "public static final String ATTR_COUNT = \"count\";", "modifier": "public static final", "type": "String", "declarator": "ATTR_COUNT = \"count\"", "var_name": "ATTR_COUNT"}, {"original_string": "public static final String ATTR_COUNT_UNIQUE = \"countunique\";", "modifier": "public static final", "type": "String", "declarator": "ATTR_COUNT_UNIQUE = \"countunique\"", "var_name": "ATTR_COUNT_UNIQUE"}, {"original_string": "public static final String ATTR_NORM_COUNT = \"normCount\";", "modifier": "public static final", "type": "String", "declarator": "ATTR_NORM_COUNT = \"normCount\"", "var_name": "ATTR_NORM_COUNT"}, {"original_string": "public static final String ATTR_NORM_COUNT_UNIQUE = \"normCountUnique\";", "modifier": "public static final", "type": "String", "declarator": "ATTR_NORM_COUNT_UNIQUE = \"normCountUnique\"", "var_name": "ATTR_NORM_COUNT_UNIQUE"}], "methods": [{"identifier": "execute", "parameters": "(\n\n            // process data\n            @DescribeParameter(name = \"data\", description = \"Input feature collection\") SimpleFeatureCollection data,\n\n            // process parameters\n            @DescribeParameter(name = \"cellSize\", description = \"Grid cell size to aggregate to, in pixels\") Integer cellSize,\n            @DescribeParameter(name = \"normalize\", description = \"Indicates whether to add fields normalized to the range 0-1.\", defaultValue=\"false\") Boolean argNormalize,\n            @DescribeParameter(name = \"preserveLocation\", description = \"Indicates wheter to preserve the original location of points for single/superimposed points\", defaultValue=\"Never\", min=0) PreserveLocation preserveLocation,\n\n            // output image parameters\n            @DescribeParameter(name = \"outputBBOX\", description = \"Bounding box for target image extent\") ReferencedEnvelope outputEnv,\n            @DescribeParameter(name = \"outputWidth\", description = \"Target image width in pixels\", minValue = 1) Integer outputWidth,\n            @DescribeParameter(name = \"outputHeight\", description = \"Target image height in pixels\", minValue = 1) Integer outputHeight,\n            \n\n            ProgressListener monitor)", "modifiers": "@DescribeResult(name = \"result\", description = \"Aggregated feature collection\") public", "return": "SimpleFeatureCollection", "signature": "SimpleFeatureCollection execute(\n\n            // process data\n            @DescribeParameter(name = \"data\", description = \"Input feature collection\") SimpleFeatureCollection data,\n\n            // process parameters\n            @DescribeParameter(name = \"cellSize\", description = \"Grid cell size to aggregate to, in pixels\") Integer cellSize,\n            @DescribeParameter(name = \"normalize\", description = \"Indicates whether to add fields normalized to the range 0-1.\", defaultValue=\"false\") Boolean argNormalize,\n            @DescribeParameter(name = \"preserveLocation\", description = \"Indicates wheter to preserve the original location of points for single/superimposed points\", defaultValue=\"Never\", min=0) PreserveLocation preserveLocation,\n\n            // output image parameters\n            @DescribeParameter(name = \"outputBBOX\", description = \"Bounding box for target image extent\") ReferencedEnvelope outputEnv,\n            @DescribeParameter(name = \"outputWidth\", description = \"Target image width in pixels\", minValue = 1) Integer outputWidth,\n            @DescribeParameter(name = \"outputHeight\", description = \"Target image height in pixels\", minValue = 1) Integer outputHeight,\n            \n\n            ProgressListener monitor)", "full_signature": "@DescribeResult(name = \"result\", description = \"Aggregated feature collection\") public SimpleFeatureCollection execute(\n\n            // process data\n            @DescribeParameter(name = \"data\", description = \"Input feature collection\") SimpleFeatureCollection data,\n\n            // process parameters\n            @DescribeParameter(name = \"cellSize\", description = \"Grid cell size to aggregate to, in pixels\") Integer cellSize,\n            @DescribeParameter(name = \"normalize\", description = \"Indicates whether to add fields normalized to the range 0-1.\", defaultValue=\"false\") Boolean argNormalize,\n            @DescribeParameter(name = \"preserveLocation\", description = \"Indicates wheter to preserve the original location of points for single/superimposed points\", defaultValue=\"Never\", min=0) PreserveLocation preserveLocation,\n\n            // output image parameters\n            @DescribeParameter(name = \"outputBBOX\", description = \"Bounding box for target image extent\") ReferencedEnvelope outputEnv,\n            @DescribeParameter(name = \"outputWidth\", description = \"Target image width in pixels\", minValue = 1) Integer outputWidth,\n            @DescribeParameter(name = \"outputHeight\", description = \"Target image height in pixels\", minValue = 1) Integer outputHeight,\n            \n\n            ProgressListener monitor)", "class_method_signature": "PointStackerProcess.execute(\n\n            // process data\n            @DescribeParameter(name = \"data\", description = \"Input feature collection\") SimpleFeatureCollection data,\n\n            // process parameters\n            @DescribeParameter(name = \"cellSize\", description = \"Grid cell size to aggregate to, in pixels\") Integer cellSize,\n            @DescribeParameter(name = \"normalize\", description = \"Indicates whether to add fields normalized to the range 0-1.\", defaultValue=\"false\") Boolean argNormalize,\n            @DescribeParameter(name = \"preserveLocation\", description = \"Indicates wheter to preserve the original location of points for single/superimposed points\", defaultValue=\"Never\", min=0) PreserveLocation preserveLocation,\n\n            // output image parameters\n            @DescribeParameter(name = \"outputBBOX\", description = \"Bounding box for target image extent\") ReferencedEnvelope outputEnv,\n            @DescribeParameter(name = \"outputWidth\", description = \"Target image width in pixels\", minValue = 1) Integer outputWidth,\n            @DescribeParameter(name = \"outputHeight\", description = \"Target image height in pixels\", minValue = 1) Integer outputHeight,\n            \n\n            ProgressListener monitor)", "testcase": false, "constructor": false}, {"identifier": "getStackedPointLocation", "parameters": "(PreserveLocation preserveLocation, StackedPoint sp)", "modifiers": "private", "return": "Coordinate", "signature": "Coordinate getStackedPointLocation(PreserveLocation preserveLocation, StackedPoint sp)", "full_signature": "private Coordinate getStackedPointLocation(PreserveLocation preserveLocation, StackedPoint sp)", "class_method_signature": "PointStackerProcess.getStackedPointLocation(PreserveLocation preserveLocation, StackedPoint sp)", "testcase": false, "constructor": false}, {"identifier": "stackPoints", "parameters": "(SimpleFeatureCollection data,\n            MathTransform crsTransform, \n            double cellSize, double minX, double minY)", "modifiers": "private", "return": "Collection<StackedPoint>", "signature": "Collection<StackedPoint> stackPoints(SimpleFeatureCollection data,\n            MathTransform crsTransform, \n            double cellSize, double minX, double minY)", "full_signature": "private Collection<StackedPoint> stackPoints(SimpleFeatureCollection data,\n            MathTransform crsTransform, \n            double cellSize, double minX, double minY)", "class_method_signature": "PointStackerProcess.stackPoints(SimpleFeatureCollection data,\n            MathTransform crsTransform, \n            double cellSize, double minX, double minY)", "testcase": false, "constructor": false}, {"identifier": "getRepresentativePoint", "parameters": "(Geometry g)", "modifiers": "private static", "return": "Coordinate", "signature": "Coordinate getRepresentativePoint(Geometry g)", "full_signature": "private static Coordinate getRepresentativePoint(Geometry g)", "class_method_signature": "PointStackerProcess.getRepresentativePoint(Geometry g)", "testcase": false, "constructor": false}, {"identifier": "gridIndex", "parameters": "(Coordinate griddedPt, double cellSize)", "modifiers": "private", "return": "void", "signature": "void gridIndex(Coordinate griddedPt, double cellSize)", "full_signature": "private void gridIndex(Coordinate griddedPt, double cellSize)", "class_method_signature": "PointStackerProcess.gridIndex(Coordinate griddedPt, double cellSize)", "testcase": false, "constructor": false}, {"identifier": "createType", "parameters": "(CoordinateReferenceSystem crs, boolean stretch)", "modifiers": "private", "return": "SimpleFeatureType", "signature": "SimpleFeatureType createType(CoordinateReferenceSystem crs, boolean stretch)", "full_signature": "private SimpleFeatureType createType(CoordinateReferenceSystem crs, boolean stretch)", "class_method_signature": "PointStackerProcess.createType(CoordinateReferenceSystem crs, boolean stretch)", "testcase": false, "constructor": false}], "file": "modules/unsupported/process-feature/src/main/java/org/geotools/process/vector/PointStackerProcess.java"}, "focal_method": {"identifier": "execute", "parameters": "(\n\n            // process data\n            @DescribeParameter(name = \"data\", description = \"Input feature collection\") SimpleFeatureCollection data,\n\n            // process parameters\n            @DescribeParameter(name = \"cellSize\", description = \"Grid cell size to aggregate to, in pixels\") Integer cellSize,\n            @DescribeParameter(name = \"normalize\", description = \"Indicates whether to add fields normalized to the range 0-1.\", defaultValue=\"false\") Boolean argNormalize,\n            @DescribeParameter(name = \"preserveLocation\", description = \"Indicates wheter to preserve the original location of points for single/superimposed points\", defaultValue=\"Never\", min=0) PreserveLocation preserveLocation,\n\n            // output image parameters\n            @DescribeParameter(name = \"outputBBOX\", description = \"Bounding box for target image extent\") ReferencedEnvelope outputEnv,\n            @DescribeParameter(name = \"outputWidth\", description = \"Target image width in pixels\", minValue = 1) Integer outputWidth,\n            @DescribeParameter(name = \"outputHeight\", description = \"Target image height in pixels\", minValue = 1) Integer outputHeight,\n            \n\n            ProgressListener monitor)", "modifiers": "@DescribeResult(name = \"result\", description = \"Aggregated feature collection\") public", "return": "SimpleFeatureCollection", "body": "@DescribeResult(name = \"result\", description = \"Aggregated feature collection\")\n    public SimpleFeatureCollection execute(\n\n            // process data\n            @DescribeParameter(name = \"data\", description = \"Input feature collection\") SimpleFeatureCollection data,\n\n            // process parameters\n            @DescribeParameter(name = \"cellSize\", description = \"Grid cell size to aggregate to, in pixels\") Integer cellSize,\n            @DescribeParameter(name = \"normalize\", description = \"Indicates whether to add fields normalized to the range 0-1.\", defaultValue=\"false\") Boolean argNormalize,\n            @DescribeParameter(name = \"preserveLocation\", description = \"Indicates wheter to preserve the original location of points for single/superimposed points\", defaultValue=\"Never\", min=0) PreserveLocation preserveLocation,\n\n            // output image parameters\n            @DescribeParameter(name = \"outputBBOX\", description = \"Bounding box for target image extent\") ReferencedEnvelope outputEnv,\n            @DescribeParameter(name = \"outputWidth\", description = \"Target image width in pixels\", minValue = 1) Integer outputWidth,\n            @DescribeParameter(name = \"outputHeight\", description = \"Target image height in pixels\", minValue = 1) Integer outputHeight,\n            \n\n            ProgressListener monitor) throws ProcessException, TransformException {\n\n        CoordinateReferenceSystem srcCRS = data.getSchema().getCoordinateReferenceSystem();\n        CoordinateReferenceSystem dstCRS = outputEnv.getCoordinateReferenceSystem();\n        MathTransform crsTransform = null;\n        MathTransform invTransform = null;\n        try {\n            crsTransform = CRS.findMathTransform(srcCRS, dstCRS);\n            invTransform = crsTransform.inverse();\n        } catch (FactoryException e) {\n            throw new ProcessException(e);\n        }\n        \n        boolean normalize = false;\n        if(argNormalize!=null){\n            normalize = argNormalize;\n        }\n\n        // TODO: allow output CRS to be different to data CRS \n        // assume same CRS for now...\n        double cellSizeSrc = cellSize * outputEnv.getWidth() / outputWidth;\n\n        Collection<StackedPoint> stackedPts = stackPoints(data, crsTransform, cellSizeSrc,\n                outputEnv.getMinX(), outputEnv.getMinY());\n\n        SimpleFeatureType schema = createType(srcCRS, normalize);\n        ListFeatureCollection result = new ListFeatureCollection(schema);\n        SimpleFeatureBuilder fb = new SimpleFeatureBuilder(schema);\n\n        GeometryFactory factory = new GeometryFactory(new PackedCoordinateSequenceFactory());\n\n        double[] srcPt = new double[2];\n        double[] dstPt = new double[2];\n\n        // Find maxima of the point stacks if needed.\n        int maxCount = 0;\n        int maxCountUnique = 0;\n        if(normalize){\n            for (StackedPoint sp : stackedPts) {\n                if(maxCount<sp.getCount()) maxCount = sp.getCount();\n                if(maxCountUnique<sp.getCount()) maxCountUnique = sp.getCountUnique();\n            }\n        }\n\n        for (StackedPoint sp : stackedPts) {\n            // create feature for stacked point\n            Coordinate pt = getStackedPointLocation(preserveLocation, sp);\n            \n            // transform back to src CRS, since RT rendering expects the output to be in the same CRS\n            srcPt[0] = pt.x;\n            srcPt[1] = pt.y;\n            invTransform.transform(srcPt, 0, dstPt, 0, 1);\n            Coordinate psrc = new Coordinate(dstPt[0], dstPt[1]);\n\n            Geometry point = factory.createPoint(psrc);\n            fb.add(point);\n            fb.add(sp.getCount());\n            fb.add(sp.getCountUnique());\n            if(normalize){\n                fb.add(((double)sp.getCount())/maxCount);\n                fb.add(((double)sp.getCountUnique())/maxCountUnique);\n            }\n            \n            result.add(fb.buildFeature(null));\n        }\n        return result;\n    }", "signature": "SimpleFeatureCollection execute(\n\n            // process data\n            @DescribeParameter(name = \"data\", description = \"Input feature collection\") SimpleFeatureCollection data,\n\n            // process parameters\n            @DescribeParameter(name = \"cellSize\", description = \"Grid cell size to aggregate to, in pixels\") Integer cellSize,\n            @DescribeParameter(name = \"normalize\", description = \"Indicates whether to add fields normalized to the range 0-1.\", defaultValue=\"false\") Boolean argNormalize,\n            @DescribeParameter(name = \"preserveLocation\", description = \"Indicates wheter to preserve the original location of points for single/superimposed points\", defaultValue=\"Never\", min=0) PreserveLocation preserveLocation,\n\n            // output image parameters\n            @DescribeParameter(name = \"outputBBOX\", description = \"Bounding box for target image extent\") ReferencedEnvelope outputEnv,\n            @DescribeParameter(name = \"outputWidth\", description = \"Target image width in pixels\", minValue = 1) Integer outputWidth,\n            @DescribeParameter(name = \"outputHeight\", description = \"Target image height in pixels\", minValue = 1) Integer outputHeight,\n            \n\n            ProgressListener monitor)", "full_signature": "@DescribeResult(name = \"result\", description = \"Aggregated feature collection\") public SimpleFeatureCollection execute(\n\n            // process data\n            @DescribeParameter(name = \"data\", description = \"Input feature collection\") SimpleFeatureCollection data,\n\n            // process parameters\n            @DescribeParameter(name = \"cellSize\", description = \"Grid cell size to aggregate to, in pixels\") Integer cellSize,\n            @DescribeParameter(name = \"normalize\", description = \"Indicates whether to add fields normalized to the range 0-1.\", defaultValue=\"false\") Boolean argNormalize,\n            @DescribeParameter(name = \"preserveLocation\", description = \"Indicates wheter to preserve the original location of points for single/superimposed points\", defaultValue=\"Never\", min=0) PreserveLocation preserveLocation,\n\n            // output image parameters\n            @DescribeParameter(name = \"outputBBOX\", description = \"Bounding box for target image extent\") ReferencedEnvelope outputEnv,\n            @DescribeParameter(name = \"outputWidth\", description = \"Target image width in pixels\", minValue = 1) Integer outputWidth,\n            @DescribeParameter(name = \"outputHeight\", description = \"Target image height in pixels\", minValue = 1) Integer outputHeight,\n            \n\n            ProgressListener monitor)", "class_method_signature": "PointStackerProcess.execute(\n\n            // process data\n            @DescribeParameter(name = \"data\", description = \"Input feature collection\") SimpleFeatureCollection data,\n\n            // process parameters\n            @DescribeParameter(name = \"cellSize\", description = \"Grid cell size to aggregate to, in pixels\") Integer cellSize,\n            @DescribeParameter(name = \"normalize\", description = \"Indicates whether to add fields normalized to the range 0-1.\", defaultValue=\"false\") Boolean argNormalize,\n            @DescribeParameter(name = \"preserveLocation\", description = \"Indicates wheter to preserve the original location of points for single/superimposed points\", defaultValue=\"Never\", min=0) PreserveLocation preserveLocation,\n\n            // output image parameters\n            @DescribeParameter(name = \"outputBBOX\", description = \"Bounding box for target image extent\") ReferencedEnvelope outputEnv,\n            @DescribeParameter(name = \"outputWidth\", description = \"Target image width in pixels\", minValue = 1) Integer outputWidth,\n            @DescribeParameter(name = \"outputHeight\", description = \"Target image height in pixels\", minValue = 1) Integer outputHeight,\n            \n\n            ProgressListener monitor)", "testcase": false, "constructor": false, "invocations": ["getCoordinateReferenceSystem", "getSchema", "getCoordinateReferenceSystem", "findMathTransform", "inverse", "getWidth", "stackPoints", "getMinX", "getMinY", "createType", "getCount", "getCount", "getCount", "getCountUnique", "getStackedPointLocation", "transform", "createPoint", "add", "add", "getCount", "add", "getCountUnique", "add", "getCount", "add", "getCountUnique", "add", "buildFeature"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}