{"test_class": {"identifier": "OAuthCertBoundJwtAccessTokenAuthorityTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ClassLoader classLoader = this.getClass().getClassLoader();", "modifier": "private final", "type": "ClassLoader", "declarator": "classLoader = this.getClass().getClassLoader()", "var_name": "classLoader"}, {"original_string": "private X509Certificate[] clientCertChain = null;", "modifier": "private", "type": "X509Certificate[]", "declarator": "clientCertChain = null", "var_name": "clientCertChain"}, {"original_string": "private String jwtPublicKey = null;", "modifier": "private", "type": "String", "declarator": "jwtPublicKey = null", "var_name": "jwtPublicKey"}, {"original_string": "private final KeyStore baseKeyStore = new KeyStore() {\n        public String getPublicKey(String domain, String service, String keyId) {\n            return jwtPublicKey;\n        }\n    };", "modifier": "private final", "type": "KeyStore", "declarator": "baseKeyStore = new KeyStore() {\n        public String getPublicKey(String domain, String service, String keyId) {\n            return jwtPublicKey;\n        }\n    }", "var_name": "baseKeyStore"}], "file": "libs/java/auth_core/src/test/java/com/yahoo/athenz/auth/oauth/OAuthCertBoundJwtAccessTokenAuthorityTest.java"}, "test_case": {"identifier": "testGetPublicKey", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetPublicKey() throws Exception {\n        KeyStore keyStoreMock = Mockito.spy(baseKeyStore);\n        Mockito.when(keyStoreMock.getPublicKey(\"domain\", \"service\", \"keyId\")).thenReturn(\"public_key_in_pem\");\n\n        OAuthCertBoundJwtAccessTokenAuthority authority = new OAuthCertBoundJwtAccessTokenAuthority();\n        authority.setKeyStore(keyStoreMock);\n\n        assertEquals(authority.getPublicKey(\"domain\", \"service\", \"keyId\"), \"public_key_in_pem\");\n    }", "signature": "void testGetPublicKey()", "full_signature": "@Test public void testGetPublicKey()", "class_method_signature": "OAuthCertBoundJwtAccessTokenAuthorityTest.testGetPublicKey()", "testcase": true, "constructor": false, "invocations": ["spy", "thenReturn", "when", "getPublicKey", "setKeyStore", "assertEquals", "getPublicKey"]}, "focal_class": {"identifier": "OAuthCertBoundJwtAccessTokenAuthority", "superclass": "", "interfaces": "implements Authority, AuthorityKeyStore, KeyStore", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(OAuthCertBoundJwtAccessTokenAuthority.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(OAuthCertBoundJwtAccessTokenAuthority.class)", "var_name": "LOG"}, {"original_string": "private String authenticateChallenge = \"Bearer realm=\\\"athenz.io\\\"\";", "modifier": "private", "type": "String", "declarator": "authenticateChallenge = \"Bearer realm=\\\"athenz.io\\\"\"", "var_name": "authenticateChallenge"}, {"original_string": "private KeyStore keyStore = null;", "modifier": "private", "type": "KeyStore", "declarator": "keyStore = null", "var_name": "keyStore"}, {"original_string": "private CertificateIdentityParser certificateIdentityParser = null;", "modifier": "private", "type": "CertificateIdentityParser", "declarator": "certificateIdentityParser = null", "var_name": "certificateIdentityParser"}, {"original_string": "private OAuthJwtAccessTokenParser parser = null;", "modifier": "private", "type": "OAuthJwtAccessTokenParser", "declarator": "parser = null", "var_name": "parser"}, {"original_string": "private OAuthJwtAccessTokenValidator validator = null;", "modifier": "private", "type": "OAuthJwtAccessTokenValidator", "declarator": "validator = null", "var_name": "validator"}, {"original_string": "Map<String, String> authorizedServices = null;", "modifier": "", "type": "Map<String, String>", "declarator": "authorizedServices = null", "var_name": "authorizedServices"}, {"original_string": "private boolean shouldVerifyCertThumbprint = true;", "modifier": "private", "type": "boolean", "declarator": "shouldVerifyCertThumbprint = true", "var_name": "shouldVerifyCertThumbprint"}], "methods": [{"identifier": "setKeyStore", "parameters": "(KeyStore keyStore)", "modifiers": "@Override public", "return": "void", "signature": "void setKeyStore(KeyStore keyStore)", "full_signature": "@Override public void setKeyStore(KeyStore keyStore)", "class_method_signature": "OAuthCertBoundJwtAccessTokenAuthority.setKeyStore(KeyStore keyStore)", "testcase": false, "constructor": false}, {"identifier": "getPublicKey", "parameters": "(String domain, String service, String keyId)", "modifiers": "@Override public", "return": "String", "signature": "String getPublicKey(String domain, String service, String keyId)", "full_signature": "@Override public String getPublicKey(String domain, String service, String keyId)", "class_method_signature": "OAuthCertBoundJwtAccessTokenAuthority.getPublicKey(String domain, String service, String keyId)", "testcase": false, "constructor": false}, {"identifier": "getCredSource", "parameters": "()", "modifiers": "@Override public", "return": "CredSource", "signature": "CredSource getCredSource()", "full_signature": "@Override public CredSource getCredSource()", "class_method_signature": "OAuthCertBoundJwtAccessTokenAuthority.getCredSource()", "testcase": false, "constructor": false}, {"identifier": "getAuthenticateChallenge", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getAuthenticateChallenge()", "full_signature": "@Override public String getAuthenticateChallenge()", "class_method_signature": "OAuthCertBoundJwtAccessTokenAuthority.getAuthenticateChallenge()", "testcase": false, "constructor": false}, {"identifier": "getDomain", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDomain()", "full_signature": "@Override public String getDomain()", "class_method_signature": "OAuthCertBoundJwtAccessTokenAuthority.getDomain()", "testcase": false, "constructor": false}, {"identifier": "getHeader", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getHeader()", "full_signature": "@Override public String getHeader()", "class_method_signature": "OAuthCertBoundJwtAccessTokenAuthority.getHeader()", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "(String credentials, String remoteAddr, String httpMethod, StringBuilder errMsg)", "modifiers": "@Override public", "return": "Principal", "signature": "Principal authenticate(String credentials, String remoteAddr, String httpMethod, StringBuilder errMsg)", "full_signature": "@Override public Principal authenticate(String credentials, String remoteAddr, String httpMethod, StringBuilder errMsg)", "class_method_signature": "OAuthCertBoundJwtAccessTokenAuthority.authenticate(String credentials, String remoteAddr, String httpMethod, StringBuilder errMsg)", "testcase": false, "constructor": false}, {"identifier": "reportError", "parameters": "(final String message, StringBuilder errMsg)", "modifiers": "private", "return": "void", "signature": "void reportError(final String message, StringBuilder errMsg)", "full_signature": "private void reportError(final String message, StringBuilder errMsg)", "class_method_signature": "OAuthCertBoundJwtAccessTokenAuthority.reportError(final String message, StringBuilder errMsg)", "testcase": false, "constructor": false}, {"identifier": "processAuthorizedClientIds", "parameters": "(String authorizedClientIdsPath, Map<String, Set<String>> authorizedClientIds, Map<String, String> authorizedServices)", "modifiers": "private", "return": "void", "signature": "void processAuthorizedClientIds(String authorizedClientIdsPath, Map<String, Set<String>> authorizedClientIds, Map<String, String> authorizedServices)", "full_signature": "private void processAuthorizedClientIds(String authorizedClientIdsPath, Map<String, Set<String>> authorizedClientIds, Map<String, String> authorizedServices)", "class_method_signature": "OAuthCertBoundJwtAccessTokenAuthority.processAuthorizedClientIds(String authorizedClientIdsPath, Map<String, Set<String>> authorizedClientIds, Map<String, String> authorizedServices)", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void initialize()", "full_signature": "@Override public void initialize()", "class_method_signature": "OAuthCertBoundJwtAccessTokenAuthority.initialize()", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "(HttpServletRequest request, StringBuilder errMsg)", "modifiers": "@Override public", "return": "Principal", "signature": "Principal authenticate(HttpServletRequest request, StringBuilder errMsg)", "full_signature": "@Override public Principal authenticate(HttpServletRequest request, StringBuilder errMsg)", "class_method_signature": "OAuthCertBoundJwtAccessTokenAuthority.authenticate(HttpServletRequest request, StringBuilder errMsg)", "testcase": false, "constructor": false}], "file": "libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/oauth/OAuthCertBoundJwtAccessTokenAuthority.java"}, "focal_method": {"identifier": "getPublicKey", "parameters": "(String domain, String service, String keyId)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getPublicKey(String domain, String service, String keyId) {\n        return this.keyStore.getPublicKey(domain, service, keyId);\n    }", "signature": "String getPublicKey(String domain, String service, String keyId)", "full_signature": "@Override public String getPublicKey(String domain, String service, String keyId)", "class_method_signature": "OAuthCertBoundJwtAccessTokenAuthority.getPublicKey(String domain, String service, String keyId)", "testcase": false, "constructor": false, "invocations": ["getPublicKey"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}