{"test_class": {"identifier": "OQLFilterBuilderTest", "superclass": "", "interfaces": "", "fields": [], "file": "step-core/src/test/java/step/core/ql/OQLFilterBuilderTest.java"}, "test_case": {"identifier": "test8", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void test8() {\n\t\tFilter<Object> filter = OQLFilterBuilder.getFilter(\"not(property1=prop1)\");\n\t\tboolean test = filter.test(new Bean());\n\t\tAssert.assertFalse(test);\n\t}", "signature": "void test8()", "full_signature": "@Test public void test8()", "class_method_signature": "OQLFilterBuilderTest.test8()", "testcase": true, "constructor": false, "invocations": ["getFilter", "test", "assertFalse"]}, "focal_class": {"identifier": "OQLFilterBuilder", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getFilter", "parameters": "(String expression)", "modifiers": "public static", "return": "Filter<Object>", "signature": "Filter<Object> getFilter(String expression)", "full_signature": "public static Filter<Object> getFilter(String expression)", "class_method_signature": "OQLFilterBuilder.getFilter(String expression)", "testcase": false, "constructor": false}, {"identifier": "getFilter", "parameters": "(String expression, FilterFactory<T> factory)", "modifiers": "public static", "return": "Filter<T>", "signature": "Filter<T> getFilter(String expression, FilterFactory<T> factory)", "full_signature": "public static Filter<T> getFilter(String expression, FilterFactory<T> factory)", "class_method_signature": "OQLFilterBuilder.getFilter(String expression, FilterFactory<T> factory)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String expression)", "modifiers": "private static", "return": "ParseContext", "signature": "ParseContext parse(String expression)", "full_signature": "private static ParseContext parse(String expression)", "class_method_signature": "OQLFilterBuilder.parse(String expression)", "testcase": false, "constructor": false}], "file": "step-core/src/main/java/step/core/ql/OQLFilterBuilder.java"}, "focal_method": {"identifier": "getFilter", "parameters": "(String expression)", "modifiers": "public static", "return": "Filter<Object>", "body": "public static Filter<Object> getFilter(String expression) {\n\t\treturn getFilter(expression, new FilterFactory<Object>() {\n\t\t\t@Override\n\t\t\tpublic Filter<Object> createFullTextFilter(String expression) {\n\t\t\t\tthrow new RuntimeException(\"Full text search not implemented\");\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic Filter<Object> createAttributeFilter(String operator, String attribute, String value) {\n\t\t\t\treturn new Filter<Object>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic boolean test(Object input) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\treturn value.equals(PropertyUtils.getProperty(input, attribute));\n\t\t\t\t\t\t} catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException | NestedNullException e) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t}", "signature": "Filter<Object> getFilter(String expression)", "full_signature": "public static Filter<Object> getFilter(String expression)", "class_method_signature": "OQLFilterBuilder.getFilter(String expression)", "testcase": false, "constructor": false, "invocations": ["getFilter", "equals", "getProperty"]}, "repository": {"repo_id": 62342369, "url": "https://github.com/exense/step", "stars": 12, "created": "6/30/2016 9:08:29 PM +00:00", "updates": "2020-01-24T17:13:24+00:00", "fork": "False", "license": "licensed"}}