{"test_class": {"identifier": "ElementPluginParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "TypeMirror mirror = mock(TypeMirror.class);", "modifier": "", "type": "TypeMirror", "declarator": "mirror = mock(TypeMirror.class)", "var_name": "mirror"}, {"original_string": "TypeElement type = when(mock(TypeElement.class).asType()).thenReturn(mirror).getMock();", "modifier": "", "type": "TypeElement", "declarator": "type = when(mock(TypeElement.class).asType()).thenReturn(mirror).getMock()", "var_name": "type"}, {"original_string": "Elements elements = when(mock(Elements.class).getTypeElement(org.bukkit.plugin.Plugin.class.getName())).thenReturn(type).getMock();", "modifier": "", "type": "Elements", "declarator": "elements = when(mock(Elements.class).getTypeElement(org.bukkit.plugin.Plugin.class.getName())).thenReturn(type).getMock()", "var_name": "elements"}, {"original_string": "Environment<Element> environment = spy(new StubEnvironment<>(Project.EMPTY, Resolver.ELEMENT));", "modifier": "", "type": "Environment<Element>", "declarator": "environment = spy(new StubEnvironment<>(Project.EMPTY, Resolver.ELEMENT))", "var_name": "environment"}, {"original_string": "ExecutableElement executable = mock(ExecutableElement.class);", "modifier": "", "type": "ExecutableElement", "declarator": "executable = mock(ExecutableElement.class)", "var_name": "executable"}, {"original_string": "Element element = mock(Element.class);", "modifier": "", "type": "Element", "declarator": "element = mock(Element.class)", "var_name": "element"}, {"original_string": "Types types = mock(Types.class);", "modifier": "", "type": "Types", "declarator": "types = mock(Types.class)", "var_name": "types"}, {"original_string": "ElementPluginParser parser = (ElementPluginParser) PluginParser.element(environment, elements, types);", "modifier": "", "type": "ElementPluginParser", "declarator": "parser = (ElementPluginParser) PluginParser.element(environment, elements, types)", "var_name": "parser"}], "file": "scribe/core/src/test/java/com/karuslabs/scribe/core/parsers/PluginParserTest.java"}, "test_case": {"identifier": "stringify", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void stringify() {\n        assertEquals(mirror.toString(), parser.stringify(type));\n    }", "signature": "void stringify()", "full_signature": "@Test void stringify()", "class_method_signature": "ElementPluginParserTest.stringify()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toString", "stringify"]}, "focal_class": {"identifier": "PluginParser", "superclass": "extends Parser<T>", "interfaces": "", "fields": [{"original_string": "Matcher matcher;", "modifier": "", "type": "Matcher", "declarator": "matcher", "var_name": "matcher"}], "methods": [{"identifier": "type", "parameters": "(Environment<Class<?>> environment)", "modifiers": "public static", "return": "PluginParser<Class<?>>", "signature": "PluginParser<Class<?>> type(Environment<Class<?>> environment)", "full_signature": "public static PluginParser<Class<?>> type(Environment<Class<?>> environment)", "class_method_signature": "PluginParser.type(Environment<Class<?>> environment)", "testcase": false, "constructor": false}, {"identifier": "element", "parameters": "(Environment<Element> environment, Elements elements, Types types)", "modifiers": "public static", "return": "PluginParser<Element>", "signature": "PluginParser<Element> element(Environment<Element> environment, Elements elements, Types types)", "full_signature": "public static PluginParser<Element> element(Environment<Element> environment, Elements elements, Types types)", "class_method_signature": "PluginParser.element(Environment<Element> environment, Elements elements, Types types)", "testcase": false, "constructor": false}, {"identifier": "PluginParser", "parameters": "(Environment<T> environment)", "modifiers": "public", "return": "", "signature": " PluginParser(Environment<T> environment)", "full_signature": "public  PluginParser(Environment<T> environment)", "class_method_signature": "PluginParser.PluginParser(Environment<T> environment)", "testcase": false, "constructor": true}, {"identifier": "check", "parameters": "(Set<T> types)", "modifiers": "@Override protected", "return": "void", "signature": "void check(Set<T> types)", "full_signature": "@Override protected void check(Set<T> types)", "class_method_signature": "PluginParser.check(Set<T> types)", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(T type)", "modifiers": "protected abstract", "return": "void", "signature": "void check(T type)", "full_signature": "protected abstract void check(T type)", "class_method_signature": "PluginParser.check(T type)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(T type)", "modifiers": "@Override protected", "return": "void", "signature": "void parse(T type)", "full_signature": "@Override protected void parse(T type)", "class_method_signature": "PluginParser.parse(T type)", "testcase": false, "constructor": false}, {"identifier": "stringify", "parameters": "(T type)", "modifiers": "protected abstract", "return": "String", "signature": "String stringify(T type)", "full_signature": "protected abstract String stringify(T type)", "class_method_signature": "PluginParser.stringify(T type)", "testcase": false, "constructor": false}], "file": "scribe/core/src/main/java/com/karuslabs/scribe/core/parsers/PluginParser.java"}, "focal_method": {"identifier": "stringify", "parameters": "(T type)", "modifiers": "protected abstract", "return": "String", "body": "protected abstract String stringify(T type);", "signature": "String stringify(T type)", "full_signature": "protected abstract String stringify(T type)", "class_method_signature": "PluginParser.stringify(T type)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}