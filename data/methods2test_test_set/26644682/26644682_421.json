{"test_class": {"identifier": "HtmlSchemaParserTest", "superclass": "extends AbstractSchemaTestUtils", "interfaces": "", "fields": [{"original_string": "private final static Logger logger = LoggerFactory.getLogger(HtmlSchemaParserTest.class);", "modifier": "private final static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(HtmlSchemaParserTest.class)", "var_name": "logger"}, {"original_string": "private static final String HEADER_SELECTOR = \"html body table tr th\";", "modifier": "private static final", "type": "String", "declarator": "HEADER_SELECTOR = \"html body table tr th\"", "var_name": "HEADER_SELECTOR"}, {"original_string": "private static final String VALUES_SELECTOR = \"html body table tr td\";", "modifier": "private static final", "type": "String", "declarator": "VALUES_SELECTOR = \"html body table tr td\"", "var_name": "VALUES_SELECTOR"}, {"original_string": "@Autowired\n    private HtmlSchemaParser parser;", "modifier": "@Autowired\n    private", "type": "HtmlSchemaParser", "declarator": "parser", "var_name": "parser"}, {"original_string": "@Autowired\n    private HtmlSerializer serializer;", "modifier": "@Autowired\n    private", "type": "HtmlSerializer", "declarator": "serializer", "var_name": "serializer"}, {"original_string": "@Autowired\n    private HtmlFormatFamily htmlFormatFamily;", "modifier": "@Autowired\n    private", "type": "HtmlFormatFamily", "declarator": "htmlFormatFamily", "var_name": "htmlFormatFamily"}, {"original_string": "@Autowired\n    private UnsupportedFormatFamily unsupportedFormatFamily;", "modifier": "@Autowired\n    private", "type": "UnsupportedFormatFamily", "declarator": "unsupportedFormatFamily", "var_name": "unsupportedFormatFamily"}], "file": "dataprep-backend-service/src/test/java/org/talend/dataprep/schema/html/HtmlSchemaParserTest.java"}, "test_case": {"identifier": "read_html_TDP_1136", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void read_html_TDP_1136() throws Exception {\n\n        try (InputStream inputStream = this.getClass().getResourceAsStream(\"sales-force.xls\")) {\n            // We do know the format and therefore we go directly to the HTML schema guessing\n            SchemaParser.Request request = getRequest(inputStream, \"#1\");\n            request.getMetadata().setEncoding(\"UTF-16\");\n\n            Schema result = parser.parse(request);\n            Assertions.assertThat(result).isNotNull();\n            Assertions.assertThat(result.getSheetContents()).isNotNull().isNotEmpty().hasSize(1);\n            List<ColumnMetadata> columnMetadatas = result.getSheetContents().get(0).getColumnMetadatas();\n            Assertions.assertThat(columnMetadatas).isNotNull().isNotEmpty().hasSize(7);\n\n            Assertions\n                    .assertThat(columnMetadatas.get(0)) //\n                    .isEqualToComparingOnlyGivenFields(\n                            ColumnMetadata.Builder\n                                    .column() //\n                                    .type(Type.STRING)\n                                    .id(0)\n                                    .name(\"UID\")\n                                    .build(), //\n                            \"id\", \"name\", \"type\");\n\n            Assertions\n                    .assertThat(columnMetadatas.get(1)) //\n                    .isEqualToComparingOnlyGivenFields(\n                            ColumnMetadata.Builder\n                                    .column() //\n                                    .type(Type.STRING)\n                                    .id(1)\n                                    .name(\"Team Member: Name\")\n                                    .build(), //\n                            \"id\", \"name\", \"type\");\n\n            Assertions\n                    .assertThat(columnMetadatas.get(2)) //\n                    .isEqualToComparingOnlyGivenFields(\n                            ColumnMetadata.Builder\n                                    .column() //\n                                    .type(Type.STRING)\n                                    .id(2)\n                                    .name(\"Country\")\n                                    .build(), //\n                            \"id\", \"name\", \"type\");\n        }\n    }", "signature": "void read_html_TDP_1136()", "full_signature": "@Test public void read_html_TDP_1136()", "class_method_signature": "HtmlSchemaParserTest.read_html_TDP_1136()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "getClass", "getRequest", "setEncoding", "getMetadata", "parse", "isNotNull", "assertThat", "hasSize", "isNotEmpty", "isNotNull", "assertThat", "getSheetContents", "getColumnMetadatas", "get", "getSheetContents", "hasSize", "isNotEmpty", "isNotNull", "assertThat", "isEqualToComparingOnlyGivenFields", "assertThat", "get", "build", "name", "id", "type", "column", "isEqualToComparingOnlyGivenFields", "assertThat", "get", "build", "name", "id", "type", "column", "isEqualToComparingOnlyGivenFields", "assertThat", "get", "build", "name", "id", "type", "column"]}, "focal_class": {"identifier": "HtmlSchemaParser", "superclass": "", "interfaces": "implements SchemaParser", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(HtmlSchemaParser.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(HtmlSchemaParser.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "parse", "parameters": "(Request request)", "modifiers": "@Override public", "return": "Schema", "signature": "Schema parse(Request request)", "full_signature": "@Override public Schema parse(Request request)", "class_method_signature": "HtmlSchemaParser.parse(Request request)", "testcase": false, "constructor": false}], "file": "dataprep-backend-service/src/main/java/org/talend/dataprep/schema/html/HtmlSchemaParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(Request request)", "modifiers": "@Override public", "return": "Schema", "body": "@Override\n    public Schema parse(Request request) {\n\n        try {\n            SimpleHeadersContentHandler headersContentHandler = new SimpleHeadersContentHandler();\n\n            InputStream inputStream = request.getContent();\n            HtmlParser htmlParser = new HtmlParser();\n\n            Metadata metadata = new Metadata();\n\n            htmlParser.parse(inputStream, headersContentHandler, metadata, new ParseContext());\n\n            List<ColumnMetadata> columns = new ArrayList<>(headersContentHandler.getHeaderValues().size());\n\n            for (String headerValue : headersContentHandler.getHeaderValues()) {\n                columns.add(ColumnMetadata.Builder\n                        .column() //\n                        .type(Type.STRING) // ATM not doing any complicated type calculation\n                        .name(headerValue) //\n                        .id(columns.size()) //\n                        .build());\n            }\n\n            Schema.SheetContent sheetContent = new Schema.SheetContent();\n            sheetContent.setColumnMetadatas(columns);\n\n            return Schema.Builder\n                    .parserResult() //\n                    .sheetContents(Collections.singletonList(sheetContent)) //\n                    .draft(false) //\n                    .build();\n\n        } catch (Exception e) {\n            LOGGER.debug(\"Exception during parsing html request :\" + e.getMessage(), e);\n            throw new TDPException(CommonErrorCodes.UNEXPECTED_EXCEPTION, e);\n        }\n\n    }", "signature": "Schema parse(Request request)", "full_signature": "@Override public Schema parse(Request request)", "class_method_signature": "HtmlSchemaParser.parse(Request request)", "testcase": false, "constructor": false, "invocations": ["getContent", "parse", "size", "getHeaderValues", "getHeaderValues", "add", "build", "id", "name", "type", "column", "size", "setColumnMetadatas", "build", "draft", "sheetContents", "parserResult", "singletonList", "debug", "getMessage"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}