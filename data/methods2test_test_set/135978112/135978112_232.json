{"test_class": {"identifier": "RoundRobinAssignorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RoundRobinAssignor assignor = new RoundRobinAssignor();", "modifier": "private", "type": "RoundRobinAssignor", "declarator": "assignor = new RoundRobinAssignor()", "var_name": "assignor"}], "file": "clients/src/test/java/org/apache/kafka/clients/consumer/RoundRobinAssignorTest.java"}, "test_case": {"identifier": "testOneConsumerNoTopic", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOneConsumerNoTopic() {\n        String consumerId = \"consumer\";\n\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic,\n                Collections.singletonMap(consumerId, Collections.<String>emptyList()));\n        assertEquals(Collections.singleton(consumerId), assignment.keySet());\n        assertTrue(assignment.get(consumerId).isEmpty());\n    }", "signature": "void testOneConsumerNoTopic()", "full_signature": "@Test public void testOneConsumerNoTopic()", "class_method_signature": "RoundRobinAssignorTest.testOneConsumerNoTopic()", "testcase": true, "constructor": false, "invocations": ["assign", "singletonMap", "emptyList", "assertEquals", "singleton", "keySet", "assertTrue", "isEmpty", "get"]}, "focal_class": {"identifier": "RoundRobinAssignor", "superclass": "extends AbstractPartitionAssignor", "interfaces": "", "fields": [], "methods": [{"identifier": "assign", "parameters": "(Map<String/* topic */, Integer/*  */> partitionsPerTopic,\n        Map<String/* memberId */, List<String/* topic */>> subscriptions)", "modifiers": "@Override public", "return": "Map<String/* memberId */, List<TopicPartition>>", "signature": "Map<String/* memberId */, List<TopicPartition>> assign(Map<String/* topic */, Integer/*  */> partitionsPerTopic,\n        Map<String/* memberId */, List<String/* topic */>> subscriptions)", "full_signature": "@Override public Map<String/* memberId */, List<TopicPartition>> assign(Map<String/* topic */, Integer/*  */> partitionsPerTopic,\n        Map<String/* memberId */, List<String/* topic */>> subscriptions)", "class_method_signature": "RoundRobinAssignor.assign(Map<String/* topic */, Integer/*  */> partitionsPerTopic,\n        Map<String/* memberId */, List<String/* topic */>> subscriptions)", "testcase": false, "constructor": false}, {"identifier": "allPartitionsSorted", "parameters": "(Map<String, Integer> partitionsPerTopic,\n        Map<String, List<String>> subscriptions)", "modifiers": "public", "return": "List<TopicPartition>", "signature": "List<TopicPartition> allPartitionsSorted(Map<String, Integer> partitionsPerTopic,\n        Map<String, List<String>> subscriptions)", "full_signature": "public List<TopicPartition> allPartitionsSorted(Map<String, Integer> partitionsPerTopic,\n        Map<String, List<String>> subscriptions)", "class_method_signature": "RoundRobinAssignor.allPartitionsSorted(Map<String, Integer> partitionsPerTopic,\n        Map<String, List<String>> subscriptions)", "testcase": false, "constructor": false}, {"identifier": "name", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String name()", "full_signature": "@Override public String name()", "class_method_signature": "RoundRobinAssignor.name()", "testcase": false, "constructor": false}], "file": "clients/src/main/java/org/apache/kafka/clients/consumer/RoundRobinAssignor.java"}, "focal_method": {"identifier": "assign", "parameters": "(Map<String/* topic */, Integer/*  */> partitionsPerTopic,\n        Map<String/* memberId */, List<String/* topic */>> subscriptions)", "modifiers": "@Override public", "return": "Map<String/* memberId */, List<TopicPartition>>", "body": "@Override\n    public Map<String/* memberId */, List<TopicPartition>> assign(Map<String/* topic */, Integer/*  */> partitionsPerTopic,\n        Map<String/* memberId */, List<String/* topic */>> subscriptions) {\n\n        Map<String, List<TopicPartition>> assignment = new HashMap<>();\n        for (String memberId : subscriptions.keySet())\n            assignment.put(memberId, new ArrayList<TopicPartition>());\n\n        CircularIterator<String/* memberId */> assigner = new CircularIterator<>(Utils.sorted(subscriptions.keySet()/* memberId */));\n        for (TopicPartition partition : allPartitionsSorted(partitionsPerTopic, subscriptions)) {\n            final String topic = partition.topic();\n            while (!subscriptions.get(assigner.peek())\n                                 .contains(topic)) {\n                assigner.next();\n            }\n            assignment.get(assigner.next())\n                      .add(partition);\n        }\n        return assignment;\n    }", "signature": "Map<String/* memberId */, List<TopicPartition>> assign(Map<String/* topic */, Integer/*  */> partitionsPerTopic,\n        Map<String/* memberId */, List<String/* topic */>> subscriptions)", "full_signature": "@Override public Map<String/* memberId */, List<TopicPartition>> assign(Map<String/* topic */, Integer/*  */> partitionsPerTopic,\n        Map<String/* memberId */, List<String/* topic */>> subscriptions)", "class_method_signature": "RoundRobinAssignor.assign(Map<String/* topic */, Integer/*  */> partitionsPerTopic,\n        Map<String/* memberId */, List<String/* topic */>> subscriptions)", "testcase": false, "constructor": false, "invocations": ["keySet", "put", "sorted", "keySet", "allPartitionsSorted", "topic", "contains", "get", "peek", "next", "add", "get", "next"]}, "repository": {"repo_id": 135978112, "url": "https://github.com/anurnomeru/kafka-0.10.0.1-source-reading", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 2953, "license": "licensed"}}