{"test_class": {"identifier": "ExceptionUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "concurrency/src/test/java/com/baidu/unbiz/common/ExceptionUtilTest.java"}, "test_case": {"identifier": "causedBy_causeTypeIsNull", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void causedBy_causeTypeIsNull() {\n        ExceptionUtil.causedBy(new Exception(), null);\n    }", "signature": "void causedBy_causeTypeIsNull()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void causedBy_causeTypeIsNull()", "class_method_signature": "ExceptionUtilTest.causedBy_causeTypeIsNull()", "testcase": true, "constructor": false, "invocations": ["causedBy"]}, "focal_class": {"identifier": "ExceptionUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "causedBy", "parameters": "(Throwable throwable, Class<? extends Throwable> causeType)", "modifiers": "public static", "return": "boolean", "signature": "boolean causedBy(Throwable throwable, Class<? extends Throwable> causeType)", "full_signature": "public static boolean causedBy(Throwable throwable, Class<? extends Throwable> causeType)", "class_method_signature": "ExceptionUtil.causedBy(Throwable throwable, Class<? extends Throwable> causeType)", "testcase": false, "constructor": false}, {"identifier": "getRootCause", "parameters": "(Throwable throwable)", "modifiers": "public static", "return": "Throwable", "signature": "Throwable getRootCause(Throwable throwable)", "full_signature": "public static Throwable getRootCause(Throwable throwable)", "class_method_signature": "ExceptionUtil.getRootCause(Throwable throwable)", "testcase": false, "constructor": false}, {"identifier": "getCauses", "parameters": "(Throwable throwable)", "modifiers": "public static", "return": "List<Throwable>", "signature": "List<Throwable> getCauses(Throwable throwable)", "full_signature": "public static List<Throwable> getCauses(Throwable throwable)", "class_method_signature": "ExceptionUtil.getCauses(Throwable throwable)", "testcase": false, "constructor": false}, {"identifier": "getCauses", "parameters": "(Throwable throwable, boolean reversed)", "modifiers": "public static", "return": "List<Throwable>", "signature": "List<Throwable> getCauses(Throwable throwable, boolean reversed)", "full_signature": "public static List<Throwable> getCauses(Throwable throwable, boolean reversed)", "class_method_signature": "ExceptionUtil.getCauses(Throwable throwable, boolean reversed)", "testcase": false, "constructor": false}, {"identifier": "toRuntimeException", "parameters": "(Exception exception)", "modifiers": "public static", "return": "RuntimeException", "signature": "RuntimeException toRuntimeException(Exception exception)", "full_signature": "public static RuntimeException toRuntimeException(Exception exception)", "class_method_signature": "ExceptionUtil.toRuntimeException(Exception exception)", "testcase": false, "constructor": false}, {"identifier": "toRuntimeException", "parameters": "(Exception exception,\n            Class<? extends RuntimeException> runtimeExceptionClass)", "modifiers": "public static", "return": "RuntimeException", "signature": "RuntimeException toRuntimeException(Exception exception,\n            Class<? extends RuntimeException> runtimeExceptionClass)", "full_signature": "public static RuntimeException toRuntimeException(Exception exception,\n            Class<? extends RuntimeException> runtimeExceptionClass)", "class_method_signature": "ExceptionUtil.toRuntimeException(Exception exception,\n            Class<? extends RuntimeException> runtimeExceptionClass)", "testcase": false, "constructor": false}, {"identifier": "throwExceptionOrError", "parameters": "(Throwable throwable)", "modifiers": "public static", "return": "void", "signature": "void throwExceptionOrError(Throwable throwable)", "full_signature": "public static void throwExceptionOrError(Throwable throwable)", "class_method_signature": "ExceptionUtil.throwExceptionOrError(Throwable throwable)", "testcase": false, "constructor": false}, {"identifier": "throwRuntimeExceptionOrError", "parameters": "(Throwable throwable)", "modifiers": "public static", "return": "void", "signature": "void throwRuntimeExceptionOrError(Throwable throwable)", "full_signature": "public static void throwRuntimeExceptionOrError(Throwable throwable)", "class_method_signature": "ExceptionUtil.throwRuntimeExceptionOrError(Throwable throwable)", "testcase": false, "constructor": false}, {"identifier": "getStackTrace", "parameters": "(Throwable throwable)", "modifiers": "public static", "return": "String", "signature": "String getStackTrace(Throwable throwable)", "full_signature": "public static String getStackTrace(Throwable throwable)", "class_method_signature": "ExceptionUtil.getStackTrace(Throwable throwable)", "testcase": false, "constructor": false}], "file": "concurrency/src/main/java/com/baidu/unbiz/common/ExceptionUtil.java"}, "focal_method": {"identifier": "causedBy", "parameters": "(Throwable throwable, Class<? extends Throwable> causeType)", "modifiers": "public static", "return": "boolean", "body": "public static boolean causedBy(Throwable throwable, Class<? extends Throwable> causeType) {\n        assertNotNull(causeType, \"causeType\");\n\n        Set<Throwable> causes = CollectionUtil.createHashSet();\n\n        for (; throwable != null && !causeType.isInstance(throwable) && !causes.contains(throwable); throwable =\n                throwable.getCause()) {\n            causes.add(throwable);\n        }\n\n        return throwable != null && causeType.isInstance(throwable);\n    }", "signature": "boolean causedBy(Throwable throwable, Class<? extends Throwable> causeType)", "full_signature": "public static boolean causedBy(Throwable throwable, Class<? extends Throwable> causeType)", "class_method_signature": "ExceptionUtil.causedBy(Throwable throwable, Class<? extends Throwable> causeType)", "testcase": false, "constructor": false, "invocations": ["assertNotNull", "createHashSet", "isInstance", "contains", "getCause", "add", "isInstance"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}