{"test_class": {"identifier": "DlmsConnectionHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DlmsConnectionHelper helper;", "modifier": "private", "type": "DlmsConnectionHelper", "declarator": "helper", "var_name": "helper"}, {"original_string": "@Mock\n    private InvocationCounterManager invocationCounterManager;", "modifier": "@Mock\n    private", "type": "InvocationCounterManager", "declarator": "invocationCounterManager", "var_name": "invocationCounterManager"}, {"original_string": "@Mock\n    private DlmsConnectionFactory connectionFactory;", "modifier": "@Mock\n    private", "type": "DlmsConnectionFactory", "declarator": "connectionFactory", "var_name": "connectionFactory"}], "file": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/test/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/DlmsConnectionHelperTest.java"}, "test_case": {"identifier": "createsConnectionForDeviceThatDoesNotNeedInvocationCounter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void createsConnectionForDeviceThatDoesNotNeedInvocationCounter() throws Exception {\n        final DlmsDevice device = new DlmsDeviceBuilder().withHls5Active(false).build();\n        final DlmsMessageListener listener = new InvocationCountingDlmsMessageListener();\n\n        final DlmsConnectionManager connectionManager = mock(DlmsConnectionManager.class);\n        when(this.connectionFactory.getConnection(device, listener)).thenReturn(connectionManager);\n\n        final DlmsConnectionManager result = this.helper.createConnectionForDevice(device, listener);\n\n        assertThat(result).isSameAs(connectionManager);\n    }", "signature": "void createsConnectionForDeviceThatDoesNotNeedInvocationCounter()", "full_signature": "@Test public void createsConnectionForDeviceThatDoesNotNeedInvocationCounter()", "class_method_signature": "DlmsConnectionHelperTest.createsConnectionForDeviceThatDoesNotNeedInvocationCounter()", "testcase": true, "constructor": false, "invocations": ["build", "withHls5Active", "mock", "thenReturn", "when", "getConnection", "createConnectionForDevice", "isSameAs", "assertThat"]}, "focal_class": {"identifier": "DlmsConnectionHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(DlmsConnectionHelper.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DlmsConnectionHelper.class)", "var_name": "LOGGER"}, {"original_string": "private final InvocationCounterManager invocationCounterManager;", "modifier": "private final", "type": "InvocationCounterManager", "declarator": "invocationCounterManager", "var_name": "invocationCounterManager"}, {"original_string": "private final DlmsConnectionFactory connectionFactory;", "modifier": "private final", "type": "DlmsConnectionFactory", "declarator": "connectionFactory", "var_name": "connectionFactory"}], "methods": [{"identifier": "DlmsConnectionHelper", "parameters": "(final InvocationCounterManager invocationCounterManager,\n            final DlmsConnectionFactory connectionFactory)", "modifiers": "@Autowired public", "return": "", "signature": " DlmsConnectionHelper(final InvocationCounterManager invocationCounterManager,\n            final DlmsConnectionFactory connectionFactory)", "full_signature": "@Autowired public  DlmsConnectionHelper(final InvocationCounterManager invocationCounterManager,\n            final DlmsConnectionFactory connectionFactory)", "class_method_signature": "DlmsConnectionHelper.DlmsConnectionHelper(final InvocationCounterManager invocationCounterManager,\n            final DlmsConnectionFactory connectionFactory)", "testcase": false, "constructor": true}, {"identifier": "createConnectionForDevice", "parameters": "(final DlmsDevice device,\n            final DlmsMessageListener messageListener)", "modifiers": "public", "return": "DlmsConnectionManager", "signature": "DlmsConnectionManager createConnectionForDevice(final DlmsDevice device,\n            final DlmsMessageListener messageListener)", "full_signature": "public DlmsConnectionManager createConnectionForDevice(final DlmsDevice device,\n            final DlmsMessageListener messageListener)", "class_method_signature": "DlmsConnectionHelper.createConnectionForDevice(final DlmsDevice device,\n            final DlmsMessageListener messageListener)", "testcase": false, "constructor": false}, {"identifier": "resetInvocationCounter", "parameters": "(final DlmsDevice device)", "modifiers": "private", "return": "void", "signature": "void resetInvocationCounter(final DlmsDevice device)", "full_signature": "private void resetInvocationCounter(final DlmsDevice device)", "class_method_signature": "DlmsConnectionHelper.resetInvocationCounter(final DlmsDevice device)", "testcase": false, "constructor": false}, {"identifier": "indicatesInvocationCounterOutOfSync", "parameters": "(final ConnectionException e)", "modifiers": "private", "return": "boolean", "signature": "boolean indicatesInvocationCounterOutOfSync(final ConnectionException e)", "full_signature": "private boolean indicatesInvocationCounterOutOfSync(final ConnectionException e)", "class_method_signature": "DlmsConnectionHelper.indicatesInvocationCounterOutOfSync(final ConnectionException e)", "testcase": false, "constructor": false}], "file": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/DlmsConnectionHelper.java"}, "focal_method": {"identifier": "createConnectionForDevice", "parameters": "(final DlmsDevice device,\n            final DlmsMessageListener messageListener)", "modifiers": "public", "return": "DlmsConnectionManager", "body": "public DlmsConnectionManager createConnectionForDevice(final DlmsDevice device,\n            final DlmsMessageListener messageListener) throws OsgpException {\n        if (device.needsInvocationCounter() && !device.isInvocationCounterInitialized()) {\n            this.invocationCounterManager.initializeInvocationCounter(device);\n        }\n\n        try {\n            return this.connectionFactory.getConnection(device, messageListener);\n        } catch (final ConnectionException e) {\n            if (device.needsInvocationCounter() && this.indicatesInvocationCounterOutOfSync(e)) {\n                this.resetInvocationCounter(device);\n            }\n            // Retrow exception, for two reasons:\n            // - The error should still be logged, since it can be caused by a problem other than the invocation\n            //   counter being out of sync.\n            // - This will cause a retry header to be set so the operation will be retried.\n            throw e;\n        }\n    }", "signature": "DlmsConnectionManager createConnectionForDevice(final DlmsDevice device,\n            final DlmsMessageListener messageListener)", "full_signature": "public DlmsConnectionManager createConnectionForDevice(final DlmsDevice device,\n            final DlmsMessageListener messageListener)", "class_method_signature": "DlmsConnectionHelper.createConnectionForDevice(final DlmsDevice device,\n            final DlmsMessageListener messageListener)", "testcase": false, "constructor": false, "invocations": ["needsInvocationCounter", "isInvocationCounterInitialized", "initializeInvocationCounter", "getConnection", "needsInvocationCounter", "indicatesInvocationCounterOutOfSync", "resetInvocationCounter"]}, "repository": {"repo_id": 154302277, "url": "https://github.com/OSGP/open-smart-grid-platform", "stars": 30, "created": "10/23/2018 9:41:12 AM +00:00", "updates": "2020-01-26T20:15:09+00:00", "fork": "False", "license": "licensed"}}