{"test_class": {"identifier": "GrapesServerTest", "superclass": "extends GrapesServer", "interfaces": "", "fields": [{"original_string": "public static final String PROPERTY_PORT = \"server.mock.http.port\";", "modifier": "public static final", "type": "String", "declarator": "PROPERTY_PORT = \"server.mock.http.port\"", "var_name": "PROPERTY_PORT"}, {"original_string": "private static final String DEFAULT_PORT = \"8074\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_PORT = \"8074\"", "var_name": "DEFAULT_PORT"}, {"original_string": "public static final String PROPERTY_ADMIN_PORT = \"server.mock.http.port.admin\";", "modifier": "public static final", "type": "String", "declarator": "PROPERTY_ADMIN_PORT = \"server.mock.http.port.admin\"", "var_name": "PROPERTY_ADMIN_PORT"}, {"original_string": "private static final String DEFAULT_ADMIN_PORT = \"8073\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_ADMIN_PORT = \"8073\"", "var_name": "DEFAULT_ADMIN_PORT"}], "file": "server/src/test/java/org/axway/grapes/server/GrapesServerTest.java"}, "test_case": {"identifier": "checkInitialization", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void checkInitialization() throws UnknownHostException {\n        String portProperty = System.getProperty(PROPERTY_PORT, null);\n\t\t\n\t\tif(portProperty == null || !isInteger(portProperty)){\n\t\t\tLogger.getLogger(GrapesServerTest.class.getSimpleName()).info(\"No variable HTTP_PORT define, server mock will be run on the default port value: \" + DEFAULT_PORT);\n            portProperty = DEFAULT_PORT;\n\t\t}\n        else{\n            Logger.getLogger(GrapesServerTest.class.getSimpleName()).info(\"Uses port \" + portProperty + \" as grapes http port for tests.\");\n        }\n        \n        String adminPortProperty = System.getProperty(PROPERTY_ADMIN_PORT, null);\n\t\t\n\t\tif(adminPortProperty == null || !isInteger(adminPortProperty)){\n            Logger.getLogger(GrapesServerTest.class.getSimpleName()).info(\"No variable HTTP_ADMIN_PORT define, server mock will be run on the default port value: \" + DEFAULT_ADMIN_PORT);\n            adminPortProperty = DEFAULT_ADMIN_PORT;\n\t\t}\n        else{\n            Logger.getLogger(GrapesServerTest.class.getSimpleName()).info(\"Uses port \" + adminPortProperty + \" as admin port for grapes tests.\");\n        }\n        \n        final String templatePath = getClass().getResource(\"server-conf-template.yml\").getPath();\n        final String confPath = overrideConfiguration(templatePath, portProperty, adminPortProperty);\n\n\n        try {\n            File templates = new File(templatePath).getParentFile();\n            FileUtils.copyFileToDirectory(new File(templates, \"all-messages.txt\"), new File(\"target\"));\n        } catch(IOException e) {\n            e.printStackTrace();\n        }\n\n\n        final GrapesServerTest grapesServer = new GrapesServerTest();\n        final String[] args = {\"server\",confPath};\n        \n        Throwable exception  = null;\n        \n        try {\n            grapesServer.run(args);\n        } catch (Exception e) {\n            exception = e;\n        }\n        \n        assertNull(exception);\n        \n    }", "signature": "void checkInitialization()", "full_signature": "@Test public void checkInitialization()", "class_method_signature": "GrapesServerTest.checkInitialization()", "testcase": true, "constructor": false, "invocations": ["getProperty", "isInteger", "info", "getLogger", "getSimpleName", "info", "getLogger", "getSimpleName", "getProperty", "isInteger", "info", "getLogger", "getSimpleName", "info", "getLogger", "getSimpleName", "getPath", "getResource", "getClass", "overrideConfiguration", "getParentFile", "copyFileToDirectory", "printStackTrace", "run", "assertNull"]}, "focal_class": {"identifier": "GrapesServer", "superclass": "extends Service<GrapesServerConfig>", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(GrapesServer.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(GrapesServer.class)", "var_name": "LOG"}], "methods": [{"identifier": "GrapesServer", "parameters": "()", "modifiers": "protected", "return": "", "signature": " GrapesServer()", "full_signature": "protected  GrapesServer()", "class_method_signature": "GrapesServer.GrapesServer()", "testcase": false, "constructor": true}, {"identifier": "main", "parameters": "(final String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(final String[] args)", "full_signature": "public static void main(final String[] args)", "class_method_signature": "GrapesServer.main(final String[] args)", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "(final Bootstrap<GrapesServerConfig> bootstrap)", "modifiers": "@Override public", "return": "void", "signature": "void initialize(final Bootstrap<GrapesServerConfig> bootstrap)", "full_signature": "@Override public void initialize(final Bootstrap<GrapesServerConfig> bootstrap)", "class_method_signature": "GrapesServer.initialize(final Bootstrap<GrapesServerConfig> bootstrap)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "(final GrapesServerConfig config, final Environment env)", "modifiers": "@Override public", "return": "void", "signature": "void run(final GrapesServerConfig config, final Environment env)", "full_signature": "@Override public void run(final GrapesServerConfig config, final Environment env)", "class_method_signature": "GrapesServer.run(final GrapesServerConfig config, final Environment env)", "testcase": false, "constructor": false}, {"identifier": "getRepositoryHandler", "parameters": "(final GrapesServerConfig config)", "modifiers": "public", "return": "RepositoryHandler", "signature": "RepositoryHandler getRepositoryHandler(final GrapesServerConfig config)", "full_signature": "public RepositoryHandler getRepositoryHandler(final GrapesServerConfig config)", "class_method_signature": "GrapesServer.getRepositoryHandler(final GrapesServerConfig config)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/axway/grapes/server/GrapesServer.java"}, "focal_method": {"identifier": "run", "parameters": "(final GrapesServerConfig config, final Environment env)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void run(final GrapesServerConfig config, final Environment env) throws DBException, UnknownHostException {\n        PromoConfigValidator v = new PromoConfigValidator();\n        v.testValidity(config.getPromoValidationCfg());\n        PromoConfigPrinter.display(config.getPromoValidationCfg(),\n                str -> {\n                    if (LOG.isInfoEnabled()) {\n                        LOG.info(str);\n                    }\n                });\n\n        // init the repoHandler\n        final RepositoryHandler repoHandler = getRepositoryHandler(config);\n        \n        Messages.init(config.getMsgBundle());\n        env.scanPackagesForResourcesAndProviders(CsvReportWriter.class);\n\n        // Add credential management\n        final GrapesAuthenticator grapesAuthenticator = new GrapesAuthenticator(repoHandler);\n        final BasicAuthProvider authProvider = new BasicAuthProvider<>(grapesAuthenticator, \"Grapes Authenticator Provider\");\n        env.addProvider(authProvider);\n        \n        \n        // Tasks\n        env.addTask(new AddUserTask(repoHandler));\n        env.addTask(new AddRoleTask(repoHandler));\n        env.addTask(new RemoveRoleTask(repoHandler));\n        env.addTask(new MaintenanceModeTask(config));\n        env.addTask(new KillTask());\n        env.addTask(new MigrationTask(config.getDataBaseConfig()));\n        env.addTask(new RefreshCommercialDeliveriesTask(repoHandler));\n        env.addTask(new SendEmailTestTask(config.getGrapesEmailConfig()));\n        env.addTask(new ShowValidationsTask());\n        env.addTask(new ChangeValidationsTask());\n\n        \n        // Health checks\n        env.addHealthCheck(new DataBaseCheck(config.getDataBaseConfig()));\n        env.addHealthCheck(new DataModelVersionCheck(config.getDataBaseConfig()));\n\n        // Resources\n        env.addResource(new OrganizationResource(repoHandler, config));\n        env.addResource(new ProductResource(repoHandler, config));\n        env.addResource(new ModuleResource(repoHandler, config));\n        env.addResource(new ArtifactResource(repoHandler, config));\n        env.addResource(new LicenseResource(repoHandler, config));\n        env.addResource(new Sequoia(repoHandler, config));\n        env.addResource(new WebAppResource(repoHandler, config));\n        env.addResource(new RootResource(repoHandler, config));\n        env.addResource(new ReportResource(repoHandler, config));\n        env.addResource(new SearchResource(repoHandler, config));\n        env.addResource(new WebSearchResource(repoHandler, config));\n\t}", "signature": "void run(final GrapesServerConfig config, final Environment env)", "full_signature": "@Override public void run(final GrapesServerConfig config, final Environment env)", "class_method_signature": "GrapesServer.run(final GrapesServerConfig config, final Environment env)", "testcase": false, "constructor": false, "invocations": ["testValidity", "getPromoValidationCfg", "display", "getPromoValidationCfg", "isInfoEnabled", "info", "getRepositoryHandler", "init", "getMsgBundle", "scanPackagesForResourcesAndProviders", "addProvider", "addTask", "addTask", "addTask", "addTask", "addTask", "addTask", "getDataBaseConfig", "addTask", "addTask", "getGrapesEmailConfig", "addTask", "addTask", "addHealthCheck", "getDataBaseConfig", "addHealthCheck", "getDataBaseConfig", "addResource", "addResource", "addResource", "addResource", "addResource", "addResource", "addResource", "addResource", "addResource", "addResource", "addResource"]}, "repository": {"repo_id": 14858974, "url": "https://github.com/Axway/Grapes", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 8, "size": 3620, "license": "licensed"}}