{"test_class": {"identifier": "ExternalSpreadsheetCompilerTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools-decisiontables/src/test/java/org/drools/decisiontable/ExternalSpreadsheetCompilerTest.java"}, "test_case": {"identifier": "testIntegration", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIntegration() throws Exception {\n        final ExternalSpreadsheetCompiler converter = new ExternalSpreadsheetCompiler();\n        final String drl = converter.compile(\"/data/IntegrationExampleTest.xls\", \"/templates/test_integration.drl\", 18, 3);\n\n        KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();\n        kbuilder.add(ResourceFactory.newByteArrayResource(drl.getBytes()), ResourceType.DRL);\n        assertFalse(kbuilder.hasErrors());\n\n        InternalKnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();\n        kbase.addPackages(kbuilder.getKnowledgePackages());\n        KieSession kSession = kbase.newKieSession();\n\n        //ASSERT AND FIRE\n        kSession.insert( new Cheese( \"stilton\", 42 ) );\n        kSession.insert( new Person( \"michael\", \"stilton\", 42 ) );\n        List<String> list = new ArrayList<String>();\n        kSession.setGlobal( \"list\", list );\n        kSession.fireAllRules();\n        assertEquals( 1, list.size() );\n    }", "signature": "void testIntegration()", "full_signature": "@Test public void testIntegration()", "class_method_signature": "ExternalSpreadsheetCompilerTest.testIntegration()", "testcase": true, "constructor": false, "invocations": ["compile", "newKnowledgeBuilder", "add", "newByteArrayResource", "getBytes", "assertFalse", "hasErrors", "newKnowledgeBase", "addPackages", "getKnowledgePackages", "newKieSession", "insert", "insert", "setGlobal", "fireAllRules", "assertEquals", "size"]}, "focal_class": {"identifier": "ExternalSpreadsheetCompiler", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final transient Logger logger = LoggerFactory.getLogger(ExternalSpreadsheetCompiler.class);", "modifier": "protected static final transient", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ExternalSpreadsheetCompiler.class)", "var_name": "logger"}], "methods": [{"identifier": "compile", "parameters": "(final String xls,\n                          final String template,\n                          int startRow,\n                          int startCol)", "modifiers": "public", "return": "String", "signature": "String compile(final String xls,\n                          final String template,\n                          int startRow,\n                          int startCol)", "full_signature": "public String compile(final String xls,\n                          final String template,\n                          int startRow,\n                          int startCol)", "class_method_signature": "ExternalSpreadsheetCompiler.compile(final String xls,\n                          final String template,\n                          int startRow,\n                          int startCol)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(final String xls,\n                          final String template,\n                          InputType type,\n                          int startRow,\n                          int startCol)", "modifiers": "public", "return": "String", "signature": "String compile(final String xls,\n                          final String template,\n                          InputType type,\n                          int startRow,\n                          int startCol)", "full_signature": "public String compile(final String xls,\n                          final String template,\n                          InputType type,\n                          int startRow,\n                          int startCol)", "class_method_signature": "ExternalSpreadsheetCompiler.compile(final String xls,\n                          final String template,\n                          InputType type,\n                          int startRow,\n                          int startCol)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(final String xls,\n                          final String worksheetName,\n                          final String template,\n                          int startRow,\n                          int startCol)", "modifiers": "public", "return": "String", "signature": "String compile(final String xls,\n                          final String worksheetName,\n                          final String template,\n                          int startRow,\n                          int startCol)", "full_signature": "public String compile(final String xls,\n                          final String worksheetName,\n                          final String template,\n                          int startRow,\n                          int startCol)", "class_method_signature": "ExternalSpreadsheetCompiler.compile(final String xls,\n                          final String worksheetName,\n                          final String template,\n                          int startRow,\n                          int startCol)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(final InputStream xlsStream,\n                          final InputStream templateStream,\n                          int startRow,\n                          int startCol)", "modifiers": "public", "return": "String", "signature": "String compile(final InputStream xlsStream,\n                          final InputStream templateStream,\n                          int startRow,\n                          int startCol)", "full_signature": "public String compile(final InputStream xlsStream,\n                          final InputStream templateStream,\n                          int startRow,\n                          int startCol)", "class_method_signature": "ExternalSpreadsheetCompiler.compile(final InputStream xlsStream,\n                          final InputStream templateStream,\n                          int startRow,\n                          int startCol)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(final InputStream xlsStream,\n                          final InputStream templateStream,\n                          InputType type,\n                          int startRow,\n                          int startCol)", "modifiers": "public", "return": "String", "signature": "String compile(final InputStream xlsStream,\n                          final InputStream templateStream,\n                          InputType type,\n                          int startRow,\n                          int startCol)", "full_signature": "public String compile(final InputStream xlsStream,\n                          final InputStream templateStream,\n                          InputType type,\n                          int startRow,\n                          int startCol)", "class_method_signature": "ExternalSpreadsheetCompiler.compile(final InputStream xlsStream,\n                          final InputStream templateStream,\n                          InputType type,\n                          int startRow,\n                          int startCol)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(final InputStream xlsStream,\n                          final String worksheetName,\n                          final InputStream templateStream,\n                          int startRow,\n                          int startCol)", "modifiers": "public", "return": "String", "signature": "String compile(final InputStream xlsStream,\n                          final String worksheetName,\n                          final InputStream templateStream,\n                          int startRow,\n                          int startCol)", "full_signature": "public String compile(final InputStream xlsStream,\n                          final String worksheetName,\n                          final InputStream templateStream,\n                          int startRow,\n                          int startCol)", "class_method_signature": "ExternalSpreadsheetCompiler.compile(final InputStream xlsStream,\n                          final String worksheetName,\n                          final InputStream templateStream,\n                          int startRow,\n                          int startCol)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(final String xls,\n                        InputType type,\n                        final List<DataListener> listeners)", "modifiers": "public", "return": "void", "signature": "void compile(final String xls,\n                        InputType type,\n                        final List<DataListener> listeners)", "full_signature": "public void compile(final String xls,\n                        InputType type,\n                        final List<DataListener> listeners)", "class_method_signature": "ExternalSpreadsheetCompiler.compile(final String xls,\n                        InputType type,\n                        final List<DataListener> listeners)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(final String xls,\n                        final Map<String, List<DataListener>> listeners)", "modifiers": "public", "return": "void", "signature": "void compile(final String xls,\n                        final Map<String, List<DataListener>> listeners)", "full_signature": "public void compile(final String xls,\n                        final Map<String, List<DataListener>> listeners)", "class_method_signature": "ExternalSpreadsheetCompiler.compile(final String xls,\n                        final Map<String, List<DataListener>> listeners)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(final InputStream xlsStream,\n                        InputType type,\n                        final List<DataListener> listeners)", "modifiers": "public", "return": "void", "signature": "void compile(final InputStream xlsStream,\n                        InputType type,\n                        final List<DataListener> listeners)", "full_signature": "public void compile(final InputStream xlsStream,\n                        InputType type,\n                        final List<DataListener> listeners)", "class_method_signature": "ExternalSpreadsheetCompiler.compile(final InputStream xlsStream,\n                        InputType type,\n                        final List<DataListener> listeners)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(final InputStream xlsStream,\n                        final Map<String, List<DataListener>> listeners)", "modifiers": "public", "return": "void", "signature": "void compile(final InputStream xlsStream,\n                        final Map<String, List<DataListener>> listeners)", "full_signature": "public void compile(final InputStream xlsStream,\n                        final Map<String, List<DataListener>> listeners)", "class_method_signature": "ExternalSpreadsheetCompiler.compile(final InputStream xlsStream,\n                        final Map<String, List<DataListener>> listeners)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(final InputStream xlsStream,\n                          final InputType type,\n                          final TemplateDataListener listener)", "modifiers": "public", "return": "String", "signature": "String compile(final InputStream xlsStream,\n                          final InputType type,\n                          final TemplateDataListener listener)", "full_signature": "public String compile(final InputStream xlsStream,\n                          final InputType type,\n                          final TemplateDataListener listener)", "class_method_signature": "ExternalSpreadsheetCompiler.compile(final InputStream xlsStream,\n                          final InputType type,\n                          final TemplateDataListener listener)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(final InputStream xlsStream,\n                          final String worksheetName,\n                          final TemplateDataListener listener)", "modifiers": "public", "return": "String", "signature": "String compile(final InputStream xlsStream,\n                          final String worksheetName,\n                          final TemplateDataListener listener)", "full_signature": "public String compile(final InputStream xlsStream,\n                          final String worksheetName,\n                          final TemplateDataListener listener)", "class_method_signature": "ExternalSpreadsheetCompiler.compile(final InputStream xlsStream,\n                          final String worksheetName,\n                          final TemplateDataListener listener)", "testcase": false, "constructor": false}, {"identifier": "closeStream", "parameters": "(final InputStream stream)", "modifiers": "private", "return": "void", "signature": "void closeStream(final InputStream stream)", "full_signature": "private void closeStream(final InputStream stream)", "class_method_signature": "ExternalSpreadsheetCompiler.closeStream(final InputStream stream)", "testcase": false, "constructor": false}], "file": "drools-decisiontables/src/main/java/org/drools/decisiontable/ExternalSpreadsheetCompiler.java"}, "focal_method": {"identifier": "compile", "parameters": "(final String xls,\n                          final String template,\n                          int startRow,\n                          int startCol)", "modifiers": "public", "return": "String", "body": "public String compile(final String xls,\n                          final String template,\n                          int startRow,\n                          int startCol) {\n        return compile( xls,\n                        template,\n                        InputType.XLS,\n                        startRow,\n                        startCol );\n\n    }", "signature": "String compile(final String xls,\n                          final String template,\n                          int startRow,\n                          int startCol)", "full_signature": "public String compile(final String xls,\n                          final String template,\n                          int startRow,\n                          int startCol)", "class_method_signature": "ExternalSpreadsheetCompiler.compile(final String xls,\n                          final String template,\n                          int startRow,\n                          int startCol)", "testcase": false, "constructor": false, "invocations": ["compile"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}