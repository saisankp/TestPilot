{"test_class": {"identifier": "EventRetrievalScheduledTaskTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private EventRetrievalScheduledTask task;", "modifier": "@InjectMocks\n    private", "type": "EventRetrievalScheduledTask", "declarator": "task", "var_name": "task"}], "file": "osgp/platform/osgp-adapter-domain-publiclighting/src/test/java/org/opensmartgridplatform/adapter/domain/publiclighting/application/tasks/EventRetrievalScheduledTaskTest.java"}, "test_case": {"identifier": "applyExponentialBackOffToListOfDevicesWithCommunicationTimestampExactly1HourAnd1ConnectionFailure", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void applyExponentialBackOffToListOfDevicesWithCommunicationTimestampExactly1HourAnd1ConnectionFailure() {\n        final List<Device> devices = new ArrayList<>();\n        devices.add(this.createDevice(\"device-04\", DateTime.now(DateTimeZone.UTC).minusMinutes(61).toDate(), 1));\n\n        final List<Device> filteredList = this.task.filterByExponentialBackOff(devices);\n\n        assertThat(filteredList.size()).isEqualTo(1);\n    }", "signature": "void applyExponentialBackOffToListOfDevicesWithCommunicationTimestampExactly1HourAnd1ConnectionFailure()", "full_signature": "@Test public void applyExponentialBackOffToListOfDevicesWithCommunicationTimestampExactly1HourAnd1ConnectionFailure()", "class_method_signature": "EventRetrievalScheduledTaskTest.applyExponentialBackOffToListOfDevicesWithCommunicationTimestampExactly1HourAnd1ConnectionFailure()", "testcase": true, "constructor": false, "invocations": ["add", "createDevice", "toDate", "minusMinutes", "now", "filterByExponentialBackOff", "isEqualTo", "assertThat", "size"]}, "focal_class": {"identifier": "EventRetrievalScheduledTask", "superclass": "extends BaseTask", "interfaces": "implements Runnable", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(EventRetrievalScheduledTask.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(EventRetrievalScheduledTask.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private String eventRetrievalScheduledTaskManufacturerName;", "modifier": "@Autowired\n    private", "type": "String", "declarator": "eventRetrievalScheduledTaskManufacturerName", "var_name": "eventRetrievalScheduledTaskManufacturerName"}, {"original_string": "@Autowired\n    private int eventRetrievalScheduledTaskMaximumAllowedAge;", "modifier": "@Autowired\n    private", "type": "int", "declarator": "eventRetrievalScheduledTaskMaximumAllowedAge", "var_name": "eventRetrievalScheduledTaskMaximumAllowedAge"}, {"original_string": "@Autowired\n    private int eventRetrievalScheduledTaskBackOffMultiplier;", "modifier": "@Autowired\n    private", "type": "int", "declarator": "eventRetrievalScheduledTaskBackOffMultiplier", "var_name": "eventRetrievalScheduledTaskBackOffMultiplier"}, {"original_string": "@Autowired\n    private int eventRetrievalScheduledTaskDefaultWaitTime;", "modifier": "@Autowired\n    private", "type": "int", "declarator": "eventRetrievalScheduledTaskDefaultWaitTime", "var_name": "eventRetrievalScheduledTaskDefaultWaitTime"}, {"original_string": "@Autowired\n    private int eventRetrievalScheduledTaskMaxBackoff;", "modifier": "@Autowired\n    private", "type": "int", "declarator": "eventRetrievalScheduledTaskMaxBackoff", "var_name": "eventRetrievalScheduledTaskMaxBackoff"}, {"original_string": "@Autowired\n    private int eventRetrievalScheduledTaskHysteresis;", "modifier": "@Autowired\n    private", "type": "int", "declarator": "eventRetrievalScheduledTaskHysteresis", "var_name": "eventRetrievalScheduledTaskHysteresis"}], "methods": [{"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "EventRetrievalScheduledTask.run()", "testcase": false, "constructor": false}, {"identifier": "filterByExponentialBackOff", "parameters": "(final List<Device> devicesToFilter)", "modifiers": "public", "return": "List<Device>", "signature": "List<Device> filterByExponentialBackOff(final List<Device> devicesToFilter)", "full_signature": "public List<Device> filterByExponentialBackOff(final List<Device> devicesToFilter)", "class_method_signature": "EventRetrievalScheduledTask.filterByExponentialBackOff(final List<Device> devicesToFilter)", "testcase": false, "constructor": false}, {"identifier": "calculateThresholdForDevice", "parameters": "(final Device device)", "modifiers": "private", "return": "boolean", "signature": "boolean calculateThresholdForDevice(final Device device)", "full_signature": "private boolean calculateThresholdForDevice(final Device device)", "class_method_signature": "EventRetrievalScheduledTask.calculateThresholdForDevice(final Device device)", "testcase": false, "constructor": false}, {"identifier": "determineMinimalDeviceThreshold", "parameters": "(final Device device)", "modifiers": "private", "return": "DateTime", "signature": "DateTime determineMinimalDeviceThreshold(final Device device)", "full_signature": "private DateTime determineMinimalDeviceThreshold(final Device device)", "class_method_signature": "EventRetrievalScheduledTask.determineMinimalDeviceThreshold(final Device device)", "testcase": false, "constructor": false}, {"identifier": "calculateDeviceBackOff", "parameters": "(final int failedConnectionCount)", "modifiers": "private", "return": "int", "signature": "int calculateDeviceBackOff(final int failedConnectionCount)", "full_signature": "private int calculateDeviceBackOff(final int failedConnectionCount)", "class_method_signature": "EventRetrievalScheduledTask.calculateDeviceBackOff(final int failedConnectionCount)", "testcase": false, "constructor": false}], "file": "osgp/platform/osgp-adapter-domain-publiclighting/src/main/java/org/opensmartgridplatform/adapter/domain/publiclighting/application/tasks/EventRetrievalScheduledTask.java"}, "focal_method": {"identifier": "filterByExponentialBackOff", "parameters": "(final List<Device> devicesToFilter)", "modifiers": "public", "return": "List<Device>", "body": "public List<Device> filterByExponentialBackOff(final List<Device> devicesToFilter) {\n\n        final Predicate<Device> hasNoConnectionFailure = d -> !d.hasConnectionFailures();\n\n        final Predicate<Device> hasLastConnectionFailureBeforeThreshold = d -> this.calculateThresholdForDevice(d);\n\n        return devicesToFilter.stream().filter(hasNoConnectionFailure.or(hasLastConnectionFailureBeforeThreshold))\n                .collect(Collectors.<Device> toList());\n    }", "signature": "List<Device> filterByExponentialBackOff(final List<Device> devicesToFilter)", "full_signature": "public List<Device> filterByExponentialBackOff(final List<Device> devicesToFilter)", "class_method_signature": "EventRetrievalScheduledTask.filterByExponentialBackOff(final List<Device> devicesToFilter)", "testcase": false, "constructor": false, "invocations": ["hasConnectionFailures", "calculateThresholdForDevice", "collect", "filter", "stream", "or", "toList"]}, "repository": {"repo_id": 154302277, "url": "https://github.com/OSGP/open-smart-grid-platform", "stars": 30, "created": "10/23/2018 9:41:12 AM +00:00", "updates": "2020-01-26T20:15:09+00:00", "fork": "False", "license": "licensed"}}