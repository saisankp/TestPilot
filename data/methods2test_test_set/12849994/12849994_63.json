{"test_class": {"identifier": "RedisCommandExecutorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  Connection connection;", "modifier": "@Mock", "type": "Connection", "declarator": "connection", "var_name": "connection"}, {"original_string": "@Mock\n  OutputStream outputStream;", "modifier": "@Mock", "type": "OutputStream", "declarator": "outputStream", "var_name": "outputStream"}, {"original_string": "RedisStreamWriter streamWriter;", "modifier": "", "type": "RedisStreamWriter", "declarator": "streamWriter", "var_name": "streamWriter"}, {"original_string": "RedisCommandExecutor commandExecutor;", "modifier": "", "type": "RedisCommandExecutor", "declarator": "commandExecutor", "var_name": "commandExecutor"}], "file": "imcache-redis/src/test/java/com/cetsoft/imcache/redis/client/RedisCommandExecutorTest.java"}, "test_case": {"identifier": "execute", "parameters": "()", "modifiers": "@Test @SuppressWarnings(\"rawtypes\") public", "return": "void", "body": "@Test\n  @SuppressWarnings(\"rawtypes\")\n  public void execute() throws ConnectionException, IOException {\n    byte[] key = {'1'};\n    byte[] value = {'1'};\n    byte[][] args = {key, value};\n    String expectedRedisCommandString = \"*3\\r\\n$3\\r\\nSET\\r\\n$1\\r\\n1\\r\\n$1\\r\\n1\\r\\n\";\n    final byte[] outputStreamBytes = new byte[100];\n    doAnswer(new Answer() {\n      int position = 0;\n\n      public Object answer(InvocationOnMock invocation) {\n        Object[] args = invocation.getArguments();\n        byte[] bytes = (byte[]) args[0];\n        int offset = (Integer) args[1];\n        int length = (Integer) args[2];\n        System.arraycopy(bytes, offset, outputStreamBytes, position, length);\n        position += length;\n        return null;\n      }\n    }).when(outputStream).write((byte[]) any(), anyInt(), anyInt());\n\n    commandExecutor.execute(RedisCommands.SET, args);\n\n    verify(streamWriter, times(7)).writeNewLine();\n    verify(streamWriter).write(RedisBytes.ASTERISK_BYTE);\n    verify(streamWriter, times(3)).write(RedisBytes.DOLLAR_BYTE);\n    verify(streamWriter, times(4)).write(anyInt());\n    verify(streamWriter).flush();\n\n    String actualRedisCommandString = new String(outputStreamBytes).substring(0,\n        expectedRedisCommandString.length());\n    assertEquals(expectedRedisCommandString, actualRedisCommandString);\n  }", "signature": "void execute()", "full_signature": "@Test @SuppressWarnings(\"rawtypes\") public void execute()", "class_method_signature": "RedisCommandExecutorTest.execute()", "testcase": true, "constructor": false, "invocations": ["write", "when", "doAnswer", "getArguments", "arraycopy", "any", "anyInt", "anyInt", "execute", "writeNewLine", "verify", "times", "write", "verify", "write", "verify", "times", "write", "verify", "times", "anyInt", "flush", "verify", "substring", "length", "assertEquals"]}, "focal_class": {"identifier": "RedisCommandExecutor", "superclass": "", "interfaces": "implements CommandExecutor", "fields": [{"original_string": "final Connection connection;", "modifier": "final", "type": "Connection", "declarator": "connection", "var_name": "connection"}], "methods": [{"identifier": "RedisCommandExecutor", "parameters": "(final Connection connection)", "modifiers": "public", "return": "", "signature": " RedisCommandExecutor(final Connection connection)", "full_signature": "public  RedisCommandExecutor(final Connection connection)", "class_method_signature": "RedisCommandExecutor.RedisCommandExecutor(final Connection connection)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(final ByteCommand command, final byte[]... args)", "modifiers": "public", "return": "void", "signature": "void execute(final ByteCommand command, final byte[]... args)", "full_signature": "public void execute(final ByteCommand command, final byte[]... args)", "class_method_signature": "RedisCommandExecutor.execute(final ByteCommand command, final byte[]... args)", "testcase": false, "constructor": false}], "file": "imcache-redis/src/main/java/com/cetsoft/imcache/redis/client/RedisCommandExecutor.java"}, "focal_method": {"identifier": "execute", "parameters": "(final ByteCommand command, final byte[]... args)", "modifiers": "public", "return": "void", "body": "public void execute(final ByteCommand command, final byte[]... args)\n      throws ConnectionException, IOException {\n    connection.open();\n    final RedisStreamWriter streamWriter = connection.getStreamWriter();\n    streamWriter.write(RedisBytes.ASTERISK_BYTE);\n    streamWriter.write(args.length + 1);// 1 comes from set\n    streamWriter.writeNewLine();\n    streamWriter.write(RedisBytes.DOLLAR_BYTE);\n    streamWriter.write(command.getBytes().length);\n    streamWriter.writeNewLine();\n    streamWriter.write(command.getBytes());\n    streamWriter.writeNewLine();\n\n    for (final byte[] arg : args) {\n      streamWriter.write(RedisBytes.DOLLAR_BYTE);\n      streamWriter.write(arg.length);\n      streamWriter.writeNewLine();\n      streamWriter.write(arg);\n      streamWriter.writeNewLine();\n    }\n    streamWriter.flush();\n  }", "signature": "void execute(final ByteCommand command, final byte[]... args)", "full_signature": "public void execute(final ByteCommand command, final byte[]... args)", "class_method_signature": "RedisCommandExecutor.execute(final ByteCommand command, final byte[]... args)", "testcase": false, "constructor": false, "invocations": ["open", "getStreamWriter", "write", "write", "writeNewLine", "write", "write", "getBytes", "writeNewLine", "write", "getBytes", "writeNewLine", "write", "write", "writeNewLine", "write", "writeNewLine", "flush"]}, "repository": {"repo_id": 12849994, "url": "https://github.com/Cetsoft/imcache", "language": "Java", "is_fork": false, "fork_count": 38, "stargazer_count": 121, "size": 1599, "license": "licensed"}}