{"test_class": {"identifier": "CompactHashSetTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected Set set;", "modifier": "protected", "type": "Set", "declarator": "set", "var_name": "set"}], "file": "ontopia-engine/src/test/java/net/ontopia/utils/CompactHashSetTest.java"}, "test_case": {"identifier": "testClear", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testClear() {\n    set.add(\"hei\");\n    set.add(\"hei2\");\n    set.clear();\n\n    testEmpty();\n  }", "signature": "void testClear()", "full_signature": "@Test public void testClear()", "class_method_signature": "CompactHashSetTest.testClear()", "testcase": true, "constructor": false, "invocations": ["add", "add", "clear", "testEmpty"]}, "focal_class": {"identifier": "CompactHashSet", "superclass": "extends java.util.AbstractSet<E>", "interfaces": "", "fields": [{"original_string": "protected final static int INITIAL_SIZE = 3;", "modifier": "protected final static", "type": "int", "declarator": "INITIAL_SIZE = 3", "var_name": "INITIAL_SIZE"}, {"original_string": "protected final static double LOAD_FACTOR = 0.75;", "modifier": "protected final static", "type": "double", "declarator": "LOAD_FACTOR = 0.75", "var_name": "LOAD_FACTOR"}, {"original_string": "protected final static Object nullObject = new Object();", "modifier": "protected final static", "type": "Object", "declarator": "nullObject = new Object()", "var_name": "nullObject"}, {"original_string": "protected final static Object deletedObject = new Object();", "modifier": "protected final static", "type": "Object", "declarator": "deletedObject = new Object()", "var_name": "deletedObject"}, {"original_string": "protected int elements;", "modifier": "protected", "type": "int", "declarator": "elements", "var_name": "elements"}, {"original_string": "protected int freecells;", "modifier": "protected", "type": "int", "declarator": "freecells", "var_name": "freecells"}, {"original_string": "protected E[] objects;", "modifier": "protected", "type": "E[]", "declarator": "objects", "var_name": "objects"}, {"original_string": "protected int modCount;", "modifier": "protected", "type": "int", "declarator": "modCount", "var_name": "modCount"}], "methods": [{"identifier": "CompactHashSet", "parameters": "()", "modifiers": "public", "return": "", "signature": " CompactHashSet()", "full_signature": "public  CompactHashSet()", "class_method_signature": "CompactHashSet.CompactHashSet()", "testcase": false, "constructor": true}, {"identifier": "CompactHashSet", "parameters": "(int size)", "modifiers": "public", "return": "", "signature": " CompactHashSet(int size)", "full_signature": "public  CompactHashSet(int size)", "class_method_signature": "CompactHashSet.CompactHashSet(int size)", "testcase": false, "constructor": true}, {"identifier": "CompactHashSet", "parameters": "(Collection<E> c)", "modifiers": "public", "return": "", "signature": " CompactHashSet(Collection<E> c)", "full_signature": "public  CompactHashSet(Collection<E> c)", "class_method_signature": "CompactHashSet.CompactHashSet(Collection<E> c)", "testcase": false, "constructor": true}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<E>", "signature": "Iterator<E> iterator()", "full_signature": "@Override public Iterator<E> iterator()", "class_method_signature": "CompactHashSet.iterator()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "CompactHashSet.size()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "CompactHashSet.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(Object o)", "full_signature": "@Override public boolean contains(Object o)", "class_method_signature": "CompactHashSet.contains(Object o)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(Object o)", "full_signature": "@Override public boolean add(Object o)", "class_method_signature": "CompactHashSet.add(Object o)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean remove(Object o)", "full_signature": "@Override public boolean remove(Object o)", "class_method_signature": "CompactHashSet.remove(Object o)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "CompactHashSet.clear()", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] toArray()", "full_signature": "@Override public Object[] toArray()", "class_method_signature": "CompactHashSet.toArray()", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(T[] a)", "modifiers": "@Override public", "return": "T[]", "signature": "T[] toArray(T[] a)", "full_signature": "@Override public T[] toArray(T[] a)", "class_method_signature": "CompactHashSet.toArray(T[] a)", "testcase": false, "constructor": false}, {"identifier": "dump", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void dump()", "full_signature": "public void dump()", "class_method_signature": "CompactHashSet.dump()", "testcase": false, "constructor": false}, {"identifier": "rehash", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void rehash()", "full_signature": "protected void rehash()", "class_method_signature": "CompactHashSet.rehash()", "testcase": false, "constructor": false}, {"identifier": "rehash", "parameters": "(int newCapacity)", "modifiers": "protected", "return": "void", "signature": "void rehash(int newCapacity)", "full_signature": "protected void rehash(int newCapacity)", "class_method_signature": "CompactHashSet.rehash(int newCapacity)", "testcase": false, "constructor": false}], "file": "ontopia-engine/src/main/java/net/ontopia/utils/CompactHashSet.java"}, "focal_method": {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void clear() {\n    elements = 0;\n    for (int ix = 0; ix < objects.length; ix++)\n      objects[ix] = null;\n    freecells = objects.length;\n    modCount++;\n  }", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "CompactHashSet.clear()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 32357795, "url": "https://github.com/ontopia/ontopia", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 35, "size": 68637, "license": "licensed"}}