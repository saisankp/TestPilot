{"test_class": {"identifier": "SubstringBeforeFunctionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SubstringBeforeFunction substringBeforeFunction;", "modifier": "private", "type": "SubstringBeforeFunction", "declarator": "substringBeforeFunction", "var_name": "substringBeforeFunction"}], "file": "kie-dmn/kie-dmn-feel/src/test/java/org/kie/dmn/feel/runtime/functions/SubstringBeforeFunctionTest.java"}, "test_case": {"identifier": "invokeNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void invokeNull() {\n        FunctionTestUtil.assertResultError(substringBeforeFunction.invoke((String) null, null), InvalidParametersEvent.class);\n        FunctionTestUtil.assertResultError(substringBeforeFunction.invoke(null, \"test\"), InvalidParametersEvent.class);\n        FunctionTestUtil.assertResultError(substringBeforeFunction.invoke(\"test\", null), InvalidParametersEvent.class);\n    }", "signature": "void invokeNull()", "full_signature": "@Test public void invokeNull()", "class_method_signature": "SubstringBeforeFunctionTest.invokeNull()", "testcase": true, "constructor": false, "invocations": ["assertResultError", "invoke", "assertResultError", "invoke", "assertResultError", "invoke"]}, "focal_class": {"identifier": "SubstringBeforeFunction", "superclass": "extends BaseFEELFunction", "interfaces": "", "fields": [], "methods": [{"identifier": "SubstringBeforeFunction", "parameters": "()", "modifiers": "public", "return": "", "signature": " SubstringBeforeFunction()", "full_signature": "public  SubstringBeforeFunction()", "class_method_signature": "SubstringBeforeFunction.SubstringBeforeFunction()", "testcase": false, "constructor": true}, {"identifier": "invoke", "parameters": "(@ParameterName(\"string\") String string, @ParameterName(\"match\") String match)", "modifiers": "public", "return": "FEELFnResult<String>", "signature": "FEELFnResult<String> invoke(@ParameterName(\"string\") String string, @ParameterName(\"match\") String match)", "full_signature": "public FEELFnResult<String> invoke(@ParameterName(\"string\") String string, @ParameterName(\"match\") String match)", "class_method_signature": "SubstringBeforeFunction.invoke(@ParameterName(\"string\") String string, @ParameterName(\"match\") String match)", "testcase": false, "constructor": false}], "file": "kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/runtime/functions/SubstringBeforeFunction.java"}, "focal_method": {"identifier": "invoke", "parameters": "(@ParameterName(\"string\") String string, @ParameterName(\"match\") String match)", "modifiers": "public", "return": "FEELFnResult<String>", "body": "public FEELFnResult<String> invoke(@ParameterName(\"string\") String string, @ParameterName(\"match\") String match) {\n        if ( string == null ) {\n            return FEELFnResult.ofError( new InvalidParametersEvent( Severity.ERROR, \"string\", \"cannot be null\" ) );\n        }\n        if ( match == null ) {\n            return FEELFnResult.ofError( new InvalidParametersEvent( Severity.ERROR, \"match\", \"cannot be null\" ) );\n        }\n\n        int index = string.indexOf( match );\n        if ( index > 0 ) {\n            return FEELFnResult.ofResult( string.substring( 0, index ) );\n        } else {\n            return FEELFnResult.ofResult( \"\" );\n        }\n    }", "signature": "FEELFnResult<String> invoke(@ParameterName(\"string\") String string, @ParameterName(\"match\") String match)", "full_signature": "public FEELFnResult<String> invoke(@ParameterName(\"string\") String string, @ParameterName(\"match\") String match)", "class_method_signature": "SubstringBeforeFunction.invoke(@ParameterName(\"string\") String string, @ParameterName(\"match\") String match)", "testcase": false, "constructor": false, "invocations": ["ofError", "ofError", "indexOf", "ofResult", "substring", "ofResult"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}