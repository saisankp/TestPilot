{"test_class": {"identifier": "FeatureResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@ClassRule public static final DropwizardAppRule<ServerConfiguration> APP = ServerSuite.APP;", "modifier": "@ClassRule public static final", "type": "DropwizardAppRule<ServerConfiguration>", "declarator": "APP = ServerSuite.APP", "var_name": "APP"}, {"original_string": "private static AtomicBoolean setup = new AtomicBoolean(false);", "modifier": "private static", "type": "AtomicBoolean", "declarator": "setup = new AtomicBoolean(false)", "var_name": "setup"}, {"original_string": "private String basicPassword = \"topsecret\";", "modifier": "private", "type": "String", "declarator": "basicPassword = \"topsecret\"", "var_name": "basicPassword"}, {"original_string": "private Gson gson;", "modifier": "private", "type": "Gson", "declarator": "gson", "var_name": "gson"}, {"original_string": "private final String seedGroupOneKey = \"appOne\";", "modifier": "private final", "type": "String", "declarator": "seedGroupOneKey = \"appOne\"", "var_name": "seedGroupOneKey"}, {"original_string": "private final String seedServiceOne = \"serviceOne\";", "modifier": "private final", "type": "String", "declarator": "seedServiceOne = \"serviceOne\"", "var_name": "seedServiceOne"}, {"original_string": "private final String seedMemberOne = \"memberOne\";", "modifier": "private final", "type": "String", "declarator": "seedMemberOne = \"memberOne\"", "var_name": "seedMemberOne"}, {"original_string": "private final String seedGroupBarKey = \"appBar\";", "modifier": "private final", "type": "String", "declarator": "seedGroupBarKey = \"appBar\"", "var_name": "seedGroupBarKey"}, {"original_string": "private final String seedServiceBar = \"serviceBar\";", "modifier": "private final", "type": "String", "declarator": "seedServiceBar = \"serviceBar\"", "var_name": "seedServiceBar"}, {"original_string": "private Injector injector;", "modifier": "private", "type": "Injector", "declarator": "injector", "var_name": "injector"}, {"original_string": "private GroupService groupService;", "modifier": "private", "type": "GroupService", "declarator": "groupService", "var_name": "groupService"}], "file": "outland-feature-server/src/test/java/outland/feature/server/resources/FeatureResourceTest.java"}, "test_case": {"identifier": "testUpdate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testUpdate() throws Exception {\n\n\n    JerseyClient client = createClient();\n\n    String featureKey = \"testUpdateFeatureKey\";\n    Feature feature = buildTestFeature(seedGroupOneKey, featureKey);\n    String featureJson = Protobuf3Support.toJsonString(feature);\n\n    String url = createFeatureUrl() + \"/\" + seedGroupOneKey;\n\n    // create a feature\n\n    Response register = client.target(url)\n        .request()\n        // create using a service's access\n        .property(HTTP_AUTHENTICATION_BASIC_USERNAME, seedServiceOne + \"/service\")\n        .property(HTTP_AUTHENTICATION_BASIC_PASSWORD, basicPassword)\n        .post(Entity.entity(featureJson, MediaType.APPLICATION_JSON_TYPE));\n\n    assertTrue(register.getStatus() == 201);\n\n    String jsonRegister = register.readEntity(String.class);\n    Feature.Builder builderRegister = Feature.newBuilder();\n    JsonFormat.parser().merge(jsonRegister, builderRegister);\n\n    // check our result\n\n    String id = builderRegister.getId();\n    String created = builderRegister.getCreated();\n    String updated = builderRegister.getUpdated();\n    Status state = builderRegister.getStatus();\n\n    // same id\n    assertNotNull(id);\n    // updated\n    assertNotNull(updated);\n    // created\n    assertNotNull(created);\n    // disabled by default\n    assertEquals(Status.off, state);\n\n    // turn on our feature and send an update\n\n    Feature update = builderRegister.build().toBuilder().setStatus(Status.on).build();\n    String featureUpdateJson = Protobuf3Support.toJsonString(update);\n    Response responseUpdate = client.target(url + \"/\" + featureKey)\n        .request()\n        // this time update using a member\n        .property(HTTP_AUTHENTICATION_BASIC_USERNAME, seedMemberOne + \"/member\")\n        .property(HTTP_AUTHENTICATION_BASIC_PASSWORD, basicPassword)\n        .post(Entity.entity(featureUpdateJson, MediaType.APPLICATION_JSON_TYPE));\n\n    // check our update result\n\n    assertTrue(responseUpdate.getStatus() == 200);\n\n    String jsonUpdateResult = responseUpdate.readEntity(String.class);\n    Feature.Builder builderUpdated = Feature.newBuilder();\n    JsonFormat.parser().merge(jsonUpdateResult, builderUpdated);\n\n    // same id\n    assertEquals(id, builderUpdated.getId());\n    // updated changed from create\n    assertNotEquals(updated, builderUpdated.getUpdated());\n    // same created\n    assertEquals(created, builderUpdated.getCreated());\n    // updated to enabled\n    assertEquals(Status.on, builderUpdated.getStatus());\n\n    // now read it back from the server and double check\n\n    Response responseGet = client.target(url + \"/\" + featureKey)\n        .request()\n        // ask using a service's grant\n        .property(HTTP_AUTHENTICATION_BASIC_USERNAME, seedServiceOne + \"/service\")\n        .property(HTTP_AUTHENTICATION_BASIC_PASSWORD, basicPassword)\n        .get();\n\n    String jsonResponseGet = responseGet.readEntity(String.class);\n    Feature.Builder responseGetBuilder = Feature.newBuilder();\n    JsonFormat.parser().merge(jsonResponseGet, responseGetBuilder);\n    Feature featResponseGet = responseGetBuilder.build();\n    assertEquals(id, featResponseGet.getId());\n\n    // same id\n    assertEquals(id, featResponseGet.getId());\n    // updated changed from create\n    assertNotEquals(updated, featResponseGet.getUpdated());\n    // updated sames as last update\n    assertEquals(builderUpdated.getUpdated(), featResponseGet.getUpdated());\n    // same created\n    assertEquals(created, featResponseGet.getCreated());\n    // still enabled\n    assertEquals(Status.on, featResponseGet.getStatus());\n  }", "signature": "void testUpdate()", "full_signature": "@Test public void testUpdate()", "class_method_signature": "FeatureResourceTest.testUpdate()", "testcase": true, "constructor": false, "invocations": ["createClient", "buildTestFeature", "toJsonString", "createFeatureUrl", "post", "property", "property", "request", "target", "entity", "assertTrue", "getStatus", "readEntity", "newBuilder", "merge", "parser", "getId", "getCreated", "getUpdated", "getStatus", "assertNotNull", "assertNotNull", "assertNotNull", "assertEquals", "build", "setStatus", "toBuilder", "build", "toJsonString", "post", "property", "property", "request", "target", "entity", "assertTrue", "getStatus", "readEntity", "newBuilder", "merge", "parser", "assertEquals", "getId", "assertNotEquals", "getUpdated", "assertEquals", "getCreated", "assertEquals", "getStatus", "get", "property", "property", "request", "target", "readEntity", "newBuilder", "merge", "parser", "build", "assertEquals", "getId", "assertEquals", "getId", "assertNotEquals", "getUpdated", "assertEquals", "getUpdated", "getUpdated", "assertEquals", "getCreated", "assertEquals", "getStatus"]}, "focal_class": {"identifier": "FeatureResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final FeatureService featureService;", "modifier": "private final", "type": "FeatureService", "declarator": "featureService", "var_name": "featureService"}, {"original_string": "private final GroupService groupService;", "modifier": "private final", "type": "GroupService", "declarator": "groupService", "var_name": "groupService"}, {"original_string": "private final IdempotencyChecker idempotencyChecker;", "modifier": "private final", "type": "IdempotencyChecker", "declarator": "idempotencyChecker", "var_name": "idempotencyChecker"}, {"original_string": "private final AccessControlSupport accessControlSupport;", "modifier": "private final", "type": "AccessControlSupport", "declarator": "accessControlSupport", "var_name": "accessControlSupport"}, {"original_string": "private final URI baseURI;", "modifier": "private final", "type": "URI", "declarator": "baseURI", "var_name": "baseURI"}, {"original_string": "private final Headers headers;", "modifier": "private final", "type": "Headers", "declarator": "headers", "var_name": "headers"}, {"original_string": "private final GroupValidator groupValidator;", "modifier": "private final", "type": "GroupValidator", "declarator": "groupValidator", "var_name": "groupValidator"}], "methods": [{"identifier": "FeatureResource", "parameters": "(\n      FeatureService featureService,\n      GroupService groupService,\n      IdempotencyChecker idempotencyChecker,\n      AccessControlSupport accessControlSupport,\n      ServerConfiguration serviceConfiguration,\n      Headers headers\n  )", "modifiers": "@Inject public", "return": "", "signature": " FeatureResource(\n      FeatureService featureService,\n      GroupService groupService,\n      IdempotencyChecker idempotencyChecker,\n      AccessControlSupport accessControlSupport,\n      ServerConfiguration serviceConfiguration,\n      Headers headers\n  )", "full_signature": "@Inject public  FeatureResource(\n      FeatureService featureService,\n      GroupService groupService,\n      IdempotencyChecker idempotencyChecker,\n      AccessControlSupport accessControlSupport,\n      ServerConfiguration serviceConfiguration,\n      Headers headers\n  )", "class_method_signature": "FeatureResource.FeatureResource(\n      FeatureService featureService,\n      GroupService groupService,\n      IdempotencyChecker idempotencyChecker,\n      AccessControlSupport accessControlSupport,\n      ServerConfiguration serviceConfiguration,\n      Headers headers\n  )", "testcase": false, "constructor": true}, {"identifier": "registerFeature", "parameters": "(\n      @Auth AuthPrincipal principal,\n      Feature feature,\n      @Context HttpHeaders httpHeaders\n  )", "modifiers": "@POST @Path(\"/{group}\") @PermitAll @Timed(name = \"registerFeature\") public", "return": "Response", "signature": "Response registerFeature(\n      @Auth AuthPrincipal principal,\n      Feature feature,\n      @Context HttpHeaders httpHeaders\n  )", "full_signature": "@POST @Path(\"/{group}\") @PermitAll @Timed(name = \"registerFeature\") public Response registerFeature(\n      @Auth AuthPrincipal principal,\n      Feature feature,\n      @Context HttpHeaders httpHeaders\n  )", "class_method_signature": "FeatureResource.registerFeature(\n      @Auth AuthPrincipal principal,\n      Feature feature,\n      @Context HttpHeaders httpHeaders\n  )", "testcase": false, "constructor": false}, {"identifier": "updateFeature", "parameters": "(\n      @Auth AuthPrincipal principal,\n      @PathParam(\"group\") String group,\n      @PathParam(\"feature_key\") String featureKey,\n      Feature feature,\n      @Context HttpHeaders httpHeaders\n  )", "modifiers": "@POST @Path(\"/{group}/{feature_key}\") @PermitAll @Timed(name = \"updateFeature\") public", "return": "Response", "signature": "Response updateFeature(\n      @Auth AuthPrincipal principal,\n      @PathParam(\"group\") String group,\n      @PathParam(\"feature_key\") String featureKey,\n      Feature feature,\n      @Context HttpHeaders httpHeaders\n  )", "full_signature": "@POST @Path(\"/{group}/{feature_key}\") @PermitAll @Timed(name = \"updateFeature\") public Response updateFeature(\n      @Auth AuthPrincipal principal,\n      @PathParam(\"group\") String group,\n      @PathParam(\"feature_key\") String featureKey,\n      Feature feature,\n      @Context HttpHeaders httpHeaders\n  )", "class_method_signature": "FeatureResource.updateFeature(\n      @Auth AuthPrincipal principal,\n      @PathParam(\"group\") String group,\n      @PathParam(\"feature_key\") String featureKey,\n      Feature feature,\n      @Context HttpHeaders httpHeaders\n  )", "testcase": false, "constructor": false}, {"identifier": "getFeatureByKey", "parameters": "(\n      @Auth AuthPrincipal principal,\n      @PathParam(\"group\") String group,\n      @PathParam(\"feature_key\") String featureKey\n  )", "modifiers": "@GET @Path(\"/{group}/{feature_key}\") @PermitAll @Timed(name = \"getFeatureByKey\") public", "return": "Response", "signature": "Response getFeatureByKey(\n      @Auth AuthPrincipal principal,\n      @PathParam(\"group\") String group,\n      @PathParam(\"feature_key\") String featureKey\n  )", "full_signature": "@GET @Path(\"/{group}/{feature_key}\") @PermitAll @Timed(name = \"getFeatureByKey\") public Response getFeatureByKey(\n      @Auth AuthPrincipal principal,\n      @PathParam(\"group\") String group,\n      @PathParam(\"feature_key\") String featureKey\n  )", "class_method_signature": "FeatureResource.getFeatureByKey(\n      @Auth AuthPrincipal principal,\n      @PathParam(\"group\") String group,\n      @PathParam(\"feature_key\") String featureKey\n  )", "testcase": false, "constructor": false}, {"identifier": "getFeatures", "parameters": "(\n      @Auth AuthPrincipal principal,\n      @PathParam(\"group\") String group\n  )", "modifiers": "@GET @Path(\"/{group}\") @PermitAll @Timed(name = \"getFeatures\") public", "return": "Response", "signature": "Response getFeatures(\n      @Auth AuthPrincipal principal,\n      @PathParam(\"group\") String group\n  )", "full_signature": "@GET @Path(\"/{group}\") @PermitAll @Timed(name = \"getFeatures\") public Response getFeatures(\n      @Auth AuthPrincipal principal,\n      @PathParam(\"group\") String group\n  )", "class_method_signature": "FeatureResource.getFeatures(\n      @Auth AuthPrincipal principal,\n      @PathParam(\"group\") String group\n  )", "testcase": false, "constructor": false}, {"identifier": "getFeaturesSince", "parameters": "(\n      @Auth AuthPrincipal principal,\n      @PathParam(\"group\") String group,\n      @QueryParam(\"since\") long since\n  )", "modifiers": "@GET @Path(\"/{group}/feed\") @PermitAll @Timed(name = \"getFeaturesSince\") public", "return": "Response", "signature": "Response getFeaturesSince(\n      @Auth AuthPrincipal principal,\n      @PathParam(\"group\") String group,\n      @QueryParam(\"since\") long since\n  )", "full_signature": "@GET @Path(\"/{group}/feed\") @PermitAll @Timed(name = \"getFeaturesSince\") public Response getFeaturesSince(\n      @Auth AuthPrincipal principal,\n      @PathParam(\"group\") String group,\n      @QueryParam(\"since\") long since\n  )", "class_method_signature": "FeatureResource.getFeaturesSince(\n      @Auth AuthPrincipal principal,\n      @PathParam(\"group\") String group,\n      @QueryParam(\"since\") long since\n  )", "testcase": false, "constructor": false}, {"identifier": "addNamespaceFeature", "parameters": "(\n      @Auth AuthPrincipal principal,\n      @PathParam(\"group\") String group,\n      @PathParam(\"feature_key\") String featureKey,\n      NamespaceFeature namespaceFeature\n  )", "modifiers": "@POST @Path(\"/{group}/{feature_key}/namespaces\") @PermitAll @Timed(name = \"addNamespaceFeature\") public", "return": "Response", "signature": "Response addNamespaceFeature(\n      @Auth AuthPrincipal principal,\n      @PathParam(\"group\") String group,\n      @PathParam(\"feature_key\") String featureKey,\n      NamespaceFeature namespaceFeature\n  )", "full_signature": "@POST @Path(\"/{group}/{feature_key}/namespaces\") @PermitAll @Timed(name = \"addNamespaceFeature\") public Response addNamespaceFeature(\n      @Auth AuthPrincipal principal,\n      @PathParam(\"group\") String group,\n      @PathParam(\"feature_key\") String featureKey,\n      NamespaceFeature namespaceFeature\n  )", "class_method_signature": "FeatureResource.addNamespaceFeature(\n      @Auth AuthPrincipal principal,\n      @PathParam(\"group\") String group,\n      @PathParam(\"feature_key\") String featureKey,\n      NamespaceFeature namespaceFeature\n  )", "testcase": false, "constructor": false}, {"identifier": "updateNamespaceFeature", "parameters": "(\n      @Auth AuthPrincipal principal,\n      @PathParam(\"group\") String group,\n      @PathParam(\"feature_key\") String featureKey,\n      @PathParam(\"namespace\") String namespace,\n      NamespaceFeature namespaceFeature\n  )", "modifiers": "@POST @Path(\"/{group}/{feature_key}/namespaces/{namespace}\") @PermitAll @Timed(name = \"updateNamespaceFeature\") public", "return": "Response", "signature": "Response updateNamespaceFeature(\n      @Auth AuthPrincipal principal,\n      @PathParam(\"group\") String group,\n      @PathParam(\"feature_key\") String featureKey,\n      @PathParam(\"namespace\") String namespace,\n      NamespaceFeature namespaceFeature\n  )", "full_signature": "@POST @Path(\"/{group}/{feature_key}/namespaces/{namespace}\") @PermitAll @Timed(name = \"updateNamespaceFeature\") public Response updateNamespaceFeature(\n      @Auth AuthPrincipal principal,\n      @PathParam(\"group\") String group,\n      @PathParam(\"feature_key\") String featureKey,\n      @PathParam(\"namespace\") String namespace,\n      NamespaceFeature namespaceFeature\n  )", "class_method_signature": "FeatureResource.updateNamespaceFeature(\n      @Auth AuthPrincipal principal,\n      @PathParam(\"group\") String group,\n      @PathParam(\"feature_key\") String featureKey,\n      @PathParam(\"namespace\") String namespace,\n      NamespaceFeature namespaceFeature\n  )", "testcase": false, "constructor": false}, {"identifier": "removeNamespaceFeature", "parameters": "(\n      @Auth AuthPrincipal principal,\n      @PathParam(\"group\") String group,\n      @PathParam(\"feature_key\") String featureKey,\n      @PathParam(\"namespace\") String namespace\n  )", "modifiers": "@DELETE @Path(\"/{group}/{feature_key}/namespaces/{namespace}\") @PermitAll @Timed(name = \"removeNamespaceFeature\") public", "return": "Response", "signature": "Response removeNamespaceFeature(\n      @Auth AuthPrincipal principal,\n      @PathParam(\"group\") String group,\n      @PathParam(\"feature_key\") String featureKey,\n      @PathParam(\"namespace\") String namespace\n  )", "full_signature": "@DELETE @Path(\"/{group}/{feature_key}/namespaces/{namespace}\") @PermitAll @Timed(name = \"removeNamespaceFeature\") public Response removeNamespaceFeature(\n      @Auth AuthPrincipal principal,\n      @PathParam(\"group\") String group,\n      @PathParam(\"feature_key\") String featureKey,\n      @PathParam(\"namespace\") String namespace\n  )", "class_method_signature": "FeatureResource.removeNamespaceFeature(\n      @Auth AuthPrincipal principal,\n      @PathParam(\"group\") String group,\n      @PathParam(\"feature_key\") String featureKey,\n      @PathParam(\"namespace\") String namespace\n  )", "testcase": false, "constructor": false}, {"identifier": "postUpdate", "parameters": "(\n      AuthPrincipal authPrincipal, String group, String featureKey,\n      Function<Feature, Feature> updater)", "modifiers": "private", "return": "Response", "signature": "Response postUpdate(\n      AuthPrincipal authPrincipal, String group, String featureKey,\n      Function<Feature, Feature> updater)", "full_signature": "private Response postUpdate(\n      AuthPrincipal authPrincipal, String group, String featureKey,\n      Function<Feature, Feature> updater)", "class_method_signature": "FeatureResource.postUpdate(\n      AuthPrincipal authPrincipal, String group, String featureKey,\n      Function<Feature, Feature> updater)", "testcase": false, "constructor": false}, {"identifier": "toOffset", "parameters": "(@QueryParam(\"since\") long since)", "modifiers": "private", "return": "OffsetDateTime", "signature": "OffsetDateTime toOffset(@QueryParam(\"since\") long since)", "full_signature": "private OffsetDateTime toOffset(@QueryParam(\"since\") long since)", "class_method_signature": "FeatureResource.toOffset(@QueryParam(\"since\") long since)", "testcase": false, "constructor": false}, {"identifier": "featureNotFound", "parameters": "()", "modifiers": "private", "return": "Response.ResponseBuilder", "signature": "Response.ResponseBuilder featureNotFound()", "full_signature": "private Response.ResponseBuilder featureNotFound()", "class_method_signature": "FeatureResource.featureNotFound()", "testcase": false, "constructor": false}, {"identifier": "loadFeature", "parameters": "(Feature feature)", "modifiers": "private", "return": "Optional<Feature>", "signature": "Optional<Feature> loadFeature(Feature feature)", "full_signature": "private Optional<Feature> loadFeature(Feature feature)", "class_method_signature": "FeatureResource.loadFeature(Feature feature)", "testcase": false, "constructor": false}, {"identifier": "respondAlreadyCreated", "parameters": "(\n      Feature feature, long start, URI loc, Optional<String> maybeSeen)", "modifiers": "private", "return": "Response", "signature": "Response respondAlreadyCreated(\n      Feature feature, long start, URI loc, Optional<String> maybeSeen)", "full_signature": "private Response respondAlreadyCreated(\n      Feature feature, long start, URI loc, Optional<String> maybeSeen)", "class_method_signature": "FeatureResource.respondAlreadyCreated(\n      Feature feature, long start, URI loc, Optional<String> maybeSeen)", "testcase": false, "constructor": false}, {"identifier": "alreadyUpdated", "parameters": "(Feature feature, long start, Optional<String> maybeSeen)", "modifiers": "private", "return": "Response", "signature": "Response alreadyUpdated(Feature feature, long start, Optional<String> maybeSeen)", "full_signature": "private Response alreadyUpdated(Feature feature, long start, Optional<String> maybeSeen)", "class_method_signature": "FeatureResource.alreadyUpdated(Feature feature, long start, Optional<String> maybeSeen)", "testcase": false, "constructor": false}, {"identifier": "notFound", "parameters": "(long start)", "modifiers": "private", "return": "Response", "signature": "Response notFound(long start)", "full_signature": "private Response notFound(long start)", "class_method_signature": "FeatureResource.notFound(long start)", "testcase": false, "constructor": false}, {"identifier": "locationUrl", "parameters": "(Feature feature)", "modifiers": "private", "return": "URI", "signature": "URI locationUrl(Feature feature)", "full_signature": "private URI locationUrl(Feature feature)", "class_method_signature": "FeatureResource.locationUrl(Feature feature)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(@PathParam(\"group\") String group, Feature feature)", "modifiers": "private", "return": "Feature", "signature": "Feature update(@PathParam(\"group\") String group, Feature feature)", "full_signature": "private Feature update(@PathParam(\"group\") String group, Feature feature)", "class_method_signature": "FeatureResource.update(@PathParam(\"group\") String group, Feature feature)", "testcase": false, "constructor": false}, {"identifier": "grantedGuard", "parameters": "(@Auth AuthPrincipal principal, @PathParam(\"group\") String group)", "modifiers": "private", "return": "void", "signature": "void grantedGuard(@Auth AuthPrincipal principal, @PathParam(\"group\") String group)", "full_signature": "private void grantedGuard(@Auth AuthPrincipal principal, @PathParam(\"group\") String group)", "class_method_signature": "FeatureResource.grantedGuard(@Auth AuthPrincipal principal, @PathParam(\"group\") String group)", "testcase": false, "constructor": false}, {"identifier": "groupValidGuard", "parameters": "(String group, String featureKey, Feature feature)", "modifiers": "private", "return": "void", "signature": "void groupValidGuard(String group, String featureKey, Feature feature)", "full_signature": "private void groupValidGuard(String group, String featureKey, Feature feature)", "class_method_signature": "FeatureResource.groupValidGuard(String group, String featureKey, Feature feature)", "testcase": false, "constructor": false}], "file": "outland-feature-server/src/main/java/outland/feature/server/resources/FeatureResource.java"}, "focal_method": {"identifier": "update", "parameters": "(@PathParam(\"group\") String group, Feature feature)", "modifiers": "private", "return": "Feature", "body": "private Feature update(@PathParam(\"group\") String group, Feature feature) {\n    return featureService.updateFeature(group, feature.getKey(), feature)\n        .orElseThrow(() -> new RuntimeException(\"\"));\n  }", "signature": "Feature update(@PathParam(\"group\") String group, Feature feature)", "full_signature": "private Feature update(@PathParam(\"group\") String group, Feature feature)", "class_method_signature": "FeatureResource.update(@PathParam(\"group\") String group, Feature feature)", "testcase": false, "constructor": false, "invocations": ["orElseThrow", "updateFeature", "getKey"]}, "repository": {"repo_id": 83838306, "url": "https://github.com/dehora/outland", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 944, "license": "licensed"}}