{"test_class": {"identifier": "SnapshotTest", "superclass": "extends TestBase", "interfaces": "", "fields": [], "file": "hbase0.98/hbase-snapshot-0.98/src/test/java/com/kakao/hbase/snapshot/SnapshotTest.java"}, "test_case": {"identifier": "testAllTables", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAllTables() throws Exception {\n        List<HBaseProtos.SnapshotDescription> snapshotDescriptions;\n\n        // create tables\n        createAdditionalTable(tableName + \"2\");\n        createAdditionalTable(tableName + \"3\");\n\n        // all tables, keep unlimited\n        String[] argsParam = {\"localhost\", \".*\", \"--test\"};\n        SnapshotArgs args = new SnapshotArgs(argsParam);\n        Snapshot app = new Snapshot(admin, args);\n\n        // create snapshot 1\n        app.run();\n        snapshotDescriptions = listSnapshots(tableName + \".*\");\n        assertEquals(3, snapshotDescriptions.size());\n\n        // create snapshot 2\n        Thread.sleep(1000);\n        app.run();\n        snapshotDescriptions = listSnapshots(tableName + \".*\");\n        assertEquals(6, snapshotDescriptions.size());\n\n        // create snapshot 3\n        Thread.sleep(1000);\n        app.run();\n        snapshotDescriptions = listSnapshots(tableName + \".*\");\n        assertEquals(9, snapshotDescriptions.size());\n\n        // create snapshot 3\n        Thread.sleep(1000);\n        app.run();\n        snapshotDescriptions = listSnapshots(tableName + \".*\");\n        assertEquals(12, snapshotDescriptions.size());\n    }", "signature": "void testAllTables()", "full_signature": "@Test public void testAllTables()", "class_method_signature": "SnapshotTest.testAllTables()", "testcase": true, "constructor": false, "invocations": ["createAdditionalTable", "createAdditionalTable", "run", "listSnapshots", "assertEquals", "size", "sleep", "run", "listSnapshots", "assertEquals", "size", "sleep", "run", "listSnapshots", "assertEquals", "size", "sleep", "run", "listSnapshots", "assertEquals", "size"]}, "focal_class": {"identifier": "Snapshot", "superclass": "", "interfaces": "implements Watcher", "fields": [{"original_string": "static final SimpleDateFormat DATE_FORMAT_SNAPSHOT = new SimpleDateFormat(\"yyyyMMddHHmmss\");", "modifier": "static final", "type": "SimpleDateFormat", "declarator": "DATE_FORMAT_SNAPSHOT = new SimpleDateFormat(\"yyyyMMddHHmmss\")", "var_name": "DATE_FORMAT_SNAPSHOT"}, {"original_string": "static final int ABORT_ZNODE_AGE_THRESHOLD_MS = 24 * 60 * 60 * 1000;", "modifier": "static final", "type": "int", "declarator": "ABORT_ZNODE_AGE_THRESHOLD_MS = 24 * 60 * 60 * 1000", "var_name": "ABORT_ZNODE_AGE_THRESHOLD_MS"}, {"original_string": "static final String TIMESTAMP_PREFIX = \"_S\";", "modifier": "static final", "type": "String", "declarator": "TIMESTAMP_PREFIX = \"_S\"", "var_name": "TIMESTAMP_PREFIX"}, {"original_string": "private static final int SESSION_TIMEOUT = 120000;", "modifier": "private static final", "type": "int", "declarator": "SESSION_TIMEOUT = 120000", "var_name": "SESSION_TIMEOUT"}, {"original_string": "private static final SimpleDateFormat DATE_FORMAT_LOG = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");", "modifier": "private static final", "type": "SimpleDateFormat", "declarator": "DATE_FORMAT_LOG = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\")", "var_name": "DATE_FORMAT_LOG"}, {"original_string": "private static final String ABORT_WATCH_PREFIX = \"/hbase/online-snapshot/abort/\";", "modifier": "private static final", "type": "String", "declarator": "ABORT_WATCH_PREFIX = \"/hbase/online-snapshot/abort/\"", "var_name": "ABORT_WATCH_PREFIX"}, {"original_string": "private static final String ACQUIRED_WATCH_PREFIX = \"/hbase/online-snapshot/acquired/\";", "modifier": "private static final", "type": "String", "declarator": "ACQUIRED_WATCH_PREFIX = \"/hbase/online-snapshot/acquired/\"", "var_name": "ACQUIRED_WATCH_PREFIX"}, {"original_string": "private static final int MAX_RETRY = 10;", "modifier": "private static final", "type": "int", "declarator": "MAX_RETRY = 10", "var_name": "MAX_RETRY"}, {"original_string": "private static final long RETRY_INTERVAL = 2000;", "modifier": "private static final", "type": "long", "declarator": "RETRY_INTERVAL = 2000", "var_name": "RETRY_INTERVAL"}, {"original_string": "@VisibleForTesting\n    static boolean skipCheckTableExistence = false;", "modifier": "@VisibleForTesting\n    static", "type": "boolean", "declarator": "skipCheckTableExistence = false", "var_name": "skipCheckTableExistence"}, {"original_string": "private final SnapshotArgs args;", "modifier": "private final", "type": "SnapshotArgs", "declarator": "args", "var_name": "args"}, {"original_string": "private final HBaseAdmin admin;", "modifier": "private final", "type": "HBaseAdmin", "declarator": "admin", "var_name": "admin"}, {"original_string": "private final Map<String, Integer> tableSnapshotCountMaxMap = new HashMap<>();", "modifier": "private final", "type": "Map<String, Integer>", "declarator": "tableSnapshotCountMaxMap = new HashMap<>()", "var_name": "tableSnapshotCountMaxMap"}], "methods": [{"identifier": "Snapshot", "parameters": "(HBaseAdmin admin, SnapshotArgs args)", "modifiers": "", "return": "", "signature": " Snapshot(HBaseAdmin admin, SnapshotArgs args)", "full_signature": "  Snapshot(HBaseAdmin admin, SnapshotArgs args)", "class_method_signature": "Snapshot.Snapshot(HBaseAdmin admin, SnapshotArgs args)", "testcase": false, "constructor": true}, {"identifier": "setLoggingThreshold", "parameters": "(String loggingLevel)", "modifiers": "private static", "return": "void", "signature": "void setLoggingThreshold(String loggingLevel)", "full_signature": "private static void setLoggingThreshold(String loggingLevel)", "class_method_signature": "Snapshot.setLoggingThreshold(String loggingLevel)", "testcase": false, "constructor": false}, {"identifier": "usage", "parameters": "()", "modifiers": "private static", "return": "String", "signature": "String usage()", "full_signature": "private static String usage()", "class_method_signature": "Snapshot.usage()", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] argsParam)", "modifiers": "public static", "return": "void", "signature": "void main(String[] argsParam)", "full_signature": "public static void main(String[] argsParam)", "class_method_signature": "Snapshot.main(String[] argsParam)", "testcase": false, "constructor": false}, {"identifier": "getMaxCount", "parameters": "(String tableName)", "modifiers": "@VisibleForTesting", "return": "int", "signature": "int getMaxCount(String tableName)", "full_signature": "@VisibleForTesting int getMaxCount(String tableName)", "class_method_signature": "Snapshot.getMaxCount(String tableName)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void run()", "full_signature": "public void run()", "class_method_signature": "Snapshot.run()", "testcase": false, "constructor": false}, {"identifier": "deleteOldAbortZnodes", "parameters": "(ZooKeeper zooKeeper)", "modifiers": "private", "return": "void", "signature": "void deleteOldAbortZnodes(ZooKeeper zooKeeper)", "full_signature": "private void deleteOldAbortZnodes(ZooKeeper zooKeeper)", "class_method_signature": "Snapshot.deleteOldAbortZnodes(ZooKeeper zooKeeper)", "testcase": false, "constructor": false}, {"identifier": "retrySnapshot", "parameters": "(ZooKeeper zooKeeper, Map<String, String> failedSnapshotMap)", "modifiers": "private", "return": "void", "signature": "void retrySnapshot(ZooKeeper zooKeeper, Map<String, String> failedSnapshotMap)", "full_signature": "private void retrySnapshot(ZooKeeper zooKeeper, Map<String, String> failedSnapshotMap)", "class_method_signature": "Snapshot.retrySnapshot(ZooKeeper zooKeeper, Map<String, String> failedSnapshotMap)", "testcase": false, "constructor": false}, {"identifier": "deleteSnapshotsForNotExistingTables", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void deleteSnapshotsForNotExistingTables()", "full_signature": "private void deleteSnapshotsForNotExistingTables()", "class_method_signature": "Snapshot.deleteSnapshotsForNotExistingTables()", "testcase": false, "constructor": false}, {"identifier": "errorMessage", "parameters": "(Throwable e)", "modifiers": "private", "return": "String", "signature": "String errorMessage(Throwable e)", "full_signature": "private String errorMessage(Throwable e)", "class_method_signature": "Snapshot.errorMessage(Throwable e)", "testcase": false, "constructor": false}, {"identifier": "getPrefix", "parameters": "(String tableName)", "modifiers": "", "return": "String", "signature": "String getPrefix(String tableName)", "full_signature": " String getPrefix(String tableName)", "class_method_signature": "Snapshot.getPrefix(String tableName)", "testcase": false, "constructor": false}, {"identifier": "snapshot", "parameters": "(ZooKeeper zooKeeper, String tableName, String snapshotName)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void snapshot(ZooKeeper zooKeeper, String tableName, String snapshotName)", "full_signature": "@VisibleForTesting void snapshot(ZooKeeper zooKeeper, String tableName, String snapshotName)", "class_method_signature": "Snapshot.snapshot(ZooKeeper zooKeeper, String tableName, String snapshotName)", "testcase": false, "constructor": false}, {"identifier": "clearAbortWatchLeak", "parameters": "(ZooKeeper zooKeeper, String snapshotName)", "modifiers": "private", "return": "void", "signature": "void clearAbortWatchLeak(ZooKeeper zooKeeper, String snapshotName)", "full_signature": "private void clearAbortWatchLeak(ZooKeeper zooKeeper, String snapshotName)", "class_method_signature": "Snapshot.clearAbortWatchLeak(ZooKeeper zooKeeper, String snapshotName)", "testcase": false, "constructor": false}, {"identifier": "createEmptyEphemeralZnode", "parameters": "(ZooKeeper zooKeeper, String path)", "modifiers": "private", "return": "void", "signature": "void createEmptyEphemeralZnode(ZooKeeper zooKeeper, String path)", "full_signature": "private void createEmptyEphemeralZnode(ZooKeeper zooKeeper, String path)", "class_method_signature": "Snapshot.createEmptyEphemeralZnode(ZooKeeper zooKeeper, String path)", "testcase": false, "constructor": false}, {"identifier": "timestamp", "parameters": "(TimestampFormat format)", "modifiers": "private", "return": "String", "signature": "String timestamp(TimestampFormat format)", "full_signature": "private String timestamp(TimestampFormat format)", "class_method_signature": "Snapshot.timestamp(TimestampFormat format)", "testcase": false, "constructor": false}, {"identifier": "deleteOldSnapshots", "parameters": "(HBaseAdmin admin, String tableName)", "modifiers": "private", "return": "void", "signature": "void deleteOldSnapshots(HBaseAdmin admin, String tableName)", "full_signature": "private void deleteOldSnapshots(HBaseAdmin admin, String tableName)", "class_method_signature": "Snapshot.deleteOldSnapshots(HBaseAdmin admin, String tableName)", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(HBaseAdmin admin, String targetSnapshotName)", "modifiers": "private", "return": "boolean", "signature": "boolean exists(HBaseAdmin admin, String targetSnapshotName)", "full_signature": "private boolean exists(HBaseAdmin admin, String targetSnapshotName)", "class_method_signature": "Snapshot.exists(HBaseAdmin admin, String targetSnapshotName)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(WatchedEvent watchedEvent)", "modifiers": "@Override public", "return": "void", "signature": "void process(WatchedEvent watchedEvent)", "full_signature": "@Override public void process(WatchedEvent watchedEvent)", "class_method_signature": "Snapshot.process(WatchedEvent watchedEvent)", "testcase": false, "constructor": false}], "file": "hbase0.98/hbase-snapshot-0.98/src/main/java/com/kakao/hbase/snapshot/Snapshot.java"}, "focal_method": {"identifier": "run", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void run() throws IOException, KeeperException, InterruptedException {\n        String timestamp = timestamp(TimestampFormat.snapshot);\n\n        String connectString = admin.getConfiguration().get(\"hbase.zookeeper.quorum\");\n        ZooKeeper zooKeeper = null;\n        try {\n            Map<String, String> failedSnapshotMap = new TreeMap<>();\n\n            zooKeeper = new ZooKeeper(connectString, SESSION_TIMEOUT, this);\n            for (String tableName : args.tableSet(admin)) {\n                if (args.isExcluded(tableName)) {\n                    System.out.println(timestamp(TimestampFormat.log)\n                            + \" - Table \\\"\" + tableName + \"\\\" - EXCLUDED\");\n                    continue;\n                }\n\n                String snapshotName = getPrefix(tableName) + timestamp;\n                try {\n                    snapshot(zooKeeper, tableName, snapshotName);\n                } catch (Throwable e) {\n                    failedSnapshotMap.put(snapshotName, tableName);\n                }\n\n                // delete old snapshots after creating new one\n                deleteOldSnapshots(admin, tableName);\n            }\n            deleteSnapshotsForNotExistingTables();\n            deleteOldAbortZnodes(zooKeeper);\n\n            retrySnapshot(zooKeeper, failedSnapshotMap);\n            Util.sendAlertAfterSuccess(args, this.getClass());\n        } catch (Throwable e) {\n            String message = \"ConnectionString= \" + connectString + \", CurrentHost= \"\n                    + InetAddress.getLocalHost().getHostName() + \", Message= \" + errorMessage(e);\n            System.out.println(\"\\n\" + timestamp(TimestampFormat.log) + \" - \" + message);\n            Util.sendAlertAfterFailed(args, this.getClass(), message);\n            throw e;\n        } finally {\n            if (zooKeeper != null && zooKeeper.getState().isConnected()) {\n                zooKeeper.close();\n            }\n        }\n    }", "signature": "void run()", "full_signature": "public void run()", "class_method_signature": "Snapshot.run()", "testcase": false, "constructor": false, "invocations": ["timestamp", "get", "getConfiguration", "tableSet", "isExcluded", "println", "timestamp", "getPrefix", "snapshot", "put", "deleteOldSnapshots", "deleteSnapshotsForNotExistingTables", "deleteOldAbortZnodes", "retrySnapshot", "sendAlertAfterSuccess", "getClass", "getHostName", "getLocalHost", "errorMessage", "println", "timestamp", "sendAlertAfterFailed", "getClass", "isConnected", "getState", "close"]}, "repository": {"repo_id": 46396068, "url": "https://github.com/kakao/hbase-tools", "language": "Java", "is_fork": false, "fork_count": 21, "stargazer_count": 49, "size": 1758, "license": "licensed"}}