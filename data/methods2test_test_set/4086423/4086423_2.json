{"test_class": {"identifier": "AssessmentPackageFileImporterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AssessmentPackageFileImporter assessmentPackageFileImporter;", "modifier": "private", "type": "AssessmentPackageFileImporter", "declarator": "assessmentPackageFileImporter", "var_name": "assessmentPackageFileImporter"}, {"original_string": "private File importSandboxDirectory;", "modifier": "private", "type": "File", "declarator": "importSandboxDirectory", "var_name": "importSandboxDirectory"}], "file": "qtiworks-engine/src/test/java/uk/ac/ed/ph/qtiworks/services/AssessmentPackageFileImporterTest.java"}, "test_case": {"identifier": "importStandaloneItemXml", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void importStandaloneItemXml() throws Exception {\n        final MultipartFile multipartFile = getThisUnitTestMultipartFile(\"uk/ac/ed/ph/qtiworks/samples/ims/choice.xml\", \"text/xml\");\n\n        final AssessmentPackage result = assessmentPackageFileImporter.importAssessmentPackageData(importSandboxDirectory, multipartFile);\n        Assert.assertEquals(importSandboxDirectory.getPath(), result.getSandboxPath());\n        Assert.assertEquals(AssessmentObjectType.ASSESSMENT_ITEM, result.getAssessmentType());\n        Assert.assertEquals(AssessmentPackageImportType.STANDALONE_ITEM_XML, result.getImportType());\n    }", "signature": "void importStandaloneItemXml()", "full_signature": "@Test public void importStandaloneItemXml()", "class_method_signature": "AssessmentPackageFileImporterTest.importStandaloneItemXml()", "testcase": true, "constructor": false, "invocations": ["getThisUnitTestMultipartFile", "importAssessmentPackageData", "assertEquals", "getPath", "getSandboxPath", "assertEquals", "getAssessmentType", "assertEquals", "getImportType"]}, "focal_class": {"identifier": "AssessmentPackageFileImporter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(AssessmentPackageFileImporter.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(AssessmentPackageFileImporter.class)", "var_name": "logger"}, {"original_string": "private static final String STANDALONE_XML_IMPORT_FILE_NAME = \"qti.xml\";", "modifier": "private static final", "type": "String", "declarator": "STANDALONE_XML_IMPORT_FILE_NAME = \"qti.xml\"", "var_name": "STANDALONE_XML_IMPORT_FILE_NAME"}], "methods": [{"identifier": "importAssessmentPackageData", "parameters": "(final File importSandboxDirectory,\n            final MultipartFile multipartFile)", "modifiers": "public", "return": "AssessmentPackage", "signature": "AssessmentPackage importAssessmentPackageData(final File importSandboxDirectory,\n            final MultipartFile multipartFile)", "full_signature": "public AssessmentPackage importAssessmentPackageData(final File importSandboxDirectory,\n            final MultipartFile multipartFile)", "class_method_signature": "AssessmentPackageFileImporter.importAssessmentPackageData(final File importSandboxDirectory,\n            final MultipartFile multipartFile)", "testcase": false, "constructor": false}, {"identifier": "importStandaloneXml", "parameters": "(final File importSandboxDirectory, final MultipartFile multipartFile)", "modifiers": "private", "return": "AssessmentPackage", "signature": "AssessmentPackage importStandaloneXml(final File importSandboxDirectory, final MultipartFile multipartFile)", "full_signature": "private AssessmentPackage importStandaloneXml(final File importSandboxDirectory, final MultipartFile multipartFile)", "class_method_signature": "AssessmentPackageFileImporter.importStandaloneXml(final File importSandboxDirectory, final MultipartFile multipartFile)", "testcase": false, "constructor": false}, {"identifier": "tryUnpackZipFile", "parameters": "(final File importSandboxDirectory, final MultipartFile multipartFile)", "modifiers": "private", "return": "boolean", "signature": "boolean tryUnpackZipFile(final File importSandboxDirectory, final MultipartFile multipartFile)", "full_signature": "private boolean tryUnpackZipFile(final File importSandboxDirectory, final MultipartFile multipartFile)", "class_method_signature": "AssessmentPackageFileImporter.tryUnpackZipFile(final File importSandboxDirectory, final MultipartFile multipartFile)", "testcase": false, "constructor": false}, {"identifier": "processUnpackedZip", "parameters": "(final File importSandboxDirectory)", "modifiers": "private", "return": "AssessmentPackage", "signature": "AssessmentPackage processUnpackedZip(final File importSandboxDirectory)", "full_signature": "private AssessmentPackage processUnpackedZip(final File importSandboxDirectory)", "class_method_signature": "AssessmentPackageFileImporter.processUnpackedZip(final File importSandboxDirectory)", "testcase": false, "constructor": false}, {"identifier": "buildPackageFileMap", "parameters": "(final File importSandboxDirectory,\n            final Set<String> packageQtiFileBuilder, final Set<String> packageSafeFileBuilder,\n            final List<ContentPackageResource> qtiResources)", "modifiers": "private", "return": "void", "signature": "void buildPackageFileMap(final File importSandboxDirectory,\n            final Set<String> packageQtiFileBuilder, final Set<String> packageSafeFileBuilder,\n            final List<ContentPackageResource> qtiResources)", "full_signature": "private void buildPackageFileMap(final File importSandboxDirectory,\n            final Set<String> packageQtiFileBuilder, final Set<String> packageSafeFileBuilder,\n            final List<ContentPackageResource> qtiResources)", "class_method_signature": "AssessmentPackageFileImporter.buildPackageFileMap(final File importSandboxDirectory,\n            final Set<String> packageQtiFileBuilder, final Set<String> packageSafeFileBuilder,\n            final List<ContentPackageResource> qtiResources)", "testcase": false, "constructor": false}, {"identifier": "checkPackageFile", "parameters": "(final File importSandboxDirectory, final URI href)", "modifiers": "private", "return": "String", "signature": "String checkPackageFile(final File importSandboxDirectory, final URI href)", "full_signature": "private String checkPackageFile(final File importSandboxDirectory, final URI href)", "class_method_signature": "AssessmentPackageFileImporter.checkPackageFile(final File importSandboxDirectory, final URI href)", "testcase": false, "constructor": false}], "file": "qtiworks-engine/src/main/java/uk/ac/ed/ph/qtiworks/services/AssessmentPackageFileImporter.java"}, "focal_method": {"identifier": "importAssessmentPackageData", "parameters": "(final File importSandboxDirectory,\n            final MultipartFile multipartFile)", "modifiers": "public", "return": "AssessmentPackage", "body": "public AssessmentPackage importAssessmentPackageData(final File importSandboxDirectory,\n            final MultipartFile multipartFile)\n            throws AssessmentPackageDataImportException {\n        Assert.notNull(importSandboxDirectory, \"importSandboxDirectory\");\n        Assert.notNull(multipartFile, \"multipartFile\");\n        AssessmentPackage assessmentPackage = null;\n\n        final String contentType = ServiceUtilities.computeContentType(multipartFile);\n        if (\"application/xml\".equals(contentType) || \"text/xml\".equals(contentType) || contentType.endsWith(\"+xml\")) {\n            /* Looks like an XML content type */\n            logger.debug(\"Import data uses a known XML MIME type {} so saving to {} and treating as XML\", contentType, importSandboxDirectory);\n            assessmentPackage = importStandaloneXml(importSandboxDirectory, multipartFile);\n        }\n        else {\n            /* Try to treat as a ZIP */\n            final boolean zipSuccess = tryUnpackZipFile(importSandboxDirectory, multipartFile);\n            if (zipSuccess) {\n                logger.debug(\"Import data was successfully expanded as a ZIP file\");\n                assessmentPackage = processUnpackedZip(importSandboxDirectory);\n            }\n            else {\n                logger.warn(\"Import data with MIME type {} was neither a supported XML MIME type nor a ZIP file (containing at least one entry)\", contentType);\n                throw new AssessmentPackageDataImportException(ImportFailureReason.NOT_XML_OR_ZIP);\n            }\n        }\n\n        logger.info(\"Successfully imported data for new {}\", assessmentPackage);\n        return assessmentPackage;\n    }", "signature": "AssessmentPackage importAssessmentPackageData(final File importSandboxDirectory,\n            final MultipartFile multipartFile)", "full_signature": "public AssessmentPackage importAssessmentPackageData(final File importSandboxDirectory,\n            final MultipartFile multipartFile)", "class_method_signature": "AssessmentPackageFileImporter.importAssessmentPackageData(final File importSandboxDirectory,\n            final MultipartFile multipartFile)", "testcase": false, "constructor": false, "invocations": ["notNull", "notNull", "computeContentType", "equals", "equals", "endsWith", "debug", "importStandaloneXml", "tryUnpackZipFile", "debug", "processUnpackedZip", "warn", "info"]}, "repository": {"repo_id": 4086423, "url": "https://github.com/davemckain/qtiworks", "language": "Java", "is_fork": false, "fork_count": 48, "stargazer_count": 59, "size": 15696, "license": "licensed"}}