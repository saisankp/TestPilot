{"test_class": {"identifier": "DriveStreamsManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "DriveStreamsManager driveStreamsManager;", "modifier": "", "type": "DriveStreamsManager", "declarator": "driveStreamsManager", "var_name": "driveStreamsManager"}, {"original_string": "@Mock\n    DriveDataStreams driveDataStreams;", "modifier": "@Mock", "type": "DriveDataStreams", "declarator": "driveDataStreams", "var_name": "driveDataStreams"}, {"original_string": "@Mock\n    DriveStreamMappings driveStreamMappings;", "modifier": "@Mock", "type": "DriveStreamMappings", "declarator": "driveStreamMappings", "var_name": "driveStreamMappings"}, {"original_string": "@Mock\n    Subject<Optional<Throwable>> driveErrorStream;", "modifier": "@Mock", "type": "Subject<Optional<Throwable>>", "declarator": "driveErrorStream", "var_name": "driveErrorStream"}, {"original_string": "@Mock\n    DriveThrowableToSyncErrorTranslator syncErrorTranslator;", "modifier": "@Mock", "type": "DriveThrowableToSyncErrorTranslator", "declarator": "syncErrorTranslator", "var_name": "syncErrorTranslator"}, {"original_string": "@Mock\n    RemoteBackupMetadata remoteBackupMetadata;", "modifier": "@Mock", "type": "RemoteBackupMetadata", "declarator": "remoteBackupMetadata", "var_name": "remoteBackupMetadata"}, {"original_string": "@Mock\n    File driveFile;", "modifier": "@Mock", "type": "File", "declarator": "driveFile", "var_name": "driveFile"}, {"original_string": "@Mock\n    FileList fileList;", "modifier": "@Mock", "type": "FileList", "declarator": "fileList", "var_name": "fileList"}, {"original_string": "@Mock\n    Identifier identifier;", "modifier": "@Mock", "type": "Identifier", "declarator": "identifier", "var_name": "identifier"}, {"original_string": "@Mock\n    Throwable criticalSyncError;", "modifier": "@Mock", "type": "Throwable", "declarator": "criticalSyncError", "var_name": "criticalSyncError"}, {"original_string": "@Mock\n    SyncState currentSyncState, newSyncState;", "modifier": "@Mock", "type": "SyncState", "declarator": "currentSyncState", "var_name": "currentSyncState"}], "file": "automatic_backups/src/testNotFloss/java/co/smartreceipts/automatic_backups/drive/rx/DriveStreamsManagerTest.java"}, "test_case": {"identifier": "download", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void download() throws Exception {\n        final String fileId = \"fileId\";\n        final java.io.File file = new java.io.File(\"/\");\n        when(driveDataStreams.download(fileId, file)).thenReturn(Single.just(Optional.of(file)));\n\n        final TestObserver<Optional<java.io.File>> testObserver = driveStreamsManager.download(fileId, file).test();\n        testObserver.assertValue(Optional.of(file));\n        testObserver.assertComplete();\n        testObserver.assertNoErrors();\n    }", "signature": "void download()", "full_signature": "@Test public void download()", "class_method_signature": "DriveStreamsManagerTest.download()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "download", "just", "of", "test", "download", "assertValue", "of", "assertComplete", "assertNoErrors"]}, "focal_class": {"identifier": "DriveStreamsManager", "superclass": "", "interfaces": "implements GoogleApiClient.ConnectionCallbacks", "fields": [{"original_string": "private final DriveDataStreams driveDataStreams;", "modifier": "private final", "type": "DriveDataStreams", "declarator": "driveDataStreams", "var_name": "driveDataStreams"}, {"original_string": "private final DriveStreamMappings driveStreamMappings;", "modifier": "private final", "type": "DriveStreamMappings", "declarator": "driveStreamMappings", "var_name": "driveStreamMappings"}, {"original_string": "private final Subject<Optional<Throwable>> driveErrorStream;", "modifier": "private final", "type": "Subject<Optional<Throwable>>", "declarator": "driveErrorStream", "var_name": "driveErrorStream"}, {"original_string": "private final DriveThrowableToSyncErrorTranslator syncErrorTranslator;", "modifier": "private final", "type": "DriveThrowableToSyncErrorTranslator", "declarator": "syncErrorTranslator", "var_name": "syncErrorTranslator"}, {"original_string": "private final AtomicReference<CountDownLatch> latchReference;", "modifier": "private final", "type": "AtomicReference<CountDownLatch>", "declarator": "latchReference", "var_name": "latchReference"}], "methods": [{"identifier": "DriveStreamsManager", "parameters": "(@NonNull Context context,\n                               @NonNull DriveServiceHelper driveServiceHelper,\n                               @NonNull GoogleDriveSyncMetadata googleDriveSyncMetadata,\n                               @NonNull Subject<Optional<Throwable>> driveErrorStream)", "modifiers": "public", "return": "", "signature": " DriveStreamsManager(@NonNull Context context,\n                               @NonNull DriveServiceHelper driveServiceHelper,\n                               @NonNull GoogleDriveSyncMetadata googleDriveSyncMetadata,\n                               @NonNull Subject<Optional<Throwable>> driveErrorStream)", "full_signature": "public  DriveStreamsManager(@NonNull Context context,\n                               @NonNull DriveServiceHelper driveServiceHelper,\n                               @NonNull GoogleDriveSyncMetadata googleDriveSyncMetadata,\n                               @NonNull Subject<Optional<Throwable>> driveErrorStream)", "class_method_signature": "DriveStreamsManager.DriveStreamsManager(@NonNull Context context,\n                               @NonNull DriveServiceHelper driveServiceHelper,\n                               @NonNull GoogleDriveSyncMetadata googleDriveSyncMetadata,\n                               @NonNull Subject<Optional<Throwable>> driveErrorStream)", "testcase": false, "constructor": true}, {"identifier": "DriveStreamsManager", "parameters": "(@NonNull DriveDataStreams driveDataStreams,\n                        @NonNull DriveStreamMappings driveStreamMappings,\n                        @NonNull Subject<Optional<Throwable>> driveErrorStream,\n                        @NonNull DriveThrowableToSyncErrorTranslator syncErrorTranslator)", "modifiers": "@VisibleForTesting", "return": "", "signature": " DriveStreamsManager(@NonNull DriveDataStreams driveDataStreams,\n                        @NonNull DriveStreamMappings driveStreamMappings,\n                        @NonNull Subject<Optional<Throwable>> driveErrorStream,\n                        @NonNull DriveThrowableToSyncErrorTranslator syncErrorTranslator)", "full_signature": "@VisibleForTesting  DriveStreamsManager(@NonNull DriveDataStreams driveDataStreams,\n                        @NonNull DriveStreamMappings driveStreamMappings,\n                        @NonNull Subject<Optional<Throwable>> driveErrorStream,\n                        @NonNull DriveThrowableToSyncErrorTranslator syncErrorTranslator)", "class_method_signature": "DriveStreamsManager.DriveStreamsManager(@NonNull DriveDataStreams driveDataStreams,\n                        @NonNull DriveStreamMappings driveStreamMappings,\n                        @NonNull Subject<Optional<Throwable>> driveErrorStream,\n                        @NonNull DriveThrowableToSyncErrorTranslator syncErrorTranslator)", "testcase": false, "constructor": true}, {"identifier": "onConnected", "parameters": "(@Nullable Bundle bundle)", "modifiers": "@Override public", "return": "void", "signature": "void onConnected(@Nullable Bundle bundle)", "full_signature": "@Override public void onConnected(@Nullable Bundle bundle)", "class_method_signature": "DriveStreamsManager.onConnected(@Nullable Bundle bundle)", "testcase": false, "constructor": false}, {"identifier": "onConnectionSuspended", "parameters": "(int cause)", "modifiers": "@Override public", "return": "void", "signature": "void onConnectionSuspended(int cause)", "full_signature": "@Override public void onConnectionSuspended(int cause)", "class_method_signature": "DriveStreamsManager.onConnectionSuspended(int cause)", "testcase": false, "constructor": false}, {"identifier": "getRemoteBackups", "parameters": "()", "modifiers": "@NonNull public", "return": "Single<List<RemoteBackupMetadata>>", "signature": "Single<List<RemoteBackupMetadata>> getRemoteBackups()", "full_signature": "@NonNull public Single<List<RemoteBackupMetadata>> getRemoteBackups()", "class_method_signature": "DriveStreamsManager.getRemoteBackups()", "testcase": false, "constructor": false}, {"identifier": "getAllFiles", "parameters": "()", "modifiers": "@NonNull public synchronized", "return": "Single<FileList>", "signature": "Single<FileList> getAllFiles()", "full_signature": "@NonNull public synchronized Single<FileList> getAllFiles()", "class_method_signature": "DriveStreamsManager.getAllFiles()", "testcase": false, "constructor": false}, {"identifier": "getFilesInFolder", "parameters": "(@NonNull final String folderId)", "modifiers": "@NonNull public synchronized", "return": "Single<FileList>", "signature": "Single<FileList> getFilesInFolder(@NonNull final String folderId)", "full_signature": "@NonNull public synchronized Single<FileList> getFilesInFolder(@NonNull final String folderId)", "class_method_signature": "DriveStreamsManager.getFilesInFolder(@NonNull final String folderId)", "testcase": false, "constructor": false}, {"identifier": "getFilesInFolder", "parameters": "(@NonNull final String driveFolderId, @NonNull final String fileName)", "modifiers": "@NonNull public synchronized", "return": "Single<FileList>", "signature": "Single<FileList> getFilesInFolder(@NonNull final String driveFolderId, @NonNull final String fileName)", "full_signature": "@NonNull public synchronized Single<FileList> getFilesInFolder(@NonNull final String driveFolderId, @NonNull final String fileName)", "class_method_signature": "DriveStreamsManager.getFilesInFolder(@NonNull final String driveFolderId, @NonNull final String fileName)", "testcase": false, "constructor": false}, {"identifier": "getMetadata", "parameters": "(@NonNull final String fileId)", "modifiers": "@NonNull synchronized", "return": "Single<File>", "signature": "Single<File> getMetadata(@NonNull final String fileId)", "full_signature": "@NonNull synchronized Single<File> getMetadata(@NonNull final String fileId)", "class_method_signature": "DriveStreamsManager.getMetadata(@NonNull final String fileId)", "testcase": false, "constructor": false}, {"identifier": "uploadFileToDrive", "parameters": "(@NonNull final SyncState currentSyncState, @NonNull final java.io.File file)", "modifiers": "@NonNull public", "return": "Single<SyncState>", "signature": "Single<SyncState> uploadFileToDrive(@NonNull final SyncState currentSyncState, @NonNull final java.io.File file)", "full_signature": "@NonNull public Single<SyncState> uploadFileToDrive(@NonNull final SyncState currentSyncState, @NonNull final java.io.File file)", "class_method_signature": "DriveStreamsManager.uploadFileToDrive(@NonNull final SyncState currentSyncState, @NonNull final java.io.File file)", "testcase": false, "constructor": false}, {"identifier": "uploadFileToDrive", "parameters": "(@NonNull final java.io.File file)", "modifiers": "@NonNull public", "return": "Single<Identifier>", "signature": "Single<Identifier> uploadFileToDrive(@NonNull final java.io.File file)", "full_signature": "@NonNull public Single<Identifier> uploadFileToDrive(@NonNull final java.io.File file)", "class_method_signature": "DriveStreamsManager.uploadFileToDrive(@NonNull final java.io.File file)", "testcase": false, "constructor": false}, {"identifier": "updateDriveFile", "parameters": "(@NonNull final SyncState currentSyncState, @NonNull final java.io.File file)", "modifiers": "@NonNull public", "return": "Single<SyncState>", "signature": "Single<SyncState> updateDriveFile(@NonNull final SyncState currentSyncState, @NonNull final java.io.File file)", "full_signature": "@NonNull public Single<SyncState> updateDriveFile(@NonNull final SyncState currentSyncState, @NonNull final java.io.File file)", "class_method_signature": "DriveStreamsManager.updateDriveFile(@NonNull final SyncState currentSyncState, @NonNull final java.io.File file)", "testcase": false, "constructor": false}, {"identifier": "updateDriveFile", "parameters": "(@NonNull final Identifier currentIdentifier, @NonNull final java.io.File file)", "modifiers": "@NonNull public", "return": "Single<Identifier>", "signature": "Single<Identifier> updateDriveFile(@NonNull final Identifier currentIdentifier, @NonNull final java.io.File file)", "full_signature": "@NonNull public Single<Identifier> updateDriveFile(@NonNull final Identifier currentIdentifier, @NonNull final java.io.File file)", "class_method_signature": "DriveStreamsManager.updateDriveFile(@NonNull final Identifier currentIdentifier, @NonNull final java.io.File file)", "testcase": false, "constructor": false}, {"identifier": "deleteDriveFile", "parameters": "(@NonNull final SyncState currentSyncState, final boolean isFullDelete)", "modifiers": "@NonNull public", "return": "Single<SyncState>", "signature": "Single<SyncState> deleteDriveFile(@NonNull final SyncState currentSyncState, final boolean isFullDelete)", "full_signature": "@NonNull public Single<SyncState> deleteDriveFile(@NonNull final SyncState currentSyncState, final boolean isFullDelete)", "class_method_signature": "DriveStreamsManager.deleteDriveFile(@NonNull final SyncState currentSyncState, final boolean isFullDelete)", "testcase": false, "constructor": false}, {"identifier": "deleteDrive", "parameters": "(@NonNull SyncState currentSyncState)", "modifiers": "private", "return": "Single<Boolean>", "signature": "Single<Boolean> deleteDrive(@NonNull SyncState currentSyncState)", "full_signature": "private Single<Boolean> deleteDrive(@NonNull SyncState currentSyncState)", "class_method_signature": "DriveStreamsManager.deleteDrive(@NonNull SyncState currentSyncState)", "testcase": false, "constructor": false}, {"identifier": "updateDrive", "parameters": "(@NonNull final SyncState currentSyncState, @NonNull final java.io.File file)", "modifiers": "private", "return": "Single<File>", "signature": "Single<File> updateDrive(@NonNull final SyncState currentSyncState, @NonNull final java.io.File file)", "full_signature": "private Single<File> updateDrive(@NonNull final SyncState currentSyncState, @NonNull final java.io.File file)", "class_method_signature": "DriveStreamsManager.updateDrive(@NonNull final SyncState currentSyncState, @NonNull final java.io.File file)", "testcase": false, "constructor": false}, {"identifier": "renameBackup", "parameters": "(@NonNull final Identifier identifier, @NonNull final String newFileName)", "modifiers": "@NonNull public", "return": "Single<File>", "signature": "Single<File> renameBackup(@NonNull final Identifier identifier, @NonNull final String newFileName)", "full_signature": "@NonNull public Single<File> renameBackup(@NonNull final Identifier identifier, @NonNull final String newFileName)", "class_method_signature": "DriveStreamsManager.renameBackup(@NonNull final Identifier identifier, @NonNull final String newFileName)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(@NonNull final Identifier identifier)", "modifiers": "@NonNull public", "return": "Single<Boolean>", "signature": "Single<Boolean> delete(@NonNull final Identifier identifier)", "full_signature": "@NonNull public Single<Boolean> delete(@NonNull final Identifier identifier)", "class_method_signature": "DriveStreamsManager.delete(@NonNull final Identifier identifier)", "testcase": false, "constructor": false}, {"identifier": "clearCachedData", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearCachedData()", "full_signature": "public void clearCachedData()", "class_method_signature": "DriveStreamsManager.clearCachedData()", "testcase": false, "constructor": false}, {"identifier": "download", "parameters": "(@NonNull final String fileId, @NonNull final java.io.File downloadLocationFile)", "modifiers": "@NonNull public", "return": "Single<Optional<java.io.File>>", "signature": "Single<Optional<java.io.File>> download(@NonNull final String fileId, @NonNull final java.io.File downloadLocationFile)", "full_signature": "@NonNull public Single<Optional<java.io.File>> download(@NonNull final String fileId, @NonNull final java.io.File downloadLocationFile)", "class_method_signature": "DriveStreamsManager.download(@NonNull final String fileId, @NonNull final java.io.File downloadLocationFile)", "testcase": false, "constructor": false}, {"identifier": "newBlockUntilConnectedCompletable", "parameters": "()", "modifiers": "@NonNull private", "return": "Completable", "signature": "Completable newBlockUntilConnectedCompletable()", "full_signature": "@NonNull private Completable newBlockUntilConnectedCompletable()", "class_method_signature": "DriveStreamsManager.newBlockUntilConnectedCompletable()", "testcase": false, "constructor": false}], "file": "automatic_backups/src/notFloss/java/co/smartreceipts/automatic_backups/drive/rx/DriveStreamsManager.java"}, "focal_method": {"identifier": "download", "parameters": "(@NonNull final String fileId, @NonNull final java.io.File downloadLocationFile)", "modifiers": "@NonNull public", "return": "Single<Optional<java.io.File>>", "body": "@NonNull\n    public Single<Optional<java.io.File>> download(@NonNull final String fileId, @NonNull final java.io.File downloadLocationFile) {\n        Preconditions.checkNotNull(fileId);\n        Preconditions.checkNotNull(downloadLocationFile);\n\n        return newBlockUntilConnectedCompletable()\n                .andThen(driveDataStreams.download(fileId, downloadLocationFile))\n                .doOnError(throwable -> driveErrorStream.onNext(Optional.of(syncErrorTranslator.get(throwable))));\n    }", "signature": "Single<Optional<java.io.File>> download(@NonNull final String fileId, @NonNull final java.io.File downloadLocationFile)", "full_signature": "@NonNull public Single<Optional<java.io.File>> download(@NonNull final String fileId, @NonNull final java.io.File downloadLocationFile)", "class_method_signature": "DriveStreamsManager.download(@NonNull final String fileId, @NonNull final java.io.File downloadLocationFile)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "checkNotNull", "doOnError", "andThen", "newBlockUntilConnectedCompletable", "download", "onNext", "of", "get"]}, "repository": {"repo_id": 2684727, "url": "https://github.com/wbaumann/SmartReceiptsLibrary", "stars": 166, "created": "11/1/2011 12:32:39 AM +00:00", "updates": "2020-01-26T22:04:24+00:00", "fork": "False", "license": "licensed"}}