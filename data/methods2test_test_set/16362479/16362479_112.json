{"test_class": {"identifier": "SharedFileBackedOutputStreamTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(SharedFileBackedOutputStreamTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(SharedFileBackedOutputStreamTest.class)", "var_name": "LOG"}, {"original_string": "private static final String TEMP_DIR = \"target/FileBackedOutputStreamTest\";", "modifier": "private static final", "type": "String", "declarator": "TEMP_DIR = \"target/FileBackedOutputStreamTest\"", "var_name": "TEMP_DIR"}], "file": "opendaylight/md-sal/sal-clustering-commons/src/test/java/org/opendaylight/controller/cluster/io/SharedFileBackedOutputStreamTest.java"}, "test_case": {"identifier": "testSingleUsage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSingleUsage() throws IOException {\n        LOG.info(\"testSingleUsage starting\");\n        try (SharedFileBackedOutputStream fbos = new SharedFileBackedOutputStream(5, TEMP_DIR)) {\n            byte[] bytes = new byte[]{0, 1, 2, 3, 4, 5, 6};\n            fbos.write(bytes);\n\n            assertNotNull(\"Expected temp file created\", FileBackedOutputStreamTest.findTempFileName(TEMP_DIR));\n            fbos.cleanup();\n            assertNull(\"Found unexpected temp file\", FileBackedOutputStreamTest.findTempFileName(TEMP_DIR));\n        }\n\n        LOG.info(\"testSingleUsage ending\");\n    }", "signature": "void testSingleUsage()", "full_signature": "@Test public void testSingleUsage()", "class_method_signature": "SharedFileBackedOutputStreamTest.testSingleUsage()", "testcase": true, "constructor": false, "invocations": ["info", "write", "assertNotNull", "findTempFileName", "cleanup", "assertNull", "findTempFileName", "info"]}, "focal_class": {"identifier": "SharedFileBackedOutputStream", "superclass": "extends FileBackedOutputStream", "interfaces": "", "fields": [{"original_string": "private final AtomicInteger usageCount = new AtomicInteger(1);", "modifier": "private final", "type": "AtomicInteger", "declarator": "usageCount = new AtomicInteger(1)", "var_name": "usageCount"}, {"original_string": "@SuppressWarnings(\"rawtypes\")\n    private Consumer onCleanupCallback;", "modifier": "@SuppressWarnings(\"rawtypes\")\n    private", "type": "Consumer", "declarator": "onCleanupCallback", "var_name": "onCleanupCallback"}, {"original_string": "private Object onCleanupContext;", "modifier": "private", "type": "Object", "declarator": "onCleanupContext", "var_name": "onCleanupContext"}], "methods": [{"identifier": "SharedFileBackedOutputStream", "parameters": "(int fileThreshold, String fileDirectory)", "modifiers": "public", "return": "", "signature": " SharedFileBackedOutputStream(int fileThreshold, String fileDirectory)", "full_signature": "public  SharedFileBackedOutputStream(int fileThreshold, String fileDirectory)", "class_method_signature": "SharedFileBackedOutputStream.SharedFileBackedOutputStream(int fileThreshold, String fileDirectory)", "testcase": false, "constructor": true}, {"identifier": "incrementUsageCount", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void incrementUsageCount()", "full_signature": "public void incrementUsageCount()", "class_method_signature": "SharedFileBackedOutputStream.incrementUsageCount()", "testcase": false, "constructor": false}, {"identifier": "getUsageCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getUsageCount()", "full_signature": "public int getUsageCount()", "class_method_signature": "SharedFileBackedOutputStream.getUsageCount()", "testcase": false, "constructor": false}, {"identifier": "setOnCleanupCallback", "parameters": "(Consumer<T> callback, T context)", "modifiers": "public", "return": "void", "signature": "void setOnCleanupCallback(Consumer<T> callback, T context)", "full_signature": "public void setOnCleanupCallback(Consumer<T> callback, T context)", "class_method_signature": "SharedFileBackedOutputStream.setOnCleanupCallback(Consumer<T> callback, T context)", "testcase": false, "constructor": false}, {"identifier": "cleanup", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "signature": "void cleanup()", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void cleanup()", "class_method_signature": "SharedFileBackedOutputStream.cleanup()", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-clustering-commons/src/main/java/org/opendaylight/controller/cluster/io/SharedFileBackedOutputStream.java"}, "focal_method": {"identifier": "cleanup", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public void cleanup() {\n        Preconditions.checkState(usageCount.get() > 0);\n\n        if (usageCount.decrementAndGet() == 0) {\n            super.cleanup();\n\n            if (onCleanupCallback != null) {\n                onCleanupCallback.accept(onCleanupContext);\n            }\n        }\n    }", "signature": "void cleanup()", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void cleanup()", "class_method_signature": "SharedFileBackedOutputStream.cleanup()", "testcase": false, "constructor": false, "invocations": ["checkState", "get", "decrementAndGet", "cleanup", "accept"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}