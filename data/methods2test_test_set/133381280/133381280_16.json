{"test_class": {"identifier": "MonitorComponentConditionalTest", "superclass": "", "interfaces": "", "fields": [], "file": "gateway/core/src/test/java/com/alipay/sofa/lookout/gateway/core/common/MonitorComponentConditionalTest.java"}, "test_case": {"identifier": "testMatch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMatch() {\n        MonitorComponentConditional m = new MonitorComponentConditional();\n        ConditionContext context = Mockito.mock(ConditionContext.class);\n        MockEnvironment env = new MockEnvironment();\n        env.setProperty(\"components.active\", \"metrics\");\n        when(context.getEnvironment()).thenReturn(env);\n\n        AnnotatedTypeMetadata atm = Mockito.mock(AnnotatedTypeMetadata.class);\n        MultiValueMap<String, Object> map = new LinkedMultiValueMap();\n        map.put(\"value\", Lists.newArrayList(\"metrics\"));\n\n        when(atm.getAllAnnotationAttributes(anyString())).thenReturn(map);\n        Assert.assertTrue(m.matches(context, atm));\n    }", "signature": "void testMatch()", "full_signature": "@Test public void testMatch()", "class_method_signature": "MonitorComponentConditionalTest.testMatch()", "testcase": true, "constructor": false, "invocations": ["mock", "setProperty", "thenReturn", "when", "getEnvironment", "mock", "put", "newArrayList", "thenReturn", "when", "getAllAnnotationAttributes", "anyString", "assertTrue", "matches"]}, "focal_class": {"identifier": "MonitorComponentConditional", "superclass": "", "interfaces": "implements ConfigurationCondition", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(MonitorComponentConditional.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(MonitorComponentConditional.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "getConfigurationPhase", "parameters": "()", "modifiers": "@Override public", "return": "ConfigurationPhase", "signature": "ConfigurationPhase getConfigurationPhase()", "full_signature": "@Override public ConfigurationPhase getConfigurationPhase()", "class_method_signature": "MonitorComponentConditional.getConfigurationPhase()", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(ConditionContext context, AnnotatedTypeMetadata metadata)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata)", "full_signature": "@Override public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata)", "class_method_signature": "MonitorComponentConditional.matches(ConditionContext context, AnnotatedTypeMetadata metadata)", "testcase": false, "constructor": false}, {"identifier": "isActiveByZoneInfo", "parameters": "(Environment env, String componentName)", "modifiers": "private", "return": "boolean", "signature": "boolean isActiveByZoneInfo(Environment env, String componentName)", "full_signature": "private boolean isActiveByZoneInfo(Environment env, String componentName)", "class_method_signature": "MonitorComponentConditional.isActiveByZoneInfo(Environment env, String componentName)", "testcase": false, "constructor": false}, {"identifier": "getComponents", "parameters": "(ConditionContext context)", "modifiers": "private", "return": "List<String>", "signature": "List<String> getComponents(ConditionContext context)", "full_signature": "private List<String> getComponents(ConditionContext context)", "class_method_signature": "MonitorComponentConditional.getComponents(ConditionContext context)", "testcase": false, "constructor": false}], "file": "gateway/core/src/main/java/com/alipay/sofa/lookout/gateway/core/common/MonitorComponentConditional.java"}, "focal_method": {"identifier": "matches", "parameters": "(ConditionContext context, AnnotatedTypeMetadata metadata)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n        Environment env = context.getEnvironment();\n        MultiValueMap<String, Object> map = metadata\n            .getAllAnnotationAttributes(ConditionalOnMonitorComponent.class.getName());\n        List<Object> value = map.get(\"value\");\n        if (CollectionUtils.isEmpty(value)) {\n            return false;\n        }\n        String componentName = (String) value.get(0);\n        List<String> activeComponents = getComponents(context);\n        boolean active = activeComponents.contains(componentName);\n\n        active = active ? isActiveByZoneInfo(env, componentName) : false;\n\n        LOGGER.info(\"monitor component:{}, active:{}\", componentName, active);\n        return active;\n    }", "signature": "boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata)", "full_signature": "@Override public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata)", "class_method_signature": "MonitorComponentConditional.matches(ConditionContext context, AnnotatedTypeMetadata metadata)", "testcase": false, "constructor": false, "invocations": ["getEnvironment", "getAllAnnotationAttributes", "getName", "get", "isEmpty", "get", "getComponents", "contains", "isActiveByZoneInfo", "info"]}, "repository": {"repo_id": 133381280, "url": "https://github.com/sofastack/sofa-lookout", "language": "Java", "is_fork": false, "fork_count": 113, "stargazer_count": 318, "size": 1394, "license": "licensed"}}