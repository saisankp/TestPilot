{"test_class": {"identifier": "ZkUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int LOOP = 100;", "modifier": "private static final", "type": "int", "declarator": "LOOP = 100", "var_name": "LOOP"}, {"original_string": "private static final String TEST_PATH = \"/test1/test\";", "modifier": "private static final", "type": "String", "declarator": "TEST_PATH = \"/test1/test\"", "var_name": "TEST_PATH"}, {"original_string": "private static final String TEST_PATH2 = \"/test2/test\";", "modifier": "private static final", "type": "String", "declarator": "TEST_PATH2 = \"/test2/test\"", "var_name": "TEST_PATH2"}, {"original_string": "private static ObjectMapper mapper;", "modifier": "private static", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "private static TestingServer testingServer;", "modifier": "private static", "type": "TestingServer", "declarator": "testingServer", "var_name": "testingServer"}, {"original_string": "private static CuratorFramework curatorFramework;", "modifier": "private static", "type": "CuratorFramework", "declarator": "curatorFramework", "var_name": "curatorFramework"}, {"original_string": "private static String otherConnectionStr;", "modifier": "private static", "type": "String", "declarator": "otherConnectionStr", "var_name": "otherConnectionStr"}], "file": "core/src/test/java/com/github/phantomthief/zookeeper/util/ZkUtilsTest.java"}, "test_case": {"identifier": "testConcurrent", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testConcurrent() throws Exception {\n        ExecutorService executor = Executors.newFixedThreadPool(100);\n        for (int i = 0; i < LOOP; i++) {\n            executor.execute(() -> {\n                ZkUtils.changeZkValue(curatorFramework, TEST_PATH2, old -> old + 1, this::intDecode,\n                        this::intEncode);\n            });\n        }\n        MoreExecutors.shutdownAndAwaitTermination(executor, 1, DAYS);\n        assertEquals(intDecode(curatorFramework.getData().forPath(TEST_PATH2)), LOOP);\n    }", "signature": "void testConcurrent()", "full_signature": "@Test void testConcurrent()", "class_method_signature": "ZkUtilsTest.testConcurrent()", "testcase": true, "constructor": false, "invocations": ["newFixedThreadPool", "execute", "changeZkValue", "shutdownAndAwaitTermination", "assertEquals", "intDecode", "forPath", "getData"]}, "focal_class": {"identifier": "ZkUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = getLogger(ZkUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = getLogger(ZkUtils.class)", "var_name": "logger"}, {"original_string": "private static final long DEFAULT_WAIT = SECONDS.toMillis(1);", "modifier": "private static final", "type": "long", "declarator": "DEFAULT_WAIT = SECONDS.toMillis(1)", "var_name": "DEFAULT_WAIT"}, {"original_string": "private static final int INFINITY_LOOP = -1;", "modifier": "private static final", "type": "int", "declarator": "INFINITY_LOOP = -1", "var_name": "INFINITY_LOOP"}], "methods": [{"identifier": "ZkUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " ZkUtils()", "full_signature": "private  ZkUtils()", "class_method_signature": "ZkUtils.ZkUtils()", "testcase": false, "constructor": true}, {"identifier": "getStringFromZk", "parameters": "(CuratorFramework client, String path)", "modifiers": "public static", "return": "String", "signature": "String getStringFromZk(CuratorFramework client, String path)", "full_signature": "public static String getStringFromZk(CuratorFramework client, String path)", "class_method_signature": "ZkUtils.getStringFromZk(CuratorFramework client, String path)", "testcase": false, "constructor": false}, {"identifier": "getBytesFromZk", "parameters": "(CuratorFramework client, String path)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] getBytesFromZk(CuratorFramework client, String path)", "full_signature": "public static byte[] getBytesFromZk(CuratorFramework client, String path)", "class_method_signature": "ZkUtils.getBytesFromZk(CuratorFramework client, String path)", "testcase": false, "constructor": false}, {"identifier": "getFromZk", "parameters": "(CuratorFramework client, String path,\n            ThrowableFunction<byte[], T, X> decoder)", "modifiers": "public static", "return": "T", "signature": "T getFromZk(CuratorFramework client, String path,\n            ThrowableFunction<byte[], T, X> decoder)", "full_signature": "public static T getFromZk(CuratorFramework client, String path,\n            ThrowableFunction<byte[], T, X> decoder)", "class_method_signature": "ZkUtils.getFromZk(CuratorFramework client, String path,\n            ThrowableFunction<byte[], T, X> decoder)", "testcase": false, "constructor": false}, {"identifier": "setToZk", "parameters": "(CuratorFramework client, String path, byte[] value)", "modifiers": "public static", "return": "void", "signature": "void setToZk(CuratorFramework client, String path, byte[] value)", "full_signature": "public static void setToZk(CuratorFramework client, String path, byte[] value)", "class_method_signature": "ZkUtils.setToZk(CuratorFramework client, String path, byte[] value)", "testcase": false, "constructor": false}, {"identifier": "setToZk", "parameters": "(CuratorFramework client, String path, byte[] value,\n            CreateMode createMode)", "modifiers": "@Deprecated public static", "return": "void", "signature": "void setToZk(CuratorFramework client, String path, byte[] value,\n            CreateMode createMode)", "full_signature": "@Deprecated public static void setToZk(CuratorFramework client, String path, byte[] value,\n            CreateMode createMode)", "class_method_signature": "ZkUtils.setToZk(CuratorFramework client, String path, byte[] value,\n            CreateMode createMode)", "testcase": false, "constructor": false}, {"identifier": "createEphemeralNode", "parameters": "(CuratorFramework client, String path,\n            byte[] value)", "modifiers": "public static", "return": "EphemeralNode", "signature": "EphemeralNode createEphemeralNode(CuratorFramework client, String path,\n            byte[] value)", "full_signature": "public static EphemeralNode createEphemeralNode(CuratorFramework client, String path,\n            byte[] value)", "class_method_signature": "ZkUtils.createEphemeralNode(CuratorFramework client, String path,\n            byte[] value)", "testcase": false, "constructor": false}, {"identifier": "removeFromZk", "parameters": "(CuratorFramework client, String path)", "modifiers": "public static", "return": "void", "signature": "void removeFromZk(CuratorFramework client, String path)", "full_signature": "public static void removeFromZk(CuratorFramework client, String path)", "class_method_signature": "ZkUtils.removeFromZk(CuratorFramework client, String path)", "testcase": false, "constructor": false}, {"identifier": "removeFromZk", "parameters": "(CuratorFramework client, String path,\n            boolean recruitDeletedChildren)", "modifiers": "public static", "return": "void", "signature": "void removeFromZk(CuratorFramework client, String path,\n            boolean recruitDeletedChildren)", "full_signature": "public static void removeFromZk(CuratorFramework client, String path,\n            boolean recruitDeletedChildren)", "class_method_signature": "ZkUtils.removeFromZk(CuratorFramework client, String path,\n            boolean recruitDeletedChildren)", "testcase": false, "constructor": false}, {"identifier": "changeZkValue", "parameters": "(CuratorFramework client, String path,\n            Function<T, T> changeFunction, Function<byte[], T> decoder,\n            Function<T, byte[]> encoder)", "modifiers": "public static", "return": "void", "signature": "void changeZkValue(CuratorFramework client, String path,\n            Function<T, T> changeFunction, Function<byte[], T> decoder,\n            Function<T, byte[]> encoder)", "full_signature": "public static void changeZkValue(CuratorFramework client, String path,\n            Function<T, T> changeFunction, Function<byte[], T> decoder,\n            Function<T, byte[]> encoder)", "class_method_signature": "ZkUtils.changeZkValue(CuratorFramework client, String path,\n            Function<T, T> changeFunction, Function<byte[], T> decoder,\n            Function<T, byte[]> encoder)", "testcase": false, "constructor": false}, {"identifier": "changeZkValue", "parameters": "(CuratorFramework client, String path,\n            Function<byte[], byte[]> changeFunction, int retryTimes, long retryWait)", "modifiers": "public static", "return": "boolean", "signature": "boolean changeZkValue(CuratorFramework client, String path,\n            Function<byte[], byte[]> changeFunction, int retryTimes, long retryWait)", "full_signature": "public static boolean changeZkValue(CuratorFramework client, String path,\n            Function<byte[], byte[]> changeFunction, int retryTimes, long retryWait)", "class_method_signature": "ZkUtils.changeZkValue(CuratorFramework client, String path,\n            Function<byte[], byte[]> changeFunction, int retryTimes, long retryWait)", "testcase": false, "constructor": false}, {"identifier": "getAllChildrenWithData", "parameters": "(CuratorFramework curator, String parentPath)", "modifiers": "public static", "return": "Stream<ChildData>", "signature": "Stream<ChildData> getAllChildrenWithData(CuratorFramework curator, String parentPath)", "full_signature": "public static Stream<ChildData> getAllChildrenWithData(CuratorFramework curator, String parentPath)", "class_method_signature": "ZkUtils.getAllChildrenWithData(CuratorFramework curator, String parentPath)", "testcase": false, "constructor": false}, {"identifier": "getAllChildrenWithData0", "parameters": "(CuratorFramework curator, String parentPath)", "modifiers": "private static", "return": "Stream<ChildData>", "signature": "Stream<ChildData> getAllChildrenWithData0(CuratorFramework curator, String parentPath)", "full_signature": "private static Stream<ChildData> getAllChildrenWithData0(CuratorFramework curator, String parentPath)", "class_method_signature": "ZkUtils.getAllChildrenWithData0(CuratorFramework curator, String parentPath)", "testcase": false, "constructor": false}, {"identifier": "toChildData", "parameters": "(CuratorFramework curator, String path)", "modifiers": "@Nullable private static", "return": "ChildData", "signature": "ChildData toChildData(CuratorFramework curator, String path)", "full_signature": "@Nullable private static ChildData toChildData(CuratorFramework curator, String path)", "class_method_signature": "ZkUtils.toChildData(CuratorFramework curator, String path)", "testcase": false, "constructor": false}, {"identifier": "getAllChildren", "parameters": "(CuratorFramework curator, String parentPath)", "modifiers": "public static", "return": "Stream<String>", "signature": "Stream<String> getAllChildren(CuratorFramework curator, String parentPath)", "full_signature": "public static Stream<String> getAllChildren(CuratorFramework curator, String parentPath)", "class_method_signature": "ZkUtils.getAllChildren(CuratorFramework curator, String parentPath)", "testcase": false, "constructor": false}, {"identifier": "getAllChildren0", "parameters": "(CuratorFramework curator, String parentPath)", "modifiers": "private static", "return": "Stream<String>", "signature": "Stream<String> getAllChildren0(CuratorFramework curator, String parentPath)", "full_signature": "private static Stream<String> getAllChildren0(CuratorFramework curator, String parentPath)", "class_method_signature": "ZkUtils.getAllChildren0(CuratorFramework curator, String parentPath)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/github/phantomthief/zookeeper/util/ZkUtils.java"}, "focal_method": {"identifier": "changeZkValue", "parameters": "(CuratorFramework client, String path,\n            Function<T, T> changeFunction, Function<byte[], T> decoder,\n            Function<T, byte[]> encoder)", "modifiers": "public static", "return": "void", "body": "public static <T> void changeZkValue(CuratorFramework client, String path,\n            Function<T, T> changeFunction, Function<byte[], T> decoder,\n            Function<T, byte[]> encoder) {\n        Function<byte[], byte[]> realFunction = old -> {\n            T decodedOld = decoder.apply(old);\n            return encoder.apply(changeFunction.apply(decodedOld));\n        };\n        changeZkValue(client, path, realFunction, INFINITY_LOOP, DEFAULT_WAIT);\n    }", "signature": "void changeZkValue(CuratorFramework client, String path,\n            Function<T, T> changeFunction, Function<byte[], T> decoder,\n            Function<T, byte[]> encoder)", "full_signature": "public static void changeZkValue(CuratorFramework client, String path,\n            Function<T, T> changeFunction, Function<byte[], T> decoder,\n            Function<T, byte[]> encoder)", "class_method_signature": "ZkUtils.changeZkValue(CuratorFramework client, String path,\n            Function<T, T> changeFunction, Function<byte[], T> decoder,\n            Function<T, byte[]> encoder)", "testcase": false, "constructor": false, "invocations": ["apply", "apply", "apply", "changeZkValue"]}, "repository": {"repo_id": 27187107, "url": "https://github.com/PhantomThief/zkconfig-resources", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 11, "size": 312, "license": "licensed"}}