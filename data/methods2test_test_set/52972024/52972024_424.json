{"test_class": {"identifier": "QueryStatementTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private QueryStatement testQueryStatement;", "modifier": "private", "type": "QueryStatement", "declarator": "testQueryStatement", "var_name": "testQueryStatement"}, {"original_string": "private StringWriter bodyWriter;", "modifier": "private", "type": "StringWriter", "declarator": "bodyWriter", "var_name": "bodyWriter"}, {"original_string": "private LinkedList<SQLQueryParameterSetter> parameterSetters;", "modifier": "private", "type": "LinkedList<SQLQueryParameterSetter>", "declarator": "parameterSetters", "var_name": "parameterSetters"}], "file": "CoreFeatures/Database-postgresql/PostgresConnection/src/test/java/info/smart_tools/smartactors/database_postgresql/postgres_connection/QueryStatementTest.java"}, "test_case": {"identifier": "MustCorrectCompileQuery", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void MustCorrectCompileQuery() throws SQLException {\n        Connection connection = mock(Connection.class);\n        PreparedStatement preparedStatement = mock(PreparedStatement.class);\n\n        String bodyWriterStringPresent = \"asdadsad\";\n        when(bodyWriter.toString()).thenReturn(bodyWriterStringPresent);\n\n        when(connection.prepareStatement(bodyWriterStringPresent)).thenReturn(preparedStatement);\n\n        int index = 1;\n\n        for (SQLQueryParameterSetter setter : parameterSetters) {\n            when(setter.setParameters(preparedStatement, index)).thenReturn(index);\n        }\n\n        assertTrue(testQueryStatement.compile(connection) == preparedStatement);\n\n        verify(connection).prepareStatement(bodyWriterStringPresent);\n\n        for (SQLQueryParameterSetter setter : parameterSetters) {\n            verify(setter).setParameters(preparedStatement, index);\n        }\n    }", "signature": "void MustCorrectCompileQuery()", "full_signature": "@Test public void MustCorrectCompileQuery()", "class_method_signature": "QueryStatementTest.MustCorrectCompileQuery()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "toString", "thenReturn", "when", "prepareStatement", "thenReturn", "when", "setParameters", "assertTrue", "compile", "prepareStatement", "verify", "setParameters", "verify"]}, "focal_class": {"identifier": "QueryStatement", "superclass": "", "interfaces": "implements IPreparedQuery", "fields": [{"original_string": "private StringWriter bodyWriter;", "modifier": "private", "type": "StringWriter", "declarator": "bodyWriter", "var_name": "bodyWriter"}, {"original_string": "private List<SQLQueryParameterSetter> parameterSetters;", "modifier": "private", "type": "List<SQLQueryParameterSetter>", "declarator": "parameterSetters", "var_name": "parameterSetters"}], "methods": [{"identifier": "QueryStatement", "parameters": "()", "modifiers": "public", "return": "", "signature": " QueryStatement()", "full_signature": "public  QueryStatement()", "class_method_signature": "QueryStatement.QueryStatement()", "testcase": false, "constructor": true}, {"identifier": "getBodyWriter", "parameters": "()", "modifiers": "public", "return": "Writer", "signature": "Writer getBodyWriter()", "full_signature": "public Writer getBodyWriter()", "class_method_signature": "QueryStatement.getBodyWriter()", "testcase": false, "constructor": false}, {"identifier": "pushParameterSetter", "parameters": "(final SQLQueryParameterSetter setter)", "modifiers": "public", "return": "void", "signature": "void pushParameterSetter(final SQLQueryParameterSetter setter)", "full_signature": "public void pushParameterSetter(final SQLQueryParameterSetter setter)", "class_method_signature": "QueryStatement.pushParameterSetter(final SQLQueryParameterSetter setter)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(final Connection connection)", "modifiers": "public", "return": "PreparedStatement", "signature": "PreparedStatement compile(final Connection connection)", "full_signature": "public PreparedStatement compile(final Connection connection)", "class_method_signature": "QueryStatement.compile(final Connection connection)", "testcase": false, "constructor": false}], "file": "CoreFeatures/Database-postgresql/PostgresConnection/src/main/java/info/smart_tools/smartactors/database_postgresql/postgres_connection/QueryStatement.java"}, "focal_method": {"identifier": "compile", "parameters": "(final Connection connection)", "modifiers": "public", "return": "PreparedStatement", "body": "public PreparedStatement compile(final Connection connection) throws SQLException {\n        PreparedStatement stmt = connection.prepareStatement(this.bodyWriter.toString());\n\n        int index = 1;\n\n        for (SQLQueryParameterSetter setter : this.parameterSetters) {\n            index = setter.setParameters(stmt, index);\n        }\n\n        return stmt;\n    }", "signature": "PreparedStatement compile(final Connection connection)", "full_signature": "public PreparedStatement compile(final Connection connection)", "class_method_signature": "QueryStatement.compile(final Connection connection)", "testcase": false, "constructor": false, "invocations": ["prepareStatement", "toString", "setParameters"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}