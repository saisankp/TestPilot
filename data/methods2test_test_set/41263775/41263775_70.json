{"test_class": {"identifier": "BigIntegerQuantizerTest", "superclass": "", "interfaces": "", "fields": [], "file": "code/src/test/java/com/googlecode/cqengine/quantizer/BigIntegerQuantizerTest.java"}, "test_case": {"identifier": "testWithCompressionFactor_5", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWithCompressionFactor_5() throws Exception {\n        Quantizer<BigInteger> quantizer = BigIntegerQuantizer.withCompressionFactor(5);\n        // Note: comparing using toString, as double comparison with epsilon would not distinguish 0.0 from -0.0...\n        Assert.assertEquals(\"0\", quantizer.getQuantizedValue(BigInteger.valueOf(0)).toString());\n        Assert.assertEquals(\"0\", quantizer.getQuantizedValue(BigInteger.valueOf(4)).toString());\n        Assert.assertEquals(\"5\", quantizer.getQuantizedValue(BigInteger.valueOf(5)).toString());\n        Assert.assertEquals(\"5\", quantizer.getQuantizedValue(BigInteger.valueOf(9)).toString());\n        Assert.assertEquals(\"10\", quantizer.getQuantizedValue(BigInteger.valueOf(11)).toString());\n        Assert.assertEquals(\"0\", quantizer.getQuantizedValue(BigInteger.valueOf(-0)).toString());\n        Assert.assertEquals(\"0\", quantizer.getQuantizedValue(BigInteger.valueOf(-4)).toString());\n        Assert.assertEquals(\"-5\", quantizer.getQuantizedValue(BigInteger.valueOf(-5)).toString());\n        Assert.assertEquals(\"-5\", quantizer.getQuantizedValue(BigInteger.valueOf(-9)).toString());\n        Assert.assertEquals(\"-10\", quantizer.getQuantizedValue(BigInteger.valueOf(-11)).toString());\n    }", "signature": "void testWithCompressionFactor_5()", "full_signature": "@Test public void testWithCompressionFactor_5()", "class_method_signature": "BigIntegerQuantizerTest.testWithCompressionFactor_5()", "testcase": true, "constructor": false, "invocations": ["withCompressionFactor", "assertEquals", "toString", "getQuantizedValue", "valueOf", "assertEquals", "toString", "getQuantizedValue", "valueOf", "assertEquals", "toString", "getQuantizedValue", "valueOf", "assertEquals", "toString", "getQuantizedValue", "valueOf", "assertEquals", "toString", "getQuantizedValue", "valueOf", "assertEquals", "toString", "getQuantizedValue", "valueOf", "assertEquals", "toString", "getQuantizedValue", "valueOf", "assertEquals", "toString", "getQuantizedValue", "valueOf", "assertEquals", "toString", "getQuantizedValue", "valueOf", "assertEquals", "toString", "getQuantizedValue", "valueOf"]}, "focal_class": {"identifier": "BigIntegerQuantizer", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "BigIntegerQuantizer", "parameters": "()", "modifiers": "", "return": "", "signature": " BigIntegerQuantizer()", "full_signature": "  BigIntegerQuantizer()", "class_method_signature": "BigIntegerQuantizer.BigIntegerQuantizer()", "testcase": false, "constructor": true}, {"identifier": "withCompressionFactor", "parameters": "(int compressionFactor)", "modifiers": "public static", "return": "Quantizer<BigInteger>", "signature": "Quantizer<BigInteger> withCompressionFactor(int compressionFactor)", "full_signature": "public static Quantizer<BigInteger> withCompressionFactor(int compressionFactor)", "class_method_signature": "BigIntegerQuantizer.withCompressionFactor(int compressionFactor)", "testcase": false, "constructor": false}], "file": "code/src/main/java/com/googlecode/cqengine/quantizer/BigIntegerQuantizer.java"}, "focal_method": {"identifier": "withCompressionFactor", "parameters": "(int compressionFactor)", "modifiers": "public static", "return": "Quantizer<BigInteger>", "body": "public static Quantizer<BigInteger> withCompressionFactor(int compressionFactor) {\n        return new CompressingQuantizer(compressionFactor);\n    }", "signature": "Quantizer<BigInteger> withCompressionFactor(int compressionFactor)", "full_signature": "public static Quantizer<BigInteger> withCompressionFactor(int compressionFactor)", "class_method_signature": "BigIntegerQuantizer.withCompressionFactor(int compressionFactor)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 41263775, "url": "https://github.com/npgall/cqengine", "language": "Java", "is_fork": false, "fork_count": 180, "stargazer_count": 1194, "size": 11701, "license": "licensed"}}