{"test_class": {"identifier": "ReactorExtTest", "superclass": "", "interfaces": "", "fields": [], "file": "titus-common/src/test/java/com/netflix/titus/common/util/rx/ReactorExtTest.java"}, "test_case": {"identifier": "testEmitValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEmitValue() {\n        Optional<Throwable> error = ReactorExt.emitError(Mono.just(\"Hello\")).block();\n        assertThat(error).isEmpty();\n    }", "signature": "void testEmitValue()", "full_signature": "@Test public void testEmitValue()", "class_method_signature": "ReactorExtTest.testEmitValue()", "testcase": true, "constructor": false, "invocations": ["block", "emitError", "just", "isEmpty", "assertThat"]}, "focal_class": {"identifier": "ReactorExt", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ReactorExt", "parameters": "()", "modifiers": "private", "return": "", "signature": " ReactorExt()", "full_signature": "private  ReactorExt()", "class_method_signature": "ReactorExt.ReactorExt()", "testcase": false, "constructor": true}, {"identifier": "either", "parameters": "()", "modifiers": "public static", "return": "Function<Mono<T>, Mono<Either<T, Throwable>>>", "signature": "Function<Mono<T>, Mono<Either<T, Throwable>>> either()", "full_signature": "public static Function<Mono<T>, Mono<Either<T, Throwable>>> either()", "class_method_signature": "ReactorExt.either()", "testcase": false, "constructor": false}, {"identifier": "emitError", "parameters": "(Mono<?> source)", "modifiers": "public static", "return": "Mono<Optional<Throwable>>", "signature": "Mono<Optional<Throwable>> emitError(Mono<?> source)", "full_signature": "public static Mono<Optional<Throwable>> emitError(Mono<?> source)", "class_method_signature": "ReactorExt.emitError(Mono<?> source)", "testcase": false, "constructor": false}, {"identifier": "fromListener", "parameters": "(Class<L> listener, Consumer<L> register, Consumer<L> unregister)", "modifiers": "public static", "return": "Flux<T>", "signature": "Flux<T> fromListener(Class<L> listener, Consumer<L> register, Consumer<L> unregister)", "full_signature": "public static Flux<T> fromListener(Class<L> listener, Consumer<L> register, Consumer<L> unregister)", "class_method_signature": "ReactorExt.fromListener(Class<L> listener, Consumer<L> register, Consumer<L> unregister)", "testcase": false, "constructor": false}, {"identifier": "badSubscriberHandler", "parameters": "(Logger logger)", "modifiers": "public static", "return": "Function<Flux<T>, Publisher<T>>", "signature": "Function<Flux<T>, Publisher<T>> badSubscriberHandler(Logger logger)", "full_signature": "public static Function<Flux<T>, Publisher<T>> badSubscriberHandler(Logger logger)", "class_method_signature": "ReactorExt.badSubscriberHandler(Logger logger)", "testcase": false, "constructor": false}, {"identifier": "eventEmitter", "parameters": "(\n            Function<T, K> keyFun,\n            BiPredicate<T, T> valueComparator,\n            Function<T, E> valueAddedEventMapper,\n            Function<T, E> valueRemovedEventMapper,\n            E snapshotEndEvent)", "modifiers": "public static", "return": "Function<Flux<List<T>>, Publisher<E>>", "signature": "Function<Flux<List<T>>, Publisher<E>> eventEmitter(\n            Function<T, K> keyFun,\n            BiPredicate<T, T> valueComparator,\n            Function<T, E> valueAddedEventMapper,\n            Function<T, E> valueRemovedEventMapper,\n            E snapshotEndEvent)", "full_signature": "public static Function<Flux<List<T>>, Publisher<E>> eventEmitter(\n            Function<T, K> keyFun,\n            BiPredicate<T, T> valueComparator,\n            Function<T, E> valueAddedEventMapper,\n            Function<T, E> valueRemovedEventMapper,\n            E snapshotEndEvent)", "class_method_signature": "ReactorExt.eventEmitter(\n            Function<T, K> keyFun,\n            BiPredicate<T, T> valueComparator,\n            Function<T, E> valueAddedEventMapper,\n            Function<T, E> valueRemovedEventMapper,\n            E snapshotEndEvent)", "testcase": false, "constructor": false}, {"identifier": "head", "parameters": "(Supplier<Collection<T>> headSupplier)", "modifiers": "public static", "return": "Function<Flux<T>, Publisher<T>>", "signature": "Function<Flux<T>, Publisher<T>> head(Supplier<Collection<T>> headSupplier)", "full_signature": "public static Function<Flux<T>, Publisher<T>> head(Supplier<Collection<T>> headSupplier)", "class_method_signature": "ReactorExt.head(Supplier<Collection<T>> headSupplier)", "testcase": false, "constructor": false}, {"identifier": "hedged", "parameters": "(List<Duration> thresholds,\n                                                        Predicate<Throwable> retryableErrorPredicate,\n                                                        Map<String, String> context,\n                                                        Registry registry,\n                                                        Scheduler scheduler)", "modifiers": "public static", "return": "Function<Mono<T>, Mono<T>>", "signature": "Function<Mono<T>, Mono<T>> hedged(List<Duration> thresholds,\n                                                        Predicate<Throwable> retryableErrorPredicate,\n                                                        Map<String, String> context,\n                                                        Registry registry,\n                                                        Scheduler scheduler)", "full_signature": "public static Function<Mono<T>, Mono<T>> hedged(List<Duration> thresholds,\n                                                        Predicate<Throwable> retryableErrorPredicate,\n                                                        Map<String, String> context,\n                                                        Registry registry,\n                                                        Scheduler scheduler)", "class_method_signature": "ReactorExt.hedged(List<Duration> thresholds,\n                                                        Predicate<Throwable> retryableErrorPredicate,\n                                                        Map<String, String> context,\n                                                        Registry registry,\n                                                        Scheduler scheduler)", "testcase": false, "constructor": false}, {"identifier": "mapWithState", "parameters": "(S zero, BiFunction<T, S, Pair<R, S>> transformer)", "modifiers": "public static", "return": "Function<Flux<T>, Publisher<R>>", "signature": "Function<Flux<T>, Publisher<R>> mapWithState(S zero, BiFunction<T, S, Pair<R, S>> transformer)", "full_signature": "public static Function<Flux<T>, Publisher<R>> mapWithState(S zero, BiFunction<T, S, Pair<R, S>> transformer)", "class_method_signature": "ReactorExt.mapWithState(S zero, BiFunction<T, S, Pair<R, S>> transformer)", "testcase": false, "constructor": false}, {"identifier": "mapWithState", "parameters": "(Supplier<S> zeroSupplier, BiFunction<T, S, Pair<R, S>> transformer)", "modifiers": "public static", "return": "Function<Flux<T>, Publisher<R>>", "signature": "Function<Flux<T>, Publisher<R>> mapWithState(Supplier<S> zeroSupplier, BiFunction<T, S, Pair<R, S>> transformer)", "full_signature": "public static Function<Flux<T>, Publisher<R>> mapWithState(Supplier<S> zeroSupplier, BiFunction<T, S, Pair<R, S>> transformer)", "class_method_signature": "ReactorExt.mapWithState(Supplier<S> zeroSupplier, BiFunction<T, S, Pair<R, S>> transformer)", "testcase": false, "constructor": false}, {"identifier": "mapWithState", "parameters": "(S zero,\n                                                                         BiFunction<T, S, Pair<R, S>> transformer,\n                                                                         Flux<Function<S, Pair<R, S>>> cleanupActions)", "modifiers": "public static", "return": "Function<Flux<T>, Publisher<R>>", "signature": "Function<Flux<T>, Publisher<R>> mapWithState(S zero,\n                                                                         BiFunction<T, S, Pair<R, S>> transformer,\n                                                                         Flux<Function<S, Pair<R, S>>> cleanupActions)", "full_signature": "public static Function<Flux<T>, Publisher<R>> mapWithState(S zero,\n                                                                         BiFunction<T, S, Pair<R, S>> transformer,\n                                                                         Flux<Function<S, Pair<R, S>>> cleanupActions)", "class_method_signature": "ReactorExt.mapWithState(S zero,\n                                                                         BiFunction<T, S, Pair<R, S>> transformer,\n                                                                         Flux<Function<S, Pair<R, S>>> cleanupActions)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(Map<K, Mono<Void>> monos, int concurrencyLimit, Scheduler scheduler)", "modifiers": "public static", "return": "Mono<Map<K, Optional<Throwable>>>", "signature": "Mono<Map<K, Optional<Throwable>>> merge(Map<K, Mono<Void>> monos, int concurrencyLimit, Scheduler scheduler)", "full_signature": "public static Mono<Map<K, Optional<Throwable>>> merge(Map<K, Mono<Void>> monos, int concurrencyLimit, Scheduler scheduler)", "class_method_signature": "ReactorExt.merge(Map<K, Mono<Void>> monos, int concurrencyLimit, Scheduler scheduler)", "testcase": false, "constructor": false}, {"identifier": "reEmitter", "parameters": "(Function<T, T> transformer, Duration interval, Scheduler scheduler)", "modifiers": "public static", "return": "Function<Flux<T>, Publisher<T>>", "signature": "Function<Flux<T>, Publisher<T>> reEmitter(Function<T, T> transformer, Duration interval, Scheduler scheduler)", "full_signature": "public static Function<Flux<T>, Publisher<T>> reEmitter(Function<T, T> transformer, Duration interval, Scheduler scheduler)", "class_method_signature": "ReactorExt.reEmitter(Function<T, T> transformer, Duration interval, Scheduler scheduler)", "testcase": false, "constructor": false}, {"identifier": "safeDispose", "parameters": "(Disposable... disposables)", "modifiers": "public static", "return": "void", "signature": "void safeDispose(Disposable... disposables)", "full_signature": "public static void safeDispose(Disposable... disposables)", "class_method_signature": "ReactorExt.safeDispose(Disposable... disposables)", "testcase": false, "constructor": false}, {"identifier": "onWorker", "parameters": "(Supplier<T> action, Scheduler.Worker worker)", "modifiers": "public static", "return": "Mono<T>", "signature": "Mono<T> onWorker(Supplier<T> action, Scheduler.Worker worker)", "full_signature": "public static Mono<T> onWorker(Supplier<T> action, Scheduler.Worker worker)", "class_method_signature": "ReactorExt.onWorker(Supplier<T> action, Scheduler.Worker worker)", "testcase": false, "constructor": false}, {"identifier": "onWorker", "parameters": "(Supplier<T> action, Scheduler.Worker worker, Duration delay)", "modifiers": "public static", "return": "Mono<T>", "signature": "Mono<T> onWorker(Supplier<T> action, Scheduler.Worker worker, Duration delay)", "full_signature": "public static Mono<T> onWorker(Supplier<T> action, Scheduler.Worker worker, Duration delay)", "class_method_signature": "ReactorExt.onWorker(Supplier<T> action, Scheduler.Worker worker, Duration delay)", "testcase": false, "constructor": false}, {"identifier": "onWorker", "parameters": "(Runnable action, Scheduler.Worker worker)", "modifiers": "public static", "return": "Mono<Void>", "signature": "Mono<Void> onWorker(Runnable action, Scheduler.Worker worker)", "full_signature": "public static Mono<Void> onWorker(Runnable action, Scheduler.Worker worker)", "class_method_signature": "ReactorExt.onWorker(Runnable action, Scheduler.Worker worker)", "testcase": false, "constructor": false}, {"identifier": "onWorker", "parameters": "(Runnable action, Scheduler.Worker worker, Duration delay)", "modifiers": "public static", "return": "Mono<Void>", "signature": "Mono<Void> onWorker(Runnable action, Scheduler.Worker worker, Duration delay)", "full_signature": "public static Mono<Void> onWorker(Runnable action, Scheduler.Worker worker, Duration delay)", "class_method_signature": "ReactorExt.onWorker(Runnable action, Scheduler.Worker worker, Duration delay)", "testcase": false, "constructor": false}, {"identifier": "protectFromMissingExceptionHandlers", "parameters": "(Flux<T> unprotectedStream, Logger logger)", "modifiers": "@Deprecated public static", "return": "Flux<T>", "signature": "Flux<T> protectFromMissingExceptionHandlers(Flux<T> unprotectedStream, Logger logger)", "full_signature": "@Deprecated public static Flux<T> protectFromMissingExceptionHandlers(Flux<T> unprotectedStream, Logger logger)", "class_method_signature": "ReactorExt.protectFromMissingExceptionHandlers(Flux<T> unprotectedStream, Logger logger)", "testcase": false, "constructor": false}, {"identifier": "toFlux", "parameters": "(Observable<T> observable)", "modifiers": "public static", "return": "Flux<T>", "signature": "Flux<T> toFlux(Observable<T> observable)", "full_signature": "public static Flux<T> toFlux(Observable<T> observable)", "class_method_signature": "ReactorExt.toFlux(Observable<T> observable)", "testcase": false, "constructor": false}, {"identifier": "toMono", "parameters": "(Single<T> single)", "modifiers": "public static", "return": "Mono<T>", "signature": "Mono<T> toMono(Single<T> single)", "full_signature": "public static Mono<T> toMono(Single<T> single)", "class_method_signature": "ReactorExt.toMono(Single<T> single)", "testcase": false, "constructor": false}, {"identifier": "toMono", "parameters": "(Observable<Void> observable)", "modifiers": "public static", "return": "Mono<Void>", "signature": "Mono<Void> toMono(Observable<Void> observable)", "full_signature": "public static Mono<Void> toMono(Observable<Void> observable)", "class_method_signature": "ReactorExt.toMono(Observable<Void> observable)", "testcase": false, "constructor": false}, {"identifier": "toMono", "parameters": "(Completable completable)", "modifiers": "public static", "return": "Mono<Void>", "signature": "Mono<Void> toMono(Completable completable)", "full_signature": "public static Mono<Void> toMono(Completable completable)", "class_method_signature": "ReactorExt.toMono(Completable completable)", "testcase": false, "constructor": false}, {"identifier": "toObservable", "parameters": "(Flux<T> flux)", "modifiers": "public static", "return": "Observable<T>", "signature": "Observable<T> toObservable(Flux<T> flux)", "full_signature": "public static Observable<T> toObservable(Flux<T> flux)", "class_method_signature": "ReactorExt.toObservable(Flux<T> flux)", "testcase": false, "constructor": false}, {"identifier": "toObservable", "parameters": "(Mono<T> mono)", "modifiers": "public static", "return": "Observable<T>", "signature": "Observable<T> toObservable(Mono<T> mono)", "full_signature": "public static Observable<T> toObservable(Mono<T> mono)", "class_method_signature": "ReactorExt.toObservable(Mono<T> mono)", "testcase": false, "constructor": false}, {"identifier": "toSingle", "parameters": "(Mono<T> mono)", "modifiers": "public static", "return": "Single<T>", "signature": "Single<T> toSingle(Mono<T> mono)", "full_signature": "public static Single<T> toSingle(Mono<T> mono)", "class_method_signature": "ReactorExt.toSingle(Mono<T> mono)", "testcase": false, "constructor": false}, {"identifier": "toCompletable", "parameters": "(Mono<Void> mono)", "modifiers": "public static", "return": "Completable", "signature": "Completable toCompletable(Mono<Void> mono)", "full_signature": "public static Completable toCompletable(Mono<Void> mono)", "class_method_signature": "ReactorExt.toCompletable(Mono<Void> mono)", "testcase": false, "constructor": false}, {"identifier": "silentSubscriber", "parameters": "()", "modifiers": "public static", "return": "CoreSubscriber<T>", "signature": "CoreSubscriber<T> silentSubscriber()", "full_signature": "public static CoreSubscriber<T> silentSubscriber()", "class_method_signature": "ReactorExt.silentSubscriber()", "testcase": false, "constructor": false}], "file": "titus-common/src/main/java/com/netflix/titus/common/util/rx/ReactorExt.java"}, "focal_method": {"identifier": "emitError", "parameters": "(Mono<?> source)", "modifiers": "public static", "return": "Mono<Optional<Throwable>>", "body": "public static Mono<Optional<Throwable>> emitError(Mono<?> source) {\n        return source.ignoreElement().materialize().map(result ->\n                result.getType() == SignalType.ON_ERROR\n                        ? Optional.of(result.getThrowable())\n                        : Optional.empty()\n        );\n    }", "signature": "Mono<Optional<Throwable>> emitError(Mono<?> source)", "full_signature": "public static Mono<Optional<Throwable>> emitError(Mono<?> source)", "class_method_signature": "ReactorExt.emitError(Mono<?> source)", "testcase": false, "constructor": false, "invocations": ["map", "materialize", "ignoreElement", "getType", "of", "getThrowable", "empty"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}