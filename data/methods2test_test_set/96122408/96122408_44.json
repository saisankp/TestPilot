{"test_class": {"identifier": "UserBulkUploadRequestValidatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "actors/common/src/test/java/org/sunbird/validator/user/UserBulkUploadRequestValidatorTest.java"}, "test_case": {"identifier": "testValidateUserTypeWithMissingUserTypeParam", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidateUserTypeWithMissingUserTypeParam() {\n        Map<String, Object> userMap = new HashMap<>();\n        try {\n            userMap.put(JsonKey.USER_TYPE, \"invalid\");\n            UserBulkUploadRequestValidator.validateUserBulkUploadRequest(userMap);\n        } catch (Exception e) {\n            Assert.assertEquals(\"Invalid userType: invalid. Valid values are: [TEACHER, OTHER].\", e.getMessage());\n\n        }\n\n    }", "signature": "void testValidateUserTypeWithMissingUserTypeParam()", "full_signature": "@Test public void testValidateUserTypeWithMissingUserTypeParam()", "class_method_signature": "UserBulkUploadRequestValidatorTest.testValidateUserTypeWithMissingUserTypeParam()", "testcase": true, "constructor": false, "invocations": ["put", "validateUserBulkUploadRequest", "assertEquals", "getMessage"]}, "focal_class": {"identifier": "UserBulkUploadRequestValidator", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "UserBulkUploadRequestValidator", "parameters": "()", "modifiers": "private", "return": "", "signature": " UserBulkUploadRequestValidator()", "full_signature": "private  UserBulkUploadRequestValidator()", "class_method_signature": "UserBulkUploadRequestValidator.UserBulkUploadRequestValidator()", "testcase": false, "constructor": true}, {"identifier": "validateUserBulkUploadRequest", "parameters": "(Map<String, Object> userMap)", "modifiers": "public static", "return": "void", "signature": "void validateUserBulkUploadRequest(Map<String, Object> userMap)", "full_signature": "public static void validateUserBulkUploadRequest(Map<String, Object> userMap)", "class_method_signature": "UserBulkUploadRequestValidator.validateUserBulkUploadRequest(Map<String, Object> userMap)", "testcase": false, "constructor": false}, {"identifier": "validateUserType", "parameters": "(Map<String, Object> userMap)", "modifiers": "public static", "return": "void", "signature": "void validateUserType(Map<String, Object> userMap)", "full_signature": "public static void validateUserType(Map<String, Object> userMap)", "class_method_signature": "UserBulkUploadRequestValidator.validateUserType(Map<String, Object> userMap)", "testcase": false, "constructor": false}, {"identifier": "validateOrganisationId", "parameters": "(Map<String, Object> userMap)", "modifiers": "public static", "return": "void", "signature": "void validateOrganisationId(Map<String, Object> userMap)", "full_signature": "public static void validateOrganisationId(Map<String, Object> userMap)", "class_method_signature": "UserBulkUploadRequestValidator.validateOrganisationId(Map<String, Object> userMap)", "testcase": false, "constructor": false}], "file": "actors/common/src/main/java/org/sunbird/validator/user/UserBulkUploadRequestValidator.java"}, "focal_method": {"identifier": "validateUserBulkUploadRequest", "parameters": "(Map<String, Object> userMap)", "modifiers": "public static", "return": "void", "body": "public static void validateUserBulkUploadRequest(Map<String, Object> userMap) {\n    validateUserType(userMap);\n    validateOrganisationId(userMap);\n  }", "signature": "void validateUserBulkUploadRequest(Map<String, Object> userMap)", "full_signature": "public static void validateUserBulkUploadRequest(Map<String, Object> userMap)", "class_method_signature": "UserBulkUploadRequestValidator.validateUserBulkUploadRequest(Map<String, Object> userMap)", "testcase": false, "constructor": false, "invocations": ["validateUserType", "validateOrganisationId"]}, "repository": {"repo_id": 96122408, "url": "https://github.com/project-sunbird/sunbird-lms-mw", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 5, "size": 15380, "license": "licensed"}}