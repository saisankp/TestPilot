{"test_class": {"identifier": "TaskInputSplitProviderTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-runtime/src/test/java/org/apache/flink/runtime/taskmanager/TaskInputSplitProviderTest.java"}, "test_case": {"identifier": "testRequestNextInputSplitWithInvalidExecutionID", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testRequestNextInputSplitWithInvalidExecutionID() {\n\n\t\tfinal JobID jobID = new JobID();\n\t\tfinal JobVertexID vertexID = new JobVertexID();\n\t\tfinal ExecutionAttemptID executionID = new ExecutionAttemptID();\n\t\tfinal FiniteDuration timeout = new FiniteDuration(10, TimeUnit.SECONDS);\n\n\t\tfinal ActorGateway gateway = new NullInputSplitGateway();\n\n\n\t\tfinal TaskInputSplitProvider provider = new TaskInputSplitProvider(\n\t\t\t\tgateway,\n\t\t\t\tjobID,\n\t\t\t\tvertexID,\n\t\t\t\texecutionID,\n\t\t\t\tgetClass().getClassLoader(),\n\t\t\t\ttimeout\n\t\t);\n\n\t\t// The jobManager will return a\n\t\tInputSplit nextInputSplit = provider.getNextInputSplit();\n\n\t\tassertTrue(nextInputSplit == null);\n\t}", "signature": "void testRequestNextInputSplitWithInvalidExecutionID()", "full_signature": "@Test public void testRequestNextInputSplitWithInvalidExecutionID()", "class_method_signature": "TaskInputSplitProviderTest.testRequestNextInputSplitWithInvalidExecutionID()", "testcase": true, "constructor": false, "invocations": ["getClassLoader", "getClass", "getNextInputSplit", "assertTrue"]}, "focal_class": {"identifier": "TaskInputSplitProvider", "superclass": "", "interfaces": "implements InputSplitProvider", "fields": [{"original_string": "private final ActorGateway jobManager;", "modifier": "private final", "type": "ActorGateway", "declarator": "jobManager", "var_name": "jobManager"}, {"original_string": "private final JobID jobId;", "modifier": "private final", "type": "JobID", "declarator": "jobId", "var_name": "jobId"}, {"original_string": "private final JobVertexID vertexId;", "modifier": "private final", "type": "JobVertexID", "declarator": "vertexId", "var_name": "vertexId"}, {"original_string": "private final ExecutionAttemptID executionID;", "modifier": "private final", "type": "ExecutionAttemptID", "declarator": "executionID", "var_name": "executionID"}, {"original_string": "private final ClassLoader usercodeClassLoader;", "modifier": "private final", "type": "ClassLoader", "declarator": "usercodeClassLoader", "var_name": "usercodeClassLoader"}, {"original_string": "private final FiniteDuration timeout;", "modifier": "private final", "type": "FiniteDuration", "declarator": "timeout", "var_name": "timeout"}], "methods": [{"identifier": "TaskInputSplitProvider", "parameters": "(\n\t\t\tActorGateway jobManager,\n\t\t\tJobID jobId,\n\t\t\tJobVertexID vertexId,\n\t\t\tExecutionAttemptID executionID,\n\t\t\tClassLoader userCodeClassLoader,\n\t\t\tFiniteDuration timeout)", "modifiers": "public", "return": "", "signature": " TaskInputSplitProvider(\n\t\t\tActorGateway jobManager,\n\t\t\tJobID jobId,\n\t\t\tJobVertexID vertexId,\n\t\t\tExecutionAttemptID executionID,\n\t\t\tClassLoader userCodeClassLoader,\n\t\t\tFiniteDuration timeout)", "full_signature": "public  TaskInputSplitProvider(\n\t\t\tActorGateway jobManager,\n\t\t\tJobID jobId,\n\t\t\tJobVertexID vertexId,\n\t\t\tExecutionAttemptID executionID,\n\t\t\tClassLoader userCodeClassLoader,\n\t\t\tFiniteDuration timeout)", "class_method_signature": "TaskInputSplitProvider.TaskInputSplitProvider(\n\t\t\tActorGateway jobManager,\n\t\t\tJobID jobId,\n\t\t\tJobVertexID vertexId,\n\t\t\tExecutionAttemptID executionID,\n\t\t\tClassLoader userCodeClassLoader,\n\t\t\tFiniteDuration timeout)", "testcase": false, "constructor": true}, {"identifier": "getNextInputSplit", "parameters": "()", "modifiers": "@Override public", "return": "InputSplit", "signature": "InputSplit getNextInputSplit()", "full_signature": "@Override public InputSplit getNextInputSplit()", "class_method_signature": "TaskInputSplitProvider.getNextInputSplit()", "testcase": false, "constructor": false}], "file": "flink-runtime/src/main/java/org/apache/flink/runtime/taskmanager/TaskInputSplitProvider.java"}, "focal_method": {"identifier": "getNextInputSplit", "parameters": "()", "modifiers": "@Override public", "return": "InputSplit", "body": "@Override\n\tpublic InputSplit getNextInputSplit() {\n\t\ttry {\n\t\t\tfinal Future<Object> response = jobManager.ask(\n\t\t\t\t\tnew JobManagerMessages.RequestNextInputSplit(jobId, vertexId, executionID),\n\t\t\t\t\ttimeout);\n\n\t\t\tfinal Object result = Await.result(response, timeout);\n\n\t\t\tif(!(result instanceof JobManagerMessages.NextInputSplit)){\n\t\t\t\tthrow new RuntimeException(\"RequestNextInputSplit requires a response of type \" +\n\t\t\t\t\t\t\"NextInputSplit. Instead response is of type \" + result.getClass() + \".\");\n\t\t\t} else {\n\t\t\t\tfinal JobManagerMessages.NextInputSplit nextInputSplit =\n\t\t\t\t\t\t(JobManagerMessages.NextInputSplit) result;\n\n\t\t\t\tbyte[] serializedData = nextInputSplit.splitData();\n\n\t\t\t\tif(serializedData == null) {\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\tObject deserialized = InstantiationUtil.deserializeObject(serializedData,\n\t\t\t\t\t\t\tusercodeClassLoader);\n\t\t\t\t\treturn (InputSplit) deserialized;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tthrow new RuntimeException(\"Requesting the next InputSplit failed.\", e);\n\t\t}\n\t}", "signature": "InputSplit getNextInputSplit()", "full_signature": "@Override public InputSplit getNextInputSplit()", "class_method_signature": "TaskInputSplitProvider.getNextInputSplit()", "testcase": false, "constructor": false, "invocations": ["ask", "result", "getClass", "splitData", "deserializeObject"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}