{"test_class": {"identifier": "DistributedOperationQueueTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "DistributedOperationQueue queue = new DistributedOperationQueue();", "modifier": "", "type": "DistributedOperationQueue", "declarator": "queue = new DistributedOperationQueue()", "var_name": "queue"}, {"original_string": "static Random r = new Random();", "modifier": "static", "type": "Random", "declarator": "r = new Random()", "var_name": "r"}], "file": "adfs-hdfs-project/adfs-hdfs/src/test/java/com/taobao/adfs/distributed/DistributedOperationQueueTest.java"}, "test_case": {"identifier": "testOperationQueue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testOperationQueue() throws InterruptedException{\n    Thread t0 = new Getter(queue), t1 =new Getter(queue), t2=new Getter(queue);\n    long tid0 = t0.getId(),tid1 = t1.getId(),tid2=t2.getId();\n    \n    synchronized(queue){\n      queue.addByThreadId(generateOprationById(0), tid0);\n      queue.addByThreadId(generateOprationById(3), tid1);\n      queue.addByThreadId(generateOprationById(2), tid2);\n      queue.addByThreadId(generateOprationById(1), tid0);\n      queue.addByThreadId(generateOprationById(1), tid1);\n      queue.addByThreadId(generateOprationById(1), tid2);\n      queue.addByThreadId(generateOprationById(2), tid1);\n      queue.addByThreadId(generateOprationById(3), tid2);\n    }\n      t0.setName(\"t0\");\n      t1.setName(\"t1\");\n      t2.setName(\"t2\");\n      t0.start();\n      Thread.sleep(5000);\n      t2.start();\n      Thread.sleep(10000);\n      t1.start();\n      t0.join();\n      t1.join();\n      t2.join();\n  }", "signature": "void testOperationQueue()", "full_signature": "@Test public void testOperationQueue()", "class_method_signature": "DistributedOperationQueueTest.testOperationQueue()", "testcase": true, "constructor": false, "invocations": ["getId", "getId", "getId", "addByThreadId", "generateOprationById", "addByThreadId", "generateOprationById", "addByThreadId", "generateOprationById", "addByThreadId", "generateOprationById", "addByThreadId", "generateOprationById", "addByThreadId", "generateOprationById", "addByThreadId", "generateOprationById", "addByThreadId", "generateOprationById", "setName", "setName", "setName", "start", "sleep", "start", "sleep", "start", "join", "join", "join"]}, "focal_class": {"identifier": "DistributedOperationQueue", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Logger logger = LoggerFactory.getLogger(DistributedOperationQueue.class);", "modifier": "public static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(DistributedOperationQueue.class)", "var_name": "logger"}, {"original_string": "Map<OperandKey, ArrayList<DistributedOperation>> operationMapByKey =\n      new HashMap<OperandKey, ArrayList<DistributedOperation>>();", "modifier": "", "type": "Map<OperandKey, ArrayList<DistributedOperation>>", "declarator": "operationMapByKey =\n      new HashMap<OperandKey, ArrayList<DistributedOperation>>()", "var_name": "operationMapByKey"}, {"original_string": "Map<Long, ArrayList<DistributedOperation>> operationByThreadId = new HashMap<Long, ArrayList<DistributedOperation>>();", "modifier": "", "type": "Map<Long, ArrayList<DistributedOperation>>", "declarator": "operationByThreadId = new HashMap<Long, ArrayList<DistributedOperation>>()", "var_name": "operationByThreadId"}, {"original_string": "Set<OperandKey> operationLock = new HashSet<OperandKey>();", "modifier": "", "type": "Set<OperandKey>", "declarator": "operationLock = new HashSet<OperandKey>()", "var_name": "operationLock"}, {"original_string": "volatile boolean allowAdd = true;", "modifier": "volatile", "type": "boolean", "declarator": "allowAdd = true", "var_name": "allowAdd"}], "methods": [{"identifier": "setAllowAdd", "parameters": "(boolean allowAdd)", "modifiers": "public", "return": "boolean", "signature": "boolean setAllowAdd(boolean allowAdd)", "full_signature": "public boolean setAllowAdd(boolean allowAdd)", "class_method_signature": "DistributedOperationQueue.setAllowAdd(boolean allowAdd)", "testcase": false, "constructor": false}, {"identifier": "lockAndGetOperations", "parameters": "(long threadId)", "modifiers": "public synchronized", "return": "DistributedOperation[]", "signature": "DistributedOperation[] lockAndGetOperations(long threadId)", "full_signature": "public synchronized DistributedOperation[] lockAndGetOperations(long threadId)", "class_method_signature": "DistributedOperationQueue.lockAndGetOperations(long threadId)", "testcase": false, "constructor": false}, {"identifier": "deleteAndUnlockOperations", "parameters": "(DistributedOperation[] operations)", "modifiers": "public synchronized", "return": "void", "signature": "void deleteAndUnlockOperations(DistributedOperation[] operations)", "full_signature": "public synchronized void deleteAndUnlockOperations(DistributedOperation[] operations)", "class_method_signature": "DistributedOperationQueue.deleteAndUnlockOperations(DistributedOperation[] operations)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void clear()", "full_signature": "public synchronized void clear()", "class_method_signature": "DistributedOperationQueue.clear()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(DistributedOperation distributedOperation)", "modifiers": "public synchronized", "return": "void", "signature": "void add(DistributedOperation distributedOperation)", "full_signature": "public synchronized void add(DistributedOperation distributedOperation)", "class_method_signature": "DistributedOperationQueue.add(DistributedOperation distributedOperation)", "testcase": false, "constructor": false}, {"identifier": "addByThreadId", "parameters": "(DistributedOperation distributedOperation, long threadId)", "modifiers": "public synchronized", "return": "void", "signature": "void addByThreadId(DistributedOperation distributedOperation, long threadId)", "full_signature": "public synchronized void addByThreadId(DistributedOperation distributedOperation, long threadId)", "class_method_signature": "DistributedOperationQueue.addByThreadId(DistributedOperation distributedOperation, long threadId)", "testcase": false, "constructor": false}, {"identifier": "getOperations", "parameters": "(long threadId)", "modifiers": "", "return": "DistributedOperation[]", "signature": "DistributedOperation[] getOperations(long threadId)", "full_signature": " DistributedOperation[] getOperations(long threadId)", "class_method_signature": "DistributedOperationQueue.getOperations(long threadId)", "testcase": false, "constructor": false}, {"identifier": "lockBuckets", "parameters": "(DistributedOperation... operations)", "modifiers": "", "return": "void", "signature": "void lockBuckets(DistributedOperation... operations)", "full_signature": " void lockBuckets(DistributedOperation... operations)", "class_method_signature": "DistributedOperationQueue.lockBuckets(DistributedOperation... operations)", "testcase": false, "constructor": false}, {"identifier": "getNotWrittenOperations", "parameters": "(DistributedOperation... operations)", "modifiers": "private", "return": "DistributedOperation[]", "signature": "DistributedOperation[] getNotWrittenOperations(DistributedOperation... operations)", "full_signature": "private DistributedOperation[] getNotWrittenOperations(DistributedOperation... operations)", "class_method_signature": "DistributedOperationQueue.getNotWrittenOperations(DistributedOperation... operations)", "testcase": false, "constructor": false}, {"identifier": "deleteOperations", "parameters": "(DistributedOperation... operations)", "modifiers": "private", "return": "void", "signature": "void deleteOperations(DistributedOperation... operations)", "full_signature": "private void deleteOperations(DistributedOperation... operations)", "class_method_signature": "DistributedOperationQueue.deleteOperations(DistributedOperation... operations)", "testcase": false, "constructor": false}, {"identifier": "markOperationsAreWritten", "parameters": "(DistributedOperation... operations)", "modifiers": "private", "return": "void", "signature": "void markOperationsAreWritten(DistributedOperation... operations)", "full_signature": "private void markOperationsAreWritten(DistributedOperation... operations)", "class_method_signature": "DistributedOperationQueue.markOperationsAreWritten(DistributedOperation... operations)", "testcase": false, "constructor": false}, {"identifier": "unlockBuckets", "parameters": "(DistributedOperation... operations)", "modifiers": "", "return": "void", "signature": "void unlockBuckets(DistributedOperation... operations)", "full_signature": " void unlockBuckets(DistributedOperation... operations)", "class_method_signature": "DistributedOperationQueue.unlockBuckets(DistributedOperation... operations)", "testcase": false, "constructor": false}], "file": "adfs-hdfs-project/adfs-hdfs/src/main/java/com/taobao/adfs/distributed/DistributedOperationQueue.java"}, "focal_method": {"identifier": "addByThreadId", "parameters": "(DistributedOperation distributedOperation, long threadId)", "modifiers": "public synchronized", "return": "void", "body": "public synchronized void addByThreadId(DistributedOperation distributedOperation, long threadId) {\n    if (!allowAdd) return;\n    // add to map(operation's key, operations)\n    ArrayList<DistributedOperation> operationListByKey = operationMapByKey.get(distributedOperation.getKey());\n    if (operationListByKey == null) {\n      operationListByKey = new ArrayList<DistributedOperation>();\n      operationMapByKey.put(distributedOperation.getKey(), operationListByKey);\n    }\n    operationListByKey.add(distributedOperation);\n\n    // add to map(threadId, operations)\n    ArrayList<DistributedOperation> operationListByThreadId = operationByThreadId.get(threadId);\n    if (operationListByThreadId == null) {\n      operationListByThreadId = new ArrayList<DistributedOperation>();\n      operationByThreadId.put(threadId, operationListByThreadId);\n    }\n    operationListByThreadId.add(distributedOperation);\n  }", "signature": "void addByThreadId(DistributedOperation distributedOperation, long threadId)", "full_signature": "public synchronized void addByThreadId(DistributedOperation distributedOperation, long threadId)", "class_method_signature": "DistributedOperationQueue.addByThreadId(DistributedOperation distributedOperation, long threadId)", "testcase": false, "constructor": false, "invocations": ["get", "getKey", "put", "getKey", "add", "get", "put", "add"]}, "repository": {"repo_id": 3937799, "url": "https://github.com/taobao/ADFS", "language": "Java", "is_fork": false, "fork_count": 50, "stargazer_count": 108, "size": 53300, "license": "licensed"}}