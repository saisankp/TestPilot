{"test_class": {"identifier": "MainTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Method findMinMax;", "modifier": "private static", "type": "Method", "declarator": "findMinMax", "var_name": "findMinMax"}, {"original_string": "private static Class<?> mainClass;", "modifier": "private static", "type": "Class<?>", "declarator": "mainClass", "var_name": "mainClass"}], "file": "section541/lesson12781/step58088/src/MainTest.java"}, "test_case": {"identifier": "findMinMax", "parameters": "()", "modifiers": "@Test(timeout = 8000) public", "return": "void", "body": "@Test(timeout = 8000)\n    public void findMinMax() throws Throwable {\n        Stream stream = Arrays.stream(new Integer[]{10, 20, 1, 5, 8, 94, 1, -52, 0});\n        Comparator<Integer> comparator = Integer::compare;\n        final boolean[] failFlag = {true};\n        BiConsumer<Integer, Integer> biConsumer = (min, max) -> {\n            assertEquals(new Integer(-52), min);\n            assertEquals(new Integer(94), max);\n            failFlag[0] = false;\n        };\n\n        TestUtils.invokeMethod(mainClass, findMinMax, stream, comparator, biConsumer);\n\n        if (failFlag[0]) {\n            fail(\"biConsumer didn't accept\");\n        }\n    }", "signature": "void findMinMax()", "full_signature": "@Test(timeout = 8000) public void findMinMax()", "class_method_signature": "MainTest.findMinMax()", "testcase": true, "constructor": false, "invocations": ["stream", "assertEquals", "assertEquals", "invokeMethod", "fail"]}, "focal_class": {"identifier": "Main", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "findMinMax", "parameters": "(\n            Stream<? extends T> stream,\n            Comparator<? super T> order,\n            BiConsumer<? super T, ? super T> minMaxConsumer)", "modifiers": "public static", "return": "void", "signature": "void findMinMax(\n            Stream<? extends T> stream,\n            Comparator<? super T> order,\n            BiConsumer<? super T, ? super T> minMaxConsumer)", "full_signature": "public static void findMinMax(\n            Stream<? extends T> stream,\n            Comparator<? super T> order,\n            BiConsumer<? super T, ? super T> minMaxConsumer)", "class_method_signature": "Main.findMinMax(\n            Stream<? extends T> stream,\n            Comparator<? super T> order,\n            BiConsumer<? super T, ? super T> minMaxConsumer)", "testcase": false, "constructor": false}], "file": "section541/lesson12781/step58088/src/Main.java"}, "focal_method": {"identifier": "findMinMax", "parameters": "(\n            Stream<? extends T> stream,\n            Comparator<? super T> order,\n            BiConsumer<? super T, ? super T> minMaxConsumer)", "modifiers": "public static", "return": "void", "body": "public static <T> void findMinMax(\n            Stream<? extends T> stream,\n            Comparator<? super T> order,\n            BiConsumer<? super T, ? super T> minMaxConsumer) {\n\n        // your implementation here\n    }", "signature": "void findMinMax(\n            Stream<? extends T> stream,\n            Comparator<? super T> order,\n            BiConsumer<? super T, ? super T> minMaxConsumer)", "full_signature": "public static void findMinMax(\n            Stream<? extends T> stream,\n            Comparator<? super T> order,\n            BiConsumer<? super T, ? super T> minMaxConsumer)", "class_method_signature": "Main.findMinMax(\n            Stream<? extends T> stream,\n            Comparator<? super T> order,\n            BiConsumer<? super T, ? super T> minMaxConsumer)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 69660791, "url": "https://github.com/meanmail/java_base", "language": "Java", "is_fork": false, "fork_count": 17, "stargazer_count": 24, "size": 432, "license": "licensed"}}