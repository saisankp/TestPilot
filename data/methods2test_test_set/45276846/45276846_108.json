{"test_class": {"identifier": "NettyHttpServiceClientTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static VerificationHost HOST;", "modifier": "private static", "type": "VerificationHost", "declarator": "HOST", "var_name": "HOST"}, {"original_string": "private static final boolean ENABLE_AUTH = false;", "modifier": "private static final", "type": "boolean", "declarator": "ENABLE_AUTH = false", "var_name": "ENABLE_AUTH"}, {"original_string": "private static final String SAMPLE_EMAIL = \"sample@vmware.com\";", "modifier": "private static final", "type": "String", "declarator": "SAMPLE_EMAIL = \"sample@vmware.com\"", "var_name": "SAMPLE_EMAIL"}, {"original_string": "private static final String SAMPLE_PASSWORD = \"password\";", "modifier": "private static final", "type": "String", "declarator": "SAMPLE_PASSWORD = \"password\"", "var_name": "SAMPLE_PASSWORD"}, {"original_string": "private VerificationHost host;", "modifier": "private", "type": "VerificationHost", "declarator": "host", "var_name": "host"}, {"original_string": "public String testURI;", "modifier": "public", "type": "String", "declarator": "testURI", "var_name": "testURI"}, {"original_string": "public int requestCount = 16;", "modifier": "public", "type": "int", "declarator": "requestCount = 16", "var_name": "requestCount"}, {"original_string": "public int serviceCount = 32;", "modifier": "public", "type": "int", "declarator": "serviceCount = 32", "var_name": "serviceCount"}, {"original_string": "public int connectionCount = 32;", "modifier": "public", "type": "int", "declarator": "connectionCount = 32", "var_name": "connectionCount"}, {"original_string": "public int operationTimeout = 0;", "modifier": "public", "type": "int", "declarator": "operationTimeout = 0", "var_name": "operationTimeout"}, {"original_string": "public int iterationCount = 1;", "modifier": "public", "type": "int", "declarator": "iterationCount = 1", "var_name": "iterationCount"}, {"original_string": "@Rule\n    public TestResults testResults = new TestResults();", "modifier": "@Rule\n    public", "type": "TestResults", "declarator": "testResults = new TestResults()", "var_name": "testResults"}], "file": "xenon-common/src/test/java/com/vmware/xenon/common/http/netty/NettyHttpServiceClientTest.java"}, "test_case": {"identifier": "testConnectionLimitWithOperationTimeout", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConnectionLimitWithOperationTimeout() throws Throwable {\n\n        List<Service> services = this.host.doThroughputServiceStart(this.serviceCount,\n                MinimalTestService.class,\n                this.host.buildMinimalTestState(),\n                null, null);\n\n        this.host.connectionTag = \"connectionLimitWithOperationTimeoutTag\";\n        this.host.getClient().setConnectionLimitPerTag(this.host.connectionTag,\n                ServiceClient.DEFAULT_CONNECTION_LIMIT_PER_HOST);\n\n        for (int i = 0; i < this.iterationCount; i++) {\n            doConnectionLimitWithOperationTimeout(services);\n        }\n    }", "signature": "void testConnectionLimitWithOperationTimeout()", "full_signature": "@Test public void testConnectionLimitWithOperationTimeout()", "class_method_signature": "NettyHttpServiceClientTest.testConnectionLimitWithOperationTimeout()", "testcase": true, "constructor": false, "invocations": ["doThroughputServiceStart", "buildMinimalTestState", "setConnectionLimitPerTag", "getClient", "doConnectionLimitWithOperationTimeout"]}, "focal_class": {"identifier": "NettyHttpServiceClient", "superclass": "", "interfaces": "implements ServiceClient", "fields": [{"original_string": "public static final int DEFAULT_CONNECTIONS_PER_HOST = ServiceClient.DEFAULT_CONNECTION_LIMIT_PER_HOST;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_CONNECTIONS_PER_HOST = ServiceClient.DEFAULT_CONNECTION_LIMIT_PER_HOST", "var_name": "DEFAULT_CONNECTIONS_PER_HOST"}, {"original_string": "public static final Logger LOGGER = Logger.getLogger(ServiceClient.class\n            .getName());", "modifier": "public static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(ServiceClient.class\n            .getName())", "var_name": "LOGGER"}, {"original_string": "private static final String ENV_VAR_NAME_HTTP_PROXY = \"http_proxy\";", "modifier": "private static final", "type": "String", "declarator": "ENV_VAR_NAME_HTTP_PROXY = \"http_proxy\"", "var_name": "ENV_VAR_NAME_HTTP_PROXY"}, {"original_string": "static final AsciiString TRANSACTION_ID_HEADER_ASCII = new AsciiString(\n            Operation.TRANSACTION_ID_HEADER);", "modifier": "static final", "type": "AsciiString", "declarator": "TRANSACTION_ID_HEADER_ASCII = new AsciiString(\n            Operation.TRANSACTION_ID_HEADER)", "var_name": "TRANSACTION_ID_HEADER_ASCII"}, {"original_string": "static final AsciiString CONTEXT_ID_HEADER_ASCII = new AsciiString(\n            Operation.CONTEXT_ID_HEADER);", "modifier": "static final", "type": "AsciiString", "declarator": "CONTEXT_ID_HEADER_ASCII = new AsciiString(\n            Operation.CONTEXT_ID_HEADER)", "var_name": "CONTEXT_ID_HEADER_ASCII"}, {"original_string": "static final AsciiString AUTH_TOKEN_HEADER_ASCII = new AsciiString(\n            Operation.REQUEST_AUTH_TOKEN_HEADER);", "modifier": "static final", "type": "AsciiString", "declarator": "AUTH_TOKEN_HEADER_ASCII = new AsciiString(\n            Operation.REQUEST_AUTH_TOKEN_HEADER)", "var_name": "AUTH_TOKEN_HEADER_ASCII"}, {"original_string": "static final AsciiString DEFAULT_MEDIA_TYPE_ASCII = new AsciiString(\n            Operation.MEDIA_TYPE_EVERYTHING_WILDCARDS);", "modifier": "static final", "type": "AsciiString", "declarator": "DEFAULT_MEDIA_TYPE_ASCII = new AsciiString(\n            Operation.MEDIA_TYPE_EVERYTHING_WILDCARDS)", "var_name": "DEFAULT_MEDIA_TYPE_ASCII"}, {"original_string": "static final AsciiString PRAGMA_DIRECTIVE_REPLICATED_ASCII = new AsciiString(\n            Operation.PRAGMA_DIRECTIVE_REPLICATED);", "modifier": "static final", "type": "AsciiString", "declarator": "PRAGMA_DIRECTIVE_REPLICATED_ASCII = new AsciiString(\n            Operation.PRAGMA_DIRECTIVE_REPLICATED)", "var_name": "PRAGMA_DIRECTIVE_REPLICATED_ASCII"}, {"original_string": "static final AsciiString MEDIA_TYPE_JSON_ASCII = new AsciiString(\n            Operation.MEDIA_TYPE_APPLICATION_JSON);", "modifier": "static final", "type": "AsciiString", "declarator": "MEDIA_TYPE_JSON_ASCII = new AsciiString(\n            Operation.MEDIA_TYPE_APPLICATION_JSON)", "var_name": "MEDIA_TYPE_JSON_ASCII"}, {"original_string": "static final AsciiString MEDIA_TYPE_KRYO_OCTET_STREAM_ASCII = new AsciiString(\n            Operation.MEDIA_TYPE_APPLICATION_KRYO_OCTET_STREAM);", "modifier": "static final", "type": "AsciiString", "declarator": "MEDIA_TYPE_KRYO_OCTET_STREAM_ASCII = new AsciiString(\n            Operation.MEDIA_TYPE_APPLICATION_KRYO_OCTET_STREAM)", "var_name": "MEDIA_TYPE_KRYO_OCTET_STREAM_ASCII"}, {"original_string": "private static final int MEDIA_TYPE_APPLICATION_PREFIX_LENGTH = 12;", "modifier": "private static final", "type": "int", "declarator": "MEDIA_TYPE_APPLICATION_PREFIX_LENGTH = 12", "var_name": "MEDIA_TYPE_APPLICATION_PREFIX_LENGTH"}, {"original_string": "private URI httpProxy;", "modifier": "private", "type": "URI", "declarator": "httpProxy", "var_name": "httpProxy"}, {"original_string": "private AsciiString userAgentAscii;", "modifier": "private", "type": "AsciiString", "declarator": "userAgentAscii", "var_name": "userAgentAscii"}, {"original_string": "private NettyChannelPool sslChannelPool;", "modifier": "private", "type": "NettyChannelPool", "declarator": "sslChannelPool", "var_name": "sslChannelPool"}, {"original_string": "private NettyChannelPool channelPool;", "modifier": "private", "type": "NettyChannelPool", "declarator": "channelPool", "var_name": "channelPool"}, {"original_string": "private NettyChannelPool http2SslChannelPool;", "modifier": "private", "type": "NettyChannelPool", "declarator": "http2SslChannelPool", "var_name": "http2SslChannelPool"}, {"original_string": "private NettyChannelPool http2ChannelPool;", "modifier": "private", "type": "NettyChannelPool", "declarator": "http2ChannelPool", "var_name": "http2ChannelPool"}, {"original_string": "private SortedMap<Long, Operation> pendingRequests = new ConcurrentSkipListMap<>();", "modifier": "private", "type": "SortedMap<Long, Operation>", "declarator": "pendingRequests = new ConcurrentSkipListMap<>()", "var_name": "pendingRequests"}, {"original_string": "private ScheduledExecutorService scheduledExecutor;", "modifier": "private", "type": "ScheduledExecutorService", "declarator": "scheduledExecutor", "var_name": "scheduledExecutor"}, {"original_string": "private ExecutorService executor;", "modifier": "private", "type": "ExecutorService", "declarator": "executor", "var_name": "executor"}, {"original_string": "private SslContext http2SslContext;", "modifier": "private", "type": "SslContext", "declarator": "http2SslContext", "var_name": "http2SslContext"}, {"original_string": "private SSLContext sslContext;", "modifier": "private", "type": "SSLContext", "declarator": "sslContext", "var_name": "sslContext"}, {"original_string": "private ServiceHost host;", "modifier": "private", "type": "ServiceHost", "declarator": "host", "var_name": "host"}, {"original_string": "private CookieJar cookieJar = new CookieJar();", "modifier": "private", "type": "CookieJar", "declarator": "cookieJar = new CookieJar()", "var_name": "cookieJar"}, {"original_string": "private boolean isStarted;", "modifier": "private", "type": "boolean", "declarator": "isStarted", "var_name": "isStarted"}, {"original_string": "private boolean warnHttp2DisablingConnectionSharing = false;", "modifier": "private", "type": "boolean", "declarator": "warnHttp2DisablingConnectionSharing = false", "var_name": "warnHttp2DisablingConnectionSharing"}, {"original_string": "private final Object startSync = new Object();", "modifier": "private final", "type": "Object", "declarator": "startSync = new Object()", "var_name": "startSync"}], "methods": [{"identifier": "create", "parameters": "(String userAgent,\n            ExecutorService executor,\n            ScheduledExecutorService scheduledExecutor)", "modifiers": "public static", "return": "ServiceClient", "signature": "ServiceClient create(String userAgent,\n            ExecutorService executor,\n            ScheduledExecutorService scheduledExecutor)", "full_signature": "public static ServiceClient create(String userAgent,\n            ExecutorService executor,\n            ScheduledExecutorService scheduledExecutor)", "class_method_signature": "NettyHttpServiceClient.create(String userAgent,\n            ExecutorService executor,\n            ScheduledExecutorService scheduledExecutor)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String userAgent,\n            ExecutorService executor,\n            ScheduledExecutorService scheduledExecutor,\n            ServiceHost host)", "modifiers": "public static", "return": "ServiceClient", "signature": "ServiceClient create(String userAgent,\n            ExecutorService executor,\n            ScheduledExecutorService scheduledExecutor,\n            ServiceHost host)", "full_signature": "public static ServiceClient create(String userAgent,\n            ExecutorService executor,\n            ScheduledExecutorService scheduledExecutor,\n            ServiceHost host)", "class_method_signature": "NettyHttpServiceClient.create(String userAgent,\n            ExecutorService executor,\n            ScheduledExecutorService scheduledExecutor,\n            ServiceHost host)", "testcase": false, "constructor": false}, {"identifier": "buildThreadTag", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String buildThreadTag()", "full_signature": "private String buildThreadTag()", "class_method_signature": "NettyHttpServiceClient.buildThreadTag()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "NettyHttpServiceClient.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stop()", "full_signature": "@Override public void stop()", "class_method_signature": "NettyHttpServiceClient.stop()", "testcase": false, "constructor": false}, {"identifier": "setHttpProxy", "parameters": "(URI proxy)", "modifiers": "public", "return": "ServiceClient", "signature": "ServiceClient setHttpProxy(URI proxy)", "full_signature": "public ServiceClient setHttpProxy(URI proxy)", "class_method_signature": "NettyHttpServiceClient.setHttpProxy(URI proxy)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(Operation op)", "modifiers": "@Override public", "return": "void", "signature": "void send(Operation op)", "full_signature": "@Override public void send(Operation op)", "class_method_signature": "NettyHttpServiceClient.send(Operation op)", "testcase": false, "constructor": false}, {"identifier": "sendRequest", "parameters": "(Operation op)", "modifiers": "@Override public", "return": "void", "signature": "void sendRequest(Operation op)", "full_signature": "@Override public void sendRequest(Operation op)", "class_method_signature": "NettyHttpServiceClient.sendRequest(Operation op)", "testcase": false, "constructor": false}, {"identifier": "setExpiration", "parameters": "(Operation op)", "modifiers": "private", "return": "void", "signature": "void setExpiration(Operation op)", "full_signature": "private void setExpiration(Operation op)", "class_method_signature": "NettyHttpServiceClient.setExpiration(Operation op)", "testcase": false, "constructor": false}, {"identifier": "setCookies", "parameters": "(Operation clone)", "modifiers": "private", "return": "void", "signature": "void setCookies(Operation clone)", "full_signature": "private void setCookies(Operation clone)", "class_method_signature": "NettyHttpServiceClient.setCookies(Operation clone)", "testcase": false, "constructor": false}, {"identifier": "startTracking", "parameters": "(Operation op)", "modifiers": "private", "return": "void", "signature": "void startTracking(Operation op)", "full_signature": "private void startTracking(Operation op)", "class_method_signature": "NettyHttpServiceClient.startTracking(Operation op)", "testcase": false, "constructor": false}, {"identifier": "stopTracking", "parameters": "(Operation op)", "modifiers": "", "return": "void", "signature": "void stopTracking(Operation op)", "full_signature": " void stopTracking(Operation op)", "class_method_signature": "NettyHttpServiceClient.stopTracking(Operation op)", "testcase": false, "constructor": false}, {"identifier": "updateCookieJarFromResponseHeaders", "parameters": "(Operation op)", "modifiers": "private", "return": "void", "signature": "void updateCookieJarFromResponseHeaders(Operation op)", "full_signature": "private void updateCookieJarFromResponseHeaders(Operation op)", "class_method_signature": "NettyHttpServiceClient.updateCookieJarFromResponseHeaders(Operation op)", "testcase": false, "constructor": false}, {"identifier": "sendRemote", "parameters": "(Operation op)", "modifiers": "private", "return": "void", "signature": "void sendRemote(Operation op)", "full_signature": "private void sendRemote(Operation op)", "class_method_signature": "NettyHttpServiceClient.sendRemote(Operation op)", "testcase": false, "constructor": false}, {"identifier": "connectChannel", "parameters": "(NettyChannelPool pool, Operation op,\n            String remoteHost, int port)", "modifiers": "private", "return": "void", "signature": "void connectChannel(NettyChannelPool pool, Operation op,\n            String remoteHost, int port)", "full_signature": "private void connectChannel(NettyChannelPool pool, Operation op,\n            String remoteHost, int port)", "class_method_signature": "NettyHttpServiceClient.connectChannel(NettyChannelPool pool, Operation op,\n            String remoteHost, int port)", "testcase": false, "constructor": false}, {"identifier": "sendHttpRequest", "parameters": "(Operation op)", "modifiers": "private", "return": "void", "signature": "void sendHttpRequest(Operation op)", "full_signature": "private void sendHttpRequest(Operation op)", "class_method_signature": "NettyHttpServiceClient.sendHttpRequest(Operation op)", "testcase": false, "constructor": false}, {"identifier": "setAsciiContentType", "parameters": "(Operation op, HttpHeaders httpHeaders)", "modifiers": "private", "return": "void", "signature": "void setAsciiContentType(Operation op, HttpHeaders httpHeaders)", "full_signature": "private void setAsciiContentType(Operation op, HttpHeaders httpHeaders)", "class_method_signature": "NettyHttpServiceClient.setAsciiContentType(Operation op, HttpHeaders httpHeaders)", "testcase": false, "constructor": false}, {"identifier": "logRequestFraming", "parameters": "(Operation op, NettyFullHttpRequest request)", "modifiers": "private", "return": "void", "signature": "void logRequestFraming(Operation op, NettyFullHttpRequest request)", "full_signature": "private void logRequestFraming(Operation op, NettyFullHttpRequest request)", "class_method_signature": "NettyHttpServiceClient.logRequestFraming(Operation op, NettyFullHttpRequest request)", "testcase": false, "constructor": false}, {"identifier": "toHttpMethod", "parameters": "(Action a)", "modifiers": "private static", "return": "HttpMethod", "signature": "HttpMethod toHttpMethod(Action a)", "full_signature": "private static HttpMethod toHttpMethod(Action a)", "class_method_signature": "NettyHttpServiceClient.toHttpMethod(Action a)", "testcase": false, "constructor": false}, {"identifier": "failWithTimeout", "parameters": "(Operation op, Object originalBody)", "modifiers": "private", "return": "void", "signature": "void failWithTimeout(Operation op, Object originalBody)", "full_signature": "private void failWithTimeout(Operation op, Object originalBody)", "class_method_signature": "NettyHttpServiceClient.failWithTimeout(Operation op, Object originalBody)", "testcase": false, "constructor": false}, {"identifier": "fail", "parameters": "(Throwable e, Operation op, Object originalBody)", "modifiers": "private", "return": "void", "signature": "void fail(Throwable e, Operation op, Object originalBody)", "full_signature": "private void fail(Throwable e, Operation op, Object originalBody)", "class_method_signature": "NettyHttpServiceClient.fail(Throwable e, Operation op, Object originalBody)", "testcase": false, "constructor": false}, {"identifier": "validateOperation", "parameters": "(Operation op)", "modifiers": "private static", "return": "boolean", "signature": "boolean validateOperation(Operation op)", "full_signature": "private static boolean validateOperation(Operation op)", "class_method_signature": "NettyHttpServiceClient.validateOperation(Operation op)", "testcase": false, "constructor": false}, {"identifier": "handleMaintenance", "parameters": "(Operation op)", "modifiers": "@Override public", "return": "void", "signature": "void handleMaintenance(Operation op)", "full_signature": "@Override public void handleMaintenance(Operation op)", "class_method_signature": "NettyHttpServiceClient.handleMaintenance(Operation op)", "testcase": false, "constructor": false}, {"identifier": "failExpiredRequests", "parameters": "(long now)", "modifiers": "private", "return": "void", "signature": "void failExpiredRequests(long now)", "full_signature": "private void failExpiredRequests(long now)", "class_method_signature": "NettyHttpServiceClient.failExpiredRequests(long now)", "testcase": false, "constructor": false}, {"identifier": "setPendingRequestQueueLimit", "parameters": "(int limit)", "modifiers": "@Override public", "return": "ServiceClient", "signature": "ServiceClient setPendingRequestQueueLimit(int limit)", "full_signature": "@Override public ServiceClient setPendingRequestQueueLimit(int limit)", "class_method_signature": "NettyHttpServiceClient.setPendingRequestQueueLimit(int limit)", "testcase": false, "constructor": false}, {"identifier": "getPendingRequestQueueLimit", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getPendingRequestQueueLimit()", "full_signature": "@Override public int getPendingRequestQueueLimit()", "class_method_signature": "NettyHttpServiceClient.getPendingRequestQueueLimit()", "testcase": false, "constructor": false}, {"identifier": "setConnectionLimitPerTag", "parameters": "(String tag, int limit)", "modifiers": "@Override public", "return": "ServiceClient", "signature": "ServiceClient setConnectionLimitPerTag(String tag, int limit)", "full_signature": "@Override public ServiceClient setConnectionLimitPerTag(String tag, int limit)", "class_method_signature": "NettyHttpServiceClient.setConnectionLimitPerTag(String tag, int limit)", "testcase": false, "constructor": false}, {"identifier": "getConnectionLimitPerTag", "parameters": "(String tag)", "modifiers": "@Override public", "return": "int", "signature": "int getConnectionLimitPerTag(String tag)", "full_signature": "@Override public int getConnectionLimitPerTag(String tag)", "class_method_signature": "NettyHttpServiceClient.getConnectionLimitPerTag(String tag)", "testcase": false, "constructor": false}, {"identifier": "setHttp2SslContext", "parameters": "(SslContext context)", "modifiers": "public", "return": "ServiceClient", "signature": "ServiceClient setHttp2SslContext(SslContext context)", "full_signature": "public ServiceClient setHttp2SslContext(SslContext context)", "class_method_signature": "NettyHttpServiceClient.setHttp2SslContext(SslContext context)", "testcase": false, "constructor": false}, {"identifier": "getHttp2SslContext", "parameters": "()", "modifiers": "public", "return": "SslContext", "signature": "SslContext getHttp2SslContext()", "full_signature": "public SslContext getHttp2SslContext()", "class_method_signature": "NettyHttpServiceClient.getHttp2SslContext()", "testcase": false, "constructor": false}, {"identifier": "setSSLContext", "parameters": "(SSLContext context)", "modifiers": "@Override public", "return": "ServiceClient", "signature": "ServiceClient setSSLContext(SSLContext context)", "full_signature": "@Override public ServiceClient setSSLContext(SSLContext context)", "class_method_signature": "NettyHttpServiceClient.setSSLContext(SSLContext context)", "testcase": false, "constructor": false}, {"identifier": "getSSLContext", "parameters": "()", "modifiers": "@Override public", "return": "SSLContext", "signature": "SSLContext getSSLContext()", "full_signature": "@Override public SSLContext getSSLContext()", "class_method_signature": "NettyHttpServiceClient.getSSLContext()", "testcase": false, "constructor": false}, {"identifier": "getChannelPool", "parameters": "()", "modifiers": "public", "return": "NettyChannelPool", "signature": "NettyChannelPool getChannelPool()", "full_signature": "public NettyChannelPool getChannelPool()", "class_method_signature": "NettyHttpServiceClient.getChannelPool()", "testcase": false, "constructor": false}, {"identifier": "getHttp2ChannelPool", "parameters": "()", "modifiers": "public", "return": "NettyChannelPool", "signature": "NettyChannelPool getHttp2ChannelPool()", "full_signature": "public NettyChannelPool getHttp2ChannelPool()", "class_method_signature": "NettyHttpServiceClient.getHttp2ChannelPool()", "testcase": false, "constructor": false}, {"identifier": "getSslChannelPool", "parameters": "()", "modifiers": "public", "return": "NettyChannelPool", "signature": "NettyChannelPool getSslChannelPool()", "full_signature": "public NettyChannelPool getSslChannelPool()", "class_method_signature": "NettyHttpServiceClient.getSslChannelPool()", "testcase": false, "constructor": false}, {"identifier": "getInUseHttp2SslContext", "parameters": "(String tag, String host, int port)", "modifiers": "public", "return": "NettyChannelContext", "signature": "NettyChannelContext getInUseHttp2SslContext(String tag, String host, int port)", "full_signature": "public NettyChannelContext getInUseHttp2SslContext(String tag, String host, int port)", "class_method_signature": "NettyHttpServiceClient.getInUseHttp2SslContext(String tag, String host, int port)", "testcase": false, "constructor": false}, {"identifier": "getInUseHttp2Context", "parameters": "(String tag, String host, int port)", "modifiers": "public", "return": "NettyChannelContext", "signature": "NettyChannelContext getInUseHttp2Context(String tag, String host, int port)", "full_signature": "public NettyChannelContext getInUseHttp2Context(String tag, String host, int port)", "class_method_signature": "NettyHttpServiceClient.getInUseHttp2Context(String tag, String host, int port)", "testcase": false, "constructor": false}, {"identifier": "getConnectionPoolMetrics", "parameters": "(boolean http2)", "modifiers": "@Override public", "return": "ConnectionPoolMetrics", "signature": "ConnectionPoolMetrics getConnectionPoolMetrics(boolean http2)", "full_signature": "@Override public ConnectionPoolMetrics getConnectionPoolMetrics(boolean http2)", "class_method_signature": "NettyHttpServiceClient.getConnectionPoolMetrics(boolean http2)", "testcase": false, "constructor": false}, {"identifier": "getPoolMetrics", "parameters": "(NettyChannelPool p1, NettyChannelPool p2)", "modifiers": "private", "return": "ConnectionPoolMetrics", "signature": "ConnectionPoolMetrics getPoolMetrics(NettyChannelPool p1, NettyChannelPool p2)", "full_signature": "private ConnectionPoolMetrics getPoolMetrics(NettyChannelPool p1, NettyChannelPool p2)", "class_method_signature": "NettyHttpServiceClient.getPoolMetrics(NettyChannelPool p1, NettyChannelPool p2)", "testcase": false, "constructor": false}, {"identifier": "getConnectionPoolMetricsPerTag", "parameters": "(String tag)", "modifiers": "@Override public", "return": "ConnectionPoolMetrics", "signature": "ConnectionPoolMetrics getConnectionPoolMetricsPerTag(String tag)", "full_signature": "@Override public ConnectionPoolMetrics getConnectionPoolMetricsPerTag(String tag)", "class_method_signature": "NettyHttpServiceClient.getConnectionPoolMetricsPerTag(String tag)", "testcase": false, "constructor": false}, {"identifier": "getInUseContextCount", "parameters": "(String tag, String host, int port)", "modifiers": "public", "return": "int", "signature": "int getInUseContextCount(String tag, String host, int port)", "full_signature": "public int getInUseContextCount(String tag, String host, int port)", "class_method_signature": "NettyHttpServiceClient.getInUseContextCount(String tag, String host, int port)", "testcase": false, "constructor": false}, {"identifier": "clearCookieJar", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearCookieJar()", "full_signature": "public void clearCookieJar()", "class_method_signature": "NettyHttpServiceClient.clearCookieJar()", "testcase": false, "constructor": false}, {"identifier": "getRequestPayloadSizeLimit", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getRequestPayloadSizeLimit()", "full_signature": "@Override public int getRequestPayloadSizeLimit()", "class_method_signature": "NettyHttpServiceClient.getRequestPayloadSizeLimit()", "testcase": false, "constructor": false}, {"identifier": "setRequestPayloadSizeLimit", "parameters": "(int limit)", "modifiers": "@Override public", "return": "ServiceClient", "signature": "ServiceClient setRequestPayloadSizeLimit(int limit)", "full_signature": "@Override public ServiceClient setRequestPayloadSizeLimit(int limit)", "class_method_signature": "NettyHttpServiceClient.setRequestPayloadSizeLimit(int limit)", "testcase": false, "constructor": false}], "file": "xenon-common/src/main/java/com/vmware/xenon/common/http/netty/NettyHttpServiceClient.java"}, "focal_method": {"identifier": "setConnectionLimitPerTag", "parameters": "(String tag, int limit)", "modifiers": "@Override public", "return": "ServiceClient", "body": "@Override\n    public ServiceClient setConnectionLimitPerTag(String tag, int limit) {\n        this.channelPool.setConnectionLimitPerTag(tag, limit);\n        if (this.sslChannelPool != null) {\n            this.sslChannelPool.setConnectionLimitPerTag(tag, limit);\n        }\n        if (this.http2ChannelPool != null) {\n            this.http2ChannelPool.setConnectionLimitPerTag(tag, limit);\n        }\n        if (this.http2SslChannelPool != null) {\n            this.http2SslChannelPool.setConnectionLimitPerTag(tag, limit);\n        }\n        return this;\n    }", "signature": "ServiceClient setConnectionLimitPerTag(String tag, int limit)", "full_signature": "@Override public ServiceClient setConnectionLimitPerTag(String tag, int limit)", "class_method_signature": "NettyHttpServiceClient.setConnectionLimitPerTag(String tag, int limit)", "testcase": false, "constructor": false, "invocations": ["setConnectionLimitPerTag", "setConnectionLimitPerTag", "setConnectionLimitPerTag", "setConnectionLimitPerTag"]}, "repository": {"repo_id": 45276846, "url": "https://github.com/vmware-archive/xenon", "language": "Java", "is_fork": false, "fork_count": 97, "stargazer_count": 226, "size": 52010, "license": "licensed"}}