{"test_class": {"identifier": "AccessTokenRequestTest", "superclass": "", "interfaces": "", "fields": [], "file": "servers/zts/src/test/java/com/yahoo/athenz/zts/AccessTokenRequestTest.java"}, "test_case": {"identifier": "testAccessTokenRequest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAccessTokenRequest() {\n\n        AccessTokenRequest req1 = new AccessTokenRequest(\"sports:domain\");\n        assertNotNull(req1);\n        assertEquals(\"sports\", req1.getDomainName());\n        assertNull(req1.getRoleNames());\n        assertTrue(req1.sendScopeResponse());\n        assertFalse(req1.isOpenidScope());\n\n        AccessTokenRequest req2 = new AccessTokenRequest(\"openid sports:service.api sports:domain\");\n        assertNotNull(req2);\n        assertEquals(\"sports\", req2.getDomainName());\n        assertNull(req2.getRoleNames());\n        assertTrue(req2.sendScopeResponse());\n        assertTrue(req2.isOpenidScope());\n\n        // due to domain scope the role name one is ignored\n\n        AccessTokenRequest req3 = new AccessTokenRequest(\"openid sports:service.api sports:domain sports:role.role1\");\n        assertNotNull(req3);\n        assertEquals(\"sports\", req3.getDomainName());\n        assertNull(req3.getRoleNames());\n        assertTrue(req3.sendScopeResponse());\n        assertTrue(req3.isOpenidScope());\n\n        AccessTokenRequest req4 = new AccessTokenRequest(\"sports:role.role1\");\n        assertNotNull(req4);\n        assertEquals(\"sports\", req4.getDomainName());\n        assertNotNull(req4.getRoleNames());\n        assertEquals(1, req4.getRoleNames().length);\n        assertEquals(\"role1\", req4.getRoleNames()[0]);\n        assertFalse(req4.sendScopeResponse());\n        assertFalse(req4.isOpenidScope());\n\n        AccessTokenRequest req5 = new AccessTokenRequest(\"sports:role.role1 unknown-scope\");\n        assertNotNull(req5);\n        assertEquals(\"sports\", req5.getDomainName());\n        assertNotNull(req5.getRoleNames());\n        assertEquals(1, req5.getRoleNames().length);\n        assertEquals(\"role1\", req5.getRoleNames()[0]);\n        assertFalse(req5.sendScopeResponse());\n        assertFalse(req5.isOpenidScope());\n\n        AccessTokenRequest req6 = new AccessTokenRequest(\"sports:role.role1 sports:role.role2\");\n        assertNotNull(req6);\n        assertEquals(\"sports\", req6.getDomainName());\n        assertNotNull(req6.getRoleNames());\n        assertEquals(2, req6.getRoleNames().length);\n        assertEquals(\"role1\", req6.getRoleNames()[0]);\n        assertEquals(\"role2\", req6.getRoleNames()[1]);\n        assertFalse(req6.sendScopeResponse());\n        assertFalse(req6.isOpenidScope());\n    }", "signature": "void testAccessTokenRequest()", "full_signature": "@Test public void testAccessTokenRequest()", "class_method_signature": "AccessTokenRequestTest.testAccessTokenRequest()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "assertEquals", "getDomainName", "assertNull", "getRoleNames", "assertTrue", "sendScopeResponse", "assertFalse", "isOpenidScope", "assertNotNull", "assertEquals", "getDomainName", "assertNull", "getRoleNames", "assertTrue", "sendScopeResponse", "assertTrue", "isOpenidScope", "assertNotNull", "assertEquals", "getDomainName", "assertNull", "getRoleNames", "assertTrue", "sendScopeResponse", "assertTrue", "isOpenidScope", "assertNotNull", "assertEquals", "getDomainName", "assertNotNull", "getRoleNames", "assertEquals", "getRoleNames", "assertEquals", "getRoleNames", "assertFalse", "sendScopeResponse", "assertFalse", "isOpenidScope", "assertNotNull", "assertEquals", "getDomainName", "assertNotNull", "getRoleNames", "assertEquals", "getRoleNames", "assertEquals", "getRoleNames", "assertFalse", "sendScopeResponse", "assertFalse", "isOpenidScope", "assertNotNull", "assertEquals", "getDomainName", "assertNotNull", "getRoleNames", "assertEquals", "getRoleNames", "assertEquals", "getRoleNames", "assertEquals", "getRoleNames", "assertFalse", "sendScopeResponse", "assertFalse", "isOpenidScope"]}, "focal_class": {"identifier": "AccessTokenRequest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(AccessTokenRequest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(AccessTokenRequest.class)", "var_name": "LOGGER"}, {"original_string": "private static boolean supportOpenidScope = Boolean.parseBoolean(\n            System.getProperty(ZTSConsts.ZTS_PROP_OAUTH_OPENID_SCOPE, \"false\"));", "modifier": "private static", "type": "boolean", "declarator": "supportOpenidScope = Boolean.parseBoolean(\n            System.getProperty(ZTSConsts.ZTS_PROP_OAUTH_OPENID_SCOPE, \"false\"))", "var_name": "supportOpenidScope"}, {"original_string": "public static String OBJECT_DOMAIN  = \":domain\";", "modifier": "public static", "type": "String", "declarator": "OBJECT_DOMAIN  = \":domain\"", "var_name": "OBJECT_DOMAIN"}, {"original_string": "public static String OBJECT_ROLE    = \":role.\";", "modifier": "public static", "type": "String", "declarator": "OBJECT_ROLE    = \":role.\"", "var_name": "OBJECT_ROLE"}, {"original_string": "public static String OBJECT_SERVICE = \":service.\";", "modifier": "public static", "type": "String", "declarator": "OBJECT_SERVICE = \":service.\"", "var_name": "OBJECT_SERVICE"}, {"original_string": "public static String OBJECT_OPENID  = \"openid\";", "modifier": "public static", "type": "String", "declarator": "OBJECT_OPENID  = \"openid\"", "var_name": "OBJECT_OPENID"}, {"original_string": "String domainName = null;", "modifier": "", "type": "String", "declarator": "domainName = null", "var_name": "domainName"}, {"original_string": "String serviceName = null;", "modifier": "", "type": "String", "declarator": "serviceName = null", "var_name": "serviceName"}, {"original_string": "Set<String> roleNames;", "modifier": "", "type": "Set<String>", "declarator": "roleNames", "var_name": "roleNames"}, {"original_string": "boolean sendScopeResponse = false;", "modifier": "", "type": "boolean", "declarator": "sendScopeResponse = false", "var_name": "sendScopeResponse"}, {"original_string": "boolean openidScope = false;", "modifier": "", "type": "boolean", "declarator": "openidScope = false", "var_name": "openidScope"}], "methods": [{"identifier": "AccessTokenRequest", "parameters": "(final String scope)", "modifiers": "public", "return": "", "signature": " AccessTokenRequest(final String scope)", "full_signature": "public  AccessTokenRequest(final String scope)", "class_method_signature": "AccessTokenRequest.AccessTokenRequest(final String scope)", "testcase": false, "constructor": true}, {"identifier": "getDomainName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDomainName()", "full_signature": "public String getDomainName()", "class_method_signature": "AccessTokenRequest.getDomainName()", "testcase": false, "constructor": false}, {"identifier": "getServiceName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getServiceName()", "full_signature": "public String getServiceName()", "class_method_signature": "AccessTokenRequest.getServiceName()", "testcase": false, "constructor": false}, {"identifier": "getRoleNames", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] getRoleNames()", "full_signature": "public String[] getRoleNames()", "class_method_signature": "AccessTokenRequest.getRoleNames()", "testcase": false, "constructor": false}, {"identifier": "sendScopeResponse", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean sendScopeResponse()", "full_signature": "public boolean sendScopeResponse()", "class_method_signature": "AccessTokenRequest.sendScopeResponse()", "testcase": false, "constructor": false}, {"identifier": "isOpenidScope", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isOpenidScope()", "full_signature": "public boolean isOpenidScope()", "class_method_signature": "AccessTokenRequest.isOpenidScope()", "testcase": false, "constructor": false}, {"identifier": "setSupportOpenidScope", "parameters": "(boolean value)", "modifiers": "public static", "return": "void", "signature": "void setSupportOpenidScope(boolean value)", "full_signature": "public static void setSupportOpenidScope(boolean value)", "class_method_signature": "AccessTokenRequest.setSupportOpenidScope(boolean value)", "testcase": false, "constructor": false}, {"identifier": "error", "parameters": "(final String message, final String scope)", "modifiers": "", "return": "ResourceException", "signature": "ResourceException error(final String message, final String scope)", "full_signature": " ResourceException error(final String message, final String scope)", "class_method_signature": "AccessTokenRequest.error(final String message, final String scope)", "testcase": false, "constructor": false}], "file": "servers/zts/src/main/java/com/yahoo/athenz/zts/AccessTokenRequest.java"}, "focal_method": {"identifier": "AccessTokenRequest", "parameters": "(final String scope)", "modifiers": "public", "return": "", "body": "public AccessTokenRequest(final String scope) {\n\n        final String[] scopeList = scope.split(\" \");\n\n        // the format of our scopes for role access token are:\n        // <domainName>:domain\n        // <domainName>:role.<roleName>\n        // the format of our scopes for openid are:\n        // openid <domainName>:service.<serviceName>\n\n        Set<String> scopeRoleNames = new HashSet<>();\n        for (String scopeItem : scopeList) {\n\n            // first check if we haven an openid scope requested\n\n            if (OBJECT_OPENID.equalsIgnoreCase(scopeItem)) {\n                openidScope = true;\n                continue;\n            }\n\n            // next check if we have a service scope required by openid\n\n            int idx = scopeItem.indexOf(OBJECT_SERVICE);\n            if (idx != -1) {\n                final String scopeDomainName = scopeItem.substring(0, idx);\n                if (domainName != null && !scopeDomainName.equals(domainName)) {\n                    throw error(\"Multiple domains in scope\", scope);\n                }\n                final String scopeServiceName = scopeItem.substring(idx + OBJECT_SERVICE.length());\n                if (serviceName != null && !scopeServiceName.equals(serviceName)) {\n                    throw error(\"Multiple services in scope\", scope);\n                }\n                domainName = scopeDomainName;\n                serviceName = scopeServiceName;\n                continue;\n            }\n\n            // next check if we have a domain scope\n\n            if (scopeItem.endsWith(OBJECT_DOMAIN)) {\n                final String scopeDomainName = scopeItem.substring(0, scopeItem.length() - OBJECT_DOMAIN.length());\n                if (domainName != null && !scopeDomainName.equals(domainName)) {\n                    throw error(\"Multiple domains in scope\", scope);\n                }\n                domainName = scopeDomainName;\n                sendScopeResponse = true;\n                continue;\n            }\n\n            // finally check if we have a role scope\n\n            idx = scopeItem.indexOf(OBJECT_ROLE);\n            if (idx != -1) {\n                final String scopeDomainName = scopeItem.substring(0, idx);\n                if (domainName != null && !scopeDomainName.equals(domainName)) {\n                    throw error(\"Multiple domains in scope\", scope);\n                }\n                domainName = scopeDomainName;\n                scopeRoleNames.add(scopeItem.substring(idx + OBJECT_ROLE.length()));\n                continue;\n            }\n\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(\"Skipping unknown scope {}\", scopeItem);\n            }\n        }\n\n        // if we don't have a domain then it's invalid scope\n\n        if (domainName == null || domainName.isEmpty()) {\n            throw error(\"No domains in scope\", scope);\n        }\n\n        // if the scope response is set to true then we had\n        // an explicit request for all roles in the domain\n        // so we're going to ignore the role names requested\n\n        if (!sendScopeResponse && !scopeRoleNames.isEmpty()) {\n            roleNames = scopeRoleNames;\n        }\n\n        // for openid scope we must have the openid scope\n        // along with the service name since the audience\n        // must be set for that service only\n\n        if (openidScope && (serviceName == null || serviceName.isEmpty())) {\n            throw error(\"No audience service name for openid scope\", scope);\n        }\n    }", "signature": " AccessTokenRequest(final String scope)", "full_signature": "public  AccessTokenRequest(final String scope)", "class_method_signature": "AccessTokenRequest.AccessTokenRequest(final String scope)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}