{"test_class": {"identifier": "RpcUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/support/RpcUtilsTest.java"}, "test_case": {"identifier": "testGetReturnTypes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetReturnTypes() throws Exception {\n        Class<?> demoServiceClass = DemoService.class;\n        String serviceName = demoServiceClass.getName();\n        Invoker invoker = mock(Invoker.class);\n        given(invoker.getUrl()).willReturn(URL.valueOf(\"test://127.0.0.1:1/org.apache.dubbo.rpc.support.DemoService?interface=org.apache.dubbo.rpc.support.DemoService\"));\n\n        RpcInvocation inv = new RpcInvocation(\"testReturnType\", serviceName, \"\", new Class<?>[]{String.class}, null, null, invoker, null);\n        Type[] types = RpcUtils.getReturnTypes(inv);\n        Assertions.assertNotNull(types);\n        Assertions.assertEquals(2, types.length);\n        Assertions.assertEquals(String.class, types[0]);\n        Assertions.assertEquals(String.class, types[1]);\n        Assertions.assertArrayEquals(types, inv.getReturnTypes());\n\n        RpcInvocation inv1 = new RpcInvocation(\"testReturnType1\", serviceName, \"\", new Class<?>[]{String.class}, null, null, invoker, null);\n        java.lang.reflect.Type[] types1 = RpcUtils.getReturnTypes(inv1);\n        Assertions.assertNotNull(types1);\n        Assertions.assertEquals(2, types1.length);\n        Assertions.assertEquals(List.class, types1[0]);\n        Assertions.assertEquals(demoServiceClass.getMethod(\"testReturnType1\", String.class).getGenericReturnType(), types1[1]);\n        Assertions.assertArrayEquals(types1, inv1.getReturnTypes());\n\n        RpcInvocation inv2 = new RpcInvocation(\"testReturnType2\", serviceName, \"\", new Class<?>[]{String.class}, null, null, invoker, null);\n        java.lang.reflect.Type[] types2 = RpcUtils.getReturnTypes(inv2);\n        Assertions.assertNotNull(types2);\n        Assertions.assertEquals(2, types2.length);\n        Assertions.assertEquals(String.class, types2[0]);\n        Assertions.assertEquals(String.class, types2[1]);\n        Assertions.assertArrayEquals(types2, inv2.getReturnTypes());\n\n        RpcInvocation inv3 = new RpcInvocation(\"testReturnType3\", serviceName, \"\", new Class<?>[]{String.class}, null, null, invoker, null);\n        java.lang.reflect.Type[] types3 = RpcUtils.getReturnTypes(inv3);\n        Assertions.assertNotNull(types3);\n        Assertions.assertEquals(2, types3.length);\n        Assertions.assertEquals(List.class, types3[0]);\n        java.lang.reflect.Type genericReturnType3 = demoServiceClass.getMethod(\"testReturnType3\", String.class).getGenericReturnType();\n        Assertions.assertEquals(((ParameterizedType) genericReturnType3).getActualTypeArguments()[0], types3[1]);\n        Assertions.assertArrayEquals(types3, inv3.getReturnTypes());\n\n        RpcInvocation inv4 = new RpcInvocation(\"testReturnType4\", serviceName, \"\", new Class<?>[]{String.class}, null, null, invoker, null);\n        java.lang.reflect.Type[] types4 = RpcUtils.getReturnTypes(inv4);\n        Assertions.assertNotNull(types4);\n        Assertions.assertEquals(2, types4.length);\n        Assertions.assertNull(types4[0]);\n        Assertions.assertNull(types4[1]);\n        Assertions.assertArrayEquals(types4, inv4.getReturnTypes());\n\n        RpcInvocation inv5 = new RpcInvocation(\"testReturnType5\", serviceName, \"\", new Class<?>[]{String.class}, null, null, invoker, null);\n        java.lang.reflect.Type[] types5 = RpcUtils.getReturnTypes(inv5);\n        Assertions.assertNotNull(types5);\n        Assertions.assertEquals(2, types5.length);\n        Assertions.assertEquals(Map.class, types5[0]);\n        java.lang.reflect.Type genericReturnType5 = demoServiceClass.getMethod(\"testReturnType5\", String.class).getGenericReturnType();\n        Assertions.assertEquals(((ParameterizedType) genericReturnType5).getActualTypeArguments()[0], types5[1]);\n        Assertions.assertArrayEquals(types5, inv5.getReturnTypes());\n    }", "signature": "void testGetReturnTypes()", "full_signature": "@Test public void testGetReturnTypes()", "class_method_signature": "RpcUtilsTest.testGetReturnTypes()", "testcase": true, "constructor": false, "invocations": ["getName", "mock", "willReturn", "given", "getUrl", "valueOf", "getReturnTypes", "assertNotNull", "assertEquals", "assertEquals", "assertEquals", "assertArrayEquals", "getReturnTypes", "getReturnTypes", "assertNotNull", "assertEquals", "assertEquals", "assertEquals", "getGenericReturnType", "getMethod", "assertArrayEquals", "getReturnTypes", "getReturnTypes", "assertNotNull", "assertEquals", "assertEquals", "assertEquals", "assertArrayEquals", "getReturnTypes", "getReturnTypes", "assertNotNull", "assertEquals", "assertEquals", "getGenericReturnType", "getMethod", "assertEquals", "getActualTypeArguments", "assertArrayEquals", "getReturnTypes", "getReturnTypes", "assertNotNull", "assertEquals", "assertNull", "assertNull", "assertArrayEquals", "getReturnTypes", "getReturnTypes", "assertNotNull", "assertEquals", "assertEquals", "getGenericReturnType", "getMethod", "assertEquals", "getActualTypeArguments", "assertArrayEquals", "getReturnTypes"]}, "focal_class": {"identifier": "RpcUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(RpcUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(RpcUtils.class)", "var_name": "logger"}, {"original_string": "private static final AtomicLong INVOKE_ID = new AtomicLong(0);", "modifier": "private static final", "type": "AtomicLong", "declarator": "INVOKE_ID = new AtomicLong(0)", "var_name": "INVOKE_ID"}], "methods": [{"identifier": "getReturnType", "parameters": "(Invocation invocation)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getReturnType(Invocation invocation)", "full_signature": "public static Class<?> getReturnType(Invocation invocation)", "class_method_signature": "RpcUtils.getReturnType(Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "getReturnTypes", "parameters": "(Invocation invocation)", "modifiers": "public static", "return": "Type[]", "signature": "Type[] getReturnTypes(Invocation invocation)", "full_signature": "public static Type[] getReturnTypes(Invocation invocation)", "class_method_signature": "RpcUtils.getReturnTypes(Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "getInvocationId", "parameters": "(Invocation inv)", "modifiers": "public static", "return": "Long", "signature": "Long getInvocationId(Invocation inv)", "full_signature": "public static Long getInvocationId(Invocation inv)", "class_method_signature": "RpcUtils.getInvocationId(Invocation inv)", "testcase": false, "constructor": false}, {"identifier": "attachInvocationIdIfAsync", "parameters": "(URL url, Invocation inv)", "modifiers": "public static", "return": "void", "signature": "void attachInvocationIdIfAsync(URL url, Invocation inv)", "full_signature": "public static void attachInvocationIdIfAsync(URL url, Invocation inv)", "class_method_signature": "RpcUtils.attachInvocationIdIfAsync(URL url, Invocation inv)", "testcase": false, "constructor": false}, {"identifier": "isAttachInvocationId", "parameters": "(URL url, Invocation invocation)", "modifiers": "private static", "return": "boolean", "signature": "boolean isAttachInvocationId(URL url, Invocation invocation)", "full_signature": "private static boolean isAttachInvocationId(URL url, Invocation invocation)", "class_method_signature": "RpcUtils.isAttachInvocationId(URL url, Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "getMethodName", "parameters": "(Invocation invocation)", "modifiers": "public static", "return": "String", "signature": "String getMethodName(Invocation invocation)", "full_signature": "public static String getMethodName(Invocation invocation)", "class_method_signature": "RpcUtils.getMethodName(Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "getArguments", "parameters": "(Invocation invocation)", "modifiers": "public static", "return": "Object[]", "signature": "Object[] getArguments(Invocation invocation)", "full_signature": "public static Object[] getArguments(Invocation invocation)", "class_method_signature": "RpcUtils.getArguments(Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "getParameterTypes", "parameters": "(Invocation invocation)", "modifiers": "public static", "return": "Class<?>[]", "signature": "Class<?>[] getParameterTypes(Invocation invocation)", "full_signature": "public static Class<?>[] getParameterTypes(Invocation invocation)", "class_method_signature": "RpcUtils.getParameterTypes(Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "isAsync", "parameters": "(URL url, Invocation inv)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAsync(URL url, Invocation inv)", "full_signature": "public static boolean isAsync(URL url, Invocation inv)", "class_method_signature": "RpcUtils.isAsync(URL url, Invocation inv)", "testcase": false, "constructor": false}, {"identifier": "isReturnTypeFuture", "parameters": "(Invocation inv)", "modifiers": "public static", "return": "boolean", "signature": "boolean isReturnTypeFuture(Invocation inv)", "full_signature": "public static boolean isReturnTypeFuture(Invocation inv)", "class_method_signature": "RpcUtils.isReturnTypeFuture(Invocation inv)", "testcase": false, "constructor": false}, {"identifier": "isGenericAsync", "parameters": "(Invocation inv)", "modifiers": "public static", "return": "boolean", "signature": "boolean isGenericAsync(Invocation inv)", "full_signature": "public static boolean isGenericAsync(Invocation inv)", "class_method_signature": "RpcUtils.isGenericAsync(Invocation inv)", "testcase": false, "constructor": false}, {"identifier": "isGenericCall", "parameters": "(String parameterTypesDesc, String method)", "modifiers": "public static", "return": "boolean", "signature": "boolean isGenericCall(String parameterTypesDesc, String method)", "full_signature": "public static boolean isGenericCall(String parameterTypesDesc, String method)", "class_method_signature": "RpcUtils.isGenericCall(String parameterTypesDesc, String method)", "testcase": false, "constructor": false}, {"identifier": "isEcho", "parameters": "(String parameterTypesDesc, String method)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEcho(String parameterTypesDesc, String method)", "full_signature": "public static boolean isEcho(String parameterTypesDesc, String method)", "class_method_signature": "RpcUtils.isEcho(String parameterTypesDesc, String method)", "testcase": false, "constructor": false}, {"identifier": "getInvokeMode", "parameters": "(URL url, Invocation inv)", "modifiers": "public static", "return": "InvokeMode", "signature": "InvokeMode getInvokeMode(URL url, Invocation inv)", "full_signature": "public static InvokeMode getInvokeMode(URL url, Invocation inv)", "class_method_signature": "RpcUtils.getInvokeMode(URL url, Invocation inv)", "testcase": false, "constructor": false}, {"identifier": "isOneway", "parameters": "(URL url, Invocation inv)", "modifiers": "public static", "return": "boolean", "signature": "boolean isOneway(URL url, Invocation inv)", "full_signature": "public static boolean isOneway(URL url, Invocation inv)", "class_method_signature": "RpcUtils.isOneway(URL url, Invocation inv)", "testcase": false, "constructor": false}, {"identifier": "getMethodByService", "parameters": "(Invocation invocation, String service)", "modifiers": "private static", "return": "Method", "signature": "Method getMethodByService(Invocation invocation, String service)", "full_signature": "private static Method getMethodByService(Invocation invocation, String service)", "class_method_signature": "RpcUtils.getMethodByService(Invocation invocation, String service)", "testcase": false, "constructor": false}, {"identifier": "getTimeout", "parameters": "(Invocation invocation, long defaultTimeout)", "modifiers": "public static", "return": "long", "signature": "long getTimeout(Invocation invocation, long defaultTimeout)", "full_signature": "public static long getTimeout(Invocation invocation, long defaultTimeout)", "class_method_signature": "RpcUtils.getTimeout(Invocation invocation, long defaultTimeout)", "testcase": false, "constructor": false}, {"identifier": "getTimeout", "parameters": "(URL url, String methodName, RpcContext context, long defaultTimeout)", "modifiers": "public static", "return": "long", "signature": "long getTimeout(URL url, String methodName, RpcContext context, long defaultTimeout)", "full_signature": "public static long getTimeout(URL url, String methodName, RpcContext context, long defaultTimeout)", "class_method_signature": "RpcUtils.getTimeout(URL url, String methodName, RpcContext context, long defaultTimeout)", "testcase": false, "constructor": false}, {"identifier": "convertToNumber", "parameters": "(Object obj, long defaultTimeout)", "modifiers": "private static", "return": "long", "signature": "long convertToNumber(Object obj, long defaultTimeout)", "full_signature": "private static long convertToNumber(Object obj, long defaultTimeout)", "class_method_signature": "RpcUtils.convertToNumber(Object obj, long defaultTimeout)", "testcase": false, "constructor": false}], "file": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/support/RpcUtils.java"}, "focal_method": {"identifier": "getReturnTypes", "parameters": "(Invocation invocation)", "modifiers": "public static", "return": "Type[]", "body": "public static Type[] getReturnTypes(Invocation invocation) {\n        try {\n            if (invocation != null && invocation.getInvoker() != null\n                    && invocation.getInvoker().getUrl() != null\n                    && invocation.getInvoker().getInterface() != GenericService.class\n                    && !invocation.getMethodName().startsWith(\"$\")) {\n                String service = invocation.getInvoker().getUrl().getServiceInterface();\n                if (StringUtils.isNotEmpty(service)) {\n                    Method method = getMethodByService(invocation, service);\n                    return ReflectUtils.getReturnTypes(method);\n                }\n            }\n        } catch (Throwable t) {\n            logger.warn(t.getMessage(), t);\n        }\n        return null;\n    }", "signature": "Type[] getReturnTypes(Invocation invocation)", "full_signature": "public static Type[] getReturnTypes(Invocation invocation)", "class_method_signature": "RpcUtils.getReturnTypes(Invocation invocation)", "testcase": false, "constructor": false, "invocations": ["getInvoker", "getUrl", "getInvoker", "getInterface", "getInvoker", "startsWith", "getMethodName", "getServiceInterface", "getUrl", "getInvoker", "isNotEmpty", "getMethodByService", "getReturnTypes", "warn", "getMessage"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}