{"test_class": {"identifier": "BoundBufferCodecFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private AnnotatedElement metadata;", "modifier": "@Mock\n    private", "type": "AnnotatedElement", "declarator": "metadata", "var_name": "metadata"}, {"original_string": "@Mock\n    private BoundBuffer boundBuffer;", "modifier": "@Mock\n    private", "type": "BoundBuffer", "declarator": "boundBuffer", "var_name": "boundBuffer"}, {"original_string": "private BoundBufferCodecFactory factory;", "modifier": "private", "type": "BoundBufferCodecFactory", "declarator": "factory", "var_name": "factory"}], "file": "preon-binding/src/test/java/org/codehaus/preon/codec/BoundBufferCodecFactoryTest.java"}, "test_case": {"identifier": "encodedBufferShouldEqualMatchBuffer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void encodedBufferShouldEqualMatchBuffer() throws IOException {\n        byte[] match = { 1, 2, 3, 4 };\n\n        when(metadata.isAnnotationPresent(BoundBuffer.class)).thenReturn(true);\n        when(metadata.getAnnotation(BoundBuffer.class)).thenReturn(boundBuffer);\n        when(boundBuffer.match()).thenReturn(match);\n\n        Codec<byte[]> codec = factory.create(metadata, byte[].class, null);\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        codec.encode(match, new OutputStreamBitChannel(out), null);\n\n        byte[] output = out.toByteArray();\n        assertThat(output.length, is(match.length));\n        assertArrayEquals(match, output);\n    }", "signature": "void encodedBufferShouldEqualMatchBuffer()", "full_signature": "@Test public void encodedBufferShouldEqualMatchBuffer()", "class_method_signature": "BoundBufferCodecFactoryTest.encodedBufferShouldEqualMatchBuffer()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "isAnnotationPresent", "thenReturn", "when", "getAnnotation", "thenReturn", "when", "match", "create", "encode", "toByteArray", "assertThat", "is", "assertArrayEquals"]}, "focal_class": {"identifier": "BoundBufferCodecFactory", "superclass": "", "interfaces": "implements CodecFactory", "fields": [{"original_string": "private Class<?> BYTE_CLASS = (new byte[0]).getClass();", "modifier": "private", "type": "Class<?>", "declarator": "BYTE_CLASS = (new byte[0]).getClass()", "var_name": "BYTE_CLASS"}], "methods": [{"identifier": "create", "parameters": "(AnnotatedElement metadata, Class<T> type,\n                               ResolverContext context)", "modifiers": "public", "return": "Codec<T>", "signature": "Codec<T> create(AnnotatedElement metadata, Class<T> type,\n                               ResolverContext context)", "full_signature": "public Codec<T> create(AnnotatedElement metadata, Class<T> type,\n                               ResolverContext context)", "class_method_signature": "BoundBufferCodecFactory.create(AnnotatedElement metadata, Class<T> type,\n                               ResolverContext context)", "testcase": false, "constructor": false}], "file": "preon-binding/src/main/java/org/codehaus/preon/codec/BoundBufferCodecFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(AnnotatedElement metadata, Class<T> type,\n                               ResolverContext context)", "modifiers": "public", "return": "Codec<T>", "body": "public <T> Codec<T> create(AnnotatedElement metadata, Class<T> type,\n                               ResolverContext context) {\n        if (type.isArray() && BYTE_CLASS.equals(type)\n                && metadata.isAnnotationPresent(BoundBuffer.class)) {\n            return (Codec<T>) new BoundBufferCodec(metadata.getAnnotation(\n                    BoundBuffer.class).match());\n        } else {\n            return null;\n        }\n    }", "signature": "Codec<T> create(AnnotatedElement metadata, Class<T> type,\n                               ResolverContext context)", "full_signature": "public Codec<T> create(AnnotatedElement metadata, Class<T> type,\n                               ResolverContext context)", "class_method_signature": "BoundBufferCodecFactory.create(AnnotatedElement metadata, Class<T> type,\n                               ResolverContext context)", "testcase": false, "constructor": false, "invocations": ["isArray", "equals", "isAnnotationPresent", "match", "getAnnotation"]}, "repository": {"repo_id": 854893, "url": "https://github.com/preon/preon", "language": "Java", "is_fork": false, "fork_count": 78, "stargazer_count": 155, "size": 2459, "license": "licensed"}}