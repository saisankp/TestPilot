{"test_class": {"identifier": "WebCommandDispatcherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private WebCommandDispatcher testee;", "modifier": "private", "type": "WebCommandDispatcher", "declarator": "testee", "var_name": "testee"}, {"original_string": "@Mock\n\tprivate WebCommandBuilder builder;", "modifier": "@Mock\n\tprivate", "type": "WebCommandBuilder", "declarator": "builder", "var_name": "builder"}, {"original_string": "@Mock\n\tprivate CommandExecutorGateway gateway;", "modifier": "@Mock\n\tprivate", "type": "CommandExecutorGateway", "declarator": "gateway", "var_name": "gateway"}], "file": "nimbus-core/src/test/java/com/antheminc/oss/nimbus/channel/web/WebCommandDispatcherTest.java"}, "test_case": {"identifier": "testHandleViaEventPayload", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testHandleViaEventPayload() {\n\t\tfinal MockHttpServletRequest request = new MockHttpServletRequest();\n\t\tfinal ModelEvent<String> event = new ModelEvent<>();\n\t\tevent.setPayload(\"{}\");\n\t\t\n\t\tfinal String commandUri = \"/Acme/abc/def/p/home/_new&execute\";\n\t\tfinal Command expectedCommand = CommandBuilder.withUri(commandUri).getCommand();\n\t\tfinal MultiOutput expected = new MultiOutput(commandUri, new ExecutionContext(expectedCommand), Action._new, Behavior.$execute);\n\t\t\n\t\tMockito.when(this.builder.build(request, event)).thenReturn(expectedCommand);\n\t\tMockito.when(this.gateway.execute(expectedCommand, event.getPayload())).thenReturn(expected);\n\t\tfinal Object actual = this.testee.handle(request, event);\n\t\tMockito.verify(this.builder, Mockito.only()).build(request, event);\n\t\tMockito.verify(this.gateway, Mockito.times(1)).execute(expectedCommand, event.getPayload());\n\t\t\n\t\tAssert.assertEquals(expected, actual);\n\t}", "signature": "void testHandleViaEventPayload()", "full_signature": "@Test public void testHandleViaEventPayload()", "class_method_signature": "WebCommandDispatcherTest.testHandleViaEventPayload()", "testcase": true, "constructor": false, "invocations": ["setPayload", "getCommand", "withUri", "thenReturn", "when", "build", "thenReturn", "when", "execute", "getPayload", "handle", "build", "verify", "only", "execute", "verify", "times", "getPayload", "assertEquals"]}, "focal_class": {"identifier": "WebCommandDispatcher", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final WebCommandBuilder builder;", "modifier": "private final", "type": "WebCommandBuilder", "declarator": "builder", "var_name": "builder"}, {"original_string": "private final CommandExecutorGateway gateway;", "modifier": "private final", "type": "CommandExecutorGateway", "declarator": "gateway", "var_name": "gateway"}], "methods": [{"identifier": "WebCommandDispatcher", "parameters": "(BeanResolverStrategy beanResolver)", "modifiers": "public", "return": "", "signature": " WebCommandDispatcher(BeanResolverStrategy beanResolver)", "full_signature": "public  WebCommandDispatcher(BeanResolverStrategy beanResolver)", "class_method_signature": "WebCommandDispatcher.WebCommandDispatcher(BeanResolverStrategy beanResolver)", "testcase": false, "constructor": true}, {"identifier": "handle", "parameters": "(HttpServletRequest httpReq, ModelEvent<String> event)", "modifiers": "public", "return": "Object", "signature": "Object handle(HttpServletRequest httpReq, ModelEvent<String> event)", "full_signature": "public Object handle(HttpServletRequest httpReq, ModelEvent<String> event)", "class_method_signature": "WebCommandDispatcher.handle(HttpServletRequest httpReq, ModelEvent<String> event)", "testcase": false, "constructor": false}, {"identifier": "handle", "parameters": "(HttpServletRequest httpReq, String json)", "modifiers": "public", "return": "Object", "signature": "Object handle(HttpServletRequest httpReq, String json)", "full_signature": "public Object handle(HttpServletRequest httpReq, String json)", "class_method_signature": "WebCommandDispatcher.handle(HttpServletRequest httpReq, String json)", "testcase": false, "constructor": false}, {"identifier": "handle", "parameters": "(Command cmd, String payload)", "modifiers": "public", "return": "MultiOutput", "signature": "MultiOutput handle(Command cmd, String payload)", "full_signature": "public MultiOutput handle(Command cmd, String payload)", "class_method_signature": "WebCommandDispatcher.handle(Command cmd, String payload)", "testcase": false, "constructor": false}], "file": "nimbus-core/src/main/java/com/antheminc/oss/nimbus/channel/web/WebCommandDispatcher.java"}, "focal_method": {"identifier": "handle", "parameters": "(HttpServletRequest httpReq, ModelEvent<String> event)", "modifiers": "public", "return": "Object", "body": "public Object handle(HttpServletRequest httpReq, ModelEvent<String> event) {\n\t\tCommand cmd = getBuilder().build(httpReq, event);\n\t\treturn handle(cmd, event.getPayload());\n\t}", "signature": "Object handle(HttpServletRequest httpReq, ModelEvent<String> event)", "full_signature": "public Object handle(HttpServletRequest httpReq, ModelEvent<String> event)", "class_method_signature": "WebCommandDispatcher.handle(HttpServletRequest httpReq, ModelEvent<String> event)", "testcase": false, "constructor": false, "invocations": ["build", "getBuilder", "handle", "getPayload"]}, "repository": {"repo_id": 96120606, "url": "https://github.com/openanthem/nimbus-core", "language": "Java", "is_fork": false, "fork_count": 48, "stargazer_count": 9, "size": 55787, "license": "licensed"}}