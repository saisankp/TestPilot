{"test_class": {"identifier": "AccessControlManagerFacadeTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/net/adamcin/oakpal/core/jcrfacade/security/AccessControlManagerFacadeTest.java"}, "test_case": {"identifier": "testHasPrivileges", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHasPrivileges() throws Exception {\n        AccessControlManager delegate = mock(AccessControlManager.class);\n        AccessControlManagerFacade<AccessControlManager> facade = getFacade(delegate);\n        final Privilege[] value = new Privilege[0];\n        final String path = \"/correct/path\";\n        when(delegate.hasPrivileges(path, value)).thenReturn(true);\n        assertTrue(\"is true\", facade.hasPrivileges(path, value));\n    }", "signature": "void testHasPrivileges()", "full_signature": "@Test public void testHasPrivileges()", "class_method_signature": "AccessControlManagerFacadeTest.testHasPrivileges()", "testcase": true, "constructor": false, "invocations": ["mock", "getFacade", "thenReturn", "when", "hasPrivileges", "assertTrue", "hasPrivileges"]}, "focal_class": {"identifier": "AccessControlManagerFacade", "superclass": "", "interfaces": "implements AccessControlManager", "fields": [{"original_string": "protected final @NotNull M delegate;", "modifier": "protected final @NotNull", "type": "M", "declarator": "delegate", "var_name": "delegate"}], "methods": [{"identifier": "AccessControlManagerFacade", "parameters": "(final @NotNull M delegate)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public", "return": "", "signature": " AccessControlManagerFacade(final @NotNull M delegate)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public  AccessControlManagerFacade(final @NotNull M delegate)", "class_method_signature": "AccessControlManagerFacade.AccessControlManagerFacade(final @NotNull M delegate)", "testcase": false, "constructor": true}, {"identifier": "findBestWrapper", "parameters": "(final @Nullable AccessControlManager manager)", "modifiers": "public static @Nullable", "return": "AccessControlManager", "signature": "AccessControlManager findBestWrapper(final @Nullable AccessControlManager manager)", "full_signature": "public static @Nullable AccessControlManager findBestWrapper(final @Nullable AccessControlManager manager)", "class_method_signature": "AccessControlManagerFacade.findBestWrapper(final @Nullable AccessControlManager manager)", "testcase": false, "constructor": false}, {"identifier": "getSupportedPrivileges", "parameters": "(String absPath)", "modifiers": "@Override public final", "return": "Privilege[]", "signature": "Privilege[] getSupportedPrivileges(String absPath)", "full_signature": "@Override public final Privilege[] getSupportedPrivileges(String absPath)", "class_method_signature": "AccessControlManagerFacade.getSupportedPrivileges(String absPath)", "testcase": false, "constructor": false}, {"identifier": "privilegeFromName", "parameters": "(String privilegeName)", "modifiers": "@Override public final", "return": "Privilege", "signature": "Privilege privilegeFromName(String privilegeName)", "full_signature": "@Override public final Privilege privilegeFromName(String privilegeName)", "class_method_signature": "AccessControlManagerFacade.privilegeFromName(String privilegeName)", "testcase": false, "constructor": false}, {"identifier": "hasPrivileges", "parameters": "(String absPath, Privilege[] privileges)", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean hasPrivileges(String absPath, Privilege[] privileges)", "full_signature": "@Override public final boolean hasPrivileges(String absPath, Privilege[] privileges)", "class_method_signature": "AccessControlManagerFacade.hasPrivileges(String absPath, Privilege[] privileges)", "testcase": false, "constructor": false}, {"identifier": "getPrivileges", "parameters": "(String absPath)", "modifiers": "@Override public final", "return": "Privilege[]", "signature": "Privilege[] getPrivileges(String absPath)", "full_signature": "@Override public final Privilege[] getPrivileges(String absPath)", "class_method_signature": "AccessControlManagerFacade.getPrivileges(String absPath)", "testcase": false, "constructor": false}, {"identifier": "getPolicies", "parameters": "(String absPath)", "modifiers": "@Override public final", "return": "AccessControlPolicy[]", "signature": "AccessControlPolicy[] getPolicies(String absPath)", "full_signature": "@Override public final AccessControlPolicy[] getPolicies(String absPath)", "class_method_signature": "AccessControlManagerFacade.getPolicies(String absPath)", "testcase": false, "constructor": false}, {"identifier": "getEffectivePolicies", "parameters": "(String absPath)", "modifiers": "@Override public final", "return": "AccessControlPolicy[]", "signature": "AccessControlPolicy[] getEffectivePolicies(String absPath)", "full_signature": "@Override public final AccessControlPolicy[] getEffectivePolicies(String absPath)", "class_method_signature": "AccessControlManagerFacade.getEffectivePolicies(String absPath)", "testcase": false, "constructor": false}, {"identifier": "getApplicablePolicies", "parameters": "(String absPath)", "modifiers": "@Override public final", "return": "AccessControlPolicyIterator", "signature": "AccessControlPolicyIterator getApplicablePolicies(String absPath)", "full_signature": "@Override public final AccessControlPolicyIterator getApplicablePolicies(String absPath)", "class_method_signature": "AccessControlManagerFacade.getApplicablePolicies(String absPath)", "testcase": false, "constructor": false}, {"identifier": "setPolicy", "parameters": "(String absPath, AccessControlPolicy policy)", "modifiers": "@Override public final", "return": "void", "signature": "void setPolicy(String absPath, AccessControlPolicy policy)", "full_signature": "@Override public final void setPolicy(String absPath, AccessControlPolicy policy)", "class_method_signature": "AccessControlManagerFacade.setPolicy(String absPath, AccessControlPolicy policy)", "testcase": false, "constructor": false}, {"identifier": "removePolicy", "parameters": "(String absPath, AccessControlPolicy policy)", "modifiers": "@Override public final", "return": "void", "signature": "void removePolicy(String absPath, AccessControlPolicy policy)", "full_signature": "@Override public final void removePolicy(String absPath, AccessControlPolicy policy)", "class_method_signature": "AccessControlManagerFacade.removePolicy(String absPath, AccessControlPolicy policy)", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/jcrfacade/security/AccessControlManagerFacade.java"}, "focal_method": {"identifier": "hasPrivileges", "parameters": "(String absPath, Privilege[] privileges)", "modifiers": "@Override public final", "return": "boolean", "body": "@Override\n    public final boolean hasPrivileges(String absPath, Privilege[] privileges) throws RepositoryException {\n        return delegate.hasPrivileges(absPath, privileges);\n    }", "signature": "boolean hasPrivileges(String absPath, Privilege[] privileges)", "full_signature": "@Override public final boolean hasPrivileges(String absPath, Privilege[] privileges)", "class_method_signature": "AccessControlManagerFacade.hasPrivileges(String absPath, Privilege[] privileges)", "testcase": false, "constructor": false, "invocations": ["hasPrivileges"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}