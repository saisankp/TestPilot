{"test_class": {"identifier": "CmdlineOptionsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CmdlineOptions options;", "modifier": "private", "type": "CmdlineOptions", "declarator": "options", "var_name": "options"}, {"original_string": "private Listener listener;", "modifier": "private", "type": "Listener", "declarator": "listener", "var_name": "listener"}], "file": "ontopia-engine/src/test/java/net/ontopia/utils/CmdlineOptionsTest.java"}, "test_case": {"identifier": "testWithMistypedOption", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testWithMistypedOption() throws CmdlineOptions.OptionsException {\n    String[] argv = {\"-tmid=140\", \"propfile\", \"tmfile.xtm\"};\n    setupRDBMS(argv);\n\n    try {\n      options.parse();\n      Assert.fail(\"Incorrect options allowed\");\n    } catch (CmdlineOptions.OptionsException e) {\n      Assert.assertTrue(\"Wrong problem reported\" + e.getArgument(), e.getArgument().equals(\"-tmid=140\"));\n    }\n  }", "signature": "void testWithMistypedOption()", "full_signature": "@Test public void testWithMistypedOption()", "class_method_signature": "CmdlineOptionsTest.testWithMistypedOption()", "testcase": true, "constructor": false, "invocations": ["setupRDBMS", "parse", "fail", "assertTrue", "getArgument", "equals", "getArgument"]}, "focal_class": {"identifier": "CmdlineOptions", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected String application;", "modifier": "protected", "type": "String", "declarator": "application", "var_name": "application"}, {"original_string": "protected String[] argv;", "modifier": "protected", "type": "String[]", "declarator": "argv", "var_name": "argv"}, {"original_string": "protected StringBuilder sargs = new StringBuilder();", "modifier": "protected", "type": "StringBuilder", "declarator": "sargs = new StringBuilder()", "var_name": "sargs"}, {"original_string": "protected List<LongOpt> largs = new ArrayList<LongOpt>();", "modifier": "protected", "type": "List<LongOpt>", "declarator": "largs = new ArrayList<LongOpt>()", "var_name": "largs"}, {"original_string": "protected Map<Integer, ListenerIF> listeners = new HashMap<Integer, ListenerIF>();", "modifier": "protected", "type": "Map<Integer, ListenerIF>", "declarator": "listeners = new HashMap<Integer, ListenerIF>()", "var_name": "listeners"}, {"original_string": "protected List<String> arguments = new ArrayList<String>();", "modifier": "protected", "type": "List<String>", "declarator": "arguments = new ArrayList<String>()", "var_name": "arguments"}], "methods": [{"identifier": "CmdlineOptions", "parameters": "(String application, String[] argv)", "modifiers": "public", "return": "", "signature": " CmdlineOptions(String application, String[] argv)", "full_signature": "public  CmdlineOptions(String application, String[] argv)", "class_method_signature": "CmdlineOptions.CmdlineOptions(String application, String[] argv)", "testcase": false, "constructor": true}, {"identifier": "addShort", "parameters": "(ListenerIF listener, char c)", "modifiers": "public", "return": "void", "signature": "void addShort(ListenerIF listener, char c)", "full_signature": "public void addShort(ListenerIF listener, char c)", "class_method_signature": "CmdlineOptions.addShort(ListenerIF listener, char c)", "testcase": false, "constructor": false}, {"identifier": "addShort", "parameters": "(ListenerIF listener, char c, boolean req_arg)", "modifiers": "public", "return": "void", "signature": "void addShort(ListenerIF listener, char c, boolean req_arg)", "full_signature": "public void addShort(ListenerIF listener, char c, boolean req_arg)", "class_method_signature": "CmdlineOptions.addShort(ListenerIF listener, char c, boolean req_arg)", "testcase": false, "constructor": false}, {"identifier": "addLong", "parameters": "(ListenerIF listener, String name, char c)", "modifiers": "public", "return": "void", "signature": "void addLong(ListenerIF listener, String name, char c)", "full_signature": "public void addLong(ListenerIF listener, String name, char c)", "class_method_signature": "CmdlineOptions.addLong(ListenerIF listener, String name, char c)", "testcase": false, "constructor": false}, {"identifier": "addLong", "parameters": "(ListenerIF listener, String name, char c, boolean req_arg)", "modifiers": "public", "return": "void", "signature": "void addLong(ListenerIF listener, String name, char c, boolean req_arg)", "full_signature": "public void addLong(ListenerIF listener, String name, char c, boolean req_arg)", "class_method_signature": "CmdlineOptions.addLong(ListenerIF listener, String name, char c, boolean req_arg)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void parse()", "full_signature": "public void parse()", "class_method_signature": "CmdlineOptions.parse()", "testcase": false, "constructor": false}, {"identifier": "getArguments", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] getArguments()", "full_signature": "public String[] getArguments()", "class_method_signature": "CmdlineOptions.getArguments()", "testcase": false, "constructor": false}], "file": "ontopia-engine/src/main/java/net/ontopia/utils/CmdlineOptions.java"}, "focal_method": {"identifier": "parse", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void parse() throws OptionsException {\n    Getopt g = new Getopt(application, argv, sargs.toString(), largs.toArray(new LongOpt[] {}));\n    g.setOpterr(false); // We'll do our own error handling\n    \n    int c;\n    while ((c = g.getopt()) != -1) {\n      switch (c) {\n      case '?':\n        // Get invalid option\n        int ix = g.getOptind();\n        String option = argv[(ix == 0 ? 0 : ix-1)];\n        throw new OptionsException(option, g.getOptarg());\n      default:\n        ListenerIF listener = listeners.get(new Integer(c));\n        if (listener != null)\n          listener.processOption((char)c, g.getOptarg());\n        else\n          System.err.println (\"Warning: option '\" + (char)c + \"' ignored\");\n        break;\n      }\n    }\n    \n    // Get non-option arguments\n    for (int i = g.getOptind(); i < argv.length ; i++) {\n      arguments.add(argv[i]);\n    }\n  }", "signature": "void parse()", "full_signature": "public void parse()", "class_method_signature": "CmdlineOptions.parse()", "testcase": false, "constructor": false, "invocations": ["toString", "toArray", "setOpterr", "getopt", "getOptind", "getOptarg", "get", "processOption", "getOptarg", "println", "getOptind", "add"]}, "repository": {"repo_id": 32357795, "url": "https://github.com/ontopia/ontopia", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 35, "size": 68637, "license": "licensed"}}