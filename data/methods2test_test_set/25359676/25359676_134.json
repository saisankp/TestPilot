{"test_class": {"identifier": "PeopleFlowActionTypeServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final PeopleFlowActionTypeService notificationPFATS = PeopleFlowActionTypeService.getInstance(\n            PeopleFlowActionTypeService.Type.NOTIFICATION);", "modifier": "private final", "type": "PeopleFlowActionTypeService", "declarator": "notificationPFATS = PeopleFlowActionTypeService.getInstance(\n            PeopleFlowActionTypeService.Type.NOTIFICATION)", "var_name": "notificationPFATS"}, {"original_string": "private final PeopleFlowActionTypeService approvalPFATS = PeopleFlowActionTypeService.getInstance(\n            PeopleFlowActionTypeService.Type.APPROVAL);", "modifier": "private final", "type": "PeopleFlowActionTypeService", "declarator": "approvalPFATS = PeopleFlowActionTypeService.getInstance(\n            PeopleFlowActionTypeService.Type.APPROVAL)", "var_name": "approvalPFATS"}, {"original_string": "private static final String VALID_PEOPLEFLOW_ID_1 = \"myBogusPeopleFlowId1\";", "modifier": "private static final", "type": "String", "declarator": "VALID_PEOPLEFLOW_ID_1 = \"myBogusPeopleFlowId1\"", "var_name": "VALID_PEOPLEFLOW_ID_1"}, {"original_string": "private static final String VALID_PEOPLEFLOW_NAME_1 = \"myBogusPeopleFlowName1\";", "modifier": "private static final", "type": "String", "declarator": "VALID_PEOPLEFLOW_NAME_1 = \"myBogusPeopleFlowName1\"", "var_name": "VALID_PEOPLEFLOW_NAME_1"}, {"original_string": "private static final String VALID_PEOPLEFLOW_ID_2 = \"myBogusPeopleFlowId2\";", "modifier": "private static final", "type": "String", "declarator": "VALID_PEOPLEFLOW_ID_2 = \"myBogusPeopleFlowId2\"", "var_name": "VALID_PEOPLEFLOW_ID_2"}, {"original_string": "private static final String VALID_PEOPLEFLOW_NAME_2 = \"myBogusPeopleFlowName2\";", "modifier": "private static final", "type": "String", "declarator": "VALID_PEOPLEFLOW_NAME_2 = \"myBogusPeopleFlowName2\"", "var_name": "VALID_PEOPLEFLOW_NAME_2"}, {"original_string": "private static final String INVALID_PEOPLEFLOW_ID = \"invalidPeopleFlowId\";", "modifier": "private static final", "type": "String", "declarator": "INVALID_PEOPLEFLOW_ID = \"invalidPeopleFlowId\"", "var_name": "INVALID_PEOPLEFLOW_ID"}, {"original_string": "private static final ConfigurationService configurationService = new ConfigurationService() {\n        @Override public String getPropertyValueAsString(String key) { return \"{0} message\"; }\n        @Override public boolean getPropertyValueAsBoolean(String key) { return false; }\n        @Override public Map<String, String> getAllProperties() { return null; }\n    };", "modifier": "private static final", "type": "ConfigurationService", "declarator": "configurationService = new ConfigurationService() {\n        @Override public String getPropertyValueAsString(String key) { return \"{0} message\"; }\n        @Override public boolean getPropertyValueAsBoolean(String key) { return false; }\n        @Override public Map<String, String> getAllProperties() { return null; }\n    }", "var_name": "configurationService"}, {"original_string": "private final PeopleFlowService mockPeopleFlowService = new PeopleFlowService() {\n\n        private Set<String> validPeopleFlowIds = new HashSet<String>();\n        {\n            validPeopleFlowIds.add(VALID_PEOPLEFLOW_ID_1);\n            validPeopleFlowIds.add(VALID_PEOPLEFLOW_ID_2);\n        }\n\n        @Override\n        public PeopleFlowDefinition getPeopleFlow(@WebParam(name = \"peopleFlowId\") String peopleFlowId) throws RiceIllegalArgumentException {\n            if (validPeopleFlowIds.contains(peopleFlowId)) {\n                return PeopleFlowDefinition.Builder.create(\"myNamespace\", \"myPeopleFlowName\").build();\n            } else {\n                // simulate what our PeopleFlowServiceImpl would do\n                throw new ObjectRetrievalFailureException(\"\", new RuntimeException());\n            }\n        }\n\n        @Override\n        public PeopleFlowDefinition getPeopleFlowByName(@WebParam(name = \"namespaceCode\") String namespaceCode,\n                @WebParam(name = \"name\") String name) throws RiceIllegalArgumentException {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public PeopleFlowDefinition createPeopleFlow(@WebParam(\n                name = \"peopleFlow\") PeopleFlowDefinition peopleFlow) throws RiceIllegalArgumentException, RiceIllegalStateException {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public PeopleFlowDefinition updatePeopleFlow(@WebParam(\n                name = \"peopleFlow\") PeopleFlowDefinition peopleFlow) throws RiceIllegalArgumentException, RiceIllegalStateException {\n            throw new UnsupportedOperationException();\n        }\n    };", "modifier": "private final", "type": "PeopleFlowService", "declarator": "mockPeopleFlowService = new PeopleFlowService() {\n\n        private Set<String> validPeopleFlowIds = new HashSet<String>();\n        {\n            validPeopleFlowIds.add(VALID_PEOPLEFLOW_ID_1);\n            validPeopleFlowIds.add(VALID_PEOPLEFLOW_ID_2);\n        }\n\n        @Override\n        public PeopleFlowDefinition getPeopleFlow(@WebParam(name = \"peopleFlowId\") String peopleFlowId) throws RiceIllegalArgumentException {\n            if (validPeopleFlowIds.contains(peopleFlowId)) {\n                return PeopleFlowDefinition.Builder.create(\"myNamespace\", \"myPeopleFlowName\").build();\n            } else {\n                // simulate what our PeopleFlowServiceImpl would do\n                throw new ObjectRetrievalFailureException(\"\", new RuntimeException());\n            }\n        }\n\n        @Override\n        public PeopleFlowDefinition getPeopleFlowByName(@WebParam(name = \"namespaceCode\") String namespaceCode,\n                @WebParam(name = \"name\") String name) throws RiceIllegalArgumentException {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public PeopleFlowDefinition createPeopleFlow(@WebParam(\n                name = \"peopleFlow\") PeopleFlowDefinition peopleFlow) throws RiceIllegalArgumentException, RiceIllegalStateException {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public PeopleFlowDefinition updatePeopleFlow(@WebParam(\n                name = \"peopleFlow\") PeopleFlowDefinition peopleFlow) throws RiceIllegalArgumentException, RiceIllegalStateException {\n            throw new UnsupportedOperationException();\n        }\n    }", "var_name": "mockPeopleFlowService"}], "file": "rice-middleware/krms/impl/src/test/java/org/kuali/rice/krms/impl/peopleflow/PeopleFlowActionTypeServiceTest.java"}, "test_case": {"identifier": "testValidateAttributes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void testValidateAttributes() {\n\n        PeopleFlowActionTypeService peopleFlowActionTypeService =\n                PeopleFlowActionTypeService.getInstance(PeopleFlowActionTypeService.Type.NOTIFICATION);\n        peopleFlowActionTypeService.setConfigurationService(configurationService);\n\n        // inject our mock PeopleFlowService:\n        ((PeopleFlowActionTypeService)peopleFlowActionTypeService).setPeopleFlowService(mockPeopleFlowService);\n\n        // set up attributes with an \"invalid\" peopleflow ID (according to our mock PeopleFlowService)\n        Map<String, String> attributes = new HashMap<String, String>();\n        attributes.put(PeopleFlowActionTypeService.ATTRIBUTE_FIELD_NAME, INVALID_PEOPLEFLOW_ID);\n\n        // test null ID parameter\n        try {\n            peopleFlowActionTypeService.validateAttributes(null, attributes);\n            fail(\"null type id should throw an exception\");\n        } catch (RiceIllegalArgumentException e) {\n            // good\n        }\n\n        // test null attributes parameter\n        try {\n            peopleFlowActionTypeService.validateAttributes(\"bogusTypeId\", null);\n            fail(\"null type id should throw an exception\");\n        } catch (RiceIllegalArgumentException e) {\n            // good\n        }\n\n        // this should create errors\n        List<RemotableAttributeError> errors = peopleFlowActionTypeService.validateAttributes(\"bogusTypeId\", attributes);\n\n        assertFalse(CollectionUtils.isEmpty(errors));\n\n        // this should create errors\n        errors = peopleFlowActionTypeService.validateAttributesAgainstExisting(\"bogusTypeId\", attributes,\n                Collections.<String, String>emptyMap());\n\n        assertFalse(CollectionUtils.isEmpty(errors));\n\n        // reset attribute to have a \"valid\" peopleFlow ID (according to our mock PeopleFlowService)\n\n        attributes.clear();\n        attributes.put(PeopleFlowActionTypeService.ATTRIBUTE_FIELD_NAME, VALID_PEOPLEFLOW_ID_1);\n\n        // this should not create any errors\n        errors = peopleFlowActionTypeService.validateAttributes(\"bogusTypeId\", attributes);\n\n        assertTrue(CollectionUtils.isEmpty(errors));\n\n        // this should not create any errors\n        errors = peopleFlowActionTypeService.validateAttributesAgainstExisting(\"bogusTypeId\", attributes,\n                Collections.<String, String>emptyMap());\n\n        assertTrue(CollectionUtils.isEmpty(errors));\n\n    }", "signature": "void testValidateAttributes()", "full_signature": "@Test public void testValidateAttributes()", "class_method_signature": "PeopleFlowActionTypeServiceTest.testValidateAttributes()", "testcase": true, "constructor": false, "invocations": ["getInstance", "setConfigurationService", "setPeopleFlowService", "put", "validateAttributes", "fail", "validateAttributes", "fail", "validateAttributes", "assertFalse", "isEmpty", "validateAttributesAgainstExisting", "emptyMap", "assertFalse", "isEmpty", "clear", "put", "validateAttributes", "assertTrue", "isEmpty", "validateAttributesAgainstExisting", "emptyMap", "assertTrue", "isEmpty"]}, "focal_class": {"identifier": "PeopleFlowActionTypeService", "superclass": "extends KrmsTypeServiceBase", "interfaces": "implements ActionTypeService", "fields": [{"original_string": "static final String PEOPLE_FLOW_BO_CLASS_NAME = \"org.kuali.rice.kew.impl.peopleflow.PeopleFlowBo\";", "modifier": "static final", "type": "String", "declarator": "PEOPLE_FLOW_BO_CLASS_NAME = \"org.kuali.rice.kew.impl.peopleflow.PeopleFlowBo\"", "var_name": "PEOPLE_FLOW_BO_CLASS_NAME"}, {"original_string": "static final String PEOPLE_FLOWS_SELECTED_ATTRIBUTE = \"peopleFlowsSelected\";", "modifier": "static final", "type": "String", "declarator": "PEOPLE_FLOWS_SELECTED_ATTRIBUTE = \"peopleFlowsSelected\"", "var_name": "PEOPLE_FLOWS_SELECTED_ATTRIBUTE"}, {"original_string": "public static final String ATTRIBUTE_FIELD_NAME = \"peopleFlowId\";", "modifier": "public static final", "type": "String", "declarator": "ATTRIBUTE_FIELD_NAME = \"peopleFlowId\"", "var_name": "ATTRIBUTE_FIELD_NAME"}, {"original_string": "public static final String NAME_ATTRIBUTE_FIELD = \"peopleFlowName\";", "modifier": "public static final", "type": "String", "declarator": "NAME_ATTRIBUTE_FIELD = \"peopleFlowName\"", "var_name": "NAME_ATTRIBUTE_FIELD"}, {"original_string": "private final Type type;", "modifier": "private final", "type": "Type", "declarator": "type", "var_name": "type"}, {"original_string": "private PeopleFlowService peopleFlowService;", "modifier": "private", "type": "PeopleFlowService", "declarator": "peopleFlowService", "var_name": "peopleFlowService"}, {"original_string": "private ConfigurationService configurationService;", "modifier": "private", "type": "ConfigurationService", "declarator": "configurationService", "var_name": "configurationService"}], "methods": [{"identifier": "getInstance", "parameters": "(Type type)", "modifiers": "public static", "return": "PeopleFlowActionTypeService", "signature": "PeopleFlowActionTypeService getInstance(Type type)", "full_signature": "public static PeopleFlowActionTypeService getInstance(Type type)", "class_method_signature": "PeopleFlowActionTypeService.getInstance(Type type)", "testcase": false, "constructor": false}, {"identifier": "PeopleFlowActionTypeService", "parameters": "(Type type)", "modifiers": "public", "return": "", "signature": " PeopleFlowActionTypeService(Type type)", "full_signature": "public  PeopleFlowActionTypeService(Type type)", "class_method_signature": "PeopleFlowActionTypeService.PeopleFlowActionTypeService(Type type)", "testcase": false, "constructor": true}, {"identifier": "setConfigurationService", "parameters": "(ConfigurationService configurationService)", "modifiers": "public", "return": "void", "signature": "void setConfigurationService(ConfigurationService configurationService)", "full_signature": "public void setConfigurationService(ConfigurationService configurationService)", "class_method_signature": "PeopleFlowActionTypeService.setConfigurationService(ConfigurationService configurationService)", "testcase": false, "constructor": false}, {"identifier": "loadAction", "parameters": "(ActionDefinition actionDefinition)", "modifiers": "@Override public", "return": "Action", "signature": "Action loadAction(ActionDefinition actionDefinition)", "full_signature": "@Override public Action loadAction(ActionDefinition actionDefinition)", "class_method_signature": "PeopleFlowActionTypeService.loadAction(ActionDefinition actionDefinition)", "testcase": false, "constructor": false}, {"identifier": "translateTypeAttribute", "parameters": "(KrmsTypeAttribute inputAttribute,\n            KrmsAttributeDefinition attributeDefinition)", "modifiers": "@Override public", "return": "RemotableAttributeField", "signature": "RemotableAttributeField translateTypeAttribute(KrmsTypeAttribute inputAttribute,\n            KrmsAttributeDefinition attributeDefinition)", "full_signature": "@Override public RemotableAttributeField translateTypeAttribute(KrmsTypeAttribute inputAttribute,\n            KrmsAttributeDefinition attributeDefinition)", "class_method_signature": "PeopleFlowActionTypeService.translateTypeAttribute(KrmsTypeAttribute inputAttribute,\n            KrmsAttributeDefinition attributeDefinition)", "testcase": false, "constructor": false}, {"identifier": "createPeopleFlowIdField", "parameters": "()", "modifiers": "private", "return": "RemotableAttributeField", "signature": "RemotableAttributeField createPeopleFlowIdField()", "full_signature": "private RemotableAttributeField createPeopleFlowIdField()", "class_method_signature": "PeopleFlowActionTypeService.createPeopleFlowIdField()", "testcase": false, "constructor": false}, {"identifier": "createPeopleFlowNameField", "parameters": "()", "modifiers": "private", "return": "RemotableAttributeField", "signature": "RemotableAttributeField createPeopleFlowNameField()", "full_signature": "private RemotableAttributeField createPeopleFlowNameField()", "class_method_signature": "PeopleFlowActionTypeService.createPeopleFlowNameField()", "testcase": false, "constructor": false}, {"identifier": "validateNonBlankKrmsTypeId", "parameters": "(String krmsTypeId)", "modifiers": "private", "return": "void", "signature": "void validateNonBlankKrmsTypeId(String krmsTypeId)", "full_signature": "private void validateNonBlankKrmsTypeId(String krmsTypeId)", "class_method_signature": "PeopleFlowActionTypeService.validateNonBlankKrmsTypeId(String krmsTypeId)", "testcase": false, "constructor": false}, {"identifier": "validateAttributes", "parameters": "(\n\n            @WebParam(name = \"krmsTypeId\") String krmsTypeId,\n\n            @WebParam(name = \"attributes\")\n            @XmlJavaTypeAdapter(value = MapStringStringAdapter.class)\n            Map<String, String> attributes\n\n    )", "modifiers": "@Override public", "return": "List<RemotableAttributeError>", "signature": "List<RemotableAttributeError> validateAttributes(\n\n            @WebParam(name = \"krmsTypeId\") String krmsTypeId,\n\n            @WebParam(name = \"attributes\")\n            @XmlJavaTypeAdapter(value = MapStringStringAdapter.class)\n            Map<String, String> attributes\n\n    )", "full_signature": "@Override public List<RemotableAttributeError> validateAttributes(\n\n            @WebParam(name = \"krmsTypeId\") String krmsTypeId,\n\n            @WebParam(name = \"attributes\")\n            @XmlJavaTypeAdapter(value = MapStringStringAdapter.class)\n            Map<String, String> attributes\n\n    )", "class_method_signature": "PeopleFlowActionTypeService.validateAttributes(\n\n            @WebParam(name = \"krmsTypeId\") String krmsTypeId,\n\n            @WebParam(name = \"attributes\")\n            @XmlJavaTypeAdapter(value = MapStringStringAdapter.class)\n            Map<String, String> attributes\n\n    )", "testcase": false, "constructor": false}, {"identifier": "validateAttributesAgainstExisting", "parameters": "(\n            @WebParam(name = \"krmsTypeId\") String krmsTypeId, @WebParam(name = \"newAttributes\") @XmlJavaTypeAdapter(\n            value = MapStringStringAdapter.class) Map<String, String> newAttributes,\n            @WebParam(name = \"oldAttributes\") @XmlJavaTypeAdapter(\n                    value = MapStringStringAdapter.class) Map<String, String> oldAttributes)", "modifiers": "@Override public", "return": "List<RemotableAttributeError>", "signature": "List<RemotableAttributeError> validateAttributesAgainstExisting(\n            @WebParam(name = \"krmsTypeId\") String krmsTypeId, @WebParam(name = \"newAttributes\") @XmlJavaTypeAdapter(\n            value = MapStringStringAdapter.class) Map<String, String> newAttributes,\n            @WebParam(name = \"oldAttributes\") @XmlJavaTypeAdapter(\n                    value = MapStringStringAdapter.class) Map<String, String> oldAttributes)", "full_signature": "@Override public List<RemotableAttributeError> validateAttributesAgainstExisting(\n            @WebParam(name = \"krmsTypeId\") String krmsTypeId, @WebParam(name = \"newAttributes\") @XmlJavaTypeAdapter(\n            value = MapStringStringAdapter.class) Map<String, String> newAttributes,\n            @WebParam(name = \"oldAttributes\") @XmlJavaTypeAdapter(\n                    value = MapStringStringAdapter.class) Map<String, String> oldAttributes)", "class_method_signature": "PeopleFlowActionTypeService.validateAttributesAgainstExisting(\n            @WebParam(name = \"krmsTypeId\") String krmsTypeId, @WebParam(name = \"newAttributes\") @XmlJavaTypeAdapter(\n            value = MapStringStringAdapter.class) Map<String, String> newAttributes,\n            @WebParam(name = \"oldAttributes\") @XmlJavaTypeAdapter(\n                    value = MapStringStringAdapter.class) Map<String, String> oldAttributes)", "testcase": false, "constructor": false}, {"identifier": "getPeopleFlowService", "parameters": "()", "modifiers": "public", "return": "PeopleFlowService", "signature": "PeopleFlowService getPeopleFlowService()", "full_signature": "public PeopleFlowService getPeopleFlowService()", "class_method_signature": "PeopleFlowActionTypeService.getPeopleFlowService()", "testcase": false, "constructor": false}, {"identifier": "setPeopleFlowService", "parameters": "(PeopleFlowService peopleFlowService)", "modifiers": "public", "return": "void", "signature": "void setPeopleFlowService(PeopleFlowService peopleFlowService)", "full_signature": "public void setPeopleFlowService(PeopleFlowService peopleFlowService)", "class_method_signature": "PeopleFlowActionTypeService.setPeopleFlowService(PeopleFlowService peopleFlowService)", "testcase": false, "constructor": false}], "file": "rice-middleware/krms/impl/src/main/java/org/kuali/rice/krms/impl/peopleflow/PeopleFlowActionTypeService.java"}, "focal_method": {"identifier": "validateAttributes", "parameters": "(\n\n            @WebParam(name = \"krmsTypeId\") String krmsTypeId,\n\n            @WebParam(name = \"attributes\")\n            @XmlJavaTypeAdapter(value = MapStringStringAdapter.class)\n            Map<String, String> attributes\n\n    )", "modifiers": "@Override public", "return": "List<RemotableAttributeError>", "body": "@Override\n    public List<RemotableAttributeError> validateAttributes(\n\n            @WebParam(name = \"krmsTypeId\") String krmsTypeId,\n\n            @WebParam(name = \"attributes\")\n            @XmlJavaTypeAdapter(value = MapStringStringAdapter.class)\n            Map<String, String> attributes\n\n    ) throws RiceIllegalArgumentException {\n\n        List<RemotableAttributeError> results = null;\n\n        validateNonBlankKrmsTypeId(krmsTypeId);\n        if (attributes == null) { throw new RiceIllegalArgumentException(\"attributes must not be null\"); }\n\n        RemotableAttributeError.Builder errorBuilder =\n                RemotableAttributeError.Builder.create(ATTRIBUTE_FIELD_NAME);\n\n        if (attributes != null && attributes.containsKey(ATTRIBUTE_FIELD_NAME) && StringUtils.isNotBlank(attributes.get(ATTRIBUTE_FIELD_NAME))) {\n            PeopleFlowDefinition peopleFlowDefinition = null;\n\n            try {\n                peopleFlowDefinition = getPeopleFlowService().getPeopleFlow(attributes.get(ATTRIBUTE_FIELD_NAME));\n            } catch (ObjectRetrievalFailureException e) {\n                // that means the key was invalid to OJB/Spring.\n                // That's not cause for general panic, so we'll swallow it.\n            } catch (IllegalArgumentException e) {\n                // that means the key was invalid to our JPA provider.\n                // That's not cause for general panic, so we'll swallow it.\n            }\n\n            if (peopleFlowDefinition == null) {\n                // TODO: include the ATTRIBUTE_FIELD_NAME in an error message like\n                //       \"The \" + ATTRIBUTE_FIELD_NAME + \" must be a valid ID for an existing PeopleFlow\".\n                //       Currently the RemotableAttributeError doesn't support arguments in the error messages.\n                errorBuilder.addErrors(MessageFormat.format(configurationService.getPropertyValueAsString(\"peopleFlow.peopleFlowId.invalid\"), ATTRIBUTE_FIELD_NAME));\n            }\n        } else {\n            // TODO: include the ATTRIBUTE_FIELD_NAME in an error message like\n            //       ATTRIBUTE_FIELD_NAME + \" is required\".\n            //       Currently the RemotableAttributeError doesn't support arguments in the error messages.\n            errorBuilder.addErrors(MessageFormat.format(configurationService.getPropertyValueAsString(\"peopleFlow.peopleFlowId.required\"), ATTRIBUTE_FIELD_NAME));\n        }\n\n        if (errorBuilder.getErrors().size() > 0) {\n            results = Collections.singletonList(errorBuilder.build());\n        } else {\n            results = Collections.emptyList();\n        }\n\n        return results;\n    }", "signature": "List<RemotableAttributeError> validateAttributes(\n\n            @WebParam(name = \"krmsTypeId\") String krmsTypeId,\n\n            @WebParam(name = \"attributes\")\n            @XmlJavaTypeAdapter(value = MapStringStringAdapter.class)\n            Map<String, String> attributes\n\n    )", "full_signature": "@Override public List<RemotableAttributeError> validateAttributes(\n\n            @WebParam(name = \"krmsTypeId\") String krmsTypeId,\n\n            @WebParam(name = \"attributes\")\n            @XmlJavaTypeAdapter(value = MapStringStringAdapter.class)\n            Map<String, String> attributes\n\n    )", "class_method_signature": "PeopleFlowActionTypeService.validateAttributes(\n\n            @WebParam(name = \"krmsTypeId\") String krmsTypeId,\n\n            @WebParam(name = \"attributes\")\n            @XmlJavaTypeAdapter(value = MapStringStringAdapter.class)\n            Map<String, String> attributes\n\n    )", "testcase": false, "constructor": false, "invocations": ["validateNonBlankKrmsTypeId", "create", "containsKey", "isNotBlank", "get", "getPeopleFlow", "getPeopleFlowService", "get", "addErrors", "format", "getPropertyValueAsString", "addErrors", "format", "getPropertyValueAsString", "size", "getErrors", "singletonList", "build", "emptyList"]}, "repository": {"repo_id": 25359676, "url": "https://github.com/kuali/rice", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 16, "size": 289156, "license": "licensed"}}