{"test_class": {"identifier": "TestMudrodEngine", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/gov/nasa/jpl/mudrod/main/TestMudrodEngine.java"}, "test_case": {"identifier": "testMain", "parameters": "()", "modifiers": "@Ignore @Test public final", "return": "void", "body": "@Ignore\n  @Test\n  public final void testMain() {\n    fail(\"Not yet implemented\"); // TODO\n  }", "signature": "void testMain()", "full_signature": "@Ignore @Test public final void testMain()", "class_method_signature": "TestMudrodEngine.testMain()", "testcase": true, "constructor": false, "invocations": ["fail"]}, "focal_class": {"identifier": "MudrodEngine", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(MudrodEngine.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(MudrodEngine.class)", "var_name": "LOG"}, {"original_string": "private Properties props = new Properties();", "modifier": "private", "type": "Properties", "declarator": "props = new Properties()", "var_name": "props"}, {"original_string": "private ESDriver es = null;", "modifier": "private", "type": "ESDriver", "declarator": "es = null", "var_name": "es"}, {"original_string": "private SparkDriver spark = null;", "modifier": "private", "type": "SparkDriver", "declarator": "spark = null", "var_name": "spark"}, {"original_string": "private static final String LOG_INGEST = \"logIngest\";", "modifier": "private static final", "type": "String", "declarator": "LOG_INGEST = \"logIngest\"", "var_name": "LOG_INGEST"}, {"original_string": "private static final String META_INGEST = \"metaIngest\";", "modifier": "private static final", "type": "String", "declarator": "META_INGEST = \"metaIngest\"", "var_name": "META_INGEST"}, {"original_string": "private static final String FULL_INGEST = \"fullIngest\";", "modifier": "private static final", "type": "String", "declarator": "FULL_INGEST = \"fullIngest\"", "var_name": "FULL_INGEST"}, {"original_string": "private static final String PROCESSING = \"processingWithPreResults\";", "modifier": "private static final", "type": "String", "declarator": "PROCESSING = \"processingWithPreResults\"", "var_name": "PROCESSING"}, {"original_string": "private static final String ES_HOST = \"esHost\";", "modifier": "private static final", "type": "String", "declarator": "ES_HOST = \"esHost\"", "var_name": "ES_HOST"}, {"original_string": "private static final String ES_TCP_PORT = \"esTCPPort\";", "modifier": "private static final", "type": "String", "declarator": "ES_TCP_PORT = \"esTCPPort\"", "var_name": "ES_TCP_PORT"}, {"original_string": "private static final String ES_HTTP_PORT = \"esPort\";", "modifier": "private static final", "type": "String", "declarator": "ES_HTTP_PORT = \"esPort\"", "var_name": "ES_HTTP_PORT"}], "methods": [{"identifier": "MudrodEngine", "parameters": "()", "modifiers": "public", "return": "", "signature": " MudrodEngine()", "full_signature": "public  MudrodEngine()", "class_method_signature": "MudrodEngine.MudrodEngine()", "testcase": false, "constructor": true}, {"identifier": "startESDriver", "parameters": "()", "modifiers": "public", "return": "ESDriver", "signature": "ESDriver startESDriver()", "full_signature": "public ESDriver startESDriver()", "class_method_signature": "MudrodEngine.startESDriver()", "testcase": false, "constructor": false}, {"identifier": "startSparkDriver", "parameters": "()", "modifiers": "public", "return": "SparkDriver", "signature": "SparkDriver startSparkDriver()", "full_signature": "public SparkDriver startSparkDriver()", "class_method_signature": "MudrodEngine.startSparkDriver()", "testcase": false, "constructor": false}, {"identifier": "getConfig", "parameters": "()", "modifiers": "public", "return": "Properties", "signature": "Properties getConfig()", "full_signature": "public Properties getConfig()", "class_method_signature": "MudrodEngine.getConfig()", "testcase": false, "constructor": false}, {"identifier": "getESDriver", "parameters": "()", "modifiers": "public", "return": "ESDriver", "signature": "ESDriver getESDriver()", "full_signature": "public ESDriver getESDriver()", "class_method_signature": "MudrodEngine.getESDriver()", "testcase": false, "constructor": false}, {"identifier": "setESDriver", "parameters": "(ESDriver es)", "modifiers": "public", "return": "void", "signature": "void setESDriver(ESDriver es)", "full_signature": "public void setESDriver(ESDriver es)", "class_method_signature": "MudrodEngine.setESDriver(ESDriver es)", "testcase": false, "constructor": false}, {"identifier": "locateConfig", "parameters": "()", "modifiers": "private", "return": "InputStream", "signature": "InputStream locateConfig()", "full_signature": "private InputStream locateConfig()", "class_method_signature": "MudrodEngine.locateConfig()", "testcase": false, "constructor": false}, {"identifier": "loadConfig", "parameters": "()", "modifiers": "public", "return": "Properties", "signature": "Properties loadConfig()", "full_signature": "public Properties loadConfig()", "class_method_signature": "MudrodEngine.loadConfig()", "testcase": false, "constructor": false}, {"identifier": "decompressSVMWithSGDModel", "parameters": "(String archiveName)", "modifiers": "private", "return": "String", "signature": "String decompressSVMWithSGDModel(String archiveName)", "full_signature": "private String decompressSVMWithSGDModel(String archiveName)", "class_method_signature": "MudrodEngine.decompressSVMWithSGDModel(String archiveName)", "testcase": false, "constructor": false}, {"identifier": "startLogIngest", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void startLogIngest()", "full_signature": "public void startLogIngest()", "class_method_signature": "MudrodEngine.startLogIngest()", "testcase": false, "constructor": false}, {"identifier": "startMetaIngest", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void startMetaIngest()", "full_signature": "public void startMetaIngest()", "class_method_signature": "MudrodEngine.startMetaIngest()", "testcase": false, "constructor": false}, {"identifier": "startFullIngest", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void startFullIngest()", "full_signature": "public void startFullIngest()", "class_method_signature": "MudrodEngine.startFullIngest()", "testcase": false, "constructor": false}, {"identifier": "startProcessing", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void startProcessing()", "full_signature": "public void startProcessing()", "class_method_signature": "MudrodEngine.startProcessing()", "testcase": false, "constructor": false}, {"identifier": "end", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void end()", "full_signature": "public void end()", "class_method_signature": "MudrodEngine.end()", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "MudrodEngine.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "loadFullConfig", "parameters": "(MudrodEngine me, String dataDir)", "modifiers": "private static", "return": "void", "signature": "void loadFullConfig(MudrodEngine me, String dataDir)", "full_signature": "private static void loadFullConfig(MudrodEngine me, String dataDir)", "class_method_signature": "MudrodEngine.loadFullConfig(MudrodEngine me, String dataDir)", "testcase": false, "constructor": false}, {"identifier": "getSparkDriver", "parameters": "()", "modifiers": "public", "return": "SparkDriver", "signature": "SparkDriver getSparkDriver()", "full_signature": "public SparkDriver getSparkDriver()", "class_method_signature": "MudrodEngine.getSparkDriver()", "testcase": false, "constructor": false}, {"identifier": "setSparkDriver", "parameters": "(SparkDriver sparkDriver)", "modifiers": "public", "return": "void", "signature": "void setSparkDriver(SparkDriver sparkDriver)", "full_signature": "public void setSparkDriver(SparkDriver sparkDriver)", "class_method_signature": "MudrodEngine.setSparkDriver(SparkDriver sparkDriver)", "testcase": false, "constructor": false}], "file": "core/src/main/java/gov/nasa/jpl/mudrod/main/MudrodEngine.java"}, "focal_method": {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "body": "public static void main(String[] args) {\n    // boolean options\n    Option helpOpt = new Option(\"h\", \"help\", false, \"show this help message\");\n\n    // log ingest (preprocessing + processing)\n    Option logIngestOpt = new Option(\"l\", LOG_INGEST, false, \"begin log ingest\");\n    // metadata ingest (preprocessing + processing)\n    Option metaIngestOpt = new Option(\"m\", META_INGEST, false, \"begin metadata ingest\");\n    // ingest both log and metadata\n    Option fullIngestOpt = new Option(\"f\", FULL_INGEST, false, \"begin full ingest Mudrod workflow\");\n    // processing only, assuming that preprocessing results is in dataDir\n    Option processingOpt = new Option(\"p\", PROCESSING, false, \"begin processing with preprocessing results\");\n\n    // argument options\n    Option dataDirOpt = OptionBuilder.hasArg(true).withArgName(\"/path/to/data/directory\").hasArgs(1).withDescription(\"the data directory to be processed by Mudrod\").withLongOpt(\"dataDirectory\")\n        .isRequired().create(DATA_DIR);\n\n    Option esHostOpt = OptionBuilder.hasArg(true).withArgName(\"host_name\").hasArgs(1).withDescription(\"elasticsearch cluster unicast host\").withLongOpt(\"elasticSearchHost\").isRequired(false)\n        .create(ES_HOST);\n\n    Option esTCPPortOpt = OptionBuilder.hasArg(true).withArgName(\"port_num\").hasArgs(1).withDescription(\"elasticsearch transport TCP port\").withLongOpt(\"elasticSearchTransportTCPPort\")\n        .isRequired(false).create(ES_TCP_PORT);\n\n    Option esPortOpt = OptionBuilder.hasArg(true).withArgName(\"port_num\").hasArgs(1).withDescription(\"elasticsearch HTTP/REST port\").withLongOpt(\"elasticSearchHTTPPort\").isRequired(false)\n        .create(ES_HTTP_PORT);\n\n    // create the options\n    Options options = new Options();\n    options.addOption(helpOpt);\n    options.addOption(logIngestOpt);\n    options.addOption(metaIngestOpt);\n    options.addOption(fullIngestOpt);\n    options.addOption(processingOpt);\n    options.addOption(dataDirOpt);\n    options.addOption(esHostOpt);\n    options.addOption(esTCPPortOpt);\n    options.addOption(esPortOpt);\n\n    CommandLineParser parser = new GnuParser();\n    try {\n      CommandLine line = parser.parse(options, args);\n      String processingType = null;\n\n      if (line.hasOption(LOG_INGEST)) {\n        processingType = LOG_INGEST;\n      } else if (line.hasOption(PROCESSING)) {\n        processingType = PROCESSING;\n      } else if (line.hasOption(META_INGEST)) {\n        processingType = META_INGEST;\n      } else if (line.hasOption(FULL_INGEST)) {\n        processingType = FULL_INGEST;\n      }\n\n      String dataDir = line.getOptionValue(DATA_DIR).replace(\"\\\\\", \"/\");\n      if (!dataDir.endsWith(\"/\")) {\n        dataDir += \"/\";\n      }\n\n      MudrodEngine me = new MudrodEngine();\n      me.loadConfig();\n      me.props.put(DATA_DIR, dataDir);\n\n      if (line.hasOption(ES_HOST)) {\n        String esHost = line.getOptionValue(ES_HOST);\n        me.props.put(MudrodConstants.ES_UNICAST_HOSTS, esHost);\n      }\n\n      if (line.hasOption(ES_TCP_PORT)) {\n        String esTcpPort = line.getOptionValue(ES_TCP_PORT);\n        me.props.put(MudrodConstants.ES_TRANSPORT_TCP_PORT, esTcpPort);\n      }\n\n      if (line.hasOption(ES_HTTP_PORT)) {\n        String esHttpPort = line.getOptionValue(ES_HTTP_PORT);\n        me.props.put(MudrodConstants.ES_HTTP_PORT, esHttpPort);\n      }\n\n      me.es = new ESDriver(me.getConfig());\n      me.spark = new SparkDriver(me.getConfig());\n      loadFullConfig(me, dataDir);\n      if (processingType != null) {\n        switch (processingType) {\n        case PROCESSING:\n          me.startProcessing();\n          break;\n        case LOG_INGEST:\n          me.startLogIngest();\n          break;\n        case META_INGEST:\n          me.startMetaIngest();\n          break;\n        case FULL_INGEST:\n          me.startFullIngest();\n          break;\n        default:\n          break;\n        }\n      }\n      me.end();\n    } catch (Exception e) {\n      HelpFormatter formatter = new HelpFormatter();\n      formatter.printHelp(\"MudrodEngine: 'dataDir' argument is mandatory. \" + \"User must also provide an ingest method.\", options, true);\n      LOG.error(\"Error whilst parsing command line.\", e);\n    }\n  }", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "MudrodEngine.main(String[] args)", "testcase": false, "constructor": false, "invocations": ["create", "isRequired", "withLongOpt", "withDescription", "hasArgs", "withArgName", "hasArg", "create", "isRequired", "withLongOpt", "withDescription", "hasArgs", "withArgName", "hasArg", "create", "isRequired", "withLongOpt", "withDescription", "hasArgs", "withArgName", "hasArg", "create", "isRequired", "withLongOpt", "withDescription", "hasArgs", "withArgName", "hasArg", "addOption", "addOption", "addOption", "addOption", "addOption", "addOption", "addOption", "addOption", "addOption", "parse", "hasOption", "hasOption", "hasOption", "hasOption", "replace", "getOptionValue", "endsWith", "loadConfig", "put", "hasOption", "getOptionValue", "put", "hasOption", "getOptionValue", "put", "hasOption", "getOptionValue", "put", "getConfig", "getConfig", "loadFullConfig", "startProcessing", "startLogIngest", "startMetaIngest", "startFullIngest", "end", "printHelp", "error"]}, "repository": {"repo_id": 59970637, "url": "https://github.com/aist-oceanworks/mudrod", "language": "Java", "is_fork": false, "fork_count": 16, "stargazer_count": 13, "size": 78356, "license": "licensed"}}