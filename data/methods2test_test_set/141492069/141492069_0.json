{"test_class": {"identifier": "TestFtpRetriever", "superclass": "extends ObjRecTestBase", "interfaces": "", "fields": [{"original_string": "FtpRetriever retriever;", "modifier": "", "type": "FtpRetriever", "declarator": "retriever", "var_name": "retriever"}, {"original_string": "NoSendORCore source;", "modifier": "", "type": "NoSendORCore", "declarator": "source", "var_name": "source"}, {"original_string": "String ftpUrl   = \"test.rebex.net\";", "modifier": "", "type": "String", "declarator": "ftpUrl   = \"test.rebex.net\"", "var_name": "ftpUrl"}, {"original_string": "String ftpsUrl  = \"test.rebex.net\";", "modifier": "", "type": "String", "declarator": "ftpsUrl  = \"test.rebex.net\"", "var_name": "ftpsUrl"}, {"original_string": "String sftpUrl  = \"test.rebex.net\";", "modifier": "", "type": "String", "declarator": "sftpUrl  = \"test.rebex.net\"", "var_name": "sftpUrl"}], "file": "objectRecognitionSource/src/test/java/io/vantiq/extsrc/objectRecognition/imageRetriever/TestFtpRetriever.java"}, "test_case": {"identifier": "testSetup", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSetup() {\n        Map<String, String> config = workingFtpConfig();\n        \n        try {\n            retriever.setupDataRetrieval(config, source);\n        } catch (Exception e) {\n            fail(\"Should not fail with full config. exception message was : \" + e.getMessage());\n        }\n        \n        config = workingFtpConfig();\n        config.remove(\"username\");\n        try {\n            retriever.setupDataRetrieval(config, source);\n            fail(\"Should fail when missing username\");\n        } catch (Exception e) {\n            assertTrue(\"Failure should be caused by a missing username. Error actually was: \" + e.getMessage()\n                    , e.getMessage().startsWith(FtpRetriever.class.getCanonicalName() + \".noUsername\"));\n        }\n        \n        config = workingFtpConfig();\n        config.remove(\"password\");\n        try {\n            retriever.setupDataRetrieval(config, source);\n            fail(\"Should fail when missing password\");\n        } catch (Exception e) {\n            assertTrue(\"Failure should be caused by a missing password. Error actually was: \" + e.getMessage()\n                    , e.getMessage().startsWith(FtpRetriever.class.getCanonicalName() + \".noPassword\"));\n        }\n        \n        config = workingFtpConfig();\n        config.remove(\"server\");\n        try {\n            retriever.setupDataRetrieval(config, source);\n            fail(\"Should fail when missing server\");\n        } catch (Exception e) {\n            assertTrue(\"Failure should be caused by a missing server URL. Error actually was: \" + e.getMessage()\n                , e.getMessage().startsWith(FtpRetriever.class.getCanonicalName() + \".noServerSpecified\"));\n        }\n        \n        config = workingFtpConfig();\n        config.remove(\"conType\");\n        try {\n            retriever.setupDataRetrieval(config, source);\n        } catch (Exception e) {\n            fail(\"Should use default FTP when missing conType\");\n        }\n    }", "signature": "void testSetup()", "full_signature": "@Test public void testSetup()", "class_method_signature": "TestFtpRetriever.testSetup()", "testcase": true, "constructor": false, "invocations": ["workingFtpConfig", "setupDataRetrieval", "fail", "getMessage", "workingFtpConfig", "remove", "setupDataRetrieval", "fail", "assertTrue", "getMessage", "startsWith", "getMessage", "getCanonicalName", "workingFtpConfig", "remove", "setupDataRetrieval", "fail", "assertTrue", "getMessage", "startsWith", "getMessage", "getCanonicalName", "workingFtpConfig", "remove", "setupDataRetrieval", "fail", "assertTrue", "getMessage", "startsWith", "getMessage", "getCanonicalName", "workingFtpConfig", "remove", "setupDataRetrieval", "fail"]}, "focal_class": {"identifier": "FtpRetriever", "superclass": "", "interfaces": "implements ImageRetrieverInterface", "fields": [{"original_string": "final static String FTPS = \"ftps\";", "modifier": "final static", "type": "String", "declarator": "FTPS = \"ftps\"", "var_name": "FTPS"}, {"original_string": "final static String SFTP = \"sftp\";", "modifier": "final static", "type": "String", "declarator": "SFTP = \"sftp\"", "var_name": "SFTP"}, {"original_string": "final static String FTP  = \"ftp\";", "modifier": "final static", "type": "String", "declarator": "FTP  = \"ftp\"", "var_name": "FTP"}, {"original_string": "final static String DEFAULT_PROTOCOL = \"TLS\";", "modifier": "final static", "type": "String", "declarator": "DEFAULT_PROTOCOL = \"TLS\"", "var_name": "DEFAULT_PROTOCOL"}, {"original_string": "Logger log;", "modifier": "", "type": "Logger", "declarator": "log", "var_name": "log"}, {"original_string": "boolean noDefault = false;", "modifier": "", "type": "boolean", "declarator": "noDefault = false", "var_name": "noDefault"}, {"original_string": "String  conType     = FTP;", "modifier": "", "type": "String", "declarator": "conType     = FTP", "var_name": "conType"}, {"original_string": "String  password    = null;", "modifier": "", "type": "String", "declarator": "password    = null", "var_name": "password"}, {"original_string": "String  username    = null;", "modifier": "", "type": "String", "declarator": "username    = null", "var_name": "username"}, {"original_string": "String  server      = null;", "modifier": "", "type": "String", "declarator": "server      = null", "var_name": "server"}, {"original_string": "String  protocol    = DEFAULT_PROTOCOL;", "modifier": "", "type": "String", "declarator": "protocol    = DEFAULT_PROTOCOL", "var_name": "protocol"}, {"original_string": "boolean isImplicit  = false;", "modifier": "", "type": "boolean", "declarator": "isImplicit  = false", "var_name": "isImplicit"}, {"original_string": "FTPClient ftpClient = null;", "modifier": "", "type": "FTPClient", "declarator": "ftpClient = null", "var_name": "ftpClient"}, {"original_string": "Session   session = null;", "modifier": "", "type": "Session", "declarator": "session = null", "var_name": "session"}, {"original_string": "private static final String NO_DEFAULT = \"noDefault\";", "modifier": "private static final", "type": "String", "declarator": "NO_DEFAULT = \"noDefault\"", "var_name": "NO_DEFAULT"}, {"original_string": "private static final String SERVER = \"server\";", "modifier": "private static final", "type": "String", "declarator": "SERVER = \"server\"", "var_name": "SERVER"}, {"original_string": "private static final String CON_TYPE = \"conType\";", "modifier": "private static final", "type": "String", "declarator": "CON_TYPE = \"conType\"", "var_name": "CON_TYPE"}, {"original_string": "private static final String IMPLICIT = \"implicit\";", "modifier": "private static final", "type": "String", "declarator": "IMPLICIT = \"implicit\"", "var_name": "IMPLICIT"}, {"original_string": "private static final String PROTOCOL = \"protocol\";", "modifier": "private static final", "type": "String", "declarator": "PROTOCOL = \"protocol\"", "var_name": "PROTOCOL"}, {"original_string": "private static final String USERNAME = \"username\";", "modifier": "private static final", "type": "String", "declarator": "USERNAME = \"username\"", "var_name": "USERNAME"}, {"original_string": "private static final String PASSWORD = \"password\";", "modifier": "private static final", "type": "String", "declarator": "PASSWORD = \"password\"", "var_name": "PASSWORD"}], "methods": [{"identifier": "setupDataRetrieval", "parameters": "(Map<String, ?> dataSourceConfig, ObjectRecognitionCore source)", "modifiers": "@Override public", "return": "void", "signature": "void setupDataRetrieval(Map<String, ?> dataSourceConfig, ObjectRecognitionCore source)", "full_signature": "@Override public void setupDataRetrieval(Map<String, ?> dataSourceConfig, ObjectRecognitionCore source)", "class_method_signature": "FtpRetriever.setupDataRetrieval(Map<String, ?> dataSourceConfig, ObjectRecognitionCore source)", "testcase": false, "constructor": false}, {"identifier": "getImage", "parameters": "()", "modifiers": "@Override public", "return": "ImageRetrieverResults", "signature": "ImageRetrieverResults getImage()", "full_signature": "@Override public ImageRetrieverResults getImage()", "class_method_signature": "FtpRetriever.getImage()", "testcase": false, "constructor": false}, {"identifier": "getImage", "parameters": "(Map<String, ?> request)", "modifiers": "@Override public", "return": "ImageRetrieverResults", "signature": "ImageRetrieverResults getImage(Map<String, ?> request)", "full_signature": "@Override public ImageRetrieverResults getImage(Map<String, ?> request)", "class_method_signature": "FtpRetriever.getImage(Map<String, ?> request)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "FtpRetriever.close()", "testcase": false, "constructor": false}, {"identifier": "connectToFtpServer", "parameters": "(String server, String username,\n                String password, String conType, String protocol, boolean isImplicit)", "modifiers": "public", "return": "FTPClient", "signature": "FTPClient connectToFtpServer(String server, String username,\n                String password, String conType, String protocol, boolean isImplicit)", "full_signature": "public FTPClient connectToFtpServer(String server, String username,\n                String password, String conType, String protocol, boolean isImplicit)", "class_method_signature": "FtpRetriever.connectToFtpServer(String server, String username,\n                String password, String conType, String protocol, boolean isImplicit)", "testcase": false, "constructor": false}, {"identifier": "connectToSftpServer", "parameters": "(String server, String username, String password)", "modifiers": "public", "return": "Session", "signature": "Session connectToSftpServer(String server, String username, String password)", "full_signature": "public Session connectToSftpServer(String server, String username, String password)", "class_method_signature": "FtpRetriever.connectToSftpServer(String server, String username, String password)", "testcase": false, "constructor": false}, {"identifier": "readFromFtpServer", "parameters": "(FTPClient client, String filePath)", "modifiers": "public", "return": "ByteArrayOutputStream", "signature": "ByteArrayOutputStream readFromFtpServer(FTPClient client, String filePath)", "full_signature": "public ByteArrayOutputStream readFromFtpServer(FTPClient client, String filePath)", "class_method_signature": "FtpRetriever.readFromFtpServer(FTPClient client, String filePath)", "testcase": false, "constructor": false}, {"identifier": "createChannelFromSession", "parameters": "(Session session)", "modifiers": "public", "return": "ChannelSftp", "signature": "ChannelSftp createChannelFromSession(Session session)", "full_signature": "public ChannelSftp createChannelFromSession(Session session)", "class_method_signature": "FtpRetriever.createChannelFromSession(Session session)", "testcase": false, "constructor": false}, {"identifier": "readFromSftpServer", "parameters": "(ChannelSftp sftpChannel, String fileName)", "modifiers": "public", "return": "ByteArrayOutputStream", "signature": "ByteArrayOutputStream readFromSftpServer(ChannelSftp sftpChannel, String fileName)", "full_signature": "public ByteArrayOutputStream readFromSftpServer(ChannelSftp sftpChannel, String fileName)", "class_method_signature": "FtpRetriever.readFromSftpServer(ChannelSftp sftpChannel, String fileName)", "testcase": false, "constructor": false}, {"identifier": "obtainDomainName", "parameters": "(String url)", "modifiers": "public", "return": "String", "signature": "String obtainDomainName(String url)", "full_signature": "public String obtainDomainName(String url)", "class_method_signature": "FtpRetriever.obtainDomainName(String url)", "testcase": false, "constructor": false}, {"identifier": "quietClose", "parameters": "(Closeable closeable)", "modifiers": "public", "return": "void", "signature": "void quietClose(Closeable closeable)", "full_signature": "public void quietClose(Closeable closeable)", "class_method_signature": "FtpRetriever.quietClose(Closeable closeable)", "testcase": false, "constructor": false}], "file": "objectRecognitionSource/src/main/java/io/vantiq/extsrc/objectRecognition/imageRetriever/FtpRetriever.java"}, "focal_method": {"identifier": "setupDataRetrieval", "parameters": "(Map<String, ?> dataSourceConfig, ObjectRecognitionCore source)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void setupDataRetrieval(Map<String, ?> dataSourceConfig, ObjectRecognitionCore source) throws Exception {\n        log = LoggerFactory.getLogger(this.getClass().getCanonicalName() + \"#\" + source.getSourceName());\n        \n        // Return and don't save values if the config doesn't want a default\n        if (dataSourceConfig.get(NO_DEFAULT) instanceof Boolean && (Boolean) dataSourceConfig.get(NO_DEFAULT)) {\n            noDefault = true;\n            return;\n        }\n        \n        // Get the domain name to connect to\n        if (dataSourceConfig.get(SERVER) instanceof String) {\n            server = obtainDomainName((String) dataSourceConfig.get(SERVER));\n        } else {\n            throw new Exception(this.getClass().getCanonicalName() + \".noServerSpecified: \"\n                    + \"No server was specified in the configuration setup.\" );\n        }\n        \n        // Setup for FTP/FTPS/SFTP based on the config. Default to FTP\n        if (dataSourceConfig.get(CON_TYPE) instanceof String) {\n            String type = (String) dataSourceConfig.get(CON_TYPE);\n            if (type.equalsIgnoreCase(FTPS)) {\n                conType = FTPS;\n                // FTPS has a few more options available\n                if (dataSourceConfig.get(IMPLICIT) instanceof Boolean && (Boolean) dataSourceConfig.get(IMPLICIT)) {\n                    isImplicit = true;\n                }\n                if (dataSourceConfig.get(PROTOCOL) instanceof String) {\n                    protocol = (String) dataSourceConfig.get(PROTOCOL);\n                }\n            } else if (type.equalsIgnoreCase(SFTP)) {\n                conType = SFTP;\n            } else if (!type.equalsIgnoreCase(FTP)) {\n                log.warn(\"Unexpected value of 'conType'. Should be 'ftps', 'sftp', or 'ftp'. Defaulting to 'ftp'\");\n            }\n        }\n        \n        // Obtain the username and password\n        if (dataSourceConfig.get(USERNAME) instanceof String) {\n            username = (String) dataSourceConfig.get(USERNAME);\n        } else {\n            throw new Exception(this.getClass().getCanonicalName() + \".noUsername: \"\n                    + \"No username was given in the configuration setup\");\n        }\n        if (dataSourceConfig.get(PASSWORD) instanceof String) {\n            password = (String) dataSourceConfig.get(\"password\");\n        } else {\n            throw new Exception(this.getClass().getCanonicalName() + \".noPassword: \"\n                    + \"No password was given in the configuration setup\");\n        }\n        \n        // Connect to the file server using the requested connection type\n        if (conType == FTP || conType == FTPS) { \n            try {\n                ftpClient = connectToFtpServer(server, username, password, conType, protocol, isImplicit);\n            } catch (Exception e) {\n                // Use the base message of the exception thrown, but add the error-specifier \n                throw new Exception(this.getClass().getCanonicalName() + \".\" + e.getMessage()\n                , e);\n            }\n        } else {\n            try {\n                session = connectToSftpServer(server, username, password);\n            } catch (Exception e) {\n                // Use the base message of the exception thrown, but add the error-specifier \n                throw new Exception(this.getClass().getCanonicalName() + \".\" + e.getMessage()\n                , e);\n            }\n        }\n    }", "signature": "void setupDataRetrieval(Map<String, ?> dataSourceConfig, ObjectRecognitionCore source)", "full_signature": "@Override public void setupDataRetrieval(Map<String, ?> dataSourceConfig, ObjectRecognitionCore source)", "class_method_signature": "FtpRetriever.setupDataRetrieval(Map<String, ?> dataSourceConfig, ObjectRecognitionCore source)", "testcase": false, "constructor": false, "invocations": ["getLogger", "getCanonicalName", "getClass", "getSourceName", "get", "get", "get", "obtainDomainName", "get", "getCanonicalName", "getClass", "get", "get", "equalsIgnoreCase", "get", "get", "get", "get", "equalsIgnoreCase", "equalsIgnoreCase", "warn", "get", "get", "getCanonicalName", "getClass", "get", "get", "getCanonicalName", "getClass", "connectToFtpServer", "getCanonicalName", "getClass", "getMessage", "connectToSftpServer", "getCanonicalName", "getClass", "getMessage"]}, "repository": {"repo_id": 141492069, "url": "https://github.com/Vantiq/vantiq-extension-sources", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 9, "size": 16261, "license": "licensed"}}