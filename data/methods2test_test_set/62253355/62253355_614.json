{"test_class": {"identifier": "CleanRepositoryCacheTest", "superclass": "extends OrmEnabledTestCase", "interfaces": "", "fields": [{"original_string": "private CleanRepositoryCache cleanJob;", "modifier": "private", "type": "CleanRepositoryCache", "declarator": "cleanJob", "var_name": "cleanJob"}, {"original_string": "private Repository repo;", "modifier": "private", "type": "Repository", "declarator": "repo", "var_name": "repo"}, {"original_string": "private ValueFactory vf;", "modifier": "private", "type": "ValueFactory", "declarator": "vf", "var_name": "vf"}, {"original_string": "private IRI dataset1;", "modifier": "private", "type": "IRI", "declarator": "dataset1", "var_name": "dataset1"}, {"original_string": "private IRI dataset2;", "modifier": "private", "type": "IRI", "declarator": "dataset2", "var_name": "dataset2"}, {"original_string": "@Mock\n    private DatasetManager datasetManager;", "modifier": "@Mock\n    private", "type": "DatasetManager", "declarator": "datasetManager", "var_name": "datasetManager"}, {"original_string": "@Mock\n    private RepositoryManager repoManager;", "modifier": "@Mock\n    private", "type": "RepositoryManager", "declarator": "repoManager", "var_name": "repoManager"}, {"original_string": "@Mock\n    private JobContext jobContext;", "modifier": "@Mock\n    private", "type": "JobContext", "declarator": "jobContext", "var_name": "jobContext"}], "file": "com.mobi.cache.impl.repository/src/test/java/com/mobi/cache/impl/repository/CleanRepositoryCacheTest.java"}, "test_case": {"identifier": "executeEmptyRepoTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void executeEmptyRepoTest() {\n        cleanJob.execute(jobContext);\n        verify(repoManager).getRepository(\"ontologyCache\");\n        verify(datasetManager, never()).safeDeleteDataset(any(Resource.class), anyString(), anyBoolean());\n    }", "signature": "void executeEmptyRepoTest()", "full_signature": "@Test public void executeEmptyRepoTest()", "class_method_signature": "CleanRepositoryCacheTest.executeEmptyRepoTest()", "testcase": true, "constructor": false, "invocations": ["execute", "getRepository", "verify", "safeDeleteDataset", "verify", "never", "any", "anyString", "anyBoolean"]}, "focal_class": {"identifier": "CleanRepositoryCache", "superclass": "", "interfaces": "implements Job", "fields": [{"original_string": "private final Logger log = LoggerFactory.getLogger(CleanRepositoryCache.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(CleanRepositoryCache.class)", "var_name": "log"}, {"original_string": "static final String COMPONENT_NAME = \"com.mobi.cache.impl.repository.CleanRepositoryCache\";", "modifier": "static final", "type": "String", "declarator": "COMPONENT_NAME = \"com.mobi.cache.impl.repository.CleanRepositoryCache\"", "var_name": "COMPONENT_NAME"}, {"original_string": "private DatasetManager datasetManager;", "modifier": "private", "type": "DatasetManager", "declarator": "datasetManager", "var_name": "datasetManager"}, {"original_string": "private RepositoryManager repositoryManager;", "modifier": "private", "type": "RepositoryManager", "declarator": "repositoryManager", "var_name": "repositoryManager"}, {"original_string": "private ValueFactory vf;", "modifier": "private", "type": "ValueFactory", "declarator": "vf", "var_name": "vf"}, {"original_string": "private String repoId;", "modifier": "private", "type": "String", "declarator": "repoId", "var_name": "repoId"}, {"original_string": "private long expirySeconds;", "modifier": "private", "type": "long", "declarator": "expirySeconds", "var_name": "expirySeconds"}], "methods": [{"identifier": "setDatasetManager", "parameters": "(DatasetManager datasetManager)", "modifiers": "@Reference public", "return": "void", "signature": "void setDatasetManager(DatasetManager datasetManager)", "full_signature": "@Reference public void setDatasetManager(DatasetManager datasetManager)", "class_method_signature": "CleanRepositoryCache.setDatasetManager(DatasetManager datasetManager)", "testcase": false, "constructor": false}, {"identifier": "setRepositoryManager", "parameters": "(RepositoryManager repositoryManager)", "modifiers": "@Reference public", "return": "void", "signature": "void setRepositoryManager(RepositoryManager repositoryManager)", "full_signature": "@Reference public void setRepositoryManager(RepositoryManager repositoryManager)", "class_method_signature": "CleanRepositoryCache.setRepositoryManager(RepositoryManager repositoryManager)", "testcase": false, "constructor": false}, {"identifier": "setValueFactory", "parameters": "(ValueFactory vf)", "modifiers": "@Reference public", "return": "void", "signature": "void setValueFactory(ValueFactory vf)", "full_signature": "@Reference public void setValueFactory(ValueFactory vf)", "class_method_signature": "CleanRepositoryCache.setValueFactory(ValueFactory vf)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "(Map<String, Object> props)", "modifiers": "@Activate public", "return": "void", "signature": "void start(Map<String, Object> props)", "full_signature": "@Activate public void start(Map<String, Object> props)", "class_method_signature": "CleanRepositoryCache.start(Map<String, Object> props)", "testcase": false, "constructor": false}, {"identifier": "modified", "parameters": "(Map<String, Object> props)", "modifiers": "@Modified protected", "return": "void", "signature": "void modified(Map<String, Object> props)", "full_signature": "@Modified protected void modified(Map<String, Object> props)", "class_method_signature": "CleanRepositoryCache.modified(Map<String, Object> props)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(JobContext context)", "modifiers": "@Override public", "return": "void", "signature": "void execute(JobContext context)", "full_signature": "@Override public void execute(JobContext context)", "class_method_signature": "CleanRepositoryCache.execute(JobContext context)", "testcase": false, "constructor": false}], "file": "com.mobi.cache.impl.repository/src/main/java/com/mobi/cache/impl/repository/CleanRepositoryCache.java"}, "focal_method": {"identifier": "execute", "parameters": "(JobContext context)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void execute(JobContext context) {\n        log.trace(\"Starting CleanRepositoryCache Job\");\n        long startTime = System.currentTimeMillis();\n        Repository cacheRepo = repositoryManager.getRepository(repoId)\n                .orElseThrow(() -> new IllegalStateException(\"Ontology Cache Repository\" + repoId + \" must exist\"));\n\n        try (RepositoryConnection conn = cacheRepo.getConnection()) {\n            List<Statement> statements = RepositoryResults.asList(\n                    conn.getStatements(null, vf.createIRI(OntologyDatasets.TIMESTAMP_IRI_STRING), null));\n\n            OffsetDateTime now = OffsetDateTime.now();\n            statements.forEach(statement -> {\n                if (now.isAfter(OffsetDateTime.parse(statement.getObject().stringValue()).plusSeconds(expirySeconds))) {\n                    log.debug(\"Evicting expired dataset: \" + statement.getSubject().stringValue());\n                    datasetManager.safeDeleteDataset(statement.getSubject(), repoId, false);\n                }\n            });\n        }\n        log.trace(\"CleanRepositoryCache Job complete in \" + (System.currentTimeMillis() - startTime) + \" ms\");\n    }", "signature": "void execute(JobContext context)", "full_signature": "@Override public void execute(JobContext context)", "class_method_signature": "CleanRepositoryCache.execute(JobContext context)", "testcase": false, "constructor": false, "invocations": ["trace", "currentTimeMillis", "orElseThrow", "getRepository", "getConnection", "asList", "getStatements", "createIRI", "now", "forEach", "isAfter", "plusSeconds", "parse", "stringValue", "getObject", "debug", "stringValue", "getSubject", "safeDeleteDataset", "getSubject", "trace", "currentTimeMillis"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}