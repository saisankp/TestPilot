{"test_class": {"identifier": "DefaultTransactionManagerLookupTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TransactionManagerLookup txLookup;", "modifier": "private", "type": "TransactionManagerLookup", "declarator": "txLookup", "var_name": "txLookup"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/txn/DefaultTransactionManagerLookupTest.java"}, "test_case": {"identifier": "shouldDetectJBossJTAStandaloneJTAManager", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldDetectJBossJTAStandaloneJTAManager() throws Exception {\n        //JBoss JTA (Narayana) is used by default with the 'test' scope, so just test that the lookup picks this up by default\n        TransactionManager transactionManager = txLookup.getTransactionManager();\n        assertNotNull(transactionManager);\n        assertTrue(transactionManager.getClass().getName().contains(\"arjuna\"));\n        transactionManager.begin();\n        Transaction tx = transactionManager.getTransaction();\n        assertNotNull(tx);\n        tx.commit();\n    }", "signature": "void shouldDetectJBossJTAStandaloneJTAManager()", "full_signature": "@Test public void shouldDetectJBossJTAStandaloneJTAManager()", "class_method_signature": "DefaultTransactionManagerLookupTest.shouldDetectJBossJTAStandaloneJTAManager()", "testcase": true, "constructor": false, "invocations": ["getTransactionManager", "assertNotNull", "assertTrue", "contains", "getName", "getClass", "begin", "getTransaction", "assertNotNull", "commit"]}, "focal_class": {"identifier": "DefaultTransactionManagerLookup", "superclass": "", "interfaces": "implements TransactionManagerLookup", "fields": [{"original_string": "private static final List<String> JNDI_BINDINGS = Arrays.asList(\"java:jboss/TransactionManager\",\n                                                                    \"java:comp/TransactionManager\",\n                                                                    \"java:comp/UserTransaction\",\n                                                                    \"java:/TransactionManager\",\n                                                                    \"java:appserver/TransactionManager\",\n                                                                    \"java:pm/TransactionManager\",\n                                                                    \"javax.transaction.TransactionManager\",\n                                                                    \"osgi:service/javax.transaction.TransactionManager\");", "modifier": "private static final", "type": "List<String>", "declarator": "JNDI_BINDINGS = Arrays.asList(\"java:jboss/TransactionManager\",\n                                                                    \"java:comp/TransactionManager\",\n                                                                    \"java:comp/UserTransaction\",\n                                                                    \"java:/TransactionManager\",\n                                                                    \"java:appserver/TransactionManager\",\n                                                                    \"java:pm/TransactionManager\",\n                                                                    \"javax.transaction.TransactionManager\",\n                                                                    \"osgi:service/javax.transaction.TransactionManager\")", "var_name": "JNDI_BINDINGS"}, {"original_string": "private static final Logger LOGGER = Logger.getLogger(DefaultTransactionManagerLookup.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(DefaultTransactionManagerLookup.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "getTransactionManager", "parameters": "()", "modifiers": "@Override public", "return": "TransactionManager", "signature": "TransactionManager getTransactionManager()", "full_signature": "@Override public TransactionManager getTransactionManager()", "class_method_signature": "DefaultTransactionManagerLookup.getTransactionManager()", "testcase": false, "constructor": false}, {"identifier": "getTransactionManagerSuppliers", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") protected", "return": "Supplier<Optional<TransactionManager>>[]", "signature": "Supplier<Optional<TransactionManager>>[] getTransactionManagerSuppliers()", "full_signature": "@SuppressWarnings(\"unchecked\") protected Supplier<Optional<TransactionManager>>[] getTransactionManagerSuppliers()", "class_method_signature": "DefaultTransactionManagerLookup.getTransactionManagerSuppliers()", "testcase": false, "constructor": false}, {"identifier": "lookForAtomikosJTA", "parameters": "()", "modifiers": "protected", "return": "Optional<TransactionManager>", "signature": "Optional<TransactionManager> lookForAtomikosJTA()", "full_signature": "protected Optional<TransactionManager> lookForAtomikosJTA()", "class_method_signature": "DefaultTransactionManagerLookup.lookForAtomikosJTA()", "testcase": false, "constructor": false}, {"identifier": "lookForStandaloneJBossJTA", "parameters": "()", "modifiers": "protected", "return": "Optional<TransactionManager>", "signature": "Optional<TransactionManager> lookForStandaloneJBossJTA()", "full_signature": "protected Optional<TransactionManager> lookForStandaloneJBossJTA()", "class_method_signature": "DefaultTransactionManagerLookup.lookForStandaloneJBossJTA()", "testcase": false, "constructor": false}, {"identifier": "lookInJNDI", "parameters": "()", "modifiers": "private", "return": "Optional<TransactionManager>", "signature": "Optional<TransactionManager> lookInJNDI()", "full_signature": "private Optional<TransactionManager> lookInJNDI()", "class_method_signature": "DefaultTransactionManagerLookup.lookInJNDI()", "testcase": false, "constructor": false}, {"identifier": "lookForJNDIName", "parameters": "(String jndiName)", "modifiers": "private", "return": "TransactionManager", "signature": "TransactionManager lookForJNDIName(String jndiName)", "full_signature": "private TransactionManager lookForJNDIName(String jndiName)", "class_method_signature": "DefaultTransactionManagerLookup.lookForJNDIName(String jndiName)", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/txn/DefaultTransactionManagerLookup.java"}, "focal_method": {"identifier": "getTransactionManager", "parameters": "()", "modifiers": "@Override public", "return": "TransactionManager", "body": "@Override\n    public TransactionManager getTransactionManager() {\n        return Stream.of(getTransactionManagerSuppliers())\n                     .map(Supplier::get)\n                     .filter(Optional::isPresent)\n                     .map(Optional::get)\n                     .peek((transactionManager) ->\n                                   LOGGER.debug(\"Found tx manager '{0}'\", transactionManager.getClass().getName()))\n                     .findFirst()\n                     .orElseGet(() -> {\n                         LOGGER.debug(JcrI18n.warnNoTxManagerFound.text());\n                         return new LocalTransactionManager();\n                     });\n    }", "signature": "TransactionManager getTransactionManager()", "full_signature": "@Override public TransactionManager getTransactionManager()", "class_method_signature": "DefaultTransactionManagerLookup.getTransactionManager()", "testcase": false, "constructor": false, "invocations": ["orElseGet", "findFirst", "peek", "map", "filter", "map", "of", "getTransactionManagerSuppliers", "debug", "getName", "getClass", "debug", "text"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}