{"test_class": {"identifier": "DLeftCountingBloomFilterTest", "superclass": "", "interfaces": "", "fields": [], "file": "ml/streaminer/src/test/java/org/streaminer/stream/membership/DLeftCountingBloomFilterTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test() throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n        \n        byte[] b = md.digest(\"testf\".getBytes());\n        \n        String hex = byteArrayToHexString(b);\n        \n        System.out.println(\"Byte size: \" + b.length);\n        System.out.println(\"Hex: \" + hex);\n        \n        DLeftCountingBloomFilter filter = new DLeftCountingBloomFilter(8, 32);\n        \n        long bits = filter.getBits(b, 5, 0);\n        System.out.println(\"Bits: \" + bits);\n    }", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "DLeftCountingBloomFilterTest.test()", "testcase": true, "constructor": false, "invocations": ["getInstance", "digest", "getBytes", "byteArrayToHexString", "println", "println", "getBits", "println"]}, "focal_class": {"identifier": "DLeftCountingBloomFilter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int HASH_BYTES = 20;", "modifier": "private static final", "type": "int", "declarator": "HASH_BYTES = 20", "var_name": "HASH_BYTES"}, {"original_string": "private static final int BUCKET_HEIGHT = 8;", "modifier": "private static final", "type": "int", "declarator": "BUCKET_HEIGHT = 8", "var_name": "BUCKET_HEIGHT"}, {"original_string": "private static final int FINGERPRINT_BITS = 13;", "modifier": "private static final", "type": "int", "declarator": "FINGERPRINT_BITS = 13", "var_name": "FINGERPRINT_BITS"}, {"original_string": "private int width;", "modifier": "private", "type": "int", "declarator": "width", "var_name": "width"}, {"original_string": "private int height;", "modifier": "private", "type": "int", "declarator": "height", "var_name": "height"}, {"original_string": "private long bits;", "modifier": "private", "type": "long", "declarator": "bits", "var_name": "bits"}, {"original_string": "private Bucket[][] buckets;", "modifier": "private", "type": "Bucket[][]", "declarator": "buckets", "var_name": "buckets"}], "methods": [{"identifier": "DLeftCountingBloomFilter", "parameters": "(int d, int b)", "modifiers": "public", "return": "", "signature": " DLeftCountingBloomFilter(int d, int b)", "full_signature": "public  DLeftCountingBloomFilter(int d, int b)", "class_method_signature": "DLeftCountingBloomFilter.DLeftCountingBloomFilter(int d, int b)", "testcase": false, "constructor": true}, {"identifier": "getTargets", "parameters": "(byte[] hash)", "modifiers": "private", "return": "void", "signature": "void getTargets(byte[] hash)", "full_signature": "private void getTargets(byte[] hash)", "class_method_signature": "DLeftCountingBloomFilter.getTargets(byte[] hash)", "testcase": false, "constructor": false}, {"identifier": "getBits", "parameters": "(byte[] input, long numBits, int pos)", "modifiers": "protected", "return": "long", "signature": "long getBits(byte[] input, long numBits, int pos)", "full_signature": "protected long getBits(byte[] input, long numBits, int pos)", "class_method_signature": "DLeftCountingBloomFilter.getBits(byte[] input, long numBits, int pos)", "testcase": false, "constructor": false}], "file": "ml/streaminer/src/main/java/org/streaminer/stream/membership/DLeftCountingBloomFilter.java"}, "focal_method": {"identifier": "getBits", "parameters": "(byte[] input, long numBits, int pos)", "modifiers": "protected", "return": "long", "body": "protected long getBits(byte[] input, long numBits, int pos) {\n        long value = 0;\n        long postBits = pos % 8;\n        int i = pos/8;\n        long start = postBits > numBits ? numBits : postBits;\n        \n        if (start != 0) {\n            value = input[i++] & (0xFF >> (8 - start));\n            numBits -= start;\n        }\n        while (numBits >= 8) {\n            value = (value << 8) | input[i++];\n            numBits -= 8;\n        }\n        if (numBits != 0) {\n            long last = (input[i] >> (8 - numBits));\n            value = (value << numBits) | last;\n        }\n        return value;\n    }", "signature": "long getBits(byte[] input, long numBits, int pos)", "full_signature": "protected long getBits(byte[] input, long numBits, int pos)", "class_method_signature": "DLeftCountingBloomFilter.getBits(byte[] input, long numBits, int pos)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}