{"test_class": {"identifier": "JavaGetterFilterTest", "superclass": "", "interfaces": "", "fields": [], "file": "recipe-generator/src/test/java/ca/derekcormier/recipe/generator/filter/JavaGetterFilterTest.java"}, "test_case": {"identifier": "testApply_prependsIsForFlagParam", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testApply_prependsIsForFlagParam() {\n    JavaGetterFilter filter = new JavaGetterFilter();\n\n    assertEquals(\"isFoobar\", filter.apply(param(\"foobar\", \"flag\")));\n  }", "signature": "void testApply_prependsIsForFlagParam()", "full_signature": "@Test public void testApply_prependsIsForFlagParam()", "class_method_signature": "JavaGetterFilterTest.testApply_prependsIsForFlagParam()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "apply", "param"]}, "focal_class": {"identifier": "JavaGetterFilter", "superclass": "extends Filter", "interfaces": "", "fields": [{"original_string": "private static String[] objectMethodNames;", "modifier": "private static", "type": "String[]", "declarator": "objectMethodNames", "var_name": "objectMethodNames"}], "methods": [{"identifier": "JavaGetterFilter", "parameters": "()", "modifiers": "public", "return": "", "signature": " JavaGetterFilter()", "full_signature": "public  JavaGetterFilter()", "class_method_signature": "JavaGetterFilter.JavaGetterFilter()", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(Object value, Object... params)", "modifiers": "@Override public", "return": "Object", "signature": "Object apply(Object value, Object... params)", "full_signature": "@Override public Object apply(Object value, Object... params)", "class_method_signature": "JavaGetterFilter.apply(Object value, Object... params)", "testcase": false, "constructor": false}], "file": "recipe-generator/src/main/java/ca/derekcormier/recipe/generator/filter/JavaGetterFilter.java"}, "focal_method": {"identifier": "apply", "parameters": "(Object value, Object... params)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n  public Object apply(Object value, Object... params) {\n    Map<String, Object> param = (Map<String, Object>) value;\n    String name = (String) param.get(\"name\");\n    String type = (String) param.get(\"type\");\n    boolean compound = param.containsKey(\"compound\") && (boolean) param.get(\"compound\");\n\n    name = name.substring(0, 1).toUpperCase() + name.substring(1);\n\n    if (!compound && (type.equals(\"boolean\") || type.equals(\"flag\"))) {\n      value = \"is\" + name;\n    } else {\n      value = \"get\" + name;\n    }\n\n    if (Arrays.binarySearch(objectMethodNames, value) >= 0) {\n      value += \"_\";\n    }\n    return value;\n  }", "signature": "Object apply(Object value, Object... params)", "full_signature": "@Override public Object apply(Object value, Object... params)", "class_method_signature": "JavaGetterFilter.apply(Object value, Object... params)", "testcase": false, "constructor": false, "invocations": ["get", "get", "containsKey", "get", "toUpperCase", "substring", "substring", "equals", "equals", "binarySearch"]}, "repository": {"repo_id": 97669395, "url": "https://github.com/kormide/recipe", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 727, "license": "licensed"}}