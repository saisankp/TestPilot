{"test_class": {"identifier": "FulfillPoliciesTest", "superclass": "extends TestWithGitBackedRepository", "interfaces": "", "fields": [{"original_string": "private static final org.slf4j.Logger LOGGER = LoggerFactory.getLogger(FulfillPoliciesTest.class);", "modifier": "private static final", "type": "org.slf4j.Logger", "declarator": "LOGGER = LoggerFactory.getLogger(FulfillPoliciesTest.class)", "var_name": "LOGGER"}, {"original_string": "private TopologyWrapper topology;", "modifier": "private", "type": "TopologyWrapper", "declarator": "topology", "var_name": "topology"}], "file": "org.eclipse.winery.repository/src/test/java/org/eclipse/winery/repository/targetallocation/criteria/fulfillpolicies/FulfillPoliciesTest.java"}, "test_case": {"identifier": "testFilter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFilter() throws Exception {\n        Criteria minConnections = new MinExternalConnections(null, Integer.MAX_VALUE);\n        List<TopologyWrapper> topologies = minConnections.allocate(topology);\n        if (topologies.size() != 4) {\n            LOGGER.debug(\"Min cut algorithm didn't find all results\");\n            return;\n        }\n        boolean rightResultPresent = false;\n        for (TopologyWrapper topology : topologies) {\n            TTopologyTemplate topologyTemplate = topology.getTopology();\n            TNodeTemplate pony3 = topologyTemplate.getNodeTemplate(\"shetland_pony_3\");\n            TNodeTemplate pony4 = topologyTemplate.getNodeTemplate(\"shetland_pony_4\");\n            if (ModelUtilities.getTargetLabel(pony3).get().equals(\"PastureProvider\") &&\n                ModelUtilities.getTargetLabel(pony4).get().equals(\"FieldProvider\")) {\n                LOGGER.debug(\"Right result present\");\n                rightResultPresent = true;\n                break;\n            }\n        }\n        if (!rightResultPresent) {\n            LOGGER.debug(\"Min cut algorithm didn't find needed result\");\n            return;\n        }\n\n        JsonNode params = JacksonProvider.mapper.readTree(\"{\\\"policySelection\\\":[\" +\n            \"{\\\"policy\\\":\\\"floorwarmth10\\\",\\\"property\\\":\\\"warmth\\\",\\\"operator\\\":\\\"min\\\"},\" +\n            \"{\\\"policy\\\":\\\"floorwarmth30\\\",\\\"property\\\":\\\"warmth\\\",\\\"operator\\\":\\\"max\\\"}]}\");\n        Criteria fulfillPolicies = new FulfillPolicies(params, Integer.MAX_VALUE);\n        topologies = fulfillPolicies.filter(topologies);\n        assertEquals(1, topologies.size());\n\n        TTopologyTemplate allocated = topologies.get(0).getTopology();\n        assertEquals(6, allocated.getNodeTemplates().size());\n        // set by criteria\n        assertEquals(\"PastureProvider\",\n            ModelUtilities.getTargetLabel(allocated.getNodeTemplate(\"shetland_pony_3\")).get());\n        assertEquals(\"FieldProvider\",\n            ModelUtilities.getTargetLabel(allocated.getNodeTemplate(\"shetland_pony_4\")).get());\n        // set by user\n        assertEquals(\"PastureProvider\",\n            ModelUtilities.getTargetLabel(allocated.getNodeTemplate(\"shetland_pony\")).get());\n        assertEquals(\"FieldProvider\",\n            ModelUtilities.getTargetLabel(allocated.getNodeTemplate(\"shetland_pony_2\")).get());\n    }", "signature": "void testFilter()", "full_signature": "@Test public void testFilter()", "class_method_signature": "FulfillPoliciesTest.testFilter()", "testcase": true, "constructor": false, "invocations": ["allocate", "size", "debug", "getTopology", "getNodeTemplate", "getNodeTemplate", "equals", "get", "getTargetLabel", "equals", "get", "getTargetLabel", "debug", "debug", "readTree", "filter", "assertEquals", "size", "getTopology", "get", "assertEquals", "size", "getNodeTemplates", "assertEquals", "get", "getTargetLabel", "getNodeTemplate", "assertEquals", "get", "getTargetLabel", "getNodeTemplate", "assertEquals", "get", "getTargetLabel", "getNodeTemplate", "assertEquals", "get", "getTargetLabel", "getNodeTemplate"]}, "focal_class": {"identifier": "FulfillPolicies", "superclass": "extends CriteriaCached", "interfaces": "", "fields": [], "methods": [{"identifier": "FulfillPolicies", "parameters": "(JsonNode params, int outputCap)", "modifiers": "public", "return": "", "signature": " FulfillPolicies(JsonNode params, int outputCap)", "full_signature": "public  FulfillPolicies(JsonNode params, int outputCap)", "class_method_signature": "FulfillPolicies.FulfillPolicies(JsonNode params, int outputCap)", "testcase": false, "constructor": true}, {"identifier": "filter", "parameters": "(List<TopologyWrapper> topologies)", "modifiers": "@Override public", "return": "List<TopologyWrapper>", "signature": "List<TopologyWrapper> filter(List<TopologyWrapper> topologies)", "full_signature": "@Override public List<TopologyWrapper> filter(List<TopologyWrapper> topologies)", "class_method_signature": "FulfillPolicies.filter(List<TopologyWrapper> topologies)", "testcase": false, "constructor": false}, {"identifier": "generateTargetLabelTopologies", "parameters": "(TopologyWrapper topology)", "modifiers": "@Override public", "return": "List<TopologyWrapper>", "signature": "List<TopologyWrapper> generateTargetLabelTopologies(TopologyWrapper topology)", "full_signature": "@Override public List<TopologyWrapper> generateTargetLabelTopologies(TopologyWrapper topology)", "class_method_signature": "FulfillPolicies.generateTargetLabelTopologies(TopologyWrapper topology)", "testcase": false, "constructor": false}, {"identifier": "assignTargetLabels", "parameters": "(TopologyWrapper topology)", "modifiers": "private", "return": "Map<TNodeTemplate, Set<String>>", "signature": "Map<TNodeTemplate, Set<String>> assignTargetLabels(TopologyWrapper topology)", "full_signature": "private Map<TNodeTemplate, Set<String>> assignTargetLabels(TopologyWrapper topology)", "class_method_signature": "FulfillPolicies.assignTargetLabels(TopologyWrapper topology)", "testcase": false, "constructor": false}, {"identifier": "getPossibleMatches", "parameters": "(TopologyWrapper topology)", "modifiers": "@Override protected", "return": "List<List<PermutationHelper>>", "signature": "List<List<PermutationHelper>> getPossibleMatches(TopologyWrapper topology)", "full_signature": "@Override protected List<List<PermutationHelper>> getPossibleMatches(TopologyWrapper topology)", "class_method_signature": "FulfillPolicies.getPossibleMatches(TopologyWrapper topology)", "testcase": false, "constructor": false}, {"identifier": "getPoliciesForNTs", "parameters": "(TopologyWrapper topology, JsonNode params)", "modifiers": "private", "return": "Map<TNodeTemplate, List<PolicyWrapper>>", "signature": "Map<TNodeTemplate, List<PolicyWrapper>> getPoliciesForNTs(TopologyWrapper topology, JsonNode params)", "full_signature": "private Map<TNodeTemplate, List<PolicyWrapper>> getPoliciesForNTs(TopologyWrapper topology, JsonNode params)", "class_method_signature": "FulfillPolicies.getPoliciesForNTs(TopologyWrapper topology, JsonNode params)", "testcase": false, "constructor": false}, {"identifier": "getNTsWithPolicies", "parameters": "(TopologyWrapper topology)", "modifiers": "private", "return": "List<TNodeTemplate>", "signature": "List<TNodeTemplate> getNTsWithPolicies(TopologyWrapper topology)", "full_signature": "private List<TNodeTemplate> getNTsWithPolicies(TopologyWrapper topology)", "class_method_signature": "FulfillPolicies.getNTsWithPolicies(TopologyWrapper topology)", "testcase": false, "constructor": false}, {"identifier": "mapFragmentsByNTs", "parameters": "(Map<TNodeTemplate, List<TTopologyTemplate>> fragments,\n                                                                          List<TTopologyTemplate> fragmentsFulfillingPolicies)", "modifiers": "private", "return": "Map<TNodeTemplate, List<TTopologyTemplate>>", "signature": "Map<TNodeTemplate, List<TTopologyTemplate>> mapFragmentsByNTs(Map<TNodeTemplate, List<TTopologyTemplate>> fragments,\n                                                                          List<TTopologyTemplate> fragmentsFulfillingPolicies)", "full_signature": "private Map<TNodeTemplate, List<TTopologyTemplate>> mapFragmentsByNTs(Map<TNodeTemplate, List<TTopologyTemplate>> fragments,\n                                                                          List<TTopologyTemplate> fragmentsFulfillingPolicies)", "class_method_signature": "FulfillPolicies.mapFragmentsByNTs(Map<TNodeTemplate, List<TTopologyTemplate>> fragments,\n                                                                          List<TTopologyTemplate> fragmentsFulfillingPolicies)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(TopologyWrapper topology)", "modifiers": "@Override protected", "return": "void", "signature": "void split(TopologyWrapper topology)", "full_signature": "@Override protected void split(TopologyWrapper topology)", "class_method_signature": "FulfillPolicies.split(TopologyWrapper topology)", "testcase": false, "constructor": false}], "file": "org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/targetallocation/criteria/fulfillpolicies/FulfillPolicies.java"}, "focal_method": {"identifier": "filter", "parameters": "(List<TopologyWrapper> topologies)", "modifiers": "@Override public", "return": "List<TopologyWrapper>", "body": "@Override\n    public List<TopologyWrapper> filter(List<TopologyWrapper> topologies) {\n        // clone to avoid altering input topologies\n        List<TopologyWrapper> cloned = topologies.stream().map(t ->\n            new TopologyWrapper(AllocationUtils.deepcopy(t.getTopology()))).collect(Collectors.toList());\n        // all generated topologies have the same policies for top level nts -> get policies from any of them\n        Map<TNodeTemplate, List<PolicyWrapper>> policiesForNTs = getPoliciesForNTs(cloned.get(0), params);\n        return new PoliciesFilter(cloned, policiesForNTs).filter();\n    }", "signature": "List<TopologyWrapper> filter(List<TopologyWrapper> topologies)", "full_signature": "@Override public List<TopologyWrapper> filter(List<TopologyWrapper> topologies)", "class_method_signature": "FulfillPolicies.filter(List<TopologyWrapper> topologies)", "testcase": false, "constructor": false, "invocations": ["collect", "map", "stream", "deepcopy", "getTopology", "toList", "getPoliciesForNTs", "get", "filter"]}, "repository": {"repo_id": 42622157, "url": "https://github.com/eclipse/winery", "stars": 34, "created": "9/17/2015 12:31:44 AM +00:00", "updates": "2020-01-22T09:32:00+00:00", "fork": "False", "license": "licensed"}}