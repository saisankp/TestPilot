{"test_class": {"identifier": "AeQaTest", "superclass": "extends AbstractOperationTest", "interfaces": "", "fields": [], "file": "photohawk-image-evaluator/src/test/java/at/ac/tuwien/photohawk/evaluation/qa/AeQaTest.java"}, "test_case": {"identifier": "evaluateTest_solid000000_solid000164", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void evaluateTest_solid000000_solid000164() {\n        BufferedImage left = BufferedImageHelper.createSolidImage(new Color(0, 0, 100));\n        BufferedImage right = BufferedImageHelper.createSolidImage(new Color(0, 1, 100));\n\n        AeQa aeQa = new AeQa();\n        TransientOperation<Float, StaticColor> op = aeQa.evaluate(left, right);\n        float[] expected = {0.0f, 1.0f, 0.0f};\n        checkOperationEqual(op, 1.0f, expected);\n    }", "signature": "void evaluateTest_solid000000_solid000164()", "full_signature": "@Test public void evaluateTest_solid000000_solid000164()", "class_method_signature": "AeQaTest.evaluateTest_solid000000_solid000164()", "testcase": true, "constructor": false, "invocations": ["createSolidImage", "createSolidImage", "evaluate", "checkOperationEqual"]}, "focal_class": {"identifier": "AeQa", "superclass": "", "interfaces": "implements Qa<Float, StaticColor>", "fields": [{"original_string": "private StaticColor threshold;", "modifier": "private", "type": "StaticColor", "declarator": "threshold", "var_name": "threshold"}], "methods": [{"identifier": "AeQa", "parameters": "()", "modifiers": "public", "return": "", "signature": " AeQa()", "full_signature": "public  AeQa()", "class_method_signature": "AeQa.AeQa()", "testcase": false, "constructor": true}, {"identifier": "threshold", "parameters": "(final StaticColor threshold)", "modifiers": "public", "return": "AeQa", "signature": "AeQa threshold(final StaticColor threshold)", "full_signature": "public AeQa threshold(final StaticColor threshold)", "class_method_signature": "AeQa.threshold(final StaticColor threshold)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(final BufferedImage left, final BufferedImage right)", "modifiers": "@Override public", "return": "TransientOperation<Float, StaticColor>", "signature": "TransientOperation<Float, StaticColor> evaluate(final BufferedImage left, final BufferedImage right)", "full_signature": "@Override public TransientOperation<Float, StaticColor> evaluate(final BufferedImage left, final BufferedImage right)", "class_method_signature": "AeQa.evaluate(final BufferedImage left, final BufferedImage right)", "testcase": false, "constructor": false}], "file": "photohawk-image-evaluator/src/main/java/at/ac/tuwien/photohawk/evaluation/qa/AeQa.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(final BufferedImage left, final BufferedImage right)", "modifiers": "@Override public", "return": "TransientOperation<Float, StaticColor>", "body": "@Override\n    public TransientOperation<Float, StaticColor> evaluate(final BufferedImage left, final BufferedImage right) {\n        // Check size\n        CheckEqualSizePreprocessor equalSize = new CheckEqualSizePreprocessor(left, right);\n        equalSize.process();\n        equalSize = null;\n\n        // Run metric\n        AEMetric metric;\n        if (threshold == null) {\n            metric = new AEMetric(new SRGBColorConverter(new ConvenientBufferedImageWrapper(left)),\n                                  new SRGBColorConverter(new ConvenientBufferedImageWrapper(right)), new Point(0, 0),\n                                  new Point(left.getWidth(), left.getHeight()));\n        } else {\n            metric = new AEMetric(new SRGBColorConverter(new ConvenientBufferedImageWrapper(left)),\n                                  new SRGBColorConverter(new ConvenientBufferedImageWrapper(right)), threshold,\n                                  new Point(0, 0), new Point(left.getWidth(), left.getHeight()));\n        }\n\n        // Evaluate\n        return metric.execute();\n    }", "signature": "TransientOperation<Float, StaticColor> evaluate(final BufferedImage left, final BufferedImage right)", "full_signature": "@Override public TransientOperation<Float, StaticColor> evaluate(final BufferedImage left, final BufferedImage right)", "class_method_signature": "AeQa.evaluate(final BufferedImage left, final BufferedImage right)", "testcase": false, "constructor": false, "invocations": ["process", "getWidth", "getHeight", "getWidth", "getHeight", "execute"]}, "repository": {"repo_id": 11614244, "url": "https://github.com/datascience/photohawk", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 6, "size": 4209, "license": "licensed"}}