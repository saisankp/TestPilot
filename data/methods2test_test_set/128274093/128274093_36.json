{"test_class": {"identifier": "SafeObserverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Disposable THROWING_DISPOSABLE = new Disposable() {\n\n        @Override\n        public boolean isDisposed() {\n            // TODO Auto-generated method stub\n            return false;\n        }\n\n        @Override\n        public void dispose() {\n            // break contract by throwing exception\n            throw new SafeObserverTestException(\"failure from unsubscribe\");\n        }\n    };", "modifier": "static final", "type": "Disposable", "declarator": "THROWING_DISPOSABLE = new Disposable() {\n\n        @Override\n        public boolean isDisposed() {\n            // TODO Auto-generated method stub\n            return false;\n        }\n\n        @Override\n        public void dispose() {\n            // break contract by throwing exception\n            throw new SafeObserverTestException(\"failure from unsubscribe\");\n        }\n    }", "var_name": "THROWING_DISPOSABLE"}], "file": "rxjava/src/test/java/io/reactivex/observers/SafeObserverTest.java"}, "test_case": {"identifier": "dispose", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void dispose() {\n        TestObserver<Integer> to = new TestObserver<Integer>();\n\n        SafeObserver<Integer> so = new SafeObserver<Integer>(to);\n\n        Disposable d = Disposables.empty();\n\n        so.onSubscribe(d);\n\n        to.dispose();\n\n        assertTrue(d.isDisposed());\n\n        assertTrue(so.isDisposed());\n    }", "signature": "void dispose()", "full_signature": "@Test public void dispose()", "class_method_signature": "SafeObserverTest.dispose()", "testcase": true, "constructor": false, "invocations": ["empty", "onSubscribe", "dispose", "assertTrue", "isDisposed", "assertTrue", "isDisposed"]}, "focal_class": {"identifier": "SafeObserver", "superclass": "", "interfaces": "implements Observer<T>, Disposable", "fields": [{"original_string": "final Observer<? super T> actual;", "modifier": "final", "type": "Observer<? super T>", "declarator": "actual", "var_name": "actual"}, {"original_string": "Disposable s;", "modifier": "", "type": "Disposable", "declarator": "s", "var_name": "s"}, {"original_string": "boolean done;", "modifier": "", "type": "boolean", "declarator": "done", "var_name": "done"}], "methods": [{"identifier": "SafeObserver", "parameters": "(@NonNull Observer<? super T> actual)", "modifiers": "public", "return": "", "signature": " SafeObserver(@NonNull Observer<? super T> actual)", "full_signature": "public  SafeObserver(@NonNull Observer<? super T> actual)", "class_method_signature": "SafeObserver.SafeObserver(@NonNull Observer<? super T> actual)", "testcase": false, "constructor": true}, {"identifier": "onSubscribe", "parameters": "(@NonNull Disposable s)", "modifiers": "@Override public", "return": "void", "signature": "void onSubscribe(@NonNull Disposable s)", "full_signature": "@Override public void onSubscribe(@NonNull Disposable s)", "class_method_signature": "SafeObserver.onSubscribe(@NonNull Disposable s)", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "SafeObserver.dispose()", "testcase": false, "constructor": false}, {"identifier": "isDisposed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDisposed()", "full_signature": "@Override public boolean isDisposed()", "class_method_signature": "SafeObserver.isDisposed()", "testcase": false, "constructor": false}, {"identifier": "onNext", "parameters": "(@NonNull T t)", "modifiers": "@Override public", "return": "void", "signature": "void onNext(@NonNull T t)", "full_signature": "@Override public void onNext(@NonNull T t)", "class_method_signature": "SafeObserver.onNext(@NonNull T t)", "testcase": false, "constructor": false}, {"identifier": "onNextNoSubscription", "parameters": "()", "modifiers": "", "return": "void", "signature": "void onNextNoSubscription()", "full_signature": " void onNextNoSubscription()", "class_method_signature": "SafeObserver.onNextNoSubscription()", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(@NonNull Throwable t)", "modifiers": "@Override public", "return": "void", "signature": "void onError(@NonNull Throwable t)", "full_signature": "@Override public void onError(@NonNull Throwable t)", "class_method_signature": "SafeObserver.onError(@NonNull Throwable t)", "testcase": false, "constructor": false}, {"identifier": "onComplete", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onComplete()", "full_signature": "@Override public void onComplete()", "class_method_signature": "SafeObserver.onComplete()", "testcase": false, "constructor": false}, {"identifier": "onCompleteNoSubscription", "parameters": "()", "modifiers": "", "return": "void", "signature": "void onCompleteNoSubscription()", "full_signature": " void onCompleteNoSubscription()", "class_method_signature": "SafeObserver.onCompleteNoSubscription()", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/observers/SafeObserver.java"}, "focal_method": {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void dispose() {\n        s.dispose();\n    }", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "SafeObserver.dispose()", "testcase": false, "constructor": false, "invocations": ["dispose"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}