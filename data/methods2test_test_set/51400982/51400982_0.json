{"test_class": {"identifier": "KafkaOffsetManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger Log = LoggerFactory.getLogger(KafkaOffsetManagerTest.class);", "modifier": "private static", "type": "Logger", "declarator": "Log = LoggerFactory.getLogger(KafkaOffsetManagerTest.class)", "var_name": "Log"}, {"original_string": "private KafkaOffsetManager validKOM;", "modifier": "private", "type": "KafkaOffsetManager", "declarator": "validKOM", "var_name": "validKOM"}, {"original_string": "private IOffsetDao dao;", "modifier": "private", "type": "IOffsetDao", "declarator": "dao", "var_name": "dao"}, {"original_string": "private List<String> topicList = Arrays.asList(\"testTopic\");", "modifier": "private", "type": "List<String>", "declarator": "topicList = Arrays.asList(\"testTopic\")", "var_name": "topicList"}, {"original_string": "@ClassRule\n    public static KafkaJunitRule kafkaRule = new KafkaJunitRule();", "modifier": "@ClassRule\n    public static", "type": "KafkaJunitRule", "declarator": "kafkaRule = new KafkaJunitRule()", "var_name": "kafkaRule"}], "file": "kom-core/src/test/java/org/ctrlr/kom/core/KafkaOffsetManagerTest.java"}, "test_case": {"identifier": "testSetOffSetsOK", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSetOffSetsOK() throws Exception {\n\n        for (String topic : topicList) {\n            Map<TopicAndPartition, Long> tap = new HashMap<>();\n            tap.put(new TopicAndPartition(topic, 1), 1L);\n            tap.put(new TopicAndPartition(topic, 2), 2L);\n\n            validKOM.setOffsets(tap);\n        }\n    }", "signature": "void testSetOffSetsOK()", "full_signature": "@Test public void testSetOffSetsOK()", "class_method_signature": "KafkaOffsetManagerTest.testSetOffSetsOK()", "testcase": true, "constructor": false, "invocations": ["put", "put", "setOffsets"]}, "focal_class": {"identifier": "KafkaOffsetManager", "superclass": "", "interfaces": "implements AutoCloseable", "fields": [{"original_string": "private static Logger Log = LoggerFactory.getLogger(KafkaOffsetManager.class);", "modifier": "private static", "type": "Logger", "declarator": "Log = LoggerFactory.getLogger(KafkaOffsetManager.class)", "var_name": "Log"}, {"original_string": "private KafkaCluster kc;", "modifier": "private", "type": "KafkaCluster", "declarator": "kc", "var_name": "kc"}, {"original_string": "private String groupid;", "modifier": "private", "type": "String", "declarator": "groupid", "var_name": "groupid"}, {"original_string": "private List<String> topicList = new ArrayList<>();", "modifier": "private", "type": "List<String>", "declarator": "topicList = new ArrayList<>()", "var_name": "topicList"}, {"original_string": "private IOffsetDao dao;", "modifier": "private", "type": "IOffsetDao", "declarator": "dao", "var_name": "dao"}, {"original_string": "private String startFrom = \"earliest\";", "modifier": "private", "type": "String", "declarator": "startFrom = \"earliest\"", "var_name": "startFrom"}], "methods": [{"identifier": "KafkaOffsetManager", "parameters": "()", "modifiers": "private", "return": "", "signature": " KafkaOffsetManager()", "full_signature": "private  KafkaOffsetManager()", "class_method_signature": "KafkaOffsetManager.KafkaOffsetManager()", "testcase": false, "constructor": true}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "KafkaOffsetManager.close()", "testcase": false, "constructor": false}, {"identifier": "getOffsets", "parameters": "()", "modifiers": "public", "return": "Map<TopicAndPartition, Long>", "signature": "Map<TopicAndPartition, Long> getOffsets()", "full_signature": "public Map<TopicAndPartition, Long> getOffsets()", "class_method_signature": "KafkaOffsetManager.getOffsets()", "testcase": false, "constructor": false}, {"identifier": "setOffsets", "parameters": "(Map<TopicAndPartition, Long> offsets)", "modifiers": "public", "return": "void", "signature": "void setOffsets(Map<TopicAndPartition, Long> offsets)", "full_signature": "public void setOffsets(Map<TopicAndPartition, Long> offsets)", "class_method_signature": "KafkaOffsetManager.setOffsets(Map<TopicAndPartition, Long> offsets)", "testcase": false, "constructor": false}, {"identifier": "getEarliestOffsets", "parameters": "()", "modifiers": "public", "return": "Map<TopicAndPartition, Long>", "signature": "Map<TopicAndPartition, Long> getEarliestOffsets()", "full_signature": "public Map<TopicAndPartition, Long> getEarliestOffsets()", "class_method_signature": "KafkaOffsetManager.getEarliestOffsets()", "testcase": false, "constructor": false}, {"identifier": "getEarliestOffsets", "parameters": "(String topic)", "modifiers": "public", "return": "Map<TopicAndPartition, Long>", "signature": "Map<TopicAndPartition, Long> getEarliestOffsets(String topic)", "full_signature": "public Map<TopicAndPartition, Long> getEarliestOffsets(String topic)", "class_method_signature": "KafkaOffsetManager.getEarliestOffsets(String topic)", "testcase": false, "constructor": false}, {"identifier": "getLatestOffsets", "parameters": "()", "modifiers": "public", "return": "Map<TopicAndPartition, Long>", "signature": "Map<TopicAndPartition, Long> getLatestOffsets()", "full_signature": "public Map<TopicAndPartition, Long> getLatestOffsets()", "class_method_signature": "KafkaOffsetManager.getLatestOffsets()", "testcase": false, "constructor": false}, {"identifier": "getLatestOffsets", "parameters": "(String topic)", "modifiers": "public", "return": "Map<TopicAndPartition, Long>", "signature": "Map<TopicAndPartition, Long> getLatestOffsets(String topic)", "full_signature": "public Map<TopicAndPartition, Long> getLatestOffsets(String topic)", "class_method_signature": "KafkaOffsetManager.getLatestOffsets(String topic)", "testcase": false, "constructor": false}, {"identifier": "getPartitionsForTopcic", "parameters": "(String topic)", "modifiers": "protected", "return": "scala.collection.immutable.Set<TopicAndPartition>", "signature": "scala.collection.immutable.Set<TopicAndPartition> getPartitionsForTopcic(String topic)", "full_signature": "protected scala.collection.immutable.Set<TopicAndPartition> getPartitionsForTopcic(String topic)", "class_method_signature": "KafkaOffsetManager.getPartitionsForTopcic(String topic)", "testcase": false, "constructor": false}], "file": "kom-core/src/main/java/org/ctrlr/kom/core/KafkaOffsetManager.java"}, "focal_method": {"identifier": "setOffsets", "parameters": "(Map<TopicAndPartition, Long> offsets)", "modifiers": "public", "return": "void", "body": "public void setOffsets(Map<TopicAndPartition, Long> offsets) throws IllegalArgumentException {\n\n        if (MapUtils.isEmpty(offsets)) {\n            throw new IllegalArgumentException(\"Offsets map can't be null or empty\");\n        }\n        if (!KafkaOffsetManagerUtils.isValidOffsetMap(offsets)) {\n            throw new IllegalArgumentException(\"Invalid offsets Map<TopicAndPartition, Long>\");\n        }\n        dao.setOffsets(groupid, offsets);\n    }", "signature": "void setOffsets(Map<TopicAndPartition, Long> offsets)", "full_signature": "public void setOffsets(Map<TopicAndPartition, Long> offsets)", "class_method_signature": "KafkaOffsetManager.setOffsets(Map<TopicAndPartition, Long> offsets)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "isValidOffsetMap", "setOffsets"]}, "repository": {"repo_id": 51400982, "url": "https://github.com/rverk/kafkaoffsetmanager", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 8, "size": 797, "license": "licensed"}}