{"test_class": {"identifier": "CsvUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "concurrency/src/test/java/com/baidu/unbiz/common/CsvUtilTest.java"}, "test_case": {"identifier": "testFromCsv", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFromCsv() {\n        assertStringArray(CsvUtil.toStringArray(\"a\"), \"a\");\n        assertStringArray(CsvUtil.toStringArray(\"a,b\"), \"a\", \"b\");\n        assertStringArray(CsvUtil.toStringArray(\"a, b \"), \"a\", \" b \");\n        assertStringArray(CsvUtil.toStringArray(\"a,\\\" b \\\"\"), \"a\", \" b \");\n        assertStringArray(CsvUtil.toStringArray(\"a,b,\"), \"a\", \"b\", \"\");\n        assertStringArray(CsvUtil.toStringArray(\"a,b,\\\"jo,e\\\"\"), \"a\", \"b\", \"jo,e\");\n        assertStringArray(CsvUtil.toStringArray(\"a,b,\\\"\\\"\\\"some\\\"\\\"r\\\"\"), \"a\", \"b\", \"\\\"some\\\"r\");\n        assertStringArray(CsvUtil.toStringArray(\"1997,Ford,E350,\\\"Super, luxurious truck\\\"\"), \"1997\", \"Ford\", \"E350\",\n                \"Super, luxurious truck\");\n        assertStringArray(CsvUtil.toStringArray(\"1997,Ford,E350,\\\"Super \\\"\\\"luxurious\\\"\\\" truck\\\"\"), \"1997\", \"Ford\",\n                \"E350\", \"Super \\\"luxurious\\\" truck\");\n        assertStringArray(CsvUtil.toStringArray(\"\\\"a\\nb\\\"\"), \"a\\nb\");\n        assertStringArray(CsvUtil.toStringArray(\"a,,b\"), \"a\", \"\", \"b\");\n    }", "signature": "void testFromCsv()", "full_signature": "@Test public void testFromCsv()", "class_method_signature": "CsvUtilTest.testFromCsv()", "testcase": true, "constructor": false, "invocations": ["assertStringArray", "toStringArray", "assertStringArray", "toStringArray", "assertStringArray", "toStringArray", "assertStringArray", "toStringArray", "assertStringArray", "toStringArray", "assertStringArray", "toStringArray", "assertStringArray", "toStringArray", "assertStringArray", "toStringArray", "assertStringArray", "toStringArray", "assertStringArray", "toStringArray", "assertStringArray", "toStringArray"]}, "focal_class": {"identifier": "CsvUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final char FIELD_SEPARATOR = ',';", "modifier": "protected static final", "type": "char", "declarator": "FIELD_SEPARATOR = ','", "var_name": "FIELD_SEPARATOR"}, {"original_string": "protected static final char FIELD_QUOTE = '\"';", "modifier": "protected static final", "type": "char", "declarator": "FIELD_QUOTE = '\"'", "var_name": "FIELD_QUOTE"}, {"original_string": "protected static final String DOUBLE_QUOTE = \"\\\"\\\"\";", "modifier": "protected static final", "type": "String", "declarator": "DOUBLE_QUOTE = \"\\\"\\\"\"", "var_name": "DOUBLE_QUOTE"}, {"original_string": "protected static final String SPECIAL_CHARS = \"\\r\\n\";", "modifier": "protected static final", "type": "String", "declarator": "SPECIAL_CHARS = \"\\r\\n\"", "var_name": "SPECIAL_CHARS"}], "methods": [{"identifier": "toCsvString", "parameters": "(Object...elements)", "modifiers": "public static", "return": "String", "signature": "String toCsvString(Object...elements)", "full_signature": "public static String toCsvString(Object...elements)", "class_method_signature": "CsvUtil.toCsvString(Object...elements)", "testcase": false, "constructor": false}, {"identifier": "toCsvString", "parameters": "(List<T> elements)", "modifiers": "public static", "return": "String", "signature": "String toCsvString(List<T> elements)", "full_signature": "public static String toCsvString(List<T> elements)", "class_method_signature": "CsvUtil.toCsvString(List<T> elements)", "testcase": false, "constructor": false}, {"identifier": "toStringArray", "parameters": "(String line)", "modifiers": "public static", "return": "String[]", "signature": "String[] toStringArray(String line)", "full_signature": "public static String[] toStringArray(String line)", "class_method_signature": "CsvUtil.toStringArray(String line)", "testcase": false, "constructor": false}, {"identifier": "addField", "parameters": "(List<String> row, String line, int startIndex, int endIndex, boolean inQuoted)", "modifiers": "private static", "return": "void", "signature": "void addField(List<String> row, String line, int startIndex, int endIndex, boolean inQuoted)", "full_signature": "private static void addField(List<String> row, String line, int startIndex, int endIndex, boolean inQuoted)", "class_method_signature": "CsvUtil.addField(List<String> row, String line, int startIndex, int endIndex, boolean inQuoted)", "testcase": false, "constructor": false}], "file": "concurrency/src/main/java/com/baidu/unbiz/common/CsvUtil.java"}, "focal_method": {"identifier": "toStringArray", "parameters": "(String line)", "modifiers": "public static", "return": "String[]", "body": "public static String[] toStringArray(String line) {\n        List<String> row = CollectionUtil.createArrayList();\n\n        boolean inQuotedField = false;\n        int fieldStart = 0;\n\n        final int len = line.length();\n        for (int i = 0; i < len; i++) {\n            char c = line.charAt(i);\n            if (c == FIELD_SEPARATOR) {\n                if (!inQuotedField) { // ignore we are quoting\n                    addField(row, line, fieldStart, i, inQuotedField);\n                    fieldStart = i + 1;\n                }\n                continue;\n            }\n            if (c == FIELD_QUOTE) {\n                if (inQuotedField) {\n                    // we are already quoting - peek to see if this is the end\n                    // of the field\n                    if (i + 1 == len || line.charAt(i + 1) == FIELD_SEPARATOR) {\n                        addField(row, line, fieldStart, i, inQuotedField);\n                        fieldStart = i + 2;\n                        i++; // and skip the comma\n                        inQuotedField = false;\n                    }\n                } else if (fieldStart == i) {\n                    inQuotedField = true; // this is a beginning of a quote\n                    fieldStart++; // move field start\n                }\n            }\n        }\n        // add last field - but only if string was not empty\n        if (len > 0 && fieldStart <= len) {\n            addField(row, line, fieldStart, len, inQuotedField);\n        }\n        return row.toArray(new String[row.size()]);\n    }", "signature": "String[] toStringArray(String line)", "full_signature": "public static String[] toStringArray(String line)", "class_method_signature": "CsvUtil.toStringArray(String line)", "testcase": false, "constructor": false, "invocations": ["createArrayList", "length", "charAt", "addField", "charAt", "addField", "addField", "toArray", "size"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}