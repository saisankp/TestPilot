{"test_class": {"identifier": "urn_perun_group_resource_attribute_def_def_projectDataLimitTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private urn_perun_group_resource_attribute_def_def_projectDataLimit classInstance;", "modifier": "private", "type": "urn_perun_group_resource_attribute_def_def_projectDataLimit", "declarator": "classInstance", "var_name": "classInstance"}, {"original_string": "private Attribute attributeToCheck;", "modifier": "private", "type": "Attribute", "declarator": "attributeToCheck", "var_name": "attributeToCheck"}, {"original_string": "private Group group = new Group();", "modifier": "private", "type": "Group", "declarator": "group = new Group()", "var_name": "group"}, {"original_string": "private Resource resource = new Resource();", "modifier": "private", "type": "Resource", "declarator": "resource = new Resource()", "var_name": "resource"}, {"original_string": "private PerunSessionImpl sess;", "modifier": "private", "type": "PerunSessionImpl", "declarator": "sess", "var_name": "sess"}, {"original_string": "private Attribute reqAttribute;", "modifier": "private", "type": "Attribute", "declarator": "reqAttribute", "var_name": "reqAttribute"}], "file": "perun-core/src/test/java/cz/metacentrum/perun/core/impl/modules/attributes/urn_perun_group_resource_attribute_def_def_projectDataLimitTest.java"}, "test_case": {"identifier": "testSemanticsQuotaHigherThanLimit", "parameters": "()", "modifiers": "@Test(expected = WrongReferenceAttributeValueException.class) public", "return": "void", "body": "@Test(expected = WrongReferenceAttributeValueException.class)\n\tpublic void testSemanticsQuotaHigherThanLimit() throws Exception {\n\t\tSystem.out.println(\"testSemanticsQuotaHigherThanLimit()\");\n\t\tattributeToCheck.setValue(\"22M\");\n\t\treqAttribute.setValue(\"10T\");\n\n\t\tclassInstance.checkAttributeSemantics(sess, group, resource, attributeToCheck);\n\t}", "signature": "void testSemanticsQuotaHigherThanLimit()", "full_signature": "@Test(expected = WrongReferenceAttributeValueException.class) public void testSemanticsQuotaHigherThanLimit()", "class_method_signature": "urn_perun_group_resource_attribute_def_def_projectDataLimitTest.testSemanticsQuotaHigherThanLimit()", "testcase": true, "constructor": false, "invocations": ["println", "setValue", "setValue", "checkAttributeSemantics"]}, "focal_class": {"identifier": "urn_perun_group_resource_attribute_def_def_projectDataLimit", "superclass": "extends GroupResourceAttributesModuleAbstract", "interfaces": "implements GroupResourceAttributesModuleImplApi", "fields": [{"original_string": "private static final String A_GR_projectDataQuota = AttributesManager.NS_GROUP_RESOURCE_ATTR_DEF + \":projectDataQuota\";", "modifier": "private static final", "type": "String", "declarator": "A_GR_projectDataQuota = AttributesManager.NS_GROUP_RESOURCE_ATTR_DEF + \":projectDataQuota\"", "var_name": "A_GR_projectDataQuota"}, {"original_string": "private static final Pattern testingPattern = Pattern.compile(\"^[0-9]+([.][0-9]+)?[KMGTPE]$\");", "modifier": "private static final", "type": "Pattern", "declarator": "testingPattern = Pattern.compile(\"^[0-9]+([.][0-9]+)?[KMGTPE]$\")", "var_name": "testingPattern"}, {"original_string": "final long K = 1024;", "modifier": "final", "type": "long", "declarator": "K = 1024", "var_name": "K"}, {"original_string": "final long M = K * 1024;", "modifier": "final", "type": "long", "declarator": "M = K * 1024", "var_name": "M"}, {"original_string": "final long G = M * 1024;", "modifier": "final", "type": "long", "declarator": "G = M * 1024", "var_name": "G"}, {"original_string": "final long T = G * 1024;", "modifier": "final", "type": "long", "declarator": "T = G * 1024", "var_name": "T"}, {"original_string": "final long P = T * 1024;", "modifier": "final", "type": "long", "declarator": "P = T * 1024", "var_name": "P"}, {"original_string": "final long E = P * 1024;", "modifier": "final", "type": "long", "declarator": "E = P * 1024", "var_name": "E"}], "methods": [{"identifier": "checkAttributeSyntax", "parameters": "(PerunSessionImpl perunSession, Group group, Resource resource, Attribute attribute)", "modifiers": "@Override public", "return": "void", "signature": "void checkAttributeSyntax(PerunSessionImpl perunSession, Group group, Resource resource, Attribute attribute)", "full_signature": "@Override public void checkAttributeSyntax(PerunSessionImpl perunSession, Group group, Resource resource, Attribute attribute)", "class_method_signature": "urn_perun_group_resource_attribute_def_def_projectDataLimit.checkAttributeSyntax(PerunSessionImpl perunSession, Group group, Resource resource, Attribute attribute)", "testcase": false, "constructor": false}, {"identifier": "checkAttributeSemantics", "parameters": "(PerunSessionImpl perunSession, Group group, Resource resource, Attribute attribute)", "modifiers": "@Override public", "return": "void", "signature": "void checkAttributeSemantics(PerunSessionImpl perunSession, Group group, Resource resource, Attribute attribute)", "full_signature": "@Override public void checkAttributeSemantics(PerunSessionImpl perunSession, Group group, Resource resource, Attribute attribute)", "class_method_signature": "urn_perun_group_resource_attribute_def_def_projectDataLimit.checkAttributeSemantics(PerunSessionImpl perunSession, Group group, Resource resource, Attribute attribute)", "testcase": false, "constructor": false}, {"identifier": "getDependencies", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getDependencies()", "full_signature": "@Override public List<String> getDependencies()", "class_method_signature": "urn_perun_group_resource_attribute_def_def_projectDataLimit.getDependencies()", "testcase": false, "constructor": false}, {"identifier": "getAttributeDefinition", "parameters": "()", "modifiers": "@Override public", "return": "AttributeDefinition", "signature": "AttributeDefinition getAttributeDefinition()", "full_signature": "@Override public AttributeDefinition getAttributeDefinition()", "class_method_signature": "urn_perun_group_resource_attribute_def_def_projectDataLimit.getAttributeDefinition()", "testcase": false, "constructor": false}], "file": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/attributes/urn_perun_group_resource_attribute_def_def_projectDataLimit.java"}, "focal_method": {"identifier": "checkAttributeSemantics", "parameters": "(PerunSessionImpl perunSession, Group group, Resource resource, Attribute attribute)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void checkAttributeSemantics(PerunSessionImpl perunSession, Group group, Resource resource, Attribute attribute) throws WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n\t\tAttribute attrProjectDataQuota;\n\t\tString projectDataQuota = null;\n\n\t\t//Check if attribute value has the right exp pattern (can be null)\n\t\tif(attribute.getValue() == null) return;\n\n\t\t//Get ProjectDataLimit value\n\t\tPair<BigDecimal, String> limitNumberAndLetter = ModulesUtilsBlImpl.getNumberAndUnitFromString(attribute.valueAsString());\n\t\tBigDecimal limitNumber = limitNumberAndLetter.getLeft();\n\t\tString projectDataLimitLetter = limitNumberAndLetter.getRight();\n\n\t\t//Get ProjectDataQuota attribute\n\t\ttry {\n\t\t\tattrProjectDataQuota = perunSession.getPerunBl().getAttributesManagerBl().getAttribute(perunSession, resource, group, A_GR_projectDataQuota);\n\t\t} catch (AttributeNotExistsException ex) {\n\t\t\tthrow new ConsistencyErrorException(\"Attribute with projectDataQuota from resource \" + resource.getId() + \" and group + \" + group.getId() + \" could not obtain.\", ex);\n\t\t} catch (GroupResourceMismatchException ex) {\n\t\t\tthrow new InternalErrorException(ex);\n\t\t}\n\n\t\tif (attrProjectDataQuota != null) projectDataQuota = attrProjectDataQuota.valueAsString();\n\n\t\t//Get ProjectDataQuota value\n\t\tPair<BigDecimal, String> quotaNumberAndLetter = ModulesUtilsBlImpl.getNumberAndUnitFromString(projectDataQuota);\n\t\tBigDecimal quotaNumber = quotaNumberAndLetter.getLeft();\n\t\tString projectDataQuotaLetter = quotaNumberAndLetter.getRight();\n\n\t\tif (quotaNumber.compareTo(BigDecimal.valueOf(0)) < 0) {\n\t\t\tthrow new WrongReferenceAttributeValueException(attribute, attrProjectDataQuota, attrProjectDataQuota + \" cant be less than 0.\");\n\t\t}\n\n\t\t//Compare ProjectDataLimit with ProjectDataQuota\n\t\tif (quotaNumber.compareTo(BigDecimal.valueOf(0)) == 0) {\n\t\t\tif (limitNumber.compareTo(BigDecimal.valueOf(0)) != 0) {\n\t\t\t\tthrow new WrongReferenceAttributeValueException(attribute, attrProjectDataQuota, \"Try to set limited limit, but there is still set unlimited Quota.\");\n\t\t\t}\n\t\t} else if ((quotaNumber.compareTo(BigDecimal.valueOf(0)) != 0) && (limitNumber.compareTo(BigDecimal.valueOf(0)) != 0) && projectDataQuotaLetter != null) {\n\n\t\t\tswitch (projectDataLimitLetter) {\n\t\t\t\tcase \"K\":\n\t\t\t\t\tlimitNumber = limitNumber.multiply(BigDecimal.valueOf(K));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"M\":\n\t\t\t\t\tlimitNumber = limitNumber.multiply(BigDecimal.valueOf(M));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"T\":\n\t\t\t\t\tlimitNumber = limitNumber.multiply(BigDecimal.valueOf(T));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"P\":\n\t\t\t\t\tlimitNumber = limitNumber.multiply(BigDecimal.valueOf(P));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"E\":\n\t\t\t\t\tlimitNumber = limitNumber.multiply(BigDecimal.valueOf(E));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlimitNumber = limitNumber.multiply(BigDecimal.valueOf(G));\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tswitch (projectDataQuotaLetter) {\n\t\t\t\tcase \"K\":\n\t\t\t\t\tquotaNumber = quotaNumber.multiply(BigDecimal.valueOf(K));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"M\":\n\t\t\t\t\tquotaNumber = quotaNumber.multiply(BigDecimal.valueOf(M));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"T\":\n\t\t\t\t\tquotaNumber = quotaNumber.multiply(BigDecimal.valueOf(T));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"P\":\n\t\t\t\t\tquotaNumber = quotaNumber.multiply(BigDecimal.valueOf(P));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"E\":\n\t\t\t\t\tquotaNumber = quotaNumber.multiply(BigDecimal.valueOf(E));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tquotaNumber = quotaNumber.multiply(BigDecimal.valueOf(G));\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (limitNumber.compareTo(quotaNumber) < 0) {\n\t\t\t\tthrow new WrongReferenceAttributeValueException(attribute, attrProjectDataQuota, group, resource, group, resource, attribute + \" must be more than or equals to \" + attrProjectDataQuota);\n\t\t\t}\n\t\t}\n\t}", "signature": "void checkAttributeSemantics(PerunSessionImpl perunSession, Group group, Resource resource, Attribute attribute)", "full_signature": "@Override public void checkAttributeSemantics(PerunSessionImpl perunSession, Group group, Resource resource, Attribute attribute)", "class_method_signature": "urn_perun_group_resource_attribute_def_def_projectDataLimit.checkAttributeSemantics(PerunSessionImpl perunSession, Group group, Resource resource, Attribute attribute)", "testcase": false, "constructor": false, "invocations": ["getValue", "getNumberAndUnitFromString", "valueAsString", "getLeft", "getRight", "getAttribute", "getAttributesManagerBl", "getPerunBl", "getId", "getId", "valueAsString", "getNumberAndUnitFromString", "getLeft", "getRight", "compareTo", "valueOf", "compareTo", "valueOf", "compareTo", "valueOf", "compareTo", "valueOf", "compareTo", "valueOf", "multiply", "valueOf", "multiply", "valueOf", "multiply", "valueOf", "multiply", "valueOf", "multiply", "valueOf", "multiply", "valueOf", "multiply", "valueOf", "multiply", "valueOf", "multiply", "valueOf", "multiply", "valueOf", "multiply", "valueOf", "multiply", "valueOf", "compareTo"]}, "repository": {"repo_id": 4085998, "url": "https://github.com/CESNET/perun", "stars": 38, "created": "4/20/2012 11:55:38 AM +00:00", "updates": "2020-01-27T09:51:13+00:00", "fork": "False", "license": "licensed"}}