{"test_class": {"identifier": "TrustAnchorRetrievalServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private TrustAnchorRetrievalService trustAnchorRetrievalService;", "modifier": "@Mock\n    private", "type": "TrustAnchorRetrievalService", "declarator": "trustAnchorRetrievalService", "var_name": "trustAnchorRetrievalService"}, {"original_string": "private ValidationResult validationResult;", "modifier": "private", "type": "ValidationResult", "declarator": "validationResult", "var_name": "validationResult"}], "file": "rpki-validator/src/test/java/net/ripe/rpki/validator3/domain/retrieval/TrustAnchorRetrievalServiceTest.java"}, "test_case": {"identifier": "testFetchTrustAnchorCertificate_reject_http", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFetchTrustAnchorCertificate_reject_http() throws Exception {\n        given(trustAnchorRetrievalService.fetchTrustAnchorCertificate(any(), any())).willCallRealMethod();\n\n        final URI uri = URI.create(\"http://rpki.example.org/ta/ta.cer\");\n\n        trustAnchorRetrievalService.fetchTrustAnchorCertificate(uri, validationResult);\n\n        final List<ValidationCheck> validationChecks = validationResult.getAllValidationChecksForCurrentLocation();\n\n        assertThat(validationChecks).hasSize(1);\n        assertThat(validationChecks.get(0).getKey()).isEqualTo(ErrorCodes.TRUST_ANCHOR_FETCH);\n    }", "signature": "void testFetchTrustAnchorCertificate_reject_http()", "full_signature": "@Test public void testFetchTrustAnchorCertificate_reject_http()", "class_method_signature": "TrustAnchorRetrievalServiceTest.testFetchTrustAnchorCertificate_reject_http()", "testcase": true, "constructor": false, "invocations": ["willCallRealMethod", "given", "fetchTrustAnchorCertificate", "any", "any", "create", "fetchTrustAnchorCertificate", "getAllValidationChecksForCurrentLocation", "hasSize", "assertThat", "isEqualTo", "assertThat", "getKey", "get"]}, "focal_class": {"identifier": "TrustAnchorRetrievalService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private boolean isFileProtocolEnabled = false;", "modifier": "private", "type": "boolean", "declarator": "isFileProtocolEnabled = false", "var_name": "isFileProtocolEnabled"}, {"original_string": "@Value(\"${rpki.validator.rsync.local.storage.directory}\")\n    private File localRsyncStorageDirectory;", "modifier": "@Value(\"${rpki.validator.rsync.local.storage.directory}\")\n    private", "type": "File", "declarator": "localRsyncStorageDirectory", "var_name": "localRsyncStorageDirectory"}, {"original_string": "@Autowired\n    private BuildInformation buildInformation;", "modifier": "@Autowired\n    private", "type": "BuildInformation", "declarator": "buildInformation", "var_name": "buildInformation"}, {"original_string": "@Autowired\n    private RsyncFactory rsyncFactory;", "modifier": "@Autowired\n    private", "type": "RsyncFactory", "declarator": "rsyncFactory", "var_name": "rsyncFactory"}, {"original_string": "@Autowired\n    private HttpClient httpClient;", "modifier": "@Autowired\n    private", "type": "HttpClient", "declarator": "httpClient", "var_name": "httpClient"}, {"original_string": "@Autowired\n    private HttpClientMetricsService httpMetrics;", "modifier": "@Autowired\n    private", "type": "HttpClientMetricsService", "declarator": "httpMetrics", "var_name": "httpMetrics"}, {"original_string": "@Autowired\n    private RsyncMetricsService rsyncMetrics;", "modifier": "@Autowired\n    private", "type": "RsyncMetricsService", "declarator": "rsyncMetrics", "var_name": "rsyncMetrics"}], "methods": [{"identifier": "fetchTrustAnchorCertificate", "parameters": "(URI trustAnchorCertificateURI, ValidationResult validationResult)", "modifiers": "public", "return": "byte[]", "signature": "byte[] fetchTrustAnchorCertificate(URI trustAnchorCertificateURI, ValidationResult validationResult)", "full_signature": "public byte[] fetchTrustAnchorCertificate(URI trustAnchorCertificateURI, ValidationResult validationResult)", "class_method_signature": "TrustAnchorRetrievalService.fetchTrustAnchorCertificate(URI trustAnchorCertificateURI, ValidationResult validationResult)", "testcase": false, "constructor": false}, {"identifier": "fetchFileTrustAnchorCertificate", "parameters": "(URI trustAnchorCertificateURI, ValidationResult validationResult)", "modifiers": "private", "return": "byte[]", "signature": "byte[] fetchFileTrustAnchorCertificate(URI trustAnchorCertificateURI, ValidationResult validationResult)", "full_signature": "private byte[] fetchFileTrustAnchorCertificate(URI trustAnchorCertificateURI, ValidationResult validationResult)", "class_method_signature": "TrustAnchorRetrievalService.fetchFileTrustAnchorCertificate(URI trustAnchorCertificateURI, ValidationResult validationResult)", "testcase": false, "constructor": false}, {"identifier": "fetchHttpsTrustAnchorCertificate", "parameters": "(URI trustAnchorCertificateURI, ValidationResult validationResult)", "modifiers": "protected", "return": "byte[]", "signature": "byte[] fetchHttpsTrustAnchorCertificate(URI trustAnchorCertificateURI, ValidationResult validationResult)", "full_signature": "protected byte[] fetchHttpsTrustAnchorCertificate(URI trustAnchorCertificateURI, ValidationResult validationResult)", "class_method_signature": "TrustAnchorRetrievalService.fetchHttpsTrustAnchorCertificate(URI trustAnchorCertificateURI, ValidationResult validationResult)", "testcase": false, "constructor": false}, {"identifier": "fetchRsyncTrustAnchorCertificate", "parameters": "(URI trustAnchorCertificateURI, ValidationResult validationResult)", "modifiers": "protected", "return": "byte[]", "signature": "byte[] fetchRsyncTrustAnchorCertificate(URI trustAnchorCertificateURI, ValidationResult validationResult)", "full_signature": "protected byte[] fetchRsyncTrustAnchorCertificate(URI trustAnchorCertificateURI, ValidationResult validationResult)", "class_method_signature": "TrustAnchorRetrievalService.fetchRsyncTrustAnchorCertificate(URI trustAnchorCertificateURI, ValidationResult validationResult)", "testcase": false, "constructor": false}], "file": "rpki-validator/src/main/java/net/ripe/rpki/validator3/domain/retrieval/TrustAnchorRetrievalService.java"}, "focal_method": {"identifier": "fetchTrustAnchorCertificate", "parameters": "(URI trustAnchorCertificateURI, ValidationResult validationResult)", "modifiers": "public", "return": "byte[]", "body": "public byte[] fetchTrustAnchorCertificate(URI trustAnchorCertificateURI, ValidationResult validationResult) {\n        try {\n            switch (trustAnchorCertificateURI.getScheme()) {\n                case \"rsync\":\n                    return fetchRsyncTrustAnchorCertificate(trustAnchorCertificateURI, validationResult);\n                case \"https\":\n                    return fetchHttpsTrustAnchorCertificate(trustAnchorCertificateURI, validationResult);\n                case \"file\":\n                    return fetchFileTrustAnchorCertificate(trustAnchorCertificateURI, validationResult);\n                default:\n                    validationResult.warn(ErrorCodes.TRUST_ANCHOR_FETCH, trustAnchorCertificateURI.toASCIIString(), \"Unsupported URI\");\n                    return null;\n            }\n        } catch (IOException e) {\n            validationResult.warn(ErrorCodes.TRUST_ANCHOR_FETCH, trustAnchorCertificateURI.toASCIIString(), e.getMessage());\n            return null;\n        }\n    }", "signature": "byte[] fetchTrustAnchorCertificate(URI trustAnchorCertificateURI, ValidationResult validationResult)", "full_signature": "public byte[] fetchTrustAnchorCertificate(URI trustAnchorCertificateURI, ValidationResult validationResult)", "class_method_signature": "TrustAnchorRetrievalService.fetchTrustAnchorCertificate(URI trustAnchorCertificateURI, ValidationResult validationResult)", "testcase": false, "constructor": false, "invocations": ["getScheme", "fetchRsyncTrustAnchorCertificate", "fetchHttpsTrustAnchorCertificate", "fetchFileTrustAnchorCertificate", "warn", "toASCIIString", "warn", "toASCIIString", "getMessage"]}, "repository": {"repo_id": 104217624, "url": "https://github.com/RIPE-NCC/rpki-validator-3", "stars": 32, "created": "9/20/2017 1:15:05 PM +00:00", "updates": "2020-01-27T10:48:38+00:00", "fork": "False", "license": "licensed"}}