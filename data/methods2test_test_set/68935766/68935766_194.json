{"test_class": {"identifier": "CommandParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Environment<Class<?>> environment = StubEnvironment.of(Project.EMPTY);", "modifier": "", "type": "Environment<Class<?>>", "declarator": "environment = StubEnvironment.of(Project.EMPTY)", "var_name": "environment"}, {"original_string": "CommandParser<Class<?>> parser = new CommandParser<>(environment);", "modifier": "", "type": "CommandParser<Class<?>>", "declarator": "parser = new CommandParser<>(environment)", "var_name": "parser"}, {"original_string": "Command command = CommandParserTest.class.getAnnotation(Command.class);", "modifier": "", "type": "Command", "declarator": "command = CommandParserTest.class.getAnnotation(Command.class)", "var_name": "command"}], "file": "scribe/core/src/test/java/com/karuslabs/scribe/core/parsers/CommandParserTest.java"}, "test_case": {"identifier": "check_whitespaced_name", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void check_whitespaced_name() {\n        parser.check(Object.class, command, \"invalid name\", Label.NAME);\n        \n        assertTrue(parser.names.isEmpty());\n        verify(environment).error(Object.class, \"\\\"invalid name\\\" is not a valid command name, should not contain whitespaces\");\n    }", "signature": "void check_whitespaced_name()", "full_signature": "@Test void check_whitespaced_name()", "class_method_signature": "CommandParserTest.check_whitespaced_name()", "testcase": true, "constructor": false, "invocations": ["check", "assertTrue", "isEmpty", "error", "verify"]}, "focal_class": {"identifier": "CommandParser", "superclass": "extends Parser<T>", "interfaces": "", "fields": [{"original_string": "Map<String, Map.Entry<Command, Label>> names;", "modifier": "", "type": "Map<String, Map.Entry<Command, Label>>", "declarator": "names", "var_name": "names"}, {"original_string": "Matcher matcher;", "modifier": "", "type": "Matcher", "declarator": "matcher", "var_name": "matcher"}], "methods": [{"identifier": "CommandParser", "parameters": "(Environment<T> environment)", "modifiers": "public", "return": "", "signature": " CommandParser(Environment<T> environment)", "full_signature": "public  CommandParser(Environment<T> environment)", "class_method_signature": "CommandParser.CommandParser(Environment<T> environment)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(T type)", "modifiers": "@Override protected", "return": "void", "signature": "void parse(T type)", "full_signature": "@Override protected void parse(T type)", "class_method_signature": "CommandParser.parse(T type)", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(T type, Command command)", "modifiers": "protected", "return": "void", "signature": "void check(T type, Command command)", "full_signature": "protected void check(T type, Command command)", "class_method_signature": "CommandParser.check(T type, Command command)", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(T type, Command command, String name, Label label)", "modifiers": "protected", "return": "void", "signature": "void check(T type, Command command, String name, Label label)", "full_signature": "protected void check(T type, Command command, String name, Label label)", "class_method_signature": "CommandParser.check(T type, Command command, String name, Label label)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(T type, Command command)", "modifiers": "protected", "return": "Map<String, Object>", "signature": "Map<String, Object> parse(T type, Command command)", "full_signature": "protected Map<String, Object> parse(T type, Command command)", "class_method_signature": "CommandParser.parse(T type, Command command)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void clear()", "full_signature": "@Override protected void clear()", "class_method_signature": "CommandParser.clear()", "testcase": false, "constructor": false}], "file": "scribe/core/src/main/java/com/karuslabs/scribe/core/parsers/CommandParser.java"}, "focal_method": {"identifier": "check", "parameters": "(T type, Command command)", "modifiers": "protected", "return": "void", "body": "protected void check(T type, Command command) {\n        check(type, command, command.name(), NAME);\n        for (var alias : command.aliases()) {\n            check(type, command, alias, ALIAS);\n        }\n    }", "signature": "void check(T type, Command command)", "full_signature": "protected void check(T type, Command command)", "class_method_signature": "CommandParser.check(T type, Command command)", "testcase": false, "constructor": false, "invocations": ["check", "name", "aliases", "check"]}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}