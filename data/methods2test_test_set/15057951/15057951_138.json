{"test_class": {"identifier": "BasicLevelPreparerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BasicLevelPreparer basicLevelPreparer;", "modifier": "private", "type": "BasicLevelPreparer", "declarator": "basicLevelPreparer", "var_name": "basicLevelPreparer"}, {"original_string": "private MatcherRepository matcherRepository;", "modifier": "private", "type": "MatcherRepository", "declarator": "matcherRepository", "var_name": "matcherRepository"}, {"original_string": "private TypeRepository typeRepository;", "modifier": "private", "type": "TypeRepository", "declarator": "typeRepository", "var_name": "typeRepository"}, {"original_string": "private FunctionProvider functionProvider;", "modifier": "private", "type": "FunctionProvider", "declarator": "functionProvider", "var_name": "functionProvider"}], "file": "smartparam-engine/src/test/java/org/smartparam/engine/core/prepared/BasicLevelPreparerTest.java"}, "test_case": {"identifier": "shouldThrowExceptionWhenMatcherDefinedButNotFoundInRepo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldThrowExceptionWhenMatcherDefinedButNotFoundInRepo() {\n        // given\n        Level level = level().withMatcher(\"matcher\").build();\n        when(matcherRepository.getMatcher(\"matcher\")).thenReturn(null);\n\n        // when\n        catchException(basicLevelPreparer).prepare(level);\n\n        // then\n        assertThat(caughtException()).isInstanceOf(UnknownMatcherException.class);\n    }", "signature": "void shouldThrowExceptionWhenMatcherDefinedButNotFoundInRepo()", "full_signature": "@Test public void shouldThrowExceptionWhenMatcherDefinedButNotFoundInRepo()", "class_method_signature": "BasicLevelPreparerTest.shouldThrowExceptionWhenMatcherDefinedButNotFoundInRepo()", "testcase": true, "constructor": false, "invocations": ["build", "withMatcher", "level", "thenReturn", "when", "getMatcher", "prepare", "catchException", "isInstanceOf", "assertThat", "caughtException"]}, "focal_class": {"identifier": "BasicLevelPreparer", "superclass": "", "interfaces": "implements LevelPreparer", "fields": [{"original_string": "private final MatcherRepository matcherRepository;", "modifier": "private final", "type": "MatcherRepository", "declarator": "matcherRepository", "var_name": "matcherRepository"}, {"original_string": "private final TypeRepository typeRepository;", "modifier": "private final", "type": "TypeRepository", "declarator": "typeRepository", "var_name": "typeRepository"}, {"original_string": "private final FunctionProvider functionProvider;", "modifier": "private final", "type": "FunctionProvider", "declarator": "functionProvider", "var_name": "functionProvider"}], "methods": [{"identifier": "BasicLevelPreparer", "parameters": "(MatcherRepository matcherRepository, TypeRepository typeRepository, FunctionProvider functionProvider)", "modifiers": "public", "return": "", "signature": " BasicLevelPreparer(MatcherRepository matcherRepository, TypeRepository typeRepository, FunctionProvider functionProvider)", "full_signature": "public  BasicLevelPreparer(MatcherRepository matcherRepository, TypeRepository typeRepository, FunctionProvider functionProvider)", "class_method_signature": "BasicLevelPreparer.BasicLevelPreparer(MatcherRepository matcherRepository, TypeRepository typeRepository, FunctionProvider functionProvider)", "testcase": false, "constructor": true}, {"identifier": "prepare", "parameters": "(Level level)", "modifiers": "@Override public", "return": "PreparedLevel", "signature": "PreparedLevel prepare(Level level)", "full_signature": "@Override public PreparedLevel prepare(Level level)", "class_method_signature": "BasicLevelPreparer.prepare(Level level)", "testcase": false, "constructor": false}, {"identifier": "resolveType", "parameters": "(String typeCode, String levelName)", "modifiers": "private", "return": "Type<?>", "signature": "Type<?> resolveType(String typeCode, String levelName)", "full_signature": "private Type<?> resolveType(String typeCode, String levelName)", "class_method_signature": "BasicLevelPreparer.resolveType(String typeCode, String levelName)", "testcase": false, "constructor": false}, {"identifier": "resolveMatcher", "parameters": "(String matcherCode, String levelName)", "modifiers": "private", "return": "Matcher", "signature": "Matcher resolveMatcher(String matcherCode, String levelName)", "full_signature": "private Matcher resolveMatcher(String matcherCode, String levelName)", "class_method_signature": "BasicLevelPreparer.resolveMatcher(String matcherCode, String levelName)", "testcase": false, "constructor": false}, {"identifier": "resolveLevelCreator", "parameters": "(String levelCreatorCode)", "modifiers": "private", "return": "Function", "signature": "Function resolveLevelCreator(String levelCreatorCode)", "full_signature": "private Function resolveLevelCreator(String levelCreatorCode)", "class_method_signature": "BasicLevelPreparer.resolveLevelCreator(String levelCreatorCode)", "testcase": false, "constructor": false}], "file": "smartparam-engine/src/main/java/org/smartparam/engine/core/prepared/BasicLevelPreparer.java"}, "focal_method": {"identifier": "prepare", "parameters": "(Level level)", "modifiers": "@Override public", "return": "PreparedLevel", "body": "@Override\n    public PreparedLevel prepare(Level level) {\n        Type<?> type = resolveType(level.getType(), level.getName());\n        Matcher matcher = resolveMatcher(level.getMatcher(), level.getName());\n        Function levelCreator = resolveLevelCreator(level.getLevelCreator());\n\n        return new PreparedLevel(level.getName(), level.isArray(), type, level.getMatcher(), matcher, levelCreator);\n    }", "signature": "PreparedLevel prepare(Level level)", "full_signature": "@Override public PreparedLevel prepare(Level level)", "class_method_signature": "BasicLevelPreparer.prepare(Level level)", "testcase": false, "constructor": false, "invocations": ["resolveType", "getType", "getName", "resolveMatcher", "getMatcher", "getName", "resolveLevelCreator", "getLevelCreator", "getName", "isArray", "getMatcher"]}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}