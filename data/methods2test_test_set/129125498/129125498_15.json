{"test_class": {"identifier": "NotifierTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@ClassRule\n    public static KafkaJunitRule kafka = new KafkaJunitRule(EphemeralKafkaBroker.create()).waitForStartup();", "modifier": "@ClassRule\n    public static", "type": "KafkaJunitRule", "declarator": "kafka = new KafkaJunitRule(EphemeralKafkaBroker.create()).waitForStartup()", "var_name": "kafka"}, {"original_string": "@ClassRule\n    public static MockWebServer webhook = new MockWebServer();", "modifier": "@ClassRule\n    public static", "type": "MockWebServer", "declarator": "webhook = new MockWebServer()", "var_name": "webhook"}, {"original_string": "private AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();", "modifier": "private", "type": "AnnotationConfigApplicationContext", "declarator": "context = new AnnotationConfigApplicationContext()", "var_name": "context"}, {"original_string": "private Notifier notifier;", "modifier": "private", "type": "Notifier", "declarator": "notifier", "var_name": "notifier"}, {"original_string": "private NotifierConfig notifierConfig;", "modifier": "private", "type": "NotifierConfig", "declarator": "notifierConfig", "var_name": "notifierConfig"}], "file": "kafka/src/test/java/com/expedia/adaptivealerting/kafka/notifier/NotifierTest.java"}, "test_case": {"identifier": "context_close_stopsNotifier", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void context_close_stopsNotifier() {\n        notifier.onApplicationEvent(mock(ApplicationReadyEvent.class));\n\n        context.close();\n\n        Assertions.assertThat(notifier.running).isFalse();\n    }", "signature": "void context_close_stopsNotifier()", "full_signature": "@Test public void context_close_stopsNotifier()", "class_method_signature": "NotifierTest.context_close_stopsNotifier()", "testcase": true, "constructor": false, "invocations": ["onApplicationEvent", "mock", "close", "isFalse", "assertThat"]}, "focal_class": {"identifier": "Notifier", "superclass": "", "interfaces": "implements ApplicationListener<ApplicationReadyEvent>", "fields": [{"original_string": "private long TIME_OUT = 10_000;", "modifier": "private", "type": "long", "declarator": "TIME_OUT = 10_000", "var_name": "TIME_OUT"}, {"original_string": "private final ObjectMapper objectMapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "objectMapper", "var_name": "objectMapper"}, {"original_string": "private final NotifierConfig notifierConfig;", "modifier": "private final", "type": "NotifierConfig", "declarator": "notifierConfig", "var_name": "notifierConfig"}, {"original_string": "private final RestTemplate restTemplate;", "modifier": "private final", "type": "RestTemplate", "declarator": "restTemplate", "var_name": "restTemplate"}, {"original_string": "private final String webhookUrl;", "modifier": "private final", "type": "String", "declarator": "webhookUrl", "var_name": "webhookUrl"}, {"original_string": "final AtomicBoolean running = new AtomicBoolean();", "modifier": "final", "type": "AtomicBoolean", "declarator": "running = new AtomicBoolean()", "var_name": "running"}], "methods": [{"identifier": "Notifier", "parameters": "(NotifierConfig notifierConfig, ObjectMapper objectMapper, RestTemplate restTemplate)", "modifiers": "@Autowired public", "return": "", "signature": " Notifier(NotifierConfig notifierConfig, ObjectMapper objectMapper, RestTemplate restTemplate)", "full_signature": "@Autowired public  Notifier(NotifierConfig notifierConfig, ObjectMapper objectMapper, RestTemplate restTemplate)", "class_method_signature": "Notifier.Notifier(NotifierConfig notifierConfig, ObjectMapper objectMapper, RestTemplate restTemplate)", "testcase": false, "constructor": true}, {"identifier": "stopLooperThread", "parameters": "()", "modifiers": "@PreDestroy public", "return": "void", "signature": "void stopLooperThread()", "full_signature": "@PreDestroy public void stopLooperThread()", "class_method_signature": "Notifier.stopLooperThread()", "testcase": false, "constructor": false}, {"identifier": "onApplicationEvent", "parameters": "(ApplicationReadyEvent applicationReadyEvent)", "modifiers": "@Override public", "return": "void", "signature": "void onApplicationEvent(ApplicationReadyEvent applicationReadyEvent)", "full_signature": "@Override public void onApplicationEvent(ApplicationReadyEvent applicationReadyEvent)", "class_method_signature": "Notifier.onApplicationEvent(ApplicationReadyEvent applicationReadyEvent)", "testcase": false, "constructor": false}, {"identifier": "loopUntilShutdown", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void loopUntilShutdown()", "full_signature": "private void loopUntilShutdown()", "class_method_signature": "Notifier.loopUntilShutdown()", "testcase": false, "constructor": false}, {"identifier": "processAlerts", "parameters": "(KafkaConsumer<String, MappedMetricData> kafkaConsumer)", "modifiers": "private", "return": "void", "signature": "void processAlerts(KafkaConsumer<String, MappedMetricData> kafkaConsumer)", "full_signature": "private void processAlerts(KafkaConsumer<String, MappedMetricData> kafkaConsumer)", "class_method_signature": "Notifier.processAlerts(KafkaConsumer<String, MappedMetricData> kafkaConsumer)", "testcase": false, "constructor": false}, {"identifier": "buildJson", "parameters": "(MappedMetricData mappedMetricData)", "modifiers": "private", "return": "Optional<String>", "signature": "Optional<String> buildJson(MappedMetricData mappedMetricData)", "full_signature": "private Optional<String> buildJson(MappedMetricData mappedMetricData)", "class_method_signature": "Notifier.buildJson(MappedMetricData mappedMetricData)", "testcase": false, "constructor": false}], "file": "kafka/src/main/java/com/expedia/adaptivealerting/kafka/notifier/Notifier.java"}, "focal_method": {"identifier": "onApplicationEvent", "parameters": "(ApplicationReadyEvent applicationReadyEvent)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onApplicationEvent(ApplicationReadyEvent applicationReadyEvent) {\n        if (!running.compareAndSet(false, true)) return; // already running\n\n        Thread notifyLoop = new Thread(this::loopUntilShutdown);\n        notifyLoop.setName(\"adaptivealerting notify loop\");\n        notifyLoop.setDaemon(true);\n        notifyLoop.start();\n    }", "signature": "void onApplicationEvent(ApplicationReadyEvent applicationReadyEvent)", "full_signature": "@Override public void onApplicationEvent(ApplicationReadyEvent applicationReadyEvent)", "class_method_signature": "Notifier.onApplicationEvent(ApplicationReadyEvent applicationReadyEvent)", "testcase": false, "constructor": false, "invocations": ["compareAndSet", "setName", "setDaemon", "start"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}