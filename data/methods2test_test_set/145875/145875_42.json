{"test_class": {"identifier": "DbDeployCommandLineParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "UserInputReader userInputReader = mock(UserInputReader.class);", "modifier": "", "type": "UserInputReader", "declarator": "userInputReader = mock(UserInputReader.class)", "var_name": "userInputReader"}, {"original_string": "private final DbDeploy dbDeploy = new DbDeploy();", "modifier": "private final", "type": "DbDeploy", "declarator": "dbDeploy = new DbDeploy()", "var_name": "dbDeploy"}, {"original_string": "private final DbDeployCommandLineParser parser = new DbDeployCommandLineParser(userInputReader);", "modifier": "private final", "type": "DbDeployCommandLineParser", "declarator": "parser = new DbDeployCommandLineParser(userInputReader)", "var_name": "parser"}], "file": "dbdeploy-cli/src/test/java/com/dbdeploy/DbDeployCommandLineParserTest.java"}, "test_case": {"identifier": "checkAllOfTheOtherFieldsParseOkHere", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void checkAllOfTheOtherFieldsParseOkHere() throws Exception {\n\t\tparser.parse((\"-U userid -Ppassword --driver a.b.c --url b:c:d \" +\n\t\t\t\t\"--scriptdirectory . -o output.sql \" +\n\t\t\t\t\"--changeLogTableName my-change-log \" +\n\t\t\t\t\"--dbms ora \" +\n\t\t\t\t\"--templatedir /tmp/mytemplates \" +\n\t\t\t\t\"--delimiter \\\\ --delimitertype row\").split(\" \"), dbDeploy);\n\n\t\tassertThat(dbDeploy.getUserid(), is(\"userid\"));\n\t\tassertThat(dbDeploy.getPassword(), is(\"password\"));\n\t\tassertThat(dbDeploy.getDriver(), is(\"a.b.c\"));\n\t\tassertThat(dbDeploy.getUrl(), is(\"b:c:d\"));\n\t\tassertThat(dbDeploy.getScriptdirectory().getName(), is(\".\"));\n\t\tassertThat(dbDeploy.getOutputfile().getName(), is(\"output.sql\"));\n\t\tassertThat(dbDeploy.getDbms(), is(\"ora\"));\n\t\tassertThat(dbDeploy.getChangeLogTableName(), is(\"my-change-log\"));\n\t\tassertThat(dbDeploy.getDelimiter(), is(\"\\\\\"));\n\t\tassertThat(dbDeploy.getDelimiterType(), is(DelimiterType.row));\n\t\tassertThat(dbDeploy.getTemplatedir().getPath(), is(File.separator + \"tmp\" + File.separator + \"mytemplates\"));\n\t}", "signature": "void checkAllOfTheOtherFieldsParseOkHere()", "full_signature": "@Test public void checkAllOfTheOtherFieldsParseOkHere()", "class_method_signature": "DbDeployCommandLineParserTest.checkAllOfTheOtherFieldsParseOkHere()", "testcase": true, "constructor": false, "invocations": ["parse", "split", "assertThat", "getUserid", "is", "assertThat", "getPassword", "is", "assertThat", "getDriver", "is", "assertThat", "getUrl", "is", "assertThat", "getName", "getScriptdirectory", "is", "assertThat", "getName", "getOutputfile", "is", "assertThat", "getDbms", "is", "assertThat", "getChangeLogTableName", "is", "assertThat", "getDelimiter", "is", "assertThat", "getDelimiterType", "is", "assertThat", "getPath", "getTemplatedir", "is"]}, "focal_class": {"identifier": "DbDeployCommandLineParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final UserInputReader userInputReader;", "modifier": "private final", "type": "UserInputReader", "declarator": "userInputReader", "var_name": "userInputReader"}], "methods": [{"identifier": "DbDeployCommandLineParser", "parameters": "()", "modifiers": "public", "return": "", "signature": " DbDeployCommandLineParser()", "full_signature": "public  DbDeployCommandLineParser()", "class_method_signature": "DbDeployCommandLineParser.DbDeployCommandLineParser()", "testcase": false, "constructor": true}, {"identifier": "DbDeployCommandLineParser", "parameters": "(UserInputReader userInputReader)", "modifiers": "public", "return": "", "signature": " DbDeployCommandLineParser(UserInputReader userInputReader)", "full_signature": "public  DbDeployCommandLineParser(UserInputReader userInputReader)", "class_method_signature": "DbDeployCommandLineParser.DbDeployCommandLineParser(UserInputReader userInputReader)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(String[] args, DbDeploy dbDeploy)", "modifiers": "public", "return": "void", "signature": "void parse(String[] args, DbDeploy dbDeploy)", "full_signature": "public void parse(String[] args, DbDeploy dbDeploy)", "class_method_signature": "DbDeployCommandLineParser.parse(String[] args, DbDeploy dbDeploy)", "testcase": false, "constructor": false}, {"identifier": "copyValuesFromCommandLineToDbDeployBean", "parameters": "(DbDeploy dbDeploy, CommandLine commandLine)", "modifiers": "private", "return": "void", "signature": "void copyValuesFromCommandLineToDbDeployBean(DbDeploy dbDeploy, CommandLine commandLine)", "full_signature": "private void copyValuesFromCommandLineToDbDeployBean(DbDeploy dbDeploy, CommandLine commandLine)", "class_method_signature": "DbDeployCommandLineParser.copyValuesFromCommandLineToDbDeployBean(DbDeploy dbDeploy, CommandLine commandLine)", "testcase": false, "constructor": false}, {"identifier": "printUsage", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void printUsage()", "full_signature": "public void printUsage()", "class_method_signature": "DbDeployCommandLineParser.printUsage()", "testcase": false, "constructor": false}, {"identifier": "getOptions", "parameters": "()", "modifiers": "@SuppressWarnings({\"AccessStaticViaInstance\"}) private", "return": "Options", "signature": "Options getOptions()", "full_signature": "@SuppressWarnings({\"AccessStaticViaInstance\"}) private Options getOptions()", "class_method_signature": "DbDeployCommandLineParser.getOptions()", "testcase": false, "constructor": false}], "file": "dbdeploy-cli/src/main/java/com/dbdeploy/DbDeployCommandLineParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(String[] args, DbDeploy dbDeploy)", "modifiers": "public", "return": "void", "body": "public void parse(String[] args, DbDeploy dbDeploy) throws UsageException {\n\t\ttry {\n\t\t\tdbDeploy.setScriptdirectory(new File(\".\"));\n            final CommandLine commandLine = new GnuParser().parse(getOptions(), args);\n\t\t\tcopyValuesFromCommandLineToDbDeployBean(dbDeploy, commandLine);\n\n            if (commandLine.hasOption(\"password\") && commandLine.getOptionValue(\"password\") == null) {\n                dbDeploy.setPassword(userInputReader.read(\"Password\"));\n            }\n\t\t} catch (ParseException e) {\n\t\t\tthrow new UsageException(e.getMessage(), e);\n\t\t}\n\t}", "signature": "void parse(String[] args, DbDeploy dbDeploy)", "full_signature": "public void parse(String[] args, DbDeploy dbDeploy)", "class_method_signature": "DbDeployCommandLineParser.parse(String[] args, DbDeploy dbDeploy)", "testcase": false, "constructor": false, "invocations": ["setScriptdirectory", "parse", "getOptions", "copyValuesFromCommandLineToDbDeployBean", "hasOption", "getOptionValue", "setPassword", "read", "getMessage"]}, "repository": {"repo_id": 145875, "url": "https://github.com/tackley/dbdeploy", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 64, "size": 7295, "license": "licensed"}}