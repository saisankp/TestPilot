{"test_class": {"identifier": "MoneyTest", "superclass": "extends CachedLogger", "interfaces": "", "fields": [{"original_string": "private Money money;", "modifier": "private", "type": "Money", "declarator": "money", "var_name": "money"}], "file": "concurrency/src/test/java/com/baidu/unbiz/common/lang/MoneyTest.java"}, "test_case": {"identifier": "getCentFactor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getCentFactor() {\n        // \u5143\u4e0e\u5206\u5151\u6362\n        assertEquals(100, money.getCentFactor());\n    }", "signature": "void getCentFactor()", "full_signature": "@Test public void getCentFactor()", "class_method_signature": "MoneyTest.getCentFactor()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getCentFactor"]}, "focal_class": {"identifier": "Money", "superclass": "", "interfaces": "implements Serializable, Comparable<Object>", "fields": [{"original_string": "private static final long serialVersionUID = -2357903412715430340L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -2357903412715430340L", "var_name": "serialVersionUID"}, {"original_string": "public static final String DEFAULT_CURRENCY_CODE = \"CNY\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_CURRENCY_CODE = \"CNY\"", "var_name": "DEFAULT_CURRENCY_CODE"}, {"original_string": "public static final int DEFAULT_ROUNDING_MODE = BigDecimal.ROUND_HALF_EVEN;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_ROUNDING_MODE = BigDecimal.ROUND_HALF_EVEN", "var_name": "DEFAULT_ROUNDING_MODE"}, {"original_string": "private static final int[] centFactors = new int[] { 1, 10, 100, 1000 };", "modifier": "private static final", "type": "int[]", "declarator": "centFactors = new int[] { 1, 10, 100, 1000 }", "var_name": "centFactors"}, {"original_string": "private static final String DEFAULT_LOCALE = \"zh_CN\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_LOCALE = \"zh_CN\"", "var_name": "DEFAULT_LOCALE"}, {"original_string": "protected static Map<String, Map<String, String>> CURRENCY_DISPLAY_UNIT_MAP =\n            new HashMap<String, Map<String, String>>();", "modifier": "protected static", "type": "Map<String, Map<String, String>>", "declarator": "CURRENCY_DISPLAY_UNIT_MAP =\n            new HashMap<String, Map<String, String>>()", "var_name": "CURRENCY_DISPLAY_UNIT_MAP"}, {"original_string": "private long cent;", "modifier": "private", "type": "long", "declarator": "cent", "var_name": "cent"}, {"original_string": "private Currency currency;", "modifier": "private", "type": "Currency", "declarator": "currency", "var_name": "currency"}], "methods": [{"identifier": "Money", "parameters": "()", "modifiers": "public", "return": "", "signature": " Money()", "full_signature": "public  Money()", "class_method_signature": "Money.Money()", "testcase": false, "constructor": true}, {"identifier": "Money", "parameters": "(long yuan, int cent)", "modifiers": "public", "return": "", "signature": " Money(long yuan, int cent)", "full_signature": "public  Money(long yuan, int cent)", "class_method_signature": "Money.Money(long yuan, int cent)", "testcase": false, "constructor": true}, {"identifier": "Money", "parameters": "(long yuan, int cent, Currency currency)", "modifiers": "public", "return": "", "signature": " Money(long yuan, int cent, Currency currency)", "full_signature": "public  Money(long yuan, int cent, Currency currency)", "class_method_signature": "Money.Money(long yuan, int cent, Currency currency)", "testcase": false, "constructor": true}, {"identifier": "Money", "parameters": "(String amount)", "modifiers": "public", "return": "", "signature": " Money(String amount)", "full_signature": "public  Money(String amount)", "class_method_signature": "Money.Money(String amount)", "testcase": false, "constructor": true}, {"identifier": "Money", "parameters": "(String amount, Currency currency)", "modifiers": "public", "return": "", "signature": " Money(String amount, Currency currency)", "full_signature": "public  Money(String amount, Currency currency)", "class_method_signature": "Money.Money(String amount, Currency currency)", "testcase": false, "constructor": true}, {"identifier": "Money", "parameters": "(String amount, Currency currency, int roundingMode)", "modifiers": "public", "return": "", "signature": " Money(String amount, Currency currency, int roundingMode)", "full_signature": "public  Money(String amount, Currency currency, int roundingMode)", "class_method_signature": "Money.Money(String amount, Currency currency, int roundingMode)", "testcase": false, "constructor": true}, {"identifier": "Money", "parameters": "(double amount)", "modifiers": "public", "return": "", "signature": " Money(double amount)", "full_signature": "public  Money(double amount)", "class_method_signature": "Money.Money(double amount)", "testcase": false, "constructor": true}, {"identifier": "Money", "parameters": "(double amount, Currency currency)", "modifiers": "public", "return": "", "signature": " Money(double amount, Currency currency)", "full_signature": "public  Money(double amount, Currency currency)", "class_method_signature": "Money.Money(double amount, Currency currency)", "testcase": false, "constructor": true}, {"identifier": "Money", "parameters": "(BigDecimal amount)", "modifiers": "public", "return": "", "signature": " Money(BigDecimal amount)", "full_signature": "public  Money(BigDecimal amount)", "class_method_signature": "Money.Money(BigDecimal amount)", "testcase": false, "constructor": true}, {"identifier": "Money", "parameters": "(BigDecimal amount, int roundingMode)", "modifiers": "public", "return": "", "signature": " Money(BigDecimal amount, int roundingMode)", "full_signature": "public  Money(BigDecimal amount, int roundingMode)", "class_method_signature": "Money.Money(BigDecimal amount, int roundingMode)", "testcase": false, "constructor": true}, {"identifier": "Money", "parameters": "(BigDecimal amount, Currency currency)", "modifiers": "public", "return": "", "signature": " Money(BigDecimal amount, Currency currency)", "full_signature": "public  Money(BigDecimal amount, Currency currency)", "class_method_signature": "Money.Money(BigDecimal amount, Currency currency)", "testcase": false, "constructor": true}, {"identifier": "Money", "parameters": "(BigDecimal amount, Currency currency, int roundingMode)", "modifiers": "public", "return": "", "signature": " Money(BigDecimal amount, Currency currency, int roundingMode)", "full_signature": "public  Money(BigDecimal amount, Currency currency, int roundingMode)", "class_method_signature": "Money.Money(BigDecimal amount, Currency currency, int roundingMode)", "testcase": false, "constructor": true}, {"identifier": "getAmount", "parameters": "()", "modifiers": "public", "return": "BigDecimal", "signature": "BigDecimal getAmount()", "full_signature": "public BigDecimal getAmount()", "class_method_signature": "Money.getAmount()", "testcase": false, "constructor": false}, {"identifier": "setAmount", "parameters": "(BigDecimal amount)", "modifiers": "public", "return": "void", "signature": "void setAmount(BigDecimal amount)", "full_signature": "public void setAmount(BigDecimal amount)", "class_method_signature": "Money.setAmount(BigDecimal amount)", "testcase": false, "constructor": false}, {"identifier": "getCent", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getCent()", "full_signature": "public long getCent()", "class_method_signature": "Money.getCent()", "testcase": false, "constructor": false}, {"identifier": "getCurrencyCode", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCurrencyCode()", "full_signature": "public String getCurrencyCode()", "class_method_signature": "Money.getCurrencyCode()", "testcase": false, "constructor": false}, {"identifier": "getCentFactor", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getCentFactor()", "full_signature": "public int getCentFactor()", "class_method_signature": "Money.getCentFactor()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object other)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object other)", "full_signature": "public boolean equals(Object other)", "class_method_signature": "Money.equals(Object other)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Money other)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Money other)", "full_signature": "public boolean equals(Money other)", "class_method_signature": "Money.equals(Money other)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int hashCode()", "full_signature": "public int hashCode()", "class_method_signature": "Money.hashCode()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(Object other)", "modifiers": "public", "return": "int", "signature": "int compareTo(Object other)", "full_signature": "public int compareTo(Object other)", "class_method_signature": "Money.compareTo(Object other)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(Money other)", "modifiers": "public", "return": "int", "signature": "int compareTo(Money other)", "full_signature": "public int compareTo(Money other)", "class_method_signature": "Money.compareTo(Money other)", "testcase": false, "constructor": false}, {"identifier": "greaterThan", "parameters": "(Money other)", "modifiers": "public", "return": "boolean", "signature": "boolean greaterThan(Money other)", "full_signature": "public boolean greaterThan(Money other)", "class_method_signature": "Money.greaterThan(Money other)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Money other)", "modifiers": "public", "return": "Money", "signature": "Money add(Money other)", "full_signature": "public Money add(Money other)", "class_method_signature": "Money.add(Money other)", "testcase": false, "constructor": false}, {"identifier": "addTo", "parameters": "(Money other)", "modifiers": "public", "return": "Money", "signature": "Money addTo(Money other)", "full_signature": "public Money addTo(Money other)", "class_method_signature": "Money.addTo(Money other)", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "(Money other)", "modifiers": "public", "return": "Money", "signature": "Money subtract(Money other)", "full_signature": "public Money subtract(Money other)", "class_method_signature": "Money.subtract(Money other)", "testcase": false, "constructor": false}, {"identifier": "subtractFrom", "parameters": "(Money other)", "modifiers": "public", "return": "Money", "signature": "Money subtractFrom(Money other)", "full_signature": "public Money subtractFrom(Money other)", "class_method_signature": "Money.subtractFrom(Money other)", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "(long val)", "modifiers": "public", "return": "Money", "signature": "Money multiply(long val)", "full_signature": "public Money multiply(long val)", "class_method_signature": "Money.multiply(long val)", "testcase": false, "constructor": false}, {"identifier": "multiplyBy", "parameters": "(long val)", "modifiers": "public", "return": "Money", "signature": "Money multiplyBy(long val)", "full_signature": "public Money multiplyBy(long val)", "class_method_signature": "Money.multiplyBy(long val)", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "(double val)", "modifiers": "public", "return": "Money", "signature": "Money multiply(double val)", "full_signature": "public Money multiply(double val)", "class_method_signature": "Money.multiply(double val)", "testcase": false, "constructor": false}, {"identifier": "multiplyBy", "parameters": "(double val)", "modifiers": "public", "return": "Money", "signature": "Money multiplyBy(double val)", "full_signature": "public Money multiplyBy(double val)", "class_method_signature": "Money.multiplyBy(double val)", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "(BigDecimal val)", "modifiers": "public", "return": "Money", "signature": "Money multiply(BigDecimal val)", "full_signature": "public Money multiply(BigDecimal val)", "class_method_signature": "Money.multiply(BigDecimal val)", "testcase": false, "constructor": false}, {"identifier": "multiplyBy", "parameters": "(BigDecimal val)", "modifiers": "public", "return": "Money", "signature": "Money multiplyBy(BigDecimal val)", "full_signature": "public Money multiplyBy(BigDecimal val)", "class_method_signature": "Money.multiplyBy(BigDecimal val)", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "(BigDecimal val, int roundingMode)", "modifiers": "public", "return": "Money", "signature": "Money multiply(BigDecimal val, int roundingMode)", "full_signature": "public Money multiply(BigDecimal val, int roundingMode)", "class_method_signature": "Money.multiply(BigDecimal val, int roundingMode)", "testcase": false, "constructor": false}, {"identifier": "multiplyBy", "parameters": "(BigDecimal val, int roundingMode)", "modifiers": "public", "return": "Money", "signature": "Money multiplyBy(BigDecimal val, int roundingMode)", "full_signature": "public Money multiplyBy(BigDecimal val, int roundingMode)", "class_method_signature": "Money.multiplyBy(BigDecimal val, int roundingMode)", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(double val)", "modifiers": "public", "return": "Money", "signature": "Money divide(double val)", "full_signature": "public Money divide(double val)", "class_method_signature": "Money.divide(double val)", "testcase": false, "constructor": false}, {"identifier": "divideBy", "parameters": "(double val)", "modifiers": "public", "return": "Money", "signature": "Money divideBy(double val)", "full_signature": "public Money divideBy(double val)", "class_method_signature": "Money.divideBy(double val)", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(BigDecimal val)", "modifiers": "public", "return": "Money", "signature": "Money divide(BigDecimal val)", "full_signature": "public Money divide(BigDecimal val)", "class_method_signature": "Money.divide(BigDecimal val)", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(BigDecimal val, int roundingMode)", "modifiers": "public", "return": "Money", "signature": "Money divide(BigDecimal val, int roundingMode)", "full_signature": "public Money divide(BigDecimal val, int roundingMode)", "class_method_signature": "Money.divide(BigDecimal val, int roundingMode)", "testcase": false, "constructor": false}, {"identifier": "divideBy", "parameters": "(BigDecimal val)", "modifiers": "public", "return": "Money", "signature": "Money divideBy(BigDecimal val)", "full_signature": "public Money divideBy(BigDecimal val)", "class_method_signature": "Money.divideBy(BigDecimal val)", "testcase": false, "constructor": false}, {"identifier": "divideBy", "parameters": "(BigDecimal val, int roundingMode)", "modifiers": "public", "return": "Money", "signature": "Money divideBy(BigDecimal val, int roundingMode)", "full_signature": "public Money divideBy(BigDecimal val, int roundingMode)", "class_method_signature": "Money.divideBy(BigDecimal val, int roundingMode)", "testcase": false, "constructor": false}, {"identifier": "allocate", "parameters": "(int targets)", "modifiers": "public", "return": "Money[]", "signature": "Money[] allocate(int targets)", "full_signature": "public Money[] allocate(int targets)", "class_method_signature": "Money.allocate(int targets)", "testcase": false, "constructor": false}, {"identifier": "allocate", "parameters": "(long[] ratios)", "modifiers": "public", "return": "Money[]", "signature": "Money[] allocate(long[] ratios)", "full_signature": "public Money[] allocate(long[] ratios)", "class_method_signature": "Money.allocate(long[] ratios)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "Money.toString()", "testcase": false, "constructor": false}, {"identifier": "assertSameCurrencyAs", "parameters": "(Money other)", "modifiers": "protected", "return": "void", "signature": "void assertSameCurrencyAs(Money other)", "full_signature": "protected void assertSameCurrencyAs(Money other)", "class_method_signature": "Money.assertSameCurrencyAs(Money other)", "testcase": false, "constructor": false}, {"identifier": "rounding", "parameters": "(BigDecimal val, int roundingMode)", "modifiers": "protected", "return": "long", "signature": "long rounding(BigDecimal val, int roundingMode)", "full_signature": "protected long rounding(BigDecimal val, int roundingMode)", "class_method_signature": "Money.rounding(BigDecimal val, int roundingMode)", "testcase": false, "constructor": false}, {"identifier": "newMoneyWithSameCurrency", "parameters": "(long cent1)", "modifiers": "protected", "return": "Money", "signature": "Money newMoneyWithSameCurrency(long cent1)", "full_signature": "protected Money newMoneyWithSameCurrency(long cent1)", "class_method_signature": "Money.newMoneyWithSameCurrency(long cent1)", "testcase": false, "constructor": false}, {"identifier": "dump", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String dump()", "full_signature": "public String dump()", "class_method_signature": "Money.dump()", "testcase": false, "constructor": false}, {"identifier": "setCent", "parameters": "(long cent)", "modifiers": "public", "return": "void", "signature": "void setCent(long cent)", "full_signature": "public void setCent(long cent)", "class_method_signature": "Money.setCent(long cent)", "testcase": false, "constructor": false}, {"identifier": "getDisplayUnit", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDisplayUnit()", "full_signature": "public String getDisplayUnit()", "class_method_signature": "Money.getDisplayUnit()", "testcase": false, "constructor": false}, {"identifier": "getDisplayUnit", "parameters": "(Locale e)", "modifiers": "public", "return": "String", "signature": "String getDisplayUnit(Locale e)", "full_signature": "public String getDisplayUnit(Locale e)", "class_method_signature": "Money.getDisplayUnit(Locale e)", "testcase": false, "constructor": false}], "file": "concurrency/src/main/java/com/baidu/unbiz/common/lang/Money.java"}, "focal_method": {"identifier": "getCentFactor", "parameters": "()", "modifiers": "public", "return": "int", "body": "public int getCentFactor() {\n        return centFactors[this.currency.getDefaultFractionDigits()];\n    }", "signature": "int getCentFactor()", "full_signature": "public int getCentFactor()", "class_method_signature": "Money.getCentFactor()", "testcase": false, "constructor": false, "invocations": ["getDefaultFractionDigits"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}