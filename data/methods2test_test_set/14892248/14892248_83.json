{"test_class": {"identifier": "NoNewLineParagraphTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String IMAGE = \"src/test/resources/images.jpg\";", "modifier": "private static final", "type": "String", "declarator": "IMAGE = \"src/test/resources/images.jpg\"", "var_name": "IMAGE"}, {"original_string": "private NoNewLineParagraph paragraph;", "modifier": "private", "type": "NoNewLineParagraph", "declarator": "paragraph", "var_name": "paragraph"}, {"original_string": "private Element jpegImage;", "modifier": "private", "type": "Element", "declarator": "jpegImage", "var_name": "jpegImage"}], "file": "xmlworker/src/test/java/com/itextpdf/tool/xml/html/pdfelement/NoNewLineParagraphTest.java"}, "test_case": {"identifier": "testAddImageToParagraph", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddImageToParagraph() {\n        final String message = \"Could not add \" + jpegImage.getClass().getName()\n                + \" to \" + paragraph.getClass().getName();\n        assertTrue(message, paragraph.add(jpegImage));\n    }", "signature": "void testAddImageToParagraph()", "full_signature": "@Test public void testAddImageToParagraph()", "class_method_signature": "NoNewLineParagraphTest.testAddImageToParagraph()", "testcase": true, "constructor": false, "invocations": ["getName", "getClass", "getName", "getClass", "assertTrue", "add"]}, "focal_class": {"identifier": "NoNewLineParagraph", "superclass": "extends Phrase", "interfaces": "implements Indentable", "fields": [{"original_string": "private static final long serialVersionUID = -8392940968188620772L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -8392940968188620772L", "var_name": "serialVersionUID"}, {"original_string": "protected int alignment = Element.ALIGN_UNDEFINED;", "modifier": "protected", "type": "int", "declarator": "alignment = Element.ALIGN_UNDEFINED", "var_name": "alignment"}, {"original_string": "protected float indentationLeft;", "modifier": "protected", "type": "float", "declarator": "indentationLeft", "var_name": "indentationLeft"}, {"original_string": "protected float indentationRight;", "modifier": "protected", "type": "float", "declarator": "indentationRight", "var_name": "indentationRight"}, {"original_string": "private float firstLineIndent = 0;", "modifier": "private", "type": "float", "declarator": "firstLineIndent = 0", "var_name": "firstLineIndent"}, {"original_string": "protected float spacingBefore;", "modifier": "protected", "type": "float", "declarator": "spacingBefore", "var_name": "spacingBefore"}, {"original_string": "protected float spacingAfter;", "modifier": "protected", "type": "float", "declarator": "spacingAfter", "var_name": "spacingAfter"}, {"original_string": "private float extraParagraphSpace = 0;", "modifier": "private", "type": "float", "declarator": "extraParagraphSpace = 0", "var_name": "extraParagraphSpace"}, {"original_string": "protected boolean keeptogether = false;", "modifier": "protected", "type": "boolean", "declarator": "keeptogether = false", "var_name": "keeptogether"}], "methods": [{"identifier": "NoNewLineParagraph", "parameters": "()", "modifiers": "public", "return": "", "signature": " NoNewLineParagraph()", "full_signature": "public  NoNewLineParagraph()", "class_method_signature": "NoNewLineParagraph.NoNewLineParagraph()", "testcase": false, "constructor": true}, {"identifier": "NoNewLineParagraph", "parameters": "(final float leading)", "modifiers": "public", "return": "", "signature": " NoNewLineParagraph(final float leading)", "full_signature": "public  NoNewLineParagraph(final float leading)", "class_method_signature": "NoNewLineParagraph.NoNewLineParagraph(final float leading)", "testcase": false, "constructor": true}, {"identifier": "NoNewLineParagraph", "parameters": "(final Chunk chunk)", "modifiers": "public", "return": "", "signature": " NoNewLineParagraph(final Chunk chunk)", "full_signature": "public  NoNewLineParagraph(final Chunk chunk)", "class_method_signature": "NoNewLineParagraph.NoNewLineParagraph(final Chunk chunk)", "testcase": false, "constructor": true}, {"identifier": "NoNewLineParagraph", "parameters": "(final float leading, final Chunk chunk)", "modifiers": "public", "return": "", "signature": " NoNewLineParagraph(final float leading, final Chunk chunk)", "full_signature": "public  NoNewLineParagraph(final float leading, final Chunk chunk)", "class_method_signature": "NoNewLineParagraph.NoNewLineParagraph(final float leading, final Chunk chunk)", "testcase": false, "constructor": true}, {"identifier": "NoNewLineParagraph", "parameters": "(final String string)", "modifiers": "public", "return": "", "signature": " NoNewLineParagraph(final String string)", "full_signature": "public  NoNewLineParagraph(final String string)", "class_method_signature": "NoNewLineParagraph.NoNewLineParagraph(final String string)", "testcase": false, "constructor": true}, {"identifier": "NoNewLineParagraph", "parameters": "(final String string, final Font font)", "modifiers": "public", "return": "", "signature": " NoNewLineParagraph(final String string, final Font font)", "full_signature": "public  NoNewLineParagraph(final String string, final Font font)", "class_method_signature": "NoNewLineParagraph.NoNewLineParagraph(final String string, final Font font)", "testcase": false, "constructor": true}, {"identifier": "NoNewLineParagraph", "parameters": "(final float leading, final String string)", "modifiers": "public", "return": "", "signature": " NoNewLineParagraph(final float leading, final String string)", "full_signature": "public  NoNewLineParagraph(final float leading, final String string)", "class_method_signature": "NoNewLineParagraph.NoNewLineParagraph(final float leading, final String string)", "testcase": false, "constructor": true}, {"identifier": "NoNewLineParagraph", "parameters": "(final float leading, final String string, final Font font)", "modifiers": "public", "return": "", "signature": " NoNewLineParagraph(final float leading, final String string, final Font font)", "full_signature": "public  NoNewLineParagraph(final float leading, final String string, final Font font)", "class_method_signature": "NoNewLineParagraph.NoNewLineParagraph(final float leading, final String string, final Font font)", "testcase": false, "constructor": true}, {"identifier": "NoNewLineParagraph", "parameters": "(final Phrase phrase)", "modifiers": "public", "return": "", "signature": " NoNewLineParagraph(final Phrase phrase)", "full_signature": "public  NoNewLineParagraph(final Phrase phrase)", "class_method_signature": "NoNewLineParagraph.NoNewLineParagraph(final Phrase phrase)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(final Element o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(final Element o)", "full_signature": "@Override public boolean add(final Element o)", "class_method_signature": "NoNewLineParagraph.add(final Element o)", "testcase": false, "constructor": false}, {"identifier": "setAlignment", "parameters": "(final int alignment)", "modifiers": "public", "return": "void", "signature": "void setAlignment(final int alignment)", "full_signature": "public void setAlignment(final int alignment)", "class_method_signature": "NoNewLineParagraph.setAlignment(final int alignment)", "testcase": false, "constructor": false}, {"identifier": "setIndentationLeft", "parameters": "(final float indentation)", "modifiers": "public", "return": "void", "signature": "void setIndentationLeft(final float indentation)", "full_signature": "public void setIndentationLeft(final float indentation)", "class_method_signature": "NoNewLineParagraph.setIndentationLeft(final float indentation)", "testcase": false, "constructor": false}, {"identifier": "setIndentationRight", "parameters": "(final float indentation)", "modifiers": "public", "return": "void", "signature": "void setIndentationRight(final float indentation)", "full_signature": "public void setIndentationRight(final float indentation)", "class_method_signature": "NoNewLineParagraph.setIndentationRight(final float indentation)", "testcase": false, "constructor": false}, {"identifier": "setFirstLineIndent", "parameters": "(final float firstLineIndent)", "modifiers": "public", "return": "void", "signature": "void setFirstLineIndent(final float firstLineIndent)", "full_signature": "public void setFirstLineIndent(final float firstLineIndent)", "class_method_signature": "NoNewLineParagraph.setFirstLineIndent(final float firstLineIndent)", "testcase": false, "constructor": false}, {"identifier": "setSpacingBefore", "parameters": "(final float spacing)", "modifiers": "public", "return": "void", "signature": "void setSpacingBefore(final float spacing)", "full_signature": "public void setSpacingBefore(final float spacing)", "class_method_signature": "NoNewLineParagraph.setSpacingBefore(final float spacing)", "testcase": false, "constructor": false}, {"identifier": "setSpacingAfter", "parameters": "(final float spacing)", "modifiers": "public", "return": "void", "signature": "void setSpacingAfter(final float spacing)", "full_signature": "public void setSpacingAfter(final float spacing)", "class_method_signature": "NoNewLineParagraph.setSpacingAfter(final float spacing)", "testcase": false, "constructor": false}, {"identifier": "setKeepTogether", "parameters": "(final boolean keeptogether)", "modifiers": "public", "return": "void", "signature": "void setKeepTogether(final boolean keeptogether)", "full_signature": "public void setKeepTogether(final boolean keeptogether)", "class_method_signature": "NoNewLineParagraph.setKeepTogether(final boolean keeptogether)", "testcase": false, "constructor": false}, {"identifier": "getKeepTogether", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getKeepTogether()", "full_signature": "public boolean getKeepTogether()", "class_method_signature": "NoNewLineParagraph.getKeepTogether()", "testcase": false, "constructor": false}, {"identifier": "getAlignment", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getAlignment()", "full_signature": "public int getAlignment()", "class_method_signature": "NoNewLineParagraph.getAlignment()", "testcase": false, "constructor": false}, {"identifier": "getIndentationLeft", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getIndentationLeft()", "full_signature": "public float getIndentationLeft()", "class_method_signature": "NoNewLineParagraph.getIndentationLeft()", "testcase": false, "constructor": false}, {"identifier": "getIndentationRight", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getIndentationRight()", "full_signature": "public float getIndentationRight()", "class_method_signature": "NoNewLineParagraph.getIndentationRight()", "testcase": false, "constructor": false}, {"identifier": "getFirstLineIndent", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getFirstLineIndent()", "full_signature": "public float getFirstLineIndent()", "class_method_signature": "NoNewLineParagraph.getFirstLineIndent()", "testcase": false, "constructor": false}, {"identifier": "getSpacingBefore", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getSpacingBefore()", "full_signature": "public float getSpacingBefore()", "class_method_signature": "NoNewLineParagraph.getSpacingBefore()", "testcase": false, "constructor": false}, {"identifier": "getSpacingAfter", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getSpacingAfter()", "full_signature": "public float getSpacingAfter()", "class_method_signature": "NoNewLineParagraph.getSpacingAfter()", "testcase": false, "constructor": false}, {"identifier": "getExtraParagraphSpace", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getExtraParagraphSpace()", "full_signature": "public float getExtraParagraphSpace()", "class_method_signature": "NoNewLineParagraph.getExtraParagraphSpace()", "testcase": false, "constructor": false}, {"identifier": "setExtraParagraphSpace", "parameters": "(final float extraParagraphSpace)", "modifiers": "public", "return": "void", "signature": "void setExtraParagraphSpace(final float extraParagraphSpace)", "full_signature": "public void setExtraParagraphSpace(final float extraParagraphSpace)", "class_method_signature": "NoNewLineParagraph.setExtraParagraphSpace(final float extraParagraphSpace)", "testcase": false, "constructor": false}, {"identifier": "spacingBefore", "parameters": "()", "modifiers": "@Deprecated public", "return": "float", "signature": "float spacingBefore()", "full_signature": "@Deprecated public float spacingBefore()", "class_method_signature": "NoNewLineParagraph.spacingBefore()", "testcase": false, "constructor": false}, {"identifier": "spacingAfter", "parameters": "()", "modifiers": "@Deprecated public", "return": "float", "signature": "float spacingAfter()", "full_signature": "@Deprecated public float spacingAfter()", "class_method_signature": "NoNewLineParagraph.spacingAfter()", "testcase": false, "constructor": false}], "file": "xmlworker/src/main/java/com/itextpdf/tool/xml/html/pdfelement/NoNewLineParagraph.java"}, "focal_method": {"identifier": "add", "parameters": "(final Element o)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean add(final Element o) {\n        if (o instanceof List) {\n            List list = (List) o;\n            list.setIndentationLeft(list.getIndentationLeft() + indentationLeft);\n            list.setIndentationRight(indentationRight);\n            return super.add(list);\n        }\n        else if (o instanceof Image) {\n            super.addSpecial(o);\n            return true;\n        }\n        return super.add(o);\n    }", "signature": "boolean add(final Element o)", "full_signature": "@Override public boolean add(final Element o)", "class_method_signature": "NoNewLineParagraph.add(final Element o)", "testcase": false, "constructor": false, "invocations": ["setIndentationLeft", "getIndentationLeft", "setIndentationRight", "add", "addSpecial", "add"]}, "repository": {"repo_id": 14892248, "url": "https://github.com/itext/itextpdf", "language": "Java", "is_fork": false, "fork_count": 400, "stargazer_count": 1164, "size": 115070, "license": "licensed"}}