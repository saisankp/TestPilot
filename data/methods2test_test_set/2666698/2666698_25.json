{"test_class": {"identifier": "FeatureXmlTransformerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static ArtifactKey rcpFeatureInTP;", "modifier": "private static", "type": "ArtifactKey", "declarator": "rcpFeatureInTP", "var_name": "rcpFeatureInTP"}, {"original_string": "private static ArtifactKey junit4InTP;", "modifier": "private static", "type": "ArtifactKey", "declarator": "junit4InTP", "var_name": "junit4InTP"}, {"original_string": "private static File junit4JarLocation;", "modifier": "private static", "type": "File", "declarator": "junit4JarLocation", "var_name": "junit4JarLocation"}, {"original_string": "private FeatureXmlTransformer subject;", "modifier": "private", "type": "FeatureXmlTransformer", "declarator": "subject", "var_name": "subject"}], "file": "tycho-packaging-plugin/src/test/java/org/eclipse/tycho/packaging/FeatureXmlTransformerTest.java"}, "test_case": {"identifier": "testExpandReferences", "parameters": "()", "modifiers": "@SuppressWarnings(\"deprecation\") @Test public", "return": "void", "body": "@SuppressWarnings(\"deprecation\")\n    @Test\n    public void testExpandReferences() throws Exception {\n        subject = new FeatureXmlTransformer(new SilentLog(), new NoopFileLockService());\n        Feature feature = Feature\n                .read(new File(TestUtil.getBasedir(\"projects/featureXmlVersionExpansion/\"), \"feature.xml\"));\n\n        TargetPlatform tp = mock(TargetPlatform.class);\n        when(tp.resolveArtifact(\"eclipse-feature\", \"org.eclipse.rcp\", \"4.5.0.qualifier\")).thenReturn(rcpFeatureInTP);\n        when(tp.resolveArtifact(\"eclipse-plugin\", \"org.junit4\", \"4.8.1.qualifier\")).thenReturn(junit4InTP);\n        when(tp.getArtifactLocation(junit4InTP)).thenReturn(junit4JarLocation);\n\n        subject.expandReferences(feature, tp);\n\n        assertThat(feature.getIncludedFeatures(), hasItem(feature(\"org.eclipse.rcp\", \"4.5.0.v20140918\")));\n\n        assertThat(feature.getPlugins(), hasItem(plugin(\"org.junit4\", \"4.8.1.v20100302\")));\n        PluginRef plugin = feature.getPlugins().get(0);\n        assertThat(plugin.getId(), is(\"org.junit4\"));\n        assertThat(plugin.getDownloadSize(), is(1L)); // 1720 bytes rounded to kiB\n        assertThat(plugin.getInstallSize(), is(2L)); // 2419 bytes rounded to kiB // TODO shouldn't installSize=downloadSize for unpack=false?\n        assertThat(plugin.isUnpack(), is(false));\n    }", "signature": "void testExpandReferences()", "full_signature": "@SuppressWarnings(\"deprecation\") @Test public void testExpandReferences()", "class_method_signature": "FeatureXmlTransformerTest.testExpandReferences()", "testcase": true, "constructor": false, "invocations": ["read", "getBasedir", "mock", "thenReturn", "when", "resolveArtifact", "thenReturn", "when", "resolveArtifact", "thenReturn", "when", "getArtifactLocation", "expandReferences", "assertThat", "getIncludedFeatures", "hasItem", "feature", "assertThat", "getPlugins", "hasItem", "plugin", "get", "getPlugins", "assertThat", "getId", "is", "assertThat", "getDownloadSize", "is", "assertThat", "getInstallSize", "is", "assertThat", "isUnpack", "is"]}, "focal_class": {"identifier": "FeatureXmlTransformer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int KBYTE = 1024;", "modifier": "private static final", "type": "int", "declarator": "KBYTE = 1024", "var_name": "KBYTE"}, {"original_string": "@Requirement\n    private Logger log;", "modifier": "@Requirement\n    private", "type": "Logger", "declarator": "log", "var_name": "log"}, {"original_string": "@Requirement\n    private FileLockService fileLockService;", "modifier": "@Requirement\n    private", "type": "FileLockService", "declarator": "fileLockService", "var_name": "fileLockService"}], "methods": [{"identifier": "FeatureXmlTransformer", "parameters": "()", "modifiers": "public", "return": "", "signature": " FeatureXmlTransformer()", "full_signature": "public  FeatureXmlTransformer()", "class_method_signature": "FeatureXmlTransformer.FeatureXmlTransformer()", "testcase": false, "constructor": true}, {"identifier": "FeatureXmlTransformer", "parameters": "(Logger log, FileLockService fileLockService)", "modifiers": "public", "return": "", "signature": " FeatureXmlTransformer(Logger log, FileLockService fileLockService)", "full_signature": "public  FeatureXmlTransformer(Logger log, FileLockService fileLockService)", "class_method_signature": "FeatureXmlTransformer.FeatureXmlTransformer(Logger log, FileLockService fileLockService)", "testcase": false, "constructor": true}, {"identifier": "expandReferences", "parameters": "(Feature feature, TargetPlatform targetPlatform)", "modifiers": "public", "return": "Feature", "signature": "Feature expandReferences(Feature feature, TargetPlatform targetPlatform)", "full_signature": "public Feature expandReferences(Feature feature, TargetPlatform targetPlatform)", "class_method_signature": "FeatureXmlTransformer.expandReferences(Feature feature, TargetPlatform targetPlatform)", "testcase": false, "constructor": false}, {"identifier": "resolvePluginReference", "parameters": "(TargetPlatform targetPlatform, PluginRef pluginRef)", "modifiers": "private", "return": "ArtifactKey", "signature": "ArtifactKey resolvePluginReference(TargetPlatform targetPlatform, PluginRef pluginRef)", "full_signature": "private ArtifactKey resolvePluginReference(TargetPlatform targetPlatform, PluginRef pluginRef)", "class_method_signature": "FeatureXmlTransformer.resolvePluginReference(TargetPlatform targetPlatform, PluginRef pluginRef)", "testcase": false, "constructor": false}, {"identifier": "resolveFeatureReference", "parameters": "(TargetPlatform targetPlatform, FeatureRef featureRef)", "modifiers": "private", "return": "ArtifactKey", "signature": "ArtifactKey resolveFeatureReference(TargetPlatform targetPlatform, FeatureRef featureRef)", "full_signature": "private ArtifactKey resolveFeatureReference(TargetPlatform targetPlatform, FeatureRef featureRef)", "class_method_signature": "FeatureXmlTransformer.resolveFeatureReference(TargetPlatform targetPlatform, FeatureRef featureRef)", "testcase": false, "constructor": false}, {"identifier": "quote", "parameters": "(String nullableString)", "modifiers": "private static", "return": "String", "signature": "String quote(String nullableString)", "full_signature": "private static String quote(String nullableString)", "class_method_signature": "FeatureXmlTransformer.quote(String nullableString)", "testcase": false, "constructor": false}, {"identifier": "setDownloadAndInstallSize", "parameters": "(PluginRef pluginRefToEdit, File artifact)", "modifiers": "private", "return": "void", "signature": "void setDownloadAndInstallSize(PluginRef pluginRefToEdit, File artifact)", "full_signature": "private void setDownloadAndInstallSize(PluginRef pluginRefToEdit, File artifact)", "class_method_signature": "FeatureXmlTransformer.setDownloadAndInstallSize(PluginRef pluginRefToEdit, File artifact)", "testcase": false, "constructor": false}, {"identifier": "getInstallSize", "parameters": "(File location)", "modifiers": "protected", "return": "long", "signature": "long getInstallSize(File location)", "full_signature": "protected long getInstallSize(File location)", "class_method_signature": "FeatureXmlTransformer.getInstallSize(File location)", "testcase": false, "constructor": false}], "file": "tycho-packaging-plugin/src/main/java/org/eclipse/tycho/packaging/FeatureXmlTransformer.java"}, "focal_method": {"identifier": "expandReferences", "parameters": "(Feature feature, TargetPlatform targetPlatform)", "modifiers": "public", "return": "Feature", "body": "public Feature expandReferences(Feature feature, TargetPlatform targetPlatform) throws MojoFailureException {\n\n        for (PluginRef pluginRef : feature.getPlugins()) {\n            ArtifactKey plugin = resolvePluginReference(targetPlatform, pluginRef);\n            pluginRef.setVersion(plugin.getVersion());\n\n            File location = targetPlatform.getArtifactLocation(plugin);\n            setDownloadAndInstallSize(pluginRef, location);\n        }\n\n        for (FeatureRef featureRef : feature.getIncludedFeatures()) {\n            ArtifactKey includedFeature = resolveFeatureReference(targetPlatform, featureRef);\n            featureRef.setVersion(includedFeature.getVersion());\n        }\n\n        return feature;\n    }", "signature": "Feature expandReferences(Feature feature, TargetPlatform targetPlatform)", "full_signature": "public Feature expandReferences(Feature feature, TargetPlatform targetPlatform)", "class_method_signature": "FeatureXmlTransformer.expandReferences(Feature feature, TargetPlatform targetPlatform)", "testcase": false, "constructor": false, "invocations": ["getPlugins", "resolvePluginReference", "setVersion", "getVersion", "getArtifactLocation", "setDownloadAndInstallSize", "getIncludedFeatures", "resolveFeatureReference", "setVersion", "getVersion"]}, "repository": {"repo_id": 2666698, "url": "https://github.com/eclipse/tycho", "language": "Java", "is_fork": false, "fork_count": 67, "stargazer_count": 61, "size": 22429, "license": "licensed"}}