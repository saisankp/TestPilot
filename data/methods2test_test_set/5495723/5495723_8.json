{"test_class": {"identifier": "SetPreferenceCommandTest", "superclass": "", "interfaces": "", "fields": [], "file": "de.prob2.kernel/src/test/java/de/prob/animator/command/SetPreferenceCommandTest.java"}, "test_case": {"identifier": "testWriteCommand", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testWriteCommand() {\n\t\tStructuredPrologOutput prologTermOutput = new StructuredPrologOutput();\n\t\tSetPreferenceCommand command = new SetPreferenceCommand(\"foo\", \"bar\");\n\t\tcommand.writeCommand(prologTermOutput);\n\t\tprologTermOutput.fullstop().flush();\n\n\t\tCollection<PrologTerm> sentences = prologTermOutput.getSentences();\n\t\tPrologTerm t = sentences.iterator().next();\n\n\t\tassertNotNull(t);\n\t\tassertTrue(t instanceof CompoundPrologTerm);\n\t\tassertEquals(\"set_eclipse_preference\", t.getFunctor());\n\t\tassertEquals(2, t.getArity());\n\n\t\tPrologTerm argument1 = t.getArgument(1);\n\t\tassertTrue(argument1.isAtom());\n\t\tassertEquals(\"foo\", argument1.toString());\n\n\t\tPrologTerm argument2 = t.getArgument(2);\n\t\tassertTrue(argument2.isAtom());\n\t\tassertEquals(\"bar\", argument2.toString());\n\t}", "signature": "void testWriteCommand()", "full_signature": "@Test public void testWriteCommand()", "class_method_signature": "SetPreferenceCommandTest.testWriteCommand()", "testcase": true, "constructor": false, "invocations": ["writeCommand", "flush", "fullstop", "getSentences", "next", "iterator", "assertNotNull", "assertTrue", "assertEquals", "getFunctor", "assertEquals", "getArity", "getArgument", "assertTrue", "isAtom", "assertEquals", "toString", "getArgument", "assertTrue", "isAtom", "assertEquals", "toString"]}, "focal_class": {"identifier": "SetPreferenceCommand", "superclass": "extends AbstractCommand", "interfaces": "", "fields": [{"original_string": "private static final String PROLOG_COMMAND_NAME = \"set_eclipse_preference\";", "modifier": "private static final", "type": "String", "declarator": "PROLOG_COMMAND_NAME = \"set_eclipse_preference\"", "var_name": "PROLOG_COMMAND_NAME"}, {"original_string": "private final String key;", "modifier": "private final", "type": "String", "declarator": "key", "var_name": "key"}, {"original_string": "private final String value;", "modifier": "private final", "type": "String", "declarator": "value", "var_name": "value"}], "methods": [{"identifier": "SetPreferenceCommand", "parameters": "(final String key, final String value)", "modifiers": "public", "return": "", "signature": " SetPreferenceCommand(final String key, final String value)", "full_signature": "public  SetPreferenceCommand(final String key, final String value)", "class_method_signature": "SetPreferenceCommand.SetPreferenceCommand(final String key, final String value)", "testcase": false, "constructor": true}, {"identifier": "processResult", "parameters": "(\n\t\t\tfinal ISimplifiedROMap<String, PrologTerm> bindings)", "modifiers": "@Override public", "return": "void", "signature": "void processResult(\n\t\t\tfinal ISimplifiedROMap<String, PrologTerm> bindings)", "full_signature": "@Override public void processResult(\n\t\t\tfinal ISimplifiedROMap<String, PrologTerm> bindings)", "class_method_signature": "SetPreferenceCommand.processResult(\n\t\t\tfinal ISimplifiedROMap<String, PrologTerm> bindings)", "testcase": false, "constructor": false}, {"identifier": "writeCommand", "parameters": "(final IPrologTermOutput pto)", "modifiers": "@Override public", "return": "void", "signature": "void writeCommand(final IPrologTermOutput pto)", "full_signature": "@Override public void writeCommand(final IPrologTermOutput pto)", "class_method_signature": "SetPreferenceCommand.writeCommand(final IPrologTermOutput pto)", "testcase": false, "constructor": false}], "file": "de.prob2.kernel/src/main/java/de/prob/animator/command/SetPreferenceCommand.java"}, "focal_method": {"identifier": "writeCommand", "parameters": "(final IPrologTermOutput pto)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void writeCommand(final IPrologTermOutput pto) {\n\t\tpto.openTerm(PROLOG_COMMAND_NAME).printAtom(key).printAtom(value)\n\t\t\t\t.closeTerm();\n\t}", "signature": "void writeCommand(final IPrologTermOutput pto)", "full_signature": "@Override public void writeCommand(final IPrologTermOutput pto)", "class_method_signature": "SetPreferenceCommand.writeCommand(final IPrologTermOutput pto)", "testcase": false, "constructor": false, "invocations": ["closeTerm", "printAtom", "printAtom", "openTerm"]}, "repository": {"repo_id": 5495723, "url": "https://github.com/bendisposto/prob2", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 11, "size": 32880, "license": "licensed"}}