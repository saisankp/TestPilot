{"test_class": {"identifier": "EntityGraphTest", "superclass": "extends AbstractTestBase", "interfaces": "", "fields": [{"original_string": "private ConfigurationStore store = ConfigurationStore.get();", "modifier": "private", "type": "ConfigurationStore", "declarator": "store = ConfigurationStore.get()", "var_name": "store"}, {"original_string": "private EntityGraph graph = EntityGraph.get();", "modifier": "private", "type": "EntityGraph", "declarator": "graph = EntityGraph.get()", "var_name": "graph"}], "file": "common/src/test/java/org/apache/ivory/entity/v0/EntityGraphTest.java"}, "test_case": {"identifier": "testOnRemove", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOnRemove() throws Exception {\n        Process process = new Process();\n        process.setName(\"rp1\");\n        Cluster cluster = new Cluster();\n        cluster.setName(\"rc1\");\n        cluster.setColo(\"2\");\n        org.apache.ivory.entity.v0.process.Cluster processCluster = new org.apache.ivory.entity.v0.process.Cluster();\n        processCluster.setName(\"rc1\");\n        process.setClusters(new org.apache.ivory.entity.v0.process.Clusters());\n        process.getClusters().getClusters().add(processCluster);\n\n        store.publish(EntityType.CLUSTER, cluster);\n        store.publish(EntityType.PROCESS, process);\n\n        Set<Entity> entities = graph.getDependents(process);\n        Assert.assertEquals(entities.size(), 1);\n        Assert.assertTrue(entities.contains(cluster));\n\n        entities = graph.getDependents(cluster);\n        Assert.assertEquals(entities.size(), 1);\n        Assert.assertTrue(entities.contains(process));\n\n        store.remove(EntityType.PROCESS, process.getName());\n        entities = graph.getDependents(cluster);\n        Assert.assertTrue(entities == null);\n\n        entities = graph.getDependents(process);\n        Assert.assertTrue(entities == null);\n    }", "signature": "void testOnRemove()", "full_signature": "@Test public void testOnRemove()", "class_method_signature": "EntityGraphTest.testOnRemove()", "testcase": true, "constructor": false, "invocations": ["setName", "setName", "setColo", "setName", "setClusters", "add", "getClusters", "getClusters", "publish", "publish", "getDependents", "assertEquals", "size", "assertTrue", "contains", "getDependents", "assertEquals", "size", "assertTrue", "contains", "remove", "getName", "getDependents", "assertTrue", "getDependents", "assertTrue"]}, "focal_class": {"identifier": "EntityGraph", "superclass": "", "interfaces": "implements ConfigurationChangeListener", "fields": [{"original_string": "private static Logger LOG = Logger.getLogger(EntityGraph.class);", "modifier": "private static", "type": "Logger", "declarator": "LOG = Logger.getLogger(EntityGraph.class)", "var_name": "LOG"}, {"original_string": "private static EntityGraph instance = new EntityGraph();", "modifier": "private static", "type": "EntityGraph", "declarator": "instance = new EntityGraph()", "var_name": "instance"}, {"original_string": "private Map<Node, Set<Node>> graph = new ConcurrentHashMap<Node, Set<Node>>();", "modifier": "private", "type": "Map<Node, Set<Node>>", "declarator": "graph = new ConcurrentHashMap<Node, Set<Node>>()", "var_name": "graph"}], "methods": [{"identifier": "EntityGraph", "parameters": "()", "modifiers": "private", "return": "", "signature": " EntityGraph()", "full_signature": "private  EntityGraph()", "class_method_signature": "EntityGraph.EntityGraph()", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "()", "modifiers": "public static", "return": "EntityGraph", "signature": "EntityGraph get()", "full_signature": "public static EntityGraph get()", "class_method_signature": "EntityGraph.get()", "testcase": false, "constructor": false}, {"identifier": "getDependents", "parameters": "(Entity entity)", "modifiers": "public", "return": "Set<Entity>", "signature": "Set<Entity> getDependents(Entity entity)", "full_signature": "public Set<Entity> getDependents(Entity entity)", "class_method_signature": "EntityGraph.getDependents(Entity entity)", "testcase": false, "constructor": false}, {"identifier": "onAdd", "parameters": "(Entity entity)", "modifiers": "@Override public", "return": "void", "signature": "void onAdd(Entity entity)", "full_signature": "@Override public void onAdd(Entity entity)", "class_method_signature": "EntityGraph.onAdd(Entity entity)", "testcase": false, "constructor": false}, {"identifier": "onRemove", "parameters": "(Entity entity)", "modifiers": "@Override public", "return": "void", "signature": "void onRemove(Entity entity)", "full_signature": "@Override public void onRemove(Entity entity)", "class_method_signature": "EntityGraph.onRemove(Entity entity)", "testcase": false, "constructor": false}, {"identifier": "onChange", "parameters": "(Entity oldEntity, Entity newEntity)", "modifiers": "@Override public", "return": "void", "signature": "void onChange(Entity oldEntity, Entity newEntity)", "full_signature": "@Override public void onChange(Entity oldEntity, Entity newEntity)", "class_method_signature": "EntityGraph.onChange(Entity oldEntity, Entity newEntity)", "testcase": false, "constructor": false}, {"identifier": "getEdgesFor", "parameters": "(Process process)", "modifiers": "private", "return": "Map<Node, Set<Node>>", "signature": "Map<Node, Set<Node>> getEdgesFor(Process process)", "full_signature": "private Map<Node, Set<Node>> getEdgesFor(Process process)", "class_method_signature": "EntityGraph.getEdgesFor(Process process)", "testcase": false, "constructor": false}, {"identifier": "getEdgesFor", "parameters": "(Feed feed)", "modifiers": "private", "return": "Map<Node, Set<Node>>", "signature": "Map<Node, Set<Node>> getEdgesFor(Feed feed)", "full_signature": "private Map<Node, Set<Node>> getEdgesFor(Feed feed)", "class_method_signature": "EntityGraph.getEdgesFor(Feed feed)", "testcase": false, "constructor": false}], "file": "common/src/main/java/org/apache/ivory/entity/v0/EntityGraph.java"}, "focal_method": {"identifier": "onRemove", "parameters": "(Entity entity)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onRemove(Entity entity) throws IvoryException {\n        Map<Node, Set<Node>> nodeEdges = null;\n        switch (entity.getEntityType()) {\n            case PROCESS:\n                nodeEdges = getEdgesFor((Process) entity);\n                break;\n            case FEED:\n                nodeEdges = getEdgesFor((Feed) entity);\n                break;\n        }\n        if (nodeEdges == null)\n            return;\n\n        for (Map.Entry<Node, Set<Node>> entry : nodeEdges.entrySet()) {\n            if (graph.containsKey(entry.getKey())) {\n                graph.get(entry.getKey()).removeAll(entry.getValue());\n                if (graph.get(entry.getKey()).isEmpty()) {\n                    graph.remove(entry.getKey());\n                }\n            }\n        }\n    }", "signature": "void onRemove(Entity entity)", "full_signature": "@Override public void onRemove(Entity entity)", "class_method_signature": "EntityGraph.onRemove(Entity entity)", "testcase": false, "constructor": false, "invocations": ["getEntityType", "getEdgesFor", "getEdgesFor", "entrySet", "containsKey", "getKey", "removeAll", "get", "getKey", "getValue", "isEmpty", "get", "getKey", "remove", "getKey"]}, "repository": {"repo_id": 2836228, "url": "https://github.com/sriksun/Ivory", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 28, "size": 11708, "license": "licensed"}}