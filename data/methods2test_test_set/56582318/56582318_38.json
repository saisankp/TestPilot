{"test_class": {"identifier": "OperateursTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "IDirectPosition point1;", "modifier": "", "type": "IDirectPosition", "declarator": "point1", "var_name": "point1"}, {"original_string": "IDirectPosition point2;", "modifier": "", "type": "IDirectPosition", "declarator": "point2", "var_name": "point2"}, {"original_string": "IDirectPosition point3;", "modifier": "", "type": "IDirectPosition", "declarator": "point3", "var_name": "point3"}, {"original_string": "IDirectPosition point4;", "modifier": "", "type": "IDirectPosition", "declarator": "point4", "var_name": "point4"}, {"original_string": "IDirectPosition point5;", "modifier": "", "type": "IDirectPosition", "declarator": "point5", "var_name": "point5"}, {"original_string": "IDirectPosition point6;", "modifier": "", "type": "IDirectPosition", "declarator": "point6", "var_name": "point6"}, {"original_string": "IDirectPosition point7;", "modifier": "", "type": "IDirectPosition", "declarator": "point7", "var_name": "point7"}, {"original_string": "ILineString line1;", "modifier": "", "type": "ILineString", "declarator": "line1", "var_name": "line1"}], "file": "geoxygene-spatial/src/test/java/fr/ign/cogit/geoxygene/contrib/geometrie/OperateursTest.java"}, "test_case": {"identifier": "testCompileArcs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCompileArcs() {\n    WKTReader reader = new WKTReader();\n    try {\n      Geometry g1 = reader\n          .read(\"LINESTRING ( 651124.9 6861379.5 1365, 651134 6861382.300000001 1364, 651156.2000000001 6861384.5 1363 )\");\n      Geometry g2 = reader\n          .read(\"LINESTRING ( 651156.2000000001 6861384.5 1363, 651189.3 6861387.9 1361 )\");\n      List<ILineString> edges = new ArrayList<ILineString>();\n      ILineString line1 = (ILineString) AdapterFactory.toGM_Object(g1);\n      ILineString line2 = (ILineString) AdapterFactory.toGM_Object(g2);\n      edges.add(line1);\n      edges.add(line2);\n      ILineString result = Operateurs.compileArcs(edges);\n      System.out.println(result);\n      edges.remove(line1);\n      edges.add(line1);\n      result = Operateurs.compileArcs(edges);\n      Assert.assertNotNull(result);\n      System.out.println(result);\n    } catch (ParseException e) {\n      e.printStackTrace();\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n\n  }", "signature": "void testCompileArcs()", "full_signature": "@Test public void testCompileArcs()", "class_method_signature": "OperateursTest.testCompileArcs()", "testcase": true, "constructor": false, "invocations": ["read", "read", "toGM_Object", "toGM_Object", "add", "add", "compileArcs", "println", "remove", "add", "compileArcs", "assertNotNull", "println", "printStackTrace", "printStackTrace"]}, "focal_class": {"identifier": "Operateurs", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = Logger.getLogger(Operateurs.class.getName());", "modifier": "private static", "type": "Logger", "declarator": "logger = Logger.getLogger(Operateurs.class.getName())", "var_name": "logger"}], "methods": [{"identifier": "paramForPoint", "parameters": "(IDirectPosition m, IDirectPosition a, IDirectPosition b)", "modifiers": "public static", "return": "double", "signature": "double paramForPoint(IDirectPosition m, IDirectPosition a, IDirectPosition b)", "full_signature": "public static double paramForPoint(IDirectPosition m, IDirectPosition a, IDirectPosition b)", "class_method_signature": "Operateurs.paramForPoint(IDirectPosition m, IDirectPosition a, IDirectPosition b)", "testcase": false, "constructor": false}, {"identifier": "param", "parameters": "(double param, IDirectPosition a, IDirectPosition b)", "modifiers": "public static", "return": "IDirectPosition", "signature": "IDirectPosition param(double param, IDirectPosition a, IDirectPosition b)", "full_signature": "public static IDirectPosition param(double param, IDirectPosition a, IDirectPosition b)", "class_method_signature": "Operateurs.param(double param, IDirectPosition a, IDirectPosition b)", "testcase": false, "constructor": false}, {"identifier": "projection", "parameters": "(IDirectPosition m, IDirectPosition a, IDirectPosition b)", "modifiers": "public static", "return": "IDirectPosition", "signature": "IDirectPosition projection(IDirectPosition m, IDirectPosition a, IDirectPosition b)", "full_signature": "public static IDirectPosition projection(IDirectPosition m, IDirectPosition a, IDirectPosition b)", "class_method_signature": "Operateurs.projection(IDirectPosition m, IDirectPosition a, IDirectPosition b)", "testcase": false, "constructor": false}, {"identifier": "projection", "parameters": "(IDirectPosition dp, ILineString ls)", "modifiers": "public static", "return": "IDirectPosition", "signature": "IDirectPosition projection(IDirectPosition dp, ILineString ls)", "full_signature": "public static IDirectPosition projection(IDirectPosition dp, ILineString ls)", "class_method_signature": "Operateurs.projection(IDirectPosition dp, ILineString ls)", "testcase": false, "constructor": false}, {"identifier": "projectionEtInsertion", "parameters": "(IDirectPosition point, ILineString line)", "modifiers": "public static", "return": "ILineString", "signature": "ILineString projectionEtInsertion(IDirectPosition point, ILineString line)", "full_signature": "public static ILineString projectionEtInsertion(IDirectPosition point, ILineString line)", "class_method_signature": "Operateurs.projectionEtInsertion(IDirectPosition point, ILineString line)", "testcase": false, "constructor": false}, {"identifier": "projectAndInsert", "parameters": "(IDirectPosition point, List<IDirectPosition> points)", "modifiers": "public static", "return": "void", "signature": "void projectAndInsert(IDirectPosition point, List<IDirectPosition> points)", "full_signature": "public static void projectAndInsert(IDirectPosition point, List<IDirectPosition> points)", "class_method_signature": "Operateurs.projectAndInsert(IDirectPosition point, List<IDirectPosition> points)", "testcase": false, "constructor": false}, {"identifier": "projectAndInsertWithPosition", "parameters": "(IDirectPosition point, List<IDirectPosition> points)", "modifiers": "public static", "return": "int", "signature": "int projectAndInsertWithPosition(IDirectPosition point, List<IDirectPosition> points)", "full_signature": "public static int projectAndInsertWithPosition(IDirectPosition point, List<IDirectPosition> points)", "class_method_signature": "Operateurs.projectAndInsertWithPosition(IDirectPosition point, List<IDirectPosition> points)", "testcase": false, "constructor": false}, {"identifier": "projectAndInsertAll", "parameters": "(IDirectPosition point, List<IDirectPosition> points)", "modifiers": "public static", "return": "void", "signature": "void projectAndInsertAll(IDirectPosition point, List<IDirectPosition> points)", "full_signature": "public static void projectAndInsertAll(IDirectPosition point, List<IDirectPosition> points)", "class_method_signature": "Operateurs.projectAndInsertAll(IDirectPosition point, List<IDirectPosition> points)", "testcase": false, "constructor": false}, {"identifier": "projection", "parameters": "(IDirectPosition dp, IAggregate<IGeometry> aggr)", "modifiers": "public static", "return": "IDirectPosition", "signature": "IDirectPosition projection(IDirectPosition dp, IAggregate<IGeometry> aggr)", "full_signature": "public static IDirectPosition projection(IDirectPosition dp, IAggregate<IGeometry> aggr)", "class_method_signature": "Operateurs.projection(IDirectPosition dp, IAggregate<IGeometry> aggr)", "testcase": false, "constructor": false}, {"identifier": "pointEnAbscisseCurviligne", "parameters": "(ILineString ls, double abscisse)", "modifiers": "public static", "return": "IDirectPosition", "signature": "IDirectPosition pointEnAbscisseCurviligne(ILineString ls, double abscisse)", "full_signature": "public static IDirectPosition pointEnAbscisseCurviligne(ILineString ls, double abscisse)", "class_method_signature": "Operateurs.pointEnAbscisseCurviligne(ILineString ls, double abscisse)", "testcase": false, "constructor": false}, {"identifier": "pointEnAbscisseCurviligne", "parameters": "(IMultiCurve<? extends ILineString> multiLs,\n\t\t\tdouble abscisse)", "modifiers": "public static", "return": "IDirectPosition", "signature": "IDirectPosition pointEnAbscisseCurviligne(IMultiCurve<? extends ILineString> multiLs,\n\t\t\tdouble abscisse)", "full_signature": "public static IDirectPosition pointEnAbscisseCurviligne(IMultiCurve<? extends ILineString> multiLs,\n\t\t\tdouble abscisse)", "class_method_signature": "Operateurs.pointEnAbscisseCurviligne(IMultiCurve<? extends ILineString> multiLs,\n\t\t\tdouble abscisse)", "testcase": false, "constructor": false}, {"identifier": "abscisseCurviligne", "parameters": "(ILineString ls, int i)", "modifiers": "public static", "return": "double", "signature": "double abscisseCurviligne(ILineString ls, int i)", "full_signature": "public static double abscisseCurviligne(ILineString ls, int i)", "class_method_signature": "Operateurs.abscisseCurviligne(ILineString ls, int i)", "testcase": false, "constructor": false}, {"identifier": "milieu", "parameters": "(ILineString ls)", "modifiers": "public static", "return": "IDirectPosition", "signature": "IDirectPosition milieu(ILineString ls)", "full_signature": "public static IDirectPosition milieu(ILineString ls)", "class_method_signature": "Operateurs.milieu(ILineString ls)", "testcase": false, "constructor": false}, {"identifier": "milieu", "parameters": "(IDirectPosition A, IDirectPosition B)", "modifiers": "public static", "return": "IDirectPosition", "signature": "IDirectPosition milieu(IDirectPosition A, IDirectPosition B)", "full_signature": "public static IDirectPosition milieu(IDirectPosition A, IDirectPosition B)", "class_method_signature": "Operateurs.milieu(IDirectPosition A, IDirectPosition B)", "testcase": false, "constructor": false}, {"identifier": "premiersPoints", "parameters": "(ILineString ls, double longueur)", "modifiers": "public static", "return": "IDirectPositionList", "signature": "IDirectPositionList premiersPoints(ILineString ls, double longueur)", "full_signature": "public static IDirectPositionList premiersPoints(ILineString ls, double longueur)", "class_method_signature": "Operateurs.premiersPoints(ILineString ls, double longueur)", "testcase": false, "constructor": false}, {"identifier": "derniersPoints", "parameters": "(ILineString ls, double longueur)", "modifiers": "public static", "return": "IDirectPositionList", "signature": "IDirectPositionList derniersPoints(ILineString ls, double longueur)", "full_signature": "public static IDirectPositionList derniersPoints(ILineString ls, double longueur)", "class_method_signature": "Operateurs.derniersPoints(ILineString ls, double longueur)", "testcase": false, "constructor": false}, {"identifier": "barycentre2D", "parameters": "(IPolygon poly)", "modifiers": "public static", "return": "IDirectPosition", "signature": "IDirectPosition barycentre2D(IPolygon poly)", "full_signature": "public static IDirectPosition barycentre2D(IPolygon poly)", "class_method_signature": "Operateurs.barycentre2D(IPolygon poly)", "testcase": false, "constructor": false}, {"identifier": "directOffset", "parameters": "(ILineString ls, double offset)", "modifiers": "public static", "return": "ILineString", "signature": "ILineString directOffset(ILineString ls, double offset)", "full_signature": "public static ILineString directOffset(ILineString ls, double offset)", "class_method_signature": "Operateurs.directOffset(ILineString ls, double offset)", "testcase": false, "constructor": false}, {"identifier": "indirectOffset", "parameters": "(ILineString ls, double offset)", "modifiers": "public static", "return": "ILineString", "signature": "ILineString indirectOffset(ILineString ls, double offset)", "full_signature": "public static ILineString indirectOffset(ILineString ls, double offset)", "class_method_signature": "Operateurs.indirectOffset(ILineString ls, double offset)", "testcase": false, "constructor": false}, {"identifier": "echantillone", "parameters": "(ILineString ls, double pas)", "modifiers": "public static", "return": "ILineString", "signature": "ILineString echantillone(ILineString ls, double pas)", "full_signature": "public static ILineString echantillone(ILineString ls, double pas)", "class_method_signature": "Operateurs.echantillone(ILineString ls, double pas)", "testcase": false, "constructor": false}, {"identifier": "echantilloneSansPreservation", "parameters": "(ILineString ls, double pas)", "modifiers": "public static", "return": "ILineString", "signature": "ILineString echantilloneSansPreservation(ILineString ls, double pas)", "full_signature": "public static ILineString echantilloneSansPreservation(ILineString ls, double pas)", "class_method_signature": "Operateurs.echantilloneSansPreservation(ILineString ls, double pas)", "testcase": false, "constructor": false}, {"identifier": "echantillonePasVariable", "parameters": "(ILineString ls, double pas)", "modifiers": "public static", "return": "ILineString", "signature": "ILineString echantillonePasVariable(ILineString ls, double pas)", "full_signature": "public static ILineString echantillonePasVariable(ILineString ls, double pas)", "class_method_signature": "Operateurs.echantillonePasVariable(ILineString ls, double pas)", "testcase": false, "constructor": false}, {"identifier": "translate", "parameters": "(IDirectPosition P, Vecteur V)", "modifiers": "public static", "return": "IDirectPosition", "signature": "IDirectPosition translate(IDirectPosition P, Vecteur V)", "full_signature": "public static IDirectPosition translate(IDirectPosition P, Vecteur V)", "class_method_signature": "Operateurs.translate(IDirectPosition P, Vecteur V)", "testcase": false, "constructor": false}, {"identifier": "compileArcs", "parameters": "(List<ILineString> geometries)", "modifiers": "public static", "return": "ILineString", "signature": "ILineString compileArcs(List<ILineString> geometries)", "full_signature": "public static ILineString compileArcs(List<ILineString> geometries)", "class_method_signature": "Operateurs.compileArcs(List<ILineString> geometries)", "testcase": false, "constructor": false}, {"identifier": "compileArcs", "parameters": "(List<ILineString> geometries, double tolerance)", "modifiers": "public static", "return": "ILineString", "signature": "ILineString compileArcs(List<ILineString> geometries, double tolerance)", "full_signature": "public static ILineString compileArcs(List<ILineString> geometries, double tolerance)", "class_method_signature": "Operateurs.compileArcs(List<ILineString> geometries, double tolerance)", "testcase": false, "constructor": false}, {"identifier": "compileArcs", "parameters": "(Collection<ILineString> geometries, double tolerance)", "modifiers": "public static", "return": "ILineString", "signature": "ILineString compileArcs(Collection<ILineString> geometries, double tolerance)", "full_signature": "public static ILineString compileArcs(Collection<ILineString> geometries, double tolerance)", "class_method_signature": "Operateurs.compileArcs(Collection<ILineString> geometries, double tolerance)", "testcase": false, "constructor": false}, {"identifier": "intersectionRobuste", "parameters": "(IGeometry A, IGeometry B, double min, double max)", "modifiers": "public static", "return": "IGeometry", "signature": "IGeometry intersectionRobuste(IGeometry A, IGeometry B, double min, double max)", "full_signature": "public static IGeometry intersectionRobuste(IGeometry A, IGeometry B, double min, double max)", "class_method_signature": "Operateurs.intersectionRobuste(IGeometry A, IGeometry B, double min, double max)", "testcase": false, "constructor": false}, {"identifier": "unionRobuste", "parameters": "(IGeometry A, IGeometry B, double min, double max)", "modifiers": "public static", "return": "IGeometry", "signature": "IGeometry unionRobuste(IGeometry A, IGeometry B, double min, double max)", "full_signature": "public static IGeometry unionRobuste(IGeometry A, IGeometry B, double min, double max)", "class_method_signature": "Operateurs.unionRobuste(IGeometry A, IGeometry B, double min, double max)", "testcase": false, "constructor": false}, {"identifier": "directionPrincipale", "parameters": "(IDirectPositionList listePts)", "modifiers": "public static", "return": "Angle", "signature": "Angle directionPrincipale(IDirectPositionList listePts)", "full_signature": "public static Angle directionPrincipale(IDirectPositionList listePts)", "class_method_signature": "Operateurs.directionPrincipale(IDirectPositionList listePts)", "testcase": false, "constructor": false}, {"identifier": "directionPrincipaleOrientee", "parameters": "(IDirectPositionList listePts)", "modifiers": "public static", "return": "Angle", "signature": "Angle directionPrincipaleOrientee(IDirectPositionList listePts)", "full_signature": "public static Angle directionPrincipaleOrientee(IDirectPositionList listePts)", "class_method_signature": "Operateurs.directionPrincipaleOrientee(IDirectPositionList listePts)", "testcase": false, "constructor": false}, {"identifier": "superposes", "parameters": "(IDirectPosition pt1, IDirectPosition pt2)", "modifiers": "public static", "return": "boolean", "signature": "boolean superposes(IDirectPosition pt1, IDirectPosition pt2)", "full_signature": "public static boolean superposes(IDirectPosition pt1, IDirectPosition pt2)", "class_method_signature": "Operateurs.superposes(IDirectPosition pt1, IDirectPosition pt2)", "testcase": false, "constructor": false}, {"identifier": "superposes2D", "parameters": "(IDirectPosition pt1, IDirectPosition pt2)", "modifiers": "public static", "return": "boolean", "signature": "boolean superposes2D(IDirectPosition pt1, IDirectPosition pt2)", "full_signature": "public static boolean superposes2D(IDirectPosition pt1, IDirectPosition pt2)", "class_method_signature": "Operateurs.superposes2D(IDirectPosition pt1, IDirectPosition pt2)", "testcase": false, "constructor": false}, {"identifier": "superposes", "parameters": "(IPoint pt1, IPoint pt2)", "modifiers": "public static", "return": "boolean", "signature": "boolean superposes(IPoint pt1, IPoint pt2)", "full_signature": "public static boolean superposes(IPoint pt1, IPoint pt2)", "class_method_signature": "Operateurs.superposes(IPoint pt1, IPoint pt2)", "testcase": false, "constructor": false}, {"identifier": "indice2D", "parameters": "(IDirectPositionList dpl, IDirectPosition dp)", "modifiers": "public static", "return": "int", "signature": "int indice2D(IDirectPositionList dpl, IDirectPosition dp)", "full_signature": "public static int indice2D(IDirectPositionList dpl, IDirectPosition dp)", "class_method_signature": "Operateurs.indice2D(IDirectPositionList dpl, IDirectPosition dp)", "testcase": false, "constructor": false}, {"identifier": "indice3D", "parameters": "(IDirectPositionList dpl, IDirectPosition dp)", "modifiers": "public static", "return": "int", "signature": "int indice3D(IDirectPositionList dpl, IDirectPosition dp)", "full_signature": "public static int indice3D(IDirectPositionList dpl, IDirectPosition dp)", "class_method_signature": "Operateurs.indice3D(IDirectPositionList dpl, IDirectPosition dp)", "testcase": false, "constructor": false}, {"identifier": "calculeZ", "parameters": "(ILineString ligne)", "modifiers": "public static", "return": "ILineString", "signature": "ILineString calculeZ(ILineString ligne)", "full_signature": "public static ILineString calculeZ(ILineString ligne)", "class_method_signature": "Operateurs.calculeZ(ILineString ligne)", "testcase": false, "constructor": false}, {"identifier": "fusionneSurfaces", "parameters": "(IPopulation<? extends IFeature> pop)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "void", "signature": "void fusionneSurfaces(IPopulation<? extends IFeature> pop)", "full_signature": "@SuppressWarnings(\"unchecked\") public static void fusionneSurfaces(IPopulation<? extends IFeature> pop)", "class_method_signature": "Operateurs.fusionneSurfaces(IPopulation<? extends IFeature> pop)", "testcase": false, "constructor": false}, {"identifier": "bufferSurfaces", "parameters": "(IPopulation<IFeature> popSurf, double tailleBuffer)", "modifiers": "public static", "return": "void", "signature": "void bufferSurfaces(IPopulation<IFeature> popSurf, double tailleBuffer)", "full_signature": "public static void bufferSurfaces(IPopulation<IFeature> popSurf, double tailleBuffer)", "class_method_signature": "Operateurs.bufferSurfaces(IPopulation<IFeature> popSurf, double tailleBuffer)", "testcase": false, "constructor": false}, {"identifier": "surface", "parameters": "(IPolygon poly)", "modifiers": "public static", "return": "double", "signature": "double surface(IPolygon poly)", "full_signature": "public static double surface(IPolygon poly)", "class_method_signature": "Operateurs.surface(IPolygon poly)", "testcase": false, "constructor": false}, {"identifier": "surface", "parameters": "(IDirectPositionList pts)", "modifiers": "public static", "return": "double", "signature": "double surface(IDirectPositionList pts)", "full_signature": "public static double surface(IDirectPositionList pts)", "class_method_signature": "Operateurs.surface(IDirectPositionList pts)", "testcase": false, "constructor": false}, {"identifier": "surfaceFromLineStrings", "parameters": "(ILineString lineString1, ILineString lineString2)", "modifiers": "public static", "return": "IPolygon", "signature": "IPolygon surfaceFromLineStrings(ILineString lineString1, ILineString lineString2)", "full_signature": "public static IPolygon surfaceFromLineStrings(ILineString lineString1, ILineString lineString2)", "class_method_signature": "Operateurs.surfaceFromLineStrings(ILineString lineString1, ILineString lineString2)", "testcase": false, "constructor": false}, {"identifier": "sensDirect", "parameters": "(IDirectPositionList pts)", "modifiers": "public static", "return": "boolean", "signature": "boolean sensDirect(IDirectPositionList pts)", "full_signature": "public static boolean sensDirect(IDirectPositionList pts)", "class_method_signature": "Operateurs.sensDirect(IDirectPositionList pts)", "testcase": false, "constructor": false}, {"identifier": "union", "parameters": "(List<ILineString> linestringList)", "modifiers": "public static", "return": "ILineString", "signature": "ILineString union(List<ILineString> linestringList)", "full_signature": "public static ILineString union(List<ILineString> linestringList)", "class_method_signature": "Operateurs.union(List<ILineString> linestringList)", "testcase": false, "constructor": false}, {"identifier": "union", "parameters": "(List<ILineString> linestringList, double tolerance)", "modifiers": "public static", "return": "ILineString", "signature": "ILineString union(List<ILineString> linestringList, double tolerance)", "full_signature": "public static ILineString union(List<ILineString> linestringList, double tolerance)", "class_method_signature": "Operateurs.union(List<ILineString> linestringList, double tolerance)", "testcase": false, "constructor": false}, {"identifier": "insertionIndex", "parameters": "(IDirectPosition point, List<IDirectPosition> points)", "modifiers": "public static", "return": "int", "signature": "int insertionIndex(IDirectPosition point, List<IDirectPosition> points)", "full_signature": "public static int insertionIndex(IDirectPosition point, List<IDirectPosition> points)", "class_method_signature": "Operateurs.insertionIndex(IDirectPosition point, List<IDirectPosition> points)", "testcase": false, "constructor": false}, {"identifier": "resampling", "parameters": "(ILineString ls, double maxDistance)", "modifiers": "public static", "return": "ILineString", "signature": "ILineString resampling(ILineString ls, double maxDistance)", "full_signature": "public static ILineString resampling(ILineString ls, double maxDistance)", "class_method_signature": "Operateurs.resampling(ILineString ls, double maxDistance)", "testcase": false, "constructor": false}, {"identifier": "resampling", "parameters": "(IDirectPositionList list, double maxDistance)", "modifiers": "public static", "return": "IDirectPositionList", "signature": "IDirectPositionList resampling(IDirectPositionList list, double maxDistance)", "full_signature": "public static IDirectPositionList resampling(IDirectPositionList list, double maxDistance)", "class_method_signature": "Operateurs.resampling(IDirectPositionList list, double maxDistance)", "testcase": false, "constructor": false}], "file": "geoxygene-spatial/src/main/java/fr/ign/cogit/geoxygene/contrib/geometrie/Operateurs.java"}, "focal_method": {"identifier": "compileArcs", "parameters": "(List<ILineString> geometries)", "modifiers": "public static", "return": "ILineString", "body": "public static ILineString compileArcs(List<ILineString> geometries) {\n\t\tif (Operateurs.logger.isDebugEnabled()) {\n\t\t\tOperateurs.logger.debug(\"compile geometries\");\n\t\t\tfor (ILineString l : geometries) {\n\t\t\t\tOperateurs.logger.debug(\"\\t\" + l);\n\t\t\t}\n\t\t}\n\t\treturn Operateurs.compileArcs(geometries, 0d);\n\t}", "signature": "ILineString compileArcs(List<ILineString> geometries)", "full_signature": "public static ILineString compileArcs(List<ILineString> geometries)", "class_method_signature": "Operateurs.compileArcs(List<ILineString> geometries)", "testcase": false, "constructor": false, "invocations": ["isDebugEnabled", "debug", "debug", "compileArcs"]}, "repository": {"repo_id": 56582318, "url": "https://github.com/IGNF/geoxygene", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 22, "size": 323511, "license": "licensed"}}