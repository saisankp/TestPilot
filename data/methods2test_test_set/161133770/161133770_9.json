{"test_class": {"identifier": "BZip2CompressorTest", "superclass": "", "interfaces": "", "fields": [], "file": "ingestion/src/test/java/feast/ingestion/options/BZip2CompressorTest.java"}, "test_case": {"identifier": "shouldHavBZip2CompatibleOutput", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldHavBZip2CompatibleOutput() throws IOException {\n    BZip2Compressor<String> compressor = new BZip2Compressor<>(String::getBytes);\n    String origString = \"somestring\";\n    try (ByteArrayInputStream inputStream =\n            new ByteArrayInputStream(compressor.compress(origString));\n        BZip2CompressorInputStream bzip2Input = new BZip2CompressorInputStream(inputStream);\n        BufferedReader reader = new BufferedReader(new InputStreamReader(bzip2Input))) {\n      Assert.assertEquals(origString, reader.readLine());\n    }\n  }", "signature": "void shouldHavBZip2CompatibleOutput()", "full_signature": "@Test public void shouldHavBZip2CompatibleOutput()", "class_method_signature": "BZip2CompressorTest.shouldHavBZip2CompatibleOutput()", "testcase": true, "constructor": false, "invocations": ["compress", "assertEquals", "readLine"]}, "focal_class": {"identifier": "BZip2Compressor", "superclass": "", "interfaces": "implements OptionCompressor<T>", "fields": [{"original_string": "private final OptionByteConverter<T> byteConverter;", "modifier": "private final", "type": "OptionByteConverter<T>", "declarator": "byteConverter", "var_name": "byteConverter"}], "methods": [{"identifier": "BZip2Compressor", "parameters": "(OptionByteConverter<T> byteConverter)", "modifiers": "public", "return": "", "signature": " BZip2Compressor(OptionByteConverter<T> byteConverter)", "full_signature": "public  BZip2Compressor(OptionByteConverter<T> byteConverter)", "class_method_signature": "BZip2Compressor.BZip2Compressor(OptionByteConverter<T> byteConverter)", "testcase": false, "constructor": true}, {"identifier": "compress", "parameters": "(T option)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] compress(T option)", "full_signature": "@Override public byte[] compress(T option)", "class_method_signature": "BZip2Compressor.compress(T option)", "testcase": false, "constructor": false}], "file": "ingestion/src/main/java/feast/ingestion/options/BZip2Compressor.java"}, "focal_method": {"identifier": "compress", "parameters": "(T option)", "modifiers": "@Override public", "return": "byte[]", "body": "@Override\n  public byte[] compress(T option) throws IOException {\n    ByteArrayOutputStream compressedStream = new ByteArrayOutputStream();\n    try (BZip2CompressorOutputStream bzip2Output =\n        new BZip2CompressorOutputStream(compressedStream)) {\n      bzip2Output.write(byteConverter.toByte(option));\n    }\n\n    return compressedStream.toByteArray();\n  }", "signature": "byte[] compress(T option)", "full_signature": "@Override public byte[] compress(T option)", "class_method_signature": "BZip2Compressor.compress(T option)", "testcase": false, "constructor": false, "invocations": ["write", "toByte", "toByteArray"]}, "repository": {"repo_id": 161133770, "url": "https://github.com/gojek/feast", "stars": 633, "created": "12/10/2018 7:20:15 AM +00:00", "updates": "2020-01-27T12:39:33+00:00", "fork": "False", "license": "licensed"}}