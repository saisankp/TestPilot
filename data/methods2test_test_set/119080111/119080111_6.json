{"test_class": {"identifier": "EpsilonNeighborhoodCouplerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static EpsilonAdaptation mockAdaption = mock(EpsilonAdaptationDelta.class);", "modifier": "protected static", "type": "EpsilonAdaptation", "declarator": "mockAdaption = mock(EpsilonAdaptationDelta.class)", "var_name": "mockAdaption"}, {"original_string": "protected static Objective firstObj = new Objective(\"first\", Sign.MAX);", "modifier": "protected static", "type": "Objective", "declarator": "firstObj = new Objective(\"first\", Sign.MAX)", "var_name": "firstObj"}, {"original_string": "protected static Objective secondObj = new Objective(\"second\", Sign.MAX);", "modifier": "protected static", "type": "Objective", "declarator": "secondObj = new Objective(\"second\", Sign.MAX)", "var_name": "secondObj"}, {"original_string": "protected static Individual first = mock(Individual.class);", "modifier": "protected static", "type": "Individual", "declarator": "first = mock(Individual.class)", "var_name": "first"}, {"original_string": "protected static Individual second = mock(Individual.class);", "modifier": "protected static", "type": "Individual", "declarator": "second = mock(Individual.class)", "var_name": "second"}, {"original_string": "protected static Individual third = mock(Individual.class);", "modifier": "protected static", "type": "Individual", "declarator": "third = mock(Individual.class)", "var_name": "third"}, {"original_string": "protected static Individual fourth = mock(Individual.class);", "modifier": "protected static", "type": "Individual", "declarator": "fourth = mock(Individual.class)", "var_name": "fourth"}], "file": "opt4j-optimizers/src/test/java/org/opt4j/optimizers/ea/aeseh/EpsilonNeighborhoodCouplerTest.java"}, "test_case": {"identifier": "testCreateNeighborhoods", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCreateNeighborhoods() {\n\t\tEpsilonNeighborhoodCoupler coupler = makeDefaultCoupler();\n\t\tMap<Objective, Double> amplitudeMap = new HashMap<>();\n\t\tamplitudeMap.put(firstObj, 0.001);\n\t\tamplitudeMap.put(secondObj, 0.001);\n\t\tList<Individual> survivors = getSurvivors();\n\t\tList<Set<Individual>> neighborhoods = coupler.createNeighborhoods(survivors);\n\t\tassertEquals(3, neighborhoods.size());\n\t\tverify(mockAdaption).adaptEpsilon(coupler.adaptiveEpsilonNeighborhood, true);\n\t\tcoupler = new EpsilonNeighborhoodCoupler(new EpsilonMappingAdditive(), mockAdaption, new Random(), 2, 0.0001, 0,\n\t\t\t\t0, 0);\n\t\tneighborhoods = coupler.createNeighborhoods(survivors);\n\t\tverify(mockAdaption).adaptEpsilon(coupler.adaptiveEpsilonNeighborhood, false);\n\t}", "signature": "void testCreateNeighborhoods()", "full_signature": "@Test public void testCreateNeighborhoods()", "class_method_signature": "EpsilonNeighborhoodCouplerTest.testCreateNeighborhoods()", "testcase": true, "constructor": false, "invocations": ["makeDefaultCoupler", "put", "put", "getSurvivors", "createNeighborhoods", "assertEquals", "size", "adaptEpsilon", "verify", "createNeighborhoods", "adaptEpsilon", "verify"]}, "focal_class": {"identifier": "EpsilonNeighborhoodCoupler", "superclass": "", "interfaces": "implements Coupler", "fields": [{"original_string": "protected final EpsilonAdaptation epsilonAdaption;", "modifier": "protected final", "type": "EpsilonAdaptation", "declarator": "epsilonAdaption", "var_name": "epsilonAdaption"}, {"original_string": "protected final EpsilonMapping epsilonMapping;", "modifier": "protected final", "type": "EpsilonMapping", "declarator": "epsilonMapping", "var_name": "epsilonMapping"}, {"original_string": "protected final Random random;", "modifier": "protected final", "type": "Random", "declarator": "random", "var_name": "random"}, {"original_string": "protected final int plannedNeighborhoodNumber;", "modifier": "protected final", "type": "int", "declarator": "plannedNeighborhoodNumber", "var_name": "plannedNeighborhoodNumber"}, {"original_string": "protected final AdaptiveEpsilon adaptiveEpsilonNeighborhood;", "modifier": "protected final", "type": "AdaptiveEpsilon", "declarator": "adaptiveEpsilonNeighborhood", "var_name": "adaptiveEpsilonNeighborhood"}], "methods": [{"identifier": "EpsilonNeighborhoodCoupler", "parameters": "(EpsilonMapping epsilonMapping, EpsilonAdaptation epsilonAdaption, Random random,\n\t\t\t@Constant(value = \"neighborhoodNumber\", namespace = EpsilonNeighborhoodCoupler.class) int plannedNeighborhoodNumber,\n\t\t\t@Constant(value = \"epsilonNeighborhood\", namespace = EpsilonNeighborhoodCoupler.class) double epsilonNeighborhood,\n\t\t\t@Constant(value = \"epsilonNeighborhoodDelta\", namespace = EpsilonNeighborhoodCoupler.class) double epsilonNeighborhoodDelta,\n\t\t\t@Constant(value = \"epsilonNeighborhoodDeltaMax\", namespace = EpsilonNeighborhoodCoupler.class) double epsilonNeighborhoodDeltaMax,\n\t\t\t@Constant(value = \"epsilonNeighborhoodDeltaMin\", namespace = EpsilonNeighborhoodCoupler.class) double epsilonNeighborhoodDeltaMin)", "modifiers": "@Inject public", "return": "", "signature": " EpsilonNeighborhoodCoupler(EpsilonMapping epsilonMapping, EpsilonAdaptation epsilonAdaption, Random random,\n\t\t\t@Constant(value = \"neighborhoodNumber\", namespace = EpsilonNeighborhoodCoupler.class) int plannedNeighborhoodNumber,\n\t\t\t@Constant(value = \"epsilonNeighborhood\", namespace = EpsilonNeighborhoodCoupler.class) double epsilonNeighborhood,\n\t\t\t@Constant(value = \"epsilonNeighborhoodDelta\", namespace = EpsilonNeighborhoodCoupler.class) double epsilonNeighborhoodDelta,\n\t\t\t@Constant(value = \"epsilonNeighborhoodDeltaMax\", namespace = EpsilonNeighborhoodCoupler.class) double epsilonNeighborhoodDeltaMax,\n\t\t\t@Constant(value = \"epsilonNeighborhoodDeltaMin\", namespace = EpsilonNeighborhoodCoupler.class) double epsilonNeighborhoodDeltaMin)", "full_signature": "@Inject public  EpsilonNeighborhoodCoupler(EpsilonMapping epsilonMapping, EpsilonAdaptation epsilonAdaption, Random random,\n\t\t\t@Constant(value = \"neighborhoodNumber\", namespace = EpsilonNeighborhoodCoupler.class) int plannedNeighborhoodNumber,\n\t\t\t@Constant(value = \"epsilonNeighborhood\", namespace = EpsilonNeighborhoodCoupler.class) double epsilonNeighborhood,\n\t\t\t@Constant(value = \"epsilonNeighborhoodDelta\", namespace = EpsilonNeighborhoodCoupler.class) double epsilonNeighborhoodDelta,\n\t\t\t@Constant(value = \"epsilonNeighborhoodDeltaMax\", namespace = EpsilonNeighborhoodCoupler.class) double epsilonNeighborhoodDeltaMax,\n\t\t\t@Constant(value = \"epsilonNeighborhoodDeltaMin\", namespace = EpsilonNeighborhoodCoupler.class) double epsilonNeighborhoodDeltaMin)", "class_method_signature": "EpsilonNeighborhoodCoupler.EpsilonNeighborhoodCoupler(EpsilonMapping epsilonMapping, EpsilonAdaptation epsilonAdaption, Random random,\n\t\t\t@Constant(value = \"neighborhoodNumber\", namespace = EpsilonNeighborhoodCoupler.class) int plannedNeighborhoodNumber,\n\t\t\t@Constant(value = \"epsilonNeighborhood\", namespace = EpsilonNeighborhoodCoupler.class) double epsilonNeighborhood,\n\t\t\t@Constant(value = \"epsilonNeighborhoodDelta\", namespace = EpsilonNeighborhoodCoupler.class) double epsilonNeighborhoodDelta,\n\t\t\t@Constant(value = \"epsilonNeighborhoodDeltaMax\", namespace = EpsilonNeighborhoodCoupler.class) double epsilonNeighborhoodDeltaMax,\n\t\t\t@Constant(value = \"epsilonNeighborhoodDeltaMin\", namespace = EpsilonNeighborhoodCoupler.class) double epsilonNeighborhoodDeltaMin)", "testcase": false, "constructor": true}, {"identifier": "getCouples", "parameters": "(int size, List<Individual> survivors)", "modifiers": "@Override public", "return": "Collection<Pair<Individual>>", "signature": "Collection<Pair<Individual>> getCouples(int size, List<Individual> survivors)", "full_signature": "@Override public Collection<Pair<Individual>> getCouples(int size, List<Individual> survivors)", "class_method_signature": "EpsilonNeighborhoodCoupler.getCouples(int size, List<Individual> survivors)", "testcase": false, "constructor": false}, {"identifier": "pickCouple", "parameters": "(Set<Individual> neighborhood)", "modifiers": "protected", "return": "Pair<Individual>", "signature": "Pair<Individual> pickCouple(Set<Individual> neighborhood)", "full_signature": "protected Pair<Individual> pickCouple(Set<Individual> neighborhood)", "class_method_signature": "EpsilonNeighborhoodCoupler.pickCouple(Set<Individual> neighborhood)", "testcase": false, "constructor": false}, {"identifier": "createNeighborhoods", "parameters": "(List<Individual> survivorPool)", "modifiers": "protected", "return": "List<Set<Individual>>", "signature": "List<Set<Individual>> createNeighborhoods(List<Individual> survivorPool)", "full_signature": "protected List<Set<Individual>> createNeighborhoods(List<Individual> survivorPool)", "class_method_signature": "EpsilonNeighborhoodCoupler.createNeighborhoods(List<Individual> survivorPool)", "testcase": false, "constructor": false}], "file": "opt4j-optimizers/src/main/java/org/opt4j/optimizers/ea/aeseh/EpsilonNeighborhoodCoupler.java"}, "focal_method": {"identifier": "createNeighborhoods", "parameters": "(List<Individual> survivorPool)", "modifiers": "protected", "return": "List<Set<Individual>>", "body": "protected List<Set<Individual>> createNeighborhoods(List<Individual> survivorPool) {\n\t\tList<Set<Individual>> neighborhoods = new ArrayList<>();\n\t\tMap<Objective, Double> objectiveAmplitudes = epsilonMapping\n\t\t\t\t.findObjectiveAmplitudes(new HashSet<>(survivorPool));\n\t\tList<Individual> survivors = new ArrayList<>(survivorPool);\n\t\twhile (!survivors.isEmpty()) {\n\t\t\t// pick a random individual\n\t\t\tint idx = random.nextInt(survivors.size());\n\t\t\tIndividual reference = survivors.remove(idx);\n\t\t\tSet<Individual> neighborhood = new HashSet<>();\n\t\t\tObjectives epsilonEnhancedObjectives = epsilonMapping.mapObjectives(reference.getObjectives(),\n\t\t\t\t\tadaptiveEpsilonNeighborhood.getEpsilon(), objectiveAmplitudes);\n\t\t\t// put the individuals epsilon-dominated by the reference into its\n\t\t\t// neighborhood\n\t\t\tfor (Individual candidate : survivors) {\n\t\t\t\tif (epsilonEnhancedObjectives.dominates(candidate.getObjectives())) {\n\t\t\t\t\tneighborhood.add(candidate);\n\t\t\t\t}\n\t\t\t}\n\t\t\tsurvivors.removeAll(neighborhood);\n\t\t\tneighborhood.add(reference);\n\t\t\tneighborhoods.add(neighborhood);\n\t\t}\n\t\t// adapt the epsilon\n\t\tboolean epsilonTooBig = neighborhoods.size() < plannedNeighborhoodNumber;\n\t\tepsilonAdaption.adaptEpsilon(adaptiveEpsilonNeighborhood, epsilonTooBig);\n\t\treturn neighborhoods;\n\t}", "signature": "List<Set<Individual>> createNeighborhoods(List<Individual> survivorPool)", "full_signature": "protected List<Set<Individual>> createNeighborhoods(List<Individual> survivorPool)", "class_method_signature": "EpsilonNeighborhoodCoupler.createNeighborhoods(List<Individual> survivorPool)", "testcase": false, "constructor": false, "invocations": ["findObjectiveAmplitudes", "isEmpty", "nextInt", "size", "remove", "mapObjectives", "getObjectives", "getEpsilon", "dominates", "getObjectives", "add", "removeAll", "add", "add", "size", "adaptEpsilon"]}, "repository": {"repo_id": 119080111, "url": "https://github.com/felixreimann/opt4j", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 11, "size": 8771, "license": "licensed"}}