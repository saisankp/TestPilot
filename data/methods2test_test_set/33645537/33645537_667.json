{"test_class": {"identifier": "MethodCacheTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MethodCache cache;", "modifier": "private", "type": "MethodCache", "declarator": "cache", "var_name": "cache"}, {"original_string": "private int methodSize;", "modifier": "private", "type": "int", "declarator": "methodSize", "var_name": "methodSize"}, {"original_string": "private int instanceMethodSize;", "modifier": "private", "type": "int", "declarator": "instanceMethodSize", "var_name": "instanceMethodSize"}], "file": "concurrency/src/test/java/com/baidu/unbiz/common/cache/MethodCacheTest.java"}, "test_case": {"identifier": "getInstanceMethods", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getInstanceMethods() {\n        Method[] result = cache.getInstanceMethods(String.class);\n        Method[] fields = ReflectionUtil.getAllInstanceMethods(String.class);\n\n        assertArrayEquals(result, fields);\n        instanceMethodSize = result.length;\n\n        result = cache.getInstanceMethods(AnnotationClass.class);\n        fields = ReflectionUtil.getAllInstanceMethods(AnnotationClass.class);\n        assertArrayEquals(result, fields);\n        getMethods();\n        assertTrue(methodSize > 0);\n        assertTrue(instanceMethodSize > 0);\n        assertTrue(methodSize > instanceMethodSize);\n    }", "signature": "void getInstanceMethods()", "full_signature": "@Test public void getInstanceMethods()", "class_method_signature": "MethodCacheTest.getInstanceMethods()", "testcase": true, "constructor": false, "invocations": ["getInstanceMethods", "getAllInstanceMethods", "assertArrayEquals", "getInstanceMethods", "getAllInstanceMethods", "assertArrayEquals", "getMethods", "assertTrue", "assertTrue", "assertTrue"]}, "focal_class": {"identifier": "MethodCache", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final MethodCache instance = new MethodCache();", "modifier": "private static final", "type": "MethodCache", "declarator": "instance = new MethodCache()", "var_name": "instance"}, {"original_string": "private final Computable<String, Method[]> cache = new ConcurrentCache<String, Method[]>();", "modifier": "private final", "type": "Computable<String, Method[]>", "declarator": "cache = new ConcurrentCache<String, Method[]>()", "var_name": "cache"}, {"original_string": "private final Computable<String, Map<String, Method>> cachedMap =\n            new ConcurrentCache<String, Map<String, Method>>();", "modifier": "private final", "type": "Computable<String, Map<String, Method>>", "declarator": "cachedMap =\n            new ConcurrentCache<String, Map<String, Method>>()", "var_name": "cachedMap"}], "methods": [{"identifier": "MethodCache", "parameters": "()", "modifiers": "private", "return": "", "signature": " MethodCache()", "full_signature": "private  MethodCache()", "class_method_signature": "MethodCache.MethodCache()", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "MethodCache", "signature": "MethodCache getInstance()", "full_signature": "public static MethodCache getInstance()", "class_method_signature": "MethodCache.getInstance()", "testcase": false, "constructor": false}, {"identifier": "getMethods", "parameters": "(final Class<?> clazz)", "modifiers": "public", "return": "Method[]", "signature": "Method[] getMethods(final Class<?> clazz)", "full_signature": "public Method[] getMethods(final Class<?> clazz)", "class_method_signature": "MethodCache.getMethods(final Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getInstanceMethods", "parameters": "(final Class<?> clazz)", "modifiers": "public", "return": "Method[]", "signature": "Method[] getInstanceMethods(final Class<?> clazz)", "full_signature": "public Method[] getInstanceMethods(final Class<?> clazz)", "class_method_signature": "MethodCache.getInstanceMethods(final Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getMethods", "parameters": "(final Class<?> clazz, final Class<? extends Annotation> annotationClass)", "modifiers": "public", "return": "Method[]", "signature": "Method[] getMethods(final Class<?> clazz, final Class<? extends Annotation> annotationClass)", "full_signature": "public Method[] getMethods(final Class<?> clazz, final Class<? extends Annotation> annotationClass)", "class_method_signature": "MethodCache.getMethods(final Class<?> clazz, final Class<? extends Annotation> annotationClass)", "testcase": false, "constructor": false}, {"identifier": "getMethodSignature", "parameters": "(String methodName, Class<?>...params)", "modifiers": "private static", "return": "String", "signature": "String getMethodSignature(String methodName, Class<?>...params)", "full_signature": "private static String getMethodSignature(String methodName, Class<?>...params)", "class_method_signature": "MethodCache.getMethodSignature(String methodName, Class<?>...params)", "testcase": false, "constructor": false}, {"identifier": "getMethod", "parameters": "(final Class<?> clazz, String methodName, Class<?>...params)", "modifiers": "public", "return": "Method", "signature": "Method getMethod(final Class<?> clazz, String methodName, Class<?>...params)", "full_signature": "public Method getMethod(final Class<?> clazz, String methodName, Class<?>...params)", "class_method_signature": "MethodCache.getMethod(final Class<?> clazz, String methodName, Class<?>...params)", "testcase": false, "constructor": false}, {"identifier": "getInstanceMethod", "parameters": "(final Class<?> clazz, String methodName, Class<?>...params)", "modifiers": "public", "return": "Method", "signature": "Method getInstanceMethod(final Class<?> clazz, String methodName, Class<?>...params)", "full_signature": "public Method getInstanceMethod(final Class<?> clazz, String methodName, Class<?>...params)", "class_method_signature": "MethodCache.getInstanceMethod(final Class<?> clazz, String methodName, Class<?>...params)", "testcase": false, "constructor": false}, {"identifier": "getMethod", "parameters": "(final Class<?> clazz, final Class<? extends Annotation> annotationClass, String methodName,\n            Class<?>...params)", "modifiers": "public", "return": "Method", "signature": "Method getMethod(final Class<?> clazz, final Class<? extends Annotation> annotationClass, String methodName,\n            Class<?>...params)", "full_signature": "public Method getMethod(final Class<?> clazz, final Class<? extends Annotation> annotationClass, String methodName,\n            Class<?>...params)", "class_method_signature": "MethodCache.getMethod(final Class<?> clazz, final Class<? extends Annotation> annotationClass, String methodName,\n            Class<?>...params)", "testcase": false, "constructor": false}], "file": "concurrency/src/main/java/com/baidu/unbiz/common/cache/MethodCache.java"}, "focal_method": {"identifier": "getInstanceMethods", "parameters": "(final Class<?> clazz)", "modifiers": "public", "return": "Method[]", "body": "public Method[] getInstanceMethods(final Class<?> clazz) {\n        if (clazz == null) {\n            return null;\n        }\n\n        return cache.get(ClassUtil.getFriendlyClassName(clazz) + \".instance\", new Callable<Method[]>() {\n            @Override\n            public Method[] call() throws Exception {\n                return ReflectionUtil.getAllInstanceMethods(clazz, true);\n            }\n        });\n    }", "signature": "Method[] getInstanceMethods(final Class<?> clazz)", "full_signature": "public Method[] getInstanceMethods(final Class<?> clazz)", "class_method_signature": "MethodCache.getInstanceMethods(final Class<?> clazz)", "testcase": false, "constructor": false, "invocations": ["get", "getFriendlyClassName", "getAllInstanceMethods"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}