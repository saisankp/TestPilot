{"test_class": {"identifier": "FeatureManagerActorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IStrategyContainer container = new StrategyContainer();", "modifier": "private", "type": "IStrategyContainer", "declarator": "container = new StrategyContainer()", "var_name": "container"}, {"original_string": "private IQueue queue = mock(IQueue.class);", "modifier": "private", "type": "IQueue", "declarator": "queue = mock(IQueue.class)", "var_name": "queue"}, {"original_string": "private IReceiverChain chain = mock(IReceiverChain.class);", "modifier": "private", "type": "IReceiverChain", "declarator": "chain = mock(IReceiverChain.class)", "var_name": "chain"}, {"original_string": "private IChainStorage storage = mock(IChainStorage.class);", "modifier": "private", "type": "IChainStorage", "declarator": "storage = mock(IChainStorage.class)", "var_name": "storage"}, {"original_string": "private IResolveDependencyStrategy getChainIDByNameStrategy = mock(IResolveDependencyStrategy.class);", "modifier": "private", "type": "IResolveDependencyStrategy", "declarator": "getChainIDByNameStrategy = mock(IResolveDependencyStrategy.class)", "var_name": "getChainIDByNameStrategy"}, {"original_string": "private IResolveDependencyStrategy getSequence = mock(IResolveDependencyStrategy.class);", "modifier": "private", "type": "IResolveDependencyStrategy", "declarator": "getSequence = mock(IResolveDependencyStrategy.class)", "var_name": "getSequence"}, {"original_string": "private IResolveDependencyStrategy getProcessor = mock(IResolveDependencyStrategy.class);", "modifier": "private", "type": "IResolveDependencyStrategy", "declarator": "getProcessor = mock(IResolveDependencyStrategy.class)", "var_name": "getProcessor"}, {"original_string": "private IQueue afterFeaturesCallbackQueue1 = mock(IQueue.class);", "modifier": "private", "type": "IQueue", "declarator": "afterFeaturesCallbackQueue1 = mock(IQueue.class)", "var_name": "afterFeaturesCallbackQueue1"}, {"original_string": "private IQueue afterFeaturesCallbackQueue2 = mock(IQueue.class);", "modifier": "private", "type": "IQueue", "declarator": "afterFeaturesCallbackQueue2 = mock(IQueue.class)", "var_name": "afterFeaturesCallbackQueue2"}, {"original_string": "private IQueue afterFeaturesCallbackQueue3 = mock(IQueue.class);", "modifier": "private", "type": "IQueue", "declarator": "afterFeaturesCallbackQueue3 = mock(IQueue.class)", "var_name": "afterFeaturesCallbackQueue3"}, {"original_string": "private IResolveDependencyStrategy afterFeaturesCallbackStrategy = mock(IResolveDependencyStrategy.class);", "modifier": "private", "type": "IResolveDependencyStrategy", "declarator": "afterFeaturesCallbackStrategy = mock(IResolveDependencyStrategy.class)", "var_name": "afterFeaturesCallbackStrategy"}], "file": "CoreFeatures/FeatureManagement/FeatureManagerActor/src/test/java/info/smart_tools/smartactors/feature_management/feature_manager_actor/FeatureManagerActorTest.java"}, "test_case": {"identifier": "checkFeatureManagementExceptionOnCallOnFeatureStepCompletedMethod", "parameters": "()", "modifiers": "@Test (expected = FeatureManagementException.class) public", "return": "void", "body": "@Test (expected = FeatureManagementException.class)\n    public void checkFeatureManagementExceptionOnCallOnFeatureStepCompletedMethod()\n            throws Exception {\n        FeatureManagerActor actor = new FeatureManagerActor();\n        OnFeatureStepCompletedWrapper wrapper = mock(OnFeatureStepCompletedWrapper.class);\n        when(wrapper.getFeature()).thenThrow(ReadValueException.class);\n        actor.onFeatureStepCompleted(wrapper);\n        fail();\n    }", "signature": "void checkFeatureManagementExceptionOnCallOnFeatureStepCompletedMethod()", "full_signature": "@Test (expected = FeatureManagementException.class) public void checkFeatureManagementExceptionOnCallOnFeatureStepCompletedMethod()", "class_method_signature": "FeatureManagerActorTest.checkFeatureManagementExceptionOnCallOnFeatureStepCompletedMethod()", "testcase": true, "constructor": false, "invocations": ["mock", "thenThrow", "when", "getFeature", "onFeatureStepCompleted", "fail"]}, "focal_class": {"identifier": "FeatureManagerActor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int DEFAULT_STACK_DEPTH = 5;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_STACK_DEPTH = 5", "var_name": "DEFAULT_STACK_DEPTH"}, {"original_string": "private Map<IMessageProcessor, Set<IFeature>> mainProcesses;", "modifier": "private", "type": "Map<IMessageProcessor, Set<IFeature>>", "declarator": "mainProcesses", "var_name": "mainProcesses"}, {"original_string": "private Map<IMessageProcessor, Set<IFeature>> mainProcessesForInfo;", "modifier": "private", "type": "Map<IMessageProcessor, Set<IFeature>>", "declarator": "mainProcessesForInfo", "var_name": "mainProcessesForInfo"}, {"original_string": "private Map<IMessageProcessor, IFeature> featureProcess;", "modifier": "private", "type": "Map<IMessageProcessor, IFeature>", "declarator": "featureProcess", "var_name": "featureProcess"}, {"original_string": "private Map<Object, IFeature> loadedFeatures;", "modifier": "private", "type": "Map<Object, IFeature>", "declarator": "loadedFeatures", "var_name": "loadedFeatures"}, {"original_string": "private Map<Object, IFeature> failedFeatures;", "modifier": "private", "type": "Map<Object, IFeature>", "declarator": "failedFeatures", "var_name": "failedFeatures"}, {"original_string": "private Map<Object, IFeature> processingFeatures;", "modifier": "private", "type": "Map<Object, IFeature>", "declarator": "processingFeatures", "var_name": "processingFeatures"}, {"original_string": "private final IFieldName loadedFeatureFN;", "modifier": "private final", "type": "IFieldName", "declarator": "loadedFeatureFN", "var_name": "loadedFeatureFN"}, {"original_string": "private final IFieldName failedFeatureFN;", "modifier": "private final", "type": "IFieldName", "declarator": "failedFeatureFN", "var_name": "failedFeatureFN"}, {"original_string": "private final IFieldName processingFeatureFN;", "modifier": "private final", "type": "IFieldName", "declarator": "processingFeatureFN", "var_name": "processingFeatureFN"}, {"original_string": "private final IFieldName featureProcessFN;", "modifier": "private final", "type": "IFieldName", "declarator": "featureProcessFN", "var_name": "featureProcessFN"}, {"original_string": "private final IFieldName featureFN;", "modifier": "private final", "type": "IFieldName", "declarator": "featureFN", "var_name": "featureFN"}, {"original_string": "private final IFieldName afterFeaturesCallbackQueueFN;", "modifier": "private final", "type": "IFieldName", "declarator": "afterFeaturesCallbackQueueFN", "var_name": "afterFeaturesCallbackQueueFN"}], "methods": [{"identifier": "FeatureManagerActor", "parameters": "()", "modifiers": "public", "return": "", "signature": " FeatureManagerActor()", "full_signature": "public  FeatureManagerActor()", "class_method_signature": "FeatureManagerActor.FeatureManagerActor()", "testcase": false, "constructor": true}, {"identifier": "addFeatures", "parameters": "(final AddFeatureWrapper wrapper)", "modifiers": "public", "return": "void", "signature": "void addFeatures(final AddFeatureWrapper wrapper)", "full_signature": "public void addFeatures(final AddFeatureWrapper wrapper)", "class_method_signature": "FeatureManagerActor.addFeatures(final AddFeatureWrapper wrapper)", "testcase": false, "constructor": false}, {"identifier": "onFeatureLoaded", "parameters": "(final OnFeatureLoadedWrapper wrapper)", "modifiers": "public", "return": "void", "signature": "void onFeatureLoaded(final OnFeatureLoadedWrapper wrapper)", "full_signature": "public void onFeatureLoaded(final OnFeatureLoadedWrapper wrapper)", "class_method_signature": "FeatureManagerActor.onFeatureLoaded(final OnFeatureLoadedWrapper wrapper)", "testcase": false, "constructor": false}, {"identifier": "onFeatureStepCompleted", "parameters": "(final OnFeatureStepCompletedWrapper wrapper)", "modifiers": "public", "return": "void", "signature": "void onFeatureStepCompleted(final OnFeatureStepCompletedWrapper wrapper)", "full_signature": "public void onFeatureStepCompleted(final OnFeatureStepCompletedWrapper wrapper)", "class_method_signature": "FeatureManagerActor.onFeatureStepCompleted(final OnFeatureStepCompletedWrapper wrapper)", "testcase": false, "constructor": false}, {"identifier": "getState", "parameters": "(final FeatureManagerStateWrapper wrapper)", "modifiers": "public", "return": "void", "signature": "void getState(final FeatureManagerStateWrapper wrapper)", "full_signature": "public void getState(final FeatureManagerStateWrapper wrapper)", "class_method_signature": "FeatureManagerActor.getState(final FeatureManagerStateWrapper wrapper)", "testcase": false, "constructor": false}, {"identifier": "checkAndRunConnectedFeatures", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkAndRunConnectedFeatures()", "full_signature": "private void checkAndRunConnectedFeatures()", "class_method_signature": "FeatureManagerActor.checkAndRunConnectedFeatures()", "testcase": false, "constructor": false}, {"identifier": "removeLoadedFeatureFromDependencies", "parameters": "(final IFeature loadedFeature)", "modifiers": "private", "return": "void", "signature": "void removeLoadedFeatureFromDependencies(final IFeature loadedFeature)", "full_signature": "private void removeLoadedFeatureFromDependencies(final IFeature loadedFeature)", "class_method_signature": "FeatureManagerActor.removeLoadedFeatureFromDependencies(final IFeature loadedFeature)", "testcase": false, "constructor": false}, {"identifier": "checkUnresolved", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkUnresolved()", "full_signature": "private void checkUnresolved()", "class_method_signature": "FeatureManagerActor.checkUnresolved()", "testcase": false, "constructor": false}], "file": "CoreFeatures/FeatureManagement/FeatureManagerActor/src/main/java/info/smart_tools/smartactors/feature_management/feature_manager_actor/FeatureManagerActor.java"}, "focal_method": {"identifier": "onFeatureStepCompleted", "parameters": "(final OnFeatureStepCompletedWrapper wrapper)", "modifiers": "public", "return": "void", "body": "public void onFeatureStepCompleted(final OnFeatureStepCompletedWrapper wrapper)\n            throws FeatureManagementException {\n        IFeature feature;\n        try {\n            feature = wrapper.getFeature();\n            checkAndRunConnectedFeatures();\n            for (IFeature loadedFeature : this.loadedFeatures.values()) {\n                if (null != feature.getDependencies()) {\n                    feature.getDependencies().remove(loadedFeature.getName());\n                }\n            }\n            if (null != feature.getDependencies() && !feature.getDependencies().isEmpty()) {\n                IMessageProcessor mp = wrapper.getMessageProcessor();\n                mp.pauseProcess();\n                //wrapper.getFeatureProcess().put(mp, feature);\n                this.featureProcess.put(mp, feature);\n            }\n        } catch (ReadValueException | AsynchronousOperationException e) {\n            throw new FeatureManagementException(e);\n        }\n    }", "signature": "void onFeatureStepCompleted(final OnFeatureStepCompletedWrapper wrapper)", "full_signature": "public void onFeatureStepCompleted(final OnFeatureStepCompletedWrapper wrapper)", "class_method_signature": "FeatureManagerActor.onFeatureStepCompleted(final OnFeatureStepCompletedWrapper wrapper)", "testcase": false, "constructor": false, "invocations": ["getFeature", "checkAndRunConnectedFeatures", "values", "getDependencies", "remove", "getDependencies", "getName", "getDependencies", "isEmpty", "getDependencies", "getMessageProcessor", "pauseProcess", "put"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}