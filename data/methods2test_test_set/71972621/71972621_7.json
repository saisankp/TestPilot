{"test_class": {"identifier": "JarScannerTest", "superclass": "", "interfaces": "", "fields": [], "file": "fabric-compute-framework/src/test/java/com/olacabs/fabric/compute/builder/impl/JarScannerTest.java"}, "test_case": {"identifier": "testDownload", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDownload() throws Exception {\n        JarScanner scanner = new JarScanner();\n        scanner.download(Collections.singletonList(JarScannerTest.class.getResource(\"/dummy.jar\").toString()));\n    }", "signature": "void testDownload()", "full_signature": "@Test public void testDownload()", "class_method_signature": "JarScannerTest.testDownload()", "testcase": true, "constructor": false, "invocations": ["download", "singletonList", "toString", "getResource"]}, "focal_class": {"identifier": "JarScanner", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(DownloadingLoader.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DownloadingLoader.class)", "var_name": "LOGGER"}, {"original_string": "private static final String PROPERTIES_FILE_NAME = \"compute.properties\";", "modifier": "private static final", "type": "String", "declarator": "PROPERTIES_FILE_NAME = \"compute.properties\"", "var_name": "PROPERTIES_FILE_NAME"}, {"original_string": "private Properties properties;", "modifier": "private", "type": "Properties", "declarator": "properties", "var_name": "properties"}], "methods": [{"identifier": "JarScanner", "parameters": "()", "modifiers": "public", "return": "", "signature": " JarScanner()", "full_signature": "public  JarScanner()", "class_method_signature": "JarScanner.JarScanner()", "testcase": false, "constructor": true}, {"identifier": "genUrls", "parameters": "(URL[] jarFileURLs)", "modifiers": "private", "return": "URL[]", "signature": "URL[] genUrls(URL[] jarFileURLs)", "full_signature": "private URL[] genUrls(URL[] jarFileURLs)", "class_method_signature": "JarScanner.genUrls(URL[] jarFileURLs)", "testcase": false, "constructor": false}, {"identifier": "createClassLoader", "parameters": "(URL[] urls)", "modifiers": "private", "return": "ClassLoader", "signature": "ClassLoader createClassLoader(URL[] urls)", "full_signature": "private ClassLoader createClassLoader(URL[] urls)", "class_method_signature": "JarScanner.createClassLoader(URL[] urls)", "testcase": false, "constructor": false}, {"identifier": "loadJars", "parameters": "(final Collection<String> urls, ClassLoader parentLoader)", "modifiers": "public", "return": "List<ScanResult>", "signature": "List<ScanResult> loadJars(final Collection<String> urls, ClassLoader parentLoader)", "full_signature": "public List<ScanResult> loadJars(final Collection<String> urls, ClassLoader parentLoader)", "class_method_signature": "JarScanner.loadJars(final Collection<String> urls, ClassLoader parentLoader)", "testcase": false, "constructor": false}, {"identifier": "download", "parameters": "(Collection<String> urls)", "modifiers": "", "return": "URL[]", "signature": "URL[] download(Collection<String> urls)", "full_signature": " URL[] download(Collection<String> urls)", "class_method_signature": "JarScanner.download(Collection<String> urls)", "testcase": false, "constructor": false}, {"identifier": "scanForProcessors", "parameters": "(ClassLoader classLoader, URL[] downloadedUrls)", "modifiers": "private", "return": "List<ScanResult>", "signature": "List<ScanResult> scanForProcessors(ClassLoader classLoader, URL[] downloadedUrls)", "full_signature": "private List<ScanResult> scanForProcessors(ClassLoader classLoader, URL[] downloadedUrls)", "class_method_signature": "JarScanner.scanForProcessors(ClassLoader classLoader, URL[] downloadedUrls)", "testcase": false, "constructor": false}, {"identifier": "scanForSources", "parameters": "(ClassLoader classLoader, URL[] downloadedUrls)", "modifiers": "private", "return": "List<ScanResult>", "signature": "List<ScanResult> scanForSources(ClassLoader classLoader, URL[] downloadedUrls)", "full_signature": "private List<ScanResult> scanForSources(ClassLoader classLoader, URL[] downloadedUrls)", "class_method_signature": "JarScanner.scanForSources(ClassLoader classLoader, URL[] downloadedUrls)", "testcase": false, "constructor": false}], "file": "fabric-compute-framework/src/main/java/com/olacabs/fabric/compute/builder/impl/JarScanner.java"}, "focal_method": {"identifier": "download", "parameters": "(Collection<String> urls)", "modifiers": "", "return": "URL[]", "body": "URL[] download(Collection<String> urls) {\n\n        ArrayList<URL> downloadedURLs = urls.stream().map(url -> {\n            URI uri = URI.create(url);\n            String downloaderImplClassName = properties.getProperty(String.format(\"fs.%s.impl\", uri.getScheme()));\n            if (null == downloaderImplClassName) {\n                throw new RuntimeException(\n                        new UnsupportedSchemeException(uri.getScheme() + \" is not supported for downloading jars\"));\n            }\n            try {\n                Class clazz = Class.forName(downloaderImplClassName);\n                if (JarDownloader.class.isAssignableFrom(clazz)) {\n                    try {\n                        return ((JarDownloader) clazz.newInstance()).download(url).toUri().toURL();\n                    } catch (Exception e) {\n                        throw new RuntimeException(e);\n                    }\n                } else {\n                    throw new RuntimeException(\"Unsupported implementation \" + downloaderImplClassName\n                            + \" of \" + JarDownloader.class.getSimpleName());\n                }\n            } catch (ClassNotFoundException e) {\n                throw new RuntimeException(e);\n            }\n        })  .collect(Collectors.toCollection(ArrayList::new));\n        return downloadedURLs.toArray(new URL[downloadedURLs.size()]);\n    }", "signature": "URL[] download(Collection<String> urls)", "full_signature": " URL[] download(Collection<String> urls)", "class_method_signature": "JarScanner.download(Collection<String> urls)", "testcase": false, "constructor": false, "invocations": ["collect", "map", "stream", "create", "getProperty", "format", "getScheme", "getScheme", "forName", "isAssignableFrom", "toURL", "toUri", "download", "newInstance", "getSimpleName", "toCollection", "toArray", "size"]}, "repository": {"repo_id": 71972621, "url": "https://github.com/olacabs/fabric", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 43, "size": 234, "license": "licensed"}}