{"test_class": {"identifier": "ClassLoaderEntityResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String publicId=\"fakePublicId\";", "modifier": "private", "type": "String", "declarator": "publicId=\"fakePublicId\"", "var_name": "publicId"}, {"original_string": "protected final String JAR_FILE = \"/ClassLoader/zip/classLoader-test.zip\";", "modifier": "protected final", "type": "String", "declarator": "JAR_FILE = \"/ClassLoader/zip/classLoader-test.zip\"", "var_name": "JAR_FILE"}], "file": "core/src/test/java/nl/nn/adapterframework/xml/ClassLoaderEntityResolverTest.java"}, "test_case": {"identifier": "localClassPathAbsolute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void localClassPathAbsolute() throws SAXException, IOException {\n\t\tClassLoader localClassLoader = Thread.currentThread().getContextClassLoader();\n\t\tClassLoaderEntityResolver resolver = new ClassLoaderEntityResolver(localClassLoader);\n\n\t\tString systemId=\"/Xslt/importDocument/lookup.xml\";\n\t\t\n\t\tInputSource inputSource = resolver.resolveEntity(publicId, systemId);\n\t\tassertNotNull(inputSource);\n\t}", "signature": "void localClassPathAbsolute()", "full_signature": "@Test public void localClassPathAbsolute()", "class_method_signature": "ClassLoaderEntityResolverTest.localClassPathAbsolute()", "testcase": true, "constructor": false, "invocations": ["getContextClassLoader", "currentThread", "resolveEntity", "assertNotNull"]}, "focal_class": {"identifier": "ClassLoaderEntityResolver", "superclass": "", "interfaces": "implements EntityResolver", "fields": [{"original_string": "protected Logger log = LogUtil.getLogger(this);", "modifier": "protected", "type": "Logger", "declarator": "log = LogUtil.getLogger(this)", "var_name": "log"}, {"original_string": "private ClassLoader classLoader;", "modifier": "private", "type": "ClassLoader", "declarator": "classLoader", "var_name": "classLoader"}], "methods": [{"identifier": "ClassLoaderEntityResolver", "parameters": "(ClassLoader classLoader)", "modifiers": "public", "return": "", "signature": " ClassLoaderEntityResolver(ClassLoader classLoader)", "full_signature": "public  ClassLoaderEntityResolver(ClassLoader classLoader)", "class_method_signature": "ClassLoaderEntityResolver.ClassLoaderEntityResolver(ClassLoader classLoader)", "testcase": false, "constructor": true}, {"identifier": "ClassLoaderEntityResolver", "parameters": "(Resource resource)", "modifiers": "public", "return": "", "signature": " ClassLoaderEntityResolver(Resource resource)", "full_signature": "public  ClassLoaderEntityResolver(Resource resource)", "class_method_signature": "ClassLoaderEntityResolver.ClassLoaderEntityResolver(Resource resource)", "testcase": false, "constructor": true}, {"identifier": "resolveEntity", "parameters": "(String publicId, String systemId)", "modifiers": "@Override public", "return": "InputSource", "signature": "InputSource resolveEntity(String publicId, String systemId)", "full_signature": "@Override public InputSource resolveEntity(String publicId, String systemId)", "class_method_signature": "ClassLoaderEntityResolver.resolveEntity(String publicId, String systemId)", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/xml/ClassLoaderEntityResolver.java"}, "focal_method": {"identifier": "resolveEntity", "parameters": "(String publicId, String systemId)", "modifiers": "@Override public", "return": "InputSource", "body": "@Override\n\tpublic InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException {\n\n\t\tif (log.isDebugEnabled()) log.debug(\"Resolving publicId [\" + publicId +\"] systemId [\" + systemId +\"] classloader [\"+classLoader+\"]\");\n\t\tResource resource = Resource.getResource(classLoader, systemId);\n\t\tif(resource != null) {\n\t\t\treturn resource.asInputSource();\n\t\t}\n\t\t// If nothing found, null is returned, for normal processing\n\t\treturn null;\n\t}", "signature": "InputSource resolveEntity(String publicId, String systemId)", "full_signature": "@Override public InputSource resolveEntity(String publicId, String systemId)", "class_method_signature": "ClassLoaderEntityResolver.resolveEntity(String publicId, String systemId)", "testcase": false, "constructor": false, "invocations": ["isDebugEnabled", "debug", "getResource", "asInputSource"]}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}