{"test_class": {"identifier": "MCSPlusTest", "superclass": "", "interfaces": "", "fields": [], "file": "legacy/src/test/java/org/openscience/cdk/smsd/algorithm/mcsplus/MCSPlusTest.java"}, "test_case": {"identifier": "testSomeMethod", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSomeMethod() throws CDKException {\n\n        // TODO review the generated test code and remove the default call to fail.\n        assertNotNull(new MCSPlus().getOverlaps(new AtomContainer(), new AtomContainer(), true));\n\n    }", "signature": "void testSomeMethod()", "full_signature": "@Test public void testSomeMethod()", "class_method_signature": "MCSPlusTest.testSomeMethod()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "getOverlaps"]}, "focal_class": {"identifier": "MCSPlus", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static TimeManager timeManager = null;", "modifier": "private static", "type": "TimeManager", "declarator": "timeManager = null", "var_name": "timeManager"}], "methods": [{"identifier": "MCSPlus", "parameters": "()", "modifiers": "public", "return": "", "signature": " MCSPlus()", "full_signature": "public  MCSPlus()", "class_method_signature": "MCSPlus.MCSPlus()", "testcase": false, "constructor": true}, {"identifier": "getTimeout", "parameters": "()", "modifiers": "protected synchronized static", "return": "double", "signature": "double getTimeout()", "full_signature": "protected synchronized static double getTimeout()", "class_method_signature": "MCSPlus.getTimeout()", "testcase": false, "constructor": false}, {"identifier": "getTimeManager", "parameters": "()", "modifiers": "protected synchronized static", "return": "TimeManager", "signature": "TimeManager getTimeManager()", "full_signature": "protected synchronized static TimeManager getTimeManager()", "class_method_signature": "MCSPlus.getTimeManager()", "testcase": false, "constructor": false}, {"identifier": "setTimeManager", "parameters": "(TimeManager aTimeManager)", "modifiers": "protected synchronized static", "return": "void", "signature": "void setTimeManager(TimeManager aTimeManager)", "full_signature": "protected synchronized static void setTimeManager(TimeManager aTimeManager)", "class_method_signature": "MCSPlus.setTimeManager(TimeManager aTimeManager)", "testcase": false, "constructor": false}, {"identifier": "getOverlaps", "parameters": "(IAtomContainer ac1, IAtomContainer ac2, boolean shouldMatchBonds)", "modifiers": "protected", "return": "List<List<Integer>>", "signature": "List<List<Integer>> getOverlaps(IAtomContainer ac1, IAtomContainer ac2, boolean shouldMatchBonds)", "full_signature": "protected List<List<Integer>> getOverlaps(IAtomContainer ac1, IAtomContainer ac2, boolean shouldMatchBonds)", "class_method_signature": "MCSPlus.getOverlaps(IAtomContainer ac1, IAtomContainer ac2, boolean shouldMatchBonds)", "testcase": false, "constructor": false}, {"identifier": "isTimeOut", "parameters": "()", "modifiers": "public synchronized static", "return": "boolean", "signature": "boolean isTimeOut()", "full_signature": "public synchronized static boolean isTimeOut()", "class_method_signature": "MCSPlus.isTimeOut()", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/org/openscience/cdk/smsd/algorithm/mcsplus/MCSPlus.java"}, "focal_method": {"identifier": "getOverlaps", "parameters": "(IAtomContainer ac1, IAtomContainer ac2, boolean shouldMatchBonds)", "modifiers": "protected", "return": "List<List<Integer>>", "body": "protected List<List<Integer>> getOverlaps(IAtomContainer ac1, IAtomContainer ac2, boolean shouldMatchBonds)\n            throws CDKException {\n        Stack<List<Integer>> maxCliqueSet = null;\n        List<List<Integer>> mappings = new ArrayList<List<Integer>>();\n        try {\n            GenerateCompatibilityGraph gcg = new GenerateCompatibilityGraph(ac1, ac2, shouldMatchBonds);\n            List<Integer> compGraphNodes = gcg.getCompGraphNodes();\n\n            List<Integer> cEdges = gcg.getCEgdes();\n            List<Integer> dEdges = gcg.getDEgdes();\n\n            //            System.err.println(\"**************************************************\");\n            //            System.err.println(\"CEdges: \" + CEdges.size());\n            //            System.out.println(\"DEdges: \" + DEdges.size());\n\n            BKKCKCF init = new BKKCKCF(compGraphNodes, cEdges, dEdges);\n            maxCliqueSet = init.getMaxCliqueSet();\n\n            //            System.err.println(\"**************************************************\");\n            //            System.err.println(\"Max_Cliques_Set: \" + maxCliqueSet.size());\n            //            System.out.println(\"Best Clique Size: \" + init.getBestCliqueSize());\n\n            //clear all the compatibility graph content\n            gcg.clear();\n            while (!maxCliqueSet.empty()) {\n                List<Integer> cliqueList = maxCliqueSet.peek();\n                int cliqueSize = cliqueList.size();\n                if (cliqueSize < ac1.getAtomCount() && cliqueSize < ac2.getAtomCount()) {\n                    McGregor mgit = new McGregor(ac1, ac2, mappings, shouldMatchBonds);\n                    mgit.startMcGregorIteration(mgit.getMCSSize(), cliqueList, compGraphNodes);\n                    mappings = mgit.getMappings();\n                    mgit = null;\n                } else {\n                    mappings = ExactMapping.extractMapping(mappings, compGraphNodes, cliqueList);\n                }\n                maxCliqueSet.pop();\n                if (isTimeOut()) {\n                    break;\n                }\n            }\n        } catch (IOException ex) {\n            Logger.getLogger(MCSPlus.class.getName()).log(Level.SEVERE, null, ex);\n        }\n        return mappings;\n    }", "signature": "List<List<Integer>> getOverlaps(IAtomContainer ac1, IAtomContainer ac2, boolean shouldMatchBonds)", "full_signature": "protected List<List<Integer>> getOverlaps(IAtomContainer ac1, IAtomContainer ac2, boolean shouldMatchBonds)", "class_method_signature": "MCSPlus.getOverlaps(IAtomContainer ac1, IAtomContainer ac2, boolean shouldMatchBonds)", "testcase": false, "constructor": false, "invocations": ["getCompGraphNodes", "getCEgdes", "getDEgdes", "getMaxCliqueSet", "clear", "empty", "peek", "size", "getAtomCount", "getAtomCount", "startMcGregorIteration", "getMCSSize", "getMappings", "extractMapping", "pop", "isTimeOut", "log", "getLogger", "getName"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}