{"test_class": {"identifier": "JcrServiceTest", "superclass": "", "interfaces": "", "fields": [], "file": "web/modeshape-web-cmis/src/test/java/org/modeshape/cmis/JcrServiceTest.java"}, "test_case": {"identifier": "testWorkspace", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWorkspace() {\n        String[] names = {\"foo\", \"\", \"baz\", \"a\"};\n        JcrRepository mockRepo = mock(JcrRepository.class);\n        Map<String, JcrRepository> jrs = new HashMap<String, JcrRepository>();\n        for (String name : names) {\n            jrs.put(name, mockRepo);\n        }\n\n        JcrService js = new JcrService(jrs);\n        js.setCallContext(mock(CallContext.class));\n\n        js.login(\"foo\");\n        verify(mockRepo).login(null, null);\n\n        js.login(\"foo:\");\n        verify(mockRepo, times(2)).login(null, null);\n\n        js.login(\"foo:bar\");\n        verify(mockRepo).login(any(Credentials.class), eq(\"bar\"));\n\n        js.login(\":quux\");\n        verify(mockRepo).login(any(Credentials.class), eq(\"quux\"));\n\n        js.login(\"a:b:c\");\n        verify(mockRepo).login(any(Credentials.class), eq(\"b\"));\n    }", "signature": "void testWorkspace()", "full_signature": "@Test public void testWorkspace()", "class_method_signature": "JcrServiceTest.testWorkspace()", "testcase": true, "constructor": false, "invocations": ["mock", "put", "setCallContext", "mock", "login", "login", "verify", "login", "login", "verify", "times", "login", "login", "verify", "any", "eq", "login", "login", "verify", "any", "eq", "login", "login", "verify", "any", "eq"]}, "focal_class": {"identifier": "JcrService", "superclass": "extends AbstractCmisService", "interfaces": "implements CallContextAwareCmisService", "fields": [{"original_string": "private final static org.modeshape.jcr.api.Logger LOGGER = WebLogger.getLogger(JcrService.class);", "modifier": "private final static", "type": "org.modeshape.jcr.api.Logger", "declarator": "LOGGER = WebLogger.getLogger(JcrService.class)", "var_name": "LOGGER"}, {"original_string": "private final Map<String, JcrRepository> jcrRepositories;", "modifier": "private final", "type": "Map<String, JcrRepository>", "declarator": "jcrRepositories", "var_name": "jcrRepositories"}, {"original_string": "private final Map<String, Session> sessions = new HashMap<String, Session>();", "modifier": "private final", "type": "Map<String, Session>", "declarator": "sessions = new HashMap<String, Session>()", "var_name": "sessions"}, {"original_string": "private CallContext context;", "modifier": "private", "type": "CallContext", "declarator": "context", "var_name": "context"}], "methods": [{"identifier": "JcrService", "parameters": "(Map<String, JcrRepository> jcrRepositories)", "modifiers": "public", "return": "", "signature": " JcrService(Map<String, JcrRepository> jcrRepositories)", "full_signature": "public  JcrService(Map<String, JcrRepository> jcrRepositories)", "class_method_signature": "JcrService.JcrService(Map<String, JcrRepository> jcrRepositories)", "testcase": false, "constructor": true}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "JcrService.close()", "testcase": false, "constructor": false}, {"identifier": "setCallContext", "parameters": "(CallContext context)", "modifiers": "@Override public", "return": "void", "signature": "void setCallContext(CallContext context)", "full_signature": "@Override public void setCallContext(CallContext context)", "class_method_signature": "JcrService.setCallContext(CallContext context)", "testcase": false, "constructor": false}, {"identifier": "getCallContext", "parameters": "()", "modifiers": "@Override public", "return": "CallContext", "signature": "CallContext getCallContext()", "full_signature": "@Override public CallContext getCallContext()", "class_method_signature": "JcrService.getCallContext()", "testcase": false, "constructor": false}, {"identifier": "getRepositoryInfo", "parameters": "(String repositoryId, ExtensionsData extension)", "modifiers": "@Override public", "return": "RepositoryInfo", "signature": "RepositoryInfo getRepositoryInfo(String repositoryId, ExtensionsData extension)", "full_signature": "@Override public RepositoryInfo getRepositoryInfo(String repositoryId, ExtensionsData extension)", "class_method_signature": "JcrService.getRepositoryInfo(String repositoryId, ExtensionsData extension)", "testcase": false, "constructor": false}, {"identifier": "getRepositoryInfos", "parameters": "(ExtensionsData extension)", "modifiers": "@Override public", "return": "List<RepositoryInfo>", "signature": "List<RepositoryInfo> getRepositoryInfos(ExtensionsData extension)", "full_signature": "@Override public List<RepositoryInfo> getRepositoryInfos(ExtensionsData extension)", "class_method_signature": "JcrService.getRepositoryInfos(ExtensionsData extension)", "testcase": false, "constructor": false}, {"identifier": "getTypeChildren", "parameters": "(String repositoryId, String typeId, Boolean includePropertyDefinitions,\n            BigInteger maxItems, BigInteger skipCount, ExtensionsData extension)", "modifiers": "@Override public", "return": "TypeDefinitionList", "signature": "TypeDefinitionList getTypeChildren(String repositoryId, String typeId, Boolean includePropertyDefinitions,\n            BigInteger maxItems, BigInteger skipCount, ExtensionsData extension)", "full_signature": "@Override public TypeDefinitionList getTypeChildren(String repositoryId, String typeId, Boolean includePropertyDefinitions,\n            BigInteger maxItems, BigInteger skipCount, ExtensionsData extension)", "class_method_signature": "JcrService.getTypeChildren(String repositoryId, String typeId, Boolean includePropertyDefinitions,\n            BigInteger maxItems, BigInteger skipCount, ExtensionsData extension)", "testcase": false, "constructor": false}, {"identifier": "getTypeDefinition", "parameters": "(String repositoryId, String typeId, ExtensionsData extension)", "modifiers": "@Override public", "return": "TypeDefinition", "signature": "TypeDefinition getTypeDefinition(String repositoryId, String typeId, ExtensionsData extension)", "full_signature": "@Override public TypeDefinition getTypeDefinition(String repositoryId, String typeId, ExtensionsData extension)", "class_method_signature": "JcrService.getTypeDefinition(String repositoryId, String typeId, ExtensionsData extension)", "testcase": false, "constructor": false}, {"identifier": "getTypeDescendants", "parameters": "(String repositoryId, String typeId, BigInteger depth,\n            Boolean includePropertyDefinitions, ExtensionsData extension)", "modifiers": "@Override public", "return": "List<TypeDefinitionContainer>", "signature": "List<TypeDefinitionContainer> getTypeDescendants(String repositoryId, String typeId, BigInteger depth,\n            Boolean includePropertyDefinitions, ExtensionsData extension)", "full_signature": "@Override public List<TypeDefinitionContainer> getTypeDescendants(String repositoryId, String typeId, BigInteger depth,\n            Boolean includePropertyDefinitions, ExtensionsData extension)", "class_method_signature": "JcrService.getTypeDescendants(String repositoryId, String typeId, BigInteger depth,\n            Boolean includePropertyDefinitions, ExtensionsData extension)", "testcase": false, "constructor": false}, {"identifier": "getChildren", "parameters": "(String repositoryId, String folderId, String filter, String orderBy,\n            Boolean includeAllowableActions, IncludeRelationships includeRelationships, String renditionFilter,\n            Boolean includePathSegment, BigInteger maxItems, BigInteger skipCount, ExtensionsData extension)", "modifiers": "@Override public", "return": "ObjectInFolderList", "signature": "ObjectInFolderList getChildren(String repositoryId, String folderId, String filter, String orderBy,\n            Boolean includeAllowableActions, IncludeRelationships includeRelationships, String renditionFilter,\n            Boolean includePathSegment, BigInteger maxItems, BigInteger skipCount, ExtensionsData extension)", "full_signature": "@Override public ObjectInFolderList getChildren(String repositoryId, String folderId, String filter, String orderBy,\n            Boolean includeAllowableActions, IncludeRelationships includeRelationships, String renditionFilter,\n            Boolean includePathSegment, BigInteger maxItems, BigInteger skipCount, ExtensionsData extension)", "class_method_signature": "JcrService.getChildren(String repositoryId, String folderId, String filter, String orderBy,\n            Boolean includeAllowableActions, IncludeRelationships includeRelationships, String renditionFilter,\n            Boolean includePathSegment, BigInteger maxItems, BigInteger skipCount, ExtensionsData extension)", "testcase": false, "constructor": false}, {"identifier": "getDescendants", "parameters": "(String repositoryId, String folderId, BigInteger depth,\n            String filter, Boolean includeAllowableActions, IncludeRelationships includeRelationships,\n            String renditionFilter, Boolean includePathSegment, ExtensionsData extension)", "modifiers": "@Override public", "return": "List<ObjectInFolderContainer>", "signature": "List<ObjectInFolderContainer> getDescendants(String repositoryId, String folderId, BigInteger depth,\n            String filter, Boolean includeAllowableActions, IncludeRelationships includeRelationships,\n            String renditionFilter, Boolean includePathSegment, ExtensionsData extension)", "full_signature": "@Override public List<ObjectInFolderContainer> getDescendants(String repositoryId, String folderId, BigInteger depth,\n            String filter, Boolean includeAllowableActions, IncludeRelationships includeRelationships,\n            String renditionFilter, Boolean includePathSegment, ExtensionsData extension)", "class_method_signature": "JcrService.getDescendants(String repositoryId, String folderId, BigInteger depth,\n            String filter, Boolean includeAllowableActions, IncludeRelationships includeRelationships,\n            String renditionFilter, Boolean includePathSegment, ExtensionsData extension)", "testcase": false, "constructor": false}, {"identifier": "getFolderParent", "parameters": "(String repositoryId, String folderId, String filter, ExtensionsData extension)", "modifiers": "@Override public", "return": "ObjectData", "signature": "ObjectData getFolderParent(String repositoryId, String folderId, String filter, ExtensionsData extension)", "full_signature": "@Override public ObjectData getFolderParent(String repositoryId, String folderId, String filter, ExtensionsData extension)", "class_method_signature": "JcrService.getFolderParent(String repositoryId, String folderId, String filter, ExtensionsData extension)", "testcase": false, "constructor": false}, {"identifier": "getFolderTree", "parameters": "(String repositoryId, String folderId, BigInteger depth,\n            String filter, Boolean includeAllowableActions, IncludeRelationships includeRelationships,\n            String renditionFilter, Boolean includePathSegment, ExtensionsData extension)", "modifiers": "@Override public", "return": "List<ObjectInFolderContainer>", "signature": "List<ObjectInFolderContainer> getFolderTree(String repositoryId, String folderId, BigInteger depth,\n            String filter, Boolean includeAllowableActions, IncludeRelationships includeRelationships,\n            String renditionFilter, Boolean includePathSegment, ExtensionsData extension)", "full_signature": "@Override public List<ObjectInFolderContainer> getFolderTree(String repositoryId, String folderId, BigInteger depth,\n            String filter, Boolean includeAllowableActions, IncludeRelationships includeRelationships,\n            String renditionFilter, Boolean includePathSegment, ExtensionsData extension)", "class_method_signature": "JcrService.getFolderTree(String repositoryId, String folderId, BigInteger depth,\n            String filter, Boolean includeAllowableActions, IncludeRelationships includeRelationships,\n            String renditionFilter, Boolean includePathSegment, ExtensionsData extension)", "testcase": false, "constructor": false}, {"identifier": "getObjectParents", "parameters": "(String repositoryId, String objectId, String filter,\n            Boolean includeAllowableActions, IncludeRelationships includeRelationships, String renditionFilter,\n            Boolean includeRelativePathSegment, ExtensionsData extension)", "modifiers": "@Override public", "return": "List<ObjectParentData>", "signature": "List<ObjectParentData> getObjectParents(String repositoryId, String objectId, String filter,\n            Boolean includeAllowableActions, IncludeRelationships includeRelationships, String renditionFilter,\n            Boolean includeRelativePathSegment, ExtensionsData extension)", "full_signature": "@Override public List<ObjectParentData> getObjectParents(String repositoryId, String objectId, String filter,\n            Boolean includeAllowableActions, IncludeRelationships includeRelationships, String renditionFilter,\n            Boolean includeRelativePathSegment, ExtensionsData extension)", "class_method_signature": "JcrService.getObjectParents(String repositoryId, String objectId, String filter,\n            Boolean includeAllowableActions, IncludeRelationships includeRelationships, String renditionFilter,\n            Boolean includeRelativePathSegment, ExtensionsData extension)", "testcase": false, "constructor": false}, {"identifier": "getCheckedOutDocs", "parameters": "(String repositoryId, String folderId, String filter, String orderBy,\n            Boolean includeAllowableActions, IncludeRelationships includeRelationships, String renditionFilter,\n            BigInteger maxItems, BigInteger skipCount, ExtensionsData extension)", "modifiers": "@Override public", "return": "ObjectList", "signature": "ObjectList getCheckedOutDocs(String repositoryId, String folderId, String filter, String orderBy,\n            Boolean includeAllowableActions, IncludeRelationships includeRelationships, String renditionFilter,\n            BigInteger maxItems, BigInteger skipCount, ExtensionsData extension)", "full_signature": "@Override public ObjectList getCheckedOutDocs(String repositoryId, String folderId, String filter, String orderBy,\n            Boolean includeAllowableActions, IncludeRelationships includeRelationships, String renditionFilter,\n            BigInteger maxItems, BigInteger skipCount, ExtensionsData extension)", "class_method_signature": "JcrService.getCheckedOutDocs(String repositoryId, String folderId, String filter, String orderBy,\n            Boolean includeAllowableActions, IncludeRelationships includeRelationships, String renditionFilter,\n            BigInteger maxItems, BigInteger skipCount, ExtensionsData extension)", "testcase": false, "constructor": false}, {"identifier": "createDocument", "parameters": "(String repositoryId, Properties properties, String folderId,\n            ContentStream contentStream, VersioningState versioningState, List<String> policies, Acl addAces,\n            Acl removeAces, ExtensionsData extension)", "modifiers": "@Override public", "return": "String", "signature": "String createDocument(String repositoryId, Properties properties, String folderId,\n            ContentStream contentStream, VersioningState versioningState, List<String> policies, Acl addAces,\n            Acl removeAces, ExtensionsData extension)", "full_signature": "@Override public String createDocument(String repositoryId, Properties properties, String folderId,\n            ContentStream contentStream, VersioningState versioningState, List<String> policies, Acl addAces,\n            Acl removeAces, ExtensionsData extension)", "class_method_signature": "JcrService.createDocument(String repositoryId, Properties properties, String folderId,\n            ContentStream contentStream, VersioningState versioningState, List<String> policies, Acl addAces,\n            Acl removeAces, ExtensionsData extension)", "testcase": false, "constructor": false}, {"identifier": "createDocumentFromSource", "parameters": "(String repositoryId, String sourceId, Properties properties,\n            String folderId, VersioningState versioningState, List<String> policies, Acl addAces, Acl removeAces,\n            ExtensionsData extension)", "modifiers": "@Override public", "return": "String", "signature": "String createDocumentFromSource(String repositoryId, String sourceId, Properties properties,\n            String folderId, VersioningState versioningState, List<String> policies, Acl addAces, Acl removeAces,\n            ExtensionsData extension)", "full_signature": "@Override public String createDocumentFromSource(String repositoryId, String sourceId, Properties properties,\n            String folderId, VersioningState versioningState, List<String> policies, Acl addAces, Acl removeAces,\n            ExtensionsData extension)", "class_method_signature": "JcrService.createDocumentFromSource(String repositoryId, String sourceId, Properties properties,\n            String folderId, VersioningState versioningState, List<String> policies, Acl addAces, Acl removeAces,\n            ExtensionsData extension)", "testcase": false, "constructor": false}, {"identifier": "setContentStream", "parameters": "(String repositoryId, Holder<String> objectId, Boolean overwriteFlag,\n            Holder<String> changeToken, ContentStream contentStream, ExtensionsData extension)", "modifiers": "@Override public", "return": "void", "signature": "void setContentStream(String repositoryId, Holder<String> objectId, Boolean overwriteFlag,\n            Holder<String> changeToken, ContentStream contentStream, ExtensionsData extension)", "full_signature": "@Override public void setContentStream(String repositoryId, Holder<String> objectId, Boolean overwriteFlag,\n            Holder<String> changeToken, ContentStream contentStream, ExtensionsData extension)", "class_method_signature": "JcrService.setContentStream(String repositoryId, Holder<String> objectId, Boolean overwriteFlag,\n            Holder<String> changeToken, ContentStream contentStream, ExtensionsData extension)", "testcase": false, "constructor": false}, {"identifier": "deleteContentStream", "parameters": "(String repositoryId, Holder<String> objectId, Holder<String> changeToken,\n            ExtensionsData extension)", "modifiers": "@Override public", "return": "void", "signature": "void deleteContentStream(String repositoryId, Holder<String> objectId, Holder<String> changeToken,\n            ExtensionsData extension)", "full_signature": "@Override public void deleteContentStream(String repositoryId, Holder<String> objectId, Holder<String> changeToken,\n            ExtensionsData extension)", "class_method_signature": "JcrService.deleteContentStream(String repositoryId, Holder<String> objectId, Holder<String> changeToken,\n            ExtensionsData extension)", "testcase": false, "constructor": false}, {"identifier": "createFolder", "parameters": "(String repositoryId, Properties properties, String folderId, List<String> policies,\n            Acl addAces, Acl removeAces, ExtensionsData extension)", "modifiers": "@Override public", "return": "String", "signature": "String createFolder(String repositoryId, Properties properties, String folderId, List<String> policies,\n            Acl addAces, Acl removeAces, ExtensionsData extension)", "full_signature": "@Override public String createFolder(String repositoryId, Properties properties, String folderId, List<String> policies,\n            Acl addAces, Acl removeAces, ExtensionsData extension)", "class_method_signature": "JcrService.createFolder(String repositoryId, Properties properties, String folderId, List<String> policies,\n            Acl addAces, Acl removeAces, ExtensionsData extension)", "testcase": false, "constructor": false}, {"identifier": "deleteObjectOrCancelCheckOut", "parameters": "(String repositoryId, String objectId, Boolean allVersions,\n            ExtensionsData extension)", "modifiers": "@Override public", "return": "void", "signature": "void deleteObjectOrCancelCheckOut(String repositoryId, String objectId, Boolean allVersions,\n            ExtensionsData extension)", "full_signature": "@Override public void deleteObjectOrCancelCheckOut(String repositoryId, String objectId, Boolean allVersions,\n            ExtensionsData extension)", "class_method_signature": "JcrService.deleteObjectOrCancelCheckOut(String repositoryId, String objectId, Boolean allVersions,\n            ExtensionsData extension)", "testcase": false, "constructor": false}, {"identifier": "deleteTree", "parameters": "(String repositoryId, String folderId, Boolean allVersions,\n            UnfileObject unfileObjects, Boolean continueOnFailure, ExtensionsData extension)", "modifiers": "@Override public", "return": "FailedToDeleteData", "signature": "FailedToDeleteData deleteTree(String repositoryId, String folderId, Boolean allVersions,\n            UnfileObject unfileObjects, Boolean continueOnFailure, ExtensionsData extension)", "full_signature": "@Override public FailedToDeleteData deleteTree(String repositoryId, String folderId, Boolean allVersions,\n            UnfileObject unfileObjects, Boolean continueOnFailure, ExtensionsData extension)", "class_method_signature": "JcrService.deleteTree(String repositoryId, String folderId, Boolean allVersions,\n            UnfileObject unfileObjects, Boolean continueOnFailure, ExtensionsData extension)", "testcase": false, "constructor": false}, {"identifier": "getAllowableActions", "parameters": "(String repositoryId, String objectId, ExtensionsData extension)", "modifiers": "@Override public", "return": "AllowableActions", "signature": "AllowableActions getAllowableActions(String repositoryId, String objectId, ExtensionsData extension)", "full_signature": "@Override public AllowableActions getAllowableActions(String repositoryId, String objectId, ExtensionsData extension)", "class_method_signature": "JcrService.getAllowableActions(String repositoryId, String objectId, ExtensionsData extension)", "testcase": false, "constructor": false}, {"identifier": "getContentStream", "parameters": "(String repositoryId, String objectId, String streamId, BigInteger offset,\n            BigInteger length, ExtensionsData extension)", "modifiers": "@Override public", "return": "ContentStream", "signature": "ContentStream getContentStream(String repositoryId, String objectId, String streamId, BigInteger offset,\n            BigInteger length, ExtensionsData extension)", "full_signature": "@Override public ContentStream getContentStream(String repositoryId, String objectId, String streamId, BigInteger offset,\n            BigInteger length, ExtensionsData extension)", "class_method_signature": "JcrService.getContentStream(String repositoryId, String objectId, String streamId, BigInteger offset,\n            BigInteger length, ExtensionsData extension)", "testcase": false, "constructor": false}, {"identifier": "getObject", "parameters": "(String repositoryId, String objectId, String filter, Boolean includeAllowableActions,\n            IncludeRelationships includeRelationships, String renditionFilter, Boolean includePolicyIds,\n            Boolean includeAcl, ExtensionsData extension)", "modifiers": "@Override public", "return": "ObjectData", "signature": "ObjectData getObject(String repositoryId, String objectId, String filter, Boolean includeAllowableActions,\n            IncludeRelationships includeRelationships, String renditionFilter, Boolean includePolicyIds,\n            Boolean includeAcl, ExtensionsData extension)", "full_signature": "@Override public ObjectData getObject(String repositoryId, String objectId, String filter, Boolean includeAllowableActions,\n            IncludeRelationships includeRelationships, String renditionFilter, Boolean includePolicyIds,\n            Boolean includeAcl, ExtensionsData extension)", "class_method_signature": "JcrService.getObject(String repositoryId, String objectId, String filter, Boolean includeAllowableActions,\n            IncludeRelationships includeRelationships, String renditionFilter, Boolean includePolicyIds,\n            Boolean includeAcl, ExtensionsData extension)", "testcase": false, "constructor": false}, {"identifier": "getObjectByPath", "parameters": "(String repositoryId, String path, String filter, Boolean includeAllowableActions,\n            IncludeRelationships includeRelationships, String renditionFilter, Boolean includePolicyIds,\n            Boolean includeAcl, ExtensionsData extension)", "modifiers": "@Override public", "return": "ObjectData", "signature": "ObjectData getObjectByPath(String repositoryId, String path, String filter, Boolean includeAllowableActions,\n            IncludeRelationships includeRelationships, String renditionFilter, Boolean includePolicyIds,\n            Boolean includeAcl, ExtensionsData extension)", "full_signature": "@Override public ObjectData getObjectByPath(String repositoryId, String path, String filter, Boolean includeAllowableActions,\n            IncludeRelationships includeRelationships, String renditionFilter, Boolean includePolicyIds,\n            Boolean includeAcl, ExtensionsData extension)", "class_method_signature": "JcrService.getObjectByPath(String repositoryId, String path, String filter, Boolean includeAllowableActions,\n            IncludeRelationships includeRelationships, String renditionFilter, Boolean includePolicyIds,\n            Boolean includeAcl, ExtensionsData extension)", "testcase": false, "constructor": false}, {"identifier": "getProperties", "parameters": "(String repositoryId, String objectId, String filter, ExtensionsData extension)", "modifiers": "@Override public", "return": "Properties", "signature": "Properties getProperties(String repositoryId, String objectId, String filter, ExtensionsData extension)", "full_signature": "@Override public Properties getProperties(String repositoryId, String objectId, String filter, ExtensionsData extension)", "class_method_signature": "JcrService.getProperties(String repositoryId, String objectId, String filter, ExtensionsData extension)", "testcase": false, "constructor": false}, {"identifier": "moveObject", "parameters": "(String repositoryId, Holder<String> objectId, String targetFolderId, String sourceFolderId,\n            ExtensionsData extension)", "modifiers": "@Override public", "return": "void", "signature": "void moveObject(String repositoryId, Holder<String> objectId, String targetFolderId, String sourceFolderId,\n            ExtensionsData extension)", "full_signature": "@Override public void moveObject(String repositoryId, Holder<String> objectId, String targetFolderId, String sourceFolderId,\n            ExtensionsData extension)", "class_method_signature": "JcrService.moveObject(String repositoryId, Holder<String> objectId, String targetFolderId, String sourceFolderId,\n            ExtensionsData extension)", "testcase": false, "constructor": false}, {"identifier": "updateProperties", "parameters": "(String repositoryId, Holder<String> objectId, Holder<String> changeToken,\n            Properties properties, ExtensionsData extension)", "modifiers": "@Override public", "return": "void", "signature": "void updateProperties(String repositoryId, Holder<String> objectId, Holder<String> changeToken,\n            Properties properties, ExtensionsData extension)", "full_signature": "@Override public void updateProperties(String repositoryId, Holder<String> objectId, Holder<String> changeToken,\n            Properties properties, ExtensionsData extension)", "class_method_signature": "JcrService.updateProperties(String repositoryId, Holder<String> objectId, Holder<String> changeToken,\n            Properties properties, ExtensionsData extension)", "testcase": false, "constructor": false}, {"identifier": "checkOut", "parameters": "(String repositoryId, Holder<String> objectId, ExtensionsData extension,\n            Holder<Boolean> contentCopied)", "modifiers": "@Override public", "return": "void", "signature": "void checkOut(String repositoryId, Holder<String> objectId, ExtensionsData extension,\n            Holder<Boolean> contentCopied)", "full_signature": "@Override public void checkOut(String repositoryId, Holder<String> objectId, ExtensionsData extension,\n            Holder<Boolean> contentCopied)", "class_method_signature": "JcrService.checkOut(String repositoryId, Holder<String> objectId, ExtensionsData extension,\n            Holder<Boolean> contentCopied)", "testcase": false, "constructor": false}, {"identifier": "cancelCheckOut", "parameters": "(String repositoryId, String objectId, ExtensionsData extension)", "modifiers": "@Override public", "return": "void", "signature": "void cancelCheckOut(String repositoryId, String objectId, ExtensionsData extension)", "full_signature": "@Override public void cancelCheckOut(String repositoryId, String objectId, ExtensionsData extension)", "class_method_signature": "JcrService.cancelCheckOut(String repositoryId, String objectId, ExtensionsData extension)", "testcase": false, "constructor": false}, {"identifier": "checkIn", "parameters": "(String repositoryId, Holder<String> objectId, Boolean major, Properties properties,\n            ContentStream contentStream, String checkinComment, List<String> policies, Acl addAces, Acl removeAces,\n            ExtensionsData extension)", "modifiers": "@Override public", "return": "void", "signature": "void checkIn(String repositoryId, Holder<String> objectId, Boolean major, Properties properties,\n            ContentStream contentStream, String checkinComment, List<String> policies, Acl addAces, Acl removeAces,\n            ExtensionsData extension)", "full_signature": "@Override public void checkIn(String repositoryId, Holder<String> objectId, Boolean major, Properties properties,\n            ContentStream contentStream, String checkinComment, List<String> policies, Acl addAces, Acl removeAces,\n            ExtensionsData extension)", "class_method_signature": "JcrService.checkIn(String repositoryId, Holder<String> objectId, Boolean major, Properties properties,\n            ContentStream contentStream, String checkinComment, List<String> policies, Acl addAces, Acl removeAces,\n            ExtensionsData extension)", "testcase": false, "constructor": false}, {"identifier": "getAllVersions", "parameters": "(String repositoryId, String objectId, String versionSeriesId, String filter,\n            Boolean includeAllowableActions, ExtensionsData extension)", "modifiers": "@Override public", "return": "List<ObjectData>", "signature": "List<ObjectData> getAllVersions(String repositoryId, String objectId, String versionSeriesId, String filter,\n            Boolean includeAllowableActions, ExtensionsData extension)", "full_signature": "@Override public List<ObjectData> getAllVersions(String repositoryId, String objectId, String versionSeriesId, String filter,\n            Boolean includeAllowableActions, ExtensionsData extension)", "class_method_signature": "JcrService.getAllVersions(String repositoryId, String objectId, String versionSeriesId, String filter,\n            Boolean includeAllowableActions, ExtensionsData extension)", "testcase": false, "constructor": false}, {"identifier": "getObjectOfLatestVersion", "parameters": "(String repositoryId, String objectId, String versionSeriesId,\n            Boolean major, String filter, Boolean includeAllowableActions, IncludeRelationships includeRelationships,\n            String renditionFilter, Boolean includePolicyIds, Boolean includeAcl, ExtensionsData extension)", "modifiers": "@Override public", "return": "ObjectData", "signature": "ObjectData getObjectOfLatestVersion(String repositoryId, String objectId, String versionSeriesId,\n            Boolean major, String filter, Boolean includeAllowableActions, IncludeRelationships includeRelationships,\n            String renditionFilter, Boolean includePolicyIds, Boolean includeAcl, ExtensionsData extension)", "full_signature": "@Override public ObjectData getObjectOfLatestVersion(String repositoryId, String objectId, String versionSeriesId,\n            Boolean major, String filter, Boolean includeAllowableActions, IncludeRelationships includeRelationships,\n            String renditionFilter, Boolean includePolicyIds, Boolean includeAcl, ExtensionsData extension)", "class_method_signature": "JcrService.getObjectOfLatestVersion(String repositoryId, String objectId, String versionSeriesId,\n            Boolean major, String filter, Boolean includeAllowableActions, IncludeRelationships includeRelationships,\n            String renditionFilter, Boolean includePolicyIds, Boolean includeAcl, ExtensionsData extension)", "testcase": false, "constructor": false}, {"identifier": "getPropertiesOfLatestVersion", "parameters": "(String repositoryId, String objectId, String versionSeriesId,\n            Boolean major, String filter, ExtensionsData extension)", "modifiers": "@Override public", "return": "Properties", "signature": "Properties getPropertiesOfLatestVersion(String repositoryId, String objectId, String versionSeriesId,\n            Boolean major, String filter, ExtensionsData extension)", "full_signature": "@Override public Properties getPropertiesOfLatestVersion(String repositoryId, String objectId, String versionSeriesId,\n            Boolean major, String filter, ExtensionsData extension)", "class_method_signature": "JcrService.getPropertiesOfLatestVersion(String repositoryId, String objectId, String versionSeriesId,\n            Boolean major, String filter, ExtensionsData extension)", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "(String repositoryId, String statement, Boolean searchAllVersions,\n            Boolean includeAllowableActions, IncludeRelationships includeRelationships, String renditionFilter,\n            BigInteger maxItems, BigInteger skipCount, ExtensionsData extension)", "modifiers": "@Override public", "return": "ObjectList", "signature": "ObjectList query(String repositoryId, String statement, Boolean searchAllVersions,\n            Boolean includeAllowableActions, IncludeRelationships includeRelationships, String renditionFilter,\n            BigInteger maxItems, BigInteger skipCount, ExtensionsData extension)", "full_signature": "@Override public ObjectList query(String repositoryId, String statement, Boolean searchAllVersions,\n            Boolean includeAllowableActions, IncludeRelationships includeRelationships, String renditionFilter,\n            BigInteger maxItems, BigInteger skipCount, ExtensionsData extension)", "class_method_signature": "JcrService.query(String repositoryId, String statement, Boolean searchAllVersions,\n            Boolean includeAllowableActions, IncludeRelationships includeRelationships, String renditionFilter,\n            BigInteger maxItems, BigInteger skipCount, ExtensionsData extension)", "testcase": false, "constructor": false}, {"identifier": "login", "parameters": "(String repositoryId)", "modifiers": "protected", "return": "Session", "signature": "Session login(String repositoryId)", "full_signature": "protected Session login(String repositoryId)", "class_method_signature": "JcrService.login(String repositoryId)", "testcase": false, "constructor": false}, {"identifier": "jcrRepository", "parameters": "(String repositoryId)", "modifiers": "private", "return": "JcrRepository", "signature": "JcrRepository jcrRepository(String repositoryId)", "full_signature": "private JcrRepository jcrRepository(String repositoryId)", "class_method_signature": "JcrService.jcrRepository(String repositoryId)", "testcase": false, "constructor": false}, {"identifier": "name", "parameters": "(String repositoryId)", "modifiers": "private", "return": "String", "signature": "String name(String repositoryId)", "full_signature": "private String name(String repositoryId)", "class_method_signature": "JcrService.name(String repositoryId)", "testcase": false, "constructor": false}, {"identifier": "workspace", "parameters": "(String repositoryId)", "modifiers": "private", "return": "String", "signature": "String workspace(String repositoryId)", "full_signature": "private String workspace(String repositoryId)", "class_method_signature": "JcrService.workspace(String repositoryId)", "testcase": false, "constructor": false}], "file": "web/modeshape-web-cmis/src/main/java/org/modeshape/cmis/JcrService.java"}, "focal_method": {"identifier": "workspace", "parameters": "(String repositoryId)", "modifiers": "private", "return": "String", "body": "private String workspace(String repositoryId) {\n        CheckArg.isNotNull(repositoryId, \"repositoryId\"); // if can be user-supplied, or 'assert repositoryId != null' if not user supplied\n        repositoryId = repositoryId.trim();\n        String[] parts = repositoryId.split(\":\");\n        int numParts = parts.length;\n\n        if (numParts > 1) {\n            // Just take the second part\n            return parts[1].trim(); // may be blank\n        }\n        return null;\n    }", "signature": "String workspace(String repositoryId)", "full_signature": "private String workspace(String repositoryId)", "class_method_signature": "JcrService.workspace(String repositoryId)", "testcase": false, "constructor": false, "invocations": ["isNotNull", "trim", "split", "trim"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}