{"test_class": {"identifier": "DataTablesParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "frontend/sw360-portlet/src/test/java/org/eclipse/sw360/portal/common/datatables/DataTablesParserTest.java"}, "test_case": {"identifier": "testUnprefix", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUnprefix() throws Exception {\n\n        ImmutableMap.Builder<String, String[]> objectBuilder = ImmutableMap.builder();\n\n        objectBuilder.put(\"pre\", new String[]{\"1\"});\n\n        objectBuilder.put(\"ppre\", new String[]{\"10\"});\n        objectBuilder.put(\"prea\", new String[]{\"5\"});\n        objectBuilder.put(\"preab\", new String[]{\"6\"});\n        objectBuilder.put(\"preac\", new String[]{\"7\"});\n\n        Map<String, String[]> map = objectBuilder.build();\n\n        Map<String, String[]> unprefixed = DataTablesParser.unprefix(map, \"pre\");\n\n        assertThat(unprefixed.keySet(), containsInAnyOrder(\"\", \"a\", \"ab\", \"ac\"));\n\n        assertThat(unprefixed, hasEntry(\"\", new String[]{\"1\"}));\n        assertThat(unprefixed, hasEntry(\"a\", new String[]{\"5\"}));\n        assertThat(unprefixed, hasEntry(\"ab\", new String[]{\"6\"}));\n        assertThat(unprefixed, hasEntry(\"ac\", new String[]{\"7\"}));\n\n    }", "signature": "void testUnprefix()", "full_signature": "@Test public void testUnprefix()", "class_method_signature": "DataTablesParserTest.testUnprefix()", "testcase": true, "constructor": false, "invocations": ["builder", "put", "put", "put", "put", "put", "build", "unprefix", "assertThat", "keySet", "containsInAnyOrder", "assertThat", "hasEntry", "assertThat", "hasEntry", "assertThat", "hasEntry", "assertThat", "hasEntry"]}, "focal_class": {"identifier": "DataTablesParser", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "parametersFrom", "parameters": "(Map<String, String[]> parameterMap)", "modifiers": "protected static", "return": "DataTablesParameters", "signature": "DataTablesParameters parametersFrom(Map<String, String[]> parameterMap)", "full_signature": "protected static DataTablesParameters parametersFrom(Map<String, String[]> parameterMap)", "class_method_signature": "DataTablesParser.parametersFrom(Map<String, String[]> parameterMap)", "testcase": false, "constructor": false}, {"identifier": "getOrders", "parameters": "(Map<String, String[]> parameterMap)", "modifiers": "private static", "return": "List<DataTablesOrder>", "signature": "List<DataTablesOrder> getOrders(Map<String, String[]> parameterMap)", "full_signature": "private static List<DataTablesOrder> getOrders(Map<String, String[]> parameterMap)", "class_method_signature": "DataTablesParser.getOrders(Map<String, String[]> parameterMap)", "testcase": false, "constructor": false}, {"identifier": "parametersFrom", "parameters": "(PortletRequest request)", "modifiers": "public static", "return": "DataTablesParameters", "signature": "DataTablesParameters parametersFrom(PortletRequest request)", "full_signature": "public static DataTablesParameters parametersFrom(PortletRequest request)", "class_method_signature": "DataTablesParser.parametersFrom(PortletRequest request)", "testcase": false, "constructor": false}, {"identifier": "getSearch", "parameters": "(Map<String, String[]> parameterMap, String paramPrefix)", "modifiers": "private static", "return": "DataTablesSearch", "signature": "DataTablesSearch getSearch(Map<String, String[]> parameterMap, String paramPrefix)", "full_signature": "private static DataTablesSearch getSearch(Map<String, String[]> parameterMap, String paramPrefix)", "class_method_signature": "DataTablesParser.getSearch(Map<String, String[]> parameterMap, String paramPrefix)", "testcase": false, "constructor": false}, {"identifier": "getSearch", "parameters": "(Map<String, String[]> filterKeys)", "modifiers": "private static", "return": "DataTablesSearch", "signature": "DataTablesSearch getSearch(Map<String, String[]> filterKeys)", "full_signature": "private static DataTablesSearch getSearch(Map<String, String[]> filterKeys)", "class_method_signature": "DataTablesParser.getSearch(Map<String, String[]> filterKeys)", "testcase": false, "constructor": false}, {"identifier": "getColumns", "parameters": "(Map<String, String[]> parameterMap)", "modifiers": "private static", "return": "List<DataTablesColumn>", "signature": "List<DataTablesColumn> getColumns(Map<String, String[]> parameterMap)", "full_signature": "private static List<DataTablesColumn> getColumns(Map<String, String[]> parameterMap)", "class_method_signature": "DataTablesParser.getColumns(Map<String, String[]> parameterMap)", "testcase": false, "constructor": false}, {"identifier": "getColumn", "parameters": "()", "modifiers": "private static", "return": "Function<Map<String, String[]>, DataTablesColumn>", "signature": "Function<Map<String, String[]>, DataTablesColumn> getColumn()", "full_signature": "private static Function<Map<String, String[]>, DataTablesColumn> getColumn()", "class_method_signature": "DataTablesParser.getColumn()", "testcase": false, "constructor": false}, {"identifier": "getOrder", "parameters": "()", "modifiers": "private static", "return": "Function<Map<String, String[]>, DataTablesOrder>", "signature": "Function<Map<String, String[]>, DataTablesOrder> getOrder()", "full_signature": "private static Function<Map<String, String[]>, DataTablesOrder> getOrder()", "class_method_signature": "DataTablesParser.getOrder()", "testcase": false, "constructor": false}, {"identifier": "vectorize", "parameters": "(Map<String, String[]> parametersMap)", "modifiers": "protected static", "return": "List<Map<String, String[]>>", "signature": "List<Map<String, String[]>> vectorize(Map<String, String[]> parametersMap)", "full_signature": "protected static List<Map<String, String[]>> vectorize(Map<String, String[]> parametersMap)", "class_method_signature": "DataTablesParser.vectorize(Map<String, String[]> parametersMap)", "testcase": false, "constructor": false}, {"identifier": "unprefix", "parameters": "(Map<String, String[]> parametersMap, String prefix)", "modifiers": "protected static", "return": "Map<String, String[]>", "signature": "Map<String, String[]> unprefix(Map<String, String[]> parametersMap, String prefix)", "full_signature": "protected static Map<String, String[]> unprefix(Map<String, String[]> parametersMap, String prefix)", "class_method_signature": "DataTablesParser.unprefix(Map<String, String[]> parametersMap, String prefix)", "testcase": false, "constructor": false}, {"identifier": "getSimple", "parameters": "(Map<String, String[]> parameterMap, String parameterName)", "modifiers": "private static", "return": "String", "signature": "String getSimple(Map<String, String[]> parameterMap, String parameterName)", "full_signature": "private static String getSimple(Map<String, String[]> parameterMap, String parameterName)", "class_method_signature": "DataTablesParser.getSimple(Map<String, String[]> parameterMap, String parameterName)", "testcase": false, "constructor": false}, {"identifier": "getSimpleInt", "parameters": "(Map<String, String[]> parameterMap, String parameterName)", "modifiers": "private static", "return": "int", "signature": "int getSimpleInt(Map<String, String[]> parameterMap, String parameterName)", "full_signature": "private static int getSimpleInt(Map<String, String[]> parameterMap, String parameterName)", "class_method_signature": "DataTablesParser.getSimpleInt(Map<String, String[]> parameterMap, String parameterName)", "testcase": false, "constructor": false}, {"identifier": "getSimpleBoolean", "parameters": "(Map<String, String[]> parameterMap, String parameterName)", "modifiers": "private static", "return": "boolean", "signature": "boolean getSimpleBoolean(Map<String, String[]> parameterMap, String parameterName)", "full_signature": "private static boolean getSimpleBoolean(Map<String, String[]> parameterMap, String parameterName)", "class_method_signature": "DataTablesParser.getSimpleBoolean(Map<String, String[]> parameterMap, String parameterName)", "testcase": false, "constructor": false}], "file": "frontend/sw360-portlet/src/main/java/org/eclipse/sw360/portal/common/datatables/DataTablesParser.java"}, "focal_method": {"identifier": "unprefix", "parameters": "(Map<String, String[]> parametersMap, String prefix)", "modifiers": "protected static", "return": "Map<String, String[]>", "body": "protected static Map<String, String[]> unprefix(Map<String, String[]> parametersMap, String prefix) {\n        ImmutableMap.Builder<String, String[]> builder = ImmutableMap.builder();\n        for (Map.Entry<String, String[]> entry : parametersMap.entrySet()) {\n            String key = entry.getKey();\n            if (key.startsWith(prefix)) {\n                builder.put(key.substring(prefix.length()), entry.getValue());\n            }\n        }\n\n        return builder.build();\n    }", "signature": "Map<String, String[]> unprefix(Map<String, String[]> parametersMap, String prefix)", "full_signature": "protected static Map<String, String[]> unprefix(Map<String, String[]> parametersMap, String prefix)", "class_method_signature": "DataTablesParser.unprefix(Map<String, String[]> parametersMap, String prefix)", "testcase": false, "constructor": false, "invocations": ["builder", "entrySet", "getKey", "startsWith", "put", "substring", "length", "getValue", "build"]}, "repository": {"repo_id": 43326581, "url": "https://github.com/sw360/sw360portal", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 31, "size": 8770, "license": "licensed"}}