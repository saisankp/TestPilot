{"test_class": {"identifier": "TestRetryableAspect", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RetryableAspect aspect;", "modifier": "private", "type": "RetryableAspect", "declarator": "aspect", "var_name": "aspect"}, {"original_string": "private Retryable mockAnnotation;", "modifier": "private", "type": "Retryable", "declarator": "mockAnnotation", "var_name": "mockAnnotation"}, {"original_string": "private Signature mockSignature;", "modifier": "private", "type": "Signature", "declarator": "mockSignature", "var_name": "mockSignature"}], "file": "jrugged-aspects/src/test/java/org/fishwife/jrugged/aspects/TestRetryableAspect.java"}, "test_case": {"identifier": "testCall", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCall() throws Throwable {\n        ProceedingJoinPoint mockPjp = createPjpMock(mockSignature);\n        expect(mockPjp.proceed()).andReturn(null).times(1);\n        replay(mockPjp);\n\n        aspect.call(mockPjp, mockAnnotation);\n\n        verify(mockPjp);\n        verify(mockAnnotation);\n        verify(mockSignature);\n    }", "signature": "void testCall()", "full_signature": "@Test public void testCall()", "class_method_signature": "TestRetryableAspect.testCall()", "testcase": true, "constructor": false, "invocations": ["createPjpMock", "times", "andReturn", "expect", "proceed", "replay", "call", "verify", "verify", "verify"]}, "focal_class": {"identifier": "RetryableAspect", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger =\n            LoggerFactory.getLogger(RetryableAspect.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger =\n            LoggerFactory.getLogger(RetryableAspect.class)", "var_name": "logger"}], "methods": [{"identifier": "RetryableAspect", "parameters": "()", "modifiers": "public", "return": "", "signature": " RetryableAspect()", "full_signature": "public  RetryableAspect()", "class_method_signature": "RetryableAspect.RetryableAspect()", "testcase": false, "constructor": true}, {"identifier": "call", "parameters": "(final ProceedingJoinPoint pjp, Retryable retryableAnnotation)", "modifiers": "@Around(\"@annotation(retryableAnnotation)\") public", "return": "Object", "signature": "Object call(final ProceedingJoinPoint pjp, Retryable retryableAnnotation)", "full_signature": "@Around(\"@annotation(retryableAnnotation)\") public Object call(final ProceedingJoinPoint pjp, Retryable retryableAnnotation)", "class_method_signature": "RetryableAspect.call(final ProceedingJoinPoint pjp, Retryable retryableAnnotation)", "testcase": false, "constructor": false}], "file": "jrugged-aspects/src/main/java/org/fishwife/jrugged/aspects/RetryableAspect.java"}, "focal_method": {"identifier": "call", "parameters": "(final ProceedingJoinPoint pjp, Retryable retryableAnnotation)", "modifiers": "@Around(\"@annotation(retryableAnnotation)\") public", "return": "Object", "body": "@Around(\"@annotation(retryableAnnotation)\")\n    public Object call(final ProceedingJoinPoint pjp, Retryable retryableAnnotation) throws Throwable {\n        final int maxTries = retryableAnnotation.maxTries();\n        final int retryDelayMillies = retryableAnnotation.retryDelayMillis();\n        final Class<? extends Throwable>[] retryOn = retryableAnnotation.retryOn();\n        final boolean doubleDelay = retryableAnnotation.doubleDelay();\n        final boolean throwCauseException = retryableAnnotation.throwCauseException();\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Have @Retryable method wrapping call on method {} of target object {}\",\n                    new Object[] {\n                            pjp.getSignature().getName(),\n                            pjp.getTarget()\n                    });\n        }\n\n        ServiceRetrier serviceRetrier =\n                new ServiceRetrier(retryDelayMillies, maxTries, doubleDelay, throwCauseException, retryOn);\n\n        return serviceRetrier.invoke(\n                new Callable<Object>() {\n                    public Object call() throws Exception {\n                        try {\n                            return pjp.proceed();\n                        }\n                        catch (Exception e) {\n                            throw e;\n                        }\n                        catch (Error e) {\n                            throw e;\n                        }\n                        catch (Throwable t) {\n                            throw new RuntimeException(t);\n                        }\n                    }\n                }\n        );\n    }", "signature": "Object call(final ProceedingJoinPoint pjp, Retryable retryableAnnotation)", "full_signature": "@Around(\"@annotation(retryableAnnotation)\") public Object call(final ProceedingJoinPoint pjp, Retryable retryableAnnotation)", "class_method_signature": "RetryableAspect.call(final ProceedingJoinPoint pjp, Retryable retryableAnnotation)", "testcase": false, "constructor": false, "invocations": ["maxTries", "retryDelayMillis", "retryOn", "doubleDelay", "throwCauseException", "isDebugEnabled", "debug", "getName", "getSignature", "getTarget", "invoke", "proceed"]}, "repository": {"repo_id": 6602723, "url": "https://github.com/Comcast/jrugged", "language": "Java", "is_fork": false, "fork_count": 90, "stargazer_count": 236, "size": 1302, "license": "licensed"}}