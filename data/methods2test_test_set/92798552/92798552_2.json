{"test_class": {"identifier": "PlanningLoaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "distribution/src/test/java/nl/crowndov/displaydirect/distribution/kv78/PlanningLoaderTest.java"}, "test_case": {"identifier": "testPlanningLoader", "parameters": "()", "modifiers": "@Test @Ignore public", "return": "void", "body": "@Test\n    @Ignore\n    public void testPlanningLoader() {\n        Map<String,String> result = PassengerStopAssignmentLoader.load();\n        if (result.size() > 0) {\n            StopStore.setStore(result);\n        }\n\n        new PlanningLoader().loadFiles(true);\n    }", "signature": "void testPlanningLoader()", "full_signature": "@Test @Ignore public void testPlanningLoader()", "class_method_signature": "PlanningLoaderTest.testPlanningLoader()", "testcase": true, "constructor": false, "invocations": ["load", "size", "setStore", "loadFiles"]}, "focal_class": {"identifier": "PlanningLoader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(PlanningLoader.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(PlanningLoader.class)", "var_name": "LOGGER"}, {"original_string": "private static final String KV7CALENDAR_TABLE_VALIDITY = \"LOCALSERVICEGROUPVALIDITY\";", "modifier": "private static final", "type": "String", "declarator": "KV7CALENDAR_TABLE_VALIDITY = \"LOCALSERVICEGROUPVALIDITY\"", "var_name": "KV7CALENDAR_TABLE_VALIDITY"}, {"original_string": "private final Map<String, LocalDate> localPlanningCodes = new HashMap<>();", "modifier": "private final", "type": "Map<String, LocalDate>", "declarator": "localPlanningCodes = new HashMap<>()", "var_name": "localPlanningCodes"}, {"original_string": "private List<LocalDate> interestingDates;", "modifier": "private", "type": "List<LocalDate>", "declarator": "interestingDates", "var_name": "interestingDates"}, {"original_string": "private final List<PassTime> planningRecords = new ArrayList<>();", "modifier": "private final", "type": "List<PassTime>", "declarator": "planningRecords = new ArrayList<>()", "var_name": "planningRecords"}], "methods": [{"identifier": "loadFiles", "parameters": "(boolean today)", "modifiers": "public", "return": "void", "signature": "void loadFiles(boolean today)", "full_signature": "public void loadFiles(boolean today)", "class_method_signature": "PlanningLoader.loadFiles(boolean today)", "testcase": false, "constructor": false}, {"identifier": "getPlanning", "parameters": "(Kv78Packet packet)", "modifiers": "private", "return": "void", "signature": "void getPlanning(Kv78Packet packet)", "full_signature": "private void getPlanning(Kv78Packet packet)", "class_method_signature": "PlanningLoader.getPlanning(Kv78Packet packet)", "testcase": false, "constructor": false}, {"identifier": "getCalendar", "parameters": "(Kv78Packet packet)", "modifiers": "private", "return": "void", "signature": "void getCalendar(Kv78Packet packet)", "full_signature": "private void getCalendar(Kv78Packet packet)", "class_method_signature": "PlanningLoader.getCalendar(Kv78Packet packet)", "testcase": false, "constructor": false}, {"identifier": "findTable", "parameters": "(Kv78Packet packet, String tableName)", "modifiers": "private", "return": "Optional<Kv78Table>", "signature": "Optional<Kv78Table> findTable(Kv78Packet packet, String tableName)", "full_signature": "private Optional<Kv78Table> findTable(Kv78Packet packet, String tableName)", "class_method_signature": "PlanningLoader.findTable(Kv78Packet packet, String tableName)", "testcase": false, "constructor": false}, {"identifier": "handleFiles", "parameters": "(Path p, Consumer<Kv78Packet> func)", "modifiers": "private", "return": "void", "signature": "void handleFiles(Path p, Consumer<Kv78Packet> func)", "full_signature": "private void handleFiles(Path p, Consumer<Kv78Packet> func)", "class_method_signature": "PlanningLoader.handleFiles(Path p, Consumer<Kv78Packet> func)", "testcase": false, "constructor": false}, {"identifier": "handleFile", "parameters": "(Path f, Consumer<Kv78Packet> func)", "modifiers": "private", "return": "void", "signature": "void handleFile(Path f, Consumer<Kv78Packet> func)", "full_signature": "private void handleFile(Path f, Consumer<Kv78Packet> func)", "class_method_signature": "PlanningLoader.handleFile(Path f, Consumer<Kv78Packet> func)", "testcase": false, "constructor": false}, {"identifier": "handlePacket", "parameters": "(String sourceFile, String packet, Consumer<Kv78Packet> func)", "modifiers": "private", "return": "void", "signature": "void handlePacket(String sourceFile, String packet, Consumer<Kv78Packet> func)", "full_signature": "private void handlePacket(String sourceFile, String packet, Consumer<Kv78Packet> func)", "class_method_signature": "PlanningLoader.handlePacket(String sourceFile, String packet, Consumer<Kv78Packet> func)", "testcase": false, "constructor": false}], "file": "distribution/src/main/java/nl/crowndov/displaydirect/distribution/kv78/PlanningLoader.java"}, "focal_method": {"identifier": "loadFiles", "parameters": "(boolean today)", "modifiers": "public", "return": "void", "body": "public void loadFiles(boolean today) {\n        // This seems backwards, but at 01:00, we want to download today (starting at 04:00)\n        interestingDates = Arrays.asList(LocalDate.now(), LocalDate.now().plusDays(1));\n\n        Log.send(LogCode.PLANNING_STARTED_LOADING, \"Started loading\");\n        LOGGER.info(\"Starting to load calendar files\");\n        handleFiles(Paths.get(Configuration.getKv7CalendarPath()), this::getCalendar);\n        LOGGER.info(\"Starting to load planning files\");\n        handleFiles(Paths.get(Configuration.getKv7PlanningPath()), this::getPlanning);\n        QuayDataProvider.replace(planningRecords);\n\n        LineProvider.backup();\n        DestinationProvider.backup();\n        TimingPointProvider.backup();\n\n        Log.send(LogCode.PLANNING_LOADED, String.format(\"Loaded %s records for %s and %s\", planningRecords.size(), interestingDates.get(0).toString(),\n                interestingDates.get(1).toString()));\n    }", "signature": "void loadFiles(boolean today)", "full_signature": "public void loadFiles(boolean today)", "class_method_signature": "PlanningLoader.loadFiles(boolean today)", "testcase": false, "constructor": false, "invocations": ["asList", "now", "plusDays", "now", "send", "info", "handleFiles", "get", "getKv7CalendarPath", "info", "handleFiles", "get", "getKv7PlanningPath", "replace", "backup", "backup", "backup", "send", "format", "size", "toString", "get", "toString", "get"]}, "repository": {"repo_id": 92798552, "url": "https://github.com/CROW-NDOV/displaydirect", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 6, "size": 247, "license": "licensed"}}