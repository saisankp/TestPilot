{"test_class": {"identifier": "BeanPropertyComparatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "rice-framework/krad-app-framework/src/test/java/org/kuali/rice/krad/util/BeanPropertyComparatorTest.java"}, "test_case": {"identifier": "testCompare_secondNullDates", "parameters": "()", "modifiers": "@Test /** * test the comparison of null objects */ public", "return": "void", "body": "@Test\n    /**\n     * test the comparison of null objects\n     */\n    public void testCompare_secondNullDates() throws ParseException {\n    \tList propertiesD = Arrays.asList(new String[] { \"d\" });\n    \t\n    \tDateFormat dateFormat = SimpleDateFormat.getDateInstance(SimpleDateFormat.SHORT);\n    \t\n    \tBeanPropertyComparator comparator = new BeanPropertyComparator(propertiesD);\n    \t\n    \tD lesser = new D(dateFormat.parse(\"01/02/1990\"));\n    \tD greater = new D(null);\n    \t\n    \tint result = comparator.compare(greater, lesser);\n    \tAssert.assertEquals(-1, result);\n    \t\n    \tresult = comparator.compare(lesser, greater);\n    \tAssert.assertEquals(1, result);\n    \t\n    \tresult = comparator.compare(lesser, lesser);\n    \tAssert.assertEquals(0, result);\n    \t\n    \tresult = comparator.compare(greater, greater);\n    \tAssert.assertEquals(0, result);\n    }", "signature": "void testCompare_secondNullDates()", "full_signature": "@Test /** * test the comparison of null objects */ public void testCompare_secondNullDates()", "class_method_signature": "BeanPropertyComparatorTest.testCompare_secondNullDates()", "testcase": true, "constructor": false, "invocations": ["asList", "getDateInstance", "parse", "compare", "assertEquals", "compare", "assertEquals", "compare", "assertEquals", "compare", "assertEquals"]}, "focal_class": {"identifier": "BeanPropertyComparator", "superclass": "", "interfaces": "implements Comparator, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = -2675700473766186018L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -2675700473766186018L", "var_name": "serialVersionUID"}, {"original_string": "boolean ignoreCase;", "modifier": "", "type": "boolean", "declarator": "ignoreCase", "var_name": "ignoreCase"}, {"original_string": "private List propertyNames;", "modifier": "private", "type": "List", "declarator": "propertyNames", "var_name": "propertyNames"}, {"original_string": "private Comparator stringComparator;", "modifier": "private", "type": "Comparator", "declarator": "stringComparator", "var_name": "stringComparator"}, {"original_string": "private Comparator booleanComparator;", "modifier": "private", "type": "Comparator", "declarator": "booleanComparator", "var_name": "booleanComparator"}, {"original_string": "private Comparator genericComparator;", "modifier": "private", "type": "Comparator", "declarator": "genericComparator", "var_name": "genericComparator"}], "methods": [{"identifier": "BeanPropertyComparator", "parameters": "(List propertyNames)", "modifiers": "public", "return": "", "signature": " BeanPropertyComparator(List propertyNames)", "full_signature": "public  BeanPropertyComparator(List propertyNames)", "class_method_signature": "BeanPropertyComparator.BeanPropertyComparator(List propertyNames)", "testcase": false, "constructor": true}, {"identifier": "BeanPropertyComparator", "parameters": "(List propertyNames, boolean ignoreCase)", "modifiers": "public", "return": "", "signature": " BeanPropertyComparator(List propertyNames, boolean ignoreCase)", "full_signature": "public  BeanPropertyComparator(List propertyNames, boolean ignoreCase)", "class_method_signature": "BeanPropertyComparator.BeanPropertyComparator(List propertyNames, boolean ignoreCase)", "testcase": false, "constructor": true}, {"identifier": "compare", "parameters": "(Object o1, Object o2)", "modifiers": "public", "return": "int", "signature": "int compare(Object o1, Object o2)", "full_signature": "public int compare(Object o1, Object o2)", "class_method_signature": "BeanPropertyComparator.compare(Object o1, Object o2)", "testcase": false, "constructor": false}], "file": "rice-framework/krad-app-framework/src/main/java/org/kuali/rice/krad/util/BeanPropertyComparator.java"}, "focal_method": {"identifier": "compare", "parameters": "(Object o1, Object o2)", "modifiers": "public", "return": "int", "body": "public int compare(Object o1, Object o2) {\n        int compared = 0;\n\n        try {\n            for (Iterator i = propertyNames.iterator(); (compared == 0) && i.hasNext();) {\n                String currentProperty = i.next().toString();\n\n                // choose appropriate comparator\n                Comparator currentComparator = null;\n                try {\n                    PropertyDescriptor propertyDescriptor = PropertyUtils.getPropertyDescriptor(o1, currentProperty);\n                    Class propertyClass = propertyDescriptor.getPropertyType();\n                    if (propertyClass.equals(String.class)) {\n                        currentComparator = this.stringComparator;\n                    }\n                    else if (TypeUtils.isBooleanClass(propertyClass)) {\n                        currentComparator = this.booleanComparator;\n                    }\n                    else {\n                        currentComparator = this.genericComparator;\n                    }\n                }\n                catch (NullPointerException e) {\n                    throw new BeanComparisonException(\"unable to find property '\" + o1.getClass().getName() + \".\" + currentProperty + \"'\", e);\n                }\n\n                // compare the values\n                Object value1 = PropertyUtils.getProperty(o1, currentProperty);\n                Object value2 = PropertyUtils.getProperty(o2, currentProperty);\n                /* Fix for KULRICE-5170 : BeanPropertyComparator throws exception when a null value is found in sortable non-string data type column */\n                if ( value1 == null && value2 == null)\n                    return 0;\n                else if ( value1 == null)\n                    return -1;\n                else if ( value2 == null )\n                    return 1;\n                /* End KULRICE-5170 Fix*/\n                compared = currentComparator.compare(value1, value2);\n            }\n        }\n        catch (IllegalAccessException e) {\n            throw new BeanComparisonException(\"unable to compare property values\", e);\n        }\n        catch (NoSuchMethodException e) {\n            throw new BeanComparisonException(\"unable to compare property values\", e);\n        }\n        catch (InvocationTargetException e) {\n            throw new BeanComparisonException(\"unable to compare property values\", e);\n        }\n\n        return compared;\n    }", "signature": "int compare(Object o1, Object o2)", "full_signature": "public int compare(Object o1, Object o2)", "class_method_signature": "BeanPropertyComparator.compare(Object o1, Object o2)", "testcase": false, "constructor": false, "invocations": ["iterator", "hasNext", "toString", "next", "getPropertyDescriptor", "getPropertyType", "equals", "isBooleanClass", "getName", "getClass", "getProperty", "getProperty", "compare"]}, "repository": {"repo_id": 25359676, "url": "https://github.com/kuali/rice", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 16, "size": 289156, "license": "licensed"}}