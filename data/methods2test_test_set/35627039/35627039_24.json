{"test_class": {"identifier": "StreamsShellBoltTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mocked\n    OutputCollector mockCollector;", "modifier": "@Mocked", "type": "OutputCollector", "declarator": "mockCollector", "var_name": "mockCollector"}, {"original_string": "@Mocked\n    TopologyContext mockContext;", "modifier": "@Mocked", "type": "TopologyContext", "declarator": "mockContext", "var_name": "mockContext"}], "file": "streams/runners/storm/runtime/src/test/java/com/hortonworks/streamline/streams/runtime/storm/bolt/StreamsShellBoltTest.java"}, "test_case": {"identifier": "testStreamsShellBoltTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testStreamsShellBoltTest() throws Exception {\n        setUpExpectations();\n        copyFiles(readFile(\"/splitsentence.py\") , new File(\"/tmp/splitsentence.py\"));\n        copyFiles(readFile(\"/streamline.py\"), new File(\"/tmp/streamline.py\"));\n        String command = \"python splitsentence.py\";\n        StreamsShellBolt streamsShellBolt = new StreamsShellBolt(command, 60000);\n        streamsShellBolt = streamsShellBolt.withOutputStreams(Arrays.asList(\"stream1\"));\n\n        streamsShellBolt.prepare(new HashMap(), mockContext, mockCollector);\n        streamsShellBolt.execute(getNextTuple(1));\n        new Verifications() {\n            {\n                String streamId;\n                Tuple anchor;\n                List<List<Object>> tuples = new ArrayList<>();\n                mockCollector.emit(streamId = withCapture(), anchor = withCapture(), withCapture(tuples));\n                Assert.assertEquals(\"stream\", streamId);\n                Assert.assertEquals(4, tuples.size());\n                Map<String, Object> fieldsAndValues = ((StreamlineEvent) tuples.get(0).get(0));\n                Assert.assertEquals(\"THIS\", fieldsAndValues.get(\"word\"));\n                fieldsAndValues = ((StreamlineEvent) tuples.get(1).get(0));\n                Assert.assertEquals(\"IS\", fieldsAndValues.get(\"word\"));\n                fieldsAndValues = ((StreamlineEvent) tuples.get(2).get(0));\n                Assert.assertEquals(\"RANDOM\", fieldsAndValues.get(\"word\"));\n                fieldsAndValues = ((StreamlineEvent) tuples.get(3).get(0));\n                Assert.assertEquals(\"SENTENCE1\", fieldsAndValues.get(\"word\"));\n            }\n        };\n    }", "signature": "void testStreamsShellBoltTest()", "full_signature": "@Test public void testStreamsShellBoltTest()", "class_method_signature": "StreamsShellBoltTest.testStreamsShellBoltTest()", "testcase": true, "constructor": false, "invocations": ["setUpExpectations", "copyFiles", "readFile", "copyFiles", "readFile", "withOutputStreams", "asList", "prepare", "execute", "getNextTuple", "emit", "withCapture", "withCapture", "withCapture", "assertEquals", "assertEquals", "size", "get", "get", "assertEquals", "get", "get", "get", "assertEquals", "get", "get", "get", "assertEquals", "get", "get", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "StreamsShellBolt", "superclass": "extends AbstractProcessorBolt", "interfaces": "", "fields": [{"original_string": "public static final Logger LOG = LoggerFactory.getLogger(StreamsShellBolt.class);", "modifier": "public static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(StreamsShellBolt.class)", "var_name": "LOG"}, {"original_string": "private List<String> outputStreams;", "modifier": "private", "type": "List<String>", "declarator": "outputStreams", "var_name": "outputStreams"}, {"original_string": "private String command;", "modifier": "private", "type": "String", "declarator": "command", "var_name": "command"}, {"original_string": "private Random rand;", "modifier": "private", "type": "Random", "declarator": "rand", "var_name": "rand"}, {"original_string": "private int processTimeoutInMs;", "modifier": "private", "type": "int", "declarator": "processTimeoutInMs", "var_name": "processTimeoutInMs"}, {"original_string": "Map<String, String> envMap = new HashMap<>();", "modifier": "", "type": "Map<String, String>", "declarator": "envMap = new HashMap<>()", "var_name": "envMap"}, {"original_string": "private MultiLangProcessorRuntime processorRuntime ;", "modifier": "private", "type": "MultiLangProcessorRuntime", "declarator": "processorRuntime", "var_name": "processorRuntime"}], "methods": [{"identifier": "StreamsShellBolt", "parameters": "(String command, int processTimeoutInMs)", "modifiers": "public", "return": "", "signature": " StreamsShellBolt(String command, int processTimeoutInMs)", "full_signature": "public  StreamsShellBolt(String command, int processTimeoutInMs)", "class_method_signature": "StreamsShellBolt.StreamsShellBolt(String command, int processTimeoutInMs)", "testcase": false, "constructor": true}, {"identifier": "withOutputStreams", "parameters": "(List<String> outputStreams)", "modifiers": "public", "return": "StreamsShellBolt", "signature": "StreamsShellBolt withOutputStreams(List<String> outputStreams)", "full_signature": "public StreamsShellBolt withOutputStreams(List<String> outputStreams)", "class_method_signature": "StreamsShellBolt.withOutputStreams(List<String> outputStreams)", "testcase": false, "constructor": false}, {"identifier": "withEnvMap", "parameters": "(Map<String, String> envMap)", "modifiers": "public", "return": "StreamsShellBolt", "signature": "StreamsShellBolt withEnvMap(Map<String, String> envMap)", "full_signature": "public StreamsShellBolt withEnvMap(Map<String, String> envMap)", "class_method_signature": "StreamsShellBolt.withEnvMap(Map<String, String> envMap)", "testcase": false, "constructor": false}, {"identifier": "prepare", "parameters": "(Map stormConf, TopologyContext context,\n                        final OutputCollector collector)", "modifiers": "public", "return": "void", "signature": "void prepare(Map stormConf, TopologyContext context,\n                        final OutputCollector collector)", "full_signature": "public void prepare(Map stormConf, TopologyContext context,\n                        final OutputCollector collector)", "class_method_signature": "StreamsShellBolt.prepare(Map stormConf, TopologyContext context,\n                        final OutputCollector collector)", "testcase": false, "constructor": false}, {"identifier": "getShellContext", "parameters": "(TopologyContext context)", "modifiers": "private", "return": "ShellContext", "signature": "ShellContext getShellContext(TopologyContext context)", "full_signature": "private ShellContext getShellContext(TopologyContext context)", "class_method_signature": "StreamsShellBolt.getShellContext(TopologyContext context)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(Tuple input, StreamlineEvent event)", "modifiers": "@Override protected", "return": "void", "signature": "void process(Tuple input, StreamlineEvent event)", "full_signature": "@Override protected void process(Tuple input, StreamlineEvent event)", "class_method_signature": "StreamsShellBolt.process(Tuple input, StreamlineEvent event)", "testcase": false, "constructor": false}, {"identifier": "getStreamlineEventWithStream", "parameters": "(StreamlineEvent event, Tuple tuple)", "modifiers": "private", "return": "StreamlineEvent", "signature": "StreamlineEvent getStreamlineEventWithStream(StreamlineEvent event, Tuple tuple)", "full_signature": "private StreamlineEvent getStreamlineEventWithStream(StreamlineEvent event, Tuple tuple)", "class_method_signature": "StreamsShellBolt.getStreamlineEventWithStream(StreamlineEvent event, Tuple tuple)", "testcase": false, "constructor": false}, {"identifier": "cleanup", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void cleanup()", "full_signature": "@Override public void cleanup()", "class_method_signature": "StreamsShellBolt.cleanup()", "testcase": false, "constructor": false}, {"identifier": "declareOutputFields", "parameters": "(OutputFieldsDeclarer outputFieldsDeclarer)", "modifiers": "@Override public", "return": "void", "signature": "void declareOutputFields(OutputFieldsDeclarer outputFieldsDeclarer)", "full_signature": "@Override public void declareOutputFields(OutputFieldsDeclarer outputFieldsDeclarer)", "class_method_signature": "StreamsShellBolt.declareOutputFields(OutputFieldsDeclarer outputFieldsDeclarer)", "testcase": false, "constructor": false}, {"identifier": "getComponentConfiguration", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, Object>", "signature": "Map<String, Object> getComponentConfiguration()", "full_signature": "@Override public Map<String, Object> getComponentConfiguration()", "class_method_signature": "StreamsShellBolt.getComponentConfiguration()", "testcase": false, "constructor": false}], "file": "streams/runners/storm/runtime/src/main/java/com/hortonworks/streamline/streams/runtime/storm/bolt/StreamsShellBolt.java"}, "focal_method": {"identifier": "StreamsShellBolt", "parameters": "(String command, int processTimeoutInMs)", "modifiers": "public", "return": "", "body": "public StreamsShellBolt(String command, int processTimeoutInMs) {\n        if(command == null || command.isEmpty())\n            throw new IllegalArgumentException(\"process command can not be empty\");\n        this.command = command;\n        this.processTimeoutInMs = processTimeoutInMs;\n    }", "signature": " StreamsShellBolt(String command, int processTimeoutInMs)", "full_signature": "public  StreamsShellBolt(String command, int processTimeoutInMs)", "class_method_signature": "StreamsShellBolt.StreamsShellBolt(String command, int processTimeoutInMs)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 35627039, "url": "https://github.com/hortonworks/streamline", "language": "Java", "is_fork": false, "fork_count": 94, "stargazer_count": 147, "size": 69226, "license": "licensed"}}