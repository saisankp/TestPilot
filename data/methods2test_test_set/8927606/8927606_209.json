{"test_class": {"identifier": "FilenameUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/nl/nn/adapterframework/util/FilenameUtilsTest.java"}, "test_case": {"identifier": "testEqualsForFilename1Filename2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEqualsForFilename1Filename2() throws Exception {\n        assertEquals(true, FilenameUtils.equals(\"C:\\\\a\\\\b\\\\c.txt\", \"C:\\\\a\\\\b\\\\c.txt\"));\n    }", "signature": "void testEqualsForFilename1Filename2()", "full_signature": "@Test public void testEqualsForFilename1Filename2()", "class_method_signature": "FilenameUtilsTest.testEqualsForFilename1Filename2()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "equals"]}, "focal_class": {"identifier": "FilenameUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final char EXTENSION_SEPARATOR = '.';", "modifier": "public static final", "type": "char", "declarator": "EXTENSION_SEPARATOR = '.'", "var_name": "EXTENSION_SEPARATOR"}, {"original_string": "public static final String EXTENSION_SEPARATOR_STR = Character.toString(EXTENSION_SEPARATOR);", "modifier": "public static final", "type": "String", "declarator": "EXTENSION_SEPARATOR_STR = Character.toString(EXTENSION_SEPARATOR)", "var_name": "EXTENSION_SEPARATOR_STR"}, {"original_string": "private static final char UNIX_SEPARATOR = '/';", "modifier": "private static final", "type": "char", "declarator": "UNIX_SEPARATOR = '/'", "var_name": "UNIX_SEPARATOR"}, {"original_string": "private static final char WINDOWS_SEPARATOR = '\\\\';", "modifier": "private static final", "type": "char", "declarator": "WINDOWS_SEPARATOR = '\\\\'", "var_name": "WINDOWS_SEPARATOR"}, {"original_string": "private static final char SYSTEM_SEPARATOR = File.separatorChar;", "modifier": "private static final", "type": "char", "declarator": "SYSTEM_SEPARATOR = File.separatorChar", "var_name": "SYSTEM_SEPARATOR"}, {"original_string": "private static final char OTHER_SEPARATOR;", "modifier": "private static final", "type": "char", "declarator": "OTHER_SEPARATOR", "var_name": "OTHER_SEPARATOR"}], "methods": [{"identifier": "FilenameUtils", "parameters": "()", "modifiers": "public", "return": "", "signature": " FilenameUtils()", "full_signature": "public  FilenameUtils()", "class_method_signature": "FilenameUtils.FilenameUtils()", "testcase": false, "constructor": true}, {"identifier": "isSystemWindows", "parameters": "()", "modifiers": "static", "return": "boolean", "signature": "boolean isSystemWindows()", "full_signature": "static boolean isSystemWindows()", "class_method_signature": "FilenameUtils.isSystemWindows()", "testcase": false, "constructor": false}, {"identifier": "isSeparator", "parameters": "(char ch)", "modifiers": "private static", "return": "boolean", "signature": "boolean isSeparator(char ch)", "full_signature": "private static boolean isSeparator(char ch)", "class_method_signature": "FilenameUtils.isSeparator(char ch)", "testcase": false, "constructor": false}, {"identifier": "normalize", "parameters": "(String filename)", "modifiers": "public static", "return": "String", "signature": "String normalize(String filename)", "full_signature": "public static String normalize(String filename)", "class_method_signature": "FilenameUtils.normalize(String filename)", "testcase": false, "constructor": false}, {"identifier": "normalize", "parameters": "(String filename, boolean unixSeparator)", "modifiers": "public static", "return": "String", "signature": "String normalize(String filename, boolean unixSeparator)", "full_signature": "public static String normalize(String filename, boolean unixSeparator)", "class_method_signature": "FilenameUtils.normalize(String filename, boolean unixSeparator)", "testcase": false, "constructor": false}, {"identifier": "normalizeNoEndSeparator", "parameters": "(String filename)", "modifiers": "public static", "return": "String", "signature": "String normalizeNoEndSeparator(String filename)", "full_signature": "public static String normalizeNoEndSeparator(String filename)", "class_method_signature": "FilenameUtils.normalizeNoEndSeparator(String filename)", "testcase": false, "constructor": false}, {"identifier": "normalizeNoEndSeparator", "parameters": "(String filename, boolean unixSeparator)", "modifiers": "public static", "return": "String", "signature": "String normalizeNoEndSeparator(String filename, boolean unixSeparator)", "full_signature": "public static String normalizeNoEndSeparator(String filename, boolean unixSeparator)", "class_method_signature": "FilenameUtils.normalizeNoEndSeparator(String filename, boolean unixSeparator)", "testcase": false, "constructor": false}, {"identifier": "doNormalize", "parameters": "(String filename, char separator, boolean keepSeparator)", "modifiers": "private static", "return": "String", "signature": "String doNormalize(String filename, char separator, boolean keepSeparator)", "full_signature": "private static String doNormalize(String filename, char separator, boolean keepSeparator)", "class_method_signature": "FilenameUtils.doNormalize(String filename, char separator, boolean keepSeparator)", "testcase": false, "constructor": false}, {"identifier": "concat", "parameters": "(String basePath, String fullFilenameToAdd)", "modifiers": "public static", "return": "String", "signature": "String concat(String basePath, String fullFilenameToAdd)", "full_signature": "public static String concat(String basePath, String fullFilenameToAdd)", "class_method_signature": "FilenameUtils.concat(String basePath, String fullFilenameToAdd)", "testcase": false, "constructor": false}, {"identifier": "separatorsToUnix", "parameters": "(String path)", "modifiers": "public static", "return": "String", "signature": "String separatorsToUnix(String path)", "full_signature": "public static String separatorsToUnix(String path)", "class_method_signature": "FilenameUtils.separatorsToUnix(String path)", "testcase": false, "constructor": false}, {"identifier": "separatorsToWindows", "parameters": "(String path)", "modifiers": "public static", "return": "String", "signature": "String separatorsToWindows(String path)", "full_signature": "public static String separatorsToWindows(String path)", "class_method_signature": "FilenameUtils.separatorsToWindows(String path)", "testcase": false, "constructor": false}, {"identifier": "separatorsToSystem", "parameters": "(String path)", "modifiers": "public static", "return": "String", "signature": "String separatorsToSystem(String path)", "full_signature": "public static String separatorsToSystem(String path)", "class_method_signature": "FilenameUtils.separatorsToSystem(String path)", "testcase": false, "constructor": false}, {"identifier": "getPrefixLength", "parameters": "(String filename)", "modifiers": "public static", "return": "int", "signature": "int getPrefixLength(String filename)", "full_signature": "public static int getPrefixLength(String filename)", "class_method_signature": "FilenameUtils.getPrefixLength(String filename)", "testcase": false, "constructor": false}, {"identifier": "indexOfLastSeparator", "parameters": "(String filename)", "modifiers": "public static", "return": "int", "signature": "int indexOfLastSeparator(String filename)", "full_signature": "public static int indexOfLastSeparator(String filename)", "class_method_signature": "FilenameUtils.indexOfLastSeparator(String filename)", "testcase": false, "constructor": false}, {"identifier": "indexOfExtension", "parameters": "(String filename)", "modifiers": "public static", "return": "int", "signature": "int indexOfExtension(String filename)", "full_signature": "public static int indexOfExtension(String filename)", "class_method_signature": "FilenameUtils.indexOfExtension(String filename)", "testcase": false, "constructor": false}, {"identifier": "getPrefix", "parameters": "(String filename)", "modifiers": "public static", "return": "String", "signature": "String getPrefix(String filename)", "full_signature": "public static String getPrefix(String filename)", "class_method_signature": "FilenameUtils.getPrefix(String filename)", "testcase": false, "constructor": false}, {"identifier": "getPath", "parameters": "(String filename)", "modifiers": "public static", "return": "String", "signature": "String getPath(String filename)", "full_signature": "public static String getPath(String filename)", "class_method_signature": "FilenameUtils.getPath(String filename)", "testcase": false, "constructor": false}, {"identifier": "getPathNoEndSeparator", "parameters": "(String filename)", "modifiers": "public static", "return": "String", "signature": "String getPathNoEndSeparator(String filename)", "full_signature": "public static String getPathNoEndSeparator(String filename)", "class_method_signature": "FilenameUtils.getPathNoEndSeparator(String filename)", "testcase": false, "constructor": false}, {"identifier": "doGetPath", "parameters": "(String filename, int separatorAdd)", "modifiers": "private static", "return": "String", "signature": "String doGetPath(String filename, int separatorAdd)", "full_signature": "private static String doGetPath(String filename, int separatorAdd)", "class_method_signature": "FilenameUtils.doGetPath(String filename, int separatorAdd)", "testcase": false, "constructor": false}, {"identifier": "getFullPath", "parameters": "(String filename)", "modifiers": "public static", "return": "String", "signature": "String getFullPath(String filename)", "full_signature": "public static String getFullPath(String filename)", "class_method_signature": "FilenameUtils.getFullPath(String filename)", "testcase": false, "constructor": false}, {"identifier": "getFullPathNoEndSeparator", "parameters": "(String filename)", "modifiers": "public static", "return": "String", "signature": "String getFullPathNoEndSeparator(String filename)", "full_signature": "public static String getFullPathNoEndSeparator(String filename)", "class_method_signature": "FilenameUtils.getFullPathNoEndSeparator(String filename)", "testcase": false, "constructor": false}, {"identifier": "doGetFullPath", "parameters": "(String filename, boolean includeSeparator)", "modifiers": "private static", "return": "String", "signature": "String doGetFullPath(String filename, boolean includeSeparator)", "full_signature": "private static String doGetFullPath(String filename, boolean includeSeparator)", "class_method_signature": "FilenameUtils.doGetFullPath(String filename, boolean includeSeparator)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "(String filename)", "modifiers": "public static", "return": "String", "signature": "String getName(String filename)", "full_signature": "public static String getName(String filename)", "class_method_signature": "FilenameUtils.getName(String filename)", "testcase": false, "constructor": false}, {"identifier": "getBaseName", "parameters": "(String filename)", "modifiers": "public static", "return": "String", "signature": "String getBaseName(String filename)", "full_signature": "public static String getBaseName(String filename)", "class_method_signature": "FilenameUtils.getBaseName(String filename)", "testcase": false, "constructor": false}, {"identifier": "getExtension", "parameters": "(String filename)", "modifiers": "public static", "return": "String", "signature": "String getExtension(String filename)", "full_signature": "public static String getExtension(String filename)", "class_method_signature": "FilenameUtils.getExtension(String filename)", "testcase": false, "constructor": false}, {"identifier": "removeExtension", "parameters": "(String filename)", "modifiers": "public static", "return": "String", "signature": "String removeExtension(String filename)", "full_signature": "public static String removeExtension(String filename)", "class_method_signature": "FilenameUtils.removeExtension(String filename)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(String filename1, String filename2)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals(String filename1, String filename2)", "full_signature": "public static boolean equals(String filename1, String filename2)", "class_method_signature": "FilenameUtils.equals(String filename1, String filename2)", "testcase": false, "constructor": false}, {"identifier": "equalsOnSystem", "parameters": "(String filename1, String filename2)", "modifiers": "public static", "return": "boolean", "signature": "boolean equalsOnSystem(String filename1, String filename2)", "full_signature": "public static boolean equalsOnSystem(String filename1, String filename2)", "class_method_signature": "FilenameUtils.equalsOnSystem(String filename1, String filename2)", "testcase": false, "constructor": false}, {"identifier": "equalsNormalized", "parameters": "(String filename1, String filename2)", "modifiers": "public static", "return": "boolean", "signature": "boolean equalsNormalized(String filename1, String filename2)", "full_signature": "public static boolean equalsNormalized(String filename1, String filename2)", "class_method_signature": "FilenameUtils.equalsNormalized(String filename1, String filename2)", "testcase": false, "constructor": false}, {"identifier": "equalsNormalizedOnSystem", "parameters": "(String filename1, String filename2)", "modifiers": "public static", "return": "boolean", "signature": "boolean equalsNormalizedOnSystem(String filename1, String filename2)", "full_signature": "public static boolean equalsNormalizedOnSystem(String filename1, String filename2)", "class_method_signature": "FilenameUtils.equalsNormalizedOnSystem(String filename1, String filename2)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(\n            String filename1, String filename2,\n            boolean normalized, IOCase caseSensitivity)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals(\n            String filename1, String filename2,\n            boolean normalized, IOCase caseSensitivity)", "full_signature": "public static boolean equals(\n            String filename1, String filename2,\n            boolean normalized, IOCase caseSensitivity)", "class_method_signature": "FilenameUtils.equals(\n            String filename1, String filename2,\n            boolean normalized, IOCase caseSensitivity)", "testcase": false, "constructor": false}, {"identifier": "isExtension", "parameters": "(String filename, String extension)", "modifiers": "public static", "return": "boolean", "signature": "boolean isExtension(String filename, String extension)", "full_signature": "public static boolean isExtension(String filename, String extension)", "class_method_signature": "FilenameUtils.isExtension(String filename, String extension)", "testcase": false, "constructor": false}, {"identifier": "isExtension", "parameters": "(String filename, String[] extensions)", "modifiers": "public static", "return": "boolean", "signature": "boolean isExtension(String filename, String[] extensions)", "full_signature": "public static boolean isExtension(String filename, String[] extensions)", "class_method_signature": "FilenameUtils.isExtension(String filename, String[] extensions)", "testcase": false, "constructor": false}, {"identifier": "isExtension", "parameters": "(String filename, Collection<String> extensions)", "modifiers": "public static", "return": "boolean", "signature": "boolean isExtension(String filename, Collection<String> extensions)", "full_signature": "public static boolean isExtension(String filename, Collection<String> extensions)", "class_method_signature": "FilenameUtils.isExtension(String filename, Collection<String> extensions)", "testcase": false, "constructor": false}, {"identifier": "wildcardMatch", "parameters": "(String filename, String wildcardMatcher)", "modifiers": "public static", "return": "boolean", "signature": "boolean wildcardMatch(String filename, String wildcardMatcher)", "full_signature": "public static boolean wildcardMatch(String filename, String wildcardMatcher)", "class_method_signature": "FilenameUtils.wildcardMatch(String filename, String wildcardMatcher)", "testcase": false, "constructor": false}, {"identifier": "wildcardMatchOnSystem", "parameters": "(String filename, String wildcardMatcher)", "modifiers": "public static", "return": "boolean", "signature": "boolean wildcardMatchOnSystem(String filename, String wildcardMatcher)", "full_signature": "public static boolean wildcardMatchOnSystem(String filename, String wildcardMatcher)", "class_method_signature": "FilenameUtils.wildcardMatchOnSystem(String filename, String wildcardMatcher)", "testcase": false, "constructor": false}, {"identifier": "wildcardMatch", "parameters": "(String filename, String wildcardMatcher, IOCase caseSensitivity)", "modifiers": "public static", "return": "boolean", "signature": "boolean wildcardMatch(String filename, String wildcardMatcher, IOCase caseSensitivity)", "full_signature": "public static boolean wildcardMatch(String filename, String wildcardMatcher, IOCase caseSensitivity)", "class_method_signature": "FilenameUtils.wildcardMatch(String filename, String wildcardMatcher, IOCase caseSensitivity)", "testcase": false, "constructor": false}, {"identifier": "splitOnTokens", "parameters": "(String text)", "modifiers": "static", "return": "String[]", "signature": "String[] splitOnTokens(String text)", "full_signature": "static String[] splitOnTokens(String text)", "class_method_signature": "FilenameUtils.splitOnTokens(String text)", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/util/FilenameUtils.java"}, "focal_method": {"identifier": "equals", "parameters": "(String filename1, String filename2)", "modifiers": "public static", "return": "boolean", "body": "public static boolean equals(String filename1, String filename2) {\n        return equals(filename1, filename2, false, IOCase.SENSITIVE);\n    }", "signature": "boolean equals(String filename1, String filename2)", "full_signature": "public static boolean equals(String filename1, String filename2)", "class_method_signature": "FilenameUtils.equals(String filename1, String filename2)", "testcase": false, "constructor": false, "invocations": ["equals"]}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}