{"test_class": {"identifier": "ByteBufferTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ByteBufferTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ByteBufferTest.class)", "var_name": "logger"}, {"original_string": "private static final byte[] TEST_BYTES1 = {'H','E','L','L','O',' ','W','O','R','L','D'};", "modifier": "private static final", "type": "byte[]", "declarator": "TEST_BYTES1 = {'H','E','L','L','O',' ','W','O','R','L','D'}", "var_name": "TEST_BYTES1"}, {"original_string": "private static final byte[] TEST_HELLO = {'H','E','L','L','O'};", "modifier": "private static final", "type": "byte[]", "declarator": "TEST_HELLO = {'H','E','L','L','O'}", "var_name": "TEST_HELLO"}, {"original_string": "private static final byte[] TEST_H = {'H'};", "modifier": "private static final", "type": "byte[]", "declarator": "TEST_H = {'H'}", "var_name": "TEST_H"}, {"original_string": "private static final byte[] TEST_WORLD = {'W','O','R','L','D'};", "modifier": "private static final", "type": "byte[]", "declarator": "TEST_WORLD = {'W','O','R','L','D'}", "var_name": "TEST_WORLD"}, {"original_string": "private static final byte[] TEST_W = {'W'};", "modifier": "private static final", "type": "byte[]", "declarator": "TEST_W = {'W'}", "var_name": "TEST_W"}, {"original_string": "private static final byte[] TEST_D = {'D'};", "modifier": "private static final", "type": "byte[]", "declarator": "TEST_D = {'D'}", "var_name": "TEST_D"}, {"original_string": "private static final byte[] TEST_L = {'L'};", "modifier": "private static final", "type": "byte[]", "declarator": "TEST_L = {'L'}", "var_name": "TEST_L"}, {"original_string": "private static final byte[] TEST_LL = {'L','L'};", "modifier": "private static final", "type": "byte[]", "declarator": "TEST_LL = {'L','L'}", "var_name": "TEST_LL"}, {"original_string": "private static final byte[] TEST_SPACE = {' '};", "modifier": "private static final", "type": "byte[]", "declarator": "TEST_SPACE = {' '}", "var_name": "TEST_SPACE"}, {"original_string": "private static final byte[] TEST_SPACEH = {' ','H'};", "modifier": "private static final", "type": "byte[]", "declarator": "TEST_SPACEH = {' ','H'}", "var_name": "TEST_SPACEH"}, {"original_string": "private static final byte[] TEST_SPACEW = {' ','W'};", "modifier": "private static final", "type": "byte[]", "declarator": "TEST_SPACEW = {' ','W'}", "var_name": "TEST_SPACEW"}, {"original_string": "private static final byte[] TEST_BYTES2 = {'C','A','A','A','A','A','A','A','B','A','A','A','B','B','B','B','B','B'};", "modifier": "private static final", "type": "byte[]", "declarator": "TEST_BYTES2 = {'C','A','A','A','A','A','A','A','B','A','A','A','B','B','B','B','B','B'}", "var_name": "TEST_BYTES2"}, {"original_string": "private static final byte[] TEST_AA = {'A','A'};", "modifier": "private static final", "type": "byte[]", "declarator": "TEST_AA = {'A','A'}", "var_name": "TEST_AA"}, {"original_string": "private static final byte[] TEST_AB = {'A','B'};", "modifier": "private static final", "type": "byte[]", "declarator": "TEST_AB = {'A','B'}", "var_name": "TEST_AB"}, {"original_string": "private static final byte[] TEST_BB = {'B','B'};", "modifier": "private static final", "type": "byte[]", "declarator": "TEST_BB = {'B','B'}", "var_name": "TEST_BB"}, {"original_string": "private static final byte[] TEST_C = {'C'};", "modifier": "private static final", "type": "byte[]", "declarator": "TEST_C = {'C'}", "var_name": "TEST_C"}, {"original_string": "private static final byte[] COMMA = {','};", "modifier": "private static final", "type": "byte[]", "declarator": "COMMA = {','}", "var_name": "COMMA"}], "file": "ch-commons-util/src/test/java/com/cloudhopper/commons/util/ByteBufferTest.java"}, "test_case": {"identifier": "capacity", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void capacity() throws BufferException {\n        int expCapacity = 100;\n        ByteBuffer buffer = new ByteBuffer(expCapacity);\n        int actCapacity = buffer.capacity();\n        Assert.assertEquals(expCapacity, actCapacity);\n    }", "signature": "void capacity()", "full_signature": "@Test public void capacity()", "class_method_signature": "ByteBufferTest.capacity()", "testcase": true, "constructor": false, "invocations": ["capacity", "assertEquals"]}, "focal_class": {"identifier": "ByteBuffer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static Logger logger = LoggerFactory.getLogger(ByteBuffer.class);", "modifier": "private final static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ByteBuffer.class)", "var_name": "logger"}, {"original_string": "private static final int DEFAULT_BUFFER_CAPACITY = 1023;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_BUFFER_CAPACITY = 1023", "var_name": "DEFAULT_BUFFER_CAPACITY"}, {"original_string": "private static final int MAXIMUM_INTEGER = 2147483647;", "modifier": "private static final", "type": "int", "declarator": "MAXIMUM_INTEGER = 2147483647", "var_name": "MAXIMUM_INTEGER"}, {"original_string": "private byte[] buffer;", "modifier": "private", "type": "byte[]", "declarator": "buffer", "var_name": "buffer"}, {"original_string": "private int currentReadPosition;", "modifier": "private", "type": "int", "declarator": "currentReadPosition", "var_name": "currentReadPosition"}, {"original_string": "private int currentWritePosition;", "modifier": "private", "type": "int", "declarator": "currentWritePosition", "var_name": "currentWritePosition"}, {"original_string": "private int currentBufferSize;", "modifier": "private", "type": "int", "declarator": "currentBufferSize", "var_name": "currentBufferSize"}], "methods": [{"identifier": "ByteBuffer", "parameters": "()", "modifiers": "public", "return": "", "signature": " ByteBuffer()", "full_signature": "public  ByteBuffer()", "class_method_signature": "ByteBuffer.ByteBuffer()", "testcase": false, "constructor": true}, {"identifier": "ByteBuffer", "parameters": "(int capacity)", "modifiers": "public", "return": "", "signature": " ByteBuffer(int capacity)", "full_signature": "public  ByteBuffer(int capacity)", "class_method_signature": "ByteBuffer.ByteBuffer(int capacity)", "testcase": false, "constructor": true}, {"identifier": "ByteBuffer", "parameters": "(byte[] bytes)", "modifiers": "public", "return": "", "signature": " ByteBuffer(byte[] bytes)", "full_signature": "public  ByteBuffer(byte[] bytes)", "class_method_signature": "ByteBuffer.ByteBuffer(byte[] bytes)", "testcase": false, "constructor": true}, {"identifier": "ByteBuffer", "parameters": "(byte[] bytes, int capacity)", "modifiers": "public", "return": "", "signature": " ByteBuffer(byte[] bytes, int capacity)", "full_signature": "public  ByteBuffer(byte[] bytes, int capacity)", "class_method_signature": "ByteBuffer.ByteBuffer(byte[] bytes, int capacity)", "testcase": false, "constructor": true}, {"identifier": "ByteBuffer", "parameters": "(byte[] bytes, int offset, int length)", "modifiers": "public", "return": "", "signature": " ByteBuffer(byte[] bytes, int offset, int length)", "full_signature": "public  ByteBuffer(byte[] bytes, int offset, int length)", "class_method_signature": "ByteBuffer.ByteBuffer(byte[] bytes, int offset, int length)", "testcase": false, "constructor": true}, {"identifier": "ByteBuffer", "parameters": "(byte[] bytes, int offset, int length, int capacity)", "modifiers": "public", "return": "", "signature": " ByteBuffer(byte[] bytes, int offset, int length, int capacity)", "full_signature": "public  ByteBuffer(byte[] bytes, int offset, int length, int capacity)", "class_method_signature": "ByteBuffer.ByteBuffer(byte[] bytes, int offset, int length, int capacity)", "testcase": false, "constructor": true}, {"identifier": "ByteBuffer", "parameters": "(String string0)", "modifiers": "public", "return": "", "signature": " ByteBuffer(String string0)", "full_signature": "public  ByteBuffer(String string0)", "class_method_signature": "ByteBuffer.ByteBuffer(String string0)", "testcase": false, "constructor": true}, {"identifier": "ByteBuffer", "parameters": "(String string0, int capacity)", "modifiers": "public", "return": "", "signature": " ByteBuffer(String string0, int capacity)", "full_signature": "public  ByteBuffer(String string0, int capacity)", "class_method_signature": "ByteBuffer.ByteBuffer(String string0, int capacity)", "testcase": false, "constructor": true}, {"identifier": "circularByteBufferInitializer", "parameters": "(int bufferCapacity, int bufferSize, int readPosition, int writePosition)", "modifiers": "private", "return": "void", "signature": "void circularByteBufferInitializer(int bufferCapacity, int bufferSize, int readPosition, int writePosition)", "full_signature": "private void circularByteBufferInitializer(int bufferCapacity, int bufferSize, int readPosition, int writePosition)", "class_method_signature": "ByteBuffer.circularByteBufferInitializer(int bufferCapacity, int bufferSize, int readPosition, int writePosition)", "testcase": false, "constructor": false}, {"identifier": "modularExponentation", "parameters": "(int a, int b, int n)", "modifiers": "private", "return": "int", "signature": "int modularExponentation(int a, int b, int n)", "full_signature": "private int modularExponentation(int a, int b, int n)", "class_method_signature": "ByteBuffer.modularExponentation(int a, int b, int n)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "ByteBuffer.size()", "testcase": false, "constructor": false}, {"identifier": "capacity", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int capacity()", "full_signature": "public int capacity()", "class_method_signature": "ByteBuffer.capacity()", "testcase": false, "constructor": false}, {"identifier": "free", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int free()", "full_signature": "public int free()", "class_method_signature": "ByteBuffer.free()", "testcase": false, "constructor": false}, {"identifier": "isFree", "parameters": "(int count)", "modifiers": "public", "return": "boolean", "signature": "boolean isFree(int count)", "full_signature": "public boolean isFree(int count)", "class_method_signature": "ByteBuffer.isFree(int count)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "ByteBuffer.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "isFull", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isFull()", "full_signature": "public boolean isFull()", "class_method_signature": "ByteBuffer.isFull()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "ByteBuffer.clear()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(byte b)", "modifiers": "public", "return": "void", "signature": "void add(byte b)", "full_signature": "public void add(byte b)", "class_method_signature": "ByteBuffer.add(byte b)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(byte[] bytes)", "modifiers": "public", "return": "void", "signature": "void add(byte[] bytes)", "full_signature": "public void add(byte[] bytes)", "class_method_signature": "ByteBuffer.add(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "checkOffsetLength", "parameters": "(int bytesLength, int offset, int length)", "modifiers": "static protected", "return": "void", "signature": "void checkOffsetLength(int bytesLength, int offset, int length)", "full_signature": "static protected void checkOffsetLength(int bytesLength, int offset, int length)", "class_method_signature": "ByteBuffer.checkOffsetLength(int bytesLength, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(byte[] bytes, int offset, int length)", "modifiers": "public", "return": "void", "signature": "void add(byte[] bytes, int offset, int length)", "full_signature": "public void add(byte[] bytes, int offset, int length)", "class_method_signature": "ByteBuffer.add(byte[] bytes, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(int count)", "modifiers": "public", "return": "void", "signature": "void delete(int count)", "full_signature": "public void delete(int count)", "class_method_signature": "ByteBuffer.delete(int count)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "()", "modifiers": "public", "return": "byte", "signature": "byte remove()", "full_signature": "public byte remove()", "class_method_signature": "ByteBuffer.remove()", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(int count)", "modifiers": "public", "return": "byte[]", "signature": "byte[] remove(int count)", "full_signature": "public byte[] remove(int count)", "class_method_signature": "ByteBuffer.remove(int count)", "testcase": false, "constructor": false}, {"identifier": "occurrences", "parameters": "(byte b)", "modifiers": "public", "return": "int", "signature": "int occurrences(byte b)", "full_signature": "public int occurrences(byte b)", "class_method_signature": "ByteBuffer.occurrences(byte b)", "testcase": false, "constructor": false}, {"identifier": "occurrences", "parameters": "(byte[] bytes)", "modifiers": "public", "return": "int", "signature": "int occurrences(byte[] bytes)", "full_signature": "public int occurrences(byte[] bytes)", "class_method_signature": "ByteBuffer.occurrences(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "()", "modifiers": "public", "return": "ByteBuffer", "signature": "ByteBuffer copy()", "full_signature": "public ByteBuffer copy()", "class_method_signature": "ByteBuffer.copy()", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(int offset, int length)", "modifiers": "public", "return": "ByteBuffer", "signature": "ByteBuffer copy(int offset, int length)", "full_signature": "public ByteBuffer copy(int offset, int length)", "class_method_signature": "ByteBuffer.copy(int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(int offset, int length, int capacity)", "modifiers": "public", "return": "ByteBuffer", "signature": "ByteBuffer copy(int offset, int length, int capacity)", "full_signature": "public ByteBuffer copy(int offset, int length, int capacity)", "class_method_signature": "ByteBuffer.copy(int offset, int length, int capacity)", "testcase": false, "constructor": false}, {"identifier": "getUnchecked", "parameters": "(int index)", "modifiers": "private", "return": "byte", "signature": "byte getUnchecked(int index)", "full_signature": "private byte getUnchecked(int index)", "class_method_signature": "ByteBuffer.getUnchecked(int index)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(int index)", "modifiers": "public", "return": "byte", "signature": "byte get(int index)", "full_signature": "public byte get(int index)", "class_method_signature": "ByteBuffer.get(int index)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] toArray()", "full_signature": "public byte[] toArray()", "class_method_signature": "ByteBuffer.toArray()", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(int offset, int length)", "modifiers": "public", "return": "byte[]", "signature": "byte[] toArray(int offset, int length)", "full_signature": "public byte[] toArray(int offset, int length)", "class_method_signature": "ByteBuffer.toArray(int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(int offset, int length, int capacity)", "modifiers": "public", "return": "byte[]", "signature": "byte[] toArray(int offset, int length, int capacity)", "full_signature": "public byte[] toArray(int offset, int length, int capacity)", "class_method_signature": "ByteBuffer.toArray(int offset, int length, int capacity)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(int offset, int length, byte[] targetBuffer, int targetOffset)", "modifiers": "public", "return": "void", "signature": "void toArray(int offset, int length, byte[] targetBuffer, int targetOffset)", "full_signature": "public void toArray(int offset, int length, byte[] targetBuffer, int targetOffset)", "class_method_signature": "ByteBuffer.toArray(int offset, int length, byte[] targetBuffer, int targetOffset)", "testcase": false, "constructor": false}, {"identifier": "startsWith", "parameters": "(byte[] prefix)", "modifiers": "public", "return": "boolean", "signature": "boolean startsWith(byte[] prefix)", "full_signature": "public boolean startsWith(byte[] prefix)", "class_method_signature": "ByteBuffer.startsWith(byte[] prefix)", "testcase": false, "constructor": false}, {"identifier": "endsWith", "parameters": "(byte[] prefix)", "modifiers": "public", "return": "boolean", "signature": "boolean endsWith(byte[] prefix)", "full_signature": "public boolean endsWith(byte[] prefix)", "class_method_signature": "ByteBuffer.endsWith(byte[] prefix)", "testcase": false, "constructor": false}, {"identifier": "indexOf", "parameters": "(byte[] bytes)", "modifiers": "public", "return": "int", "signature": "int indexOf(byte[] bytes)", "full_signature": "public int indexOf(byte[] bytes)", "class_method_signature": "ByteBuffer.indexOf(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "indexOf", "parameters": "(byte[] bytes, int offset)", "modifiers": "public", "return": "int", "signature": "int indexOf(byte[] bytes, int offset)", "full_signature": "public int indexOf(byte[] bytes, int offset)", "class_method_signature": "ByteBuffer.indexOf(byte[] bytes, int offset)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ByteBuffer.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "ByteBuffer.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(byte[] bytes)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(byte[] bytes)", "full_signature": "public boolean equals(byte[] bytes)", "class_method_signature": "ByteBuffer.equals(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ByteBuffer.toString()", "testcase": false, "constructor": false}, {"identifier": "toHexString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toHexString()", "full_signature": "public String toHexString()", "class_method_signature": "ByteBuffer.toHexString()", "testcase": false, "constructor": false}, {"identifier": "toHexString", "parameters": "(int offset, int length)", "modifiers": "public", "return": "String", "signature": "String toHexString(int offset, int length)", "full_signature": "public String toHexString(int offset, int length)", "class_method_signature": "ByteBuffer.toHexString(int offset, int length)", "testcase": false, "constructor": false}], "file": "ch-commons-util/src/main/java/com/cloudhopper/commons/util/ByteBuffer.java"}, "focal_method": {"identifier": "capacity", "parameters": "()", "modifiers": "public", "return": "int", "body": "public int capacity() {\n        // this is always 1 less than the actual byte[]\n        return this.buffer.length-1;\n    }", "signature": "int capacity()", "full_signature": "public int capacity()", "class_method_signature": "ByteBuffer.capacity()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}