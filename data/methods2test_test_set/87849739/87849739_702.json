{"test_class": {"identifier": "AbstractPolicyEventStrategyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Instant instant;", "modifier": "private", "type": "Instant", "declarator": "instant", "var_name": "instant"}, {"original_string": "private Policy policy;", "modifier": "private", "type": "Policy", "declarator": "policy", "var_name": "policy"}, {"original_string": "private T policyEvent;", "modifier": "private", "type": "T", "declarator": "policyEvent", "var_name": "policyEvent"}, {"original_string": "private EventStrategy<T, Policy> strategy;", "modifier": "private", "type": "EventStrategy<T, Policy>", "declarator": "strategy", "var_name": "strategy"}], "file": "services/policies/persistence/src/test/java/org/eclipse/ditto/services/policies/persistence/actors/strategies/events/AbstractPolicyEventStrategyTest.java"}, "test_case": {"identifier": "testHandleReturnsNullForNullEntity", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHandleReturnsNullForNullEntity() {\n        assertThat(getStrategyUnderTest().handle(getPolicyEvent(instant, policy), null, 0L)).isNull();\n    }", "signature": "void testHandleReturnsNullForNullEntity()", "full_signature": "@Test public void testHandleReturnsNullForNullEntity()", "class_method_signature": "AbstractPolicyEventStrategyTest.testHandleReturnsNullForNullEntity()", "testcase": true, "constructor": false, "invocations": ["isNull", "assertThat", "handle", "getStrategyUnderTest", "getPolicyEvent"]}, "focal_class": {"identifier": "AbstractPolicyEventStrategy", "superclass": "", "interfaces": "implements EventStrategy<T, Policy>", "fields": [], "methods": [{"identifier": "AbstractPolicyEventStrategy", "parameters": "()", "modifiers": "protected", "return": "", "signature": " AbstractPolicyEventStrategy()", "full_signature": "protected  AbstractPolicyEventStrategy()", "class_method_signature": "AbstractPolicyEventStrategy.AbstractPolicyEventStrategy()", "testcase": false, "constructor": true}, {"identifier": "handle", "parameters": "(final T event, @Nullable final Policy policy, final long revision)", "modifiers": "@Nullable @Override public", "return": "Policy", "signature": "Policy handle(final T event, @Nullable final Policy policy, final long revision)", "full_signature": "@Nullable @Override public Policy handle(final T event, @Nullable final Policy policy, final long revision)", "class_method_signature": "AbstractPolicyEventStrategy.handle(final T event, @Nullable final Policy policy, final long revision)", "testcase": false, "constructor": false}, {"identifier": "applyEvent", "parameters": "(final T event, final Policy policy, final PolicyBuilder policyBuilder)", "modifiers": "protected", "return": "PolicyBuilder", "signature": "PolicyBuilder applyEvent(final T event, final Policy policy, final PolicyBuilder policyBuilder)", "full_signature": "protected PolicyBuilder applyEvent(final T event, final Policy policy, final PolicyBuilder policyBuilder)", "class_method_signature": "AbstractPolicyEventStrategy.applyEvent(final T event, final Policy policy, final PolicyBuilder policyBuilder)", "testcase": false, "constructor": false}, {"identifier": "applyEvent", "parameters": "(final T event, final PolicyBuilder policyBuilder)", "modifiers": "protected", "return": "PolicyBuilder", "signature": "PolicyBuilder applyEvent(final T event, final PolicyBuilder policyBuilder)", "full_signature": "protected PolicyBuilder applyEvent(final T event, final PolicyBuilder policyBuilder)", "class_method_signature": "AbstractPolicyEventStrategy.applyEvent(final T event, final PolicyBuilder policyBuilder)", "testcase": false, "constructor": false}], "file": "services/policies/persistence/src/main/java/org/eclipse/ditto/services/policies/persistence/actors/strategies/events/AbstractPolicyEventStrategy.java"}, "focal_method": {"identifier": "handle", "parameters": "(final T event, @Nullable final Policy policy, final long revision)", "modifiers": "@Nullable @Override public", "return": "Policy", "body": "@Nullable\n    @Override\n    public Policy handle(final T event, @Nullable final Policy policy, final long revision) {\n        if (null != policy) {\n            PolicyBuilder policyBuilder = policy.toBuilder()\n                    .setRevision(revision)\n                    .setModified(event.getTimestamp().orElse(null));\n            policyBuilder = applyEvent(event, policy, policyBuilder);\n            return policyBuilder.build();\n        }\n        return null;\n    }", "signature": "Policy handle(final T event, @Nullable final Policy policy, final long revision)", "full_signature": "@Nullable @Override public Policy handle(final T event, @Nullable final Policy policy, final long revision)", "class_method_signature": "AbstractPolicyEventStrategy.handle(final T event, @Nullable final Policy policy, final long revision)", "testcase": false, "constructor": false, "invocations": ["setModified", "setRevision", "toBuilder", "orElse", "getTimestamp", "applyEvent", "build"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}