{"test_class": {"identifier": "RepairRunResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PARTITIONER = \"org.apache.cassandra.dht.RandomPartitioner\";", "modifier": "private static final", "type": "String", "declarator": "PARTITIONER = \"org.apache.cassandra.dht.RandomPartitioner\"", "var_name": "PARTITIONER"}, {"original_string": "private static final String SEED_HOST = \"127.0.0.1\";", "modifier": "private static final", "type": "String", "declarator": "SEED_HOST = \"127.0.0.1\"", "var_name": "SEED_HOST"}, {"original_string": "private static final Boolean INCREMENTAL = false;", "modifier": "private static final", "type": "Boolean", "declarator": "INCREMENTAL = false", "var_name": "INCREMENTAL"}, {"original_string": "private static final Set<String> TABLES = Sets.newHashSet(\"testTable\");", "modifier": "private static final", "type": "Set<String>", "declarator": "TABLES = Sets.newHashSet(\"testTable\")", "var_name": "TABLES"}, {"original_string": "private static final Set<String> NODES = Collections.emptySet();", "modifier": "private static final", "type": "Set<String>", "declarator": "NODES = Collections.emptySet()", "var_name": "NODES"}, {"original_string": "private static final Set<String> DATACENTERS = Collections.emptySet();", "modifier": "private static final", "type": "Set<String>", "declarator": "DATACENTERS = Collections.emptySet()", "var_name": "DATACENTERS"}, {"original_string": "private static final Map<String, String> NODES_MAP = Maps.newHashMap(\"node1\", \"127.0.0.1\");", "modifier": "private static final", "type": "Map<String, String>", "declarator": "NODES_MAP = Maps.newHashMap(\"node1\", \"127.0.0.1\")", "var_name": "NODES_MAP"}, {"original_string": "private static final Set<String> BLACKLISTED_TABLES = Collections.emptySet();", "modifier": "private static final", "type": "Set<String>", "declarator": "BLACKLISTED_TABLES = Collections.emptySet()", "var_name": "BLACKLISTED_TABLES"}, {"original_string": "private static final int REPAIR_THREAD_COUNT = 2;", "modifier": "private static final", "type": "int", "declarator": "REPAIR_THREAD_COUNT = 2", "var_name": "REPAIR_THREAD_COUNT"}, {"original_string": "private static final String OWNER = \"test\";", "modifier": "private static final", "type": "String", "declarator": "OWNER = \"test\"", "var_name": "OWNER"}, {"original_string": "private static final int THREAD_CNT = 1;", "modifier": "private static final", "type": "int", "declarator": "THREAD_CNT = 1", "var_name": "THREAD_CNT"}, {"original_string": "private static final int REPAIR_TIMEOUT_S = 60;", "modifier": "private static final", "type": "int", "declarator": "REPAIR_TIMEOUT_S = 60", "var_name": "REPAIR_TIMEOUT_S"}, {"original_string": "private static final int RETRY_DELAY_S = 10;", "modifier": "private static final", "type": "int", "declarator": "RETRY_DELAY_S = 10", "var_name": "RETRY_DELAY_S"}, {"original_string": "private static final long TIME_CREATE = 42L;", "modifier": "private static final", "type": "long", "declarator": "TIME_CREATE = 42L", "var_name": "TIME_CREATE"}, {"original_string": "private static final long TIME_START = 43L;", "modifier": "private static final", "type": "long", "declarator": "TIME_START = 43L", "var_name": "TIME_START"}, {"original_string": "private static final URI SAMPLE_URI = URI.create(\"http://reaper_host/repair_run/\");", "modifier": "private static final", "type": "URI", "declarator": "SAMPLE_URI = URI.create(\"http://reaper_host/repair_run/\")", "var_name": "SAMPLE_URI"}, {"original_string": "private static final int SEGMENT_CNT = 6;", "modifier": "private static final", "type": "int", "declarator": "SEGMENT_CNT = 6", "var_name": "SEGMENT_CNT"}, {"original_string": "private static final double REPAIR_INTENSITY = 0.5f;", "modifier": "private static final", "type": "double", "declarator": "REPAIR_INTENSITY = 0.5f", "var_name": "REPAIR_INTENSITY"}, {"original_string": "private static final RepairParallelism REPAIR_PARALLELISM = RepairParallelism.SEQUENTIAL;", "modifier": "private static final", "type": "RepairParallelism", "declarator": "REPAIR_PARALLELISM = RepairParallelism.SEQUENTIAL", "var_name": "REPAIR_PARALLELISM"}, {"original_string": "private static final String STCS = \"SizeTieredCompactionStrategy\";", "modifier": "private static final", "type": "String", "declarator": "STCS = \"SizeTieredCompactionStrategy\"", "var_name": "STCS"}, {"original_string": "private static final List<BigInteger> TOKENS = Lists.newArrayList(\n      BigInteger.valueOf(0L),\n      BigInteger.valueOf(100L),\n      BigInteger.valueOf(200L));", "modifier": "private static final", "type": "List<BigInteger>", "declarator": "TOKENS = Lists.newArrayList(\n      BigInteger.valueOf(0L),\n      BigInteger.valueOf(100L),\n      BigInteger.valueOf(200L))", "var_name": "TOKENS"}, {"original_string": "private final String clustername = \"testcluster_\" + RandomStringUtils.randomAlphabetic(6);", "modifier": "private final", "type": "String", "declarator": "clustername = \"testcluster_\" + RandomStringUtils.randomAlphabetic(6)", "var_name": "clustername"}, {"original_string": "private final String keyspace = \"testkeyspace_\" + RandomStringUtils.randomAlphabetic(6);", "modifier": "private final", "type": "String", "declarator": "keyspace = \"testkeyspace_\" + RandomStringUtils.randomAlphabetic(6)", "var_name": "keyspace"}, {"original_string": "private AppContext context;", "modifier": "private", "type": "AppContext", "declarator": "context", "var_name": "context"}, {"original_string": "private UriInfo uriInfo;", "modifier": "private", "type": "UriInfo", "declarator": "uriInfo", "var_name": "uriInfo"}, {"original_string": "private JmxProxy proxy;", "modifier": "private", "type": "JmxProxy", "declarator": "proxy", "var_name": "proxy"}], "file": "src/server/src/test/java/io/cassandrareaper/resources/RepairRunResourceTest.java"}, "test_case": {"identifier": "testAddRunMissingArgument", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testAddRunMissingArgument() {\n    RepairRunResource resource = new RepairRunResource(context);\n\n    Response response = addRepairRun(\n            resource,\n            uriInfo,\n            clustername,\n            null,\n            TABLES,\n            OWNER,\n            null,\n            SEGMENT_CNT,\n            NODES,\n            BLACKLISTED_TABLES,\n            REPAIR_THREAD_COUNT);\n\n    assertEquals(Response.Status.BAD_REQUEST.getStatusCode(), response.getStatus());\n    assertTrue(response.getEntity() instanceof String);\n  }", "signature": "void testAddRunMissingArgument()", "full_signature": "@Test public void testAddRunMissingArgument()", "class_method_signature": "RepairRunResourceTest.testAddRunMissingArgument()", "testcase": true, "constructor": false, "invocations": ["addRepairRun", "assertEquals", "getStatusCode", "getStatus", "assertTrue", "getEntity"]}, "focal_class": {"identifier": "RepairRunResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(RepairRunResource.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(RepairRunResource.class)", "var_name": "LOG"}, {"original_string": "private final AppContext context;", "modifier": "private final", "type": "AppContext", "declarator": "context", "var_name": "context"}, {"original_string": "private final RepairUnitService repairUnitService;", "modifier": "private final", "type": "RepairUnitService", "declarator": "repairUnitService", "var_name": "repairUnitService"}, {"original_string": "private final RepairRunService repairRunService;", "modifier": "private final", "type": "RepairRunService", "declarator": "repairRunService", "var_name": "repairRunService"}], "methods": [{"identifier": "RepairRunResource", "parameters": "(AppContext context)", "modifiers": "public", "return": "", "signature": " RepairRunResource(AppContext context)", "full_signature": "public  RepairRunResource(AppContext context)", "class_method_signature": "RepairRunResource.RepairRunResource(AppContext context)", "testcase": false, "constructor": true}, {"identifier": "addRepairRun", "parameters": "(\n      @Context UriInfo uriInfo,\n      @QueryParam(\"clusterName\") Optional<String> clusterName,\n      @QueryParam(\"keyspace\") Optional<String> keyspace,\n      @QueryParam(\"tables\") Optional<String> tableNamesParam,\n      @QueryParam(\"owner\") Optional<String> owner,\n      @QueryParam(\"cause\") Optional<String> cause,\n      @QueryParam(\"segmentCount\") Optional<Integer> segmentCountPerNode,\n      @QueryParam(\"repairParallelism\") Optional<String> repairParallelism,\n      @QueryParam(\"intensity\") Optional<String> intensityStr,\n      @QueryParam(\"incrementalRepair\") Optional<String> incrementalRepairStr,\n      @QueryParam(\"nodes\") Optional<String> nodesToRepairParam,\n      @QueryParam(\"datacenters\") Optional<String> datacentersToRepairParam,\n      @QueryParam(\"blacklistedTables\") Optional<String> blacklistedTableNamesParam,\n      @QueryParam(\"repairThreadCount\") Optional<Integer> repairThreadCountParam)", "modifiers": "@POST public", "return": "Response", "signature": "Response addRepairRun(\n      @Context UriInfo uriInfo,\n      @QueryParam(\"clusterName\") Optional<String> clusterName,\n      @QueryParam(\"keyspace\") Optional<String> keyspace,\n      @QueryParam(\"tables\") Optional<String> tableNamesParam,\n      @QueryParam(\"owner\") Optional<String> owner,\n      @QueryParam(\"cause\") Optional<String> cause,\n      @QueryParam(\"segmentCount\") Optional<Integer> segmentCountPerNode,\n      @QueryParam(\"repairParallelism\") Optional<String> repairParallelism,\n      @QueryParam(\"intensity\") Optional<String> intensityStr,\n      @QueryParam(\"incrementalRepair\") Optional<String> incrementalRepairStr,\n      @QueryParam(\"nodes\") Optional<String> nodesToRepairParam,\n      @QueryParam(\"datacenters\") Optional<String> datacentersToRepairParam,\n      @QueryParam(\"blacklistedTables\") Optional<String> blacklistedTableNamesParam,\n      @QueryParam(\"repairThreadCount\") Optional<Integer> repairThreadCountParam)", "full_signature": "@POST public Response addRepairRun(\n      @Context UriInfo uriInfo,\n      @QueryParam(\"clusterName\") Optional<String> clusterName,\n      @QueryParam(\"keyspace\") Optional<String> keyspace,\n      @QueryParam(\"tables\") Optional<String> tableNamesParam,\n      @QueryParam(\"owner\") Optional<String> owner,\n      @QueryParam(\"cause\") Optional<String> cause,\n      @QueryParam(\"segmentCount\") Optional<Integer> segmentCountPerNode,\n      @QueryParam(\"repairParallelism\") Optional<String> repairParallelism,\n      @QueryParam(\"intensity\") Optional<String> intensityStr,\n      @QueryParam(\"incrementalRepair\") Optional<String> incrementalRepairStr,\n      @QueryParam(\"nodes\") Optional<String> nodesToRepairParam,\n      @QueryParam(\"datacenters\") Optional<String> datacentersToRepairParam,\n      @QueryParam(\"blacklistedTables\") Optional<String> blacklistedTableNamesParam,\n      @QueryParam(\"repairThreadCount\") Optional<Integer> repairThreadCountParam)", "class_method_signature": "RepairRunResource.addRepairRun(\n      @Context UriInfo uriInfo,\n      @QueryParam(\"clusterName\") Optional<String> clusterName,\n      @QueryParam(\"keyspace\") Optional<String> keyspace,\n      @QueryParam(\"tables\") Optional<String> tableNamesParam,\n      @QueryParam(\"owner\") Optional<String> owner,\n      @QueryParam(\"cause\") Optional<String> cause,\n      @QueryParam(\"segmentCount\") Optional<Integer> segmentCountPerNode,\n      @QueryParam(\"repairParallelism\") Optional<String> repairParallelism,\n      @QueryParam(\"intensity\") Optional<String> intensityStr,\n      @QueryParam(\"incrementalRepair\") Optional<String> incrementalRepairStr,\n      @QueryParam(\"nodes\") Optional<String> nodesToRepairParam,\n      @QueryParam(\"datacenters\") Optional<String> datacentersToRepairParam,\n      @QueryParam(\"blacklistedTables\") Optional<String> blacklistedTableNamesParam,\n      @QueryParam(\"repairThreadCount\") Optional<Integer> repairThreadCountParam)", "testcase": false, "constructor": false}, {"identifier": "checkRequestForAddRepair", "parameters": "(\n      AppContext context,\n      Optional<String> clusterName,\n      Optional<String> keyspace,\n      Optional<String> tableNamesParam,\n      Optional<String> owner,\n      Optional<Integer> segmentCountPerNode,\n      Optional<String> repairParallelism,\n      Optional<String> intensityStr,\n      Optional<String> incrementalRepairStr,\n      Optional<String> nodesStr,\n      Optional<String> datacentersStr,\n      Optional<String> blacklistedTableNamesParam,\n      Optional<Integer> repairThreadCountStr)", "modifiers": "@Nullable static", "return": "Response", "signature": "Response checkRequestForAddRepair(\n      AppContext context,\n      Optional<String> clusterName,\n      Optional<String> keyspace,\n      Optional<String> tableNamesParam,\n      Optional<String> owner,\n      Optional<Integer> segmentCountPerNode,\n      Optional<String> repairParallelism,\n      Optional<String> intensityStr,\n      Optional<String> incrementalRepairStr,\n      Optional<String> nodesStr,\n      Optional<String> datacentersStr,\n      Optional<String> blacklistedTableNamesParam,\n      Optional<Integer> repairThreadCountStr)", "full_signature": "@Nullable static Response checkRequestForAddRepair(\n      AppContext context,\n      Optional<String> clusterName,\n      Optional<String> keyspace,\n      Optional<String> tableNamesParam,\n      Optional<String> owner,\n      Optional<Integer> segmentCountPerNode,\n      Optional<String> repairParallelism,\n      Optional<String> intensityStr,\n      Optional<String> incrementalRepairStr,\n      Optional<String> nodesStr,\n      Optional<String> datacentersStr,\n      Optional<String> blacklistedTableNamesParam,\n      Optional<Integer> repairThreadCountStr)", "class_method_signature": "RepairRunResource.checkRequestForAddRepair(\n      AppContext context,\n      Optional<String> clusterName,\n      Optional<String> keyspace,\n      Optional<String> tableNamesParam,\n      Optional<String> owner,\n      Optional<Integer> segmentCountPerNode,\n      Optional<String> repairParallelism,\n      Optional<String> intensityStr,\n      Optional<String> incrementalRepairStr,\n      Optional<String> nodesStr,\n      Optional<String> datacentersStr,\n      Optional<String> blacklistedTableNamesParam,\n      Optional<Integer> repairThreadCountStr)", "testcase": false, "constructor": false}, {"identifier": "modifyRunState", "parameters": "(\n      @Context UriInfo uriInfo,\n      @PathParam(\"id\") UUID repairRunId,\n      @PathParam(\"state\") Optional<String> stateStr)", "modifiers": "@PUT @Path(\"/{id}/state/{state}\") public", "return": "Response", "signature": "Response modifyRunState(\n      @Context UriInfo uriInfo,\n      @PathParam(\"id\") UUID repairRunId,\n      @PathParam(\"state\") Optional<String> stateStr)", "full_signature": "@PUT @Path(\"/{id}/state/{state}\") public Response modifyRunState(\n      @Context UriInfo uriInfo,\n      @PathParam(\"id\") UUID repairRunId,\n      @PathParam(\"state\") Optional<String> stateStr)", "class_method_signature": "RepairRunResource.modifyRunState(\n      @Context UriInfo uriInfo,\n      @PathParam(\"id\") UUID repairRunId,\n      @PathParam(\"state\") Optional<String> stateStr)", "testcase": false, "constructor": false}, {"identifier": "modifyRunIntensity", "parameters": "(\n      @Context UriInfo uriInfo,\n      @PathParam(\"id\") UUID repairRunId,\n      @PathParam(\"intensity\") Optional<String> intensityStr)", "modifiers": "@PUT @Path(\"/{id}/intensity/{intensity}\") public", "return": "Response", "signature": "Response modifyRunIntensity(\n      @Context UriInfo uriInfo,\n      @PathParam(\"id\") UUID repairRunId,\n      @PathParam(\"intensity\") Optional<String> intensityStr)", "full_signature": "@PUT @Path(\"/{id}/intensity/{intensity}\") public Response modifyRunIntensity(\n      @Context UriInfo uriInfo,\n      @PathParam(\"id\") UUID repairRunId,\n      @PathParam(\"intensity\") Optional<String> intensityStr)", "class_method_signature": "RepairRunResource.modifyRunIntensity(\n      @Context UriInfo uriInfo,\n      @PathParam(\"id\") UUID repairRunId,\n      @PathParam(\"intensity\") Optional<String> intensityStr)", "testcase": false, "constructor": false}, {"identifier": "oldModifyRunState", "parameters": "(\n      @Context UriInfo uriInfo,\n      @PathParam(\"id\") UUID repairRunId,\n      @QueryParam(\"state\") Optional<String> stateStr)", "modifiers": "@PUT @Path(\"/{id}\") @Deprecated public", "return": "Response", "signature": "Response oldModifyRunState(\n      @Context UriInfo uriInfo,\n      @PathParam(\"id\") UUID repairRunId,\n      @QueryParam(\"state\") Optional<String> stateStr)", "full_signature": "@PUT @Path(\"/{id}\") @Deprecated public Response oldModifyRunState(\n      @Context UriInfo uriInfo,\n      @PathParam(\"id\") UUID repairRunId,\n      @QueryParam(\"state\") Optional<String> stateStr)", "class_method_signature": "RepairRunResource.oldModifyRunState(\n      @Context UriInfo uriInfo,\n      @PathParam(\"id\") UUID repairRunId,\n      @QueryParam(\"state\") Optional<String> stateStr)", "testcase": false, "constructor": false}, {"identifier": "isStarting", "parameters": "(RepairRun.RunState oldState, RepairRun.RunState newState)", "modifiers": "private static", "return": "boolean", "signature": "boolean isStarting(RepairRun.RunState oldState, RepairRun.RunState newState)", "full_signature": "private static boolean isStarting(RepairRun.RunState oldState, RepairRun.RunState newState)", "class_method_signature": "RepairRunResource.isStarting(RepairRun.RunState oldState, RepairRun.RunState newState)", "testcase": false, "constructor": false}, {"identifier": "isPausing", "parameters": "(RepairRun.RunState oldState, RepairRun.RunState newState)", "modifiers": "private static", "return": "boolean", "signature": "boolean isPausing(RepairRun.RunState oldState, RepairRun.RunState newState)", "full_signature": "private static boolean isPausing(RepairRun.RunState oldState, RepairRun.RunState newState)", "class_method_signature": "RepairRunResource.isPausing(RepairRun.RunState oldState, RepairRun.RunState newState)", "testcase": false, "constructor": false}, {"identifier": "isResuming", "parameters": "(RepairRun.RunState oldState, RepairRun.RunState newState)", "modifiers": "private static", "return": "boolean", "signature": "boolean isResuming(RepairRun.RunState oldState, RepairRun.RunState newState)", "full_signature": "private static boolean isResuming(RepairRun.RunState oldState, RepairRun.RunState newState)", "class_method_signature": "RepairRunResource.isResuming(RepairRun.RunState oldState, RepairRun.RunState newState)", "testcase": false, "constructor": false}, {"identifier": "isRetrying", "parameters": "(RepairRun.RunState oldState, RepairRun.RunState newState)", "modifiers": "private static", "return": "boolean", "signature": "boolean isRetrying(RepairRun.RunState oldState, RepairRun.RunState newState)", "full_signature": "private static boolean isRetrying(RepairRun.RunState oldState, RepairRun.RunState newState)", "class_method_signature": "RepairRunResource.isRetrying(RepairRun.RunState oldState, RepairRun.RunState newState)", "testcase": false, "constructor": false}, {"identifier": "isAborting", "parameters": "(RepairRun.RunState oldState, RepairRun.RunState newState)", "modifiers": "private static", "return": "boolean", "signature": "boolean isAborting(RepairRun.RunState oldState, RepairRun.RunState newState)", "full_signature": "private static boolean isAborting(RepairRun.RunState oldState, RepairRun.RunState newState)", "class_method_signature": "RepairRunResource.isAborting(RepairRun.RunState oldState, RepairRun.RunState newState)", "testcase": false, "constructor": false}, {"identifier": "isUnitAlreadyRepairing", "parameters": "(RepairRun repairRun)", "modifiers": "private", "return": "boolean", "signature": "boolean isUnitAlreadyRepairing(RepairRun repairRun)", "full_signature": "private boolean isUnitAlreadyRepairing(RepairRun repairRun)", "class_method_signature": "RepairRunResource.isUnitAlreadyRepairing(RepairRun repairRun)", "testcase": false, "constructor": false}, {"identifier": "getSegmentAmountForRepairRun", "parameters": "(UUID repairRunId)", "modifiers": "private", "return": "int", "signature": "int getSegmentAmountForRepairRun(UUID repairRunId)", "full_signature": "private int getSegmentAmountForRepairRun(UUID repairRunId)", "class_method_signature": "RepairRunResource.getSegmentAmountForRepairRun(UUID repairRunId)", "testcase": false, "constructor": false}, {"identifier": "startRun", "parameters": "(UriInfo uriInfo, RepairRun repairRun)", "modifiers": "private", "return": "Response", "signature": "Response startRun(UriInfo uriInfo, RepairRun repairRun)", "full_signature": "private Response startRun(UriInfo uriInfo, RepairRun repairRun)", "class_method_signature": "RepairRunResource.startRun(UriInfo uriInfo, RepairRun repairRun)", "testcase": false, "constructor": false}, {"identifier": "pauseRun", "parameters": "(UriInfo uriInfo, RepairRun repairRun)", "modifiers": "private", "return": "Response", "signature": "Response pauseRun(UriInfo uriInfo, RepairRun repairRun)", "full_signature": "private Response pauseRun(UriInfo uriInfo, RepairRun repairRun)", "class_method_signature": "RepairRunResource.pauseRun(UriInfo uriInfo, RepairRun repairRun)", "testcase": false, "constructor": false}, {"identifier": "resumeRun", "parameters": "(UriInfo uriInfo, RepairRun repairRun)", "modifiers": "private", "return": "Response", "signature": "Response resumeRun(UriInfo uriInfo, RepairRun repairRun)", "full_signature": "private Response resumeRun(UriInfo uriInfo, RepairRun repairRun)", "class_method_signature": "RepairRunResource.resumeRun(UriInfo uriInfo, RepairRun repairRun)", "testcase": false, "constructor": false}, {"identifier": "abortRun", "parameters": "(UriInfo uriInfo, RepairRun repairRun)", "modifiers": "private", "return": "Response", "signature": "Response abortRun(UriInfo uriInfo, RepairRun repairRun)", "full_signature": "private Response abortRun(UriInfo uriInfo, RepairRun repairRun)", "class_method_signature": "RepairRunResource.abortRun(UriInfo uriInfo, RepairRun repairRun)", "testcase": false, "constructor": false}, {"identifier": "updateRunIntensity", "parameters": "(UriInfo uriInfo, RepairRun run, double intensity)", "modifiers": "private", "return": "Response", "signature": "Response updateRunIntensity(UriInfo uriInfo, RepairRun run, double intensity)", "full_signature": "private Response updateRunIntensity(UriInfo uriInfo, RepairRun run, double intensity)", "class_method_signature": "RepairRunResource.updateRunIntensity(UriInfo uriInfo, RepairRun run, double intensity)", "testcase": false, "constructor": false}, {"identifier": "getRepairRun", "parameters": "(\n      @PathParam(\"id\") UUID repairRunId)", "modifiers": "@GET @Path(\"/{id}\") public", "return": "Response", "signature": "Response getRepairRun(\n      @PathParam(\"id\") UUID repairRunId)", "full_signature": "@GET @Path(\"/{id}\") public Response getRepairRun(\n      @PathParam(\"id\") UUID repairRunId)", "class_method_signature": "RepairRunResource.getRepairRun(\n      @PathParam(\"id\") UUID repairRunId)", "testcase": false, "constructor": false}, {"identifier": "getRepairRunSegments", "parameters": "(@PathParam(\"id\") UUID repairRunId)", "modifiers": "@GET @Path(\"/{id}/segments\") public", "return": "Response", "signature": "Response getRepairRunSegments(@PathParam(\"id\") UUID repairRunId)", "full_signature": "@GET @Path(\"/{id}/segments\") public Response getRepairRunSegments(@PathParam(\"id\") UUID repairRunId)", "class_method_signature": "RepairRunResource.getRepairRunSegments(@PathParam(\"id\") UUID repairRunId)", "testcase": false, "constructor": false}, {"identifier": "abortRepairRunSegment", "parameters": "(@PathParam(\"id\") UUID repairRunId, @PathParam(\"segment_id\") UUID segmentId)", "modifiers": "@POST @Path(\"/{id}/segments/abort/{segment_id}\") public", "return": "Response", "signature": "Response abortRepairRunSegment(@PathParam(\"id\") UUID repairRunId, @PathParam(\"segment_id\") UUID segmentId)", "full_signature": "@POST @Path(\"/{id}/segments/abort/{segment_id}\") public Response abortRepairRunSegment(@PathParam(\"id\") UUID repairRunId, @PathParam(\"segment_id\") UUID segmentId)", "class_method_signature": "RepairRunResource.abortRepairRunSegment(@PathParam(\"id\") UUID repairRunId, @PathParam(\"segment_id\") UUID segmentId)", "testcase": false, "constructor": false}, {"identifier": "getRepairRunsForCluster", "parameters": "(\n      @PathParam(\"cluster_name\") String clusterName,\n      @QueryParam(\"limit\") Optional<Integer> limit)", "modifiers": "@GET @Path(\"/cluster/{cluster_name}\") public", "return": "Response", "signature": "Response getRepairRunsForCluster(\n      @PathParam(\"cluster_name\") String clusterName,\n      @QueryParam(\"limit\") Optional<Integer> limit)", "full_signature": "@GET @Path(\"/cluster/{cluster_name}\") public Response getRepairRunsForCluster(\n      @PathParam(\"cluster_name\") String clusterName,\n      @QueryParam(\"limit\") Optional<Integer> limit)", "class_method_signature": "RepairRunResource.getRepairRunsForCluster(\n      @PathParam(\"cluster_name\") String clusterName,\n      @QueryParam(\"limit\") Optional<Integer> limit)", "testcase": false, "constructor": false}, {"identifier": "getRepairRunStatus", "parameters": "(RepairRun repairRun)", "modifiers": "private", "return": "RepairRunStatus", "signature": "RepairRunStatus getRepairRunStatus(RepairRun repairRun)", "full_signature": "private RepairRunStatus getRepairRunStatus(RepairRun repairRun)", "class_method_signature": "RepairRunResource.getRepairRunStatus(RepairRun repairRun)", "testcase": false, "constructor": false}, {"identifier": "buildRepairRunUri", "parameters": "(UriInfo uriInfo, RepairRun repairRun)", "modifiers": "private static", "return": "URI", "signature": "URI buildRepairRunUri(UriInfo uriInfo, RepairRun repairRun)", "full_signature": "private static URI buildRepairRunUri(UriInfo uriInfo, RepairRun repairRun)", "class_method_signature": "RepairRunResource.buildRepairRunUri(UriInfo uriInfo, RepairRun repairRun)", "testcase": false, "constructor": false}, {"identifier": "listRepairRuns", "parameters": "(\n      @QueryParam(\"state\") Optional<String> state,\n      @QueryParam(\"cluster_name\") Optional<String> cluster,\n      @QueryParam(\"keyspace_name\") Optional<String> keyspace,\n      @QueryParam(\"limit\") Optional<Integer> limit)", "modifiers": "@GET public", "return": "Response", "signature": "Response listRepairRuns(\n      @QueryParam(\"state\") Optional<String> state,\n      @QueryParam(\"cluster_name\") Optional<String> cluster,\n      @QueryParam(\"keyspace_name\") Optional<String> keyspace,\n      @QueryParam(\"limit\") Optional<Integer> limit)", "full_signature": "@GET public Response listRepairRuns(\n      @QueryParam(\"state\") Optional<String> state,\n      @QueryParam(\"cluster_name\") Optional<String> cluster,\n      @QueryParam(\"keyspace_name\") Optional<String> keyspace,\n      @QueryParam(\"limit\") Optional<Integer> limit)", "class_method_signature": "RepairRunResource.listRepairRuns(\n      @QueryParam(\"state\") Optional<String> state,\n      @QueryParam(\"cluster_name\") Optional<String> cluster,\n      @QueryParam(\"keyspace_name\") Optional<String> keyspace,\n      @QueryParam(\"limit\") Optional<Integer> limit)", "testcase": false, "constructor": false}, {"identifier": "getRunStatuses", "parameters": "(Collection<RepairRun> runs, Set<String> desiredStates)", "modifiers": "private", "return": "List<RepairRunStatus>", "signature": "List<RepairRunStatus> getRunStatuses(Collection<RepairRun> runs, Set<String> desiredStates)", "full_signature": "private List<RepairRunStatus> getRunStatuses(Collection<RepairRun> runs, Set<String> desiredStates)", "class_method_signature": "RepairRunResource.getRunStatuses(Collection<RepairRun> runs, Set<String> desiredStates)", "testcase": false, "constructor": false}, {"identifier": "splitStateParam", "parameters": "(Optional<String> state)", "modifiers": "static", "return": "Set", "signature": "Set splitStateParam(Optional<String> state)", "full_signature": "static Set splitStateParam(Optional<String> state)", "class_method_signature": "RepairRunResource.splitStateParam(Optional<String> state)", "testcase": false, "constructor": false}, {"identifier": "deleteRepairRun", "parameters": "(\n      @PathParam(\"id\") UUID runId,\n      @QueryParam(\"owner\") Optional<String> owner)", "modifiers": "@DELETE @Path(\"/{id}\") public", "return": "Response", "signature": "Response deleteRepairRun(\n      @PathParam(\"id\") UUID runId,\n      @QueryParam(\"owner\") Optional<String> owner)", "full_signature": "@DELETE @Path(\"/{id}\") public Response deleteRepairRun(\n      @PathParam(\"id\") UUID runId,\n      @QueryParam(\"owner\") Optional<String> owner)", "class_method_signature": "RepairRunResource.deleteRepairRun(\n      @PathParam(\"id\") UUID runId,\n      @QueryParam(\"owner\") Optional<String> owner)", "testcase": false, "constructor": false}, {"identifier": "purgeRepairRuns", "parameters": "()", "modifiers": "@POST @Path(\"/purge\") public", "return": "Response", "signature": "Response purgeRepairRuns()", "full_signature": "@POST @Path(\"/purge\") public Response purgeRepairRuns()", "class_method_signature": "RepairRunResource.purgeRepairRuns()", "testcase": false, "constructor": false}, {"identifier": "checkRepairParallelismString", "parameters": "(String repairParallelism)", "modifiers": "private static", "return": "void", "signature": "void checkRepairParallelismString(String repairParallelism)", "full_signature": "private static void checkRepairParallelismString(String repairParallelism)", "class_method_signature": "RepairRunResource.checkRepairParallelismString(String repairParallelism)", "testcase": false, "constructor": false}, {"identifier": "createMissingArgumentResponse", "parameters": "(String argumentName)", "modifiers": "private static", "return": "Response", "signature": "Response createMissingArgumentResponse(String argumentName)", "full_signature": "private static Response createMissingArgumentResponse(String argumentName)", "class_method_signature": "RepairRunResource.createMissingArgumentResponse(String argumentName)", "testcase": false, "constructor": false}, {"identifier": "parseRunState", "parameters": "(String input)", "modifiers": "private static", "return": "RunState", "signature": "RunState parseRunState(String input)", "full_signature": "private static RunState parseRunState(String input)", "class_method_signature": "RepairRunResource.parseRunState(String input)", "testcase": false, "constructor": false}, {"identifier": "parseIntensity", "parameters": "(String input)", "modifiers": "private static", "return": "double", "signature": "double parseIntensity(String input)", "full_signature": "private static double parseIntensity(String input)", "class_method_signature": "RepairRunResource.parseIntensity(String input)", "testcase": false, "constructor": false}], "file": "src/server/src/main/java/io/cassandrareaper/resources/RepairRunResource.java"}, "focal_method": {"identifier": "addRepairRun", "parameters": "(\n      @Context UriInfo uriInfo,\n      @QueryParam(\"clusterName\") Optional<String> clusterName,\n      @QueryParam(\"keyspace\") Optional<String> keyspace,\n      @QueryParam(\"tables\") Optional<String> tableNamesParam,\n      @QueryParam(\"owner\") Optional<String> owner,\n      @QueryParam(\"cause\") Optional<String> cause,\n      @QueryParam(\"segmentCount\") Optional<Integer> segmentCountPerNode,\n      @QueryParam(\"repairParallelism\") Optional<String> repairParallelism,\n      @QueryParam(\"intensity\") Optional<String> intensityStr,\n      @QueryParam(\"incrementalRepair\") Optional<String> incrementalRepairStr,\n      @QueryParam(\"nodes\") Optional<String> nodesToRepairParam,\n      @QueryParam(\"datacenters\") Optional<String> datacentersToRepairParam,\n      @QueryParam(\"blacklistedTables\") Optional<String> blacklistedTableNamesParam,\n      @QueryParam(\"repairThreadCount\") Optional<Integer> repairThreadCountParam)", "modifiers": "@POST public", "return": "Response", "body": "@POST\n  public Response addRepairRun(\n      @Context UriInfo uriInfo,\n      @QueryParam(\"clusterName\") Optional<String> clusterName,\n      @QueryParam(\"keyspace\") Optional<String> keyspace,\n      @QueryParam(\"tables\") Optional<String> tableNamesParam,\n      @QueryParam(\"owner\") Optional<String> owner,\n      @QueryParam(\"cause\") Optional<String> cause,\n      @QueryParam(\"segmentCount\") Optional<Integer> segmentCountPerNode,\n      @QueryParam(\"repairParallelism\") Optional<String> repairParallelism,\n      @QueryParam(\"intensity\") Optional<String> intensityStr,\n      @QueryParam(\"incrementalRepair\") Optional<String> incrementalRepairStr,\n      @QueryParam(\"nodes\") Optional<String> nodesToRepairParam,\n      @QueryParam(\"datacenters\") Optional<String> datacentersToRepairParam,\n      @QueryParam(\"blacklistedTables\") Optional<String> blacklistedTableNamesParam,\n      @QueryParam(\"repairThreadCount\") Optional<Integer> repairThreadCountParam) {\n\n    try {\n      final Response possibleFailedResponse\n          = RepairRunResource.checkRequestForAddRepair(\n          context,\n          clusterName,\n          keyspace,\n          tableNamesParam,\n          owner,\n          segmentCountPerNode,\n          repairParallelism,\n          intensityStr,\n          incrementalRepairStr,\n          nodesToRepairParam,\n          datacentersToRepairParam,\n          blacklistedTableNamesParam,\n          repairThreadCountParam);\n\n      if (null != possibleFailedResponse) {\n        return possibleFailedResponse;\n      }\n\n      Double intensity;\n      if (intensityStr.isPresent()) {\n        intensity = Double.parseDouble(intensityStr.get());\n      } else {\n        intensity = context.config.getRepairIntensity();\n        LOG.debug(\"no intensity given, so using default value: {}\", intensity);\n      }\n\n      boolean incrementalRepair;\n      if (incrementalRepairStr.isPresent()) {\n        incrementalRepair = Boolean.parseBoolean(incrementalRepairStr.get());\n      } else {\n        incrementalRepair = context.config.getIncrementalRepair();\n        LOG.debug(\"no incremental repair given, so using default value: {}\", incrementalRepair);\n      }\n\n      int segments = context.config.getSegmentCountPerNode();\n      if (!incrementalRepair) {\n        if (segmentCountPerNode.isPresent()) {\n          LOG.debug(\n              \"using given segment count {} instead of configured value {}\",\n              segmentCountPerNode.get(),\n              context.config.getSegmentCount());\n          segments = segmentCountPerNode.get();\n        }\n      } else {\n        // hijack the segment count in case of incremental repair\n        segments = -1;\n      }\n\n      final Cluster cluster = context.storage.getCluster(Cluster.toSymbolicName(clusterName.get()));\n      Set<String> tableNames;\n      try {\n        tableNames = repairRunService.getTableNamesBasedOnParam(cluster, keyspace.get(), tableNamesParam);\n      } catch (IllegalArgumentException ex) {\n        LOG.error(ex.getMessage(), ex);\n        return Response.status(Response.Status.NOT_FOUND).entity(ex.getMessage()).build();\n      }\n\n      Set<String> blacklistedTableNames;\n      try {\n        blacklistedTableNames\n            = repairRunService.getTableNamesBasedOnParam(cluster, keyspace.get(), blacklistedTableNamesParam);\n      } catch (IllegalArgumentException ex) {\n        LOG.error(ex.getMessage(), ex);\n        return Response.status(Response.Status.NOT_FOUND).entity(ex.getMessage()).build();\n      }\n\n      final Set<String> nodesToRepair;\n      try {\n        nodesToRepair = repairRunService.getNodesToRepairBasedOnParam(cluster, nodesToRepairParam);\n      } catch (IllegalArgumentException ex) {\n        LOG.error(ex.getMessage(), ex);\n        return Response.status(Response.Status.NOT_FOUND).entity(ex.getMessage()).build();\n      }\n\n      final Set<String> datacentersToRepair;\n      try {\n        datacentersToRepair = RepairRunService\n            .getDatacentersToRepairBasedOnParam(cluster, datacentersToRepairParam);\n\n      } catch (IllegalArgumentException ex) {\n        LOG.error(ex.getMessage(), ex);\n        return Response.status(Response.Status.NOT_FOUND).entity(ex.getMessage()).build();\n      }\n\n\n      RepairUnit.Builder builder = RepairUnit.builder()\n              .clusterName(cluster.getName())\n              .keyspaceName(keyspace.get())\n              .columnFamilies(tableNames)\n              .incrementalRepair(incrementalRepair)\n              .nodes(nodesToRepair)\n              .datacenters(datacentersToRepair)\n              .blacklistedTables(blacklistedTableNames)\n              .repairThreadCount(repairThreadCountParam.orElse(context.config.getRepairThreadCount()));\n\n      final RepairUnit theRepairUnit = repairUnitService.getOrCreateRepairUnit(cluster, builder);\n\n      if (theRepairUnit.getIncrementalRepair() != incrementalRepair) {\n        String msg = String.format(\n            \"A repair unit %s already exist for the same cluster/keyspace/tables\"\n                + \" but with a different incremental repair value. Requested value %s | Existing value: %s\",\n            theRepairUnit.getId(),\n            incrementalRepair,\n            theRepairUnit.getIncrementalRepair());\n\n        return Response.status(Response.Status.BAD_REQUEST).entity(msg).build();\n      }\n\n      RepairParallelism parallelism = context.config.getRepairParallelism();\n      if (repairParallelism.isPresent()) {\n        LOG.debug(\n            \"using given repair parallelism {} instead of configured value {}\",\n            repairParallelism.get(),\n            context.config.getRepairParallelism());\n\n        parallelism = RepairParallelism.valueOf(repairParallelism.get().toUpperCase());\n      }\n\n      if (incrementalRepair) {\n        parallelism = RepairParallelism.PARALLEL;\n      }\n\n      final RepairRun newRepairRun = repairRunService.registerRepairRun(\n              cluster,\n              theRepairUnit,\n              cause,\n              owner.get(),\n              0,\n              segments,\n              parallelism,\n              intensity);\n\n      return Response.created(buildRepairRunUri(uriInfo, newRepairRun))\n          .entity(new RepairRunStatus(newRepairRun, theRepairUnit, 0))\n          .build();\n\n    } catch (ReaperException e) {\n      LOG.error(e.getMessage(), e);\n      return Response.serverError().entity(e.getMessage()).build();\n    }\n  }", "signature": "Response addRepairRun(\n      @Context UriInfo uriInfo,\n      @QueryParam(\"clusterName\") Optional<String> clusterName,\n      @QueryParam(\"keyspace\") Optional<String> keyspace,\n      @QueryParam(\"tables\") Optional<String> tableNamesParam,\n      @QueryParam(\"owner\") Optional<String> owner,\n      @QueryParam(\"cause\") Optional<String> cause,\n      @QueryParam(\"segmentCount\") Optional<Integer> segmentCountPerNode,\n      @QueryParam(\"repairParallelism\") Optional<String> repairParallelism,\n      @QueryParam(\"intensity\") Optional<String> intensityStr,\n      @QueryParam(\"incrementalRepair\") Optional<String> incrementalRepairStr,\n      @QueryParam(\"nodes\") Optional<String> nodesToRepairParam,\n      @QueryParam(\"datacenters\") Optional<String> datacentersToRepairParam,\n      @QueryParam(\"blacklistedTables\") Optional<String> blacklistedTableNamesParam,\n      @QueryParam(\"repairThreadCount\") Optional<Integer> repairThreadCountParam)", "full_signature": "@POST public Response addRepairRun(\n      @Context UriInfo uriInfo,\n      @QueryParam(\"clusterName\") Optional<String> clusterName,\n      @QueryParam(\"keyspace\") Optional<String> keyspace,\n      @QueryParam(\"tables\") Optional<String> tableNamesParam,\n      @QueryParam(\"owner\") Optional<String> owner,\n      @QueryParam(\"cause\") Optional<String> cause,\n      @QueryParam(\"segmentCount\") Optional<Integer> segmentCountPerNode,\n      @QueryParam(\"repairParallelism\") Optional<String> repairParallelism,\n      @QueryParam(\"intensity\") Optional<String> intensityStr,\n      @QueryParam(\"incrementalRepair\") Optional<String> incrementalRepairStr,\n      @QueryParam(\"nodes\") Optional<String> nodesToRepairParam,\n      @QueryParam(\"datacenters\") Optional<String> datacentersToRepairParam,\n      @QueryParam(\"blacklistedTables\") Optional<String> blacklistedTableNamesParam,\n      @QueryParam(\"repairThreadCount\") Optional<Integer> repairThreadCountParam)", "class_method_signature": "RepairRunResource.addRepairRun(\n      @Context UriInfo uriInfo,\n      @QueryParam(\"clusterName\") Optional<String> clusterName,\n      @QueryParam(\"keyspace\") Optional<String> keyspace,\n      @QueryParam(\"tables\") Optional<String> tableNamesParam,\n      @QueryParam(\"owner\") Optional<String> owner,\n      @QueryParam(\"cause\") Optional<String> cause,\n      @QueryParam(\"segmentCount\") Optional<Integer> segmentCountPerNode,\n      @QueryParam(\"repairParallelism\") Optional<String> repairParallelism,\n      @QueryParam(\"intensity\") Optional<String> intensityStr,\n      @QueryParam(\"incrementalRepair\") Optional<String> incrementalRepairStr,\n      @QueryParam(\"nodes\") Optional<String> nodesToRepairParam,\n      @QueryParam(\"datacenters\") Optional<String> datacentersToRepairParam,\n      @QueryParam(\"blacklistedTables\") Optional<String> blacklistedTableNamesParam,\n      @QueryParam(\"repairThreadCount\") Optional<Integer> repairThreadCountParam)", "testcase": false, "constructor": false, "invocations": ["checkRequestForAddRepair", "isPresent", "parseDouble", "get", "getRepairIntensity", "debug", "isPresent", "parseBoolean", "get", "getIncrementalRepair", "debug", "getSegmentCountPerNode", "isPresent", "debug", "get", "getSegmentCount", "get", "getCluster", "toSymbolicName", "get", "getTableNamesBasedOnParam", "get", "error", "getMessage", "build", "entity", "status", "getMessage", "getTableNamesBasedOnParam", "get", "error", "getMessage", "build", "entity", "status", "getMessage", "getNodesToRepairBasedOnParam", "error", "getMessage", "build", "entity", "status", "getMessage", "getDatacentersToRepairBasedOnParam", "error", "getMessage", "build", "entity", "status", "getMessage", "repairThreadCount", "blacklistedTables", "datacenters", "nodes", "incrementalRepair", "columnFamilies", "keyspaceName", "clusterName", "builder", "getName", "get", "orElse", "getRepairThreadCount", "getOrCreateRepairUnit", "getIncrementalRepair", "format", "getId", "getIncrementalRepair", "build", "entity", "status", "getRepairParallelism", "isPresent", "debug", "get", "getRepairParallelism", "valueOf", "toUpperCase", "get", "registerRepairRun", "get", "build", "entity", "created", "buildRepairRunUri", "error", "getMessage", "build", "entity", "serverError", "getMessage"]}, "repository": {"repo_id": 70856121, "url": "https://github.com/thelastpickle/cassandra-reaper", "language": "Java", "is_fork": false, "fork_count": 156, "stargazer_count": 353, "size": 43662, "license": "licensed"}}