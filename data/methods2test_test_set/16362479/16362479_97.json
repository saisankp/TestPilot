{"test_class": {"identifier": "DistributedEntityOwnershipServiceTest", "superclass": "extends AbstractClusterRefEntityOwnershipTest", "interfaces": "", "fields": [{"original_string": "static final String ENTITY_TYPE = \"test\";", "modifier": "static final", "type": "String", "declarator": "ENTITY_TYPE = \"test\"", "var_name": "ENTITY_TYPE"}, {"original_string": "static final String ENTITY_TYPE2 = \"test2\";", "modifier": "static final", "type": "String", "declarator": "ENTITY_TYPE2 = \"test2\"", "var_name": "ENTITY_TYPE2"}, {"original_string": "static final QName QNAME = QName.create(\"test\", \"2015-08-11\", \"foo\");", "modifier": "static final", "type": "QName", "declarator": "QNAME = QName.create(\"test\", \"2015-08-11\", \"foo\")", "var_name": "QNAME"}, {"original_string": "static int ID_COUNTER = 1;", "modifier": "static", "type": "int", "declarator": "ID_COUNTER = 1", "var_name": "ID_COUNTER"}, {"original_string": "private final String dataStoreName = \"config\" + ID_COUNTER++;", "modifier": "private final", "type": "String", "declarator": "dataStoreName = \"config\" + ID_COUNTER++", "var_name": "dataStoreName"}, {"original_string": "private AbstractDataStore dataStore;", "modifier": "private", "type": "AbstractDataStore", "declarator": "dataStore", "var_name": "dataStore"}], "file": "opendaylight/md-sal/sal-distributed-eos/src/test/java/org/opendaylight/controller/cluster/entityownership/DistributedEntityOwnershipServiceTest.java"}, "test_case": {"identifier": "testGetOwnershipState", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetOwnershipState() throws Exception {\n        DistributedEntityOwnershipService service = spy(DistributedEntityOwnershipService.start(\n            dataStore.getActorUtils(), EntityOwnerSelectionStrategyConfig.newBuilder().build()));\n\n        final Shard mockShard = Mockito.mock(Shard.class);\n        ShardDataTree shardDataTree = new ShardDataTree(mockShard, EOSTestUtils.SCHEMA_CONTEXT, TreeType.OPERATIONAL);\n\n        when(service.getLocalEntityOwnershipShardDataTree()).thenReturn(shardDataTree.getDataTree());\n\n        DOMEntity entity1 = new DOMEntity(ENTITY_TYPE, \"one\");\n        writeNode(ENTITY_OWNERS_PATH, entityOwnersWithCandidate(ENTITY_TYPE, entity1.getIdentifier(), \"member-1\"),\n                shardDataTree);\n        writeNode(ENTITY_OWNERS_PATH, entityOwnersWithEntityTypeEntry(entityTypeEntryWithEntityEntry(entity1.getType(),\n                entityEntryWithOwner(entity1.getIdentifier(), \"member-1\"))), shardDataTree);\n        verifyGetOwnershipState(service, entity1, EntityOwnershipState.IS_OWNER);\n\n        writeNode(ENTITY_OWNERS_PATH, entityOwnersWithCandidate(ENTITY_TYPE,\n                entity1.getIdentifier(), \"member-2\"), shardDataTree);\n        writeNode(entityPath(entity1.getType(), entity1.getIdentifier()),\n                entityEntryWithOwner(entity1.getIdentifier(), \"member-2\"), shardDataTree);\n        verifyGetOwnershipState(service, entity1, EntityOwnershipState.OWNED_BY_OTHER);\n\n        writeNode(entityPath(entity1.getType(), entity1.getIdentifier()), entityEntryWithOwner(entity1.getIdentifier(),\n                \"\"), shardDataTree);\n        verifyGetOwnershipState(service, entity1, EntityOwnershipState.NO_OWNER);\n\n        DOMEntity entity2 = new DOMEntity(ENTITY_TYPE, \"two\");\n        Optional<EntityOwnershipState> state = service.getOwnershipState(entity2);\n        assertFalse(\"getOwnershipState present\", state.isPresent());\n\n        writeNode(ENTITY_OWNERS_PATH, entityOwnersWithCandidate(ENTITY_TYPE, entity2.getIdentifier(), \"member-1\"),\n                shardDataTree);\n        writeNode(entityPath(entity2.getType(), entity2.getIdentifier()), ImmutableNodes.mapEntry(ENTITY_QNAME,\n                ENTITY_ID_QNAME, entity2.getIdentifier()), shardDataTree);\n        verifyGetOwnershipState(service, entity2, EntityOwnershipState.NO_OWNER);\n\n        deleteNode(candidatePath(entityPath(entity2.getType(), entity2.getIdentifier()), \"member-1\"), shardDataTree);\n        Optional<EntityOwnershipState> state2 = service.getOwnershipState(entity2);\n        assertFalse(\"getOwnershipState present\", state2.isPresent());\n        service.close();\n    }", "signature": "void testGetOwnershipState()", "full_signature": "@Test public void testGetOwnershipState()", "class_method_signature": "DistributedEntityOwnershipServiceTest.testGetOwnershipState()", "testcase": true, "constructor": false, "invocations": ["spy", "start", "getActorUtils", "build", "newBuilder", "mock", "thenReturn", "when", "getLocalEntityOwnershipShardDataTree", "getDataTree", "writeNode", "entityOwnersWithCandidate", "getIdentifier", "writeNode", "entityOwnersWithEntityTypeEntry", "entityTypeEntryWithEntityEntry", "getType", "entityEntryWithOwner", "getIdentifier", "verifyGetOwnershipState", "writeNode", "entityOwnersWithCandidate", "getIdentifier", "writeNode", "entityPath", "getType", "getIdentifier", "entityEntryWithOwner", "getIdentifier", "verifyGetOwnershipState", "writeNode", "entityPath", "getType", "getIdentifier", "entityEntryWithOwner", "getIdentifier", "verifyGetOwnershipState", "getOwnershipState", "assertFalse", "isPresent", "writeNode", "entityOwnersWithCandidate", "getIdentifier", "writeNode", "entityPath", "getType", "getIdentifier", "mapEntry", "getIdentifier", "verifyGetOwnershipState", "deleteNode", "candidatePath", "entityPath", "getType", "getIdentifier", "getOwnershipState", "assertFalse", "isPresent", "close"]}, "focal_class": {"identifier": "DistributedEntityOwnershipService", "superclass": "", "interfaces": "implements DOMEntityOwnershipService, AutoCloseable", "fields": [{"original_string": "@VisibleForTesting\n    static final String ENTITY_OWNERSHIP_SHARD_NAME = \"entity-ownership\";", "modifier": "@VisibleForTesting\n    static final", "type": "String", "declarator": "ENTITY_OWNERSHIP_SHARD_NAME = \"entity-ownership\"", "var_name": "ENTITY_OWNERSHIP_SHARD_NAME"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DistributedEntityOwnershipService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DistributedEntityOwnershipService.class)", "var_name": "LOG"}, {"original_string": "private static final Timeout MESSAGE_TIMEOUT = new Timeout(1, TimeUnit.MINUTES);", "modifier": "private static final", "type": "Timeout", "declarator": "MESSAGE_TIMEOUT = new Timeout(1, TimeUnit.MINUTES)", "var_name": "MESSAGE_TIMEOUT"}, {"original_string": "private final ConcurrentMap<DOMEntity, DOMEntity> registeredEntities = new ConcurrentHashMap<>();", "modifier": "private final", "type": "ConcurrentMap<DOMEntity, DOMEntity>", "declarator": "registeredEntities = new ConcurrentHashMap<>()", "var_name": "registeredEntities"}, {"original_string": "private final ActorUtils context;", "modifier": "private final", "type": "ActorUtils", "declarator": "context", "var_name": "context"}, {"original_string": "private volatile ActorRef localEntityOwnershipShard;", "modifier": "private volatile", "type": "ActorRef", "declarator": "localEntityOwnershipShard", "var_name": "localEntityOwnershipShard"}, {"original_string": "private volatile DataTree localEntityOwnershipShardDataTree;", "modifier": "private volatile", "type": "DataTree", "declarator": "localEntityOwnershipShardDataTree", "var_name": "localEntityOwnershipShardDataTree"}], "methods": [{"identifier": "DistributedEntityOwnershipService", "parameters": "(final ActorUtils context)", "modifiers": "", "return": "", "signature": " DistributedEntityOwnershipService(final ActorUtils context)", "full_signature": "  DistributedEntityOwnershipService(final ActorUtils context)", "class_method_signature": "DistributedEntityOwnershipService.DistributedEntityOwnershipService(final ActorUtils context)", "testcase": false, "constructor": true}, {"identifier": "start", "parameters": "(final ActorUtils context,\n            final EntityOwnerSelectionStrategyConfig strategyConfig)", "modifiers": "public static", "return": "DistributedEntityOwnershipService", "signature": "DistributedEntityOwnershipService start(final ActorUtils context,\n            final EntityOwnerSelectionStrategyConfig strategyConfig)", "full_signature": "public static DistributedEntityOwnershipService start(final ActorUtils context,\n            final EntityOwnerSelectionStrategyConfig strategyConfig)", "class_method_signature": "DistributedEntityOwnershipService.start(final ActorUtils context,\n            final EntityOwnerSelectionStrategyConfig strategyConfig)", "testcase": false, "constructor": false}, {"identifier": "executeEntityOwnershipShardOperation", "parameters": "(final ActorRef shardActor, final Object message)", "modifiers": "private", "return": "void", "signature": "void executeEntityOwnershipShardOperation(final ActorRef shardActor, final Object message)", "full_signature": "private void executeEntityOwnershipShardOperation(final ActorRef shardActor, final Object message)", "class_method_signature": "DistributedEntityOwnershipService.executeEntityOwnershipShardOperation(final ActorRef shardActor, final Object message)", "testcase": false, "constructor": false}, {"identifier": "executeLocalEntityOwnershipShardOperation", "parameters": "(final Object message)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void executeLocalEntityOwnershipShardOperation(final Object message)", "full_signature": "@VisibleForTesting void executeLocalEntityOwnershipShardOperation(final Object message)", "class_method_signature": "DistributedEntityOwnershipService.executeLocalEntityOwnershipShardOperation(final Object message)", "testcase": false, "constructor": false}, {"identifier": "registerCandidate", "parameters": "(final DOMEntity entity)", "modifiers": "@Override public", "return": "DOMEntityOwnershipCandidateRegistration", "signature": "DOMEntityOwnershipCandidateRegistration registerCandidate(final DOMEntity entity)", "full_signature": "@Override public DOMEntityOwnershipCandidateRegistration registerCandidate(final DOMEntity entity)", "class_method_signature": "DistributedEntityOwnershipService.registerCandidate(final DOMEntity entity)", "testcase": false, "constructor": false}, {"identifier": "unregisterCandidate", "parameters": "(final DOMEntity entity)", "modifiers": "", "return": "void", "signature": "void unregisterCandidate(final DOMEntity entity)", "full_signature": " void unregisterCandidate(final DOMEntity entity)", "class_method_signature": "DistributedEntityOwnershipService.unregisterCandidate(final DOMEntity entity)", "testcase": false, "constructor": false}, {"identifier": "registerListener", "parameters": "(final String entityType,\n            final DOMEntityOwnershipListener listener)", "modifiers": "@Override public", "return": "DOMEntityOwnershipListenerRegistration", "signature": "DOMEntityOwnershipListenerRegistration registerListener(final String entityType,\n            final DOMEntityOwnershipListener listener)", "full_signature": "@Override public DOMEntityOwnershipListenerRegistration registerListener(final String entityType,\n            final DOMEntityOwnershipListener listener)", "class_method_signature": "DistributedEntityOwnershipService.registerListener(final String entityType,\n            final DOMEntityOwnershipListener listener)", "testcase": false, "constructor": false}, {"identifier": "getOwnershipState", "parameters": "(final DOMEntity forEntity)", "modifiers": "@Override public", "return": "Optional<EntityOwnershipState>", "signature": "Optional<EntityOwnershipState> getOwnershipState(final DOMEntity forEntity)", "full_signature": "@Override public Optional<EntityOwnershipState> getOwnershipState(final DOMEntity forEntity)", "class_method_signature": "DistributedEntityOwnershipService.getOwnershipState(final DOMEntity forEntity)", "testcase": false, "constructor": false}, {"identifier": "isCandidateRegistered", "parameters": "(final DOMEntity entity)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCandidateRegistered(final DOMEntity entity)", "full_signature": "@Override public boolean isCandidateRegistered(final DOMEntity entity)", "class_method_signature": "DistributedEntityOwnershipService.isCandidateRegistered(final DOMEntity entity)", "testcase": false, "constructor": false}, {"identifier": "getLocalEntityOwnershipShardDataTree", "parameters": "()", "modifiers": "@VisibleForTesting @SuppressWarnings(\"checkstyle:IllegalCatch\") @SuppressFBWarnings(value = \"REC_CATCH_EXCEPTION\", justification = \"Akka's Await.result() API contract\")", "return": "DataTree", "signature": "DataTree getLocalEntityOwnershipShardDataTree()", "full_signature": "@VisibleForTesting @SuppressWarnings(\"checkstyle:IllegalCatch\") @SuppressFBWarnings(value = \"REC_CATCH_EXCEPTION\", justification = \"Akka's Await.result() API contract\") DataTree getLocalEntityOwnershipShardDataTree()", "class_method_signature": "DistributedEntityOwnershipService.getLocalEntityOwnershipShardDataTree()", "testcase": false, "constructor": false}, {"identifier": "unregisterListener", "parameters": "(final String entityType, final DOMEntityOwnershipListener listener)", "modifiers": "", "return": "void", "signature": "void unregisterListener(final String entityType, final DOMEntityOwnershipListener listener)", "full_signature": " void unregisterListener(final String entityType, final DOMEntityOwnershipListener listener)", "class_method_signature": "DistributedEntityOwnershipService.unregisterListener(final String entityType, final DOMEntityOwnershipListener listener)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "DistributedEntityOwnershipService.close()", "testcase": false, "constructor": false}, {"identifier": "newShardBuilder", "parameters": "(final ActorUtils context,\n            final EntityOwnerSelectionStrategyConfig strategyConfig)", "modifiers": "private static", "return": "EntityOwnershipShard.Builder", "signature": "EntityOwnershipShard.Builder newShardBuilder(final ActorUtils context,\n            final EntityOwnerSelectionStrategyConfig strategyConfig)", "full_signature": "private static EntityOwnershipShard.Builder newShardBuilder(final ActorUtils context,\n            final EntityOwnerSelectionStrategyConfig strategyConfig)", "class_method_signature": "DistributedEntityOwnershipService.newShardBuilder(final ActorUtils context,\n            final EntityOwnerSelectionStrategyConfig strategyConfig)", "testcase": false, "constructor": false}, {"identifier": "getLocalEntityOwnershipShard", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "ActorRef", "signature": "ActorRef getLocalEntityOwnershipShard()", "full_signature": "@VisibleForTesting ActorRef getLocalEntityOwnershipShard()", "class_method_signature": "DistributedEntityOwnershipService.getLocalEntityOwnershipShard()", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-eos/src/main/java/org/opendaylight/controller/cluster/entityownership/DistributedEntityOwnershipService.java"}, "focal_method": {"identifier": "getOwnershipState", "parameters": "(final DOMEntity forEntity)", "modifiers": "@Override public", "return": "Optional<EntityOwnershipState>", "body": "@Override\n    public Optional<EntityOwnershipState> getOwnershipState(final DOMEntity forEntity) {\n        requireNonNull(forEntity, \"forEntity cannot be null\");\n\n        DataTree dataTree = getLocalEntityOwnershipShardDataTree();\n        if (dataTree == null) {\n            return Optional.empty();\n        }\n\n        Optional<NormalizedNode<?, ?>> entityNode = dataTree.takeSnapshot().readNode(\n                entityPath(forEntity.getType(), forEntity.getIdentifier()));\n        if (!entityNode.isPresent()) {\n            return Optional.empty();\n        }\n\n        // Check if there are any candidates, if there are none we do not really have ownership state\n        final MapEntryNode entity = (MapEntryNode) entityNode.get();\n        final Optional<DataContainerChild<? extends PathArgument, ?>> optionalCandidates =\n                entity.getChild(CANDIDATE_NODE_ID);\n        final boolean hasCandidates = optionalCandidates.isPresent()\n                && ((MapNode) optionalCandidates.get()).getValue().size() > 0;\n        if (!hasCandidates) {\n            return Optional.empty();\n        }\n\n        MemberName localMemberName = context.getCurrentMemberName();\n        Optional<DataContainerChild<? extends PathArgument, ?>> ownerLeaf = entity.getChild(ENTITY_OWNER_NODE_ID);\n        String owner = ownerLeaf.isPresent() ? ownerLeaf.get().getValue().toString() : null;\n        boolean hasOwner = !Strings.isNullOrEmpty(owner);\n        boolean isOwner = hasOwner && localMemberName.getName().equals(owner);\n\n        return Optional.of(EntityOwnershipState.from(isOwner, hasOwner));\n    }", "signature": "Optional<EntityOwnershipState> getOwnershipState(final DOMEntity forEntity)", "full_signature": "@Override public Optional<EntityOwnershipState> getOwnershipState(final DOMEntity forEntity)", "class_method_signature": "DistributedEntityOwnershipService.getOwnershipState(final DOMEntity forEntity)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "getLocalEntityOwnershipShardDataTree", "empty", "readNode", "takeSnapshot", "entityPath", "getType", "getIdentifier", "isPresent", "empty", "get", "getChild", "isPresent", "size", "getValue", "get", "empty", "getCurrentMemberName", "getChild", "isPresent", "toString", "getValue", "get", "isNullOrEmpty", "equals", "getName", "of", "from"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}