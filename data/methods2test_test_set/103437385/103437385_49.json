{"test_class": {"identifier": "MavenRepositoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "kie-soup-maven-utils/kie-soup-maven-integration/src/test/java/org/appformer/maven/integration/MavenRepositoryTest.java"}, "test_case": {"identifier": "testProxy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProxy() {\n        MavenRepositoryMock.setCustomSettingsFileName(\"settings_custom.xml\");\n        final MavenRepository repo = new MavenRepositoryMock(Aether.getAether());\n        final Collection<RemoteRepository> remoteRepos = repo.getRemoteRepositoriesForRequest();\n        final Set<RemoteRepository> testServerRepos = remoteRepos\n                .stream()\n                .filter(r -> r.getId().equals(\"test-server\"))\n                .collect(Collectors.toSet());\n        assertEquals(2, testServerRepos.size());\n        for (RemoteRepository remoteRepository : testServerRepos) {\n            assertNotNull(remoteRepository.getProxy());\n        }\n    }", "signature": "void testProxy()", "full_signature": "@Test public void testProxy()", "class_method_signature": "MavenRepositoryTest.testProxy()", "testcase": true, "constructor": false, "invocations": ["setCustomSettingsFileName", "getAether", "getRemoteRepositoriesForRequest", "collect", "filter", "stream", "equals", "getId", "toSet", "assertEquals", "size", "assertNotNull", "getProxy"]}, "focal_class": {"identifier": "MavenRepository", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SESSION_CHECKS = \"updateCheckManager.checks\";", "modifier": "private static final", "type": "String", "declarator": "SESSION_CHECKS = \"updateCheckManager.checks\"", "var_name": "SESSION_CHECKS"}, {"original_string": "private static final Logger log = LoggerFactory.getLogger( MavenRepository.class );", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger( MavenRepository.class )", "var_name": "log"}, {"original_string": "public static MavenRepository defaultMavenRepository;", "modifier": "public static", "type": "MavenRepository", "declarator": "defaultMavenRepository", "var_name": "defaultMavenRepository"}, {"original_string": "private final Aether aether;", "modifier": "private final", "type": "Aether", "declarator": "aether", "var_name": "aether"}, {"original_string": "private final Collection<RemoteRepository> remoteRepositoriesForRequest;", "modifier": "private final", "type": "Collection<RemoteRepository>", "declarator": "remoteRepositoriesForRequest", "var_name": "remoteRepositoriesForRequest"}], "methods": [{"identifier": "MavenRepository", "parameters": "( Aether aether )", "modifiers": "protected", "return": "", "signature": " MavenRepository( Aether aether )", "full_signature": "protected  MavenRepository( Aether aether )", "class_method_signature": "MavenRepository.MavenRepository( Aether aether )", "testcase": false, "constructor": true}, {"identifier": "getMavenRepositoryConfiguration", "parameters": "()", "modifiers": "protected", "return": "MavenRepositoryConfiguration", "signature": "MavenRepositoryConfiguration getMavenRepositoryConfiguration()", "full_signature": "protected MavenRepositoryConfiguration getMavenRepositoryConfiguration()", "class_method_signature": "MavenRepository.getMavenRepositoryConfiguration()", "testcase": false, "constructor": false}, {"identifier": "getRemoteRepositoriesForRequest", "parameters": "()", "modifiers": "", "return": "Collection<RemoteRepository>", "signature": "Collection<RemoteRepository> getRemoteRepositoriesForRequest()", "full_signature": " Collection<RemoteRepository> getRemoteRepositoriesForRequest()", "class_method_signature": "MavenRepository.getRemoteRepositoriesForRequest()", "testcase": false, "constructor": false}, {"identifier": "getMavenRepository", "parameters": "()", "modifiers": "public static synchronized", "return": "MavenRepository", "signature": "MavenRepository getMavenRepository()", "full_signature": "public static synchronized MavenRepository getMavenRepository()", "class_method_signature": "MavenRepository.getMavenRepository()", "testcase": false, "constructor": false}, {"identifier": "initRemoteRepositoriesForRequest", "parameters": "()", "modifiers": "private", "return": "Collection<RemoteRepository>", "signature": "Collection<RemoteRepository> initRemoteRepositoriesForRequest()", "full_signature": "private Collection<RemoteRepository> initRemoteRepositoriesForRequest()", "class_method_signature": "MavenRepository.initRemoteRepositoriesForRequest()", "testcase": false, "constructor": false}, {"identifier": "getMavenRepository", "parameters": "( MavenProject mavenProject )", "modifiers": "public static", "return": "MavenRepository", "signature": "MavenRepository getMavenRepository( MavenProject mavenProject )", "full_signature": "public static MavenRepository getMavenRepository( MavenProject mavenProject )", "class_method_signature": "MavenRepository.getMavenRepository( MavenProject mavenProject )", "testcase": false, "constructor": false}, {"identifier": "getArtifactDependecies", "parameters": "( String artifactName )", "modifiers": "public", "return": "List<DependencyDescriptor>", "signature": "List<DependencyDescriptor> getArtifactDependecies( String artifactName )", "full_signature": "public List<DependencyDescriptor> getArtifactDependecies( String artifactName )", "class_method_signature": "MavenRepository.getArtifactDependecies( String artifactName )", "testcase": false, "constructor": false}, {"identifier": "resolveArtifact", "parameters": "( AFReleaseId releaseId )", "modifiers": "public", "return": "Artifact", "signature": "Artifact resolveArtifact( AFReleaseId releaseId )", "full_signature": "public Artifact resolveArtifact( AFReleaseId releaseId )", "class_method_signature": "MavenRepository.resolveArtifact( AFReleaseId releaseId )", "testcase": false, "constructor": false}, {"identifier": "resolveArtifact", "parameters": "( String artifactName )", "modifiers": "public", "return": "Artifact", "signature": "Artifact resolveArtifact( String artifactName )", "full_signature": "public Artifact resolveArtifact( String artifactName )", "class_method_signature": "MavenRepository.resolveArtifact( String artifactName )", "testcase": false, "constructor": false}, {"identifier": "resolveArtifact", "parameters": "( String artifactName,\n                                     boolean logUnresolvedArtifact )", "modifiers": "public", "return": "Artifact", "signature": "Artifact resolveArtifact( String artifactName,\n                                     boolean logUnresolvedArtifact )", "full_signature": "public Artifact resolveArtifact( String artifactName,\n                                     boolean logUnresolvedArtifact )", "class_method_signature": "MavenRepository.resolveArtifact( String artifactName,\n                                     boolean logUnresolvedArtifact )", "testcase": false, "constructor": false}, {"identifier": "resolveVersion", "parameters": "( String artifactName )", "modifiers": "public", "return": "Version", "signature": "Version resolveVersion( String artifactName )", "full_signature": "public Version resolveVersion( String artifactName )", "class_method_signature": "MavenRepository.resolveVersion( String artifactName )", "testcase": false, "constructor": false}, {"identifier": "getRemoteRepositoryFromDistributionManagement", "parameters": "( File pomfile )", "modifiers": "protected", "return": "RemoteRepository", "signature": "RemoteRepository getRemoteRepositoryFromDistributionManagement( File pomfile )", "full_signature": "protected RemoteRepository getRemoteRepositoryFromDistributionManagement( File pomfile )", "class_method_signature": "MavenRepository.getRemoteRepositoryFromDistributionManagement( File pomfile )", "testcase": false, "constructor": false}, {"identifier": "deployArtifact", "parameters": "( RemoteRepository repository,\n                                AFReleaseId releaseId,\n                                File jar,\n                                File pomfile )", "modifiers": "public", "return": "void", "signature": "void deployArtifact( RemoteRepository repository,\n                                AFReleaseId releaseId,\n                                File jar,\n                                File pomfile )", "full_signature": "public void deployArtifact( RemoteRepository repository,\n                                AFReleaseId releaseId,\n                                File jar,\n                                File pomfile )", "class_method_signature": "MavenRepository.deployArtifact( RemoteRepository repository,\n                                AFReleaseId releaseId,\n                                File jar,\n                                File pomfile )", "testcase": false, "constructor": false}, {"identifier": "bytesToFile", "parameters": "(AFReleaseId releaseId, byte[] bytes, String extension )", "modifiers": "protected", "return": "File", "signature": "File bytesToFile(AFReleaseId releaseId, byte[] bytes, String extension )", "full_signature": "protected File bytesToFile(AFReleaseId releaseId, byte[] bytes, String extension )", "class_method_signature": "MavenRepository.bytesToFile(AFReleaseId releaseId, byte[] bytes, String extension )", "testcase": false, "constructor": false}, {"identifier": "installArtifact", "parameters": "( AFReleaseId releaseId,\n                                 byte[] jarContent,\n                                 byte[] pomContent )", "modifiers": "public", "return": "void", "signature": "void installArtifact( AFReleaseId releaseId,\n                                 byte[] jarContent,\n                                 byte[] pomContent )", "full_signature": "public void installArtifact( AFReleaseId releaseId,\n                                 byte[] jarContent,\n                                 byte[] pomContent )", "class_method_signature": "MavenRepository.installArtifact( AFReleaseId releaseId,\n                                 byte[] jarContent,\n                                 byte[] pomContent )", "testcase": false, "constructor": false}, {"identifier": "installArtifact", "parameters": "( AFReleaseId releaseId,\n                                 File jar,\n                                 File pomfile )", "modifiers": "public", "return": "void", "signature": "void installArtifact( AFReleaseId releaseId,\n                                 File jar,\n                                 File pomfile )", "full_signature": "public void installArtifact( AFReleaseId releaseId,\n                                 File jar,\n                                 File pomfile )", "class_method_signature": "MavenRepository.installArtifact( AFReleaseId releaseId,\n                                 File jar,\n                                 File pomfile )", "testcase": false, "constructor": false}, {"identifier": "deployPomArtifact", "parameters": "( String groupId,\n                                   String artifactId,\n                                   String version,\n                                   File pomfile )", "modifiers": "public", "return": "void", "signature": "void deployPomArtifact( String groupId,\n                                   String artifactId,\n                                   String version,\n                                   File pomfile )", "full_signature": "public void deployPomArtifact( String groupId,\n                                   String artifactId,\n                                   String version,\n                                   File pomfile )", "class_method_signature": "MavenRepository.deployPomArtifact( String groupId,\n                                   String artifactId,\n                                   String version,\n                                   File pomfile )", "testcase": false, "constructor": false}, {"identifier": "toFileName", "parameters": "( AFReleaseId releaseId,\n                                     String classifier )", "modifiers": "public static", "return": "String", "signature": "String toFileName( AFReleaseId releaseId,\n                                     String classifier )", "full_signature": "public static String toFileName( AFReleaseId releaseId,\n                                     String classifier )", "class_method_signature": "MavenRepository.toFileName( AFReleaseId releaseId,\n                                     String classifier )", "testcase": false, "constructor": false}, {"identifier": "removeLocalArtifact", "parameters": "(AFReleaseId releaseId)", "modifiers": "public", "return": "void", "signature": "void removeLocalArtifact(AFReleaseId releaseId)", "full_signature": "public void removeLocalArtifact(AFReleaseId releaseId)", "class_method_signature": "MavenRepository.removeLocalArtifact(AFReleaseId releaseId)", "testcase": false, "constructor": false}], "file": "kie-soup-maven-utils/kie-soup-maven-integration/src/main/java/org/appformer/maven/integration/MavenRepository.java"}, "focal_method": {"identifier": "getRemoteRepositoriesForRequest", "parameters": "()", "modifiers": "", "return": "Collection<RemoteRepository>", "body": "Collection<RemoteRepository> getRemoteRepositoriesForRequest() {\n        return remoteRepositoriesForRequest;\n    }", "signature": "Collection<RemoteRepository> getRemoteRepositoriesForRequest()", "full_signature": " Collection<RemoteRepository> getRemoteRepositoriesForRequest()", "class_method_signature": "MavenRepository.getRemoteRepositoriesForRequest()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 103437385, "url": "https://github.com/kiegroup/kie-soup", "stars": 11, "created": "9/13/2017 6:41:37 PM +00:00", "updates": "2020-01-21T13:07:53+00:00", "fork": "False", "license": "licensed"}}