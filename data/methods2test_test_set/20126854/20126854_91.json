{"test_class": {"identifier": "BsDiffTest", "superclass": "", "interfaces": "", "fields": [], "file": "feya/libraries/archive_diff/diff.generator/src/test/java/com/google/archivepatcher/generator/bsdiff/BsDiffTest.java"}, "test_case": {"identifier": "searchForMatch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void searchForMatch() throws Exception {\n    String[] testCases = {\n      \"a\",\n      \"aa\",\n      \"az\",\n      \"za\",\n      \"aaaaa\",\n      \"CACAO\",\n      \"banana\",\n      \"tobeornottobe\",\n      \"the quick brown fox jumps over the lazy dog.\",\n      \"elephantelephantelephantelephantelephant\",\n      \"011010011001011010010110011010010\",\n    };\n    for (String testCase : testCases) {\n      int size = testCase.length();\n      byte[] bytes = testCase.getBytes(StandardCharsets.US_ASCII);\n      RandomAccessObject input = new RandomAccessObject.RandomAccessByteArrayObject(bytes);\n      RandomAccessObject suffixArray =\n          new DivSuffixSorter(new RandomAccessObjectFactory.RandomAccessByteArrayObjectFactory())\n              .suffixSort(input);\n\n      // Test exact matches for every non-empty substring.\n      for (int lo = 0; lo < size; ++lo) {\n        for (int hi = lo + 1; hi <= size; ++hi) {\n          byte[] query = Arrays.copyOfRange(bytes, lo, hi);\n          int querySize = query.length;\n          Assert.assertEquals(querySize, hi - lo);\n          RandomAccessObject queryBuf = new RandomAccessObject.RandomAccessByteArrayObject(query);\n\n          BsDiff.Match match = BsDiff.searchForMatch(suffixArray, input, queryBuf, 0, 0, size);\n\n          Assert.assertEquals(querySize, match.length);\n          Assert.assertTrue(match.start >= 0);\n          Assert.assertTrue(match.start <= size - match.length);\n          byte[] suffix = Arrays.copyOfRange(bytes, match.start, match.start + match.length);\n          Assert.assertArrayEquals(query, suffix);\n        }\n      }\n    }\n  }", "signature": "void searchForMatch()", "full_signature": "@Test public void searchForMatch()", "class_method_signature": "BsDiffTest.searchForMatch()", "testcase": true, "constructor": false, "invocations": ["length", "getBytes", "suffixSort", "copyOfRange", "assertEquals", "searchForMatch", "assertEquals", "assertTrue", "assertTrue", "copyOfRange", "assertArrayEquals"]}, "focal_class": {"identifier": "BsDiff", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "lengthOfMatch", "parameters": "(\n      final RandomAccessObject oldData,\n      final int oldStart,\n      final RandomAccessObject newData,\n      final int newStart)", "modifiers": "static", "return": "int", "signature": "int lengthOfMatch(\n      final RandomAccessObject oldData,\n      final int oldStart,\n      final RandomAccessObject newData,\n      final int newStart)", "full_signature": "static int lengthOfMatch(\n      final RandomAccessObject oldData,\n      final int oldStart,\n      final RandomAccessObject newData,\n      final int newStart)", "class_method_signature": "BsDiff.lengthOfMatch(\n      final RandomAccessObject oldData,\n      final int oldStart,\n      final RandomAccessObject newData,\n      final int newStart)", "testcase": false, "constructor": false}, {"identifier": "searchForMatchBaseCase", "parameters": "(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "modifiers": "static", "return": "Match", "signature": "Match searchForMatchBaseCase(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "full_signature": "static Match searchForMatchBaseCase(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "class_method_signature": "BsDiff.searchForMatchBaseCase(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "testcase": false, "constructor": false}, {"identifier": "searchForMatch", "parameters": "(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "modifiers": "static", "return": "Match", "signature": "Match searchForMatch(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "full_signature": "static Match searchForMatch(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "class_method_signature": "BsDiff.searchForMatch(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "testcase": false, "constructor": false}], "file": "feya/libraries/archive_diff/diff.generator/src/main/java/com/google/archivepatcher/generator/bsdiff/BsDiff.java"}, "focal_method": {"identifier": "searchForMatch", "parameters": "(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "modifiers": "static", "return": "Match", "body": "static Match searchForMatch(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)\n      throws IOException {\n    if (oldDataRangeStartB - oldDataRangeStartA < 2) {\n      return searchForMatchBaseCase(\n          groupArray, oldData, newData, newStart, oldDataRangeStartA, oldDataRangeStartB);\n    }\n\n    // Cut range in half and search again\n    final int rangeLength = oldDataRangeStartB - oldDataRangeStartA;\n    final int pivot = oldDataRangeStartA + (rangeLength / 2);\n    groupArray.seekToIntAligned(pivot);\n    final int groupArrayPivot = groupArray.readInt();\n    if (BsUtil.lexicographicalCompare(\n            oldData,\n            groupArrayPivot,\n            (int) oldData.length() - groupArrayPivot,\n            newData,\n            newStart,\n            (int) newData.length() - newStart)\n        < 0) {\n      return searchForMatch(groupArray, oldData, newData, newStart, pivot, oldDataRangeStartB);\n    }\n    return searchForMatch(groupArray, oldData, newData, newStart, oldDataRangeStartA, pivot);\n  }", "signature": "Match searchForMatch(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "full_signature": "static Match searchForMatch(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "class_method_signature": "BsDiff.searchForMatch(\n      final RandomAccessObject groupArray,\n      final RandomAccessObject oldData,\n      final RandomAccessObject newData,\n      final int newStart,\n      final int oldDataRangeStartA,\n      final int oldDataRangeStartB)", "testcase": false, "constructor": false, "invocations": ["searchForMatchBaseCase", "seekToIntAligned", "readInt", "lexicographicalCompare", "length", "length", "searchForMatch", "searchForMatch"]}, "repository": {"repo_id": 20126854, "url": "https://github.com/kaedea/Feya", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 12, "size": 7798, "license": "licensed"}}