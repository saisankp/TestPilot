{"test_class": {"identifier": "MainTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Method sqrt;", "modifier": "private static", "type": "Method", "declarator": "sqrt", "var_name": "sqrt"}, {"original_string": "private static Class<?> mainClass;", "modifier": "private static", "type": "Class<?>", "declarator": "mainClass", "var_name": "mainClass"}], "file": "section540/lesson12772/step53596/src/MainTest.java"}, "test_case": {"identifier": "sqrtException", "parameters": "()", "modifiers": "@Test(timeout = 8000) public", "return": "void", "body": "@Test(timeout = 8000)\n    public void sqrtException() throws Exception {\n        try {\n            Main.sqrt(-100);\n        } catch (IllegalArgumentException e) {\n            String message = \"Main.sqrt(-100);\\nIllegalArgumentException.getMessage()\";\n            assertEquals(message, \"Expected non-negative number, got -100.0\", e.getMessage());\n            return;\n        }\n\n        fail(\"Main.sqrt(-100). Expected IllegalArgumentException\");\n    }", "signature": "void sqrtException()", "full_signature": "@Test(timeout = 8000) public void sqrtException()", "class_method_signature": "MainTest.sqrtException()", "testcase": true, "constructor": false, "invocations": ["sqrt", "assertEquals", "getMessage", "fail"]}, "focal_class": {"identifier": "Main", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "sqrt", "parameters": "(double x)", "modifiers": "public static", "return": "double", "signature": "double sqrt(double x)", "full_signature": "public static double sqrt(double x)", "class_method_signature": "Main.sqrt(double x)", "testcase": false, "constructor": false}], "file": "section540/lesson12772/step53596/src/Main.java"}, "focal_method": {"identifier": "sqrt", "parameters": "(double x)", "modifiers": "public static", "return": "double", "body": "public static double sqrt(double x) {\n        return 0; // your implementation here\n    }", "signature": "double sqrt(double x)", "full_signature": "public static double sqrt(double x)", "class_method_signature": "Main.sqrt(double x)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 69660791, "url": "https://github.com/meanmail/java_base", "language": "Java", "is_fork": false, "fork_count": 17, "stargazer_count": 24, "size": 432, "license": "licensed"}}