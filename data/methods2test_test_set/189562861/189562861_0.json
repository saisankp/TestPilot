{"test_class": {"identifier": "ConditionRouterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private URL SCRIPT_URL = URL.valueOf(\"condition://0.0.0.0/com.foo.BarService\");", "modifier": "private", "type": "URL", "declarator": "SCRIPT_URL = URL.valueOf(\"condition://0.0.0.0/com.foo.BarService\")", "var_name": "SCRIPT_URL"}], "file": "dubbo-cluster/src/test/java/com/alibaba/dubbo/rpc/cluster/router/condition/ConditionRouterTest.java"}, "test_case": {"identifier": "testRoute_matchWhen", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRoute_matchWhen() {\n        Invocation invocation = new RpcInvocation();\n\n        Router router = new ConditionRouterFactory().getRouter(getRouteUrl(\" => host = 1.2.3.4\"));\n        boolean matchWhen = ((ConditionRouter) router).matchWhen(URL.valueOf(\"consumer://1.1.1.1/com.foo.BarService\"),\n                invocation);\n        Assert.assertEquals(true, matchWhen);\n\n        router = new ConditionRouterFactory()\n                .getRouter(getRouteUrl(\"host = 2.2.2.2,1.1.1.1,3.3.3.3 => host = 1.2.3.4\"));\n        matchWhen = ((ConditionRouter) router).matchWhen(URL.valueOf(\"consumer://1.1.1.1/com.foo.BarService\"),\n                invocation);\n        Assert.assertEquals(true, matchWhen);\n\n        router = new ConditionRouterFactory()\n                .getRouter(getRouteUrl(\"host = 2.2.2.2,1.1.1.1,3.3.3.3 & host !=1.1.1.1 => host = 1.2.3.4\"));\n        matchWhen = ((ConditionRouter) router).matchWhen(URL.valueOf(\"consumer://1.1.1.1/com.foo.BarService\"),\n                invocation);\n        Assert.assertEquals(false, matchWhen);\n\n        router = new ConditionRouterFactory()\n                .getRouter(getRouteUrl(\"host !=4.4.4.4 & host = 2.2.2.2,1.1.1.1,3.3.3.3 => host = 1.2.3.4\"));\n        matchWhen = ((ConditionRouter) router).matchWhen(URL.valueOf(\"consumer://1.1.1.1/com.foo.BarService\"),\n                invocation);\n        Assert.assertEquals(true, matchWhen);\n\n        router = new ConditionRouterFactory()\n                .getRouter(getRouteUrl(\"host !=4.4.4.* & host = 2.2.2.2,1.1.1.1,3.3.3.3 => host = 1.2.3.4\"));\n        matchWhen = ((ConditionRouter) router).matchWhen(URL.valueOf(\"consumer://1.1.1.1/com.foo.BarService\"),\n                invocation);\n        Assert.assertEquals(true, matchWhen);\n\n        router = new ConditionRouterFactory()\n                .getRouter(getRouteUrl(\"host = 2.2.2.2,1.1.1.*,3.3.3.3 & host != 1.1.1.1 => host = 1.2.3.4\"));\n        matchWhen = ((ConditionRouter) router).matchWhen(URL.valueOf(\"consumer://1.1.1.1/com.foo.BarService\"),\n                invocation);\n        Assert.assertEquals(false, matchWhen);\n\n        router = new ConditionRouterFactory()\n                .getRouter(getRouteUrl(\"host = 2.2.2.2,1.1.1.*,3.3.3.3 & host != 1.1.1.2 => host = 1.2.3.4\"));\n        matchWhen = ((ConditionRouter) router).matchWhen(URL.valueOf(\"consumer://1.1.1.1/com.foo.BarService\"),\n                invocation);\n        Assert.assertEquals(true, matchWhen);\n    }", "signature": "void testRoute_matchWhen()", "full_signature": "@Test public void testRoute_matchWhen()", "class_method_signature": "ConditionRouterTest.testRoute_matchWhen()", "testcase": true, "constructor": false, "invocations": ["getRouter", "getRouteUrl", "matchWhen", "valueOf", "assertEquals", "getRouter", "getRouteUrl", "matchWhen", "valueOf", "assertEquals", "getRouter", "getRouteUrl", "matchWhen", "valueOf", "assertEquals", "getRouter", "getRouteUrl", "matchWhen", "valueOf", "assertEquals", "getRouter", "getRouteUrl", "matchWhen", "valueOf", "assertEquals", "getRouter", "getRouteUrl", "matchWhen", "valueOf", "assertEquals", "getRouter", "getRouteUrl", "matchWhen", "valueOf", "assertEquals"]}, "focal_class": {"identifier": "ConditionRouter", "superclass": "extends AbstractRouter", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ConditionRouter.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ConditionRouter.class)", "var_name": "logger"}, {"original_string": "private static final int DEFAULT_PRIORITY = 2;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_PRIORITY = 2", "var_name": "DEFAULT_PRIORITY"}, {"original_string": "private static Pattern ROUTE_PATTERN = Pattern.compile(\"([&!=,]*)\\\\s*([^&!=,\\\\s]+)\");", "modifier": "private static", "type": "Pattern", "declarator": "ROUTE_PATTERN = Pattern.compile(\"([&!=,]*)\\\\s*([^&!=,\\\\s]+)\")", "var_name": "ROUTE_PATTERN"}, {"original_string": "private final boolean force;", "modifier": "private final", "type": "boolean", "declarator": "force", "var_name": "force"}, {"original_string": "private final Map<String, MatchPair> whenCondition;", "modifier": "private final", "type": "Map<String, MatchPair>", "declarator": "whenCondition", "var_name": "whenCondition"}, {"original_string": "private final Map<String, MatchPair> thenCondition;", "modifier": "private final", "type": "Map<String, MatchPair>", "declarator": "thenCondition", "var_name": "thenCondition"}], "methods": [{"identifier": "ConditionRouter", "parameters": "(URL url)", "modifiers": "public", "return": "", "signature": " ConditionRouter(URL url)", "full_signature": "public  ConditionRouter(URL url)", "class_method_signature": "ConditionRouter.ConditionRouter(URL url)", "testcase": false, "constructor": true}, {"identifier": "parseRule", "parameters": "(String rule)", "modifiers": "private static", "return": "Map<String, MatchPair>", "signature": "Map<String, MatchPair> parseRule(String rule)", "full_signature": "private static Map<String, MatchPair> parseRule(String rule)", "class_method_signature": "ConditionRouter.parseRule(String rule)", "testcase": false, "constructor": false}, {"identifier": "route", "parameters": "(List<Invoker<T>> invokers, URL url, Invocation invocation)", "modifiers": "@Override public", "return": "List<Invoker<T>>", "signature": "List<Invoker<T>> route(List<Invoker<T>> invokers, URL url, Invocation invocation)", "full_signature": "@Override public List<Invoker<T>> route(List<Invoker<T>> invokers, URL url, Invocation invocation)", "class_method_signature": "ConditionRouter.route(List<Invoker<T>> invokers, URL url, Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "getUrl", "parameters": "()", "modifiers": "@Override public", "return": "URL", "signature": "URL getUrl()", "full_signature": "@Override public URL getUrl()", "class_method_signature": "ConditionRouter.getUrl()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(Router o)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(Router o)", "full_signature": "@Override public int compareTo(Router o)", "class_method_signature": "ConditionRouter.compareTo(Router o)", "testcase": false, "constructor": false}, {"identifier": "matchWhen", "parameters": "(URL url, Invocation invocation)", "modifiers": "", "return": "boolean", "signature": "boolean matchWhen(URL url, Invocation invocation)", "full_signature": " boolean matchWhen(URL url, Invocation invocation)", "class_method_signature": "ConditionRouter.matchWhen(URL url, Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "matchThen", "parameters": "(URL url, URL param)", "modifiers": "private", "return": "boolean", "signature": "boolean matchThen(URL url, URL param)", "full_signature": "private boolean matchThen(URL url, URL param)", "class_method_signature": "ConditionRouter.matchThen(URL url, URL param)", "testcase": false, "constructor": false}, {"identifier": "matchCondition", "parameters": "(Map<String, MatchPair> condition, URL url, URL param, Invocation invocation)", "modifiers": "private", "return": "boolean", "signature": "boolean matchCondition(Map<String, MatchPair> condition, URL url, URL param, Invocation invocation)", "full_signature": "private boolean matchCondition(Map<String, MatchPair> condition, URL url, URL param, Invocation invocation)", "class_method_signature": "ConditionRouter.matchCondition(Map<String, MatchPair> condition, URL url, URL param, Invocation invocation)", "testcase": false, "constructor": false}], "file": "dubbo-cluster/src/main/java/com/alibaba/dubbo/rpc/cluster/router/condition/ConditionRouter.java"}, "focal_method": {"identifier": "matchWhen", "parameters": "(URL url, Invocation invocation)", "modifiers": "", "return": "boolean", "body": "boolean matchWhen(URL url, Invocation invocation) {\n        return whenCondition == null || whenCondition.isEmpty() || matchCondition(whenCondition, url, null, invocation);\n    }", "signature": "boolean matchWhen(URL url, Invocation invocation)", "full_signature": " boolean matchWhen(URL url, Invocation invocation)", "class_method_signature": "ConditionRouter.matchWhen(URL url, Invocation invocation)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "matchCondition"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}