{"test_class": {"identifier": "GaussianTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(MADTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(MADTest.class)", "var_name": "log"}], "file": "legacy/src/test/java/macrobase/analysis/stats/GaussianTest.java"}, "test_case": {"identifier": "testMahalanobis", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMahalanobis() {\n        MultivariateNormalDistribution mvNormal = getSample3dNormal();\n        Gaussian gaussian = new Gaussian(mvNormal.getMeans(), mvNormal.getCovariances());\n\n        int N = 100000;\n        int k = 3;\n        double[][] testData = new double[N][k];\n        for (int i = 0; i < N; i++) {\n            testData[i] = mvNormal.sample();\n        }\n\n        double[] mScores = new double[N];\n        long startTime = System.currentTimeMillis();\n        for (int i = 0; i < N; i++) {\n            mScores[i] = gaussian.mahalanobis(testData[i]);\n        }\n        long endTime = System.currentTimeMillis();\n        log.debug(\"Mahalobis distance on {} in {}\", N, endTime-startTime);\n\n        double[] dScores = new double[N];\n        startTime = System.currentTimeMillis();\n        for (int i = 0; i < N; i++) {\n            dScores[i] = -Math.log(mvNormal.density(testData[i]));\n        }\n        endTime = System.currentTimeMillis();\n        log.debug(\"LogPDF on {} in {}\", N, endTime-startTime);\n\n        // Check that mahalonbis distance has same relative magnitude as -log(pdf)\n        for (int i = 1; i < N; i++) {\n            assertEquals(mScores[i] > mScores[i-1], dScores[i] > dScores[i-1]);\n        }\n    }", "signature": "void testMahalanobis()", "full_signature": "@Test public void testMahalanobis()", "class_method_signature": "GaussianTest.testMahalanobis()", "testcase": true, "constructor": false, "invocations": ["getSample3dNormal", "getMeans", "getCovariances", "sample", "currentTimeMillis", "mahalanobis", "currentTimeMillis", "debug", "currentTimeMillis", "log", "density", "currentTimeMillis", "debug", "assertEquals"]}, "focal_class": {"identifier": "Gaussian", "superclass": "", "interfaces": "", "fields": [{"original_string": "public int k=0;", "modifier": "public", "type": "int", "declarator": "k=0", "var_name": "k"}, {"original_string": "public double[] mean;", "modifier": "public", "type": "double[]", "declarator": "mean", "var_name": "mean"}, {"original_string": "public RealMatrix cov;", "modifier": "public", "type": "RealMatrix", "declarator": "cov", "var_name": "cov"}, {"original_string": "public double[][] inverseCov;", "modifier": "public", "type": "double[][]", "declarator": "inverseCov", "var_name": "inverseCov"}, {"original_string": "public boolean singular = false;", "modifier": "public", "type": "boolean", "declarator": "singular = false", "var_name": "singular"}], "methods": [{"identifier": "Gaussian", "parameters": "()", "modifiers": "public", "return": "", "signature": " Gaussian()", "full_signature": "public  Gaussian()", "class_method_signature": "Gaussian.Gaussian()", "testcase": false, "constructor": true}, {"identifier": "Gaussian", "parameters": "(double[] mean, RealMatrix cov)", "modifiers": "public", "return": "", "signature": " Gaussian(double[] mean, RealMatrix cov)", "full_signature": "public  Gaussian(double[] mean, RealMatrix cov)", "class_method_signature": "Gaussian.Gaussian(double[] mean, RealMatrix cov)", "testcase": false, "constructor": true}, {"identifier": "fit", "parameters": "(List<double[]> data)", "modifiers": "public", "return": "Gaussian", "signature": "Gaussian fit(List<double[]> data)", "full_signature": "public Gaussian fit(List<double[]> data)", "class_method_signature": "Gaussian.fit(List<double[]> data)", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void initialize()", "full_signature": "public void initialize()", "class_method_signature": "Gaussian.initialize()", "testcase": false, "constructor": false}, {"identifier": "mahalanobis", "parameters": "(double[] query)", "modifiers": "public", "return": "double", "signature": "double mahalanobis(double[] query)", "full_signature": "public double mahalanobis(double[] query)", "class_method_signature": "Gaussian.mahalanobis(double[] query)", "testcase": false, "constructor": false}, {"identifier": "getMean", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getMean()", "full_signature": "public double[] getMean()", "class_method_signature": "Gaussian.getMean()", "testcase": false, "constructor": false}, {"identifier": "getCovariance", "parameters": "()", "modifiers": "public", "return": "RealMatrix", "signature": "RealMatrix getCovariance()", "full_signature": "public RealMatrix getCovariance()", "class_method_signature": "Gaussian.getCovariance()", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/macrobase/analysis/stats/Gaussian.java"}, "focal_method": {"identifier": "mahalanobis", "parameters": "(double[] query)", "modifiers": "public", "return": "double", "body": "public double mahalanobis(double[] query) {\n        double[] delta = new double[k];\n\n        for (int i = 0; i < k; i++) {\n            delta[i] = query[i] - mean[i];\n        }\n\n        double diagSum = 0, nonDiagSum = 0;\n\n        for (int d1 = 0; d1 < k; ++d1) {\n            for (int d2 = d1; d2 < k; ++d2) {\n                double v = delta[d1] * delta[d2] * inverseCov[d1][d2];\n                if (d1 == d2) {\n                    diagSum += v;\n                } else {\n                    nonDiagSum += v;\n                }\n            }\n        }\n\n        return diagSum + 2 * nonDiagSum;\n    }", "signature": "double mahalanobis(double[] query)", "full_signature": "public double mahalanobis(double[] query)", "class_method_signature": "Gaussian.mahalanobis(double[] query)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}