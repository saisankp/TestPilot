{"test_class": {"identifier": "TestFileSystemNodeLabelsStore", "superclass": "extends NodeLabelTestBase", "interfaces": "", "fields": [{"original_string": "MockNodeLabelManager mgr = null;", "modifier": "", "type": "MockNodeLabelManager", "declarator": "mgr = null", "var_name": "mgr"}, {"original_string": "Configuration conf = null;", "modifier": "", "type": "Configuration", "declarator": "conf = null", "var_name": "conf"}], "file": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/test/java/org/apache/hadoop/yarn/nodelabels/TestFileSystemNodeLabelsStore.java"}, "test_case": {"identifier": "testEditlogRecover", "parameters": "()", "modifiers": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) @Test(timeout = 10000) public", "return": "void", "body": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n  @Test(timeout = 10000)\n  public void testEditlogRecover() throws Exception {\n    mgr.addToCluserNodeLabels(toSet(\"p1\", \"p2\", \"p3\"));\n    mgr.addToCluserNodeLabels(toSet(\"p4\"));\n    mgr.addToCluserNodeLabels(toSet(\"p5\", \"p6\"));\n    mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId(\"n1\"), toSet(\"p1\"),\n        toNodeId(\"n2\"), toSet(\"p2\")));\n    mgr.replaceLabelsOnNode((Map) ImmutableMap.of(toNodeId(\"n3\"), toSet(\"p3\"),\n        toNodeId(\"n4\"), toSet(\"p4\"), toNodeId(\"n5\"), toSet(\"p5\"),\n        toNodeId(\"n6\"), toSet(\"p6\"), toNodeId(\"n7\"), toSet(\"p6\")));\n\n    /*\n     * node -> partition p1: n1 p2: n2 p3: n3 p4: n4 p5: n5 p6: n6, n7\n     */\n\n    mgr.removeFromClusterNodeLabels(toSet(\"p1\"));\n    mgr.removeFromClusterNodeLabels(Arrays.asList(\"p3\", \"p5\"));\n\n    /*\n     * After removed p2: n2 p4: n4 p6: n6, n7\n     */\n    // shutdown mgr and start a new mgr\n    mgr.stop();\n\n    mgr = new MockNodeLabelManager();\n    mgr.init(conf);\n    mgr.start();\n\n    // check variables\n    Assert.assertEquals(3, mgr.getClusterNodeLabels().size());\n    Assert.assertTrue(mgr.getClusterNodeLabels().containsAll(\n        Arrays.asList(\"p2\", \"p4\", \"p6\")));\n\n    assertMapContains(mgr.getNodeLabels(), ImmutableMap.of(toNodeId(\"n2\"),\n        toSet(\"p2\"), toNodeId(\"n4\"), toSet(\"p4\"), toNodeId(\"n6\"), toSet(\"p6\"),\n        toNodeId(\"n7\"), toSet(\"p6\")));\n    assertLabelsToNodesEquals(mgr.getLabelsToNodes(),\n            ImmutableMap.of(\n            \"p6\", toSet(toNodeId(\"n6\"), toNodeId(\"n7\")),\n            \"p4\", toSet(toNodeId(\"n4\")),\n            \"p2\", toSet(toNodeId(\"n2\"))));\n    mgr.stop();\n  }", "signature": "void testEditlogRecover()", "full_signature": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) @Test(timeout = 10000) public void testEditlogRecover()", "class_method_signature": "TestFileSystemNodeLabelsStore.testEditlogRecover()", "testcase": true, "constructor": false, "invocations": ["addToCluserNodeLabels", "toSet", "addToCluserNodeLabels", "toSet", "addToCluserNodeLabels", "toSet", "replaceLabelsOnNode", "of", "toNodeId", "toSet", "toNodeId", "toSet", "replaceLabelsOnNode", "of", "toNodeId", "toSet", "toNodeId", "toSet", "toNodeId", "toSet", "toNodeId", "toSet", "toNodeId", "toSet", "removeFromClusterNodeLabels", "toSet", "removeFromClusterNodeLabels", "asList", "stop", "init", "start", "assertEquals", "size", "getClusterNodeLabels", "assertTrue", "containsAll", "getClusterNodeLabels", "asList", "assertMapContains", "getNodeLabels", "of", "toNodeId", "toSet", "toNodeId", "toSet", "toNodeId", "toSet", "toNodeId", "toSet", "assertLabelsToNodesEquals", "getLabelsToNodes", "of", "toSet", "toNodeId", "toNodeId", "toSet", "toNodeId", "toSet", "toNodeId", "stop"]}, "focal_class": {"identifier": "FileSystemNodeLabelsStore", "superclass": "extends NodeLabelsStore", "interfaces": "", "fields": [{"original_string": "protected static final Log LOG = LogFactory.getLog(FileSystemNodeLabelsStore.class);", "modifier": "protected static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(FileSystemNodeLabelsStore.class)", "var_name": "LOG"}, {"original_string": "protected static final String DEFAULT_DIR_NAME = \"node-labels\";", "modifier": "protected static final", "type": "String", "declarator": "DEFAULT_DIR_NAME = \"node-labels\"", "var_name": "DEFAULT_DIR_NAME"}, {"original_string": "protected static final String MIRROR_FILENAME = \"nodelabel.mirror\";", "modifier": "protected static final", "type": "String", "declarator": "MIRROR_FILENAME = \"nodelabel.mirror\"", "var_name": "MIRROR_FILENAME"}, {"original_string": "protected static final String EDITLOG_FILENAME = \"nodelabel.editlog\";", "modifier": "protected static final", "type": "String", "declarator": "EDITLOG_FILENAME = \"nodelabel.editlog\"", "var_name": "EDITLOG_FILENAME"}, {"original_string": "Path fsWorkingPath;", "modifier": "", "type": "Path", "declarator": "fsWorkingPath", "var_name": "fsWorkingPath"}, {"original_string": "FileSystem fs;", "modifier": "", "type": "FileSystem", "declarator": "fs", "var_name": "fs"}, {"original_string": "FSDataOutputStream editlogOs;", "modifier": "", "type": "FSDataOutputStream", "declarator": "editlogOs", "var_name": "editlogOs"}, {"original_string": "Path editLogPath;", "modifier": "", "type": "Path", "declarator": "editLogPath", "var_name": "editLogPath"}], "methods": [{"identifier": "FileSystemNodeLabelsStore", "parameters": "(CommonNodeLabelsManager mgr)", "modifiers": "public", "return": "", "signature": " FileSystemNodeLabelsStore(CommonNodeLabelsManager mgr)", "full_signature": "public  FileSystemNodeLabelsStore(CommonNodeLabelsManager mgr)", "class_method_signature": "FileSystemNodeLabelsStore.FileSystemNodeLabelsStore(CommonNodeLabelsManager mgr)", "testcase": false, "constructor": true}, {"identifier": "getDefaultFSNodeLabelsRootDir", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getDefaultFSNodeLabelsRootDir()", "full_signature": "private String getDefaultFSNodeLabelsRootDir()", "class_method_signature": "FileSystemNodeLabelsStore.getDefaultFSNodeLabelsRootDir()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(Configuration conf)", "modifiers": "@Override public", "return": "void", "signature": "void init(Configuration conf)", "full_signature": "@Override public void init(Configuration conf)", "class_method_signature": "FileSystemNodeLabelsStore.init(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "FileSystemNodeLabelsStore.close()", "testcase": false, "constructor": false}, {"identifier": "setFileSystem", "parameters": "(Configuration conf)", "modifiers": "", "return": "void", "signature": "void setFileSystem(Configuration conf)", "full_signature": " void setFileSystem(Configuration conf)", "class_method_signature": "FileSystemNodeLabelsStore.setFileSystem(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "ensureAppendEditlogFile", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void ensureAppendEditlogFile()", "full_signature": "private void ensureAppendEditlogFile()", "class_method_signature": "FileSystemNodeLabelsStore.ensureAppendEditlogFile()", "testcase": false, "constructor": false}, {"identifier": "ensureCloseEditlogFile", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void ensureCloseEditlogFile()", "full_signature": "private void ensureCloseEditlogFile()", "class_method_signature": "FileSystemNodeLabelsStore.ensureCloseEditlogFile()", "testcase": false, "constructor": false}, {"identifier": "updateNodeToLabelsMappings", "parameters": "(\n      Map<NodeId, Set<String>> nodeToLabels)", "modifiers": "@Override public", "return": "void", "signature": "void updateNodeToLabelsMappings(\n      Map<NodeId, Set<String>> nodeToLabels)", "full_signature": "@Override public void updateNodeToLabelsMappings(\n      Map<NodeId, Set<String>> nodeToLabels)", "class_method_signature": "FileSystemNodeLabelsStore.updateNodeToLabelsMappings(\n      Map<NodeId, Set<String>> nodeToLabels)", "testcase": false, "constructor": false}, {"identifier": "storeNewClusterNodeLabels", "parameters": "(Set<String> labels)", "modifiers": "@Override public", "return": "void", "signature": "void storeNewClusterNodeLabels(Set<String> labels)", "full_signature": "@Override public void storeNewClusterNodeLabels(Set<String> labels)", "class_method_signature": "FileSystemNodeLabelsStore.storeNewClusterNodeLabels(Set<String> labels)", "testcase": false, "constructor": false}, {"identifier": "removeClusterNodeLabels", "parameters": "(Collection<String> labels)", "modifiers": "@Override public", "return": "void", "signature": "void removeClusterNodeLabels(Collection<String> labels)", "full_signature": "@Override public void removeClusterNodeLabels(Collection<String> labels)", "class_method_signature": "FileSystemNodeLabelsStore.removeClusterNodeLabels(Collection<String> labels)", "testcase": false, "constructor": false}, {"identifier": "recover", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void recover()", "full_signature": "@Override public void recover()", "class_method_signature": "FileSystemNodeLabelsStore.recover()", "testcase": false, "constructor": false}], "file": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/nodelabels/FileSystemNodeLabelsStore.java"}, "focal_method": {"identifier": "init", "parameters": "(Configuration conf)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void init(Configuration conf) throws Exception {\n    fsWorkingPath =\n        new Path(conf.get(YarnConfiguration.FS_NODE_LABELS_STORE_ROOT_DIR,\n            getDefaultFSNodeLabelsRootDir()));\n\n    setFileSystem(conf);\n\n    // mkdir of root dir path\n    if (!fs.exists(fsWorkingPath)) {\n      fs.mkdirs(fsWorkingPath);\n    }\n  }", "signature": "void init(Configuration conf)", "full_signature": "@Override public void init(Configuration conf)", "class_method_signature": "FileSystemNodeLabelsStore.init(Configuration conf)", "testcase": false, "constructor": false, "invocations": ["get", "getDefaultFSNodeLabelsRootDir", "setFileSystem", "exists", "mkdirs"]}, "repository": {"repo_id": 195808004, "url": "https://github.com/mouzwang/hadoop-2.7.2", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 24927, "license": "licensed"}}