{"test_class": {"identifier": "MultiRepositoryManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final Logger LOGGER = LoggerFactory.getLogger(MultiRepositoryManagerTest.class);", "modifier": "protected static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(MultiRepositoryManagerTest.class)", "var_name": "LOGGER"}, {"original_string": "static String workspaceRepositoryRoot;", "modifier": "static", "type": "String", "declarator": "workspaceRepositoryRoot", "var_name": "workspaceRepositoryRoot"}], "file": "org.eclipse.winery.repository/src/test/java/org/eclipse/winery/repository/backend/filebased/MultiRepositoryManagerTest.java"}, "test_case": {"identifier": "testMultiRepositoryCreation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMultiRepositoryCreation() {\n        ArrayList<RepositoryProperties> repositoryList = new ArrayList<>();\n        repositoryList.add(new RepositoryProperties(\"mainTestRepository\",\n            \"https://github.com/winery/mulit-repo-test\"));\n        MultiRepositoryManager multiRepositoryManager = new MultiRepositoryManager();\n        multiRepositoryManager.initializeRepositoryListForMultiRepositoryAndReconfigureFactory(repositoryList);\n        assertTrue(RepositoryFactory.getRepository() instanceof MultiRepository);\n    }", "signature": "void testMultiRepositoryCreation()", "full_signature": "@Test public void testMultiRepositoryCreation()", "class_method_signature": "MultiRepositoryManagerTest.testMultiRepositoryCreation()", "testcase": true, "constructor": false, "invocations": ["add", "initializeRepositoryListForMultiRepositoryAndReconfigureFactory", "assertTrue", "getRepository"]}, "focal_class": {"identifier": "MultiRepositoryManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(MultiRepositoryManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(MultiRepositoryManager.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "initializeRepositoryListForMultiRepositoryAndReconfigureFactory", "parameters": "(List<RepositoryProperties> repositoryList)", "modifiers": "", "return": "void", "signature": "void initializeRepositoryListForMultiRepositoryAndReconfigureFactory(List<RepositoryProperties> repositoryList)", "full_signature": " void initializeRepositoryListForMultiRepositoryAndReconfigureFactory(List<RepositoryProperties> repositoryList)", "class_method_signature": "MultiRepositoryManager.initializeRepositoryListForMultiRepositoryAndReconfigureFactory(List<RepositoryProperties> repositoryList)", "testcase": false, "constructor": false}, {"identifier": "isMultiRepositoryFileStuctureEstablished", "parameters": "(Path repoPath)", "modifiers": "", "return": "boolean", "signature": "boolean isMultiRepositoryFileStuctureEstablished(Path repoPath)", "full_signature": " boolean isMultiRepositoryFileStuctureEstablished(Path repoPath)", "class_method_signature": "MultiRepositoryManager.isMultiRepositoryFileStuctureEstablished(Path repoPath)", "testcase": false, "constructor": false}, {"identifier": "createMultiRepositoryFileStructure", "parameters": "(Path oldPath, Path newPath)", "modifiers": "", "return": "void", "signature": "void createMultiRepositoryFileStructure(Path oldPath, Path newPath)", "full_signature": " void createMultiRepositoryFileStructure(Path oldPath, Path newPath)", "class_method_signature": "MultiRepositoryManager.createMultiRepositoryFileStructure(Path oldPath, Path newPath)", "testcase": false, "constructor": false}, {"identifier": "getRepositoriesAsList", "parameters": "()", "modifiers": "public", "return": "List<RepositoryProperties>", "signature": "List<RepositoryProperties> getRepositoriesAsList()", "full_signature": "public List<RepositoryProperties> getRepositoriesAsList()", "class_method_signature": "MultiRepositoryManager.getRepositoriesAsList()", "testcase": false, "constructor": false}, {"identifier": "addRepositoryToFile", "parameters": "(List<RepositoryProperties> repositories)", "modifiers": "public", "return": "void", "signature": "void addRepositoryToFile(List<RepositoryProperties> repositories)", "full_signature": "public void addRepositoryToFile(List<RepositoryProperties> repositories)", "class_method_signature": "MultiRepositoryManager.addRepositoryToFile(List<RepositoryProperties> repositories)", "testcase": false, "constructor": false}], "file": "org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/backend/filebased/MultiRepositoryManager.java"}, "focal_method": {"identifier": "initializeRepositoryListForMultiRepositoryAndReconfigureFactory", "parameters": "(List<RepositoryProperties> repositoryList)", "modifiers": "", "return": "void", "body": "void initializeRepositoryListForMultiRepositoryAndReconfigureFactory(List<RepositoryProperties> repositoryList) {\n        ObjectMapper objectMapper = new ObjectMapper();\n        File repositoryConfiguration = new File(Environments.getInstance().getRepositoryConfig().getRepositoryRoot(), Filename.FILENAME_JSON_REPOSITORIES);\n        if (!repositoryConfiguration.exists()) {\n            try {\n                Files.createFile(repositoryConfiguration.toPath());\n                objectMapper.enable(SerializationFeature.INDENT_OUTPUT);\n                objectMapper.writeValue(repositoryConfiguration, repositoryList);\n            } catch (IOException exception) {\n                exception.printStackTrace();\n            }\n            createMultiRepositoryFileStructure(Paths.get(Environments.getInstance().getRepositoryConfig().getRepositoryRoot()),\n                Paths.get(Environments.getInstance().getRepositoryConfig().getRepositoryRoot(), Constants.DEFAULT_LOCAL_REPO_NAME));\n        }\n        try {\n            RepositoryFactory.reconfigure();\n        } catch (Exception e) {\n            LOGGER.debug(\"Error reconfiguring the RepositoryFactory.\", e);\n        }\n    }", "signature": "void initializeRepositoryListForMultiRepositoryAndReconfigureFactory(List<RepositoryProperties> repositoryList)", "full_signature": " void initializeRepositoryListForMultiRepositoryAndReconfigureFactory(List<RepositoryProperties> repositoryList)", "class_method_signature": "MultiRepositoryManager.initializeRepositoryListForMultiRepositoryAndReconfigureFactory(List<RepositoryProperties> repositoryList)", "testcase": false, "constructor": false, "invocations": ["getRepositoryRoot", "getRepositoryConfig", "getInstance", "exists", "createFile", "toPath", "enable", "writeValue", "printStackTrace", "createMultiRepositoryFileStructure", "get", "getRepositoryRoot", "getRepositoryConfig", "getInstance", "get", "getRepositoryRoot", "getRepositoryConfig", "getInstance", "reconfigure", "debug"]}, "repository": {"repo_id": 42622157, "url": "https://github.com/eclipse/winery", "stars": 34, "created": "9/17/2015 12:31:44 AM +00:00", "updates": "2020-01-22T09:32:00+00:00", "fork": "False", "license": "licensed"}}