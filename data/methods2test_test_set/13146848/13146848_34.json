{"test_class": {"identifier": "FileExtensionValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private File mockFile;", "modifier": "private", "type": "File", "declarator": "mockFile", "var_name": "mockFile"}, {"original_string": "private FileExtensionValidator victim = new FileExtensionValidator();", "modifier": "private", "type": "FileExtensionValidator", "declarator": "victim = new FileExtensionValidator()", "var_name": "victim"}], "file": "sejda-model/src/test/java/org/sejda/model/validation/validator/FileExtensionValidatorTest.java"}, "test_case": {"identifier": "testWrongExtension", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWrongExtension() {\n        when(mockFile.getName()).thenReturn(\"Bla.txt\");\n        assertFalse(victim.isValid(mockFile, null));\n    }", "signature": "void testWrongExtension()", "full_signature": "@Test public void testWrongExtension()", "class_method_signature": "FileExtensionValidatorTest.testWrongExtension()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getName", "assertFalse", "isValid"]}, "focal_class": {"identifier": "FileExtensionValidator", "superclass": "", "interfaces": "implements ConstraintValidator<FileExtension, File>", "fields": [{"original_string": "private String expectedExtension;", "modifier": "private", "type": "String", "declarator": "expectedExtension", "var_name": "expectedExtension"}], "methods": [{"identifier": "initialize", "parameters": "(FileExtension constraintAnnotation)", "modifiers": "@Override public", "return": "void", "signature": "void initialize(FileExtension constraintAnnotation)", "full_signature": "@Override public void initialize(FileExtension constraintAnnotation)", "class_method_signature": "FileExtensionValidator.initialize(FileExtension constraintAnnotation)", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "(File value, ConstraintValidatorContext context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isValid(File value, ConstraintValidatorContext context)", "full_signature": "@Override public boolean isValid(File value, ConstraintValidatorContext context)", "class_method_signature": "FileExtensionValidator.isValid(File value, ConstraintValidatorContext context)", "testcase": false, "constructor": false}], "file": "sejda-model/src/main/java/org/sejda/model/validation/validator/FileExtensionValidator.java"}, "focal_method": {"identifier": "isValid", "parameters": "(File value, ConstraintValidatorContext context)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isValid(File value, ConstraintValidatorContext context) {\n        if (value != null && value.isFile()) {\n            String extension = FilenameUtils.getExtension(value.getName());\n            return equalsIgnoreCase(expectedExtension, extension) && indexOfExtension(value.getName()) > 0;\n        }\n        return true;\n    }", "signature": "boolean isValid(File value, ConstraintValidatorContext context)", "full_signature": "@Override public boolean isValid(File value, ConstraintValidatorContext context)", "class_method_signature": "FileExtensionValidator.isValid(File value, ConstraintValidatorContext context)", "testcase": false, "constructor": false, "invocations": ["isFile", "getExtension", "getName", "equalsIgnoreCase", "indexOfExtension", "getName"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}