{"test_class": {"identifier": "RatePerIntervalRateControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Job<BatchJobExt> REFERENCE_JOB = newBatchJob(\n            10,\n            budget(percentageOfHealthyPolicy(100), hourlyRatePercentage(100), Collections.emptyList())\n    );", "modifier": "private static final", "type": "Job<BatchJobExt>", "declarator": "REFERENCE_JOB = newBatchJob(\n            10,\n            budget(percentageOfHealthyPolicy(100), hourlyRatePercentage(100), Collections.emptyList())\n    )", "var_name": "REFERENCE_JOB"}, {"original_string": "private static final Reference JOB_REFERENCE = Reference.job(REFERENCE_JOB.getId());", "modifier": "private static final", "type": "Reference", "declarator": "JOB_REFERENCE = Reference.job(REFERENCE_JOB.getId())", "var_name": "JOB_REFERENCE"}, {"original_string": "private static final long WINDOW_MS = 60_000;", "modifier": "private static final", "type": "long", "declarator": "WINDOW_MS = 60_000", "var_name": "WINDOW_MS"}, {"original_string": "private static final Duration CONSUME_INTERVAL = Duration.ofSeconds(10);", "modifier": "private static final", "type": "Duration", "declarator": "CONSUME_INTERVAL = Duration.ofSeconds(10)", "var_name": "CONSUME_INTERVAL"}, {"original_string": "private final TitusRuntime titusRuntime = TitusRuntimes.test();", "modifier": "private final", "type": "TitusRuntime", "declarator": "titusRuntime = TitusRuntimes.test()", "var_name": "titusRuntime"}, {"original_string": "private final TestClock clock = (TestClock) titusRuntime.getClock();", "modifier": "private final", "type": "TestClock", "declarator": "clock = (TestClock) titusRuntime.getClock()", "var_name": "clock"}], "file": "titus-server-master/src/test/java/com/netflix/titus/master/eviction/service/quota/job/RatePerIntervalRateControllerTest.java"}, "test_case": {"identifier": "testQuota", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testQuota() {\n        RatePerIntervalRateController quotaController = newRatePerIntervalRateController(\n                exceptRate(REFERENCE_JOB, ratePerInterval(WINDOW_MS, 5)),\n                SelfJobDisruptionBudgetResolver.getInstance(),\n                titusRuntime\n        );\n\n        assertThat(quotaController.getQuota(JOB_REFERENCE).getQuota()).isEqualTo(5);\n\n        // Consume everything\n        consumeAtInterval(quotaController, 5, CONSUME_INTERVAL);\n        assertThat(quotaController.getQuota(JOB_REFERENCE).getQuota()).isEqualTo(0);\n\n        // Now shift time and consume again\n        clock.advanceTime(CONSUME_INTERVAL);\n        clock.advanceTime(CONSUME_INTERVAL);\n        assertThat(quotaController.consume(\"someTaskId\").isApproved()).isTrue();\n\n        // Now move long into the future\n        clock.advanceTime(Duration.ofHours(2));\n        assertThat(quotaController.getQuota(JOB_REFERENCE).getQuota()).isEqualTo(5);\n    }", "signature": "void testQuota()", "full_signature": "@Test public void testQuota()", "class_method_signature": "RatePerIntervalRateControllerTest.testQuota()", "testcase": true, "constructor": false, "invocations": ["newRatePerIntervalRateController", "exceptRate", "ratePerInterval", "getInstance", "isEqualTo", "assertThat", "getQuota", "getQuota", "consumeAtInterval", "isEqualTo", "assertThat", "getQuota", "getQuota", "advanceTime", "advanceTime", "isTrue", "assertThat", "isApproved", "consume", "advanceTime", "ofHours", "isEqualTo", "assertThat", "getQuota", "getQuota"]}, "focal_class": {"identifier": "RatePerIntervalRateController", "superclass": "extends AbstractRatePerIntervalRateController", "interfaces": "", "fields": [{"original_string": "private final EffectiveJobDisruptionBudgetResolver budgetResolver;", "modifier": "private final", "type": "EffectiveJobDisruptionBudgetResolver", "declarator": "budgetResolver", "var_name": "budgetResolver"}], "methods": [{"identifier": "RatePerIntervalRateController", "parameters": "(Job<?> job,\n                                          long intervalMs,\n                                          long evictionsPerInterval,\n                                          EffectiveJobDisruptionBudgetResolver budgetResolver,\n                                          TitusRuntime titusRuntime)", "modifiers": "private", "return": "", "signature": " RatePerIntervalRateController(Job<?> job,\n                                          long intervalMs,\n                                          long evictionsPerInterval,\n                                          EffectiveJobDisruptionBudgetResolver budgetResolver,\n                                          TitusRuntime titusRuntime)", "full_signature": "private  RatePerIntervalRateController(Job<?> job,\n                                          long intervalMs,\n                                          long evictionsPerInterval,\n                                          EffectiveJobDisruptionBudgetResolver budgetResolver,\n                                          TitusRuntime titusRuntime)", "class_method_signature": "RatePerIntervalRateController.RatePerIntervalRateController(Job<?> job,\n                                          long intervalMs,\n                                          long evictionsPerInterval,\n                                          EffectiveJobDisruptionBudgetResolver budgetResolver,\n                                          TitusRuntime titusRuntime)", "testcase": false, "constructor": true}, {"identifier": "RatePerIntervalRateController", "parameters": "(Job<?> newJob,\n                                          long intervalMs,\n                                          long evictionsPerInterval,\n                                          RatePerIntervalRateController previous)", "modifiers": "private", "return": "", "signature": " RatePerIntervalRateController(Job<?> newJob,\n                                          long intervalMs,\n                                          long evictionsPerInterval,\n                                          RatePerIntervalRateController previous)", "full_signature": "private  RatePerIntervalRateController(Job<?> newJob,\n                                          long intervalMs,\n                                          long evictionsPerInterval,\n                                          RatePerIntervalRateController previous)", "class_method_signature": "RatePerIntervalRateController.RatePerIntervalRateController(Job<?> newJob,\n                                          long intervalMs,\n                                          long evictionsPerInterval,\n                                          RatePerIntervalRateController previous)", "testcase": false, "constructor": true}, {"identifier": "update", "parameters": "(Job<?> newJob)", "modifiers": "@Override public", "return": "RatePerIntervalRateController", "signature": "RatePerIntervalRateController update(Job<?> newJob)", "full_signature": "@Override public RatePerIntervalRateController update(Job<?> newJob)", "class_method_signature": "RatePerIntervalRateController.update(Job<?> newJob)", "testcase": false, "constructor": false}, {"identifier": "newRatePerIntervalRateController", "parameters": "(Job<?> job,\n                                                                                 EffectiveJobDisruptionBudgetResolver budgetResolver,\n                                                                                 TitusRuntime titusRuntime)", "modifiers": "public static", "return": "RatePerIntervalRateController", "signature": "RatePerIntervalRateController newRatePerIntervalRateController(Job<?> job,\n                                                                                 EffectiveJobDisruptionBudgetResolver budgetResolver,\n                                                                                 TitusRuntime titusRuntime)", "full_signature": "public static RatePerIntervalRateController newRatePerIntervalRateController(Job<?> job,\n                                                                                 EffectiveJobDisruptionBudgetResolver budgetResolver,\n                                                                                 TitusRuntime titusRuntime)", "class_method_signature": "RatePerIntervalRateController.newRatePerIntervalRateController(Job<?> job,\n                                                                                 EffectiveJobDisruptionBudgetResolver budgetResolver,\n                                                                                 TitusRuntime titusRuntime)", "testcase": false, "constructor": false}], "file": "titus-server-master/src/main/java/com/netflix/titus/master/eviction/service/quota/job/RatePerIntervalRateController.java"}, "focal_method": {"identifier": "newRatePerIntervalRateController", "parameters": "(Job<?> job,\n                                                                                 EffectiveJobDisruptionBudgetResolver budgetResolver,\n                                                                                 TitusRuntime titusRuntime)", "modifiers": "public static", "return": "RatePerIntervalRateController", "body": "public static RatePerIntervalRateController newRatePerIntervalRateController(Job<?> job,\n                                                                                 EffectiveJobDisruptionBudgetResolver budgetResolver,\n                                                                                 TitusRuntime titusRuntime) {\n        RatePerIntervalDisruptionBudgetRate rate = (RatePerIntervalDisruptionBudgetRate) budgetResolver.resolve(job).getDisruptionBudgetRate();\n        return new RatePerIntervalRateController(job, rate.getIntervalMs(), rate.getLimitPerInterval(), budgetResolver, titusRuntime);\n    }", "signature": "RatePerIntervalRateController newRatePerIntervalRateController(Job<?> job,\n                                                                                 EffectiveJobDisruptionBudgetResolver budgetResolver,\n                                                                                 TitusRuntime titusRuntime)", "full_signature": "public static RatePerIntervalRateController newRatePerIntervalRateController(Job<?> job,\n                                                                                 EffectiveJobDisruptionBudgetResolver budgetResolver,\n                                                                                 TitusRuntime titusRuntime)", "class_method_signature": "RatePerIntervalRateController.newRatePerIntervalRateController(Job<?> job,\n                                                                                 EffectiveJobDisruptionBudgetResolver budgetResolver,\n                                                                                 TitusRuntime titusRuntime)", "testcase": false, "constructor": false, "invocations": ["getDisruptionBudgetRate", "resolve", "getIntervalMs", "getLimitPerInterval"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}