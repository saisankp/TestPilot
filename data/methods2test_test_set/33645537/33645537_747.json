{"test_class": {"identifier": "RefCountSubscriptionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Action0 main;", "modifier": "", "type": "Action0", "declarator": "main", "var_name": "main"}, {"original_string": "RefCountSubscription rcs;", "modifier": "", "type": "RefCountSubscription", "declarator": "rcs", "var_name": "rcs"}], "file": "zava/src/test/java/rx/subscriptions/RefCountSubscriptionTest.java"}, "test_case": {"identifier": "testImmediateUnsubscribe", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testImmediateUnsubscribe() {\n        InOrder inOrder = inOrder(main);\n\n        rcs.unsubscribe();\n\n        inOrder.verify(main, times(1)).call();\n\n        rcs.unsubscribe();\n\n        inOrder.verifyNoMoreInteractions();\n    }", "signature": "void testImmediateUnsubscribe()", "full_signature": "@Test public void testImmediateUnsubscribe()", "class_method_signature": "RefCountSubscriptionTest.testImmediateUnsubscribe()", "testcase": true, "constructor": false, "invocations": ["inOrder", "unsubscribe", "call", "verify", "times", "unsubscribe", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "RefCountSubscription", "superclass": "", "interfaces": "implements Subscription", "fields": [{"original_string": "private final Subscription actual;", "modifier": "private final", "type": "Subscription", "declarator": "actual", "var_name": "actual"}, {"original_string": "static final State EMPTY_STATE = new State(false, 0);", "modifier": "static final", "type": "State", "declarator": "EMPTY_STATE = new State(false, 0)", "var_name": "EMPTY_STATE"}, {"original_string": "volatile State state = EMPTY_STATE;", "modifier": "volatile", "type": "State", "declarator": "state = EMPTY_STATE", "var_name": "state"}, {"original_string": "static final AtomicReferenceFieldUpdater<RefCountSubscription, State> STATE_UPDATER\n            = AtomicReferenceFieldUpdater.newUpdater(RefCountSubscription.class, State.class, \"state\");", "modifier": "static final", "type": "AtomicReferenceFieldUpdater<RefCountSubscription, State>", "declarator": "STATE_UPDATER\n            = AtomicReferenceFieldUpdater.newUpdater(RefCountSubscription.class, State.class, \"state\")", "var_name": "STATE_UPDATER"}], "methods": [{"identifier": "RefCountSubscription", "parameters": "(Subscription s)", "modifiers": "public", "return": "", "signature": " RefCountSubscription(Subscription s)", "full_signature": "public  RefCountSubscription(Subscription s)", "class_method_signature": "RefCountSubscription.RefCountSubscription(Subscription s)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "()", "modifiers": "public", "return": "Subscription", "signature": "Subscription get()", "full_signature": "public Subscription get()", "class_method_signature": "RefCountSubscription.get()", "testcase": false, "constructor": false}, {"identifier": "isUnsubscribed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isUnsubscribed()", "full_signature": "@Override public boolean isUnsubscribed()", "class_method_signature": "RefCountSubscription.isUnsubscribed()", "testcase": false, "constructor": false}, {"identifier": "unsubscribe", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void unsubscribe()", "full_signature": "@Override public void unsubscribe()", "class_method_signature": "RefCountSubscription.unsubscribe()", "testcase": false, "constructor": false}, {"identifier": "unsubscribeActualIfApplicable", "parameters": "(State state)", "modifiers": "private", "return": "void", "signature": "void unsubscribeActualIfApplicable(State state)", "full_signature": "private void unsubscribeActualIfApplicable(State state)", "class_method_signature": "RefCountSubscription.unsubscribeActualIfApplicable(State state)", "testcase": false, "constructor": false}, {"identifier": "unsubscribeAChild", "parameters": "()", "modifiers": "", "return": "void", "signature": "void unsubscribeAChild()", "full_signature": " void unsubscribeAChild()", "class_method_signature": "RefCountSubscription.unsubscribeAChild()", "testcase": false, "constructor": false}], "file": "zava/src/main/java/rx/subscriptions/RefCountSubscription.java"}, "focal_method": {"identifier": "unsubscribe", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void unsubscribe() {\n        State oldState;\n        State newState;\n        do {\n            oldState = state;\n            if (oldState.isUnsubscribed) {\n                return;\n            }\n            newState = oldState.unsubscribe();\n        } while (!STATE_UPDATER.compareAndSet(this, oldState, newState));\n        unsubscribeActualIfApplicable(newState);\n    }", "signature": "void unsubscribe()", "full_signature": "@Override public void unsubscribe()", "class_method_signature": "RefCountSubscription.unsubscribe()", "testcase": false, "constructor": false, "invocations": ["unsubscribe", "compareAndSet", "unsubscribeActualIfApplicable"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}