{"test_class": {"identifier": "CookieHeaderProviderTest", "superclass": "", "interfaces": "", "fields": [], "file": "jaxrs-delegates/src/test/java/org/wso2/msf4j/delegates/CookieHeaderProviderTest.java"}, "test_case": {"identifier": "testToString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToString() throws Exception {\n        String expectedString = \"Version=2;Application=msf4j;Path=/carbon;Domain=wso2;MaxAge=50;Comment=TestOnly;\" +\n                \"Expires=Sun, 06 Nov 1994 08:49:37 GMT;Secure;HttpOnly\";\n        Cookie cookie = new NewCookie(\"Application\", \"msf4j\", \"/carbon\", \"wso2\", 2, \"TestOnly\", 50, new Date\n                (784111777000L), true, true);\n        CookieHeaderProvider cookieHeaderProvider = new CookieHeaderProvider();\n        String cookieString = cookieHeaderProvider.toString(cookie);\n        assertNotNull(cookieString);\n        assertEquals(cookieString, expectedString);\n    }", "signature": "void testToString()", "full_signature": "@Test public void testToString()", "class_method_signature": "CookieHeaderProviderTest.testToString()", "testcase": true, "constructor": false, "invocations": ["toString", "assertNotNull", "assertEquals"]}, "focal_class": {"identifier": "CookieHeaderProvider", "superclass": "", "interfaces": "implements RuntimeDelegate.HeaderDelegate<Cookie>", "fields": [{"original_string": "private static final String DATE_FORMAT_PATTERN = \"EEE, dd MMM yyyy HH:mm:ss zzz\";", "modifier": "private static final", "type": "String", "declarator": "DATE_FORMAT_PATTERN = \"EEE, dd MMM yyyy HH:mm:ss zzz\"", "var_name": "DATE_FORMAT_PATTERN"}, {"original_string": "private static final String GMT_TIMEZONE = \"GMT\";", "modifier": "private static final", "type": "String", "declarator": "GMT_TIMEZONE = \"GMT\"", "var_name": "GMT_TIMEZONE"}, {"original_string": "private static final String VERSION = \"Version\";", "modifier": "private static final", "type": "String", "declarator": "VERSION = \"Version\"", "var_name": "VERSION"}, {"original_string": "private static final String PATH = \"Path\";", "modifier": "private static final", "type": "String", "declarator": "PATH = \"Path\"", "var_name": "PATH"}, {"original_string": "private static final String DOMAIN = \"Domain\";", "modifier": "private static final", "type": "String", "declarator": "DOMAIN = \"Domain\"", "var_name": "DOMAIN"}, {"original_string": "private static final String SECURE = \"Secure\";", "modifier": "private static final", "type": "String", "declarator": "SECURE = \"Secure\"", "var_name": "SECURE"}, {"original_string": "private static final String EXPIRES = \"Expires\";", "modifier": "private static final", "type": "String", "declarator": "EXPIRES = \"Expires\"", "var_name": "EXPIRES"}, {"original_string": "private static final String COMMENT = \"Comment\";", "modifier": "private static final", "type": "String", "declarator": "COMMENT = \"Comment\"", "var_name": "COMMENT"}, {"original_string": "private static final String HTTP_ONLY = \"HttpOnly\";", "modifier": "private static final", "type": "String", "declarator": "HTTP_ONLY = \"HttpOnly\"", "var_name": "HTTP_ONLY"}, {"original_string": "private static final String MAX_AGE = \"MaxAge\";", "modifier": "private static final", "type": "String", "declarator": "MAX_AGE = \"MaxAge\"", "var_name": "MAX_AGE"}, {"original_string": "private static final Logger log = LoggerFactory.getLogger(CookieHeaderProvider.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(CookieHeaderProvider.class)", "var_name": "log"}, {"original_string": "private SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT_PATTERN, Locale.ENGLISH);", "modifier": "private", "type": "SimpleDateFormat", "declarator": "dateFormat = new SimpleDateFormat(DATE_FORMAT_PATTERN, Locale.ENGLISH)", "var_name": "dateFormat"}], "methods": [{"identifier": "fromString", "parameters": "(String cookieValue)", "modifiers": "@Override public", "return": "Cookie", "signature": "Cookie fromString(String cookieValue)", "full_signature": "@Override public Cookie fromString(String cookieValue)", "class_method_signature": "CookieHeaderProvider.fromString(String cookieValue)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Cookie cookie)", "modifiers": "@Override public", "return": "String", "signature": "String toString(Cookie cookie)", "full_signature": "@Override public String toString(Cookie cookie)", "class_method_signature": "CookieHeaderProvider.toString(Cookie cookie)", "testcase": false, "constructor": false}], "file": "jaxrs-delegates/src/main/java/org/wso2/msf4j/delegates/CookieHeaderProvider.java"}, "focal_method": {"identifier": "toString", "parameters": "(Cookie cookie)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String toString(Cookie cookie) {\n        StringBuilder sb = new StringBuilder();\n\n        if (cookie.getVersion() != Cookie.DEFAULT_VERSION) {\n            sb.append(VERSION).append('=').append(cookie.getVersion()).append(';');\n        }\n        sb.append(cookie.getName()).append('=').append(cookie.getValue());\n        if (cookie.getPath() != null) {\n            sb.append(';').append(PATH).append('=').append(cookie.getPath());\n        }\n        if (cookie.getDomain() != null) {\n            sb.append(';').append(DOMAIN).append('=').append(cookie.getDomain());\n        }\n        if (cookie instanceof NewCookie) {\n            NewCookie newCookie = (NewCookie) cookie;\n            if (newCookie.getMaxAge() != NewCookie.DEFAULT_MAX_AGE) {\n                sb.append(';').append(MAX_AGE).append('=').append(newCookie.getMaxAge());\n            }\n            if (newCookie.getComment() != null) {\n                sb.append(';').append(COMMENT).append('=').append(newCookie.getComment());\n            }\n            if (newCookie.getExpiry() != null) {\n                //All HTTP date/time stamps MUST be represented in Greenwich Mean Time (GMT)\n                dateFormat.setTimeZone(TimeZone.getTimeZone(GMT_TIMEZONE));\n                sb.append(';').append(EXPIRES).append('=').append(dateFormat.format(newCookie.getExpiry()));\n            }\n            if (newCookie.isSecure()) {\n                sb.append(';').append(SECURE);\n            }\n            if (newCookie.isHttpOnly()) {\n                sb.append(';').append(HTTP_ONLY);\n            }\n        }\n        return sb.toString();\n    }", "signature": "String toString(Cookie cookie)", "full_signature": "@Override public String toString(Cookie cookie)", "class_method_signature": "CookieHeaderProvider.toString(Cookie cookie)", "testcase": false, "constructor": false, "invocations": ["getVersion", "append", "append", "append", "append", "getVersion", "append", "append", "append", "getName", "getValue", "getPath", "append", "append", "append", "append", "getPath", "getDomain", "append", "append", "append", "append", "getDomain", "getMaxAge", "append", "append", "append", "append", "getMaxAge", "getComment", "append", "append", "append", "append", "getComment", "getExpiry", "setTimeZone", "getTimeZone", "append", "append", "append", "append", "format", "getExpiry", "isSecure", "append", "append", "isHttpOnly", "append", "append", "toString"]}, "repository": {"repo_id": 42847560, "url": "https://github.com/wso2/msf4j", "language": "Java", "is_fork": false, "fork_count": 337, "stargazer_count": 345, "size": 33285, "license": "licensed"}}