{"test_class": {"identifier": "JcrPropertyDefinitionTest", "superclass": "extends MultiUseAbstractTest", "interfaces": "", "fields": [{"original_string": "protected static final String[] EXPECTED_BINARY_CONSTRAINTS = new String[] {\"[,5)\", \"[10, 20)\", \"(30,40]\", \"[50,]\"};", "modifier": "protected static final", "type": "String[]", "declarator": "EXPECTED_BINARY_CONSTRAINTS = new String[] {\"[,5)\", \"[10, 20)\", \"(30,40]\", \"[50,]\"}", "var_name": "EXPECTED_BINARY_CONSTRAINTS"}, {"original_string": "protected static final String[] EXPECTED_DATE_CONSTRAINTS = new String[] {\"[,+1945-08-01T01:30:00.000Z]\",\n        \"[+1975-08-01T01:30:00.000Z,)\"};", "modifier": "protected static final", "type": "String[]", "declarator": "EXPECTED_DATE_CONSTRAINTS = new String[] {\"[,+1945-08-01T01:30:00.000Z]\",\n        \"[+1975-08-01T01:30:00.000Z,)\"}", "var_name": "EXPECTED_DATE_CONSTRAINTS"}, {"original_string": "protected static final String[] EXPECTED_DOUBLE_CONSTRAINTS = new String[] {\"[,5.0)\", \"[10.1, 20.2)\", \"(30.3,40.4]\",\n        \"[50.5,]\"};", "modifier": "protected static final", "type": "String[]", "declarator": "EXPECTED_DOUBLE_CONSTRAINTS = new String[] {\"[,5.0)\", \"[10.1, 20.2)\", \"(30.3,40.4]\",\n        \"[50.5,]\"}", "var_name": "EXPECTED_DOUBLE_CONSTRAINTS"}, {"original_string": "protected static final String[] EXPECTED_LONG_CONSTRAINTS = new String[] {\"[,5)\", \"[10, 20)\", \"(30,40]\", \"[50,]\"};", "modifier": "protected static final", "type": "String[]", "declarator": "EXPECTED_LONG_CONSTRAINTS = new String[] {\"[,5)\", \"[10, 20)\", \"(30,40]\", \"[50,]\"}", "var_name": "EXPECTED_LONG_CONSTRAINTS"}, {"original_string": "protected static final String[] EXPECTED_NAME_CONSTRAINTS = new String[] {\"jcr:system\", \"modetest:constrainedType\"};", "modifier": "protected static final", "type": "String[]", "declarator": "EXPECTED_NAME_CONSTRAINTS = new String[] {\"jcr:system\", \"modetest:constrainedType\"}", "var_name": "EXPECTED_NAME_CONSTRAINTS"}, {"original_string": "protected static final String[] EXPECTED_PATH_CONSTRAINTS = new String[] {\"/jcr:system/*\", \"b\", \"/a/b/c\"};", "modifier": "protected static final", "type": "String[]", "declarator": "EXPECTED_PATH_CONSTRAINTS = new String[] {\"/jcr:system/*\", \"b\", \"/a/b/c\"}", "var_name": "EXPECTED_PATH_CONSTRAINTS"}, {"original_string": "protected static final String[] EXPECTED_REFERENCE_CONSTRAINTS = new String[] {\"mode:root\"};", "modifier": "protected static final", "type": "String[]", "declarator": "EXPECTED_REFERENCE_CONSTRAINTS = new String[] {\"mode:root\"}", "var_name": "EXPECTED_REFERENCE_CONSTRAINTS"}, {"original_string": "protected static final String[] EXPECTED_STRING_CONSTRAINTS = new String[] {\"foo\", \"bar*\", \".*baz\"};", "modifier": "protected static final", "type": "String[]", "declarator": "EXPECTED_STRING_CONSTRAINTS = new String[] {\"foo\", \"bar*\", \".*baz\"}", "var_name": "EXPECTED_STRING_CONSTRAINTS"}, {"original_string": "protected NodeTypeManager nodeTypeManager;", "modifier": "protected", "type": "NodeTypeManager", "declarator": "nodeTypeManager", "var_name": "nodeTypeManager"}, {"original_string": "private ExecutionContext context;", "modifier": "private", "type": "ExecutionContext", "declarator": "context", "var_name": "context"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/JcrPropertyDefinitionTest.java"}, "test_case": {"identifier": "shouldAllowValidDoubleValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldAllowValidDoubleValue() throws Exception {\n        NodeType constrainedType = validateTypeDefinition();\n        JcrPropertyDefinition prop = propertyDefinitionFor(constrainedType, TestLexicon.CONSTRAINED_DOUBLE);\n\n        assertThat(prop.satisfiesConstraints(valueFor(Double.MIN_VALUE, PropertyType.DOUBLE), session), is(true));\n        assertThat(prop.satisfiesConstraints(valueFor(0, PropertyType.DOUBLE), session), is(true));\n        assertThat(prop.satisfiesConstraints(valueFor(0.1, PropertyType.DOUBLE), session), is(true));\n        assertThat(prop.satisfiesConstraints(valueFor(4.99, PropertyType.DOUBLE), session), is(true));\n        assertThat(prop.satisfiesConstraints(valueFor(10.100, PropertyType.DOUBLE), session), is(true));\n        assertThat(prop.satisfiesConstraints(valueFor(20.19, PropertyType.DOUBLE), session), is(true));\n        assertThat(prop.satisfiesConstraints(valueFor(30.31, PropertyType.DOUBLE), session), is(true));\n        assertThat(prop.satisfiesConstraints(valueFor(40.4, PropertyType.DOUBLE), session), is(true));\n        assertThat(prop.satisfiesConstraints(valueFor(50.5, PropertyType.DOUBLE), session), is(true));\n        assertThat(prop.satisfiesConstraints(valueFor(Double.MAX_VALUE, PropertyType.DOUBLE), session), is(true));\n    }", "signature": "void shouldAllowValidDoubleValue()", "full_signature": "@Test public void shouldAllowValidDoubleValue()", "class_method_signature": "JcrPropertyDefinitionTest.shouldAllowValidDoubleValue()", "testcase": true, "constructor": false, "invocations": ["validateTypeDefinition", "propertyDefinitionFor", "assertThat", "satisfiesConstraints", "valueFor", "is", "assertThat", "satisfiesConstraints", "valueFor", "is", "assertThat", "satisfiesConstraints", "valueFor", "is", "assertThat", "satisfiesConstraints", "valueFor", "is", "assertThat", "satisfiesConstraints", "valueFor", "is", "assertThat", "satisfiesConstraints", "valueFor", "is", "assertThat", "satisfiesConstraints", "valueFor", "is", "assertThat", "satisfiesConstraints", "valueFor", "is", "assertThat", "satisfiesConstraints", "valueFor", "is", "assertThat", "satisfiesConstraints", "valueFor", "is"]}, "focal_class": {"identifier": "JcrPropertyDefinition", "superclass": "extends JcrItemDefinition", "interfaces": "implements PropertyDefinition", "fields": [{"original_string": "protected static final Map<String, Operator> OPERATORS_BY_JCR_NAME;", "modifier": "protected static final", "type": "Map<String, Operator>", "declarator": "OPERATORS_BY_JCR_NAME", "var_name": "OPERATORS_BY_JCR_NAME"}, {"original_string": "private final Object[] rawDefaultValues;", "modifier": "private final", "type": "Object[]", "declarator": "rawDefaultValues", "var_name": "rawDefaultValues"}, {"original_string": "private final JcrValue[] defaultValues;", "modifier": "private final", "type": "JcrValue[]", "declarator": "defaultValues", "var_name": "defaultValues"}, {"original_string": "private final int requiredType;", "modifier": "private final", "type": "int", "declarator": "requiredType", "var_name": "requiredType"}, {"original_string": "private final String[] valueConstraints;", "modifier": "private final", "type": "String[]", "declarator": "valueConstraints", "var_name": "valueConstraints"}, {"original_string": "private final boolean multiple;", "modifier": "private final", "type": "boolean", "declarator": "multiple", "var_name": "multiple"}, {"original_string": "private final boolean fullTextSearchable;", "modifier": "private final", "type": "boolean", "declarator": "fullTextSearchable", "var_name": "fullTextSearchable"}, {"original_string": "private final boolean queryOrderable;", "modifier": "private final", "type": "boolean", "declarator": "queryOrderable", "var_name": "queryOrderable"}, {"original_string": "private final String[] queryOperators;", "modifier": "private final", "type": "String[]", "declarator": "queryOperators", "var_name": "queryOperators"}, {"original_string": "private final NodeKey key;", "modifier": "private final", "type": "NodeKey", "declarator": "key", "var_name": "key"}, {"original_string": "private final PropertyDefinitionId id;", "modifier": "private final", "type": "PropertyDefinitionId", "declarator": "id", "var_name": "id"}, {"original_string": "private ConstraintChecker checker = null;", "modifier": "private", "type": "ConstraintChecker", "declarator": "checker = null", "var_name": "checker"}], "methods": [{"identifier": "operatorFromSymbol", "parameters": "( String jcrConstantValue )", "modifiers": "static", "return": "Operator", "signature": "Operator operatorFromSymbol( String jcrConstantValue )", "full_signature": "static Operator operatorFromSymbol( String jcrConstantValue )", "class_method_signature": "JcrPropertyDefinition.operatorFromSymbol( String jcrConstantValue )", "testcase": false, "constructor": false}, {"identifier": "JcrPropertyDefinition", "parameters": "( ExecutionContext context,\n                           JcrNodeType declaringNodeType,\n                           NodeKey prototypeKey,\n                           Name name,\n                           int onParentVersion,\n                           boolean autoCreated,\n                           boolean mandatory,\n                           boolean protectedItem,\n                           JcrValue[] defaultValues,\n                           int requiredType,\n                           String[] valueConstraints,\n                           boolean multiple,\n                           boolean fullTextSearchable,\n                           boolean queryOrderable,\n                           String[] queryOperators )", "modifiers": "", "return": "", "signature": " JcrPropertyDefinition( ExecutionContext context,\n                           JcrNodeType declaringNodeType,\n                           NodeKey prototypeKey,\n                           Name name,\n                           int onParentVersion,\n                           boolean autoCreated,\n                           boolean mandatory,\n                           boolean protectedItem,\n                           JcrValue[] defaultValues,\n                           int requiredType,\n                           String[] valueConstraints,\n                           boolean multiple,\n                           boolean fullTextSearchable,\n                           boolean queryOrderable,\n                           String[] queryOperators )", "full_signature": "  JcrPropertyDefinition( ExecutionContext context,\n                           JcrNodeType declaringNodeType,\n                           NodeKey prototypeKey,\n                           Name name,\n                           int onParentVersion,\n                           boolean autoCreated,\n                           boolean mandatory,\n                           boolean protectedItem,\n                           JcrValue[] defaultValues,\n                           int requiredType,\n                           String[] valueConstraints,\n                           boolean multiple,\n                           boolean fullTextSearchable,\n                           boolean queryOrderable,\n                           String[] queryOperators )", "class_method_signature": "JcrPropertyDefinition.JcrPropertyDefinition( ExecutionContext context,\n                           JcrNodeType declaringNodeType,\n                           NodeKey prototypeKey,\n                           Name name,\n                           int onParentVersion,\n                           boolean autoCreated,\n                           boolean mandatory,\n                           boolean protectedItem,\n                           JcrValue[] defaultValues,\n                           int requiredType,\n                           String[] valueConstraints,\n                           boolean multiple,\n                           boolean fullTextSearchable,\n                           boolean queryOrderable,\n                           String[] queryOperators )", "testcase": false, "constructor": true}, {"identifier": "getId", "parameters": "()", "modifiers": "public", "return": "PropertyDefinitionId", "signature": "PropertyDefinitionId getId()", "full_signature": "public PropertyDefinitionId getId()", "class_method_signature": "JcrPropertyDefinition.getId()", "testcase": false, "constructor": false}, {"identifier": "key", "parameters": "()", "modifiers": "@Override final", "return": "NodeKey", "signature": "NodeKey key()", "full_signature": "@Override final NodeKey key()", "class_method_signature": "JcrPropertyDefinition.key()", "testcase": false, "constructor": false}, {"identifier": "getDefaultValues", "parameters": "()", "modifiers": "@Override public", "return": "JcrValue[]", "signature": "JcrValue[] getDefaultValues()", "full_signature": "@Override public JcrValue[] getDefaultValues()", "class_method_signature": "JcrPropertyDefinition.getDefaultValues()", "testcase": false, "constructor": false}, {"identifier": "getRawDefaultValues", "parameters": "()", "modifiers": "", "return": "Object[]", "signature": "Object[] getRawDefaultValues()", "full_signature": " Object[] getRawDefaultValues()", "class_method_signature": "JcrPropertyDefinition.getRawDefaultValues()", "testcase": false, "constructor": false}, {"identifier": "hasDefaultValues", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasDefaultValues()", "full_signature": "public boolean hasDefaultValues()", "class_method_signature": "JcrPropertyDefinition.hasDefaultValues()", "testcase": false, "constructor": false}, {"identifier": "getRequiredType", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getRequiredType()", "full_signature": "@Override public int getRequiredType()", "class_method_signature": "JcrPropertyDefinition.getRequiredType()", "testcase": false, "constructor": false}, {"identifier": "getValueConstraints", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getValueConstraints()", "full_signature": "@Override public String[] getValueConstraints()", "class_method_signature": "JcrPropertyDefinition.getValueConstraints()", "testcase": false, "constructor": false}, {"identifier": "isMultiple", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isMultiple()", "full_signature": "@Override public boolean isMultiple()", "class_method_signature": "JcrPropertyDefinition.isMultiple()", "testcase": false, "constructor": false}, {"identifier": "isFullTextSearchable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isFullTextSearchable()", "full_signature": "@Override public boolean isFullTextSearchable()", "class_method_signature": "JcrPropertyDefinition.isFullTextSearchable()", "testcase": false, "constructor": false}, {"identifier": "isQueryOrderable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isQueryOrderable()", "full_signature": "@Override public boolean isQueryOrderable()", "class_method_signature": "JcrPropertyDefinition.isQueryOrderable()", "testcase": false, "constructor": false}, {"identifier": "getAvailableQueryOperators", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getAvailableQueryOperators()", "full_signature": "@Override public String[] getAvailableQueryOperators()", "class_method_signature": "JcrPropertyDefinition.getAvailableQueryOperators()", "testcase": false, "constructor": false}, {"identifier": "with", "parameters": "( JcrNodeType declaringNodeType )", "modifiers": "", "return": "JcrPropertyDefinition", "signature": "JcrPropertyDefinition with( JcrNodeType declaringNodeType )", "full_signature": " JcrPropertyDefinition with( JcrNodeType declaringNodeType )", "class_method_signature": "JcrPropertyDefinition.with( JcrNodeType declaringNodeType )", "testcase": false, "constructor": false}, {"identifier": "with", "parameters": "( ExecutionContext context )", "modifiers": "", "return": "JcrPropertyDefinition", "signature": "JcrPropertyDefinition with( ExecutionContext context )", "full_signature": " JcrPropertyDefinition with( ExecutionContext context )", "class_method_signature": "JcrPropertyDefinition.with( ExecutionContext context )", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "JcrPropertyDefinition.toString()", "testcase": false, "constructor": false}, {"identifier": "satisfiesConstraints", "parameters": "( Value value,\n                                  JcrSession session )", "modifiers": "", "return": "boolean", "signature": "boolean satisfiesConstraints( Value value,\n                                  JcrSession session )", "full_signature": " boolean satisfiesConstraints( Value value,\n                                  JcrSession session )", "class_method_signature": "JcrPropertyDefinition.satisfiesConstraints( Value value,\n                                  JcrSession session )", "testcase": false, "constructor": false}, {"identifier": "satisfiesConstraints", "parameters": "( Value[] values,\n                                  JcrSession session )", "modifiers": "", "return": "boolean", "signature": "boolean satisfiesConstraints( Value[] values,\n                                  JcrSession session )", "full_signature": " boolean satisfiesConstraints( Value[] values,\n                                  JcrSession session )", "class_method_signature": "JcrPropertyDefinition.satisfiesConstraints( Value[] values,\n                                  JcrSession session )", "testcase": false, "constructor": false}, {"identifier": "getMinimumValue", "parameters": "()", "modifiers": "", "return": "Object", "signature": "Object getMinimumValue()", "full_signature": " Object getMinimumValue()", "class_method_signature": "JcrPropertyDefinition.getMinimumValue()", "testcase": false, "constructor": false}, {"identifier": "getMaximumValue", "parameters": "()", "modifiers": "", "return": "Object", "signature": "Object getMaximumValue()", "full_signature": " Object getMaximumValue()", "class_method_signature": "JcrPropertyDefinition.getMaximumValue()", "testcase": false, "constructor": false}, {"identifier": "canCastToType", "parameters": "( Value value )", "modifiers": "", "return": "boolean", "signature": "boolean canCastToType( Value value )", "full_signature": " boolean canCastToType( Value value )", "class_method_signature": "JcrPropertyDefinition.canCastToType( Value value )", "testcase": false, "constructor": false}, {"identifier": "canCastToType", "parameters": "( Value[] values )", "modifiers": "", "return": "boolean", "signature": "boolean canCastToType( Value[] values )", "full_signature": " boolean canCastToType( Value[] values )", "class_method_signature": "JcrPropertyDefinition.canCastToType( Value[] values )", "testcase": false, "constructor": false}, {"identifier": "canCastToTypeAndSatisfyConstraints", "parameters": "( Value value,\n                                                JcrSession session )", "modifiers": "", "return": "boolean", "signature": "boolean canCastToTypeAndSatisfyConstraints( Value value,\n                                                JcrSession session )", "full_signature": " boolean canCastToTypeAndSatisfyConstraints( Value value,\n                                                JcrSession session )", "class_method_signature": "JcrPropertyDefinition.canCastToTypeAndSatisfyConstraints( Value value,\n                                                JcrSession session )", "testcase": false, "constructor": false}, {"identifier": "canCastToTypeAndSatisfyConstraints", "parameters": "( Value[] values,\n                                                JcrSession session )", "modifiers": "", "return": "boolean", "signature": "boolean canCastToTypeAndSatisfyConstraints( Value[] values,\n                                                JcrSession session )", "full_signature": " boolean canCastToTypeAndSatisfyConstraints( Value[] values,\n                                                JcrSession session )", "class_method_signature": "JcrPropertyDefinition.canCastToTypeAndSatisfyConstraints( Value[] values,\n                                                JcrSession session )", "testcase": false, "constructor": false}, {"identifier": "createChecker", "parameters": "( ExecutionContext context,\n                                             int type,\n                                             String[] valueConstraints )", "modifiers": "private", "return": "ConstraintChecker", "signature": "ConstraintChecker createChecker( ExecutionContext context,\n                                             int type,\n                                             String[] valueConstraints )", "full_signature": "private ConstraintChecker createChecker( ExecutionContext context,\n                                             int type,\n                                             String[] valueConstraints )", "class_method_signature": "JcrPropertyDefinition.createChecker( ExecutionContext context,\n                                             int type,\n                                             String[] valueConstraints )", "testcase": false, "constructor": false}, {"identifier": "isAsOrMoreConstrainedThan", "parameters": "( PropertyDefinition other,\n                                       ExecutionContext context )", "modifiers": "", "return": "boolean", "signature": "boolean isAsOrMoreConstrainedThan( PropertyDefinition other,\n                                       ExecutionContext context )", "full_signature": " boolean isAsOrMoreConstrainedThan( PropertyDefinition other,\n                                       ExecutionContext context )", "class_method_signature": "JcrPropertyDefinition.isAsOrMoreConstrainedThan( PropertyDefinition other,\n                                       ExecutionContext context )", "testcase": false, "constructor": false}, {"identifier": "getConstraintChecker", "parameters": "( ExecutionContext context )", "modifiers": "", "return": "ConstraintChecker", "signature": "ConstraintChecker getConstraintChecker( ExecutionContext context )", "full_signature": " ConstraintChecker getConstraintChecker( ExecutionContext context )", "class_method_signature": "JcrPropertyDefinition.getConstraintChecker( ExecutionContext context )", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "JcrPropertyDefinition.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "( Object obj )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals( Object obj )", "full_signature": "@Override public boolean equals( Object obj )", "class_method_signature": "JcrPropertyDefinition.equals( Object obj )", "testcase": false, "constructor": false}, {"identifier": "asString", "parameters": "( Object[] values,\n                                      ExecutionContext context )", "modifiers": "protected static", "return": "String", "signature": "String asString( Object[] values,\n                                      ExecutionContext context )", "full_signature": "protected static String asString( Object[] values,\n                                      ExecutionContext context )", "class_method_signature": "JcrPropertyDefinition.asString( Object[] values,\n                                      ExecutionContext context )", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/JcrPropertyDefinition.java"}, "focal_method": {"identifier": "satisfiesConstraints", "parameters": "( Value value,\n                                  JcrSession session )", "modifiers": "", "return": "boolean", "body": "boolean satisfiesConstraints( Value value,\n                                  JcrSession session ) {\n        if (value == null) return false;\n        if (valueConstraints == null || valueConstraints.length == 0) {\n            return true;\n        }\n\n        // Neither the 1.0 or 2.0 specification formally prohibit constraints on properties with no required type.\n        int type = requiredType == PropertyType.UNDEFINED ? value.getType() : requiredType;\n\n        /*\n         * Keep a method-local reference to the constraint checker in case another thread attempts to concurrently\n         * check the constraints with a different required type.\n         */\n        ConstraintChecker checker = this.checker;\n\n        if (checker == null || checker.getType() != type) {\n            checker = createChecker(context, type, valueConstraints);\n            this.checker = checker;\n        }\n\n        try {\n            return checker.matches(value, session);\n        } catch (ValueFormatException vfe) {\n            // The value was so wonky that we couldn't even convert it to an appropriate type\n            return false;\n        }\n    }", "signature": "boolean satisfiesConstraints( Value value,\n                                  JcrSession session )", "full_signature": " boolean satisfiesConstraints( Value value,\n                                  JcrSession session )", "class_method_signature": "JcrPropertyDefinition.satisfiesConstraints( Value value,\n                                  JcrSession session )", "testcase": false, "constructor": false, "invocations": ["getType", "getType", "createChecker", "matches"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}