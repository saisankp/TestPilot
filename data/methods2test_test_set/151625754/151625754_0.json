{"test_class": {"identifier": "RSACoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String publicKey;", "modifier": "private", "type": "String", "declarator": "publicKey", "var_name": "publicKey"}, {"original_string": "private String privateKey;", "modifier": "private", "type": "String", "declarator": "privateKey", "var_name": "privateKey"}], "file": "buukle-main/buukle-util/src/main/java/top/buukle/util/RSA/RSACoderTest.java"}, "test_case": {"identifier": "testSign", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSign() throws Exception {\n        System.out.println(\"\u79c1\u94a5\u52a0\u5bc6\u2014\u2014\u516c\u94a5\u89e3\u5bc6\");\n        String inputStr = \"sign\";\n        byte[] data = inputStr.getBytes();\n\n        byte[] encodedData = RSACoder.encryptByPrivateKey(data, privateKey);\n\n        byte[] decodedData = RSACoder.decryptByPublicKey(encodedData, publicKey);\n\n        String outputStr = new String(decodedData);\n        System.out.println(\"\u52a0\u5bc6\u524d: \" + inputStr + \"\\n\\r\" + \"\u89e3\u5bc6\u540e: \" + outputStr);\n        assertEquals(inputStr, outputStr);\n\n        System.out.println(\"\u79c1\u94a5\u7b7e\u540d\u2014\u2014\u516c\u94a5\u9a8c\u8bc1\u7b7e\u540d\");\n        // \u4ea7\u751f\u7b7e\u540d\n        String sign = RSACoder.sign(encodedData, privateKey);\n        System.out.println(\"\u7b7e\u540d:\" + sign);\n\n        // \u9a8c\u8bc1\u7b7e\u540d\n        boolean status = RSACoder.verify(encodedData, publicKey, sign);\n        System.out.println(\"\u72b6\u6001:\" + status);\n        assertTrue(status);\n\n    }", "signature": "void testSign()", "full_signature": "@Test public void testSign()", "class_method_signature": "RSACoderTest.testSign()", "testcase": true, "constructor": false, "invocations": ["println", "getBytes", "encryptByPrivateKey", "decryptByPublicKey", "println", "assertEquals", "println", "sign", "println", "verify", "println", "assertTrue"]}, "focal_class": {"identifier": "RSACoder", "superclass": "extends Coder", "interfaces": "", "fields": [{"original_string": "public static final String KEY_ALGORITHM = \"RSA\";", "modifier": "public static final", "type": "String", "declarator": "KEY_ALGORITHM = \"RSA\"", "var_name": "KEY_ALGORITHM"}, {"original_string": "public static final String SIGNATURE_ALGORITHM = \"MD5withRSA\";", "modifier": "public static final", "type": "String", "declarator": "SIGNATURE_ALGORITHM = \"MD5withRSA\"", "var_name": "SIGNATURE_ALGORITHM"}, {"original_string": "private static final String PUBLIC_KEY = \"RSAPublicKey\";", "modifier": "private static final", "type": "String", "declarator": "PUBLIC_KEY = \"RSAPublicKey\"", "var_name": "PUBLIC_KEY"}, {"original_string": "private static final String PRIVATE_KEY = \"RSAPrivateKey\";", "modifier": "private static final", "type": "String", "declarator": "PRIVATE_KEY = \"RSAPrivateKey\"", "var_name": "PRIVATE_KEY"}], "methods": [{"identifier": "sign", "parameters": "(byte[] data, String privateKey)", "modifiers": "public static", "return": "String", "signature": "String sign(byte[] data, String privateKey)", "full_signature": "public static String sign(byte[] data, String privateKey)", "class_method_signature": "RSACoder.sign(byte[] data, String privateKey)", "testcase": false, "constructor": false}, {"identifier": "verify", "parameters": "(byte[] data, String publicKey, String sign)", "modifiers": "public static", "return": "boolean", "signature": "boolean verify(byte[] data, String publicKey, String sign)", "full_signature": "public static boolean verify(byte[] data, String publicKey, String sign)", "class_method_signature": "RSACoder.verify(byte[] data, String publicKey, String sign)", "testcase": false, "constructor": false}, {"identifier": "decryptByPrivateKey", "parameters": "(byte[] data, String key)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] decryptByPrivateKey(byte[] data, String key)", "full_signature": "public static byte[] decryptByPrivateKey(byte[] data, String key)", "class_method_signature": "RSACoder.decryptByPrivateKey(byte[] data, String key)", "testcase": false, "constructor": false}, {"identifier": "decryptByPublicKey", "parameters": "(byte[] data, String key)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] decryptByPublicKey(byte[] data, String key)", "full_signature": "public static byte[] decryptByPublicKey(byte[] data, String key)", "class_method_signature": "RSACoder.decryptByPublicKey(byte[] data, String key)", "testcase": false, "constructor": false}, {"identifier": "encryptByPublicKey", "parameters": "(byte[] data, String key)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] encryptByPublicKey(byte[] data, String key)", "full_signature": "public static byte[] encryptByPublicKey(byte[] data, String key)", "class_method_signature": "RSACoder.encryptByPublicKey(byte[] data, String key)", "testcase": false, "constructor": false}, {"identifier": "encryptByPrivateKey", "parameters": "(byte[] data, String key)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] encryptByPrivateKey(byte[] data, String key)", "full_signature": "public static byte[] encryptByPrivateKey(byte[] data, String key)", "class_method_signature": "RSACoder.encryptByPrivateKey(byte[] data, String key)", "testcase": false, "constructor": false}, {"identifier": "getPrivateKey", "parameters": "(Map<String, Object> keyMap)", "modifiers": "public static", "return": "String", "signature": "String getPrivateKey(Map<String, Object> keyMap)", "full_signature": "public static String getPrivateKey(Map<String, Object> keyMap)", "class_method_signature": "RSACoder.getPrivateKey(Map<String, Object> keyMap)", "testcase": false, "constructor": false}, {"identifier": "getPublicKey", "parameters": "(Map<String, Object> keyMap)", "modifiers": "public static", "return": "String", "signature": "String getPublicKey(Map<String, Object> keyMap)", "full_signature": "public static String getPublicKey(Map<String, Object> keyMap)", "class_method_signature": "RSACoder.getPublicKey(Map<String, Object> keyMap)", "testcase": false, "constructor": false}, {"identifier": "initKey", "parameters": "()", "modifiers": "public static", "return": "Map<String, Object>", "signature": "Map<String, Object> initKey()", "full_signature": "public static Map<String, Object> initKey()", "class_method_signature": "RSACoder.initKey()", "testcase": false, "constructor": false}], "file": "buukle-main/buukle-util/src/main/java/top/buukle/util/RSA/RSACoder.java"}, "focal_method": {"identifier": "sign", "parameters": "(byte[] data, String privateKey)", "modifiers": "public static", "return": "String", "body": "public static String sign(byte[] data, String privateKey) throws Exception {\n        // \u89e3\u5bc6\u7531base64\u7f16\u7801\u7684\u79c1\u94a5\n        byte[] keyBytes = decryptBASE64(privateKey);\n\n        // \u6784\u9020PKCS8EncodedKeySpec\u5bf9\u8c61\n        PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(keyBytes);\n\n        // KEY_ALGORITHM \u6307\u5b9a\u7684\u52a0\u5bc6\u7b97\u6cd5\n        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);\n\n        // \u53d6\u79c1\u94a5\u5319\u5bf9\u8c61\n        PrivateKey priKey = keyFactory.generatePrivate(pkcs8KeySpec);\n\n        // \u7528\u79c1\u94a5\u5bf9\u4fe1\u606f\u751f\u6210\u6570\u5b57\u7b7e\u540d\n        Signature signature = Signature.getInstance(SIGNATURE_ALGORITHM);\n        signature.initSign(priKey);\n        signature.update(data);\n\n        return encryptBASE64(signature.sign());\n    }", "signature": "String sign(byte[] data, String privateKey)", "full_signature": "public static String sign(byte[] data, String privateKey)", "class_method_signature": "RSACoder.sign(byte[] data, String privateKey)", "testcase": false, "constructor": false, "invocations": ["decryptBASE64", "getInstance", "generatePrivate", "getInstance", "initSign", "update", "encryptBASE64", "sign"]}, "repository": {"repo_id": 151625754, "url": "https://github.com/Elvin-zl/buukle", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 10, "size": 26207, "license": "licensed"}}