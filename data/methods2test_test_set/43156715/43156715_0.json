{"test_class": {"identifier": "FilterTest", "superclass": "", "interfaces": "", "fields": [], "file": "library/src/test/java/com/github/pwittchen/reactivebeacons/library/rx2/FilterTest.java"}, "test_case": {"identifier": "proximityShouldBeEqualToImmediate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void proximityShouldBeEqualToImmediate() {\n    // given\n    Beacon beacon = Mockito.mock(Beacon.class);\n\n    // when\n    when(beacon.getProximity()).then(new Answer<Proximity>() {\n      @Override\n      public Proximity answer(InvocationOnMock invocationOnMock) throws Throwable {\n        return Proximity.IMMEDIATE;\n      }\n    });\n\n    Function<Beacon, Boolean> filter = Filter.proximityIsEqualTo(Proximity.IMMEDIATE);\n    Boolean call = apply(filter, beacon);\n\n    // then\n    assertThat(call).isTrue();\n  }", "signature": "void proximityShouldBeEqualToImmediate()", "full_signature": "@Test public void proximityShouldBeEqualToImmediate()", "class_method_signature": "FilterTest.proximityShouldBeEqualToImmediate()", "testcase": true, "constructor": false, "invocations": ["mock", "then", "when", "getProximity", "proximityIsEqualTo", "apply", "isTrue", "assertThat"]}, "focal_class": {"identifier": "Filter", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "proximityIsEqualTo", "parameters": "(final Proximity... proximities)", "modifiers": "public static", "return": "Function<Beacon, Boolean>", "signature": "Function<Beacon, Boolean> proximityIsEqualTo(final Proximity... proximities)", "full_signature": "public static Function<Beacon, Boolean> proximityIsEqualTo(final Proximity... proximities)", "class_method_signature": "Filter.proximityIsEqualTo(final Proximity... proximities)", "testcase": false, "constructor": false}, {"identifier": "proximityIsNotEqualTo", "parameters": "(final Proximity... proximities)", "modifiers": "public static", "return": "Function<Beacon, Boolean>", "signature": "Function<Beacon, Boolean> proximityIsNotEqualTo(final Proximity... proximities)", "full_signature": "public static Function<Beacon, Boolean> proximityIsNotEqualTo(final Proximity... proximities)", "class_method_signature": "Filter.proximityIsNotEqualTo(final Proximity... proximities)", "testcase": false, "constructor": false}, {"identifier": "distanceIsEqualTo", "parameters": "(final double distance)", "modifiers": "public static", "return": "Function<Beacon, Boolean>", "signature": "Function<Beacon, Boolean> distanceIsEqualTo(final double distance)", "full_signature": "public static Function<Beacon, Boolean> distanceIsEqualTo(final double distance)", "class_method_signature": "Filter.distanceIsEqualTo(final double distance)", "testcase": false, "constructor": false}, {"identifier": "distanceIsGreaterThan", "parameters": "(final double distance)", "modifiers": "public static", "return": "Function<Beacon, Boolean>", "signature": "Function<Beacon, Boolean> distanceIsGreaterThan(final double distance)", "full_signature": "public static Function<Beacon, Boolean> distanceIsGreaterThan(final double distance)", "class_method_signature": "Filter.distanceIsGreaterThan(final double distance)", "testcase": false, "constructor": false}, {"identifier": "distanceIsLowerThan", "parameters": "(final double distance)", "modifiers": "public static", "return": "Function<Beacon, Boolean>", "signature": "Function<Beacon, Boolean> distanceIsLowerThan(final double distance)", "full_signature": "public static Function<Beacon, Boolean> distanceIsLowerThan(final double distance)", "class_method_signature": "Filter.distanceIsLowerThan(final double distance)", "testcase": false, "constructor": false}, {"identifier": "hasName", "parameters": "(final String... names)", "modifiers": "public static", "return": "Function<Beacon, Boolean>", "signature": "Function<Beacon, Boolean> hasName(final String... names)", "full_signature": "public static Function<Beacon, Boolean> hasName(final String... names)", "class_method_signature": "Filter.hasName(final String... names)", "testcase": false, "constructor": false}, {"identifier": "exceptName", "parameters": "(final String... names)", "modifiers": "public static", "return": "Function<Beacon, Boolean>", "signature": "Function<Beacon, Boolean> exceptName(final String... names)", "full_signature": "public static Function<Beacon, Boolean> exceptName(final String... names)", "class_method_signature": "Filter.exceptName(final String... names)", "testcase": false, "constructor": false}, {"identifier": "hasMacAddress", "parameters": "(final String... macs)", "modifiers": "public static", "return": "Function<Beacon, Boolean>", "signature": "Function<Beacon, Boolean> hasMacAddress(final String... macs)", "full_signature": "public static Function<Beacon, Boolean> hasMacAddress(final String... macs)", "class_method_signature": "Filter.hasMacAddress(final String... macs)", "testcase": false, "constructor": false}, {"identifier": "exceptMacAddress", "parameters": "(final String... macs)", "modifiers": "public static", "return": "Function<Beacon, Boolean>", "signature": "Function<Beacon, Boolean> exceptMacAddress(final String... macs)", "full_signature": "public static Function<Beacon, Boolean> exceptMacAddress(final String... macs)", "class_method_signature": "Filter.exceptMacAddress(final String... macs)", "testcase": false, "constructor": false}, {"identifier": "hasMacAddress", "parameters": "(final MacAddress... macs)", "modifiers": "public static", "return": "Function<Beacon, Boolean>", "signature": "Function<Beacon, Boolean> hasMacAddress(final MacAddress... macs)", "full_signature": "public static Function<Beacon, Boolean> hasMacAddress(final MacAddress... macs)", "class_method_signature": "Filter.hasMacAddress(final MacAddress... macs)", "testcase": false, "constructor": false}, {"identifier": "exceptMacAddress", "parameters": "(final MacAddress... macs)", "modifiers": "public static", "return": "Function<Beacon, Boolean>", "signature": "Function<Beacon, Boolean> exceptMacAddress(final MacAddress... macs)", "full_signature": "public static Function<Beacon, Boolean> exceptMacAddress(final MacAddress... macs)", "class_method_signature": "Filter.exceptMacAddress(final MacAddress... macs)", "testcase": false, "constructor": false}], "file": "library/src/main/java/com/github/pwittchen/reactivebeacons/library/rx2/Filter.java"}, "focal_method": {"identifier": "proximityIsEqualTo", "parameters": "(final Proximity... proximities)", "modifiers": "public static", "return": "Function<Beacon, Boolean>", "body": "public static Function<Beacon, Boolean> proximityIsEqualTo(final Proximity... proximities) {\n        return new Function<Beacon, Boolean>() {\n            @Override\n            public Boolean apply(Beacon beacon) {\n                for (Proximity proximity : proximities) {\n                    if (beacon.getProximity() == proximity) {\n                        return true;\n                    }\n                }\n\n                return false;\n            }\n        };\n    }", "signature": "Function<Beacon, Boolean> proximityIsEqualTo(final Proximity... proximities)", "full_signature": "public static Function<Beacon, Boolean> proximityIsEqualTo(final Proximity... proximities)", "class_method_signature": "Filter.proximityIsEqualTo(final Proximity... proximities)", "testcase": false, "constructor": false, "invocations": ["getProximity"]}, "repository": {"repo_id": 43156715, "url": "https://github.com/pwittchen/ReactiveBeacons", "stars": 162, "created": "9/25/2015 3:44:33 PM +00:00", "updates": "2020-01-20T13:43:04+00:00", "fork": "False", "license": "licensed"}}