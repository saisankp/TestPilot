{"test_class": {"identifier": "RegexDeserializerTest", "superclass": "", "interfaces": "", "fields": [], "file": "deserializers/src/test/java/com/nextdoor/bender/deserializer/regex/RegexDeserializerTest.java"}, "test_case": {"identifier": "testSingleMatch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSingleMatch() throws FieldNotFoundException {\n    List<ReFieldConfig> fields = new ArrayList<>();\n    fields.add(new ReFieldConfig(\"foo\", ReFieldType.STRING));\n\n    Pattern p = Pattern.compile(\"(.*)\");\n    RegexDeserializer deser = new RegexDeserializer(p, fields);\n    DeserializedEvent event = deser.deserialize(\"test i am\");\n\n    assertEquals(\"test i am\", event.getField(\"foo\"));\n  }", "signature": "void testSingleMatch()", "full_signature": "@Test public void testSingleMatch()", "class_method_signature": "RegexDeserializerTest.testSingleMatch()", "testcase": true, "constructor": false, "invocations": ["add", "compile", "deserialize", "assertEquals", "getField"]}, "focal_class": {"identifier": "RegexDeserializer", "superclass": "extends Deserializer", "interfaces": "", "fields": [{"original_string": "private final Pattern pattern;", "modifier": "private final", "type": "Pattern", "declarator": "pattern", "var_name": "pattern"}, {"original_string": "private final List<ReFieldConfig> fields;", "modifier": "private final", "type": "List<ReFieldConfig>", "declarator": "fields", "var_name": "fields"}], "methods": [{"identifier": "RegexDeserializer", "parameters": "(final Pattern pattern, final List<ReFieldConfig> fields)", "modifiers": "public", "return": "", "signature": " RegexDeserializer(final Pattern pattern, final List<ReFieldConfig> fields)", "full_signature": "public  RegexDeserializer(final Pattern pattern, final List<ReFieldConfig> fields)", "class_method_signature": "RegexDeserializer.RegexDeserializer(final Pattern pattern, final List<ReFieldConfig> fields)", "testcase": false, "constructor": true}, {"identifier": "deserialize", "parameters": "(String raw)", "modifiers": "@Override public", "return": "DeserializedEvent", "signature": "DeserializedEvent deserialize(String raw)", "full_signature": "@Override public DeserializedEvent deserialize(String raw)", "class_method_signature": "RegexDeserializer.deserialize(String raw)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void init()", "full_signature": "@Override public void init()", "class_method_signature": "RegexDeserializer.init()", "testcase": false, "constructor": false}], "file": "deserializers/src/main/java/com/nextdoor/bender/deserializer/regex/RegexDeserializer.java"}, "focal_method": {"identifier": "deserialize", "parameters": "(String raw)", "modifiers": "@Override public", "return": "DeserializedEvent", "body": "@Override\n  public DeserializedEvent deserialize(String raw) {\n    Matcher m = this.pattern.matcher(raw);\n\n    if (!m.matches()) {\n      throw new DeserializationException(\"raw event does not match string\");\n    }\n\n    int groups = m.groupCount();\n\n    JsonObject obj = new JsonObject();\n    for (int i = 0; i < groups && i < fields.size(); i++) {\n      String str = m.group(i + 1);\n      ReFieldConfig field = this.fields.get(i);\n\n      switch (field.getType()) {\n        case BOOLEAN:\n          obj.addProperty(field.getName(), Boolean.parseBoolean(str));\n          break;\n        case NUMBER:\n          obj.addProperty(field.getName(), NumberUtils.createNumber(str));\n          break;\n        case STRING:\n          obj.addProperty(field.getName(), str);\n          break;\n        default:\n          obj.addProperty(field.getName(), str);\n          break;\n      }\n    }\n\n    return new GenericJsonEvent(obj);\n  }", "signature": "DeserializedEvent deserialize(String raw)", "full_signature": "@Override public DeserializedEvent deserialize(String raw)", "class_method_signature": "RegexDeserializer.deserialize(String raw)", "testcase": false, "constructor": false, "invocations": ["matcher", "matches", "groupCount", "size", "group", "get", "getType", "addProperty", "getName", "parseBoolean", "addProperty", "getName", "createNumber", "addProperty", "getName", "addProperty", "getName"]}, "repository": {"repo_id": 75955378, "url": "https://github.com/Nextdoor/bender", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 163, "size": 1503, "license": "licensed"}}