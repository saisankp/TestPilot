{"test_class": {"identifier": "EventUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "addons/tracing/tracing-decision-common/src/test/java/org/kie/kogito/tracing/decision/event/EventUtilsTest.java"}, "test_case": {"identifier": "testTypedVariableFromJsonNode", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testTypedVariableFromJsonNode() throws JsonProcessingException {\n        ObjectReader reader = new ObjectMapper().reader();\n\n        TypedValue value = EventUtils.typedValueFromJsonNode(null, null);\n        assertNotNull(value);\n        assertSame(TypedValue.Kind.UNIT, value.getKind());\n        assertEquals(BuiltInType.UNKNOWN.getName(), value.getType());\n\n        value = EventUtils.typedValueFromJsonNode(reader.readTree(\"true\"), null);\n        assertNotNull(value);\n        assertSame(TypedValue.Kind.UNIT, value.getKind());\n        assertEquals(BuiltInType.BOOLEAN.getName(), value.getType());\n\n        value = EventUtils.typedValueFromJsonNode(reader.readTree(\"12\"), null);\n        assertNotNull(value);\n        assertSame(TypedValue.Kind.UNIT, value.getKind());\n        assertEquals(BuiltInType.NUMBER.getName(), value.getType());\n\n        value = EventUtils.typedValueFromJsonNode(reader.readTree(\"\\\"test\\\"\"), null);\n        assertNotNull(value);\n        assertSame(TypedValue.Kind.UNIT, value.getKind());\n        assertEquals(BuiltInType.STRING.getName(), value.getType());\n\n        value = EventUtils.typedValueFromJsonNode(reader.readTree(\"[1,2,3]\"), null);\n        assertNotNull(value);\n        assertSame(TypedValue.Kind.COLLECTION, value.getKind());\n        assertEquals(BuiltInType.LIST.getName(), value.getType());\n\n        value = EventUtils.typedValueFromJsonNode(reader.readTree(\"{\\\"name\\\": \\\"John\\\", \\\"age\\\": 45, \\\"married\\\": true}\"), null);\n        assertNotNull(value);\n        assertSame(TypedValue.Kind.STRUCTURE, value.getKind());\n        assertEquals(BuiltInType.UNKNOWN.getName(), value.getType());\n    }", "signature": "void testTypedVariableFromJsonNode()", "full_signature": "@Test void testTypedVariableFromJsonNode()", "class_method_signature": "EventUtilsTest.testTypedVariableFromJsonNode()", "testcase": true, "constructor": false, "invocations": ["reader", "typedValueFromJsonNode", "assertNotNull", "assertSame", "getKind", "assertEquals", "getName", "getType", "typedValueFromJsonNode", "readTree", "assertNotNull", "assertSame", "getKind", "assertEquals", "getName", "getType", "typedValueFromJsonNode", "readTree", "assertNotNull", "assertSame", "getKind", "assertEquals", "getName", "getType", "typedValueFromJsonNode", "readTree", "assertNotNull", "assertSame", "getKind", "assertEquals", "getName", "getType", "typedValueFromJsonNode", "readTree", "assertNotNull", "assertSame", "getKind", "assertEquals", "getName", "getType", "typedValueFromJsonNode", "readTree", "assertNotNull", "assertSame", "getKind", "assertEquals", "getName", "getType"]}, "focal_class": {"identifier": "EventUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "OBJECT_MAPPER = new ObjectMapper()", "var_name": "OBJECT_MAPPER"}], "methods": [{"identifier": "jsonNodeFrom", "parameters": "(Object object)", "modifiers": "public static", "return": "JsonNode", "signature": "JsonNode jsonNodeFrom(Object object)", "full_signature": "public static JsonNode jsonNodeFrom(Object object)", "class_method_signature": "EventUtils.jsonNodeFrom(Object object)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(List<I> input, Function<I, O> mapper)", "modifiers": "public static", "return": "List<O>", "signature": "List<O> map(List<I> input, Function<I, O> mapper)", "full_signature": "public static List<O> map(List<I> input, Function<I, O> mapper)", "class_method_signature": "EventUtils.map(List<I> input, Function<I, O> mapper)", "testcase": false, "constructor": false}, {"identifier": "messageFrom", "parameters": "(DMNMessage message)", "modifiers": "public static", "return": "Message", "signature": "Message messageFrom(DMNMessage message)", "full_signature": "public static Message messageFrom(DMNMessage message)", "class_method_signature": "EventUtils.messageFrom(DMNMessage message)", "testcase": false, "constructor": false}, {"identifier": "messageFrom", "parameters": "(InternalMessageType message)", "modifiers": "public static", "return": "Message", "signature": "Message messageFrom(InternalMessageType message)", "full_signature": "public static Message messageFrom(InternalMessageType message)", "class_method_signature": "EventUtils.messageFrom(InternalMessageType message)", "testcase": false, "constructor": false}, {"identifier": "messageFrom", "parameters": "(InternalMessageType message, Throwable throwable)", "modifiers": "public static", "return": "Message", "signature": "Message messageFrom(InternalMessageType message, Throwable throwable)", "full_signature": "public static Message messageFrom(InternalMessageType message, Throwable throwable)", "class_method_signature": "EventUtils.messageFrom(InternalMessageType message, Throwable throwable)", "testcase": false, "constructor": false}, {"identifier": "messageExceptionFieldFrom", "parameters": "(Throwable throwable)", "modifiers": "public static", "return": "MessageExceptionField", "signature": "MessageExceptionField messageExceptionFieldFrom(Throwable throwable)", "full_signature": "public static MessageExceptionField messageExceptionFieldFrom(Throwable throwable)", "class_method_signature": "EventUtils.messageExceptionFieldFrom(Throwable throwable)", "testcase": false, "constructor": false}, {"identifier": "messageFEELEventFrom", "parameters": "(FEELEvent feelEvent)", "modifiers": "public static", "return": "MessageFEELEvent", "signature": "MessageFEELEvent messageFEELEventFrom(FEELEvent feelEvent)", "full_signature": "public static MessageFEELEvent messageFEELEventFrom(FEELEvent feelEvent)", "class_method_signature": "EventUtils.messageFEELEventFrom(FEELEvent feelEvent)", "testcase": false, "constructor": false}, {"identifier": "messageFEELEventSeverityFrom", "parameters": "(FEELEvent.Severity severity)", "modifiers": "public static", "return": "MessageFEELEventSeverity", "signature": "MessageFEELEventSeverity messageFEELEventSeverityFrom(FEELEvent.Severity severity)", "full_signature": "public static MessageFEELEventSeverity messageFEELEventSeverityFrom(FEELEvent.Severity severity)", "class_method_signature": "EventUtils.messageFEELEventSeverityFrom(FEELEvent.Severity severity)", "testcase": false, "constructor": false}, {"identifier": "messageLevelFrom", "parameters": "(org.kie.api.builder.Message.Level level)", "modifiers": "public static", "return": "MessageLevel", "signature": "MessageLevel messageLevelFrom(org.kie.api.builder.Message.Level level)", "full_signature": "public static MessageLevel messageLevelFrom(org.kie.api.builder.Message.Level level)", "class_method_signature": "EventUtils.messageLevelFrom(org.kie.api.builder.Message.Level level)", "testcase": false, "constructor": false}, {"identifier": "streamFrom", "parameters": "(Iterator<T> iterator)", "modifiers": "public static", "return": "Stream<T>", "signature": "Stream<T> streamFrom(Iterator<T> iterator)", "full_signature": "public static Stream<T> streamFrom(Iterator<T> iterator)", "class_method_signature": "EventUtils.streamFrom(Iterator<T> iterator)", "testcase": false, "constructor": false}, {"identifier": "traceResourceIdFrom", "parameters": "(String serviceUrl, DMNModel model)", "modifiers": "public static", "return": "TraceResourceId", "signature": "TraceResourceId traceResourceIdFrom(String serviceUrl, DMNModel model)", "full_signature": "public static TraceResourceId traceResourceIdFrom(String serviceUrl, DMNModel model)", "class_method_signature": "EventUtils.traceResourceIdFrom(String serviceUrl, DMNModel model)", "testcase": false, "constructor": false}, {"identifier": "typedValueFrom", "parameters": "(Object value)", "modifiers": "public static", "return": "TypedValue", "signature": "TypedValue typedValueFrom(Object value)", "full_signature": "public static TypedValue typedValueFrom(Object value)", "class_method_signature": "EventUtils.typedValueFrom(Object value)", "testcase": false, "constructor": false}, {"identifier": "typedValueFrom", "parameters": "(DMNType type, Object value)", "modifiers": "public static", "return": "TypedValue", "signature": "TypedValue typedValueFrom(DMNType type, Object value)", "full_signature": "public static TypedValue typedValueFrom(DMNType type, Object value)", "class_method_signature": "EventUtils.typedValueFrom(DMNType type, Object value)", "testcase": false, "constructor": false}, {"identifier": "typedValueFromJsonNode", "parameters": "(JsonNode value, Type suggestedType)", "modifiers": "static", "return": "TypedValue", "signature": "TypedValue typedValueFromJsonNode(JsonNode value, Type suggestedType)", "full_signature": "static TypedValue typedValueFromJsonNode(JsonNode value, Type suggestedType)", "class_method_signature": "EventUtils.typedValueFromJsonNode(JsonNode value, Type suggestedType)", "testcase": false, "constructor": false}, {"identifier": "typedValueFromJsonNode", "parameters": "(DMNType type, JsonNode value, Type suggestedType)", "modifiers": "static", "return": "TypedValue", "signature": "TypedValue typedValueFromJsonNode(DMNType type, JsonNode value, Type suggestedType)", "full_signature": "static TypedValue typedValueFromJsonNode(DMNType type, JsonNode value, Type suggestedType)", "class_method_signature": "EventUtils.typedValueFromJsonNode(DMNType type, JsonNode value, Type suggestedType)", "testcase": false, "constructor": false}, {"identifier": "baseTypeOf", "parameters": "(DMNType type)", "modifiers": "static", "return": "String", "signature": "String baseTypeOf(DMNType type)", "full_signature": "static String baseTypeOf(DMNType type)", "class_method_signature": "EventUtils.baseTypeOf(DMNType type)", "testcase": false, "constructor": false}, {"identifier": "typeOf", "parameters": "(JsonNode value)", "modifiers": "static", "return": "Type", "signature": "Type typeOf(JsonNode value)", "full_signature": "static Type typeOf(JsonNode value)", "class_method_signature": "EventUtils.typeOf(JsonNode value)", "testcase": false, "constructor": false}, {"identifier": "EventUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " EventUtils()", "full_signature": "private  EventUtils()", "class_method_signature": "EventUtils.EventUtils()", "testcase": false, "constructor": true}], "file": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/event/EventUtils.java"}, "focal_method": {"identifier": "typedValueFromJsonNode", "parameters": "(JsonNode value, Type suggestedType)", "modifiers": "static", "return": "TypedValue", "body": "static TypedValue typedValueFromJsonNode(JsonNode value, Type suggestedType) {\n        if (value != null && value.isObject()) {\n            return new StructureValue(\n                    typeOf(value).getName(),\n                    streamFrom(value.fields())\n                            .collect(HashMap::new, (map, entry) -> map.put(entry.getKey(), typedValueFromJsonNode(entry.getValue(), null)), HashMap::putAll)\n            );\n        }\n        if (value != null && value.isArray()) {\n            return new CollectionValue(\n                    typeOf(value).getName(),\n                    streamFrom(value.elements()).map(v -> typedValueFromJsonNode(v, null)).collect(Collectors.toList())\n            );\n        }\n        Type finalType = Optional.ofNullable(suggestedType).orElseGet(() -> typeOf(value));\n        return new UnitValue(finalType.getName(), value);\n    }", "signature": "TypedValue typedValueFromJsonNode(JsonNode value, Type suggestedType)", "full_signature": "static TypedValue typedValueFromJsonNode(JsonNode value, Type suggestedType)", "class_method_signature": "EventUtils.typedValueFromJsonNode(JsonNode value, Type suggestedType)", "testcase": false, "constructor": false, "invocations": ["isObject", "getName", "typeOf", "collect", "streamFrom", "fields", "put", "getKey", "typedValueFromJsonNode", "getValue", "isArray", "getName", "typeOf", "collect", "map", "streamFrom", "elements", "typedValueFromJsonNode", "toList", "orElseGet", "ofNullable", "typeOf", "getName"]}, "repository": {"repo_id": 174306645, "url": "https://github.com/kiegroup/kogito-runtimes", "stars": 78, "created": "3/7/2019 8:49:09 AM +00:00", "updates": "2020-01-26T20:41:49+00:00", "fork": "False", "license": "licensed"}}