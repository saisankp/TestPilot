{"test_class": {"identifier": "IOSStringsResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final File INPUT = new File(\"src/test/resource/resfilter/ios/input.strings\");", "modifier": "private static final", "type": "File", "declarator": "INPUT = new File(\"src/test/resource/resfilter/ios/input.strings\")", "var_name": "INPUT"}, {"original_string": "private static final File EXPECTED_WRITE_FILE = new File(\"src/test/resource/resfilter/ios/write-output.strings\");", "modifier": "private static final", "type": "File", "declarator": "EXPECTED_WRITE_FILE = new File(\"src/test/resource/resfilter/ios/write-output.strings\")", "var_name": "EXPECTED_WRITE_FILE"}, {"original_string": "private static final File MERGE_INPUT_1_FILE = new File(\"src/test/resource/resfilter/ios/merge-input-1.strings\");", "modifier": "private static final", "type": "File", "declarator": "MERGE_INPUT_1_FILE = new File(\"src/test/resource/resfilter/ios/merge-input-1.strings\")", "var_name": "MERGE_INPUT_1_FILE"}, {"original_string": "private static final File MERGE_INPUT_2_FILE = new File(\"src/test/resource/resfilter/ios/merge-input-2.strings\");", "modifier": "private static final", "type": "File", "declarator": "MERGE_INPUT_2_FILE = new File(\"src/test/resource/resfilter/ios/merge-input-2.strings\")", "var_name": "MERGE_INPUT_2_FILE"}, {"original_string": "private static final File EXPECTED_MERGE_1_FILE = new File(\"src/test/resource/resfilter/ios/merge-output-1.strings\");", "modifier": "private static final", "type": "File", "declarator": "EXPECTED_MERGE_1_FILE = new File(\"src/test/resource/resfilter/ios/merge-output-1.strings\")", "var_name": "EXPECTED_MERGE_1_FILE"}, {"original_string": "private static final File EXPECTED_MERGE_2_FILE = new File(\"src/test/resource/resfilter/ios/merge-output-2.strings\");", "modifier": "private static final", "type": "File", "declarator": "EXPECTED_MERGE_2_FILE = new File(\"src/test/resource/resfilter/ios/merge-output-2.strings\")", "var_name": "EXPECTED_MERGE_2_FILE"}, {"original_string": "private static final Collection<ResourceString> EXPECTED_INPUT_RES_LIST;", "modifier": "private static final", "type": "Collection<ResourceString>", "declarator": "EXPECTED_INPUT_RES_LIST", "var_name": "EXPECTED_INPUT_RES_LIST"}, {"original_string": "private static final List<String> EXPECTED_GLOBAL_NOTES = Arrays.asList(\n            \" This is the first global comment... \",\n            \" This is the 2nd global comment... \");", "modifier": "private static final", "type": "List<String>", "declarator": "EXPECTED_GLOBAL_NOTES = Arrays.asList(\n            \" This is the first global comment... \",\n            \" This is the 2nd global comment... \")", "var_name": "EXPECTED_GLOBAL_NOTES"}, {"original_string": "private static LanguageBundle WRITE_BUNDLE;", "modifier": "private static", "type": "LanguageBundle", "declarator": "WRITE_BUNDLE", "var_name": "WRITE_BUNDLE"}, {"original_string": "private static LanguageBundle MERGE_BUNDLE;", "modifier": "private static", "type": "LanguageBundle", "declarator": "MERGE_BUNDLE", "var_name": "MERGE_BUNDLE"}, {"original_string": "private static final IOSStringsResource res = new IOSStringsResource();", "modifier": "private static final", "type": "IOSStringsResource", "declarator": "res = new IOSStringsResource()", "var_name": "res"}], "file": "gp-res-filter/src/test/java/com/ibm/g11n/pipeline/resfilter/impl/IOSStringsResourceTest.java"}, "test_case": {"identifier": "testParse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParse() throws IOException, ResourceFilterException {\n        assertTrue(\"The input test file <\" + INPUT + \"> does not exist.\", INPUT.exists());\n\n        try (InputStream is = new FileInputStream(INPUT)) {\n            LanguageBundle bundle = res.parse(is, null);\n            List<ResourceString> resStrList = new ArrayList<>(bundle.getResourceStrings());\n            Collections.sort(resStrList, new ResourceStringComparator());\n            assertEquals(\"ResourceStrings did not match.\", EXPECTED_INPUT_RES_LIST, resStrList);\n            List<String> globalNotes = bundle.getNotes();\n            assertEquals(\"Global comments did not match.\", EXPECTED_GLOBAL_NOTES, globalNotes);\n        }\n    }", "signature": "void testParse()", "full_signature": "@Test public void testParse()", "class_method_signature": "IOSStringsResourceTest.testParse()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "exists", "parse", "getResourceStrings", "sort", "assertEquals", "getNotes", "assertEquals"]}, "focal_class": {"identifier": "IOSStringsResource", "superclass": "extends ResourceFilter", "interfaces": "", "fields": [{"original_string": "private static final String CHAR_SET = \"UTF-8\";", "modifier": "private static final", "type": "String", "declarator": "CHAR_SET = \"UTF-8\"", "var_name": "CHAR_SET"}, {"original_string": "private static final String COMMENT_BEGIN = \"/*\";", "modifier": "private static final", "type": "String", "declarator": "COMMENT_BEGIN = \"/*\"", "var_name": "COMMENT_BEGIN"}, {"original_string": "private static final String COMMENT_END = \"*/\";", "modifier": "private static final", "type": "String", "declarator": "COMMENT_END = \"*/\"", "var_name": "COMMENT_END"}], "methods": [{"identifier": "parse", "parameters": "(InputStream inStream, FilterOptions options)", "modifiers": "@Override public", "return": "LanguageBundle", "signature": "LanguageBundle parse(InputStream inStream, FilterOptions options)", "full_signature": "@Override public LanguageBundle parse(InputStream inStream, FilterOptions options)", "class_method_signature": "IOSStringsResource.parse(InputStream inStream, FilterOptions options)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "modifiers": "@Override public", "return": "void", "signature": "void write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "full_signature": "@Override public void write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "class_method_signature": "IOSStringsResource.write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "modifiers": "@Override public", "return": "void", "signature": "void merge(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "full_signature": "@Override public void merge(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "class_method_signature": "IOSStringsResource.merge(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "testcase": false, "constructor": false}, {"identifier": "formatEntry", "parameters": "(String key, String value, List<String> notes, BreakIterator brkItr)", "modifiers": "static", "return": "String", "signature": "String formatEntry(String key, String value, List<String> notes, BreakIterator brkItr)", "full_signature": "static String formatEntry(String key, String value, List<String> notes, BreakIterator brkItr)", "class_method_signature": "IOSStringsResource.formatEntry(String key, String value, List<String> notes, BreakIterator brkItr)", "testcase": false, "constructor": false}], "file": "gp-res-filter/src/main/java/com/ibm/g11n/pipeline/resfilter/impl/IOSStringsResource.java"}, "focal_method": {"identifier": "parse", "parameters": "(InputStream inStream, FilterOptions options)", "modifiers": "@Override public", "return": "LanguageBundle", "body": "@Override\n    public LanguageBundle parse(InputStream inStream, FilterOptions options)\n            throws IOException, ResourceFilterException {\n\n        BufferedReader reader = new BufferedReader(new InputStreamReader(inStream, CHAR_SET));\n        LanguageBundleBuilder bb = new LanguageBundleBuilder(true);\n        String line;\n        List<String> notes = new ArrayList<>();\n        Boolean commentIsGlobal = true;\n        while ((line = reader.readLine()) != null) {\n            if (line.trim().startsWith(COMMENT_BEGIN)) {// begins with /*\n                // skip comments until line ends with */\n                // the short circuit expression evaluation handles both\n                // single and multi lined comments\n                String comment = line.substring(line.indexOf(COMMENT_BEGIN)+2);\n                Boolean commentEndProcessed = false;\n                while (!commentEndProcessed && line != null) {\n                    if (comment.trim().endsWith(COMMENT_END)) {\n                        comment = comment.substring(0, comment.lastIndexOf(COMMENT_END));\n                        commentEndProcessed = true;\n                    }\n                    notes.add(comment);\n                    if (!commentEndProcessed) {\n                        line = reader.readLine();\n                        comment = line;\n                    }\n                }\n            } else if (commentIsGlobal && line.isEmpty()) {\n                commentIsGlobal = false;\n                if (!notes.isEmpty()) {\n                    bb.addNotes(notes);\n                    notes.clear();\n                }\n            } else if (line.matches(\"^\\\\s*\\\".*\")) { // begins with quote char\n                // new entry\n                StringBuilder entry = new StringBuilder(128);\n\n                // keep appending lines until entry termination via semi-colon\n                do {\n                    entry.append(line.trim()).append(' ');\n                } while (!line.matches(\".*[^\\\\\\\\];\\\\s*$\") && (line = reader.readLine()) != null);\n\n                // split across \" = \"\n                String[] parts = entry.toString().split(\"\\\"\\\\s*=\\\\s*\\\"\");\n                String key = parts[0].substring(parts[0].indexOf('\"') + 1).trim();\n                String value = parts[1].substring(0, parts[1].lastIndexOf('\"')).trim();\n\n                if (notes.isEmpty()) {\n                    bb.addResourceString(key, value);\n                } else {\n                    bb.addResourceString(ResourceString.with(key, value).notes(notes));\n                    notes.clear();\n                }\n            }\n        }\n        return bb.build();\n    }", "signature": "LanguageBundle parse(InputStream inStream, FilterOptions options)", "full_signature": "@Override public LanguageBundle parse(InputStream inStream, FilterOptions options)", "class_method_signature": "IOSStringsResource.parse(InputStream inStream, FilterOptions options)", "testcase": false, "constructor": false, "invocations": ["readLine", "startsWith", "trim", "substring", "indexOf", "endsWith", "trim", "substring", "lastIndexOf", "add", "readLine", "isEmpty", "isEmpty", "addNotes", "clear", "matches", "append", "append", "trim", "matches", "readLine", "split", "toString", "trim", "substring", "indexOf", "trim", "substring", "lastIndexOf", "isEmpty", "addResourceString", "addResourceString", "notes", "with", "clear", "build"]}, "repository": {"repo_id": 46134098, "url": "https://github.com/IBM-Cloud/gp-java-tools", "language": "Java", "is_fork": false, "fork_count": 16, "stargazer_count": 9, "size": 6216, "license": "licensed"}}