{"test_class": {"identifier": "AWSEmailProviderTest", "superclass": "", "interfaces": "", "fields": [], "file": "libs/java/server_common/src/test/java/com/yahoo/athenz/common/server/notification/impl/AWSEmailProviderTest.java"}, "test_case": {"identifier": "testSendEmailError", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSendEmailError() {\n\n        Set<String> recipients = new HashSet<>(Arrays.asList(\"user.user1\", \"user.user2\", \"user.user3\"));\n        String subject = \"test email subject\";\n        String body = \"test email body\";\n        System.setProperty(\"athenz.notification_email_domain_to\", \"example.com\");\n        System.setProperty(\"athenz.notification_email_domain_from\", \"from.example.com\");\n        System.setProperty(\"athenz.notification_email_from\", \"no-reply-athenz\");\n\n        AmazonSimpleEmailService ses = mock(AmazonSimpleEmailService.class);\n        Mockito.when(ses.sendEmail(any(SendEmailRequest.class))).thenThrow(new RuntimeException());\n        AWSEmailProvider awsEmailProvider = new AWSEmailProvider(ses);\n\n        EmailNotificationService svc = new EmailNotificationService(awsEmailProvider);\n\n        boolean result = svc.sendEmail(recipients, subject, body);\n        assertFalse(result);\n\n        System.clearProperty(\"athenz.notification_email_domain_from\");\n        System.clearProperty(\"athenz.notification_email_domain_to\");\n        System.clearProperty(\"athenz.notification_email_from\");\n    }", "signature": "void testSendEmailError()", "full_signature": "@Test public void testSendEmailError()", "class_method_signature": "AWSEmailProviderTest.testSendEmailError()", "testcase": true, "constructor": false, "invocations": ["asList", "setProperty", "setProperty", "setProperty", "mock", "thenThrow", "when", "sendEmail", "any", "sendEmail", "assertFalse", "clearProperty", "clearProperty", "clearProperty"]}, "focal_class": {"identifier": "AWSEmailProvider", "superclass": "", "interfaces": "implements EmailProvider", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(AWSEmailProvider.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(AWSEmailProvider.class)", "var_name": "LOGGER"}, {"original_string": "private final AmazonSimpleEmailService ses;", "modifier": "private final", "type": "AmazonSimpleEmailService", "declarator": "ses", "var_name": "ses"}], "methods": [{"identifier": "sendEmail", "parameters": "(Collection<String> recipients, String from, MimeMessage mimeMessage)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean sendEmail(Collection<String> recipients, String from, MimeMessage mimeMessage)", "full_signature": "@Override public boolean sendEmail(Collection<String> recipients, String from, MimeMessage mimeMessage)", "class_method_signature": "AWSEmailProvider.sendEmail(Collection<String> recipients, String from, MimeMessage mimeMessage)", "testcase": false, "constructor": false}, {"identifier": "AWSEmailProvider", "parameters": "()", "modifiers": "", "return": "", "signature": " AWSEmailProvider()", "full_signature": "  AWSEmailProvider()", "class_method_signature": "AWSEmailProvider.AWSEmailProvider()", "testcase": false, "constructor": true}, {"identifier": "AWSEmailProvider", "parameters": "(AmazonSimpleEmailService ses)", "modifiers": "", "return": "", "signature": " AWSEmailProvider(AmazonSimpleEmailService ses)", "full_signature": "  AWSEmailProvider(AmazonSimpleEmailService ses)", "class_method_signature": "AWSEmailProvider.AWSEmailProvider(AmazonSimpleEmailService ses)", "testcase": false, "constructor": true}, {"identifier": "initSES", "parameters": "()", "modifiers": "private static", "return": "AmazonSimpleEmailService", "signature": "AmazonSimpleEmailService initSES()", "full_signature": "private static AmazonSimpleEmailService initSES()", "class_method_signature": "AWSEmailProvider.initSES()", "testcase": false, "constructor": false}], "file": "libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/notification/impl/AWSEmailProvider.java"}, "focal_method": {"identifier": "sendEmail", "parameters": "(Collection<String> recipients, String from, MimeMessage mimeMessage)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean sendEmail(Collection<String> recipients, String from, MimeMessage mimeMessage) {\n        try {\n            try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {\n                mimeMessage.writeTo(outputStream);\n                RawMessage rawMessage = new RawMessage(ByteBuffer.wrap(outputStream.toByteArray()));\n                SendRawEmailRequest rawEmailRequest = new SendRawEmailRequest(rawMessage);\n                SendRawEmailResult result = ses.sendRawEmail(rawEmailRequest);\n                if (LOGGER.isDebugEnabled()) {\n                    LOGGER.debug(\"Email with messageId={} sent successfully.\", result.getMessageId());\n                }\n                return result != null;\n            }\n        } catch (Exception ex) {\n            LOGGER.error(\"The email could not be sent. Error message: {}\", ex.getMessage());\n            return false;\n        }\n    }", "signature": "boolean sendEmail(Collection<String> recipients, String from, MimeMessage mimeMessage)", "full_signature": "@Override public boolean sendEmail(Collection<String> recipients, String from, MimeMessage mimeMessage)", "class_method_signature": "AWSEmailProvider.sendEmail(Collection<String> recipients, String from, MimeMessage mimeMessage)", "testcase": false, "constructor": false, "invocations": ["writeTo", "wrap", "toByteArray", "sendRawEmail", "isDebugEnabled", "debug", "getMessageId", "error", "getMessage"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}