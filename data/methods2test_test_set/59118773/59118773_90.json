{"test_class": {"identifier": "OcdsControllerTest", "superclass": "extends AbstractEndPointControllerTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private OcdsController ocdsController;", "modifier": "@Autowired\n    private", "type": "OcdsController", "declarator": "ocdsController", "var_name": "ocdsController"}], "file": "web/src/test/java/org/devgateway/ocds/web/rest/controller/OcdsControllerTest.java"}, "test_case": {"identifier": "createReleasePackage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void createReleasePackage() throws Exception {\n        final ReleasePackage releasePackage = ocdsController.createReleasePackage(\n                ocdsController.ocdsByOcid(\"ocds-endpoint-001\"));\n\n        Assert.assertNotNull(releasePackage);\n        final Optional<Release> release = releasePackage.getReleases().stream().findFirst();\n        Assert.assertEquals(true, release.isPresent());\n        Assert.assertEquals(\"ocds-endpoint-001\", release.get().getOcid());\n    }", "signature": "void createReleasePackage()", "full_signature": "@Test public void createReleasePackage()", "class_method_signature": "OcdsControllerTest.createReleasePackage()", "testcase": true, "constructor": false, "invocations": ["createReleasePackage", "ocdsByOcid", "assertNotNull", "findFirst", "stream", "getReleases", "assertEquals", "isPresent", "assertEquals", "getOcid", "get"]}, "focal_class": {"identifier": "OcdsController", "superclass": "extends GenericOCDSController", "interfaces": "", "fields": [{"original_string": "private static final String SERVER_DOMAIN = \"http://ocexplorer.dgstg.org\";", "modifier": "private static final", "type": "String", "declarator": "SERVER_DOMAIN = \"http://ocexplorer.dgstg.org\"", "var_name": "SERVER_DOMAIN"}, {"original_string": "@Autowired\n    private ReleaseRepository releaseRepository;", "modifier": "@Autowired\n    private", "type": "ReleaseRepository", "declarator": "releaseRepository", "var_name": "releaseRepository"}, {"original_string": "@Autowired\n    private FlaggedReleaseRepository flaggedReleaseRepository;", "modifier": "@Autowired\n    private", "type": "FlaggedReleaseRepository", "declarator": "flaggedReleaseRepository", "var_name": "flaggedReleaseRepository"}], "methods": [{"identifier": "ocdsByProjectId", "parameters": "(@PathVariable final String projectId)", "modifiers": "@ApiOperation(value = \"Returns a release entity for the given project id. \" + \"The project id is read from planning.budget.projectID\") @RequestMapping(value = \"/api/ocds/release/budgetProjectId/{projectId:^[a-zA-Z0-9]*$}\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") @JsonView(Views.Public.class) public", "return": "Release", "signature": "Release ocdsByProjectId(@PathVariable final String projectId)", "full_signature": "@ApiOperation(value = \"Returns a release entity for the given project id. \" + \"The project id is read from planning.budget.projectID\") @RequestMapping(value = \"/api/ocds/release/budgetProjectId/{projectId:^[a-zA-Z0-9]*$}\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") @JsonView(Views.Public.class) public Release ocdsByProjectId(@PathVariable final String projectId)", "class_method_signature": "OcdsController.ocdsByProjectId(@PathVariable final String projectId)", "testcase": false, "constructor": false}, {"identifier": "ocdsByOcid", "parameters": "(@PathVariable final String ocid)", "modifiers": "@ApiOperation(value = \"Returns a release entity for the given open contracting id (OCID).\") @RequestMapping(value = \"/api/ocds/release/ocid/{ocid}\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") @JsonView(Views.Public.class) public", "return": "Release", "signature": "Release ocdsByOcid(@PathVariable final String ocid)", "full_signature": "@ApiOperation(value = \"Returns a release entity for the given open contracting id (OCID).\") @RequestMapping(value = \"/api/ocds/release/ocid/{ocid}\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") @JsonView(Views.Public.class) public Release ocdsByOcid(@PathVariable final String ocid)", "class_method_signature": "OcdsController.ocdsByOcid(@PathVariable final String ocid)", "testcase": false, "constructor": false}, {"identifier": "ocdsPackageByOcid", "parameters": "(@PathVariable final String ocid)", "modifiers": "@ApiOperation(value = \"Returns a release package for the given open contracting id (OCID).\" + \"This will contain the OCDS package information (metadata about publisher) plus the release itself.\") @RequestMapping(value = \"/api/ocds/package/ocid/{ocid}\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") @JsonView(Views.Public.class) public", "return": "ReleasePackage", "signature": "ReleasePackage ocdsPackageByOcid(@PathVariable final String ocid)", "full_signature": "@ApiOperation(value = \"Returns a release package for the given open contracting id (OCID).\" + \"This will contain the OCDS package information (metadata about publisher) plus the release itself.\") @RequestMapping(value = \"/api/ocds/package/ocid/{ocid}\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") @JsonView(Views.Public.class) public ReleasePackage ocdsPackageByOcid(@PathVariable final String ocid)", "class_method_signature": "OcdsController.ocdsPackageByOcid(@PathVariable final String ocid)", "testcase": false, "constructor": false}, {"identifier": "createReleasePackage", "parameters": "(final Release release)", "modifiers": "public", "return": "ReleasePackage", "signature": "ReleasePackage createReleasePackage(final Release release)", "full_signature": "public ReleasePackage createReleasePackage(final Release release)", "class_method_signature": "OcdsController.createReleasePackage(final Release release)", "testcase": false, "constructor": false}, {"identifier": "packagedReleaseByProjectId", "parameters": "(@PathVariable final String projectId)", "modifiers": "@ApiOperation(value = \"Returns a release package for the given project id. \" + \"The project id is read from planning.budget.projectID.\" + \"This will contain the OCDS package information (metadata about publisher) plus the release itself.\") @RequestMapping(value = \"/api/ocds/package/budgetProjectId/{projectId:^[a-zA-Z0-9]*$}\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") @JsonView(Views.Public.class) public", "return": "ReleasePackage", "signature": "ReleasePackage packagedReleaseByProjectId(@PathVariable final String projectId)", "full_signature": "@ApiOperation(value = \"Returns a release package for the given project id. \" + \"The project id is read from planning.budget.projectID.\" + \"This will contain the OCDS package information (metadata about publisher) plus the release itself.\") @RequestMapping(value = \"/api/ocds/package/budgetProjectId/{projectId:^[a-zA-Z0-9]*$}\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") @JsonView(Views.Public.class) public ReleasePackage packagedReleaseByProjectId(@PathVariable final String projectId)", "class_method_signature": "OcdsController.packagedReleaseByProjectId(@PathVariable final String projectId)", "testcase": false, "constructor": false}, {"identifier": "ocdsReleases", "parameters": "(@ModelAttribute @Valid final YearFilterPagingRequest releaseRequest)", "modifiers": "@ApiOperation(value = \"Resturns all available releases, filtered by the given criteria.\") @RequestMapping(value = \"/api/ocds/release/all\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") @JsonView(Views.Public.class) public", "return": "List<Release>", "signature": "List<Release> ocdsReleases(@ModelAttribute @Valid final YearFilterPagingRequest releaseRequest)", "full_signature": "@ApiOperation(value = \"Resturns all available releases, filtered by the given criteria.\") @RequestMapping(value = \"/api/ocds/release/all\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") @JsonView(Views.Public.class) public List<Release> ocdsReleases(@ModelAttribute @Valid final YearFilterPagingRequest releaseRequest)", "class_method_signature": "OcdsController.ocdsReleases(@ModelAttribute @Valid final YearFilterPagingRequest releaseRequest)", "testcase": false, "constructor": false}, {"identifier": "ocdsReleasesCount", "parameters": "(@ModelAttribute @Valid final YearFilterPagingRequest releaseRequest)", "modifiers": "@ApiOperation(value = \"Counts releases, filter by given criteria\") @RequestMapping(value = \"/api/ocds/release/count\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") @JsonView(Views.Public.class) @Cacheable public", "return": "Long", "signature": "Long ocdsReleasesCount(@ModelAttribute @Valid final YearFilterPagingRequest releaseRequest)", "full_signature": "@ApiOperation(value = \"Counts releases, filter by given criteria\") @RequestMapping(value = \"/api/ocds/release/count\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") @JsonView(Views.Public.class) @Cacheable public Long ocdsReleasesCount(@ModelAttribute @Valid final YearFilterPagingRequest releaseRequest)", "class_method_signature": "OcdsController.ocdsReleasesCount(@ModelAttribute @Valid final YearFilterPagingRequest releaseRequest)", "testcase": false, "constructor": false}, {"identifier": "flaggedOcdsReleases", "parameters": "(\n            @ModelAttribute @Valid final YearFilterPagingRequest releaseRequest)", "modifiers": "@ApiOperation(value = \"Resturns all available releases with flags, filtered by the given criteria.\") @RequestMapping(value = \"/api/flaggedRelease/all\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") @JsonView(Views.Internal.class) public", "return": "List<FlaggedRelease>", "signature": "List<FlaggedRelease> flaggedOcdsReleases(\n            @ModelAttribute @Valid final YearFilterPagingRequest releaseRequest)", "full_signature": "@ApiOperation(value = \"Resturns all available releases with flags, filtered by the given criteria.\") @RequestMapping(value = \"/api/flaggedRelease/all\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") @JsonView(Views.Internal.class) public List<FlaggedRelease> flaggedOcdsReleases(\n            @ModelAttribute @Valid final YearFilterPagingRequest releaseRequest)", "class_method_signature": "OcdsController.flaggedOcdsReleases(\n            @ModelAttribute @Valid final YearFilterPagingRequest releaseRequest)", "testcase": false, "constructor": false}, {"identifier": "countFlaggedOcdsReleases", "parameters": "(\n            @ModelAttribute @Valid final YearFilterPagingRequest releaseRequest)", "modifiers": "@ApiOperation(value = \"Counts all available releases with flags, filtered by the given criteria.\") @RequestMapping(value = \"/api/flaggedRelease/count\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") @JsonView(Views.Internal.class) @Cacheable public", "return": "Long", "signature": "Long countFlaggedOcdsReleases(\n            @ModelAttribute @Valid final YearFilterPagingRequest releaseRequest)", "full_signature": "@ApiOperation(value = \"Counts all available releases with flags, filtered by the given criteria.\") @RequestMapping(value = \"/api/flaggedRelease/count\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") @JsonView(Views.Internal.class) @Cacheable public Long countFlaggedOcdsReleases(\n            @ModelAttribute @Valid final YearFilterPagingRequest releaseRequest)", "class_method_signature": "OcdsController.countFlaggedOcdsReleases(\n            @ModelAttribute @Valid final YearFilterPagingRequest releaseRequest)", "testcase": false, "constructor": false}, {"identifier": "flaggedReleaseByOcid", "parameters": "(@PathVariable final String ocid)", "modifiers": "@ApiOperation(value = \"Returns a release entity for the given open contracting id (OCID).\") @RequestMapping(value = \"/api/flaggedRelease/ocid/{ocid}\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") @JsonView(Views.Internal.class) public", "return": "FlaggedRelease", "signature": "FlaggedRelease flaggedReleaseByOcid(@PathVariable final String ocid)", "full_signature": "@ApiOperation(value = \"Returns a release entity for the given open contracting id (OCID).\") @RequestMapping(value = \"/api/flaggedRelease/ocid/{ocid}\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") @JsonView(Views.Internal.class) public FlaggedRelease flaggedReleaseByOcid(@PathVariable final String ocid)", "class_method_signature": "OcdsController.flaggedReleaseByOcid(@PathVariable final String ocid)", "testcase": false, "constructor": false}, {"identifier": "ocdsPackages", "parameters": "(@ModelAttribute @Valid final YearFilterPagingRequest releaseRequest)", "modifiers": "@ApiOperation(value = \"Returns all available packages, filtered by the given criteria.\" + \"This will contain the OCDS package information (metadata about publisher) plus the release itself.\") @RequestMapping(value = \"/api/ocds/package/all\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") @JsonView(Views.Public.class) public", "return": "List<ReleasePackage>", "signature": "List<ReleasePackage> ocdsPackages(@ModelAttribute @Valid final YearFilterPagingRequest releaseRequest)", "full_signature": "@ApiOperation(value = \"Returns all available packages, filtered by the given criteria.\" + \"This will contain the OCDS package information (metadata about publisher) plus the release itself.\") @RequestMapping(value = \"/api/ocds/package/all\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") @JsonView(Views.Public.class) public List<ReleasePackage> ocdsPackages(@ModelAttribute @Valid final YearFilterPagingRequest releaseRequest)", "class_method_signature": "OcdsController.ocdsPackages(@ModelAttribute @Valid final YearFilterPagingRequest releaseRequest)", "testcase": false, "constructor": false}], "file": "web/src/main/java/org/devgateway/ocds/web/rest/controller/OcdsController.java"}, "focal_method": {"identifier": "createReleasePackage", "parameters": "(final Release release)", "modifiers": "public", "return": "ReleasePackage", "body": "public ReleasePackage createReleasePackage(final Release release) {\n        ReleasePackage releasePackage = new ReleasePackage();\n        try {\n            releasePackage.setLicense(new URI(\"https://creativecommons.org/licenses/by/2.0/\"));\n            releasePackage.setPublicationPolicy(new URI(\"https://github.com/open-contracting/sample-data/\"));\n            releasePackage.setUri(new URI(SERVER_DOMAIN + \"/api/ocds/package/ocid/\" + release.getOcid()));\n        } catch (URISyntaxException e) {\n            e.printStackTrace();\n        }\n        releasePackage.setPublishedDate(release.getDate());\n        releasePackage.getReleases().add(release);\n\n        Publisher publisher = new Publisher();\n\n        publisher.setName(\"Government of Vietnam: Public Procurement Agency\");\n        publisher.setScheme(\"VN-PPA\");\n        publisher.setUid(release.getOcid());\n        publisher.setUri(SERVER_DOMAIN);\n        releasePackage.setPublisher(publisher);\n        return releasePackage;\n    }", "signature": "ReleasePackage createReleasePackage(final Release release)", "full_signature": "public ReleasePackage createReleasePackage(final Release release)", "class_method_signature": "OcdsController.createReleasePackage(final Release release)", "testcase": false, "constructor": false, "invocations": ["setLicense", "setPublicationPolicy", "setUri", "getOcid", "printStackTrace", "setPublishedDate", "getDate", "add", "getReleases", "setName", "setScheme", "setUid", "getOcid", "setUri", "setPublisher"]}, "repository": {"repo_id": 59118773, "url": "https://github.com/devgateway/oc-explorer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 9004, "license": "licensed"}}