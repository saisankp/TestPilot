{"test_class": {"identifier": "JobCheckpointsHandlerTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-runtime-web/src/test/java/org/apache/flink/runtime/webmonitor/handlers/JobCheckpointsHandlerTest.java"}, "test_case": {"identifier": "testStats", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testStats() throws Exception {\n\t\tJobCheckpointsHandler handler = new JobCheckpointsHandler(\n\t\t\t\tmock(ExecutionGraphHolder.class));\n\n\t\tExecutionGraph graph = mock(ExecutionGraph.class);\n\t\tCheckpointStatsTracker tracker = mock(CheckpointStatsTracker.class);\n\n\t\twhen(graph.getCheckpointStatsTracker()).thenReturn(tracker);\n\n\t\tfinal List<CheckpointStats> history = new ArrayList<>();\n\t\thistory.add(new CheckpointStats(0, 1, 1, 124));\n\t\thistory.add(new CheckpointStats(1, 5, 177, 0));\n\t\thistory.add(new CheckpointStats(2, 6, 8282, 2));\n\t\thistory.add(new CheckpointStats(3, 6812, 2800, 1024));\n\n\t\tJobCheckpointStats stats = new JobCheckpointStats() {\n\t\t\t@Override\n\t\t\tpublic List<CheckpointStats> getRecentHistory() {\n\t\t\t\treturn history;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic long getCount() {\n\t\t\t\treturn 4;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic long getMinDuration() {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic long getMaxDuration() {\n\t\t\t\treturn 8282;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic long getAverageDuration() {\n\t\t\t\treturn 2815;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic long getMinStateSize() {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic long getMaxStateSize() {\n\t\t\t\treturn 1024;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic long getAverageStateSize() {\n\t\t\t\treturn 287;\n\t\t\t}\n\t\t};\n\n\t\twhen(tracker.getJobStats()).thenReturn(Option.apply(stats));\n\n\t\t// Request stats\n\t\tString response = handler.handleRequest(graph, Collections.<String, String>emptyMap());\n\n\t\tObjectMapper mapper = new ObjectMapper();\n\t\tJsonNode rootNode = mapper.readTree(response);\n\n\t\t// Count\n\t\tint count = rootNode.get(\"count\").asInt();\n\t\tassertEquals(stats.getCount(), count);\n\n\t\t// Duration\n\t\tJsonNode durationNode = rootNode.get(\"duration\");\n\t\tassertNotNull(durationNode);\n\n\t\tlong minDuration = durationNode.get(\"min\").asLong();\n\t\tlong maxDuration = durationNode.get(\"max\").asLong();\n\t\tlong avgDuration = durationNode.get(\"avg\").asLong();\n\n\t\tassertEquals(stats.getMinDuration(), minDuration);\n\t\tassertEquals(stats.getMaxDuration(), maxDuration);\n\t\tassertEquals(stats.getAverageDuration(), avgDuration);\n\n\t\t// State size\n\t\tJsonNode sizeNode = rootNode.get(\"size\");\n\t\tassertNotNull(sizeNode);\n\n\t\tlong minSize = sizeNode.get(\"min\").asLong();\n\t\tlong maxSize = sizeNode.get(\"max\").asLong();\n\t\tlong avgSize = sizeNode.get(\"avg\").asLong();\n\n\t\tassertEquals(stats.getMinStateSize(), minSize);\n\t\tassertEquals(stats.getMaxStateSize(), maxSize);\n\t\tassertEquals(stats.getAverageStateSize(), avgSize);\n\n\t\tJsonNode historyNode = rootNode.get(\"history\");\n\t\tassertNotNull(historyNode);\n\t\tassertTrue(historyNode.isArray());\n\n\t\tIterator<JsonNode> it = historyNode.elements();\n\n\t\tfor (int i = 0; i < history.size(); i++) {\n\t\t\tCheckpointStats s = history.get(i);\n\n\t\t\tJsonNode node = it.next();\n\n\t\t\tlong checkpointId = node.get(\"id\").asLong();\n\t\t\tlong timestamp = node.get(\"timestamp\").asLong();\n\t\t\tlong duration = node.get(\"duration\").asLong();\n\t\t\tlong size = node.get(\"size\").asLong();\n\n\t\t\tassertEquals(s.getCheckpointId(), checkpointId);\n\t\t\tassertEquals(s.getTriggerTimestamp(), timestamp);\n\t\t\tassertEquals(s.getDuration(), duration);\n\t\t\tassertEquals(s.getStateSize(), size);\n\t\t}\n\n\t\tassertFalse(it.hasNext());\n\t}", "signature": "void testStats()", "full_signature": "@Test public void testStats()", "class_method_signature": "JobCheckpointsHandlerTest.testStats()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "thenReturn", "when", "getCheckpointStatsTracker", "add", "add", "add", "add", "thenReturn", "when", "getJobStats", "apply", "handleRequest", "emptyMap", "readTree", "asInt", "get", "assertEquals", "getCount", "get", "assertNotNull", "asLong", "get", "asLong", "get", "asLong", "get", "assertEquals", "getMinDuration", "assertEquals", "getMaxDuration", "assertEquals", "getAverageDuration", "get", "assertNotNull", "asLong", "get", "asLong", "get", "asLong", "get", "assertEquals", "getMinStateSize", "assertEquals", "getMaxStateSize", "assertEquals", "getAverageStateSize", "get", "assertNotNull", "assertTrue", "isArray", "elements", "size", "get", "next", "asLong", "get", "asLong", "get", "asLong", "get", "asLong", "get", "assertEquals", "getCheckpointId", "assertEquals", "getTriggerTimestamp", "assertEquals", "getDuration", "assertEquals", "getStateSize", "assertFalse", "hasNext"]}, "focal_class": {"identifier": "JobCheckpointsHandler", "superclass": "extends AbstractExecutionGraphRequestHandler", "interfaces": "", "fields": [], "methods": [{"identifier": "JobCheckpointsHandler", "parameters": "(ExecutionGraphHolder executionGraphHolder)", "modifiers": "public", "return": "", "signature": " JobCheckpointsHandler(ExecutionGraphHolder executionGraphHolder)", "full_signature": "public  JobCheckpointsHandler(ExecutionGraphHolder executionGraphHolder)", "class_method_signature": "JobCheckpointsHandler.JobCheckpointsHandler(ExecutionGraphHolder executionGraphHolder)", "testcase": false, "constructor": true}, {"identifier": "handleRequest", "parameters": "(ExecutionGraph graph, Map<String, String> params)", "modifiers": "@Override public", "return": "String", "signature": "String handleRequest(ExecutionGraph graph, Map<String, String> params)", "full_signature": "@Override public String handleRequest(ExecutionGraph graph, Map<String, String> params)", "class_method_signature": "JobCheckpointsHandler.handleRequest(ExecutionGraph graph, Map<String, String> params)", "testcase": false, "constructor": false}], "file": "flink-runtime-web/src/main/java/org/apache/flink/runtime/webmonitor/handlers/JobCheckpointsHandler.java"}, "focal_method": {"identifier": "handleRequest", "parameters": "(ExecutionGraph graph, Map<String, String> params)", "modifiers": "@Override public", "return": "String", "body": "@Override\n\tpublic String handleRequest(ExecutionGraph graph, Map<String, String> params) throws Exception {\n\t\tStringWriter writer = new StringWriter();\n\t\tJsonGenerator gen = JsonFactory.jacksonFactory.createGenerator(writer);\n\n\t\tCheckpointStatsTracker tracker = graph.getCheckpointStatsTracker();\n\n\t\tgen.writeStartObject();\n\n\t\tif (tracker != null) {\n\t\t\tOption<JobCheckpointStats> stats = tracker.getJobStats();\n\n\t\t\tif (stats.isDefined()) {\n\t\t\t\t// Total number of checkpoints\n\t\t\t\tgen.writeNumberField(\"count\", stats.get().getCount());\n\n\t\t\t\t// Duration\n\t\t\t\tgen.writeFieldName(\"duration\");\n\t\t\t\tgen.writeStartObject();\n\t\t\t\tgen.writeNumberField(\"min\", stats.get().getMinDuration());\n\t\t\t\tgen.writeNumberField(\"max\", stats.get().getMaxDuration());\n\t\t\t\tgen.writeNumberField(\"avg\", stats.get().getAverageDuration());\n\t\t\t\tgen.writeEndObject();\n\n\t\t\t\t// State size\n\t\t\t\tgen.writeFieldName(\"size\");\n\t\t\t\tgen.writeStartObject();\n\t\t\t\tgen.writeNumberField(\"min\", stats.get().getMinStateSize());\n\t\t\t\tgen.writeNumberField(\"max\", stats.get().getMaxStateSize());\n\t\t\t\tgen.writeNumberField(\"avg\", stats.get().getAverageStateSize());\n\t\t\t\tgen.writeEndObject();\n\n\t\t\t\t// Recent history\n\t\t\t\tgen.writeArrayFieldStart(\"history\");\n\t\t\t\tfor (CheckpointStats checkpoint : stats.get().getRecentHistory()) {\n\t\t\t\t\tgen.writeStartObject();\n\t\t\t\t\tgen.writeNumberField(\"id\", checkpoint.getCheckpointId());\n\t\t\t\t\tgen.writeNumberField(\"timestamp\", checkpoint.getTriggerTimestamp());\n\t\t\t\t\tgen.writeNumberField(\"duration\", checkpoint.getDuration());\n\t\t\t\t\tgen.writeNumberField(\"size\", checkpoint.getStateSize());\n\t\t\t\t\tgen.writeEndObject();\n\t\t\t\t}\n\t\t\t\tgen.writeEndArray();\n\t\t\t}\n\t\t}\n\n\t\tgen.writeEndObject();\n\t\tgen.close();\n\n\t\treturn writer.toString();\n\t}", "signature": "String handleRequest(ExecutionGraph graph, Map<String, String> params)", "full_signature": "@Override public String handleRequest(ExecutionGraph graph, Map<String, String> params)", "class_method_signature": "JobCheckpointsHandler.handleRequest(ExecutionGraph graph, Map<String, String> params)", "testcase": false, "constructor": false, "invocations": ["createGenerator", "getCheckpointStatsTracker", "writeStartObject", "getJobStats", "isDefined", "writeNumberField", "getCount", "get", "writeFieldName", "writeStartObject", "writeNumberField", "getMinDuration", "get", "writeNumberField", "getMaxDuration", "get", "writeNumberField", "getAverageDuration", "get", "writeEndObject", "writeFieldName", "writeStartObject", "writeNumberField", "getMinStateSize", "get", "writeNumberField", "getMaxStateSize", "get", "writeNumberField", "getAverageStateSize", "get", "writeEndObject", "writeArrayFieldStart", "getRecentHistory", "get", "writeStartObject", "writeNumberField", "getCheckpointId", "writeNumberField", "getTriggerTimestamp", "writeNumberField", "getDuration", "writeNumberField", "getStateSize", "writeEndObject", "writeEndArray", "writeEndObject", "close", "toString"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}