{"test_class": {"identifier": "UtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/ulordj/core/UtilsTest.java"}, "test_case": {"identifier": "bigIntegerToBytes_convertZero", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void bigIntegerToBytes_convertZero() {\n        BigInteger b = BigInteger.valueOf(0);\n        byte[] expected = new byte[]{0b0000_0000};\n        byte[] actual = Utils.bigIntegerToBytes(b, 1);\n        assertTrue(Arrays.equals(expected, actual));\n    }", "signature": "void bigIntegerToBytes_convertZero()", "full_signature": "@Test public void bigIntegerToBytes_convertZero()", "class_method_signature": "UtilsTest.bigIntegerToBytes_convertZero()", "testcase": true, "constructor": false, "invocations": ["valueOf", "bigIntegerToBytes", "assertTrue", "equals"]}, "focal_class": {"identifier": "Utils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Joiner SPACE_JOINER = Joiner.on(\" \");", "modifier": "public static final", "type": "Joiner", "declarator": "SPACE_JOINER = Joiner.on(\" \")", "var_name": "SPACE_JOINER"}, {"original_string": "public static final BaseEncoding HEX = BaseEncoding.base16().lowerCase();", "modifier": "public static final", "type": "BaseEncoding", "declarator": "HEX = BaseEncoding.base16().lowerCase()", "var_name": "HEX"}, {"original_string": "private static BlockingQueue<Boolean> mockSleepQueue;", "modifier": "private static", "type": "BlockingQueue<Boolean>", "declarator": "mockSleepQueue", "var_name": "mockSleepQueue"}, {"original_string": "public static volatile Date mockTime;", "modifier": "public static volatile", "type": "Date", "declarator": "mockTime", "var_name": "mockTime"}, {"original_string": "private static final TimeZone UTC = TimeZone.getTimeZone(\"UTC\");", "modifier": "private static final", "type": "TimeZone", "declarator": "UTC = TimeZone.getTimeZone(\"UTC\")", "var_name": "UTC"}, {"original_string": "private static final int[] bitMask = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};", "modifier": "private static final", "type": "int[]", "declarator": "bitMask = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80}", "var_name": "bitMask"}, {"original_string": "private static int isAndroid = -1;", "modifier": "private static", "type": "int", "declarator": "isAndroid = -1", "var_name": "isAndroid"}], "methods": [{"identifier": "bigIntegerToBytes", "parameters": "(BigInteger b, int numBytes)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] bigIntegerToBytes(BigInteger b, int numBytes)", "full_signature": "public static byte[] bigIntegerToBytes(BigInteger b, int numBytes)", "class_method_signature": "Utils.bigIntegerToBytes(BigInteger b, int numBytes)", "testcase": false, "constructor": false}, {"identifier": "uint16ToByteArrayLE", "parameters": "(int val, byte[] out, int offset)", "modifiers": "public static", "return": "void", "signature": "void uint16ToByteArrayLE(int val, byte[] out, int offset)", "full_signature": "public static void uint16ToByteArrayLE(int val, byte[] out, int offset)", "class_method_signature": "Utils.uint16ToByteArrayLE(int val, byte[] out, int offset)", "testcase": false, "constructor": false}, {"identifier": "uint32ToByteArrayLE", "parameters": "(long val, byte[] out, int offset)", "modifiers": "public static", "return": "void", "signature": "void uint32ToByteArrayLE(long val, byte[] out, int offset)", "full_signature": "public static void uint32ToByteArrayLE(long val, byte[] out, int offset)", "class_method_signature": "Utils.uint32ToByteArrayLE(long val, byte[] out, int offset)", "testcase": false, "constructor": false}, {"identifier": "uint32ToByteArrayBE", "parameters": "(long val, byte[] out, int offset)", "modifiers": "public static", "return": "void", "signature": "void uint32ToByteArrayBE(long val, byte[] out, int offset)", "full_signature": "public static void uint32ToByteArrayBE(long val, byte[] out, int offset)", "class_method_signature": "Utils.uint32ToByteArrayBE(long val, byte[] out, int offset)", "testcase": false, "constructor": false}, {"identifier": "int64ToByteArrayLE", "parameters": "(long val, byte[] out, int offset)", "modifiers": "public static", "return": "void", "signature": "void int64ToByteArrayLE(long val, byte[] out, int offset)", "full_signature": "public static void int64ToByteArrayLE(long val, byte[] out, int offset)", "class_method_signature": "Utils.int64ToByteArrayLE(long val, byte[] out, int offset)", "testcase": false, "constructor": false}, {"identifier": "uint16ToByteStreamLE", "parameters": "(int val, OutputStream stream)", "modifiers": "public static", "return": "void", "signature": "void uint16ToByteStreamLE(int val, OutputStream stream)", "full_signature": "public static void uint16ToByteStreamLE(int val, OutputStream stream)", "class_method_signature": "Utils.uint16ToByteStreamLE(int val, OutputStream stream)", "testcase": false, "constructor": false}, {"identifier": "uint16ToByteStreamBE", "parameters": "(int val, OutputStream stream)", "modifiers": "public static", "return": "void", "signature": "void uint16ToByteStreamBE(int val, OutputStream stream)", "full_signature": "public static void uint16ToByteStreamBE(int val, OutputStream stream)", "class_method_signature": "Utils.uint16ToByteStreamBE(int val, OutputStream stream)", "testcase": false, "constructor": false}, {"identifier": "uint32ToByteStreamLE", "parameters": "(long val, OutputStream stream)", "modifiers": "public static", "return": "void", "signature": "void uint32ToByteStreamLE(long val, OutputStream stream)", "full_signature": "public static void uint32ToByteStreamLE(long val, OutputStream stream)", "class_method_signature": "Utils.uint32ToByteStreamLE(long val, OutputStream stream)", "testcase": false, "constructor": false}, {"identifier": "uint32ToByteStreamBE", "parameters": "(long val, OutputStream stream)", "modifiers": "public static", "return": "void", "signature": "void uint32ToByteStreamBE(long val, OutputStream stream)", "full_signature": "public static void uint32ToByteStreamBE(long val, OutputStream stream)", "class_method_signature": "Utils.uint32ToByteStreamBE(long val, OutputStream stream)", "testcase": false, "constructor": false}, {"identifier": "int64ToByteStreamLE", "parameters": "(long val, OutputStream stream)", "modifiers": "public static", "return": "void", "signature": "void int64ToByteStreamLE(long val, OutputStream stream)", "full_signature": "public static void int64ToByteStreamLE(long val, OutputStream stream)", "class_method_signature": "Utils.int64ToByteStreamLE(long val, OutputStream stream)", "testcase": false, "constructor": false}, {"identifier": "uint256ToByteStreamLE", "parameters": "(BigInteger val, OutputStream stream)", "modifiers": "public static", "return": "void", "signature": "void uint256ToByteStreamLE(BigInteger val, OutputStream stream)", "full_signature": "public static void uint256ToByteStreamLE(BigInteger val, OutputStream stream)", "class_method_signature": "Utils.uint256ToByteStreamLE(BigInteger val, OutputStream stream)", "testcase": false, "constructor": false}, {"identifier": "uint64ToByteStreamLE", "parameters": "(BigInteger val, OutputStream stream)", "modifiers": "public static", "return": "void", "signature": "void uint64ToByteStreamLE(BigInteger val, OutputStream stream)", "full_signature": "public static void uint64ToByteStreamLE(BigInteger val, OutputStream stream)", "class_method_signature": "Utils.uint64ToByteStreamLE(BigInteger val, OutputStream stream)", "testcase": false, "constructor": false}, {"identifier": "readUint16", "parameters": "(byte[] bytes, int offset)", "modifiers": "public static", "return": "int", "signature": "int readUint16(byte[] bytes, int offset)", "full_signature": "public static int readUint16(byte[] bytes, int offset)", "class_method_signature": "Utils.readUint16(byte[] bytes, int offset)", "testcase": false, "constructor": false}, {"identifier": "readUint32", "parameters": "(byte[] bytes, int offset)", "modifiers": "public static", "return": "long", "signature": "long readUint32(byte[] bytes, int offset)", "full_signature": "public static long readUint32(byte[] bytes, int offset)", "class_method_signature": "Utils.readUint32(byte[] bytes, int offset)", "testcase": false, "constructor": false}, {"identifier": "readInt64", "parameters": "(byte[] bytes, int offset)", "modifiers": "public static", "return": "long", "signature": "long readInt64(byte[] bytes, int offset)", "full_signature": "public static long readInt64(byte[] bytes, int offset)", "class_method_signature": "Utils.readInt64(byte[] bytes, int offset)", "testcase": false, "constructor": false}, {"identifier": "readUint256", "parameters": "(byte[] bytes, int offset)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger readUint256(byte[] bytes, int offset)", "full_signature": "public static BigInteger readUint256(byte[] bytes, int offset)", "class_method_signature": "Utils.readUint256(byte[] bytes, int offset)", "testcase": false, "constructor": false}, {"identifier": "readUint32BE", "parameters": "(byte[] bytes, int offset)", "modifiers": "public static", "return": "long", "signature": "long readUint32BE(byte[] bytes, int offset)", "full_signature": "public static long readUint32BE(byte[] bytes, int offset)", "class_method_signature": "Utils.readUint32BE(byte[] bytes, int offset)", "testcase": false, "constructor": false}, {"identifier": "readUint16BE", "parameters": "(byte[] bytes, int offset)", "modifiers": "public static", "return": "int", "signature": "int readUint16BE(byte[] bytes, int offset)", "full_signature": "public static int readUint16BE(byte[] bytes, int offset)", "class_method_signature": "Utils.readUint16BE(byte[] bytes, int offset)", "testcase": false, "constructor": false}, {"identifier": "readUint16FromStream", "parameters": "(InputStream is)", "modifiers": "public static", "return": "int", "signature": "int readUint16FromStream(InputStream is)", "full_signature": "public static int readUint16FromStream(InputStream is)", "class_method_signature": "Utils.readUint16FromStream(InputStream is)", "testcase": false, "constructor": false}, {"identifier": "readUint32FromStream", "parameters": "(InputStream is)", "modifiers": "public static", "return": "long", "signature": "long readUint32FromStream(InputStream is)", "full_signature": "public static long readUint32FromStream(InputStream is)", "class_method_signature": "Utils.readUint32FromStream(InputStream is)", "testcase": false, "constructor": false}, {"identifier": "reverseBytes", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] reverseBytes(byte[] bytes)", "full_signature": "public static byte[] reverseBytes(byte[] bytes)", "class_method_signature": "Utils.reverseBytes(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "sha256hash160", "parameters": "(byte[] input)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] sha256hash160(byte[] input)", "full_signature": "public static byte[] sha256hash160(byte[] input)", "class_method_signature": "Utils.sha256hash160(byte[] input)", "testcase": false, "constructor": false}, {"identifier": "decodeMPI", "parameters": "(byte[] mpi, boolean hasLength)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger decodeMPI(byte[] mpi, boolean hasLength)", "full_signature": "public static BigInteger decodeMPI(byte[] mpi, boolean hasLength)", "class_method_signature": "Utils.decodeMPI(byte[] mpi, boolean hasLength)", "testcase": false, "constructor": false}, {"identifier": "encodeMPI", "parameters": "(BigInteger value, boolean includeLength)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] encodeMPI(BigInteger value, boolean includeLength)", "full_signature": "public static byte[] encodeMPI(BigInteger value, boolean includeLength)", "class_method_signature": "Utils.encodeMPI(BigInteger value, boolean includeLength)", "testcase": false, "constructor": false}, {"identifier": "decodeCompactBits", "parameters": "(long compact)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger decodeCompactBits(long compact)", "full_signature": "public static BigInteger decodeCompactBits(long compact)", "class_method_signature": "Utils.decodeCompactBits(long compact)", "testcase": false, "constructor": false}, {"identifier": "encodeCompactBits", "parameters": "(BigInteger value)", "modifiers": "public static", "return": "long", "signature": "long encodeCompactBits(BigInteger value)", "full_signature": "public static long encodeCompactBits(BigInteger value)", "class_method_signature": "Utils.encodeCompactBits(BigInteger value)", "testcase": false, "constructor": false}, {"identifier": "rollMockClock", "parameters": "(int seconds)", "modifiers": "public static", "return": "Date", "signature": "Date rollMockClock(int seconds)", "full_signature": "public static Date rollMockClock(int seconds)", "class_method_signature": "Utils.rollMockClock(int seconds)", "testcase": false, "constructor": false}, {"identifier": "rollMockClockMillis", "parameters": "(long millis)", "modifiers": "public static", "return": "Date", "signature": "Date rollMockClockMillis(long millis)", "full_signature": "public static Date rollMockClockMillis(long millis)", "class_method_signature": "Utils.rollMockClockMillis(long millis)", "testcase": false, "constructor": false}, {"identifier": "setMockClock", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void setMockClock()", "full_signature": "public static void setMockClock()", "class_method_signature": "Utils.setMockClock()", "testcase": false, "constructor": false}, {"identifier": "setMockClock", "parameters": "(long mockClockSeconds)", "modifiers": "public static", "return": "void", "signature": "void setMockClock(long mockClockSeconds)", "full_signature": "public static void setMockClock(long mockClockSeconds)", "class_method_signature": "Utils.setMockClock(long mockClockSeconds)", "testcase": false, "constructor": false}, {"identifier": "now", "parameters": "()", "modifiers": "public static", "return": "Date", "signature": "Date now()", "full_signature": "public static Date now()", "class_method_signature": "Utils.now()", "testcase": false, "constructor": false}, {"identifier": "currentTimeMillis", "parameters": "()", "modifiers": "public static", "return": "long", "signature": "long currentTimeMillis()", "full_signature": "public static long currentTimeMillis()", "class_method_signature": "Utils.currentTimeMillis()", "testcase": false, "constructor": false}, {"identifier": "currentTimeSeconds", "parameters": "()", "modifiers": "public static", "return": "long", "signature": "long currentTimeSeconds()", "full_signature": "public static long currentTimeSeconds()", "class_method_signature": "Utils.currentTimeSeconds()", "testcase": false, "constructor": false}, {"identifier": "dateTimeFormat", "parameters": "(Date dateTime)", "modifiers": "public static", "return": "String", "signature": "String dateTimeFormat(Date dateTime)", "full_signature": "public static String dateTimeFormat(Date dateTime)", "class_method_signature": "Utils.dateTimeFormat(Date dateTime)", "testcase": false, "constructor": false}, {"identifier": "dateTimeFormat", "parameters": "(long dateTime)", "modifiers": "public static", "return": "String", "signature": "String dateTimeFormat(long dateTime)", "full_signature": "public static String dateTimeFormat(long dateTime)", "class_method_signature": "Utils.dateTimeFormat(long dateTime)", "testcase": false, "constructor": false}, {"identifier": "checkBitLE", "parameters": "(byte[] data, int index)", "modifiers": "public static", "return": "boolean", "signature": "boolean checkBitLE(byte[] data, int index)", "full_signature": "public static boolean checkBitLE(byte[] data, int index)", "class_method_signature": "Utils.checkBitLE(byte[] data, int index)", "testcase": false, "constructor": false}, {"identifier": "setBitLE", "parameters": "(byte[] data, int index)", "modifiers": "public static", "return": "void", "signature": "void setBitLE(byte[] data, int index)", "full_signature": "public static void setBitLE(byte[] data, int index)", "class_method_signature": "Utils.setBitLE(byte[] data, int index)", "testcase": false, "constructor": false}, {"identifier": "sleep", "parameters": "(long millis)", "modifiers": "public static", "return": "void", "signature": "void sleep(long millis)", "full_signature": "public static void sleep(long millis)", "class_method_signature": "Utils.sleep(long millis)", "testcase": false, "constructor": false}, {"identifier": "setMockSleep", "parameters": "(boolean isEnable)", "modifiers": "public static", "return": "void", "signature": "void setMockSleep(boolean isEnable)", "full_signature": "public static void setMockSleep(boolean isEnable)", "class_method_signature": "Utils.setMockSleep(boolean isEnable)", "testcase": false, "constructor": false}, {"identifier": "passMockSleep", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void passMockSleep()", "full_signature": "public static void passMockSleep()", "class_method_signature": "Utils.passMockSleep()", "testcase": false, "constructor": false}, {"identifier": "finishMockSleep", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void finishMockSleep()", "full_signature": "public static void finishMockSleep()", "class_method_signature": "Utils.finishMockSleep()", "testcase": false, "constructor": false}, {"identifier": "maxOfMostFreq", "parameters": "(int... items)", "modifiers": "public static", "return": "int", "signature": "int maxOfMostFreq(int... items)", "full_signature": "public static int maxOfMostFreq(int... items)", "class_method_signature": "Utils.maxOfMostFreq(int... items)", "testcase": false, "constructor": false}, {"identifier": "maxOfMostFreq", "parameters": "(List<Integer> items)", "modifiers": "public static", "return": "int", "signature": "int maxOfMostFreq(List<Integer> items)", "full_signature": "public static int maxOfMostFreq(List<Integer> items)", "class_method_signature": "Utils.maxOfMostFreq(List<Integer> items)", "testcase": false, "constructor": false}, {"identifier": "isAndroidRuntime", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isAndroidRuntime()", "full_signature": "public static boolean isAndroidRuntime()", "class_method_signature": "Utils.isAndroidRuntime()", "testcase": false, "constructor": false}, {"identifier": "isLinux", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isLinux()", "full_signature": "public static boolean isLinux()", "class_method_signature": "Utils.isLinux()", "testcase": false, "constructor": false}, {"identifier": "isWindows", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isWindows()", "full_signature": "public static boolean isWindows()", "class_method_signature": "Utils.isWindows()", "testcase": false, "constructor": false}, {"identifier": "isMac", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isMac()", "full_signature": "public static boolean isMac()", "class_method_signature": "Utils.isMac()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/ulordj/core/Utils.java"}, "focal_method": {"identifier": "bigIntegerToBytes", "parameters": "(BigInteger b, int numBytes)", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] bigIntegerToBytes(BigInteger b, int numBytes) {\n        checkArgument(b.signum() >= 0, \"b must be positive or zero\");\n        checkArgument(numBytes > 0, \"numBytes must be positive\");\n        byte[] src = b.toByteArray();\n        byte[] dest = new byte[numBytes];\n        boolean isFirstByteOnlyForSign = src[0] == 0;\n        int length = isFirstByteOnlyForSign ? src.length - 1 : src.length;\n        checkArgument(length <= numBytes, \"The given number does not fit in \" + numBytes);\n        int srcPos = isFirstByteOnlyForSign ? 1 : 0;\n        int destPos = numBytes - length;\n        System.arraycopy(src, srcPos, dest, destPos, length);\n        return dest;\n    }", "signature": "byte[] bigIntegerToBytes(BigInteger b, int numBytes)", "full_signature": "public static byte[] bigIntegerToBytes(BigInteger b, int numBytes)", "class_method_signature": "Utils.bigIntegerToBytes(BigInteger b, int numBytes)", "testcase": false, "constructor": false, "invocations": ["checkArgument", "signum", "checkArgument", "toByteArray", "checkArgument", "arraycopy"]}, "repository": {"repo_id": 133357466, "url": "https://github.com/UlordChain/ulordj", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 23, "size": 7129, "license": "licensed"}}