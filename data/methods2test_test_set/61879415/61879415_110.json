{"test_class": {"identifier": "DefaultSysProvisioningBatchServiceTest", "superclass": "extends AbstractIntegrationTest", "interfaces": "", "fields": [{"original_string": "@Autowired private SysProvisioningOperationService operationService;", "modifier": "@Autowired private", "type": "SysProvisioningOperationService", "declarator": "operationService", "var_name": "operationService"}, {"original_string": "@Autowired private SysProvisioningBatchService batchService;", "modifier": "@Autowired private", "type": "SysProvisioningBatchService", "declarator": "batchService", "var_name": "batchService"}], "file": "Realization/backend/acc/src/test/java/eu/bcvsolutions/idm/acc/service/impl/DefaultSysProvisioningBatchServiceTest.java"}, "test_case": {"identifier": "testMergeBatches", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testMergeBatches() {\n\t\t// create two batch for the same system entity\n\t\tSysSystemDto system = getHelper().createSystem(TestResource.TABLE_NAME);\n\t\tSysSystemEntityDto systemEntity = getHelper().createSystemEntity(system);\n\t\t//\n\t\tSysProvisioningBatchDto batchOne = new SysProvisioningBatchDto();\n\t\tbatchOne.setId(UUID.randomUUID());\n\t\tbatchOne.setSystemEntity(systemEntity.getId());\n\t\tbatchOne = batchService.save(batchOne);\n\t\tSysProvisioningOperationDto operationOne = createOperation(systemEntity, batchOne);\n\t\t//\n\t\tSysProvisioningBatchDto batchTwo = new SysProvisioningBatchDto();\n\t\tbatchTwo.setId(UUID.randomUUID());\n\t\tbatchTwo.setSystemEntity(systemEntity.getId());\n\t\tbatchTwo = batchService.save(batchTwo);\n\t\tSysProvisioningOperationDto operationTwo = createOperation(systemEntity, batchTwo);\n\t\t//\n\t\tAssert.assertNotEquals(batchOne.getId(), batchTwo.getId());\n\t\t//\n\t\tSysProvisioningBatchDto mergedBatch = batchService.findBatch(systemEntity.getId());\n\t\t//\n\t\tAssert.assertEquals(batchOne.getId(), mergedBatch.getId());\n\t\t//\n\t\tAssert.assertNull(batchService.get(batchTwo));\n\t\toperationOne = operationService.get(operationOne.getId());\n\t\toperationTwo = operationService.get(operationTwo.getId());\n\t\tAssert.assertEquals(batchOne.getId(), operationOne.getBatch());\n\t\tAssert.assertEquals(batchOne.getId(), operationTwo.getBatch());\n\t}", "signature": "void testMergeBatches()", "full_signature": "@Test public void testMergeBatches()", "class_method_signature": "DefaultSysProvisioningBatchServiceTest.testMergeBatches()", "testcase": true, "constructor": false, "invocations": ["createSystem", "getHelper", "createSystemEntity", "getHelper", "setId", "randomUUID", "setSystemEntity", "getId", "save", "createOperation", "setId", "randomUUID", "setSystemEntity", "getId", "save", "createOperation", "assertNotEquals", "getId", "getId", "findBatch", "getId", "assertEquals", "getId", "getId", "assertNull", "get", "get", "getId", "get", "getId", "assertEquals", "getId", "getBatch", "assertEquals", "getId", "getBatch"]}, "focal_class": {"identifier": "DefaultSysProvisioningBatchService", "superclass": "extends AbstractReadWriteDtoService<SysProvisioningBatchDto, SysProvisioningBatch, EmptyFilter>", "interfaces": "implements SysProvisioningBatchService", "fields": [{"original_string": "private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(DefaultSysProvisioningBatchService.class);", "modifier": "private static final", "type": "org.slf4j.Logger", "declarator": "LOG = org.slf4j.LoggerFactory.getLogger(DefaultSysProvisioningBatchService.class)", "var_name": "LOG"}, {"original_string": "private final SysProvisioningBatchRepository repository;", "modifier": "private final", "type": "SysProvisioningBatchRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "@Autowired private ProvisioningConfiguration provisioningConfiguration;", "modifier": "@Autowired private", "type": "ProvisioningConfiguration", "declarator": "provisioningConfiguration", "var_name": "provisioningConfiguration"}], "methods": [{"identifier": "DefaultSysProvisioningBatchService", "parameters": "(SysProvisioningBatchRepository repository)", "modifiers": "@Autowired public", "return": "", "signature": " DefaultSysProvisioningBatchService(SysProvisioningBatchRepository repository)", "full_signature": "@Autowired public  DefaultSysProvisioningBatchService(SysProvisioningBatchRepository repository)", "class_method_signature": "DefaultSysProvisioningBatchService.DefaultSysProvisioningBatchService(SysProvisioningBatchRepository repository)", "testcase": false, "constructor": true}, {"identifier": "calculateNextAttempt", "parameters": "(SysProvisioningOperationDto operation)", "modifiers": "@Override public", "return": "ZonedDateTime", "signature": "ZonedDateTime calculateNextAttempt(SysProvisioningOperationDto operation)", "full_signature": "@Override public ZonedDateTime calculateNextAttempt(SysProvisioningOperationDto operation)", "class_method_signature": "DefaultSysProvisioningBatchService.calculateNextAttempt(SysProvisioningOperationDto operation)", "testcase": false, "constructor": false}, {"identifier": "findBatchesToProcess", "parameters": "(Boolean virtualSystem, Pageable pageable)", "modifiers": "@Override @Transactional(readOnly = true) public", "return": "Page<SysProvisioningBatchDto>", "signature": "Page<SysProvisioningBatchDto> findBatchesToProcess(Boolean virtualSystem, Pageable pageable)", "full_signature": "@Override @Transactional(readOnly = true) public Page<SysProvisioningBatchDto> findBatchesToProcess(Boolean virtualSystem, Pageable pageable)", "class_method_signature": "DefaultSysProvisioningBatchService.findBatchesToProcess(Boolean virtualSystem, Pageable pageable)", "testcase": false, "constructor": false}, {"identifier": "findBatchesToRetry", "parameters": "(ZonedDateTime date, Pageable pageable)", "modifiers": "@Override @Transactional(readOnly = true) public", "return": "Page<SysProvisioningBatchDto>", "signature": "Page<SysProvisioningBatchDto> findBatchesToRetry(ZonedDateTime date, Pageable pageable)", "full_signature": "@Override @Transactional(readOnly = true) public Page<SysProvisioningBatchDto> findBatchesToRetry(ZonedDateTime date, Pageable pageable)", "class_method_signature": "DefaultSysProvisioningBatchService.findBatchesToRetry(ZonedDateTime date, Pageable pageable)", "testcase": false, "constructor": false}, {"identifier": "findBatch", "parameters": "(UUID systemEntity)", "modifiers": "@Override @Transactional public", "return": "SysProvisioningBatchDto", "signature": "SysProvisioningBatchDto findBatch(UUID systemEntity)", "full_signature": "@Override @Transactional public SysProvisioningBatchDto findBatch(UUID systemEntity)", "class_method_signature": "DefaultSysProvisioningBatchService.findBatch(UUID systemEntity)", "testcase": false, "constructor": false}], "file": "Realization/backend/acc/src/main/java/eu/bcvsolutions/idm/acc/service/impl/DefaultSysProvisioningBatchService.java"}, "focal_method": {"identifier": "findBatch", "parameters": "(UUID systemEntity)", "modifiers": "@Override @Transactional public", "return": "SysProvisioningBatchDto", "body": "@Override\n\t@Transactional\n\tpublic SysProvisioningBatchDto findBatch(UUID systemEntity) {\n\t\tList<SysProvisioningBatch> batches = repository.findAllBySystemEntity_IdOrderByCreatedAsc(systemEntity);\n\t\t//\n\t\tif (batches.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\t\t//\n\t\tif (batches.size() == 1) {\n\t\t\t// consistent state\n\t\t\treturn  toDto(batches.get(0));\n\t\t}\n\t\t//\n\t\t// merge batches together - use the first as target\n\t\tSysProvisioningBatch firstBatch = batches.get(0);\n\t\tfor (int index = 1; index < batches.size(); index ++) {\n\t\t\t// update batch for other provisioning operations \n\t\t\tSysProvisioningBatch oldBatch = batches.get(index);\n\t\t\trepository.mergeBatch(oldBatch, firstBatch);\n\t\t\tdeleteById(oldBatch.getId());\n\t\t}\n\t\t//\n\t\treturn toDto(firstBatch);\n\t}", "signature": "SysProvisioningBatchDto findBatch(UUID systemEntity)", "full_signature": "@Override @Transactional public SysProvisioningBatchDto findBatch(UUID systemEntity)", "class_method_signature": "DefaultSysProvisioningBatchService.findBatch(UUID systemEntity)", "testcase": false, "constructor": false, "invocations": ["findAllBySystemEntity_IdOrderByCreatedAsc", "isEmpty", "size", "toDto", "get", "get", "size", "get", "mergeBatch", "deleteById", "getId", "toDto"]}, "repository": {"repo_id": 61879415, "url": "https://github.com/bcvsolutions/CzechIdMng", "stars": 25, "created": "6/24/2016 11:18:23 AM +00:00", "updates": "2020-01-27T15:14:40+00:00", "fork": "False", "license": "licensed"}}