{"test_class": {"identifier": "AccuracyAggregatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n\tprivate AccuracyAggregator<Boolean> agrgegator;", "modifier": "@InjectMocks\n\tprivate", "type": "AccuracyAggregator<Boolean>", "declarator": "agrgegator", "var_name": "agrgegator"}], "file": "storm/trident-ml/src/test/java/com/github/pmerienne/trident/ml/evaluation/AccuracyAggregatorTest.java"}, "test_case": {"identifier": "should_init_accuracy_with_error", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void should_init_accuracy_with_error() {\n\t\t// Given\n\t\tBoolean label = true;\n\t\tBoolean prediction = false;\n\n\t\tInstance<Boolean> instance = mock(Instance.class);\n\t\twhen(instance.getLabel()).thenReturn(label);\n\n\t\tTridentTuple tuple = mock(TridentTuple.class);\n\t\twhen(tuple.getValue(0)).thenReturn(instance);\n\t\twhen(tuple.getValue(1)).thenReturn(prediction);\n\n\t\t// When\n\t\tAccuracyState<Boolean> actualState = agrgegator.init(tuple);\n\n\t\t// Then\n\t\tassertThat(actualState).isEqualTo(new AccuracyState<Boolean>(1, 1));\n\t}", "signature": "void should_init_accuracy_with_error()", "full_signature": "@Test public void should_init_accuracy_with_error()", "class_method_signature": "AccuracyAggregatorTest.should_init_accuracy_with_error()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getLabel", "mock", "thenReturn", "when", "getValue", "thenReturn", "when", "getValue", "init", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "AccuracyAggregator", "superclass": "", "interfaces": "implements CombinerAggregator<AccuracyState<L>>", "fields": [{"original_string": "private static final long serialVersionUID = 1136784137149485843L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1136784137149485843L", "var_name": "serialVersionUID"}], "methods": [{"identifier": "init", "parameters": "(TridentTuple tuple)", "modifiers": "@Override public", "return": "AccuracyState<L>", "signature": "AccuracyState<L> init(TridentTuple tuple)", "full_signature": "@Override public AccuracyState<L> init(TridentTuple tuple)", "class_method_signature": "AccuracyAggregator.init(TridentTuple tuple)", "testcase": false, "constructor": false}, {"identifier": "combine", "parameters": "(AccuracyState<L> val1, AccuracyState<L> val2)", "modifiers": "@Override public", "return": "AccuracyState<L>", "signature": "AccuracyState<L> combine(AccuracyState<L> val1, AccuracyState<L> val2)", "full_signature": "@Override public AccuracyState<L> combine(AccuracyState<L> val1, AccuracyState<L> val2)", "class_method_signature": "AccuracyAggregator.combine(AccuracyState<L> val1, AccuracyState<L> val2)", "testcase": false, "constructor": false}, {"identifier": "zero", "parameters": "()", "modifiers": "@Override public", "return": "AccuracyState<L>", "signature": "AccuracyState<L> zero()", "full_signature": "@Override public AccuracyState<L> zero()", "class_method_signature": "AccuracyAggregator.zero()", "testcase": false, "constructor": false}], "file": "storm/trident-ml/src/main/java/com/github/pmerienne/trident/ml/evaluation/AccuracyAggregator.java"}, "focal_method": {"identifier": "init", "parameters": "(TridentTuple tuple)", "modifiers": "@Override public", "return": "AccuracyState<L>", "body": "@Override\n\tpublic AccuracyState<L> init(TridentTuple tuple) {\n\t\tInstance<L> instance = (Instance<L>) tuple.getValue(0);\n\t\tL prediction = (L) tuple.getValue(1);\n\t\tL expected = instance.getLabel();\n\n\t\tboolean equals = Objects.equals(expected, prediction);\n\n\t\tAccuracyState<L> state = new AccuracyState<L>(1, equals ? 0 : 1);\n\t\treturn state;\n\t}", "signature": "AccuracyState<L> init(TridentTuple tuple)", "full_signature": "@Override public AccuracyState<L> init(TridentTuple tuple)", "class_method_signature": "AccuracyAggregator.init(TridentTuple tuple)", "testcase": false, "constructor": false, "invocations": ["getValue", "getValue", "getLabel", "equals"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}