{"test_class": {"identifier": "DefaultLineChartReducerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final float EPS = 1e-6f;", "modifier": "private static final", "type": "float", "declarator": "EPS = 1e-6f", "var_name": "EPS"}, {"original_string": "private static int FAKE_HEIGHT = 100;", "modifier": "private static", "type": "int", "declarator": "FAKE_HEIGHT = 100", "var_name": "FAKE_HEIGHT"}, {"original_string": "private DefaultLineChartReducer myReducer;", "modifier": "private", "type": "DefaultLineChartReducer", "declarator": "myReducer", "var_name": "myReducer"}, {"original_string": "private LineConfig myConfig;", "modifier": "private", "type": "LineConfig", "declarator": "myConfig", "var_name": "myConfig"}], "file": "adt-ui/src/test/java/com/android/tools/adtui/chart/linechart/DefaultLineChartReducerTest.java"}, "test_case": {"identifier": "reduceData", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void reduceData() {\n    List<SeriesData<Long>> data = new ImmutableList.Builder<SeriesData<Long>>()\n      .add(new SeriesData<>(0, 10L))\n      .add(new SeriesData<>(1, 10L))\n      .add(new SeriesData<>(2, 13L))\n      .add(new SeriesData<>(3, 13L))\n      .add(new SeriesData<>(4, 13L))\n      .add(new SeriesData<>(5, 13L))\n      .add(new SeriesData<>(6, 5L))\n      .add(new SeriesData<>(7, 5L)).build();\n    List<SeriesData<Long>> expected = new ImmutableList.Builder<SeriesData<Long>>()\n      .add(new SeriesData<>(0, 10L))\n      .add(new SeriesData<>(1, 10L))\n      .add(new SeriesData<>(2, 13L))\n      .add(new SeriesData<>(5, 13L))\n      .add(new SeriesData<>(6, 5L))\n      .add(new SeriesData<>(7, 5L)).build();\n    List<SeriesData<Long>> result = myReducer.reduceData(data, myConfig);\n    assertSeriesEquals(expected, result);\n  }", "signature": "void reduceData()", "full_signature": "@Test public void reduceData()", "class_method_signature": "DefaultLineChartReducerTest.reduceData()", "testcase": true, "constructor": false, "invocations": ["build", "add", "add", "add", "add", "add", "add", "add", "add", "build", "add", "add", "add", "add", "add", "add", "reduceData", "assertSeriesEquals"]}, "focal_class": {"identifier": "DefaultLineChartReducer", "superclass": "", "interfaces": "implements LineChartReducer", "fields": [{"original_string": "private static final float EPS  = 1e-6f;", "modifier": "private static final", "type": "float", "declarator": "EPS  = 1e-6f", "var_name": "EPS"}, {"original_string": "private static int PATH_ITERATOR_COORDS_COUNT = 6;", "modifier": "private static", "type": "int", "declarator": "PATH_ITERATOR_COORDS_COUNT = 6", "var_name": "PATH_ITERATOR_COORDS_COUNT"}], "methods": [{"identifier": "reduceData", "parameters": "(@NotNull List<SeriesData<Long>> dataList, @NotNull LineConfig config)", "modifiers": "@Override public", "return": "List<SeriesData<Long>>", "signature": "List<SeriesData<Long>> reduceData(@NotNull List<SeriesData<Long>> dataList, @NotNull LineConfig config)", "full_signature": "@Override public List<SeriesData<Long>> reduceData(@NotNull List<SeriesData<Long>> dataList, @NotNull LineConfig config)", "class_method_signature": "DefaultLineChartReducer.reduceData(@NotNull List<SeriesData<Long>> dataList, @NotNull LineConfig config)", "testcase": false, "constructor": false}, {"identifier": "reducePath", "parameters": "(@NotNull Path2D path, @NotNull LineConfig config)", "modifiers": "@NotNull @Override public", "return": "Path2D", "signature": "Path2D reducePath(@NotNull Path2D path, @NotNull LineConfig config)", "full_signature": "@NotNull @Override public Path2D reducePath(@NotNull Path2D path, @NotNull LineConfig config)", "class_method_signature": "DefaultLineChartReducer.reducePath(@NotNull Path2D path, @NotNull LineConfig config)", "testcase": false, "constructor": false}, {"identifier": "addMinMaxPoints", "parameters": "(@NotNull Path2D path,\n                               @NotNull LineConfig config,\n                               int minIndex, float minX, float minY,\n                               int maxIndex, float maxX, float maxY)", "modifiers": "private static", "return": "void", "signature": "void addMinMaxPoints(@NotNull Path2D path,\n                               @NotNull LineConfig config,\n                               int minIndex, float minX, float minY,\n                               int maxIndex, float maxX, float maxY)", "full_signature": "private static void addMinMaxPoints(@NotNull Path2D path,\n                               @NotNull LineConfig config,\n                               int minIndex, float minX, float minY,\n                               int maxIndex, float maxX, float maxY)", "class_method_signature": "DefaultLineChartReducer.addMinMaxPoints(@NotNull Path2D path,\n                               @NotNull LineConfig config,\n                               int minIndex, float minX, float minY,\n                               int maxIndex, float maxX, float maxY)", "testcase": false, "constructor": false}, {"identifier": "addToResultPath", "parameters": "(@NotNull Path2D path, @NotNull LineConfig config, float ...coords)", "modifiers": "private static", "return": "void", "signature": "void addToResultPath(@NotNull Path2D path, @NotNull LineConfig config, float ...coords)", "full_signature": "private static void addToResultPath(@NotNull Path2D path, @NotNull LineConfig config, float ...coords)", "class_method_signature": "DefaultLineChartReducer.addToResultPath(@NotNull Path2D path, @NotNull LineConfig config, float ...coords)", "testcase": false, "constructor": false}, {"identifier": "addToSteppedLinePath", "parameters": "(@NotNull Path2D path, float x, float y)", "modifiers": "private static", "return": "void", "signature": "void addToSteppedLinePath(@NotNull Path2D path, float x, float y)", "full_signature": "private static void addToSteppedLinePath(@NotNull Path2D path, float x, float y)", "class_method_signature": "DefaultLineChartReducer.addToSteppedLinePath(@NotNull Path2D path, float x, float y)", "testcase": false, "constructor": false}, {"identifier": "addToPath", "parameters": "(@NotNull Path2D path, float x, float y)", "modifiers": "private static", "return": "void", "signature": "void addToPath(@NotNull Path2D path, float x, float y)", "full_signature": "private static void addToPath(@NotNull Path2D path, float x, float y)", "class_method_signature": "DefaultLineChartReducer.addToPath(@NotNull Path2D path, float x, float y)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(float a, float b)", "modifiers": "private static", "return": "boolean", "signature": "boolean equals(float a, float b)", "full_signature": "private static boolean equals(float a, float b)", "class_method_signature": "DefaultLineChartReducer.equals(float a, float b)", "testcase": false, "constructor": false}], "file": "adt-ui/src/main/java/com/android/tools/adtui/chart/linechart/DefaultLineChartReducer.java"}, "focal_method": {"identifier": "reduceData", "parameters": "(@NotNull List<SeriesData<Long>> dataList, @NotNull LineConfig config)", "modifiers": "@Override public", "return": "List<SeriesData<Long>>", "body": "@Override\n  public List<SeriesData<Long>> reduceData(@NotNull List<SeriesData<Long>> dataList, @NotNull LineConfig config) {\n    if (config.getDataBucketInterval() > 0) {\n      // If the line chart is showing bars, we don't want to reduce points - because repeating the\n      // same value multiple times in a row should generate new bars!\n      // TODO(b/73784793): Remove this code once we refactor a new BarChart class\n      return dataList;\n    }\n\n    List<SeriesData<Long>> reduced = new ArrayList<>();\n    for (SeriesData<Long> data: dataList) {\n      while (reduced.size() >= 2) {\n        SeriesData<Long> preLast = reduced.get(reduced.size() - 2);\n        SeriesData<Long> last = reduced.get(reduced.size() - 1);\n\n        if (preLast.value.equals(last.value) &&\n            (config.isStepped() || last.value.equals(data.value))) {\n          reduced.remove(reduced.size() - 1);\n        } else {\n          break;\n        }\n      }\n      reduced.add(data);\n    }\n    return reduced;\n  }", "signature": "List<SeriesData<Long>> reduceData(@NotNull List<SeriesData<Long>> dataList, @NotNull LineConfig config)", "full_signature": "@Override public List<SeriesData<Long>> reduceData(@NotNull List<SeriesData<Long>> dataList, @NotNull LineConfig config)", "class_method_signature": "DefaultLineChartReducer.reduceData(@NotNull List<SeriesData<Long>> dataList, @NotNull LineConfig config)", "testcase": false, "constructor": false, "invocations": ["getDataBucketInterval", "size", "get", "size", "get", "size", "equals", "isStepped", "equals", "remove", "size", "add"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}