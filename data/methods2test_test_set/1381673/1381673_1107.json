{"test_class": {"identifier": "KiePMMLCompoundPredicateTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String COMPOUND_PREDICATE_NAME = \"COMPOUNDPREDICATENAME\";", "modifier": "private final", "type": "String", "declarator": "COMPOUND_PREDICATE_NAME = \"COMPOUNDPREDICATENAME\"", "var_name": "COMPOUND_PREDICATE_NAME"}, {"original_string": "private final String SIMPLE_SET_PREDICATE_STRING_NAME = \"SIMPLESETPREDICATESTRINGNAME\";", "modifier": "private final", "type": "String", "declarator": "SIMPLE_SET_PREDICATE_STRING_NAME = \"SIMPLESETPREDICATESTRINGNAME\"", "var_name": "SIMPLE_SET_PREDICATE_STRING_NAME"}, {"original_string": "private final String SIMPLE_SET_PREDICATE_INT_NAME = \"SIMPLESETPREDICATEINTNAME\";", "modifier": "private final", "type": "String", "declarator": "SIMPLE_SET_PREDICATE_INT_NAME = \"SIMPLESETPREDICATEINTNAME\"", "var_name": "SIMPLE_SET_PREDICATE_INT_NAME"}], "file": "kie-pmml-trusty/kie-pmml-commons/src/test/java/org/kie/pmml/commons/model/predicates/KiePMMLCompoundPredicateTest.java"}, "test_case": {"identifier": "evaluateCompoundPredicateSurrogate", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void evaluateCompoundPredicateSurrogate() {\n        ARRAY_TYPE arrayType = ARRAY_TYPE.STRING;\n        List<Object> stringValues = getObjects(arrayType, 4);\n        KiePMMLSimpleSetPredicate kiePMMLSimpleSetPredicateString = getKiePMMLSimpleSetPredicate(SIMPLE_SET_PREDICATE_STRING_NAME,\n                                                                                                 stringValues,\n                                                                                                 arrayType,\n                                                                                                 IN_NOTIN.IN);\n        arrayType = ARRAY_TYPE.INT;\n        List<Object> intValues = getObjects(arrayType, 4);\n        KiePMMLSimpleSetPredicate kiePMMLSimpleSetPredicateInt = getKiePMMLSimpleSetPredicate(SIMPLE_SET_PREDICATE_INT_NAME,\n                                                                                              intValues,\n                                                                                              arrayType,\n                                                                                              IN_NOTIN.NOT_IN);\n        KiePMMLCompoundPredicate kiePMMLCompoundPredicate = getKiePMMLCompoundPredicate(BOOLEAN_OPERATOR.SURROGATE,\n                                                                                        Arrays.asList(kiePMMLSimpleSetPredicateString, kiePMMLSimpleSetPredicateInt));\n        Map<String, Object> inputData = new HashMap<>();\n        inputData.put(SIMPLE_SET_PREDICATE_STRING_NAME, \"NOT\");\n        inputData.put(SIMPLE_SET_PREDICATE_INT_NAME, intValues.get(0));\n        kiePMMLCompoundPredicate.evaluate(inputData);\n    }", "signature": "void evaluateCompoundPredicateSurrogate()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void evaluateCompoundPredicateSurrogate()", "class_method_signature": "KiePMMLCompoundPredicateTest.evaluateCompoundPredicateSurrogate()", "testcase": true, "constructor": false, "invocations": ["getObjects", "getKiePMMLSimpleSetPredicate", "getObjects", "getKiePMMLSimpleSetPredicate", "getKiePMMLCompoundPredicate", "asList", "put", "put", "get", "evaluate"]}, "focal_class": {"identifier": "KiePMMLCompoundPredicate", "superclass": "extends KiePMMLPredicate", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(KiePMMLCompoundPredicate.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(KiePMMLCompoundPredicate.class)", "var_name": "logger"}, {"original_string": "private final BOOLEAN_OPERATOR booleanOperator;", "modifier": "private final", "type": "BOOLEAN_OPERATOR", "declarator": "booleanOperator", "var_name": "booleanOperator"}, {"original_string": "protected BinaryOperator<Boolean> operatorFunction;", "modifier": "protected", "type": "BinaryOperator<Boolean>", "declarator": "operatorFunction", "var_name": "operatorFunction"}, {"original_string": "protected List<KiePMMLPredicate> kiePMMLPredicates;", "modifier": "protected", "type": "List<KiePMMLPredicate>", "declarator": "kiePMMLPredicates", "var_name": "kiePMMLPredicates"}], "methods": [{"identifier": "KiePMMLCompoundPredicate", "parameters": "(final String name, final List<KiePMMLExtension> extensions, final BOOLEAN_OPERATOR booleanOperator)", "modifiers": "protected", "return": "", "signature": " KiePMMLCompoundPredicate(final String name, final List<KiePMMLExtension> extensions, final BOOLEAN_OPERATOR booleanOperator)", "full_signature": "protected  KiePMMLCompoundPredicate(final String name, final List<KiePMMLExtension> extensions, final BOOLEAN_OPERATOR booleanOperator)", "class_method_signature": "KiePMMLCompoundPredicate.KiePMMLCompoundPredicate(final String name, final List<KiePMMLExtension> extensions, final BOOLEAN_OPERATOR booleanOperator)", "testcase": false, "constructor": true}, {"identifier": "builder", "parameters": "(List<KiePMMLExtension> extensions, BOOLEAN_OPERATOR booleanOperator)", "modifiers": "public static", "return": "Builder", "signature": "Builder builder(List<KiePMMLExtension> extensions, BOOLEAN_OPERATOR booleanOperator)", "full_signature": "public static Builder builder(List<KiePMMLExtension> extensions, BOOLEAN_OPERATOR booleanOperator)", "class_method_signature": "KiePMMLCompoundPredicate.builder(List<KiePMMLExtension> extensions, BOOLEAN_OPERATOR booleanOperator)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(Map<String, Object> values)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean evaluate(Map<String, Object> values)", "full_signature": "@Override public boolean evaluate(Map<String, Object> values)", "class_method_signature": "KiePMMLCompoundPredicate.evaluate(Map<String, Object> values)", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getId()", "full_signature": "@Override public String getId()", "class_method_signature": "KiePMMLCompoundPredicate.getId()", "testcase": false, "constructor": false}, {"identifier": "getBooleanOperator", "parameters": "()", "modifiers": "public", "return": "BOOLEAN_OPERATOR", "signature": "BOOLEAN_OPERATOR getBooleanOperator()", "full_signature": "public BOOLEAN_OPERATOR getBooleanOperator()", "class_method_signature": "KiePMMLCompoundPredicate.getBooleanOperator()", "testcase": false, "constructor": false}, {"identifier": "getKiePMMLPredicates", "parameters": "()", "modifiers": "public", "return": "List<KiePMMLPredicate>", "signature": "List<KiePMMLPredicate> getKiePMMLPredicates()", "full_signature": "public List<KiePMMLPredicate> getKiePMMLPredicates()", "class_method_signature": "KiePMMLCompoundPredicate.getKiePMMLPredicates()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "KiePMMLCompoundPredicate.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "KiePMMLCompoundPredicate.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "KiePMMLCompoundPredicate.hashCode()", "testcase": false, "constructor": false}], "file": "kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLCompoundPredicate.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(Map<String, Object> values)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean evaluate(Map<String, Object> values) {\n        Boolean toReturn = null;\n        for (KiePMMLPredicate kiePMMLPredicate : kiePMMLPredicates) {\n            toReturn = operatorFunction.apply(toReturn, kiePMMLPredicate.evaluate(values));\n        }\n        return toReturn != null && toReturn;\n    }", "signature": "boolean evaluate(Map<String, Object> values)", "full_signature": "@Override public boolean evaluate(Map<String, Object> values)", "class_method_signature": "KiePMMLCompoundPredicate.evaluate(Map<String, Object> values)", "testcase": false, "constructor": false, "invocations": ["apply", "evaluate"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}