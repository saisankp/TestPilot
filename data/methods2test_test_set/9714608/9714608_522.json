{"test_class": {"identifier": "RoadPathTest", "superclass": "extends AbstractGisTest", "interfaces": "", "fields": [{"original_string": "private RoadSegmentStub segment1, segment2, segment3, segment4, segment5;", "modifier": "private", "type": "RoadSegmentStub", "declarator": "segment1", "var_name": "segment1"}, {"original_string": "private RoadSegmentStub segment6, segment7, segment8, segment9, segment10;", "modifier": "private", "type": "RoadSegmentStub", "declarator": "segment6", "var_name": "segment6"}, {"original_string": "private RoadSegmentStub segment11;", "modifier": "private", "type": "RoadSegmentStub", "declarator": "segment11", "var_name": "segment11"}, {"original_string": "private RoadConnectionStub connection1;", "modifier": "private", "type": "RoadConnectionStub", "declarator": "connection1", "var_name": "connection1"}, {"original_string": "private RoadConnectionStub connection2;", "modifier": "private", "type": "RoadConnectionStub", "declarator": "connection2", "var_name": "connection2"}, {"original_string": "private RoadConnectionStub connection3;", "modifier": "private", "type": "RoadConnectionStub", "declarator": "connection3", "var_name": "connection3"}, {"original_string": "private RoadConnectionStub connection4;", "modifier": "private", "type": "RoadConnectionStub", "declarator": "connection4", "var_name": "connection4"}, {"original_string": "private RoadConnectionStub connection5;", "modifier": "private", "type": "RoadConnectionStub", "declarator": "connection5", "var_name": "connection5"}, {"original_string": "private RoadConnectionStub connection6;", "modifier": "private", "type": "RoadConnectionStub", "declarator": "connection6", "var_name": "connection6"}, {"original_string": "private RoadConnectionStub connection7;", "modifier": "private", "type": "RoadConnectionStub", "declarator": "connection7", "var_name": "connection7"}, {"original_string": "private RoadConnectionStub connection8;", "modifier": "private", "type": "RoadConnectionStub", "declarator": "connection8", "var_name": "connection8"}, {"original_string": "private RoadConnectionStub connection9;", "modifier": "private", "type": "RoadConnectionStub", "declarator": "connection9", "var_name": "connection9"}], "file": "advanced/gis/gisroad/src/test/java/org/arakhne/afc/gis/road/path/RoadPathTest.java"}, "test_case": {"identifier": "testGetFirstCrossRoad", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetFirstCrossRoad() {\n\t\tRoadPath path = new RoadPath();\n\t\tpath.add(this.segment3, this.segment3.getBeginPoint());\n\t\tpath.add(this.segment4);\n\t\tpath.add(this.segment1);\n\t\tpath.add(this.segment2);\n\t\tpath.add(this.segment6, this.segment6.getEndPoint());\n\t\tpath.add(this.segment8);\n\n\t\tassertFalse(path.isEmpty());\n\t\tassertEquals(6, path.size());\n\n\t\tassertEquals(this.segment2.getBeginPoint(), path.getFirstCrossRoad());\n\t}", "signature": "void testGetFirstCrossRoad()", "full_signature": "@Test public void testGetFirstCrossRoad()", "class_method_signature": "RoadPathTest.testGetFirstCrossRoad()", "testcase": true, "constructor": false, "invocations": ["add", "getBeginPoint", "add", "add", "add", "add", "getEndPoint", "add", "assertFalse", "isEmpty", "assertEquals", "size", "assertEquals", "getBeginPoint", "getFirstCrossRoad"]}, "focal_class": {"identifier": "RoadPath", "superclass": "extends GraphPath<RoadPath, RoadSegment, RoadConnection>", "interfaces": "", "fields": [], "methods": [{"identifier": "RoadPath", "parameters": "(List<RoadSegment> original)", "modifiers": "protected", "return": "", "signature": " RoadPath(List<RoadSegment> original)", "full_signature": "protected  RoadPath(List<RoadSegment> original)", "class_method_signature": "RoadPath.RoadPath(List<RoadSegment> original)", "testcase": false, "constructor": true}, {"identifier": "RoadPath", "parameters": "()", "modifiers": "public", "return": "", "signature": " RoadPath()", "full_signature": "public  RoadPath()", "class_method_signature": "RoadPath.RoadPath()", "testcase": false, "constructor": true}, {"identifier": "RoadPath", "parameters": "(RoadSegment segment)", "modifiers": "public", "return": "", "signature": " RoadPath(RoadSegment segment)", "full_signature": "public  RoadPath(RoadSegment segment)", "class_method_signature": "RoadPath.RoadPath(RoadSegment segment)", "testcase": false, "constructor": true}, {"identifier": "RoadPath", "parameters": "(RoadSegment segment, RoadConnection starting_point)", "modifiers": "public", "return": "", "signature": " RoadPath(RoadSegment segment, RoadConnection starting_point)", "full_signature": "public  RoadPath(RoadSegment segment, RoadConnection starting_point)", "class_method_signature": "RoadPath.RoadPath(RoadSegment segment, RoadConnection starting_point)", "testcase": false, "constructor": true}, {"identifier": "RoadPath", "parameters": "(RoadPath path)", "modifiers": "public", "return": "", "signature": " RoadPath(RoadPath path)", "full_signature": "public  RoadPath(RoadPath path)", "class_method_signature": "RoadPath.RoadPath(RoadPath path)", "testcase": false, "constructor": true}, {"identifier": "addPathToPath", "parameters": "(RoadPath inside, RoadPath elements)", "modifiers": "public static", "return": "boolean", "signature": "boolean addPathToPath(RoadPath inside, RoadPath elements)", "full_signature": "public static boolean addPathToPath(RoadPath inside, RoadPath elements)", "class_method_signature": "RoadPath.addPathToPath(RoadPath inside, RoadPath elements)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(List<RoadSegment> original)", "modifiers": "public static", "return": "RoadPath", "signature": "RoadPath of(List<RoadSegment> original)", "full_signature": "public static RoadPath of(List<RoadSegment> original)", "class_method_signature": "RoadPath.of(List<RoadSegment> original)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "()", "modifiers": "@Override @Pure public", "return": "Object[]", "signature": "Object[] toArray()", "full_signature": "@Override @Pure public Object[] toArray()", "class_method_signature": "RoadPath.toArray()", "testcase": false, "constructor": false}, {"identifier": "getSegmentDirectionAt", "parameters": "(int index)", "modifiers": "@Pure public", "return": "Direction1D", "signature": "Direction1D getSegmentDirectionAt(int index)", "full_signature": "@Pure public Direction1D getSegmentDirectionAt(int index)", "class_method_signature": "RoadPath.getSegmentDirectionAt(int index)", "testcase": false, "constructor": false}, {"identifier": "isConnectableTo", "parameters": "(RoadPath path)", "modifiers": "@Pure public", "return": "boolean", "signature": "boolean isConnectableTo(RoadPath path)", "full_signature": "@Pure public boolean isConnectableTo(RoadPath path)", "class_method_signature": "RoadPath.isConnectableTo(RoadPath path)", "testcase": false, "constructor": false}, {"identifier": "getConnectableSegmentToFirstPoint", "parameters": "(RoadPath path)", "modifiers": "@Pure public", "return": "RoadSegment", "signature": "RoadSegment getConnectableSegmentToFirstPoint(RoadPath path)", "full_signature": "@Pure public RoadSegment getConnectableSegmentToFirstPoint(RoadPath path)", "class_method_signature": "RoadPath.getConnectableSegmentToFirstPoint(RoadPath path)", "testcase": false, "constructor": false}, {"identifier": "getConnectableSegmentToLastPoint", "parameters": "(RoadPath path)", "modifiers": "@Pure public", "return": "RoadSegment", "signature": "RoadSegment getConnectableSegmentToLastPoint(RoadPath path)", "full_signature": "@Pure public RoadSegment getConnectableSegmentToLastPoint(RoadPath path)", "class_method_signature": "RoadPath.getConnectableSegmentToLastPoint(RoadPath path)", "testcase": false, "constructor": false}, {"identifier": "isFirstPointConnectableTo", "parameters": "(RoadPath path)", "modifiers": "@Pure public", "return": "boolean", "signature": "boolean isFirstPointConnectableTo(RoadPath path)", "full_signature": "@Pure public boolean isFirstPointConnectableTo(RoadPath path)", "class_method_signature": "RoadPath.isFirstPointConnectableTo(RoadPath path)", "testcase": false, "constructor": false}, {"identifier": "isLastPointConnectableTo", "parameters": "(RoadPath path)", "modifiers": "@Pure public", "return": "boolean", "signature": "boolean isLastPointConnectableTo(RoadPath path)", "full_signature": "@Pure public boolean isLastPointConnectableTo(RoadPath path)", "class_method_signature": "RoadPath.isLastPointConnectableTo(RoadPath path)", "testcase": false, "constructor": false}, {"identifier": "isCulDeSacWay", "parameters": "()", "modifiers": "@Pure public", "return": "boolean", "signature": "boolean isCulDeSacWay()", "full_signature": "@Pure public boolean isCulDeSacWay()", "class_method_signature": "RoadPath.isCulDeSacWay()", "testcase": false, "constructor": false}, {"identifier": "getFirstCrossRoad", "parameters": "()", "modifiers": "@Pure public", "return": "RoadConnection", "signature": "RoadConnection getFirstCrossRoad()", "full_signature": "@Pure public RoadConnection getFirstCrossRoad()", "class_method_signature": "RoadPath.getFirstCrossRoad()", "testcase": false, "constructor": false}, {"identifier": "getFirstJunctionPoint", "parameters": "()", "modifiers": "@Pure public", "return": "CrossRoad", "signature": "CrossRoad getFirstJunctionPoint()", "full_signature": "@Pure public CrossRoad getFirstJunctionPoint()", "class_method_signature": "RoadPath.getFirstJunctionPoint()", "testcase": false, "constructor": false}, {"identifier": "crossRoads", "parameters": "()", "modifiers": "@Pure public", "return": "Iterator<CrossRoad>", "signature": "Iterator<CrossRoad> crossRoads()", "full_signature": "@Pure public Iterator<CrossRoad> crossRoads()", "class_method_signature": "RoadPath.crossRoads()", "testcase": false, "constructor": false}], "file": "advanced/gis/gisroad/src/main/java/org/arakhne/afc/gis/road/path/RoadPath.java"}, "focal_method": {"identifier": "getFirstCrossRoad", "parameters": "()", "modifiers": "@Pure public", "return": "RoadConnection", "body": "@Pure\n\tpublic RoadConnection getFirstCrossRoad() {\n\t\tfor (final RoadConnection pt : points()) {\n\t\t\tif (pt.getConnectedSegmentCount() > 2) {\n\t\t\t\treturn pt;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "signature": "RoadConnection getFirstCrossRoad()", "full_signature": "@Pure public RoadConnection getFirstCrossRoad()", "class_method_signature": "RoadPath.getFirstCrossRoad()", "testcase": false, "constructor": false, "invocations": ["points", "getConnectedSegmentCount"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}