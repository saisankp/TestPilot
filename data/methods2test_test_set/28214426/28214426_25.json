{"test_class": {"identifier": "ConfigUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "config/src/test/java/io/confluent/common/config/ConfigUtilsTest.java"}, "test_case": {"identifier": "testTranslateDeprecated", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testTranslateDeprecated() throws Exception {\n    Properties props = new Properties();\n    props.setProperty(\"foo.bar\", \"baz\");\n    props.setProperty(\"foo.bar.deprecated\", \"quux\");\n    props.setProperty(\"chicken\", \"1\");\n    props.setProperty(\"rooster\", \"2\");\n    props.setProperty(\"hen\", \"3\");\n    props.setProperty(\"heifer\", \"moo\");\n    props.setProperty(\"blah\", \"blah\");\n    props.put(\"unexpected.non.string.object\", new Integer(42));\n    Properties newProps = ConfigUtils.translateDeprecated(props, new String[][]{\n        {\"foo.bar\", \"foo.bar.deprecated\"},\n        {\"chicken\", \"rooster\", \"hen\"},\n        {\"cow\", \"beef\", \"heifer\", \"steer\"}\n    });\n    assertEquals(\"baz\", newProps.getProperty(\"foo.bar\"));\n    assertEquals(null, newProps.getProperty(\"foo.bar.deprecated\"));\n    assertEquals(\"1\", newProps.getProperty(\"chicken\"));\n    assertEquals(null, newProps.getProperty(\"rooster\"));\n    assertEquals(null, newProps.getProperty(\"hen\"));\n    assertEquals(\"moo\", newProps.getProperty(\"cow\"));\n    assertEquals(null, newProps.getProperty(\"beef\"));\n    assertEquals(null, newProps.getProperty(\"heifer\"));\n    assertEquals(null, newProps.getProperty(\"steer\"));\n    assertEquals(null, props.getProperty(\"cow\"));\n    assertEquals(\"blah\", props.getProperty(\"blah\"));\n    assertEquals(\"blah\", newProps.getProperty(\"blah\"));\n\n    // The java.util.Properties class was intended to store only String values.\n    // However, because of a design mistake, it can actually store arbitrary Objects.\n    // They are not returned when Properties#getProperty is invoked, but they are\n    // returned when Properties#get is invoked.\n    // Here, we test that ConfigUtils passes through these objects unchanged.\n    assertEquals(null, newProps.getProperty(\"unexpected.non.string.object\"));\n    assertEquals(new Integer(42), newProps.get(\"unexpected.non.string.object\"));\n    assertEquals(null, props.getProperty(\"unexpected.non.string.object\"));\n    assertEquals(new Integer(42), props.get(\"unexpected.non.string.object\"));\n\n  }", "signature": "void testTranslateDeprecated()", "full_signature": "@Test public void testTranslateDeprecated()", "class_method_signature": "ConfigUtilsTest.testTranslateDeprecated()", "testcase": true, "constructor": false, "invocations": ["setProperty", "setProperty", "setProperty", "setProperty", "setProperty", "setProperty", "setProperty", "put", "translateDeprecated", "assertEquals", "getProperty", "assertEquals", "getProperty", "assertEquals", "getProperty", "assertEquals", "getProperty", "assertEquals", "getProperty", "assertEquals", "getProperty", "assertEquals", "getProperty", "assertEquals", "getProperty", "assertEquals", "getProperty", "assertEquals", "getProperty", "assertEquals", "getProperty", "assertEquals", "getProperty", "assertEquals", "getProperty", "assertEquals", "get", "assertEquals", "getProperty", "assertEquals", "get"]}, "focal_class": {"identifier": "ConfigUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static Logger log = LoggerFactory.getLogger(ConfigUtils.class);", "modifier": "private final static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ConfigUtils.class)", "var_name": "log"}], "methods": [{"identifier": "translateDeprecated", "parameters": "(Properties props, String[][] synonymGroups)", "modifiers": "public static", "return": "Properties", "signature": "Properties translateDeprecated(Properties props, String[][] synonymGroups)", "full_signature": "public static Properties translateDeprecated(Properties props, String[][] synonymGroups)", "class_method_signature": "ConfigUtils.translateDeprecated(Properties props, String[][] synonymGroups)", "testcase": false, "constructor": false}], "file": "config/src/main/java/io/confluent/common/config/ConfigUtils.java"}, "focal_method": {"identifier": "translateDeprecated", "parameters": "(Properties props, String[][] synonymGroups)", "modifiers": "public static", "return": "Properties", "body": "public static Properties translateDeprecated(Properties props, String[][] synonymGroups) {\n    // Copy the Properties which are not part of a synonym group into a new\n    // Properties object.\n    HashSet<String> synonymSet = new HashSet<>();\n    for (String[] synonymGroup: synonymGroups) {\n      for (String synonym : synonymGroup) {\n        if (!synonymSet.add(synonym)) {\n          // TODO: we should consider doing more formal validations around this\n          log.warn(\"reused synonym={}\", synonym);\n        }\n      }\n    }\n    // Properties is a very old Java class which uses Enumeration to iterate through keys rather\n    // than an iterator.  The keys are always String, but we have to deal with an\n    // Enumeration<Object> anyway, probably for historical purposes.\n    Properties newProps = new Properties();\n    for (Enumeration<String> keyEnumerator = (Enumeration<String>) props.propertyNames();\n         keyEnumerator.hasMoreElements(); ) {\n      String key = keyEnumerator.nextElement();\n      if (!synonymSet.contains(key)) {\n        newProps.put(key, props.get(key));\n      }\n    }\n    // Process each synonym group.\n    for (String[] synonymGroup: synonymGroups) {\n      String target = synonymGroup[0];\n      List<String> deprecated = new ArrayList<>();\n      for (int i = 1; i < synonymGroup.length; i++) {\n        if (props.containsKey(synonymGroup[i])) {\n          deprecated.add(synonymGroup[i]);\n        }\n      }\n      if (deprecated.isEmpty()) {\n        // No deprecated key(s) found.\n        if (props.containsKey(target)) {\n          newProps.put(target, props.get(target));\n        }\n        continue;\n      }\n      StringBuilder synonymString = new StringBuilder(deprecated.get(0));\n      for (int i = 1; i < deprecated.size(); i++) {\n        synonymString.append(\", \");\n        synonymString.append(deprecated.get(i));\n      }\n      if (props.containsKey(target)) {\n        // Ignore the deprecated key(s) because the actual key was set.\n        log.error(target + \" was configured, as well as the deprecated synonym(s) \" +\n          synonymString + \".  Using the value of \" + target);\n        newProps.put(target, props.get(target));\n      } else if (deprecated.size() > 1) {\n        log.error(\"The configuration keys \" + synonymString + \" are deprecated and may be \" +\n          \"removed in the future.  Additionally, this configuration is ambigous because \" +\n          \"these configuration keys are all synonyms for \" + target + \".  Please update \" +\n          \"your configuration to have only \" + target + \" set.\");\n        newProps.put(target, props.get(deprecated.get(0)));\n      } else {\n        log.warn(\"Configuration key \" + deprecated.get(0) + \" is deprecated and may be removed \" +\n          \"in the future.  Please update your configuration to use \" + target + \" instead.\");\n        newProps.put(target, props.get(deprecated.get(0)));\n      }\n    }\n    return newProps;\n  }", "signature": "Properties translateDeprecated(Properties props, String[][] synonymGroups)", "full_signature": "public static Properties translateDeprecated(Properties props, String[][] synonymGroups)", "class_method_signature": "ConfigUtils.translateDeprecated(Properties props, String[][] synonymGroups)", "testcase": false, "constructor": false, "invocations": ["add", "warn", "propertyNames", "hasMoreElements", "nextElement", "contains", "put", "get", "containsKey", "add", "isEmpty", "containsKey", "put", "get", "get", "size", "append", "append", "get", "containsKey", "error", "put", "get", "size", "error", "put", "get", "get", "warn", "get", "put", "get", "get"]}, "repository": {"repo_id": 28214426, "url": "https://github.com/confluentinc/common", "stars": 46, "created": "12/19/2014 4:38:00 AM +00:00", "updates": "2020-01-22T00:50:00+00:00", "fork": "False", "license": "licensed"}}