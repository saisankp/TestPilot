{"test_class": {"identifier": "PriceSpliterTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/modules/boot/src/test/java/org/onetwo/ext/es/PriceSpliterTest.java"}, "test_case": {"identifier": "testCalcConfidenceSection", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCalcConfidenceSection(){\n\t\tint maxCount = 32;\n\t\tImmutablePair<BigDecimal, BigDecimal> section = ConfidenceLevelUtils.calcConfidenceSection(57.27, 171.67);\n\t\tSystem.out.println(\"sections:\"+section);\n\t\t\n\t\tfinal List<ImmutablePair<Integer, Integer>> splits = PriceSpliter.split(section, maxCount);\n\t\tSystem.out.println(\"splits[\"+splits.size()+\"]:\"+splits);\n\t\t\n\t\tAtomicInteger index = new AtomicInteger(0);\n\t\tList<RangeResult> rangeResult = splits.stream().map(pair->{\n\t\t\tRangeResult r = new RangeResult(pair.getLeft(), pair.getRight());\n\t\t\tif(index.get()==1){\n\t\t\t\tr.setDocCount(1);\n\t\t\t}else if(index.get()==2){\n\t\t\t\tr.setDocCount(2);\n\t\t\t}else if(index.get()==5){\n\t\t\t\tr.setDocCount(7);\n\t\t\t}else if(index.get()==8){\n\t\t\t\tr.setDocCount(4);\n\t\t\t}else if(index.get()==splits.size()){\n\t\t\t\tr.setDocCount(5);\n\t\t\t}\n\t\t\tindex.incrementAndGet();\n\t\t\treturn r;\n\t\t})\n\t\t.collect(Collectors.toList());\n\t\tSystem.out.println(\"splits[\"+rangeResult.size()+\"]:\"+rangeResult);\n\t\t\n\t\tdouble stdDeviation = 57;\n\t\tPriceSpliter spliter = new PriceSpliter(57, stdDeviation, rangeResult.size(), 5);\n\t\tList<RangeResult> mereged = spliter.split(rangeResult);\n\t\tSystem.out.println(\"mereged[\"+mereged.size()+\"]:\"+mereged);\n\t\t\n\t\tList<ImmutablePair<Integer, Integer>> splits2 = PriceSpliter.split(ImmutablePair.of(BigDecimal.valueOf(0), BigDecimal.valueOf(1000000)), maxCount);\n\t\tSystem.out.println(\"splits[\"+splits2.size()+\"]:\"+splits2);\n\t}", "signature": "void testCalcConfidenceSection()", "full_signature": "@Test public void testCalcConfidenceSection()", "class_method_signature": "PriceSpliterTest.testCalcConfidenceSection()", "testcase": true, "constructor": false, "invocations": ["calcConfidenceSection", "println", "split", "println", "size", "collect", "map", "stream", "getLeft", "getRight", "get", "setDocCount", "get", "setDocCount", "get", "setDocCount", "get", "setDocCount", "get", "size", "setDocCount", "incrementAndGet", "toList", "println", "size", "size", "split", "println", "size", "split", "of", "valueOf", "valueOf", "println", "size"]}, "focal_class": {"identifier": "PriceSpliter", "superclass": "", "interfaces": "", "fields": [{"original_string": "final private long totalCount;", "modifier": "final private", "type": "long", "declarator": "totalCount", "var_name": "totalCount"}, {"original_string": "final private List<ImmutablePair<Integer, Integer>> confidenceSections;", "modifier": "final private", "type": "List<ImmutablePair<Integer, Integer>>", "declarator": "confidenceSections", "var_name": "confidenceSections"}, {"original_string": "private int expectSectionSize;", "modifier": "private", "type": "int", "declarator": "expectSectionSize", "var_name": "expectSectionSize"}], "methods": [{"identifier": "PriceSpliter", "parameters": "(double averagePrice, double stdDeviation, long totalCount, int expectSectionSize)", "modifiers": "public", "return": "", "signature": " PriceSpliter(double averagePrice, double stdDeviation, long totalCount, int expectSectionSize)", "full_signature": "public  PriceSpliter(double averagePrice, double stdDeviation, long totalCount, int expectSectionSize)", "class_method_signature": "PriceSpliter.PriceSpliter(double averagePrice, double stdDeviation, long totalCount, int expectSectionSize)", "testcase": false, "constructor": true}, {"identifier": "calcConfidenceSection", "parameters": "(double avg, double sd)", "modifiers": "private", "return": "ImmutablePair<BigDecimal, BigDecimal>", "signature": "ImmutablePair<BigDecimal, BigDecimal> calcConfidenceSection(double avg, double sd)", "full_signature": "private ImmutablePair<BigDecimal, BigDecimal> calcConfidenceSection(double avg, double sd)", "class_method_signature": "PriceSpliter.calcConfidenceSection(double avg, double sd)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(ImmutablePair<BigDecimal, BigDecimal> section)", "modifiers": "private", "return": "List<ImmutablePair<Integer, Integer>>", "signature": "List<ImmutablePair<Integer, Integer>> split(ImmutablePair<BigDecimal, BigDecimal> section)", "full_signature": "private List<ImmutablePair<Integer, Integer>> split(ImmutablePair<BigDecimal, BigDecimal> section)", "class_method_signature": "PriceSpliter.split(ImmutablePair<BigDecimal, BigDecimal> section)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(ImmutablePair<BigDecimal, BigDecimal> section, int maxSplitCount)", "modifiers": "public static", "return": "List<ImmutablePair<Integer, Integer>>", "signature": "List<ImmutablePair<Integer, Integer>> split(ImmutablePair<BigDecimal, BigDecimal> section, int maxSplitCount)", "full_signature": "public static List<ImmutablePair<Integer, Integer>> split(ImmutablePair<BigDecimal, BigDecimal> section, int maxSplitCount)", "class_method_signature": "PriceSpliter.split(ImmutablePair<BigDecimal, BigDecimal> section, int maxSplitCount)", "testcase": false, "constructor": false}, {"identifier": "getRangeQueryers", "parameters": "()", "modifiers": "public", "return": "List<RangeQueryer>", "signature": "List<RangeQueryer> getRangeQueryers()", "full_signature": "public List<RangeQueryer> getRangeQueryers()", "class_method_signature": "PriceSpliter.getRangeQueryers()", "testcase": false, "constructor": false}, {"identifier": "splitAndGetKeys", "parameters": "(List<RangeResult> rangeResult)", "modifiers": "public", "return": "List<String>", "signature": "List<String> splitAndGetKeys(List<RangeResult> rangeResult)", "full_signature": "public List<String> splitAndGetKeys(List<RangeResult> rangeResult)", "class_method_signature": "PriceSpliter.splitAndGetKeys(List<RangeResult> rangeResult)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(List<RangeResult> rangeResult)", "modifiers": "public", "return": "List<RangeResult>", "signature": "List<RangeResult> split(List<RangeResult> rangeResult)", "full_signature": "public List<RangeResult> split(List<RangeResult> rangeResult)", "class_method_signature": "PriceSpliter.split(List<RangeResult> rangeResult)", "testcase": false, "constructor": false}, {"identifier": "getTotalCount", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getTotalCount()", "full_signature": "public long getTotalCount()", "class_method_signature": "PriceSpliter.getTotalCount()", "testcase": false, "constructor": false}], "file": "core/modules/boot/src/main/java/org/onetwo/ext/es/PriceSpliter.java"}, "focal_method": {"identifier": "calcConfidenceSection", "parameters": "(double avg, double sd)", "modifiers": "private", "return": "ImmutablePair<BigDecimal, BigDecimal>", "body": "private ImmutablePair<BigDecimal, BigDecimal> calcConfidenceSection(double avg, double sd){\n\t\tif(Double.isNaN(avg) || Double.isNaN(sd)){\n\t\t\tthrow new IllegalArgumentException(\"avg or sd is not a number: \"+avg+\", \"+sd);\n\t\t}\n\t\tDouble zscore = ConfidenceLevelUtils.getZscore(95);\n\t\treturn ConfidenceLevelUtils.calcConfidenceSection(BigDecimal.valueOf(avg), BigDecimal.valueOf(sd), zscore);\n\t}", "signature": "ImmutablePair<BigDecimal, BigDecimal> calcConfidenceSection(double avg, double sd)", "full_signature": "private ImmutablePair<BigDecimal, BigDecimal> calcConfidenceSection(double avg, double sd)", "class_method_signature": "PriceSpliter.calcConfidenceSection(double avg, double sd)", "testcase": false, "constructor": false, "invocations": ["isNaN", "isNaN", "getZscore", "calcConfidenceSection", "valueOf", "valueOf"]}, "repository": {"repo_id": 47802308, "url": "https://github.com/wayshall/onetwo", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 16, "size": 57582, "license": "licensed"}}