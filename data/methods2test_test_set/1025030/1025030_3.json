{"test_class": {"identifier": "JavaImageIOIdentifyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "String wsdlLoc = \"/pserv-pa-java-se/JavaImageIOIdentify?wsdl\";", "modifier": "", "type": "String", "declarator": "wsdlLoc = \"/pserv-pa-java-se/JavaImageIOIdentify?wsdl\"", "var_name": "wsdlLoc"}, {"original_string": "Identify ids = null;", "modifier": "", "type": "Identify", "declarator": "ids = null", "var_name": "ids"}], "file": "services/java-se/src/test/java/eu/planets_project/services/java_se/image/JavaImageIOIdentifyTest.java"}, "test_case": {"identifier": "testIdentify", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIdentify() throws MalformedURLException, URISyntaxException {\n        // Attempt to determine the type of a simple file, by name\n        testIdentifyThis(new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo-lowq-jpg.test\").toURI(), new URI(\"planets:fmt/ext/jpeg\"));\n        testIdentifyThis(new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo-lowq-png.test\").toURI(), new URI(\"planets:fmt/ext/png\"));\n        /* These don't seem to work in server mode, as if the JAR is not being picked up.\n        testIdentifyThis(new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo.jp2\").toURI(), new URI(\"planets:fmt/ext/jp2\"));\n        */\n    }", "signature": "void testIdentify()", "full_signature": "@Test public void testIdentify()", "class_method_signature": "JavaImageIOIdentifyTest.testIdentify()", "testcase": true, "constructor": false, "invocations": ["testIdentifyThis", "toURI", "testIdentifyThis", "toURI"]}, "focal_class": {"identifier": "JavaImageIOIdentify", "superclass": "", "interfaces": "implements Identify", "fields": [{"original_string": "public static final String NAME = \"JavaImageIOIdentify\";", "modifier": "public static final", "type": "String", "declarator": "NAME = \"JavaImageIOIdentify\"", "var_name": "NAME"}, {"original_string": "private static final Logger log = Logger.getLogger(JavaImageIOIdentify.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "log = Logger.getLogger(JavaImageIOIdentify.class.getName())", "var_name": "log"}, {"original_string": "static Tool tool = null;", "modifier": "static", "type": "Tool", "declarator": "tool = null", "var_name": "tool"}], "methods": [{"identifier": "describe", "parameters": "()", "modifiers": "public", "return": "ServiceDescription", "signature": "ServiceDescription describe()", "full_signature": "public ServiceDescription describe()", "class_method_signature": "JavaImageIOIdentify.describe()", "testcase": false, "constructor": false}, {"identifier": "identify", "parameters": "(DigitalObject dob, List<Parameter> parameters )", "modifiers": "public", "return": "IdentifyResult", "signature": "IdentifyResult identify(DigitalObject dob, List<Parameter> parameters )", "full_signature": "public IdentifyResult identify(DigitalObject dob, List<Parameter> parameters )", "class_method_signature": "JavaImageIOIdentify.identify(DigitalObject dob, List<Parameter> parameters )", "testcase": false, "constructor": false}, {"identifier": "returnWithErrorMessage", "parameters": "(ServiceReport report)", "modifiers": "private", "return": "IdentifyResult", "signature": "IdentifyResult returnWithErrorMessage(ServiceReport report)", "full_signature": "private IdentifyResult returnWithErrorMessage(ServiceReport report)", "class_method_signature": "JavaImageIOIdentify.returnWithErrorMessage(ServiceReport report)", "testcase": false, "constructor": false}, {"identifier": "getFormatName", "parameters": "(Object o)", "modifiers": "private static", "return": "ImageReader", "signature": "ImageReader getFormatName(Object o)", "full_signature": "private static ImageReader getFormatName(Object o)", "class_method_signature": "JavaImageIOIdentify.getFormatName(Object o)", "testcase": false, "constructor": false}, {"identifier": "unique", "parameters": "(String[] strings)", "modifiers": "public static", "return": "String[]", "signature": "String[] unique(String[] strings)", "full_signature": "public static String[] unique(String[] strings)", "class_method_signature": "JavaImageIOIdentify.unique(String[] strings)", "testcase": false, "constructor": false}, {"identifier": "sanitize", "parameters": "( String format )", "modifiers": "public static", "return": "String", "signature": "String sanitize( String format )", "full_signature": "public static String sanitize( String format )", "class_method_signature": "JavaImageIOIdentify.sanitize( String format )", "testcase": false, "constructor": false}], "file": "services/java-se/src/main/java/eu/planets_project/services/java_se/image/JavaImageIOIdentify.java"}, "focal_method": {"identifier": "identify", "parameters": "(DigitalObject dob, List<Parameter> parameters )", "modifiers": "public", "return": "IdentifyResult", "body": "public IdentifyResult identify(DigitalObject dob, List<Parameter> parameters ) {\n        // Start timing...\n        ServicePerformanceHelper sph = new ServicePerformanceHelper();\n        \n        // Initialise the result:\n        ImageReader imageReader = null;\n\n        // Can only cope if the object is 'simple':\n        if (dob.getContent() == null) {\n            return returnWithErrorMessage(ServiceUtils\n                    .createErrorReport(\"The Content of the DigitalObject should not be NULL.\"));\n        }\n        // If this is an embedded binary:\n        try {\n            imageReader = getFormatName(dob.getContent().getInputStream());\n            // Record time take to load the input into memory:\n            sph.loaded();\n\n            if (imageReader == null || imageReader.getFormatName() == null)\n                return returnWithErrorMessage(ServiceUtils.createErrorReport(\"Could not identify the image.\"));\n            \n            List<URI> types = new ArrayList<URI>();\n            URI typeURI = FormatRegistryFactory.getFormatRegistry().createExtensionUri(sanitize(imageReader.getFormatName()));\n            types.add(typeURI);\n            log.fine(String.format(\"Identified %s as %s\", dob, types));\n            \n            ServiceReport rep = new ServiceReport(Type.INFO, Status.SUCCESS, \"OK\", sph.getPerformanceProperties() );\n            return new IdentifyResult(types,\n                    IdentifyResult.Method.PARTIAL_PARSE, rep);\n        } catch (IOException e) {\n            return returnWithErrorMessage(ServiceUtils.createErrorReport(\"IOException reading the image: \" + e));\n        }\n\n    }", "signature": "IdentifyResult identify(DigitalObject dob, List<Parameter> parameters )", "full_signature": "public IdentifyResult identify(DigitalObject dob, List<Parameter> parameters )", "class_method_signature": "JavaImageIOIdentify.identify(DigitalObject dob, List<Parameter> parameters )", "testcase": false, "constructor": false, "invocations": ["getContent", "returnWithErrorMessage", "createErrorReport", "getFormatName", "getInputStream", "getContent", "loaded", "getFormatName", "returnWithErrorMessage", "createErrorReport", "createExtensionUri", "getFormatRegistry", "sanitize", "getFormatName", "add", "fine", "format", "getPerformanceProperties", "returnWithErrorMessage", "createErrorReport"]}, "repository": {"repo_id": 1025030, "url": "https://github.com/opf-labs/planets-suite", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 9, "size": 198462, "license": "licensed"}}