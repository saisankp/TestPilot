{"test_class": {"identifier": "RuntimeExceptionUnwrappingMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    RuntimeExceptionUnwrappingMapper mapper;", "modifier": "@InjectMocks", "type": "RuntimeExceptionUnwrappingMapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "@Mock\n    DomainServiceExceptionMapper domainServiceExceptionMapper;", "modifier": "@Mock", "type": "DomainServiceExceptionMapper", "declarator": "domainServiceExceptionMapper", "var_name": "domainServiceExceptionMapper"}], "file": "service/src/test/java/org/coner/core/resource/RuntimeExceptionUnwrappingMapperTest.java"}, "test_case": {"identifier": "itShouldMapUnknownRuntimeException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void itShouldMapUnknownRuntimeException() {\n        String message = \"message\";\n        RuntimeException runtimeException = new RuntimeException(message);\n\n        Response actual = mapper.toResponse(runtimeException);\n\n        assertThat(actual.getStatus()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR_500);\n        assertThat((ErrorMessage) actual.getEntity())\n                .extracting(ErrorMessage::getCode, ErrorMessage::getMessage, ErrorMessage::getDetails)\n                .containsExactly(HttpStatus.INTERNAL_SERVER_ERROR_500, message, null);\n    }", "signature": "void itShouldMapUnknownRuntimeException()", "full_signature": "@Test public void itShouldMapUnknownRuntimeException()", "class_method_signature": "RuntimeExceptionUnwrappingMapperTest.itShouldMapUnknownRuntimeException()", "testcase": true, "constructor": false, "invocations": ["toResponse", "isEqualTo", "assertThat", "getStatus", "containsExactly", "extracting", "assertThat", "getEntity"]}, "focal_class": {"identifier": "RuntimeExceptionUnwrappingMapper", "superclass": "", "interfaces": "implements ExceptionMapper<RuntimeException>", "fields": [{"original_string": "private final DomainServiceExceptionMapper domainServiceExceptionMapper;", "modifier": "private final", "type": "DomainServiceExceptionMapper", "declarator": "domainServiceExceptionMapper", "var_name": "domainServiceExceptionMapper"}], "methods": [{"identifier": "RuntimeExceptionUnwrappingMapper", "parameters": "(DomainServiceExceptionMapper domainServiceExceptionMapper)", "modifiers": "@Inject public", "return": "", "signature": " RuntimeExceptionUnwrappingMapper(DomainServiceExceptionMapper domainServiceExceptionMapper)", "full_signature": "@Inject public  RuntimeExceptionUnwrappingMapper(DomainServiceExceptionMapper domainServiceExceptionMapper)", "class_method_signature": "RuntimeExceptionUnwrappingMapper.RuntimeExceptionUnwrappingMapper(DomainServiceExceptionMapper domainServiceExceptionMapper)", "testcase": false, "constructor": true}, {"identifier": "toResponse", "parameters": "(RuntimeException exception)", "modifiers": "@Override public", "return": "Response", "signature": "Response toResponse(RuntimeException exception)", "full_signature": "@Override public Response toResponse(RuntimeException exception)", "class_method_signature": "RuntimeExceptionUnwrappingMapper.toResponse(RuntimeException exception)", "testcase": false, "constructor": false}], "file": "service/src/main/java/org/coner/core/resource/RuntimeExceptionUnwrappingMapper.java"}, "focal_method": {"identifier": "toResponse", "parameters": "(RuntimeException exception)", "modifiers": "@Override public", "return": "Response", "body": "@Override\n    public Response toResponse(RuntimeException exception) {\n        Throwable cause = exception.getCause();\n        if (cause instanceof DomainServiceException) {\n            return domainServiceExceptionMapper.toResponse((DomainServiceException) cause);\n        }\n        int status = HttpStatus.INTERNAL_SERVER_ERROR_500;\n        return Response.status(status)\n                .type(MediaType.APPLICATION_JSON)\n                .entity(new ErrorMessage(status, exception.getMessage()))\n                .build();\n    }", "signature": "Response toResponse(RuntimeException exception)", "full_signature": "@Override public Response toResponse(RuntimeException exception)", "class_method_signature": "RuntimeExceptionUnwrappingMapper.toResponse(RuntimeException exception)", "testcase": false, "constructor": false, "invocations": ["getCause", "toResponse", "build", "entity", "type", "status", "getMessage"]}, "repository": {"repo_id": 28649714, "url": "https://github.com/caeos/coner-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 7, "size": 1027, "license": "licensed"}}