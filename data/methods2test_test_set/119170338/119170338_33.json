{"test_class": {"identifier": "CosineSimilarityTest", "superclass": "extends VegetableOntologyTestBase", "interfaces": "", "fields": [{"original_string": "private final CosineSimilarity similarity = new CosineSimilarity(ontology);", "modifier": "private final", "type": "CosineSimilarity", "declarator": "similarity = new CosineSimilarity(ontology)", "var_name": "similarity"}], "file": "phenol-core/src/test/java/org/monarchinitiative/phenol/ontology/similarity/CosineSimilarityTest.java"}, "test_case": {"identifier": "testComputeSimilarities", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void testComputeSimilarities() {\n    assertEquals(\n        0.408,\n        similarity.computeScore(Lists.newArrayList(idBeet), Lists.newArrayList(idCarrot)),\n        0.01);\n    assertEquals(\n        0.816,\n        similarity.computeScore(Lists.newArrayList(idBlueCarrot), Lists.newArrayList(idCarrot)),\n        0.01);\n    assertEquals(\n        0.50,\n        similarity.computeScore(Lists.newArrayList(idPumpkin), Lists.newArrayList(idCarrot)),\n        0.01);\n    assertEquals(\n        0.0,\n        similarity.computeScore(Lists.newArrayList(idLeafVegetable), Lists.newArrayList(idCarrot)),\n        0.01);\n  }", "signature": "void testComputeSimilarities()", "full_signature": "@Test void testComputeSimilarities()", "class_method_signature": "CosineSimilarityTest.testComputeSimilarities()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "computeScore", "newArrayList", "newArrayList", "assertEquals", "computeScore", "newArrayList", "newArrayList", "assertEquals", "computeScore", "newArrayList", "newArrayList", "assertEquals", "computeScore", "newArrayList", "newArrayList"]}, "focal_class": {"identifier": "CosineSimilarity", "superclass": "", "interfaces": "implements Similarity", "fields": [{"original_string": "private final Ontology ontology;", "modifier": "private final", "type": "Ontology", "declarator": "ontology", "var_name": "ontology"}, {"original_string": "private final boolean oppositeAware;", "modifier": "private final", "type": "boolean", "declarator": "oppositeAware", "var_name": "oppositeAware"}], "methods": [{"identifier": "CosineSimilarity", "parameters": "(Ontology ontology)", "modifiers": "public", "return": "", "signature": " CosineSimilarity(Ontology ontology)", "full_signature": "public  CosineSimilarity(Ontology ontology)", "class_method_signature": "CosineSimilarity.CosineSimilarity(Ontology ontology)", "testcase": false, "constructor": true}, {"identifier": "CosineSimilarity", "parameters": "(Ontology ontology, boolean oppositeAware)", "modifiers": "public", "return": "", "signature": " CosineSimilarity(Ontology ontology, boolean oppositeAware)", "full_signature": "public  CosineSimilarity(Ontology ontology, boolean oppositeAware)", "class_method_signature": "CosineSimilarity.CosineSimilarity(Ontology ontology, boolean oppositeAware)", "testcase": false, "constructor": true}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "CosineSimilarity.getName()", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getParameters()", "full_signature": "@Override public String getParameters()", "class_method_signature": "CosineSimilarity.getParameters()", "testcase": false, "constructor": false}, {"identifier": "isSymmetric", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSymmetric()", "full_signature": "@Override public boolean isSymmetric()", "class_method_signature": "CosineSimilarity.isSymmetric()", "testcase": false, "constructor": false}, {"identifier": "computeScore", "parameters": "(Collection<TermId> query, Collection<TermId> target)", "modifiers": "@Override public", "return": "double", "signature": "double computeScore(Collection<TermId> query, Collection<TermId> target)", "full_signature": "@Override public double computeScore(Collection<TermId> query, Collection<TermId> target)", "class_method_signature": "CosineSimilarity.computeScore(Collection<TermId> query, Collection<TermId> target)", "testcase": false, "constructor": false}], "file": "phenol-core/src/main/java/org/monarchinitiative/phenol/ontology/similarity/CosineSimilarity.java"}, "focal_method": {"identifier": "computeScore", "parameters": "(Collection<TermId> query, Collection<TermId> target)", "modifiers": "@Override public", "return": "double", "body": "@Override\n  public double computeScore(Collection<TermId> query, Collection<TermId> target) {\n    final Set<TermId> termIdsQuery = ontology.getAllAncestorTermIds(query, false);\n    final Set<TermId> termIdsTarget = ontology.getAllAncestorTermIds(target, false);\n\n    return Sets.intersection(termIdsQuery, termIdsTarget).size()\n        / (Math.sqrt(termIdsQuery.size()) * Math.sqrt(termIdsTarget.size()));\n  }", "signature": "double computeScore(Collection<TermId> query, Collection<TermId> target)", "full_signature": "@Override public double computeScore(Collection<TermId> query, Collection<TermId> target)", "class_method_signature": "CosineSimilarity.computeScore(Collection<TermId> query, Collection<TermId> target)", "testcase": false, "constructor": false, "invocations": ["getAllAncestorTermIds", "getAllAncestorTermIds", "size", "intersection", "sqrt", "size", "sqrt", "size"]}, "repository": {"repo_id": 119170338, "url": "https://github.com/monarch-initiative/phenol", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 5832, "license": "licensed"}}