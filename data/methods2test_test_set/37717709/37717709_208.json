{"test_class": {"identifier": "TestScopedSet", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ScopeObserver observer;", "modifier": "private", "type": "ScopeObserver", "declarator": "observer", "var_name": "observer"}], "file": "org.jvoicexml/src/test/java/org/jvoicexml/interpreter/scope/TestScopedSet.java"}, "test_case": {"identifier": "testRemove", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRemove() {\n        final ScopedSet<String> set = new ScopedSet<String>(observer);\n\n        final String test1 = \"test1\";\n        final String test2 = \"test2\";\n        final String test3 = \"test2\";\n        \n        Assert.assertFalse(set.contains(test1));\n        Assert.assertFalse(set.contains(test2));\n        set.add(test1);\n        set.add(test2);\n        Assert.assertTrue(set.contains(test1));\n        Assert.assertTrue(set.contains(test2));\n        Assert.assertEquals(2, set.size());\n        set.add(test3);\n        Assert.assertTrue(set.contains(test1));\n        Assert.assertTrue(set.contains(test2));\n        Assert.assertEquals(2, set.size());\n        set.enterScope(Scope.SESSION, Scope.DOCUMENT);\n        final String test4 = \"test4\";\n        set.add(test4);\n        set.add(test3);\n        Assert.assertTrue(set.contains(test1));\n        Assert.assertTrue(set.contains(test2));\n        Assert.assertTrue(set.contains(test4));\n        Assert.assertEquals(3, set.size());\n        set.remove(test1);\n        Assert.assertFalse(\"'\" + test1 + \"' should no longr be in set\",\n                set.contains(test1));\n        Assert.assertTrue(set.contains(test2));\n        Assert.assertTrue(set.contains(test4));\n        Assert.assertEquals(2, set.size());\n        set.remove(test2);\n        Assert.assertFalse(set.contains(test1));\n        Assert.assertFalse(set.contains(test2));\n        Assert.assertTrue(set.contains(test4));\n        Assert.assertEquals(1, set.size());\n        set.remove(test4);\n        Assert.assertFalse(set.contains(test1));\n        Assert.assertFalse(set.contains(test2));\n        Assert.assertFalse(set.contains(test4));\n        Assert.assertEquals(0, set.size());\n    }", "signature": "void testRemove()", "full_signature": "@Test public void testRemove()", "class_method_signature": "TestScopedSet.testRemove()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "contains", "assertFalse", "contains", "add", "add", "assertTrue", "contains", "assertTrue", "contains", "assertEquals", "size", "add", "assertTrue", "contains", "assertTrue", "contains", "assertEquals", "size", "enterScope", "add", "add", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertEquals", "size", "remove", "assertFalse", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertEquals", "size", "remove", "assertFalse", "contains", "assertFalse", "contains", "assertTrue", "contains", "assertEquals", "size", "remove", "assertFalse", "contains", "assertFalse", "contains", "assertFalse", "contains", "assertEquals", "size"]}, "focal_class": {"identifier": "ScopedSet", "superclass": "", "interfaces": "implements ScopeSubscriber, Set<E>", "fields": [{"original_string": "private static final Logger LOGGER = LogManager.getLogger(ScopedSet.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LogManager.getLogger(ScopedSet.class)", "var_name": "LOGGER"}, {"original_string": "private final Stack<ScopedCollectionItem<E>> stack;", "modifier": "private final", "type": "Stack<ScopedCollectionItem<E>>", "declarator": "stack", "var_name": "stack"}, {"original_string": "private final Set<E> view;", "modifier": "private final", "type": "Set<E>", "declarator": "view", "var_name": "view"}, {"original_string": "private final ScopeObserver observer;", "modifier": "private final", "type": "ScopeObserver", "declarator": "observer", "var_name": "observer"}, {"original_string": "private Scope scope;", "modifier": "private", "type": "Scope", "declarator": "scope", "var_name": "scope"}, {"original_string": "private final Collection<ScopedSetObserver<E>> observers;", "modifier": "private final", "type": "Collection<ScopedSetObserver<E>>", "declarator": "observers", "var_name": "observers"}], "methods": [{"identifier": "ScopedSet", "parameters": "(final ScopeObserver scopeObserver)", "modifiers": "public", "return": "", "signature": " ScopedSet(final ScopeObserver scopeObserver)", "full_signature": "public  ScopedSet(final ScopeObserver scopeObserver)", "class_method_signature": "ScopedSet.ScopedSet(final ScopeObserver scopeObserver)", "testcase": false, "constructor": true}, {"identifier": "addScopedSetObserver", "parameters": "(final ScopedSetObserver<E> obs)", "modifiers": "public", "return": "void", "signature": "void addScopedSetObserver(final ScopedSetObserver<E> obs)", "full_signature": "public void addScopedSetObserver(final ScopedSetObserver<E> obs)", "class_method_signature": "ScopedSet.addScopedSetObserver(final ScopedSetObserver<E> obs)", "testcase": false, "constructor": false}, {"identifier": "removeScopedSetObserver", "parameters": "(final ScopedSetObserver<E> obs)", "modifiers": "public", "return": "void", "signature": "void removeScopedSetObserver(final ScopedSetObserver<E> obs)", "full_signature": "public void removeScopedSetObserver(final ScopedSetObserver<E> obs)", "class_method_signature": "ScopedSet.removeScopedSetObserver(final ScopedSetObserver<E> obs)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "ScopedSet.close()", "testcase": false, "constructor": false}, {"identifier": "enterScope", "parameters": "(final Scope previous, final Scope next)", "modifiers": "public", "return": "void", "signature": "void enterScope(final Scope previous, final Scope next)", "full_signature": "public void enterScope(final Scope previous, final Scope next)", "class_method_signature": "ScopedSet.enterScope(final Scope previous, final Scope next)", "testcase": false, "constructor": false}, {"identifier": "exitScope", "parameters": "(final Scope previous, final Scope next)", "modifiers": "public", "return": "void", "signature": "void exitScope(final Scope previous, final Scope next)", "full_signature": "public void exitScope(final Scope previous, final Scope next)", "class_method_signature": "ScopedSet.exitScope(final Scope previous, final Scope next)", "testcase": false, "constructor": false}, {"identifier": "getCurrentCollection", "parameters": "()", "modifiers": "private", "return": "ScopedCollectionItem<E>", "signature": "ScopedCollectionItem<E> getCurrentCollection()", "full_signature": "private ScopedCollectionItem<E> getCurrentCollection()", "class_method_signature": "ScopedSet.getCurrentCollection()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(final E e)", "modifiers": "public", "return": "boolean", "signature": "boolean add(final E e)", "full_signature": "public boolean add(final E e)", "class_method_signature": "ScopedSet.add(final E e)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(final Collection<? extends E> c)", "modifiers": "public", "return": "boolean", "signature": "boolean addAll(final Collection<? extends E> c)", "full_signature": "public boolean addAll(final Collection<? extends E> c)", "class_method_signature": "ScopedSet.addAll(final Collection<? extends E> c)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "ScopedSet.clear()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(final Object o)", "modifiers": "public", "return": "boolean", "signature": "boolean contains(final Object o)", "full_signature": "public boolean contains(final Object o)", "class_method_signature": "ScopedSet.contains(final Object o)", "testcase": false, "constructor": false}, {"identifier": "containsAll", "parameters": "(final Collection<?> c)", "modifiers": "public", "return": "boolean", "signature": "boolean containsAll(final Collection<?> c)", "full_signature": "public boolean containsAll(final Collection<?> c)", "class_method_signature": "ScopedSet.containsAll(final Collection<?> c)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "ScopedSet.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "public", "return": "Iterator<E>", "signature": "Iterator<E> iterator()", "full_signature": "public Iterator<E> iterator()", "class_method_signature": "ScopedSet.iterator()", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(final Object o)", "modifiers": "public", "return": "boolean", "signature": "boolean remove(final Object o)", "full_signature": "public boolean remove(final Object o)", "class_method_signature": "ScopedSet.remove(final Object o)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "(final Collection<?> c)", "modifiers": "public", "return": "boolean", "signature": "boolean removeAll(final Collection<?> c)", "full_signature": "public boolean removeAll(final Collection<?> c)", "class_method_signature": "ScopedSet.removeAll(final Collection<?> c)", "testcase": false, "constructor": false}, {"identifier": "retainAll", "parameters": "(final Collection<?> c)", "modifiers": "public", "return": "boolean", "signature": "boolean retainAll(final Collection<?> c)", "full_signature": "public boolean retainAll(final Collection<?> c)", "class_method_signature": "ScopedSet.retainAll(final Collection<?> c)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "ScopedSet.size()", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "()", "modifiers": "public", "return": "Object[]", "signature": "Object[] toArray()", "full_signature": "public Object[] toArray()", "class_method_signature": "ScopedSet.toArray()", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(final T[] a)", "modifiers": "public", "return": "T[]", "signature": "T[] toArray(final T[] a)", "full_signature": "public T[] toArray(final T[] a)", "class_method_signature": "ScopedSet.toArray(final T[] a)", "testcase": false, "constructor": false}], "file": "org.jvoicexml/src/main/java/org/jvoicexml/interpreter/scope/ScopedSet.java"}, "focal_method": {"identifier": "remove", "parameters": "(final Object o)", "modifiers": "public", "return": "boolean", "body": "public boolean remove(final Object o) {\n        if (!contains(o)) {\n            return false;\n        }\n        view.remove(o);\n        for (ScopedCollectionItem<E> item : stack) {\n            if (item.remove(o)) {\n                return true;\n            }\n        }\n\n        return false;\n    }", "signature": "boolean remove(final Object o)", "full_signature": "public boolean remove(final Object o)", "class_method_signature": "ScopedSet.remove(final Object o)", "testcase": false, "constructor": false, "invocations": ["contains", "remove", "remove"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}