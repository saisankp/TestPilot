{"test_class": {"identifier": "DefaultOAuthJwtAccessTokenParserFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ClassLoader classLoader = this.getClass().getClassLoader();", "modifier": "private final", "type": "ClassLoader", "declarator": "classLoader = this.getClass().getClassLoader()", "var_name": "classLoader"}, {"original_string": "private final KeyStore baseKeyStore = new KeyStore() {\n        @Override\n        public String getPublicKey(String domain, String service, String keyId) {\n            return null;\n        }\n    };", "modifier": "private final", "type": "KeyStore", "declarator": "baseKeyStore = new KeyStore() {\n        @Override\n        public String getPublicKey(String domain, String service, String keyId) {\n            return null;\n        }\n    }", "var_name": "baseKeyStore"}], "file": "libs/java/auth_core/src/test/java/com/yahoo/athenz/auth/oauth/parser/DefaultOAuthJwtAccessTokenParserFactoryTest.java"}, "test_case": {"identifier": "testCreate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreate() throws OAuthJwtAccessTokenException {\n        OAuthJwtAccessTokenParser parser = null;\n        DefaultOAuthJwtAccessTokenParserFactory factory = new DefaultOAuthJwtAccessTokenParserFactory();\n\n        // check internal\n        assertThrows(IllegalArgumentException.class, () -> factory.create(null));\n\n        // check default\n        parser = factory.create(baseKeyStore);\n        assertNotNull(parser);\n\n        // check custom property\n        String jwtString = \"eyJraWQiOiJjOTk4NmVlMy03YjJhLTRkMjAtYjg2YS0wODM5ODU2ZjI1NDEiLCJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJEZWZhdWx0T0F1dGhKd3RBY2Nlc3NUb2tlblBhcnNlckZhY3RvcnlUZXN0In0.UalqjyBTDNnEqA0NaOeOhTn_H96vFo9TsCTq58r1YT2p5Hf3xjZLn25puWjcoGZOp1N2xBrvKwmcysHtib5Gq70ulBV7zQXHVzoLB56Ey2LDJJ3QH5sejPCXuapu2i21hSp4PEVvqndULdMipcFYngN97uISrwj-cki8XVgEQDs3OiuHNpyLPYHbCOrbncU9cy29K7l1wYS9gG_OYUB_gy0vdQDhbdbtWs6iwYWQZ3UWJcLp_j1hZyeRhmrSeAmHEBUa8mZs8EuySd3cxUYtV5qje_GPQ47BP2sFWSM6an4Gw6llSWp395O9zJPHRwcqSeIop_wV9Lb7C7v1pRDQDGDsSXH4UbxvEw-Yb0fg4jos3z2cLtk8NR4qzLCVnzHt1uD9QpzB3dXNB22nn8coZ0ay78lMahje6xw162pyjWZUD2YrRpPxUgngdsVJEN-DBQzKQyieHWTWMEgZ2uUsXtPKTKYcW9XfHSXE7gEQwNP9Qz03oP4bz9oP1aLpeQIMQ790NsMfSOv3yRpH5RswZ5rd9NJZgH-n57AlS8Oqz1-wIwTehGdnRlEveU0xoVfuQOonooPHACXA0DR2pV-zo6VT4BOLUMmhU8-TDvP05VXC-maNljjjtL4H7pX6ob9eLTAbj96RqHOkey89WwgKlS1a6LnoMRxcuVJPPmcerdY\";\n        System.setProperty(\"athenz.auth.oauth.jwt.parser.jwks_url\", this.classLoader.getResource(\"jwt_jwks.json\").toString());\n        parser = factory.create(baseKeyStore);\n        System.clearProperty(\"athenz.auth.oauth.jwt.parser.jwks_url\");\n        OAuthJwtAccessToken token = parser.parse(jwtString);\n        assertEquals(token.getIssuer(), \"DefaultOAuthJwtAccessTokenParserFactoryTest\");\n    }", "signature": "void testCreate()", "full_signature": "@Test public void testCreate()", "class_method_signature": "DefaultOAuthJwtAccessTokenParserFactoryTest.testCreate()", "testcase": true, "constructor": false, "invocations": ["assertThrows", "create", "create", "assertNotNull", "setProperty", "toString", "getResource", "create", "clearProperty", "parse", "assertEquals", "getIssuer"]}, "focal_class": {"identifier": "DefaultOAuthJwtAccessTokenParserFactory", "superclass": "", "interfaces": "implements OAuthJwtAccessTokenParserFactory", "fields": [{"original_string": "public static final String SYSTEM_PROP_PREFIX = \"athenz.auth.oauth.jwt.parser.\";", "modifier": "public static final", "type": "String", "declarator": "SYSTEM_PROP_PREFIX = \"athenz.auth.oauth.jwt.parser.\"", "var_name": "SYSTEM_PROP_PREFIX"}, {"original_string": "public static final String JWKS_URL = \"jwks_url\";", "modifier": "public static final", "type": "String", "declarator": "JWKS_URL = \"jwks_url\"", "var_name": "JWKS_URL"}, {"original_string": "public static final BiFunction<String, String, String> GET_PROPERTY = (String key, String def) -> {\n        return System.getProperty(SYSTEM_PROP_PREFIX + key, def);\n    };", "modifier": "public static final", "type": "BiFunction<String, String, String>", "declarator": "GET_PROPERTY = (String key, String def) -> {\n        return System.getProperty(SYSTEM_PROP_PREFIX + key, def);\n    }", "var_name": "GET_PROPERTY"}], "methods": [{"identifier": "create", "parameters": "(KeyStore keyStore)", "modifiers": "@Override public", "return": "OAuthJwtAccessTokenParser", "signature": "OAuthJwtAccessTokenParser create(KeyStore keyStore)", "full_signature": "@Override public OAuthJwtAccessTokenParser create(KeyStore keyStore)", "class_method_signature": "DefaultOAuthJwtAccessTokenParserFactory.create(KeyStore keyStore)", "testcase": false, "constructor": false}], "file": "libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/oauth/parser/DefaultOAuthJwtAccessTokenParserFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(KeyStore keyStore)", "modifiers": "@Override public", "return": "OAuthJwtAccessTokenParser", "body": "@Override\n    public OAuthJwtAccessTokenParser create(KeyStore keyStore) throws IllegalArgumentException {\n        final String jwksUrl = GET_PROPERTY.apply(JWKS_URL, null);\n        return new DefaultOAuthJwtAccessTokenParser(keyStore, jwksUrl);\n    }", "signature": "OAuthJwtAccessTokenParser create(KeyStore keyStore)", "full_signature": "@Override public OAuthJwtAccessTokenParser create(KeyStore keyStore)", "class_method_signature": "DefaultOAuthJwtAccessTokenParserFactory.create(KeyStore keyStore)", "testcase": false, "constructor": false, "invocations": ["apply"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}