{"test_class": {"identifier": "AbstractConditionShardLocatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TestAbstractConditionShardLocator test = new TestAbstractConditionShardLocator();", "modifier": "private", "type": "TestAbstractConditionShardLocator", "declarator": "test = new TestAbstractConditionShardLocator()", "var_name": "test"}, {"original_string": "private TestAbstractConditionShardLocator test2 = new TestAbstractConditionShardLocator() {\n        @Override\n        public Set<String> locateForEqual(ConditionContext context) {\n            return set(context.getValue().toString());\n        }\n    };", "modifier": "private", "type": "TestAbstractConditionShardLocator", "declarator": "test2 = new TestAbstractConditionShardLocator() {\n        @Override\n        public Set<String> locateForEqual(ConditionContext context) {\n            return set(context.getValue().toString());\n        }\n    }", "var_name": "test2"}], "file": "das-client/src/test/java/com/ppdai/das/strategy/AbstractConditionShardLocatorTest.java"}, "test_case": {"identifier": "testLocateShards", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLocateShards() {\n        assertEquals(set(\"locateForEqual\"), test.locateShards(exp(OperatorEnum.EQUAL, \"eq\")));\n        assertEquals(set(\"locateForNotEqual\"), test.locateShards(exp(OperatorEnum.NOT_EQUAL, \"eq\")));\n\n        assertEquals(set(\"locateForGreaterThan\"), test.locateShards(exp(OperatorEnum.GREATER_THAN, \"eq\")));\n        assertEquals(set(\"locateForGreaterThanOrEqual\"), test.locateShards(exp(OperatorEnum.GREATER_THAN_OR_EQUAL, \"eq\")));\n\n        assertEquals(set(\"locateForLessThan\"), test.locateShards(exp(OperatorEnum.LESS_THAN, \"eq\")));\n        assertEquals(set(\"locateForLessThanOrEqual\"), test.locateShards(exp(OperatorEnum.LESS_THAN_OR_EQUAL, \"eq\")));\n\n        assertEquals(set(\"locateForBetween\"), test.locateShards(exp(OperatorEnum.BEWTEEN, \"eq\")));\n        assertEquals(set(\"locateForNotBetween\"), test.locateShards(exp(OperatorEnum.NOT_BETWEEN, \"eq\")));\n        \n        assertEquals(set(\"locateForIn\"), test.locateShards(exp(OperatorEnum.IN, \"eq\")));\n        assertEquals(set(\"locateForNotIn\"), test.locateShards(exp(OperatorEnum.NOT_IN, \"eq\")));\n        \n        assertEquals(set(\"locateForLike\"), test.locateShards(exp(OperatorEnum.LIKE, \"eq\")));\n        assertEquals(set(\"locateForNotLike\"), test.locateShards(exp(OperatorEnum.NOT_LIKE, \"eq\")));\n\n        assertEquals(set(\"locateForIsNull\"), test.locateShards(exp(OperatorEnum.IS_NULL, \"eq\")));\n        assertEquals(set(\"locateForIsNotNull\"), test.locateShards(exp(OperatorEnum.IS_NOT_NULL, \"eq\")));\n    }", "signature": "void testLocateShards()", "full_signature": "@Test public void testLocateShards()", "class_method_signature": "AbstractConditionShardLocatorTest.testLocateShards()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "set", "locateShards", "exp", "assertEquals", "set", "locateShards", "exp", "assertEquals", "set", "locateShards", "exp", "assertEquals", "set", "locateShards", "exp", "assertEquals", "set", "locateShards", "exp", "assertEquals", "set", "locateShards", "exp", "assertEquals", "set", "locateShards", "exp", "assertEquals", "set", "locateShards", "exp", "assertEquals", "set", "locateShards", "exp", "assertEquals", "set", "locateShards", "exp", "assertEquals", "set", "locateShards", "exp", "assertEquals", "set", "locateShards", "exp", "assertEquals", "set", "locateShards", "exp", "assertEquals", "set", "locateShards", "exp"]}, "focal_class": {"identifier": "AbstractConditionShardLocator", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "locateForEqual", "parameters": "(CTX context)", "modifiers": "public abstract", "return": "Set<String>", "signature": "Set<String> locateForEqual(CTX context)", "full_signature": "public abstract Set<String> locateForEqual(CTX context)", "class_method_signature": "AbstractConditionShardLocator.locateForEqual(CTX context)", "testcase": false, "constructor": false}, {"identifier": "locateForNotEqual", "parameters": "(CTX ctx)", "modifiers": "public abstract", "return": "Set<String>", "signature": "Set<String> locateForNotEqual(CTX ctx)", "full_signature": "public abstract Set<String> locateForNotEqual(CTX ctx)", "class_method_signature": "AbstractConditionShardLocator.locateForNotEqual(CTX ctx)", "testcase": false, "constructor": false}, {"identifier": "locateForGreaterThan", "parameters": "(CTX context)", "modifiers": "public abstract", "return": "Set<String>", "signature": "Set<String> locateForGreaterThan(CTX context)", "full_signature": "public abstract Set<String> locateForGreaterThan(CTX context)", "class_method_signature": "AbstractConditionShardLocator.locateForGreaterThan(CTX context)", "testcase": false, "constructor": false}, {"identifier": "locateForGreaterThanOrEqual", "parameters": "(CTX ctx)", "modifiers": "public abstract", "return": "Set<String>", "signature": "Set<String> locateForGreaterThanOrEqual(CTX ctx)", "full_signature": "public abstract Set<String> locateForGreaterThanOrEqual(CTX ctx)", "class_method_signature": "AbstractConditionShardLocator.locateForGreaterThanOrEqual(CTX ctx)", "testcase": false, "constructor": false}, {"identifier": "locateForLessThan", "parameters": "(CTX context)", "modifiers": "public abstract", "return": "Set<String>", "signature": "Set<String> locateForLessThan(CTX context)", "full_signature": "public abstract Set<String> locateForLessThan(CTX context)", "class_method_signature": "AbstractConditionShardLocator.locateForLessThan(CTX context)", "testcase": false, "constructor": false}, {"identifier": "locateForLessThanOrEqual", "parameters": "(CTX ctx)", "modifiers": "public abstract", "return": "Set<String>", "signature": "Set<String> locateForLessThanOrEqual(CTX ctx)", "full_signature": "public abstract Set<String> locateForLessThanOrEqual(CTX ctx)", "class_method_signature": "AbstractConditionShardLocator.locateForLessThanOrEqual(CTX ctx)", "testcase": false, "constructor": false}, {"identifier": "locateForBetween", "parameters": "(CTX ctx)", "modifiers": "public abstract", "return": "Set<String>", "signature": "Set<String> locateForBetween(CTX ctx)", "full_signature": "public abstract Set<String> locateForBetween(CTX ctx)", "class_method_signature": "AbstractConditionShardLocator.locateForBetween(CTX ctx)", "testcase": false, "constructor": false}, {"identifier": "locateForNotBetween", "parameters": "(CTX ctx)", "modifiers": "public abstract", "return": "Set<String>", "signature": "Set<String> locateForNotBetween(CTX ctx)", "full_signature": "public abstract Set<String> locateForNotBetween(CTX ctx)", "class_method_signature": "AbstractConditionShardLocator.locateForNotBetween(CTX ctx)", "testcase": false, "constructor": false}, {"identifier": "locateForIn", "parameters": "(CTX context)", "modifiers": "public abstract", "return": "Set<String>", "signature": "Set<String> locateForIn(CTX context)", "full_signature": "public abstract Set<String> locateForIn(CTX context)", "class_method_signature": "AbstractConditionShardLocator.locateForIn(CTX context)", "testcase": false, "constructor": false}, {"identifier": "locateForNotIn", "parameters": "(CTX context)", "modifiers": "public abstract", "return": "Set<String>", "signature": "Set<String> locateForNotIn(CTX context)", "full_signature": "public abstract Set<String> locateForNotIn(CTX context)", "class_method_signature": "AbstractConditionShardLocator.locateForNotIn(CTX context)", "testcase": false, "constructor": false}, {"identifier": "locateForLike", "parameters": "(CTX context)", "modifiers": "public abstract", "return": "Set<String>", "signature": "Set<String> locateForLike(CTX context)", "full_signature": "public abstract Set<String> locateForLike(CTX context)", "class_method_signature": "AbstractConditionShardLocator.locateForLike(CTX context)", "testcase": false, "constructor": false}, {"identifier": "locateForNotLike", "parameters": "(CTX context)", "modifiers": "public abstract", "return": "Set<String>", "signature": "Set<String> locateForNotLike(CTX context)", "full_signature": "public abstract Set<String> locateForNotLike(CTX context)", "class_method_signature": "AbstractConditionShardLocator.locateForNotLike(CTX context)", "testcase": false, "constructor": false}, {"identifier": "locateForIsNull", "parameters": "(CTX context)", "modifiers": "public abstract", "return": "Set<String>", "signature": "Set<String> locateForIsNull(CTX context)", "full_signature": "public abstract Set<String> locateForIsNull(CTX context)", "class_method_signature": "AbstractConditionShardLocator.locateForIsNull(CTX context)", "testcase": false, "constructor": false}, {"identifier": "locateForIsNotNull", "parameters": "(CTX context)", "modifiers": "public abstract", "return": "Set<String>", "signature": "Set<String> locateForIsNotNull(CTX context)", "full_signature": "public abstract Set<String> locateForIsNotNull(CTX context)", "class_method_signature": "AbstractConditionShardLocator.locateForIsNotNull(CTX context)", "testcase": false, "constructor": false}, {"identifier": "getAllShards", "parameters": "(CTX context)", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getAllShards(CTX context)", "full_signature": "public Set<String> getAllShards(CTX context)", "class_method_signature": "AbstractConditionShardLocator.getAllShards(CTX context)", "testcase": false, "constructor": false}, {"identifier": "createConditionContext", "parameters": "(CTX conditionContext, OperatorEnum newOperator, Object newValue)", "modifiers": "@SuppressWarnings(\"unchecked\") protected", "return": "CTX", "signature": "CTX createConditionContext(CTX conditionContext, OperatorEnum newOperator, Object newValue)", "full_signature": "@SuppressWarnings(\"unchecked\") protected CTX createConditionContext(CTX conditionContext, OperatorEnum newOperator, Object newValue)", "class_method_signature": "AbstractConditionShardLocator.createConditionContext(CTX conditionContext, OperatorEnum newOperator, Object newValue)", "testcase": false, "constructor": false}, {"identifier": "locateForCombination", "parameters": "(CTX context, OperatorEnum op1, Object value1, OperatorEnum op2, Object value2)", "modifiers": "protected", "return": "Set<String>", "signature": "Set<String> locateForCombination(CTX context, OperatorEnum op1, Object value1, OperatorEnum op2, Object value2)", "full_signature": "protected Set<String> locateForCombination(CTX context, OperatorEnum op1, Object value1, OperatorEnum op2, Object value2)", "class_method_signature": "AbstractConditionShardLocator.locateForCombination(CTX context, OperatorEnum op1, Object value1, OperatorEnum op2, Object value2)", "testcase": false, "constructor": false}, {"identifier": "locateForIntersection", "parameters": "(CTX context, OperatorEnum op1, Object value1, OperatorEnum op2, Object value2)", "modifiers": "protected", "return": "Set<String>", "signature": "Set<String> locateForIntersection(CTX context, OperatorEnum op1, Object value1, OperatorEnum op2, Object value2)", "full_signature": "protected Set<String> locateForIntersection(CTX context, OperatorEnum op1, Object value1, OperatorEnum op2, Object value2)", "class_method_signature": "AbstractConditionShardLocator.locateForIntersection(CTX context, OperatorEnum op1, Object value1, OperatorEnum op2, Object value2)", "testcase": false, "constructor": false}, {"identifier": "exclude", "parameters": "(CTX context, Set<String> shards)", "modifiers": "protected", "return": "Set<String>", "signature": "Set<String> exclude(CTX context, Set<String> shards)", "full_signature": "protected Set<String> exclude(CTX context, Set<String> shards)", "class_method_signature": "AbstractConditionShardLocator.exclude(CTX context, Set<String> shards)", "testcase": false, "constructor": false}, {"identifier": "isAlreadyAllShards", "parameters": "(Set<String> allShards, Set<String> shards)", "modifiers": "protected", "return": "boolean", "signature": "boolean isAlreadyAllShards(Set<String> allShards, Set<String> shards)", "full_signature": "protected boolean isAlreadyAllShards(Set<String> allShards, Set<String> shards)", "class_method_signature": "AbstractConditionShardLocator.isAlreadyAllShards(Set<String> allShards, Set<String> shards)", "testcase": false, "constructor": false}, {"identifier": "toSet", "parameters": "(String id)", "modifiers": "protected", "return": "Set<String>", "signature": "Set<String> toSet(String id)", "full_signature": "protected Set<String> toSet(String id)", "class_method_signature": "AbstractConditionShardLocator.toSet(String id)", "testcase": false, "constructor": false}, {"identifier": "locateShards", "parameters": "(CTX context)", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> locateShards(CTX context)", "full_signature": "public Set<String> locateShards(CTX context)", "class_method_signature": "AbstractConditionShardLocator.locateShards(CTX context)", "testcase": false, "constructor": false}], "file": "das-client/src/main/java/com/ppdai/das/strategy/AbstractConditionShardLocator.java"}, "focal_method": {"identifier": "locateShards", "parameters": "(CTX context)", "modifiers": "public", "return": "Set<String>", "body": "public Set<String> locateShards(CTX context) {\n        switch (context.getOperator()) {\n        case EQUAL:\n            return locateForEqual(context);\n        case NOT_EQUAL:\n            return locateForNotEqual(context);\n        case GREATER_THAN:\n            return locateForGreaterThan(context);\n        case GREATER_THAN_OR_EQUAL:\n            return locateForGreaterThanOrEqual(context);\n        case LESS_THAN:\n            return locateForLessThan(context);\n        case LESS_THAN_OR_EQUAL:\n            return locateForLessThanOrEqual(context);\n        case BEWTEEN:\n            return locateForBetween(context);\n        case NOT_BETWEEN:\n            return locateForNotBetween(context);\n        case IN:\n            return locateForIn(context);\n        case NOT_IN:\n            return locateForNotIn(context);\n        case LIKE:\n            return locateForLike(context);\n        case NOT_LIKE:\n            return locateForNotLike(context);\n        case IS_NULL:\n            return locateForIsNull(context);\n        case IS_NOT_NULL:\n            return locateForIsNotNull(context);\n        default:\n            throw new IllegalArgumentException(\"Invalid operator detected: \" + context.getOperator());\n        }\n    }", "signature": "Set<String> locateShards(CTX context)", "full_signature": "public Set<String> locateShards(CTX context)", "class_method_signature": "AbstractConditionShardLocator.locateShards(CTX context)", "testcase": false, "constructor": false, "invocations": ["getOperator", "locateForEqual", "locateForNotEqual", "locateForGreaterThan", "locateForGreaterThanOrEqual", "locateForLessThan", "locateForLessThanOrEqual", "locateForBetween", "locateForNotBetween", "locateForIn", "locateForNotIn", "locateForLike", "locateForNotLike", "locateForIsNull", "locateForIsNotNull", "getOperator"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}