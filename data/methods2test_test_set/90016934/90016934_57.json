{"test_class": {"identifier": "ScannerFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Log logger = LogFactory.getLog (ScannerFactoryTest.class);", "modifier": "private static", "type": "Log", "declarator": "logger = LogFactory.getLog (ScannerFactoryTest.class)", "var_name": "logger"}, {"original_string": "String [] classes_strings=new String [] \n      {\n         \"http://www.gael.fr/test#product1\",\n         \"http://www.gael.fr/test#product2\",\n      };", "modifier": "", "type": "String []", "declarator": "classes_strings=new String [] \n      {\n         \"http://www.gael.fr/test#product1\",\n         \"http://www.gael.fr/test#product2\",\n      }", "var_name": "classes_strings"}, {"original_string": "List<DrbCortexItemClass>classes;", "modifier": "", "type": "List<DrbCortexItemClass>", "declarator": "classes", "var_name": "classes"}, {"original_string": "FakeFtpServer fakeFtpServer;", "modifier": "", "type": "FakeFtpServer", "declarator": "fakeFtpServer", "var_name": "fakeFtpServer"}, {"original_string": "File tmpDir;", "modifier": "", "type": "File", "declarator": "tmpDir", "var_name": "tmpDir"}], "file": "core/src/test/java/fr/gael/dhus/datastore/scanner/ScannerFactoryTest.java"}, "test_case": {"identifier": "getScannerSupport", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void getScannerSupport ()\n  {\n     String[] supported_classes = ScannerFactory.getDefaultCortexSupport ();\n     // http://www.gael.fr/test#product1 and http://www.gael.fr/test#product2 \n     // plus the ones defined by DHuS: http://www.gael.fr/drb#tgz, \n     // http://www.gael.fr/drb#gzip, http://www.gael.fr/drb#zip, \n     // http://www.gael.fr/drb#tar.\n     \n     // Scanner support is automatically computed according to the \n     // upcoming ontologies. by default scanner at least contains\n     // http://www.gael.fr/drb#zip, so support list shall never be empty.\n     Assert.assertTrue (supported_classes.length>1, \"Missing supports\");\n  }", "signature": "void getScannerSupport()", "full_signature": "@Test public void getScannerSupport()", "class_method_signature": "ScannerFactoryTest.getScannerSupport()", "testcase": true, "constructor": false, "invocations": ["getDefaultCortexSupport", "assertTrue"]}, "focal_class": {"identifier": "ScannerFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LogManager.getLogger(ScannerFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LogManager.getLogger(ScannerFactory.class)", "var_name": "LOGGER"}, {"original_string": "public static final SimpleDateFormat SDF = new SimpleDateFormat(\"EEEE dd MMMM yyyy - HH:mm:ss\", Locale.ENGLISH);", "modifier": "public static final", "type": "SimpleDateFormat", "declarator": "SDF = new SimpleDateFormat(\"EEEE dd MMMM yyyy - HH:mm:ss\", Locale.ENGLISH)", "var_name": "SDF"}, {"original_string": "@Autowired\n   private ConfigurationManager configurationManager;", "modifier": "@Autowired\n   private", "type": "ConfigurationManager", "declarator": "configurationManager", "var_name": "configurationManager"}, {"original_string": "private final ConcurrentHashMap<Long, Scanner> RUNNING_SCANNERS = new ConcurrentHashMap<>();", "modifier": "private final", "type": "ConcurrentHashMap<Long, Scanner>", "declarator": "RUNNING_SCANNERS = new ConcurrentHashMap<>()", "var_name": "RUNNING_SCANNERS"}, {"original_string": "private String[] itemClasses;", "modifier": "private", "type": "String[]", "declarator": "itemClasses", "var_name": "itemClasses"}], "methods": [{"identifier": "getScannerSupport", "parameters": "()", "modifiers": "public", "return": "List<DrbCortexItemClass>", "signature": "List<DrbCortexItemClass> getScannerSupport()", "full_signature": "public List<DrbCortexItemClass> getScannerSupport()", "class_method_signature": "ScannerFactory.getScannerSupport()", "testcase": false, "constructor": false}, {"identifier": "getDefaultCortexSupport", "parameters": "()", "modifiers": "public static synchronized", "return": "String[]", "signature": "String[] getDefaultCortexSupport()", "full_signature": "public static synchronized String[] getDefaultCortexSupport()", "class_method_signature": "ScannerFactory.getDefaultCortexSupport()", "testcase": false, "constructor": false}, {"identifier": "getScanner", "parameters": "(String url)", "modifiers": "public", "return": "Scanner", "signature": "Scanner getScanner(String url)", "full_signature": "public Scanner getScanner(String url)", "class_method_signature": "ScannerFactory.getScanner(String url)", "testcase": false, "constructor": false}, {"identifier": "getScanner", "parameters": "(String url, String username, String password,\n         String pattern)", "modifiers": "public", "return": "Scanner", "signature": "Scanner getScanner(String url, String username, String password,\n         String pattern)", "full_signature": "public Scanner getScanner(String url, String username, String password,\n         String pattern)", "class_method_signature": "ScannerFactory.getScanner(String url, String username, String password,\n         String pattern)", "testcase": false, "constructor": false}, {"identifier": "getUploadScanner", "parameters": "(String url, final String username,\n      final String password, String pattern)", "modifiers": "public", "return": "Scanner", "signature": "Scanner getUploadScanner(String url, final String username,\n      final String password, String pattern)", "full_signature": "public Scanner getUploadScanner(String url, final String username,\n      final String password, String pattern)", "class_method_signature": "ScannerFactory.getUploadScanner(String url, final String username,\n      final String password, String pattern)", "testcase": false, "constructor": false}, {"identifier": "processScan", "parameters": "(final Long scan_id)", "modifiers": "public", "return": "void", "signature": "void processScan(final Long scan_id)", "full_signature": "public void processScan(final Long scan_id)", "class_method_signature": "ScannerFactory.processScan(final Long scan_id)", "testcase": false, "constructor": false}, {"identifier": "stopScan", "parameters": "(final Long scan_id)", "modifiers": "public", "return": "boolean", "signature": "boolean stopScan(final Long scan_id)", "full_signature": "public boolean stopScan(final Long scan_id)", "class_method_signature": "ScannerFactory.stopScan(final Long scan_id)", "testcase": false, "constructor": false}], "file": "core/src/main/java/fr/gael/dhus/datastore/scanner/ScannerFactory.java"}, "focal_method": {"identifier": "getScannerSupport", "parameters": "()", "modifiers": "public", "return": "List<DrbCortexItemClass>", "body": "public List<DrbCortexItemClass> getScannerSupport ()\n   {\n      if (itemClasses == null)\n      {\n         itemClasses = getDefaultCortexSupport ();\n         if ((itemClasses!=null) && LOGGER.isDebugEnabled())\n         {\n            LOGGER.debug(\"Supported classes:\");\n            for (String cl:itemClasses)\n            {\n               LOGGER.debug(\" - \" + cl);\n            }\n         }\n      }\n\n      if (itemClasses == null)\n         throw new UnsupportedOperationException (\n            \"Empty item list: no scanner support.\");\n\n      List<DrbCortexItemClass> supported = new ArrayList<DrbCortexItemClass> ();\n      if (itemClasses != null)\n      {\n         for (String s : itemClasses)\n         {\n            try\n            {\n               supported.add (DrbCortexItemClass.getCortexItemClassByName (s));\n            }\n            catch (Exception e)\n            {\n               LOGGER.error (\"Cannot add support for class \" + s);\n            }\n         }\n      }\n      return supported;\n   }", "signature": "List<DrbCortexItemClass> getScannerSupport()", "full_signature": "public List<DrbCortexItemClass> getScannerSupport()", "class_method_signature": "ScannerFactory.getScannerSupport()", "testcase": false, "constructor": false, "invocations": ["getDefaultCortexSupport", "isDebugEnabled", "debug", "debug", "add", "getCortexItemClassByName", "error"]}, "repository": {"repo_id": 90016934, "url": "https://github.com/SentinelDataHub/dhus-core", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 5, "size": 2371, "license": "licensed"}}