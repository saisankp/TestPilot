{"test_class": {"identifier": "DocumentTikaParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/gentics/mesh/core/binary/DocumentTikaParserTest.java"}, "test_case": {"identifier": "testTika", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testTika() throws TikaException, IOException {\n\t\tBuffer buffer = getBuffer(\"/testfiles/test.pdf\");\n\t\tbyte[] data = buffer.getBytes();\n\t\tMetadata metadata = new Metadata();\n\t\tint limit = 10000;\n\t\tString content = DocumentTikaParser.parse(new ByteArrayInputStream(data), metadata, limit).get();\n\t\tSystem.out.println(content);\n\t\tSystem.out.println(metadata.toString());\n\t}", "signature": "void testTika()", "full_signature": "@Test public void testTika()", "class_method_signature": "DocumentTikaParserTest.testTika()", "testcase": true, "constructor": false, "invocations": ["getBuffer", "getBytes", "get", "parse", "println", "println", "toString"]}, "focal_class": {"identifier": "DocumentTikaParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Set<MediaType> EXCLUDES = new HashSet<>(Arrays.asList(\n\t\tMediaType.application(\"vnd.ms-visio.drawing\"),\n\t\tMediaType.application(\"vnd.ms-visio.drawing.macroenabled.12\"),\n\t\tMediaType.application(\"vnd.ms-visio.stencil\"),\n\t\tMediaType.application(\"vnd.ms-visio.stencil.macroenabled.12\"),\n\t\tMediaType.application(\"vnd.ms-visio.template\"),\n\t\tMediaType.application(\"vnd.ms-visio.template.macroenabled.12\"),\n\t\tMediaType.application(\"vnd.ms-visio.drawing\")));", "modifier": "private static final", "type": "Set<MediaType>", "declarator": "EXCLUDES = new HashSet<>(Arrays.asList(\n\t\tMediaType.application(\"vnd.ms-visio.drawing\"),\n\t\tMediaType.application(\"vnd.ms-visio.drawing.macroenabled.12\"),\n\t\tMediaType.application(\"vnd.ms-visio.stencil\"),\n\t\tMediaType.application(\"vnd.ms-visio.stencil.macroenabled.12\"),\n\t\tMediaType.application(\"vnd.ms-visio.template\"),\n\t\tMediaType.application(\"vnd.ms-visio.template.macroenabled.12\"),\n\t\tMediaType.application(\"vnd.ms-visio.drawing\")))", "var_name": "EXCLUDES"}, {"original_string": "private static final Parser[] PARSERS = new Parser[] {\n\t\t// documents\n\t\tnew org.apache.tika.parser.html.HtmlParser(),\n\t\tnew org.apache.tika.parser.rtf.RTFParser(),\n\t\tnew org.apache.tika.parser.pdf.PDFParser(),\n\t\tnew org.apache.tika.parser.txt.TXTParser(),\n\t\tnew org.apache.tika.parser.microsoft.OfficeParser(),\n\t\tnew org.apache.tika.parser.microsoft.OldExcelParser(),\n\t\tParserDecorator.withoutTypes(xmlParser(), EXCLUDES),\n\t\tnew org.apache.tika.parser.odf.OpenDocumentParser(),\n\t\tnew org.apache.tika.parser.iwork.IWorkPackageParser(),\n\t\tnew org.apache.tika.parser.xml.DcXMLParser(),\n\t\tnew org.apache.tika.parser.epub.EpubParser(),\n\n\t\t// audio\n\t\tnew org.apache.tika.parser.audio.AudioParser(),\n\t\tnew org.apache.tika.parser.mp3.Mp3Parser(),\n\n\t\t// video\n\t\tnew org.apache.tika.parser.video.FLVParser(),\n\t\tnew org.apache.tika.parser.mp4.MP4Parser(),\n\n\t\t// images\n\t\tnew org.apache.tika.parser.image.ImageParser(),\n\t\tnew org.apache.tika.parser.jpeg.JpegParser(),\n\t\tnew org.apache.tika.parser.image.WebPParser(),\n\n\t\t// ogg (audio/video)\n\t\tnew org.gagravarr.tika.OggParser()\n\t};", "modifier": "private static final", "type": "Parser[]", "declarator": "PARSERS = new Parser[] {\n\t\t// documents\n\t\tnew org.apache.tika.parser.html.HtmlParser(),\n\t\tnew org.apache.tika.parser.rtf.RTFParser(),\n\t\tnew org.apache.tika.parser.pdf.PDFParser(),\n\t\tnew org.apache.tika.parser.txt.TXTParser(),\n\t\tnew org.apache.tika.parser.microsoft.OfficeParser(),\n\t\tnew org.apache.tika.parser.microsoft.OldExcelParser(),\n\t\tParserDecorator.withoutTypes(xmlParser(), EXCLUDES),\n\t\tnew org.apache.tika.parser.odf.OpenDocumentParser(),\n\t\tnew org.apache.tika.parser.iwork.IWorkPackageParser(),\n\t\tnew org.apache.tika.parser.xml.DcXMLParser(),\n\t\tnew org.apache.tika.parser.epub.EpubParser(),\n\n\t\t// audio\n\t\tnew org.apache.tika.parser.audio.AudioParser(),\n\t\tnew org.apache.tika.parser.mp3.Mp3Parser(),\n\n\t\t// video\n\t\tnew org.apache.tika.parser.video.FLVParser(),\n\t\tnew org.apache.tika.parser.mp4.MP4Parser(),\n\n\t\t// images\n\t\tnew org.apache.tika.parser.image.ImageParser(),\n\t\tnew org.apache.tika.parser.jpeg.JpegParser(),\n\t\tnew org.apache.tika.parser.image.WebPParser(),\n\n\t\t// ogg (audio/video)\n\t\tnew org.gagravarr.tika.OggParser()\n\t}", "var_name": "PARSERS"}, {"original_string": "private static final AutoDetectParser PARSER_INSTANCE = new AutoDetectParser(PARSERS);", "modifier": "private static final", "type": "AutoDetectParser", "declarator": "PARSER_INSTANCE = new AutoDetectParser(PARSERS)", "var_name": "PARSER_INSTANCE"}, {"original_string": "private static final Tika TIKA_INSTANCE = new Tika(PARSER_INSTANCE.getDetector(), PARSER_INSTANCE);", "modifier": "private static final", "type": "Tika", "declarator": "TIKA_INSTANCE = new Tika(PARSER_INSTANCE.getDetector(), PARSER_INSTANCE)", "var_name": "TIKA_INSTANCE"}], "methods": [{"identifier": "xmlParser", "parameters": "()", "modifiers": "private static", "return": "OOXMLParser", "signature": "OOXMLParser xmlParser()", "full_signature": "private static OOXMLParser xmlParser()", "class_method_signature": "DocumentTikaParser.xmlParser()", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(final InputStream input, final Metadata metadata, final int limit)", "modifiers": "public static", "return": "Optional<String>", "signature": "Optional<String> parse(final InputStream input, final Metadata metadata, final int limit)", "full_signature": "public static Optional<String> parse(final InputStream input, final Metadata metadata, final int limit)", "class_method_signature": "DocumentTikaParser.parse(final InputStream input, final Metadata metadata, final int limit)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/gentics/mesh/core/binary/DocumentTikaParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(final InputStream input, final Metadata metadata, final int limit)", "modifiers": "public static", "return": "Optional<String>", "body": "public static Optional<String> parse(final InputStream input, final Metadata metadata, final int limit) throws TikaException, IOException {\n\t\ttry {\n\t\t\tString content = TIKA_INSTANCE.parseToString(input, metadata, limit);\n\t\t\tif (isEmpty(content)) {\n\t\t\t\treturn Optional.empty();\n\t\t\t}\n\t\t\tcontent = StringUtils.trim(content);\n\t\t\treturn Optional.of(content);\n\t\t} catch (Exception e) {\n\t\t\tThrowable cause = e.getCause();\n\t\t\tif (cause instanceof TikaException) {\n\t\t\t\tthrow (TikaException) cause;\n\t\t\t} else if (cause instanceof IOException) {\n\t\t\t\tthrow (IOException) cause;\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}", "signature": "Optional<String> parse(final InputStream input, final Metadata metadata, final int limit)", "full_signature": "public static Optional<String> parse(final InputStream input, final Metadata metadata, final int limit)", "class_method_signature": "DocumentTikaParser.parse(final InputStream input, final Metadata metadata, final int limit)", "testcase": false, "constructor": false, "invocations": ["parseToString", "isEmpty", "empty", "trim", "of", "getCause"]}, "repository": {"repo_id": 67999496, "url": "https://github.com/gentics/mesh", "stars": 412, "created": "9/12/2016 10:28:41 AM +00:00", "updates": "2020-01-27T10:25:42+00:00", "fork": "False", "license": "licensed"}}