{"test_class": {"identifier": "J4pClientTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String MEMORY_RESPONSE =\n            \"{\\\"timestamp\\\":1316801201,\\\"status\\\":200,\" +\n            \"\\\"request\\\":{\\\"mbean\\\":\\\"java.lang:type=Memory\\\",\\\"attribute\\\":\\\"HeapMemoryUsage\\\",\\\"type\\\":\\\"read\\\"},\" +\n            \"\\\"value\\\":{\\\"max\\\":530186240,\\\"committed\\\":85000192,\\\"init\\\":0,\\\"used\\\":17962568}}\";", "modifier": "private static", "type": "String", "declarator": "MEMORY_RESPONSE =\n            \"{\\\"timestamp\\\":1316801201,\\\"status\\\":200,\" +\n            \"\\\"request\\\":{\\\"mbean\\\":\\\"java.lang:type=Memory\\\",\\\"attribute\\\":\\\"HeapMemoryUsage\\\",\\\"type\\\":\\\"read\\\"},\" +\n            \"\\\"value\\\":{\\\"max\\\":530186240,\\\"committed\\\":85000192,\\\"init\\\":0,\\\"used\\\":17962568}}\"", "var_name": "MEMORY_RESPONSE"}, {"original_string": "private static String EMPTY_RESPONSE = \"{}\";", "modifier": "private static", "type": "String", "declarator": "EMPTY_RESPONSE = \"{}\"", "var_name": "EMPTY_RESPONSE"}, {"original_string": "private static String ARRAY_RESPONSE = \"[ \" + MEMORY_RESPONSE + \"]\";", "modifier": "private static", "type": "String", "declarator": "ARRAY_RESPONSE = \"[ \" + MEMORY_RESPONSE + \"]\"", "var_name": "ARRAY_RESPONSE"}, {"original_string": "public static final String TEST_URL = \"http://localhost:8080/jolokia\";", "modifier": "public static final", "type": "String", "declarator": "TEST_URL = \"http://localhost:8080/jolokia\"", "var_name": "TEST_URL"}, {"original_string": "private static final String ERROR_VALUE_RESPONSE = \"{\" +\n\t\t\t\"\\\"error_type\\\":\\\"errorType\\\"\" +\n\t\t\t\"\\\"status\\\":500\" +\n\t\t\t\"\\\"error_value\\\":{\\\"test\\\":\\\"ok\\\"}\" +\n\t\t\t\"}\";", "modifier": "private static final", "type": "String", "declarator": "ERROR_VALUE_RESPONSE = \"{\" +\n\t\t\t\"\\\"error_type\\\":\\\"errorType\\\"\" +\n\t\t\t\"\\\"status\\\":500\" +\n\t\t\t\"\\\"error_value\\\":{\\\"test\\\":\\\"ok\\\"}\" +\n\t\t\t\"}\"", "var_name": "ERROR_VALUE_RESPONSE"}, {"original_string": "public J4pReadRequest TEST_REQUEST,TEST_REQUEST_2;", "modifier": "public", "type": "J4pReadRequest", "declarator": "TEST_REQUEST", "var_name": "TEST_REQUEST"}], "file": "client/java/src/test/java/org/jolokia/client/J4pClientTest.java"}, "test_case": {"identifier": "throwIOExceptionWhenParsingAnswer", "parameters": "()", "modifiers": "@Test(expectedExceptions = J4pException.class,expectedExceptionsMessageRegExp = \".*reading.*response.*\") public", "return": "void", "body": "@Test(expectedExceptions = J4pException.class,expectedExceptionsMessageRegExp = \".*reading.*response.*\")\n    public void throwIOExceptionWhenParsingAnswer() throws IOException, J4pException {\n        HttpClient client = createMock(HttpClient.class);\n        HttpResponse response  = createMock(HttpResponse.class);\n        HttpEntity entity = createMock(HttpEntity.class);\n        expect(client.execute(EasyMock.<HttpUriRequest>anyObject())).andReturn(response);\n        expect(response.getEntity()).andReturn(entity);\n        expect(entity.getContentEncoding()).andReturn(null);\n        expect(entity.isStreaming()).andReturn(false);\n        expect(entity.getContent()).andThrow(new IOException());\n        replay(client, entity, response);\n\n        J4pClient j4p = new J4pClient(TEST_URL,client);\n        j4p.execute(TEST_REQUEST);\n    }", "signature": "void throwIOExceptionWhenParsingAnswer()", "full_signature": "@Test(expectedExceptions = J4pException.class,expectedExceptionsMessageRegExp = \".*reading.*response.*\") public void throwIOExceptionWhenParsingAnswer()", "class_method_signature": "J4pClientTest.throwIOExceptionWhenParsingAnswer()", "testcase": true, "constructor": false, "invocations": ["createMock", "createMock", "createMock", "andReturn", "expect", "execute", "anyObject", "andReturn", "expect", "getEntity", "andReturn", "expect", "getContentEncoding", "andReturn", "expect", "isStreaming", "andThrow", "expect", "getContent", "replay", "execute"]}, "focal_class": {"identifier": "J4pClient", "superclass": "extends J4pClientBuilderFactory", "interfaces": "", "fields": [{"original_string": "private HttpClient httpClient;", "modifier": "private", "type": "HttpClient", "declarator": "httpClient", "var_name": "httpClient"}, {"original_string": "private J4pRequestHandler requestHandler;", "modifier": "private", "type": "J4pRequestHandler", "declarator": "requestHandler", "var_name": "requestHandler"}, {"original_string": "private J4pResponseExtractor responseExtractor;", "modifier": "private", "type": "J4pResponseExtractor", "declarator": "responseExtractor", "var_name": "responseExtractor"}], "methods": [{"identifier": "J4pClient", "parameters": "(String pJ4pServerUrl)", "modifiers": "public", "return": "", "signature": " J4pClient(String pJ4pServerUrl)", "full_signature": "public  J4pClient(String pJ4pServerUrl)", "class_method_signature": "J4pClient.J4pClient(String pJ4pServerUrl)", "testcase": false, "constructor": true}, {"identifier": "J4pClient", "parameters": "(String pJ4pServerUrl, HttpClient pHttpClient)", "modifiers": "public", "return": "", "signature": " J4pClient(String pJ4pServerUrl, HttpClient pHttpClient)", "full_signature": "public  J4pClient(String pJ4pServerUrl, HttpClient pHttpClient)", "class_method_signature": "J4pClient.J4pClient(String pJ4pServerUrl, HttpClient pHttpClient)", "testcase": false, "constructor": true}, {"identifier": "J4pClient", "parameters": "(String pJ4pServerUrl, HttpClient pHttpClient,J4pTargetConfig pTargetConfig)", "modifiers": "public", "return": "", "signature": " J4pClient(String pJ4pServerUrl, HttpClient pHttpClient,J4pTargetConfig pTargetConfig)", "full_signature": "public  J4pClient(String pJ4pServerUrl, HttpClient pHttpClient,J4pTargetConfig pTargetConfig)", "class_method_signature": "J4pClient.J4pClient(String pJ4pServerUrl, HttpClient pHttpClient,J4pTargetConfig pTargetConfig)", "testcase": false, "constructor": true}, {"identifier": "J4pClient", "parameters": "(String pJ4pServerUrl, HttpClient pHttpClient,J4pTargetConfig pTargetConfig,J4pResponseExtractor pExtractor)", "modifiers": "public", "return": "", "signature": " J4pClient(String pJ4pServerUrl, HttpClient pHttpClient,J4pTargetConfig pTargetConfig,J4pResponseExtractor pExtractor)", "full_signature": "public  J4pClient(String pJ4pServerUrl, HttpClient pHttpClient,J4pTargetConfig pTargetConfig,J4pResponseExtractor pExtractor)", "class_method_signature": "J4pClient.J4pClient(String pJ4pServerUrl, HttpClient pHttpClient,J4pTargetConfig pTargetConfig,J4pResponseExtractor pExtractor)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(REQ pRequest)", "modifiers": "public", "return": "RESP", "signature": "RESP execute(REQ pRequest)", "full_signature": "public RESP execute(REQ pRequest)", "class_method_signature": "J4pClient.execute(REQ pRequest)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(REQ pRequest,\n                                                                     Map<J4pQueryParameter,String> pProcessingOptions)", "modifiers": "public", "return": "RESP", "signature": "RESP execute(REQ pRequest,\n                                                                     Map<J4pQueryParameter,String> pProcessingOptions)", "full_signature": "public RESP execute(REQ pRequest,\n                                                                     Map<J4pQueryParameter,String> pProcessingOptions)", "class_method_signature": "J4pClient.execute(REQ pRequest,\n                                                                     Map<J4pQueryParameter,String> pProcessingOptions)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(REQ pRequest,String pMethod)", "modifiers": "public", "return": "RESP", "signature": "RESP execute(REQ pRequest,String pMethod)", "full_signature": "public RESP execute(REQ pRequest,String pMethod)", "class_method_signature": "J4pClient.execute(REQ pRequest,String pMethod)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(REQ pRequest,String pMethod,\n                                                                     Map<J4pQueryParameter,String> pProcessingOptions)", "modifiers": "public", "return": "RESP", "signature": "RESP execute(REQ pRequest,String pMethod,\n                                                                     Map<J4pQueryParameter,String> pProcessingOptions)", "full_signature": "public RESP execute(REQ pRequest,String pMethod,\n                                                                     Map<J4pQueryParameter,String> pProcessingOptions)", "class_method_signature": "J4pClient.execute(REQ pRequest,String pMethod,\n                                                                     Map<J4pQueryParameter,String> pProcessingOptions)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(REQ pRequest,String pMethod,\n                                                                     Map<J4pQueryParameter,String> pProcessingOptions,\n                                                                     J4pResponseExtractor pExtractor)", "modifiers": "public", "return": "RESP", "signature": "RESP execute(REQ pRequest,String pMethod,\n                                                                     Map<J4pQueryParameter,String> pProcessingOptions,\n                                                                     J4pResponseExtractor pExtractor)", "full_signature": "public RESP execute(REQ pRequest,String pMethod,\n                                                                     Map<J4pQueryParameter,String> pProcessingOptions,\n                                                                     J4pResponseExtractor pExtractor)", "class_method_signature": "J4pClient.execute(REQ pRequest,String pMethod,\n                                                                     Map<J4pQueryParameter,String> pProcessingOptions,\n                                                                     J4pResponseExtractor pExtractor)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(List<REQ> pRequests)", "modifiers": "public", "return": "List<RESP>", "signature": "List<RESP> execute(List<REQ> pRequests)", "full_signature": "public List<RESP> execute(List<REQ> pRequests)", "class_method_signature": "J4pClient.execute(List<REQ> pRequests)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(List<REQ> pRequests,Map<J4pQueryParameter,String> pProcessingOptions)", "modifiers": "public", "return": "List<RESP>", "signature": "List<RESP> execute(List<REQ> pRequests,Map<J4pQueryParameter,String> pProcessingOptions)", "full_signature": "public List<RESP> execute(List<REQ> pRequests,Map<J4pQueryParameter,String> pProcessingOptions)", "class_method_signature": "J4pClient.execute(List<REQ> pRequests,Map<J4pQueryParameter,String> pProcessingOptions)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(List<REQ> pRequests,\n                                                                                      Map<J4pQueryParameter,String> pProcessingOptions,\n                                                                                      J4pResponseExtractor pResponseExtractor)", "modifiers": "public", "return": "List<RESP>", "signature": "List<RESP> execute(List<REQ> pRequests,\n                                                                                      Map<J4pQueryParameter,String> pProcessingOptions,\n                                                                                      J4pResponseExtractor pResponseExtractor)", "full_signature": "public List<RESP> execute(List<REQ> pRequests,\n                                                                                      Map<J4pQueryParameter,String> pProcessingOptions,\n                                                                                      J4pResponseExtractor pResponseExtractor)", "class_method_signature": "J4pClient.execute(List<REQ> pRequests,\n                                                                                      Map<J4pQueryParameter,String> pProcessingOptions,\n                                                                                      J4pResponseExtractor pResponseExtractor)", "testcase": false, "constructor": false}, {"identifier": "extractJsonResponse", "parameters": "(REQ pRequest, HttpResponse pResponse)", "modifiers": "@SuppressWarnings(\"PMD.PreserveStackTrace\") private", "return": "JSONAware", "signature": "JSONAware extractJsonResponse(REQ pRequest, HttpResponse pResponse)", "full_signature": "@SuppressWarnings(\"PMD.PreserveStackTrace\") private JSONAware extractJsonResponse(REQ pRequest, HttpResponse pResponse)", "class_method_signature": "J4pClient.extractJsonResponse(REQ pRequest, HttpResponse pResponse)", "testcase": false, "constructor": false}, {"identifier": "extractResponses", "parameters": "(JSONAware pJsonResponse,\n                                                                                      List<T> pRequests,\n                                                                                      J4pResponseExtractor pResponseExtractor)", "modifiers": "private", "return": "List<R>", "signature": "List<R> extractResponses(JSONAware pJsonResponse,\n                                                                                      List<T> pRequests,\n                                                                                      J4pResponseExtractor pResponseExtractor)", "full_signature": "private List<R> extractResponses(JSONAware pJsonResponse,\n                                                                                      List<T> pRequests,\n                                                                                      J4pResponseExtractor pResponseExtractor)", "class_method_signature": "J4pClient.extractResponses(JSONAware pJsonResponse,\n                                                                                      List<T> pRequests,\n                                                                                      J4pResponseExtractor pResponseExtractor)", "testcase": false, "constructor": false}, {"identifier": "mapException", "parameters": "(Exception pException)", "modifiers": "private", "return": "J4pException", "signature": "J4pException mapException(Exception pException)", "full_signature": "private J4pException mapException(Exception pException)", "class_method_signature": "J4pClient.mapException(Exception pException)", "testcase": false, "constructor": false}, {"identifier": "verifyBulkJsonResponse", "parameters": "(JSONAware pJsonResponse)", "modifiers": "private", "return": "void", "signature": "void verifyBulkJsonResponse(JSONAware pJsonResponse)", "full_signature": "private void verifyBulkJsonResponse(JSONAware pJsonResponse)", "class_method_signature": "J4pClient.verifyBulkJsonResponse(JSONAware pJsonResponse)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(T ... pRequests)", "modifiers": "public", "return": "List<R>", "signature": "List<R> execute(T ... pRequests)", "full_signature": "public List<R> execute(T ... pRequests)", "class_method_signature": "J4pClient.execute(T ... pRequests)", "testcase": false, "constructor": false}, {"identifier": "getHttpClient", "parameters": "()", "modifiers": "public", "return": "HttpClient", "signature": "HttpClient getHttpClient()", "full_signature": "public HttpClient getHttpClient()", "class_method_signature": "J4pClient.getHttpClient()", "testcase": false, "constructor": false}, {"identifier": "getUri", "parameters": "()", "modifiers": "public", "return": "URI", "signature": "URI getUri()", "full_signature": "public URI getUri()", "class_method_signature": "J4pClient.getUri()", "testcase": false, "constructor": false}], "file": "client/java/src/main/java/org/jolokia/client/J4pClient.java"}, "focal_method": {"identifier": "execute", "parameters": "(REQ pRequest)", "modifiers": "public", "return": "RESP", "body": "public <RESP extends J4pResponse<REQ>, REQ extends J4pRequest> RESP execute(REQ pRequest)\n            throws J4pException {\n        // type spec is required to keep OpenJDK 1.6 happy (other JVM dont have a problem\n        // with infering the type is missing here)\n        return this.<RESP, REQ>execute(pRequest,null,null);\n    }", "signature": "RESP execute(REQ pRequest)", "full_signature": "public RESP execute(REQ pRequest)", "class_method_signature": "J4pClient.execute(REQ pRequest)", "testcase": false, "constructor": false, "invocations": ["execute"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}