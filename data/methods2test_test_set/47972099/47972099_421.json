{"test_class": {"identifier": "StormStreamSelectorTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-contrib/flink-storm/src/test/java/org/apache/flink/storm/util/StormStreamSelectorTest.java"}, "test_case": {"identifier": "testSelector", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSelector() {\n\t\tStormStreamSelector<Object> selector = new StormStreamSelector<Object>();\n\t\tSplitStreamType<Object> tuple = new SplitStreamType<Object>();\n\t\tIterator<String> result;\n\n\t\ttuple.streamId = \"stream1\";\n\t\tresult = selector.select(tuple).iterator();\n\t\tAssert.assertEquals(\"stream1\", result.next());\n\t\tAssert.assertFalse(result.hasNext());\n\n\t\ttuple.streamId = \"stream2\";\n\t\tresult = selector.select(tuple).iterator();\n\t\tAssert.assertEquals(\"stream2\", result.next());\n\t\tAssert.assertFalse(result.hasNext());\n\n\t\ttuple.streamId = \"stream1\";\n\t\tresult = selector.select(tuple).iterator();\n\t\tAssert.assertEquals(\"stream1\", result.next());\n\t\tAssert.assertFalse(result.hasNext());\n\t}", "signature": "void testSelector()", "full_signature": "@Test public void testSelector()", "class_method_signature": "StormStreamSelectorTest.testSelector()", "testcase": true, "constructor": false, "invocations": ["iterator", "select", "assertEquals", "next", "assertFalse", "hasNext", "iterator", "select", "assertEquals", "next", "assertFalse", "hasNext", "iterator", "select", "assertEquals", "next", "assertFalse", "hasNext"]}, "focal_class": {"identifier": "StormStreamSelector", "superclass": "", "interfaces": "implements OutputSelector<SplitStreamType<T>>", "fields": [{"original_string": "private static final long serialVersionUID = 2553423379715401023L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 2553423379715401023L", "var_name": "serialVersionUID"}, {"original_string": "private final HashMap<String, List<String>> streams = new HashMap<String, List<String>>();", "modifier": "private final", "type": "HashMap<String, List<String>>", "declarator": "streams = new HashMap<String, List<String>>()", "var_name": "streams"}], "methods": [{"identifier": "select", "parameters": "(SplitStreamType<T> value)", "modifiers": "@Override public", "return": "Iterable<String>", "signature": "Iterable<String> select(SplitStreamType<T> value)", "full_signature": "@Override public Iterable<String> select(SplitStreamType<T> value)", "class_method_signature": "StormStreamSelector.select(SplitStreamType<T> value)", "testcase": false, "constructor": false}], "file": "flink-contrib/flink-storm/src/main/java/org/apache/flink/storm/util/StormStreamSelector.java"}, "focal_method": {"identifier": "select", "parameters": "(SplitStreamType<T> value)", "modifiers": "@Override public", "return": "Iterable<String>", "body": "@Override\n\tpublic Iterable<String> select(SplitStreamType<T> value) {\n\t\tString sid = value.streamId;\n\t\tList<String> streamId = this.streams.get(sid);\n\t\tif (streamId == null) {\n\t\t\tstreamId = new ArrayList<String>(1);\n\t\t\tstreamId.add(sid);\n\t\t\tthis.streams.put(sid, streamId);\n\t\t}\n\t\treturn streamId;\n\t}", "signature": "Iterable<String> select(SplitStreamType<T> value)", "full_signature": "@Override public Iterable<String> select(SplitStreamType<T> value)", "class_method_signature": "StormStreamSelector.select(SplitStreamType<T> value)", "testcase": false, "constructor": false, "invocations": ["get", "add", "put"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}