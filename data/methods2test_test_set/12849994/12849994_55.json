{"test_class": {"identifier": "OffHeapCacheTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  CacheLoader<String, String> cacheLoader;", "modifier": "@Mock", "type": "CacheLoader<String, String>", "declarator": "cacheLoader", "var_name": "cacheLoader"}, {"original_string": "@Mock\n  EvictionListener<String, String> evictionListener;", "modifier": "@Mock", "type": "EvictionListener<String, String>", "declarator": "evictionListener", "var_name": "evictionListener"}, {"original_string": "@Mock\n  IndexHandler<String, String> indexHandler;", "modifier": "@Mock", "type": "IndexHandler<String, String>", "declarator": "indexHandler", "var_name": "indexHandler"}, {"original_string": "Serializer<String> serializer = new Serializer<String>() {\n\n    @Override\n    public byte[] serialize(String value) {\n      return value.getBytes();\n    }\n\n    @Override\n    public String deserialize(byte[] payload) {\n      return new String(payload);\n    }\n  };", "modifier": "", "type": "Serializer<String>", "declarator": "serializer = new Serializer<String>() {\n\n    @Override\n    public byte[] serialize(String value) {\n      return value.getBytes();\n    }\n\n    @Override\n    public String deserialize(byte[] payload) {\n      return new String(payload);\n    }\n  }", "var_name": "serializer"}, {"original_string": "@Spy\n  OffHeapByteBufferStore bufferStore = new OffHeapByteBufferStore(1000, 2);", "modifier": "@Spy", "type": "OffHeapByteBufferStore", "declarator": "bufferStore = new OffHeapByteBufferStore(1000, 2)", "var_name": "bufferStore"}, {"original_string": "OffHeapCache<String, String> cache;", "modifier": "", "type": "OffHeapCache<String, String>", "declarator": "cache", "var_name": "cache"}], "file": "imcache-offheap/src/test/java/com/cetsoft/imcache/offheap/OffHeapCacheTest.java"}, "test_case": {"identifier": "doEviction", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void doEviction() {\n    cache.put(\"a\", \"b\", TimeUnit.MILLISECONDS, 0);\n    cache.put(\"c\", \"d\", TimeUnit.MILLISECONDS, 0);\n\n    try {\n      Thread.sleep(3);\n    } catch (InterruptedException e) {\n    }\n    cache.doEviction();\n\n    verify(evictionListener).onEviction(\"a\", \"b\");\n    verify(evictionListener).onEviction(\"c\", \"d\");\n    assertEquals(cache.size(), 0);\n  }", "signature": "void doEviction()", "full_signature": "@Test public void doEviction()", "class_method_signature": "OffHeapCacheTest.doEviction()", "testcase": true, "constructor": false, "invocations": ["put", "put", "sleep", "doEviction", "onEviction", "verify", "onEviction", "verify", "assertEquals", "size"]}, "focal_class": {"identifier": "OffHeapCache", "superclass": "extends AbstractSearchableCache<K, V>", "interfaces": "", "fields": [{"original_string": "public static final long DEFAULT_BUFFER_CLEANER_PERIOD = 10 * 60 * 1000;", "modifier": "public static final", "type": "long", "declarator": "DEFAULT_BUFFER_CLEANER_PERIOD = 10 * 60 * 1000", "var_name": "DEFAULT_BUFFER_CLEANER_PERIOD"}, {"original_string": "public static final long DEFAULT_EVICTION_PERIOD = 10 * 60 * 1000;", "modifier": "public static final", "type": "long", "declarator": "DEFAULT_EVICTION_PERIOD = 10 * 60 * 1000", "var_name": "DEFAULT_EVICTION_PERIOD"}, {"original_string": "public static final float DEFAULT_BUFFER_CLEANER_THRESHOLD = 0.5f;", "modifier": "public static final", "type": "float", "declarator": "DEFAULT_BUFFER_CLEANER_THRESHOLD = 0.5f", "var_name": "DEFAULT_BUFFER_CLEANER_THRESHOLD"}, {"original_string": "public static final int DEFAULT_CONCURRENCY_LEVEL = 4;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_CONCURRENCY_LEVEL = 4", "var_name": "DEFAULT_CONCURRENCY_LEVEL"}, {"original_string": "private static final float DELTA = 0.00001f;", "modifier": "private static final", "type": "float", "declarator": "DELTA = 0.00001f", "var_name": "DELTA"}, {"original_string": "private static final AtomicInteger NO_OF_CLEANERS = new AtomicInteger();", "modifier": "private static final", "type": "AtomicInteger", "declarator": "NO_OF_CLEANERS = new AtomicInteger()", "var_name": "NO_OF_CLEANERS"}, {"original_string": "private static final AtomicInteger NO_OF_EVICTORS = new AtomicInteger();", "modifier": "private static final", "type": "AtomicInteger", "declarator": "NO_OF_EVICTORS = new AtomicInteger()", "var_name": "NO_OF_EVICTORS"}, {"original_string": "private final ConcurrentCacheStats stats = new ConcurrentCacheStats();", "modifier": "private final", "type": "ConcurrentCacheStats", "declarator": "stats = new ConcurrentCacheStats()", "var_name": "stats"}, {"original_string": "private final long evictionPeriod;", "modifier": "private final", "type": "long", "declarator": "evictionPeriod", "var_name": "evictionPeriod"}, {"original_string": "protected ConcurrentMap<K, Pointer> pointerMap = new ConcurrentHashMap<K, Pointer>();", "modifier": "protected", "type": "ConcurrentMap<K, Pointer>", "declarator": "pointerMap = new ConcurrentHashMap<K, Pointer>()", "var_name": "pointerMap"}, {"original_string": "private Serializer<V> serializer;", "modifier": "private", "type": "Serializer<V>", "declarator": "serializer", "var_name": "serializer"}, {"original_string": "private OffHeapByteBufferStore bufferStore;", "modifier": "private", "type": "OffHeapByteBufferStore", "declarator": "bufferStore", "var_name": "bufferStore"}, {"original_string": "private StripedReadWriteLock readWriteLock;", "modifier": "private", "type": "StripedReadWriteLock", "declarator": "readWriteLock", "var_name": "readWriteLock"}], "methods": [{"identifier": "OffHeapCache", "parameters": "(final String name, final CacheLoader<K, V> cacheLoader,\n      final EvictionListener<K, V> evictionListener,\n      final IndexHandler<K, V> indexHandler, final OffHeapByteBufferStore byteBufferStore,\n      final Serializer<V> serializer,\n      final long bufferCleanerPeriod, final float bufferCleanerThreshold,\n      final int concurrencyLevel,\n      final long evictionPeriod)", "modifiers": "public", "return": "", "signature": " OffHeapCache(final String name, final CacheLoader<K, V> cacheLoader,\n      final EvictionListener<K, V> evictionListener,\n      final IndexHandler<K, V> indexHandler, final OffHeapByteBufferStore byteBufferStore,\n      final Serializer<V> serializer,\n      final long bufferCleanerPeriod, final float bufferCleanerThreshold,\n      final int concurrencyLevel,\n      final long evictionPeriod)", "full_signature": "public  OffHeapCache(final String name, final CacheLoader<K, V> cacheLoader,\n      final EvictionListener<K, V> evictionListener,\n      final IndexHandler<K, V> indexHandler, final OffHeapByteBufferStore byteBufferStore,\n      final Serializer<V> serializer,\n      final long bufferCleanerPeriod, final float bufferCleanerThreshold,\n      final int concurrencyLevel,\n      final long evictionPeriod)", "class_method_signature": "OffHeapCache.OffHeapCache(final String name, final CacheLoader<K, V> cacheLoader,\n      final EvictionListener<K, V> evictionListener,\n      final IndexHandler<K, V> indexHandler, final OffHeapByteBufferStore byteBufferStore,\n      final Serializer<V> serializer,\n      final long bufferCleanerPeriod, final float bufferCleanerThreshold,\n      final int concurrencyLevel,\n      final long evictionPeriod)", "testcase": false, "constructor": true}, {"identifier": "initCache", "parameters": "(OffHeapByteBufferStore byteBufferStore, Serializer<V> serializer,\n      long bufferCleanerPeriod, final float bufferCleanerThreshold, int concurrencyLevel)", "modifiers": "protected", "return": "void", "signature": "void initCache(OffHeapByteBufferStore byteBufferStore, Serializer<V> serializer,\n      long bufferCleanerPeriod, final float bufferCleanerThreshold, int concurrencyLevel)", "full_signature": "protected void initCache(OffHeapByteBufferStore byteBufferStore, Serializer<V> serializer,\n      long bufferCleanerPeriod, final float bufferCleanerThreshold, int concurrencyLevel)", "class_method_signature": "OffHeapCache.initCache(OffHeapByteBufferStore byteBufferStore, Serializer<V> serializer,\n      long bufferCleanerPeriod, final float bufferCleanerThreshold, int concurrencyLevel)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(K key, V value)", "modifiers": "public", "return": "void", "signature": "void put(K key, V value)", "full_signature": "public void put(K key, V value)", "class_method_signature": "OffHeapCache.put(K key, V value)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(final K key, final V value, final TimeUnit timeUnit, final long duration)", "modifiers": "@Override public", "return": "void", "signature": "void put(final K key, final V value, final TimeUnit timeUnit, final long duration)", "full_signature": "@Override public void put(final K key, final V value, final TimeUnit timeUnit, final long duration)", "class_method_signature": "OffHeapCache.put(final K key, final V value, final TimeUnit timeUnit, final long duration)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(K key)", "modifiers": "public", "return": "V", "signature": "V get(K key)", "full_signature": "public V get(K key)", "class_method_signature": "OffHeapCache.get(K key)", "testcase": false, "constructor": false}, {"identifier": "invalidate", "parameters": "(K key)", "modifiers": "public", "return": "V", "signature": "V invalidate(K key)", "full_signature": "public V invalidate(K key)", "class_method_signature": "OffHeapCache.invalidate(K key)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(K key)", "modifiers": "public", "return": "boolean", "signature": "boolean contains(K key)", "full_signature": "public boolean contains(K key)", "class_method_signature": "OffHeapCache.contains(K key)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "OffHeapCache.clear()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long size()", "full_signature": "@Override public long size()", "class_method_signature": "OffHeapCache.size()", "testcase": false, "constructor": false}, {"identifier": "stats", "parameters": "()", "modifiers": "@Override public", "return": "CacheStats", "signature": "CacheStats stats()", "full_signature": "@Override public CacheStats stats()", "class_method_signature": "OffHeapCache.stats()", "testcase": false, "constructor": false}, {"identifier": "readLock", "parameters": "(K key)", "modifiers": "protected", "return": "void", "signature": "void readLock(K key)", "full_signature": "protected void readLock(K key)", "class_method_signature": "OffHeapCache.readLock(K key)", "testcase": false, "constructor": false}, {"identifier": "readUnlock", "parameters": "(K key)", "modifiers": "protected", "return": "void", "signature": "void readUnlock(K key)", "full_signature": "protected void readUnlock(K key)", "class_method_signature": "OffHeapCache.readUnlock(K key)", "testcase": false, "constructor": false}, {"identifier": "writeLock", "parameters": "(K key)", "modifiers": "protected", "return": "void", "signature": "void writeLock(K key)", "full_signature": "protected void writeLock(K key)", "class_method_signature": "OffHeapCache.writeLock(K key)", "testcase": false, "constructor": false}, {"identifier": "writeUnlock", "parameters": "(K key)", "modifiers": "protected", "return": "void", "signature": "void writeUnlock(K key)", "full_signature": "protected void writeUnlock(K key)", "class_method_signature": "OffHeapCache.writeUnlock(K key)", "testcase": false, "constructor": false}, {"identifier": "cleanBuffers", "parameters": "(final float bufferCleanerThreshold)", "modifiers": "protected", "return": "void", "signature": "void cleanBuffers(final float bufferCleanerThreshold)", "full_signature": "protected void cleanBuffers(final float bufferCleanerThreshold)", "class_method_signature": "OffHeapCache.cleanBuffers(final float bufferCleanerThreshold)", "testcase": false, "constructor": false}, {"identifier": "getDirtyRatio", "parameters": "(final Pointer pointer)", "modifiers": "protected", "return": "float", "signature": "float getDirtyRatio(final Pointer pointer)", "full_signature": "protected float getDirtyRatio(final Pointer pointer)", "class_method_signature": "OffHeapCache.getDirtyRatio(final Pointer pointer)", "testcase": false, "constructor": false}, {"identifier": "doEviction", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void doEviction()", "full_signature": "protected void doEviction()", "class_method_signature": "OffHeapCache.doEviction()", "testcase": false, "constructor": false}], "file": "imcache-offheap/src/main/java/com/cetsoft/imcache/offheap/OffHeapCache.java"}, "focal_method": {"identifier": "doEviction", "parameters": "()", "modifiers": "protected", "return": "void", "body": "protected void doEviction() {\n    final Set<Entry<K, Pointer>> entries = pointerMap.entrySet();\n    for (final Entry<K, Pointer> entry : entries) {\n      if (entry.getValue().isExpired()) {\n        final V value = invalidate(entry.getKey());\n        evictionListener.onEviction(entry.getKey(), value);\n        stats.incrementEvictionCount();\n      }\n    }\n  }", "signature": "void doEviction()", "full_signature": "protected void doEviction()", "class_method_signature": "OffHeapCache.doEviction()", "testcase": false, "constructor": false, "invocations": ["entrySet", "isExpired", "getValue", "invalidate", "getKey", "onEviction", "getKey", "incrementEvictionCount"]}, "repository": {"repo_id": 12849994, "url": "https://github.com/Cetsoft/imcache", "language": "Java", "is_fork": false, "fork_count": 38, "stargazer_count": 121, "size": 1599, "license": "licensed"}}