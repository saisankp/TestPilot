{"test_class": {"identifier": "ContextSourceTransactionManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ContextSource contextSourceMock;", "modifier": "private", "type": "ContextSource", "declarator": "contextSourceMock", "var_name": "contextSourceMock"}, {"original_string": "private DirContext contextMock;", "modifier": "private", "type": "DirContext", "declarator": "contextMock", "var_name": "contextMock"}, {"original_string": "private ContextSourceTransactionManager tested;", "modifier": "private", "type": "ContextSourceTransactionManager", "declarator": "tested", "var_name": "tested"}, {"original_string": "private CompensatingTransactionOperationManager transactionDataManagerMock;", "modifier": "private", "type": "CompensatingTransactionOperationManager", "declarator": "transactionDataManagerMock", "var_name": "transactionDataManagerMock"}, {"original_string": "private TransactionDefinition transactionDefinitionMock;", "modifier": "private", "type": "TransactionDefinition", "declarator": "transactionDefinitionMock", "var_name": "transactionDefinitionMock"}, {"original_string": "private TempEntryRenamingStrategy renamingStrategyMock;", "modifier": "private", "type": "TempEntryRenamingStrategy", "declarator": "renamingStrategyMock", "var_name": "renamingStrategyMock"}], "file": "core/src/test/java/org/springframework/ldap/transaction/compensating/manager/ContextSourceTransactionManagerTest.java"}, "test_case": {"identifier": "testDoBegin", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testDoBegin() {\n\t\twhen(contextSourceMock.getReadWriteContext()).thenReturn(contextMock);\n\n\t\tCompensatingTransactionObject expectedTransactionObject = new CompensatingTransactionObject(null);\n\t\ttested.doBegin(expectedTransactionObject, transactionDefinitionMock);\n\n\t\tDirContextHolder foundContextHolder = (DirContextHolder) TransactionSynchronizationManager\n\t\t\t\t.getResource(contextSourceMock);\n\t\tassertThat(foundContextHolder.getCtx()).isSameAs(contextMock);\n\t}", "signature": "void testDoBegin()", "full_signature": "@Test public void testDoBegin()", "class_method_signature": "ContextSourceTransactionManagerTest.testDoBegin()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getReadWriteContext", "doBegin", "getResource", "isSameAs", "assertThat", "getCtx"]}, "focal_class": {"identifier": "ContextSourceTransactionManager", "superclass": "extends\n        AbstractPlatformTransactionManager", "interfaces": "implements InitializingBean", "fields": [{"original_string": "private static final long serialVersionUID = 7138208218687237856L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 7138208218687237856L", "var_name": "serialVersionUID"}, {"original_string": "private ContextSourceTransactionManagerDelegate delegate = new ContextSourceTransactionManagerDelegate();", "modifier": "private", "type": "ContextSourceTransactionManagerDelegate", "declarator": "delegate = new ContextSourceTransactionManagerDelegate()", "var_name": "delegate"}], "methods": [{"identifier": "doBegin", "parameters": "(Object transaction, TransactionDefinition definition)", "modifiers": "protected", "return": "void", "signature": "void doBegin(Object transaction, TransactionDefinition definition)", "full_signature": "protected void doBegin(Object transaction, TransactionDefinition definition)", "class_method_signature": "ContextSourceTransactionManager.doBegin(Object transaction, TransactionDefinition definition)", "testcase": false, "constructor": false}, {"identifier": "doCleanupAfterCompletion", "parameters": "(Object transaction)", "modifiers": "protected", "return": "void", "signature": "void doCleanupAfterCompletion(Object transaction)", "full_signature": "protected void doCleanupAfterCompletion(Object transaction)", "class_method_signature": "ContextSourceTransactionManager.doCleanupAfterCompletion(Object transaction)", "testcase": false, "constructor": false}, {"identifier": "doCommit", "parameters": "(DefaultTransactionStatus status)", "modifiers": "protected", "return": "void", "signature": "void doCommit(DefaultTransactionStatus status)", "full_signature": "protected void doCommit(DefaultTransactionStatus status)", "class_method_signature": "ContextSourceTransactionManager.doCommit(DefaultTransactionStatus status)", "testcase": false, "constructor": false}, {"identifier": "doGetTransaction", "parameters": "()", "modifiers": "protected", "return": "Object", "signature": "Object doGetTransaction()", "full_signature": "protected Object doGetTransaction()", "class_method_signature": "ContextSourceTransactionManager.doGetTransaction()", "testcase": false, "constructor": false}, {"identifier": "doRollback", "parameters": "(DefaultTransactionStatus status)", "modifiers": "protected", "return": "void", "signature": "void doRollback(DefaultTransactionStatus status)", "full_signature": "protected void doRollback(DefaultTransactionStatus status)", "class_method_signature": "ContextSourceTransactionManager.doRollback(DefaultTransactionStatus status)", "testcase": false, "constructor": false}, {"identifier": "getContextSource", "parameters": "()", "modifiers": "public", "return": "ContextSource", "signature": "ContextSource getContextSource()", "full_signature": "public ContextSource getContextSource()", "class_method_signature": "ContextSourceTransactionManager.getContextSource()", "testcase": false, "constructor": false}, {"identifier": "setContextSource", "parameters": "(ContextSource contextSource)", "modifiers": "public", "return": "void", "signature": "void setContextSource(ContextSource contextSource)", "full_signature": "public void setContextSource(ContextSource contextSource)", "class_method_signature": "ContextSourceTransactionManager.setContextSource(ContextSource contextSource)", "testcase": false, "constructor": false}, {"identifier": "setRenamingStrategy", "parameters": "(TempEntryRenamingStrategy renamingStrategy)", "modifiers": "public", "return": "void", "signature": "void setRenamingStrategy(TempEntryRenamingStrategy renamingStrategy)", "full_signature": "public void setRenamingStrategy(TempEntryRenamingStrategy renamingStrategy)", "class_method_signature": "ContextSourceTransactionManager.setRenamingStrategy(TempEntryRenamingStrategy renamingStrategy)", "testcase": false, "constructor": false}, {"identifier": "afterPropertiesSet", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void afterPropertiesSet()", "full_signature": "public void afterPropertiesSet()", "class_method_signature": "ContextSourceTransactionManager.afterPropertiesSet()", "testcase": false, "constructor": false}, {"identifier": "isExistingTransaction", "parameters": "(Object transaction)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean isExistingTransaction(Object transaction)", "full_signature": "@Override protected boolean isExistingTransaction(Object transaction)", "class_method_signature": "ContextSourceTransactionManager.isExistingTransaction(Object transaction)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/springframework/ldap/transaction/compensating/manager/ContextSourceTransactionManager.java"}, "focal_method": {"identifier": "doBegin", "parameters": "(Object transaction, TransactionDefinition definition)", "modifiers": "protected", "return": "void", "body": "protected void doBegin(Object transaction, TransactionDefinition definition) {\n        delegate.doBegin(transaction, definition);\n    }", "signature": "void doBegin(Object transaction, TransactionDefinition definition)", "full_signature": "protected void doBegin(Object transaction, TransactionDefinition definition)", "class_method_signature": "ContextSourceTransactionManager.doBegin(Object transaction, TransactionDefinition definition)", "testcase": false, "constructor": false, "invocations": ["doBegin"]}, "repository": {"repo_id": 11136641, "url": "https://github.com/spring-projects/spring-ldap", "language": "Java", "is_fork": false, "fork_count": 433, "stargazer_count": 240, "size": 24447, "license": "licensed"}}