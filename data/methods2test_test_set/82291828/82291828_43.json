{"test_class": {"identifier": "OneHotEncodingTest", "superclass": "", "interfaces": "", "fields": [], "file": "algo/src/test/java/org/neo4j/graphalgo/ml/OneHotEncodingTest.java"}, "test_case": {"identifier": "oneNonExistentSelected", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void oneNonExistentSelected() {\n        List<Object> values = asList(\"Italian\", \"Indian\", \"Chinese\");\n        List<Object> selectedValues = Arrays.asList(\"British\", \"Chinese\");\n\n        assertEquals(asList(0L, 0L, 1L), new OneHotEncoding().oneHotEncoding(values, selectedValues));\n    }", "signature": "void oneNonExistentSelected()", "full_signature": "@Test public void oneNonExistentSelected()", "class_method_signature": "OneHotEncodingTest.oneNonExistentSelected()", "testcase": true, "constructor": false, "invocations": ["asList", "asList", "assertEquals", "asList", "oneHotEncoding"]}, "focal_class": {"identifier": "OneHotEncoding", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "oneHotEncoding", "parameters": "(@Name(value = \"availableValues\") List<Object> availableValues,\n                                     @Name(value = \"selectedValues\") List<Object> selectedValues)", "modifiers": "@UserFunction(\"algo.ml.oneHotEncoding\") @Description(\"CALL algo.ml.oneHotEncoding(availableValues, selectedValues) - return a list of selected values in a one hot encoding format.\") public", "return": "List<Long>", "signature": "List<Long> oneHotEncoding(@Name(value = \"availableValues\") List<Object> availableValues,\n                                     @Name(value = \"selectedValues\") List<Object> selectedValues)", "full_signature": "@UserFunction(\"algo.ml.oneHotEncoding\") @Description(\"CALL algo.ml.oneHotEncoding(availableValues, selectedValues) - return a list of selected values in a one hot encoding format.\") public List<Long> oneHotEncoding(@Name(value = \"availableValues\") List<Object> availableValues,\n                                     @Name(value = \"selectedValues\") List<Object> selectedValues)", "class_method_signature": "OneHotEncoding.oneHotEncoding(@Name(value = \"availableValues\") List<Object> availableValues,\n                                     @Name(value = \"selectedValues\") List<Object> selectedValues)", "testcase": false, "constructor": false}], "file": "algo/src/main/java/org/neo4j/graphalgo/ml/OneHotEncoding.java"}, "focal_method": {"identifier": "oneHotEncoding", "parameters": "(@Name(value = \"availableValues\") List<Object> availableValues,\n                                     @Name(value = \"selectedValues\") List<Object> selectedValues)", "modifiers": "@UserFunction(\"algo.ml.oneHotEncoding\") @Description(\"CALL algo.ml.oneHotEncoding(availableValues, selectedValues) - return a list of selected values in a one hot encoding format.\") public", "return": "List<Long>", "body": "@UserFunction(\"algo.ml.oneHotEncoding\")\n    @Description(\"CALL algo.ml.oneHotEncoding(availableValues, selectedValues) - return a list of selected values in a one hot encoding format.\")\n    public List<Long> oneHotEncoding(@Name(value = \"availableValues\") List<Object> availableValues,\n                                     @Name(value = \"selectedValues\") List<Object> selectedValues) {\n        if (availableValues == null) {\n            return LongStream.empty().boxed().collect(Collectors.toList());\n        }\n\n        if (selectedValues == null) {\n            return LongStream.range(0, availableValues.size()).map(index -> 0).boxed().collect(Collectors.toList());\n        }\n\n        Set<Object> selectedValuesSet = new HashSet<>(selectedValues);\n        Object[] availableValuesArray = availableValues.toArray();\n        return LongStream.range(0, availableValues.size())\n                .map(index -> selectedValuesSet.contains(availableValuesArray[(int) index]) ? 1L : 0L)\n                .boxed()\n                .collect(Collectors.toList());\n    }", "signature": "List<Long> oneHotEncoding(@Name(value = \"availableValues\") List<Object> availableValues,\n                                     @Name(value = \"selectedValues\") List<Object> selectedValues)", "full_signature": "@UserFunction(\"algo.ml.oneHotEncoding\") @Description(\"CALL algo.ml.oneHotEncoding(availableValues, selectedValues) - return a list of selected values in a one hot encoding format.\") public List<Long> oneHotEncoding(@Name(value = \"availableValues\") List<Object> availableValues,\n                                     @Name(value = \"selectedValues\") List<Object> selectedValues)", "class_method_signature": "OneHotEncoding.oneHotEncoding(@Name(value = \"availableValues\") List<Object> availableValues,\n                                     @Name(value = \"selectedValues\") List<Object> selectedValues)", "testcase": false, "constructor": false, "invocations": ["collect", "boxed", "empty", "toList", "collect", "boxed", "map", "range", "size", "toList", "toArray", "collect", "boxed", "map", "range", "size", "contains", "toList"]}, "repository": {"repo_id": 82291828, "url": "https://github.com/neo4j-contrib/neo4j-graph-algorithms", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 689, "size": 43359, "license": "licensed"}}