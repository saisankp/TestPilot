{"test_class": {"identifier": "AggregatingContainerHealthServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TitusRuntime titusRuntime = TitusRuntimes.test();", "modifier": "private final", "type": "TitusRuntime", "declarator": "titusRuntime = TitusRuntimes.test()", "var_name": "titusRuntime"}, {"original_string": "private final JobComponentStub jobManagerStub = new JobComponentStub(titusRuntime);", "modifier": "private final", "type": "JobComponentStub", "declarator": "jobManagerStub = new JobComponentStub(titusRuntime)", "var_name": "jobManagerStub"}, {"original_string": "private final ReadOnlyJobOperations jobOperations = jobManagerStub.getJobOperations();", "modifier": "private final", "type": "ReadOnlyJobOperations", "declarator": "jobOperations = jobManagerStub.getJobOperations()", "var_name": "jobOperations"}, {"original_string": "private final DownstreamHealthService downstream1 = new DownstreamHealthService(\"downstream1\");", "modifier": "private final", "type": "DownstreamHealthService", "declarator": "downstream1 = new DownstreamHealthService(\"downstream1\")", "var_name": "downstream1"}, {"original_string": "private final DownstreamHealthService downstream2 = new DownstreamHealthService(\"downstream2\");", "modifier": "private final", "type": "DownstreamHealthService", "declarator": "downstream2 = new DownstreamHealthService(\"downstream2\")", "var_name": "downstream2"}, {"original_string": "private final AggregatingContainerHealthService healthService = new AggregatingContainerHealthService(\n            asSet(downstream1, downstream2),\n            jobOperations,\n            titusRuntime\n    );", "modifier": "private final", "type": "AggregatingContainerHealthService", "declarator": "healthService = new AggregatingContainerHealthService(\n            asSet(downstream1, downstream2),\n            jobOperations,\n            titusRuntime\n    )", "var_name": "healthService"}, {"original_string": "private Job job1;", "modifier": "private", "type": "Job", "declarator": "job1", "var_name": "job1"}, {"original_string": "private Task task1;", "modifier": "private", "type": "Task", "declarator": "task1", "var_name": "task1"}, {"original_string": "private String taskId1;", "modifier": "private", "type": "String", "declarator": "taskId1", "var_name": "taskId1"}], "file": "titus-server-runtime/src/test/java/com/netflix/titus/runtime/containerhealth/service/AggregatingContainerHealthServiceTest.java"}, "test_case": {"identifier": "testSubscriptionWithSnapshot", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSubscriptionWithSnapshot() {\n        downstream1.makeHealthy(taskId1);\n        downstream2.makeHealthy(taskId1);\n\n        StepVerifier.create(healthService.events(true))\n                // Check snapshot\n                .assertNext(event -> assertContainerHealthSnapshot(\n                        event, status -> status.getTaskId().equals(taskId1) && status.getState() == ContainerHealthState.Healthy)\n                )\n\n                // Now trigger change\n                .then(() -> downstream1.makeUnhealthy(taskId1))\n                .assertNext(event -> assertContainerHealthEvent(event, taskId1, ContainerHealthState.Unhealthy))\n\n                .thenCancel()\n                .verify(Duration.ofSeconds(5));\n    }", "signature": "void testSubscriptionWithSnapshot()", "full_signature": "@Test public void testSubscriptionWithSnapshot()", "class_method_signature": "AggregatingContainerHealthServiceTest.testSubscriptionWithSnapshot()", "testcase": true, "constructor": false, "invocations": ["makeHealthy", "makeHealthy", "verify", "thenCancel", "assertNext", "then", "assertNext", "create", "events", "assertContainerHealthSnapshot", "equals", "getTaskId", "getState", "makeUnhealthy", "assertContainerHealthEvent", "ofSeconds"]}, "focal_class": {"identifier": "AggregatingContainerHealthService", "superclass": "", "interfaces": "implements ContainerHealthService", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(AggregatingContainerHealthService.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(AggregatingContainerHealthService.class)", "var_name": "logger"}, {"original_string": "public static final String NAME = \"aggregating\";", "modifier": "public static final", "type": "String", "declarator": "NAME = \"aggregating\"", "var_name": "NAME"}, {"original_string": "private final Map<String, ContainerHealthService> healthServices;", "modifier": "private final", "type": "Map<String, ContainerHealthService>", "declarator": "healthServices", "var_name": "healthServices"}, {"original_string": "private final ReadOnlyJobOperations jobOperations;", "modifier": "private final", "type": "ReadOnlyJobOperations", "declarator": "jobOperations", "var_name": "jobOperations"}, {"original_string": "private final TitusRuntime titusRuntime;", "modifier": "private final", "type": "TitusRuntime", "declarator": "titusRuntime", "var_name": "titusRuntime"}, {"original_string": "private final Clock clock;", "modifier": "private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "private final Flux<ContainerHealthEvent> healthStatuses;", "modifier": "private final", "type": "Flux<ContainerHealthEvent>", "declarator": "healthStatuses", "var_name": "healthStatuses"}], "methods": [{"identifier": "AggregatingContainerHealthService", "parameters": "(Set<ContainerHealthService> healthServices,\n                                             ReadOnlyJobOperations jobOperations,\n                                             TitusRuntime titusRuntime)", "modifiers": "@Inject public", "return": "", "signature": " AggregatingContainerHealthService(Set<ContainerHealthService> healthServices,\n                                             ReadOnlyJobOperations jobOperations,\n                                             TitusRuntime titusRuntime)", "full_signature": "@Inject public  AggregatingContainerHealthService(Set<ContainerHealthService> healthServices,\n                                             ReadOnlyJobOperations jobOperations,\n                                             TitusRuntime titusRuntime)", "class_method_signature": "AggregatingContainerHealthService.AggregatingContainerHealthService(Set<ContainerHealthService> healthServices,\n                                             ReadOnlyJobOperations jobOperations,\n                                             TitusRuntime titusRuntime)", "testcase": false, "constructor": true}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "AggregatingContainerHealthService.getName()", "testcase": false, "constructor": false}, {"identifier": "findHealthStatus", "parameters": "(String taskId)", "modifiers": "@Override public", "return": "Optional<ContainerHealthStatus>", "signature": "Optional<ContainerHealthStatus> findHealthStatus(String taskId)", "full_signature": "@Override public Optional<ContainerHealthStatus> findHealthStatus(String taskId)", "class_method_signature": "AggregatingContainerHealthService.findHealthStatus(String taskId)", "testcase": false, "constructor": false}, {"identifier": "events", "parameters": "(boolean snapshot)", "modifiers": "@Override public", "return": "Flux<ContainerHealthEvent>", "signature": "Flux<ContainerHealthEvent> events(boolean snapshot)", "full_signature": "@Override public Flux<ContainerHealthEvent> events(boolean snapshot)", "class_method_signature": "AggregatingContainerHealthService.events(boolean snapshot)", "testcase": false, "constructor": false}, {"identifier": "buildCurrentSnapshot", "parameters": "()", "modifiers": "private", "return": "ContainerHealthSnapshotEvent", "signature": "ContainerHealthSnapshotEvent buildCurrentSnapshot()", "full_signature": "private ContainerHealthSnapshotEvent buildCurrentSnapshot()", "class_method_signature": "AggregatingContainerHealthService.buildCurrentSnapshot()", "testcase": false, "constructor": false}, {"identifier": "handleContainerHealthUpdateEvent", "parameters": "(ContainerHealthEvent event, ConcurrentMap<String, ContainerHealthState> emittedStates)", "modifiers": "private", "return": "Flux<ContainerHealthEvent>", "signature": "Flux<ContainerHealthEvent> handleContainerHealthUpdateEvent(ContainerHealthEvent event, ConcurrentMap<String, ContainerHealthState> emittedStates)", "full_signature": "private Flux<ContainerHealthEvent> handleContainerHealthUpdateEvent(ContainerHealthEvent event, ConcurrentMap<String, ContainerHealthState> emittedStates)", "class_method_signature": "AggregatingContainerHealthService.handleContainerHealthUpdateEvent(ContainerHealthEvent event, ConcurrentMap<String, ContainerHealthState> emittedStates)", "testcase": false, "constructor": false}, {"identifier": "handleNewState", "parameters": "(Job<?> job, Task task, ConcurrentMap<String, ContainerHealthState> emittedStates)", "modifiers": "private", "return": "Flux<ContainerHealthEvent>", "signature": "Flux<ContainerHealthEvent> handleNewState(Job<?> job, Task task, ConcurrentMap<String, ContainerHealthState> emittedStates)", "full_signature": "private Flux<ContainerHealthEvent> handleNewState(Job<?> job, Task task, ConcurrentMap<String, ContainerHealthState> emittedStates)", "class_method_signature": "AggregatingContainerHealthService.handleNewState(Job<?> job, Task task, ConcurrentMap<String, ContainerHealthState> emittedStates)", "testcase": false, "constructor": false}, {"identifier": "handleContainerHealthEventForUnknownTask", "parameters": "(String taskId, ContainerHealthEvent event, ConcurrentMap<String, ContainerHealthState> emittedStates)", "modifiers": "private", "return": "Flux<ContainerHealthEvent>", "signature": "Flux<ContainerHealthEvent> handleContainerHealthEventForUnknownTask(String taskId, ContainerHealthEvent event, ConcurrentMap<String, ContainerHealthState> emittedStates)", "full_signature": "private Flux<ContainerHealthEvent> handleContainerHealthEventForUnknownTask(String taskId, ContainerHealthEvent event, ConcurrentMap<String, ContainerHealthState> emittedStates)", "class_method_signature": "AggregatingContainerHealthService.handleContainerHealthEventForUnknownTask(String taskId, ContainerHealthEvent event, ConcurrentMap<String, ContainerHealthState> emittedStates)", "testcase": false, "constructor": false}, {"identifier": "takeStatusOf", "parameters": "(Job<?> job, Task task)", "modifiers": "private", "return": "ContainerHealthStatus", "signature": "ContainerHealthStatus takeStatusOf(Job<?> job, Task task)", "full_signature": "private ContainerHealthStatus takeStatusOf(Job<?> job, Task task)", "class_method_signature": "AggregatingContainerHealthService.takeStatusOf(Job<?> job, Task task)", "testcase": false, "constructor": false}, {"identifier": "taskStatusOfTaskWithNoHealthProviders", "parameters": "(Task task)", "modifiers": "private", "return": "ContainerHealthStatus", "signature": "ContainerHealthStatus taskStatusOfTaskWithNoHealthProviders(Task task)", "full_signature": "private ContainerHealthStatus taskStatusOfTaskWithNoHealthProviders(Task task)", "class_method_signature": "AggregatingContainerHealthService.taskStatusOfTaskWithNoHealthProviders(Task task)", "testcase": false, "constructor": false}, {"identifier": "takeStatusOfTaskWithHealthProviders", "parameters": "(Task task, Set<String> enabledServices)", "modifiers": "private", "return": "ContainerHealthStatus", "signature": "ContainerHealthStatus takeStatusOfTaskWithHealthProviders(Task task, Set<String> enabledServices)", "full_signature": "private ContainerHealthStatus takeStatusOfTaskWithHealthProviders(Task task, Set<String> enabledServices)", "class_method_signature": "AggregatingContainerHealthService.takeStatusOfTaskWithHealthProviders(Task task, Set<String> enabledServices)", "testcase": false, "constructor": false}], "file": "titus-server-runtime/src/main/java/com/netflix/titus/runtime/containerhealth/service/AggregatingContainerHealthService.java"}, "focal_method": {"identifier": "events", "parameters": "(boolean snapshot)", "modifiers": "@Override public", "return": "Flux<ContainerHealthEvent>", "body": "@Override\n    public Flux<ContainerHealthEvent> events(boolean snapshot) {\n        return snapshot\n                ? healthStatuses.compose(ReactorExt.head(() -> Collections.singletonList(buildCurrentSnapshot())))\n                : healthStatuses;\n    }", "signature": "Flux<ContainerHealthEvent> events(boolean snapshot)", "full_signature": "@Override public Flux<ContainerHealthEvent> events(boolean snapshot)", "class_method_signature": "AggregatingContainerHealthService.events(boolean snapshot)", "testcase": false, "constructor": false, "invocations": ["compose", "head", "singletonList", "buildCurrentSnapshot"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}