{"test_class": {"identifier": "EndConsumerHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "List<Throwable> errors;", "modifier": "", "type": "List<Throwable>", "declarator": "errors", "var_name": "errors"}], "file": "rxjava/src/test/java/io/reactivex/internal/util/EndConsumerHelperTest.java"}, "test_case": {"identifier": "validateSubscription", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void validateSubscription() {\n        BooleanSubscription d1 = new BooleanSubscription();\n\n        assertFalse(EndConsumerHelper.validate(SubscriptionHelper.CANCELLED, d1, getClass()));\n\n        assertTrue(d1.isCancelled());\n\n        assertTrue(errors.toString(), errors.isEmpty());\n    }", "signature": "void validateSubscription()", "full_signature": "@Test public void validateSubscription()", "class_method_signature": "EndConsumerHelperTest.validateSubscription()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "validate", "getClass", "assertTrue", "isCancelled", "assertTrue", "toString", "isEmpty"]}, "focal_class": {"identifier": "EndConsumerHelper", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "EndConsumerHelper", "parameters": "()", "modifiers": "private", "return": "", "signature": " EndConsumerHelper()", "full_signature": "private  EndConsumerHelper()", "class_method_signature": "EndConsumerHelper.EndConsumerHelper()", "testcase": false, "constructor": true}, {"identifier": "validate", "parameters": "(Disposable upstream, Disposable next, Class<?> observer)", "modifiers": "public static", "return": "boolean", "signature": "boolean validate(Disposable upstream, Disposable next, Class<?> observer)", "full_signature": "public static boolean validate(Disposable upstream, Disposable next, Class<?> observer)", "class_method_signature": "EndConsumerHelper.validate(Disposable upstream, Disposable next, Class<?> observer)", "testcase": false, "constructor": false}, {"identifier": "setOnce", "parameters": "(AtomicReference<Disposable> upstream, Disposable next, Class<?> observer)", "modifiers": "public static", "return": "boolean", "signature": "boolean setOnce(AtomicReference<Disposable> upstream, Disposable next, Class<?> observer)", "full_signature": "public static boolean setOnce(AtomicReference<Disposable> upstream, Disposable next, Class<?> observer)", "class_method_signature": "EndConsumerHelper.setOnce(AtomicReference<Disposable> upstream, Disposable next, Class<?> observer)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(Subscription upstream, Subscription next, Class<?> subscriber)", "modifiers": "public static", "return": "boolean", "signature": "boolean validate(Subscription upstream, Subscription next, Class<?> subscriber)", "full_signature": "public static boolean validate(Subscription upstream, Subscription next, Class<?> subscriber)", "class_method_signature": "EndConsumerHelper.validate(Subscription upstream, Subscription next, Class<?> subscriber)", "testcase": false, "constructor": false}, {"identifier": "setOnce", "parameters": "(AtomicReference<Subscription> upstream, Subscription next, Class<?> subscriber)", "modifiers": "public static", "return": "boolean", "signature": "boolean setOnce(AtomicReference<Subscription> upstream, Subscription next, Class<?> subscriber)", "full_signature": "public static boolean setOnce(AtomicReference<Subscription> upstream, Subscription next, Class<?> subscriber)", "class_method_signature": "EndConsumerHelper.setOnce(AtomicReference<Subscription> upstream, Subscription next, Class<?> subscriber)", "testcase": false, "constructor": false}, {"identifier": "composeMessage", "parameters": "(String consumer)", "modifiers": "public static", "return": "String", "signature": "String composeMessage(String consumer)", "full_signature": "public static String composeMessage(String consumer)", "class_method_signature": "EndConsumerHelper.composeMessage(String consumer)", "testcase": false, "constructor": false}, {"identifier": "reportDoubleSubscription", "parameters": "(Class<?> consumer)", "modifiers": "public static", "return": "void", "signature": "void reportDoubleSubscription(Class<?> consumer)", "full_signature": "public static void reportDoubleSubscription(Class<?> consumer)", "class_method_signature": "EndConsumerHelper.reportDoubleSubscription(Class<?> consumer)", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/util/EndConsumerHelper.java"}, "focal_method": {"identifier": "validate", "parameters": "(Disposable upstream, Disposable next, Class<?> observer)", "modifiers": "public static", "return": "boolean", "body": "public static boolean validate(Disposable upstream, Disposable next, Class<?> observer) {\n        ObjectHelper.requireNonNull(next, \"next is null\");\n        if (upstream != null) {\n            next.dispose();\n            if (upstream != DisposableHelper.DISPOSED) {\n                reportDoubleSubscription(observer);\n            }\n            return false;\n        }\n        return true;\n    }", "signature": "boolean validate(Disposable upstream, Disposable next, Class<?> observer)", "full_signature": "public static boolean validate(Disposable upstream, Disposable next, Class<?> observer)", "class_method_signature": "EndConsumerHelper.validate(Disposable upstream, Disposable next, Class<?> observer)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "dispose", "reportDoubleSubscription"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}