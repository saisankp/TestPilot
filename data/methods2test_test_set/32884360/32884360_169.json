{"test_class": {"identifier": "AkCollatorFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static int NTHREADS = 10;", "modifier": "private final static", "type": "int", "declarator": "NTHREADS = 10", "var_name": "NTHREADS"}, {"original_string": "private AkCollatorFactory.Mode DEFAULT_MODE = AkCollatorFactory.Mode.STRICT;", "modifier": "private", "type": "AkCollatorFactory.Mode", "declarator": "DEFAULT_MODE = AkCollatorFactory.Mode.STRICT", "var_name": "DEFAULT_MODE"}], "file": "fdb-sql-layer-core/src/test/java/com/foundationdb/server/collation/AkCollatorFactoryTest.java"}, "test_case": {"identifier": "collationBadScheme", "parameters": "()", "modifiers": "@Test(expected = UnsupportedCollationException.class) public", "return": "void", "body": "@Test(expected = UnsupportedCollationException.class)\n    public void collationBadScheme() throws Exception {\n        CollationSpecifier collationSpecifier = new CollationSpecifier(\"en_us_bad_arguments\");\n        AkCollatorFactory.forScheme(collationSpecifier);\n    }", "signature": "void collationBadScheme()", "full_signature": "@Test(expected = UnsupportedCollationException.class) public void collationBadScheme()", "class_method_signature": "AkCollatorFactoryTest.collationBadScheme()", "testcase": true, "constructor": false, "invocations": ["forScheme"]}, "focal_class": {"identifier": "AkCollatorFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final static int UCS_BINARY_ID = 0;", "modifier": "public final static", "type": "int", "declarator": "UCS_BINARY_ID = 0", "var_name": "UCS_BINARY_ID"}, {"original_string": "public final static String UCS_BINARY = \"UCS_BINARY\";", "modifier": "public final static", "type": "String", "declarator": "UCS_BINARY = \"UCS_BINARY\"", "var_name": "UCS_BINARY"}, {"original_string": "public final static AkCollator UCS_BINARY_COLLATOR = new AkCollatorBinary();", "modifier": "public final static", "type": "AkCollator", "declarator": "UCS_BINARY_COLLATOR = new AkCollatorBinary()", "var_name": "UCS_BINARY_COLLATOR"}, {"original_string": "private final static Map<String, Collator> sourceMap = new HashMap<>();", "modifier": "private final static", "type": "Map<String, Collator>", "declarator": "sourceMap = new HashMap<>()", "var_name": "sourceMap"}, {"original_string": "private final static Map<String, SoftReference<AkCollator>> collatorMap = new ConcurrentHashMap<>();", "modifier": "private final static", "type": "Map<String, SoftReference<AkCollator>>", "declarator": "collatorMap = new ConcurrentHashMap<>()", "var_name": "collatorMap"}, {"original_string": "private final static Map<Integer, SoftReference<AkCollator>> collationIdMap = new ConcurrentHashMap<>();", "modifier": "private final static", "type": "Map<Integer, SoftReference<AkCollator>>", "declarator": "collationIdMap = new ConcurrentHashMap<>()", "var_name": "collationIdMap"}, {"original_string": "private final static Map<String, Integer> schemeToIdMap = new ConcurrentHashMap<>();", "modifier": "private final static", "type": "Map<String, Integer>", "declarator": "schemeToIdMap = new ConcurrentHashMap<>()", "var_name": "schemeToIdMap"}, {"original_string": "private final static AtomicInteger collationIdGenerator = new AtomicInteger(UCS_BINARY_ID);", "modifier": "private final static", "type": "AtomicInteger", "declarator": "collationIdGenerator = new AtomicInteger(UCS_BINARY_ID)", "var_name": "collationIdGenerator"}, {"original_string": "private volatile static Mode mode = Mode.STRICT;", "modifier": "private volatile static", "type": "Mode", "declarator": "mode = Mode.STRICT", "var_name": "mode"}, {"original_string": "private static int cacheHits;", "modifier": "private static", "type": "int", "declarator": "cacheHits", "var_name": "cacheHits"}], "methods": [{"identifier": "setCollationMode", "parameters": "(String modeString)", "modifiers": "public static", "return": "void", "signature": "void setCollationMode(String modeString)", "full_signature": "public static void setCollationMode(String modeString)", "class_method_signature": "AkCollatorFactory.setCollationMode(String modeString)", "testcase": false, "constructor": false}, {"identifier": "setCollationMode", "parameters": "(Mode m)", "modifiers": "public static", "return": "void", "signature": "void setCollationMode(Mode m)", "full_signature": "public static void setCollationMode(Mode m)", "class_method_signature": "AkCollatorFactory.setCollationMode(Mode m)", "testcase": false, "constructor": false}, {"identifier": "getCollationMode", "parameters": "()", "modifiers": "public static", "return": "Mode", "signature": "Mode getCollationMode()", "full_signature": "public static Mode getCollationMode()", "class_method_signature": "AkCollatorFactory.getCollationMode()", "testcase": false, "constructor": false}, {"identifier": "getAkCollator", "parameters": "(final String scheme)", "modifiers": "public static", "return": "AkCollator", "signature": "AkCollator getAkCollator(final String scheme)", "full_signature": "public static AkCollator getAkCollator(final String scheme)", "class_method_signature": "AkCollatorFactory.getAkCollator(final String scheme)", "testcase": false, "constructor": false}, {"identifier": "getAkCollator", "parameters": "(final int collatorId)", "modifiers": "public static", "return": "AkCollator", "signature": "AkCollator getAkCollator(final int collatorId)", "full_signature": "public static AkCollator getAkCollator(final int collatorId)", "class_method_signature": "AkCollatorFactory.getAkCollator(final int collatorId)", "testcase": false, "constructor": false}, {"identifier": "getKeyByValue", "parameters": "(Map<T, E> map, E value)", "modifiers": "public static", "return": "T", "signature": "T getKeyByValue(Map<T, E> map, E value)", "full_signature": "public static T getKeyByValue(Map<T, E> map, E value)", "class_method_signature": "AkCollatorFactory.getKeyByValue(Map<T, E> map, E value)", "testcase": false, "constructor": false}, {"identifier": "forScheme", "parameters": "(final CollationSpecifier specifier)", "modifiers": "static synchronized", "return": "Collator", "signature": "Collator forScheme(final CollationSpecifier specifier)", "full_signature": "static synchronized Collator forScheme(final CollationSpecifier specifier)", "class_method_signature": "AkCollatorFactory.forScheme(final CollationSpecifier specifier)", "testcase": false, "constructor": false}, {"identifier": "mapToBinary", "parameters": "(final String scheme)", "modifiers": "private static", "return": "AkCollator", "signature": "AkCollator mapToBinary(final String scheme)", "full_signature": "private static AkCollator mapToBinary(final String scheme)", "class_method_signature": "AkCollatorFactory.mapToBinary(final String scheme)", "testcase": false, "constructor": false}, {"identifier": "getCacheHits", "parameters": "()", "modifiers": "static", "return": "int", "signature": "int getCacheHits()", "full_signature": "static int getCacheHits()", "class_method_signature": "AkCollatorFactory.getCacheHits()", "testcase": false, "constructor": false}], "file": "fdb-sql-layer-core/src/main/java/com/foundationdb/server/collation/AkCollatorFactory.java"}, "focal_method": {"identifier": "forScheme", "parameters": "(final CollationSpecifier specifier)", "modifiers": "static synchronized", "return": "Collator", "body": "static synchronized Collator forScheme(final CollationSpecifier specifier) {\n        RuleBasedCollator collator = (RuleBasedCollator) sourceMap.get(specifier.toString());\n        if (collator == null) {\n            collator = specifier.createCollator();\n            sourceMap.put(specifier.toString(), collator);\n        }\n        collator = collator.cloneAsThawed();\n        return collator;\n    }", "signature": "Collator forScheme(final CollationSpecifier specifier)", "full_signature": "static synchronized Collator forScheme(final CollationSpecifier specifier)", "class_method_signature": "AkCollatorFactory.forScheme(final CollationSpecifier specifier)", "testcase": false, "constructor": false, "invocations": ["get", "toString", "createCollator", "put", "toString", "cloneAsThawed"]}, "repository": {"repo_id": 32884360, "url": "https://github.com/jaytaylor/sql-layer", "language": "Java", "is_fork": false, "fork_count": 120, "stargazer_count": 77, "size": 138665, "license": "licensed"}}