{"test_class": {"identifier": "IntersectionParserTest", "superclass": "extends AbstractSpecTest", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(IntersectionParserTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(IntersectionParserTest.class)", "var_name": "LOGGER"}, {"original_string": "private IntersectionParser parser;", "modifier": "private", "type": "IntersectionParser", "declarator": "parser", "var_name": "parser"}], "file": "geoclient-parser/src/test/java/gov/nyc/doitt/gis/geoclient/parser/regex/IntersectionParserTest.java"}, "test_case": {"identifier": "testParse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParse()\n    {\n        testParser(this.parser, LOGGER);\n    }", "signature": "void testParse()", "full_signature": "@Test public void testParse()", "class_method_signature": "IntersectionParserTest.testParse()", "testcase": true, "constructor": false, "invocations": ["testParser"]}, "focal_class": {"identifier": "IntersectionParser", "superclass": "extends AbstractRegexParser", "interfaces": "", "fields": [{"original_string": "private static final Pattern INTERSECTION = Pattern.compile(\"^\\\\s*(.+)\\\\s+(AND|\\\\&|\\\\&\\\\&)\\\\s+(.+)\\\\s*$\",Pattern.CASE_INSENSITIVE);", "modifier": "private static final", "type": "Pattern", "declarator": "INTERSECTION = Pattern.compile(\"^\\\\s*(.+)\\\\s+(AND|\\\\&|\\\\&\\\\&)\\\\s+(.+)\\\\s*$\",Pattern.CASE_INSENSITIVE)", "var_name": "INTERSECTION"}], "methods": [{"identifier": "parse", "parameters": "(ParseContext parseContext)", "modifiers": "@Override public", "return": "void", "signature": "void parse(ParseContext parseContext)", "full_signature": "@Override public void parse(ParseContext parseContext)", "class_method_signature": "IntersectionParser.parse(ParseContext parseContext)", "testcase": false, "constructor": false}], "file": "geoclient-parser/src/main/java/gov/nyc/doitt/gis/geoclient/parser/regex/IntersectionParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(ParseContext parseContext)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void parse(ParseContext parseContext)\n    {\n        Chunk currentChunk = parseContext.getCurrent();\n        Matcher matcher = INTERSECTION.matcher(currentChunk.getText());\n\n        if(!matcher.matches())\n        {\n            patternNotMatched(parseContext,INTERSECTION);\n            return;\n        }\n\n        MatchBuilder builder = new MatchBuilder()\n        .add(matcher)\n        .add(MatchType.COMPLETE)\n        .add(parseContext)\n        .add(INTERSECTION, 1, TokenType.CROSS_STREET_ONE)\n        .add(INTERSECTION, 2, TokenType.AND)\n        .add(INTERSECTION, 3, TokenType.CROSS_STREET_TWO);\n\n        handleMatch(builder.build(), ChunkType.INTERSECTION);\n    }", "signature": "void parse(ParseContext parseContext)", "full_signature": "@Override public void parse(ParseContext parseContext)", "class_method_signature": "IntersectionParser.parse(ParseContext parseContext)", "testcase": false, "constructor": false, "invocations": ["getCurrent", "matcher", "getText", "matches", "patternNotMatched", "add", "add", "add", "add", "add", "add", "handleMatch", "build"]}, "repository": {"repo_id": 49475567, "url": "https://github.com/CityOfNewYork/geoclient", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 42, "size": 9801, "license": "licensed"}}