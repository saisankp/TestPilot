{"test_class": {"identifier": "SortingSequenceTest", "superclass": "extends AbstractNodeSequenceTest", "interfaces": "", "fields": [{"original_string": "private ExecutionContext context;", "modifier": "private", "type": "ExecutionContext", "declarator": "context", "var_name": "context"}, {"original_string": "private BufferManager bufferMgr;", "modifier": "private", "type": "BufferManager", "declarator": "bufferMgr", "var_name": "bufferMgr"}, {"original_string": "private TypeSystem types;", "modifier": "private", "type": "TypeSystem", "declarator": "types", "var_name": "types"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/query/engine/process/SortingSequenceTest.java"}, "test_case": {"identifier": "shouldSortSequenceWithDuplicatesOnHeapBuffer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldSortSequenceWithDuplicatesOnHeapBuffer() {\n        // print(true);\n        boolean useHeap = true;\n        boolean pack = false;\n        boolean allowDups = true;\n        ExtractFromRow extractor = RowExtractors.extractPath(0, cache, types);\n        SortingSequence sorted = new SortingSequence(workspaceName(), allNodes(), extractor, bufferMgr, cache, pack, useHeap,\n                                                     allowDups, NullOrder.NULLS_LAST);\n        assertThat(sorted.getRowCount(), is(countRows(allNodes())));\n        assertSorted(sorted, extractor);\n    }", "signature": "void shouldSortSequenceWithDuplicatesOnHeapBuffer()", "full_signature": "@Test public void shouldSortSequenceWithDuplicatesOnHeapBuffer()", "class_method_signature": "SortingSequenceTest.shouldSortSequenceWithDuplicatesOnHeapBuffer()", "testcase": true, "constructor": false, "invocations": ["extractPath", "workspaceName", "allNodes", "assertThat", "getRowCount", "is", "countRows", "allNodes", "assertSorted"]}, "focal_class": {"identifier": "SortingSequence", "superclass": "extends BufferingSequence", "interfaces": "", "fields": [{"original_string": "private final DistinctBuffer<BufferedRow> rowsWithNullKey;", "modifier": "private final", "type": "DistinctBuffer<BufferedRow>", "declarator": "rowsWithNullKey", "var_name": "rowsWithNullKey"}, {"original_string": "private final NullOrder nullOrder;", "modifier": "private final", "type": "NullOrder", "declarator": "nullOrder", "var_name": "nullOrder"}, {"original_string": "private Iterator<BufferedRow> bufferedRows;", "modifier": "private", "type": "Iterator<BufferedRow>", "declarator": "bufferedRows", "var_name": "bufferedRows"}, {"original_string": "private int batchSize = 0;", "modifier": "private", "type": "int", "declarator": "batchSize = 0", "var_name": "batchSize"}], "methods": [{"identifier": "SortingSequence", "parameters": "( String workspaceName,\n                            NodeSequence delegate,\n                            ExtractFromRow extractor,\n                            BufferManager bufferMgr,\n                            CachedNodeSupplier nodeCache,\n                            boolean pack,\n                            boolean useHeap,\n                            boolean allowDuplicates,\n                            NullOrder nullOrder )", "modifiers": "@SuppressWarnings( {\"unchecked\"} ) public", "return": "", "signature": " SortingSequence( String workspaceName,\n                            NodeSequence delegate,\n                            ExtractFromRow extractor,\n                            BufferManager bufferMgr,\n                            CachedNodeSupplier nodeCache,\n                            boolean pack,\n                            boolean useHeap,\n                            boolean allowDuplicates,\n                            NullOrder nullOrder )", "full_signature": "@SuppressWarnings( {\"unchecked\"} ) public  SortingSequence( String workspaceName,\n                            NodeSequence delegate,\n                            ExtractFromRow extractor,\n                            BufferManager bufferMgr,\n                            CachedNodeSupplier nodeCache,\n                            boolean pack,\n                            boolean useHeap,\n                            boolean allowDuplicates,\n                            NullOrder nullOrder )", "class_method_signature": "SortingSequence.SortingSequence( String workspaceName,\n                            NodeSequence delegate,\n                            ExtractFromRow extractor,\n                            BufferManager bufferMgr,\n                            CachedNodeSupplier nodeCache,\n                            boolean pack,\n                            boolean useHeap,\n                            boolean allowDuplicates,\n                            NullOrder nullOrder )", "testcase": false, "constructor": true}, {"identifier": "getRowCount", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getRowCount()", "full_signature": "@Override public long getRowCount()", "class_method_signature": "SortingSequence.getRowCount()", "testcase": false, "constructor": false}, {"identifier": "nextBatch", "parameters": "()", "modifiers": "@Override public", "return": "Batch", "signature": "Batch nextBatch()", "full_signature": "@Override public Batch nextBatch()", "class_method_signature": "SortingSequence.nextBatch()", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "()", "modifiers": "protected", "return": "Iterator<BufferedRow>", "signature": "Iterator<BufferedRow> initialize()", "full_signature": "protected Iterator<BufferedRow> initialize()", "class_method_signature": "SortingSequence.initialize()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "SortingSequence.close()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "SortingSequence.toString()", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/query/engine/process/SortingSequence.java"}, "focal_method": {"identifier": "getRowCount", "parameters": "()", "modifiers": "@Override public", "return": "long", "body": "@Override\n    public long getRowCount() {\n        if (bufferedRows == null) {\n            bufferedRows = initialize();\n        }\n        return super.rowCount() + rowsWithNullKey.size();\n    }", "signature": "long getRowCount()", "full_signature": "@Override public long getRowCount()", "class_method_signature": "SortingSequence.getRowCount()", "testcase": false, "constructor": false, "invocations": ["initialize", "rowCount", "size"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}