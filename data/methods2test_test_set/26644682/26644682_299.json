{"test_class": {"identifier": "VersionServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private VersionService versionService;", "modifier": "@InjectMocks\n    private", "type": "VersionService", "declarator": "versionService", "var_name": "versionService"}], "file": "dataprep-backend-service/src/test/java/org/talend/dataprep/api/service/info/VersionServiceTest.java"}, "test_case": {"identifier": "shouldAggregateVersionId", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldAggregateVersionId() throws Exception {\n        // given\n        final ManifestInfoProvider provider1 = mock(ManifestInfoProvider.class);\n        final ManifestInfoProvider provider2 = mock(ManifestInfoProvider.class);\n        when(provider1.getManifestInfo()).thenReturn(new ManifestInfo(\"v1\", \"1234\"));\n        when(provider2.getManifestInfo()).thenReturn(new ManifestInfo(\"v2\", \"1234\"));\n        ReflectionTestUtils.setField(versionService, \"manifestInfoProviders\", asList(provider1, provider2));\n\n        // when\n        final Version version = versionService.version();\n\n        // then\n        assertEquals(\"v1-v2\", version.getVersionId());\n        assertEquals(\"1234-1234\", version.getBuildId());\n    }", "signature": "void shouldAggregateVersionId()", "full_signature": "@Test public void shouldAggregateVersionId()", "class_method_signature": "VersionServiceTest.shouldAggregateVersionId()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "getManifestInfo", "thenReturn", "when", "getManifestInfo", "setField", "asList", "version", "assertEquals", "getVersionId", "assertEquals", "getBuildId"]}, "focal_class": {"identifier": "VersionService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(VersionService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(VersionService.class)", "var_name": "LOGGER"}, {"original_string": "private static final String UNDEFINED_VERSION_ID = \"N/A\";", "modifier": "private static final", "type": "String", "declarator": "UNDEFINED_VERSION_ID = \"N/A\"", "var_name": "UNDEFINED_VERSION_ID"}, {"original_string": "@Autowired(required = false)\n    private List<ManifestInfoProvider> manifestInfoProviders;", "modifier": "@Autowired(required = false)\n    private", "type": "List<ManifestInfoProvider>", "declarator": "manifestInfoProviders", "var_name": "manifestInfoProviders"}], "methods": [{"identifier": "version", "parameters": "()", "modifiers": "@RequestMapping(value = \"/version\", method = GET) @ApiOperation(value = \"Get the version of the service\", produces = MediaType.APPLICATION_JSON_VALUE) @Timed @PublicAPI public", "return": "Version", "signature": "Version version()", "full_signature": "@RequestMapping(value = \"/version\", method = GET) @ApiOperation(value = \"Get the version of the service\", produces = MediaType.APPLICATION_JSON_VALUE) @Timed @PublicAPI public Version version()", "class_method_signature": "VersionService.version()", "testcase": false, "constructor": false}], "file": "dataprep-backend-service/src/main/java/org/talend/dataprep/api/service/info/VersionService.java"}, "focal_method": {"identifier": "version", "parameters": "()", "modifiers": "@RequestMapping(value = \"/version\", method = GET) @ApiOperation(value = \"Get the version of the service\", produces = MediaType.APPLICATION_JSON_VALUE) @Timed @PublicAPI public", "return": "Version", "body": "@RequestMapping(value = \"/version\", method = GET)\n    @ApiOperation(value = \"Get the version of the service\", produces = MediaType.APPLICATION_JSON_VALUE)\n    @Timed\n    @PublicAPI\n    public Version version() {\n        String buildId = manifestInfoProviders\n                .stream() //\n                .map(ManifestInfoProvider::getManifestInfo) //\n                .map(ManifestInfo::getBuildId) //\n                .collect(joining(\"-\"));\n        final Optional<String> uniqueVersion = manifestInfoProviders\n                .stream() //\n                .map(ManifestInfoProvider::getManifestInfo) //\n                .map(ManifestInfo::getVersionId) //\n                .filter(versionId -> !StringUtils.equals(UNDEFINED_VERSION_ID, versionId)) //\n                .reduce((s, s2) -> {\n                    if (StringUtils.equals(s, s2)) {\n                        return s;\n                    }\n                    return s + '-' + s2;\n                });\n        String serviceUnifiedVersionId = uniqueVersion.orElse(UNDEFINED_VERSION_ID);\n\n        return new Version(serviceUnifiedVersionId, buildId);\n    }", "signature": "Version version()", "full_signature": "@RequestMapping(value = \"/version\", method = GET) @ApiOperation(value = \"Get the version of the service\", produces = MediaType.APPLICATION_JSON_VALUE) @Timed @PublicAPI public Version version()", "class_method_signature": "VersionService.version()", "testcase": false, "constructor": false, "invocations": ["collect", "map", "map", "stream", "joining", "reduce", "filter", "map", "map", "stream", "equals", "equals", "orElse"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}