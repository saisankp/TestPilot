{"test_class": {"identifier": "IndexRangeConstraintTest", "superclass": "", "interfaces": "", "fields": [], "file": "culvert-main/src/test/java/com/bah/culvert/constraints/IndexRangeConstraintTest.java"}, "test_case": {"identifier": "testIndexRangeToString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testIndexRangeToString() {\n    CRange range = new CRange();\n    CRange range2 = new CRange(new byte[] { 0 });\n    CRange range3 = new CRange(new byte[] { 0 }, new byte[] { 3 });\n    Assert.assertEquals(\"IndexRangeConstraint()\", new IndexRangeConstraint(\n        null, null).toString());\n    Assert.assertNotSame(\"IndexRangeConstraint()\", new IndexRangeConstraint(\n        null, range).toString());\n    Assert.assertNotSame(\"IndexRangeConstraint()\", new IndexRangeConstraint(\n        null, range2).toString());\n    Assert.assertNotSame(\"IndexRangeConstraint()\", new IndexRangeConstraint(\n        null, range3).toString());\n    Assert.assertNotSame(new IndexRangeConstraint(null, range3).toString(),\n        new IndexRangeConstraint(null, range2).toString());\n  }", "signature": "void testIndexRangeToString()", "full_signature": "@Test public void testIndexRangeToString()", "class_method_signature": "IndexRangeConstraintTest.testIndexRangeToString()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toString", "assertNotSame", "toString", "assertNotSame", "toString", "assertNotSame", "toString", "assertNotSame", "toString", "toString"]}, "focal_class": {"identifier": "IndexRangeConstraint", "superclass": "extends Constraint", "interfaces": "implements Writable", "fields": [{"original_string": "private CRange range = new CRange();", "modifier": "private", "type": "CRange", "declarator": "range = new CRange()", "var_name": "range"}, {"original_string": "private Index index;", "modifier": "private", "type": "Index", "declarator": "index", "var_name": "index"}], "methods": [{"identifier": "IndexRangeConstraint", "parameters": "(Index index, CRange range)", "modifiers": "public", "return": "", "signature": " IndexRangeConstraint(Index index, CRange range)", "full_signature": "public  IndexRangeConstraint(Index index, CRange range)", "class_method_signature": "IndexRangeConstraint.IndexRangeConstraint(Index index, CRange range)", "testcase": false, "constructor": true}, {"identifier": "IndexRangeConstraint", "parameters": "()", "modifiers": "public", "return": "", "signature": " IndexRangeConstraint()", "full_signature": "public  IndexRangeConstraint()", "class_method_signature": "IndexRangeConstraint.IndexRangeConstraint()", "testcase": false, "constructor": true}, {"identifier": "getResultIterator", "parameters": "()", "modifiers": "@Override public", "return": "SeekingCurrentIterator", "signature": "SeekingCurrentIterator getResultIterator()", "full_signature": "@Override public SeekingCurrentIterator getResultIterator()", "class_method_signature": "IndexRangeConstraint.getResultIterator()", "testcase": false, "constructor": false}, {"identifier": "getRange", "parameters": "()", "modifiers": "public", "return": "CRange", "signature": "CRange getRange()", "full_signature": "public CRange getRange()", "class_method_signature": "IndexRangeConstraint.getRange()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "IndexRangeConstraint.toString()", "testcase": false, "constructor": false}, {"identifier": "readFields", "parameters": "(DataInput in)", "modifiers": "@Override public", "return": "void", "signature": "void readFields(DataInput in)", "full_signature": "@Override public void readFields(DataInput in)", "class_method_signature": "IndexRangeConstraint.readFields(DataInput in)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(DataOutput out)", "modifiers": "@Override public", "return": "void", "signature": "void write(DataOutput out)", "full_signature": "@Override public void write(DataOutput out)", "class_method_signature": "IndexRangeConstraint.write(DataOutput out)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object compareto)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object compareto)", "full_signature": "@Override public boolean equals(Object compareto)", "class_method_signature": "IndexRangeConstraint.equals(Object compareto)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "IndexRangeConstraint.hashCode()", "testcase": false, "constructor": false}, {"identifier": "getIndex", "parameters": "()", "modifiers": "public", "return": "Index", "signature": "Index getIndex()", "full_signature": "public Index getIndex()", "class_method_signature": "IndexRangeConstraint.getIndex()", "testcase": false, "constructor": false}], "file": "culvert-main/src/main/java/com/bah/culvert/constraints/IndexRangeConstraint.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n  public String toString() {\n    boolean startNotNull = false;\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"IndexRangeConstraint(\");\n\n    if (range != null && range.getStart() != null) {\n      sb.append(range.getStart().hashCode());\n      startNotNull = true;\n    }\n\n    if (range != null && range.getEnd() != null) {\n      if (startNotNull) {\n        sb.append(\", \");\n      }\n      sb.append(range.getEnd().hashCode());\n    }\n    sb.append(\")\");\n    return sb.toString();\n  }", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "IndexRangeConstraint.toString()", "testcase": false, "constructor": false, "invocations": ["append", "getStart", "append", "hashCode", "getStart", "getEnd", "append", "append", "hashCode", "getEnd", "append", "toString"]}, "repository": {"repo_id": 1973010, "url": "https://github.com/booz-allen-hamilton/culvert", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 43, "size": 373, "license": "licensed"}}