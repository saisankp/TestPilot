{"test_class": {"identifier": "AbstractInterfaceBuilderTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/bootstrap/builders/AbstractInterfaceBuilderTest.java"}, "test_case": {"identifier": "build", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void build() {\n        MonitorConfig monitorConfig = new MonitorConfig(\"123\");\n        ApplicationConfig applicationConfig = new ApplicationConfig();\n        ModuleConfig moduleConfig = new ModuleConfig();\n        RegistryConfig registryConfig = new RegistryConfig();\n        MetadataReportConfig metadataReportConfig = new MetadataReportConfig();\n        ConfigCenterConfig configCenterConfig = new ConfigCenterConfig();\n\n        InterfaceBuilder builder = new InterfaceBuilder();\n        builder.id(\"id\").prefix(\"prefix\").local(true).stub(false).monitor(\"123\").proxy(\"mockproxyfactory\").cluster(\"mockcluster\")\n                .filter(\"mockfilter\").listener(\"mockinvokerlistener\").owner(\"owner\").connections(1)\n                .layer(\"layer\").application(applicationConfig).module(moduleConfig)\n                .addRegistry(registryConfig).registryIds(\"registryIds\")\n                .onconnect(\"onconnet\").ondisconnect(\"ondisconnect\")\n                .metadataReportConfig(metadataReportConfig)\n                .configCenter(configCenterConfig)\n                .callbacks(2).scope(\"scope\");\n\n        InterfaceConfig config = builder.build();\n        InterfaceConfig config2 = builder.build();\n\n        Assertions.assertEquals(\"id\", config.getId());\n        Assertions.assertEquals(\"prefix\", config.getPrefix());\n        Assertions.assertEquals(\"true\", config.getLocal());\n        Assertions.assertEquals(\"false\", config.getStub());\n        Assertions.assertEquals(monitorConfig, config.getMonitor());\n        Assertions.assertEquals(\"mockproxyfactory\", config.getProxy());\n        Assertions.assertEquals(\"mockcluster\", config.getCluster());\n        Assertions.assertEquals(\"mockfilter\", config.getFilter());\n        Assertions.assertEquals(\"mockinvokerlistener\", config.getListener());\n        Assertions.assertEquals(\"owner\", config.getOwner());\n        Assertions.assertEquals(1, config.getConnections().intValue());\n        Assertions.assertEquals(\"layer\", config.getLayer());\n        Assertions.assertEquals(applicationConfig, config.getApplication());\n        Assertions.assertEquals(moduleConfig, config.getModule());\n        Assertions.assertEquals(registryConfig, config.getRegistry());\n        Assertions.assertEquals(\"registryIds\", config.getRegistryIds());\n        Assertions.assertEquals(\"onconnet\", config.getOnconnect());\n        Assertions.assertEquals(\"ondisconnect\", config.getOndisconnect());\n        Assertions.assertEquals(metadataReportConfig, config.getMetadataReportConfig());\n        Assertions.assertEquals(configCenterConfig, config.getConfigCenter());\n        Assertions.assertEquals(2, config.getCallbacks().intValue());\n        Assertions.assertEquals(\"scope\", config.getScope());\n\n        Assertions.assertNotSame(config, config2);\n    }", "signature": "void build()", "full_signature": "@Test void build()", "class_method_signature": "AbstractInterfaceBuilderTest.build()", "testcase": true, "constructor": false, "invocations": ["scope", "callbacks", "configCenter", "metadataReportConfig", "ondisconnect", "onconnect", "registryIds", "addRegistry", "module", "application", "layer", "connections", "owner", "listener", "filter", "cluster", "proxy", "monitor", "stub", "local", "prefix", "id", "build", "build", "assertEquals", "getId", "assertEquals", "getPrefix", "assertEquals", "getLocal", "assertEquals", "getStub", "assertEquals", "getMonitor", "assertEquals", "getProxy", "assertEquals", "getCluster", "assertEquals", "getFilter", "assertEquals", "getListener", "assertEquals", "getOwner", "assertEquals", "intValue", "getConnections", "assertEquals", "getLayer", "assertEquals", "getApplication", "assertEquals", "getModule", "assertEquals", "getRegistry", "assertEquals", "getRegistryIds", "assertEquals", "getOnconnect", "assertEquals", "getOndisconnect", "assertEquals", "getMetadataReportConfig", "assertEquals", "getConfigCenter", "assertEquals", "intValue", "getCallbacks", "assertEquals", "getScope", "assertNotSame"]}, "focal_class": {"identifier": "AbstractInterfaceBuilder", "superclass": "extends AbstractMethodBuilder<T, B>", "interfaces": "", "fields": [{"original_string": "protected String local;", "modifier": "protected", "type": "String", "declarator": "local", "var_name": "local"}, {"original_string": "protected String stub;", "modifier": "protected", "type": "String", "declarator": "stub", "var_name": "stub"}, {"original_string": "protected MonitorConfig monitor;", "modifier": "protected", "type": "MonitorConfig", "declarator": "monitor", "var_name": "monitor"}, {"original_string": "protected String proxy;", "modifier": "protected", "type": "String", "declarator": "proxy", "var_name": "proxy"}, {"original_string": "protected String cluster;", "modifier": "protected", "type": "String", "declarator": "cluster", "var_name": "cluster"}, {"original_string": "protected String filter;", "modifier": "protected", "type": "String", "declarator": "filter", "var_name": "filter"}, {"original_string": "protected String listener;", "modifier": "protected", "type": "String", "declarator": "listener", "var_name": "listener"}, {"original_string": "protected String owner;", "modifier": "protected", "type": "String", "declarator": "owner", "var_name": "owner"}, {"original_string": "protected Integer connections;", "modifier": "protected", "type": "Integer", "declarator": "connections", "var_name": "connections"}, {"original_string": "protected String layer;", "modifier": "protected", "type": "String", "declarator": "layer", "var_name": "layer"}, {"original_string": "protected ApplicationConfig application;", "modifier": "protected", "type": "ApplicationConfig", "declarator": "application", "var_name": "application"}, {"original_string": "protected ModuleConfig module;", "modifier": "protected", "type": "ModuleConfig", "declarator": "module", "var_name": "module"}, {"original_string": "protected List<RegistryConfig> registries;", "modifier": "protected", "type": "List<RegistryConfig>", "declarator": "registries", "var_name": "registries"}, {"original_string": "protected String registryIds;", "modifier": "protected", "type": "String", "declarator": "registryIds", "var_name": "registryIds"}, {"original_string": "protected String onconnect;", "modifier": "protected", "type": "String", "declarator": "onconnect", "var_name": "onconnect"}, {"original_string": "protected String ondisconnect;", "modifier": "protected", "type": "String", "declarator": "ondisconnect", "var_name": "ondisconnect"}, {"original_string": "protected MetadataReportConfig metadataReportConfig;", "modifier": "protected", "type": "MetadataReportConfig", "declarator": "metadataReportConfig", "var_name": "metadataReportConfig"}, {"original_string": "protected ConfigCenterConfig configCenter;", "modifier": "protected", "type": "ConfigCenterConfig", "declarator": "configCenter", "var_name": "configCenter"}, {"original_string": "private Integer callbacks;", "modifier": "private", "type": "Integer", "declarator": "callbacks", "var_name": "callbacks"}, {"original_string": "private String scope;", "modifier": "private", "type": "String", "declarator": "scope", "var_name": "scope"}, {"original_string": "private String tag;", "modifier": "private", "type": "String", "declarator": "tag", "var_name": "tag"}], "methods": [{"identifier": "local", "parameters": "(String local)", "modifiers": "@Deprecated public", "return": "B", "signature": "B local(String local)", "full_signature": "@Deprecated public B local(String local)", "class_method_signature": "AbstractInterfaceBuilder.local(String local)", "testcase": false, "constructor": false}, {"identifier": "local", "parameters": "(Boolean local)", "modifiers": "@Deprecated public", "return": "B", "signature": "B local(Boolean local)", "full_signature": "@Deprecated public B local(Boolean local)", "class_method_signature": "AbstractInterfaceBuilder.local(Boolean local)", "testcase": false, "constructor": false}, {"identifier": "stub", "parameters": "(String stub)", "modifiers": "public", "return": "B", "signature": "B stub(String stub)", "full_signature": "public B stub(String stub)", "class_method_signature": "AbstractInterfaceBuilder.stub(String stub)", "testcase": false, "constructor": false}, {"identifier": "stub", "parameters": "(Boolean stub)", "modifiers": "public", "return": "B", "signature": "B stub(Boolean stub)", "full_signature": "public B stub(Boolean stub)", "class_method_signature": "AbstractInterfaceBuilder.stub(Boolean stub)", "testcase": false, "constructor": false}, {"identifier": "monitor", "parameters": "(MonitorConfig monitor)", "modifiers": "public", "return": "B", "signature": "B monitor(MonitorConfig monitor)", "full_signature": "public B monitor(MonitorConfig monitor)", "class_method_signature": "AbstractInterfaceBuilder.monitor(MonitorConfig monitor)", "testcase": false, "constructor": false}, {"identifier": "monitor", "parameters": "(String monitor)", "modifiers": "public", "return": "B", "signature": "B monitor(String monitor)", "full_signature": "public B monitor(String monitor)", "class_method_signature": "AbstractInterfaceBuilder.monitor(String monitor)", "testcase": false, "constructor": false}, {"identifier": "proxy", "parameters": "(String proxy)", "modifiers": "public", "return": "B", "signature": "B proxy(String proxy)", "full_signature": "public B proxy(String proxy)", "class_method_signature": "AbstractInterfaceBuilder.proxy(String proxy)", "testcase": false, "constructor": false}, {"identifier": "cluster", "parameters": "(String cluster)", "modifiers": "public", "return": "B", "signature": "B cluster(String cluster)", "full_signature": "public B cluster(String cluster)", "class_method_signature": "AbstractInterfaceBuilder.cluster(String cluster)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(String filter)", "modifiers": "public", "return": "B", "signature": "B filter(String filter)", "full_signature": "public B filter(String filter)", "class_method_signature": "AbstractInterfaceBuilder.filter(String filter)", "testcase": false, "constructor": false}, {"identifier": "listener", "parameters": "(String listener)", "modifiers": "public", "return": "B", "signature": "B listener(String listener)", "full_signature": "public B listener(String listener)", "class_method_signature": "AbstractInterfaceBuilder.listener(String listener)", "testcase": false, "constructor": false}, {"identifier": "owner", "parameters": "(String owner)", "modifiers": "public", "return": "B", "signature": "B owner(String owner)", "full_signature": "public B owner(String owner)", "class_method_signature": "AbstractInterfaceBuilder.owner(String owner)", "testcase": false, "constructor": false}, {"identifier": "connections", "parameters": "(Integer connections)", "modifiers": "public", "return": "B", "signature": "B connections(Integer connections)", "full_signature": "public B connections(Integer connections)", "class_method_signature": "AbstractInterfaceBuilder.connections(Integer connections)", "testcase": false, "constructor": false}, {"identifier": "layer", "parameters": "(String layer)", "modifiers": "public", "return": "B", "signature": "B layer(String layer)", "full_signature": "public B layer(String layer)", "class_method_signature": "AbstractInterfaceBuilder.layer(String layer)", "testcase": false, "constructor": false}, {"identifier": "application", "parameters": "(ApplicationConfig application)", "modifiers": "public", "return": "B", "signature": "B application(ApplicationConfig application)", "full_signature": "public B application(ApplicationConfig application)", "class_method_signature": "AbstractInterfaceBuilder.application(ApplicationConfig application)", "testcase": false, "constructor": false}, {"identifier": "module", "parameters": "(ModuleConfig module)", "modifiers": "public", "return": "B", "signature": "B module(ModuleConfig module)", "full_signature": "public B module(ModuleConfig module)", "class_method_signature": "AbstractInterfaceBuilder.module(ModuleConfig module)", "testcase": false, "constructor": false}, {"identifier": "addRegistries", "parameters": "(List<RegistryConfig> registries)", "modifiers": "public", "return": "B", "signature": "B addRegistries(List<RegistryConfig> registries)", "full_signature": "public B addRegistries(List<RegistryConfig> registries)", "class_method_signature": "AbstractInterfaceBuilder.addRegistries(List<RegistryConfig> registries)", "testcase": false, "constructor": false}, {"identifier": "addRegistry", "parameters": "(RegistryConfig registry)", "modifiers": "public", "return": "B", "signature": "B addRegistry(RegistryConfig registry)", "full_signature": "public B addRegistry(RegistryConfig registry)", "class_method_signature": "AbstractInterfaceBuilder.addRegistry(RegistryConfig registry)", "testcase": false, "constructor": false}, {"identifier": "registryIds", "parameters": "(String registryIds)", "modifiers": "public", "return": "B", "signature": "B registryIds(String registryIds)", "full_signature": "public B registryIds(String registryIds)", "class_method_signature": "AbstractInterfaceBuilder.registryIds(String registryIds)", "testcase": false, "constructor": false}, {"identifier": "onconnect", "parameters": "(String onconnect)", "modifiers": "public", "return": "B", "signature": "B onconnect(String onconnect)", "full_signature": "public B onconnect(String onconnect)", "class_method_signature": "AbstractInterfaceBuilder.onconnect(String onconnect)", "testcase": false, "constructor": false}, {"identifier": "ondisconnect", "parameters": "(String ondisconnect)", "modifiers": "public", "return": "B", "signature": "B ondisconnect(String ondisconnect)", "full_signature": "public B ondisconnect(String ondisconnect)", "class_method_signature": "AbstractInterfaceBuilder.ondisconnect(String ondisconnect)", "testcase": false, "constructor": false}, {"identifier": "metadataReportConfig", "parameters": "(MetadataReportConfig metadataReportConfig)", "modifiers": "public", "return": "B", "signature": "B metadataReportConfig(MetadataReportConfig metadataReportConfig)", "full_signature": "public B metadataReportConfig(MetadataReportConfig metadataReportConfig)", "class_method_signature": "AbstractInterfaceBuilder.metadataReportConfig(MetadataReportConfig metadataReportConfig)", "testcase": false, "constructor": false}, {"identifier": "configCenter", "parameters": "(ConfigCenterConfig configCenter)", "modifiers": "public", "return": "B", "signature": "B configCenter(ConfigCenterConfig configCenter)", "full_signature": "public B configCenter(ConfigCenterConfig configCenter)", "class_method_signature": "AbstractInterfaceBuilder.configCenter(ConfigCenterConfig configCenter)", "testcase": false, "constructor": false}, {"identifier": "callbacks", "parameters": "(Integer callbacks)", "modifiers": "public", "return": "B", "signature": "B callbacks(Integer callbacks)", "full_signature": "public B callbacks(Integer callbacks)", "class_method_signature": "AbstractInterfaceBuilder.callbacks(Integer callbacks)", "testcase": false, "constructor": false}, {"identifier": "scope", "parameters": "(String scope)", "modifiers": "public", "return": "B", "signature": "B scope(String scope)", "full_signature": "public B scope(String scope)", "class_method_signature": "AbstractInterfaceBuilder.scope(String scope)", "testcase": false, "constructor": false}, {"identifier": "tag", "parameters": "(String tag)", "modifiers": "public", "return": "B", "signature": "B tag(String tag)", "full_signature": "public B tag(String tag)", "class_method_signature": "AbstractInterfaceBuilder.tag(String tag)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(T instance)", "modifiers": "@Override public", "return": "void", "signature": "void build(T instance)", "full_signature": "@Override public void build(T instance)", "class_method_signature": "AbstractInterfaceBuilder.build(T instance)", "testcase": false, "constructor": false}], "file": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/bootstrap/builders/AbstractInterfaceBuilder.java"}, "focal_method": {"identifier": "build", "parameters": "(T instance)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void build(T instance) {\n        super.build(instance);\n\n        if (!StringUtils.isEmpty(local)) {\n            instance.setLocal(local);\n        }\n        if (!StringUtils.isEmpty(stub)) {\n            instance.setStub(stub);\n        }\n        if (monitor != null) {\n            instance.setMonitor(monitor);\n        }\n        if (!StringUtils.isEmpty(proxy)) {\n            instance.setProxy(proxy);\n        }\n        if (!StringUtils.isEmpty(cluster)) {\n            instance.setCluster(cluster);\n        }\n        if (!StringUtils.isEmpty(filter)) {\n            instance.setFilter(filter);\n        }\n        if (!StringUtils.isEmpty(listener)) {\n            instance.setListener(listener);\n        }\n        if (!StringUtils.isEmpty(owner)) {\n            instance.setOwner(owner);\n        }\n        if (connections != null) {\n            instance.setConnections(connections);\n        }\n        if (!StringUtils.isEmpty(layer)) {\n            instance.setLayer(layer);\n        }\n        if (application != null) {\n            instance.setApplication(application);\n        }\n        if (module != null) {\n            instance.setModule(module);\n        }\n        if (registries != null) {\n            instance.setRegistries(registries);\n        }\n        if (!StringUtils.isEmpty(registryIds)) {\n            instance.setRegistryIds(registryIds);\n        }\n        if (!StringUtils.isEmpty(onconnect)) {\n            instance.setOnconnect(onconnect);\n        }\n        if (!StringUtils.isEmpty(ondisconnect)) {\n            instance.setOndisconnect(ondisconnect);\n        }\n        if (metadataReportConfig != null) {\n            instance.setMetadataReportConfig(metadataReportConfig);\n        }\n        if (configCenter != null) {\n            instance.setConfigCenter(configCenter);\n        }\n        if (callbacks != null) {\n            instance.setCallbacks(callbacks);\n        }\n        if (!StringUtils.isEmpty(scope)) {\n            instance.setScope(scope);\n        }\n        if (StringUtils.isNotEmpty(tag)) {\n            instance.setTag(tag);\n        }\n    }", "signature": "void build(T instance)", "full_signature": "@Override public void build(T instance)", "class_method_signature": "AbstractInterfaceBuilder.build(T instance)", "testcase": false, "constructor": false, "invocations": ["build", "isEmpty", "setLocal", "isEmpty", "setStub", "setMonitor", "isEmpty", "setProxy", "isEmpty", "setCluster", "isEmpty", "setFilter", "isEmpty", "setListener", "isEmpty", "setOwner", "setConnections", "isEmpty", "setLayer", "setApplication", "setModule", "setRegistries", "isEmpty", "setRegistryIds", "isEmpty", "setOnconnect", "isEmpty", "setOndisconnect", "setMetadataReportConfig", "setConfigCenter", "setCallbacks", "isEmpty", "setScope", "isNotEmpty", "setTag"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}