{"test_class": {"identifier": "QuantityTest", "superclass": "", "interfaces": "", "fields": [], "file": "designer/testSrc/com/android/tools/idea/uibuilder/property/editors/support/QuantityTest.java"}, "test_case": {"identifier": "testAddUnit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testAddUnit() {\n    assertThat(Quantity.addUnit(mockProperty(ATTR_TEXT_SIZE, DIMENSION), \"13\")).isEqualTo(\"13sp\");\n    assertThat(Quantity.addUnit(mockProperty(ATTR_LINE_SPACING_EXTRA, DIMENSION), \"10\")).isEqualTo(\"10sp\");\n    assertThat(Quantity.addUnit(mockProperty(ATTR_LAYOUT_WIDTH, DIMENSION), \"53\")).isEqualTo(\"53dp\");\n    assertThat(Quantity.addUnit(mockProperty(ATTR_LAYOUT_WIDTH, DIMENSION), \"53px\")).isEqualTo(\"53px\");\n    assertThat(Quantity.addUnit(mockProperty(ATTR_LAYOUT_WIDTH, DIMENSION), \"wrap_content\")).isEqualTo(\"wrap_content\");\n    assertThat(Quantity.addUnit(mockProperty(ATTR_TEXT, STRING), \"13\")).isEqualTo(\"13\");\n    assertThat(Quantity.addUnit(mockProperty(ATTR_MIN_SDK_VERSION, INTEGER), \"22\")).isEqualTo(\"22\");\n  }", "signature": "void testAddUnit()", "full_signature": "@Test public void testAddUnit()", "class_method_signature": "QuantityTest.testAddUnit()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "addUnit", "mockProperty", "isEqualTo", "assertThat", "addUnit", "mockProperty", "isEqualTo", "assertThat", "addUnit", "mockProperty", "isEqualTo", "assertThat", "addUnit", "mockProperty", "isEqualTo", "assertThat", "addUnit", "mockProperty", "isEqualTo", "assertThat", "addUnit", "mockProperty", "isEqualTo", "assertThat", "addUnit", "mockProperty"]}, "focal_class": {"identifier": "Quantity", "superclass": "", "interfaces": "implements Comparable<Quantity>", "fields": [{"original_string": "private static final Pattern QUANTITY_PATTERN = Pattern.compile(\"^(-?\\\\d+(\\\\.\\\\d+)?)(.*)$\");", "modifier": "private static final", "type": "Pattern", "declarator": "QUANTITY_PATTERN = Pattern.compile(\"^(-?\\\\d+(\\\\.\\\\d+)?)(.*)$\")", "var_name": "QUANTITY_PATTERN"}, {"original_string": "private final int myValue;", "modifier": "private final", "type": "int", "declarator": "myValue", "var_name": "myValue"}, {"original_string": "private final String myUnit;", "modifier": "private final", "type": "String", "declarator": "myUnit", "var_name": "myUnit"}], "methods": [{"identifier": "parse", "parameters": "(@NotNull String value)", "modifiers": "@Nullable public static", "return": "Quantity", "signature": "Quantity parse(@NotNull String value)", "full_signature": "@Nullable public static Quantity parse(@NotNull String value)", "class_method_signature": "Quantity.parse(@NotNull String value)", "testcase": false, "constructor": false}, {"identifier": "addUnit", "parameters": "(@NotNull NlProperty property, @NotNull String value)", "modifiers": "@NotNull public static", "return": "String", "signature": "String addUnit(@NotNull NlProperty property, @NotNull String value)", "full_signature": "@NotNull public static String addUnit(@NotNull NlProperty property, @NotNull String value)", "class_method_signature": "Quantity.addUnit(@NotNull NlProperty property, @NotNull String value)", "testcase": false, "constructor": false}, {"identifier": "addUnit", "parameters": "(@NotNull ResourceType type, @NotNull String value)", "modifiers": "public static", "return": "String", "signature": "String addUnit(@NotNull ResourceType type, @NotNull String value)", "full_signature": "public static String addUnit(@NotNull ResourceType type, @NotNull String value)", "class_method_signature": "Quantity.addUnit(@NotNull ResourceType type, @NotNull String value)", "testcase": false, "constructor": false}, {"identifier": "Quantity", "parameters": "(int value, @NotNull String unit)", "modifiers": "private", "return": "", "signature": " Quantity(int value, @NotNull String unit)", "full_signature": "private  Quantity(int value, @NotNull String unit)", "class_method_signature": "Quantity.Quantity(int value, @NotNull String unit)", "testcase": false, "constructor": true}, {"identifier": "getValue", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getValue()", "full_signature": "public int getValue()", "class_method_signature": "Quantity.getValue()", "testcase": false, "constructor": false}, {"identifier": "getUnit", "parameters": "()", "modifiers": "@NotNull public", "return": "String", "signature": "String getUnit()", "full_signature": "@NotNull public String getUnit()", "class_method_signature": "Quantity.getUnit()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(@Nullable Quantity other)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(@Nullable Quantity other)", "full_signature": "@Override public int compareTo(@Nullable Quantity other)", "class_method_signature": "Quantity.compareTo(@Nullable Quantity other)", "testcase": false, "constructor": false}], "file": "designer/src/com/android/tools/idea/uibuilder/property/editors/support/Quantity.java"}, "focal_method": {"identifier": "addUnit", "parameters": "(@NotNull NlProperty property, @NotNull String value)", "modifiers": "@NotNull public static", "return": "String", "body": "@NotNull\n  public static String addUnit(@NotNull NlProperty property, @NotNull String value) {\n    AttributeDefinition definition = property.getDefinition();\n    boolean isDimension = definition != null && definition.getFormats().contains(AttributeFormat.DIMENSION);\n    if (!isDimension) {\n      return value;\n    }\n    Quantity quantity = parse(value);\n    if (quantity == null || !quantity.myUnit.isEmpty()) {\n      return value;\n    }\n    switch (property.getName()) {\n      case SdkConstants.ATTR_TEXT_SIZE:\n      case SdkConstants.ATTR_LINE_SPACING_EXTRA:\n        return quantity.myValue + SdkConstants.UNIT_SP;\n      default:\n        return quantity.myValue + SdkConstants.UNIT_DP;\n    }\n  }", "signature": "String addUnit(@NotNull NlProperty property, @NotNull String value)", "full_signature": "@NotNull public static String addUnit(@NotNull NlProperty property, @NotNull String value)", "class_method_signature": "Quantity.addUnit(@NotNull NlProperty property, @NotNull String value)", "testcase": false, "constructor": false, "invocations": ["getDefinition", "contains", "getFormats", "parse", "isEmpty", "getName"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}