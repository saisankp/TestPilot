{"test_class": {"identifier": "SchedulerAdapterTest", "superclass": "extends SchedulerTestBase", "interfaces": "", "fields": [{"original_string": "private static final String JAVALISTENER = \"javaListener\";", "modifier": "private static final", "type": "String", "declarator": "JAVALISTENER = \"javaListener\"", "var_name": "JAVALISTENER"}, {"original_string": "private static final String CORRELATIONID = \"correlationId\";", "modifier": "private static final", "type": "String", "declarator": "CORRELATIONID = \"correlationId\"", "var_name": "CORRELATIONID"}, {"original_string": "private static final String MESSAGE = \"message\";", "modifier": "private static final", "type": "String", "declarator": "MESSAGE = \"message\"", "var_name": "MESSAGE"}, {"original_string": "private SchedulerAdapter schedulerAdapter;", "modifier": "private", "type": "SchedulerAdapter", "declarator": "schedulerAdapter", "var_name": "schedulerAdapter"}], "file": "core/src/test/java/nl/nn/adapterframework/scheduler/SchedulerAdapterTest.java"}, "test_case": {"identifier": "testGetSchedulerCalendarNamesToXml", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetSchedulerCalendarNamesToXml() throws SchedulerException {\n\t\tschedulerHelper.getScheduler().addCalendar(\"DummyCalendar A\", new HolidayCalendar(), false, false);\n\t\tschedulerHelper.getScheduler().addCalendar(\"DummyCalendar B\", new HolidayCalendar(), false, false);\n\n\t\tString result = schedulerAdapter.getSchedulerCalendarNamesToXml(schedulerHelper.getScheduler()).toXML();\n\t\tassertTrue(result.contains(\"DummyCalendar A\") && result.contains(\"DummyCalendar B\"));\n\t}", "signature": "void testGetSchedulerCalendarNamesToXml()", "full_signature": "@Test public void testGetSchedulerCalendarNamesToXml()", "class_method_signature": "SchedulerAdapterTest.testGetSchedulerCalendarNamesToXml()", "testcase": true, "constructor": false, "invocations": ["addCalendar", "getScheduler", "addCalendar", "getScheduler", "toXML", "getSchedulerCalendarNamesToXml", "getScheduler", "assertTrue", "contains", "contains"]}, "focal_class": {"identifier": "SchedulerAdapter", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected Logger log=LogUtil.getLogger(this);", "modifier": "protected", "type": "Logger", "declarator": "log=LogUtil.getLogger(this)", "var_name": "log"}, {"original_string": "private DecimalFormat tf=new DecimalFormat(ItemList.PRINT_FORMAT_TIME);", "modifier": "private", "type": "DecimalFormat", "declarator": "tf=new DecimalFormat(ItemList.PRINT_FORMAT_TIME)", "var_name": "tf"}, {"original_string": "private DecimalFormat pf=new DecimalFormat(ItemList.PRINT_FORMAT_PERC);", "modifier": "private", "type": "DecimalFormat", "declarator": "pf=new DecimalFormat(ItemList.PRINT_FORMAT_PERC)", "var_name": "pf"}], "methods": [{"identifier": "getJobGroupNamesWithJobsToXml", "parameters": "(Scheduler theScheduler, IbisManager ibisManager)", "modifiers": "public", "return": "XmlBuilder", "signature": "XmlBuilder getJobGroupNamesWithJobsToXml(Scheduler theScheduler, IbisManager ibisManager)", "full_signature": "public XmlBuilder getJobGroupNamesWithJobsToXml(Scheduler theScheduler, IbisManager ibisManager)", "class_method_signature": "SchedulerAdapter.getJobGroupNamesWithJobsToXml(Scheduler theScheduler, IbisManager ibisManager)", "testcase": false, "constructor": false}, {"identifier": "getJobTriggers", "parameters": "(List<? extends Trigger> triggers)", "modifiers": "public", "return": "XmlBuilder", "signature": "XmlBuilder getJobTriggers(List<? extends Trigger> triggers)", "full_signature": "public XmlBuilder getJobTriggers(List<? extends Trigger> triggers)", "class_method_signature": "SchedulerAdapter.getJobTriggers(List<? extends Trigger> triggers)", "testcase": false, "constructor": false}, {"identifier": "getJobMessages", "parameters": "(JobDef jobdef)", "modifiers": "public", "return": "XmlBuilder", "signature": "XmlBuilder getJobMessages(JobDef jobdef)", "full_signature": "public XmlBuilder getJobMessages(JobDef jobdef)", "class_method_signature": "SchedulerAdapter.getJobMessages(JobDef jobdef)", "testcase": false, "constructor": false}, {"identifier": "getJobRunStatistics", "parameters": "(JobDef jobdef)", "modifiers": "public", "return": "XmlBuilder", "signature": "XmlBuilder getJobRunStatistics(JobDef jobdef)", "full_signature": "public XmlBuilder getJobRunStatistics(JobDef jobdef)", "class_method_signature": "SchedulerAdapter.getJobRunStatistics(JobDef jobdef)", "testcase": false, "constructor": false}, {"identifier": "getSchedulerCalendarNamesToXml", "parameters": "(Scheduler theScheduler)", "modifiers": "public", "return": "XmlBuilder", "signature": "XmlBuilder getSchedulerCalendarNamesToXml(Scheduler theScheduler)", "full_signature": "public XmlBuilder getSchedulerCalendarNamesToXml(Scheduler theScheduler)", "class_method_signature": "SchedulerAdapter.getSchedulerCalendarNamesToXml(Scheduler theScheduler)", "testcase": false, "constructor": false}, {"identifier": "getSchedulerMetaDataToXml", "parameters": "(Scheduler theScheduler)", "modifiers": "public", "return": "XmlBuilder", "signature": "XmlBuilder getSchedulerMetaDataToXml(Scheduler theScheduler)", "full_signature": "public XmlBuilder getSchedulerMetaDataToXml(Scheduler theScheduler)", "class_method_signature": "SchedulerAdapter.getSchedulerMetaDataToXml(Scheduler theScheduler)", "testcase": false, "constructor": false}, {"identifier": "jobDataMapToXmlBuilder", "parameters": "(JobDataMap jd)", "modifiers": "public", "return": "XmlBuilder", "signature": "XmlBuilder jobDataMapToXmlBuilder(JobDataMap jd)", "full_signature": "public XmlBuilder jobDataMapToXmlBuilder(JobDataMap jd)", "class_method_signature": "SchedulerAdapter.jobDataMapToXmlBuilder(JobDataMap jd)", "testcase": false, "constructor": false}, {"identifier": "jobDetailToXmlBuilder", "parameters": "(JobDetail jobDetail)", "modifiers": "public", "return": "XmlBuilder", "signature": "XmlBuilder jobDetailToXmlBuilder(JobDetail jobDetail)", "full_signature": "public XmlBuilder jobDetailToXmlBuilder(JobDetail jobDetail)", "class_method_signature": "SchedulerAdapter.jobDetailToXmlBuilder(JobDetail jobDetail)", "testcase": false, "constructor": false}, {"identifier": "triggerToXmlBuilder", "parameters": "(Trigger trigger)", "modifiers": "public", "return": "XmlBuilder", "signature": "XmlBuilder triggerToXmlBuilder(Trigger trigger)", "full_signature": "public XmlBuilder triggerToXmlBuilder(Trigger trigger)", "class_method_signature": "SchedulerAdapter.triggerToXmlBuilder(Trigger trigger)", "testcase": false, "constructor": false}, {"identifier": "convertDate", "parameters": "(Date date)", "modifiers": "private", "return": "String", "signature": "String convertDate(Date date)", "full_signature": "private String convertDate(Date date)", "class_method_signature": "SchedulerAdapter.convertDate(Date date)", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/scheduler/SchedulerAdapter.java"}, "focal_method": {"identifier": "getSchedulerCalendarNamesToXml", "parameters": "(Scheduler theScheduler)", "modifiers": "public", "return": "XmlBuilder", "body": "public XmlBuilder getSchedulerCalendarNamesToXml(Scheduler theScheduler) {\n        XmlBuilder xbRoot = new XmlBuilder(\"schedulerCalendars\");\n\n        try {\n            List<String> names = theScheduler.getCalendarNames();\n\n            for (int i = 0; i < names.size(); i++) {\n                XmlBuilder el = new XmlBuilder(\"calendar\");\n\n                el.setValue(names.get(i));\n                xbRoot.addSubElement(el);\n            }\n        } catch (SchedulerException se) {\n            log.error(se.toString());\n        }\n        return xbRoot;\n    }", "signature": "XmlBuilder getSchedulerCalendarNamesToXml(Scheduler theScheduler)", "full_signature": "public XmlBuilder getSchedulerCalendarNamesToXml(Scheduler theScheduler)", "class_method_signature": "SchedulerAdapter.getSchedulerCalendarNamesToXml(Scheduler theScheduler)", "testcase": false, "constructor": false, "invocations": ["getCalendarNames", "size", "setValue", "get", "addSubElement", "error", "toString"]}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}