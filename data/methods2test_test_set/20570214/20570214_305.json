{"test_class": {"identifier": "HkdfTest", "superclass": "", "interfaces": "", "fields": [], "file": "java_src/src/test/java/com/google/crypto/tink/subtle/HkdfTest.java"}, "test_case": {"identifier": "testNullSaltOrInfo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testNullSaltOrInfo() throws Exception {\n    byte[] ikm = Random.randBytes(20);\n    byte[] info = Random.randBytes(20);\n    int size = 40;\n\n    byte[] hkdfWithNullSalt = Hkdf.computeHkdf(\"HmacSha256\", ikm, null, info, size);\n    byte[] hkdfWithEmptySalt =  Hkdf.computeHkdf(\"HmacSha256\", ikm, new byte[0], info, size);\n    assertArrayEquals(hkdfWithNullSalt, hkdfWithEmptySalt);\n\n    byte[] salt = Random.randBytes(20);\n    byte[] hkdfWithNullInfo = Hkdf.computeHkdf(\"HmacSha256\", ikm, salt, null, size);\n    byte[] hkdfWithEmptyInfo =  Hkdf.computeHkdf(\"HmacSha256\", ikm, salt, new byte[0], size);\n    assertArrayEquals(hkdfWithNullInfo, hkdfWithEmptyInfo);\n  }", "signature": "void testNullSaltOrInfo()", "full_signature": "@Test public void testNullSaltOrInfo()", "class_method_signature": "HkdfTest.testNullSaltOrInfo()", "testcase": true, "constructor": false, "invocations": ["randBytes", "randBytes", "computeHkdf", "computeHkdf", "assertArrayEquals", "randBytes", "computeHkdf", "computeHkdf", "assertArrayEquals"]}, "focal_class": {"identifier": "Hkdf", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "computeHkdf", "parameters": "(\n      String macAlgorithm, final byte[] ikm, final byte[] salt, final byte[] info, int size)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] computeHkdf(\n      String macAlgorithm, final byte[] ikm, final byte[] salt, final byte[] info, int size)", "full_signature": "public static byte[] computeHkdf(\n      String macAlgorithm, final byte[] ikm, final byte[] salt, final byte[] info, int size)", "class_method_signature": "Hkdf.computeHkdf(\n      String macAlgorithm, final byte[] ikm, final byte[] salt, final byte[] info, int size)", "testcase": false, "constructor": false}, {"identifier": "computeEciesHkdfSymmetricKey", "parameters": "(\n      final byte[] ephemeralPublicKeyBytes,\n      final byte[] sharedSecret,\n      String hmacAlgo,\n      final byte[] hkdfSalt,\n      final byte[] hkdfInfo,\n      int keySizeInBytes)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] computeEciesHkdfSymmetricKey(\n      final byte[] ephemeralPublicKeyBytes,\n      final byte[] sharedSecret,\n      String hmacAlgo,\n      final byte[] hkdfSalt,\n      final byte[] hkdfInfo,\n      int keySizeInBytes)", "full_signature": "public static byte[] computeEciesHkdfSymmetricKey(\n      final byte[] ephemeralPublicKeyBytes,\n      final byte[] sharedSecret,\n      String hmacAlgo,\n      final byte[] hkdfSalt,\n      final byte[] hkdfInfo,\n      int keySizeInBytes)", "class_method_signature": "Hkdf.computeEciesHkdfSymmetricKey(\n      final byte[] ephemeralPublicKeyBytes,\n      final byte[] sharedSecret,\n      String hmacAlgo,\n      final byte[] hkdfSalt,\n      final byte[] hkdfInfo,\n      int keySizeInBytes)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/subtle/Hkdf.java"}, "focal_method": {"identifier": "computeHkdf", "parameters": "(\n      String macAlgorithm, final byte[] ikm, final byte[] salt, final byte[] info, int size)", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] computeHkdf(\n      String macAlgorithm, final byte[] ikm, final byte[] salt, final byte[] info, int size)\n      throws GeneralSecurityException {\n    Mac mac = EngineFactory.MAC.getInstance(macAlgorithm);\n    if (size > 255 * mac.getMacLength()) {\n      throw new GeneralSecurityException(\"size too large\");\n    }\n    if (salt == null || salt.length == 0) {\n      // According to RFC 5869, Section 2.2 the salt is optional. If no salt is provided\n      // then HKDF uses a salt that is an array of zeros of the same length as the hash digest.\n      mac.init(new SecretKeySpec(new byte[mac.getMacLength()], macAlgorithm));\n    } else {\n      mac.init(new SecretKeySpec(salt, macAlgorithm));\n    }\n    byte[] prk = mac.doFinal(ikm);\n    byte[] result = new byte[size];\n    int ctr = 1;\n    int pos = 0;\n    mac.init(new SecretKeySpec(prk, macAlgorithm));\n    byte[] digest = new byte[0];\n    while (true) {\n      mac.update(digest);\n      mac.update(info);\n      mac.update((byte) ctr);\n      digest = mac.doFinal();\n      if (pos + digest.length < size) {\n        System.arraycopy(digest, 0, result, pos, digest.length);\n        pos += digest.length;\n        ctr++;\n      } else {\n        System.arraycopy(digest, 0, result, pos, size - pos);\n        break;\n      }\n    }\n    return result;\n  }", "signature": "byte[] computeHkdf(\n      String macAlgorithm, final byte[] ikm, final byte[] salt, final byte[] info, int size)", "full_signature": "public static byte[] computeHkdf(\n      String macAlgorithm, final byte[] ikm, final byte[] salt, final byte[] info, int size)", "class_method_signature": "Hkdf.computeHkdf(\n      String macAlgorithm, final byte[] ikm, final byte[] salt, final byte[] info, int size)", "testcase": false, "constructor": false, "invocations": ["getInstance", "getMacLength", "init", "getMacLength", "init", "doFinal", "init", "update", "update", "update", "doFinal", "arraycopy", "arraycopy"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}