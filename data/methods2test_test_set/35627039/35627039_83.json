{"test_class": {"identifier": "MergeTransformRuntimeTest", "superclass": "", "interfaces": "", "fields": [], "file": "streams/runtime/src/test/java/com/hortonworks/streamline/streams/runtime/transform/MergeTransformRuntimeTest.java"}, "test_case": {"identifier": "testExecute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecute() throws Exception {\n        Map<String, Object> fieldsAndValues = new HashMap<>();\n        fieldsAndValues.put(\"1\", \"one\");\n        fieldsAndValues.put(\"2\", \"two\");\n\n        Map<String, String> defaults = new HashMap<>();\n        defaults.put(\"2\", \"TWO\");\n        defaults.put(\"3\", \"THREE\");\n\n        StreamlineEvent event = StreamlineEventImpl.builder().fieldsAndValues(fieldsAndValues).dataSourceId(\"dsrcid\").build();\n        TransformRuntime transformRuntime = new MergeTransformRuntime(new MergeTransform(defaults));\n        List<StreamlineEvent> result = transformRuntime.execute(event);\n        System.out.println(result);\n        assertEquals(1, result.size());\n        assertEquals(\"two\", result.get(0).get(\"2\"));\n        assertEquals(\"THREE\", result.get(0).get(\"3\"));\n    }", "signature": "void testExecute()", "full_signature": "@Test public void testExecute()", "class_method_signature": "MergeTransformRuntimeTest.testExecute()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "put", "build", "dataSourceId", "fieldsAndValues", "builder", "execute", "println", "assertEquals", "size", "assertEquals", "get", "get", "assertEquals", "get", "get"]}, "focal_class": {"identifier": "MergeTransformRuntime", "superclass": "", "interfaces": "implements TransformRuntime", "fields": [{"original_string": "private final MergeTransform mergeTransform;", "modifier": "private final", "type": "MergeTransform", "declarator": "mergeTransform", "var_name": "mergeTransform"}], "methods": [{"identifier": "MergeTransformRuntime", "parameters": "(MergeTransform mergeTransform)", "modifiers": "public", "return": "", "signature": " MergeTransformRuntime(MergeTransform mergeTransform)", "full_signature": "public  MergeTransformRuntime(MergeTransform mergeTransform)", "class_method_signature": "MergeTransformRuntime.MergeTransformRuntime(MergeTransform mergeTransform)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(StreamlineEvent input)", "modifiers": "@Override public", "return": "List<StreamlineEvent>", "signature": "List<StreamlineEvent> execute(StreamlineEvent input)", "full_signature": "@Override public List<StreamlineEvent> execute(StreamlineEvent input)", "class_method_signature": "MergeTransformRuntime.execute(StreamlineEvent input)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "MergeTransformRuntime.toString()", "testcase": false, "constructor": false}], "file": "streams/runtime/src/main/java/com/hortonworks/streamline/streams/runtime/transform/MergeTransformRuntime.java"}, "focal_method": {"identifier": "execute", "parameters": "(StreamlineEvent input)", "modifiers": "@Override public", "return": "List<StreamlineEvent>", "body": "@Override\n    public List<StreamlineEvent> execute(StreamlineEvent input) {\n        StreamlineEventImpl.Builder builder = StreamlineEventImpl.builder();\n        builder.putAll(input);\n        for (Map.Entry<String, ?> entry : mergeTransform.getDefaults().entrySet()) {\n            if (!input.containsKey(entry.getKey())) {\n                builder.put(entry.getKey(), entry.getValue());\n            }\n        }\n        return Collections.<StreamlineEvent>singletonList(builder.dataSourceId(input.getDataSourceId()).build());\n    }", "signature": "List<StreamlineEvent> execute(StreamlineEvent input)", "full_signature": "@Override public List<StreamlineEvent> execute(StreamlineEvent input)", "class_method_signature": "MergeTransformRuntime.execute(StreamlineEvent input)", "testcase": false, "constructor": false, "invocations": ["builder", "putAll", "entrySet", "getDefaults", "containsKey", "getKey", "put", "getKey", "getValue", "singletonList", "build", "dataSourceId", "getDataSourceId"]}, "repository": {"repo_id": 35627039, "url": "https://github.com/hortonworks/streamline", "language": "Java", "is_fork": false, "fork_count": 94, "stargazer_count": 147, "size": 69226, "license": "licensed"}}