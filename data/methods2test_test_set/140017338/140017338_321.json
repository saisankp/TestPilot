{"test_class": {"identifier": "ZipExtractorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TemporaryFolder temporaryFolder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "temporaryFolder = new TemporaryFolder()", "var_name": "temporaryFolder"}], "file": "core/runtime/src/test/java/org/eclipse/sw360/antenna/util/ZipExtractorTest.java"}, "test_case": {"identifier": "testZipExtractor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testZipExtractor() throws IOException {\n        File zipFileFolder = temporaryFolder.newFolder();\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"Test String\");\n\n        File zipFile = zipFileFolder.toPath().resolve(\"zipFile.zip\").toFile();\n\n        try (FileOutputStream fos = new FileOutputStream(zipFile);\n             ZipOutputStream out = new ZipOutputStream(fos)) {\n            ZipEntry e = new ZipEntry(\"testText.txt\");\n            out.putNextEntry(e);\n\n            byte[] data = sb.toString().getBytes();\n            out.write(data, 0, data.length);\n            out.closeEntry();\n        }\n\n        File unzipFolder = temporaryFolder.newFolder();\n\n        ZipExtractor.extractAll(zipFile, unzipFolder);\n\n        assertThat(unzipFolder.list()).contains(\"testText.txt\");\n        assertThat(Files.readAllLines(Paths.get(unzipFolder.toString(), \"testText.txt\"))).containsExactly(\"Test String\");\n    }", "signature": "void testZipExtractor()", "full_signature": "@Test public void testZipExtractor()", "class_method_signature": "ZipExtractorTest.testZipExtractor()", "testcase": true, "constructor": false, "invocations": ["newFolder", "append", "toFile", "resolve", "toPath", "putNextEntry", "getBytes", "toString", "write", "closeEntry", "newFolder", "extractAll", "contains", "assertThat", "list", "containsExactly", "assertThat", "readAllLines", "get", "toString"]}, "focal_class": {"identifier": "ZipExtractor", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "extractAll", "parameters": "(File zipFile, File destination)", "modifiers": "public static", "return": "void", "signature": "void extractAll(File zipFile, File destination)", "full_signature": "public static void extractAll(File zipFile, File destination)", "class_method_signature": "ZipExtractor.extractAll(File zipFile, File destination)", "testcase": false, "constructor": false}, {"identifier": "extractEntry", "parameters": "(File destination, ZipInputStream zipInputStream, byte[] buffer, ZipEntry zipEntry)", "modifiers": "private static", "return": "void", "signature": "void extractEntry(File destination, ZipInputStream zipInputStream, byte[] buffer, ZipEntry zipEntry)", "full_signature": "private static void extractEntry(File destination, ZipInputStream zipInputStream, byte[] buffer, ZipEntry zipEntry)", "class_method_signature": "ZipExtractor.extractEntry(File destination, ZipInputStream zipInputStream, byte[] buffer, ZipEntry zipEntry)", "testcase": false, "constructor": false}, {"identifier": "newFile", "parameters": "(File destinationDirectory, ZipEntry zipEntry)", "modifiers": "private static", "return": "File", "signature": "File newFile(File destinationDirectory, ZipEntry zipEntry)", "full_signature": "private static File newFile(File destinationDirectory, ZipEntry zipEntry)", "class_method_signature": "ZipExtractor.newFile(File destinationDirectory, ZipEntry zipEntry)", "testcase": false, "constructor": false}, {"identifier": "createFile", "parameters": "(ZipEntry zipEntry, File newFile)", "modifiers": "private static", "return": "void", "signature": "void createFile(ZipEntry zipEntry, File newFile)", "full_signature": "private static void createFile(ZipEntry zipEntry, File newFile)", "class_method_signature": "ZipExtractor.createFile(ZipEntry zipEntry, File newFile)", "testcase": false, "constructor": false}], "file": "core/runtime/src/main/java/org/eclipse/sw360/antenna/util/ZipExtractor.java"}, "focal_method": {"identifier": "extractAll", "parameters": "(File zipFile, File destination)", "modifiers": "public static", "return": "void", "body": "public static void extractAll(File zipFile, File destination) throws IOException {\n        try (FileInputStream fs = new FileInputStream(zipFile.toString());\n             ZipInputStream zipInputStream = new ZipInputStream(fs)) {\n\n            byte[] buffer = new byte[1024];\n            ZipEntry zipEntry = zipInputStream.getNextEntry();\n            while (zipEntry != null) {\n                extractEntry(destination.toPath().normalize().toFile(), zipInputStream, buffer, zipEntry);\n                zipEntry = zipInputStream.getNextEntry();\n            }\n        }\n    }", "signature": "void extractAll(File zipFile, File destination)", "full_signature": "public static void extractAll(File zipFile, File destination)", "class_method_signature": "ZipExtractor.extractAll(File zipFile, File destination)", "testcase": false, "constructor": false, "invocations": ["toString", "getNextEntry", "extractEntry", "toFile", "normalize", "toPath", "getNextEntry"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}