{"test_class": {"identifier": "AbstractGraphConverterTest", "superclass": "", "interfaces": "", "fields": [], "file": "artemis-graph/src/test/java/org/jnosql/artemis/graph/AbstractGraphConverterTest.java"}, "test_case": {"identifier": "shouldReturnToEdgeErrorWhenIsNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnToEdgeErrorWhenIsNull() {\n        assertThrows(NullPointerException.class, () -> getConverter().toEdge(null));\n    }", "signature": "void shouldReturnToEdgeErrorWhenIsNull()", "full_signature": "@Test public void shouldReturnToEdgeErrorWhenIsNull()", "class_method_signature": "AbstractGraphConverterTest.shouldReturnToEdgeErrorWhenIsNull()", "testcase": true, "constructor": false, "invocations": ["assertThrows", "toEdge", "getConverter"]}, "focal_class": {"identifier": "AbstractGraphConverter", "superclass": "", "interfaces": "implements GraphConverter", "fields": [], "methods": [{"identifier": "getClassMappings", "parameters": "()", "modifiers": "protected abstract", "return": "ClassMappings", "signature": "ClassMappings getClassMappings()", "full_signature": "protected abstract ClassMappings getClassMappings()", "class_method_signature": "AbstractGraphConverter.getClassMappings()", "testcase": false, "constructor": false}, {"identifier": "getConverters", "parameters": "()", "modifiers": "protected abstract", "return": "Converters", "signature": "Converters getConverters()", "full_signature": "protected abstract Converters getConverters()", "class_method_signature": "AbstractGraphConverter.getConverters()", "testcase": false, "constructor": false}, {"identifier": "getGraph", "parameters": "()", "modifiers": "protected abstract", "return": "Graph", "signature": "Graph getGraph()", "full_signature": "protected abstract Graph getGraph()", "class_method_signature": "AbstractGraphConverter.getGraph()", "testcase": false, "constructor": false}, {"identifier": "toVertex", "parameters": "(T entity)", "modifiers": "@Override public", "return": "Vertex", "signature": "Vertex toVertex(T entity)", "full_signature": "@Override public Vertex toVertex(T entity)", "class_method_signature": "AbstractGraphConverter.toVertex(T entity)", "testcase": false, "constructor": false}, {"identifier": "getProperties", "parameters": "(T entity)", "modifiers": "@Override public", "return": "List<Property<?>>", "signature": "List<Property<?>> getProperties(T entity)", "full_signature": "@Override public List<Property<?>> getProperties(T entity)", "class_method_signature": "AbstractGraphConverter.getProperties(T entity)", "testcase": false, "constructor": false}, {"identifier": "toEntity", "parameters": "(Vertex vertex)", "modifiers": "@Override public", "return": "T", "signature": "T toEntity(Vertex vertex)", "full_signature": "@Override public T toEntity(Vertex vertex)", "class_method_signature": "AbstractGraphConverter.toEntity(Vertex vertex)", "testcase": false, "constructor": false}, {"identifier": "toEntity", "parameters": "(Class<T> entityClass, Vertex vertex)", "modifiers": "@Override public", "return": "T", "signature": "T toEntity(Class<T> entityClass, Vertex vertex)", "full_signature": "@Override public T toEntity(Class<T> entityClass, Vertex vertex)", "class_method_signature": "AbstractGraphConverter.toEntity(Class<T> entityClass, Vertex vertex)", "testcase": false, "constructor": false}, {"identifier": "toEntity", "parameters": "(T entityInstance, Vertex vertex)", "modifiers": "@Override public", "return": "T", "signature": "T toEntity(T entityInstance, Vertex vertex)", "full_signature": "@Override public T toEntity(T entityInstance, Vertex vertex)", "class_method_signature": "AbstractGraphConverter.toEntity(T entityInstance, Vertex vertex)", "testcase": false, "constructor": false}, {"identifier": "toEdgeEntity", "parameters": "(Edge edge)", "modifiers": "@Override public", "return": "EdgeEntity", "signature": "EdgeEntity toEdgeEntity(Edge edge)", "full_signature": "@Override public EdgeEntity toEdgeEntity(Edge edge)", "class_method_signature": "AbstractGraphConverter.toEdgeEntity(Edge edge)", "testcase": false, "constructor": false}, {"identifier": "toEdge", "parameters": "(EdgeEntity edge)", "modifiers": "@Override public", "return": "Edge", "signature": "Edge toEdge(EdgeEntity edge)", "full_signature": "@Override public Edge toEdge(EdgeEntity edge)", "class_method_signature": "AbstractGraphConverter.toEdge(EdgeEntity edge)", "testcase": false, "constructor": false}, {"identifier": "feedId", "parameters": "(Vertex vertex, T entity)", "modifiers": "private", "return": "void", "signature": "void feedId(Vertex vertex, T entity)", "full_signature": "private void feedId(Vertex vertex, T entity)", "class_method_signature": "AbstractGraphConverter.feedId(Vertex vertex, T entity)", "testcase": false, "constructor": false}, {"identifier": "toEntity", "parameters": "(Class<T> entityClass, List<Property> properties)", "modifiers": "private", "return": "T", "signature": "T toEntity(Class<T> entityClass, List<Property> properties)", "full_signature": "private T toEntity(Class<T> entityClass, List<Property> properties)", "class_method_signature": "AbstractGraphConverter.toEntity(Class<T> entityClass, List<Property> properties)", "testcase": false, "constructor": false}, {"identifier": "convertEntity", "parameters": "(List<Property> elements, ClassMapping mapping, T instance)", "modifiers": "private", "return": "T", "signature": "T convertEntity(List<Property> elements, ClassMapping mapping, T instance)", "full_signature": "private T convertEntity(List<Property> elements, ClassMapping mapping, T instance)", "class_method_signature": "AbstractGraphConverter.convertEntity(List<Property> elements, ClassMapping mapping, T instance)", "testcase": false, "constructor": false}, {"identifier": "feedObject", "parameters": "(T instance, List<Property> elements,\n                                            Map<String, FieldMapping> fieldsGroupByName)", "modifiers": "private", "return": "Consumer<String>", "signature": "Consumer<String> feedObject(T instance, List<Property> elements,\n                                            Map<String, FieldMapping> fieldsGroupByName)", "full_signature": "private Consumer<String> feedObject(T instance, List<Property> elements,\n                                            Map<String, FieldMapping> fieldsGroupByName)", "class_method_signature": "AbstractGraphConverter.feedObject(T instance, List<Property> elements,\n                                            Map<String, FieldMapping> fieldsGroupByName)", "testcase": false, "constructor": false}, {"identifier": "setSingleField", "parameters": "(T instance, Optional<Property> element, FieldMapping field)", "modifiers": "private", "return": "void", "signature": "void setSingleField(T instance, Optional<Property> element, FieldMapping field)", "full_signature": "private void setSingleField(T instance, Optional<Property> element, FieldMapping field)", "class_method_signature": "AbstractGraphConverter.setSingleField(T instance, Optional<Property> element, FieldMapping field)", "testcase": false, "constructor": false}, {"identifier": "setEmbeddedField", "parameters": "(T instance, List<Property> elements,\n                                      FieldMapping field)", "modifiers": "private", "return": "void", "signature": "void setEmbeddedField(T instance, List<Property> elements,\n                                      FieldMapping field)", "full_signature": "private void setEmbeddedField(T instance, List<Property> elements,\n                                      FieldMapping field)", "class_method_signature": "AbstractGraphConverter.setEmbeddedField(T instance, List<Property> elements,\n                                      FieldMapping field)", "testcase": false, "constructor": false}, {"identifier": "to", "parameters": "(FieldMapping field, Object entityInstance)", "modifiers": "protected", "return": "FieldGraph", "signature": "FieldGraph to(FieldMapping field, Object entityInstance)", "full_signature": "protected FieldGraph to(FieldMapping field, Object entityInstance)", "class_method_signature": "AbstractGraphConverter.to(FieldMapping field, Object entityInstance)", "testcase": false, "constructor": false}], "file": "artemis-graph/src/main/java/org/jnosql/artemis/graph/AbstractGraphConverter.java"}, "focal_method": {"identifier": "toEdge", "parameters": "(EdgeEntity edge)", "modifiers": "@Override public", "return": "Edge", "body": "@Override\n    public Edge toEdge(EdgeEntity edge) {\n        requireNonNull(edge, \"vertex is required\");\n        Object id = edge.getId().get();\n        Iterator<Edge> edges = getGraph().edges(id);\n        if (edges.hasNext()) {\n            return edges.next();\n        }\n        throw new EntityNotFoundException(\"Edge does not found in the database with id: \" + id);\n    }", "signature": "Edge toEdge(EdgeEntity edge)", "full_signature": "@Override public Edge toEdge(EdgeEntity edge)", "class_method_signature": "AbstractGraphConverter.toEdge(EdgeEntity edge)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "get", "getId", "edges", "getGraph", "hasNext", "next"]}, "repository": {"repo_id": 67588628, "url": "https://github.com/eclipse/jnosql-artemis", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 43, "size": 2612, "license": "licensed"}}