{"test_class": {"identifier": "HeapDumpSampleDataSeriesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final HeapDumpInfo INFO1 = HeapDumpInfo.newBuilder()\n    .setStartTime(TimeUnit.MICROSECONDS.toNanos(2))\n    .setEndTime(TimeUnit.MICROSECONDS.toNanos(7))\n    .build();", "modifier": "private static final", "type": "HeapDumpInfo", "declarator": "INFO1 = HeapDumpInfo.newBuilder()\n    .setStartTime(TimeUnit.MICROSECONDS.toNanos(2))\n    .setEndTime(TimeUnit.MICROSECONDS.toNanos(7))\n    .build()", "var_name": "INFO1"}, {"original_string": "private static final HeapDumpInfo INFO2 = HeapDumpInfo.newBuilder()\n    .setStartTime(TimeUnit.MICROSECONDS.toNanos(17))\n    .setEndTime(Long.MAX_VALUE)\n    .build();", "modifier": "private static final", "type": "HeapDumpInfo", "declarator": "INFO2 = HeapDumpInfo.newBuilder()\n    .setStartTime(TimeUnit.MICROSECONDS.toNanos(17))\n    .setEndTime(Long.MAX_VALUE)\n    .build()", "var_name": "INFO2"}, {"original_string": "private final FakeTimer myTimer = new FakeTimer();", "modifier": "private final", "type": "FakeTimer", "declarator": "myTimer = new FakeTimer()", "var_name": "myTimer"}, {"original_string": "private final FakeTransportService myTransportService = new FakeTransportService(myTimer);", "modifier": "private final", "type": "FakeTransportService", "declarator": "myTransportService = new FakeTransportService(myTimer)", "var_name": "myTransportService"}, {"original_string": "private final FakeMemoryService myService = new FakeMemoryService();", "modifier": "private final", "type": "FakeMemoryService", "declarator": "myService = new FakeMemoryService()", "var_name": "myService"}, {"original_string": "@NotNull private final FakeIdeProfilerServices myIdeProfilerServices = new FakeIdeProfilerServices();", "modifier": "@NotNull private final", "type": "FakeIdeProfilerServices", "declarator": "myIdeProfilerServices = new FakeIdeProfilerServices()", "var_name": "myIdeProfilerServices"}, {"original_string": "@Rule public FakeGrpcChannel myGrpcChannel = new FakeGrpcChannel(\"HeapDumpSampleDataSeriesTest\", myTransportService, myService);", "modifier": "@Rule public", "type": "FakeGrpcChannel", "declarator": "myGrpcChannel = new FakeGrpcChannel(\"HeapDumpSampleDataSeriesTest\", myTransportService, myService)", "var_name": "myGrpcChannel"}, {"original_string": "private MemoryProfilerStage myStage;", "modifier": "private", "type": "MemoryProfilerStage", "declarator": "myStage", "var_name": "myStage"}], "file": "profilers/testSrc/com/android/tools/profilers/memory/HeapDumpSampleDataSeriesTest.java"}, "test_case": {"identifier": "testGetDataForXRange", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetDataForXRange() {\n    myIdeProfilerServices.enableEventsPipeline(true);\n\n    myTransportService.addEventToStream(ProfilersTestData.SESSION_DATA.getStreamId(),\n                                        ProfilersTestData.generateMemoryHeapDumpData(INFO1.getStartTime(), INFO1.getStartTime(), INFO1)\n                                          .setPid(ProfilersTestData.SESSION_DATA.getPid())\n                                          .build());\n    myTransportService.addEventToStream(ProfilersTestData.SESSION_DATA.getStreamId(),\n                                        ProfilersTestData.generateMemoryHeapDumpData(INFO2.getStartTime(), INFO2.getStartTime(), INFO2)\n                                          .setPid(ProfilersTestData.SESSION_DATA.getPid())\n                                          .build());\n\n    HeapDumpSampleDataSeries series =\n      new HeapDumpSampleDataSeries(new ProfilerClient(myGrpcChannel.getName()), ProfilersTestData.SESSION_DATA,\n                                   myIdeProfilerServices.getFeatureTracker(), myStage);\n    List<SeriesData<CaptureDurationData<CaptureObject>>> dataList = series.getDataForRange(new Range(0, Double.MAX_VALUE));\n\n    assertEquals(2, dataList.size());\n    SeriesData<CaptureDurationData<CaptureObject>> data1 = dataList.get(0);\n    assertEquals(2, data1.x);\n    assertEquals(5, data1.value.getDurationUs());\n    CaptureObject capture1 = data1.value.getCaptureEntry().getCaptureObject();\n    assertEquals(TimeUnit.MICROSECONDS.toNanos(2), capture1.getStartTimeNs());\n    assertEquals(TimeUnit.MICROSECONDS.toNanos(7), capture1.getEndTimeNs());\n\n    SeriesData<CaptureDurationData<CaptureObject>> data2 = dataList.get(1);\n    assertEquals(17, data2.x);\n    assertEquals(Long.MAX_VALUE, data2.value.getDurationUs());\n    CaptureObject capture2 = data2.value.getCaptureEntry().getCaptureObject();\n    assertEquals(TimeUnit.MICROSECONDS.toNanos(17), capture2.getStartTimeNs());\n    assertEquals(Long.MAX_VALUE, capture2.getEndTimeNs());\n  }", "signature": "void testGetDataForXRange()", "full_signature": "@Test public void testGetDataForXRange()", "class_method_signature": "HeapDumpSampleDataSeriesTest.testGetDataForXRange()", "testcase": true, "constructor": false, "invocations": ["enableEventsPipeline", "addEventToStream", "getStreamId", "build", "setPid", "generateMemoryHeapDumpData", "getStartTime", "getStartTime", "getPid", "addEventToStream", "getStreamId", "build", "setPid", "generateMemoryHeapDumpData", "getStartTime", "getStartTime", "getPid", "getName", "getFeatureTracker", "getDataForRange", "assertEquals", "size", "get", "assertEquals", "assertEquals", "getDurationUs", "getCaptureObject", "getCaptureEntry", "assertEquals", "toNanos", "getStartTimeNs", "assertEquals", "toNanos", "getEndTimeNs", "get", "assertEquals", "assertEquals", "getDurationUs", "getCaptureObject", "getCaptureEntry", "assertEquals", "toNanos", "getStartTimeNs", "assertEquals", "getEndTimeNs"]}, "focal_class": {"identifier": "HeapDumpSampleDataSeries", "superclass": "extends CaptureDataSeries<CaptureObject>", "interfaces": "", "fields": [{"original_string": "@NotNull private final MemoryProfilerStage myStage;", "modifier": "@NotNull private final", "type": "MemoryProfilerStage", "declarator": "myStage", "var_name": "myStage"}], "methods": [{"identifier": "HeapDumpSampleDataSeries", "parameters": "(@NotNull ProfilerClient client,\n                                  @Nullable Common.Session session,\n                                  @NotNull FeatureTracker featureTracker,\n                                  @NotNull MemoryProfilerStage stage)", "modifiers": "public", "return": "", "signature": " HeapDumpSampleDataSeries(@NotNull ProfilerClient client,\n                                  @Nullable Common.Session session,\n                                  @NotNull FeatureTracker featureTracker,\n                                  @NotNull MemoryProfilerStage stage)", "full_signature": "public  HeapDumpSampleDataSeries(@NotNull ProfilerClient client,\n                                  @Nullable Common.Session session,\n                                  @NotNull FeatureTracker featureTracker,\n                                  @NotNull MemoryProfilerStage stage)", "class_method_signature": "HeapDumpSampleDataSeries.HeapDumpSampleDataSeries(@NotNull ProfilerClient client,\n                                  @Nullable Common.Session session,\n                                  @NotNull FeatureTracker featureTracker,\n                                  @NotNull MemoryProfilerStage stage)", "testcase": false, "constructor": true}, {"identifier": "getDataForRange", "parameters": "(Range range)", "modifiers": "@Override public", "return": "List<SeriesData<CaptureDurationData<CaptureObject>>>", "signature": "List<SeriesData<CaptureDurationData<CaptureObject>>> getDataForRange(Range range)", "full_signature": "@Override public List<SeriesData<CaptureDurationData<CaptureObject>>> getDataForRange(Range range)", "class_method_signature": "HeapDumpSampleDataSeries.getDataForRange(Range range)", "testcase": false, "constructor": false}], "file": "profilers/src/com/android/tools/profilers/memory/HeapDumpSampleDataSeries.java"}, "focal_method": {"identifier": "getDataForRange", "parameters": "(Range range)", "modifiers": "@Override public", "return": "List<SeriesData<CaptureDurationData<CaptureObject>>>", "body": "@Override\n  public List<SeriesData<CaptureDurationData<CaptureObject>>> getDataForRange(Range range) {\n    List<HeapDumpInfo> infos =\n      MemoryProfiler.getHeapDumpsForSession(myClient, mySession, range, myStage.getStudioProfilers().getIdeServices());\n\n    List<SeriesData<CaptureDurationData<CaptureObject>>> seriesData = new ArrayList<>();\n    for (HeapDumpInfo info : infos) {\n      seriesData.add(new SeriesData<>(\n        getHostTime(info.getStartTime()),\n        new CaptureDurationData<>(\n          getDurationUs(info.getStartTime(), info.getEndTime()), false, false,\n          new CaptureEntry<>(\n            info,\n            () -> new HeapDumpCaptureObject(myClient, mySession, info, null, myFeatureTracker, myStage)))));\n    }\n\n    return seriesData;\n  }", "signature": "List<SeriesData<CaptureDurationData<CaptureObject>>> getDataForRange(Range range)", "full_signature": "@Override public List<SeriesData<CaptureDurationData<CaptureObject>>> getDataForRange(Range range)", "class_method_signature": "HeapDumpSampleDataSeries.getDataForRange(Range range)", "testcase": false, "constructor": false, "invocations": ["getHeapDumpsForSession", "getIdeServices", "getStudioProfilers", "add", "getHostTime", "getStartTime", "getDurationUs", "getStartTime", "getEndTime"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}