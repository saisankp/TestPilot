{"test_class": {"identifier": "ResourceBinderImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}, {"original_string": "private ResourceBinderImpl resourceBinder;", "modifier": "private", "type": "ResourceBinderImpl", "declarator": "resourceBinder", "var_name": "resourceBinder"}], "file": "everrest-core/src/test/java/org/everrest/core/impl/ResourceBinderImplTest.java"}, "test_case": {"identifier": "throwsResourcePublicationExceptionWhenResourceIsNotAnnotatedWithPathAnnotation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void throwsResourcePublicationExceptionWhenResourceIsNotAnnotatedWithPathAnnotation() throws Exception {\n        thrown.expect(ResourcePublicationException.class);\n\n        resourceBinder.addResource(new NoPathAnnotationResource(), new MultivaluedHashMap<>());\n    }", "signature": "void throwsResourcePublicationExceptionWhenResourceIsNotAnnotatedWithPathAnnotation()", "full_signature": "@Test public void throwsResourcePublicationExceptionWhenResourceIsNotAnnotatedWithPathAnnotation()", "class_method_signature": "ResourceBinderImplTest.throwsResourcePublicationExceptionWhenResourceIsNotAnnotatedWithPathAnnotation()", "testcase": true, "constructor": false, "invocations": ["expect", "addResource"]}, "focal_class": {"identifier": "ResourceBinderImpl", "superclass": "", "interfaces": "implements ResourceBinder", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ResourceBinderImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ResourceBinderImpl.class)", "var_name": "LOG"}, {"original_string": "static final Comparator<ObjectFactory<ResourceDescriptor>> RESOURCE_COMPARATOR =\n            (resourceOne, resourceTwo) -> UriPattern.URIPATTERN_COMPARATOR\n                    .compare(resourceOne.getObjectModel().getUriPattern(), resourceTwo.getObjectModel().getUriPattern());", "modifier": "static final", "type": "Comparator<ObjectFactory<ResourceDescriptor>>", "declarator": "RESOURCE_COMPARATOR =\n            (resourceOne, resourceTwo) -> UriPattern.URIPATTERN_COMPARATOR\n                    .compare(resourceOne.getObjectModel().getUriPattern(), resourceTwo.getObjectModel().getUriPattern())", "var_name": "RESOURCE_COMPARATOR"}, {"original_string": "private volatile List<ObjectFactory<ResourceDescriptor>> resources = new ArrayList<>();", "modifier": "private volatile", "type": "List<ObjectFactory<ResourceDescriptor>>", "declarator": "resources = new ArrayList<>()", "var_name": "resources"}, {"original_string": "private final ReentrantLock lock = new ReentrantLock();", "modifier": "private final", "type": "ReentrantLock", "declarator": "lock = new ReentrantLock()", "var_name": "lock"}], "methods": [{"identifier": "addResource", "parameters": "(Class<?> resourceClass, MultivaluedMap<String, String> properties)", "modifiers": "@Override public", "return": "void", "signature": "void addResource(Class<?> resourceClass, MultivaluedMap<String, String> properties)", "full_signature": "@Override public void addResource(Class<?> resourceClass, MultivaluedMap<String, String> properties)", "class_method_signature": "ResourceBinderImpl.addResource(Class<?> resourceClass, MultivaluedMap<String, String> properties)", "testcase": false, "constructor": false}, {"identifier": "addResource", "parameters": "(String uriPattern, Class<?> resourceClass, MultivaluedMap<String, String> properties)", "modifiers": "@Override public", "return": "void", "signature": "void addResource(String uriPattern, Class<?> resourceClass, MultivaluedMap<String, String> properties)", "full_signature": "@Override public void addResource(String uriPattern, Class<?> resourceClass, MultivaluedMap<String, String> properties)", "class_method_signature": "ResourceBinderImpl.addResource(String uriPattern, Class<?> resourceClass, MultivaluedMap<String, String> properties)", "testcase": false, "constructor": false}, {"identifier": "newResourceDescriptor", "parameters": "(String path,\n                                                     Class<?> resourceClass,\n                                                     MultivaluedMap<String, String> properties)", "modifiers": "private", "return": "ResourceDescriptor", "signature": "ResourceDescriptor newResourceDescriptor(String path,\n                                                     Class<?> resourceClass,\n                                                     MultivaluedMap<String, String> properties)", "full_signature": "private ResourceDescriptor newResourceDescriptor(String path,\n                                                     Class<?> resourceClass,\n                                                     MultivaluedMap<String, String> properties)", "class_method_signature": "ResourceBinderImpl.newResourceDescriptor(String path,\n                                                     Class<?> resourceClass,\n                                                     MultivaluedMap<String, String> properties)", "testcase": false, "constructor": false}, {"identifier": "addResource", "parameters": "(Object resource, MultivaluedMap<String, String> properties)", "modifiers": "@Override public", "return": "void", "signature": "void addResource(Object resource, MultivaluedMap<String, String> properties)", "full_signature": "@Override public void addResource(Object resource, MultivaluedMap<String, String> properties)", "class_method_signature": "ResourceBinderImpl.addResource(Object resource, MultivaluedMap<String, String> properties)", "testcase": false, "constructor": false}, {"identifier": "addResource", "parameters": "(String uriPattern, Object resource, MultivaluedMap<String, String> properties)", "modifiers": "@Override public", "return": "void", "signature": "void addResource(String uriPattern, Object resource, MultivaluedMap<String, String> properties)", "full_signature": "@Override public void addResource(String uriPattern, Object resource, MultivaluedMap<String, String> properties)", "class_method_signature": "ResourceBinderImpl.addResource(String uriPattern, Object resource, MultivaluedMap<String, String> properties)", "testcase": false, "constructor": false}, {"identifier": "newResourceDescriptor", "parameters": "(String path,\n                                                     Object resource,\n                                                     MultivaluedMap<String, String> properties)", "modifiers": "private", "return": "ResourceDescriptor", "signature": "ResourceDescriptor newResourceDescriptor(String path,\n                                                     Object resource,\n                                                     MultivaluedMap<String, String> properties)", "full_signature": "private ResourceDescriptor newResourceDescriptor(String path,\n                                                     Object resource,\n                                                     MultivaluedMap<String, String> properties)", "class_method_signature": "ResourceBinderImpl.newResourceDescriptor(String path,\n                                                     Object resource,\n                                                     MultivaluedMap<String, String> properties)", "testcase": false, "constructor": false}, {"identifier": "addResource", "parameters": "(ObjectFactory<ResourceDescriptor> newResourceFactory)", "modifiers": "@Override public", "return": "void", "signature": "void addResource(ObjectFactory<ResourceDescriptor> newResourceFactory)", "full_signature": "@Override public void addResource(ObjectFactory<ResourceDescriptor> newResourceFactory)", "class_method_signature": "ResourceBinderImpl.addResource(ObjectFactory<ResourceDescriptor> newResourceFactory)", "testcase": false, "constructor": false}, {"identifier": "getCodeSource", "parameters": "(Class<?> aClass)", "modifiers": "private", "return": "CodeSource", "signature": "CodeSource getCodeSource(Class<?> aClass)", "full_signature": "private CodeSource getCodeSource(Class<?> aClass)", "class_method_signature": "ResourceBinderImpl.getCodeSource(Class<?> aClass)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "ResourceBinderImpl.clear()", "testcase": false, "constructor": false}, {"identifier": "getMatchedResource", "parameters": "(String requestPath, List<String> parameterValues)", "modifiers": "@Override public", "return": "ObjectFactory<ResourceDescriptor>", "signature": "ObjectFactory<ResourceDescriptor> getMatchedResource(String requestPath, List<String> parameterValues)", "full_signature": "@Override public ObjectFactory<ResourceDescriptor> getMatchedResource(String requestPath, List<String> parameterValues)", "class_method_signature": "ResourceBinderImpl.getMatchedResource(String requestPath, List<String> parameterValues)", "testcase": false, "constructor": false}, {"identifier": "hasSubResourceMethodsOrSubResourceLocators", "parameters": "(ObjectFactory<ResourceDescriptor> resource)", "modifiers": "private", "return": "boolean", "signature": "boolean hasSubResourceMethodsOrSubResourceLocators(ObjectFactory<ResourceDescriptor> resource)", "full_signature": "private boolean hasSubResourceMethodsOrSubResourceLocators(ObjectFactory<ResourceDescriptor> resource)", "class_method_signature": "ResourceBinderImpl.hasSubResourceMethodsOrSubResourceLocators(ObjectFactory<ResourceDescriptor> resource)", "testcase": false, "constructor": false}, {"identifier": "getResources", "parameters": "()", "modifiers": "@Override public", "return": "List<ObjectFactory<ResourceDescriptor>>", "signature": "List<ObjectFactory<ResourceDescriptor>> getResources()", "full_signature": "@Override public List<ObjectFactory<ResourceDescriptor>> getResources()", "class_method_signature": "ResourceBinderImpl.getResources()", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getSize()", "full_signature": "@Override public int getSize()", "class_method_signature": "ResourceBinderImpl.getSize()", "testcase": false, "constructor": false}, {"identifier": "removeResource", "parameters": "(Class<?> clazz)", "modifiers": "@Override public", "return": "ObjectFactory<ResourceDescriptor>", "signature": "ObjectFactory<ResourceDescriptor> removeResource(Class<?> clazz)", "full_signature": "@Override public ObjectFactory<ResourceDescriptor> removeResource(Class<?> clazz)", "class_method_signature": "ResourceBinderImpl.removeResource(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "removeResource", "parameters": "(String path)", "modifiers": "@Override public", "return": "ObjectFactory<ResourceDescriptor>", "signature": "ObjectFactory<ResourceDescriptor> removeResource(String path)", "full_signature": "@Override public ObjectFactory<ResourceDescriptor> removeResource(String path)", "class_method_signature": "ResourceBinderImpl.removeResource(String path)", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/impl/ResourceBinderImpl.java"}, "focal_method": {"identifier": "addResource", "parameters": "(Class<?> resourceClass, MultivaluedMap<String, String> properties)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void addResource(Class<?> resourceClass, MultivaluedMap<String, String> properties) {\n        if (!resourceClass.isAnnotationPresent(Path.class)) {\n            throw new ResourcePublicationException(String.format(\n                    \"Resource class %s it is not root resource. Path annotation javax.ws.rs.Path is not specified for this class.\",\n                    resourceClass.getName()));\n        }\n        try {\n            addResource(new PerRequestObjectFactory<>(newResourceDescriptor(null, resourceClass, properties)));\n        } catch (ResourcePublicationException e) {\n            throw e;\n        } catch (Exception e) {\n            throw new ResourcePublicationException(e.getMessage(), e);\n        }\n    }", "signature": "void addResource(Class<?> resourceClass, MultivaluedMap<String, String> properties)", "full_signature": "@Override public void addResource(Class<?> resourceClass, MultivaluedMap<String, String> properties)", "class_method_signature": "ResourceBinderImpl.addResource(Class<?> resourceClass, MultivaluedMap<String, String> properties)", "testcase": false, "constructor": false, "invocations": ["isAnnotationPresent", "format", "getName", "addResource", "newResourceDescriptor", "getMessage"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}