{"test_class": {"identifier": "UpgradeTaskIdTest", "superclass": "", "interfaces": "", "fields": [], "file": "dataprep-upgrade-common/src/test/java/org/talend/dataprep/upgrade/model/UpgradeTaskIdTest.java"}, "test_case": {"identifier": "shouldEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldEquals() throws Exception {\n        UpgradeTaskId id1 = new UpgradeTaskId(\"1.2.0\", \"name\", 1);\n        UpgradeTaskId id2 = new UpgradeTaskId(\"1.2.0\", \"name\", 1);\n        assertEquals(0, id1.compareTo(id2));\n    }", "signature": "void shouldEquals()", "full_signature": "@Test public void shouldEquals()", "class_method_signature": "UpgradeTaskIdTest.shouldEquals()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "compareTo"]}, "focal_class": {"identifier": "UpgradeTaskId", "superclass": "", "interfaces": "implements Comparable<UpgradeTaskId>", "fields": [{"original_string": "private String version;", "modifier": "private", "type": "String", "declarator": "version", "var_name": "version"}, {"original_string": "private String name;", "modifier": "private", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private int order;", "modifier": "private", "type": "int", "declarator": "order", "var_name": "order"}], "methods": [{"identifier": "UpgradeTaskId", "parameters": "()", "modifiers": "public", "return": "", "signature": " UpgradeTaskId()", "full_signature": "public  UpgradeTaskId()", "class_method_signature": "UpgradeTaskId.UpgradeTaskId()", "testcase": false, "constructor": true}, {"identifier": "UpgradeTaskId", "parameters": "(String version, String name, int order)", "modifiers": "public", "return": "", "signature": " UpgradeTaskId(String version, String name, int order)", "full_signature": "public  UpgradeTaskId(String version, String name, int order)", "class_method_signature": "UpgradeTaskId.UpgradeTaskId(String version, String name, int order)", "testcase": false, "constructor": true}, {"identifier": "getVersion", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getVersion()", "full_signature": "public String getVersion()", "class_method_signature": "UpgradeTaskId.getVersion()", "testcase": false, "constructor": false}, {"identifier": "setVersion", "parameters": "(String version)", "modifiers": "public", "return": "void", "signature": "void setVersion(String version)", "full_signature": "public void setVersion(String version)", "class_method_signature": "UpgradeTaskId.setVersion(String version)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "UpgradeTaskId.getName()", "testcase": false, "constructor": false}, {"identifier": "setName", "parameters": "(String name)", "modifiers": "public", "return": "void", "signature": "void setName(String name)", "full_signature": "public void setName(String name)", "class_method_signature": "UpgradeTaskId.setName(String name)", "testcase": false, "constructor": false}, {"identifier": "getOrder", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getOrder()", "full_signature": "public int getOrder()", "class_method_signature": "UpgradeTaskId.getOrder()", "testcase": false, "constructor": false}, {"identifier": "setOrder", "parameters": "(int order)", "modifiers": "public", "return": "void", "signature": "void setOrder(int order)", "full_signature": "public void setOrder(int order)", "class_method_signature": "UpgradeTaskId.setOrder(int order)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "UpgradeTaskId.toString()", "testcase": false, "constructor": false}, {"identifier": "getUniqueKey", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUniqueKey()", "full_signature": "public String getUniqueKey()", "class_method_signature": "UpgradeTaskId.getUniqueKey()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(UpgradeTaskId other)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(UpgradeTaskId other)", "full_signature": "@Override public int compareTo(UpgradeTaskId other)", "class_method_signature": "UpgradeTaskId.compareTo(UpgradeTaskId other)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "UpgradeTaskId.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "UpgradeTaskId.hashCode()", "testcase": false, "constructor": false}], "file": "dataprep-upgrade-common/src/main/java/org/talend/dataprep/upgrade/model/UpgradeTaskId.java"}, "focal_method": {"identifier": "compareTo", "parameters": "(UpgradeTaskId other)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int compareTo(UpgradeTaskId other) {\n\n        if (other == null) {\n            return 1;\n        }\n\n        // compare version only if needed\n        if (!StringUtils.equals(version, other.getVersion())) {\n\n            // split with by '.'\n            final String[] versionParts = version.split(\"\\\\.\");\n            final String[] otherVersionParts = other.getVersion().split(\"\\\\.\");\n\n            // compare each part with a left pad so that '1-PE' < '2-EE' < '100-PE'\n            for (int i = 0; i < versionParts.length; i++) {\n                String currentPart = leftPad(versionParts[i], 6, '0');\n\n                // if there's no match for the other version, let's consider 0\n                String otherPart = \"000000\";\n                if (i < otherVersionParts.length) {\n                    otherPart = leftPad(otherVersionParts[i], 6, '0');\n                }\n\n                final int result = currentPart.compareTo(otherPart);\n                if (result != 0) {\n                    return result;\n                }\n            }\n        }\n\n        // then order\n        return Integer.compare(order, other.getOrder());\n    }", "signature": "int compareTo(UpgradeTaskId other)", "full_signature": "@Override public int compareTo(UpgradeTaskId other)", "class_method_signature": "UpgradeTaskId.compareTo(UpgradeTaskId other)", "testcase": false, "constructor": false, "invocations": ["equals", "getVersion", "split", "split", "getVersion", "leftPad", "leftPad", "compareTo", "compare", "getOrder"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}