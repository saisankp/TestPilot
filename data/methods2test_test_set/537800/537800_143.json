{"test_class": {"identifier": "JmxReporterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();", "modifier": "private final", "type": "MBeanServer", "declarator": "mBeanServer = ManagementFactory.getPlatformMBeanServer()", "var_name": "mBeanServer"}, {"original_string": "private final String name = UUID.randomUUID().toString().replaceAll(\"[{\\\\-}]\", \"\");", "modifier": "private final", "type": "String", "declarator": "name = UUID.randomUUID().toString().replaceAll(\"[{\\\\-}]\", \"\")", "var_name": "name"}, {"original_string": "private final MetricRegistry registry = new MetricRegistry();", "modifier": "private final", "type": "MetricRegistry", "declarator": "registry = new MetricRegistry()", "var_name": "registry"}, {"original_string": "private final JmxReporter reporter = JmxReporter.forRegistry(registry)\n            .registerWith(mBeanServer)\n            .inDomain(name)\n            .convertDurationsTo(TimeUnit.MILLISECONDS)\n            .convertRatesTo(TimeUnit.SECONDS)\n            .filter(MetricFilter.ALL)\n            .build();", "modifier": "private final", "type": "JmxReporter", "declarator": "reporter = JmxReporter.forRegistry(registry)\n            .registerWith(mBeanServer)\n            .inDomain(name)\n            .convertDurationsTo(TimeUnit.MILLISECONDS)\n            .convertRatesTo(TimeUnit.SECONDS)\n            .filter(MetricFilter.ALL)\n            .build()", "var_name": "reporter"}, {"original_string": "private final Gauge gauge = mock(Gauge.class);", "modifier": "private final", "type": "Gauge", "declarator": "gauge = mock(Gauge.class)", "var_name": "gauge"}, {"original_string": "private final Counter counter = mock(Counter.class);", "modifier": "private final", "type": "Counter", "declarator": "counter = mock(Counter.class)", "var_name": "counter"}, {"original_string": "private final Histogram histogram = mock(Histogram.class);", "modifier": "private final", "type": "Histogram", "declarator": "histogram = mock(Histogram.class)", "var_name": "histogram"}, {"original_string": "private final Meter meter = mock(Meter.class);", "modifier": "private final", "type": "Meter", "declarator": "meter = mock(Meter.class)", "var_name": "meter"}, {"original_string": "private final Timer timer = mock(Timer.class);", "modifier": "private final", "type": "Timer", "declarator": "timer = mock(Timer.class)", "var_name": "timer"}, {"original_string": "private final ObjectNameFactory mockObjectNameFactory = mock(ObjectNameFactory.class);", "modifier": "private final", "type": "ObjectNameFactory", "declarator": "mockObjectNameFactory = mock(ObjectNameFactory.class)", "var_name": "mockObjectNameFactory"}, {"original_string": "private final ObjectNameFactory concreteObjectNameFactory = reporter.getObjectNameFactory();", "modifier": "private final", "type": "ObjectNameFactory", "declarator": "concreteObjectNameFactory = reporter.getObjectNameFactory()", "var_name": "concreteObjectNameFactory"}], "file": "metrics-jmx/src/test/java/com/codahale/metrics/jmx/JmxReporterTest.java"}, "test_case": {"identifier": "cleansUpAfterItselfWhenStopped", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void cleansUpAfterItselfWhenStopped() throws Exception {\n        reporter.stop();\n\n        try {\n            getAttributes(\"gauges\", \"gauge\", \"Value\", \"Number\");\n            failBecauseExceptionWasNotThrown(InstanceNotFoundException.class);\n        } catch (InstanceNotFoundException e) {\n\n        }\n    }", "signature": "void cleansUpAfterItselfWhenStopped()", "full_signature": "@Test public void cleansUpAfterItselfWhenStopped()", "class_method_signature": "JmxReporterTest.cleansUpAfterItselfWhenStopped()", "testcase": true, "constructor": false, "invocations": ["stop", "getAttributes", "failBecauseExceptionWasNotThrown"]}, "focal_class": {"identifier": "JmxReporter", "superclass": "", "interfaces": "implements Reporter, Closeable", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(JmxReporter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(JmxReporter.class)", "var_name": "LOGGER"}, {"original_string": "private final MetricRegistry registry;", "modifier": "private final", "type": "MetricRegistry", "declarator": "registry", "var_name": "registry"}, {"original_string": "private final JmxListener listener;", "modifier": "private final", "type": "JmxListener", "declarator": "listener", "var_name": "listener"}], "methods": [{"identifier": "forRegistry", "parameters": "(MetricRegistry registry)", "modifiers": "public static", "return": "Builder", "signature": "Builder forRegistry(MetricRegistry registry)", "full_signature": "public static Builder forRegistry(MetricRegistry registry)", "class_method_signature": "JmxReporter.forRegistry(MetricRegistry registry)", "testcase": false, "constructor": false}, {"identifier": "JmxReporter", "parameters": "(MBeanServer mBeanServer,\n                        String domain,\n                        MetricRegistry registry,\n                        MetricFilter filter,\n                        MetricTimeUnits timeUnits,\n                        ObjectNameFactory objectNameFactory)", "modifiers": "private", "return": "", "signature": " JmxReporter(MBeanServer mBeanServer,\n                        String domain,\n                        MetricRegistry registry,\n                        MetricFilter filter,\n                        MetricTimeUnits timeUnits,\n                        ObjectNameFactory objectNameFactory)", "full_signature": "private  JmxReporter(MBeanServer mBeanServer,\n                        String domain,\n                        MetricRegistry registry,\n                        MetricFilter filter,\n                        MetricTimeUnits timeUnits,\n                        ObjectNameFactory objectNameFactory)", "class_method_signature": "JmxReporter.JmxReporter(MBeanServer mBeanServer,\n                        String domain,\n                        MetricRegistry registry,\n                        MetricFilter filter,\n                        MetricTimeUnits timeUnits,\n                        ObjectNameFactory objectNameFactory)", "testcase": false, "constructor": true}, {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void start()", "full_signature": "public void start()", "class_method_signature": "JmxReporter.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "JmxReporter.stop()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "JmxReporter.close()", "testcase": false, "constructor": false}, {"identifier": "getObjectNameFactory", "parameters": "()", "modifiers": "", "return": "ObjectNameFactory", "signature": "ObjectNameFactory getObjectNameFactory()", "full_signature": " ObjectNameFactory getObjectNameFactory()", "class_method_signature": "JmxReporter.getObjectNameFactory()", "testcase": false, "constructor": false}], "file": "metrics-jmx/src/main/java/com/codahale/metrics/jmx/JmxReporter.java"}, "focal_method": {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void stop() {\n        registry.removeListener(listener);\n        listener.unregisterAll();\n    }", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "JmxReporter.stop()", "testcase": false, "constructor": false, "invocations": ["removeListener", "unregisterAll"]}, "repository": {"repo_id": 537800, "url": "https://github.com/dropwizard/metrics", "stars": 6879, "created": "2/26/2010 7:44:42 PM +00:00", "updates": "2020-01-26T22:33:14+00:00", "fork": "False", "license": "licensed"}}