{"test_class": {"identifier": "KafkaConsumerRequestTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "ConsumerRecord<String, String> record = new ConsumerRecord<>(\"top\", 0, 1, \"key\", \"value\");", "modifier": "", "type": "ConsumerRecord<String, String>", "declarator": "record = new ConsumerRecord<>(\"top\", 0, 1, \"key\", \"value\")", "var_name": "record"}, {"original_string": "KafkaConsumerRequest request = new KafkaConsumerRequest(record);", "modifier": "", "type": "KafkaConsumerRequest", "declarator": "request = new KafkaConsumerRequest(record)", "var_name": "request"}], "file": "instrumentation/kafka-clients/src/test/java/brave/kafka/clients/KafkaConsumerRequestTest.java"}, "test_case": {"identifier": "operation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void operation() {\n    assertThat(request.operation()).isEqualTo(\"receive\");\n  }", "signature": "void operation()", "full_signature": "@Test public void operation()", "class_method_signature": "KafkaConsumerRequestTest.operation()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "operation"]}, "focal_class": {"identifier": "KafkaConsumerRequest", "superclass": "extends ConsumerRequest", "interfaces": "", "fields": [{"original_string": "static final RemoteGetter<KafkaConsumerRequest> GETTER =\n      new RemoteGetter<KafkaConsumerRequest>() {\n        @Override public Kind spanKind() {\n          return Kind.CONSUMER;\n        }\n\n        @Override public String get(KafkaConsumerRequest request, String name) {\n          return lastStringHeader(request.delegate.headers(), name);\n        }\n\n        @Override public String toString() {\n          return \"Headers::lastHeader\";\n        }\n      };", "modifier": "static final", "type": "RemoteGetter<KafkaConsumerRequest>", "declarator": "GETTER =\n      new RemoteGetter<KafkaConsumerRequest>() {\n        @Override public Kind spanKind() {\n          return Kind.CONSUMER;\n        }\n\n        @Override public String get(KafkaConsumerRequest request, String name) {\n          return lastStringHeader(request.delegate.headers(), name);\n        }\n\n        @Override public String toString() {\n          return \"Headers::lastHeader\";\n        }\n      }", "var_name": "GETTER"}, {"original_string": "static final RemoteSetter<KafkaConsumerRequest> SETTER =\n      new RemoteSetter<KafkaConsumerRequest>() {\n        @Override public Kind spanKind() {\n          return Kind.CONSUMER;\n        }\n\n        @Override public void put(KafkaConsumerRequest request, String name, String value) {\n          KafkaHeaders.replaceHeader(request.delegate.headers(), name, value);\n        }\n\n        @Override public String toString() {\n          return \"Headers::replace\";\n        }\n      };", "modifier": "static final", "type": "RemoteSetter<KafkaConsumerRequest>", "declarator": "SETTER =\n      new RemoteSetter<KafkaConsumerRequest>() {\n        @Override public Kind spanKind() {\n          return Kind.CONSUMER;\n        }\n\n        @Override public void put(KafkaConsumerRequest request, String name, String value) {\n          KafkaHeaders.replaceHeader(request.delegate.headers(), name, value);\n        }\n\n        @Override public String toString() {\n          return \"Headers::replace\";\n        }\n      }", "var_name": "SETTER"}, {"original_string": "final ConsumerRecord<?, ?> delegate;", "modifier": "final", "type": "ConsumerRecord<?, ?>", "declarator": "delegate", "var_name": "delegate"}], "methods": [{"identifier": "KafkaConsumerRequest", "parameters": "(ConsumerRecord<?, ?> delegate)", "modifiers": "", "return": "", "signature": " KafkaConsumerRequest(ConsumerRecord<?, ?> delegate)", "full_signature": "  KafkaConsumerRequest(ConsumerRecord<?, ?> delegate)", "class_method_signature": "KafkaConsumerRequest.KafkaConsumerRequest(ConsumerRecord<?, ?> delegate)", "testcase": false, "constructor": true}, {"identifier": "spanKind", "parameters": "()", "modifiers": "@Override public", "return": "Kind", "signature": "Kind spanKind()", "full_signature": "@Override public Kind spanKind()", "class_method_signature": "KafkaConsumerRequest.spanKind()", "testcase": false, "constructor": false}, {"identifier": "unwrap", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object unwrap()", "full_signature": "@Override public Object unwrap()", "class_method_signature": "KafkaConsumerRequest.unwrap()", "testcase": false, "constructor": false}, {"identifier": "operation", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String operation()", "full_signature": "@Override public String operation()", "class_method_signature": "KafkaConsumerRequest.operation()", "testcase": false, "constructor": false}, {"identifier": "channelKind", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String channelKind()", "full_signature": "@Override public String channelKind()", "class_method_signature": "KafkaConsumerRequest.channelKind()", "testcase": false, "constructor": false}, {"identifier": "channelName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String channelName()", "full_signature": "@Override public String channelName()", "class_method_signature": "KafkaConsumerRequest.channelName()", "testcase": false, "constructor": false}, {"identifier": "messageId", "parameters": "()", "modifiers": "@Nullable @Override public", "return": "String", "signature": "String messageId()", "full_signature": "@Nullable @Override public String messageId()", "class_method_signature": "KafkaConsumerRequest.messageId()", "testcase": false, "constructor": false}], "file": "instrumentation/kafka-clients/src/main/java/brave/kafka/clients/KafkaConsumerRequest.java"}, "focal_method": {"identifier": "operation", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override public String operation() {\n    return \"receive\";\n  }", "signature": "String operation()", "full_signature": "@Override public String operation()", "class_method_signature": "KafkaConsumerRequest.operation()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}