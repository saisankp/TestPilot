{"test_class": {"identifier": "DefaultPluginFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "pf4j/src/test/java/org/pf4j/DefaultPluginFactoryTest.java"}, "test_case": {"identifier": "testCreateFailNotFound", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateFailNotFound() {\n        PluginDescriptor pluginDescriptor = mock(PluginDescriptor.class);\n        when(pluginDescriptor.getPluginClass()).thenReturn(\"org.pf4j.plugin.NotFoundTestPlugin\");\n\n        PluginWrapper pluginWrapper = mock(PluginWrapper.class);\n        when(pluginWrapper.getDescriptor()).thenReturn(pluginDescriptor);\n        when(pluginWrapper.getPluginClassLoader()).thenReturn(getClass().getClassLoader());\n\n        PluginFactory pluginFactory = new DefaultPluginFactory();\n\n        Plugin plugin = pluginFactory.create(pluginWrapper);\n        assertNull(plugin);\n    }", "signature": "void testCreateFailNotFound()", "full_signature": "@Test public void testCreateFailNotFound()", "class_method_signature": "DefaultPluginFactoryTest.testCreateFailNotFound()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getPluginClass", "mock", "thenReturn", "when", "getDescriptor", "thenReturn", "when", "getPluginClassLoader", "getClassLoader", "getClass", "create", "assertNull"]}, "focal_class": {"identifier": "DefaultPluginFactory", "superclass": "", "interfaces": "implements PluginFactory", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(DefaultPluginFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(DefaultPluginFactory.class)", "var_name": "log"}], "methods": [{"identifier": "create", "parameters": "(final PluginWrapper pluginWrapper)", "modifiers": "@Override public", "return": "Plugin", "signature": "Plugin create(final PluginWrapper pluginWrapper)", "full_signature": "@Override public Plugin create(final PluginWrapper pluginWrapper)", "class_method_signature": "DefaultPluginFactory.create(final PluginWrapper pluginWrapper)", "testcase": false, "constructor": false}], "file": "pf4j/src/main/java/org/pf4j/DefaultPluginFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(final PluginWrapper pluginWrapper)", "modifiers": "@Override public", "return": "Plugin", "body": "@Override\n    public Plugin create(final PluginWrapper pluginWrapper) {\n        String pluginClassName = pluginWrapper.getDescriptor().getPluginClass();\n        log.debug(\"Create instance for plugin '{}'\", pluginClassName);\n\n        Class<?> pluginClass;\n        try {\n            pluginClass = pluginWrapper.getPluginClassLoader().loadClass(pluginClassName);\n        } catch (ClassNotFoundException e) {\n            log.error(e.getMessage(), e);\n            return null;\n        }\n\n        // once we have the class, we can do some checks on it to ensure\n        // that it is a valid implementation of a plugin.\n        int modifiers = pluginClass.getModifiers();\n        if (Modifier.isAbstract(modifiers) || Modifier.isInterface(modifiers)\n                || (!Plugin.class.isAssignableFrom(pluginClass))) {\n            log.error(\"The plugin class '{}' is not valid\", pluginClassName);\n            return null;\n        }\n\n        // create the plugin instance\n        try {\n            Constructor<?> constructor = pluginClass.getConstructor(PluginWrapper.class);\n            return (Plugin) constructor.newInstance(pluginWrapper);\n        } catch (Exception e) {\n            log.error(e.getMessage(), e);\n        }\n\n        return null;\n    }", "signature": "Plugin create(final PluginWrapper pluginWrapper)", "full_signature": "@Override public Plugin create(final PluginWrapper pluginWrapper)", "class_method_signature": "DefaultPluginFactory.create(final PluginWrapper pluginWrapper)", "testcase": false, "constructor": false, "invocations": ["getPluginClass", "getDescriptor", "debug", "loadClass", "getPluginClassLoader", "error", "getMessage", "getModifiers", "isAbstract", "isInterface", "isAssignableFrom", "error", "getConstructor", "newInstance", "error", "getMessage"]}, "repository": {"repo_id": 6157458, "url": "https://github.com/pf4j/pf4j", "stars": 1034, "created": "10/10/2012 1:10:32 PM +00:00", "updates": "2020-01-20T02:39:14+00:00", "fork": "False", "license": "licensed"}}