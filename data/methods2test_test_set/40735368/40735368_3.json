{"test_class": {"identifier": "ImagePyramidReaderTest", "superclass": "extends Assert", "interfaces": "", "fields": [{"original_string": "private final static String TEST_FILE = \"pyramid.properties\";", "modifier": "private final static", "type": "String", "declarator": "TEST_FILE = \"pyramid.properties\"", "var_name": "TEST_FILE"}], "file": "modules/plugin/imagepyramid/src/test/java/org/geotools/gce/imagepyramid/ImagePyramidReaderTest.java"}, "test_case": {"identifier": "testForErrors", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testForErrors() throws IOException,\n\t\t\tMismatchedDimensionException, NoSuchAuthorityCodeException {\n\t\t//\n\t\t// Get the resource.\n\t\t//\n\t\tfinal File testFile = TestData.file(this, \"goodpyramid/\"+TEST_FILE);//\n\t\tassertNotNull(testFile);\n\n\n\t\t//\n\t\t// Null argument\n\t\t//\n\t\tImagePyramidReader reader = null;\n\t\ttry {\n\t\t\treader = new ImagePyramidReader(null, new Hints(\n\t\t\t\t\tHints.FORCE_LONGITUDE_FIRST_AXIS_ORDER, Boolean.FALSE));\n\t\t} catch (DataSourceException e) {\n\n\t\t}\n\t\tassertNull(reader);\n\n\t\t//\n\t\t// Illegal arguments\n\t\t//\n\t\ttry {\n\t\t\treader = new ImagePyramidReader(new FileInputStream(testFile),\n\t\t\t\t\tnew Hints(Hints.FORCE_LONGITUDE_FIRST_AXIS_ORDER,\n\t\t\t\t\t\t\tBoolean.FALSE));\n\t\t} catch (DataSourceException e) {\n\n\t\t}\n\t\tassertNull(reader);\n\t\ttry {\n\t\t\treader = new ImagePyramidReader(ImageIO\n\t\t\t\t\t.createImageInputStream(testFile), new Hints(\n\t\t\t\t\tHints.FORCE_LONGITUDE_FIRST_AXIS_ORDER, Boolean.FALSE));\n\t\t} catch (DataSourceException e) {\n\n\t\t}\n\t\tassertNull(reader);\n\n\t\t//\n\t\t// Unsopported operation\n\t\treader = new ImagePyramidReader(testFile, new Hints(\n\t\t\t\tHints.FORCE_LONGITUDE_FIRST_AXIS_ORDER, Boolean.FALSE));\n\n\t\ttry {\n\t\t\treader.getCurrentSubname();\n\n\t\t} catch (UnsupportedOperationException e) {\n\t\t\ttry {\n\t\t\t\tString value = reader.getMetadataValue(\"\");\n\t\t\t\tassertNull(value);\n\t\t\t\treturn;\n\t\t\t} catch (UnsupportedOperationException e2) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tassertTrue(\"Some of the unsopported method did not send an exception\",false);\n\n\t}", "signature": "void testForErrors()", "full_signature": "@Test public void testForErrors()", "class_method_signature": "ImagePyramidReaderTest.testForErrors()", "testcase": true, "constructor": false, "invocations": ["file", "assertNotNull", "assertNull", "assertNull", "createImageInputStream", "assertNull", "getCurrentSubname", "getMetadataValue", "assertNull", "assertTrue"]}, "focal_class": {"identifier": "ImagePyramidReader", "superclass": "extends AbstractGridCoverage2DReader", "interfaces": "implements GridCoverageReader", "fields": [{"original_string": "private final static Logger LOGGER = org.geotools.util.logging.Logging.getLogger(ImagePyramidReader.class.toString());", "modifier": "private final static", "type": "Logger", "declarator": "LOGGER = org.geotools.util.logging.Logging.getLogger(ImagePyramidReader.class.toString())", "var_name": "LOGGER"}, {"original_string": "private URL sourceURL;", "modifier": "private", "type": "URL", "declarator": "sourceURL", "var_name": "sourceURL"}, {"original_string": "private String[] levelsDirs;", "modifier": "private", "type": "String[]", "declarator": "levelsDirs", "var_name": "levelsDirs"}, {"original_string": "private ConcurrentHashMap<Integer, ImageMosaicReader> readers =new ConcurrentHashMap<Integer, ImageMosaicReader>();", "modifier": "private", "type": "ConcurrentHashMap<Integer, ImageMosaicReader>", "declarator": "readers =new ConcurrentHashMap<Integer, ImageMosaicReader>()", "var_name": "readers"}], "methods": [{"identifier": "ImagePyramidReader", "parameters": "(Object source, Hints uHints)", "modifiers": "public", "return": "", "signature": " ImagePyramidReader(Object source, Hints uHints)", "full_signature": "public  ImagePyramidReader(Object source, Hints uHints)", "class_method_signature": "ImagePyramidReader.ImagePyramidReader(Object source, Hints uHints)", "testcase": false, "constructor": true}, {"identifier": "parseMainFile", "parameters": "(final URL sourceURL)", "modifiers": "private", "return": "void", "signature": "void parseMainFile(final URL sourceURL)", "full_signature": "private void parseMainFile(final URL sourceURL)", "class_method_signature": "ImagePyramidReader.parseMainFile(final URL sourceURL)", "testcase": false, "constructor": false}, {"identifier": "ImagePyramidReader", "parameters": "(Object source)", "modifiers": "public", "return": "", "signature": " ImagePyramidReader(Object source)", "full_signature": "public  ImagePyramidReader(Object source)", "class_method_signature": "ImagePyramidReader.ImagePyramidReader(Object source)", "testcase": false, "constructor": true}, {"identifier": "getFormat", "parameters": "()", "modifiers": "public", "return": "Format", "signature": "Format getFormat()", "full_signature": "public Format getFormat()", "class_method_signature": "ImagePyramidReader.getFormat()", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(GeneralParameterValue[] params)", "modifiers": "public", "return": "GridCoverage2D", "signature": "GridCoverage2D read(GeneralParameterValue[] params)", "full_signature": "public GridCoverage2D read(GeneralParameterValue[] params)", "class_method_signature": "ImagePyramidReader.read(GeneralParameterValue[] params)", "testcase": false, "constructor": false}, {"identifier": "loadTiles", "parameters": "(GeneralEnvelope requestedEnvelope,\n\t\t\tRectangle dim, GeneralParameterValue[] params, OverviewPolicy overviewPolicy)", "modifiers": "private", "return": "GridCoverage2D", "signature": "GridCoverage2D loadTiles(GeneralEnvelope requestedEnvelope,\n\t\t\tRectangle dim, GeneralParameterValue[] params, OverviewPolicy overviewPolicy)", "full_signature": "private GridCoverage2D loadTiles(GeneralEnvelope requestedEnvelope,\n\t\t\tRectangle dim, GeneralParameterValue[] params, OverviewPolicy overviewPolicy)", "class_method_signature": "ImagePyramidReader.loadTiles(GeneralEnvelope requestedEnvelope,\n\t\t\tRectangle dim, GeneralParameterValue[] params, OverviewPolicy overviewPolicy)", "testcase": false, "constructor": false}, {"identifier": "loadRequestedTiles", "parameters": "(\n\t\t\tGeneralEnvelope requestedEnvelope,\n\t\t\tRectangle dim, \n\t\t\tGeneralParameterValue[] params, \n\t\t\tOverviewPolicy overviewPolicy)", "modifiers": "private", "return": "GridCoverage2D", "signature": "GridCoverage2D loadRequestedTiles(\n\t\t\tGeneralEnvelope requestedEnvelope,\n\t\t\tRectangle dim, \n\t\t\tGeneralParameterValue[] params, \n\t\t\tOverviewPolicy overviewPolicy)", "full_signature": "private GridCoverage2D loadRequestedTiles(\n\t\t\tGeneralEnvelope requestedEnvelope,\n\t\t\tRectangle dim, \n\t\t\tGeneralParameterValue[] params, \n\t\t\tOverviewPolicy overviewPolicy)", "class_method_signature": "ImagePyramidReader.loadRequestedTiles(\n\t\t\tGeneralEnvelope requestedEnvelope,\n\t\t\tRectangle dim, \n\t\t\tGeneralParameterValue[] params, \n\t\t\tOverviewPolicy overviewPolicy)", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void dispose()", "full_signature": "@Override public synchronized void dispose()", "class_method_signature": "ImagePyramidReader.dispose()", "testcase": false, "constructor": false}, {"identifier": "getGridCoverageCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getGridCoverageCount()", "full_signature": "@Override public int getGridCoverageCount()", "class_method_signature": "ImagePyramidReader.getGridCoverageCount()", "testcase": false, "constructor": false}, {"identifier": "getHighestRes", "parameters": "()", "modifiers": "", "return": "double[]", "signature": "double[] getHighestRes()", "full_signature": " double[] getHighestRes()", "class_method_signature": "ImagePyramidReader.getHighestRes()", "testcase": false, "constructor": false}, {"identifier": "getMetadataValue", "parameters": "(String coverageName, String name)", "modifiers": "@Override public", "return": "String", "signature": "String getMetadataValue(String coverageName, String name)", "full_signature": "@Override public String getMetadataValue(String coverageName, String name)", "class_method_signature": "ImagePyramidReader.getMetadataValue(String coverageName, String name)", "testcase": false, "constructor": false}, {"identifier": "getMetadataValue", "parameters": "(final String name)", "modifiers": "public", "return": "String", "signature": "String getMetadataValue(final String name)", "full_signature": "public String getMetadataValue(final String name)", "class_method_signature": "ImagePyramidReader.getMetadataValue(final String name)", "testcase": false, "constructor": false}, {"identifier": "getImageMosaicMetadataValue", "parameters": "(String name)", "modifiers": "private", "return": "String", "signature": "String getImageMosaicMetadataValue(String name)", "full_signature": "private String getImageMosaicMetadataValue(String name)", "class_method_signature": "ImagePyramidReader.getImageMosaicMetadataValue(String name)", "testcase": false, "constructor": false}, {"identifier": "getMetadataNames", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] getMetadataNames()", "full_signature": "public String[] getMetadataNames()", "class_method_signature": "ImagePyramidReader.getMetadataNames()", "testcase": false, "constructor": false}, {"identifier": "hasTimeDomain", "parameters": "(ImageMosaicReader reader)", "modifiers": "private", "return": "boolean", "signature": "boolean hasTimeDomain(ImageMosaicReader reader)", "full_signature": "private boolean hasTimeDomain(ImageMosaicReader reader)", "class_method_signature": "ImagePyramidReader.hasTimeDomain(ImageMosaicReader reader)", "testcase": false, "constructor": false}, {"identifier": "getTimeDomain", "parameters": "(ImageMosaicReader reader, final String name)", "modifiers": "private", "return": "String", "signature": "String getTimeDomain(ImageMosaicReader reader, final String name)", "full_signature": "private String getTimeDomain(ImageMosaicReader reader, final String name)", "class_method_signature": "ImagePyramidReader.getTimeDomain(ImageMosaicReader reader, final String name)", "testcase": false, "constructor": false}, {"identifier": "getImageMosaicReaderForLevel", "parameters": "(Integer imageChoice)", "modifiers": "public", "return": "ImageMosaicReader", "signature": "ImageMosaicReader getImageMosaicReaderForLevel(Integer imageChoice)", "full_signature": "public ImageMosaicReader getImageMosaicReaderForLevel(Integer imageChoice)", "class_method_signature": "ImagePyramidReader.getImageMosaicReaderForLevel(Integer imageChoice)", "testcase": false, "constructor": false}], "file": "modules/plugin/imagepyramid/src/main/java/org/geotools/gce/imagepyramid/ImagePyramidReader.java"}, "focal_method": {"identifier": "getMetadataValue", "parameters": "(String coverageName, String name)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getMetadataValue(String coverageName, String name) {\n        String metadataValue = super.getMetadataValue(coverageName, name);\n        if (metadataValue != null){\n            return metadataValue;\n        }\n        return getImageMosaicMetadataValue(name);\n\n    }", "signature": "String getMetadataValue(String coverageName, String name)", "full_signature": "@Override public String getMetadataValue(String coverageName, String name)", "class_method_signature": "ImagePyramidReader.getMetadataValue(String coverageName, String name)", "testcase": false, "constructor": false, "invocations": ["getMetadataValue", "getImageMosaicMetadataValue"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}