{"test_class": {"identifier": "EvalBinaryClassBatchOpTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n\tpublic ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n\tpublic", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}, {"original_string": "@Rule\n\tpublic TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n\tpublic", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}], "file": "core/src/test/java/com/alibaba/alink/operator/batch/evaluation/EvalBinaryClassBatchOpTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void test() throws Exception {\n\t\tRow[] data =\n\t\t\tnew Row[] {\n\t\t\t\tRow.of(\"prefix1\", \"{\\\"prefix1\\\": 0.9, \\\"prefix0\\\": 0.1}\"),\n\t\t\t\tRow.of(\"prefix1\", \"{\\\"prefix1\\\": 0.8, \\\"prefix0\\\": 0.2}\"),\n\t\t\t\tRow.of(\"prefix1\", \"{\\\"prefix1\\\": 0.7, \\\"prefix0\\\": 0.3}\"),\n\t\t\t\tRow.of(\"prefix0\", \"{\\\"prefix1\\\": 0.75, \\\"prefix0\\\": 0.25}\"),\n\t\t\t\tRow.of(\"prefix0\", \"{\\\"prefix1\\\": 0.6, \\\"prefix0\\\": 0.4}\"),\n\t\t\t\tRow.of(\"prefix1\", \"{\\\"prefix1\\\": 0.65, \\\"prefix0\\\": 0.35}\"),\n\t\t\t\tRow.of(\"prefix0\", null),\n\t\t\t\tRow.of(\"prefix1\", \"{\\\"prefix1\\\": 0.55, \\\"prefix0\\\": 0.45}\"),\n\t\t\t\tRow.of(\"prefix0\", \"{\\\"prefix1\\\": 0.4, \\\"prefix0\\\": 0.6}\"),\n\t\t\t\tRow.of(\"prefix0\", \"{\\\"prefix1\\\": 0.3, \\\"prefix0\\\": 0.7}\"),\n\t\t\t\tRow.of(\"prefix1\", \"{\\\"prefix1\\\": 0.35, \\\"prefix0\\\": 0.65}\"),\n\t\t\t\tRow.of(\"prefix0\", \"{\\\"prefix1\\\": 0.2, \\\"prefix0\\\": 0.8}\"),\n\t\t\t\tRow.of(\"prefix1\", \"{\\\"prefix1\\\": 0.1, \\\"prefix0\\\": 0.9}\")\n\t\t\t};\n\n\t\tMemSourceBatchOp source = new MemSourceBatchOp(data, new String[] {\"label\", \"detailInput\"});\n\n\t\tBinaryClassMetrics metrics = new EvalBinaryClassBatchOp()\n\t\t\t.setLabelCol(\"label\")\n\t\t\t.setPredictionDetailCol(\"detailInput\")\n\t\t\t.linkFrom(source)\n\t\t\t.collectMetrics();\n\n\t\tAssert.assertEquals(0.769, metrics.getPrc(), 0.01);\n\t\tAssert.assertEquals(0.371, metrics.getKs(), 0.01);\n\t\tAssert.assertEquals(0.657, metrics.getAuc(), 0.01);\n\t\tAssert.assertEquals(0.666, metrics.getAccuracy(), 0.01);\n\t\tAssert.assertEquals(0.314, metrics.getMacroKappa(), 0.01);\n\t\tAssert.assertEquals(0.666, metrics.getMicroPrecision(), 0.01);\n\t\tAssert.assertEquals(0.666, metrics.getWeightedRecall(), 0.01);\n\n\t\tmetrics.saveRocCurveAsImage(folder.getRoot().toPath() + \"rocCurve.png\", true);\n\t\tmetrics.saveKSAsImage(folder.getRoot().toPath() + \"ks.png\", true);\n\t\tmetrics.saveLiftChartAsImage(folder.getRoot().toPath() + \"liftchart.png\", true);\n\t\tmetrics.saveRecallPrecisionCurveAsImage(folder.getRoot().toPath() + \"recallPrecision.png\", true);\n\t\tmetrics.saveLorenzCurveAsImage(folder.getRoot().toPath() + \"lorenzCurve.png\", true);\n\t}", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "EvalBinaryClassBatchOpTest.test()", "testcase": true, "constructor": false, "invocations": ["of", "of", "of", "of", "of", "of", "of", "of", "of", "of", "of", "of", "of", "collectMetrics", "linkFrom", "setPredictionDetailCol", "setLabelCol", "assertEquals", "getPrc", "assertEquals", "getKs", "assertEquals", "getAuc", "assertEquals", "getAccuracy", "assertEquals", "getMacroKappa", "assertEquals", "getMicroPrecision", "assertEquals", "getWeightedRecall", "saveRocCurveAsImage", "toPath", "getRoot", "saveKSAsImage", "toPath", "getRoot", "saveLiftChartAsImage", "toPath", "getRoot", "saveRecallPrecisionCurveAsImage", "toPath", "getRoot", "saveLorenzCurveAsImage", "toPath", "getRoot"]}, "focal_class": {"identifier": "EvalBinaryClassBatchOp", "superclass": "extends BatchOperator<EvalBinaryClassBatchOp>", "interfaces": "implements\n\tEvalBinaryClassParams<EvalBinaryClassBatchOp>, EvaluationMetricsCollector<BinaryClassMetrics, EvalBinaryClassBatchOp>", "fields": [{"original_string": "private static String LABELS = \"labels\";", "modifier": "private static", "type": "String", "declarator": "LABELS = \"labels\"", "var_name": "LABELS"}], "methods": [{"identifier": "EvalBinaryClassBatchOp", "parameters": "()", "modifiers": "public", "return": "", "signature": " EvalBinaryClassBatchOp()", "full_signature": "public  EvalBinaryClassBatchOp()", "class_method_signature": "EvalBinaryClassBatchOp.EvalBinaryClassBatchOp()", "testcase": false, "constructor": true}, {"identifier": "EvalBinaryClassBatchOp", "parameters": "(Params params)", "modifiers": "public", "return": "", "signature": " EvalBinaryClassBatchOp(Params params)", "full_signature": "public  EvalBinaryClassBatchOp(Params params)", "class_method_signature": "EvalBinaryClassBatchOp.EvalBinaryClassBatchOp(Params params)", "testcase": false, "constructor": true}, {"identifier": "createMetrics", "parameters": "(List<Row> rows)", "modifiers": "@Override public", "return": "BinaryClassMetrics", "signature": "BinaryClassMetrics createMetrics(List<Row> rows)", "full_signature": "@Override public BinaryClassMetrics createMetrics(List<Row> rows)", "class_method_signature": "EvalBinaryClassBatchOp.createMetrics(List<Row> rows)", "testcase": false, "constructor": false}, {"identifier": "linkFrom", "parameters": "(BatchOperator<?>... inputs)", "modifiers": "@Override public", "return": "EvalBinaryClassBatchOp", "signature": "EvalBinaryClassBatchOp linkFrom(BatchOperator<?>... inputs)", "full_signature": "@Override public EvalBinaryClassBatchOp linkFrom(BatchOperator<?>... inputs)", "class_method_signature": "EvalBinaryClassBatchOp.linkFrom(BatchOperator<?>... inputs)", "testcase": false, "constructor": false}, {"identifier": "calLabelPredDetailLocal", "parameters": "(DataSet<Row> data,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   final String positiveValue,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   TypeInformation labelType)", "modifiers": "private static", "return": "DataSet<BaseMetricsSummary>", "signature": "DataSet<BaseMetricsSummary> calLabelPredDetailLocal(DataSet<Row> data,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   final String positiveValue,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   TypeInformation labelType)", "full_signature": "private static DataSet<BaseMetricsSummary> calLabelPredDetailLocal(DataSet<Row> data,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   final String positiveValue,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   TypeInformation labelType)", "class_method_signature": "EvalBinaryClassBatchOp.calLabelPredDetailLocal(DataSet<Row> data,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   final String positiveValue,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   TypeInformation labelType)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/batch/evaluation/EvalBinaryClassBatchOp.java"}, "focal_method": {"identifier": "linkFrom", "parameters": "(BatchOperator<?>... inputs)", "modifiers": "@Override public", "return": "EvalBinaryClassBatchOp", "body": "@Override\n\tpublic EvalBinaryClassBatchOp linkFrom(BatchOperator<?>... inputs){\n\t\tBatchOperator<?> in = checkAndGetFirst(inputs);\n\t\tString labelColName = this.get(EvalMultiClassParams.LABEL_COL);\n\t\tTypeInformation labelType = TableUtil.findColTypeWithAssertAndHint(in.getSchema(), labelColName);\n\t\tString positiveValue = this.get(EvalBinaryClassParams.POS_LABEL_VAL_STR);\n\n\t\tPreconditions.checkArgument(getParams().contains(EvalBinaryClassParams.PREDICTION_DETAIL_COL),\n\t\t\t\"Binary Evaluation must give predictionDetailCol!\");\n\n\t\tString predDetailColName = this.get(EvalMultiClassParams.PREDICTION_DETAIL_COL);\n\t\tTableUtil.assertSelectedColExist(in.getColNames(), labelColName, predDetailColName);\n\n\t\tDataSet<Row> data = in.select(new String[] {labelColName, predDetailColName}).getDataSet();\n\t\tDataSet<BaseMetricsSummary> res = calLabelPredDetailLocal(data, positiveValue, labelType);\n\t\tDataSet<BaseMetricsSummary> metrics = res\n\t\t\t.reduce(new EvaluationUtil.ReduceBaseMetrics());\n\n\t\tthis.setOutput(metrics.flatMap(new EvaluationUtil.SaveDataAsParams()),\n\t\t\tnew String[] {\"Data\"}, new TypeInformation[] {Types.STRING});\n\n\t\treturn this;\n\t}", "signature": "EvalBinaryClassBatchOp linkFrom(BatchOperator<?>... inputs)", "full_signature": "@Override public EvalBinaryClassBatchOp linkFrom(BatchOperator<?>... inputs)", "class_method_signature": "EvalBinaryClassBatchOp.linkFrom(BatchOperator<?>... inputs)", "testcase": false, "constructor": false, "invocations": ["checkAndGetFirst", "get", "findColTypeWithAssertAndHint", "getSchema", "get", "checkArgument", "contains", "getParams", "get", "assertSelectedColExist", "getColNames", "getDataSet", "select", "calLabelPredDetailLocal", "reduce", "setOutput", "flatMap"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}