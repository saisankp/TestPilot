{"test_class": {"identifier": "XMLSplitterSerialisationHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "taverna-wsdl-generic/src/test/java/org/apache/taverna/wsdl/xmlsplitter/XMLSplitterSerialisationHelperTest.java"}, "test_case": {"identifier": "testCorrectQName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCorrectQName() throws Exception {\n\t\tTypeDescriptor desc = XMLSplitterSerialisationHelper\n\t\t\t\t.extensionXMLToTypeDescriptor(new SAXBuilder().build(\n\t\t\t\t\t\tnew StringReader(eInfoXML())).getRootElement());\n\t\tassertEquals(\"NamespaceURI is incorrect\",\n\t\t\t\t\"http://www.ncbi.nlm.nih.gov/soap/eutils/espell\", desc\n\t\t\t\t\t\t.getQname().getNamespaceURI());\n\t\tassertEquals(\"Localpart is incorrect\", \"eSpellRequest\", desc.getQname()\n\t\t\t\t.getLocalPart());\n\t}", "signature": "void testCorrectQName()", "full_signature": "@Test public void testCorrectQName()", "class_method_signature": "XMLSplitterSerialisationHelperTest.testCorrectQName()", "testcase": true, "constructor": false, "invocations": ["extensionXMLToTypeDescriptor", "getRootElement", "build", "eInfoXML", "assertEquals", "getNamespaceURI", "getQname", "assertEquals", "getLocalPart", "getQname"]}, "focal_class": {"identifier": "XMLSplitterSerialisationHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final static Namespace XScuflNS = Namespace.getNamespace(\"s\",\n\t\t\t\"http://org.embl.ebi.escience/xscufl/0.1alpha\");", "modifier": "public final static", "type": "Namespace", "declarator": "XScuflNS = Namespace.getNamespace(\"s\",\n\t\t\t\"http://org.embl.ebi.escience/xscufl/0.1alpha\")", "var_name": "XScuflNS"}, {"original_string": "private static Logger logger = Logger\n\t\t\t.getLogger(XMLSplitterSerialisationHelper.class);", "modifier": "private static", "type": "Logger", "declarator": "logger = Logger\n\t\t\t.getLogger(XMLSplitterSerialisationHelper.class)", "var_name": "logger"}], "methods": [{"identifier": "typeDescriptorToExtensionXML", "parameters": "(TypeDescriptor descriptor)", "modifiers": "public static", "return": "Element", "signature": "Element typeDescriptorToExtensionXML(TypeDescriptor descriptor)", "full_signature": "public static Element typeDescriptorToExtensionXML(TypeDescriptor descriptor)", "class_method_signature": "XMLSplitterSerialisationHelper.typeDescriptorToExtensionXML(TypeDescriptor descriptor)", "testcase": false, "constructor": false}, {"identifier": "extensionXMLToTypeDescriptor", "parameters": "(Element element)", "modifiers": "public static", "return": "TypeDescriptor", "signature": "TypeDescriptor extensionXMLToTypeDescriptor(Element element)", "full_signature": "public static TypeDescriptor extensionXMLToTypeDescriptor(Element element)", "class_method_signature": "XMLSplitterSerialisationHelper.extensionXMLToTypeDescriptor(Element element)", "testcase": false, "constructor": false}, {"identifier": "constructElementForArrayType", "parameters": "(\n\t\t\tArrayTypeDescriptor descriptor, List<String> existingsTypes)", "modifiers": "private static", "return": "Element", "signature": "Element constructElementForArrayType(\n\t\t\tArrayTypeDescriptor descriptor, List<String> existingsTypes)", "full_signature": "private static Element constructElementForArrayType(\n\t\t\tArrayTypeDescriptor descriptor, List<String> existingsTypes)", "class_method_signature": "XMLSplitterSerialisationHelper.constructElementForArrayType(\n\t\t\tArrayTypeDescriptor descriptor, List<String> existingsTypes)", "testcase": false, "constructor": false}, {"identifier": "constructElementForComplexType", "parameters": "(\n\t\t\tComplexTypeDescriptor descriptor, List<String> existingsTypes)", "modifiers": "private static", "return": "Element", "signature": "Element constructElementForComplexType(\n\t\t\tComplexTypeDescriptor descriptor, List<String> existingsTypes)", "full_signature": "private static Element constructElementForComplexType(\n\t\t\tComplexTypeDescriptor descriptor, List<String> existingsTypes)", "class_method_signature": "XMLSplitterSerialisationHelper.constructElementForComplexType(\n\t\t\tComplexTypeDescriptor descriptor, List<String> existingsTypes)", "testcase": false, "constructor": false}, {"identifier": "populateElement", "parameters": "(Element element,\n\t\t\tTypeDescriptor descriptor)", "modifiers": "private static", "return": "void", "signature": "void populateElement(Element element,\n\t\t\tTypeDescriptor descriptor)", "full_signature": "private static void populateElement(Element element,\n\t\t\tTypeDescriptor descriptor)", "class_method_signature": "XMLSplitterSerialisationHelper.populateElement(Element element,\n\t\t\tTypeDescriptor descriptor)", "testcase": false, "constructor": false}, {"identifier": "buildTypeDescriptorFromElement", "parameters": "(\n\t\t\tElement element, HashMap<String, TypeDescriptor> existingsTypes)", "modifiers": "private static", "return": "TypeDescriptor", "signature": "TypeDescriptor buildTypeDescriptorFromElement(\n\t\t\tElement element, HashMap<String, TypeDescriptor> existingsTypes)", "full_signature": "private static TypeDescriptor buildTypeDescriptorFromElement(\n\t\t\tElement element, HashMap<String, TypeDescriptor> existingsTypes)", "class_method_signature": "XMLSplitterSerialisationHelper.buildTypeDescriptorFromElement(\n\t\t\tElement element, HashMap<String, TypeDescriptor> existingsTypes)", "testcase": false, "constructor": false}, {"identifier": "createFromCache", "parameters": "(TypeDescriptor descriptor,\n\t\t\tElement element)", "modifiers": "private static", "return": "TypeDescriptor", "signature": "TypeDescriptor createFromCache(TypeDescriptor descriptor,\n\t\t\tElement element)", "full_signature": "private static TypeDescriptor createFromCache(TypeDescriptor descriptor,\n\t\t\tElement element)", "class_method_signature": "XMLSplitterSerialisationHelper.createFromCache(TypeDescriptor descriptor,\n\t\t\tElement element)", "testcase": false, "constructor": false}, {"identifier": "populateDescriptor", "parameters": "(Element element,\n\t\t\tTypeDescriptor result)", "modifiers": "private static", "return": "void", "signature": "void populateDescriptor(Element element,\n\t\t\tTypeDescriptor result)", "full_signature": "private static void populateDescriptor(Element element,\n\t\t\tTypeDescriptor result)", "class_method_signature": "XMLSplitterSerialisationHelper.populateDescriptor(Element element,\n\t\t\tTypeDescriptor result)", "testcase": false, "constructor": false}], "file": "taverna-wsdl-generic/src/main/java/org/apache/taverna/wsdl/xmlsplitter/XMLSplitterSerialisationHelper.java"}, "focal_method": {"identifier": "extensionXMLToTypeDescriptor", "parameters": "(Element element)", "modifiers": "public static", "return": "TypeDescriptor", "body": "public static TypeDescriptor extensionXMLToTypeDescriptor(Element element) {\n\t\tElement child = (Element) element.getChildren().get(0);\n\t\treturn buildTypeDescriptorFromElement(child,\n\t\t\t\tnew HashMap<String, TypeDescriptor>());\n\t}", "signature": "TypeDescriptor extensionXMLToTypeDescriptor(Element element)", "full_signature": "public static TypeDescriptor extensionXMLToTypeDescriptor(Element element)", "class_method_signature": "XMLSplitterSerialisationHelper.extensionXMLToTypeDescriptor(Element element)", "testcase": false, "constructor": false, "invocations": ["get", "getChildren", "buildTypeDescriptorFromElement"]}, "repository": {"repo_id": 30956938, "url": "https://github.com/apache/incubator-taverna-common-activities", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 8, "size": 5696, "license": "licensed"}}