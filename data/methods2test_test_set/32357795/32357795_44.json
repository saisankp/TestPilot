{"test_class": {"identifier": "TopicNameComparatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TopicMapIF topicmap;", "modifier": "private", "type": "TopicMapIF", "declarator": "topicmap", "var_name": "topicmap"}, {"original_string": "private TopicIF topic;", "modifier": "private", "type": "TopicIF", "declarator": "topic", "var_name": "topic"}, {"original_string": "private TopicNameIF untyped;", "modifier": "private", "type": "TopicNameIF", "declarator": "untyped", "var_name": "untyped"}, {"original_string": "private TopicNameIF untyped_scoped;", "modifier": "private", "type": "TopicNameIF", "declarator": "untyped_scoped", "var_name": "untyped_scoped"}, {"original_string": "private TopicNameIF typed;", "modifier": "private", "type": "TopicNameIF", "declarator": "typed", "var_name": "typed"}, {"original_string": "private TopicNameIF typed_scoped;", "modifier": "private", "type": "TopicNameIF", "declarator": "typed_scoped", "var_name": "typed_scoped"}, {"original_string": "private TopicIF scope;", "modifier": "private", "type": "TopicIF", "declarator": "scope", "var_name": "scope"}], "file": "ontopia-engine/src/test/java/net/ontopia/topicmaps/utils/TopicNameComparatorTest.java"}, "test_case": {"identifier": "testIssue439", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testIssue439() {\n    TopicMapIF tm = new InMemoryTopicMapStore().getTopicMap();\n    TopicIF topic = tm.getBuilder().makeTopic();\n    TopicNameIF name1 = tm.getBuilder().makeTopicName(topic, topic, \"value1\");\n    TopicNameIF name2 = tm.getBuilder().makeTopicName(topic, topic, \"value2\");\n    Assert.assertEquals(-1, new TopicNameComparator(Collections.EMPTY_LIST).compare(name1, name2));\n  }", "signature": "void testIssue439()", "full_signature": "@Test public void testIssue439()", "class_method_signature": "TopicNameComparatorTest.testIssue439()", "testcase": true, "constructor": false, "invocations": ["getTopicMap", "makeTopic", "getBuilder", "makeTopicName", "getBuilder", "makeTopicName", "getBuilder", "assertEquals", "compare"]}, "focal_class": {"identifier": "TopicNameComparator", "superclass": "extends ScopedIFComparator<TopicNameIF>", "interfaces": "", "fields": [], "methods": [{"identifier": "TopicNameComparator", "parameters": "(Collection<TopicIF> scope)", "modifiers": "", "return": "", "signature": " TopicNameComparator(Collection<TopicIF> scope)", "full_signature": "  TopicNameComparator(Collection<TopicIF> scope)", "class_method_signature": "TopicNameComparator.TopicNameComparator(Collection<TopicIF> scope)", "testcase": false, "constructor": true}, {"identifier": "compare", "parameters": "(TopicNameIF o1, TopicNameIF o2)", "modifiers": "@Override public", "return": "int", "signature": "int compare(TopicNameIF o1, TopicNameIF o2)", "full_signature": "@Override public int compare(TopicNameIF o1, TopicNameIF o2)", "class_method_signature": "TopicNameComparator.compare(TopicNameIF o1, TopicNameIF o2)", "testcase": false, "constructor": false}], "file": "ontopia-engine/src/main/java/net/ontopia/topicmaps/utils/TopicNameComparator.java"}, "focal_method": {"identifier": "compare", "parameters": "(TopicNameIF o1, TopicNameIF o2)", "modifiers": "@Override public", "return": "int", "body": "@Override\n  public int compare(TopicNameIF o1, TopicNameIF o2) {\n    TopicMapIF tm = o1.getTopicMap();\n\n    TopicIF t1 = o1.getType();\n    TopicIF t2 = o2.getType();\n    \n    // check for default type\n    TopicIF untypedname = tm.getTopicBySubjectIdentifier(PSI.getSAMNameType());\n    if (untypedname == null) {\n      t1 = null;\n      t2 = null;\n    } else {\n      if (untypedname.equals(t1)) t1 = null;\n      if (untypedname.equals(t2)) t2 = null;\n    }\n\n    // untyped should sort before typed\n    if (t1 == null) {\n      if (t2 != null) return -1;\n    } else {\n      if (t2 == null) return 1;\n    }\n    \n    return super.compare(o1, o2);\n  }", "signature": "int compare(TopicNameIF o1, TopicNameIF o2)", "full_signature": "@Override public int compare(TopicNameIF o1, TopicNameIF o2)", "class_method_signature": "TopicNameComparator.compare(TopicNameIF o1, TopicNameIF o2)", "testcase": false, "constructor": false, "invocations": ["getTopicMap", "getType", "getType", "getTopicBySubjectIdentifier", "getSAMNameType", "equals", "equals", "compare"]}, "repository": {"repo_id": 32357795, "url": "https://github.com/ontopia/ontopia", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 35, "size": 68637, "license": "licensed"}}