{"test_class": {"identifier": "BiconnectivityInspectorTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [], "file": "legacy/src/test/java/org/openscience/cdk/graph/BiconnectivityInspectorTest.java"}, "test_case": {"identifier": "testBiconnectedSets", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBiconnectedSets() {\n        SimpleGraph g = new SimpleGraph();\n\n        g.addVertex(\"a\");\n        g.addVertex(\"b\");\n        g.addVertex(\"c\");\n        g.addVertex(\"d\");\n        g.addVertex(\"e\");\n        g.addVertex(\"f\");\n        g.addVertex(\"g\");\n        g.addVertex(\"h\");\n        g.addVertex(\"i\");\n        g.addVertex(\"j\");\n        g.addVertex(\"k\");\n\n        g.addEdge(\"a\", \"b\");\n        g.addEdge(\"a\", \"c\");\n        g.addEdge(\"b\", \"c\");\n        g.addEdge(\"b\", \"d\");\n        g.addEdge(\"c\", \"d\");\n\n        g.addEdge(\"d\", \"e\");\n\n        g.addEdge(\"d\", \"g\");\n\n        g.addEdge(\"e\", \"f\");\n        g.addEdge(\"e\", \"h\");\n        g.addEdge(\"f\", \"h\");\n\n        g.addEdge(\"i\", \"j\");\n        g.addEdge(\"i\", \"k\");\n        g.addEdge(\"j\", \"k\");\n\n        BiconnectivityInspector bci = new BiconnectivityInspector(g);\n        List connectedSets = bci.biconnectedSets();\n\n        Assert.assertTrue(connectedSets.size() == 5);\n    }", "signature": "void testBiconnectedSets()", "full_signature": "@Test public void testBiconnectedSets()", "class_method_signature": "BiconnectivityInspectorTest.testBiconnectedSets()", "testcase": true, "constructor": false, "invocations": ["addVertex", "addVertex", "addVertex", "addVertex", "addVertex", "addVertex", "addVertex", "addVertex", "addVertex", "addVertex", "addVertex", "addEdge", "addEdge", "addEdge", "addEdge", "addEdge", "addEdge", "addEdge", "addEdge", "addEdge", "addEdge", "addEdge", "addEdge", "addEdge", "biconnectedSets", "assertTrue", "size"]}, "focal_class": {"identifier": "BiconnectivityInspector", "superclass": "", "interfaces": "", "fields": [{"original_string": "private List            biconnectedSets;", "modifier": "private", "type": "List", "declarator": "biconnectedSets", "var_name": "biconnectedSets"}, {"original_string": "private UndirectedGraph graph;", "modifier": "private", "type": "UndirectedGraph", "declarator": "graph", "var_name": "graph"}], "methods": [{"identifier": "BiconnectivityInspector", "parameters": "(UndirectedGraph g)", "modifiers": "public", "return": "", "signature": " BiconnectivityInspector(UndirectedGraph g)", "full_signature": "public  BiconnectivityInspector(UndirectedGraph g)", "class_method_signature": "BiconnectivityInspector.BiconnectivityInspector(UndirectedGraph g)", "testcase": false, "constructor": true}, {"identifier": "lazyFindBiconnectedSets", "parameters": "()", "modifiers": "private", "return": "List", "signature": "List lazyFindBiconnectedSets()", "full_signature": "private List lazyFindBiconnectedSets()", "class_method_signature": "BiconnectivityInspector.lazyFindBiconnectedSets()", "testcase": false, "constructor": false}, {"identifier": "biconnectedSets", "parameters": "()", "modifiers": "public", "return": "List", "signature": "List biconnectedSets()", "full_signature": "public List biconnectedSets()", "class_method_signature": "BiconnectivityInspector.biconnectedSets()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void init()", "full_signature": "private void init()", "class_method_signature": "BiconnectivityInspector.init()", "testcase": false, "constructor": false}, {"identifier": "edgeAdded", "parameters": "(GraphEdgeChangeEvent e)", "modifiers": "public", "return": "void", "signature": "void edgeAdded(GraphEdgeChangeEvent e)", "full_signature": "public void edgeAdded(GraphEdgeChangeEvent e)", "class_method_signature": "BiconnectivityInspector.edgeAdded(GraphEdgeChangeEvent e)", "testcase": false, "constructor": false}, {"identifier": "edgeRemoved", "parameters": "(GraphEdgeChangeEvent e)", "modifiers": "public", "return": "void", "signature": "void edgeRemoved(GraphEdgeChangeEvent e)", "full_signature": "public void edgeRemoved(GraphEdgeChangeEvent e)", "class_method_signature": "BiconnectivityInspector.edgeRemoved(GraphEdgeChangeEvent e)", "testcase": false, "constructor": false}, {"identifier": "vertexAdded", "parameters": "(GraphVertexChangeEvent e)", "modifiers": "public", "return": "void", "signature": "void vertexAdded(GraphVertexChangeEvent e)", "full_signature": "public void vertexAdded(GraphVertexChangeEvent e)", "class_method_signature": "BiconnectivityInspector.vertexAdded(GraphVertexChangeEvent e)", "testcase": false, "constructor": false}, {"identifier": "vertexRemoved", "parameters": "(GraphVertexChangeEvent e)", "modifiers": "public", "return": "void", "signature": "void vertexRemoved(GraphVertexChangeEvent e)", "full_signature": "public void vertexRemoved(GraphVertexChangeEvent e)", "class_method_signature": "BiconnectivityInspector.vertexRemoved(GraphVertexChangeEvent e)", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/org/openscience/cdk/graph/BiconnectivityInspector.java"}, "focal_method": {"identifier": "biconnectedSets", "parameters": "()", "modifiers": "public", "return": "List", "body": "public List biconnectedSets() {\n        return lazyFindBiconnectedSets();\n    }", "signature": "List biconnectedSets()", "full_signature": "public List biconnectedSets()", "class_method_signature": "BiconnectivityInspector.biconnectedSets()", "testcase": false, "constructor": false, "invocations": ["lazyFindBiconnectedSets"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}