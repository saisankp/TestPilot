{"test_class": {"identifier": "CreatePoolCommandTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String TEST_PROVISIONR_ID = \"amazon\";", "modifier": "public static final", "type": "String", "declarator": "TEST_PROVISIONR_ID = \"amazon\"", "var_name": "TEST_PROVISIONR_ID"}, {"original_string": "public static final String TEST_BUSINESS_KEY = \"j-123\";", "modifier": "public static final", "type": "String", "declarator": "TEST_BUSINESS_KEY = \"j-123\"", "var_name": "TEST_BUSINESS_KEY"}, {"original_string": "@Rule\n    public ExpectedException exception = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "exception = ExpectedException.none()", "var_name": "exception"}], "file": "karaf/commands/src/test/java/com/axemblr/provisionr/commands/CreatePoolCommandTest.java"}, "test_case": {"identifier": "testProvisioningServiceNotFound", "parameters": "()", "modifiers": "@Test(expected = NoSuchElementException.class) public", "return": "void", "body": "@Test(expected = NoSuchElementException.class)\n    public void testProvisioningServiceNotFound() throws Exception {\n        CreatePoolCommand command = new CreatePoolCommand(Collections.<Provisionr>emptyList(),\n            Collections.<PoolTemplate>emptyList());\n        command.setId(\"dummy\");\n\n        CommandSession session = mock(CommandSession.class);\n        command.execute(session);\n    }", "signature": "void testProvisioningServiceNotFound()", "full_signature": "@Test(expected = NoSuchElementException.class) public void testProvisioningServiceNotFound()", "class_method_signature": "CreatePoolCommandTest.testProvisioningServiceNotFound()", "testcase": true, "constructor": false, "invocations": ["emptyList", "emptyList", "setId", "mock", "execute"]}, "focal_class": {"identifier": "CreatePoolCommand", "superclass": "extends OsgiCommandSupport", "interfaces": "", "fields": [{"original_string": "@Option(name = \"--id\", description = \"Service ID (use provisionr:services)\", required = true)\n    private String id;", "modifier": "@Option(name = \"--id\", description = \"Service ID (use provisionr:services)\", required = true)\n    private", "type": "String", "declarator": "id", "var_name": "id"}, {"original_string": "@Option(name = \"-k\", aliases = \"--key\", description = \"Unique business identifier for this pool\", required = true)\n    private String key;", "modifier": "@Option(name = \"-k\", aliases = \"--key\", description = \"Unique business identifier for this pool\", required = true)\n    private", "type": "String", "declarator": "key", "var_name": "key"}, {"original_string": "@Option(name = \"-s\", aliases = \"--size\", description = \"Expected pool size\")\n    private int size = 1;", "modifier": "@Option(name = \"-s\", aliases = \"--size\", description = \"Expected pool size\")\n    private", "type": "int", "declarator": "size = 1", "var_name": "size"}, {"original_string": "@Option(name = \"-t\", aliases = \"--template\", description = \"Pool pre-configured template\")\n    private String template;", "modifier": "@Option(name = \"-t\", aliases = \"--template\", description = \"Pool pre-configured template\")\n    private", "type": "String", "declarator": "template", "var_name": "template"}, {"original_string": "@Option(name = \"-h\", aliases = \"--hardware-type\", description = \"Virtual machine hardware type\")\n    private String hardwareType = \"t1.micro\";", "modifier": "@Option(name = \"-h\", aliases = \"--hardware-type\", description = \"Virtual machine hardware type\")\n    private", "type": "String", "declarator": "hardwareType = \"t1.micro\"", "var_name": "hardwareType"}, {"original_string": "@Option(name = \"--timeout\", description = \"Timeout in seconds for the pool's initialization steps. \" +\n        \"If not specified, defaults to 600 seconds.\")\n    private int bootstrapTimeout = 600;", "modifier": "@Option(name = \"--timeout\", description = \"Timeout in seconds for the pool's initialization steps. \" +\n        \"If not specified, defaults to 600 seconds.\")\n    private", "type": "int", "declarator": "bootstrapTimeout = 600", "var_name": "bootstrapTimeout"}, {"original_string": "@Option(name = \"--volume\", description = \"Block devices that will be attached to each instance. \" +\n        \"(multi-valued) Expects the following format: [mapping]:[size in GB]. \", multiValued = true)\n    private List<String> blockDeviceOptions = Lists.newArrayList();", "modifier": "@Option(name = \"--volume\", description = \"Block devices that will be attached to each instance. \" +\n        \"(multi-valued) Expects the following format: [mapping]:[size in GB]. \", multiValued = true)\n    private", "type": "List<String>", "declarator": "blockDeviceOptions = Lists.newArrayList()", "var_name": "blockDeviceOptions"}, {"original_string": "@Option(name = \"-o\", aliases = \"--provider-options\", description = \"Provider-specific options (multi-valued).\" +\n        \"Expects either the key=value format or just plain key. If value is not specified, defaults to 'true'.\" +\n        \"Supported values: spotBid=x.xxx (Amazon).\", multiValued = true)\n    private List<String> providerOptions = Lists.newArrayList();", "modifier": "@Option(name = \"-o\", aliases = \"--provider-options\", description = \"Provider-specific options (multi-valued).\" +\n        \"Expects either the key=value format or just plain key. If value is not specified, defaults to 'true'.\" +\n        \"Supported values: spotBid=x.xxx (Amazon).\", multiValued = true)\n    private", "type": "List<String>", "declarator": "providerOptions = Lists.newArrayList()", "var_name": "providerOptions"}, {"original_string": "@Option(name = \"--port\", description = \"Firewall port that need to be open for any TCP traffic \" +\n        \"(multi-valued). SSH (22) is always open by default.\", multiValued = true)\n    private List<Integer> ports = Lists.newArrayList();", "modifier": "@Option(name = \"--port\", description = \"Firewall port that need to be open for any TCP traffic \" +\n        \"(multi-valued). SSH (22) is always open by default.\", multiValued = true)\n    private", "type": "List<Integer>", "declarator": "ports = Lists.newArrayList()", "var_name": "ports"}, {"original_string": "@Option(name = \"--package\", description = \"Package to install by default (multi-valued)\",\n        multiValued = true)\n    private List<String> packages = Lists.newArrayList();", "modifier": "@Option(name = \"--package\", description = \"Package to install by default (multi-valued)\",\n        multiValued = true)\n    private", "type": "List<String>", "declarator": "packages = Lists.newArrayList()", "var_name": "packages"}, {"original_string": "@Option(name = \"--cache\", description = \"Cache base operating system image (including files & packages)\")\n    private boolean cacheBaseImage = false;", "modifier": "@Option(name = \"--cache\", description = \"Cache base operating system image (including files & packages)\")\n    private", "type": "boolean", "declarator": "cacheBaseImage = false", "var_name": "cacheBaseImage"}, {"original_string": "private final List<Provisionr> services;", "modifier": "private final", "type": "List<Provisionr>", "declarator": "services", "var_name": "services"}, {"original_string": "private final List<PoolTemplate> templates;", "modifier": "private final", "type": "List<PoolTemplate>", "declarator": "templates", "var_name": "templates"}], "methods": [{"identifier": "CreatePoolCommand", "parameters": "(List<Provisionr> services, List<PoolTemplate> templates)", "modifiers": "public", "return": "", "signature": " CreatePoolCommand(List<Provisionr> services, List<PoolTemplate> templates)", "full_signature": "public  CreatePoolCommand(List<Provisionr> services, List<PoolTemplate> templates)", "class_method_signature": "CreatePoolCommand.CreatePoolCommand(List<Provisionr> services, List<PoolTemplate> templates)", "testcase": false, "constructor": true}, {"identifier": "doExecute", "parameters": "()", "modifiers": "@Override protected", "return": "Object", "signature": "Object doExecute()", "full_signature": "@Override protected Object doExecute()", "class_method_signature": "CreatePoolCommand.doExecute()", "testcase": false, "constructor": false}, {"identifier": "createPoolFromArgumentsAndServiceDefaults", "parameters": "(Provisionr service)", "modifiers": "@VisibleForTesting", "return": "Pool", "signature": "Pool createPoolFromArgumentsAndServiceDefaults(Provisionr service)", "full_signature": "@VisibleForTesting Pool createPoolFromArgumentsAndServiceDefaults(Provisionr service)", "class_method_signature": "CreatePoolCommand.createPoolFromArgumentsAndServiceDefaults(Provisionr service)", "testcase": false, "constructor": false}, {"identifier": "parseBlockDeviceOptions", "parameters": "(List<String> options)", "modifiers": "private", "return": "List<BlockDevice>", "signature": "List<BlockDevice> parseBlockDeviceOptions(List<String> options)", "full_signature": "private List<BlockDevice> parseBlockDeviceOptions(List<String> options)", "class_method_signature": "CreatePoolCommand.parseBlockDeviceOptions(List<String> options)", "testcase": false, "constructor": false}, {"identifier": "parseProviderOptions", "parameters": "(List<String> providerOptions)", "modifiers": "private", "return": "Map<String, String>", "signature": "Map<String, String> parseProviderOptions(List<String> providerOptions)", "full_signature": "private Map<String, String> parseProviderOptions(List<String> providerOptions)", "class_method_signature": "CreatePoolCommand.parseProviderOptions(List<String> providerOptions)", "testcase": false, "constructor": false}, {"identifier": "formatPortsAsIngressRules", "parameters": "()", "modifiers": "private", "return": "Set<Rule>", "signature": "Set<Rule> formatPortsAsIngressRules()", "full_signature": "private Set<Rule> formatPortsAsIngressRules()", "class_method_signature": "CreatePoolCommand.formatPortsAsIngressRules()", "testcase": false, "constructor": false}, {"identifier": "collectCurrentUserCredentialsForAdminAccess", "parameters": "()", "modifiers": "protected", "return": "AdminAccess", "signature": "AdminAccess collectCurrentUserCredentialsForAdminAccess()", "full_signature": "protected AdminAccess collectCurrentUserCredentialsForAdminAccess()", "class_method_signature": "CreatePoolCommand.collectCurrentUserCredentialsForAdminAccess()", "testcase": false, "constructor": false}, {"identifier": "setId", "parameters": "(String id)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void setId(String id)", "full_signature": "@VisibleForTesting void setId(String id)", "class_method_signature": "CreatePoolCommand.setId(String id)", "testcase": false, "constructor": false}, {"identifier": "setKey", "parameters": "(String key)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void setKey(String key)", "full_signature": "@VisibleForTesting void setKey(String key)", "class_method_signature": "CreatePoolCommand.setKey(String key)", "testcase": false, "constructor": false}, {"identifier": "setSize", "parameters": "(int size)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void setSize(int size)", "full_signature": "@VisibleForTesting void setSize(int size)", "class_method_signature": "CreatePoolCommand.setSize(int size)", "testcase": false, "constructor": false}, {"identifier": "setTemplate", "parameters": "(String template)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void setTemplate(String template)", "full_signature": "@VisibleForTesting void setTemplate(String template)", "class_method_signature": "CreatePoolCommand.setTemplate(String template)", "testcase": false, "constructor": false}, {"identifier": "setHardwareType", "parameters": "(String hardwareType)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void setHardwareType(String hardwareType)", "full_signature": "@VisibleForTesting void setHardwareType(String hardwareType)", "class_method_signature": "CreatePoolCommand.setHardwareType(String hardwareType)", "testcase": false, "constructor": false}, {"identifier": "setPorts", "parameters": "(List<Integer> ports)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void setPorts(List<Integer> ports)", "full_signature": "@VisibleForTesting void setPorts(List<Integer> ports)", "class_method_signature": "CreatePoolCommand.setPorts(List<Integer> ports)", "testcase": false, "constructor": false}, {"identifier": "setPackages", "parameters": "(List<String> packages)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void setPackages(List<String> packages)", "full_signature": "@VisibleForTesting void setPackages(List<String> packages)", "class_method_signature": "CreatePoolCommand.setPackages(List<String> packages)", "testcase": false, "constructor": false}, {"identifier": "setProviderOptions", "parameters": "(List<String> providerOptions)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void setProviderOptions(List<String> providerOptions)", "full_signature": "@VisibleForTesting void setProviderOptions(List<String> providerOptions)", "class_method_signature": "CreatePoolCommand.setProviderOptions(List<String> providerOptions)", "testcase": false, "constructor": false}, {"identifier": "setBlockDeviceOptions", "parameters": "(List<String> blockDeviceOptions)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void setBlockDeviceOptions(List<String> blockDeviceOptions)", "full_signature": "@VisibleForTesting void setBlockDeviceOptions(List<String> blockDeviceOptions)", "class_method_signature": "CreatePoolCommand.setBlockDeviceOptions(List<String> blockDeviceOptions)", "testcase": false, "constructor": false}, {"identifier": "setCacheBaseImage", "parameters": "(boolean cacheBaseImage)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void setCacheBaseImage(boolean cacheBaseImage)", "full_signature": "@VisibleForTesting void setCacheBaseImage(boolean cacheBaseImage)", "class_method_signature": "CreatePoolCommand.setCacheBaseImage(boolean cacheBaseImage)", "testcase": false, "constructor": false}], "file": "karaf/commands/src/main/java/com/axemblr/provisionr/commands/CreatePoolCommand.java"}, "focal_method": {"identifier": "setId", "parameters": "(String id)", "modifiers": "@VisibleForTesting", "return": "void", "body": "@VisibleForTesting\n    void setId(String id) {\n        this.id = checkNotNull(id, \"id is null\");\n    }", "signature": "void setId(String id)", "full_signature": "@VisibleForTesting void setId(String id)", "class_method_signature": "CreatePoolCommand.setId(String id)", "testcase": false, "constructor": false, "invocations": ["checkNotNull"]}, "repository": {"repo_id": 6035195, "url": "https://github.com/axemblr/axemblr-provisionr", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 30, "size": 3329, "license": "licensed"}}