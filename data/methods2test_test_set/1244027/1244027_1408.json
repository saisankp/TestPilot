{"test_class": {"identifier": "JcrNamespaceRegistryTest", "superclass": "extends MultiUseAbstractTest", "interfaces": "", "fields": [{"original_string": "private NamespaceRegistry registry;", "modifier": "private", "type": "NamespaceRegistry", "declarator": "registry", "var_name": "registry"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/JcrNamespaceRegistryTest.java"}, "test_case": {"identifier": "shouldNotAllowUnregisteringSvPrefix", "parameters": "()", "modifiers": "@Test( expected = NamespaceException.class ) public", "return": "void", "body": "@Test( expected = NamespaceException.class )\n    public void shouldNotAllowUnregisteringSvPrefix() throws Exception {\n        registry.unregisterNamespace(\"sv\");\n    }", "signature": "void shouldNotAllowUnregisteringSvPrefix()", "full_signature": "@Test( expected = NamespaceException.class ) public void shouldNotAllowUnregisteringSvPrefix()", "class_method_signature": "JcrNamespaceRegistryTest.shouldNotAllowUnregisteringSvPrefix()", "testcase": true, "constructor": false, "invocations": ["unregisterNamespace"]}, "focal_class": {"identifier": "JcrNamespaceRegistry", "superclass": "", "interfaces": "implements org.modeshape.jcr.api.NamespaceRegistry", "fields": [{"original_string": "static final String DEFAULT_NAMESPACE_PREFIX = \"\";", "modifier": "static final", "type": "String", "declarator": "DEFAULT_NAMESPACE_PREFIX = \"\"", "var_name": "DEFAULT_NAMESPACE_PREFIX"}, {"original_string": "static final String DEFAULT_NAMESPACE_URI = \"\";", "modifier": "static final", "type": "String", "declarator": "DEFAULT_NAMESPACE_URI = \"\"", "var_name": "DEFAULT_NAMESPACE_URI"}, {"original_string": "static final String XML_NAMESPACE_PREFIX = XMLConstants.XML_NS_PREFIX;", "modifier": "static final", "type": "String", "declarator": "XML_NAMESPACE_PREFIX = XMLConstants.XML_NS_PREFIX", "var_name": "XML_NAMESPACE_PREFIX"}, {"original_string": "static final String XML_NAMESPACE_URI = XMLConstants.XML_NS_URI;", "modifier": "static final", "type": "String", "declarator": "XML_NAMESPACE_URI = XMLConstants.XML_NS_URI", "var_name": "XML_NAMESPACE_URI"}, {"original_string": "static final String XMLNS_NAMESPACE_PREFIX = XMLConstants.XMLNS_ATTRIBUTE;", "modifier": "static final", "type": "String", "declarator": "XMLNS_NAMESPACE_PREFIX = XMLConstants.XMLNS_ATTRIBUTE", "var_name": "XMLNS_NAMESPACE_PREFIX"}, {"original_string": "static final String XMLNS_NAMESPACE_URI = XMLConstants.XMLNS_ATTRIBUTE_NS_URI;", "modifier": "static final", "type": "String", "declarator": "XMLNS_NAMESPACE_URI = XMLConstants.XMLNS_ATTRIBUTE_NS_URI", "var_name": "XMLNS_NAMESPACE_URI"}, {"original_string": "static final String XML_SCHEMA_NAMESPACE_PREFIX = \"xs\";", "modifier": "static final", "type": "String", "declarator": "XML_SCHEMA_NAMESPACE_PREFIX = \"xs\"", "var_name": "XML_SCHEMA_NAMESPACE_PREFIX"}, {"original_string": "static final String XML_SCHEMA_NAMESPACE_URI = \"http://www.w3.org/2001/XMLSchema\";", "modifier": "static final", "type": "String", "declarator": "XML_SCHEMA_NAMESPACE_URI = \"http://www.w3.org/2001/XMLSchema\"", "var_name": "XML_SCHEMA_NAMESPACE_URI"}, {"original_string": "static final String XML_SCHEMA_INSTANCE_NAMESPACE_PREFIX = \"xsi\";", "modifier": "static final", "type": "String", "declarator": "XML_SCHEMA_INSTANCE_NAMESPACE_PREFIX = \"xsi\"", "var_name": "XML_SCHEMA_INSTANCE_NAMESPACE_PREFIX"}, {"original_string": "static final String XML_SCHEMA_INSTANCE_NAMESPACE_URI = \"http://www.w3.org/2001/XMLSchema-instance\";", "modifier": "static final", "type": "String", "declarator": "XML_SCHEMA_INSTANCE_NAMESPACE_URI = \"http://www.w3.org/2001/XMLSchema-instance\"", "var_name": "XML_SCHEMA_INSTANCE_NAMESPACE_URI"}, {"original_string": "static final Set<String> STANDARD_BUILT_IN_PREFIXES;", "modifier": "static final", "type": "Set<String>", "declarator": "STANDARD_BUILT_IN_PREFIXES", "var_name": "STANDARD_BUILT_IN_PREFIXES"}, {"original_string": "static final Set<String> STANDARD_BUILT_IN_URIS;", "modifier": "static final", "type": "Set<String>", "declarator": "STANDARD_BUILT_IN_URIS", "var_name": "STANDARD_BUILT_IN_URIS"}, {"original_string": "static final Map<String, String> STANDARD_BUILT_IN_NAMESPACES_BY_PREFIX;", "modifier": "static final", "type": "Map<String, String>", "declarator": "STANDARD_BUILT_IN_NAMESPACES_BY_PREFIX", "var_name": "STANDARD_BUILT_IN_NAMESPACES_BY_PREFIX"}, {"original_string": "static final Map<String, String> STANDARD_BUILT_IN_PREFIXES_BY_NAMESPACE;", "modifier": "static final", "type": "Map<String, String>", "declarator": "STANDARD_BUILT_IN_PREFIXES_BY_NAMESPACE", "var_name": "STANDARD_BUILT_IN_PREFIXES_BY_NAMESPACE"}, {"original_string": "private final Behavior behavior;", "modifier": "private final", "type": "Behavior", "declarator": "behavior", "var_name": "behavior"}, {"original_string": "private final NamespaceRegistry registry;", "modifier": "private final", "type": "NamespaceRegistry", "declarator": "registry", "var_name": "registry"}, {"original_string": "private final NamespaceRegistry workspaceRegistry;", "modifier": "private final", "type": "NamespaceRegistry", "declarator": "workspaceRegistry", "var_name": "workspaceRegistry"}, {"original_string": "private final JcrSession session;", "modifier": "private final", "type": "JcrSession", "declarator": "session", "var_name": "session"}], "methods": [{"identifier": "JcrNamespaceRegistry", "parameters": "( NamespaceRegistry workspaceRegistry,\n                                    JcrSession session )", "modifiers": "protected", "return": "", "signature": " JcrNamespaceRegistry( NamespaceRegistry workspaceRegistry,\n                                    JcrSession session )", "full_signature": "protected  JcrNamespaceRegistry( NamespaceRegistry workspaceRegistry,\n                                    JcrSession session )", "class_method_signature": "JcrNamespaceRegistry.JcrNamespaceRegistry( NamespaceRegistry workspaceRegistry,\n                                    JcrSession session )", "testcase": false, "constructor": true}, {"identifier": "JcrNamespaceRegistry", "parameters": "( Behavior behavior,\n                          NamespaceRegistry localRegistry,\n                          NamespaceRegistry workspaceRegistry,\n                          JcrSession session )", "modifiers": "", "return": "", "signature": " JcrNamespaceRegistry( Behavior behavior,\n                          NamespaceRegistry localRegistry,\n                          NamespaceRegistry workspaceRegistry,\n                          JcrSession session )", "full_signature": "  JcrNamespaceRegistry( Behavior behavior,\n                          NamespaceRegistry localRegistry,\n                          NamespaceRegistry workspaceRegistry,\n                          JcrSession session )", "class_method_signature": "JcrNamespaceRegistry.JcrNamespaceRegistry( Behavior behavior,\n                          NamespaceRegistry localRegistry,\n                          NamespaceRegistry workspaceRegistry,\n                          JcrSession session )", "testcase": false, "constructor": true}, {"identifier": "checkSession", "parameters": "()", "modifiers": "protected final", "return": "void", "signature": "void checkSession()", "full_signature": "protected final void checkSession()", "class_method_signature": "JcrNamespaceRegistry.checkSession()", "testcase": false, "constructor": false}, {"identifier": "getPrefix", "parameters": "( String uri )", "modifiers": "@Override public", "return": "String", "signature": "String getPrefix( String uri )", "full_signature": "@Override public String getPrefix( String uri )", "class_method_signature": "JcrNamespaceRegistry.getPrefix( String uri )", "testcase": false, "constructor": false}, {"identifier": "getPrefixes", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getPrefixes()", "full_signature": "@Override public String[] getPrefixes()", "class_method_signature": "JcrNamespaceRegistry.getPrefixes()", "testcase": false, "constructor": false}, {"identifier": "getURI", "parameters": "( String prefix )", "modifiers": "@Override public", "return": "String", "signature": "String getURI( String prefix )", "full_signature": "@Override public String getURI( String prefix )", "class_method_signature": "JcrNamespaceRegistry.getURI( String prefix )", "testcase": false, "constructor": false}, {"identifier": "getURIs", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getURIs()", "full_signature": "@Override public String[] getURIs()", "class_method_signature": "JcrNamespaceRegistry.getURIs()", "testcase": false, "constructor": false}, {"identifier": "isRegisteredPrefix", "parameters": "( String prefix )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isRegisteredPrefix( String prefix )", "full_signature": "@Override public boolean isRegisteredPrefix( String prefix )", "class_method_signature": "JcrNamespaceRegistry.isRegisteredPrefix( String prefix )", "testcase": false, "constructor": false}, {"identifier": "isRegisteredUri", "parameters": "( String uri )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isRegisteredUri( String uri )", "full_signature": "@Override public boolean isRegisteredUri( String uri )", "class_method_signature": "JcrNamespaceRegistry.isRegisteredUri( String uri )", "testcase": false, "constructor": false}, {"identifier": "registerNamespace", "parameters": "( String prefix,\n                                                String uri )", "modifiers": "@Override public synchronized", "return": "void", "signature": "void registerNamespace( String prefix,\n                                                String uri )", "full_signature": "@Override public synchronized void registerNamespace( String prefix,\n                                                String uri )", "class_method_signature": "JcrNamespaceRegistry.registerNamespace( String prefix,\n                                                String uri )", "testcase": false, "constructor": false}, {"identifier": "unregisterNamespace", "parameters": "( String prefix )", "modifiers": "@Override public synchronized", "return": "void", "signature": "void unregisterNamespace( String prefix )", "full_signature": "@Override public synchronized void unregisterNamespace( String prefix )", "class_method_signature": "JcrNamespaceRegistry.unregisterNamespace( String prefix )", "testcase": false, "constructor": false}, {"identifier": "checkURINotInUse", "parameters": "( String uri )", "modifiers": "private", "return": "void", "signature": "void checkURINotInUse( String uri )", "full_signature": "private void checkURINotInUse( String uri )", "class_method_signature": "JcrNamespaceRegistry.checkURINotInUse( String uri )", "testcase": false, "constructor": false}, {"identifier": "registerNamespace", "parameters": "( String uri )", "modifiers": "@Override public", "return": "String", "signature": "String registerNamespace( String uri )", "full_signature": "@Override public String registerNamespace( String uri )", "class_method_signature": "JcrNamespaceRegistry.registerNamespace( String uri )", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "JcrNamespaceRegistry.toString()", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/JcrNamespaceRegistry.java"}, "focal_method": {"identifier": "unregisterNamespace", "parameters": "( String prefix )", "modifiers": "@Override public synchronized", "return": "void", "body": "@Override\n    public synchronized void unregisterNamespace( String prefix )\n        throws NamespaceException, AccessDeniedException, RepositoryException {\n        CheckArg.isNotNull(prefix, \"prefix\");\n        checkSession();\n\n        // Don't need to check permissions for transient registration/unregistration\n        if (behavior.equals(Behavior.WORKSPACE)) {\n            try {\n                session.checkWorkspacePermission(session.workspaceName(), ModeShapePermissions.REGISTER_NAMESPACE);\n            } catch (AccessControlException ace) {\n                throw new AccessDeniedException(ace);\n            }\n        }\n\n        // Look to see whether the prefix is registered ...\n        String uri = registry.getNamespaceForPrefix(prefix);\n        // It is an error to unregister a namespace that is not registered ...\n        if (uri == null) {\n            throw new NamespaceException(JcrI18n.unableToUnregisterPrefixForNamespaceThatIsNotRegistered.text(prefix));\n        }\n        // Unregistering a built-in prefix or URI is invalid ...\n        if (STANDARD_BUILT_IN_PREFIXES.contains(prefix)) {\n            throw new NamespaceException(JcrI18n.unableToUnregisterReservedNamespacePrefix.text(prefix, uri));\n        }\n        if (STANDARD_BUILT_IN_URIS.contains(uri)) {\n            throw new NamespaceException(JcrI18n.unableToUnregisterReservedNamespaceUri.text(prefix, uri));\n        }\n\n        // Do not allow to unregister a namespace which is used by a node type\n        checkURINotInUse(uri);\n\n        boolean global = false;\n        switch (behavior) {\n            case WORKSPACE: {\n                global = true;\n                break;\n            }\n            case SESSION: {\n                break;\n            }\n            default: {\n                //should never happen\n                assert false;\n            }\n        }\n\n        // Now we're sure the prefix is valid and is actually used in a mapping ...\n        try {\n            registry.unregister(uri);\n            session.signalNamespaceChanges(global);\n        } catch (RuntimeException e) {\n            throw new RepositoryException(e.getMessage(), e.getCause());\n        }\n    }", "signature": "void unregisterNamespace( String prefix )", "full_signature": "@Override public synchronized void unregisterNamespace( String prefix )", "class_method_signature": "JcrNamespaceRegistry.unregisterNamespace( String prefix )", "testcase": false, "constructor": false, "invocations": ["isNotNull", "checkSession", "equals", "checkWorkspacePermission", "workspaceName", "getNamespaceForPrefix", "text", "contains", "text", "contains", "text", "checkURINotInUse", "unregister", "signalNamespaceChanges", "getMessage", "getCause"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}