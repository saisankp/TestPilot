{"test_class": {"identifier": "HerdErrorInformationExceptionHandlerTest", "superclass": "extends AbstractServiceTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private HerdErrorInformationExceptionHandler exceptionHandler;", "modifier": "@Autowired\n    private", "type": "HerdErrorInformationExceptionHandler", "declarator": "exceptionHandler", "var_name": "exceptionHandler"}, {"original_string": "private static final String MESSAGE = \"This is a test and is not an actual error. Please ignore.\";", "modifier": "private static final", "type": "String", "declarator": "MESSAGE = \"This is a test and is not an actual error. Please ignore.\"", "var_name": "MESSAGE"}], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/helper/HerdErrorInformationExceptionHandlerTest.java"}, "test_case": {"identifier": "testAccessDeniedException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAccessDeniedException() throws Exception\n    {\n        validateErrorInformation(exceptionHandler.handleAccessDeniedException(new AccessDeniedException(MESSAGE)), HttpStatus.FORBIDDEN, false);\n    }", "signature": "void testAccessDeniedException()", "full_signature": "@Test public void testAccessDeniedException()", "class_method_signature": "HerdErrorInformationExceptionHandlerTest.testAccessDeniedException()", "testcase": true, "constructor": false, "invocations": ["validateErrorInformation", "handleAccessDeniedException"]}, "focal_class": {"identifier": "HerdErrorInformationExceptionHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int ORACLE_DATA_TOO_LARGE_ERROR_CODE = 12899;", "modifier": "public static final", "type": "int", "declarator": "ORACLE_DATA_TOO_LARGE_ERROR_CODE = 12899", "var_name": "ORACLE_DATA_TOO_LARGE_ERROR_CODE"}, {"original_string": "public static final int ORACLE_LONG_DATA_IN_LONG_COLUMN_ERROR_CODE = 1461;", "modifier": "public static final", "type": "int", "declarator": "ORACLE_LONG_DATA_IN_LONG_COLUMN_ERROR_CODE = 1461", "var_name": "ORACLE_LONG_DATA_IN_LONG_COLUMN_ERROR_CODE"}, {"original_string": "public static final String ORACLE_SQL_STATE_CODE_ERROR = \"72000\";", "modifier": "public static final", "type": "String", "declarator": "ORACLE_SQL_STATE_CODE_ERROR = \"72000\"", "var_name": "ORACLE_SQL_STATE_CODE_ERROR"}, {"original_string": "public static final String POSTGRES_SQL_STATE_CODE_FOREIGN_KEY_VIOLATION = \"23503\";", "modifier": "public static final", "type": "String", "declarator": "POSTGRES_SQL_STATE_CODE_FOREIGN_KEY_VIOLATION = \"23503\"", "var_name": "POSTGRES_SQL_STATE_CODE_FOREIGN_KEY_VIOLATION"}, {"original_string": "public static final String POSTGRES_SQL_STATE_CODE_UNIQUE_INDEX_OR_PRIMARY_KEY_VIOLATION = \"23505\";", "modifier": "public static final", "type": "String", "declarator": "POSTGRES_SQL_STATE_CODE_UNIQUE_INDEX_OR_PRIMARY_KEY_VIOLATION = \"23505\"", "var_name": "POSTGRES_SQL_STATE_CODE_UNIQUE_INDEX_OR_PRIMARY_KEY_VIOLATION"}, {"original_string": "public static final String POSTGRES_SQL_STATE_CODE_TRUNCATION_ERROR = \"22001\";", "modifier": "public static final", "type": "String", "declarator": "POSTGRES_SQL_STATE_CODE_TRUNCATION_ERROR = \"22001\"", "var_name": "POSTGRES_SQL_STATE_CODE_TRUNCATION_ERROR"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(HerdErrorInformationExceptionHandler.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(HerdErrorInformationExceptionHandler.class)", "var_name": "LOGGER"}, {"original_string": "private boolean loggingEnabled = false;", "modifier": "private", "type": "boolean", "declarator": "loggingEnabled = false", "var_name": "loggingEnabled"}, {"original_string": "@Autowired\n    private ExceptionHandlerMethodResolver resolver;", "modifier": "@Autowired\n    private", "type": "ExceptionHandlerMethodResolver", "declarator": "resolver", "var_name": "resolver"}], "methods": [{"identifier": "handleAccessDeniedException", "parameters": "(Exception exception)", "modifiers": "@ExceptionHandler(value = AccessDeniedException.class) @ResponseStatus(HttpStatus.FORBIDDEN) @ResponseBody public", "return": "ErrorInformation", "signature": "ErrorInformation handleAccessDeniedException(Exception exception)", "full_signature": "@ExceptionHandler(value = AccessDeniedException.class) @ResponseStatus(HttpStatus.FORBIDDEN) @ResponseBody public ErrorInformation handleAccessDeniedException(Exception exception)", "class_method_signature": "HerdErrorInformationExceptionHandler.handleAccessDeniedException(Exception exception)", "testcase": false, "constructor": false}, {"identifier": "handleActivitiException", "parameters": "(Exception exception, HttpServletResponse response)", "modifiers": "@ExceptionHandler(value = ActivitiException.class) @ResponseBody public", "return": "ErrorInformation", "signature": "ErrorInformation handleActivitiException(Exception exception, HttpServletResponse response)", "full_signature": "@ExceptionHandler(value = ActivitiException.class) @ResponseBody public ErrorInformation handleActivitiException(Exception exception, HttpServletResponse response)", "class_method_signature": "HerdErrorInformationExceptionHandler.handleActivitiException(Exception exception, HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "handleBadRequestException", "parameters": "(Exception exception)", "modifiers": "@ExceptionHandler(value = {IllegalArgumentException.class, HttpMessageNotReadableException.class, MissingServletRequestParameterException.class, TypeMismatchException.class, UnsupportedEncodingException.class}) @ResponseStatus(HttpStatus.BAD_REQUEST) @ResponseBody public", "return": "ErrorInformation", "signature": "ErrorInformation handleBadRequestException(Exception exception)", "full_signature": "@ExceptionHandler(value = {IllegalArgumentException.class, HttpMessageNotReadableException.class, MissingServletRequestParameterException.class, TypeMismatchException.class, UnsupportedEncodingException.class}) @ResponseStatus(HttpStatus.BAD_REQUEST) @ResponseBody public ErrorInformation handleBadRequestException(Exception exception)", "class_method_signature": "HerdErrorInformationExceptionHandler.handleBadRequestException(Exception exception)", "testcase": false, "constructor": false}, {"identifier": "handleConflictException", "parameters": "(Exception exception)", "modifiers": "@ExceptionHandler(value = {AlreadyExistsException.class, ObjectAlreadyExistsException.class, OptimisticLockException.class}) @ResponseStatus(HttpStatus.CONFLICT) @ResponseBody public", "return": "ErrorInformation", "signature": "ErrorInformation handleConflictException(Exception exception)", "full_signature": "@ExceptionHandler(value = {AlreadyExistsException.class, ObjectAlreadyExistsException.class, OptimisticLockException.class}) @ResponseStatus(HttpStatus.CONFLICT) @ResponseBody public ErrorInformation handleConflictException(Exception exception)", "class_method_signature": "HerdErrorInformationExceptionHandler.handleConflictException(Exception exception)", "testcase": false, "constructor": false}, {"identifier": "handleInternalServerErrorException", "parameters": "(Exception exception)", "modifiers": "@ExceptionHandler(value = Exception.class) @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR) @ResponseBody public", "return": "ErrorInformation", "signature": "ErrorInformation handleInternalServerErrorException(Exception exception)", "full_signature": "@ExceptionHandler(value = Exception.class) @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR) @ResponseBody public ErrorInformation handleInternalServerErrorException(Exception exception)", "class_method_signature": "HerdErrorInformationExceptionHandler.handleInternalServerErrorException(Exception exception)", "testcase": false, "constructor": false}, {"identifier": "handleNotFoundException", "parameters": "(RuntimeException exception)", "modifiers": "@ExceptionHandler(value = {org.hibernate.ObjectNotFoundException.class, ObjectNotFoundException.class}) @ResponseStatus(HttpStatus.NOT_FOUND) @ResponseBody public", "return": "ErrorInformation", "signature": "ErrorInformation handleNotFoundException(RuntimeException exception)", "full_signature": "@ExceptionHandler(value = {org.hibernate.ObjectNotFoundException.class, ObjectNotFoundException.class}) @ResponseStatus(HttpStatus.NOT_FOUND) @ResponseBody public ErrorInformation handleNotFoundException(RuntimeException exception)", "class_method_signature": "HerdErrorInformationExceptionHandler.handleNotFoundException(RuntimeException exception)", "testcase": false, "constructor": false}, {"identifier": "handleOperationNotAllowedException", "parameters": "(RuntimeException exception)", "modifiers": "@ExceptionHandler(value = MethodNotAllowedException.class) @ResponseStatus(HttpStatus.METHOD_NOT_ALLOWED) @ResponseBody public", "return": "ErrorInformation", "signature": "ErrorInformation handleOperationNotAllowedException(RuntimeException exception)", "full_signature": "@ExceptionHandler(value = MethodNotAllowedException.class) @ResponseStatus(HttpStatus.METHOD_NOT_ALLOWED) @ResponseBody public ErrorInformation handleOperationNotAllowedException(RuntimeException exception)", "class_method_signature": "HerdErrorInformationExceptionHandler.handleOperationNotAllowedException(RuntimeException exception)", "testcase": false, "constructor": false}, {"identifier": "handlePersistenceException", "parameters": "(Exception exception, HttpServletResponse response)", "modifiers": "@ExceptionHandler(value = {JpaSystemException.class, PersistenceException.class}) @ResponseBody public", "return": "ErrorInformation", "signature": "ErrorInformation handlePersistenceException(Exception exception, HttpServletResponse response)", "full_signature": "@ExceptionHandler(value = {JpaSystemException.class, PersistenceException.class}) @ResponseBody public ErrorInformation handlePersistenceException(Exception exception, HttpServletResponse response)", "class_method_signature": "HerdErrorInformationExceptionHandler.handlePersistenceException(Exception exception, HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "isLoggingEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isLoggingEnabled()", "full_signature": "public boolean isLoggingEnabled()", "class_method_signature": "HerdErrorInformationExceptionHandler.isLoggingEnabled()", "testcase": false, "constructor": false}, {"identifier": "setLoggingEnabled", "parameters": "(boolean loggingEnabled)", "modifiers": "public", "return": "void", "signature": "void setLoggingEnabled(boolean loggingEnabled)", "full_signature": "public void setLoggingEnabled(boolean loggingEnabled)", "class_method_signature": "HerdErrorInformationExceptionHandler.setLoggingEnabled(boolean loggingEnabled)", "testcase": false, "constructor": false}, {"identifier": "isReportableError", "parameters": "(Throwable exception)", "modifiers": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) public", "return": "boolean", "signature": "boolean isReportableError(Throwable exception)", "full_signature": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) public boolean isReportableError(Throwable exception)", "class_method_signature": "HerdErrorInformationExceptionHandler.isReportableError(Throwable exception)", "testcase": false, "constructor": false}, {"identifier": "getErrorInformation", "parameters": "(HttpStatus httpStatus, Throwable exception)", "modifiers": "private", "return": "ErrorInformation", "signature": "ErrorInformation getErrorInformation(HttpStatus httpStatus, Throwable exception)", "full_signature": "private ErrorInformation getErrorInformation(HttpStatus httpStatus, Throwable exception)", "class_method_signature": "HerdErrorInformationExceptionHandler.getErrorInformation(HttpStatus httpStatus, Throwable exception)", "testcase": false, "constructor": false}, {"identifier": "getErrorInformationAndSetStatus", "parameters": "(HttpStatus httpStatus, Throwable exception, HttpServletResponse response)", "modifiers": "private", "return": "ErrorInformation", "signature": "ErrorInformation getErrorInformationAndSetStatus(HttpStatus httpStatus, Throwable exception, HttpServletResponse response)", "full_signature": "private ErrorInformation getErrorInformationAndSetStatus(HttpStatus httpStatus, Throwable exception, HttpServletResponse response)", "class_method_signature": "HerdErrorInformationExceptionHandler.getErrorInformationAndSetStatus(HttpStatus httpStatus, Throwable exception, HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "getRootCause", "parameters": "(Exception throwable)", "modifiers": "private", "return": "Throwable", "signature": "Throwable getRootCause(Exception throwable)", "full_signature": "private Throwable getRootCause(Exception throwable)", "class_method_signature": "HerdErrorInformationExceptionHandler.getRootCause(Exception throwable)", "testcase": false, "constructor": false}, {"identifier": "isCausedByConstraintViolationException", "parameters": "(Exception exception)", "modifiers": "private", "return": "boolean", "signature": "boolean isCausedByConstraintViolationException(Exception exception)", "full_signature": "private boolean isCausedByConstraintViolationException(Exception exception)", "class_method_signature": "HerdErrorInformationExceptionHandler.isCausedByConstraintViolationException(Exception exception)", "testcase": false, "constructor": false}, {"identifier": "isDataTruncationException", "parameters": "(Throwable throwable)", "modifiers": "private", "return": "boolean", "signature": "boolean isDataTruncationException(Throwable throwable)", "full_signature": "private boolean isDataTruncationException(Throwable throwable)", "class_method_signature": "HerdErrorInformationExceptionHandler.isDataTruncationException(Throwable throwable)", "testcase": false, "constructor": false}, {"identifier": "logError", "parameters": "(String message, Exception exception)", "modifiers": "protected", "return": "void", "signature": "void logError(String message, Exception exception)", "full_signature": "protected void logError(String message, Exception exception)", "class_method_signature": "HerdErrorInformationExceptionHandler.logError(String message, Exception exception)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/helper/HerdErrorInformationExceptionHandler.java"}, "focal_method": {"identifier": "handleAccessDeniedException", "parameters": "(Exception exception)", "modifiers": "@ExceptionHandler(value = AccessDeniedException.class) @ResponseStatus(HttpStatus.FORBIDDEN) @ResponseBody public", "return": "ErrorInformation", "body": "@ExceptionHandler(value = AccessDeniedException.class)\n    @ResponseStatus(HttpStatus.FORBIDDEN)\n    @ResponseBody\n    public ErrorInformation handleAccessDeniedException(Exception exception)\n    {\n        return getErrorInformation(HttpStatus.FORBIDDEN, exception);\n    }", "signature": "ErrorInformation handleAccessDeniedException(Exception exception)", "full_signature": "@ExceptionHandler(value = AccessDeniedException.class) @ResponseStatus(HttpStatus.FORBIDDEN) @ResponseBody public ErrorInformation handleAccessDeniedException(Exception exception)", "class_method_signature": "HerdErrorInformationExceptionHandler.handleAccessDeniedException(Exception exception)", "testcase": false, "constructor": false, "invocations": ["getErrorInformation"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}