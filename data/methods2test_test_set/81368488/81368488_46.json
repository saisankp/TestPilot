{"test_class": {"identifier": "GameMenuControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private GameMenuController gameMenuController;", "modifier": "@InjectMocks\n    private", "type": "GameMenuController", "declarator": "gameMenuController", "var_name": "gameMenuController"}, {"original_string": "@Mock\n    private GameContext mockGameContext;", "modifier": "@Mock\n    private", "type": "GameContext", "declarator": "mockGameContext", "var_name": "mockGameContext"}, {"original_string": "@Mock\n    private GameSpec mockGameSpec;", "modifier": "@Mock\n    private", "type": "GameSpec", "declarator": "mockGameSpec", "var_name": "mockGameSpec"}, {"original_string": "@Mock\n    private GameSummary mockGameSummary;", "modifier": "@Mock\n    private", "type": "GameSummary", "declarator": "mockGameSummary", "var_name": "mockGameSummary"}, {"original_string": "@Mock\n    private MusicControl mockMusicControl;", "modifier": "@Mock\n    private", "type": "MusicControl", "declarator": "mockMusicControl", "var_name": "mockMusicControl"}, {"original_string": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\n    private BackgroundMusicManager mockMusicManager;", "modifier": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\n    private", "type": "BackgroundMusicManager", "declarator": "mockMusicManager", "var_name": "mockMusicManager"}], "file": "gazeplay-core/src/test/java/net/gazeplay/ui/scenes/gamemenu/GameMenuControllerTest.java"}, "test_case": {"identifier": "shouldSetBackgroundMusic", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void shouldSetBackgroundMusic() {\n        when(mockMusicManager.getCurrentMusic().getMedia().getSource()).thenReturn(\"songidea(copycat)_0.mp3\");\n        when(mockMusicManager.getPlaylist().isEmpty()).thenReturn(false);\n\n        when(mockGameSpec.getGameSummary()).thenReturn(mockGameSummary);\n        when(mockGameSummary.getBackgroundMusicUrl()).thenReturn(\"https://opengameart.org/sites/default/files/DST-TowerDefenseTheme_1.mp3\");\n        when(mockGameContext.getMusicControl()).thenReturn(mockMusicControl);\n\n        gameMenuController.playBackgroundMusic(mockGameContext, mockGameSpec, mockMusicManager);\n\n        verify(mockMusicManager).backupPlaylist();\n    }", "signature": "void shouldSetBackgroundMusic()", "full_signature": "@Test void shouldSetBackgroundMusic()", "class_method_signature": "GameMenuControllerTest.shouldSetBackgroundMusic()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getSource", "getMedia", "getCurrentMusic", "thenReturn", "when", "isEmpty", "getPlaylist", "thenReturn", "when", "getGameSummary", "thenReturn", "when", "getBackgroundMusicUrl", "thenReturn", "when", "getMusicControl", "playBackgroundMusic", "backupPlaylist", "verify"]}, "focal_class": {"identifier": "GameMenuController", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ApplicationContext applicationContext;", "modifier": "@Autowired\n    private", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}], "methods": [{"identifier": "onGameSelection", "parameters": "(\n        @NonNull GazePlay gazePlay,\n        @NonNull Parent root,\n        @NonNull GameSpec gameSpec,\n        String gameName\n    )", "modifiers": "public", "return": "void", "signature": "void onGameSelection(\n        @NonNull GazePlay gazePlay,\n        @NonNull Parent root,\n        @NonNull GameSpec gameSpec,\n        String gameName\n    )", "full_signature": "public void onGameSelection(\n        @NonNull GazePlay gazePlay,\n        @NonNull Parent root,\n        @NonNull GameSpec gameSpec,\n        String gameName\n    )", "class_method_signature": "GameMenuController.onGameSelection(\n        @NonNull GazePlay gazePlay,\n        @NonNull Parent root,\n        @NonNull GameSpec gameSpec,\n        String gameName\n    )", "testcase": false, "constructor": false}, {"identifier": "chooseGame", "parameters": "(\n        GazePlay gazePlay,\n        GameSpec selectedGameSpec,\n        IGameVariant gameVariant\n    )", "modifiers": "public", "return": "void", "signature": "void chooseGame(\n        GazePlay gazePlay,\n        GameSpec selectedGameSpec,\n        IGameVariant gameVariant\n    )", "full_signature": "public void chooseGame(\n        GazePlay gazePlay,\n        GameSpec selectedGameSpec,\n        IGameVariant gameVariant\n    )", "class_method_signature": "GameMenuController.chooseGame(\n        GazePlay gazePlay,\n        GameSpec selectedGameSpec,\n        IGameVariant gameVariant\n    )", "testcase": false, "constructor": false}, {"identifier": "playBackgroundMusic", "parameters": "(GameContext gameContext, GameSpec selectedGameSpec, BackgroundMusicManager musicManager)", "modifiers": "", "return": "void", "signature": "void playBackgroundMusic(GameContext gameContext, GameSpec selectedGameSpec, BackgroundMusicManager musicManager)", "full_signature": " void playBackgroundMusic(GameContext gameContext, GameSpec selectedGameSpec, BackgroundMusicManager musicManager)", "class_method_signature": "GameMenuController.playBackgroundMusic(GameContext gameContext, GameSpec selectedGameSpec, BackgroundMusicManager musicManager)", "testcase": false, "constructor": false}], "file": "gazeplay-core/src/main/java/net/gazeplay/ui/scenes/gamemenu/GameMenuController.java"}, "focal_method": {"identifier": "playBackgroundMusic", "parameters": "(GameContext gameContext, GameSpec selectedGameSpec, BackgroundMusicManager musicManager)", "modifiers": "", "return": "void", "body": "void playBackgroundMusic(GameContext gameContext, GameSpec selectedGameSpec, BackgroundMusicManager musicManager) {\n        MediaPlayer currentMusic = musicManager.getCurrentMusic();\n        boolean defaultMusicPlaying = true;\n        if (currentMusic != null) {\n            Media currentMedia = currentMusic.getMedia();\n            if (currentMedia != null) {\n                defaultMusicPlaying = currentMedia.getSource().contains(Configuration.DEFAULT_VALUE_BACKGROUND_MUSIC);\n            }\n        }\n        log.info(\"is default music set : {}\", defaultMusicPlaying);\n        if (defaultMusicPlaying || musicManager.getPlaylist().isEmpty()) {\n            musicManager.backupPlaylist();\n            musicManager.emptyPlaylist();\n            musicManager.playMusicAlone(selectedGameSpec.getGameSummary().getBackgroundMusicUrl());\n            gameContext.getMusicControl().updateMusicController();\n        }\n    }", "signature": "void playBackgroundMusic(GameContext gameContext, GameSpec selectedGameSpec, BackgroundMusicManager musicManager)", "full_signature": " void playBackgroundMusic(GameContext gameContext, GameSpec selectedGameSpec, BackgroundMusicManager musicManager)", "class_method_signature": "GameMenuController.playBackgroundMusic(GameContext gameContext, GameSpec selectedGameSpec, BackgroundMusicManager musicManager)", "testcase": false, "constructor": false, "invocations": ["getCurrentMusic", "getMedia", "contains", "getSource", "info", "isEmpty", "getPlaylist", "backupPlaylist", "emptyPlaylist", "playMusicAlone", "getBackgroundMusicUrl", "getGameSummary", "updateMusicController", "getMusicControl"]}, "repository": {"repo_id": 81368488, "url": "https://github.com/GazePlay/GazePlay", "stars": 15, "created": "2/8/2017 7:39:08 PM +00:00", "updates": "2020-01-26T16:45:47+00:00", "fork": "False", "license": "licensed"}}