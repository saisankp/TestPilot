{"test_class": {"identifier": "DaoTest", "superclass": "extends OrmTestCase", "interfaces": "", "fields": [], "file": "data/orm/src/test/java/leap/orm/dao/DaoTest.java"}, "test_case": {"identifier": "testExecuteNamedUpdate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testExecuteNamedUpdate() {\n\t\tdeleteAll(Owner.class);\n\t\tif(db.getPlatform() instanceof OraclePlatform){\n\t\t\t// oracle must specified id but other database is not need.\n\t\t\tassertEquals(1,dao.executeNamedUpdate(\"simpleInsertOwner_oracle\", new Object[]{1,\"a\",\"b\", new Date(),new Date()}));\n\t\t}else{\n\t\t\tassertEquals(1,dao.executeNamedUpdate(\"simpleInsertOwner\", new Object[]{\"a\",\"b\", new Date(),new Date()}));\n\t\t}\n\t\tassertEquals(1, Owner.count());\n\t\tdeleteAll(Owner.class);\n\t\t\n\t\tMap<String, Object> params = new HashMap<String, Object>();\n\t\tparams.put(\"id\",2);\n\t\tparams.put(\"firstName\", \"c\");\n\t\tparams.put(\"lastName\",  \"d\");\n\t\tparams.put(\"now\", new Date());\n\t\tif(db.getPlatform() instanceof OraclePlatform){\n\t\t\tassertEquals(1, dao.executeNamedUpdate(\"simpleInsertOwner1_oracle\",params));\n\t\t}else{\n\t\t\tassertEquals(1, dao.executeNamedUpdate(\"simpleInsertOwner1\",params));\n\t\t}\n\t\tassertEquals(1, Owner.count());\n\t}", "signature": "void testExecuteNamedUpdate()", "full_signature": "@Test public void testExecuteNamedUpdate()", "class_method_signature": "DaoTest.testExecuteNamedUpdate()", "testcase": true, "constructor": false, "invocations": ["deleteAll", "getPlatform", "assertEquals", "executeNamedUpdate", "assertEquals", "executeNamedUpdate", "assertEquals", "count", "deleteAll", "put", "put", "put", "put", "getPlatform", "assertEquals", "executeNamedUpdate", "assertEquals", "executeNamedUpdate", "assertEquals", "count"]}, "focal_class": {"identifier": "Dao", "superclass": "", "interfaces": "implements JdbcExecutor", "fields": [], "methods": [{"identifier": "get", "parameters": "()", "modifiers": "public static", "return": "Dao", "signature": "Dao get()", "full_signature": "public static Dao get()", "class_method_signature": "Dao.get()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String name)", "modifiers": "public static", "return": "Dao", "signature": "Dao get(String name)", "full_signature": "public static Dao get(String name)", "class_method_signature": "Dao.get(String name)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(Class<?> entityClass)", "modifiers": "public static", "return": "Dao", "signature": "Dao of(Class<?> entityClass)", "full_signature": "public static Dao of(Class<?> entityClass)", "class_method_signature": "Dao.of(Class<?> entityClass)", "testcase": false, "constructor": false}, {"identifier": "getEntityMapping", "parameters": "(String name)", "modifiers": "public", "return": "EntityMapping", "signature": "EntityMapping getEntityMapping(String name)", "full_signature": "public EntityMapping getEntityMapping(String name)", "class_method_signature": "Dao.getEntityMapping(String name)", "testcase": false, "constructor": false}, {"identifier": "getDialect", "parameters": "()", "modifiers": "public", "return": "DbDialect", "signature": "DbDialect getDialect()", "full_signature": "public DbDialect getDialect()", "class_method_signature": "Dao.getDialect()", "testcase": false, "constructor": false}, {"identifier": "getOrmContext", "parameters": "()", "modifiers": "public abstract", "return": "OrmContext", "signature": "OrmContext getOrmContext()", "full_signature": "public abstract OrmContext getOrmContext()", "class_method_signature": "Dao.getOrmContext()", "testcase": false, "constructor": false}, {"identifier": "getJdbcExecutor", "parameters": "()", "modifiers": "public abstract", "return": "JdbcExecutor", "signature": "JdbcExecutor getJdbcExecutor()", "full_signature": "public abstract JdbcExecutor getJdbcExecutor()", "class_method_signature": "Dao.getJdbcExecutor()", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(Object entity)", "modifiers": "public abstract", "return": "Errors", "signature": "Errors validate(Object entity)", "full_signature": "public abstract Errors validate(Object entity)", "class_method_signature": "Dao.validate(Object entity)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(Object entity, int maxErrors)", "modifiers": "public abstract", "return": "Errors", "signature": "Errors validate(Object entity, int maxErrors)", "full_signature": "public abstract Errors validate(Object entity, int maxErrors)", "class_method_signature": "Dao.validate(Object entity, int maxErrors)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(EntityMapping em, Object entity)", "modifiers": "public abstract", "return": "Errors", "signature": "Errors validate(EntityMapping em, Object entity)", "full_signature": "public abstract Errors validate(EntityMapping em, Object entity)", "class_method_signature": "Dao.validate(EntityMapping em, Object entity)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(EntityMapping em, Object entity, Iterable<String> fields)", "modifiers": "public abstract", "return": "Errors", "signature": "Errors validate(EntityMapping em, Object entity, Iterable<String> fields)", "full_signature": "public abstract Errors validate(EntityMapping em, Object entity, Iterable<String> fields)", "class_method_signature": "Dao.validate(EntityMapping em, Object entity, Iterable<String> fields)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(EntityMapping em, Object entity, int maxErrors)", "modifiers": "public abstract", "return": "Errors", "signature": "Errors validate(EntityMapping em, Object entity, int maxErrors)", "full_signature": "public abstract Errors validate(EntityMapping em, Object entity, int maxErrors)", "class_method_signature": "Dao.validate(EntityMapping em, Object entity, int maxErrors)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(EntityMapping em, Object entity, int maxErrors, Iterable<String> fields)", "modifiers": "public abstract", "return": "Errors", "signature": "Errors validate(EntityMapping em, Object entity, int maxErrors, Iterable<String> fields)", "full_signature": "public abstract Errors validate(EntityMapping em, Object entity, int maxErrors, Iterable<String> fields)", "class_method_signature": "Dao.validate(EntityMapping em, Object entity, int maxErrors, Iterable<String> fields)", "testcase": false, "constructor": false}, {"identifier": "cmdInsert", "parameters": "(Class<?> entityClass)", "modifiers": "public abstract", "return": "InsertCommand", "signature": "InsertCommand cmdInsert(Class<?> entityClass)", "full_signature": "public abstract InsertCommand cmdInsert(Class<?> entityClass)", "class_method_signature": "Dao.cmdInsert(Class<?> entityClass)", "testcase": false, "constructor": false}, {"identifier": "cmdInsert", "parameters": "(String entityName)", "modifiers": "public abstract", "return": "InsertCommand", "signature": "InsertCommand cmdInsert(String entityName)", "full_signature": "public abstract InsertCommand cmdInsert(String entityName)", "class_method_signature": "Dao.cmdInsert(String entityName)", "testcase": false, "constructor": false}, {"identifier": "cmdInsert", "parameters": "(EntityMapping em)", "modifiers": "public abstract", "return": "InsertCommand", "signature": "InsertCommand cmdInsert(EntityMapping em)", "full_signature": "public abstract InsertCommand cmdInsert(EntityMapping em)", "class_method_signature": "Dao.cmdInsert(EntityMapping em)", "testcase": false, "constructor": false}, {"identifier": "cmdUpdate", "parameters": "(Class<?> entityClass)", "modifiers": "public abstract", "return": "UpdateCommand", "signature": "UpdateCommand cmdUpdate(Class<?> entityClass)", "full_signature": "public abstract UpdateCommand cmdUpdate(Class<?> entityClass)", "class_method_signature": "Dao.cmdUpdate(Class<?> entityClass)", "testcase": false, "constructor": false}, {"identifier": "cmdUpdate", "parameters": "(String entityName)", "modifiers": "public abstract", "return": "UpdateCommand", "signature": "UpdateCommand cmdUpdate(String entityName)", "full_signature": "public abstract UpdateCommand cmdUpdate(String entityName)", "class_method_signature": "Dao.cmdUpdate(String entityName)", "testcase": false, "constructor": false}, {"identifier": "cmdUpdate", "parameters": "(EntityMapping em)", "modifiers": "public abstract", "return": "UpdateCommand", "signature": "UpdateCommand cmdUpdate(EntityMapping em)", "full_signature": "public abstract UpdateCommand cmdUpdate(EntityMapping em)", "class_method_signature": "Dao.cmdUpdate(EntityMapping em)", "testcase": false, "constructor": false}, {"identifier": "cmdDelete", "parameters": "(EntityMapping em, Object id)", "modifiers": "public abstract", "return": "DeleteCommand", "signature": "DeleteCommand cmdDelete(EntityMapping em, Object id)", "full_signature": "public abstract DeleteCommand cmdDelete(EntityMapping em, Object id)", "class_method_signature": "Dao.cmdDelete(EntityMapping em, Object id)", "testcase": false, "constructor": false}, {"identifier": "cmdCascadeDelete", "parameters": "(EntityMapping em, Object id)", "modifiers": "public abstract", "return": "CascadeDeleteCommand", "signature": "CascadeDeleteCommand cmdCascadeDelete(EntityMapping em, Object id)", "full_signature": "public abstract CascadeDeleteCommand cmdCascadeDelete(EntityMapping em, Object id)", "class_method_signature": "Dao.cmdCascadeDelete(EntityMapping em, Object id)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(Object entity)", "modifiers": "public abstract", "return": "int", "signature": "int insert(Object entity)", "full_signature": "public abstract int insert(Object entity)", "class_method_signature": "Dao.insert(Object entity)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(Class<?> entityClass, Object entity)", "modifiers": "public abstract", "return": "int", "signature": "int insert(Class<?> entityClass, Object entity)", "full_signature": "public abstract int insert(Class<?> entityClass, Object entity)", "class_method_signature": "Dao.insert(Class<?> entityClass, Object entity)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(String entityName, Object entity)", "modifiers": "public abstract", "return": "int", "signature": "int insert(String entityName, Object entity)", "full_signature": "public abstract int insert(String entityName, Object entity)", "class_method_signature": "Dao.insert(String entityName, Object entity)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(EntityMapping em, Object entity)", "modifiers": "public", "return": "int", "signature": "int insert(EntityMapping em, Object entity)", "full_signature": "public int insert(EntityMapping em, Object entity)", "class_method_signature": "Dao.insert(EntityMapping em, Object entity)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(EntityMapping em, Object entity, Object id)", "modifiers": "public abstract", "return": "int", "signature": "int insert(EntityMapping em, Object entity, Object id)", "full_signature": "public abstract int insert(EntityMapping em, Object entity, Object id)", "class_method_signature": "Dao.insert(EntityMapping em, Object entity, Object id)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(Object entity)", "modifiers": "public abstract", "return": "int", "signature": "int update(Object entity)", "full_signature": "public abstract int update(Object entity)", "class_method_signature": "Dao.update(Object entity)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(Class<?> entityClass, Object entity)", "modifiers": "public abstract", "return": "int", "signature": "int update(Class<?> entityClass, Object entity)", "full_signature": "public abstract int update(Class<?> entityClass, Object entity)", "class_method_signature": "Dao.update(Class<?> entityClass, Object entity)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(String entityName, Object entity)", "modifiers": "public abstract", "return": "int", "signature": "int update(String entityName, Object entity)", "full_signature": "public abstract int update(String entityName, Object entity)", "class_method_signature": "Dao.update(String entityName, Object entity)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(EntityMapping em, Object entity)", "modifiers": "public abstract", "return": "int", "signature": "int update(EntityMapping em, Object entity)", "full_signature": "public abstract int update(EntityMapping em, Object entity)", "class_method_signature": "Dao.update(EntityMapping em, Object entity)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(Object entity, Map<String, Object> fields)", "modifiers": "public abstract", "return": "int", "signature": "int update(Object entity, Map<String, Object> fields)", "full_signature": "public abstract int update(Object entity, Map<String, Object> fields)", "class_method_signature": "Dao.update(Object entity, Map<String, Object> fields)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(Class<?> entityClass, Object id, Map<String, Object> fields)", "modifiers": "public abstract", "return": "int", "signature": "int update(Class<?> entityClass, Object id, Map<String, Object> fields)", "full_signature": "public abstract int update(Class<?> entityClass, Object id, Map<String, Object> fields)", "class_method_signature": "Dao.update(Class<?> entityClass, Object id, Map<String, Object> fields)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(String entityName, Object id, Map<String, Object> fields)", "modifiers": "public abstract", "return": "int", "signature": "int update(String entityName, Object id, Map<String, Object> fields)", "full_signature": "public abstract int update(String entityName, Object id, Map<String, Object> fields)", "class_method_signature": "Dao.update(String entityName, Object id, Map<String, Object> fields)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(EntityMapping em, Object id, Map<String, Object> fields)", "modifiers": "public abstract", "return": "int", "signature": "int update(EntityMapping em, Object id, Map<String, Object> fields)", "full_signature": "public abstract int update(EntityMapping em, Object id, Map<String, Object> fields)", "class_method_signature": "Dao.update(EntityMapping em, Object id, Map<String, Object> fields)", "testcase": false, "constructor": false}, {"identifier": "updateSelective", "parameters": "(Object entity)", "modifiers": "public abstract", "return": "int", "signature": "int updateSelective(Object entity)", "full_signature": "public abstract int updateSelective(Object entity)", "class_method_signature": "Dao.updateSelective(Object entity)", "testcase": false, "constructor": false}, {"identifier": "updateSelective", "parameters": "(Class<?> entityClass, Object entity)", "modifiers": "public abstract", "return": "int", "signature": "int updateSelective(Class<?> entityClass, Object entity)", "full_signature": "public abstract int updateSelective(Class<?> entityClass, Object entity)", "class_method_signature": "Dao.updateSelective(Class<?> entityClass, Object entity)", "testcase": false, "constructor": false}, {"identifier": "updateSelective", "parameters": "(String entityName, Object entity)", "modifiers": "public abstract", "return": "int", "signature": "int updateSelective(String entityName, Object entity)", "full_signature": "public abstract int updateSelective(String entityName, Object entity)", "class_method_signature": "Dao.updateSelective(String entityName, Object entity)", "testcase": false, "constructor": false}, {"identifier": "updateSelective", "parameters": "(EntityMapping em, Object entity)", "modifiers": "public abstract", "return": "int", "signature": "int updateSelective(EntityMapping em, Object entity)", "full_signature": "public abstract int updateSelective(EntityMapping em, Object entity)", "class_method_signature": "Dao.updateSelective(EntityMapping em, Object entity)", "testcase": false, "constructor": false}, {"identifier": "updateSelective", "parameters": "(Object entity, Map<String, Object> fields)", "modifiers": "public abstract", "return": "int", "signature": "int updateSelective(Object entity, Map<String, Object> fields)", "full_signature": "public abstract int updateSelective(Object entity, Map<String, Object> fields)", "class_method_signature": "Dao.updateSelective(Object entity, Map<String, Object> fields)", "testcase": false, "constructor": false}, {"identifier": "updateSelective", "parameters": "(Class<?> entityClass, Object id, Map<String, Object> fields)", "modifiers": "public abstract", "return": "int", "signature": "int updateSelective(Class<?> entityClass, Object id, Map<String, Object> fields)", "full_signature": "public abstract int updateSelective(Class<?> entityClass, Object id, Map<String, Object> fields)", "class_method_signature": "Dao.updateSelective(Class<?> entityClass, Object id, Map<String, Object> fields)", "testcase": false, "constructor": false}, {"identifier": "updateSelective", "parameters": "(String entityName, Object id, Map<String, Object> fields)", "modifiers": "public abstract", "return": "int", "signature": "int updateSelective(String entityName, Object id, Map<String, Object> fields)", "full_signature": "public abstract int updateSelective(String entityName, Object id, Map<String, Object> fields)", "class_method_signature": "Dao.updateSelective(String entityName, Object id, Map<String, Object> fields)", "testcase": false, "constructor": false}, {"identifier": "updateSelective", "parameters": "(EntityMapping em, Object id, Map<String, Object> fields)", "modifiers": "public abstract", "return": "int", "signature": "int updateSelective(EntityMapping em, Object id, Map<String, Object> fields)", "full_signature": "public abstract int updateSelective(EntityMapping em, Object id, Map<String, Object> fields)", "class_method_signature": "Dao.updateSelective(EntityMapping em, Object id, Map<String, Object> fields)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(Object entity)", "modifiers": "public abstract", "return": "int", "signature": "int delete(Object entity)", "full_signature": "public abstract int delete(Object entity)", "class_method_signature": "Dao.delete(Object entity)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(Class<?> entityClass, Object id)", "modifiers": "public abstract", "return": "int", "signature": "int delete(Class<?> entityClass, Object id)", "full_signature": "public abstract int delete(Class<?> entityClass, Object id)", "class_method_signature": "Dao.delete(Class<?> entityClass, Object id)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(String entityName, Object id)", "modifiers": "public abstract", "return": "int", "signature": "int delete(String entityName, Object id)", "full_signature": "public abstract int delete(String entityName, Object id)", "class_method_signature": "Dao.delete(String entityName, Object id)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(EntityMapping em, Object id)", "modifiers": "public abstract", "return": "int", "signature": "int delete(EntityMapping em, Object id)", "full_signature": "public abstract int delete(EntityMapping em, Object id)", "class_method_signature": "Dao.delete(EntityMapping em, Object id)", "testcase": false, "constructor": false}, {"identifier": "cascadeDelete", "parameters": "(Class<?> entityClass, Object id)", "modifiers": "public abstract", "return": "boolean", "signature": "boolean cascadeDelete(Class<?> entityClass, Object id)", "full_signature": "public abstract boolean cascadeDelete(Class<?> entityClass, Object id)", "class_method_signature": "Dao.cascadeDelete(Class<?> entityClass, Object id)", "testcase": false, "constructor": false}, {"identifier": "cascadeDelete", "parameters": "(String entityName, Object id)", "modifiers": "public abstract", "return": "boolean", "signature": "boolean cascadeDelete(String entityName, Object id)", "full_signature": "public abstract boolean cascadeDelete(String entityName, Object id)", "class_method_signature": "Dao.cascadeDelete(String entityName, Object id)", "testcase": false, "constructor": false}, {"identifier": "cascadeDelete", "parameters": "(EntityMapping em, Object id)", "modifiers": "public abstract", "return": "boolean", "signature": "boolean cascadeDelete(EntityMapping em, Object id)", "full_signature": "public abstract boolean cascadeDelete(EntityMapping em, Object id)", "class_method_signature": "Dao.cascadeDelete(EntityMapping em, Object id)", "testcase": false, "constructor": false}, {"identifier": "deleteAll", "parameters": "(Class<?> entityClass)", "modifiers": "public abstract", "return": "int", "signature": "int deleteAll(Class<?> entityClass)", "full_signature": "public abstract int deleteAll(Class<?> entityClass)", "class_method_signature": "Dao.deleteAll(Class<?> entityClass)", "testcase": false, "constructor": false}, {"identifier": "deleteAll", "parameters": "(String entityName)", "modifiers": "public abstract", "return": "int", "signature": "int deleteAll(String entityName)", "full_signature": "public abstract int deleteAll(String entityName)", "class_method_signature": "Dao.deleteAll(String entityName)", "testcase": false, "constructor": false}, {"identifier": "deleteAll", "parameters": "(EntityMapping em)", "modifiers": "public abstract", "return": "int", "signature": "int deleteAll(EntityMapping em)", "full_signature": "public abstract int deleteAll(EntityMapping em)", "class_method_signature": "Dao.deleteAll(EntityMapping em)", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(Class<T> entityClass, Object id)", "modifiers": "public abstract", "return": "T", "signature": "T find(Class<T> entityClass, Object id)", "full_signature": "public abstract T find(Class<T> entityClass, Object id)", "class_method_signature": "Dao.find(Class<T> entityClass, Object id)", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(String entityName, Object id)", "modifiers": "public abstract", "return": "Record", "signature": "Record find(String entityName, Object id)", "full_signature": "public abstract Record find(String entityName, Object id)", "class_method_signature": "Dao.find(String entityName, Object id)", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(EntityMapping em, Object id)", "modifiers": "public abstract", "return": "Record", "signature": "Record find(EntityMapping em, Object id)", "full_signature": "public abstract Record find(EntityMapping em, Object id)", "class_method_signature": "Dao.find(EntityMapping em, Object id)", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(Class<?> entityClass, Class<T> resultClass, Object id)", "modifiers": "public abstract", "return": "T", "signature": "T find(Class<?> entityClass, Class<T> resultClass, Object id)", "full_signature": "public abstract T find(Class<?> entityClass, Class<T> resultClass, Object id)", "class_method_signature": "Dao.find(Class<?> entityClass, Class<T> resultClass, Object id)", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(String entityName, Class<T> resultClass, Object id)", "modifiers": "public abstract", "return": "T", "signature": "T find(String entityName, Class<T> resultClass, Object id)", "full_signature": "public abstract T find(String entityName, Class<T> resultClass, Object id)", "class_method_signature": "Dao.find(String entityName, Class<T> resultClass, Object id)", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(EntityMapping em, Class<T> resultClass, Object id)", "modifiers": "public abstract", "return": "T", "signature": "T find(EntityMapping em, Class<T> resultClass, Object id)", "full_signature": "public abstract T find(EntityMapping em, Class<T> resultClass, Object id)", "class_method_signature": "Dao.find(EntityMapping em, Class<T> resultClass, Object id)", "testcase": false, "constructor": false}, {"identifier": "findOrNull", "parameters": "(Class<T> entityClass, Object id)", "modifiers": "public abstract", "return": "T", "signature": "T findOrNull(Class<T> entityClass, Object id)", "full_signature": "public abstract T findOrNull(Class<T> entityClass, Object id)", "class_method_signature": "Dao.findOrNull(Class<T> entityClass, Object id)", "testcase": false, "constructor": false}, {"identifier": "findOrNull", "parameters": "(String entityName, Object id)", "modifiers": "public abstract", "return": "Record", "signature": "Record findOrNull(String entityName, Object id)", "full_signature": "public abstract Record findOrNull(String entityName, Object id)", "class_method_signature": "Dao.findOrNull(String entityName, Object id)", "testcase": false, "constructor": false}, {"identifier": "findOrNull", "parameters": "(EntityMapping em, Object id)", "modifiers": "public abstract", "return": "Record", "signature": "Record findOrNull(EntityMapping em, Object id)", "full_signature": "public abstract Record findOrNull(EntityMapping em, Object id)", "class_method_signature": "Dao.findOrNull(EntityMapping em, Object id)", "testcase": false, "constructor": false}, {"identifier": "findOrNull", "parameters": "(Class<?> entityClass, Class<T> resultClass, Object id)", "modifiers": "public abstract", "return": "T", "signature": "T findOrNull(Class<?> entityClass, Class<T> resultClass, Object id)", "full_signature": "public abstract T findOrNull(Class<?> entityClass, Class<T> resultClass, Object id)", "class_method_signature": "Dao.findOrNull(Class<?> entityClass, Class<T> resultClass, Object id)", "testcase": false, "constructor": false}, {"identifier": "findOrNull", "parameters": "(String entityName, Class<T> resultClass, Object id)", "modifiers": "public abstract", "return": "T", "signature": "T findOrNull(String entityName, Class<T> resultClass, Object id)", "full_signature": "public abstract T findOrNull(String entityName, Class<T> resultClass, Object id)", "class_method_signature": "Dao.findOrNull(String entityName, Class<T> resultClass, Object id)", "testcase": false, "constructor": false}, {"identifier": "findOrNull", "parameters": "(EntityMapping em, Class<T> resultClass, Object id)", "modifiers": "public abstract", "return": "T", "signature": "T findOrNull(EntityMapping em, Class<T> resultClass, Object id)", "full_signature": "public abstract T findOrNull(EntityMapping em, Class<T> resultClass, Object id)", "class_method_signature": "Dao.findOrNull(EntityMapping em, Class<T> resultClass, Object id)", "testcase": false, "constructor": false}, {"identifier": "findList", "parameters": "(Class<T> entityClass, Object[] ids)", "modifiers": "public abstract", "return": "List<T>", "signature": "List<T> findList(Class<T> entityClass, Object[] ids)", "full_signature": "public abstract List<T> findList(Class<T> entityClass, Object[] ids)", "class_method_signature": "Dao.findList(Class<T> entityClass, Object[] ids)", "testcase": false, "constructor": false}, {"identifier": "findList", "parameters": "(String entityName, Object[] ids)", "modifiers": "public abstract", "return": "List<Entity>", "signature": "List<Entity> findList(String entityName, Object[] ids)", "full_signature": "public abstract List<Entity> findList(String entityName, Object[] ids)", "class_method_signature": "Dao.findList(String entityName, Object[] ids)", "testcase": false, "constructor": false}, {"identifier": "findList", "parameters": "(String entityName, Class<T> resultClass, Object[] ids)", "modifiers": "public abstract", "return": "List<T>", "signature": "List<T> findList(String entityName, Class<T> resultClass, Object[] ids)", "full_signature": "public abstract List<T> findList(String entityName, Class<T> resultClass, Object[] ids)", "class_method_signature": "Dao.findList(String entityName, Class<T> resultClass, Object[] ids)", "testcase": false, "constructor": false}, {"identifier": "findList", "parameters": "(EntityMapping em, Class<T> resultClass, Object[] ids)", "modifiers": "public abstract", "return": "List<T>", "signature": "List<T> findList(EntityMapping em, Class<T> resultClass, Object[] ids)", "full_signature": "public abstract List<T> findList(EntityMapping em, Class<T> resultClass, Object[] ids)", "class_method_signature": "Dao.findList(EntityMapping em, Class<T> resultClass, Object[] ids)", "testcase": false, "constructor": false}, {"identifier": "findListIfExists", "parameters": "(Class<T> entityClass, Object[] ids)", "modifiers": "public abstract", "return": "List<T>", "signature": "List<T> findListIfExists(Class<T> entityClass, Object[] ids)", "full_signature": "public abstract List<T> findListIfExists(Class<T> entityClass, Object[] ids)", "class_method_signature": "Dao.findListIfExists(Class<T> entityClass, Object[] ids)", "testcase": false, "constructor": false}, {"identifier": "findListIfExists", "parameters": "(String entityName, Object[] ids)", "modifiers": "public abstract", "return": "List<Record>", "signature": "List<Record> findListIfExists(String entityName, Object[] ids)", "full_signature": "public abstract List<Record> findListIfExists(String entityName, Object[] ids)", "class_method_signature": "Dao.findListIfExists(String entityName, Object[] ids)", "testcase": false, "constructor": false}, {"identifier": "findListIfExists", "parameters": "(String entityName, Class<T> resultClass, Object[] ids)", "modifiers": "public abstract", "return": "List<T>", "signature": "List<T> findListIfExists(String entityName, Class<T> resultClass, Object[] ids)", "full_signature": "public abstract List<T> findListIfExists(String entityName, Class<T> resultClass, Object[] ids)", "class_method_signature": "Dao.findListIfExists(String entityName, Class<T> resultClass, Object[] ids)", "testcase": false, "constructor": false}, {"identifier": "findListIfExists", "parameters": "(EntityMapping em, Class<T> resultClass, Object[] ids)", "modifiers": "public abstract", "return": "List<T>", "signature": "List<T> findListIfExists(EntityMapping em, Class<T> resultClass, Object[] ids)", "full_signature": "public abstract List<T> findListIfExists(EntityMapping em, Class<T> resultClass, Object[] ids)", "class_method_signature": "Dao.findListIfExists(EntityMapping em, Class<T> resultClass, Object[] ids)", "testcase": false, "constructor": false}, {"identifier": "findAll", "parameters": "(Class<T> entityClass)", "modifiers": "public abstract", "return": "List<T>", "signature": "List<T> findAll(Class<T> entityClass)", "full_signature": "public abstract List<T> findAll(Class<T> entityClass)", "class_method_signature": "Dao.findAll(Class<T> entityClass)", "testcase": false, "constructor": false}, {"identifier": "findAll", "parameters": "(String entityName)", "modifiers": "public", "return": "List<Record>", "signature": "List<Record> findAll(String entityName)", "full_signature": "public List<Record> findAll(String entityName)", "class_method_signature": "Dao.findAll(String entityName)", "testcase": false, "constructor": false}, {"identifier": "findAll", "parameters": "(String entityName, Class<T> resultClass)", "modifiers": "public abstract", "return": "List<T>", "signature": "List<T> findAll(String entityName, Class<T> resultClass)", "full_signature": "public abstract List<T> findAll(String entityName, Class<T> resultClass)", "class_method_signature": "Dao.findAll(String entityName, Class<T> resultClass)", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(Class<?> entityClass, Object id)", "modifiers": "public abstract", "return": "boolean", "signature": "boolean exists(Class<?> entityClass, Object id)", "full_signature": "public abstract boolean exists(Class<?> entityClass, Object id)", "class_method_signature": "Dao.exists(Class<?> entityClass, Object id)", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(String entityName, Object id)", "modifiers": "public abstract", "return": "boolean", "signature": "boolean exists(String entityName, Object id)", "full_signature": "public abstract boolean exists(String entityName, Object id)", "class_method_signature": "Dao.exists(String entityName, Object id)", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "(Class<?> entityClass)", "modifiers": "public abstract", "return": "long", "signature": "long count(Class<?> entityClass)", "full_signature": "public abstract long count(Class<?> entityClass)", "class_method_signature": "Dao.count(Class<?> entityClass)", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "(String entityName)", "modifiers": "public abstract", "return": "long", "signature": "long count(String entityName)", "full_signature": "public abstract long count(String entityName)", "class_method_signature": "Dao.count(String entityName)", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "(EntityMapping em)", "modifiers": "public abstract", "return": "long", "signature": "long count(EntityMapping em)", "full_signature": "public abstract long count(EntityMapping em)", "class_method_signature": "Dao.count(EntityMapping em)", "testcase": false, "constructor": false}, {"identifier": "executeUpdate", "parameters": "(SqlCommand command, Object[] args)", "modifiers": "public abstract", "return": "int", "signature": "int executeUpdate(SqlCommand command, Object[] args)", "full_signature": "public abstract int executeUpdate(SqlCommand command, Object[] args)", "class_method_signature": "Dao.executeUpdate(SqlCommand command, Object[] args)", "testcase": false, "constructor": false}, {"identifier": "executeUpdate", "parameters": "(SqlCommand command, Object bean)", "modifiers": "public abstract", "return": "int", "signature": "int executeUpdate(SqlCommand command, Object bean)", "full_signature": "public abstract int executeUpdate(SqlCommand command, Object bean)", "class_method_signature": "Dao.executeUpdate(SqlCommand command, Object bean)", "testcase": false, "constructor": false}, {"identifier": "executeUpdate", "parameters": "(SqlCommand command, Map params)", "modifiers": "public abstract", "return": "int", "signature": "int executeUpdate(SqlCommand command, Map params)", "full_signature": "public abstract int executeUpdate(SqlCommand command, Map params)", "class_method_signature": "Dao.executeUpdate(SqlCommand command, Map params)", "testcase": false, "constructor": false}, {"identifier": "executeUpdate", "parameters": "(String sql, Object bean)", "modifiers": "public abstract", "return": "int", "signature": "int executeUpdate(String sql, Object bean)", "full_signature": "public abstract int executeUpdate(String sql, Object bean)", "class_method_signature": "Dao.executeUpdate(String sql, Object bean)", "testcase": false, "constructor": false}, {"identifier": "executeUpdate", "parameters": "(String sql, Map params)", "modifiers": "public abstract", "return": "int", "signature": "int executeUpdate(String sql, Map params)", "full_signature": "public abstract int executeUpdate(String sql, Map params)", "class_method_signature": "Dao.executeUpdate(String sql, Map params)", "testcase": false, "constructor": false}, {"identifier": "executeNamedUpdate", "parameters": "(String sqlKey, Object[] args)", "modifiers": "public abstract", "return": "int", "signature": "int executeNamedUpdate(String sqlKey, Object[] args)", "full_signature": "public abstract int executeNamedUpdate(String sqlKey, Object[] args)", "class_method_signature": "Dao.executeNamedUpdate(String sqlKey, Object[] args)", "testcase": false, "constructor": false}, {"identifier": "executeNamedUpdate", "parameters": "(String sqlKey, Object bean)", "modifiers": "public abstract", "return": "int", "signature": "int executeNamedUpdate(String sqlKey, Object bean)", "full_signature": "public abstract int executeNamedUpdate(String sqlKey, Object bean)", "class_method_signature": "Dao.executeNamedUpdate(String sqlKey, Object bean)", "testcase": false, "constructor": false}, {"identifier": "executeNamedUpdate", "parameters": "(String sqlKey, Map<String, Object> params)", "modifiers": "public abstract", "return": "int", "signature": "int executeNamedUpdate(String sqlKey, Map<String, Object> params)", "full_signature": "public abstract int executeNamedUpdate(String sqlKey, Map<String, Object> params)", "class_method_signature": "Dao.executeNamedUpdate(String sqlKey, Map<String, Object> params)", "testcase": false, "constructor": false}, {"identifier": "createQuery", "parameters": "(SqlCommand command)", "modifiers": "public abstract", "return": "Query<Record>", "signature": "Query<Record> createQuery(SqlCommand command)", "full_signature": "public abstract Query<Record> createQuery(SqlCommand command)", "class_method_signature": "Dao.createQuery(SqlCommand command)", "testcase": false, "constructor": false}, {"identifier": "createQuery", "parameters": "(Class<T> resultClass, SqlCommand command)", "modifiers": "public abstract", "return": "Query<T>", "signature": "Query<T> createQuery(Class<T> resultClass, SqlCommand command)", "full_signature": "public abstract Query<T> createQuery(Class<T> resultClass, SqlCommand command)", "class_method_signature": "Dao.createQuery(Class<T> resultClass, SqlCommand command)", "testcase": false, "constructor": false}, {"identifier": "createSqlCommand", "parameters": "(String sql)", "modifiers": "public", "return": "SqlCommand", "signature": "SqlCommand createSqlCommand(String sql)", "full_signature": "public SqlCommand createSqlCommand(String sql)", "class_method_signature": "Dao.createSqlCommand(String sql)", "testcase": false, "constructor": false}, {"identifier": "createSqlQuery", "parameters": "(String sql)", "modifiers": "public abstract", "return": "Query<Record>", "signature": "Query<Record> createSqlQuery(String sql)", "full_signature": "public abstract Query<Record> createSqlQuery(String sql)", "class_method_signature": "Dao.createSqlQuery(String sql)", "testcase": false, "constructor": false}, {"identifier": "createSqlQuery", "parameters": "(String sql, Object... args)", "modifiers": "public abstract", "return": "Query<Record>", "signature": "Query<Record> createSqlQuery(String sql, Object... args)", "full_signature": "public abstract Query<Record> createSqlQuery(String sql, Object... args)", "class_method_signature": "Dao.createSqlQuery(String sql, Object... args)", "testcase": false, "constructor": false}, {"identifier": "createSqlQuery", "parameters": "(Class<T> resultClass, String sql)", "modifiers": "public abstract", "return": "Query<T>", "signature": "Query<T> createSqlQuery(Class<T> resultClass, String sql)", "full_signature": "public abstract Query<T> createSqlQuery(Class<T> resultClass, String sql)", "class_method_signature": "Dao.createSqlQuery(Class<T> resultClass, String sql)", "testcase": false, "constructor": false}, {"identifier": "createSqlQuery", "parameters": "(EntityMapping em, String sql)", "modifiers": "public abstract", "return": "EntityQuery<Record>", "signature": "EntityQuery<Record> createSqlQuery(EntityMapping em, String sql)", "full_signature": "public abstract EntityQuery<Record> createSqlQuery(EntityMapping em, String sql)", "class_method_signature": "Dao.createSqlQuery(EntityMapping em, String sql)", "testcase": false, "constructor": false}, {"identifier": "createSqlQuery", "parameters": "(EntityMapping em, Class<T> resultClass, String sql)", "modifiers": "public abstract", "return": "EntityQuery<T>", "signature": "EntityQuery<T> createSqlQuery(EntityMapping em, Class<T> resultClass, String sql)", "full_signature": "public abstract EntityQuery<T> createSqlQuery(EntityMapping em, Class<T> resultClass, String sql)", "class_method_signature": "Dao.createSqlQuery(EntityMapping em, Class<T> resultClass, String sql)", "testcase": false, "constructor": false}, {"identifier": "createNativeQuery", "parameters": "(String sql)", "modifiers": "public abstract", "return": "NativeQuery<Record>", "signature": "NativeQuery<Record> createNativeQuery(String sql)", "full_signature": "public abstract NativeQuery<Record> createNativeQuery(String sql)", "class_method_signature": "Dao.createNativeQuery(String sql)", "testcase": false, "constructor": false}, {"identifier": "createNativeQuery", "parameters": "(String sql, Object... args)", "modifiers": "public abstract", "return": "NativeQuery<Record>", "signature": "NativeQuery<Record> createNativeQuery(String sql, Object... args)", "full_signature": "public abstract NativeQuery<Record> createNativeQuery(String sql, Object... args)", "class_method_signature": "Dao.createNativeQuery(String sql, Object... args)", "testcase": false, "constructor": false}, {"identifier": "createNativeQuery", "parameters": "(Class<T> resultClass, String sql)", "modifiers": "public abstract", "return": "NativeQuery<T>", "signature": "NativeQuery<T> createNativeQuery(Class<T> resultClass, String sql)", "full_signature": "public abstract NativeQuery<T> createNativeQuery(Class<T> resultClass, String sql)", "class_method_signature": "Dao.createNativeQuery(Class<T> resultClass, String sql)", "testcase": false, "constructor": false}, {"identifier": "createNativeQuery", "parameters": "(Class<T> resultClass, String sql, Object... args)", "modifiers": "public abstract", "return": "NativeQuery<T>", "signature": "NativeQuery<T> createNativeQuery(Class<T> resultClass, String sql, Object... args)", "full_signature": "public abstract NativeQuery<T> createNativeQuery(Class<T> resultClass, String sql, Object... args)", "class_method_signature": "Dao.createNativeQuery(Class<T> resultClass, String sql, Object... args)", "testcase": false, "constructor": false}, {"identifier": "createCriteriaQuery", "parameters": "(Class<T> entityClass)", "modifiers": "public abstract", "return": "CriteriaQuery<T>", "signature": "CriteriaQuery<T> createCriteriaQuery(Class<T> entityClass)", "full_signature": "public abstract CriteriaQuery<T> createCriteriaQuery(Class<T> entityClass)", "class_method_signature": "Dao.createCriteriaQuery(Class<T> entityClass)", "testcase": false, "constructor": false}, {"identifier": "createCriteriaQuery", "parameters": "(String entityName)", "modifiers": "public abstract", "return": "CriteriaQuery<Record>", "signature": "CriteriaQuery<Record> createCriteriaQuery(String entityName)", "full_signature": "public abstract CriteriaQuery<Record> createCriteriaQuery(String entityName)", "class_method_signature": "Dao.createCriteriaQuery(String entityName)", "testcase": false, "constructor": false}, {"identifier": "createCriteriaQuery", "parameters": "(EntityMapping em)", "modifiers": "public abstract", "return": "CriteriaQuery<Record>", "signature": "CriteriaQuery<Record> createCriteriaQuery(EntityMapping em)", "full_signature": "public abstract CriteriaQuery<Record> createCriteriaQuery(EntityMapping em)", "class_method_signature": "Dao.createCriteriaQuery(EntityMapping em)", "testcase": false, "constructor": false}, {"identifier": "createCriteriaQuery", "parameters": "(EntityMapping em, Class<T> resultClass)", "modifiers": "public abstract", "return": "CriteriaQuery<T>", "signature": "CriteriaQuery<T> createCriteriaQuery(EntityMapping em, Class<T> resultClass)", "full_signature": "public abstract CriteriaQuery<T> createCriteriaQuery(EntityMapping em, Class<T> resultClass)", "class_method_signature": "Dao.createCriteriaQuery(EntityMapping em, Class<T> resultClass)", "testcase": false, "constructor": false}, {"identifier": "createCriteriaQuery", "parameters": "(Class<?> entityClass, Class<T> resultClass)", "modifiers": "public abstract", "return": "CriteriaQuery<T>", "signature": "CriteriaQuery<T> createCriteriaQuery(Class<?> entityClass, Class<T> resultClass)", "full_signature": "public abstract CriteriaQuery<T> createCriteriaQuery(Class<?> entityClass, Class<T> resultClass)", "class_method_signature": "Dao.createCriteriaQuery(Class<?> entityClass, Class<T> resultClass)", "testcase": false, "constructor": false}, {"identifier": "createNamedQuery", "parameters": "(String queryName)", "modifiers": "public abstract", "return": "Query<Record>", "signature": "Query<Record> createNamedQuery(String queryName)", "full_signature": "public abstract Query<Record> createNamedQuery(String queryName)", "class_method_signature": "Dao.createNamedQuery(String queryName)", "testcase": false, "constructor": false}, {"identifier": "createNamedQuery", "parameters": "(String queryName, Class<T> resultClass)", "modifiers": "public abstract", "return": "Query<T>", "signature": "Query<T> createNamedQuery(String queryName, Class<T> resultClass)", "full_signature": "public abstract Query<T> createNamedQuery(String queryName, Class<T> resultClass)", "class_method_signature": "Dao.createNamedQuery(String queryName, Class<T> resultClass)", "testcase": false, "constructor": false}, {"identifier": "createNamedQuery", "parameters": "(Class<T> entityClass, String queryName)", "modifiers": "@Deprecated public abstract", "return": "EntityQuery<T>", "signature": "EntityQuery<T> createNamedQuery(Class<T> entityClass, String queryName)", "full_signature": "@Deprecated public abstract EntityQuery<T> createNamedQuery(Class<T> entityClass, String queryName)", "class_method_signature": "Dao.createNamedQuery(Class<T> entityClass, String queryName)", "testcase": false, "constructor": false}, {"identifier": "createNamedQuery", "parameters": "(String entityName, String queryName)", "modifiers": "@Deprecated public abstract", "return": "EntityQuery<Record>", "signature": "EntityQuery<Record> createNamedQuery(String entityName, String queryName)", "full_signature": "@Deprecated public abstract EntityQuery<Record> createNamedQuery(String entityName, String queryName)", "class_method_signature": "Dao.createNamedQuery(String entityName, String queryName)", "testcase": false, "constructor": false}, {"identifier": "createNamedQuery", "parameters": "(String entityName, Class<T> resultClass, String queryName)", "modifiers": "@Deprecated public abstract", "return": "EntityQuery<T>", "signature": "EntityQuery<T> createNamedQuery(String entityName, Class<T> resultClass, String queryName)", "full_signature": "@Deprecated public abstract EntityQuery<T> createNamedQuery(String entityName, Class<T> resultClass, String queryName)", "class_method_signature": "Dao.createNamedQuery(String entityName, Class<T> resultClass, String queryName)", "testcase": false, "constructor": false}, {"identifier": "createNamedQuery", "parameters": "(EntityMapping em, Class<T> resultClass, String queryName)", "modifiers": "@Deprecated public abstract", "return": "EntityQuery<T>", "signature": "EntityQuery<T> createNamedQuery(EntityMapping em, Class<T> resultClass, String queryName)", "full_signature": "@Deprecated public abstract EntityQuery<T> createNamedQuery(EntityMapping em, Class<T> resultClass, String queryName)", "class_method_signature": "Dao.createNamedQuery(EntityMapping em, Class<T> resultClass, String queryName)", "testcase": false, "constructor": false}, {"identifier": "batchInsert", "parameters": "(List<?> entities)", "modifiers": "public abstract", "return": "int[]", "signature": "int[] batchInsert(List<?> entities)", "full_signature": "public abstract int[] batchInsert(List<?> entities)", "class_method_signature": "Dao.batchInsert(List<?> entities)", "testcase": false, "constructor": false}, {"identifier": "batchInsert", "parameters": "(Object[] entities)", "modifiers": "public abstract", "return": "int[]", "signature": "int[] batchInsert(Object[] entities)", "full_signature": "public abstract int[] batchInsert(Object[] entities)", "class_method_signature": "Dao.batchInsert(Object[] entities)", "testcase": false, "constructor": false}, {"identifier": "batchInsert", "parameters": "(String entityName, List<?> records)", "modifiers": "public abstract", "return": "int[]", "signature": "int[] batchInsert(String entityName, List<?> records)", "full_signature": "public abstract int[] batchInsert(String entityName, List<?> records)", "class_method_signature": "Dao.batchInsert(String entityName, List<?> records)", "testcase": false, "constructor": false}, {"identifier": "batchInsert", "parameters": "(String entityName, Object[] records)", "modifiers": "public abstract", "return": "int[]", "signature": "int[] batchInsert(String entityName, Object[] records)", "full_signature": "public abstract int[] batchInsert(String entityName, Object[] records)", "class_method_signature": "Dao.batchInsert(String entityName, Object[] records)", "testcase": false, "constructor": false}, {"identifier": "batchInsert", "parameters": "(Class<?> entityClass, List<?> records)", "modifiers": "public abstract", "return": "int[]", "signature": "int[] batchInsert(Class<?> entityClass, List<?> records)", "full_signature": "public abstract int[] batchInsert(Class<?> entityClass, List<?> records)", "class_method_signature": "Dao.batchInsert(Class<?> entityClass, List<?> records)", "testcase": false, "constructor": false}, {"identifier": "batchInsert", "parameters": "(Class<?> entityClass, Object[] records)", "modifiers": "public abstract", "return": "int[]", "signature": "int[] batchInsert(Class<?> entityClass, Object[] records)", "full_signature": "public abstract int[] batchInsert(Class<?> entityClass, Object[] records)", "class_method_signature": "Dao.batchInsert(Class<?> entityClass, Object[] records)", "testcase": false, "constructor": false}, {"identifier": "batchInsert", "parameters": "(EntityMapping em, List<?> records)", "modifiers": "public abstract", "return": "int[]", "signature": "int[] batchInsert(EntityMapping em, List<?> records)", "full_signature": "public abstract int[] batchInsert(EntityMapping em, List<?> records)", "class_method_signature": "Dao.batchInsert(EntityMapping em, List<?> records)", "testcase": false, "constructor": false}, {"identifier": "batchInsert", "parameters": "(EntityMapping em, Object[] records)", "modifiers": "public abstract", "return": "int[]", "signature": "int[] batchInsert(EntityMapping em, Object[] records)", "full_signature": "public abstract int[] batchInsert(EntityMapping em, Object[] records)", "class_method_signature": "Dao.batchInsert(EntityMapping em, Object[] records)", "testcase": false, "constructor": false}, {"identifier": "batchUpdate", "parameters": "(List<?> entities)", "modifiers": "public abstract", "return": "int[]", "signature": "int[] batchUpdate(List<?> entities)", "full_signature": "public abstract int[] batchUpdate(List<?> entities)", "class_method_signature": "Dao.batchUpdate(List<?> entities)", "testcase": false, "constructor": false}, {"identifier": "batchUpdate", "parameters": "(Object[] entities)", "modifiers": "public abstract", "return": "int[]", "signature": "int[] batchUpdate(Object[] entities)", "full_signature": "public abstract int[] batchUpdate(Object[] entities)", "class_method_signature": "Dao.batchUpdate(Object[] entities)", "testcase": false, "constructor": false}, {"identifier": "batchUpdate", "parameters": "(String entityName, List<?> records)", "modifiers": "public abstract", "return": "int[]", "signature": "int[] batchUpdate(String entityName, List<?> records)", "full_signature": "public abstract int[] batchUpdate(String entityName, List<?> records)", "class_method_signature": "Dao.batchUpdate(String entityName, List<?> records)", "testcase": false, "constructor": false}, {"identifier": "batchUpdate", "parameters": "(String entityName, Object[] records)", "modifiers": "public abstract", "return": "int[]", "signature": "int[] batchUpdate(String entityName, Object[] records)", "full_signature": "public abstract int[] batchUpdate(String entityName, Object[] records)", "class_method_signature": "Dao.batchUpdate(String entityName, Object[] records)", "testcase": false, "constructor": false}, {"identifier": "batchUpdate", "parameters": "(Class<?> entityClass, List<?> records)", "modifiers": "public abstract", "return": "int[]", "signature": "int[] batchUpdate(Class<?> entityClass, List<?> records)", "full_signature": "public abstract int[] batchUpdate(Class<?> entityClass, List<?> records)", "class_method_signature": "Dao.batchUpdate(Class<?> entityClass, List<?> records)", "testcase": false, "constructor": false}, {"identifier": "batchUpdate", "parameters": "(Class<?> entityClass, Object[] records)", "modifiers": "public abstract", "return": "int[]", "signature": "int[] batchUpdate(Class<?> entityClass, Object[] records)", "full_signature": "public abstract int[] batchUpdate(Class<?> entityClass, Object[] records)", "class_method_signature": "Dao.batchUpdate(Class<?> entityClass, Object[] records)", "testcase": false, "constructor": false}, {"identifier": "batchUpdate", "parameters": "(EntityMapping em, List<?> records)", "modifiers": "public abstract", "return": "int[]", "signature": "int[] batchUpdate(EntityMapping em, List<?> records)", "full_signature": "public abstract int[] batchUpdate(EntityMapping em, List<?> records)", "class_method_signature": "Dao.batchUpdate(EntityMapping em, List<?> records)", "testcase": false, "constructor": false}, {"identifier": "batchUpdate", "parameters": "(EntityMapping em, Object[] records)", "modifiers": "public abstract", "return": "int[]", "signature": "int[] batchUpdate(EntityMapping em, Object[] records)", "full_signature": "public abstract int[] batchUpdate(EntityMapping em, Object[] records)", "class_method_signature": "Dao.batchUpdate(EntityMapping em, Object[] records)", "testcase": false, "constructor": false}, {"identifier": "batchDelete", "parameters": "(String entityName, List<?> ids)", "modifiers": "public abstract", "return": "int[]", "signature": "int[] batchDelete(String entityName, List<?> ids)", "full_signature": "public abstract int[] batchDelete(String entityName, List<?> ids)", "class_method_signature": "Dao.batchDelete(String entityName, List<?> ids)", "testcase": false, "constructor": false}, {"identifier": "batchDelete", "parameters": "(String entityName, Object[] ids)", "modifiers": "public abstract", "return": "int[]", "signature": "int[] batchDelete(String entityName, Object[] ids)", "full_signature": "public abstract int[] batchDelete(String entityName, Object[] ids)", "class_method_signature": "Dao.batchDelete(String entityName, Object[] ids)", "testcase": false, "constructor": false}, {"identifier": "batchDelete", "parameters": "(Class<?> entityClass, List<?> ids)", "modifiers": "public abstract", "return": "int[]", "signature": "int[] batchDelete(Class<?> entityClass, List<?> ids)", "full_signature": "public abstract int[] batchDelete(Class<?> entityClass, List<?> ids)", "class_method_signature": "Dao.batchDelete(Class<?> entityClass, List<?> ids)", "testcase": false, "constructor": false}, {"identifier": "batchDelete", "parameters": "(Class<?> entityClass, Object[] ids)", "modifiers": "public abstract", "return": "int[]", "signature": "int[] batchDelete(Class<?> entityClass, Object[] ids)", "full_signature": "public abstract int[] batchDelete(Class<?> entityClass, Object[] ids)", "class_method_signature": "Dao.batchDelete(Class<?> entityClass, Object[] ids)", "testcase": false, "constructor": false}, {"identifier": "batchDelete", "parameters": "(EntityMapping em, List<?> ids)", "modifiers": "public abstract", "return": "int[]", "signature": "int[] batchDelete(EntityMapping em, List<?> ids)", "full_signature": "public abstract int[] batchDelete(EntityMapping em, List<?> ids)", "class_method_signature": "Dao.batchDelete(EntityMapping em, List<?> ids)", "testcase": false, "constructor": false}, {"identifier": "batchDelete", "parameters": "(EntityMapping em, Object[] ids)", "modifiers": "public abstract", "return": "int[]", "signature": "int[] batchDelete(EntityMapping em, Object[] ids)", "full_signature": "public abstract int[] batchDelete(EntityMapping em, Object[] ids)", "class_method_signature": "Dao.batchDelete(EntityMapping em, Object[] ids)", "testcase": false, "constructor": false}, {"identifier": "doTransaction", "parameters": "(TransactionCallback callback)", "modifiers": "public abstract", "return": "void", "signature": "void doTransaction(TransactionCallback callback)", "full_signature": "public abstract void doTransaction(TransactionCallback callback)", "class_method_signature": "Dao.doTransaction(TransactionCallback callback)", "testcase": false, "constructor": false}, {"identifier": "doTransaction", "parameters": "(TransactionCallbackWithResult<T> callback)", "modifiers": "public abstract", "return": "T", "signature": "T doTransaction(TransactionCallbackWithResult<T> callback)", "full_signature": "public abstract T doTransaction(TransactionCallbackWithResult<T> callback)", "class_method_signature": "Dao.doTransaction(TransactionCallbackWithResult<T> callback)", "testcase": false, "constructor": false}, {"identifier": "doTransaction", "parameters": "(TransactionCallback callback, boolean requiresNew)", "modifiers": "public abstract", "return": "void", "signature": "void doTransaction(TransactionCallback callback, boolean requiresNew)", "full_signature": "public abstract void doTransaction(TransactionCallback callback, boolean requiresNew)", "class_method_signature": "Dao.doTransaction(TransactionCallback callback, boolean requiresNew)", "testcase": false, "constructor": false}, {"identifier": "doTransaction", "parameters": "(TransactionCallback callback, TransactionDefinition definition)", "modifiers": "public abstract", "return": "void", "signature": "void doTransaction(TransactionCallback callback, TransactionDefinition definition)", "full_signature": "public abstract void doTransaction(TransactionCallback callback, TransactionDefinition definition)", "class_method_signature": "Dao.doTransaction(TransactionCallback callback, TransactionDefinition definition)", "testcase": false, "constructor": false}, {"identifier": "doTransaction", "parameters": "(TransactionCallbackWithResult<T> callback, boolean requiresNew)", "modifiers": "public abstract", "return": "T", "signature": "T doTransaction(TransactionCallbackWithResult<T> callback, boolean requiresNew)", "full_signature": "public abstract T doTransaction(TransactionCallbackWithResult<T> callback, boolean requiresNew)", "class_method_signature": "Dao.doTransaction(TransactionCallbackWithResult<T> callback, boolean requiresNew)", "testcase": false, "constructor": false}, {"identifier": "withEvents", "parameters": "(Runnable func)", "modifiers": "public abstract", "return": "void", "signature": "void withEvents(Runnable func)", "full_signature": "public abstract void withEvents(Runnable func)", "class_method_signature": "Dao.withEvents(Runnable func)", "testcase": false, "constructor": false}, {"identifier": "withEvents", "parameters": "(Supplier<T> func)", "modifiers": "public abstract", "return": "T", "signature": "T withEvents(Supplier<T> func)", "full_signature": "public abstract T withEvents(Supplier<T> func)", "class_method_signature": "Dao.withEvents(Supplier<T> func)", "testcase": false, "constructor": false}, {"identifier": "withoutEvents", "parameters": "(Runnable func)", "modifiers": "public abstract", "return": "void", "signature": "void withoutEvents(Runnable func)", "full_signature": "public abstract void withoutEvents(Runnable func)", "class_method_signature": "Dao.withoutEvents(Runnable func)", "testcase": false, "constructor": false}, {"identifier": "withoutEvents", "parameters": "(Supplier<T> func)", "modifiers": "public abstract", "return": "T", "signature": "T withoutEvents(Supplier<T> func)", "full_signature": "public abstract T withoutEvents(Supplier<T> func)", "class_method_signature": "Dao.withoutEvents(Supplier<T> func)", "testcase": false, "constructor": false}, {"identifier": "isWithEvents", "parameters": "()", "modifiers": "public abstract", "return": "boolean", "signature": "boolean isWithEvents()", "full_signature": "public abstract boolean isWithEvents()", "class_method_signature": "Dao.isWithEvents()", "testcase": false, "constructor": false}], "file": "data/orm/src/main/java/leap/orm/dao/Dao.java"}, "focal_method": {"identifier": "executeNamedUpdate", "parameters": "(String sqlKey, Object[] args)", "modifiers": "public abstract", "return": "int", "body": "public abstract int executeNamedUpdate(String sqlKey, Object[] args);", "signature": "int executeNamedUpdate(String sqlKey, Object[] args)", "full_signature": "public abstract int executeNamedUpdate(String sqlKey, Object[] args)", "class_method_signature": "Dao.executeNamedUpdate(String sqlKey, Object[] args)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 48562236, "url": "https://github.com/leapframework/framework", "stars": 42, "created": "12/25/2015 1:54:52 AM +00:00", "updates": "2020-01-20T03:04:15+00:00", "fork": "False", "license": "licensed"}}