{"test_class": {"identifier": "XMLUtilTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [{"original_string": "private final static URL url = Resources.getResource(XMLUtilTest.class, \"test.xml\");", "modifier": "private final static", "type": "URL", "declarator": "url = Resources.getResource(XMLUtilTest.class, \"test.xml\")", "var_name": "url"}, {"original_string": "private final static URL url2 = Resources.getResource(XMLUtilTest.class, \"test2.xml\");", "modifier": "private final static", "type": "URL", "declarator": "url2 = Resources.getResource(XMLUtilTest.class, \"test2.xml\")", "var_name": "url2"}, {"original_string": "private final static URL url3 = Resources.getResource(XMLUtilTest.class, \"test3.xml\");", "modifier": "private final static", "type": "URL", "declarator": "url3 = Resources.getResource(XMLUtilTest.class, \"test3.xml\")", "var_name": "url3"}, {"original_string": "private final static URL url4 = Resources.getResource(XMLUtilTest.class, \"test4.xml\");", "modifier": "private final static", "type": "URL", "declarator": "url4 = Resources.getResource(XMLUtilTest.class, \"test4.xml\")", "var_name": "url4"}, {"original_string": "private Document document;", "modifier": "private", "type": "Document", "declarator": "document", "var_name": "document"}], "file": "core/inputoutput/src/test/java/org/arakhne/afc/inputoutput/xml/XMLUtilTest.java"}, "test_case": {"identifier": "getAttributeValueNodeBooleanStringArray", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void getAttributeValueNodeBooleanStringArray() {\n\t\tassertEquals(\"B\", XMLUtil.getAttributeValue(this.document, true, \"catalog\", \"book\", \"publish\", \"enum1\")); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$\n\t\tassertEquals(\"\", XMLUtil.getAttributeValue(this.document, true, \"catalog\", \"book\", \"publish\", \"Enum1\")); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$\n\t\tassertEquals(\"B\", XMLUtil.getAttributeValue(this.document, false, \"catalog\", \"book\", \"publish\", \"enum1\")); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$\n\t\tassertEquals(\"B\", XMLUtil.getAttributeValue(this.document, false, \"catalog\", \"book\", \"publish\", \"Enum1\")); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$\n\t\t//\n\t\tassertEquals(\"b\", XMLUtil.getAttributeValue(this.document, true, \"catalog\", \"book\", \"genre\", \"enum2\")); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$\n\t\tassertEquals(\"\", XMLUtil.getAttributeValue(this.document, true, \"catalog\", \"book\", \"genre\", \"Enum2\")); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$\n\t\tassertEquals(\"b\", XMLUtil.getAttributeValue(this.document, false, \"catalog\", \"book\", \"genre\", \"enum2\")); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$\n\t\tassertEquals(\"b\", XMLUtil.getAttributeValue(this.document, false, \"catalog\", \"book\", \"genre\", \"Enum2\")); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$\n\t}", "signature": "void getAttributeValueNodeBooleanStringArray()", "full_signature": "@Test public void getAttributeValueNodeBooleanStringArray()", "class_method_signature": "XMLUtilTest.getAttributeValueNodeBooleanStringArray()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getAttributeValue", "assertEquals", "getAttributeValue", "assertEquals", "getAttributeValue", "assertEquals", "getAttributeValue", "assertEquals", "getAttributeValue", "assertEquals", "getAttributeValue", "assertEquals", "getAttributeValue", "assertEquals", "getAttributeValue"]}, "focal_class": {"identifier": "XMLUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String NODE_RESOURCE = \"resource\";", "modifier": "public static final", "type": "String", "declarator": "NODE_RESOURCE = \"resource\"", "var_name": "NODE_RESOURCE"}, {"original_string": "public static final String NODE_RESOURCES = \"resources\";", "modifier": "public static final", "type": "String", "declarator": "NODE_RESOURCES = \"resources\"", "var_name": "NODE_RESOURCES"}, {"original_string": "public static final String DATE_FORMAT = \"yyyy-MM-dd'T'HH:mm:ss\";", "modifier": "public static final", "type": "String", "declarator": "DATE_FORMAT = \"yyyy-MM-dd'T'HH:mm:ss\"", "var_name": "DATE_FORMAT"}, {"original_string": "public static final String ATTR_ID = \"id\";", "modifier": "public static final", "type": "String", "declarator": "ATTR_ID = \"id\"", "var_name": "ATTR_ID"}, {"original_string": "public static final String ATTR_NAME = \"name\";", "modifier": "public static final", "type": "String", "declarator": "ATTR_NAME = \"name\"", "var_name": "ATTR_NAME"}, {"original_string": "public static final String ATTR_COLOR = \"color\";", "modifier": "public static final", "type": "String", "declarator": "ATTR_COLOR = \"color\"", "var_name": "ATTR_COLOR"}, {"original_string": "public static final String ATTR_URL = \"url\";", "modifier": "public static final", "type": "String", "declarator": "ATTR_URL = \"url\"", "var_name": "ATTR_URL"}, {"original_string": "public static final String ATTR_MIMETYPE = \"mime\";", "modifier": "public static final", "type": "String", "declarator": "ATTR_MIMETYPE = \"mime\"", "var_name": "ATTR_MIMETYPE"}, {"original_string": "public static final String ATTR_FILE = \"file\";", "modifier": "public static final", "type": "String", "declarator": "ATTR_FILE = \"file\"", "var_name": "ATTR_FILE"}, {"original_string": "private static final String POSITIVE_INTEGER_NUMBER_PATTERN = \"[0-9]+\";", "modifier": "private static final", "type": "String", "declarator": "POSITIVE_INTEGER_NUMBER_PATTERN = \"[0-9]+\"", "var_name": "POSITIVE_INTEGER_NUMBER_PATTERN"}, {"original_string": "private static final String POSITIVE_DOUBLE_NUMBER_PATTERN = \"(?:(?:[0-9]+(?:\\\\.[0-9]*)?)|\" //$NON-NLS-1$\n\t\t\t+ \"(?:\\\\.[0-9]+))(?:[eE][-+][0-9]+)?\";", "modifier": "private static final", "type": "String", "declarator": "POSITIVE_DOUBLE_NUMBER_PATTERN = \"(?:(?:[0-9]+(?:\\\\.[0-9]*)?)|\" //$NON-NLS-1$\n\t\t\t+ \"(?:\\\\.[0-9]+))(?:[eE][-+][0-9]+)?\"", "var_name": "POSITIVE_DOUBLE_NUMBER_PATTERN"}, {"original_string": "private static final Pattern HTML_RGB_PATTERN = Pattern.compile(\n\t\t\t\"rgb\\\\s*\\\\(\\\\s*(\" //$NON-NLS-1$\n\t\t\t+ POSITIVE_INTEGER_NUMBER_PATTERN + \")\\\\s*,\\\\s*(\" //$NON-NLS-1$\n\t\t\t+ POSITIVE_INTEGER_NUMBER_PATTERN + \")\\\\s*,\\\\s*(\" //$NON-NLS-1$\n\t\t\t+ POSITIVE_INTEGER_NUMBER_PATTERN + \")\\\\s*\\\\)\");", "modifier": "private static final", "type": "Pattern", "declarator": "HTML_RGB_PATTERN = Pattern.compile(\n\t\t\t\"rgb\\\\s*\\\\(\\\\s*(\" //$NON-NLS-1$\n\t\t\t+ POSITIVE_INTEGER_NUMBER_PATTERN + \")\\\\s*,\\\\s*(\" //$NON-NLS-1$\n\t\t\t+ POSITIVE_INTEGER_NUMBER_PATTERN + \")\\\\s*,\\\\s*(\" //$NON-NLS-1$\n\t\t\t+ POSITIVE_INTEGER_NUMBER_PATTERN + \")\\\\s*\\\\)\")", "var_name": "HTML_RGB_PATTERN"}, {"original_string": "private static final Pattern HTML_RGBA_PATTERN = Pattern.compile(\n\t\t\t\"rgba\\\\s*\\\\(\\\\s*(\" //$NON-NLS-1$\n\t\t\t+ POSITIVE_INTEGER_NUMBER_PATTERN + \")\\\\s*,\\\\s*(\" //$NON-NLS-1$\n\t\t\t+ POSITIVE_INTEGER_NUMBER_PATTERN + \")\\\\s*,\\\\s*(\" //$NON-NLS-1$\n\t\t\t+ POSITIVE_INTEGER_NUMBER_PATTERN + \")\\\\s*,\\\\s*(\" //$NON-NLS-1$\n\t\t\t+ POSITIVE_INTEGER_NUMBER_PATTERN + \")\\\\s*\\\\)\");", "modifier": "private static final", "type": "Pattern", "declarator": "HTML_RGBA_PATTERN = Pattern.compile(\n\t\t\t\"rgba\\\\s*\\\\(\\\\s*(\" //$NON-NLS-1$\n\t\t\t+ POSITIVE_INTEGER_NUMBER_PATTERN + \")\\\\s*,\\\\s*(\" //$NON-NLS-1$\n\t\t\t+ POSITIVE_INTEGER_NUMBER_PATTERN + \")\\\\s*,\\\\s*(\" //$NON-NLS-1$\n\t\t\t+ POSITIVE_INTEGER_NUMBER_PATTERN + \")\\\\s*,\\\\s*(\" //$NON-NLS-1$\n\t\t\t+ POSITIVE_INTEGER_NUMBER_PATTERN + \")\\\\s*\\\\)\")", "var_name": "HTML_RGBA_PATTERN"}, {"original_string": "private static final Pattern HTML_HSL_PATTERN = Pattern.compile(\n\t\t\t\"hsl\\\\s*\\\\(\\\\s*(\" //$NON-NLS-1$\n\t\t\t+ POSITIVE_DOUBLE_NUMBER_PATTERN + \"\\\\%?)\\\\s*,\\\\s*(\" //$NON-NLS-1$\n\t\t\t+ POSITIVE_DOUBLE_NUMBER_PATTERN + \"\\\\%?)\\\\s*,\\\\s*(\" //$NON-NLS-1$\n\t\t\t+ POSITIVE_DOUBLE_NUMBER_PATTERN + \"\\\\%?)\\\\s*\\\\)\");", "modifier": "private static final", "type": "Pattern", "declarator": "HTML_HSL_PATTERN = Pattern.compile(\n\t\t\t\"hsl\\\\s*\\\\(\\\\s*(\" //$NON-NLS-1$\n\t\t\t+ POSITIVE_DOUBLE_NUMBER_PATTERN + \"\\\\%?)\\\\s*,\\\\s*(\" //$NON-NLS-1$\n\t\t\t+ POSITIVE_DOUBLE_NUMBER_PATTERN + \"\\\\%?)\\\\s*,\\\\s*(\" //$NON-NLS-1$\n\t\t\t+ POSITIVE_DOUBLE_NUMBER_PATTERN + \"\\\\%?)\\\\s*\\\\)\")", "var_name": "HTML_HSL_PATTERN"}, {"original_string": "private static final Pattern HTML_HSLA_PATTERN = Pattern.compile(\n\t\t\t\"hsla\\\\s*\\\\(\\\\s*(\" + POSITIVE_DOUBLE_NUMBER_PATTERN + \"\\\\%?)\\\\s*,\\\\s*(\" //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\t\t+ POSITIVE_DOUBLE_NUMBER_PATTERN + \"\\\\%?)?\\\\s*,\" //$NON-NLS-1$\n\t\t\t+ \"\\\\s*(\" + POSITIVE_DOUBLE_NUMBER_PATTERN + \"\\\\%?)?\\\\s*,\\\\s*([0-9]+)\\\\s*\\\\)\");", "modifier": "private static final", "type": "Pattern", "declarator": "HTML_HSLA_PATTERN = Pattern.compile(\n\t\t\t\"hsla\\\\s*\\\\(\\\\s*(\" + POSITIVE_DOUBLE_NUMBER_PATTERN + \"\\\\%?)\\\\s*,\\\\s*(\" //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\t\t+ POSITIVE_DOUBLE_NUMBER_PATTERN + \"\\\\%?)?\\\\s*,\" //$NON-NLS-1$\n\t\t\t+ \"\\\\s*(\" + POSITIVE_DOUBLE_NUMBER_PATTERN + \"\\\\%?)?\\\\s*,\\\\s*([0-9]+)\\\\s*\\\\)\")", "var_name": "HTML_HSLA_PATTERN"}, {"original_string": "private static final String CONSTANT_TRUE = \"true\";", "modifier": "private static final", "type": "String", "declarator": "CONSTANT_TRUE = \"true\"", "var_name": "CONSTANT_TRUE"}, {"original_string": "private static final String CONSTANT_YES = \"yes\";", "modifier": "private static final", "type": "String", "declarator": "CONSTANT_YES = \"yes\"", "var_name": "CONSTANT_YES"}, {"original_string": "private static final String CONSTANT_ON = \"on\";", "modifier": "private static final", "type": "String", "declarator": "CONSTANT_ON = \"on\"", "var_name": "CONSTANT_ON"}, {"original_string": "private static final String CONSTANT_Y = \"y\";", "modifier": "private static final", "type": "String", "declarator": "CONSTANT_Y = \"y\"", "var_name": "CONSTANT_Y"}, {"original_string": "private static final String CONSTANT_T = \"t\";", "modifier": "private static final", "type": "String", "declarator": "CONSTANT_T = \"t\"", "var_name": "CONSTANT_T"}, {"original_string": "private static final String COLUMN_SEPARATOR = \"[ \\t]*;[ \\t]*\";", "modifier": "private static final", "type": "String", "declarator": "COLUMN_SEPARATOR = \"[ \\t]*;[ \\t]*\"", "var_name": "COLUMN_SEPARATOR"}, {"original_string": "private static final String INDENT_NUMBER = \"indent-number\";", "modifier": "private static final", "type": "String", "declarator": "INDENT_NUMBER = \"indent-number\"", "var_name": "INDENT_NUMBER"}], "methods": [{"identifier": "XMLUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " XMLUtil()", "full_signature": "private  XMLUtil()", "class_method_signature": "XMLUtil.XMLUtil()", "testcase": false, "constructor": true}, {"identifier": "decodeHexInteger", "parameters": "(String colorString)", "modifiers": "@SuppressWarnings(\"checkstyle:magicnumber\") private static", "return": "int", "signature": "int decodeHexInteger(String colorString)", "full_signature": "@SuppressWarnings(\"checkstyle:magicnumber\") private static int decodeHexInteger(String colorString)", "class_method_signature": "XMLUtil.decodeHexInteger(String colorString)", "testcase": false, "constructor": false}, {"identifier": "decodeDecInteger", "parameters": "(String colorString)", "modifiers": "private static", "return": "int", "signature": "int decodeDecInteger(String colorString)", "full_signature": "private static int decodeDecInteger(String colorString)", "class_method_signature": "XMLUtil.decodeDecInteger(String colorString)", "testcase": false, "constructor": false}, {"identifier": "decodeDouble", "parameters": "(String colorString)", "modifiers": "private static", "return": "double", "signature": "double decodeDouble(String colorString)", "full_signature": "private static double decodeDouble(String colorString)", "class_method_signature": "XMLUtil.decodeDouble(String colorString)", "testcase": false, "constructor": false}, {"identifier": "decodeFactor", "parameters": "(String colorString)", "modifiers": "@SuppressWarnings(\"checkstyle:magicnumber\") private static", "return": "double", "signature": "double decodeFactor(String colorString)", "full_signature": "@SuppressWarnings(\"checkstyle:magicnumber\") private static double decodeFactor(String colorString)", "class_method_signature": "XMLUtil.decodeFactor(String colorString)", "testcase": false, "constructor": false}, {"identifier": "encodeRgbaColor", "parameters": "(int red, int green, int blue, int alpha)", "modifiers": "@SuppressWarnings(\"checkstyle:magicnumber\") private static", "return": "int", "signature": "int encodeRgbaColor(int red, int green, int blue, int alpha)", "full_signature": "@SuppressWarnings(\"checkstyle:magicnumber\") private static int encodeRgbaColor(int red, int green, int blue, int alpha)", "class_method_signature": "XMLUtil.encodeRgbaColor(int red, int green, int blue, int alpha)", "testcase": false, "constructor": false}, {"identifier": "encodeHslaColor", "parameters": "(double hue, double saturation, double lightness, int alpha)", "modifiers": "@SuppressWarnings(\"checkstyle:magicnumber\") private static", "return": "int", "signature": "int encodeHslaColor(double hue, double saturation, double lightness, int alpha)", "full_signature": "@SuppressWarnings(\"checkstyle:magicnumber\") private static int encodeHslaColor(double hue, double saturation, double lightness, int alpha)", "class_method_signature": "XMLUtil.encodeHslaColor(double hue, double saturation, double lightness, int alpha)", "testcase": false, "constructor": false}, {"identifier": "hue2rgb", "parameters": "(double p0, double q0, double t0)", "modifiers": "@SuppressWarnings(\"checkstyle:magicnumber\") private static", "return": "double", "signature": "double hue2rgb(double p0, double q0, double t0)", "full_signature": "@SuppressWarnings(\"checkstyle:magicnumber\") private static double hue2rgb(double p0, double q0, double t0)", "class_method_signature": "XMLUtil.hue2rgb(double p0, double q0, double t0)", "testcase": false, "constructor": false}, {"identifier": "getAttributeBoolean", "parameters": "(Node document, boolean caseSensitive, String... path)", "modifiers": "@Pure public static", "return": "boolean", "signature": "boolean getAttributeBoolean(Node document, boolean caseSensitive, String... path)", "full_signature": "@Pure public static boolean getAttributeBoolean(Node document, boolean caseSensitive, String... path)", "class_method_signature": "XMLUtil.getAttributeBoolean(Node document, boolean caseSensitive, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeBoolean", "parameters": "(Node document, String... path)", "modifiers": "@Pure public static", "return": "boolean", "signature": "boolean getAttributeBoolean(Node document, String... path)", "full_signature": "@Pure public static boolean getAttributeBoolean(Node document, String... path)", "class_method_signature": "XMLUtil.getAttributeBoolean(Node document, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeBooleanWithDefault", "parameters": "(Node document, boolean caseSensitive,\n\t\t\tBoolean defaultValue, String... path)", "modifiers": "@Pure public static", "return": "Boolean", "signature": "Boolean getAttributeBooleanWithDefault(Node document, boolean caseSensitive,\n\t\t\tBoolean defaultValue, String... path)", "full_signature": "@Pure public static Boolean getAttributeBooleanWithDefault(Node document, boolean caseSensitive,\n\t\t\tBoolean defaultValue, String... path)", "class_method_signature": "XMLUtil.getAttributeBooleanWithDefault(Node document, boolean caseSensitive,\n\t\t\tBoolean defaultValue, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeBooleanWithDefault", "parameters": "(Node document, Boolean defaultValue, String... path)", "modifiers": "@Pure public static", "return": "Boolean", "signature": "Boolean getAttributeBooleanWithDefault(Node document, Boolean defaultValue, String... path)", "full_signature": "@Pure public static Boolean getAttributeBooleanWithDefault(Node document, Boolean defaultValue, String... path)", "class_method_signature": "XMLUtil.getAttributeBooleanWithDefault(Node document, Boolean defaultValue, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeClass", "parameters": "(Node document, boolean caseSensitive, String... path)", "modifiers": "@Pure public static", "return": "Class<?>", "signature": "Class<?> getAttributeClass(Node document, boolean caseSensitive, String... path)", "full_signature": "@Pure public static Class<?> getAttributeClass(Node document, boolean caseSensitive, String... path)", "class_method_signature": "XMLUtil.getAttributeClass(Node document, boolean caseSensitive, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeClass", "parameters": "(Node document, String... path)", "modifiers": "@Pure public static", "return": "Class<?>", "signature": "Class<?> getAttributeClass(Node document, String... path)", "full_signature": "@Pure public static Class<?> getAttributeClass(Node document, String... path)", "class_method_signature": "XMLUtil.getAttributeClass(Node document, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeClassWithDefault", "parameters": "(Node document, boolean caseSensitive,\n\t\t\tClass<?> defaultValue, String... path)", "modifiers": "@Pure public static", "return": "Class<?>", "signature": "Class<?> getAttributeClassWithDefault(Node document, boolean caseSensitive,\n\t\t\tClass<?> defaultValue, String... path)", "full_signature": "@Pure public static Class<?> getAttributeClassWithDefault(Node document, boolean caseSensitive,\n\t\t\tClass<?> defaultValue, String... path)", "class_method_signature": "XMLUtil.getAttributeClassWithDefault(Node document, boolean caseSensitive,\n\t\t\tClass<?> defaultValue, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeClassWithDefault", "parameters": "(Node document, Class<?> defaultValue, String... path)", "modifiers": "@Pure public static", "return": "Class<?>", "signature": "Class<?> getAttributeClassWithDefault(Node document, Class<?> defaultValue, String... path)", "full_signature": "@Pure public static Class<?> getAttributeClassWithDefault(Node document, Class<?> defaultValue, String... path)", "class_method_signature": "XMLUtil.getAttributeClassWithDefault(Node document, Class<?> defaultValue, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeColor", "parameters": "(Node document, boolean caseSensitive, String... path)", "modifiers": "@Pure public static", "return": "int", "signature": "int getAttributeColor(Node document, boolean caseSensitive, String... path)", "full_signature": "@Pure public static int getAttributeColor(Node document, boolean caseSensitive, String... path)", "class_method_signature": "XMLUtil.getAttributeColor(Node document, boolean caseSensitive, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeColor", "parameters": "(Node document, String... path)", "modifiers": "@Pure public static", "return": "int", "signature": "int getAttributeColor(Node document, String... path)", "full_signature": "@Pure public static int getAttributeColor(Node document, String... path)", "class_method_signature": "XMLUtil.getAttributeColor(Node document, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeColorWithDefault", "parameters": "(Node document, boolean caseSensitive, Integer defaultValue,\n\t\t\tString... path)", "modifiers": "@Pure public static", "return": "Integer", "signature": "Integer getAttributeColorWithDefault(Node document, boolean caseSensitive, Integer defaultValue,\n\t\t\tString... path)", "full_signature": "@Pure public static Integer getAttributeColorWithDefault(Node document, boolean caseSensitive, Integer defaultValue,\n\t\t\tString... path)", "class_method_signature": "XMLUtil.getAttributeColorWithDefault(Node document, boolean caseSensitive, Integer defaultValue,\n\t\t\tString... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeColorWithDefault", "parameters": "(Node document, Integer defaultValue, String... path)", "modifiers": "@Pure public static", "return": "Integer", "signature": "Integer getAttributeColorWithDefault(Node document, Integer defaultValue, String... path)", "full_signature": "@Pure public static Integer getAttributeColorWithDefault(Node document, Integer defaultValue, String... path)", "class_method_signature": "XMLUtil.getAttributeColorWithDefault(Node document, Integer defaultValue, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeDate", "parameters": "(Node document, boolean caseSensitive, String... path)", "modifiers": "@Pure public static", "return": "Date", "signature": "Date getAttributeDate(Node document, boolean caseSensitive, String... path)", "full_signature": "@Pure public static Date getAttributeDate(Node document, boolean caseSensitive, String... path)", "class_method_signature": "XMLUtil.getAttributeDate(Node document, boolean caseSensitive, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeDate", "parameters": "(Node document, String... path)", "modifiers": "@Pure public static", "return": "Date", "signature": "Date getAttributeDate(Node document, String... path)", "full_signature": "@Pure public static Date getAttributeDate(Node document, String... path)", "class_method_signature": "XMLUtil.getAttributeDate(Node document, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeDateWithDefault", "parameters": "(Node document, boolean caseSensitive, Date defaultValue, String... path)", "modifiers": "@Pure public static", "return": "Date", "signature": "Date getAttributeDateWithDefault(Node document, boolean caseSensitive, Date defaultValue, String... path)", "full_signature": "@Pure public static Date getAttributeDateWithDefault(Node document, boolean caseSensitive, Date defaultValue, String... path)", "class_method_signature": "XMLUtil.getAttributeDateWithDefault(Node document, boolean caseSensitive, Date defaultValue, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeDateWithDefault", "parameters": "(Node document, Date defaultValue, String... path)", "modifiers": "@Pure public static", "return": "Date", "signature": "Date getAttributeDateWithDefault(Node document, Date defaultValue, String... path)", "full_signature": "@Pure public static Date getAttributeDateWithDefault(Node document, Date defaultValue, String... path)", "class_method_signature": "XMLUtil.getAttributeDateWithDefault(Node document, Date defaultValue, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeDouble", "parameters": "(Node document, boolean caseSensitive, String... path)", "modifiers": "@Pure public static", "return": "double", "signature": "double getAttributeDouble(Node document, boolean caseSensitive, String... path)", "full_signature": "@Pure public static double getAttributeDouble(Node document, boolean caseSensitive, String... path)", "class_method_signature": "XMLUtil.getAttributeDouble(Node document, boolean caseSensitive, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeDouble", "parameters": "(Node document, String... path)", "modifiers": "@Pure public static", "return": "double", "signature": "double getAttributeDouble(Node document, String... path)", "full_signature": "@Pure public static double getAttributeDouble(Node document, String... path)", "class_method_signature": "XMLUtil.getAttributeDouble(Node document, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeDoubleWithDefault", "parameters": "(Node document, boolean caseSensitive, Double defaultValue,\n\t\t\tString... path)", "modifiers": "@Pure public static", "return": "Double", "signature": "Double getAttributeDoubleWithDefault(Node document, boolean caseSensitive, Double defaultValue,\n\t\t\tString... path)", "full_signature": "@Pure public static Double getAttributeDoubleWithDefault(Node document, boolean caseSensitive, Double defaultValue,\n\t\t\tString... path)", "class_method_signature": "XMLUtil.getAttributeDoubleWithDefault(Node document, boolean caseSensitive, Double defaultValue,\n\t\t\tString... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeDoubleWithDefault", "parameters": "(Node document, Double defaultValue, String... path)", "modifiers": "@Pure public static", "return": "Double", "signature": "Double getAttributeDoubleWithDefault(Node document, Double defaultValue, String... path)", "full_signature": "@Pure public static Double getAttributeDoubleWithDefault(Node document, Double defaultValue, String... path)", "class_method_signature": "XMLUtil.getAttributeDoubleWithDefault(Node document, Double defaultValue, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeEnum", "parameters": "(Node document, Class<T> type, boolean caseSensitive, String... path)", "modifiers": "@Pure public static", "return": "T", "signature": "T getAttributeEnum(Node document, Class<T> type, boolean caseSensitive, String... path)", "full_signature": "@Pure public static T getAttributeEnum(Node document, Class<T> type, boolean caseSensitive, String... path)", "class_method_signature": "XMLUtil.getAttributeEnum(Node document, Class<T> type, boolean caseSensitive, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeEnum", "parameters": "(Node document, Class<T> type, String... path)", "modifiers": "@Pure public static", "return": "T", "signature": "T getAttributeEnum(Node document, Class<T> type, String... path)", "full_signature": "@Pure public static T getAttributeEnum(Node document, Class<T> type, String... path)", "class_method_signature": "XMLUtil.getAttributeEnum(Node document, Class<T> type, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeEnumWithDefault", "parameters": "(Node document, Class<T> type,\n\t\t\tboolean caseSensitive, T defaultValue, String... path)", "modifiers": "@Pure public static", "return": "T", "signature": "T getAttributeEnumWithDefault(Node document, Class<T> type,\n\t\t\tboolean caseSensitive, T defaultValue, String... path)", "full_signature": "@Pure public static T getAttributeEnumWithDefault(Node document, Class<T> type,\n\t\t\tboolean caseSensitive, T defaultValue, String... path)", "class_method_signature": "XMLUtil.getAttributeEnumWithDefault(Node document, Class<T> type,\n\t\t\tboolean caseSensitive, T defaultValue, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeEnumWithDefault", "parameters": "(Node document, Class<T> type,\n\t\t\tT defaultValue, String... path)", "modifiers": "@Pure public static", "return": "T", "signature": "T getAttributeEnumWithDefault(Node document, Class<T> type,\n\t\t\tT defaultValue, String... path)", "full_signature": "@Pure public static T getAttributeEnumWithDefault(Node document, Class<T> type,\n\t\t\tT defaultValue, String... path)", "class_method_signature": "XMLUtil.getAttributeEnumWithDefault(Node document, Class<T> type,\n\t\t\tT defaultValue, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeFloat", "parameters": "(Node document, boolean caseSensitive, String... path)", "modifiers": "@Pure public static", "return": "float", "signature": "float getAttributeFloat(Node document, boolean caseSensitive, String... path)", "full_signature": "@Pure public static float getAttributeFloat(Node document, boolean caseSensitive, String... path)", "class_method_signature": "XMLUtil.getAttributeFloat(Node document, boolean caseSensitive, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeFloat", "parameters": "(Node document, String... path)", "modifiers": "@Pure public static", "return": "float", "signature": "float getAttributeFloat(Node document, String... path)", "full_signature": "@Pure public static float getAttributeFloat(Node document, String... path)", "class_method_signature": "XMLUtil.getAttributeFloat(Node document, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeFloatWithDefault", "parameters": "(Node document, boolean caseSensitive, Float defaultValue, String... path)", "modifiers": "@Pure public static", "return": "Float", "signature": "Float getAttributeFloatWithDefault(Node document, boolean caseSensitive, Float defaultValue, String... path)", "full_signature": "@Pure public static Float getAttributeFloatWithDefault(Node document, boolean caseSensitive, Float defaultValue, String... path)", "class_method_signature": "XMLUtil.getAttributeFloatWithDefault(Node document, boolean caseSensitive, Float defaultValue, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeFloatWithDefault", "parameters": "(Node document, Float defaultValue, String... path)", "modifiers": "@Pure public static", "return": "Float", "signature": "Float getAttributeFloatWithDefault(Node document, Float defaultValue, String... path)", "full_signature": "@Pure public static Float getAttributeFloatWithDefault(Node document, Float defaultValue, String... path)", "class_method_signature": "XMLUtil.getAttributeFloatWithDefault(Node document, Float defaultValue, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeInt", "parameters": "(Node document, boolean caseSensitive, String... path)", "modifiers": "@Pure public static", "return": "int", "signature": "int getAttributeInt(Node document, boolean caseSensitive, String... path)", "full_signature": "@Pure public static int getAttributeInt(Node document, boolean caseSensitive, String... path)", "class_method_signature": "XMLUtil.getAttributeInt(Node document, boolean caseSensitive, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeInt", "parameters": "(Node document, String... path)", "modifiers": "@Pure public static", "return": "int", "signature": "int getAttributeInt(Node document, String... path)", "full_signature": "@Pure public static int getAttributeInt(Node document, String... path)", "class_method_signature": "XMLUtil.getAttributeInt(Node document, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeIntWithDefault", "parameters": "(Node document, boolean caseSensitive, Integer defaultValue, String... path)", "modifiers": "@Pure public static", "return": "Integer", "signature": "Integer getAttributeIntWithDefault(Node document, boolean caseSensitive, Integer defaultValue, String... path)", "full_signature": "@Pure public static Integer getAttributeIntWithDefault(Node document, boolean caseSensitive, Integer defaultValue, String... path)", "class_method_signature": "XMLUtil.getAttributeIntWithDefault(Node document, boolean caseSensitive, Integer defaultValue, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeIntWithDefault", "parameters": "(Node document, Integer defaultValue, String... path)", "modifiers": "@Pure public static", "return": "Integer", "signature": "Integer getAttributeIntWithDefault(Node document, Integer defaultValue, String... path)", "full_signature": "@Pure public static Integer getAttributeIntWithDefault(Node document, Integer defaultValue, String... path)", "class_method_signature": "XMLUtil.getAttributeIntWithDefault(Node document, Integer defaultValue, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeLong", "parameters": "(Node document, boolean caseSensitive, String... path)", "modifiers": "@Pure public static", "return": "long", "signature": "long getAttributeLong(Node document, boolean caseSensitive, String... path)", "full_signature": "@Pure public static long getAttributeLong(Node document, boolean caseSensitive, String... path)", "class_method_signature": "XMLUtil.getAttributeLong(Node document, boolean caseSensitive, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeLong", "parameters": "(Node document, String... path)", "modifiers": "@Pure public static", "return": "long", "signature": "long getAttributeLong(Node document, String... path)", "full_signature": "@Pure public static long getAttributeLong(Node document, String... path)", "class_method_signature": "XMLUtil.getAttributeLong(Node document, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeLongWithDefault", "parameters": "(Node document, boolean caseSensitive, Long defaultValue, String... path)", "modifiers": "@Pure public static", "return": "Long", "signature": "Long getAttributeLongWithDefault(Node document, boolean caseSensitive, Long defaultValue, String... path)", "full_signature": "@Pure public static Long getAttributeLongWithDefault(Node document, boolean caseSensitive, Long defaultValue, String... path)", "class_method_signature": "XMLUtil.getAttributeLongWithDefault(Node document, boolean caseSensitive, Long defaultValue, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeLongWithDefault", "parameters": "(Node document, Long defaultValue, String... path)", "modifiers": "@Pure public static", "return": "Long", "signature": "Long getAttributeLongWithDefault(Node document, Long defaultValue, String... path)", "full_signature": "@Pure public static Long getAttributeLongWithDefault(Node document, Long defaultValue, String... path)", "class_method_signature": "XMLUtil.getAttributeLongWithDefault(Node document, Long defaultValue, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeURL", "parameters": "(Node document, boolean caseSensitive, String... path)", "modifiers": "@Pure public static", "return": "URL", "signature": "URL getAttributeURL(Node document, boolean caseSensitive, String... path)", "full_signature": "@Pure public static URL getAttributeURL(Node document, boolean caseSensitive, String... path)", "class_method_signature": "XMLUtil.getAttributeURL(Node document, boolean caseSensitive, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeURL", "parameters": "(Node document, String... path)", "modifiers": "@Pure public static", "return": "URL", "signature": "URL getAttributeURL(Node document, String... path)", "full_signature": "@Pure public static URL getAttributeURL(Node document, String... path)", "class_method_signature": "XMLUtil.getAttributeURL(Node document, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeURLWithDefault", "parameters": "(Node document, boolean caseSensitive, URL defaultValue, String... path)", "modifiers": "@Pure public static", "return": "URL", "signature": "URL getAttributeURLWithDefault(Node document, boolean caseSensitive, URL defaultValue, String... path)", "full_signature": "@Pure public static URL getAttributeURLWithDefault(Node document, boolean caseSensitive, URL defaultValue, String... path)", "class_method_signature": "XMLUtil.getAttributeURLWithDefault(Node document, boolean caseSensitive, URL defaultValue, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeURLWithDefault", "parameters": "(Node document, URL defaultValue, String... path)", "modifiers": "@Pure public static", "return": "URL", "signature": "URL getAttributeURLWithDefault(Node document, URL defaultValue, String... path)", "full_signature": "@Pure public static URL getAttributeURLWithDefault(Node document, URL defaultValue, String... path)", "class_method_signature": "XMLUtil.getAttributeURLWithDefault(Node document, URL defaultValue, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeUUID", "parameters": "(Node document, boolean caseSensitive, String... path)", "modifiers": "@Pure public static", "return": "UUID", "signature": "UUID getAttributeUUID(Node document, boolean caseSensitive, String... path)", "full_signature": "@Pure public static UUID getAttributeUUID(Node document, boolean caseSensitive, String... path)", "class_method_signature": "XMLUtil.getAttributeUUID(Node document, boolean caseSensitive, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeUUID", "parameters": "(Node document, String... path)", "modifiers": "@Pure public static", "return": "UUID", "signature": "UUID getAttributeUUID(Node document, String... path)", "full_signature": "@Pure public static UUID getAttributeUUID(Node document, String... path)", "class_method_signature": "XMLUtil.getAttributeUUID(Node document, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeUUIDs", "parameters": "(Node document, boolean caseSensitive, String... path)", "modifiers": "@Pure public static", "return": "List<UUID>", "signature": "List<UUID> getAttributeUUIDs(Node document, boolean caseSensitive, String... path)", "full_signature": "@Pure public static List<UUID> getAttributeUUIDs(Node document, boolean caseSensitive, String... path)", "class_method_signature": "XMLUtil.getAttributeUUIDs(Node document, boolean caseSensitive, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeUUIDs", "parameters": "(Node document, String... path)", "modifiers": "@Pure public static", "return": "List<UUID>", "signature": "List<UUID> getAttributeUUIDs(Node document, String... path)", "full_signature": "@Pure public static List<UUID> getAttributeUUIDs(Node document, String... path)", "class_method_signature": "XMLUtil.getAttributeUUIDs(Node document, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeUUIDWithDefault", "parameters": "(Node document, boolean caseSensitive, UUID defaultValue, String... path)", "modifiers": "@Pure public static", "return": "UUID", "signature": "UUID getAttributeUUIDWithDefault(Node document, boolean caseSensitive, UUID defaultValue, String... path)", "full_signature": "@Pure public static UUID getAttributeUUIDWithDefault(Node document, boolean caseSensitive, UUID defaultValue, String... path)", "class_method_signature": "XMLUtil.getAttributeUUIDWithDefault(Node document, boolean caseSensitive, UUID defaultValue, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeUUIDWithDefault", "parameters": "(Node document, UUID defaultValue, String... path)", "modifiers": "@Pure public static", "return": "UUID", "signature": "UUID getAttributeUUIDWithDefault(Node document, UUID defaultValue, String... path)", "full_signature": "@Pure public static UUID getAttributeUUIDWithDefault(Node document, UUID defaultValue, String... path)", "class_method_signature": "XMLUtil.getAttributeUUIDWithDefault(Node document, UUID defaultValue, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeValue", "parameters": "(Node document, boolean caseSensitive, int idxStart, String... path)", "modifiers": "@Pure @SuppressWarnings(\"checkstyle:cyclomaticcomplexity\") private static", "return": "String", "signature": "String getAttributeValue(Node document, boolean caseSensitive, int idxStart, String... path)", "full_signature": "@Pure @SuppressWarnings(\"checkstyle:cyclomaticcomplexity\") private static String getAttributeValue(Node document, boolean caseSensitive, int idxStart, String... path)", "class_method_signature": "XMLUtil.getAttributeValue(Node document, boolean caseSensitive, int idxStart, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeValue", "parameters": "(Node document, boolean casesSensitive, String... path)", "modifiers": "@Pure public static", "return": "String", "signature": "String getAttributeValue(Node document, boolean casesSensitive, String... path)", "full_signature": "@Pure public static String getAttributeValue(Node document, boolean casesSensitive, String... path)", "class_method_signature": "XMLUtil.getAttributeValue(Node document, boolean casesSensitive, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeValue", "parameters": "(Node document, String... path)", "modifiers": "@Pure public static", "return": "String", "signature": "String getAttributeValue(Node document, String... path)", "full_signature": "@Pure public static String getAttributeValue(Node document, String... path)", "class_method_signature": "XMLUtil.getAttributeValue(Node document, String... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeValueWithDefault", "parameters": "(Node document, boolean caseSensitive, String defaultValue,\n\t\t\tString... path)", "modifiers": "@Pure public static", "return": "String", "signature": "String getAttributeValueWithDefault(Node document, boolean caseSensitive, String defaultValue,\n\t\t\tString... path)", "full_signature": "@Pure public static String getAttributeValueWithDefault(Node document, boolean caseSensitive, String defaultValue,\n\t\t\tString... path)", "class_method_signature": "XMLUtil.getAttributeValueWithDefault(Node document, boolean caseSensitive, String defaultValue,\n\t\t\tString... path)", "testcase": false, "constructor": false}, {"identifier": "getAttributeValueWithDefault", "parameters": "(Node document, String defaultValue, String... path)", "modifiers": "@Pure public static", "return": "String", "signature": "String getAttributeValueWithDefault(Node document, String defaultValue, String... path)", "full_signature": "@Pure public static String getAttributeValueWithDefault(Node document, String defaultValue, String... path)", "class_method_signature": "XMLUtil.getAttributeValueWithDefault(Node document, String defaultValue, String... path)", "testcase": false, "constructor": false}, {"identifier": "getChild", "parameters": "(Node parent, Class<T> type)", "modifiers": "@Pure public static", "return": "T", "signature": "T getChild(Node parent, Class<T> type)", "full_signature": "@Pure public static T getChild(Node parent, Class<T> type)", "class_method_signature": "XMLUtil.getChild(Node parent, Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "getDocumentFor", "parameters": "(Node node)", "modifiers": "@Pure public static", "return": "Document", "signature": "Document getDocumentFor(Node node)", "full_signature": "@Pure public static Document getDocumentFor(Node node)", "class_method_signature": "XMLUtil.getDocumentFor(Node node)", "testcase": false, "constructor": false}, {"identifier": "getElementFromPath", "parameters": "(Node document, boolean caseSensitive, int idxStart, String... path)", "modifiers": "@Pure private static", "return": "Element", "signature": "Element getElementFromPath(Node document, boolean caseSensitive, int idxStart, String... path)", "full_signature": "@Pure private static Element getElementFromPath(Node document, boolean caseSensitive, int idxStart, String... path)", "class_method_signature": "XMLUtil.getElementFromPath(Node document, boolean caseSensitive, int idxStart, String... path)", "testcase": false, "constructor": false}, {"identifier": "getElementFromPath", "parameters": "(Node document, boolean caseSensitive, String... path)", "modifiers": "@Pure public static", "return": "Element", "signature": "Element getElementFromPath(Node document, boolean caseSensitive, String... path)", "full_signature": "@Pure public static Element getElementFromPath(Node document, boolean caseSensitive, String... path)", "class_method_signature": "XMLUtil.getElementFromPath(Node document, boolean caseSensitive, String... path)", "testcase": false, "constructor": false}, {"identifier": "getElementFromPath", "parameters": "(Node document, String... path)", "modifiers": "@Pure public static", "return": "Element", "signature": "Element getElementFromPath(Node document, String... path)", "full_signature": "@Pure public static Element getElementFromPath(Node document, String... path)", "class_method_signature": "XMLUtil.getElementFromPath(Node document, String... path)", "testcase": false, "constructor": false}, {"identifier": "getElementMatching", "parameters": "(Node document, XMLConstraint constraint, boolean caseSensitive, String... path)", "modifiers": "@Pure public static", "return": "Element", "signature": "Element getElementMatching(Node document, XMLConstraint constraint, boolean caseSensitive, String... path)", "full_signature": "@Pure public static Element getElementMatching(Node document, XMLConstraint constraint, boolean caseSensitive, String... path)", "class_method_signature": "XMLUtil.getElementMatching(Node document, XMLConstraint constraint, boolean caseSensitive, String... path)", "testcase": false, "constructor": false}, {"identifier": "getElementMatching", "parameters": "(Node document, XMLConstraint constraint, String... path)", "modifiers": "@Pure public static", "return": "Element", "signature": "Element getElementMatching(Node document, XMLConstraint constraint, String... path)", "full_signature": "@Pure public static Element getElementMatching(Node document, XMLConstraint constraint, String... path)", "class_method_signature": "XMLUtil.getElementMatching(Node document, XMLConstraint constraint, String... path)", "testcase": false, "constructor": false}, {"identifier": "getElementsFromPath", "parameters": "(Node document, boolean caseSensitive, int idxStart,\n\t\t\tList<Element> result, String... path)", "modifiers": "private static", "return": "void", "signature": "void getElementsFromPath(Node document, boolean caseSensitive, int idxStart,\n\t\t\tList<Element> result, String... path)", "full_signature": "private static void getElementsFromPath(Node document, boolean caseSensitive, int idxStart,\n\t\t\tList<Element> result, String... path)", "class_method_signature": "XMLUtil.getElementsFromPath(Node document, boolean caseSensitive, int idxStart,\n\t\t\tList<Element> result, String... path)", "testcase": false, "constructor": false}, {"identifier": "getElementsFromPath", "parameters": "(Node document, boolean caseSensitive, String... path)", "modifiers": "@Pure public static", "return": "List<Element>", "signature": "List<Element> getElementsFromPath(Node document, boolean caseSensitive, String... path)", "full_signature": "@Pure public static List<Element> getElementsFromPath(Node document, boolean caseSensitive, String... path)", "class_method_signature": "XMLUtil.getElementsFromPath(Node document, boolean caseSensitive, String... path)", "testcase": false, "constructor": false}, {"identifier": "getElementsFromPath", "parameters": "(Node document, String... path)", "modifiers": "@Pure public static", "return": "List<Element>", "signature": "List<Element> getElementsFromPath(Node document, String... path)", "full_signature": "@Pure public static List<Element> getElementsFromPath(Node document, String... path)", "class_method_signature": "XMLUtil.getElementsFromPath(Node document, String... path)", "testcase": false, "constructor": false}, {"identifier": "getNodeFromPath", "parameters": "(Node document, boolean caseSensitive, int idxStart, String... path)", "modifiers": "@Pure private static", "return": "Node", "signature": "Node getNodeFromPath(Node document, boolean caseSensitive, int idxStart, String... path)", "full_signature": "@Pure private static Node getNodeFromPath(Node document, boolean caseSensitive, int idxStart, String... path)", "class_method_signature": "XMLUtil.getNodeFromPath(Node document, boolean caseSensitive, int idxStart, String... path)", "testcase": false, "constructor": false}, {"identifier": "getNodeFromPath", "parameters": "(Node document, boolean caseSensitive, String... path)", "modifiers": "@Pure public static", "return": "Node", "signature": "Node getNodeFromPath(Node document, boolean caseSensitive, String... path)", "full_signature": "@Pure public static Node getNodeFromPath(Node document, boolean caseSensitive, String... path)", "class_method_signature": "XMLUtil.getNodeFromPath(Node document, boolean caseSensitive, String... path)", "testcase": false, "constructor": false}, {"identifier": "getNodeFromPath", "parameters": "(Node document, String... path)", "modifiers": "@Pure public static", "return": "Node", "signature": "Node getNodeFromPath(Node document, String... path)", "full_signature": "@Pure public static Node getNodeFromPath(Node document, String... path)", "class_method_signature": "XMLUtil.getNodeFromPath(Node document, String... path)", "testcase": false, "constructor": false}, {"identifier": "getNodesFromPath", "parameters": "(Node document, boolean caseSensitive, int idxStart, List<Node> result, String... path)", "modifiers": "private static", "return": "void", "signature": "void getNodesFromPath(Node document, boolean caseSensitive, int idxStart, List<Node> result, String... path)", "full_signature": "private static void getNodesFromPath(Node document, boolean caseSensitive, int idxStart, List<Node> result, String... path)", "class_method_signature": "XMLUtil.getNodesFromPath(Node document, boolean caseSensitive, int idxStart, List<Node> result, String... path)", "testcase": false, "constructor": false}, {"identifier": "getNodesFromPath", "parameters": "(Node document, boolean caseSensitive, String... path)", "modifiers": "@Pure public static", "return": "List<Node>", "signature": "List<Node> getNodesFromPath(Node document, boolean caseSensitive, String... path)", "full_signature": "@Pure public static List<Node> getNodesFromPath(Node document, boolean caseSensitive, String... path)", "class_method_signature": "XMLUtil.getNodesFromPath(Node document, boolean caseSensitive, String... path)", "testcase": false, "constructor": false}, {"identifier": "getNodesFromPath", "parameters": "(Node document, String... path)", "modifiers": "@Pure public static", "return": "List<Node>", "signature": "List<Node> getNodesFromPath(Node document, String... path)", "full_signature": "@Pure public static List<Node> getNodesFromPath(Node document, String... path)", "class_method_signature": "XMLUtil.getNodesFromPath(Node document, String... path)", "testcase": false, "constructor": false}, {"identifier": "getText", "parameters": "(Node document, String... path)", "modifiers": "@Pure public static", "return": "String", "signature": "String getText(Node document, String... path)", "full_signature": "@Pure public static String getText(Node document, String... path)", "class_method_signature": "XMLUtil.getText(Node document, String... path)", "testcase": false, "constructor": false}, {"identifier": "iterate", "parameters": "(Node parent, String nodeName)", "modifiers": "@Pure public static", "return": "Iterator<Node>", "signature": "Iterator<Node> iterate(Node parent, String nodeName)", "full_signature": "@Pure public static Iterator<Node> iterate(Node parent, String nodeName)", "class_method_signature": "XMLUtil.iterate(Node parent, String nodeName)", "testcase": false, "constructor": false}, {"identifier": "parseColor", "parameters": "(String xmlColor)", "modifiers": "@Pure @SuppressWarnings({\"checkstyle:magicnumber\", \"checkstyle:npathcomplexity\"}) public static", "return": "int", "signature": "int parseColor(String xmlColor)", "full_signature": "@Pure @SuppressWarnings({\"checkstyle:magicnumber\", \"checkstyle:npathcomplexity\"}) public static int parseColor(String xmlColor)", "class_method_signature": "XMLUtil.parseColor(String xmlColor)", "testcase": false, "constructor": false}, {"identifier": "parseDate", "parameters": "(String xmlDate)", "modifiers": "@Pure public static", "return": "Date", "signature": "Date parseDate(String xmlDate)", "full_signature": "@Pure public static Date parseDate(String xmlDate)", "class_method_signature": "XMLUtil.parseDate(String xmlDate)", "testcase": false, "constructor": false}, {"identifier": "parseObject", "parameters": "(String xmlSerializedObject)", "modifiers": "@Pure public static", "return": "Object", "signature": "Object parseObject(String xmlSerializedObject)", "full_signature": "@Pure public static Object parseObject(String xmlSerializedObject)", "class_method_signature": "XMLUtil.parseObject(String xmlSerializedObject)", "testcase": false, "constructor": false}, {"identifier": "parseString", "parameters": "(String text)", "modifiers": "@Pure public static", "return": "byte[]", "signature": "byte[] parseString(String text)", "full_signature": "@Pure public static byte[] parseString(String text)", "class_method_signature": "XMLUtil.parseString(String text)", "testcase": false, "constructor": false}, {"identifier": "parseXML", "parameters": "(String xmlString)", "modifiers": "@Pure public static", "return": "Document", "signature": "Document parseXML(String xmlString)", "full_signature": "@Pure public static Document parseXML(String xmlString)", "class_method_signature": "XMLUtil.parseXML(String xmlString)", "testcase": false, "constructor": false}, {"identifier": "readXML", "parameters": "(File file)", "modifiers": "public static", "return": "Document", "signature": "Document readXML(File file)", "full_signature": "public static Document readXML(File file)", "class_method_signature": "XMLUtil.readXML(File file)", "testcase": false, "constructor": false}, {"identifier": "readXML", "parameters": "(InputStream stream)", "modifiers": "public static", "return": "Document", "signature": "Document readXML(InputStream stream)", "full_signature": "public static Document readXML(InputStream stream)", "class_method_signature": "XMLUtil.readXML(InputStream stream)", "testcase": false, "constructor": false}, {"identifier": "readXML", "parameters": "(Reader reader)", "modifiers": "public static", "return": "Document", "signature": "Document readXML(Reader reader)", "full_signature": "public static Document readXML(Reader reader)", "class_method_signature": "XMLUtil.readXML(Reader reader)", "testcase": false, "constructor": false}, {"identifier": "readXML", "parameters": "(String file)", "modifiers": "public static", "return": "Document", "signature": "Document readXML(String file)", "full_signature": "public static Document readXML(String file)", "class_method_signature": "XMLUtil.readXML(String file)", "testcase": false, "constructor": false}, {"identifier": "readXML", "parameters": "(URL file)", "modifiers": "public static", "return": "Document", "signature": "Document readXML(URL file)", "full_signature": "public static Document readXML(URL file)", "class_method_signature": "XMLUtil.readXML(URL file)", "testcase": false, "constructor": false}, {"identifier": "readXMLFragment", "parameters": "(File file)", "modifiers": "public static", "return": "DocumentFragment", "signature": "DocumentFragment readXMLFragment(File file)", "full_signature": "public static DocumentFragment readXMLFragment(File file)", "class_method_signature": "XMLUtil.readXMLFragment(File file)", "testcase": false, "constructor": false}, {"identifier": "readXMLFragment", "parameters": "(File file, boolean skipRoot)", "modifiers": "public static", "return": "DocumentFragment", "signature": "DocumentFragment readXMLFragment(File file, boolean skipRoot)", "full_signature": "public static DocumentFragment readXMLFragment(File file, boolean skipRoot)", "class_method_signature": "XMLUtil.readXMLFragment(File file, boolean skipRoot)", "testcase": false, "constructor": false}, {"identifier": "readXMLFragment", "parameters": "(InputStream stream)", "modifiers": "public static", "return": "DocumentFragment", "signature": "DocumentFragment readXMLFragment(InputStream stream)", "full_signature": "public static DocumentFragment readXMLFragment(InputStream stream)", "class_method_signature": "XMLUtil.readXMLFragment(InputStream stream)", "testcase": false, "constructor": false}, {"identifier": "readXMLFragment", "parameters": "(InputStream stream, boolean skipRoot)", "modifiers": "public static", "return": "DocumentFragment", "signature": "DocumentFragment readXMLFragment(InputStream stream, boolean skipRoot)", "full_signature": "public static DocumentFragment readXMLFragment(InputStream stream, boolean skipRoot)", "class_method_signature": "XMLUtil.readXMLFragment(InputStream stream, boolean skipRoot)", "testcase": false, "constructor": false}, {"identifier": "readXMLFragment", "parameters": "(Reader reader)", "modifiers": "public static", "return": "DocumentFragment", "signature": "DocumentFragment readXMLFragment(Reader reader)", "full_signature": "public static DocumentFragment readXMLFragment(Reader reader)", "class_method_signature": "XMLUtil.readXMLFragment(Reader reader)", "testcase": false, "constructor": false}, {"identifier": "readXMLFragment", "parameters": "(Reader reader, boolean skipRoot)", "modifiers": "public static", "return": "DocumentFragment", "signature": "DocumentFragment readXMLFragment(Reader reader, boolean skipRoot)", "full_signature": "public static DocumentFragment readXMLFragment(Reader reader, boolean skipRoot)", "class_method_signature": "XMLUtil.readXMLFragment(Reader reader, boolean skipRoot)", "testcase": false, "constructor": false}, {"identifier": "readXMLFragment", "parameters": "(String file)", "modifiers": "public static", "return": "DocumentFragment", "signature": "DocumentFragment readXMLFragment(String file)", "full_signature": "public static DocumentFragment readXMLFragment(String file)", "class_method_signature": "XMLUtil.readXMLFragment(String file)", "testcase": false, "constructor": false}, {"identifier": "readXMLFragment", "parameters": "(String file, boolean skipRoot)", "modifiers": "public static", "return": "DocumentFragment", "signature": "DocumentFragment readXMLFragment(String file, boolean skipRoot)", "full_signature": "public static DocumentFragment readXMLFragment(String file, boolean skipRoot)", "class_method_signature": "XMLUtil.readXMLFragment(String file, boolean skipRoot)", "testcase": false, "constructor": false}, {"identifier": "readXMLFragment", "parameters": "(URL file)", "modifiers": "public static", "return": "DocumentFragment", "signature": "DocumentFragment readXMLFragment(URL file)", "full_signature": "public static DocumentFragment readXMLFragment(URL file)", "class_method_signature": "XMLUtil.readXMLFragment(URL file)", "testcase": false, "constructor": false}, {"identifier": "readXMLFragment", "parameters": "(URL file, boolean skipRoot)", "modifiers": "public static", "return": "DocumentFragment", "signature": "DocumentFragment readXMLFragment(URL file, boolean skipRoot)", "full_signature": "public static DocumentFragment readXMLFragment(URL file, boolean skipRoot)", "class_method_signature": "XMLUtil.readXMLFragment(URL file, boolean skipRoot)", "testcase": false, "constructor": false}, {"identifier": "setAttributeEnum", "parameters": "(Node document, Class<T> type,\n\t\t\tboolean caseSensitive, T value, String... path)", "modifiers": "public static", "return": "boolean", "signature": "boolean setAttributeEnum(Node document, Class<T> type,\n\t\t\tboolean caseSensitive, T value, String... path)", "full_signature": "public static boolean setAttributeEnum(Node document, Class<T> type,\n\t\t\tboolean caseSensitive, T value, String... path)", "class_method_signature": "XMLUtil.setAttributeEnum(Node document, Class<T> type,\n\t\t\tboolean caseSensitive, T value, String... path)", "testcase": false, "constructor": false}, {"identifier": "setAttributeEnum", "parameters": "(Node document, Class<T> type, T value, String... path)", "modifiers": "public static", "return": "boolean", "signature": "boolean setAttributeEnum(Node document, Class<T> type, T value, String... path)", "full_signature": "public static boolean setAttributeEnum(Node document, Class<T> type, T value, String... path)", "class_method_signature": "XMLUtil.setAttributeEnum(Node document, Class<T> type, T value, String... path)", "testcase": false, "constructor": false}, {"identifier": "toColor", "parameters": "(int rgba)", "modifiers": "@Pure @SuppressWarnings(\"checkstyle:magicnumber\") public static", "return": "String", "signature": "String toColor(int rgba)", "full_signature": "@Pure @SuppressWarnings(\"checkstyle:magicnumber\") public static String toColor(int rgba)", "class_method_signature": "XMLUtil.toColor(int rgba)", "testcase": false, "constructor": false}, {"identifier": "toColor", "parameters": "(int red, int green, int blue, int alpha)", "modifiers": "@Pure public static", "return": "String", "signature": "String toColor(int red, int green, int blue, int alpha)", "full_signature": "@Pure public static String toColor(int red, int green, int blue, int alpha)", "class_method_signature": "XMLUtil.toColor(int red, int green, int blue, int alpha)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(byte[] array)", "modifiers": "@Pure public static", "return": "String", "signature": "String toString(byte[] array)", "full_signature": "@Pure public static String toString(byte[] array)", "class_method_signature": "XMLUtil.toString(byte[] array)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Date date)", "modifiers": "@Pure public static", "return": "String", "signature": "String toString(Date date)", "full_signature": "@Pure public static String toString(Date date)", "class_method_signature": "XMLUtil.toString(Date date)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Node node)", "modifiers": "@Pure public static", "return": "String", "signature": "String toString(Node node)", "full_signature": "@Pure public static String toString(Node node)", "class_method_signature": "XMLUtil.toString(Node node)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Serializable object)", "modifiers": "@Pure public static", "return": "String", "signature": "String toString(Serializable object)", "full_signature": "@Pure public static String toString(Serializable object)", "class_method_signature": "XMLUtil.toString(Serializable object)", "testcase": false, "constructor": false}, {"identifier": "writeNode", "parameters": "(Node node, OutputStream stream)", "modifiers": "private static", "return": "void", "signature": "void writeNode(Node node, OutputStream stream)", "full_signature": "private static void writeNode(Node node, OutputStream stream)", "class_method_signature": "XMLUtil.writeNode(Node node, OutputStream stream)", "testcase": false, "constructor": false}, {"identifier": "writeNode", "parameters": "(Node node, Writer writer)", "modifiers": "private static", "return": "void", "signature": "void writeNode(Node node, Writer writer)", "full_signature": "private static void writeNode(Node node, Writer writer)", "class_method_signature": "XMLUtil.writeNode(Node node, Writer writer)", "testcase": false, "constructor": false}, {"identifier": "writeXML", "parameters": "(Document xmldocument, File file)", "modifiers": "public static", "return": "void", "signature": "void writeXML(Document xmldocument, File file)", "full_signature": "public static void writeXML(Document xmldocument, File file)", "class_method_signature": "XMLUtil.writeXML(Document xmldocument, File file)", "testcase": false, "constructor": false}, {"identifier": "writeXML", "parameters": "(Document xmldocument, OutputStream stream)", "modifiers": "public static", "return": "void", "signature": "void writeXML(Document xmldocument, OutputStream stream)", "full_signature": "public static void writeXML(Document xmldocument, OutputStream stream)", "class_method_signature": "XMLUtil.writeXML(Document xmldocument, OutputStream stream)", "testcase": false, "constructor": false}, {"identifier": "writeXML", "parameters": "(Document xmldocument, String file)", "modifiers": "public static", "return": "void", "signature": "void writeXML(Document xmldocument, String file)", "full_signature": "public static void writeXML(Document xmldocument, String file)", "class_method_signature": "XMLUtil.writeXML(Document xmldocument, String file)", "testcase": false, "constructor": false}, {"identifier": "writeXML", "parameters": "(Document xmldocument, Writer writer)", "modifiers": "public static", "return": "void", "signature": "void writeXML(Document xmldocument, Writer writer)", "full_signature": "public static void writeXML(Document xmldocument, Writer writer)", "class_method_signature": "XMLUtil.writeXML(Document xmldocument, Writer writer)", "testcase": false, "constructor": false}, {"identifier": "writeXML", "parameters": "(DocumentFragment fragment, File file)", "modifiers": "public static", "return": "void", "signature": "void writeXML(DocumentFragment fragment, File file)", "full_signature": "public static void writeXML(DocumentFragment fragment, File file)", "class_method_signature": "XMLUtil.writeXML(DocumentFragment fragment, File file)", "testcase": false, "constructor": false}, {"identifier": "writeXML", "parameters": "(DocumentFragment fragment, OutputStream stream)", "modifiers": "public static", "return": "void", "signature": "void writeXML(DocumentFragment fragment, OutputStream stream)", "full_signature": "public static void writeXML(DocumentFragment fragment, OutputStream stream)", "class_method_signature": "XMLUtil.writeXML(DocumentFragment fragment, OutputStream stream)", "testcase": false, "constructor": false}, {"identifier": "writeXML", "parameters": "(DocumentFragment fragment, String file)", "modifiers": "public static", "return": "void", "signature": "void writeXML(DocumentFragment fragment, String file)", "full_signature": "public static void writeXML(DocumentFragment fragment, String file)", "class_method_signature": "XMLUtil.writeXML(DocumentFragment fragment, String file)", "testcase": false, "constructor": false}, {"identifier": "writeXML", "parameters": "(DocumentFragment fragment, Writer writer)", "modifiers": "public static", "return": "void", "signature": "void writeXML(DocumentFragment fragment, Writer writer)", "full_signature": "public static void writeXML(DocumentFragment fragment, Writer writer)", "class_method_signature": "XMLUtil.writeXML(DocumentFragment fragment, Writer writer)", "testcase": false, "constructor": false}, {"identifier": "writeXML", "parameters": "(Node node, OutputStream stream)", "modifiers": "public static", "return": "void", "signature": "void writeXML(Node node, OutputStream stream)", "full_signature": "public static void writeXML(Node node, OutputStream stream)", "class_method_signature": "XMLUtil.writeXML(Node node, OutputStream stream)", "testcase": false, "constructor": false}, {"identifier": "writeXML", "parameters": "(Node node, Writer writer)", "modifiers": "public static", "return": "void", "signature": "void writeXML(Node node, Writer writer)", "full_signature": "public static void writeXML(Node node, Writer writer)", "class_method_signature": "XMLUtil.writeXML(Node node, Writer writer)", "testcase": false, "constructor": false}, {"identifier": "writeResources", "parameters": "(Element node, XMLResources resources, XMLBuilder builder)", "modifiers": "public static", "return": "void", "signature": "void writeResources(Element node, XMLResources resources, XMLBuilder builder)", "full_signature": "public static void writeResources(Element node, XMLResources resources, XMLBuilder builder)", "class_method_signature": "XMLUtil.writeResources(Element node, XMLResources resources, XMLBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "readResources", "parameters": "(Element node, XMLResources resources)", "modifiers": "@SuppressWarnings({\"checkstyle:nestedifdepth\"}) public static", "return": "int", "signature": "int readResources(Element node, XMLResources resources)", "full_signature": "@SuppressWarnings({\"checkstyle:nestedifdepth\"}) public static int readResources(Element node, XMLResources resources)", "class_method_signature": "XMLUtil.readResources(Element node, XMLResources resources)", "testcase": false, "constructor": false}, {"identifier": "readResourceURL", "parameters": "(Element node, XMLResources resources, String... path)", "modifiers": "@Pure public static", "return": "URL", "signature": "URL readResourceURL(Element node, XMLResources resources, String... path)", "full_signature": "@Pure public static URL readResourceURL(Element node, XMLResources resources, String... path)", "class_method_signature": "XMLUtil.readResourceURL(Element node, XMLResources resources, String... path)", "testcase": false, "constructor": false}], "file": "core/inputoutput/src/main/java/org/arakhne/afc/inputoutput/xml/XMLUtil.java"}, "focal_method": {"identifier": "getAttributeValue", "parameters": "(Node document, boolean caseSensitive, int idxStart, String... path)", "modifiers": "@Pure @SuppressWarnings(\"checkstyle:cyclomaticcomplexity\") private static", "return": "String", "body": "@Pure\n\t@SuppressWarnings(\"checkstyle:cyclomaticcomplexity\")\n\tprivate static String getAttributeValue(Node document, boolean caseSensitive, int idxStart, String... path) {\n\t\tassert document != null : AssertMessages.notNullParameter(0);\n\t\tassert path != null && (path.length - idxStart) >= 0 : AssertMessages.invalidValue(2);\n\n\t\tif ((path.length - idxStart) > 1) {\n\t\t\tfinal NodeList nodes = document.getChildNodes();\n\t\t\tfinal int len = nodes.getLength();\n\t\t\tfor (int i = 0; i < len; ++i) {\n\t\t\t\tfinal Node node = nodes.item(i);\n\t\t\t\tif (node != null) {\n\t\t\t\t\tfinal String name = node.getNodeName();\n\t\t\t\t\tif (name != null\n\t\t\t\t\t\t\t&& ((caseSensitive && name.equals(path[idxStart]))\n\t\t\t\t\t\t\t\t\t|| (!caseSensitive && name.equalsIgnoreCase(path[idxStart])))) {\n\t\t\t\t\t\tfinal String value = getAttributeValue(node, caseSensitive, idxStart + 1, path);\n\t\t\t\t\t\tif (value != null) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (document instanceof Element) {\n\t\t\tif (caseSensitive) {\n\t\t\t\treturn ((Element) document).getAttribute(path[idxStart]);\n\t\t\t}\n\t\t\tfinal NamedNodeMap map = ((Element) document).getAttributes();\n\t\t\tfinal int len = map.getLength();\n\t\t\tfor (int i = 0; i < len; ++i) {\n\t\t\t\tfinal Node node = map.item(i);\n\t\t\t\tif (node instanceof Attr) {\n\t\t\t\t\tfinal Attr attr = (Attr) node;\n\t\t\t\t\tfinal String name = attr.getName();\n\t\t\t\t\tif (name != null && name.equalsIgnoreCase(path[idxStart])) {\n\t\t\t\t\t\tfinal String value = attr.getValue();\n\t\t\t\t\t\tif (value != null) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfinal NamedNodeMap attrs = document.getAttributes();\n\t\t\tif (attrs != null) {\n\t\t\t\tfinal int len = attrs.getLength();\n\t\t\t\tfor (int idxAttr = 0; idxAttr < len; ++idxAttr) {\n\t\t\t\t\tfinal Node node = attrs.item(idxAttr);\n\t\t\t\t\tfinal String name = node.getNodeName();\n\t\t\t\t\tif (name != null\n\t\t\t\t\t\t\t&& ((caseSensitive && name.equals(path[idxStart]))\n\t\t\t\t\t\t\t\t\t|| (!caseSensitive && name.equalsIgnoreCase(path[idxStart])))) {\n\t\t\t\t\t\treturn node.getNodeValue();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "signature": "String getAttributeValue(Node document, boolean caseSensitive, int idxStart, String... path)", "full_signature": "@Pure @SuppressWarnings(\"checkstyle:cyclomaticcomplexity\") private static String getAttributeValue(Node document, boolean caseSensitive, int idxStart, String... path)", "class_method_signature": "XMLUtil.getAttributeValue(Node document, boolean caseSensitive, int idxStart, String... path)", "testcase": false, "constructor": false, "invocations": ["notNullParameter", "invalidValue", "getChildNodes", "getLength", "item", "getNodeName", "equals", "equalsIgnoreCase", "getAttributeValue", "getAttribute", "getAttributes", "getLength", "item", "getName", "equalsIgnoreCase", "getValue", "getAttributes", "getLength", "item", "getNodeName", "equals", "equalsIgnoreCase", "getNodeValue"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}