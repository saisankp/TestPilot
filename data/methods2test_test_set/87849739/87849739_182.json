{"test_class": {"identifier": "EnforcerRetrieverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private Cache<EntityIdWithResourceType, Entry<EntityIdWithResourceType>> idCache;", "modifier": "@Mock\n    private", "type": "Cache<EntityIdWithResourceType, Entry<EntityIdWithResourceType>>", "declarator": "idCache", "var_name": "idCache"}, {"original_string": "@Mock\n    private Cache<EntityIdWithResourceType, Entry<Enforcer>> enforcerCache;", "modifier": "@Mock\n    private", "type": "Cache<EntityIdWithResourceType, Entry<Enforcer>>", "declarator": "enforcerCache", "var_name": "enforcerCache"}, {"original_string": "private EnforcerRetriever retriever;", "modifier": "private", "type": "EnforcerRetriever", "declarator": "retriever", "var_name": "retriever"}], "file": "services/concierge/enforcement/src/test/java/org/eclipse/ditto/services/concierge/enforcement/EnforcerRetrieverTest.java"}, "test_case": {"identifier": "verifyLookupRevealsInnermostException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void verifyLookupRevealsInnermostException() throws ExecutionException, InterruptedException {\n        final DittoRuntimeException expectedException =\n                DittoRuntimeException.newBuilder(\"this should be happening\", HttpStatusCode.HTTPVERSION_NOT_SUPPORTED)\n                        .build();\n        final EntityIdWithResourceType entityId = EntityIdWithResourceType.of(\"any\", DefaultEntityId.of(\"id\"));\n        final EntityIdWithResourceType innerEntityId =\n                EntityIdWithResourceType.of(\"other\", DefaultEntityId.of(\"randomId\"));\n        when(idCache.get(any(EntityIdWithResourceType.class))).thenReturn(\n                CompletableFuture.completedFuture(Optional.of(Entry.permanent(innerEntityId))));\n        when(enforcerCache.get(any(EntityIdWithResourceType.class))).thenReturn(\n                CompletableFuture.completedFuture(Optional.of(Entry.nonexistent())));\n        final CompletionStage<Contextual<WithDittoHeaders>> result = retriever.retrieve(entityId, (entityIdEntry, enforcerEntry) -> {\n            throw expectedException;\n        });\n\n        verify(idCache).get(entityId);\n        verify(enforcerCache).get(innerEntityId);\n        verifyException(result, expectedException);\n    }", "signature": "void verifyLookupRevealsInnermostException()", "full_signature": "@Test public void verifyLookupRevealsInnermostException()", "class_method_signature": "EnforcerRetrieverTest.verifyLookupRevealsInnermostException()", "testcase": true, "constructor": false, "invocations": ["build", "newBuilder", "of", "of", "of", "of", "thenReturn", "when", "get", "any", "completedFuture", "of", "permanent", "thenReturn", "when", "get", "any", "completedFuture", "of", "nonexistent", "retrieve", "get", "verify", "get", "verify", "verifyException"]}, "focal_class": {"identifier": "EnforcerRetriever", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(EnforcerRetriever.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(EnforcerRetriever.class)", "var_name": "LOGGER"}, {"original_string": "private final Cache<EntityIdWithResourceType, Entry<EntityIdWithResourceType>> idCache;", "modifier": "private final", "type": "Cache<EntityIdWithResourceType, Entry<EntityIdWithResourceType>>", "declarator": "idCache", "var_name": "idCache"}, {"original_string": "private final Function<String, Cache<EntityIdWithResourceType, Entry<Enforcer>>> enforcerCacheFunction;", "modifier": "private final", "type": "Function<String, Cache<EntityIdWithResourceType, Entry<Enforcer>>>", "declarator": "enforcerCacheFunction", "var_name": "enforcerCacheFunction"}], "methods": [{"identifier": "EnforcerRetriever", "parameters": "(\n            final Cache<EntityIdWithResourceType, Entry<EntityIdWithResourceType>> idCache,\n            final Cache<EntityIdWithResourceType, Entry<Enforcer>> enforcerCache)", "modifiers": "public", "return": "", "signature": " EnforcerRetriever(\n            final Cache<EntityIdWithResourceType, Entry<EntityIdWithResourceType>> idCache,\n            final Cache<EntityIdWithResourceType, Entry<Enforcer>> enforcerCache)", "full_signature": "public  EnforcerRetriever(\n            final Cache<EntityIdWithResourceType, Entry<EntityIdWithResourceType>> idCache,\n            final Cache<EntityIdWithResourceType, Entry<Enforcer>> enforcerCache)", "class_method_signature": "EnforcerRetriever.EnforcerRetriever(\n            final Cache<EntityIdWithResourceType, Entry<EntityIdWithResourceType>> idCache,\n            final Cache<EntityIdWithResourceType, Entry<Enforcer>> enforcerCache)", "testcase": false, "constructor": true}, {"identifier": "EnforcerRetriever", "parameters": "(\n            final Cache<EntityIdWithResourceType, Entry<EntityIdWithResourceType>> idCache,\n            final Function<String, Cache<EntityIdWithResourceType, Entry<Enforcer>>> enforcerCacheFunction)", "modifiers": "private", "return": "", "signature": " EnforcerRetriever(\n            final Cache<EntityIdWithResourceType, Entry<EntityIdWithResourceType>> idCache,\n            final Function<String, Cache<EntityIdWithResourceType, Entry<Enforcer>>> enforcerCacheFunction)", "full_signature": "private  EnforcerRetriever(\n            final Cache<EntityIdWithResourceType, Entry<EntityIdWithResourceType>> idCache,\n            final Function<String, Cache<EntityIdWithResourceType, Entry<Enforcer>>> enforcerCacheFunction)", "class_method_signature": "EnforcerRetriever.EnforcerRetriever(\n            final Cache<EntityIdWithResourceType, Entry<EntityIdWithResourceType>> idCache,\n            final Function<String, Cache<EntityIdWithResourceType, Entry<Enforcer>>> enforcerCacheFunction)", "testcase": false, "constructor": true}, {"identifier": "EnforcerRetriever", "parameters": "(\n            final Cache<EntityIdWithResourceType, Entry<EntityIdWithResourceType>> idCache,\n            final Map<String, Cache<EntityIdWithResourceType, Entry<Enforcer>>> enforcerCaches)", "modifiers": "public", "return": "", "signature": " EnforcerRetriever(\n            final Cache<EntityIdWithResourceType, Entry<EntityIdWithResourceType>> idCache,\n            final Map<String, Cache<EntityIdWithResourceType, Entry<Enforcer>>> enforcerCaches)", "full_signature": "public  EnforcerRetriever(\n            final Cache<EntityIdWithResourceType, Entry<EntityIdWithResourceType>> idCache,\n            final Map<String, Cache<EntityIdWithResourceType, Entry<Enforcer>>> enforcerCaches)", "class_method_signature": "EnforcerRetriever.EnforcerRetriever(\n            final Cache<EntityIdWithResourceType, Entry<EntityIdWithResourceType>> idCache,\n            final Map<String, Cache<EntityIdWithResourceType, Entry<Enforcer>>> enforcerCaches)", "testcase": false, "constructor": true}, {"identifier": "retrieve", "parameters": "(final EntityIdWithResourceType entityKey,\n            final BiFunction<Entry<EntityIdWithResourceType>, Entry<Enforcer>, CompletionStage<Contextual<WithDittoHeaders>>> handler)", "modifiers": "public", "return": "CompletionStage<Contextual<WithDittoHeaders>>", "signature": "CompletionStage<Contextual<WithDittoHeaders>> retrieve(final EntityIdWithResourceType entityKey,\n            final BiFunction<Entry<EntityIdWithResourceType>, Entry<Enforcer>, CompletionStage<Contextual<WithDittoHeaders>>> handler)", "full_signature": "public CompletionStage<Contextual<WithDittoHeaders>> retrieve(final EntityIdWithResourceType entityKey,\n            final BiFunction<Entry<EntityIdWithResourceType>, Entry<Enforcer>, CompletionStage<Contextual<WithDittoHeaders>>> handler)", "class_method_signature": "EnforcerRetriever.retrieve(final EntityIdWithResourceType entityKey,\n            final BiFunction<Entry<EntityIdWithResourceType>, Entry<Enforcer>, CompletionStage<Contextual<WithDittoHeaders>>> handler)", "testcase": false, "constructor": false}, {"identifier": "retrieveByEnforcerKey", "parameters": "(\n            final EntityIdWithResourceType enforcerKey,\n            final Function<Entry<Enforcer>, CompletionStage<Contextual<WithDittoHeaders>>> handler)", "modifiers": "public", "return": "CompletionStage<Contextual<WithDittoHeaders>>", "signature": "CompletionStage<Contextual<WithDittoHeaders>> retrieveByEnforcerKey(\n            final EntityIdWithResourceType enforcerKey,\n            final Function<Entry<Enforcer>, CompletionStage<Contextual<WithDittoHeaders>>> handler)", "full_signature": "public CompletionStage<Contextual<WithDittoHeaders>> retrieveByEnforcerKey(\n            final EntityIdWithResourceType enforcerKey,\n            final Function<Entry<Enforcer>, CompletionStage<Contextual<WithDittoHeaders>>> handler)", "class_method_signature": "EnforcerRetriever.retrieveByEnforcerKey(\n            final EntityIdWithResourceType enforcerKey,\n            final Function<Entry<Enforcer>, CompletionStage<Contextual<WithDittoHeaders>>> handler)", "testcase": false, "constructor": false}], "file": "services/concierge/enforcement/src/main/java/org/eclipse/ditto/services/concierge/enforcement/EnforcerRetriever.java"}, "focal_method": {"identifier": "retrieve", "parameters": "(final EntityIdWithResourceType entityKey,\n            final BiFunction<Entry<EntityIdWithResourceType>, Entry<Enforcer>, CompletionStage<Contextual<WithDittoHeaders>>> handler)", "modifiers": "public", "return": "CompletionStage<Contextual<WithDittoHeaders>>", "body": "public CompletionStage<Contextual<WithDittoHeaders>> retrieve(final EntityIdWithResourceType entityKey,\n            final BiFunction<Entry<EntityIdWithResourceType>, Entry<Enforcer>, CompletionStage<Contextual<WithDittoHeaders>>> handler) {\n        return idCache.get(entityKey).thenCompose(enforcerKeyEntryOptional -> {\n            if (enforcerKeyEntryOptional.isEmpty()) {\n                // may happen due to namespace blocking\n                LOGGER.info(\"Did not get id-cache value for entityKey <{}>.\", entityKey);\n                return handler.apply(Entry.nonexistent(), Entry.nonexistent());\n            } else {\n                final Entry<EntityIdWithResourceType> enforcerKeyEntry = enforcerKeyEntryOptional.get();\n                if (enforcerKeyEntry.exists()) {\n                    final EntityIdWithResourceType enforcerKey = enforcerKeyEntry.getValueOrThrow();\n                    final String resourceType = enforcerKey.getResourceType();\n                    final Cache<EntityIdWithResourceType, Entry<Enforcer>> enforcerCache =\n                            enforcerCacheFunction.apply(resourceType);\n                    if (enforcerCache == null) {\n                        LOGGER.error(\"No enforcerCache for resource type: <{}>\", resourceType);\n                        throw GatewayInternalErrorException.newBuilder()\n                                .build();\n                    }\n                    return retrieveByEnforcerKey(enforcerKey, enforcerEntry ->\n                            handler.apply(enforcerKeyEntry, enforcerEntry));\n                } else {\n                    return handler.apply(enforcerKeyEntry, Entry.nonexistent());\n                }\n            }\n        });\n    }", "signature": "CompletionStage<Contextual<WithDittoHeaders>> retrieve(final EntityIdWithResourceType entityKey,\n            final BiFunction<Entry<EntityIdWithResourceType>, Entry<Enforcer>, CompletionStage<Contextual<WithDittoHeaders>>> handler)", "full_signature": "public CompletionStage<Contextual<WithDittoHeaders>> retrieve(final EntityIdWithResourceType entityKey,\n            final BiFunction<Entry<EntityIdWithResourceType>, Entry<Enforcer>, CompletionStage<Contextual<WithDittoHeaders>>> handler)", "class_method_signature": "EnforcerRetriever.retrieve(final EntityIdWithResourceType entityKey,\n            final BiFunction<Entry<EntityIdWithResourceType>, Entry<Enforcer>, CompletionStage<Contextual<WithDittoHeaders>>> handler)", "testcase": false, "constructor": false, "invocations": ["thenCompose", "get", "isEmpty", "info", "apply", "nonexistent", "nonexistent", "get", "exists", "getValueOrThrow", "getResourceType", "apply", "error", "build", "newBuilder", "retrieveByEnforcerKey", "apply", "apply", "nonexistent"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}