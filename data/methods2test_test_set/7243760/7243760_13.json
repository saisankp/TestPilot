{"test_class": {"identifier": "TradingSessionImplTest", "superclass": "", "interfaces": "", "fields": [], "file": "series/src/test/java/com/barchart/feed/series/TradingSessionImplTest.java"}, "test_case": {"identifier": "testContains", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testContains() {\n        TradingSession session = new TradingSessionImpl(DateTimeConstants.FRIDAY, DateTimeConstants.FRIDAY, new LocalTime(8, 30), new LocalTime(15, 30));\n        DateTime test = new DateTime(2010, 9, 10, 8, 30, 0, 0);\n        assertTrue(session.contains(test));\n        \n        test = new DateTime(2010, 9, 10, 15, 30, 0, 0);\n        assertTrue(session.contains(test));\n        \n        test = new DateTime(2010, 9, 10, 8, 29, 0, 0);\n        assertFalse(session.contains(test));\n        \n        test = new DateTime(2010, 9, 10, 15, 31, 0, 0);\n        assertFalse(session.contains(test));\n        \n        test = new DateTime(2010, 9, 11, 8, 30, 0, 0);\n        assertFalse(session.contains(test));\n        \n        //Test corner case where the TradingSession spans two days\n        session = new TradingSessionImpl(DateTimeConstants.SUNDAY, DateTimeConstants.TUESDAY, new LocalTime(18, 30), new LocalTime(3, 30));\n        test = new DateTime(2010, 9, 13, 3, 29, 59, 999);// 9-13 is a Monday\n        assertTrue(session.contains(test));\n        \n        session = new TradingSessionImpl(DateTimeConstants.SUNDAY, DateTimeConstants.TUESDAY, new LocalTime(18, 30), new LocalTime(3, 30));\n        test = new DateTime(2010, 9, 11, 3, 29, 59, 999);// 9-11 is a Saturday\n        assertFalse(session.contains(test));\n        \n        session = new TradingSessionImpl(DateTimeConstants.SUNDAY, DateTimeConstants.TUESDAY, new LocalTime(18, 30), new LocalTime(3, 30));\n        test = new DateTime(2010, 9, 13, 3, 30, 01, 999);// 9-13 is a Monday\n        assertTrue(session.contains(test));\n    }", "signature": "void testContains()", "full_signature": "@Test public void testContains()", "class_method_signature": "TradingSessionImplTest.testContains()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "contains", "assertTrue", "contains", "assertFalse", "contains", "assertFalse", "contains", "assertFalse", "contains", "assertTrue", "contains", "assertFalse", "contains", "assertTrue", "contains"]}, "focal_class": {"identifier": "TradingSessionImpl", "superclass": "", "interfaces": "implements TradingSession", "fields": [{"original_string": "private int day;", "modifier": "private", "type": "int", "declarator": "day", "var_name": "day"}, {"original_string": "private int endDay;", "modifier": "private", "type": "int", "declarator": "endDay", "var_name": "endDay"}, {"original_string": "private LocalTime start;", "modifier": "private", "type": "LocalTime", "declarator": "start", "var_name": "start"}, {"original_string": "private LocalTime end;", "modifier": "private", "type": "LocalTime", "declarator": "end", "var_name": "end"}, {"original_string": "private static final int MILLIS_IN_DAY = 86400000;", "modifier": "private static final", "type": "int", "declarator": "MILLIS_IN_DAY = 86400000", "var_name": "MILLIS_IN_DAY"}, {"original_string": "private final long SESSION_MILLIS;", "modifier": "private final", "type": "long", "declarator": "SESSION_MILLIS", "var_name": "SESSION_MILLIS"}], "methods": [{"identifier": "TradingSessionImpl", "parameters": "(int day, int endDay, LocalTime start, LocalTime end)", "modifiers": "public", "return": "", "signature": " TradingSessionImpl(int day, int endDay, LocalTime start, LocalTime end)", "full_signature": "public  TradingSessionImpl(int day, int endDay, LocalTime start, LocalTime end)", "class_method_signature": "TradingSessionImpl.TradingSessionImpl(int day, int endDay, LocalTime start, LocalTime end)", "testcase": false, "constructor": true}, {"identifier": "hourCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hourCount()", "full_signature": "@Override public int hourCount()", "class_method_signature": "TradingSessionImpl.hourCount()", "testcase": false, "constructor": false}, {"identifier": "day", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int day()", "full_signature": "@Override public int day()", "class_method_signature": "TradingSessionImpl.day()", "testcase": false, "constructor": false}, {"identifier": "endDay", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int endDay()", "full_signature": "@Override public int endDay()", "class_method_signature": "TradingSessionImpl.endDay()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "LocalTime", "signature": "LocalTime start()", "full_signature": "@Override public LocalTime start()", "class_method_signature": "TradingSessionImpl.start()", "testcase": false, "constructor": false}, {"identifier": "end", "parameters": "()", "modifiers": "@Override public", "return": "LocalTime", "signature": "LocalTime end()", "full_signature": "@Override public LocalTime end()", "class_method_signature": "TradingSessionImpl.end()", "testcase": false, "constructor": false}, {"identifier": "sessionMillis", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long sessionMillis()", "full_signature": "@Override public long sessionMillis()", "class_method_signature": "TradingSessionImpl.sessionMillis()", "testcase": false, "constructor": false}, {"identifier": "sessionMillis", "parameters": "(DateTime startDate, DateTime endDate)", "modifiers": "public static", "return": "long", "signature": "long sessionMillis(DateTime startDate, DateTime endDate)", "full_signature": "public static long sessionMillis(DateTime startDate, DateTime endDate)", "class_method_signature": "TradingSessionImpl.sessionMillis(DateTime startDate, DateTime endDate)", "testcase": false, "constructor": false}, {"identifier": "sessionMillis", "parameters": "(int startDay, LocalTime startTime, int endDay, LocalTime endTime)", "modifiers": "public static", "return": "long", "signature": "long sessionMillis(int startDay, LocalTime startTime, int endDay, LocalTime endTime)", "full_signature": "public static long sessionMillis(int startDay, LocalTime startTime, int endDay, LocalTime endTime)", "class_method_signature": "TradingSessionImpl.sessionMillis(int startDay, LocalTime startTime, int endDay, LocalTime endTime)", "testcase": false, "constructor": false}, {"identifier": "dayToString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String dayToString()", "full_signature": "@Override public String dayToString()", "class_method_signature": "TradingSessionImpl.dayToString()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(DateTime date)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(DateTime date)", "full_signature": "@Override public boolean contains(DateTime date)", "class_method_signature": "TradingSessionImpl.contains(DateTime date)", "testcase": false, "constructor": false}, {"identifier": "dayIsWithinSessionDay", "parameters": "(int otherDay)", "modifiers": "private", "return": "boolean", "signature": "boolean dayIsWithinSessionDay(int otherDay)", "full_signature": "private boolean dayIsWithinSessionDay(int otherDay)", "class_method_signature": "TradingSessionImpl.dayIsWithinSessionDay(int otherDay)", "testcase": false, "constructor": false}, {"identifier": "dayIsBetweenStartEndDays", "parameters": "(int otherDay)", "modifiers": "private", "return": "boolean", "signature": "boolean dayIsBetweenStartEndDays(int otherDay)", "full_signature": "private boolean dayIsBetweenStartEndDays(int otherDay)", "class_method_signature": "TradingSessionImpl.dayIsBetweenStartEndDays(int otherDay)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(TradingSession other)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(TradingSession other)", "full_signature": "@Override public int compareTo(TradingSession other)", "class_method_signature": "TradingSessionImpl.compareTo(TradingSession other)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "TradingSessionImpl.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "TradingSessionImpl.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "TradingSessionImpl.toString()", "testcase": false, "constructor": false}], "file": "series/src/main/java/com/barchart/feed/series/TradingSessionImpl.java"}, "focal_method": {"identifier": "contains", "parameters": "(DateTime date)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean contains(DateTime date) {\n        int otherDay = date.getDayOfWeek();\n        LocalTime lt = date.toLocalTime();\n        \n        boolean startBounded = (lt.isEqual(start) || lt.isAfter(start));\n        boolean endBounded = (lt.isEqual(end) || lt.isBefore(end));\n        return dayIsWithinSessionDay(otherDay) && \n            ((startBounded && endBounded) || \n             (day != endDay && \n                ((otherDay == day && startBounded) || \n                 (otherDay == endDay && endBounded) ||\n                 dayIsBetweenStartEndDays(otherDay))\n            ));\n    }", "signature": "boolean contains(DateTime date)", "full_signature": "@Override public boolean contains(DateTime date)", "class_method_signature": "TradingSessionImpl.contains(DateTime date)", "testcase": false, "constructor": false, "invocations": ["getDayOfWeek", "toLocalTime", "isEqual", "isAfter", "isEqual", "isBefore", "dayIsWithinSessionDay", "dayIsBetweenStartEndDays"]}, "repository": {"repo_id": 7243760, "url": "https://github.com/barchart/barchart-feed", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 6, "size": 64172, "license": "licensed"}}