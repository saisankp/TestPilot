{"test_class": {"identifier": "KafkaConfigurationParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String CONFIG_RESOURCE = ResourcesUtils.loadResource(\"testresource_valid_kafka_topic_configuration\", true);", "modifier": "private final", "type": "String", "declarator": "CONFIG_RESOURCE = ResourcesUtils.loadResource(\"testresource_valid_kafka_topic_configuration\", true)", "var_name": "CONFIG_RESOURCE"}, {"original_string": "private final String INVALID_PATTERN_CONFIG_RESOURCE = ResourcesUtils.loadResource(\"testresource_invalid_pattern_kafka_topic_configuration\", true);", "modifier": "private final", "type": "String", "declarator": "INVALID_PATTERN_CONFIG_RESOURCE = ResourcesUtils.loadResource(\"testresource_invalid_pattern_kafka_topic_configuration\", true)", "var_name": "INVALID_PATTERN_CONFIG_RESOURCE"}, {"original_string": "private final String CONFIG_WILDCARD_RESOURCE = ResourcesUtils.loadResource(\"testresource_wildcard_kafka_topic_configuration\", true);", "modifier": "private final", "type": "String", "declarator": "CONFIG_WILDCARD_RESOURCE = ResourcesUtils.loadResource(\"testresource_wildcard_kafka_topic_configuration\", true)", "var_name": "CONFIG_WILDCARD_RESOURCE"}], "file": "gateleen-kafka/src/test/java/org/swisspush/gateleen/kafka/KafkaConfigurationParserTest.java"}, "test_case": {"identifier": "parseWildcardValid", "parameters": "(TestContext context)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parseWildcardValid(TestContext context) {\n        Map<String, Object> properties = new HashMap<>();\n        properties.put(\"kafka.host\", \"localhost\");\n        properties.put(\"kafka.port\", \"9095\");\n        List<KafkaConfiguration> configurations = KafkaConfigurationParser.parse(Buffer.buffer(CONFIG_WILDCARD_RESOURCE), properties);\n        context.assertEquals(1, configurations.size());\n\n        // Note that the order of the parsed configurations matters!\n        KafkaConfiguration config = configurations.get(0);\n        context.assertEquals(Pattern.compile(\"my.properties.topic.*\").pattern(), config.getTopic().pattern());\n        Map<String, String> expected_1 = new HashMap<String, String>() {{\n            put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n            put(\"acks\", \"all\");\n            put(\"bootstrap.servers\", \"localhost:9095\");\n            put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n        }};\n        context.assertEquals(expected_1, config.getConfigurations());\n    }", "signature": "void parseWildcardValid(TestContext context)", "full_signature": "@Test public void parseWildcardValid(TestContext context)", "class_method_signature": "KafkaConfigurationParserTest.parseWildcardValid(TestContext context)", "testcase": true, "constructor": false, "invocations": ["put", "put", "parse", "buffer", "assertEquals", "size", "get", "assertEquals", "pattern", "compile", "pattern", "getTopic", "put", "put", "put", "put", "assertEquals", "getConfigurations"]}, "focal_class": {"identifier": "KafkaConfigurationParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(KafkaConfigurationParser.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(KafkaConfigurationParser.class)", "var_name": "log"}], "methods": [{"identifier": "parse", "parameters": "(Buffer configurationResourceBuffer, Map<String, Object> properties)", "modifiers": "static", "return": "List<KafkaConfiguration>", "signature": "List<KafkaConfiguration> parse(Buffer configurationResourceBuffer, Map<String, Object> properties)", "full_signature": "static List<KafkaConfiguration> parse(Buffer configurationResourceBuffer, Map<String, Object> properties)", "class_method_signature": "KafkaConfigurationParser.parse(Buffer configurationResourceBuffer, Map<String, Object> properties)", "testcase": false, "constructor": false}, {"identifier": "extractAdditionalConfig", "parameters": "(JsonObject topicObject)", "modifiers": "private static", "return": "Map<String, String>", "signature": "Map<String, String> extractAdditionalConfig(JsonObject topicObject)", "full_signature": "private static Map<String, String> extractAdditionalConfig(JsonObject topicObject)", "class_method_signature": "KafkaConfigurationParser.extractAdditionalConfig(JsonObject topicObject)", "testcase": false, "constructor": false}], "file": "gateleen-kafka/src/main/java/org/swisspush/gateleen/kafka/KafkaConfigurationParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(Buffer configurationResourceBuffer, Map<String, Object> properties)", "modifiers": "static", "return": "List<KafkaConfiguration>", "body": "static List<KafkaConfiguration> parse(Buffer configurationResourceBuffer, Map<String, Object> properties) {\n\n        String replacedConfig;\n        JsonObject config;\n        List<KafkaConfiguration> configurations = new ArrayList<>();\n\n        try {\n            replacedConfig = StringUtils.replaceWildcardConfigs(configurationResourceBuffer.toString(UTF_8), properties);\n            config = new JsonObject(Buffer.buffer(replacedConfig));\n        } catch (Exception e) {\n            log.warn(\"Could not replace wildcards with environment properties for kafka configurations due to following reason: {}\",\n                    e.getMessage());\n            return configurations;\n        }\n\n        for (String topicPattern : config.fieldNames()) {\n            try {\n                Pattern pattern = Pattern.compile(topicPattern);\n                final Map<String, String> additionalConfig = extractAdditionalConfig(config.getJsonObject(topicPattern));\n                configurations.add(new KafkaConfiguration(pattern, additionalConfig));\n                log.info(\"Topic '{}' successfully parsed and added to kafka configuration list\", topicPattern);\n            } catch (PatternSyntaxException patternException) {\n                log.warn(\"Topic '{}' is not a valid regex pattern. Discarding this kafka configuration\", topicPattern);\n            }\n        }\n\n        return configurations;\n    }", "signature": "List<KafkaConfiguration> parse(Buffer configurationResourceBuffer, Map<String, Object> properties)", "full_signature": "static List<KafkaConfiguration> parse(Buffer configurationResourceBuffer, Map<String, Object> properties)", "class_method_signature": "KafkaConfigurationParser.parse(Buffer configurationResourceBuffer, Map<String, Object> properties)", "testcase": false, "constructor": false, "invocations": ["replaceWildcardConfigs", "toString", "buffer", "warn", "getMessage", "fieldNames", "compile", "extractAdditionalConfig", "getJsonObject", "add", "info", "warn"]}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}