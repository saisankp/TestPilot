{"test_class": {"identifier": "TestFileRetriever", "superclass": "extends ObjRecTestBase", "interfaces": "", "fields": [{"original_string": "FileRetriever fr;", "modifier": "", "type": "FileRetriever", "declarator": "fr", "var_name": "fr"}, {"original_string": "ObjectRecognitionCore source;", "modifier": "", "type": "ObjectRecognitionCore", "declarator": "source", "var_name": "source"}], "file": "objectRecognitionSource/src/test/java/io/vantiq/extsrc/objectRecognition/imageRetriever/TestFileRetriever.java"}, "test_case": {"identifier": "testVideoInvalidLocation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testVideoInvalidLocation() {\n        try {\n            Map<String, String> config = new LinkedHashMap<>();\n            config.put(\"fileLocation\", \"invalidLocation\");\n            config.put(\"fileExtension\", \"mov\");\n            fr.setupDataRetrieval(config, source);\n            fail(\"Expected setup exception on invalid video\");\n        } catch (Exception e) {\n            assertTrue(\"Failure should be caused by nonexistent video. Error actually was: \" + e.getMessage()\n                , e.getMessage().startsWith(FileRetriever.class.getCanonicalName() + \".mainVideoDoesNotExist\"));\n        }\n    }", "signature": "void testVideoInvalidLocation()", "full_signature": "@Test public void testVideoInvalidLocation()", "class_method_signature": "TestFileRetriever.testVideoInvalidLocation()", "testcase": true, "constructor": false, "invocations": ["put", "put", "setupDataRetrieval", "fail", "assertTrue", "getMessage", "startsWith", "getMessage", "getCanonicalName"]}, "focal_class": {"identifier": "FileRetriever", "superclass": "", "interfaces": "implements ImageRetrieverInterface", "fields": [{"original_string": "String defaultImageLocation;", "modifier": "", "type": "String", "declarator": "defaultImageLocation", "var_name": "defaultImageLocation"}, {"original_string": "VideoCapture capture;", "modifier": "", "type": "VideoCapture", "declarator": "capture", "var_name": "capture"}, {"original_string": "Boolean isMov = false;", "modifier": "", "type": "Boolean", "declarator": "isMov = false", "var_name": "isMov"}, {"original_string": "int frameInterval;", "modifier": "", "type": "int", "declarator": "frameInterval", "var_name": "frameInterval"}, {"original_string": "private static final String FILE_EXTENSION = \"fileExtension\";", "modifier": "private static final", "type": "String", "declarator": "FILE_EXTENSION = \"fileExtension\"", "var_name": "FILE_EXTENSION"}, {"original_string": "private static final String FILE_LOCATION = \"fileLocation\";", "modifier": "private static final", "type": "String", "declarator": "FILE_LOCATION = \"fileLocation\"", "var_name": "FILE_LOCATION"}, {"original_string": "private static final String FPS = \"fps\";", "modifier": "private static final", "type": "String", "declarator": "FPS = \"fps\"", "var_name": "FPS"}], "methods": [{"identifier": "setupDataRetrieval", "parameters": "(Map<String, ?> dataSourceConfig, ObjectRecognitionCore source)", "modifiers": "@Override public", "return": "void", "signature": "void setupDataRetrieval(Map<String, ?> dataSourceConfig, ObjectRecognitionCore source)", "full_signature": "@Override public void setupDataRetrieval(Map<String, ?> dataSourceConfig, ObjectRecognitionCore source)", "class_method_signature": "FileRetriever.setupDataRetrieval(Map<String, ?> dataSourceConfig, ObjectRecognitionCore source)", "testcase": false, "constructor": false}, {"identifier": "getImage", "parameters": "()", "modifiers": "@Override public", "return": "ImageRetrieverResults", "signature": "ImageRetrieverResults getImage()", "full_signature": "@Override public ImageRetrieverResults getImage()", "class_method_signature": "FileRetriever.getImage()", "testcase": false, "constructor": false}, {"identifier": "getImage", "parameters": "(Map<String, ?> request)", "modifiers": "@Override public", "return": "ImageRetrieverResults", "signature": "ImageRetrieverResults getImage(Map<String, ?> request)", "full_signature": "@Override public ImageRetrieverResults getImage(Map<String, ?> request)", "class_method_signature": "FileRetriever.getImage(Map<String, ?> request)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "FileRetriever.close()", "testcase": false, "constructor": false}, {"identifier": "convertToJpeg", "parameters": "(Mat image)", "modifiers": "", "return": "byte[]", "signature": "byte[] convertToJpeg(Mat image)", "full_signature": " byte[] convertToJpeg(Mat image)", "class_method_signature": "FileRetriever.convertToJpeg(Mat image)", "testcase": false, "constructor": false}], "file": "objectRecognitionSource/src/main/java/io/vantiq/extsrc/objectRecognition/imageRetriever/FileRetriever.java"}, "focal_method": {"identifier": "setupDataRetrieval", "parameters": "(Map<String, ?> dataSourceConfig, ObjectRecognitionCore source)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void setupDataRetrieval(Map<String, ?> dataSourceConfig, ObjectRecognitionCore source) throws Exception {\n        // Check if the file is a video\n        if (dataSourceConfig.get(FILE_EXTENSION) instanceof String) {\n            String ext = (String) dataSourceConfig.get(FILE_EXTENSION);\n            if (ext.equals(\"mov\") || ext.equals(\"mp4\")) {\n                isMov = true;\n            }\n        }\n\n        // Load OpenCV\n        try {\n            System.loadLibrary(Core.NATIVE_LIBRARY_NAME);\n        } catch (Throwable t) {\n            throw new Exception(this.getClass().getCanonicalName() + \".opencvDependency\" \n                    + \": Could not load OpenCv for FileRetriever.\"\n                    + \"This is most likely due to a missing .dll/.so/.dylib. Please ensure that the environment \"\n                    + \"variable 'OPENCV_LOC' is set to the directory containing '\" + Core.NATIVE_LIBRARY_NAME\n                    + \"' and any other library requested by the attached error\", t);\n        }\n        \n        // Save the initial file location\n        if (dataSourceConfig.get(FILE_LOCATION) instanceof String) {\n            defaultImageLocation = (String) dataSourceConfig.get(FILE_LOCATION);\n            // Setup OpenCV to read the video if the file is a video\n            if (isMov) {\n                // Open the requested file\n                capture = new VideoCapture(defaultImageLocation);\n                \n                // Exit if the video cannot be read\n                if (!capture.isOpened()) {\n                    capture.release();\n                    if (!new File(defaultImageLocation).exists()) {\n                        throw new ImageAcquisitionException(this.getClass().getCanonicalName() + \".mainVideoDoesNotExist: \"\n                                + \"The requested video '\" + defaultImageLocation + \"' does not exist\");\n                    }\n                    throw new IllegalArgumentException(this.getClass().getCanonicalName() + \".invalidMainVideo: \" \n                            + \"Intended video '\" + defaultImageLocation + \"' could not be opened. Most likely OpenCV is not \"\n                            + \"compiled with the codecs required to read this video type\");\n                }\n                \n                // Obtain the frame rate of the video, defaulting to 24\n                double videoFps = capture.get(Videoio.CAP_PROP_FPS);\n                if (videoFps == 0) {\n                    videoFps = 24;\n                }\n                \n                // Calculate the number of frames to move each capture\n                double fps = 0;\n                if (dataSourceConfig.get(FPS) instanceof Number) {\n                    fps = ((Number) dataSourceConfig.get(FPS)).doubleValue();\n                }\n                if (fps <= 0) {\n                    frameInterval = 1;\n                } else {\n                    frameInterval = (int) Math.ceil(videoFps / fps);\n                }\n                \n            }\n        }\n    }", "signature": "void setupDataRetrieval(Map<String, ?> dataSourceConfig, ObjectRecognitionCore source)", "full_signature": "@Override public void setupDataRetrieval(Map<String, ?> dataSourceConfig, ObjectRecognitionCore source)", "class_method_signature": "FileRetriever.setupDataRetrieval(Map<String, ?> dataSourceConfig, ObjectRecognitionCore source)", "testcase": false, "constructor": false, "invocations": ["get", "get", "equals", "equals", "loadLibrary", "getCanonicalName", "getClass", "get", "get", "isOpened", "release", "exists", "getCanonicalName", "getClass", "getCanonicalName", "getClass", "get", "get", "doubleValue", "get", "ceil"]}, "repository": {"repo_id": 141492069, "url": "https://github.com/Vantiq/vantiq-extension-sources", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 9, "size": 16261, "license": "licensed"}}