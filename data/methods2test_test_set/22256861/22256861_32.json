{"test_class": {"identifier": "S2UtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "s3tbx-olci-radiometry/src/test/java/org/esa/s3tbx/olci/radiometry/rayleigh/S2UtilsTest.java"}, "test_case": {"identifier": "testGetS2SpectralBandIndex", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetS2SpectralBandIndex() throws Exception {\n        int s2SpectralBandIndex = S2Utils.getS2SpectralBandIndex(\"B1\");\n        assertEquals(0, s2SpectralBandIndex);\n\n        s2SpectralBandIndex = S2Utils.getS2SpectralBandIndex(\"B9\");\n        assertEquals(9, s2SpectralBandIndex);\n\n        s2SpectralBandIndex = S2Utils.getS2SpectralBandIndex(\"B8A\");\n        assertEquals(8, s2SpectralBandIndex);\n\n        s2SpectralBandIndex = S2Utils.getS2SpectralBandIndex(\"B12\");\n        assertEquals(12, s2SpectralBandIndex);\n    }", "signature": "void testGetS2SpectralBandIndex()", "full_signature": "@Test public void testGetS2SpectralBandIndex()", "class_method_signature": "S2UtilsTest.testGetS2SpectralBandIndex()", "testcase": true, "constructor": false, "invocations": ["getS2SpectralBandIndex", "assertEquals", "getS2SpectralBandIndex", "assertEquals", "getS2SpectralBandIndex", "assertEquals", "getS2SpectralBandIndex", "assertEquals"]}, "focal_class": {"identifier": "S2Utils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getS2SpectralBandIndex", "parameters": "(String bandName)", "modifiers": "static", "return": "int", "signature": "int getS2SpectralBandIndex(String bandName)", "full_signature": "static int getS2SpectralBandIndex(String bandName)", "class_method_signature": "S2Utils.getS2SpectralBandIndex(String bandName)", "testcase": false, "constructor": false}, {"identifier": "getS2TargetBandName", "parameters": "(String bandCategory, String bandName)", "modifiers": "static", "return": "String", "signature": "String getS2TargetBandName(String bandCategory, String bandName)", "full_signature": "static String getS2TargetBandName(String bandCategory, String bandName)", "class_method_signature": "S2Utils.getS2TargetBandName(String bandCategory, String bandName)", "testcase": false, "constructor": false}, {"identifier": "targetS2BandNameMatches", "parameters": "(String targetBandName, String pattern)", "modifiers": "static", "return": "boolean", "signature": "boolean targetS2BandNameMatches(String targetBandName, String pattern)", "full_signature": "static boolean targetS2BandNameMatches(String targetBandName, String pattern)", "class_method_signature": "S2Utils.targetS2BandNameMatches(String targetBandName, String pattern)", "testcase": false, "constructor": false}, {"identifier": "getNumBandsToRcCorrect", "parameters": "(String[] sourceBandNames)", "modifiers": "static", "return": "int", "signature": "int getNumBandsToRcCorrect(String[] sourceBandNames)", "full_signature": "static int getNumBandsToRcCorrect(String[] sourceBandNames)", "class_method_signature": "S2Utils.getNumBandsToRcCorrect(String[] sourceBandNames)", "testcase": false, "constructor": false}, {"identifier": "getS2TrueWavelengths", "parameters": "()", "modifiers": "static", "return": "double[]", "signature": "double[] getS2TrueWavelengths()", "full_signature": "static double[] getS2TrueWavelengths()", "class_method_signature": "S2Utils.getS2TrueWavelengths()", "testcase": false, "constructor": false}], "file": "s3tbx-olci-radiometry/src/main/java/org/esa/s3tbx/olci/radiometry/rayleigh/S2Utils.java"}, "focal_method": {"identifier": "getS2SpectralBandIndex", "parameters": "(String bandName)", "modifiers": "static", "return": "int", "body": "static int getS2SpectralBandIndex(String bandName) {\n        // S2 spectralBandIndex:\n        // bands B1..B8: spectralBandIndex = 0..7\n        // band B8A: spectralBandIndex = 8\n        // bands B9: spectralBandIndex = 9\n        // bands B10..B12: 10..12\n        if (bandName.endsWith(\"B8A\")) {\n            return 8;\n        } else {\n            // shall work for patterns like B12, rho_ng_B12, rBRR_B9, ...\n            final int lastIndexOfB = bandName.lastIndexOf(\"B\");\n            if (lastIndexOfB >= 0) {\n                final int bandNumber = Integer.parseInt(bandName.substring(lastIndexOfB + 1, bandName.length()));\n                return bandNumber < 9 ? bandNumber - 1 : bandNumber;\n            } else {\n                return -1;\n            }\n        }\n    }", "signature": "int getS2SpectralBandIndex(String bandName)", "full_signature": "static int getS2SpectralBandIndex(String bandName)", "class_method_signature": "S2Utils.getS2SpectralBandIndex(String bandName)", "testcase": false, "constructor": false, "invocations": ["endsWith", "lastIndexOf", "parseInt", "substring", "length"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}