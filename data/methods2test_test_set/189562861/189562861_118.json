{"test_class": {"identifier": "ConsumerContextFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Filter consumerContextFilter = new ConsumerContextFilter();", "modifier": "", "type": "Filter", "declarator": "consumerContextFilter = new ConsumerContextFilter()", "var_name": "consumerContextFilter"}], "file": "dubbo-rpc/dubbo-rpc-api/src/test/java/com/alibaba/dubbo/rpc/filter/ConsumerContextFilterTest.java"}, "test_case": {"identifier": "testSetContext", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSetContext() {\n        URL url = URL.valueOf(\"test://test:11/test?group=dubbo&version=1.1\");\n        Invoker<DemoService> invoker = new MyInvoker<DemoService>(url);\n        Invocation invocation = new MockInvocation();\n        consumerContextFilter.invoke(invoker, invocation);\n        assertEquals(invoker, RpcContext.getContext().getInvoker());\n        assertEquals(invocation, RpcContext.getContext().getInvocation());\n        assertEquals(NetUtils.getLocalHost() + \":0\", RpcContext.getContext().getLocalAddressString());\n        assertEquals(\"test:11\", RpcContext.getContext().getRemoteAddressString());\n\n    }", "signature": "void testSetContext()", "full_signature": "@Test public void testSetContext()", "class_method_signature": "ConsumerContextFilterTest.testSetContext()", "testcase": true, "constructor": false, "invocations": ["valueOf", "invoke", "assertEquals", "getInvoker", "getContext", "assertEquals", "getInvocation", "getContext", "assertEquals", "getLocalHost", "getLocalAddressString", "getContext", "assertEquals", "getRemoteAddressString", "getContext"]}, "focal_class": {"identifier": "ConsumerContextFilter", "superclass": "", "interfaces": "implements Filter", "fields": [], "methods": [{"identifier": "invoke", "parameters": "(Invoker<?> invoker, Invocation invocation)", "modifiers": "@Override public", "return": "Result", "signature": "Result invoke(Invoker<?> invoker, Invocation invocation)", "full_signature": "@Override public Result invoke(Invoker<?> invoker, Invocation invocation)", "class_method_signature": "ConsumerContextFilter.invoke(Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false}], "file": "dubbo-rpc/dubbo-rpc-api/src/main/java/com/alibaba/dubbo/rpc/filter/ConsumerContextFilter.java"}, "focal_method": {"identifier": "invoke", "parameters": "(Invoker<?> invoker, Invocation invocation)", "modifiers": "@Override public", "return": "Result", "body": "@Override\n    public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {\n        RpcContext.getContext()\n                .setInvoker(invoker)\n                .setInvocation(invocation)\n                .setLocalAddress(NetUtils.getLocalHost(), 0)\n                .setRemoteAddress(invoker.getUrl().getHost(),\n                        invoker.getUrl().getPort());\n        if (invocation instanceof RpcInvocation) {\n            ((RpcInvocation) invocation).setInvoker(invoker);\n        }\n        try {\n            RpcResult result = (RpcResult) invoker.invoke(invocation);\n            RpcContext.getServerContext().setAttachments(result.getAttachments());\n            return result;\n        } finally {\n            RpcContext.getContext().clearAttachments();\n        }\n    }", "signature": "Result invoke(Invoker<?> invoker, Invocation invocation)", "full_signature": "@Override public Result invoke(Invoker<?> invoker, Invocation invocation)", "class_method_signature": "ConsumerContextFilter.invoke(Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false, "invocations": ["setRemoteAddress", "setLocalAddress", "setInvocation", "setInvoker", "getContext", "getLocalHost", "getHost", "getUrl", "getPort", "getUrl", "setInvoker", "invoke", "setAttachments", "getServerContext", "getAttachments", "clearAttachments", "getContext"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}