{"test_class": {"identifier": "CamflakeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int SEQUENCE_MAX = 1 << 6;", "modifier": "private static final", "type": "int", "declarator": "SEQUENCE_MAX = 1 << 6", "var_name": "SEQUENCE_MAX"}], "file": "camflake/src/test/java/com/camobile/camflake/CamflakeTest.java"}, "test_case": {"identifier": "testNextWithRetryOnce", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNextWithRetryOnce() {\n\n        final Instant execTime = Instant.ofEpochMilli(1L);\n        final Instant execTime2 = Instant.ofEpochMilli(3L);\n        new Expectations(Instant.class) {\n            {\n                Instant.now();\n                returns(\n                    execTime, // at initialize\n                    execTime, // when invoke next method first time.\n                    execTime2 // when invoke next method second time.\n                );\n            }\n        };\n\n        Camflake camflake = new Camflake(new TestMachineId(), Instant.EPOCH);\n\n        // force update sequence ID to maximum to test retry.\n        Deencapsulation.setField(camflake, \"counter\", new AtomicInteger(SEQUENCE_MAX));\n\n        long id = camflake.next();\n        assertThat(id, is(12582913L));\n    }", "signature": "void testNextWithRetryOnce()", "full_signature": "@Test public void testNextWithRetryOnce()", "class_method_signature": "CamflakeTest.testNextWithRetryOnce()", "testcase": true, "constructor": false, "invocations": ["ofEpochMilli", "ofEpochMilli", "now", "returns", "setField", "next", "assertThat", "is"]}, "focal_class": {"identifier": "Camflake", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger log = LoggerFactory.getLogger(Camflake.class);", "modifier": "private static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(Camflake.class)", "var_name": "log"}, {"original_string": "private static final long TIME_MAX = (1L << 41) - 1L;", "modifier": "private static final", "type": "long", "declarator": "TIME_MAX = (1L << 41) - 1L", "var_name": "TIME_MAX"}, {"original_string": "private static final long SEQUENCE_MAX = (1L << 6) - 1L;", "modifier": "private static final", "type": "long", "declarator": "SEQUENCE_MAX = (1L << 6) - 1L", "var_name": "SEQUENCE_MAX"}, {"original_string": "private static final Object LOCK = new Object();", "modifier": "private static final", "type": "Object", "declarator": "LOCK = new Object()", "var_name": "LOCK"}, {"original_string": "private long baseTime;", "modifier": "private", "type": "long", "declarator": "baseTime", "var_name": "baseTime"}, {"original_string": "private int machineId;", "modifier": "private", "type": "int", "declarator": "machineId", "var_name": "machineId"}, {"original_string": "private volatile long elapsedTime;", "modifier": "private volatile", "type": "long", "declarator": "elapsedTime", "var_name": "elapsedTime"}, {"original_string": "private AtomicInteger counter = new AtomicInteger(0);", "modifier": "private", "type": "AtomicInteger", "declarator": "counter = new AtomicInteger(0)", "var_name": "counter"}], "methods": [{"identifier": "Camflake", "parameters": "(MachineId machineId, Instant baseTime)", "modifiers": "public", "return": "", "signature": " Camflake(MachineId machineId, Instant baseTime)", "full_signature": "public  Camflake(MachineId machineId, Instant baseTime)", "class_method_signature": "Camflake.Camflake(MachineId machineId, Instant baseTime)", "testcase": false, "constructor": true}, {"identifier": "Camflake", "parameters": "(MachineId machineId)", "modifiers": "public", "return": "", "signature": " Camflake(MachineId machineId)", "full_signature": "public  Camflake(MachineId machineId)", "class_method_signature": "Camflake.Camflake(MachineId machineId)", "testcase": false, "constructor": true}, {"identifier": "Camflake", "parameters": "()", "modifiers": "public", "return": "", "signature": " Camflake()", "full_signature": "public  Camflake()", "class_method_signature": "Camflake.Camflake()", "testcase": false, "constructor": true}, {"identifier": "next", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long next()", "full_signature": "public long next()", "class_method_signature": "Camflake.next()", "testcase": false, "constructor": false}, {"identifier": "getElapsedTime", "parameters": "()", "modifiers": "private", "return": "long", "signature": "long getElapsedTime()", "full_signature": "private long getElapsedTime()", "class_method_signature": "Camflake.getElapsedTime()", "testcase": false, "constructor": false}, {"identifier": "getSequence", "parameters": "(long elapsed)", "modifiers": "private", "return": "int", "signature": "int getSequence(long elapsed)", "full_signature": "private int getSequence(long elapsed)", "class_method_signature": "Camflake.getSequence(long elapsed)", "testcase": false, "constructor": false}, {"identifier": "sleep", "parameters": "(long durationMillis)", "modifiers": "private", "return": "void", "signature": "void sleep(long durationMillis)", "full_signature": "private void sleep(long durationMillis)", "class_method_signature": "Camflake.sleep(long durationMillis)", "testcase": false, "constructor": false}], "file": "camflake/src/main/java/com/camobile/camflake/Camflake.java"}, "focal_method": {"identifier": "next", "parameters": "()", "modifiers": "public", "return": "long", "body": "public long next() {\n\n        // elapsedTime\n        long elapsed = getElapsedTime();\n        // sequence\n        int sequence = getSequence(elapsed);\n        log.debug(\"sequence id: {}\", sequence);\n        // If sequence ID exceeded maximum value, it retries once to generate unique ID 2 milliseconds later.\n        if (sequence > SEQUENCE_MAX) {\n            sleep(TimeUnit.MILLISECONDS.toMillis(2L));\n\n            elapsed = getElapsedTime();\n            sequence = getSequence(elapsed);\n            if (sequence > SEQUENCE_MAX) {\n                throw new CamflakeException(\"Failed to issue sequence id.\");\n            }\n        }\n\n        long id = (elapsed << 22) | (sequence << 16) | machineId;\n        log.debug(\"unique id: {}\", id);\n\n        return id;\n    }", "signature": "long next()", "full_signature": "public long next()", "class_method_signature": "Camflake.next()", "testcase": false, "constructor": false, "invocations": ["getElapsedTime", "getSequence", "debug", "sleep", "toMillis", "getElapsedTime", "getSequence", "debug"]}, "repository": {"repo_id": 91779577, "url": "https://github.com/cam-inc/camflake", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 17, "size": 84, "license": "licensed"}}