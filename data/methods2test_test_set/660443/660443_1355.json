{"test_class": {"identifier": "BasicMoleculeHashGeneratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "tool/hash/src/test/java/org/openscience/cdk/hash/BasicMoleculeHashGeneratorTest.java"}, "test_case": {"identifier": "testGenerate_Rotation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGenerate_Rotation() {\n\n        AtomHashGenerator atomGenerator = mock(AtomHashGenerator.class);\n        Xorshift xorshift = new Xorshift();\n        IAtomContainer container = mock(IAtomContainer.class);\n\n        MoleculeHashGenerator generator = new BasicMoleculeHashGenerator(atomGenerator, new Xorshift());\n\n        when(atomGenerator.generate(container)).thenReturn(new long[]{5L, 5L, 5L, 5L});\n\n        long hashCode = generator.generate(container);\n\n        verify(atomGenerator, times(1)).generate(container);\n\n        verifyNoMoreInteractions(atomGenerator, container);\n\n        long expected = 2147483647L ^ 5L ^ xorshift.next(5L) ^ xorshift.next(xorshift.next(5L))\n                ^ xorshift.next(xorshift.next(xorshift.next(5L)));\n\n        assertThat(hashCode, is(expected));\n\n    }", "signature": "void testGenerate_Rotation()", "full_signature": "@Test public void testGenerate_Rotation()", "class_method_signature": "BasicMoleculeHashGeneratorTest.testGenerate_Rotation()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "generate", "generate", "generate", "verify", "times", "verifyNoMoreInteractions", "next", "next", "next", "next", "next", "next", "assertThat", "is"]}, "focal_class": {"identifier": "BasicMoleculeHashGenerator", "superclass": "", "interfaces": "implements MoleculeHashGenerator", "fields": [{"original_string": "private final AtomHashGenerator generator;", "modifier": "private final", "type": "AtomHashGenerator", "declarator": "generator", "var_name": "generator"}, {"original_string": "private final Pseudorandom      pseudorandom;", "modifier": "private final", "type": "Pseudorandom", "declarator": "pseudorandom", "var_name": "pseudorandom"}], "methods": [{"identifier": "BasicMoleculeHashGenerator", "parameters": "(AtomHashGenerator generator)", "modifiers": "public", "return": "", "signature": " BasicMoleculeHashGenerator(AtomHashGenerator generator)", "full_signature": "public  BasicMoleculeHashGenerator(AtomHashGenerator generator)", "class_method_signature": "BasicMoleculeHashGenerator.BasicMoleculeHashGenerator(AtomHashGenerator generator)", "testcase": false, "constructor": true}, {"identifier": "BasicMoleculeHashGenerator", "parameters": "(AtomHashGenerator generator, Pseudorandom pseudorandom)", "modifiers": "", "return": "", "signature": " BasicMoleculeHashGenerator(AtomHashGenerator generator, Pseudorandom pseudorandom)", "full_signature": "  BasicMoleculeHashGenerator(AtomHashGenerator generator, Pseudorandom pseudorandom)", "class_method_signature": "BasicMoleculeHashGenerator.BasicMoleculeHashGenerator(AtomHashGenerator generator, Pseudorandom pseudorandom)", "testcase": false, "constructor": true}, {"identifier": "generate", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "long", "signature": "long generate(IAtomContainer container)", "full_signature": "@Override public long generate(IAtomContainer container)", "class_method_signature": "BasicMoleculeHashGenerator.generate(IAtomContainer container)", "testcase": false, "constructor": false}], "file": "tool/hash/src/main/java/org/openscience/cdk/hash/BasicMoleculeHashGenerator.java"}, "focal_method": {"identifier": "generate", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "long", "body": "@Override\n    public long generate(IAtomContainer container) {\n\n        long[] hashes = generator.generate(container);\n        long[] rotated = new long[hashes.length];\n\n        Arrays.sort(hashes);\n\n        // seed with Mersenne prime 2^31-1\n        long hash = 2147483647L;\n\n        for (int i = 0; i < hashes.length; i++) {\n\n            // if non-unique, then get the next random number\n            if (i > 0 && hashes[i] == hashes[i - 1]) {\n                hash ^= rotated[i] = pseudorandom.next(rotated[i - 1]);\n            } else {\n                hash ^= rotated[i] = hashes[i];\n            }\n        }\n\n        return hash;\n    }", "signature": "long generate(IAtomContainer container)", "full_signature": "@Override public long generate(IAtomContainer container)", "class_method_signature": "BasicMoleculeHashGenerator.generate(IAtomContainer container)", "testcase": false, "constructor": false, "invocations": ["generate", "sort", "next"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}