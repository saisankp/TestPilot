{"test_class": {"identifier": "AuthenticatorHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "olat7.8/src/test/java/org/olat/system/commons/AuthenticatorHelperTest.java"}, "test_case": {"identifier": "testVerifyPasswordStrength_OK_specialChars", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testVerifyPasswordStrength_OK_specialChars() throws AuthenticationException {\n        for (char special : AuthenticatorHelper.CHAR_SPECIALS) {\n            String password = \"aB178cd\" + special;\n            boolean isOK = AuthenticatorHelper.verifyPasswordStrength(\"test2\", password, \"test2\");\n            System.out.println(\"password: \" + password + \" is OK\");\n            if (!isOK) {\n                System.out.println(\"password: \" + password + \" is NOK\");\n            }\n            assertTrue(isOK);\n        }\n    }", "signature": "void testVerifyPasswordStrength_OK_specialChars()", "full_signature": "@Test public void testVerifyPasswordStrength_OK_specialChars()", "class_method_signature": "AuthenticatorHelperTest.testVerifyPasswordStrength_OK_specialChars()", "testcase": true, "constructor": false, "invocations": ["verifyPasswordStrength", "println", "println", "assertTrue"]}, "focal_class": {"identifier": "AuthenticatorHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerHelper.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerHelper.getLogger()", "var_name": "LOG"}, {"original_string": "protected static final char[] CHAR_SPECIALS = { '\u00a7', '\u00b0', '+', '\u00a6', '\"', '@', '*', '#', '\u00e7', '%', '&', '\u00ac', '/', '|', '(', '\u00a2', ')', '=', '?', '\\'', '^', '~', '\u20ac',\n            '[', ']', '!', '{', '}', '$', '\u00a3', '<', '>', '\\\\', ',', ';', '.', ':', '-', '_' };", "modifier": "protected static final", "type": "char[]", "declarator": "CHAR_SPECIALS = { '\u00a7', '\u00b0', '+', '\u00a6', '\"', '@', '*', '#', '\u00e7', '%', '&', '\u00ac', '/', '|', '(', '\u00a2', ')', '=', '?', '\\'', '^', '~', '\u20ac',\n            '[', ']', '!', '{', '}', '$', '\u00a3', '<', '>', '\\\\', ',', ';', '.', ':', '-', '_' };", "var_name": "CHAR_SPECIALS"}], "methods": [{"identifier": "verifyPasswordStrength", "parameters": "(String oldPassword, String newPassword, String principalName)", "modifiers": "public static", "return": "boolean", "signature": "boolean verifyPasswordStrength(String oldPassword, String newPassword, String principalName)", "full_signature": "public static boolean verifyPasswordStrength(String oldPassword, String newPassword, String principalName)", "class_method_signature": "AuthenticatorHelper.verifyPasswordStrength(String oldPassword, String newPassword, String principalName)", "testcase": false, "constructor": false}, {"identifier": "getESAPIUser", "parameters": "(String username)", "modifiers": "private static", "return": "DefaultUser", "signature": "DefaultUser getESAPIUser(String username)", "full_signature": "private static DefaultUser getESAPIUser(String username)", "class_method_signature": "AuthenticatorHelper.getESAPIUser(String username)", "testcase": false, "constructor": false}, {"identifier": "verifyCharSets", "parameters": "(String newPassword)", "modifiers": "protected static", "return": "boolean", "signature": "boolean verifyCharSets(String newPassword)", "full_signature": "protected static boolean verifyCharSets(String newPassword)", "class_method_signature": "AuthenticatorHelper.verifyCharSets(String newPassword)", "testcase": false, "constructor": false}], "file": "olat7.8/src/main/java/org/olat/system/commons/AuthenticatorHelper.java"}, "focal_method": {"identifier": "verifyPasswordStrength", "parameters": "(String oldPassword, String newPassword, String principalName)", "modifiers": "public static", "return": "boolean", "body": "public static boolean verifyPasswordStrength(String oldPassword, String newPassword, String principalName) {\n        if (newPassword == null || newPassword.isEmpty()) {\n            LOG.error(\"verifyPasswordStrength failed because newPassword or principalName is null or empty\");\n            return false;\n        } else if (newPassword != null && newPassword.trim().length() < 8) {\n            LOG.error(\"verifyPasswordStrength failed because newPassword is too short, should be at least 8 chars long\");\n            return false;\n        } else if (newPassword != null && !verifyCharSets(newPassword)) {\n            LOG.error(\"verifyPasswordStrength failed because newPassword doesn't have a char from each char set\");\n            return false;\n        }\n        if (principalName == null) {\n            principalName = \"\";\n        }\n        try {\n            FileBasedAuthenticator.getInstance().verifyPasswordStrength(oldPassword, newPassword, getESAPIUser(principalName));\n        } catch (AuthenticationException e) {\n            // e.g. if newPassword is too similar to oldPassword\n            LOG.error(\"verifyPasswordStrength failed because: \" + e.getUserMessage() + \" \" + e.getLogMessage());\n            return false;\n        }\n        return true;\n    }", "signature": "boolean verifyPasswordStrength(String oldPassword, String newPassword, String principalName)", "full_signature": "public static boolean verifyPasswordStrength(String oldPassword, String newPassword, String principalName)", "class_method_signature": "AuthenticatorHelper.verifyPasswordStrength(String oldPassword, String newPassword, String principalName)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "error", "length", "trim", "error", "verifyCharSets", "error", "verifyPasswordStrength", "getInstance", "getESAPIUser", "error", "getUserMessage", "getLogMessage"]}, "repository": {"repo_id": 22589840, "url": "https://github.com/huihoo/olat", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 10, "size": 69738, "license": "licensed"}}