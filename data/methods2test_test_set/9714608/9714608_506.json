{"test_class": {"identifier": "StandardGISGridSetTest", "superclass": "extends AbstractGisTest", "interfaces": "", "fields": [{"original_string": "private static final String SHP_RESOURCE = MapPolylineGridSetTest.class.getPackage().getName().replaceAll(\"\\\\.\", \"/\") //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t+ \"/test.shp\";", "modifier": "private static final", "type": "String", "declarator": "SHP_RESOURCE = MapPolylineGridSetTest.class.getPackage().getName().replaceAll(\"\\\\.\", \"/\") //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t+ \"/test.shp\"", "var_name": "SHP_RESOURCE"}, {"original_string": "private static final int MAX_REFERENCE_SIZE = 1000;", "modifier": "private static final", "type": "int", "declarator": "MAX_REFERENCE_SIZE = 1000", "var_name": "MAX_REFERENCE_SIZE"}, {"original_string": "private ArrayList<GISPrimitive> reference = null;", "modifier": "private", "type": "ArrayList<GISPrimitive>", "declarator": "reference = null", "var_name": "reference"}, {"original_string": "private Point2d center = null;", "modifier": "private", "type": "Point2d", "declarator": "center = null", "var_name": "center"}, {"original_string": "private Rectangle2d worldBounds = null;", "modifier": "private", "type": "Rectangle2d", "declarator": "worldBounds = null", "var_name": "worldBounds"}], "file": "advanced/gis/giscore/src/test/java/org/arakhne/afc/gis/grid/StandardGISGridSetTest.java"}, "test_case": {"identifier": "testIteratorRectangle", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testIteratorRectangle() {\n\t\tStandardGISGridSet<GISPrimitive> test = new StandardGISGridSet<>(100,100,this.worldBounds);\n\t\ttest.addAll(this.reference);\n\t\tassertEquals(this.reference.size(), test.size());\n\n\t\tRandom rnd = new Random();\n\t\tint testCount = rnd.nextInt(20)+10;\n\t\tRectangle2d bounds;\n\t\tCollection<GISPrimitive> inter = new TreeSet<>(new Comparator<GISPrimitive>() {\n\t\t\t@Override\n\t\t\tpublic int compare(GISPrimitive o1, GISPrimitive o2) {\n\t\t\t\treturn System.identityHashCode(o2) - System.identityHashCode(o1);\n\t\t\t}\n\t\t});\n\t\tIterator<GISPrimitive> iter;\n\t\tint deltaX,deltaY,width,height;\n\t\tString msg;\n\n\t\tfor(int idxTest=0; idxTest<testCount; ++idxTest) {\n\n\t\t\tmsg = \"test \"+(idxTest+1)+\"/\"+testCount; //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\tgetLogger().info(msg+\"...\"); //$NON-NLS-1$\n\n\t\t\tdeltaX = rnd.nextInt(1000)*(rnd.nextBoolean() ? -1 : 1);\n\t\t\tdeltaY = rnd.nextInt(1000)*(rnd.nextBoolean() ? -1 : 1);\n\t\t\twidth = rnd.nextInt(100);\n\t\t\theight = rnd.nextInt(100);\n\n\t\t\tbounds = new Rectangle2d();\n\t\t\tbounds.setFromCorners(\n\t\t\t\t\tthis.center.getX()+deltaX, this.center.getY()+deltaY,\n\t\t\t\t\tthis.center.getX()+deltaX+width,\n\t\t\t\t\tthis.center.getY()+deltaY+height);\n\t\t\tinter.clear();\n\n\t\t\tfor (GISPrimitive primitive : this.reference) {\n\t\t\t\tShape2d<?> primitiveRect = primitive.getGeoLocation().toBounds2D();\n\t\t\t\tif (bounds.intersects(primitiveRect)) {\n\t\t\t\t\tinter.add(primitive);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\titer = test.iterator(bounds);\n\t\t\tGISPrimitive primitive;\n\t\t\twhile (iter.hasNext()) {\n\t\t\t\tprimitive = iter.next();\n\t\t\t\tassertTrue(inter.remove(primitive), msg);\n\t\t\t}\n\n\t\t\tif (!inter.isEmpty()) {\n\t\t\t\tfor (GISPrimitive pr: this.reference) {\n\t\t\t\t\tShape2d<?> primitiveRect = pr.getGeoLocation().toBounds2D();\n\t\t\t\t\tif (bounds.intersects(primitiveRect)) {\n\t\t\t\t\t\tinter.add(pr);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\titer = test.iterator(bounds);\n\t\t\t\twhile (iter.hasNext()) {\n\t\t\t\t\tprimitive = iter.next();\n\t\t\t\t\tassertTrue(inter.remove(primitive), msg);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//TODO: assertEquals(0, inter.size());\n\n\t\t\tgetLogger().info(\"done\"); //$NON-NLS-1$\n\t\t}\n\t}", "signature": "void testIteratorRectangle()", "full_signature": "@Test public void testIteratorRectangle()", "class_method_signature": "StandardGISGridSetTest.testIteratorRectangle()", "testcase": true, "constructor": false, "invocations": ["addAll", "assertEquals", "size", "size", "nextInt", "identityHashCode", "identityHashCode", "info", "getLogger", "nextInt", "nextBoolean", "nextInt", "nextBoolean", "nextInt", "nextInt", "setFromCorners", "getX", "getY", "getX", "getY", "clear", "toBounds2D", "getGeoLocation", "intersects", "add", "iterator", "hasNext", "next", "assertTrue", "remove", "isEmpty", "toBounds2D", "getGeoLocation", "intersects", "add", "iterator", "hasNext", "next", "assertTrue", "remove", "info", "getLogger"]}, "focal_class": {"identifier": "StandardGISGridSet", "superclass": "extends AbstractGISGridSet<P>", "interfaces": "", "fields": [], "methods": [{"identifier": "StandardGISGridSet", "parameters": "(int nRows, int nColumns, Rectangle2d bounds)", "modifiers": "public", "return": "", "signature": " StandardGISGridSet(int nRows, int nColumns, Rectangle2d bounds)", "full_signature": "public  StandardGISGridSet(int nRows, int nColumns, Rectangle2d bounds)", "class_method_signature": "StandardGISGridSet.StandardGISGridSet(int nRows, int nColumns, Rectangle2d bounds)", "testcase": false, "constructor": true}, {"identifier": "StandardGISGridSet", "parameters": "(int nRows, int nColumns, double boundsX, double boundsY, double boundsWidth, double boundsHeight)", "modifiers": "public", "return": "", "signature": " StandardGISGridSet(int nRows, int nColumns, double boundsX, double boundsY, double boundsWidth, double boundsHeight)", "full_signature": "public  StandardGISGridSet(int nRows, int nColumns, double boundsX, double boundsY, double boundsWidth, double boundsHeight)", "class_method_signature": "StandardGISGridSet.StandardGISGridSet(int nRows, int nColumns, double boundsX, double boundsY, double boundsWidth, double boundsHeight)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(P point)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(P point)", "full_signature": "@Override public boolean add(P point)", "class_method_signature": "StandardGISGridSet.add(P point)", "testcase": false, "constructor": false}], "file": "advanced/gis/giscore/src/main/java/org/arakhne/afc/gis/grid/StandardGISGridSet.java"}, "focal_method": {"identifier": "add", "parameters": "(P point)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean add(P point) {\n\t\tif (this.grid.addElement(point)) {\n\t\t\tupdateComponentType(point);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}", "signature": "boolean add(P point)", "full_signature": "@Override public boolean add(P point)", "class_method_signature": "StandardGISGridSet.add(P point)", "testcase": false, "constructor": false, "invocations": ["addElement", "updateComponentType"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}