{"test_class": {"identifier": "TestAesCtrDrbg", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/dk/alexandra/fresco/framework/util/TestAesCtrDrbg.java"}, "test_case": {"identifier": "testNextBytesBounded", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n  public void testNextBytesBounded() {\n    AesCtrDrbg drbg = new AesCtrDrbg(new byte[32]);\n    drbg.nextBytesBounded(new byte[20], new byte[10]);\n  }", "signature": "void testNextBytesBounded()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testNextBytesBounded()", "class_method_signature": "TestAesCtrDrbg.testNextBytesBounded()", "testcase": true, "constructor": false, "invocations": ["nextBytesBounded"]}, "focal_class": {"identifier": "AesCtrDrbg", "superclass": "", "interfaces": "implements Drbg", "fields": [{"original_string": "public static final int SEED_LENGTH = 32;", "modifier": "public static final", "type": "int", "declarator": "SEED_LENGTH = 32", "var_name": "SEED_LENGTH"}, {"original_string": "private static final int IV_LENGTH = 16;", "modifier": "private static final", "type": "int", "declarator": "IV_LENGTH = 16", "var_name": "IV_LENGTH"}, {"original_string": "private static final int KEY_LENGTH = 16;", "modifier": "private static final", "type": "int", "declarator": "KEY_LENGTH = 16", "var_name": "KEY_LENGTH"}, {"original_string": "private static final long RESEED_LIMIT = 1L << 48;", "modifier": "private static final", "type": "long", "declarator": "RESEED_LIMIT = 1L << 48", "var_name": "RESEED_LIMIT"}, {"original_string": "private static final int UPDATE_LIMIT = 1 << 16;", "modifier": "private static final", "type": "int", "declarator": "UPDATE_LIMIT = 1 << 16", "var_name": "UPDATE_LIMIT"}, {"original_string": "private Cipher cipher;", "modifier": "private", "type": "Cipher", "declarator": "cipher", "var_name": "cipher"}, {"original_string": "private int generatedBytes;", "modifier": "private", "type": "int", "declarator": "generatedBytes", "var_name": "generatedBytes"}, {"original_string": "private int reseedCounter;", "modifier": "private", "type": "int", "declarator": "reseedCounter", "var_name": "reseedCounter"}], "methods": [{"identifier": "AesCtrDrbg", "parameters": "()", "modifiers": "public", "return": "", "signature": " AesCtrDrbg()", "full_signature": "public  AesCtrDrbg()", "class_method_signature": "AesCtrDrbg.AesCtrDrbg()", "testcase": false, "constructor": true}, {"identifier": "AesCtrDrbg", "parameters": "(byte[] seed)", "modifiers": "public", "return": "", "signature": " AesCtrDrbg(byte[] seed)", "full_signature": "public  AesCtrDrbg(byte[] seed)", "class_method_signature": "AesCtrDrbg.AesCtrDrbg(byte[] seed)", "testcase": false, "constructor": true}, {"identifier": "nextBytes", "parameters": "(byte[] bytes)", "modifiers": "@Override public", "return": "void", "signature": "void nextBytes(byte[] bytes)", "full_signature": "@Override public void nextBytes(byte[] bytes)", "class_method_signature": "AesCtrDrbg.nextBytes(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "nextBytesBounded", "parameters": "(byte[] zeroes, byte[] output)", "modifiers": "", "return": "void", "signature": "void nextBytesBounded(byte[] zeroes, byte[] output)", "full_signature": " void nextBytesBounded(byte[] zeroes, byte[] output)", "class_method_signature": "AesCtrDrbg.nextBytesBounded(byte[] zeroes, byte[] output)", "testcase": false, "constructor": false}, {"identifier": "initCipher", "parameters": "(byte[] key, byte[] iv)", "modifiers": "", "return": "void", "signature": "void initCipher(byte[] key, byte[] iv)", "full_signature": " void initCipher(byte[] key, byte[] iv)", "class_method_signature": "AesCtrDrbg.initCipher(byte[] key, byte[] iv)", "testcase": false, "constructor": false}, {"identifier": "incrementReseedCounter", "parameters": "(long increment)", "modifiers": "", "return": "void", "signature": "void incrementReseedCounter(long increment)", "full_signature": " void incrementReseedCounter(long increment)", "class_method_signature": "AesCtrDrbg.incrementReseedCounter(long increment)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void update()", "full_signature": "private void update()", "class_method_signature": "AesCtrDrbg.update()", "testcase": false, "constructor": false}, {"identifier": "generateSeed", "parameters": "()", "modifiers": "private static", "return": "byte[]", "signature": "byte[] generateSeed()", "full_signature": "private static byte[] generateSeed()", "class_method_signature": "AesCtrDrbg.generateSeed()", "testcase": false, "constructor": false}], "file": "core/src/main/java/dk/alexandra/fresco/framework/util/AesCtrDrbg.java"}, "focal_method": {"identifier": "nextBytesBounded", "parameters": "(byte[] zeroes, byte[] output)", "modifiers": "", "return": "void", "body": "void nextBytesBounded(byte[] zeroes, byte[] output) {\n    if (generatedBytes + output.length > UPDATE_LIMIT) {\n      update();\n    }\n    try {\n      this.cipher.update(zeroes, 0, zeroes.length, output);\n    } catch (ShortBufferException e) {\n      throw new IllegalArgumentException(\"Exception generating bits\", e);\n    }\n    generatedBytes += output.length;\n  }", "signature": "void nextBytesBounded(byte[] zeroes, byte[] output)", "full_signature": " void nextBytesBounded(byte[] zeroes, byte[] output)", "class_method_signature": "AesCtrDrbg.nextBytesBounded(byte[] zeroes, byte[] output)", "testcase": false, "constructor": false, "invocations": ["update", "update"]}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}