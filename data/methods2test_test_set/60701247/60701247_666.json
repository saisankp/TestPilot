{"test_class": {"identifier": "LegacyAllocationConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CLASS_NAME = LegacyAllocationConverterTest.class.getName();", "modifier": "private static final", "type": "String", "declarator": "CLASS_NAME = LegacyAllocationConverterTest.class.getName()", "var_name": "CLASS_NAME"}, {"original_string": "private static final String METHOD_NAME = \"TestMethod\";", "modifier": "private static final", "type": "String", "declarator": "METHOD_NAME = \"TestMethod\"", "var_name": "METHOD_NAME"}, {"original_string": "private static final String FILE_NAME = \"LegacyAllocationConverterTest.java\";", "modifier": "private static final", "type": "String", "declarator": "FILE_NAME = \"LegacyAllocationConverterTest.java\"", "var_name": "FILE_NAME"}, {"original_string": "private static final int LINE_NUMBER = 100;", "modifier": "private static final", "type": "int", "declarator": "LINE_NUMBER = 100", "var_name": "LINE_NUMBER"}, {"original_string": "private static final int THREAD_ID = 10;", "modifier": "private static final", "type": "int", "declarator": "THREAD_ID = 10", "var_name": "THREAD_ID"}, {"original_string": "private static final int SIZE = 101;", "modifier": "private static final", "type": "int", "declarator": "SIZE = 101", "var_name": "SIZE"}, {"original_string": "private static final int STACK_ID = 1001;", "modifier": "private static final", "type": "int", "declarator": "STACK_ID = 1001", "var_name": "STACK_ID"}], "file": "profilers/testSrc/com/android/tools/profilers/memory/LegacyAllocationConverterTest.java"}, "test_case": {"identifier": "testCallstackHashcode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCallstackHashcode() {\n    LegacyAllocationConverter converter = new LegacyAllocationConverter();\n    List<StackTraceElement> stackTraceElementList = new ArrayList<>();\n    stackTraceElementList.add(new StackTraceElement(CLASS_NAME, METHOD_NAME, FILE_NAME, LINE_NUMBER));\n    LegacyAllocationConverter.CallStack callStack = converter.addCallStack(stackTraceElementList);\n    assertThat(callStack.hashCode()).isEqualTo(stackTraceElementList.hashCode());\n  }", "signature": "void testCallstackHashcode()", "full_signature": "@Test public void testCallstackHashcode()", "class_method_signature": "LegacyAllocationConverterTest.testCallstackHashcode()", "testcase": true, "constructor": false, "invocations": ["add", "addCallStack", "isEqualTo", "assertThat", "hashCode", "hashCode"]}, "focal_class": {"identifier": "LegacyAllocationConverter", "superclass": "", "interfaces": "", "fields": [{"original_string": "@NotNull\n  private List<Allocation> myAllocations = new ArrayList<>();", "modifier": "@NotNull\n  private", "type": "List<Allocation>", "declarator": "myAllocations = new ArrayList<>()", "var_name": "myAllocations"}, {"original_string": "@NotNull\n  private Map<String, ClassName> myAllocatedClasses = new HashMap<>();", "modifier": "@NotNull\n  private", "type": "Map<String, ClassName>", "declarator": "myAllocatedClasses = new HashMap<>()", "var_name": "myAllocatedClasses"}, {"original_string": "@NotNull\n  private Map<List<StackTraceElement>, CallStack> myAllocationStacks = new HashMap<>();", "modifier": "@NotNull\n  private", "type": "Map<List<StackTraceElement>, CallStack>", "declarator": "myAllocationStacks = new HashMap<>()", "var_name": "myAllocationStacks"}], "methods": [{"identifier": "addClassName", "parameters": "(@NotNull String className)", "modifiers": "public", "return": "int", "signature": "int addClassName(@NotNull String className)", "full_signature": "public int addClassName(@NotNull String className)", "class_method_signature": "LegacyAllocationConverter.addClassName(@NotNull String className)", "testcase": false, "constructor": false}, {"identifier": "addCallStack", "parameters": "(@NotNull List<StackTraceElement> stackTraceElements)", "modifiers": "@NotNull public", "return": "CallStack", "signature": "CallStack addCallStack(@NotNull List<StackTraceElement> stackTraceElements)", "full_signature": "@NotNull public CallStack addCallStack(@NotNull List<StackTraceElement> stackTraceElements)", "class_method_signature": "LegacyAllocationConverter.addCallStack(@NotNull List<StackTraceElement> stackTraceElements)", "testcase": false, "constructor": false}, {"identifier": "resetAllocations", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void resetAllocations()", "full_signature": "public void resetAllocations()", "class_method_signature": "LegacyAllocationConverter.resetAllocations()", "testcase": false, "constructor": false}, {"identifier": "addAllocation", "parameters": "(@NotNull Allocation allocationInfo)", "modifiers": "public", "return": "void", "signature": "void addAllocation(@NotNull Allocation allocationInfo)", "full_signature": "public void addAllocation(@NotNull Allocation allocationInfo)", "class_method_signature": "LegacyAllocationConverter.addAllocation(@NotNull Allocation allocationInfo)", "testcase": false, "constructor": false}, {"identifier": "getAllocationEvents", "parameters": "()", "modifiers": "public", "return": "List<AllocationEvent.Allocation>", "signature": "List<AllocationEvent.Allocation> getAllocationEvents()", "full_signature": "public List<AllocationEvent.Allocation> getAllocationEvents()", "class_method_signature": "LegacyAllocationConverter.getAllocationEvents()", "testcase": false, "constructor": false}, {"identifier": "getAllocationStacks", "parameters": "()", "modifiers": "public", "return": "List<AllocationStack>", "signature": "List<AllocationStack> getAllocationStacks()", "full_signature": "public List<AllocationStack> getAllocationStacks()", "class_method_signature": "LegacyAllocationConverter.getAllocationStacks()", "testcase": false, "constructor": false}, {"identifier": "getClassNames", "parameters": "()", "modifiers": "public", "return": "List<AllocatedClass>", "signature": "List<AllocatedClass> getClassNames()", "full_signature": "public List<AllocatedClass> getClassNames()", "class_method_signature": "LegacyAllocationConverter.getClassNames()", "testcase": false, "constructor": false}, {"identifier": "parseDump", "parameters": "(@NotNull byte[] dumpData)", "modifiers": "public", "return": "void", "signature": "void parseDump(@NotNull byte[] dumpData)", "full_signature": "public void parseDump(@NotNull byte[] dumpData)", "class_method_signature": "LegacyAllocationConverter.parseDump(@NotNull byte[] dumpData)", "testcase": false, "constructor": false}], "file": "profilers/src/com/android/tools/profilers/memory/LegacyAllocationConverter.java"}, "focal_method": {"identifier": "addCallStack", "parameters": "(@NotNull List<StackTraceElement> stackTraceElements)", "modifiers": "@NotNull public", "return": "CallStack", "body": "@NotNull\n  public CallStack addCallStack(@NotNull List<StackTraceElement> stackTraceElements) {\n    CallStack result;\n    if (!myAllocationStacks.containsKey(stackTraceElements)) {\n      result = new CallStack(stackTraceElements);\n      myAllocationStacks.put(stackTraceElements, result);\n    }\n    else {\n      result = myAllocationStacks.get(stackTraceElements);\n    }\n    return result;\n  }", "signature": "CallStack addCallStack(@NotNull List<StackTraceElement> stackTraceElements)", "full_signature": "@NotNull public CallStack addCallStack(@NotNull List<StackTraceElement> stackTraceElements)", "class_method_signature": "LegacyAllocationConverter.addCallStack(@NotNull List<StackTraceElement> stackTraceElements)", "testcase": false, "constructor": false, "invocations": ["containsKey", "put", "get"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}