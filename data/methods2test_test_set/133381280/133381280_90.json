{"test_class": {"identifier": "ParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "server/metrics/promql/src/test/java/com/alipay/sofa/lookout/server/prom/ql/parse/ParserTest.java"}, "test_case": {"identifier": "testParserVectorSum", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParserVectorSum() {\n        //\u4e0d\u80fdby time\uff1b\n        Expr expr = Parser\n            .parseExpr(\"sum(sum_over_time(http_requests_total{method=\\\"get\\\"}[5m])) by (job)\");\n        System.out.println(expr.toString());\n\n    }", "signature": "void testParserVectorSum()", "full_signature": "@Test public void testParserVectorSum()", "class_method_signature": "ParserTest.testParserVectorSum()", "testcase": true, "constructor": false, "invocations": ["parseExpr", "println", "toString"]}, "focal_class": {"identifier": "Parser", "superclass": "", "interfaces": "", "fields": [{"original_string": "Lexer  lex;", "modifier": "", "type": "Lexer", "declarator": "lex", "var_name": "lex"}, {"original_string": "Item[] token = new Item[3];", "modifier": "", "type": "Item[]", "declarator": "token = new Item[3]", "var_name": "token"}, {"original_string": "int    peekCount;", "modifier": "", "type": "int", "declarator": "peekCount", "var_name": "peekCount"}, {"original_string": "private static final Pattern pattern = Pattern.compile(\"^([0-9]+)(y|w|d|h|m|s|ms)$\");", "modifier": "private static final", "type": "Pattern", "declarator": "pattern = Pattern.compile(\"^([0-9]+)(y|w|d|h|m|s|ms)$\")", "var_name": "pattern"}], "methods": [{"identifier": "Parser", "parameters": "(Lexer lexer)", "modifiers": "private", "return": "", "signature": " Parser(Lexer lexer)", "full_signature": "private  Parser(Lexer lexer)", "class_method_signature": "Parser.Parser(Lexer lexer)", "testcase": false, "constructor": true}, {"identifier": "newParser", "parameters": "(String input)", "modifiers": "private static", "return": "Parser", "signature": "Parser newParser(String input)", "full_signature": "private static Parser newParser(String input)", "class_method_signature": "Parser.newParser(String input)", "testcase": false, "constructor": false}, {"identifier": "parseExpr", "parameters": "(String input)", "modifiers": "public static", "return": "Expr", "signature": "Expr parseExpr(String input)", "full_signature": "public static Expr parseExpr(String input)", "class_method_signature": "Parser.parseExpr(String input)", "testcase": false, "constructor": false}, {"identifier": "parseMetric", "parameters": "(String input)", "modifiers": "public static", "return": "Labels", "signature": "Labels parseMetric(String input)", "full_signature": "public static Labels parseMetric(String input)", "class_method_signature": "Parser.parseMetric(String input)", "testcase": false, "constructor": false}, {"identifier": "parseMetricSelector", "parameters": "(String input)", "modifiers": "private static", "return": "List<Matcher>", "signature": "List<Matcher> parseMetricSelector(String input)", "full_signature": "private static List<Matcher> parseMetricSelector(String input)", "class_method_signature": "Parser.parseMetricSelector(String input)", "testcase": false, "constructor": false}, {"identifier": "parseExpr", "parameters": "()", "modifiers": "private", "return": "Expr", "signature": "Expr parseExpr()", "full_signature": "private Expr parseExpr()", "class_method_signature": "Parser.parseExpr()", "testcase": false, "constructor": false}, {"identifier": "typecheck", "parameters": "(Node node)", "modifiers": "", "return": "void", "signature": "void typecheck(Node node)", "full_signature": " void typecheck(Node node)", "class_method_signature": "Parser.typecheck(Node node)", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "", "return": "Item", "signature": "Item next()", "full_signature": " Item next()", "class_method_signature": "Parser.next()", "testcase": false, "constructor": false}, {"identifier": "peek", "parameters": "()", "modifiers": "private", "return": "Item", "signature": "Item peek()", "full_signature": "private Item peek()", "class_method_signature": "Parser.peek()", "testcase": false, "constructor": false}, {"identifier": "backup", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void backup()", "full_signature": "private void backup()", "class_method_signature": "Parser.backup()", "testcase": false, "constructor": false}, {"identifier": "errorf", "parameters": "(String format, Object... args)", "modifiers": "private", "return": "void", "signature": "void errorf(String format, Object... args)", "full_signature": "private void errorf(String format, Object... args)", "class_method_signature": "Parser.errorf(String format, Object... args)", "testcase": false, "constructor": false}, {"identifier": "error", "parameters": "(String error)", "modifiers": "private", "return": "void", "signature": "void error(String error)", "full_signature": "private void error(String error)", "class_method_signature": "Parser.error(String error)", "testcase": false, "constructor": false}, {"identifier": "expect", "parameters": "(ItemType exp, String context)", "modifiers": "private", "return": "Item", "signature": "Item expect(ItemType exp, String context)", "full_signature": "private Item expect(ItemType exp, String context)", "class_method_signature": "Parser.expect(ItemType exp, String context)", "testcase": false, "constructor": false}, {"identifier": "expectOneOf", "parameters": "(ItemType exp1, ItemType exp2, String context)", "modifiers": "private", "return": "Item", "signature": "Item expectOneOf(ItemType exp1, ItemType exp2, String context)", "full_signature": "private Item expectOneOf(ItemType exp1, ItemType exp2, String context)", "class_method_signature": "Parser.expectOneOf(ItemType exp1, ItemType exp2, String context)", "testcase": false, "constructor": false}, {"identifier": "stmt", "parameters": "()", "modifiers": "private", "return": "Statement", "signature": "Statement stmt()", "full_signature": "private Statement stmt()", "class_method_signature": "Parser.stmt()", "testcase": false, "constructor": false}, {"identifier": "recordStmt", "parameters": "()", "modifiers": "private", "return": "RecordStmt", "signature": "RecordStmt recordStmt()", "full_signature": "private RecordStmt recordStmt()", "class_method_signature": "Parser.recordStmt()", "testcase": false, "constructor": false}, {"identifier": "expr", "parameters": "()", "modifiers": "private", "return": "Expr", "signature": "Expr expr()", "full_signature": "private Expr expr()", "class_method_signature": "Parser.expr()", "testcase": false, "constructor": false}, {"identifier": "balance", "parameters": "(Expr lhs, ItemType op, Expr rhs, VectorMatching vecMatching,\n                               boolean returnBool)", "modifiers": "private", "return": "BinaryExpr", "signature": "BinaryExpr balance(Expr lhs, ItemType op, Expr rhs, VectorMatching vecMatching,\n                               boolean returnBool)", "full_signature": "private BinaryExpr balance(Expr lhs, ItemType op, Expr rhs, VectorMatching vecMatching,\n                               boolean returnBool)", "class_method_signature": "Parser.balance(Expr lhs, ItemType op, Expr rhs, VectorMatching vecMatching,\n                               boolean returnBool)", "testcase": false, "constructor": false}, {"identifier": "unaryExpr", "parameters": "()", "modifiers": "private", "return": "Expr", "signature": "Expr unaryExpr()", "full_signature": "private Expr unaryExpr()", "class_method_signature": "Parser.unaryExpr()", "testcase": false, "constructor": false}, {"identifier": "rangeSelector", "parameters": "(VectorSelector vs)", "modifiers": "private", "return": "MatrixSelector", "signature": "MatrixSelector rangeSelector(VectorSelector vs)", "full_signature": "private MatrixSelector rangeSelector(VectorSelector vs)", "class_method_signature": "Parser.rangeSelector(VectorSelector vs)", "testcase": false, "constructor": false}, {"identifier": "number", "parameters": "(String val)", "modifiers": "", "return": "float", "signature": "float number(String val)", "full_signature": " float number(String val)", "class_method_signature": "Parser.number(String val)", "testcase": false, "constructor": false}, {"identifier": "primaryExpr", "parameters": "()", "modifiers": "private", "return": "Expr", "signature": "Expr primaryExpr()", "full_signature": "private Expr primaryExpr()", "class_method_signature": "Parser.primaryExpr()", "testcase": false, "constructor": false}, {"identifier": "labels", "parameters": "()", "modifiers": "private", "return": "List<String>", "signature": "List<String> labels()", "full_signature": "private List<String> labels()", "class_method_signature": "Parser.labels()", "testcase": false, "constructor": false}, {"identifier": "aggrExpr", "parameters": "()", "modifiers": "private", "return": "AggregateExpr", "signature": "AggregateExpr aggrExpr()", "full_signature": "private AggregateExpr aggrExpr()", "class_method_signature": "Parser.aggrExpr()", "testcase": false, "constructor": false}, {"identifier": "call", "parameters": "(String name)", "modifiers": "", "return": "Call", "signature": "Call call(String name)", "full_signature": " Call call(String name)", "class_method_signature": "Parser.call(String name)", "testcase": false, "constructor": false}, {"identifier": "labelSet", "parameters": "()", "modifiers": "", "return": "Labels", "signature": "Labels labelSet()", "full_signature": " Labels labelSet()", "class_method_signature": "Parser.labelSet()", "testcase": false, "constructor": false}, {"identifier": "labelMatchers", "parameters": "(ItemType... operators)", "modifiers": "", "return": "List<Matcher>", "signature": "List<Matcher> labelMatchers(ItemType... operators)", "full_signature": " List<Matcher> labelMatchers(ItemType... operators)", "class_method_signature": "Parser.labelMatchers(ItemType... operators)", "testcase": false, "constructor": false}, {"identifier": "metric", "parameters": "()", "modifiers": "", "return": "Labels", "signature": "Labels metric()", "full_signature": " Labels metric()", "class_method_signature": "Parser.metric()", "testcase": false, "constructor": false}, {"identifier": "offset", "parameters": "()", "modifiers": "", "return": "Duration", "signature": "Duration offset()", "full_signature": " Duration offset()", "class_method_signature": "Parser.offset()", "testcase": false, "constructor": false}, {"identifier": "vectorSelector", "parameters": "(Parser p, String name)", "modifiers": "static", "return": "VectorSelector", "signature": "VectorSelector vectorSelector(Parser p, String name)", "full_signature": "static VectorSelector vectorSelector(Parser p, String name)", "class_method_signature": "Parser.vectorSelector(Parser p, String name)", "testcase": false, "constructor": false}, {"identifier": "expectType", "parameters": "(Node node, ValueType want, String context)", "modifiers": "", "return": "void", "signature": "void expectType(Node node, ValueType want, String context)", "full_signature": " void expectType(Node node, ValueType want, String context)", "class_method_signature": "Parser.expectType(Node node, ValueType want, String context)", "testcase": false, "constructor": false}, {"identifier": "checkType", "parameters": "(Node node)", "modifiers": "", "return": "ValueType", "signature": "ValueType checkType(Node node)", "full_signature": " ValueType checkType(Node node)", "class_method_signature": "Parser.checkType(Node node)", "testcase": false, "constructor": false}, {"identifier": "typeString", "parameters": "(ValueType t)", "modifiers": "public static", "return": "String", "signature": "String typeString(ValueType t)", "full_signature": "public static String typeString(ValueType t)", "class_method_signature": "Parser.typeString(ValueType t)", "testcase": false, "constructor": false}, {"identifier": "unquoteString", "parameters": "(String s)", "modifiers": "private", "return": "String", "signature": "String unquoteString(String s)", "full_signature": "private String unquoteString(String s)", "class_method_signature": "Parser.unquoteString(String s)", "testcase": false, "constructor": false}, {"identifier": "parseDuration", "parameters": "(String ds)", "modifiers": "public static", "return": "Duration", "signature": "Duration parseDuration(String ds)", "full_signature": "public static Duration parseDuration(String ds)", "class_method_signature": "Parser.parseDuration(String ds)", "testcase": false, "constructor": false}], "file": "server/metrics/promql/src/main/java/com/alipay/sofa/lookout/server/prom/ql/parse/Parser.java"}, "focal_method": {"identifier": "parseExpr", "parameters": "(String input)", "modifiers": "public static", "return": "Expr", "body": "public static Expr parseExpr(String input) {\n        Parser p = newParser(input);\n        Expr expr = p.parseExpr();\n        p.typecheck(expr);\n        return expr;\n    }", "signature": "Expr parseExpr(String input)", "full_signature": "public static Expr parseExpr(String input)", "class_method_signature": "Parser.parseExpr(String input)", "testcase": false, "constructor": false, "invocations": ["newParser", "parseExpr", "typecheck"]}, "repository": {"repo_id": 133381280, "url": "https://github.com/sofastack/sofa-lookout", "language": "Java", "is_fork": false, "fork_count": 113, "stargazer_count": 318, "size": 1394, "license": "licensed"}}