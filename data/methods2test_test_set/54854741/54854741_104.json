{"test_class": {"identifier": "TransactionsServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final CategorizerService categorizerService = mock(CategorizerService.class);", "modifier": "private final", "type": "CategorizerService", "declarator": "categorizerService = mock(CategorizerService.class)", "var_name": "categorizerService"}, {"original_string": "private final TransactionsPersistenceService persistenceService = mock(TransactionsPersistenceService.class);", "modifier": "private final", "type": "TransactionsPersistenceService", "declarator": "persistenceService = mock(TransactionsPersistenceService.class)", "var_name": "persistenceService"}, {"original_string": "private final EntityEventSupport eventSupport = new EntityEventSupport();", "modifier": "private final", "type": "EntityEventSupport", "declarator": "eventSupport = new EntityEventSupport()", "var_name": "eventSupport"}, {"original_string": "private final TransactionsService service = new TransactionsService(persistenceService, categorizerService,\n\t\t\teventSupport);", "modifier": "private final", "type": "TransactionsService", "declarator": "service = new TransactionsService(persistenceService, categorizerService,\n\t\t\teventSupport)", "var_name": "service"}, {"original_string": "private Transactions transactions;", "modifier": "private", "type": "Transactions", "declarator": "transactions", "var_name": "transactions"}], "file": "services/src/test/java/com/greensopinion/finance/services/domain/TransactionsServiceTest.java"}, "test_case": {"identifier": "updateAppliesCategories", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void updateAppliesCategories() {\n\t\tservice.update(transactions);\n\t\tArgumentCaptor<Transactions> transactionsCaptor = ArgumentCaptor.forClass(Transactions.class);\n\t\tverify(persistenceService).save(transactionsCaptor.capture());\n\t\tassertCategorized(transactionsCaptor.getValue());\n\t\tverifyNoMoreInteractions(persistenceService);\n\t}", "signature": "void updateAppliesCategories()", "full_signature": "@Test public void updateAppliesCategories()", "class_method_signature": "TransactionsServiceTest.updateAppliesCategories()", "testcase": true, "constructor": false, "invocations": ["update", "forClass", "save", "verify", "capture", "assertCategorized", "getValue", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "TransactionsService", "superclass": "extends ConfigurationService<Transactions>", "interfaces": "", "fields": [{"original_string": "private final CategorizerService categorizerService;", "modifier": "private final", "type": "CategorizerService", "declarator": "categorizerService", "var_name": "categorizerService"}], "methods": [{"identifier": "TransactionsService", "parameters": "(TransactionsPersistenceService persistenceService, CategorizerService categorizerService,\n\t\t\tEntityEventSupport eventSupport)", "modifiers": "@Inject", "return": "", "signature": " TransactionsService(TransactionsPersistenceService persistenceService, CategorizerService categorizerService,\n\t\t\tEntityEventSupport eventSupport)", "full_signature": "@Inject  TransactionsService(TransactionsPersistenceService persistenceService, CategorizerService categorizerService,\n\t\t\tEntityEventSupport eventSupport)", "class_method_signature": "TransactionsService.TransactionsService(TransactionsPersistenceService persistenceService, CategorizerService categorizerService,\n\t\t\tEntityEventSupport eventSupport)", "testcase": false, "constructor": true}, {"identifier": "load", "parameters": "()", "modifiers": "@Override protected", "return": "Transactions", "signature": "Transactions load()", "full_signature": "@Override protected Transactions load()", "class_method_signature": "TransactionsService.load()", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(Transactions value)", "modifiers": "@Override public", "return": "void", "signature": "void update(Transactions value)", "full_signature": "@Override public void update(Transactions value)", "class_method_signature": "TransactionsService.update(Transactions value)", "testcase": false, "constructor": false}, {"identifier": "applyCategories", "parameters": "(Transactions transactions)", "modifiers": "private", "return": "Transactions", "signature": "Transactions applyCategories(Transactions transactions)", "full_signature": "private Transactions applyCategories(Transactions transactions)", "class_method_signature": "TransactionsService.applyCategories(Transactions transactions)", "testcase": false, "constructor": false}], "file": "services/src/main/java/com/greensopinion/finance/services/domain/TransactionsService.java"}, "focal_method": {"identifier": "update", "parameters": "(Transactions value)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void update(Transactions value) {\n\t\tTransactions newValue = applyCategories(value);\n\t\tsuper.update(newValue);\n\t}", "signature": "void update(Transactions value)", "full_signature": "@Override public void update(Transactions value)", "class_method_signature": "TransactionsService.update(Transactions value)", "testcase": false, "constructor": false, "invocations": ["applyCategories", "update"]}, "repository": {"repo_id": 54854741, "url": "https://github.com/greensopinion/greenbeans", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 30, "size": 1684, "license": "licensed"}}