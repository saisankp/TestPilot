{"test_class": {"identifier": "SlotTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = Logger.getLogger(SlotTest.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "log = Logger.getLogger(SlotTest.class.getName())", "var_name": "log"}, {"original_string": "@Rule\n    public TemporaryFolder temp = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "temp = new TemporaryFolder()", "var_name": "temp"}, {"original_string": "private static final long pointInTime = 1321390697L;", "modifier": "private static final", "type": "long", "declarator": "pointInTime = 1321390697L", "var_name": "pointInTime"}], "file": "log/src/test/java/org/cloudname/log/archiver/SlotTest.java"}, "test_case": {"identifier": "microBenchmark", "parameters": "()", "modifiers": "@Test (timeout = 3000) public", "return": "void", "body": "@Test (timeout = 3000)\n    public void microBenchmark()\n        throws Exception\n    {\n        String prefix = temp.newFolder(\"test4-benchmark\").getAbsolutePath();\n        Slot slot = new Slot(prefix, (100 * 1024 * 1024));\n\n        Timber.LogEvent event = makeLogEvent(0);\n        int numMessages = 100000;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < numMessages; i++) {\n            slot.write(event);\n        }\n        long duration = System.currentTimeMillis() - start;\n        long rate = (numMessages * 1000) / duration;\n\n        log.info(\"Slot microbenchmark: \"+ numMessages + \" in \" + duration + \" ms,\"\n                 + \" rate = \" + rate + \" msg/sec\");\n    }", "signature": "void microBenchmark()", "full_signature": "@Test (timeout = 3000) public void microBenchmark()", "class_method_signature": "SlotTest.microBenchmark()", "testcase": true, "constructor": false, "invocations": ["getAbsolutePath", "newFolder", "makeLogEvent", "currentTimeMillis", "write", "currentTimeMillis", "info"]}, "focal_class": {"identifier": "Slot", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int RESUME_LIMIT_PERCENT = 90;", "modifier": "private static final", "type": "int", "declarator": "RESUME_LIMIT_PERCENT = 90", "var_name": "RESUME_LIMIT_PERCENT"}, {"original_string": "private static final int DEFAULT_OUTPUT_BUFFER_SIZE = 20 * 1024;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_OUTPUT_BUFFER_SIZE = 20 * 1024", "var_name": "DEFAULT_OUTPUT_BUFFER_SIZE"}, {"original_string": "private final String prefix;", "modifier": "private final", "type": "String", "declarator": "prefix", "var_name": "prefix"}, {"original_string": "private final long maxSize;", "modifier": "private final", "type": "long", "declarator": "maxSize", "var_name": "maxSize"}, {"original_string": "private TimeProvider timeProvider;", "modifier": "private", "type": "TimeProvider", "declarator": "timeProvider", "var_name": "timeProvider"}, {"original_string": "private final long resumeLimit;", "modifier": "private final", "type": "long", "declarator": "resumeLimit", "var_name": "resumeLimit"}, {"original_string": "private final int outputBufferSize = DEFAULT_OUTPUT_BUFFER_SIZE;", "modifier": "private final", "type": "int", "declarator": "outputBufferSize = DEFAULT_OUTPUT_BUFFER_SIZE", "var_name": "outputBufferSize"}, {"original_string": "private File currentFile = null;", "modifier": "private", "type": "File", "declarator": "currentFile = null", "var_name": "currentFile"}, {"original_string": "private RecordWriter currentWriter = null;", "modifier": "private", "type": "RecordWriter", "declarator": "currentWriter = null", "var_name": "currentWriter"}, {"original_string": "private boolean closed = false;", "modifier": "private", "type": "boolean", "declarator": "closed = false", "var_name": "closed"}, {"original_string": "private int writeCount = 0;", "modifier": "private", "type": "int", "declarator": "writeCount = 0", "var_name": "writeCount"}, {"original_string": "private long numBytesInFile = 0;", "modifier": "private", "type": "long", "declarator": "numBytesInFile = 0", "var_name": "numBytesInFile"}], "methods": [{"identifier": "Slot", "parameters": "(final String prefix, final long maxSize)", "modifiers": "public", "return": "", "signature": " Slot(final String prefix, final long maxSize)", "full_signature": "public  Slot(final String prefix, final long maxSize)", "class_method_signature": "Slot.Slot(final String prefix, final long maxSize)", "testcase": false, "constructor": true}, {"identifier": "Slot", "parameters": "(final String prefix, final long maxSize, final TimeProvider timeProvider)", "modifiers": "public", "return": "", "signature": " Slot(final String prefix, final long maxSize, final TimeProvider timeProvider)", "full_signature": "public  Slot(final String prefix, final long maxSize, final TimeProvider timeProvider)", "class_method_signature": "Slot.Slot(final String prefix, final long maxSize, final TimeProvider timeProvider)", "testcase": false, "constructor": true}, {"identifier": "nameForTimestamp", "parameters": "(final long timestamp)", "modifiers": "private", "return": "String", "signature": "String nameForTimestamp(final long timestamp)", "full_signature": "private String nameForTimestamp(final long timestamp)", "class_method_signature": "Slot.nameForTimestamp(final long timestamp)", "testcase": false, "constructor": false}, {"identifier": "compressedSlotExists", "parameters": "(final File file)", "modifiers": "private static", "return": "boolean", "signature": "boolean compressedSlotExists(final File file)", "full_signature": "private static boolean compressedSlotExists(final File file)", "class_method_signature": "Slot.compressedSlotExists(final File file)", "testcase": false, "constructor": false}, {"identifier": "findNextSlotFile", "parameters": "()", "modifiers": "private", "return": "File", "signature": "File findNextSlotFile()", "full_signature": "private File findNextSlotFile()", "class_method_signature": "Slot.findNextSlotFile()", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(final Timber.LogEvent event)", "modifiers": "public", "return": "WriteReport", "signature": "WriteReport write(final Timber.LogEvent event)", "full_signature": "public WriteReport write(final Timber.LogEvent event)", "class_method_signature": "Slot.write(final Timber.LogEvent event)", "testcase": false, "constructor": false}, {"identifier": "getNumBytesInFile", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getNumBytesInFile()", "full_signature": "public long getNumBytesInFile()", "class_method_signature": "Slot.getNumBytesInFile()", "testcase": false, "constructor": false}, {"identifier": "closeInternal", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void closeInternal()", "full_signature": "private void closeInternal()", "class_method_signature": "Slot.closeInternal()", "testcase": false, "constructor": false}, {"identifier": "getCurrentSlotFileName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCurrentSlotFileName()", "full_signature": "public String getCurrentSlotFileName()", "class_method_signature": "Slot.getCurrentSlotFileName()", "testcase": false, "constructor": false}, {"identifier": "flush", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void flush()", "full_signature": "public void flush()", "class_method_signature": "Slot.flush()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "Slot.close()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "Slot.toString()", "testcase": false, "constructor": false}], "file": "log/src/main/java/org/cloudname/log/archiver/Slot.java"}, "focal_method": {"identifier": "write", "parameters": "(final Timber.LogEvent event)", "modifiers": "public", "return": "WriteReport", "body": "public WriteReport write(final Timber.LogEvent event) throws IOException {\n        // Ensure that we have a RecordWriter\n        if (null == currentWriter) {\n\n            // Make sure we have not closed this Slot\n            if (closed) {\n                throw new IllegalStateException(\"Slot was closed\");\n            }\n\n            currentFile = findNextSlotFile();\n\n            // Pick up number of bytes in file\n            numBytesInFile = currentFile.length();\n\n            // Note: the FileOutPutStream must have append = true\n            currentWriter = new RecordWriter(\n                new BufferedOutputStream(\n                    new FileOutputStream(currentFile, true),\n                    outputBufferSize));\n            writeCount = 0;\n        }\n\n        final long startOffset = numBytesInFile;\n\n        // Invariant: we have a currentWriter\n        numBytesInFile += currentWriter.write(event);\n        writeCount++;\n\n        // Make return value here to keep currentFile object (removed in closeIntenal()).\n        final WriteReport ret =\n            new WriteReport(currentFile, startOffset, numBytesInFile, writeCount);\n\n        // Check if it is time to finish this file\n        if (numBytesInFile > maxSize) {\n            closeInternal();\n        }\n\n        return ret;\n    }", "signature": "WriteReport write(final Timber.LogEvent event)", "full_signature": "public WriteReport write(final Timber.LogEvent event)", "class_method_signature": "Slot.write(final Timber.LogEvent event)", "testcase": false, "constructor": false, "invocations": ["findNextSlotFile", "length", "write", "closeInternal"]}, "repository": {"repo_id": 2329961, "url": "https://github.com/Cloudname/cloudname", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 21, "size": 26031, "license": "licensed"}}