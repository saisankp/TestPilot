{"test_class": {"identifier": "ExponentiationTest", "superclass": "", "interfaces": "", "fields": [], "file": "pross-common/src/test/java/com/ibm/pross/common/util/ExponentiationTest.java"}, "test_case": {"identifier": "testModPowSecure", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testModPowSecure() {\n\t\tfail(\"Not yet implemented\");\n\t}", "signature": "void testModPowSecure()", "full_signature": "@Test public void testModPowSecure()", "class_method_signature": "ExponentiationTest.testModPowSecure()", "testcase": true, "constructor": false, "invocations": ["fail"]}, "focal_class": {"identifier": "Exponentiation", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final boolean USE_SECURE_MOD_POW = false;", "modifier": "public static final", "type": "boolean", "declarator": "USE_SECURE_MOD_POW = false", "var_name": "USE_SECURE_MOD_POW"}, {"original_string": "public static final boolean GMP_AVAILABLE;", "modifier": "public static final", "type": "boolean", "declarator": "GMP_AVAILABLE", "var_name": "GMP_AVAILABLE"}], "methods": [{"identifier": "canLoadGmp", "parameters": "()", "modifiers": "private static", "return": "boolean", "signature": "boolean canLoadGmp()", "full_signature": "private static boolean canLoadGmp()", "class_method_signature": "Exponentiation.canLoadGmp()", "testcase": false, "constructor": false}, {"identifier": "modPowSecure", "parameters": "(final BigInteger base, final BigInteger exponent,\n\t\t\tfinal BigInteger modulus)", "modifiers": "protected static", "return": "BigInteger", "signature": "BigInteger modPowSecure(final BigInteger base, final BigInteger exponent,\n\t\t\tfinal BigInteger modulus)", "full_signature": "protected static BigInteger modPowSecure(final BigInteger base, final BigInteger exponent,\n\t\t\tfinal BigInteger modulus)", "class_method_signature": "Exponentiation.modPowSecure(final BigInteger base, final BigInteger exponent,\n\t\t\tfinal BigInteger modulus)", "testcase": false, "constructor": false}, {"identifier": "modPowerSecureJava", "parameters": "(final BigInteger base, final BigInteger exponent,\n\t\t\tfinal BigInteger modulus)", "modifiers": "protected static", "return": "BigInteger", "signature": "BigInteger modPowerSecureJava(final BigInteger base, final BigInteger exponent,\n\t\t\tfinal BigInteger modulus)", "full_signature": "protected static BigInteger modPowerSecureJava(final BigInteger base, final BigInteger exponent,\n\t\t\tfinal BigInteger modulus)", "class_method_signature": "Exponentiation.modPowerSecureJava(final BigInteger base, final BigInteger exponent,\n\t\t\tfinal BigInteger modulus)", "testcase": false, "constructor": false}, {"identifier": "modPow", "parameters": "(BigInteger base, BigInteger exponent, BigInteger modulus)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger modPow(BigInteger base, BigInteger exponent, BigInteger modulus)", "full_signature": "public static BigInteger modPow(BigInteger base, BigInteger exponent, BigInteger modulus)", "class_method_signature": "Exponentiation.modPow(BigInteger base, BigInteger exponent, BigInteger modulus)", "testcase": false, "constructor": false}, {"identifier": "modInverse", "parameters": "(final BigInteger a, final BigInteger modulus)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger modInverse(final BigInteger a, final BigInteger modulus)", "full_signature": "public static BigInteger modInverse(final BigInteger a, final BigInteger modulus)", "class_method_signature": "Exponentiation.modInverse(final BigInteger a, final BigInteger modulus)", "testcase": false, "constructor": false}], "file": "pross-common/src/main/java/com/ibm/pross/common/util/Exponentiation.java"}, "focal_method": {"identifier": "modPowSecure", "parameters": "(final BigInteger base, final BigInteger exponent,\n\t\t\tfinal BigInteger modulus)", "modifiers": "protected static", "return": "BigInteger", "body": "protected static BigInteger modPowSecure(final BigInteger base, final BigInteger exponent,\n\t\t\tfinal BigInteger modulus) {\n\t\tif (GMP_AVAILABLE) {\n\t\t\treturn exponent.signum() < 0 // Gmp library can't handle negative exponents\n\t\t\t\t\t? modInverse(Gmp.modPowSecure(base, exponent.negate(), modulus), modulus)\n\t\t\t\t\t: Gmp.modPowSecure(base, exponent, modulus);\n\t\t} else {\n\t\t\t// Generate blinding factor to obfsucate the exponent\n\t\t\treturn modPowerSecureJava(base, exponent, modulus);\n\t\t}\n\t}", "signature": "BigInteger modPowSecure(final BigInteger base, final BigInteger exponent,\n\t\t\tfinal BigInteger modulus)", "full_signature": "protected static BigInteger modPowSecure(final BigInteger base, final BigInteger exponent,\n\t\t\tfinal BigInteger modulus)", "class_method_signature": "Exponentiation.modPowSecure(final BigInteger base, final BigInteger exponent,\n\t\t\tfinal BigInteger modulus)", "testcase": false, "constructor": false, "invocations": ["signum", "modInverse", "modPowSecure", "negate", "modPowSecure", "modPowerSecureJava"]}, "repository": {"repo_id": 144309611, "url": "https://github.com/jasonkresch/protect", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 38, "size": 1932, "license": "licensed"}}