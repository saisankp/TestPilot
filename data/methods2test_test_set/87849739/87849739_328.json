{"test_class": {"identifier": "HttpPushValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ConnectionId CONNECTION_ID = TestConstants.createRandomConnectionId();", "modifier": "private static final", "type": "ConnectionId", "declarator": "CONNECTION_ID = TestConstants.createRandomConnectionId()", "var_name": "CONNECTION_ID"}, {"original_string": "private static Map<String, String> defaultSpecificConfig = new HashMap<>();", "modifier": "private static", "type": "Map<String, String>", "declarator": "defaultSpecificConfig = new HashMap<>()", "var_name": "defaultSpecificConfig"}, {"original_string": "private static ActorSystem actorSystem;", "modifier": "private static", "type": "ActorSystem", "declarator": "actorSystem", "var_name": "actorSystem"}, {"original_string": "private HttpPushValidator underTest;", "modifier": "private", "type": "HttpPushValidator", "declarator": "underTest", "var_name": "underTest"}], "file": "services/connectivity/messaging/src/test/java/org/eclipse/ditto/services/connectivity/messaging/httppush/HttpPushValidatorTest.java"}, "test_case": {"identifier": "testSourcesAreInvalid", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSourcesAreInvalid() {\n        final Source source = ConnectivityModelFactory.newSource(AUTHORIZATION_CONTEXT, \"any\");\n\n        assertThatExceptionOfType(ConnectionConfigurationInvalidException.class)\n                .isThrownBy(() -> underTest.validateSource(source, DittoHeaders.empty(), () -> \"\"));\n    }", "signature": "void testSourcesAreInvalid()", "full_signature": "@Test public void testSourcesAreInvalid()", "class_method_signature": "HttpPushValidatorTest.testSourcesAreInvalid()", "testcase": true, "constructor": false, "invocations": ["newSource", "isThrownBy", "assertThatExceptionOfType", "validateSource", "empty"]}, "focal_class": {"identifier": "HttpPushValidator", "superclass": "extends AbstractProtocolValidator", "interfaces": "", "fields": [{"original_string": "private static final String HTTPS = \"https\";", "modifier": "private static final", "type": "String", "declarator": "HTTPS = \"https\"", "var_name": "HTTPS"}, {"original_string": "private static final String HTTP = \"http\";", "modifier": "private static final", "type": "String", "declarator": "HTTP = \"http\"", "var_name": "HTTP"}, {"original_string": "private static final Collection<String> ACCEPTED_SCHEMES = Collections.unmodifiableList(Arrays.asList(HTTP, HTTPS));", "modifier": "private static final", "type": "Collection<String>", "declarator": "ACCEPTED_SCHEMES = Collections.unmodifiableList(Arrays.asList(HTTP, HTTPS))", "var_name": "ACCEPTED_SCHEMES"}, {"original_string": "private static final Collection<String> SECURE_SCHEMES = Collections.singletonList(HTTPS);", "modifier": "private static final", "type": "Collection<String>", "declarator": "SECURE_SCHEMES = Collections.singletonList(HTTPS)", "var_name": "SECURE_SCHEMES"}, {"original_string": "private static final Collection<HttpMethod> SUPPORTED_METHODS =\n            Collections.unmodifiableList(Arrays.asList(HttpMethods.PUT, HttpMethods.PATCH, HttpMethods.POST));", "modifier": "private static final", "type": "Collection<HttpMethod>", "declarator": "SUPPORTED_METHODS =\n            Collections.unmodifiableList(Arrays.asList(HttpMethods.PUT, HttpMethods.PATCH, HttpMethods.POST))", "var_name": "SUPPORTED_METHODS"}, {"original_string": "private static final String SUPPORTED_METHOD_NAMES = SUPPORTED_METHODS.stream()\n            .map(HttpMethod::name)\n            .collect(Collectors.joining(\", \"));", "modifier": "private static final", "type": "String", "declarator": "SUPPORTED_METHOD_NAMES = SUPPORTED_METHODS.stream()\n            .map(HttpMethod::name)\n            .collect(Collectors.joining(\", \"))", "var_name": "SUPPORTED_METHOD_NAMES"}], "methods": [{"identifier": "newInstance", "parameters": "()", "modifiers": "public static", "return": "HttpPushValidator", "signature": "HttpPushValidator newInstance()", "full_signature": "public static HttpPushValidator newInstance()", "class_method_signature": "HttpPushValidator.newInstance()", "testcase": false, "constructor": false}, {"identifier": "type", "parameters": "()", "modifiers": "@Override public", "return": "ConnectionType", "signature": "ConnectionType type()", "full_signature": "@Override public ConnectionType type()", "class_method_signature": "HttpPushValidator.type()", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(final Connection connection, final DittoHeaders dittoHeaders, final ActorSystem actorSystem)", "modifiers": "@Override public", "return": "void", "signature": "void validate(final Connection connection, final DittoHeaders dittoHeaders, final ActorSystem actorSystem)", "full_signature": "@Override public void validate(final Connection connection, final DittoHeaders dittoHeaders, final ActorSystem actorSystem)", "class_method_signature": "HttpPushValidator.validate(final Connection connection, final DittoHeaders dittoHeaders, final ActorSystem actorSystem)", "testcase": false, "constructor": false}, {"identifier": "validateSource", "parameters": "(final Source source, final DittoHeaders dittoHeaders,\n            final Supplier<String> sourceDescription)", "modifiers": "@Override protected", "return": "void", "signature": "void validateSource(final Source source, final DittoHeaders dittoHeaders,\n            final Supplier<String> sourceDescription)", "full_signature": "@Override protected void validateSource(final Source source, final DittoHeaders dittoHeaders,\n            final Supplier<String> sourceDescription)", "class_method_signature": "HttpPushValidator.validateSource(final Source source, final DittoHeaders dittoHeaders,\n            final Supplier<String> sourceDescription)", "testcase": false, "constructor": false}, {"identifier": "validateTarget", "parameters": "(final Target target, final DittoHeaders dittoHeaders,\n            final Supplier<String> targetDescription)", "modifiers": "@Override protected", "return": "void", "signature": "void validateTarget(final Target target, final DittoHeaders dittoHeaders,\n            final Supplier<String> targetDescription)", "full_signature": "@Override protected void validateTarget(final Target target, final DittoHeaders dittoHeaders,\n            final Supplier<String> targetDescription)", "class_method_signature": "HttpPushValidator.validateTarget(final Target target, final DittoHeaders dittoHeaders,\n            final Supplier<String> targetDescription)", "testcase": false, "constructor": false}, {"identifier": "validateTargetAddress", "parameters": "(final String targetAddress, final DittoHeaders dittoHeaders,\n            final Supplier<String> targetDescription)", "modifiers": "private", "return": "void", "signature": "void validateTargetAddress(final String targetAddress, final DittoHeaders dittoHeaders,\n            final Supplier<String> targetDescription)", "full_signature": "private void validateTargetAddress(final String targetAddress, final DittoHeaders dittoHeaders,\n            final Supplier<String> targetDescription)", "class_method_signature": "HttpPushValidator.validateTargetAddress(final String targetAddress, final DittoHeaders dittoHeaders,\n            final Supplier<String> targetDescription)", "testcase": false, "constructor": false}, {"identifier": "validateHttpMethod", "parameters": "(final String methodName, final DittoHeaders dittoHeaders,\n            final Supplier<String> targetDescriptor)", "modifiers": "private", "return": "void", "signature": "void validateHttpMethod(final String methodName, final DittoHeaders dittoHeaders,\n            final Supplier<String> targetDescriptor)", "full_signature": "private void validateHttpMethod(final String methodName, final DittoHeaders dittoHeaders,\n            final Supplier<String> targetDescriptor)", "class_method_signature": "HttpPushValidator.validateHttpMethod(final String methodName, final DittoHeaders dittoHeaders,\n            final Supplier<String> targetDescriptor)", "testcase": false, "constructor": false}, {"identifier": "validateParallelism", "parameters": "(final Map<String, String> specificConfig, final DittoHeaders dittoHeaders)", "modifiers": "private", "return": "void", "signature": "void validateParallelism(final Map<String, String> specificConfig, final DittoHeaders dittoHeaders)", "full_signature": "private void validateParallelism(final Map<String, String> specificConfig, final DittoHeaders dittoHeaders)", "class_method_signature": "HttpPushValidator.validateParallelism(final Map<String, String> specificConfig, final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "parallelismValidationFailed", "parameters": "(final String parallelismString,\n            final DittoHeaders headers)", "modifiers": "private static", "return": "ConnectionConfigurationInvalidException", "signature": "ConnectionConfigurationInvalidException parallelismValidationFailed(final String parallelismString,\n            final DittoHeaders headers)", "full_signature": "private static ConnectionConfigurationInvalidException parallelismValidationFailed(final String parallelismString,\n            final DittoHeaders headers)", "class_method_signature": "HttpPushValidator.parallelismValidationFailed(final String parallelismString,\n            final DittoHeaders headers)", "testcase": false, "constructor": false}, {"identifier": "isSecureScheme", "parameters": "(final String scheme)", "modifiers": "static", "return": "boolean", "signature": "boolean isSecureScheme(final String scheme)", "full_signature": "static boolean isSecureScheme(final String scheme)", "class_method_signature": "HttpPushValidator.isSecureScheme(final String scheme)", "testcase": false, "constructor": false}], "file": "services/connectivity/messaging/src/main/java/org/eclipse/ditto/services/connectivity/messaging/httppush/HttpPushValidator.java"}, "focal_method": {"identifier": "validateSource", "parameters": "(final Source source, final DittoHeaders dittoHeaders,\n            final Supplier<String> sourceDescription)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n    protected void validateSource(final Source source, final DittoHeaders dittoHeaders,\n            final Supplier<String> sourceDescription) {\n        final String errorMessage =\n                String.format(\"A connection of type '%s' may not have any source.\", type().getName());\n        throw ConnectionConfigurationInvalidException.newBuilder(errorMessage)\n                .dittoHeaders(dittoHeaders)\n                .build();\n    }", "signature": "void validateSource(final Source source, final DittoHeaders dittoHeaders,\n            final Supplier<String> sourceDescription)", "full_signature": "@Override protected void validateSource(final Source source, final DittoHeaders dittoHeaders,\n            final Supplier<String> sourceDescription)", "class_method_signature": "HttpPushValidator.validateSource(final Source source, final DittoHeaders dittoHeaders,\n            final Supplier<String> sourceDescription)", "testcase": false, "constructor": false, "invocations": ["format", "getName", "type", "build", "dittoHeaders", "newBuilder"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}