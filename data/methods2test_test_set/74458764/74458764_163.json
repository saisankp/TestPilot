{"test_class": {"identifier": "TestHttpSessionNotifier", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HttpSessionNotifier notifier;", "modifier": "private", "type": "HttpSessionNotifier", "declarator": "notifier", "var_name": "notifier"}, {"original_string": "private RepositoryBackedSession session;", "modifier": "private", "type": "RepositoryBackedSession", "declarator": "session", "var_name": "session"}, {"original_string": "private ServletContextDescriptor descriptor;", "modifier": "private", "type": "ServletContextDescriptor", "declarator": "descriptor", "var_name": "descriptor"}], "file": "session-replacement/src/test/java/com/amadeus/session/servlet/TestHttpSessionNotifier.java"}, "test_case": {"identifier": "testSessionCreated", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSessionCreated() {\n    HttpSessionListener listener = mock(HttpSessionListener.class);\n    descriptor.addHttpSessionListener(listener);\n    notifier.sessionCreated(session);\n    verify(listener).sessionCreated(any(HttpSessionEvent.class));\n    HttpSessionListener listener2 = mock(HttpSessionListener.class);\n    descriptor.addHttpSessionListener(listener2);\n    notifier.sessionCreated(session);\n    verify(listener, times(2)).sessionCreated(any(HttpSessionEvent.class));\n    verify(listener2).sessionCreated(any(HttpSessionEvent.class));\n  }", "signature": "void testSessionCreated()", "full_signature": "@Test public void testSessionCreated()", "class_method_signature": "TestHttpSessionNotifier.testSessionCreated()", "testcase": true, "constructor": false, "invocations": ["mock", "addHttpSessionListener", "sessionCreated", "sessionCreated", "verify", "any", "mock", "addHttpSessionListener", "sessionCreated", "sessionCreated", "verify", "times", "any", "sessionCreated", "verify", "any"]}, "focal_class": {"identifier": "HttpSessionNotifier", "superclass": "", "interfaces": "implements SessionNotifier", "fields": [{"original_string": "private ServletContextDescriptor descriptor;", "modifier": "private", "type": "ServletContextDescriptor", "declarator": "descriptor", "var_name": "descriptor"}], "methods": [{"identifier": "HttpSessionNotifier", "parameters": "(ServletContextDescriptor descriptor)", "modifiers": "", "return": "", "signature": " HttpSessionNotifier(ServletContextDescriptor descriptor)", "full_signature": "  HttpSessionNotifier(ServletContextDescriptor descriptor)", "class_method_signature": "HttpSessionNotifier.HttpSessionNotifier(ServletContextDescriptor descriptor)", "testcase": false, "constructor": true}, {"identifier": "sessionCreated", "parameters": "(RepositoryBackedSession session)", "modifiers": "@Override public", "return": "void", "signature": "void sessionCreated(RepositoryBackedSession session)", "full_signature": "@Override public void sessionCreated(RepositoryBackedSession session)", "class_method_signature": "HttpSessionNotifier.sessionCreated(RepositoryBackedSession session)", "testcase": false, "constructor": false}, {"identifier": "attributeAdded", "parameters": "(RepositoryBackedSession session, String key, Object value)", "modifiers": "@Override public", "return": "void", "signature": "void attributeAdded(RepositoryBackedSession session, String key, Object value)", "full_signature": "@Override public void attributeAdded(RepositoryBackedSession session, String key, Object value)", "class_method_signature": "HttpSessionNotifier.attributeAdded(RepositoryBackedSession session, String key, Object value)", "testcase": false, "constructor": false}, {"identifier": "attributeReplaced", "parameters": "(RepositoryBackedSession session, String key, Object replacedValue)", "modifiers": "@Override public", "return": "void", "signature": "void attributeReplaced(RepositoryBackedSession session, String key, Object replacedValue)", "full_signature": "@Override public void attributeReplaced(RepositoryBackedSession session, String key, Object replacedValue)", "class_method_signature": "HttpSessionNotifier.attributeReplaced(RepositoryBackedSession session, String key, Object replacedValue)", "testcase": false, "constructor": false}, {"identifier": "attributeRemoved", "parameters": "(RepositoryBackedSession session, String key, Object removedValue)", "modifiers": "@Override public", "return": "void", "signature": "void attributeRemoved(RepositoryBackedSession session, String key, Object removedValue)", "full_signature": "@Override public void attributeRemoved(RepositoryBackedSession session, String key, Object removedValue)", "class_method_signature": "HttpSessionNotifier.attributeRemoved(RepositoryBackedSession session, String key, Object removedValue)", "testcase": false, "constructor": false}, {"identifier": "attributeBeingStored", "parameters": "(RepositoryBackedSession session, String key, Object value)", "modifiers": "@Override public", "return": "void", "signature": "void attributeBeingStored(RepositoryBackedSession session, String key, Object value)", "full_signature": "@Override public void attributeBeingStored(RepositoryBackedSession session, String key, Object value)", "class_method_signature": "HttpSessionNotifier.attributeBeingStored(RepositoryBackedSession session, String key, Object value)", "testcase": false, "constructor": false}, {"identifier": "attributeHasBeenRestored", "parameters": "(RepositoryBackedSession session, String key, Object value)", "modifiers": "@Override public", "return": "void", "signature": "void attributeHasBeenRestored(RepositoryBackedSession session, String key, Object value)", "full_signature": "@Override public void attributeHasBeenRestored(RepositoryBackedSession session, String key, Object value)", "class_method_signature": "HttpSessionNotifier.attributeHasBeenRestored(RepositoryBackedSession session, String key, Object value)", "testcase": false, "constructor": false}, {"identifier": "sessionDestroyed", "parameters": "(RepositoryBackedSession session, boolean shutdown)", "modifiers": "@Override public", "return": "void", "signature": "void sessionDestroyed(RepositoryBackedSession session, boolean shutdown)", "full_signature": "@Override public void sessionDestroyed(RepositoryBackedSession session, boolean shutdown)", "class_method_signature": "HttpSessionNotifier.sessionDestroyed(RepositoryBackedSession session, boolean shutdown)", "testcase": false, "constructor": false}, {"identifier": "sessionIdChanged", "parameters": "(RepositoryBackedSession session, String oldId)", "modifiers": "@Override public", "return": "void", "signature": "void sessionIdChanged(RepositoryBackedSession session, String oldId)", "full_signature": "@Override public void sessionIdChanged(RepositoryBackedSession session, String oldId)", "class_method_signature": "HttpSessionNotifier.sessionIdChanged(RepositoryBackedSession session, String oldId)", "testcase": false, "constructor": false}], "file": "session-replacement/src/main/java/com/amadeus/session/servlet/HttpSessionNotifier.java"}, "focal_method": {"identifier": "sessionCreated", "parameters": "(RepositoryBackedSession session)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void sessionCreated(RepositoryBackedSession session) {\n    if (session instanceof HttpSession) {\n      HttpSessionEvent event = new HttpSessionEvent((HttpSession)session);\n      for (HttpSessionListener listener : descriptor.getHttpSessionListeners()) {\n        listener.sessionCreated(event);\n      }\n    }\n  }", "signature": "void sessionCreated(RepositoryBackedSession session)", "full_signature": "@Override public void sessionCreated(RepositoryBackedSession session)", "class_method_signature": "HttpSessionNotifier.sessionCreated(RepositoryBackedSession session)", "testcase": false, "constructor": false, "invocations": ["getHttpSessionListeners", "sessionCreated"]}, "repository": {"repo_id": 74458764, "url": "https://github.com/AmadeusITGroup/HttpSessionReplacer", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 45, "size": 514, "license": "licensed"}}