{"test_class": {"identifier": "ClassFieldsExcelExportTest", "superclass": "", "interfaces": "", "fields": [], "file": "persistence/src/test/java/org/devgateway/toolkit/persistence/excel/info/ClassFieldsExcelExportTest.java"}, "test_case": {"identifier": "getInheritedFields", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getInheritedFields() throws Exception {\n        final String[] expectedFields = {\"id\", \"label\", \"valid\"};\n\n        final ClassFields classFields = new ClassFieldsExcelExport(\n                new ClassFieldsDefault(TestClassImproved.class, true)\n        );\n        final Iterator<Field> fields = classFields.getFields();\n\n        final List<String> actualFields = new ArrayList<>();\n        while (fields.hasNext()) {\n            final Field f = fields.next();\n            actualFields.add(f.getName());\n        }\n\n        Assert.assertArrayEquals(\"Check declared & inherited @ExcelExport fields\",\n                expectedFields, actualFields.toArray());\n    }", "signature": "void getInheritedFields()", "full_signature": "@Test public void getInheritedFields()", "class_method_signature": "ClassFieldsExcelExportTest.getInheritedFields()", "testcase": true, "constructor": false, "invocations": ["getFields", "hasNext", "next", "add", "getName", "assertArrayEquals", "toArray"]}, "focal_class": {"identifier": "ClassFieldsExcelExport", "superclass": "", "interfaces": "implements ClassFields", "fields": [{"original_string": "private final ClassFields original;", "modifier": "private final", "type": "ClassFields", "declarator": "original", "var_name": "original"}], "methods": [{"identifier": "ClassFieldsExcelExport", "parameters": "(final ClassFields classFields)", "modifiers": "public", "return": "", "signature": " ClassFieldsExcelExport(final ClassFields classFields)", "full_signature": "public  ClassFieldsExcelExport(final ClassFields classFields)", "class_method_signature": "ClassFieldsExcelExport.ClassFieldsExcelExport(final ClassFields classFields)", "testcase": false, "constructor": true}, {"identifier": "getFields", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Field>", "signature": "Iterator<Field> getFields()", "full_signature": "@Override public Iterator<Field> getFields()", "class_method_signature": "ClassFieldsExcelExport.getFields()", "testcase": false, "constructor": false}, {"identifier": "filterByClass", "parameters": "(final Field field)", "modifiers": "private", "return": "boolean", "signature": "boolean filterByClass(final Field field)", "full_signature": "private boolean filterByClass(final Field field)", "class_method_signature": "ClassFieldsExcelExport.filterByClass(final Field field)", "testcase": false, "constructor": false}, {"identifier": "getClazz", "parameters": "()", "modifiers": "@Override public", "return": "Class", "signature": "Class getClazz()", "full_signature": "@Override public Class getClazz()", "class_method_signature": "ClassFieldsExcelExport.getClazz()", "testcase": false, "constructor": false}], "file": "persistence/src/main/java/org/devgateway/toolkit/persistence/excel/info/ClassFieldsExcelExport.java"}, "focal_method": {"identifier": "getFields", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Field>", "body": "@Override\n    public Iterator<Field> getFields() {\n        final Iterable<Field> originalFields = () -> this.original.getFields();\n\n        // return only classes that are annotated with @ExcelExport\n        final Iterator<Field> fields = StreamSupport.stream(originalFields.spliterator(), false)\n                .filter(field -> field.getAnnotation(ExcelExport.class) != null)\n                .filter(this::filterByClass)\n                .iterator();\n\n        return fields;\n    }", "signature": "Iterator<Field> getFields()", "full_signature": "@Override public Iterator<Field> getFields()", "class_method_signature": "ClassFieldsExcelExport.getFields()", "testcase": false, "constructor": false, "invocations": ["getFields", "iterator", "filter", "filter", "stream", "spliterator", "getAnnotation"]}, "repository": {"repo_id": 59118773, "url": "https://github.com/devgateway/oc-explorer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 9004, "license": "licensed"}}