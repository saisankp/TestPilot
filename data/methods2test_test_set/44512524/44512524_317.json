{"test_class": {"identifier": "MetricsUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "storm/storm-benchmark/src/test/java/storm/benchmark/util/MetricsUtilsTest.java"}, "test_case": {"identifier": "testGetTopologySummary", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetTopologySummary() {\n    ClusterSummary cs = mock(ClusterSummary.class);\n    TopologySummary ts = mock(TopologySummary.class);\n    String tsName = \"benchmarks\";\n    String fakeName = \"fake\";\n\n    when(cs.get_topologies()).thenReturn(Lists.newArrayList(ts));\n    when(ts.get_name()).thenReturn(tsName);\n\n    assertThat(MetricsUtils.getTopologySummary(cs, tsName)).isEqualTo(ts);\n    assertThat(MetricsUtils.getTopologySummary(cs, fakeName)).isNull();\n  }", "signature": "void testGetTopologySummary()", "full_signature": "@Test public void testGetTopologySummary()", "class_method_signature": "MetricsUtilsTest.testGetTopologySummary()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "get_topologies", "newArrayList", "thenReturn", "when", "get_name", "isEqualTo", "assertThat", "getTopologySummary", "isNull", "assertThat", "getTopologySummary"]}, "focal_class": {"identifier": "MetricsUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int MB = 1000 * 1000;", "modifier": "private static final", "type": "int", "declarator": "MB = 1000 * 1000", "var_name": "MB"}], "methods": [{"identifier": "MetricsUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " MetricsUtils()", "full_signature": "private  MetricsUtils()", "class_method_signature": "MetricsUtils.MetricsUtils()", "testcase": false, "constructor": true}, {"identifier": "addLatency", "parameters": "(Map<String, List<Double>> stats, String id, double lat)", "modifiers": "public static", "return": "void", "signature": "void addLatency(Map<String, List<Double>> stats, String id, double lat)", "full_signature": "public static void addLatency(Map<String, List<Double>> stats, String id, double lat)", "class_method_signature": "MetricsUtils.addLatency(Map<String, List<Double>> stats, String id, double lat)", "testcase": false, "constructor": false}, {"identifier": "getTopologySummary", "parameters": "(ClusterSummary cs, String name)", "modifiers": "public static", "return": "TopologySummary", "signature": "TopologySummary getTopologySummary(ClusterSummary cs, String name)", "full_signature": "public static TopologySummary getTopologySummary(ClusterSummary cs, String name)", "class_method_signature": "MetricsUtils.getTopologySummary(ClusterSummary cs, String name)", "testcase": false, "constructor": false}, {"identifier": "getSpoutCompleteLatency", "parameters": "(SpoutStats stats, String window, String stream)", "modifiers": "public static", "return": "double", "signature": "double getSpoutCompleteLatency(SpoutStats stats, String window, String stream)", "full_signature": "public static double getSpoutCompleteLatency(SpoutStats stats, String window, String stream)", "class_method_signature": "MetricsUtils.getSpoutCompleteLatency(SpoutStats stats, String window, String stream)", "testcase": false, "constructor": false}, {"identifier": "getSpoutAcked", "parameters": "(SpoutStats stats, String window, String stream)", "modifiers": "public static", "return": "long", "signature": "long getSpoutAcked(SpoutStats stats, String window, String stream)", "full_signature": "public static long getSpoutAcked(SpoutStats stats, String window, String stream)", "class_method_signature": "MetricsUtils.getSpoutAcked(SpoutStats stats, String window, String stream)", "testcase": false, "constructor": false}, {"identifier": "getTransferred", "parameters": "(ExecutorStats stats, String window, String stream)", "modifiers": "public static", "return": "long", "signature": "long getTransferred(ExecutorStats stats, String window, String stream)", "full_signature": "public static long getTransferred(ExecutorStats stats, String window, String stream)", "class_method_signature": "MetricsUtils.getTransferred(ExecutorStats stats, String window, String stream)", "testcase": false, "constructor": false}, {"identifier": "getThroughput", "parameters": "(double throughputDiff, long timeDiff)", "modifiers": "public static", "return": "double", "signature": "double getThroughput(double throughputDiff, long timeDiff)", "full_signature": "public static double getThroughput(double throughputDiff, long timeDiff)", "class_method_signature": "MetricsUtils.getThroughput(double throughputDiff, long timeDiff)", "testcase": false, "constructor": false}, {"identifier": "getThroughputMB", "parameters": "(double throughputDiff, long timeDiff, int msgSize)", "modifiers": "public static", "return": "double", "signature": "double getThroughputMB(double throughputDiff, long timeDiff, int msgSize)", "full_signature": "public static double getThroughputMB(double throughputDiff, long timeDiff, int msgSize)", "class_method_signature": "MetricsUtils.getThroughputMB(double throughputDiff, long timeDiff, int msgSize)", "testcase": false, "constructor": false}], "file": "storm/storm-benchmark/src/main/java/storm/benchmark/util/MetricsUtils.java"}, "focal_method": {"identifier": "getTopologySummary", "parameters": "(ClusterSummary cs, String name)", "modifiers": "public static", "return": "TopologySummary", "body": "public static TopologySummary getTopologySummary(ClusterSummary cs, String name) {\n    for (TopologySummary ts : cs.get_topologies()) {\n      if (name.equals(ts.get_name())) {\n        return ts;\n      }\n    }\n    return null;\n  }", "signature": "TopologySummary getTopologySummary(ClusterSummary cs, String name)", "full_signature": "public static TopologySummary getTopologySummary(ClusterSummary cs, String name)", "class_method_signature": "MetricsUtils.getTopologySummary(ClusterSummary cs, String name)", "testcase": false, "constructor": false, "invocations": ["get_topologies", "equals", "get_name"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}