{"test_class": {"identifier": "AbstractDaoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String PRINCIPAL_FIXTURE = \"fixture\";", "modifier": "public static final", "type": "String", "declarator": "PRINCIPAL_FIXTURE = \"fixture\"", "var_name": "PRINCIPAL_FIXTURE"}, {"original_string": "public static final String PRINCIPAL_SET_UP = \"setUp\";", "modifier": "public static final", "type": "String", "declarator": "PRINCIPAL_SET_UP = \"setUp\"", "var_name": "PRINCIPAL_SET_UP"}, {"original_string": "protected DUserDaoBean userDao;", "modifier": "protected", "type": "DUserDaoBean", "declarator": "userDao", "var_name": "userDao"}, {"original_string": "protected DFactoryDaoBean factoryDao;", "modifier": "protected", "type": "DFactoryDaoBean", "declarator": "factoryDao", "var_name": "factoryDao"}, {"original_string": "protected Supplier supplier;", "modifier": "protected", "type": "Supplier", "declarator": "supplier", "var_name": "supplier"}], "file": "mardao-core/src/test/java/net/sf/mardao/dao/AbstractDaoTest.java"}, "test_case": {"identifier": "testQueryByField", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testQueryByField() throws IOException {\n      createQueryFixtures();\n\n      Iterable<DUser> users = userDao.queryByDisplayName(\"mod7_2\");\n      int count = 0;\n      for (DUser u : users) {\n        count++;\n        assertEquals(\"mod7_2\", u.getDisplayName());\n        assertEquals(2, u.getId() % 7);\n      }\n      assertEquals(9, count);\n\n      users = userDao.queryByDisplayName(null);\n      assertFalse(users.iterator().hasNext());\n  }", "signature": "void testQueryByField()", "full_signature": "@Test public void testQueryByField()", "class_method_signature": "AbstractDaoTest.testQueryByField()", "testcase": true, "constructor": false, "invocations": ["createQueryFixtures", "queryByDisplayName", "assertEquals", "getDisplayName", "assertEquals", "getId", "assertEquals", "queryByDisplayName", "assertFalse", "hasNext", "iterator"]}, "focal_class": {"identifier": "AbstractDao", "superclass": "", "interfaces": "implements CrudDao<T, ID>", "fields": [{"original_string": "private static final ThreadLocal<String> principalName = new ThreadLocal<String>();", "modifier": "private static final", "type": "ThreadLocal<String>", "declarator": "principalName = new ThreadLocal<String>()", "var_name": "principalName"}, {"original_string": "private static final ThreadLocal<Stack<Object>> TRANSACTION_STACKS = new ThreadLocal<Stack<Object>>();", "modifier": "private static final", "type": "ThreadLocal<Stack<Object>>", "declarator": "TRANSACTION_STACKS = new ThreadLocal<Stack<Object>>()", "var_name": "TRANSACTION_STACKS"}, {"original_string": "private final Mapper<T, ID> mapper;", "modifier": "private final", "type": "Mapper<T, ID>", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "private final Supplier<Object, Object, Object, Object> supplier;", "modifier": "private final", "type": "Supplier<Object, Object, Object, Object>", "declarator": "supplier", "var_name": "supplier"}], "methods": [{"identifier": "AbstractDao", "parameters": "(Mapper<T, ID> mapper, Supplier<Object, Object, Object, Object> supplier)", "modifiers": "protected", "return": "", "signature": " AbstractDao(Mapper<T, ID> mapper, Supplier<Object, Object, Object, Object> supplier)", "full_signature": "protected  AbstractDao(Mapper<T, ID> mapper, Supplier<Object, Object, Object, Object> supplier)", "class_method_signature": "AbstractDao.AbstractDao(Mapper<T, ID> mapper, Supplier<Object, Object, Object, Object> supplier)", "testcase": false, "constructor": true}, {"identifier": "withCommitTransaction", "parameters": "(TransFunc<R> transFunc)", "modifiers": "public", "return": "R", "signature": "R withCommitTransaction(TransFunc<R> transFunc)", "full_signature": "public R withCommitTransaction(TransFunc<R> transFunc)", "class_method_signature": "AbstractDao.withCommitTransaction(TransFunc<R> transFunc)", "testcase": false, "constructor": false}, {"identifier": "withRollbackTransaction", "parameters": "(TransFunc<R> transFunc)", "modifiers": "public", "return": "R", "signature": "R withRollbackTransaction(TransFunc<R> transFunc)", "full_signature": "public R withRollbackTransaction(TransFunc<R> transFunc)", "class_method_signature": "AbstractDao.withRollbackTransaction(TransFunc<R> transFunc)", "testcase": false, "constructor": false}, {"identifier": "withTransaction", "parameters": "(TransFunc<R> transFunc, boolean commit)", "modifiers": "public", "return": "R", "signature": "R withTransaction(TransFunc<R> transFunc, boolean commit)", "full_signature": "public R withTransaction(TransFunc<R> transFunc, boolean commit)", "class_method_signature": "AbstractDao.withTransaction(TransFunc<R> transFunc, boolean commit)", "testcase": false, "constructor": false}, {"identifier": "withTransaction", "parameters": "(TransFunc<R> transFunc, boolean commit, Supplier<Object, Object, Object, Object> supplier)", "modifiers": "public static", "return": "R", "signature": "R withTransaction(TransFunc<R> transFunc, boolean commit, Supplier<Object, Object, Object, Object> supplier)", "full_signature": "public static R withTransaction(TransFunc<R> transFunc, boolean commit, Supplier<Object, Object, Object, Object> supplier)", "class_method_signature": "AbstractDao.withTransaction(TransFunc<R> transFunc, boolean commit, Supplier<Object, Object, Object, Object> supplier)", "testcase": false, "constructor": false}, {"identifier": "pushTransaction", "parameters": "(final Object transaction)", "modifiers": "private static", "return": "void", "signature": "void pushTransaction(final Object transaction)", "full_signature": "private static void pushTransaction(final Object transaction)", "class_method_signature": "AbstractDao.pushTransaction(final Object transaction)", "testcase": false, "constructor": false}, {"identifier": "popTransaction", "parameters": "(final Object transaction)", "modifiers": "private static", "return": "void", "signature": "void popTransaction(final Object transaction)", "full_signature": "private static void popTransaction(final Object transaction)", "class_method_signature": "AbstractDao.popTransaction(final Object transaction)", "testcase": false, "constructor": false}, {"identifier": "getCurrentTransaction", "parameters": "()", "modifiers": "private static", "return": "Object", "signature": "Object getCurrentTransaction()", "full_signature": "private static Object getCurrentTransaction()", "class_method_signature": "AbstractDao.getCurrentTransaction()", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int count()", "full_signature": "public int count()", "class_method_signature": "AbstractDao.count()", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "(Object parentKey)", "modifiers": "@Override public", "return": "int", "signature": "int count(Object parentKey)", "full_signature": "@Override public int count(Object parentKey)", "class_method_signature": "AbstractDao.count(Object parentKey)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(ID id)", "modifiers": "public", "return": "void", "signature": "void delete(ID id)", "full_signature": "public void delete(ID id)", "class_method_signature": "AbstractDao.delete(ID id)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(Object parentKey, ID id)", "modifiers": "@Override public", "return": "void", "signature": "void delete(Object parentKey, ID id)", "full_signature": "@Override public void delete(Object parentKey, ID id)", "class_method_signature": "AbstractDao.delete(Object parentKey, ID id)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(Iterable<ID> ids)", "modifiers": "public", "return": "void", "signature": "void delete(Iterable<ID> ids)", "full_signature": "public void delete(Iterable<ID> ids)", "class_method_signature": "AbstractDao.delete(Iterable<ID> ids)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(ID id)", "modifiers": "public", "return": "T", "signature": "T get(ID id)", "full_signature": "public T get(ID id)", "class_method_signature": "AbstractDao.get(ID id)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Object parentKey, ID id)", "modifiers": "@Override public", "return": "T", "signature": "T get(Object parentKey, ID id)", "full_signature": "@Override public T get(Object parentKey, ID id)", "class_method_signature": "AbstractDao.get(Object parentKey, ID id)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(Object parentKey, ID id, T entity)", "modifiers": "@Override public", "return": "ID", "signature": "ID put(Object parentKey, ID id, T entity)", "full_signature": "@Override public ID put(Object parentKey, ID id, T entity)", "class_method_signature": "AbstractDao.put(Object parentKey, ID id, T entity)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(T entity)", "modifiers": "public", "return": "ID", "signature": "ID put(T entity)", "full_signature": "public ID put(T entity)", "class_method_signature": "AbstractDao.put(T entity)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(Object parentKey, ID id, T entity)", "modifiers": "@Override public", "return": "ID", "signature": "ID insert(Object parentKey, ID id, T entity)", "full_signature": "@Override public ID insert(Object parentKey, ID id, T entity)", "class_method_signature": "AbstractDao.insert(Object parentKey, ID id, T entity)", "testcase": false, "constructor": false}, {"identifier": "queryByField", "parameters": "(Object ancestorKey, String fieldName, Object fieldValue)", "modifiers": "protected", "return": "Iterable<T>", "signature": "Iterable<T> queryByField(Object ancestorKey, String fieldName, Object fieldValue)", "full_signature": "protected Iterable<T> queryByField(Object ancestorKey, String fieldName, Object fieldValue)", "class_method_signature": "AbstractDao.queryByField(Object ancestorKey, String fieldName, Object fieldValue)", "testcase": false, "constructor": false}, {"identifier": "queryUniqueByField", "parameters": "(Object parentKey, String fieldName, Object fieldValue)", "modifiers": "protected", "return": "T", "signature": "T queryUniqueByField(Object parentKey, String fieldName, Object fieldValue)", "full_signature": "protected T queryUniqueByField(Object parentKey, String fieldName, Object fieldValue)", "class_method_signature": "AbstractDao.queryUniqueByField(Object parentKey, String fieldName, Object fieldValue)", "testcase": false, "constructor": false}, {"identifier": "queryPage", "parameters": "(int requestedPageSize, String cursorString)", "modifiers": "public", "return": "CursorPage<T>", "signature": "CursorPage<T> queryPage(int requestedPageSize, String cursorString)", "full_signature": "public CursorPage<T> queryPage(int requestedPageSize, String cursorString)", "class_method_signature": "AbstractDao.queryPage(int requestedPageSize, String cursorString)", "testcase": false, "constructor": false}, {"identifier": "queryPageByField", "parameters": "(Object parentKey, String fieldName, Object fieldValue, int requestedPageSize, String cursorString)", "modifiers": "protected", "return": "CursorPage<T>", "signature": "CursorPage<T> queryPageByField(Object parentKey, String fieldName, Object fieldValue, int requestedPageSize, String cursorString)", "full_signature": "protected CursorPage<T> queryPageByField(Object parentKey, String fieldName, Object fieldValue, int requestedPageSize, String cursorString)", "class_method_signature": "AbstractDao.queryPageByField(Object parentKey, String fieldName, Object fieldValue, int requestedPageSize, String cursorString)", "testcase": false, "constructor": false}, {"identifier": "queryPage", "parameters": "(Object ancestorKey, int requestedPageSize, String cursorString)", "modifiers": "@Override public", "return": "CursorPage<T>", "signature": "CursorPage<T> queryPage(Object ancestorKey, int requestedPageSize, String cursorString)", "full_signature": "@Override public CursorPage<T> queryPage(Object ancestorKey, int requestedPageSize, String cursorString)", "class_method_signature": "AbstractDao.queryPage(Object ancestorKey, int requestedPageSize, String cursorString)", "testcase": false, "constructor": false}, {"identifier": "queryPage", "parameters": "(boolean keysOnly, int requestedPageSize, Object ancestorKey,\n                          String primaryOrderBy, boolean primaryIsAscending,\n                          String secondaryOrderBy, boolean secondaryIsAscending,\n                          Collection<String> projections,\n                          String cursorString,\n                          Filter... filters)", "modifiers": "protected", "return": "CursorPage<T>", "signature": "CursorPage<T> queryPage(boolean keysOnly, int requestedPageSize, Object ancestorKey,\n                          String primaryOrderBy, boolean primaryIsAscending,\n                          String secondaryOrderBy, boolean secondaryIsAscending,\n                          Collection<String> projections,\n                          String cursorString,\n                          Filter... filters)", "full_signature": "protected CursorPage<T> queryPage(boolean keysOnly, int requestedPageSize, Object ancestorKey,\n                          String primaryOrderBy, boolean primaryIsAscending,\n                          String secondaryOrderBy, boolean secondaryIsAscending,\n                          Collection<String> projections,\n                          String cursorString,\n                          Filter... filters)", "class_method_signature": "AbstractDao.queryPage(boolean keysOnly, int requestedPageSize, Object ancestorKey,\n                          String primaryOrderBy, boolean primaryIsAscending,\n                          String secondaryOrderBy, boolean secondaryIsAscending,\n                          Collection<String> projections,\n                          String cursorString,\n                          Filter... filters)", "testcase": false, "constructor": false}, {"identifier": "queryIterable", "parameters": "(boolean keysOnly, int offset, int limit, Object ancestorKey,\n                                      String primaryOrderBy, boolean primaryIsAscending,\n                                      String secondaryOrderBy, boolean secondaryIsAscending,\n                                      Filter... filters)", "modifiers": "protected", "return": "Iterable<T>", "signature": "Iterable<T> queryIterable(boolean keysOnly, int offset, int limit, Object ancestorKey,\n                                      String primaryOrderBy, boolean primaryIsAscending,\n                                      String secondaryOrderBy, boolean secondaryIsAscending,\n                                      Filter... filters)", "full_signature": "protected Iterable<T> queryIterable(boolean keysOnly, int offset, int limit, Object ancestorKey,\n                                      String primaryOrderBy, boolean primaryIsAscending,\n                                      String secondaryOrderBy, boolean secondaryIsAscending,\n                                      Filter... filters)", "class_method_signature": "AbstractDao.queryIterable(boolean keysOnly, int offset, int limit, Object ancestorKey,\n                                      String primaryOrderBy, boolean primaryIsAscending,\n                                      String secondaryOrderBy, boolean secondaryIsAscending,\n                                      Filter... filters)", "testcase": false, "constructor": false}, {"identifier": "getAsync", "parameters": "(Object parentKey, ID id)", "modifiers": "public", "return": "Future<T>", "signature": "Future<T> getAsync(Object parentKey, ID id)", "full_signature": "public Future<T> getAsync(Object parentKey, ID id)", "class_method_signature": "AbstractDao.getAsync(Object parentKey, ID id)", "testcase": false, "constructor": false}, {"identifier": "putAsync", "parameters": "(T entity)", "modifiers": "public", "return": "Future<ID>", "signature": "Future<ID> putAsync(T entity)", "full_signature": "public Future<ID> putAsync(T entity)", "class_method_signature": "AbstractDao.putAsync(T entity)", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "(Object key)", "modifiers": "public", "return": "ID", "signature": "ID getId(Object key)", "full_signature": "public ID getId(Object key)", "class_method_signature": "AbstractDao.getId(Object key)", "testcase": false, "constructor": false}, {"identifier": "getKey", "parameters": "(ID id)", "modifiers": "public", "return": "Object", "signature": "Object getKey(ID id)", "full_signature": "public Object getKey(ID id)", "class_method_signature": "AbstractDao.getKey(ID id)", "testcase": false, "constructor": false}, {"identifier": "getKey", "parameters": "(Object parentKey, ID id)", "modifiers": "public", "return": "Object", "signature": "Object getKey(Object parentKey, ID id)", "full_signature": "public Object getKey(Object parentKey, ID id)", "class_method_signature": "AbstractDao.getKey(Object parentKey, ID id)", "testcase": false, "constructor": false}, {"identifier": "getKind", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getKind()", "full_signature": "public String getKind()", "class_method_signature": "AbstractDao.getKind()", "testcase": false, "constructor": false}, {"identifier": "setParentKey", "parameters": "(T entity, Object parentKey)", "modifiers": "public", "return": "void", "signature": "void setParentKey(T entity, Object parentKey)", "full_signature": "public void setParentKey(T entity, Object parentKey)", "class_method_signature": "AbstractDao.setParentKey(T entity, Object parentKey)", "testcase": false, "constructor": false}, {"identifier": "setPrincipalName", "parameters": "(String name)", "modifiers": "public static", "return": "void", "signature": "void setPrincipalName(String name)", "full_signature": "public static void setPrincipalName(String name)", "class_method_signature": "AbstractDao.setPrincipalName(String name)", "testcase": false, "constructor": false}, {"identifier": "updateAuditInfo", "parameters": "(final Object value)", "modifiers": "private", "return": "void", "signature": "void updateAuditInfo(final Object value)", "full_signature": "private void updateAuditInfo(final Object value)", "class_method_signature": "AbstractDao.updateAuditInfo(final Object value)", "testcase": false, "constructor": false}, {"identifier": "updateAuditInfo", "parameters": "(final Object value, final String principalName, final Date date,\n                               final String createdByColumnName, final String createdDateColumnName,\n                               final String updatedByColumnName, final String updatedDateColumnName)", "modifiers": "protected", "return": "void", "signature": "void updateAuditInfo(final Object value, final String principalName, final Date date,\n                               final String createdByColumnName, final String createdDateColumnName,\n                               final String updatedByColumnName, final String updatedDateColumnName)", "full_signature": "protected void updateAuditInfo(final Object value, final String principalName, final Date date,\n                               final String createdByColumnName, final String createdDateColumnName,\n                               final String updatedByColumnName, final String updatedDateColumnName)", "class_method_signature": "AbstractDao.updateAuditInfo(final Object value, final String principalName, final Date date,\n                               final String createdByColumnName, final String createdDateColumnName,\n                               final String updatedByColumnName, final String updatedDateColumnName)", "testcase": false, "constructor": false}], "file": "mardao-core/src/main/java/net/sf/mardao/dao/AbstractDao.java"}, "focal_method": {"identifier": "queryByField", "parameters": "(Object ancestorKey, String fieldName, Object fieldValue)", "modifiers": "protected", "return": "Iterable<T>", "body": "protected Iterable<T> queryByField(Object ancestorKey, String fieldName, Object fieldValue) {\n    Iterable values = supplier.queryIterable(getCurrentTransaction(), mapper, false, 0, -1,\n      ancestorKey, null,\n      null, false, null, false,\n      Filter.equalsFilter(fieldName, fieldValue));\n    return new MappingIterable<T, ID>(mapper, values.iterator());\n  }", "signature": "Iterable<T> queryByField(Object ancestorKey, String fieldName, Object fieldValue)", "full_signature": "protected Iterable<T> queryByField(Object ancestorKey, String fieldName, Object fieldValue)", "class_method_signature": "AbstractDao.queryByField(Object ancestorKey, String fieldName, Object fieldValue)", "testcase": false, "constructor": false, "invocations": ["queryIterable", "getCurrentTransaction", "equalsFilter", "iterator"]}, "repository": {"repo_id": 5734199, "url": "https://github.com/sosandstrom/mardao", "language": "Java", "is_fork": false, "fork_count": 16, "stargazer_count": 18, "size": 3906, "license": "licensed"}}