{"test_class": {"identifier": "ImageUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String sep = File.separator;", "modifier": "private final", "type": "String", "declarator": "sep = File.separator", "var_name": "sep"}, {"original_string": "private final String localDataFolder =\n        System.getProperty(\"user.dir\") + sep\n            + \"src\" + sep\n            + \"test\" + sep\n            + \"resources\" + sep\n            + \"data\" + sep\n            + \"biboule\" + sep\n            + \"images\";", "modifier": "private final", "type": "String", "declarator": "localDataFolder =\n        System.getProperty(\"user.dir\") + sep\n            + \"src\" + sep\n            + \"test\" + sep\n            + \"resources\" + sep\n            + \"data\" + sep\n            + \"biboule\" + sep\n            + \"images\"", "var_name": "localDataFolder"}], "file": "gazeplay-commons/src/test/java/net/gazeplay/commons/utils/games/ImageUtilsTest.java"}, "test_case": {"identifier": "canCreateAnImageLibraryFromADirectory", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void canCreateAnImageLibraryFromADirectory() {\n        final ImageLibrary library = ImageUtils.createImageLibrary(new File(localDataFolder));\n        assert (library.getImagesCount() == 1);\n    }", "signature": "void canCreateAnImageLibraryFromADirectory()", "full_signature": "@Test void canCreateAnImageLibraryFromADirectory()", "class_method_signature": "ImageUtilsTest.canCreateAnImageLibraryFromADirectory()", "testcase": true, "constructor": false, "invocations": ["createImageLibrary", "getImagesCount"]}, "focal_class": {"identifier": "ImageUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Set<String> supportedFilesExtensions = Collections\n        .unmodifiableSet(Sets.newHashSet(\"jpg\", \"jpeg\", \"png\", \"gif\", \"bmp\", \"wbmp\"));", "modifier": "static final", "type": "Set<String>", "declarator": "supportedFilesExtensions = Collections\n        .unmodifiableSet(Sets.newHashSet(\"jpg\", \"jpeg\", \"png\", \"gif\", \"bmp\", \"wbmp\"))", "var_name": "supportedFilesExtensions"}], "methods": [{"identifier": "createImageLibrary", "parameters": "(final File directoryFile)", "modifiers": "public static", "return": "ImageLibrary", "signature": "ImageLibrary createImageLibrary(final File directoryFile)", "full_signature": "public static ImageLibrary createImageLibrary(final File directoryFile)", "class_method_signature": "ImageUtils.createImageLibrary(final File directoryFile)", "testcase": false, "constructor": false}, {"identifier": "createImageLibrary", "parameters": "(final File directoryFile, final File defaultDirectoryFile)", "modifiers": "public static", "return": "ImageLibrary", "signature": "ImageLibrary createImageLibrary(final File directoryFile, final File defaultDirectoryFile)", "full_signature": "public static ImageLibrary createImageLibrary(final File directoryFile, final File defaultDirectoryFile)", "class_method_signature": "ImageUtils.createImageLibrary(final File directoryFile, final File defaultDirectoryFile)", "testcase": false, "constructor": false}, {"identifier": "createDefaultImageLibrary", "parameters": "(final ImageLibrary fallbackImageLibrary)", "modifiers": "public static", "return": "ImageLibrary", "signature": "ImageLibrary createDefaultImageLibrary(final ImageLibrary fallbackImageLibrary)", "full_signature": "public static ImageLibrary createDefaultImageLibrary(final ImageLibrary fallbackImageLibrary)", "class_method_signature": "ImageUtils.createDefaultImageLibrary(final ImageLibrary fallbackImageLibrary)", "testcase": false, "constructor": false}, {"identifier": "createCustomizedImageLibrary", "parameters": "(final ImageLibrary fallbackImageLibrary, final String path)", "modifiers": "public static", "return": "ImageLibrary", "signature": "ImageLibrary createCustomizedImageLibrary(final ImageLibrary fallbackImageLibrary, final String path)", "full_signature": "public static ImageLibrary createCustomizedImageLibrary(final ImageLibrary fallbackImageLibrary, final String path)", "class_method_signature": "ImageUtils.createCustomizedImageLibrary(final ImageLibrary fallbackImageLibrary, final String path)", "testcase": false, "constructor": false}, {"identifier": "loadAllImages", "parameters": "(final File directoryFile)", "modifiers": "@Deprecated public static", "return": "List<Image>", "signature": "List<Image> loadAllImages(final File directoryFile)", "full_signature": "@Deprecated public static List<Image> loadAllImages(final File directoryFile)", "class_method_signature": "ImageUtils.loadAllImages(final File directoryFile)", "testcase": false, "constructor": false}, {"identifier": "listImageFiles", "parameters": "(final File directoryFile)", "modifiers": "public static", "return": "List<File>", "signature": "List<File> listImageFiles(final File directoryFile)", "full_signature": "public static List<File> listImageFiles(final File directoryFile)", "class_method_signature": "ImageUtils.listImageFiles(final File directoryFile)", "testcase": false, "constructor": false}, {"identifier": "loadAllAsImages", "parameters": "(final List<File> imageFiles)", "modifiers": "public static", "return": "List<Image>", "signature": "List<Image> loadAllAsImages(final List<File> imageFiles)", "full_signature": "public static List<Image> loadAllAsImages(final List<File> imageFiles)", "class_method_signature": "ImageUtils.loadAllAsImages(final List<File> imageFiles)", "testcase": false, "constructor": false}, {"identifier": "loadImage", "parameters": "(final File file)", "modifiers": "public static", "return": "Image", "signature": "Image loadImage(final File file)", "full_signature": "public static Image loadImage(final File file)", "class_method_signature": "ImageUtils.loadImage(final File file)", "testcase": false, "constructor": false}, {"identifier": "loadImage", "parameters": "(final String resource)", "modifiers": "public static", "return": "Image", "signature": "Image loadImage(final String resource)", "full_signature": "public static Image loadImage(final String resource)", "class_method_signature": "ImageUtils.loadImage(final String resource)", "testcase": false, "constructor": false}, {"identifier": "isImage", "parameters": "(final File file)", "modifiers": "private static", "return": "boolean", "signature": "boolean isImage(final File file)", "full_signature": "private static boolean isImage(final File file)", "class_method_signature": "ImageUtils.isImage(final File file)", "testcase": false, "constructor": false}], "file": "gazeplay-commons/src/main/java/net/gazeplay/commons/utils/games/ImageUtils.java"}, "focal_method": {"identifier": "createImageLibrary", "parameters": "(final File directoryFile)", "modifiers": "public static", "return": "ImageLibrary", "body": "public static ImageLibrary createImageLibrary(final File directoryFile) {\n        return new LazyImageLibrary(directoryFile, createDefaultImageLibrary(null));\n    }", "signature": "ImageLibrary createImageLibrary(final File directoryFile)", "full_signature": "public static ImageLibrary createImageLibrary(final File directoryFile)", "class_method_signature": "ImageUtils.createImageLibrary(final File directoryFile)", "testcase": false, "constructor": false, "invocations": ["createDefaultImageLibrary"]}, "repository": {"repo_id": 81368488, "url": "https://github.com/GazePlay/GazePlay", "stars": 15, "created": "2/8/2017 7:39:08 PM +00:00", "updates": "2020-01-26T16:45:47+00:00", "fork": "False", "license": "licensed"}}