{"test_class": {"identifier": "HypervisorUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final long _minFileSize = 10485760L;", "modifier": "final", "type": "long", "declarator": "_minFileSize = 10485760L", "var_name": "_minFileSize"}], "file": "utils/src/test/java/org/apache/cloudstack/utils/hypervisor/HypervisorUtilsTest.java"}, "test_case": {"identifier": "checkVolumeFileForActivitySmallFileTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void checkVolumeFileForActivitySmallFileTest() throws IOException {\n        System.out.print(\"Testing don't block on newly created clones - \");\n        String filePath = \"./testsmallfileinactive\";\n        int timeoutSeconds = 5;\n        long thresholdMilliseconds = 2000;\n        File file = new File(filePath);\n\n        long startTime = setupcheckVolumeFileForActivityFile(file, 0);\n        HypervisorUtils.checkVolumeFileForActivity(filePath, timeoutSeconds, thresholdMilliseconds, _minFileSize);\n        long endTime = System.currentTimeMillis();\n\n        Assert.assertEquals(startTime, endTime, 1000L);\n        System.out.println(\"pass\");\n\n        file.delete();\n    }", "signature": "void checkVolumeFileForActivitySmallFileTest()", "full_signature": "@Test public void checkVolumeFileForActivitySmallFileTest()", "class_method_signature": "HypervisorUtilsTest.checkVolumeFileForActivitySmallFileTest()", "testcase": true, "constructor": false, "invocations": ["print", "setupcheckVolumeFileForActivityFile", "checkVolumeFileForActivity", "currentTimeMillis", "assertEquals", "println", "delete"]}, "focal_class": {"identifier": "HypervisorUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Logger s_logger = LoggerFactory.getLogger(HypervisorUtils.class);", "modifier": "public static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(HypervisorUtils.class)", "var_name": "s_logger"}], "methods": [{"identifier": "checkVolumeFileForActivity", "parameters": "(final String filePath, int timeoutSeconds, long inactiveThresholdMilliseconds, long minimumFileSize)", "modifiers": "public static", "return": "void", "signature": "void checkVolumeFileForActivity(final String filePath, int timeoutSeconds, long inactiveThresholdMilliseconds, long minimumFileSize)", "full_signature": "public static void checkVolumeFileForActivity(final String filePath, int timeoutSeconds, long inactiveThresholdMilliseconds, long minimumFileSize)", "class_method_signature": "HypervisorUtils.checkVolumeFileForActivity(final String filePath, int timeoutSeconds, long inactiveThresholdMilliseconds, long minimumFileSize)", "testcase": false, "constructor": false}], "file": "utils/src/main/java/org/apache/cloudstack/utils/hypervisor/HypervisorUtils.java"}, "focal_method": {"identifier": "checkVolumeFileForActivity", "parameters": "(final String filePath, int timeoutSeconds, long inactiveThresholdMilliseconds, long minimumFileSize)", "modifiers": "public static", "return": "void", "body": "public static void checkVolumeFileForActivity(final String filePath, int timeoutSeconds, long inactiveThresholdMilliseconds, long minimumFileSize) throws IOException {\n        File file = new File(filePath);\n        if (!file.exists()) {\n            throw new CloudRuntimeException(\"File \" + file.getAbsolutePath() + \" not found\");\n        }\n        if (file.length() < minimumFileSize) {\n            s_logger.debug(\"VM disk file too small, fresh clone? skipping modify check\");\n            return;\n        }\n        int waitedSeconds = 0;\n        int intervalSeconds = 1;\n        while (true) {\n            BasicFileAttributes attrs = Files.readAttributes(file.toPath(), BasicFileAttributes.class);\n            long modifyIdle = System.currentTimeMillis() - attrs.lastModifiedTime().toMillis();\n            long accessIdle = System.currentTimeMillis() - attrs.lastAccessTime().toMillis();\n            if (modifyIdle > inactiveThresholdMilliseconds && accessIdle > inactiveThresholdMilliseconds) {\n                s_logger.debug(\"File \" + filePath + \" has not been accessed or modified for at least \" + inactiveThresholdMilliseconds + \" ms\");\n                return;\n            } else {\n                s_logger.debug(\"File was modified \" + modifyIdle + \"ms ago, accessed \" + accessIdle + \"ms ago, waiting for inactivity threshold of \"\n                        + inactiveThresholdMilliseconds + \"ms or timeout of \" + timeoutSeconds + \"s (waited \" + waitedSeconds + \"s)\");\n            }\n            try {\n                TimeUnit.SECONDS.sleep(intervalSeconds);\n            } catch (InterruptedException ex) {\n                throw new CloudRuntimeException(\"Interrupted while waiting for activity on \" + filePath + \" to subside\", ex);\n            }\n            waitedSeconds += intervalSeconds;\n            if (waitedSeconds >= timeoutSeconds) {\n                throw new CloudRuntimeException(\"Reached timeout while waiting for activity on \" + filePath + \" to subside\");\n            }\n        }\n    }", "signature": "void checkVolumeFileForActivity(final String filePath, int timeoutSeconds, long inactiveThresholdMilliseconds, long minimumFileSize)", "full_signature": "public static void checkVolumeFileForActivity(final String filePath, int timeoutSeconds, long inactiveThresholdMilliseconds, long minimumFileSize)", "class_method_signature": "HypervisorUtils.checkVolumeFileForActivity(final String filePath, int timeoutSeconds, long inactiveThresholdMilliseconds, long minimumFileSize)", "testcase": false, "constructor": false, "invocations": ["exists", "getAbsolutePath", "length", "debug", "readAttributes", "toPath", "currentTimeMillis", "toMillis", "lastModifiedTime", "currentTimeMillis", "toMillis", "lastAccessTime", "debug", "debug", "sleep"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}