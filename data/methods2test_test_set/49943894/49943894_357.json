{"test_class": {"identifier": "VpcRouterDeploymentDefinitionTest", "superclass": "extends RouterDeploymentDefinitionTestBase", "interfaces": "", "fields": [{"original_string": "private static final String FOR_VPC_ONLY_THE_GIVEN_DESTINATION_SHOULD_BE_USED = \"For Vpc only the given destination should be used\";", "modifier": "private static final", "type": "String", "declarator": "FOR_VPC_ONLY_THE_GIVEN_DESTINATION_SHOULD_BE_USED = \"For Vpc only the given destination should be used\"", "var_name": "FOR_VPC_ONLY_THE_GIVEN_DESTINATION_SHOULD_BE_USED"}, {"original_string": "private static final long VPC_ID = 201L;", "modifier": "private static final", "type": "long", "declarator": "VPC_ID = 201L", "var_name": "VPC_ID"}, {"original_string": "public static final long VPC_OFFERING_ID = 210L;", "modifier": "public static final", "type": "long", "declarator": "VPC_OFFERING_ID = 210L", "var_name": "VPC_OFFERING_ID"}, {"original_string": "@Mock\n    protected VpcDao mockVpcDao;", "modifier": "@Mock\n    protected", "type": "VpcDao", "declarator": "mockVpcDao", "var_name": "mockVpcDao"}, {"original_string": "@Mock\n    protected PhysicalNetworkDao mockPhNwDao;", "modifier": "@Mock\n    protected", "type": "PhysicalNetworkDao", "declarator": "mockPhNwDao", "var_name": "mockPhNwDao"}, {"original_string": "protected PhysicalNetworkServiceProviderDao mockPhProviderDao;", "modifier": "protected", "type": "PhysicalNetworkServiceProviderDao", "declarator": "mockPhProviderDao", "var_name": "mockPhProviderDao"}, {"original_string": "@Mock\n    protected VpcVO mockVpc;", "modifier": "@Mock\n    protected", "type": "VpcVO", "declarator": "mockVpc", "var_name": "mockVpc"}, {"original_string": "@Mock\n    protected VpcOfferingDao mockVpcOffDao;", "modifier": "@Mock\n    protected", "type": "VpcOfferingDao", "declarator": "mockVpcOffDao", "var_name": "mockVpcOffDao"}, {"original_string": "@Mock\n    protected VpcManager vpcMgr;", "modifier": "@Mock\n    protected", "type": "VpcManager", "declarator": "vpcMgr", "var_name": "vpcMgr"}, {"original_string": "@Mock\n    protected NicProfileHelper vpcHelper;", "modifier": "@Mock\n    protected", "type": "NicProfileHelper", "declarator": "vpcHelper", "var_name": "vpcHelper"}, {"original_string": "protected RouterDeploymentDefinition deployment;", "modifier": "protected", "type": "RouterDeploymentDefinition", "declarator": "deployment", "var_name": "deployment"}], "file": "server/src/test/java/org/cloud/network/router/deployment/VpcRouterDeploymentDefinitionTest.java"}, "test_case": {"identifier": "testFindDestinations", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindDestinations() {\n        // Execute\n        final List<DeployDestination> foundDestinations = deployment.findDestinations();\n        // Assert\n        assertEquals(FOR_VPC_ONLY_THE_GIVEN_DESTINATION_SHOULD_BE_USED, deployment.dest, foundDestinations.get(0));\n        assertEquals(FOR_VPC_ONLY_THE_GIVEN_DESTINATION_SHOULD_BE_USED, 1, foundDestinations.size());\n    }", "signature": "void testFindDestinations()", "full_signature": "@Test public void testFindDestinations()", "class_method_signature": "VpcRouterDeploymentDefinitionTest.testFindDestinations()", "testcase": true, "constructor": false, "invocations": ["findDestinations", "assertEquals", "get", "assertEquals", "size"]}, "focal_class": {"identifier": "VpcRouterDeploymentDefinition", "superclass": "extends RouterDeploymentDefinition", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(VpcRouterDeploymentDefinition.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(VpcRouterDeploymentDefinition.class)", "var_name": "logger"}, {"original_string": "protected VpcDao vpcDao;", "modifier": "protected", "type": "VpcDao", "declarator": "vpcDao", "var_name": "vpcDao"}, {"original_string": "protected VpcOfferingDao vpcOffDao;", "modifier": "protected", "type": "VpcOfferingDao", "declarator": "vpcOffDao", "var_name": "vpcOffDao"}, {"original_string": "protected PhysicalNetworkDao pNtwkDao;", "modifier": "protected", "type": "PhysicalNetworkDao", "declarator": "pNtwkDao", "var_name": "pNtwkDao"}, {"original_string": "protected VpcManager vpcMgr;", "modifier": "protected", "type": "VpcManager", "declarator": "vpcMgr", "var_name": "vpcMgr"}, {"original_string": "protected VlanDao vlanDao;", "modifier": "protected", "type": "VlanDao", "declarator": "vlanDao", "var_name": "vlanDao"}, {"original_string": "protected Vpc vpc;", "modifier": "protected", "type": "Vpc", "declarator": "vpc", "var_name": "vpc"}], "methods": [{"identifier": "VpcRouterDeploymentDefinition", "parameters": "(final Network guestNetwork, final Vpc vpc, final DeployDestination dest, final Account owner,\n            final Map<Param, Object> params)", "modifiers": "protected", "return": "", "signature": " VpcRouterDeploymentDefinition(final Network guestNetwork, final Vpc vpc, final DeployDestination dest, final Account owner,\n            final Map<Param, Object> params)", "full_signature": "protected  VpcRouterDeploymentDefinition(final Network guestNetwork, final Vpc vpc, final DeployDestination dest, final Account owner,\n            final Map<Param, Object> params)", "class_method_signature": "VpcRouterDeploymentDefinition.VpcRouterDeploymentDefinition(final Network guestNetwork, final Vpc vpc, final DeployDestination dest, final Account owner,\n            final Map<Param, Object> params)", "testcase": false, "constructor": true}, {"identifier": "getVpc", "parameters": "()", "modifiers": "@Override public", "return": "Vpc", "signature": "Vpc getVpc()", "full_signature": "@Override public Vpc getVpc()", "class_method_signature": "VpcRouterDeploymentDefinition.getVpc()", "testcase": false, "constructor": false}, {"identifier": "isVpcRouter", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isVpcRouter()", "full_signature": "@Override public boolean isVpcRouter()", "class_method_signature": "VpcRouterDeploymentDefinition.isVpcRouter()", "testcase": false, "constructor": false}, {"identifier": "lock", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void lock()", "full_signature": "@Override protected void lock()", "class_method_signature": "VpcRouterDeploymentDefinition.lock()", "testcase": false, "constructor": false}, {"identifier": "unlock", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void unlock()", "full_signature": "@Override protected void unlock()", "class_method_signature": "VpcRouterDeploymentDefinition.unlock()", "testcase": false, "constructor": false}, {"identifier": "checkPreconditions", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void checkPreconditions()", "full_signature": "@Override protected void checkPreconditions()", "class_method_signature": "VpcRouterDeploymentDefinition.checkPreconditions()", "testcase": false, "constructor": false}, {"identifier": "findDestinations", "parameters": "()", "modifiers": "@Override protected", "return": "List<DeployDestination>", "signature": "List<DeployDestination> findDestinations()", "full_signature": "@Override protected List<DeployDestination> findDestinations()", "class_method_signature": "VpcRouterDeploymentDefinition.findDestinations()", "testcase": false, "constructor": false}, {"identifier": "prepareDeployment", "parameters": "()", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean prepareDeployment()", "full_signature": "@Override protected boolean prepareDeployment()", "class_method_signature": "VpcRouterDeploymentDefinition.prepareDeployment()", "testcase": false, "constructor": false}, {"identifier": "needsPublicNic", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean needsPublicNic()", "full_signature": "@Override public boolean needsPublicNic()", "class_method_signature": "VpcRouterDeploymentDefinition.needsPublicNic()", "testcase": false, "constructor": false}, {"identifier": "hasSourceNatService", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasSourceNatService()", "full_signature": "@Override public boolean hasSourceNatService()", "class_method_signature": "VpcRouterDeploymentDefinition.hasSourceNatService()", "testcase": false, "constructor": false}, {"identifier": "hasService", "parameters": "(Network.Service service)", "modifiers": "private", "return": "boolean", "signature": "boolean hasService(Network.Service service)", "full_signature": "private boolean hasService(Network.Service service)", "class_method_signature": "VpcRouterDeploymentDefinition.hasService(Network.Service service)", "testcase": false, "constructor": false}, {"identifier": "findSourceNatIP", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void findSourceNatIP()", "full_signature": "@Override protected void findSourceNatIP()", "class_method_signature": "VpcRouterDeploymentDefinition.findSourceNatIP()", "testcase": false, "constructor": false}, {"identifier": "findOrDeployVirtualRouter", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void findOrDeployVirtualRouter()", "full_signature": "@Override protected void findOrDeployVirtualRouter()", "class_method_signature": "VpcRouterDeploymentDefinition.findOrDeployVirtualRouter()", "testcase": false, "constructor": false}, {"identifier": "findVirtualProvider", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void findVirtualProvider()", "full_signature": "@Override protected void findVirtualProvider()", "class_method_signature": "VpcRouterDeploymentDefinition.findVirtualProvider()", "testcase": false, "constructor": false}, {"identifier": "findServiceOfferingId", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void findServiceOfferingId()", "full_signature": "@Override protected void findServiceOfferingId()", "class_method_signature": "VpcRouterDeploymentDefinition.findServiceOfferingId()", "testcase": false, "constructor": false}, {"identifier": "deployAllVirtualRouters", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void deployAllVirtualRouters()", "full_signature": "@Override protected void deployAllVirtualRouters()", "class_method_signature": "VpcRouterDeploymentDefinition.deployAllVirtualRouters()", "testcase": false, "constructor": false}, {"identifier": "planDeploymentRouters", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void planDeploymentRouters()", "full_signature": "@Override protected void planDeploymentRouters()", "class_method_signature": "VpcRouterDeploymentDefinition.planDeploymentRouters()", "testcase": false, "constructor": false}, {"identifier": "generateDeploymentPlan", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void generateDeploymentPlan()", "full_signature": "@Override public void generateDeploymentPlan()", "class_method_signature": "VpcRouterDeploymentDefinition.generateDeploymentPlan()", "testcase": false, "constructor": false}, {"identifier": "isRedundant", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isRedundant()", "full_signature": "@Override public boolean isRedundant()", "class_method_signature": "VpcRouterDeploymentDefinition.isRedundant()", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/cloud/network/router/deployment/VpcRouterDeploymentDefinition.java"}, "focal_method": {"identifier": "findDestinations", "parameters": "()", "modifiers": "@Override protected", "return": "List<DeployDestination>", "body": "@Override\n    protected List<DeployDestination> findDestinations() {\n        final List<DeployDestination> destinations = new ArrayList<>();\n        destinations.add(dest);\n        return destinations;\n    }", "signature": "List<DeployDestination> findDestinations()", "full_signature": "@Override protected List<DeployDestination> findDestinations()", "class_method_signature": "VpcRouterDeploymentDefinition.findDestinations()", "testcase": false, "constructor": false, "invocations": ["add"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}