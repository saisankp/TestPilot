{"test_class": {"identifier": "JVMUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "collections/src/test/java/com/turbospaces/core/JVMUtilTest.java"}, "test_case": {"identifier": "equals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void equals() {\n        Assert.assertFalse( JVMUtil.equals( new Object(), new Object() ) );\n        Assert.assertFalse( JVMUtil.equals( null, new Object() ) );\n        Assert.assertFalse( JVMUtil.equals( new Object(), null ) );\n        Assert.assertTrue( JVMUtil.equals( Integer.valueOf( 1 ), Integer.valueOf( 1 ) ) );\n        Assert.assertTrue( JVMUtil.equals( Integer.valueOf( 1 ), new Integer( 1 ) ) );\n        Assert.assertTrue( JVMUtil.equals( new int[] { 1, 2 }, new int[] { 1, 2 } ) );\n        Assert.assertFalse( JVMUtil.equals( new int[] { 1, 2 }, new int[] { 1, 2, 3 } ) );\n        Assert.assertTrue( JVMUtil.equals( new long[] { 1, 2 }, new long[] { 1, 2 } ) );\n        Assert.assertFalse( JVMUtil.equals( new long[] { 1, 2 }, new long[] { 1, 2, 3 } ) );\n        Assert.assertTrue( JVMUtil.equals( new short[] { 1, 2 }, new short[] { 1, 2 } ) );\n        Assert.assertFalse( JVMUtil.equals( new short[] { 1, 2 }, new short[] { 1, 2, 3 } ) );\n        Assert.assertTrue( JVMUtil.equals( new byte[] { 1, 2 }, new byte[] { 1, 2 } ) );\n        Assert.assertFalse( JVMUtil.equals( new byte[] { 1, 2 }, new byte[] { 1, 2, 3 } ) );\n        Assert.assertTrue( JVMUtil.equals( new char[] { 1, 2 }, new char[] { 1, 2 } ) );\n        Assert.assertFalse( JVMUtil.equals( new char[] { 1, 2 }, new char[] { 1, 2, 3 } ) );\n        Assert.assertTrue( JVMUtil.equals( new float[] { 1, 2 }, new float[] { 1, 2 } ) );\n        Assert.assertFalse( JVMUtil.equals( new float[] { 1, 2 }, new float[] { 1, 2, 3 } ) );\n        Assert.assertTrue( JVMUtil.equals( new double[] { 1, 2 }, new double[] { 1, 2 } ) );\n        Assert.assertFalse( JVMUtil.equals( new double[] { 1, 2 }, new double[] { 1, 2, 3 } ) );\n        Assert.assertTrue( JVMUtil.equals( new boolean[] { true, false }, new boolean[] { true, false } ) );\n        Assert.assertFalse( JVMUtil.equals( new boolean[] { true, true }, new boolean[] { true, false } ) );\n    }", "signature": "void equals()", "full_signature": "@Test public void equals()", "class_method_signature": "JVMUtilTest.equals()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "equals", "assertFalse", "equals", "assertFalse", "equals", "assertTrue", "equals", "valueOf", "valueOf", "assertTrue", "equals", "valueOf", "assertTrue", "equals", "assertFalse", "equals", "assertTrue", "equals", "assertFalse", "equals", "assertTrue", "equals", "assertFalse", "equals", "assertTrue", "equals", "assertFalse", "equals", "assertTrue", "equals", "assertFalse", "equals", "assertTrue", "equals", "assertFalse", "equals", "assertTrue", "equals", "assertFalse", "equals", "assertTrue", "equals", "assertFalse", "equals"]}, "focal_class": {"identifier": "JVMUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "gc", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void gc()", "full_signature": "public static void gc()", "class_method_signature": "JVMUtil.gc()", "testcase": false, "constructor": false}, {"identifier": "gcOnExit", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void gcOnExit()", "full_signature": "public static void gcOnExit()", "class_method_signature": "JVMUtil.gcOnExit()", "testcase": false, "constructor": false}, {"identifier": "fieldFor", "parameters": "(final Class<?> clazz,\n                                 final String name)", "modifiers": "public static", "return": "Field", "signature": "Field fieldFor(final Class<?> clazz,\n                                 final String name)", "full_signature": "public static Field fieldFor(final Class<?> clazz,\n                                 final String name)", "class_method_signature": "JVMUtil.fieldFor(final Class<?> clazz,\n                                 final String name)", "testcase": false, "constructor": false}, {"identifier": "getPropertyValueUnsafe", "parameters": "(final Object source,\n                                               final Class<T> valueType,\n                                               final long fieldOffset)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "signature": "T getPropertyValueUnsafe(final Object source,\n                                               final Class<T> valueType,\n                                               final long fieldOffset)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T getPropertyValueUnsafe(final Object source,\n                                               final Class<T> valueType,\n                                               final long fieldOffset)", "class_method_signature": "JVMUtil.getPropertyValueUnsafe(final Object source,\n                                               final Class<T> valueType,\n                                               final long fieldOffset)", "testcase": false, "constructor": false}, {"identifier": "setPropertyValueUnsafe", "parameters": "(final Object source,\n                                                  final T value,\n                                                  final Class<T> valueType,\n                                                  final long fieldOffset)", "modifiers": "public static", "return": "void", "signature": "void setPropertyValueUnsafe(final Object source,\n                                                  final T value,\n                                                  final Class<T> valueType,\n                                                  final long fieldOffset)", "full_signature": "public static void setPropertyValueUnsafe(final Object source,\n                                                  final T value,\n                                                  final Class<T> valueType,\n                                                  final long fieldOffset)", "class_method_signature": "JVMUtil.setPropertyValueUnsafe(final Object source,\n                                                  final T value,\n                                                  final Class<T> valueType,\n                                                  final long fieldOffset)", "testcase": false, "constructor": false}, {"identifier": "runAndGetExecutionException", "parameters": "(final Runnable runnable)", "modifiers": "public static", "return": "Exception", "signature": "Exception runAndGetExecutionException(final Runnable runnable)", "full_signature": "public static Exception runAndGetExecutionException(final Runnable runnable)", "class_method_signature": "JVMUtil.runAndGetExecutionException(final Runnable runnable)", "testcase": false, "constructor": false}, {"identifier": "repeatConcurrently", "parameters": "(final int threads,\n                                                         final int totalIterationsCount,\n                                                         final Function<Integer, Object> task)", "modifiers": "public static", "return": "List<Throwable>", "signature": "List<Throwable> repeatConcurrently(final int threads,\n                                                         final int totalIterationsCount,\n                                                         final Function<Integer, Object> task)", "full_signature": "public static List<Throwable> repeatConcurrently(final int threads,\n                                                         final int totalIterationsCount,\n                                                         final Function<Integer, Object> task)", "class_method_signature": "JVMUtil.repeatConcurrently(final int threads,\n                                                         final int totalIterationsCount,\n                                                         final Function<Integer, Object> task)", "testcase": false, "constructor": false}, {"identifier": "repeatConcurrently", "parameters": "(final int threads,\n                                                         final int totalIterationsCount,\n                                                         final Runnable task)", "modifiers": "public static", "return": "List<Throwable>", "signature": "List<Throwable> repeatConcurrently(final int threads,\n                                                         final int totalIterationsCount,\n                                                         final Runnable task)", "full_signature": "public static List<Throwable> repeatConcurrently(final int threads,\n                                                         final int totalIterationsCount,\n                                                         final Runnable task)", "class_method_signature": "JVMUtil.repeatConcurrently(final int threads,\n                                                         final int totalIterationsCount,\n                                                         final Runnable task)", "testcase": false, "constructor": false}, {"identifier": "murmurRehash", "parameters": "(final int hash)", "modifiers": "public static", "return": "int", "signature": "int murmurRehash(final int hash)", "full_signature": "public static int murmurRehash(final int hash)", "class_method_signature": "JVMUtil.murmurRehash(final int hash)", "testcase": false, "constructor": false}, {"identifier": "jdkRehash", "parameters": "(final int hash)", "modifiers": "public static", "return": "int", "signature": "int jdkRehash(final int hash)", "full_signature": "public static int jdkRehash(final int hash)", "class_method_signature": "JVMUtil.jdkRehash(final int hash)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o1,\n                                 final Object o2)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals(final Object o1,\n                                 final Object o2)", "full_signature": "public static boolean equals(final Object o1,\n                                 final Object o2)", "class_method_signature": "JVMUtil.equals(final Object o1,\n                                 final Object o2)", "testcase": false, "constructor": false}, {"identifier": "ensureEnoughMemoryCapacity", "parameters": "(final ByteArrayPointer pointer,\n                                                  final CapacityRestriction capacityRestriction,\n                                                  final Sequence memoryUsed)", "modifiers": "public static", "return": "void", "signature": "void ensureEnoughMemoryCapacity(final ByteArrayPointer pointer,\n                                                  final CapacityRestriction capacityRestriction,\n                                                  final Sequence memoryUsed)", "full_signature": "public static void ensureEnoughMemoryCapacity(final ByteArrayPointer pointer,\n                                                  final CapacityRestriction capacityRestriction,\n                                                  final Sequence memoryUsed)", "class_method_signature": "JVMUtil.ensureEnoughMemoryCapacity(final ByteArrayPointer pointer,\n                                                  final CapacityRestriction capacityRestriction,\n                                                  final Sequence memoryUsed)", "testcase": false, "constructor": false}, {"identifier": "ensureEnoughCapacity", "parameters": "(final Object obj,\n                                            final CapacityRestriction capacityRestriction,\n                                            final Sequence itemsCount)", "modifiers": "public static", "return": "void", "signature": "void ensureEnoughCapacity(final Object obj,\n                                            final CapacityRestriction capacityRestriction,\n                                            final Sequence itemsCount)", "full_signature": "public static void ensureEnoughCapacity(final Object obj,\n                                            final CapacityRestriction capacityRestriction,\n                                            final Sequence itemsCount)", "class_method_signature": "JVMUtil.ensureEnoughCapacity(final Object obj,\n                                            final CapacityRestriction capacityRestriction,\n                                            final Sequence itemsCount)", "testcase": false, "constructor": false}, {"identifier": "JVMUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " JVMUtil()", "full_signature": "private  JVMUtil()", "class_method_signature": "JVMUtil.JVMUtil()", "testcase": false, "constructor": true}], "file": "collections/src/main/java/com/turbospaces/core/JVMUtil.java"}, "focal_method": {"identifier": "equals", "parameters": "(final Object o1,\n                                 final Object o2)", "modifiers": "public static", "return": "boolean", "body": "public static boolean equals(final Object o1,\n                                 final Object o2) {\n        if ( o1 == o2 )\n            return true;\n        if ( o1 == null || o2 == null )\n            return false;\n        if ( o1.equals( o2 ) )\n            return true;\n        if ( o1.getClass().isArray() && o2.getClass().isArray() ) {\n            if ( o1 instanceof Object[] && o2 instanceof Object[] )\n                return Arrays.equals( (Object[]) o1, (Object[]) o2 );\n            if ( o1 instanceof boolean[] && o2 instanceof boolean[] )\n                return Arrays.equals( (boolean[]) o1, (boolean[]) o2 );\n            if ( o1 instanceof byte[] && o2 instanceof byte[] )\n                return Arrays.equals( (byte[]) o1, (byte[]) o2 );\n            if ( o1 instanceof char[] && o2 instanceof char[] )\n                return Arrays.equals( (char[]) o1, (char[]) o2 );\n            if ( o1 instanceof double[] && o2 instanceof double[] )\n                return Arrays.equals( (double[]) o1, (double[]) o2 );\n            if ( o1 instanceof float[] && o2 instanceof float[] )\n                return Arrays.equals( (float[]) o1, (float[]) o2 );\n            if ( o1 instanceof int[] && o2 instanceof int[] )\n                return Arrays.equals( (int[]) o1, (int[]) o2 );\n            if ( o1 instanceof long[] && o2 instanceof long[] )\n                return Arrays.equals( (long[]) o1, (long[]) o2 );\n            if ( o1 instanceof short[] && o2 instanceof short[] )\n                return Arrays.equals( (short[]) o1, (short[]) o2 );\n        }\n        return false;\n    }", "signature": "boolean equals(final Object o1,\n                                 final Object o2)", "full_signature": "public static boolean equals(final Object o1,\n                                 final Object o2)", "class_method_signature": "JVMUtil.equals(final Object o1,\n                                 final Object o2)", "testcase": false, "constructor": false, "invocations": ["equals", "isArray", "getClass", "isArray", "getClass", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals"]}, "repository": {"repo_id": 4242398, "url": "https://github.com/turbospaces/turbospaces", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 10, "size": 915, "license": "licensed"}}