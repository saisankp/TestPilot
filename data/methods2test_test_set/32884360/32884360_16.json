{"test_class": {"identifier": "IndexColumnIsNotPartialTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static String SCHEMA = \"test\";", "modifier": "private final static", "type": "String", "declarator": "SCHEMA = \"test\"", "var_name": "SCHEMA"}, {"original_string": "private final static String TABLE = \"t\";", "modifier": "private final static", "type": "String", "declarator": "TABLE = \"t\"", "var_name": "TABLE"}], "file": "fdb-sql-layer-core/src/test/java/com/foundationdb/ais/model/validation/IndexColumnIsNotPartialTest.java"}, "test_case": {"identifier": "fullLengthIsInvalid", "parameters": "()", "modifiers": "@Test(expected=IndexColumnIsPartialException.class) public", "return": "void", "body": "@Test(expected=IndexColumnIsPartialException.class)\n    public void fullLengthIsInvalid() {\n        validate(createAIS(32, 32));\n    }", "signature": "void fullLengthIsInvalid()", "full_signature": "@Test(expected=IndexColumnIsPartialException.class) public void fullLengthIsInvalid()", "class_method_signature": "IndexColumnIsNotPartialTest.fullLengthIsInvalid()", "testcase": true, "constructor": false, "invocations": ["validate", "createAIS"]}, "focal_class": {"identifier": "IndexColumnIsNotPartial", "superclass": "", "interfaces": "implements AISValidation", "fields": [], "methods": [{"identifier": "validate", "parameters": "(AkibanInformationSchema ais, AISValidationOutput output)", "modifiers": "@Override public", "return": "void", "signature": "void validate(AkibanInformationSchema ais, AISValidationOutput output)", "full_signature": "@Override public void validate(AkibanInformationSchema ais, AISValidationOutput output)", "class_method_signature": "IndexColumnIsNotPartial.validate(AkibanInformationSchema ais, AISValidationOutput output)", "testcase": false, "constructor": false}], "file": "fdb-sql-layer-core/src/main/java/com/foundationdb/ais/model/validation/IndexColumnIsNotPartial.java"}, "focal_method": {"identifier": "validate", "parameters": "(AkibanInformationSchema ais, AISValidationOutput output)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void validate(AkibanInformationSchema ais, AISValidationOutput output) {\n        for(Table table : ais.getTables().values()) {\n            for(Index index : table.getIndexesIncludingInternal()) {\n                for(IndexColumn indexColumn : index.getKeyColumns()) {\n                    if(indexColumn.getIndexedLength() != null) {\n                        output.reportFailure(new AISValidationFailure(\n                                new IndexColumnIsPartialException(table.getName(), index.getIndexName().getName(), indexColumn.getPosition())\n                        ));\n                    }\n                }\n            }\n        }\n    }", "signature": "void validate(AkibanInformationSchema ais, AISValidationOutput output)", "full_signature": "@Override public void validate(AkibanInformationSchema ais, AISValidationOutput output)", "class_method_signature": "IndexColumnIsNotPartial.validate(AkibanInformationSchema ais, AISValidationOutput output)", "testcase": false, "constructor": false, "invocations": ["values", "getTables", "getIndexesIncludingInternal", "getKeyColumns", "getIndexedLength", "reportFailure", "getName", "getName", "getIndexName", "getPosition"]}, "repository": {"repo_id": 32884360, "url": "https://github.com/jaytaylor/sql-layer", "language": "Java", "is_fork": false, "fork_count": 120, "stargazer_count": 77, "size": 138665, "license": "licensed"}}