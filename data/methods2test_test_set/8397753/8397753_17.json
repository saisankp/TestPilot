{"test_class": {"identifier": "TestGitCommit", "superclass": "extends TestBase", "interfaces": "", "fields": [{"original_string": "private File repoDirectory;", "modifier": "private", "type": "File", "declarator": "repoDirectory", "var_name": "repoDirectory"}, {"original_string": "private GitCommit commit;", "modifier": "private", "type": "GitCommit", "declarator": "commit", "var_name": "commit"}, {"original_string": "private GitAdd add;", "modifier": "private", "type": "GitAdd", "declarator": "add", "var_name": "add"}, {"original_string": "private GitCommitOptions options;", "modifier": "private", "type": "GitCommitOptions", "declarator": "options", "var_name": "options"}, {"original_string": "private List<File> paths;", "modifier": "private", "type": "List<File>", "declarator": "paths", "var_name": "paths"}], "file": "javagit/src/test/java/edu/nyu/cs/javagit/api/commands/TestGitCommit.java"}, "test_case": {"identifier": "testCommit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCommit() throws IOException, JavaGitException {\n        File testFile = FileUtilities.createFile(repoDirectory, \"fileA.txt\", \"Sameple Contents\");\n\n        // Add a file to the repo\n        List<File> filesToAdd = new ArrayList<File>();\n        filesToAdd.add(testFile);\n        add.add(repoDirectory, null, filesToAdd);\n\n        // Call commit\n        GitCommitResponse resp = commit.commit(repoDirectory, \"Making a first test commit\");\n\n        assertEquals(\"Short comment not as expected\", resp.getCommitShortComment(),\n                \"Making a first test commit\");\n        assertEquals(\"\", 1, resp.getFilesChanged());\n        assertEquals(\"\", 0, resp.getLinesDeleted());\n        assertEquals(\"\", 1, resp.getLinesInserted());\n        // Can't assert the short hash because it changes with the date.\n        // assertEquals(\"\", resp.getCommitShortHashName(), \"5f8e2d7\");\n\n        // TODO (jhl388): check number of each file type\n        // TODO (jhl388): check the files themselves.\n    }", "signature": "void testCommit()", "full_signature": "@Test public void testCommit()", "class_method_signature": "TestGitCommit.testCommit()", "testcase": true, "constructor": false, "invocations": ["createFile", "add", "add", "commit", "assertEquals", "getCommitShortComment", "assertEquals", "getFilesChanged", "assertEquals", "getLinesDeleted", "assertEquals", "getLinesInserted"]}, "focal_class": {"identifier": "GitCommit", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "commitAll", "parameters": "(File repository, String message)", "modifiers": "public", "return": "GitCommitResponseImpl", "signature": "GitCommitResponseImpl commitAll(File repository, String message)", "full_signature": "public GitCommitResponseImpl commitAll(File repository, String message)", "class_method_signature": "GitCommit.commitAll(File repository, String message)", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "(File repository, GitCommitOptions options, String message)", "modifiers": "public", "return": "GitCommitResponse", "signature": "GitCommitResponse commit(File repository, GitCommitOptions options, String message)", "full_signature": "public GitCommitResponse commit(File repository, GitCommitOptions options, String message)", "class_method_signature": "GitCommit.commit(File repository, GitCommitOptions options, String message)", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "(File repository, GitCommitOptions options, String message,\n      List<File> paths)", "modifiers": "public", "return": "GitCommitResponse", "signature": "GitCommitResponse commit(File repository, GitCommitOptions options, String message,\n      List<File> paths)", "full_signature": "public GitCommitResponse commit(File repository, GitCommitOptions options, String message,\n      List<File> paths)", "class_method_signature": "GitCommit.commit(File repository, GitCommitOptions options, String message,\n      List<File> paths)", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "(File repository, String message)", "modifiers": "public", "return": "GitCommitResponse", "signature": "GitCommitResponse commit(File repository, String message)", "full_signature": "public GitCommitResponse commit(File repository, String message)", "class_method_signature": "GitCommit.commit(File repository, String message)", "testcase": false, "constructor": false}, {"identifier": "commitOnly", "parameters": "(File repository, String message, List<File> paths)", "modifiers": "public", "return": "GitCommitResponse", "signature": "GitCommitResponse commitOnly(File repository, String message, List<File> paths)", "full_signature": "public GitCommitResponse commitOnly(File repository, String message, List<File> paths)", "class_method_signature": "GitCommit.commitOnly(File repository, String message, List<File> paths)", "testcase": false, "constructor": false}], "file": "javagit/src/main/java/edu/nyu/cs/javagit/api/commands/GitCommit.java"}, "focal_method": {"identifier": "commit", "parameters": "(File repository, GitCommitOptions options, String message)", "modifiers": "public", "return": "GitCommitResponse", "body": "public GitCommitResponse commit(File repository, GitCommitOptions options, String message)\n      throws IOException, JavaGitException {\n\n    CheckUtilities.checkNullArgument(repository, \"repository\");\n    CheckUtilities.checkStringArgument(message, \"message\");\n    CheckUtilities.checkNullArgument(options, \"options\");\n\n    IClient client = ClientManager.getInstance().getPreferredClient();\n    IGitCommit gitCommit = client.getGitCommitInstance();\n    return gitCommit.commit(repository, options, message);\n  }", "signature": "GitCommitResponse commit(File repository, GitCommitOptions options, String message)", "full_signature": "public GitCommitResponse commit(File repository, GitCommitOptions options, String message)", "class_method_signature": "GitCommit.commit(File repository, GitCommitOptions options, String message)", "testcase": false, "constructor": false, "invocations": ["checkNullArgument", "checkStringArgument", "checkNullArgument", "getPreferredClient", "getInstance", "getGitCommitInstance", "commit"]}, "repository": {"repo_id": 8397753, "url": "https://github.com/bit-man/SwissArmyJavaGit", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 1549, "license": "licensed"}}