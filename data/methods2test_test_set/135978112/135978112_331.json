{"test_class": {"identifier": "StreamPartitionAssignorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TopicPartition t1p0 = new TopicPartition(\"topic1\", 0);", "modifier": "private", "type": "TopicPartition", "declarator": "t1p0 = new TopicPartition(\"topic1\", 0)", "var_name": "t1p0"}, {"original_string": "private TopicPartition t1p1 = new TopicPartition(\"topic1\", 1);", "modifier": "private", "type": "TopicPartition", "declarator": "t1p1 = new TopicPartition(\"topic1\", 1)", "var_name": "t1p1"}, {"original_string": "private TopicPartition t1p2 = new TopicPartition(\"topic1\", 2);", "modifier": "private", "type": "TopicPartition", "declarator": "t1p2 = new TopicPartition(\"topic1\", 2)", "var_name": "t1p2"}, {"original_string": "private TopicPartition t2p0 = new TopicPartition(\"topic2\", 0);", "modifier": "private", "type": "TopicPartition", "declarator": "t2p0 = new TopicPartition(\"topic2\", 0)", "var_name": "t2p0"}, {"original_string": "private TopicPartition t2p1 = new TopicPartition(\"topic2\", 1);", "modifier": "private", "type": "TopicPartition", "declarator": "t2p1 = new TopicPartition(\"topic2\", 1)", "var_name": "t2p1"}, {"original_string": "private TopicPartition t2p2 = new TopicPartition(\"topic2\", 2);", "modifier": "private", "type": "TopicPartition", "declarator": "t2p2 = new TopicPartition(\"topic2\", 2)", "var_name": "t2p2"}, {"original_string": "private TopicPartition t3p0 = new TopicPartition(\"topic3\", 0);", "modifier": "private", "type": "TopicPartition", "declarator": "t3p0 = new TopicPartition(\"topic3\", 0)", "var_name": "t3p0"}, {"original_string": "private TopicPartition t3p1 = new TopicPartition(\"topic3\", 1);", "modifier": "private", "type": "TopicPartition", "declarator": "t3p1 = new TopicPartition(\"topic3\", 1)", "var_name": "t3p1"}, {"original_string": "private TopicPartition t3p2 = new TopicPartition(\"topic3\", 2);", "modifier": "private", "type": "TopicPartition", "declarator": "t3p2 = new TopicPartition(\"topic3\", 2)", "var_name": "t3p2"}, {"original_string": "private TopicPartition t3p3 = new TopicPartition(\"topic3\", 3);", "modifier": "private", "type": "TopicPartition", "declarator": "t3p3 = new TopicPartition(\"topic3\", 3)", "var_name": "t3p3"}, {"original_string": "private Set<String> allTopics = Utils.mkSet(\"topic1\", \"topic2\");", "modifier": "private", "type": "Set<String>", "declarator": "allTopics = Utils.mkSet(\"topic1\", \"topic2\")", "var_name": "allTopics"}, {"original_string": "private List<PartitionInfo> infos = Arrays.asList(\n            new PartitionInfo(\"topic1\", 0, Node.noNode(), new Node[0], new Node[0]),\n            new PartitionInfo(\"topic1\", 1, Node.noNode(), new Node[0], new Node[0]),\n            new PartitionInfo(\"topic1\", 2, Node.noNode(), new Node[0], new Node[0]),\n            new PartitionInfo(\"topic2\", 0, Node.noNode(), new Node[0], new Node[0]),\n            new PartitionInfo(\"topic2\", 1, Node.noNode(), new Node[0], new Node[0]),\n            new PartitionInfo(\"topic2\", 2, Node.noNode(), new Node[0], new Node[0]),\n            new PartitionInfo(\"topic3\", 0, Node.noNode(), new Node[0], new Node[0]),\n            new PartitionInfo(\"topic3\", 1, Node.noNode(), new Node[0], new Node[0]),\n            new PartitionInfo(\"topic3\", 2, Node.noNode(), new Node[0], new Node[0]),\n            new PartitionInfo(\"topic3\", 3, Node.noNode(), new Node[0], new Node[0])\n    );", "modifier": "private", "type": "List<PartitionInfo>", "declarator": "infos = Arrays.asList(\n            new PartitionInfo(\"topic1\", 0, Node.noNode(), new Node[0], new Node[0]),\n            new PartitionInfo(\"topic1\", 1, Node.noNode(), new Node[0], new Node[0]),\n            new PartitionInfo(\"topic1\", 2, Node.noNode(), new Node[0], new Node[0]),\n            new PartitionInfo(\"topic2\", 0, Node.noNode(), new Node[0], new Node[0]),\n            new PartitionInfo(\"topic2\", 1, Node.noNode(), new Node[0], new Node[0]),\n            new PartitionInfo(\"topic2\", 2, Node.noNode(), new Node[0], new Node[0]),\n            new PartitionInfo(\"topic3\", 0, Node.noNode(), new Node[0], new Node[0]),\n            new PartitionInfo(\"topic3\", 1, Node.noNode(), new Node[0], new Node[0]),\n            new PartitionInfo(\"topic3\", 2, Node.noNode(), new Node[0], new Node[0]),\n            new PartitionInfo(\"topic3\", 3, Node.noNode(), new Node[0], new Node[0])\n    )", "var_name": "infos"}, {"original_string": "private Cluster metadata = new Cluster(Arrays.asList(Node.noNode()), infos, Collections.<String>emptySet());", "modifier": "private", "type": "Cluster", "declarator": "metadata = new Cluster(Arrays.asList(Node.noNode()), infos, Collections.<String>emptySet())", "var_name": "metadata"}, {"original_string": "private final TaskId task0 = new TaskId(0, 0);", "modifier": "private final", "type": "TaskId", "declarator": "task0 = new TaskId(0, 0)", "var_name": "task0"}, {"original_string": "private final TaskId task1 = new TaskId(0, 1);", "modifier": "private final", "type": "TaskId", "declarator": "task1 = new TaskId(0, 1)", "var_name": "task1"}, {"original_string": "private final TaskId task2 = new TaskId(0, 2);", "modifier": "private final", "type": "TaskId", "declarator": "task2 = new TaskId(0, 2)", "var_name": "task2"}, {"original_string": "private final TaskId task3 = new TaskId(0, 3);", "modifier": "private final", "type": "TaskId", "declarator": "task3 = new TaskId(0, 3)", "var_name": "task3"}], "file": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamPartitionAssignorTest.java"}, "test_case": {"identifier": "testSubscription", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Test public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testSubscription() throws Exception {\n        StreamsConfig config = new StreamsConfig(configProps());\n\n        TopologyBuilder builder = new TopologyBuilder();\n        builder.addSource(\"source1\", \"topic1\");\n        builder.addSource(\"source2\", \"topic2\");\n        builder.addProcessor(\"processor\", new MockProcessorSupplier(), \"source1\", \"source2\");\n\n        final Set<TaskId> prevTasks = Utils.mkSet(\n                new TaskId(0, 1), new TaskId(1, 1), new TaskId(2, 1));\n        final Set<TaskId> cachedTasks = Utils.mkSet(\n                new TaskId(0, 1), new TaskId(1, 1), new TaskId(2, 1),\n                new TaskId(0, 2), new TaskId(1, 2), new TaskId(2, 2));\n\n        String clientId = \"client-id\";\n        UUID processId = UUID.randomUUID();\n        StreamThread thread = new StreamThread(builder, config, new MockClientSupplier(), \"test\", clientId, processId, new Metrics(), new SystemTime()) {\n            @Override\n            public Set<TaskId> prevTasks() {\n                return prevTasks;\n            }\n            @Override\n            public Set<TaskId> cachedTasks() {\n                return cachedTasks;\n            }\n        };\n\n        StreamPartitionAssignor partitionAssignor = new StreamPartitionAssignor();\n        partitionAssignor.configure(config.getConsumerConfigs(thread, \"test\", clientId));\n\n        PartitionAssignor.Subscription subscription = partitionAssignor.subscription(Utils.mkSet(\"topic1\", \"topic2\"));\n\n        Collections.sort(subscription.topics());\n        assertEquals(Utils.mkList(\"topic1\", \"topic2\"), subscription.topics());\n\n        Set<TaskId> standbyTasks = new HashSet<>(cachedTasks);\n        standbyTasks.removeAll(prevTasks);\n\n        SubscriptionInfo info = new SubscriptionInfo(processId, prevTasks, standbyTasks);\n        assertEquals(info.encode(), subscription.userData());\n    }", "signature": "void testSubscription()", "full_signature": "@SuppressWarnings(\"unchecked\") @Test public void testSubscription()", "class_method_signature": "StreamPartitionAssignorTest.testSubscription()", "testcase": true, "constructor": false, "invocations": ["configProps", "addSource", "addSource", "addProcessor", "mkSet", "mkSet", "randomUUID", "configure", "getConsumerConfigs", "subscription", "mkSet", "sort", "topics", "assertEquals", "mkList", "topics", "removeAll", "assertEquals", "encode", "userData"]}, "focal_class": {"identifier": "StreamPartitionAssignor", "superclass": "", "interfaces": "implements PartitionAssignor, Configurable", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(StreamPartitionAssignor.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(StreamPartitionAssignor.class)", "var_name": "log"}, {"original_string": "private static final Comparator<TopicPartition> PARTITION_COMPARATOR = new Comparator<TopicPartition>() {\n        @Override\n        public int compare(TopicPartition p1, TopicPartition p2) {\n            int result = p1.topic().compareTo(p2.topic());\n\n            if (result != 0) {\n                return result;\n            } else {\n                return p1.partition() < p2.partition() ? -1 : (p1.partition() > p2.partition() ? 1 : 0);\n            }\n        }\n    };", "modifier": "private static final", "type": "Comparator<TopicPartition>", "declarator": "PARTITION_COMPARATOR = new Comparator<TopicPartition>() {\n        @Override\n        public int compare(TopicPartition p1, TopicPartition p2) {\n            int result = p1.topic().compareTo(p2.topic());\n\n            if (result != 0) {\n                return result;\n            } else {\n                return p1.partition() < p2.partition() ? -1 : (p1.partition() > p2.partition() ? 1 : 0);\n            }\n        }\n    }", "var_name": "PARTITION_COMPARATOR"}, {"original_string": "private StreamThread streamThread;", "modifier": "private", "type": "StreamThread", "declarator": "streamThread", "var_name": "streamThread"}, {"original_string": "private int numStandbyReplicas;", "modifier": "private", "type": "int", "declarator": "numStandbyReplicas", "var_name": "numStandbyReplicas"}, {"original_string": "private Map<Integer, TopologyBuilder.TopicsInfo> topicGroups;", "modifier": "private", "type": "Map<Integer, TopologyBuilder.TopicsInfo>", "declarator": "topicGroups", "var_name": "topicGroups"}, {"original_string": "private Map<TopicPartition, Set<TaskId>> partitionToTaskIds;", "modifier": "private", "type": "Map<TopicPartition, Set<TaskId>>", "declarator": "partitionToTaskIds", "var_name": "partitionToTaskIds"}, {"original_string": "private Map<String, Set<TaskId>> stateChangelogTopicToTaskIds;", "modifier": "private", "type": "Map<String, Set<TaskId>>", "declarator": "stateChangelogTopicToTaskIds", "var_name": "stateChangelogTopicToTaskIds"}, {"original_string": "private Map<String, Set<TaskId>> internalSourceTopicToTaskIds;", "modifier": "private", "type": "Map<String, Set<TaskId>>", "declarator": "internalSourceTopicToTaskIds", "var_name": "internalSourceTopicToTaskIds"}, {"original_string": "private Map<TaskId, Set<TopicPartition>> standbyTasks;", "modifier": "private", "type": "Map<TaskId, Set<TopicPartition>>", "declarator": "standbyTasks", "var_name": "standbyTasks"}, {"original_string": "private InternalTopicManager internalTopicManager;", "modifier": "private", "type": "InternalTopicManager", "declarator": "internalTopicManager", "var_name": "internalTopicManager"}], "methods": [{"identifier": "configure", "parameters": "(Map<String, ?> configs)", "modifiers": "@Override public", "return": "void", "signature": "void configure(Map<String, ?> configs)", "full_signature": "@Override public void configure(Map<String, ?> configs)", "class_method_signature": "StreamPartitionAssignor.configure(Map<String, ?> configs)", "testcase": false, "constructor": false}, {"identifier": "name", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String name()", "full_signature": "@Override public String name()", "class_method_signature": "StreamPartitionAssignor.name()", "testcase": false, "constructor": false}, {"identifier": "subscription", "parameters": "(Set<String> topics)", "modifiers": "@Override public", "return": "Subscription", "signature": "Subscription subscription(Set<String> topics)", "full_signature": "@Override public Subscription subscription(Set<String> topics)", "class_method_signature": "StreamPartitionAssignor.subscription(Set<String> topics)", "testcase": false, "constructor": false}, {"identifier": "prepareTopic", "parameters": "(Map<String, Set<TaskId>> topicToTaskIds,\n                                                            boolean compactTopic,\n                                                            boolean postPartitionPhase)", "modifiers": "private", "return": "Map<TopicPartition, PartitionInfo>", "signature": "Map<TopicPartition, PartitionInfo> prepareTopic(Map<String, Set<TaskId>> topicToTaskIds,\n                                                            boolean compactTopic,\n                                                            boolean postPartitionPhase)", "full_signature": "private Map<TopicPartition, PartitionInfo> prepareTopic(Map<String, Set<TaskId>> topicToTaskIds,\n                                                            boolean compactTopic,\n                                                            boolean postPartitionPhase)", "class_method_signature": "StreamPartitionAssignor.prepareTopic(Map<String, Set<TaskId>> topicToTaskIds,\n                                                            boolean compactTopic,\n                                                            boolean postPartitionPhase)", "testcase": false, "constructor": false}, {"identifier": "assign", "parameters": "(Cluster metadata, Map<String, Subscription> subscriptions)", "modifiers": "@Override public", "return": "Map<String, Assignment>", "signature": "Map<String, Assignment> assign(Cluster metadata, Map<String, Subscription> subscriptions)", "full_signature": "@Override public Map<String, Assignment> assign(Cluster metadata, Map<String, Subscription> subscriptions)", "class_method_signature": "StreamPartitionAssignor.assign(Cluster metadata, Map<String, Subscription> subscriptions)", "testcase": false, "constructor": false}, {"identifier": "onAssignment", "parameters": "(Assignment assignment)", "modifiers": "@Override public", "return": "void", "signature": "void onAssignment(Assignment assignment)", "full_signature": "@Override public void onAssignment(Assignment assignment)", "class_method_signature": "StreamPartitionAssignor.onAssignment(Assignment assignment)", "testcase": false, "constructor": false}, {"identifier": "ensureCopartitioning", "parameters": "(Collection<Set<String>> copartitionGroups, Map<Integer, Set<String>> internalTopicGroups, Cluster metadata)", "modifiers": "private", "return": "void", "signature": "void ensureCopartitioning(Collection<Set<String>> copartitionGroups, Map<Integer, Set<String>> internalTopicGroups, Cluster metadata)", "full_signature": "private void ensureCopartitioning(Collection<Set<String>> copartitionGroups, Map<Integer, Set<String>> internalTopicGroups, Cluster metadata)", "class_method_signature": "StreamPartitionAssignor.ensureCopartitioning(Collection<Set<String>> copartitionGroups, Map<Integer, Set<String>> internalTopicGroups, Cluster metadata)", "testcase": false, "constructor": false}, {"identifier": "ensureCopartitioning", "parameters": "(Set<String> copartitionGroup, Set<String> internalTopics, Cluster metadata)", "modifiers": "private", "return": "void", "signature": "void ensureCopartitioning(Set<String> copartitionGroup, Set<String> internalTopics, Cluster metadata)", "full_signature": "private void ensureCopartitioning(Set<String> copartitionGroup, Set<String> internalTopics, Cluster metadata)", "class_method_signature": "StreamPartitionAssignor.ensureCopartitioning(Set<String> copartitionGroup, Set<String> internalTopics, Cluster metadata)", "testcase": false, "constructor": false}, {"identifier": "tasksForState", "parameters": "(String stateName)", "modifiers": "public", "return": "Set<TaskId>", "signature": "Set<TaskId> tasksForState(String stateName)", "full_signature": "public Set<TaskId> tasksForState(String stateName)", "class_method_signature": "StreamPartitionAssignor.tasksForState(String stateName)", "testcase": false, "constructor": false}, {"identifier": "tasksForPartition", "parameters": "(TopicPartition partition)", "modifiers": "public", "return": "Set<TaskId>", "signature": "Set<TaskId> tasksForPartition(TopicPartition partition)", "full_signature": "public Set<TaskId> tasksForPartition(TopicPartition partition)", "class_method_signature": "StreamPartitionAssignor.tasksForPartition(TopicPartition partition)", "testcase": false, "constructor": false}, {"identifier": "standbyTasks", "parameters": "()", "modifiers": "public", "return": "Map<TaskId, Set<TopicPartition>>", "signature": "Map<TaskId, Set<TopicPartition>> standbyTasks()", "full_signature": "public Map<TaskId, Set<TopicPartition>> standbyTasks()", "class_method_signature": "StreamPartitionAssignor.standbyTasks()", "testcase": false, "constructor": false}, {"identifier": "setInternalTopicManager", "parameters": "(InternalTopicManager internalTopicManager)", "modifiers": "public", "return": "void", "signature": "void setInternalTopicManager(InternalTopicManager internalTopicManager)", "full_signature": "public void setInternalTopicManager(InternalTopicManager internalTopicManager)", "class_method_signature": "StreamPartitionAssignor.setInternalTopicManager(InternalTopicManager internalTopicManager)", "testcase": false, "constructor": false}], "file": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamPartitionAssignor.java"}, "focal_method": {"identifier": "subscription", "parameters": "(Set<String> topics)", "modifiers": "@Override public", "return": "Subscription", "body": "@Override\n    public Subscription subscription(Set<String> topics) {\n        // Adds the following information to subscription\n        // 1. Client UUID (a unique id assigned to an instance of KafkaStreams)\n        // 2. Task ids of previously running tasks\n        // 3. Task ids of valid local states on the client's state directory.\n\n        Set<TaskId> prevTasks = streamThread.prevTasks();\n        Set<TaskId> standbyTasks = streamThread.cachedTasks();\n        standbyTasks.removeAll(prevTasks);\n        SubscriptionInfo data = new SubscriptionInfo(streamThread.processId, prevTasks, standbyTasks);\n\n        return new Subscription(new ArrayList<>(topics), data.encode());\n    }", "signature": "Subscription subscription(Set<String> topics)", "full_signature": "@Override public Subscription subscription(Set<String> topics)", "class_method_signature": "StreamPartitionAssignor.subscription(Set<String> topics)", "testcase": false, "constructor": false, "invocations": ["prevTasks", "cachedTasks", "removeAll", "encode"]}, "repository": {"repo_id": 135978112, "url": "https://github.com/anurnomeru/kafka-0.10.0.1-source-reading", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 2953, "license": "licensed"}}