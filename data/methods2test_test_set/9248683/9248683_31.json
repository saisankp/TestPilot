{"test_class": {"identifier": "RestrictionsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String propertyName = \"propertyName\";", "modifier": "private final", "type": "String", "declarator": "propertyName = \"propertyName\"", "var_name": "propertyName"}, {"original_string": "private final String value = \"test property value\";", "modifier": "private final", "type": "String", "declarator": "value = \"test property value\"", "var_name": "value"}, {"original_string": "private final Integer from = 1;", "modifier": "private final", "type": "Integer", "declarator": "from = 1", "var_name": "from"}, {"original_string": "private final Integer to = 10;", "modifier": "private final", "type": "Integer", "declarator": "to = 10", "var_name": "to"}, {"original_string": "private final String[] values = { \"test\", \"value\", \"array\" };", "modifier": "private final", "type": "String[]", "declarator": "values = { \"test\", \"value\", \"array\" }", "var_name": "values"}, {"original_string": "private final Criterion left = new Criterion() {\n        @Override\n        public String toString() {\n            return \"left\";\n        }\n    };", "modifier": "private final", "type": "Criterion", "declarator": "left = new Criterion() {\n        @Override\n        public String toString() {\n            return \"left\";\n        }\n    }", "var_name": "left"}, {"original_string": "private final Criterion right = new Criterion() {\n        @Override\n        public String toString() {\n            return \"right\";\n        }\n    };", "modifier": "private final", "type": "Criterion", "declarator": "right = new Criterion() {\n        @Override\n        public String toString() {\n            return \"right\";\n        }\n    }", "var_name": "right"}], "file": "seeking-core/src/test/java/com/eharmony/matching/seeking/query/criterion/RestrictionsTest.java"}, "test_case": {"identifier": "range_IllegalArgumentException", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void range_IllegalArgumentException() {\n        Restrictions.range(17, 10);\n    }", "signature": "void range_IllegalArgumentException()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void range_IllegalArgumentException()", "class_method_signature": "RestrictionsTest.range_IllegalArgumentException()", "testcase": true, "constructor": false, "invocations": ["range"]}, "focal_class": {"identifier": "Restrictions", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "Restrictions", "parameters": "()", "modifiers": "private", "return": "", "signature": " Restrictions()", "full_signature": "private  Restrictions()", "class_method_signature": "Restrictions.Restrictions()", "testcase": false, "constructor": true}, {"identifier": "eq", "parameters": "(String propertyName, Object value)", "modifiers": "public static", "return": "EqualityExpression", "signature": "EqualityExpression eq(String propertyName, Object value)", "full_signature": "public static EqualityExpression eq(String propertyName, Object value)", "class_method_signature": "Restrictions.eq(String propertyName, Object value)", "testcase": false, "constructor": false}, {"identifier": "ne", "parameters": "(String propertyName, Object value)", "modifiers": "public static", "return": "EqualityExpression", "signature": "EqualityExpression ne(String propertyName, Object value)", "full_signature": "public static EqualityExpression ne(String propertyName, Object value)", "class_method_signature": "Restrictions.ne(String propertyName, Object value)", "testcase": false, "constructor": false}, {"identifier": "lt", "parameters": "(String propertyName, Object value)", "modifiers": "public static", "return": "EqualityExpression", "signature": "EqualityExpression lt(String propertyName, Object value)", "full_signature": "public static EqualityExpression lt(String propertyName, Object value)", "class_method_signature": "Restrictions.lt(String propertyName, Object value)", "testcase": false, "constructor": false}, {"identifier": "lte", "parameters": "(String propertyName, Object value)", "modifiers": "public static", "return": "EqualityExpression", "signature": "EqualityExpression lte(String propertyName, Object value)", "full_signature": "public static EqualityExpression lte(String propertyName, Object value)", "class_method_signature": "Restrictions.lte(String propertyName, Object value)", "testcase": false, "constructor": false}, {"identifier": "gt", "parameters": "(String propertyName, Object value)", "modifiers": "public static", "return": "EqualityExpression", "signature": "EqualityExpression gt(String propertyName, Object value)", "full_signature": "public static EqualityExpression gt(String propertyName, Object value)", "class_method_signature": "Restrictions.gt(String propertyName, Object value)", "testcase": false, "constructor": false}, {"identifier": "gte", "parameters": "(String propertyName, Object value)", "modifiers": "public static", "return": "EqualityExpression", "signature": "EqualityExpression gte(String propertyName, Object value)", "full_signature": "public static EqualityExpression gte(String propertyName, Object value)", "class_method_signature": "Restrictions.gte(String propertyName, Object value)", "testcase": false, "constructor": false}, {"identifier": "between", "parameters": "(String propertyName, Object from, Object to)", "modifiers": "public static", "return": "RangeExpression", "signature": "RangeExpression between(String propertyName, Object from, Object to)", "full_signature": "public static RangeExpression between(String propertyName, Object from, Object to)", "class_method_signature": "Restrictions.between(String propertyName, Object from, Object to)", "testcase": false, "constructor": false}, {"identifier": "discreteRange", "parameters": "(String propertyName, int from, int to)", "modifiers": "public static", "return": "SetExpression", "signature": "SetExpression discreteRange(String propertyName, int from, int to)", "full_signature": "public static SetExpression discreteRange(String propertyName, int from, int to)", "class_method_signature": "Restrictions.discreteRange(String propertyName, int from, int to)", "testcase": false, "constructor": false}, {"identifier": "range", "parameters": "(int from, int to)", "modifiers": "protected static", "return": "Integer[]", "signature": "Integer[] range(int from, int to)", "full_signature": "protected static Integer[] range(int from, int to)", "class_method_signature": "Restrictions.range(int from, int to)", "testcase": false, "constructor": false}, {"identifier": "in", "parameters": "(String propertyName, Object[] values)", "modifiers": "public static", "return": "SetExpression", "signature": "SetExpression in(String propertyName, Object[] values)", "full_signature": "public static SetExpression in(String propertyName, Object[] values)", "class_method_signature": "Restrictions.in(String propertyName, Object[] values)", "testcase": false, "constructor": false}, {"identifier": "in", "parameters": "(String propertyName, Collection<? extends Object> values)", "modifiers": "public static", "return": "SetExpression", "signature": "SetExpression in(String propertyName, Collection<? extends Object> values)", "full_signature": "public static SetExpression in(String propertyName, Collection<? extends Object> values)", "class_method_signature": "Restrictions.in(String propertyName, Collection<? extends Object> values)", "testcase": false, "constructor": false}, {"identifier": "notIn", "parameters": "(String propertyName, Object[] values)", "modifiers": "public static", "return": "SetExpression", "signature": "SetExpression notIn(String propertyName, Object[] values)", "full_signature": "public static SetExpression notIn(String propertyName, Object[] values)", "class_method_signature": "Restrictions.notIn(String propertyName, Object[] values)", "testcase": false, "constructor": false}, {"identifier": "notIn", "parameters": "(String propertyName, Collection<? extends Object> values)", "modifiers": "public static", "return": "SetExpression", "signature": "SetExpression notIn(String propertyName, Collection<? extends Object> values)", "full_signature": "public static SetExpression notIn(String propertyName, Collection<? extends Object> values)", "class_method_signature": "Restrictions.notIn(String propertyName, Collection<? extends Object> values)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(String propertyName, Object value)", "modifiers": "public static", "return": "SetExpression", "signature": "SetExpression contains(String propertyName, Object value)", "full_signature": "public static SetExpression contains(String propertyName, Object value)", "class_method_signature": "Restrictions.contains(String propertyName, Object value)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(String propertyName, Object[] values)", "modifiers": "public static", "return": "SetExpression", "signature": "SetExpression contains(String propertyName, Object[] values)", "full_signature": "public static SetExpression contains(String propertyName, Object[] values)", "class_method_signature": "Restrictions.contains(String propertyName, Object[] values)", "testcase": false, "constructor": false}, {"identifier": "isNull", "parameters": "(String propertyName)", "modifiers": "public static", "return": "UnaryExpression", "signature": "UnaryExpression isNull(String propertyName)", "full_signature": "public static UnaryExpression isNull(String propertyName)", "class_method_signature": "Restrictions.isNull(String propertyName)", "testcase": false, "constructor": false}, {"identifier": "isNotNull", "parameters": "(String propertyName)", "modifiers": "public static", "return": "UnaryExpression", "signature": "UnaryExpression isNotNull(String propertyName)", "full_signature": "public static UnaryExpression isNotNull(String propertyName)", "class_method_signature": "Restrictions.isNotNull(String propertyName)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(String propertyName)", "modifiers": "public static", "return": "UnaryExpression", "signature": "UnaryExpression isEmpty(String propertyName)", "full_signature": "public static UnaryExpression isEmpty(String propertyName)", "class_method_signature": "Restrictions.isEmpty(String propertyName)", "testcase": false, "constructor": false}, {"identifier": "isNotEmpty", "parameters": "(String propertyName)", "modifiers": "public static", "return": "UnaryExpression", "signature": "UnaryExpression isNotEmpty(String propertyName)", "full_signature": "public static UnaryExpression isNotEmpty(String propertyName)", "class_method_signature": "Restrictions.isNotEmpty(String propertyName)", "testcase": false, "constructor": false}, {"identifier": "nativeQuery", "parameters": "(Class<T> type, T expression)", "modifiers": "public static", "return": "NativeExpression", "signature": "NativeExpression nativeQuery(Class<T> type, T expression)", "full_signature": "public static NativeExpression nativeQuery(Class<T> type, T expression)", "class_method_signature": "Restrictions.nativeQuery(Class<T> type, T expression)", "testcase": false, "constructor": false}, {"identifier": "and", "parameters": "(Criterion... criteria)", "modifiers": "public static", "return": "Conjunction", "signature": "Conjunction and(Criterion... criteria)", "full_signature": "public static Conjunction and(Criterion... criteria)", "class_method_signature": "Restrictions.and(Criterion... criteria)", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(Criterion... criteria)", "modifiers": "public static", "return": "Disjunction", "signature": "Disjunction or(Criterion... criteria)", "full_signature": "public static Disjunction or(Criterion... criteria)", "class_method_signature": "Restrictions.or(Criterion... criteria)", "testcase": false, "constructor": false}, {"identifier": "within", "parameters": "(\n            String propertyName, N x, N y, N distance)", "modifiers": "public static", "return": "Distance2dExpression<N>", "signature": "Distance2dExpression<N> within(\n            String propertyName, N x, N y, N distance)", "full_signature": "public static Distance2dExpression<N> within(\n            String propertyName, N x, N y, N distance)", "class_method_signature": "Restrictions.within(\n            String propertyName, N x, N y, N distance)", "testcase": false, "constructor": false}], "file": "seeking-core/src/main/java/com/eharmony/matching/seeking/query/criterion/Restrictions.java"}, "focal_method": {"identifier": "range", "parameters": "(int from, int to)", "modifiers": "protected static", "return": "Integer[]", "body": "protected static Integer[] range(int from, int to) {\n        if (from > to) {\n            throw new IllegalArgumentException(\"from must be <= to (\" + from\n                    + \",\" + to + \")\");\n        }\n        int n = to - from + 1;\n        Integer[] range = new Integer[n];\n        for (int i = 0; i < n; i++) {\n            range[i] = from + i;\n        }\n        return range;\n    }", "signature": "Integer[] range(int from, int to)", "full_signature": "protected static Integer[] range(int from, int to)", "class_method_signature": "Restrictions.range(int from, int to)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 9248683, "url": "https://github.com/eHarmony/seeking", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 7, "size": 194, "license": "licensed"}}