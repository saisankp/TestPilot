{"test_class": {"identifier": "TrainerPresenterTest", "superclass": "", "interfaces": "", "fields": [], "file": "app/src/test/java/com/mccorby/federatedlearning/app/presentation/TrainerPresenterTest.java"}, "test_case": {"identifier": "testGetTrainingDataIsPassedToTheView", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetTrainingDataIsPassedToTheView() {\n        // Given\n        int numberClients = 3;\n        UseCaseExecutor executor = mock(UseCaseExecutor.class);\n        FederatedRepository repository = mock(FederatedRepository.class);\n        TrainerView view = mock(TrainerView.class);\n        ModelConfiguration modelConfiguration = mock(ModelConfiguration.class);\n        UseCaseThreadExecutor threadExecutor = mock(UseCaseThreadExecutor.class);\n\n        // When\n        TrainerPresenter cut = new TrainerPresenter(view,\n                modelConfiguration,\n                repository,\n                executor,\n                threadExecutor,\n                numberClients);\n        cut.retrieveData();\n\n        // Then\n        Mockito.verify(executor).execute(any(GetTrainingData.class));\n    }", "signature": "void testGetTrainingDataIsPassedToTheView()", "full_signature": "@Test public void testGetTrainingDataIsPassedToTheView()", "class_method_signature": "TrainerPresenterTest.testGetTrainingDataIsPassedToTheView()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "mock", "mock", "retrieveData", "execute", "verify", "any"]}, "focal_class": {"identifier": "TrainerPresenter", "superclass": "", "interfaces": "implements UseCaseCallback<FederatedRepository>", "fields": [{"original_string": "private final TrainerView view;", "modifier": "private final", "type": "TrainerView", "declarator": "view", "var_name": "view"}, {"original_string": "private int dataSetSplits;", "modifier": "private", "type": "int", "declarator": "dataSetSplits", "var_name": "dataSetSplits"}, {"original_string": "private final FederatedRepository repository;", "modifier": "private final", "type": "FederatedRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "private UseCaseThreadExecutor threadExecutor;", "modifier": "private", "type": "UseCaseThreadExecutor", "declarator": "threadExecutor", "var_name": "threadExecutor"}, {"original_string": "private ModelConfiguration modelConfiguration;", "modifier": "private", "type": "ModelConfiguration", "declarator": "modelConfiguration", "var_name": "modelConfiguration"}, {"original_string": "private final UseCaseExecutor executor;", "modifier": "private final", "type": "UseCaseExecutor", "declarator": "executor", "var_name": "executor"}, {"original_string": "private List<FederatedModel> models;", "modifier": "private", "type": "List<FederatedModel>", "declarator": "models", "var_name": "models"}, {"original_string": "private FederatedDataSet testDataSet;", "modifier": "private", "type": "FederatedDataSet", "declarator": "testDataSet", "var_name": "testDataSet"}], "methods": [{"identifier": "TrainerPresenter", "parameters": "(TrainerView view,\n                            ModelConfiguration modelConfiguration,\n                            FederatedRepository repository,\n                            UseCaseExecutor executor,\n                            UseCaseThreadExecutor threadExecutor,\n                            @Named(\"dataset_splits\")\n                            int dataSetSplits)", "modifiers": "@Inject public", "return": "", "signature": " TrainerPresenter(TrainerView view,\n                            ModelConfiguration modelConfiguration,\n                            FederatedRepository repository,\n                            UseCaseExecutor executor,\n                            UseCaseThreadExecutor threadExecutor,\n                            @Named(\"dataset_splits\")\n                            int dataSetSplits)", "full_signature": "@Inject public  TrainerPresenter(TrainerView view,\n                            ModelConfiguration modelConfiguration,\n                            FederatedRepository repository,\n                            UseCaseExecutor executor,\n                            UseCaseThreadExecutor threadExecutor,\n                            @Named(\"dataset_splits\")\n                            int dataSetSplits)", "class_method_signature": "TrainerPresenter.TrainerPresenter(TrainerView view,\n                            ModelConfiguration modelConfiguration,\n                            FederatedRepository repository,\n                            UseCaseExecutor executor,\n                            UseCaseThreadExecutor threadExecutor,\n                            @Named(\"dataset_splits\")\n                            int dataSetSplits)", "testcase": false, "constructor": true}, {"identifier": "retrieveData", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void retrieveData()", "full_signature": "public void retrieveData()", "class_method_signature": "TrainerPresenter.retrieveData()", "testcase": false, "constructor": false}, {"identifier": "onSuccess", "parameters": "(FederatedRepository result)", "modifiers": "@Override public", "return": "void", "signature": "void onSuccess(FederatedRepository result)", "full_signature": "@Override public void onSuccess(FederatedRepository result)", "class_method_signature": "TrainerPresenter.onSuccess(FederatedRepository result)", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(UseCaseError error)", "modifiers": "@Override public", "return": "void", "signature": "void onError(UseCaseError error)", "full_signature": "@Override public void onError(UseCaseError error)", "class_method_signature": "TrainerPresenter.onError(UseCaseError error)", "testcase": false, "constructor": false}, {"identifier": "sendGradient", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void sendGradient()", "full_signature": "public void sendGradient()", "class_method_signature": "TrainerPresenter.sendGradient()", "testcase": false, "constructor": false}, {"identifier": "getUpdatedGradient", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void getUpdatedGradient()", "full_signature": "public void getUpdatedGradient()", "class_method_signature": "TrainerPresenter.getUpdatedGradient()", "testcase": false, "constructor": false}, {"identifier": "trainNewModel", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void trainNewModel()", "full_signature": "public void trainNewModel()", "class_method_signature": "TrainerPresenter.trainNewModel()", "testcase": false, "constructor": false}, {"identifier": "train", "parameters": "(int modelNumber)", "modifiers": "private", "return": "void", "signature": "void train(int modelNumber)", "full_signature": "private void train(int modelNumber)", "class_method_signature": "TrainerPresenter.train(int modelNumber)", "testcase": false, "constructor": false}, {"identifier": "getTrainingSubDataSet", "parameters": "(Integer modelNumber, FederatedDataSet trainingData)", "modifiers": "private", "return": "FederatedDataSet", "signature": "FederatedDataSet getTrainingSubDataSet(Integer modelNumber, FederatedDataSet trainingData)", "full_signature": "private FederatedDataSet getTrainingSubDataSet(Integer modelNumber, FederatedDataSet trainingData)", "class_method_signature": "TrainerPresenter.getTrainingSubDataSet(Integer modelNumber, FederatedDataSet trainingData)", "testcase": false, "constructor": false}, {"identifier": "predict", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void predict()", "full_signature": "public void predict()", "class_method_signature": "TrainerPresenter.predict()", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/mccorby/federatedlearning/app/presentation/TrainerPresenter.java"}, "focal_method": {"identifier": "retrieveData", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void retrieveData() {\n        UseCase useCase = new GetTrainingData(this, repository);\n        executor.execute(useCase);\n    }", "signature": "void retrieveData()", "full_signature": "public void retrieveData()", "class_method_signature": "TrainerPresenter.retrieveData()", "testcase": false, "constructor": false, "invocations": ["execute"]}, "repository": {"repo_id": 108563514, "url": "https://github.com/mccorby/FederatedAndroidTrainer", "language": "Java", "is_fork": false, "fork_count": 24, "stargazer_count": 121, "size": 292, "license": "licensed"}}