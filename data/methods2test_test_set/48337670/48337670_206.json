{"test_class": {"identifier": "HexUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "bundles/org.openhab.core/src/test/java/org/openhab/core/util/HexUtilsTest.java"}, "test_case": {"identifier": "testHexToBytesWithMultiCharDelimiter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHexToBytesWithMultiCharDelimiter() {\n        byte[] result = HexUtils.hexToBytes(\"41-:-42-:-43-:-44\", \"-:-\");\n        assertEquals(\"ABCD\", new String(result));\n    }", "signature": "void testHexToBytesWithMultiCharDelimiter()", "full_signature": "@Test public void testHexToBytesWithMultiCharDelimiter()", "class_method_signature": "HexUtilsTest.testHexToBytesWithMultiCharDelimiter()", "testcase": true, "constructor": false, "invocations": ["hexToBytes", "assertEquals"]}, "focal_class": {"identifier": "HexUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final byte[] HEX = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',\n            'F' };", "modifier": "private static final", "type": "byte[]", "declarator": "HEX = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',\n            'F' }", "var_name": "HEX"}, {"original_string": "private static final int ASCII_DIGITS_START_POSITION = 48;", "modifier": "private static final", "type": "int", "declarator": "ASCII_DIGITS_START_POSITION = 48", "var_name": "ASCII_DIGITS_START_POSITION"}, {"original_string": "private static final int ASCII_UPPERCASE_LETTERS_START_POSITION = 65;", "modifier": "private static final", "type": "int", "declarator": "ASCII_UPPERCASE_LETTERS_START_POSITION = 65", "var_name": "ASCII_UPPERCASE_LETTERS_START_POSITION"}], "methods": [{"identifier": "HexUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " HexUtils()", "full_signature": "private  HexUtils()", "class_method_signature": "HexUtils.HexUtils()", "testcase": false, "constructor": true}, {"identifier": "bytesToHex", "parameters": "(byte[] bytes, @Nullable CharSequence delimiter)", "modifiers": "public static", "return": "String", "signature": "String bytesToHex(byte[] bytes, @Nullable CharSequence delimiter)", "full_signature": "public static String bytesToHex(byte[] bytes, @Nullable CharSequence delimiter)", "class_method_signature": "HexUtils.bytesToHex(byte[] bytes, @Nullable CharSequence delimiter)", "testcase": false, "constructor": false}, {"identifier": "bytesToHexInt", "parameters": "(byte[] bytes, CharSequence delimiter)", "modifiers": "private static", "return": "String", "signature": "String bytesToHexInt(byte[] bytes, CharSequence delimiter)", "full_signature": "private static String bytesToHexInt(byte[] bytes, CharSequence delimiter)", "class_method_signature": "HexUtils.bytesToHexInt(byte[] bytes, CharSequence delimiter)", "testcase": false, "constructor": false}, {"identifier": "bytesToHex", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "String", "signature": "String bytesToHex(byte[] bytes)", "full_signature": "public static String bytesToHex(byte[] bytes)", "class_method_signature": "HexUtils.bytesToHex(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "byteToHex", "parameters": "(final byte value)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] byteToHex(final byte value)", "full_signature": "public static byte[] byteToHex(final byte value)", "class_method_signature": "HexUtils.byteToHex(final byte value)", "testcase": false, "constructor": false}, {"identifier": "hexToBytes", "parameters": "(String hexString, String delimiter)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] hexToBytes(String hexString, String delimiter)", "full_signature": "public static byte[] hexToBytes(String hexString, String delimiter)", "class_method_signature": "HexUtils.hexToBytes(String hexString, String delimiter)", "testcase": false, "constructor": false}, {"identifier": "hexToBytes", "parameters": "(String hexString)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] hexToBytes(String hexString)", "full_signature": "public static byte[] hexToBytes(String hexString)", "class_method_signature": "HexUtils.hexToBytes(String hexString)", "testcase": false, "constructor": false}, {"identifier": "hexToByte", "parameters": "(byte high, byte low)", "modifiers": "public static", "return": "byte", "signature": "byte hexToByte(byte high, byte low)", "full_signature": "public static byte hexToByte(byte high, byte low)", "class_method_signature": "HexUtils.hexToByte(byte high, byte low)", "testcase": false, "constructor": false}, {"identifier": "unhex", "parameters": "(byte value)", "modifiers": "private static", "return": "byte", "signature": "byte unhex(byte value)", "full_signature": "private static byte unhex(byte value)", "class_method_signature": "HexUtils.unhex(byte value)", "testcase": false, "constructor": false}], "file": "bundles/org.openhab.core/src/main/java/org/openhab/core/util/HexUtils.java"}, "focal_method": {"identifier": "hexToBytes", "parameters": "(String hexString, String delimiter)", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] hexToBytes(String hexString, String delimiter) {\n        // first convert to upper case to ease the rest\n        String ucHexString = hexString.toUpperCase();\n\n        final String[] splitted = ucHexString.split(delimiter);\n\n        final byte[] bytes = new byte[splitted.length];\n        int pos = 0;\n        for (final String part : splitted) {\n            final byte[] in = part.getBytes(StandardCharsets.UTF_8);\n            if (in.length != 2) {\n                throw new IllegalArgumentException(\"hexString needs to have an even length: \" + hexString);\n            }\n            bytes[pos++] = (byte) (unhex(in[0]) << 4 | unhex(in[1]));\n        }\n        return bytes;\n    }", "signature": "byte[] hexToBytes(String hexString, String delimiter)", "full_signature": "public static byte[] hexToBytes(String hexString, String delimiter)", "class_method_signature": "HexUtils.hexToBytes(String hexString, String delimiter)", "testcase": false, "constructor": false, "invocations": ["toUpperCase", "split", "getBytes", "unhex", "unhex"]}, "repository": {"repo_id": 48337670, "url": "https://github.com/openhab/openhab-core", "stars": 241, "created": "12/20/2015 9:23:20 PM +00:00", "updates": "2020-01-27T16:55:53+00:00", "fork": "False", "license": "licensed"}}