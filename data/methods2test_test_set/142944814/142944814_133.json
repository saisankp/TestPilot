{"test_class": {"identifier": "FailoverHandlerChainTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "core/transport/src/test/java/hera/client/FailoverHandlerChainTest.java"}, "test_case": {"identifier": "testHandle", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testHandle() {\n    // given\n    final Set<Object> usedSet = new HashSet<>();\n    final Object expected = randomUUID().toString();\n    final ComparableFailoverHandler p1 = new ComparableFailoverHandler() {\n      @Getter\n      protected final int priority = 1;\n\n      @Override\n      public <T> Response<T> handle(Invocation<T> invocation, Response<T> response) {\n        usedSet.add(this);\n        return response;\n      }\n    };\n    final ComparableFailoverHandler p2 = new ComparableFailoverHandler() {\n      @Getter\n      protected final int priority = 2;\n\n      @SuppressWarnings(\"unchecked\")\n      @Override\n      public <T> Response<T> handle(Invocation<T> invocation, Response<T> response) {\n        usedSet.add(this);\n        return (Response<T>) Response.success(expected);\n      }\n    };\n    final ComparableFailoverHandler p3 = new ComparableFailoverHandler() {\n      @Getter\n      protected final int priority = 3;\n\n      @Override\n      public <T> Response<T> handle(Invocation<T> invocation, Response<T> response) {\n        fail(\"Should not run\");\n        return response;\n      }\n    };\n    final List<ComparableFailoverHandler> failoverHandlers = asList(p2, p3, p1);\n\n    // then\n    final FailoverHandlerChain failoverHandlerChain = new FailoverHandlerChain(failoverHandlers);\n    final Response<Object> response = Response.fail(new UnsupportedOperationException());\n    final Response<Object> handled = failoverHandlerChain.handle(null, response);\n    assertEquals(expected, handled.getValue());\n    assertEquals(2, usedSet.size());\n  }", "signature": "void testHandle()", "full_signature": "@Test public void testHandle()", "class_method_signature": "FailoverHandlerChainTest.testHandle()", "testcase": true, "constructor": false, "invocations": ["toString", "randomUUID", "add", "add", "success", "fail", "asList", "fail", "handle", "assertEquals", "getValue", "assertEquals", "size"]}, "focal_class": {"identifier": "FailoverHandlerChain", "superclass": "", "interfaces": "implements FailoverHandler", "fields": [{"original_string": "protected final transient Logger logger = getLogger(getClass());", "modifier": "protected final transient", "type": "Logger", "declarator": "logger = getLogger(getClass())", "var_name": "logger"}, {"original_string": "protected final List<ComparableFailoverHandler> failoverHandlers;", "modifier": "protected final", "type": "List<ComparableFailoverHandler>", "declarator": "failoverHandlers", "var_name": "failoverHandlers"}], "methods": [{"identifier": "FailoverHandlerChain", "parameters": "(final List<ComparableFailoverHandler> failoverHandlers)", "modifiers": "", "return": "", "signature": " FailoverHandlerChain(final List<ComparableFailoverHandler> failoverHandlers)", "full_signature": "  FailoverHandlerChain(final List<ComparableFailoverHandler> failoverHandlers)", "class_method_signature": "FailoverHandlerChain.FailoverHandlerChain(final List<ComparableFailoverHandler> failoverHandlers)", "testcase": false, "constructor": true}, {"identifier": "handle", "parameters": "(final Invocation<T> invocation, final Response<T> response)", "modifiers": "@Override public", "return": "Response<T>", "signature": "Response<T> handle(final Invocation<T> invocation, final Response<T> response)", "full_signature": "@Override public Response<T> handle(final Invocation<T> invocation, final Response<T> response)", "class_method_signature": "FailoverHandlerChain.handle(final Invocation<T> invocation, final Response<T> response)", "testcase": false, "constructor": false}], "file": "core/transport/src/main/java/hera/client/FailoverHandlerChain.java"}, "focal_method": {"identifier": "handle", "parameters": "(final Invocation<T> invocation, final Response<T> response)", "modifiers": "@Override public", "return": "Response<T>", "body": "@Override\n  public <T> Response<T> handle(final Invocation<T> invocation, final Response<T> response) {\n    logger.debug(\"Handle {} with failover handler chain (handlers: {})\", response.getError(),\n        this.failoverHandlers);\n    Response<T> next = response;\n    for (final FailoverHandler failoverHandler : this.failoverHandlers) {\n      if (null == next.getError()) {\n        break;\n      }\n      logger.trace(\"Handle with {}\", failoverHandler);\n      next = failoverHandler.handle(invocation, next);\n    }\n    return next;\n  }", "signature": "Response<T> handle(final Invocation<T> invocation, final Response<T> response)", "full_signature": "@Override public Response<T> handle(final Invocation<T> invocation, final Response<T> response)", "class_method_signature": "FailoverHandlerChain.handle(final Invocation<T> invocation, final Response<T> response)", "testcase": false, "constructor": false, "invocations": ["debug", "getError", "getError", "trace", "handle"]}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}