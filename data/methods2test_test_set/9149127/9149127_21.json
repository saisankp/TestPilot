{"test_class": {"identifier": "FileComparatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "mycontainer-components/mycontainer-commons/src/test/java/com/googlecode/mycontainer/commons/file/FileComparatorTest.java"}, "test_case": {"identifier": "testCompareFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCompareFile() {\n\t\tassertEquals(0, FileUtil.compare(\"pom.xml\", \"pom.xml\"));\n\t\tassertTrue(FileUtil.compare(\"pom.xml\",\n\t\t\t\t\"src/test/resources/log4j.properties\") != 0);\n\n\t\tassertTrue(FileUtil.compare(\"pom.xml\", \"pom-notfound.xml\") < 0);\n\t\tassertTrue(FileUtil.compare(\"pom-notfound.xml\", \"pom.xml\") > 0);\n\t\tassertTrue(FileUtil.compare(\"pom-notfound.xml\", \"pom-notfound-2.xml\") == 0);\n\t}", "signature": "void testCompareFile()", "full_signature": "@Test public void testCompareFile()", "class_method_signature": "FileComparatorTest.testCompareFile()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "compare", "assertTrue", "compare", "assertTrue", "compare", "assertTrue", "compare", "assertTrue", "compare"]}, "focal_class": {"identifier": "FileComparator", "superclass": "", "interfaces": "implements Comparator<File>, FileFilter", "fields": [{"original_string": "private FileFilter filter = this;", "modifier": "private", "type": "FileFilter", "declarator": "filter = this", "var_name": "filter"}], "methods": [{"identifier": "getFilter", "parameters": "()", "modifiers": "public", "return": "FileFilter", "signature": "FileFilter getFilter()", "full_signature": "public FileFilter getFilter()", "class_method_signature": "FileComparator.getFilter()", "testcase": false, "constructor": false}, {"identifier": "setFilter", "parameters": "(FileFilter filter)", "modifiers": "public", "return": "void", "signature": "void setFilter(FileFilter filter)", "full_signature": "public void setFilter(FileFilter filter)", "class_method_signature": "FileComparator.setFilter(FileFilter filter)", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(File f1, File f2)", "modifiers": "public", "return": "int", "signature": "int compare(File f1, File f2)", "full_signature": "public int compare(File f1, File f2)", "class_method_signature": "FileComparator.compare(File f1, File f2)", "testcase": false, "constructor": false}, {"identifier": "accept", "parameters": "(File file)", "modifiers": "public", "return": "boolean", "signature": "boolean accept(File file)", "full_signature": "public boolean accept(File file)", "class_method_signature": "FileComparator.accept(File file)", "testcase": false, "constructor": false}], "file": "mycontainer-components/mycontainer-commons/src/main/java/com/googlecode/mycontainer/commons/file/FileComparator.java"}, "focal_method": {"identifier": "compare", "parameters": "(File f1, File f2)", "modifiers": "public", "return": "int", "body": "public int compare(File f1, File f2) {\n\t\tInputStream in1 = null;\n\t\tInputStream in2 = null;\n\t\ttry {\n\t\t\tboolean f1Exists = f1.exists();\n\t\t\tboolean f2Exists = f2.exists();\n\t\t\tif (f1Exists != f2Exists) {\n\t\t\t\treturn f1Exists ? -1 : 1;\n\t\t\t}\n\t\t\tif (!f1Exists && !f2Exists) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tboolean isDir1 = f1.isDirectory();\n\t\t\tboolean isDir2 = f2.isDirectory();\n\t\t\tif (isDir1 != isDir2) {\n\t\t\t\treturn isDir1 ? -1 : 1;\n\t\t\t}\n\n\t\t\tif (!isDir1) {\n\t\t\t\tin1 = new FileInputStream(f1);\n\t\t\t\tin2 = new FileInputStream(f2);\n\t\t\t\treturn IOUtil.compare(in1, in2);\n\t\t\t}\n\n\t\t\tFile[] files1 = f1.listFiles(filter);\n\t\t\tFile[] files2 = f2.listFiles(filter);\n\n\t\t\tint ret = files1.length - files2.length;\n\t\t\tif (ret != 0) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\tArrays.sort(files1);\n\t\t\tArrays.sort(files2);\n\t\t\tfor (int i = 0; i < files1.length; i++) {\n\t\t\t\tFile child1 = files1[i];\n\t\t\t\tFile child2 = files2[i];\n\t\t\t\tret = compare(child1, child2);\n\t\t\t\tif (ret != 0) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn 0;\n\t\t} catch (FileNotFoundException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} finally {\n\t\t\tIOUtil.close(in1);\n\t\t\tIOUtil.close(in2);\n\t\t}\n\t}", "signature": "int compare(File f1, File f2)", "full_signature": "public int compare(File f1, File f2)", "class_method_signature": "FileComparator.compare(File f1, File f2)", "testcase": false, "constructor": false, "invocations": ["exists", "exists", "isDirectory", "isDirectory", "compare", "listFiles", "listFiles", "sort", "sort", "compare", "close", "close"]}, "repository": {"repo_id": 9149127, "url": "https://github.com/murer/mycontainer", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 13, "size": 1353, "license": "licensed"}}