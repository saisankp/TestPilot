{"test_class": {"identifier": "ContainerTest", "superclass": "", "interfaces": "", "fields": [], "file": "CoreFeatures/IOC/IocContainerSimpleImplementation/src/test/java/info/smart_tools/smartactors/ioc/ioc_container_simple/ContainerTest.java"}, "test_case": {"identifier": "checkRegistrationException", "parameters": "()", "modifiers": "@Test (expected = RegistrationException.class) public", "return": "void", "body": "@Test (expected = RegistrationException.class)\n    public void checkRegistrationException()\n            throws Exception {\n        IContainer container = new Container();\n        container.register(null, null);\n        fail();\n    }", "signature": "void checkRegistrationException()", "full_signature": "@Test (expected = RegistrationException.class) public void checkRegistrationException()", "class_method_signature": "ContainerTest.checkRegistrationException()", "testcase": true, "constructor": false, "invocations": ["register", "fail"]}, "focal_class": {"identifier": "Container", "superclass": "", "interfaces": "implements IContainer", "fields": [{"original_string": "private final Map<IKey, IResolveDependencyStrategy> storage = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<IKey, IResolveDependencyStrategy>", "declarator": "storage = new ConcurrentHashMap<>()", "var_name": "storage"}, {"original_string": "private final IKey keyForKeyStorage;", "modifier": "private final", "type": "IKey", "declarator": "keyForKeyStorage", "var_name": "keyForKeyStorage"}], "methods": [{"identifier": "Container", "parameters": "()", "modifiers": "public", "return": "", "signature": " Container()", "full_signature": "public  Container()", "class_method_signature": "Container.Container()", "testcase": false, "constructor": true}, {"identifier": "getIocKey", "parameters": "()", "modifiers": "@Override public", "return": "IKey", "signature": "IKey getIocKey()", "full_signature": "@Override public IKey getIocKey()", "class_method_signature": "Container.getIocKey()", "testcase": false, "constructor": false}, {"identifier": "getKeyForKeyStorage", "parameters": "()", "modifiers": "@Override public", "return": "IKey", "signature": "IKey getKeyForKeyStorage()", "full_signature": "@Override public IKey getKeyForKeyStorage()", "class_method_signature": "Container.getKeyForKeyStorage()", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(final IKey key, final Object... args)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "T", "signature": "T resolve(final IKey key, final Object... args)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public T resolve(final IKey key, final Object... args)", "class_method_signature": "Container.resolve(final IKey key, final Object... args)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(final IKey key, final IResolveDependencyStrategy strategy)", "modifiers": "@Override public", "return": "void", "signature": "void register(final IKey key, final IResolveDependencyStrategy strategy)", "full_signature": "@Override public void register(final IKey key, final IResolveDependencyStrategy strategy)", "class_method_signature": "Container.register(final IKey key, final IResolveDependencyStrategy strategy)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(final IKey key)", "modifiers": "@Override public", "return": "void", "signature": "void remove(final IKey key)", "full_signature": "@Override public void remove(final IKey key)", "class_method_signature": "Container.remove(final IKey key)", "testcase": false, "constructor": false}], "file": "CoreFeatures/IOC/IocContainerSimpleImplementation/src/main/java/info/smart_tools/smartactors/ioc/ioc_container_simple/Container.java"}, "focal_method": {"identifier": "register", "parameters": "(final IKey key, final IResolveDependencyStrategy strategy)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void register(final IKey key, final IResolveDependencyStrategy strategy)\n            throws RegistrationException {\n        if (key == null) {\n            throw new RegistrationException(\"Key can't be null\");\n        }\n        if (strategy == null) {\n            throw new RegistrationException(\"Strategy can't be null\");\n        }\n\n        try {\n            storage.put(key, strategy);\n        } catch (Exception e) {\n            throw new RegistrationException(\"Registration of dependency failed for key \" + key, e);\n        }\n    }", "signature": "void register(final IKey key, final IResolveDependencyStrategy strategy)", "full_signature": "@Override public void register(final IKey key, final IResolveDependencyStrategy strategy)", "class_method_signature": "Container.register(final IKey key, final IResolveDependencyStrategy strategy)", "testcase": false, "constructor": false, "invocations": ["put"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}