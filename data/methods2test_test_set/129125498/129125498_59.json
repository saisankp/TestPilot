{"test_class": {"identifier": "PewmaPointForecasterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double DEFAULT_ALPHA = 0.05;", "modifier": "private static final", "type": "double", "declarator": "DEFAULT_ALPHA = 0.05", "var_name": "DEFAULT_ALPHA"}, {"original_string": "private static final double TOLERANCE = 0.00001;", "modifier": "private static final", "type": "double", "declarator": "TOLERANCE = 0.00001", "var_name": "TOLERANCE"}, {"original_string": "private static final String SAMPLE_INPUT_PATH = \"tests/pewma-sample-input.csv\";", "modifier": "private static final", "type": "String", "declarator": "SAMPLE_INPUT_PATH = \"tests/pewma-sample-input.csv\"", "var_name": "SAMPLE_INPUT_PATH"}, {"original_string": "private static final String CAL_INFLOW_PATH = \"tests/cal-inflow-tests-pewma.csv\";", "modifier": "private static final", "type": "String", "declarator": "CAL_INFLOW_PATH = \"tests/cal-inflow-tests-pewma.csv\"", "var_name": "CAL_INFLOW_PATH"}, {"original_string": "private MetricDefinition metricDef;", "modifier": "private", "type": "MetricDefinition", "declarator": "metricDef", "var_name": "metricDef"}, {"original_string": "private long epochSecond;", "modifier": "private", "type": "long", "declarator": "epochSecond", "var_name": "epochSecond"}], "file": "anomdetect/src/test/java/com/expedia/adaptivealerting/anomdetect/forecast/point/algo/pewma/PewmaPointForecasterTest.java"}, "test_case": {"identifier": "testForecast", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testForecast() {\n        val testRows = readData_calInflow().listIterator();\n        val observed0 = testRows.next().getObserved();\n\n        val params = new PewmaPointForecasterParams()\n                .setAlpha(DEFAULT_ALPHA)\n                .setBeta(0.5)\n                .setInitMeanEstimate(observed0);\n        val forecaster = new PewmaPointForecaster(params);\n\n        assertEquals(params, forecaster.getParams());\n\n        while (testRows.hasNext()) {\n            val testRow = testRows.next();\n            val observed = testRow.getObserved();\n            val metricData = new MetricData(metricDef, observed, epochSecond);\n            forecaster.forecast(metricData);\n\n            assertEquals(testRow.getMean(), forecaster.getMean(), TOLERANCE);\n            assertEquals(testRow.getStd(), forecaster.getStdDev(), TOLERANCE);\n        }\n    }", "signature": "void testForecast()", "full_signature": "@Test public void testForecast()", "class_method_signature": "PewmaPointForecasterTest.testForecast()", "testcase": true, "constructor": false, "invocations": ["listIterator", "readData_calInflow", "getObserved", "next", "setInitMeanEstimate", "setBeta", "setAlpha", "assertEquals", "getParams", "hasNext", "next", "getObserved", "forecast", "assertEquals", "getMean", "getMean", "assertEquals", "getStd", "getStdDev"]}, "focal_class": {"identifier": "PewmaPointForecaster", "superclass": "", "interfaces": "implements PointForecaster", "fields": [{"original_string": "@Getter\n    @Generated // https://reflectoring.io/100-percent-test-coverage/\n    private PewmaPointForecasterParams params;", "modifier": "@Getter\n    @Generated // https://reflectoring.io/100-percent-test-coverage/\n    private", "type": "PewmaPointForecasterParams", "declarator": "params", "var_name": "params"}, {"original_string": "private double adjAlpha;", "modifier": "private", "type": "double", "declarator": "adjAlpha", "var_name": "adjAlpha"}, {"original_string": "private int trainingCount = 1;", "modifier": "private", "type": "int", "declarator": "trainingCount = 1", "var_name": "trainingCount"}, {"original_string": "private double s1;", "modifier": "private", "type": "double", "declarator": "s1", "var_name": "s1"}, {"original_string": "private double s2;", "modifier": "private", "type": "double", "declarator": "s2", "var_name": "s2"}, {"original_string": "@Getter\n    private double mean;", "modifier": "@Getter\n    private", "type": "double", "declarator": "mean", "var_name": "mean"}, {"original_string": "@Getter\n    private double stdDev;", "modifier": "@Getter\n    private", "type": "double", "declarator": "stdDev", "var_name": "stdDev"}], "methods": [{"identifier": "PewmaPointForecaster", "parameters": "()", "modifiers": "public", "return": "", "signature": " PewmaPointForecaster()", "full_signature": "public  PewmaPointForecaster()", "class_method_signature": "PewmaPointForecaster.PewmaPointForecaster()", "testcase": false, "constructor": true}, {"identifier": "PewmaPointForecaster", "parameters": "(PewmaPointForecasterParams params)", "modifiers": "public", "return": "", "signature": " PewmaPointForecaster(PewmaPointForecasterParams params)", "full_signature": "public  PewmaPointForecaster(PewmaPointForecasterParams params)", "class_method_signature": "PewmaPointForecaster.PewmaPointForecaster(PewmaPointForecasterParams params)", "testcase": false, "constructor": true}, {"identifier": "forecast", "parameters": "(MetricData metricData)", "modifiers": "@Override public", "return": "PointForecast", "signature": "PointForecast forecast(MetricData metricData)", "full_signature": "@Override public PointForecast forecast(MetricData metricData)", "class_method_signature": "PewmaPointForecaster.forecast(MetricData metricData)", "testcase": false, "constructor": false}, {"identifier": "updateMeanAndStdDev", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateMeanAndStdDev()", "full_signature": "private void updateMeanAndStdDev()", "class_method_signature": "PewmaPointForecaster.updateMeanAndStdDev()", "testcase": false, "constructor": false}, {"identifier": "updateEstimates", "parameters": "(double value)", "modifiers": "private", "return": "void", "signature": "void updateEstimates(double value)", "full_signature": "private void updateEstimates(double value)", "class_method_signature": "PewmaPointForecaster.updateEstimates(double value)", "testcase": false, "constructor": false}, {"identifier": "calculateAlpha", "parameters": "(double pt)", "modifiers": "private", "return": "double", "signature": "double calculateAlpha(double pt)", "full_signature": "private double calculateAlpha(double pt)", "class_method_signature": "PewmaPointForecaster.calculateAlpha(double pt)", "testcase": false, "constructor": false}], "file": "anomdetect/src/main/java/com/expedia/adaptivealerting/anomdetect/forecast/point/algo/pewma/PewmaPointForecaster.java"}, "focal_method": {"identifier": "forecast", "parameters": "(MetricData metricData)", "modifiers": "@Override public", "return": "PointForecast", "body": "@Override\n    public PointForecast forecast(MetricData metricData) {\n        notNull(metricData, \"metricData can't be null\");\n        val observed = metricData.getValue();\n        updateEstimates(observed);\n\n        // TODO Handle warmup\n        return new PointForecast(mean, false);\n    }", "signature": "PointForecast forecast(MetricData metricData)", "full_signature": "@Override public PointForecast forecast(MetricData metricData)", "class_method_signature": "PewmaPointForecaster.forecast(MetricData metricData)", "testcase": false, "constructor": false, "invocations": ["notNull", "getValue", "updateEstimates"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}