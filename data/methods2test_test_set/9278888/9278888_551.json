{"test_class": {"identifier": "DeclarativeSamplerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "DeclarativeSampler<Traced> declarativeSampler =\n    DeclarativeSampler.createWithProbability(t -> t.enabled() ? t.sampleProbability() : null);", "modifier": "", "type": "DeclarativeSampler<Traced>", "declarator": "declarativeSampler =\n    DeclarativeSampler.createWithProbability(t -> t.enabled() ? t.sampleProbability() : null)", "var_name": "declarativeSampler"}], "file": "brave/src/test/java/brave/sampler/DeclarativeSamplerTest.java"}, "test_case": {"identifier": "samplerLoadsLazy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void samplerLoadsLazy() {\n    assertThat(declarativeSampler.methodToSamplers)\n      .isEmpty();\n\n    declarativeSampler.sample(traced(1.0f, 0, true));\n\n    assertThat(declarativeSampler.methodToSamplers)\n      .hasSize(1);\n\n    declarativeSampler.sample(traced(0.0f, 0, true));\n\n    assertThat(declarativeSampler.methodToSamplers)\n      .hasSize(2);\n  }", "signature": "void samplerLoadsLazy()", "full_signature": "@Test public void samplerLoadsLazy()", "class_method_signature": "DeclarativeSamplerTest.samplerLoadsLazy()", "testcase": true, "constructor": false, "invocations": ["isEmpty", "assertThat", "sample", "traced", "hasSize", "assertThat", "sample", "traced", "hasSize", "assertThat"]}, "focal_class": {"identifier": "DeclarativeSampler", "superclass": "", "interfaces": "implements SamplerFunction<M>", "fields": [{"original_string": "final ConcurrentMap<M, Sampler> methodToSamplers = new ConcurrentHashMap<>();", "modifier": "final", "type": "ConcurrentMap<M, Sampler>", "declarator": "methodToSamplers = new ConcurrentHashMap<>()", "var_name": "methodToSamplers"}, {"original_string": "static final Sampler NULL_SENTINEL = new Sampler() {\n    @Override public boolean isSampled(long traceId) {\n      throw new AssertionError();\n    }\n  };", "modifier": "static final", "type": "Sampler", "declarator": "NULL_SENTINEL = new Sampler() {\n    @Override public boolean isSampled(long traceId) {\n      throw new AssertionError();\n    }\n  }", "var_name": "NULL_SENTINEL"}], "methods": [{"identifier": "createWithProbability", "parameters": "(\n    ProbabilityOfMethod<M> probabilityOfMethod)", "modifiers": "public static", "return": "DeclarativeSampler<M>", "signature": "DeclarativeSampler<M> createWithProbability(\n    ProbabilityOfMethod<M> probabilityOfMethod)", "full_signature": "public static DeclarativeSampler<M> createWithProbability(\n    ProbabilityOfMethod<M> probabilityOfMethod)", "class_method_signature": "DeclarativeSampler.createWithProbability(\n    ProbabilityOfMethod<M> probabilityOfMethod)", "testcase": false, "constructor": false}, {"identifier": "createWithRate", "parameters": "(RateOfMethod<M> rateOfMethod)", "modifiers": "public static", "return": "DeclarativeSampler<M>", "signature": "DeclarativeSampler<M> createWithRate(RateOfMethod<M> rateOfMethod)", "full_signature": "public static DeclarativeSampler<M> createWithRate(RateOfMethod<M> rateOfMethod)", "class_method_signature": "DeclarativeSampler.createWithRate(RateOfMethod<M> rateOfMethod)", "testcase": false, "constructor": false}, {"identifier": "trySample", "parameters": "(@Nullable M method)", "modifiers": "@Override public @Nullable", "return": "Boolean", "signature": "Boolean trySample(@Nullable M method)", "full_signature": "@Override public @Nullable Boolean trySample(@Nullable M method)", "class_method_signature": "DeclarativeSampler.trySample(@Nullable M method)", "testcase": false, "constructor": false}, {"identifier": "samplerOfMethod", "parameters": "(M method)", "modifiers": "@Nullable abstract", "return": "Sampler", "signature": "Sampler samplerOfMethod(M method)", "full_signature": "@Nullable abstract Sampler samplerOfMethod(M method)", "class_method_signature": "DeclarativeSampler.samplerOfMethod(M method)", "testcase": false, "constructor": false}, {"identifier": "DeclarativeSampler", "parameters": "()", "modifiers": "", "return": "", "signature": " DeclarativeSampler()", "full_signature": "  DeclarativeSampler()", "class_method_signature": "DeclarativeSampler.DeclarativeSampler()", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(RateForMethod<M> rateForMethod)", "modifiers": "public static", "return": "DeclarativeSampler<M>", "signature": "DeclarativeSampler<M> create(RateForMethod<M> rateForMethod)", "full_signature": "public static DeclarativeSampler<M> create(RateForMethod<M> rateForMethod)", "class_method_signature": "DeclarativeSampler.create(RateForMethod<M> rateForMethod)", "testcase": false, "constructor": false}, {"identifier": "toSampler", "parameters": "(M method)", "modifiers": "@Deprecated public", "return": "Sampler", "signature": "Sampler toSampler(M method)", "full_signature": "@Deprecated public Sampler toSampler(M method)", "class_method_signature": "DeclarativeSampler.toSampler(M method)", "testcase": false, "constructor": false}, {"identifier": "toSampler", "parameters": "(M method, Sampler fallback)", "modifiers": "@Deprecated public", "return": "Sampler", "signature": "Sampler toSampler(M method, Sampler fallback)", "full_signature": "@Deprecated public Sampler toSampler(M method, Sampler fallback)", "class_method_signature": "DeclarativeSampler.toSampler(M method, Sampler fallback)", "testcase": false, "constructor": false}, {"identifier": "sample", "parameters": "(@Nullable M method)", "modifiers": "@Deprecated public", "return": "SamplingFlags", "signature": "SamplingFlags sample(@Nullable M method)", "full_signature": "@Deprecated public SamplingFlags sample(@Nullable M method)", "class_method_signature": "DeclarativeSampler.sample(@Nullable M method)", "testcase": false, "constructor": false}], "file": "brave/src/main/java/brave/sampler/DeclarativeSampler.java"}, "focal_method": {"identifier": "sample", "parameters": "(@Nullable M method)", "modifiers": "@Deprecated public", "return": "SamplingFlags", "body": "@Deprecated public SamplingFlags sample(@Nullable M method) {\n    if (method == null) return SamplingFlags.EMPTY;\n    return SamplingFlags.Builder.build(trySample(method));\n  }", "signature": "SamplingFlags sample(@Nullable M method)", "full_signature": "@Deprecated public SamplingFlags sample(@Nullable M method)", "class_method_signature": "DeclarativeSampler.sample(@Nullable M method)", "testcase": false, "constructor": false, "invocations": ["build", "trySample"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}