{"test_class": {"identifier": "EdDsaKeyGeneratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private KeyGenerator generator;", "modifier": "private", "type": "KeyGenerator", "declarator": "generator", "var_name": "generator"}, {"original_string": "private KeyGenerator generator2;", "modifier": "private", "type": "KeyGenerator", "declarator": "generator2", "var_name": "generator2"}], "file": "eddsa/src/test/java/io/moatwel/crypto/eddsa/EdDsaKeyGeneratorTest.java"}, "test_case": {"identifier": "generate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void generate() {\n        PrivateKey privateKey = PrivateKeyEd25519.fromHexString(\"cdf762a91a9932fe755d1e62e1eabf94111d3fe9eafc191fe9cbedbd0902252c\");\n        PublicKey publicKey = generator2.derivePublicKey(privateKey);\n\n        assertThat(publicKey.getHexString(), is(\"18c484505c8f175bbdd511acde1faaea8e35a579cfc0d220f6d3513ebb4204b5\"));\n    }", "signature": "void generate()", "full_signature": "@Test public void generate()", "class_method_signature": "EdDsaKeyGeneratorTest.generate()", "testcase": true, "constructor": false, "invocations": ["fromHexString", "derivePublicKey", "assertThat", "getHexString", "is"]}, "focal_class": {"identifier": "EdDsaKeyGenerator", "superclass": "", "interfaces": "implements KeyGenerator", "fields": [{"original_string": "private final EdKeyAnalyzer analyzer;", "modifier": "private final", "type": "EdKeyAnalyzer", "declarator": "analyzer", "var_name": "analyzer"}, {"original_string": "private final SchemeProvider schemeProvider;", "modifier": "private final", "type": "SchemeProvider", "declarator": "schemeProvider", "var_name": "schemeProvider"}], "methods": [{"identifier": "EdDsaKeyGenerator", "parameters": "(SchemeProvider schemeProvider)", "modifiers": "public", "return": "", "signature": " EdDsaKeyGenerator(SchemeProvider schemeProvider)", "full_signature": "public  EdDsaKeyGenerator(SchemeProvider schemeProvider)", "class_method_signature": "EdDsaKeyGenerator.EdDsaKeyGenerator(SchemeProvider schemeProvider)", "testcase": false, "constructor": true}, {"identifier": "getKeyAnalyzer", "parameters": "()", "modifiers": "@Override public", "return": "EdKeyAnalyzer", "signature": "EdKeyAnalyzer getKeyAnalyzer()", "full_signature": "@Override public EdKeyAnalyzer getKeyAnalyzer()", "class_method_signature": "EdDsaKeyGenerator.getKeyAnalyzer()", "testcase": false, "constructor": false}, {"identifier": "generateKeyPair", "parameters": "()", "modifiers": "@Override public", "return": "KeyPair", "signature": "KeyPair generateKeyPair()", "full_signature": "@Override public KeyPair generateKeyPair()", "class_method_signature": "EdDsaKeyGenerator.generateKeyPair()", "testcase": false, "constructor": false}, {"identifier": "generateKeyPair", "parameters": "(PrivateKey privateKey)", "modifiers": "@Override public", "return": "KeyPair", "signature": "KeyPair generateKeyPair(PrivateKey privateKey)", "full_signature": "@Override public KeyPair generateKeyPair(PrivateKey privateKey)", "class_method_signature": "EdDsaKeyGenerator.generateKeyPair(PrivateKey privateKey)", "testcase": false, "constructor": false}, {"identifier": "derivePublicKey", "parameters": "(PrivateKey privateKey)", "modifiers": "@Override public", "return": "PublicKey", "signature": "PublicKey derivePublicKey(PrivateKey privateKey)", "full_signature": "@Override public PublicKey derivePublicKey(PrivateKey privateKey)", "class_method_signature": "EdDsaKeyGenerator.derivePublicKey(PrivateKey privateKey)", "testcase": false, "constructor": false}], "file": "eddsa/src/main/java/io/moatwel/crypto/eddsa/EdDsaKeyGenerator.java"}, "focal_method": {"identifier": "derivePublicKey", "parameters": "(PrivateKey privateKey)", "modifiers": "@Override public", "return": "PublicKey", "body": "@Override\n    public PublicKey derivePublicKey(PrivateKey privateKey) {\n        if (privateKey == null) {\n            throw new IllegalArgumentException(\"PrivateKey must not be null.\");\n        }\n        PublicKeyDelegate delegate = schemeProvider.getPublicKeyDelegate();\n\n        byte[] publicKeySeed = delegate.generatePublicKeySeed(privateKey);\n\n        return new PublicKey(publicKeySeed);\n    }", "signature": "PublicKey derivePublicKey(PrivateKey privateKey)", "full_signature": "@Override public PublicKey derivePublicKey(PrivateKey privateKey)", "class_method_signature": "EdDsaKeyGenerator.derivePublicKey(PrivateKey privateKey)", "testcase": false, "constructor": false, "invocations": ["getPublicKeyDelegate", "generatePublicKeySeed"]}, "repository": {"repo_id": 136564461, "url": "https://github.com/halu5071/edwards", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 626, "license": "licensed"}}