{"test_class": {"identifier": "PyTorchServiceSpecTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ComponentTestCommons testCommons =\n      new ComponentTestCommons(PyTorchRole.PRIMARY_WORKER);", "modifier": "private", "type": "ComponentTestCommons", "declarator": "testCommons =\n      new ComponentTestCommons(PyTorchRole.PRIMARY_WORKER)", "var_name": "testCommons"}], "file": "submarine-server/server-submitter/submitter-yarnservice/src/test/java/org/apache/submarine/server/submitter/yarnservice/pytorch/PyTorchServiceSpecTest.java"}, "test_case": {"identifier": "testPytorchServiceSpec", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testPytorchServiceSpec() throws IOException {\n    testCommons = new ComponentTestCommons(TensorFlowRole.PRIMARY_WORKER);\n    testCommons.setupTensorFlow();\n\n    PyTorchRunJobParameters parameters = new PyTorchRunJobParameters();\n    parameters.setWorkerResource(testCommons.resource);\n    parameters.setName(\"testJobName\");\n    parameters.setNumWorkers(1);\n    parameters.setWorkerLaunchCmd(\"testWorkerLaunchCommand\");\n\n    MockClientContext mockClientContext = new MockClientContext(DEFAULT_JOB_NAME);\n    FileSystemOperations fsOperations =\n        new FileSystemOperations(mockClientContext);\n\n    HadoopEnvironmentSetup hadoopEnv =\n        new HadoopEnvironmentSetup(mockClientContext, fsOperations);\n\n    PyTorchLaunchCommandFactory launchCommandFactory =\n        new PyTorchLaunchCommandFactory(hadoopEnv, parameters,\n            new Configuration());\n\n    Localizer localizer = new Localizer(fsOperations,\n        mockClientContext.getRemoteDirectoryManager(), parameters);\n\n    PyTorchServiceSpec pyTorchServiceSpec = new PyTorchServiceSpec(parameters,\n        mockClientContext, fsOperations, launchCommandFactory, localizer);\n\n    ServiceWrapper serviceWrapper = pyTorchServiceSpec.create();\n    Service service = serviceWrapper.getService();\n\n    assertNotNull(\"Service must not be null!\", service);\n    List<Component> components = service.getComponents();\n    assertEquals(\"Number of components is not correct!\", 1, components.size());\n\n    Component component = components.get(0);\n    assertEquals(1L, (long) component.getNumberOfContainers());\n    assertEquals(\"./run-PRIMARY_WORKER.sh\", component.getLaunchCommand());\n  }", "signature": "void testPytorchServiceSpec()", "full_signature": "@Test public void testPytorchServiceSpec()", "class_method_signature": "PyTorchServiceSpecTest.testPytorchServiceSpec()", "testcase": true, "constructor": false, "invocations": ["setupTensorFlow", "setWorkerResource", "setName", "setNumWorkers", "setWorkerLaunchCmd", "getRemoteDirectoryManager", "create", "getService", "assertNotNull", "getComponents", "assertEquals", "size", "get", "assertEquals", "getNumberOfContainers", "assertEquals", "getLaunchCommand"]}, "focal_class": {"identifier": "PyTorchServiceSpec", "superclass": "extends AbstractServiceSpec", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG =\n      LoggerFactory.getLogger(PyTorchServiceSpec.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG =\n      LoggerFactory.getLogger(PyTorchServiceSpec.class)", "var_name": "LOG"}, {"original_string": "private final PyTorchRunJobParameters pyTorchParameters;", "modifier": "private final", "type": "PyTorchRunJobParameters", "declarator": "pyTorchParameters", "var_name": "pyTorchParameters"}], "methods": [{"identifier": "PyTorchServiceSpec", "parameters": "(PyTorchRunJobParameters parameters,\n                            ClientContext clientContext, FileSystemOperations fsOperations,\n                            PyTorchLaunchCommandFactory launchCommandFactory, Localizer localizer)", "modifiers": "public", "return": "", "signature": " PyTorchServiceSpec(PyTorchRunJobParameters parameters,\n                            ClientContext clientContext, FileSystemOperations fsOperations,\n                            PyTorchLaunchCommandFactory launchCommandFactory, Localizer localizer)", "full_signature": "public  PyTorchServiceSpec(PyTorchRunJobParameters parameters,\n                            ClientContext clientContext, FileSystemOperations fsOperations,\n                            PyTorchLaunchCommandFactory launchCommandFactory, Localizer localizer)", "class_method_signature": "PyTorchServiceSpec.PyTorchServiceSpec(PyTorchRunJobParameters parameters,\n                            ClientContext clientContext, FileSystemOperations fsOperations,\n                            PyTorchLaunchCommandFactory launchCommandFactory, Localizer localizer)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "()", "modifiers": "@Override public", "return": "ServiceWrapper", "signature": "ServiceWrapper create()", "full_signature": "@Override public ServiceWrapper create()", "class_method_signature": "PyTorchServiceSpec.create()", "testcase": false, "constructor": false}], "file": "submarine-server/server-submitter/submitter-yarnservice/src/main/java/org/apache/submarine/server/submitter/yarnservice/pytorch/PyTorchServiceSpec.java"}, "focal_method": {"identifier": "PyTorchServiceSpec", "parameters": "(PyTorchRunJobParameters parameters,\n                            ClientContext clientContext, FileSystemOperations fsOperations,\n                            PyTorchLaunchCommandFactory launchCommandFactory, Localizer localizer)", "modifiers": "public", "return": "", "body": "public PyTorchServiceSpec(PyTorchRunJobParameters parameters,\n                            ClientContext clientContext, FileSystemOperations fsOperations,\n                            PyTorchLaunchCommandFactory launchCommandFactory, Localizer localizer) {\n    super(parameters, clientContext, fsOperations, launchCommandFactory,\n        localizer);\n    this.pyTorchParameters = parameters;\n  }", "signature": " PyTorchServiceSpec(PyTorchRunJobParameters parameters,\n                            ClientContext clientContext, FileSystemOperations fsOperations,\n                            PyTorchLaunchCommandFactory launchCommandFactory, Localizer localizer)", "full_signature": "public  PyTorchServiceSpec(PyTorchRunJobParameters parameters,\n                            ClientContext clientContext, FileSystemOperations fsOperations,\n                            PyTorchLaunchCommandFactory launchCommandFactory, Localizer localizer)", "class_method_signature": "PyTorchServiceSpec.PyTorchServiceSpec(PyTorchRunJobParameters parameters,\n                            ClientContext clientContext, FileSystemOperations fsOperations,\n                            PyTorchLaunchCommandFactory launchCommandFactory, Localizer localizer)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 209459144, "url": "https://github.com/apache/submarine", "stars": 185, "created": "9/19/2019 4:00:17 AM +00:00", "updates": "2020-01-27T15:27:05+00:00", "fork": "False", "license": "licensed"}}