{"test_class": {"identifier": "ScikitLearnWrapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String MSG_MODELPATH_NOT_NULL = \"Model path must not be null.\";", "modifier": "private static final", "type": "String", "declarator": "MSG_MODELPATH_NOT_NULL = \"Model path must not be null.\"", "var_name": "MSG_MODELPATH_NOT_NULL"}, {"original_string": "private static final String BASE_TESTRSC_PATH = \"testrsc/ml/scikitwrapper/\";", "modifier": "private static final", "type": "String", "declarator": "BASE_TESTRSC_PATH = \"testrsc/ml/scikitwrapper/\"", "var_name": "BASE_TESTRSC_PATH"}, {"original_string": "private static final String REGRESSION_ARFF = BASE_TESTRSC_PATH + \"0532052678.arff\";", "modifier": "private static final", "type": "String", "declarator": "REGRESSION_ARFF = BASE_TESTRSC_PATH + \"0532052678.arff\"", "var_name": "REGRESSION_ARFF"}, {"original_string": "private static final String CLASSIFICATION_ARFF = BASE_TESTRSC_PATH + \"dataset_31_credit-g.arff\";", "modifier": "private static final", "type": "String", "declarator": "CLASSIFICATION_ARFF = BASE_TESTRSC_PATH + \"dataset_31_credit-g.arff\"", "var_name": "CLASSIFICATION_ARFF"}, {"original_string": "private static final String BAYESNET_TRAIN_ARFF = BASE_TESTRSC_PATH + \"Bayesnet_Train.arff\";", "modifier": "private static final", "type": "String", "declarator": "BAYESNET_TRAIN_ARFF = BASE_TESTRSC_PATH + \"Bayesnet_Train.arff\"", "var_name": "BAYESNET_TRAIN_ARFF"}, {"original_string": "private static final String MLP_REGRESSOR_DUMP = BASE_TESTRSC_PATH + \"01673183575_MLPRegressor.pcl\";", "modifier": "private static final", "type": "String", "declarator": "MLP_REGRESSOR_DUMP = BASE_TESTRSC_PATH + \"01673183575_MLPRegressor.pcl\"", "var_name": "MLP_REGRESSOR_DUMP"}, {"original_string": "private static final String CLASSIFIER_DUMP = BASE_TESTRSC_PATH + \"0800955787_Pipeline.pcl\";", "modifier": "private static final", "type": "String", "declarator": "CLASSIFIER_DUMP = BASE_TESTRSC_PATH + \"0800955787_Pipeline.pcl\"", "var_name": "CLASSIFIER_DUMP"}, {"original_string": "private static final String OWN_CLASSIFIER_DUMP = BASE_TESTRSC_PATH + \"0532052678.arff\";", "modifier": "private static final", "type": "String", "declarator": "OWN_CLASSIFIER_DUMP = BASE_TESTRSC_PATH + \"0532052678.arff\"", "var_name": "OWN_CLASSIFIER_DUMP"}, {"original_string": "private static final String IMPORT_FOLDER = BASE_TESTRSC_PATH + \"importfolder_test\";", "modifier": "private static final", "type": "String", "declarator": "IMPORT_FOLDER = BASE_TESTRSC_PATH + \"importfolder_test\"", "var_name": "IMPORT_FOLDER"}], "file": "JAICore/jaicore-ml/src/test/java/ai/libs/jaicore/ml/scikitwrapper/ScikitLearnWrapperTest.java"}, "test_case": {"identifier": "fitAndPredict", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void fitAndPredict() throws Exception {\n\t\tList<String> imports = Arrays.asList(\"sklearn\", \"sklearn.ensemble\");\n\t\tString constructInstruction = \"sklearn.ensemble.RandomForestClassifier(n_estimators=100)\";\n\t\tScikitLearnWrapper<ISingleLabelClassification, ISingleLabelClassificationPredictionBatch> slw = new ScikitLearnWrapper<>(constructInstruction, ScikitLearnWrapper.getImportString(imports), true,\n\t\t\t\tEScikitLearnProblemType.CLASSIFICATION);\n\t\tILabeledDataset<ILabeledInstance> dataset = this.loadARFF(CLASSIFICATION_ARFF);\n\t\tRandomHoldoutSplitter<ILabeledDataset<ILabeledInstance>> splitter = new RandomHoldoutSplitter<>(new Random(), .7);\n\t\tIDatasetSplitSet<ILabeledDataset<ILabeledInstance>> set = splitter.nextSplitSet(dataset);\n\n\t\tlong startTrain = System.currentTimeMillis();\n\t\tISingleLabelClassificationPredictionBatch preds = slw.fitAndPredict(set.getFolds(0).get(0), set.getFolds(0).get(1));\n\t\tSystem.out.println(\"Call took: \" + (System.currentTimeMillis() - startTrain) + \"ms\");\n\n\t\tassertNotNull(preds);\n\t}", "signature": "void fitAndPredict()", "full_signature": "@Test public void fitAndPredict()", "class_method_signature": "ScikitLearnWrapperTest.fitAndPredict()", "testcase": true, "constructor": false, "invocations": ["asList", "getImportString", "loadARFF", "nextSplitSet", "currentTimeMillis", "fitAndPredict", "get", "getFolds", "get", "getFolds", "println", "currentTimeMillis", "assertNotNull"]}, "focal_class": {"identifier": "ScikitLearnWrapper", "superclass": "extends ASupervisedLearner<ILabeledInstance, ILabeledDataset<? extends ILabeledInstance>, P, B>", "interfaces": "implements ISupervisedLearner<ILabeledInstance, ILabeledDataset<? extends ILabeledInstance>>", "fields": [{"original_string": "private static final Logger L = LoggerFactory.getLogger(ScikitLearnWrapper.class);", "modifier": "private static final", "type": "Logger", "declarator": "L = LoggerFactory.getLogger(ScikitLearnWrapper.class)", "var_name": "L"}, {"original_string": "private static final IScikitLearnWrapperConfig CONF = ConfigCache.getOrCreate(IScikitLearnWrapperConfig.class);", "modifier": "private static final", "type": "IScikitLearnWrapperConfig", "declarator": "CONF = ConfigCache.getOrCreate(IScikitLearnWrapperConfig.class)", "var_name": "CONF"}, {"original_string": "private IPythonConfig pythonConfig = ConfigFactory.create(IPythonConfig.class);", "modifier": "private", "type": "IPythonConfig", "declarator": "pythonConfig = ConfigFactory.create(IPythonConfig.class)", "var_name": "pythonConfig"}, {"original_string": "private boolean listenToPidFromProcess;", "modifier": "private", "type": "boolean", "declarator": "listenToPidFromProcess", "var_name": "listenToPidFromProcess"}, {"original_string": "private File scikitTemplate;", "modifier": "private", "type": "File", "declarator": "scikitTemplate", "var_name": "scikitTemplate"}, {"original_string": "private ILabeledDataset<ILabeledInstance> dataset;", "modifier": "private", "type": "ILabeledDataset<ILabeledInstance>", "declarator": "dataset", "var_name": "dataset"}, {"original_string": "private EScikitLearnProblemType problemType;", "modifier": "private", "type": "EScikitLearnProblemType", "declarator": "problemType", "var_name": "problemType"}, {"original_string": "private int[] targetColumns = new int[0];", "modifier": "private", "type": "int[]", "declarator": "targetColumns = new int[0]", "var_name": "targetColumns"}, {"original_string": "private final String configurationUID;", "modifier": "private final", "type": "String", "declarator": "configurationUID", "var_name": "configurationUID"}, {"original_string": "private File modelFile;", "modifier": "private", "type": "File", "declarator": "modelFile", "var_name": "modelFile"}, {"original_string": "private File trainArff;", "modifier": "private", "type": "File", "declarator": "trainArff", "var_name": "trainArff"}, {"original_string": "private final boolean withModelDump;", "modifier": "private final", "type": "boolean", "declarator": "withModelDump", "var_name": "withModelDump"}, {"original_string": "private String constructInstruction;", "modifier": "private", "type": "String", "declarator": "constructInstruction", "var_name": "constructInstruction"}, {"original_string": "private List<List<Double>> rawLastClassificationResults = null;", "modifier": "private", "type": "List<List<Double>>", "declarator": "rawLastClassificationResults = null", "var_name": "rawLastClassificationResults"}, {"original_string": "private long seed;", "modifier": "private", "type": "long", "declarator": "seed", "var_name": "seed"}, {"original_string": "private Timeout timeout;", "modifier": "private", "type": "Timeout", "declarator": "timeout", "var_name": "timeout"}], "methods": [{"identifier": "ScikitLearnWrapper", "parameters": "(final String constructInstruction, final String imports, final boolean withModelDump, final EScikitLearnProblemType problemType)", "modifiers": "public", "return": "", "signature": " ScikitLearnWrapper(final String constructInstruction, final String imports, final boolean withModelDump, final EScikitLearnProblemType problemType)", "full_signature": "public  ScikitLearnWrapper(final String constructInstruction, final String imports, final boolean withModelDump, final EScikitLearnProblemType problemType)", "class_method_signature": "ScikitLearnWrapper.ScikitLearnWrapper(final String constructInstruction, final String imports, final boolean withModelDump, final EScikitLearnProblemType problemType)", "testcase": false, "constructor": true}, {"identifier": "ScikitLearnWrapper", "parameters": "(final String constructInstruction, final String imports, final EScikitLearnProblemType problemType)", "modifiers": "public", "return": "", "signature": " ScikitLearnWrapper(final String constructInstruction, final String imports, final EScikitLearnProblemType problemType)", "full_signature": "public  ScikitLearnWrapper(final String constructInstruction, final String imports, final EScikitLearnProblemType problemType)", "class_method_signature": "ScikitLearnWrapper.ScikitLearnWrapper(final String constructInstruction, final String imports, final EScikitLearnProblemType problemType)", "testcase": false, "constructor": true}, {"identifier": "ScikitLearnWrapper", "parameters": "(final String constructInstruction, final String imports, final File trainedModelPath, final EScikitLearnProblemType problemType)", "modifiers": "public", "return": "", "signature": " ScikitLearnWrapper(final String constructInstruction, final String imports, final File trainedModelPath, final EScikitLearnProblemType problemType)", "full_signature": "public  ScikitLearnWrapper(final String constructInstruction, final String imports, final File trainedModelPath, final EScikitLearnProblemType problemType)", "class_method_signature": "ScikitLearnWrapper.ScikitLearnWrapper(final String constructInstruction, final String imports, final File trainedModelPath, final EScikitLearnProblemType problemType)", "testcase": false, "constructor": true}, {"identifier": "getProblemType", "parameters": "()", "modifiers": "public", "return": "EScikitLearnProblemType", "signature": "EScikitLearnProblemType getProblemType()", "full_signature": "public EScikitLearnProblemType getProblemType()", "class_method_signature": "ScikitLearnWrapper.getProblemType()", "testcase": false, "constructor": false}, {"identifier": "getPythonConfig", "parameters": "()", "modifiers": "public", "return": "IPythonConfig", "signature": "IPythonConfig getPythonConfig()", "full_signature": "public IPythonConfig getPythonConfig()", "class_method_signature": "ScikitLearnWrapper.getPythonConfig()", "testcase": false, "constructor": false}, {"identifier": "setPythonConfig", "parameters": "(final IPythonConfig pythonConfig)", "modifiers": "public", "return": "void", "signature": "void setPythonConfig(final IPythonConfig pythonConfig)", "full_signature": "public void setPythonConfig(final IPythonConfig pythonConfig)", "class_method_signature": "ScikitLearnWrapper.setPythonConfig(final IPythonConfig pythonConfig)", "testcase": false, "constructor": false}, {"identifier": "getSKLearnScriptFile", "parameters": "()", "modifiers": "private", "return": "File", "signature": "File getSKLearnScriptFile()", "full_signature": "private File getSKLearnScriptFile()", "class_method_signature": "ScikitLearnWrapper.getSKLearnScriptFile()", "testcase": false, "constructor": false}, {"identifier": "getResultFile", "parameters": "(final String arffName)", "modifiers": "private", "return": "File", "signature": "File getResultFile(final String arffName)", "full_signature": "private File getResultFile(final String arffName)", "class_method_signature": "ScikitLearnWrapper.getResultFile(final String arffName)", "testcase": false, "constructor": false}, {"identifier": "fit", "parameters": "(final ILabeledDataset<? extends ILabeledInstance> data)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "signature": "void fit(final ILabeledDataset<? extends ILabeledInstance> data)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void fit(final ILabeledDataset<? extends ILabeledInstance> data)", "class_method_signature": "ScikitLearnWrapper.fit(final ILabeledDataset<? extends ILabeledInstance> data)", "testcase": false, "constructor": false}, {"identifier": "getArffFile", "parameters": "(final ILabeledDataset<? extends ILabeledInstance> data, final String arffName)", "modifiers": "private synchronized", "return": "File", "signature": "File getArffFile(final ILabeledDataset<? extends ILabeledInstance> data, final String arffName)", "full_signature": "private synchronized File getArffFile(final ILabeledDataset<? extends ILabeledInstance> data, final String arffName)", "class_method_signature": "ScikitLearnWrapper.getArffFile(final ILabeledDataset<? extends ILabeledInstance> data, final String arffName)", "testcase": false, "constructor": false}, {"identifier": "predict", "parameters": "(final ILabeledInstance instance)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "P", "signature": "P predict(final ILabeledInstance instance)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public P predict(final ILabeledInstance instance)", "class_method_signature": "ScikitLearnWrapper.predict(final ILabeledInstance instance)", "testcase": false, "constructor": false}, {"identifier": "predict", "parameters": "(final ILabeledInstance[] dTest)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "B", "signature": "B predict(final ILabeledInstance[] dTest)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public B predict(final ILabeledInstance[] dTest)", "class_method_signature": "ScikitLearnWrapper.predict(final ILabeledInstance[] dTest)", "testcase": false, "constructor": false}, {"identifier": "createImportStatementFromImportFolder", "parameters": "(final File importsFolder, final boolean keepNamespace)", "modifiers": "public static", "return": "String", "signature": "String createImportStatementFromImportFolder(final File importsFolder, final boolean keepNamespace)", "full_signature": "public static String createImportStatementFromImportFolder(final File importsFolder, final boolean keepNamespace)", "class_method_signature": "ScikitLearnWrapper.createImportStatementFromImportFolder(final File importsFolder, final boolean keepNamespace)", "testcase": false, "constructor": false}, {"identifier": "getTemplateValueMap", "parameters": "(final String constructInstruction, final String imports)", "modifiers": "private", "return": "Map<String, Object>", "signature": "Map<String, Object> getTemplateValueMap(final String constructInstruction, final String imports)", "full_signature": "private Map<String, Object> getTemplateValueMap(final String constructInstruction, final String imports)", "class_method_signature": "ScikitLearnWrapper.getTemplateValueMap(final String constructInstruction, final String imports)", "testcase": false, "constructor": false}, {"identifier": "getImportString", "parameters": "(final Collection<String> imports)", "modifiers": "public static", "return": "String", "signature": "String getImportString(final Collection<String> imports)", "full_signature": "public static String getImportString(final Collection<String> imports)", "class_method_signature": "ScikitLearnWrapper.getImportString(final Collection<String> imports)", "testcase": false, "constructor": false}, {"identifier": "getRawLastClassificationResults", "parameters": "()", "modifiers": "public", "return": "List<List<Double>>", "signature": "List<List<Double>> getRawLastClassificationResults()", "full_signature": "public List<List<Double>> getRawLastClassificationResults()", "class_method_signature": "ScikitLearnWrapper.getRawLastClassificationResults()", "testcase": false, "constructor": false}, {"identifier": "setProblemType", "parameters": "(final EScikitLearnProblemType problemType)", "modifiers": "public", "return": "void", "signature": "void setProblemType(final EScikitLearnProblemType problemType)", "full_signature": "public void setProblemType(final EScikitLearnProblemType problemType)", "class_method_signature": "ScikitLearnWrapper.setProblemType(final EScikitLearnProblemType problemType)", "testcase": false, "constructor": false}, {"identifier": "setSeed", "parameters": "(final long seed)", "modifiers": "public", "return": "void", "signature": "void setSeed(final long seed)", "full_signature": "public void setSeed(final long seed)", "class_method_signature": "ScikitLearnWrapper.setSeed(final long seed)", "testcase": false, "constructor": false}, {"identifier": "setTimeout", "parameters": "(final Timeout timeout)", "modifiers": "public", "return": "void", "signature": "void setTimeout(final Timeout timeout)", "full_signature": "public void setTimeout(final Timeout timeout)", "class_method_signature": "ScikitLearnWrapper.setTimeout(final Timeout timeout)", "testcase": false, "constructor": false}, {"identifier": "setTargets", "parameters": "(final int... targetColumns)", "modifiers": "public", "return": "void", "signature": "void setTargets(final int... targetColumns)", "full_signature": "public void setTargets(final int... targetColumns)", "class_method_signature": "ScikitLearnWrapper.setTargets(final int... targetColumns)", "testcase": false, "constructor": false}, {"identifier": "setModelPath", "parameters": "(final File modelFile)", "modifiers": "public", "return": "void", "signature": "void setModelPath(final File modelFile)", "full_signature": "public void setModelPath(final File modelFile)", "class_method_signature": "ScikitLearnWrapper.setModelPath(final File modelFile)", "testcase": false, "constructor": false}, {"identifier": "getModelPath", "parameters": "()", "modifiers": "public", "return": "File", "signature": "File getModelPath()", "full_signature": "public File getModelPath()", "class_method_signature": "ScikitLearnWrapper.getModelPath()", "testcase": false, "constructor": false}, {"identifier": "getArffName", "parameters": "(final ILabeledDataset<? extends ILabeledInstance> data)", "modifiers": "private", "return": "String", "signature": "String getArffName(final ILabeledDataset<? extends ILabeledInstance> data)", "full_signature": "private String getArffName(final ILabeledDataset<? extends ILabeledInstance> data)", "class_method_signature": "ScikitLearnWrapper.getArffName(final ILabeledDataset<? extends ILabeledInstance> data)", "testcase": false, "constructor": false}, {"identifier": "runProcess", "parameters": "(final String[] parameters, final AProcessListener listener)", "modifiers": "private", "return": "void", "signature": "void runProcess(final String[] parameters, final AProcessListener listener)", "full_signature": "private void runProcess(final String[] parameters, final AProcessListener listener)", "class_method_signature": "ScikitLearnWrapper.runProcess(final String[] parameters, final AProcessListener listener)", "testcase": false, "constructor": false}, {"identifier": "distributionForInstance", "parameters": "(final ILabeledInstance instance)", "modifiers": "public", "return": "double[]", "signature": "double[] distributionForInstance(final ILabeledInstance instance)", "full_signature": "public double[] distributionForInstance(final ILabeledInstance instance)", "class_method_signature": "ScikitLearnWrapper.distributionForInstance(final ILabeledInstance instance)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ScikitLearnWrapper.toString()", "testcase": false, "constructor": false}], "file": "JAICore/jaicore-ml/src/main/java/ai/libs/jaicore/ml/scikitwrapper/ScikitLearnWrapper.java"}, "focal_method": {"identifier": "getImportString", "parameters": "(final Collection<String> imports)", "modifiers": "public static", "return": "String", "body": "public static String getImportString(final Collection<String> imports) {\n\t\treturn (imports == null || imports.isEmpty()) ? \"\" : \"import \" + StringUtils.join(imports, \"\\nimport \");\n\t}", "signature": "String getImportString(final Collection<String> imports)", "full_signature": "public static String getImportString(final Collection<String> imports)", "class_method_signature": "ScikitLearnWrapper.getImportString(final Collection<String> imports)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "join"]}, "repository": {"repo_id": 95635499, "url": "https://github.com/fmohr/AILibs", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 25, "size": 155873, "license": "licensed"}}