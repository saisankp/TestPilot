{"test_class": {"identifier": "ComposedEventizerProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}], "file": "jumi-actors/src/test/java/fi/jumi/actors/eventizers/ComposedEventizerProviderTest.java"}, "test_case": {"identifier": "returns_an_eventizer_which_corresponds_the_specified_type", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void returns_an_eventizer_which_corresponds_the_specified_type() {\n        Class<Integer> type1 = Integer.class;\n        Eventizer<Integer> eventizer1 = new DummyEventizer<>(type1);\n        Class<Double> type2 = Double.class;\n        Eventizer<Double> eventizer2 = new DummyEventizer<>(type2);\n\n        ComposedEventizerProvider provider = new ComposedEventizerProvider(eventizer1, eventizer2);\n\n        assertThat(provider.getEventizerForType(type1), is(eventizer1));\n        assertThat(provider.getEventizerForType(type2), is(eventizer2));\n    }", "signature": "void returns_an_eventizer_which_corresponds_the_specified_type()", "full_signature": "@Test public void returns_an_eventizer_which_corresponds_the_specified_type()", "class_method_signature": "ComposedEventizerProviderTest.returns_an_eventizer_which_corresponds_the_specified_type()", "testcase": true, "constructor": false, "invocations": ["assertThat", "getEventizerForType", "is", "assertThat", "getEventizerForType", "is"]}, "focal_class": {"identifier": "ComposedEventizerProvider", "superclass": "", "interfaces": "implements EventizerProvider", "fields": [{"original_string": "private final Map<Class<?>, Eventizer<?>> eventizers;", "modifier": "private final", "type": "Map<Class<?>, Eventizer<?>>", "declarator": "eventizers", "var_name": "eventizers"}], "methods": [{"identifier": "ComposedEventizerProvider", "parameters": "(Eventizer<?>... eventizers)", "modifiers": "public", "return": "", "signature": " ComposedEventizerProvider(Eventizer<?>... eventizers)", "full_signature": "public  ComposedEventizerProvider(Eventizer<?>... eventizers)", "class_method_signature": "ComposedEventizerProvider.ComposedEventizerProvider(Eventizer<?>... eventizers)", "testcase": false, "constructor": true}, {"identifier": "getEventizerForType", "parameters": "(Class<T> type)", "modifiers": "@SuppressWarnings({\"unchecked\"}) @Override public", "return": "Eventizer<T>", "signature": "Eventizer<T> getEventizerForType(Class<T> type)", "full_signature": "@SuppressWarnings({\"unchecked\"}) @Override public Eventizer<T> getEventizerForType(Class<T> type)", "class_method_signature": "ComposedEventizerProvider.getEventizerForType(Class<T> type)", "testcase": false, "constructor": false}], "file": "jumi-actors/src/main/java/fi/jumi/actors/eventizers/ComposedEventizerProvider.java"}, "focal_method": {"identifier": "getEventizerForType", "parameters": "(Class<T> type)", "modifiers": "@SuppressWarnings({\"unchecked\"}) @Override public", "return": "Eventizer<T>", "body": "@SuppressWarnings({\"unchecked\"})\n    @Override\n    public <T> Eventizer<T> getEventizerForType(Class<T> type) {\n        Eventizer<?> eventizer = eventizers.get(type);\n        if (eventizer == null) {\n            throw new IllegalArgumentException(\"unsupported type: \" + type);\n        }\n        return (Eventizer<T>) eventizer;\n    }", "signature": "Eventizer<T> getEventizerForType(Class<T> type)", "full_signature": "@SuppressWarnings({\"unchecked\"}) @Override public Eventizer<T> getEventizerForType(Class<T> type)", "class_method_signature": "ComposedEventizerProvider.getEventizerForType(Class<T> type)", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 6426667, "url": "https://github.com/luontola/jumi-actors", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 78, "size": 2989, "license": "licensed"}}