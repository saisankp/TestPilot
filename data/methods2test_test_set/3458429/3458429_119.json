{"test_class": {"identifier": "DeflateFrameExtensionTest", "superclass": "extends AbstractExtensionTest", "interfaces": "", "fields": [{"original_string": "private static final LazyLogger LOG = SystemLogger.create(DeflateFrameExtensionTest.class);", "modifier": "private static final", "type": "LazyLogger", "declarator": "LOG = SystemLogger.create(DeflateFrameExtensionTest.class)", "var_name": "LOG"}], "file": "firefly-net/src/test/java/com/fireflysource/net/websocket/common/extension/compress/DeflateFrameExtensionTest.java"}, "test_case": {"identifier": "testCompressAndDecompressBigPayload", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCompressAndDecompressBigPayload() throws Exception {\n        byte[] input = new byte[1024 * 1024];\n        // Make them not compressible.\n        new Random().nextBytes(input);\n\n        int maxMessageSize = (1024 * 1024) + 8192;\n\n        DeflateFrameExtension clientExtension = new DeflateFrameExtension();\n        clientExtension.setPolicy(WebSocketPolicy.newClientPolicy());\n        clientExtension.getPolicy().setMaxBinaryMessageSize(maxMessageSize);\n        clientExtension.getPolicy().setMaxBinaryMessageBufferSize(maxMessageSize);\n        clientExtension.setConfig(ExtensionConfig.parse(\"deflate-frame\"));\n\n        final DeflateFrameExtension serverExtension = new DeflateFrameExtension();\n        serverExtension.setPolicy(WebSocketPolicy.newServerPolicy());\n        serverExtension.getPolicy().setMaxBinaryMessageSize(maxMessageSize);\n        serverExtension.getPolicy().setMaxBinaryMessageBufferSize(maxMessageSize);\n        serverExtension.setConfig(ExtensionConfig.parse(\"deflate-frame\"));\n\n        // Chain the next element to decompress.\n        clientExtension.setNextOutgoingFrames(new OutgoingFrames() {\n            @Override\n            public void outgoingFrame(Frame frame, Consumer<Result<Void>> result) {\n                LOG.debug(\"outgoingFrame({})\", frame);\n                serverExtension.incomingFrame(frame);\n                result.accept(Result.SUCCESS);\n            }\n        });\n\n        final ByteArrayOutputStream result = new ByteArrayOutputStream(input.length);\n        serverExtension.setNextIncomingFrames(new IncomingFrames() {\n            @Override\n            public void incomingFrame(Frame frame) {\n                LOG.debug(\"incomingFrame({})\", frame);\n                try {\n                    result.write(BufferUtils.toArray(frame.getPayload()));\n                } catch (IOException x) {\n                    throw new RuntimeException(x);\n                }\n            }\n        });\n\n        BinaryFrame frame = new BinaryFrame();\n        frame.setPayload(input);\n        frame.setFin(true);\n        clientExtension.outgoingFrame(frame, null);\n\n        assertArrayEquals(input, result.toByteArray());\n    }", "signature": "void testCompressAndDecompressBigPayload()", "full_signature": "@Test public void testCompressAndDecompressBigPayload()", "class_method_signature": "DeflateFrameExtensionTest.testCompressAndDecompressBigPayload()", "testcase": true, "constructor": false, "invocations": ["nextBytes", "setPolicy", "newClientPolicy", "setMaxBinaryMessageSize", "getPolicy", "setMaxBinaryMessageBufferSize", "getPolicy", "setConfig", "parse", "setPolicy", "newServerPolicy", "setMaxBinaryMessageSize", "getPolicy", "setMaxBinaryMessageBufferSize", "getPolicy", "setConfig", "parse", "setNextOutgoingFrames", "debug", "incomingFrame", "accept", "setNextIncomingFrames", "debug", "write", "toArray", "getPayload", "setPayload", "setFin", "outgoingFrame", "assertArrayEquals", "toByteArray"]}, "focal_class": {"identifier": "DeflateFrameExtension", "superclass": "extends CompressExtension", "interfaces": "", "fields": [], "methods": [{"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "DeflateFrameExtension.getName()", "testcase": false, "constructor": false}, {"identifier": "getRsvUseMode", "parameters": "()", "modifiers": "@Override", "return": "int", "signature": "int getRsvUseMode()", "full_signature": "@Override int getRsvUseMode()", "class_method_signature": "DeflateFrameExtension.getRsvUseMode()", "testcase": false, "constructor": false}, {"identifier": "getTailDropMode", "parameters": "()", "modifiers": "@Override", "return": "int", "signature": "int getTailDropMode()", "full_signature": "@Override int getTailDropMode()", "class_method_signature": "DeflateFrameExtension.getTailDropMode()", "testcase": false, "constructor": false}, {"identifier": "incomingFrame", "parameters": "(Frame frame)", "modifiers": "@Override public", "return": "void", "signature": "void incomingFrame(Frame frame)", "full_signature": "@Override public void incomingFrame(Frame frame)", "class_method_signature": "DeflateFrameExtension.incomingFrame(Frame frame)", "testcase": false, "constructor": false}], "file": "firefly-net/src/main/java/com/fireflysource/net/websocket/common/extension/compress/DeflateFrameExtension.java"}, "focal_method": {"identifier": "incomingFrame", "parameters": "(Frame frame)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void incomingFrame(Frame frame) {\n        // Incoming frames are always non concurrent because\n        // they are read and parsed with a single thread, and\n        // therefore there is no need for synchronization.\n\n        if (frame.getType().isControl() || !frame.isRsv1() || !frame.hasPayload()) {\n            nextIncomingFrame(frame);\n            return;\n        }\n\n        try {\n            ByteAccumulator accumulator = newByteAccumulator();\n            decompress(accumulator, frame.getPayload());\n            decompress(accumulator, TAIL_BYTES_BUF.slice());\n            forwardIncoming(frame, accumulator);\n        } catch (DataFormatException e) {\n            throw new BadPayloadException(e);\n        }\n    }", "signature": "void incomingFrame(Frame frame)", "full_signature": "@Override public void incomingFrame(Frame frame)", "class_method_signature": "DeflateFrameExtension.incomingFrame(Frame frame)", "testcase": false, "constructor": false, "invocations": ["isControl", "getType", "isRsv1", "hasPayload", "nextIncomingFrame", "newByteAccumulator", "decompress", "getPayload", "decompress", "slice", "forwardIncoming"]}, "repository": {"repo_id": 3458429, "url": "https://github.com/hypercube1024/firefly", "language": "Java", "is_fork": false, "fork_count": 118, "stargazer_count": 271, "size": 29687, "license": "licensed"}}