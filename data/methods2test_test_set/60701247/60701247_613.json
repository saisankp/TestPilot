{"test_class": {"identifier": "MemoryClassifierViewTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final FakeTimer myTimer = new FakeTimer();", "modifier": "private final", "type": "FakeTimer", "declarator": "myTimer = new FakeTimer()", "var_name": "myTimer"}, {"original_string": "@Rule\n  public FakeGrpcChannel myGrpcChannel =\n    new FakeGrpcChannel(\"MEMORY_TEST_CHANNEL\", new FakeTransportService(myTimer), new FakeProfilerService(myTimer),\n                        new FakeMemoryService());", "modifier": "@Rule\n  public", "type": "FakeGrpcChannel", "declarator": "myGrpcChannel =\n    new FakeGrpcChannel(\"MEMORY_TEST_CHANNEL\", new FakeTransportService(myTimer), new FakeProfilerService(myTimer),\n                        new FakeMemoryService())", "var_name": "myGrpcChannel"}, {"original_string": "private FakeIdeProfilerServices myFakeIdeProfilerServices;", "modifier": "private", "type": "FakeIdeProfilerServices", "declarator": "myFakeIdeProfilerServices", "var_name": "myFakeIdeProfilerServices"}, {"original_string": "private FakeIdeProfilerComponents myFakeIdeProfilerComponents;", "modifier": "private", "type": "FakeIdeProfilerComponents", "declarator": "myFakeIdeProfilerComponents", "var_name": "myFakeIdeProfilerComponents"}, {"original_string": "private MemoryProfilerStage myStage;", "modifier": "private", "type": "MemoryProfilerStage", "declarator": "myStage", "var_name": "myStage"}, {"original_string": "private MemoryClassifierView myClassifierView;", "modifier": "private", "type": "MemoryClassifierView", "declarator": "myClassifierView", "var_name": "myClassifierView"}], "file": "profilers-ui/testSrc/com/android/tools/profilers/memory/MemoryClassifierViewTest.java"}, "test_case": {"identifier": "navigationTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void navigationTest() {\n    final String TEST_CLASS_NAME = \"com.Foo\";\n\n    FakeCaptureObject captureObject = new FakeCaptureObject.Builder().build();\n    InstanceObject instance1 =\n      new FakeInstanceObject.Builder(captureObject, 1, TEST_CLASS_NAME).setName(\"instanceFoo1\").setDepth(0)\n        .setShallowSize(0).setRetainedSize(0).build();\n    Set<InstanceObject> instanceObjects = new HashSet<>(Collections.singleton(instance1));\n    captureObject.addInstanceObjects(instanceObjects);\n    myStage\n      .selectCaptureDuration(new CaptureDurationData<>(1, false, false, new CaptureEntry<CaptureObject>(new Object(), () -> captureObject)),\n                             null);\n\n    HeapSet heapSet = captureObject.getHeapSet(CaptureObject.DEFAULT_HEAP_ID);\n    assertThat(heapSet).isNotNull();\n    myStage.selectHeapSet(heapSet);\n\n    assertThat(myStage.getConfiguration().getClassGrouping()).isEqualTo(ARRANGE_BY_CLASS);\n\n    JTree classifierTree = myClassifierView.getTree();\n    assertThat(classifierTree).isNotNull();\n\n    Object root = classifierTree.getModel().getRoot();\n    assertThat(root).isInstanceOf(MemoryObjectTreeNode.class);\n    assertThat(((MemoryObjectTreeNode)root).getAdapter()).isInstanceOf(HeapSet.class);\n    //noinspection unchecked\n    MemoryObjectTreeNode<ClassifierSet> rootNode = (MemoryObjectTreeNode<ClassifierSet>)root;\n    assertThat(rootNode.getChildCount()).isEqualTo(1);\n\n    assertThat(myStage.getSelectedClassSet()).isNull();\n    myStage.selectClassSet(findChildClassSetWithName(rootNode.getAdapter(), TEST_CLASS_NAME));\n    myStage.selectInstanceObject(instance1);\n\n    Supplier<CodeLocation> codeLocationSupplier = myFakeIdeProfilerComponents.getCodeLocationSupplier(classifierTree);\n\n    assertThat(codeLocationSupplier).isNotNull();\n    CodeLocation codeLocation = codeLocationSupplier.get();\n    assertThat(codeLocation).isNotNull();\n    String codeLocationClassName = codeLocation.getClassName();\n    assertThat(codeLocationClassName).isEqualTo(TEST_CLASS_NAME);\n\n    myStage.getStudioProfilers().getIdeServices().getCodeNavigator().addListener(myStage); // manually add, since we didn't enter stage\n    myStage.getStudioProfilers().getIdeServices().getCodeNavigator().navigate(codeLocation);\n    myStage.getStudioProfilers().getIdeServices().getCodeNavigator().removeListener(myStage);\n    assertThat(myStage.getProfilerMode()).isEqualTo(ProfilerMode.NORMAL);\n  }", "signature": "void navigationTest()", "full_signature": "@Test public void navigationTest()", "class_method_signature": "MemoryClassifierViewTest.navigationTest()", "testcase": true, "constructor": false, "invocations": ["build", "build", "setRetainedSize", "setShallowSize", "setDepth", "setName", "singleton", "addInstanceObjects", "selectCaptureDuration", "getHeapSet", "isNotNull", "assertThat", "selectHeapSet", "isEqualTo", "assertThat", "getClassGrouping", "getConfiguration", "getTree", "isNotNull", "assertThat", "getRoot", "getModel", "isInstanceOf", "assertThat", "isInstanceOf", "assertThat", "getAdapter", "isEqualTo", "assertThat", "getChildCount", "isNull", "assertThat", "getSelectedClassSet", "selectClassSet", "findChildClassSetWithName", "getAdapter", "selectInstanceObject", "getCodeLocationSupplier", "isNotNull", "assertThat", "get", "isNotNull", "assertThat", "getClassName", "isEqualTo", "assertThat", "addListener", "getCodeNavigator", "getIdeServices", "getStudioProfilers", "navigate", "getCodeNavigator", "getIdeServices", "getStudioProfilers", "removeListener", "getCodeNavigator", "getIdeServices", "getStudioProfilers", "isEqualTo", "assertThat", "getProfilerMode"]}, "focal_class": {"identifier": "MemoryClassifierView", "superclass": "extends AspectObserver", "interfaces": "", "fields": [{"original_string": "private static final int LABEL_COLUMN_WIDTH = 800;", "modifier": "private static final", "type": "int", "declarator": "LABEL_COLUMN_WIDTH = 800", "var_name": "LABEL_COLUMN_WIDTH"}, {"original_string": "private static final int DEFAULT_COLUMN_WIDTH = 80;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_COLUMN_WIDTH = 80", "var_name": "DEFAULT_COLUMN_WIDTH"}, {"original_string": "private static final int HEAP_UPDATING_DELAY_MS = 250;", "modifier": "private static final", "type": "int", "declarator": "HEAP_UPDATING_DELAY_MS = 250", "var_name": "HEAP_UPDATING_DELAY_MS"}, {"original_string": "private static final int MIN_COLUMN_WIDTH = 16;", "modifier": "private static final", "type": "int", "declarator": "MIN_COLUMN_WIDTH = 16", "var_name": "MIN_COLUMN_WIDTH"}, {"original_string": "private static final String HELP_TIP_HEADER_LIVE_ALLOCATION = \"Selected range has no allocations or deallocations\";", "modifier": "private static final", "type": "String", "declarator": "HELP_TIP_HEADER_LIVE_ALLOCATION = \"Selected range has no allocations or deallocations\"", "var_name": "HELP_TIP_HEADER_LIVE_ALLOCATION"}, {"original_string": "private static final String HELP_TIP_DESCRIPTION_LIVE_ALLOCATION =\n    \"Select a valid range in the timeline where the Java memory is changing to view allocations and deallocations.\";", "modifier": "private static final", "type": "String", "declarator": "HELP_TIP_DESCRIPTION_LIVE_ALLOCATION =\n    \"Select a valid range in the timeline where the Java memory is changing to view allocations and deallocations.\"", "var_name": "HELP_TIP_DESCRIPTION_LIVE_ALLOCATION"}, {"original_string": "private static final String HELP_TIP_HEADER_EXPLICIT_CAPTURE = \"Selected capture has no contents\";", "modifier": "private static final", "type": "String", "declarator": "HELP_TIP_HEADER_EXPLICIT_CAPTURE = \"Selected capture has no contents\"", "var_name": "HELP_TIP_HEADER_EXPLICIT_CAPTURE"}, {"original_string": "private static final String HELP_TIP_DESCRIPTION_EXPLICIT_CAPTURE = \"There are no allocations in the selected capture.\";", "modifier": "private static final", "type": "String", "declarator": "HELP_TIP_DESCRIPTION_EXPLICIT_CAPTURE = \"There are no allocations in the selected capture.\"", "var_name": "HELP_TIP_DESCRIPTION_EXPLICIT_CAPTURE"}, {"original_string": "@NotNull private final MemoryProfilerStage myStage;", "modifier": "@NotNull private final", "type": "MemoryProfilerStage", "declarator": "myStage", "var_name": "myStage"}, {"original_string": "@NotNull private final ContextMenuInstaller myContextMenuInstaller;", "modifier": "@NotNull private final", "type": "ContextMenuInstaller", "declarator": "myContextMenuInstaller", "var_name": "myContextMenuInstaller"}, {"original_string": "@NotNull private final Map<ClassifierAttribute, AttributeColumn<ClassifierSet>> myAttributeColumns = new HashMap<>();", "modifier": "@NotNull private final", "type": "Map<ClassifierAttribute, AttributeColumn<ClassifierSet>>", "declarator": "myAttributeColumns = new HashMap<>()", "var_name": "myAttributeColumns"}, {"original_string": "@Nullable private CaptureObject myCaptureObject = null;", "modifier": "@Nullable private", "type": "CaptureObject", "declarator": "myCaptureObject = null", "var_name": "myCaptureObject"}, {"original_string": "@Nullable private HeapSet myHeapSet = null;", "modifier": "@Nullable private", "type": "HeapSet", "declarator": "myHeapSet = null", "var_name": "myHeapSet"}, {"original_string": "@Nullable private ClassSet myClassSet = null;", "modifier": "@Nullable private", "type": "ClassSet", "declarator": "myClassSet = null", "var_name": "myClassSet"}, {"original_string": "@Nullable private ClassifierSet mySelectedClassifierSet = null;", "modifier": "@Nullable private", "type": "ClassifierSet", "declarator": "mySelectedClassifierSet = null", "var_name": "mySelectedClassifierSet"}, {"original_string": "@NotNull private final JPanel myPanel = new JPanel(new BorderLayout());", "modifier": "@NotNull private final", "type": "JPanel", "declarator": "myPanel = new JPanel(new BorderLayout())", "var_name": "myPanel"}, {"original_string": "@NotNull private final JPanel myClassifierPanel = new JPanel(new BorderLayout());", "modifier": "@NotNull private final", "type": "JPanel", "declarator": "myClassifierPanel = new JPanel(new BorderLayout())", "var_name": "myClassifierPanel"}, {"original_string": "@NotNull private final LoadingPanel myLoadingPanel;", "modifier": "@NotNull private final", "type": "LoadingPanel", "declarator": "myLoadingPanel", "var_name": "myLoadingPanel"}, {"original_string": "@Nullable private InstructionsPanel myHelpTipPanel;", "modifier": "@Nullable private", "type": "InstructionsPanel", "declarator": "myHelpTipPanel", "var_name": "myHelpTipPanel"}, {"original_string": "@Nullable private JComponent myColumnTree;", "modifier": "@Nullable private", "type": "JComponent", "declarator": "myColumnTree", "var_name": "myColumnTree"}, {"original_string": "@Nullable private JTree myTree;", "modifier": "@Nullable private", "type": "JTree", "declarator": "myTree", "var_name": "myTree"}, {"original_string": "@Nullable private DefaultTreeModel myTreeModel;", "modifier": "@Nullable private", "type": "DefaultTreeModel", "declarator": "myTreeModel", "var_name": "myTreeModel"}, {"original_string": "@Nullable private TableColumnModel myTableColumnModel;", "modifier": "@Nullable private", "type": "TableColumnModel", "declarator": "myTableColumnModel", "var_name": "myTableColumnModel"}, {"original_string": "@Nullable private MemoryClassifierTreeNode myTreeRoot;", "modifier": "@Nullable private", "type": "MemoryClassifierTreeNode", "declarator": "myTreeRoot", "var_name": "myTreeRoot"}, {"original_string": "@Nullable private Comparator<MemoryObjectTreeNode<ClassifierSet>> myInitialComparator;", "modifier": "@Nullable private", "type": "Comparator<MemoryObjectTreeNode<ClassifierSet>>", "declarator": "myInitialComparator", "var_name": "myInitialComparator"}], "methods": [{"identifier": "MemoryClassifierView", "parameters": "(@NotNull MemoryProfilerStage stage, @NotNull IdeProfilerComponents ideProfilerComponents)", "modifiers": "public", "return": "", "signature": " MemoryClassifierView(@NotNull MemoryProfilerStage stage, @NotNull IdeProfilerComponents ideProfilerComponents)", "full_signature": "public  MemoryClassifierView(@NotNull MemoryProfilerStage stage, @NotNull IdeProfilerComponents ideProfilerComponents)", "class_method_signature": "MemoryClassifierView.MemoryClassifierView(@NotNull MemoryProfilerStage stage, @NotNull IdeProfilerComponents ideProfilerComponents)", "testcase": false, "constructor": true}, {"identifier": "getComponent", "parameters": "()", "modifiers": "@NotNull", "return": "JComponent", "signature": "JComponent getComponent()", "full_signature": "@NotNull JComponent getComponent()", "class_method_signature": "MemoryClassifierView.getComponent()", "testcase": false, "constructor": false}, {"identifier": "getTree", "parameters": "()", "modifiers": "@VisibleForTesting @Nullable", "return": "JTree", "signature": "JTree getTree()", "full_signature": "@VisibleForTesting @Nullable JTree getTree()", "class_method_signature": "MemoryClassifierView.getTree()", "testcase": false, "constructor": false}, {"identifier": "getColumnTree", "parameters": "()", "modifiers": "@VisibleForTesting @Nullable", "return": "JComponent", "signature": "JComponent getColumnTree()", "full_signature": "@VisibleForTesting @Nullable JComponent getColumnTree()", "class_method_signature": "MemoryClassifierView.getColumnTree()", "testcase": false, "constructor": false}, {"identifier": "getTableColumnModel", "parameters": "()", "modifiers": "@VisibleForTesting @Nullable", "return": "TableColumnModel", "signature": "TableColumnModel getTableColumnModel()", "full_signature": "@VisibleForTesting @Nullable TableColumnModel getTableColumnModel()", "class_method_signature": "MemoryClassifierView.getTableColumnModel()", "testcase": false, "constructor": false}, {"identifier": "getClassifierPanel", "parameters": "()", "modifiers": "@VisibleForTesting @NotNull", "return": "JPanel", "signature": "JPanel getClassifierPanel()", "full_signature": "@VisibleForTesting @NotNull JPanel getClassifierPanel()", "class_method_signature": "MemoryClassifierView.getClassifierPanel()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void reset()", "full_signature": "private void reset()", "class_method_signature": "MemoryClassifierView.reset()", "testcase": false, "constructor": false}, {"identifier": "loadCapture", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void loadCapture()", "full_signature": "private void loadCapture()", "class_method_signature": "MemoryClassifierView.loadCapture()", "testcase": false, "constructor": false}, {"identifier": "refreshFilter", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void refreshFilter()", "full_signature": "private void refreshFilter()", "class_method_signature": "MemoryClassifierView.refreshFilter()", "testcase": false, "constructor": false}, {"identifier": "refreshCapture", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void refreshCapture()", "full_signature": "private void refreshCapture()", "class_method_signature": "MemoryClassifierView.refreshCapture()", "testcase": false, "constructor": false}, {"identifier": "startHeapLoadingUi", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void startHeapLoadingUi()", "full_signature": "private void startHeapLoadingUi()", "class_method_signature": "MemoryClassifierView.startHeapLoadingUi()", "testcase": false, "constructor": false}, {"identifier": "stopHeapLoadingUi", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void stopHeapLoadingUi()", "full_signature": "private void stopHeapLoadingUi()", "class_method_signature": "MemoryClassifierView.stopHeapLoadingUi()", "testcase": false, "constructor": false}, {"identifier": "refreshClassifierPanel", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void refreshClassifierPanel()", "full_signature": "private void refreshClassifierPanel()", "class_method_signature": "MemoryClassifierView.refreshClassifierPanel()", "testcase": false, "constructor": false}, {"identifier": "refreshTree", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void refreshTree()", "full_signature": "private void refreshTree()", "class_method_signature": "MemoryClassifierView.refreshTree()", "testcase": false, "constructor": false}, {"identifier": "refreshHeapSet", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void refreshHeapSet()", "full_signature": "private void refreshHeapSet()", "class_method_signature": "MemoryClassifierView.refreshHeapSet()", "testcase": false, "constructor": false}, {"identifier": "refreshGrouping", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void refreshGrouping()", "full_signature": "private void refreshGrouping()", "class_method_signature": "MemoryClassifierView.refreshGrouping()", "testcase": false, "constructor": false}, {"identifier": "findSmallestSuperSetNode", "parameters": "(@NotNull MemoryObjectTreeNode<ClassifierSet> rootNode,\n                                                                              @NotNull ClassifierSet targetSet)", "modifiers": "@Nullable private static", "return": "MemoryObjectTreeNode<ClassifierSet>", "signature": "MemoryObjectTreeNode<ClassifierSet> findSmallestSuperSetNode(@NotNull MemoryObjectTreeNode<ClassifierSet> rootNode,\n                                                                              @NotNull ClassifierSet targetSet)", "full_signature": "@Nullable private static MemoryObjectTreeNode<ClassifierSet> findSmallestSuperSetNode(@NotNull MemoryObjectTreeNode<ClassifierSet> rootNode,\n                                                                              @NotNull ClassifierSet targetSet)", "class_method_signature": "MemoryClassifierView.findSmallestSuperSetNode(@NotNull MemoryObjectTreeNode<ClassifierSet> rootNode,\n                                                                              @NotNull ClassifierSet targetSet)", "testcase": false, "constructor": false}, {"identifier": "refreshClassSet", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void refreshClassSet()", "full_signature": "private void refreshClassSet()", "class_method_signature": "MemoryClassifierView.refreshClassSet()", "testcase": false, "constructor": false}, {"identifier": "getNameColumnRenderer", "parameters": "()", "modifiers": "@NotNull private", "return": "ColoredTreeCellRenderer", "signature": "ColoredTreeCellRenderer getNameColumnRenderer()", "full_signature": "@NotNull private ColoredTreeCellRenderer getNameColumnRenderer()", "class_method_signature": "MemoryClassifierView.getNameColumnRenderer()", "testcase": false, "constructor": false}, {"identifier": "createTreeNodeComparator", "parameters": "(@NotNull Comparator<ClassifierSet> classifierSetComparator,\n                                                                                          @NotNull Comparator<ClassSet> classSetComparator)", "modifiers": "private static", "return": "Comparator<MemoryObjectTreeNode<ClassifierSet>>", "signature": "Comparator<MemoryObjectTreeNode<ClassifierSet>> createTreeNodeComparator(@NotNull Comparator<ClassifierSet> classifierSetComparator,\n                                                                                          @NotNull Comparator<ClassSet> classSetComparator)", "full_signature": "private static Comparator<MemoryObjectTreeNode<ClassifierSet>> createTreeNodeComparator(@NotNull Comparator<ClassifierSet> classifierSetComparator,\n                                                                                          @NotNull Comparator<ClassSet> classSetComparator)", "class_method_signature": "MemoryClassifierView.createTreeNodeComparator(@NotNull Comparator<ClassifierSet> classifierSetComparator,\n                                                                                          @NotNull Comparator<ClassSet> classSetComparator)", "testcase": false, "constructor": false}, {"identifier": "createTreeNodeComparator", "parameters": "(@NotNull Comparator<ClassSet> classObjectComparator)", "modifiers": "private static", "return": "Comparator<MemoryObjectTreeNode<ClassifierSet>>", "signature": "Comparator<MemoryObjectTreeNode<ClassifierSet>> createTreeNodeComparator(@NotNull Comparator<ClassSet> classObjectComparator)", "full_signature": "private static Comparator<MemoryObjectTreeNode<ClassifierSet>> createTreeNodeComparator(@NotNull Comparator<ClassSet> classObjectComparator)", "class_method_signature": "MemoryClassifierView.createTreeNodeComparator(@NotNull Comparator<ClassSet> classObjectComparator)", "testcase": false, "constructor": false}], "file": "profilers-ui/src/com/android/tools/profilers/memory/MemoryClassifierView.java"}, "focal_method": {"identifier": "getTree", "parameters": "()", "modifiers": "@VisibleForTesting @Nullable", "return": "JTree", "body": "@VisibleForTesting\n  @Nullable\n  JTree getTree() {\n    return myTree;\n  }", "signature": "JTree getTree()", "full_signature": "@VisibleForTesting @Nullable JTree getTree()", "class_method_signature": "MemoryClassifierView.getTree()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}