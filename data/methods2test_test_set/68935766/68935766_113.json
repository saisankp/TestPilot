{"test_class": {"identifier": "TreeWalkerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static Literal<String> mapped = Literal.<String>builder(\"child\").build();", "modifier": "static", "type": "Literal<String>", "declarator": "mapped = Literal.<String>builder(\"child\").build()", "var_name": "mapped"}, {"original_string": "TreeWalker<String, String> tree = spy(new TreeWalker(spy(new Mapper<>())));", "modifier": "", "type": "TreeWalker<String, String>", "declarator": "tree = spy(new TreeWalker(spy(new Mapper<>())))", "var_name": "tree"}, {"original_string": "RootCommandNode<String> root = new RootCommandNode<>();", "modifier": "", "type": "RootCommandNode<String>", "declarator": "root = new RootCommandNode<>()", "var_name": "root"}, {"original_string": "Literal<String> literal = Literal.<String>builder(\"parent\").then(Literal.<String>builder(\"child\").build()).build();", "modifier": "", "type": "Literal<String>", "declarator": "literal = Literal.<String>builder(\"parent\").then(Literal.<String>builder(\"child\").build()).build()", "var_name": "literal"}, {"original_string": "List<CommandNode<String>> commands = List.of(\n        Literal.<String>builder(\"a\").build(), \n        Literal.<String>builder(\"b\").build(), \n        Literal.<String>builder(\"c\").requires(val -> false).build()\n    );", "modifier": "", "type": "List<CommandNode<String>>", "declarator": "commands = List.of(\n        Literal.<String>builder(\"a\").build(), \n        Literal.<String>builder(\"b\").build(), \n        Literal.<String>builder(\"c\").requires(val -> false).build()\n    )", "var_name": "commands"}], "file": "commons/src/test/java/com/karuslabs/commons/command/tree/TreeWalkerTest.java"}, "test_case": {"identifier": "prune", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void prune() {\n        root.addChild(Literal.<String>builder(\"a\").then(Literal.<String>builder(\"child\").build()).build());\n        \n        tree.prune(root, commands);\n        \n        assertEquals(3, root.getChildren().size());\n        assertNull(root.getChild(\"a\").getChild(\"child\"));\n    }", "signature": "void prune()", "full_signature": "@Test void prune()", "class_method_signature": "TreeWalkerTest.prune()", "testcase": true, "constructor": false, "invocations": ["addChild", "build", "then", "builder", "build", "builder", "prune", "assertEquals", "size", "getChildren", "assertNull", "getChild", "getChild"]}, "focal_class": {"identifier": "TreeWalker", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Mapper<T, R> mapper;", "modifier": "private final", "type": "Mapper<T, R>", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "protected final Map<CommandNode<T>, CommandNode<R>> mappings;", "modifier": "protected final", "type": "Map<CommandNode<T>, CommandNode<R>>", "declarator": "mappings", "var_name": "mappings"}], "methods": [{"identifier": "TreeWalker", "parameters": "(Mapper<T, R> mapper)", "modifiers": "public", "return": "", "signature": " TreeWalker(Mapper<T, R> mapper)", "full_signature": "public  TreeWalker(Mapper<T, R> mapper)", "class_method_signature": "TreeWalker.TreeWalker(Mapper<T, R> mapper)", "testcase": false, "constructor": true}, {"identifier": "prune", "parameters": "(RootCommandNode<R> root, Collection<? extends CommandNode<T>> commands)", "modifiers": "public", "return": "void", "signature": "void prune(RootCommandNode<R> root, Collection<? extends CommandNode<T>> commands)", "full_signature": "public void prune(RootCommandNode<R> root, Collection<? extends CommandNode<T>> commands)", "class_method_signature": "TreeWalker.prune(RootCommandNode<R> root, Collection<? extends CommandNode<T>> commands)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(RootCommandNode<R> root, Collection<? extends CommandNode<T>> commands, T source, Predicate<CommandNode<T>> requirement)", "modifiers": "public", "return": "void", "signature": "void add(RootCommandNode<R> root, Collection<? extends CommandNode<T>> commands, T source, Predicate<CommandNode<T>> requirement)", "full_signature": "public void add(RootCommandNode<R> root, Collection<? extends CommandNode<T>> commands, T source, Predicate<CommandNode<T>> requirement)", "class_method_signature": "TreeWalker.add(RootCommandNode<R> root, Collection<? extends CommandNode<T>> commands, T source, Predicate<CommandNode<T>> requirement)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(CommandNode<T> command, @Nullable T source)", "modifiers": "protected @Nullable", "return": "CommandNode<R>", "signature": "CommandNode<R> map(CommandNode<T> command, @Nullable T source)", "full_signature": "protected @Nullable CommandNode<R> map(CommandNode<T> command, @Nullable T source)", "class_method_signature": "TreeWalker.map(CommandNode<T> command, @Nullable T source)", "testcase": false, "constructor": false}, {"identifier": "redirect", "parameters": "(@Nullable CommandNode<T> destination, CommandNode<R> result, @Nullable T source)", "modifiers": "protected", "return": "void", "signature": "void redirect(@Nullable CommandNode<T> destination, CommandNode<R> result, @Nullable T source)", "full_signature": "protected void redirect(@Nullable CommandNode<T> destination, CommandNode<R> result, @Nullable T source)", "class_method_signature": "TreeWalker.redirect(@Nullable CommandNode<T> destination, CommandNode<R> result, @Nullable T source)", "testcase": false, "constructor": false}, {"identifier": "descend", "parameters": "(Collection<CommandNode<T>> children, CommandNode<R> command, @Nullable T source)", "modifiers": "protected", "return": "void", "signature": "void descend(Collection<CommandNode<T>> children, CommandNode<R> command, @Nullable T source)", "full_signature": "protected void descend(Collection<CommandNode<T>> children, CommandNode<R> command, @Nullable T source)", "class_method_signature": "TreeWalker.descend(Collection<CommandNode<T>> children, CommandNode<R> command, @Nullable T source)", "testcase": false, "constructor": false}], "file": "commons/src/main/java/com/karuslabs/commons/command/tree/TreeWalker.java"}, "focal_method": {"identifier": "prune", "parameters": "(RootCommandNode<R> root, Collection<? extends CommandNode<T>> commands)", "modifiers": "public", "return": "void", "body": "public void prune(RootCommandNode<R> root, Collection<? extends CommandNode<T>> commands) {\n        for (var child : commands) {\n            Commands.remove(root, child.getName());\n            var result = map(child, null);\n            if (result != null) {\n                root.addChild(result);\n            }\n        }\n        \n        mappings.clear();\n    }", "signature": "void prune(RootCommandNode<R> root, Collection<? extends CommandNode<T>> commands)", "full_signature": "public void prune(RootCommandNode<R> root, Collection<? extends CommandNode<T>> commands)", "class_method_signature": "TreeWalker.prune(RootCommandNode<R> root, Collection<? extends CommandNode<T>> commands)", "testcase": false, "constructor": false, "invocations": ["remove", "getName", "map", "addChild", "clear"]}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}