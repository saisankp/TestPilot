{"test_class": {"identifier": "urn_perun_resource_attribute_def_def_unixGID_namespaceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private urn_perun_resource_attribute_def_def_unixGID_namespace classInstance;", "modifier": "private", "type": "urn_perun_resource_attribute_def_def_unixGID_namespace", "declarator": "classInstance", "var_name": "classInstance"}, {"original_string": "private Attribute attributeToCheck;", "modifier": "private", "type": "Attribute", "declarator": "attributeToCheck", "var_name": "attributeToCheck"}, {"original_string": "private Resource resource = new Resource();", "modifier": "private", "type": "Resource", "declarator": "resource = new Resource()", "var_name": "resource"}, {"original_string": "private Attribute reqAttribute;", "modifier": "private", "type": "Attribute", "declarator": "reqAttribute", "var_name": "reqAttribute"}, {"original_string": "private PerunSessionImpl sess;", "modifier": "private", "type": "PerunSessionImpl", "declarator": "sess", "var_name": "sess"}], "file": "perun-core/src/test/java/cz/metacentrum/perun/core/impl/modules/attributes/urn_perun_resource_attribute_def_def_unixGID_namespaceTest.java"}, "test_case": {"identifier": "testGroupWithSameGID", "parameters": "()", "modifiers": "@Test(expected = WrongReferenceAttributeValueException.class) public", "return": "void", "body": "@Test(expected = WrongReferenceAttributeValueException.class)\n\tpublic void testGroupWithSameGID() throws Exception {\n\t\tSystem.out.println(\"testGroupWithSameGID()\");\n\t\tattributeToCheck.setValue(5);\n\t\tGroup group = new Group();\n\t\twhen(sess.getPerunBl().getGroupsManagerBl().getGroupsByAttribute(sess, attributeToCheck)).thenReturn(Collections.singletonList(group));\n\t\twhen(sess.getPerunBl().getAttributesManagerBl().getAllAttributesStartWithNameWithoutNullValue(sess, resource, AttributesManager.NS_RESOURCE_ATTR_DEF + \":unixGroupName-namespace:\")).thenReturn(Collections.singletonList(attributeToCheck));\n\t\twhen(sess.getPerunBl().getModulesUtilsBl().haveTheSameAttributeWithTheSameNamespace(sess, group, attributeToCheck)).thenReturn(2);\n\n\t\tclassInstance.checkAttributeSemantics(sess, resource, attributeToCheck);\n\t}", "signature": "void testGroupWithSameGID()", "full_signature": "@Test(expected = WrongReferenceAttributeValueException.class) public void testGroupWithSameGID()", "class_method_signature": "urn_perun_resource_attribute_def_def_unixGID_namespaceTest.testGroupWithSameGID()", "testcase": true, "constructor": false, "invocations": ["println", "setValue", "thenReturn", "when", "getGroupsByAttribute", "getGroupsManagerBl", "getPerunBl", "singletonList", "thenReturn", "when", "getAllAttributesStartWithNameWithoutNullValue", "getAttributesManagerBl", "getPerunBl", "singletonList", "thenReturn", "when", "haveTheSameAttributeWithTheSameNamespace", "getModulesUtilsBl", "getPerunBl", "checkAttributeSemantics"]}, "focal_class": {"identifier": "urn_perun_resource_attribute_def_def_unixGID_namespace", "superclass": "extends ResourceAttributesModuleAbstract", "interfaces": "implements ResourceAttributesModuleImplApi", "fields": [{"original_string": "private final static Logger log = LoggerFactory.getLogger(urn_perun_resource_attribute_def_def_unixGID_namespace.class);", "modifier": "private final static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(urn_perun_resource_attribute_def_def_unixGID_namespace.class)", "var_name": "log"}, {"original_string": "private static final String A_G_unixGID_namespace = AttributesManager.NS_GROUP_ATTR_DEF + \":unixGID-namespace\";", "modifier": "private static final", "type": "String", "declarator": "A_G_unixGID_namespace = AttributesManager.NS_GROUP_ATTR_DEF + \":unixGID-namespace\"", "var_name": "A_G_unixGID_namespace"}, {"original_string": "private static final String A_R_unixGroupName_namespace = AttributesManager.NS_RESOURCE_ATTR_DEF + \":unixGroupName-namespace\";", "modifier": "private static final", "type": "String", "declarator": "A_R_unixGroupName_namespace = AttributesManager.NS_RESOURCE_ATTR_DEF + \":unixGroupName-namespace\"", "var_name": "A_R_unixGroupName_namespace"}, {"original_string": "private static final String A_G_unixGroupName_namespace = AttributesManager.NS_GROUP_ATTR_DEF + \":unixGroupName-namespace\";", "modifier": "private static final", "type": "String", "declarator": "A_G_unixGroupName_namespace = AttributesManager.NS_GROUP_ATTR_DEF + \":unixGroupName-namespace\"", "var_name": "A_G_unixGroupName_namespace"}, {"original_string": "private static final String A_E_usedGids = AttributesManager.NS_ENTITYLESS_ATTR_DEF + \":usedGids\";", "modifier": "private static final", "type": "String", "declarator": "A_E_usedGids = AttributesManager.NS_ENTITYLESS_ATTR_DEF + \":usedGids\"", "var_name": "A_E_usedGids"}], "methods": [{"identifier": "fillAttribute", "parameters": "(PerunSessionImpl sess, Resource resource, AttributeDefinition attributeDefinition)", "modifiers": "@Override public", "return": "Attribute", "signature": "Attribute fillAttribute(PerunSessionImpl sess, Resource resource, AttributeDefinition attributeDefinition)", "full_signature": "@Override public Attribute fillAttribute(PerunSessionImpl sess, Resource resource, AttributeDefinition attributeDefinition)", "class_method_signature": "urn_perun_resource_attribute_def_def_unixGID_namespace.fillAttribute(PerunSessionImpl sess, Resource resource, AttributeDefinition attributeDefinition)", "testcase": false, "constructor": false}, {"identifier": "checkAttributeSemantics", "parameters": "(PerunSessionImpl sess, Resource resource, Attribute attribute)", "modifiers": "@Override public", "return": "void", "signature": "void checkAttributeSemantics(PerunSessionImpl sess, Resource resource, Attribute attribute)", "full_signature": "@Override public void checkAttributeSemantics(PerunSessionImpl sess, Resource resource, Attribute attribute)", "class_method_signature": "urn_perun_resource_attribute_def_def_unixGID_namespace.checkAttributeSemantics(PerunSessionImpl sess, Resource resource, Attribute attribute)", "testcase": false, "constructor": false}, {"identifier": "changedAttributeHook", "parameters": "(PerunSessionImpl session, Resource resource, Attribute attribute)", "modifiers": "@Override public", "return": "void", "signature": "void changedAttributeHook(PerunSessionImpl session, Resource resource, Attribute attribute)", "full_signature": "@Override public void changedAttributeHook(PerunSessionImpl session, Resource resource, Attribute attribute)", "class_method_signature": "urn_perun_resource_attribute_def_def_unixGID_namespace.changedAttributeHook(PerunSessionImpl session, Resource resource, Attribute attribute)", "testcase": false, "constructor": false}, {"identifier": "getDependencies", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getDependencies()", "full_signature": "@Override public List<String> getDependencies()", "class_method_signature": "urn_perun_resource_attribute_def_def_unixGID_namespace.getDependencies()", "testcase": false, "constructor": false}], "file": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/attributes/urn_perun_resource_attribute_def_def_unixGID_namespace.java"}, "focal_method": {"identifier": "checkAttributeSemantics", "parameters": "(PerunSessionImpl sess, Resource resource, Attribute attribute)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void checkAttributeSemantics(PerunSessionImpl sess, Resource resource, Attribute attribute) throws WrongReferenceAttributeValueException, WrongAttributeAssignmentException{\n\t\ttry{\n\t\t\tString gidNamespace = attribute.getFriendlyNameParameter();\n\n\t\t\t//Special behaviour if gid is null\n\t\t\tInteger attrValue;\n\t\t\tif(attribute.getValue() == null) {\n\t\t\t\tthrow new WrongReferenceAttributeValueException(attribute, null, resource, null, \"Unix GID must be set\");\n\t\t\t} else {\n\t\t\t\tattrValue = attribute.valueAsInteger();\n\t\t\t}\n\n\t\t\t//Check if GID is within allowed range\n\t\t\ttry {\n\t\t\t\tsess.getPerunBl().getModulesUtilsBl().checkIfGIDIsWithinRange(sess, attribute);\n\t\t\t} catch (WrongAttributeValueException ex) {\n\t\t\t\tthrow new WrongReferenceAttributeValueException(ex);\n\t\t\t}\n\n\t\t\t//check if gid is not already depleted\n\t\t\tAttribute usedGids = sess.getPerunBl().getAttributesManagerBl().getAttribute(sess, gidNamespace, A_E_usedGids);\n\t\t\t//null in value means there is no depleted or used gids\n\t\t\tif(usedGids.getValue() != null) {\n\t\t\t\tMap<String, String> usedGidsValue = usedGids.valueAsMap();\n\t\t\t\t//Dx, where x is GID means depleted value for GID x\n\t\t\t\tif(usedGidsValue.containsKey(\"D\" + attrValue.toString())) {\n\t\t\t\t\tthrow new WrongReferenceAttributeValueException(attribute, usedGids, resource, null, gidNamespace, null, \"This GID is already depleted.\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//Prepare lists for all groups and resources with same GID in the same namespace\n\n\t\t\t//Prepare attributes for searching through groups and resources\n\t\t\tAttribute resourceGIDAttribute = attribute;\n\t\t\tAttribute groupGIDAttribute = new Attribute(sess.getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, A_G_unixGID_namespace + \":\" + gidNamespace));\n\t\t\tgroupGIDAttribute.setValue(resourceGIDAttribute.getValue());\n\n\t\t\t//Fill lists of Groups and Resources by data\n\t\t\tList<Group> allGroupsWithSameGIDInSameNamespace = new ArrayList<>(sess.getPerunBl().getGroupsManagerBl().getGroupsByAttribute(sess, groupGIDAttribute));\n\t\t\tList<Resource> allResourcesWithSameGIDInSameNamespace = new ArrayList<>(sess.getPerunBl().getResourcesManagerBl().getResourcesByAttribute(sess, resourceGIDAttribute));\n\t\t\t//remove this resource\n\t\t\tallResourcesWithSameGIDInSameNamespace.remove(resource);\n\n\t\t\t//Prepare list of GroupName attributes of this resource\n\t\t\tList <Attribute> groupNamesOfResource = sess.getPerunBl().getAttributesManagerBl().getAllAttributesStartWithNameWithoutNullValue(sess, resource, A_R_unixGroupName_namespace + \":\");\n\n\t\t\t//Searching through groups\n\t\t\tif(!allGroupsWithSameGIDInSameNamespace.isEmpty()) {\n\t\t\t\tfor(Group g: allGroupsWithSameGIDInSameNamespace) {\n\t\t\t\t\tfor(Attribute a: groupNamesOfResource) {\n\t\t\t\t\t\t//Prepare group version of this group attribute\n\t\t\t\t\t\tAttribute groupGroupName = new Attribute(sess.getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, A_G_unixGroupName_namespace + \":\" + a.getFriendlyNameParameter()));\n\t\t\t\t\t\tgroupGroupName.setValue(a.getValue());\n\n\t\t\t\t\t\tint compare = sess.getPerunBl().getModulesUtilsBl().haveTheSameAttributeWithTheSameNamespace(sess, g, groupGroupName);\n\n\t\t\t\t\t\tif(compare > 0) {\n\t\t\t\t\t\t\t//This is problem, there is the same attribute but have other value\n\t\t\t\t\t\t\tthrow new WrongReferenceAttributeValueException(attribute, a, \"There is a group with same GID (namespace: \"  + gidNamespace + \") and different unix group name (namespace: \" + a.getFriendlyNameParameter() + \"). \" + g + \" \" + resource);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//Other possibilities are not problem, less than 0 mean that same attribute not exists, and 0 mean that attribute exists but have same value\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//Searching through resources\n\t\t\tif(!allResourcesWithSameGIDInSameNamespace.isEmpty()) {\n\t\t\t\tfor(Resource r: allResourcesWithSameGIDInSameNamespace) {\n\t\t\t\t\tfor(Attribute a: groupNamesOfResource) {\n\n\n\t\t\t\t\t\tint compare = sess.getPerunBl().getModulesUtilsBl().haveTheSameAttributeWithTheSameNamespace(sess, r, a);\n\n\t\t\t\t\t\tif(compare > 0) {\n\t\t\t\t\t\t\t//This is problem, there is the same attribute but have other value\n\t\t\t\t\t\t\tthrow new WrongReferenceAttributeValueException(attribute, a, \"There is a resource with same GID (namespace: \"  + gidNamespace + \") and different unix group name (namespace: \" + a.getFriendlyNameParameter() + \"). \" + r + \" \" + resource);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//Other possibilities are not problem, less than 0 mean that same attribute not exists, and 0 mean that attribute exists but have same value\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t} catch(AttributeNotExistsException ex) {\n\t\t\tthrow new ConsistencyErrorException(ex);\n\t\t}\n\t}", "signature": "void checkAttributeSemantics(PerunSessionImpl sess, Resource resource, Attribute attribute)", "full_signature": "@Override public void checkAttributeSemantics(PerunSessionImpl sess, Resource resource, Attribute attribute)", "class_method_signature": "urn_perun_resource_attribute_def_def_unixGID_namespace.checkAttributeSemantics(PerunSessionImpl sess, Resource resource, Attribute attribute)", "testcase": false, "constructor": false, "invocations": ["getFriendlyNameParameter", "getValue", "valueAsInteger", "checkIfGIDIsWithinRange", "getModulesUtilsBl", "getPerunBl", "getAttribute", "getAttributesManagerBl", "getPerunBl", "getValue", "valueAsMap", "containsKey", "toString", "getAttributeDefinition", "getAttributesManagerBl", "getPerunBl", "setValue", "getValue", "getGroupsByAttribute", "getGroupsManagerBl", "getPerunBl", "getResourcesByAttribute", "getResourcesManagerBl", "getPerunBl", "remove", "getAllAttributesStartWithNameWithoutNullValue", "getAttributesManagerBl", "getPerunBl", "isEmpty", "getAttributeDefinition", "getAttributesManagerBl", "getPerunBl", "getFriendlyNameParameter", "setValue", "getValue", "haveTheSameAttributeWithTheSameNamespace", "getModulesUtilsBl", "getPerunBl", "getFriendlyNameParameter", "isEmpty", "haveTheSameAttributeWithTheSameNamespace", "getModulesUtilsBl", "getPerunBl", "getFriendlyNameParameter"]}, "repository": {"repo_id": 4085998, "url": "https://github.com/CESNET/perun", "stars": 38, "created": "4/20/2012 11:55:38 AM +00:00", "updates": "2020-01-27T09:51:13+00:00", "fork": "False", "license": "licensed"}}