{"test_class": {"identifier": "RaftActorServerConfigurationSupportTest", "superclass": "extends AbstractActorTest", "interfaces": "", "fields": [{"original_string": "static final String LEADER_ID = \"leader\";", "modifier": "static final", "type": "String", "declarator": "LEADER_ID = \"leader\"", "var_name": "LEADER_ID"}, {"original_string": "static final String FOLLOWER_ID = \"follower\";", "modifier": "static final", "type": "String", "declarator": "FOLLOWER_ID = \"follower\"", "var_name": "FOLLOWER_ID"}, {"original_string": "static final String FOLLOWER_ID2 = \"follower2\";", "modifier": "static final", "type": "String", "declarator": "FOLLOWER_ID2 = \"follower2\"", "var_name": "FOLLOWER_ID2"}, {"original_string": "static final String NEW_SERVER_ID = \"new-server\";", "modifier": "static final", "type": "String", "declarator": "NEW_SERVER_ID = \"new-server\"", "var_name": "NEW_SERVER_ID"}, {"original_string": "static final String NEW_SERVER_ID2 = \"new-server2\";", "modifier": "static final", "type": "String", "declarator": "NEW_SERVER_ID2 = \"new-server2\"", "var_name": "NEW_SERVER_ID2"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(RaftActorServerConfigurationSupportTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(RaftActorServerConfigurationSupportTest.class)", "var_name": "LOG"}, {"original_string": "private static final Class<?> COMMIT_MESSAGE_CLASS = RaftActorSnapshotMessageSupport.COMMIT_SNAPSHOT.getClass();", "modifier": "private static final", "type": "Class<?>", "declarator": "COMMIT_MESSAGE_CLASS = RaftActorSnapshotMessageSupport.COMMIT_SNAPSHOT.getClass()", "var_name": "COMMIT_MESSAGE_CLASS"}, {"original_string": "private static final boolean NO_PERSISTENCE = false;", "modifier": "private static final", "type": "boolean", "declarator": "NO_PERSISTENCE = false", "var_name": "NO_PERSISTENCE"}, {"original_string": "private static final boolean PERSISTENT = true;", "modifier": "private static final", "type": "boolean", "declarator": "PERSISTENT = true", "var_name": "PERSISTENT"}, {"original_string": "private final TestActorFactory actorFactory = new TestActorFactory(getSystem());", "modifier": "private final", "type": "TestActorFactory", "declarator": "actorFactory = new TestActorFactory(getSystem())", "var_name": "actorFactory"}, {"original_string": "private final TestActorRef<ForwardMessageToBehaviorActor> followerActor = actorFactory.createTestActor(\n            Props.create(ForwardMessageToBehaviorActor.class).withDispatcher(Dispatchers.DefaultDispatcherId()),\n            actorFactory.generateActorId(FOLLOWER_ID));", "modifier": "private final", "type": "TestActorRef<ForwardMessageToBehaviorActor>", "declarator": "followerActor = actorFactory.createTestActor(\n            Props.create(ForwardMessageToBehaviorActor.class).withDispatcher(Dispatchers.DefaultDispatcherId()),\n            actorFactory.generateActorId(FOLLOWER_ID))", "var_name": "followerActor"}, {"original_string": "private TestActorRef<MockNewFollowerRaftActor> newFollowerRaftActor;", "modifier": "private", "type": "TestActorRef<MockNewFollowerRaftActor>", "declarator": "newFollowerRaftActor", "var_name": "newFollowerRaftActor"}, {"original_string": "private ActorRef newFollowerCollectorActor;", "modifier": "private", "type": "ActorRef", "declarator": "newFollowerCollectorActor", "var_name": "newFollowerCollectorActor"}, {"original_string": "private RaftActorContext newFollowerActorContext;", "modifier": "private", "type": "RaftActorContext", "declarator": "newFollowerActorContext", "var_name": "newFollowerActorContext"}, {"original_string": "private final TestKit testKit = new TestKit(getSystem());", "modifier": "private final", "type": "TestKit", "declarator": "testKit = new TestKit(getSystem())", "var_name": "testKit"}], "file": "opendaylight/md-sal/sal-akka-raft/src/test/java/org/opendaylight/controller/cluster/raft/RaftActorServerConfigurationSupportTest.java"}, "test_case": {"identifier": "testOnApplyState", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOnApplyState() {\n        LOG.info(\"testOnApplyState starting\");\n\n        DefaultConfigParamsImpl configParams = new DefaultConfigParamsImpl();\n        configParams.setHeartBeatInterval(new FiniteDuration(1, TimeUnit.DAYS));\n        TestActorRef<MockRaftActor> noLeaderActor = actorFactory.createTestActor(\n                MockRaftActor.builder().id(LEADER_ID).peerAddresses(ImmutableMap.of(FOLLOWER_ID,\n                        followerActor.path().toString())).config(configParams).persistent(Optional.of(false))\n                        .props().withDispatcher(Dispatchers.DefaultDispatcherId()),\n                actorFactory.generateActorId(LEADER_ID));\n\n        RaftActorServerConfigurationSupport support = new RaftActorServerConfigurationSupport(\n                noLeaderActor.underlyingActor());\n\n        ReplicatedLogEntry serverConfigEntry = new SimpleReplicatedLogEntry(1, 1,\n                new ServerConfigurationPayload(Collections.<ServerInfo>emptyList()));\n        boolean handled = support.handleMessage(new ApplyState(null, null, serverConfigEntry), ActorRef.noSender());\n        assertEquals(\"Message handled\", true, handled);\n\n        ReplicatedLogEntry nonServerConfigEntry = new SimpleReplicatedLogEntry(1, 1,\n                new MockRaftActorContext.MockPayload(\"1\"));\n        handled = support.handleMessage(new ApplyState(null, null, nonServerConfigEntry), ActorRef.noSender());\n        assertEquals(\"Message handled\", false, handled);\n\n        LOG.info(\"testOnApplyState ending\");\n    }", "signature": "void testOnApplyState()", "full_signature": "@Test public void testOnApplyState()", "class_method_signature": "RaftActorServerConfigurationSupportTest.testOnApplyState()", "testcase": true, "constructor": false, "invocations": ["info", "setHeartBeatInterval", "createTestActor", "withDispatcher", "props", "persistent", "config", "peerAddresses", "id", "builder", "of", "toString", "path", "of", "DefaultDispatcherId", "generateActorId", "underlyingActor", "emptyList", "handleMessage", "noSender", "assertEquals", "handleMessage", "noSender", "assertEquals", "info"]}, "focal_class": {"identifier": "RaftActorServerConfigurationSupport", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(RaftActorServerConfigurationSupport.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(RaftActorServerConfigurationSupport.class)", "var_name": "LOG"}, {"original_string": "@SuppressWarnings(\"checkstyle:MemberName\")\n    private final OperationState IDLE = new Idle();", "modifier": "@SuppressWarnings(\"checkstyle:MemberName\")\n    private final", "type": "OperationState", "declarator": "IDLE = new Idle()", "var_name": "IDLE"}, {"original_string": "private final RaftActor raftActor;", "modifier": "private final", "type": "RaftActor", "declarator": "raftActor", "var_name": "raftActor"}, {"original_string": "private final RaftActorContext raftContext;", "modifier": "private final", "type": "RaftActorContext", "declarator": "raftContext", "var_name": "raftContext"}, {"original_string": "private final Queue<ServerOperationContext<?>> pendingOperationsQueue = new ArrayDeque<>();", "modifier": "private final", "type": "Queue<ServerOperationContext<?>>", "declarator": "pendingOperationsQueue = new ArrayDeque<>()", "var_name": "pendingOperationsQueue"}, {"original_string": "private OperationState currentOperationState = IDLE;", "modifier": "private", "type": "OperationState", "declarator": "currentOperationState = IDLE", "var_name": "currentOperationState"}], "methods": [{"identifier": "RaftActorServerConfigurationSupport", "parameters": "(final RaftActor raftActor)", "modifiers": "", "return": "", "signature": " RaftActorServerConfigurationSupport(final RaftActor raftActor)", "full_signature": "  RaftActorServerConfigurationSupport(final RaftActor raftActor)", "class_method_signature": "RaftActorServerConfigurationSupport.RaftActorServerConfigurationSupport(final RaftActor raftActor)", "testcase": false, "constructor": true}, {"identifier": "handleMessage", "parameters": "(final Object message, final ActorRef sender)", "modifiers": "", "return": "boolean", "signature": "boolean handleMessage(final Object message, final ActorRef sender)", "full_signature": " boolean handleMessage(final Object message, final ActorRef sender)", "class_method_signature": "RaftActorServerConfigurationSupport.handleMessage(final Object message, final ActorRef sender)", "testcase": false, "constructor": false}, {"identifier": "onNewLeader", "parameters": "(final String leaderId)", "modifiers": "", "return": "void", "signature": "void onNewLeader(final String leaderId)", "full_signature": " void onNewLeader(final String leaderId)", "class_method_signature": "RaftActorServerConfigurationSupport.onNewLeader(final String leaderId)", "testcase": false, "constructor": false}, {"identifier": "onChangeServersVotingStatus", "parameters": "(final ChangeServersVotingStatus message, final ActorRef sender)", "modifiers": "private", "return": "void", "signature": "void onChangeServersVotingStatus(final ChangeServersVotingStatus message, final ActorRef sender)", "full_signature": "private void onChangeServersVotingStatus(final ChangeServersVotingStatus message, final ActorRef sender)", "class_method_signature": "RaftActorServerConfigurationSupport.onChangeServersVotingStatus(final ChangeServersVotingStatus message, final ActorRef sender)", "testcase": false, "constructor": false}, {"identifier": "onRemoveServer", "parameters": "(final RemoveServer removeServer, final ActorRef sender)", "modifiers": "private", "return": "void", "signature": "void onRemoveServer(final RemoveServer removeServer, final ActorRef sender)", "full_signature": "private void onRemoveServer(final RemoveServer removeServer, final ActorRef sender)", "class_method_signature": "RaftActorServerConfigurationSupport.onRemoveServer(final RemoveServer removeServer, final ActorRef sender)", "testcase": false, "constructor": false}, {"identifier": "onApplyState", "parameters": "(final ApplyState applyState)", "modifiers": "private", "return": "boolean", "signature": "boolean onApplyState(final ApplyState applyState)", "full_signature": "private boolean onApplyState(final ApplyState applyState)", "class_method_signature": "RaftActorServerConfigurationSupport.onApplyState(final ApplyState applyState)", "testcase": false, "constructor": false}, {"identifier": "onAddServer", "parameters": "(final AddServer addServer, final ActorRef sender)", "modifiers": "private", "return": "void", "signature": "void onAddServer(final AddServer addServer, final ActorRef sender)", "full_signature": "private void onAddServer(final AddServer addServer, final ActorRef sender)", "class_method_signature": "RaftActorServerConfigurationSupport.onAddServer(final AddServer addServer, final ActorRef sender)", "testcase": false, "constructor": false}, {"identifier": "onNewOperation", "parameters": "(final ServerOperationContext<?> operationContext)", "modifiers": "private", "return": "void", "signature": "void onNewOperation(final ServerOperationContext<?> operationContext)", "full_signature": "private void onNewOperation(final ServerOperationContext<?> operationContext)", "class_method_signature": "RaftActorServerConfigurationSupport.onNewOperation(final ServerOperationContext<?> operationContext)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-akka-raft/src/main/java/org/opendaylight/controller/cluster/raft/RaftActorServerConfigurationSupport.java"}, "focal_method": {"identifier": "onApplyState", "parameters": "(final ApplyState applyState)", "modifiers": "private", "return": "boolean", "body": "private boolean onApplyState(final ApplyState applyState) {\n        Payload data = applyState.getReplicatedLogEntry().getData();\n        if (data instanceof ServerConfigurationPayload) {\n            currentOperationState.onApplyState(applyState);\n            return true;\n        }\n\n        return false;\n    }", "signature": "boolean onApplyState(final ApplyState applyState)", "full_signature": "private boolean onApplyState(final ApplyState applyState)", "class_method_signature": "RaftActorServerConfigurationSupport.onApplyState(final ApplyState applyState)", "testcase": false, "constructor": false, "invocations": ["getData", "getReplicatedLogEntry", "onApplyState"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}