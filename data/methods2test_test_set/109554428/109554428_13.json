{"test_class": {"identifier": "DBAuthenticatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DBAuthenticatorTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DBAuthenticatorTest.class)", "var_name": "LOG"}, {"original_string": "public static final String ORG_H2_DRIVER = \"org.h2.Driver\";", "modifier": "public static final", "type": "String", "declarator": "ORG_H2_DRIVER = \"org.h2.Driver\"", "var_name": "ORG_H2_DRIVER"}, {"original_string": "public static final String JDBC_H2_MEM_TEST = \"jdbc:h2:mem:test\";", "modifier": "public static final", "type": "String", "declarator": "JDBC_H2_MEM_TEST = \"jdbc:h2:mem:test\"", "var_name": "JDBC_H2_MEM_TEST"}, {"original_string": "public static final String SHA_256 = \"SHA-256\";", "modifier": "public static final", "type": "String", "declarator": "SHA_256 = \"SHA-256\"", "var_name": "SHA_256"}, {"original_string": "private Connection connection;", "modifier": "private", "type": "Connection", "declarator": "connection", "var_name": "connection"}], "file": "broker/src/test/java/io/moquette/spi/impl/security/DBAuthenticatorTest.java"}, "test_case": {"identifier": "Db_verifyInvalidLogin", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void Db_verifyInvalidLogin() {\n        final DBAuthenticator dbAuthenticator = new DBAuthenticator(\n                ORG_H2_DRIVER,\n                JDBC_H2_MEM_TEST,\n                \"SELECT PASSWORD FROM ACCOUNT WHERE LOGIN=?\",\n                SHA_256);\n        assertFalse(dbAuthenticator.checkValid(null, \"dbuser2\", \"password\".getBytes()));\n    }", "signature": "void Db_verifyInvalidLogin()", "full_signature": "@Test public void Db_verifyInvalidLogin()", "class_method_signature": "DBAuthenticatorTest.Db_verifyInvalidLogin()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "checkValid", "getBytes"]}, "focal_class": {"identifier": "DBAuthenticator", "superclass": "", "interfaces": "implements IAuthenticator", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DBAuthenticator.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DBAuthenticator.class)", "var_name": "LOG"}, {"original_string": "private final MessageDigest messageDigest;", "modifier": "private final", "type": "MessageDigest", "declarator": "messageDigest", "var_name": "messageDigest"}, {"original_string": "private HikariDataSource dataSource;", "modifier": "private", "type": "HikariDataSource", "declarator": "dataSource", "var_name": "dataSource"}, {"original_string": "private String sqlQuery;", "modifier": "private", "type": "String", "declarator": "sqlQuery", "var_name": "sqlQuery"}], "methods": [{"identifier": "DBAuthenticator", "parameters": "(IConfig conf)", "modifiers": "public", "return": "", "signature": " DBAuthenticator(IConfig conf)", "full_signature": "public  DBAuthenticator(IConfig conf)", "class_method_signature": "DBAuthenticator.DBAuthenticator(IConfig conf)", "testcase": false, "constructor": true}, {"identifier": "DBAuthenticator", "parameters": "(String driver, String jdbcUrl, String sqlQuery, String digestMethod)", "modifiers": "public", "return": "", "signature": " DBAuthenticator(String driver, String jdbcUrl, String sqlQuery, String digestMethod)", "full_signature": "public  DBAuthenticator(String driver, String jdbcUrl, String sqlQuery, String digestMethod)", "class_method_signature": "DBAuthenticator.DBAuthenticator(String driver, String jdbcUrl, String sqlQuery, String digestMethod)", "testcase": false, "constructor": true}, {"identifier": "checkValid", "parameters": "(String clientId, String username, byte[] password)", "modifiers": "@Override public synchronized", "return": "boolean", "signature": "boolean checkValid(String clientId, String username, byte[] password)", "full_signature": "@Override public synchronized boolean checkValid(String clientId, String username, byte[] password)", "class_method_signature": "DBAuthenticator.checkValid(String clientId, String username, byte[] password)", "testcase": false, "constructor": false}], "file": "broker/src/main/java/io/moquette/spi/impl/security/DBAuthenticator.java"}, "focal_method": {"identifier": "checkValid", "parameters": "(String clientId, String username, byte[] password)", "modifiers": "@Override public synchronized", "return": "boolean", "body": "@Override\n    public synchronized boolean checkValid(String clientId, String username, byte[] password) {\n        // Check Username / Password in DB using sqlQuery\n        if (username == null || password == null) {\n            LOG.info(\"username or password was null\");\n            return false;\n        }\n\n        ResultSet resultSet = null;\n        PreparedStatement preparedStatement = null;\n        Connection conn = null;\n        try {\n            conn = this.dataSource.getConnection();\n\n            preparedStatement = conn.prepareStatement(this.sqlQuery);\n            preparedStatement.setString(1, username);\n            resultSet = preparedStatement.executeQuery();\n            if (resultSet.next()) {\n                final String foundPwq = resultSet.getString(1);\n                messageDigest.update(password);\n                byte[] digest = messageDigest.digest();\n                String encodedPasswd = new String(Hex.encodeHex(digest));\n                return foundPwq.equals(encodedPasswd);\n            }\n        } catch (SQLException sqlex) {\n            LOG.error(\"Error quering DB for username: {}\", username, sqlex);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n                if (conn != null) {\n                    conn.close();\n                }\n            } catch (SQLException e) {\n                LOG.error(\"Error releasing connection to the datasource\", username, e);\n            }\n        }\n        return false;\n    }", "signature": "boolean checkValid(String clientId, String username, byte[] password)", "full_signature": "@Override public synchronized boolean checkValid(String clientId, String username, byte[] password)", "class_method_signature": "DBAuthenticator.checkValid(String clientId, String username, byte[] password)", "testcase": false, "constructor": false, "invocations": ["info", "getConnection", "prepareStatement", "setString", "executeQuery", "next", "getString", "update", "digest", "encodeHex", "equals", "error", "close", "close", "close", "error"]}, "repository": {"repo_id": 109554428, "url": "https://github.com/historicvally/springboot-mqtt", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 91, "size": 318, "license": "licensed"}}