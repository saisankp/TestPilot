{"test_class": {"identifier": "HtmlSerializerTest", "superclass": "extends AbstractSchemaTestUtils", "interfaces": "", "fields": [{"original_string": "private final static Logger logger = LoggerFactory.getLogger(HtmlSchemaParserTest.class);", "modifier": "private final static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(HtmlSchemaParserTest.class)", "var_name": "logger"}, {"original_string": "@Autowired\n    private HtmlSchemaParser htmlSchemaGuesser;", "modifier": "@Autowired\n    private", "type": "HtmlSchemaParser", "declarator": "htmlSchemaGuesser", "var_name": "htmlSchemaGuesser"}, {"original_string": "@Autowired\n    private HtmlSerializer htmlSerializer;", "modifier": "@Autowired\n    private", "type": "HtmlSerializer", "declarator": "htmlSerializer", "var_name": "htmlSerializer"}, {"original_string": "@Autowired\n    private HtmlFormatFamily htmlFormatFamily;", "modifier": "@Autowired\n    private", "type": "HtmlFormatFamily", "declarator": "htmlFormatFamily", "var_name": "htmlFormatFamily"}, {"original_string": "@Autowired\n    private UnsupportedFormatFamily unsupportedFormatFamily;", "modifier": "@Autowired\n    private", "type": "UnsupportedFormatFamily", "declarator": "unsupportedFormatFamily", "var_name": "unsupportedFormatFamily"}], "file": "dataprep-backend-service/src/test/java/org/talend/dataprep/schema/html/HtmlSerializerTest.java"}, "test_case": {"identifier": "html_serializer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void html_serializer() throws Exception {\n\n        final SchemaParser.Request request;\n        final Schema result;\n        try (InputStream inputStream = this.getClass().getResourceAsStream(\"sales-force.xls\")) {\n            // We do know the format and therefore we go directly to the HTML schema guessing\n            request = getRequest(inputStream, \"#2\");\n            request.getMetadata().setEncoding(\"UTF-16\");\n\n            result = htmlSchemaGuesser.parse(request);\n        }\n\n        try (InputStream inputStream = this.getClass().getResourceAsStream(\"sales-force.xls\")) {\n\n            request.getMetadata().getRowMetadata().setColumns(result.getSheetContents().get(0).getColumnMetadatas());\n\n            InputStream jsonStream = htmlSerializer.serialize(inputStream, request.getMetadata(), -1);\n\n            String json = IOUtils.toString(jsonStream, UTF_8);\n\n            logger.debug(\"json: {}\", json);\n\n            ObjectMapper mapper = new ObjectMapper();\n\n            CollectionType collectionType =\n                    mapper.getTypeFactory().constructCollectionType(ArrayList.class, TreeMap.class);\n\n            List<Map<String, String>> values = mapper.readValue(json, collectionType);\n\n            logger.debug(\"values: {}\", values);\n\n            Map<String, String> row0 = values.get(0);\n\n            Assertions.assertThat(row0).contains(MapEntry.entry(\"0000\", \"000001\"), //\n                    MapEntry.entry(\"0001\", \"aaa\"), //\n                    MapEntry.entry(\"0002\", \"France\"), //\n                    MapEntry.entry(\"0003\", \"x@talend.com\"));\n        }\n    }", "signature": "void html_serializer()", "full_signature": "@Test public void html_serializer()", "class_method_signature": "HtmlSerializerTest.html_serializer()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "getClass", "getRequest", "setEncoding", "getMetadata", "parse", "getResourceAsStream", "getClass", "setColumns", "getRowMetadata", "getMetadata", "getColumnMetadatas", "get", "getSheetContents", "serialize", "getMetadata", "toString", "debug", "constructCollectionType", "getTypeFactory", "readValue", "debug", "get", "contains", "assertThat", "entry", "entry", "entry", "entry"]}, "focal_class": {"identifier": "HtmlSerializer", "superclass": "", "interfaces": "implements Serializer", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(HtmlSerializer.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(HtmlSerializer.class)", "var_name": "LOGGER"}, {"original_string": "@Resource(name = \"serializer#html#executor\")\n    private TaskExecutor executor;", "modifier": "@Resource(name = \"serializer#html#executor\")\n    private", "type": "TaskExecutor", "declarator": "executor", "var_name": "executor"}], "methods": [{"identifier": "serialize", "parameters": "(InputStream rawContent, DataSetMetadata metadata, long limit)", "modifiers": "@Override public", "return": "InputStream", "signature": "InputStream serialize(InputStream rawContent, DataSetMetadata metadata, long limit)", "full_signature": "@Override public InputStream serialize(InputStream rawContent, DataSetMetadata metadata, long limit)", "class_method_signature": "HtmlSerializer.serialize(InputStream rawContent, DataSetMetadata metadata, long limit)", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(InputStream rawContent, DataSetMetadata dataSetMetadata, OutputStream jsonOutput,\n            long limit)", "modifiers": "private", "return": "void", "signature": "void deserialize(InputStream rawContent, DataSetMetadata dataSetMetadata, OutputStream jsonOutput,\n            long limit)", "full_signature": "private void deserialize(InputStream rawContent, DataSetMetadata dataSetMetadata, OutputStream jsonOutput,\n            long limit)", "class_method_signature": "HtmlSerializer.deserialize(InputStream rawContent, DataSetMetadata dataSetMetadata, OutputStream jsonOutput,\n            long limit)", "testcase": false, "constructor": false}], "file": "dataprep-backend-service/src/main/java/org/talend/dataprep/schema/html/HtmlSerializer.java"}, "focal_method": {"identifier": "serialize", "parameters": "(InputStream rawContent, DataSetMetadata metadata, long limit)", "modifiers": "@Override public", "return": "InputStream", "body": "@Override\n    public InputStream serialize(InputStream rawContent, DataSetMetadata metadata, long limit) {\n        try {\n            PipedInputStream pipe = new PipedInputStream();\n            PipedOutputStream jsonOutput = new PipedOutputStream(pipe);\n\n            Runnable r = () -> deserialize(rawContent, metadata, jsonOutput, limit);\n            executor.execute(r);\n            return pipe;\n        } catch (IOException e) {\n            throw new TDPException(CommonErrorCodes.UNABLE_TO_SERIALIZE_TO_JSON, e);\n        }\n    }", "signature": "InputStream serialize(InputStream rawContent, DataSetMetadata metadata, long limit)", "full_signature": "@Override public InputStream serialize(InputStream rawContent, DataSetMetadata metadata, long limit)", "class_method_signature": "HtmlSerializer.serialize(InputStream rawContent, DataSetMetadata metadata, long limit)", "testcase": false, "constructor": false, "invocations": ["deserialize", "execute"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}