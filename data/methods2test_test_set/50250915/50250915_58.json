{"test_class": {"identifier": "BlueI18nTest", "superclass": "", "interfaces": "", "fields": [], "file": "blueocean-i18n/src/test/java/io/jenkins/blueocean/i18n/BlueI18nTest.java"}, "test_case": {"identifier": "test_getBundleParameters_isReleaseVersion", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_getBundleParameters_isReleaseVersion() {\n        BlueI18n.BundleParams bundleParameters;\n\n        bundleParameters = BlueI18n.getBundleParameters(\"/blue/rest/i18n/pluginx/1.0/pluginx.bundle\");\n        Assert.assertTrue(bundleParameters.isReleaseVersion());\n        bundleParameters = BlueI18n.getBundleParameters(\"pluginx/1.0.0/pluginx.bundle\");\n        Assert.assertTrue(bundleParameters.isReleaseVersion());\n        bundleParameters = BlueI18n.getBundleParameters(\"pluginx/1.0-SNAPSHOT/pluginx.bundle\");\n        Assert.assertFalse(bundleParameters.isReleaseVersion());\n        bundleParameters = BlueI18n.getBundleParameters(\"pluginx/1.0.0-SNAPSHOT/pluginx.bundle\"); //\n        Assert.assertFalse(bundleParameters.isReleaseVersion());\n        bundleParameters = BlueI18n.getBundleParameters(\"pluginx/1/pluginx.bundle\"); // must be at least 3 chars long\n        Assert.assertFalse(bundleParameters.isReleaseVersion());\n    }", "signature": "void test_getBundleParameters_isReleaseVersion()", "full_signature": "@Test public void test_getBundleParameters_isReleaseVersion()", "class_method_signature": "BlueI18nTest.test_getBundleParameters_isReleaseVersion()", "testcase": true, "constructor": false, "invocations": ["getBundleParameters", "assertTrue", "isReleaseVersion", "getBundleParameters", "assertTrue", "isReleaseVersion", "getBundleParameters", "assertFalse", "isReleaseVersion", "getBundleParameters", "assertFalse", "isReleaseVersion", "getBundleParameters", "assertFalse", "isReleaseVersion"]}, "focal_class": {"identifier": "BlueI18n", "superclass": "", "interfaces": "implements ApiRoutable", "fields": [{"original_string": "private static final Logger LOGGER = Logger.getLogger(BlueI18n.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(BlueI18n.class.getName())", "var_name": "LOGGER"}, {"original_string": "private static final JSONObject BUNDLE_404 = new JSONObject();", "modifier": "private static final", "type": "JSONObject", "declarator": "BUNDLE_404 = new JSONObject()", "var_name": "BUNDLE_404"}, {"original_string": "private Map<BundleParams, BundleCacheEntry> bundleCache = new ConcurrentHashMap<>();", "modifier": "private", "type": "Map<BundleParams, BundleCacheEntry>", "declarator": "bundleCache = new ConcurrentHashMap<>()", "var_name": "bundleCache"}], "methods": [{"identifier": "getUrlName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getUrlName()", "full_signature": "@Override public String getUrlName()", "class_method_signature": "BlueI18n.getUrlName()", "testcase": false, "constructor": false}, {"identifier": "doDynamic", "parameters": "(StaplerRequest request)", "modifiers": "public", "return": "HttpResponse", "signature": "HttpResponse doDynamic(StaplerRequest request)", "full_signature": "public HttpResponse doDynamic(StaplerRequest request)", "class_method_signature": "BlueI18n.doDynamic(StaplerRequest request)", "testcase": false, "constructor": false}, {"identifier": "getBundle", "parameters": "(BundleParams bundleParams, Locale locale)", "modifiers": "@CheckForNull private", "return": "JSONObject", "signature": "JSONObject getBundle(BundleParams bundleParams, Locale locale)", "full_signature": "@CheckForNull private JSONObject getBundle(BundleParams bundleParams, Locale locale)", "class_method_signature": "BlueI18n.getBundle(BundleParams bundleParams, Locale locale)", "testcase": false, "constructor": false}, {"identifier": "getBundleParameters", "parameters": "(String restOfPath)", "modifiers": "@CheckForNull static", "return": "BundleParams", "signature": "BundleParams getBundleParameters(String restOfPath)", "full_signature": "@CheckForNull static BundleParams getBundleParameters(String restOfPath)", "class_method_signature": "BlueI18n.getBundleParameters(String restOfPath)", "testcase": false, "constructor": false}, {"identifier": "getPlugin", "parameters": "(String pluginName)", "modifiers": "@CheckForNull static", "return": "PluginWrapper", "signature": "PluginWrapper getPlugin(String pluginName)", "full_signature": "@CheckForNull static PluginWrapper getPlugin(String pluginName)", "class_method_signature": "BlueI18n.getPlugin(String pluginName)", "testcase": false, "constructor": false}, {"identifier": "urlDecode", "parameters": "(@Nonnull String pathToken)", "modifiers": "private static @Nonnull", "return": "String", "signature": "String urlDecode(@Nonnull String pathToken)", "full_signature": "private static @Nonnull String urlDecode(@Nonnull String pathToken)", "class_method_signature": "BlueI18n.urlDecode(@Nonnull String pathToken)", "testcase": false, "constructor": false}], "file": "blueocean-i18n/src/main/java/io/jenkins/blueocean/i18n/BlueI18n.java"}, "focal_method": {"identifier": "getBundleParameters", "parameters": "(String restOfPath)", "modifiers": "@CheckForNull static", "return": "BundleParams", "body": "@CheckForNull\n    static BundleParams getBundleParameters(String restOfPath) {\n        if (restOfPath == null || restOfPath.length() == 0) {\n            return null;\n        }\n\n        String[] pathTokens = restOfPath.split(\"/\");\n        List<String> bundleParameters = new ArrayList<>();\n\n        for (String pathToken : pathTokens) {\n            if (pathToken.length() > 0) {\n                bundleParameters.add(urlDecode(pathToken));\n            }\n        }\n\n        // Path should be prefixed with /blue/rest/i18n.\n        // Let's remove those.\n        if (bundleParameters.get(0).equals(\"blue\")) {\n            bundleParameters.remove(0);\n        }\n        if (bundleParameters.get(0).equals(\"rest\")) {\n            bundleParameters.remove(0);\n        }\n        if (bundleParameters.get(0).equals(\"i18n\")) {\n            bundleParameters.remove(0);\n        }\n\n        if (bundleParameters.size() != 3 && bundleParameters.size() != 4) {\n            return null;\n        }\n\n        BundleParams bundleParams = new BundleParams(\n            bundleParameters.get(0),\n            bundleParameters.get(1),\n            bundleParameters.get(2)\n        );\n        if (bundleParameters.size() == 4) {\n            // https://www.w3.org/International/questions/qa-lang-priorities\n            // in case we have regions/countries in the language query parameter\n            String locale = bundleParameters.get(3);\n            String[] localeTokens = locale.split(\"-|_\");\n            bundleParams.language = localeTokens[0];\n            if (localeTokens.length > 1) {\n                bundleParams.country = localeTokens[1];\n                if (localeTokens.length > 2) {\n                    bundleParams.variant = localeTokens[2];\n                }\n            }\n        }\n\n        return bundleParams;\n    }", "signature": "BundleParams getBundleParameters(String restOfPath)", "full_signature": "@CheckForNull static BundleParams getBundleParameters(String restOfPath)", "class_method_signature": "BlueI18n.getBundleParameters(String restOfPath)", "testcase": false, "constructor": false, "invocations": ["length", "split", "length", "add", "urlDecode", "equals", "get", "remove", "equals", "get", "remove", "equals", "get", "remove", "size", "size", "get", "get", "get", "size", "get", "split"]}, "repository": {"repo_id": 50250915, "url": "https://github.com/jenkinsci/blueocean-plugin", "stars": 2605, "created": "1/23/2016 6:02:45 PM +00:00", "updates": "2020-01-25T17:58:46+00:00", "fork": "False", "license": "licensed"}}