{"test_class": {"identifier": "JobVertexCheckpointsHandlerTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-runtime-web/src/test/java/org/apache/flink/runtime/webmonitor/handlers/JobVertexCheckpointsHandlerTest.java"}, "test_case": {"identifier": "testNoStats", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testNoStats() throws Exception {\n\t\tJobVertexCheckpointsHandler handler = new JobVertexCheckpointsHandler(\n\t\t\t\tmock(ExecutionGraphHolder.class));\n\n\t\tExecutionGraph graph = mock(ExecutionGraph.class);\n\t\tExecutionJobVertex vertex = mock(ExecutionJobVertex.class);\n\t\tCheckpointStatsTracker tracker = mock(CheckpointStatsTracker.class);\n\n\t\twhen(vertex.getGraph()).thenReturn(graph);\n\t\twhen(graph.getCheckpointStatsTracker()).thenReturn(tracker);\n\n\t\t// No stats\n\t\twhen(tracker.getOperatorStats(any(JobVertexID.class)))\n\t\t\t\t.thenReturn(Option.<OperatorCheckpointStats>empty());\n\n\t\tString response = handler.handleRequest(vertex, Collections.<String, String>emptyMap());\n\n\t\t// Expecting empty response\n\t\tassertEquals(\"{}\", response);\n\t}", "signature": "void testNoStats()", "full_signature": "@Test public void testNoStats()", "class_method_signature": "JobVertexCheckpointsHandlerTest.testNoStats()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "mock", "thenReturn", "when", "getGraph", "thenReturn", "when", "getCheckpointStatsTracker", "thenReturn", "when", "getOperatorStats", "any", "empty", "handleRequest", "emptyMap", "assertEquals"]}, "focal_class": {"identifier": "JobVertexCheckpointsHandler", "superclass": "extends AbstractJobVertexRequestHandler", "interfaces": "", "fields": [], "methods": [{"identifier": "JobVertexCheckpointsHandler", "parameters": "(ExecutionGraphHolder executionGraphHolder)", "modifiers": "public", "return": "", "signature": " JobVertexCheckpointsHandler(ExecutionGraphHolder executionGraphHolder)", "full_signature": "public  JobVertexCheckpointsHandler(ExecutionGraphHolder executionGraphHolder)", "class_method_signature": "JobVertexCheckpointsHandler.JobVertexCheckpointsHandler(ExecutionGraphHolder executionGraphHolder)", "testcase": false, "constructor": true}, {"identifier": "handleRequest", "parameters": "(ExecutionJobVertex jobVertex, Map<String, String> params)", "modifiers": "@Override public", "return": "String", "signature": "String handleRequest(ExecutionJobVertex jobVertex, Map<String, String> params)", "full_signature": "@Override public String handleRequest(ExecutionJobVertex jobVertex, Map<String, String> params)", "class_method_signature": "JobVertexCheckpointsHandler.handleRequest(ExecutionJobVertex jobVertex, Map<String, String> params)", "testcase": false, "constructor": false}], "file": "flink-runtime-web/src/main/java/org/apache/flink/runtime/webmonitor/handlers/JobVertexCheckpointsHandler.java"}, "focal_method": {"identifier": "handleRequest", "parameters": "(ExecutionJobVertex jobVertex, Map<String, String> params)", "modifiers": "@Override public", "return": "String", "body": "@Override\n\tpublic String handleRequest(ExecutionJobVertex jobVertex, Map<String, String> params) throws Exception {\n\t\tStringWriter writer = new StringWriter();\n\t\tJsonGenerator gen = JsonFactory.jacksonFactory.createGenerator(writer);\n\t\tgen.writeStartObject();\n\n\t\tCheckpointStatsTracker tracker = jobVertex.getGraph().getCheckpointStatsTracker();\n\n\t\tif (tracker != null) {\n\t\t\tOption<OperatorCheckpointStats> statsOption = tracker\n\t\t\t\t\t.getOperatorStats(jobVertex.getJobVertexId());\n\n\t\t\tif (statsOption.isDefined()) {\n\t\t\t\tOperatorCheckpointStats stats = statsOption.get();\n\n\t\t\t\tgen.writeNumberField(\"id\", stats.getCheckpointId());\n\t\t\t\tgen.writeNumberField(\"timestamp\", stats.getTriggerTimestamp());\n\t\t\t\tgen.writeNumberField(\"duration\", stats.getDuration());\n\t\t\t\tgen.writeNumberField(\"size\", stats.getStateSize());\n\t\t\t\tgen.writeNumberField(\"parallelism\", stats.getNumberOfSubTasks());\n\n\t\t\t\tgen.writeArrayFieldStart(\"subtasks\");\n\t\t\t\tfor (int i = 0; i < stats.getNumberOfSubTasks(); i++) {\n\t\t\t\t\tgen.writeStartObject();\n\t\t\t\t\tgen.writeNumberField(\"subtask\", i);\n\t\t\t\t\tgen.writeNumberField(\"duration\", stats.getSubTaskDuration(i));\n\t\t\t\t\tgen.writeNumberField(\"size\", stats.getSubTaskStateSize(i));\n\t\t\t\t\tgen.writeEndObject();\n\t\t\t\t}\n\t\t\t\tgen.writeEndArray();\n\t\t\t}\n\t\t}\n\n\t\tgen.writeEndObject();\n\t\tgen.close();\n\n\t\treturn writer.toString();\n\t}", "signature": "String handleRequest(ExecutionJobVertex jobVertex, Map<String, String> params)", "full_signature": "@Override public String handleRequest(ExecutionJobVertex jobVertex, Map<String, String> params)", "class_method_signature": "JobVertexCheckpointsHandler.handleRequest(ExecutionJobVertex jobVertex, Map<String, String> params)", "testcase": false, "constructor": false, "invocations": ["createGenerator", "writeStartObject", "getCheckpointStatsTracker", "getGraph", "getOperatorStats", "getJobVertexId", "isDefined", "get", "writeNumberField", "getCheckpointId", "writeNumberField", "getTriggerTimestamp", "writeNumberField", "getDuration", "writeNumberField", "getStateSize", "writeNumberField", "getNumberOfSubTasks", "writeArrayFieldStart", "getNumberOfSubTasks", "writeStartObject", "writeNumberField", "writeNumberField", "getSubTaskDuration", "writeNumberField", "getSubTaskStateSize", "writeEndObject", "writeEndArray", "writeEndObject", "close", "toString"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}