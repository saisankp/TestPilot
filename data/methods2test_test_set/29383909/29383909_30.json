{"test_class": {"identifier": "UserClusterDataExtractorTest", "superclass": "", "interfaces": "", "fields": [], "file": "karamel-core/src/test/java/se/kth/karamel/backend/converter/UserClusterDataExtractorTest.java"}, "test_case": {"identifier": "clusterLinksTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void clusterLinksTest() throws IOException, KaramelException {\n    Settings.CB_CLASSPATH_MODE = true;\n    String ymlString = Resources.toString(Resources.getResource(\"se/kth/karamel/client/model/test-definitions/hopsworks.yml\"), Charsets.UTF_8);\n    JsonCluster definition = ClusterDefinitionService.yamlToJsonObject(ymlString);\n    String links = UserClusterDataExtractor.clusterLinks(definition, null);\n    String expected = \"Visit <a target='_blank' href='http://www.hops.io/'>Hop's Website</a> or <a target='_blank' \"\n        + \"href='http://www.karamel.io/'>Karamel's Website</a>\";\n    Assert.assertEquals(expected, links.trim());\n    ClusterRuntime dummyRuntime = MockingUtil.dummyRuntime(definition);\n    links = UserClusterDataExtractor.clusterLinks(definition, dummyRuntime);\n    expected = \"Click <a target='_blank' href='https://hopsworks1:8181/hop-dashboard'>here</a> to launch hopsworks in your browser\\n\"\n        + \"Visit <a target='_blank' href='http://www.hops.io/'>Hop's Website</a> or <a target='_blank' href='http://www.karamel.io/'>Karamel's Website</a>\\n\"\n        + \"\";\n//    Assert.assertEquals(expected, links);\n  }", "signature": "void clusterLinksTest()", "full_signature": "@Test public void clusterLinksTest()", "class_method_signature": "UserClusterDataExtractorTest.clusterLinksTest()", "testcase": true, "constructor": false, "invocations": ["toString", "getResource", "yamlToJsonObject", "clusterLinks", "assertEquals", "trim", "dummyRuntime", "clusterLinks"]}, "focal_class": {"identifier": "UserClusterDataExtractor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(UserClusterDataExtractor.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(UserClusterDataExtractor.class)", "var_name": "logger"}, {"original_string": "private static final CookbookCache cookbookCache = ClusterDefinitionService.CACHE;", "modifier": "private static final", "type": "CookbookCache", "declarator": "cookbookCache = ClusterDefinitionService.CACHE", "var_name": "cookbookCache"}], "methods": [{"identifier": "clusterLinks", "parameters": "(JsonCluster cluster, ClusterRuntime clusterEntity)", "modifiers": "public static", "return": "String", "signature": "String clusterLinks(JsonCluster cluster, ClusterRuntime clusterEntity)", "full_signature": "public static String clusterLinks(JsonCluster cluster, ClusterRuntime clusterEntity)", "class_method_signature": "UserClusterDataExtractor.clusterLinks(JsonCluster cluster, ClusterRuntime clusterEntity)", "testcase": false, "constructor": false}, {"identifier": "totalMachines", "parameters": "(JsonCluster cluster)", "modifiers": "public static", "return": "int", "signature": "int totalMachines(JsonCluster cluster)", "full_signature": "public static int totalMachines(JsonCluster cluster)", "class_method_signature": "UserClusterDataExtractor.totalMachines(JsonCluster cluster)", "testcase": false, "constructor": false}, {"identifier": "findGroup", "parameters": "(JsonCluster cluster, String groupName)", "modifiers": "public static", "return": "JsonGroup", "signature": "JsonGroup findGroup(JsonCluster cluster, String groupName)", "full_signature": "public static JsonGroup findGroup(JsonCluster cluster, String groupName)", "class_method_signature": "UserClusterDataExtractor.findGroup(JsonCluster cluster, String groupName)", "testcase": false, "constructor": false}, {"identifier": "findGroup", "parameters": "(ClusterRuntime clusterEntity, String groupName)", "modifiers": "public static", "return": "GroupRuntime", "signature": "GroupRuntime findGroup(ClusterRuntime clusterEntity, String groupName)", "full_signature": "public static GroupRuntime findGroup(ClusterRuntime clusterEntity, String groupName)", "class_method_signature": "UserClusterDataExtractor.findGroup(ClusterRuntime clusterEntity, String groupName)", "testcase": false, "constructor": false}, {"identifier": "getGroupProvider", "parameters": "(JsonCluster cluster, String groupName)", "modifiers": "public static", "return": "Provider", "signature": "Provider getGroupProvider(JsonCluster cluster, String groupName)", "full_signature": "public static Provider getGroupProvider(JsonCluster cluster, String groupName)", "class_method_signature": "UserClusterDataExtractor.getGroupProvider(JsonCluster cluster, String groupName)", "testcase": false, "constructor": false}, {"identifier": "makeVendorPath", "parameters": "(String sshUser, List<KaramelizedCookbook> rootCookbooks)", "modifiers": "public static", "return": "String", "signature": "String makeVendorPath(String sshUser, List<KaramelizedCookbook> rootCookbooks)", "full_signature": "public static String makeVendorPath(String sshUser, List<KaramelizedCookbook> rootCookbooks)", "class_method_signature": "UserClusterDataExtractor.makeVendorPath(String sshUser, List<KaramelizedCookbook> rootCookbooks)", "testcase": false, "constructor": false}], "file": "karamel-core/src/main/java/se/kth/karamel/backend/converter/UserClusterDataExtractor.java"}, "focal_method": {"identifier": "clusterLinks", "parameters": "(JsonCluster cluster, ClusterRuntime clusterEntity)", "modifiers": "public static", "return": "String", "body": "public static String clusterLinks(JsonCluster cluster, ClusterRuntime clusterEntity) throws KaramelException {\n    StringBuilder builder = new StringBuilder();\n    HashSet<String> cbids = new HashSet<>();\n    for (JsonGroup jg : cluster.getGroups()) {\n      for (JsonCookbook jc : jg.getCookbooks()) {\n        String cbid = jc.getId();\n        cbids.add(cbid);\n        cookbookCache.prepareParallel(cbids);\n      }\n    }\n    for (JsonGroup jg : cluster.getGroups()) {\n      for (JsonCookbook jc : jg.getCookbooks()) {\n        for (JsonRecipe rec : jc.getRecipes()) {\n          String cbid = jc.getId();\n          KaramelizedCookbook cb = cookbookCache.get(cbid);\n          MetadataRb metadataRb = cb.getMetadataRb();\n          List<Recipe> recipes = metadataRb.getRecipes();\n          for (Recipe recipe : recipes) {\n            if (recipe.getCanonicalName().equalsIgnoreCase(rec.getCanonicalName())) {\n              Set<String> links = recipe.getLinks();\n              for (String link : links) {\n                if (link.contains(Settings.METADATA_INCOMMENT_HOST_KEY)) {\n                  if (clusterEntity != null) {\n                    GroupRuntime ge = findGroup(clusterEntity, jg.getName());\n                    if (ge != null) {\n                      List<MachineRuntime> machines = ge.getMachines();\n                      if (machines != null) {\n                        for (MachineRuntime me : ge.getMachines()) {\n                          String l = link.replaceAll(Settings.METADATA_INCOMMENT_HOST_KEY, me.getPublicIp());\n                          builder.append(l).append(\"\\n\");\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  builder.append(link).append(\"\\n\");\n                }\n\n              }\n\n            }\n          }\n        }\n      }\n    }\n    return builder.toString();\n  }", "signature": "String clusterLinks(JsonCluster cluster, ClusterRuntime clusterEntity)", "full_signature": "public static String clusterLinks(JsonCluster cluster, ClusterRuntime clusterEntity)", "class_method_signature": "UserClusterDataExtractor.clusterLinks(JsonCluster cluster, ClusterRuntime clusterEntity)", "testcase": false, "constructor": false, "invocations": ["getGroups", "getCookbooks", "getId", "add", "prepareParallel", "getGroups", "getCookbooks", "getRecipes", "getId", "get", "getMetadataRb", "getRecipes", "equalsIgnoreCase", "getCanonicalName", "getCanonicalName", "getLinks", "contains", "findGroup", "getName", "getMachines", "getMachines", "replaceAll", "getPublicIp", "append", "append", "append", "append", "toString"]}, "repository": {"repo_id": 29383909, "url": "https://github.com/karamelchef/karamel", "language": "Java", "is_fork": false, "fork_count": 17, "stargazer_count": 30, "size": 12029, "license": "licensed"}}