{"test_class": {"identifier": "StandardScalerPreprocessorTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/ml/src/test/java/org/apache/ignite/ml/preprocessing/standardscaling/StandardScalerPreprocessorTest.java"}, "test_case": {"identifier": "testApply", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testApply() {\n        double[][] inputData = new double[][] {\n            {0, 2., 4., .1},\n            {0, 1., -18., 2.2},\n            {1, 4., 10., -.1},\n            {1, 0., 22., 1.3}\n        };\n        double[] means = new double[] {0.5, 1.75, 4.5, 0.875};\n        double[] sigmas = new double[] {0.5, 1.47901995, 14.51723114, 0.93374247};\n\n        final Vectorizer<Integer, Vector, Integer, Double> vectorizer = new DummyVectorizer<Integer>(0, 1, 2, 3).labeled(0);\n\n        StandardScalerPreprocessor<Integer, Vector> preprocessor = new StandardScalerPreprocessor<>(\n            means,\n            sigmas,\n            vectorizer\n        );\n\n        double[][] expectedData = new double[][] {\n            {-1., 0.16903085, -0.03444183, -0.82999331},\n            {-1., -0.50709255, -1.54988233, 1.41902081},\n            {1., 1.52127766, 0.37886012, -1.04418513},\n            {1., -1.18321596, 1.20546403, 0.45515762}\n        };\n\n        for (int i = 0; i < inputData.length; i++)\n            assertArrayEquals(expectedData[i], preprocessor.apply(i, VectorUtils.of(inputData[i])).features().asArray(), 1e-8);\n    }", "signature": "void testApply()", "full_signature": "@Test public void testApply()", "class_method_signature": "StandardScalerPreprocessorTest.testApply()", "testcase": true, "constructor": false, "invocations": ["labeled", "assertArrayEquals", "asArray", "features", "apply", "of"]}, "focal_class": {"identifier": "StandardScalerPreprocessor", "superclass": "", "interfaces": "implements Preprocessor<K, V>, DeployableObject", "fields": [{"original_string": "private static final long serialVersionUID = -5977957318991608203L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -5977957318991608203L", "var_name": "serialVersionUID"}, {"original_string": "private final double[] means;", "modifier": "private final", "type": "double[]", "declarator": "means", "var_name": "means"}, {"original_string": "private final double[] sigmas;", "modifier": "private final", "type": "double[]", "declarator": "sigmas", "var_name": "sigmas"}, {"original_string": "private final Preprocessor<K, V> basePreprocessor;", "modifier": "private final", "type": "Preprocessor<K, V>", "declarator": "basePreprocessor", "var_name": "basePreprocessor"}], "methods": [{"identifier": "StandardScalerPreprocessor", "parameters": "(double[] means, double[] sigmas,\n                                      Preprocessor<K, V> basePreprocessor)", "modifiers": "public", "return": "", "signature": " StandardScalerPreprocessor(double[] means, double[] sigmas,\n                                      Preprocessor<K, V> basePreprocessor)", "full_signature": "public  StandardScalerPreprocessor(double[] means, double[] sigmas,\n                                      Preprocessor<K, V> basePreprocessor)", "class_method_signature": "StandardScalerPreprocessor.StandardScalerPreprocessor(double[] means, double[] sigmas,\n                                      Preprocessor<K, V> basePreprocessor)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(K k, V v)", "modifiers": "@Override public", "return": "LabeledVector", "signature": "LabeledVector apply(K k, V v)", "full_signature": "@Override public LabeledVector apply(K k, V v)", "class_method_signature": "StandardScalerPreprocessor.apply(K k, V v)", "testcase": false, "constructor": false}, {"identifier": "getMeans", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getMeans()", "full_signature": "public double[] getMeans()", "class_method_signature": "StandardScalerPreprocessor.getMeans()", "testcase": false, "constructor": false}, {"identifier": "getSigmas", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getSigmas()", "full_signature": "public double[] getSigmas()", "class_method_signature": "StandardScalerPreprocessor.getSigmas()", "testcase": false, "constructor": false}, {"identifier": "getDependencies", "parameters": "()", "modifiers": "@Override public", "return": "List<Object>", "signature": "List<Object> getDependencies()", "full_signature": "@Override public List<Object> getDependencies()", "class_method_signature": "StandardScalerPreprocessor.getDependencies()", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/preprocessing/standardscaling/StandardScalerPreprocessor.java"}, "focal_method": {"identifier": "apply", "parameters": "(K k, V v)", "modifiers": "@Override public", "return": "LabeledVector", "body": "@Override public LabeledVector apply(K k, V v) {\n        LabeledVector res = basePreprocessor.apply(k, v);\n\n        assert res.size() == means.length;\n\n        for (int i = 0; i < res.size(); i++)\n            res.set(i, (res.get(i) - means[i]) / sigmas[i]);\n\n        return res;\n    }", "signature": "LabeledVector apply(K k, V v)", "full_signature": "@Override public LabeledVector apply(K k, V v)", "class_method_signature": "StandardScalerPreprocessor.apply(K k, V v)", "testcase": false, "constructor": false, "invocations": ["apply", "size", "size", "set", "get"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}