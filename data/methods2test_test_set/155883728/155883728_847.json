{"test_class": {"identifier": "ExpectAcesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final NamePathResolver resolver = new DefaultNamePathResolver(JsonCnd.BUILTIN_MAPPINGS);", "modifier": "private final", "type": "NamePathResolver", "declarator": "resolver = new DefaultNamePathResolver(JsonCnd.BUILTIN_MAPPINGS)", "var_name": "resolver"}, {"original_string": "static final Privilege[] emptyPrivileges = new Privilege[0];", "modifier": "static final", "type": "Privilege[]", "declarator": "emptyPrivileges = new Privilege[0]", "var_name": "emptyPrivileges"}], "file": "core/src/test/java/net/adamcin/oakpal/core/checks/ExpectAcesTest.java"}, "test_case": {"identifier": "testParseAceCriteria_throws", "parameters": "()", "modifiers": "@Test(expected = Exception.class) public", "return": "void", "body": "@Test(expected = Exception.class)\n    public void testParseAceCriteria_throws() throws Exception {\n        ExpectAces.parseAceCriteria(key(\"stuff\", arr(\"type=allow\")).get(), new String[]{\"nouser\"}, \"stuff\");\n    }", "signature": "void testParseAceCriteria_throws()", "full_signature": "@Test(expected = Exception.class) public void testParseAceCriteria_throws()", "class_method_signature": "ExpectAcesTest.testParseAceCriteria_throws()", "testcase": true, "constructor": false, "invocations": ["parseAceCriteria", "get", "key", "arr"]}, "focal_class": {"identifier": "ExpectAces", "superclass": "", "interfaces": "implements ProgressCheckFactory", "fields": [{"original_string": "private static final JsonKeys KEYS = new JsonKeys() {\n        @Override\n        public String principal() {\n            return \"principal\";\n        }\n\n        @Override\n        public String principals() {\n            return \"principals\";\n        }\n\n        @Override\n        public String expectedAces() {\n            return \"expectedAces\";\n        }\n\n        @Override\n        public String notExpectedAces() {\n            return \"notExpectedAces\";\n        }\n\n        @Override\n        public String afterPackageIdRules() {\n            return \"afterPackageIdRules\";\n        }\n\n        @Override\n        public String severity() {\n            return \"severity\";\n        }\n\n        @Override\n        public String type() {\n            return \"type\";\n        }\n\n        @Override\n        public String privileges() {\n            return \"privileges\";\n        }\n\n        @Override\n        public String path() {\n            return \"path\";\n        }\n    };", "modifier": "private static final", "type": "JsonKeys", "declarator": "KEYS = new JsonKeys() {\n        @Override\n        public String principal() {\n            return \"principal\";\n        }\n\n        @Override\n        public String principals() {\n            return \"principals\";\n        }\n\n        @Override\n        public String expectedAces() {\n            return \"expectedAces\";\n        }\n\n        @Override\n        public String notExpectedAces() {\n            return \"notExpectedAces\";\n        }\n\n        @Override\n        public String afterPackageIdRules() {\n            return \"afterPackageIdRules\";\n        }\n\n        @Override\n        public String severity() {\n            return \"severity\";\n        }\n\n        @Override\n        public String type() {\n            return \"type\";\n        }\n\n        @Override\n        public String privileges() {\n            return \"privileges\";\n        }\n\n        @Override\n        public String path() {\n            return \"path\";\n        }\n    }", "var_name": "KEYS"}, {"original_string": "@Deprecated\n    public static final String CONFIG_PRINCIPAL = keys().principal();", "modifier": "@Deprecated\n    public static final", "type": "String", "declarator": "CONFIG_PRINCIPAL = keys().principal()", "var_name": "CONFIG_PRINCIPAL"}, {"original_string": "@Deprecated\n    public static final String CONFIG_PRINCIPALS = keys().principals();", "modifier": "@Deprecated\n    public static final", "type": "String", "declarator": "CONFIG_PRINCIPALS = keys().principals()", "var_name": "CONFIG_PRINCIPALS"}, {"original_string": "@Deprecated\n    public static final String CONFIG_EXPECTED_ACES = keys().expectedAces();", "modifier": "@Deprecated\n    public static final", "type": "String", "declarator": "CONFIG_EXPECTED_ACES = keys().expectedAces()", "var_name": "CONFIG_EXPECTED_ACES"}, {"original_string": "@Deprecated\n    public static final String CONFIG_NOT_EXPECTED_ACES = keys().notExpectedAces();", "modifier": "@Deprecated\n    public static final", "type": "String", "declarator": "CONFIG_NOT_EXPECTED_ACES = keys().notExpectedAces()", "var_name": "CONFIG_NOT_EXPECTED_ACES"}, {"original_string": "@Deprecated\n    public static final String CONFIG_AFTER_PACKAGE_ID_RULES = keys().afterPackageIdRules();", "modifier": "@Deprecated\n    public static final", "type": "String", "declarator": "CONFIG_AFTER_PACKAGE_ID_RULES = keys().afterPackageIdRules()", "var_name": "CONFIG_AFTER_PACKAGE_ID_RULES"}, {"original_string": "@Deprecated\n    public static final String ACE_PARAM_TYPE = keys().type();", "modifier": "@Deprecated\n    public static final", "type": "String", "declarator": "ACE_PARAM_TYPE = keys().type()", "var_name": "ACE_PARAM_TYPE"}, {"original_string": "@Deprecated\n    public static final String ACE_PARAM_PRIVILEGES = keys().privileges();", "modifier": "@Deprecated\n    public static final", "type": "String", "declarator": "ACE_PARAM_PRIVILEGES = keys().privileges()", "var_name": "ACE_PARAM_PRIVILEGES"}, {"original_string": "@Deprecated\n    public static final String ACE_PARAM_PATH = keys().path();", "modifier": "@Deprecated\n    public static final", "type": "String", "declarator": "ACE_PARAM_PATH = keys().path()", "var_name": "ACE_PARAM_PATH"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ExpectAces.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ExpectAces.class)", "var_name": "LOGGER"}, {"original_string": "static final Severity DEFAULT_SEVERITY = Severity.MAJOR;", "modifier": "static final", "type": "Severity", "declarator": "DEFAULT_SEVERITY = Severity.MAJOR", "var_name": "DEFAULT_SEVERITY"}, {"original_string": "public static final String DELIM_PARAM = \";\";", "modifier": "public static final", "type": "String", "declarator": "DELIM_PARAM = \";\"", "var_name": "DELIM_PARAM"}, {"original_string": "public static final String DELIM_VALUE = \"=\";", "modifier": "public static final", "type": "String", "declarator": "DELIM_VALUE = \"=\"", "var_name": "DELIM_VALUE"}, {"original_string": "public static final String DELIM_LIST = \",\";", "modifier": "public static final", "type": "String", "declarator": "DELIM_LIST = \",\"", "var_name": "DELIM_LIST"}], "methods": [{"identifier": "keys", "parameters": "()", "modifiers": "@NotNull public static", "return": "JsonKeys", "signature": "JsonKeys keys()", "full_signature": "@NotNull public static JsonKeys keys()", "class_method_signature": "ExpectAces.keys()", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(final JsonObject config)", "modifiers": "@Override public", "return": "ProgressCheck", "signature": "ProgressCheck newInstance(final JsonObject config)", "full_signature": "@Override public ProgressCheck newInstance(final JsonObject config)", "class_method_signature": "ExpectAces.newInstance(final JsonObject config)", "testcase": false, "constructor": false}, {"identifier": "isPrincipalSpec", "parameters": "(final @NotNull String spec)", "modifiers": "static", "return": "boolean", "signature": "boolean isPrincipalSpec(final @NotNull String spec)", "full_signature": "static boolean isPrincipalSpec(final @NotNull String spec)", "class_method_signature": "ExpectAces.isPrincipalSpec(final @NotNull String spec)", "testcase": false, "constructor": false}, {"identifier": "isGeneralSpec", "parameters": "(final @NotNull String spec)", "modifiers": "static", "return": "boolean", "signature": "boolean isGeneralSpec(final @NotNull String spec)", "full_signature": "static boolean isGeneralSpec(final @NotNull String spec)", "class_method_signature": "ExpectAces.isGeneralSpec(final @NotNull String spec)", "testcase": false, "constructor": false}, {"identifier": "parseAceCriteria", "parameters": "(final @NotNull JsonObject config,\n                                              final @NotNull String[] principals,\n                                              final @NotNull String key)", "modifiers": "static", "return": "List<AceCriteria>", "signature": "List<AceCriteria> parseAceCriteria(final @NotNull JsonObject config,\n                                              final @NotNull String[] principals,\n                                              final @NotNull String key)", "full_signature": "static List<AceCriteria> parseAceCriteria(final @NotNull JsonObject config,\n                                              final @NotNull String[] principals,\n                                              final @NotNull String key)", "class_method_signature": "ExpectAces.parseAceCriteria(final @NotNull JsonObject config,\n                                              final @NotNull String[] principals,\n                                              final @NotNull String key)", "testcase": false, "constructor": false}, {"identifier": "restrictionMatcher", "parameters": "(final @NotNull JackrabbitAccessControlList acl,\n                       final @NotNull RestrictionCriteria[] restrictionCriterias)", "modifiers": "static", "return": "Predicate<JackrabbitAccessControlEntry>", "signature": "Predicate<JackrabbitAccessControlEntry> restrictionMatcher(final @NotNull JackrabbitAccessControlList acl,\n                       final @NotNull RestrictionCriteria[] restrictionCriterias)", "full_signature": "static Predicate<JackrabbitAccessControlEntry> restrictionMatcher(final @NotNull JackrabbitAccessControlList acl,\n                       final @NotNull RestrictionCriteria[] restrictionCriterias)", "class_method_signature": "ExpectAces.restrictionMatcher(final @NotNull JackrabbitAccessControlList acl,\n                       final @NotNull RestrictionCriteria[] restrictionCriterias)", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/checks/ExpectAces.java"}, "focal_method": {"identifier": "parseAceCriteria", "parameters": "(final @NotNull JsonObject config,\n                                              final @NotNull String[] principals,\n                                              final @NotNull String key)", "modifiers": "static", "return": "List<AceCriteria>", "body": "static List<AceCriteria> parseAceCriteria(final @NotNull JsonObject config,\n                                              final @NotNull String[] principals,\n                                              final @NotNull String key) throws Exception {\n        final List<AceCriteria> allCriterias = new ArrayList<>();\n        final List<String> specs = JavaxJson.mapArrayOfStrings(JavaxJson.arrayOrEmpty(config, key));\n        final List<String> generalSpecs = specs.stream().filter(ExpectAces::isGeneralSpec).collect(Collectors.toList());\n        if (!generalSpecs.isEmpty() && principals.length == 0) {\n            throw new Exception(\"principal or principals check config param must be non-empty if general ACE criteria are specified\");\n        } else {\n            for (String principal : principals) {\n                final Result<List<AceCriteria>> expectedAceResults = generalSpecs.stream()\n                        .map(spec -> AceCriteria.parse(principal, spec))\n                        .collect(Result.tryCollect(Collectors.toList()));\n                if (expectedAceResults.getError().isPresent()) {\n                    throw new Exception(\"invalid criteria in \" + key + \". \" + expectedAceResults.getError()\n                            .map(Throwable::getMessage).orElse(\"\"));\n                }\n                expectedAceResults.forEach(allCriterias::addAll);\n            }\n        }\n        final Result<List<AceCriteria>> principalAceResults = specs.stream()\n                .filter(ExpectAces::isPrincipalSpec)\n                .map(spec -> AceCriteria.parse(\"\", spec))\n                .collect(Result.tryCollect(Collectors.toList()));\n        if (principalAceResults.getError().isPresent()) {\n            throw new Exception(\"invalid criteria in \" + key + \". \" + principalAceResults.getError()\n                    .map(Throwable::getMessage).orElse(\"\"));\n        }\n        principalAceResults.forEach(allCriterias::addAll);\n\n        return allCriterias;\n    }", "signature": "List<AceCriteria> parseAceCriteria(final @NotNull JsonObject config,\n                                              final @NotNull String[] principals,\n                                              final @NotNull String key)", "full_signature": "static List<AceCriteria> parseAceCriteria(final @NotNull JsonObject config,\n                                              final @NotNull String[] principals,\n                                              final @NotNull String key)", "class_method_signature": "ExpectAces.parseAceCriteria(final @NotNull JsonObject config,\n                                              final @NotNull String[] principals,\n                                              final @NotNull String key)", "testcase": false, "constructor": false, "invocations": ["mapArrayOfStrings", "arrayOrEmpty", "collect", "filter", "stream", "toList", "isEmpty", "collect", "map", "stream", "parse", "tryCollect", "toList", "isPresent", "getError", "orElse", "map", "getError", "forEach", "collect", "map", "filter", "stream", "parse", "tryCollect", "toList", "isPresent", "getError", "orElse", "map", "getError", "forEach"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}