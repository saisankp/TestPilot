{"test_class": {"identifier": "TestDbusEvent", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long key = 12345L;", "modifier": "private static final", "type": "long", "declarator": "key = 12345L", "var_name": "key"}, {"original_string": "private static final long timeStamp = 3456L;", "modifier": "private static final", "type": "long", "declarator": "timeStamp = 3456L", "var_name": "timeStamp"}, {"original_string": "private static final short partitionId = 30;", "modifier": "private static final", "type": "short", "declarator": "partitionId = 30", "var_name": "partitionId"}, {"original_string": "private static final short srcId = 15;", "modifier": "private static final", "type": "short", "declarator": "srcId = 15", "var_name": "srcId"}, {"original_string": "private static final byte[] schemaId = \"abcdefghijklmnop\".getBytes(Charset.defaultCharset());", "modifier": "private static final", "type": "byte[]", "declarator": "schemaId = \"abcdefghijklmnop\".getBytes(Charset.defaultCharset())", "var_name": "schemaId"}, {"original_string": "private static final String DATA_ROOT_DIR_PROP_NAME = \"test.datadir\";", "modifier": "private static final", "type": "String", "declarator": "DATA_ROOT_DIR_PROP_NAME = \"test.datadir\"", "var_name": "DATA_ROOT_DIR_PROP_NAME"}, {"original_string": "private static final String DATA_DIR_NAME = \"./test_data\";", "modifier": "private static final", "type": "String", "declarator": "DATA_DIR_NAME = \"./test_data\"", "var_name": "DATA_DIR_NAME"}, {"original_string": "private static final String OLD_JAVA_EVENT_FILE = \"DbusEventUpsertByOldJava.evt\";", "modifier": "private static final", "type": "String", "declarator": "OLD_JAVA_EVENT_FILE = \"DbusEventUpsertByOldJava.evt\"", "var_name": "OLD_JAVA_EVENT_FILE"}, {"original_string": "private static final DbusEventFactory _eventV1Factory = new DbusEventV1Factory();", "modifier": "private static final", "type": "DbusEventFactory", "declarator": "_eventV1Factory = new DbusEventV1Factory()", "var_name": "_eventV1Factory"}, {"original_string": "public static final Logger LOG = Logger.getLogger(TestDbusEvent.class.getName());", "modifier": "public static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(TestDbusEvent.class.getName())", "var_name": "LOG"}], "file": "databus-core/databus-core-impl/src/test/java/com/linkedin/databus/core/TestDbusEvent.java"}, "test_case": {"identifier": "testValueCrc", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testValueCrc()\n  throws Exception\n  {\n    String randomValue = RngUtils.randomString(20);\n    ByteBuffer directBuffer = ByteBuffer.allocateDirect(5000).order(_eventV1Factory.getByteOrder());\n    DbusEventInfo eventInfo = new DbusEventInfo(DbusOpcode.UPSERT, 0L, (short)0, partitionId, timeStamp, srcId,\n                                                schemaId, randomValue.getBytes(Charset.defaultCharset()), false, false);\n    eventInfo.setEventSerializationVersion(DbusEventFactory.DBUS_EVENT_V1);  // make this explicit\n    DbusEventFactory.serializeEvent(new DbusEventKey(key), directBuffer, eventInfo);\n    DbusEventInternalReadable e = _eventV1Factory.createReadOnlyDbusEventFromBuffer(directBuffer, 0);\n\n    DbusEventInternalWritable writableEvent = DbusEventCorrupter.makeWritable(e);  // for testing only!\n    writableEvent.setSequence(200L);\n\n    // Test case 1: Set the value CRC correctly and ensure it passes\n    long calcValueCRC = 0;\n    try\n    {\n      // Set the value CRC, then reset the header CRC since it covers the value CRC:\n      calcValueCRC = e.getCalculatedValueCrc();\n      writableEvent.setValueCrc(calcValueCRC);\n      writableEvent.applyCrc();\n    }\n    catch (Exception e1)\n    {\n      fail(\"Not supposed to throw exception\");\n    }\n    assertTrue(e.isValid());\n    long actualValueCRC = e.bodyCrc();\n    assertEquals(\"value CRCs should match\", calcValueCRC, actualValueCRC);\n\n    // Test case 2: Set the value CRC incorrectly\n    try\n    {\n      writableEvent.setValueCrc(calcValueCRC + 1);\n      writableEvent.applyCrc();\n    }\n    catch (Exception e1)\n    {\n      fail(\"Not supposed to throw exception\");\n    }\n    actualValueCRC = e.bodyCrc();\n    assertEquals(\"value CRCs should match\", calcValueCRC+1, actualValueCRC);\n\n    assertTrue(!e.isValid());\n  }", "signature": "void testValueCrc()", "full_signature": "@Test public void testValueCrc()", "class_method_signature": "TestDbusEvent.testValueCrc()", "testcase": true, "constructor": false, "invocations": ["randomString", "order", "allocateDirect", "getByteOrder", "getBytes", "defaultCharset", "setEventSerializationVersion", "serializeEvent", "createReadOnlyDbusEventFromBuffer", "makeWritable", "setSequence", "getCalculatedValueCrc", "setValueCrc", "applyCrc", "fail", "assertTrue", "isValid", "bodyCrc", "assertEquals", "setValueCrc", "applyCrc", "fail", "bodyCrc", "assertEquals", "assertTrue", "isValid"]}, "focal_class": {"identifier": "DbusEvent", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final static int MD5_DIGEST_LEN = 16;", "modifier": "public final static", "type": "int", "declarator": "MD5_DIGEST_LEN = 16", "var_name": "MD5_DIGEST_LEN"}, {"original_string": "public final static int CRC32_DIGEST_LEN = 4;", "modifier": "public final static", "type": "int", "declarator": "CRC32_DIGEST_LEN = 4", "var_name": "CRC32_DIGEST_LEN"}], "methods": [{"identifier": "isExtReplicatedEvent", "parameters": "()", "modifiers": "public abstract", "return": "boolean", "signature": "boolean isExtReplicatedEvent()", "full_signature": "public abstract boolean isExtReplicatedEvent()", "class_method_signature": "DbusEvent.isExtReplicatedEvent()", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "()", "modifiers": "public abstract", "return": "boolean", "signature": "boolean isValid()", "full_signature": "public abstract boolean isValid()", "class_method_signature": "DbusEvent.isValid()", "testcase": false, "constructor": false}, {"identifier": "isControlMessage", "parameters": "()", "modifiers": "public abstract", "return": "boolean", "signature": "boolean isControlMessage()", "full_signature": "public abstract boolean isControlMessage()", "class_method_signature": "DbusEvent.isControlMessage()", "testcase": false, "constructor": false}, {"identifier": "isPrivateControlMessage", "parameters": "()", "modifiers": "public abstract", "return": "boolean", "signature": "boolean isPrivateControlMessage()", "full_signature": "public abstract boolean isPrivateControlMessage()", "class_method_signature": "DbusEvent.isPrivateControlMessage()", "testcase": false, "constructor": false}, {"identifier": "isCheckpointMessage", "parameters": "()", "modifiers": "public abstract", "return": "boolean", "signature": "boolean isCheckpointMessage()", "full_signature": "public abstract boolean isCheckpointMessage()", "class_method_signature": "DbusEvent.isCheckpointMessage()", "testcase": false, "constructor": false}, {"identifier": "isKeyNumber", "parameters": "()", "modifiers": "public abstract", "return": "boolean", "signature": "boolean isKeyNumber()", "full_signature": "public abstract boolean isKeyNumber()", "class_method_signature": "DbusEvent.isKeyNumber()", "testcase": false, "constructor": false}, {"identifier": "isKeyString", "parameters": "()", "modifiers": "public abstract", "return": "boolean", "signature": "boolean isKeyString()", "full_signature": "public abstract boolean isKeyString()", "class_method_signature": "DbusEvent.isKeyString()", "testcase": false, "constructor": false}, {"identifier": "isKeySchema", "parameters": "()", "modifiers": "public abstract", "return": "boolean", "signature": "boolean isKeySchema()", "full_signature": "public abstract boolean isKeySchema()", "class_method_signature": "DbusEvent.isKeySchema()", "testcase": false, "constructor": false}, {"identifier": "isSCNRegressMessage", "parameters": "()", "modifiers": "public abstract", "return": "boolean", "signature": "boolean isSCNRegressMessage()", "full_signature": "public abstract boolean isSCNRegressMessage()", "class_method_signature": "DbusEvent.isSCNRegressMessage()", "testcase": false, "constructor": false}, {"identifier": "isTraceEnabled", "parameters": "()", "modifiers": "public abstract", "return": "boolean", "signature": "boolean isTraceEnabled()", "full_signature": "public abstract boolean isTraceEnabled()", "class_method_signature": "DbusEvent.isTraceEnabled()", "testcase": false, "constructor": false}, {"identifier": "isEndOfPeriodMarker", "parameters": "()", "modifiers": "public abstract", "return": "boolean", "signature": "boolean isEndOfPeriodMarker()", "full_signature": "public abstract boolean isEndOfPeriodMarker()", "class_method_signature": "DbusEvent.isEndOfPeriodMarker()", "testcase": false, "constructor": false}, {"identifier": "getOpcode", "parameters": "()", "modifiers": "public abstract", "return": "DbusOpcode", "signature": "DbusOpcode getOpcode()", "full_signature": "public abstract DbusOpcode getOpcode()", "class_method_signature": "DbusEvent.getOpcode()", "testcase": false, "constructor": false}, {"identifier": "timestampInNanos", "parameters": "()", "modifiers": "public abstract", "return": "long", "signature": "long timestampInNanos()", "full_signature": "public abstract long timestampInNanos()", "class_method_signature": "DbusEvent.timestampInNanos()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public abstract", "return": "int", "signature": "int size()", "full_signature": "public abstract int size()", "class_method_signature": "DbusEvent.size()", "testcase": false, "constructor": false}, {"identifier": "sequence", "parameters": "()", "modifiers": "public abstract", "return": "long", "signature": "long sequence()", "full_signature": "public abstract long sequence()", "class_method_signature": "DbusEvent.sequence()", "testcase": false, "constructor": false}, {"identifier": "key", "parameters": "()", "modifiers": "public abstract", "return": "long", "signature": "long key()", "full_signature": "public abstract long key()", "class_method_signature": "DbusEvent.key()", "testcase": false, "constructor": false}, {"identifier": "keyLength", "parameters": "()", "modifiers": "@Deprecated public abstract", "return": "int", "signature": "int keyLength()", "full_signature": "@Deprecated public abstract int keyLength()", "class_method_signature": "DbusEvent.keyLength()", "testcase": false, "constructor": false}, {"identifier": "keyBytes", "parameters": "()", "modifiers": "public abstract", "return": "byte[]", "signature": "byte[] keyBytes()", "full_signature": "public abstract byte[] keyBytes()", "class_method_signature": "DbusEvent.keyBytes()", "testcase": false, "constructor": false}, {"identifier": "srcId", "parameters": "()", "modifiers": "@Deprecated public abstract", "return": "short", "signature": "short srcId()", "full_signature": "@Deprecated public abstract short srcId()", "class_method_signature": "DbusEvent.srcId()", "testcase": false, "constructor": false}, {"identifier": "getSourceId", "parameters": "()", "modifiers": "public abstract", "return": "int", "signature": "int getSourceId()", "full_signature": "public abstract int getSourceId()", "class_method_signature": "DbusEvent.getSourceId()", "testcase": false, "constructor": false}, {"identifier": "physicalPartitionId", "parameters": "()", "modifiers": "@Deprecated public abstract", "return": "short", "signature": "short physicalPartitionId()", "full_signature": "@Deprecated public abstract short physicalPartitionId()", "class_method_signature": "DbusEvent.physicalPartitionId()", "testcase": false, "constructor": false}, {"identifier": "logicalPartitionId", "parameters": "()", "modifiers": "@Deprecated public abstract", "return": "short", "signature": "short logicalPartitionId()", "full_signature": "@Deprecated public abstract short logicalPartitionId()", "class_method_signature": "DbusEvent.logicalPartitionId()", "testcase": false, "constructor": false}, {"identifier": "getPartitionId", "parameters": "()", "modifiers": "public abstract", "return": "short", "signature": "short getPartitionId()", "full_signature": "public abstract short getPartitionId()", "class_method_signature": "DbusEvent.getPartitionId()", "testcase": false, "constructor": false}, {"identifier": "schemaId", "parameters": "()", "modifiers": "public abstract", "return": "byte[]", "signature": "byte[] schemaId()", "full_signature": "public abstract byte[] schemaId()", "class_method_signature": "DbusEvent.schemaId()", "testcase": false, "constructor": false}, {"identifier": "schemaId", "parameters": "(byte[] md5)", "modifiers": "public abstract", "return": "void", "signature": "void schemaId(byte[] md5)", "full_signature": "public abstract void schemaId(byte[] md5)", "class_method_signature": "DbusEvent.schemaId(byte[] md5)", "testcase": false, "constructor": false}, {"identifier": "valueLength", "parameters": "()", "modifiers": "public abstract", "return": "int", "signature": "int valueLength()", "full_signature": "public abstract int valueLength()", "class_method_signature": "DbusEvent.valueLength()", "testcase": false, "constructor": false}, {"identifier": "value", "parameters": "()", "modifiers": "public abstract", "return": "ByteBuffer", "signature": "ByteBuffer value()", "full_signature": "public abstract ByteBuffer value()", "class_method_signature": "DbusEvent.value()", "testcase": false, "constructor": false}, {"identifier": "getRawBytes", "parameters": "()", "modifiers": "public abstract", "return": "ByteBuffer", "signature": "ByteBuffer getRawBytes()", "full_signature": "public abstract ByteBuffer getRawBytes()", "class_method_signature": "DbusEvent.getRawBytes()", "testcase": false, "constructor": false}, {"identifier": "getPayloadPart", "parameters": "()", "modifiers": "public abstract", "return": "DbusEventPart", "signature": "DbusEventPart getPayloadPart()", "full_signature": "public abstract DbusEventPart getPayloadPart()", "class_method_signature": "DbusEvent.getPayloadPart()", "testcase": false, "constructor": false}, {"identifier": "getPayloadMetadataPart", "parameters": "()", "modifiers": "public abstract", "return": "DbusEventPart", "signature": "DbusEventPart getPayloadMetadataPart()", "full_signature": "public abstract DbusEventPart getPayloadMetadataPart()", "class_method_signature": "DbusEvent.getPayloadMetadataPart()", "testcase": false, "constructor": false}, {"identifier": "getKeyPart", "parameters": "()", "modifiers": "public abstract", "return": "DbusEventPart", "signature": "DbusEventPart getKeyPart()", "full_signature": "public abstract DbusEventPart getKeyPart()", "class_method_signature": "DbusEvent.getKeyPart()", "testcase": false, "constructor": false}], "file": "databus-core/databus-core-impl/src/main/java/com/linkedin/databus/core/DbusEvent.java"}, "focal_method": {"identifier": "isValid", "parameters": "()", "modifiers": "public abstract", "return": "boolean", "body": "public abstract boolean isValid();", "signature": "boolean isValid()", "full_signature": "public abstract boolean isValid()", "class_method_signature": "DbusEvent.isValid()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 7209229, "url": "https://github.com/linkedin/databus", "language": "Java", "is_fork": false, "fork_count": 653, "stargazer_count": 2899, "size": 51191, "license": "licensed"}}