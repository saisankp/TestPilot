{"test_class": {"identifier": "MetatableServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String metatableSnapShot1Uuid = UUID.randomUUID().toString();", "modifier": "private static", "type": "String", "declarator": "metatableSnapShot1Uuid = UUID.randomUUID().toString()", "var_name": "metatableSnapShot1Uuid"}, {"original_string": "private static String metatableSnapShot2Uuid = UUID.randomUUID().toString();", "modifier": "private static", "type": "String", "declarator": "metatableSnapShot2Uuid = UUID.randomUUID().toString()", "var_name": "metatableSnapShot2Uuid"}, {"original_string": "private static String metatableMasterUuid = UUID.randomUUID().toString();", "modifier": "private static", "type": "String", "declarator": "metatableMasterUuid = UUID.randomUUID().toString()", "var_name": "metatableMasterUuid"}, {"original_string": "private static Long lastUpdateTimeStamp = new DateTime().getTimeInMillisec();", "modifier": "private static", "type": "Long", "declarator": "lastUpdateTimeStamp = new DateTime().getTimeInMillisec()", "var_name": "lastUpdateTimeStamp"}, {"original_string": "private static Long lastUpdateTimeStamp1 = lastUpdateTimeStamp + 1000L;", "modifier": "private static", "type": "Long", "declarator": "lastUpdateTimeStamp1 = lastUpdateTimeStamp + 1000L", "var_name": "lastUpdateTimeStamp1"}, {"original_string": "private static Long lastUpdateTimeStamp2 = lastUpdateTimeStamp + 2000L;", "modifier": "private static", "type": "Long", "declarator": "lastUpdateTimeStamp2 = lastUpdateTimeStamp + 2000L", "var_name": "lastUpdateTimeStamp2"}, {"original_string": "private static Long lastUpdateTimeStamp3 = lastUpdateTimeStamp + 3000L;", "modifier": "private static", "type": "Long", "declarator": "lastUpdateTimeStamp3 = lastUpdateTimeStamp + 3000L", "var_name": "lastUpdateTimeStamp3"}, {"original_string": "@Autowired\n    private IMetatableService service;", "modifier": "@Autowired\n    private", "type": "IMetatableService", "declarator": "service", "var_name": "service"}, {"original_string": "@PersistenceContext\n    private EntityManager em;", "modifier": "@PersistenceContext\n    private", "type": "EntityManager", "declarator": "em", "var_name": "em"}], "file": "storage-service/src/test/java/com/stnetix/ariaddna/persistence/services/MetatableServiceImplTest.java"}, "test_case": {"identifier": "saveMetatable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void saveMetatable() throws Exception {\n\n        MetatableDTO metatableDTO = TestHelper\n                .getMetatableDTO(metatableSnapShot2Uuid, MavenUtil.getCurrentVersion(),\n                        MetatableType.MASTER, lastUpdateTimeStamp);\n\n        MetatableDTO savedMetatableDTO = service.saveMetatable(metatableDTO);\n\n        assertNotNull(savedMetatableDTO);\n\n    }", "signature": "void saveMetatable()", "full_signature": "@Test public void saveMetatable()", "class_method_signature": "MetatableServiceImplTest.saveMetatable()", "testcase": true, "constructor": false, "invocations": ["getMetatableDTO", "getCurrentVersion", "saveMetatable", "assertNotNull"]}, "focal_class": {"identifier": "MetatableServiceImpl", "superclass": "", "interfaces": "implements IMetatableService", "fields": [{"original_string": "private MetatableRepository repository;", "modifier": "private", "type": "MetatableRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "private MetatableTransformer transformer;", "modifier": "private", "type": "MetatableTransformer", "declarator": "transformer", "var_name": "transformer"}], "methods": [{"identifier": "MetatableServiceImpl", "parameters": "()", "modifiers": "public", "return": "", "signature": " MetatableServiceImpl()", "full_signature": "public  MetatableServiceImpl()", "class_method_signature": "MetatableServiceImpl.MetatableServiceImpl()", "testcase": false, "constructor": true}, {"identifier": "getMetatableMaster", "parameters": "(String metatableUuid)", "modifiers": "@Override public", "return": "MetatableDTO", "signature": "MetatableDTO getMetatableMaster(String metatableUuid)", "full_signature": "@Override public MetatableDTO getMetatableMaster(String metatableUuid)", "class_method_signature": "MetatableServiceImpl.getMetatableMaster(String metatableUuid)", "testcase": false, "constructor": false}, {"identifier": "saveMetatable", "parameters": "(MetatableDTO metatable)", "modifiers": "@Override public", "return": "MetatableDTO", "signature": "MetatableDTO saveMetatable(MetatableDTO metatable)", "full_signature": "@Override public MetatableDTO saveMetatable(MetatableDTO metatable)", "class_method_signature": "MetatableServiceImpl.saveMetatable(MetatableDTO metatable)", "testcase": false, "constructor": false}, {"identifier": "setRepository", "parameters": "(MetatableRepository repository)", "modifiers": "@Autowired public", "return": "void", "signature": "void setRepository(MetatableRepository repository)", "full_signature": "@Autowired public void setRepository(MetatableRepository repository)", "class_method_signature": "MetatableServiceImpl.setRepository(MetatableRepository repository)", "testcase": false, "constructor": false}], "file": "storage-service/src/main/java/com/stnetix/ariaddna/persistence/services/MetatableServiceImpl.java"}, "focal_method": {"identifier": "saveMetatable", "parameters": "(MetatableDTO metatable)", "modifiers": "@Override public", "return": "MetatableDTO", "body": "@Override\n    public MetatableDTO saveMetatable(MetatableDTO metatable) {\n        return transformer\n                .metafileEntityToDTO(repository.save(transformer.metafileDTOtoEntity(metatable)));\n    }", "signature": "MetatableDTO saveMetatable(MetatableDTO metatable)", "full_signature": "@Override public MetatableDTO saveMetatable(MetatableDTO metatable)", "class_method_signature": "MetatableServiceImpl.saveMetatable(MetatableDTO metatable)", "testcase": false, "constructor": false, "invocations": ["metafileEntityToDTO", "save", "metafileDTOtoEntity"]}, "repository": {"repo_id": 73354878, "url": "https://github.com/StnetixDevTeam/ariADDna", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 11, "size": 971, "license": "licensed"}}