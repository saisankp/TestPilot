{"test_class": {"identifier": "DataTreeChangeListenerProxyTest", "superclass": "extends AbstractActorTest", "interfaces": "", "fields": [{"original_string": "private final DOMDataTreeChangeListener mockListener = mock(DOMDataTreeChangeListener.class);", "modifier": "private final", "type": "DOMDataTreeChangeListener", "declarator": "mockListener = mock(DOMDataTreeChangeListener.class)", "var_name": "mockListener"}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/datastore/DataTreeChangeListenerProxyTest.java"}, "test_case": {"identifier": "testLocalShardNotFound", "parameters": "()", "modifiers": "@Test(timeout = 10000) public", "return": "void", "body": "@Test(timeout = 10000)\n    public void testLocalShardNotFound() {\n        final TestKit kit = new TestKit(getSystem());\n        ActorUtils actorUtils = new ActorUtils(getSystem(), kit.getRef(), mock(ClusterWrapper.class),\n            mock(Configuration.class));\n\n        final YangInstanceIdentifier path = YangInstanceIdentifier.of(TestModel.TEST_QNAME);\n        final DataTreeChangeListenerProxy<DOMDataTreeChangeListener> proxy = new DataTreeChangeListenerProxy<>(\n                actorUtils, mockListener, path);\n\n        new Thread(() -> proxy.init(\"shard-1\")).start();\n\n        Duration timeout = Duration.ofSeconds(5);\n        FindLocalShard findLocalShard = kit.expectMsgClass(timeout, FindLocalShard.class);\n        assertEquals(\"getShardName\", \"shard-1\", findLocalShard.getShardName());\n\n        kit.reply(new LocalShardNotFound(\"shard-1\"));\n\n        kit.expectNoMessage(Duration.ofSeconds(1));\n\n        proxy.close();\n    }", "signature": "void testLocalShardNotFound()", "full_signature": "@Test(timeout = 10000) public void testLocalShardNotFound()", "class_method_signature": "DataTreeChangeListenerProxyTest.testLocalShardNotFound()", "testcase": true, "constructor": false, "invocations": ["getSystem", "getSystem", "getRef", "mock", "mock", "of", "start", "init", "ofSeconds", "expectMsgClass", "assertEquals", "getShardName", "reply", "expectNoMessage", "ofSeconds", "close"]}, "focal_class": {"identifier": "DataTreeChangeListenerProxy", "superclass": "extends AbstractListenerRegistration<T>", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DataTreeChangeListenerProxy.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DataTreeChangeListenerProxy.class)", "var_name": "LOG"}, {"original_string": "private final ActorRef dataChangeListenerActor;", "modifier": "private final", "type": "ActorRef", "declarator": "dataChangeListenerActor", "var_name": "dataChangeListenerActor"}, {"original_string": "private final ActorUtils actorUtils;", "modifier": "private final", "type": "ActorUtils", "declarator": "actorUtils", "var_name": "actorUtils"}, {"original_string": "private final YangInstanceIdentifier registeredPath;", "modifier": "private final", "type": "YangInstanceIdentifier", "declarator": "registeredPath", "var_name": "registeredPath"}, {"original_string": "@GuardedBy(\"this\")\n    private ActorSelection listenerRegistrationActor;", "modifier": "@GuardedBy(\"this\")\n    private", "type": "ActorSelection", "declarator": "listenerRegistrationActor", "var_name": "listenerRegistrationActor"}], "methods": [{"identifier": "DataTreeChangeListenerProxy", "parameters": "(final ActorUtils actorUtils, final T listener,\n            final YangInstanceIdentifier registeredPath)", "modifiers": "", "return": "", "signature": " DataTreeChangeListenerProxy(final ActorUtils actorUtils, final T listener,\n            final YangInstanceIdentifier registeredPath)", "full_signature": "  DataTreeChangeListenerProxy(final ActorUtils actorUtils, final T listener,\n            final YangInstanceIdentifier registeredPath)", "class_method_signature": "DataTreeChangeListenerProxy.DataTreeChangeListenerProxy(final ActorUtils actorUtils, final T listener,\n            final YangInstanceIdentifier registeredPath)", "testcase": false, "constructor": true}, {"identifier": "removeRegistration", "parameters": "()", "modifiers": "@Override protected synchronized", "return": "void", "signature": "void removeRegistration()", "full_signature": "@Override protected synchronized void removeRegistration()", "class_method_signature": "DataTreeChangeListenerProxy.removeRegistration()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(final String shardName)", "modifiers": "", "return": "void", "signature": "void init(final String shardName)", "full_signature": " void init(final String shardName)", "class_method_signature": "DataTreeChangeListenerProxy.init(final String shardName)", "testcase": false, "constructor": false}, {"identifier": "setListenerRegistrationActor", "parameters": "(final ActorSelection actor)", "modifiers": "@SuppressFBWarnings(value = \"UPM_UNCALLED_PRIVATE_METHOD\", justification = \"https://github.com/spotbugs/spotbugs/issues/811\") private", "return": "void", "signature": "void setListenerRegistrationActor(final ActorSelection actor)", "full_signature": "@SuppressFBWarnings(value = \"UPM_UNCALLED_PRIVATE_METHOD\", justification = \"https://github.com/spotbugs/spotbugs/issues/811\") private void setListenerRegistrationActor(final ActorSelection actor)", "class_method_signature": "DataTreeChangeListenerProxy.setListenerRegistrationActor(final ActorSelection actor)", "testcase": false, "constructor": false}, {"identifier": "doRegistration", "parameters": "(final ActorRef shard)", "modifiers": "@SuppressFBWarnings(value = \"UPM_UNCALLED_PRIVATE_METHOD\", justification = \"https://github.com/spotbugs/spotbugs/issues/811\") private", "return": "void", "signature": "void doRegistration(final ActorRef shard)", "full_signature": "@SuppressFBWarnings(value = \"UPM_UNCALLED_PRIVATE_METHOD\", justification = \"https://github.com/spotbugs/spotbugs/issues/811\") private void doRegistration(final ActorRef shard)", "class_method_signature": "DataTreeChangeListenerProxy.doRegistration(final ActorRef shard)", "testcase": false, "constructor": false}, {"identifier": "getListenerRegistrationActor", "parameters": "()", "modifiers": "@VisibleForTesting synchronized", "return": "ActorSelection", "signature": "ActorSelection getListenerRegistrationActor()", "full_signature": "@VisibleForTesting synchronized ActorSelection getListenerRegistrationActor()", "class_method_signature": "DataTreeChangeListenerProxy.getListenerRegistrationActor()", "testcase": false, "constructor": false}, {"identifier": "getDataChangeListenerActor", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "ActorRef", "signature": "ActorRef getDataChangeListenerActor()", "full_signature": "@VisibleForTesting ActorRef getDataChangeListenerActor()", "class_method_signature": "DataTreeChangeListenerProxy.getDataChangeListenerActor()", "testcase": false, "constructor": false}, {"identifier": "logContext", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String logContext()", "full_signature": "private String logContext()", "class_method_signature": "DataTreeChangeListenerProxy.logContext()", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/DataTreeChangeListenerProxy.java"}, "focal_method": {"identifier": "init", "parameters": "(final String shardName)", "modifiers": "", "return": "void", "body": "void init(final String shardName) {\n        Future<ActorRef> findFuture = actorUtils.findLocalShardAsync(shardName);\n        findFuture.onComplete(new OnComplete<ActorRef>() {\n            @Override\n            public void onComplete(final Throwable failure, final ActorRef shard) {\n                if (failure instanceof LocalShardNotFoundException) {\n                    LOG.debug(\"{}: No local shard found for {} - DataTreeChangeListener {} at path {} \"\n                            + \"cannot be registered\", logContext(), shardName, getInstance(), registeredPath);\n                } else if (failure != null) {\n                    LOG.error(\"{}: Failed to find local shard {} - DataTreeChangeListener {} at path {} \"\n                            + \"cannot be registered\", logContext(), shardName, getInstance(), registeredPath,\n                            failure);\n                } else {\n                    doRegistration(shard);\n                }\n            }\n        }, actorUtils.getClientDispatcher());\n    }", "signature": "void init(final String shardName)", "full_signature": " void init(final String shardName)", "class_method_signature": "DataTreeChangeListenerProxy.init(final String shardName)", "testcase": false, "constructor": false, "invocations": ["findLocalShardAsync", "onComplete", "debug", "logContext", "getInstance", "error", "logContext", "getInstance", "doRegistration", "getClientDispatcher"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}