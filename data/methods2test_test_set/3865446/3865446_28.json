{"test_class": {"identifier": "StochasticUniversalSamplingSelectionOperatorTest", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "protected StochasticUniversalSamplingSelectionOperator operator;", "modifier": "protected", "type": "StochasticUniversalSamplingSelectionOperator", "declarator": "operator", "var_name": "operator"}, {"original_string": "Individual[] inputIndividuals;", "modifier": "", "type": "Individual[]", "declarator": "inputIndividuals", "var_name": "inputIndividuals"}], "file": "jcool/benchmark/src/test/java/cz/cvut/felk/cig/jcool/benchmark/method/evolutionary/operators/selection/StochasticUniversalSamplingSelectionOperatorTest.java"}, "test_case": {"identifier": "testSelectWinners1", "parameters": "()", "modifiers": "@Test // selects 3 Individuals, test whether it hits inputIndividual[2] whose probability is very low 1/15 th public", "return": "void", "body": "@Test\n    // selects 3 Individuals, test whether it hits inputIndividual[2] whose probability is very low 1/15 th\n    public void testSelectWinners1() throws Exception {\n        this.operator.setIndividualsPerPopulation(3);\n        double[] accumulatedProbabilities = this.operator.makeAccumulatedProbabilities(this.inputIndividuals);\n\n        List<Individual> winners = this.operator.selectWinners(this.inputIndividuals, accumulatedProbabilities);\n        assertEquals(3, winners.size());\n        assertSame(this.inputIndividuals[0], winners.get(0));\n        assertSame(this.inputIndividuals[2], winners.get(1));\n        assertSame(this.inputIndividuals[3], winners.get(2));\n    }", "signature": "void testSelectWinners1()", "full_signature": "@Test // selects 3 Individuals, test whether it hits inputIndividual[2] whose probability is very low 1/15 th public void testSelectWinners1()", "class_method_signature": "StochasticUniversalSamplingSelectionOperatorTest.testSelectWinners1()", "testcase": true, "constructor": false, "invocations": ["setIndividualsPerPopulation", "makeAccumulatedProbabilities", "selectWinners", "assertEquals", "size", "assertSame", "get", "assertSame", "get", "assertSame", "get"]}, "focal_class": {"identifier": "StochasticUniversalSamplingSelectionOperator", "superclass": "extends FitnessProportionateSelectionOperator", "interfaces": "", "fields": [], "methods": [{"identifier": "selectWinners", "parameters": "(Individual[] inputIndividuals, double[] accumulatedProbabilities)", "modifiers": "@Override protected", "return": "List<Individual>", "signature": "List<Individual> selectWinners(Individual[] inputIndividuals, double[] accumulatedProbabilities)", "full_signature": "@Override protected List<Individual> selectWinners(Individual[] inputIndividuals, double[] accumulatedProbabilities)", "class_method_signature": "StochasticUniversalSamplingSelectionOperator.selectWinners(Individual[] inputIndividuals, double[] accumulatedProbabilities)", "testcase": false, "constructor": false}], "file": "jcool/benchmark/src/main/java/cz/cvut/felk/cig/jcool/benchmark/method/evolutionary/operators/selection/StochasticUniversalSamplingSelectionOperator.java"}, "focal_method": {"identifier": "selectWinners", "parameters": "(Individual[] inputIndividuals, double[] accumulatedProbabilities)", "modifiers": "@Override protected", "return": "List<Individual>", "body": "@Override\n    protected List<Individual> selectWinners(Individual[] inputIndividuals, double[] accumulatedProbabilities) {\n        int resultSize = this.outputArity * this.individualsPerPopulation;\n        List<Individual> resultingIndividuals = new ArrayList<Individual>(resultSize);\n        double stepSize = 1.0 / resultSize;\n        double fraction = this.randomGenerator.nextDouble(0.0, stepSize);\n        int probabilitiesIndex = 0;\n        for (int currentStep = 0; currentStep < resultSize; currentStep++){\n            double currentProbability = stepSize * currentStep + fraction;\n            // select first individual which accumulated probability is bigger or equal to currentProbability\n            while (true){\n                if (accumulatedProbabilities[probabilitiesIndex] >= currentProbability){\n                    resultingIndividuals.add(inputIndividuals[probabilitiesIndex]);\n                    break;\n                } else {\n                    probabilitiesIndex++; // increase only if not selected - to prevent bad behaviour when Individuals probability overlaps more than one interval\n                }\n            }\n        }\n        return resultingIndividuals;\n    }", "signature": "List<Individual> selectWinners(Individual[] inputIndividuals, double[] accumulatedProbabilities)", "full_signature": "@Override protected List<Individual> selectWinners(Individual[] inputIndividuals, double[] accumulatedProbabilities)", "class_method_signature": "StochasticUniversalSamplingSelectionOperator.selectWinners(Individual[] inputIndividuals, double[] accumulatedProbabilities)", "testcase": false, "constructor": false, "invocations": ["nextDouble", "add"]}, "repository": {"repo_id": 3865446, "url": "https://github.com/dhonza/JCOOL", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 415, "license": "licensed"}}