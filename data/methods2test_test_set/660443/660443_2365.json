{"test_class": {"identifier": "StructureResonanceGeneratorTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "private final static IChemObjectBuilder builder = SilentChemObjectBuilder.getInstance();", "modifier": "private final static", "type": "IChemObjectBuilder", "declarator": "builder = SilentChemObjectBuilder.getInstance()", "var_name": "builder"}, {"original_string": "LonePairElectronChecker                 lpcheck = new LonePairElectronChecker();", "modifier": "", "type": "LonePairElectronChecker", "declarator": "lpcheck = new LonePairElectronChecker()", "var_name": "lpcheck"}], "file": "base/reaction/src/test/java/org/openscience/cdk/tools/StructureResonanceGeneratorTest.java"}, "test_case": {"identifier": "testPreservingAromaticity", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPreservingAromaticity() throws Exception {\n\n        IAtomContainer molecule = builder.newInstance(IAtomContainer.class);\n        molecule.addAtom(builder.newInstance(IAtom.class, \"F\"));\n        molecule.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        molecule.addBond(0, 1, IBond.Order.SINGLE);\n        molecule.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        molecule.addBond(1, 2, IBond.Order.DOUBLE);\n        molecule.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        molecule.addBond(2, 3, IBond.Order.SINGLE);\n        molecule.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        molecule.addBond(3, 4, IBond.Order.DOUBLE);\n        molecule.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        molecule.addBond(4, 5, IBond.Order.SINGLE);\n        molecule.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        molecule.addBond(5, 6, IBond.Order.DOUBLE);\n        molecule.addBond(6, 1, IBond.Order.SINGLE);\n\n        addExplicitHydrogens(molecule);\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(molecule);\n        lpcheck.saturate(molecule);\n\n        boolean isAromatic = Aromaticity.cdkLegacy().apply(molecule);\n        Assert.assertTrue(\"Molecule is expected to be marked aromatic!\", isAromatic);\n\n        Assert.assertTrue(\"Bond is expected to be marked aromatic!\",\n                molecule.getBond(1).getFlag(CDKConstants.ISAROMATIC));\n        Assert.assertTrue(\"Bond is expected to be marked aromatic!\",\n                molecule.getBond(2).getFlag(CDKConstants.ISAROMATIC));\n        Assert.assertTrue(\"Bond is expected to be marked aromatic!\",\n                molecule.getBond(3).getFlag(CDKConstants.ISAROMATIC));\n        Assert.assertTrue(\"Bond is expected to be marked aromatic!\",\n                molecule.getBond(4).getFlag(CDKConstants.ISAROMATIC));\n        Assert.assertTrue(\"Bond is expected to be marked aromatic!\",\n                molecule.getBond(5).getFlag(CDKConstants.ISAROMATIC));\n        Assert.assertTrue(\"Bond is expected to be marked aromatic!\",\n                molecule.getBond(6).getFlag(CDKConstants.ISAROMATIC));\n\n        StructureResonanceGenerator gRI = new StructureResonanceGenerator(false);\n        IAtomContainerSet setOfMolecules = gRI.getStructures(molecule);\n\n        Assert.assertEquals(5, setOfMolecules.getAtomContainerCount());\n\n        IAtomContainer prod1 = setOfMolecules.getAtomContainer(1);\n        Assert.assertTrue(\"Bond is expected to be marked aromatic!\", prod1.getBond(1).getFlag(CDKConstants.ISAROMATIC));\n        Assert.assertTrue(\"Bond is expected to be marked aromatic!\", prod1.getBond(2).getFlag(CDKConstants.ISAROMATIC));\n        Assert.assertTrue(\"Bond is expected to be marked aromatic!\", prod1.getBond(3).getFlag(CDKConstants.ISAROMATIC));\n        Assert.assertTrue(\"Bond is expected to be marked aromatic!\", prod1.getBond(4).getFlag(CDKConstants.ISAROMATIC));\n        Assert.assertTrue(\"Bond is expected to be marked aromatic!\", prod1.getBond(5).getFlag(CDKConstants.ISAROMATIC));\n        Assert.assertTrue(\"Bond is expected to be marked aromatic!\", prod1.getBond(6).getFlag(CDKConstants.ISAROMATIC));\n        IAtomContainer prod2 = setOfMolecules.getAtomContainer(2);\n        Assert.assertTrue(\"Bond is expected to be marked aromatic!\", prod2.getBond(1).getFlag(CDKConstants.ISAROMATIC));\n        Assert.assertTrue(\"Bond is expected to be marked aromatic!\", prod2.getBond(2).getFlag(CDKConstants.ISAROMATIC));\n        Assert.assertTrue(\"Bond is expected to be marked aromatic!\", prod2.getBond(3).getFlag(CDKConstants.ISAROMATIC));\n        Assert.assertTrue(\"Bond is expected to be marked aromatic!\", prod2.getBond(4).getFlag(CDKConstants.ISAROMATIC));\n        Assert.assertTrue(\"Bond is expected to be marked aromatic!\", prod2.getBond(5).getFlag(CDKConstants.ISAROMATIC));\n        Assert.assertTrue(\"Bond is expected to be marked aromatic!\", prod2.getBond(6).getFlag(CDKConstants.ISAROMATIC));\n        IAtomContainer prod3 = setOfMolecules.getAtomContainer(3);\n        Assert.assertTrue(\"Bond is expected to be marked aromatic!\", prod3.getBond(1).getFlag(CDKConstants.ISAROMATIC));\n        Assert.assertTrue(\"Bond is expected to be marked aromatic!\", prod3.getBond(2).getFlag(CDKConstants.ISAROMATIC));\n        Assert.assertTrue(\"Bond is expected to be marked aromatic!\", prod3.getBond(3).getFlag(CDKConstants.ISAROMATIC));\n        Assert.assertTrue(\"Bond is expected to be marked aromatic!\", prod3.getBond(4).getFlag(CDKConstants.ISAROMATIC));\n        Assert.assertTrue(\"Bond is expected to be marked aromatic!\", prod3.getBond(5).getFlag(CDKConstants.ISAROMATIC));\n        Assert.assertTrue(\"Bond is expected to be marked aromatic!\", prod3.getBond(6).getFlag(CDKConstants.ISAROMATIC));\n\n    }", "signature": "void testPreservingAromaticity()", "full_signature": "@Test public void testPreservingAromaticity()", "class_method_signature": "StructureResonanceGeneratorTest.testPreservingAromaticity()", "testcase": true, "constructor": false, "invocations": ["newInstance", "addAtom", "newInstance", "addAtom", "newInstance", "addBond", "addAtom", "newInstance", "addBond", "addAtom", "newInstance", "addBond", "addAtom", "newInstance", "addBond", "addAtom", "newInstance", "addBond", "addAtom", "newInstance", "addBond", "addBond", "addExplicitHydrogens", "percieveAtomTypesAndConfigureAtoms", "saturate", "apply", "cdkLegacy", "assertTrue", "assertTrue", "getFlag", "getBond", "assertTrue", "getFlag", "getBond", "assertTrue", "getFlag", "getBond", "assertTrue", "getFlag", "getBond", "assertTrue", "getFlag", "getBond", "assertTrue", "getFlag", "getBond", "getStructures", "assertEquals", "getAtomContainerCount", "getAtomContainer", "assertTrue", "getFlag", "getBond", "assertTrue", "getFlag", "getBond", "assertTrue", "getFlag", "getBond", "assertTrue", "getFlag", "getBond", "assertTrue", "getFlag", "getBond", "assertTrue", "getFlag", "getBond", "getAtomContainer", "assertTrue", "getFlag", "getBond", "assertTrue", "getFlag", "getBond", "assertTrue", "getFlag", "getBond", "assertTrue", "getFlag", "getBond", "assertTrue", "getFlag", "getBond", "assertTrue", "getFlag", "getBond", "getAtomContainer", "assertTrue", "getFlag", "getBond", "assertTrue", "getFlag", "getBond", "assertTrue", "getFlag", "getBond", "assertTrue", "getFlag", "getBond", "assertTrue", "getFlag", "getBond", "assertTrue", "getFlag", "getBond"]}, "focal_class": {"identifier": "StructureResonanceGenerator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ILoggingTool           logger        = LoggingToolFactory\n                                                         .createLoggingTool(StructureResonanceGenerator.class);", "modifier": "private", "type": "ILoggingTool", "declarator": "logger        = LoggingToolFactory\n                                                         .createLoggingTool(StructureResonanceGenerator.class)", "var_name": "logger"}, {"original_string": "private List<IReactionProcess> reactionsList = new ArrayList<IReactionProcess>();", "modifier": "private", "type": "List<IReactionProcess>", "declarator": "reactionsList = new ArrayList<IReactionProcess>()", "var_name": "reactionsList"}, {"original_string": "private boolean                lookingSymmetry;", "modifier": "private", "type": "boolean", "declarator": "lookingSymmetry", "var_name": "lookingSymmetry"}, {"original_string": "private int                    maxStructures = 50;", "modifier": "private", "type": "int", "declarator": "maxStructures = 50", "var_name": "maxStructures"}], "methods": [{"identifier": "StructureResonanceGenerator", "parameters": "()", "modifiers": "public", "return": "", "signature": " StructureResonanceGenerator()", "full_signature": "public  StructureResonanceGenerator()", "class_method_signature": "StructureResonanceGenerator.StructureResonanceGenerator()", "testcase": false, "constructor": true}, {"identifier": "StructureResonanceGenerator", "parameters": "(boolean lookingSymmetry)", "modifiers": "public", "return": "", "signature": " StructureResonanceGenerator(boolean lookingSymmetry)", "full_signature": "public  StructureResonanceGenerator(boolean lookingSymmetry)", "class_method_signature": "StructureResonanceGenerator.StructureResonanceGenerator(boolean lookingSymmetry)", "testcase": false, "constructor": true}, {"identifier": "setReactions", "parameters": "(List<IReactionProcess> newReactionsList)", "modifiers": "public", "return": "void", "signature": "void setReactions(List<IReactionProcess> newReactionsList)", "full_signature": "public void setReactions(List<IReactionProcess> newReactionsList)", "class_method_signature": "StructureResonanceGenerator.setReactions(List<IReactionProcess> newReactionsList)", "testcase": false, "constructor": false}, {"identifier": "getReactions", "parameters": "()", "modifiers": "public", "return": "List<IReactionProcess>", "signature": "List<IReactionProcess> getReactions()", "full_signature": "public List<IReactionProcess> getReactions()", "class_method_signature": "StructureResonanceGenerator.getReactions()", "testcase": false, "constructor": false}, {"identifier": "setMaximalStructures", "parameters": "(int maxStruct)", "modifiers": "public", "return": "void", "signature": "void setMaximalStructures(int maxStruct)", "full_signature": "public void setMaximalStructures(int maxStruct)", "class_method_signature": "StructureResonanceGenerator.setMaximalStructures(int maxStruct)", "testcase": false, "constructor": false}, {"identifier": "getMaximalStructures", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaximalStructures()", "full_signature": "public int getMaximalStructures()", "class_method_signature": "StructureResonanceGenerator.getMaximalStructures()", "testcase": false, "constructor": false}, {"identifier": "setDefaultReactions", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void setDefaultReactions()", "full_signature": "public void setDefaultReactions()", "class_method_signature": "StructureResonanceGenerator.setDefaultReactions()", "testcase": false, "constructor": false}, {"identifier": "callDefaultReactions", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void callDefaultReactions()", "full_signature": "private void callDefaultReactions()", "class_method_signature": "StructureResonanceGenerator.callDefaultReactions()", "testcase": false, "constructor": false}, {"identifier": "getStructures", "parameters": "(IAtomContainer molecule)", "modifiers": "public", "return": "IAtomContainerSet", "signature": "IAtomContainerSet getStructures(IAtomContainer molecule)", "full_signature": "public IAtomContainerSet getStructures(IAtomContainer molecule)", "class_method_signature": "StructureResonanceGenerator.getStructures(IAtomContainer molecule)", "testcase": false, "constructor": false}, {"identifier": "getContainers", "parameters": "(IAtomContainer molecule)", "modifiers": "public", "return": "IAtomContainerSet", "signature": "IAtomContainerSet getContainers(IAtomContainer molecule)", "full_signature": "public IAtomContainerSet getContainers(IAtomContainer molecule)", "class_method_signature": "StructureResonanceGenerator.getContainers(IAtomContainer molecule)", "testcase": false, "constructor": false}, {"identifier": "getContainer", "parameters": "(IAtomContainer molecule, IAtom atom)", "modifiers": "public", "return": "IAtomContainer", "signature": "IAtomContainer getContainer(IAtomContainer molecule, IAtom atom)", "full_signature": "public IAtomContainer getContainer(IAtomContainer molecule, IAtom atom)", "class_method_signature": "StructureResonanceGenerator.getContainer(IAtomContainer molecule, IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "getContainer", "parameters": "(IAtomContainer molecule, IBond bond)", "modifiers": "public", "return": "IAtomContainer", "signature": "IAtomContainer getContainer(IAtomContainer molecule, IBond bond)", "full_signature": "public IAtomContainer getContainer(IAtomContainer molecule, IBond bond)", "class_method_signature": "StructureResonanceGenerator.getContainer(IAtomContainer molecule, IBond bond)", "testcase": false, "constructor": false}, {"identifier": "existAC", "parameters": "(IAtomContainerSet set, IAtomContainer atomContainer)", "modifiers": "private", "return": "boolean", "signature": "boolean existAC(IAtomContainerSet set, IAtomContainer atomContainer)", "full_signature": "private boolean existAC(IAtomContainerSet set, IAtomContainer atomContainer)", "class_method_signature": "StructureResonanceGenerator.existAC(IAtomContainerSet set, IAtomContainer atomContainer)", "testcase": false, "constructor": false}], "file": "base/reaction/src/main/java/org/openscience/cdk/tools/StructureResonanceGenerator.java"}, "focal_method": {"identifier": "getStructures", "parameters": "(IAtomContainer molecule)", "modifiers": "public", "return": "IAtomContainerSet", "body": "public IAtomContainerSet getStructures(IAtomContainer molecule) {\n        int countStructure = 0;\n        IAtomContainerSet setOfMol = molecule.getBuilder().newInstance(IAtomContainerSet.class);\n        setOfMol.addAtomContainer(molecule);\n\n        for (int i = 0; i < setOfMol.getAtomContainerCount(); i++) {\n            IAtomContainer mol = setOfMol.getAtomContainer(i);\n            for (IReactionProcess aReactionsList : reactionsList) {\n                IReactionProcess reaction = aReactionsList;\n                IAtomContainerSet setOfReactants = molecule.getBuilder().newInstance(IAtomContainerSet.class);\n                setOfReactants.addAtomContainer(mol);\n                try {\n                    IReactionSet setOfReactions = reaction.initiate(setOfReactants, null);\n                    if (setOfReactions.getReactionCount() != 0)\n                        for (int k = 0; k < setOfReactions.getReactionCount(); k++)\n                            for (int j = 0; j < setOfReactions.getReaction(k).getProducts().getAtomContainerCount(); j++) {\n                                IAtomContainer product = setOfReactions.getReaction(k).getProducts()\n                                        .getAtomContainer(j);\n                                if (!existAC(setOfMol, product)) {\n                                    setOfMol.addAtomContainer(product);\n                                    countStructure++;\n                                    if (countStructure > maxStructures) return setOfMol;\n                                }\n                            }\n                } catch (CDKException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return setOfMol;\n    }", "signature": "IAtomContainerSet getStructures(IAtomContainer molecule)", "full_signature": "public IAtomContainerSet getStructures(IAtomContainer molecule)", "class_method_signature": "StructureResonanceGenerator.getStructures(IAtomContainer molecule)", "testcase": false, "constructor": false, "invocations": ["newInstance", "getBuilder", "addAtomContainer", "getAtomContainerCount", "getAtomContainer", "newInstance", "getBuilder", "addAtomContainer", "initiate", "getReactionCount", "getReactionCount", "getAtomContainerCount", "getProducts", "getReaction", "getAtomContainer", "getProducts", "getReaction", "existAC", "addAtomContainer", "printStackTrace"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}