{"test_class": {"identifier": "AbstractHtmlErrorHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static OutputStream outputStream;", "modifier": "private static", "type": "OutputStream", "declarator": "outputStream", "var_name": "outputStream"}, {"original_string": "private static HttpServletResponseImpl response;", "modifier": "private static", "type": "HttpServletResponseImpl", "declarator": "response", "var_name": "response"}], "file": "http/src/test/java/ro/polak/http/errorhandler/AbstractHtmlErrorHandlerTest.java"}, "test_case": {"identifier": "shouldServeBuiltinDocument", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldServeBuiltinDocument() throws Exception {\n        AbstractHtmlErrorHandler handler\n                = new SampleHtmlErrorHanlder(\"500\", \"MSG_TOKEN\", \"EXPLANATION_TOKEN\", null);\n        handler.serve(response);\n\n        assertThat(response.getStatus(), containsString(\"500\"));\n        assertThat(outputStream.toString(), containsString(\"MSG_TOKEN\"));\n        assertThat(outputStream.toString(), containsString(\"EXPLANATION_TOKEN\"));\n    }", "signature": "void shouldServeBuiltinDocument()", "full_signature": "@Test public void shouldServeBuiltinDocument()", "class_method_signature": "AbstractHtmlErrorHandlerTest.shouldServeBuiltinDocument()", "testcase": true, "constructor": false, "invocations": ["serve", "assertThat", "getStatus", "containsString", "assertThat", "toString", "containsString", "assertThat", "toString", "containsString"]}, "focal_class": {"identifier": "AbstractHtmlErrorHandler", "superclass": "extends AbstractPlainTextHttpErrorHandler", "interfaces": "", "fields": [{"original_string": "private final String errorDocumentPath;", "modifier": "private final", "type": "String", "declarator": "errorDocumentPath", "var_name": "errorDocumentPath"}, {"original_string": "private String explanation;", "modifier": "private", "type": "String", "declarator": "explanation", "var_name": "explanation"}], "methods": [{"identifier": "AbstractHtmlErrorHandler", "parameters": "(final String status,\n                                    final String message,\n                                    final String explanation,\n                                    final String errorDocumentPath)", "modifiers": "public", "return": "", "signature": " AbstractHtmlErrorHandler(final String status,\n                                    final String message,\n                                    final String explanation,\n                                    final String errorDocumentPath)", "full_signature": "public  AbstractHtmlErrorHandler(final String status,\n                                    final String message,\n                                    final String explanation,\n                                    final String errorDocumentPath)", "class_method_signature": "AbstractHtmlErrorHandler.AbstractHtmlErrorHandler(final String status,\n                                    final String message,\n                                    final String explanation,\n                                    final String errorDocumentPath)", "testcase": false, "constructor": true}, {"identifier": "setExplanation", "parameters": "(final String explanation)", "modifiers": "protected", "return": "void", "signature": "void setExplanation(final String explanation)", "full_signature": "protected void setExplanation(final String explanation)", "class_method_signature": "AbstractHtmlErrorHandler.setExplanation(final String explanation)", "testcase": false, "constructor": false}, {"identifier": "serve", "parameters": "(final HttpServletResponse response)", "modifiers": "@Override public", "return": "void", "signature": "void serve(final HttpServletResponse response)", "full_signature": "@Override public void serve(final HttpServletResponse response)", "class_method_signature": "AbstractHtmlErrorHandler.serve(final HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "serveDocument", "parameters": "(final HttpServletResponse response)", "modifiers": "private", "return": "void", "signature": "void serveDocument(final HttpServletResponse response)", "full_signature": "private void serveDocument(final HttpServletResponse response)", "class_method_signature": "AbstractHtmlErrorHandler.serveDocument(final HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "serveFile", "parameters": "(final HttpServletResponse response, final File file)", "modifiers": "private", "return": "void", "signature": "void serveFile(final HttpServletResponse response, final File file)", "full_signature": "private void serveFile(final HttpServletResponse response, final File file)", "class_method_signature": "AbstractHtmlErrorHandler.serveFile(final HttpServletResponse response, final File file)", "testcase": false, "constructor": false}], "file": "http/src/main/java/ro/polak/http/errorhandler/AbstractHtmlErrorHandler.java"}, "focal_method": {"identifier": "serve", "parameters": "(final HttpServletResponse response)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void serve(final HttpServletResponse response) throws IOException {\n        response.setStatus(getStatus());\n        response.setContentType(\"text/html\");\n\n        if (StringUtilities.isEmpty(errorDocumentPath)) {\n            serveDocument(response);\n        } else {\n            File file = new File(errorDocumentPath);\n            if (file.exists()) {\n                serveFile(response, file);\n            } else {\n                throw new IOException(getStatus() + \" occurred, specified error handler (\"\n                        + errorDocumentPath + \") was not found.\");\n            }\n        }\n    }", "signature": "void serve(final HttpServletResponse response)", "full_signature": "@Override public void serve(final HttpServletResponse response)", "class_method_signature": "AbstractHtmlErrorHandler.serve(final HttpServletResponse response)", "testcase": false, "constructor": false, "invocations": ["setStatus", "getStatus", "setContentType", "isEmpty", "serveDocument", "exists", "serveFile", "getStatus"]}, "repository": {"repo_id": 42557838, "url": "https://github.com/piotrpolak/android-http-server", "language": "Java", "is_fork": false, "fork_count": 41, "stargazer_count": 136, "size": 2000, "license": "licensed"}}