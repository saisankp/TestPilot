{"test_class": {"identifier": "VecmathUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "display/renderbasic/src/test/java/org/openscience/cdk/renderer/generators/standard/VecmathUtilTest.java"}, "test_case": {"identifier": "largestGapEast", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void largestGapEast() {\n        Vector2d vector = VecmathUtil.newVectorInLargestGap(Arrays\n                .asList(new Vector2d(1, 1), new Vector2d(1, -1), new Vector2d(-1, -1), new Vector2d(-1, 1),\n                        new Vector2d(-1, 0), new Vector2d(0, 1), new Vector2d(0, -1)));\n        assertThat(vector.x, closeTo(1, 0.01));\n        assertThat(vector.y, closeTo(0, 0.01));\n        assertThat(vector.length(), closeTo(1d, 0.01));\n    }", "signature": "void largestGapEast()", "full_signature": "@Test public void largestGapEast()", "class_method_signature": "VecmathUtilTest.largestGapEast()", "testcase": true, "constructor": false, "invocations": ["newVectorInLargestGap", "asList", "assertThat", "closeTo", "assertThat", "closeTo", "assertThat", "length", "closeTo"]}, "focal_class": {"identifier": "VecmathUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static double TAU = 2 * Math.PI;", "modifier": "private final static", "type": "double", "declarator": "TAU = 2 * Math.PI", "var_name": "TAU"}], "methods": [{"identifier": "VecmathUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " VecmathUtil()", "full_signature": "private  VecmathUtil()", "class_method_signature": "VecmathUtil.VecmathUtil()", "testcase": false, "constructor": true}, {"identifier": "toAwtPoint", "parameters": "(Point2d point)", "modifiers": "static", "return": "Point2D", "signature": "Point2D toAwtPoint(Point2d point)", "full_signature": "static Point2D toAwtPoint(Point2d point)", "class_method_signature": "VecmathUtil.toAwtPoint(Point2d point)", "testcase": false, "constructor": false}, {"identifier": "toVecmathPoint", "parameters": "(Point2D point)", "modifiers": "static", "return": "Point2d", "signature": "Point2d toVecmathPoint(Point2D point)", "full_signature": "static Point2d toVecmathPoint(Point2D point)", "class_method_signature": "VecmathUtil.toVecmathPoint(Point2D point)", "testcase": false, "constructor": false}, {"identifier": "newUnitVector", "parameters": "(final Tuple2d from, final Tuple2d to)", "modifiers": "static", "return": "Vector2d", "signature": "Vector2d newUnitVector(final Tuple2d from, final Tuple2d to)", "full_signature": "static Vector2d newUnitVector(final Tuple2d from, final Tuple2d to)", "class_method_signature": "VecmathUtil.newUnitVector(final Tuple2d from, final Tuple2d to)", "testcase": false, "constructor": false}, {"identifier": "newUnitVector", "parameters": "(final IAtom atom, final IBond bond)", "modifiers": "static", "return": "Vector2d", "signature": "Vector2d newUnitVector(final IAtom atom, final IBond bond)", "full_signature": "static Vector2d newUnitVector(final IAtom atom, final IBond bond)", "class_method_signature": "VecmathUtil.newUnitVector(final IAtom atom, final IBond bond)", "testcase": false, "constructor": false}, {"identifier": "newUnitVectors", "parameters": "(final IAtom fromAtom, final List<IAtom> toAtoms)", "modifiers": "static", "return": "List<Vector2d>", "signature": "List<Vector2d> newUnitVectors(final IAtom fromAtom, final List<IAtom> toAtoms)", "full_signature": "static List<Vector2d> newUnitVectors(final IAtom fromAtom, final List<IAtom> toAtoms)", "class_method_signature": "VecmathUtil.newUnitVectors(final IAtom fromAtom, final List<IAtom> toAtoms)", "testcase": false, "constructor": false}, {"identifier": "newPerpendicularVector", "parameters": "(final Vector2d vector)", "modifiers": "static", "return": "Vector2d", "signature": "Vector2d newPerpendicularVector(final Vector2d vector)", "full_signature": "static Vector2d newPerpendicularVector(final Vector2d vector)", "class_method_signature": "VecmathUtil.newPerpendicularVector(final Vector2d vector)", "testcase": false, "constructor": false}, {"identifier": "midpoint", "parameters": "(Point2d a, Point2d b)", "modifiers": "static", "return": "Point2d", "signature": "Point2d midpoint(Point2d a, Point2d b)", "full_signature": "static Point2d midpoint(Point2d a, Point2d b)", "class_method_signature": "VecmathUtil.midpoint(Point2d a, Point2d b)", "testcase": false, "constructor": false}, {"identifier": "scale", "parameters": "(final Tuple2d vector, final double factor)", "modifiers": "static", "return": "Vector2d", "signature": "Vector2d scale(final Tuple2d vector, final double factor)", "full_signature": "static Vector2d scale(final Tuple2d vector, final double factor)", "class_method_signature": "VecmathUtil.scale(final Tuple2d vector, final double factor)", "testcase": false, "constructor": false}, {"identifier": "sum", "parameters": "(final Tuple2d a, final Tuple2d b)", "modifiers": "static", "return": "Vector2d", "signature": "Vector2d sum(final Tuple2d a, final Tuple2d b)", "full_signature": "static Vector2d sum(final Tuple2d a, final Tuple2d b)", "class_method_signature": "VecmathUtil.sum(final Tuple2d a, final Tuple2d b)", "testcase": false, "constructor": false}, {"identifier": "negate", "parameters": "(final Tuple2d vector)", "modifiers": "static", "return": "Vector2d", "signature": "Vector2d negate(final Tuple2d vector)", "full_signature": "static Vector2d negate(final Tuple2d vector)", "class_method_signature": "VecmathUtil.negate(final Tuple2d vector)", "testcase": false, "constructor": false}, {"identifier": "intersection", "parameters": "(final Tuple2d p1, final Tuple2d d1, final Tuple2d p2, final Tuple2d d2)", "modifiers": "static", "return": "Point2d", "signature": "Point2d intersection(final Tuple2d p1, final Tuple2d d1, final Tuple2d p2, final Tuple2d d2)", "full_signature": "static Point2d intersection(final Tuple2d p1, final Tuple2d d1, final Tuple2d p2, final Tuple2d d2)", "class_method_signature": "VecmathUtil.intersection(final Tuple2d p1, final Tuple2d d1, final Tuple2d p2, final Tuple2d d2)", "testcase": false, "constructor": false}, {"identifier": "intersection", "parameters": "(final double x1, final double y1, final double x2, final double y2, final double x3,\n            final double y3, final double x4, final double y4)", "modifiers": "static", "return": "Point2d", "signature": "Point2d intersection(final double x1, final double y1, final double x2, final double y2, final double x3,\n            final double y3, final double x4, final double y4)", "full_signature": "static Point2d intersection(final double x1, final double y1, final double x2, final double y2, final double x3,\n            final double y3, final double x4, final double y4)", "class_method_signature": "VecmathUtil.intersection(final double x1, final double y1, final double x2, final double y2, final double x3,\n            final double y3, final double x4, final double y4)", "testcase": false, "constructor": false}, {"identifier": "adjacentLength", "parameters": "(Vector2d hypotenuse, Vector2d adjacent, double oppositeLength)", "modifiers": "static", "return": "double", "signature": "double adjacentLength(Vector2d hypotenuse, Vector2d adjacent, double oppositeLength)", "full_signature": "static double adjacentLength(Vector2d hypotenuse, Vector2d adjacent, double oppositeLength)", "class_method_signature": "VecmathUtil.adjacentLength(Vector2d hypotenuse, Vector2d adjacent, double oppositeLength)", "testcase": false, "constructor": false}, {"identifier": "average", "parameters": "(final Collection<Vector2d> vectors)", "modifiers": "static", "return": "Vector2d", "signature": "Vector2d average(final Collection<Vector2d> vectors)", "full_signature": "static Vector2d average(final Collection<Vector2d> vectors)", "class_method_signature": "VecmathUtil.average(final Collection<Vector2d> vectors)", "testcase": false, "constructor": false}, {"identifier": "getNearestVector", "parameters": "(final Vector2d reference, final List<Vector2d> vectors)", "modifiers": "static", "return": "Vector2d", "signature": "Vector2d getNearestVector(final Vector2d reference, final List<Vector2d> vectors)", "full_signature": "static Vector2d getNearestVector(final Vector2d reference, final List<Vector2d> vectors)", "class_method_signature": "VecmathUtil.getNearestVector(final Vector2d reference, final List<Vector2d> vectors)", "testcase": false, "constructor": false}, {"identifier": "getNearestVector", "parameters": "(Vector2d reference, IAtom fromAtom, List<IBond> bonds)", "modifiers": "static", "return": "Vector2d", "signature": "Vector2d getNearestVector(Vector2d reference, IAtom fromAtom, List<IBond> bonds)", "full_signature": "static Vector2d getNearestVector(Vector2d reference, IAtom fromAtom, List<IBond> bonds)", "class_method_signature": "VecmathUtil.getNearestVector(Vector2d reference, IAtom fromAtom, List<IBond> bonds)", "testcase": false, "constructor": false}, {"identifier": "extent", "parameters": "(Vector2d vector)", "modifiers": "static", "return": "double", "signature": "double extent(Vector2d vector)", "full_signature": "static double extent(Vector2d vector)", "class_method_signature": "VecmathUtil.extent(Vector2d vector)", "testcase": false, "constructor": false}, {"identifier": "extents", "parameters": "(final List<Vector2d> vectors)", "modifiers": "static", "return": "double[]", "signature": "double[] extents(final List<Vector2d> vectors)", "full_signature": "static double[] extents(final List<Vector2d> vectors)", "class_method_signature": "VecmathUtil.extents(final List<Vector2d> vectors)", "testcase": false, "constructor": false}, {"identifier": "newVectorInLargestGap", "parameters": "(final List<Vector2d> vectors)", "modifiers": "static", "return": "Vector2d", "signature": "Vector2d newVectorInLargestGap(final List<Vector2d> vectors)", "full_signature": "static Vector2d newVectorInLargestGap(final List<Vector2d> vectors)", "class_method_signature": "VecmathUtil.newVectorInLargestGap(final List<Vector2d> vectors)", "testcase": false, "constructor": false}], "file": "display/renderbasic/src/main/java/org/openscience/cdk/renderer/generators/standard/VecmathUtil.java"}, "focal_method": {"identifier": "newVectorInLargestGap", "parameters": "(final List<Vector2d> vectors)", "modifiers": "static", "return": "Vector2d", "body": "static Vector2d newVectorInLargestGap(final List<Vector2d> vectors) {\n\n        assert vectors.size() > 1;\n        final double[] extents = VecmathUtil.extents(vectors);\n        Arrays.sort(extents);\n\n        // find and store the index of the largest extent\n        double max = -1;\n        int index = -1;\n        for (int i = 0; i < vectors.size(); i++) {\n            double extent = extents[(i + 1) % vectors.size()] - extents[i];\n            if (extent < 0) extent += TAU;\n            if (extent > max) {\n                max = extent;\n                index = i;\n            }\n        }\n\n        assert index >= 0;\n\n        double mid = (max / 2);\n        double theta = extents[index] + mid;\n\n        return new Vector2d(Math.cos(theta), Math.sin(theta));\n    }", "signature": "Vector2d newVectorInLargestGap(final List<Vector2d> vectors)", "full_signature": "static Vector2d newVectorInLargestGap(final List<Vector2d> vectors)", "class_method_signature": "VecmathUtil.newVectorInLargestGap(final List<Vector2d> vectors)", "testcase": false, "constructor": false, "invocations": ["size", "extents", "sort", "size", "size", "cos", "sin"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}