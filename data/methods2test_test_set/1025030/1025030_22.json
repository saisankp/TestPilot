{"test_class": {"identifier": "GenericMigrationWrapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final File TEST_FILE_PATH = new File(\n\t    \"tests/test-files/images/vector/dia\");", "modifier": "private static final", "type": "File", "declarator": "TEST_FILE_PATH = new File(\n\t    \"tests/test-files/images/vector/dia\")", "var_name": "TEST_FILE_PATH"}, {"original_string": "private static final String TEST_FILE_NAME = \"Arrows_doublestraight_arrow2.dia\";", "modifier": "private static final", "type": "String", "declarator": "TEST_FILE_NAME = \"Arrows_doublestraight_arrow2.dia\"", "var_name": "TEST_FILE_NAME"}, {"original_string": "private final URI sourceFormatURI;", "modifier": "private final", "type": "URI", "declarator": "sourceFormatURI", "var_name": "sourceFormatURI"}, {"original_string": "private final URI destinationFormatURI;", "modifier": "private final", "type": "URI", "declarator": "destinationFormatURI", "var_name": "destinationFormatURI"}, {"original_string": "private GenericMigrationWrapper genericWrapper;", "modifier": "private", "type": "GenericMigrationWrapper", "declarator": "genericWrapper", "var_name": "genericWrapper"}, {"original_string": "final List<Parameter> testParameters = new ArrayList<Parameter>();", "modifier": "final", "type": "List<Parameter>", "declarator": "testParameters = new ArrayList<Parameter>()", "var_name": "testParameters"}], "file": "framework/generic/src/test/java/eu/planets_project/ifr/core/services/migration/genericwrapper1/GenericMigrationWrapperTest.java"}, "test_case": {"identifier": "testMigrateUsingTempFiles", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMigrateUsingTempFiles() throws Exception {\n\n\tMigrateResult migrationResult = this.genericWrapper.migrate(\n\t\tgetDigitalTestObject(), this.sourceFormatURI, this.destinationFormatURI,\n\t\tthis.testParameters);\n\n\tAssert.assertEquals(ServiceReport.Status.SUCCESS, migrationResult\n\t\t.getReport().getStatus());\n    }", "signature": "void testMigrateUsingTempFiles()", "full_signature": "@Test public void testMigrateUsingTempFiles()", "class_method_signature": "GenericMigrationWrapperTest.testMigrateUsingTempFiles()", "testcase": true, "constructor": false, "invocations": ["migrate", "getDigitalTestObject", "assertEquals", "getStatus", "getReport"]}, "focal_class": {"identifier": "GenericMigrationWrapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Logger log = Logger.getLogger(GenericMigrationWrapper.class.getName());", "modifier": "private", "type": "Logger", "declarator": "log = Logger.getLogger(GenericMigrationWrapper.class.getName())", "var_name": "log"}, {"original_string": "private MigrationPaths migrationPaths;", "modifier": "private", "type": "MigrationPaths", "declarator": "migrationPaths", "var_name": "migrationPaths"}, {"original_string": "private ServiceDescription serviceDescription;", "modifier": "private", "type": "ServiceDescription", "declarator": "serviceDescription", "var_name": "serviceDescription"}, {"original_string": "private boolean returnByReference;", "modifier": "private", "type": "boolean", "declarator": "returnByReference", "var_name": "returnByReference"}], "methods": [{"identifier": "GenericMigrationWrapper", "parameters": "(Document configuration, String canonicalName)", "modifiers": "public", "return": "", "signature": " GenericMigrationWrapper(Document configuration, String canonicalName)", "full_signature": "public  GenericMigrationWrapper(Document configuration, String canonicalName)", "class_method_signature": "GenericMigrationWrapper.GenericMigrationWrapper(Document configuration, String canonicalName)", "testcase": false, "constructor": true}, {"identifier": "migrate", "parameters": "(DigitalObject sourceObject, URI sourceFormat,\n                                 URI destinationFormat, List<Parameter> toolParameters)", "modifiers": "public", "return": "MigrateResult", "signature": "MigrateResult migrate(DigitalObject sourceObject, URI sourceFormat,\n                                 URI destinationFormat, List<Parameter> toolParameters)", "full_signature": "public MigrateResult migrate(DigitalObject sourceObject, URI sourceFormat,\n                                 URI destinationFormat, List<Parameter> toolParameters)", "class_method_signature": "GenericMigrationWrapper.migrate(DigitalObject sourceObject, URI sourceFormat,\n                                 URI destinationFormat, List<Parameter> toolParameters)", "testcase": false, "constructor": false}, {"identifier": "handleTempDestinationFile", "parameters": "(MigrationPath migrationPath,\n                                           File workfolder)", "modifiers": "private", "return": "void", "signature": "void handleTempDestinationFile(MigrationPath migrationPath,\n                                           File workfolder)", "full_signature": "private void handleTempDestinationFile(MigrationPath migrationPath,\n                                           File workfolder)", "class_method_signature": "GenericMigrationWrapper.handleTempDestinationFile(MigrationPath migrationPath,\n                                           File workfolder)", "testcase": false, "constructor": false}, {"identifier": "handleTempSourceFile", "parameters": "(MigrationPath migrationPath,\n                                      DigitalObject sourceObject,\n                                      File workfolder)", "modifiers": "private", "return": "void", "signature": "void handleTempSourceFile(MigrationPath migrationPath,\n                                      DigitalObject sourceObject,\n                                      File workfolder)", "full_signature": "private void handleTempSourceFile(MigrationPath migrationPath,\n                                      DigitalObject sourceObject,\n                                      File workfolder)", "class_method_signature": "GenericMigrationWrapper.handleTempSourceFile(MigrationPath migrationPath,\n                                      DigitalObject sourceObject,\n                                      File workfolder)", "testcase": false, "constructor": false}, {"identifier": "handleTempfiles", "parameters": "(MigrationPath migrationPath)", "modifiers": "private", "return": "File", "signature": "File handleTempfiles(MigrationPath migrationPath)", "full_signature": "private File handleTempfiles(MigrationPath migrationPath)", "class_method_signature": "GenericMigrationWrapper.handleTempfiles(MigrationPath migrationPath)", "testcase": false, "constructor": false}, {"identifier": "createTemp", "parameters": "(File workfolder, TempFile tempfile)", "modifiers": "private", "return": "File", "signature": "File createTemp(File workfolder, TempFile tempfile)", "full_signature": "private File createTemp(File workfolder, TempFile tempfile)", "class_method_signature": "GenericMigrationWrapper.createTemp(File workfolder, TempFile tempfile)", "testcase": false, "constructor": false}, {"identifier": "describe", "parameters": "()", "modifiers": "public", "return": "ServiceDescription", "signature": "ServiceDescription describe()", "full_signature": "public ServiceDescription describe()", "class_method_signature": "GenericMigrationWrapper.describe()", "testcase": false, "constructor": false}, {"identifier": "executeToolProcess", "parameters": "(ProcessRunner toolProcessRunner,\n                                             List<String> command, InputStream processStandardInput)", "modifiers": "private", "return": "ServiceReport", "signature": "ServiceReport executeToolProcess(ProcessRunner toolProcessRunner,\n                                             List<String> command, InputStream processStandardInput)", "full_signature": "private ServiceReport executeToolProcess(ProcessRunner toolProcessRunner,\n                                             List<String> command, InputStream processStandardInput)", "class_method_signature": "GenericMigrationWrapper.executeToolProcess(ProcessRunner toolProcessRunner,\n                                             List<String> command, InputStream processStandardInput)", "testcase": false, "constructor": false}], "file": "framework/generic/src/main/java/eu/planets_project/ifr/core/services/migration/genericwrapper1/GenericMigrationWrapper.java"}, "focal_method": {"identifier": "migrate", "parameters": "(DigitalObject sourceObject, URI sourceFormat,\n                                 URI destinationFormat, List<Parameter> toolParameters)", "modifiers": "public", "return": "MigrateResult", "body": "public MigrateResult migrate(DigitalObject sourceObject, URI sourceFormat,\n                                 URI destinationFormat, List<Parameter> toolParameters)\n            throws MigrationException, IOException {\n\n        /*\n         * - Validate that the proper parameters are set for the migration path\n         * identified by sourceFormat and destinationFormat\n         */\n        final MigrationPath migrationPath = migrationPaths\n                .getMigrationPath(sourceFormat, destinationFormat);\n\n        log.info(\"Found migrationpath from \"+sourceFormat+\" to \"+destinationFormat);\n\n        //If called with null parameters, use an empty list instead\n        if (toolParameters == null){\n            log.info(\"Called with null parameters\");\n            toolParameters = new ArrayList<Parameter>();\n        }\n\n\n        //make workfolder, and reserve filenames in this folder.\n        log.info(\"Making workfolder for migration\");\n        File workfolder = handleTempfiles(migrationPath);\n\n        //handle temp input file\n\n        if (migrationPath.useTempSourceFile()){\n            log.info(\"Migrationpath uses temp source file, reading digital object into file\");\n            handleTempSourceFile(migrationPath,sourceObject, workfolder);\n        }\n\n\n        //handle temp output file\n        if (migrationPath.useTempDestinationFile()){\n            log.info(\"Migrationpath uses temp destination path\");\n            handleTempDestinationFile(migrationPath,workfolder);\n        }\n\n\n        List<String> command = migrationPath.getCommandLine(toolParameters);\n        log.info(\"Command line found: \");\n        log.info(command.toString());\n\n\n        InputStream processStandardInput = null;\n        if (!migrationPath.useTempSourceFile()) {\n            //serve the file on standard input\n            processStandardInput = sourceObject.getContent().getInputStream();\n        } else {\n            //fine, is alreade written\n        }\n\n        //Execute the tool\n        final ProcessRunner toolProcessRunner = new ProcessRunner();\n        ServiceReport serviceReport = executeToolProcess(toolProcessRunner,\n                                                         command, processStandardInput);\n\n\n\n        if (serviceReport.getType() == Type.ERROR) {\n            String message = \"Failed migrating object with title '\"\n                             + sourceObject.getTitle() + \"' from format URI: \"\n                             + sourceFormat + \" to \" + destinationFormat\n                             + \" Standard output: \"\n                             + toolProcessRunner.getProcessOutputAsString()\n                             + \"\\nStandard error output: \"\n                             + toolProcessRunner.getProcessErrorAsString();\n            serviceReport = new ServiceReport(Type.ERROR,\n                                              Status.TOOL_ERROR, message);\n            return new MigrateResult(null, serviceReport);\n        }\n\n\n        //cleanup\n        if (migrationPath.useTempSourceFile()){\n            migrationPath.getTempSourceFile().getFile().delete();\n        }\n        for (TempFile tempFile : migrationPath.getTempFileDeclarations()) {\n            tempFile.getFile().delete();\n        }\n\n\n        //READING THE OUTPUT\n        //TODO return a reference to the outputfile\n        DigitalObject.Builder builder;\n\n\n        if (migrationPath.useTempDestinationFile()){\n            //we should read a temp file afterwards\n            File outputfile = migrationPath.getTempOutputFile().getFile();\n            if (returnByReference){\n                builder = new DigitalObject.Builder(Content.byReference(outputfile));\n            } else {\n                builder = new DigitalObject.Builder(Content.byValue(outputfile));\n                outputfile.delete();\n            }\n\n\n            String message = \"Successfully migrated object with title '\"\n                             + sourceObject.getTitle() + \"' from format URI: \"\n                             + sourceFormat + \" to \" + destinationFormat\n                             + \" Standard output: \"\n                             + toolProcessRunner.getProcessOutputAsString()\n                             + \"\\nStandard error output: \"\n                             + toolProcessRunner.getProcessErrorAsString();\n            serviceReport = new ServiceReport(Type.INFO, Status.SUCCESS,\n                                              message);\n\n        } else {\n\n            if (returnByReference){\n                //we should read the output\n                builder = new DigitalObject.Builder(Content.byReference(toolProcessRunner.getProcessOutput()));\n            } else{\n                builder = new DigitalObject.Builder(Content.byValue(toolProcessRunner.getProcessOutput()));\n            }\n            String message = \"Successfully migrated object with title '\"\n                             + sourceObject.getTitle() + \"' from format URI: \"\n                             + sourceFormat + \" to \" + destinationFormat\n                             + \" Standard error output: \"\n                             + toolProcessRunner.getProcessErrorAsString();\n            serviceReport = new ServiceReport(Type.INFO, Status.SUCCESS,\n                                              message);\n\n\n        }\n\n\n        //TODO cleanup the dir\n        DigitalObject destinationObject = builder\n                .format(destinationFormat)\n                .build();\n\n        return new MigrateResult(destinationObject, serviceReport);\n\n    }", "signature": "MigrateResult migrate(DigitalObject sourceObject, URI sourceFormat,\n                                 URI destinationFormat, List<Parameter> toolParameters)", "full_signature": "public MigrateResult migrate(DigitalObject sourceObject, URI sourceFormat,\n                                 URI destinationFormat, List<Parameter> toolParameters)", "class_method_signature": "GenericMigrationWrapper.migrate(DigitalObject sourceObject, URI sourceFormat,\n                                 URI destinationFormat, List<Parameter> toolParameters)", "testcase": false, "constructor": false, "invocations": ["getMigrationPath", "info", "info", "info", "handleTempfiles", "useTempSourceFile", "info", "handleTempSourceFile", "useTempDestinationFile", "info", "handleTempDestinationFile", "getCommandLine", "info", "info", "toString", "useTempSourceFile", "getInputStream", "getContent", "executeToolProcess", "getType", "getTitle", "getProcessOutputAsString", "getProcessErrorAsString", "useTempSourceFile", "delete", "getFile", "getTempSourceFile", "getTempFileDeclarations", "delete", "getFile", "useTempDestinationFile", "getFile", "getTempOutputFile", "byReference", "byValue", "delete", "getTitle", "getProcessOutputAsString", "getProcessErrorAsString", "byReference", "getProcessOutput", "byValue", "getProcessOutput", "getTitle", "getProcessErrorAsString", "build", "format"]}, "repository": {"repo_id": 1025030, "url": "https://github.com/opf-labs/planets-suite", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 9, "size": 198462, "license": "licensed"}}