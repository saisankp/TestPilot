{"test_class": {"identifier": "GetCookieFromRequestRuleTest", "superclass": "", "interfaces": "", "fields": [], "file": "CoreFeatures/HttpEndpoint/GetCookieFromRequestRule/src/test/java/info/smart_tools/smartactors/http_endpoint/strategy/get_cookie_from_request/GetCookieFromRequestRuleTest.java"}, "test_case": {"identifier": "shouldReturnNullIfCookiesIsEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnNullIfCookiesIsEmpty() {\n        GetCookieFromRequestRule rule = new GetCookieFromRequestRule();\n        FullHttpRequest request = mock(FullHttpRequest.class);\n        HttpHeaders headers = mock(HttpHeaders.class);\n        when(request.headers()).thenReturn(headers);\n        when(headers.get(eq(\"Cookie\"))).thenReturn(null);\n        assertNull(rule.resolve(request, \"key3\"));\n    }", "signature": "void shouldReturnNullIfCookiesIsEmpty()", "full_signature": "@Test public void shouldReturnNullIfCookiesIsEmpty()", "class_method_signature": "GetCookieFromRequestRuleTest.shouldReturnNullIfCookiesIsEmpty()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "headers", "thenReturn", "when", "get", "eq", "assertNull", "resolve"]}, "focal_class": {"identifier": "GetCookieFromRequestRule", "superclass": "", "interfaces": "implements IResolveDependencyStrategy", "fields": [], "methods": [{"identifier": "resolve", "parameters": "(final Object... args)", "modifiers": "@Override public", "return": "T", "signature": "T resolve(final Object... args)", "full_signature": "@Override public T resolve(final Object... args)", "class_method_signature": "GetCookieFromRequestRule.resolve(final Object... args)", "testcase": false, "constructor": false}], "file": "CoreFeatures/HttpEndpoint/GetCookieFromRequestRule/src/main/java/info/smart_tools/smartactors/http_endpoint/strategy/get_cookie_from_request/GetCookieFromRequestRule.java"}, "focal_method": {"identifier": "resolve", "parameters": "(final Object... args)", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public <T> T resolve(final Object... args) {\n        String cookieString = ((FullHttpRequest) args[0]).headers().get(HttpHeaders.Names.COOKIE);\n\n        if (cookieString == null) {\n            return null;\n        }\n\n        String[] cookie = Stream.of(cookieString.split(\";\"))\n                .map(x -> x.split(\"=\"))\n                .filter(x -> x[0].trim().equals(((String) args[1])))\n                .findFirst().orElse(null);\n\n        if (cookie == null || cookie.length == 1) {\n            return null;\n        }\n\n        return (T) cookie[1];\n    }", "signature": "T resolve(final Object... args)", "full_signature": "@Override public T resolve(final Object... args)", "class_method_signature": "GetCookieFromRequestRule.resolve(final Object... args)", "testcase": false, "constructor": false, "invocations": ["get", "headers", "orElse", "findFirst", "filter", "map", "of", "split", "split", "equals", "trim"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}