{"test_class": {"identifier": "DirCommandTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ExampleEntryPoint entryPoint;", "modifier": "private", "type": "ExampleEntryPoint", "declarator": "entryPoint", "var_name": "entryPoint"}, {"original_string": "private Gateway gateway;", "modifier": "private", "type": "Gateway", "declarator": "gateway", "var_name": "gateway"}, {"original_string": "private DirCommand command;", "modifier": "private", "type": "DirCommand", "declarator": "command", "var_name": "command"}, {"original_string": "private BufferedWriter writer;", "modifier": "private", "type": "BufferedWriter", "declarator": "writer", "var_name": "writer"}, {"original_string": "private StringWriter sWriter;", "modifier": "private", "type": "StringWriter", "declarator": "sWriter", "var_name": "sWriter"}, {"original_string": "private String target;", "modifier": "private", "type": "String", "declarator": "target", "var_name": "target"}, {"original_string": "private static Set<String> ExampleClassFields = new HashSet<String>();", "modifier": "private static", "type": "Set<String>", "declarator": "ExampleClassFields = new HashSet<String>()", "var_name": "ExampleClassFields"}, {"original_string": "private static Set<String> ExampleClassMethods = new HashSet<String>();", "modifier": "private static", "type": "Set<String>", "declarator": "ExampleClassMethods = new HashSet<String>()", "var_name": "ExampleClassMethods"}, {"original_string": "private static Set<String> ExampleClassStatics = new HashSet<String>();", "modifier": "private static", "type": "Set<String>", "declarator": "ExampleClassStatics = new HashSet<String>()", "var_name": "ExampleClassStatics"}], "file": "py4j-java/src/test/java/py4j/commands/DirCommandTest.java"}, "test_case": {"identifier": "testDirMethods", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testDirMethods() throws Exception {\n\t\tString inputCommand = \"m\\n\" + target + \"\\ne\\n\";\n\n\t\tassertTrue(gateway.getBindings().containsKey(target));\n\t\tcommand.execute(\"d\", new BufferedReader(new StringReader(inputCommand)), writer);\n\t\tSet<String> methods = convertResponse(sWriter.toString());\n\t\tassertEquals(ExampleClassMethods, methods);\n\t}", "signature": "void testDirMethods()", "full_signature": "@Test public void testDirMethods()", "class_method_signature": "DirCommandTest.testDirMethods()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "containsKey", "getBindings", "execute", "convertResponse", "toString", "assertEquals"]}, "focal_class": {"identifier": "DirCommand", "superclass": "extends AbstractCommand", "interfaces": "", "fields": [{"original_string": "private final Logger logger = Logger.getLogger(DirCommand.class.getName());", "modifier": "private final", "type": "Logger", "declarator": "logger = Logger.getLogger(DirCommand.class.getName())", "var_name": "logger"}, {"original_string": "private ReflectionEngine reflectionEngine;", "modifier": "private", "type": "ReflectionEngine", "declarator": "reflectionEngine", "var_name": "reflectionEngine"}, {"original_string": "public static final String DIR_COMMAND_NAME = \"d\";", "modifier": "public static final", "type": "String", "declarator": "DIR_COMMAND_NAME = \"d\"", "var_name": "DIR_COMMAND_NAME"}, {"original_string": "public static final String DIR_FIELDS_SUBCOMMAND_NAME = \"f\";", "modifier": "public static final", "type": "String", "declarator": "DIR_FIELDS_SUBCOMMAND_NAME = \"f\"", "var_name": "DIR_FIELDS_SUBCOMMAND_NAME"}, {"original_string": "public static final String DIR_METHODS_SUBCOMMAND_NAME = \"m\";", "modifier": "public static final", "type": "String", "declarator": "DIR_METHODS_SUBCOMMAND_NAME = \"m\"", "var_name": "DIR_METHODS_SUBCOMMAND_NAME"}, {"original_string": "public static final String DIR_STATIC_SUBCOMMAND_NAME = \"s\";", "modifier": "public static final", "type": "String", "declarator": "DIR_STATIC_SUBCOMMAND_NAME = \"s\"", "var_name": "DIR_STATIC_SUBCOMMAND_NAME"}, {"original_string": "public static final String DIR_JVMVIEW_SUBCOMMAND_NAME = \"v\";", "modifier": "public static final", "type": "String", "declarator": "DIR_JVMVIEW_SUBCOMMAND_NAME = \"v\"", "var_name": "DIR_JVMVIEW_SUBCOMMAND_NAME"}], "methods": [{"identifier": "DirCommand", "parameters": "()", "modifiers": "public", "return": "", "signature": " DirCommand()", "full_signature": "public  DirCommand()", "class_method_signature": "DirCommand.DirCommand()", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(String commandName, BufferedReader reader, BufferedWriter writer)", "modifiers": "@Override public", "return": "void", "signature": "void execute(String commandName, BufferedReader reader, BufferedWriter writer)", "full_signature": "@Override public void execute(String commandName, BufferedReader reader, BufferedWriter writer)", "class_method_signature": "DirCommand.execute(String commandName, BufferedReader reader, BufferedWriter writer)", "testcase": false, "constructor": false}, {"identifier": "getJvmViewNames", "parameters": "(String jvmId, BufferedReader reader)", "modifiers": "private", "return": "String[]", "signature": "String[] getJvmViewNames(String jvmId, BufferedReader reader)", "full_signature": "private String[] getJvmViewNames(String jvmId, BufferedReader reader)", "class_method_signature": "DirCommand.getJvmViewNames(String jvmId, BufferedReader reader)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(Gateway gateway, Py4JServerConnection connection)", "modifiers": "@Override public", "return": "void", "signature": "void init(Gateway gateway, Py4JServerConnection connection)", "full_signature": "@Override public void init(Gateway gateway, Py4JServerConnection connection)", "class_method_signature": "DirCommand.init(Gateway gateway, Py4JServerConnection connection)", "testcase": false, "constructor": false}], "file": "py4j-java/src/main/java/py4j/commands/DirCommand.java"}, "focal_method": {"identifier": "execute", "parameters": "(String commandName, BufferedReader reader, BufferedWriter writer)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void execute(String commandName, BufferedReader reader, BufferedWriter writer)\n\t\t\tthrows Py4JException, IOException {\n\t\tString subCommand = safeReadLine(reader);\n\n\t\tboolean unknownSubCommand = false;\n\t\tString param = reader.readLine();\n\t\tString returnCommand = null;\n\t\ttry {\n\t\t\tfinal String[] names;\n\t\t\tif (subCommand.equals(DIR_FIELDS_SUBCOMMAND_NAME)) {\n\t\t\t\tObject targetObject = gateway.getObject(param);\n\t\t\t\tnames = reflectionEngine.getPublicFieldNames(targetObject);\n\t\t\t} else if (subCommand.equals(DIR_METHODS_SUBCOMMAND_NAME)) {\n\t\t\t\tObject targetObject = gateway.getObject(param);\n\t\t\t\tnames = reflectionEngine.getPublicMethodNames(targetObject);\n\t\t\t} else if (subCommand.equals(DIR_STATIC_SUBCOMMAND_NAME)) {\n\t\t\t\tClass<?> clazz = TypeUtil.forName(param);\n\t\t\t\tnames = reflectionEngine.getPublicStaticNames(clazz);\n\t\t\t} else if (subCommand.equals(DIR_JVMVIEW_SUBCOMMAND_NAME)) {\n\t\t\t\tnames = getJvmViewNames(param, reader);\n\t\t\t} else {\n\t\t\t\tnames = null;\n\t\t\t\tunknownSubCommand = true;\n\t\t\t}\n\n\t\t\t// Read and discard end of command\n\t\t\treader.readLine();\n\n\t\t\tif (unknownSubCommand) {\n\t\t\t\treturnCommand = Protocol.getOutputErrorCommand(\"Unknown Array SubCommand Name: \" + subCommand);\n\t\t\t} else if (names == null) {\n\t\t\t\tReturnObject returnObject = gateway.getReturnObject(null);\n\t\t\t\treturnCommand = Protocol.getOutputCommand(returnObject);\n\t\t\t} else {\n\t\t\t\tStringBuilder namesJoinedBuilder = new StringBuilder();\n\t\t\t\tfor (String name : names) {\n\t\t\t\t\tnamesJoinedBuilder.append(name);\n\t\t\t\t\tnamesJoinedBuilder.append(\"\\n\");\n\t\t\t\t}\n\t\t\t\tfinal String namesJoined;\n\t\t\t\tif (namesJoinedBuilder.length() > 0) {\n\t\t\t\t\tnamesJoined = namesJoinedBuilder.substring(0, namesJoinedBuilder.length() - 1);\n\t\t\t\t} else {\n\t\t\t\t\tnamesJoined = \"\";\n\t\t\t\t}\n\n\t\t\t\tReturnObject returnObject = gateway.getReturnObject(namesJoined);\n\t\t\t\treturnCommand = Protocol.getOutputCommand(returnObject);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tlogger.log(Level.FINEST, \"Error in a dir subcommand\", e);\n\t\t\treturnCommand = Protocol.getOutputErrorCommand();\n\t\t}\n\n\t\tlogger.finest(\"Returning command: \" + returnCommand);\n\t\twriter.write(returnCommand);\n\t\twriter.flush();\n\t}", "signature": "void execute(String commandName, BufferedReader reader, BufferedWriter writer)", "full_signature": "@Override public void execute(String commandName, BufferedReader reader, BufferedWriter writer)", "class_method_signature": "DirCommand.execute(String commandName, BufferedReader reader, BufferedWriter writer)", "testcase": false, "constructor": false, "invocations": ["safeReadLine", "readLine", "equals", "getObject", "getPublicFieldNames", "equals", "getObject", "getPublicMethodNames", "equals", "forName", "getPublicStaticNames", "equals", "getJvmViewNames", "readLine", "getOutputErrorCommand", "getReturnObject", "getOutputCommand", "append", "append", "length", "substring", "length", "getReturnObject", "getOutputCommand", "log", "getOutputErrorCommand", "finest", "write", "flush"]}, "repository": {"repo_id": 1045976, "url": "https://github.com/bartdag/py4j", "language": "Java", "is_fork": false, "fork_count": 141, "stargazer_count": 737, "size": 16415, "license": "licensed"}}