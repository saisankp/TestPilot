{"test_class": {"identifier": "DMNSimulationUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/util/DMNSimulationUtilsTest.java"}, "test_case": {"identifier": "findDMNModel", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void findDMNModel() {\n        List<String> pathToFind = Arrays.asList(new StringBuilder(\"to/find\").reverse().toString().split(\"/\"));\n\n        List<DMNModel> models = Stream.of(\"this/should/not/match\", \"find\", \"something/to/find\")\n                .map(this::createDMNModelMock).collect(Collectors.toList());\n\n        DMNSimulationUtils.findDMNModel(models, pathToFind, 1);\n\n        List<String> impossibleToFind = Arrays.asList(new StringBuilder(\"not/find\").reverse().toString().split(\"/\"));\n\n        Assertions.assertThatThrownBy(() -> DMNSimulationUtils.findDMNModel(models, impossibleToFind, 1))\n                .isInstanceOf(ImpossibleToFindDMNException.class)\n                .hasMessage(\"Retrieving the DMNModel has failed. Make sure the used DMN asset does not \" +\n                                    \"produce any compilation errors and that the project does not \" +\n                                    \"contain multiple DMN assets with the same name and namespace. \" +\n                                    \"In addition, check if the reference to the DMN file is correct \" +\n                                    \"in the Settings panel. \" +\n                                    \"After addressing the issues, build the project again.\");\n    }", "signature": "void findDMNModel()", "full_signature": "@Test public void findDMNModel()", "class_method_signature": "DMNSimulationUtilsTest.findDMNModel()", "testcase": true, "constructor": false, "invocations": ["asList", "split", "toString", "reverse", "collect", "map", "of", "toList", "findDMNModel", "asList", "split", "toString", "reverse", "hasMessage", "isInstanceOf", "assertThatThrownBy", "findDMNModel"]}, "focal_class": {"identifier": "DMNSimulationUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String delimiter = \"/\";", "modifier": "private static", "type": "String", "declarator": "delimiter = \"/\"", "var_name": "delimiter"}], "methods": [{"identifier": "DMNSimulationUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " DMNSimulationUtils()", "full_signature": "private  DMNSimulationUtils()", "class_method_signature": "DMNSimulationUtils.DMNSimulationUtils()", "testcase": false, "constructor": true}, {"identifier": "extractDMNModel", "parameters": "(DMNRuntime dmnRuntime, String path)", "modifiers": "public static", "return": "DMNModel", "signature": "DMNModel extractDMNModel(DMNRuntime dmnRuntime, String path)", "full_signature": "public static DMNModel extractDMNModel(DMNRuntime dmnRuntime, String path)", "class_method_signature": "DMNSimulationUtils.extractDMNModel(DMNRuntime dmnRuntime, String path)", "testcase": false, "constructor": false}, {"identifier": "extractDMNRuntime", "parameters": "(KieContainer kieContainer)", "modifiers": "public static", "return": "DMNRuntime", "signature": "DMNRuntime extractDMNRuntime(KieContainer kieContainer)", "full_signature": "public static DMNRuntime extractDMNRuntime(KieContainer kieContainer)", "class_method_signature": "DMNSimulationUtils.extractDMNRuntime(KieContainer kieContainer)", "testcase": false, "constructor": false}, {"identifier": "findDMNModel", "parameters": "(List<DMNModel> dmnModels, List<String> pathToFind, int step)", "modifiers": "public static", "return": "DMNModel", "signature": "DMNModel findDMNModel(List<DMNModel> dmnModels, List<String> pathToFind, int step)", "full_signature": "public static DMNModel findDMNModel(List<DMNModel> dmnModels, List<String> pathToFind, int step)", "class_method_signature": "DMNSimulationUtils.findDMNModel(List<DMNModel> dmnModels, List<String> pathToFind, int step)", "testcase": false, "constructor": false}], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/main/java/org/drools/scenariosimulation/backend/util/DMNSimulationUtils.java"}, "focal_method": {"identifier": "findDMNModel", "parameters": "(List<DMNModel> dmnModels, List<String> pathToFind, int step)", "modifiers": "public static", "return": "DMNModel", "body": "public static DMNModel findDMNModel(List<DMNModel> dmnModels, List<String> pathToFind, int step) {\n        List<DMNModel> result = new ArrayList<>();\n        String pathToCompare = String.join(delimiter, pathToFind.subList(0, step));\n        for (DMNModel dmnModel : dmnModels) {\n            String modelPath = new StringBuilder(dmnModel.getResource().getSourcePath()).reverse().toString();\n            if (modelPath.startsWith(pathToCompare)) {\n                result.add(dmnModel);\n            }\n        }\n        if (result.size() == 0) {\n            throw new ImpossibleToFindDMNException(\"Retrieving the DMNModel has failed. Make sure the used DMN asset does not \" +\n                                                           \"produce any compilation errors and that the project does not \" +\n                                                           \"contain multiple DMN assets with the same name and namespace. \" +\n                                                           \"In addition, check if the reference to the DMN file is correct \" +\n                                                           \"in the Settings panel. \" +\n                                                           \"After addressing the issues, build the project again.\");\n        } else if (result.size() == 1) {\n            return result.get(0);\n        } else {\n            return findDMNModel(dmnModels, pathToFind, step + 1);\n        }\n    }", "signature": "DMNModel findDMNModel(List<DMNModel> dmnModels, List<String> pathToFind, int step)", "full_signature": "public static DMNModel findDMNModel(List<DMNModel> dmnModels, List<String> pathToFind, int step)", "class_method_signature": "DMNSimulationUtils.findDMNModel(List<DMNModel> dmnModels, List<String> pathToFind, int step)", "testcase": false, "constructor": false, "invocations": ["join", "subList", "toString", "reverse", "getSourcePath", "getResource", "startsWith", "add", "size", "size", "get", "findDMNModel"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}