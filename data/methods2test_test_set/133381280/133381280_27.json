{"test_class": {"identifier": "AtomicDoubleTest", "superclass": "", "interfaces": "", "fields": [], "file": "client/lookout-core/src/test/java/com/alipay/lookout/step/AtomicDoubleTest.java"}, "test_case": {"identifier": "init", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void init() {\n        AtomicDouble v = new AtomicDouble();\n        Assert.assertEquals(0.0, v.get(), 1e-12);\n    }", "signature": "void init()", "full_signature": "@Test public void init()", "class_method_signature": "AtomicDoubleTest.init()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "get"]}, "focal_class": {"identifier": "AtomicDouble", "superclass": "extends Number", "interfaces": "", "fields": [{"original_string": "private final AtomicLong value;", "modifier": "private final", "type": "AtomicLong", "declarator": "value", "var_name": "value"}], "methods": [{"identifier": "AtomicDouble", "parameters": "()", "modifiers": "public", "return": "", "signature": " AtomicDouble()", "full_signature": "public  AtomicDouble()", "class_method_signature": "AtomicDouble.AtomicDouble()", "testcase": false, "constructor": true}, {"identifier": "AtomicDouble", "parameters": "(double init)", "modifiers": "public", "return": "", "signature": " AtomicDouble(double init)", "full_signature": "public  AtomicDouble(double init)", "class_method_signature": "AtomicDouble.AtomicDouble(double init)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double get()", "full_signature": "public double get()", "class_method_signature": "AtomicDouble.get()", "testcase": false, "constructor": false}, {"identifier": "addAndGet", "parameters": "(double amount)", "modifiers": "public", "return": "double", "signature": "double addAndGet(double amount)", "full_signature": "public double addAndGet(double amount)", "class_method_signature": "AtomicDouble.addAndGet(double amount)", "testcase": false, "constructor": false}, {"identifier": "getAndAdd", "parameters": "(double amount)", "modifiers": "public", "return": "double", "signature": "double getAndAdd(double amount)", "full_signature": "public double getAndAdd(double amount)", "class_method_signature": "AtomicDouble.getAndAdd(double amount)", "testcase": false, "constructor": false}, {"identifier": "getAndSet", "parameters": "(double amount)", "modifiers": "public", "return": "double", "signature": "double getAndSet(double amount)", "full_signature": "public double getAndSet(double amount)", "class_method_signature": "AtomicDouble.getAndSet(double amount)", "testcase": false, "constructor": false}, {"identifier": "compareAndSet", "parameters": "(double expect, double update)", "modifiers": "public", "return": "boolean", "signature": "boolean compareAndSet(double expect, double update)", "full_signature": "public boolean compareAndSet(double expect, double update)", "class_method_signature": "AtomicDouble.compareAndSet(double expect, double update)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(double amount)", "modifiers": "public", "return": "void", "signature": "void set(double amount)", "full_signature": "public void set(double amount)", "class_method_signature": "AtomicDouble.set(double amount)", "testcase": false, "constructor": false}, {"identifier": "intValue", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int intValue()", "full_signature": "@Override public int intValue()", "class_method_signature": "AtomicDouble.intValue()", "testcase": false, "constructor": false}, {"identifier": "longValue", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long longValue()", "full_signature": "@Override public long longValue()", "class_method_signature": "AtomicDouble.longValue()", "testcase": false, "constructor": false}, {"identifier": "floatValue", "parameters": "()", "modifiers": "@Override public", "return": "float", "signature": "float floatValue()", "full_signature": "@Override public float floatValue()", "class_method_signature": "AtomicDouble.floatValue()", "testcase": false, "constructor": false}, {"identifier": "doubleValue", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double doubleValue()", "full_signature": "@Override public double doubleValue()", "class_method_signature": "AtomicDouble.doubleValue()", "testcase": false, "constructor": false}], "file": "client/lookout-core/src/main/java/com/alipay/lookout/step/AtomicDouble.java"}, "focal_method": {"identifier": "get", "parameters": "()", "modifiers": "public", "return": "double", "body": "public double get() {\n        return Double.longBitsToDouble(value.get());\n    }", "signature": "double get()", "full_signature": "public double get()", "class_method_signature": "AtomicDouble.get()", "testcase": false, "constructor": false, "invocations": ["longBitsToDouble", "get"]}, "repository": {"repo_id": 133381280, "url": "https://github.com/sofastack/sofa-lookout", "language": "Java", "is_fork": false, "fork_count": 113, "stargazer_count": 318, "size": 1394, "license": "licensed"}}