{"test_class": {"identifier": "WordMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Mapper.Context contextMock;", "modifier": "private", "type": "Mapper.Context", "declarator": "contextMock", "var_name": "contextMock"}, {"original_string": "private WordMapper mapper;", "modifier": "private", "type": "WordMapper", "declarator": "mapper", "var_name": "mapper"}], "file": "mapreduce/src/test/java/net/petrikainulainen/spring/data/apachehadoop/WordMapperTest.java"}, "test_case": {"identifier": "mapWithQuestionMark", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void mapWithQuestionMark() throws IOException, InterruptedException {\n        LongWritable key = new LongWritable(1);\n\n        mapper.map(key, new Text(\"I?\"), contextMock);\n\n        ArgumentCaptor<Text> keyArgument = ArgumentCaptor.forClass(Text.class);\n        ArgumentCaptor<IntWritable> valueArgument = ArgumentCaptor.forClass(IntWritable.class);\n\n        verify(contextMock, times(1)).write(keyArgument.capture(), valueArgument.capture());\n        assertEquals(\"I\", keyArgument.getValue().toString());\n        assertEquals(1, valueArgument.getValue().get());\n\n        verifyNoMoreInteractions(contextMock);\n    }", "signature": "void mapWithQuestionMark()", "full_signature": "@Test public void mapWithQuestionMark()", "class_method_signature": "WordMapperTest.mapWithQuestionMark()", "testcase": true, "constructor": false, "invocations": ["map", "forClass", "forClass", "write", "verify", "times", "capture", "capture", "assertEquals", "toString", "getValue", "assertEquals", "get", "getValue", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "WordMapper", "superclass": "extends Mapper<LongWritable, Text, Text, IntWritable>", "interfaces": "", "fields": [{"original_string": "private Text word = new Text();", "modifier": "private", "type": "Text", "declarator": "word = new Text()", "var_name": "word"}], "methods": [{"identifier": "map", "parameters": "(LongWritable key, Text value, Context context)", "modifiers": "@Override protected", "return": "void", "signature": "void map(LongWritable key, Text value, Context context)", "full_signature": "@Override protected void map(LongWritable key, Text value, Context context)", "class_method_signature": "WordMapper.map(LongWritable key, Text value, Context context)", "testcase": false, "constructor": false}, {"identifier": "removeNonLettersOrNumbers", "parameters": "(String original)", "modifiers": "private", "return": "String", "signature": "String removeNonLettersOrNumbers(String original)", "full_signature": "private String removeNonLettersOrNumbers(String original)", "class_method_signature": "WordMapper.removeNonLettersOrNumbers(String original)", "testcase": false, "constructor": false}], "file": "mapreduce/src/main/java/net/petrikainulainen/spring/data/apachehadoop/WordMapper.java"}, "focal_method": {"identifier": "map", "parameters": "(LongWritable key, Text value, Context context)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n    protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {\n        String line = value.toString();\n        StringTokenizer lineTokenizer = new StringTokenizer(line);\n        while (lineTokenizer.hasMoreTokens()) {\n            String cleaned = removeNonLettersOrNumbers(lineTokenizer.nextToken());\n            word.set(cleaned);\n            context.write(word, new IntWritable(1));\n        }\n    }", "signature": "void map(LongWritable key, Text value, Context context)", "full_signature": "@Override protected void map(LongWritable key, Text value, Context context)", "class_method_signature": "WordMapper.map(LongWritable key, Text value, Context context)", "testcase": false, "constructor": false, "invocations": ["toString", "hasMoreTokens", "removeNonLettersOrNumbers", "nextToken", "set", "write"]}, "repository": {"repo_id": 8108578, "url": "https://github.com/pkainulainen/spring-data-apache-hadoop-examples", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 13, "size": 151, "license": "licensed"}}