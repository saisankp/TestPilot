{"test_class": {"identifier": "MethodAccessImplTest", "superclass": "", "interfaces": "", "fields": [], "file": "reflekt/src/test/java/io/advantageous/boon/core/reflection/impl/MethodAccessImplTest.java"}, "test_case": {"identifier": "testInvokeDynamic", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInvokeDynamic() {\n        Map<String, Employee> map = new HashMap<>();\n        map.put(\"key\", new Employee(\"rick\"));\n        List<Employee> employees = new ArrayList<>();\n        employees.add(new Employee(\"geoff\"));\n        Tuple<String, Employee, List> tuple = new Tuple<>();\n\n        TestService testService = new TestService();\n\n        ClassMeta classMeta = ClassMeta.classMeta(TestService.class);\n\n        final MethodAccess someMethod = classMeta.method(\"someMethod\");\n\n        Object returnValue = someMethod.invokeDynamic(testService, new Object[]{employees, map, tuple});\n\n        assertTrue((Boolean) returnValue);\n        assertTrue(testService.someMethodCalled.get());\n\n    }", "signature": "void testInvokeDynamic()", "full_signature": "@Test public void testInvokeDynamic()", "class_method_signature": "MethodAccessImplTest.testInvokeDynamic()", "testcase": true, "constructor": false, "invocations": ["put", "add", "classMeta", "method", "invokeDynamic", "assertTrue", "assertTrue", "get"]}, "focal_class": {"identifier": "MethodAccessImpl", "superclass": "", "interfaces": "implements MethodAccess", "fields": [{"original_string": "final public Method method;", "modifier": "final public", "type": "Method", "declarator": "method", "var_name": "method"}, {"original_string": "final List<AnnotationData> annotationData;", "modifier": "final", "type": "List<AnnotationData>", "declarator": "annotationData", "var_name": "annotationData"}, {"original_string": "final List<List<AnnotationData>> annotationDataForParams;", "modifier": "final", "type": "List<List<AnnotationData>>", "declarator": "annotationDataForParams", "var_name": "annotationDataForParams"}, {"original_string": "final Map<String, AnnotationData> annotationMap;", "modifier": "final", "type": "Map<String, AnnotationData>", "declarator": "annotationMap", "var_name": "annotationMap"}, {"original_string": "final List<TypeType> paramTypeEnumList;", "modifier": "final", "type": "List<TypeType>", "declarator": "paramTypeEnumList", "var_name": "paramTypeEnumList"}, {"original_string": "final List<MethodParamAccess> methodParamList;", "modifier": "final", "type": "List<MethodParamAccess>", "declarator": "methodParamList", "var_name": "methodParamList"}, {"original_string": "final MethodHandles.Lookup lookup = MethodHandles.lookup();", "modifier": "final", "type": "MethodHandles.Lookup", "declarator": "lookup = MethodHandles.lookup()", "var_name": "lookup"}, {"original_string": "private final MethodReturnAccess returnAccess;", "modifier": "private final", "type": "MethodReturnAccess", "declarator": "returnAccess", "var_name": "returnAccess"}, {"original_string": "MethodHandle methodHandle;", "modifier": "", "type": "MethodHandle", "declarator": "methodHandle", "var_name": "methodHandle"}, {"original_string": "Object instance;", "modifier": "", "type": "Object", "declarator": "instance", "var_name": "instance"}, {"original_string": "private int score;", "modifier": "private", "type": "int", "declarator": "score", "var_name": "score"}], "methods": [{"identifier": "MethodAccessImpl", "parameters": "()", "modifiers": "public", "return": "", "signature": " MethodAccessImpl()", "full_signature": "public  MethodAccessImpl()", "class_method_signature": "MethodAccessImpl.MethodAccessImpl()", "testcase": false, "constructor": true}, {"identifier": "MethodAccessImpl", "parameters": "(Method method)", "modifiers": "public", "return": "", "signature": " MethodAccessImpl(Method method)", "full_signature": "public  MethodAccessImpl(Method method)", "class_method_signature": "MethodAccessImpl.MethodAccessImpl(Method method)", "testcase": false, "constructor": true}, {"identifier": "annotationDataForParams", "parameters": "()", "modifiers": "public", "return": "List<List<AnnotationData>>", "signature": "List<List<AnnotationData>> annotationDataForParams()", "full_signature": "public List<List<AnnotationData>> annotationDataForParams()", "class_method_signature": "MethodAccessImpl.annotationDataForParams()", "testcase": false, "constructor": false}, {"identifier": "getClassFromParameterizedType", "parameters": "(int index, ParameterizedType parameterizedType)", "modifiers": "private", "return": "Class<?>", "signature": "Class<?> getClassFromParameterizedType(int index, ParameterizedType parameterizedType)", "full_signature": "private Class<?> getClassFromParameterizedType(int index, ParameterizedType parameterizedType)", "class_method_signature": "MethodAccessImpl.getClassFromParameterizedType(int index, ParameterizedType parameterizedType)", "testcase": false, "constructor": false}, {"identifier": "score", "parameters": "(Method method)", "modifiers": "private", "return": "void", "signature": "void score(Method method)", "full_signature": "private void score(Method method)", "class_method_signature": "MethodAccessImpl.score(Method method)", "testcase": false, "constructor": false}, {"identifier": "invokeDynamicList", "parameters": "(final Object object, List<?> args)", "modifiers": "public", "return": "Object", "signature": "Object invokeDynamicList(final Object object, List<?> args)", "full_signature": "public Object invokeDynamicList(final Object object, List<?> args)", "class_method_signature": "MethodAccessImpl.invokeDynamicList(final Object object, List<?> args)", "testcase": false, "constructor": false}, {"identifier": "invokeDynamicObject", "parameters": "(final Object object, final Object args)", "modifiers": "public", "return": "Object", "signature": "Object invokeDynamicObject(final Object object, final Object args)", "full_signature": "public Object invokeDynamicObject(final Object object, final Object args)", "class_method_signature": "MethodAccessImpl.invokeDynamicObject(final Object object, final Object args)", "testcase": false, "constructor": false}, {"identifier": "invokeDynamic", "parameters": "(final Object object, final Object... args)", "modifiers": "@Override public", "return": "Object", "signature": "Object invokeDynamic(final Object object, final Object... args)", "full_signature": "@Override public Object invokeDynamic(final Object object, final Object... args)", "class_method_signature": "MethodAccessImpl.invokeDynamic(final Object object, final Object... args)", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(Object object, Object... args)", "modifiers": "public", "return": "Object", "signature": "Object invoke(Object object, Object... args)", "full_signature": "public Object invoke(Object object, Object... args)", "class_method_signature": "MethodAccessImpl.invoke(Object object, Object... args)", "testcase": false, "constructor": false}, {"identifier": "invokeBound", "parameters": "(Object... args)", "modifiers": "public", "return": "Object", "signature": "Object invokeBound(Object... args)", "full_signature": "public Object invokeBound(Object... args)", "class_method_signature": "MethodAccessImpl.invokeBound(Object... args)", "testcase": false, "constructor": false}, {"identifier": "invokeStatic", "parameters": "(Object... args)", "modifiers": "@Override public", "return": "Object", "signature": "Object invokeStatic(Object... args)", "full_signature": "@Override public Object invokeStatic(Object... args)", "class_method_signature": "MethodAccessImpl.invokeStatic(Object... args)", "testcase": false, "constructor": false}, {"identifier": "bind", "parameters": "(Object instance)", "modifiers": "@Override public", "return": "MethodAccess", "signature": "MethodAccess bind(Object instance)", "full_signature": "@Override public MethodAccess bind(Object instance)", "class_method_signature": "MethodAccessImpl.bind(Object instance)", "testcase": false, "constructor": false}, {"identifier": "methodHandle", "parameters": "()", "modifiers": "@Override public", "return": "MethodHandle", "signature": "MethodHandle methodHandle()", "full_signature": "@Override public MethodHandle methodHandle()", "class_method_signature": "MethodAccessImpl.methodHandle()", "testcase": false, "constructor": false}, {"identifier": "methodAccess", "parameters": "()", "modifiers": "@Override public", "return": "MethodAccess", "signature": "MethodAccess methodAccess()", "full_signature": "@Override public MethodAccess methodAccess()", "class_method_signature": "MethodAccessImpl.methodAccess()", "testcase": false, "constructor": false}, {"identifier": "bound", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object bound()", "full_signature": "@Override public Object bound()", "class_method_signature": "MethodAccessImpl.bound()", "testcase": false, "constructor": false}, {"identifier": "invokeReducerLongIntReturnLongMethodHandle", "parameters": "(T object)", "modifiers": "@Override public", "return": "ConstantCallSite", "signature": "ConstantCallSite invokeReducerLongIntReturnLongMethodHandle(T object)", "full_signature": "@Override public ConstantCallSite invokeReducerLongIntReturnLongMethodHandle(T object)", "class_method_signature": "MethodAccessImpl.invokeReducerLongIntReturnLongMethodHandle(T object)", "testcase": false, "constructor": false}, {"identifier": "method", "parameters": "()", "modifiers": "@Override public", "return": "Method", "signature": "Method method()", "full_signature": "@Override public Method method()", "class_method_signature": "MethodAccessImpl.method()", "testcase": false, "constructor": false}, {"identifier": "score", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int score()", "full_signature": "@Override public int score()", "class_method_signature": "MethodAccessImpl.score()", "testcase": false, "constructor": false}, {"identifier": "annotationData", "parameters": "()", "modifiers": "@Override public", "return": "Iterable<AnnotationData>", "signature": "Iterable<AnnotationData> annotationData()", "full_signature": "@Override public Iterable<AnnotationData> annotationData()", "class_method_signature": "MethodAccessImpl.annotationData()", "testcase": false, "constructor": false}, {"identifier": "hasAnnotation", "parameters": "(String annotationName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasAnnotation(String annotationName)", "full_signature": "@Override public boolean hasAnnotation(String annotationName)", "class_method_signature": "MethodAccessImpl.hasAnnotation(String annotationName)", "testcase": false, "constructor": false}, {"identifier": "annotation", "parameters": "(String annotationName)", "modifiers": "@Override public", "return": "AnnotationData", "signature": "AnnotationData annotation(String annotationName)", "full_signature": "@Override public AnnotationData annotation(String annotationName)", "class_method_signature": "MethodAccessImpl.annotation(String annotationName)", "testcase": false, "constructor": false}, {"identifier": "isStatic", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isStatic()", "full_signature": "@Override public boolean isStatic()", "class_method_signature": "MethodAccessImpl.isStatic()", "testcase": false, "constructor": false}, {"identifier": "isPublic", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isPublic()", "full_signature": "@Override public boolean isPublic()", "class_method_signature": "MethodAccessImpl.isPublic()", "testcase": false, "constructor": false}, {"identifier": "isPrivate", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isPrivate()", "full_signature": "@Override public boolean isPrivate()", "class_method_signature": "MethodAccessImpl.isPrivate()", "testcase": false, "constructor": false}, {"identifier": "returnAccess", "parameters": "()", "modifiers": "@Override public", "return": "MethodReturnAccess", "signature": "MethodReturnAccess returnAccess()", "full_signature": "@Override public MethodReturnAccess returnAccess()", "class_method_signature": "MethodAccessImpl.returnAccess()", "testcase": false, "constructor": false}, {"identifier": "name", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String name()", "full_signature": "@Override public String name()", "class_method_signature": "MethodAccessImpl.name()", "testcase": false, "constructor": false}, {"identifier": "declaringType", "parameters": "()", "modifiers": "@Override public", "return": "Class<?>", "signature": "Class<?> declaringType()", "full_signature": "@Override public Class<?> declaringType()", "class_method_signature": "MethodAccessImpl.declaringType()", "testcase": false, "constructor": false}, {"identifier": "returnType", "parameters": "()", "modifiers": "@Override public", "return": "Class<?>", "signature": "Class<?> returnType()", "full_signature": "@Override public Class<?> returnType()", "class_method_signature": "MethodAccessImpl.returnType()", "testcase": false, "constructor": false}, {"identifier": "respondsTo", "parameters": "(Class<?>[] parametersToMatch)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean respondsTo(Class<?>[] parametersToMatch)", "full_signature": "@Override public boolean respondsTo(Class<?>[] parametersToMatch)", "class_method_signature": "MethodAccessImpl.respondsTo(Class<?>[] parametersToMatch)", "testcase": false, "constructor": false}, {"identifier": "respondsTo", "parameters": "(Object... args)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean respondsTo(Object... args)", "full_signature": "@Override public boolean respondsTo(Object... args)", "class_method_signature": "MethodAccessImpl.respondsTo(Object... args)", "testcase": false, "constructor": false}, {"identifier": "parameterTypes", "parameters": "()", "modifiers": "@Override public", "return": "Class<?>[]", "signature": "Class<?>[] parameterTypes()", "full_signature": "@Override public Class<?>[] parameterTypes()", "class_method_signature": "MethodAccessImpl.parameterTypes()", "testcase": false, "constructor": false}, {"identifier": "getGenericParameterTypes", "parameters": "()", "modifiers": "@Override public", "return": "Type[]", "signature": "Type[] getGenericParameterTypes()", "full_signature": "@Override public Type[] getGenericParameterTypes()", "class_method_signature": "MethodAccessImpl.getGenericParameterTypes()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "MethodAccessImpl.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "MethodAccessImpl.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "MethodAccessImpl.hashCode()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(MethodAccess o2)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(MethodAccess o2)", "full_signature": "@Override public int compareTo(MethodAccess o2)", "class_method_signature": "MethodAccessImpl.compareTo(MethodAccess o2)", "testcase": false, "constructor": false}, {"identifier": "paramTypeEnumList", "parameters": "()", "modifiers": "public", "return": "List<TypeType>", "signature": "List<TypeType> paramTypeEnumList()", "full_signature": "public List<TypeType> paramTypeEnumList()", "class_method_signature": "MethodAccessImpl.paramTypeEnumList()", "testcase": false, "constructor": false}, {"identifier": "parameters", "parameters": "()", "modifiers": "@Override public", "return": "List<MethodParamAccess>", "signature": "List<MethodParamAccess> parameters()", "full_signature": "@Override public List<MethodParamAccess> parameters()", "class_method_signature": "MethodAccessImpl.parameters()", "testcase": false, "constructor": false}], "file": "reflekt/src/main/java/io/advantageous/boon/core/reflection/impl/MethodAccessImpl.java"}, "focal_method": {"identifier": "invokeDynamic", "parameters": "(final Object object, final Object... args)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object invokeDynamic(final Object object, final Object... args) {\n\n        final Class<?>[] parameterTypes = parameterTypes();\n        final int paramLength = method.getParameterCount();\n        final int argsLength = args.length;\n\n\n            /* If there are no parameters, just invoke it. */\n        if (paramLength == 0) {\n            return invoke(object);\n        }\n\n        if (paramLength == argsLength) {\n            Object[] newArgs = new Object[argsLength];\n            for (int index = 0; index < argsLength; index++) {\n                final Object arg = args[index];\n                final MethodParamAccess methodParamAccess = methodParamList.get(index);\n                switch (methodParamAccess.typeEnum()) {\n                    case SET:\n                        if (arg instanceof Collection) {\n                            Collection<Object> argCollection = ((Collection<Object>) arg);\n                            newArgs[index] = argCollection.stream().map((Function<Object, Object>) original -> Conversions.coerce(methodParamAccess.componentType(),\n                                    methodParamAccess.getComponentClass(), original)).collect(Collectors.toSet());\n\n                        }\n                        break;\n                    case LIST:\n                        if (arg instanceof Collection) {\n                            Collection<Object> argCollection = ((Collection) arg);\n                            newArgs[index] = argCollection.stream().map((Function<Object, Object>) original -> Conversions.coerce(methodParamAccess.componentType(),\n                                    methodParamAccess.getComponentClass(), original)).collect(Collectors.toList());\n                        }\n                        break;\n                    case MAP:\n                        if (arg instanceof Map) {\n                            Map<Object, Object> argMap = ((Map) arg);\n                            Map<Object, Object> convertedMap = new HashMap<>(argMap.size());\n                            argMap.forEach((oKey, oValue) -> {\n                                Object newKey = Conversions.coerce(methodParamAccess.componentKeyType(),\n                                        methodParamAccess.getComponentKeyClass(), oKey);\n\n\n                                Object newValue = Conversions.coerce(methodParamAccess.componentValueType(),\n                                        methodParamAccess.getComponentValueClass(), oValue);\n\n                                convertedMap.put(newKey, newValue);\n                            });\n                            newArgs[index] = convertedMap;\n                        }\n                        break;\n                    case INSTANCE:\n                        newArgs[index] = Conversions.coerce(methodParamAccess.typeEnum(), methodParamAccess.getType(), arg);\n                        break;\n                    default:\n                        if (!methodParamAccess.getType().isInstance(arg)) {\n                            TypeType type = paramTypeEnumList.get(index);\n                            newArgs[index] = Conversions.coerce(type, methodParamAccess.getType(), arg);\n                        } else {\n                            newArgs[index] = arg;\n                        }\n\n                }\n            }\n            return this.invoke(object, newArgs);\n        } else {\n            if (method.isVarArgs() && paramLength == 1) {\n                return this.invoke(object, (Object) args);\n            } else {\n                return Invoker.invokeOverloadedFromList(object, name(), Lists.list(args));\n            }\n        }\n    }", "signature": "Object invokeDynamic(final Object object, final Object... args)", "full_signature": "@Override public Object invokeDynamic(final Object object, final Object... args)", "class_method_signature": "MethodAccessImpl.invokeDynamic(final Object object, final Object... args)", "testcase": false, "constructor": false, "invocations": ["parameterTypes", "getParameterCount", "invoke", "get", "typeEnum", "collect", "map", "stream", "coerce", "componentType", "getComponentClass", "toSet", "collect", "map", "stream", "coerce", "componentType", "getComponentClass", "toList", "size", "forEach", "coerce", "componentKeyType", "getComponentKeyClass", "coerce", "componentValueType", "getComponentValueClass", "put", "coerce", "typeEnum", "getType", "isInstance", "getType", "get", "coerce", "getType", "invoke", "isVarArgs", "invoke", "invokeOverloadedFromList", "name", "list"]}, "repository": {"repo_id": 33015857, "url": "https://github.com/advantageous/boon", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 18, "size": 6174, "license": "licensed"}}