{"test_class": {"identifier": "GeoToolsLayerTest", "superclass": "extends AbstractGeoToolsTest", "interfaces": "", "fields": [{"original_string": "private GeoToolsLayer layer;", "modifier": "private", "type": "GeoToolsLayer", "declarator": "layer", "var_name": "layer"}, {"original_string": "private Filter filter;", "modifier": "private", "type": "Filter", "declarator": "filter", "var_name": "filter"}], "file": "plugin/layer-geotools/geotools/src/test/java/org/geomajas/layer/geotools/GeoToolsLayerTest.java"}, "test_case": {"identifier": "testDelete", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testDelete() throws Exception {\n\t\tSimpleFeature f = (SimpleFeature) layer.read(LAYER_NAME + \".4\"); // id always starts with layer id\n\t\tAssert.assertNotNull(f);\n\t\tlayer.delete(LAYER_NAME + \".4\"); // id always starts with layer id\n\t\tAssert.assertTrue(true);\n\t}", "signature": "void testDelete()", "full_signature": "@Test public void testDelete()", "class_method_signature": "GeoToolsLayerTest.testDelete()", "testcase": true, "constructor": false, "invocations": ["read", "assertNotNull", "delete", "assertTrue"]}, "focal_class": {"identifier": "GeoToolsLayer", "superclass": "extends FeatureSourceRetriever", "interfaces": "implements VectorLayer", "fields": [{"original_string": "private final Logger log = LoggerFactory.getLogger(GeoToolsLayer.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(GeoToolsLayer.class)", "var_name": "log"}, {"original_string": "private static final long DEFAULT_COOLDOWN_TIME = 60000;", "modifier": "private static final", "type": "long", "declarator": "DEFAULT_COOLDOWN_TIME = 60000", "var_name": "DEFAULT_COOLDOWN_TIME"}, {"original_string": "private static final String MAGIC_STRING_LIBRARY_MISSING = \"No datastore found. Possible causes are \"\n\t\t\t+ \"missing factory or missing library for your datastore (e.g. database driver).\";", "modifier": "private static final", "type": "String", "declarator": "MAGIC_STRING_LIBRARY_MISSING = \"No datastore found. Possible causes are \"\n\t\t\t+ \"missing factory or missing library for your datastore (e.g. database driver).\"", "var_name": "MAGIC_STRING_LIBRARY_MISSING"}, {"original_string": "private FeatureModel featureModel;", "modifier": "private", "type": "FeatureModel", "declarator": "featureModel", "var_name": "featureModel"}, {"original_string": "private VectorLayerInfo layerInfo;", "modifier": "private", "type": "VectorLayerInfo", "declarator": "layerInfo", "var_name": "layerInfo"}, {"original_string": "private String url;", "modifier": "private", "type": "String", "declarator": "url", "var_name": "url"}, {"original_string": "private String dbtype;", "modifier": "private", "type": "String", "declarator": "dbtype", "var_name": "dbtype"}, {"original_string": "private List<Parameter> parameters;", "modifier": "private", "type": "List<Parameter>", "declarator": "parameters", "var_name": "parameters"}, {"original_string": "private DataSource dataSource;", "modifier": "private", "type": "DataSource", "declarator": "dataSource", "var_name": "dataSource"}, {"original_string": "@Autowired\n\tprivate FilterService filterService;", "modifier": "@Autowired\n\tprivate", "type": "FilterService", "declarator": "filterService", "var_name": "filterService"}, {"original_string": "@Autowired\n\tprivate GeoService geoService;", "modifier": "@Autowired\n\tprivate", "type": "GeoService", "declarator": "geoService", "var_name": "geoService"}, {"original_string": "@Autowired\n\tprivate DtoConverterService converterService;", "modifier": "@Autowired\n\tprivate", "type": "DtoConverterService", "declarator": "converterService", "var_name": "converterService"}, {"original_string": "@Autowired\n\tprivate GeoToolsTransactionSynchronization transactionSynchronization;", "modifier": "@Autowired\n\tprivate", "type": "GeoToolsTransactionSynchronization", "declarator": "transactionSynchronization", "var_name": "transactionSynchronization"}, {"original_string": "private CoordinateReferenceSystem crs;", "modifier": "private", "type": "CoordinateReferenceSystem", "declarator": "crs", "var_name": "crs"}, {"original_string": "private String id;", "modifier": "private", "type": "String", "declarator": "id", "var_name": "id"}, {"original_string": "private boolean featureModelUsable;", "modifier": "private", "type": "boolean", "declarator": "featureModelUsable", "var_name": "featureModelUsable"}, {"original_string": "private long lastInitFeaturesRetry;", "modifier": "private", "type": "long", "declarator": "lastInitFeaturesRetry", "var_name": "lastInitFeaturesRetry"}, {"original_string": "private long cooldownTimeBetweenInitializationRetries = DEFAULT_COOLDOWN_TIME;", "modifier": "private", "type": "long", "declarator": "cooldownTimeBetweenInitializationRetries = DEFAULT_COOLDOWN_TIME", "var_name": "cooldownTimeBetweenInitializationRetries"}], "methods": [{"identifier": "getId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getId()", "full_signature": "@Override public String getId()", "class_method_signature": "GeoToolsLayer.getId()", "testcase": false, "constructor": false}, {"identifier": "setId", "parameters": "(String id)", "modifiers": "@Api public", "return": "void", "signature": "void setId(String id)", "full_signature": "@Api public void setId(String id)", "class_method_signature": "GeoToolsLayer.setId(String id)", "testcase": false, "constructor": false}, {"identifier": "setUrl", "parameters": "(String url)", "modifiers": "@Api public", "return": "void", "signature": "void setUrl(String url)", "full_signature": "@Api public void setUrl(String url)", "class_method_signature": "GeoToolsLayer.setUrl(String url)", "testcase": false, "constructor": false}, {"identifier": "setDbtype", "parameters": "(String dbtype)", "modifiers": "@Api public", "return": "void", "signature": "void setDbtype(String dbtype)", "full_signature": "@Api public void setDbtype(String dbtype)", "class_method_signature": "GeoToolsLayer.setDbtype(String dbtype)", "testcase": false, "constructor": false}, {"identifier": "getDataSource", "parameters": "()", "modifiers": "@Api public", "return": "DataSource", "signature": "DataSource getDataSource()", "full_signature": "@Api public DataSource getDataSource()", "class_method_signature": "GeoToolsLayer.getDataSource()", "testcase": false, "constructor": false}, {"identifier": "setDataSource", "parameters": "(DataSource dataSource)", "modifiers": "@Api public", "return": "void", "signature": "void setDataSource(DataSource dataSource)", "full_signature": "@Api public void setDataSource(DataSource dataSource)", "class_method_signature": "GeoToolsLayer.setDataSource(DataSource dataSource)", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(List<Parameter> parameters)", "modifiers": "@Api public", "return": "void", "signature": "void setParameters(List<Parameter> parameters)", "full_signature": "@Api public void setParameters(List<Parameter> parameters)", "class_method_signature": "GeoToolsLayer.setParameters(List<Parameter> parameters)", "testcase": false, "constructor": false}, {"identifier": "setCooldownTimeBetweenInitializationRetries", "parameters": "(long cooldownTimeBetweenInitializationRetries)", "modifiers": "@Api public", "return": "void", "signature": "void setCooldownTimeBetweenInitializationRetries(long cooldownTimeBetweenInitializationRetries)", "full_signature": "@Api public void setCooldownTimeBetweenInitializationRetries(long cooldownTimeBetweenInitializationRetries)", "class_method_signature": "GeoToolsLayer.setCooldownTimeBetweenInitializationRetries(long cooldownTimeBetweenInitializationRetries)", "testcase": false, "constructor": false}, {"identifier": "getCrs", "parameters": "()", "modifiers": "@Override public", "return": "CoordinateReferenceSystem", "signature": "CoordinateReferenceSystem getCrs()", "full_signature": "@Override public CoordinateReferenceSystem getCrs()", "class_method_signature": "GeoToolsLayer.getCrs()", "testcase": false, "constructor": false}, {"identifier": "setLayerInfo", "parameters": "(VectorLayerInfo layerInfo)", "modifiers": "@Api public", "return": "void", "signature": "void setLayerInfo(VectorLayerInfo layerInfo)", "full_signature": "@Api public void setLayerInfo(VectorLayerInfo layerInfo)", "class_method_signature": "GeoToolsLayer.setLayerInfo(VectorLayerInfo layerInfo)", "testcase": false, "constructor": false}, {"identifier": "getLayerInfo", "parameters": "()", "modifiers": "@Override public", "return": "VectorLayerInfo", "signature": "VectorLayerInfo getLayerInfo()", "full_signature": "@Override public VectorLayerInfo getLayerInfo()", "class_method_signature": "GeoToolsLayer.getLayerInfo()", "testcase": false, "constructor": false}, {"identifier": "isCreateCapable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCreateCapable()", "full_signature": "@Override public boolean isCreateCapable()", "class_method_signature": "GeoToolsLayer.isCreateCapable()", "testcase": false, "constructor": false}, {"identifier": "isUpdateCapable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isUpdateCapable()", "full_signature": "@Override public boolean isUpdateCapable()", "class_method_signature": "GeoToolsLayer.isUpdateCapable()", "testcase": false, "constructor": false}, {"identifier": "isDeleteCapable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDeleteCapable()", "full_signature": "@Override public boolean isDeleteCapable()", "class_method_signature": "GeoToolsLayer.isDeleteCapable()", "testcase": false, "constructor": false}, {"identifier": "setDataStore", "parameters": "(DataStore dataStore)", "modifiers": "@Override @Deprecated public", "return": "void", "signature": "void setDataStore(DataStore dataStore)", "full_signature": "@Override @Deprecated public void setDataStore(DataStore dataStore)", "class_method_signature": "GeoToolsLayer.setDataStore(DataStore dataStore)", "testcase": false, "constructor": false}, {"identifier": "initFeatures", "parameters": "()", "modifiers": "@PostConstruct protected", "return": "void", "signature": "void initFeatures()", "full_signature": "@PostConstruct protected void initFeatures()", "class_method_signature": "GeoToolsLayer.initFeatures()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Object feature)", "modifiers": "@Override @Transactional(rollbackFor = { Throwable.class }) public", "return": "Object", "signature": "Object create(Object feature)", "full_signature": "@Override @Transactional(rollbackFor = { Throwable.class }) public Object create(Object feature)", "class_method_signature": "GeoToolsLayer.create(Object feature)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(Object feature)", "modifiers": "", "return": "void", "signature": "void update(Object feature)", "full_signature": " void update(Object feature)", "class_method_signature": "GeoToolsLayer.update(Object feature)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(String featureId)", "modifiers": "@Override @Transactional(rollbackFor = { Throwable.class }) public", "return": "void", "signature": "void delete(String featureId)", "full_signature": "@Override @Transactional(rollbackFor = { Throwable.class }) public void delete(String featureId)", "class_method_signature": "GeoToolsLayer.delete(String featureId)", "testcase": false, "constructor": false}, {"identifier": "saveOrUpdate", "parameters": "(Object feature)", "modifiers": "@Override @Transactional(rollbackFor = { Throwable.class }) public", "return": "Object", "signature": "Object saveOrUpdate(Object feature)", "full_signature": "@Override @Transactional(rollbackFor = { Throwable.class }) public Object saveOrUpdate(Object feature)", "class_method_signature": "GeoToolsLayer.saveOrUpdate(Object feature)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(String featureId)", "modifiers": "@Override public", "return": "Object", "signature": "Object read(String featureId)", "full_signature": "@Override public Object read(String featureId)", "class_method_signature": "GeoToolsLayer.read(String featureId)", "testcase": false, "constructor": false}, {"identifier": "getBounds", "parameters": "()", "modifiers": "@Override public", "return": "Envelope", "signature": "Envelope getBounds()", "full_signature": "@Override public Envelope getBounds()", "class_method_signature": "GeoToolsLayer.getBounds()", "testcase": false, "constructor": false}, {"identifier": "getBounds", "parameters": "(Filter filter)", "modifiers": "@Override public", "return": "Envelope", "signature": "Envelope getBounds(Filter filter)", "full_signature": "@Override public Envelope getBounds(Filter filter)", "class_method_signature": "GeoToolsLayer.getBounds(Filter filter)", "testcase": false, "constructor": false}, {"identifier": "getElements", "parameters": "(Filter filter, int offset, int maxResultSize)", "modifiers": "@Transactional(readOnly = true) public", "return": "Iterator<?>", "signature": "Iterator<?> getElements(Filter filter, int offset, int maxResultSize)", "full_signature": "@Transactional(readOnly = true) public Iterator<?> getElements(Filter filter, int offset, int maxResultSize)", "class_method_signature": "GeoToolsLayer.getElements(Filter filter, int offset, int maxResultSize)", "testcase": false, "constructor": false}, {"identifier": "getFeatureModel", "parameters": "()", "modifiers": "@Override public", "return": "FeatureModel", "signature": "FeatureModel getFeatureModel()", "full_signature": "@Override public FeatureModel getFeatureModel()", "class_method_signature": "GeoToolsLayer.getFeatureModel()", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(String featureId)", "modifiers": "private", "return": "boolean", "signature": "boolean exists(String featureId)", "full_signature": "private boolean exists(String featureId)", "class_method_signature": "GeoToolsLayer.exists(String featureId)", "testcase": false, "constructor": false}, {"identifier": "getDataStore", "parameters": "()", "modifiers": "@Override public", "return": "DataStore", "signature": "DataStore getDataStore()", "full_signature": "@Override public DataStore getDataStore()", "class_method_signature": "GeoToolsLayer.getDataStore()", "testcase": false, "constructor": false}, {"identifier": "retryInitFeatures", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void retryInitFeatures()", "full_signature": "private void retryInitFeatures()", "class_method_signature": "GeoToolsLayer.retryInitFeatures()", "testcase": false, "constructor": false}, {"identifier": "getFeatureSource", "parameters": "()", "modifiers": "@Override public", "return": "SimpleFeatureSource", "signature": "SimpleFeatureSource getFeatureSource()", "full_signature": "@Override public SimpleFeatureSource getFeatureSource()", "class_method_signature": "GeoToolsLayer.getFeatureSource()", "testcase": false, "constructor": false}], "file": "plugin/layer-geotools/geotools/src/main/java/org/geomajas/layer/geotools/GeoToolsLayer.java"}, "focal_method": {"identifier": "delete", "parameters": "(String featureId)", "modifiers": "@Override @Transactional(rollbackFor = { Throwable.class }) public", "return": "void", "body": "@Override\n\t@Transactional(rollbackFor = { Throwable.class })\n\tpublic void delete(String featureId) throws LayerException {\n\t\tSimpleFeatureSource source = getFeatureSource();\n\t\tif (source instanceof SimpleFeatureStore) {\n\t\t\tSimpleFeatureStore store = (SimpleFeatureStore) source;\n\t\t\tFilter filter = filterService.createFidFilter(new String[] { featureId });\n\t\t\ttransactionSynchronization.synchTransaction(store);\n\t\t\ttry {\n\t\t\t\tstore.removeFeatures(filter);\n\t\t\t\tif (log.isDebugEnabled()) {\n\t\t\t\t\tlog.debug(\"Deleted feature {} in {}\", featureId, getFeatureSourceName());\n\t\t\t\t}\n\t\t\t} catch (IOException ioe) {\n\t\t\t\tfeatureModelUsable = false;\n\t\t\t\tthrow new LayerException(ioe, ExceptionCode.LAYER_MODEL_IO_EXCEPTION);\n\t\t\t}\n\t\t} else {\n\t\t\tlog.error(\"Don't know how to delete from \" + getFeatureSourceName() + \", class \"\n\t\t\t\t\t+ source.getClass().getName() + \" does not implement SimpleFeatureStore\");\n\t\t\tthrow new LayerException(ExceptionCode.DELETE_NOT_IMPLEMENTED, getFeatureSourceName(), source.getClass()\n\t\t\t\t\t.getName());\n\t\t}\n\t}", "signature": "void delete(String featureId)", "full_signature": "@Override @Transactional(rollbackFor = { Throwable.class }) public void delete(String featureId)", "class_method_signature": "GeoToolsLayer.delete(String featureId)", "testcase": false, "constructor": false, "invocations": ["getFeatureSource", "createFidFilter", "synchTransaction", "removeFeatures", "isDebugEnabled", "debug", "getFeatureSourceName", "error", "getFeatureSourceName", "getName", "getClass", "getFeatureSourceName", "getName", "getClass"]}, "repository": {"repo_id": 14505280, "url": "https://github.com/geomajas/geomajas-project-server", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 13, "size": 124882, "license": "licensed"}}