{"test_class": {"identifier": "PharmacophoreQueryAtomTest", "superclass": "", "interfaces": "", "fields": [], "file": "tool/pcore/src/test/java/org/openscience/cdk/pharmacophore/PharmacophoreQueryAtomTest.java"}, "test_case": {"identifier": "testMatches", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMatches() {\n        PharmacophoreQueryAtom qatom = new PharmacophoreQueryAtom(\"aromatic\", \"c1ccccc1\");\n\n        PharmacophoreAtom patom1 = new PharmacophoreAtom(\"c1ccccc1\", \"aromatic\", new Point3d(0, 0, 0));\n        PharmacophoreAtom patom2 = new PharmacophoreAtom(\"c1ccccc1\", \"hydrophobic\", new Point3d(0, 0, 0));\n        PharmacophoreAtom patom3 = new PharmacophoreAtom(\"Cc1ccccc1\", \"aromatic\", new Point3d(0, 0, 0));\n        PharmacophoreAtom patom4 = new PharmacophoreAtom(\"[CX2]N\", \"amine\", new Point3d(0, 0, 0));\n\n        Assert.assertTrue(qatom.matches(patom1));\n        Assert.assertFalse(qatom.matches(patom2));\n\n        Assert.assertTrue(qatom.matches(patom3));\n        Assert.assertFalse(qatom.matches(patom4));\n    }", "signature": "void testMatches()", "full_signature": "@Test public void testMatches()", "class_method_signature": "PharmacophoreQueryAtomTest.testMatches()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "matches", "assertFalse", "matches", "assertTrue", "matches", "assertFalse", "matches"]}, "focal_class": {"identifier": "PharmacophoreQueryAtom", "superclass": "extends Atom", "interfaces": "implements IQueryAtom", "fields": [{"original_string": "private String smarts;", "modifier": "private", "type": "String", "declarator": "smarts", "var_name": "smarts"}, {"original_string": "private SmartsPattern[] compiledSmarts;", "modifier": "private", "type": "SmartsPattern[]", "declarator": "compiledSmarts", "var_name": "compiledSmarts"}, {"original_string": "private String symbol;", "modifier": "private", "type": "String", "declarator": "symbol", "var_name": "symbol"}], "methods": [{"identifier": "PharmacophoreQueryAtom", "parameters": "(String symbol, String smarts)", "modifiers": "public", "return": "", "signature": " PharmacophoreQueryAtom(String symbol, String smarts)", "full_signature": "public  PharmacophoreQueryAtom(String symbol, String smarts)", "class_method_signature": "PharmacophoreQueryAtom.PharmacophoreQueryAtom(String symbol, String smarts)", "testcase": false, "constructor": true}, {"identifier": "getSymbol", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getSymbol()", "full_signature": "@Override public String getSymbol()", "class_method_signature": "PharmacophoreQueryAtom.getSymbol()", "testcase": false, "constructor": false}, {"identifier": "setSymbol", "parameters": "(String symbol)", "modifiers": "@Override public", "return": "void", "signature": "void setSymbol(String symbol)", "full_signature": "@Override public void setSymbol(String symbol)", "class_method_signature": "PharmacophoreQueryAtom.setSymbol(String symbol)", "testcase": false, "constructor": false}, {"identifier": "getSmarts", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSmarts()", "full_signature": "public String getSmarts()", "class_method_signature": "PharmacophoreQueryAtom.getSmarts()", "testcase": false, "constructor": false}, {"identifier": "getCompiledSmarts", "parameters": "()", "modifiers": "", "return": "SmartsPattern[]", "signature": "SmartsPattern[] getCompiledSmarts()", "full_signature": " SmartsPattern[] getCompiledSmarts()", "class_method_signature": "PharmacophoreQueryAtom.getCompiledSmarts()", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(IAtom atom)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean matches(IAtom atom)", "full_signature": "@Override public boolean matches(IAtom atom)", "class_method_signature": "PharmacophoreQueryAtom.matches(IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PharmacophoreQueryAtom.toString()", "testcase": false, "constructor": false}], "file": "tool/pcore/src/main/java/org/openscience/cdk/pharmacophore/PharmacophoreQueryAtom.java"}, "focal_method": {"identifier": "matches", "parameters": "(IAtom atom)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean matches(IAtom atom) {\n        PharmacophoreAtom patom = PharmacophoreAtom.get(atom);\n        return patom.getSymbol().equals(getSymbol());\n    }", "signature": "boolean matches(IAtom atom)", "full_signature": "@Override public boolean matches(IAtom atom)", "class_method_signature": "PharmacophoreQueryAtom.matches(IAtom atom)", "testcase": false, "constructor": false, "invocations": ["get", "equals", "getSymbol", "getSymbol"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}