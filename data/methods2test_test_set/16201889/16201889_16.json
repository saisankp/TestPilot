{"test_class": {"identifier": "ParserConfigsTest", "superclass": "", "interfaces": "", "fields": [], "file": "name-parser/src/test/java/org/gbif/nameparser/ParserConfigsTest.java"}, "test_case": {"identifier": "norm", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void norm() {\n    assertNorm(\"zur strassen 1973\", \"zur Strassen,  1973\");\n    assertNorm(\"zur strassen 1973\", \"zur Strassen , 1973\");\n    assertNorm(\"zur strassen 1973\", \" zur Strassen, 1973\");\n    assertNorm(\"zur strassen 1973\", \"zur Strassen,1973\");\n    assertNorm(\"zur strassen 1973\", \"zur  Strassen 1973 \");\n    assertNorm(\" ( zur strassen 1973 ) \", \"(zur Strassen, 1973)\");\n    assertNorm(\" ( zur ) strassen 1973\", \"(zur) Strassen 1973\");\n    assertNorm(\" ( zur strassen 1973 ) markus\", \"(zur Strassen, 1973) Markus\");\n    assertNorm(\" ( zur strassen 1973 ) markus\", \"( zur Strassen 1973 )  Markus  \");\n    assertNorm(\" ( zur strassen 1973 ) markus\", \" ( zur Strassen, 1973 )Markus\");\n    assertNorm(\" ( zur strassen 1973 ) markus\", \"( zur Strassen, 1973 )Markus\");\n    assertNorm(\" ( z\u00far stra\u00dfen 1973 ) m\u00e4rkus\", \"( z\u00far Stra\u00dfen, 1973 )M\u00e4rkus\");\n    assertNorm(\" ( zur strassen 1973 ) markus robert\", \"( zur Strassen, 1973 ) Markus & RObert\");\n  }", "signature": "void norm()", "full_signature": "@Test public void norm()", "class_method_signature": "ParserConfigsTest.norm()", "testcase": true, "constructor": false, "invocations": ["assertNorm", "assertNorm", "assertNorm", "assertNorm", "assertNorm", "assertNorm", "assertNorm", "assertNorm", "assertNorm", "assertNorm", "assertNorm", "assertNorm", "assertNorm"]}, "focal_class": {"identifier": "ParserConfigs", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static Pattern MORE_WS = Pattern.compile(\"[\\\\s,.+'\\\"&_\u2014|-]+\");", "modifier": "private final static", "type": "Pattern", "declarator": "MORE_WS = Pattern.compile(\"[\\\\s,.+'\\\"&_\u2014|-]+\");", "var_name": "MORE_WS"}, {"original_string": "private final static Pattern MORE_WS2 = Pattern.compile(\"\\\\s*([(){}\\\\[\\\\]]+)\\\\s*\");", "modifier": "private final static", "type": "Pattern", "declarator": "MORE_WS2 = Pattern.compile(\"\\\\s*([(){}\\\\[\\\\]]+)\\\\s*\")", "var_name": "MORE_WS2"}, {"original_string": "private final Map<String, ParsedName> names = new HashMap<>();", "modifier": "private final", "type": "Map<String, ParsedName>", "declarator": "names = new HashMap<>()", "var_name": "names"}, {"original_string": "private final Map<String, ParsedAuthorship> authorships = new HashMap<>();", "modifier": "private final", "type": "Map<String, ParsedAuthorship>", "declarator": "authorships = new HashMap<>()", "var_name": "authorships"}], "methods": [{"identifier": "forName", "parameters": "(String name)", "modifiers": "public", "return": "ParsedName", "signature": "ParsedName forName(String name)", "full_signature": "public ParsedName forName(String name)", "class_method_signature": "ParserConfigs.forName(String name)", "testcase": false, "constructor": false}, {"identifier": "forAuthorship", "parameters": "(String authorship)", "modifiers": "public", "return": "ParsedAuthorship", "signature": "ParsedAuthorship forAuthorship(String authorship)", "full_signature": "public ParsedAuthorship forAuthorship(String authorship)", "class_method_signature": "ParserConfigs.forAuthorship(String authorship)", "testcase": false, "constructor": false}, {"identifier": "setName", "parameters": "(String name, ParsedName pn)", "modifiers": "public", "return": "void", "signature": "void setName(String name, ParsedName pn)", "full_signature": "public void setName(String name, ParsedName pn)", "class_method_signature": "ParserConfigs.setName(String name, ParsedName pn)", "testcase": false, "constructor": false}, {"identifier": "deleteName", "parameters": "(String name)", "modifiers": "public", "return": "ParsedName", "signature": "ParsedName deleteName(String name)", "full_signature": "public ParsedName deleteName(String name)", "class_method_signature": "ParserConfigs.deleteName(String name)", "testcase": false, "constructor": false}, {"identifier": "setAuthorship", "parameters": "(String authorship, ParsedAuthorship pn)", "modifiers": "public", "return": "void", "signature": "void setAuthorship(String authorship, ParsedAuthorship pn)", "full_signature": "public void setAuthorship(String authorship, ParsedAuthorship pn)", "class_method_signature": "ParserConfigs.setAuthorship(String authorship, ParsedAuthorship pn)", "testcase": false, "constructor": false}, {"identifier": "deleteAuthorship", "parameters": "(String authorship)", "modifiers": "public", "return": "ParsedAuthorship", "signature": "ParsedAuthorship deleteAuthorship(String authorship)", "full_signature": "public ParsedAuthorship deleteAuthorship(String authorship)", "class_method_signature": "ParserConfigs.deleteAuthorship(String authorship)", "testcase": false, "constructor": false}, {"identifier": "norm", "parameters": "(String x)", "modifiers": "static", "return": "String", "signature": "String norm(String x)", "full_signature": "static String norm(String x)", "class_method_signature": "ParserConfigs.norm(String x)", "testcase": false, "constructor": false}], "file": "name-parser/src/main/java/org/gbif/nameparser/ParserConfigs.java"}, "focal_method": {"identifier": "norm", "parameters": "(String x)", "modifiers": "static", "return": "String", "body": "static String norm(String x) {\n    x = ParsingJob.preClean(x, null).toLowerCase();\n    x = MORE_WS.matcher(x).replaceAll(\" \");\n    return MORE_WS2.matcher(x).replaceAll(\" $1 \");\n  }", "signature": "String norm(String x)", "full_signature": "static String norm(String x)", "class_method_signature": "ParserConfigs.norm(String x)", "testcase": false, "constructor": false, "invocations": ["toLowerCase", "preClean", "replaceAll", "matcher", "replaceAll", "matcher"]}, "repository": {"repo_id": 16201889, "url": "https://github.com/gbif/name-parser", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 11, "size": 1978, "license": "licensed"}}