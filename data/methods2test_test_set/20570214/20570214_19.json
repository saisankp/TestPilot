{"test_class": {"identifier": "ChaCha20Poly1305KeyManagerTest", "superclass": "", "interfaces": "", "fields": [], "file": "java_src/src/test/java/com/google/crypto/tink/aead/ChaCha20Poly1305KeyManagerTest.java"}, "test_case": {"identifier": "createKey_multipleCallsCreateDifferentKeys", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void createKey_multipleCallsCreateDifferentKeys() throws Exception {\n    TreeSet<String> keys = new TreeSet<>();\n    KeyTypeManager.KeyFactory<ChaCha20Poly1305KeyFormat, ChaCha20Poly1305Key> factory =\n        new ChaCha20Poly1305KeyManager().keyFactory();\n    final int numKeys = 1000;\n    for (int i = 0; i < numKeys; ++i) {\n      keys.add(\n          TestUtil.hexEncode(\n              factory.createKey(ChaCha20Poly1305KeyFormat.getDefaultInstance()).toByteArray()));\n    }\n    assertThat(keys).hasSize(numKeys);\n  }", "signature": "void createKey_multipleCallsCreateDifferentKeys()", "full_signature": "@Test public void createKey_multipleCallsCreateDifferentKeys()", "class_method_signature": "ChaCha20Poly1305KeyManagerTest.createKey_multipleCallsCreateDifferentKeys()", "testcase": true, "constructor": false, "invocations": ["keyFactory", "add", "hexEncode", "toByteArray", "createKey", "getDefaultInstance", "hasSize", "assertThat"]}, "focal_class": {"identifier": "ChaCha20Poly1305KeyManager", "superclass": "extends KeyTypeManager<ChaCha20Poly1305Key>", "interfaces": "", "fields": [{"original_string": "private static final int KEY_SIZE_IN_BYTES = 32;", "modifier": "private static final", "type": "int", "declarator": "KEY_SIZE_IN_BYTES = 32", "var_name": "KEY_SIZE_IN_BYTES"}], "methods": [{"identifier": "ChaCha20Poly1305KeyManager", "parameters": "()", "modifiers": "", "return": "", "signature": " ChaCha20Poly1305KeyManager()", "full_signature": "  ChaCha20Poly1305KeyManager()", "class_method_signature": "ChaCha20Poly1305KeyManager.ChaCha20Poly1305KeyManager()", "testcase": false, "constructor": true}, {"identifier": "getKeyType", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getKeyType()", "full_signature": "@Override public String getKeyType()", "class_method_signature": "ChaCha20Poly1305KeyManager.getKeyType()", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getVersion()", "full_signature": "@Override public int getVersion()", "class_method_signature": "ChaCha20Poly1305KeyManager.getVersion()", "testcase": false, "constructor": false}, {"identifier": "keyMaterialType", "parameters": "()", "modifiers": "@Override public", "return": "KeyMaterialType", "signature": "KeyMaterialType keyMaterialType()", "full_signature": "@Override public KeyMaterialType keyMaterialType()", "class_method_signature": "ChaCha20Poly1305KeyManager.keyMaterialType()", "testcase": false, "constructor": false}, {"identifier": "validateKey", "parameters": "(ChaCha20Poly1305Key key)", "modifiers": "@Override public", "return": "void", "signature": "void validateKey(ChaCha20Poly1305Key key)", "full_signature": "@Override public void validateKey(ChaCha20Poly1305Key key)", "class_method_signature": "ChaCha20Poly1305KeyManager.validateKey(ChaCha20Poly1305Key key)", "testcase": false, "constructor": false}, {"identifier": "parseKey", "parameters": "(ByteString byteString)", "modifiers": "@Override public", "return": "ChaCha20Poly1305Key", "signature": "ChaCha20Poly1305Key parseKey(ByteString byteString)", "full_signature": "@Override public ChaCha20Poly1305Key parseKey(ByteString byteString)", "class_method_signature": "ChaCha20Poly1305KeyManager.parseKey(ByteString byteString)", "testcase": false, "constructor": false}, {"identifier": "keyFactory", "parameters": "()", "modifiers": "@Override public", "return": "KeyFactory<ChaCha20Poly1305KeyFormat, ChaCha20Poly1305Key>", "signature": "KeyFactory<ChaCha20Poly1305KeyFormat, ChaCha20Poly1305Key> keyFactory()", "full_signature": "@Override public KeyFactory<ChaCha20Poly1305KeyFormat, ChaCha20Poly1305Key> keyFactory()", "class_method_signature": "ChaCha20Poly1305KeyManager.keyFactory()", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(boolean newKeyAllowed)", "modifiers": "public static", "return": "void", "signature": "void register(boolean newKeyAllowed)", "full_signature": "public static void register(boolean newKeyAllowed)", "class_method_signature": "ChaCha20Poly1305KeyManager.register(boolean newKeyAllowed)", "testcase": false, "constructor": false}, {"identifier": "chaCha20Poly1305Template", "parameters": "()", "modifiers": "public static final", "return": "KeyTemplate", "signature": "KeyTemplate chaCha20Poly1305Template()", "full_signature": "public static final KeyTemplate chaCha20Poly1305Template()", "class_method_signature": "ChaCha20Poly1305KeyManager.chaCha20Poly1305Template()", "testcase": false, "constructor": false}, {"identifier": "rawChaCha20Poly1305Template", "parameters": "()", "modifiers": "public static final", "return": "KeyTemplate", "signature": "KeyTemplate rawChaCha20Poly1305Template()", "full_signature": "public static final KeyTemplate rawChaCha20Poly1305Template()", "class_method_signature": "ChaCha20Poly1305KeyManager.rawChaCha20Poly1305Template()", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/aead/ChaCha20Poly1305KeyManager.java"}, "focal_method": {"identifier": "keyFactory", "parameters": "()", "modifiers": "@Override public", "return": "KeyFactory<ChaCha20Poly1305KeyFormat, ChaCha20Poly1305Key>", "body": "@Override\n  public KeyFactory<ChaCha20Poly1305KeyFormat, ChaCha20Poly1305Key> keyFactory() {\n    return new KeyFactory<ChaCha20Poly1305KeyFormat, ChaCha20Poly1305Key>(\n        ChaCha20Poly1305KeyFormat.class) {\n      @Override\n      public void validateKeyFormat(ChaCha20Poly1305KeyFormat format)\n          throws GeneralSecurityException {}\n\n      @Override\n      public ChaCha20Poly1305KeyFormat parseKeyFormat(ByteString byteString)\n          throws InvalidProtocolBufferException {\n        return ChaCha20Poly1305KeyFormat.parseFrom(\n            byteString, ExtensionRegistryLite.getEmptyRegistry());\n      }\n\n      @Override\n      public ChaCha20Poly1305Key createKey(ChaCha20Poly1305KeyFormat format)\n          throws GeneralSecurityException {\n        return ChaCha20Poly1305Key.newBuilder()\n            .setVersion(getVersion())\n            .setKeyValue(ByteString.copyFrom(Random.randBytes(KEY_SIZE_IN_BYTES)))\n            .build();\n      }\n    };\n  }", "signature": "KeyFactory<ChaCha20Poly1305KeyFormat, ChaCha20Poly1305Key> keyFactory()", "full_signature": "@Override public KeyFactory<ChaCha20Poly1305KeyFormat, ChaCha20Poly1305Key> keyFactory()", "class_method_signature": "ChaCha20Poly1305KeyManager.keyFactory()", "testcase": false, "constructor": false, "invocations": ["parseFrom", "getEmptyRegistry", "build", "setKeyValue", "setVersion", "newBuilder", "getVersion", "copyFrom", "randBytes"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}