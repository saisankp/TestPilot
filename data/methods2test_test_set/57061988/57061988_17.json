{"test_class": {"identifier": "SshGeneratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SshGenerator subject;", "modifier": "private", "type": "SshGenerator", "declarator": "subject", "var_name": "subject"}, {"original_string": "private RsaKeyPairGenerator keyPairGeneratorMock;", "modifier": "private", "type": "RsaKeyPairGenerator", "declarator": "keyPairGeneratorMock", "var_name": "keyPairGeneratorMock"}, {"original_string": "private KeyPair keyPair;", "modifier": "private", "type": "KeyPair", "declarator": "keyPair", "var_name": "keyPair"}], "file": "components/credentials/src/test/java/org/cloudfoundry/credhub/generators/SshGeneratorTest.java"}, "test_case": {"identifier": "generateCredential_shouldReturnAGeneratedCredential", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void generateCredential_shouldReturnAGeneratedCredential() throws Exception {\n    final SshCredentialValue ssh = subject.generateCredential(new SshGenerationParameters());\n\n    verify(keyPairGeneratorMock).generateKeyPair(2048);\n\n    assertThat(ssh.getPublicKey(),\n      equalTo(CertificateFormatter.derOf((RSAPublicKey) keyPair.getPublic())));\n    assertThat(ssh.getPrivateKey(), equalTo(CertificateFormatter.pemOf(keyPair.getPrivate())));\n  }", "signature": "void generateCredential_shouldReturnAGeneratedCredential()", "full_signature": "@Test public void generateCredential_shouldReturnAGeneratedCredential()", "class_method_signature": "SshGeneratorTest.generateCredential_shouldReturnAGeneratedCredential()", "testcase": true, "constructor": false, "invocations": ["generateCredential", "generateKeyPair", "verify", "assertThat", "getPublicKey", "equalTo", "derOf", "getPublic", "assertThat", "getPrivateKey", "equalTo", "pemOf", "getPrivate"]}, "focal_class": {"identifier": "SshGenerator", "superclass": "", "interfaces": "implements CredentialGenerator<SshCredentialValue>", "fields": [{"original_string": "private final RsaKeyPairGenerator keyGenerator;", "modifier": "private final", "type": "RsaKeyPairGenerator", "declarator": "keyGenerator", "var_name": "keyGenerator"}], "methods": [{"identifier": "SshGenerator", "parameters": "(final RsaKeyPairGenerator keyGenerator)", "modifiers": "@Autowired public", "return": "", "signature": " SshGenerator(final RsaKeyPairGenerator keyGenerator)", "full_signature": "@Autowired public  SshGenerator(final RsaKeyPairGenerator keyGenerator)", "class_method_signature": "SshGenerator.SshGenerator(final RsaKeyPairGenerator keyGenerator)", "testcase": false, "constructor": true}, {"identifier": "generateCredential", "parameters": "(final GenerationParameters p)", "modifiers": "@Override public", "return": "SshCredentialValue", "signature": "SshCredentialValue generateCredential(final GenerationParameters p)", "full_signature": "@Override public SshCredentialValue generateCredential(final GenerationParameters p)", "class_method_signature": "SshGenerator.generateCredential(final GenerationParameters p)", "testcase": false, "constructor": false}], "file": "components/credentials/src/main/java/org/cloudfoundry/credhub/generators/SshGenerator.java"}, "focal_method": {"identifier": "generateCredential", "parameters": "(final GenerationParameters p)", "modifiers": "@Override public", "return": "SshCredentialValue", "body": "@Override\n  public SshCredentialValue generateCredential(final GenerationParameters p) {\n    final SshGenerationParameters params = (SshGenerationParameters) p;\n    try {\n      final KeyPair keyPair = keyGenerator.generateKeyPair(params.getKeyLength());\n      final String sshComment = params.getSshComment();\n      final String sshCommentMessage = StringUtils.isEmpty(sshComment) ? \"\" : \" \" + sshComment;\n\n      final String publicKey =\n        CertificateFormatter.derOf((RSAPublicKey) keyPair.getPublic()) + sshCommentMessage;\n      final String privateKey = CertificateFormatter.pemOf(keyPair.getPrivate());\n\n      return new SshCredentialValue(publicKey, privateKey, null);\n    } catch (final Exception e) {\n      throw new RuntimeException(e);\n    }\n  }", "signature": "SshCredentialValue generateCredential(final GenerationParameters p)", "full_signature": "@Override public SshCredentialValue generateCredential(final GenerationParameters p)", "class_method_signature": "SshGenerator.generateCredential(final GenerationParameters p)", "testcase": false, "constructor": false, "invocations": ["generateKeyPair", "getKeyLength", "getSshComment", "isEmpty", "derOf", "getPublic", "pemOf", "getPrivate"]}, "repository": {"repo_id": 57061988, "url": "https://github.com/cloudfoundry-incubator/credhub", "stars": 167, "created": "4/25/2016 5:30:51 PM +00:00", "updates": "2020-01-27T21:31:19+00:00", "fork": "False", "license": "licensed"}}