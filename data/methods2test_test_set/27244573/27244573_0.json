{"test_class": {"identifier": "DistoXProtocolTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final byte i = 0b00000000;", "modifier": "private static final", "type": "byte", "declarator": "i = 0b00000000", "var_name": "i"}], "file": "app/src/test/java/org/hwyl/sexytopo/comms/DistoXProtocolTest.java"}, "test_case": {"identifier": "testAcknowledgePacketMatchesByteEndingIn1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAcknowledgePacketMatchesByteEndingIn1() {\n        byte control = 0b00000001;\n        byte[] packet = new byte[]{control, i, i, i, i, i, i, i};\n        byte actual = DistoXProtocol.createAcknowledgementPacket(packet)[0];\n        Assert.assertEquals((byte)0b01010101, actual);\n    }", "signature": "void testAcknowledgePacketMatchesByteEndingIn1()", "full_signature": "@Test public void testAcknowledgePacketMatchesByteEndingIn1()", "class_method_signature": "DistoXProtocolTest.testAcknowledgePacketMatchesByteEndingIn1()", "testcase": true, "constructor": false, "invocations": ["createAcknowledgementPacket", "assertEquals"]}, "focal_class": {"identifier": "DistoXProtocol", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int INTER_PACKET_DELAY = 100;", "modifier": "public static final", "type": "int", "declarator": "INTER_PACKET_DELAY = 100", "var_name": "INTER_PACKET_DELAY"}, {"original_string": "public static final int WAIT_BETWEEN_CONNECTION_ATTEMPTS_MS = 5 * 1000;", "modifier": "public static final", "type": "int", "declarator": "WAIT_BETWEEN_CONNECTION_ATTEMPTS_MS = 5 * 1000", "var_name": "WAIT_BETWEEN_CONNECTION_ATTEMPTS_MS"}, {"original_string": "public static final int ADMIN = 0;", "modifier": "public static final", "type": "int", "declarator": "ADMIN = 0", "var_name": "ADMIN"}, {"original_string": "public static final int SEQUENCE_BIT_MASK = 0b10000000;", "modifier": "public static final", "type": "int", "declarator": "SEQUENCE_BIT_MASK = 0b10000000", "var_name": "SEQUENCE_BIT_MASK"}, {"original_string": "public static final int ACKNOWLEDGEMENT_PACKET_BASE = 0b01010101;", "modifier": "public static final", "type": "int", "declarator": "ACKNOWLEDGEMENT_PACKET_BASE = 0b01010101", "var_name": "ACKNOWLEDGEMENT_PACKET_BASE"}, {"original_string": "protected SexyTopoActivity activity;", "modifier": "protected", "type": "SexyTopoActivity", "declarator": "activity", "var_name": "activity"}, {"original_string": "protected SurveyManager dataManager;", "modifier": "protected", "type": "SurveyManager", "declarator": "dataManager", "var_name": "dataManager"}, {"original_string": "protected BluetoothDevice bluetoothDevice;", "modifier": "protected", "type": "BluetoothDevice", "declarator": "bluetoothDevice", "var_name": "bluetoothDevice"}], "methods": [{"identifier": "DistoXProtocol", "parameters": "(\n            SexyTopoActivity activity, BluetoothDevice bluetoothDevice, SurveyManager dataManager)", "modifiers": "protected", "return": "", "signature": " DistoXProtocol(\n            SexyTopoActivity activity, BluetoothDevice bluetoothDevice, SurveyManager dataManager)", "full_signature": "protected  DistoXProtocol(\n            SexyTopoActivity activity, BluetoothDevice bluetoothDevice, SurveyManager dataManager)", "class_method_signature": "DistoXProtocol.DistoXProtocol(\n            SexyTopoActivity activity, BluetoothDevice bluetoothDevice, SurveyManager dataManager)", "testcase": false, "constructor": true}, {"identifier": "createAcknowledgementPacket", "parameters": "(byte[] packet)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] createAcknowledgementPacket(byte[] packet)", "full_signature": "public static byte[] createAcknowledgementPacket(byte[] packet)", "class_method_signature": "DistoXProtocol.createAcknowledgementPacket(byte[] packet)", "testcase": false, "constructor": false}, {"identifier": "acknowledge", "parameters": "(DataOutputStream outStream, byte[] packet)", "modifiers": "protected", "return": "void", "signature": "void acknowledge(DataOutputStream outStream, byte[] packet)", "full_signature": "protected void acknowledge(DataOutputStream outStream, byte[] packet)", "class_method_signature": "DistoXProtocol.acknowledge(DataOutputStream outStream, byte[] packet)", "testcase": false, "constructor": false}, {"identifier": "writeCommandPacket", "parameters": "(DataOutputStream outStream, byte[] packet)", "modifiers": "protected", "return": "void", "signature": "void writeCommandPacket(DataOutputStream outStream, byte[] packet)", "full_signature": "protected void writeCommandPacket(DataOutputStream outStream, byte[] packet)", "class_method_signature": "DistoXProtocol.writeCommandPacket(DataOutputStream outStream, byte[] packet)", "testcase": false, "constructor": false}, {"identifier": "readByte", "parameters": "(byte[] packet, int index)", "modifiers": "protected static", "return": "int", "signature": "int readByte(byte[] packet, int index)", "full_signature": "protected static int readByte(byte[] packet, int index)", "class_method_signature": "DistoXProtocol.readByte(byte[] packet, int index)", "testcase": false, "constructor": false}, {"identifier": "readDoubleByte", "parameters": "(byte[] packet, int lowByteIndex, int highByteIndex)", "modifiers": "protected static", "return": "int", "signature": "int readDoubleByte(byte[] packet, int lowByteIndex, int highByteIndex)", "full_signature": "protected static int readDoubleByte(byte[] packet, int lowByteIndex, int highByteIndex)", "class_method_signature": "DistoXProtocol.readDoubleByte(byte[] packet, int lowByteIndex, int highByteIndex)", "testcase": false, "constructor": false}, {"identifier": "go", "parameters": "(DataInputStream inStream, DataOutputStream outStream)", "modifiers": "public abstract", "return": "void", "signature": "void go(DataInputStream inStream, DataOutputStream outStream)", "full_signature": "public abstract void go(DataInputStream inStream, DataOutputStream outStream)", "class_method_signature": "DistoXProtocol.go(DataInputStream inStream, DataOutputStream outStream)", "testcase": false, "constructor": false}, {"identifier": "readPacket", "parameters": "(DataInputStream inStream)", "modifiers": "protected", "return": "byte[]", "signature": "byte[] readPacket(DataInputStream inStream)", "full_signature": "protected byte[] readPacket(DataInputStream inStream)", "class_method_signature": "DistoXProtocol.readPacket(DataInputStream inStream)", "testcase": false, "constructor": false}, {"identifier": "arePacketsTheSame", "parameters": "(byte[] packet0, byte[] packet1)", "modifiers": "public static", "return": "boolean", "signature": "boolean arePacketsTheSame(byte[] packet0, byte[] packet1)", "full_signature": "public static boolean arePacketsTheSame(byte[] packet0, byte[] packet1)", "class_method_signature": "DistoXProtocol.arePacketsTheSame(byte[] packet0, byte[] packet1)", "testcase": false, "constructor": false}, {"identifier": "isDataPacket", "parameters": "(byte[] packet)", "modifiers": "protected static", "return": "boolean", "signature": "boolean isDataPacket(byte[] packet)", "full_signature": "protected static boolean isDataPacket(byte[] packet)", "class_method_signature": "DistoXProtocol.isDataPacket(byte[] packet)", "testcase": false, "constructor": false}, {"identifier": "describePacket", "parameters": "(byte[] packet)", "modifiers": "@SuppressLint(\"all\") public static", "return": "String", "signature": "String describePacket(byte[] packet)", "full_signature": "@SuppressLint(\"all\") public static String describePacket(byte[] packet)", "class_method_signature": "DistoXProtocol.describePacket(byte[] packet)", "testcase": false, "constructor": false}, {"identifier": "asBinaryString", "parameters": "(int theByte)", "modifiers": "public static", "return": "String", "signature": "String asBinaryString(int theByte)", "full_signature": "public static String asBinaryString(int theByte)", "class_method_signature": "DistoXProtocol.asBinaryString(int theByte)", "testcase": false, "constructor": false}, {"identifier": "describeAcknowledgementPacket", "parameters": "(byte[] acknowledgementPacket)", "modifiers": "public static", "return": "String", "signature": "String describeAcknowledgementPacket(byte[] acknowledgementPacket)", "full_signature": "public static String describeAcknowledgementPacket(byte[] acknowledgementPacket)", "class_method_signature": "DistoXProtocol.describeAcknowledgementPacket(byte[] acknowledgementPacket)", "testcase": false, "constructor": false}], "file": "app/src/main/java/org/hwyl/sexytopo/comms/DistoXProtocol.java"}, "focal_method": {"identifier": "createAcknowledgementPacket", "parameters": "(byte[] packet)", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] createAcknowledgementPacket(byte[] packet) {\n        byte[] acknowledgePacket = new byte[1];\n        acknowledgePacket[0] = (byte)\n                ((packet[ADMIN] & SEQUENCE_BIT_MASK) | ACKNOWLEDGEMENT_PACKET_BASE);\n\n        return acknowledgePacket;\n    }", "signature": "byte[] createAcknowledgementPacket(byte[] packet)", "full_signature": "public static byte[] createAcknowledgementPacket(byte[] packet)", "class_method_signature": "DistoXProtocol.createAcknowledgementPacket(byte[] packet)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 27244573, "url": "https://github.com/richsmith/sexytopo", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 15, "size": 83635, "license": "licensed"}}