{"test_class": {"identifier": "MediaTypeHeaderDelegateTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MediaTypeHeaderDelegate mediaTypeHeaderDelegate;", "modifier": "private", "type": "MediaTypeHeaderDelegate", "declarator": "mediaTypeHeaderDelegate", "var_name": "mediaTypeHeaderDelegate"}], "file": "everrest-core/src/test/java/org/everrest/core/impl/header/MediaTypeHeaderDelegateTest.java"}, "test_case": {"identifier": "fromString", "parameters": "(String header, MediaType expectedResult)", "modifiers": "@UseDataProvider(\"forFromString\") @Test public", "return": "void", "body": "@UseDataProvider(\"forFromString\")\n    @Test\n    public void fromString(String header, MediaType expectedResult) {\n        MediaType mediaType = mediaTypeHeaderDelegate.fromString(header);\n        assertEquals(expectedResult, mediaType);\n\n    }", "signature": "void fromString(String header, MediaType expectedResult)", "full_signature": "@UseDataProvider(\"forFromString\") @Test public void fromString(String header, MediaType expectedResult)", "class_method_signature": "MediaTypeHeaderDelegateTest.fromString(String header, MediaType expectedResult)", "testcase": true, "constructor": false, "invocations": ["fromString", "assertEquals"]}, "focal_class": {"identifier": "MediaTypeHeaderDelegate", "superclass": "", "interfaces": "implements RuntimeDelegate.HeaderDelegate<MediaType>", "fields": [{"original_string": "private static final char SUB_TYPE_SEPARATOR = '/';", "modifier": "private static final", "type": "char", "declarator": "SUB_TYPE_SEPARATOR = '/'", "var_name": "SUB_TYPE_SEPARATOR"}, {"original_string": "private static final char PARAMS_SEPARATOR = ';';", "modifier": "private static final", "type": "char", "declarator": "PARAMS_SEPARATOR = ';'", "var_name": "PARAMS_SEPARATOR"}], "methods": [{"identifier": "fromString", "parameters": "(String header)", "modifiers": "@Override public", "return": "MediaType", "signature": "MediaType fromString(String header)", "full_signature": "@Override public MediaType fromString(String header)", "class_method_signature": "MediaTypeHeaderDelegate.fromString(String header)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(MediaType mime)", "modifiers": "@Override public", "return": "String", "signature": "String toString(MediaType mime)", "full_signature": "@Override public String toString(MediaType mime)", "class_method_signature": "MediaTypeHeaderDelegate.toString(MediaType mime)", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/impl/header/MediaTypeHeaderDelegate.java"}, "focal_method": {"identifier": "fromString", "parameters": "(String header)", "modifiers": "@Override public", "return": "MediaType", "body": "@Override\n    public MediaType fromString(String header) {\n        if (header == null) {\n            throw new IllegalArgumentException();\n        }\n\n        try {\n            int subTypeSeparatorIndex = scan(header, SUB_TYPE_SEPARATOR);\n            int paramsSeparatorIndex = scan(header, PARAMS_SEPARATOR);\n\n            String type;\n            String subType;\n\n            if (charAtIsNot(header, subTypeSeparatorIndex, SUB_TYPE_SEPARATOR)\n                && charAtIsNot(header, paramsSeparatorIndex, PARAMS_SEPARATOR)) {\n\n                return new MediaType(header, null);\n\n            } else if (charAtIs(header, subTypeSeparatorIndex, SUB_TYPE_SEPARATOR)\n                       && charAtIsNot(header, paramsSeparatorIndex, PARAMS_SEPARATOR)) {\n\n                return new MediaType(removeWhitespaces(header.substring(0, subTypeSeparatorIndex)),\n                                     removeWhitespaces(header.substring(subTypeSeparatorIndex + 1)));\n\n            } else if (charAtIsNot(header, subTypeSeparatorIndex, SUB_TYPE_SEPARATOR) && paramsSeparatorIndex == 0) {\n\n                // string just start from ';'\n                type = null;\n                subType = null;\n\n            } else if (charAtIsNot(header, subTypeSeparatorIndex, SUB_TYPE_SEPARATOR)\n                       && charAtIs(header, paramsSeparatorIndex, PARAMS_SEPARATOR)) {\n\n                // there is no '/' but present ';'\n                type = removeWhitespaces(header.substring(0, paramsSeparatorIndex));\n                subType = null;\n\n            } else {\n\n                type = removeWhitespaces(header.substring(0, subTypeSeparatorIndex));\n                subType = header.substring(subTypeSeparatorIndex + 1, paramsSeparatorIndex);\n\n            }\n\n            Map<String, String> params = new HeaderParameterParser().parse(header);\n            return new MediaType(type, subType, params);\n\n        } catch (ParseException e) {\n            throw new IllegalArgumentException(e);\n        }\n    }", "signature": "MediaType fromString(String header)", "full_signature": "@Override public MediaType fromString(String header)", "class_method_signature": "MediaTypeHeaderDelegate.fromString(String header)", "testcase": false, "constructor": false, "invocations": ["scan", "scan", "charAtIsNot", "charAtIsNot", "charAtIs", "charAtIsNot", "removeWhitespaces", "substring", "removeWhitespaces", "substring", "charAtIsNot", "charAtIsNot", "charAtIs", "removeWhitespaces", "substring", "removeWhitespaces", "substring", "substring", "parse"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}