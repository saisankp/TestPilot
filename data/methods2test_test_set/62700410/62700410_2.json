{"test_class": {"identifier": "TestImageLoader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static long seed = 10;", "modifier": "private static", "type": "long", "declarator": "seed = 10", "var_name": "seed"}, {"original_string": "private static Random rng = new Random(seed);", "modifier": "private static", "type": "Random", "declarator": "rng = new Random(seed)", "var_name": "rng"}], "file": "datavec-data/datavec-data-image/src/test/java/org/datavec/image/loader/TestImageLoader.java"}, "test_case": {"identifier": "testToIntArrayArray", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToIntArrayArray() throws Exception {\n        BufferedImage img = makeRandomBufferedImage(true);\n\n        int w = img.getWidth();\n        int h = img.getHeight();\n        int ch = 4;\n        ImageLoader loader = new ImageLoader(0, 0, ch);\n        int[][] arr = loader.toIntArrayArray(img);\n\n        assertEquals(h, arr.length);\n        assertEquals(w, arr[0].length);\n\n        for (int i = 0; i < h; ++i) {\n            for (int j = 0; j < w; ++j) {\n                assertEquals(img.getRGB(j, i), arr[i][j]);\n            }\n        }\n    }", "signature": "void testToIntArrayArray()", "full_signature": "@Test public void testToIntArrayArray()", "class_method_signature": "TestImageLoader.testToIntArrayArray()", "testcase": true, "constructor": false, "invocations": ["makeRandomBufferedImage", "getWidth", "getHeight", "toIntArrayArray", "assertEquals", "assertEquals", "assertEquals", "getRGB"]}, "focal_class": {"identifier": "ImageLoader", "superclass": "extends BaseImageLoader", "interfaces": "", "fields": [], "methods": [{"identifier": "ImageLoader", "parameters": "()", "modifiers": "public", "return": "", "signature": " ImageLoader()", "full_signature": "public  ImageLoader()", "class_method_signature": "ImageLoader.ImageLoader()", "testcase": false, "constructor": true}, {"identifier": "ImageLoader", "parameters": "(int height, int width)", "modifiers": "public", "return": "", "signature": " ImageLoader(int height, int width)", "full_signature": "public  ImageLoader(int height, int width)", "class_method_signature": "ImageLoader.ImageLoader(int height, int width)", "testcase": false, "constructor": true}, {"identifier": "ImageLoader", "parameters": "(int height, int width, int channels)", "modifiers": "public", "return": "", "signature": " ImageLoader(int height, int width, int channels)", "full_signature": "public  ImageLoader(int height, int width, int channels)", "class_method_signature": "ImageLoader.ImageLoader(int height, int width, int channels)", "testcase": false, "constructor": true}, {"identifier": "ImageLoader", "parameters": "(int height, int width, int channels, boolean centerCropIfNeeded)", "modifiers": "public", "return": "", "signature": " ImageLoader(int height, int width, int channels, boolean centerCropIfNeeded)", "full_signature": "public  ImageLoader(int height, int width, int channels, boolean centerCropIfNeeded)", "class_method_signature": "ImageLoader.ImageLoader(int height, int width, int channels, boolean centerCropIfNeeded)", "testcase": false, "constructor": true}, {"identifier": "asRowVector", "parameters": "(File f)", "modifiers": "public", "return": "INDArray", "signature": "INDArray asRowVector(File f)", "full_signature": "public INDArray asRowVector(File f)", "class_method_signature": "ImageLoader.asRowVector(File f)", "testcase": false, "constructor": false}, {"identifier": "asRowVector", "parameters": "(InputStream inputStream)", "modifiers": "public", "return": "INDArray", "signature": "INDArray asRowVector(InputStream inputStream)", "full_signature": "public INDArray asRowVector(InputStream inputStream)", "class_method_signature": "ImageLoader.asRowVector(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "asRowVector", "parameters": "(BufferedImage image)", "modifiers": "public", "return": "INDArray", "signature": "INDArray asRowVector(BufferedImage image)", "full_signature": "public INDArray asRowVector(BufferedImage image)", "class_method_signature": "ImageLoader.asRowVector(BufferedImage image)", "testcase": false, "constructor": false}, {"identifier": "toRaveledTensor", "parameters": "(File file)", "modifiers": "public", "return": "INDArray", "signature": "INDArray toRaveledTensor(File file)", "full_signature": "public INDArray toRaveledTensor(File file)", "class_method_signature": "ImageLoader.toRaveledTensor(File file)", "testcase": false, "constructor": false}, {"identifier": "toRaveledTensor", "parameters": "(InputStream is)", "modifiers": "public", "return": "INDArray", "signature": "INDArray toRaveledTensor(InputStream is)", "full_signature": "public INDArray toRaveledTensor(InputStream is)", "class_method_signature": "ImageLoader.toRaveledTensor(InputStream is)", "testcase": false, "constructor": false}, {"identifier": "toRaveledTensor", "parameters": "(BufferedImage image)", "modifiers": "public", "return": "INDArray", "signature": "INDArray toRaveledTensor(BufferedImage image)", "full_signature": "public INDArray toRaveledTensor(BufferedImage image)", "class_method_signature": "ImageLoader.toRaveledTensor(BufferedImage image)", "testcase": false, "constructor": false}, {"identifier": "toBgr", "parameters": "(File file)", "modifiers": "public", "return": "INDArray", "signature": "INDArray toBgr(File file)", "full_signature": "public INDArray toBgr(File file)", "class_method_signature": "ImageLoader.toBgr(File file)", "testcase": false, "constructor": false}, {"identifier": "toBgr", "parameters": "(InputStream inputStream)", "modifiers": "public", "return": "INDArray", "signature": "INDArray toBgr(InputStream inputStream)", "full_signature": "public INDArray toBgr(InputStream inputStream)", "class_method_signature": "ImageLoader.toBgr(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "toBgrImage", "parameters": "(InputStream inputStream)", "modifiers": "private", "return": "org.datavec.image.data.Image", "signature": "org.datavec.image.data.Image toBgrImage(InputStream inputStream)", "full_signature": "private org.datavec.image.data.Image toBgrImage(InputStream inputStream)", "class_method_signature": "ImageLoader.toBgrImage(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "toBgr", "parameters": "(BufferedImage image)", "modifiers": "public", "return": "INDArray", "signature": "INDArray toBgr(BufferedImage image)", "full_signature": "public INDArray toBgr(BufferedImage image)", "class_method_signature": "ImageLoader.toBgr(BufferedImage image)", "testcase": false, "constructor": false}, {"identifier": "asMatrix", "parameters": "(File f)", "modifiers": "public", "return": "INDArray", "signature": "INDArray asMatrix(File f)", "full_signature": "public INDArray asMatrix(File f)", "class_method_signature": "ImageLoader.asMatrix(File f)", "testcase": false, "constructor": false}, {"identifier": "asMatrix", "parameters": "(InputStream inputStream)", "modifiers": "public", "return": "INDArray", "signature": "INDArray asMatrix(InputStream inputStream)", "full_signature": "public INDArray asMatrix(InputStream inputStream)", "class_method_signature": "ImageLoader.asMatrix(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "asImageMatrix", "parameters": "(File f)", "modifiers": "@Override public", "return": "org.datavec.image.data.Image", "signature": "org.datavec.image.data.Image asImageMatrix(File f)", "full_signature": "@Override public org.datavec.image.data.Image asImageMatrix(File f)", "class_method_signature": "ImageLoader.asImageMatrix(File f)", "testcase": false, "constructor": false}, {"identifier": "asImageMatrix", "parameters": "(InputStream inputStream)", "modifiers": "@Override public", "return": "org.datavec.image.data.Image", "signature": "org.datavec.image.data.Image asImageMatrix(InputStream inputStream)", "full_signature": "@Override public org.datavec.image.data.Image asImageMatrix(InputStream inputStream)", "class_method_signature": "ImageLoader.asImageMatrix(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "asMatrix", "parameters": "(BufferedImage image)", "modifiers": "public", "return": "INDArray", "signature": "INDArray asMatrix(BufferedImage image)", "full_signature": "public INDArray asMatrix(BufferedImage image)", "class_method_signature": "ImageLoader.asMatrix(BufferedImage image)", "testcase": false, "constructor": false}, {"identifier": "asImageMiniBatches", "parameters": "(File f, int numMiniBatches, int numRowsPerSlice)", "modifiers": "public", "return": "INDArray", "signature": "INDArray asImageMiniBatches(File f, int numMiniBatches, int numRowsPerSlice)", "full_signature": "public INDArray asImageMiniBatches(File f, int numMiniBatches, int numRowsPerSlice)", "class_method_signature": "ImageLoader.asImageMiniBatches(File f, int numMiniBatches, int numRowsPerSlice)", "testcase": false, "constructor": false}, {"identifier": "flattenedImageFromFile", "parameters": "(File f)", "modifiers": "public", "return": "int[]", "signature": "int[] flattenedImageFromFile(File f)", "full_signature": "public int[] flattenedImageFromFile(File f)", "class_method_signature": "ImageLoader.flattenedImageFromFile(File f)", "testcase": false, "constructor": false}, {"identifier": "fromFile", "parameters": "(File file)", "modifiers": "public", "return": "int[][]", "signature": "int[][] fromFile(File file)", "full_signature": "public int[][] fromFile(File file)", "class_method_signature": "ImageLoader.fromFile(File file)", "testcase": false, "constructor": false}, {"identifier": "fromFileMultipleChannels", "parameters": "(File file)", "modifiers": "public", "return": "int[][][]", "signature": "int[][][] fromFileMultipleChannels(File file)", "full_signature": "public int[][][] fromFileMultipleChannels(File file)", "class_method_signature": "ImageLoader.fromFileMultipleChannels(File file)", "testcase": false, "constructor": false}, {"identifier": "toImage", "parameters": "(INDArray matrix)", "modifiers": "public static", "return": "BufferedImage", "signature": "BufferedImage toImage(INDArray matrix)", "full_signature": "public static BufferedImage toImage(INDArray matrix)", "class_method_signature": "ImageLoader.toImage(INDArray matrix)", "testcase": false, "constructor": false}, {"identifier": "rasterData", "parameters": "(INDArray matrix)", "modifiers": "private static", "return": "int[]", "signature": "int[] rasterData(INDArray matrix)", "full_signature": "private static int[] rasterData(INDArray matrix)", "class_method_signature": "ImageLoader.rasterData(INDArray matrix)", "testcase": false, "constructor": false}, {"identifier": "toBufferedImageRGB", "parameters": "(INDArray arr, BufferedImage image)", "modifiers": "public", "return": "void", "signature": "void toBufferedImageRGB(INDArray arr, BufferedImage image)", "full_signature": "public void toBufferedImageRGB(INDArray arr, BufferedImage image)", "class_method_signature": "ImageLoader.toBufferedImageRGB(INDArray arr, BufferedImage image)", "testcase": false, "constructor": false}, {"identifier": "toBufferedImage", "parameters": "(Image img, int type)", "modifiers": "public static", "return": "BufferedImage", "signature": "BufferedImage toBufferedImage(Image img, int type)", "full_signature": "public static BufferedImage toBufferedImage(Image img, int type)", "class_method_signature": "ImageLoader.toBufferedImage(Image img, int type)", "testcase": false, "constructor": false}, {"identifier": "toIntArrayArray", "parameters": "(BufferedImage image)", "modifiers": "protected", "return": "int[][]", "signature": "int[][] toIntArrayArray(BufferedImage image)", "full_signature": "protected int[][] toIntArrayArray(BufferedImage image)", "class_method_signature": "ImageLoader.toIntArrayArray(BufferedImage image)", "testcase": false, "constructor": false}, {"identifier": "toINDArrayBGR", "parameters": "(BufferedImage image)", "modifiers": "protected", "return": "INDArray", "signature": "INDArray toINDArrayBGR(BufferedImage image)", "full_signature": "protected INDArray toINDArrayBGR(BufferedImage image)", "class_method_signature": "ImageLoader.toINDArrayBGR(BufferedImage image)", "testcase": false, "constructor": false}, {"identifier": "centerCropIfNeeded", "parameters": "(BufferedImage img)", "modifiers": "public", "return": "BufferedImage", "signature": "BufferedImage centerCropIfNeeded(BufferedImage img)", "full_signature": "public BufferedImage centerCropIfNeeded(BufferedImage img)", "class_method_signature": "ImageLoader.centerCropIfNeeded(BufferedImage img)", "testcase": false, "constructor": false}, {"identifier": "scalingIfNeed", "parameters": "(BufferedImage image, boolean needAlpha)", "modifiers": "protected", "return": "BufferedImage", "signature": "BufferedImage scalingIfNeed(BufferedImage image, boolean needAlpha)", "full_signature": "protected BufferedImage scalingIfNeed(BufferedImage image, boolean needAlpha)", "class_method_signature": "ImageLoader.scalingIfNeed(BufferedImage image, boolean needAlpha)", "testcase": false, "constructor": false}, {"identifier": "scalingIfNeed", "parameters": "(BufferedImage image, long dstHeight, long dstWidth, boolean needAlpha)", "modifiers": "protected", "return": "BufferedImage", "signature": "BufferedImage scalingIfNeed(BufferedImage image, long dstHeight, long dstWidth, boolean needAlpha)", "full_signature": "protected BufferedImage scalingIfNeed(BufferedImage image, long dstHeight, long dstWidth, boolean needAlpha)", "class_method_signature": "ImageLoader.scalingIfNeed(BufferedImage image, long dstHeight, long dstWidth, boolean needAlpha)", "testcase": false, "constructor": false}], "file": "datavec-data/datavec-data-image/src/main/java/org/datavec/image/loader/ImageLoader.java"}, "focal_method": {"identifier": "toIntArrayArray", "parameters": "(BufferedImage image)", "modifiers": "protected", "return": "int[][]", "body": "protected int[][] toIntArrayArray(BufferedImage image) {\n        int w = image.getWidth(), h = image.getHeight();\n        int[][] ret = new int[h][w];\n        if (image.getRaster().getNumDataElements() == 1) {\n            Raster raster = image.getRaster();\n            for (int i = 0; i < h; i++) {\n                for (int j = 0; j < w; j++) {\n                    ret[i][j] = raster.getSample(j, i, 0);\n                }\n            }\n        } else {\n            for (int i = 0; i < h; i++) {\n                for (int j = 0; j < w; j++) {\n                    ret[i][j] = image.getRGB(j, i);\n                }\n            }\n        }\n        return ret;\n    }", "signature": "int[][] toIntArrayArray(BufferedImage image)", "full_signature": "protected int[][] toIntArrayArray(BufferedImage image)", "class_method_signature": "ImageLoader.toIntArrayArray(BufferedImage image)", "testcase": false, "constructor": false, "invocations": ["getWidth", "getHeight", "getNumDataElements", "getRaster", "getRaster", "getSample", "getRGB"]}, "repository": {"repo_id": 62700410, "url": "https://github.com/deeplearning4j/DataVec", "language": "Java", "is_fork": false, "fork_count": 174, "stargazer_count": 260, "size": 39842, "license": "licensed"}}