{"test_class": {"identifier": "CxSmilesParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "storage/smiles/src/test/java/org/openscience/cdk/smiles/CxSmilesParserTest.java"}, "test_case": {"identifier": "unescape", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void unescape() {\n        assertThat(CxSmilesParser.unescape(\"&#36;\"), is(\"$\"));\n        assertThat(CxSmilesParser.unescape(\"&#127;\"), is(\"\\u007F\")); // DEL\n        assertThat(CxSmilesParser.unescape(\"&#9;\"), is(\"\\t\")); // TAB\n    }", "signature": "void unescape()", "full_signature": "@Test public void unescape()", "class_method_signature": "CxSmilesParserTest.unescape()", "testcase": true, "constructor": false, "invocations": ["assertThat", "unescape", "is", "assertThat", "unescape", "is", "assertThat", "unescape", "is"]}, "focal_class": {"identifier": "CxSmilesParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final char COMMA_SEPARATOR = ',';", "modifier": "private static final", "type": "char", "declarator": "COMMA_SEPARATOR = ','", "var_name": "COMMA_SEPARATOR"}, {"original_string": "private static final char DOT_SEPARATOR   = '.';", "modifier": "private static final", "type": "char", "declarator": "DOT_SEPARATOR   = '.'", "var_name": "DOT_SEPARATOR"}], "methods": [{"identifier": "CxSmilesParser", "parameters": "()", "modifiers": "private", "return": "", "signature": " CxSmilesParser()", "full_signature": "private  CxSmilesParser()", "class_method_signature": "CxSmilesParser.CxSmilesParser()", "testcase": false, "constructor": true}, {"identifier": "processAtomLabels", "parameters": "(final CharIter iter, final Map<Integer, String> dest)", "modifiers": "private static", "return": "boolean", "signature": "boolean processAtomLabels(final CharIter iter, final Map<Integer, String> dest)", "full_signature": "private static boolean processAtomLabels(final CharIter iter, final Map<Integer, String> dest)", "class_method_signature": "CxSmilesParser.processAtomLabels(final CharIter iter, final Map<Integer, String> dest)", "testcase": false, "constructor": false}, {"identifier": "readDouble", "parameters": "(CharIter iter)", "modifiers": "private static", "return": "double", "signature": "double readDouble(CharIter iter)", "full_signature": "private static double readDouble(CharIter iter)", "class_method_signature": "CxSmilesParser.readDouble(CharIter iter)", "testcase": false, "constructor": false}, {"identifier": "processCoords", "parameters": "(CharIter iter, CxSmilesState state)", "modifiers": "private static", "return": "boolean", "signature": "boolean processCoords(CharIter iter, CxSmilesState state)", "full_signature": "private static boolean processCoords(CharIter iter, CxSmilesState state)", "class_method_signature": "CxSmilesParser.processCoords(CharIter iter, CxSmilesState state)", "testcase": false, "constructor": false}, {"identifier": "processFragmentGrouping", "parameters": "(final CharIter iter, final CxSmilesState state)", "modifiers": "private static", "return": "boolean", "signature": "boolean processFragmentGrouping(final CharIter iter, final CxSmilesState state)", "full_signature": "private static boolean processFragmentGrouping(final CharIter iter, final CxSmilesState state)", "class_method_signature": "CxSmilesParser.processFragmentGrouping(final CharIter iter, final CxSmilesState state)", "testcase": false, "constructor": false}, {"identifier": "isSgroupDelim", "parameters": "(char c)", "modifiers": "private static", "return": "boolean", "signature": "boolean isSgroupDelim(char c)", "full_signature": "private static boolean isSgroupDelim(char c)", "class_method_signature": "CxSmilesParser.isSgroupDelim(char c)", "testcase": false, "constructor": false}, {"identifier": "processDataSgroups", "parameters": "(CharIter iter, CxSmilesState state)", "modifiers": "private static", "return": "boolean", "signature": "boolean processDataSgroups(CharIter iter, CxSmilesState state)", "full_signature": "private static boolean processDataSgroups(CharIter iter, CxSmilesState state)", "class_method_signature": "CxSmilesParser.processDataSgroups(CharIter iter, CxSmilesState state)", "testcase": false, "constructor": false}, {"identifier": "processPolymerSgroups", "parameters": "(CharIter iter, CxSmilesState state)", "modifiers": "private static", "return": "boolean", "signature": "boolean processPolymerSgroups(CharIter iter, CxSmilesState state)", "full_signature": "private static boolean processPolymerSgroups(CharIter iter, CxSmilesState state)", "class_method_signature": "CxSmilesParser.processPolymerSgroups(CharIter iter, CxSmilesState state)", "testcase": false, "constructor": false}, {"identifier": "processIntListMap", "parameters": "(Map<Integer,List<Integer>> map, CharIter iter)", "modifiers": "private static", "return": "boolean", "signature": "boolean processIntListMap(Map<Integer,List<Integer>> map, CharIter iter)", "full_signature": "private static boolean processIntListMap(Map<Integer,List<Integer>> map, CharIter iter)", "class_method_signature": "CxSmilesParser.processIntListMap(Map<Integer,List<Integer>> map, CharIter iter)", "testcase": false, "constructor": false}, {"identifier": "processPositionalVariation", "parameters": "(CharIter iter, CxSmilesState state)", "modifiers": "private static", "return": "boolean", "signature": "boolean processPositionalVariation(CharIter iter, CxSmilesState state)", "full_signature": "private static boolean processPositionalVariation(CharIter iter, CxSmilesState state)", "class_method_signature": "CxSmilesParser.processPositionalVariation(CharIter iter, CxSmilesState state)", "testcase": false, "constructor": false}, {"identifier": "processLigandOrdering", "parameters": "(CharIter iter, CxSmilesState state)", "modifiers": "private static", "return": "boolean", "signature": "boolean processLigandOrdering(CharIter iter, CxSmilesState state)", "full_signature": "private static boolean processLigandOrdering(CharIter iter, CxSmilesState state)", "class_method_signature": "CxSmilesParser.processLigandOrdering(CharIter iter, CxSmilesState state)", "testcase": false, "constructor": false}, {"identifier": "processRadicals", "parameters": "(CharIter iter, CxSmilesState state)", "modifiers": "private static", "return": "boolean", "signature": "boolean processRadicals(CharIter iter, CxSmilesState state)", "full_signature": "private static boolean processRadicals(CharIter iter, CxSmilesState state)", "class_method_signature": "CxSmilesParser.processRadicals(CharIter iter, CxSmilesState state)", "testcase": false, "constructor": false}, {"identifier": "processCx", "parameters": "(final String str, final CxSmilesState state)", "modifiers": "static", "return": "int", "signature": "int processCx(final String str, final CxSmilesState state)", "full_signature": "static int processCx(final String str, final CxSmilesState state)", "class_method_signature": "CxSmilesParser.processCx(final String str, final CxSmilesState state)", "testcase": false, "constructor": false}, {"identifier": "processSgroupsHierarchy", "parameters": "(CharIter iter, CxSmilesState state)", "modifiers": "private static", "return": "boolean", "signature": "boolean processSgroupsHierarchy(CharIter iter, CxSmilesState state)", "full_signature": "private static boolean processSgroupsHierarchy(CharIter iter, CxSmilesState state)", "class_method_signature": "CxSmilesParser.processSgroupsHierarchy(CharIter iter, CxSmilesState state)", "testcase": false, "constructor": false}, {"identifier": "isDigit", "parameters": "(char c)", "modifiers": "private static", "return": "boolean", "signature": "boolean isDigit(char c)", "full_signature": "private static boolean isDigit(char c)", "class_method_signature": "CxSmilesParser.isDigit(char c)", "testcase": false, "constructor": false}, {"identifier": "skipIntList", "parameters": "(CharIter iter, char sep)", "modifiers": "private static", "return": "boolean", "signature": "boolean skipIntList(CharIter iter, char sep)", "full_signature": "private static boolean skipIntList(CharIter iter, char sep)", "class_method_signature": "CxSmilesParser.skipIntList(CharIter iter, char sep)", "testcase": false, "constructor": false}, {"identifier": "skipIntMap", "parameters": "(CharIter iter)", "modifiers": "private static", "return": "boolean", "signature": "boolean skipIntMap(CharIter iter)", "full_signature": "private static boolean skipIntMap(CharIter iter)", "class_method_signature": "CxSmilesParser.skipIntMap(CharIter iter)", "testcase": false, "constructor": false}, {"identifier": "processUnsignedInt", "parameters": "(CharIter iter)", "modifiers": "private static", "return": "int", "signature": "int processUnsignedInt(CharIter iter)", "full_signature": "private static int processUnsignedInt(CharIter iter)", "class_method_signature": "CxSmilesParser.processUnsignedInt(CharIter iter)", "testcase": false, "constructor": false}, {"identifier": "processIntList", "parameters": "(CharIter iter, char sep, List<Integer> dest)", "modifiers": "private static", "return": "boolean", "signature": "boolean processIntList(CharIter iter, char sep, List<Integer> dest)", "full_signature": "private static boolean processIntList(CharIter iter, char sep, List<Integer> dest)", "class_method_signature": "CxSmilesParser.processIntList(CharIter iter, char sep, List<Integer> dest)", "testcase": false, "constructor": false}, {"identifier": "unescape", "parameters": "(String str)", "modifiers": "static", "return": "String", "signature": "String unescape(String str)", "full_signature": "static String unescape(String str)", "class_method_signature": "CxSmilesParser.unescape(String str)", "testcase": false, "constructor": false}], "file": "storage/smiles/src/main/java/org/openscience/cdk/smiles/CxSmilesParser.java"}, "focal_method": {"identifier": "unescape", "parameters": "(String str)", "modifiers": "static", "return": "String", "body": "static String unescape(String str) {\n        int dst = 0;\n        int src = 0;\n        char[] chars = str.toCharArray();\n        int len = chars.length;\n        while (src < chars.length) {\n            // match the pattern &#[0-9][0-9]*;\n            if (src + 3 < len && chars[src] == '&' && chars[src+1] == '#' && isDigit(chars[src+2])) {\n                int tmp  = src+2;\n                int code = 0;\n                while (tmp < len && isDigit(chars[tmp])) {\n                    code *= 10;\n                    code += chars[tmp] - '0';\n                    tmp++;\n                }\n                if (tmp < len && chars[tmp] == ';') {\n                    src = tmp+1;\n                    chars[dst++] = (char) code;\n                    continue;\n                }\n            }\n            chars[dst++] = chars[src++];\n        }\n        return new String(chars, 0, dst);\n    }", "signature": "String unescape(String str)", "full_signature": "static String unescape(String str)", "class_method_signature": "CxSmilesParser.unescape(String str)", "testcase": false, "constructor": false, "invocations": ["toCharArray", "isDigit", "isDigit"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}