{"test_class": {"identifier": "DataSourceEntityProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private byte[] testContent = \"to be or not to be\".getBytes();", "modifier": "private", "type": "byte[]", "declarator": "testContent = \"to be or not to be\".getBytes()", "var_name": "testContent"}, {"original_string": "private ApplicationContext context;", "modifier": "private", "type": "ApplicationContext", "declarator": "context", "var_name": "context"}, {"original_string": "private DataSourceEntityProvider dataSourceEntityProvider;", "modifier": "private", "type": "DataSourceEntityProvider", "declarator": "dataSourceEntityProvider", "var_name": "dataSourceEntityProvider"}], "file": "everrest-core/src/test/java/org/everrest/core/impl/provider/DataSourceEntityProviderTest.java"}, "test_case": {"identifier": "readsContentOfEntityStreamAsDataSource", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void readsContentOfEntityStreamAsDataSource() throws Exception {\n        DataSource result = dataSourceEntityProvider.readFrom(DataSource.class, null, null, TEXT_PLAIN_TYPE, null, new ByteArrayInputStream(testContent));\n\n        assertTrue(result instanceof ByteArrayDataSource);\n        byte[] bytes = ByteStreams.toByteArray(result.getInputStream());\n        assertArrayEquals(testContent, bytes);\n        assertEquals(TEXT_PLAIN, result.getContentType());\n    }", "signature": "void readsContentOfEntityStreamAsDataSource()", "full_signature": "@Test public void readsContentOfEntityStreamAsDataSource()", "class_method_signature": "DataSourceEntityProviderTest.readsContentOfEntityStreamAsDataSource()", "testcase": true, "constructor": false, "invocations": ["readFrom", "assertTrue", "toByteArray", "getInputStream", "assertArrayEquals", "assertEquals", "getContentType"]}, "focal_class": {"identifier": "DataSourceEntityProvider", "superclass": "", "interfaces": "implements EntityProvider<DataSource>", "fields": [], "methods": [{"identifier": "isReadable", "parameters": "(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "full_signature": "@Override public boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "class_method_signature": "DataSourceEntityProvider.isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "readFrom", "parameters": "(Class<DataSource> type,\n                               Type genericType,\n                               Annotation[] annotations,\n                               MediaType mediaType,\n                               MultivaluedMap<String, String> httpHeaders,\n                               InputStream entityStream)", "modifiers": "@Override public", "return": "DataSource", "signature": "DataSource readFrom(Class<DataSource> type,\n                               Type genericType,\n                               Annotation[] annotations,\n                               MediaType mediaType,\n                               MultivaluedMap<String, String> httpHeaders,\n                               InputStream entityStream)", "full_signature": "@Override public DataSource readFrom(Class<DataSource> type,\n                               Type genericType,\n                               Annotation[] annotations,\n                               MediaType mediaType,\n                               MultivaluedMap<String, String> httpHeaders,\n                               InputStream entityStream)", "class_method_signature": "DataSourceEntityProvider.readFrom(Class<DataSource> type,\n                               Type genericType,\n                               Annotation[] annotations,\n                               MediaType mediaType,\n                               MultivaluedMap<String, String> httpHeaders,\n                               InputStream entityStream)", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "(DataSource dataSource, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "modifiers": "@Override public", "return": "long", "signature": "long getSize(DataSource dataSource, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "full_signature": "@Override public long getSize(DataSource dataSource, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "class_method_signature": "DataSourceEntityProvider.getSize(DataSource dataSource, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "isWriteable", "parameters": "(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "full_signature": "@Override public boolean isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "class_method_signature": "DataSourceEntityProvider.isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "writeTo", "parameters": "(DataSource dataSource,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "modifiers": "@Override public", "return": "void", "signature": "void writeTo(DataSource dataSource,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "full_signature": "@Override public void writeTo(DataSource dataSource,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "class_method_signature": "DataSourceEntityProvider.writeTo(DataSource dataSource,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "testcase": false, "constructor": false}, {"identifier": "createDataSource", "parameters": "(InputStream entityStream, String mimeType)", "modifiers": "private", "return": "DataSource", "signature": "DataSource createDataSource(InputStream entityStream, String mimeType)", "full_signature": "private DataSource createDataSource(InputStream entityStream, String mimeType)", "class_method_signature": "DataSourceEntityProvider.createDataSource(InputStream entityStream, String mimeType)", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/impl/provider/DataSourceEntityProvider.java"}, "focal_method": {"identifier": "readFrom", "parameters": "(Class<DataSource> type,\n                               Type genericType,\n                               Annotation[] annotations,\n                               MediaType mediaType,\n                               MultivaluedMap<String, String> httpHeaders,\n                               InputStream entityStream)", "modifiers": "@Override public", "return": "DataSource", "body": "@Override\n    public DataSource readFrom(Class<DataSource> type,\n                               Type genericType,\n                               Annotation[] annotations,\n                               MediaType mediaType,\n                               MultivaluedMap<String, String> httpHeaders,\n                               InputStream entityStream) throws IOException {\n        return createDataSource(entityStream, mediaType == null ? null : mediaType.toString());\n    }", "signature": "DataSource readFrom(Class<DataSource> type,\n                               Type genericType,\n                               Annotation[] annotations,\n                               MediaType mediaType,\n                               MultivaluedMap<String, String> httpHeaders,\n                               InputStream entityStream)", "full_signature": "@Override public DataSource readFrom(Class<DataSource> type,\n                               Type genericType,\n                               Annotation[] annotations,\n                               MediaType mediaType,\n                               MultivaluedMap<String, String> httpHeaders,\n                               InputStream entityStream)", "class_method_signature": "DataSourceEntityProvider.readFrom(Class<DataSource> type,\n                               Type genericType,\n                               Annotation[] annotations,\n                               MediaType mediaType,\n                               MultivaluedMap<String, String> httpHeaders,\n                               InputStream entityStream)", "testcase": false, "constructor": false, "invocations": ["createDataSource", "toString"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}