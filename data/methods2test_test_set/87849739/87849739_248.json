{"test_class": {"identifier": "KafkaValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ConnectionId CONNECTION_ID = TestConstants.createRandomConnectionId();", "modifier": "private static final", "type": "ConnectionId", "declarator": "CONNECTION_ID = TestConstants.createRandomConnectionId()", "var_name": "CONNECTION_ID"}, {"original_string": "private static Map<String, String> defaultSpecificConfig = new HashMap<>();", "modifier": "private static", "type": "Map<String, String>", "declarator": "defaultSpecificConfig = new HashMap<>()", "var_name": "defaultSpecificConfig"}, {"original_string": "private static ActorSystem actorSystem;", "modifier": "private static", "type": "ActorSystem", "declarator": "actorSystem", "var_name": "actorSystem"}, {"original_string": "private KafkaValidator underTest;", "modifier": "private", "type": "KafkaValidator", "declarator": "underTest", "var_name": "underTest"}], "file": "services/connectivity/messaging/src/test/java/org/eclipse/ditto/services/connectivity/messaging/kafka/KafkaValidatorTest.java"}, "test_case": {"identifier": "testSourcesAreInvalid", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSourcesAreInvalid() {\n        final Source source = ConnectivityModelFactory.newSource(AUTHORIZATION_CONTEXT, \"any\");\n\n        assertThatExceptionOfType(ConnectionConfigurationInvalidException.class)\n                .isThrownBy(() -> underTest.validateSource(source, DittoHeaders.empty(), () -> \"\"));\n    }", "signature": "void testSourcesAreInvalid()", "full_signature": "@Test public void testSourcesAreInvalid()", "class_method_signature": "KafkaValidatorTest.testSourcesAreInvalid()", "testcase": true, "constructor": false, "invocations": ["newSource", "isThrownBy", "assertThatExceptionOfType", "validateSource", "empty"]}, "focal_class": {"identifier": "KafkaValidator", "superclass": "extends AbstractProtocolValidator", "interfaces": "", "fields": [{"original_string": "private static final String DUMMY_TOPIC = \"replaced_placeholder\";", "modifier": "private static final", "type": "String", "declarator": "DUMMY_TOPIC = \"replaced_placeholder\"", "var_name": "DUMMY_TOPIC"}, {"original_string": "private static final String DUMMY_PARTITION = \"3\";", "modifier": "private static final", "type": "String", "declarator": "DUMMY_PARTITION = \"3\"", "var_name": "DUMMY_PARTITION"}, {"original_string": "private static final String INVALID_TOPIC_FORMAT = \"The provided topic ''{0}'' is not valid: {1}\";", "modifier": "private static final", "type": "String", "declarator": "INVALID_TOPIC_FORMAT = \"The provided topic ''{0}'' is not valid: {1}\"", "var_name": "INVALID_TOPIC_FORMAT"}, {"original_string": "private static final String NOT_EMPTY_FORMAT = \"The provided {0} in your target address may not be empty.\";", "modifier": "private static final", "type": "String", "declarator": "NOT_EMPTY_FORMAT = \"The provided {0} in your target address may not be empty.\"", "var_name": "NOT_EMPTY_FORMAT"}, {"original_string": "private static final Collection<String> ACCEPTED_SCHEMES =\n            Collections.unmodifiableList(Arrays.asList(\"tcp\", \"ssl\"));", "modifier": "private static final", "type": "Collection<String>", "declarator": "ACCEPTED_SCHEMES =\n            Collections.unmodifiableList(Arrays.asList(\"tcp\", \"ssl\"))", "var_name": "ACCEPTED_SCHEMES"}, {"original_string": "private static final Collection<String> SECURE_SCHEMES = Collections.singletonList(\"ssl\");", "modifier": "private static final", "type": "Collection<String>", "declarator": "SECURE_SCHEMES = Collections.singletonList(\"ssl\")", "var_name": "SECURE_SCHEMES"}, {"original_string": "private static final Collection<KafkaSpecificConfig> SPECIFIC_CONFIGS = Collections.unmodifiableList(\n            Arrays.asList(KafkaAuthenticationSpecificConfig.getInstance(),\n                    KafkaBootstrapServerSpecificConfig.getInstance()));", "modifier": "private static final", "type": "Collection<KafkaSpecificConfig>", "declarator": "SPECIFIC_CONFIGS = Collections.unmodifiableList(\n            Arrays.asList(KafkaAuthenticationSpecificConfig.getInstance(),\n                    KafkaBootstrapServerSpecificConfig.getInstance()))", "var_name": "SPECIFIC_CONFIGS"}, {"original_string": "private static final KafkaValidator INSTANCE = new KafkaValidator();", "modifier": "private static final", "type": "KafkaValidator", "declarator": "INSTANCE = new KafkaValidator()", "var_name": "INSTANCE"}], "methods": [{"identifier": "KafkaValidator", "parameters": "()", "modifiers": "private", "return": "", "signature": " KafkaValidator()", "full_signature": "private  KafkaValidator()", "class_method_signature": "KafkaValidator.KafkaValidator()", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "KafkaValidator", "signature": "KafkaValidator getInstance()", "full_signature": "public static KafkaValidator getInstance()", "class_method_signature": "KafkaValidator.getInstance()", "testcase": false, "constructor": false}, {"identifier": "type", "parameters": "()", "modifiers": "@Override public", "return": "ConnectionType", "signature": "ConnectionType type()", "full_signature": "@Override public ConnectionType type()", "class_method_signature": "KafkaValidator.type()", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(final Connection connection, final DittoHeaders dittoHeaders, final ActorSystem actorSystem)", "modifiers": "@Override public", "return": "void", "signature": "void validate(final Connection connection, final DittoHeaders dittoHeaders, final ActorSystem actorSystem)", "full_signature": "@Override public void validate(final Connection connection, final DittoHeaders dittoHeaders, final ActorSystem actorSystem)", "class_method_signature": "KafkaValidator.validate(final Connection connection, final DittoHeaders dittoHeaders, final ActorSystem actorSystem)", "testcase": false, "constructor": false}, {"identifier": "validateSource", "parameters": "(final Source source, final DittoHeaders dittoHeaders,\n            final Supplier<String> sourceDescription)", "modifiers": "@Override protected", "return": "void", "signature": "void validateSource(final Source source, final DittoHeaders dittoHeaders,\n            final Supplier<String> sourceDescription)", "full_signature": "@Override protected void validateSource(final Source source, final DittoHeaders dittoHeaders,\n            final Supplier<String> sourceDescription)", "class_method_signature": "KafkaValidator.validateSource(final Source source, final DittoHeaders dittoHeaders,\n            final Supplier<String> sourceDescription)", "testcase": false, "constructor": false}, {"identifier": "validateTarget", "parameters": "(final Target target, final DittoHeaders dittoHeaders,\n            final Supplier<String> targetDescription)", "modifiers": "@Override protected", "return": "void", "signature": "void validateTarget(final Target target, final DittoHeaders dittoHeaders,\n            final Supplier<String> targetDescription)", "full_signature": "@Override protected void validateTarget(final Target target, final DittoHeaders dittoHeaders,\n            final Supplier<String> targetDescription)", "class_method_signature": "KafkaValidator.validateTarget(final Target target, final DittoHeaders dittoHeaders,\n            final Supplier<String> targetDescription)", "testcase": false, "constructor": false}, {"identifier": "validateAddress", "parameters": "(final String address, final DittoHeaders dittoHeaders,\n            final String placeholderReplacement)", "modifiers": "private static", "return": "void", "signature": "void validateAddress(final String address, final DittoHeaders dittoHeaders,\n            final String placeholderReplacement)", "full_signature": "private static void validateAddress(final String address, final DittoHeaders dittoHeaders,\n            final String placeholderReplacement)", "class_method_signature": "KafkaValidator.validateAddress(final String address, final DittoHeaders dittoHeaders,\n            final String placeholderReplacement)", "testcase": false, "constructor": false}, {"identifier": "validateTargetAddressWithKey", "parameters": "(final String targetAddress, final DittoHeaders dittoHeaders,\n            final String placeholderReplacement)", "modifiers": "private static", "return": "void", "signature": "void validateTargetAddressWithKey(final String targetAddress, final DittoHeaders dittoHeaders,\n            final String placeholderReplacement)", "full_signature": "private static void validateTargetAddressWithKey(final String targetAddress, final DittoHeaders dittoHeaders,\n            final String placeholderReplacement)", "class_method_signature": "KafkaValidator.validateTargetAddressWithKey(final String targetAddress, final DittoHeaders dittoHeaders,\n            final String placeholderReplacement)", "testcase": false, "constructor": false}, {"identifier": "validateTargetAddressWithPartition", "parameters": "(final String targetAddress,\n            final DittoHeaders dittoHeaders, final String placeholderReplacement)", "modifiers": "private static", "return": "void", "signature": "void validateTargetAddressWithPartition(final String targetAddress,\n            final DittoHeaders dittoHeaders, final String placeholderReplacement)", "full_signature": "private static void validateTargetAddressWithPartition(final String targetAddress,\n            final DittoHeaders dittoHeaders, final String placeholderReplacement)", "class_method_signature": "KafkaValidator.validateTargetAddressWithPartition(final String targetAddress,\n            final DittoHeaders dittoHeaders, final String placeholderReplacement)", "testcase": false, "constructor": false}, {"identifier": "validateTopic", "parameters": "(final String topic, final DittoHeaders dittoHeaders,\n            final String placeholderReplacement)", "modifiers": "private static", "return": "void", "signature": "void validateTopic(final String topic, final DittoHeaders dittoHeaders,\n            final String placeholderReplacement)", "full_signature": "private static void validateTopic(final String topic, final DittoHeaders dittoHeaders,\n            final String placeholderReplacement)", "class_method_signature": "KafkaValidator.validateTopic(final String topic, final DittoHeaders dittoHeaders,\n            final String placeholderReplacement)", "testcase": false, "constructor": false}, {"identifier": "validateKey", "parameters": "(final String key, final DittoHeaders dittoHeaders)", "modifiers": "private static", "return": "void", "signature": "void validateKey(final String key, final DittoHeaders dittoHeaders)", "full_signature": "private static void validateKey(final String key, final DittoHeaders dittoHeaders)", "class_method_signature": "KafkaValidator.validateKey(final String key, final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "validatePartition", "parameters": "(final String partition, final DittoHeaders dittoHeaders,\n            final String placeholderReplacement)", "modifiers": "private static", "return": "void", "signature": "void validatePartition(final String partition, final DittoHeaders dittoHeaders,\n            final String placeholderReplacement)", "full_signature": "private static void validatePartition(final String partition, final DittoHeaders dittoHeaders,\n            final String placeholderReplacement)", "class_method_signature": "KafkaValidator.validatePartition(final String partition, final DittoHeaders dittoHeaders,\n            final String placeholderReplacement)", "testcase": false, "constructor": false}, {"identifier": "validateSpecificConfigs", "parameters": "(final Connection connection, final DittoHeaders dittoHeaders)", "modifiers": "private static", "return": "void", "signature": "void validateSpecificConfigs(final Connection connection, final DittoHeaders dittoHeaders)", "full_signature": "private static void validateSpecificConfigs(final Connection connection, final DittoHeaders dittoHeaders)", "class_method_signature": "KafkaValidator.validateSpecificConfigs(final Connection connection, final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "throwEmptyException", "parameters": "(final String type, final DittoHeaders dittoHeaders)", "modifiers": "private static", "return": "void", "signature": "void throwEmptyException(final String type, final DittoHeaders dittoHeaders)", "full_signature": "private static void throwEmptyException(final String type, final DittoHeaders dittoHeaders)", "class_method_signature": "KafkaValidator.throwEmptyException(final String type, final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}], "file": "services/connectivity/messaging/src/main/java/org/eclipse/ditto/services/connectivity/messaging/kafka/KafkaValidator.java"}, "focal_method": {"identifier": "validateSource", "parameters": "(final Source source, final DittoHeaders dittoHeaders,\n            final Supplier<String> sourceDescription)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n    protected void validateSource(final Source source, final DittoHeaders dittoHeaders,\n            final Supplier<String> sourceDescription) {\n\n        final String message = \"Kafka connectivity currently does not provide sources.\";\n        throw ConnectionConfigurationInvalidException.newBuilder(message)\n                .dittoHeaders(dittoHeaders)\n                .build();\n    }", "signature": "void validateSource(final Source source, final DittoHeaders dittoHeaders,\n            final Supplier<String> sourceDescription)", "full_signature": "@Override protected void validateSource(final Source source, final DittoHeaders dittoHeaders,\n            final Supplier<String> sourceDescription)", "class_method_signature": "KafkaValidator.validateSource(final Source source, final DittoHeaders dittoHeaders,\n            final Supplier<String> sourceDescription)", "testcase": false, "constructor": false, "invocations": ["build", "dittoHeaders", "newBuilder"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}