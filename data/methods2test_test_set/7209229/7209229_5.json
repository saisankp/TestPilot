{"test_class": {"identifier": "TestMultiConsumerCallback", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String MODULE = TestMultiConsumerCallback.class.getName();", "modifier": "public static final", "type": "String", "declarator": "MODULE = TestMultiConsumerCallback.class.getName()", "var_name": "MODULE"}, {"original_string": "public static final Logger LOG = Logger.getLogger(MODULE);", "modifier": "public static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(MODULE)", "var_name": "LOG"}, {"original_string": "private DbusEventBuffer.Config _generic100KBufferConfig;", "modifier": "private", "type": "DbusEventBuffer.Config", "declarator": "_generic100KBufferConfig", "var_name": "_generic100KBufferConfig"}, {"original_string": "private DbusEventBuffer.StaticConfig _generic100KBufferStaticConfig;", "modifier": "private", "type": "DbusEventBuffer.StaticConfig", "declarator": "_generic100KBufferStaticConfig", "var_name": "_generic100KBufferStaticConfig"}], "file": "databus-client/databus-client-common/src/test/java/com/linkedin/databus/client/consumer/TestMultiConsumerCallback.java"}, "test_case": {"identifier": "test3GroupedStreamConsumersWithFailure", "parameters": "()", "modifiers": "@Test(groups = {\"small\", \"functional\"}) public", "return": "void", "body": "@Test(groups = {\"small\", \"functional\"})\n  public void test3GroupedStreamConsumersWithFailure()\n  {\n    LOG.info(\"\\n\\nstarting test3GroupedStreamConsumersWithFailure()\");\n\n    Hashtable<Long, AtomicInteger> keyCounts = new Hashtable<Long, AtomicInteger>();\n\n    DbusEventBuffer eventsBuf = new DbusEventBuffer(_generic100KBufferStaticConfig);\n    eventsBuf.start(0);\n    eventsBuf.startEvents();\n    initBufferWithEvents(eventsBuf, 1, 1, (short)1, keyCounts);\n    initBufferWithEvents(eventsBuf, 2, 2, (short)3, keyCounts);\n    eventsBuf.endEvents(100L);\n\n    DatabusStreamConsumer mockConsumer1 = EasyMock.createStrictMock(\"consumer1\",\n                                                                    DatabusStreamConsumer.class);\n    EasyMock.makeThreadSafe(mockConsumer1, true);\n    DatabusStreamConsumer mockConsumer2 = EasyMock.createStrictMock(\"consumer2\",\n                                                                    DatabusStreamConsumer.class);\n    EasyMock.makeThreadSafe(mockConsumer2, true);\n    DatabusStreamConsumer mockConsumer3 = EasyMock.createStrictMock(\"consumer3\",\n                                                                    DatabusStreamConsumer.class);\n    EasyMock.makeThreadSafe(mockConsumer3, true);\n\n    DatabusCombinedConsumer sdccMockConsumer1 = new SelectingDatabusCombinedConsumer(mockConsumer1);\n    DatabusCombinedConsumer sdccMockConsumer2 = new SelectingDatabusCombinedConsumer(mockConsumer2);\n    DatabusCombinedConsumer sdccMockConsumer3 = new SelectingDatabusCombinedConsumer(mockConsumer3);\n\n    List<String> sources = new ArrayList<String>();\n    Map<Long, IdNamePair> sourcesMap = new HashMap<Long, IdNamePair>();\n    for (int i = 1; i <= 3; ++i)\n    {\n      IdNamePair sourcePair = new IdNamePair((long)i, \"source\" + i);\n      sources.add(sourcePair.getName());\n      sourcesMap.put(sourcePair.getId(), sourcePair);\n    }\n\n    DatabusV2ConsumerRegistration consumerReg1 =\n        new DatabusV2ConsumerRegistration(\n            Arrays.asList(sdccMockConsumer1, sdccMockConsumer2, sdccMockConsumer3), sources, null);\n\n    List<DatabusV2ConsumerRegistration> allRegistrations =\n        Arrays.asList(consumerReg1);\n    MultiConsumerCallback callback =\n        new MultiConsumerCallback(\n            allRegistrations,\n            Executors.newCachedThreadPool(),\n            1000,\n            new StreamConsumerCallbackFactory(null, null),\n            null,\n            null,\n            null,\n            null);\n    callback.setSourceMap(sourcesMap);\n\n    DbusEventBuffer.DbusEventIterator iter = eventsBuf.acquireIterator(\"myIter1\");\n    assert iter.hasNext() : \"unable to read event\";\n    DbusEvent event1 = iter.next();\n    assert iter.hasNext() : \"unable to read event\";\n    DbusEvent event2 = iter.next();\n    assert iter.hasNext() : \"unable to read event\";\n    DbusEvent event3 = iter.next();\n\n    initMockFailingStreamConsumer3OptEventFullLifecycle(mockConsumer1, event1, event2, event3,\n                                                        keyCounts);\n    initMockFailingStreamConsumer3OptEventFullLifecycle(mockConsumer2, event1, event2, event3,\n                                                        keyCounts);\n    initMockFailingStreamConsumer3OptEventFullLifecycle(mockConsumer3, event1, event2, event3,\n                                                        keyCounts);\n\n    assert3EventFullLifecycleWithFailure(callback, event1, event2, event3);\n\n    EasyMock.verify(mockConsumer1);\n    EasyMock.verify(mockConsumer2);\n    EasyMock.verify(mockConsumer3);\n\n    assert (keyCounts.get(1L).get() + keyCounts.get(2L).get() + keyCounts.get(3L).get()) == 3\n           : \"invalid number of calls: \" + keyCounts.get(1L).get() + \",\" + keyCounts.get(2L).get()\n           + \",\" + keyCounts.get(3L).get();\n  }", "signature": "void test3GroupedStreamConsumersWithFailure()", "full_signature": "@Test(groups = {\"small\", \"functional\"}) public void test3GroupedStreamConsumersWithFailure()", "class_method_signature": "TestMultiConsumerCallback.test3GroupedStreamConsumersWithFailure()", "testcase": true, "constructor": false, "invocations": ["info", "start", "startEvents", "initBufferWithEvents", "initBufferWithEvents", "endEvents", "createStrictMock", "makeThreadSafe", "createStrictMock", "makeThreadSafe", "createStrictMock", "makeThreadSafe", "add", "getName", "put", "getId", "asList", "asList", "newCachedThreadPool", "setSourceMap", "acquireIterator", "hasNext", "next", "hasNext", "next", "hasNext", "next", "initMockFailingStreamConsumer3OptEventFullLifecycle", "initMockFailingStreamConsumer3OptEventFullLifecycle", "initMockFailingStreamConsumer3OptEventFullLifecycle", "assert3EventFullLifecycleWithFailure", "verify", "verify", "verify", "get", "get", "get", "get", "get", "get", "get", "get", "get", "get", "get", "get"]}, "focal_class": {"identifier": "MultiConsumerCallback", "superclass": "", "interfaces": "implements DatabusStreamConsumer", "fields": [{"original_string": "public final String MODULE = MultiConsumerCallback.class.getName();", "modifier": "public final", "type": "String", "declarator": "MODULE = MultiConsumerCallback.class.getName()", "var_name": "MODULE"}, {"original_string": "public Logger _log;", "modifier": "public", "type": "Logger", "declarator": "_log", "var_name": "_log"}, {"original_string": "private final List<DatabusV2ConsumerRegistration> _registrations;", "modifier": "private final", "type": "List<DatabusV2ConsumerRegistration>", "declarator": "_registrations", "var_name": "_registrations"}, {"original_string": "private final ExecutorService _executorService;", "modifier": "private final", "type": "ExecutorService", "declarator": "_executorService", "var_name": "_executorService"}, {"original_string": "private final List<ConsumerCallable<ConsumerCallbackResult>> _currentBatch;", "modifier": "private final", "type": "List<ConsumerCallable<ConsumerCallbackResult>>", "declarator": "_currentBatch", "var_name": "_currentBatch"}, {"original_string": "private final ConsumerCallbackFactory<DatabusCombinedConsumer> _callbackFactory;", "modifier": "private final", "type": "ConsumerCallbackFactory<DatabusCombinedConsumer>", "declarator": "_callbackFactory", "var_name": "_callbackFactory"}, {"original_string": "private final long _timeBudgetNanos;", "modifier": "private final", "type": "long", "declarator": "_timeBudgetNanos", "var_name": "_timeBudgetNanos"}, {"original_string": "private Map<Long, IdNamePair> _sourceMap;", "modifier": "private", "type": "Map<Long, IdNamePair>", "declarator": "_sourceMap", "var_name": "_sourceMap"}, {"original_string": "private long _runCallsCounter;", "modifier": "private", "type": "long", "declarator": "_runCallsCounter", "var_name": "_runCallsCounter"}, {"original_string": "private final PriorityQueue<TimestampedFuture<ConsumerCallbackResult>> _submittedCalls;", "modifier": "private final", "type": "PriorityQueue<TimestampedFuture<ConsumerCallbackResult>>", "declarator": "_submittedCalls", "var_name": "_submittedCalls"}, {"original_string": "private final Lock _lock = new ReentrantLock();", "modifier": "private final", "type": "Lock", "declarator": "_lock = new ReentrantLock()", "var_name": "_lock"}, {"original_string": "private final LoggingConsumer _loggingConsumer;", "modifier": "private final", "type": "LoggingConsumer", "declarator": "_loggingConsumer", "var_name": "_loggingConsumer"}, {"original_string": "private final ConsumerCallbackStats _consumerStats;", "modifier": "private final", "type": "ConsumerCallbackStats", "declarator": "_consumerStats", "var_name": "_consumerStats"}, {"original_string": "private final UnifiedClientStats _unifiedClientStats;", "modifier": "private final", "type": "UnifiedClientStats", "declarator": "_unifiedClientStats", "var_name": "_unifiedClientStats"}], "methods": [{"identifier": "MultiConsumerCallback", "parameters": "(List<DatabusV2ConsumerRegistration> registrations,\n                               ExecutorService executorService,\n                               long timeBudgetMs,\n                               ConsumerCallbackFactory<DatabusCombinedConsumer> callbackFactory)", "modifiers": "public", "return": "", "signature": " MultiConsumerCallback(List<DatabusV2ConsumerRegistration> registrations,\n                               ExecutorService executorService,\n                               long timeBudgetMs,\n                               ConsumerCallbackFactory<DatabusCombinedConsumer> callbackFactory)", "full_signature": "public  MultiConsumerCallback(List<DatabusV2ConsumerRegistration> registrations,\n                               ExecutorService executorService,\n                               long timeBudgetMs,\n                               ConsumerCallbackFactory<DatabusCombinedConsumer> callbackFactory)", "class_method_signature": "MultiConsumerCallback.MultiConsumerCallback(List<DatabusV2ConsumerRegistration> registrations,\n                               ExecutorService executorService,\n                               long timeBudgetMs,\n                               ConsumerCallbackFactory<DatabusCombinedConsumer> callbackFactory)", "testcase": false, "constructor": true}, {"identifier": "MultiConsumerCallback", "parameters": "(List<DatabusV2ConsumerRegistration> registrations,\n                               ExecutorService executorService,\n                               long timeBudgetMs,\n                               ConsumerCallbackFactory<DatabusCombinedConsumer> callbackFactory,\n                               ConsumerCallbackStats consumerStats,    // specific to relay or bootstrap mode, not both\n                               UnifiedClientStats unifiedClientStats,  // used in both relay and bootstrap mode\n                               LoggingConsumer loggingConsumer,\n                               Logger log)", "modifiers": "public", "return": "", "signature": " MultiConsumerCallback(List<DatabusV2ConsumerRegistration> registrations,\n                               ExecutorService executorService,\n                               long timeBudgetMs,\n                               ConsumerCallbackFactory<DatabusCombinedConsumer> callbackFactory,\n                               ConsumerCallbackStats consumerStats,    // specific to relay or bootstrap mode, not both\n                               UnifiedClientStats unifiedClientStats,  // used in both relay and bootstrap mode\n                               LoggingConsumer loggingConsumer,\n                               Logger log)", "full_signature": "public  MultiConsumerCallback(List<DatabusV2ConsumerRegistration> registrations,\n                               ExecutorService executorService,\n                               long timeBudgetMs,\n                               ConsumerCallbackFactory<DatabusCombinedConsumer> callbackFactory,\n                               ConsumerCallbackStats consumerStats,    // specific to relay or bootstrap mode, not both\n                               UnifiedClientStats unifiedClientStats,  // used in both relay and bootstrap mode\n                               LoggingConsumer loggingConsumer,\n                               Logger log)", "class_method_signature": "MultiConsumerCallback.MultiConsumerCallback(List<DatabusV2ConsumerRegistration> registrations,\n                               ExecutorService executorService,\n                               long timeBudgetMs,\n                               ConsumerCallbackFactory<DatabusCombinedConsumer> callbackFactory,\n                               ConsumerCallbackStats consumerStats,    // specific to relay or bootstrap mode, not both\n                               UnifiedClientStats unifiedClientStats,  // used in both relay and bootstrap mode\n                               LoggingConsumer loggingConsumer,\n                               Logger log)", "testcase": false, "constructor": true}, {"identifier": "submitBatch", "parameters": "(long curNanos, boolean barrierBefore,\n                                             boolean barrierAfter)", "modifiers": "private", "return": "ConsumerCallbackResult", "signature": "ConsumerCallbackResult submitBatch(long curNanos, boolean barrierBefore,\n                                             boolean barrierAfter)", "full_signature": "private ConsumerCallbackResult submitBatch(long curNanos, boolean barrierBefore,\n                                             boolean barrierAfter)", "class_method_signature": "MultiConsumerCallback.submitBatch(long curNanos, boolean barrierBefore,\n                                             boolean barrierAfter)", "testcase": false, "constructor": false}, {"identifier": "cleanUpCallQueue", "parameters": "(long curNanos)", "modifiers": "private", "return": "ConsumerCallbackResult", "signature": "ConsumerCallbackResult cleanUpCallQueue(long curNanos)", "full_signature": "private ConsumerCallbackResult cleanUpCallQueue(long curNanos)", "class_method_signature": "MultiConsumerCallback.cleanUpCallQueue(long curNanos)", "testcase": false, "constructor": false}, {"identifier": "dequeueTopFuture", "parameters": "(ConsumerCallbackResult result)", "modifiers": "private", "return": "void", "signature": "void dequeueTopFuture(ConsumerCallbackResult result)", "full_signature": "private void dequeueTopFuture(ConsumerCallbackResult result)", "class_method_signature": "MultiConsumerCallback.dequeueTopFuture(ConsumerCallbackResult result)", "testcase": false, "constructor": false}, {"identifier": "getCallResult", "parameters": "(Future<ConsumerCallbackResult> future,\n                                               String callType,\n                                               long timeoutNanos)", "modifiers": "private", "return": "ConsumerCallbackResult", "signature": "ConsumerCallbackResult getCallResult(Future<ConsumerCallbackResult> future,\n                                               String callType,\n                                               long timeoutNanos)", "full_signature": "private ConsumerCallbackResult getCallResult(Future<ConsumerCallbackResult> future,\n                                               String callType,\n                                               long timeoutNanos)", "class_method_signature": "MultiConsumerCallback.getCallResult(Future<ConsumerCallbackResult> future,\n                                               String callType,\n                                               long timeoutNanos)", "testcase": false, "constructor": false}, {"identifier": "cancelCalls", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void cancelCalls()", "full_signature": "private void cancelCalls()", "class_method_signature": "MultiConsumerCallback.cancelCalls()", "testcase": false, "constructor": false}, {"identifier": "flushCallQueue", "parameters": "(long curTime)", "modifiers": "public", "return": "ConsumerCallbackResult", "signature": "ConsumerCallbackResult flushCallQueue(long curTime)", "full_signature": "public ConsumerCallbackResult flushCallQueue(long curTime)", "class_method_signature": "MultiConsumerCallback.flushCallQueue(long curTime)", "testcase": false, "constructor": false}, {"identifier": "onCheckpoint", "parameters": "(SCN checkpointScn)", "modifiers": "@Override public", "return": "ConsumerCallbackResult", "signature": "ConsumerCallbackResult onCheckpoint(SCN checkpointScn)", "full_signature": "@Override public ConsumerCallbackResult onCheckpoint(SCN checkpointScn)", "class_method_signature": "MultiConsumerCallback.onCheckpoint(SCN checkpointScn)", "testcase": false, "constructor": false}, {"identifier": "onDataEvent", "parameters": "(DbusEvent e, DbusEventDecoder eventDecoder)", "modifiers": "@Override public", "return": "ConsumerCallbackResult", "signature": "ConsumerCallbackResult onDataEvent(DbusEvent e, DbusEventDecoder eventDecoder)", "full_signature": "@Override public ConsumerCallbackResult onDataEvent(DbusEvent e, DbusEventDecoder eventDecoder)", "class_method_signature": "MultiConsumerCallback.onDataEvent(DbusEvent e, DbusEventDecoder eventDecoder)", "testcase": false, "constructor": false}, {"identifier": "onEndDataEventSequence", "parameters": "(SCN endScn)", "modifiers": "@Override public", "return": "ConsumerCallbackResult", "signature": "ConsumerCallbackResult onEndDataEventSequence(SCN endScn)", "full_signature": "@Override public ConsumerCallbackResult onEndDataEventSequence(SCN endScn)", "class_method_signature": "MultiConsumerCallback.onEndDataEventSequence(SCN endScn)", "testcase": false, "constructor": false}, {"identifier": "onEndSource", "parameters": "(String source, Schema sourceSchema)", "modifiers": "@Override public", "return": "ConsumerCallbackResult", "signature": "ConsumerCallbackResult onEndSource(String source, Schema sourceSchema)", "full_signature": "@Override public ConsumerCallbackResult onEndSource(String source, Schema sourceSchema)", "class_method_signature": "MultiConsumerCallback.onEndSource(String source, Schema sourceSchema)", "testcase": false, "constructor": false}, {"identifier": "onRollback", "parameters": "(SCN startScn)", "modifiers": "@Override public", "return": "ConsumerCallbackResult", "signature": "ConsumerCallbackResult onRollback(SCN startScn)", "full_signature": "@Override public ConsumerCallbackResult onRollback(SCN startScn)", "class_method_signature": "MultiConsumerCallback.onRollback(SCN startScn)", "testcase": false, "constructor": false}, {"identifier": "onStartDataEventSequence", "parameters": "(SCN startScn)", "modifiers": "@Override public", "return": "ConsumerCallbackResult", "signature": "ConsumerCallbackResult onStartDataEventSequence(SCN startScn)", "full_signature": "@Override public ConsumerCallbackResult onStartDataEventSequence(SCN startScn)", "class_method_signature": "MultiConsumerCallback.onStartDataEventSequence(SCN startScn)", "testcase": false, "constructor": false}, {"identifier": "onStartSource", "parameters": "(String source, Schema sourceSchema)", "modifiers": "@Override public", "return": "ConsumerCallbackResult", "signature": "ConsumerCallbackResult onStartSource(String source, Schema sourceSchema)", "full_signature": "@Override public ConsumerCallbackResult onStartSource(String source, Schema sourceSchema)", "class_method_signature": "MultiConsumerCallback.onStartSource(String source, Schema sourceSchema)", "testcase": false, "constructor": false}, {"identifier": "onStartConsumption", "parameters": "()", "modifiers": "@Override public", "return": "ConsumerCallbackResult", "signature": "ConsumerCallbackResult onStartConsumption()", "full_signature": "@Override public ConsumerCallbackResult onStartConsumption()", "class_method_signature": "MultiConsumerCallback.onStartConsumption()", "testcase": false, "constructor": false}, {"identifier": "onStopConsumption", "parameters": "()", "modifiers": "@Override public", "return": "ConsumerCallbackResult", "signature": "ConsumerCallbackResult onStopConsumption()", "full_signature": "@Override public ConsumerCallbackResult onStopConsumption()", "class_method_signature": "MultiConsumerCallback.onStopConsumption()", "testcase": false, "constructor": false}, {"identifier": "setSourceMap", "parameters": "(Map<Long, IdNamePair> sourceMap)", "modifiers": "public", "return": "void", "signature": "void setSourceMap(Map<Long, IdNamePair> sourceMap)", "full_signature": "public void setSourceMap(Map<Long, IdNamePair> sourceMap)", "class_method_signature": "MultiConsumerCallback.setSourceMap(Map<Long, IdNamePair> sourceMap)", "testcase": false, "constructor": false}, {"identifier": "getSourceMap", "parameters": "()", "modifiers": "public", "return": "Map<Long, IdNamePair>", "signature": "Map<Long, IdNamePair> getSourceMap()", "full_signature": "public Map<Long, IdNamePair> getSourceMap()", "class_method_signature": "MultiConsumerCallback.getSourceMap()", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(Throwable err)", "modifiers": "@Override public", "return": "ConsumerCallbackResult", "signature": "ConsumerCallbackResult onError(Throwable err)", "full_signature": "@Override public ConsumerCallbackResult onError(Throwable err)", "class_method_signature": "MultiConsumerCallback.onError(Throwable err)", "testcase": false, "constructor": false}, {"identifier": "getStats", "parameters": "()", "modifiers": "public", "return": "ConsumerCallbackStats", "signature": "ConsumerCallbackStats getStats()", "full_signature": "public ConsumerCallbackStats getStats()", "class_method_signature": "MultiConsumerCallback.getStats()", "testcase": false, "constructor": false}, {"identifier": "removeRegistration", "parameters": "(DatabusV2ConsumerRegistration reg)", "modifiers": "public", "return": "void", "signature": "void removeRegistration(DatabusV2ConsumerRegistration reg)", "full_signature": "public void removeRegistration(DatabusV2ConsumerRegistration reg)", "class_method_signature": "MultiConsumerCallback.removeRegistration(DatabusV2ConsumerRegistration reg)", "testcase": false, "constructor": false}, {"identifier": "getEstimatedTimeout", "parameters": "(long timeBudget,\n                                     long curTime,\n                                     TimestampedFuture<ConsumerCallbackResult> top)", "modifiers": "protected", "return": "long", "signature": "long getEstimatedTimeout(long timeBudget,\n                                     long curTime,\n                                     TimestampedFuture<ConsumerCallbackResult> top)", "full_signature": "protected long getEstimatedTimeout(long timeBudget,\n                                     long curTime,\n                                     TimestampedFuture<ConsumerCallbackResult> top)", "class_method_signature": "MultiConsumerCallback.getEstimatedTimeout(long timeBudget,\n                                     long curTime,\n                                     TimestampedFuture<ConsumerCallbackResult> top)", "testcase": false, "constructor": false}], "file": "databus-client/databus-client-common/src/main/java/com/linkedin/databus/client/consumer/MultiConsumerCallback.java"}, "focal_method": {"identifier": "setSourceMap", "parameters": "(Map<Long, IdNamePair> sourceMap)", "modifiers": "public", "return": "void", "body": "public void setSourceMap(Map<Long, IdNamePair> sourceMap)\n  {\n    _sourceMap = sourceMap;\n  }", "signature": "void setSourceMap(Map<Long, IdNamePair> sourceMap)", "full_signature": "public void setSourceMap(Map<Long, IdNamePair> sourceMap)", "class_method_signature": "MultiConsumerCallback.setSourceMap(Map<Long, IdNamePair> sourceMap)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 7209229, "url": "https://github.com/linkedin/databus", "language": "Java", "is_fork": false, "fork_count": 653, "stargazer_count": 2899, "size": 51191, "license": "licensed"}}