{"test_class": {"identifier": "PlanningVehicleFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "optaweb-vehicle-routing-backend/src/test/java/org/optaweb/vehiclerouting/plugin/planner/domain/PlanningVehicleFactoryTest.java"}, "test_case": {"identifier": "planning_vehicle", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void planning_vehicle() {\n        long vehicleId = 2;\n        String name = \"not used\";\n        int capacity = 7;\n        Vehicle domainVehicle = VehicleFactory.createVehicle(vehicleId, name, capacity);\n\n        PlanningVehicle vehicle = fromDomain(domainVehicle);\n\n        assertThat(vehicle.getId()).isEqualTo(vehicleId);\n        assertThat(vehicle.getCapacity()).isEqualTo(capacity);\n    }", "signature": "void planning_vehicle()", "full_signature": "@Test void planning_vehicle()", "class_method_signature": "PlanningVehicleFactoryTest.planning_vehicle()", "testcase": true, "constructor": false, "invocations": ["createVehicle", "fromDomain", "isEqualTo", "assertThat", "getId", "isEqualTo", "assertThat", "getCapacity"]}, "focal_class": {"identifier": "PlanningVehicleFactory", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "PlanningVehicleFactory", "parameters": "()", "modifiers": "private", "return": "", "signature": " PlanningVehicleFactory()", "full_signature": "private  PlanningVehicleFactory()", "class_method_signature": "PlanningVehicleFactory.PlanningVehicleFactory()", "testcase": false, "constructor": true}, {"identifier": "fromDomain", "parameters": "(Vehicle domainVehicle)", "modifiers": "public static", "return": "PlanningVehicle", "signature": "PlanningVehicle fromDomain(Vehicle domainVehicle)", "full_signature": "public static PlanningVehicle fromDomain(Vehicle domainVehicle)", "class_method_signature": "PlanningVehicleFactory.fromDomain(Vehicle domainVehicle)", "testcase": false, "constructor": false}, {"identifier": "testVehicle", "parameters": "(long id)", "modifiers": "public static", "return": "PlanningVehicle", "signature": "PlanningVehicle testVehicle(long id)", "full_signature": "public static PlanningVehicle testVehicle(long id)", "class_method_signature": "PlanningVehicleFactory.testVehicle(long id)", "testcase": false, "constructor": false}, {"identifier": "testVehicle", "parameters": "(long id, int capacity)", "modifiers": "public static", "return": "PlanningVehicle", "signature": "PlanningVehicle testVehicle(long id, int capacity)", "full_signature": "public static PlanningVehicle testVehicle(long id, int capacity)", "class_method_signature": "PlanningVehicleFactory.testVehicle(long id, int capacity)", "testcase": false, "constructor": false}, {"identifier": "vehicle", "parameters": "(long id, int capacity)", "modifiers": "private static", "return": "PlanningVehicle", "signature": "PlanningVehicle vehicle(long id, int capacity)", "full_signature": "private static PlanningVehicle vehicle(long id, int capacity)", "class_method_signature": "PlanningVehicleFactory.vehicle(long id, int capacity)", "testcase": false, "constructor": false}], "file": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/planner/domain/PlanningVehicleFactory.java"}, "focal_method": {"identifier": "fromDomain", "parameters": "(Vehicle domainVehicle)", "modifiers": "public static", "return": "PlanningVehicle", "body": "public static PlanningVehicle fromDomain(Vehicle domainVehicle) {\n        return vehicle(domainVehicle.id(), domainVehicle.capacity());\n    }", "signature": "PlanningVehicle fromDomain(Vehicle domainVehicle)", "full_signature": "public static PlanningVehicle fromDomain(Vehicle domainVehicle)", "class_method_signature": "PlanningVehicleFactory.fromDomain(Vehicle domainVehicle)", "testcase": false, "constructor": false, "invocations": ["vehicle", "id", "capacity"]}, "repository": {"repo_id": 142603842, "url": "https://github.com/kiegroup/optaweb-vehicle-routing", "stars": 42, "created": "7/27/2018 5:08:08 PM +00:00", "updates": "2020-01-27T22:19:48+00:00", "fork": "False", "license": "licensed"}}