{"test_class": {"identifier": "DnParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/ldaptive/DnParserTest.java"}, "test_case": {"identifier": "testSubstringEndIndex", "parameters": "()", "modifiers": "@Test(groups = \"dnParser\") public", "return": "void", "body": "@Test(groups = \"dnParser\")\n  public void testSubstringEndIndex()\n    throws Exception\n  {\n    final String dn = \"CN=Jim Smith,UID=jsmith,DC=ldaptive,DC=org\";\n    try {\n      DnParser.substring(dn, -1, 0);\n      Assert.fail(\"Should have thrown IndexOutOfBoundsException\");\n    } catch (Exception e) {\n      Assert.assertEquals(e.getClass(), IndexOutOfBoundsException.class);\n    }\n    try {\n      DnParser.substring(dn, 2, 1);\n      Assert.fail(\"Should have thrown IndexOutOfBoundsException\");\n    } catch (Exception e) {\n      Assert.assertEquals(e.getClass(), IndexOutOfBoundsException.class);\n    }\n    Assert.assertEquals(DnParser.substring(dn, 0, 4), \"CN=Jim Smith,UID=jsmith,DC=ldaptive,DC=org\");\n    Assert.assertEquals(DnParser.substring(dn, 1, 4), \"UID=jsmith,DC=ldaptive,DC=org\");\n    Assert.assertEquals(DnParser.substring(dn, 2, 4), \"DC=ldaptive,DC=org\");\n    Assert.assertEquals(DnParser.substring(dn, 3, 4), \"DC=org\");\n\n    Assert.assertEquals(DnParser.substring(dn, 0, 1), \"CN=Jim Smith\");\n    Assert.assertEquals(DnParser.substring(dn, 1, 2), \"UID=jsmith\");\n    Assert.assertEquals(DnParser.substring(dn, 2, 3), \"DC=ldaptive\");\n    Assert.assertEquals(DnParser.substring(dn, 3, 4), \"DC=org\");\n\n    Assert.assertEquals(DnParser.substring(dn, 0, 2), \"CN=Jim Smith,UID=jsmith\");\n    Assert.assertEquals(DnParser.substring(dn, 2, 4), \"DC=ldaptive,DC=org\");\n    try {\n      DnParser.substring(dn, 1, 5);\n      Assert.fail(\"Should have thrown IndexOutOfBoundsException\");\n    } catch (Exception e) {\n      Assert.assertEquals(e.getClass(), IndexOutOfBoundsException.class);\n    }\n  }", "signature": "void testSubstringEndIndex()", "full_signature": "@Test(groups = \"dnParser\") public void testSubstringEndIndex()", "class_method_signature": "DnParserTest.testSubstringEndIndex()", "testcase": true, "constructor": false, "invocations": ["substring", "fail", "assertEquals", "getClass", "substring", "fail", "assertEquals", "getClass", "assertEquals", "substring", "assertEquals", "substring", "assertEquals", "substring", "assertEquals", "substring", "assertEquals", "substring", "assertEquals", "substring", "assertEquals", "substring", "assertEquals", "substring", "assertEquals", "substring", "assertEquals", "substring", "substring", "fail", "assertEquals", "getClass"]}, "focal_class": {"identifier": "DnParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(DnParser.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DnParser.class)", "var_name": "LOGGER"}, {"original_string": "private static final int HEX_RADIX = 16;", "modifier": "private static final", "type": "int", "declarator": "HEX_RADIX = 16", "var_name": "HEX_RADIX"}, {"original_string": "private static final DERPath HEX_PATH = new DERPath(\"/OCTSTR[0]\");", "modifier": "private static final", "type": "DERPath", "declarator": "HEX_PATH = new DERPath(\"/OCTSTR[0]\")", "var_name": "HEX_PATH"}], "methods": [{"identifier": "DnParser", "parameters": "()", "modifiers": "private", "return": "", "signature": " DnParser()", "full_signature": "private  DnParser()", "class_method_signature": "DnParser.DnParser()", "testcase": false, "constructor": true}, {"identifier": "getValues", "parameters": "(final String dn, final String name)", "modifiers": "public static", "return": "Collection<String>", "signature": "Collection<String> getValues(final String dn, final String name)", "full_signature": "public static Collection<String> getValues(final String dn, final String name)", "class_method_signature": "DnParser.getValues(final String dn, final String name)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(final String dn, final String name)", "modifiers": "public static", "return": "String", "signature": "String getValue(final String dn, final String name)", "full_signature": "public static String getValue(final String dn, final String name)", "class_method_signature": "DnParser.getValue(final String dn, final String name)", "testcase": false, "constructor": false}, {"identifier": "substring", "parameters": "(final String dn, final int beginIndex)", "modifiers": "public static", "return": "String", "signature": "String substring(final String dn, final int beginIndex)", "full_signature": "public static String substring(final String dn, final int beginIndex)", "class_method_signature": "DnParser.substring(final String dn, final int beginIndex)", "testcase": false, "constructor": false}, {"identifier": "substring", "parameters": "(final String dn, final int beginIndex, final int endIndex)", "modifiers": "public static", "return": "String", "signature": "String substring(final String dn, final int beginIndex, final int endIndex)", "full_signature": "public static String substring(final String dn, final int beginIndex, final int endIndex)", "class_method_signature": "DnParser.substring(final String dn, final int beginIndex, final int endIndex)", "testcase": false, "constructor": false}, {"identifier": "convertDnToAttributes", "parameters": "(final String dn)", "modifiers": "public static", "return": "List<LdapAttribute>", "signature": "List<LdapAttribute> convertDnToAttributes(final String dn)", "full_signature": "public static List<LdapAttribute> convertDnToAttributes(final String dn)", "class_method_signature": "DnParser.convertDnToAttributes(final String dn)", "testcase": false, "constructor": false}, {"identifier": "decodeHexValue", "parameters": "(final char[] value)", "modifiers": "protected static", "return": "byte[]", "signature": "byte[] decodeHexValue(final char[] value)", "full_signature": "protected static byte[] decodeHexValue(final char[] value)", "class_method_signature": "DnParser.decodeHexValue(final char[] value)", "testcase": false, "constructor": false}, {"identifier": "decodeStringValue", "parameters": "(final String value)", "modifiers": "protected static", "return": "String", "signature": "String decodeStringValue(final String value)", "full_signature": "protected static String decodeStringValue(final String value)", "class_method_signature": "DnParser.decodeStringValue(final String value)", "testcase": false, "constructor": false}, {"identifier": "readToChar", "parameters": "(final String s, final char[] chars, final int pos)", "modifiers": "private static", "return": "int", "signature": "int readToChar(final String s, final char[] chars, final int pos)", "full_signature": "private static int readToChar(final String s, final char[] chars, final int pos)", "class_method_signature": "DnParser.readToChar(final String s, final char[] chars, final int pos)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/ldaptive/DnParser.java"}, "focal_method": {"identifier": "substring", "parameters": "(final String dn, final int beginIndex)", "modifiers": "public static", "return": "String", "body": "public static String substring(final String dn, final int beginIndex)\n  {\n    if (beginIndex < 0) {\n      throw new IndexOutOfBoundsException(\"beginIndex cannot be negative\");\n    }\n\n    final List<LdapAttribute> attrs = convertDnToAttributes(dn);\n    if (beginIndex >= attrs.size()) {\n      throw new IndexOutOfBoundsException(\"beginIndex cannot be larger than the number of RDNs\");\n    }\n\n    final StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < attrs.size(); i++) {\n      if (i >= beginIndex) {\n        final LdapAttribute la = attrs.get(i);\n        sb.append(la.getName()).append(\"=\").append(la.getStringValue()).append(\",\");\n      }\n    }\n    if (sb.length() > 0 && sb.charAt(sb.length() - 1) == ',') {\n      sb.deleteCharAt(sb.length() - 1);\n    }\n    return sb.toString();\n  }", "signature": "String substring(final String dn, final int beginIndex)", "full_signature": "public static String substring(final String dn, final int beginIndex)", "class_method_signature": "DnParser.substring(final String dn, final int beginIndex)", "testcase": false, "constructor": false, "invocations": ["convertDnToAttributes", "size", "size", "get", "append", "append", "append", "append", "getName", "getStringValue", "length", "charAt", "length", "deleteCharAt", "length", "toString"]}, "repository": {"repo_id": 25927306, "url": "https://github.com/vt-middleware/ldaptive", "stars": 32, "created": "10/29/2014 3:27:31 PM +00:00", "updates": "2020-01-14T22:18:12+00:00", "fork": "False", "license": "licensed"}}