{"test_class": {"identifier": "OpenLRXMLDecoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int POSITIVE_OFFSET_WP_LINE_LOCATION = 150;", "modifier": "private static final", "type": "int", "declarator": "POSITIVE_OFFSET_WP_LINE_LOCATION = 150", "var_name": "POSITIVE_OFFSET_WP_LINE_LOCATION"}, {"original_string": "private OpenLR whitePaperLineLocation;", "modifier": "private", "type": "OpenLR", "declarator": "whitePaperLineLocation", "var_name": "whitePaperLineLocation"}, {"original_string": "private OpenLR invalidXML;", "modifier": "private", "type": "OpenLR", "declarator": "invalidXML", "var_name": "invalidXML"}, {"original_string": "private OpenLR missingLastLrp;", "modifier": "private", "type": "OpenLR", "declarator": "missingLastLrp", "var_name": "missingLastLrp"}], "file": "xml/src/test/java/openlr/xml/OpenLRXMLDecoderTest.java"}, "test_case": {"identifier": "testWrongDataClassDecoding", "parameters": "()", "modifiers": "@Test public final", "return": "void", "body": "@Test\n    public final void testWrongDataClassDecoding() {\n\n        OpenLR wpPaperLineLocation = Utils.readLocationFromFile(\n                \"whitePointAlongLocation.xml\", true);\n\n        try {\n            new LineDecoder().decodeData(\"\", wpPaperLineLocation);\n            fail(\"Exception expected!\");\n\n        } catch (PhysicalFormatException e) {\n            assertSame(e.getErrorCode(), XMLErrorType.DATA_ERROR);\n        }\n    }", "signature": "void testWrongDataClassDecoding()", "full_signature": "@Test public final void testWrongDataClassDecoding()", "class_method_signature": "OpenLRXMLDecoderTest.testWrongDataClassDecoding()", "testcase": true, "constructor": false, "invocations": ["readLocationFromFile", "decodeData", "fail", "assertSame", "getErrorCode"]}, "focal_class": {"identifier": "OpenLRXMLDecoder", "superclass": "", "interfaces": "implements PhysicalDecoder", "fields": [], "methods": [{"identifier": "decodeData", "parameters": "(final LocationReference lr)", "modifiers": "@Override public final", "return": "RawLocationReference", "signature": "RawLocationReference decodeData(final LocationReference lr)", "full_signature": "@Override public final RawLocationReference decodeData(final LocationReference lr)", "class_method_signature": "OpenLRXMLDecoder.decodeData(final LocationReference lr)", "testcase": false, "constructor": false}, {"identifier": "getDataClass", "parameters": "()", "modifiers": "public final", "return": "Class<?>", "signature": "Class<?> getDataClass()", "full_signature": "public final Class<?> getDataClass()", "class_method_signature": "OpenLRXMLDecoder.getDataClass()", "testcase": false, "constructor": false}, {"identifier": "getDataFormatIdentifier", "parameters": "()", "modifiers": "public final", "return": "String", "signature": "String getDataFormatIdentifier()", "full_signature": "public final String getDataFormatIdentifier()", "class_method_signature": "OpenLRXMLDecoder.getDataFormatIdentifier()", "testcase": false, "constructor": false}], "file": "xml/src/main/java/openlr/xml/OpenLRXMLDecoder.java"}, "focal_method": {"identifier": "decodeData", "parameters": "(final LocationReference lr)", "modifiers": "@Override public final", "return": "RawLocationReference", "body": "@Override\n    public final RawLocationReference decodeData(final LocationReference lr)\n            throws PhysicalFormatException {\n        Object data = lr.getLocationReferenceData();\n        if (!(data instanceof OpenLR)) {\n            throw new OpenLRXMLException(XMLErrorType.DATA_ERROR,\n                    \"incorrect data class\");\n        }\n        OpenLR xmlData = (OpenLR) data;\n        String id = xmlData.getLocationID();\n        XMLLocationReference xmlLoc = xmlData.getXMLLocationReference();\n        if (xmlLoc == null) {\n            throw new OpenLRXMLException(XMLErrorType.BINARY_DATA_ONLY,\n                    \"cannot decode binary string using xml package\");\n        }\n\n        LineLocationReference lineLoc = xmlLoc.getLineLocationReference();\n        PointLocationReference pointLoc = xmlLoc.getPointLocationReference();\n        /** DLR e.V. (LTouk) XML area location reference */\n        AreaLocationReference areaLoc = xmlLoc.getAreaLocationReference();\n\n        if (lineLoc == null && pointLoc == null && areaLoc == null) {\n            throw new OpenLRXMLException(XMLErrorType.DATA_ERROR,\n                    \"no location reference\");\n        }\n\n        RawLocationReference rawLocRef = null;\n        if (lineLoc != null) {\n            LineDecoder decoder = new LineDecoder();\n            rawLocRef = decoder.decodeData(id, lineLoc);\n        } else if (pointLoc != null) {\n            GeoCoordinate gCoord = pointLoc.getGeoCoordinate();\n            PointAlongLine pal = pointLoc.getPointAlongLine();\n            PoiWithAccessPoint palwap = pointLoc.getPoiWithAccessPoint();\n            if (gCoord == null && pal == null && palwap == null) {\n                throw new OpenLRXMLException(XMLErrorType.DATA_ERROR,\n                        \"no point location found\");\n            }\n            if (gCoord != null) {\n                GeoCoordDecoder decoder = new GeoCoordDecoder();\n                rawLocRef = decoder.decodeData(id, gCoord);\n            } else if (pal != null) {\n                PointAlongDecoder decoder = new PointAlongDecoder();\n                rawLocRef = decoder.decodeData(id, pal);\n            } else if (palwap != null) {\n                PoiAccessDecoder decoder = new PoiAccessDecoder();\n                rawLocRef = decoder.decodeData(id, palwap);\n            }\n        } else if (areaLoc != null) {\n            /** DLR e.V. (LTouk) XML circle location reference */\n            CircleLocationReference circleLoc = areaLoc\n                    .getCircleLocationReference();\n            RectangleLocationReference rectangleLoc = areaLoc\n                    .getRectangleLocationReference();\n            GridLocationReference gridLoc = areaLoc.getGridLocationReference();\n            PolygonLocationReference polygonLoc = areaLoc\n                    .getPolygonLocationReference();\n            ClosedLineLocationReference closedLineLoc = areaLoc\n                    .getClosedLineLocationReference();\n\n            if (circleLoc == null && polygonLoc == null && rectangleLoc == null\n                    && gridLoc == null && closedLineLoc == null) {\n                throw new OpenLRXMLException(XMLErrorType.DATA_ERROR,\n                        \"no area location found\");\n            }\n            if (circleLoc != null) {\n                CircleDecoder circleDecoder = new CircleDecoder();\n                rawLocRef = circleDecoder.decodeData(id, circleLoc);\n            } else if (rectangleLoc != null) {\n                RectangleDecoder rectangleDecoder = new RectangleDecoder();\n                rawLocRef = rectangleDecoder.decodeData(id, rectangleLoc);\n            } else if (gridLoc != null) {\n                GridDecoder gridDecoder = new GridDecoder();\n                rawLocRef = gridDecoder.decodeData(id, gridLoc);\n            } else if (polygonLoc != null) {\n                PolygonDecoder polygonDecoder = new PolygonDecoder();\n                rawLocRef = polygonDecoder.decodeData(id, polygonLoc);\n            } else if (closedLineLoc != null) {\n                ClosedLineDecoder closedLineDecoder = new ClosedLineDecoder();\n                rawLocRef = closedLineDecoder.decodeData(id, closedLineLoc);\n            }\n\n        }\n\n        return rawLocRef;\n    }", "signature": "RawLocationReference decodeData(final LocationReference lr)", "full_signature": "@Override public final RawLocationReference decodeData(final LocationReference lr)", "class_method_signature": "OpenLRXMLDecoder.decodeData(final LocationReference lr)", "testcase": false, "constructor": false, "invocations": ["getLocationReferenceData", "getLocationID", "getXMLLocationReference", "getLineLocationReference", "getPointLocationReference", "getAreaLocationReference", "decodeData", "getGeoCoordinate", "getPointAlongLine", "getPoiWithAccessPoint", "decodeData", "decodeData", "decodeData", "getCircleLocationReference", "getRectangleLocationReference", "getGridLocationReference", "getPolygonLocationReference", "getClosedLineLocationReference", "decodeData", "decodeData", "decodeData", "decodeData", "decodeData"]}, "repository": {"repo_id": 187195345, "url": "https://github.com/tomtom-international/openlr", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 24, "size": 4809, "license": "licensed"}}