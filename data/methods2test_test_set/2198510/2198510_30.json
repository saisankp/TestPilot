{"test_class": {"identifier": "TestPropertiesFileConfigurationProvider", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER =\n      LoggerFactory.getLogger(TestPropertiesFileConfigurationProvider.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER =\n      LoggerFactory.getLogger(TestPropertiesFileConfigurationProvider.class)", "var_name": "LOGGER"}, {"original_string": "private static final File TESTFILE = new File(\n      TestPropertiesFileConfigurationProvider.class.getClassLoader()\n          .getResource(\"flume-conf.properties\").getFile());", "modifier": "private static final", "type": "File", "declarator": "TESTFILE = new File(\n      TestPropertiesFileConfigurationProvider.class.getClassLoader()\n          .getResource(\"flume-conf.properties\").getFile())", "var_name": "TESTFILE"}, {"original_string": "private PropertiesFileConfigurationProvider provider;", "modifier": "private", "type": "PropertiesFileConfigurationProvider", "declarator": "provider", "var_name": "provider"}], "file": "flume-ng-node/src/test/java/org/apache/flume/node/TestPropertiesFileConfigurationProvider.java"}, "test_case": {"identifier": "testPropertyRead", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testPropertyRead() throws Exception {\n\n    FlumeConfiguration configuration = provider.getFlumeConfiguration();\n    Assert.assertNotNull(configuration);\n\n    /*\n     * Test the known errors in the file\n     */\n    List<String> expected = Lists.newArrayList();\n    expected.add(\"host5 CONFIG_ERROR\");\n    expected.add(\"host5 INVALID_PROPERTY\");\n    expected.add(\"host4 CONFIG_ERROR\");\n    expected.add(\"host4 CONFIG_ERROR\");\n    expected.add(\"host4 PROPERTY_VALUE_NULL\");\n    expected.add(\"host4 PROPERTY_VALUE_NULL\");\n    expected.add(\"host4 PROPERTY_VALUE_NULL\");\n    expected.add(\"host4 AGENT_CONFIGURATION_INVALID\");\n    expected.add(\"ch2 ATTRS_MISSING\");\n    expected.add(\"host3 CONFIG_ERROR\");\n    expected.add(\"host3 PROPERTY_VALUE_NULL\");\n    expected.add(\"host3 AGENT_CONFIGURATION_INVALID\");\n    expected.add(\"host2 PROPERTY_VALUE_NULL\");\n    expected.add(\"host2 AGENT_CONFIGURATION_INVALID\");\n    List<String> actual = Lists.newArrayList();\n    for (FlumeConfigurationError error : configuration.getConfigurationErrors()) {\n      actual.add(error.getComponentName() + \" \" + error.getErrorType().toString());\n    }\n    Collections.sort(expected);\n    Collections.sort(actual);\n    Assert.assertEquals(expected, actual);\n\n    AgentConfiguration agentConfiguration =\n        configuration.getConfigurationFor(\"host1\");\n    Assert.assertNotNull(agentConfiguration);\n\n    LOGGER.info(agentConfiguration.getPrevalidationConfig());\n    LOGGER.info(agentConfiguration.getPostvalidationConfig());\n\n    Set<String> sources = Sets.newHashSet(\"source1\");\n    Set<String> sinks = Sets.newHashSet(\"sink1\");\n    Set<String> channels = Sets.newHashSet(\"channel1\");\n\n    Assert.assertEquals(sources, agentConfiguration.getSourceSet());\n    Assert.assertEquals(sinks, agentConfiguration.getSinkSet());\n    Assert.assertEquals(channels, agentConfiguration.getChannelSet());\n  }", "signature": "void testPropertyRead()", "full_signature": "@Test public void testPropertyRead()", "class_method_signature": "TestPropertiesFileConfigurationProvider.testPropertyRead()", "testcase": true, "constructor": false, "invocations": ["getFlumeConfiguration", "assertNotNull", "newArrayList", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "newArrayList", "getConfigurationErrors", "add", "getComponentName", "toString", "getErrorType", "sort", "sort", "assertEquals", "getConfigurationFor", "assertNotNull", "info", "getPrevalidationConfig", "info", "getPostvalidationConfig", "newHashSet", "newHashSet", "newHashSet", "assertEquals", "getSourceSet", "assertEquals", "getSinkSet", "assertEquals", "getChannelSet"]}, "focal_class": {"identifier": "PropertiesFileConfigurationProvider", "superclass": "extends\n    AbstractConfigurationProvider", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory\n      .getLogger(PropertiesFileConfigurationProvider.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory\n      .getLogger(PropertiesFileConfigurationProvider.class)", "var_name": "LOGGER"}, {"original_string": "private static final String DEFAULT_PROPERTIES_IMPLEMENTATION = \"java.util.Properties\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_PROPERTIES_IMPLEMENTATION = \"java.util.Properties\"", "var_name": "DEFAULT_PROPERTIES_IMPLEMENTATION"}, {"original_string": "private final File file;", "modifier": "private final", "type": "File", "declarator": "file", "var_name": "file"}], "methods": [{"identifier": "PropertiesFileConfigurationProvider", "parameters": "(String agentName, File file)", "modifiers": "public", "return": "", "signature": " PropertiesFileConfigurationProvider(String agentName, File file)", "full_signature": "public  PropertiesFileConfigurationProvider(String agentName, File file)", "class_method_signature": "PropertiesFileConfigurationProvider.PropertiesFileConfigurationProvider(String agentName, File file)", "testcase": false, "constructor": true}, {"identifier": "getFlumeConfiguration", "parameters": "()", "modifiers": "@Override public", "return": "FlumeConfiguration", "signature": "FlumeConfiguration getFlumeConfiguration()", "full_signature": "@Override public FlumeConfiguration getFlumeConfiguration()", "class_method_signature": "PropertiesFileConfigurationProvider.getFlumeConfiguration()", "testcase": false, "constructor": false}], "file": "flume-ng-node/src/main/java/org/apache/flume/node/PropertiesFileConfigurationProvider.java"}, "focal_method": {"identifier": "getFlumeConfiguration", "parameters": "()", "modifiers": "@Override public", "return": "FlumeConfiguration", "body": "@Override\n  public FlumeConfiguration getFlumeConfiguration() {\n    BufferedReader reader = null;\n    try {\n      reader = new BufferedReader(new FileReader(file));\n      String resolverClassName = System.getProperty(\"propertiesImplementation\",\n          DEFAULT_PROPERTIES_IMPLEMENTATION);\n      Class<? extends Properties> propsclass = Class.forName(resolverClassName)\n          .asSubclass(Properties.class);\n      Properties properties = propsclass.newInstance();\n      properties.load(reader);\n      return new FlumeConfiguration(toMap(properties));\n    } catch (IOException ex) {\n      LOGGER.error(\"Unable to load file:\" + file\n          + \" (I/O failure) - Exception follows.\", ex);\n    } catch (ClassNotFoundException e) {\n      LOGGER.error(\"Configuration resolver class not found\", e);\n    } catch (InstantiationException e) {\n      LOGGER.error(\"Instantiation exception\", e);\n    } catch (IllegalAccessException e) {\n      LOGGER.error(\"Illegal access exception\", e);\n    } finally {\n      if (reader != null) {\n        try {\n          reader.close();\n        } catch (IOException ex) {\n          LOGGER.warn(\n              \"Unable to close file reader for file: \" + file, ex);\n        }\n      }\n    }\n    return new FlumeConfiguration(new HashMap<String, String>());\n  }", "signature": "FlumeConfiguration getFlumeConfiguration()", "full_signature": "@Override public FlumeConfiguration getFlumeConfiguration()", "class_method_signature": "PropertiesFileConfigurationProvider.getFlumeConfiguration()", "testcase": false, "constructor": false, "invocations": ["getProperty", "asSubclass", "forName", "newInstance", "load", "toMap", "error", "error", "error", "error", "close", "warn"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}