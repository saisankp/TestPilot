{"test_class": {"identifier": "BaseNetConfigTest", "superclass": "", "interfaces": "", "fields": [], "file": "ethereumj-core/src/test/java/org/ethereum/config/net/BaseNetConfigTest.java"}, "test_case": {"identifier": "addedBlockShouldHaveIncrementedBlockNumber", "parameters": "()", "modifiers": "@Test(expected = RuntimeException.class) public", "return": "void", "body": "@Test(expected = RuntimeException.class)\n    public void addedBlockShouldHaveIncrementedBlockNumber() throws Exception {\n        BlockchainConfig blockchainConfig = new TestBlockchainConfig();\n\n        BaseNetConfig config = new BaseNetConfig();\n        config.add(0, blockchainConfig);\n        config.add(1, blockchainConfig);\n        config.add(0, blockchainConfig);\n    }", "signature": "void addedBlockShouldHaveIncrementedBlockNumber()", "full_signature": "@Test(expected = RuntimeException.class) public void addedBlockShouldHaveIncrementedBlockNumber()", "class_method_signature": "BaseNetConfigTest.addedBlockShouldHaveIncrementedBlockNumber()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add"]}, "focal_class": {"identifier": "BaseNetConfig", "superclass": "", "interfaces": "implements BlockchainNetConfig", "fields": [{"original_string": "private long[] blockNumbers = new long[64];", "modifier": "private", "type": "long[]", "declarator": "blockNumbers = new long[64]", "var_name": "blockNumbers"}, {"original_string": "private BlockchainConfig[] configs = new BlockchainConfig[64];", "modifier": "private", "type": "BlockchainConfig[]", "declarator": "configs = new BlockchainConfig[64]", "var_name": "configs"}, {"original_string": "private int count;", "modifier": "private", "type": "int", "declarator": "count", "var_name": "count"}], "methods": [{"identifier": "add", "parameters": "(long startBlockNumber, BlockchainConfig config)", "modifiers": "public", "return": "void", "signature": "void add(long startBlockNumber, BlockchainConfig config)", "full_signature": "public void add(long startBlockNumber, BlockchainConfig config)", "class_method_signature": "BaseNetConfig.add(long startBlockNumber, BlockchainConfig config)", "testcase": false, "constructor": false}, {"identifier": "getConfigForBlock", "parameters": "(long blockNumber)", "modifiers": "@Override public", "return": "BlockchainConfig", "signature": "BlockchainConfig getConfigForBlock(long blockNumber)", "full_signature": "@Override public BlockchainConfig getConfigForBlock(long blockNumber)", "class_method_signature": "BaseNetConfig.getConfigForBlock(long blockNumber)", "testcase": false, "constructor": false}, {"identifier": "getCommonConstants", "parameters": "()", "modifiers": "@Override public", "return": "Constants", "signature": "Constants getCommonConstants()", "full_signature": "@Override public Constants getCommonConstants()", "class_method_signature": "BaseNetConfig.getCommonConstants()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "BaseNetConfig.toString()", "testcase": false, "constructor": false}], "file": "ethereumj-core/src/main/java/org/ethereum/config/net/BaseNetConfig.java"}, "focal_method": {"identifier": "add", "parameters": "(long startBlockNumber, BlockchainConfig config)", "modifiers": "public", "return": "void", "body": "public void add(long startBlockNumber, BlockchainConfig config) {\n        if (count >= blockNumbers.length) throw new RuntimeException();\n        if (count > 0 && blockNumbers[count] >= startBlockNumber)\n            throw new RuntimeException(\"Block numbers should increase\");\n        if (count == 0 && startBlockNumber > 0) throw new RuntimeException(\"First config should start from block 0\");\n        blockNumbers[count] = startBlockNumber;\n        configs[count] = config;\n        count++;\n    }", "signature": "void add(long startBlockNumber, BlockchainConfig config)", "full_signature": "public void add(long startBlockNumber, BlockchainConfig config)", "class_method_signature": "BaseNetConfig.add(long startBlockNumber, BlockchainConfig config)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 19730456, "url": "https://github.com/ethereum/ethereumj", "language": "Java", "is_fork": false, "fork_count": 1034, "stargazer_count": 2058, "size": 47979, "license": "licensed"}}