{"test_class": {"identifier": "CSVAttributesOnlyStrategyTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/unsupported/csv/src/test/java/org/geotools/data/csv/parse/CSVAttributesOnlyStrategyTest.java"}, "test_case": {"identifier": "testBuildFeatureType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBuildFeatureType() {\n        String input = CSVTestStrategySupport.buildInputString(\"quux,morx\\n\");\n        CSVFileState fileState = new CSVFileState(input, \"foo\");\n        CSVStrategy strategy = new CSVAttributesOnlyStrategy(fileState);\n        SimpleFeatureType featureType = strategy.getFeatureType();\n\n        assertEquals(\"Invalid attribute count\", 2, featureType.getAttributeCount());\n        assertEquals(\"Invalid featuretype name\", \"foo\", featureType.getName().getLocalPart());\n        assertEquals(\"Invalid name\", \"foo\", featureType.getTypeName());\n\n        List<AttributeDescriptor> attrs = featureType.getAttributeDescriptors();\n        assertEquals(\"Invalid number of attributes\", 2, attrs.size());\n        List<String> attrNames = new ArrayList<String>(2);\n        for (AttributeDescriptor attr : attrs) {\n            if (!(attr instanceof GeometryDescriptor)) {\n                attrNames.add(attr.getName().getLocalPart());\n            }\n        }\n        Collections.sort(attrNames);\n        assertEquals(\"Invalid property descriptor\", \"morx\", attrNames.get(0));\n        assertEquals(\"Invalid property descriptor\", \"quux\", attrNames.get(1));\n    }", "signature": "void testBuildFeatureType()", "full_signature": "@Test public void testBuildFeatureType()", "class_method_signature": "CSVAttributesOnlyStrategyTest.testBuildFeatureType()", "testcase": true, "constructor": false, "invocations": ["buildInputString", "getFeatureType", "assertEquals", "getAttributeCount", "assertEquals", "getLocalPart", "getName", "assertEquals", "getTypeName", "getAttributeDescriptors", "assertEquals", "size", "add", "getLocalPart", "getName", "sort", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "CSVAttributesOnlyStrategy", "superclass": "extends CSVStrategy", "interfaces": "", "fields": [], "methods": [{"identifier": "CSVAttributesOnlyStrategy", "parameters": "(CSVFileState csvFileState)", "modifiers": "public", "return": "", "signature": " CSVAttributesOnlyStrategy(CSVFileState csvFileState)", "full_signature": "public  CSVAttributesOnlyStrategy(CSVFileState csvFileState)", "class_method_signature": "CSVAttributesOnlyStrategy.CSVAttributesOnlyStrategy(CSVFileState csvFileState)", "testcase": false, "constructor": true}, {"identifier": "buildFeatureType", "parameters": "()", "modifiers": "@Override protected", "return": "SimpleFeatureType", "signature": "SimpleFeatureType buildFeatureType()", "full_signature": "@Override protected SimpleFeatureType buildFeatureType()", "class_method_signature": "CSVAttributesOnlyStrategy.buildFeatureType()", "testcase": false, "constructor": false}, {"identifier": "createSchema", "parameters": "(SimpleFeatureType featureType)", "modifiers": "@Override public", "return": "void", "signature": "void createSchema(SimpleFeatureType featureType)", "full_signature": "@Override public void createSchema(SimpleFeatureType featureType)", "class_method_signature": "CSVAttributesOnlyStrategy.createSchema(SimpleFeatureType featureType)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(SimpleFeature feature)", "modifiers": "@Override public", "return": "String[]", "signature": "String[] encode(SimpleFeature feature)", "full_signature": "@Override public String[] encode(SimpleFeature feature)", "class_method_signature": "CSVAttributesOnlyStrategy.encode(SimpleFeature feature)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(String recordId, String[] csvRecord)", "modifiers": "@Override public", "return": "SimpleFeature", "signature": "SimpleFeature decode(String recordId, String[] csvRecord)", "full_signature": "@Override public SimpleFeature decode(String recordId, String[] csvRecord)", "class_method_signature": "CSVAttributesOnlyStrategy.decode(String recordId, String[] csvRecord)", "testcase": false, "constructor": false}], "file": "modules/unsupported/csv/src/main/java/org/geotools/data/csv/parse/CSVAttributesOnlyStrategy.java"}, "focal_method": {"identifier": "buildFeatureType", "parameters": "()", "modifiers": "@Override protected", "return": "SimpleFeatureType", "body": "@Override\n    protected SimpleFeatureType buildFeatureType() {\n        SimpleFeatureTypeBuilder builder = CSVStrategy.createBuilder(csvFileState);\n        return builder.buildFeatureType();\n    }", "signature": "SimpleFeatureType buildFeatureType()", "full_signature": "@Override protected SimpleFeatureType buildFeatureType()", "class_method_signature": "CSVAttributesOnlyStrategy.buildFeatureType()", "testcase": false, "constructor": false, "invocations": ["createBuilder", "buildFeatureType"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}