{"test_class": {"identifier": "CertificateServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ICertificateService certificateService;", "modifier": "@Autowired\n    private", "type": "ICertificateService", "declarator": "certificateService", "var_name": "certificateService"}], "file": "storage-service/src/test/java/com/stnetix/ariaddna/persistence/services/CertificateServiceImplTest.java"}, "test_case": {"identifier": "saveTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void saveTest() throws Exception {\n\n        CertificateDTO certificateDTO = new CertificateDTO();\n        certificateDTO.setActive(true);\n        UUID uuid = UUID.randomUUID();\n        certificateDTO.setUuid(uuid.toString());\n\n        CertificateDTO savedCertDTO = certificateService.save(certificateDTO);\n        assertNotNull(savedCertDTO);\n        assertNotNull(savedCertDTO.getId());\n\n    }", "signature": "void saveTest()", "full_signature": "@Test public void saveTest()", "class_method_signature": "CertificateServiceImplTest.saveTest()", "testcase": true, "constructor": false, "invocations": ["setActive", "randomUUID", "setUuid", "toString", "save", "assertNotNull", "assertNotNull", "getId"]}, "focal_class": {"identifier": "CertificateServiceImpl", "superclass": "", "interfaces": "implements ICertificateService", "fields": [{"original_string": "private CertificateTransformer tranformer;", "modifier": "private", "type": "CertificateTransformer", "declarator": "tranformer", "var_name": "tranformer"}, {"original_string": "@Autowired\n    private CertificateRepository repository;", "modifier": "@Autowired\n    private", "type": "CertificateRepository", "declarator": "repository", "var_name": "repository"}], "methods": [{"identifier": "CertificateServiceImpl", "parameters": "()", "modifiers": "public", "return": "", "signature": " CertificateServiceImpl()", "full_signature": "public  CertificateServiceImpl()", "class_method_signature": "CertificateServiceImpl.CertificateServiceImpl()", "testcase": false, "constructor": true}, {"identifier": "save", "parameters": "(CertificateDTO certificateDTO)", "modifiers": "@Override @Transactional public", "return": "CertificateDTO", "signature": "CertificateDTO save(CertificateDTO certificateDTO)", "full_signature": "@Override @Transactional public CertificateDTO save(CertificateDTO certificateDTO)", "class_method_signature": "CertificateServiceImpl.save(CertificateDTO certificateDTO)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(CertificateDTO certificateDTO)", "modifiers": "@Override public", "return": "void", "signature": "void remove(CertificateDTO certificateDTO)", "full_signature": "@Override public void remove(CertificateDTO certificateDTO)", "class_method_signature": "CertificateServiceImpl.remove(CertificateDTO certificateDTO)", "testcase": false, "constructor": false}, {"identifier": "getActiveCertificates", "parameters": "()", "modifiers": "@Override public", "return": "List<CertificateDTO>", "signature": "List<CertificateDTO> getActiveCertificates()", "full_signature": "@Override public List<CertificateDTO> getActiveCertificates()", "class_method_signature": "CertificateServiceImpl.getActiveCertificates()", "testcase": false, "constructor": false}, {"identifier": "getDisableCertificates", "parameters": "()", "modifiers": "@Override public", "return": "List<CertificateDTO>", "signature": "List<CertificateDTO> getDisableCertificates()", "full_signature": "@Override public List<CertificateDTO> getDisableCertificates()", "class_method_signature": "CertificateServiceImpl.getDisableCertificates()", "testcase": false, "constructor": false}, {"identifier": "getAllCertificates", "parameters": "()", "modifiers": "@Override public", "return": "List<CertificateDTO>", "signature": "List<CertificateDTO> getAllCertificates()", "full_signature": "@Override public List<CertificateDTO> getAllCertificates()", "class_method_signature": "CertificateServiceImpl.getAllCertificates()", "testcase": false, "constructor": false}], "file": "storage-service/src/main/java/com/stnetix/ariaddna/persistence/services/CertificateServiceImpl.java"}, "focal_method": {"identifier": "save", "parameters": "(CertificateDTO certificateDTO)", "modifiers": "@Override @Transactional public", "return": "CertificateDTO", "body": "@Override\n    @Transactional\n    public CertificateDTO save(CertificateDTO certificateDTO) {\n        Certificate certificate = tranformer.certificateDTOToEntity(certificateDTO);\n        return tranformer.certificateEntityToDTO(repository.save(certificate));\n    }", "signature": "CertificateDTO save(CertificateDTO certificateDTO)", "full_signature": "@Override @Transactional public CertificateDTO save(CertificateDTO certificateDTO)", "class_method_signature": "CertificateServiceImpl.save(CertificateDTO certificateDTO)", "testcase": false, "constructor": false, "invocations": ["certificateDTOToEntity", "certificateEntityToDTO", "save"]}, "repository": {"repo_id": 73354878, "url": "https://github.com/StnetixDevTeam/ariADDna", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 11, "size": 971, "license": "licensed"}}