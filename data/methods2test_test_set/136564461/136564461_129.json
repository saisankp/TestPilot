{"test_class": {"identifier": "EncodedPointEd25519Test", "superclass": "", "interfaces": "", "fields": [], "file": "eddsa/src/test/java/io/moatwel/crypto/eddsa/ed25519/EncodedPointEd25519Test.java"}, "test_case": {"identifier": "success_DecodePoint_11", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void success_DecodePoint_11() throws DecodeException {\n        EncodedPoint encodedPoint = new EncodedPointEd25519(HexEncoder.getBytes(\"0a7839c8658c2186c5650644ee832c092cb46bff7c6a777621567dd5c9e8c8c3\"));\n\n        Point point = encodedPoint.decode();\n\n        assertThat(point.getX().getInteger(), is(new BigInteger(\"13267040035417295396187264812269447027004279287377164120608901297558640265393\")));\n        assertThat(point.getY().getInteger(), is(new BigInteger(\"30659936914619338944546583179452063721257503761316379129960678675145268230154\")));\n    }", "signature": "void success_DecodePoint_11()", "full_signature": "@Test public void success_DecodePoint_11()", "class_method_signature": "EncodedPointEd25519Test.success_DecodePoint_11()", "testcase": true, "constructor": false, "invocations": ["getBytes", "decode", "assertThat", "getInteger", "getX", "is", "assertThat", "getInteger", "getY", "is"]}, "focal_class": {"identifier": "EncodedPointEd25519", "superclass": "extends EncodedPoint", "interfaces": "", "fields": [{"original_string": "private static final Curve curve = Curve25519.getInstance();", "modifier": "private static final", "type": "Curve", "declarator": "curve = Curve25519.getInstance()", "var_name": "curve"}], "methods": [{"identifier": "EncodedPointEd25519", "parameters": "(byte[] value)", "modifiers": "public", "return": "", "signature": " EncodedPointEd25519(byte[] value)", "full_signature": "public  EncodedPointEd25519(byte[] value)", "class_method_signature": "EncodedPointEd25519.EncodedPointEd25519(byte[] value)", "testcase": false, "constructor": true}, {"identifier": "decode", "parameters": "()", "modifiers": "@Override public", "return": "Point", "signature": "Point decode()", "full_signature": "@Override public Point decode()", "class_method_signature": "EncodedPointEd25519.decode()", "testcase": false, "constructor": false}, {"identifier": "recoverY", "parameters": "(byte[] source)", "modifiers": "private", "return": "Coordinate", "signature": "Coordinate recoverY(byte[] source)", "full_signature": "private Coordinate recoverY(byte[] source)", "class_method_signature": "EncodedPointEd25519.recoverY(byte[] source)", "testcase": false, "constructor": false}, {"identifier": "recoverX", "parameters": "(Coordinate y, int xSource)", "modifiers": "private", "return": "Coordinate", "signature": "Coordinate recoverX(Coordinate y, int xSource)", "full_signature": "private Coordinate recoverX(Coordinate y, int xSource)", "class_method_signature": "EncodedPointEd25519.recoverX(Coordinate y, int xSource)", "testcase": false, "constructor": false}], "file": "eddsa/src/main/java/io/moatwel/crypto/eddsa/ed25519/EncodedPointEd25519.java"}, "focal_method": {"identifier": "decode", "parameters": "()", "modifiers": "@Override public", "return": "Point", "body": "@Override\n    public Point decode() throws DecodeException {\n        // read bit for recovering x\n        byte readTarget = value[value.length - 1];\n        int x0 = ByteUtils.readBit(readTarget, 7);\n\n        Coordinate y = recoverY(this.value);\n\n        Coordinate x = recoverX(y, x0);\n\n        return PointEd25519.fromAffine(x, y);\n    }", "signature": "Point decode()", "full_signature": "@Override public Point decode()", "class_method_signature": "EncodedPointEd25519.decode()", "testcase": false, "constructor": false, "invocations": ["readBit", "recoverY", "recoverX", "fromAffine"]}, "repository": {"repo_id": 136564461, "url": "https://github.com/halu5071/edwards", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 626, "license": "licensed"}}