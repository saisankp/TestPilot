{"test_class": {"identifier": "TestNotificationCenter", "superclass": "", "interfaces": "", "fields": [], "file": "comm/src/test/java/br/com/hole19/marvel/comm/post_office/TestNotificationCenter.java"}, "test_case": {"identifier": "testNotifyError", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNotifyError () {\n        ResponseWrapper response = Mockito.mock(ResponseWrapper.class);\n        Mockito.when(response.getType()).thenReturn(ResponseType.ERROR);\n        NotificationCenter.notify(EventCatalog.e0000, response);\n    }", "signature": "void testNotifyError()", "full_signature": "@Test public void testNotifyError()", "class_method_signature": "TestNotificationCenter.testNotifyError()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getType", "notify"]}, "focal_class": {"identifier": "NotificationCenter", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String TAG = \"NotificationCenter\";", "modifier": "public static final", "type": "String", "declarator": "TAG = \"NotificationCenter\"", "var_name": "TAG"}, {"original_string": "private static Set<TaskExecutor> mSubEvent0000 = new HashSet<>();", "modifier": "private static", "type": "Set<TaskExecutor>", "declarator": "mSubEvent0000 = new HashSet<>()", "var_name": "mSubEvent0000"}, {"original_string": "private static Set<TaskExecutor> mSubEvent0001 = new HashSet<>();", "modifier": "private static", "type": "Set<TaskExecutor>", "declarator": "mSubEvent0001 = new HashSet<>()", "var_name": "mSubEvent0001"}, {"original_string": "private static Set<TaskExecutor> mSubEvent0002 = new HashSet<>();", "modifier": "private static", "type": "Set<TaskExecutor>", "declarator": "mSubEvent0002 = new HashSet<>()", "var_name": "mSubEvent0002"}], "methods": [{"identifier": "notify", "parameters": "(EventCatalog event, ResponseWrapper response)", "modifiers": "public static", "return": "void", "signature": "void notify(EventCatalog event, ResponseWrapper response)", "full_signature": "public static void notify(EventCatalog event, ResponseWrapper response)", "class_method_signature": "NotificationCenter.notify(EventCatalog event, ResponseWrapper response)", "testcase": false, "constructor": false}, {"identifier": "getSubscriberList", "parameters": "(EventCatalog event)", "modifiers": "private static", "return": "Set<TaskExecutor>", "signature": "Set<TaskExecutor> getSubscriberList(EventCatalog event)", "full_signature": "private static Set<TaskExecutor> getSubscriberList(EventCatalog event)", "class_method_signature": "NotificationCenter.getSubscriberList(EventCatalog event)", "testcase": false, "constructor": false}], "file": "comm/src/main/java/br/com/hole19/marvel/comm/post_office/NotificationCenter.java"}, "focal_method": {"identifier": "notify", "parameters": "(EventCatalog event, ResponseWrapper response)", "modifiers": "public static", "return": "void", "body": "public static void notify(EventCatalog event, ResponseWrapper response) {\n        for (TaskExecutor tasker : NotificationCenter.getSubscriberList(event)) {\n            switch (response.getType()) {\n                case SUCCESS:\n                    tasker.executeOnSuccessTask(response.getPayload());\n                    break;\n                case ERROR:\n                    tasker.executeOnErrorTask(response.getPayload());\n                    break;\n            }\n        }\n    }", "signature": "void notify(EventCatalog event, ResponseWrapper response)", "full_signature": "public static void notify(EventCatalog event, ResponseWrapper response)", "class_method_signature": "NotificationCenter.notify(EventCatalog event, ResponseWrapper response)", "testcase": false, "constructor": false, "invocations": ["getSubscriberList", "getType", "executeOnSuccessTask", "getPayload", "executeOnErrorTask", "getPayload"]}, "repository": {"repo_id": 59801168, "url": "https://github.com/edsilfer/marvel-characters", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 6, "size": 17729, "license": "licensed"}}