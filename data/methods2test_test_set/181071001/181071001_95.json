{"test_class": {"identifier": "TestStandardFDProcessGroupFlowService", "superclass": "extends BaseFDServiceTest", "interfaces": "", "fields": [{"original_string": "private ProcessorDefinition processorDefinition;", "modifier": "private", "type": "ProcessorDefinition", "declarator": "processorDefinition", "var_name": "processorDefinition"}, {"original_string": "private ControllerServiceDefinition controllerServiceDefinition;", "modifier": "private", "type": "ControllerServiceDefinition", "declarator": "controllerServiceDefinition", "var_name": "controllerServiceDefinition"}, {"original_string": "private FDProcessorService processorService;", "modifier": "private", "type": "FDProcessorService", "declarator": "processorService", "var_name": "processorService"}, {"original_string": "private FDControllerServiceService controllerServiceService;", "modifier": "private", "type": "FDControllerServiceService", "declarator": "controllerServiceService", "var_name": "controllerServiceService"}, {"original_string": "private FDProcessGroupFlowService processGroupFlowService;", "modifier": "private", "type": "FDProcessGroupFlowService", "declarator": "processGroupFlowService", "var_name": "processGroupFlowService"}], "file": "efm/efm-flow-designer/efm-flow-designer-framework/src/test/java/com/cloudera/cem/efm/service/component/TestStandardFDProcessGroupFlowService.java"}, "test_case": {"identifier": "testGetProcessGroupWithChildren", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetProcessGroupWithChildren() {\n        final String flowId = \"1\";\n        when(flowManager.getFlow(flowId)).thenReturn(Optional.of(flow));\n\n        // We just want to prove that the service is populating the component definitions, so just return anything here\n        when(processorService.getComponentDefinition(any(String.class), any(VersionedProcessor.class))).thenReturn(processorDefinition);\n        when(controllerServiceService.getComponentDefinition(any(String.class), any(VersionedControllerService.class))).thenReturn(controllerServiceDefinition);\n\n        final FDProcessGroupFlow processGroupFlow = processGroupFlowService.get(flowId, flowContent.getIdentifier(), true);\n        assertNotNull(processGroupFlow);\n\n        final FDProcessGroupFlowContent processGroupFlowContent = processGroupFlow.getFlowContent();\n        assertTrue(processGroupFlowContent.getProcessGroups().size() > 0);\n        assertEquals(flowContent.getProcessGroups().size(), processGroupFlowContent.getProcessGroups().size());\n\n        final int totalProcessors = getNumberOfProcessors(processGroupFlowContent);\n        assertEquals(5, totalProcessors);\n\n        final int totalServices = getNumberOfControllerServices(processGroupFlowContent);\n        assertEquals(1, totalServices);\n    }", "signature": "void testGetProcessGroupWithChildren()", "full_signature": "@Test public void testGetProcessGroupWithChildren()", "class_method_signature": "TestStandardFDProcessGroupFlowService.testGetProcessGroupWithChildren()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getFlow", "of", "thenReturn", "when", "getComponentDefinition", "any", "any", "thenReturn", "when", "getComponentDefinition", "any", "any", "get", "getIdentifier", "assertNotNull", "getFlowContent", "assertTrue", "size", "getProcessGroups", "assertEquals", "size", "getProcessGroups", "size", "getProcessGroups", "getNumberOfProcessors", "assertEquals", "getNumberOfControllerServices", "assertEquals"]}, "focal_class": {"identifier": "StandardFDProcessGroupFlowService", "superclass": "", "interfaces": "implements FDProcessGroupFlowService", "fields": [{"original_string": "public static final String ROOT_GROUP_ID = \"root\";", "modifier": "public static final", "type": "String", "declarator": "ROOT_GROUP_ID = \"root\"", "var_name": "ROOT_GROUP_ID"}, {"original_string": "private final FDFlowManager flowManager;", "modifier": "private final", "type": "FDFlowManager", "declarator": "flowManager", "var_name": "flowManager"}, {"original_string": "private final FDProcessorService processorService;", "modifier": "private final", "type": "FDProcessorService", "declarator": "processorService", "var_name": "processorService"}, {"original_string": "private final FDControllerServiceService controllerServiceService;", "modifier": "private final", "type": "FDControllerServiceService", "declarator": "controllerServiceService", "var_name": "controllerServiceService"}, {"original_string": "private final ValidationService validationService;", "modifier": "private final", "type": "ValidationService", "declarator": "validationService", "var_name": "validationService"}, {"original_string": "private final ControllerServiceLookup serviceLookup;", "modifier": "private final", "type": "ControllerServiceLookup", "declarator": "serviceLookup", "var_name": "serviceLookup"}], "methods": [{"identifier": "StandardFDProcessGroupFlowService", "parameters": "(final FDFlowManager flowManager,\n                                             final FDProcessorService processorService,\n                                             final FDControllerServiceService controllerServiceService,\n                                             final ValidationService validationService,\n                                             final ControllerServiceLookup serviceLookup)", "modifiers": "@Autowired public", "return": "", "signature": " StandardFDProcessGroupFlowService(final FDFlowManager flowManager,\n                                             final FDProcessorService processorService,\n                                             final FDControllerServiceService controllerServiceService,\n                                             final ValidationService validationService,\n                                             final ControllerServiceLookup serviceLookup)", "full_signature": "@Autowired public  StandardFDProcessGroupFlowService(final FDFlowManager flowManager,\n                                             final FDProcessorService processorService,\n                                             final FDControllerServiceService controllerServiceService,\n                                             final ValidationService validationService,\n                                             final ControllerServiceLookup serviceLookup)", "class_method_signature": "StandardFDProcessGroupFlowService.StandardFDProcessGroupFlowService(final FDFlowManager flowManager,\n                                             final FDProcessorService processorService,\n                                             final FDControllerServiceService controllerServiceService,\n                                             final ValidationService validationService,\n                                             final ControllerServiceLookup serviceLookup)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "(final String flowId, final String processGroupId, final boolean includeChildren)", "modifiers": "@Override public", "return": "FDProcessGroupFlow", "signature": "FDProcessGroupFlow get(final String flowId, final String processGroupId, final boolean includeChildren)", "full_signature": "@Override public FDProcessGroupFlow get(final String flowId, final String processGroupId, final boolean includeChildren)", "class_method_signature": "StandardFDProcessGroupFlowService.get(final String flowId, final String processGroupId, final boolean includeChildren)", "testcase": false, "constructor": false}, {"identifier": "createProcessGroupFlowConfig", "parameters": "(\n            final FDFlow flow, final VersionedProcessGroup source, final boolean includeChildren)", "modifiers": "private", "return": "FDProcessGroupFlowContent", "signature": "FDProcessGroupFlowContent createProcessGroupFlowConfig(\n            final FDFlow flow, final VersionedProcessGroup source, final boolean includeChildren)", "full_signature": "private FDProcessGroupFlowContent createProcessGroupFlowConfig(\n            final FDFlow flow, final VersionedProcessGroup source, final boolean includeChildren)", "class_method_signature": "StandardFDProcessGroupFlowService.createProcessGroupFlowConfig(\n            final FDFlow flow, final VersionedProcessGroup source, final boolean includeChildren)", "testcase": false, "constructor": false}], "file": "efm/efm-flow-designer/efm-flow-designer-framework/src/main/java/com/cloudera/cem/efm/service/component/StandardFDProcessGroupFlowService.java"}, "focal_method": {"identifier": "get", "parameters": "(final String flowId, final String processGroupId, final boolean includeChildren)", "modifiers": "@Override public", "return": "FDProcessGroupFlow", "body": "@Override\n    public FDProcessGroupFlow get(final String flowId, final String processGroupId, final boolean includeChildren) {\n        // Locate the flow where the process group is located\n        final Optional<FDFlow> flowOptional = flowManager.getFlow(flowId);\n        if (!flowOptional.isPresent()) {\n            throw new ResourceNotFoundException(\"A flow does not exist with the given id\");\n        }\n\n        final FDFlow flow = flowOptional.get();\n        final FDFlowMetadata flowMetadata = flow.getFlowMetadata();\n        final VersionedProcessGroup flowContents = flow.getFlowContent();\n        final FDVersionInfo versionInfo = flow.getVersionInfo();\n        final BigInteger localFlowRevision = flow.getLocalFlowRevision();\n\n        // Locate the requested process group with in the flow, or throw an exception\n        final VersionedProcessGroup versionedProcessGroup = ROOT_GROUP_ID.equals(processGroupId)\n                ? flowContents : ComponentUtils.getProcessGroupOrNotFound(processGroupId, flowContents);\n\n        // Convert the VersionedProcessGroup to an FDProcessGroupFlowContent object\n        final FDProcessGroupFlowContent processGroupFlowConfig = createProcessGroupFlowConfig(flow, versionedProcessGroup, includeChildren);\n\n        // Create the overall process group flow to wrap metadata and content\n        final FDProcessGroupFlow processGroupFlow = new FDProcessGroupFlow();\n        processGroupFlow.setFlowContent(processGroupFlowConfig);\n        processGroupFlow.setFlowMetadata(flowMetadata);\n        processGroupFlow.setVersionInfo(versionInfo);\n        processGroupFlow.setLocalFlowRevision(localFlowRevision);\n        return  processGroupFlow;\n    }", "signature": "FDProcessGroupFlow get(final String flowId, final String processGroupId, final boolean includeChildren)", "full_signature": "@Override public FDProcessGroupFlow get(final String flowId, final String processGroupId, final boolean includeChildren)", "class_method_signature": "StandardFDProcessGroupFlowService.get(final String flowId, final String processGroupId, final boolean includeChildren)", "testcase": false, "constructor": false, "invocations": ["getFlow", "isPresent", "get", "getFlowMetadata", "getFlowContent", "getVersionInfo", "getLocalFlowRevision", "equals", "getProcessGroupOrNotFound", "createProcessGroupFlowConfig", "setFlowContent", "setFlowMetadata", "setVersionInfo", "setLocalFlowRevision"]}, "repository": {"repo_id": 181071001, "url": "https://github.com/hortonworks/efm", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 7, "size": 2003, "license": "licensed"}}