{"test_class": {"identifier": "ROdpsTest", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "final static String table = \"odps_r_operator\";", "modifier": "final static", "type": "String", "declarator": "table = \"odps_r_operator\"", "var_name": "table"}, {"original_string": "static String file;", "modifier": "static", "type": "String", "declarator": "file", "var_name": "file"}, {"original_string": "static ROdps rodps;", "modifier": "static", "type": "ROdps", "declarator": "rodps", "var_name": "rodps"}], "file": "java/src/test/java/com/aliyun/odps/rodps/ROdpsTest.java"}, "test_case": {"identifier": "testGetTablesList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetTablesList() throws ROdpsException, OdpsException {\n    List<DataFrameItem> ret = rodps.getTables(null, null);\n\n    for (DataFrameItem d : ret) {\n      List res = d.getData();\n      System.out.println(res);\n    }\n\n    assertNotNull(ret);\n    assertEquals(2, ret.size());\n    System.out.println(\"testN1GetTableList:\" + ret);\n  }", "signature": "void testGetTablesList()", "full_signature": "@Test public void testGetTablesList()", "class_method_signature": "ROdpsTest.testGetTablesList()", "testcase": true, "constructor": false, "invocations": ["getTables", "getData", "println", "assertNotNull", "assertEquals", "size", "println"]}, "focal_class": {"identifier": "ROdps", "superclass": "", "interfaces": "", "fields": [{"original_string": "static Log LOG = LogFactory.getLog(ROdps.class);", "modifier": "static", "type": "Log", "declarator": "LOG = LogFactory.getLog(ROdps.class)", "var_name": "LOG"}, {"original_string": "private String ODPS_PROJECT_NAME;", "modifier": "private", "type": "String", "declarator": "ODPS_PROJECT_NAME", "var_name": "ODPS_PROJECT_NAME"}, {"original_string": "private final Odps odps;", "modifier": "private final", "type": "Odps", "declarator": "odps", "var_name": "odps"}, {"original_string": "private String DT_ENDPOINT;", "modifier": "private", "type": "String", "declarator": "DT_ENDPOINT", "var_name": "DT_ENDPOINT"}, {"original_string": "private final static int RETRY_MAX = 3;", "modifier": "private final static", "type": "int", "declarator": "RETRY_MAX = 3", "var_name": "RETRY_MAX"}, {"original_string": "private final static String PROG_VERSION = \"rodps-1.3\";", "modifier": "private final static", "type": "String", "declarator": "PROG_VERSION = \"rodps-1.3\"", "var_name": "PROG_VERSION"}, {"original_string": "private String LOGVIEW_HOST;", "modifier": "private", "type": "String", "declarator": "LOGVIEW_HOST", "var_name": "LOGVIEW_HOST"}, {"original_string": "private String bizId = null;", "modifier": "private", "type": "String", "declarator": "bizId = null", "var_name": "bizId"}, {"original_string": "private HashMap settings;", "modifier": "private", "type": "HashMap", "declarator": "settings", "var_name": "settings"}], "methods": [{"identifier": "ROdps", "parameters": "(String projectName, String accessID, String accessKey, String endPoint,\n      String dtEndpoint, String logviewHost, String log4j_properties)", "modifiers": "public", "return": "", "signature": " ROdps(String projectName, String accessID, String accessKey, String endPoint,\n      String dtEndpoint, String logviewHost, String log4j_properties)", "full_signature": "public  ROdps(String projectName, String accessID, String accessKey, String endPoint,\n      String dtEndpoint, String logviewHost, String log4j_properties)", "class_method_signature": "ROdps.ROdps(String projectName, String accessID, String accessKey, String endPoint,\n      String dtEndpoint, String logviewHost, String log4j_properties)", "testcase": false, "constructor": true}, {"identifier": "setBizId", "parameters": "(String s)", "modifiers": "public", "return": "void", "signature": "void setBizId(String s)", "full_signature": "public void setBizId(String s)", "class_method_signature": "ROdps.setBizId(String s)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(String key, String value)", "modifiers": "public", "return": "void", "signature": "void set(String key, String value)", "full_signature": "public void set(String key, String value)", "class_method_signature": "ROdps.set(String key, String value)", "testcase": false, "constructor": false}, {"identifier": "unset", "parameters": "(String key)", "modifiers": "public", "return": "void", "signature": "void unset(String key)", "full_signature": "public void unset(String key)", "class_method_signature": "ROdps.unset(String key)", "testcase": false, "constructor": false}, {"identifier": "writeTableFromDT", "parameters": "(String projectName, String tableName, String partition,\n      String dataFilePathName, String columnDelimiter, String rowDelimiter, long recordCount,\n      int threadNumber)", "modifiers": "public", "return": "void", "signature": "void writeTableFromDT(String projectName, String tableName, String partition,\n      String dataFilePathName, String columnDelimiter, String rowDelimiter, long recordCount,\n      int threadNumber)", "full_signature": "public void writeTableFromDT(String projectName, String tableName, String partition,\n      String dataFilePathName, String columnDelimiter, String rowDelimiter, long recordCount,\n      int threadNumber)", "class_method_signature": "ROdps.writeTableFromDT(String projectName, String tableName, String partition,\n      String dataFilePathName, String columnDelimiter, String rowDelimiter, long recordCount,\n      int threadNumber)", "testcase": false, "constructor": false}, {"identifier": "loadTableFromDT", "parameters": "(String projectName, String tableName, String partition,\n      String tempFile, String colDelimiter, String rowDelimiter, int limit, int threadNumber)", "modifiers": "public", "return": "List<List<String>>", "signature": "List<List<String>> loadTableFromDT(String projectName, String tableName, String partition,\n      String tempFile, String colDelimiter, String rowDelimiter, int limit, int threadNumber)", "full_signature": "public List<List<String>> loadTableFromDT(String projectName, String tableName, String partition,\n      String tempFile, String colDelimiter, String rowDelimiter, int limit, int threadNumber)", "class_method_signature": "ROdps.loadTableFromDT(String projectName, String tableName, String partition,\n      String tempFile, String colDelimiter, String rowDelimiter, int limit, int threadNumber)", "testcase": false, "constructor": false}, {"identifier": "useProject", "parameters": "(String projectName)", "modifiers": "public", "return": "boolean", "signature": "boolean useProject(String projectName)", "full_signature": "public boolean useProject(String projectName)", "class_method_signature": "ROdps.useProject(String projectName)", "testcase": false, "constructor": false}, {"identifier": "createSchema", "parameters": "(String schemaJson, String type)", "modifiers": "private", "return": "Map<String, Schema>", "signature": "Map<String, Schema> createSchema(String schemaJson, String type)", "full_signature": "private Map<String, Schema> createSchema(String schemaJson, String type)", "class_method_signature": "ROdps.createSchema(String schemaJson, String type)", "testcase": false, "constructor": false}, {"identifier": "getProjectObject", "parameters": "(String projectName)", "modifiers": "private", "return": "Project", "signature": "Project getProjectObject(String projectName)", "full_signature": "private Project getProjectObject(String projectName)", "class_method_signature": "ROdps.getProjectObject(String projectName)", "testcase": false, "constructor": false}, {"identifier": "getProjectName", "parameters": "(String projectName)", "modifiers": "public", "return": "String", "signature": "String getProjectName(String projectName)", "full_signature": "public String getProjectName(String projectName)", "class_method_signature": "ROdps.getProjectName(String projectName)", "testcase": false, "constructor": false}, {"identifier": "getTableSize", "parameters": "(String projectName, String tableName, String partition)", "modifiers": "public", "return": "long", "signature": "long getTableSize(String projectName, String tableName, String partition)", "full_signature": "public long getTableSize(String projectName, String tableName, String partition)", "class_method_signature": "ROdps.getTableSize(String projectName, String tableName, String partition)", "testcase": false, "constructor": false}, {"identifier": "describeTable", "parameters": "(String projectName, String tableName, String partition)", "modifiers": "public", "return": "List<DataFrameItem>", "signature": "List<DataFrameItem> describeTable(String projectName, String tableName, String partition)", "full_signature": "public List<DataFrameItem> describeTable(String projectName, String tableName, String partition)", "class_method_signature": "ROdps.describeTable(String projectName, String tableName, String partition)", "testcase": false, "constructor": false}, {"identifier": "formatDateTime", "parameters": "(Date date)", "modifiers": "private", "return": "String", "signature": "String formatDateTime(Date date)", "full_signature": "private String formatDateTime(Date date)", "class_method_signature": "ROdps.formatDateTime(Date date)", "testcase": false, "constructor": false}, {"identifier": "createSingleValueFrame", "parameters": "(String name, String type, Object obj)", "modifiers": "private", "return": "DataFrameItem", "signature": "DataFrameItem createSingleValueFrame(String name, String type, Object obj)", "full_signature": "private DataFrameItem createSingleValueFrame(String name, String type, Object obj)", "class_method_signature": "ROdps.createSingleValueFrame(String name, String type, Object obj)", "testcase": false, "constructor": false}, {"identifier": "dropTable", "parameters": "(String projectName, String tableName)", "modifiers": "public", "return": "boolean", "signature": "boolean dropTable(String projectName, String tableName)", "full_signature": "public boolean dropTable(String projectName, String tableName)", "class_method_signature": "ROdps.dropTable(String projectName, String tableName)", "testcase": false, "constructor": false}, {"identifier": "isTableExist", "parameters": "(String projectName, String tableName, String partition)", "modifiers": "public", "return": "boolean", "signature": "boolean isTableExist(String projectName, String tableName, String partition)", "full_signature": "public boolean isTableExist(String projectName, String tableName, String partition)", "class_method_signature": "ROdps.isTableExist(String projectName, String tableName, String partition)", "testcase": false, "constructor": false}, {"identifier": "getTableSchemaJson", "parameters": "(String projectName, String tableName)", "modifiers": "public", "return": "String", "signature": "String getTableSchemaJson(String projectName, String tableName)", "full_signature": "public String getTableSchemaJson(String projectName, String tableName)", "class_method_signature": "ROdps.getTableSchemaJson(String projectName, String tableName)", "testcase": false, "constructor": false}, {"identifier": "getIndexFromColName", "parameters": "(String colName, String tableSchemaJson)", "modifiers": "public", "return": "int", "signature": "int getIndexFromColName(String colName, String tableSchemaJson)", "full_signature": "public int getIndexFromColName(String colName, String tableSchemaJson)", "class_method_signature": "ROdps.getIndexFromColName(String colName, String tableSchemaJson)", "testcase": false, "constructor": false}, {"identifier": "runSqlTask", "parameters": "(String sql)", "modifiers": "public", "return": "List<String>", "signature": "List<String> runSqlTask(String sql)", "full_signature": "public List<String> runSqlTask(String sql)", "class_method_signature": "ROdps.runSqlTask(String sql)", "testcase": false, "constructor": false}, {"identifier": "getTableName", "parameters": "(String projectName, String tableName)", "modifiers": "private", "return": "String", "signature": "String getTableName(String projectName, String tableName)", "full_signature": "private String getTableName(String projectName, String tableName)", "class_method_signature": "ROdps.getTableName(String projectName, String tableName)", "testcase": false, "constructor": false}, {"identifier": "getTables", "parameters": "(String projectName, String pattern)", "modifiers": "public", "return": "List<DataFrameItem>", "signature": "List<DataFrameItem> getTables(String projectName, String pattern)", "full_signature": "public List<DataFrameItem> getTables(String projectName, String pattern)", "class_method_signature": "ROdps.getTables(String projectName, String pattern)", "testcase": false, "constructor": false}, {"identifier": "formatPartition", "parameters": "(String part, String valueDim, String fieldDim)", "modifiers": "public static", "return": "String", "signature": "String formatPartition(String part, String valueDim, String fieldDim)", "full_signature": "public static String formatPartition(String part, String valueDim, String fieldDim)", "class_method_signature": "ROdps.formatPartition(String part, String valueDim, String fieldDim)", "testcase": false, "constructor": false}, {"identifier": "parsePartition", "parameters": "(String part)", "modifiers": "private static", "return": "LinkedHashMap<String, String>", "signature": "LinkedHashMap<String, String> parsePartition(String part)", "full_signature": "private static LinkedHashMap<String, String> parsePartition(String part)", "class_method_signature": "ROdps.parsePartition(String part)", "testcase": false, "constructor": false}, {"identifier": "partitionMap2String", "parameters": "(Map<String, String> sepc, String valueDim,\n      String fieldDim)", "modifiers": "private static", "return": "String", "signature": "String partitionMap2String(Map<String, String> sepc, String valueDim,\n      String fieldDim)", "full_signature": "private static String partitionMap2String(Map<String, String> sepc, String valueDim,\n      String fieldDim)", "class_method_signature": "ROdps.partitionMap2String(Map<String, String> sepc, String valueDim,\n      String fieldDim)", "testcase": false, "constructor": false}, {"identifier": "setLogPath", "parameters": "(String log_path)", "modifiers": "public", "return": "boolean", "signature": "boolean setLogPath(String log_path)", "full_signature": "public boolean setLogPath(String log_path)", "class_method_signature": "ROdps.setLogPath(String log_path)", "testcase": false, "constructor": false}], "file": "java/src/main/java/com/aliyun/odps/rodps/ROdps.java"}, "focal_method": {"identifier": "getTables", "parameters": "(String projectName, String pattern)", "modifiers": "public", "return": "List<DataFrameItem>", "body": "public List<DataFrameItem> getTables(String projectName, String pattern) throws ROdpsException {\n    DataFrameItem<String> owner = new DataFrameItem<String>(\"owner\", \"string\");\n    DataFrameItem<String> tableName = new DataFrameItem<String>(\"table_name\", \"string\");\n    List<DataFrameItem> data = new ArrayList<DataFrameItem>();\n    data.add(owner);\n    data.add(tableName);\n\n    TableFilter filter = new TableFilter();\n    filter.setName(pattern);\n\n    for (Iterator<Table> it = odps.tables().iterator(projectName, filter); it.hasNext();) {\n      Table tb = it.next();\n      owner.getData().add(tb.getOwner());\n      tableName.getData().add(tb.getName());\n    }\n    return data;\n  }", "signature": "List<DataFrameItem> getTables(String projectName, String pattern)", "full_signature": "public List<DataFrameItem> getTables(String projectName, String pattern)", "class_method_signature": "ROdps.getTables(String projectName, String pattern)", "testcase": false, "constructor": false, "invocations": ["add", "add", "setName", "iterator", "tables", "hasNext", "next", "add", "getData", "getOwner", "add", "getData", "getName"]}, "repository": {"repo_id": 58628767, "url": "https://github.com/aliyun/aliyun-odps-r-plugin", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 20, "size": 296, "license": "licensed"}}