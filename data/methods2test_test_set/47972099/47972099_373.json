{"test_class": {"identifier": "HardwareTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-runtime/src/test/java/org/apache/flink/runtime/instance/HardwareTest.java"}, "test_case": {"identifier": "testPhysicalMemory", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testPhysicalMemory() {\n\t\ttry {\n\t\t\tlong physMem = Hardware.getSizeOfPhysicalMemory();\n\t\t\tassertTrue(physMem >= -1);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}", "signature": "void testPhysicalMemory()", "full_signature": "@Test public void testPhysicalMemory()", "class_method_signature": "HardwareTest.testPhysicalMemory()", "testcase": true, "constructor": false, "invocations": ["getSizeOfPhysicalMemory", "assertTrue", "printStackTrace", "fail", "getMessage"]}, "focal_class": {"identifier": "Hardware", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(Hardware.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(Hardware.class)", "var_name": "LOG"}, {"original_string": "private static final String LINUX_MEMORY_INFO_PATH = \"/proc/meminfo\";", "modifier": "private static final", "type": "String", "declarator": "LINUX_MEMORY_INFO_PATH = \"/proc/meminfo\"", "var_name": "LINUX_MEMORY_INFO_PATH"}, {"original_string": "private static final Pattern LINUX_MEMORY_REGEX = Pattern.compile(\"^MemTotal:\\\\s*(\\\\d+)\\\\s+kB$\");", "modifier": "private static final", "type": "Pattern", "declarator": "LINUX_MEMORY_REGEX = Pattern.compile(\"^MemTotal:\\\\s*(\\\\d+)\\\\s+kB$\")", "var_name": "LINUX_MEMORY_REGEX"}], "methods": [{"identifier": "getNumberCPUCores", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int getNumberCPUCores()", "full_signature": "public static int getNumberCPUCores()", "class_method_signature": "Hardware.getNumberCPUCores()", "testcase": false, "constructor": false}, {"identifier": "getSizeOfPhysicalMemory", "parameters": "()", "modifiers": "public static", "return": "long", "signature": "long getSizeOfPhysicalMemory()", "full_signature": "public static long getSizeOfPhysicalMemory()", "class_method_signature": "Hardware.getSizeOfPhysicalMemory()", "testcase": false, "constructor": false}, {"identifier": "getSizeOfPhysicalMemoryForLinux", "parameters": "()", "modifiers": "private static", "return": "long", "signature": "long getSizeOfPhysicalMemoryForLinux()", "full_signature": "private static long getSizeOfPhysicalMemoryForLinux()", "class_method_signature": "Hardware.getSizeOfPhysicalMemoryForLinux()", "testcase": false, "constructor": false}, {"identifier": "getSizeOfPhysicalMemoryForMac", "parameters": "()", "modifiers": "private static", "return": "long", "signature": "long getSizeOfPhysicalMemoryForMac()", "full_signature": "private static long getSizeOfPhysicalMemoryForMac()", "class_method_signature": "Hardware.getSizeOfPhysicalMemoryForMac()", "testcase": false, "constructor": false}, {"identifier": "getSizeOfPhysicalMemoryForFreeBSD", "parameters": "()", "modifiers": "private static", "return": "long", "signature": "long getSizeOfPhysicalMemoryForFreeBSD()", "full_signature": "private static long getSizeOfPhysicalMemoryForFreeBSD()", "class_method_signature": "Hardware.getSizeOfPhysicalMemoryForFreeBSD()", "testcase": false, "constructor": false}, {"identifier": "getSizeOfPhysicalMemoryForWindows", "parameters": "()", "modifiers": "private static", "return": "long", "signature": "long getSizeOfPhysicalMemoryForWindows()", "full_signature": "private static long getSizeOfPhysicalMemoryForWindows()", "class_method_signature": "Hardware.getSizeOfPhysicalMemoryForWindows()", "testcase": false, "constructor": false}, {"identifier": "Hardware", "parameters": "()", "modifiers": "private", "return": "", "signature": " Hardware()", "full_signature": "private  Hardware()", "class_method_signature": "Hardware.Hardware()", "testcase": false, "constructor": true}], "file": "flink-runtime/src/main/java/org/apache/flink/runtime/instance/Hardware.java"}, "focal_method": {"identifier": "getSizeOfPhysicalMemory", "parameters": "()", "modifiers": "public static", "return": "long", "body": "public static long getSizeOfPhysicalMemory() {\n\t\tswitch (OperatingSystem.getCurrentOperatingSystem()) {\n\t\t\tcase LINUX:\n\t\t\t\treturn getSizeOfPhysicalMemoryForLinux();\n\t\t\t\t\n\t\t\tcase WINDOWS:\n\t\t\t\treturn getSizeOfPhysicalMemoryForWindows();\n\t\t\t\t\n\t\t\tcase MAC_OS:\n\t\t\t\treturn getSizeOfPhysicalMemoryForMac();\n\t\t\t\t\n\t\t\tcase FREE_BSD:\n\t\t\t\treturn getSizeOfPhysicalMemoryForFreeBSD();\n\t\t\t\t\n\t\t\tcase UNKNOWN:\n\t\t\t\tLOG.error(\"Cannot determine size of physical memory for unknown operating system\");\n\t\t\t\treturn -1;\n\t\t\t\t\n\t\t\tdefault:\n\t\t\t\tLOG.error(\"Unrecognized OS: \" + OperatingSystem.getCurrentOperatingSystem());\n\t\t\t\treturn -1;\n\t\t}\n\t}", "signature": "long getSizeOfPhysicalMemory()", "full_signature": "public static long getSizeOfPhysicalMemory()", "class_method_signature": "Hardware.getSizeOfPhysicalMemory()", "testcase": false, "constructor": false, "invocations": ["getCurrentOperatingSystem", "getSizeOfPhysicalMemoryForLinux", "getSizeOfPhysicalMemoryForWindows", "getSizeOfPhysicalMemoryForMac", "getSizeOfPhysicalMemoryForFreeBSD", "error", "error", "getCurrentOperatingSystem"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}