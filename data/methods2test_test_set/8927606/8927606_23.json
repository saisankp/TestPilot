{"test_class": {"identifier": "CmisSenderTest", "superclass": "extends SenderBase<CmisSender>", "interfaces": "", "fields": [], "file": "cmis/src/test/java/nl/nn/adapterframework/extensions/cmis/CmisSenderTest.java"}, "test_case": {"identifier": "getterSetterUrl", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void getterSetterUrl() throws ConfigurationException {\n\t\tString dummyString = \"dummyString\";\n\t\tsender.setUrl(dummyString);\n\t}", "signature": "void getterSetterUrl()", "full_signature": "@Test public void getterSetterUrl()", "class_method_signature": "CmisSenderTest.getterSetterUrl()", "testcase": true, "constructor": false, "invocations": ["setUrl"]}, "focal_class": {"identifier": "CmisSender", "superclass": "extends SenderWithParametersBase", "interfaces": "", "fields": [{"original_string": "private String action;", "modifier": "private", "type": "String", "declarator": "action", "var_name": "action"}, {"original_string": "private String authAlias;", "modifier": "private", "type": "String", "declarator": "authAlias", "var_name": "authAlias"}, {"original_string": "private String userName;", "modifier": "private", "type": "String", "declarator": "userName", "var_name": "userName"}, {"original_string": "private String password;", "modifier": "private", "type": "String", "declarator": "password", "var_name": "password"}, {"original_string": "private String fileNameSessionKey;", "modifier": "private", "type": "String", "declarator": "fileNameSessionKey", "var_name": "fileNameSessionKey"}, {"original_string": "private String fileInputStreamSessionKey;", "modifier": "private", "type": "String", "declarator": "fileInputStreamSessionKey", "var_name": "fileInputStreamSessionKey"}, {"original_string": "private String fileContentStreamSessionKey;", "modifier": "private", "type": "String", "declarator": "fileContentStreamSessionKey", "var_name": "fileContentStreamSessionKey"}, {"original_string": "private String defaultMediaType = \"application/octet-stream\";", "modifier": "private", "type": "String", "declarator": "defaultMediaType = \"application/octet-stream\"", "var_name": "defaultMediaType"}, {"original_string": "private boolean streamResultToServlet = false;", "modifier": "private", "type": "boolean", "declarator": "streamResultToServlet = false", "var_name": "streamResultToServlet"}, {"original_string": "private boolean getProperties = false;", "modifier": "private", "type": "boolean", "declarator": "getProperties = false", "var_name": "getProperties"}, {"original_string": "private boolean getDocumentContent = true;", "modifier": "private", "type": "boolean", "declarator": "getDocumentContent = true", "var_name": "getDocumentContent"}, {"original_string": "private boolean useRootFolder = true;", "modifier": "private", "type": "boolean", "declarator": "useRootFolder = true", "var_name": "useRootFolder"}, {"original_string": "private String resultOnNotFound;", "modifier": "private", "type": "String", "declarator": "resultOnNotFound", "var_name": "resultOnNotFound"}, {"original_string": "private boolean runtimeSession = false;", "modifier": "private", "type": "boolean", "declarator": "runtimeSession = false", "var_name": "runtimeSession"}, {"original_string": "private boolean keepSession = true;", "modifier": "private", "type": "boolean", "declarator": "keepSession = true", "var_name": "keepSession"}, {"original_string": "private Session cmisSession;", "modifier": "private", "type": "Session", "declarator": "cmisSession", "var_name": "cmisSession"}, {"original_string": "private List<String> actions = Arrays.asList(\"create\", \"delete\", \"get\", \"find\", \"update\", \"fetch\", \"dynamic\");", "modifier": "private", "type": "List<String>", "declarator": "actions = Arrays.asList(\"create\", \"delete\", \"get\", \"find\", \"update\", \"fetch\", \"dynamic\")", "var_name": "actions"}, {"original_string": "private CmisSessionBuilder sessionBuilder = new CmisSessionBuilder(getConfigurationClassLoader());", "modifier": "private", "type": "CmisSessionBuilder", "declarator": "sessionBuilder = new CmisSessionBuilder(getConfigurationClassLoader())", "var_name": "sessionBuilder"}, {"original_string": "private boolean convert2Base64 = AppConstants.getInstance().getBoolean(\"CmisSender.Base64FileContent\", true);", "modifier": "private", "type": "boolean", "declarator": "convert2Base64 = AppConstants.getInstance().getBoolean(\"CmisSender.Base64FileContent\", true)", "var_name": "convert2Base64"}], "methods": [{"identifier": "configure", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void configure()", "full_signature": "@Override public void configure()", "class_method_signature": "CmisSender.configure()", "testcase": false, "constructor": false}, {"identifier": "createCmisSession", "parameters": "(ParameterValueList pvl)", "modifiers": "public", "return": "Session", "signature": "Session createCmisSession(ParameterValueList pvl)", "full_signature": "public Session createCmisSession(ParameterValueList pvl)", "class_method_signature": "CmisSender.createCmisSession(ParameterValueList pvl)", "testcase": false, "constructor": false}, {"identifier": "getSessionBuilder", "parameters": "()", "modifiers": "public", "return": "CmisSessionBuilder", "signature": "CmisSessionBuilder getSessionBuilder()", "full_signature": "public CmisSessionBuilder getSessionBuilder()", "class_method_signature": "CmisSender.getSessionBuilder()", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void open()", "full_signature": "@Override public void open()", "class_method_signature": "CmisSender.open()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "CmisSender.close()", "testcase": false, "constructor": false}, {"identifier": "sendMessage", "parameters": "(Message message, IPipeLineSession session)", "modifiers": "@Override public", "return": "Message", "signature": "Message sendMessage(Message message, IPipeLineSession session)", "full_signature": "@Override public Message sendMessage(Message message, IPipeLineSession session)", "class_method_signature": "CmisSender.sendMessage(Message message, IPipeLineSession session)", "testcase": false, "constructor": false}, {"identifier": "sendMessageForActionGet", "parameters": "(String message, IPipeLineSession session, ParameterValueList pvl)", "modifiers": "private", "return": "String", "signature": "String sendMessageForActionGet(String message, IPipeLineSession session, ParameterValueList pvl)", "full_signature": "private String sendMessageForActionGet(String message, IPipeLineSession session, ParameterValueList pvl)", "class_method_signature": "CmisSender.sendMessageForActionGet(String message, IPipeLineSession session, ParameterValueList pvl)", "testcase": false, "constructor": false}, {"identifier": "sendMessageForActionCreate", "parameters": "(String message, IPipeLineSession session)", "modifiers": "private", "return": "String", "signature": "String sendMessageForActionCreate(String message, IPipeLineSession session)", "full_signature": "private String sendMessageForActionCreate(String message, IPipeLineSession session)", "class_method_signature": "CmisSender.sendMessageForActionCreate(String message, IPipeLineSession session)", "testcase": false, "constructor": false}, {"identifier": "processProperties", "parameters": "(Element propertiesElement, Map<String, Object> props)", "modifiers": "private", "return": "void", "signature": "void processProperties(Element propertiesElement, Map<String, Object> props)", "full_signature": "private void processProperties(Element propertiesElement, Map<String, Object> props)", "class_method_signature": "CmisSender.processProperties(Element propertiesElement, Map<String, Object> props)", "testcase": false, "constructor": false}, {"identifier": "sendMessageForActionDelete", "parameters": "(String message, IPipeLineSession session)", "modifiers": "private", "return": "String", "signature": "String sendMessageForActionDelete(String message, IPipeLineSession session)", "full_signature": "private String sendMessageForActionDelete(String message, IPipeLineSession session)", "class_method_signature": "CmisSender.sendMessageForActionDelete(String message, IPipeLineSession session)", "testcase": false, "constructor": false}, {"identifier": "sendMessageForActionFind", "parameters": "(String message)", "modifiers": "private", "return": "String", "signature": "String sendMessageForActionFind(String message)", "full_signature": "private String sendMessageForActionFind(String message)", "class_method_signature": "CmisSender.sendMessageForActionFind(String message)", "testcase": false, "constructor": false}, {"identifier": "getCmisObject", "parameters": "(String message)", "modifiers": "private", "return": "CmisObject", "signature": "CmisObject getCmisObject(String message)", "full_signature": "private CmisObject getCmisObject(String message)", "class_method_signature": "CmisSender.getCmisObject(String message)", "testcase": false, "constructor": false}, {"identifier": "getCmisObject", "parameters": "(Element queryElement)", "modifiers": "private", "return": "CmisObject", "signature": "CmisObject getCmisObject(Element queryElement)", "full_signature": "private CmisObject getCmisObject(Element queryElement)", "class_method_signature": "CmisSender.getCmisObject(Element queryElement)", "testcase": false, "constructor": false}, {"identifier": "sendMessageForDynamicActions", "parameters": "(String message, IPipeLineSession session)", "modifiers": "private", "return": "String", "signature": "String sendMessageForDynamicActions(String message, IPipeLineSession session)", "full_signature": "private String sendMessageForDynamicActions(String message, IPipeLineSession session)", "class_method_signature": "CmisSender.sendMessageForDynamicActions(String message, IPipeLineSession session)", "testcase": false, "constructor": false}, {"identifier": "sendMessageForActionUpdate", "parameters": "(String message)", "modifiers": "private", "return": "String", "signature": "String sendMessageForActionUpdate(String message)", "full_signature": "private String sendMessageForActionUpdate(String message)", "class_method_signature": "CmisSender.sendMessageForActionUpdate(String message)", "testcase": false, "constructor": false}, {"identifier": "setOverrideEntryPointWSDL", "parameters": "(String overrideEntryPointWSDL)", "modifiers": "@IbisDoc({\"override entrypoint wsdl by reading it from the classpath, overrides url attribute\", \"\"}) public", "return": "void", "signature": "void setOverrideEntryPointWSDL(String overrideEntryPointWSDL)", "full_signature": "@IbisDoc({\"override entrypoint wsdl by reading it from the classpath, overrides url attribute\", \"\"}) public void setOverrideEntryPointWSDL(String overrideEntryPointWSDL)", "class_method_signature": "CmisSender.setOverrideEntryPointWSDL(String overrideEntryPointWSDL)", "testcase": false, "constructor": false}, {"identifier": "setAllowSelfSignedCertificates", "parameters": "(boolean allowSelfSignedCertificates)", "modifiers": "@IbisDoc({\"Accept self signed certificates\", \"false\"}) public", "return": "void", "signature": "void setAllowSelfSignedCertificates(boolean allowSelfSignedCertificates)", "full_signature": "@IbisDoc({\"Accept self signed certificates\", \"false\"}) public void setAllowSelfSignedCertificates(boolean allowSelfSignedCertificates)", "class_method_signature": "CmisSender.setAllowSelfSignedCertificates(boolean allowSelfSignedCertificates)", "testcase": false, "constructor": false}, {"identifier": "setVerifyHostname", "parameters": "(boolean verifyHostname)", "modifiers": "@IbisDoc({\"Ignore certificate hostname validation\", \"true\"}) public", "return": "void", "signature": "void setVerifyHostname(boolean verifyHostname)", "full_signature": "@IbisDoc({\"Ignore certificate hostname validation\", \"true\"}) public void setVerifyHostname(boolean verifyHostname)", "class_method_signature": "CmisSender.setVerifyHostname(boolean verifyHostname)", "testcase": false, "constructor": false}, {"identifier": "setIgnoreCertificateExpiredException", "parameters": "(boolean ignoreCertificateExpiredException)", "modifiers": "@IbisDoc({\"Ignore expired certificate exceptions\", \"false\"}) public", "return": "void", "signature": "void setIgnoreCertificateExpiredException(boolean ignoreCertificateExpiredException)", "full_signature": "@IbisDoc({\"Ignore expired certificate exceptions\", \"false\"}) public void setIgnoreCertificateExpiredException(boolean ignoreCertificateExpiredException)", "class_method_signature": "CmisSender.setIgnoreCertificateExpiredException(boolean ignoreCertificateExpiredException)", "testcase": false, "constructor": false}, {"identifier": "setCertificateUrl", "parameters": "(String certificate)", "modifiers": "@IbisDoc({\"Path (or resource url) to certificate to be used for authentication\", \"\"}) public", "return": "void", "signature": "void setCertificateUrl(String certificate)", "full_signature": "@IbisDoc({\"Path (or resource url) to certificate to be used for authentication\", \"\"}) public void setCertificateUrl(String certificate)", "class_method_signature": "CmisSender.setCertificateUrl(String certificate)", "testcase": false, "constructor": false}, {"identifier": "setCertificateAuthAlias", "parameters": "(String certificateAuthAlias)", "modifiers": "@IbisDoc({\"Auth Alias used to obtain certificate password\", \"\"}) public", "return": "void", "signature": "void setCertificateAuthAlias(String certificateAuthAlias)", "full_signature": "@IbisDoc({\"Auth Alias used to obtain certificate password\", \"\"}) public void setCertificateAuthAlias(String certificateAuthAlias)", "class_method_signature": "CmisSender.setCertificateAuthAlias(String certificateAuthAlias)", "testcase": false, "constructor": false}, {"identifier": "setCertificatePassword", "parameters": "(String certificatePassword)", "modifiers": "@IbisDoc({\"Certificate Password\", \"\"}) public", "return": "void", "signature": "void setCertificatePassword(String certificatePassword)", "full_signature": "@IbisDoc({\"Certificate Password\", \"\"}) public void setCertificatePassword(String certificatePassword)", "class_method_signature": "CmisSender.setCertificatePassword(String certificatePassword)", "testcase": false, "constructor": false}, {"identifier": "setTruststore", "parameters": "(String truststore)", "modifiers": "@IbisDoc({\"Path (or resource url) to truststore to be used for authentication\", \"\"}) public", "return": "void", "signature": "void setTruststore(String truststore)", "full_signature": "@IbisDoc({\"Path (or resource url) to truststore to be used for authentication\", \"\"}) public void setTruststore(String truststore)", "class_method_signature": "CmisSender.setTruststore(String truststore)", "testcase": false, "constructor": false}, {"identifier": "setTruststoreAuthAlias", "parameters": "(String truststoreAuthAlias)", "modifiers": "@IbisDoc({\"Alias used to obtain truststore password\", \"\"}) public", "return": "void", "signature": "void setTruststoreAuthAlias(String truststoreAuthAlias)", "full_signature": "@IbisDoc({\"Alias used to obtain truststore password\", \"\"}) public void setTruststoreAuthAlias(String truststoreAuthAlias)", "class_method_signature": "CmisSender.setTruststoreAuthAlias(String truststoreAuthAlias)", "testcase": false, "constructor": false}, {"identifier": "setTruststorePassword", "parameters": "(String truststorePassword)", "modifiers": "@IbisDoc({\"Truststore Password\", \"\"}) public", "return": "void", "signature": "void setTruststorePassword(String truststorePassword)", "full_signature": "@IbisDoc({\"Truststore Password\", \"\"}) public void setTruststorePassword(String truststorePassword)", "class_method_signature": "CmisSender.setTruststorePassword(String truststorePassword)", "testcase": false, "constructor": false}, {"identifier": "setKeystoreType", "parameters": "(String keystoreType)", "modifiers": "@IbisDoc({\"Keystore Type\", \"pkcs12\"}) public", "return": "void", "signature": "void setKeystoreType(String keystoreType)", "full_signature": "@IbisDoc({\"Keystore Type\", \"pkcs12\"}) public void setKeystoreType(String keystoreType)", "class_method_signature": "CmisSender.setKeystoreType(String keystoreType)", "testcase": false, "constructor": false}, {"identifier": "setKeyManagerAlgorithm", "parameters": "(String keyManagerAlgorithm)", "modifiers": "@IbisDoc({\"KeyManager Algorithm\", \"pkix\"}) public", "return": "void", "signature": "void setKeyManagerAlgorithm(String keyManagerAlgorithm)", "full_signature": "@IbisDoc({\"KeyManager Algorithm\", \"pkix\"}) public void setKeyManagerAlgorithm(String keyManagerAlgorithm)", "class_method_signature": "CmisSender.setKeyManagerAlgorithm(String keyManagerAlgorithm)", "testcase": false, "constructor": false}, {"identifier": "setTruststoreType", "parameters": "(String truststoreType)", "modifiers": "@IbisDoc({\"Truststore Type\", \"jks\"}) public", "return": "void", "signature": "void setTruststoreType(String truststoreType)", "full_signature": "@IbisDoc({\"Truststore Type\", \"jks\"}) public void setTruststoreType(String truststoreType)", "class_method_signature": "CmisSender.setTruststoreType(String truststoreType)", "testcase": false, "constructor": false}, {"identifier": "setTrustManagerAlgorithm", "parameters": "(String getTrustManagerAlgorithm)", "modifiers": "@IbisDoc({\"TrustManager Algorithm\", \"pkix\"}) public", "return": "void", "signature": "void setTrustManagerAlgorithm(String getTrustManagerAlgorithm)", "full_signature": "@IbisDoc({\"TrustManager Algorithm\", \"pkix\"}) public void setTrustManagerAlgorithm(String getTrustManagerAlgorithm)", "class_method_signature": "CmisSender.setTrustManagerAlgorithm(String getTrustManagerAlgorithm)", "testcase": false, "constructor": false}, {"identifier": "setProxyHost", "parameters": "(String proxyHost)", "modifiers": "@IbisDoc({\"Proxy host url\", \"\"}) public", "return": "void", "signature": "void setProxyHost(String proxyHost)", "full_signature": "@IbisDoc({\"Proxy host url\", \"\"}) public void setProxyHost(String proxyHost)", "class_method_signature": "CmisSender.setProxyHost(String proxyHost)", "testcase": false, "constructor": false}, {"identifier": "setProxyPort", "parameters": "(int proxyPort)", "modifiers": "@IbisDoc({\"Proxy host port\", \"80\"}) public", "return": "void", "signature": "void setProxyPort(int proxyPort)", "full_signature": "@IbisDoc({\"Proxy host port\", \"80\"}) public void setProxyPort(int proxyPort)", "class_method_signature": "CmisSender.setProxyPort(int proxyPort)", "testcase": false, "constructor": false}, {"identifier": "setProxyAuthAlias", "parameters": "(String proxyAuthAlias)", "modifiers": "@IbisDoc({\"Alias used to obtain credentials for authentication to proxy\", \"\"}) public", "return": "void", "signature": "void setProxyAuthAlias(String proxyAuthAlias)", "full_signature": "@IbisDoc({\"Alias used to obtain credentials for authentication to proxy\", \"\"}) public void setProxyAuthAlias(String proxyAuthAlias)", "class_method_signature": "CmisSender.setProxyAuthAlias(String proxyAuthAlias)", "testcase": false, "constructor": false}, {"identifier": "setProxyUserName", "parameters": "(String proxyUserName)", "modifiers": "@IbisDoc({\"Proxy Username\", \"\"}) public", "return": "void", "signature": "void setProxyUserName(String proxyUserName)", "full_signature": "@IbisDoc({\"Proxy Username\", \"\"}) public void setProxyUserName(String proxyUserName)", "class_method_signature": "CmisSender.setProxyUserName(String proxyUserName)", "testcase": false, "constructor": false}, {"identifier": "setProxyPassword", "parameters": "(String proxyPassword)", "modifiers": "@IbisDoc({\"Proxy Password\", \"\"}) public", "return": "void", "signature": "void setProxyPassword(String proxyPassword)", "full_signature": "@IbisDoc({\"Proxy Password\", \"\"}) public void setProxyPassword(String proxyPassword)", "class_method_signature": "CmisSender.setProxyPassword(String proxyPassword)", "testcase": false, "constructor": false}, {"identifier": "setAction", "parameters": "(String string)", "modifiers": "@IbisDoc({\"specifies action to perform. Must be one of \\n\" + \" * <ul>\\n\" + \" * <li><code>get</code>: get the content of a document (and optional the properties)</li>\\n\" + \" * <li><code>create</code>: create a document</li>\\n\" + \" * <li><code>find</code>: perform a query that returns properties</li>\\n\" + \" * <li><code>update</code>: update the properties of an existing document</li>\\n\" + \" * <li><code>fetch</code>: get the (meta)data of a folder or document</li>\\n\" + \" * </ul>\", \"\"}) public", "return": "void", "signature": "void setAction(String string)", "full_signature": "@IbisDoc({\"specifies action to perform. Must be one of \\n\" + \" * <ul>\\n\" + \" * <li><code>get</code>: get the content of a document (and optional the properties)</li>\\n\" + \" * <li><code>create</code>: create a document</li>\\n\" + \" * <li><code>find</code>: perform a query that returns properties</li>\\n\" + \" * <li><code>update</code>: update the properties of an existing document</li>\\n\" + \" * <li><code>fetch</code>: get the (meta)data of a folder or document</li>\\n\" + \" * </ul>\", \"\"}) public void setAction(String string)", "class_method_signature": "CmisSender.setAction(String string)", "testcase": false, "constructor": false}, {"identifier": "getAction", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAction()", "full_signature": "public String getAction()", "class_method_signature": "CmisSender.getAction()", "testcase": false, "constructor": false}, {"identifier": "setMaxConnections", "parameters": "(int i)", "modifiers": "@IbisDoc({\"the maximum number of concurrent connections\", \"10\"}) public", "return": "void", "signature": "void setMaxConnections(int i)", "full_signature": "@IbisDoc({\"the maximum number of concurrent connections\", \"10\"}) public void setMaxConnections(int i)", "class_method_signature": "CmisSender.setMaxConnections(int i)", "testcase": false, "constructor": false}, {"identifier": "setTimeout", "parameters": "(int i)", "modifiers": "@IbisDoc({\"the connection timeout in seconds\", \"10\"}) public", "return": "void", "signature": "void setTimeout(int i)", "full_signature": "@IbisDoc({\"the connection timeout in seconds\", \"10\"}) public void setTimeout(int i)", "class_method_signature": "CmisSender.setTimeout(int i)", "testcase": false, "constructor": false}, {"identifier": "setUrl", "parameters": "(String url)", "modifiers": "@IbisDoc({\"url to connect to\", \"\"}) public", "return": "void", "signature": "void setUrl(String url)", "full_signature": "@IbisDoc({\"url to connect to\", \"\"}) public void setUrl(String url)", "class_method_signature": "CmisSender.setUrl(String url)", "testcase": false, "constructor": false}, {"identifier": "setRepository", "parameters": "(String repository)", "modifiers": "@IbisDoc({\"repository id\", \"\"}) public", "return": "void", "signature": "void setRepository(String repository)", "full_signature": "@IbisDoc({\"repository id\", \"\"}) public void setRepository(String repository)", "class_method_signature": "CmisSender.setRepository(String repository)", "testcase": false, "constructor": false}, {"identifier": "setAuthAlias", "parameters": "(String authAlias)", "modifiers": "@IbisDoc({\"alias used to obtain credentials for authentication to host\", \"\"}) public", "return": "void", "signature": "void setAuthAlias(String authAlias)", "full_signature": "@IbisDoc({\"alias used to obtain credentials for authentication to host\", \"\"}) public void setAuthAlias(String authAlias)", "class_method_signature": "CmisSender.setAuthAlias(String authAlias)", "testcase": false, "constructor": false}, {"identifier": "getAuthAlias", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAuthAlias()", "full_signature": "public String getAuthAlias()", "class_method_signature": "CmisSender.getAuthAlias()", "testcase": false, "constructor": false}, {"identifier": "setUsername", "parameters": "(String userName)", "modifiers": "@IbisDoc({\"username used in authentication to host\", \"\"}) public", "return": "void", "signature": "void setUsername(String userName)", "full_signature": "@IbisDoc({\"username used in authentication to host\", \"\"}) public void setUsername(String userName)", "class_method_signature": "CmisSender.setUsername(String userName)", "testcase": false, "constructor": false}, {"identifier": "setUserName", "parameters": "(String userName)", "modifiers": "public", "return": "void", "signature": "void setUserName(String userName)", "full_signature": "public void setUserName(String userName)", "class_method_signature": "CmisSender.setUserName(String userName)", "testcase": false, "constructor": false}, {"identifier": "getUserName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUserName()", "full_signature": "public String getUserName()", "class_method_signature": "CmisSender.getUserName()", "testcase": false, "constructor": false}, {"identifier": "setPassword", "parameters": "(String password)", "modifiers": "@IbisDoc({\"\", \"\"}) public", "return": "void", "signature": "void setPassword(String password)", "full_signature": "@IbisDoc({\"\", \"\"}) public void setPassword(String password)", "class_method_signature": "CmisSender.setPassword(String password)", "testcase": false, "constructor": false}, {"identifier": "getPassword", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPassword()", "full_signature": "public String getPassword()", "class_method_signature": "CmisSender.getPassword()", "testcase": false, "constructor": false}, {"identifier": "setBindingType", "parameters": "(String bindingType)", "modifiers": "@IbisDoc({\"'atompub', 'webservices' or 'browser'\", \"'atompub'\"}) public", "return": "void", "signature": "void setBindingType(String bindingType)", "full_signature": "@IbisDoc({\"'atompub', 'webservices' or 'browser'\", \"'atompub'\"}) public void setBindingType(String bindingType)", "class_method_signature": "CmisSender.setBindingType(String bindingType)", "testcase": false, "constructor": false}, {"identifier": "getFileNameSessionKey", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFileNameSessionKey()", "full_signature": "public String getFileNameSessionKey()", "class_method_signature": "CmisSender.getFileNameSessionKey()", "testcase": false, "constructor": false}, {"identifier": "setFileNameSessionKey", "parameters": "(String string)", "modifiers": "@IbisDoc({\"(only used when <code>action=create</code>) the session key that contains the name of the file to use. if not set, the value of the property <code>filename</code> from the input message is used\", \"\"}) public", "return": "void", "signature": "void setFileNameSessionKey(String string)", "full_signature": "@IbisDoc({\"(only used when <code>action=create</code>) the session key that contains the name of the file to use. if not set, the value of the property <code>filename</code> from the input message is used\", \"\"}) public void setFileNameSessionKey(String string)", "class_method_signature": "CmisSender.setFileNameSessionKey(String string)", "testcase": false, "constructor": false}, {"identifier": "setFileInputStreamSessionKey", "parameters": "(String string)", "modifiers": "@IbisDoc({\"when <code>action=create</code>: the session key that contains the input stream of the file to use. when <code>action=get</code> and <code>getproperties=true</code>: the session key in which the input stream of the document is stored\", \"\"}) public", "return": "void", "signature": "void setFileInputStreamSessionKey(String string)", "full_signature": "@IbisDoc({\"when <code>action=create</code>: the session key that contains the input stream of the file to use. when <code>action=get</code> and <code>getproperties=true</code>: the session key in which the input stream of the document is stored\", \"\"}) public void setFileInputStreamSessionKey(String string)", "class_method_signature": "CmisSender.setFileInputStreamSessionKey(String string)", "testcase": false, "constructor": false}, {"identifier": "getFileInputStreamSessionKey", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFileInputStreamSessionKey()", "full_signature": "public String getFileInputStreamSessionKey()", "class_method_signature": "CmisSender.getFileInputStreamSessionKey()", "testcase": false, "constructor": false}, {"identifier": "setFileContentSessionKey", "parameters": "(String string)", "modifiers": "@IbisDoc({\"when <code>action=create</code>: the session key that contains the base64 encoded content of the file to use. when <code>action=get</code> and <code>getproperties=true</code>: the session key in which the base64 encoded content of the document is stored\", \"\"}) public", "return": "void", "signature": "void setFileContentSessionKey(String string)", "full_signature": "@IbisDoc({\"when <code>action=create</code>: the session key that contains the base64 encoded content of the file to use. when <code>action=get</code> and <code>getproperties=true</code>: the session key in which the base64 encoded content of the document is stored\", \"\"}) public void setFileContentSessionKey(String string)", "class_method_signature": "CmisSender.setFileContentSessionKey(String string)", "testcase": false, "constructor": false}, {"identifier": "getFileContentSessionKey", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFileContentSessionKey()", "full_signature": "public String getFileContentSessionKey()", "class_method_signature": "CmisSender.getFileContentSessionKey()", "testcase": false, "constructor": false}, {"identifier": "setDefaultMediaType", "parameters": "(String string)", "modifiers": "@IbisDoc({\"(only used when <code>action=create</code>) the mime type used to store the document when it's not set in the input message by a property\", \"'application/octet-stream'\"}) public", "return": "void", "signature": "void setDefaultMediaType(String string)", "full_signature": "@IbisDoc({\"(only used when <code>action=create</code>) the mime type used to store the document when it's not set in the input message by a property\", \"'application/octet-stream'\"}) public void setDefaultMediaType(String string)", "class_method_signature": "CmisSender.setDefaultMediaType(String string)", "testcase": false, "constructor": false}, {"identifier": "getDefaultMediaType", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDefaultMediaType()", "full_signature": "public String getDefaultMediaType()", "class_method_signature": "CmisSender.getDefaultMediaType()", "testcase": false, "constructor": false}, {"identifier": "setStreamResultToServlet", "parameters": "(boolean b)", "modifiers": "@IbisDoc({\"(only used when <code>action=get</code>) if true, the content of the document is streamed to the httpservletresponse object of the restservicedispatcher (instead of passed as a string)\", \"false\"}) public", "return": "void", "signature": "void setStreamResultToServlet(boolean b)", "full_signature": "@IbisDoc({\"(only used when <code>action=get</code>) if true, the content of the document is streamed to the httpservletresponse object of the restservicedispatcher (instead of passed as a string)\", \"false\"}) public void setStreamResultToServlet(boolean b)", "class_method_signature": "CmisSender.setStreamResultToServlet(boolean b)", "testcase": false, "constructor": false}, {"identifier": "isStreamResultToServlet", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isStreamResultToServlet()", "full_signature": "public boolean isStreamResultToServlet()", "class_method_signature": "CmisSender.isStreamResultToServlet()", "testcase": false, "constructor": false}, {"identifier": "setGetProperties", "parameters": "(boolean b)", "modifiers": "@IbisDoc({\"(only used when <code>action=get</code>) if true, the content of the document is streamed to <code>fileinputstreamsessionkey</code> and all document properties are put in the result as a xml string\", \"false\"}) public", "return": "void", "signature": "void setGetProperties(boolean b)", "full_signature": "@IbisDoc({\"(only used when <code>action=get</code>) if true, the content of the document is streamed to <code>fileinputstreamsessionkey</code> and all document properties are put in the result as a xml string\", \"false\"}) public void setGetProperties(boolean b)", "class_method_signature": "CmisSender.setGetProperties(boolean b)", "testcase": false, "constructor": false}, {"identifier": "isGetProperties", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isGetProperties()", "full_signature": "public boolean isGetProperties()", "class_method_signature": "CmisSender.isGetProperties()", "testcase": false, "constructor": false}, {"identifier": "isGetDocumentContent", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isGetDocumentContent()", "full_signature": "public boolean isGetDocumentContent()", "class_method_signature": "CmisSender.isGetDocumentContent()", "testcase": false, "constructor": false}, {"identifier": "setGetDocumentContent", "parameters": "(boolean getDocumentContent)", "modifiers": "@IbisDoc({\"(only used when <code>action=get</code>) if true, the attachment for the document is streamed to <code>fileInputStreamSessionKey</code> otherwise only the properties are returned\", \"true\"}) public", "return": "void", "signature": "void setGetDocumentContent(boolean getDocumentContent)", "full_signature": "@IbisDoc({\"(only used when <code>action=get</code>) if true, the attachment for the document is streamed to <code>fileInputStreamSessionKey</code> otherwise only the properties are returned\", \"true\"}) public void setGetDocumentContent(boolean getDocumentContent)", "class_method_signature": "CmisSender.setGetDocumentContent(boolean getDocumentContent)", "testcase": false, "constructor": false}, {"identifier": "setUseRootFolder", "parameters": "(boolean b)", "modifiers": "@IbisDoc({\"(only used when <code>action=create</code>) if true, the document is created in the root folder of the repository. otherwise the document is created in the repository\", \"true\"}) public", "return": "void", "signature": "void setUseRootFolder(boolean b)", "full_signature": "@IbisDoc({\"(only used when <code>action=create</code>) if true, the document is created in the root folder of the repository. otherwise the document is created in the repository\", \"true\"}) public void setUseRootFolder(boolean b)", "class_method_signature": "CmisSender.setUseRootFolder(boolean b)", "testcase": false, "constructor": false}, {"identifier": "isUseRootFolder", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isUseRootFolder()", "full_signature": "public boolean isUseRootFolder()", "class_method_signature": "CmisSender.isUseRootFolder()", "testcase": false, "constructor": false}, {"identifier": "setResultOnNotFound", "parameters": "(String string)", "modifiers": "@IbisDoc({\"(only used when <code>action=get</code>) result returned when no document was found for the given id (e.g. '[not_found]'). if empty an exception is thrown\", \"\"}) public", "return": "void", "signature": "void setResultOnNotFound(String string)", "full_signature": "@IbisDoc({\"(only used when <code>action=get</code>) result returned when no document was found for the given id (e.g. '[not_found]'). if empty an exception is thrown\", \"\"}) public void setResultOnNotFound(String string)", "class_method_signature": "CmisSender.setResultOnNotFound(String string)", "testcase": false, "constructor": false}, {"identifier": "getResultOnNotFound", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getResultOnNotFound()", "full_signature": "public String getResultOnNotFound()", "class_method_signature": "CmisSender.getResultOnNotFound()", "testcase": false, "constructor": false}, {"identifier": "setKeepSession", "parameters": "(boolean keepSession)", "modifiers": "@IbisDoc({\"if true, the session is not closed at the end and it will be used in the next call\", \"true\"}) public", "return": "void", "signature": "void setKeepSession(boolean keepSession)", "full_signature": "@IbisDoc({\"if true, the session is not closed at the end and it will be used in the next call\", \"true\"}) public void setKeepSession(boolean keepSession)", "class_method_signature": "CmisSender.setKeepSession(boolean keepSession)", "testcase": false, "constructor": false}, {"identifier": "isKeepSession", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isKeepSession()", "full_signature": "public boolean isKeepSession()", "class_method_signature": "CmisSender.isKeepSession()", "testcase": false, "constructor": false}], "file": "cmis/src/main/java/nl/nn/adapterframework/extensions/cmis/CmisSender.java"}, "focal_method": {"identifier": "setUrl", "parameters": "(String url)", "modifiers": "@IbisDoc({\"url to connect to\", \"\"}) public", "return": "void", "body": "@IbisDoc({\"url to connect to\", \"\"})\n\tpublic void setUrl(String url) throws ConfigurationException {\n\t\tsessionBuilder.setUrl(url);\n\t}", "signature": "void setUrl(String url)", "full_signature": "@IbisDoc({\"url to connect to\", \"\"}) public void setUrl(String url)", "class_method_signature": "CmisSender.setUrl(String url)", "testcase": false, "constructor": false, "invocations": ["setUrl"]}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}