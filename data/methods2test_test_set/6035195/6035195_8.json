{"test_class": {"identifier": "TemplatesCommandTest", "superclass": "extends CommandTestSupport", "interfaces": "", "fields": [{"original_string": "final Set<Template> templates = Sets.newHashSet(Template.builder()\n        .id(\"template-1\")\n        .name(\"template-one\")\n        .build());", "modifier": "final", "type": "Set<Template>", "declarator": "templates = Sets.newHashSet(Template.builder()\n        .id(\"template-1\")\n        .name(\"template-one\")\n        .build())", "var_name": "templates"}], "file": "providers/cloudstack/src/test/java/com/axemblr/provisionr/cloudstack/commands/TemplatesCommandTest.java"}, "test_case": {"identifier": "testTemplatesCommandPrintsTheTemplates", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTemplatesCommandPrintsTheTemplates() throws Exception {\n        final TemplatesCommand templatesCommand = new TemplatesCommand(defaultProviderConfig);\n        final TemplateClient templateClient = mock(TemplateClient.class);\n\n        when(client.getTemplateClient()).thenReturn(templateClient);\n        when(templateClient.listTemplates()).thenReturn(templates);\n\n        templatesCommand.doExecuteWithContext(client, out);\n        out.close();\n        assertThat(byteArrayOutputStream.toString()).contains(\"template-1\").contains(\"template-one\");\n    }", "signature": "void testTemplatesCommandPrintsTheTemplates()", "full_signature": "@Test public void testTemplatesCommandPrintsTheTemplates()", "class_method_signature": "TemplatesCommandTest.testTemplatesCommandPrintsTheTemplates()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getTemplateClient", "thenReturn", "when", "listTemplates", "doExecuteWithContext", "close", "contains", "contains", "assertThat", "toString"]}, "focal_class": {"identifier": "TemplatesCommand", "superclass": "extends CommandSupport", "interfaces": "", "fields": [{"original_string": "public static final String NAME = \"templates\";", "modifier": "public static final", "type": "String", "declarator": "NAME = \"templates\"", "var_name": "NAME"}], "methods": [{"identifier": "TemplatesCommand", "parameters": "(DefaultProviderConfig providerConfig)", "modifiers": "public", "return": "", "signature": " TemplatesCommand(DefaultProviderConfig providerConfig)", "full_signature": "public  TemplatesCommand(DefaultProviderConfig providerConfig)", "class_method_signature": "TemplatesCommand.TemplatesCommand(DefaultProviderConfig providerConfig)", "testcase": false, "constructor": true}, {"identifier": "doExecuteWithContext", "parameters": "(CloudStackClient client, PrintStream out)", "modifiers": "@Override public", "return": "Object", "signature": "Object doExecuteWithContext(CloudStackClient client, PrintStream out)", "full_signature": "@Override public Object doExecuteWithContext(CloudStackClient client, PrintStream out)", "class_method_signature": "TemplatesCommand.doExecuteWithContext(CloudStackClient client, PrintStream out)", "testcase": false, "constructor": false}], "file": "providers/cloudstack/src/main/java/com/axemblr/provisionr/cloudstack/commands/TemplatesCommand.java"}, "focal_method": {"identifier": "doExecuteWithContext", "parameters": "(CloudStackClient client, PrintStream out)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object doExecuteWithContext(CloudStackClient client, PrintStream out) throws Exception {\n        out.printf(\"CloudStack templates for provider %s\\n\", getProvider().getId());\n\n        for (Template template : client.getTemplateClient().listTemplates()) {\n            out.printf(\"---\\n%s\\n\", template.toString());\n        }\n        out.println();\n        return null;\n    }", "signature": "Object doExecuteWithContext(CloudStackClient client, PrintStream out)", "full_signature": "@Override public Object doExecuteWithContext(CloudStackClient client, PrintStream out)", "class_method_signature": "TemplatesCommand.doExecuteWithContext(CloudStackClient client, PrintStream out)", "testcase": false, "constructor": false, "invocations": ["printf", "getId", "getProvider", "listTemplates", "getTemplateClient", "printf", "toString", "println"]}, "repository": {"repo_id": 6035195, "url": "https://github.com/axemblr/axemblr-provisionr", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 30, "size": 3329, "license": "licensed"}}