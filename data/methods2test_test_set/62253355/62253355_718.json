{"test_class": {"identifier": "XACMLRequestFilterTest", "superclass": "extends OrmEnabledTestCase", "interfaces": "", "fields": [{"original_string": "private static final String QUERY_PARAM_KEY = \"testQueryParamKey\";", "modifier": "private static final", "type": "String", "declarator": "QUERY_PARAM_KEY = \"testQueryParamKey\"", "var_name": "QUERY_PARAM_KEY"}, {"original_string": "private static final String QUERY_PARAM_TWO_KEY = \"testQueryParamTwoKey\";", "modifier": "private static final", "type": "String", "declarator": "QUERY_PARAM_TWO_KEY = \"testQueryParamTwoKey\"", "var_name": "QUERY_PARAM_TWO_KEY"}, {"original_string": "private static final String QUERY_PARAM_VALUE = \"http://mobi.com/queryParamKey#queryParamValue\";", "modifier": "private static final", "type": "String", "declarator": "QUERY_PARAM_VALUE = \"http://mobi.com/queryParamKey#queryParamValue\"", "var_name": "QUERY_PARAM_VALUE"}, {"original_string": "private static final String PATH_PARAM_KEY = \"testPathParamKey\";", "modifier": "private static final", "type": "String", "declarator": "PATH_PARAM_KEY = \"testPathParamKey\"", "var_name": "PATH_PARAM_KEY"}, {"original_string": "private static final String PATH_PARAM_TWO_KEY = \"testPathParamTwoKey\";", "modifier": "private static final", "type": "String", "declarator": "PATH_PARAM_TWO_KEY = \"testPathParamTwoKey\"", "var_name": "PATH_PARAM_TWO_KEY"}, {"original_string": "private static final String PATH_PARAM_VALUE = \"http://mobi.com/pathParamKey#pathParamValue\";", "modifier": "private static final", "type": "String", "declarator": "PATH_PARAM_VALUE = \"http://mobi.com/pathParamKey#pathParamValue\"", "var_name": "PATH_PARAM_VALUE"}, {"original_string": "private static final String FORM_DATA_FIELD = \"testFormDataField\";", "modifier": "private static final", "type": "String", "declarator": "FORM_DATA_FIELD = \"testFormDataField\"", "var_name": "FORM_DATA_FIELD"}, {"original_string": "private static final String FORM_DATA_TWO_FIELD = \"testFormDataTwoField\";", "modifier": "private static final", "type": "String", "declarator": "FORM_DATA_TWO_FIELD = \"testFormDataTwoField\"", "var_name": "FORM_DATA_TWO_FIELD"}, {"original_string": "private static final String FORM_DATA_VALUE = \"http://mobi.com/formDataField#formDataValue\";", "modifier": "private static final", "type": "String", "declarator": "FORM_DATA_VALUE = \"http://mobi.com/formDataField#formDataValue\"", "var_name": "FORM_DATA_VALUE"}, {"original_string": "private static final String DEFAULT_RESOURCE_ID_IRI = \"http://mobi.com/test-default\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_RESOURCE_ID_IRI = \"http://mobi.com/test-default\"", "var_name": "DEFAULT_RESOURCE_ID_IRI"}, {"original_string": "private static final String MOBI_USER_IRI = \"urn:mobiUser\";", "modifier": "private static final", "type": "String", "declarator": "MOBI_USER_IRI = \"urn:mobiUser\"", "var_name": "MOBI_USER_IRI"}, {"original_string": "private XACMLRequestFilter filter;", "modifier": "private", "type": "XACMLRequestFilter", "declarator": "filter", "var_name": "filter"}, {"original_string": "private User user;", "modifier": "private", "type": "User", "declarator": "user", "var_name": "user"}, {"original_string": "private OrmFactory<User> userFactory = getRequiredOrmFactory(User.class);", "modifier": "private", "type": "OrmFactory<User>", "declarator": "userFactory = getRequiredOrmFactory(User.class)", "var_name": "userFactory"}, {"original_string": "@Rule\n    public ExpectedException exceptionRule = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "exceptionRule = ExpectedException.none()", "var_name": "exceptionRule"}, {"original_string": "@Mock\n    private ContainerRequest context;", "modifier": "@Mock\n    private", "type": "ContainerRequest", "declarator": "context", "var_name": "context"}, {"original_string": "@Mock\n    private ResourceInfo resourceInfo;", "modifier": "@Mock\n    private", "type": "ResourceInfo", "declarator": "resourceInfo", "var_name": "resourceInfo"}, {"original_string": "@Mock\n    private UriInfo uriInfo;", "modifier": "@Mock\n    private", "type": "UriInfo", "declarator": "uriInfo", "var_name": "uriInfo"}, {"original_string": "@Mock\n    private PDP pdp;", "modifier": "@Mock\n    private", "type": "PDP", "declarator": "pdp", "var_name": "pdp"}, {"original_string": "@Mock\n    private EngineManager engineManager;", "modifier": "@Mock\n    private", "type": "EngineManager", "declarator": "engineManager", "var_name": "engineManager"}, {"original_string": "@Mock\n    private Response response;", "modifier": "@Mock\n    private", "type": "Response", "declarator": "response", "var_name": "response"}, {"original_string": "@Mock\n    private Request request;", "modifier": "@Mock\n    private", "type": "Request", "declarator": "request", "var_name": "request"}], "file": "com.mobi.rest.security/src/test/java/com/mobi/rest/security/XACMLRequestFilterTest.java"}, "test_case": {"identifier": "resourceIdMissingQueryParamWithDefaultTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void resourceIdMissingQueryParamWithDefaultTest() throws Exception {\n        MultivaluedHashMap<String, String> queryParameters = new MultivaluedHashMap<>();\n        when(uriInfo.getQueryParameters()).thenReturn(queryParameters);\n        when(uriInfo.getPathParameters()).thenReturn(new MultivaluedHashMap<>());\n        when(resourceInfo.getResourceMethod()).thenReturn(MockResourceIdQueryParamClass.class.getDeclaredMethod(\"queryParamWithDefault\"));\n\n        IRI actionId = VALUE_FACTORY.createIRI(Read.TYPE);\n        IRI resourceId = VALUE_FACTORY.createIRI(DEFAULT_RESOURCE_ID_IRI);\n        IRI subjectId = VALUE_FACTORY.createIRI(ANON_USER);\n\n        filter.filter(context);\n        Mockito.verify(pdp).createRequest(subjectId, new HashMap<>(), resourceId, new HashMap<>(), actionId, new HashMap<>());\n    }", "signature": "void resourceIdMissingQueryParamWithDefaultTest()", "full_signature": "@Test public void resourceIdMissingQueryParamWithDefaultTest()", "class_method_signature": "XACMLRequestFilterTest.resourceIdMissingQueryParamWithDefaultTest()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getQueryParameters", "thenReturn", "when", "getPathParameters", "thenReturn", "when", "getResourceMethod", "getDeclaredMethod", "createIRI", "createIRI", "createIRI", "filter", "createRequest", "verify"]}, "focal_class": {"identifier": "XACMLRequestFilter", "superclass": "", "interfaces": "implements ContainerRequestFilter", "fields": [{"original_string": "private final Logger log = LoggerFactory.getLogger(XACMLRequestFilter.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(XACMLRequestFilter.class)", "var_name": "log"}, {"original_string": "private PDP pdp;", "modifier": "private", "type": "PDP", "declarator": "pdp", "var_name": "pdp"}, {"original_string": "private ValueFactory vf;", "modifier": "private", "type": "ValueFactory", "declarator": "vf", "var_name": "vf"}, {"original_string": "private EngineManager engineManager;", "modifier": "private", "type": "EngineManager", "declarator": "engineManager", "var_name": "engineManager"}, {"original_string": "private Repository repository;", "modifier": "private", "type": "Repository", "declarator": "repository", "var_name": "repository"}, {"original_string": "@Context\n    ResourceInfo resourceInfo;", "modifier": "@Context", "type": "ResourceInfo", "declarator": "resourceInfo", "var_name": "resourceInfo"}, {"original_string": "@Context\n    UriInfo uriInfo;", "modifier": "@Context", "type": "UriInfo", "declarator": "uriInfo", "var_name": "uriInfo"}], "methods": [{"identifier": "setVf", "parameters": "(ValueFactory vf)", "modifiers": "@Reference", "return": "void", "signature": "void setVf(ValueFactory vf)", "full_signature": "@Reference void setVf(ValueFactory vf)", "class_method_signature": "XACMLRequestFilter.setVf(ValueFactory vf)", "testcase": false, "constructor": false}, {"identifier": "setEngineManager", "parameters": "(EngineManager engineManager)", "modifiers": "@Reference", "return": "void", "signature": "void setEngineManager(EngineManager engineManager)", "full_signature": "@Reference void setEngineManager(EngineManager engineManager)", "class_method_signature": "XACMLRequestFilter.setEngineManager(EngineManager engineManager)", "testcase": false, "constructor": false}, {"identifier": "setPdp", "parameters": "(PDP pdp)", "modifiers": "@Reference", "return": "void", "signature": "void setPdp(PDP pdp)", "full_signature": "@Reference void setPdp(PDP pdp)", "class_method_signature": "XACMLRequestFilter.setPdp(PDP pdp)", "testcase": false, "constructor": false}, {"identifier": "setRepository", "parameters": "(Repository repository)", "modifiers": "@Reference(target = \"(id=system)\")", "return": "void", "signature": "void setRepository(Repository repository)", "full_signature": "@Reference(target = \"(id=system)\") void setRepository(Repository repository)", "class_method_signature": "XACMLRequestFilter.setRepository(Repository repository)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(ContainerRequestContext context)", "modifiers": "@Override public", "return": "void", "signature": "void filter(ContainerRequestContext context)", "full_signature": "@Override public void filter(ContainerRequestContext context)", "class_method_signature": "XACMLRequestFilter.filter(ContainerRequestContext context)", "testcase": false, "constructor": false}, {"identifier": "getResourceIdIri", "parameters": "(ResourceId resourceIdAnnotation, ContainerRequestContext context,\n                                            MultivaluedMap<String, String> queryParameters,\n                                            MultivaluedMap<String, String> pathParameters)", "modifiers": "private", "return": "IRI", "signature": "IRI getResourceIdIri(ResourceId resourceIdAnnotation, ContainerRequestContext context,\n                                            MultivaluedMap<String, String> queryParameters,\n                                            MultivaluedMap<String, String> pathParameters)", "full_signature": "private IRI getResourceIdIri(ResourceId resourceIdAnnotation, ContainerRequestContext context,\n                                            MultivaluedMap<String, String> queryParameters,\n                                            MultivaluedMap<String, String> pathParameters)", "class_method_signature": "XACMLRequestFilter.getResourceIdIri(ResourceId resourceIdAnnotation, ContainerRequestContext context,\n                                            MultivaluedMap<String, String> queryParameters,\n                                            MultivaluedMap<String, String> pathParameters)", "testcase": false, "constructor": false}, {"identifier": "getLiteral", "parameters": "(String value, String datatype)", "modifiers": "private", "return": "Literal", "signature": "Literal getLiteral(String value, String datatype)", "full_signature": "private Literal getLiteral(String value, String datatype)", "class_method_signature": "XACMLRequestFilter.getLiteral(String value, String datatype)", "testcase": false, "constructor": false}, {"identifier": "getResourceIdFromDefault", "parameters": "(DefaultResourceId defaultVal)", "modifiers": "private", "return": "ResourceId", "signature": "ResourceId getResourceIdFromDefault(DefaultResourceId defaultVal)", "full_signature": "private ResourceId getResourceIdFromDefault(DefaultResourceId defaultVal)", "class_method_signature": "XACMLRequestFilter.getResourceIdFromDefault(DefaultResourceId defaultVal)", "testcase": false, "constructor": false}, {"identifier": "getMessageOrDefault", "parameters": "(Response response, String defaultMessage)", "modifiers": "private", "return": "String", "signature": "String getMessageOrDefault(Response response, String defaultMessage)", "full_signature": "private String getMessageOrDefault(Response response, String defaultMessage)", "class_method_signature": "XACMLRequestFilter.getMessageOrDefault(Response response, String defaultMessage)", "testcase": false, "constructor": false}, {"identifier": "validatePathParam", "parameters": "(String key, MultivaluedMap<String, String> params, boolean isRequired)", "modifiers": "private", "return": "boolean", "signature": "boolean validatePathParam(String key, MultivaluedMap<String, String> params, boolean isRequired)", "full_signature": "private boolean validatePathParam(String key, MultivaluedMap<String, String> params, boolean isRequired)", "class_method_signature": "XACMLRequestFilter.validatePathParam(String key, MultivaluedMap<String, String> params, boolean isRequired)", "testcase": false, "constructor": false}, {"identifier": "validateQueryParam", "parameters": "(String key, MultivaluedMap<String, String> params, boolean isRequired)", "modifiers": "private", "return": "boolean", "signature": "boolean validateQueryParam(String key, MultivaluedMap<String, String> params, boolean isRequired)", "full_signature": "private boolean validateQueryParam(String key, MultivaluedMap<String, String> params, boolean isRequired)", "class_method_signature": "XACMLRequestFilter.validateQueryParam(String key, MultivaluedMap<String, String> params, boolean isRequired)", "testcase": false, "constructor": false}, {"identifier": "validateFormParam", "parameters": "(String key, FormDataMultiPart params, boolean isRequired)", "modifiers": "private", "return": "boolean", "signature": "boolean validateFormParam(String key, FormDataMultiPart params, boolean isRequired)", "full_signature": "private boolean validateFormParam(String key, FormDataMultiPart params, boolean isRequired)", "class_method_signature": "XACMLRequestFilter.validateFormParam(String key, FormDataMultiPart params, boolean isRequired)", "testcase": false, "constructor": false}, {"identifier": "validatePropPathValue", "parameters": "(Value[] values)", "modifiers": "private", "return": "Value", "signature": "Value validatePropPathValue(Value[] values)", "full_signature": "private Value validatePropPathValue(Value[] values)", "class_method_signature": "XACMLRequestFilter.validatePropPathValue(Value[] values)", "testcase": false, "constructor": false}, {"identifier": "getFormData", "parameters": "(ContainerRequestContext context)", "modifiers": "private", "return": "FormDataMultiPart", "signature": "FormDataMultiPart getFormData(ContainerRequestContext context)", "full_signature": "private FormDataMultiPart getFormData(ContainerRequestContext context)", "class_method_signature": "XACMLRequestFilter.getFormData(ContainerRequestContext context)", "testcase": false, "constructor": false}, {"identifier": "setAttributes", "parameters": "(Map<String, Literal> attrs, AttributeValue[] values,\n                               MultivaluedMap<String, String> pathParameters,\n                               MultivaluedMap<String, String> queryParameters, ContainerRequestContext context)", "modifiers": "private", "return": "void", "signature": "void setAttributes(Map<String, Literal> attrs, AttributeValue[] values,\n                               MultivaluedMap<String, String> pathParameters,\n                               MultivaluedMap<String, String> queryParameters, ContainerRequestContext context)", "full_signature": "private void setAttributes(Map<String, Literal> attrs, AttributeValue[] values,\n                               MultivaluedMap<String, String> pathParameters,\n                               MultivaluedMap<String, String> queryParameters, ContainerRequestContext context)", "class_method_signature": "XACMLRequestFilter.setAttributes(Map<String, Literal> attrs, AttributeValue[] values,\n                               MultivaluedMap<String, String> pathParameters,\n                               MultivaluedMap<String, String> queryParameters, ContainerRequestContext context)", "testcase": false, "constructor": false}, {"identifier": "getPropPathStart", "parameters": "(Value valueAnnotation, MultivaluedMap<String, String> pathParameters,\n                                 MultivaluedMap<String, String> queryParameters, ContainerRequestContext context,\n                                 boolean isRequired)", "modifiers": "private", "return": "IRI", "signature": "IRI getPropPathStart(Value valueAnnotation, MultivaluedMap<String, String> pathParameters,\n                                 MultivaluedMap<String, String> queryParameters, ContainerRequestContext context,\n                                 boolean isRequired)", "full_signature": "private IRI getPropPathStart(Value valueAnnotation, MultivaluedMap<String, String> pathParameters,\n                                 MultivaluedMap<String, String> queryParameters, ContainerRequestContext context,\n                                 boolean isRequired)", "class_method_signature": "XACMLRequestFilter.getPropPathStart(Value valueAnnotation, MultivaluedMap<String, String> pathParameters,\n                                 MultivaluedMap<String, String> queryParameters, ContainerRequestContext context,\n                                 boolean isRequired)", "testcase": false, "constructor": false}, {"identifier": "getPropPathResult", "parameters": "(IRI start, String propPath, RepositoryConnection conn)", "modifiers": "private", "return": "TupleQueryResult", "signature": "TupleQueryResult getPropPathResult(IRI start, String propPath, RepositoryConnection conn)", "full_signature": "private TupleQueryResult getPropPathResult(IRI start, String propPath, RepositoryConnection conn)", "class_method_signature": "XACMLRequestFilter.getPropPathResult(IRI start, String propPath, RepositoryConnection conn)", "testcase": false, "constructor": false}], "file": "com.mobi.rest.security/src/main/java/com/mobi/rest/security/XACMLRequestFilter.java"}, "focal_method": {"identifier": "filter", "parameters": "(ContainerRequestContext context)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void filter(ContainerRequestContext context) throws IOException {\n        log.debug(\"Authorizing...\");\n        long start = System.currentTimeMillis();\n\n        MultivaluedMap<String, String> pathParameters = uriInfo.getPathParameters();\n        MultivaluedMap<String, String> queryParameters = uriInfo.getQueryParameters();\n        Method method = resourceInfo.getResourceMethod();\n\n        if (method.getAnnotation(ResourceId.class) == null) {\n            log.info(String.format(\"Request authorization skipped. %dms\", System.currentTimeMillis() - start));\n            return;\n        }\n\n        IRI subjectIdIri = (IRI) RestUtils.optActiveUser(context, engineManager).map(User::getResource)\n                .orElse(vf.createIRI(ANON_USER));\n\n        // Subject\n\n        SubjectAttributes subjectAttributesAnnotation = method.getAnnotation(SubjectAttributes.class);\n        Map<String, Literal> subjectAttributes = new HashMap<>();\n        if (subjectAttributesAnnotation != null) {\n            setAttributes(subjectAttributes, subjectAttributesAnnotation.value(), pathParameters, queryParameters,\n                    context);\n        }\n\n        // Resource\n\n        ResourceId resourceIdAnnotation = method.getAnnotation(ResourceId.class);\n        IRI resourceIdIri;\n        try {\n            resourceIdIri = getResourceIdIri(resourceIdAnnotation, context, queryParameters, pathParameters);\n        } catch (MobiWebException ex) {\n            DefaultResourceId[] defaultValArr = resourceIdAnnotation.defaultValue();\n            if (defaultValArr.length != 0) {\n                log.info(\"Attempting to resolve a default Resource ID.\");\n                DefaultResourceId defaultVal = defaultValArr[0];\n                ResourceId defaultResourceId = getResourceIdFromDefault(defaultVal);\n                resourceIdIri = getResourceIdIri(defaultResourceId, context, queryParameters, pathParameters);\n            } else {\n                throw ex;\n            }\n        }\n\n        ResourceAttributes resourceAttributesAnnotation = method.getAnnotation(ResourceAttributes.class);\n        Map<String, Literal> resourceAttributes = new HashMap<>();\n        if (resourceAttributesAnnotation != null) {\n            setAttributes(resourceAttributes, resourceAttributesAnnotation.value(), pathParameters, queryParameters,\n                    context);\n        }\n\n        // Action\n\n        ActionId actionIdAnnotation = method.getAnnotation(ActionId.class);\n        IRI actionId;\n        if (actionIdAnnotation == null) {\n            switch (context.getMethod()) {\n                case \"POST\":\n                    actionId = vf.createIRI(Create.TYPE);\n                    break;\n                case \"DELETE\":\n                    actionId = vf.createIRI(Delete.TYPE);\n                    break;\n                case \"PUT\":\n                    actionId = vf.createIRI(Update.TYPE);\n                    break;\n                case \"GET\":\n                default:\n                    actionId = vf.createIRI(Read.TYPE);\n                    break;\n            }\n        } else {\n            actionId = vf.createIRI(actionIdAnnotation.value());\n        }\n\n        ActionAttributes actionAttributesAnnotation = method.getAnnotation(ActionAttributes.class);\n        Map<String, Literal> actionAttributes = new HashMap<>();\n        if (actionAttributesAnnotation != null) {\n            setAttributes(actionAttributes, actionAttributesAnnotation.value(), pathParameters, queryParameters,\n                    context);\n        }\n\n        Request request = pdp.createRequest(subjectIdIri, subjectAttributes, resourceIdIri, resourceAttributes,\n                actionId, actionAttributes);\n        log.debug(request.toString());\n        Response response = pdp.evaluate(request, vf.createIRI(POLICY_PERMIT_OVERRIDES));\n        log.debug(response.toString());\n\n        Decision decision = response.getDecision();\n        if (decision != Decision.PERMIT) {\n            if (decision == Decision.DENY) {\n                String statusMessage = getMessageOrDefault(response,\n                        \"You do not have permission to perform this action\");\n                throw ErrorUtils.sendError(statusMessage, UNAUTHORIZED);\n            }\n            if (decision == Decision.INDETERMINATE) {\n                String statusMessage = getMessageOrDefault(response, \"Request indeterminate\");\n                throw ErrorUtils.sendError(statusMessage, INTERNAL_SERVER_ERROR);\n            }\n        }\n        log.info(String.format(\"Request permitted. %dms\", System.currentTimeMillis() - start));\n    }", "signature": "void filter(ContainerRequestContext context)", "full_signature": "@Override public void filter(ContainerRequestContext context)", "class_method_signature": "XACMLRequestFilter.filter(ContainerRequestContext context)", "testcase": false, "constructor": false, "invocations": ["debug", "currentTimeMillis", "getPathParameters", "getQueryParameters", "getResourceMethod", "getAnnotation", "info", "format", "currentTimeMillis", "orElse", "map", "optActiveUser", "createIRI", "getAnnotation", "setAttributes", "value", "getAnnotation", "getResourceIdIri", "defaultValue", "info", "getResourceIdFromDefault", "getResourceIdIri", "getAnnotation", "setAttributes", "value", "getAnnotation", "getMethod", "createIRI", "createIRI", "createIRI", "createIRI", "createIRI", "value", "getAnnotation", "setAttributes", "value", "createRequest", "debug", "toString", "evaluate", "createIRI", "debug", "toString", "getDecision", "getMessageOrDefault", "sendError", "getMessageOrDefault", "sendError", "info", "format", "currentTimeMillis"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}