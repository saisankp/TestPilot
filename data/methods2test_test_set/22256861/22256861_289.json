{"test_class": {"identifier": "SolarFluxCorrectionFactorCalculatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final int endJan = 31;", "modifier": "private final", "type": "int", "declarator": "endJan = 31", "var_name": "endJan"}, {"original_string": "private final int endFeb = endJan + 28;", "modifier": "private final", "type": "int", "declarator": "endFeb = endJan + 28", "var_name": "endFeb"}, {"original_string": "private final int endMar = endFeb + 31;", "modifier": "private final", "type": "int", "declarator": "endMar = endFeb + 31", "var_name": "endMar"}, {"original_string": "private final int endApr = endMar + 30;", "modifier": "private final", "type": "int", "declarator": "endApr = endMar + 30", "var_name": "endApr"}, {"original_string": "private final int endMay = endApr + 31;", "modifier": "private final", "type": "int", "declarator": "endMay = endApr + 31", "var_name": "endMay"}, {"original_string": "private final int endJun = endMay + 30;", "modifier": "private final", "type": "int", "declarator": "endJun = endMay + 30", "var_name": "endJun"}, {"original_string": "private final int endJul = endJun + 31;", "modifier": "private final", "type": "int", "declarator": "endJul = endJun + 31", "var_name": "endJul"}, {"original_string": "private final int endAug = endJul + 31;", "modifier": "private final", "type": "int", "declarator": "endAug = endJul + 31", "var_name": "endAug"}, {"original_string": "private final int endSep = endAug + 30;", "modifier": "private final", "type": "int", "declarator": "endSep = endAug + 30", "var_name": "endSep"}, {"original_string": "private final int endOct = endSep + 31;", "modifier": "private final", "type": "int", "declarator": "endOct = endSep + 31", "var_name": "endOct"}, {"original_string": "private final int endNov = endOct + 30;", "modifier": "private final", "type": "int", "declarator": "endNov = endOct + 30", "var_name": "endNov"}, {"original_string": "private ProductData.UTC time1;", "modifier": "private", "type": "ProductData.UTC", "declarator": "time1", "var_name": "time1"}, {"original_string": "private ProductData.UTC time2;", "modifier": "private", "type": "ProductData.UTC", "declarator": "time2", "var_name": "time2"}], "file": "s3tbx-c2rcc/src/test/java/org/esa/s3tbx/c2rcc/util/SolarFluxCorrectionFactorCalculatorTest.java"}, "test_case": {"identifier": "testGetSolarFluxDayCorrectionFactorForADay", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetSolarFluxDayCorrectionFactorForADay() {\n        final int nonLeapYear = 2007;\n        assertEquals(1.0350, SolarFluxCorrectionFactorCalculator.getDayCorrectionFactorFor(1, nonLeapYear), 1e-4);\n        assertEquals(1.0306, SolarFluxCorrectionFactorCalculator.getDayCorrectionFactorFor(1 + endJan, nonLeapYear), 1e-4);\n        assertEquals(1.0190, SolarFluxCorrectionFactorCalculator.getDayCorrectionFactorFor(1 + endFeb, nonLeapYear), 1e-4);\n        assertEquals(1.0014, SolarFluxCorrectionFactorCalculator.getDayCorrectionFactorFor(1 + endMar, nonLeapYear), 1e-4);\n        assertEquals(0.9845, SolarFluxCorrectionFactorCalculator.getDayCorrectionFactorFor(1 + endApr, nonLeapYear), 1e-4);\n        assertEquals(0.9717, SolarFluxCorrectionFactorCalculator.getDayCorrectionFactorFor(1 + endMay, nonLeapYear), 1e-4);\n        assertEquals(0.9666, SolarFluxCorrectionFactorCalculator.getDayCorrectionFactorFor(1 + endJun, nonLeapYear), 1e-4);\n        assertEquals(0.9700, SolarFluxCorrectionFactorCalculator.getDayCorrectionFactorFor(1 + endJul, nonLeapYear), 1e-4);\n        assertEquals(0.9814, SolarFluxCorrectionFactorCalculator.getDayCorrectionFactorFor(1 + endAug, nonLeapYear), 1e-4);\n        assertEquals(0.9976, SolarFluxCorrectionFactorCalculator.getDayCorrectionFactorFor(1 + endSep, nonLeapYear), 1e-4);\n        assertEquals(1.0155, SolarFluxCorrectionFactorCalculator.getDayCorrectionFactorFor(1 + endOct, nonLeapYear), 1e-4);\n        assertEquals(1.0292, SolarFluxCorrectionFactorCalculator.getDayCorrectionFactorFor(1 + endNov, nonLeapYear), 1e-4);\n\n        assertEquals(1.0309, SolarFluxCorrectionFactorCalculator.getDayCorrectionFactorFor(endJan, nonLeapYear), 1e-4);\n        assertEquals(1.0195, SolarFluxCorrectionFactorCalculator.getDayCorrectionFactorFor(endFeb, nonLeapYear), 1e-4);\n        assertEquals(1.0020, SolarFluxCorrectionFactorCalculator.getDayCorrectionFactorFor(endMar, nonLeapYear), 1e-4);\n        assertEquals(0.9851, SolarFluxCorrectionFactorCalculator.getDayCorrectionFactorFor(endApr, nonLeapYear), 1e-4);\n        assertEquals(0.9720, SolarFluxCorrectionFactorCalculator.getDayCorrectionFactorFor(endMay, nonLeapYear), 1e-4);\n        assertEquals(0.9667, SolarFluxCorrectionFactorCalculator.getDayCorrectionFactorFor(endJun, nonLeapYear), 1e-4);\n        assertEquals(0.9698, SolarFluxCorrectionFactorCalculator.getDayCorrectionFactorFor(endJul, nonLeapYear), 1e-4);\n        assertEquals(0.9809, SolarFluxCorrectionFactorCalculator.getDayCorrectionFactorFor(endAug, nonLeapYear), 1e-4);\n        assertEquals(0.9970, SolarFluxCorrectionFactorCalculator.getDayCorrectionFactorFor(endSep, nonLeapYear), 1e-4);\n        assertEquals(1.0150, SolarFluxCorrectionFactorCalculator.getDayCorrectionFactorFor(endOct, nonLeapYear), 1e-4);\n        assertEquals(1.0288, SolarFluxCorrectionFactorCalculator.getDayCorrectionFactorFor(endNov, nonLeapYear), 1e-4);\n        assertEquals(1.0350, SolarFluxCorrectionFactorCalculator.getDayCorrectionFactorFor(31 + endNov, nonLeapYear), 1e-4);\n    }", "signature": "void testGetSolarFluxDayCorrectionFactorForADay()", "full_signature": "@Test public void testGetSolarFluxDayCorrectionFactorForADay()", "class_method_signature": "SolarFluxCorrectionFactorCalculatorTest.testGetSolarFluxDayCorrectionFactorForADay()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getDayCorrectionFactorFor", "assertEquals", "getDayCorrectionFactorFor", "assertEquals", "getDayCorrectionFactorFor", "assertEquals", "getDayCorrectionFactorFor", "assertEquals", "getDayCorrectionFactorFor", "assertEquals", "getDayCorrectionFactorFor", "assertEquals", "getDayCorrectionFactorFor", "assertEquals", "getDayCorrectionFactorFor", "assertEquals", "getDayCorrectionFactorFor", "assertEquals", "getDayCorrectionFactorFor", "assertEquals", "getDayCorrectionFactorFor", "assertEquals", "getDayCorrectionFactorFor", "assertEquals", "getDayCorrectionFactorFor", "assertEquals", "getDayCorrectionFactorFor", "assertEquals", "getDayCorrectionFactorFor", "assertEquals", "getDayCorrectionFactorFor", "assertEquals", "getDayCorrectionFactorFor", "assertEquals", "getDayCorrectionFactorFor", "assertEquals", "getDayCorrectionFactorFor", "assertEquals", "getDayCorrectionFactorFor", "assertEquals", "getDayCorrectionFactorFor", "assertEquals", "getDayCorrectionFactorFor", "assertEquals", "getDayCorrectionFactorFor", "assertEquals", "getDayCorrectionFactorFor"]}, "focal_class": {"identifier": "SolarFluxCorrectionFactorCalculator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static Calendar cal = GregorianCalendar.getInstance(TimeZone.getTimeZone(\"UTC\"), Locale.ENGLISH);", "modifier": "private final static", "type": "Calendar", "declarator": "cal = GregorianCalendar.getInstance(TimeZone.getTimeZone(\"UTC\"), Locale.ENGLISH)", "var_name": "cal"}], "methods": [{"identifier": "computeFactorFor", "parameters": "(ProductData.UTC startTime, ProductData.UTC endTime)", "modifiers": "public static", "return": "double", "signature": "double computeFactorFor(ProductData.UTC startTime, ProductData.UTC endTime)", "full_signature": "public static double computeFactorFor(ProductData.UTC startTime, ProductData.UTC endTime)", "class_method_signature": "SolarFluxCorrectionFactorCalculator.computeFactorFor(ProductData.UTC startTime, ProductData.UTC endTime)", "testcase": false, "constructor": false}, {"identifier": "computeFactorFor", "parameters": "(ProductData.UTC time)", "modifiers": "public static", "return": "double", "signature": "double computeFactorFor(ProductData.UTC time)", "full_signature": "public static double computeFactorFor(ProductData.UTC time)", "class_method_signature": "SolarFluxCorrectionFactorCalculator.computeFactorFor(ProductData.UTC time)", "testcase": false, "constructor": false}, {"identifier": "getCenterUTC", "parameters": "(ProductData.UTC start, ProductData.UTC end)", "modifiers": "public static", "return": "ProductData.UTC", "signature": "ProductData.UTC getCenterUTC(ProductData.UTC start, ProductData.UTC end)", "full_signature": "public static ProductData.UTC getCenterUTC(ProductData.UTC start, ProductData.UTC end)", "class_method_signature": "SolarFluxCorrectionFactorCalculator.getCenterUTC(ProductData.UTC start, ProductData.UTC end)", "testcase": false, "constructor": false}, {"identifier": "getDayCorrectionFactorFor", "parameters": "(int day, int year)", "modifiers": "static", "return": "double", "signature": "double getDayCorrectionFactorFor(int day, int year)", "full_signature": "static double getDayCorrectionFactorFor(int day, int year)", "class_method_signature": "SolarFluxCorrectionFactorCalculator.getDayCorrectionFactorFor(int day, int year)", "testcase": false, "constructor": false}, {"identifier": "getNumDaysInTheYear", "parameters": "(int year)", "modifiers": "public static synchronized", "return": "int", "signature": "int getNumDaysInTheYear(int year)", "full_signature": "public static synchronized int getNumDaysInTheYear(int year)", "class_method_signature": "SolarFluxCorrectionFactorCalculator.getNumDaysInTheYear(int year)", "testcase": false, "constructor": false}], "file": "s3tbx-c2rcc/src/main/java/org/esa/s3tbx/c2rcc/util/SolarFluxCorrectionFactorCalculator.java"}, "focal_method": {"identifier": "getDayCorrectionFactorFor", "parameters": "(int day, int year)", "modifiers": "static", "return": "double", "body": "static double getDayCorrectionFactorFor(int day, int year) {\n        // see \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n        //     \"  An introduction to solar radiation  \"\n        //     \"            Muhammad Iqbal            \"\n        //     \"                1993                  \"\n        //     \" Chapter 1.2 ... Sun-Earth Distance r \"\n        //     \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n        final double gamma = PI * 2 * (day - 1) / getNumDaysInTheYear(year);\n        return 1.000110\n               + 0.034221 * cos(gamma)\n               + 0.001280 * sin(gamma)\n               + 0.000719 * cos(2 * gamma)\n               + 0.000077 * sin(2 * gamma);\n    }", "signature": "double getDayCorrectionFactorFor(int day, int year)", "full_signature": "static double getDayCorrectionFactorFor(int day, int year)", "class_method_signature": "SolarFluxCorrectionFactorCalculator.getDayCorrectionFactorFor(int day, int year)", "testcase": false, "constructor": false, "invocations": ["getNumDaysInTheYear", "cos", "sin", "cos", "sin"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}