{"test_class": {"identifier": "JsonMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ObjectMapper objectMapper = new ObjectMapper();", "modifier": "private", "type": "ObjectMapper", "declarator": "objectMapper = new ObjectMapper()", "var_name": "objectMapper"}], "file": "core/modules/jackson/src/test/java/org/onetwo/common/jackson/JsonMapperTest.java"}, "test_case": {"identifier": "testEnum", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testEnum(){\n\t\tEnumVo v = new EnumVo();\n\t\tv.setField(\"fieldValue\");\n\t\tv.setIntField(11);\n\t\tv.setType(EnumTest.FINISHED);\n\t\t\n\t\tString json = JsonMapper.IGNORE_EMPTY.toJson(v);\n\t\tSystem.out.println(\"json: \" + json);\n\t\tAssert.assertEquals(\"{\\\"field\\\":\\\"fieldValue\\\",\\\"intField\\\":11,\\\"type\\\":\\\"FINISHED\\\"}\", json);;\n\t}", "signature": "void testEnum()", "full_signature": "@Test public void testEnum()", "class_method_signature": "JsonMapperTest.testEnum()", "testcase": true, "constructor": false, "invocations": ["setField", "setIntField", "setType", "toJson", "println", "assertEquals"]}, "focal_class": {"identifier": "JsonMapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "final public static String TIME_ZONE_CHINESE = \"GMT+8\";", "modifier": "final public static", "type": "String", "declarator": "TIME_ZONE_CHINESE = \"GMT+8\"", "var_name": "TIME_ZONE_CHINESE"}, {"original_string": "public static String DEFAULT_JSONP_NAME = \"callback\";", "modifier": "public static", "type": "String", "declarator": "DEFAULT_JSONP_NAME = \"callback\"", "var_name": "DEFAULT_JSONP_NAME"}, {"original_string": "public static final JsonMapper DEFAULT_MAPPER = defaultMapper();", "modifier": "public static final", "type": "JsonMapper", "declarator": "DEFAULT_MAPPER = defaultMapper()", "var_name": "DEFAULT_MAPPER"}, {"original_string": "public static final JsonMapper IGNORE_NULL = ignoreNull();", "modifier": "public static final", "type": "JsonMapper", "declarator": "IGNORE_NULL = ignoreNull()", "var_name": "IGNORE_NULL"}, {"original_string": "public static final JsonMapper IGNORE_EMPTY = ignoreEmpty();", "modifier": "public static final", "type": "JsonMapper", "declarator": "IGNORE_EMPTY = ignoreEmpty()", "var_name": "IGNORE_EMPTY"}, {"original_string": "private final Logger logger = JFishLoggerFactory.getLogger(this.getClass());", "modifier": "private final", "type": "Logger", "declarator": "logger = JFishLoggerFactory.getLogger(this.getClass())", "var_name": "logger"}, {"original_string": "private ObjectMapper objectMapper;", "modifier": "private", "type": "ObjectMapper", "declarator": "objectMapper", "var_name": "objectMapper"}, {"original_string": "private SimpleFilterProvider filterProvider = new SimpleFilterProvider();", "modifier": "private", "type": "SimpleFilterProvider", "declarator": "filterProvider = new SimpleFilterProvider()", "var_name": "filterProvider"}, {"original_string": "private TypeFactory typeFactory;", "modifier": "private", "type": "TypeFactory", "declarator": "typeFactory", "var_name": "typeFactory"}], "methods": [{"identifier": "exceptFilter", "parameters": "(String id, String...properties)", "modifiers": "public static", "return": "SimpleFilterProvider", "signature": "SimpleFilterProvider exceptFilter(String id, String...properties)", "full_signature": "public static SimpleFilterProvider exceptFilter(String id, String...properties)", "class_method_signature": "JsonMapper.exceptFilter(String id, String...properties)", "testcase": false, "constructor": false}, {"identifier": "defaultMapper", "parameters": "()", "modifiers": "public static", "return": "JsonMapper", "signature": "JsonMapper defaultMapper()", "full_signature": "public static JsonMapper defaultMapper()", "class_method_signature": "JsonMapper.defaultMapper()", "testcase": false, "constructor": false}, {"identifier": "ignoreNull", "parameters": "()", "modifiers": "public static", "return": "JsonMapper", "signature": "JsonMapper ignoreNull()", "full_signature": "public static JsonMapper ignoreNull()", "class_method_signature": "JsonMapper.ignoreNull()", "testcase": false, "constructor": false}, {"identifier": "ignoreEmpty", "parameters": "()", "modifiers": "public static", "return": "JsonMapper", "signature": "JsonMapper ignoreEmpty()", "full_signature": "public static JsonMapper ignoreEmpty()", "class_method_signature": "JsonMapper.ignoreEmpty()", "testcase": false, "constructor": false}, {"identifier": "mapper", "parameters": "(Include include, boolean fieldVisibility)", "modifiers": "public static", "return": "JsonMapper", "signature": "JsonMapper mapper(Include include, boolean fieldVisibility)", "full_signature": "public static JsonMapper mapper(Include include, boolean fieldVisibility)", "class_method_signature": "JsonMapper.mapper(Include include, boolean fieldVisibility)", "testcase": false, "constructor": false}, {"identifier": "JsonMapper", "parameters": "(Include include)", "modifiers": "public", "return": "", "signature": " JsonMapper(Include include)", "full_signature": "public  JsonMapper(Include include)", "class_method_signature": "JsonMapper.JsonMapper(Include include)", "testcase": false, "constructor": true}, {"identifier": "JsonMapper", "parameters": "(ObjectMapper objectMapper, Include include)", "modifiers": "public", "return": "", "signature": " JsonMapper(ObjectMapper objectMapper, Include include)", "full_signature": "public  JsonMapper(ObjectMapper objectMapper, Include include)", "class_method_signature": "JsonMapper.JsonMapper(ObjectMapper objectMapper, Include include)", "testcase": false, "constructor": true}, {"identifier": "JsonMapper", "parameters": "(ObjectMapper objectMapper, Include include, boolean fieldVisibility)", "modifiers": "public", "return": "", "signature": " JsonMapper(ObjectMapper objectMapper, Include include, boolean fieldVisibility)", "full_signature": "public  JsonMapper(ObjectMapper objectMapper, Include include, boolean fieldVisibility)", "class_method_signature": "JsonMapper.JsonMapper(ObjectMapper objectMapper, Include include, boolean fieldVisibility)", "testcase": false, "constructor": true}, {"identifier": "prettyPrint", "parameters": "()", "modifiers": "public", "return": "JsonMapper", "signature": "JsonMapper prettyPrint()", "full_signature": "public JsonMapper prettyPrint()", "class_method_signature": "JsonMapper.prettyPrint()", "testcase": false, "constructor": false}, {"identifier": "singleQuotes", "parameters": "()", "modifiers": "public", "return": "JsonMapper", "signature": "JsonMapper singleQuotes()", "full_signature": "public JsonMapper singleQuotes()", "class_method_signature": "JsonMapper.singleQuotes()", "testcase": false, "constructor": false}, {"identifier": "allowSingleQuotes", "parameters": "()", "modifiers": "public", "return": "JsonMapper", "signature": "JsonMapper allowSingleQuotes()", "full_signature": "public JsonMapper allowSingleQuotes()", "class_method_signature": "JsonMapper.allowSingleQuotes()", "testcase": false, "constructor": false}, {"identifier": "unquotedFieldNames", "parameters": "()", "modifiers": "public", "return": "JsonMapper", "signature": "JsonMapper unquotedFieldNames()", "full_signature": "public JsonMapper unquotedFieldNames()", "class_method_signature": "JsonMapper.unquotedFieldNames()", "testcase": false, "constructor": false}, {"identifier": "disable", "parameters": "(SerializationFeature features)", "modifiers": "public", "return": "JsonMapper", "signature": "JsonMapper disable(SerializationFeature features)", "full_signature": "public JsonMapper disable(SerializationFeature features)", "class_method_signature": "JsonMapper.disable(SerializationFeature features)", "testcase": false, "constructor": false}, {"identifier": "disable", "parameters": "(DeserializationFeature features)", "modifiers": "public", "return": "JsonMapper", "signature": "JsonMapper disable(DeserializationFeature features)", "full_signature": "public JsonMapper disable(DeserializationFeature features)", "class_method_signature": "JsonMapper.disable(DeserializationFeature features)", "testcase": false, "constructor": false}, {"identifier": "enableTyping", "parameters": "()", "modifiers": "public", "return": "JsonMapper", "signature": "JsonMapper enableTyping()", "full_signature": "public JsonMapper enableTyping()", "class_method_signature": "JsonMapper.enableTyping()", "testcase": false, "constructor": false}, {"identifier": "addMixIns", "parameters": "(Class<?> mixinSource, Class<?>... targets)", "modifiers": "public", "return": "JsonMapper", "signature": "JsonMapper addMixIns(Class<?> mixinSource, Class<?>... targets)", "full_signature": "public JsonMapper addMixIns(Class<?> mixinSource, Class<?>... targets)", "class_method_signature": "JsonMapper.addMixIns(Class<?> mixinSource, Class<?>... targets)", "testcase": false, "constructor": false}, {"identifier": "defaultFiler", "parameters": "(PropertyFilter bpf)", "modifiers": "public", "return": "JsonMapper", "signature": "JsonMapper defaultFiler(PropertyFilter bpf)", "full_signature": "public JsonMapper defaultFiler(PropertyFilter bpf)", "class_method_signature": "JsonMapper.defaultFiler(PropertyFilter bpf)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(String id, String...properties)", "modifiers": "public", "return": "JsonMapper", "signature": "JsonMapper filter(String id, String...properties)", "full_signature": "public JsonMapper filter(String id, String...properties)", "class_method_signature": "JsonMapper.filter(String id, String...properties)", "testcase": false, "constructor": false}, {"identifier": "setDateFormat", "parameters": "(String format)", "modifiers": "public", "return": "JsonMapper", "signature": "JsonMapper setDateFormat(String format)", "full_signature": "public JsonMapper setDateFormat(String format)", "class_method_signature": "JsonMapper.setDateFormat(String format)", "testcase": false, "constructor": false}, {"identifier": "setDateFormat", "parameters": "(String format, String timezone)", "modifiers": "public", "return": "JsonMapper", "signature": "JsonMapper setDateFormat(String format, String timezone)", "full_signature": "public JsonMapper setDateFormat(String format, String timezone)", "class_method_signature": "JsonMapper.setDateFormat(String format, String timezone)", "testcase": false, "constructor": false}, {"identifier": "toJson", "parameters": "(Object object)", "modifiers": "public", "return": "String", "signature": "String toJson(Object object)", "full_signature": "public String toJson(Object object)", "class_method_signature": "JsonMapper.toJson(Object object)", "testcase": false, "constructor": false}, {"identifier": "writer", "parameters": "(FilterProvider filterProvider)", "modifiers": "public", "return": "ObjectWriter", "signature": "ObjectWriter writer(FilterProvider filterProvider)", "full_signature": "public ObjectWriter writer(FilterProvider filterProvider)", "class_method_signature": "JsonMapper.writer(FilterProvider filterProvider)", "testcase": false, "constructor": false}, {"identifier": "toJson", "parameters": "(Object object, boolean throwIfError)", "modifiers": "public", "return": "String", "signature": "String toJson(Object object, boolean throwIfError)", "full_signature": "public String toJson(Object object, boolean throwIfError)", "class_method_signature": "JsonMapper.toJson(Object object, boolean throwIfError)", "testcase": false, "constructor": false}, {"identifier": "toJsonBytes", "parameters": "(Object object)", "modifiers": "public", "return": "byte[]", "signature": "byte[] toJsonBytes(Object object)", "full_signature": "public byte[] toJsonBytes(Object object)", "class_method_signature": "JsonMapper.toJsonBytes(Object object)", "testcase": false, "constructor": false}, {"identifier": "toJsonBytes", "parameters": "(Object object, boolean throwIfError)", "modifiers": "public", "return": "byte[]", "signature": "byte[] toJsonBytes(Object object, boolean throwIfError)", "full_signature": "public byte[] toJsonBytes(Object object, boolean throwIfError)", "class_method_signature": "JsonMapper.toJsonBytes(Object object, boolean throwIfError)", "testcase": false, "constructor": false}, {"identifier": "readTree", "parameters": "(String content)", "modifiers": "public", "return": "JsonNode", "signature": "JsonNode readTree(String content)", "full_signature": "public JsonNode readTree(String content)", "class_method_signature": "JsonMapper.readTree(String content)", "testcase": false, "constructor": false}, {"identifier": "readTree", "parameters": "(InputStream in)", "modifiers": "public", "return": "JsonNode", "signature": "JsonNode readTree(InputStream in)", "full_signature": "public JsonNode readTree(InputStream in)", "class_method_signature": "JsonMapper.readTree(InputStream in)", "testcase": false, "constructor": false}, {"identifier": "toJsonPadding", "parameters": "(String function, Object object)", "modifiers": "public", "return": "String", "signature": "String toJsonPadding(String function, Object object)", "full_signature": "public String toJsonPadding(String function, Object object)", "class_method_signature": "JsonMapper.toJsonPadding(String function, Object object)", "testcase": false, "constructor": false}, {"identifier": "toJsonPadding", "parameters": "(Object object)", "modifiers": "public", "return": "String", "signature": "String toJsonPadding(Object object)", "full_signature": "public String toJsonPadding(Object object)", "class_method_signature": "JsonMapper.toJsonPadding(Object object)", "testcase": false, "constructor": false}, {"identifier": "fromJsonWith", "parameters": "(String json, Class<?> type, Class<?>...parameterTypes)", "modifiers": "public", "return": "T", "signature": "T fromJsonWith(String json, Class<?> type, Class<?>...parameterTypes)", "full_signature": "public T fromJsonWith(String json, Class<?> type, Class<?>...parameterTypes)", "class_method_signature": "JsonMapper.fromJsonWith(String json, Class<?> type, Class<?>...parameterTypes)", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(final Object json, Type objType)", "modifiers": "public", "return": "T", "signature": "T fromJson(final Object json, Type objType)", "full_signature": "public T fromJson(final Object json, Type objType)", "class_method_signature": "JsonMapper.fromJson(final Object json, Type objType)", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(final Object json, Type objType, boolean parseAsStringIfError)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "T", "signature": "T fromJson(final Object json, Type objType, boolean parseAsStringIfError)", "full_signature": "@SuppressWarnings(\"unchecked\") public T fromJson(final Object json, Type objType, boolean parseAsStringIfError)", "class_method_signature": "JsonMapper.fromJson(final Object json, Type objType, boolean parseAsStringIfError)", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(final Object json, TypeReference<T> valueTypeRef)", "modifiers": "public", "return": "T", "signature": "T fromJson(final Object json, TypeReference<T> valueTypeRef)", "full_signature": "public T fromJson(final Object json, TypeReference<T> valueTypeRef)", "class_method_signature": "JsonMapper.fromJson(final Object json, TypeReference<T> valueTypeRef)", "testcase": false, "constructor": false}, {"identifier": "constructJavaType", "parameters": "(Type objType)", "modifiers": "public", "return": "JavaType", "signature": "JavaType constructJavaType(Type objType)", "full_signature": "public JavaType constructJavaType(Type objType)", "class_method_signature": "JsonMapper.constructJavaType(Type objType)", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(InputStream in, Type objType)", "modifiers": "public", "return": "T", "signature": "T fromJson(InputStream in, Type objType)", "full_signature": "public T fromJson(InputStream in, Type objType)", "class_method_signature": "JsonMapper.fromJson(InputStream in, Type objType)", "testcase": false, "constructor": false}, {"identifier": "fromJsonAsArray", "parameters": "(String json, Class<T> objClass)", "modifiers": "public", "return": "T[]", "signature": "T[] fromJsonAsArray(String json, Class<T> objClass)", "full_signature": "public T[] fromJsonAsArray(String json, Class<T> objClass)", "class_method_signature": "JsonMapper.fromJsonAsArray(String json, Class<T> objClass)", "testcase": false, "constructor": false}, {"identifier": "fromJsonAsList", "parameters": "(String json)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "List<T>", "signature": "List<T> fromJsonAsList(String json)", "full_signature": "@SuppressWarnings(\"unchecked\") public List<T> fromJsonAsList(String json)", "class_method_signature": "JsonMapper.fromJsonAsList(String json)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(String jsonString, T object)", "modifiers": "public", "return": "T", "signature": "T update(String jsonString, T object)", "full_signature": "public T update(String jsonString, T object)", "class_method_signature": "JsonMapper.update(String jsonString, T object)", "testcase": false, "constructor": false}, {"identifier": "getObjectMapper", "parameters": "()", "modifiers": "public", "return": "ObjectMapper", "signature": "ObjectMapper getObjectMapper()", "full_signature": "public ObjectMapper getObjectMapper()", "class_method_signature": "JsonMapper.getObjectMapper()", "testcase": false, "constructor": false}], "file": "core/modules/jackson/src/main/java/org/onetwo/common/jackson/JsonMapper.java"}, "focal_method": {"identifier": "toJson", "parameters": "(Object object)", "modifiers": "public", "return": "String", "body": "public String toJson(Object object){\n\t\treturn toJson(object, true);\n\t}", "signature": "String toJson(Object object)", "full_signature": "public String toJson(Object object)", "class_method_signature": "JsonMapper.toJson(Object object)", "testcase": false, "constructor": false, "invocations": ["toJson"]}, "repository": {"repo_id": 47802308, "url": "https://github.com/wayshall/onetwo", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 16, "size": 57582, "license": "licensed"}}