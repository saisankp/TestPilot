{"test_class": {"identifier": "ElectronImpactSDBReactionTest", "superclass": "extends ReactionProcessTest", "interfaces": "", "fields": [{"original_string": "private IChemObjectBuilder builder = SilentChemObjectBuilder.getInstance();", "modifier": "private", "type": "IChemObjectBuilder", "declarator": "builder = SilentChemObjectBuilder.getInstance()", "var_name": "builder"}], "file": "base/reaction/src/test/java/org/openscience/cdk/reaction/type/ElectronImpactSDBReactionTest.java"}, "test_case": {"identifier": "testInitiate_IAtomContainerSet_IAtomContainerSet", "parameters": "()", "modifiers": "@Test @Override public", "return": "void", "body": "@Test\n    @Override\n    public void testInitiate_IAtomContainerSet_IAtomContainerSet() throws Exception {\n        /* ionize(>C-C<): C=CCC -> C=C* + C+ , set the reactive center */\n\n        IAtomContainerSet setOfReactants = getExampleReactants();\n        IAtomContainer reactant = setOfReactants.getAtomContainer(0);\n\n        Iterator<IBond> bonds = reactant.bonds().iterator();\n        while (bonds.hasNext()) {\n            IBond bond = (IBond) bonds.next();\n            IAtom atom1 = bond.getBegin();\n            IAtom atom2 = bond.getEnd();\n            if (bond.getOrder() == IBond.Order.SINGLE && atom1.getSymbol().equals(\"C\") && atom2.getSymbol().equals(\"C\")) {\n                bond.setFlag(CDKConstants.REACTIVE_CENTER, true);\n                atom1.setFlag(CDKConstants.REACTIVE_CENTER, true);\n                atom2.setFlag(CDKConstants.REACTIVE_CENTER, true);\n            }\n        }\n\n        Assert.assertEquals(0, reactant.getSingleElectronCount());\n\n        /* initiate */\n        IReactionProcess type = new ElectronImpactSDBReaction();\n        List<IParameterReact> paramList = new ArrayList<IParameterReact>();\n        IParameterReact param = new SetReactionCenter();\n        param.setParameter(Boolean.TRUE);\n        paramList.add(param);\n        type.setParameterList(paramList);\n        IReactionSet setOfReactions = type.initiate(setOfReactants, null);\n\n        Assert.assertEquals(2, setOfReactions.getReactionCount());\n        Assert.assertEquals(2, setOfReactions.getReaction(0).getProductCount());\n\n        IAtomContainer molecule1 = setOfReactions.getReaction(0).getProducts().getAtomContainer(0);//[H][C+]=C([H])[H]\n\n        Assert.assertEquals(1, molecule1.getAtom(1).getFormalCharge().intValue());\n        Assert.assertEquals(0, molecule1.getSingleElectronCount());\n\n        IAtomContainer molecule2 = setOfReactions.getReaction(0).getProducts().getAtomContainer(1);//[H][C*]([H])[H]\n\n        Assert.assertEquals(1, molecule2.getSingleElectronCount());\n        Assert.assertEquals(1, molecule2.getConnectedSingleElectronsCount(molecule2.getAtom(0)));\n\n        Assert.assertTrue(setOfReactions.getReaction(0).mappings().iterator().hasNext());\n\n        Assert.assertEquals(2, setOfReactions.getReaction(1).getProductCount());\n\n        molecule1 = setOfReactions.getReaction(1).getProducts().getAtomContainer(0);//[H]C=[C*]([H])[H]\n        Assert.assertEquals(1, molecule1.getConnectedSingleElectronsCount(molecule1.getAtom(1)));\n\n        molecule2 = setOfReactions.getReaction(1).getProducts().getAtomContainer(1);//[H][C+]([H])[H]\n\n        Assert.assertEquals(0, molecule2.getSingleElectronCount());\n        Assert.assertEquals(1, molecule2.getAtom(0).getFormalCharge().intValue());\n\n    }", "signature": "void testInitiate_IAtomContainerSet_IAtomContainerSet()", "full_signature": "@Test @Override public void testInitiate_IAtomContainerSet_IAtomContainerSet()", "class_method_signature": "ElectronImpactSDBReactionTest.testInitiate_IAtomContainerSet_IAtomContainerSet()", "testcase": true, "constructor": false, "invocations": ["getExampleReactants", "getAtomContainer", "iterator", "bonds", "hasNext", "next", "getBegin", "getEnd", "getOrder", "equals", "getSymbol", "equals", "getSymbol", "setFlag", "setFlag", "setFlag", "assertEquals", "getSingleElectronCount", "setParameter", "add", "setParameterList", "initiate", "assertEquals", "getReactionCount", "assertEquals", "getProductCount", "getReaction", "getAtomContainer", "getProducts", "getReaction", "assertEquals", "intValue", "getFormalCharge", "getAtom", "assertEquals", "getSingleElectronCount", "getAtomContainer", "getProducts", "getReaction", "assertEquals", "getSingleElectronCount", "assertEquals", "getConnectedSingleElectronsCount", "getAtom", "assertTrue", "hasNext", "iterator", "mappings", "getReaction", "assertEquals", "getProductCount", "getReaction", "getAtomContainer", "getProducts", "getReaction", "assertEquals", "getConnectedSingleElectronsCount", "getAtom", "getAtomContainer", "getProducts", "getReaction", "assertEquals", "getSingleElectronCount", "assertEquals", "intValue", "getFormalCharge", "getAtom"]}, "focal_class": {"identifier": "ElectronImpactSDBReaction", "superclass": "extends ReactionEngine", "interfaces": "implements IReactionProcess", "fields": [{"original_string": "private static ILoggingTool logger = LoggingToolFactory.createLoggingTool(ElectronImpactSDBReaction.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(ElectronImpactSDBReaction.class)", "var_name": "logger"}], "methods": [{"identifier": "ElectronImpactSDBReaction", "parameters": "()", "modifiers": "public", "return": "", "signature": " ElectronImpactSDBReaction()", "full_signature": "public  ElectronImpactSDBReaction()", "class_method_signature": "ElectronImpactSDBReaction.ElectronImpactSDBReaction()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "ReactionSpecification", "signature": "ReactionSpecification getSpecification()", "full_signature": "@Override public ReactionSpecification getSpecification()", "class_method_signature": "ElectronImpactSDBReaction.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "initiate", "parameters": "(IAtomContainerSet reactants, IAtomContainerSet agents)", "modifiers": "@Override public", "return": "IReactionSet", "signature": "IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "full_signature": "@Override public IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "class_method_signature": "ElectronImpactSDBReaction.initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "testcase": false, "constructor": false}, {"identifier": "setActiveCenters", "parameters": "(IAtomContainer reactant)", "modifiers": "private", "return": "void", "signature": "void setActiveCenters(IAtomContainer reactant)", "full_signature": "private void setActiveCenters(IAtomContainer reactant)", "class_method_signature": "ElectronImpactSDBReaction.setActiveCenters(IAtomContainer reactant)", "testcase": false, "constructor": false}], "file": "base/reaction/src/main/java/org/openscience/cdk/reaction/type/ElectronImpactSDBReaction.java"}, "focal_method": {"identifier": "initiate", "parameters": "(IAtomContainerSet reactants, IAtomContainerSet agents)", "modifiers": "@Override public", "return": "IReactionSet", "body": "@Override\n    public IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents) throws CDKException {\n\n        logger.debug(\"initiate reaction: ElectronImpactSDBReaction\");\n\n        if (reactants.getAtomContainerCount() != 1) {\n            throw new CDKException(\"ElectronImpactSDBReaction only expects one reactant\");\n        }\n        if (agents != null) {\n            throw new CDKException(\"ElectronImpactSDBReaction don't expects agents\");\n        }\n\n        IReactionSet setOfReactions = reactants.getBuilder().newInstance(IReactionSet.class);\n        IAtomContainer reactant = reactants.getAtomContainer(0);\n\n        /*\n         * if the parameter hasActiveCenter is not fixed yet, set the active\n         * centers\n         */\n        IParameterReact ipr = super.getParameterClass(SetReactionCenter.class);\n        if (ipr != null && !ipr.isSetParameter()) setActiveCenters(reactant);\n\n        Iterator<IBond> bonds = reactant.bonds().iterator();\n        while (bonds.hasNext()) {\n            IBond bondi = bonds.next();\n            IAtom atom1 = bondi.getBegin();\n            IAtom atom2 = bondi.getEnd();\n            if (bondi.getFlag(CDKConstants.REACTIVE_CENTER) && bondi.getOrder() == IBond.Order.SINGLE\n                    && atom1.getFlag(CDKConstants.REACTIVE_CENTER) && atom2.getFlag(CDKConstants.REACTIVE_CENTER)\n                    && (atom1.getFormalCharge() == CDKConstants.UNSET ? 0 : atom1.getFormalCharge()) == 0\n                    && (atom2.getFormalCharge() == CDKConstants.UNSET ? 0 : atom2.getFormalCharge()) == 0\n                    && reactant.getConnectedSingleElectronsCount(atom1) == 0\n                    && reactant.getConnectedSingleElectronsCount(atom2) == 0) {\n\n                /**/\n                for (int j = 0; j < 2; j++) {\n\n                    ArrayList<IAtom> atomList = new ArrayList<IAtom>();\n                    if (j == 0) {\n                        atomList.add(atom1);\n                        atomList.add(atom2);\n                    } else {\n                        atomList.add(atom2);\n                        atomList.add(atom1);\n                    }\n                    ArrayList<IBond> bondList = new ArrayList<IBond>();\n                    bondList.add(bondi);\n\n                    IAtomContainerSet moleculeSet = reactant.getBuilder().newInstance(IAtomContainerSet.class);\n                    moleculeSet.addAtomContainer(reactant);\n                    IReaction reaction = mechanism.initiate(moleculeSet, atomList, bondList);\n                    if (reaction == null)\n                        continue;\n                    else\n                        setOfReactions.addReaction(reaction);\n                }\n            }\n        }\n        return setOfReactions;\n\n    }", "signature": "IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "full_signature": "@Override public IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "class_method_signature": "ElectronImpactSDBReaction.initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "testcase": false, "constructor": false, "invocations": ["debug", "getAtomContainerCount", "newInstance", "getBuilder", "getAtomContainer", "getParameterClass", "isSetParameter", "setActiveCenters", "iterator", "bonds", "hasNext", "next", "getBegin", "getEnd", "getFlag", "getOrder", "getFlag", "getFlag", "getFormalCharge", "getFormalCharge", "getFormalCharge", "getFormalCharge", "getConnectedSingleElectronsCount", "getConnectedSingleElectronsCount", "add", "add", "add", "add", "add", "newInstance", "getBuilder", "addAtomContainer", "initiate", "addReaction"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}