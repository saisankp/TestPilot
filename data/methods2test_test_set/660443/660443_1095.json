{"test_class": {"identifier": "IsotopePatternTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [], "file": "tool/formula/src/test/java/org/openscience/cdk/formula/IsotopePatternTest.java"}, "test_case": {"identifier": "testClone", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testClone() throws Exception {\n        IsotopePattern spExp = new IsotopePattern();\n        spExp.setMonoIsotope(new IsotopeContainer(156.07770, 1));\n        spExp.addIsotope(new IsotopeContainer(157.07503, 0.0004));\n        spExp.addIsotope(new IsotopeContainer(157.08059, 0.0003));\n        spExp.addIsotope(new IsotopeContainer(158.08135, 0.002));\n        spExp.setCharge(1);\n\n        IsotopePattern clone = (IsotopePattern) spExp.clone();\n        Assert.assertEquals(156.07770, clone.getMonoIsotope().getMass(), 0.001);\n        Assert.assertEquals(156.07770, clone.getIsotopes().get(0).getMass(), 0.001);\n        Assert.assertEquals(157.07503, clone.getIsotopes().get(1).getMass(), 0.001);\n        Assert.assertEquals(157.08059, clone.getIsotopes().get(2).getMass(), 0.001);\n        Assert.assertEquals(158.08135, clone.getIsotopes().get(3).getMass(), 0.001);\n\n        Assert.assertEquals(1, clone.getMonoIsotope().getIntensity(), 0.001);\n        Assert.assertEquals(1, clone.getIsotopes().get(0).getIntensity(), 0.001);\n        Assert.assertEquals(0.0004, clone.getIsotopes().get(1).getIntensity(), 0.001);\n        Assert.assertEquals(0.0003, clone.getIsotopes().get(2).getIntensity(), 0.001);\n        Assert.assertEquals(0.002, clone.getIsotopes().get(3).getIntensity(), 0.001);\n\n        Assert.assertEquals(1, clone.getCharge(), 0.001);\n\n    }", "signature": "void testClone()", "full_signature": "@Test public void testClone()", "class_method_signature": "IsotopePatternTest.testClone()", "testcase": true, "constructor": false, "invocations": ["setMonoIsotope", "addIsotope", "addIsotope", "addIsotope", "setCharge", "clone", "assertEquals", "getMass", "getMonoIsotope", "assertEquals", "getMass", "get", "getIsotopes", "assertEquals", "getMass", "get", "getIsotopes", "assertEquals", "getMass", "get", "getIsotopes", "assertEquals", "getMass", "get", "getIsotopes", "assertEquals", "getIntensity", "getMonoIsotope", "assertEquals", "getIntensity", "get", "getIsotopes", "assertEquals", "getIntensity", "get", "getIsotopes", "assertEquals", "getIntensity", "get", "getIsotopes", "assertEquals", "getIntensity", "get", "getIsotopes", "assertEquals", "getCharge"]}, "focal_class": {"identifier": "IsotopePattern", "superclass": "", "interfaces": "", "fields": [{"original_string": "private List<IsotopeContainer> isotopeCList = new ArrayList<IsotopeContainer>();", "modifier": "private", "type": "List<IsotopeContainer>", "declarator": "isotopeCList = new ArrayList<IsotopeContainer>()", "var_name": "isotopeCList"}, {"original_string": "private int                    monoIsotopePosition;", "modifier": "private", "type": "int", "declarator": "monoIsotopePosition", "var_name": "monoIsotopePosition"}, {"original_string": "private double                 chargI       = 0;", "modifier": "private", "type": "double", "declarator": "chargI       = 0", "var_name": "chargI"}], "methods": [{"identifier": "IsotopePattern", "parameters": "()", "modifiers": "public", "return": "", "signature": " IsotopePattern()", "full_signature": "public  IsotopePattern()", "class_method_signature": "IsotopePattern.IsotopePattern()", "testcase": false, "constructor": true}, {"identifier": "setMonoIsotope", "parameters": "(IsotopeContainer isoContainer)", "modifiers": "public", "return": "void", "signature": "void setMonoIsotope(IsotopeContainer isoContainer)", "full_signature": "public void setMonoIsotope(IsotopeContainer isoContainer)", "class_method_signature": "IsotopePattern.setMonoIsotope(IsotopeContainer isoContainer)", "testcase": false, "constructor": false}, {"identifier": "addIsotope", "parameters": "(IsotopeContainer isoContainer)", "modifiers": "public", "return": "void", "signature": "void addIsotope(IsotopeContainer isoContainer)", "full_signature": "public void addIsotope(IsotopeContainer isoContainer)", "class_method_signature": "IsotopePattern.addIsotope(IsotopeContainer isoContainer)", "testcase": false, "constructor": false}, {"identifier": "getMonoIsotope", "parameters": "()", "modifiers": "public", "return": "IsotopeContainer", "signature": "IsotopeContainer getMonoIsotope()", "full_signature": "public IsotopeContainer getMonoIsotope()", "class_method_signature": "IsotopePattern.getMonoIsotope()", "testcase": false, "constructor": false}, {"identifier": "getIsotopes", "parameters": "()", "modifiers": "public", "return": "List<IsotopeContainer>", "signature": "List<IsotopeContainer> getIsotopes()", "full_signature": "public List<IsotopeContainer> getIsotopes()", "class_method_signature": "IsotopePattern.getIsotopes()", "testcase": false, "constructor": false}, {"identifier": "getIsotope", "parameters": "(int position)", "modifiers": "public", "return": "IsotopeContainer", "signature": "IsotopeContainer getIsotope(int position)", "full_signature": "public IsotopeContainer getIsotope(int position)", "class_method_signature": "IsotopePattern.getIsotope(int position)", "testcase": false, "constructor": false}, {"identifier": "getNumberOfIsotopes", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNumberOfIsotopes()", "full_signature": "public int getNumberOfIsotopes()", "class_method_signature": "IsotopePattern.getNumberOfIsotopes()", "testcase": false, "constructor": false}, {"identifier": "setCharge", "parameters": "(double charge)", "modifiers": "public", "return": "void", "signature": "void setCharge(double charge)", "full_signature": "public void setCharge(double charge)", "class_method_signature": "IsotopePattern.setCharge(double charge)", "testcase": false, "constructor": false}, {"identifier": "getCharge", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getCharge()", "full_signature": "public double getCharge()", "class_method_signature": "IsotopePattern.getCharge()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object clone()", "full_signature": "@Override public Object clone()", "class_method_signature": "IsotopePattern.clone()", "testcase": false, "constructor": false}], "file": "tool/formula/src/main/java/org/openscience/cdk/formula/IsotopePattern.java"}, "focal_method": {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object clone() throws CloneNotSupportedException {\n        IsotopePattern isoClone = new IsotopePattern();\n        IsotopeContainer isoHighest = getMonoIsotope();\n        for (IsotopeContainer isoContainer : isotopeCList) {\n            if (isoHighest.equals(isoContainer))\n                isoClone.setMonoIsotope((IsotopeContainer) isoContainer.clone());\n            else\n                isoClone.addIsotope((IsotopeContainer) isoContainer.clone());\n        }\n        isoClone.setCharge(getCharge());\n        return isoClone;\n    }", "signature": "Object clone()", "full_signature": "@Override public Object clone()", "class_method_signature": "IsotopePattern.clone()", "testcase": false, "constructor": false, "invocations": ["getMonoIsotope", "equals", "setMonoIsotope", "clone", "addIsotope", "clone", "setCharge", "getCharge"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}