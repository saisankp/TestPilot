{"test_class": {"identifier": "ReportConfigUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "List<LookoutMeasurement> measurements;", "modifier": "", "type": "List<LookoutMeasurement>", "declarator": "measurements", "var_name": "measurements"}], "file": "client/lookout-reg-server/src/test/java/com/alipay/lookout/remote/report/support/http/ReportConfigUtilTest.java"}, "test_case": {"identifier": "testFilterMeasures", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFilterMeasures() {\n        AddressService addressService = new DefaultAddressService();\n        DefaultHttpRequestProcessor p = new DefaultHttpRequestProcessor(addressService,\n            new LookoutConfig());\n        List<LookoutMeasurement> measurementList = p.filter(measurements);\n        Assert.assertEquals(measurements.size(), measurementList.size());\n    }", "signature": "void testFilterMeasures()", "full_signature": "@Test public void testFilterMeasures()", "class_method_signature": "ReportConfigUtilTest.testFilterMeasures()", "testcase": true, "constructor": false, "invocations": ["filter", "assertEquals", "size", "size"]}, "focal_class": {"identifier": "ReportConfigUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger          logger                       = LoggerFactory\n                                                                          .getLogger(ReportConfigUtil.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger                       = LoggerFactory\n                                                                          .getLogger(ReportConfigUtil.class)", "var_name": "logger"}, {"original_string": "public static final String           METRIC_NAME_PREFIX_WHITELIST = \"name_pre_wl\";", "modifier": "public static final", "type": "String", "declarator": "METRIC_NAME_PREFIX_WHITELIST = \"name_pre_wl\"", "var_name": "METRIC_NAME_PREFIX_WHITELIST"}, {"original_string": "public static final String           TAG_WHITELIST                = \"tag_wl\";", "modifier": "public static final", "type": "String", "declarator": "TAG_WHITELIST                = \"tag_wl\"", "var_name": "TAG_WHITELIST"}, {"original_string": "private ReportConfig                 reportConfig                 = EMPTY_CONFIG;", "modifier": "private", "type": "ReportConfig", "declarator": "reportConfig                 = EMPTY_CONFIG", "var_name": "reportConfig"}, {"original_string": "private volatile List<String>        metricNamePrefixWhitelist    = null;", "modifier": "private volatile", "type": "List<String>", "declarator": "metricNamePrefixWhitelist    = null", "var_name": "metricNamePrefixWhitelist"}, {"original_string": "private volatile Map<String, String> tagWhitelist                 = null;", "modifier": "private volatile", "type": "Map<String, String>", "declarator": "tagWhitelist                 = null", "var_name": "tagWhitelist"}, {"original_string": "private static final ReportConfig    EMPTY_CONFIG                 = new ReportConfig();", "modifier": "private static final", "type": "ReportConfig", "declarator": "EMPTY_CONFIG                 = new ReportConfig()", "var_name": "EMPTY_CONFIG"}, {"original_string": "private final ResultConsumer         configResultConsumer         = newResultConsumer();", "modifier": "private final", "type": "ResultConsumer", "declarator": "configResultConsumer         = newResultConsumer()", "var_name": "configResultConsumer"}], "methods": [{"identifier": "newResultConsumer", "parameters": "()", "modifiers": "private", "return": "ResultConsumer", "signature": "ResultConsumer newResultConsumer()", "full_signature": "private ResultConsumer newResultConsumer()", "class_method_signature": "ReportConfigUtil.newResultConsumer()", "testcase": false, "constructor": false}, {"identifier": "getConfigResultConsumer", "parameters": "()", "modifiers": "", "return": "ResultConsumer", "signature": "ResultConsumer getConfigResultConsumer()", "full_signature": " ResultConsumer getConfigResultConsumer()", "class_method_signature": "ReportConfigUtil.getConfigResultConsumer()", "testcase": false, "constructor": false}, {"identifier": "setReportConfig", "parameters": "(ReportConfig reportConfig)", "modifiers": "private synchronized", "return": "void", "signature": "void setReportConfig(ReportConfig reportConfig)", "full_signature": "private synchronized void setReportConfig(ReportConfig reportConfig)", "class_method_signature": "ReportConfigUtil.setReportConfig(ReportConfig reportConfig)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(List<LookoutMeasurement> measures)", "modifiers": "public", "return": "List<LookoutMeasurement>", "signature": "List<LookoutMeasurement> filter(List<LookoutMeasurement> measures)", "full_signature": "public List<LookoutMeasurement> filter(List<LookoutMeasurement> measures)", "class_method_signature": "ReportConfigUtil.filter(List<LookoutMeasurement> measures)", "testcase": false, "constructor": false}, {"identifier": "getReportConfig", "parameters": "()", "modifiers": "public", "return": "ReportConfig", "signature": "ReportConfig getReportConfig()", "full_signature": "public ReportConfig getReportConfig()", "class_method_signature": "ReportConfigUtil.getReportConfig()", "testcase": false, "constructor": false}, {"identifier": "buildMetricNamePrefixWhitelist", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void buildMetricNamePrefixWhitelist()", "full_signature": "private void buildMetricNamePrefixWhitelist()", "class_method_signature": "ReportConfigUtil.buildMetricNamePrefixWhitelist()", "testcase": false, "constructor": false}, {"identifier": "buildTagWhitelist", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void buildTagWhitelist()", "full_signature": "private void buildTagWhitelist()", "class_method_signature": "ReportConfigUtil.buildTagWhitelist()", "testcase": false, "constructor": false}], "file": "client/lookout-reg-server/src/main/java/com/alipay/lookout/remote/report/support/http/ReportConfigUtil.java"}, "focal_method": {"identifier": "filter", "parameters": "(List<LookoutMeasurement> measures)", "modifiers": "public", "return": "List<LookoutMeasurement>", "body": "public List<LookoutMeasurement> filter(List<LookoutMeasurement> measures) {\n        List<String> mnps = metricNamePrefixWhitelist;\n        Map<String, String> tagFilters = tagWhitelist;\n        if (mnps == null && tagFilters == null) {\n            return measures;\n        }\n        Iterator<LookoutMeasurement> it = measures.iterator();\n        while (it.hasNext()) {\n            boolean included = false;\n            LookoutMeasurement measurement = it.next();\n            if (mnps != null) {\n                for (String prefix : mnps) {\n                    if (measurement.metricId().name().startsWith(prefix)) {\n                        included = true;\n                        break;//\u7b26\u5408\u4e00\u4e2a\u6761\u4ef6\n                    }\n                }\n            }\n            if (!included && tagFilters != null) {\n                for (Map.Entry<String, String> e : tagFilters.entrySet()) {\n                    if (measurement.containsTag(e.getKey())\n                        && e.getValue().equals(measurement.getTags().get(e.getKey()))) {\n                        included = true;\n                        break;//\u7b26\u5408\u4e00\u4e2a\u6761\u4ef6\n                    }\n                }\n            }\n            if (!included) {\n                it.remove();\n            }\n        }\n        return measures;\n    }", "signature": "List<LookoutMeasurement> filter(List<LookoutMeasurement> measures)", "full_signature": "public List<LookoutMeasurement> filter(List<LookoutMeasurement> measures)", "class_method_signature": "ReportConfigUtil.filter(List<LookoutMeasurement> measures)", "testcase": false, "constructor": false, "invocations": ["iterator", "hasNext", "next", "startsWith", "name", "metricId", "entrySet", "containsTag", "getKey", "equals", "getValue", "get", "getTags", "getKey", "remove"]}, "repository": {"repo_id": 133381280, "url": "https://github.com/sofastack/sofa-lookout", "language": "Java", "is_fork": false, "fork_count": 113, "stargazer_count": 318, "size": 1394, "license": "licensed"}}