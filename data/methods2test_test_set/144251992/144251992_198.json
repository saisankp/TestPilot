{"test_class": {"identifier": "ScheduledJobExecutorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Captor\n    private ArgumentCaptor<ScheduledJobLog> jobLogArgumentCaptor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<ScheduledJobLog>", "declarator": "jobLogArgumentCaptor", "var_name": "jobLogArgumentCaptor"}, {"original_string": "@Mock\n    private ScheduledJobLogRepository jobLogRepoMock;", "modifier": "@Mock\n    private", "type": "ScheduledJobLogRepository", "declarator": "jobLogRepoMock", "var_name": "jobLogRepoMock"}, {"original_string": "@Mock\n    private ApplicationContext applicationContextMock;", "modifier": "@Mock\n    private", "type": "ApplicationContext", "declarator": "applicationContextMock", "var_name": "applicationContextMock"}, {"original_string": "@Mock\n    private ScheduledJob jobMock;", "modifier": "@Mock\n    private", "type": "ScheduledJob", "declarator": "jobMock", "var_name": "jobMock"}, {"original_string": "@Mock\n    private ScheduledJob otherJobMock;", "modifier": "@Mock\n    private", "type": "ScheduledJob", "declarator": "otherJobMock", "var_name": "otherJobMock"}, {"original_string": "private Clock clock;", "modifier": "private", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "private ScheduledJobExecutor scheduledJobExecutor;", "modifier": "private", "type": "ScheduledJobExecutor", "declarator": "scheduledJobExecutor", "var_name": "scheduledJobExecutor"}], "file": "backend/project-board/src/test/java/de/adesso/projectboard/base/scheduled/ScheduledJobExecutorTest.java"}, "test_case": {"identifier": "registerScheduledJobThrowsExceptionWhenIdentifierIsNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void registerScheduledJobThrowsExceptionWhenIdentifierIsNull() {\n        // given / when / then\n        assertThatThrownBy(() -> scheduledJobExecutor.registerScheduledJob(jobMock))\n                .isInstanceOf(IllegalArgumentException.class)\n                .hasMessage(\"A job's identifier can't be null!\");\n    }", "signature": "void registerScheduledJobThrowsExceptionWhenIdentifierIsNull()", "full_signature": "@Test public void registerScheduledJobThrowsExceptionWhenIdentifierIsNull()", "class_method_signature": "ScheduledJobExecutorTest.registerScheduledJobThrowsExceptionWhenIdentifierIsNull()", "testcase": true, "constructor": false, "invocations": ["hasMessage", "isInstanceOf", "assertThatThrownBy", "registerScheduledJob"]}, "focal_class": {"identifier": "ScheduledJobExecutor", "superclass": "", "interfaces": "implements ApplicationContextAware", "fields": [{"original_string": "private final ScheduledJobLogRepository jobLogRepo;", "modifier": "private final", "type": "ScheduledJobLogRepository", "declarator": "jobLogRepo", "var_name": "jobLogRepo"}, {"original_string": "private final Clock clock;", "modifier": "private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "final HashMap<ScheduledJob, String> scheduledJobIdMap;", "modifier": "final", "type": "HashMap<ScheduledJob, String>", "declarator": "scheduledJobIdMap", "var_name": "scheduledJobIdMap"}], "methods": [{"identifier": "ScheduledJobExecutor", "parameters": "(ScheduledJobLogRepository jobLogRepo, Clock clock)", "modifiers": "@Autowired public", "return": "", "signature": " ScheduledJobExecutor(ScheduledJobLogRepository jobLogRepo, Clock clock)", "full_signature": "@Autowired public  ScheduledJobExecutor(ScheduledJobLogRepository jobLogRepo, Clock clock)", "class_method_signature": "ScheduledJobExecutor.ScheduledJobExecutor(ScheduledJobLogRepository jobLogRepo, Clock clock)", "testcase": false, "constructor": true}, {"identifier": "executeJobs", "parameters": "()", "modifiers": "@Scheduled( initialDelay = 0L, fixedDelay = 120_000L ) public", "return": "void", "signature": "void executeJobs()", "full_signature": "@Scheduled( initialDelay = 0L, fixedDelay = 120_000L ) public void executeJobs()", "class_method_signature": "ScheduledJobExecutor.executeJobs()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(Callable<Void> callable, String jobIdentifier)", "modifiers": "", "return": "void", "signature": "void execute(Callable<Void> callable, String jobIdentifier)", "full_signature": " void execute(Callable<Void> callable, String jobIdentifier)", "class_method_signature": "ScheduledJobExecutor.execute(Callable<Void> callable, String jobIdentifier)", "testcase": false, "constructor": false}, {"identifier": "registerScheduledJob", "parameters": "(@NonNull ScheduledJob scheduledJob)", "modifiers": "public", "return": "void", "signature": "void registerScheduledJob(@NonNull ScheduledJob scheduledJob)", "full_signature": "public void registerScheduledJob(@NonNull ScheduledJob scheduledJob)", "class_method_signature": "ScheduledJobExecutor.registerScheduledJob(@NonNull ScheduledJob scheduledJob)", "testcase": false, "constructor": false}, {"identifier": "setApplicationContext", "parameters": "(ApplicationContext applicationContext)", "modifiers": "@Override public", "return": "void", "signature": "void setApplicationContext(ApplicationContext applicationContext)", "full_signature": "@Override public void setApplicationContext(ApplicationContext applicationContext)", "class_method_signature": "ScheduledJobExecutor.setApplicationContext(ApplicationContext applicationContext)", "testcase": false, "constructor": false}, {"identifier": "shouldAutoRegister", "parameters": "(ScheduledJob scheduledJob)", "modifiers": "", "return": "boolean", "signature": "boolean shouldAutoRegister(ScheduledJob scheduledJob)", "full_signature": " boolean shouldAutoRegister(ScheduledJob scheduledJob)", "class_method_signature": "ScheduledJobExecutor.shouldAutoRegister(ScheduledJob scheduledJob)", "testcase": false, "constructor": false}], "file": "backend/project-board/src/main/java/de/adesso/projectboard/base/scheduled/ScheduledJobExecutor.java"}, "focal_method": {"identifier": "registerScheduledJob", "parameters": "(@NonNull ScheduledJob scheduledJob)", "modifiers": "public", "return": "void", "body": "public void registerScheduledJob(@NonNull ScheduledJob scheduledJob) {\n        if(!scheduledJobIdMap.containsKey(scheduledJob)) {\n           var jobIdentifier = scheduledJob.getJobIdentifier();\n           if(Objects.isNull(jobIdentifier)) {\n               throw new IllegalArgumentException(\"A job's identifier can't be null!\");\n           }\n\n           var trimmedJobIdentifier = jobIdentifier.trim();\n           if(trimmedJobIdentifier.isEmpty()) {\n               throw new IllegalArgumentException(\"A job's identifier can't contain only whitespace!\");\n           }\n\n           if(scheduledJobIdMap.containsValue(trimmedJobIdentifier)) {\n               throw new IllegalStateException(String.format(\"Multiple scheduled jobs with the same job identifier '%s' found!\",\n                       trimmedJobIdentifier));\n           }\n\n           scheduledJobIdMap.put(scheduledJob, trimmedJobIdentifier);\n\n           log.debug(String.format(\"Added scheduled job (%s) with job identifier '%s'!\",\n                   scheduledJob.getClass().getName(),\n                   jobIdentifier));\n        }\n    }", "signature": "void registerScheduledJob(@NonNull ScheduledJob scheduledJob)", "full_signature": "public void registerScheduledJob(@NonNull ScheduledJob scheduledJob)", "class_method_signature": "ScheduledJobExecutor.registerScheduledJob(@NonNull ScheduledJob scheduledJob)", "testcase": false, "constructor": false, "invocations": ["containsKey", "getJobIdentifier", "isNull", "trim", "isEmpty", "containsValue", "format", "put", "debug", "format", "getName", "getClass"]}, "repository": {"repo_id": 144251992, "url": "https://github.com/adessoAG/project-board", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 2608, "license": "licensed"}}