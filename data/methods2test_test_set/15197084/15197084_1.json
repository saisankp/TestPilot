{"test_class": {"identifier": "OrElseTest", "superclass": "", "interfaces": "", "fields": [], "file": "reactfx/src/test/java/org/reactfx/value/OrElseTest.java"}, "test_case": {"identifier": "testInvalidationEfficiency", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInvalidationEfficiency() {\n        StringProperty s1 = new SimpleStringProperty(\"a\");\n        StringProperty s2 = new SimpleStringProperty(\"b\");\n        StringProperty s3 = new SimpleStringProperty(\"c\");\n\n        Val<String> firstNonNull = Val.orElse(s1, s2).orElse(s3);\n\n        Counter invalidationCounter = new Counter();\n        firstNonNull.addListener(obs -> invalidationCounter.inc());\n\n        assertEquals(0, invalidationCounter.get());\n\n        firstNonNull.getValue();\n        assertEquals(0, invalidationCounter.get());\n\n        s2.set(\"B\");\n        assertEquals(0, invalidationCounter.get());\n\n        s3.set(\"C\");\n        assertEquals(0, invalidationCounter.get());\n\n        s1.set(\"A\");\n        assertEquals(1, invalidationCounter.getAndReset());\n    }", "signature": "void testInvalidationEfficiency()", "full_signature": "@Test public void testInvalidationEfficiency()", "class_method_signature": "OrElseTest.testInvalidationEfficiency()", "testcase": true, "constructor": false, "invocations": ["orElse", "orElse", "addListener", "inc", "assertEquals", "get", "getValue", "assertEquals", "get", "set", "assertEquals", "get", "set", "assertEquals", "get", "set", "assertEquals", "getAndReset"]}, "focal_class": {"identifier": "OrElse", "superclass": "extends ValBase<T>", "interfaces": "", "fields": [{"original_string": "private final ObservableValue<? extends T> src;", "modifier": "private final", "type": "ObservableValue<? extends T>", "declarator": "src", "var_name": "src"}, {"original_string": "private final ObservableValue<? extends T> other;", "modifier": "private final", "type": "ObservableValue<? extends T>", "declarator": "other", "var_name": "other"}, {"original_string": "private boolean trySrc;", "modifier": "private", "type": "boolean", "declarator": "trySrc", "var_name": "trySrc"}], "methods": [{"identifier": "OrElse", "parameters": "(\n            ObservableValue<? extends T> src,\n            ObservableValue<? extends T> other)", "modifiers": "", "return": "", "signature": " OrElse(\n            ObservableValue<? extends T> src,\n            ObservableValue<? extends T> other)", "full_signature": "  OrElse(\n            ObservableValue<? extends T> src,\n            ObservableValue<? extends T> other)", "class_method_signature": "OrElse.OrElse(\n            ObservableValue<? extends T> src,\n            ObservableValue<? extends T> other)", "testcase": false, "constructor": true}, {"identifier": "connect", "parameters": "()", "modifiers": "@Override protected", "return": "Subscription", "signature": "Subscription connect()", "full_signature": "@Override protected Subscription connect()", "class_method_signature": "OrElse.connect()", "testcase": false, "constructor": false}, {"identifier": "computeValue", "parameters": "()", "modifiers": "@Override protected", "return": "T", "signature": "T computeValue()", "full_signature": "@Override protected T computeValue()", "class_method_signature": "OrElse.computeValue()", "testcase": false, "constructor": false}], "file": "reactfx/src/main/java/org/reactfx/value/OrElse.java"}, "focal_method": {"identifier": "OrElse", "parameters": "(\n            ObservableValue<? extends T> src,\n            ObservableValue<? extends T> other)", "modifiers": "", "return": "", "body": "OrElse(\n            ObservableValue<? extends T> src,\n            ObservableValue<? extends T> other) {\n        this.src = src;\n        this.other = other;\n    }", "signature": " OrElse(\n            ObservableValue<? extends T> src,\n            ObservableValue<? extends T> other)", "full_signature": "  OrElse(\n            ObservableValue<? extends T> src,\n            ObservableValue<? extends T> other)", "class_method_signature": "OrElse.OrElse(\n            ObservableValue<? extends T> src,\n            ObservableValue<? extends T> other)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 15197084, "url": "https://github.com/TomasMikula/ReactFX", "language": "Java", "is_fork": false, "fork_count": 42, "stargazer_count": 326, "size": 891, "license": "licensed"}}