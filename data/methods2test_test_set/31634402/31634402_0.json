{"test_class": {"identifier": "FluxBuilderTest", "superclass": "", "interfaces": "", "fields": [], "file": "flux-core/src/test/java/org/apache/storm/flux/FluxBuilderTest.java"}, "test_case": {"identifier": "testIsPrimitiveNumber", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsPrimitiveNumber() throws Exception {\n        assertTrue(FluxBuilder.isPrimitiveNumber(int.class));\n        assertFalse(FluxBuilder.isPrimitiveNumber(boolean.class));\n        assertFalse(FluxBuilder.isPrimitiveNumber(String.class));\n    }", "signature": "void testIsPrimitiveNumber()", "full_signature": "@Test public void testIsPrimitiveNumber()", "class_method_signature": "FluxBuilderTest.testIsPrimitiveNumber()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isPrimitiveNumber", "assertFalse", "isPrimitiveNumber", "assertFalse", "isPrimitiveNumber"]}, "focal_class": {"identifier": "FluxBuilder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger LOG = LoggerFactory.getLogger(FluxBuilder.class);", "modifier": "private static", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(FluxBuilder.class)", "var_name": "LOG"}], "methods": [{"identifier": "buildConfig", "parameters": "(TopologyDef topologyDef)", "modifiers": "public static", "return": "Config", "signature": "Config buildConfig(TopologyDef topologyDef)", "full_signature": "public static Config buildConfig(TopologyDef topologyDef)", "class_method_signature": "FluxBuilder.buildConfig(TopologyDef topologyDef)", "testcase": false, "constructor": false}, {"identifier": "buildTopology", "parameters": "(ExecutionContext context)", "modifiers": "static", "return": "StormTopology", "signature": "StormTopology buildTopology(ExecutionContext context)", "full_signature": "static StormTopology buildTopology(ExecutionContext context)", "class_method_signature": "FluxBuilder.buildTopology(ExecutionContext context)", "testcase": false, "constructor": false}, {"identifier": "findGetTopologyMethod", "parameters": "(Object topologySource, String methodName)", "modifiers": "private static", "return": "Method", "signature": "Method findGetTopologyMethod(Object topologySource, String methodName)", "full_signature": "private static Method findGetTopologyMethod(Object topologySource, String methodName)", "class_method_signature": "FluxBuilder.findGetTopologyMethod(Object topologySource, String methodName)", "testcase": false, "constructor": false}, {"identifier": "buildStreamDefinitions", "parameters": "(ExecutionContext context, TopologyBuilder builder)", "modifiers": "private static", "return": "void", "signature": "void buildStreamDefinitions(ExecutionContext context, TopologyBuilder builder)", "full_signature": "private static void buildStreamDefinitions(ExecutionContext context, TopologyBuilder builder)", "class_method_signature": "FluxBuilder.buildStreamDefinitions(ExecutionContext context, TopologyBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "applyProperties", "parameters": "(ObjectDef bean, Object instance, ExecutionContext context)", "modifiers": "private static", "return": "void", "signature": "void applyProperties(ObjectDef bean, Object instance, ExecutionContext context)", "full_signature": "private static void applyProperties(ObjectDef bean, Object instance, ExecutionContext context)", "class_method_signature": "FluxBuilder.applyProperties(ObjectDef bean, Object instance, ExecutionContext context)", "testcase": false, "constructor": false}, {"identifier": "findPublicField", "parameters": "(Class clazz, String property, Object arg)", "modifiers": "private static", "return": "Field", "signature": "Field findPublicField(Class clazz, String property, Object arg)", "full_signature": "private static Field findPublicField(Class clazz, String property, Object arg)", "class_method_signature": "FluxBuilder.findPublicField(Class clazz, String property, Object arg)", "testcase": false, "constructor": false}, {"identifier": "findSetter", "parameters": "(Class clazz, String property, Object arg)", "modifiers": "private static", "return": "Method", "signature": "Method findSetter(Class clazz, String property, Object arg)", "full_signature": "private static Method findSetter(Class clazz, String property, Object arg)", "class_method_signature": "FluxBuilder.findSetter(Class clazz, String property, Object arg)", "testcase": false, "constructor": false}, {"identifier": "toSetterName", "parameters": "(String name)", "modifiers": "private static", "return": "String", "signature": "String toSetterName(String name)", "full_signature": "private static String toSetterName(String name)", "class_method_signature": "FluxBuilder.toSetterName(String name)", "testcase": false, "constructor": false}, {"identifier": "resolveReferences", "parameters": "(List<Object> args, ExecutionContext context)", "modifiers": "private static", "return": "List<Object>", "signature": "List<Object> resolveReferences(List<Object> args, ExecutionContext context)", "full_signature": "private static List<Object> resolveReferences(List<Object> args, ExecutionContext context)", "class_method_signature": "FluxBuilder.resolveReferences(List<Object> args, ExecutionContext context)", "testcase": false, "constructor": false}, {"identifier": "buildObject", "parameters": "(ObjectDef def, ExecutionContext context)", "modifiers": "private static", "return": "Object", "signature": "Object buildObject(ObjectDef def, ExecutionContext context)", "full_signature": "private static Object buildObject(ObjectDef def, ExecutionContext context)", "class_method_signature": "FluxBuilder.buildObject(ObjectDef def, ExecutionContext context)", "testcase": false, "constructor": false}, {"identifier": "buildExternalTopology", "parameters": "(ObjectDef def, ExecutionContext context)", "modifiers": "private static", "return": "StormTopology", "signature": "StormTopology buildExternalTopology(ObjectDef def, ExecutionContext context)", "full_signature": "private static StormTopology buildExternalTopology(ObjectDef def, ExecutionContext context)", "class_method_signature": "FluxBuilder.buildExternalTopology(ObjectDef def, ExecutionContext context)", "testcase": false, "constructor": false}, {"identifier": "buildCustomStreamGrouping", "parameters": "(ObjectDef def, ExecutionContext context)", "modifiers": "private static", "return": "CustomStreamGrouping", "signature": "CustomStreamGrouping buildCustomStreamGrouping(ObjectDef def, ExecutionContext context)", "full_signature": "private static CustomStreamGrouping buildCustomStreamGrouping(ObjectDef def, ExecutionContext context)", "class_method_signature": "FluxBuilder.buildCustomStreamGrouping(ObjectDef def, ExecutionContext context)", "testcase": false, "constructor": false}, {"identifier": "buildComponents", "parameters": "(ExecutionContext context)", "modifiers": "private static", "return": "void", "signature": "void buildComponents(ExecutionContext context)", "full_signature": "private static void buildComponents(ExecutionContext context)", "class_method_signature": "FluxBuilder.buildComponents(ExecutionContext context)", "testcase": false, "constructor": false}, {"identifier": "buildSpouts", "parameters": "(ExecutionContext context, TopologyBuilder builder)", "modifiers": "private static", "return": "void", "signature": "void buildSpouts(ExecutionContext context, TopologyBuilder builder)", "full_signature": "private static void buildSpouts(ExecutionContext context, TopologyBuilder builder)", "class_method_signature": "FluxBuilder.buildSpouts(ExecutionContext context, TopologyBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "buildSpout", "parameters": "(SpoutDef def, ExecutionContext context)", "modifiers": "private static", "return": "IRichSpout", "signature": "IRichSpout buildSpout(SpoutDef def, ExecutionContext context)", "full_signature": "private static IRichSpout buildSpout(SpoutDef def, ExecutionContext context)", "class_method_signature": "FluxBuilder.buildSpout(SpoutDef def, ExecutionContext context)", "testcase": false, "constructor": false}, {"identifier": "buildBolts", "parameters": "(ExecutionContext context)", "modifiers": "private static", "return": "void", "signature": "void buildBolts(ExecutionContext context)", "full_signature": "private static void buildBolts(ExecutionContext context)", "class_method_signature": "FluxBuilder.buildBolts(ExecutionContext context)", "testcase": false, "constructor": false}, {"identifier": "findCompatibleConstructor", "parameters": "(List<Object> args, Class target)", "modifiers": "private static", "return": "Constructor", "signature": "Constructor findCompatibleConstructor(List<Object> args, Class target)", "full_signature": "private static Constructor findCompatibleConstructor(List<Object> args, Class target)", "class_method_signature": "FluxBuilder.findCompatibleConstructor(List<Object> args, Class target)", "testcase": false, "constructor": false}, {"identifier": "invokeConfigMethods", "parameters": "(ObjectDef bean, Object instance, ExecutionContext context)", "modifiers": "public static", "return": "void", "signature": "void invokeConfigMethods(ObjectDef bean, Object instance, ExecutionContext context)", "full_signature": "public static void invokeConfigMethods(ObjectDef bean, Object instance, ExecutionContext context)", "class_method_signature": "FluxBuilder.invokeConfigMethods(ObjectDef bean, Object instance, ExecutionContext context)", "testcase": false, "constructor": false}, {"identifier": "findCompatibleMethod", "parameters": "(List<Object> args, Class target, String methodName)", "modifiers": "private static", "return": "Method", "signature": "Method findCompatibleMethod(List<Object> args, Class target, String methodName)", "full_signature": "private static Method findCompatibleMethod(List<Object> args, Class target, String methodName)", "class_method_signature": "FluxBuilder.findCompatibleMethod(List<Object> args, Class target, String methodName)", "testcase": false, "constructor": false}, {"identifier": "getArgsWithListCoercian", "parameters": "(List<Object> args, Class[] parameterTypes)", "modifiers": "private static", "return": "Object[]", "signature": "Object[] getArgsWithListCoercian(List<Object> args, Class[] parameterTypes)", "full_signature": "private static Object[] getArgsWithListCoercian(List<Object> args, Class[] parameterTypes)", "class_method_signature": "FluxBuilder.getArgsWithListCoercian(List<Object> args, Class[] parameterTypes)", "testcase": false, "constructor": false}, {"identifier": "canInvokeWithArgs", "parameters": "(List<Object> args, Class[] parameterTypes)", "modifiers": "private static", "return": "boolean", "signature": "boolean canInvokeWithArgs(List<Object> args, Class[] parameterTypes)", "full_signature": "private static boolean canInvokeWithArgs(List<Object> args, Class[] parameterTypes)", "class_method_signature": "FluxBuilder.canInvokeWithArgs(List<Object> args, Class[] parameterTypes)", "testcase": false, "constructor": false}, {"identifier": "isPrimitiveNumber", "parameters": "(Class clazz)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPrimitiveNumber(Class clazz)", "full_signature": "public static boolean isPrimitiveNumber(Class clazz)", "class_method_signature": "FluxBuilder.isPrimitiveNumber(Class clazz)", "testcase": false, "constructor": false}], "file": "flux-core/src/main/java/org/apache/storm/flux/FluxBuilder.java"}, "focal_method": {"identifier": "isPrimitiveNumber", "parameters": "(Class clazz)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isPrimitiveNumber(Class clazz){\n        return clazz.isPrimitive() && !clazz.equals(boolean.class);\n    }", "signature": "boolean isPrimitiveNumber(Class clazz)", "full_signature": "public static boolean isPrimitiveNumber(Class clazz)", "class_method_signature": "FluxBuilder.isPrimitiveNumber(Class clazz)", "testcase": false, "constructor": false, "invocations": ["isPrimitive", "equals"]}, "repository": {"repo_id": 31634402, "url": "https://github.com/ptgoetz/flux", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 48, "size": 628, "license": "licensed"}}