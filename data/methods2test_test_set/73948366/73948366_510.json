{"test_class": {"identifier": "InstanceProviderManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PrivateKey privateKey = null;", "modifier": "private", "type": "PrivateKey", "declarator": "privateKey = null", "var_name": "privateKey"}, {"original_string": "private DataStore store = null;", "modifier": "private", "type": "DataStore", "declarator": "store = null", "var_name": "store"}, {"original_string": "private static final String ZTS_DATA_STORE_PATH = \"/tmp/zts_server_unit_tests/zts_root\";", "modifier": "private static final", "type": "String", "declarator": "ZTS_DATA_STORE_PATH = \"/tmp/zts_server_unit_tests/zts_root\"", "var_name": "ZTS_DATA_STORE_PATH"}, {"original_string": "private static final String ZTS_PRIVATE_KEY = \"src/test/resources/unit_test_zts_private.pem\";", "modifier": "private static final", "type": "String", "declarator": "ZTS_PRIVATE_KEY = \"src/test/resources/unit_test_zts_private.pem\"", "var_name": "ZTS_PRIVATE_KEY"}], "file": "servers/zts/src/test/java/com/yahoo/athenz/zts/InstanceProviderManagerTest.java"}, "test_case": {"identifier": "testGetHttpsProvider", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetHttpsProvider() throws NoSuchAlgorithmException {\n\n        SignedDomain signedDomain = createSignedDomainHttpsEndpoint(\"coretech\", \"weather\", true, true);\n        store.processDomain(signedDomain, false);\n        \n        InstanceProviderManager provider = new InstanceProviderManager(store, SSLContext.getDefault(), null);\n        InstanceProvider client = provider.getProvider(\"coretech.weather\", null);\n        assertNotNull(client);\n        client.close();\n    }", "signature": "void testGetHttpsProvider()", "full_signature": "@Test public void testGetHttpsProvider()", "class_method_signature": "InstanceProviderManagerTest.testGetHttpsProvider()", "testcase": true, "constructor": false, "invocations": ["createSignedDomainHttpsEndpoint", "processDomain", "getDefault", "getProvider", "assertNotNull", "close"]}, "focal_class": {"identifier": "InstanceProviderManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(InstanceProviderManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(InstanceProviderManager.class)", "var_name": "LOGGER"}, {"original_string": "private static final String SCHEME_HTTPS = \"https\";", "modifier": "private static final", "type": "String", "declarator": "SCHEME_HTTPS = \"https\"", "var_name": "SCHEME_HTTPS"}, {"original_string": "private static final String SCHEME_CLASS = \"class\";", "modifier": "private static final", "type": "String", "declarator": "SCHEME_CLASS = \"class\"", "var_name": "SCHEME_CLASS"}, {"original_string": "private ConcurrentHashMap<String, InstanceProvider> providerMap;", "modifier": "private", "type": "ConcurrentHashMap<String, InstanceProvider>", "declarator": "providerMap", "var_name": "providerMap"}, {"original_string": "private DataStore dataStore;", "modifier": "private", "type": "DataStore", "declarator": "dataStore", "var_name": "dataStore"}, {"original_string": "private KeyStore keyStore;", "modifier": "private", "type": "KeyStore", "declarator": "keyStore", "var_name": "keyStore"}, {"original_string": "private SSLContext sslContext;", "modifier": "private", "type": "SSLContext", "declarator": "sslContext", "var_name": "sslContext"}, {"original_string": "List<String> providerEndpoints = Collections.emptyList();", "modifier": "", "type": "List<String>", "declarator": "providerEndpoints = Collections.emptyList()", "var_name": "providerEndpoints"}], "methods": [{"identifier": "InstanceProviderManager", "parameters": "(DataStore dataStore, SSLContext sslContext, KeyStore keyStore)", "modifiers": "public", "return": "", "signature": " InstanceProviderManager(DataStore dataStore, SSLContext sslContext, KeyStore keyStore)", "full_signature": "public  InstanceProviderManager(DataStore dataStore, SSLContext sslContext, KeyStore keyStore)", "class_method_signature": "InstanceProviderManager.InstanceProviderManager(DataStore dataStore, SSLContext sslContext, KeyStore keyStore)", "testcase": false, "constructor": true}, {"identifier": "getProvider", "parameters": "(String provider, HostnameResolver hostnameResolver)", "modifiers": "", "return": "InstanceProvider", "signature": "InstanceProvider getProvider(String provider, HostnameResolver hostnameResolver)", "full_signature": " InstanceProvider getProvider(String provider, HostnameResolver hostnameResolver)", "class_method_signature": "InstanceProviderManager.getProvider(String provider, HostnameResolver hostnameResolver)", "testcase": false, "constructor": false}, {"identifier": "getClassProvider", "parameters": "(String className, String providerName, HostnameResolver hostnameResolver)", "modifiers": "", "return": "InstanceProvider", "signature": "InstanceProvider getClassProvider(String className, String providerName, HostnameResolver hostnameResolver)", "full_signature": " InstanceProvider getClassProvider(String className, String providerName, HostnameResolver hostnameResolver)", "class_method_signature": "InstanceProviderManager.getClassProvider(String className, String providerName, HostnameResolver hostnameResolver)", "testcase": false, "constructor": false}, {"identifier": "getProviderScheme", "parameters": "(URI uri)", "modifiers": "", "return": "ProviderScheme", "signature": "ProviderScheme getProviderScheme(URI uri)", "full_signature": " ProviderScheme getProviderScheme(URI uri)", "class_method_signature": "InstanceProviderManager.getProviderScheme(URI uri)", "testcase": false, "constructor": false}, {"identifier": "verifyProviderEndpoint", "parameters": "(String host)", "modifiers": "", "return": "boolean", "signature": "boolean verifyProviderEndpoint(String host)", "full_signature": " boolean verifyProviderEndpoint(String host)", "class_method_signature": "InstanceProviderManager.verifyProviderEndpoint(String host)", "testcase": false, "constructor": false}, {"identifier": "getProviderEndpointScheme", "parameters": "(URI uri)", "modifiers": "", "return": "ProviderScheme", "signature": "ProviderScheme getProviderEndpointScheme(URI uri)", "full_signature": " ProviderScheme getProviderEndpointScheme(URI uri)", "class_method_signature": "InstanceProviderManager.getProviderEndpointScheme(URI uri)", "testcase": false, "constructor": false}], "file": "servers/zts/src/main/java/com/yahoo/athenz/zts/InstanceProviderManager.java"}, "focal_method": {"identifier": "getProvider", "parameters": "(String provider, HostnameResolver hostnameResolver)", "modifiers": "", "return": "InstanceProvider", "body": "InstanceProvider getProvider(String provider, HostnameResolver hostnameResolver) {\n        int idx = provider.lastIndexOf('.');\n        if (idx == -1) {\n            LOGGER.error(\"getProviderClient: Invalid provider service name: {}\", provider);\n            return null;\n        }\n        \n        final String domainName = provider.substring(0, idx);\n        DataCache dataCache = dataStore.getDataCache(domainName);\n        if (dataCache == null) {\n            LOGGER.error(\"getProviderClient: Unknown domain: {}\", domainName);\n            return null;\n        }\n        \n        String providerEndpoint = null;\n        boolean validProviderName = false;\n        List<com.yahoo.athenz.zms.ServiceIdentity> services = dataCache.getDomainData().getServices();\n        if (services == null) {\n            LOGGER.error(\"getProviderClient: Unknown provider servicee: {}\", provider);\n            return null;\n        }\n        \n        for (com.yahoo.athenz.zms.ServiceIdentity service : services) {\n            if (service.getName().equals(provider)) {\n                providerEndpoint = service.getProviderEndpoint();\n                validProviderName = true;\n                break;\n            }\n        }\n\n        // if we don't have an endpoint then we have an invalid and/or no service\n        \n        if (providerEndpoint == null || providerEndpoint.isEmpty()) {\n            if (validProviderName) {\n                LOGGER.error(\"getProviderClient: Unknown provider service name: {}\",\n                        provider);\n            } else {\n                LOGGER.error(\"getProviderClient: Provider service {} does not have endpoint defined\",\n                        provider);\n            }\n            return null;\n        }\n\n        // before using our endpoint we need to make sure\n        // it's valid according to configuration settings\n        \n        InstanceProvider instanceProvider = null;\n        URI uri;\n        try {\n            uri = new URI(providerEndpoint);\n        } catch (URISyntaxException ex) {\n            LOGGER.error(\"getProviderClient: Unable to parse {}: {}\", providerEndpoint,\n                    ex.getMessage());\n            return null;\n        }\n        \n        ProviderScheme schemeType = getProviderEndpointScheme(uri);\n        switch (schemeType) {\n        case HTTPS:\n            instanceProvider = new InstanceHttpProvider();\n            instanceProvider.initialize(provider, providerEndpoint, sslContext, keyStore);\n            break;\n        case CLASS:\n            instanceProvider = getClassProvider(uri.getHost(), provider, hostnameResolver);\n            break;\n        default:\n            break;\n        }\n        \n        return instanceProvider;\n    }", "signature": "InstanceProvider getProvider(String provider, HostnameResolver hostnameResolver)", "full_signature": " InstanceProvider getProvider(String provider, HostnameResolver hostnameResolver)", "class_method_signature": "InstanceProviderManager.getProvider(String provider, HostnameResolver hostnameResolver)", "testcase": false, "constructor": false, "invocations": ["lastIndexOf", "error", "substring", "getDataCache", "error", "getServices", "getDomainData", "error", "equals", "getName", "getProviderEndpoint", "isEmpty", "error", "error", "error", "getMessage", "getProviderEndpointScheme", "initialize", "getClassProvider", "getHost"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}