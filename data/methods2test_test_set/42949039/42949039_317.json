{"test_class": {"identifier": "NamespaceSecurityHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private NamespaceSecurityHelper namespaceSecurityHelper;", "modifier": "private", "type": "NamespaceSecurityHelper", "declarator": "namespaceSecurityHelper", "var_name": "namespaceSecurityHelper"}], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/helper/NamespaceSecurityHelperTest.java"}, "test_case": {"identifier": "getAuthorizedNamespacesWhenUserHasPermissionAssertReturnNamespace", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getAuthorizedNamespacesWhenUserHasPermissionAssertReturnNamespace()\n    {\n        ApplicationUser applicationUser = new ApplicationUser(getClass());\n        applicationUser\n            .setNamespaceAuthorizations(new HashSet<>(Arrays.asList(new NamespaceAuthorization(\"namespace\", Arrays.asList(NamespacePermissionEnum.READ)))));\n        SecurityContextHolder.getContext().setAuthentication(\n            new TestingAuthenticationToken(new SecurityUserWrapper(\"username\", \"\", true, true, true, true, Collections.emptyList(), applicationUser), null));\n\n        Set<String> authorizedNamespaces = namespaceSecurityHelper.getAuthorizedNamespaces(NamespacePermissionEnum.READ);\n        assertEquals(1, authorizedNamespaces.size());\n        assertTrue(authorizedNamespaces.contains(\"namespace\"));\n    }", "signature": "void getAuthorizedNamespacesWhenUserHasPermissionAssertReturnNamespace()", "full_signature": "@Test public void getAuthorizedNamespacesWhenUserHasPermissionAssertReturnNamespace()", "class_method_signature": "NamespaceSecurityHelperTest.getAuthorizedNamespacesWhenUserHasPermissionAssertReturnNamespace()", "testcase": true, "constructor": false, "invocations": ["getClass", "setNamespaceAuthorizations", "asList", "asList", "setAuthentication", "getContext", "emptyList", "getAuthorizedNamespaces", "assertEquals", "size", "assertTrue", "contains"]}, "focal_class": {"identifier": "NamespaceSecurityHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(NamespaceSecurityHelper.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(NamespaceSecurityHelper.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "checkPermission", "parameters": "(Object object, NamespacePermissionEnum[] permissions)", "modifiers": "public", "return": "void", "signature": "void checkPermission(Object object, NamespacePermissionEnum[] permissions)", "full_signature": "public void checkPermission(Object object, NamespacePermissionEnum[] permissions)", "class_method_signature": "NamespaceSecurityHelper.checkPermission(Object object, NamespacePermissionEnum[] permissions)", "testcase": false, "constructor": false}, {"identifier": "checkPermission", "parameters": "(String namespace, NamespacePermissionEnum[] permissions)", "modifiers": "public", "return": "void", "signature": "void checkPermission(String namespace, NamespacePermissionEnum[] permissions)", "full_signature": "public void checkPermission(String namespace, NamespacePermissionEnum[] permissions)", "class_method_signature": "NamespaceSecurityHelper.checkPermission(String namespace, NamespacePermissionEnum[] permissions)", "testcase": false, "constructor": false}, {"identifier": "getAccessDeniedException", "parameters": "(List<AccessDeniedException> accessDeniedExceptions)", "modifiers": "public", "return": "AccessDeniedException", "signature": "AccessDeniedException getAccessDeniedException(List<AccessDeniedException> accessDeniedExceptions)", "full_signature": "public AccessDeniedException getAccessDeniedException(List<AccessDeniedException> accessDeniedExceptions)", "class_method_signature": "NamespaceSecurityHelper.getAccessDeniedException(List<AccessDeniedException> accessDeniedExceptions)", "testcase": false, "constructor": false}, {"identifier": "getAuthorizedNamespaces", "parameters": "(NamespacePermissionEnum... permissions)", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getAuthorizedNamespaces(NamespacePermissionEnum... permissions)", "full_signature": "public Set<String> getAuthorizedNamespaces(NamespacePermissionEnum... permissions)", "class_method_signature": "NamespaceSecurityHelper.getAuthorizedNamespaces(NamespacePermissionEnum... permissions)", "testcase": false, "constructor": false}, {"identifier": "isAuthorized", "parameters": "(ApplicationUser applicationUser, String namespace, NamespacePermissionEnum... permissions)", "modifiers": "private", "return": "boolean", "signature": "boolean isAuthorized(ApplicationUser applicationUser, String namespace, NamespacePermissionEnum... permissions)", "full_signature": "private boolean isAuthorized(ApplicationUser applicationUser, String namespace, NamespacePermissionEnum... permissions)", "class_method_signature": "NamespaceSecurityHelper.isAuthorized(ApplicationUser applicationUser, String namespace, NamespacePermissionEnum... permissions)", "testcase": false, "constructor": false}, {"identifier": "checkPermission", "parameters": "(Object object, NamespacePermissionEnum[] permissions, List<AccessDeniedException> accessDeniedExceptions)", "modifiers": "private", "return": "void", "signature": "void checkPermission(Object object, NamespacePermissionEnum[] permissions, List<AccessDeniedException> accessDeniedExceptions)", "full_signature": "private void checkPermission(Object object, NamespacePermissionEnum[] permissions, List<AccessDeniedException> accessDeniedExceptions)", "class_method_signature": "NamespaceSecurityHelper.checkPermission(Object object, NamespacePermissionEnum[] permissions, List<AccessDeniedException> accessDeniedExceptions)", "testcase": false, "constructor": false}, {"identifier": "getApplicationUser", "parameters": "()", "modifiers": "private", "return": "ApplicationUser", "signature": "ApplicationUser getApplicationUser()", "full_signature": "private ApplicationUser getApplicationUser()", "class_method_signature": "NamespaceSecurityHelper.getApplicationUser()", "testcase": false, "constructor": false}, {"identifier": "isAuthenticated", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isAuthenticated()", "full_signature": "private boolean isAuthenticated()", "class_method_signature": "NamespaceSecurityHelper.isAuthenticated()", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/helper/NamespaceSecurityHelper.java"}, "focal_method": {"identifier": "getAuthorizedNamespaces", "parameters": "(NamespacePermissionEnum... permissions)", "modifiers": "public", "return": "Set<String>", "body": "public Set<String> getAuthorizedNamespaces(NamespacePermissionEnum... permissions)\n    {\n        Set<String> namespaces = new HashSet<>();\n        if (SecurityContextHolder.getContext().getAuthentication() != null)\n        {\n            ApplicationUser applicationUser = getApplicationUser();\n            if (applicationUser != null)\n            {\n                for (NamespaceAuthorization namespaceAuthorization : applicationUser.getNamespaceAuthorizations())\n                {\n                    if (namespaceAuthorization.getNamespacePermissions().containsAll(Arrays.asList(permissions)))\n                    {\n                        namespaces.add(namespaceAuthorization.getNamespace());\n                    }\n                }\n            }\n        }\n        return namespaces;\n    }", "signature": "Set<String> getAuthorizedNamespaces(NamespacePermissionEnum... permissions)", "full_signature": "public Set<String> getAuthorizedNamespaces(NamespacePermissionEnum... permissions)", "class_method_signature": "NamespaceSecurityHelper.getAuthorizedNamespaces(NamespacePermissionEnum... permissions)", "testcase": false, "constructor": false, "invocations": ["getAuthentication", "getContext", "getApplicationUser", "getNamespaceAuthorizations", "containsAll", "getNamespacePermissions", "asList", "add", "getNamespace"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}