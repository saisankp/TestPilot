{"test_class": {"identifier": "UriBuilderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final String scheme = \"http\";", "modifier": "final", "type": "String", "declarator": "scheme = \"http\"", "var_name": "scheme"}, {"original_string": "final String host = \"www.nbb.be\";", "modifier": "final", "type": "String", "declarator": "host = \"www.nbb.be\"", "var_name": "host"}, {"original_string": "final SortedMap<String, String> query = ImmutableSortedMap.<String, String>naturalOrder()\n            .put(\"email\", \"contact@nbb.be\")\n            .put(\"*\", \"[1.2, 2.6]\")\n            .put(\"file\", \"C:\\\\Program Files\\\\data.xls\").build();", "modifier": "final", "type": "SortedMap<String, String>", "declarator": "query = ImmutableSortedMap.<String, String>naturalOrder()\n            .put(\"email\", \"contact@nbb.be\")\n            .put(\"*\", \"[1.2, 2.6]\")\n            .put(\"file\", \"C:\\\\Program Files\\\\data.xls\").build()", "var_name": "query"}, {"original_string": "final String[] path = {\"dq/rd\", \"demetra+\"};", "modifier": "final", "type": "String[]", "declarator": "path = {\"dq/rd\", \"demetra+\"}", "var_name": "path"}, {"original_string": "final String rawScheme = \"http\";", "modifier": "final", "type": "String", "declarator": "rawScheme = \"http\"", "var_name": "rawScheme"}, {"original_string": "final String rawHost = \"www.nbb.be\";", "modifier": "final", "type": "String", "declarator": "rawHost = \"www.nbb.be\"", "var_name": "rawHost"}, {"original_string": "final String rawPath = \"/dq%2Frd/demetra%2B\";", "modifier": "final", "type": "String", "declarator": "rawPath = \"/dq%2Frd/demetra%2B\"", "var_name": "rawPath"}, {"original_string": "final String rawQuery = \"*=%5B1.2%2C+2.6%5D&email=contact%40nbb.be&file=C%3A%5CProgram+Files%5Cdata.xls\";", "modifier": "final", "type": "String", "declarator": "rawQuery = \"*=%5B1.2%2C+2.6%5D&email=contact%40nbb.be&file=C%3A%5CProgram+Files%5Cdata.xls\"", "var_name": "rawQuery"}], "file": "jtss/src/test/java/ec/tss/tsproviders/utils/UriBuilderTest.java"}, "test_case": {"identifier": "testGetPathArray", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetPathArray() {\n        Assertions.assertThat(new UriBuilder(scheme, host).build()).satisfies(o -> {\n            Assertions.assertThat(UriBuilder.getPathArray(o, 0)).isNull();\n            Assertions.assertThat(UriBuilder.getPathArray(o, 1)).isNull();\n        });\n\n        Assertions.assertThat(new UriBuilder(scheme, host).path(path).build()).satisfies(o -> {\n            Assertions.assertThat(UriBuilder.getPathArray(o, 0)).isNull();\n            Assertions.assertThat(UriBuilder.getPathArray(o, 1)).isNull();\n            Assertions.assertThat(UriBuilder.getPathArray(o, 2)).containsExactly(path);\n            Assertions.assertThat(UriBuilder.getPathArray(o, 3)).isNull();\n        });\n    }", "signature": "void testGetPathArray()", "full_signature": "@Test public void testGetPathArray()", "class_method_signature": "UriBuilderTest.testGetPathArray()", "testcase": true, "constructor": false, "invocations": ["satisfies", "assertThat", "build", "isNull", "assertThat", "getPathArray", "isNull", "assertThat", "getPathArray", "satisfies", "assertThat", "build", "path", "isNull", "assertThat", "getPathArray", "isNull", "assertThat", "getPathArray", "containsExactly", "assertThat", "getPathArray", "isNull", "assertThat", "getPathArray"]}, "focal_class": {"identifier": "UriBuilder", "superclass": "", "interfaces": "implements IBuilder<URI>", "fields": [{"original_string": "private final String scheme;", "modifier": "private final", "type": "String", "declarator": "scheme", "var_name": "scheme"}, {"original_string": "private final String host;", "modifier": "private final", "type": "String", "declarator": "host", "var_name": "host"}, {"original_string": "private String[] path;", "modifier": "private", "type": "String[]", "declarator": "path", "var_name": "path"}, {"original_string": "private SortedMap<String, String> query;", "modifier": "private", "type": "SortedMap<String, String>", "declarator": "query", "var_name": "query"}, {"original_string": "private SortedMap<String, String> fragment;", "modifier": "private", "type": "SortedMap<String, String>", "declarator": "fragment", "var_name": "fragment"}, {"original_string": "private static final Splitter PATH_SPLITTER = Splitter.on('/');", "modifier": "private static final", "type": "Splitter", "declarator": "PATH_SPLITTER = Splitter.on('/')", "var_name": "PATH_SPLITTER"}, {"original_string": "private static final Splitter ENTRY_SPLITTER = Splitter.on('&');", "modifier": "private static final", "type": "Splitter", "declarator": "ENTRY_SPLITTER = Splitter.on('&')", "var_name": "ENTRY_SPLITTER"}, {"original_string": "private static final Splitter KEY_VALUE_SPLITTER = Splitter.on('=');", "modifier": "private static final", "type": "Splitter", "declarator": "KEY_VALUE_SPLITTER = Splitter.on('=')", "var_name": "KEY_VALUE_SPLITTER"}], "methods": [{"identifier": "UriBuilder", "parameters": "(@NonNull String scheme, @NonNull String host)", "modifiers": "public", "return": "", "signature": " UriBuilder(@NonNull String scheme, @NonNull String host)", "full_signature": "public  UriBuilder(@NonNull String scheme, @NonNull String host)", "class_method_signature": "UriBuilder.UriBuilder(@NonNull String scheme, @NonNull String host)", "testcase": false, "constructor": true}, {"identifier": "reset", "parameters": "()", "modifiers": "@NonNull public", "return": "UriBuilder", "signature": "UriBuilder reset()", "full_signature": "@NonNull public UriBuilder reset()", "class_method_signature": "UriBuilder.reset()", "testcase": false, "constructor": false}, {"identifier": "path", "parameters": "(@Nullable String... path)", "modifiers": "@NonNull public", "return": "UriBuilder", "signature": "UriBuilder path(@Nullable String... path)", "full_signature": "@NonNull public UriBuilder path(@Nullable String... path)", "class_method_signature": "UriBuilder.path(@Nullable String... path)", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "(@Nullable SortedMap<String, String> query)", "modifiers": "@NonNull public", "return": "UriBuilder", "signature": "UriBuilder query(@Nullable SortedMap<String, String> query)", "full_signature": "@NonNull public UriBuilder query(@Nullable SortedMap<String, String> query)", "class_method_signature": "UriBuilder.query(@Nullable SortedMap<String, String> query)", "testcase": false, "constructor": false}, {"identifier": "fragment", "parameters": "(@Nullable SortedMap<String, String> fragment)", "modifiers": "@NonNull public", "return": "UriBuilder", "signature": "UriBuilder fragment(@Nullable SortedMap<String, String> fragment)", "full_signature": "@NonNull public UriBuilder fragment(@Nullable SortedMap<String, String> fragment)", "class_method_signature": "UriBuilder.fragment(@Nullable SortedMap<String, String> fragment)", "testcase": false, "constructor": false}, {"identifier": "buildString", "parameters": "()", "modifiers": "@NonNull public", "return": "String", "signature": "String buildString()", "full_signature": "@NonNull public String buildString()", "class_method_signature": "UriBuilder.buildString()", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "()", "modifiers": "@Override public", "return": "URI", "signature": "URI build()", "full_signature": "@Override public URI build()", "class_method_signature": "UriBuilder.build()", "testcase": false, "constructor": false}, {"identifier": "decodeUrlUtf8", "parameters": "(String o)", "modifiers": "private static", "return": "String", "signature": "String decodeUrlUtf8(String o)", "full_signature": "private static String decodeUrlUtf8(String o)", "class_method_signature": "UriBuilder.decodeUrlUtf8(String o)", "testcase": false, "constructor": false}, {"identifier": "appendEntry", "parameters": "(@NonNull StringBuilder sb, @NonNull Entry<String, String> o, char sep)", "modifiers": "@NonNull private static", "return": "StringBuilder", "signature": "StringBuilder appendEntry(@NonNull StringBuilder sb, @NonNull Entry<String, String> o, char sep)", "full_signature": "@NonNull private static StringBuilder appendEntry(@NonNull StringBuilder sb, @NonNull Entry<String, String> o, char sep)", "class_method_signature": "UriBuilder.appendEntry(@NonNull StringBuilder sb, @NonNull Entry<String, String> o, char sep)", "testcase": false, "constructor": false}, {"identifier": "appendMap", "parameters": "(@NonNull StringBuilder sb, @NonNull Map<String, String> keyValues, char sep1, char sep2)", "modifiers": "@NonNull private static", "return": "StringBuilder", "signature": "StringBuilder appendMap(@NonNull StringBuilder sb, @NonNull Map<String, String> keyValues, char sep1, char sep2)", "full_signature": "@NonNull private static StringBuilder appendMap(@NonNull StringBuilder sb, @NonNull Map<String, String> keyValues, char sep1, char sep2)", "class_method_signature": "UriBuilder.appendMap(@NonNull StringBuilder sb, @NonNull Map<String, String> keyValues, char sep1, char sep2)", "testcase": false, "constructor": false}, {"identifier": "appendArray", "parameters": "(@NonNull StringBuilder sb, @NonNull String[] array, char sep)", "modifiers": "@NonNull private static", "return": "StringBuilder", "signature": "StringBuilder appendArray(@NonNull StringBuilder sb, @NonNull String[] array, char sep)", "full_signature": "@NonNull private static StringBuilder appendArray(@NonNull StringBuilder sb, @NonNull String[] array, char sep)", "class_method_signature": "UriBuilder.appendArray(@NonNull StringBuilder sb, @NonNull String[] array, char sep)", "testcase": false, "constructor": false}, {"identifier": "getPathArray", "parameters": "(@NonNull URI uri)", "modifiers": "@Nullable public static", "return": "String[]", "signature": "String[] getPathArray(@NonNull URI uri)", "full_signature": "@Nullable public static String[] getPathArray(@NonNull URI uri)", "class_method_signature": "UriBuilder.getPathArray(@NonNull URI uri)", "testcase": false, "constructor": false}, {"identifier": "getPathArray", "parameters": "(@NonNull URI uri, int expectedSize)", "modifiers": "@Nullable public static", "return": "String[]", "signature": "String[] getPathArray(@NonNull URI uri, int expectedSize)", "full_signature": "@Nullable public static String[] getPathArray(@NonNull URI uri, int expectedSize)", "class_method_signature": "UriBuilder.getPathArray(@NonNull URI uri, int expectedSize)", "testcase": false, "constructor": false}, {"identifier": "getQueryMap", "parameters": "(@NonNull URI uri)", "modifiers": "@Nullable public static", "return": "Map<String, String>", "signature": "Map<String, String> getQueryMap(@NonNull URI uri)", "full_signature": "@Nullable public static Map<String, String> getQueryMap(@NonNull URI uri)", "class_method_signature": "UriBuilder.getQueryMap(@NonNull URI uri)", "testcase": false, "constructor": false}, {"identifier": "getFragmentMap", "parameters": "(@NonNull URI uri)", "modifiers": "@Nullable public static", "return": "Map<String, String>", "signature": "Map<String, String> getFragmentMap(@NonNull URI uri)", "full_signature": "@Nullable public static Map<String, String> getFragmentMap(@NonNull URI uri)", "class_method_signature": "UriBuilder.getFragmentMap(@NonNull URI uri)", "testcase": false, "constructor": false}, {"identifier": "splitToArray", "parameters": "(@NonNull CharSequence input)", "modifiers": "@Nullable private static", "return": "String[]", "signature": "String[] splitToArray(@NonNull CharSequence input)", "full_signature": "@Nullable private static String[] splitToArray(@NonNull CharSequence input)", "class_method_signature": "UriBuilder.splitToArray(@NonNull CharSequence input)", "testcase": false, "constructor": false}, {"identifier": "splitToArray", "parameters": "(@NonNull CharSequence input, int expectedSize)", "modifiers": "@Nullable private static", "return": "String[]", "signature": "String[] splitToArray(@NonNull CharSequence input, int expectedSize)", "full_signature": "@Nullable private static String[] splitToArray(@NonNull CharSequence input, int expectedSize)", "class_method_signature": "UriBuilder.splitToArray(@NonNull CharSequence input, int expectedSize)", "testcase": false, "constructor": false}, {"identifier": "splitMap", "parameters": "(@NonNull CharSequence input)", "modifiers": "@Nullable private static", "return": "Map<String, String>", "signature": "Map<String, String> splitMap(@NonNull CharSequence input)", "full_signature": "@Nullable private static Map<String, String> splitMap(@NonNull CharSequence input)", "class_method_signature": "UriBuilder.splitMap(@NonNull CharSequence input)", "testcase": false, "constructor": false}, {"identifier": "splitMapTo", "parameters": "(@NonNull CharSequence input, @NonNull BiConsumer<String, String> consumer)", "modifiers": "private static", "return": "boolean", "signature": "boolean splitMapTo(@NonNull CharSequence input, @NonNull BiConsumer<String, String> consumer)", "full_signature": "private static boolean splitMapTo(@NonNull CharSequence input, @NonNull BiConsumer<String, String> consumer)", "class_method_signature": "UriBuilder.splitMapTo(@NonNull CharSequence input, @NonNull BiConsumer<String, String> consumer)", "testcase": false, "constructor": false}], "file": "jtss/src/main/java/ec/tss/tsproviders/utils/UriBuilder.java"}, "focal_method": {"identifier": "getPathArray", "parameters": "(@NonNull URI uri)", "modifiers": "@Nullable public static", "return": "String[]", "body": "@Nullable\n    public static String[] getPathArray(@NonNull URI uri) {\n        String path = uri.getRawPath();\n        return path != null && !path.isEmpty() ? splitToArray(path.subSequence(1, path.length())) : null;\n    }", "signature": "String[] getPathArray(@NonNull URI uri)", "full_signature": "@Nullable public static String[] getPathArray(@NonNull URI uri)", "class_method_signature": "UriBuilder.getPathArray(@NonNull URI uri)", "testcase": false, "constructor": false, "invocations": ["getRawPath", "isEmpty", "splitToArray", "subSequence", "length"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}