{"test_class": {"identifier": "CSVParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final CSVDataSetDef csvDataSet = (CSVDataSetDef) DataSetDefFactory.newCSVDataSetDef()\n            .separatorChar(',')\n            .quoteChar('\\'')\n            .escapeChar('\\\\')\n            .datePattern(\"YYYY-MM-dd\")\n            .numberPattern(\"##.##\")\n            .buildDef();", "modifier": "private final", "type": "CSVDataSetDef", "declarator": "csvDataSet = (CSVDataSetDef) DataSetDefFactory.newCSVDataSetDef()\n            .separatorChar(',')\n            .quoteChar('\\'')\n            .escapeChar('\\\\')\n            .datePattern(\"YYYY-MM-dd\")\n            .numberPattern(\"##.##\")\n            .buildDef()", "var_name": "csvDataSet"}], "file": "kie-soup-dataset/kie-soup-dataset-csv/src/test/java/org/dashbuilder/dataprovider/csv/CSVParserTest.java"}, "test_case": {"identifier": "exceptionThrown_whenFirstLineHasLessFieldsThanHeader", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void exceptionThrown_whenFirstLineHasLessFieldsThanHeader() throws Exception {\n        //Header with 2 fields, 1st row missing comma -> has only 1 field\n        final String CSV_DATA = \"'Name','Age'\\n'Jan''15'\";\n\n        CSVFileStorage mockStorage = new MockCSVFileStorage(CSV_DATA);\n        CSVParser testedParser = new CSVParser(csvDataSet, mockStorage);\n        try {\n            DataSet dataSetShouldNotLoad = testedParser.load();\n            Assert.fail(\"IllegalArgumentException should be thrown when 1st row of CSV data has less fields than the header\");\n        } catch (IllegalArgumentException iae) {\n            String expectedExceptionMessage = \"CSV parse error : The first row has fewer columns (1) than the header (2)\";\n            assertEquals(expectedExceptionMessage, iae.getMessage());\n        }\n    }", "signature": "void exceptionThrown_whenFirstLineHasLessFieldsThanHeader()", "full_signature": "@Test public void exceptionThrown_whenFirstLineHasLessFieldsThanHeader()", "class_method_signature": "CSVParserTest.exceptionThrown_whenFirstLineHasLessFieldsThanHeader()", "testcase": true, "constructor": false, "invocations": ["load", "fail", "assertEquals", "getMessage"]}, "focal_class": {"identifier": "CSVParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String DATE_FORMAT_EPOCH = \"epoch\";", "modifier": "public static final", "type": "String", "declarator": "DATE_FORMAT_EPOCH = \"epoch\"", "var_name": "DATE_FORMAT_EPOCH"}, {"original_string": "protected transient Map<String,DateFormat> _dateFormatMap = new HashMap<String,DateFormat>();", "modifier": "protected transient", "type": "Map<String,DateFormat>", "declarator": "_dateFormatMap = new HashMap<String,DateFormat>()", "var_name": "_dateFormatMap"}, {"original_string": "protected transient Map<String,DecimalFormat> _numberFormatMap = new HashMap<String,DecimalFormat>();", "modifier": "protected transient", "type": "Map<String,DecimalFormat>", "declarator": "_numberFormatMap = new HashMap<String,DecimalFormat>()", "var_name": "_numberFormatMap"}, {"original_string": "protected CSVDataSetDef dataSetDef;", "modifier": "protected", "type": "CSVDataSetDef", "declarator": "dataSetDef", "var_name": "dataSetDef"}, {"original_string": "protected CSVFileStorage csvStorage;", "modifier": "protected", "type": "CSVFileStorage", "declarator": "csvStorage", "var_name": "csvStorage"}], "methods": [{"identifier": "CSVParser", "parameters": "(CSVDataSetDef def, CSVFileStorage csvFileStorage)", "modifiers": "public", "return": "", "signature": " CSVParser(CSVDataSetDef def, CSVFileStorage csvFileStorage)", "full_signature": "public  CSVParser(CSVDataSetDef def, CSVFileStorage csvFileStorage)", "class_method_signature": "CSVParser.CSVParser(CSVDataSetDef def, CSVFileStorage csvFileStorage)", "testcase": false, "constructor": true}, {"identifier": "isColumnIncluded", "parameters": "(String columnId)", "modifiers": "protected", "return": "boolean", "signature": "boolean isColumnIncluded(String columnId)", "full_signature": "protected boolean isColumnIncluded(String columnId)", "class_method_signature": "CSVParser.isColumnIncluded(String columnId)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "()", "modifiers": "protected", "return": "DataSet", "signature": "DataSet load()", "full_signature": "protected DataSet load()", "class_method_signature": "CSVParser.load()", "testcase": false, "constructor": false}, {"identifier": "getCSVInputStream", "parameters": "()", "modifiers": "protected", "return": "InputStream", "signature": "InputStream getCSVInputStream()", "full_signature": "protected InputStream getCSVInputStream()", "class_method_signature": "CSVParser.getCSVInputStream()", "testcase": false, "constructor": false}, {"identifier": "calculateType", "parameters": "(String columnId, String value)", "modifiers": "protected", "return": "ColumnType", "signature": "ColumnType calculateType(String columnId, String value)", "full_signature": "protected ColumnType calculateType(String columnId, String value)", "class_method_signature": "CSVParser.calculateType(String columnId, String value)", "testcase": false, "constructor": false}, {"identifier": "canBeParsedAsNumber", "parameters": "(DecimalFormat parser, String value)", "modifiers": "protected", "return": "boolean", "signature": "boolean canBeParsedAsNumber(DecimalFormat parser, String value)", "full_signature": "protected boolean canBeParsedAsNumber(DecimalFormat parser, String value)", "class_method_signature": "CSVParser.canBeParsedAsNumber(DecimalFormat parser, String value)", "testcase": false, "constructor": false}, {"identifier": "_processLine", "parameters": "(DataSet dataSet, Object[] row, String[] line, List<Integer> columnIdxs)", "modifiers": "protected", "return": "void", "signature": "void _processLine(DataSet dataSet, Object[] row, String[] line, List<Integer> columnIdxs)", "full_signature": "protected void _processLine(DataSet dataSet, Object[] row, String[] line, List<Integer> columnIdxs)", "class_method_signature": "CSVParser._processLine(DataSet dataSet, Object[] row, String[] line, List<Integer> columnIdxs)", "testcase": false, "constructor": false}, {"identifier": "parseValue", "parameters": "(DataColumn column, String value)", "modifiers": "protected", "return": "Object", "signature": "Object parseValue(DataColumn column, String value)", "full_signature": "protected Object parseValue(DataColumn column, String value)", "class_method_signature": "CSVParser.parseValue(DataColumn column, String value)", "testcase": false, "constructor": false}, {"identifier": "getDateFormat", "parameters": "(String columnId)", "modifiers": "protected", "return": "DateFormat", "signature": "DateFormat getDateFormat(String columnId)", "full_signature": "protected DateFormat getDateFormat(String columnId)", "class_method_signature": "CSVParser.getDateFormat(String columnId)", "testcase": false, "constructor": false}, {"identifier": "getNumberFormat", "parameters": "(String columnId)", "modifiers": "protected", "return": "DecimalFormat", "signature": "DecimalFormat getNumberFormat(String columnId)", "full_signature": "protected DecimalFormat getNumberFormat(String columnId)", "class_method_signature": "CSVParser.getNumberFormat(String columnId)", "testcase": false, "constructor": false}], "file": "kie-soup-dataset/kie-soup-dataset-csv/src/main/java/org/dashbuilder/dataprovider/csv/CSVParser.java"}, "focal_method": {"identifier": "load", "parameters": "()", "modifiers": "protected", "return": "DataSet", "body": "protected DataSet load() throws Exception {\n        InputStream is = getCSVInputStream();\n        try {\n            BufferedReader br = new BufferedReader(new InputStreamReader(is));\n            CSVReader csvReader = new CSVReader(br, dataSetDef.getSeparatorChar(), dataSetDef.getQuoteChar(), dataSetDef.getEscapeChar());\n\n            String[] header = csvReader.readNext();\n            if (header == null) throw new IOException(\"CSV has no header: \" + dataSetDef);\n\n            String[] firstRow = csvReader.readNext();\n            if (firstRow != null && firstRow.length < header.length) {\n                String exceptionMessage = String.format(\"CSV parse error : The first row has fewer columns (%d) than the header (%d)\"\n                        , firstRow.length, header.length);\n                // Fail fast - see DASHBUILDE-172\n                throw new IllegalArgumentException(exceptionMessage);\n            }\n\n            // Build the data set structure\n            List<Integer> _columnIdxs = new ArrayList<Integer>();\n            DataSet dataSet = DataSetFactory.newEmptyDataSet();\n            for (int i = 0; i < header.length; i++) {\n                String columnId = header[i];\n                if (isColumnIncluded(columnId)) {\n                    ColumnType type = ColumnType.LABEL;\n                    if (firstRow != null) type = calculateType(columnId, firstRow[i]);\n                    dataSet.addColumn(columnId, type);\n                    _columnIdxs.add(i);\n                }\n            }\n\n            // Load & insert the CSV rows\n            if (firstRow != null) {\n                Object[] _rowArray = new Object[dataSet.getColumns().size()];\n                _processLine(dataSet, _rowArray, firstRow, _columnIdxs);\n                dataSet.setValuesAt(dataSet.getRowCount(), _rowArray);\n                String[] _line = csvReader.readNext();\n                while (_line != null && _line.length == header.length) {\n                    _processLine(dataSet,_rowArray, _line, _columnIdxs);\n                    dataSet.setValuesAt(dataSet.getRowCount(), _rowArray);\n                    _line = csvReader.readNext();\n                }\n            }\n            return dataSet;\n        } finally {\n            is.close();\n        }\n    }", "signature": "DataSet load()", "full_signature": "protected DataSet load()", "class_method_signature": "CSVParser.load()", "testcase": false, "constructor": false, "invocations": ["getCSVInputStream", "getSeparatorChar", "getQuoteChar", "getEscapeChar", "readNext", "readNext", "format", "newEmptyDataSet", "isColumnIncluded", "calculateType", "addColumn", "add", "size", "getColumns", "_processLine", "setValuesAt", "getRowCount", "readNext", "_processLine", "setValuesAt", "getRowCount", "readNext", "close"]}, "repository": {"repo_id": 103437385, "url": "https://github.com/kiegroup/kie-soup", "stars": 11, "created": "9/13/2017 6:41:37 PM +00:00", "updates": "2020-01-21T13:07:53+00:00", "fork": "False", "license": "licensed"}}