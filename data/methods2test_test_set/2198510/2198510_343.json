{"test_class": {"identifier": "TestLog4jAppender", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AvroSource source;", "modifier": "private", "type": "AvroSource", "declarator": "source", "var_name": "source"}, {"original_string": "private Channel ch;", "modifier": "private", "type": "Channel", "declarator": "ch", "var_name": "ch"}, {"original_string": "private Properties props;", "modifier": "private", "type": "Properties", "declarator": "props", "var_name": "props"}], "file": "flume-ng-clients/flume-ng-log4jappender/src/test/java/org/apache/flume/clients/log4jappender/TestLog4jAppender.java"}, "test_case": {"identifier": "testLog4jAppender", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testLog4jAppender() throws IOException {\n    configureSource();\n    PropertyConfigurator.configure(props);\n    Logger logger = LogManager.getLogger(TestLog4jAppender.class);\n    for (int count = 0; count <= 1000; count++) {\n      /*\n       * Log4j internally defines levels as multiples of 10000. So if we\n       * create levels directly using count, the level will be set as the\n       * default.\n       */\n      int level = ((count % 5) + 1) * 10000;\n      String msg = \"This is log message number\" + String.valueOf(count);\n\n      logger.log(Level.toLevel(level), msg);\n      Transaction transaction = ch.getTransaction();\n      transaction.begin();\n      Event event = ch.take();\n      Assert.assertNotNull(event);\n      Assert.assertEquals(new String(event.getBody(), \"UTF8\"), msg);\n\n      Map<String, String> hdrs = event.getHeaders();\n\n      Assert.assertNotNull(hdrs.get(Log4jAvroHeaders.TIMESTAMP.toString()));\n\n      Assert.assertEquals(Level.toLevel(level),\n          Level.toLevel(Integer.valueOf(hdrs.get(Log4jAvroHeaders.LOG_LEVEL\n              .toString()))\n          ));\n      Assert.assertNotNull(hdrs.get(Log4jAvroHeaders.ADDRESS.toString()));\n\n      Assert.assertEquals(logger.getName(),\n          hdrs.get(Log4jAvroHeaders.LOGGER_NAME.toString()));\n\n      Assert.assertEquals(\"UTF8\",\n          hdrs.get(Log4jAvroHeaders.MESSAGE_ENCODING.toString()));\n      transaction.commit();\n      transaction.close();\n    }\n  }", "signature": "void testLog4jAppender()", "full_signature": "@Test public void testLog4jAppender()", "class_method_signature": "TestLog4jAppender.testLog4jAppender()", "testcase": true, "constructor": false, "invocations": ["configureSource", "configure", "getLogger", "valueOf", "log", "toLevel", "getTransaction", "begin", "take", "assertNotNull", "assertEquals", "getBody", "getHeaders", "assertNotNull", "get", "toString", "assertEquals", "toLevel", "toLevel", "valueOf", "get", "toString", "assertNotNull", "get", "toString", "assertEquals", "getName", "get", "toString", "assertEquals", "get", "toString", "commit", "close"]}, "focal_class": {"identifier": "Log4jAppender", "superclass": "extends AppenderSkeleton", "interfaces": "", "fields": [{"original_string": "private String hostname;", "modifier": "private", "type": "String", "declarator": "hostname", "var_name": "hostname"}, {"original_string": "private int port;", "modifier": "private", "type": "int", "declarator": "port", "var_name": "port"}, {"original_string": "private boolean unsafeMode = false;", "modifier": "private", "type": "boolean", "declarator": "unsafeMode = false", "var_name": "unsafeMode"}, {"original_string": "private long timeout = RpcClientConfigurationConstants.DEFAULT_REQUEST_TIMEOUT_MILLIS;", "modifier": "private", "type": "long", "declarator": "timeout = RpcClientConfigurationConstants.DEFAULT_REQUEST_TIMEOUT_MILLIS", "var_name": "timeout"}, {"original_string": "private boolean avroReflectionEnabled;", "modifier": "private", "type": "boolean", "declarator": "avroReflectionEnabled", "var_name": "avroReflectionEnabled"}, {"original_string": "private String avroSchemaUrl;", "modifier": "private", "type": "String", "declarator": "avroSchemaUrl", "var_name": "avroSchemaUrl"}, {"original_string": "private String clientAddress = \"\";", "modifier": "private", "type": "String", "declarator": "clientAddress = \"\"", "var_name": "clientAddress"}, {"original_string": "RpcClient rpcClient = null;", "modifier": "", "type": "RpcClient", "declarator": "rpcClient = null", "var_name": "rpcClient"}, {"original_string": "private Schema schema;", "modifier": "private", "type": "Schema", "declarator": "schema", "var_name": "schema"}, {"original_string": "private ByteArrayOutputStream out;", "modifier": "private", "type": "ByteArrayOutputStream", "declarator": "out", "var_name": "out"}, {"original_string": "private DatumWriter<Object> writer;", "modifier": "private", "type": "DatumWriter<Object>", "declarator": "writer", "var_name": "writer"}, {"original_string": "private BinaryEncoder encoder;", "modifier": "private", "type": "BinaryEncoder", "declarator": "encoder", "var_name": "encoder"}], "methods": [{"identifier": "Log4jAppender", "parameters": "()", "modifiers": "public", "return": "", "signature": " Log4jAppender()", "full_signature": "public  Log4jAppender()", "class_method_signature": "Log4jAppender.Log4jAppender()", "testcase": false, "constructor": true}, {"identifier": "Log4jAppender", "parameters": "(String hostname, int port)", "modifiers": "public", "return": "", "signature": " Log4jAppender(String hostname, int port)", "full_signature": "public  Log4jAppender(String hostname, int port)", "class_method_signature": "Log4jAppender.Log4jAppender(String hostname, int port)", "testcase": false, "constructor": true}, {"identifier": "append", "parameters": "(LoggingEvent event)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void append(LoggingEvent event)", "full_signature": "@Override public synchronized void append(LoggingEvent event)", "class_method_signature": "Log4jAppender.append(LoggingEvent event)", "testcase": false, "constructor": false}, {"identifier": "parseEvents", "parameters": "(LoggingEvent loggingEvent)", "modifiers": "private", "return": "List<Event>", "signature": "List<Event> parseEvents(LoggingEvent loggingEvent)", "full_signature": "private List<Event> parseEvents(LoggingEvent loggingEvent)", "class_method_signature": "Log4jAppender.parseEvents(LoggingEvent loggingEvent)", "testcase": false, "constructor": false}, {"identifier": "populateAvroHeaders", "parameters": "(Map<String, String> hdrs, Schema schema)", "modifiers": "protected", "return": "void", "signature": "void populateAvroHeaders(Map<String, String> hdrs, Schema schema)", "full_signature": "protected void populateAvroHeaders(Map<String, String> hdrs, Schema schema)", "class_method_signature": "Log4jAppender.populateAvroHeaders(Map<String, String> hdrs, Schema schema)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "(Object datum, Schema datumSchema)", "modifiers": "private", "return": "byte[]", "signature": "byte[] serialize(Object datum, Schema datumSchema)", "full_signature": "private byte[] serialize(Object datum, Schema datumSchema)", "class_method_signature": "Log4jAppender.serialize(Object datum, Schema datumSchema)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void close()", "full_signature": "@Override public synchronized void close()", "class_method_signature": "Log4jAppender.close()", "testcase": false, "constructor": false}, {"identifier": "requiresLayout", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean requiresLayout()", "full_signature": "@Override public boolean requiresLayout()", "class_method_signature": "Log4jAppender.requiresLayout()", "testcase": false, "constructor": false}, {"identifier": "setHostname", "parameters": "(String hostname)", "modifiers": "public", "return": "void", "signature": "void setHostname(String hostname)", "full_signature": "public void setHostname(String hostname)", "class_method_signature": "Log4jAppender.setHostname(String hostname)", "testcase": false, "constructor": false}, {"identifier": "setPort", "parameters": "(int port)", "modifiers": "public", "return": "void", "signature": "void setPort(int port)", "full_signature": "public void setPort(int port)", "class_method_signature": "Log4jAppender.setPort(int port)", "testcase": false, "constructor": false}, {"identifier": "setUnsafeMode", "parameters": "(boolean unsafeMode)", "modifiers": "public", "return": "void", "signature": "void setUnsafeMode(boolean unsafeMode)", "full_signature": "public void setUnsafeMode(boolean unsafeMode)", "class_method_signature": "Log4jAppender.setUnsafeMode(boolean unsafeMode)", "testcase": false, "constructor": false}, {"identifier": "getUnsafeMode", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getUnsafeMode()", "full_signature": "public boolean getUnsafeMode()", "class_method_signature": "Log4jAppender.getUnsafeMode()", "testcase": false, "constructor": false}, {"identifier": "setTimeout", "parameters": "(long timeout)", "modifiers": "public", "return": "void", "signature": "void setTimeout(long timeout)", "full_signature": "public void setTimeout(long timeout)", "class_method_signature": "Log4jAppender.setTimeout(long timeout)", "testcase": false, "constructor": false}, {"identifier": "getTimeout", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getTimeout()", "full_signature": "public long getTimeout()", "class_method_signature": "Log4jAppender.getTimeout()", "testcase": false, "constructor": false}, {"identifier": "setAvroReflectionEnabled", "parameters": "(boolean avroReflectionEnabled)", "modifiers": "public", "return": "void", "signature": "void setAvroReflectionEnabled(boolean avroReflectionEnabled)", "full_signature": "public void setAvroReflectionEnabled(boolean avroReflectionEnabled)", "class_method_signature": "Log4jAppender.setAvroReflectionEnabled(boolean avroReflectionEnabled)", "testcase": false, "constructor": false}, {"identifier": "setAvroSchemaUrl", "parameters": "(String avroSchemaUrl)", "modifiers": "public", "return": "void", "signature": "void setAvroSchemaUrl(String avroSchemaUrl)", "full_signature": "public void setAvroSchemaUrl(String avroSchemaUrl)", "class_method_signature": "Log4jAppender.setAvroSchemaUrl(String avroSchemaUrl)", "testcase": false, "constructor": false}, {"identifier": "activateOptions", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void activateOptions()", "full_signature": "@Override public void activateOptions()", "class_method_signature": "Log4jAppender.activateOptions()", "testcase": false, "constructor": false}, {"identifier": "initializeClientAddress", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void initializeClientAddress()", "full_signature": "protected void initializeClientAddress()", "class_method_signature": "Log4jAppender.initializeClientAddress()", "testcase": false, "constructor": false}, {"identifier": "reconnect", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void reconnect()", "full_signature": "private void reconnect()", "class_method_signature": "Log4jAppender.reconnect()", "testcase": false, "constructor": false}], "file": "flume-ng-clients/flume-ng-log4jappender/src/main/java/org/apache/flume/clients/log4jappender/Log4jAppender.java"}, "focal_method": {"identifier": "Log4jAppender", "parameters": "()", "modifiers": "public", "return": "", "body": "public Log4jAppender() {\n  }", "signature": " Log4jAppender()", "full_signature": "public  Log4jAppender()", "class_method_signature": "Log4jAppender.Log4jAppender()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}