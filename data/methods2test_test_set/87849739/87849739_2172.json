{"test_class": {"identifier": "ThingLiveCommandAckRequestSetterTest", "superclass": "", "interfaces": "", "fields": [], "file": "signals/commands/things/src/test/java/org/eclipse/ditto/signals/commands/things/acks/ThingLiveCommandAckRequestSetterTest.java"}, "test_case": {"identifier": "removeLiveResponseAckLabelIfNoResponseRequired", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void removeLiveResponseAckLabelIfNoResponseRequired() {\n        final DittoHeaders dittoHeaders = DittoHeaders.newBuilder()\n                .channel(\"live\")\n                .responseRequired(false)\n                .acknowledgementRequest(AcknowledgementRequest.of(DittoAcknowledgementLabel.LIVE_RESPONSE))\n                .randomCorrelationId()\n                .build();\n        final CreateThing command = CreateThing.of(Thing.newBuilder().build(), null, dittoHeaders);\n        final ThingLiveCommandAckRequestSetter underTest = ThingLiveCommandAckRequestSetter.getInstance();\n\n        final DittoHeaders expectedHeaders = dittoHeaders.toBuilder()\n                .acknowledgementRequests(Collections.emptyList())\n                .build();\n        final CreateThing expectedCommand = command.setDittoHeaders(expectedHeaders);\n\n        assertThat(underTest.apply(command)).isEqualTo(expectedCommand);\n    }", "signature": "void removeLiveResponseAckLabelIfNoResponseRequired()", "full_signature": "@Test public void removeLiveResponseAckLabelIfNoResponseRequired()", "class_method_signature": "ThingLiveCommandAckRequestSetterTest.removeLiveResponseAckLabelIfNoResponseRequired()", "testcase": true, "constructor": false, "invocations": ["build", "randomCorrelationId", "acknowledgementRequest", "responseRequired", "channel", "newBuilder", "of", "of", "build", "newBuilder", "getInstance", "build", "acknowledgementRequests", "toBuilder", "emptyList", "setDittoHeaders", "isEqualTo", "assertThat", "apply"]}, "focal_class": {"identifier": "ThingLiveCommandAckRequestSetter", "superclass": "extends AbstractCommandAckRequestSetter<ThingCommand<?>>", "interfaces": "", "fields": [{"original_string": "private static final ThingLiveCommandAckRequestSetter INSTANCE = new ThingLiveCommandAckRequestSetter();", "modifier": "private static final", "type": "ThingLiveCommandAckRequestSetter", "declarator": "INSTANCE = new ThingLiveCommandAckRequestSetter()", "var_name": "INSTANCE"}], "methods": [{"identifier": "ThingLiveCommandAckRequestSetter", "parameters": "()", "modifiers": "private", "return": "", "signature": " ThingLiveCommandAckRequestSetter()", "full_signature": "private  ThingLiveCommandAckRequestSetter()", "class_method_signature": "ThingLiveCommandAckRequestSetter.ThingLiveCommandAckRequestSetter()", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "ThingLiveCommandAckRequestSetter", "signature": "ThingLiveCommandAckRequestSetter getInstance()", "full_signature": "public static ThingLiveCommandAckRequestSetter getInstance()", "class_method_signature": "ThingLiveCommandAckRequestSetter.getInstance()", "testcase": false, "constructor": false}, {"identifier": "isApplicable", "parameters": "(final ThingCommand<?> command)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isApplicable(final ThingCommand<?> command)", "full_signature": "@Override public boolean isApplicable(final ThingCommand<?> command)", "class_method_signature": "ThingLiveCommandAckRequestSetter.isApplicable(final ThingCommand<?> command)", "testcase": false, "constructor": false}, {"identifier": "getMatchedClass", "parameters": "()", "modifiers": "@Override @SuppressWarnings({\"unchecked\", \"rawtypes\"}) public", "return": "Class<ThingCommand<?>>", "signature": "Class<ThingCommand<?>> getMatchedClass()", "full_signature": "@Override @SuppressWarnings({\"unchecked\", \"rawtypes\"}) public Class<ThingCommand<?>> getMatchedClass()", "class_method_signature": "ThingLiveCommandAckRequestSetter.getMatchedClass()", "testcase": false, "constructor": false}, {"identifier": "isBindResponseRequiredToAddingRemovingImplicitLabel", "parameters": "()", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean isBindResponseRequiredToAddingRemovingImplicitLabel()", "full_signature": "@Override protected boolean isBindResponseRequiredToAddingRemovingImplicitLabel()", "class_method_signature": "ThingLiveCommandAckRequestSetter.isBindResponseRequiredToAddingRemovingImplicitLabel()", "testcase": false, "constructor": false}], "file": "signals/commands/things/src/main/java/org/eclipse/ditto/signals/commands/things/acks/ThingLiveCommandAckRequestSetter.java"}, "focal_method": {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "ThingLiveCommandAckRequestSetter", "body": "public static ThingLiveCommandAckRequestSetter getInstance() {\n        return INSTANCE;\n    }", "signature": "ThingLiveCommandAckRequestSetter getInstance()", "full_signature": "public static ThingLiveCommandAckRequestSetter getInstance()", "class_method_signature": "ThingLiveCommandAckRequestSetter.getInstance()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}