{"test_class": {"identifier": "SocketIoAdapterTest", "superclass": "", "interfaces": "", "fields": [], "file": "socket.io-server/src/test/java/io/socket/socketio/server/SocketIoAdapterTest.java"}, "test_case": {"identifier": "test_broadcast", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_broadcast() {\n        final SocketIoAdapter adapter = Mockito.spy(new SocketIoAdapter(null) {\n            @Override\n            public void broadcast(Packet packet, String[] rooms, String[] socketsExcluded) throws IllegalArgumentException {\n            }\n\n            @Override\n            public void add(String room, SocketIoSocket socket) throws IllegalArgumentException {\n            }\n\n            @Override\n            public void remove(String room, SocketIoSocket socket) throws IllegalArgumentException {\n            }\n\n            @Override\n            public SocketIoSocket[] listClients(String room) throws IllegalArgumentException {\n                return new SocketIoSocket[0];\n            }\n\n            @Override\n            public String[] listClientRooms(SocketIoSocket socket) throws IllegalArgumentException {\n                return new String[0];\n            }\n        });\n        Mockito.doCallRealMethod().when(adapter)\n                .broadcast(Mockito.any(Packet.class), Mockito.any(String[].class));\n        Mockito.doAnswer(invocationOnMock -> null)\n                .when(adapter)\n                .broadcast(Mockito.any(Packet.class), Mockito.any(String[].class), Mockito.any(String[].class));\n\n        adapter.broadcast(new Packet(Parser.CONNECT), null);\n        Mockito.verify(adapter, Mockito.times(1))\n                .broadcast(Mockito.any(Packet.class), Mockito.<String[]>isNull(), Mockito.isNull());\n    }", "signature": "void test_broadcast()", "full_signature": "@Test public void test_broadcast()", "class_method_signature": "SocketIoAdapterTest.test_broadcast()", "testcase": true, "constructor": false, "invocations": ["spy", "broadcast", "when", "doCallRealMethod", "any", "any", "broadcast", "when", "doAnswer", "any", "any", "any", "broadcast", "broadcast", "verify", "times", "any", "isNull", "isNull"]}, "focal_class": {"identifier": "SocketIoAdapter", "superclass": "extends Emitter", "interfaces": "", "fields": [{"original_string": "protected final SocketIoNamespace mNamespace;", "modifier": "protected final", "type": "SocketIoNamespace", "declarator": "mNamespace", "var_name": "mNamespace"}, {"original_string": "protected final Map<String, Set<SocketIoSocket>> mRoomSockets = new ConcurrentHashMap<>();", "modifier": "protected final", "type": "Map<String, Set<SocketIoSocket>>", "declarator": "mRoomSockets = new ConcurrentHashMap<>()", "var_name": "mRoomSockets"}, {"original_string": "protected final Map<String, HashSet<String>> mSocketRooms = new ConcurrentHashMap<>();", "modifier": "protected final", "type": "Map<String, HashSet<String>>", "declarator": "mSocketRooms = new ConcurrentHashMap<>()", "var_name": "mSocketRooms"}], "methods": [{"identifier": "SocketIoAdapter", "parameters": "(SocketIoNamespace namespace)", "modifiers": "protected", "return": "", "signature": " SocketIoAdapter(SocketIoNamespace namespace)", "full_signature": "protected  SocketIoAdapter(SocketIoNamespace namespace)", "class_method_signature": "SocketIoAdapter.SocketIoAdapter(SocketIoNamespace namespace)", "testcase": false, "constructor": true}, {"identifier": "broadcast", "parameters": "(Packet packet, String[] rooms)", "modifiers": "public", "return": "void", "signature": "void broadcast(Packet packet, String[] rooms)", "full_signature": "public void broadcast(Packet packet, String[] rooms)", "class_method_signature": "SocketIoAdapter.broadcast(Packet packet, String[] rooms)", "testcase": false, "constructor": false}, {"identifier": "broadcast", "parameters": "(Packet packet, String[] rooms, String[] socketsExcluded)", "modifiers": "public abstract", "return": "void", "signature": "void broadcast(Packet packet, String[] rooms, String[] socketsExcluded)", "full_signature": "public abstract void broadcast(Packet packet, String[] rooms, String[] socketsExcluded)", "class_method_signature": "SocketIoAdapter.broadcast(Packet packet, String[] rooms, String[] socketsExcluded)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(String room, SocketIoSocket socket)", "modifiers": "public abstract", "return": "void", "signature": "void add(String room, SocketIoSocket socket)", "full_signature": "public abstract void add(String room, SocketIoSocket socket)", "class_method_signature": "SocketIoAdapter.add(String room, SocketIoSocket socket)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(String room, SocketIoSocket socket)", "modifiers": "public abstract", "return": "void", "signature": "void remove(String room, SocketIoSocket socket)", "full_signature": "public abstract void remove(String room, SocketIoSocket socket)", "class_method_signature": "SocketIoAdapter.remove(String room, SocketIoSocket socket)", "testcase": false, "constructor": false}, {"identifier": "listClients", "parameters": "(String room)", "modifiers": "public abstract", "return": "SocketIoSocket[]", "signature": "SocketIoSocket[] listClients(String room)", "full_signature": "public abstract SocketIoSocket[] listClients(String room)", "class_method_signature": "SocketIoAdapter.listClients(String room)", "testcase": false, "constructor": false}, {"identifier": "listClientRooms", "parameters": "(SocketIoSocket socket)", "modifiers": "public abstract", "return": "String[]", "signature": "String[] listClientRooms(SocketIoSocket socket)", "full_signature": "public abstract String[] listClientRooms(SocketIoSocket socket)", "class_method_signature": "SocketIoAdapter.listClientRooms(SocketIoSocket socket)", "testcase": false, "constructor": false}], "file": "socket.io-server/src/main/java/io/socket/socketio/server/SocketIoAdapter.java"}, "focal_method": {"identifier": "broadcast", "parameters": "(Packet packet, String[] rooms)", "modifiers": "public", "return": "void", "body": "public void broadcast(Packet packet, String[] rooms) throws IllegalArgumentException {\n        broadcast(packet, rooms, null);\n    }", "signature": "void broadcast(Packet packet, String[] rooms)", "full_signature": "public void broadcast(Packet packet, String[] rooms)", "class_method_signature": "SocketIoAdapter.broadcast(Packet packet, String[] rooms)", "testcase": false, "constructor": false, "invocations": ["broadcast"]}, "repository": {"repo_id": 144740389, "url": "https://github.com/trinopoty/socket.io-server-java", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 16, "size": 1069, "license": "licensed"}}