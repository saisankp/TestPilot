{"test_class": {"identifier": "CVTReconstructionTest", "superclass": "", "interfaces": "", "fields": [], "file": "reconstruction/cvt/src/test/java/org/jlab/rec/cvt/services/CVTReconstructionTest.java"}, "test_case": {"identifier": "testCVTReconstruction", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCVTReconstruction() {\n        \n        System.setProperty(\"CLAS12DIR\", \"../../\");\n       \n        String mapDir = CLASResources.getResourcePath(\"etc\")+\"/data/magfield\";\n        try {\n            MagneticFields.getInstance().initializeMagneticFields(mapDir,\n                    \"Symm_torus_r2501_phi16_z251_24Apr2018.dat\",\"Symm_solenoid_r601_phi1_z1201_13June2018.dat\");\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        \n        String dir = ClasUtilsFile.getResourceDir(\"CLAS12DIR\", \"etc/bankdefs/hipo4\");\n        SchemaFactory schemaFactory = new SchemaFactory();\n        schemaFactory.initFromDirectory(dir);\n    \n        DataEvent testEvent = TestEvent.getCVTTestEvent(schemaFactory);\n\n        MagFieldsEngine enf = new MagFieldsEngine();\n        enf.init();\n        enf.processDataEvent(testEvent);\n        \n        CVTReconstruction CVTengine = new CVTReconstruction();\n        CVTengine.init();\n        \n        testEvent.show();\n        CVTengine.processDataEvent(testEvent);\n        testEvent.show();\n        EBHBEngine EBHBengine = new EBHBEngine();\n        EBHBengine.init();\n        EBHBengine.processDataEvent(testEvent);\n\n        EBTBEngine EBTBengine = new EBTBEngine();\n        EBTBengine.init();\n        EBTBengine.processDataEvent(testEvent);\n\n        assertEquals(testEvent.hasBank(\"REC::Particle\"), true);\n        assertEquals(testEvent.getBank(\"REC::Particle\").rows(), 1);\n        assertEquals(testEvent.getBank(\"REC::Particle\").getByte(\"charge\", 0), 1);\n        assertEquals(ClasMath.isWithinXPercent(10.0, testEvent.getBank(\"REC::Particle\").getFloat(\"px\", 0), 1.9504), true);\n        assertEquals(ClasMath.isWithinXPercent(10.0, testEvent.getBank(\"REC::Particle\").getFloat(\"py\", 0), 0.2741), true);\n        assertEquals(ClasMath.isWithinXPercent(10.0, testEvent.getBank(\"REC::Particle\").getFloat(\"pz\", 0), 0.3473), true);\n        assertEquals(ClasMath.isWithinXPercent(30.0, testEvent.getBank(\"REC::Particle\").getFloat(\"vz\", 0), -1.95444), true); \n\n    }", "signature": "void testCVTReconstruction()", "full_signature": "@Test public void testCVTReconstruction()", "class_method_signature": "CVTReconstructionTest.testCVTReconstruction()", "testcase": true, "constructor": false, "invocations": ["setProperty", "getResourcePath", "initializeMagneticFields", "getInstance", "printStackTrace", "getResourceDir", "initFromDirectory", "getCVTTestEvent", "init", "processDataEvent", "init", "show", "processDataEvent", "show", "init", "processDataEvent", "init", "processDataEvent", "assertEquals", "hasBank", "assertEquals", "rows", "getBank", "assertEquals", "getByte", "getBank", "assertEquals", "isWithinXPercent", "getFloat", "getBank", "assertEquals", "isWithinXPercent", "getFloat", "getBank", "assertEquals", "isWithinXPercent", "getFloat", "getBank", "assertEquals", "isWithinXPercent", "getFloat", "getBank"]}, "focal_class": {"identifier": "CVTReconstruction", "superclass": "extends ReconstructionEngine", "interfaces": "", "fields": [{"original_string": "org.jlab.rec.cvt.svt.Geometry SVTGeom;", "modifier": "", "type": "org.jlab.rec.cvt.svt.Geometry", "declarator": "SVTGeom", "var_name": "SVTGeom"}, {"original_string": "org.jlab.rec.cvt.bmt.Geometry BMTGeom;", "modifier": "", "type": "org.jlab.rec.cvt.bmt.Geometry", "declarator": "BMTGeom", "var_name": "BMTGeom"}, {"original_string": "CTOFGeant4Factory CTOFGeom;", "modifier": "", "type": "CTOFGeant4Factory", "declarator": "CTOFGeom", "var_name": "CTOFGeom"}, {"original_string": "Detector          CNDGeom ;", "modifier": "", "type": "Detector", "declarator": "CNDGeom", "var_name": "CNDGeom"}, {"original_string": "SVTStripFactory svtIdealStripFactory;", "modifier": "", "type": "SVTStripFactory", "declarator": "svtIdealStripFactory", "var_name": "svtIdealStripFactory"}, {"original_string": "String FieldsConfig = \"\";", "modifier": "", "type": "String", "declarator": "FieldsConfig = \"\"", "var_name": "FieldsConfig"}, {"original_string": "int Run = -1;", "modifier": "", "type": "int", "declarator": "Run = -1", "var_name": "Run"}, {"original_string": "private String variationName;", "modifier": "private", "type": "String", "declarator": "variationName", "var_name": "variationName"}], "methods": [{"identifier": "CVTReconstruction", "parameters": "()", "modifiers": "public", "return": "", "signature": " CVTReconstruction()", "full_signature": "public  CVTReconstruction()", "class_method_signature": "CVTReconstruction.CVTReconstruction()", "testcase": false, "constructor": true}, {"identifier": "setRunConditionsParameters", "parameters": "(DataEvent event, String FieldsConfig, int iRun, boolean addMisAlignmts, String misAlgnFile)", "modifiers": "public", "return": "void", "signature": "void setRunConditionsParameters(DataEvent event, String FieldsConfig, int iRun, boolean addMisAlignmts, String misAlgnFile)", "full_signature": "public void setRunConditionsParameters(DataEvent event, String FieldsConfig, int iRun, boolean addMisAlignmts, String misAlgnFile)", "class_method_signature": "CVTReconstruction.setRunConditionsParameters(DataEvent event, String FieldsConfig, int iRun, boolean addMisAlignmts, String misAlgnFile)", "testcase": false, "constructor": false}, {"identifier": "getRun", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRun()", "full_signature": "public int getRun()", "class_method_signature": "CVTReconstruction.getRun()", "testcase": false, "constructor": false}, {"identifier": "setRun", "parameters": "(int run)", "modifiers": "public", "return": "void", "signature": "void setRun(int run)", "full_signature": "public void setRun(int run)", "class_method_signature": "CVTReconstruction.setRun(int run)", "testcase": false, "constructor": false}, {"identifier": "getFieldsConfig", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFieldsConfig()", "full_signature": "public String getFieldsConfig()", "class_method_signature": "CVTReconstruction.getFieldsConfig()", "testcase": false, "constructor": false}, {"identifier": "setFieldsConfig", "parameters": "(String fieldsConfig)", "modifiers": "public", "return": "void", "signature": "void setFieldsConfig(String fieldsConfig)", "full_signature": "public void setFieldsConfig(String fieldsConfig)", "class_method_signature": "CVTReconstruction.setFieldsConfig(String fieldsConfig)", "testcase": false, "constructor": false}, {"identifier": "processDataEvent", "parameters": "(DataEvent event)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean processDataEvent(DataEvent event)", "full_signature": "@Override public boolean processDataEvent(DataEvent event)", "class_method_signature": "CVTReconstruction.processDataEvent(DataEvent event)", "testcase": false, "constructor": false}, {"identifier": "CleanupSpuriousCrosses", "parameters": "(List<ArrayList<Cross>> crosses, List<Track> trks)", "modifiers": "private", "return": "void", "signature": "void CleanupSpuriousCrosses(List<ArrayList<Cross>> crosses, List<Track> trks)", "full_signature": "private void CleanupSpuriousCrosses(List<ArrayList<Cross>> crosses, List<Track> trks)", "class_method_signature": "CVTReconstruction.CleanupSpuriousCrosses(List<ArrayList<Cross>> crosses, List<Track> trks)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean init()", "full_signature": "public boolean init()", "class_method_signature": "CVTReconstruction.init()", "testcase": false, "constructor": false}], "file": "reconstruction/cvt/src/main/java/org/jlab/rec/cvt/services/CVTReconstruction.java"}, "focal_method": {"identifier": "CVTReconstruction", "parameters": "()", "modifiers": "public", "return": "", "body": "public CVTReconstruction() {\n        super(\"CVTTracks\", \"ziegler\", \"4.0\");\n        \n        SVTGeom = new org.jlab.rec.cvt.svt.Geometry();\n        BMTGeom = new org.jlab.rec.cvt.bmt.Geometry();\n        \n    }", "signature": " CVTReconstruction()", "full_signature": "public  CVTReconstruction()", "class_method_signature": "CVTReconstruction.CVTReconstruction()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 84985373, "url": "https://github.com/JeffersonLab/clas12-offline-software", "language": "Java", "is_fork": false, "fork_count": 56, "stargazer_count": 5, "size": 561666, "license": "licensed"}}