{"test_class": {"identifier": "ImmutableLogicalFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private SearchFilter searchFilterMock;", "modifier": "@Mock\n    private", "type": "SearchFilter", "declarator": "searchFilterMock", "var_name": "searchFilterMock"}], "file": "model/thingsearch/src/test/java/org/eclipse/ditto/model/thingsearch/ImmutableLogicalFilterTest.java"}, "test_case": {"identifier": "createNotFilter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void createNotFilter() {\n        final ImmutableLogicalFilter searchFilter = ImmutableLogicalFilter.not(searchFilterMock);\n\n        assertThat(searchFilter)\n                .hasType(SearchFilter.Type.NOT)\n                .containsOnlyFilter(searchFilterMock);\n    }", "signature": "void createNotFilter()", "full_signature": "@Test public void createNotFilter()", "class_method_signature": "ImmutableLogicalFilterTest.createNotFilter()", "testcase": true, "constructor": false, "invocations": ["not", "containsOnlyFilter", "hasType", "assertThat"]}, "focal_class": {"identifier": "ImmutableLogicalFilter", "superclass": "", "interfaces": "implements LogicalSearchFilter", "fields": [{"original_string": "private final Type type;", "modifier": "private final", "type": "Type", "declarator": "type", "var_name": "type"}, {"original_string": "private final Collection<SearchFilter> searchFilters;", "modifier": "private final", "type": "Collection<SearchFilter>", "declarator": "searchFilters", "var_name": "searchFilters"}], "methods": [{"identifier": "ImmutableLogicalFilter", "parameters": "(final Type theFilterType, final Collection<SearchFilter> theFilters)", "modifiers": "private", "return": "", "signature": " ImmutableLogicalFilter(final Type theFilterType, final Collection<SearchFilter> theFilters)", "full_signature": "private  ImmutableLogicalFilter(final Type theFilterType, final Collection<SearchFilter> theFilters)", "class_method_signature": "ImmutableLogicalFilter.ImmutableLogicalFilter(final Type theFilterType, final Collection<SearchFilter> theFilters)", "testcase": false, "constructor": true}, {"identifier": "not", "parameters": "(final SearchFilter filter)", "modifiers": "public static", "return": "ImmutableLogicalFilter", "signature": "ImmutableLogicalFilter not(final SearchFilter filter)", "full_signature": "public static ImmutableLogicalFilter not(final SearchFilter filter)", "class_method_signature": "ImmutableLogicalFilter.not(final SearchFilter filter)", "testcase": false, "constructor": false}, {"identifier": "and", "parameters": "(final SearchFilter filter1, final SearchFilter filter2,\n            final SearchFilter... furtherFilters)", "modifiers": "public static", "return": "ImmutableLogicalFilter", "signature": "ImmutableLogicalFilter and(final SearchFilter filter1, final SearchFilter filter2,\n            final SearchFilter... furtherFilters)", "full_signature": "public static ImmutableLogicalFilter and(final SearchFilter filter1, final SearchFilter filter2,\n            final SearchFilter... furtherFilters)", "class_method_signature": "ImmutableLogicalFilter.and(final SearchFilter filter1, final SearchFilter filter2,\n            final SearchFilter... furtherFilters)", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(final SearchFilter filter1, final SearchFilter filter2,\n            final SearchFilter... furtherFilters)", "modifiers": "public static", "return": "ImmutableLogicalFilter", "signature": "ImmutableLogicalFilter or(final SearchFilter filter1, final SearchFilter filter2,\n            final SearchFilter... furtherFilters)", "full_signature": "public static ImmutableLogicalFilter or(final SearchFilter filter1, final SearchFilter filter2,\n            final SearchFilter... furtherFilters)", "class_method_signature": "ImmutableLogicalFilter.or(final SearchFilter filter1, final SearchFilter filter2,\n            final SearchFilter... furtherFilters)", "testcase": false, "constructor": false}, {"identifier": "paramsToList", "parameters": "(final T param1, final T param2, final T... furtherParams)", "modifiers": "@SafeVarargs private static", "return": "List<T>", "signature": "List<T> paramsToList(final T param1, final T param2, final T... furtherParams)", "full_signature": "@SafeVarargs private static List<T> paramsToList(final T param1, final T param2, final T... furtherParams)", "class_method_signature": "ImmutableLogicalFilter.paramsToList(final T param1, final T param2, final T... furtherParams)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "@Override public", "return": "Type", "signature": "Type getType()", "full_signature": "@Override public Type getType()", "class_method_signature": "ImmutableLogicalFilter.getType()", "testcase": false, "constructor": false}, {"identifier": "getFilters", "parameters": "()", "modifiers": "@Override public", "return": "Collection<SearchFilter>", "signature": "Collection<SearchFilter> getFilters()", "full_signature": "@Override public Collection<SearchFilter> getFilters()", "class_method_signature": "ImmutableLogicalFilter.getFilters()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "ImmutableLogicalFilter.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ImmutableLogicalFilter.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ImmutableLogicalFilter.toString()", "testcase": false, "constructor": false}, {"identifier": "createFilterString", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String createFilterString()", "full_signature": "private String createFilterString()", "class_method_signature": "ImmutableLogicalFilter.createFilterString()", "testcase": false, "constructor": false}], "file": "model/thingsearch/src/main/java/org/eclipse/ditto/model/thingsearch/ImmutableLogicalFilter.java"}, "focal_method": {"identifier": "not", "parameters": "(final SearchFilter filter)", "modifiers": "public static", "return": "ImmutableLogicalFilter", "body": "public static ImmutableLogicalFilter not(final SearchFilter filter) {\n        checkNotNull(filter, \"filter to be negated\");\n\n        return new ImmutableLogicalFilter(Type.NOT, Collections.singleton(filter));\n    }", "signature": "ImmutableLogicalFilter not(final SearchFilter filter)", "full_signature": "public static ImmutableLogicalFilter not(final SearchFilter filter)", "class_method_signature": "ImmutableLogicalFilter.not(final SearchFilter filter)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "singleton"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}