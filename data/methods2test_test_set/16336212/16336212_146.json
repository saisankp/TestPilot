{"test_class": {"identifier": "AgentRollupIdsTest", "superclass": "", "interfaces": "", "fields": [], "file": "central/src/test/java/org/glowroot/central/repo/AgentRollupIdsTest.java"}, "test_case": {"identifier": "shouldGetAgentRollupParent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldGetAgentRollupParent() {\n        assertThat(AgentRollupIds.getParent(\"aaa\")).isNull();\n        assertThat(AgentRollupIds.getParent(\"aaa::\")).isNull();\n        assertThat(AgentRollupIds.getParent(\"aaa::bbb\")).isEqualTo(\"aaa::\");\n        assertThat(AgentRollupIds.getParent(\"aaa::bbb::\")).isEqualTo(\"aaa::\");\n        assertThat(AgentRollupIds.getParent(\"aaa::bbb::ccc\")).isEqualTo(\"aaa::bbb::\");\n        assertThat(AgentRollupIds.getParent(\"aaa::bbb::ccc::\")).isEqualTo(\"aaa::bbb::\");\n\n        assertThat(AgentRollupIds.getParent(\"aaa:::\")).isNull();\n        assertThat(AgentRollupIds.getParent(\"aaa:::bbb\")).isEqualTo(\"aaa:::\");\n        assertThat(AgentRollupIds.getParent(\"aaa:::bbb:::\")).isEqualTo(\"aaa:::\");\n        assertThat(AgentRollupIds.getParent(\"aaa:::bbb:::ccc\")).isEqualTo(\"aaa:::bbb:::\");\n        assertThat(AgentRollupIds.getParent(\"aaa:::bbb:::ccc:::\")).isEqualTo(\"aaa:::bbb:::\");\n\n        assertThat(AgentRollupIds.getParent(\"aaa::::\")).isNull();\n        assertThat(AgentRollupIds.getParent(\"aaa::::bbb\")).isEqualTo(\"aaa::::\");\n        assertThat(AgentRollupIds.getParent(\"aaa::::bbb::::\")).isEqualTo(\"aaa::::\");\n        assertThat(AgentRollupIds.getParent(\"aaa::::bbb::::ccc\")).isEqualTo(\"aaa::::bbb::::\");\n        assertThat(AgentRollupIds.getParent(\"aaa::::bbb::::ccc::::\")).isEqualTo(\"aaa::::bbb::::\");\n\n        assertThat(AgentRollupIds.getParent(\"aaa:::::\")).isEqualTo(\"aaa::\");\n        assertThat(AgentRollupIds.getParent(\"aaa:::::bbb\")).isEqualTo(\"aaa:::::\");\n        assertThat(AgentRollupIds.getParent(\"aaa:::::bbb:::::\")).isEqualTo(\"aaa:::::bbb::\");\n        assertThat(AgentRollupIds.getParent(\"aaa:::::bbb:::::ccc\")).isEqualTo(\"aaa:::::bbb:::::\");\n        assertThat(AgentRollupIds.getParent(\"aaa:::::bbb:::::ccc:::::\"))\n                .isEqualTo(\"aaa:::::bbb:::::ccc::\");\n\n        assertThat(AgentRollupIds.getParent(\":\")).isNull();\n        assertThat(AgentRollupIds.getParent(\"::\")).isNull();\n        assertThat(AgentRollupIds.getParent(\":::\")).isNull();\n        assertThat(AgentRollupIds.getParent(\"::::\")).isNull();\n        assertThat(AgentRollupIds.getParent(\":::::\")).isNull();\n        assertThat(AgentRollupIds.getParent(\"::::::\")).isEqualTo(\":::\");\n    }", "signature": "void shouldGetAgentRollupParent()", "full_signature": "@Test public void shouldGetAgentRollupParent()", "class_method_signature": "AgentRollupIdsTest.shouldGetAgentRollupParent()", "testcase": true, "constructor": false, "invocations": ["isNull", "assertThat", "getParent", "isNull", "assertThat", "getParent", "isEqualTo", "assertThat", "getParent", "isEqualTo", "assertThat", "getParent", "isEqualTo", "assertThat", "getParent", "isEqualTo", "assertThat", "getParent", "isNull", "assertThat", "getParent", "isEqualTo", "assertThat", "getParent", "isEqualTo", "assertThat", "getParent", "isEqualTo", "assertThat", "getParent", "isEqualTo", "assertThat", "getParent", "isNull", "assertThat", "getParent", "isEqualTo", "assertThat", "getParent", "isEqualTo", "assertThat", "getParent", "isEqualTo", "assertThat", "getParent", "isEqualTo", "assertThat", "getParent", "isEqualTo", "assertThat", "getParent", "isEqualTo", "assertThat", "getParent", "isEqualTo", "assertThat", "getParent", "isEqualTo", "assertThat", "getParent", "isEqualTo", "assertThat", "getParent", "isNull", "assertThat", "getParent", "isNull", "assertThat", "getParent", "isNull", "assertThat", "getParent", "isNull", "assertThat", "getParent", "isNull", "assertThat", "getParent", "isEqualTo", "assertThat", "getParent"]}, "focal_class": {"identifier": "AgentRollupIds", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "AgentRollupIds", "parameters": "()", "modifiers": "private", "return": "", "signature": " AgentRollupIds()", "full_signature": "private  AgentRollupIds()", "class_method_signature": "AgentRollupIds.AgentRollupIds()", "testcase": false, "constructor": true}, {"identifier": "getAgentRollupIds", "parameters": "(String agentRollupId)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getAgentRollupIds(String agentRollupId)", "full_signature": "public static List<String> getAgentRollupIds(String agentRollupId)", "class_method_signature": "AgentRollupIds.getAgentRollupIds(String agentRollupId)", "testcase": false, "constructor": false}, {"identifier": "getParent", "parameters": "(String agentRollupId)", "modifiers": "static @Nullable", "return": "String", "signature": "String getParent(String agentRollupId)", "full_signature": "static @Nullable String getParent(String agentRollupId)", "class_method_signature": "AgentRollupIds.getParent(String agentRollupId)", "testcase": false, "constructor": false}], "file": "central/src/main/java/org/glowroot/central/repo/AgentRollupIds.java"}, "focal_method": {"identifier": "getParent", "parameters": "(String agentRollupId)", "modifiers": "static @Nullable", "return": "String", "body": "static @Nullable String getParent(String agentRollupId) {\n        int index;\n        if (agentRollupId.endsWith(\"::\")) {\n            index = agentRollupId.lastIndexOf(\"::\", agentRollupId.length() - 5);\n        } else {\n            index = agentRollupId.lastIndexOf(\"::\");\n        }\n        if (index == -1 || index == 0) {\n            return null;\n        }\n        return agentRollupId.substring(0, index + 2);\n    }", "signature": "String getParent(String agentRollupId)", "full_signature": "static @Nullable String getParent(String agentRollupId)", "class_method_signature": "AgentRollupIds.getParent(String agentRollupId)", "testcase": false, "constructor": false, "invocations": ["endsWith", "lastIndexOf", "length", "lastIndexOf", "substring"]}, "repository": {"repo_id": 16336212, "url": "https://github.com/glowroot/glowroot", "stars": 736, "created": "1/29/2014 5:25:58 AM +00:00", "updates": "2020-01-24T11:13:42+00:00", "fork": "False", "license": "licensed"}}