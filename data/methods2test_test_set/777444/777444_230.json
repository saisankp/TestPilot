{"test_class": {"identifier": "StringToObjectConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "StringToObjectConverter converter;", "modifier": "", "type": "StringToObjectConverter", "declarator": "converter", "var_name": "converter"}], "file": "agent/core/src/test/java/org/jolokia/converter/object/StringToObjectConverterTest.java"}, "test_case": {"identifier": "simpleConversions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void simpleConversions() {\n        Object obj = converter.convertFromString(int.class.getCanonicalName(),\"10\");\n        assertEquals(\"Int conversion\",10,obj);\n        obj = converter.convertFromString(Integer.class.getCanonicalName(),\"10\");\n        assertEquals(\"Integer conversion\",10,obj);\n        obj = converter.convertFromString(Short.class.getCanonicalName(),\"10\");\n        assertEquals(\"Short conversion\",(short) 10,obj);\n        obj = converter.convertFromString(short.class.getCanonicalName(),\"10\");\n        assertEquals(\"short conversion\",Short.parseShort(\"10\"),obj);\n        obj = converter.convertFromString(Long.class.getCanonicalName(),\"10\");\n        assertEquals(\"long conversion\",10L,obj);\n        obj = converter.convertFromString(long.class.getCanonicalName(),\"10\");\n        assertEquals(\"Long conversion\",10L,obj);\n        obj = converter.convertFromString(Byte.class.getCanonicalName(),\"10\");\n        assertEquals(\"Byte conversion\",(byte) 10,obj);\n        obj = converter.convertFromString(byte.class.getCanonicalName(),\"10\");\n        assertEquals(\"byte conversion\",Byte.parseByte(\"10\"),obj);\n\n        obj = converter.convertFromString(Float.class.getCanonicalName(),\"10.5\");\n        assertEquals(\"Float conversion\",10.5f,obj);\n        obj = converter.convertFromString(float.class.getCanonicalName(),\"21.3\");\n        assertEquals(\"float conversion\",new Float(21.3f),obj);\n        obj = converter.convertFromString(Double.class.getCanonicalName(),\"10.5\");\n        assertEquals(\"Double conversion\",10.5d,obj);\n        obj = converter.convertFromString(double.class.getCanonicalName(),\"21.3\");\n        assertEquals(\"double conversion\",21.3d,obj);\n        obj = converter.convertFromString(BigDecimal.class.getCanonicalName(),\"83.4e+4\");\n        assertEquals(\"BigDecimal conversion\", new BigDecimal(\"8.34e+5\"), obj);\n        obj = converter.convertFromString(BigInteger.class.getCanonicalName(),\"47110815471108154711\");\n        assertEquals(\"BigInteger conversion\", new BigInteger(\"47110815471108154711\"), obj);\n\n        obj = converter.convertFromString(Boolean.class.getCanonicalName(),\"false\");\n        assertEquals(\"Boolean conversion\",false,obj);\n        obj = converter.convertFromString(boolean.class.getCanonicalName(),\"true\");\n        assertEquals(\"boolean conversion\",true,obj);\n\n        obj = converter.convertFromString(char.class.getCanonicalName(),\"a\");\n        assertEquals(\"Char conversion\",'a',obj);\n\n        obj = converter.convertFromString(\"java.lang.String\",\"10\");\n        assertEquals(\"String conversion\",\"10\",obj);\n    }", "signature": "void simpleConversions()", "full_signature": "@Test public void simpleConversions()", "class_method_signature": "StringToObjectConverterTest.simpleConversions()", "testcase": true, "constructor": false, "invocations": ["convertFromString", "getCanonicalName", "assertEquals", "convertFromString", "getCanonicalName", "assertEquals", "convertFromString", "getCanonicalName", "assertEquals", "convertFromString", "getCanonicalName", "assertEquals", "parseShort", "convertFromString", "getCanonicalName", "assertEquals", "convertFromString", "getCanonicalName", "assertEquals", "convertFromString", "getCanonicalName", "assertEquals", "convertFromString", "getCanonicalName", "assertEquals", "parseByte", "convertFromString", "getCanonicalName", "assertEquals", "convertFromString", "getCanonicalName", "assertEquals", "convertFromString", "getCanonicalName", "assertEquals", "convertFromString", "getCanonicalName", "assertEquals", "convertFromString", "getCanonicalName", "assertEquals", "convertFromString", "getCanonicalName", "assertEquals", "convertFromString", "getCanonicalName", "assertEquals", "convertFromString", "getCanonicalName", "assertEquals", "convertFromString", "getCanonicalName", "assertEquals", "convertFromString", "assertEquals"]}, "focal_class": {"identifier": "StringToObjectConverter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Map<String,Parser> PARSER_MAP = new HashMap<String,Parser>();", "modifier": "private static final", "type": "Map<String,Parser>", "declarator": "PARSER_MAP = new HashMap<String,Parser>()", "var_name": "PARSER_MAP"}, {"original_string": "private static final Map<String,Class> TYPE_SIGNATURE_MAP = new HashMap<String, Class>();", "modifier": "private static final", "type": "Map<String,Class>", "declarator": "TYPE_SIGNATURE_MAP = new HashMap<String, Class>()", "var_name": "TYPE_SIGNATURE_MAP"}], "methods": [{"identifier": "prepareValue", "parameters": "(String pExpectedClassName, Object pValue)", "modifiers": "public", "return": "Object", "signature": "Object prepareValue(String pExpectedClassName, Object pValue)", "full_signature": "public Object prepareValue(String pExpectedClassName, Object pValue)", "class_method_signature": "StringToObjectConverter.prepareValue(String pExpectedClassName, Object pValue)", "testcase": false, "constructor": false}, {"identifier": "prepareValue", "parameters": "(Class expectedClass, Object pValue)", "modifiers": "private", "return": "Object", "signature": "Object prepareValue(Class expectedClass, Object pValue)", "full_signature": "private Object prepareValue(Class expectedClass, Object pValue)", "class_method_signature": "StringToObjectConverter.prepareValue(Class expectedClass, Object pValue)", "testcase": false, "constructor": false}, {"identifier": "convertSpecialStringTags", "parameters": "(String pValue)", "modifiers": "public static", "return": "String", "signature": "String convertSpecialStringTags(String pValue)", "full_signature": "public static String convertSpecialStringTags(String pValue)", "class_method_signature": "StringToObjectConverter.convertSpecialStringTags(String pValue)", "testcase": false, "constructor": false}, {"identifier": "prepareForDirectUsage", "parameters": "(Class expectedClass, Object pArgument)", "modifiers": "private", "return": "Object", "signature": "Object prepareForDirectUsage(Class expectedClass, Object pArgument)", "full_signature": "private Object prepareForDirectUsage(Class expectedClass, Object pArgument)", "class_method_signature": "StringToObjectConverter.prepareForDirectUsage(Class expectedClass, Object pArgument)", "testcase": false, "constructor": false}, {"identifier": "convertByConstructor", "parameters": "(String pType, String pValue)", "modifiers": "private", "return": "Object", "signature": "Object convertByConstructor(String pType, String pValue)", "full_signature": "private Object convertByConstructor(String pType, String pValue)", "class_method_signature": "StringToObjectConverter.convertByConstructor(String pType, String pValue)", "testcase": false, "constructor": false}, {"identifier": "convertFromString", "parameters": "(String pType, String pValue)", "modifiers": "public", "return": "Object", "signature": "Object convertFromString(String pType, String pValue)", "full_signature": "public Object convertFromString(String pType, String pValue)", "class_method_signature": "StringToObjectConverter.convertFromString(String pType, String pValue)", "testcase": false, "constructor": false}, {"identifier": "convertToArray", "parameters": "(String pType, String pValue)", "modifiers": "private", "return": "Object", "signature": "Object convertToArray(String pType, String pValue)", "full_signature": "private Object convertToArray(String pType, String pValue)", "class_method_signature": "StringToObjectConverter.convertToArray(String pType, String pValue)", "testcase": false, "constructor": false}, {"identifier": "convertListToArray", "parameters": "(Class pType, List pList)", "modifiers": "private", "return": "Object", "signature": "Object convertListToArray(Class pType, List pList)", "full_signature": "private Object convertListToArray(Class pType, List pList)", "class_method_signature": "StringToObjectConverter.convertListToArray(Class pType, List pList)", "testcase": false, "constructor": false}], "file": "agent/core/src/main/java/org/jolokia/converter/object/StringToObjectConverter.java"}, "focal_method": {"identifier": "convertFromString", "parameters": "(String pType, String pValue)", "modifiers": "public", "return": "Object", "body": "public Object convertFromString(String pType, String pValue) {\n        String value = convertSpecialStringTags(pValue);\n\n        if (value == null) {\n            return null;\n        }\n        if (pType.startsWith(\"[\") && pType.length() >= 2) {\n            return convertToArray(pType, value);\n        }\n\n        Parser parser = PARSER_MAP.get(pType);\n        if (parser != null) {\n            return parser.extract(value);\n        }\n        \n        Object cValue = convertByConstructor(pType, pValue);\n        if (cValue != null) {\n        \treturn cValue;\n        }\n        \n        throw new IllegalArgumentException(\n                \"Cannot convert string \" + value + \" to type \" +\n                        pType + \" because no converter could be found\");\n    }", "signature": "Object convertFromString(String pType, String pValue)", "full_signature": "public Object convertFromString(String pType, String pValue)", "class_method_signature": "StringToObjectConverter.convertFromString(String pType, String pValue)", "testcase": false, "constructor": false, "invocations": ["convertSpecialStringTags", "startsWith", "length", "convertToArray", "get", "extract", "convertByConstructor"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}