{"test_class": {"identifier": "ModifyTransactionRequestTest", "superclass": "extends AbstractTransactionRequestTest<ModifyTransactionRequest>", "interfaces": "", "fields": [{"original_string": "private static final NormalizedNode<?, ?> NODE = Builders.containerBuilder().withNodeIdentifier(\n            YangInstanceIdentifier.NodeIdentifier.create(QName.create(\"namespace\", \"localName\"))).build();", "modifier": "private static final", "type": "NormalizedNode<?, ?>", "declarator": "NODE = Builders.containerBuilder().withNodeIdentifier(\n            YangInstanceIdentifier.NodeIdentifier.create(QName.create(\"namespace\", \"localName\"))).build()", "var_name": "NODE"}, {"original_string": "private static final List<TransactionModification> MODIFICATIONS = Lists.newArrayList(\n            new TransactionWrite(YangInstanceIdentifier.empty(), NODE));", "modifier": "private static final", "type": "List<TransactionModification>", "declarator": "MODIFICATIONS = Lists.newArrayList(\n            new TransactionWrite(YangInstanceIdentifier.empty(), NODE))", "var_name": "MODIFICATIONS"}, {"original_string": "private static final PersistenceProtocol PROTOCOL = PersistenceProtocol.ABORT;", "modifier": "private static final", "type": "PersistenceProtocol", "declarator": "PROTOCOL = PersistenceProtocol.ABORT", "var_name": "PROTOCOL"}, {"original_string": "private static final ModifyTransactionRequest OBJECT = new ModifyTransactionRequest(\n            TRANSACTION_IDENTIFIER, 0, ACTOR_REF, MODIFICATIONS, PROTOCOL);", "modifier": "private static final", "type": "ModifyTransactionRequest", "declarator": "OBJECT = new ModifyTransactionRequest(\n            TRANSACTION_IDENTIFIER, 0, ACTOR_REF, MODIFICATIONS, PROTOCOL)", "var_name": "OBJECT"}], "file": "opendaylight/md-sal/cds-access-api/src/test/java/org/opendaylight/controller/cluster/access/commands/ModifyTransactionRequestTest.java"}, "test_case": {"identifier": "getPersistenceProtocolTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getPersistenceProtocolTest() {\n        final Optional<PersistenceProtocol> result = OBJECT.getPersistenceProtocol();\n        Assert.assertTrue(result.isPresent());\n        Assert.assertEquals(PROTOCOL, result.get());\n    }", "signature": "void getPersistenceProtocolTest()", "full_signature": "@Test public void getPersistenceProtocolTest()", "class_method_signature": "ModifyTransactionRequestTest.getPersistenceProtocolTest()", "testcase": true, "constructor": false, "invocations": ["getPersistenceProtocol", "assertTrue", "isPresent", "assertEquals", "get"]}, "focal_class": {"identifier": "ModifyTransactionRequest", "superclass": "extends TransactionRequest<ModifyTransactionRequest>", "interfaces": "implements SliceableMessage", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "@SuppressFBWarnings(value = \"SE_BAD_FIELD\", justification = \"This field is not Serializable but this class \"\n            + \"implements writeReplace to delegate serialization to a Proxy class and thus instances of this class \"\n            + \"aren't serialized. FindBugs does not recognize this.\")\n    private final List<TransactionModification> modifications;", "modifier": "@SuppressFBWarnings(value = \"SE_BAD_FIELD\", justification = \"This field is not Serializable but this class \"\n            + \"implements writeReplace to delegate serialization to a Proxy class and thus instances of this class \"\n            + \"aren't serialized. FindBugs does not recognize this.\")\n    private final", "type": "List<TransactionModification>", "declarator": "modifications", "var_name": "modifications"}, {"original_string": "private final PersistenceProtocol protocol;", "modifier": "private final", "type": "PersistenceProtocol", "declarator": "protocol", "var_name": "protocol"}], "methods": [{"identifier": "ModifyTransactionRequest", "parameters": "(final TransactionIdentifier target, final long sequence, final ActorRef replyTo,\n        final List<TransactionModification> modifications, final PersistenceProtocol protocol)", "modifiers": "", "return": "", "signature": " ModifyTransactionRequest(final TransactionIdentifier target, final long sequence, final ActorRef replyTo,\n        final List<TransactionModification> modifications, final PersistenceProtocol protocol)", "full_signature": "  ModifyTransactionRequest(final TransactionIdentifier target, final long sequence, final ActorRef replyTo,\n        final List<TransactionModification> modifications, final PersistenceProtocol protocol)", "class_method_signature": "ModifyTransactionRequest.ModifyTransactionRequest(final TransactionIdentifier target, final long sequence, final ActorRef replyTo,\n        final List<TransactionModification> modifications, final PersistenceProtocol protocol)", "testcase": false, "constructor": true}, {"identifier": "getPersistenceProtocol", "parameters": "()", "modifiers": "public", "return": "Optional<PersistenceProtocol>", "signature": "Optional<PersistenceProtocol> getPersistenceProtocol()", "full_signature": "public Optional<PersistenceProtocol> getPersistenceProtocol()", "class_method_signature": "ModifyTransactionRequest.getPersistenceProtocol()", "testcase": false, "constructor": false}, {"identifier": "getModifications", "parameters": "()", "modifiers": "public", "return": "List<TransactionModification>", "signature": "List<TransactionModification> getModifications()", "full_signature": "public List<TransactionModification> getModifications()", "class_method_signature": "ModifyTransactionRequest.getModifications()", "testcase": false, "constructor": false}, {"identifier": "addToStringAttributes", "parameters": "(final ToStringHelper toStringHelper)", "modifiers": "@Override protected", "return": "ToStringHelper", "signature": "ToStringHelper addToStringAttributes(final ToStringHelper toStringHelper)", "full_signature": "@Override protected ToStringHelper addToStringAttributes(final ToStringHelper toStringHelper)", "class_method_signature": "ModifyTransactionRequest.addToStringAttributes(final ToStringHelper toStringHelper)", "testcase": false, "constructor": false}, {"identifier": "externalizableProxy", "parameters": "(final ABIVersion version)", "modifiers": "@Override protected", "return": "ModifyTransactionRequestProxyV1", "signature": "ModifyTransactionRequestProxyV1 externalizableProxy(final ABIVersion version)", "full_signature": "@Override protected ModifyTransactionRequestProxyV1 externalizableProxy(final ABIVersion version)", "class_method_signature": "ModifyTransactionRequest.externalizableProxy(final ABIVersion version)", "testcase": false, "constructor": false}, {"identifier": "cloneAsVersion", "parameters": "(final ABIVersion version)", "modifiers": "@Override protected", "return": "ModifyTransactionRequest", "signature": "ModifyTransactionRequest cloneAsVersion(final ABIVersion version)", "full_signature": "@Override protected ModifyTransactionRequest cloneAsVersion(final ABIVersion version)", "class_method_signature": "ModifyTransactionRequest.cloneAsVersion(final ABIVersion version)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/cds-access-api/src/main/java/org/opendaylight/controller/cluster/access/commands/ModifyTransactionRequest.java"}, "focal_method": {"identifier": "getPersistenceProtocol", "parameters": "()", "modifiers": "public", "return": "Optional<PersistenceProtocol>", "body": "public Optional<PersistenceProtocol> getPersistenceProtocol() {\n        return Optional.ofNullable(protocol);\n    }", "signature": "Optional<PersistenceProtocol> getPersistenceProtocol()", "full_signature": "public Optional<PersistenceProtocol> getPersistenceProtocol()", "class_method_signature": "ModifyTransactionRequest.getPersistenceProtocol()", "testcase": false, "constructor": false, "invocations": ["ofNullable"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}