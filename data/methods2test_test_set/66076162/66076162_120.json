{"test_class": {"identifier": "SingleInteractorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SingleInteractorTestClass singleInteractor;", "modifier": "private", "type": "SingleInteractorTestClass", "declarator": "singleInteractor", "var_name": "singleInteractor"}, {"original_string": "private TestDisposableSingleObserver<Integer> testDisposableSingleObserver;", "modifier": "private", "type": "TestDisposableSingleObserver<Integer>", "declarator": "testDisposableSingleObserver", "var_name": "testDisposableSingleObserver"}, {"original_string": "@Mock private ThreadExecutor mockThreadExecutor;", "modifier": "@Mock private", "type": "ThreadExecutor", "declarator": "mockThreadExecutor", "var_name": "mockThreadExecutor"}, {"original_string": "@Mock private PostExecutionThread mockPostExecutionThread;", "modifier": "@Mock private", "type": "PostExecutionThread", "declarator": "mockPostExecutionThread", "var_name": "mockPostExecutionThread"}], "file": "domain/src/test/java/com/remotecraft/app/domain/interactor/base/SingleInteractorTest.java"}, "test_case": {"identifier": "shouldFailWhenNullObserver", "parameters": "()", "modifiers": "@Test(expected = NullPointerException.class) public", "return": "void", "body": "@Test(expected = NullPointerException.class)\n  public void shouldFailWhenNullObserver()\n      throws Exception {\n    singleInteractor.execute(null, null);\n  }", "signature": "void shouldFailWhenNullObserver()", "full_signature": "@Test(expected = NullPointerException.class) public void shouldFailWhenNullObserver()", "class_method_signature": "SingleInteractorTest.shouldFailWhenNullObserver()", "testcase": true, "constructor": false, "invocations": ["execute"]}, "focal_class": {"identifier": "SingleInteractor", "superclass": "", "interfaces": "implements Interactor<DisposableSingleObserver, P>", "fields": [{"original_string": "private final ThreadExecutor threadExecutor;", "modifier": "private final", "type": "ThreadExecutor", "declarator": "threadExecutor", "var_name": "threadExecutor"}, {"original_string": "private final PostExecutionThread postExecutionThread;", "modifier": "private final", "type": "PostExecutionThread", "declarator": "postExecutionThread", "var_name": "postExecutionThread"}, {"original_string": "private final CompositeDisposable disposables;", "modifier": "private final", "type": "CompositeDisposable", "declarator": "disposables", "var_name": "disposables"}], "methods": [{"identifier": "SingleInteractor", "parameters": "(ThreadExecutor threadExecutor, PostExecutionThread postExecutionThread)", "modifiers": "public", "return": "", "signature": " SingleInteractor(ThreadExecutor threadExecutor, PostExecutionThread postExecutionThread)", "full_signature": "public  SingleInteractor(ThreadExecutor threadExecutor, PostExecutionThread postExecutionThread)", "class_method_signature": "SingleInteractor.SingleInteractor(ThreadExecutor threadExecutor, PostExecutionThread postExecutionThread)", "testcase": false, "constructor": true}, {"identifier": "buildReactiveStream", "parameters": "(P params)", "modifiers": "protected abstract", "return": "Single<T>", "signature": "Single<T> buildReactiveStream(P params)", "full_signature": "protected abstract Single<T> buildReactiveStream(P params)", "class_method_signature": "SingleInteractor.buildReactiveStream(P params)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(DisposableSingleObserver observer, P params)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "signature": "void execute(DisposableSingleObserver observer, P params)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void execute(DisposableSingleObserver observer, P params)", "class_method_signature": "SingleInteractor.execute(DisposableSingleObserver observer, P params)", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "SingleInteractor.dispose()", "testcase": false, "constructor": false}], "file": "domain/src/main/java/com/remotecraft/app/domain/interactor/base/SingleInteractor.java"}, "focal_method": {"identifier": "execute", "parameters": "(DisposableSingleObserver observer, P params)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n  @Override\n  public void execute(DisposableSingleObserver observer, P params) {\n    DisposableSingleObserver disposableObserver = buildReactiveStream(params)\n        .subscribeOn(Schedulers.from(threadExecutor))\n        .observeOn(postExecutionThread.getScheduler())\n        .subscribeWith(observer);\n    disposables.add(disposableObserver);\n  }", "signature": "void execute(DisposableSingleObserver observer, P params)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void execute(DisposableSingleObserver observer, P params)", "class_method_signature": "SingleInteractor.execute(DisposableSingleObserver observer, P params)", "testcase": false, "constructor": false, "invocations": ["subscribeWith", "observeOn", "subscribeOn", "buildReactiveStream", "from", "getScheduler", "add"]}, "repository": {"repo_id": 66076162, "url": "https://github.com/RemotecraftProject/RemotecraftApp", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 2502, "license": "licensed"}}