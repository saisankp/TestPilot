{"test_class": {"identifier": "BasicConfigurationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final List<ISaProcessingFactory> facs;", "modifier": "private static final", "type": "List<ISaProcessingFactory>", "declarator": "facs", "var_name": "facs"}, {"original_string": "private static final List<ISaDiagnosticsFactory> diags;", "modifier": "private static final", "type": "List<ISaDiagnosticsFactory>", "declarator": "diags", "var_name": "diags"}], "file": "jtss/src/test/java/ec/tss/sa/output/BasicConfigurationTest.java"}, "test_case": {"identifier": "testAllSeries", "parameters": "()", "modifiers": "@Test @Ignore public", "return": "void", "body": "@Test\n    @Ignore\n    public void testAllSeries() {\n        for (String s : BasicConfiguration.allSeries(true, facs))\n            System.out.println(s);\n    }", "signature": "void testAllSeries()", "full_signature": "@Test @Ignore public void testAllSeries()", "class_method_signature": "BasicConfigurationTest.testAllSeries()", "testcase": true, "constructor": false, "invocations": ["allSeries", "println"]}, "focal_class": {"identifier": "BasicConfiguration", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Character csvSeparator = null;", "modifier": "private static", "type": "Character", "declarator": "csvSeparator = null", "var_name": "csvSeparator"}, {"original_string": "private static final AtomicInteger ndec = new AtomicInteger(9);", "modifier": "private static final", "type": "AtomicInteger", "declarator": "ndec = new AtomicInteger(9)", "var_name": "ndec"}, {"original_string": "public static final String DEMETRA = \"Demetra+\", DEF_FILE = \"demetra\";", "modifier": "public static final", "type": "String", "declarator": "DEMETRA = \"Demetra+\"", "var_name": "DEMETRA"}, {"original_string": "public static final String defaultFolder = Files2.fromPath(Paths.getDefaultHome(), DEMETRA).getPath();", "modifier": "public static final", "type": "String", "declarator": "defaultFolder = Files2.fromPath(Paths.getDefaultHome(), DEMETRA).getPath()", "var_name": "defaultFolder"}, {"original_string": "@Deprecated\n    public static final String[] allDetails = {\n        \"span.start\", \"span.end\", \"span.n\",\n        \"espan.start\", \"espan.end\", \"espan.n\",\n        \"likelihood.neffectiveobs\", \"likelihood.np\", \"likelihood.logvalue\", \"likelihood.adjustedlogvalue\",\n        \"likelihood.ssqerr\", \"likelihood.aic\", \"likelihood.aicc\", \"likelihood.bic\", \"likelihood.bicc\",\n        \"residuals.ser\", \"residuals.ser-ml\", \"residuals.mean\", \"residuals.skewness\", \"residuals.kurtosis\",\n        \"residuals.dh\", \"residuals.lb\", \"residuals.lb2\", \"residuals.seaslb\", \"residuals.bp\", \"residuals.bp2\",\n        \"residuals.seasbp\", \"residuals.nruns\", \"residuals.lruns\",\n        \"m-statistics.m1\", \"m-statistics.m2\", \"m-statistics.m3\", \"m-statistics.m4\", \"m-statistics.m5\", \"m-statistics.m6\",\n        \"m-statistics.m7\", \"m-statistics.m8\", \"m-statistics.m9\", \"m-statistics.m10\", \"m-statistics.m11\", \"m-statistics.q\", \"m-statistics.q-m2\",\n        \"diagnostics.quality\", \"diagnostics.basic checks.definition:2\", \"diagnostics.basic checks.annual totals:2\", \"diagnostics.visual spectral analysis.spectral seas peaks\",\n        \"diagnostics.visual spectral analysis.spectral td peaks\", \"diagnostics.regarima residuals.normality:2\", \"diagnostics.regarima residuals.independence:2\",\n        \"diagnostics.regarima residuals.spectral td peaks:2\", \"diagnostics.regarima residuals.spectral seas peaks:2\", \"diagnostics.residual seasonality.on sa:2\",\n        \"diagnostics.residual seasonality.on sa (last 3 years):2\", \"diagnostics.residual seasonality.on irregular:2\",\n        \"diagnostics.seats.seas variance:2\", \"diagnostics.seats.irregular variance:2\", \"diagnostics.seats.seas/irr cross-correlation:2\",\n        \"log\", \"adjust\",\n        \"arima.mean\", \"arima.p\", \"arima.d\", \"arima.q\", \"arima.bp\", \"arima.bd\", \"arima.bq\",\n        \"arima.phi(1)\", \"arima.phi(2)\", \"arima.phi(3)\", \"arima.phi(4)\",\n        \"arima.th(1)\", \"arima.th(2)\", \"arima.th(3)\", \"arima.th(4)\",\n        \"arima.bphi(1)\", \"arima.bth(1)\",\n        \"regression.lp:3\",\n        \"regression.ntd\", \"regression.td(1):3\", \"regression.td(2):3\", \"regression.td(3):3\", \"regression.td(4):3\", \"regression.td(5):3\", \"regression.td(6):3\", \"regression.td(7):3\",\n        \"regression.nmh\", \"regression.easter:3\",\n        \"regression.nout\", \"regression.out(1):3\", \"regression.out(2):3\", \"regression.out(3):3\", \"regression.out(4):3\", \"regression.out(5):3\", \"regression.out(6):3\", \"regression.out(7):3\", \"regression.out(8):3\",\n        \"regression.out(9):3\", \"regression.out(10):3\", \"regression.out(11):3\", \"regression.out(12):3\", \"regression.out(13):3\", \"regression.out(14):3\", \"regression.out(15):3\", \"regression.out(16):3\",\n        \"decomposition.seasonality\", \"decomposition.trendfilter\", \"decomposition.seasfilter\"};", "modifier": "@Deprecated\n    public static final", "type": "String[]", "declarator": "allDetails = {\n        \"span.start\", \"span.end\", \"span.n\",\n        \"espan.start\", \"espan.end\", \"espan.n\",\n        \"likelihood.neffectiveobs\", \"likelihood.np\", \"likelihood.logvalue\", \"likelihood.adjustedlogvalue\",\n        \"likelihood.ssqerr\", \"likelihood.aic\", \"likelihood.aicc\", \"likelihood.bic\", \"likelihood.bicc\",\n        \"residuals.ser\", \"residuals.ser-ml\", \"residuals.mean\", \"residuals.skewness\", \"residuals.kurtosis\",\n        \"residuals.dh\", \"residuals.lb\", \"residuals.lb2\", \"residuals.seaslb\", \"residuals.bp\", \"residuals.bp2\",\n        \"residuals.seasbp\", \"residuals.nruns\", \"residuals.lruns\",\n        \"m-statistics.m1\", \"m-statistics.m2\", \"m-statistics.m3\", \"m-statistics.m4\", \"m-statistics.m5\", \"m-statistics.m6\",\n        \"m-statistics.m7\", \"m-statistics.m8\", \"m-statistics.m9\", \"m-statistics.m10\", \"m-statistics.m11\", \"m-statistics.q\", \"m-statistics.q-m2\",\n        \"diagnostics.quality\", \"diagnostics.basic checks.definition:2\", \"diagnostics.basic checks.annual totals:2\", \"diagnostics.visual spectral analysis.spectral seas peaks\",\n        \"diagnostics.visual spectral analysis.spectral td peaks\", \"diagnostics.regarima residuals.normality:2\", \"diagnostics.regarima residuals.independence:2\",\n        \"diagnostics.regarima residuals.spectral td peaks:2\", \"diagnostics.regarima residuals.spectral seas peaks:2\", \"diagnostics.residual seasonality.on sa:2\",\n        \"diagnostics.residual seasonality.on sa (last 3 years):2\", \"diagnostics.residual seasonality.on irregular:2\",\n        \"diagnostics.seats.seas variance:2\", \"diagnostics.seats.irregular variance:2\", \"diagnostics.seats.seas/irr cross-correlation:2\",\n        \"log\", \"adjust\",\n        \"arima.mean\", \"arima.p\", \"arima.d\", \"arima.q\", \"arima.bp\", \"arima.bd\", \"arima.bq\",\n        \"arima.phi(1)\", \"arima.phi(2)\", \"arima.phi(3)\", \"arima.phi(4)\",\n        \"arima.th(1)\", \"arima.th(2)\", \"arima.th(3)\", \"arima.th(4)\",\n        \"arima.bphi(1)\", \"arima.bth(1)\",\n        \"regression.lp:3\",\n        \"regression.ntd\", \"regression.td(1):3\", \"regression.td(2):3\", \"regression.td(3):3\", \"regression.td(4):3\", \"regression.td(5):3\", \"regression.td(6):3\", \"regression.td(7):3\",\n        \"regression.nmh\", \"regression.easter:3\",\n        \"regression.nout\", \"regression.out(1):3\", \"regression.out(2):3\", \"regression.out(3):3\", \"regression.out(4):3\", \"regression.out(5):3\", \"regression.out(6):3\", \"regression.out(7):3\", \"regression.out(8):3\",\n        \"regression.out(9):3\", \"regression.out(10):3\", \"regression.out(11):3\", \"regression.out(12):3\", \"regression.out(13):3\", \"regression.out(14):3\", \"regression.out(15):3\", \"regression.out(16):3\",\n        \"decomposition.seasonality\", \"decomposition.trendfilter\", \"decomposition.seasfilter\"}", "var_name": "allDetails"}, {"original_string": "@Deprecated\n    public static final String[] allSeries = {\n        \"y\", \"y_f\", \"y_ef\", \"yc\", \"yc_f\", \"yc_ef\", \"y_lin\", \"y_lin_f\", \"l\", \"ycal\", \"ycal_f\", \"l_f\", \"l_b\",\n        \"t\", \"t_f\", \"sa\", \"sa_f\", \"s\", \"s_f\", \"i\", \"i_f\",\n        \"det\", \"det_f\", \"cal\", \"cal_f\", \"tde\", \"tde_f\", \"mhe\", \"mhe_f\", \"ee\", \"ee_f\",\n        \"omhe\", \"omhe_f\", \"out\", \"out_f\", \"out_i\", \"out_i_f\", \"out_t\", \"out_t_f\", \"out_s\",\n        \"out_s_f\", \"reg\", \"reg_f\", \"reg_t\", \"reg_t_f\", \"reg_s\", \"reg_s_f\", \"reg_i\", \"reg_i_f\",\n        \"reg_sa\", \"reg_sa_f\", \"reg_y\", \"reg_y_f\", \"fullresiduals\",\n        \"decomposition.y_lin\",\n        \"decomposition.y_lin_f\",\n        \"decomposition.t_lin\",\n        \"decomposition.t_lin_f\",\n        \"decomposition.sa_lin\",\n        \"decomposition.sa_lin_f\",\n        \"decomposition.s_lin\",\n        \"decomposition.s_lin_f\",\n        \"decomposition.i_lin\",\n        \"decomposition.i_lin_f\",\n        \"decomposition.y_lin_ef\",\n        \"decomposition.t_lin_e\",\n        \"decomposition.t_lin_ef\",\n        \"decomposition.sa_lin_e\",\n        \"decomposition.sa_lin_ef\",\n        \"decomposition.s_lin_e\",\n        \"decomposition.s_lin_ef\",\n        \"decomposition.i_lin_e\",\n        \"decomposition.i_lin_ef\",\n        \"decomposition.y_cmp\",\n        \"decomposition.y_cmp_f\",\n        \"decomposition.t_cmp\",\n        \"decomposition.t_cmp_f\",\n        \"decomposition.sa_cmp\",\n        \"decomposition.sa_cmp_f\",\n        \"decomposition.s_cmp\",\n        \"decomposition.s_cmp_f\",\n        \"decomposition.i_cmp\",\n        \"decomposition.i_cmp_f\",\n        \"decomposition.t_cmp_e\",\n        \"decomposition.t_cmp_ef\",\n        \"decomposition.sa_cmp_e\",\n        \"decomposition.sa_cmp_ef\",\n        \"decomposition.s_cmp_e\",\n        \"decomposition.s_cmp_ef\",\n        \"decomposition.i_cmp_e\",\n        \"decomposition.i_cmp_ef\",\n        \"decomposition.si_cmp\",\n        \"benchmarking.target\",\n        \"benchmarking.result\"\n    };", "modifier": "@Deprecated\n    public static final", "type": "String[]", "declarator": "allSeries = {\n        \"y\", \"y_f\", \"y_ef\", \"yc\", \"yc_f\", \"yc_ef\", \"y_lin\", \"y_lin_f\", \"l\", \"ycal\", \"ycal_f\", \"l_f\", \"l_b\",\n        \"t\", \"t_f\", \"sa\", \"sa_f\", \"s\", \"s_f\", \"i\", \"i_f\",\n        \"det\", \"det_f\", \"cal\", \"cal_f\", \"tde\", \"tde_f\", \"mhe\", \"mhe_f\", \"ee\", \"ee_f\",\n        \"omhe\", \"omhe_f\", \"out\", \"out_f\", \"out_i\", \"out_i_f\", \"out_t\", \"out_t_f\", \"out_s\",\n        \"out_s_f\", \"reg\", \"reg_f\", \"reg_t\", \"reg_t_f\", \"reg_s\", \"reg_s_f\", \"reg_i\", \"reg_i_f\",\n        \"reg_sa\", \"reg_sa_f\", \"reg_y\", \"reg_y_f\", \"fullresiduals\",\n        \"decomposition.y_lin\",\n        \"decomposition.y_lin_f\",\n        \"decomposition.t_lin\",\n        \"decomposition.t_lin_f\",\n        \"decomposition.sa_lin\",\n        \"decomposition.sa_lin_f\",\n        \"decomposition.s_lin\",\n        \"decomposition.s_lin_f\",\n        \"decomposition.i_lin\",\n        \"decomposition.i_lin_f\",\n        \"decomposition.y_lin_ef\",\n        \"decomposition.t_lin_e\",\n        \"decomposition.t_lin_ef\",\n        \"decomposition.sa_lin_e\",\n        \"decomposition.sa_lin_ef\",\n        \"decomposition.s_lin_e\",\n        \"decomposition.s_lin_ef\",\n        \"decomposition.i_lin_e\",\n        \"decomposition.i_lin_ef\",\n        \"decomposition.y_cmp\",\n        \"decomposition.y_cmp_f\",\n        \"decomposition.t_cmp\",\n        \"decomposition.t_cmp_f\",\n        \"decomposition.sa_cmp\",\n        \"decomposition.sa_cmp_f\",\n        \"decomposition.s_cmp\",\n        \"decomposition.s_cmp_f\",\n        \"decomposition.i_cmp\",\n        \"decomposition.i_cmp_f\",\n        \"decomposition.t_cmp_e\",\n        \"decomposition.t_cmp_ef\",\n        \"decomposition.sa_cmp_e\",\n        \"decomposition.sa_cmp_ef\",\n        \"decomposition.s_cmp_e\",\n        \"decomposition.s_cmp_ef\",\n        \"decomposition.i_cmp_e\",\n        \"decomposition.i_cmp_ef\",\n        \"decomposition.si_cmp\",\n        \"benchmarking.target\",\n        \"benchmarking.result\"\n    }", "var_name": "allSeries"}], "methods": [{"identifier": "getFractionDigits", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int getFractionDigits()", "full_signature": "public static int getFractionDigits()", "class_method_signature": "BasicConfiguration.getFractionDigits()", "testcase": false, "constructor": false}, {"identifier": "setDecimalNumber", "parameters": "(int n)", "modifiers": "public static", "return": "void", "signature": "void setDecimalNumber(int n)", "full_signature": "public static void setDecimalNumber(int n)", "class_method_signature": "BasicConfiguration.setDecimalNumber(int n)", "testcase": false, "constructor": false}, {"identifier": "getCsvSeparator", "parameters": "()", "modifiers": "public static", "return": "char", "signature": "char getCsvSeparator()", "full_signature": "public static char getCsvSeparator()", "class_method_signature": "BasicConfiguration.getCsvSeparator()", "testcase": false, "constructor": false}, {"identifier": "setCsvSeparator", "parameters": "(Character c)", "modifiers": "public static", "return": "void", "signature": "void setCsvSeparator(Character c)", "full_signature": "public static void setCsvSeparator(Character c)", "class_method_signature": "BasicConfiguration.setCsvSeparator(Character c)", "testcase": false, "constructor": false}, {"identifier": "allSeries", "parameters": "(boolean compact, List<? extends IProcessingFactory> facs)", "modifiers": "public static final", "return": "List<String>", "signature": "List<String> allSeries(boolean compact, List<? extends IProcessingFactory> facs)", "full_signature": "public static final List<String> allSeries(boolean compact, List<? extends IProcessingFactory> facs)", "class_method_signature": "BasicConfiguration.allSeries(boolean compact, List<? extends IProcessingFactory> facs)", "testcase": false, "constructor": false}, {"identifier": "allSaSeries", "parameters": "(boolean compact)", "modifiers": "public static final", "return": "List<String>", "signature": "List<String> allSaSeries(boolean compact)", "full_signature": "public static final List<String> allSaSeries(boolean compact)", "class_method_signature": "BasicConfiguration.allSaSeries(boolean compact)", "testcase": false, "constructor": false}, {"identifier": "allDetails", "parameters": "(boolean compact, List<? extends IProcessingFactory> facs, List<? extends IDiagnosticsFactory> diags)", "modifiers": "public static final", "return": "List<String>", "signature": "List<String> allDetails(boolean compact, List<? extends IProcessingFactory> facs, List<? extends IDiagnosticsFactory> diags)", "full_signature": "public static final List<String> allDetails(boolean compact, List<? extends IProcessingFactory> facs, List<? extends IDiagnosticsFactory> diags)", "class_method_signature": "BasicConfiguration.allDetails(boolean compact, List<? extends IProcessingFactory> facs, List<? extends IDiagnosticsFactory> diags)", "testcase": false, "constructor": false}, {"identifier": "allSaDetails", "parameters": "(boolean compact)", "modifiers": "public static final", "return": "List<String>", "signature": "List<String> allSaDetails(boolean compact)", "full_signature": "public static final List<String> allSaDetails(boolean compact)", "class_method_signature": "BasicConfiguration.allSaDetails(boolean compact)", "testcase": false, "constructor": false}, {"identifier": "allSingleSaDetails", "parameters": "(boolean compact)", "modifiers": "public static final", "return": "List<String>", "signature": "List<String> allSingleSaDetails(boolean compact)", "full_signature": "public static final List<String> allSingleSaDetails(boolean compact)", "class_method_signature": "BasicConfiguration.allSingleSaDetails(boolean compact)", "testcase": false, "constructor": false}, {"identifier": "fileFromId", "parameters": "(Id id)", "modifiers": "private static", "return": "String", "signature": "String fileFromId(Id id)", "full_signature": "private static String fileFromId(Id id)", "class_method_signature": "BasicConfiguration.fileFromId(Id id)", "testcase": false, "constructor": false}, {"identifier": "fileFromId", "parameters": "(String folder, Id id)", "modifiers": "private static", "return": "String", "signature": "String fileFromId(String folder, Id id)", "full_signature": "private static String fileFromId(String folder, Id id)", "class_method_signature": "BasicConfiguration.fileFromId(String folder, Id id)", "testcase": false, "constructor": false}, {"identifier": "fileFromContext", "parameters": "(String folder, Object context)", "modifiers": "public static", "return": "String", "signature": "String fileFromContext(String folder, Object context)", "full_signature": "public static String fileFromContext(String folder, Object context)", "class_method_signature": "BasicConfiguration.fileFromContext(String folder, Object context)", "testcase": false, "constructor": false}, {"identifier": "folderFromContext", "parameters": "(String folder, Object context)", "modifiers": "public static", "return": "String", "signature": "String folderFromContext(String folder, Object context)", "full_signature": "public static String folderFromContext(String folder, Object context)", "class_method_signature": "BasicConfiguration.folderFromContext(String folder, Object context)", "testcase": false, "constructor": false}, {"identifier": "folderFromContext", "parameters": "(File folder, Object context)", "modifiers": "public static", "return": "File", "signature": "File folderFromContext(File folder, Object context)", "full_signature": "public static File folderFromContext(File folder, Object context)", "class_method_signature": "BasicConfiguration.folderFromContext(File folder, Object context)", "testcase": false, "constructor": false}, {"identifier": "folder", "parameters": "(String folder)", "modifiers": "public static", "return": "String", "signature": "String folder(String folder)", "full_signature": "public static String folder(String folder)", "class_method_signature": "BasicConfiguration.folder(String folder)", "testcase": false, "constructor": false}, {"identifier": "folder", "parameters": "(File folder)", "modifiers": "public static", "return": "File", "signature": "File folder(File folder)", "full_signature": "public static File folder(File folder)", "class_method_signature": "BasicConfiguration.folder(File folder)", "testcase": false, "constructor": false}], "file": "jtss/src/main/java/ec/tss/sa/output/BasicConfiguration.java"}, "focal_method": {"identifier": "allSeries", "parameters": "(boolean compact, List<? extends IProcessingFactory> facs)", "modifiers": "public static final", "return": "List<String>", "body": "public static final List<String> allSeries(boolean compact, List<? extends IProcessingFactory> facs) {\n        LinkedHashSet<String> dic = new LinkedHashSet<>();\n        for (IProcessingFactory fac : facs) {\n            Map<String, Class> odic = fac.getOutputDictionary(compact);\n            odic.forEach((s, c) -> {\n                if (c == TsData.class && !dic.contains(s)) {\n                    dic.add(s);\n                }\n            });\n        }\n        return dic.stream().collect(Collectors.toList());\n    }", "signature": "List<String> allSeries(boolean compact, List<? extends IProcessingFactory> facs)", "full_signature": "public static final List<String> allSeries(boolean compact, List<? extends IProcessingFactory> facs)", "class_method_signature": "BasicConfiguration.allSeries(boolean compact, List<? extends IProcessingFactory> facs)", "testcase": false, "constructor": false, "invocations": ["getOutputDictionary", "forEach", "contains", "add", "collect", "stream", "toList"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}