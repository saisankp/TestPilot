{"test_class": {"identifier": "CuratorZookeeperClientTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TestingServer zkServer;", "modifier": "private", "type": "TestingServer", "declarator": "zkServer", "var_name": "zkServer"}, {"original_string": "private CuratorZookeeperClient curatorClient;", "modifier": "private", "type": "CuratorZookeeperClient", "declarator": "curatorClient", "var_name": "curatorClient"}, {"original_string": "CuratorFramework client = null;", "modifier": "", "type": "CuratorFramework", "declarator": "client = null", "var_name": "client"}], "file": "dubbo-remoting/dubbo-remoting-zookeeper/src/test/java/org/apache/dubbo/remoting/zookeeper/curator/CuratorZookeeperClientTest.java"}, "test_case": {"identifier": "testCheckExists", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCheckExists() {\n        String path = \"/dubbo/org.apache.dubbo.demo.DemoService/providers\";\n        curatorClient.create(path, false);\n        assertThat(curatorClient.checkExists(path), is(true));\n        assertThat(curatorClient.checkExists(path + \"/noneexits\"), is(false));\n    }", "signature": "void testCheckExists()", "full_signature": "@Test public void testCheckExists()", "class_method_signature": "CuratorZookeeperClientTest.testCheckExists()", "testcase": true, "constructor": false, "invocations": ["create", "assertThat", "checkExists", "is", "assertThat", "checkExists", "is"]}, "focal_class": {"identifier": "CuratorZookeeperClient", "superclass": "extends AbstractZookeeperClient<CuratorZookeeperClient.CuratorWatcherImpl, CuratorZookeeperClient.CuratorWatcherImpl>", "interfaces": "", "fields": [{"original_string": "protected static final Logger logger = LoggerFactory.getLogger(CuratorZookeeperClient.class);", "modifier": "protected static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CuratorZookeeperClient.class)", "var_name": "logger"}, {"original_string": "private static final String ZK_SESSION_EXPIRE_KEY = \"zk.session.expire\";", "modifier": "private static final", "type": "String", "declarator": "ZK_SESSION_EXPIRE_KEY = \"zk.session.expire\"", "var_name": "ZK_SESSION_EXPIRE_KEY"}, {"original_string": "static final Charset CHARSET = Charset.forName(\"UTF-8\");", "modifier": "static final", "type": "Charset", "declarator": "CHARSET = Charset.forName(\"UTF-8\")", "var_name": "CHARSET"}, {"original_string": "private final CuratorFramework client;", "modifier": "private final", "type": "CuratorFramework", "declarator": "client", "var_name": "client"}, {"original_string": "private Map<String, TreeCache> treeCacheMap = new ConcurrentHashMap<>();", "modifier": "private", "type": "Map<String, TreeCache>", "declarator": "treeCacheMap = new ConcurrentHashMap<>()", "var_name": "treeCacheMap"}], "methods": [{"identifier": "CuratorZookeeperClient", "parameters": "(URL url)", "modifiers": "public", "return": "", "signature": " CuratorZookeeperClient(URL url)", "full_signature": "public  CuratorZookeeperClient(URL url)", "class_method_signature": "CuratorZookeeperClient.CuratorZookeeperClient(URL url)", "testcase": false, "constructor": true}, {"identifier": "createPersistent", "parameters": "(String path)", "modifiers": "@Override public", "return": "void", "signature": "void createPersistent(String path)", "full_signature": "@Override public void createPersistent(String path)", "class_method_signature": "CuratorZookeeperClient.createPersistent(String path)", "testcase": false, "constructor": false}, {"identifier": "createEphemeral", "parameters": "(String path)", "modifiers": "@Override public", "return": "void", "signature": "void createEphemeral(String path)", "full_signature": "@Override public void createEphemeral(String path)", "class_method_signature": "CuratorZookeeperClient.createEphemeral(String path)", "testcase": false, "constructor": false}, {"identifier": "createPersistent", "parameters": "(String path, String data)", "modifiers": "@Override protected", "return": "void", "signature": "void createPersistent(String path, String data)", "full_signature": "@Override protected void createPersistent(String path, String data)", "class_method_signature": "CuratorZookeeperClient.createPersistent(String path, String data)", "testcase": false, "constructor": false}, {"identifier": "createEphemeral", "parameters": "(String path, String data)", "modifiers": "@Override protected", "return": "void", "signature": "void createEphemeral(String path, String data)", "full_signature": "@Override protected void createEphemeral(String path, String data)", "class_method_signature": "CuratorZookeeperClient.createEphemeral(String path, String data)", "testcase": false, "constructor": false}, {"identifier": "deletePath", "parameters": "(String path)", "modifiers": "@Override protected", "return": "void", "signature": "void deletePath(String path)", "full_signature": "@Override protected void deletePath(String path)", "class_method_signature": "CuratorZookeeperClient.deletePath(String path)", "testcase": false, "constructor": false}, {"identifier": "getChildren", "parameters": "(String path)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getChildren(String path)", "full_signature": "@Override public List<String> getChildren(String path)", "class_method_signature": "CuratorZookeeperClient.getChildren(String path)", "testcase": false, "constructor": false}, {"identifier": "checkExists", "parameters": "(String path)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean checkExists(String path)", "full_signature": "@Override public boolean checkExists(String path)", "class_method_signature": "CuratorZookeeperClient.checkExists(String path)", "testcase": false, "constructor": false}, {"identifier": "isConnected", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isConnected()", "full_signature": "@Override public boolean isConnected()", "class_method_signature": "CuratorZookeeperClient.isConnected()", "testcase": false, "constructor": false}, {"identifier": "doGetContent", "parameters": "(String path)", "modifiers": "@Override public", "return": "String", "signature": "String doGetContent(String path)", "full_signature": "@Override public String doGetContent(String path)", "class_method_signature": "CuratorZookeeperClient.doGetContent(String path)", "testcase": false, "constructor": false}, {"identifier": "doClose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void doClose()", "full_signature": "@Override public void doClose()", "class_method_signature": "CuratorZookeeperClient.doClose()", "testcase": false, "constructor": false}, {"identifier": "createTargetChildListener", "parameters": "(String path, ChildListener listener)", "modifiers": "@Override public", "return": "CuratorZookeeperClient.CuratorWatcherImpl", "signature": "CuratorZookeeperClient.CuratorWatcherImpl createTargetChildListener(String path, ChildListener listener)", "full_signature": "@Override public CuratorZookeeperClient.CuratorWatcherImpl createTargetChildListener(String path, ChildListener listener)", "class_method_signature": "CuratorZookeeperClient.createTargetChildListener(String path, ChildListener listener)", "testcase": false, "constructor": false}, {"identifier": "addTargetChildListener", "parameters": "(String path, CuratorWatcherImpl listener)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> addTargetChildListener(String path, CuratorWatcherImpl listener)", "full_signature": "@Override public List<String> addTargetChildListener(String path, CuratorWatcherImpl listener)", "class_method_signature": "CuratorZookeeperClient.addTargetChildListener(String path, CuratorWatcherImpl listener)", "testcase": false, "constructor": false}, {"identifier": "createTargetDataListener", "parameters": "(String path, DataListener listener)", "modifiers": "@Override protected", "return": "CuratorZookeeperClient.CuratorWatcherImpl", "signature": "CuratorZookeeperClient.CuratorWatcherImpl createTargetDataListener(String path, DataListener listener)", "full_signature": "@Override protected CuratorZookeeperClient.CuratorWatcherImpl createTargetDataListener(String path, DataListener listener)", "class_method_signature": "CuratorZookeeperClient.createTargetDataListener(String path, DataListener listener)", "testcase": false, "constructor": false}, {"identifier": "addTargetDataListener", "parameters": "(String path, CuratorZookeeperClient.CuratorWatcherImpl treeCacheListener)", "modifiers": "@Override protected", "return": "void", "signature": "void addTargetDataListener(String path, CuratorZookeeperClient.CuratorWatcherImpl treeCacheListener)", "full_signature": "@Override protected void addTargetDataListener(String path, CuratorZookeeperClient.CuratorWatcherImpl treeCacheListener)", "class_method_signature": "CuratorZookeeperClient.addTargetDataListener(String path, CuratorZookeeperClient.CuratorWatcherImpl treeCacheListener)", "testcase": false, "constructor": false}, {"identifier": "addTargetDataListener", "parameters": "(String path, CuratorZookeeperClient.CuratorWatcherImpl treeCacheListener, Executor executor)", "modifiers": "@Override protected", "return": "void", "signature": "void addTargetDataListener(String path, CuratorZookeeperClient.CuratorWatcherImpl treeCacheListener, Executor executor)", "full_signature": "@Override protected void addTargetDataListener(String path, CuratorZookeeperClient.CuratorWatcherImpl treeCacheListener, Executor executor)", "class_method_signature": "CuratorZookeeperClient.addTargetDataListener(String path, CuratorZookeeperClient.CuratorWatcherImpl treeCacheListener, Executor executor)", "testcase": false, "constructor": false}, {"identifier": "removeTargetDataListener", "parameters": "(String path, CuratorZookeeperClient.CuratorWatcherImpl treeCacheListener)", "modifiers": "@Override protected", "return": "void", "signature": "void removeTargetDataListener(String path, CuratorZookeeperClient.CuratorWatcherImpl treeCacheListener)", "full_signature": "@Override protected void removeTargetDataListener(String path, CuratorZookeeperClient.CuratorWatcherImpl treeCacheListener)", "class_method_signature": "CuratorZookeeperClient.removeTargetDataListener(String path, CuratorZookeeperClient.CuratorWatcherImpl treeCacheListener)", "testcase": false, "constructor": false}, {"identifier": "removeTargetChildListener", "parameters": "(String path, CuratorWatcherImpl listener)", "modifiers": "@Override public", "return": "void", "signature": "void removeTargetChildListener(String path, CuratorWatcherImpl listener)", "full_signature": "@Override public void removeTargetChildListener(String path, CuratorWatcherImpl listener)", "class_method_signature": "CuratorZookeeperClient.removeTargetChildListener(String path, CuratorWatcherImpl listener)", "testcase": false, "constructor": false}, {"identifier": "getClient", "parameters": "()", "modifiers": "", "return": "CuratorFramework", "signature": "CuratorFramework getClient()", "full_signature": " CuratorFramework getClient()", "class_method_signature": "CuratorZookeeperClient.getClient()", "testcase": false, "constructor": false}], "file": "dubbo-remoting/dubbo-remoting-zookeeper/src/main/java/org/apache/dubbo/remoting/zookeeper/curator/CuratorZookeeperClient.java"}, "focal_method": {"identifier": "checkExists", "parameters": "(String path)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean checkExists(String path) {\n        try {\n            if (client.checkExists().forPath(path) != null) {\n                return true;\n            }\n        } catch (Exception e) {\n        }\n        return false;\n    }", "signature": "boolean checkExists(String path)", "full_signature": "@Override public boolean checkExists(String path)", "class_method_signature": "CuratorZookeeperClient.checkExists(String path)", "testcase": false, "constructor": false, "invocations": ["forPath", "checkExists"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}