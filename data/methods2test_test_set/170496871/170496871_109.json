{"test_class": {"identifier": "SparkModelParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}, {"original_string": "public static final String SPARK_MDL_PATH = \"models\";", "modifier": "public static final", "type": "String", "declarator": "SPARK_MDL_PATH = \"models\"", "var_name": "SPARK_MDL_PATH"}], "file": "modules/ml/spark-model-parser/src/test/java/org/apache/ignite/ml/sparkmodelparser/SparkModelParserTest.java"}, "test_case": {"identifier": "failOnEmptyDirectory", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void failOnEmptyDirectory() {\n        URL url = getClass().getClassLoader().getResource(SPARK_MDL_PATH);\n\n        try {\n            SparkModelParser.parse(\n                url.getPath() + \"empty\", SupportedSparkModels.LINEAR_REGRESSION\n            );\n            fail(\"Expected IllegalArgumentException exception\");\n        }\n        catch (IllegalArgumentException e) {\n            assertTrue(e.getMessage().contains(\"Directory not found or empty\"));\n        }\n    }", "signature": "void failOnEmptyDirectory()", "full_signature": "@Test public void failOnEmptyDirectory()", "class_method_signature": "SparkModelParserTest.failOnEmptyDirectory()", "testcase": true, "constructor": false, "invocations": ["getResource", "getClassLoader", "getClass", "parse", "getPath", "fail", "assertTrue", "contains", "getMessage"]}, "focal_class": {"identifier": "SparkModelParser", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "parse", "parameters": "(String pathToMdl, SupportedSparkModels parsedSparkMdl)", "modifiers": "public static", "return": "Model", "signature": "Model parse(String pathToMdl, SupportedSparkModels parsedSparkMdl)", "full_signature": "public static Model parse(String pathToMdl, SupportedSparkModels parsedSparkMdl)", "class_method_signature": "SparkModelParser.parse(String pathToMdl, SupportedSparkModels parsedSparkMdl)", "testcase": false, "constructor": false}, {"identifier": "validateMetadata", "parameters": "(String pathToMetadata,\n        SupportedSparkModels parsedSparkMdl)", "modifiers": "private static", "return": "void", "signature": "void validateMetadata(String pathToMetadata,\n        SupportedSparkModels parsedSparkMdl)", "full_signature": "private static void validateMetadata(String pathToMetadata,\n        SupportedSparkModels parsedSparkMdl)", "class_method_signature": "SparkModelParser.validateMetadata(String pathToMetadata,\n        SupportedSparkModels parsedSparkMdl)", "testcase": false, "constructor": false}, {"identifier": "shouldContainTreeMetadataSubDirectory", "parameters": "(SupportedSparkModels parsedSparkMdl)", "modifiers": "private static", "return": "boolean", "signature": "boolean shouldContainTreeMetadataSubDirectory(SupportedSparkModels parsedSparkMdl)", "full_signature": "private static boolean shouldContainTreeMetadataSubDirectory(SupportedSparkModels parsedSparkMdl)", "class_method_signature": "SparkModelParser.shouldContainTreeMetadataSubDirectory(SupportedSparkModels parsedSparkMdl)", "testcase": false, "constructor": false}, {"identifier": "parseData", "parameters": "(String pathToMdl, SupportedSparkModels parsedSparkMdl)", "modifiers": "private static", "return": "Model", "signature": "Model parseData(String pathToMdl, SupportedSparkModels parsedSparkMdl)", "full_signature": "private static Model parseData(String pathToMdl, SupportedSparkModels parsedSparkMdl)", "class_method_signature": "SparkModelParser.parseData(String pathToMdl, SupportedSparkModels parsedSparkMdl)", "testcase": false, "constructor": false}, {"identifier": "parseDataWithMetadata", "parameters": "(String pathToMdl, String pathToMetaData,\n        SupportedSparkModels parsedSparkMdl)", "modifiers": "private static", "return": "Model", "signature": "Model parseDataWithMetadata(String pathToMdl, String pathToMetaData,\n        SupportedSparkModels parsedSparkMdl)", "full_signature": "private static Model parseDataWithMetadata(String pathToMdl, String pathToMetaData,\n        SupportedSparkModels parsedSparkMdl)", "class_method_signature": "SparkModelParser.parseDataWithMetadata(String pathToMdl, String pathToMetaData,\n        SupportedSparkModels parsedSparkMdl)", "testcase": false, "constructor": false}, {"identifier": "loadRandomForestRegressionModel", "parameters": "(String pathToMdl)", "modifiers": "private static", "return": "Model", "signature": "Model loadRandomForestRegressionModel(String pathToMdl)", "full_signature": "private static Model loadRandomForestRegressionModel(String pathToMdl)", "class_method_signature": "SparkModelParser.loadRandomForestRegressionModel(String pathToMdl)", "testcase": false, "constructor": false}, {"identifier": "loadDecisionTreeRegressionModel", "parameters": "(String pathToMdl)", "modifiers": "private static", "return": "Model", "signature": "Model loadDecisionTreeRegressionModel(String pathToMdl)", "full_signature": "private static Model loadDecisionTreeRegressionModel(String pathToMdl)", "class_method_signature": "SparkModelParser.loadDecisionTreeRegressionModel(String pathToMdl)", "testcase": false, "constructor": false}, {"identifier": "loadKMeansModel", "parameters": "(String pathToMdl)", "modifiers": "private static", "return": "Model", "signature": "Model loadKMeansModel(String pathToMdl)", "full_signature": "private static Model loadKMeansModel(String pathToMdl)", "class_method_signature": "SparkModelParser.loadKMeansModel(String pathToMdl)", "testcase": false, "constructor": false}, {"identifier": "loadGBTRegressionModel", "parameters": "(String pathToMdl, String pathToMdlMetaData)", "modifiers": "private static", "return": "Model", "signature": "Model loadGBTRegressionModel(String pathToMdl, String pathToMdlMetaData)", "full_signature": "private static Model loadGBTRegressionModel(String pathToMdl, String pathToMdlMetaData)", "class_method_signature": "SparkModelParser.loadGBTRegressionModel(String pathToMdl, String pathToMdlMetaData)", "testcase": false, "constructor": false}, {"identifier": "loadGBTClassifierModel", "parameters": "(String pathToMdl, String pathToMdlMetaData)", "modifiers": "private static", "return": "Model", "signature": "Model loadGBTClassifierModel(String pathToMdl, String pathToMdlMetaData)", "full_signature": "private static Model loadGBTClassifierModel(String pathToMdl, String pathToMdlMetaData)", "class_method_signature": "SparkModelParser.loadGBTClassifierModel(String pathToMdl, String pathToMdlMetaData)", "testcase": false, "constructor": false}, {"identifier": "parseAndBuildGDBModel", "parameters": "(String pathToMdl, String pathToMdlMetaData,\n        IgniteFunction<Double, Double> lbMapper)", "modifiers": "@Nullable private static", "return": "Model", "signature": "Model parseAndBuildGDBModel(String pathToMdl, String pathToMdlMetaData,\n        IgniteFunction<Double, Double> lbMapper)", "full_signature": "@Nullable private static Model parseAndBuildGDBModel(String pathToMdl, String pathToMdlMetaData,\n        IgniteFunction<Double, Double> lbMapper)", "class_method_signature": "SparkModelParser.parseAndBuildGDBModel(String pathToMdl, String pathToMdlMetaData,\n        IgniteFunction<Double, Double> lbMapper)", "testcase": false, "constructor": false}, {"identifier": "loadRandomForestModel", "parameters": "(String pathToMdl)", "modifiers": "private static", "return": "Model", "signature": "Model loadRandomForestModel(String pathToMdl)", "full_signature": "private static Model loadRandomForestModel(String pathToMdl)", "class_method_signature": "SparkModelParser.loadRandomForestModel(String pathToMdl)", "testcase": false, "constructor": false}, {"identifier": "parseTreesForRandomForestAlgorithm", "parameters": "(String pathToMdl)", "modifiers": "private static", "return": "List<IgniteModel<Vector, Double>>", "signature": "List<IgniteModel<Vector, Double>> parseTreesForRandomForestAlgorithm(String pathToMdl)", "full_signature": "private static List<IgniteModel<Vector, Double>> parseTreesForRandomForestAlgorithm(String pathToMdl)", "class_method_signature": "SparkModelParser.parseTreesForRandomForestAlgorithm(String pathToMdl)", "testcase": false, "constructor": false}, {"identifier": "loadDecisionTreeModel", "parameters": "(String pathToMdl)", "modifiers": "private static", "return": "Model", "signature": "Model loadDecisionTreeModel(String pathToMdl)", "full_signature": "private static Model loadDecisionTreeModel(String pathToMdl)", "class_method_signature": "SparkModelParser.loadDecisionTreeModel(String pathToMdl)", "testcase": false, "constructor": false}, {"identifier": "buildDecisionTreeModel", "parameters": "(Map<Integer, NodeData> nodes)", "modifiers": "private static", "return": "DecisionTreeNode", "signature": "DecisionTreeNode buildDecisionTreeModel(Map<Integer, NodeData> nodes)", "full_signature": "private static DecisionTreeNode buildDecisionTreeModel(Map<Integer, NodeData> nodes)", "class_method_signature": "SparkModelParser.buildDecisionTreeModel(Map<Integer, NodeData> nodes)", "testcase": false, "constructor": false}, {"identifier": "buildTree", "parameters": "(Map<Integer, NodeData> nodes,\n        NodeData rootNodeData)", "modifiers": "@NotNull private static", "return": "DecisionTreeNode", "signature": "DecisionTreeNode buildTree(Map<Integer, NodeData> nodes,\n        NodeData rootNodeData)", "full_signature": "@NotNull private static DecisionTreeNode buildTree(Map<Integer, NodeData> nodes,\n        NodeData rootNodeData)", "class_method_signature": "SparkModelParser.buildTree(Map<Integer, NodeData> nodes,\n        NodeData rootNodeData)", "testcase": false, "constructor": false}, {"identifier": "extractNodeDataFromParquetRow", "parameters": "(SimpleGroup g)", "modifiers": "@NotNull private static", "return": "SparkModelParser.NodeData", "signature": "SparkModelParser.NodeData extractNodeDataFromParquetRow(SimpleGroup g)", "full_signature": "@NotNull private static SparkModelParser.NodeData extractNodeDataFromParquetRow(SimpleGroup g)", "class_method_signature": "SparkModelParser.extractNodeDataFromParquetRow(SimpleGroup g)", "testcase": false, "constructor": false}, {"identifier": "printGroup", "parameters": "(Group g)", "modifiers": "private static", "return": "void", "signature": "void printGroup(Group g)", "full_signature": "private static void printGroup(Group g)", "class_method_signature": "SparkModelParser.printGroup(Group g)", "testcase": false, "constructor": false}, {"identifier": "loadLinearSVMModel", "parameters": "(String pathToMdl)", "modifiers": "private static", "return": "Model", "signature": "Model loadLinearSVMModel(String pathToMdl)", "full_signature": "private static Model loadLinearSVMModel(String pathToMdl)", "class_method_signature": "SparkModelParser.loadLinearSVMModel(String pathToMdl)", "testcase": false, "constructor": false}, {"identifier": "loadLinRegModel", "parameters": "(String pathToMdl)", "modifiers": "private static", "return": "Model", "signature": "Model loadLinRegModel(String pathToMdl)", "full_signature": "private static Model loadLinRegModel(String pathToMdl)", "class_method_signature": "SparkModelParser.loadLinRegModel(String pathToMdl)", "testcase": false, "constructor": false}, {"identifier": "loadLogRegModel", "parameters": "(String pathToMdl)", "modifiers": "private static", "return": "Model", "signature": "Model loadLogRegModel(String pathToMdl)", "full_signature": "private static Model loadLogRegModel(String pathToMdl)", "class_method_signature": "SparkModelParser.loadLogRegModel(String pathToMdl)", "testcase": false, "constructor": false}, {"identifier": "readSVMInterceptor", "parameters": "(SimpleGroup g)", "modifiers": "private static", "return": "double", "signature": "double readSVMInterceptor(SimpleGroup g)", "full_signature": "private static double readSVMInterceptor(SimpleGroup g)", "class_method_signature": "SparkModelParser.readSVMInterceptor(SimpleGroup g)", "testcase": false, "constructor": false}, {"identifier": "readSVMCoefficients", "parameters": "(SimpleGroup g)", "modifiers": "private static", "return": "Vector", "signature": "Vector readSVMCoefficients(SimpleGroup g)", "full_signature": "private static Vector readSVMCoefficients(SimpleGroup g)", "class_method_signature": "SparkModelParser.readSVMCoefficients(SimpleGroup g)", "testcase": false, "constructor": false}, {"identifier": "readLinRegInterceptor", "parameters": "(SimpleGroup g)", "modifiers": "private static", "return": "double", "signature": "double readLinRegInterceptor(SimpleGroup g)", "full_signature": "private static double readLinRegInterceptor(SimpleGroup g)", "class_method_signature": "SparkModelParser.readLinRegInterceptor(SimpleGroup g)", "testcase": false, "constructor": false}, {"identifier": "readLinRegCoefficients", "parameters": "(SimpleGroup g)", "modifiers": "private static", "return": "Vector", "signature": "Vector readLinRegCoefficients(SimpleGroup g)", "full_signature": "private static Vector readLinRegCoefficients(SimpleGroup g)", "class_method_signature": "SparkModelParser.readLinRegCoefficients(SimpleGroup g)", "testcase": false, "constructor": false}, {"identifier": "readInterceptor", "parameters": "(SimpleGroup g)", "modifiers": "private static", "return": "double", "signature": "double readInterceptor(SimpleGroup g)", "full_signature": "private static double readInterceptor(SimpleGroup g)", "class_method_signature": "SparkModelParser.readInterceptor(SimpleGroup g)", "testcase": false, "constructor": false}, {"identifier": "readCoefficients", "parameters": "(SimpleGroup g)", "modifiers": "private static", "return": "Vector", "signature": "Vector readCoefficients(SimpleGroup g)", "full_signature": "private static Vector readCoefficients(SimpleGroup g)", "class_method_signature": "SparkModelParser.readCoefficients(SimpleGroup g)", "testcase": false, "constructor": false}], "file": "modules/ml/spark-model-parser/src/main/java/org/apache/ignite/ml/sparkmodelparser/SparkModelParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(String pathToMdl, SupportedSparkModels parsedSparkMdl)", "modifiers": "public static", "return": "Model", "body": "public static Model parse(String pathToMdl, SupportedSparkModels parsedSparkMdl) throws IllegalArgumentException {\n        File mdlDir = IgniteUtils.resolveIgnitePath(pathToMdl);\n\n        if (mdlDir == null)\n            throw new IllegalArgumentException(\"Directory not found or empty [directory_path=\" + pathToMdl + \"]\");\n\n        if (!mdlDir.isDirectory())\n            throw new IllegalArgumentException(\"Spark Model Parser supports loading from directory only. \" +\n                \"The specified path \" + pathToMdl + \" is not the path to directory.\");\n\n        String[] files = mdlDir.list();\n        if (files.length == 0)\n            throw new IllegalArgumentException(\"Directory contain 0 files and sub-directories [directory_path=\" + pathToMdl + \"]\");\n\n        if (Arrays.stream(files).noneMatch(\"data\"::equals))\n            throw new IllegalArgumentException(\"Directory should contain data sub-directory [directory_path=\" + pathToMdl + \"]\");\n\n        if (Arrays.stream(files).noneMatch(\"metadata\"::equals))\n            throw new IllegalArgumentException(\"Directory should contain metadata sub-directory [directory_path=\" + pathToMdl + \"]\");\n\n        String pathToData = pathToMdl + File.separator + \"data\";\n        File dataDir = IgniteUtils.resolveIgnitePath(pathToData);\n\n        File[] dataParquetFiles = dataDir.listFiles((dir, name) -> name.matches(\"^part-.*\\\\.snappy\\\\.parquet$\"));\n        if (dataParquetFiles.length == 0)\n            throw new IllegalArgumentException(\"Directory should contain parquet file \" +\n                \"with model [directory_path=\" + pathToData + \"]\");\n\n        if (dataParquetFiles.length > 1)\n            throw new IllegalArgumentException(\"Directory should contain only one parquet file \" +\n                \"with model [directory_path=\" + pathToData + \"]\");\n\n        String pathToMdlFile = dataParquetFiles[0].getPath();\n\n        String pathToMetadata = pathToMdl + File.separator + \"metadata\";\n        File metadataDir = IgniteUtils.resolveIgnitePath(pathToMetadata);\n        String[] metadataFiles = metadataDir.list();\n\n        if (Arrays.stream(metadataFiles).noneMatch(\"part-00000\"::equals))\n            throw new IllegalArgumentException(\"Directory should contain json file with model metadata \" +\n                \"with name part-00000 [directory_path=\" + pathToMetadata + \"]\");\n\n        try {\n            validateMetadata(pathToMetadata, parsedSparkMdl);\n        }\n        catch (FileNotFoundException e) {\n            throw new IllegalArgumentException(\"Directory should contain json file with model metadata \" +\n                \"with name part-00000 [directory_path=\" + pathToMetadata + \"]\");\n        }\n\n        if (shouldContainTreeMetadataSubDirectory(parsedSparkMdl)) {\n            if (Arrays.stream(files).noneMatch(\"treesMetadata\"::equals))\n                throw new IllegalArgumentException(\"Directory should contain treeMetadata sub-directory [directory_path=\" + pathToMdl + \"]\");\n\n            String pathToTreesMetadata = pathToMdl + File.separator + \"treesMetadata\";\n            File treesMetadataDir = IgniteUtils.resolveIgnitePath(pathToTreesMetadata);\n\n            File[] treesMetadataParquetFiles = treesMetadataDir.listFiles((dir, name) -> name.matches(\"^part-.*\\\\.snappy\\\\.parquet$\"));\n            if (treesMetadataParquetFiles.length == 0)\n                throw new IllegalArgumentException(\"Directory should contain parquet file \" +\n                    \"with model treesMetadata [directory_path=\" + pathToTreesMetadata + \"]\");\n\n            if (treesMetadataParquetFiles.length > 1)\n                throw new IllegalArgumentException(\"Directory should contain only one parquet file \" +\n                    \"with model [directory_path=\" + pathToTreesMetadata + \"]\");\n\n            String pathToTreesMetadataFile = treesMetadataParquetFiles[0].getPath();\n\n            return parseDataWithMetadata(pathToMdlFile, pathToTreesMetadataFile, parsedSparkMdl);\n        }\n        else\n            return parseData(pathToMdlFile, parsedSparkMdl);\n    }", "signature": "Model parse(String pathToMdl, SupportedSparkModels parsedSparkMdl)", "full_signature": "public static Model parse(String pathToMdl, SupportedSparkModels parsedSparkMdl)", "class_method_signature": "SparkModelParser.parse(String pathToMdl, SupportedSparkModels parsedSparkMdl)", "testcase": false, "constructor": false, "invocations": ["resolveIgnitePath", "isDirectory", "list", "noneMatch", "stream", "noneMatch", "stream", "resolveIgnitePath", "listFiles", "matches", "getPath", "resolveIgnitePath", "list", "noneMatch", "stream", "validateMetadata", "shouldContainTreeMetadataSubDirectory", "noneMatch", "stream", "resolveIgnitePath", "listFiles", "matches", "getPath", "parseDataWithMetadata", "parseData"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}