{"test_class": {"identifier": "FileInputFormatTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-core/src/test/java/org/apache/flink/api/common/io/FileInputFormatTest.java"}, "test_case": {"identifier": "testDecorateInputStream", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testDecorateInputStream() throws IOException {\n\t\t// create temporary file with 3 blocks\n\t\tfinal File tempFile = File.createTempFile(\"input-stream-decoration-test\", \"tmp\");\n\t\ttempFile.deleteOnExit();\n\t\tfinal int blockSize = 8;\n\t\tfinal int numBlocks = 3;\n\t\tFileOutputStream fileOutputStream = new FileOutputStream(tempFile);\n\t\tfor (int i = 0; i < blockSize * numBlocks; i++) {\n\t\t\tfileOutputStream.write(new byte[]{1});\n\t\t}\n\t\tfileOutputStream.close();\n\n\t\tfinal Configuration config = new Configuration();\n\n\t\tfinal FileInputFormat<byte[]> inputFormat = new MyDecoratedInputFormat();\n\t\tinputFormat.setFilePath(tempFile.toURI().toString());\n\n\t\tinputFormat.configure(config);\n\n\t\tFileInputSplit[] inputSplits = inputFormat.createInputSplits(3);\n\n\t\tbyte[] bytes = null;\n\t\tfor (FileInputSplit inputSplit : inputSplits) {\n\t\t\tinputFormat.open(inputSplit);\n\t\t\twhile (!inputFormat.reachedEnd()) {\n\t\t\t\tif ((bytes = inputFormat.nextRecord(bytes)) != null) {\n\t\t\t\t\tAssert.assertArrayEquals(new byte[]{(byte) 0xFE}, bytes);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "signature": "void testDecorateInputStream()", "full_signature": "@Test public void testDecorateInputStream()", "class_method_signature": "FileInputFormatTest.testDecorateInputStream()", "testcase": true, "constructor": false, "invocations": ["createTempFile", "deleteOnExit", "write", "close", "setFilePath", "toString", "toURI", "configure", "createInputSplits", "open", "reachedEnd", "nextRecord", "assertArrayEquals"]}, "focal_class": {"identifier": "FileInputFormat", "superclass": "extends RichInputFormat<OT, FileInputSplit>", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(FileInputFormat.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(FileInputFormat.class)", "var_name": "LOG"}, {"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private static final float MAX_SPLIT_SIZE_DISCREPANCY = 1.1f;", "modifier": "private static final", "type": "float", "declarator": "MAX_SPLIT_SIZE_DISCREPANCY = 1.1f", "var_name": "MAX_SPLIT_SIZE_DISCREPANCY"}, {"original_string": "private static long DEFAULT_OPENING_TIMEOUT;", "modifier": "private static", "type": "long", "declarator": "DEFAULT_OPENING_TIMEOUT", "var_name": "DEFAULT_OPENING_TIMEOUT"}, {"original_string": "protected static final Map<String, InflaterInputStreamFactory<?>> INFLATER_INPUT_STREAM_FACTORIES =\n\t\t\tnew HashMap<String, InflaterInputStreamFactory<?>>();", "modifier": "protected static final", "type": "Map<String, InflaterInputStreamFactory<?>>", "declarator": "INFLATER_INPUT_STREAM_FACTORIES =\n\t\t\tnew HashMap<String, InflaterInputStreamFactory<?>>()", "var_name": "INFLATER_INPUT_STREAM_FACTORIES"}, {"original_string": "protected static final long READ_WHOLE_SPLIT_FLAG = -1L;", "modifier": "protected static final", "type": "long", "declarator": "READ_WHOLE_SPLIT_FLAG = -1L", "var_name": "READ_WHOLE_SPLIT_FLAG"}, {"original_string": "protected transient FSDataInputStream stream;", "modifier": "protected transient", "type": "FSDataInputStream", "declarator": "stream", "var_name": "stream"}, {"original_string": "protected transient long splitStart;", "modifier": "protected transient", "type": "long", "declarator": "splitStart", "var_name": "splitStart"}, {"original_string": "protected transient long splitLength;", "modifier": "protected transient", "type": "long", "declarator": "splitLength", "var_name": "splitLength"}, {"original_string": "protected transient FileInputSplit currentSplit;", "modifier": "protected transient", "type": "FileInputSplit", "declarator": "currentSplit", "var_name": "currentSplit"}, {"original_string": "protected Path filePath;", "modifier": "protected", "type": "Path", "declarator": "filePath", "var_name": "filePath"}, {"original_string": "protected long minSplitSize = 0;", "modifier": "protected", "type": "long", "declarator": "minSplitSize = 0", "var_name": "minSplitSize"}, {"original_string": "protected int numSplits = -1;", "modifier": "protected", "type": "int", "declarator": "numSplits = -1", "var_name": "numSplits"}, {"original_string": "protected long openTimeout = DEFAULT_OPENING_TIMEOUT;", "modifier": "protected", "type": "long", "declarator": "openTimeout = DEFAULT_OPENING_TIMEOUT", "var_name": "openTimeout"}, {"original_string": "protected boolean unsplittable = false;", "modifier": "protected", "type": "boolean", "declarator": "unsplittable = false", "var_name": "unsplittable"}, {"original_string": "protected boolean enumerateNestedFiles = false;", "modifier": "protected", "type": "boolean", "declarator": "enumerateNestedFiles = false", "var_name": "enumerateNestedFiles"}, {"original_string": "private static final String FILE_PARAMETER_KEY = \"input.file.path\";", "modifier": "private static final", "type": "String", "declarator": "FILE_PARAMETER_KEY = \"input.file.path\"", "var_name": "FILE_PARAMETER_KEY"}, {"original_string": "public static final String ENUMERATE_NESTED_FILES_FLAG = \"recursive.file.enumeration\";", "modifier": "public static final", "type": "String", "declarator": "ENUMERATE_NESTED_FILES_FLAG = \"recursive.file.enumeration\"", "var_name": "ENUMERATE_NESTED_FILES_FLAG"}], "methods": [{"identifier": "initDefaultsFromConfiguration", "parameters": "()", "modifiers": "private static", "return": "void", "signature": "void initDefaultsFromConfiguration()", "full_signature": "private static void initDefaultsFromConfiguration()", "class_method_signature": "FileInputFormat.initDefaultsFromConfiguration()", "testcase": false, "constructor": false}, {"identifier": "initDefaultInflaterInputStreamFactories", "parameters": "()", "modifiers": "private static", "return": "void", "signature": "void initDefaultInflaterInputStreamFactories()", "full_signature": "private static void initDefaultInflaterInputStreamFactories()", "class_method_signature": "FileInputFormat.initDefaultInflaterInputStreamFactories()", "testcase": false, "constructor": false}, {"identifier": "registerInflaterInputStreamFactory", "parameters": "(String fileExtension, InflaterInputStreamFactory<?> factory)", "modifiers": "public static", "return": "void", "signature": "void registerInflaterInputStreamFactory(String fileExtension, InflaterInputStreamFactory<?> factory)", "full_signature": "public static void registerInflaterInputStreamFactory(String fileExtension, InflaterInputStreamFactory<?> factory)", "class_method_signature": "FileInputFormat.registerInflaterInputStreamFactory(String fileExtension, InflaterInputStreamFactory<?> factory)", "testcase": false, "constructor": false}, {"identifier": "getInflaterInputStreamFactory", "parameters": "(String fileExtension)", "modifiers": "protected static", "return": "InflaterInputStreamFactory<?>", "signature": "InflaterInputStreamFactory<?> getInflaterInputStreamFactory(String fileExtension)", "full_signature": "protected static InflaterInputStreamFactory<?> getInflaterInputStreamFactory(String fileExtension)", "class_method_signature": "FileInputFormat.getInflaterInputStreamFactory(String fileExtension)", "testcase": false, "constructor": false}, {"identifier": "extractFileExtension", "parameters": "(String fileName)", "modifiers": "protected static", "return": "String", "signature": "String extractFileExtension(String fileName)", "full_signature": "protected static String extractFileExtension(String fileName)", "class_method_signature": "FileInputFormat.extractFileExtension(String fileName)", "testcase": false, "constructor": false}, {"identifier": "getDefaultOpeningTimeout", "parameters": "()", "modifiers": "static", "return": "long", "signature": "long getDefaultOpeningTimeout()", "full_signature": "static long getDefaultOpeningTimeout()", "class_method_signature": "FileInputFormat.getDefaultOpeningTimeout()", "testcase": false, "constructor": false}, {"identifier": "FileInputFormat", "parameters": "()", "modifiers": "public", "return": "", "signature": " FileInputFormat()", "full_signature": "public  FileInputFormat()", "class_method_signature": "FileInputFormat.FileInputFormat()", "testcase": false, "constructor": true}, {"identifier": "FileInputFormat", "parameters": "(Path filePath)", "modifiers": "protected", "return": "", "signature": " FileInputFormat(Path filePath)", "full_signature": "protected  FileInputFormat(Path filePath)", "class_method_signature": "FileInputFormat.FileInputFormat(Path filePath)", "testcase": false, "constructor": true}, {"identifier": "getFilePath", "parameters": "()", "modifiers": "public", "return": "Path", "signature": "Path getFilePath()", "full_signature": "public Path getFilePath()", "class_method_signature": "FileInputFormat.getFilePath()", "testcase": false, "constructor": false}, {"identifier": "setFilePath", "parameters": "(String filePath)", "modifiers": "public", "return": "void", "signature": "void setFilePath(String filePath)", "full_signature": "public void setFilePath(String filePath)", "class_method_signature": "FileInputFormat.setFilePath(String filePath)", "testcase": false, "constructor": false}, {"identifier": "setFilePath", "parameters": "(Path filePath)", "modifiers": "public", "return": "void", "signature": "void setFilePath(Path filePath)", "full_signature": "public void setFilePath(Path filePath)", "class_method_signature": "FileInputFormat.setFilePath(Path filePath)", "testcase": false, "constructor": false}, {"identifier": "getMinSplitSize", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getMinSplitSize()", "full_signature": "public long getMinSplitSize()", "class_method_signature": "FileInputFormat.getMinSplitSize()", "testcase": false, "constructor": false}, {"identifier": "setMinSplitSize", "parameters": "(long minSplitSize)", "modifiers": "public", "return": "void", "signature": "void setMinSplitSize(long minSplitSize)", "full_signature": "public void setMinSplitSize(long minSplitSize)", "class_method_signature": "FileInputFormat.setMinSplitSize(long minSplitSize)", "testcase": false, "constructor": false}, {"identifier": "getNumSplits", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNumSplits()", "full_signature": "public int getNumSplits()", "class_method_signature": "FileInputFormat.getNumSplits()", "testcase": false, "constructor": false}, {"identifier": "setNumSplits", "parameters": "(int numSplits)", "modifiers": "public", "return": "void", "signature": "void setNumSplits(int numSplits)", "full_signature": "public void setNumSplits(int numSplits)", "class_method_signature": "FileInputFormat.setNumSplits(int numSplits)", "testcase": false, "constructor": false}, {"identifier": "getOpenTimeout", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getOpenTimeout()", "full_signature": "public long getOpenTimeout()", "class_method_signature": "FileInputFormat.getOpenTimeout()", "testcase": false, "constructor": false}, {"identifier": "setOpenTimeout", "parameters": "(long openTimeout)", "modifiers": "public", "return": "void", "signature": "void setOpenTimeout(long openTimeout)", "full_signature": "public void setOpenTimeout(long openTimeout)", "class_method_signature": "FileInputFormat.setOpenTimeout(long openTimeout)", "testcase": false, "constructor": false}, {"identifier": "getSplitStart", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getSplitStart()", "full_signature": "public long getSplitStart()", "class_method_signature": "FileInputFormat.getSplitStart()", "testcase": false, "constructor": false}, {"identifier": "getSplitLength", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getSplitLength()", "full_signature": "public long getSplitLength()", "class_method_signature": "FileInputFormat.getSplitLength()", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(Configuration parameters)", "modifiers": "@Override public", "return": "void", "signature": "void configure(Configuration parameters)", "full_signature": "@Override public void configure(Configuration parameters)", "class_method_signature": "FileInputFormat.configure(Configuration parameters)", "testcase": false, "constructor": false}, {"identifier": "getStatistics", "parameters": "(BaseStatistics cachedStats)", "modifiers": "@Override public", "return": "FileBaseStatistics", "signature": "FileBaseStatistics getStatistics(BaseStatistics cachedStats)", "full_signature": "@Override public FileBaseStatistics getStatistics(BaseStatistics cachedStats)", "class_method_signature": "FileInputFormat.getStatistics(BaseStatistics cachedStats)", "testcase": false, "constructor": false}, {"identifier": "getFileStats", "parameters": "(FileBaseStatistics cachedStats, Path filePath, FileSystem fs,\n\t\t\tArrayList<FileStatus> files)", "modifiers": "protected", "return": "FileBaseStatistics", "signature": "FileBaseStatistics getFileStats(FileBaseStatistics cachedStats, Path filePath, FileSystem fs,\n\t\t\tArrayList<FileStatus> files)", "full_signature": "protected FileBaseStatistics getFileStats(FileBaseStatistics cachedStats, Path filePath, FileSystem fs,\n\t\t\tArrayList<FileStatus> files)", "class_method_signature": "FileInputFormat.getFileStats(FileBaseStatistics cachedStats, Path filePath, FileSystem fs,\n\t\t\tArrayList<FileStatus> files)", "testcase": false, "constructor": false}, {"identifier": "getInputSplitAssigner", "parameters": "(FileInputSplit[] splits)", "modifiers": "@Override public", "return": "LocatableInputSplitAssigner", "signature": "LocatableInputSplitAssigner getInputSplitAssigner(FileInputSplit[] splits)", "full_signature": "@Override public LocatableInputSplitAssigner getInputSplitAssigner(FileInputSplit[] splits)", "class_method_signature": "FileInputFormat.getInputSplitAssigner(FileInputSplit[] splits)", "testcase": false, "constructor": false}, {"identifier": "createInputSplits", "parameters": "(int minNumSplits)", "modifiers": "@Override public", "return": "FileInputSplit[]", "signature": "FileInputSplit[] createInputSplits(int minNumSplits)", "full_signature": "@Override public FileInputSplit[] createInputSplits(int minNumSplits)", "class_method_signature": "FileInputFormat.createInputSplits(int minNumSplits)", "testcase": false, "constructor": false}, {"identifier": "addFilesInDir", "parameters": "(Path path, List<FileStatus> files, boolean logExcludedFiles)", "modifiers": "private", "return": "long", "signature": "long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles)", "full_signature": "private long addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles)", "class_method_signature": "FileInputFormat.addFilesInDir(Path path, List<FileStatus> files, boolean logExcludedFiles)", "testcase": false, "constructor": false}, {"identifier": "testForUnsplittable", "parameters": "(FileStatus pathFile)", "modifiers": "protected", "return": "boolean", "signature": "boolean testForUnsplittable(FileStatus pathFile)", "full_signature": "protected boolean testForUnsplittable(FileStatus pathFile)", "class_method_signature": "FileInputFormat.testForUnsplittable(FileStatus pathFile)", "testcase": false, "constructor": false}, {"identifier": "getInflaterInputStreamFactory", "parameters": "(Path path)", "modifiers": "private", "return": "InflaterInputStreamFactory<?>", "signature": "InflaterInputStreamFactory<?> getInflaterInputStreamFactory(Path path)", "full_signature": "private InflaterInputStreamFactory<?> getInflaterInputStreamFactory(Path path)", "class_method_signature": "FileInputFormat.getInflaterInputStreamFactory(Path path)", "testcase": false, "constructor": false}, {"identifier": "acceptFile", "parameters": "(FileStatus fileStatus)", "modifiers": "protected", "return": "boolean", "signature": "boolean acceptFile(FileStatus fileStatus)", "full_signature": "protected boolean acceptFile(FileStatus fileStatus)", "class_method_signature": "FileInputFormat.acceptFile(FileStatus fileStatus)", "testcase": false, "constructor": false}, {"identifier": "getBlockIndexForPosition", "parameters": "(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex)", "modifiers": "private", "return": "int", "signature": "int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex)", "full_signature": "private int getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex)", "class_method_signature": "FileInputFormat.getBlockIndexForPosition(BlockLocation[] blocks, long offset, long halfSplitSize, int startIndex)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(FileInputSplit fileSplit)", "modifiers": "@Override public", "return": "void", "signature": "void open(FileInputSplit fileSplit)", "full_signature": "@Override public void open(FileInputSplit fileSplit)", "class_method_signature": "FileInputFormat.open(FileInputSplit fileSplit)", "testcase": false, "constructor": false}, {"identifier": "decorateInputStream", "parameters": "(FSDataInputStream inputStream, FileInputSplit fileSplit)", "modifiers": "protected", "return": "FSDataInputStream", "signature": "FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit)", "full_signature": "protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit)", "class_method_signature": "FileInputFormat.decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "FileInputFormat.close()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "FileInputFormat.toString()", "testcase": false, "constructor": false}], "file": "flink-core/src/main/java/org/apache/flink/api/common/io/FileInputFormat.java"}, "focal_method": {"identifier": "decorateInputStream", "parameters": "(FSDataInputStream inputStream, FileInputSplit fileSplit)", "modifiers": "protected", "return": "FSDataInputStream", "body": "protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit) throws Throwable {\n\t\t// Wrap stream in a extracting (decompressing) stream if file ends with a known compression file extension.\n\t\tInflaterInputStreamFactory<?> inflaterInputStreamFactory = getInflaterInputStreamFactory(fileSplit.getPath());\n\t\tif (inflaterInputStreamFactory != null) {\n\t\t\treturn new InputStreamFSInputWrapper(inflaterInputStreamFactory.create(stream));\n\t\t}\n\n\t\treturn inputStream;\n\t}", "signature": "FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit)", "full_signature": "protected FSDataInputStream decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit)", "class_method_signature": "FileInputFormat.decorateInputStream(FSDataInputStream inputStream, FileInputSplit fileSplit)", "testcase": false, "constructor": false, "invocations": ["getInflaterInputStreamFactory", "getPath", "create"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}