{"test_class": {"identifier": "AttributeComparatorTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "advanced/attributes/src/test/java/org/arakhne/afc/attrs/attr/AttributeComparatorTest.java"}, "test_case": {"identifier": "testCompareValues", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCompareValues() throws AttributeException {\n\t\tdouble base_d = Math.random();\n\t\tlong base_l = (long)base_d;\n\t\tAttributeValueImpl attr1 = new AttributeValueImpl(base_d);\t\t\n\t\tAttributeValueImpl attr2 = new AttributeValueImpl(base_d+1);\n\t\tAttributeValueImpl attr3 = new AttributeValueImpl(base_d-1);\n\t\t\n\t\tAttributeValueImpl attr4 = new AttributeValueImpl(base_l);\t\t\n\t\tAttributeValueImpl attr5 = new AttributeValueImpl(attr1.getInteger());\n\t\t\n\t\tAttributeValueImpl attr6 = new AttributeValueImpl(\"bonjour\");  //$NON-NLS-1$\n\t\t\n\t\tAttributeComparator comp = new AttributeComparator();\n\t\t\t\n\t\t//----------- attr1 -> *\n\t\tassertEquals(0, comp.compare(attr1,attr1));\n\t\tassertStrictlyNegative(comp.compare(attr1,attr2));\n\t\tassertStrictlyPositive(comp.compare(attr1,attr3));\n\t\tassertPositive(comp.compare(attr1,attr4));\n\t\tassertPositive(comp.compare(attr1,attr5));\n\t\tassertStrictlyNegative(comp.compare(attr1,attr6));\n\n\t\t//----------- attr2 -> *\n\t\tassertStrictlyPositive(comp.compare(attr2,attr1));\n\t\tassertEquals(0, comp.compare(attr2,attr2));\n\t\tassertStrictlyPositive(comp.compare(attr2,attr3));\n\t\tassertStrictlyPositive(comp.compare(attr2,attr4));\n\t\tassertStrictlyPositive(comp.compare(attr2,attr5));\n\t\tassertStrictlyNegative(comp.compare(attr2,attr6));\n\n\t\t//----------- attr3 -> *\n\t\tassertStrictlyNegative(comp.compare(attr3,attr1));\n\t\tassertStrictlyNegative(comp.compare(attr3,attr2));\n\t\tassertEquals(0, comp.compare(attr3,attr3));\n\t\tassertStrictlyNegative(comp.compare(attr3,attr4));\n\t\tassertStrictlyNegative(comp.compare(attr3,attr5));\n\t\tassertStrictlyNegative(comp.compare(attr3,attr6));\n\t\t\n\n\t\t//----------- attr4 -> *\n\t\tassertNegative(comp.compare(attr4,attr1));\n\t\tassertStrictlyNegative(comp.compare(attr4,attr2));\n\t\tassertStrictlyPositive(comp.compare(attr4,attr3));\n\t\tassertEquals(0, comp.compare(attr4,attr4));\n\t\tassertEquals(0,comp.compare(attr4,attr5));\n\t\tassertStrictlyNegative(comp.compare(attr4,attr6));\n\n\t\t//----------- attr5 -> *\n\t\tassertNegative(comp.compare(attr5,attr1));\n\t\tassertStrictlyNegative(comp.compare(attr5,attr2));\n\t\tassertStrictlyPositive(comp.compare(attr5,attr3));\n\t\tassertEquals(0,comp.compare(attr5,attr4));\n\t\tassertEquals(0, comp.compare(attr5,attr5));\n\t\tassertStrictlyNegative(comp.compare(attr5,attr6));\n\n\t\t//----------- attr6 -> *\n\t\tassertStrictlyPositive(comp.compare(attr6,attr1));\n\t\tassertStrictlyPositive(comp.compare(attr6,attr2));\n\t\tassertStrictlyPositive(comp.compare(attr6,attr3));\n\t\tassertStrictlyPositive(comp.compare(attr6,attr4));\n\t\tassertStrictlyPositive(comp.compare(attr6,attr5));\n\t\tassertEquals(0, comp.compare(attr6,attr6));\n\t}", "signature": "void testCompareValues()", "full_signature": "@Test public void testCompareValues()", "class_method_signature": "AttributeComparatorTest.testCompareValues()", "testcase": true, "constructor": false, "invocations": ["random", "getInteger", "assertEquals", "compare", "assertStrictlyNegative", "compare", "assertStrictlyPositive", "compare", "assertPositive", "compare", "assertPositive", "compare", "assertStrictlyNegative", "compare", "assertStrictlyPositive", "compare", "assertEquals", "compare", "assertStrictlyPositive", "compare", "assertStrictlyPositive", "compare", "assertStrictlyPositive", "compare", "assertStrictlyNegative", "compare", "assertStrictlyNegative", "compare", "assertStrictlyNegative", "compare", "assertEquals", "compare", "assertStrictlyNegative", "compare", "assertStrictlyNegative", "compare", "assertStrictlyNegative", "compare", "assertNegative", "compare", "assertStrictlyNegative", "compare", "assertStrictlyPositive", "compare", "assertEquals", "compare", "assertEquals", "compare", "assertStrictlyNegative", "compare", "assertNegative", "compare", "assertStrictlyNegative", "compare", "assertStrictlyPositive", "compare", "assertEquals", "compare", "assertEquals", "compare", "assertStrictlyNegative", "compare", "assertStrictlyPositive", "compare", "assertStrictlyPositive", "compare", "assertStrictlyPositive", "compare", "assertStrictlyPositive", "compare", "assertStrictlyPositive", "compare", "assertEquals", "compare"]}, "focal_class": {"identifier": "AttributeComparator", "superclass": "", "interfaces": "implements Comparator<Attribute>, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = -5930539797174658160L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -5930539797174658160L", "var_name": "serialVersionUID"}], "methods": [{"identifier": "compare", "parameters": "(AttributeValue arg0, AttributeValue arg1)", "modifiers": "@Pure public", "return": "int", "signature": "int compare(AttributeValue arg0, AttributeValue arg1)", "full_signature": "@Pure public int compare(AttributeValue arg0, AttributeValue arg1)", "class_method_signature": "AttributeComparator.compare(AttributeValue arg0, AttributeValue arg1)", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(Attribute arg0, Attribute arg1)", "modifiers": "@Pure @Override public", "return": "int", "signature": "int compare(Attribute arg0, Attribute arg1)", "full_signature": "@Pure @Override public int compare(Attribute arg0, Attribute arg1)", "class_method_signature": "AttributeComparator.compare(Attribute arg0, Attribute arg1)", "testcase": false, "constructor": false}], "file": "advanced/attributes/src/main/java/org/arakhne/afc/attrs/attr/AttributeComparator.java"}, "focal_method": {"identifier": "compare", "parameters": "(AttributeValue arg0, AttributeValue arg1)", "modifiers": "@Pure public", "return": "int", "body": "@Pure\n\tpublic int compare(AttributeValue arg0, AttributeValue arg1) {\n\t\tif ((arg0 instanceof Attribute) && (arg1 instanceof Attribute)) {\n\t\t\treturn compare((Attribute) arg0, (Attribute) arg1);\n\t\t}\n\t\treturn AttributeValueImpl.compareValues(arg0, arg1);\n\t}", "signature": "int compare(AttributeValue arg0, AttributeValue arg1)", "full_signature": "@Pure public int compare(AttributeValue arg0, AttributeValue arg1)", "class_method_signature": "AttributeComparator.compare(AttributeValue arg0, AttributeValue arg1)", "testcase": false, "constructor": false, "invocations": ["compare", "compareValues"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}