{"test_class": {"identifier": "EnumConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final EnumConverter<RoundingMode> testConverter = new EnumConverter<>(RoundingMode.class);", "modifier": "private final", "type": "EnumConverter<RoundingMode>", "declarator": "testConverter = new EnumConverter<>(RoundingMode.class)", "var_name": "testConverter"}, {"original_string": "private final ConversionContext DUMMY_CONTEXT = new ConversionContext.Builder(\"someKey\", TypeLiteral.of(Enum.class))\n            .build();", "modifier": "private final", "type": "ConversionContext", "declarator": "DUMMY_CONTEXT = new ConversionContext.Builder(\"someKey\", TypeLiteral.of(Enum.class))\n            .build()", "var_name": "DUMMY_CONTEXT"}], "file": "code/spi-support/src/test/java/org/apache/tamaya/spisupport/EnumConverterTest.java"}, "test_case": {"identifier": "testEqualsAndHash", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEqualsAndHash() {\n        EnumConverter converter1 = new EnumConverter<>(RoundingMode.class);\n        EnumConverter converter2 = new EnumConverter<>(RoundingMode.class);\n        EnumConverter converter3 = new EnumConverter<>(TestEnum.class);\n\n        assertThat(converter1).isEqualTo(converter1);\n        assertThat(converter1).isNotEqualTo(null);\n        assertThat(converter1).isNotEqualTo(\"aString\");\n        assertThat(\"aString\").isNotEqualTo(converter1);\n        assertThat(converter2).isEqualTo(converter1);\n        assertThat(converter1).isNotEqualTo(converter3);\n        assertThat(converter2.hashCode()).isEqualTo(converter1.hashCode());\n        assertThat(converter1.hashCode()).isNotEqualTo(converter3.hashCode());\n    }", "signature": "void testEqualsAndHash()", "full_signature": "@Test public void testEqualsAndHash()", "class_method_signature": "EnumConverterTest.testEqualsAndHash()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "isNotEqualTo", "assertThat", "isNotEqualTo", "assertThat", "isNotEqualTo", "assertThat", "isEqualTo", "assertThat", "isNotEqualTo", "assertThat", "isEqualTo", "assertThat", "hashCode", "hashCode", "isNotEqualTo", "assertThat", "hashCode", "hashCode"]}, "focal_class": {"identifier": "EnumConverter", "superclass": "", "interfaces": "implements PropertyConverter<T>", "fields": [{"original_string": "private final Logger LOG = Logger.getLogger(EnumConverter.class.getName());", "modifier": "private final", "type": "Logger", "declarator": "LOG = Logger.getLogger(EnumConverter.class.getName())", "var_name": "LOG"}, {"original_string": "private Class<T> enumType;", "modifier": "private", "type": "Class<T>", "declarator": "enumType", "var_name": "enumType"}, {"original_string": "private Method factory;", "modifier": "private", "type": "Method", "declarator": "factory", "var_name": "factory"}], "methods": [{"identifier": "EnumConverter", "parameters": "(Class<T> enumType)", "modifiers": "public", "return": "", "signature": " EnumConverter(Class<T> enumType)", "full_signature": "public  EnumConverter(Class<T> enumType)", "class_method_signature": "EnumConverter.EnumConverter(Class<T> enumType)", "testcase": false, "constructor": true}, {"identifier": "convert", "parameters": "(String value, ConversionContext ctx)", "modifiers": "@Override public", "return": "T", "signature": "T convert(String value, ConversionContext ctx)", "full_signature": "@Override public T convert(String value, ConversionContext ctx)", "class_method_signature": "EnumConverter.convert(String value, ConversionContext ctx)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "EnumConverter.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "EnumConverter.hashCode()", "testcase": false, "constructor": false}], "file": "code/spi-support/src/main/java/org/apache/tamaya/spisupport/EnumConverter.java"}, "focal_method": {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int hashCode() {\n        return Objects.hash(enumType);\n    }", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "EnumConverter.hashCode()", "testcase": false, "constructor": false, "invocations": ["hash"]}, "repository": {"repo_id": 26951044, "url": "https://github.com/apache/incubator-tamaya", "language": "Java", "is_fork": false, "fork_count": 33, "stargazer_count": 44, "size": 7630, "license": "licensed"}}