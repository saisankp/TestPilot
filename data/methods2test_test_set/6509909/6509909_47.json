{"test_class": {"identifier": "AnagramsTest", "superclass": "", "interfaces": "", "fields": [], "file": "anagrams/20141012-paul/src/test/java/AnagramsTest.java"}, "test_case": {"identifier": "testSwapSecondLetterIntoThirdPosition", "parameters": "()", "modifiers": "@Ignore // TODO @Test public", "return": "void", "body": "@Ignore // TODO\n    @Test\n    public void testSwapSecondLetterIntoThirdPosition() throws Exception {\n        String input = \"biro\";\n\n        List<String> output = Anagrams.generate(input);\n\n        assertThat(output).contains(\"brio\");\n    }", "signature": "void testSwapSecondLetterIntoThirdPosition()", "full_signature": "@Ignore // TODO @Test public void testSwapSecondLetterIntoThirdPosition()", "class_method_signature": "AnagramsTest.testSwapSecondLetterIntoThirdPosition()", "testcase": true, "constructor": false, "invocations": ["generate", "contains", "assertThat"]}, "focal_class": {"identifier": "Anagrams", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "generate", "parameters": "(String input)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> generate(String input)", "full_signature": "public static List<String> generate(String input)", "class_method_signature": "Anagrams.generate(String input)", "testcase": false, "constructor": false}, {"identifier": "calculateTotalAnagramsForWordSize", "parameters": "(int size)", "modifiers": "private static", "return": "int", "signature": "int calculateTotalAnagramsForWordSize(int size)", "full_signature": "private static int calculateTotalAnagramsForWordSize(int size)", "class_method_signature": "Anagrams.calculateTotalAnagramsForWordSize(int size)", "testcase": false, "constructor": false}, {"identifier": "calculatePickPosition", "parameters": "(int maxPosition, int iteration)", "modifiers": "private static", "return": "int", "signature": "int calculatePickPosition(int maxPosition, int iteration)", "full_signature": "private static int calculatePickPosition(int maxPosition, int iteration)", "class_method_signature": "Anagrams.calculatePickPosition(int maxPosition, int iteration)", "testcase": false, "constructor": false}, {"identifier": "calculateDropPosition", "parameters": "(int maxPosition, int pickUpPosition, int iteration)", "modifiers": "private static", "return": "int", "signature": "int calculateDropPosition(int maxPosition, int pickUpPosition, int iteration)", "full_signature": "private static int calculateDropPosition(int maxPosition, int pickUpPosition, int iteration)", "class_method_signature": "Anagrams.calculateDropPosition(int maxPosition, int pickUpPosition, int iteration)", "testcase": false, "constructor": false}], "file": "anagrams/20141012-paul/src/main/java/Anagrams.java"}, "focal_method": {"identifier": "generate", "parameters": "(String input)", "modifiers": "public static", "return": "List<String>", "body": "public static List<String> generate(String input) {\n        List<String> anagrams = new ArrayList<String>();\n\n        char[] chars = input.toCharArray();\n        int inputLength = chars.length;\n        int maxAnagrams = calculateTotalAnagramsForWordSize(inputLength);\n\n        for (int a = 0; a < maxAnagrams; a++) {\n            int pickPosition = calculatePickPosition(inputLength, a);\n            System.out.println(\"pick at \" + pickPosition);\n            int dropPosition = calculateDropPosition(inputLength, pickPosition, a);\n            System.out.println(\"drop at \" + dropPosition);\n            char movingLetter = chars[pickPosition];\n//            System.out.println(\"moving \" + movingLetter);\n            System.out.println(\"moving \" + movingLetter);\n            char[] output = new char[inputLength];\n            for (int i = 0; i < inputLength; i++) {\n                if (dropPosition == i) {\n                    output[dropPosition] = movingLetter;\n                    output[pickPosition] = chars[i];\n                } else {\n                    output[i] = chars[i];\n                }\n            }\n            anagrams.add(String.valueOf(output));\n        }\n        return anagrams;\n    }", "signature": "List<String> generate(String input)", "full_signature": "public static List<String> generate(String input)", "class_method_signature": "Anagrams.generate(String input)", "testcase": false, "constructor": false, "invocations": ["toCharArray", "calculateTotalAnagramsForWordSize", "calculatePickPosition", "println", "calculateDropPosition", "println", "println", "add", "valueOf"]}, "repository": {"repo_id": 6509909, "url": "https://github.com/novoda/dojos", "language": "Java", "is_fork": false, "fork_count": 21, "stargazer_count": 72, "size": 12987, "license": "licensed"}}