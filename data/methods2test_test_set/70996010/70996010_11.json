{"test_class": {"identifier": "FileHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Context mockContext;", "modifier": "", "type": "Context", "declarator": "mockContext", "var_name": "mockContext"}, {"original_string": "AssetManager mockAssets;", "modifier": "", "type": "AssetManager", "declarator": "mockAssets", "var_name": "mockAssets"}, {"original_string": "int testResult;", "modifier": "", "type": "int", "declarator": "testResult", "var_name": "testResult"}], "file": "app/src/test/java/org/jak_linux/dns66/FileHelperTest.java"}, "test_case": {"identifier": "testCloseOrWarn_fileDescriptor", "parameters": "()", "modifiers": "@Test @PrepareForTest({Log.class, Os.class}) public", "return": "void", "body": "@Test\n    @PrepareForTest({Log.class, Os.class})\n    public void testCloseOrWarn_fileDescriptor() throws Exception {\n        FileDescriptor fd = mock(FileDescriptor.class);\n        mockStatic(Log.class);\n        mockStatic(Os.class);\n        when(Log.e(anyString(), anyString(), any(Throwable.class))).then(new CountingAnswer(null));\n\n        // Closing null should work just fine\n        testResult = 0;\n        assertNull(FileHelper.closeOrWarn((FileDescriptor) null, \"tag\", \"msg\"));\n        assertEquals(0, testResult);\n\n        // Successfully closing the file should not log.\n        testResult = 0;\n        assertNull(FileHelper.closeOrWarn(fd, \"tag\", \"msg\"));\n        assertEquals(0, testResult);\n\n        // If closing fails, it should log.\n        testResult = 0;\n        doThrow(new ErrnoException(\"close\", 0)).when(Os.class, \"close\", any(FileDescriptor.class));\n        assertNull(FileHelper.closeOrWarn(fd, \"tag\", \"msg\"));\n        assertEquals(1, testResult);\n    }", "signature": "void testCloseOrWarn_fileDescriptor()", "full_signature": "@Test @PrepareForTest({Log.class, Os.class}) public void testCloseOrWarn_fileDescriptor()", "class_method_signature": "FileHelperTest.testCloseOrWarn_fileDescriptor()", "testcase": true, "constructor": false, "invocations": ["mock", "mockStatic", "mockStatic", "then", "when", "e", "anyString", "anyString", "any", "assertNull", "closeOrWarn", "assertEquals", "assertNull", "closeOrWarn", "assertEquals", "when", "doThrow", "any", "assertNull", "closeOrWarn", "assertEquals"]}, "focal_class": {"identifier": "FileHelper", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "openRead", "parameters": "(Context context, String filename)", "modifiers": "public static", "return": "InputStream", "signature": "InputStream openRead(Context context, String filename)", "full_signature": "public static InputStream openRead(Context context, String filename)", "class_method_signature": "FileHelper.openRead(Context context, String filename)", "testcase": false, "constructor": false}, {"identifier": "openWrite", "parameters": "(Context context, String filename)", "modifiers": "public static", "return": "OutputStream", "signature": "OutputStream openWrite(Context context, String filename)", "full_signature": "public static OutputStream openWrite(Context context, String filename)", "class_method_signature": "FileHelper.openWrite(Context context, String filename)", "testcase": false, "constructor": false}, {"identifier": "readConfigFile", "parameters": "(Context context, String name, boolean defaultsOnly)", "modifiers": "private static", "return": "Configuration", "signature": "Configuration readConfigFile(Context context, String name, boolean defaultsOnly)", "full_signature": "private static Configuration readConfigFile(Context context, String name, boolean defaultsOnly)", "class_method_signature": "FileHelper.readConfigFile(Context context, String name, boolean defaultsOnly)", "testcase": false, "constructor": false}, {"identifier": "loadCurrentSettings", "parameters": "(Context context)", "modifiers": "public static", "return": "Configuration", "signature": "Configuration loadCurrentSettings(Context context)", "full_signature": "public static Configuration loadCurrentSettings(Context context)", "class_method_signature": "FileHelper.loadCurrentSettings(Context context)", "testcase": false, "constructor": false}, {"identifier": "loadPreviousSettings", "parameters": "(Context context)", "modifiers": "public static", "return": "Configuration", "signature": "Configuration loadPreviousSettings(Context context)", "full_signature": "public static Configuration loadPreviousSettings(Context context)", "class_method_signature": "FileHelper.loadPreviousSettings(Context context)", "testcase": false, "constructor": false}, {"identifier": "loadDefaultSettings", "parameters": "(Context context)", "modifiers": "public static", "return": "Configuration", "signature": "Configuration loadDefaultSettings(Context context)", "full_signature": "public static Configuration loadDefaultSettings(Context context)", "class_method_signature": "FileHelper.loadDefaultSettings(Context context)", "testcase": false, "constructor": false}, {"identifier": "writeSettings", "parameters": "(Context context, Configuration config)", "modifiers": "public static", "return": "void", "signature": "void writeSettings(Context context, Configuration config)", "full_signature": "public static void writeSettings(Context context, Configuration config)", "class_method_signature": "FileHelper.writeSettings(Context context, Configuration config)", "testcase": false, "constructor": false}, {"identifier": "getItemFile", "parameters": "(Context context, Configuration.Item item)", "modifiers": "public static", "return": "File", "signature": "File getItemFile(Context context, Configuration.Item item)", "full_signature": "public static File getItemFile(Context context, Configuration.Item item)", "class_method_signature": "FileHelper.getItemFile(Context context, Configuration.Item item)", "testcase": false, "constructor": false}, {"identifier": "openItemFile", "parameters": "(Context context, Configuration.Item item)", "modifiers": "public static", "return": "InputStreamReader", "signature": "InputStreamReader openItemFile(Context context, Configuration.Item item)", "full_signature": "public static InputStreamReader openItemFile(Context context, Configuration.Item item)", "class_method_signature": "FileHelper.openItemFile(Context context, Configuration.Item item)", "testcase": false, "constructor": false}, {"identifier": "poll", "parameters": "(StructPollfd[] fds, int timeout)", "modifiers": "public static", "return": "int", "signature": "int poll(StructPollfd[] fds, int timeout)", "full_signature": "public static int poll(StructPollfd[] fds, int timeout)", "class_method_signature": "FileHelper.poll(StructPollfd[] fds, int timeout)", "testcase": false, "constructor": false}, {"identifier": "closeOrWarn", "parameters": "(FileDescriptor fd, String tag, String message)", "modifiers": "public static", "return": "FileDescriptor", "signature": "FileDescriptor closeOrWarn(FileDescriptor fd, String tag, String message)", "full_signature": "public static FileDescriptor closeOrWarn(FileDescriptor fd, String tag, String message)", "class_method_signature": "FileHelper.closeOrWarn(FileDescriptor fd, String tag, String message)", "testcase": false, "constructor": false}, {"identifier": "closeOrWarn", "parameters": "(T fd, String tag, String message)", "modifiers": "public static", "return": "T", "signature": "T closeOrWarn(T fd, String tag, String message)", "full_signature": "public static T closeOrWarn(T fd, String tag, String message)", "class_method_signature": "FileHelper.closeOrWarn(T fd, String tag, String message)", "testcase": false, "constructor": false}], "file": "app/src/main/java/org/jak_linux/dns66/FileHelper.java"}, "focal_method": {"identifier": "closeOrWarn", "parameters": "(FileDescriptor fd, String tag, String message)", "modifiers": "public static", "return": "FileDescriptor", "body": "public static FileDescriptor closeOrWarn(FileDescriptor fd, String tag, String message) {\n        try {\n            if (fd != null)\n                Os.close(fd);\n        } catch (ErrnoException e) {\n            Log.e(tag, \"closeOrWarn: \" + message, e);\n        } finally {\n            return null;\n        }\n    }", "signature": "FileDescriptor closeOrWarn(FileDescriptor fd, String tag, String message)", "full_signature": "public static FileDescriptor closeOrWarn(FileDescriptor fd, String tag, String message)", "class_method_signature": "FileHelper.closeOrWarn(FileDescriptor fd, String tag, String message)", "testcase": false, "constructor": false, "invocations": ["close", "e"]}, "repository": {"repo_id": 70996010, "url": "https://github.com/julian-klode/dns66", "stars": 1372, "created": "10/15/2016 3:27:17 PM +00:00", "updates": "2020-01-26T10:51:30+00:00", "fork": "False", "license": "licensed"}}