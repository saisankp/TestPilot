{"test_class": {"identifier": "ChainCallReceiverTest", "superclass": "extends PluginsLoadingTestBase", "interfaces": "", "fields": [], "file": "CoreFeatures/MessageProcessing/ChainCallReceiver/src/test/java/info/smart_tools/smartactors/message_processing/chain_call_receiver/ChainCallReceiverTest.java"}, "test_case": {"identifier": "Should_applyStrategy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void Should_applyStrategy()\n            throws Exception {\n        IChainStorage chainStorageMock = mock(IChainStorage.class);\n        IChainChoiceStrategy chainChoiceStrategyMock = mock(IChainChoiceStrategy.class);\n\n        Object chainIdMock = mock(Object.class);\n        IReceiverChain chainMock = mock(IReceiverChain.class);\n        IMessageProcessor messageProcessorMock = mock(IMessageProcessor.class);\n        IMessageProcessingSequence sequenceMock = mock(IMessageProcessingSequence.class);\n        ChainChoiceException exceptionMock = mock(ChainChoiceException.class);\n        IObject chainDescriptionMock = mock(IObject.class);\n        IObject contextMock = mock(IObject.class);\n\n        IMessageReceiver receiver = new ChainCallReceiver(chainStorageMock, chainChoiceStrategyMock);\n\n        when(chainChoiceStrategyMock.chooseChain(same(messageProcessorMock))).thenReturn(chainIdMock);\n        when(chainStorageMock.resolve(same(chainIdMock))).thenReturn(chainMock);\n        when(messageProcessorMock.getSequence()).thenReturn(sequenceMock);\n        when(messageProcessorMock.getContext()).thenReturn(contextMock);\n        when(chainMock.getChainDescription()).thenReturn(chainDescriptionMock);\n        when(chainDescriptionMock.getValue(new FieldName(\"externalAccess\"))).thenReturn(true);\n\n        receiver.receive(messageProcessorMock);\n\n        verify(sequenceMock).callChain(same(chainMock));\n\n        when(chainChoiceStrategyMock.chooseChain(same(messageProcessorMock))).thenThrow(exceptionMock);\n\n        try {\n            receiver.receive(messageProcessorMock);\n            fail();\n        } catch (MessageReceiveException e) {\n            assertSame(exceptionMock, e.getCause());\n        }\n    }", "signature": "void Should_applyStrategy()", "full_signature": "@Test public void Should_applyStrategy()", "class_method_signature": "ChainCallReceiverTest.Should_applyStrategy()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "mock", "mock", "mock", "mock", "mock", "mock", "thenReturn", "when", "chooseChain", "same", "thenReturn", "when", "resolve", "same", "thenReturn", "when", "getSequence", "thenReturn", "when", "getContext", "thenReturn", "when", "getChainDescription", "thenReturn", "when", "getValue", "receive", "callChain", "verify", "same", "thenThrow", "when", "chooseChain", "same", "receive", "fail", "assertSame", "getCause"]}, "focal_class": {"identifier": "ChainCallReceiver", "superclass": "", "interfaces": "implements IMessageReceiver", "fields": [{"original_string": "private final IFieldName externalAccessFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "externalAccessFieldName", "var_name": "externalAccessFieldName"}, {"original_string": "private final IFieldName fromExternalFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "fromExternalFieldName", "var_name": "fromExternalFieldName"}, {"original_string": "private final IFieldName accessForbiddenFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "accessForbiddenFieldName", "var_name": "accessForbiddenFieldName"}, {"original_string": "private IChainStorage chainStorage;", "modifier": "private", "type": "IChainStorage", "declarator": "chainStorage", "var_name": "chainStorage"}, {"original_string": "private IChainChoiceStrategy chainChoiceStrategy;", "modifier": "private", "type": "IChainChoiceStrategy", "declarator": "chainChoiceStrategy", "var_name": "chainChoiceStrategy"}], "methods": [{"identifier": "ChainCallReceiver", "parameters": "(final IChainStorage chainStorage, final IChainChoiceStrategy chainChoiceStrategy)", "modifiers": "public", "return": "", "signature": " ChainCallReceiver(final IChainStorage chainStorage, final IChainChoiceStrategy chainChoiceStrategy)", "full_signature": "public  ChainCallReceiver(final IChainStorage chainStorage, final IChainChoiceStrategy chainChoiceStrategy)", "class_method_signature": "ChainCallReceiver.ChainCallReceiver(final IChainStorage chainStorage, final IChainChoiceStrategy chainChoiceStrategy)", "testcase": false, "constructor": true}, {"identifier": "receive", "parameters": "(final IMessageProcessor processor)", "modifiers": "@Override public", "return": "void", "signature": "void receive(final IMessageProcessor processor)", "full_signature": "@Override public void receive(final IMessageProcessor processor)", "class_method_signature": "ChainCallReceiver.receive(final IMessageProcessor processor)", "testcase": false, "constructor": false}, {"identifier": "checkAccess", "parameters": "(final IReceiverChain chain, final IMessageProcessor processor)", "modifiers": "private", "return": "void", "signature": "void checkAccess(final IReceiverChain chain, final IMessageProcessor processor)", "full_signature": "private void checkAccess(final IReceiverChain chain, final IMessageProcessor processor)", "class_method_signature": "ChainCallReceiver.checkAccess(final IReceiverChain chain, final IMessageProcessor processor)", "testcase": false, "constructor": false}], "file": "CoreFeatures/MessageProcessing/ChainCallReceiver/src/main/java/info/smart_tools/smartactors/message_processing/chain_call_receiver/ChainCallReceiver.java"}, "focal_method": {"identifier": "receive", "parameters": "(final IMessageProcessor processor)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void receive(final IMessageProcessor processor)\n            throws MessageReceiveException {\n        try {\n            Object chainId = chainChoiceStrategy.chooseChain(processor);\n            IReceiverChain chain = chainStorage.resolve(chainId);\n            checkAccess(chain, processor);\n            processor.getSequence().callChain(chain);\n        } catch (ChainChoiceException | ChainNotFoundException | NestedChainStackOverflowException e) {\n            throw new MessageReceiveException(\"Could not call nested chain.\", e);\n        }\n    }", "signature": "void receive(final IMessageProcessor processor)", "full_signature": "@Override public void receive(final IMessageProcessor processor)", "class_method_signature": "ChainCallReceiver.receive(final IMessageProcessor processor)", "testcase": false, "constructor": false, "invocations": ["chooseChain", "resolve", "checkAccess", "callChain", "getSequence"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}