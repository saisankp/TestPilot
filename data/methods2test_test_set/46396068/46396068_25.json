{"test_class": {"identifier": "RatioNumberTest", "superclass": "", "interfaces": "", "fields": [], "file": "hbase0.98/hbase-common-0.98/src/test/java/com/kakao/hbase/common/RatioNumberTest.java"}, "test_case": {"identifier": "testAddZero", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddZero() throws Exception {\n        Number ratioNumber = new RatioNumber(10, 0.1);\n        Number zero = 0;\n\n        assertEquals(ratioNumber, LoadEntry.DataLocality.add(ratioNumber, zero));\n        assertEquals(ratioNumber, LoadEntry.DataLocality.add(zero, ratioNumber));\n        assertEquals(zero, LoadEntry.DataLocality.add(zero, zero));\n    }", "signature": "void testAddZero()", "full_signature": "@Test public void testAddZero()", "class_method_signature": "RatioNumberTest.testAddZero()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "add", "assertEquals", "add", "assertEquals", "add"]}, "focal_class": {"identifier": "RatioNumber", "superclass": "extends Number", "interfaces": "implements Comparable<RatioNumber>", "fields": [{"original_string": "public static final RatioNumber ZERO = new RatioNumber(0, 0);", "modifier": "public static final", "type": "RatioNumber", "declarator": "ZERO = new RatioNumber(0, 0)", "var_name": "ZERO"}, {"original_string": "private final double ratio;", "modifier": "private final", "type": "double", "declarator": "ratio", "var_name": "ratio"}, {"original_string": "private final double value;", "modifier": "private final", "type": "double", "declarator": "value", "var_name": "value"}], "methods": [{"identifier": "RatioNumber", "parameters": "(double value, double ratio)", "modifiers": "public", "return": "", "signature": " RatioNumber(double value, double ratio)", "full_signature": "public  RatioNumber(double value, double ratio)", "class_method_signature": "RatioNumber.RatioNumber(double value, double ratio)", "testcase": false, "constructor": true}, {"identifier": "valueOf", "parameters": "(String valueString)", "modifiers": "public static", "return": "RatioNumber", "signature": "RatioNumber valueOf(String valueString)", "full_signature": "public static RatioNumber valueOf(String valueString)", "class_method_signature": "RatioNumber.valueOf(String valueString)", "testcase": false, "constructor": false}, {"identifier": "intValue", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int intValue()", "full_signature": "@Override public int intValue()", "class_method_signature": "RatioNumber.intValue()", "testcase": false, "constructor": false}, {"identifier": "longValue", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long longValue()", "full_signature": "@Override public long longValue()", "class_method_signature": "RatioNumber.longValue()", "testcase": false, "constructor": false}, {"identifier": "floatValue", "parameters": "()", "modifiers": "@Override public", "return": "float", "signature": "float floatValue()", "full_signature": "@Override public float floatValue()", "class_method_signature": "RatioNumber.floatValue()", "testcase": false, "constructor": false}, {"identifier": "doubleValue", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double doubleValue()", "full_signature": "@Override public double doubleValue()", "class_method_signature": "RatioNumber.doubleValue()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(RatioNumber other)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(RatioNumber other)", "full_signature": "@Override public int compareTo(RatioNumber other)", "class_method_signature": "RatioNumber.compareTo(RatioNumber other)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(RatioNumber other)", "modifiers": "public", "return": "RatioNumber", "signature": "RatioNumber add(RatioNumber other)", "full_signature": "public RatioNumber add(RatioNumber other)", "class_method_signature": "RatioNumber.add(RatioNumber other)", "testcase": false, "constructor": false}, {"identifier": "value", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double value()", "full_signature": "public double value()", "class_method_signature": "RatioNumber.value()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "RatioNumber.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "RatioNumber.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RatioNumber.toString()", "testcase": false, "constructor": false}], "file": "hbase0.98/hbase-common-0.98/src/main/java/com/kakao/hbase/common/RatioNumber.java"}, "focal_method": {"identifier": "add", "parameters": "(RatioNumber other)", "modifiers": "public", "return": "RatioNumber", "body": "public RatioNumber add(RatioNumber other) {\n        if (other == null) {\n            return new RatioNumber(this.value, this.ratio);\n        } else {\n            if (this.equals(RatioNumber.ZERO)) {\n                return new RatioNumber(other.value, other.ratio);\n            } else if (other.equals(RatioNumber.ZERO)) {\n                return new RatioNumber(this.value, this.ratio);\n            } else {\n                double value = this.value + other.value;\n                double ratio = (this.ratio * this.value + other.ratio * other.value) / value;\n                return new RatioNumber(value, ratio);\n            }\n        }\n    }", "signature": "RatioNumber add(RatioNumber other)", "full_signature": "public RatioNumber add(RatioNumber other)", "class_method_signature": "RatioNumber.add(RatioNumber other)", "testcase": false, "constructor": false, "invocations": ["equals", "equals"]}, "repository": {"repo_id": 46396068, "url": "https://github.com/kakao/hbase-tools", "language": "Java", "is_fork": false, "fork_count": 21, "stargazer_count": 49, "size": 1758, "license": "licensed"}}