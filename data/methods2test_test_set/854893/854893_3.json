{"test_class": {"identifier": "ClassUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "preon-el/src/test/java/org/codehaus/preon/el/util/ClassUtilsTest.java"}, "test_case": {"identifier": "testCommonSuperType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCommonSuperType() {\n        assertEquals(Number.class, ClassUtils.calculateCommonSuperType(Byte.class, Integer.class));\n        assertEquals(Number.class, ClassUtils.calculateCommonSuperType(double.class, Integer.class));\n        assertEquals(Integer.class, ClassUtils.calculateCommonSuperType(int.class, Integer.class));\n        assertEquals(Object.class, ClassUtils.calculateCommonSuperType(Byte.class, String.class));\n    }", "signature": "void testCommonSuperType()", "full_signature": "@Test public void testCommonSuperType()", "class_method_signature": "ClassUtilsTest.testCommonSuperType()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "calculateCommonSuperType", "assertEquals", "calculateCommonSuperType", "assertEquals", "calculateCommonSuperType", "assertEquals", "calculateCommonSuperType"]}, "focal_class": {"identifier": "ClassUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "calculateCommonSuperType", "parameters": "(Class<?>... types)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> calculateCommonSuperType(Class<?>... types)", "full_signature": "public static Class<?> calculateCommonSuperType(Class<?>... types)", "class_method_signature": "ClassUtils.calculateCommonSuperType(Class<?>... types)", "testcase": false, "constructor": false}, {"identifier": "calculateCommonSuperType", "parameters": "(Class<?> first,\n            Class<?> second)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> calculateCommonSuperType(Class<?> first,\n            Class<?> second)", "full_signature": "public static Class<?> calculateCommonSuperType(Class<?> first,\n            Class<?> second)", "class_method_signature": "ClassUtils.calculateCommonSuperType(Class<?> first,\n            Class<?> second)", "testcase": false, "constructor": false}, {"identifier": "getBoxedType", "parameters": "(Class<?> type)", "modifiers": "private static", "return": "Class<?>", "signature": "Class<?> getBoxedType(Class<?> type)", "full_signature": "private static Class<?> getBoxedType(Class<?> type)", "class_method_signature": "ClassUtils.getBoxedType(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "getGuaranteedBoxedVersion", "parameters": "(Class<?> type)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getGuaranteedBoxedVersion(Class<?> type)", "full_signature": "public static Class<?> getGuaranteedBoxedVersion(Class<?> type)", "class_method_signature": "ClassUtils.getGuaranteedBoxedVersion(Class<?> type)", "testcase": false, "constructor": false}], "file": "preon-el/src/main/java/org/codehaus/preon/el/util/ClassUtils.java"}, "focal_method": {"identifier": "calculateCommonSuperType", "parameters": "(Class<?>... types)", "modifiers": "public static", "return": "Class<?>", "body": "public static Class<?> calculateCommonSuperType(Class<?>... types) {\n        switch (types.length) {\n            case 0:\n                return null;\n            case 1:\n                return types[0];\n            case 2:\n                return calculateCommonSuperType(types[0], types[1]);\n            default: {\n                Class<?> common = types[0];\n                for (int i = 1; i < types.length; i++) {\n                    if (common == java.lang.Object.class) {\n                        break;\n                    }\n                    common = calculateCommonSuperType(common, types[i]);\n                }\n                return common;\n            }\n        }\n    }", "signature": "Class<?> calculateCommonSuperType(Class<?>... types)", "full_signature": "public static Class<?> calculateCommonSuperType(Class<?>... types)", "class_method_signature": "ClassUtils.calculateCommonSuperType(Class<?>... types)", "testcase": false, "constructor": false, "invocations": ["calculateCommonSuperType", "calculateCommonSuperType"]}, "repository": {"repo_id": 854893, "url": "https://github.com/preon/preon", "language": "Java", "is_fork": false, "fork_count": 78, "stargazer_count": 155, "size": 2459, "license": "licensed"}}