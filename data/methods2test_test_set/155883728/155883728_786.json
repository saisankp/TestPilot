{"test_class": {"identifier": "DefaultPackagingServiceTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/net/adamcin/oakpal/core/DefaultPackagingServiceTest.java"}, "test_case": {"identifier": "testCreatePackageDefinition", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreatePackageDefinition() throws Exception {\n        final DefaultPackagingService service = new DefaultPackagingService();\n        File testPack = TestPackageUtil.prepareTestPackage(\"test-package-with-etc.zip\");\n        new OakMachine.Builder().build().adminInitAndInspect(session -> {\n            JcrPackageManager manager = service.getPackageManager(session);\n            JcrPackage jcrPackage = null;\n            try {\n                jcrPackage = manager.upload(testPack, false, true, null);\n                JcrPackageDefinition def = service.createPackageDefinition(jcrPackage.getDefNode());\n                assertTrue(\"should be real definition\", def instanceof JcrPackageDefinitionImpl);\n            } finally {\n                if (jcrPackage != null) {\n                    jcrPackage.close();\n                }\n            }\n        });\n    }", "signature": "void testCreatePackageDefinition()", "full_signature": "@Test public void testCreatePackageDefinition()", "class_method_signature": "DefaultPackagingServiceTest.testCreatePackageDefinition()", "testcase": true, "constructor": false, "invocations": ["prepareTestPackage", "adminInitAndInspect", "build", "getPackageManager", "upload", "createPackageDefinition", "getDefNode", "assertTrue", "close"]}, "focal_class": {"identifier": "DefaultPackagingService", "superclass": "", "interfaces": "implements Packaging", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(DefaultPackagingService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DefaultPackagingService.class)", "var_name": "LOGGER"}, {"original_string": "private static final String JCR_PACK_MAN_IMPL_CLASS = \"org.apache.jackrabbit.vault.packaging.impl.JcrPackageManagerImpl\";", "modifier": "private static final", "type": "String", "declarator": "JCR_PACK_MAN_IMPL_CLASS = \"org.apache.jackrabbit.vault.packaging.impl.JcrPackageManagerImpl\"", "var_name": "JCR_PACK_MAN_IMPL_CLASS"}, {"original_string": "Class<? extends JcrPackageManager> jcrPackageManagerClazz;", "modifier": "", "type": "Class<? extends JcrPackageManager>", "declarator": "jcrPackageManagerClazz", "var_name": "jcrPackageManagerClazz"}], "methods": [{"identifier": "DefaultPackagingService", "parameters": "()", "modifiers": "@SuppressWarnings(\"WeakerAccess\")", "return": "", "signature": " DefaultPackagingService()", "full_signature": "@SuppressWarnings(\"WeakerAccess\")  DefaultPackagingService()", "class_method_signature": "DefaultPackagingService.DefaultPackagingService()", "testcase": false, "constructor": true}, {"identifier": "DefaultPackagingService", "parameters": "(final @NotNull ClassLoader classLoader)", "modifiers": "", "return": "", "signature": " DefaultPackagingService(final @NotNull ClassLoader classLoader)", "full_signature": "  DefaultPackagingService(final @NotNull ClassLoader classLoader)", "class_method_signature": "DefaultPackagingService.DefaultPackagingService(final @NotNull ClassLoader classLoader)", "testcase": false, "constructor": true}, {"identifier": "getPackageManager", "parameters": "()", "modifiers": "@Override public", "return": "PackageManager", "signature": "PackageManager getPackageManager()", "full_signature": "@Override public PackageManager getPackageManager()", "class_method_signature": "DefaultPackagingService.getPackageManager()", "testcase": false, "constructor": false}, {"identifier": "getPackageManager", "parameters": "(final Session session)", "modifiers": "@Override public", "return": "JcrPackageManager", "signature": "JcrPackageManager getPackageManager(final Session session)", "full_signature": "@Override public JcrPackageManager getPackageManager(final Session session)", "class_method_signature": "DefaultPackagingService.getPackageManager(final Session session)", "testcase": false, "constructor": false}, {"identifier": "createPackageDefinition", "parameters": "(final Node defNode)", "modifiers": "@Override public", "return": "JcrPackageDefinition", "signature": "JcrPackageDefinition createPackageDefinition(final Node defNode)", "full_signature": "@Override public JcrPackageDefinition createPackageDefinition(final Node defNode)", "class_method_signature": "DefaultPackagingService.createPackageDefinition(final Node defNode)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(final Node node, final boolean allowInvalid)", "modifiers": "@Override public", "return": "JcrPackage", "signature": "JcrPackage open(final Node node, final boolean allowInvalid)", "full_signature": "@Override public JcrPackage open(final Node node, final boolean allowInvalid)", "class_method_signature": "DefaultPackagingService.open(final Node node, final boolean allowInvalid)", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/DefaultPackagingService.java"}, "focal_method": {"identifier": "createPackageDefinition", "parameters": "(final Node defNode)", "modifiers": "@Override public", "return": "JcrPackageDefinition", "body": "@Override\n    public JcrPackageDefinition createPackageDefinition(final Node defNode) {\n        return PackagingService.createPackageDefinition(defNode);\n    }", "signature": "JcrPackageDefinition createPackageDefinition(final Node defNode)", "full_signature": "@Override public JcrPackageDefinition createPackageDefinition(final Node defNode)", "class_method_signature": "DefaultPackagingService.createPackageDefinition(final Node defNode)", "testcase": false, "constructor": false, "invocations": ["createPackageDefinition"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}