{"test_class": {"identifier": "MongoDbFeatureExecutorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TemporaryFolder tmpFolder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "tmpFolder = new TemporaryFolder()", "var_name": "tmpFolder"}, {"original_string": "@Mock\n    private FeatureResolver featureResolver;", "modifier": "@Mock\n    private", "type": "FeatureResolver", "declarator": "featureResolver", "var_name": "featureResolver"}, {"original_string": "@Mock\n    private MongoDatabase connection;", "modifier": "@Mock\n    private", "type": "MongoDatabase", "declarator": "connection", "var_name": "connection"}, {"original_string": "@Mock\n    private CleanupStrategy cleanupStrategy;", "modifier": "@Mock\n    private", "type": "CleanupStrategy", "declarator": "cleanupStrategy", "var_name": "cleanupStrategy"}, {"original_string": "@Mock\n    private DataSeedStrategy dataSeedStrategy;", "modifier": "@Mock\n    private", "type": "DataSeedStrategy", "declarator": "dataSeedStrategy", "var_name": "dataSeedStrategy"}, {"original_string": "@Mock\n    private CleanupStrategyExecutor<MongoDatabase, Document> cleanupStrategyExecutor;", "modifier": "@Mock\n    private", "type": "CleanupStrategyExecutor<MongoDatabase, Document>", "declarator": "cleanupStrategyExecutor", "var_name": "cleanupStrategyExecutor"}, {"original_string": "@Mock\n    private MongoDbOperation operation;", "modifier": "@Mock\n    private", "type": "MongoDbOperation", "declarator": "operation", "var_name": "operation"}, {"original_string": "@Mock\n    private ExpectedDataSets expectedDataSets;", "modifier": "@Mock\n    private", "type": "ExpectedDataSets", "declarator": "expectedDataSets", "var_name": "expectedDataSets"}, {"original_string": "private MongoDbFeatureExecutor featureExecutor;", "modifier": "private", "type": "MongoDbFeatureExecutor", "declarator": "featureExecutor", "var_name": "featureExecutor"}], "file": "mongodb/src/test/java/eu/drus/jpa/unit/mongodb/MongoDbFeatureExecutorTest.java"}, "test_case": {"identifier": "testApplyCustomScriptFeatureExecutionUsingAvailableFilePaths", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testApplyCustomScriptFeatureExecutionUsingAvailableFilePaths() throws DbFeatureException {\n        // GIVEN\n\n        // WHEN\n        final DbFeature<MongoDatabase> feature = featureExecutor\n                .createApplyCustomScriptFeature(Arrays.asList(\"test-data.json\", \"test-data.json\"));\n        assertThat(feature, notNullValue());\n        feature.execute(connection);\n\n        // THEN\n        verify(connection, times(2)).runCommand(any(Bson.class));\n    }", "signature": "void testApplyCustomScriptFeatureExecutionUsingAvailableFilePaths()", "full_signature": "@Test public void testApplyCustomScriptFeatureExecutionUsingAvailableFilePaths()", "class_method_signature": "MongoDbFeatureExecutorTest.testApplyCustomScriptFeatureExecutionUsingAvailableFilePaths()", "testcase": true, "constructor": false, "invocations": ["createApplyCustomScriptFeature", "asList", "assertThat", "notNullValue", "execute", "runCommand", "verify", "times", "any"]}, "focal_class": {"identifier": "MongoDbFeatureExecutor", "superclass": "extends AbstractDbFeatureExecutor<Document, MongoDatabase>", "interfaces": "", "fields": [], "methods": [{"identifier": "MongoDbFeatureExecutor", "parameters": "(final FeatureResolver featureResolver)", "modifiers": "public", "return": "", "signature": " MongoDbFeatureExecutor(final FeatureResolver featureResolver)", "full_signature": "public  MongoDbFeatureExecutor(final FeatureResolver featureResolver)", "class_method_signature": "MongoDbFeatureExecutor.MongoDbFeatureExecutor(final FeatureResolver featureResolver)", "testcase": false, "constructor": true}, {"identifier": "mergeDataSets", "parameters": "(final Iterable<Document> dataSetList)", "modifiers": "private static", "return": "Document", "signature": "Document mergeDataSets(final Iterable<Document> dataSetList)", "full_signature": "private static Document mergeDataSets(final Iterable<Document> dataSetList)", "class_method_signature": "MongoDbFeatureExecutor.mergeDataSets(final Iterable<Document> dataSetList)", "testcase": false, "constructor": false}, {"identifier": "toUri", "parameters": "(final String path)", "modifiers": "private static", "return": "URI", "signature": "URI toUri(final String path)", "full_signature": "private static URI toUri(final String path)", "class_method_signature": "MongoDbFeatureExecutor.toUri(final String path)", "testcase": false, "constructor": false}, {"identifier": "loadDataSets", "parameters": "(final List<String> paths)", "modifiers": "@Override protected", "return": "List<Document>", "signature": "List<Document> loadDataSets(final List<String> paths)", "full_signature": "@Override protected List<Document> loadDataSets(final List<String> paths)", "class_method_signature": "MongoDbFeatureExecutor.loadDataSets(final List<String> paths)", "testcase": false, "constructor": false}, {"identifier": "createCleanupFeature", "parameters": "(final CleanupStrategy cleanupStrategy, final List<Document> initialDataSets)", "modifiers": "@Override protected", "return": "DbFeature<MongoDatabase>", "signature": "DbFeature<MongoDatabase> createCleanupFeature(final CleanupStrategy cleanupStrategy, final List<Document> initialDataSets)", "full_signature": "@Override protected DbFeature<MongoDatabase> createCleanupFeature(final CleanupStrategy cleanupStrategy, final List<Document> initialDataSets)", "class_method_signature": "MongoDbFeatureExecutor.createCleanupFeature(final CleanupStrategy cleanupStrategy, final List<Document> initialDataSets)", "testcase": false, "constructor": false}, {"identifier": "createApplyCustomScriptFeature", "parameters": "(final List<String> scriptPaths)", "modifiers": "@Override protected", "return": "DbFeature<MongoDatabase>", "signature": "DbFeature<MongoDatabase> createApplyCustomScriptFeature(final List<String> scriptPaths)", "full_signature": "@Override protected DbFeature<MongoDatabase> createApplyCustomScriptFeature(final List<String> scriptPaths)", "class_method_signature": "MongoDbFeatureExecutor.createApplyCustomScriptFeature(final List<String> scriptPaths)", "testcase": false, "constructor": false}, {"identifier": "createSeedDataFeature", "parameters": "(final DataSeedStrategy dataSeedStrategy,\n            final List<Document> initialDataSets)", "modifiers": "@Override protected", "return": "DbFeature<MongoDatabase>", "signature": "DbFeature<MongoDatabase> createSeedDataFeature(final DataSeedStrategy dataSeedStrategy,\n            final List<Document> initialDataSets)", "full_signature": "@Override protected DbFeature<MongoDatabase> createSeedDataFeature(final DataSeedStrategy dataSeedStrategy,\n            final List<Document> initialDataSets)", "class_method_signature": "MongoDbFeatureExecutor.createSeedDataFeature(final DataSeedStrategy dataSeedStrategy,\n            final List<Document> initialDataSets)", "testcase": false, "constructor": false}, {"identifier": "createVerifyDataAfterFeature", "parameters": "(final ExpectedDataSets expectedDataSets)", "modifiers": "@Override protected", "return": "DbFeature<MongoDatabase>", "signature": "DbFeature<MongoDatabase> createVerifyDataAfterFeature(final ExpectedDataSets expectedDataSets)", "full_signature": "@Override protected DbFeature<MongoDatabase> createVerifyDataAfterFeature(final ExpectedDataSets expectedDataSets)", "class_method_signature": "MongoDbFeatureExecutor.createVerifyDataAfterFeature(final ExpectedDataSets expectedDataSets)", "testcase": false, "constructor": false}, {"identifier": "executeScript", "parameters": "(final String script, final MongoDatabase connection)", "modifiers": "private", "return": "void", "signature": "void executeScript(final String script, final MongoDatabase connection)", "full_signature": "private void executeScript(final String script, final MongoDatabase connection)", "class_method_signature": "MongoDbFeatureExecutor.executeScript(final String script, final MongoDatabase connection)", "testcase": false, "constructor": false}], "file": "mongodb/src/main/java/eu/drus/jpa/unit/mongodb/MongoDbFeatureExecutor.java"}, "focal_method": {"identifier": "createApplyCustomScriptFeature", "parameters": "(final List<String> scriptPaths)", "modifiers": "@Override protected", "return": "DbFeature<MongoDatabase>", "body": "@Override\n    protected DbFeature<MongoDatabase> createApplyCustomScriptFeature(final List<String> scriptPaths) {\n        return (final MongoDatabase connection) -> {\n            try {\n                for (final String scriptPath : scriptPaths) {\n                    executeScript(loadScript(scriptPath), connection);\n                }\n            } catch (IOException | URISyntaxException e) {\n                throw new DbFeatureException(\"Could not apply custom scripts feature\", e);\n            }\n        };\n    }", "signature": "DbFeature<MongoDatabase> createApplyCustomScriptFeature(final List<String> scriptPaths)", "full_signature": "@Override protected DbFeature<MongoDatabase> createApplyCustomScriptFeature(final List<String> scriptPaths)", "class_method_signature": "MongoDbFeatureExecutor.createApplyCustomScriptFeature(final List<String> scriptPaths)", "testcase": false, "constructor": false, "invocations": ["executeScript", "loadScript"]}, "repository": {"repo_id": 52435170, "url": "https://github.com/dadrus/jpa-unit", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 24, "size": 1190, "license": "licensed"}}