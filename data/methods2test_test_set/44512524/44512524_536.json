{"test_class": {"identifier": "TestCountThenEstimate", "superclass": "", "interfaces": "", "fields": [], "file": "ml/streaminer/src/test/java/org/streaminer/stream/cardinality/TestCountThenEstimate.java"}, "test_case": {"identifier": "testMerge", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMerge() throws CardinalityMergeException\n    {\n        int numToMerge = 10;\n        int tippingPoint = 100;\n        int cardinality = 1000;\n\n        CountThenEstimate[] ctes = new CountThenEstimate[numToMerge];\n\n        for (int i = 0; i < numToMerge; i++)\n        {\n            ctes[i] = new CountThenEstimate(tippingPoint, AdaptiveCounting.Builder.obyCount(100000));\n            for (int j = 0; j < tippingPoint - 1; j++)\n            {\n                ctes[i].offer(Math.random());\n            }\n        }\n\n        int expectedCardinality = numToMerge * (tippingPoint - 1);\n        long mergedEstimate = CountThenEstimate.mergeEstimators(ctes).cardinality();\n        double error = Math.abs(mergedEstimate - expectedCardinality) / (double) expectedCardinality;\n        assertEquals(0.01, error, 0.01);\n\n        for (int i = 0; i < numToMerge / 2; i++)\n        {\n            for (int j = tippingPoint - 1; j < cardinality; j++)\n            {\n                ctes[i].offer(Math.random());\n            }\n        }\n\n        expectedCardinality = (numToMerge / 2) * (cardinality + tippingPoint - 1);\n        mergedEstimate = CountThenEstimate.mergeEstimators(ctes).cardinality();\n        error = Math.abs(mergedEstimate - expectedCardinality) / (double) expectedCardinality;\n        assertEquals(0.01, error, 0.01);\n\n\n        for (int i = numToMerge / 2; i < numToMerge; i++)\n        {\n            for (int j = tippingPoint - 1; j < cardinality; j++)\n            {\n                ctes[i].offer(Math.random());\n            }\n        }\n\n        expectedCardinality = numToMerge * cardinality;\n        mergedEstimate = CountThenEstimate.mergeEstimators(ctes).cardinality();\n        error = Math.abs(mergedEstimate - expectedCardinality) / (double) expectedCardinality;\n        assertEquals(0.01, error, 0.01);\n\n\n    }", "signature": "void testMerge()", "full_signature": "@Test public void testMerge()", "class_method_signature": "TestCountThenEstimate.testMerge()", "testcase": true, "constructor": false, "invocations": ["obyCount", "offer", "random", "cardinality", "mergeEstimators", "abs", "assertEquals", "offer", "random", "cardinality", "mergeEstimators", "abs", "assertEquals", "offer", "random", "cardinality", "mergeEstimators", "abs", "assertEquals"]}, "focal_class": {"identifier": "CountThenEstimate", "superclass": "", "interfaces": "implements IRichCardinality, Externalizable", "fields": [{"original_string": "protected final static byte LC = 1;", "modifier": "protected final static", "type": "byte", "declarator": "LC = 1", "var_name": "LC"}, {"original_string": "protected final static byte AC = 2;", "modifier": "protected final static", "type": "byte", "declarator": "AC = 2", "var_name": "AC"}, {"original_string": "protected final static byte HLC = 3;", "modifier": "protected final static", "type": "byte", "declarator": "HLC = 3", "var_name": "HLC"}, {"original_string": "protected final static byte LLC = 4;", "modifier": "protected final static", "type": "byte", "declarator": "LLC = 4", "var_name": "LLC"}, {"original_string": "protected final static byte HLPC = 5;", "modifier": "protected final static", "type": "byte", "declarator": "HLPC = 5", "var_name": "HLPC"}, {"original_string": "protected int tippingPoint;", "modifier": "protected", "type": "int", "declarator": "tippingPoint", "var_name": "tippingPoint"}, {"original_string": "protected boolean tipped = false;", "modifier": "protected", "type": "boolean", "declarator": "tipped = false", "var_name": "tipped"}, {"original_string": "protected IBuilder<IRichCardinality> builder;", "modifier": "protected", "type": "IBuilder<IRichCardinality>", "declarator": "builder", "var_name": "builder"}, {"original_string": "protected IRichCardinality estimator;", "modifier": "protected", "type": "IRichCardinality", "declarator": "estimator", "var_name": "estimator"}, {"original_string": "protected Set<Object> counter;", "modifier": "protected", "type": "Set<Object>", "declarator": "counter", "var_name": "counter"}], "methods": [{"identifier": "CountThenEstimate", "parameters": "()", "modifiers": "public", "return": "", "signature": " CountThenEstimate()", "full_signature": "public  CountThenEstimate()", "class_method_signature": "CountThenEstimate.CountThenEstimate()", "testcase": false, "constructor": true}, {"identifier": "CountThenEstimate", "parameters": "(int tippingPoint, IBuilder<IRichCardinality> builder)", "modifiers": "public", "return": "", "signature": " CountThenEstimate(int tippingPoint, IBuilder<IRichCardinality> builder)", "full_signature": "public  CountThenEstimate(int tippingPoint, IBuilder<IRichCardinality> builder)", "class_method_signature": "CountThenEstimate.CountThenEstimate(int tippingPoint, IBuilder<IRichCardinality> builder)", "testcase": false, "constructor": true}, {"identifier": "CountThenEstimate", "parameters": "(byte[] bytes)", "modifiers": "public", "return": "", "signature": " CountThenEstimate(byte[] bytes)", "full_signature": "public  CountThenEstimate(byte[] bytes)", "class_method_signature": "CountThenEstimate.CountThenEstimate(byte[] bytes)", "testcase": false, "constructor": true}, {"identifier": "cardinality", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long cardinality()", "full_signature": "@Override public long cardinality()", "class_method_signature": "CountThenEstimate.cardinality()", "testcase": false, "constructor": false}, {"identifier": "offerHashed", "parameters": "(long hashedLong)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean offerHashed(long hashedLong)", "full_signature": "@Override public boolean offerHashed(long hashedLong)", "class_method_signature": "CountThenEstimate.offerHashed(long hashedLong)", "testcase": false, "constructor": false}, {"identifier": "offerHashed", "parameters": "(int hashedInt)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean offerHashed(int hashedInt)", "full_signature": "@Override public boolean offerHashed(int hashedInt)", "class_method_signature": "CountThenEstimate.offerHashed(int hashedInt)", "testcase": false, "constructor": false}, {"identifier": "offer", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean offer(Object o)", "full_signature": "@Override public boolean offer(Object o)", "class_method_signature": "CountThenEstimate.offer(Object o)", "testcase": false, "constructor": false}, {"identifier": "sizeof", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int sizeof()", "full_signature": "@Override public int sizeof()", "class_method_signature": "CountThenEstimate.sizeof()", "testcase": false, "constructor": false}, {"identifier": "tip", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void tip()", "full_signature": "private void tip()", "class_method_signature": "CountThenEstimate.tip()", "testcase": false, "constructor": false}, {"identifier": "tipped", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean tipped()", "full_signature": "public boolean tipped()", "class_method_signature": "CountThenEstimate.tipped()", "testcase": false, "constructor": false}, {"identifier": "getBytes", "parameters": "()", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] getBytes()", "full_signature": "@Override public byte[] getBytes()", "class_method_signature": "CountThenEstimate.getBytes()", "testcase": false, "constructor": false}, {"identifier": "readExternal", "parameters": "(ObjectInput in)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "signature": "void readExternal(ObjectInput in)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void readExternal(ObjectInput in)", "class_method_signature": "CountThenEstimate.readExternal(ObjectInput in)", "testcase": false, "constructor": false}, {"identifier": "writeExternal", "parameters": "(ObjectOutput out)", "modifiers": "@Override public", "return": "void", "signature": "void writeExternal(ObjectOutput out)", "full_signature": "@Override public void writeExternal(ObjectOutput out)", "class_method_signature": "CountThenEstimate.writeExternal(ObjectOutput out)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(IRichCardinality... estimators)", "modifiers": "@Override public", "return": "IRichCardinality", "signature": "IRichCardinality merge(IRichCardinality... estimators)", "full_signature": "@Override public IRichCardinality merge(IRichCardinality... estimators)", "class_method_signature": "CountThenEstimate.merge(IRichCardinality... estimators)", "testcase": false, "constructor": false}, {"identifier": "mergeEstimators", "parameters": "(CountThenEstimate... estimators)", "modifiers": "public static", "return": "CountThenEstimate", "signature": "CountThenEstimate mergeEstimators(CountThenEstimate... estimators)", "full_signature": "public static CountThenEstimate mergeEstimators(CountThenEstimate... estimators)", "class_method_signature": "CountThenEstimate.mergeEstimators(CountThenEstimate... estimators)", "testcase": false, "constructor": false}], "file": "ml/streaminer/src/main/java/org/streaminer/stream/cardinality/CountThenEstimate.java"}, "focal_method": {"identifier": "merge", "parameters": "(IRichCardinality... estimators)", "modifiers": "@Override public", "return": "IRichCardinality", "body": "@Override\n    public IRichCardinality merge(IRichCardinality... estimators) throws CardinalityMergeException {\n        if (estimators == null) {\n            return mergeEstimators(this);\n        }\n        \n        CountThenEstimate[] all = Arrays.copyOf(estimators, estimators.length + 1, CountThenEstimate[].class);\n        all[all.length - 1] = this;\n        return mergeEstimators(all);\n    }", "signature": "IRichCardinality merge(IRichCardinality... estimators)", "full_signature": "@Override public IRichCardinality merge(IRichCardinality... estimators)", "class_method_signature": "CountThenEstimate.merge(IRichCardinality... estimators)", "testcase": false, "constructor": false, "invocations": ["mergeEstimators", "copyOf", "mergeEstimators"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}