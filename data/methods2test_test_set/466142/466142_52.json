{"test_class": {"identifier": "TestPoolUtil", "superclass": "", "interfaces": "", "fields": [], "file": "bonecp/src/test/java/com/jolbox/bonecp/TestPoolUtil.java"}, "test_case": {"identifier": "testPoolUtilExceptions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testPoolUtilExceptions() throws SQLException{\n\t\tMap<Object, Object> logParams = new LinkedHashMap<Object, Object>();\n\n\t\tlogParams.put(\"1\", \"123\");\n\t\tlogParams.put(\"2\", null);\n\n\t\tBlob mockBlob = createNiceMock(Blob.class);\n\t\texpect(mockBlob.length()).andThrow(new SQLException());\n\t\treplay(mockBlob);\n\n\n\t\tlogParams.put(\"3\", mockBlob);\n\n\t\tClob mockClob = createNiceMock(Clob.class);\n\t\texpect(mockClob.length()).andThrow(new SQLException());\n\t\treplay(mockClob);\n\n\n\t\tlogParams.put(\"4\", mockClob);\n\n\t\tArray mockArray = createNiceMock(java.sql.Array.class);\n\t\texpect(mockArray.getBaseTypeName()).andThrow(new SQLException());\n\t\treplay(mockArray);\n\n\t\tlogParams.put(\"5\", mockArray);\n\n\t\tRef mockSerialRef = createNiceMock(Ref.class);\n\t\texpect(mockSerialRef.getBaseTypeName()).andThrow(new SQLException());\n\t\treplay(mockSerialRef);\n\t\tlogParams.put(\"6\", mockSerialRef);\n\n\t\t// test proper replacement/escaping\n\t\tassertEquals(\"ID='123' AND FOO='?' and LALA=\\\"BOO\\\" NULL (blob of unknown length) (cblob of unknown length) (array of unknown type) (ref of unknown type) ?\", PoolUtil.fillLogParams(\"ID=? AND FOO='?' and LALA=\\\"BOO\\\" ? ? ? ? ? ?\", logParams));\n\t}", "signature": "void testPoolUtilExceptions()", "full_signature": "@Test public void testPoolUtilExceptions()", "class_method_signature": "TestPoolUtil.testPoolUtilExceptions()", "testcase": true, "constructor": false, "invocations": ["put", "put", "createNiceMock", "andThrow", "expect", "length", "replay", "put", "createNiceMock", "andThrow", "expect", "length", "replay", "put", "createNiceMock", "andThrow", "expect", "getBaseTypeName", "replay", "put", "createNiceMock", "andThrow", "expect", "getBaseTypeName", "replay", "put", "assertEquals", "fillLogParams"]}, "focal_class": {"identifier": "PoolUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static Class<Throwable> sqlExceptionClass;", "modifier": "protected static", "type": "Class<Throwable>", "declarator": "sqlExceptionClass", "var_name": "sqlExceptionClass"}, {"original_string": "private static final String exceptionClass = \"java.sql.SQLException\";", "modifier": "private static final", "type": "String", "declarator": "exceptionClass = \"java.sql.SQLException\"", "var_name": "exceptionClass"}], "methods": [{"identifier": "fillLogParams", "parameters": "(String sql, Map<Object, Object> logParams)", "modifiers": "public static", "return": "String", "signature": "String fillLogParams(String sql, Map<Object, Object> logParams)", "full_signature": "public static String fillLogParams(String sql, Map<Object, Object> logParams)", "class_method_signature": "PoolUtil.fillLogParams(String sql, Map<Object, Object> logParams)", "testcase": false, "constructor": false}, {"identifier": "safePrint", "parameters": "(Object... o)", "modifiers": "protected static", "return": "String", "signature": "String safePrint(Object... o)", "full_signature": "protected static String safePrint(Object... o)", "class_method_signature": "PoolUtil.safePrint(Object... o)", "testcase": false, "constructor": false}, {"identifier": "prettyPrint", "parameters": "(Object obj)", "modifiers": "protected static", "return": "String", "signature": "String prettyPrint(Object obj)", "full_signature": "protected static String prettyPrint(Object obj)", "class_method_signature": "PoolUtil.prettyPrint(Object obj)", "testcase": false, "constructor": false}, {"identifier": "formatLogParam", "parameters": "(Blob obj)", "modifiers": "private static", "return": "String", "signature": "String formatLogParam(Blob obj)", "full_signature": "private static String formatLogParam(Blob obj)", "class_method_signature": "PoolUtil.formatLogParam(Blob obj)", "testcase": false, "constructor": false}, {"identifier": "formatLogParam", "parameters": "(Clob obj)", "modifiers": "private static", "return": "String", "signature": "String formatLogParam(Clob obj)", "full_signature": "private static String formatLogParam(Clob obj)", "class_method_signature": "PoolUtil.formatLogParam(Clob obj)", "testcase": false, "constructor": false}, {"identifier": "formatLogParam", "parameters": "(Array obj)", "modifiers": "private static", "return": "String", "signature": "String formatLogParam(Array obj)", "full_signature": "private static String formatLogParam(Array obj)", "class_method_signature": "PoolUtil.formatLogParam(Array obj)", "testcase": false, "constructor": false}, {"identifier": "formatLogParam", "parameters": "(Ref obj)", "modifiers": "private static", "return": "String", "signature": "String formatLogParam(Ref obj)", "full_signature": "private static String formatLogParam(Ref obj)", "class_method_signature": "PoolUtil.formatLogParam(Ref obj)", "testcase": false, "constructor": false}, {"identifier": "stringifyException", "parameters": "(Throwable t)", "modifiers": "public static", "return": "String", "signature": "String stringifyException(Throwable t)", "full_signature": "public static String stringifyException(Throwable t)", "class_method_signature": "PoolUtil.stringifyException(Throwable t)", "testcase": false, "constructor": false}, {"identifier": "generateSQLException", "parameters": "(String reason, Throwable t)", "modifiers": "public static", "return": "SQLException", "signature": "SQLException generateSQLException(String reason, Throwable t)", "full_signature": "public static SQLException generateSQLException(String reason, Throwable t)", "class_method_signature": "PoolUtil.generateSQLException(String reason, Throwable t)", "testcase": false, "constructor": false}], "file": "bonecp/src/main/java/com/jolbox/bonecp/PoolUtil.java"}, "focal_method": {"identifier": "fillLogParams", "parameters": "(String sql, Map<Object, Object> logParams)", "modifiers": "public static", "return": "String", "body": "public static String fillLogParams(String sql, Map<Object, Object> logParams) {\n\t\tStringBuilder result = new StringBuilder();\n\t\tMap<Object, Object> tmpLogParam = (logParams == null ? new HashMap<Object, Object>() : logParams);\n\n\t\tIterator<Object> it = tmpLogParam.values().iterator();\n\t\tboolean inQuote = false;\n\t\tboolean inQuote2 = false;\n\t\tchar[] sqlChar = sql != null ? sql.toCharArray() : new char[]{};\n\n\t\tfor (int i=0; i < sqlChar.length; i++){\n\t\t\tif (sqlChar[i] == '\\''){\n\t\t\t\tinQuote = !inQuote;\n\t\t\t}\n\t\t\tif (sqlChar[i] == '\"'){\n\t\t\t\tinQuote2 = !inQuote2;\n\t\t\t}\n\n\t\t\tif (sqlChar[i] == '?' && !(inQuote || inQuote2)){\n\t\t\t\tif (it.hasNext()){\n\t\t\t\t\tresult.append(prettyPrint(it.next()));\n\t\t\t\t} else {\n\t\t\t\t\tresult.append('?');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresult.append(sqlChar[i]);\n\t\t\t}\n\t\t}\n\n\n\t\treturn result.toString();\n\t}", "signature": "String fillLogParams(String sql, Map<Object, Object> logParams)", "full_signature": "public static String fillLogParams(String sql, Map<Object, Object> logParams)", "class_method_signature": "PoolUtil.fillLogParams(String sql, Map<Object, Object> logParams)", "testcase": false, "constructor": false, "invocations": ["iterator", "values", "toCharArray", "hasNext", "append", "prettyPrint", "next", "append", "append", "toString"]}, "repository": {"repo_id": 466142, "url": "https://github.com/wwadge/bonecp", "language": "Java", "is_fork": false, "fork_count": 161, "stargazer_count": 544, "size": 3833, "license": "licensed"}}