{"test_class": {"identifier": "ServerHandleTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ServerHandle serverHandle;", "modifier": "private", "type": "ServerHandle", "declarator": "serverHandle", "var_name": "serverHandle"}, {"original_string": "private String vendor;", "modifier": "private", "type": "String", "declarator": "vendor", "var_name": "vendor"}, {"original_string": "private String product;", "modifier": "private", "type": "String", "declarator": "product", "var_name": "product"}, {"original_string": "private String version;", "modifier": "private", "type": "String", "declarator": "version", "var_name": "version"}, {"original_string": "private Map<String,String> extraInfo;", "modifier": "private", "type": "Map<String,String>", "declarator": "extraInfo", "var_name": "extraInfo"}], "file": "agent/core/src/test/java/org/jolokia/detector/ServerHandleTest.java"}, "test_case": {"identifier": "detectOptionsFail", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void detectOptionsFail() {\n        LogHandler handler = EasyMock.createMock(LogHandler.class);\n        handler.error(matches(\"^.*parse detector options.*\"),isA(Exception.class));\n        replay(handler);\n\n        Configuration opts = new Configuration(ConfigKey.DETECTOR_OPTIONS,\"blub: bla\");\n        JSONObject config = serverHandle.getDetectorOptions(opts,handler);\n        assertNull(config);\n        verify(handler);\n    }", "signature": "void detectOptionsFail()", "full_signature": "@Test public void detectOptionsFail()", "class_method_signature": "ServerHandleTest.detectOptionsFail()", "testcase": true, "constructor": false, "invocations": ["createMock", "error", "matches", "isA", "replay", "getDetectorOptions", "assertNull", "verify"]}, "focal_class": {"identifier": "ServerHandle", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String product;", "modifier": "private", "type": "String", "declarator": "product", "var_name": "product"}, {"original_string": "private String version;", "modifier": "private", "type": "String", "declarator": "version", "var_name": "version"}, {"original_string": "private Map<String,String> extraInfo;", "modifier": "private", "type": "Map<String,String>", "declarator": "extraInfo", "var_name": "extraInfo"}, {"original_string": "private String vendor;", "modifier": "private", "type": "String", "declarator": "vendor", "var_name": "vendor"}], "methods": [{"identifier": "ServerHandle", "parameters": "(String vendor, String product, String version, Map<String, String> extraInfo)", "modifiers": "public", "return": "", "signature": " ServerHandle(String vendor, String product, String version, Map<String, String> extraInfo)", "full_signature": "public  ServerHandle(String vendor, String product, String version, Map<String, String> extraInfo)", "class_method_signature": "ServerHandle.ServerHandle(String vendor, String product, String version, Map<String, String> extraInfo)", "testcase": false, "constructor": true}, {"identifier": "getVendor", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getVendor()", "full_signature": "public String getVendor()", "class_method_signature": "ServerHandle.getVendor()", "testcase": false, "constructor": false}, {"identifier": "getProduct", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getProduct()", "full_signature": "public String getProduct()", "class_method_signature": "ServerHandle.getProduct()", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getVersion()", "full_signature": "public String getVersion()", "class_method_signature": "ServerHandle.getVersion()", "testcase": false, "constructor": false}, {"identifier": "getExtraInfo", "parameters": "(MBeanServerExecutor pServerManager)", "modifiers": "public", "return": "Map<String,String>", "signature": "Map<String,String> getExtraInfo(MBeanServerExecutor pServerManager)", "full_signature": "public Map<String,String> getExtraInfo(MBeanServerExecutor pServerManager)", "class_method_signature": "ServerHandle.getExtraInfo(MBeanServerExecutor pServerManager)", "testcase": false, "constructor": false}, {"identifier": "preDispatch", "parameters": "(MBeanServerExecutor pMBeanServerExecutor, JmxRequest pJmxReq)", "modifiers": "public", "return": "void", "signature": "void preDispatch(MBeanServerExecutor pMBeanServerExecutor, JmxRequest pJmxReq)", "full_signature": "public void preDispatch(MBeanServerExecutor pMBeanServerExecutor, JmxRequest pJmxReq)", "class_method_signature": "ServerHandle.preDispatch(MBeanServerExecutor pMBeanServerExecutor, JmxRequest pJmxReq)", "testcase": false, "constructor": false}, {"identifier": "postDetect", "parameters": "(MBeanServerExecutor pServerManager, Configuration pConfig, LogHandler pLoghandler)", "modifiers": "public", "return": "void", "signature": "void postDetect(MBeanServerExecutor pServerManager, Configuration pConfig, LogHandler pLoghandler)", "full_signature": "public void postDetect(MBeanServerExecutor pServerManager, Configuration pConfig, LogHandler pLoghandler)", "class_method_signature": "ServerHandle.postDetect(MBeanServerExecutor pServerManager, Configuration pConfig, LogHandler pLoghandler)", "testcase": false, "constructor": false}, {"identifier": "registerMBeanAtServer", "parameters": "(MBeanServer pServer, Object pMBean, String pName)", "modifiers": "public", "return": "ObjectName", "signature": "ObjectName registerMBeanAtServer(MBeanServer pServer, Object pMBean, String pName)", "full_signature": "public ObjectName registerMBeanAtServer(MBeanServer pServer, Object pMBean, String pName)", "class_method_signature": "ServerHandle.registerMBeanAtServer(MBeanServer pServer, Object pMBean, String pName)", "testcase": false, "constructor": false}, {"identifier": "toJSONObject", "parameters": "(MBeanServerExecutor pServerManager)", "modifiers": "public", "return": "JSONObject", "signature": "JSONObject toJSONObject(MBeanServerExecutor pServerManager)", "full_signature": "public JSONObject toJSONObject(MBeanServerExecutor pServerManager)", "class_method_signature": "ServerHandle.toJSONObject(MBeanServerExecutor pServerManager)", "testcase": false, "constructor": false}, {"identifier": "addNullSafe", "parameters": "(JSONObject pRet, String pKey, Object pValue)", "modifiers": "private", "return": "void", "signature": "void addNullSafe(JSONObject pRet, String pKey, Object pValue)", "full_signature": "private void addNullSafe(JSONObject pRet, String pKey, Object pValue)", "class_method_signature": "ServerHandle.addNullSafe(JSONObject pRet, String pKey, Object pValue)", "testcase": false, "constructor": false}, {"identifier": "getDetectorOptions", "parameters": "(Configuration pConfig, LogHandler pLogHandler)", "modifiers": "protected", "return": "JSONObject", "signature": "JSONObject getDetectorOptions(Configuration pConfig, LogHandler pLogHandler)", "full_signature": "protected JSONObject getDetectorOptions(Configuration pConfig, LogHandler pLogHandler)", "class_method_signature": "ServerHandle.getDetectorOptions(Configuration pConfig, LogHandler pLogHandler)", "testcase": false, "constructor": false}], "file": "agent/core/src/main/java/org/jolokia/detector/ServerHandle.java"}, "focal_method": {"identifier": "getDetectorOptions", "parameters": "(Configuration pConfig, LogHandler pLogHandler)", "modifiers": "protected", "return": "JSONObject", "body": "protected JSONObject getDetectorOptions(Configuration pConfig, LogHandler pLogHandler) {\n        String options = pConfig.get(ConfigKey.DETECTOR_OPTIONS);\n        try {\n            if (options != null) {\n                    JSONObject opts = (JSONObject) new JSONParser().parse(options);\n                    return (JSONObject) opts.get(getProduct());\n            }\n            return null;\n        } catch (ParseException e) {\n            pLogHandler.error(\"Could not parse detector options '\" + options + \"' as JSON object: \" + e,e);\n        }\n        return null;\n    }", "signature": "JSONObject getDetectorOptions(Configuration pConfig, LogHandler pLogHandler)", "full_signature": "protected JSONObject getDetectorOptions(Configuration pConfig, LogHandler pLogHandler)", "class_method_signature": "ServerHandle.getDetectorOptions(Configuration pConfig, LogHandler pLogHandler)", "testcase": false, "constructor": false, "invocations": ["get", "parse", "get", "getProduct", "error"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}