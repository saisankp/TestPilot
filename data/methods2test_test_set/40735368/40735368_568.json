{"test_class": {"identifier": "ClipProcessTest", "superclass": "extends Assert", "interfaces": "", "fields": [{"original_string": "private SimpleFeatureSource fsMeters;", "modifier": "private", "type": "SimpleFeatureSource", "declarator": "fsMeters", "var_name": "fsMeters"}, {"original_string": "private SimpleFeatureSource fsDegrees;", "modifier": "private", "type": "SimpleFeatureSource", "declarator": "fsDegrees", "var_name": "fsDegrees"}, {"original_string": "private SimpleFeatureSource fsLines;", "modifier": "private", "type": "SimpleFeatureSource", "declarator": "fsLines", "var_name": "fsLines"}, {"original_string": "private SimpleFeatureSource fsCollinear;", "modifier": "private", "type": "SimpleFeatureSource", "declarator": "fsCollinear", "var_name": "fsCollinear"}, {"original_string": "private SimpleFeatureSource fsMultilines;", "modifier": "private", "type": "SimpleFeatureSource", "declarator": "fsMultilines", "var_name": "fsMultilines"}], "file": "modules/unsupported/process-feature/src/test/java/org/geotools/process/vector/ClipProcessTest.java"}, "test_case": {"identifier": "testClipExtractSeparateBitsBothLines", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testClipExtractSeparateBitsBothLines() throws Exception {\n        SimpleFeatureCollection features = fsLines.getFeatures();\n        ClipProcess cp = new ClipProcess();\n        // clip with a rotated \"L\"\n        SimpleFeatureCollection result = cp.execute(features, new WKTReader().read(\"POLYGON((1000 -10, 1000 5000, 11000 5000, 11000 4000, 2000 4000, 2000 -10, 1000 -10))\"), true);\n        assertEquals(1, result.size());\n        SimpleFeatureIterator fi = result.features();\n        // check the first polygon\n        SimpleFeature f = fi.next();\n        fi.close();\n        MultiLineString ml = (MultiLineString) f.getDefaultGeometry();\n        assertEquals(2, ml.getNumGeometries());\n        LineString ls = (LineString) ml.getGeometryN(0);\n        CoordinateSequence cs = ls.getCoordinateSequence();\n        assertEquals(2, cs.size());\n        assertOrdinates(1000, 0, 0.1, cs, 0);\n        assertOrdinates(2000, 0, 0.2, cs, 1);\n        ls = (LineString) ml.getGeometryN(1);\n        cs = ls.getCoordinateSequence();\n        assertEquals(2, cs.size());\n        assertOrdinates(10000, 4000, 1.4, cs, 0);\n        assertOrdinates(10000, 5000, 1.5, cs, 1);\n\n    }", "signature": "void testClipExtractSeparateBitsBothLines()", "full_signature": "@Test public void testClipExtractSeparateBitsBothLines()", "class_method_signature": "ClipProcessTest.testClipExtractSeparateBitsBothLines()", "testcase": true, "constructor": false, "invocations": ["getFeatures", "execute", "read", "assertEquals", "size", "features", "next", "close", "getDefaultGeometry", "assertEquals", "getNumGeometries", "getGeometryN", "getCoordinateSequence", "assertEquals", "size", "assertOrdinates", "assertOrdinates", "getGeometryN", "getCoordinateSequence", "assertEquals", "size", "assertOrdinates", "assertOrdinates"]}, "focal_class": {"identifier": "ClipProcess", "superclass": "", "interfaces": "implements VectorProcess", "fields": [{"original_string": "static final FilterFactory ff = CommonFactoryFinder.getFilterFactory(GeoTools.getDefaultHints());", "modifier": "static final", "type": "FilterFactory", "declarator": "ff = CommonFactoryFinder.getFilterFactory(GeoTools.getDefaultHints())", "var_name": "ff"}, {"original_string": "static final Logger LOGGER = Logging.getLogger(ClipProcess.class);", "modifier": "static final", "type": "Logger", "declarator": "LOGGER = Logging.getLogger(ClipProcess.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "execute", "parameters": "(\n            @DescribeParameter(name = \"features\", description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"clip\", description = \"Geometry to use for clipping (in same CRS as input features)\") Geometry clip,\n            @DescribeParameter(name = \"preserveZ\", min=0, description = \"Attempt to preserve Z values from the original geometry (interpolate value for new points)\") Boolean preserveZ)", "modifiers": "@DescribeResult(name = \"result\", description = \"Clipped feature collection\") public", "return": "SimpleFeatureCollection", "signature": "SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"features\", description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"clip\", description = \"Geometry to use for clipping (in same CRS as input features)\") Geometry clip,\n            @DescribeParameter(name = \"preserveZ\", min=0, description = \"Attempt to preserve Z values from the original geometry (interpolate value for new points)\") Boolean preserveZ)", "full_signature": "@DescribeResult(name = \"result\", description = \"Clipped feature collection\") public SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"features\", description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"clip\", description = \"Geometry to use for clipping (in same CRS as input features)\") Geometry clip,\n            @DescribeParameter(name = \"preserveZ\", min=0, description = \"Attempt to preserve Z values from the original geometry (interpolate value for new points)\") Boolean preserveZ)", "class_method_signature": "ClipProcess.execute(\n            @DescribeParameter(name = \"features\", description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"clip\", description = \"Geometry to use for clipping (in same CRS as input features)\") Geometry clip,\n            @DescribeParameter(name = \"preserveZ\", min=0, description = \"Attempt to preserve Z values from the original geometry (interpolate value for new points)\") Boolean preserveZ)", "testcase": false, "constructor": false}], "file": "modules/unsupported/process-feature/src/main/java/org/geotools/process/vector/ClipProcess.java"}, "focal_method": {"identifier": "execute", "parameters": "(\n            @DescribeParameter(name = \"features\", description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"clip\", description = \"Geometry to use for clipping (in same CRS as input features)\") Geometry clip,\n            @DescribeParameter(name = \"preserveZ\", min=0, description = \"Attempt to preserve Z values from the original geometry (interpolate value for new points)\") Boolean preserveZ)", "modifiers": "@DescribeResult(name = \"result\", description = \"Clipped feature collection\") public", "return": "SimpleFeatureCollection", "body": "@DescribeResult(name = \"result\", description = \"Clipped feature collection\")\n    public SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"features\", description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"clip\", description = \"Geometry to use for clipping (in same CRS as input features)\") Geometry clip,\n            @DescribeParameter(name = \"preserveZ\", min=0, description = \"Attempt to preserve Z values from the original geometry (interpolate value for new points)\") Boolean preserveZ)\n            throws ProcessException {\n        // only get the geometries in the bbox of the clip\n        Envelope box = clip.getEnvelopeInternal();\n        String srs = null;\n        if(features.getSchema().getCoordinateReferenceSystem() != null) {\n            srs = CRS.toSRS(features.getSchema().getCoordinateReferenceSystem());\n        }\n        BBOX bboxFilter = ff.bbox(\"\", box.getMinX(), box.getMinY(), box.getMaxX(), box.getMaxY(), srs);\n        \n        // default value for preserve Z\n        if(preserveZ == null) {\n            preserveZ = false;\n        }\n        \n        // return dynamic collection clipping geometries on the fly\n        return new ClippingFeatureCollection(features.subCollection(bboxFilter), clip, preserveZ);\n    }", "signature": "SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"features\", description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"clip\", description = \"Geometry to use for clipping (in same CRS as input features)\") Geometry clip,\n            @DescribeParameter(name = \"preserveZ\", min=0, description = \"Attempt to preserve Z values from the original geometry (interpolate value for new points)\") Boolean preserveZ)", "full_signature": "@DescribeResult(name = \"result\", description = \"Clipped feature collection\") public SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"features\", description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"clip\", description = \"Geometry to use for clipping (in same CRS as input features)\") Geometry clip,\n            @DescribeParameter(name = \"preserveZ\", min=0, description = \"Attempt to preserve Z values from the original geometry (interpolate value for new points)\") Boolean preserveZ)", "class_method_signature": "ClipProcess.execute(\n            @DescribeParameter(name = \"features\", description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"clip\", description = \"Geometry to use for clipping (in same CRS as input features)\") Geometry clip,\n            @DescribeParameter(name = \"preserveZ\", min=0, description = \"Attempt to preserve Z values from the original geometry (interpolate value for new points)\") Boolean preserveZ)", "testcase": false, "constructor": false, "invocations": ["getEnvelopeInternal", "getCoordinateReferenceSystem", "getSchema", "toSRS", "getCoordinateReferenceSystem", "getSchema", "bbox", "getMinX", "getMinY", "getMaxX", "getMaxY", "subCollection"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}