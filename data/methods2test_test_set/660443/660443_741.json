{"test_class": {"identifier": "IPMolecularLearningDescriptorTest", "superclass": "extends MolecularDescriptorTest", "interfaces": "", "fields": [{"original_string": "private SmilesParser            sp      = new SmilesParser(DefaultChemObjectBuilder.getInstance());", "modifier": "private", "type": "SmilesParser", "declarator": "sp      = new SmilesParser(DefaultChemObjectBuilder.getInstance())", "var_name": "sp"}, {"original_string": "private IChemObjectBuilder      builder = SilentChemObjectBuilder.getInstance();", "modifier": "private", "type": "IChemObjectBuilder", "declarator": "builder = SilentChemObjectBuilder.getInstance()", "var_name": "builder"}, {"original_string": "private LonePairElectronChecker lpcheck = new LonePairElectronChecker();", "modifier": "private", "type": "LonePairElectronChecker", "declarator": "lpcheck = new LonePairElectronChecker()", "var_name": "lpcheck"}], "file": "legacy/src/test/java/org/openscience/cdk/qsar/descriptors/molecular/IPMolecularLearningDescriptorTest.java"}, "test_case": {"identifier": "testIPDescriptor_2", "parameters": "()", "modifiers": "@Test @Category(SlowTest.class) public", "return": "void", "body": "@Test\n    @Category(SlowTest.class)\n    public void testIPDescriptor_2() throws Exception {\n\n        IAtomContainer mol = sp.parseSmiles(\"COCCCC=O\");\n\n        addExplicitHydrogens(mol);\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(mol);\n        lpcheck.saturate(mol);\n\n        IPMolecularLearningDescriptor descriptor = new IPMolecularLearningDescriptor();\n        DoubleArrayResult dar = ((DoubleArrayResult) (descriptor).calculatePlus(mol).getValue());\n\n        double resultAccordingNIST = 9.37;\n\n        Assert.assertEquals(2, dar.length());\n        Assert.assertEquals(resultAccordingNIST, dar.get(0), 0.3);\n    }", "signature": "void testIPDescriptor_2()", "full_signature": "@Test @Category(SlowTest.class) public void testIPDescriptor_2()", "class_method_signature": "IPMolecularLearningDescriptorTest.testIPDescriptor_2()", "testcase": true, "constructor": false, "invocations": ["parseSmiles", "addExplicitHydrogens", "percieveAtomTypesAndConfigureAtoms", "saturate", "getValue", "calculatePlus", "assertEquals", "length", "assertEquals", "get"]}, "focal_class": {"identifier": "IPMolecularLearningDescriptor", "superclass": "extends AbstractMolecularDescriptor", "interfaces": "implements IMolecularDescriptor", "fields": [{"original_string": "private boolean               addlp = true;", "modifier": "private", "type": "boolean", "declarator": "addlp = true", "var_name": "addlp"}, {"original_string": "private static final String[] names = {\"MolIP\"};", "modifier": "private static final", "type": "String[]", "declarator": "names = {\"MolIP\"}", "var_name": "names"}], "methods": [{"identifier": "IPMolecularLearningDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " IPMolecularLearningDescriptor()", "full_signature": "public  IPMolecularLearningDescriptor()", "class_method_signature": "IPMolecularLearningDescriptor.IPMolecularLearningDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "IPMolecularLearningDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "IPMolecularLearningDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "IPMolecularLearningDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "IPMolecularLearningDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtomContainer atomContainer)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer atomContainer)", "class_method_signature": "IPMolecularLearningDescriptor.calculate(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "calculatePlus", "parameters": "(IAtomContainer container)", "modifiers": "public", "return": "DescriptorValue", "signature": "DescriptorValue calculatePlus(IAtomContainer container)", "full_signature": "public DescriptorValue calculatePlus(IAtomContainer container)", "class_method_signature": "IPMolecularLearningDescriptor.calculatePlus(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "arrangingEnergy", "parameters": "(ArrayList<Double> array)", "modifiers": "private", "return": "DoubleArrayResult", "signature": "DoubleArrayResult arrangingEnergy(ArrayList<Double> array)", "full_signature": "private DoubleArrayResult arrangingEnergy(ArrayList<Double> array)", "class_method_signature": "IPMolecularLearningDescriptor.arrangingEnergy(ArrayList<Double> array)", "testcase": false, "constructor": false}, {"identifier": "getDescriptorResultType", "parameters": "()", "modifiers": "@Override public", "return": "IDescriptorResult", "signature": "IDescriptorResult getDescriptorResultType()", "full_signature": "@Override public IDescriptorResult getDescriptorResultType()", "class_method_signature": "IPMolecularLearningDescriptor.getDescriptorResultType()", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "IPMolecularLearningDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "IPMolecularLearningDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/org/openscience/cdk/qsar/descriptors/molecular/IPMolecularLearningDescriptor.java"}, "focal_method": {"identifier": "calculatePlus", "parameters": "(IAtomContainer container)", "modifiers": "public", "return": "DescriptorValue", "body": "public DescriptorValue calculatePlus(IAtomContainer container) throws CDKException {\n\n        ArrayList<Double> dar = new ArrayList<Double>();\n        for (Iterator<IAtom> itA = container.atoms().iterator(); itA.hasNext();) {\n            IAtom atom = itA.next();\n            double value = IonizationPotentialTool.predictIP(container, atom);\n            if (value != 0) dar.add(value);\n        }\n        for (Iterator<IBond> itB = container.bonds().iterator(); itB.hasNext();) {\n            IBond bond = itB.next();\n            if (bond.getOrder() == IBond.Order.DOUBLE & bond.getBegin().getSymbol().equals(\"C\")\n                    & bond.getEnd().getSymbol().equals(\"C\")) {\n                double value = IonizationPotentialTool.predictIP(container, bond);\n                if (value != 0) dar.add(value);\n\n            }\n        }\n\n        DoubleArrayResult results = arrangingEnergy(dar);\n\n        return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), results,\n                getDescriptorNames(), null);\n\n    }", "signature": "DescriptorValue calculatePlus(IAtomContainer container)", "full_signature": "public DescriptorValue calculatePlus(IAtomContainer container)", "class_method_signature": "IPMolecularLearningDescriptor.calculatePlus(IAtomContainer container)", "testcase": false, "constructor": false, "invocations": ["iterator", "atoms", "hasNext", "next", "predictIP", "add", "iterator", "bonds", "hasNext", "next", "getOrder", "equals", "getSymbol", "getBegin", "equals", "getSymbol", "getEnd", "predictIP", "add", "arrangingEnergy", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}