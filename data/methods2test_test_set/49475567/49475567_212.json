{"test_class": {"identifier": "TextUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "geoclient-parser/src/test/java/gov/nyc/doitt/gis/geoclient/parser/token/TextUtilsTest.java"}, "test_case": {"identifier": "testSanitize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSanitize() {\n        assertThat(TextUtils.sanitize(null)).isNull();\n        assertThat(TextUtils.sanitize(\"\")).isEqualTo(\"\");\n        assertThat(TextUtils.sanitize(\"abc\")).isEqualTo(\"abc\");\n        assertThat(TextUtils.sanitize(\"abc def\")).isEqualTo(\"abc def\");\n        assertThat(TextUtils.sanitize(\"  abc\")).isEqualTo(\"abc\");\n        assertThat(TextUtils.sanitize(\"abc \")).isEqualTo(\"abc\");\n        assertThat(TextUtils.sanitize(\"  abc def  \")).isEqualTo(\"abc def\");\n        assertThat(TextUtils.sanitize(\"  abc   def  \")).isEqualTo(\"abc def\");\n        assertThat(TextUtils.sanitize(\",  abc,   def  ,\")).isEqualTo(\"abc, def\");\n        assertThat(TextUtils.sanitize(\" ,  abc,   def  ,\")).isEqualTo(\"abc, def\");\n        assertThat(TextUtils.sanitize(\" ,.?!&^#$%@ abc-d &  def  ,?:+-\")).isEqualTo(\"abc-d & def\");\n        assertThat(TextUtils.sanitize(\"abc&def\")).isEqualTo(\"abc & def\");\n        assertThat(TextUtils.sanitize(\"abc && def\")).isEqualTo(\"abc && def\");\n        assertThat(TextUtils.sanitize(\"abc&&def\")).isEqualTo(\"abc && def\");\n        assertThat(TextUtils.sanitize(\"N.Y.\")).isEqualTo(\"N.Y.\");\n        assertThat(TextUtils.sanitize(\"abc\\tde\\tf\")).isEqualTo(\"abc de f\");\n    }", "signature": "void testSanitize()", "full_signature": "@Test public void testSanitize()", "class_method_signature": "TextUtilsTest.testSanitize()", "testcase": true, "constructor": false, "invocations": ["isNull", "assertThat", "sanitize", "isEqualTo", "assertThat", "sanitize", "isEqualTo", "assertThat", "sanitize", "isEqualTo", "assertThat", "sanitize", "isEqualTo", "assertThat", "sanitize", "isEqualTo", "assertThat", "sanitize", "isEqualTo", "assertThat", "sanitize", "isEqualTo", "assertThat", "sanitize", "isEqualTo", "assertThat", "sanitize", "isEqualTo", "assertThat", "sanitize", "isEqualTo", "assertThat", "sanitize", "isEqualTo", "assertThat", "sanitize", "isEqualTo", "assertThat", "sanitize", "isEqualTo", "assertThat", "sanitize", "isEqualTo", "assertThat", "sanitize", "isEqualTo", "assertThat", "sanitize"]}, "focal_class": {"identifier": "TextUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "sanitize", "parameters": "(String s)", "modifiers": "public static", "return": "String", "signature": "String sanitize(String s)", "full_signature": "public static String sanitize(String s)", "class_method_signature": "TextUtils.sanitize(String s)", "testcase": false, "constructor": false}], "file": "geoclient-parser/src/main/java/gov/nyc/doitt/gis/geoclient/parser/token/TextUtils.java"}, "focal_method": {"identifier": "sanitize", "parameters": "(String s)", "modifiers": "public static", "return": "String", "body": "public static String sanitize(String s)\n  {\n    if(s == null || s.isEmpty())\n    {\n      return s;\n    }\n    // Remove leading and trailing spaces or punctuation (except for trailing\n     //period characters (eg, N.Y.)\n    String clean = RegExUtils.removePattern(s,\"^(?:\\\\s|\\\\p{Punct})+|(?:\\\\s|[\\\\p{Punct}&&[^.]])+$\");\n    // Make sure ampersand is surrounded by spaces but allow double ampersand\n    clean = clean.replaceAll(\"([^\\\\s&])\\\\&\", \"$1 &\");\n    clean = clean.replaceAll(\"\\\\&([^\\\\s&])\", \"& $1\");\n    // Normalize whitespace\n    clean = StringUtils.normalizeSpace(clean);\n    return clean;\n  }", "signature": "String sanitize(String s)", "full_signature": "public static String sanitize(String s)", "class_method_signature": "TextUtils.sanitize(String s)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "removePattern", "replaceAll", "replaceAll", "normalizeSpace"]}, "repository": {"repo_id": 49475567, "url": "https://github.com/CityOfNewYork/geoclient", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 42, "size": 9801, "license": "licensed"}}