{"test_class": {"identifier": "IpAddressUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public ExpectedException exception = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "exception = ExpectedException.none()", "var_name": "exception"}], "file": "karamel-common/src/test/java/se/kth/karamel/common/util/IpAddressUtilTest.java"}, "test_case": {"identifier": "testValidateFormat", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testValidateFormat() throws IpAddressException {\n    IpAddressUtil.validateFormat(\"192.168.0.1\");\n    IpAddressUtil.validateFormat(\"192.168.01.255\");\n    IpAddressUtil.validateFormat(\"192.168.01.255 \");\n\n    exception.expect(IpAddressException.class);\n    IpAddressUtil.validateFormat(\"192.168\");\n    IpAddressUtil.validateFormat(\"192.168.1\");\n    IpAddressUtil.validateFormat(\"192.168.01.256.\");\n    IpAddressUtil.validateFormat(\"192.168.01.256\");\n  }", "signature": "void testValidateFormat()", "full_signature": "@Test public void testValidateFormat()", "class_method_signature": "IpAddressUtilTest.testValidateFormat()", "testcase": true, "constructor": false, "invocations": ["validateFormat", "validateFormat", "validateFormat", "expect", "validateFormat", "validateFormat", "validateFormat", "validateFormat"]}, "focal_class": {"identifier": "IpAddressUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static Pattern IP_PATTERN = Pattern.compile(Settings.IP_REGEX);", "modifier": "public static", "type": "Pattern", "declarator": "IP_PATTERN = Pattern.compile(Settings.IP_REGEX)", "var_name": "IP_PATTERN"}], "methods": [{"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "IpAddressUtil.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "ipRange", "parameters": "(String ipStr)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> ipRange(String ipStr)", "full_signature": "public static List<String> ipRange(String ipStr)", "class_method_signature": "IpAddressUtil.ipRange(String ipStr)", "testcase": false, "constructor": false}, {"identifier": "validateFormat", "parameters": "(String ip)", "modifiers": "public static", "return": "void", "signature": "void validateFormat(String ip)", "full_signature": "public static void validateFormat(String ip)", "class_method_signature": "IpAddressUtil.validateFormat(String ip)", "testcase": false, "constructor": false}, {"identifier": "ipRange", "parameters": "(String srcIp, String destIp)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> ipRange(String srcIp, String destIp)", "full_signature": "public static List<String> ipRange(String srcIp, String destIp)", "class_method_signature": "IpAddressUtil.ipRange(String srcIp, String destIp)", "testcase": false, "constructor": false}, {"identifier": "toHex", "parameters": "(String ipAddress)", "modifiers": "protected static", "return": "String", "signature": "String toHex(String ipAddress)", "full_signature": "protected static String toHex(String ipAddress)", "class_method_signature": "IpAddressUtil.toHex(String ipAddress)", "testcase": false, "constructor": false}, {"identifier": "ipToLong", "parameters": "(String ipAddress)", "modifiers": "protected static", "return": "long", "signature": "long ipToLong(String ipAddress)", "full_signature": "protected static long ipToLong(String ipAddress)", "class_method_signature": "IpAddressUtil.ipToLong(String ipAddress)", "testcase": false, "constructor": false}, {"identifier": "longToIp", "parameters": "(long ip)", "modifiers": "protected static", "return": "String", "signature": "String longToIp(long ip)", "full_signature": "protected static String longToIp(long ip)", "class_method_signature": "IpAddressUtil.longToIp(long ip)", "testcase": false, "constructor": false}], "file": "karamel-common/src/main/java/se/kth/karamel/common/util/IpAddressUtil.java"}, "focal_method": {"identifier": "validateFormat", "parameters": "(String ip)", "modifiers": "public static", "return": "void", "body": "public static void validateFormat(String ip) throws IpAddressException {\n    if (!ip.trim().matches(Settings.IP_REGEX)) {\n      throw new IpAddressException(\"Ip format is invalid \" + ip);\n    }\n  }", "signature": "void validateFormat(String ip)", "full_signature": "public static void validateFormat(String ip)", "class_method_signature": "IpAddressUtil.validateFormat(String ip)", "testcase": false, "constructor": false, "invocations": ["matches", "trim"]}, "repository": {"repo_id": 29383909, "url": "https://github.com/karamelchef/karamel", "language": "Java", "is_fork": false, "fork_count": 17, "stargazer_count": 30, "size": 12029, "license": "licensed"}}