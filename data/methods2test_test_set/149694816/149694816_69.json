{"test_class": {"identifier": "BuilderTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [{"original_string": "@Mock\n  protected ResourceManager resourceManager;", "modifier": "@Mock\n  protected", "type": "ResourceManager", "declarator": "resourceManager", "var_name": "resourceManager"}, {"original_string": "@Mock\n  protected Resource resource;", "modifier": "@Mock\n  protected", "type": "Resource", "declarator": "resource", "var_name": "resource"}], "file": "core/src/test/java/ship/BuilderTest.java"}, "test_case": {"identifier": "testBuild", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testBuild() {\n    final String resourcePath = randomUUID().toString();\n    when(resourceManager.getResource(resourcePath)).thenReturn(resource);\n    final Builder builder = new Builder(resourceManager);\n    builder.build(resourcePath);\n  }", "signature": "void testBuild()", "full_signature": "@Test public void testBuild()", "class_method_signature": "BuilderTest.testBuild()", "testcase": true, "constructor": false, "invocations": ["toString", "randomUUID", "thenReturn", "when", "getResource", "build"]}, "focal_class": {"identifier": "Builder", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected final transient Logger logger = getLogger(getClass());", "modifier": "protected final transient", "type": "Logger", "declarator": "logger = getLogger(getClass())", "var_name": "logger"}, {"original_string": "@Getter\n  protected final ResourceManager resourceManager;", "modifier": "@Getter\n  protected final", "type": "ResourceManager", "declarator": "resourceManager", "var_name": "resourceManager"}], "methods": [{"identifier": "Builder", "parameters": "(final ResourceManager resourceManager)", "modifiers": "public", "return": "", "signature": " Builder(final ResourceManager resourceManager)", "full_signature": "public  Builder(final ResourceManager resourceManager)", "class_method_signature": "Builder.Builder(final ResourceManager resourceManager)", "testcase": false, "constructor": true}, {"identifier": "build", "parameters": "(final String resourcePath)", "modifiers": "public", "return": "BuildDetails", "signature": "BuildDetails build(final String resourcePath)", "full_signature": "public BuildDetails build(final String resourcePath)", "class_method_signature": "Builder.build(final String resourcePath)", "testcase": false, "constructor": false}], "file": "core/src/main/java/ship/Builder.java"}, "focal_method": {"identifier": "build", "parameters": "(final String resourcePath)", "modifiers": "public", "return": "BuildDetails", "body": "public BuildDetails build(final String resourcePath) {\n    final Resource resource = resourceManager.getResource(resourcePath);\n    logger.trace(\"{}: {}\", resourcePath, resource);\n    final Concatenator concatenator = new Concatenator(resourceManager);\n    final Optional<BuildResource> buildResource = ofNullable(resource.adapt(BuildResource.class));\n    final Optional<TestResource> testResource = ofNullable(resource.adapt(TestResource.class));\n    if (buildResource.isPresent()) {\n      logger.trace(\"Build to target\");\n      return concatenator.visit(buildResource.get());\n    } else if (testResource.isPresent()) {\n      logger.trace(\"Build to test\");\n      return concatenator.visit(testResource.get());\n    }\n\n    return new BuildDetails();\n  }", "signature": "BuildDetails build(final String resourcePath)", "full_signature": "public BuildDetails build(final String resourcePath)", "class_method_signature": "Builder.build(final String resourcePath)", "testcase": false, "constructor": false, "invocations": ["getResource", "trace", "ofNullable", "adapt", "ofNullable", "adapt", "isPresent", "trace", "visit", "get", "isPresent", "trace", "visit", "get"]}, "repository": {"repo_id": 149694816, "url": "https://github.com/aergoio/ship", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 11, "size": 1743, "license": "licensed"}}