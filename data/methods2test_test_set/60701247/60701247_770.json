{"test_class": {"identifier": "UserEventDataSeriesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long TEST_START_TIME_NS = System.nanoTime();", "modifier": "private static final", "type": "long", "declarator": "TEST_START_TIME_NS = System.nanoTime()", "var_name": "TEST_START_TIME_NS"}, {"original_string": "private static final long TEST_END_TIME_NS = TEST_START_TIME_NS + TimeUnit.SECONDS.toNanos(1);", "modifier": "private static final", "type": "long", "declarator": "TEST_END_TIME_NS = TEST_START_TIME_NS + TimeUnit.SECONDS.toNanos(1)", "var_name": "TEST_END_TIME_NS"}, {"original_string": "private FakeTimer myTimer = new FakeTimer();", "modifier": "private", "type": "FakeTimer", "declarator": "myTimer = new FakeTimer()", "var_name": "myTimer"}, {"original_string": "private FakeTransportService myTransportService = new FakeTransportService(myTimer);", "modifier": "private", "type": "FakeTransportService", "declarator": "myTransportService = new FakeTransportService(myTimer)", "var_name": "myTransportService"}, {"original_string": "private FakeEventService myEventService = new FakeEventService();", "modifier": "private", "type": "FakeEventService", "declarator": "myEventService = new FakeEventService()", "var_name": "myEventService"}, {"original_string": "@Rule public FakeGrpcChannel myGrpcChannel = new FakeGrpcChannel(getClass().getName(), myTransportService, myEventService);", "modifier": "@Rule public", "type": "FakeGrpcChannel", "declarator": "myGrpcChannel = new FakeGrpcChannel(getClass().getName(), myTransportService, myEventService)", "var_name": "myGrpcChannel"}, {"original_string": "private FakeIdeProfilerServices myIdeProfilerServices;", "modifier": "private", "type": "FakeIdeProfilerServices", "declarator": "myIdeProfilerServices", "var_name": "myIdeProfilerServices"}, {"original_string": "private UserEventDataSeries mySeries;", "modifier": "private", "type": "UserEventDataSeries", "declarator": "mySeries", "var_name": "mySeries"}], "file": "profilers/testSrc/com/android/tools/profilers/event/UserEventDataSeriesTest.java"}, "test_case": {"identifier": "testRotationEvent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testRotationEvent() {\n    buildRotationEvent(1);\n    Range range = new Range(TimeUnit.NANOSECONDS.toMicros(TEST_START_TIME_NS), TimeUnit.NANOSECONDS.toMicros(TEST_END_TIME_NS));\n    List<SeriesData<EventAction<UserEvent>>> dataList = mySeries.getDataForRange(range);\n    assertEquals(dataList.size(), 1);\n    for (SeriesData<EventAction<UserEvent>> data : dataList) {\n      assertEquals(data.x, TimeUnit.NANOSECONDS.toMicros(TEST_START_TIME_NS));\n      assertEquals(data.value.getStartUs(), TimeUnit.NANOSECONDS.toMicros(TEST_START_TIME_NS));\n      assertEquals(data.value.getEndUs(), TimeUnit.NANOSECONDS.toMicros(TEST_START_TIME_NS));\n      assertEquals(data.value.getType(), UserEvent.ROTATION);\n    }\n  }", "signature": "void testRotationEvent()", "full_signature": "@Test public void testRotationEvent()", "class_method_signature": "UserEventDataSeriesTest.testRotationEvent()", "testcase": true, "constructor": false, "invocations": ["buildRotationEvent", "toMicros", "toMicros", "getDataForRange", "assertEquals", "size", "assertEquals", "toMicros", "assertEquals", "getStartUs", "toMicros", "assertEquals", "getEndUs", "toMicros", "assertEquals", "getType"]}, "focal_class": {"identifier": "UserEventDataSeries", "superclass": "", "interfaces": "implements DataSeries<EventAction<UserEvent>>", "fields": [{"original_string": "@NotNull private StudioProfilers myProfilers;", "modifier": "@NotNull private", "type": "StudioProfilers", "declarator": "myProfilers", "var_name": "myProfilers"}, {"original_string": "@NotNull private final Common.Session mySession;", "modifier": "@NotNull private final", "type": "Common.Session", "declarator": "mySession", "var_name": "mySession"}], "methods": [{"identifier": "UserEventDataSeries", "parameters": "(@NotNull StudioProfilers profilers)", "modifiers": "public", "return": "", "signature": " UserEventDataSeries(@NotNull StudioProfilers profilers)", "full_signature": "public  UserEventDataSeries(@NotNull StudioProfilers profilers)", "class_method_signature": "UserEventDataSeries.UserEventDataSeries(@NotNull StudioProfilers profilers)", "testcase": false, "constructor": true}, {"identifier": "getDataForRange", "parameters": "(@NotNull Range timeCurrentRangeUs)", "modifiers": "@Override public", "return": "List<SeriesData<EventAction<UserEvent>>>", "signature": "List<SeriesData<EventAction<UserEvent>>> getDataForRange(@NotNull Range timeCurrentRangeUs)", "full_signature": "@Override public List<SeriesData<EventAction<UserEvent>>> getDataForRange(@NotNull Range timeCurrentRangeUs)", "class_method_signature": "UserEventDataSeries.getDataForRange(@NotNull Range timeCurrentRangeUs)", "testcase": false, "constructor": false}, {"identifier": "getTransportData", "parameters": "(@NotNull Range rangeUs)", "modifiers": "@NotNull private", "return": "List<SeriesData<EventAction<UserEvent>>>", "signature": "List<SeriesData<EventAction<UserEvent>>> getTransportData(@NotNull Range rangeUs)", "full_signature": "@NotNull private List<SeriesData<EventAction<UserEvent>>> getTransportData(@NotNull Range rangeUs)", "class_method_signature": "UserEventDataSeries.getTransportData(@NotNull Range rangeUs)", "testcase": false, "constructor": false}, {"identifier": "getLegacyData", "parameters": "(@NotNull Range rangeUs)", "modifiers": "@NotNull private", "return": "List<SeriesData<EventAction<UserEvent>>>", "signature": "List<SeriesData<EventAction<UserEvent>>> getLegacyData(@NotNull Range rangeUs)", "full_signature": "@NotNull private List<SeriesData<EventAction<UserEvent>>> getLegacyData(@NotNull Range rangeUs)", "class_method_signature": "UserEventDataSeries.getLegacyData(@NotNull Range rangeUs)", "testcase": false, "constructor": false}], "file": "profilers/src/com/android/tools/profilers/event/UserEventDataSeries.java"}, "focal_method": {"identifier": "getDataForRange", "parameters": "(@NotNull Range timeCurrentRangeUs)", "modifiers": "@Override public", "return": "List<SeriesData<EventAction<UserEvent>>>", "body": "@Override\n  public List<SeriesData<EventAction<UserEvent>>> getDataForRange(@NotNull Range timeCurrentRangeUs) {\n    if (myProfilers.getIdeServices().getFeatureConfig().isUnifiedPipelineEnabled()) {\n      return getTransportData(timeCurrentRangeUs);\n    }\n    else {\n      return getLegacyData(timeCurrentRangeUs);\n    }\n  }", "signature": "List<SeriesData<EventAction<UserEvent>>> getDataForRange(@NotNull Range timeCurrentRangeUs)", "full_signature": "@Override public List<SeriesData<EventAction<UserEvent>>> getDataForRange(@NotNull Range timeCurrentRangeUs)", "class_method_signature": "UserEventDataSeries.getDataForRange(@NotNull Range timeCurrentRangeUs)", "testcase": false, "constructor": false, "invocations": ["isUnifiedPipelineEnabled", "getFeatureConfig", "getIdeServices", "getTransportData", "getLegacyData"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}