{"test_class": {"identifier": "InstanceIdentifierUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Short NUM_ID_1 = 1;", "modifier": "private static final", "type": "Short", "declarator": "NUM_ID_1 = 1", "var_name": "NUM_ID_1"}, {"original_string": "private static final String STR_ID_1 = \"id1\";", "modifier": "private static final", "type": "String", "declarator": "STR_ID_1 = \"id1\"", "var_name": "STR_ID_1"}], "file": "l2switch-main/src/test/java/org/opendaylight/l2switch/util/InstanceIdentifierUtilsTest.java"}, "test_case": {"identifier": "testGenerateFlowInstanceIdentifier", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGenerateFlowInstanceIdentifier() throws Exception {\n        NodeConnectorRef ncRef = new NodeConnectorRef(\n                InstanceIdentifier.builder(Nodes.class).child(Node.class, new NodeKey(new NodeId(STR_ID_1)))\n                        .child(NodeConnector.class, new NodeConnectorKey(new NodeConnectorId(STR_ID_1))).build());\n        InstanceIdentifier<Flow> flowInsId = InstanceIdentifierUtils.generateFlowInstanceIdentifier(ncRef,\n                new TableKey(NUM_ID_1), new FlowKey(new FlowId(STR_ID_1)));\n        assertNotNull(flowInsId);\n        assertEquals(NUM_ID_1, flowInsId.firstKeyOf(Table.class, TableKey.class).getId());\n        assertEquals(STR_ID_1, flowInsId.firstKeyOf(Flow.class, FlowKey.class).getId().getValue());\n    }", "signature": "void testGenerateFlowInstanceIdentifier()", "full_signature": "@Test public void testGenerateFlowInstanceIdentifier()", "class_method_signature": "InstanceIdentifierUtilsTest.testGenerateFlowInstanceIdentifier()", "testcase": true, "constructor": false, "invocations": ["build", "child", "child", "builder", "generateFlowInstanceIdentifier", "assertNotNull", "assertEquals", "getId", "firstKeyOf", "assertEquals", "getValue", "getId", "firstKeyOf"]}, "focal_class": {"identifier": "InstanceIdentifierUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "InstanceIdentifierUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " InstanceIdentifierUtils()", "full_signature": "private  InstanceIdentifierUtils()", "class_method_signature": "InstanceIdentifierUtils.InstanceIdentifierUtils()", "testcase": false, "constructor": true}, {"identifier": "generateNodeInstanceIdentifier", "parameters": "(final NodeConnectorRef nodeConnectorRef)", "modifiers": "public static", "return": "InstanceIdentifier<Node>", "signature": "InstanceIdentifier<Node> generateNodeInstanceIdentifier(final NodeConnectorRef nodeConnectorRef)", "full_signature": "public static InstanceIdentifier<Node> generateNodeInstanceIdentifier(final NodeConnectorRef nodeConnectorRef)", "class_method_signature": "InstanceIdentifierUtils.generateNodeInstanceIdentifier(final NodeConnectorRef nodeConnectorRef)", "testcase": false, "constructor": false}, {"identifier": "generateFlowTableInstanceIdentifier", "parameters": "(final NodeConnectorRef nodeConnectorRef,\n            final TableKey flowTableKey)", "modifiers": "public static", "return": "InstanceIdentifier<Table>", "signature": "InstanceIdentifier<Table> generateFlowTableInstanceIdentifier(final NodeConnectorRef nodeConnectorRef,\n            final TableKey flowTableKey)", "full_signature": "public static InstanceIdentifier<Table> generateFlowTableInstanceIdentifier(final NodeConnectorRef nodeConnectorRef,\n            final TableKey flowTableKey)", "class_method_signature": "InstanceIdentifierUtils.generateFlowTableInstanceIdentifier(final NodeConnectorRef nodeConnectorRef,\n            final TableKey flowTableKey)", "testcase": false, "constructor": false}, {"identifier": "generateFlowInstanceIdentifier", "parameters": "(final NodeConnectorRef nodeConnectorRef,\n            final TableKey flowTableKey, final FlowKey flowKey)", "modifiers": "public static", "return": "InstanceIdentifier<Flow>", "signature": "InstanceIdentifier<Flow> generateFlowInstanceIdentifier(final NodeConnectorRef nodeConnectorRef,\n            final TableKey flowTableKey, final FlowKey flowKey)", "full_signature": "public static InstanceIdentifier<Flow> generateFlowInstanceIdentifier(final NodeConnectorRef nodeConnectorRef,\n            final TableKey flowTableKey, final FlowKey flowKey)", "class_method_signature": "InstanceIdentifierUtils.generateFlowInstanceIdentifier(final NodeConnectorRef nodeConnectorRef,\n            final TableKey flowTableKey, final FlowKey flowKey)", "testcase": false, "constructor": false}], "file": "l2switch-main/src/main/java/org/opendaylight/l2switch/util/InstanceIdentifierUtils.java"}, "focal_method": {"identifier": "generateFlowInstanceIdentifier", "parameters": "(final NodeConnectorRef nodeConnectorRef,\n            final TableKey flowTableKey, final FlowKey flowKey)", "modifiers": "public static", "return": "InstanceIdentifier<Flow>", "body": "public static InstanceIdentifier<Flow> generateFlowInstanceIdentifier(final NodeConnectorRef nodeConnectorRef,\n            final TableKey flowTableKey, final FlowKey flowKey) {\n        return generateFlowTableInstanceIdentifier(nodeConnectorRef, flowTableKey).child(Flow.class, flowKey);\n    }", "signature": "InstanceIdentifier<Flow> generateFlowInstanceIdentifier(final NodeConnectorRef nodeConnectorRef,\n            final TableKey flowTableKey, final FlowKey flowKey)", "full_signature": "public static InstanceIdentifier<Flow> generateFlowInstanceIdentifier(final NodeConnectorRef nodeConnectorRef,\n            final TableKey flowTableKey, final FlowKey flowKey)", "class_method_signature": "InstanceIdentifierUtils.generateFlowInstanceIdentifier(final NodeConnectorRef nodeConnectorRef,\n            final TableKey flowTableKey, final FlowKey flowKey)", "testcase": false, "constructor": false, "invocations": ["child", "generateFlowTableInstanceIdentifier"]}, "repository": {"repo_id": 20701467, "url": "https://github.com/opendaylight/l2switch", "language": "Java", "is_fork": false, "fork_count": 30, "stargazer_count": 25, "size": 4178, "license": "licensed"}}