{"test_class": {"identifier": "TestClassInfoCollector", "superclass": "", "interfaces": "", "fields": [], "file": "infra/docattrs/src/test/java/org/carrot2/infra/docattrs/TestClassInfoCollector.java"}, "test_case": {"identifier": "testObjectAttr", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testObjectAttr() {\n    class Foo extends AttrComposite {}\n\n    @SuppressWarnings(\"unused\")\n    class Clazz extends AttrComposite {\n      AttrObject<Foo> attr =\n          attributes.register(\"attr\", AttrObject.builder(Foo.class).defaultValue(Foo::new));\n      AttrObject<Foo> attrNull =\n          attributes.register(\"attrNull\", AttrObject.builder(Foo.class).defaultValue(() -> null));\n    }\n\n    ClassInfoCollector collector = new ClassInfoCollector(JvmNameMapper.INSTANCE);\n    ClassInfo classInfo = collector.collect(new Clazz());\n    Assertions.assertThat(classInfo.attributes)\n        .hasEntrySatisfying(\n            \"attr\",\n            info ->\n                Assertions.assertThat(info.value)\n                    .isEqualTo(JvmNameMapper.INSTANCE.toName(new Foo())))\n        .hasEntrySatisfying(\"attrNull\", info -> Assertions.assertThat(info.value).isNull());\n  }", "signature": "void testObjectAttr()", "full_signature": "@Test public void testObjectAttr()", "class_method_signature": "TestClassInfoCollector.testObjectAttr()", "testcase": true, "constructor": false, "invocations": ["register", "defaultValue", "builder", "register", "defaultValue", "builder", "collect", "hasEntrySatisfying", "hasEntrySatisfying", "assertThat", "isEqualTo", "assertThat", "toName", "isNull", "assertThat"]}, "focal_class": {"identifier": "ClassInfoCollector", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ClassNameMapper aliasMapper;", "modifier": "private final", "type": "ClassNameMapper", "declarator": "aliasMapper", "var_name": "aliasMapper"}, {"original_string": "private HashMap<Class<? extends AcceptingVisitor>, ClassInfo> collected = new HashMap<>();", "modifier": "private", "type": "HashMap<Class<? extends AcceptingVisitor>, ClassInfo>", "declarator": "collected = new HashMap<>()", "var_name": "collected"}], "methods": [{"identifier": "ClassInfoCollector", "parameters": "(ClassNameMapper aliasMapper)", "modifiers": "public", "return": "", "signature": " ClassInfoCollector(ClassNameMapper aliasMapper)", "full_signature": "public  ClassInfoCollector(ClassNameMapper aliasMapper)", "class_method_signature": "ClassInfoCollector.ClassInfoCollector(ClassNameMapper aliasMapper)", "testcase": false, "constructor": true}, {"identifier": "collect", "parameters": "(AcceptingVisitor c)", "modifiers": "public", "return": "ClassInfo", "signature": "ClassInfo collect(AcceptingVisitor c)", "full_signature": "public ClassInfo collect(AcceptingVisitor c)", "class_method_signature": "ClassInfoCollector.collect(AcceptingVisitor c)", "testcase": false, "constructor": false}, {"identifier": "getQualifiedName", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "String", "signature": "String getQualifiedName(Class<?> clazz)", "full_signature": "public static String getQualifiedName(Class<?> clazz)", "class_method_signature": "ClassInfoCollector.getQualifiedName(Class<?> clazz)", "testcase": false, "constructor": false}], "file": "infra/docattrs/src/main/java/org/carrot2/infra/docattrs/ClassInfoCollector.java"}, "focal_method": {"identifier": "collect", "parameters": "(AcceptingVisitor c)", "modifiers": "public", "return": "ClassInfo", "body": "public ClassInfo collect(AcceptingVisitor c) {\n    return collected.computeIfAbsent(\n        c.getClass(),\n        (key) -> {\n          final ClassInfo ci = new ClassInfo();\n          ci.clazz = c.getClass();\n          ci.name = aliasMapper.toName(c);\n          ci.type = getQualifiedName(c.getClass());\n\n          c.accept(new AttrInfoCollector(ci.attributes, aliasMapper));\n          return ci;\n        });\n  }", "signature": "ClassInfo collect(AcceptingVisitor c)", "full_signature": "public ClassInfo collect(AcceptingVisitor c)", "class_method_signature": "ClassInfoCollector.collect(AcceptingVisitor c)", "testcase": false, "constructor": false, "invocations": ["computeIfAbsent", "getClass", "getClass", "toName", "getQualifiedName", "getClass", "accept"]}, "repository": {"repo_id": 2424377, "url": "https://github.com/carrot2/carrot2", "stars": 393, "created": "9/20/2011 6:19:05 PM +00:00", "updates": "2020-01-24T20:43:38+00:00", "fork": "False", "license": "licensed"}}