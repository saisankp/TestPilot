{"test_class": {"identifier": "ClassFileParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ClassFileParser parser;", "modifier": "private", "type": "ClassFileParser", "declarator": "parser", "var_name": "parser"}], "file": "code-assert-core/src/test/java/guru/nidi/codeassert/model/ClassFileParserTest.java"}, "test_case": {"identifier": "packageClassImports", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void packageClassImports() throws IOException {\n        final CodeClass clazz = parse(Path.testClass(\"ExamplePackageClass\"));\n        assertCollectionEquals(clazz.usedPackages(), new CodePackage(\"java.lang\"));\n    }", "signature": "void packageClassImports()", "full_signature": "@Test void packageClassImports()", "class_method_signature": "ClassFileParserTest.packageClassImports()", "testcase": true, "constructor": false, "invocations": ["parse", "testClass", "assertCollectionEquals", "usedPackages"]}, "focal_class": {"identifier": "ClassFileParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int JAVA_MAGIC = 0xCAFEBABE;", "modifier": "private static final", "type": "int", "declarator": "JAVA_MAGIC = 0xCAFEBABE", "var_name": "JAVA_MAGIC"}, {"original_string": "private ConstantPool constantPool;", "modifier": "private", "type": "ConstantPool", "declarator": "constantPool", "var_name": "constantPool"}, {"original_string": "private DataInputStream in;", "modifier": "private", "type": "DataInputStream", "declarator": "in", "var_name": "in"}], "methods": [{"identifier": "parse", "parameters": "(File file, Model model)", "modifiers": "", "return": "CodeClass", "signature": "CodeClass parse(File file, Model model)", "full_signature": " CodeClass parse(File file, Model model)", "class_method_signature": "ClassFileParser.parse(File file, Model model)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(InputStream is, Model model)", "modifiers": "", "return": "CodeClass", "signature": "CodeClass parse(InputStream is, Model model)", "full_signature": " CodeClass parse(InputStream is, Model model)", "class_method_signature": "ClassFileParser.parse(InputStream is, Model model)", "testcase": false, "constructor": false}, {"identifier": "parseMagic", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int parseMagic()", "full_signature": "private int parseMagic()", "class_method_signature": "ClassFileParser.parseMagic()", "testcase": false, "constructor": false}, {"identifier": "parseMinorVersion", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int parseMinorVersion()", "full_signature": "private int parseMinorVersion()", "class_method_signature": "ClassFileParser.parseMinorVersion()", "testcase": false, "constructor": false}, {"identifier": "parseMajorVersion", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int parseMajorVersion()", "full_signature": "private int parseMajorVersion()", "class_method_signature": "ClassFileParser.parseMajorVersion()", "testcase": false, "constructor": false}, {"identifier": "parseAccessFlags", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int parseAccessFlags()", "full_signature": "private int parseAccessFlags()", "class_method_signature": "ClassFileParser.parseAccessFlags()", "testcase": false, "constructor": false}, {"identifier": "parseClassName", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String parseClassName()", "full_signature": "private String parseClassName()", "class_method_signature": "ClassFileParser.parseClassName()", "testcase": false, "constructor": false}, {"identifier": "parseSuperClassName", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String parseSuperClassName()", "full_signature": "private String parseSuperClassName()", "class_method_signature": "ClassFileParser.parseSuperClassName()", "testcase": false, "constructor": false}, {"identifier": "parseInterfaces", "parameters": "()", "modifiers": "private", "return": "List<String>", "signature": "List<String> parseInterfaces()", "full_signature": "private List<String> parseInterfaces()", "class_method_signature": "ClassFileParser.parseInterfaces()", "testcase": false, "constructor": false}, {"identifier": "parseMembers", "parameters": "()", "modifiers": "private", "return": "List<MemberInfo>", "signature": "List<MemberInfo> parseMembers()", "full_signature": "private List<MemberInfo> parseMembers()", "class_method_signature": "ClassFileParser.parseMembers()", "testcase": false, "constructor": false}, {"identifier": "parseAttributes", "parameters": "()", "modifiers": "private", "return": "List<AttributeInfo>", "signature": "List<AttributeInfo> parseAttributes()", "full_signature": "private List<AttributeInfo> parseAttributes()", "class_method_signature": "ClassFileParser.parseAttributes()", "testcase": false, "constructor": false}], "file": "code-assert-core/src/main/java/guru/nidi/codeassert/model/ClassFileParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(File file, Model model)", "modifiers": "", "return": "CodeClass", "body": "CodeClass parse(File file, Model model) throws IOException {\n        try (InputStream in = new FileInputStream(file)) {\n            return parse(in, model);\n        }\n    }", "signature": "CodeClass parse(File file, Model model)", "full_signature": " CodeClass parse(File file, Model model)", "class_method_signature": "ClassFileParser.parse(File file, Model model)", "testcase": false, "constructor": false, "invocations": ["parse"]}, "repository": {"repo_id": 48196746, "url": "https://github.com/nidi3/code-assert", "stars": 67, "created": "12/17/2015 8:30:58 PM +00:00", "updates": "2019-12-16T11:54:24+00:00", "fork": "False", "license": "licensed"}}