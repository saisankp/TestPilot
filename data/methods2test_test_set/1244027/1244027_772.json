{"test_class": {"identifier": "BufferManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ExecutionContext context;", "modifier": "private", "type": "ExecutionContext", "declarator": "context", "var_name": "context"}, {"original_string": "private BufferManager mgr;", "modifier": "private", "type": "BufferManager", "declarator": "mgr", "var_name": "mgr"}, {"original_string": "private TypeSystem types;", "modifier": "private", "type": "TypeSystem", "declarator": "types", "var_name": "types"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/query/BufferManagerTest.java"}, "test_case": {"identifier": "shouldCreateDistinctBufferOffHeap", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldCreateDistinctBufferOffHeap() {\n        try (DistinctBuffer<String> buffer = mgr.createDistinctBuffer(Serializer.STRING).useHeap(false).keepSize(true).make()) {\n            assertTrue(buffer.addIfAbsent(\"first\"));\n            assertTrue(buffer.addIfAbsent(\"second\"));\n            assertTrue(buffer.addIfAbsent(\"third\"));\n            assertTrue(buffer.addIfAbsent(\"fourth\"));\n            assertFalse(buffer.addIfAbsent(\"first\"));\n            assertFalse(buffer.addIfAbsent(\"second\"));\n            assertFalse(buffer.addIfAbsent(\"fourth\"));\n            assertFalse(buffer.addIfAbsent(\"third\"));\n            assertThat(buffer.size(), is(4L));\n        }\n    }", "signature": "void shouldCreateDistinctBufferOffHeap()", "full_signature": "@Test public void shouldCreateDistinctBufferOffHeap()", "class_method_signature": "BufferManagerTest.shouldCreateDistinctBufferOffHeap()", "testcase": true, "constructor": false, "invocations": ["make", "keepSize", "useHeap", "createDistinctBuffer", "assertTrue", "addIfAbsent", "assertTrue", "addIfAbsent", "assertTrue", "addIfAbsent", "assertTrue", "addIfAbsent", "assertFalse", "addIfAbsent", "assertFalse", "addIfAbsent", "assertFalse", "addIfAbsent", "assertFalse", "addIfAbsent", "assertThat", "size", "is"]}, "focal_class": {"identifier": "BufferManager", "superclass": "", "interfaces": "implements Serializers, AutoCloseable", "fields": [{"original_string": "private final static Supplier<DB> OFF_HEAP_DB_SUPPLIER = new Supplier<DB>() {\n        @Override\n        public DB get() {\n            return DBMaker.newMemoryDirectDB().make();\n        }\n    };", "modifier": "private final static", "type": "Supplier<DB>", "declarator": "OFF_HEAP_DB_SUPPLIER = new Supplier<DB>() {\n        @Override\n        public DB get() {\n            return DBMaker.newMemoryDirectDB().make();\n        }\n    }", "var_name": "OFF_HEAP_DB_SUPPLIER"}, {"original_string": "private final static Supplier<DB> ON_HEAP_DB_SUPPLIER = new Supplier<DB>() {\n        @Override\n        public DB get() {\n            return DBMaker.newMemoryDB().make();\n        }\n    };", "modifier": "private final static", "type": "Supplier<DB>", "declarator": "ON_HEAP_DB_SUPPLIER = new Supplier<DB>() {\n        @Override\n        public DB get() {\n            return DBMaker.newMemoryDB().make();\n        }\n    }", "var_name": "ON_HEAP_DB_SUPPLIER"}, {"original_string": "private final Serializers serializers;", "modifier": "private final", "type": "Serializers", "declarator": "serializers", "var_name": "serializers"}, {"original_string": "private final DbHolder offheap;", "modifier": "private final", "type": "DbHolder", "declarator": "offheap", "var_name": "offheap"}, {"original_string": "private final DbHolder onheap;", "modifier": "private final", "type": "DbHolder", "declarator": "onheap", "var_name": "onheap"}, {"original_string": "private final AtomicLong dbCounter = new AtomicLong();", "modifier": "private final", "type": "AtomicLong", "declarator": "dbCounter = new AtomicLong()", "var_name": "dbCounter"}], "methods": [{"identifier": "BufferManager", "parameters": "( ExecutionContext context )", "modifiers": "public", "return": "", "signature": " BufferManager( ExecutionContext context )", "full_signature": "public  BufferManager( ExecutionContext context )", "class_method_signature": "BufferManager.BufferManager( ExecutionContext context )", "testcase": false, "constructor": true}, {"identifier": "BufferManager", "parameters": "( ExecutionContext context,\n                             Supplier<DB> offheapDbSupplier,\n                             Supplier<DB> onheapDbSupplier )", "modifiers": "protected", "return": "", "signature": " BufferManager( ExecutionContext context,\n                             Supplier<DB> offheapDbSupplier,\n                             Supplier<DB> onheapDbSupplier )", "full_signature": "protected  BufferManager( ExecutionContext context,\n                             Supplier<DB> offheapDbSupplier,\n                             Supplier<DB> onheapDbSupplier )", "class_method_signature": "BufferManager.BufferManager( ExecutionContext context,\n                             Supplier<DB> offheapDbSupplier,\n                             Supplier<DB> onheapDbSupplier )", "testcase": false, "constructor": true}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "BufferManager.close()", "testcase": false, "constructor": false}, {"identifier": "createQueueBuffer", "parameters": "( Serializer<T> serializer )", "modifiers": "public", "return": "QueueBufferMaker<T>", "signature": "QueueBufferMaker<T> createQueueBuffer( Serializer<T> serializer )", "full_signature": "public QueueBufferMaker<T> createQueueBuffer( Serializer<T> serializer )", "class_method_signature": "BufferManager.createQueueBuffer( Serializer<T> serializer )", "testcase": false, "constructor": false}, {"identifier": "createDistinctBuffer", "parameters": "( Serializer<T> distinctSerializer )", "modifiers": "public", "return": "DistinctBufferMaker<T>", "signature": "DistinctBufferMaker<T> createDistinctBuffer( Serializer<T> distinctSerializer )", "full_signature": "public DistinctBufferMaker<T> createDistinctBuffer( Serializer<T> distinctSerializer )", "class_method_signature": "BufferManager.createDistinctBuffer( Serializer<T> distinctSerializer )", "testcase": false, "constructor": false}, {"identifier": "createSortingBuffer", "parameters": "( BTreeKeySerializer<K> keySerializer,\n                                                                Serializer<V> valueSerializer )", "modifiers": "public", "return": "SortingBufferMaker<K, V>", "signature": "SortingBufferMaker<K, V> createSortingBuffer( BTreeKeySerializer<K> keySerializer,\n                                                                Serializer<V> valueSerializer )", "full_signature": "public SortingBufferMaker<K, V> createSortingBuffer( BTreeKeySerializer<K> keySerializer,\n                                                                Serializer<V> valueSerializer )", "class_method_signature": "BufferManager.createSortingBuffer( BTreeKeySerializer<K> keySerializer,\n                                                                Serializer<V> valueSerializer )", "testcase": false, "constructor": false}, {"identifier": "createSortingWithDuplicatesBuffer", "parameters": "( Serializer<K> keySerializer,\n                                                                                                    Comparator<?> keyComparator,\n                                                                                                    Serializer<V> valueSerializer )", "modifiers": "public", "return": "SortingBufferMaker<K, V>", "signature": "SortingBufferMaker<K, V> createSortingWithDuplicatesBuffer( Serializer<K> keySerializer,\n                                                                                                    Comparator<?> keyComparator,\n                                                                                                    Serializer<V> valueSerializer )", "full_signature": "public SortingBufferMaker<K, V> createSortingWithDuplicatesBuffer( Serializer<K> keySerializer,\n                                                                                                    Comparator<?> keyComparator,\n                                                                                                    Serializer<V> valueSerializer )", "class_method_signature": "BufferManager.createSortingWithDuplicatesBuffer( Serializer<K> keySerializer,\n                                                                                                    Comparator<?> keyComparator,\n                                                                                                    Serializer<V> valueSerializer )", "testcase": false, "constructor": false}, {"identifier": "serializerFor", "parameters": "( Class<?> type )", "modifiers": "@Override public", "return": "Serializer<?>", "signature": "Serializer<?> serializerFor( Class<?> type )", "full_signature": "@Override public Serializer<?> serializerFor( Class<?> type )", "class_method_signature": "BufferManager.serializerFor( Class<?> type )", "testcase": false, "constructor": false}, {"identifier": "bTreeKeySerializerFor", "parameters": "( Class<?> type,\n                                                        Comparator<?> comparator,\n                                                        boolean pack )", "modifiers": "@Override public", "return": "BTreeKeySerializer<?>", "signature": "BTreeKeySerializer<?> bTreeKeySerializerFor( Class<?> type,\n                                                        Comparator<?> comparator,\n                                                        boolean pack )", "full_signature": "@Override public BTreeKeySerializer<?> bTreeKeySerializerFor( Class<?> type,\n                                                        Comparator<?> comparator,\n                                                        boolean pack )", "class_method_signature": "BufferManager.bTreeKeySerializerFor( Class<?> type,\n                                                        Comparator<?> comparator,\n                                                        boolean pack )", "testcase": false, "constructor": false}, {"identifier": "nullSafeSerializerFor", "parameters": "( Class<?> type )", "modifiers": "@Override public", "return": "Serializer<?>", "signature": "Serializer<?> nullSafeSerializerFor( Class<?> type )", "full_signature": "@Override public Serializer<?> nullSafeSerializerFor( Class<?> type )", "class_method_signature": "BufferManager.nullSafeSerializerFor( Class<?> type )", "testcase": false, "constructor": false}, {"identifier": "serializerFor", "parameters": "( TypeFactory<?> type )", "modifiers": "public", "return": "Serializer<?>", "signature": "Serializer<?> serializerFor( TypeFactory<?> type )", "full_signature": "public Serializer<?> serializerFor( TypeFactory<?> type )", "class_method_signature": "BufferManager.serializerFor( TypeFactory<?> type )", "testcase": false, "constructor": false}, {"identifier": "nullSafeSerializerFor", "parameters": "( TypeFactory<?> type )", "modifiers": "public", "return": "Serializer<?>", "signature": "Serializer<?> nullSafeSerializerFor( TypeFactory<?> type )", "full_signature": "public Serializer<?> nullSafeSerializerFor( TypeFactory<?> type )", "class_method_signature": "BufferManager.nullSafeSerializerFor( TypeFactory<?> type )", "testcase": false, "constructor": false}, {"identifier": "bTreeKeySerializerFor", "parameters": "( TypeFactory<?> type,\n                                                        boolean pack )", "modifiers": "public", "return": "BTreeKeySerializer<?>", "signature": "BTreeKeySerializer<?> bTreeKeySerializerFor( TypeFactory<?> type,\n                                                        boolean pack )", "full_signature": "public BTreeKeySerializer<?> bTreeKeySerializerFor( TypeFactory<?> type,\n                                                        boolean pack )", "class_method_signature": "BufferManager.bTreeKeySerializerFor( TypeFactory<?> type,\n                                                        boolean pack )", "testcase": false, "constructor": false}, {"identifier": "db", "parameters": "( boolean useHeap )", "modifiers": "protected final", "return": "DB", "signature": "DB db( boolean useHeap )", "full_signature": "protected final DB db( boolean useHeap )", "class_method_signature": "BufferManager.db( boolean useHeap )", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "( String name,\n                                 boolean onHeap )", "modifiers": "protected final", "return": "void", "signature": "void delete( String name,\n                                 boolean onHeap )", "full_signature": "protected final void delete( String name,\n                                 boolean onHeap )", "class_method_signature": "BufferManager.delete( String name,\n                                 boolean onHeap )", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/query/BufferManager.java"}, "focal_method": {"identifier": "createDistinctBuffer", "parameters": "( Serializer<T> distinctSerializer )", "modifiers": "public", "return": "DistinctBufferMaker<T>", "body": "public <T> DistinctBufferMaker<T> createDistinctBuffer( Serializer<T> distinctSerializer ) {\n        return new MakeDistinctBuffer<T>(\"buffer-\" + dbCounter.incrementAndGet(), distinctSerializer);\n    }", "signature": "DistinctBufferMaker<T> createDistinctBuffer( Serializer<T> distinctSerializer )", "full_signature": "public DistinctBufferMaker<T> createDistinctBuffer( Serializer<T> distinctSerializer )", "class_method_signature": "BufferManager.createDistinctBuffer( Serializer<T> distinctSerializer )", "testcase": false, "constructor": false, "invocations": ["incrementAndGet"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}