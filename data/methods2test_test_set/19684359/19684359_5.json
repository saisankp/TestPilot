{"test_class": {"identifier": "GoogleHadoopFileSystemTest", "superclass": "extends GoogleHadoopFileSystemIntegrationTest", "interfaces": "", "fields": [{"original_string": "@ClassRule\n  public static NotInheritableExternalResource storageResource =\n      new NotInheritableExternalResource(GoogleHadoopFileSystemTest.class) {\n        @Override\n        public void before() throws Throwable {\n          // Disable logging.\n          // Normally you would need to keep a strong reference to any logger used for\n          // configuration, but the \"root\" logger is always present.\n          Logger.getLogger(\"\").setLevel(Level.OFF);\n\n          ghfs = GoogleHadoopFileSystemTestHelper.createInMemoryGoogleHadoopFileSystem();\n          ghfsFileSystemDescriptor = (FileSystemDescriptor) ghfs;\n\n          GoogleHadoopFileSystemIntegrationTest.postCreateInit();\n        }\n\n        @Override\n        public void after() {\n          GoogleHadoopFileSystemIntegrationTest.storageResource.after();\n        }\n      };", "modifier": "@ClassRule\n  public static", "type": "NotInheritableExternalResource", "declarator": "storageResource =\n      new NotInheritableExternalResource(GoogleHadoopFileSystemTest.class) {\n        @Override\n        public void before() throws Throwable {\n          // Disable logging.\n          // Normally you would need to keep a strong reference to any logger used for\n          // configuration, but the \"root\" logger is always present.\n          Logger.getLogger(\"\").setLevel(Level.OFF);\n\n          ghfs = GoogleHadoopFileSystemTestHelper.createInMemoryGoogleHadoopFileSystem();\n          ghfsFileSystemDescriptor = (FileSystemDescriptor) ghfs;\n\n          GoogleHadoopFileSystemIntegrationTest.postCreateInit();\n        }\n\n        @Override\n        public void after() {\n          GoogleHadoopFileSystemIntegrationTest.storageResource.after();\n        }\n      }", "var_name": "storageResource"}], "file": "gcs/src/test/java/com/google/cloud/hadoop/fs/gcs/GoogleHadoopFileSystemTest.java"}, "test_case": {"identifier": "testGetGcsPath", "parameters": "()", "modifiers": "@Override @Test public", "return": "void", "body": "@Override\n  @Test\n  public void testGetGcsPath() throws URISyntaxException {\n    GoogleHadoopFileSystem myghfs = (GoogleHadoopFileSystem) ghfs;\n    URI gcsPath = new URI(\"gs://\" + myghfs.getUri().getAuthority() + \"/dir/obj\");\n    assertThat(myghfs.getGcsPath(new Path(gcsPath))).isEqualTo(gcsPath);\n  }", "signature": "void testGetGcsPath()", "full_signature": "@Override @Test public void testGetGcsPath()", "class_method_signature": "GoogleHadoopFileSystemTest.testGetGcsPath()", "testcase": true, "constructor": false, "invocations": ["getAuthority", "getUri", "isEqualTo", "assertThat", "getGcsPath"]}, "focal_class": {"identifier": "GoogleHadoopFileSystem", "superclass": "extends GoogleHadoopFileSystemBase", "interfaces": "", "fields": [{"original_string": "private static final GoogleLogger logger = GoogleLogger.forEnclosingClass();", "modifier": "private static final", "type": "GoogleLogger", "declarator": "logger = GoogleLogger.forEnclosingClass()", "var_name": "logger"}, {"original_string": "public static final String SCHEME = GoogleHadoopFileSystemBase.SCHEME;", "modifier": "public static final", "type": "String", "declarator": "SCHEME = GoogleHadoopFileSystemBase.SCHEME", "var_name": "SCHEME"}, {"original_string": "private String rootBucket;", "modifier": "private", "type": "String", "declarator": "rootBucket", "var_name": "rootBucket"}], "methods": [{"identifier": "GoogleHadoopFileSystem", "parameters": "()", "modifiers": "public", "return": "", "signature": " GoogleHadoopFileSystem()", "full_signature": "public  GoogleHadoopFileSystem()", "class_method_signature": "GoogleHadoopFileSystem.GoogleHadoopFileSystem()", "testcase": false, "constructor": true}, {"identifier": "GoogleHadoopFileSystem", "parameters": "(GoogleCloudStorageFileSystem gcsfs)", "modifiers": "@VisibleForTesting", "return": "", "signature": " GoogleHadoopFileSystem(GoogleCloudStorageFileSystem gcsfs)", "full_signature": "@VisibleForTesting  GoogleHadoopFileSystem(GoogleCloudStorageFileSystem gcsfs)", "class_method_signature": "GoogleHadoopFileSystem.GoogleHadoopFileSystem(GoogleCloudStorageFileSystem gcsfs)", "testcase": false, "constructor": true}, {"identifier": "configureBuckets", "parameters": "(GoogleCloudStorageFileSystem gcsFs)", "modifiers": "@Override @VisibleForTesting protected", "return": "void", "signature": "void configureBuckets(GoogleCloudStorageFileSystem gcsFs)", "full_signature": "@Override @VisibleForTesting protected void configureBuckets(GoogleCloudStorageFileSystem gcsFs)", "class_method_signature": "GoogleHadoopFileSystem.configureBuckets(GoogleCloudStorageFileSystem gcsFs)", "testcase": false, "constructor": false}, {"identifier": "checkPath", "parameters": "(Path path)", "modifiers": "@Override protected", "return": "void", "signature": "void checkPath(Path path)", "full_signature": "@Override protected void checkPath(Path path)", "class_method_signature": "GoogleHadoopFileSystem.checkPath(Path path)", "testcase": false, "constructor": false}, {"identifier": "getRootBucketName", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "String", "signature": "String getRootBucketName()", "full_signature": "@VisibleForTesting String getRootBucketName()", "class_method_signature": "GoogleHadoopFileSystem.getRootBucketName()", "testcase": false, "constructor": false}, {"identifier": "getHomeDirectorySubpath", "parameters": "()", "modifiers": "@Override protected", "return": "String", "signature": "String getHomeDirectorySubpath()", "full_signature": "@Override protected String getHomeDirectorySubpath()", "class_method_signature": "GoogleHadoopFileSystem.getHomeDirectorySubpath()", "testcase": false, "constructor": false}, {"identifier": "getHadoopPath", "parameters": "(URI gcsPath)", "modifiers": "@Override public", "return": "Path", "signature": "Path getHadoopPath(URI gcsPath)", "full_signature": "@Override public Path getHadoopPath(URI gcsPath)", "class_method_signature": "GoogleHadoopFileSystem.getHadoopPath(URI gcsPath)", "testcase": false, "constructor": false}, {"identifier": "getGcsPath", "parameters": "(Path hadoopPath)", "modifiers": "@Override public", "return": "URI", "signature": "URI getGcsPath(Path hadoopPath)", "full_signature": "@Override public URI getGcsPath(Path hadoopPath)", "class_method_signature": "GoogleHadoopFileSystem.getGcsPath(Path hadoopPath)", "testcase": false, "constructor": false}, {"identifier": "getScheme", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getScheme()", "full_signature": "@Override public String getScheme()", "class_method_signature": "GoogleHadoopFileSystem.getScheme()", "testcase": false, "constructor": false}, {"identifier": "getFileSystemRoot", "parameters": "()", "modifiers": "@Override public", "return": "Path", "signature": "Path getFileSystemRoot()", "full_signature": "@Override public Path getFileSystemRoot()", "class_method_signature": "GoogleHadoopFileSystem.getFileSystemRoot()", "testcase": false, "constructor": false}, {"identifier": "getDefaultWorkingDirectory", "parameters": "()", "modifiers": "@Override public", "return": "Path", "signature": "Path getDefaultWorkingDirectory()", "full_signature": "@Override public Path getDefaultWorkingDirectory()", "class_method_signature": "GoogleHadoopFileSystem.getDefaultWorkingDirectory()", "testcase": false, "constructor": false}], "file": "gcs/src/main/java/com/google/cloud/hadoop/fs/gcs/GoogleHadoopFileSystem.java"}, "focal_method": {"identifier": "getGcsPath", "parameters": "(Path hadoopPath)", "modifiers": "@Override public", "return": "URI", "body": "@Override\n  public URI getGcsPath(Path hadoopPath) {\n    logger.atFinest().log(\"getGcsPath(hadoopPath: %s)\", hadoopPath);\n\n    // Convert to fully qualified absolute path; the Path object will callback to get our current\n    // workingDirectory as part of fully resolving the path.\n    Path resolvedPath = makeQualified(hadoopPath);\n\n    String objectName = resolvedPath.toUri().getPath();\n    if (objectName != null && resolvedPath.isAbsolute()) {\n      // Strip off leading '/' because GoogleCloudStorageFileSystem.getPath appends it explicitly\n      // between bucket and objectName.\n      objectName = objectName.substring(1);\n    }\n\n    // Construct GCS path uri.\n    URI gcsPath =\n        UriPaths.fromStringPathComponents(rootBucket, objectName, /* allowEmptyObjectName= */ true);\n    logger.atFinest().log(\"getGcsPath(hadoopPath: %s): %s\", hadoopPath, gcsPath);\n    return gcsPath;\n  }", "signature": "URI getGcsPath(Path hadoopPath)", "full_signature": "@Override public URI getGcsPath(Path hadoopPath)", "class_method_signature": "GoogleHadoopFileSystem.getGcsPath(Path hadoopPath)", "testcase": false, "constructor": false, "invocations": ["log", "atFinest", "makeQualified", "getPath", "toUri", "isAbsolute", "substring", "fromStringPathComponents", "log", "atFinest"]}, "repository": {"repo_id": 19684359, "url": "https://github.com/GoogleCloudDataproc/bigdata-interop", "stars": 178, "created": "5/12/2014 3:11:55 AM +00:00", "updates": "2020-01-23T23:10:40+00:00", "fork": "False", "license": "licensed"}}