{"test_class": {"identifier": "MimicProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MimicProcessor mimicProcessor;", "modifier": "private", "type": "MimicProcessor", "declarator": "mimicProcessor", "var_name": "mimicProcessor"}, {"original_string": "private CtClass src;", "modifier": "private", "type": "CtClass", "declarator": "src", "var_name": "src"}, {"original_string": "private CtClass dst;", "modifier": "private", "type": "CtClass", "declarator": "dst", "var_name": "dst"}], "file": "mimic-library/src/test/java/com/github/stephanenicolas/mimic/MimicProcessorTest.java"}, "test_case": {"identifier": "testTransform_with_mimic_interfaces_only", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTransform_with_mimic_interfaces_only() throws Exception {\n        // GIVEN\n        addMimicAnnotation(dst, TestSourceClass.class.getName(), true, false,\n                false, false);\n        final MimicCreator mimicMock = EasyMock.createMock(MimicCreator.class);\n        Guice.createInjector(new MimicCreatorTestModule(mimicMock))\n        .injectMembers(mimicProcessor);\n        mimicMock.mimicInterfaces(\n                EasyMock.eq(ClassPool.getDefault().get(\n                        TestSourceClass.class.getName())), EasyMock.eq(dst));\n        EasyMock.replay(mimicMock);\n\n        // WHEN\n        mimicProcessor.applyTransformations(dst);\n\n        // THEN\n        EasyMock.verify(mimicMock);\n    }", "signature": "void testTransform_with_mimic_interfaces_only()", "full_signature": "@Test public void testTransform_with_mimic_interfaces_only()", "class_method_signature": "MimicProcessorTest.testTransform_with_mimic_interfaces_only()", "testcase": true, "constructor": false, "invocations": ["addMimicAnnotation", "getName", "createMock", "injectMembers", "createInjector", "mimicInterfaces", "eq", "get", "getDefault", "getName", "eq", "replay", "applyTransformations", "verify"]}, "focal_class": {"identifier": "MimicProcessor", "superclass": "extends ClassTransformer", "interfaces": "", "fields": [{"original_string": "@Inject\n    private MimicCreator mimic;", "modifier": "@Inject\n    private", "type": "MimicCreator", "declarator": "mimic", "var_name": "mimic"}], "methods": [{"identifier": "MimicProcessor", "parameters": "()", "modifiers": "public", "return": "", "signature": " MimicProcessor()", "full_signature": "public  MimicProcessor()", "class_method_signature": "MimicProcessor.MimicProcessor()", "testcase": false, "constructor": true}, {"identifier": "applyTransformations", "parameters": "(final CtClass classToTransform)", "modifiers": "@Override protected", "return": "void", "signature": "void applyTransformations(final CtClass classToTransform)", "full_signature": "@Override protected void applyTransformations(final CtClass classToTransform)", "class_method_signature": "MimicProcessor.applyTransformations(final CtClass classToTransform)", "testcase": false, "constructor": false}, {"identifier": "shouldTransform", "parameters": "(CtClass candidateClass)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean shouldTransform(CtClass candidateClass)", "full_signature": "@Override protected boolean shouldTransform(CtClass candidateClass)", "class_method_signature": "MimicProcessor.shouldTransform(CtClass candidateClass)", "testcase": false, "constructor": false}], "file": "mimic-library/src/main/java/com/github/stephanenicolas/mimic/MimicProcessor.java"}, "focal_method": {"identifier": "applyTransformations", "parameters": "(final CtClass classToTransform)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n    protected void applyTransformations(final CtClass classToTransform) throws ClassNotFoundException, NotFoundException,\n            CannotCompileException, MimicException {\n        // Actually you must test if it exists, but it's just an example...\n        getLogger().debug(\"Analysing \" + classToTransform);\n\n        Mimic mimicAnnnotation = (Mimic) classToTransform\n                .getAnnotation(Mimic.class);\n        Class<?> srcClass = mimicAnnnotation.sourceClass();\n        MimicMode defaultMimicMode = mimicAnnnotation.defaultMimicMode();\n\n        MimicMethod[] mimicMethods = mimicAnnnotation.mimicMethods();\n\n        CtClass src = ClassPool.getDefault().get(srcClass.getName());\n        if (mimicAnnnotation.isMimicingInterfaces()\n                && mimicAnnnotation.isMimicingFields()\n                && mimicAnnnotation.isMimicingConstructors()\n                && mimicAnnnotation.isMimicingMethods()) {\n            mimic.mimicClass(src, classToTransform, defaultMimicMode, mimicMethods);\n        } else {\n            if (mimicAnnnotation.isMimicingInterfaces()) {\n                mimic.mimicInterfaces(src, classToTransform);\n            }\n            if (mimicAnnnotation.isMimicingFields()) {\n                mimic.mimicFields(src, classToTransform);\n            }\n            if (mimicAnnnotation.isMimicingConstructors()) {\n                mimic.mimicConstructors(src, classToTransform);\n            }\n            if (mimicAnnnotation.isMimicingMethods()) {\n                mimic.mimicMethods(src, classToTransform, defaultMimicMode, mimicMethods);\n            }\n        }\n        getLogger().debug(\n                \"Class \" + classToTransform.getName() + \" now mimics \"\n                        + src.getName());\n    }", "signature": "void applyTransformations(final CtClass classToTransform)", "full_signature": "@Override protected void applyTransformations(final CtClass classToTransform)", "class_method_signature": "MimicProcessor.applyTransformations(final CtClass classToTransform)", "testcase": false, "constructor": false, "invocations": ["debug", "getLogger", "getAnnotation", "sourceClass", "defaultMimicMode", "mimicMethods", "get", "getDefault", "getName", "isMimicingInterfaces", "isMimicingFields", "isMimicingConstructors", "isMimicingMethods", "mimicClass", "isMimicingInterfaces", "mimicInterfaces", "isMimicingFields", "mimicFields", "isMimicingConstructors", "mimicConstructors", "isMimicingMethods", "mimicMethods", "debug", "getLogger", "getName", "getName"]}, "repository": {"repo_id": 20893448, "url": "https://github.com/stephanenicolas/mimic", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 18, "size": 673, "license": "licensed"}}