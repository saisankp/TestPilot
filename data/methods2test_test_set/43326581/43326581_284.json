{"test_class": {"identifier": "ComponentImportUtilsTest", "superclass": "extends ComponentAndAttachmentAwareDBTest", "interfaces": "", "fields": [{"original_string": "private final String fileName = \"test-components.csv\";", "modifier": "private final", "type": "String", "declarator": "fileName = \"test-components.csv\"", "var_name": "fileName"}, {"original_string": "private String attachmentsFilename= \"test-attachments.csv\";", "modifier": "private", "type": "String", "declarator": "attachmentsFilename= \"test-attachments.csv\"", "var_name": "attachmentsFilename"}, {"original_string": "private final String REMOTE_URL = \"http://www.testurl.com\";", "modifier": "private final", "type": "String", "declarator": "REMOTE_URL = \"http://www.testurl.com\"", "var_name": "REMOTE_URL"}, {"original_string": "private final String OVERRIDING_ID = \"OVERRIDING_ID\";", "modifier": "private final", "type": "String", "declarator": "OVERRIDING_ID = \"OVERRIDING_ID\"", "var_name": "OVERRIDING_ID"}, {"original_string": "private final String ADDITIONAL_ID = \"ADDITIONAL_ID\";", "modifier": "private final", "type": "String", "declarator": "ADDITIONAL_ID = \"ADDITIONAL_ID\"", "var_name": "ADDITIONAL_ID"}], "file": "libraries/importers/component-importer/src/test/java/org/eclipse/sw360/importer/ComponentImportUtilsTest.java"}, "test_case": {"identifier": "testImportTwiceIsANoOp", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testImportTwiceIsANoOp() throws Exception {\n        FluentIterable<ComponentCSVRecord> compCSVRecords = getCompCSVRecordsFromTestFile(fileName);\n\n        assertThat(componentClient.getComponentSummary(user), hasSize(0));\n        assertThat(componentClient.getReleaseSummary(user), hasSize(0));\n        assertThat(attachmentRepository.getAll(), Matchers.hasSize(0) );\n\n        ComponentImportUtils.writeToDatabase(compCSVRecords, componentClient, vendorClient, attachmentClient, user);\n        assertThat(attachmentRepository.getAll(), Matchers.hasSize(1) );\n        List<Component> componentSummaryAfterFirst = componentClient.getComponentSummary(user);\n        List<Release> releaseSummaryAfterFirst = componentClient.getReleaseSummary(user);\n\n        assertExpectedComponentsInDb();\n\n        ComponentImportUtils.writeToDatabase(compCSVRecords, componentClient, vendorClient, attachmentClient, user);\n        assertExpectedComponentsInDb();\n        assertThat(attachmentRepository.getAll(), Matchers.hasSize(1) );\n        assertThat(componentClient.getComponentSummary(user), is(componentSummaryAfterFirst));\n        assertThat(componentClient.getReleaseSummary(user), is(releaseSummaryAfterFirst));\n\n    }", "signature": "void testImportTwiceIsANoOp()", "full_signature": "@Test public void testImportTwiceIsANoOp()", "class_method_signature": "ComponentImportUtilsTest.testImportTwiceIsANoOp()", "testcase": true, "constructor": false, "invocations": ["getCompCSVRecordsFromTestFile", "assertThat", "getComponentSummary", "hasSize", "assertThat", "getReleaseSummary", "hasSize", "assertThat", "getAll", "hasSize", "writeToDatabase", "assertThat", "getAll", "hasSize", "getComponentSummary", "getReleaseSummary", "assertExpectedComponentsInDb", "writeToDatabase", "assertExpectedComponentsInDb", "assertThat", "getAll", "hasSize", "assertThat", "getComponentSummary", "is", "assertThat", "getReleaseSummary", "is"]}, "focal_class": {"identifier": "ComponentImportUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = Logger.getLogger(ComponentImportUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = Logger.getLogger(ComponentImportUtils.class)", "var_name": "log"}], "methods": [{"identifier": "ComponentImportUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " ComponentImportUtils()", "full_signature": "private  ComponentImportUtils()", "class_method_signature": "ComponentImportUtils.ComponentImportUtils()", "testcase": false, "constructor": true}, {"identifier": "getURL", "parameters": "(String filename)", "modifiers": "public static", "return": "URL", "signature": "URL getURL(String filename)", "full_signature": "public static URL getURL(String filename)", "class_method_signature": "ComponentImportUtils.getURL(String filename)", "testcase": false, "constructor": false}, {"identifier": "writeReleaseLinksToDatabase", "parameters": "(FluentIterable<ReleaseLinkCSVRecord> csvRecords, ComponentService.Iface componentClient, User user)", "modifiers": "public static", "return": "RequestSummary", "signature": "RequestSummary writeReleaseLinksToDatabase(FluentIterable<ReleaseLinkCSVRecord> csvRecords, ComponentService.Iface componentClient, User user)", "full_signature": "public static RequestSummary writeReleaseLinksToDatabase(FluentIterable<ReleaseLinkCSVRecord> csvRecords, ComponentService.Iface componentClient, User user)", "class_method_signature": "ComponentImportUtils.writeReleaseLinksToDatabase(FluentIterable<ReleaseLinkCSVRecord> csvRecords, ComponentService.Iface componentClient, User user)", "testcase": false, "constructor": false}, {"identifier": "getUpdatedReleases", "parameters": "(Map<String, Release> releasesByIdentifier, final Set<String> releasesIdentifiersToBeUpdated)", "modifiers": "@NotNull private static", "return": "HashSet<Release>", "signature": "HashSet<Release> getUpdatedReleases(Map<String, Release> releasesByIdentifier, final Set<String> releasesIdentifiersToBeUpdated)", "full_signature": "@NotNull private static HashSet<Release> getUpdatedReleases(Map<String, Release> releasesByIdentifier, final Set<String> releasesIdentifiersToBeUpdated)", "class_method_signature": "ComponentImportUtils.getUpdatedReleases(Map<String, Release> releasesByIdentifier, final Set<String> releasesIdentifiersToBeUpdated)", "testcase": false, "constructor": false}, {"identifier": "getRelationshipMap", "parameters": "(Release release)", "modifiers": "private static", "return": "Map<String, ReleaseRelationship>", "signature": "Map<String, ReleaseRelationship> getRelationshipMap(Release release)", "full_signature": "private static Map<String, ReleaseRelationship> getRelationshipMap(Release release)", "class_method_signature": "ComponentImportUtils.getRelationshipMap(Release release)", "testcase": false, "constructor": false}, {"identifier": "writeAttachmentsToDatabase", "parameters": "(FluentIterable<ComponentAttachmentCSVRecord> compCSVRecords,\n                                                            User user, ComponentService.Iface componentClient, AttachmentService.Iface attachmentClient)", "modifiers": "public static", "return": "RequestSummary", "signature": "RequestSummary writeAttachmentsToDatabase(FluentIterable<ComponentAttachmentCSVRecord> compCSVRecords,\n                                                            User user, ComponentService.Iface componentClient, AttachmentService.Iface attachmentClient)", "full_signature": "public static RequestSummary writeAttachmentsToDatabase(FluentIterable<ComponentAttachmentCSVRecord> compCSVRecords,\n                                                            User user, ComponentService.Iface componentClient, AttachmentService.Iface attachmentClient)", "class_method_signature": "ComponentImportUtils.writeAttachmentsToDatabase(FluentIterable<ComponentAttachmentCSVRecord> compCSVRecords,\n                                                            User user, ComponentService.Iface componentClient, AttachmentService.Iface attachmentClient)", "testcase": false, "constructor": false}, {"identifier": "removeAutogeneratedAttachments", "parameters": "(AttachmentService.Iface attachmentClient /*read value*/,\n                                                                      Attachment attachment /*read value*/,\n                                                                      Release release /*return value*/)", "modifiers": "private static", "return": "HashSet<Attachment>", "signature": "HashSet<Attachment> removeAutogeneratedAttachments(AttachmentService.Iface attachmentClient /*read value*/,\n                                                                      Attachment attachment /*read value*/,\n                                                                      Release release /*return value*/)", "full_signature": "private static HashSet<Attachment> removeAutogeneratedAttachments(AttachmentService.Iface attachmentClient /*read value*/,\n                                                                      Attachment attachment /*read value*/,\n                                                                      Release release /*return value*/)", "class_method_signature": "ComponentImportUtils.removeAutogeneratedAttachments(AttachmentService.Iface attachmentClient /*read value*/,\n                                                                      Attachment attachment /*read value*/,\n                                                                      Release release /*return value*/)", "testcase": false, "constructor": false}, {"identifier": "getReleasesById", "parameters": "(List<Component> componentDetailedSummaryForExport)", "modifiers": "@NotNull public static", "return": "Map<String, Release>", "signature": "Map<String, Release> getReleasesById(List<Component> componentDetailedSummaryForExport)", "full_signature": "@NotNull public static Map<String, Release> getReleasesById(List<Component> componentDetailedSummaryForExport)", "class_method_signature": "ComponentImportUtils.getReleasesById(List<Component> componentDetailedSummaryForExport)", "testcase": false, "constructor": false}, {"identifier": "getReleasesByIdentifier", "parameters": "(List<Component> componentDetailedSummaryForExport)", "modifiers": "@NotNull public static", "return": "Map<String, Release>", "signature": "Map<String, Release> getReleasesByIdentifier(List<Component> componentDetailedSummaryForExport)", "full_signature": "@NotNull public static Map<String, Release> getReleasesByIdentifier(List<Component> componentDetailedSummaryForExport)", "class_method_signature": "ComponentImportUtils.getReleasesByIdentifier(List<Component> componentDetailedSummaryForExport)", "testcase": false, "constructor": false}, {"identifier": "getMapEntryReleaseIdentifierToRelease", "parameters": "(List<Release> releases)", "modifiers": "private static", "return": "Map<String, Release>", "signature": "Map<String, Release> getMapEntryReleaseIdentifierToRelease(List<Release> releases)", "full_signature": "private static Map<String, Release> getMapEntryReleaseIdentifierToRelease(List<Release> releases)", "class_method_signature": "ComponentImportUtils.getMapEntryReleaseIdentifierToRelease(List<Release> releases)", "testcase": false, "constructor": false}, {"identifier": "getComponentsByName", "parameters": "(List<Component> componentDetailedSummaryForExport)", "modifiers": "private static", "return": "ImmutableMap<String, Component>", "signature": "ImmutableMap<String, Component> getComponentsByName(List<Component> componentDetailedSummaryForExport)", "full_signature": "private static ImmutableMap<String, Component> getComponentsByName(List<Component> componentDetailedSummaryForExport)", "class_method_signature": "ComponentImportUtils.getComponentsByName(List<Component> componentDetailedSummaryForExport)", "testcase": false, "constructor": false}, {"identifier": "writeToDatabase", "parameters": "(Iterable<ComponentCSVRecord> compCSVRecords,\n                                                 ComponentService.Iface componentClient, VendorService.Iface vendorClient,\n                                                 AttachmentService.Iface attachmentClient, User user)", "modifiers": "public static", "return": "RequestSummary", "signature": "RequestSummary writeToDatabase(Iterable<ComponentCSVRecord> compCSVRecords,\n                                                 ComponentService.Iface componentClient, VendorService.Iface vendorClient,\n                                                 AttachmentService.Iface attachmentClient, User user)", "full_signature": "public static RequestSummary writeToDatabase(Iterable<ComponentCSVRecord> compCSVRecords,\n                                                 ComponentService.Iface componentClient, VendorService.Iface vendorClient,\n                                                 AttachmentService.Iface attachmentClient, User user)", "class_method_signature": "ComponentImportUtils.writeToDatabase(Iterable<ComponentCSVRecord> compCSVRecords,\n                                                 ComponentService.Iface componentClient, VendorService.Iface vendorClient,\n                                                 AttachmentService.Iface attachmentClient, User user)", "testcase": false, "constructor": false}, {"identifier": "getAttachmentContents", "parameters": "(HashMap<String, List<String>> releaseIdentifierToDownloadURL, ImmutableMap<String, AttachmentContent> URLtoAttachment, String releaseIdentifier)", "modifiers": "@Nullable private static", "return": "List<AttachmentContent>", "signature": "List<AttachmentContent> getAttachmentContents(HashMap<String, List<String>> releaseIdentifierToDownloadURL, ImmutableMap<String, AttachmentContent> URLtoAttachment, String releaseIdentifier)", "full_signature": "@Nullable private static List<AttachmentContent> getAttachmentContents(HashMap<String, List<String>> releaseIdentifierToDownloadURL, ImmutableMap<String, AttachmentContent> URLtoAttachment, String releaseIdentifier)", "class_method_signature": "ComponentImportUtils.getAttachmentContents(HashMap<String, List<String>> releaseIdentifierToDownloadURL, ImmutableMap<String, AttachmentContent> URLtoAttachment, String releaseIdentifier)", "testcase": false, "constructor": false}, {"identifier": "filterRelevantCSVRecordsAndGetAttachmentContents", "parameters": "(Iterable<ComponentCSVRecord> compCSVRecords, Map<String, String> componentNameToId, Set<String> knownReleaseIdentifiers, List<ComponentCSVRecord> relevantCSVRecords, HashMap<String, List<String>> releaseIdentifierToDownloadURL, List<AttachmentContent> attachmentContentsToUpdate)", "modifiers": "private static", "return": "void", "signature": "void filterRelevantCSVRecordsAndGetAttachmentContents(Iterable<ComponentCSVRecord> compCSVRecords, Map<String, String> componentNameToId, Set<String> knownReleaseIdentifiers, List<ComponentCSVRecord> relevantCSVRecords, HashMap<String, List<String>> releaseIdentifierToDownloadURL, List<AttachmentContent> attachmentContentsToUpdate)", "full_signature": "private static void filterRelevantCSVRecordsAndGetAttachmentContents(Iterable<ComponentCSVRecord> compCSVRecords, Map<String, String> componentNameToId, Set<String> knownReleaseIdentifiers, List<ComponentCSVRecord> relevantCSVRecords, HashMap<String, List<String>> releaseIdentifierToDownloadURL, List<AttachmentContent> attachmentContentsToUpdate)", "class_method_signature": "ComponentImportUtils.filterRelevantCSVRecordsAndGetAttachmentContents(Iterable<ComponentCSVRecord> compCSVRecords, Map<String, String> componentNameToId, Set<String> knownReleaseIdentifiers, List<ComponentCSVRecord> relevantCSVRecords, HashMap<String, List<String>> releaseIdentifierToDownloadURL, List<AttachmentContent> attachmentContentsToUpdate)", "testcase": false, "constructor": false}, {"identifier": "updateComponents", "parameters": "(Iterable<ComponentCSVRecord> compCSVRecords, ComponentService.Iface componentClient, User user)", "modifiers": "private static", "return": "RequestSummary", "signature": "RequestSummary updateComponents(Iterable<ComponentCSVRecord> compCSVRecords, ComponentService.Iface componentClient, User user)", "full_signature": "private static RequestSummary updateComponents(Iterable<ComponentCSVRecord> compCSVRecords, ComponentService.Iface componentClient, User user)", "class_method_signature": "ComponentImportUtils.updateComponents(Iterable<ComponentCSVRecord> compCSVRecords, ComponentService.Iface componentClient, User user)", "testcase": false, "constructor": false}, {"identifier": "convertCSVRecordsToCompCSVRecords", "parameters": "(List<CSVRecord> in)", "modifiers": "public static", "return": "FluentIterable<ComponentCSVRecord>", "signature": "FluentIterable<ComponentCSVRecord> convertCSVRecordsToCompCSVRecords(List<CSVRecord> in)", "full_signature": "public static FluentIterable<ComponentCSVRecord> convertCSVRecordsToCompCSVRecords(List<CSVRecord> in)", "class_method_signature": "ComponentImportUtils.convertCSVRecordsToCompCSVRecords(List<CSVRecord> in)", "testcase": false, "constructor": false}, {"identifier": "convertCSVRecordsToComponentAttachmentCSVRecords", "parameters": "(List<CSVRecord> in)", "modifiers": "public static", "return": "FluentIterable<ComponentAttachmentCSVRecord>", "signature": "FluentIterable<ComponentAttachmentCSVRecord> convertCSVRecordsToComponentAttachmentCSVRecords(List<CSVRecord> in)", "full_signature": "public static FluentIterable<ComponentAttachmentCSVRecord> convertCSVRecordsToComponentAttachmentCSVRecords(List<CSVRecord> in)", "class_method_signature": "ComponentImportUtils.convertCSVRecordsToComponentAttachmentCSVRecords(List<CSVRecord> in)", "testcase": false, "constructor": false}, {"identifier": "convertCSVRecordsToReleaseLinkCSVRecords", "parameters": "(List<CSVRecord> in)", "modifiers": "public static", "return": "FluentIterable<ReleaseLinkCSVRecord>", "signature": "FluentIterable<ReleaseLinkCSVRecord> convertCSVRecordsToReleaseLinkCSVRecords(List<CSVRecord> in)", "full_signature": "public static FluentIterable<ReleaseLinkCSVRecord> convertCSVRecordsToReleaseLinkCSVRecords(List<CSVRecord> in)", "class_method_signature": "ComponentImportUtils.convertCSVRecordsToReleaseLinkCSVRecords(List<CSVRecord> in)", "testcase": false, "constructor": false}, {"identifier": "getVendorNameToId", "parameters": "(Iterable<ComponentCSVRecord> compCSVRecords,\n                                                        VendorService.Iface vendorClient)", "modifiers": "@NotNull public static", "return": "Map<String, String>", "signature": "Map<String, String> getVendorNameToId(Iterable<ComponentCSVRecord> compCSVRecords,\n                                                        VendorService.Iface vendorClient)", "full_signature": "@NotNull public static Map<String, String> getVendorNameToId(Iterable<ComponentCSVRecord> compCSVRecords,\n                                                        VendorService.Iface vendorClient)", "class_method_signature": "ComponentImportUtils.getVendorNameToId(Iterable<ComponentCSVRecord> compCSVRecords,\n                                                        VendorService.Iface vendorClient)", "testcase": false, "constructor": false}, {"identifier": "getVendorNameToVendorId", "parameters": "(VendorService.Iface vendorClient)", "modifiers": "@NotNull private static", "return": "Map<String, String>", "signature": "Map<String, String> getVendorNameToVendorId(VendorService.Iface vendorClient)", "full_signature": "@NotNull private static Map<String, String> getVendorNameToVendorId(VendorService.Iface vendorClient)", "class_method_signature": "ComponentImportUtils.getVendorNameToVendorId(VendorService.Iface vendorClient)", "testcase": false, "constructor": false}, {"identifier": "getReleaseIdentifiers", "parameters": "(List<Release> releaseSummary)", "modifiers": "@NotNull public static", "return": "List<String>", "signature": "List<String> getReleaseIdentifiers(List<Release> releaseSummary)", "full_signature": "@NotNull public static List<String> getReleaseIdentifiers(List<Release> releaseSummary)", "class_method_signature": "ComponentImportUtils.getReleaseIdentifiers(List<Release> releaseSummary)", "testcase": false, "constructor": false}, {"identifier": "getFlattenedView", "parameters": "(List<Component> componentDetailedSummaryForExport)", "modifiers": "@NotNull public static", "return": "List<Iterable<String>>", "signature": "List<Iterable<String>> getFlattenedView(List<Component> componentDetailedSummaryForExport)", "full_signature": "@NotNull public static List<Iterable<String>> getFlattenedView(List<Component> componentDetailedSummaryForExport)", "class_method_signature": "ComponentImportUtils.getFlattenedView(List<Component> componentDetailedSummaryForExport)", "testcase": false, "constructor": false}, {"identifier": "isNotProcessed", "parameters": "(Set<String> exportedComponentIdentifiers, Component component)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNotProcessed(Set<String> exportedComponentIdentifiers, Component component)", "full_signature": "public static boolean isNotProcessed(Set<String> exportedComponentIdentifiers, Component component)", "class_method_signature": "ComponentImportUtils.isNotProcessed(Set<String> exportedComponentIdentifiers, Component component)", "testcase": false, "constructor": false}, {"identifier": "isNotProcessed", "parameters": "(Set<String> exportedReleaseIdentifiers, Release release)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNotProcessed(Set<String> exportedReleaseIdentifiers, Release release)", "full_signature": "public static boolean isNotProcessed(Set<String> exportedReleaseIdentifiers, Release release)", "class_method_signature": "ComponentImportUtils.isNotProcessed(Set<String> exportedReleaseIdentifiers, Release release)", "testcase": false, "constructor": false}], "file": "libraries/importers/component-importer/src/main/java/org/eclipse/sw360/importer/ComponentImportUtils.java"}, "focal_method": {"identifier": "writeToDatabase", "parameters": "(Iterable<ComponentCSVRecord> compCSVRecords,\n                                                 ComponentService.Iface componentClient, VendorService.Iface vendorClient,\n                                                 AttachmentService.Iface attachmentClient, User user)", "modifiers": "public static", "return": "RequestSummary", "body": "public static RequestSummary writeToDatabase(Iterable<ComponentCSVRecord> compCSVRecords,\n                                                 ComponentService.Iface componentClient, VendorService.Iface vendorClient,\n                                                 AttachmentService.Iface attachmentClient, User user) throws TException {\n\n        Map<String, String> vendorNameToVendorId = getVendorNameToId(compCSVRecords, vendorClient);\n        log.debug(format(\"Read vendors: (%d) %s \", vendorNameToVendorId.size(), vendorNameToVendorId));\n\n        final RequestSummary componentRequestSummary = updateComponents(compCSVRecords, componentClient, user);\n\n\n        Map<String, String> componentNameToId = new HashMap<>();\n        final ArrayList<Release> releases = new ArrayList<>();\n        for (Component component : componentClient.getComponentDetailedSummaryForExport()) {\n            componentNameToId.put(component.getName(), component.getId());\n            final List<Release> componentReleases = component.getReleases();\n            if (componentReleases != null && componentReleases.size() > 0)\n                releases.addAll(componentReleases);\n        }\n        Set<String> knownReleaseIdentifiers = Sets.newHashSet(getReleaseIdentifiers(releases));\n\n\n        List<ComponentCSVRecord> relevantCSVRecords = new ArrayList<>();\n        final HashMap<String, List<String>> releaseIdentifierToDownloadURL = new HashMap<>();\n\n\n        List<AttachmentContent> attachmentContentsToUpdate = new ArrayList<>();\n\n        filterRelevantCSVRecordsAndGetAttachmentContents(compCSVRecords, componentNameToId, knownReleaseIdentifiers, relevantCSVRecords,\n                releaseIdentifierToDownloadURL, attachmentContentsToUpdate);\n\n        attachmentContentsToUpdate = attachmentClient.makeAttachmentContents(attachmentContentsToUpdate);\n        final ImmutableMap<String, AttachmentContent> URLtoAttachment = Maps.uniqueIndex(attachmentContentsToUpdate, new Function<AttachmentContent, String>() {\n            @Override\n            public String apply(AttachmentContent input) {\n                return input.getRemoteUrl();\n            }\n        });\n\n        Set<Release> releasesToUpdate = new HashSet<>();\n\n\n        //I do not need so many checks here because I only iterate over the relevant CSV records\n        for (ComponentCSVRecord componentCSVRecord : relevantCSVRecords) {\n            String releaseIdentifier = componentCSVRecord.getReleaseIdentifier();\n            String vendorName = componentCSVRecord.getVendorName();\n            String vendorId = vendorNameToVendorId.get(vendorName);\n\n            String componentId = componentNameToId.get(componentCSVRecord.getComponentName());\n            List<AttachmentContent> attachmentContents = getAttachmentContents(releaseIdentifierToDownloadURL, URLtoAttachment, releaseIdentifier);\n\n            Release releaseToAdd = componentCSVRecord.getRelease(vendorId, componentId, attachmentContents);\n            knownReleaseIdentifiers.add(releaseIdentifier);\n            if (releaseToAdd != null) {\n                releasesToUpdate.add(releaseToAdd);\n            }\n\n        }\n\n        final RequestSummary releaseRequestSummary = componentClient.updateReleases(releasesToUpdate, user);\n\n        return CommonUtils.addRequestSummaries(componentRequestSummary, \"component\", releaseRequestSummary, \"release\");\n    }", "signature": "RequestSummary writeToDatabase(Iterable<ComponentCSVRecord> compCSVRecords,\n                                                 ComponentService.Iface componentClient, VendorService.Iface vendorClient,\n                                                 AttachmentService.Iface attachmentClient, User user)", "full_signature": "public static RequestSummary writeToDatabase(Iterable<ComponentCSVRecord> compCSVRecords,\n                                                 ComponentService.Iface componentClient, VendorService.Iface vendorClient,\n                                                 AttachmentService.Iface attachmentClient, User user)", "class_method_signature": "ComponentImportUtils.writeToDatabase(Iterable<ComponentCSVRecord> compCSVRecords,\n                                                 ComponentService.Iface componentClient, VendorService.Iface vendorClient,\n                                                 AttachmentService.Iface attachmentClient, User user)", "testcase": false, "constructor": false, "invocations": ["getVendorNameToId", "debug", "format", "size", "updateComponents", "getComponentDetailedSummaryForExport", "put", "getName", "getId", "getReleases", "size", "addAll", "newHashSet", "getReleaseIdentifiers", "filterRelevantCSVRecordsAndGetAttachmentContents", "makeAttachmentContents", "uniqueIndex", "getRemoteUrl", "getReleaseIdentifier", "getVendorName", "get", "get", "getComponentName", "getAttachmentContents", "getRelease", "add", "add", "updateReleases", "addRequestSummaries"]}, "repository": {"repo_id": 43326581, "url": "https://github.com/sw360/sw360portal", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 31, "size": 8770, "license": "licensed"}}