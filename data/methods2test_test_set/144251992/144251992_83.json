{"test_class": {"identifier": "BaseAttributeMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String ATTRIBUTE_ID = \"attr\";", "modifier": "private final", "type": "String", "declarator": "ATTRIBUTE_ID = \"attr\"", "var_name": "ATTRIBUTE_ID"}, {"original_string": "@Mock\n    private Attributes attributesMock;", "modifier": "@Mock\n    private", "type": "Attributes", "declarator": "attributesMock", "var_name": "attributesMock"}, {"original_string": "@Mock\n    private Attribute attributeMock;", "modifier": "@Mock\n    private", "type": "Attribute", "declarator": "attributeMock", "var_name": "attributeMock"}, {"original_string": "@Mock\n    private NamingEnumeration enumerationMock;", "modifier": "@Mock\n    private", "type": "NamingEnumeration", "declarator": "enumerationMock", "var_name": "enumerationMock"}, {"original_string": "private BaseAttributeMapper<String> baseAttributeMapper;", "modifier": "private", "type": "BaseAttributeMapper<String>", "declarator": "baseAttributeMapper", "var_name": "baseAttributeMapper"}], "file": "backend/project-board/src/test/java/de/adesso/projectboard/ad/service/mapper/BaseAttributeMapperTest.java"}, "test_case": {"identifier": "getAttrByIdReturnsEmptyOptionalWhenAttrNotPresent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getAttrByIdReturnsEmptyOptionalWhenAttrNotPresent() {\n        // given\n\n        // when\n        var actualAttrOptional = baseAttributeMapper.getAttributeById(attributesMock, ATTRIBUTE_ID);\n\n        // then\n        assertThat(actualAttrOptional)\n                .isNotPresent();\n    }", "signature": "void getAttrByIdReturnsEmptyOptionalWhenAttrNotPresent()", "full_signature": "@Test public void getAttrByIdReturnsEmptyOptionalWhenAttrNotPresent()", "class_method_signature": "BaseAttributeMapperTest.getAttrByIdReturnsEmptyOptionalWhenAttrNotPresent()", "testcase": true, "constructor": false, "invocations": ["getAttributeById", "isNotPresent", "assertThat"]}, "focal_class": {"identifier": "BaseAttributeMapper", "superclass": "", "interfaces": "implements AttributesMapper<T>", "fields": [], "methods": [{"identifier": "getSingleAttributeValue", "parameters": "(Attributes attributes, String attributeId, Class<S> typeClass)", "modifiers": "protected", "return": "S", "signature": "S getSingleAttributeValue(Attributes attributes, String attributeId, Class<S> typeClass)", "full_signature": "protected S getSingleAttributeValue(Attributes attributes, String attributeId, Class<S> typeClass)", "class_method_signature": "BaseAttributeMapper.getSingleAttributeValue(Attributes attributes, String attributeId, Class<S> typeClass)", "testcase": false, "constructor": false}, {"identifier": "getAllAttributeValues", "parameters": "(Attributes attributes, String attributeId, Class<S> typeClass)", "modifiers": "protected", "return": "List<S>", "signature": "List<S> getAllAttributeValues(Attributes attributes, String attributeId, Class<S> typeClass)", "full_signature": "protected List<S> getAllAttributeValues(Attributes attributes, String attributeId, Class<S> typeClass)", "class_method_signature": "BaseAttributeMapper.getAllAttributeValues(Attributes attributes, String attributeId, Class<S> typeClass)", "testcase": false, "constructor": false}, {"identifier": "getAttributeById", "parameters": "(Attributes attributes, String attributeId)", "modifiers": "protected", "return": "Optional<Attribute>", "signature": "Optional<Attribute> getAttributeById(Attributes attributes, String attributeId)", "full_signature": "protected Optional<Attribute> getAttributeById(Attributes attributes, String attributeId)", "class_method_signature": "BaseAttributeMapper.getAttributeById(Attributes attributes, String attributeId)", "testcase": false, "constructor": false}, {"identifier": "castAttributeValues", "parameters": "(Attribute attribute, Class<S> typeClass)", "modifiers": "protected", "return": "List<S>", "signature": "List<S> castAttributeValues(Attribute attribute, Class<S> typeClass)", "full_signature": "protected List<S> castAttributeValues(Attribute attribute, Class<S> typeClass)", "class_method_signature": "BaseAttributeMapper.castAttributeValues(Attribute attribute, Class<S> typeClass)", "testcase": false, "constructor": false}], "file": "backend/project-board/src/main/java/de/adesso/projectboard/ad/service/mapper/BaseAttributeMapper.java"}, "focal_method": {"identifier": "getAttributeById", "parameters": "(Attributes attributes, String attributeId)", "modifiers": "protected", "return": "Optional<Attribute>", "body": "protected Optional<Attribute> getAttributeById(Attributes attributes, String attributeId) {\n        requireNonNull(attributeId);\n        requireNonNull(attributes);\n\n        return Optional.ofNullable(attributes.get(attributeId));\n    }", "signature": "Optional<Attribute> getAttributeById(Attributes attributes, String attributeId)", "full_signature": "protected Optional<Attribute> getAttributeById(Attributes attributes, String attributeId)", "class_method_signature": "BaseAttributeMapper.getAttributeById(Attributes attributes, String attributeId)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "requireNonNull", "ofNullable", "get"]}, "repository": {"repo_id": 144251992, "url": "https://github.com/adessoAG/project-board", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 2608, "license": "licensed"}}