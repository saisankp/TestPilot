{"test_class": {"identifier": "PartitionTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [], "file": "tool/group/src/test/java/org/openscience/cdk/group/PartitionTest.java"}, "test_case": {"identifier": "equalsTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void equalsTest() {\n        Partition p = new Partition(new int[][]{{0}, {1}});\n        Partition o = new Partition(new int[][]{{0}, {1}});\n        Assert.assertEquals(p, o);\n    }", "signature": "void equalsTest()", "full_signature": "@Test public void equalsTest()", "class_method_signature": "PartitionTest.equalsTest()", "testcase": true, "constructor": false, "invocations": ["assertEquals"]}, "focal_class": {"identifier": "Partition", "superclass": "", "interfaces": "", "fields": [{"original_string": "private List<SortedSet<Integer>> cells;", "modifier": "private", "type": "List<SortedSet<Integer>>", "declarator": "cells", "var_name": "cells"}], "methods": [{"identifier": "Partition", "parameters": "()", "modifiers": "public", "return": "", "signature": " Partition()", "full_signature": "public  Partition()", "class_method_signature": "Partition.Partition()", "testcase": false, "constructor": true}, {"identifier": "Partition", "parameters": "(Partition other)", "modifiers": "public", "return": "", "signature": " Partition(Partition other)", "full_signature": "public  Partition(Partition other)", "class_method_signature": "Partition.Partition(Partition other)", "testcase": false, "constructor": true}, {"identifier": "Partition", "parameters": "(int[][] cellData)", "modifiers": "public", "return": "", "signature": " Partition(int[][] cellData)", "full_signature": "public  Partition(int[][] cellData)", "class_method_signature": "Partition.Partition(int[][] cellData)", "testcase": false, "constructor": true}, {"identifier": "unit", "parameters": "(int size)", "modifiers": "public static", "return": "Partition", "signature": "Partition unit(int size)", "full_signature": "public static Partition unit(int size)", "class_method_signature": "Partition.unit(int size)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "Partition.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Partition.hashCode()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "Partition.size()", "testcase": false, "constructor": false}, {"identifier": "numberOfElements", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int numberOfElements()", "full_signature": "public int numberOfElements()", "class_method_signature": "Partition.numberOfElements()", "testcase": false, "constructor": false}, {"identifier": "isDiscrete", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDiscrete()", "full_signature": "public boolean isDiscrete()", "class_method_signature": "Partition.isDiscrete()", "testcase": false, "constructor": false}, {"identifier": "toPermutation", "parameters": "()", "modifiers": "public", "return": "Permutation", "signature": "Permutation toPermutation()", "full_signature": "public Permutation toPermutation()", "class_method_signature": "Partition.toPermutation()", "testcase": false, "constructor": false}, {"identifier": "inOrder", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean inOrder()", "full_signature": "public boolean inOrder()", "class_method_signature": "Partition.inOrder()", "testcase": false, "constructor": false}, {"identifier": "getFirstInCell", "parameters": "(int cellIndex)", "modifiers": "public", "return": "int", "signature": "int getFirstInCell(int cellIndex)", "full_signature": "public int getFirstInCell(int cellIndex)", "class_method_signature": "Partition.getFirstInCell(int cellIndex)", "testcase": false, "constructor": false}, {"identifier": "getCell", "parameters": "(int cellIndex)", "modifiers": "public", "return": "SortedSet<Integer>", "signature": "SortedSet<Integer> getCell(int cellIndex)", "full_signature": "public SortedSet<Integer> getCell(int cellIndex)", "class_method_signature": "Partition.getCell(int cellIndex)", "testcase": false, "constructor": false}, {"identifier": "splitBefore", "parameters": "(int cellIndex, int splitElement)", "modifiers": "public", "return": "Partition", "signature": "Partition splitBefore(int cellIndex, int splitElement)", "full_signature": "public Partition splitBefore(int cellIndex, int splitElement)", "class_method_signature": "Partition.splitBefore(int cellIndex, int splitElement)", "testcase": false, "constructor": false}, {"identifier": "splitAfter", "parameters": "(int cellIndex, int splitElement)", "modifiers": "public", "return": "Partition", "signature": "Partition splitAfter(int cellIndex, int splitElement)", "full_signature": "public Partition splitAfter(int cellIndex, int splitElement)", "class_method_signature": "Partition.splitAfter(int cellIndex, int splitElement)", "testcase": false, "constructor": false}, {"identifier": "setAsPermutation", "parameters": "(int upTo)", "modifiers": "public", "return": "Permutation", "signature": "Permutation setAsPermutation(int upTo)", "full_signature": "public Permutation setAsPermutation(int upTo)", "class_method_signature": "Partition.setAsPermutation(int upTo)", "testcase": false, "constructor": false}, {"identifier": "isDiscreteCell", "parameters": "(int cellIndex)", "modifiers": "public", "return": "boolean", "signature": "boolean isDiscreteCell(int cellIndex)", "full_signature": "public boolean isDiscreteCell(int cellIndex)", "class_method_signature": "Partition.isDiscreteCell(int cellIndex)", "testcase": false, "constructor": false}, {"identifier": "getIndexOfFirstNonDiscreteCell", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getIndexOfFirstNonDiscreteCell()", "full_signature": "public int getIndexOfFirstNonDiscreteCell()", "class_method_signature": "Partition.getIndexOfFirstNonDiscreteCell()", "testcase": false, "constructor": false}, {"identifier": "addSingletonCell", "parameters": "(int element)", "modifiers": "public", "return": "void", "signature": "void addSingletonCell(int element)", "full_signature": "public void addSingletonCell(int element)", "class_method_signature": "Partition.addSingletonCell(int element)", "testcase": false, "constructor": false}, {"identifier": "removeCell", "parameters": "(int index)", "modifiers": "public", "return": "void", "signature": "void removeCell(int index)", "full_signature": "public void removeCell(int index)", "class_method_signature": "Partition.removeCell(int index)", "testcase": false, "constructor": false}, {"identifier": "addCell", "parameters": "(int... elements)", "modifiers": "public", "return": "void", "signature": "void addCell(int... elements)", "full_signature": "public void addCell(int... elements)", "class_method_signature": "Partition.addCell(int... elements)", "testcase": false, "constructor": false}, {"identifier": "addCell", "parameters": "(Collection<Integer> elements)", "modifiers": "public", "return": "void", "signature": "void addCell(Collection<Integer> elements)", "full_signature": "public void addCell(Collection<Integer> elements)", "class_method_signature": "Partition.addCell(Collection<Integer> elements)", "testcase": false, "constructor": false}, {"identifier": "addToCell", "parameters": "(int index, int element)", "modifiers": "public", "return": "void", "signature": "void addToCell(int index, int element)", "full_signature": "public void addToCell(int index, int element)", "class_method_signature": "Partition.addToCell(int index, int element)", "testcase": false, "constructor": false}, {"identifier": "insertCell", "parameters": "(int index, SortedSet<Integer> cell)", "modifiers": "public", "return": "void", "signature": "void insertCell(int index, SortedSet<Integer> cell)", "full_signature": "public void insertCell(int index, SortedSet<Integer> cell)", "class_method_signature": "Partition.insertCell(int index, SortedSet<Integer> cell)", "testcase": false, "constructor": false}, {"identifier": "copyBlock", "parameters": "(int cellIndex)", "modifiers": "public", "return": "SortedSet<Integer>", "signature": "SortedSet<Integer> copyBlock(int cellIndex)", "full_signature": "public SortedSet<Integer> copyBlock(int cellIndex)", "class_method_signature": "Partition.copyBlock(int cellIndex)", "testcase": false, "constructor": false}, {"identifier": "order", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void order()", "full_signature": "public void order()", "class_method_signature": "Partition.order()", "testcase": false, "constructor": false}, {"identifier": "inSameCell", "parameters": "(int elementI, int elementJ)", "modifiers": "public", "return": "boolean", "signature": "boolean inSameCell(int elementI, int elementJ)", "full_signature": "public boolean inSameCell(int elementI, int elementJ)", "class_method_signature": "Partition.inSameCell(int elementI, int elementJ)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Partition.toString()", "testcase": false, "constructor": false}, {"identifier": "fromString", "parameters": "(String strForm)", "modifiers": "public static", "return": "Partition", "signature": "Partition fromString(String strForm)", "full_signature": "public static Partition fromString(String strForm)", "class_method_signature": "Partition.fromString(String strForm)", "testcase": false, "constructor": false}], "file": "tool/group/src/main/java/org/openscience/cdk/group/Partition.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean equals(Object o) {\n\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        Partition partition = (Partition) o;\n\n        return cells != null ? cells.equals(partition.cells) : partition.cells == null;\n\n    }", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "Partition.equals(Object o)", "testcase": false, "constructor": false, "invocations": ["getClass", "getClass", "equals"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}