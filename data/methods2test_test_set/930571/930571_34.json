{"test_class": {"identifier": "PotOwnerTasksPreprocessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    IdentityProvider identityProvider;", "modifier": "@Mock", "type": "IdentityProvider", "declarator": "identityProvider", "var_name": "identityProvider"}, {"original_string": "@Mock\n    UserGroupCallback userGroupCallback;", "modifier": "@Mock", "type": "UserGroupCallback", "declarator": "userGroupCallback", "var_name": "userGroupCallback"}, {"original_string": "@Mock\n    DataSetMetadata metaData;", "modifier": "@Mock", "type": "DataSetMetadata", "declarator": "metaData", "var_name": "metaData"}, {"original_string": "DataSetLookup dataSetLookup;", "modifier": "", "type": "DataSetLookup", "declarator": "dataSetLookup", "var_name": "dataSetLookup"}, {"original_string": "@InjectMocks\n    PotOwnerTasksPreprocessor potOwnerTasksPreprocessor;", "modifier": "@InjectMocks", "type": "PotOwnerTasksPreprocessor", "declarator": "potOwnerTasksPreprocessor", "var_name": "potOwnerTasksPreprocessor"}], "file": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/impl/query/preprocessor/PotOwnerTasksPreprocessorTest.java"}, "test_case": {"identifier": "testSetUserWithoutRoles", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSetUserWithoutRoles() {\n        String userId = \"userId\";\n\n        when(userGroupCallback.getGroupsForUser(userId)).thenReturn(Collections.emptyList());\n        when(identityProvider.getName()).thenReturn(userId);\n\n        potOwnerTasksPreprocessor.preprocess(dataSetLookup);\n\n        assertEquals(\"((ENTITY_ID is_null  OR ENTITY_ID != \" + userId + \") AND ((ID = \" + userId + \" AND (ACTUALOWNER =  OR ACTUALOWNER is_null )) OR ACTUALOWNER = \" + userId + \"))\",\n                dataSetLookup.getFirstFilterOp().getColumnFilterList().get(0).toString());\n    }", "signature": "void testSetUserWithoutRoles()", "full_signature": "@Test public void testSetUserWithoutRoles()", "class_method_signature": "PotOwnerTasksPreprocessorTest.testSetUserWithoutRoles()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getGroupsForUser", "emptyList", "thenReturn", "when", "getName", "preprocess", "assertEquals", "toString", "get", "getColumnFilterList", "getFirstFilterOp"]}, "focal_class": {"identifier": "PotOwnerTasksPreprocessor", "superclass": "extends UserTasksPreprocessor", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(PotOwnerTasksPreprocessor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(PotOwnerTasksPreprocessor.class)", "var_name": "LOGGER"}, {"original_string": "private IdentityProvider identityProvider;", "modifier": "private", "type": "IdentityProvider", "declarator": "identityProvider", "var_name": "identityProvider"}, {"original_string": "private UserGroupCallback userGroupCallback;", "modifier": "private", "type": "UserGroupCallback", "declarator": "userGroupCallback", "var_name": "userGroupCallback"}], "methods": [{"identifier": "PotOwnerTasksPreprocessor", "parameters": "(IdentityProvider identityProvider,\n                                     UserGroupCallback userGroupCallback,\n                                     DataSetMetadata metadata)", "modifiers": "public", "return": "", "signature": " PotOwnerTasksPreprocessor(IdentityProvider identityProvider,\n                                     UserGroupCallback userGroupCallback,\n                                     DataSetMetadata metadata)", "full_signature": "public  PotOwnerTasksPreprocessor(IdentityProvider identityProvider,\n                                     UserGroupCallback userGroupCallback,\n                                     DataSetMetadata metadata)", "class_method_signature": "PotOwnerTasksPreprocessor.PotOwnerTasksPreprocessor(IdentityProvider identityProvider,\n                                     UserGroupCallback userGroupCallback,\n                                     DataSetMetadata metadata)", "testcase": false, "constructor": true}, {"identifier": "preprocess", "parameters": "(DataSetLookup lookup)", "modifiers": "@SuppressWarnings(\"rawtypes\") @Override public", "return": "void", "signature": "void preprocess(DataSetLookup lookup)", "full_signature": "@SuppressWarnings(\"rawtypes\") @Override public void preprocess(DataSetLookup lookup)", "class_method_signature": "PotOwnerTasksPreprocessor.preprocess(DataSetLookup lookup)", "testcase": false, "constructor": false}], "file": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/query/preprocessor/PotOwnerTasksPreprocessor.java"}, "focal_method": {"identifier": "preprocess", "parameters": "(DataSetLookup lookup)", "modifiers": "@SuppressWarnings(\"rawtypes\") @Override public", "return": "void", "body": "@SuppressWarnings(\"rawtypes\")\n    @Override\n    public void preprocess(DataSetLookup lookup) {\n        if (identityProvider == null || userGroupCallback == null) {\n            return;\n        }\n\n        final List<String> groupsForUser = Optional.ofNullable(userGroupCallback.getGroupsForUser(identityProvider.getName())).orElse(new ArrayList<>());\n        final List<Comparable> orgEntities = new ArrayList<>(groupsForUser);\n        orgEntities.add(identityProvider.getName());\n\n        final ColumnFilter myGroupFilter = AND(\n                equalsTo(COLUMN_ORGANIZATIONAL_ENTITY, orgEntities),\n                OR(equalsTo(COLUMN_ACTUALOWNER, \"\"), isNull(COLUMN_ACTUALOWNER)));\n\n        final ColumnFilter columnFilter = AND(\n                OR(isNull(COLUMN_EXCLUDED_OWNER), notEqualsTo(COLUMN_EXCLUDED_OWNER, identityProvider.getName())),\n                OR(myGroupFilter, equalsTo(COLUMN_ACTUALOWNER, identityProvider.getName())));\n\n        LOGGER.debug(\"Adding column filter: {}\", columnFilter);\n\n        if (lookup.getFirstFilterOp() != null) {\n            lookup.getFirstFilterOp().addFilterColumn(columnFilter);\n        } else {\n            DataSetFilter filter = new DataSetFilter();\n            filter.addFilterColumn(columnFilter);\n            lookup.addOperation(filter);\n        }\n\n        super.preprocess(lookup);\n    }", "signature": "void preprocess(DataSetLookup lookup)", "full_signature": "@SuppressWarnings(\"rawtypes\") @Override public void preprocess(DataSetLookup lookup)", "class_method_signature": "PotOwnerTasksPreprocessor.preprocess(DataSetLookup lookup)", "testcase": false, "constructor": false, "invocations": ["orElse", "ofNullable", "getGroupsForUser", "getName", "add", "getName", "AND", "equalsTo", "OR", "equalsTo", "isNull", "AND", "OR", "isNull", "notEqualsTo", "getName", "OR", "equalsTo", "getName", "debug", "getFirstFilterOp", "addFilterColumn", "getFirstFilterOp", "addFilterColumn", "addOperation", "preprocess"]}, "repository": {"repo_id": 930571, "url": "https://github.com/kiegroup/jbpm", "stars": 1035, "created": "9/22/2010 1:19:52 PM +00:00", "updates": "2020-01-22T03:39:57+00:00", "fork": "False", "license": "licensed"}}