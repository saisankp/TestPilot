{"test_class": {"identifier": "UtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "aliyun-sms/src/test/java/cn/javaer/aliyun/sms/UtilsTest.java"}, "test_case": {"identifier": "toJsonStr", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void toJsonStr() {\n        final Map<String, String> map = new HashMap<>();\n        map.put(\"k1\", \"v1\");\n        map.put(\"k2\", \"v2\");\n        map.put(\"k3\", \"v3\");\n        map.put(\"k\\\"\", \"v\\\"\");\n        assertEquals(\"{\\\"k1\\\":\\\"v1\\\",\\\"k2\\\":\\\"v2\\\",\\\"k\\\\\\\"\\\":\\\"v\\\\\\\"\\\",\\\"k3\\\":\\\"v3\\\"}\", Utils.toJsonStr(map));\n    }", "signature": "void toJsonStr()", "full_signature": "@Test public void toJsonStr()", "class_method_signature": "UtilsTest.toJsonStr()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "put", "assertEquals", "toJsonStr"]}, "focal_class": {"identifier": "Utils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SUCCESS_CODE = \"OK\";", "modifier": "private static final", "type": "String", "declarator": "SUCCESS_CODE = \"OK\"", "var_name": "SUCCESS_CODE"}, {"original_string": "private static final String PHONE_NUMBER_REGEX = \"\\\\d{5,}\";", "modifier": "private static final", "type": "String", "declarator": "PHONE_NUMBER_REGEX = \"\\\\d{5,}\"", "var_name": "PHONE_NUMBER_REGEX"}], "methods": [{"identifier": "randomCode", "parameters": "()", "modifiers": "static", "return": "int", "signature": "int randomCode()", "full_signature": "static int randomCode()", "class_method_signature": "Utils.randomCode()", "testcase": false, "constructor": false}, {"identifier": "toJsonStr", "parameters": "(final Map<String, String> map)", "modifiers": "static", "return": "String", "signature": "String toJsonStr(final Map<String, String> map)", "full_signature": "static String toJsonStr(final Map<String, String> map)", "class_method_signature": "Utils.toJsonStr(final Map<String, String> map)", "testcase": false, "constructor": false}, {"identifier": "checkSmsTemplate", "parameters": "(final SmsTemplate template)", "modifiers": "static", "return": "void", "signature": "void checkSmsTemplate(final SmsTemplate template)", "full_signature": "static void checkSmsTemplate(final SmsTemplate template)", "class_method_signature": "Utils.checkSmsTemplate(final SmsTemplate template)", "testcase": false, "constructor": false}, {"identifier": "checkBatchSmsTemplate", "parameters": "(final BatchSmsTemplate template)", "modifiers": "static", "return": "void", "signature": "void checkBatchSmsTemplate(final BatchSmsTemplate template)", "full_signature": "static void checkBatchSmsTemplate(final BatchSmsTemplate template)", "class_method_signature": "Utils.checkBatchSmsTemplate(final BatchSmsTemplate template)", "testcase": false, "constructor": false}, {"identifier": "checkSmsResponse", "parameters": "(final CommonResponse response)", "modifiers": "static", "return": "void", "signature": "void checkSmsResponse(final CommonResponse response)", "full_signature": "static void checkSmsResponse(final CommonResponse response)", "class_method_signature": "Utils.checkSmsResponse(final CommonResponse response)", "testcase": false, "constructor": false}, {"identifier": "checkPhoneNumber", "parameters": "(final String phoneNumber)", "modifiers": "static", "return": "void", "signature": "void checkPhoneNumber(final String phoneNumber)", "full_signature": "static void checkPhoneNumber(final String phoneNumber)", "class_method_signature": "Utils.checkPhoneNumber(final String phoneNumber)", "testcase": false, "constructor": false}, {"identifier": "checkNotEmpty", "parameters": "(final String str, final String message)", "modifiers": "static", "return": "void", "signature": "void checkNotEmpty(final String str, final String message)", "full_signature": "static void checkNotEmpty(final String str, final String message)", "class_method_signature": "Utils.checkNotEmpty(final String str, final String message)", "testcase": false, "constructor": false}, {"identifier": "checkNotEmpty", "parameters": "(final Collection coll, final String message)", "modifiers": "static", "return": "void", "signature": "void checkNotEmpty(final Collection coll, final String message)", "full_signature": "static void checkNotEmpty(final Collection coll, final String message)", "class_method_signature": "Utils.checkNotEmpty(final Collection coll, final String message)", "testcase": false, "constructor": false}], "file": "aliyun-sms/src/main/java/cn/javaer/aliyun/sms/Utils.java"}, "focal_method": {"identifier": "toJsonStr", "parameters": "(final Map<String, String> map)", "modifiers": "static", "return": "String", "body": "static String toJsonStr(final Map<String, String> map) {\n        if (null == map || map.isEmpty()) {\n            return null;\n        }\n\n        final StringBuilder sb = new StringBuilder();\n        sb.append('{');\n        for (final Map.Entry<String, String> entry : map.entrySet()) {\n            sb.append('\"')\n                    .append(entry.getKey().replace(\"\\\"\", \"\\\\\\\"\"))\n                    .append('\"')\n                    .append(':')\n                    .append('\"')\n                    .append(entry.getValue().replace(\"\\\"\", \"\\\\\\\"\"))\n                    .append('\"')\n                    .append(',');\n        }\n        sb.deleteCharAt(sb.length() - 1);\n        sb.append('}');\n        return sb.toString();\n    }", "signature": "String toJsonStr(final Map<String, String> map)", "full_signature": "static String toJsonStr(final Map<String, String> map)", "class_method_signature": "Utils.toJsonStr(final Map<String, String> map)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "append", "entrySet", "append", "append", "append", "append", "append", "append", "append", "append", "replace", "getKey", "replace", "getValue", "deleteCharAt", "length", "append", "toString"]}, "repository": {"repo_id": 120580458, "url": "https://github.com/cn-src/aliyun-sms", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 50, "size": 103, "license": "licensed"}}