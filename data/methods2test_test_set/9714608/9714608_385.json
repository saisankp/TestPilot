{"test_class": {"identifier": "AbstractAttributeCollectionTest", "superclass": "extends AbstractAttributeProviderTest<T>", "interfaces": "", "fields": [{"original_string": "private Attribute[] newValues;", "modifier": "private", "type": "Attribute[]", "declarator": "newValues", "var_name": "newValues"}, {"original_string": "protected ListenerStub listenerStub;", "modifier": "protected", "type": "ListenerStub", "declarator": "listenerStub", "var_name": "listenerStub"}], "file": "advanced/attributes/src/test/java/org/arakhne/afc/attrs/collection/AbstractAttributeCollectionTest.java"}, "test_case": {"identifier": "renameAttributeOverwrite", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void renameAttributeOverwrite() {\n\t\tString message;\n\t\t\n\t\tassertTrue(this.testData.hasAttribute(\"A\"));  //$NON-NLS-1$\n\t\tassertFalse(this.testData.hasAttribute(\"X\"));  //$NON-NLS-1$\n\t\tassertTrue(this.testData.hasAttribute(\"B\"));  //$NON-NLS-1$\n\t\tassertFalse(this.testData.hasAttribute(\"Y\"));  //$NON-NLS-1$\n\t\tassertTrue(this.testData.hasAttribute(\"C\"));  //$NON-NLS-1$\n\t\tassertTrue(this.testData.hasAttribute(\"D\"));  //$NON-NLS-1$\n\t\tassertFalse(this.testData.hasAttribute(\"Z\"));  //$NON-NLS-1$\n\t\tassertTrue(this.testData.hasAttribute(\"E\"));  //$NON-NLS-1$\n\t\tassertTrue(this.testData.hasAttribute(\"F\"));  //$NON-NLS-1$\n\t\t\n\t\tAttributeValue oldValue = this.testData.getAttribute(\"B\");  //$NON-NLS-1$\n\n\t\tassertTrue(this.testData.renameAttribute(\"B\", \"ZZZ\", true));   //$NON-NLS-1$ //$NON-NLS-2$\n\t\t// Testing events\n\t\tmessage = this.id+\": renaming B to ZZZ\";  //$NON-NLS-1$\n\t\tthis.listenerStub.assertTypes(message, AttributeChangeEvent.Type.RENAME);\n\t\tthis.listenerStub.assertNames(message, \"ZZZ\");  //$NON-NLS-1$\n\t\tthis.listenerStub.assertOldNames(message, \"B\");  //$NON-NLS-1$\n\t\tthis.listenerStub.assertValues(message, oldValue);\n\t\tthis.listenerStub.assertOldValues(message, oldValue);\n\t\tthis.listenerStub.reset();\n\n\t\tassertTrue(this.testData.hasAttribute(\"A\"));  //$NON-NLS-1$\n\t\tassertFalse(this.testData.hasAttribute(\"X\"));  //$NON-NLS-1$\n\t\tassertFalse(this.testData.hasAttribute(\"B\"));  //$NON-NLS-1$\n\t\tassertTrue(this.testData.hasAttribute(\"ZZZ\"));  //$NON-NLS-1$\n\t\tassertFalse(this.testData.hasAttribute(\"Y\"));  //$NON-NLS-1$\n\t\tassertTrue(this.testData.hasAttribute(\"C\"));  //$NON-NLS-1$\n\t\tassertTrue(this.testData.hasAttribute(\"D\"));  //$NON-NLS-1$\n\t\tassertFalse(this.testData.hasAttribute(\"Z\"));  //$NON-NLS-1$\n\t\tassertTrue(this.testData.hasAttribute(\"E\"));  //$NON-NLS-1$\n\t\tassertTrue(this.testData.hasAttribute(\"F\"));  //$NON-NLS-1$\n\t\t\n\t\tassertEquals(oldValue, this.testData.getAttribute(\"ZZZ\"));  //$NON-NLS-1$\n\n\t\tassertFalse(this.testData.renameAttribute(\"toto\", \"XXX\", true));   //$NON-NLS-1$ //$NON-NLS-2$\n\t\t// Testing events\n\t\tmessage = this.id+\": renaming toto to XXX\";  //$NON-NLS-1$\n\t\tthis.listenerStub.assertEmpty(message);\n\t\tthis.listenerStub.reset();\n\n\t\tassertTrue(this.testData.hasAttribute(\"A\"));  //$NON-NLS-1$\n\t\tassertFalse(this.testData.hasAttribute(\"X\"));  //$NON-NLS-1$\n\t\tassertFalse(this.testData.hasAttribute(\"B\"));  //$NON-NLS-1$\n\t\tassertTrue(this.testData.hasAttribute(\"ZZZ\"));  //$NON-NLS-1$\n\t\tassertFalse(this.testData.hasAttribute(\"Y\"));  //$NON-NLS-1$\n\t\tassertTrue(this.testData.hasAttribute(\"C\"));  //$NON-NLS-1$\n\t\tassertTrue(this.testData.hasAttribute(\"D\"));  //$NON-NLS-1$\n\t\tassertFalse(this.testData.hasAttribute(\"Z\"));  //$NON-NLS-1$\n\t\tassertTrue(this.testData.hasAttribute(\"E\"));  //$NON-NLS-1$\n\t\tassertTrue(this.testData.hasAttribute(\"F\"));  //$NON-NLS-1$\n\t\t\n\t\toldValue = this.testData.getAttribute(\"F\");  //$NON-NLS-1$\n\t\tAttributeValue oldValue2 = this.testData.getAttribute(\"A\");  //$NON-NLS-1$\n\n\t\tassertTrue(this.testData.renameAttribute(\"F\", \"A\", true));   //$NON-NLS-1$ //$NON-NLS-2$\n\t\t// Testing events\n\t\tmessage = this.id+\": renaming F to A\";  //$NON-NLS-1$\n\t\tthis.listenerStub.assertTypes(message, AttributeChangeEvent.Type.REMOVAL, AttributeChangeEvent.Type.RENAME);\n\t\tthis.listenerStub.assertNames(message, \"A\",\"A\");   //$NON-NLS-1$ //$NON-NLS-2$\n\t\tthis.listenerStub.assertOldNames(message, \"A\", \"F\");   //$NON-NLS-1$ //$NON-NLS-2$\n\t\tthis.listenerStub.assertValues(message, oldValue2, oldValue);\n\t\tthis.listenerStub.assertOldValues(message, oldValue2, oldValue);\n\t\tthis.listenerStub.reset();\n\n\t\tassertTrue(this.testData.hasAttribute(\"A\"));  //$NON-NLS-1$\n\t\tassertFalse(this.testData.hasAttribute(\"X\"));  //$NON-NLS-1$\n\t\tassertFalse(this.testData.hasAttribute(\"B\"));  //$NON-NLS-1$\n\t\tassertTrue(this.testData.hasAttribute(\"ZZZ\"));  //$NON-NLS-1$\n\t\tassertFalse(this.testData.hasAttribute(\"Y\"));  //$NON-NLS-1$\n\t\tassertTrue(this.testData.hasAttribute(\"C\"));  //$NON-NLS-1$\n\t\tassertTrue(this.testData.hasAttribute(\"D\"));  //$NON-NLS-1$\n\t\tassertFalse(this.testData.hasAttribute(\"Z\"));  //$NON-NLS-1$\n\t\tassertTrue(this.testData.hasAttribute(\"E\"));  //$NON-NLS-1$\n\t\tassertFalse(this.testData.hasAttribute(\"F\"));  //$NON-NLS-1$\n\t\t\n\t\tassertEquals(oldValue, this.testData.getAttribute(\"A\"));  //$NON-NLS-1$\n\t}", "signature": "void renameAttributeOverwrite()", "full_signature": "@Test public void renameAttributeOverwrite()", "class_method_signature": "AbstractAttributeCollectionTest.renameAttributeOverwrite()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "hasAttribute", "assertFalse", "hasAttribute", "assertTrue", "hasAttribute", "assertFalse", "hasAttribute", "assertTrue", "hasAttribute", "assertTrue", "hasAttribute", "assertFalse", "hasAttribute", "assertTrue", "hasAttribute", "assertTrue", "hasAttribute", "getAttribute", "assertTrue", "renameAttribute", "assertTypes", "assertNames", "assertOldNames", "assertValues", "assertOldValues", "reset", "assertTrue", "hasAttribute", "assertFalse", "hasAttribute", "assertFalse", "hasAttribute", "assertTrue", "hasAttribute", "assertFalse", "hasAttribute", "assertTrue", "hasAttribute", "assertTrue", "hasAttribute", "assertFalse", "hasAttribute", "assertTrue", "hasAttribute", "assertTrue", "hasAttribute", "assertEquals", "getAttribute", "assertFalse", "renameAttribute", "assertEmpty", "reset", "assertTrue", "hasAttribute", "assertFalse", "hasAttribute", "assertFalse", "hasAttribute", "assertTrue", "hasAttribute", "assertFalse", "hasAttribute", "assertTrue", "hasAttribute", "assertTrue", "hasAttribute", "assertFalse", "hasAttribute", "assertTrue", "hasAttribute", "assertTrue", "hasAttribute", "getAttribute", "getAttribute", "assertTrue", "renameAttribute", "assertTypes", "assertNames", "assertOldNames", "assertValues", "assertOldValues", "reset", "assertTrue", "hasAttribute", "assertFalse", "hasAttribute", "assertFalse", "hasAttribute", "assertTrue", "hasAttribute", "assertFalse", "hasAttribute", "assertTrue", "hasAttribute", "assertTrue", "hasAttribute", "assertFalse", "hasAttribute", "assertTrue", "hasAttribute", "assertFalse", "hasAttribute", "assertEquals", "getAttribute"]}, "focal_class": {"identifier": "AbstractAttributeCollection", "superclass": "extends AbstractAttributeProvider", "interfaces": "implements AttributeCollection", "fields": [{"original_string": "private static final long serialVersionUID = 8103647267018484556L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 8103647267018484556L", "var_name": "serialVersionUID"}, {"original_string": "private List<AttributeChangeListener> listenerList;", "modifier": "private", "type": "List<AttributeChangeListener>", "declarator": "listenerList", "var_name": "listenerList"}, {"original_string": "private boolean isEventFirable = true;", "modifier": "private", "type": "boolean", "declarator": "isEventFirable = true", "var_name": "isEventFirable"}], "methods": [{"identifier": "isEventFirable", "parameters": "()", "modifiers": "@Pure @Override public synchronized", "return": "boolean", "signature": "boolean isEventFirable()", "full_signature": "@Pure @Override public synchronized boolean isEventFirable()", "class_method_signature": "AbstractAttributeCollection.isEventFirable()", "testcase": false, "constructor": false}, {"identifier": "setEventFirable", "parameters": "(boolean isFirable)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void setEventFirable(boolean isFirable)", "full_signature": "@Override public synchronized void setEventFirable(boolean isFirable)", "class_method_signature": "AbstractAttributeCollection.setEventFirable(boolean isFirable)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Pure @Override public", "return": "AttributeCollection", "signature": "AttributeCollection clone()", "full_signature": "@Pure @Override public AttributeCollection clone()", "class_method_signature": "AbstractAttributeCollection.clone()", "testcase": false, "constructor": false}, {"identifier": "fireAttributeAddedEvent", "parameters": "(String name, AttributeValue attr)", "modifiers": "protected synchronized", "return": "void", "signature": "void fireAttributeAddedEvent(String name, AttributeValue attr)", "full_signature": "protected synchronized void fireAttributeAddedEvent(String name, AttributeValue attr)", "class_method_signature": "AbstractAttributeCollection.fireAttributeAddedEvent(String name, AttributeValue attr)", "testcase": false, "constructor": false}, {"identifier": "fireAttributeChangedEvent", "parameters": "(String name, AttributeValue oldValue, AttributeValue currentValue)", "modifiers": "protected synchronized", "return": "void", "signature": "void fireAttributeChangedEvent(String name, AttributeValue oldValue, AttributeValue currentValue)", "full_signature": "protected synchronized void fireAttributeChangedEvent(String name, AttributeValue oldValue, AttributeValue currentValue)", "class_method_signature": "AbstractAttributeCollection.fireAttributeChangedEvent(String name, AttributeValue oldValue, AttributeValue currentValue)", "testcase": false, "constructor": false}, {"identifier": "fireAttributeClearedEvent", "parameters": "()", "modifiers": "protected synchronized", "return": "void", "signature": "void fireAttributeClearedEvent()", "full_signature": "protected synchronized void fireAttributeClearedEvent()", "class_method_signature": "AbstractAttributeCollection.fireAttributeClearedEvent()", "testcase": false, "constructor": false}, {"identifier": "fireAttributeRemovedEvent", "parameters": "(String name, AttributeValue oldValue)", "modifiers": "protected synchronized", "return": "void", "signature": "void fireAttributeRemovedEvent(String name, AttributeValue oldValue)", "full_signature": "protected synchronized void fireAttributeRemovedEvent(String name, AttributeValue oldValue)", "class_method_signature": "AbstractAttributeCollection.fireAttributeRemovedEvent(String name, AttributeValue oldValue)", "testcase": false, "constructor": false}, {"identifier": "fireAttributeRenamedEvent", "parameters": "(String oldName, String newName, AttributeValue attr)", "modifiers": "protected synchronized", "return": "void", "signature": "void fireAttributeRenamedEvent(String oldName, String newName, AttributeValue attr)", "full_signature": "protected synchronized void fireAttributeRenamedEvent(String oldName, String newName, AttributeValue attr)", "class_method_signature": "AbstractAttributeCollection.fireAttributeRenamedEvent(String oldName, String newName, AttributeValue attr)", "testcase": false, "constructor": false}, {"identifier": "addAttributeChangeListener", "parameters": "(AttributeChangeListener listener)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void addAttributeChangeListener(AttributeChangeListener listener)", "full_signature": "@Override public synchronized void addAttributeChangeListener(AttributeChangeListener listener)", "class_method_signature": "AbstractAttributeCollection.addAttributeChangeListener(AttributeChangeListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeAttributeChangeListener", "parameters": "(AttributeChangeListener listener)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void removeAttributeChangeListener(AttributeChangeListener listener)", "full_signature": "@Override public synchronized void removeAttributeChangeListener(AttributeChangeListener listener)", "class_method_signature": "AbstractAttributeCollection.removeAttributeChangeListener(AttributeChangeListener listener)", "testcase": false, "constructor": false}, {"identifier": "renameAttribute", "parameters": "(String oldname, String newname)", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean renameAttribute(String oldname, String newname)", "full_signature": "@Override public final boolean renameAttribute(String oldname, String newname)", "class_method_signature": "AbstractAttributeCollection.renameAttribute(String oldname, String newname)", "testcase": false, "constructor": false}], "file": "advanced/attributes/src/main/java/org/arakhne/afc/attrs/collection/AbstractAttributeCollection.java"}, "focal_method": {"identifier": "renameAttribute", "parameters": "(String oldname, String newname)", "modifiers": "@Override public final", "return": "boolean", "body": "@Override\n\tpublic final boolean renameAttribute(String oldname, String newname) {\n\t\treturn renameAttribute(oldname, newname, false);\n\t}", "signature": "boolean renameAttribute(String oldname, String newname)", "full_signature": "@Override public final boolean renameAttribute(String oldname, String newname)", "class_method_signature": "AbstractAttributeCollection.renameAttribute(String oldname, String newname)", "testcase": false, "constructor": false, "invocations": ["renameAttribute"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}