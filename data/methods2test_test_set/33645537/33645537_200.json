{"test_class": {"identifier": "DivideUsingSubtractionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double DELTA = 0.1;", "modifier": "private static final", "type": "double", "declarator": "DELTA = 0.1", "var_name": "DELTA"}, {"original_string": "private DivideUsingSubtraction divideUsingSubtraction;", "modifier": "private", "type": "DivideUsingSubtraction", "declarator": "divideUsingSubtraction", "var_name": "divideUsingSubtraction"}], "file": "algs/src/test/java/com/github/pedrovgs/problem5/DivideUsingSubtractionTest.java"}, "test_case": {"identifier": "anyNumberDividedByZeroIsNotDefinedIterative", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n  public void anyNumberDividedByZeroIsNotDefinedIterative() {\n    int dividend = 100;\n    int divider = 0;\n\n    divideUsingSubtraction.divideIterative(dividend, divider);\n  }", "signature": "void anyNumberDividedByZeroIsNotDefinedIterative()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void anyNumberDividedByZeroIsNotDefinedIterative()", "class_method_signature": "DivideUsingSubtractionTest.anyNumberDividedByZeroIsNotDefinedIterative()", "testcase": true, "constructor": false, "invocations": ["divideIterative"]}, "focal_class": {"identifier": "DivideUsingSubtraction", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "divideIterative", "parameters": "(int dividend, int divider)", "modifiers": "public", "return": "float", "signature": "float divideIterative(int dividend, int divider)", "full_signature": "public float divideIterative(int dividend, int divider)", "class_method_signature": "DivideUsingSubtraction.divideIterative(int dividend, int divider)", "testcase": false, "constructor": false}, {"identifier": "divideRecursive", "parameters": "(int dividend, int divider)", "modifiers": "public", "return": "float", "signature": "float divideRecursive(int dividend, int divider)", "full_signature": "public float divideRecursive(int dividend, int divider)", "class_method_signature": "DivideUsingSubtraction.divideRecursive(int dividend, int divider)", "testcase": false, "constructor": false}, {"identifier": "validateInput", "parameters": "(int divider)", "modifiers": "private", "return": "void", "signature": "void validateInput(int divider)", "full_signature": "private void validateInput(int divider)", "class_method_signature": "DivideUsingSubtraction.validateInput(int divider)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem5/DivideUsingSubtraction.java"}, "focal_method": {"identifier": "divideIterative", "parameters": "(int dividend, int divider)", "modifiers": "public", "return": "float", "body": "public float divideIterative(int dividend, int divider) {\n    validateInput(divider);\n    float result = 0;\n    while (dividend > divider) {\n      dividend -= divider;\n      result++;\n    }\n    float decimalPart = (float) dividend / (float) divider;\n    result += decimalPart;\n    return result;\n  }", "signature": "float divideIterative(int dividend, int divider)", "full_signature": "public float divideIterative(int dividend, int divider)", "class_method_signature": "DivideUsingSubtraction.divideIterative(int dividend, int divider)", "testcase": false, "constructor": false, "invocations": ["validateInput"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}