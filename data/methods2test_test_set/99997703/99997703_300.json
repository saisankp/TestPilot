{"test_class": {"identifier": "SourceTrackingEventSchedulerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SourceSchedulerTracker tracker = new SourceSchedulerTracker();", "modifier": "private", "type": "SourceSchedulerTracker", "declarator": "tracker = new SourceSchedulerTracker()", "var_name": "tracker"}, {"original_string": "private final SimpleDiscreteEventScheduler backingScheduler = new SimpleDiscreteEventScheduler(new EventExecutor(), Runnables.doNothing(), TestSchedulerType.T1, new AdjustableTimeProvider(0), true);", "modifier": "private final", "type": "SimpleDiscreteEventScheduler", "declarator": "backingScheduler = new SimpleDiscreteEventScheduler(new EventExecutor(), Runnables.doNothing(), TestSchedulerType.T1, new AdjustableTimeProvider(0), true)", "var_name": "backingScheduler"}, {"original_string": "private final SourceTrackingEventScheduler threadOneScheduler = new SourceTrackingEventScheduler(tracker, TestSchedulerType.T1, backingScheduler);", "modifier": "private final", "type": "SourceTrackingEventScheduler", "declarator": "threadOneScheduler = new SourceTrackingEventScheduler(tracker, TestSchedulerType.T1, backingScheduler)", "var_name": "threadOneScheduler"}, {"original_string": "private final SourceTrackingEventScheduler threadTwoScheduler = new SourceTrackingEventScheduler(tracker, TestSchedulerType.T2, backingScheduler);", "modifier": "private final", "type": "SourceTrackingEventScheduler", "declarator": "threadTwoScheduler = new SourceTrackingEventScheduler(tracker, TestSchedulerType.T2, backingScheduler)", "var_name": "threadTwoScheduler"}], "file": "OcavaCore/src/test/java/com/ocadotechnology/event/scheduling/SourceTrackingEventSchedulerTest.java"}, "test_case": {"identifier": "whenEventCancelled_thenEventNotExecuted", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void whenEventCancelled_thenEventNotExecuted() {\n        List<Boolean> executed = new ArrayList<>();\n        executed.add(false);\n        Cancelable cancelable = threadOneScheduler.doAt(50, () -> executed.set(0, true), \"\");\n        threadOneScheduler.doAt(25d, cancelable::cancel, \"\");\n        backingScheduler.unPause();\n        Assertions.assertFalse(executed.get(0), \"event executed after cancellation\");\n    }", "signature": "void whenEventCancelled_thenEventNotExecuted()", "full_signature": "@Test void whenEventCancelled_thenEventNotExecuted()", "class_method_signature": "SourceTrackingEventSchedulerTest.whenEventCancelled_thenEventNotExecuted()", "testcase": true, "constructor": false, "invocations": ["add", "doAt", "set", "doAt", "unPause", "assertFalse", "get"]}, "focal_class": {"identifier": "SourceTrackingEventScheduler", "superclass": "extends TypedEventScheduler", "interfaces": "", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(getClass());", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(getClass())", "var_name": "logger"}, {"original_string": "private final SimpleDiscreteEventScheduler backingScheduler;", "modifier": "private final", "type": "SimpleDiscreteEventScheduler", "declarator": "backingScheduler", "var_name": "backingScheduler"}, {"original_string": "private final SourceSchedulerTracker tracker;", "modifier": "private final", "type": "SourceSchedulerTracker", "declarator": "tracker", "var_name": "tracker"}, {"original_string": "private final AtomicBoolean delayed = new AtomicBoolean(false);", "modifier": "private final", "type": "AtomicBoolean", "declarator": "delayed = new AtomicBoolean(false)", "var_name": "delayed"}, {"original_string": "private final List<MutableCancelableHolder> delayedDoNowRunnables = new ArrayList<>();", "modifier": "private final", "type": "List<MutableCancelableHolder>", "declarator": "delayedDoNowRunnables = new ArrayList<>()", "var_name": "delayedDoNowRunnables"}, {"original_string": "private final AtomicDouble delayEndTime = new AtomicDouble(Double.NaN);", "modifier": "private final", "type": "AtomicDouble", "declarator": "delayEndTime = new AtomicDouble(Double.NaN)", "var_name": "delayEndTime"}, {"original_string": "private Cancelable delayEndEvent;", "modifier": "private", "type": "Cancelable", "declarator": "delayEndEvent", "var_name": "delayEndEvent"}], "methods": [{"identifier": "SourceTrackingEventScheduler", "parameters": "(SourceSchedulerTracker tracker, EventSchedulerType type, SimpleDiscreteEventScheduler backingScheduler)", "modifiers": "public", "return": "", "signature": " SourceTrackingEventScheduler(SourceSchedulerTracker tracker, EventSchedulerType type, SimpleDiscreteEventScheduler backingScheduler)", "full_signature": "public  SourceTrackingEventScheduler(SourceSchedulerTracker tracker, EventSchedulerType type, SimpleDiscreteEventScheduler backingScheduler)", "class_method_signature": "SourceTrackingEventScheduler.SourceTrackingEventScheduler(SourceSchedulerTracker tracker, EventSchedulerType type, SimpleDiscreteEventScheduler backingScheduler)", "testcase": false, "constructor": true}, {"identifier": "createSibling", "parameters": "(EventSchedulerType type)", "modifiers": "public", "return": "SourceTrackingEventScheduler", "signature": "SourceTrackingEventScheduler createSibling(EventSchedulerType type)", "full_signature": "public SourceTrackingEventScheduler createSibling(EventSchedulerType type)", "class_method_signature": "SourceTrackingEventScheduler.createSibling(EventSchedulerType type)", "testcase": false, "constructor": false}, {"identifier": "delayExecutionUntil", "parameters": "(double delayEndTime)", "modifiers": "public", "return": "void", "signature": "void delayExecutionUntil(double delayEndTime)", "full_signature": "public void delayExecutionUntil(double delayEndTime)", "class_method_signature": "SourceTrackingEventScheduler.delayExecutionUntil(double delayEndTime)", "testcase": false, "constructor": false}, {"identifier": "delayFinished", "parameters": "(double delayStartTime)", "modifiers": "private", "return": "void", "signature": "void delayFinished(double delayStartTime)", "full_signature": "private void delayFinished(double delayStartTime)", "class_method_signature": "SourceTrackingEventScheduler.delayFinished(double delayStartTime)", "testcase": false, "constructor": false}, {"identifier": "hasOnlyDaemonEvents", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasOnlyDaemonEvents()", "full_signature": "@Override public boolean hasOnlyDaemonEvents()", "class_method_signature": "SourceTrackingEventScheduler.hasOnlyDaemonEvents()", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "(Event e)", "modifiers": "@Override public", "return": "void", "signature": "void cancel(Event e)", "full_signature": "@Override public void cancel(Event e)", "class_method_signature": "SourceTrackingEventScheduler.cancel(Event e)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stop()", "full_signature": "@Override public void stop()", "class_method_signature": "SourceTrackingEventScheduler.stop()", "testcase": false, "constructor": false}, {"identifier": "getTimeProvider", "parameters": "()", "modifiers": "@Override public", "return": "TimeProvider", "signature": "TimeProvider getTimeProvider()", "full_signature": "@Override public TimeProvider getTimeProvider()", "class_method_signature": "SourceTrackingEventScheduler.getTimeProvider()", "testcase": false, "constructor": false}, {"identifier": "getThreadId", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getThreadId()", "full_signature": "@Override public long getThreadId()", "class_method_signature": "SourceTrackingEventScheduler.getThreadId()", "testcase": false, "constructor": false}, {"identifier": "getMinimumTimeDelta", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getMinimumTimeDelta()", "full_signature": "@Override public double getMinimumTimeDelta()", "class_method_signature": "SourceTrackingEventScheduler.getMinimumTimeDelta()", "testcase": false, "constructor": false}, {"identifier": "doNow", "parameters": "(Runnable r, String description)", "modifiers": "@Override public", "return": "Cancelable", "signature": "Cancelable doNow(Runnable r, String description)", "full_signature": "@Override public Cancelable doNow(Runnable r, String description)", "class_method_signature": "SourceTrackingEventScheduler.doNow(Runnable r, String description)", "testcase": false, "constructor": false}, {"identifier": "doNow", "parameters": "(MutableCancelableHolder cancelableHolder)", "modifiers": "private", "return": "void", "signature": "void doNow(MutableCancelableHolder cancelableHolder)", "full_signature": "private void doNow(MutableCancelableHolder cancelableHolder)", "class_method_signature": "SourceTrackingEventScheduler.doNow(MutableCancelableHolder cancelableHolder)", "testcase": false, "constructor": false}, {"identifier": "doAt", "parameters": "(double time, Runnable r, String description, boolean isDaemon)", "modifiers": "@Override public", "return": "Cancelable", "signature": "Cancelable doAt(double time, Runnable r, String description, boolean isDaemon)", "full_signature": "@Override public Cancelable doAt(double time, Runnable r, String description, boolean isDaemon)", "class_method_signature": "SourceTrackingEventScheduler.doAt(double time, Runnable r, String description, boolean isDaemon)", "testcase": false, "constructor": false}, {"identifier": "doAt", "parameters": "(double time, boolean isDaemon, MutableCancelableHolder cancelableHolder)", "modifiers": "private", "return": "void", "signature": "void doAt(double time, boolean isDaemon, MutableCancelableHolder cancelableHolder)", "full_signature": "private void doAt(double time, boolean isDaemon, MutableCancelableHolder cancelableHolder)", "class_method_signature": "SourceTrackingEventScheduler.doAt(double time, boolean isDaemon, MutableCancelableHolder cancelableHolder)", "testcase": false, "constructor": false}, {"identifier": "isThreadHandoverRequired", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isThreadHandoverRequired()", "full_signature": "@Override public boolean isThreadHandoverRequired()", "class_method_signature": "SourceTrackingEventScheduler.isThreadHandoverRequired()", "testcase": false, "constructor": false}, {"identifier": "wrappedForDoNow", "parameters": "(MutableCancelableHolder cancelableHolder)", "modifiers": "private", "return": "Runnable", "signature": "Runnable wrappedForDoNow(MutableCancelableHolder cancelableHolder)", "full_signature": "private Runnable wrappedForDoNow(MutableCancelableHolder cancelableHolder)", "class_method_signature": "SourceTrackingEventScheduler.wrappedForDoNow(MutableCancelableHolder cancelableHolder)", "testcase": false, "constructor": false}, {"identifier": "wrappedForDoAt", "parameters": "(MutableCancelableHolder cancelableHolder, boolean isDaemon)", "modifiers": "private", "return": "Runnable", "signature": "Runnable wrappedForDoAt(MutableCancelableHolder cancelableHolder, boolean isDaemon)", "full_signature": "private Runnable wrappedForDoAt(MutableCancelableHolder cancelableHolder, boolean isDaemon)", "class_method_signature": "SourceTrackingEventScheduler.wrappedForDoAt(MutableCancelableHolder cancelableHolder, boolean isDaemon)", "testcase": false, "constructor": false}], "file": "OcavaCore/src/main/java/com/ocadotechnology/event/scheduling/SourceTrackingEventScheduler.java"}, "focal_method": {"identifier": "doAt", "parameters": "(double time, Runnable r, String description, boolean isDaemon)", "modifiers": "@Override public", "return": "Cancelable", "body": "@Override\n    public Cancelable doAt(double time, Runnable r, String description, boolean isDaemon) {\n        MutableCancelableHolder cancelableHolder = new MutableCancelableHolder(r, description);\n        doAt(time, isDaemon, cancelableHolder);\n        return cancelableHolder;\n    }", "signature": "Cancelable doAt(double time, Runnable r, String description, boolean isDaemon)", "full_signature": "@Override public Cancelable doAt(double time, Runnable r, String description, boolean isDaemon)", "class_method_signature": "SourceTrackingEventScheduler.doAt(double time, Runnable r, String description, boolean isDaemon)", "testcase": false, "constructor": false, "invocations": ["doAt"]}, "repository": {"repo_id": 99997703, "url": "https://github.com/ocadotechnology/Ocava", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 1137, "license": "licensed"}}