{"test_class": {"identifier": "StringTypeTest", "superclass": "", "interfaces": "", "fields": [], "file": "bundles/org.openhab.core/src/test/java/org/openhab/core/library/types/StringTypeTest.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test @SuppressWarnings(\"unlikely-arg-type\") public", "return": "void", "body": "@Test\n    @SuppressWarnings(\"unlikely-arg-type\")\n    public void testEquals() {\n        StringType empty = new StringType(\"\");\n        StringType expected1 = new StringType(\"expected1\");\n        StringType expected2 = new StringType(\"expected2\");\n\n        assertEquals(empty.hashCode(), StringType.EMPTY.hashCode());\n        assertEquals(empty.hashCode(), new StringType(\"\").hashCode());\n        assertEquals(empty.hashCode(), new StringType().hashCode());\n        assertEquals(empty.hashCode(), new StringType(null).hashCode());\n\n        assertEquals(expected1.hashCode(), new StringType(\"expected1\").hashCode());\n        assertEquals(expected2.hashCode(), new StringType(\"expected2\").hashCode());\n        assertNotEquals(expected1.hashCode(), new StringType(\"expected2\").hashCode());\n\n        assertEquals(empty, StringType.EMPTY);\n        assertEquals(empty, new StringType(\"\"));\n        assertEquals(empty, new StringType());\n        assertEquals(empty, new StringType(null));\n\n        assertEquals(expected1, new StringType(\"expected1\"));\n        assertEquals(expected2, new StringType(\"expected2\"));\n        // Do not change to assertEquals(), because we want to check if .equals() works as expected!\n        assertFalse(expected1.equals(new StringType(\"expected2\")));\n        assertFalse(expected2.equals(new StringType(\"expected1\")));\n        assertFalse(expected1.equals(StringType.EMPTY));\n        assertFalse(expected2.equals(StringType.EMPTY));\n\n        // Do not change to assertEquals(), because we want to check if .equals() works as expected!\n        assertTrue(expected1.equals(\"expected1\"));\n        assertFalse(expected1.equals(\"expected2\"));\n\n        // Do not change to assertEquals(), because we want to check if .equals() works as expected!\n        assertTrue(new StringType(null).equals(new StringType(null)));\n        assertTrue(new StringType(\"\").equals(new StringType(null)));\n        assertTrue(new StringType(null).equals(new StringType(\"\")));\n    }", "signature": "void testEquals()", "full_signature": "@Test @SuppressWarnings(\"unlikely-arg-type\") public void testEquals()", "class_method_signature": "StringTypeTest.testEquals()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "hashCode", "hashCode", "assertEquals", "hashCode", "hashCode", "assertEquals", "hashCode", "hashCode", "assertEquals", "hashCode", "hashCode", "assertEquals", "hashCode", "hashCode", "assertEquals", "hashCode", "hashCode", "assertNotEquals", "hashCode", "hashCode", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertFalse", "equals", "assertFalse", "equals", "assertFalse", "equals", "assertFalse", "equals", "assertTrue", "equals", "assertFalse", "equals", "assertTrue", "equals", "assertTrue", "equals", "assertTrue", "equals"]}, "focal_class": {"identifier": "StringType", "superclass": "", "interfaces": "implements PrimitiveType, State, Command", "fields": [{"original_string": "public static final StringType EMPTY = new StringType();", "modifier": "public static final", "type": "StringType", "declarator": "EMPTY = new StringType()", "var_name": "EMPTY"}, {"original_string": "private final String value;", "modifier": "private final", "type": "String", "declarator": "value", "var_name": "value"}], "methods": [{"identifier": "StringType", "parameters": "()", "modifiers": "public", "return": "", "signature": " StringType()", "full_signature": "public  StringType()", "class_method_signature": "StringType.StringType()", "testcase": false, "constructor": true}, {"identifier": "StringType", "parameters": "(@Nullable String value)", "modifiers": "public", "return": "", "signature": " StringType(@Nullable String value)", "full_signature": "public  StringType(@Nullable String value)", "class_method_signature": "StringType.StringType(@Nullable String value)", "testcase": false, "constructor": true}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "StringType.toString()", "testcase": false, "constructor": false}, {"identifier": "toFullString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toFullString()", "full_signature": "@Override public String toFullString()", "class_method_signature": "StringType.toFullString()", "testcase": false, "constructor": false}, {"identifier": "valueOf", "parameters": "(@Nullable String value)", "modifiers": "public static", "return": "StringType", "signature": "StringType valueOf(@Nullable String value)", "full_signature": "public static StringType valueOf(@Nullable String value)", "class_method_signature": "StringType.valueOf(@Nullable String value)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(String pattern)", "modifiers": "@Override public", "return": "String", "signature": "String format(String pattern)", "full_signature": "@Override public String format(String pattern)", "class_method_signature": "StringType.format(String pattern)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "StringType.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(@Nullable Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(@Nullable Object obj)", "full_signature": "@Override public boolean equals(@Nullable Object obj)", "class_method_signature": "StringType.equals(@Nullable Object obj)", "testcase": false, "constructor": false}], "file": "bundles/org.openhab.core/src/main/java/org/openhab/core/library/types/StringType.java"}, "focal_method": {"identifier": "equals", "parameters": "(@Nullable Object obj)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean equals(@Nullable Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (obj == null) {\n            return false;\n        }\n        if (obj instanceof String) {\n            return obj.equals(value);\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n        StringType other = (StringType) obj;\n        return Objects.equals(this.value, other.value);\n    }", "signature": "boolean equals(@Nullable Object obj)", "full_signature": "@Override public boolean equals(@Nullable Object obj)", "class_method_signature": "StringType.equals(@Nullable Object obj)", "testcase": false, "constructor": false, "invocations": ["equals", "getClass", "getClass", "equals"]}, "repository": {"repo_id": 48337670, "url": "https://github.com/openhab/openhab-core", "stars": 241, "created": "12/20/2015 9:23:20 PM +00:00", "updates": "2020-01-27T16:55:53+00:00", "fork": "False", "license": "licensed"}}