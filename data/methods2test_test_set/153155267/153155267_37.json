{"test_class": {"identifier": "MediatorConfigurationSupportTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static Class<ClassContainingAllSortsOfMethods> clazz = ClassContainingAllSortsOfMethods.class;", "modifier": "static", "type": "Class<ClassContainingAllSortsOfMethods>", "declarator": "clazz = ClassContainingAllSortsOfMethods.class", "var_name": "clazz"}], "file": "smallrye-reactive-messaging-provider/src/test/java/io/smallrye/reactive/messaging/MediatorConfigurationSupportTest.java"}, "test_case": {"identifier": "testProcessors", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProcessors() {\n        MediatorConfigurationSupport support = create(\"processorProcessorOfMessage\");\n        MediatorConfigurationSupport.ValidationOutput output = support.validate(Shape.PROCESSOR, null);\n        assertThat(output.getConsumption()).isEqualTo(MediatorConfiguration.Consumption.STREAM_OF_MESSAGE);\n        assertThat(output.getProduction()).isEqualTo(MediatorConfiguration.Production.STREAM_OF_MESSAGE);\n        assertThat(output.getIngestedPayloadType()).isEqualTo(String.class);\n        assertThat(output.getUseBuilderTypes()).isFalse();\n\n        support = create(\"processorProcessorOfPayload\");\n        output = support.validate(Shape.PROCESSOR, null);\n        assertThat(output.getConsumption()).isEqualTo(MediatorConfiguration.Consumption.STREAM_OF_PAYLOAD);\n        assertThat(output.getProduction()).isEqualTo(MediatorConfiguration.Production.STREAM_OF_PAYLOAD);\n        assertThat(output.getIngestedPayloadType()).isEqualTo(String.class);\n        assertThat(output.getUseBuilderTypes()).isFalse();\n\n        support = create(\"processorProcessorBuilderOfMessage\");\n        output = support.validate(Shape.PROCESSOR, null);\n        assertThat(output.getConsumption()).isEqualTo(MediatorConfiguration.Consumption.STREAM_OF_MESSAGE);\n        assertThat(output.getProduction()).isEqualTo(MediatorConfiguration.Production.STREAM_OF_MESSAGE);\n        assertThat(output.getIngestedPayloadType()).isEqualTo(String.class);\n        assertThat(output.getUseBuilderTypes()).isTrue();\n\n        support = create(\"processorProcessorBuilderOfPayload\");\n        output = support.validate(Shape.PROCESSOR, null);\n        assertThat(output.getConsumption()).isEqualTo(MediatorConfiguration.Consumption.STREAM_OF_PAYLOAD);\n        assertThat(output.getProduction()).isEqualTo(MediatorConfiguration.Production.STREAM_OF_PAYLOAD);\n        assertThat(output.getIngestedPayloadType()).isEqualTo(String.class);\n        assertThat(output.getUseBuilderTypes()).isTrue();\n\n        support = create(\"processorPublisherOfMessage\");\n        output = support.validate(Shape.PROCESSOR, null);\n        assertThat(output.getConsumption()).isEqualTo(MediatorConfiguration.Consumption.MESSAGE);\n        assertThat(output.getProduction()).isEqualTo(MediatorConfiguration.Production.STREAM_OF_MESSAGE);\n        assertThat(output.getIngestedPayloadType()).isEqualTo(String.class);\n        assertThat(output.getUseBuilderTypes()).isFalse();\n\n        support = create(\"processorPublisherOfPayload\");\n        output = support.validate(Shape.PROCESSOR, null);\n        assertThat(output.getConsumption()).isEqualTo(MediatorConfiguration.Consumption.PAYLOAD);\n        assertThat(output.getProduction()).isEqualTo(MediatorConfiguration.Production.STREAM_OF_PAYLOAD);\n        assertThat(output.getIngestedPayloadType()).isEqualTo(String.class);\n        assertThat(output.getUseBuilderTypes()).isFalse();\n\n        support = create(\"processorPublisherBuilderOfMessage\");\n        output = support.validate(Shape.PROCESSOR, null);\n        assertThat(output.getConsumption()).isEqualTo(MediatorConfiguration.Consumption.MESSAGE);\n        assertThat(output.getProduction()).isEqualTo(MediatorConfiguration.Production.STREAM_OF_MESSAGE);\n        assertThat(output.getIngestedPayloadType()).isEqualTo(String.class);\n        assertThat(output.getUseBuilderTypes()).isTrue();\n\n        support = create(\"processorPublisherBuilderOfPayload\");\n        output = support.validate(Shape.PROCESSOR, null);\n        assertThat(output.getConsumption()).isEqualTo(MediatorConfiguration.Consumption.PAYLOAD);\n        assertThat(output.getProduction()).isEqualTo(MediatorConfiguration.Production.STREAM_OF_PAYLOAD);\n        assertThat(output.getIngestedPayloadType()).isEqualTo(String.class);\n        assertThat(output.getUseBuilderTypes()).isTrue();\n\n        support = create(\"processorProcessMessage\");\n        output = support.validate(Shape.PROCESSOR, null);\n        assertThat(output.getConsumption()).isEqualTo(MediatorConfiguration.Consumption.MESSAGE);\n        assertThat(output.getProduction()).isEqualTo(MediatorConfiguration.Production.INDIVIDUAL_MESSAGE);\n        assertThat(output.getIngestedPayloadType()).isEqualTo(Person.class);\n        assertThat(output.getUseBuilderTypes()).isFalse();\n\n        support = create(\"processorProcessPayload\");\n        output = support.validate(Shape.PROCESSOR, null);\n        assertThat(output.getConsumption()).isEqualTo(MediatorConfiguration.Consumption.PAYLOAD);\n        assertThat(output.getProduction()).isEqualTo(MediatorConfiguration.Production.INDIVIDUAL_PAYLOAD);\n        assertThat(output.getIngestedPayloadType()).isEqualTo(Person.class);\n        assertThat(output.getUseBuilderTypes()).isFalse();\n\n        support = create(\"processorProcessMessageCompletionStage\");\n        output = support.validate(Shape.PROCESSOR, null);\n        assertThat(output.getConsumption()).isEqualTo(MediatorConfiguration.Consumption.MESSAGE);\n        assertThat(output.getProduction()).isEqualTo(MediatorConfiguration.Production.COMPLETION_STAGE_OF_MESSAGE);\n        assertThat(output.getIngestedPayloadType()).isEqualTo(Person.class);\n        assertThat(output.getUseBuilderTypes()).isFalse();\n\n        support = create(\"processorProcessPayloadCompletionStage\");\n        output = support.validate(Shape.PROCESSOR, null);\n        assertThat(output.getConsumption()).isEqualTo(MediatorConfiguration.Consumption.PAYLOAD);\n        assertThat(output.getProduction()).isEqualTo(MediatorConfiguration.Production.COMPLETION_STAGE_OF_PAYLOAD);\n        assertThat(output.getIngestedPayloadType()).isEqualTo(Person.class);\n        assertThat(output.getUseBuilderTypes()).isFalse();\n\n        support = create(\"processorProcessMessageUni\");\n        output = support.validate(Shape.PROCESSOR, null);\n        assertThat(output.getConsumption()).isEqualTo(MediatorConfiguration.Consumption.MESSAGE);\n        assertThat(output.getProduction()).isEqualTo(MediatorConfiguration.Production.UNI_OF_MESSAGE);\n        assertThat(output.getIngestedPayloadType()).isEqualTo(Person.class);\n        assertThat(output.getUseBuilderTypes()).isFalse();\n\n        support = create(\"processorProcessPayloadUni\");\n        output = support.validate(Shape.PROCESSOR, null);\n        assertThat(output.getConsumption()).isEqualTo(MediatorConfiguration.Consumption.PAYLOAD);\n        assertThat(output.getProduction()).isEqualTo(MediatorConfiguration.Production.UNI_OF_PAYLOAD);\n        assertThat(output.getIngestedPayloadType()).isEqualTo(Person.class);\n        assertThat(output.getUseBuilderTypes()).isFalse();\n\n        support = create(\"processorProcessMessageUniRaw\");\n        output = support.validate(Shape.PROCESSOR, null);\n        assertThat(output.getConsumption()).isEqualTo(MediatorConfiguration.Consumption.MESSAGE);\n        assertThat(output.getProduction()).isEqualTo(MediatorConfiguration.Production.UNI_OF_MESSAGE);\n        assertThat(output.getIngestedPayloadType()).isEqualTo(null);\n        assertThat(output.getUseBuilderTypes()).isFalse();\n\n        support = create(\"processorProcessMessageUniWildcard\");\n        output = support.validate(Shape.PROCESSOR, null);\n        assertThat(output.getConsumption()).isEqualTo(MediatorConfiguration.Consumption.MESSAGE);\n        assertThat(output.getProduction()).isEqualTo(MediatorConfiguration.Production.UNI_OF_MESSAGE);\n        assertThat(output.getIngestedPayloadType()).isEqualTo(null);\n        assertThat(output.getUseBuilderTypes()).isFalse();\n    }", "signature": "void testProcessors()", "full_signature": "@Test public void testProcessors()", "class_method_signature": "MediatorConfigurationSupportTest.testProcessors()", "testcase": true, "constructor": false, "invocations": ["create", "validate", "isEqualTo", "assertThat", "getConsumption", "isEqualTo", "assertThat", "getProduction", "isEqualTo", "assertThat", "getIngestedPayloadType", "isFalse", "assertThat", "getUseBuilderTypes", "create", "validate", "isEqualTo", "assertThat", "getConsumption", "isEqualTo", "assertThat", "getProduction", "isEqualTo", "assertThat", "getIngestedPayloadType", "isFalse", "assertThat", "getUseBuilderTypes", "create", "validate", "isEqualTo", "assertThat", "getConsumption", "isEqualTo", "assertThat", "getProduction", "isEqualTo", "assertThat", "getIngestedPayloadType", "isTrue", "assertThat", "getUseBuilderTypes", "create", "validate", "isEqualTo", "assertThat", "getConsumption", "isEqualTo", "assertThat", "getProduction", "isEqualTo", "assertThat", "getIngestedPayloadType", "isTrue", "assertThat", "getUseBuilderTypes", "create", "validate", "isEqualTo", "assertThat", "getConsumption", "isEqualTo", "assertThat", "getProduction", "isEqualTo", "assertThat", "getIngestedPayloadType", "isFalse", "assertThat", "getUseBuilderTypes", "create", "validate", "isEqualTo", "assertThat", "getConsumption", "isEqualTo", "assertThat", "getProduction", "isEqualTo", "assertThat", "getIngestedPayloadType", "isFalse", "assertThat", "getUseBuilderTypes", "create", "validate", "isEqualTo", "assertThat", "getConsumption", "isEqualTo", "assertThat", "getProduction", "isEqualTo", "assertThat", "getIngestedPayloadType", "isTrue", "assertThat", "getUseBuilderTypes", "create", "validate", "isEqualTo", "assertThat", "getConsumption", "isEqualTo", "assertThat", "getProduction", "isEqualTo", "assertThat", "getIngestedPayloadType", "isTrue", "assertThat", "getUseBuilderTypes", "create", "validate", "isEqualTo", "assertThat", "getConsumption", "isEqualTo", "assertThat", "getProduction", "isEqualTo", "assertThat", "getIngestedPayloadType", "isFalse", "assertThat", "getUseBuilderTypes", "create", "validate", "isEqualTo", "assertThat", "getConsumption", "isEqualTo", "assertThat", "getProduction", "isEqualTo", "assertThat", "getIngestedPayloadType", "isFalse", "assertThat", "getUseBuilderTypes", "create", "validate", "isEqualTo", "assertThat", "getConsumption", "isEqualTo", "assertThat", "getProduction", "isEqualTo", "assertThat", "getIngestedPayloadType", "isFalse", "assertThat", "getUseBuilderTypes", "create", "validate", "isEqualTo", "assertThat", "getConsumption", "isEqualTo", "assertThat", "getProduction", "isEqualTo", "assertThat", "getIngestedPayloadType", "isFalse", "assertThat", "getUseBuilderTypes", "create", "validate", "isEqualTo", "assertThat", "getConsumption", "isEqualTo", "assertThat", "getProduction", "isEqualTo", "assertThat", "getIngestedPayloadType", "isFalse", "assertThat", "getUseBuilderTypes", "create", "validate", "isEqualTo", "assertThat", "getConsumption", "isEqualTo", "assertThat", "getProduction", "isEqualTo", "assertThat", "getIngestedPayloadType", "isFalse", "assertThat", "getUseBuilderTypes", "create", "validate", "isEqualTo", "assertThat", "getConsumption", "isEqualTo", "assertThat", "getProduction", "isEqualTo", "assertThat", "getIngestedPayloadType", "isFalse", "assertThat", "getUseBuilderTypes", "create", "validate", "isEqualTo", "assertThat", "getConsumption", "isEqualTo", "assertThat", "getProduction", "isEqualTo", "assertThat", "getIngestedPayloadType", "isFalse", "assertThat", "getUseBuilderTypes"]}, "focal_class": {"identifier": "MediatorConfigurationSupport", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String methodAsString;", "modifier": "private final", "type": "String", "declarator": "methodAsString", "var_name": "methodAsString"}, {"original_string": "private final Class<?> returnType;", "modifier": "private final", "type": "Class<?>", "declarator": "returnType", "var_name": "returnType"}, {"original_string": "private final Class<?>[] parameterTypes;", "modifier": "private final", "type": "Class<?>[]", "declarator": "parameterTypes", "var_name": "parameterTypes"}, {"original_string": "private final GenericTypeAssignable returnTypeAssignable;", "modifier": "private final", "type": "GenericTypeAssignable", "declarator": "returnTypeAssignable", "var_name": "returnTypeAssignable"}, {"original_string": "private final GenericTypeAssignable firstMethodParamTypeAssignable;", "modifier": "private final", "type": "GenericTypeAssignable", "declarator": "firstMethodParamTypeAssignable", "var_name": "firstMethodParamTypeAssignable"}], "methods": [{"identifier": "MediatorConfigurationSupport", "parameters": "(String methodAsString, Class<?> returnType, Class<?>[] parameterTypes,\n            GenericTypeAssignable returnTypeAssignable, GenericTypeAssignable firstMethodParamTypeAssignable)", "modifiers": "public", "return": "", "signature": " MediatorConfigurationSupport(String methodAsString, Class<?> returnType, Class<?>[] parameterTypes,\n            GenericTypeAssignable returnTypeAssignable, GenericTypeAssignable firstMethodParamTypeAssignable)", "full_signature": "public  MediatorConfigurationSupport(String methodAsString, Class<?> returnType, Class<?>[] parameterTypes,\n            GenericTypeAssignable returnTypeAssignable, GenericTypeAssignable firstMethodParamTypeAssignable)", "class_method_signature": "MediatorConfigurationSupport.MediatorConfigurationSupport(String methodAsString, Class<?> returnType, Class<?>[] parameterTypes,\n            GenericTypeAssignable returnTypeAssignable, GenericTypeAssignable firstMethodParamTypeAssignable)", "testcase": false, "constructor": true}, {"identifier": "determineShape", "parameters": "(List<?> incomingValue, Object outgoingValue)", "modifiers": "public", "return": "Shape", "signature": "Shape determineShape(List<?> incomingValue, Object outgoingValue)", "full_signature": "public Shape determineShape(List<?> incomingValue, Object outgoingValue)", "class_method_signature": "MediatorConfigurationSupport.determineShape(List<?> incomingValue, Object outgoingValue)", "testcase": false, "constructor": false}, {"identifier": "isPublisherOrPublisherBuilder", "parameters": "(Class<?> returnType)", "modifiers": "private", "return": "boolean", "signature": "boolean isPublisherOrPublisherBuilder(Class<?> returnType)", "full_signature": "private boolean isPublisherOrPublisherBuilder(Class<?> returnType)", "class_method_signature": "MediatorConfigurationSupport.isPublisherOrPublisherBuilder(Class<?> returnType)", "testcase": false, "constructor": false}, {"identifier": "isConsumingAPublisherOrAPublisherBuilder", "parameters": "(Class[] parameterTypes)", "modifiers": "private", "return": "boolean", "signature": "boolean isConsumingAPublisherOrAPublisherBuilder(Class[] parameterTypes)", "full_signature": "private boolean isConsumingAPublisherOrAPublisherBuilder(Class[] parameterTypes)", "class_method_signature": "MediatorConfigurationSupport.isConsumingAPublisherOrAPublisherBuilder(Class[] parameterTypes)", "testcase": false, "constructor": false}, {"identifier": "processSuppliedAcknowledgement", "parameters": "(List<?> incomings,\n            Supplier<Acknowledgment.Strategy> supplier)", "modifiers": "public", "return": "Acknowledgment.Strategy", "signature": "Acknowledgment.Strategy processSuppliedAcknowledgement(List<?> incomings,\n            Supplier<Acknowledgment.Strategy> supplier)", "full_signature": "public Acknowledgment.Strategy processSuppliedAcknowledgement(List<?> incomings,\n            Supplier<Acknowledgment.Strategy> supplier)", "class_method_signature": "MediatorConfigurationSupport.processSuppliedAcknowledgement(List<?> incomings,\n            Supplier<Acknowledgment.Strategy> supplier)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(Shape shape, Acknowledgment.Strategy acknowledgment)", "modifiers": "public", "return": "ValidationOutput", "signature": "ValidationOutput validate(Shape shape, Acknowledgment.Strategy acknowledgment)", "full_signature": "public ValidationOutput validate(Shape shape, Acknowledgment.Strategy acknowledgment)", "class_method_signature": "MediatorConfigurationSupport.validate(Shape shape, Acknowledgment.Strategy acknowledgment)", "testcase": false, "constructor": false}, {"identifier": "validateSubscriber", "parameters": "()", "modifiers": "private", "return": "ValidationOutput", "signature": "ValidationOutput validateSubscriber()", "full_signature": "private ValidationOutput validateSubscriber()", "class_method_signature": "MediatorConfigurationSupport.validateSubscriber()", "testcase": false, "constructor": false}, {"identifier": "validatePublisher", "parameters": "()", "modifiers": "private", "return": "ValidationOutput", "signature": "ValidationOutput validatePublisher()", "full_signature": "private ValidationOutput validatePublisher()", "class_method_signature": "MediatorConfigurationSupport.validatePublisher()", "testcase": false, "constructor": false}, {"identifier": "validateProcessor", "parameters": "(Acknowledgment.Strategy acknowledgment)", "modifiers": "private", "return": "ValidationOutput", "signature": "ValidationOutput validateProcessor(Acknowledgment.Strategy acknowledgment)", "full_signature": "private ValidationOutput validateProcessor(Acknowledgment.Strategy acknowledgment)", "class_method_signature": "MediatorConfigurationSupport.validateProcessor(Acknowledgment.Strategy acknowledgment)", "testcase": false, "constructor": false}, {"identifier": "extractIngestedTypeFromFirstParameter", "parameters": "(MediatorConfiguration.Consumption consumption,\n            Type genericTypeOfFirstParam, Class<?> parameterType)", "modifiers": "private", "return": "Type", "signature": "Type extractIngestedTypeFromFirstParameter(MediatorConfiguration.Consumption consumption,\n            Type genericTypeOfFirstParam, Class<?> parameterType)", "full_signature": "private Type extractIngestedTypeFromFirstParameter(MediatorConfiguration.Consumption consumption,\n            Type genericTypeOfFirstParam, Class<?> parameterType)", "class_method_signature": "MediatorConfigurationSupport.extractIngestedTypeFromFirstParameter(MediatorConfiguration.Consumption consumption,\n            Type genericTypeOfFirstParam, Class<?> parameterType)", "testcase": false, "constructor": false}, {"identifier": "validateStreamTransformer", "parameters": "(Acknowledgment.Strategy acknowledgment)", "modifiers": "private", "return": "ValidationOutput", "signature": "ValidationOutput validateStreamTransformer(Acknowledgment.Strategy acknowledgment)", "full_signature": "private ValidationOutput validateStreamTransformer(Acknowledgment.Strategy acknowledgment)", "class_method_signature": "MediatorConfigurationSupport.validateStreamTransformer(Acknowledgment.Strategy acknowledgment)", "testcase": false, "constructor": false}, {"identifier": "processDefaultAcknowledgement", "parameters": "(Shape shape,\n            MediatorConfiguration.Consumption consumption, MediatorConfiguration.Production production)", "modifiers": "public", "return": "Acknowledgment.Strategy", "signature": "Acknowledgment.Strategy processDefaultAcknowledgement(Shape shape,\n            MediatorConfiguration.Consumption consumption, MediatorConfiguration.Production production)", "full_signature": "public Acknowledgment.Strategy processDefaultAcknowledgement(Shape shape,\n            MediatorConfiguration.Consumption consumption, MediatorConfiguration.Production production)", "class_method_signature": "MediatorConfigurationSupport.processDefaultAcknowledgement(Shape shape,\n            MediatorConfiguration.Consumption consumption, MediatorConfiguration.Production production)", "testcase": false, "constructor": false}, {"identifier": "processMerge", "parameters": "(List<?> incomings, Supplier<Merge.Mode> supplier)", "modifiers": "public", "return": "Merge.Mode", "signature": "Merge.Mode processMerge(List<?> incomings, Supplier<Merge.Mode> supplier)", "full_signature": "public Merge.Mode processMerge(List<?> incomings, Supplier<Merge.Mode> supplier)", "class_method_signature": "MediatorConfigurationSupport.processMerge(List<?> incomings, Supplier<Merge.Mode> supplier)", "testcase": false, "constructor": false}, {"identifier": "processBroadcast", "parameters": "(Object outgoing, Supplier<Integer> supplier)", "modifiers": "public", "return": "Integer", "signature": "Integer processBroadcast(Object outgoing, Supplier<Integer> supplier)", "full_signature": "public Integer processBroadcast(Object outgoing, Supplier<Integer> supplier)", "class_method_signature": "MediatorConfigurationSupport.processBroadcast(Object outgoing, Supplier<Integer> supplier)", "testcase": false, "constructor": false}, {"identifier": "validateBlocking", "parameters": "(ValidationOutput validationOutput)", "modifiers": "public", "return": "void", "signature": "void validateBlocking(ValidationOutput validationOutput)", "full_signature": "public void validateBlocking(ValidationOutput validationOutput)", "class_method_signature": "MediatorConfigurationSupport.validateBlocking(ValidationOutput validationOutput)", "testcase": false, "constructor": false}], "file": "smallrye-reactive-messaging-provider/src/main/java/io/smallrye/reactive/messaging/MediatorConfigurationSupport.java"}, "focal_method": {"identifier": "validate", "parameters": "(Shape shape, Acknowledgment.Strategy acknowledgment)", "modifiers": "public", "return": "ValidationOutput", "body": "public ValidationOutput validate(Shape shape, Acknowledgment.Strategy acknowledgment) {\n        switch (shape) {\n            case SUBSCRIBER:\n                return validateSubscriber();\n            case PUBLISHER:\n                return validatePublisher();\n            case PROCESSOR:\n                return validateProcessor(acknowledgment);\n            case STREAM_TRANSFORMER:\n                return validateStreamTransformer(acknowledgment);\n            default:\n                throw ex.illegalStateExceptionForValidate(shape);\n        }\n    }", "signature": "ValidationOutput validate(Shape shape, Acknowledgment.Strategy acknowledgment)", "full_signature": "public ValidationOutput validate(Shape shape, Acknowledgment.Strategy acknowledgment)", "class_method_signature": "MediatorConfigurationSupport.validate(Shape shape, Acknowledgment.Strategy acknowledgment)", "testcase": false, "constructor": false, "invocations": ["validateSubscriber", "validatePublisher", "validateProcessor", "validateStreamTransformer", "illegalStateExceptionForValidate"]}, "repository": {"repo_id": 153155267, "url": "https://github.com/smallrye/smallrye-reactive-messaging", "stars": 45, "created": "10/15/2018 5:36:05 PM +00:00", "updates": "2020-01-26T16:55:44+00:00", "fork": "False", "license": "licensed"}}