{"test_class": {"identifier": "MetricQueryServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n        private HttpClientWrapper httpClient;", "modifier": "@Mock\n        private", "type": "HttpClientWrapper", "declarator": "httpClient", "var_name": "httpClient"}, {"original_string": "private Map<String, String> graphiteHeaders = Collections.emptyMap();", "modifier": "private", "type": "Map<String, String>", "declarator": "graphiteHeaders = Collections.emptyMap()", "var_name": "graphiteHeaders"}, {"original_string": "private Map<String, String> metrictankHeaders = Collections.singletonMap(\"x-org-id\", \"1\");", "modifier": "private", "type": "Map<String, String>", "declarator": "metrictankHeaders = Collections.singletonMap(\"x-org-id\", \"1\")", "var_name": "metrictankHeaders"}, {"original_string": "private MetricFunctionsSpec metricFunctionsSpec;", "modifier": "private", "type": "MetricFunctionsSpec", "declarator": "metricFunctionsSpec", "var_name": "metricFunctionsSpec"}, {"original_string": "private Config metricSourceSinkConfig;", "modifier": "private", "type": "Config", "declarator": "metricSourceSinkConfig", "var_name": "metricSourceSinkConfig"}, {"original_string": "public static Map<String, String> metricSourceSinkConfigMap;", "modifier": "public static", "type": "Map<String, String>", "declarator": "metricSourceSinkConfigMap", "var_name": "metricSourceSinkConfigMap"}], "file": "metrics/src/test/java/com/expedia/adaptivealerting/metrics/functions/service/MetricQueryServiceTest.java"}, "test_case": {"identifier": "testMetricQueryService", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n        public void testMetricQueryService() throws Exception {\n                MetricQueryService metricQueryService = new MetricQueryService();\n                assertTrue(metricQueryService != null);\n        }", "signature": "void testMetricQueryService()", "full_signature": "@Test public void testMetricQueryService()", "class_method_signature": "MetricQueryServiceTest.testMetricQueryService()", "testcase": true, "constructor": false, "invocations": ["assertTrue"]}, "focal_class": {"identifier": "MetricQueryService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HttpClientWrapper metricFunctionHttpClient;", "modifier": "private", "type": "HttpClientWrapper", "declarator": "metricFunctionHttpClient", "var_name": "metricFunctionHttpClient"}, {"original_string": "private final String METRIC_SOURCE_KEY = \"metric-source\";", "modifier": "private final", "type": "String", "declarator": "METRIC_SOURCE_KEY = \"metric-source\"", "var_name": "METRIC_SOURCE_KEY"}, {"original_string": "private final static String IS_GRAPHITE_SERVER_METRICTANK_KEY = \"is-graphite-server-metrictank\";", "modifier": "private final static", "type": "String", "declarator": "IS_GRAPHITE_SERVER_METRICTANK_KEY = \"is-graphite-server-metrictank\"", "var_name": "IS_GRAPHITE_SERVER_METRICTANK_KEY"}, {"original_string": "private final static String GRAPHITE_SERVER_METRICTANK = \"metrictank\";", "modifier": "private final static", "type": "String", "declarator": "GRAPHITE_SERVER_METRICTANK = \"metrictank\"", "var_name": "GRAPHITE_SERVER_METRICTANK"}, {"original_string": "private final String GRAPHITE_URL_TEMPLATE_KEY = \"urlTemplate\";", "modifier": "private final", "type": "String", "declarator": "GRAPHITE_URL_TEMPLATE_KEY = \"urlTemplate\"", "var_name": "GRAPHITE_URL_TEMPLATE_KEY"}], "methods": [{"identifier": "MetricQueryService", "parameters": "()", "modifiers": "public", "return": "", "signature": " MetricQueryService()", "full_signature": "public  MetricQueryService()", "class_method_signature": "MetricQueryService.MetricQueryService()", "testcase": false, "constructor": true}, {"identifier": "MetricQueryService", "parameters": "(HttpClientWrapper httpClientWrapper)", "modifiers": "public", "return": "", "signature": " MetricQueryService(HttpClientWrapper httpClientWrapper)", "full_signature": "public  MetricQueryService(HttpClientWrapper httpClientWrapper)", "class_method_signature": "MetricQueryService.MetricQueryService(HttpClientWrapper httpClientWrapper)", "testcase": false, "constructor": true}, {"identifier": "queryMetricSource", "parameters": "(Config metricSourceSinkConfig, MetricFunctionsSpec metricFunctionsSpec,\n            Instant instant)", "modifiers": "public", "return": "MetricData", "signature": "MetricData queryMetricSource(Config metricSourceSinkConfig, MetricFunctionsSpec metricFunctionsSpec,\n            Instant instant)", "full_signature": "public MetricData queryMetricSource(Config metricSourceSinkConfig, MetricFunctionsSpec metricFunctionsSpec,\n            Instant instant)", "class_method_signature": "MetricQueryService.queryMetricSource(Config metricSourceSinkConfig, MetricFunctionsSpec metricFunctionsSpec,\n            Instant instant)", "testcase": false, "constructor": false}, {"identifier": "queryGraphite", "parameters": "(Config metricSourceSinkConfig, MetricFunctionsSpec metricFunctionsSpec,\n            Instant instant)", "modifiers": "private", "return": "MetricData", "signature": "MetricData queryGraphite(Config metricSourceSinkConfig, MetricFunctionsSpec metricFunctionsSpec,\n            Instant instant)", "full_signature": "private MetricData queryGraphite(Config metricSourceSinkConfig, MetricFunctionsSpec metricFunctionsSpec,\n            Instant instant)", "class_method_signature": "MetricQueryService.queryGraphite(Config metricSourceSinkConfig, MetricFunctionsSpec metricFunctionsSpec,\n            Instant instant)", "testcase": false, "constructor": false}], "file": "metrics/src/main/java/com/expedia/adaptivealerting/metrics/functions/service/MetricQueryService.java"}, "focal_method": {"identifier": "MetricQueryService", "parameters": "()", "modifiers": "public", "return": "", "body": "public MetricQueryService() {\n        this(new HttpClientWrapper());\n    }", "signature": " MetricQueryService()", "full_signature": "public  MetricQueryService()", "class_method_signature": "MetricQueryService.MetricQueryService()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}