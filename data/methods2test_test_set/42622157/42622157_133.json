{"test_class": {"identifier": "BackendUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "org.eclipse.winery.repository/src/test/java/org/eclipse/winery/repository/backend/BackendUtilsTest.java"}, "test_case": {"identifier": "repositoryFileReferenceWithSubdirectoryCorrectlyCreated", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void repositoryFileReferenceWithSubdirectoryCorrectlyCreated() {\n        ArtifactTemplateId artifactTemplateId = new ArtifactTemplateId(\"http://www.example.org\", \"at\", false);\n        ArtifactTemplateSourceDirectoryId artifactTemplateSourceDirectoryId = new ArtifactTemplateSourceDirectoryId(artifactTemplateId);\n        final Path subDirectories = Paths.get(\"d1\", \"d2\");\n\n        final RepositoryFileReference repositoryFileReference = BackendUtils.getRepositoryFileReference(Paths.get(\"main\"), Paths.get(\"main\", \"d1\", \"d2\", \"file.txt\"), artifactTemplateSourceDirectoryId);\n        assertEquals(artifactTemplateSourceDirectoryId, repositoryFileReference.getParent());\n        assertEquals(Optional.of(subDirectories), repositoryFileReference.getSubDirectory());\n        assertEquals(\"file.txt\", repositoryFileReference.getFileName());\n    }", "signature": "void repositoryFileReferenceWithSubdirectoryCorrectlyCreated()", "full_signature": "@Test public void repositoryFileReferenceWithSubdirectoryCorrectlyCreated()", "class_method_signature": "BackendUtilsTest.repositoryFileReferenceWithSubdirectoryCorrectlyCreated()", "testcase": true, "constructor": false, "invocations": ["get", "getRepositoryFileReference", "get", "get", "assertEquals", "getParent", "assertEquals", "of", "getSubDirectory", "assertEquals", "getFileName"]}, "focal_class": {"identifier": "BackendUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(BackendUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(BackendUtils.class)", "var_name": "LOGGER"}, {"original_string": "private static final MediaType MEDIATYPE_APPLICATION_OCTET_STREAM = MediaType.parse(\"application/octet-stream\");", "modifier": "private static final", "type": "MediaType", "declarator": "MEDIATYPE_APPLICATION_OCTET_STREAM = MediaType.parse(\"application/octet-stream\")", "var_name": "MEDIATYPE_APPLICATION_OCTET_STREAM"}], "methods": [{"identifier": "isFileNewerThanModifiedDate", "parameters": "(long millis, String modified)", "modifiers": "public static", "return": "boolean", "signature": "boolean isFileNewerThanModifiedDate(long millis, String modified)", "full_signature": "public static boolean isFileNewerThanModifiedDate(long millis, String modified)", "class_method_signature": "BackendUtils.isFileNewerThanModifiedDate(long millis, String modified)", "testcase": false, "constructor": false}, {"identifier": "getDefinitionsChildId", "parameters": "(Class<T> idClass, String qnameStr)", "modifiers": "public static", "return": "T", "signature": "T getDefinitionsChildId(Class<T> idClass, String qnameStr)", "full_signature": "public static T getDefinitionsChildId(Class<T> idClass, String qnameStr)", "class_method_signature": "BackendUtils.getDefinitionsChildId(Class<T> idClass, String qnameStr)", "testcase": false, "constructor": false}, {"identifier": "getDefinitionsChildId", "parameters": "(Class<T> idClass, QName qname)", "modifiers": "public static", "return": "T", "signature": "T getDefinitionsChildId(Class<T> idClass, QName qname)", "full_signature": "public static T getDefinitionsChildId(Class<T> idClass, QName qname)", "class_method_signature": "BackendUtils.getDefinitionsChildId(Class<T> idClass, QName qname)", "testcase": false, "constructor": false}, {"identifier": "getDefinitionsChildId", "parameters": "(Class<T> idClass, String namespace, String id, boolean URLencoded)", "modifiers": "public static", "return": "T", "signature": "T getDefinitionsChildId(Class<T> idClass, String namespace, String id, boolean URLencoded)", "full_signature": "public static T getDefinitionsChildId(Class<T> idClass, String namespace, String id, boolean URLencoded)", "class_method_signature": "BackendUtils.getDefinitionsChildId(Class<T> idClass, String namespace, String id, boolean URLencoded)", "testcase": false, "constructor": false}, {"identifier": "getNamespace", "parameters": "(ToscaElementId id)", "modifiers": "public static", "return": "Namespace", "signature": "Namespace getNamespace(ToscaElementId id)", "full_signature": "public static Namespace getNamespace(ToscaElementId id)", "class_method_signature": "BackendUtils.getNamespace(ToscaElementId id)", "testcase": false, "constructor": false}, {"identifier": "getDefinitionsAsXMLString", "parameters": "(TDefinitions definitions)", "modifiers": "public static", "return": "String", "signature": "String getDefinitionsAsXMLString(TDefinitions definitions)", "full_signature": "public static String getDefinitionsAsXMLString(TDefinitions definitions)", "class_method_signature": "BackendUtils.getDefinitionsAsXMLString(TDefinitions definitions)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "(DefinitionsChildId instanceId)", "modifiers": "public static", "return": "String", "signature": "String getName(DefinitionsChildId instanceId)", "full_signature": "public static String getName(DefinitionsChildId instanceId)", "class_method_signature": "BackendUtils.getName(DefinitionsChildId instanceId)", "testcase": false, "constructor": false}, {"identifier": "getPathInsideRepo", "parameters": "(GenericId id)", "modifiers": "public static", "return": "String", "signature": "String getPathInsideRepo(GenericId id)", "full_signature": "public static String getPathInsideRepo(GenericId id)", "class_method_signature": "BackendUtils.getPathInsideRepo(GenericId id)", "testcase": false, "constructor": false}, {"identifier": "getPathInsideRepo", "parameters": "(RepositoryFileReference ref)", "modifiers": "public static", "return": "String", "signature": "String getPathInsideRepo(RepositoryFileReference ref)", "full_signature": "public static String getPathInsideRepo(RepositoryFileReference ref)", "class_method_signature": "BackendUtils.getPathInsideRepo(RepositoryFileReference ref)", "testcase": false, "constructor": false}, {"identifier": "getFilenameAndSubDirectory", "parameters": "(RepositoryFileReference ref)", "modifiers": "public static", "return": "String", "signature": "String getFilenameAndSubDirectory(RepositoryFileReference ref)", "full_signature": "public static String getFilenameAndSubDirectory(RepositoryFileReference ref)", "class_method_signature": "BackendUtils.getFilenameAndSubDirectory(RepositoryFileReference ref)", "testcase": false, "constructor": false}, {"identifier": "getRefOfDefinitions", "parameters": "(DefinitionsChildId id)", "modifiers": "public static", "return": "RepositoryFileReference", "signature": "RepositoryFileReference getRefOfDefinitions(DefinitionsChildId id)", "full_signature": "public static RepositoryFileReference getRefOfDefinitions(DefinitionsChildId id)", "class_method_signature": "BackendUtils.getRefOfDefinitions(DefinitionsChildId id)", "testcase": false, "constructor": false}, {"identifier": "getFileNameOfDefinitions", "parameters": "(DefinitionsChildId id)", "modifiers": "public static", "return": "String", "signature": "String getFileNameOfDefinitions(DefinitionsChildId id)", "full_signature": "public static String getFileNameOfDefinitions(DefinitionsChildId id)", "class_method_signature": "BackendUtils.getFileNameOfDefinitions(DefinitionsChildId id)", "testcase": false, "constructor": false}, {"identifier": "getFileNameOfDefinitions", "parameters": "(Class<T> id)", "modifiers": "public static", "return": "String", "signature": "String getFileNameOfDefinitions(Class<T> id)", "full_signature": "public static String getFileNameOfDefinitions(Class<T> id)", "class_method_signature": "BackendUtils.getFileNameOfDefinitions(Class<T> id)", "testcase": false, "constructor": false}, {"identifier": "getTypeForAdminId", "parameters": "(Class<? extends AdminId> idClass)", "modifiers": "public static", "return": "String", "signature": "String getTypeForAdminId(Class<? extends AdminId> idClass)", "full_signature": "public static String getTypeForAdminId(Class<? extends AdminId> idClass)", "class_method_signature": "BackendUtils.getTypeForAdminId(Class<? extends AdminId> idClass)", "testcase": false, "constructor": false}, {"identifier": "getRefOfConfiguration", "parameters": "(GenericId id)", "modifiers": "public static", "return": "RepositoryFileReference", "signature": "RepositoryFileReference getRefOfConfiguration(GenericId id)", "full_signature": "public static RepositoryFileReference getRefOfConfiguration(GenericId id)", "class_method_signature": "BackendUtils.getRefOfConfiguration(GenericId id)", "testcase": false, "constructor": false}, {"identifier": "getRefOfJsonConfiguration", "parameters": "(GenericId id)", "modifiers": "public static", "return": "RepositoryFileReference", "signature": "RepositoryFileReference getRefOfJsonConfiguration(GenericId id)", "full_signature": "public static RepositoryFileReference getRefOfJsonConfiguration(GenericId id)", "class_method_signature": "BackendUtils.getRefOfJsonConfiguration(GenericId id)", "testcase": false, "constructor": false}, {"identifier": "getAllNestedNodeTemplates", "parameters": "(TServiceTemplate serviceTemplate)", "modifiers": "public static", "return": "List<TNodeTemplate>", "signature": "List<TNodeTemplate> getAllNestedNodeTemplates(TServiceTemplate serviceTemplate)", "full_signature": "public static List<TNodeTemplate> getAllNestedNodeTemplates(TServiceTemplate serviceTemplate)", "class_method_signature": "BackendUtils.getAllNestedNodeTemplates(TServiceTemplate serviceTemplate)", "testcase": false, "constructor": false}, {"identifier": "getAllReferencedArtifactTemplates", "parameters": "(TDeploymentArtifacts tDeploymentArtifacts)", "modifiers": "@NonNull private static", "return": "Collection<QName>", "signature": "Collection<QName> getAllReferencedArtifactTemplates(TDeploymentArtifacts tDeploymentArtifacts)", "full_signature": "@NonNull private static Collection<QName> getAllReferencedArtifactTemplates(TDeploymentArtifacts tDeploymentArtifacts)", "class_method_signature": "BackendUtils.getAllReferencedArtifactTemplates(TDeploymentArtifacts tDeploymentArtifacts)", "testcase": false, "constructor": false}, {"identifier": "getAllReferencedArtifactTemplates", "parameters": "(TImplementationArtifacts tImplementationArtifacts)", "modifiers": "private static", "return": "Collection<QName>", "signature": "Collection<QName> getAllReferencedArtifactTemplates(TImplementationArtifacts tImplementationArtifacts)", "full_signature": "private static Collection<QName> getAllReferencedArtifactTemplates(TImplementationArtifacts tImplementationArtifacts)", "class_method_signature": "BackendUtils.getAllReferencedArtifactTemplates(TImplementationArtifacts tImplementationArtifacts)", "testcase": false, "constructor": false}, {"identifier": "getArtifactTemplatesOfReferencedDeploymentArtifacts", "parameters": "(TNodeTemplate nodeTemplate)", "modifiers": "public static", "return": "Collection<QName>", "signature": "Collection<QName> getArtifactTemplatesOfReferencedDeploymentArtifacts(TNodeTemplate nodeTemplate)", "full_signature": "public static Collection<QName> getArtifactTemplatesOfReferencedDeploymentArtifacts(TNodeTemplate nodeTemplate)", "class_method_signature": "BackendUtils.getArtifactTemplatesOfReferencedDeploymentArtifacts(TNodeTemplate nodeTemplate)", "testcase": false, "constructor": false}, {"identifier": "getArtifactTemplatesOfReferencedImplementationArtifacts", "parameters": "(TNodeTemplate nodeTemplate)", "modifiers": "public static", "return": "Collection<QName>", "signature": "Collection<QName> getArtifactTemplatesOfReferencedImplementationArtifacts(TNodeTemplate nodeTemplate)", "full_signature": "public static Collection<QName> getArtifactTemplatesOfReferencedImplementationArtifacts(TNodeTemplate nodeTemplate)", "class_method_signature": "BackendUtils.getArtifactTemplatesOfReferencedImplementationArtifacts(TNodeTemplate nodeTemplate)", "testcase": false, "constructor": false}, {"identifier": "updateWrapperDefinitions", "parameters": "(DefinitionsChildId tcId, Definitions defs)", "modifiers": "public static", "return": "Definitions", "signature": "Definitions updateWrapperDefinitions(DefinitionsChildId tcId, Definitions defs)", "full_signature": "public static Definitions updateWrapperDefinitions(DefinitionsChildId tcId, Definitions defs)", "class_method_signature": "BackendUtils.updateWrapperDefinitions(DefinitionsChildId tcId, Definitions defs)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "(TTopologyTemplate topologyTemplate)", "modifiers": "public static", "return": "TTopologyTemplate", "signature": "TTopologyTemplate clone(TTopologyTemplate topologyTemplate)", "full_signature": "public static TTopologyTemplate clone(TTopologyTemplate topologyTemplate)", "class_method_signature": "BackendUtils.clone(TTopologyTemplate topologyTemplate)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "(TNodeTemplate nodeTemplate)", "modifiers": "public static", "return": "TNodeTemplate", "signature": "TNodeTemplate clone(TNodeTemplate nodeTemplate)", "full_signature": "public static TNodeTemplate clone(TNodeTemplate nodeTemplate)", "class_method_signature": "BackendUtils.clone(TNodeTemplate nodeTemplate)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "(TRelationshipTemplate relationshipTemplate)", "modifiers": "public static", "return": "TRelationshipTemplate", "signature": "TRelationshipTemplate clone(TRelationshipTemplate relationshipTemplate)", "full_signature": "public static TRelationshipTemplate clone(TRelationshipTemplate relationshipTemplate)", "class_method_signature": "BackendUtils.clone(TRelationshipTemplate relationshipTemplate)", "testcase": false, "constructor": false}, {"identifier": "createWrapperDefinitions", "parameters": "(DefinitionsChildId tcId)", "modifiers": "public static", "return": "Definitions", "signature": "Definitions createWrapperDefinitions(DefinitionsChildId tcId)", "full_signature": "public static Definitions createWrapperDefinitions(DefinitionsChildId tcId)", "class_method_signature": "BackendUtils.createWrapperDefinitions(DefinitionsChildId tcId)", "testcase": false, "constructor": false}, {"identifier": "createWrapperDefinitionsAndInitialEmptyElement", "parameters": "(IRepository repository, DefinitionsChildId id)", "modifiers": "public static", "return": "Definitions", "signature": "Definitions createWrapperDefinitionsAndInitialEmptyElement(IRepository repository, DefinitionsChildId id)", "full_signature": "public static Definitions createWrapperDefinitionsAndInitialEmptyElement(IRepository repository, DefinitionsChildId id)", "class_method_signature": "BackendUtils.createWrapperDefinitionsAndInitialEmptyElement(IRepository repository, DefinitionsChildId id)", "testcase": false, "constructor": false}, {"identifier": "initializeProperties", "parameters": "(IRepository repository, TEntityTemplate entityTemplate)", "modifiers": "public static", "return": "void", "signature": "void initializeProperties(IRepository repository, TEntityTemplate entityTemplate)", "full_signature": "public static void initializeProperties(IRepository repository, TEntityTemplate entityTemplate)", "class_method_signature": "BackendUtils.initializeProperties(IRepository repository, TEntityTemplate entityTemplate)", "testcase": false, "constructor": false}, {"identifier": "persist", "parameters": "(IRepository repository, DefinitionsChildId id, TExtensibleElements element)", "modifiers": "public static", "return": "void", "signature": "void persist(IRepository repository, DefinitionsChildId id, TExtensibleElements element)", "full_signature": "public static void persist(IRepository repository, DefinitionsChildId id, TExtensibleElements element)", "class_method_signature": "BackendUtils.persist(IRepository repository, DefinitionsChildId id, TExtensibleElements element)", "testcase": false, "constructor": false}, {"identifier": "persist", "parameters": "(DefinitionsChildId id, Definitions definitions)", "modifiers": "public static", "return": "void", "signature": "void persist(DefinitionsChildId id, Definitions definitions)", "full_signature": "public static void persist(DefinitionsChildId id, Definitions definitions)", "class_method_signature": "BackendUtils.persist(DefinitionsChildId id, Definitions definitions)", "testcase": false, "constructor": false}, {"identifier": "persist", "parameters": "(Object o, RepositoryFileReference ref, MediaType mediaType)", "modifiers": "public static", "return": "void", "signature": "void persist(Object o, RepositoryFileReference ref, MediaType mediaType)", "full_signature": "public static void persist(Object o, RepositoryFileReference ref, MediaType mediaType)", "class_method_signature": "BackendUtils.persist(Object o, RepositoryFileReference ref, MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "getXSModel", "parameters": "(final RepositoryFileReference ref)", "modifiers": "public static", "return": "Optional<XSModel>", "signature": "Optional<XSModel> getXSModel(final RepositoryFileReference ref)", "full_signature": "public static Optional<XSModel> getXSModel(final RepositoryFileReference ref)", "class_method_signature": "BackendUtils.getXSModel(final RepositoryFileReference ref)", "testcase": false, "constructor": false}, {"identifier": "deriveWPD", "parameters": "(TEntityType ci, List<String> errors)", "modifiers": "public static", "return": "void", "signature": "void deriveWPD(TEntityType ci, List<String> errors)", "full_signature": "public static void deriveWPD(TEntityType ci, List<String> errors)", "class_method_signature": "BackendUtils.deriveWPD(TEntityType ci, List<String> errors)", "testcase": false, "constructor": false}, {"identifier": "getAllTOSCAElementIds", "parameters": "(Class<T> idClass)", "modifiers": "public", "return": "SortedSet<T>", "signature": "SortedSet<T> getAllTOSCAElementIds(Class<T> idClass)", "full_signature": "public SortedSet<T> getAllTOSCAElementIds(Class<T> idClass)", "class_method_signature": "BackendUtils.getAllTOSCAElementIds(Class<T> idClass)", "testcase": false, "constructor": false}, {"identifier": "convertDefinitionsChildIdCollectionToQNameCollection", "parameters": "(Collection<? extends DefinitionsChildId> col)", "modifiers": "public static", "return": "Collection<QName>", "signature": "Collection<QName> convertDefinitionsChildIdCollectionToQNameCollection(Collection<? extends DefinitionsChildId> col)", "full_signature": "public static Collection<QName> convertDefinitionsChildIdCollectionToQNameCollection(Collection<? extends DefinitionsChildId> col)", "class_method_signature": "BackendUtils.convertDefinitionsChildIdCollectionToQNameCollection(Collection<? extends DefinitionsChildId> col)", "testcase": false, "constructor": false}, {"identifier": "getMimeType", "parameters": "(BufferedInputStream bis, String fn)", "modifiers": "public static", "return": "MediaType", "signature": "MediaType getMimeType(BufferedInputStream bis, String fn)", "full_signature": "public static MediaType getMimeType(BufferedInputStream bis, String fn)", "class_method_signature": "BackendUtils.getMimeType(BufferedInputStream bis, String fn)", "testcase": false, "constructor": false}, {"identifier": "getFixedMimeType", "parameters": "(BufferedInputStream is, String fileName, MediaType mediaType)", "modifiers": "public static", "return": "MediaType", "signature": "MediaType getFixedMimeType(BufferedInputStream is, String fileName, MediaType mediaType)", "full_signature": "public static MediaType getFixedMimeType(BufferedInputStream is, String fileName, MediaType mediaType)", "class_method_signature": "BackendUtils.getFixedMimeType(BufferedInputStream is, String fileName, MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "copyIdToFields", "parameters": "(HasIdInIdOrNameField element, DefinitionsChildId id)", "modifiers": "public static", "return": "void", "signature": "void copyIdToFields(HasIdInIdOrNameField element, DefinitionsChildId id)", "full_signature": "public static void copyIdToFields(HasIdInIdOrNameField element, DefinitionsChildId id)", "class_method_signature": "BackendUtils.copyIdToFields(HasIdInIdOrNameField element, DefinitionsChildId id)", "testcase": false, "constructor": false}, {"identifier": "getGitInformation", "parameters": "(DirectoryId directoryId)", "modifiers": "public static", "return": "GitInfo", "signature": "GitInfo getGitInformation(DirectoryId directoryId)", "full_signature": "public static GitInfo getGitInformation(DirectoryId directoryId)", "class_method_signature": "BackendUtils.getGitInformation(DirectoryId directoryId)", "testcase": false, "constructor": false}, {"identifier": "getTArtifactTemplate", "parameters": "(DirectoryId directoryId)", "modifiers": "public static", "return": "TArtifactTemplate", "signature": "TArtifactTemplate getTArtifactTemplate(DirectoryId directoryId)", "full_signature": "public static TArtifactTemplate getTArtifactTemplate(DirectoryId directoryId)", "class_method_signature": "BackendUtils.getTArtifactTemplate(DirectoryId directoryId)", "testcase": false, "constructor": false}, {"identifier": "getYamlArtifactsDirectoryOfNodeTemplate", "parameters": "(ServiceTemplateId serviceTemplateId, String nodeTemplateId)", "modifiers": "public static", "return": "DirectoryId", "signature": "DirectoryId getYamlArtifactsDirectoryOfNodeTemplate(ServiceTemplateId serviceTemplateId, String nodeTemplateId)", "full_signature": "public static DirectoryId getYamlArtifactsDirectoryOfNodeTemplate(ServiceTemplateId serviceTemplateId, String nodeTemplateId)", "class_method_signature": "BackendUtils.getYamlArtifactsDirectoryOfNodeTemplate(ServiceTemplateId serviceTemplateId, String nodeTemplateId)", "testcase": false, "constructor": false}, {"identifier": "getYamlArtifactDirectoryOfNodeTemplate", "parameters": "(ServiceTemplateId serviceTemplateId,\n                                                                     String nodeTemplateId, String yamlArtifactId)", "modifiers": "public static", "return": "DirectoryId", "signature": "DirectoryId getYamlArtifactDirectoryOfNodeTemplate(ServiceTemplateId serviceTemplateId,\n                                                                     String nodeTemplateId, String yamlArtifactId)", "full_signature": "public static DirectoryId getYamlArtifactDirectoryOfNodeTemplate(ServiceTemplateId serviceTemplateId,\n                                                                     String nodeTemplateId, String yamlArtifactId)", "class_method_signature": "BackendUtils.getYamlArtifactDirectoryOfNodeTemplate(ServiceTemplateId serviceTemplateId,\n                                                                     String nodeTemplateId, String yamlArtifactId)", "testcase": false, "constructor": false}, {"identifier": "isGlobMatch", "parameters": "(String glob, Path path)", "modifiers": "public static", "return": "boolean", "signature": "boolean isGlobMatch(String glob, Path path)", "full_signature": "public static boolean isGlobMatch(String glob, Path path)", "class_method_signature": "BackendUtils.isGlobMatch(String glob, Path path)", "testcase": false, "constructor": false}, {"identifier": "injectArtifactTemplateIntoDeploymentArtifact", "parameters": "(ServiceTemplateId serviceTemplate, String nodeTemplateId, String deploymentArtifactId, ArtifactTemplateId artifactTemplate)", "modifiers": "public static", "return": "boolean", "signature": "boolean injectArtifactTemplateIntoDeploymentArtifact(ServiceTemplateId serviceTemplate, String nodeTemplateId, String deploymentArtifactId, ArtifactTemplateId artifactTemplate)", "full_signature": "public static boolean injectArtifactTemplateIntoDeploymentArtifact(ServiceTemplateId serviceTemplate, String nodeTemplateId, String deploymentArtifactId, ArtifactTemplateId artifactTemplate)", "class_method_signature": "BackendUtils.injectArtifactTemplateIntoDeploymentArtifact(ServiceTemplateId serviceTemplate, String nodeTemplateId, String deploymentArtifactId, ArtifactTemplateId artifactTemplate)", "testcase": false, "constructor": false}, {"identifier": "getImportLocationForWinerysPropertiesDefinitionXSD", "parameters": "(EntityTypeId tcId, URI uri, String wrapperElementLocalName)", "modifiers": "public static", "return": "String", "signature": "String getImportLocationForWinerysPropertiesDefinitionXSD(EntityTypeId tcId, URI uri, String wrapperElementLocalName)", "full_signature": "public static String getImportLocationForWinerysPropertiesDefinitionXSD(EntityTypeId tcId, URI uri, String wrapperElementLocalName)", "class_method_signature": "BackendUtils.getImportLocationForWinerysPropertiesDefinitionXSD(EntityTypeId tcId, URI uri, String wrapperElementLocalName)", "testcase": false, "constructor": false}, {"identifier": "synchronizeReferences", "parameters": "(IRepository repository, ArtifactTemplateId id)", "modifiers": "public static", "return": "TArtifactTemplate", "signature": "TArtifactTemplate synchronizeReferences(IRepository repository, ArtifactTemplateId id)", "full_signature": "public static TArtifactTemplate synchronizeReferences(IRepository repository, ArtifactTemplateId id)", "class_method_signature": "BackendUtils.synchronizeReferences(IRepository repository, ArtifactTemplateId id)", "testcase": false, "constructor": false}, {"identifier": "determineChanges", "parameters": "(List<TArtifactReference> artRefList, SortedSet<RepositoryFileReference> filesOnDisk, List<TArtifactReference> toRemove, List<RepositoryFileReference> toAdd)", "modifiers": "private static", "return": "void", "signature": "void determineChanges(List<TArtifactReference> artRefList, SortedSet<RepositoryFileReference> filesOnDisk, List<TArtifactReference> toRemove, List<RepositoryFileReference> toAdd)", "full_signature": "private static void determineChanges(List<TArtifactReference> artRefList, SortedSet<RepositoryFileReference> filesOnDisk, List<TArtifactReference> toRemove, List<RepositoryFileReference> toAdd)", "class_method_signature": "BackendUtils.determineChanges(List<TArtifactReference> artRefList, SortedSet<RepositoryFileReference> filesOnDisk, List<TArtifactReference> toRemove, List<RepositoryFileReference> toAdd)", "testcase": false, "constructor": false}, {"identifier": "synchronizeReferences", "parameters": "(ServiceTemplateId id)", "modifiers": "public static", "return": "void", "signature": "void synchronizeReferences(ServiceTemplateId id)", "full_signature": "public static void synchronizeReferences(ServiceTemplateId id)", "class_method_signature": "BackendUtils.synchronizeReferences(ServiceTemplateId id)", "testcase": false, "constructor": false}, {"identifier": "getXMLAsString", "parameters": "(Object obj)", "modifiers": "public static", "return": "String", "signature": "String getXMLAsString(Object obj)", "full_signature": "public static String getXMLAsString(Object obj)", "class_method_signature": "BackendUtils.getXMLAsString(Object obj)", "testcase": false, "constructor": false}, {"identifier": "getXMLAsString", "parameters": "(T obj, boolean includeProcessingInstruction)", "modifiers": "public static", "return": "String", "signature": "String getXMLAsString(T obj, boolean includeProcessingInstruction)", "full_signature": "public static String getXMLAsString(T obj, boolean includeProcessingInstruction)", "class_method_signature": "BackendUtils.getXMLAsString(T obj, boolean includeProcessingInstruction)", "testcase": false, "constructor": false}, {"identifier": "getXMLAsString", "parameters": "(Class<T> clazz, T obj, boolean includeProcessingInstruction)", "modifiers": "public static", "return": "String", "signature": "String getXMLAsString(Class<T> clazz, T obj, boolean includeProcessingInstruction)", "full_signature": "public static String getXMLAsString(Class<T> clazz, T obj, boolean includeProcessingInstruction)", "class_method_signature": "BackendUtils.getXMLAsString(Class<T> clazz, T obj, boolean includeProcessingInstruction)", "testcase": false, "constructor": false}, {"identifier": "getErrorHandler", "parameters": "(StringBuilder sb)", "modifiers": "public static", "return": "ErrorHandler", "signature": "ErrorHandler getErrorHandler(StringBuilder sb)", "full_signature": "public static ErrorHandler getErrorHandler(StringBuilder sb)", "class_method_signature": "BackendUtils.getErrorHandler(StringBuilder sb)", "testcase": false, "constructor": false}, {"identifier": "getRepositoryFileReference", "parameters": "(Path rootPath, Path path, DirectoryId directoryId)", "modifiers": "public static", "return": "RepositoryFileReference", "signature": "RepositoryFileReference getRepositoryFileReference(Path rootPath, Path path, DirectoryId directoryId)", "full_signature": "public static RepositoryFileReference getRepositoryFileReference(Path rootPath, Path path, DirectoryId directoryId)", "class_method_signature": "BackendUtils.getRepositoryFileReference(Path rootPath, Path path, DirectoryId directoryId)", "testcase": false, "constructor": false}, {"identifier": "importDirectory", "parameters": "(Path rootPath, IRepository repository, DirectoryId dir)", "modifiers": "public static", "return": "void", "signature": "void importDirectory(Path rootPath, IRepository repository, DirectoryId dir)", "full_signature": "public static void importDirectory(Path rootPath, IRepository repository, DirectoryId dir)", "class_method_signature": "BackendUtils.importDirectory(Path rootPath, IRepository repository, DirectoryId dir)", "testcase": false, "constructor": false}, {"identifier": "getDefinitionsHavingCorrectImports", "parameters": "(IRepository repository, DefinitionsChildId id)", "modifiers": "public static", "return": "Definitions", "signature": "Definitions getDefinitionsHavingCorrectImports(IRepository repository, DefinitionsChildId id)", "full_signature": "public static Definitions getDefinitionsHavingCorrectImports(IRepository repository, DefinitionsChildId id)", "class_method_signature": "BackendUtils.getDefinitionsHavingCorrectImports(IRepository repository, DefinitionsChildId id)", "testcase": false, "constructor": false}, {"identifier": "mergeTopologyTemplateAinTopologyTemplateB", "parameters": "(ServiceTemplateId serviceTemplateIdA, ServiceTemplateId serviceTemplateIdB)", "modifiers": "public static", "return": "void", "signature": "void mergeTopologyTemplateAinTopologyTemplateB(ServiceTemplateId serviceTemplateIdA, ServiceTemplateId serviceTemplateIdB)", "full_signature": "public static void mergeTopologyTemplateAinTopologyTemplateB(ServiceTemplateId serviceTemplateIdA, ServiceTemplateId serviceTemplateIdB)", "class_method_signature": "BackendUtils.mergeTopologyTemplateAinTopologyTemplateB(ServiceTemplateId serviceTemplateIdA, ServiceTemplateId serviceTemplateIdB)", "testcase": false, "constructor": false}, {"identifier": "mergeTopologyTemplateAinTopologyTemplateB", "parameters": "(TTopologyTemplate topologyTemplateA, TTopologyTemplate topologyTemplateB)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> mergeTopologyTemplateAinTopologyTemplateB(TTopologyTemplate topologyTemplateA, TTopologyTemplate topologyTemplateB)", "full_signature": "public static Map<String, String> mergeTopologyTemplateAinTopologyTemplateB(TTopologyTemplate topologyTemplateA, TTopologyTemplate topologyTemplateB)", "class_method_signature": "BackendUtils.mergeTopologyTemplateAinTopologyTemplateB(TTopologyTemplate topologyTemplateA, TTopologyTemplate topologyTemplateB)", "testcase": false, "constructor": false}, {"identifier": "mergeTopologyTemplateAinTopologyTemplateB", "parameters": "(TTopologyTemplate topologyTemplateA, TTopologyTemplate topologyTemplateB, List<TEntityTemplate> stayingElements)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> mergeTopologyTemplateAinTopologyTemplateB(TTopologyTemplate topologyTemplateA, TTopologyTemplate topologyTemplateB, List<TEntityTemplate> stayingElements)", "full_signature": "public static Map<String, String> mergeTopologyTemplateAinTopologyTemplateB(TTopologyTemplate topologyTemplateA, TTopologyTemplate topologyTemplateB, List<TEntityTemplate> stayingElements)", "class_method_signature": "BackendUtils.mergeTopologyTemplateAinTopologyTemplateB(TTopologyTemplate topologyTemplateA, TTopologyTemplate topologyTemplateB, List<TEntityTemplate> stayingElements)", "testcase": false, "constructor": false}, {"identifier": "updateVersionOfNodeTemplate", "parameters": "(TTopologyTemplate topologyTemplate, String nodeTemplateId, String newComponentType)", "modifiers": "public static", "return": "TTopologyTemplate", "signature": "TTopologyTemplate updateVersionOfNodeTemplate(TTopologyTemplate topologyTemplate, String nodeTemplateId, String newComponentType)", "full_signature": "public static TTopologyTemplate updateVersionOfNodeTemplate(TTopologyTemplate topologyTemplate, String nodeTemplateId, String newComponentType)", "class_method_signature": "BackendUtils.updateVersionOfNodeTemplate(TTopologyTemplate topologyTemplate, String nodeTemplateId, String newComponentType)", "testcase": false, "constructor": false}, {"identifier": "getOtherVersionDefinitionsFromDefinition", "parameters": "(DefinitionsChildId id)", "modifiers": "public static", "return": "SortedSet<? extends DefinitionsChildId>", "signature": "SortedSet<? extends DefinitionsChildId> getOtherVersionDefinitionsFromDefinition(DefinitionsChildId id)", "full_signature": "public static SortedSet<? extends DefinitionsChildId> getOtherVersionDefinitionsFromDefinition(DefinitionsChildId id)", "class_method_signature": "BackendUtils.getOtherVersionDefinitionsFromDefinition(DefinitionsChildId id)", "testcase": false, "constructor": false}, {"identifier": "getAllVersionsOfOneDefinition", "parameters": "(DefinitionsChildId id)", "modifiers": "public static", "return": "List<WineryVersion>", "signature": "List<WineryVersion> getAllVersionsOfOneDefinition(DefinitionsChildId id)", "full_signature": "public static List<WineryVersion> getAllVersionsOfOneDefinition(DefinitionsChildId id)", "class_method_signature": "BackendUtils.getAllVersionsOfOneDefinition(DefinitionsChildId id)", "testcase": false, "constructor": false}, {"identifier": "getCurrentVersionWithAllFlags", "parameters": "(DefinitionsChildId id)", "modifiers": "public static", "return": "WineryVersion", "signature": "WineryVersion getCurrentVersionWithAllFlags(DefinitionsChildId id)", "full_signature": "public static WineryVersion getCurrentVersionWithAllFlags(DefinitionsChildId id)", "class_method_signature": "BackendUtils.getCurrentVersionWithAllFlags(DefinitionsChildId id)", "testcase": false, "constructor": false}, {"identifier": "getVersionsList", "parameters": "(DefinitionsChildId id, final WineryVersion[] current)", "modifiers": "private static", "return": "List<WineryVersion>", "signature": "List<WineryVersion> getVersionsList(DefinitionsChildId id, final WineryVersion[] current)", "full_signature": "private static List<WineryVersion> getVersionsList(DefinitionsChildId id, final WineryVersion[] current)", "class_method_signature": "BackendUtils.getVersionsList(DefinitionsChildId id, final WineryVersion[] current)", "testcase": false, "constructor": false}, {"identifier": "getPredecessor", "parameters": "(DefinitionsChildId id)", "modifiers": "public static", "return": "WineryVersion", "signature": "WineryVersion getPredecessor(DefinitionsChildId id)", "full_signature": "public static WineryVersion getPredecessor(DefinitionsChildId id)", "class_method_signature": "BackendUtils.getPredecessor(DefinitionsChildId id)", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(DefinitionsChildId id, WineryVersion versionToCompareTo)", "modifiers": "public static", "return": "ToscaDiff", "signature": "ToscaDiff compare(DefinitionsChildId id, WineryVersion versionToCompareTo)", "full_signature": "public static ToscaDiff compare(DefinitionsChildId id, WineryVersion versionToCompareTo)", "class_method_signature": "BackendUtils.compare(DefinitionsChildId id, WineryVersion versionToCompareTo)", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "(DefinitionsChildId componentToCommit, String commitMessagePrefix)", "modifiers": "public static", "return": "void", "signature": "void commit(DefinitionsChildId componentToCommit, String commitMessagePrefix)", "full_signature": "public static void commit(DefinitionsChildId componentToCommit, String commitMessagePrefix)", "class_method_signature": "BackendUtils.commit(DefinitionsChildId componentToCommit, String commitMessagePrefix)", "testcase": false, "constructor": false}], "file": "org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/backend/BackendUtils.java"}, "focal_method": {"identifier": "getRepositoryFileReference", "parameters": "(Path rootPath, Path path, DirectoryId directoryId)", "modifiers": "public static", "return": "RepositoryFileReference", "body": "public static RepositoryFileReference getRepositoryFileReference(Path rootPath, Path path, DirectoryId directoryId) {\n        final Path relativePath = rootPath.relativize(path);\n        Path parent = relativePath.getParent();\n        if (parent == null) {\n            return new RepositoryFileReference(directoryId, path.getFileName().toString());\n        } else {\n            return new RepositoryFileReference(directoryId, parent, path.getFileName().toString());\n        }\n    }", "signature": "RepositoryFileReference getRepositoryFileReference(Path rootPath, Path path, DirectoryId directoryId)", "full_signature": "public static RepositoryFileReference getRepositoryFileReference(Path rootPath, Path path, DirectoryId directoryId)", "class_method_signature": "BackendUtils.getRepositoryFileReference(Path rootPath, Path path, DirectoryId directoryId)", "testcase": false, "constructor": false, "invocations": ["relativize", "getParent", "toString", "getFileName", "toString", "getFileName"]}, "repository": {"repo_id": 42622157, "url": "https://github.com/eclipse/winery", "stars": 34, "created": "9/17/2015 12:31:44 AM +00:00", "updates": "2020-01-22T09:32:00+00:00", "fork": "False", "license": "licensed"}}