{"test_class": {"identifier": "NumberFunctionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private NumberFunction numberFunction;", "modifier": "private", "type": "NumberFunction", "declarator": "numberFunction", "var_name": "numberFunction"}], "file": "kie-dmn/kie-dmn-feel/src/test/java/org/kie/dmn/feel/runtime/functions/NumberFunctionTest.java"}, "test_case": {"identifier": "invokeNumberWithLeadingZeros", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void invokeNumberWithLeadingZeros() {\n        FunctionTestUtil.assertResult(numberFunction.invoke(\"009876\", null, null), BigDecimal.valueOf(9876));\n    }", "signature": "void invokeNumberWithLeadingZeros()", "full_signature": "@Test public void invokeNumberWithLeadingZeros()", "class_method_signature": "NumberFunctionTest.invokeNumberWithLeadingZeros()", "testcase": true, "constructor": false, "invocations": ["assertResult", "invoke", "valueOf"]}, "focal_class": {"identifier": "NumberFunction", "superclass": "extends BaseFEELFunction", "interfaces": "", "fields": [], "methods": [{"identifier": "NumberFunction", "parameters": "()", "modifiers": "public", "return": "", "signature": " NumberFunction()", "full_signature": "public  NumberFunction()", "class_method_signature": "NumberFunction.NumberFunction()", "testcase": false, "constructor": true}, {"identifier": "invoke", "parameters": "(@ParameterName(\"from\") String from, @ParameterName(\"grouping separator\") String group, @ParameterName(\"decimal separator\") String decimal)", "modifiers": "public", "return": "FEELFnResult<BigDecimal>", "signature": "FEELFnResult<BigDecimal> invoke(@ParameterName(\"from\") String from, @ParameterName(\"grouping separator\") String group, @ParameterName(\"decimal separator\") String decimal)", "full_signature": "public FEELFnResult<BigDecimal> invoke(@ParameterName(\"from\") String from, @ParameterName(\"grouping separator\") String group, @ParameterName(\"decimal separator\") String decimal)", "class_method_signature": "NumberFunction.invoke(@ParameterName(\"from\") String from, @ParameterName(\"grouping separator\") String group, @ParameterName(\"decimal separator\") String decimal)", "testcase": false, "constructor": false}], "file": "kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/runtime/functions/NumberFunction.java"}, "focal_method": {"identifier": "invoke", "parameters": "(@ParameterName(\"from\") String from, @ParameterName(\"grouping separator\") String group, @ParameterName(\"decimal separator\") String decimal)", "modifiers": "public", "return": "FEELFnResult<BigDecimal>", "body": "public FEELFnResult<BigDecimal> invoke(@ParameterName(\"from\") String from, @ParameterName(\"grouping separator\") String group, @ParameterName(\"decimal separator\") String decimal) {\n        if ( from == null ) {\n            return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"from\", \"cannot be null\"));\n        }\n        if ( group != null && !group.equals( \" \" ) && !group.equals( \".\" ) && !group.equals( \",\" ) ) {\n            return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"group\", \"not a valid one, can only be one of: dot ('.'), comma (','), space (' ') \"));\n        }\n        if ( decimal != null ) {\n            if (!decimal.equals( \".\" ) && !decimal.equals( \",\" )) {\n                return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"decimal\", \"not a valid one, can only be one of: dot ('.'), comma (',') \"));\n            } else if (group != null && decimal.equals( group )) {\n                return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"decimal\", \"cannot be the same as parameter 'group' \"));\n            }\n        }\n        \n        if ( group != null ) {\n            from = from.replaceAll( \"\\\\\" + group, \"\" );\n        }\n        if ( decimal != null ) {\n            from = from.replaceAll( \"\\\\\" + decimal, \".\" );\n        }\n\n        BigDecimal result = EvalHelper.getBigDecimalOrNull( from );\n        if( from != null && result == null ) {\n            // conversion failed\n            return FEELFnResult.ofError( new InvalidParametersEvent(Severity.ERROR, \"unable to calculate final number result\" ) );\n        } else {\n            return FEELFnResult.ofResult( result );\n        }\n    }", "signature": "FEELFnResult<BigDecimal> invoke(@ParameterName(\"from\") String from, @ParameterName(\"grouping separator\") String group, @ParameterName(\"decimal separator\") String decimal)", "full_signature": "public FEELFnResult<BigDecimal> invoke(@ParameterName(\"from\") String from, @ParameterName(\"grouping separator\") String group, @ParameterName(\"decimal separator\") String decimal)", "class_method_signature": "NumberFunction.invoke(@ParameterName(\"from\") String from, @ParameterName(\"grouping separator\") String group, @ParameterName(\"decimal separator\") String decimal)", "testcase": false, "constructor": false, "invocations": ["ofError", "equals", "equals", "equals", "ofError", "equals", "equals", "ofError", "equals", "ofError", "replaceAll", "replaceAll", "getBigDecimalOrNull", "ofError", "ofResult"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}