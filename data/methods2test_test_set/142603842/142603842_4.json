{"test_class": {"identifier": "RemoveVisitTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ScoreDirector<VehicleRoutingSolution> scoreDirector;", "modifier": "@Mock\n    private", "type": "ScoreDirector<VehicleRoutingSolution>", "declarator": "scoreDirector", "var_name": "scoreDirector"}], "file": "optaweb-vehicle-routing-backend/src/test/java/org/optaweb/vehiclerouting/plugin/planner/change/RemoveVisitTest.java"}, "test_case": {"identifier": "remove_last_visit", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void remove_last_visit() {\n        VehicleRoutingSolution solution = SolutionFactory.emptySolution();\n        when(scoreDirector.getWorkingSolution()).thenReturn(solution);\n\n        PlanningVisit removedVisit = testVisit(1);\n        PlanningVisit otherVisit = testVisit(2);\n        solution.getVisitList().add(otherVisit);\n        solution.getVisitList().add(removedVisit);\n\n        // V -> other -> removed\n        otherVisit.setPreviousStandstill(testVehicle(10));\n        otherVisit.setNextVisit(removedVisit);\n        removedVisit.setPreviousStandstill(otherVisit);\n\n        when(scoreDirector.lookUpWorkingObject(removedVisit)).thenReturn(removedVisit);\n\n        // do change\n        RemoveVisit removeVisit = new RemoveVisit(removedVisit);\n        removeVisit.doChange(scoreDirector);\n\n        verify(scoreDirector).beforeEntityRemoved(removedVisit);\n        verify(scoreDirector).afterEntityRemoved(removedVisit);\n        assertThat(solution.getVisitList()).containsExactly(otherVisit);\n\n        verify(scoreDirector).triggerVariableListeners();\n    }", "signature": "void remove_last_visit()", "full_signature": "@Test void remove_last_visit()", "class_method_signature": "RemoveVisitTest.remove_last_visit()", "testcase": true, "constructor": false, "invocations": ["emptySolution", "thenReturn", "when", "getWorkingSolution", "testVisit", "testVisit", "add", "getVisitList", "add", "getVisitList", "setPreviousStandstill", "testVehicle", "setNextVisit", "setPreviousStandstill", "thenReturn", "when", "lookUpWorkingObject", "doChange", "beforeEntityRemoved", "verify", "afterEntityRemoved", "verify", "containsExactly", "assertThat", "getVisitList", "triggerVariableListeners", "verify"]}, "focal_class": {"identifier": "RemoveVisit", "superclass": "", "interfaces": "implements ProblemFactChange<VehicleRoutingSolution>", "fields": [{"original_string": "private final PlanningVisit planningVisit;", "modifier": "private final", "type": "PlanningVisit", "declarator": "planningVisit", "var_name": "planningVisit"}], "methods": [{"identifier": "RemoveVisit", "parameters": "(PlanningVisit planningVisit)", "modifiers": "public", "return": "", "signature": " RemoveVisit(PlanningVisit planningVisit)", "full_signature": "public  RemoveVisit(PlanningVisit planningVisit)", "class_method_signature": "RemoveVisit.RemoveVisit(PlanningVisit planningVisit)", "testcase": false, "constructor": true}, {"identifier": "doChange", "parameters": "(ScoreDirector<VehicleRoutingSolution> scoreDirector)", "modifiers": "@Override public", "return": "void", "signature": "void doChange(ScoreDirector<VehicleRoutingSolution> scoreDirector)", "full_signature": "@Override public void doChange(ScoreDirector<VehicleRoutingSolution> scoreDirector)", "class_method_signature": "RemoveVisit.doChange(ScoreDirector<VehicleRoutingSolution> scoreDirector)", "testcase": false, "constructor": false}], "file": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/planner/change/RemoveVisit.java"}, "focal_method": {"identifier": "doChange", "parameters": "(ScoreDirector<VehicleRoutingSolution> scoreDirector)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void doChange(ScoreDirector<VehicleRoutingSolution> scoreDirector) {\n        VehicleRoutingSolution workingSolution = scoreDirector.getWorkingSolution();\n\n        // Look up a working copy of the visit\n        PlanningVisit workingVisit = scoreDirector.lookUpWorkingObject(planningVisit);\n        if (workingVisit == null) {\n            throw new IllegalStateException(\"Can't look up a working copy of \" + planningVisit);\n        }\n\n        // Fix the next visit and set its previousStandstill to the removed visit's previousStandstill\n        PlanningVisit nextVisit = workingVisit.getNextVisit();\n        if (nextVisit != null) { // otherwise it's the last visit\n            scoreDirector.beforeVariableChanged(nextVisit, \"previousStandstill\");\n            nextVisit.setPreviousStandstill(workingVisit.getPreviousStandstill());\n            scoreDirector.afterVariableChanged(nextVisit, \"previousStandstill\");\n        }\n\n        // No need to clone the visitList because it is a planning entity collection, so it is already planning-cloned.\n        // To learn more about problem fact changes, see:\n        // https://docs.jboss.org/optaplanner/release/latest/optaplanner-docs/html_single/#problemFactChangeExample\n\n        // Remove the visit\n        scoreDirector.beforeEntityRemoved(workingVisit);\n        if (!workingSolution.getVisitList().remove(workingVisit)) {\n            throw new IllegalStateException(\n                    \"Working solution's visitList \"\n                            + workingSolution.getVisitList()\n                            + \" doesn't contain the workingVisit (\"\n                            + workingVisit\n                            + \"). This is a bug!\");\n        }\n        scoreDirector.afterEntityRemoved(workingVisit);\n\n        scoreDirector.triggerVariableListeners();\n    }", "signature": "void doChange(ScoreDirector<VehicleRoutingSolution> scoreDirector)", "full_signature": "@Override public void doChange(ScoreDirector<VehicleRoutingSolution> scoreDirector)", "class_method_signature": "RemoveVisit.doChange(ScoreDirector<VehicleRoutingSolution> scoreDirector)", "testcase": false, "constructor": false, "invocations": ["getWorkingSolution", "lookUpWorkingObject", "getNextVisit", "beforeVariableChanged", "setPreviousStandstill", "getPreviousStandstill", "afterVariableChanged", "beforeEntityRemoved", "remove", "getVisitList", "getVisitList", "afterEntityRemoved", "triggerVariableListeners"]}, "repository": {"repo_id": 142603842, "url": "https://github.com/kiegroup/optaweb-vehicle-routing", "stars": 42, "created": "7/27/2018 5:08:08 PM +00:00", "updates": "2020-01-27T22:19:48+00:00", "fork": "False", "license": "licensed"}}