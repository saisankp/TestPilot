{"test_class": {"identifier": "OpenTSDBWithStormQuerierTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String TEST_QUERY_API_PATH = \"/api/query\";", "modifier": "private final", "type": "String", "declarator": "TEST_QUERY_API_PATH = \"/api/query\"", "var_name": "TEST_QUERY_API_PATH"}, {"original_string": "@Rule\n    public WireMockRule wireMockRule = new WireMockRule(18089);", "modifier": "@Rule\n    public", "type": "WireMockRule", "declarator": "wireMockRule = new WireMockRule(18089)", "var_name": "wireMockRule"}, {"original_string": "private OpenTSDBWithStormQuerier querier;", "modifier": "private", "type": "OpenTSDBWithStormQuerier", "declarator": "querier", "var_name": "querier"}], "file": "streams/runners/storm/metrics/src/test/java/com/hortonworks/streamline/streams/metrics/storm/opentsdb/OpenTSDBWithStormQuerierTest.java"}, "test_case": {"identifier": "getRawMetrics", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getRawMetrics() throws Exception {\n        stubMetricUrl();\n\n        String metricName = \"sum:sys.cpu.user[host=web01]\";\n        String parameters = \"\";\n        long from = 1234L;\n        long to = 5678L;\n\n        Map<String, Map<Long, Double>> metrics = querier.getRawMetrics(metricName, parameters, from, to);\n        assertResult(metrics.get(\"sys.cpu.user[host=web01]\"));\n\n        verify(getRequestedFor(urlPathEqualTo(TEST_QUERY_API_PATH))\n                .withQueryParam(\"m\", equalTo(\"sum:sys.cpu.user[host=web01]\"))\n                .withQueryParam(\"start\", equalTo(\"1234\"))\n                .withQueryParam(\"end\", equalTo(\"5678\")));\n    }", "signature": "void getRawMetrics()", "full_signature": "@Test public void getRawMetrics()", "class_method_signature": "OpenTSDBWithStormQuerierTest.getRawMetrics()", "testcase": true, "constructor": false, "invocations": ["stubMetricUrl", "getRawMetrics", "assertResult", "get", "verify", "withQueryParam", "withQueryParam", "withQueryParam", "getRequestedFor", "urlPathEqualTo", "equalTo", "equalTo", "equalTo"]}, "focal_class": {"identifier": "OpenTSDBWithStormQuerier", "superclass": "extends AbstractTimeSeriesQuerier", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(OpenTSDBWithStormQuerier.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(OpenTSDBWithStormQuerier.class)", "var_name": "log"}, {"original_string": "public static final String QUERY_API_URL = \"queryApiUrl\";", "modifier": "public static final", "type": "String", "declarator": "QUERY_API_URL = \"queryApiUrl\"", "var_name": "QUERY_API_URL"}, {"original_string": "private Client client;", "modifier": "private", "type": "Client", "declarator": "client", "var_name": "client"}, {"original_string": "private URI queryApiUri;", "modifier": "private", "type": "URI", "declarator": "queryApiUri", "var_name": "queryApiUri"}], "methods": [{"identifier": "init", "parameters": "(Map<String, String> conf)", "modifiers": "@Override public", "return": "void", "signature": "void init(Map<String, String> conf)", "full_signature": "@Override public void init(Map<String, String> conf)", "class_method_signature": "OpenTSDBWithStormQuerier.init(Map<String, String> conf)", "testcase": false, "constructor": false}, {"identifier": "getTopologyLevelMetrics", "parameters": "(String topologyName, String metricName, AggregateFunction aggrFunction, long from, long to)", "modifiers": "@Override public", "return": "Map<Long, Double>", "signature": "Map<Long, Double> getTopologyLevelMetrics(String topologyName, String metricName, AggregateFunction aggrFunction, long from, long to)", "full_signature": "@Override public Map<Long, Double> getTopologyLevelMetrics(String topologyName, String metricName, AggregateFunction aggrFunction, long from, long to)", "class_method_signature": "OpenTSDBWithStormQuerier.getTopologyLevelMetrics(String topologyName, String metricName, AggregateFunction aggrFunction, long from, long to)", "testcase": false, "constructor": false}, {"identifier": "getMetrics", "parameters": "(String topologyName, String componentId, String metricName, AggregateFunction aggrFunction, long from, long to)", "modifiers": "@Override public", "return": "Map<Long, Double>", "signature": "Map<Long, Double> getMetrics(String topologyName, String componentId, String metricName, AggregateFunction aggrFunction, long from, long to)", "full_signature": "@Override public Map<Long, Double> getMetrics(String topologyName, String componentId, String metricName, AggregateFunction aggrFunction, long from, long to)", "class_method_signature": "OpenTSDBWithStormQuerier.getMetrics(String topologyName, String componentId, String metricName, AggregateFunction aggrFunction, long from, long to)", "testcase": false, "constructor": false}, {"identifier": "getRawMetrics", "parameters": "(String metricName, String parameters, long from, long to)", "modifiers": "@Override public", "return": "Map<String, Map<Long, Double>>", "signature": "Map<String, Map<Long, Double>> getRawMetrics(String metricName, String parameters, long from, long to)", "full_signature": "@Override public Map<String, Map<Long, Double>> getRawMetrics(String metricName, String parameters, long from, long to)", "class_method_signature": "OpenTSDBWithStormQuerier.getRawMetrics(String metricName, String parameters, long from, long to)", "testcase": false, "constructor": false}, {"identifier": "composeRawQueryParameters", "parameters": "(String metricName, Map<String, String> queryParams, long from, long to)", "modifiers": "private", "return": "URI", "signature": "URI composeRawQueryParameters(String metricName, Map<String, String> queryParams, long from, long to)", "full_signature": "private URI composeRawQueryParameters(String metricName, Map<String, String> queryParams, long from, long to)", "class_method_signature": "OpenTSDBWithStormQuerier.composeRawQueryParameters(String metricName, Map<String, String> queryParams, long from, long to)", "testcase": false, "constructor": false}, {"identifier": "buildMetricNameFromResp", "parameters": "(Map<String, ?> responseMap)", "modifiers": "private", "return": "String", "signature": "String buildMetricNameFromResp(Map<String, ?> responseMap)", "full_signature": "private String buildMetricNameFromResp(Map<String, ?> responseMap)", "class_method_signature": "OpenTSDBWithStormQuerier.buildMetricNameFromResp(Map<String, ?> responseMap)", "testcase": false, "constructor": false}], "file": "streams/runners/storm/metrics/src/main/java/com/hortonworks/streamline/streams/metrics/storm/opentsdb/OpenTSDBWithStormQuerier.java"}, "focal_method": {"identifier": "getRawMetrics", "parameters": "(String metricName, String parameters, long from, long to)", "modifiers": "@Override public", "return": "Map<String, Map<Long, Double>>", "body": "@Override\n    public Map<String, Map<Long, Double>> getRawMetrics(String metricName, String parameters, long from, long to) {\n        Map<String, String> queryParams = parseParameters(parameters);\n        URI targetUri = composeRawQueryParameters(metricName, queryParams, from, to);\n\n        log.debug(\"Calling {} for querying metric\", targetUri.toString());\n\n        List<Map<String, ?>> responseList = JsonClientUtil.getEntity(client.target(targetUri), List.class);\n        if (responseList.isEmpty()) {\n            return Collections.emptyMap();\n        }\n\n        Map<String, Map<Long, Double>> ret = new HashMap<>(responseList.size());\n        for (Map<String, ?> responseMap : responseList) {\n            String retrievedMetricName = buildMetricNameFromResp(responseMap);\n            Map<String, Number> retrievedPoints = (Map<String, Number>) responseMap.get(\"dps\");\n\n            Map<Long, Double> pointsForOutput;\n            if (retrievedPoints == null || retrievedPoints.isEmpty()) {\n                pointsForOutput = Collections.emptyMap();\n            } else {\n                pointsForOutput = new HashMap<>(retrievedPoints.size());\n                for (Map.Entry<String, Number> timestampToValue : retrievedPoints.entrySet()) {\n                    pointsForOutput.put(Long.valueOf(timestampToValue.getKey()), timestampToValue.getValue().doubleValue());\n                }\n            }\n\n            ret.put(retrievedMetricName, pointsForOutput);\n        }\n        return ret;\n    }", "signature": "Map<String, Map<Long, Double>> getRawMetrics(String metricName, String parameters, long from, long to)", "full_signature": "@Override public Map<String, Map<Long, Double>> getRawMetrics(String metricName, String parameters, long from, long to)", "class_method_signature": "OpenTSDBWithStormQuerier.getRawMetrics(String metricName, String parameters, long from, long to)", "testcase": false, "constructor": false, "invocations": ["parseParameters", "composeRawQueryParameters", "debug", "toString", "getEntity", "target", "isEmpty", "emptyMap", "size", "buildMetricNameFromResp", "get", "isEmpty", "emptyMap", "size", "entrySet", "put", "valueOf", "getKey", "doubleValue", "getValue", "put"]}, "repository": {"repo_id": 35627039, "url": "https://github.com/hortonworks/streamline", "language": "Java", "is_fork": false, "fork_count": 94, "stargazer_count": 147, "size": 69226, "license": "licensed"}}