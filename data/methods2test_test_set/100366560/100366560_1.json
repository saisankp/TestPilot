{"test_class": {"identifier": "StringToJodaTimeBaseLocalConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "StringToJodaTimeBaseLocalConverter converter = new StringToJodaTimeBaseLocalConverter();", "modifier": "", "type": "StringToJodaTimeBaseLocalConverter", "declarator": "converter = new StringToJodaTimeBaseLocalConverter()", "var_name": "converter"}], "file": "beanmother-joda-time-converter/src/test/java/io/beanmother/joda/converter/StringToJodaTimeBaseLocalConverterTest.java"}, "test_case": {"identifier": "testConvertExceptionBySource", "parameters": "()", "modifiers": "@Test(expected = ConverterException.class) public", "return": "void", "body": "@Test(expected = ConverterException.class)\n    public void testConvertExceptionBySource() {\n        converter.convert(new Date(), TypeToken.of(LocalTime.class));\n    }", "signature": "void testConvertExceptionBySource()", "full_signature": "@Test(expected = ConverterException.class) public void testConvertExceptionBySource()", "class_method_signature": "StringToJodaTimeBaseLocalConverterTest.testConvertExceptionBySource()", "testcase": true, "constructor": false, "invocations": ["convert", "of"]}, "focal_class": {"identifier": "StringToJodaTimeBaseLocalConverter", "superclass": "extends AbstractConverter", "interfaces": "", "fields": [{"original_string": "private final static StringToDateConverter stringToDateConverter = new StringToDateConverter();", "modifier": "private final static", "type": "StringToDateConverter", "declarator": "stringToDateConverter = new StringToDateConverter()", "var_name": "stringToDateConverter"}, {"original_string": "private final static DateToJodaTimeBaseLocalConverter dateToJodaTimeBaseLocalConverter = new DateToJodaTimeBaseLocalConverter();", "modifier": "private final static", "type": "DateToJodaTimeBaseLocalConverter", "declarator": "dateToJodaTimeBaseLocalConverter = new DateToJodaTimeBaseLocalConverter()", "var_name": "dateToJodaTimeBaseLocalConverter"}], "methods": [{"identifier": "convert", "parameters": "(Object source, TypeToken<?> targetTypeToken)", "modifiers": "@Override public", "return": "Object", "signature": "Object convert(Object source, TypeToken<?> targetTypeToken)", "full_signature": "@Override public Object convert(Object source, TypeToken<?> targetTypeToken)", "class_method_signature": "StringToJodaTimeBaseLocalConverter.convert(Object source, TypeToken<?> targetTypeToken)", "testcase": false, "constructor": false}, {"identifier": "canHandle", "parameters": "(Object source, TypeToken<?> targetTypeToken)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canHandle(Object source, TypeToken<?> targetTypeToken)", "full_signature": "@Override public boolean canHandle(Object source, TypeToken<?> targetTypeToken)", "class_method_signature": "StringToJodaTimeBaseLocalConverter.canHandle(Object source, TypeToken<?> targetTypeToken)", "testcase": false, "constructor": false}], "file": "beanmother-joda-time-converter/src/main/java/io/beanmother/joda/converter/StringToJodaTimeBaseLocalConverter.java"}, "focal_method": {"identifier": "convert", "parameters": "(Object source, TypeToken<?> targetTypeToken)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object convert(Object source, TypeToken<?> targetTypeToken) {\n        if (!canHandle(source, targetTypeToken)) {\n            throw new ConverterException(source, targetTypeToken.getRawType());\n        }\n\n        Date date = stringToDateConverter.convert(String.valueOf(source));\n        return dateToJodaTimeBaseLocalConverter.convert(date, targetTypeToken);\n    }", "signature": "Object convert(Object source, TypeToken<?> targetTypeToken)", "full_signature": "@Override public Object convert(Object source, TypeToken<?> targetTypeToken)", "class_method_signature": "StringToJodaTimeBaseLocalConverter.convert(Object source, TypeToken<?> targetTypeToken)", "testcase": false, "constructor": false, "invocations": ["canHandle", "getRawType", "convert", "valueOf", "convert"]}, "repository": {"repo_id": 100366560, "url": "https://github.com/keepcosmos/beanmother", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 95, "size": 688, "license": "licensed"}}