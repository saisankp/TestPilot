{"test_class": {"identifier": "JdbcAccessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final double[][] D0 = {{1.2, 2.3}};", "modifier": "static final", "type": "double[][]", "declarator": "D0 = {{1.2, 2.3}}", "var_name": "D0"}, {"original_string": "static final double[][] D2 = {{1.2, 2.3}, {3.4, 4.5}, {5.6, 6.7}, {7.8, 8.9}};", "modifier": "static final", "type": "double[][]", "declarator": "D2 = {{1.2, 2.3}, {3.4, 4.5}, {5.6, 6.7}, {7.8, 8.9}}", "var_name": "D2"}, {"original_string": "static JdbcAccessor A0;", "modifier": "static", "type": "JdbcAccessor", "declarator": "A0", "var_name": "A0"}, {"original_string": "static JdbcAccessor A2;", "modifier": "static", "type": "JdbcAccessor", "declarator": "A2", "var_name": "A2"}], "file": "jdbcprovider/src/test/java/ec/tss/tsproviders/jdbc/JdbcAccessorTest.java"}, "test_case": {"identifier": "testCache", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCache() throws Exception {\n        JdbcBean b2c1 = mydbTwoDimsBean();\n        b2c1.setCacheDepth(1);\n        DbAccessor a2c1 = new JdbcAccessor(NOP_LOGGER, b2c1, mydbConnectionSupplier()).memoize();\n        DbSeries a2c1_first = a2c1.getSeriesWithData(\"Industry\", \"Belgium\");\n        DbSeries a2c1_second = a2c1.getSeriesWithData(\"Industry\", \"Belgium\");\n\n        assertEquals(a2c1_first, a2c1_second);\n        assertSame(a2c1_first, a2c1_second);\n\n        JdbcBean b2c2 = mydbTwoDimsBean();\n        b2c2.setCacheDepth(2);\n        DbAccessor a2c2 = new JdbcAccessor(NOP_LOGGER, b2c2, mydbConnectionSupplier()).memoize();\n        DbSeries a2c2_first = a2c2.getSeriesWithData(\"Industry\", \"Belgium\");\n        DbSeries a2c2_second = a2c2.getSeriesWithData(\"Industry\", \"Belgium\");\n\n        assertEquals(a2c2_first, a2c2_second);\n        assertSame(a2c2_first, a2c2_second);\n\n        assertEquals(a2c1_first, a2c2_first);\n        assertNotSame(a2c1_first, a2c2_first);\n    }", "signature": "void testCache()", "full_signature": "@Test public void testCache()", "class_method_signature": "JdbcAccessorTest.testCache()", "testcase": true, "constructor": false, "invocations": ["mydbTwoDimsBean", "setCacheDepth", "memoize", "mydbConnectionSupplier", "getSeriesWithData", "getSeriesWithData", "assertEquals", "assertSame", "mydbTwoDimsBean", "setCacheDepth", "memoize", "mydbConnectionSupplier", "getSeriesWithData", "getSeriesWithData", "assertEquals", "assertSame", "assertEquals", "assertNotSame"]}, "focal_class": {"identifier": "JdbcAccessor", "superclass": "extends DbAccessor.Commander<BEAN>", "interfaces": "", "fields": [{"original_string": "protected final Logger logger;", "modifier": "protected final", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "protected final ConnectionSupplier supplier;", "modifier": "protected final", "type": "ConnectionSupplier", "declarator": "supplier", "var_name": "supplier"}], "methods": [{"identifier": "JdbcAccessor", "parameters": "(@NonNull Logger logger, @NonNull BEAN dbBean, @NonNull ConnectionSupplier supplier)", "modifiers": "public", "return": "", "signature": " JdbcAccessor(@NonNull Logger logger, @NonNull BEAN dbBean, @NonNull ConnectionSupplier supplier)", "full_signature": "public  JdbcAccessor(@NonNull Logger logger, @NonNull BEAN dbBean, @NonNull ConnectionSupplier supplier)", "class_method_signature": "JdbcAccessor.JdbcAccessor(@NonNull Logger logger, @NonNull BEAN dbBean, @NonNull ConnectionSupplier supplier)", "testcase": false, "constructor": true}, {"identifier": "testDbBean", "parameters": "()", "modifiers": "@Override public", "return": "Exception", "signature": "Exception testDbBean()", "full_signature": "@Override public Exception testDbBean()", "class_method_signature": "JdbcAccessor.testDbBean()", "testcase": false, "constructor": false}, {"identifier": "getChildFunc", "parameters": "(@NonNull ResultSetMetaData metaData, int columnIndex)", "modifiers": "@NonNull protected", "return": "ResultSetFunc<String>", "signature": "ResultSetFunc<String> getChildFunc(@NonNull ResultSetMetaData metaData, int columnIndex)", "full_signature": "@NonNull protected ResultSetFunc<String> getChildFunc(@NonNull ResultSetMetaData metaData, int columnIndex)", "class_method_signature": "JdbcAccessor.getChildFunc(@NonNull ResultSetMetaData metaData, int columnIndex)", "testcase": false, "constructor": false}, {"identifier": "getDimValuesFunc", "parameters": "(@NonNull ResultSetMetaData metaData, int firstColumnIndex, int length)", "modifiers": "@NonNull protected", "return": "ResultSetFunc<String[]>", "signature": "ResultSetFunc<String[]> getDimValuesFunc(@NonNull ResultSetMetaData metaData, int firstColumnIndex, int length)", "full_signature": "@NonNull protected ResultSetFunc<String[]> getDimValuesFunc(@NonNull ResultSetMetaData metaData, int firstColumnIndex, int length)", "class_method_signature": "JdbcAccessor.getDimValuesFunc(@NonNull ResultSetMetaData metaData, int firstColumnIndex, int length)", "testcase": false, "constructor": false}, {"identifier": "getPeriodFunc", "parameters": "(@NonNull ResultSetMetaData metaData, int columnIndex)", "modifiers": "@NonNull protected", "return": "ResultSetFunc<java.util.Date>", "signature": "ResultSetFunc<java.util.Date> getPeriodFunc(@NonNull ResultSetMetaData metaData, int columnIndex)", "full_signature": "@NonNull protected ResultSetFunc<java.util.Date> getPeriodFunc(@NonNull ResultSetMetaData metaData, int columnIndex)", "class_method_signature": "JdbcAccessor.getPeriodFunc(@NonNull ResultSetMetaData metaData, int columnIndex)", "testcase": false, "constructor": false}, {"identifier": "getValueFunc", "parameters": "(@NonNull ResultSetMetaData metaData, int columnIndex)", "modifiers": "@NonNull protected", "return": "ResultSetFunc<Number>", "signature": "ResultSetFunc<Number> getValueFunc(@NonNull ResultSetMetaData metaData, int columnIndex)", "full_signature": "@NonNull protected ResultSetFunc<Number> getValueFunc(@NonNull ResultSetMetaData metaData, int columnIndex)", "class_method_signature": "JdbcAccessor.getValueFunc(@NonNull ResultSetMetaData metaData, int columnIndex)", "testcase": false, "constructor": false}, {"identifier": "getAllSeriesQuery", "parameters": "(DbSetId ref)", "modifiers": "@Override protected", "return": "Callable<List<DbSetId>>", "signature": "Callable<List<DbSetId>> getAllSeriesQuery(DbSetId ref)", "full_signature": "@Override protected Callable<List<DbSetId>> getAllSeriesQuery(DbSetId ref)", "class_method_signature": "JdbcAccessor.getAllSeriesQuery(DbSetId ref)", "testcase": false, "constructor": false}, {"identifier": "getAllSeriesWithDataQuery", "parameters": "(DbSetId ref)", "modifiers": "@Override protected", "return": "Callable<List<DbSeries>>", "signature": "Callable<List<DbSeries>> getAllSeriesWithDataQuery(DbSetId ref)", "full_signature": "@Override protected Callable<List<DbSeries>> getAllSeriesWithDataQuery(DbSetId ref)", "class_method_signature": "JdbcAccessor.getAllSeriesWithDataQuery(DbSetId ref)", "testcase": false, "constructor": false}, {"identifier": "getSeriesWithDataQuery", "parameters": "(DbSetId ref)", "modifiers": "@Override protected", "return": "Callable<DbSeries>", "signature": "Callable<DbSeries> getSeriesWithDataQuery(DbSetId ref)", "full_signature": "@Override protected Callable<DbSeries> getSeriesWithDataQuery(DbSetId ref)", "class_method_signature": "JdbcAccessor.getSeriesWithDataQuery(DbSetId ref)", "testcase": false, "constructor": false}, {"identifier": "getChildrenQuery", "parameters": "(DbSetId ref)", "modifiers": "@Override protected", "return": "Callable<List<String>>", "signature": "Callable<List<String>> getChildrenQuery(DbSetId ref)", "full_signature": "@Override protected Callable<List<String>> getChildrenQuery(DbSetId ref)", "class_method_signature": "JdbcAccessor.getChildrenQuery(DbSetId ref)", "testcase": false, "constructor": false}, {"identifier": "memoize", "parameters": "()", "modifiers": "@Override public", "return": "DbAccessor<BEAN>", "signature": "DbAccessor<BEAN> memoize()", "full_signature": "@Override public DbAccessor<BEAN> memoize()", "class_method_signature": "JdbcAccessor.memoize()", "testcase": false, "constructor": false}], "file": "jdbcprovider/src/main/java/ec/tss/tsproviders/jdbc/JdbcAccessor.java"}, "focal_method": {"identifier": "memoize", "parameters": "()", "modifiers": "@Override public", "return": "DbAccessor<BEAN>", "body": "@Override\n    public DbAccessor<BEAN> memoize() {\n        Duration duration = Duration.ofMillis(dbBean.getCacheTtl());\n        return DbAccessor.BulkAccessor.from(this, dbBean.getCacheDepth(), GuavaCaches.ttlCache(duration));\n    }", "signature": "DbAccessor<BEAN> memoize()", "full_signature": "@Override public DbAccessor<BEAN> memoize()", "class_method_signature": "JdbcAccessor.memoize()", "testcase": false, "constructor": false, "invocations": ["ofMillis", "getCacheTtl", "from", "getCacheDepth", "ttlCache"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}