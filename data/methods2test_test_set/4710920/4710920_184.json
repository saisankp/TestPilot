{"test_class": {"identifier": "ExceptionFilterTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/filter/ExceptionFilterTest.java"}, "test_case": {"identifier": "testRuntimeException", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Test public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testRuntimeException() {\n\n        ExceptionFilter exceptionFilter = new ExceptionFilter();\n        RpcInvocation invocation = new RpcInvocation(\"sayHello\", DemoService.class.getName(), \"\", new Class<?>[]{String.class}, new Object[]{\"world\"});\n\n        AppResponse appResponse = new AppResponse();\n        appResponse.setException(new LocalException(\"localException\"));\n\n        Invoker<DemoService> invoker = mock(Invoker.class);\n        when(invoker.invoke(invocation)).thenReturn(appResponse);\n        when(invoker.getInterface()).thenReturn(DemoService.class);\n\n        Result newResult = exceptionFilter.invoke(invoker, invocation);\n\n        Assertions.assertEquals(appResponse.getException(), newResult.getException());\n\n    }", "signature": "void testRuntimeException()", "full_signature": "@SuppressWarnings(\"unchecked\") @Test public void testRuntimeException()", "class_method_signature": "ExceptionFilterTest.testRuntimeException()", "testcase": true, "constructor": false, "invocations": ["getName", "setException", "mock", "thenReturn", "when", "invoke", "thenReturn", "when", "getInterface", "invoke", "assertEquals", "getException", "getException"]}, "focal_class": {"identifier": "ExceptionFilter", "superclass": "", "interfaces": "implements Filter, Filter.Listener", "fields": [{"original_string": "private Logger logger = LoggerFactory.getLogger(ExceptionFilter.class);", "modifier": "private", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ExceptionFilter.class)", "var_name": "logger"}], "methods": [{"identifier": "invoke", "parameters": "(Invoker<?> invoker, Invocation invocation)", "modifiers": "@Override public", "return": "Result", "signature": "Result invoke(Invoker<?> invoker, Invocation invocation)", "full_signature": "@Override public Result invoke(Invoker<?> invoker, Invocation invocation)", "class_method_signature": "ExceptionFilter.invoke(Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "onResponse", "parameters": "(Result appResponse, Invoker<?> invoker, Invocation invocation)", "modifiers": "@Override public", "return": "void", "signature": "void onResponse(Result appResponse, Invoker<?> invoker, Invocation invocation)", "full_signature": "@Override public void onResponse(Result appResponse, Invoker<?> invoker, Invocation invocation)", "class_method_signature": "ExceptionFilter.onResponse(Result appResponse, Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(Throwable e, Invoker<?> invoker, Invocation invocation)", "modifiers": "@Override public", "return": "void", "signature": "void onError(Throwable e, Invoker<?> invoker, Invocation invocation)", "full_signature": "@Override public void onError(Throwable e, Invoker<?> invoker, Invocation invocation)", "class_method_signature": "ExceptionFilter.onError(Throwable e, Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "setLogger", "parameters": "(Logger logger)", "modifiers": "public", "return": "void", "signature": "void setLogger(Logger logger)", "full_signature": "public void setLogger(Logger logger)", "class_method_signature": "ExceptionFilter.setLogger(Logger logger)", "testcase": false, "constructor": false}], "file": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/ExceptionFilter.java"}, "focal_method": {"identifier": "invoke", "parameters": "(Invoker<?> invoker, Invocation invocation)", "modifiers": "@Override public", "return": "Result", "body": "@Override\n    public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {\n        return invoker.invoke(invocation);\n    }", "signature": "Result invoke(Invoker<?> invoker, Invocation invocation)", "full_signature": "@Override public Result invoke(Invoker<?> invoker, Invocation invocation)", "class_method_signature": "ExceptionFilter.invoke(Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false, "invocations": ["invoke"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}