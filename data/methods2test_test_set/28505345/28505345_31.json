{"test_class": {"identifier": "HttpUrlTest", "superclass": "", "interfaces": "", "fields": [], "file": "jus-java/src/test/java/io/apptik/comm/jus/http/HttpUrlTest.java"}, "test_case": {"identifier": "fromJavaNetUrlBadHost_checked", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void fromJavaNetUrlBadHost_checked() throws Exception {\n    try {\n      HttpUrl.getChecked(\"http://hostw ithspace/\");\n      fail();\n    } catch (UnknownHostException expected) {\n    }\n  }", "signature": "void fromJavaNetUrlBadHost_checked()", "full_signature": "@Test public void fromJavaNetUrlBadHost_checked()", "class_method_signature": "HttpUrlTest.fromJavaNetUrlBadHost_checked()", "testcase": true, "constructor": false, "invocations": ["getChecked", "fail"]}, "focal_class": {"identifier": "HttpUrl", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final char[] HEX_DIGITS =\n            {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};", "modifier": "private static final", "type": "char[]", "declarator": "HEX_DIGITS =\n            {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}", "var_name": "HEX_DIGITS"}, {"original_string": "static final String USERNAME_ENCODE_SET = \" \\\"':;<=>@[]^`{}|/\\\\?#\";", "modifier": "static final", "type": "String", "declarator": "USERNAME_ENCODE_SET = \" \\\"':;<=>@[]^`{}|/\\\\?#\"", "var_name": "USERNAME_ENCODE_SET"}, {"original_string": "static final String PASSWORD_ENCODE_SET = \" \\\"':;<=>@[]^`{}|/\\\\?#\";", "modifier": "static final", "type": "String", "declarator": "PASSWORD_ENCODE_SET = \" \\\"':;<=>@[]^`{}|/\\\\?#\"", "var_name": "PASSWORD_ENCODE_SET"}, {"original_string": "static final String PATH_SEGMENT_ENCODE_SET = \" \\\"<>^`{}|/\\\\?#\";", "modifier": "static final", "type": "String", "declarator": "PATH_SEGMENT_ENCODE_SET = \" \\\"<>^`{}|/\\\\?#\"", "var_name": "PATH_SEGMENT_ENCODE_SET"}, {"original_string": "static final String PATH_SEGMENT_ENCODE_SET_URI = \"[]\";", "modifier": "static final", "type": "String", "declarator": "PATH_SEGMENT_ENCODE_SET_URI = \"[]\"", "var_name": "PATH_SEGMENT_ENCODE_SET_URI"}, {"original_string": "static final String QUERY_ENCODE_SET = \" \\\"'<>#\";", "modifier": "static final", "type": "String", "declarator": "QUERY_ENCODE_SET = \" \\\"'<>#\"", "var_name": "QUERY_ENCODE_SET"}, {"original_string": "static final String QUERY_COMPONENT_ENCODE_SET = \" \\\"'<>#&=\";", "modifier": "static final", "type": "String", "declarator": "QUERY_COMPONENT_ENCODE_SET = \" \\\"'<>#&=\"", "var_name": "QUERY_COMPONENT_ENCODE_SET"}, {"original_string": "static final String QUERY_COMPONENT_ENCODE_SET_URI = \"\\\\^`{|}\";", "modifier": "static final", "type": "String", "declarator": "QUERY_COMPONENT_ENCODE_SET_URI = \"\\\\^`{|}\"", "var_name": "QUERY_COMPONENT_ENCODE_SET_URI"}, {"original_string": "static final String FORM_ENCODE_SET = \" \\\"':;<=>@[]^`{}|/\\\\?#&!$(),~\";", "modifier": "static final", "type": "String", "declarator": "FORM_ENCODE_SET = \" \\\"':;<=>@[]^`{}|/\\\\?#&!$(),~\"", "var_name": "FORM_ENCODE_SET"}, {"original_string": "static final String FRAGMENT_ENCODE_SET = \"\";", "modifier": "static final", "type": "String", "declarator": "FRAGMENT_ENCODE_SET = \"\"", "var_name": "FRAGMENT_ENCODE_SET"}, {"original_string": "static final String FRAGMENT_ENCODE_SET_URI = \" \\\"#<>\\\\^`{|}\";", "modifier": "static final", "type": "String", "declarator": "FRAGMENT_ENCODE_SET_URI = \" \\\"#<>\\\\^`{|}\"", "var_name": "FRAGMENT_ENCODE_SET_URI"}, {"original_string": "private final String scheme;", "modifier": "private final", "type": "String", "declarator": "scheme", "var_name": "scheme"}, {"original_string": "private final String username;", "modifier": "private final", "type": "String", "declarator": "username", "var_name": "username"}, {"original_string": "private final String password;", "modifier": "private final", "type": "String", "declarator": "password", "var_name": "password"}, {"original_string": "private final String host;", "modifier": "private final", "type": "String", "declarator": "host", "var_name": "host"}, {"original_string": "private final int port;", "modifier": "private final", "type": "int", "declarator": "port", "var_name": "port"}, {"original_string": "private final List<String> pathSegments;", "modifier": "private final", "type": "List<String>", "declarator": "pathSegments", "var_name": "pathSegments"}, {"original_string": "private final List<String> queryNamesAndValues;", "modifier": "private final", "type": "List<String>", "declarator": "queryNamesAndValues", "var_name": "queryNamesAndValues"}, {"original_string": "private final String fragment;", "modifier": "private final", "type": "String", "declarator": "fragment", "var_name": "fragment"}, {"original_string": "private final String url;", "modifier": "private final", "type": "String", "declarator": "url", "var_name": "url"}], "methods": [{"identifier": "HttpUrl", "parameters": "(Builder builder)", "modifiers": "private", "return": "", "signature": " HttpUrl(Builder builder)", "full_signature": "private  HttpUrl(Builder builder)", "class_method_signature": "HttpUrl.HttpUrl(Builder builder)", "testcase": false, "constructor": true}, {"identifier": "url", "parameters": "()", "modifiers": "public", "return": "URL", "signature": "URL url()", "full_signature": "public URL url()", "class_method_signature": "HttpUrl.url()", "testcase": false, "constructor": false}, {"identifier": "uri", "parameters": "()", "modifiers": "public", "return": "URI", "signature": "URI uri()", "full_signature": "public URI uri()", "class_method_signature": "HttpUrl.uri()", "testcase": false, "constructor": false}, {"identifier": "scheme", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String scheme()", "full_signature": "public String scheme()", "class_method_signature": "HttpUrl.scheme()", "testcase": false, "constructor": false}, {"identifier": "isHttps", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isHttps()", "full_signature": "public boolean isHttps()", "class_method_signature": "HttpUrl.isHttps()", "testcase": false, "constructor": false}, {"identifier": "encodedUsername", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String encodedUsername()", "full_signature": "public String encodedUsername()", "class_method_signature": "HttpUrl.encodedUsername()", "testcase": false, "constructor": false}, {"identifier": "username", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String username()", "full_signature": "public String username()", "class_method_signature": "HttpUrl.username()", "testcase": false, "constructor": false}, {"identifier": "encodedPassword", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String encodedPassword()", "full_signature": "public String encodedPassword()", "class_method_signature": "HttpUrl.encodedPassword()", "testcase": false, "constructor": false}, {"identifier": "password", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String password()", "full_signature": "public String password()", "class_method_signature": "HttpUrl.password()", "testcase": false, "constructor": false}, {"identifier": "host", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String host()", "full_signature": "public String host()", "class_method_signature": "HttpUrl.host()", "testcase": false, "constructor": false}, {"identifier": "port", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int port()", "full_signature": "public int port()", "class_method_signature": "HttpUrl.port()", "testcase": false, "constructor": false}, {"identifier": "defaultPort", "parameters": "(String scheme)", "modifiers": "public static", "return": "int", "signature": "int defaultPort(String scheme)", "full_signature": "public static int defaultPort(String scheme)", "class_method_signature": "HttpUrl.defaultPort(String scheme)", "testcase": false, "constructor": false}, {"identifier": "pathSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int pathSize()", "full_signature": "public int pathSize()", "class_method_signature": "HttpUrl.pathSize()", "testcase": false, "constructor": false}, {"identifier": "encodedPath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String encodedPath()", "full_signature": "public String encodedPath()", "class_method_signature": "HttpUrl.encodedPath()", "testcase": false, "constructor": false}, {"identifier": "pathSegmentsToString", "parameters": "(StringBuilder out, List<String> pathSegments)", "modifiers": "static", "return": "void", "signature": "void pathSegmentsToString(StringBuilder out, List<String> pathSegments)", "full_signature": "static void pathSegmentsToString(StringBuilder out, List<String> pathSegments)", "class_method_signature": "HttpUrl.pathSegmentsToString(StringBuilder out, List<String> pathSegments)", "testcase": false, "constructor": false}, {"identifier": "encodedPathSegments", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> encodedPathSegments()", "full_signature": "public List<String> encodedPathSegments()", "class_method_signature": "HttpUrl.encodedPathSegments()", "testcase": false, "constructor": false}, {"identifier": "pathSegments", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> pathSegments()", "full_signature": "public List<String> pathSegments()", "class_method_signature": "HttpUrl.pathSegments()", "testcase": false, "constructor": false}, {"identifier": "encodedQuery", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String encodedQuery()", "full_signature": "public String encodedQuery()", "class_method_signature": "HttpUrl.encodedQuery()", "testcase": false, "constructor": false}, {"identifier": "namesAndValuesToQueryString", "parameters": "(StringBuilder out, List<String> namesAndValues)", "modifiers": "static", "return": "void", "signature": "void namesAndValuesToQueryString(StringBuilder out, List<String> namesAndValues)", "full_signature": "static void namesAndValuesToQueryString(StringBuilder out, List<String> namesAndValues)", "class_method_signature": "HttpUrl.namesAndValuesToQueryString(StringBuilder out, List<String> namesAndValues)", "testcase": false, "constructor": false}, {"identifier": "queryStringToNamesAndValues", "parameters": "(String encodedQuery)", "modifiers": "static", "return": "List<String>", "signature": "List<String> queryStringToNamesAndValues(String encodedQuery)", "full_signature": "static List<String> queryStringToNamesAndValues(String encodedQuery)", "class_method_signature": "HttpUrl.queryStringToNamesAndValues(String encodedQuery)", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String query()", "full_signature": "public String query()", "class_method_signature": "HttpUrl.query()", "testcase": false, "constructor": false}, {"identifier": "querySize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int querySize()", "full_signature": "public int querySize()", "class_method_signature": "HttpUrl.querySize()", "testcase": false, "constructor": false}, {"identifier": "queryParameter", "parameters": "(String name)", "modifiers": "public", "return": "String", "signature": "String queryParameter(String name)", "full_signature": "public String queryParameter(String name)", "class_method_signature": "HttpUrl.queryParameter(String name)", "testcase": false, "constructor": false}, {"identifier": "queryParameterNames", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> queryParameterNames()", "full_signature": "public Set<String> queryParameterNames()", "class_method_signature": "HttpUrl.queryParameterNames()", "testcase": false, "constructor": false}, {"identifier": "queryParameterValues", "parameters": "(String name)", "modifiers": "public", "return": "List<String>", "signature": "List<String> queryParameterValues(String name)", "full_signature": "public List<String> queryParameterValues(String name)", "class_method_signature": "HttpUrl.queryParameterValues(String name)", "testcase": false, "constructor": false}, {"identifier": "queryParameterName", "parameters": "(int index)", "modifiers": "public", "return": "String", "signature": "String queryParameterName(int index)", "full_signature": "public String queryParameterName(int index)", "class_method_signature": "HttpUrl.queryParameterName(int index)", "testcase": false, "constructor": false}, {"identifier": "queryParameterValue", "parameters": "(int index)", "modifiers": "public", "return": "String", "signature": "String queryParameterValue(int index)", "full_signature": "public String queryParameterValue(int index)", "class_method_signature": "HttpUrl.queryParameterValue(int index)", "testcase": false, "constructor": false}, {"identifier": "encodedFragment", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String encodedFragment()", "full_signature": "public String encodedFragment()", "class_method_signature": "HttpUrl.encodedFragment()", "testcase": false, "constructor": false}, {"identifier": "fragment", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String fragment()", "full_signature": "public String fragment()", "class_method_signature": "HttpUrl.fragment()", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(String link)", "modifiers": "public", "return": "HttpUrl", "signature": "HttpUrl resolve(String link)", "full_signature": "public HttpUrl resolve(String link)", "class_method_signature": "HttpUrl.resolve(String link)", "testcase": false, "constructor": false}, {"identifier": "newBuilder", "parameters": "()", "modifiers": "public", "return": "Builder", "signature": "Builder newBuilder()", "full_signature": "public Builder newBuilder()", "class_method_signature": "HttpUrl.newBuilder()", "testcase": false, "constructor": false}, {"identifier": "newBuilder", "parameters": "(String link)", "modifiers": "public", "return": "Builder", "signature": "Builder newBuilder(String link)", "full_signature": "public Builder newBuilder(String link)", "class_method_signature": "HttpUrl.newBuilder(String link)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String url)", "modifiers": "public static", "return": "HttpUrl", "signature": "HttpUrl parse(String url)", "full_signature": "public static HttpUrl parse(String url)", "class_method_signature": "HttpUrl.parse(String url)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(URL url)", "modifiers": "public static", "return": "HttpUrl", "signature": "HttpUrl get(URL url)", "full_signature": "public static HttpUrl get(URL url)", "class_method_signature": "HttpUrl.get(URL url)", "testcase": false, "constructor": false}, {"identifier": "getChecked", "parameters": "(String url)", "modifiers": "static", "return": "HttpUrl", "signature": "HttpUrl getChecked(String url)", "full_signature": "static HttpUrl getChecked(String url)", "class_method_signature": "HttpUrl.getChecked(String url)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(URI uri)", "modifiers": "public static", "return": "HttpUrl", "signature": "HttpUrl get(URI uri)", "full_signature": "public static HttpUrl get(URI uri)", "class_method_signature": "HttpUrl.get(URI uri)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "HttpUrl.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "HttpUrl.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "HttpUrl.toString()", "testcase": false, "constructor": false}, {"identifier": "percentDecode", "parameters": "(String encoded, boolean plusIsSpace)", "modifiers": "static", "return": "String", "signature": "String percentDecode(String encoded, boolean plusIsSpace)", "full_signature": "static String percentDecode(String encoded, boolean plusIsSpace)", "class_method_signature": "HttpUrl.percentDecode(String encoded, boolean plusIsSpace)", "testcase": false, "constructor": false}, {"identifier": "percentDecode", "parameters": "(List<String> list, boolean plusIsSpace)", "modifiers": "private", "return": "List<String>", "signature": "List<String> percentDecode(List<String> list, boolean plusIsSpace)", "full_signature": "private List<String> percentDecode(List<String> list, boolean plusIsSpace)", "class_method_signature": "HttpUrl.percentDecode(List<String> list, boolean plusIsSpace)", "testcase": false, "constructor": false}, {"identifier": "percentDecode", "parameters": "(String encoded, int pos, int limit, boolean plusIsSpace)", "modifiers": "static", "return": "String", "signature": "String percentDecode(String encoded, int pos, int limit, boolean plusIsSpace)", "full_signature": "static String percentDecode(String encoded, int pos, int limit, boolean plusIsSpace)", "class_method_signature": "HttpUrl.percentDecode(String encoded, int pos, int limit, boolean plusIsSpace)", "testcase": false, "constructor": false}, {"identifier": "percentDecode", "parameters": "(Buffer out, String encoded, int pos, int limit, boolean plusIsSpace)", "modifiers": "static", "return": "void", "signature": "void percentDecode(Buffer out, String encoded, int pos, int limit, boolean plusIsSpace)", "full_signature": "static void percentDecode(Buffer out, String encoded, int pos, int limit, boolean plusIsSpace)", "class_method_signature": "HttpUrl.percentDecode(Buffer out, String encoded, int pos, int limit, boolean plusIsSpace)", "testcase": false, "constructor": false}, {"identifier": "percentEncoded", "parameters": "(String encoded, int pos, int limit)", "modifiers": "static", "return": "boolean", "signature": "boolean percentEncoded(String encoded, int pos, int limit)", "full_signature": "static boolean percentEncoded(String encoded, int pos, int limit)", "class_method_signature": "HttpUrl.percentEncoded(String encoded, int pos, int limit)", "testcase": false, "constructor": false}, {"identifier": "decodeHexDigit", "parameters": "(char c)", "modifiers": "static", "return": "int", "signature": "int decodeHexDigit(char c)", "full_signature": "static int decodeHexDigit(char c)", "class_method_signature": "HttpUrl.decodeHexDigit(char c)", "testcase": false, "constructor": false}, {"identifier": "canonicalize", "parameters": "(String input, int pos, int limit, String encodeSet,\n                               boolean alreadyEncoded, boolean strict, boolean plusIsSpace, boolean asciiOnly)", "modifiers": "static", "return": "String", "signature": "String canonicalize(String input, int pos, int limit, String encodeSet,\n                               boolean alreadyEncoded, boolean strict, boolean plusIsSpace, boolean asciiOnly)", "full_signature": "static String canonicalize(String input, int pos, int limit, String encodeSet,\n                               boolean alreadyEncoded, boolean strict, boolean plusIsSpace, boolean asciiOnly)", "class_method_signature": "HttpUrl.canonicalize(String input, int pos, int limit, String encodeSet,\n                               boolean alreadyEncoded, boolean strict, boolean plusIsSpace, boolean asciiOnly)", "testcase": false, "constructor": false}, {"identifier": "canonicalize", "parameters": "(Buffer out, String input, int pos, int limit, String encodeSet,\n                             boolean alreadyEncoded, boolean strict, boolean plusIsSpace, boolean asciiOnly)", "modifiers": "static", "return": "void", "signature": "void canonicalize(Buffer out, String input, int pos, int limit, String encodeSet,\n                             boolean alreadyEncoded, boolean strict, boolean plusIsSpace, boolean asciiOnly)", "full_signature": "static void canonicalize(Buffer out, String input, int pos, int limit, String encodeSet,\n                             boolean alreadyEncoded, boolean strict, boolean plusIsSpace, boolean asciiOnly)", "class_method_signature": "HttpUrl.canonicalize(Buffer out, String input, int pos, int limit, String encodeSet,\n                             boolean alreadyEncoded, boolean strict, boolean plusIsSpace, boolean asciiOnly)", "testcase": false, "constructor": false}, {"identifier": "canonicalize", "parameters": "(String input, String encodeSet, boolean alreadyEncoded, boolean strict,\n                               boolean plusIsSpace, boolean asciiOnly)", "modifiers": "static", "return": "String", "signature": "String canonicalize(String input, String encodeSet, boolean alreadyEncoded, boolean strict,\n                               boolean plusIsSpace, boolean asciiOnly)", "full_signature": "static String canonicalize(String input, String encodeSet, boolean alreadyEncoded, boolean strict,\n                               boolean plusIsSpace, boolean asciiOnly)", "class_method_signature": "HttpUrl.canonicalize(String input, String encodeSet, boolean alreadyEncoded, boolean strict,\n                               boolean plusIsSpace, boolean asciiOnly)", "testcase": false, "constructor": false}], "file": "jus-java/src/main/java/io/apptik/comm/jus/http/HttpUrl.java"}, "focal_method": {"identifier": "getChecked", "parameters": "(String url)", "modifiers": "static", "return": "HttpUrl", "body": "static HttpUrl getChecked(String url) throws MalformedURLException, UnknownHostException {\n        Builder builder = new Builder();\n        Builder.ParseResult result = builder.parse(null, url);\n        switch (result) {\n            case SUCCESS:\n                return builder.build();\n            case INVALID_HOST:\n                throw new UnknownHostException(\"Invalid host: \" + url);\n            case UNSUPPORTED_SCHEME:\n            case MISSING_SCHEME:\n            case INVALID_PORT:\n            default:\n                throw new MalformedURLException(\"Invalid URL: \" + result + \" for \" + url);\n        }\n    }", "signature": "HttpUrl getChecked(String url)", "full_signature": "static HttpUrl getChecked(String url)", "class_method_signature": "HttpUrl.getChecked(String url)", "testcase": false, "constructor": false, "invocations": ["parse", "build"]}, "repository": {"repo_id": 28505345, "url": "https://github.com/apptik/jus", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 56, "size": 2057, "license": "licensed"}}