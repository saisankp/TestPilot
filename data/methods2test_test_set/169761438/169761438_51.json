{"test_class": {"identifier": "AccountControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ACCOUNT_URL = \"/Account/\";", "modifier": "private static final", "type": "String", "declarator": "ACCOUNT_URL = \"/Account/\"", "var_name": "ACCOUNT_URL"}, {"original_string": "private static final String ACCOUNT_USER_URL = ACCOUNT_URL + \"/user\";", "modifier": "private static final", "type": "String", "declarator": "ACCOUNT_USER_URL = ACCOUNT_URL + \"/user\"", "var_name": "ACCOUNT_USER_URL"}, {"original_string": "private static final String ACCOUNT_APP_URL = ACCOUNT_URL + \"/app\";", "modifier": "private static final", "type": "String", "declarator": "ACCOUNT_APP_URL = ACCOUNT_URL + \"/app\"", "var_name": "ACCOUNT_APP_URL"}, {"original_string": "@Autowired\n\tprivate WebApplicationContext wac;", "modifier": "@Autowired\n\tprivate", "type": "WebApplicationContext", "declarator": "wac", "var_name": "wac"}, {"original_string": "@Autowired\n\tprivate Filter springSecurityFilterChain;", "modifier": "@Autowired\n\tprivate", "type": "Filter", "declarator": "springSecurityFilterChain", "var_name": "springSecurityFilterChain"}, {"original_string": "@Resource\n\tprivate DtoMapper dozerMapper;", "modifier": "@Resource\n\tprivate", "type": "DtoMapper", "declarator": "dozerMapper", "var_name": "dozerMapper"}, {"original_string": "@Resource\n\tprivate OadrUserService oadrUserService;", "modifier": "@Resource\n\tprivate", "type": "OadrUserService", "declarator": "oadrUserService", "var_name": "oadrUserService"}, {"original_string": "@Resource\n\tprivate OadrAppService oadrAppService;", "modifier": "@Resource\n\tprivate", "type": "OadrAppService", "declarator": "oadrAppService", "var_name": "oadrAppService"}, {"original_string": "private MockMvc mockMvc;", "modifier": "private", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "private ObjectMapper mapper = new ObjectMapper();", "modifier": "private", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}, {"original_string": "private OadrUser adminUser = null;", "modifier": "private", "type": "OadrUser", "declarator": "adminUser = null", "var_name": "adminUser"}, {"original_string": "private OadrApp appUser = null;", "modifier": "private", "type": "OadrApp", "declarator": "appUser = null", "var_name": "appUser"}, {"original_string": "private UserRequestPostProcessor admin = SecurityMockMvcRequestPostProcessors.user(\"admin\").roles(\"ADMIN\");", "modifier": "private", "type": "UserRequestPostProcessor", "declarator": "admin = SecurityMockMvcRequestPostProcessors.user(\"admin\").roles(\"ADMIN\")", "var_name": "admin"}, {"original_string": "private UserRequestPostProcessor app = SecurityMockMvcRequestPostProcessors.user(\"app\").roles(\"DEVICE_MANAGER\");", "modifier": "private", "type": "UserRequestPostProcessor", "declarator": "app = SecurityMockMvcRequestPostProcessors.user(\"app\").roles(\"DEVICE_MANAGER\")", "var_name": "app"}, {"original_string": "private UserRequestPostProcessor user = SecurityMockMvcRequestPostProcessors.user(\"user\").roles(\"USER\");", "modifier": "private", "type": "UserRequestPostProcessor", "declarator": "user = SecurityMockMvcRequestPostProcessors.user(\"user\").roles(\"USER\")", "var_name": "user"}, {"original_string": "private TypeReference<List<OadrAppDto>> appListRef = new TypeReference<List<OadrAppDto>>() {\n\t};", "modifier": "private", "type": "TypeReference<List<OadrAppDto>>", "declarator": "appListRef = new TypeReference<List<OadrAppDto>>() {\n\t}", "var_name": "appListRef"}, {"original_string": "private TypeReference<List<OadrUserDto>> userListRef = new TypeReference<List<OadrUserDto>>() {\n\t};", "modifier": "private", "type": "TypeReference<List<OadrUserDto>>", "declarator": "userListRef = new TypeReference<List<OadrUserDto>>() {\n\t}", "var_name": "userListRef"}], "file": "OpenADRServerVTNCommon/src/test/java/com/avob/openadr/server/common/vtn/controller/AccountControllerTest.java"}, "test_case": {"identifier": "createUserTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void createUserTest() throws Exception {\n\n\t\tOadrUserCreateDto dto = new OadrUserCreateDto();\n\t\tdto.setCommonName(\"admin\");\n\t\tdto.setUsername(\"admin\");\n\t\tdto.setAuthenticationType(\"login\");\n\t\tdto.setPassword(\"pass\");\n\t\tbyte[] content = mapper.writeValueAsBytes(dto);\n\t\t// no authorization\n\t\tthis.mockMvc\n\t\t\t\t.perform(MockMvcRequestBuilders.post(ACCOUNT_USER_URL).content(content)\n\t\t\t\t\t\t.header(\"Content-Type\", \"application/json\").with(user))\n\t\t\t\t.andExpect(MockMvcResultMatchers.status().is(HttpStatus.FORBIDDEN_403));\n\t\t// already created user\n\t\tthis.mockMvc\n\t\t\t\t.perform(MockMvcRequestBuilders.post(ACCOUNT_USER_URL).content(content)\n\t\t\t\t\t\t.header(\"Content-Type\", \"application/json\").with(admin))\n\t\t\t\t.andExpect(MockMvcResultMatchers.status().is(HttpStatus.NOT_ACCEPTABLE_406));\n\n\t\t// create login auth user no certificate gen\n\t\tdto = new OadrUserCreateDto();\n\t\tdto.setCommonName(\"myuser\");\n\t\tdto.setUsername(\"myuser\");\n\t\tdto.setAuthenticationType(\"login\");\n\t\tdto.setPassword(\"pass\");\n\t\tcontent = mapper.writeValueAsBytes(dto);\n\t\tMvcResult andReturn = this.mockMvc\n\t\t\t\t.perform(MockMvcRequestBuilders.post(ACCOUNT_USER_URL).content(content)\n\t\t\t\t\t\t.header(\"Content-Type\", \"application/json\").with(admin))\n\t\t\t\t.andExpect(MockMvcResultMatchers.status().is(HttpStatus.CREATED_201)).andReturn();\n\t\tassertEquals(0, andReturn.getResponse().getContentLength());\n\t\t// verify user has been created\n\t\tOadrUser findByUsername = oadrUserService.findByUsername(\"myuser\");\n\t\tassertNotNull(findByUsername);\n\t\toadrUserService.delete(findByUsername);\n\n\t\t// create x509 auth user no certificate gen\n\t\tdto = new OadrUserCreateDto();\n\t\tdto.setCommonName(\"myuser\");\n\t\tdto.setUsername(\"myuser\");\n\t\tdto.setAuthenticationType(\"x509\");\n\t\tcontent = mapper.writeValueAsBytes(dto);\n\t\tandReturn = this.mockMvc\n\t\t\t\t.perform(MockMvcRequestBuilders.post(ACCOUNT_USER_URL).content(content)\n\t\t\t\t\t\t.header(\"Content-Type\", \"application/json\").with(admin))\n\t\t\t\t.andExpect(MockMvcResultMatchers.status().is(HttpStatus.CREATED_201)).andReturn();\n\t\tassertEquals(0, andReturn.getResponse().getContentLength());\n\t\t// verify user has been created\n\t\tfindByUsername = oadrUserService.findByUsername(\"myuser\");\n\t\tassertNotNull(findByUsername);\n\t\toadrUserService.delete(findByUsername);\n\n\t\t// create x509 auth user rsa certificate gen\n\t\tdto = new OadrUserCreateDto();\n\t\tdto.setCommonName(\"myuser\");\n\t\tdto.setAuthenticationType(\"x509\");\n\t\tdto.setNeedCertificateGeneration(\"rsa\");\n\t\tcontent = mapper.writeValueAsBytes(dto);\n\t\tandReturn = this.mockMvc\n\t\t\t\t.perform(MockMvcRequestBuilders.post(ACCOUNT_USER_URL).content(content)\n\t\t\t\t\t\t.header(\"Content-Type\", \"application/json\").with(admin))\n\t\t\t\t.andExpect(MockMvcResultMatchers.status().is(HttpStatus.CREATED_201)).andReturn();\n\t\tassertNotEquals(0, andReturn.getResponse().getContentLength());\n\t\t// verify user has been created\n\t\tassertNotNull(andReturn.getResponse().getHeader(\"x-username\"));\n\t\tfindByUsername = oadrUserService.findByUsername(andReturn.getResponse().getHeader(\"x-username\"));\n\t\tassertNotNull(findByUsername);\n\t\toadrUserService.delete(findByUsername);\n\n\t\t// create x509 auth user ecc certificate gen\n\t\tdto = new OadrUserCreateDto();\n\t\tdto.setCommonName(\"myuser\");\n\t\tdto.setAuthenticationType(\"x509\");\n\t\tdto.setNeedCertificateGeneration(\"ecc\");\n\t\tcontent = mapper.writeValueAsBytes(dto);\n\t\tandReturn = this.mockMvc\n\t\t\t\t.perform(MockMvcRequestBuilders.post(ACCOUNT_USER_URL).content(content)\n\t\t\t\t\t\t.header(\"Content-Type\", \"application/json\").with(admin))\n\t\t\t\t.andExpect(MockMvcResultMatchers.status().is(HttpStatus.CREATED_201)).andReturn();\n\t\tassertNotEquals(0, andReturn.getResponse().getContentLength());\n\t\t// verify user has been created\n\t\tassertNotNull(andReturn.getResponse().getHeader(\"x-username\"));\n\t\tfindByUsername = oadrUserService.findByUsername(andReturn.getResponse().getHeader(\"x-username\"));\n\t\tassertNotNull(findByUsername);\n\t\toadrUserService.delete(findByUsername);\n\n\t}", "signature": "void createUserTest()", "full_signature": "@Test public void createUserTest()", "class_method_signature": "AccountControllerTest.createUserTest()", "testcase": true, "constructor": false, "invocations": ["setCommonName", "setUsername", "setAuthenticationType", "setPassword", "writeValueAsBytes", "andExpect", "perform", "with", "header", "content", "post", "is", "status", "andExpect", "perform", "with", "header", "content", "post", "is", "status", "setCommonName", "setUsername", "setAuthenticationType", "setPassword", "writeValueAsBytes", "andReturn", "andExpect", "perform", "with", "header", "content", "post", "is", "status", "assertEquals", "getContentLength", "getResponse", "findByUsername", "assertNotNull", "delete", "setCommonName", "setUsername", "setAuthenticationType", "writeValueAsBytes", "andReturn", "andExpect", "perform", "with", "header", "content", "post", "is", "status", "assertEquals", "getContentLength", "getResponse", "findByUsername", "assertNotNull", "delete", "setCommonName", "setAuthenticationType", "setNeedCertificateGeneration", "writeValueAsBytes", "andReturn", "andExpect", "perform", "with", "header", "content", "post", "is", "status", "assertNotEquals", "getContentLength", "getResponse", "assertNotNull", "getHeader", "getResponse", "findByUsername", "getHeader", "getResponse", "assertNotNull", "delete", "setCommonName", "setAuthenticationType", "setNeedCertificateGeneration", "writeValueAsBytes", "andReturn", "andExpect", "perform", "with", "header", "content", "post", "is", "status", "assertNotEquals", "getContentLength", "getResponse", "assertNotNull", "getHeader", "getResponse", "findByUsername", "getHeader", "getResponse", "assertNotNull", "delete"]}, "focal_class": {"identifier": "AccountController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final MediaType OCTET_STREAM_MEDIA_TYPE = MediaType.parseMediaType(\"application/octet-stream\");", "modifier": "private static final", "type": "MediaType", "declarator": "OCTET_STREAM_MEDIA_TYPE = MediaType.parseMediaType(\"application/octet-stream\")", "var_name": "OCTET_STREAM_MEDIA_TYPE"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(AccountController.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(AccountController.class)", "var_name": "LOGGER"}, {"original_string": "@Resource\n\tprivate DtoMapper dtoMapper;", "modifier": "@Resource\n\tprivate", "type": "DtoMapper", "declarator": "dtoMapper", "var_name": "dtoMapper"}, {"original_string": "@Resource\n\tprivate AbstractUserDao abstractUserDao;", "modifier": "@Resource\n\tprivate", "type": "AbstractUserDao", "declarator": "abstractUserDao", "var_name": "abstractUserDao"}, {"original_string": "@Resource\n\tprivate OadrUserService oadrUserService;", "modifier": "@Resource\n\tprivate", "type": "OadrUserService", "declarator": "oadrUserService", "var_name": "oadrUserService"}, {"original_string": "@Resource\n\tprivate OadrAppService oadrAppService;", "modifier": "@Resource\n\tprivate", "type": "OadrAppService", "declarator": "oadrAppService", "var_name": "oadrAppService"}], "methods": [{"identifier": "registeredUser", "parameters": "(Principal principal)", "modifiers": "@RequestMapping(value = \"/\", method = RequestMethod.GET) @ResponseBody @PreAuthorize(\"hasRole('ROLE_ADMIN') or hasRole('ROLE_DEVICE_MANAGER') or hasRole('ROLE_DRPROGRAM')\") public", "return": "AbstractUserWithRoleDto", "signature": "AbstractUserWithRoleDto registeredUser(Principal principal)", "full_signature": "@RequestMapping(value = \"/\", method = RequestMethod.GET) @ResponseBody @PreAuthorize(\"hasRole('ROLE_ADMIN') or hasRole('ROLE_DEVICE_MANAGER') or hasRole('ROLE_DRPROGRAM')\") public AbstractUserWithRoleDto registeredUser(Principal principal)", "class_method_signature": "AccountController.registeredUser(Principal principal)", "testcase": false, "constructor": false}, {"identifier": "listUser", "parameters": "()", "modifiers": "@PreAuthorize(\"hasRole('ROLE_ADMIN')\") @RequestMapping(value = \"/user\", method = RequestMethod.GET) @ResponseBody public", "return": "List<OadrUserDto>", "signature": "List<OadrUserDto> listUser()", "full_signature": "@PreAuthorize(\"hasRole('ROLE_ADMIN')\") @RequestMapping(value = \"/user\", method = RequestMethod.GET) @ResponseBody public List<OadrUserDto> listUser()", "class_method_signature": "AccountController.listUser()", "testcase": false, "constructor": false}, {"identifier": "createUser", "parameters": "(@RequestBody OadrUserCreateDto dto,\n\t\t\tHttpServletResponse response)", "modifiers": "@PreAuthorize(\"hasRole('ROLE_ADMIN')\") @RequestMapping(value = \"/user\", method = RequestMethod.POST) @ResponseBody public", "return": "ResponseEntity<InputStreamResource>", "signature": "ResponseEntity<InputStreamResource> createUser(@RequestBody OadrUserCreateDto dto,\n\t\t\tHttpServletResponse response)", "full_signature": "@PreAuthorize(\"hasRole('ROLE_ADMIN')\") @RequestMapping(value = \"/user\", method = RequestMethod.POST) @ResponseBody public ResponseEntity<InputStreamResource> createUser(@RequestBody OadrUserCreateDto dto,\n\t\t\tHttpServletResponse response)", "class_method_signature": "AccountController.createUser(@RequestBody OadrUserCreateDto dto,\n\t\t\tHttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "deleteUser", "parameters": "(@PathVariable(\"username\") String username, HttpServletResponse response)", "modifiers": "@PreAuthorize(\"hasRole('ROLE_ADMIN')\") @RequestMapping(value = \"/user/{username}\", method = RequestMethod.DELETE) @ResponseBody public", "return": "void", "signature": "void deleteUser(@PathVariable(\"username\") String username, HttpServletResponse response)", "full_signature": "@PreAuthorize(\"hasRole('ROLE_ADMIN')\") @RequestMapping(value = \"/user/{username}\", method = RequestMethod.DELETE) @ResponseBody public void deleteUser(@PathVariable(\"username\") String username, HttpServletResponse response)", "class_method_signature": "AccountController.deleteUser(@PathVariable(\"username\") String username, HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "listApp", "parameters": "()", "modifiers": "@PreAuthorize(\"hasRole('ROLE_ADMIN')\") @RequestMapping(value = \"/app\", method = RequestMethod.GET) @ResponseBody public", "return": "List<OadrAppDto>", "signature": "List<OadrAppDto> listApp()", "full_signature": "@PreAuthorize(\"hasRole('ROLE_ADMIN')\") @RequestMapping(value = \"/app\", method = RequestMethod.GET) @ResponseBody public List<OadrAppDto> listApp()", "class_method_signature": "AccountController.listApp()", "testcase": false, "constructor": false}, {"identifier": "createApp", "parameters": "(@RequestBody OadrAppCreateDto dto,\n\t\t\tHttpServletResponse response)", "modifiers": "@PreAuthorize(\"hasRole('ROLE_ADMIN')\") @RequestMapping(value = \"/app\", method = RequestMethod.POST) @ResponseBody public", "return": "ResponseEntity<InputStreamResource>", "signature": "ResponseEntity<InputStreamResource> createApp(@RequestBody OadrAppCreateDto dto,\n\t\t\tHttpServletResponse response)", "full_signature": "@PreAuthorize(\"hasRole('ROLE_ADMIN')\") @RequestMapping(value = \"/app\", method = RequestMethod.POST) @ResponseBody public ResponseEntity<InputStreamResource> createApp(@RequestBody OadrAppCreateDto dto,\n\t\t\tHttpServletResponse response)", "class_method_signature": "AccountController.createApp(@RequestBody OadrAppCreateDto dto,\n\t\t\tHttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "deleteApp", "parameters": "(@PathVariable(\"username\") String username, HttpServletResponse response)", "modifiers": "@PreAuthorize(\"hasRole('ROLE_ADMIN')\") @RequestMapping(value = \"/app/{username}\", method = RequestMethod.DELETE) @ResponseBody public", "return": "void", "signature": "void deleteApp(@PathVariable(\"username\") String username, HttpServletResponse response)", "full_signature": "@PreAuthorize(\"hasRole('ROLE_ADMIN')\") @RequestMapping(value = \"/app/{username}\", method = RequestMethod.DELETE) @ResponseBody public void deleteApp(@PathVariable(\"username\") String username, HttpServletResponse response)", "class_method_signature": "AccountController.deleteApp(@PathVariable(\"username\") String username, HttpServletResponse response)", "testcase": false, "constructor": false}], "file": "OpenADRServerVTNCommon/src/main/java/com/avob/openadr/server/common/vtn/controller/AccountController.java"}, "focal_method": {"identifier": "createUser", "parameters": "(@RequestBody OadrUserCreateDto dto,\n\t\t\tHttpServletResponse response)", "modifiers": "@PreAuthorize(\"hasRole('ROLE_ADMIN')\") @RequestMapping(value = \"/user\", method = RequestMethod.POST) @ResponseBody public", "return": "ResponseEntity<InputStreamResource>", "body": "@PreAuthorize(\"hasRole('ROLE_ADMIN')\")\n\t@RequestMapping(value = \"/user\", method = RequestMethod.POST)\n\t@ResponseBody\n\tpublic ResponseEntity<InputStreamResource> createUser(@RequestBody OadrUserCreateDto dto,\n\t\t\tHttpServletResponse response) {\n\n\t\tOadrUser findOneByUsername = oadrUserService.findByUsername(dto.getUsername());\n\n\t\tif (findOneByUsername != null) {\n\t\t\tLOGGER.warn(\"User: \" + dto.getUsername() + \" already exists\");\n\t\t\treturn ResponseEntity.status(HttpStatus.NOT_ACCEPTABLE_406)\n\t\t\t\t\t.contentType(OCTET_STREAM_MEDIA_TYPE).body(null);\n\t\t}\n\t\tOadrUser prepare = oadrUserService.prepare(dto);\n\t\tResponseEntity<InputStreamResource> body = null;\n\t\ttry {\n\t\t\tOptional<File> generateCertificateIfRequired = oadrUserService.generateCertificateIfRequired(dto, prepare);\n\n\t\t\tif (generateCertificateIfRequired.isPresent()) {\n\t\t\t\tInputStreamResource resource = new InputStreamResource(\n\t\t\t\t\t\tnew FileInputStream(generateCertificateIfRequired.get()));\n\t\t\t\tbody = ResponseEntity.status(HttpStatus.CREATED_201)\n\t\t\t\t\t\t.header(\"Content-Disposition\", \"attachment; filename=\\\"archive.tar\\\"\")\n\t\t\t\t\t\t.header(\"x-Username\", prepare.getUsername())\n\t\t\t\t\t\t.contentLength(generateCertificateIfRequired.get().length())\n\t\t\t\t\t\t.contentType(OCTET_STREAM_MEDIA_TYPE).body(resource);\n\t\t\t} else {\n\t\t\t\tbody = ResponseEntity.status(HttpStatus.CREATED_201).header(\"x-username\", prepare.getUsername())\n\t\t\t\t\t\t.body(null);\n\t\t\t}\n\n\t\t} catch (GenerateX509VenException e) {\n\t\t\tLOGGER.error(\"\", e);\n\t\t\tresponse.setStatus(HttpStatus.NOT_ACCEPTABLE_406);\n\t\t} catch (FileNotFoundException e) {\n\t\t\tLOGGER.error(\"\", e);\n\t\t\tresponse.setStatus(HttpStatus.INTERNAL_SERVER_ERROR_500);\n\t\t}\n\n\t\toadrUserService.save(prepare);\n\t\tLOGGER.info(\"Create User: \" + prepare.getUsername());\n\n\t\treturn body;\n\t}", "signature": "ResponseEntity<InputStreamResource> createUser(@RequestBody OadrUserCreateDto dto,\n\t\t\tHttpServletResponse response)", "full_signature": "@PreAuthorize(\"hasRole('ROLE_ADMIN')\") @RequestMapping(value = \"/user\", method = RequestMethod.POST) @ResponseBody public ResponseEntity<InputStreamResource> createUser(@RequestBody OadrUserCreateDto dto,\n\t\t\tHttpServletResponse response)", "class_method_signature": "AccountController.createUser(@RequestBody OadrUserCreateDto dto,\n\t\t\tHttpServletResponse response)", "testcase": false, "constructor": false, "invocations": ["findByUsername", "getUsername", "warn", "getUsername", "body", "contentType", "status", "prepare", "generateCertificateIfRequired", "isPresent", "get", "body", "contentType", "contentLength", "header", "header", "status", "getUsername", "length", "get", "body", "header", "status", "getUsername", "error", "setStatus", "error", "setStatus", "save", "info", "getUsername"]}, "repository": {"repo_id": 169761438, "url": "https://github.com/avob/OpenADR", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 55915, "license": "licensed"}}