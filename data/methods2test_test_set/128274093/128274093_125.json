{"test_class": {"identifier": "ReplayProcessorTest", "superclass": "extends FlowableProcessorTest<Object>", "interfaces": "", "fields": [{"original_string": "private final Throwable testException = new Throwable();", "modifier": "private final", "type": "Throwable", "declarator": "testException = new Throwable()", "var_name": "testException"}], "file": "rxjava/src/test/java/io/reactivex/processors/ReplayProcessorTest.java"}, "test_case": {"identifier": "createWithTimeAndSizeInvalidCapacity", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void createWithTimeAndSizeInvalidCapacity() {\n        try {\n            ReplayProcessor.createWithTimeAndSize(1, TimeUnit.DAYS, Schedulers.computation(), -99);\n            fail(\"Didn't throw IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            assertEquals(\"maxSize > 0 required but it was -99\", ex.getMessage());\n        }\n    }", "signature": "void createWithTimeAndSizeInvalidCapacity()", "full_signature": "@Test public void createWithTimeAndSizeInvalidCapacity()", "class_method_signature": "ReplayProcessorTest.createWithTimeAndSizeInvalidCapacity()", "testcase": true, "constructor": false, "invocations": ["createWithTimeAndSize", "computation", "fail", "assertEquals", "getMessage"]}, "focal_class": {"identifier": "ReplayProcessor", "superclass": "extends FlowableProcessor<T>", "interfaces": "", "fields": [{"original_string": "private static final Object[] EMPTY_ARRAY = new Object[0];", "modifier": "private static final", "type": "Object[]", "declarator": "EMPTY_ARRAY = new Object[0]", "var_name": "EMPTY_ARRAY"}, {"original_string": "final ReplayBuffer<T> buffer;", "modifier": "final", "type": "ReplayBuffer<T>", "declarator": "buffer", "var_name": "buffer"}, {"original_string": "boolean done;", "modifier": "", "type": "boolean", "declarator": "done", "var_name": "done"}, {"original_string": "final AtomicReference<ReplaySubscription<T>[]> subscribers;", "modifier": "final", "type": "AtomicReference<ReplaySubscription<T>[]>", "declarator": "subscribers", "var_name": "subscribers"}, {"original_string": "@SuppressWarnings(\"rawtypes\")\n    static final ReplaySubscription[] EMPTY = new ReplaySubscription[0];", "modifier": "@SuppressWarnings(\"rawtypes\")\n    static final", "type": "ReplaySubscription[]", "declarator": "EMPTY = new ReplaySubscription[0]", "var_name": "EMPTY"}, {"original_string": "@SuppressWarnings(\"rawtypes\")\n    static final ReplaySubscription[] TERMINATED = new ReplaySubscription[0];", "modifier": "@SuppressWarnings(\"rawtypes\")\n    static final", "type": "ReplaySubscription[]", "declarator": "TERMINATED = new ReplaySubscription[0]", "var_name": "TERMINATED"}], "methods": [{"identifier": "create", "parameters": "()", "modifiers": "@CheckReturnValue @NonNull public static", "return": "ReplayProcessor<T>", "signature": "ReplayProcessor<T> create()", "full_signature": "@CheckReturnValue @NonNull public static ReplayProcessor<T> create()", "class_method_signature": "ReplayProcessor.create()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(int capacityHint)", "modifiers": "@CheckReturnValue @NonNull public static", "return": "ReplayProcessor<T>", "signature": "ReplayProcessor<T> create(int capacityHint)", "full_signature": "@CheckReturnValue @NonNull public static ReplayProcessor<T> create(int capacityHint)", "class_method_signature": "ReplayProcessor.create(int capacityHint)", "testcase": false, "constructor": false}, {"identifier": "createWithSize", "parameters": "(int maxSize)", "modifiers": "@CheckReturnValue @NonNull public static", "return": "ReplayProcessor<T>", "signature": "ReplayProcessor<T> createWithSize(int maxSize)", "full_signature": "@CheckReturnValue @NonNull public static ReplayProcessor<T> createWithSize(int maxSize)", "class_method_signature": "ReplayProcessor.createWithSize(int maxSize)", "testcase": false, "constructor": false}, {"identifier": "createUnbounded", "parameters": "()", "modifiers": "static", "return": "ReplayProcessor<T>", "signature": "ReplayProcessor<T> createUnbounded()", "full_signature": "static ReplayProcessor<T> createUnbounded()", "class_method_signature": "ReplayProcessor.createUnbounded()", "testcase": false, "constructor": false}, {"identifier": "createWithTime", "parameters": "(long maxAge, TimeUnit unit, Scheduler scheduler)", "modifiers": "@CheckReturnValue @NonNull public static", "return": "ReplayProcessor<T>", "signature": "ReplayProcessor<T> createWithTime(long maxAge, TimeUnit unit, Scheduler scheduler)", "full_signature": "@CheckReturnValue @NonNull public static ReplayProcessor<T> createWithTime(long maxAge, TimeUnit unit, Scheduler scheduler)", "class_method_signature": "ReplayProcessor.createWithTime(long maxAge, TimeUnit unit, Scheduler scheduler)", "testcase": false, "constructor": false}, {"identifier": "createWithTimeAndSize", "parameters": "(long maxAge, TimeUnit unit, Scheduler scheduler, int maxSize)", "modifiers": "@CheckReturnValue @NonNull public static", "return": "ReplayProcessor<T>", "signature": "ReplayProcessor<T> createWithTimeAndSize(long maxAge, TimeUnit unit, Scheduler scheduler, int maxSize)", "full_signature": "@CheckReturnValue @NonNull public static ReplayProcessor<T> createWithTimeAndSize(long maxAge, TimeUnit unit, Scheduler scheduler, int maxSize)", "class_method_signature": "ReplayProcessor.createWithTimeAndSize(long maxAge, TimeUnit unit, Scheduler scheduler, int maxSize)", "testcase": false, "constructor": false}, {"identifier": "ReplayProcessor", "parameters": "(ReplayBuffer<T> buffer)", "modifiers": "@SuppressWarnings(\"unchecked\")", "return": "", "signature": " ReplayProcessor(ReplayBuffer<T> buffer)", "full_signature": "@SuppressWarnings(\"unchecked\")  ReplayProcessor(ReplayBuffer<T> buffer)", "class_method_signature": "ReplayProcessor.ReplayProcessor(ReplayBuffer<T> buffer)", "testcase": false, "constructor": true}, {"identifier": "subscribeActual", "parameters": "(Subscriber<? super T> s)", "modifiers": "@Override protected", "return": "void", "signature": "void subscribeActual(Subscriber<? super T> s)", "full_signature": "@Override protected void subscribeActual(Subscriber<? super T> s)", "class_method_signature": "ReplayProcessor.subscribeActual(Subscriber<? super T> s)", "testcase": false, "constructor": false}, {"identifier": "onSubscribe", "parameters": "(Subscription s)", "modifiers": "@Override public", "return": "void", "signature": "void onSubscribe(Subscription s)", "full_signature": "@Override public void onSubscribe(Subscription s)", "class_method_signature": "ReplayProcessor.onSubscribe(Subscription s)", "testcase": false, "constructor": false}, {"identifier": "onNext", "parameters": "(T t)", "modifiers": "@Override public", "return": "void", "signature": "void onNext(T t)", "full_signature": "@Override public void onNext(T t)", "class_method_signature": "ReplayProcessor.onNext(T t)", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(Throwable t)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "signature": "void onError(Throwable t)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void onError(Throwable t)", "class_method_signature": "ReplayProcessor.onError(Throwable t)", "testcase": false, "constructor": false}, {"identifier": "onComplete", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "signature": "void onComplete()", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void onComplete()", "class_method_signature": "ReplayProcessor.onComplete()", "testcase": false, "constructor": false}, {"identifier": "hasSubscribers", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasSubscribers()", "full_signature": "@Override public boolean hasSubscribers()", "class_method_signature": "ReplayProcessor.hasSubscribers()", "testcase": false, "constructor": false}, {"identifier": "subscriberCount", "parameters": "()", "modifiers": "", "return": "int", "signature": "int subscriberCount()", "full_signature": " int subscriberCount()", "class_method_signature": "ReplayProcessor.subscriberCount()", "testcase": false, "constructor": false}, {"identifier": "getThrowable", "parameters": "()", "modifiers": "@Override @Nullable public", "return": "Throwable", "signature": "Throwable getThrowable()", "full_signature": "@Override @Nullable public Throwable getThrowable()", "class_method_signature": "ReplayProcessor.getThrowable()", "testcase": false, "constructor": false}, {"identifier": "cleanupBuffer", "parameters": "()", "modifiers": "@Experimental public", "return": "void", "signature": "void cleanupBuffer()", "full_signature": "@Experimental public void cleanupBuffer()", "class_method_signature": "ReplayProcessor.cleanupBuffer()", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "()", "modifiers": "public", "return": "T", "signature": "T getValue()", "full_signature": "public T getValue()", "class_method_signature": "ReplayProcessor.getValue()", "testcase": false, "constructor": false}, {"identifier": "getValues", "parameters": "()", "modifiers": "public", "return": "Object[]", "signature": "Object[] getValues()", "full_signature": "public Object[] getValues()", "class_method_signature": "ReplayProcessor.getValues()", "testcase": false, "constructor": false}, {"identifier": "getValues", "parameters": "(T[] array)", "modifiers": "public", "return": "T[]", "signature": "T[] getValues(T[] array)", "full_signature": "public T[] getValues(T[] array)", "class_method_signature": "ReplayProcessor.getValues(T[] array)", "testcase": false, "constructor": false}, {"identifier": "hasComplete", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasComplete()", "full_signature": "@Override public boolean hasComplete()", "class_method_signature": "ReplayProcessor.hasComplete()", "testcase": false, "constructor": false}, {"identifier": "hasThrowable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasThrowable()", "full_signature": "@Override public boolean hasThrowable()", "class_method_signature": "ReplayProcessor.hasThrowable()", "testcase": false, "constructor": false}, {"identifier": "hasValue", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasValue()", "full_signature": "public boolean hasValue()", "class_method_signature": "ReplayProcessor.hasValue()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "", "return": "int", "signature": "int size()", "full_signature": " int size()", "class_method_signature": "ReplayProcessor.size()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(ReplaySubscription<T> rs)", "modifiers": "", "return": "boolean", "signature": "boolean add(ReplaySubscription<T> rs)", "full_signature": " boolean add(ReplaySubscription<T> rs)", "class_method_signature": "ReplayProcessor.add(ReplaySubscription<T> rs)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(ReplaySubscription<T> rs)", "modifiers": "@SuppressWarnings(\"unchecked\")", "return": "void", "signature": "void remove(ReplaySubscription<T> rs)", "full_signature": "@SuppressWarnings(\"unchecked\") void remove(ReplaySubscription<T> rs)", "class_method_signature": "ReplayProcessor.remove(ReplaySubscription<T> rs)", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/processors/ReplayProcessor.java"}, "focal_method": {"identifier": "createWithTimeAndSize", "parameters": "(long maxAge, TimeUnit unit, Scheduler scheduler, int maxSize)", "modifiers": "@CheckReturnValue @NonNull public static", "return": "ReplayProcessor<T>", "body": "@CheckReturnValue\n    @NonNull\n    public static <T> ReplayProcessor<T> createWithTimeAndSize(long maxAge, TimeUnit unit, Scheduler scheduler, int maxSize) {\n        return new ReplayProcessor<T>(new SizeAndTimeBoundReplayBuffer<T>(maxSize, maxAge, unit, scheduler));\n    }", "signature": "ReplayProcessor<T> createWithTimeAndSize(long maxAge, TimeUnit unit, Scheduler scheduler, int maxSize)", "full_signature": "@CheckReturnValue @NonNull public static ReplayProcessor<T> createWithTimeAndSize(long maxAge, TimeUnit unit, Scheduler scheduler, int maxSize)", "class_method_signature": "ReplayProcessor.createWithTimeAndSize(long maxAge, TimeUnit unit, Scheduler scheduler, int maxSize)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}