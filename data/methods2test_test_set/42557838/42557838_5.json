{"test_class": {"identifier": "HttpError500HandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static HttpServletResponseImpl httpServletResponse;", "modifier": "private static", "type": "HttpServletResponseImpl", "declarator": "httpServletResponse", "var_name": "httpServletResponse"}, {"original_string": "private static PrintWriter printWriter;", "modifier": "private static", "type": "PrintWriter", "declarator": "printWriter", "var_name": "printWriter"}, {"original_string": "private static HttpError500Handler httpError500Handler;", "modifier": "private static", "type": "HttpError500Handler", "declarator": "httpError500Handler", "var_name": "httpError500Handler"}, {"original_string": "@Captor\n    private ArgumentCaptor<String> arg = ArgumentCaptor.forClass(String.class);", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<String>", "declarator": "arg = ArgumentCaptor.forClass(String.class)", "var_name": "arg"}], "file": "http/src/test/java/ro/polak/http/errorhandler/impl/HttpError500HandlerTest.java"}, "test_case": {"identifier": "shouldDisplayClassNameAndNoExceptionMessageForEmptyValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldDisplayClassNameAndNoExceptionMessageForEmptyValue() throws IOException {\n        Exception e = new RuntimeException();\n\n        httpError500Handler.setReason(e).serve(httpServletResponse);\n\n        verify(printWriter).write(arg.capture());\n        String output = arg.getValue();\n        assertThat(output, containsString(\">java.lang.RuntimeException<\"));\n    }", "signature": "void shouldDisplayClassNameAndNoExceptionMessageForEmptyValue()", "full_signature": "@Test public void shouldDisplayClassNameAndNoExceptionMessageForEmptyValue()", "class_method_signature": "HttpError500HandlerTest.shouldDisplayClassNameAndNoExceptionMessageForEmptyValue()", "testcase": true, "constructor": false, "invocations": ["serve", "setReason", "write", "verify", "capture", "getValue", "assertThat", "containsString"]}, "focal_class": {"identifier": "HttpError500Handler", "superclass": "extends AbstractHtmlErrorHandler", "interfaces": "", "fields": [], "methods": [{"identifier": "HttpError500Handler", "parameters": "()", "modifiers": "public", "return": "", "signature": " HttpError500Handler()", "full_signature": "public  HttpError500Handler()", "class_method_signature": "HttpError500Handler.HttpError500Handler()", "testcase": false, "constructor": true}, {"identifier": "setReason", "parameters": "(final Throwable e)", "modifiers": "public", "return": "HttpError500Handler", "signature": "HttpError500Handler setReason(final Throwable e)", "full_signature": "public HttpError500Handler setReason(final Throwable e)", "class_method_signature": "HttpError500Handler.setReason(final Throwable e)", "testcase": false, "constructor": false}, {"identifier": "exceptionToString", "parameters": "(final Throwable e)", "modifiers": "private", "return": "String", "signature": "String exceptionToString(final Throwable e)", "full_signature": "private String exceptionToString(final Throwable e)", "class_method_signature": "HttpError500Handler.exceptionToString(final Throwable e)", "testcase": false, "constructor": false}], "file": "http/src/main/java/ro/polak/http/errorhandler/impl/HttpError500Handler.java"}, "focal_method": {"identifier": "setReason", "parameters": "(final Throwable e)", "modifiers": "public", "return": "HttpError500Handler", "body": "public HttpError500Handler setReason(final Throwable e) {\n\n        StringBuilder stringBuilder = new StringBuilder();\n        stringBuilder.append(\"<p style=\\\"color: red; font-weight: bold;\\\">\");\n        if (!StringUtilities.isEmpty(e.getMessage())) {\n            stringBuilder.append(e.getMessage() + \" \");\n        }\n        stringBuilder.append(e.getClass().getName() + \"</p>\\n\")\n                .append(\"<pre>\")\n                .append(exceptionToString(e))\n                .append(\"</pre>\");\n\n        setExplanation(stringBuilder.toString());\n\n        return this;\n    }", "signature": "HttpError500Handler setReason(final Throwable e)", "full_signature": "public HttpError500Handler setReason(final Throwable e)", "class_method_signature": "HttpError500Handler.setReason(final Throwable e)", "testcase": false, "constructor": false, "invocations": ["append", "isEmpty", "getMessage", "append", "getMessage", "append", "append", "append", "append", "getName", "getClass", "exceptionToString", "setExplanation", "toString"]}, "repository": {"repo_id": 42557838, "url": "https://github.com/piotrpolak/android-http-server", "language": "Java", "is_fork": false, "fork_count": 41, "stargazer_count": 136, "size": 2000, "license": "licensed"}}