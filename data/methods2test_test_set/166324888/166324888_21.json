{"test_class": {"identifier": "SelectAddressPresenterTest", "superclass": "extends BaseTestCase", "interfaces": "", "fields": [{"original_string": "private SelectAddressPresenter presenter;", "modifier": "private", "type": "SelectAddressPresenter", "declarator": "presenter", "var_name": "presenter"}, {"original_string": "@Mock\n    private SelectAddressContract.View view;", "modifier": "@Mock\n    private", "type": "SelectAddressContract.View", "declarator": "view", "var_name": "view"}], "file": "wallet/src/test/java/com/platon/aton/component/ui/presenter/SelectAddressPresenterTest.java"}, "test_case": {"identifier": "testFetchAddressList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFetchAddressList() {\n        List<AddressEntity> entityList = new ArrayList<>();\n        AddressEntity entity = new AddressEntity();\n        entity.setAddress(\"0x15asd35f5ad5fa34s5df4as53\");\n        entity.setAvatar(\"\");\n        entity.setName(\"qianbao-1\");\n        entity.setUuid(UUID.randomUUID().toString());\n        entityList.add(entity);\n\n\n        AddressEntity entity2 = new AddressEntity();\n        entity2.setAddress(\"0x15asd35f5ad5fa34s5df4as53\");\n        entity2.setAvatar(\"\");\n        entity2.setName(\"qianbao-2\");\n        entity2.setUuid(UUID.randomUUID().toString());\n        entityList.add(entity2);\n\n\n        AddressEntity entity3 = new AddressEntity();\n        entity3.setAddress(\"0x15asd35f5ad5fa34s5df4as53\");\n        entity3.setAvatar(\"\");\n        entity3.setName(\"qianbao-3\");\n        entity3.setUuid(UUID.randomUUID().toString());\n        entityList.add(entity3);\n\n\n        AddressEntity entity4 = new AddressEntity();\n        entity4.setAddress(\"0x15asd35f5ad5fa34s5df4as53\");\n        entity4.setAvatar(\"\");\n        entity4.setName(\"qianbao-4\");\n        entity4.setUuid(UUID.randomUUID().toString());\n        entityList.add(entity4);\n\n        Flowable.fromIterable(entityList).filter(new Predicate<AddressEntity>() {\n            @Override\n            public boolean test(AddressEntity addressInfoEntity) throws Exception {\n                return addressInfoEntity != null;\n            }\n        }).map(new Function<AddressEntity, Address>() {\n            @Override\n            public Address apply(AddressEntity addressInfoEntity) throws Exception {\n                return new Address(addressInfoEntity.getUuid(), addressInfoEntity.getName(), addressInfoEntity.getAddress(), addressInfoEntity.getAvatar());\n            }\n        }).toList()\n                .subscribe(new BiConsumer<List<Address>, Throwable>() {\n                    @Override\n                    public void accept(List<Address> addressEntities, Throwable throwable) throws Exception {\n                        assertNotNull(addressEntities);\n                        for (Address address : addressEntities) {\n                            System.out.println(address.getUuid() + \"===============\" + address.getName());\n                        }\n\n                    }\n                });\n    }", "signature": "void testFetchAddressList()", "full_signature": "@Test public void testFetchAddressList()", "class_method_signature": "SelectAddressPresenterTest.testFetchAddressList()", "testcase": true, "constructor": false, "invocations": ["setAddress", "setAvatar", "setName", "setUuid", "toString", "randomUUID", "add", "setAddress", "setAvatar", "setName", "setUuid", "toString", "randomUUID", "add", "setAddress", "setAvatar", "setName", "setUuid", "toString", "randomUUID", "add", "setAddress", "setAvatar", "setName", "setUuid", "toString", "randomUUID", "add", "subscribe", "toList", "map", "filter", "fromIterable", "getUuid", "getName", "getAddress", "getAvatar", "assertNotNull", "println", "getUuid", "getName"]}, "focal_class": {"identifier": "SelectAddressPresenter", "superclass": "extends BasePresenter<SelectAddressContract.View>", "interfaces": "implements SelectAddressContract.Presenter", "fields": [{"original_string": "private List<Address> addressEntityList;", "modifier": "private", "type": "List<Address>", "declarator": "addressEntityList", "var_name": "addressEntityList"}], "methods": [{"identifier": "getAddressEntityList", "parameters": "()", "modifiers": "public", "return": "List<Address>", "signature": "List<Address> getAddressEntityList()", "full_signature": "public List<Address> getAddressEntityList()", "class_method_signature": "SelectAddressPresenter.getAddressEntityList()", "testcase": false, "constructor": false}, {"identifier": "setAddressEntityList", "parameters": "(List<Address> addressEntityList)", "modifiers": "public", "return": "void", "signature": "void setAddressEntityList(List<Address> addressEntityList)", "full_signature": "public void setAddressEntityList(List<Address> addressEntityList)", "class_method_signature": "SelectAddressPresenter.setAddressEntityList(List<Address> addressEntityList)", "testcase": false, "constructor": false}, {"identifier": "fetchAddressList", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void fetchAddressList()", "full_signature": "@Override public void fetchAddressList()", "class_method_signature": "SelectAddressPresenter.fetchAddressList()", "testcase": false, "constructor": false}, {"identifier": "selectAddress", "parameters": "(int position)", "modifiers": "@Override public", "return": "void", "signature": "void selectAddress(int position)", "full_signature": "@Override public void selectAddress(int position)", "class_method_signature": "SelectAddressPresenter.selectAddress(int position)", "testcase": false, "constructor": false}], "file": "wallet/src/main/java/com/platon/aton/component/ui/presenter/SelectAddressPresenter.java"}, "focal_method": {"identifier": "fetchAddressList", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void fetchAddressList() {\n        Flowable.fromIterable(AddressDao.getAddressInfoList()).filter(new Predicate<AddressEntity>() {\n            @Override\n            public boolean test(AddressEntity addressInfoEntity) throws Exception {\n                return addressInfoEntity != null;\n            }\n        }).compose(((BaseActivity) getView()).bindToLifecycle()).map(new Function<AddressEntity, Address>() {\n            @Override\n            public Address apply(AddressEntity addressInfoEntity) throws Exception {\n                return new Address(addressInfoEntity.getUuid(), addressInfoEntity.getName(),addressInfoEntity.getAddress(),addressInfoEntity.getAvatar());\n            }\n        }).toList().subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(new BiConsumer<List<Address>, Throwable>() {\n            @Override\n            public void accept(List<Address> addressEntities, Throwable throwable) throws Exception {\n                addressEntityList = addressEntities;\n                if (isViewAttached()) {\n                    getView().notifyAddressListChanged(addressEntities);\n                }\n            }\n        });\n    }", "signature": "void fetchAddressList()", "full_signature": "@Override public void fetchAddressList()", "class_method_signature": "SelectAddressPresenter.fetchAddressList()", "testcase": false, "constructor": false, "invocations": ["subscribe", "observeOn", "subscribeOn", "toList", "map", "compose", "filter", "fromIterable", "getAddressInfoList", "bindToLifecycle", "getView", "getUuid", "getName", "getAddress", "getAvatar", "io", "mainThread", "isViewAttached", "notifyAddressListChanged", "getView"]}, "repository": {"repo_id": 166324888, "url": "https://github.com/PlatONnetwork/ATON-Android", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 8, "size": 118901, "license": "licensed"}}