{"test_class": {"identifier": "DataTreeChangeListenerActorTest", "superclass": "extends AbstractActorTest", "interfaces": "", "fields": [{"original_string": "private TestKit testKit;", "modifier": "private", "type": "TestKit", "declarator": "testKit", "var_name": "testKit"}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/datastore/DataTreeChangeListenerActorTest.java"}, "test_case": {"identifier": "testDataChangedWithNoSender", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDataChangedWithNoSender() {\n        final DataTreeCandidate mockTreeCandidate = mock(DataTreeCandidate.class);\n        final ImmutableList<DataTreeCandidate> mockCandidates = ImmutableList.of(mockTreeCandidate);\n        final DOMDataTreeChangeListener mockListener = mock(DOMDataTreeChangeListener.class);\n        final Props props = DataTreeChangeListenerActor.props(mockListener, TEST_PATH);\n        final ActorRef subject = getSystem().actorOf(props, \"testDataTreeChangedWithNoSender\");\n\n        getSystem().eventStream().subscribe(testKit.getRef(), DeadLetter.class);\n\n        subject.tell(new DataTreeChanged(mockCandidates), ActorRef.noSender());\n\n        // Make sure no DataChangedReply is sent to DeadLetters.\n        while (true) {\n            DeadLetter deadLetter;\n            try {\n                deadLetter = testKit.expectMsgClass(Duration.ofSeconds(1), DeadLetter.class);\n            } catch (AssertionError e) {\n                // Timed out - got no DeadLetter - this is good\n                break;\n            }\n\n            // We may get DeadLetters for other messages we don't care\n            // about.\n            assertFalse(\"Unexpected DataTreeChangedReply\", deadLetter.message() instanceof DataTreeChangedReply);\n        }\n    }", "signature": "void testDataChangedWithNoSender()", "full_signature": "@Test public void testDataChangedWithNoSender()", "class_method_signature": "DataTreeChangeListenerActorTest.testDataChangedWithNoSender()", "testcase": true, "constructor": false, "invocations": ["mock", "of", "mock", "props", "actorOf", "getSystem", "subscribe", "eventStream", "getSystem", "getRef", "tell", "noSender", "expectMsgClass", "ofSeconds", "assertFalse", "message"]}, "focal_class": {"identifier": "DataTreeChangeListenerActor", "superclass": "extends AbstractUntypedActor", "interfaces": "", "fields": [{"original_string": "private final DOMDataTreeChangeListener listener;", "modifier": "private final", "type": "DOMDataTreeChangeListener", "declarator": "listener", "var_name": "listener"}, {"original_string": "private final YangInstanceIdentifier registeredPath;", "modifier": "private final", "type": "YangInstanceIdentifier", "declarator": "registeredPath", "var_name": "registeredPath"}, {"original_string": "private boolean notificationsEnabled = false;", "modifier": "private", "type": "boolean", "declarator": "notificationsEnabled = false", "var_name": "notificationsEnabled"}, {"original_string": "private long notificationCount;", "modifier": "private", "type": "long", "declarator": "notificationCount", "var_name": "notificationCount"}, {"original_string": "private String logContext = \"\";", "modifier": "private", "type": "String", "declarator": "logContext = \"\"", "var_name": "logContext"}], "methods": [{"identifier": "DataTreeChangeListenerActor", "parameters": "(final DOMDataTreeChangeListener listener,\n            final YangInstanceIdentifier registeredPath)", "modifiers": "", "return": "", "signature": " DataTreeChangeListenerActor(final DOMDataTreeChangeListener listener,\n            final YangInstanceIdentifier registeredPath)", "full_signature": "  DataTreeChangeListenerActor(final DOMDataTreeChangeListener listener,\n            final YangInstanceIdentifier registeredPath)", "class_method_signature": "DataTreeChangeListenerActor.DataTreeChangeListenerActor(final DOMDataTreeChangeListener listener,\n            final YangInstanceIdentifier registeredPath)", "testcase": false, "constructor": true}, {"identifier": "handleReceive", "parameters": "(final Object message)", "modifiers": "@Override protected final", "return": "void", "signature": "void handleReceive(final Object message)", "full_signature": "@Override protected final void handleReceive(final Object message)", "class_method_signature": "DataTreeChangeListenerActor.handleReceive(final Object message)", "testcase": false, "constructor": false}, {"identifier": "onInitialData", "parameters": "(final OnInitialData message)", "modifiers": "@SuppressWarnings(\"checkstyle:IllegalCatch\")", "return": "void", "signature": "void onInitialData(final OnInitialData message)", "full_signature": "@SuppressWarnings(\"checkstyle:IllegalCatch\") void onInitialData(final OnInitialData message)", "class_method_signature": "DataTreeChangeListenerActor.onInitialData(final OnInitialData message)", "testcase": false, "constructor": false}, {"identifier": "dataTreeChanged", "parameters": "(final DataTreeChanged message)", "modifiers": "@SuppressWarnings(\"checkstyle:IllegalCatch\")", "return": "void", "signature": "void dataTreeChanged(final DataTreeChanged message)", "full_signature": "@SuppressWarnings(\"checkstyle:IllegalCatch\") void dataTreeChanged(final DataTreeChanged message)", "class_method_signature": "DataTreeChangeListenerActor.dataTreeChanged(final DataTreeChanged message)", "testcase": false, "constructor": false}, {"identifier": "enableNotification", "parameters": "(final EnableNotification message)", "modifiers": "private", "return": "void", "signature": "void enableNotification(final EnableNotification message)", "full_signature": "private void enableNotification(final EnableNotification message)", "class_method_signature": "DataTreeChangeListenerActor.enableNotification(final EnableNotification message)", "testcase": false, "constructor": false}, {"identifier": "props", "parameters": "(final DOMDataTreeChangeListener listener, final YangInstanceIdentifier registeredPath)", "modifiers": "static", "return": "Props", "signature": "Props props(final DOMDataTreeChangeListener listener, final YangInstanceIdentifier registeredPath)", "full_signature": "static Props props(final DOMDataTreeChangeListener listener, final YangInstanceIdentifier registeredPath)", "class_method_signature": "DataTreeChangeListenerActor.props(final DOMDataTreeChangeListener listener, final YangInstanceIdentifier registeredPath)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/DataTreeChangeListenerActor.java"}, "focal_method": {"identifier": "props", "parameters": "(final DOMDataTreeChangeListener listener, final YangInstanceIdentifier registeredPath)", "modifiers": "static", "return": "Props", "body": "static Props props(final DOMDataTreeChangeListener listener, final YangInstanceIdentifier registeredPath) {\n        return Props.create(DataTreeChangeListenerActor.class, listener, registeredPath);\n    }", "signature": "Props props(final DOMDataTreeChangeListener listener, final YangInstanceIdentifier registeredPath)", "full_signature": "static Props props(final DOMDataTreeChangeListener listener, final YangInstanceIdentifier registeredPath)", "class_method_signature": "DataTreeChangeListenerActor.props(final DOMDataTreeChangeListener listener, final YangInstanceIdentifier registeredPath)", "testcase": false, "constructor": false, "invocations": ["create"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}