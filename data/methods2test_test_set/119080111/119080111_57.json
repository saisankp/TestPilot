{"test_class": {"identifier": "ObjectivesTest", "superclass": "", "interfaces": "", "fields": [], "file": "opt4j-core/src/test/java/org/opt4j/core/ObjectivesTest.java"}, "test_case": {"identifier": "isEqualTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void isEqualTest() {\n\t\tObjectives objectives0 = new Objectives();\n\t\tobjectives0.add(\"a\", Sign.MIN, 3);\n\n\t\tObjectives objectives1 = new Objectives();\n\t\tobjectives1.add(\"a\", Sign.MIN, 3);\n\n\t\tObjectives objectives2 = new Objectives();\n\t\tobjectives2.add(\"a\", Sign.MIN, 4);\n\n\t\tAssert.assertTrue(objectives0.isEqual(objectives1));\n\t\tAssert.assertFalse(objectives0.isEqual(objectives2));\n\t}", "signature": "void isEqualTest()", "full_signature": "@Test public void isEqualTest()", "class_method_signature": "ObjectivesTest.isEqualTest()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "assertTrue", "isEqual", "assertFalse", "isEqual"]}, "focal_class": {"identifier": "Objectives", "superclass": "", "interfaces": "implements Iterable<Entry<Objective, Value<?>>>", "fields": [{"original_string": "protected final SortedMap<Objective, Value<?>> map = new TreeMap<>();", "modifier": "protected final", "type": "SortedMap<Objective, Value<?>>", "declarator": "map = new TreeMap<>()", "var_name": "map"}, {"original_string": "protected double[] array = null;", "modifier": "protected", "type": "double[]", "declarator": "array = null", "var_name": "array"}], "methods": [{"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Entry<Objective, Value<?>>>", "signature": "Iterator<Entry<Objective, Value<?>>> iterator()", "full_signature": "@Override public Iterator<Entry<Objective, Value<?>>> iterator()", "class_method_signature": "Objectives.iterator()", "testcase": false, "constructor": false}, {"identifier": "array", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] array()", "full_signature": "public double[] array()", "class_method_signature": "Objectives.array()", "testcase": false, "constructor": false}, {"identifier": "submit", "parameters": "()", "modifiers": "protected synchronized", "return": "void", "signature": "void submit()", "full_signature": "protected synchronized void submit()", "class_method_signature": "Objectives.submit()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "Objectives.size()", "testcase": false, "constructor": false}, {"identifier": "getKeys", "parameters": "()", "modifiers": "public", "return": "Collection<Objective>", "signature": "Collection<Objective> getKeys()", "full_signature": "public Collection<Objective> getKeys()", "class_method_signature": "Objectives.getKeys()", "testcase": false, "constructor": false}, {"identifier": "getValues", "parameters": "()", "modifiers": "public", "return": "Collection<Value<?>>", "signature": "Collection<Value<?>> getValues()", "full_signature": "public Collection<Value<?>> getValues()", "class_method_signature": "Objectives.getValues()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Objective objective)", "modifiers": "public", "return": "Value<?>", "signature": "Value<?> get(Objective objective)", "full_signature": "public Value<?> get(Objective objective)", "class_method_signature": "Objectives.get(Objective objective)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Value<?> value)", "modifiers": "public", "return": "Objective", "signature": "Objective get(Value<?> value)", "full_signature": "public Objective get(Value<?> value)", "class_method_signature": "Objectives.get(Value<?> value)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Objective objective, Value<?> value)", "modifiers": "public", "return": "void", "signature": "void add(Objective objective, Value<?> value)", "full_signature": "public void add(Objective objective, Value<?> value)", "class_method_signature": "Objectives.add(Objective objective, Value<?> value)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(String name, Sign sign, Value<?> value)", "modifiers": "public", "return": "void", "signature": "void add(String name, Sign sign, Value<?> value)", "full_signature": "public void add(String name, Sign sign, Value<?> value)", "class_method_signature": "Objectives.add(String name, Sign sign, Value<?> value)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Objective objective, double value)", "modifiers": "public", "return": "void", "signature": "void add(Objective objective, double value)", "full_signature": "public void add(Objective objective, double value)", "class_method_signature": "Objectives.add(Objective objective, double value)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(String name, Sign sign, double value)", "modifiers": "public", "return": "void", "signature": "void add(String name, Sign sign, double value)", "full_signature": "public void add(String name, Sign sign, double value)", "class_method_signature": "Objectives.add(String name, Sign sign, double value)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Objective objective, int value)", "modifiers": "public", "return": "void", "signature": "void add(Objective objective, int value)", "full_signature": "public void add(Objective objective, int value)", "class_method_signature": "Objectives.add(Objective objective, int value)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(String name, Sign sign, int value)", "modifiers": "public", "return": "void", "signature": "void add(String name, Sign sign, int value)", "full_signature": "public void add(String name, Sign sign, int value)", "class_method_signature": "Objectives.add(String name, Sign sign, int value)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(Objectives objectives)", "modifiers": "public", "return": "void", "signature": "void addAll(Objectives objectives)", "full_signature": "public void addAll(Objectives objectives)", "class_method_signature": "Objectives.addAll(Objectives objectives)", "testcase": false, "constructor": false}, {"identifier": "weaklyDominates", "parameters": "(Objectives opponent)", "modifiers": "public", "return": "boolean", "signature": "boolean weaklyDominates(Objectives opponent)", "full_signature": "public boolean weaklyDominates(Objectives opponent)", "class_method_signature": "Objectives.weaklyDominates(Objectives opponent)", "testcase": false, "constructor": false}, {"identifier": "dominates", "parameters": "(Objectives opponent)", "modifiers": "public", "return": "boolean", "signature": "boolean dominates(Objectives opponent)", "full_signature": "public boolean dominates(Objectives opponent)", "class_method_signature": "Objectives.dominates(Objectives opponent)", "testcase": false, "constructor": false}, {"identifier": "isEqual", "parameters": "(Objectives opponent)", "modifiers": "public", "return": "boolean", "signature": "boolean isEqual(Objectives opponent)", "full_signature": "public boolean isEqual(Objectives opponent)", "class_method_signature": "Objectives.isEqual(Objectives opponent)", "testcase": false, "constructor": false}, {"identifier": "distance", "parameters": "(Objectives other)", "modifiers": "public", "return": "double", "signature": "double distance(Objectives other)", "full_signature": "public double distance(Objectives other)", "class_method_signature": "Objectives.distance(Objectives other)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Objectives.toString()", "testcase": false, "constructor": false}], "file": "opt4j-core/src/main/java/org/opt4j/core/Objectives.java"}, "focal_method": {"identifier": "isEqual", "parameters": "(Objectives opponent)", "modifiers": "public", "return": "boolean", "body": "public boolean isEqual(Objectives opponent) {\n\t\tdouble[] va = this.array();\n\t\tdouble[] vb = opponent.array();\n\n\t\tfor (int i = 0; i < va.length; i++) {\n\t\t\tif (va[i] != vb[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}", "signature": "boolean isEqual(Objectives opponent)", "full_signature": "public boolean isEqual(Objectives opponent)", "class_method_signature": "Objectives.isEqual(Objectives opponent)", "testcase": false, "constructor": false, "invocations": ["array", "array"]}, "repository": {"repo_id": 119080111, "url": "https://github.com/felixreimann/opt4j", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 11, "size": 8771, "license": "licensed"}}