{"test_class": {"identifier": "WikibaseDataFetcherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "MockBasicApiConnection con;", "modifier": "", "type": "MockBasicApiConnection", "declarator": "con", "var_name": "con"}, {"original_string": "WikibaseDataFetcher wdf;", "modifier": "", "type": "WikibaseDataFetcher", "declarator": "wdf", "var_name": "wdf"}], "file": "wdtk-wikibaseapi/src/test/java/org/wikidata/wdtk/wikibaseapi/WikibaseDataFetcherTest.java"}, "test_case": {"identifier": "testWbGetEntitiesError", "parameters": "()", "modifiers": "@Test(expected = NoSuchEntityErrorException.class) public", "return": "void", "body": "@Test(expected = NoSuchEntityErrorException.class)\n\tpublic void testWbGetEntitiesError() throws IOException,\n\t\t\tMediaWikiApiErrorException {\n\t\tMap<String, String> parameters = new HashMap<>();\n\t\tsetStandardParameters(parameters);\n\t\tparameters.put(\"ids\", \"bogus\");\n\t\t// We use the mock answer as for a multi request; no problem\n\t\tcon.setWebResourceFromPath(parameters, getClass(),\n\t\t\t\t\"/wbgetentities-bogus.json\", CompressionType.NONE);\n\t\twdf.getEntityDocuments(\"bogus\");\n\t}", "signature": "void testWbGetEntitiesError()", "full_signature": "@Test(expected = NoSuchEntityErrorException.class) public void testWbGetEntitiesError()", "class_method_signature": "WikibaseDataFetcherTest.testWbGetEntitiesError()", "testcase": true, "constructor": false, "invocations": ["setStandardParameters", "put", "setWebResourceFromPath", "getClass", "getEntityDocuments"]}, "focal_class": {"identifier": "WikibaseDataFetcher", "superclass": "", "interfaces": "", "fields": [{"original_string": "final WbGetEntitiesAction wbGetEntitiesAction;", "modifier": "final", "type": "WbGetEntitiesAction", "declarator": "wbGetEntitiesAction", "var_name": "wbGetEntitiesAction"}, {"original_string": "final WbSearchEntitiesAction wbSearchEntitiesAction;", "modifier": "final", "type": "WbSearchEntitiesAction", "declarator": "wbSearchEntitiesAction", "var_name": "wbSearchEntitiesAction"}, {"original_string": "final MediaInfoIdQueryAction mediaInfoIdQueryAction;", "modifier": "final", "type": "MediaInfoIdQueryAction", "declarator": "mediaInfoIdQueryAction", "var_name": "mediaInfoIdQueryAction"}, {"original_string": "final String siteIri;", "modifier": "final", "type": "String", "declarator": "siteIri", "var_name": "siteIri"}, {"original_string": "private final DocumentDataFilter filter = new DocumentDataFilter();", "modifier": "private final", "type": "DocumentDataFilter", "declarator": "filter = new DocumentDataFilter()", "var_name": "filter"}, {"original_string": "int maxListSize = 50;", "modifier": "", "type": "int", "declarator": "maxListSize = 50", "var_name": "maxListSize"}], "methods": [{"identifier": "getWikidataDataFetcher", "parameters": "()", "modifiers": "public static", "return": "WikibaseDataFetcher", "signature": "WikibaseDataFetcher getWikidataDataFetcher()", "full_signature": "public static WikibaseDataFetcher getWikidataDataFetcher()", "class_method_signature": "WikibaseDataFetcher.getWikidataDataFetcher()", "testcase": false, "constructor": false}, {"identifier": "getWikimediaCommonsDataFetcher", "parameters": "()", "modifiers": "public static", "return": "WikibaseDataFetcher", "signature": "WikibaseDataFetcher getWikimediaCommonsDataFetcher()", "full_signature": "public static WikibaseDataFetcher getWikimediaCommonsDataFetcher()", "class_method_signature": "WikibaseDataFetcher.getWikimediaCommonsDataFetcher()", "testcase": false, "constructor": false}, {"identifier": "WikibaseDataFetcher", "parameters": "(ApiConnection connection, String siteUri)", "modifiers": "public", "return": "", "signature": " WikibaseDataFetcher(ApiConnection connection, String siteUri)", "full_signature": "public  WikibaseDataFetcher(ApiConnection connection, String siteUri)", "class_method_signature": "WikibaseDataFetcher.WikibaseDataFetcher(ApiConnection connection, String siteUri)", "testcase": false, "constructor": true}, {"identifier": "getFilter", "parameters": "()", "modifiers": "public", "return": "DocumentDataFilter", "signature": "DocumentDataFilter getFilter()", "full_signature": "public DocumentDataFilter getFilter()", "class_method_signature": "WikibaseDataFetcher.getFilter()", "testcase": false, "constructor": false}, {"identifier": "getEntityDocument", "parameters": "(String entityId)", "modifiers": "public", "return": "EntityDocument", "signature": "EntityDocument getEntityDocument(String entityId)", "full_signature": "public EntityDocument getEntityDocument(String entityId)", "class_method_signature": "WikibaseDataFetcher.getEntityDocument(String entityId)", "testcase": false, "constructor": false}, {"identifier": "getEntityDocuments", "parameters": "(String... entityIds)", "modifiers": "public", "return": "Map<String, EntityDocument>", "signature": "Map<String, EntityDocument> getEntityDocuments(String... entityIds)", "full_signature": "public Map<String, EntityDocument> getEntityDocuments(String... entityIds)", "class_method_signature": "WikibaseDataFetcher.getEntityDocuments(String... entityIds)", "testcase": false, "constructor": false}, {"identifier": "getEntityDocuments", "parameters": "(List<String> entityIds)", "modifiers": "public", "return": "Map<String, EntityDocument>", "signature": "Map<String, EntityDocument> getEntityDocuments(List<String> entityIds)", "full_signature": "public Map<String, EntityDocument> getEntityDocuments(List<String> entityIds)", "class_method_signature": "WikibaseDataFetcher.getEntityDocuments(List<String> entityIds)", "testcase": false, "constructor": false}, {"identifier": "getEntityDocumentByTitle", "parameters": "(String siteKey, String title)", "modifiers": "public", "return": "EntityDocument", "signature": "EntityDocument getEntityDocumentByTitle(String siteKey, String title)", "full_signature": "public EntityDocument getEntityDocumentByTitle(String siteKey, String title)", "class_method_signature": "WikibaseDataFetcher.getEntityDocumentByTitle(String siteKey, String title)", "testcase": false, "constructor": false}, {"identifier": "getEntityDocumentsByTitle", "parameters": "(\n\t\t\tString siteKey, String... titles)", "modifiers": "public", "return": "Map<String, EntityDocument>", "signature": "Map<String, EntityDocument> getEntityDocumentsByTitle(\n\t\t\tString siteKey, String... titles)", "full_signature": "public Map<String, EntityDocument> getEntityDocumentsByTitle(\n\t\t\tString siteKey, String... titles)", "class_method_signature": "WikibaseDataFetcher.getEntityDocumentsByTitle(\n\t\t\tString siteKey, String... titles)", "testcase": false, "constructor": false}, {"identifier": "getEntityDocumentsByTitle", "parameters": "(\n\t\t\tString siteKey, List<String> titles)", "modifiers": "public", "return": "Map<String, EntityDocument>", "signature": "Map<String, EntityDocument> getEntityDocumentsByTitle(\n\t\t\tString siteKey, List<String> titles)", "full_signature": "public Map<String, EntityDocument> getEntityDocumentsByTitle(\n\t\t\tString siteKey, List<String> titles)", "class_method_signature": "WikibaseDataFetcher.getEntityDocumentsByTitle(\n\t\t\tString siteKey, List<String> titles)", "testcase": false, "constructor": false}, {"identifier": "getMediaInfoIdByFileName", "parameters": "(String fileName)", "modifiers": "public", "return": "MediaInfoIdValue", "signature": "MediaInfoIdValue getMediaInfoIdByFileName(String fileName)", "full_signature": "public MediaInfoIdValue getMediaInfoIdByFileName(String fileName)", "class_method_signature": "WikibaseDataFetcher.getMediaInfoIdByFileName(String fileName)", "testcase": false, "constructor": false}, {"identifier": "getMediaInfoIdsByFileName", "parameters": "(String... fileNames)", "modifiers": "public", "return": "Map<String, MediaInfoIdValue>", "signature": "Map<String, MediaInfoIdValue> getMediaInfoIdsByFileName(String... fileNames)", "full_signature": "public Map<String, MediaInfoIdValue> getMediaInfoIdsByFileName(String... fileNames)", "class_method_signature": "WikibaseDataFetcher.getMediaInfoIdsByFileName(String... fileNames)", "testcase": false, "constructor": false}, {"identifier": "getMediaInfoIdsByFileName", "parameters": "(List<String> fileNames)", "modifiers": "public", "return": "Map<String, MediaInfoIdValue>", "signature": "Map<String, MediaInfoIdValue> getMediaInfoIdsByFileName(List<String> fileNames)", "full_signature": "public Map<String, MediaInfoIdValue> getMediaInfoIdsByFileName(List<String> fileNames)", "class_method_signature": "WikibaseDataFetcher.getMediaInfoIdsByFileName(List<String> fileNames)", "testcase": false, "constructor": false}, {"identifier": "getEntityDocumentMap", "parameters": "(int numOfEntities,\n\t\t\tWbGetEntitiesActionData properties)", "modifiers": "", "return": "Map<String, EntityDocument>", "signature": "Map<String, EntityDocument> getEntityDocumentMap(int numOfEntities,\n\t\t\tWbGetEntitiesActionData properties)", "full_signature": " Map<String, EntityDocument> getEntityDocumentMap(int numOfEntities,\n\t\t\tWbGetEntitiesActionData properties)", "class_method_signature": "WikibaseDataFetcher.getEntityDocumentMap(int numOfEntities,\n\t\t\tWbGetEntitiesActionData properties)", "testcase": false, "constructor": false}, {"identifier": "searchEntities", "parameters": "(String search)", "modifiers": "public", "return": "List<WbSearchEntitiesResult>", "signature": "List<WbSearchEntitiesResult> searchEntities(String search)", "full_signature": "public List<WbSearchEntitiesResult> searchEntities(String search)", "class_method_signature": "WikibaseDataFetcher.searchEntities(String search)", "testcase": false, "constructor": false}, {"identifier": "searchEntities", "parameters": "(String search, String language)", "modifiers": "public", "return": "List<WbSearchEntitiesResult>", "signature": "List<WbSearchEntitiesResult> searchEntities(String search, String language)", "full_signature": "public List<WbSearchEntitiesResult> searchEntities(String search, String language)", "class_method_signature": "WikibaseDataFetcher.searchEntities(String search, String language)", "testcase": false, "constructor": false}, {"identifier": "searchEntities", "parameters": "(String search, Long limit)", "modifiers": "public", "return": "List<WbSearchEntitiesResult>", "signature": "List<WbSearchEntitiesResult> searchEntities(String search, Long limit)", "full_signature": "public List<WbSearchEntitiesResult> searchEntities(String search, Long limit)", "class_method_signature": "WikibaseDataFetcher.searchEntities(String search, Long limit)", "testcase": false, "constructor": false}, {"identifier": "searchEntities", "parameters": "(String search, String language, Long limit)", "modifiers": "public", "return": "List<WbSearchEntitiesResult>", "signature": "List<WbSearchEntitiesResult> searchEntities(String search, String language, Long limit)", "full_signature": "public List<WbSearchEntitiesResult> searchEntities(String search, String language, Long limit)", "class_method_signature": "WikibaseDataFetcher.searchEntities(String search, String language, Long limit)", "testcase": false, "constructor": false}, {"identifier": "searchEntities", "parameters": "(WbGetEntitiesSearchData properties)", "modifiers": "public", "return": "List<WbSearchEntitiesResult>", "signature": "List<WbSearchEntitiesResult> searchEntities(WbGetEntitiesSearchData properties)", "full_signature": "public List<WbSearchEntitiesResult> searchEntities(WbGetEntitiesSearchData properties)", "class_method_signature": "WikibaseDataFetcher.searchEntities(WbGetEntitiesSearchData properties)", "testcase": false, "constructor": false}, {"identifier": "configureProperties", "parameters": "(WbGetEntitiesActionData properties)", "modifiers": "", "return": "void", "signature": "void configureProperties(WbGetEntitiesActionData properties)", "full_signature": " void configureProperties(WbGetEntitiesActionData properties)", "class_method_signature": "WikibaseDataFetcher.configureProperties(WbGetEntitiesActionData properties)", "testcase": false, "constructor": false}, {"identifier": "setRequestProps", "parameters": "(WbGetEntitiesActionData properties)", "modifiers": "private", "return": "void", "signature": "void setRequestProps(WbGetEntitiesActionData properties)", "full_signature": "private void setRequestProps(WbGetEntitiesActionData properties)", "class_method_signature": "WikibaseDataFetcher.setRequestProps(WbGetEntitiesActionData properties)", "testcase": false, "constructor": false}, {"identifier": "setRequestLanguages", "parameters": "(WbGetEntitiesActionData properties)", "modifiers": "private", "return": "void", "signature": "void setRequestLanguages(WbGetEntitiesActionData properties)", "full_signature": "private void setRequestLanguages(WbGetEntitiesActionData properties)", "class_method_signature": "WikibaseDataFetcher.setRequestLanguages(WbGetEntitiesActionData properties)", "testcase": false, "constructor": false}, {"identifier": "setRequestSitefilter", "parameters": "(WbGetEntitiesActionData properties)", "modifiers": "private", "return": "void", "signature": "void setRequestSitefilter(WbGetEntitiesActionData properties)", "full_signature": "private void setRequestSitefilter(WbGetEntitiesActionData properties)", "class_method_signature": "WikibaseDataFetcher.setRequestSitefilter(WbGetEntitiesActionData properties)", "testcase": false, "constructor": false}], "file": "wdtk-wikibaseapi/src/main/java/org/wikidata/wdtk/wikibaseapi/WikibaseDataFetcher.java"}, "focal_method": {"identifier": "getEntityDocuments", "parameters": "(String... entityIds)", "modifiers": "public", "return": "Map<String, EntityDocument>", "body": "public Map<String, EntityDocument> getEntityDocuments(String... entityIds)\n\t\t\tthrows MediaWikiApiErrorException, IOException {\n\t\treturn getEntityDocuments(Arrays.asList(entityIds));\n\t}", "signature": "Map<String, EntityDocument> getEntityDocuments(String... entityIds)", "full_signature": "public Map<String, EntityDocument> getEntityDocuments(String... entityIds)", "class_method_signature": "WikibaseDataFetcher.getEntityDocuments(String... entityIds)", "testcase": false, "constructor": false, "invocations": ["getEntityDocuments", "asList"]}, "repository": {"repo_id": 16144428, "url": "https://github.com/Wikidata/Wikidata-Toolkit", "language": "Java", "is_fork": false, "fork_count": 80, "stargazer_count": 264, "size": 11241, "license": "licensed"}}