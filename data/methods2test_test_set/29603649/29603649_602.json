{"test_class": {"identifier": "TemplateDescriptorParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEMPLATE_FORMATTER_TAG = \"template-formatter\";", "modifier": "private static final", "type": "String", "declarator": "TEMPLATE_FORMATTER_TAG = \"template-formatter\"", "var_name": "TEMPLATE_FORMATTER_TAG"}, {"original_string": "private static final String TEMPLATE_FORMATTER_SET_INVOKER_TAG = \"template-formatter-set-invoker\";", "modifier": "private static final", "type": "String", "declarator": "TEMPLATE_FORMATTER_SET_INVOKER_TAG = \"template-formatter-set-invoker\"", "var_name": "TEMPLATE_FORMATTER_SET_INVOKER_TAG"}, {"original_string": "private MyNodeList templateFormatters;", "modifier": "private", "type": "MyNodeList", "declarator": "templateFormatters", "var_name": "templateFormatters"}, {"original_string": "private MyNodeList params;", "modifier": "private", "type": "MyNodeList", "declarator": "params", "var_name": "params"}, {"original_string": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\n    private Element node;", "modifier": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\n    private", "type": "Element", "declarator": "node", "var_name": "node"}, {"original_string": "@Mock\n    private Element element;", "modifier": "@Mock\n    private", "type": "Element", "declarator": "element", "var_name": "element"}, {"original_string": "@Mock\n    private Element paramElement;", "modifier": "@Mock\n    private", "type": "Element", "declarator": "paramElement", "var_name": "paramElement"}, {"original_string": "@Mock\n    private Document document;", "modifier": "@Mock\n    private", "type": "Document", "declarator": "document", "var_name": "document"}, {"original_string": "@Mock\n    private StubConfigXPathEvaluator xPathEvaluator;", "modifier": "@Mock\n    private", "type": "StubConfigXPathEvaluator", "declarator": "xPathEvaluator", "var_name": "xPathEvaluator"}, {"original_string": "@Mock\n    private ResponseFormatterInitializer formatterInitializer;", "modifier": "@Mock\n    private", "type": "ResponseFormatterInitializer", "declarator": "formatterInitializer", "var_name": "formatterInitializer"}, {"original_string": "@Mock\n    private ResponseFormatter templateFormatter;", "modifier": "@Mock\n    private", "type": "ResponseFormatter", "declarator": "templateFormatter", "var_name": "templateFormatter"}, {"original_string": "@Mock\n    private StubConfigurationAccess configurationAccess;", "modifier": "@Mock\n    private", "type": "StubConfigurationAccess", "declarator": "configurationAccess", "var_name": "configurationAccess"}, {"original_string": "@Mock\n    private PropertyDto properties;", "modifier": "@Mock\n    private", "type": "PropertyDto", "declarator": "properties", "var_name": "properties"}, {"original_string": "@InjectMocks\n    private TemplateDescriptorParser underTest;", "modifier": "@InjectMocks\n    private", "type": "TemplateDescriptorParser", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-stub-configuration-parser/src/test/java/com/epam/wilma/stubconfig/dom/parser/node/TemplateDescriptorParserTest.java"}, "test_case": {"identifier": "testParseNodeShouldReturnEmptySetIfNodeHasNoChildren", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseNodeShouldReturnEmptySetIfNodeHasNoChildren() {\n        //GIVEN\n        given(node.getChildNodes()).willReturn(null);\n        //WHEN\n        Set<ResponseFormatterDescriptor> actual = underTest.parseNode(node, document);\n        //THEN\n        assertTrue(actual.isEmpty());\n    }", "signature": "void testParseNodeShouldReturnEmptySetIfNodeHasNoChildren()", "full_signature": "@Test public void testParseNodeShouldReturnEmptySetIfNodeHasNoChildren()", "class_method_signature": "TemplateDescriptorParserTest.testParseNodeShouldReturnEmptySetIfNodeHasNoChildren()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "getChildNodes", "parseNode", "assertTrue", "isEmpty"]}, "focal_class": {"identifier": "TemplateDescriptorParser", "superclass": "", "interfaces": "implements NodeParser<Set<ResponseFormatterDescriptor>>", "fields": [{"original_string": "private static final String TEMPLATE_FORMATTER_SET_INVOKER_TAG = \"template-formatter-set-invoker\";", "modifier": "private static final", "type": "String", "declarator": "TEMPLATE_FORMATTER_SET_INVOKER_TAG = \"template-formatter-set-invoker\"", "var_name": "TEMPLATE_FORMATTER_SET_INVOKER_TAG"}, {"original_string": "private static final String TEMPLATE_FORMATTER_TAG = \"template-formatter\";", "modifier": "private static final", "type": "String", "declarator": "TEMPLATE_FORMATTER_TAG = \"template-formatter\"", "var_name": "TEMPLATE_FORMATTER_TAG"}, {"original_string": "private Integer maxDepthOfXmlTree;", "modifier": "private", "type": "Integer", "declarator": "maxDepthOfXmlTree", "var_name": "maxDepthOfXmlTree"}, {"original_string": "@Autowired\n    private StubConfigXPathEvaluator xPathEvaluator;", "modifier": "@Autowired\n    private", "type": "StubConfigXPathEvaluator", "declarator": "xPathEvaluator", "var_name": "xPathEvaluator"}, {"original_string": "@Autowired\n    private ResponseFormatterInitializer formatterInitializer;", "modifier": "@Autowired\n    private", "type": "ResponseFormatterInitializer", "declarator": "formatterInitializer", "var_name": "formatterInitializer"}, {"original_string": "@Autowired\n    private StubConfigurationAccess configurationAccess;", "modifier": "@Autowired\n    private", "type": "StubConfigurationAccess", "declarator": "configurationAccess", "var_name": "configurationAccess"}], "methods": [{"identifier": "parseNode", "parameters": "(final Node node, final Document document)", "modifiers": "@Override public", "return": "Set<ResponseFormatterDescriptor>", "signature": "Set<ResponseFormatterDescriptor> parseNode(final Node node, final Document document)", "full_signature": "@Override public Set<ResponseFormatterDescriptor> parseNode(final Node node, final Document document)", "class_method_signature": "TemplateDescriptorParser.parseNode(final Node node, final Document document)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(final Node node, final Document document, final int depth)", "modifiers": "private", "return": "Set<ResponseFormatterDescriptor>", "signature": "Set<ResponseFormatterDescriptor> parse(final Node node, final Document document, final int depth)", "full_signature": "private Set<ResponseFormatterDescriptor> parse(final Node node, final Document document, final int depth)", "class_method_signature": "TemplateDescriptorParser.parse(final Node node, final Document document, final int depth)", "testcase": false, "constructor": false}, {"identifier": "parseTemplateFormatterSet", "parameters": "(final String templateFormatterSetName, final Document document, final int depth)", "modifiers": "private", "return": "Set<ResponseFormatterDescriptor>", "signature": "Set<ResponseFormatterDescriptor> parseTemplateFormatterSet(final String templateFormatterSetName, final Document document, final int depth)", "full_signature": "private Set<ResponseFormatterDescriptor> parseTemplateFormatterSet(final String templateFormatterSetName, final Document document, final int depth)", "class_method_signature": "TemplateDescriptorParser.parseTemplateFormatterSet(final String templateFormatterSetName, final Document document, final int depth)", "testcase": false, "constructor": false}, {"identifier": "parseTemplateFormatter", "parameters": "(final Element element)", "modifiers": "private", "return": "ResponseFormatterDescriptor", "signature": "ResponseFormatterDescriptor parseTemplateFormatter(final Element element)", "full_signature": "private ResponseFormatterDescriptor parseTemplateFormatter(final Element element)", "class_method_signature": "TemplateDescriptorParser.parseTemplateFormatter(final Element element)", "testcase": false, "constructor": false}, {"identifier": "parseTemplateFormatterParameters", "parameters": "(final NodeList params)", "modifiers": "private", "return": "ParameterList", "signature": "ParameterList parseTemplateFormatterParameters(final NodeList params)", "full_signature": "private ParameterList parseTemplateFormatterParameters(final NodeList params)", "class_method_signature": "TemplateDescriptorParser.parseTemplateFormatterParameters(final NodeList params)", "testcase": false, "constructor": false}, {"identifier": "validateDepth", "parameters": "(final int depth, final String invokerName)", "modifiers": "private", "return": "int", "signature": "int validateDepth(final int depth, final String invokerName)", "full_signature": "private int validateDepth(final int depth, final String invokerName)", "class_method_signature": "TemplateDescriptorParser.validateDepth(final int depth, final String invokerName)", "testcase": false, "constructor": false}, {"identifier": "getMaxDepth", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void getMaxDepth()", "full_signature": "private void getMaxDepth()", "class_method_signature": "TemplateDescriptorParser.getMaxDepth()", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-stub-configuration-parser/src/main/java/com/epam/wilma/stubconfig/dom/parser/node/TemplateDescriptorParser.java"}, "focal_method": {"identifier": "parseNode", "parameters": "(final Node node, final Document document)", "modifiers": "@Override public", "return": "Set<ResponseFormatterDescriptor>", "body": "@Override\n    public Set<ResponseFormatterDescriptor> parseNode(final Node node, final Document document) {\n        //This number represents the depth of the subtree\n        int depth = 0;\n        return parse(node, document, depth);\n    }", "signature": "Set<ResponseFormatterDescriptor> parseNode(final Node node, final Document document)", "full_signature": "@Override public Set<ResponseFormatterDescriptor> parseNode(final Node node, final Document document)", "class_method_signature": "TemplateDescriptorParser.parseNode(final Node node, final Document document)", "testcase": false, "constructor": false, "invocations": ["parse"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}