{"test_class": {"identifier": "TimerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Reservoir reservoir = mock(Reservoir.class);", "modifier": "private final", "type": "Reservoir", "declarator": "reservoir = mock(Reservoir.class)", "var_name": "reservoir"}, {"original_string": "private final Clock clock = new Clock() {\n        // a mock clock that increments its ticker by 50msec per call\n        private long val = 0;\n\n        @Override\n        public long getTick() {\n            return val += 50000000;\n        }\n    };", "modifier": "private final", "type": "Clock", "declarator": "clock = new Clock() {\n        // a mock clock that increments its ticker by 50msec per call\n        private long val = 0;\n\n        @Override\n        public long getTick() {\n            return val += 50000000;\n        }\n    }", "var_name": "clock"}, {"original_string": "private final Timer timer = new Timer(reservoir, clock);", "modifier": "private final", "type": "Timer", "declarator": "timer = new Timer(reservoir, clock)", "var_name": "timer"}], "file": "metrics-core/src/test/java/com/codahale/metrics/TimerTest.java"}, "test_case": {"identifier": "returnsTheSnapshotFromTheReservoir", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void returnsTheSnapshotFromTheReservoir() {\n        final Snapshot snapshot = mock(Snapshot.class);\n        when(reservoir.getSnapshot()).thenReturn(snapshot);\n\n        assertThat(timer.getSnapshot())\n                .isEqualTo(snapshot);\n    }", "signature": "void returnsTheSnapshotFromTheReservoir()", "full_signature": "@Test public void returnsTheSnapshotFromTheReservoir()", "class_method_signature": "TimerTest.returnsTheSnapshotFromTheReservoir()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getSnapshot", "isEqualTo", "assertThat", "getSnapshot"]}, "focal_class": {"identifier": "Timer", "superclass": "", "interfaces": "implements Metered, Sampling", "fields": [{"original_string": "private final Meter meter;", "modifier": "private final", "type": "Meter", "declarator": "meter", "var_name": "meter"}, {"original_string": "private final Histogram histogram;", "modifier": "private final", "type": "Histogram", "declarator": "histogram", "var_name": "histogram"}, {"original_string": "private final Clock clock;", "modifier": "private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}], "methods": [{"identifier": "Timer", "parameters": "()", "modifiers": "public", "return": "", "signature": " Timer()", "full_signature": "public  Timer()", "class_method_signature": "Timer.Timer()", "testcase": false, "constructor": true}, {"identifier": "Timer", "parameters": "(Reservoir reservoir)", "modifiers": "public", "return": "", "signature": " Timer(Reservoir reservoir)", "full_signature": "public  Timer(Reservoir reservoir)", "class_method_signature": "Timer.Timer(Reservoir reservoir)", "testcase": false, "constructor": true}, {"identifier": "Timer", "parameters": "(Reservoir reservoir, Clock clock)", "modifiers": "public", "return": "", "signature": " Timer(Reservoir reservoir, Clock clock)", "full_signature": "public  Timer(Reservoir reservoir, Clock clock)", "class_method_signature": "Timer.Timer(Reservoir reservoir, Clock clock)", "testcase": false, "constructor": true}, {"identifier": "Timer", "parameters": "(Meter meter, Histogram histogram, Clock clock)", "modifiers": "public", "return": "", "signature": " Timer(Meter meter, Histogram histogram, Clock clock)", "full_signature": "public  Timer(Meter meter, Histogram histogram, Clock clock)", "class_method_signature": "Timer.Timer(Meter meter, Histogram histogram, Clock clock)", "testcase": false, "constructor": true}, {"identifier": "update", "parameters": "(long duration, TimeUnit unit)", "modifiers": "public", "return": "void", "signature": "void update(long duration, TimeUnit unit)", "full_signature": "public void update(long duration, TimeUnit unit)", "class_method_signature": "Timer.update(long duration, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(Duration duration)", "modifiers": "public", "return": "void", "signature": "void update(Duration duration)", "full_signature": "public void update(Duration duration)", "class_method_signature": "Timer.update(Duration duration)", "testcase": false, "constructor": false}, {"identifier": "time", "parameters": "(Callable<T> event)", "modifiers": "public", "return": "T", "signature": "T time(Callable<T> event)", "full_signature": "public T time(Callable<T> event)", "class_method_signature": "Timer.time(Callable<T> event)", "testcase": false, "constructor": false}, {"identifier": "timeSupplier", "parameters": "(Supplier<T> event)", "modifiers": "public", "return": "T", "signature": "T timeSupplier(Supplier<T> event)", "full_signature": "public T timeSupplier(Supplier<T> event)", "class_method_signature": "Timer.timeSupplier(Supplier<T> event)", "testcase": false, "constructor": false}, {"identifier": "time", "parameters": "(Runnable event)", "modifiers": "public", "return": "void", "signature": "void time(Runnable event)", "full_signature": "public void time(Runnable event)", "class_method_signature": "Timer.time(Runnable event)", "testcase": false, "constructor": false}, {"identifier": "time", "parameters": "()", "modifiers": "public", "return": "Context", "signature": "Context time()", "full_signature": "public Context time()", "class_method_signature": "Timer.time()", "testcase": false, "constructor": false}, {"identifier": "getCount", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getCount()", "full_signature": "@Override public long getCount()", "class_method_signature": "Timer.getCount()", "testcase": false, "constructor": false}, {"identifier": "getFifteenMinuteRate", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getFifteenMinuteRate()", "full_signature": "@Override public double getFifteenMinuteRate()", "class_method_signature": "Timer.getFifteenMinuteRate()", "testcase": false, "constructor": false}, {"identifier": "getFiveMinuteRate", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getFiveMinuteRate()", "full_signature": "@Override public double getFiveMinuteRate()", "class_method_signature": "Timer.getFiveMinuteRate()", "testcase": false, "constructor": false}, {"identifier": "getMeanRate", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getMeanRate()", "full_signature": "@Override public double getMeanRate()", "class_method_signature": "Timer.getMeanRate()", "testcase": false, "constructor": false}, {"identifier": "getOneMinuteRate", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getOneMinuteRate()", "full_signature": "@Override public double getOneMinuteRate()", "class_method_signature": "Timer.getOneMinuteRate()", "testcase": false, "constructor": false}, {"identifier": "getSnapshot", "parameters": "()", "modifiers": "@Override public", "return": "Snapshot", "signature": "Snapshot getSnapshot()", "full_signature": "@Override public Snapshot getSnapshot()", "class_method_signature": "Timer.getSnapshot()", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(long duration)", "modifiers": "private", "return": "void", "signature": "void update(long duration)", "full_signature": "private void update(long duration)", "class_method_signature": "Timer.update(long duration)", "testcase": false, "constructor": false}], "file": "metrics-core/src/main/java/com/codahale/metrics/Timer.java"}, "focal_method": {"identifier": "getSnapshot", "parameters": "()", "modifiers": "@Override public", "return": "Snapshot", "body": "@Override\n    public Snapshot getSnapshot() {\n        return histogram.getSnapshot();\n    }", "signature": "Snapshot getSnapshot()", "full_signature": "@Override public Snapshot getSnapshot()", "class_method_signature": "Timer.getSnapshot()", "testcase": false, "constructor": false, "invocations": ["getSnapshot"]}, "repository": {"repo_id": 537800, "url": "https://github.com/dropwizard/metrics", "stars": 6879, "created": "2/26/2010 7:44:42 PM +00:00", "updates": "2020-01-26T22:33:14+00:00", "fork": "False", "license": "licensed"}}