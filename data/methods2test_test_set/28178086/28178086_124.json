{"test_class": {"identifier": "TsCursorAsFillerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String provider = \"MyProvider\";", "modifier": "private final", "type": "String", "declarator": "provider = \"MyProvider\"", "var_name": "provider"}, {"original_string": "private final Logger logger = NOPLogger.NOP_LOGGER;", "modifier": "private final", "type": "Logger", "declarator": "logger = NOPLogger.NOP_LOGGER", "var_name": "logger"}, {"original_string": "private final HasDataMoniker monikers = HasDataMoniker.usingUri(provider);", "modifier": "private final", "type": "HasDataMoniker", "declarator": "monikers = HasDataMoniker.usingUri(provider)", "var_name": "monikers"}, {"original_string": "private final HasTsCursor badCursor = new FailingTsCursorSupport(provider, \"boom\");", "modifier": "private final", "type": "HasTsCursor", "declarator": "badCursor = new FailingTsCursorSupport(provider, \"boom\")", "var_name": "badCursor"}, {"original_string": "private final MetaData customMeta = metaOf(\"hello\", \"world\");", "modifier": "private final", "type": "MetaData", "declarator": "customMeta = metaOf(\"hello\", \"world\")", "var_name": "customMeta"}, {"original_string": "private final IdTsSupport goodCursor = IdTsSupport.builder()\n            .add(new LinearId(\"node\", \"leaf1\"))\n            .add(new LinearId(\"node\", \"leaf2\"), Data.M1)\n            .add(new LinearId(\"leaf3\"), Data.M2, customMeta)\n            .nodeMeta(o -> {\n                switch (o.toString()) {\n                    case \"\":\n                        return Collections.singletonMap(\"type\", \"root\");\n                    case \"node\":\n                        return Collections.singletonMap(\"type\", \"node\");\n                    default:\n                        return Collections.emptyMap();\n                }\n            })\n            .build();", "modifier": "private final", "type": "IdTsSupport", "declarator": "goodCursor = IdTsSupport.builder()\n            .add(new LinearId(\"node\", \"leaf1\"))\n            .add(new LinearId(\"node\", \"leaf2\"), Data.M1)\n            .add(new LinearId(\"leaf3\"), Data.M2, customMeta)\n            .nodeMeta(o -> {\n                switch (o.toString()) {\n                    case \"\":\n                        return Collections.singletonMap(\"type\", \"root\");\n                    case \"node\":\n                        return Collections.singletonMap(\"type\", \"node\");\n                    default:\n                        return Collections.emptyMap();\n                }\n            })\n            .build()", "var_name": "goodCursor"}, {"original_string": "private final TsMoniker goodSource;", "modifier": "private final", "type": "TsMoniker", "declarator": "goodSource", "var_name": "goodSource"}, {"original_string": "private final TsMoniker goodCollection;", "modifier": "private final", "type": "TsMoniker", "declarator": "goodCollection", "var_name": "goodCollection"}, {"original_string": "private final TsMoniker goodSeries;", "modifier": "private final", "type": "TsMoniker", "declarator": "goodSeries", "var_name": "goodSeries"}, {"original_string": "private final TsMoniker leaf1;", "modifier": "private final", "type": "TsMoniker", "declarator": "leaf1", "var_name": "leaf1"}, {"original_string": "private final TsMoniker leaf2;", "modifier": "private final", "type": "TsMoniker", "declarator": "leaf2", "var_name": "leaf2"}, {"original_string": "private final TsMoniker leaf3;", "modifier": "private final", "type": "TsMoniker", "declarator": "leaf3", "var_name": "leaf3"}], "file": "jtss/src/test/java/ec/tss/tsproviders/cursor/TsCursorAsFillerTest.java"}, "test_case": {"identifier": "testNulls", "parameters": "()", "modifiers": "@Test @SuppressWarnings(\"null\") public", "return": "void", "body": "@Test\n    @SuppressWarnings(\"null\")\n    public void testNulls() {\n        TsFiller filler = TsCursorAsFiller.of(logger, goodCursor, monikers, goodCursor);\n\n        assertThatThrownBy(() -> filler.fillCollection(null)).isInstanceOf(NullPointerException.class);\n        assertThatThrownBy(() -> filler.fillSeries(null)).isInstanceOf(NullPointerException.class);\n    }", "signature": "void testNulls()", "full_signature": "@Test @SuppressWarnings(\"null\") public void testNulls()", "class_method_signature": "TsCursorAsFillerTest.testNulls()", "testcase": true, "constructor": false, "invocations": ["of", "isInstanceOf", "assertThatThrownBy", "fillCollection", "isInstanceOf", "assertThatThrownBy", "fillSeries"]}, "focal_class": {"identifier": "TsCursorAsFiller", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "TsCursorAsFiller", "parameters": "()", "modifiers": "private", "return": "", "signature": " TsCursorAsFiller()", "full_signature": "private  TsCursorAsFiller()", "class_method_signature": "TsCursorAsFiller.TsCursorAsFiller()", "testcase": false, "constructor": true}, {"identifier": "of", "parameters": "(@NonNull Logger logger, @NonNull HasTsCursor hdc, @NonNull HasDataMoniker hdm, @NonNull HasDataDisplayName hddn)", "modifiers": "@NonNull public static", "return": "TsFiller", "signature": "TsFiller of(@NonNull Logger logger, @NonNull HasTsCursor hdc, @NonNull HasDataMoniker hdm, @NonNull HasDataDisplayName hddn)", "full_signature": "@NonNull public static TsFiller of(@NonNull Logger logger, @NonNull HasTsCursor hdc, @NonNull HasDataMoniker hdm, @NonNull HasDataDisplayName hddn)", "class_method_signature": "TsCursorAsFiller.of(@NonNull Logger logger, @NonNull HasTsCursor hdc, @NonNull HasDataMoniker hdm, @NonNull HasDataDisplayName hddn)", "testcase": false, "constructor": false}], "file": "jtss/src/main/java/ec/tss/tsproviders/cursor/TsCursorAsFiller.java"}, "focal_method": {"identifier": "of", "parameters": "(@NonNull Logger logger, @NonNull HasTsCursor hdc, @NonNull HasDataMoniker hdm, @NonNull HasDataDisplayName hddn)", "modifiers": "@NonNull public static", "return": "TsFiller", "body": "@NonNull\n    public static TsFiller of(@NonNull Logger logger, @NonNull HasTsCursor hdc, @NonNull HasDataMoniker hdm, @NonNull HasDataDisplayName hddn) {\n        return new ComposedFiller(new CursorResource(logger, hdc, hdm, hddn));\n    }", "signature": "TsFiller of(@NonNull Logger logger, @NonNull HasTsCursor hdc, @NonNull HasDataMoniker hdm, @NonNull HasDataDisplayName hddn)", "full_signature": "@NonNull public static TsFiller of(@NonNull Logger logger, @NonNull HasTsCursor hdc, @NonNull HasDataMoniker hdm, @NonNull HasDataDisplayName hddn)", "class_method_signature": "TsCursorAsFiller.of(@NonNull Logger logger, @NonNull HasTsCursor hdc, @NonNull HasDataMoniker hdm, @NonNull HasDataDisplayName hddn)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}