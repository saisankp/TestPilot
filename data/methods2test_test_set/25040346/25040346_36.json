{"test_class": {"identifier": "PluginTest", "superclass": "extends TestBase", "interfaces": "", "fields": [{"original_string": "protected ProgressListenerFake progressListener;", "modifier": "protected", "type": "ProgressListenerFake", "declarator": "progressListener", "var_name": "progressListener"}], "file": "domain/src/test/java/org/m4m/domain/PluginTest.java"}, "test_case": {"identifier": "canConnectFirst", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void canConnectFirst() {\n        AudioEncoder audioEncoder = create.audioEncoder().construct();\n\n        boolean shouldBeTrue = audioEncoder.canConnectFirst(mock(IInputRaw.class));\n\n        assertTrue(shouldBeTrue);\n    }", "signature": "void canConnectFirst()", "full_signature": "@Test public void canConnectFirst()", "class_method_signature": "PluginTest.canConnectFirst()", "testcase": true, "constructor": false, "invocations": ["construct", "audioEncoder", "canConnectFirst", "mock", "assertTrue"]}, "focal_class": {"identifier": "Plugin", "superclass": "extends Input", "interfaces": "implements ITransform, IPluginOutput", "fields": [{"original_string": "private CommandQueue outputQueue = new CommandQueue();", "modifier": "private", "type": "CommandQueue", "declarator": "outputQueue = new CommandQueue()", "var_name": "outputQueue"}, {"original_string": "protected MediaFormat mediaFormat = null;", "modifier": "protected", "type": "MediaFormat", "declarator": "mediaFormat = null", "var_name": "mediaFormat"}], "methods": [{"identifier": "Plugin", "parameters": "()", "modifiers": "protected", "return": "", "signature": " Plugin()", "full_signature": "protected  Plugin()", "class_method_signature": "Plugin.Plugin()", "testcase": false, "constructor": true}, {"identifier": "checkIfOutputQueueHasData", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void checkIfOutputQueueHasData()", "full_signature": "public void checkIfOutputQueueHasData()", "class_method_signature": "Plugin.checkIfOutputQueueHasData()", "testcase": false, "constructor": false}, {"identifier": "notifySurfaceReady", "parameters": "(ISurface surface)", "modifiers": "public", "return": "void", "signature": "void notifySurfaceReady(ISurface surface)", "full_signature": "public void notifySurfaceReady(ISurface surface)", "class_method_signature": "Plugin.notifySurfaceReady(ISurface surface)", "testcase": false, "constructor": false}, {"identifier": "getOutputCommandQueue", "parameters": "()", "modifiers": "@Override public", "return": "CommandQueue", "signature": "CommandQueue getOutputCommandQueue()", "full_signature": "@Override public CommandQueue getOutputCommandQueue()", "class_method_signature": "Plugin.getOutputCommandQueue()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "public abstract", "return": "void", "signature": "void start()", "full_signature": "public abstract void start()", "class_method_signature": "Plugin.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public abstract", "return": "void", "signature": "void stop()", "full_signature": "public abstract void stop()", "class_method_signature": "Plugin.stop()", "testcase": false, "constructor": false}, {"identifier": "push", "parameters": "(Frame frame)", "modifiers": "@Override public", "return": "void", "signature": "void push(Frame frame)", "full_signature": "@Override public void push(Frame frame)", "class_method_signature": "Plugin.push(Frame frame)", "testcase": false, "constructor": false}, {"identifier": "getMediaFormatType", "parameters": "()", "modifiers": "@Override public", "return": "MediaFormatType", "signature": "MediaFormatType getMediaFormatType()", "full_signature": "@Override public MediaFormatType getMediaFormatType()", "class_method_signature": "Plugin.getMediaFormatType()", "testcase": false, "constructor": false}, {"identifier": "getMediaFormatByType", "parameters": "(MediaFormatType mediaFormatType)", "modifiers": "@Override public", "return": "MediaFormat", "signature": "MediaFormat getMediaFormatByType(MediaFormatType mediaFormatType)", "full_signature": "@Override public MediaFormat getMediaFormatByType(MediaFormatType mediaFormatType)", "class_method_signature": "Plugin.getMediaFormatByType(MediaFormatType mediaFormatType)", "testcase": false, "constructor": false}, {"identifier": "getOutputMediaFormat", "parameters": "()", "modifiers": "@Override public", "return": "MediaFormat", "signature": "MediaFormat getOutputMediaFormat()", "full_signature": "@Override public MediaFormat getOutputMediaFormat()", "class_method_signature": "Plugin.getOutputMediaFormat()", "testcase": false, "constructor": false}, {"identifier": "incrementConnectedPluginsCount", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void incrementConnectedPluginsCount()", "full_signature": "@Override public void incrementConnectedPluginsCount()", "class_method_signature": "Plugin.incrementConnectedPluginsCount()", "testcase": false, "constructor": false}, {"identifier": "canConnectFirst", "parameters": "(IInputRaw connector)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canConnectFirst(IInputRaw connector)", "full_signature": "@Override public boolean canConnectFirst(IInputRaw connector)", "class_method_signature": "Plugin.canConnectFirst(IInputRaw connector)", "testcase": false, "constructor": false}, {"identifier": "canConnectFirst", "parameters": "(IOutputRaw connector)", "modifiers": "public", "return": "boolean", "signature": "boolean canConnectFirst(IOutputRaw connector)", "full_signature": "public boolean canConnectFirst(IOutputRaw connector)", "class_method_signature": "Plugin.canConnectFirst(IOutputRaw connector)", "testcase": false, "constructor": false}, {"identifier": "recreate", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void recreate()", "full_signature": "@Override public void recreate()", "class_method_signature": "Plugin.recreate()", "testcase": false, "constructor": false}, {"identifier": "setInputResolution", "parameters": "(Resolution resolution)", "modifiers": "public", "return": "void", "signature": "void setInputResolution(Resolution resolution)", "full_signature": "public void setInputResolution(Resolution resolution)", "class_method_signature": "Plugin.setInputResolution(Resolution resolution)", "testcase": false, "constructor": false}], "file": "domain/src/main/java/org/m4m/domain/Plugin.java"}, "focal_method": {"identifier": "canConnectFirst", "parameters": "(IInputRaw connector)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean canConnectFirst(IInputRaw connector) {\n        return true;\n    }", "signature": "boolean canConnectFirst(IInputRaw connector)", "full_signature": "@Override public boolean canConnectFirst(IInputRaw connector)", "class_method_signature": "Plugin.canConnectFirst(IInputRaw connector)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 25040346, "url": "https://github.com/INDExOS/media-for-mobile", "language": "Java", "is_fork": false, "fork_count": 167, "stargazer_count": 416, "size": 619, "license": "licensed"}}