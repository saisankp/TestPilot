{"test_class": {"identifier": "MediaButtonTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    GazeIndicator progressIndicator;", "modifier": "@Mock", "type": "GazeIndicator", "declarator": "progressIndicator", "var_name": "progressIndicator"}], "file": "gazeplay-games/src/test/java/net/gazeplay/games/mediaPlayer/MediaButtonTest.java"}, "test_case": {"identifier": "shouldCreateEventsHandlersForMediaButtonWithSetUpEventMethodCall", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void shouldCreateEventsHandlersForMediaButtonWithSetUpEventMethodCall() {\n        MediaButton mediaButton = new MediaButton(500, 500);\n        EventHandler<ActionEvent> testEvent = e -> {\n            String testString = \"test\";\n        };\n        mediaButton.setupEvent(testEvent, progressIndicator);\n        Assertions.assertNotEquals(mediaButton.getClickEvent(), (MediaButton.emptyEvent));\n        Assertions.assertNotEquals(mediaButton.getEnterEvent(), (MediaButton.emptyEvent));\n        Assertions.assertNotEquals(mediaButton.getExitEvent(), (MediaButton.emptyEvent));\n    }", "signature": "void shouldCreateEventsHandlersForMediaButtonWithSetUpEventMethodCall()", "full_signature": "@Test void shouldCreateEventsHandlersForMediaButtonWithSetUpEventMethodCall()", "class_method_signature": "MediaButtonTest.shouldCreateEventsHandlersForMediaButtonWithSetUpEventMethodCall()", "testcase": true, "constructor": false, "invocations": ["setupEvent", "assertNotEquals", "getClickEvent", "assertNotEquals", "getEnterEvent", "assertNotEquals", "getExitEvent"]}, "focal_class": {"identifier": "MediaButton", "superclass": "extends StackPaneButton", "interfaces": "", "fields": [{"original_string": "public static final EventHandler<Event> emptyEvent = e -> {\n    };", "modifier": "public static final", "type": "EventHandler<Event>", "declarator": "emptyEvent = e -> {\n    }", "var_name": "emptyEvent"}, {"original_string": "@Getter\n    private EventHandler<Event> enterEvent = emptyEvent;", "modifier": "@Getter\n    private", "type": "EventHandler<Event>", "declarator": "enterEvent = emptyEvent", "var_name": "enterEvent"}, {"original_string": "@Getter\n    private EventHandler<Event> exitEvent = emptyEvent;", "modifier": "@Getter\n    private", "type": "EventHandler<Event>", "declarator": "exitEvent = emptyEvent", "var_name": "exitEvent"}, {"original_string": "@Getter\n    private EventHandler<Event> clickEvent = emptyEvent;", "modifier": "@Getter\n    private", "type": "EventHandler<Event>", "declarator": "clickEvent = emptyEvent", "var_name": "clickEvent"}, {"original_string": "@Getter\n    @Setter\n    private MediaFile mediaFile;", "modifier": "@Getter\n    @Setter\n    private", "type": "MediaFile", "declarator": "mediaFile", "var_name": "mediaFile"}], "methods": [{"identifier": "MediaButton", "parameters": "(double width, double height)", "modifiers": "", "return": "", "signature": " MediaButton(double width, double height)", "full_signature": "  MediaButton(double width, double height)", "class_method_signature": "MediaButton.MediaButton(double width, double height)", "testcase": false, "constructor": true}, {"identifier": "setupImage", "parameters": "()", "modifiers": "", "return": "void", "signature": "void setupImage()", "full_signature": " void setupImage()", "class_method_signature": "MediaButton.setupImage()", "testcase": false, "constructor": false}, {"identifier": "setupEvent", "parameters": "(EventHandler<ActionEvent> newMediaEvent, GazeIndicator progressIndicator)", "modifiers": "", "return": "void", "signature": "void setupEvent(EventHandler<ActionEvent> newMediaEvent, GazeIndicator progressIndicator)", "full_signature": " void setupEvent(EventHandler<ActionEvent> newMediaEvent, GazeIndicator progressIndicator)", "class_method_signature": "MediaButton.setupEvent(EventHandler<ActionEvent> newMediaEvent, GazeIndicator progressIndicator)", "testcase": false, "constructor": false}], "file": "gazeplay-games/src/main/java/net/gazeplay/games/mediaPlayer/MediaButton.java"}, "focal_method": {"identifier": "setupEvent", "parameters": "(EventHandler<ActionEvent> newMediaEvent, GazeIndicator progressIndicator)", "modifiers": "", "return": "void", "body": "void setupEvent(EventHandler<ActionEvent> newMediaEvent, GazeIndicator progressIndicator) {\n        this.removeEventFilter(MouseEvent.MOUSE_CLICKED, clickEvent);\n        this.removeEventFilter(GazeEvent.GAZE_ENTERED, enterEvent);\n        this.removeEventFilter(GazeEvent.GAZE_EXITED, exitEvent);\n\n        clickEvent = e -> {\n            newMediaEvent.handle(null);\n        };\n\n        this.addEventFilter(MouseEvent.MOUSE_CLICKED, clickEvent);\n\n        enterEvent = eventEntered -> {\n            if(!this.getChildren().contains(progressIndicator)) {\n                this.getChildren().add(progressIndicator);\n            }\n            progressIndicator.setOnFinish(newMediaEvent);\n            progressIndicator.start();\n        };\n\n        exitEvent = eventExited -> {\n            progressIndicator.stop();\n            this.getChildren().remove(progressIndicator);\n        };\n\n        this.addEventFilter(MouseEvent.MOUSE_ENTERED, enterEvent);\n\n        this.addEventFilter(MouseEvent.MOUSE_EXITED, exitEvent);\n\n        this.addEventFilter(GazeEvent.GAZE_ENTERED, enterEvent);\n\n        this.addEventFilter(GazeEvent.GAZE_EXITED, exitEvent);\n    }", "signature": "void setupEvent(EventHandler<ActionEvent> newMediaEvent, GazeIndicator progressIndicator)", "full_signature": " void setupEvent(EventHandler<ActionEvent> newMediaEvent, GazeIndicator progressIndicator)", "class_method_signature": "MediaButton.setupEvent(EventHandler<ActionEvent> newMediaEvent, GazeIndicator progressIndicator)", "testcase": false, "constructor": false, "invocations": ["removeEventFilter", "removeEventFilter", "removeEventFilter", "handle", "addEventFilter", "contains", "getChildren", "add", "getChildren", "setOnFinish", "start", "stop", "remove", "getChildren", "addEventFilter", "addEventFilter", "addEventFilter", "addEventFilter"]}, "repository": {"repo_id": 81368488, "url": "https://github.com/GazePlay/GazePlay", "stars": 15, "created": "2/8/2017 7:39:08 PM +00:00", "updates": "2020-01-26T16:45:47+00:00", "fork": "False", "license": "licensed"}}