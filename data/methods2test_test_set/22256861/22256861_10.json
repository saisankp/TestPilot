{"test_class": {"identifier": "CloudAlgorithmTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CloudAlgorithm testAlgorithm;", "modifier": "private", "type": "CloudAlgorithm", "declarator": "testAlgorithm", "var_name": "testAlgorithm"}], "file": "s3tbx-meris-sdr/src/test/java/org/esa/s3tbx/meris/cloud/CloudAlgorithmTest.java"}, "test_case": {"identifier": "testNn2Probability", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNn2Probability() {\n        double probability = testAlgorithm.nn2Probability(0.004993);\n        assertEquals(\"probability\", 0.01313, probability, 0.00001);\n    }", "signature": "void testNn2Probability()", "full_signature": "@Test public void testNn2Probability()", "class_method_signature": "CloudAlgorithmTest.testNn2Probability()", "testcase": true, "constructor": false, "invocations": ["nn2Probability", "assertEquals"]}, "focal_class": {"identifier": "CloudAlgorithm", "superclass": "", "interfaces": "implements Cloneable", "fields": [{"original_string": "private static final String PARAM_1_KEY = \"param_1\";", "modifier": "private static final", "type": "String", "declarator": "PARAM_1_KEY = \"param_1\"", "var_name": "PARAM_1_KEY"}, {"original_string": "private static final String PARAM_2_KEY = \"param_2\";", "modifier": "private static final", "type": "String", "declarator": "PARAM_2_KEY = \"param_2\"", "var_name": "PARAM_2_KEY"}, {"original_string": "private static final String VALID_KEY = \"validExpression\";", "modifier": "private static final", "type": "String", "declarator": "VALID_KEY = \"validExpression\"", "var_name": "VALID_KEY"}, {"original_string": "private JnnNet neuralNet;", "modifier": "private", "type": "JnnNet", "declarator": "neuralNet", "var_name": "neuralNet"}, {"original_string": "private String validExpression;", "modifier": "private", "type": "String", "declarator": "validExpression", "var_name": "validExpression"}, {"original_string": "private double param1;", "modifier": "private", "type": "double", "declarator": "param1", "var_name": "param1"}, {"original_string": "private double param2;", "modifier": "private", "type": "double", "declarator": "param2", "var_name": "param2"}, {"original_string": "private double[] minInputValuesNN = new double[15];", "modifier": "private", "type": "double[]", "declarator": "minInputValuesNN = new double[15]", "var_name": "minInputValuesNN"}, {"original_string": "private double[] maxInputValuesNN = new double[15];", "modifier": "private", "type": "double[]", "declarator": "maxInputValuesNN = new double[15]", "var_name": "maxInputValuesNN"}], "methods": [{"identifier": "CloudAlgorithm", "parameters": "(File auxDataDir, String configName)", "modifiers": "public", "return": "", "signature": " CloudAlgorithm(File auxDataDir, String configName)", "full_signature": "public  CloudAlgorithm(File auxDataDir, String configName)", "class_method_signature": "CloudAlgorithm.CloudAlgorithm(File auxDataDir, String configName)", "testcase": false, "constructor": true}, {"identifier": "loadNeuralNet", "parameters": "(File neuralNetFile)", "modifiers": "private", "return": "void", "signature": "void loadNeuralNet(File neuralNetFile)", "full_signature": "private void loadNeuralNet(File neuralNetFile)", "class_method_signature": "CloudAlgorithm.loadNeuralNet(File neuralNetFile)", "testcase": false, "constructor": false}, {"identifier": "computeCloudProbability", "parameters": "(double[] cloudIn)", "modifiers": "public", "return": "double", "signature": "double computeCloudProbability(double[] cloudIn)", "full_signature": "public double computeCloudProbability(double[] cloudIn)", "class_method_signature": "CloudAlgorithm.computeCloudProbability(double[] cloudIn)", "testcase": false, "constructor": false}, {"identifier": "computeCloud", "parameters": "(final double[] cloudIn)", "modifiers": "protected", "return": "double", "signature": "double computeCloud(final double[] cloudIn)", "full_signature": "protected double computeCloud(final double[] cloudIn)", "class_method_signature": "CloudAlgorithm.computeCloud(final double[] cloudIn)", "testcase": false, "constructor": false}, {"identifier": "nn2Probability", "parameters": "(double nnResult)", "modifiers": "protected", "return": "double", "signature": "double nn2Probability(double nnResult)", "full_signature": "protected double nn2Probability(double nnResult)", "class_method_signature": "CloudAlgorithm.nn2Probability(double nnResult)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override protected", "return": "CloudAlgorithm", "signature": "CloudAlgorithm clone()", "full_signature": "@Override protected CloudAlgorithm clone()", "class_method_signature": "CloudAlgorithm.clone()", "testcase": false, "constructor": false}], "file": "s3tbx-meris-sdr/src/main/java/org/esa/s3tbx/meris/cloud/CloudAlgorithm.java"}, "focal_method": {"identifier": "nn2Probability", "parameters": "(double nnResult)", "modifiers": "protected", "return": "double", "body": "protected double nn2Probability(double nnResult) {\n        double a = (param2 * (nnResult + param1)) * (-1);\n        if (a < (-80)) {\n            a = -80;\n        } else if (a > 80) {\n            a = 80;\n        }\n        return 1.0 / (1.0 + Math.exp(a));\n    }", "signature": "double nn2Probability(double nnResult)", "full_signature": "protected double nn2Probability(double nnResult)", "class_method_signature": "CloudAlgorithm.nn2Probability(double nnResult)", "testcase": false, "constructor": false, "invocations": ["exp"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}