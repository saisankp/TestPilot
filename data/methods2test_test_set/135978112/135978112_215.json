{"test_class": {"identifier": "AbstractCoordinatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ByteBuffer EMPTY_DATA = ByteBuffer.wrap(new byte[0]);", "modifier": "private static final", "type": "ByteBuffer", "declarator": "EMPTY_DATA = ByteBuffer.wrap(new byte[0])", "var_name": "EMPTY_DATA"}, {"original_string": "private static final int SESSION_TIMEOUT_MS = 30000;", "modifier": "private static final", "type": "int", "declarator": "SESSION_TIMEOUT_MS = 30000", "var_name": "SESSION_TIMEOUT_MS"}, {"original_string": "private static final int HEARTBEAT_INTERVAL_MS = 3000;", "modifier": "private static final", "type": "int", "declarator": "HEARTBEAT_INTERVAL_MS = 3000", "var_name": "HEARTBEAT_INTERVAL_MS"}, {"original_string": "private static final long RETRY_BACKOFF_MS = 100;", "modifier": "private static final", "type": "long", "declarator": "RETRY_BACKOFF_MS = 100", "var_name": "RETRY_BACKOFF_MS"}, {"original_string": "private static final long REQUEST_TIMEOUT_MS = 40000;", "modifier": "private static final", "type": "long", "declarator": "REQUEST_TIMEOUT_MS = 40000", "var_name": "REQUEST_TIMEOUT_MS"}, {"original_string": "private static final String GROUP_ID = \"dummy-group\";", "modifier": "private static final", "type": "String", "declarator": "GROUP_ID = \"dummy-group\"", "var_name": "GROUP_ID"}, {"original_string": "private static final String METRIC_GROUP_PREFIX = \"consumer\";", "modifier": "private static final", "type": "String", "declarator": "METRIC_GROUP_PREFIX = \"consumer\"", "var_name": "METRIC_GROUP_PREFIX"}, {"original_string": "private MockClient mockClient;", "modifier": "private", "type": "MockClient", "declarator": "mockClient", "var_name": "mockClient"}, {"original_string": "private MockTime mockTime;", "modifier": "private", "type": "MockTime", "declarator": "mockTime", "var_name": "mockTime"}, {"original_string": "private Node node;", "modifier": "private", "type": "Node", "declarator": "node", "var_name": "node"}, {"original_string": "private Node coordinatorNode;", "modifier": "private", "type": "Node", "declarator": "coordinatorNode", "var_name": "coordinatorNode"}, {"original_string": "private ConsumerNetworkClient consumerClient;", "modifier": "private", "type": "ConsumerNetworkClient", "declarator": "consumerClient", "var_name": "consumerClient"}, {"original_string": "private DummyCoordinator coordinator;", "modifier": "private", "type": "DummyCoordinator", "declarator": "coordinator", "var_name": "coordinator"}], "file": "clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinatorTest.java"}, "test_case": {"identifier": "testCoordinatorDiscoveryBackoff", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCoordinatorDiscoveryBackoff() {\n        mockClient.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        mockClient.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n\n        // blackout the coordinator for 50 milliseconds to simulate a disconnect.\n        // after backing off, we should be able to connect.\n        mockClient.blackout(coordinatorNode, 50L);\n\n        long initialTime = mockTime.milliseconds();\n        coordinator.ensureCoordinatorReady();\n        long endTime = mockTime.milliseconds();\n\n        assertTrue(endTime - initialTime >= RETRY_BACKOFF_MS);\n    }", "signature": "void testCoordinatorDiscoveryBackoff()", "full_signature": "@Test public void testCoordinatorDiscoveryBackoff()", "class_method_signature": "AbstractCoordinatorTest.testCoordinatorDiscoveryBackoff()", "testcase": true, "constructor": false, "invocations": ["prepareResponse", "groupCoordinatorResponse", "code", "prepareResponse", "groupCoordinatorResponse", "code", "blackout", "milliseconds", "ensureCoordinatorReady", "milliseconds", "assertTrue"]}, "focal_class": {"identifier": "AbstractCoordinator", "superclass": "", "interfaces": "implements Closeable", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(AbstractCoordinator.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(AbstractCoordinator.class)", "var_name": "log"}, {"original_string": "private final Heartbeat heartbeat;", "modifier": "private final", "type": "Heartbeat", "declarator": "heartbeat", "var_name": "heartbeat"}, {"original_string": "private final HeartbeatTask heartbeatTask;", "modifier": "private final", "type": "HeartbeatTask", "declarator": "heartbeatTask", "var_name": "heartbeatTask"}, {"original_string": "private final int sessionTimeoutMs;", "modifier": "private final", "type": "int", "declarator": "sessionTimeoutMs", "var_name": "sessionTimeoutMs"}, {"original_string": "private final GroupCoordinatorMetrics sensors;", "modifier": "private final", "type": "GroupCoordinatorMetrics", "declarator": "sensors", "var_name": "sensors"}, {"original_string": "protected final String groupId;", "modifier": "protected final", "type": "String", "declarator": "groupId", "var_name": "groupId"}, {"original_string": "protected final ConsumerNetworkClient client;", "modifier": "protected final", "type": "ConsumerNetworkClient", "declarator": "client", "var_name": "client"}, {"original_string": "protected final Time time;", "modifier": "protected final", "type": "Time", "declarator": "time", "var_name": "time"}, {"original_string": "protected final long retryBackoffMs;", "modifier": "protected final", "type": "long", "declarator": "retryBackoffMs", "var_name": "retryBackoffMs"}, {"original_string": "private boolean needsJoinPrepare = true;", "modifier": "private", "type": "boolean", "declarator": "needsJoinPrepare = true", "var_name": "needsJoinPrepare"}, {"original_string": "private boolean rejoinNeeded = true;", "modifier": "private", "type": "boolean", "declarator": "rejoinNeeded = true", "var_name": "rejoinNeeded"}, {"original_string": "protected Node coordinator;", "modifier": "protected", "type": "Node", "declarator": "coordinator", "var_name": "coordinator"}, {"original_string": "protected String memberId;", "modifier": "protected", "type": "String", "declarator": "memberId", "var_name": "memberId"}, {"original_string": "protected String protocol;", "modifier": "protected", "type": "String", "declarator": "protocol", "var_name": "protocol"}, {"original_string": "protected int generation;", "modifier": "protected", "type": "int", "declarator": "generation", "var_name": "generation"}], "methods": [{"identifier": "AbstractCoordinator", "parameters": "(ConsumerNetworkClient client,\n        String groupId,\n        int sessionTimeoutMs,\n        int heartbeatIntervalMs,\n        Metrics metrics,\n        String metricGrpPrefix,\n        Time time,\n        long retryBackoffMs)", "modifiers": "public", "return": "", "signature": " AbstractCoordinator(ConsumerNetworkClient client,\n        String groupId,\n        int sessionTimeoutMs,\n        int heartbeatIntervalMs,\n        Metrics metrics,\n        String metricGrpPrefix,\n        Time time,\n        long retryBackoffMs)", "full_signature": "public  AbstractCoordinator(ConsumerNetworkClient client,\n        String groupId,\n        int sessionTimeoutMs,\n        int heartbeatIntervalMs,\n        Metrics metrics,\n        String metricGrpPrefix,\n        Time time,\n        long retryBackoffMs)", "class_method_signature": "AbstractCoordinator.AbstractCoordinator(ConsumerNetworkClient client,\n        String groupId,\n        int sessionTimeoutMs,\n        int heartbeatIntervalMs,\n        Metrics metrics,\n        String metricGrpPrefix,\n        Time time,\n        long retryBackoffMs)", "testcase": false, "constructor": true}, {"identifier": "protocolType", "parameters": "()", "modifiers": "protected abstract", "return": "String", "signature": "String protocolType()", "full_signature": "protected abstract String protocolType()", "class_method_signature": "AbstractCoordinator.protocolType()", "testcase": false, "constructor": false}, {"identifier": "metadata", "parameters": "()", "modifiers": "protected abstract", "return": "List<ProtocolMetadata>", "signature": "List<ProtocolMetadata> metadata()", "full_signature": "protected abstract List<ProtocolMetadata> metadata()", "class_method_signature": "AbstractCoordinator.metadata()", "testcase": false, "constructor": false}, {"identifier": "onJoinPrepare", "parameters": "(int generation, String memberId)", "modifiers": "protected abstract", "return": "void", "signature": "void onJoinPrepare(int generation, String memberId)", "full_signature": "protected abstract void onJoinPrepare(int generation, String memberId)", "class_method_signature": "AbstractCoordinator.onJoinPrepare(int generation, String memberId)", "testcase": false, "constructor": false}, {"identifier": "performAssignment", "parameters": "(String leaderId,\n        String protocol,\n        Map<String, ByteBuffer> allMemberMetadata)", "modifiers": "protected abstract", "return": "Map<String, ByteBuffer>", "signature": "Map<String, ByteBuffer> performAssignment(String leaderId,\n        String protocol,\n        Map<String, ByteBuffer> allMemberMetadata)", "full_signature": "protected abstract Map<String, ByteBuffer> performAssignment(String leaderId,\n        String protocol,\n        Map<String, ByteBuffer> allMemberMetadata)", "class_method_signature": "AbstractCoordinator.performAssignment(String leaderId,\n        String protocol,\n        Map<String, ByteBuffer> allMemberMetadata)", "testcase": false, "constructor": false}, {"identifier": "onJoinComplete", "parameters": "(int generation,\n        String memberId,\n        String protocol,\n        ByteBuffer memberAssignment)", "modifiers": "protected abstract", "return": "void", "signature": "void onJoinComplete(int generation,\n        String memberId,\n        String protocol,\n        ByteBuffer memberAssignment)", "full_signature": "protected abstract void onJoinComplete(int generation,\n        String memberId,\n        String protocol,\n        ByteBuffer memberAssignment)", "class_method_signature": "AbstractCoordinator.onJoinComplete(int generation,\n        String memberId,\n        String protocol,\n        ByteBuffer memberAssignment)", "testcase": false, "constructor": false}, {"identifier": "ensureCoordinatorReady", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void ensureCoordinatorReady()", "full_signature": "public void ensureCoordinatorReady()", "class_method_signature": "AbstractCoordinator.ensureCoordinatorReady()", "testcase": false, "constructor": false}, {"identifier": "needRejoin", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean needRejoin()", "full_signature": "protected boolean needRejoin()", "class_method_signature": "AbstractCoordinator.needRejoin()", "testcase": false, "constructor": false}, {"identifier": "ensureActiveGroup", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void ensureActiveGroup()", "full_signature": "public void ensureActiveGroup()", "class_method_signature": "AbstractCoordinator.ensureActiveGroup()", "testcase": false, "constructor": false}, {"identifier": "sendJoinGroupRequest", "parameters": "()", "modifiers": "private", "return": "RequestFuture<ByteBuffer>", "signature": "RequestFuture<ByteBuffer> sendJoinGroupRequest()", "full_signature": "private RequestFuture<ByteBuffer> sendJoinGroupRequest()", "class_method_signature": "AbstractCoordinator.sendJoinGroupRequest()", "testcase": false, "constructor": false}, {"identifier": "onJoinFollower", "parameters": "()", "modifiers": "private", "return": "RequestFuture<ByteBuffer>", "signature": "RequestFuture<ByteBuffer> onJoinFollower()", "full_signature": "private RequestFuture<ByteBuffer> onJoinFollower()", "class_method_signature": "AbstractCoordinator.onJoinFollower()", "testcase": false, "constructor": false}, {"identifier": "onJoinLeader", "parameters": "(JoinGroupResponse joinResponse)", "modifiers": "private", "return": "RequestFuture<ByteBuffer>", "signature": "RequestFuture<ByteBuffer> onJoinLeader(JoinGroupResponse joinResponse)", "full_signature": "private RequestFuture<ByteBuffer> onJoinLeader(JoinGroupResponse joinResponse)", "class_method_signature": "AbstractCoordinator.onJoinLeader(JoinGroupResponse joinResponse)", "testcase": false, "constructor": false}, {"identifier": "sendSyncGroupRequest", "parameters": "(SyncGroupRequest request)", "modifiers": "private", "return": "RequestFuture<ByteBuffer>", "signature": "RequestFuture<ByteBuffer> sendSyncGroupRequest(SyncGroupRequest request)", "full_signature": "private RequestFuture<ByteBuffer> sendSyncGroupRequest(SyncGroupRequest request)", "class_method_signature": "AbstractCoordinator.sendSyncGroupRequest(SyncGroupRequest request)", "testcase": false, "constructor": false}, {"identifier": "sendGroupCoordinatorRequest", "parameters": "()", "modifiers": "private", "return": "RequestFuture<Void>", "signature": "RequestFuture<Void> sendGroupCoordinatorRequest()", "full_signature": "private RequestFuture<Void> sendGroupCoordinatorRequest()", "class_method_signature": "AbstractCoordinator.sendGroupCoordinatorRequest()", "testcase": false, "constructor": false}, {"identifier": "handleGroupMetadataResponse", "parameters": "(ClientResponse resp, RequestFuture<Void> future)", "modifiers": "private", "return": "void", "signature": "void handleGroupMetadataResponse(ClientResponse resp, RequestFuture<Void> future)", "full_signature": "private void handleGroupMetadataResponse(ClientResponse resp, RequestFuture<Void> future)", "class_method_signature": "AbstractCoordinator.handleGroupMetadataResponse(ClientResponse resp, RequestFuture<Void> future)", "testcase": false, "constructor": false}, {"identifier": "coordinatorUnknown", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean coordinatorUnknown()", "full_signature": "public boolean coordinatorUnknown()", "class_method_signature": "AbstractCoordinator.coordinatorUnknown()", "testcase": false, "constructor": false}, {"identifier": "coordinatorDead", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void coordinatorDead()", "full_signature": "protected void coordinatorDead()", "class_method_signature": "AbstractCoordinator.coordinatorDead()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "AbstractCoordinator.close()", "testcase": false, "constructor": false}, {"identifier": "maybeLeaveGroup", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void maybeLeaveGroup()", "full_signature": "public void maybeLeaveGroup()", "class_method_signature": "AbstractCoordinator.maybeLeaveGroup()", "testcase": false, "constructor": false}, {"identifier": "sendLeaveGroupRequest", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void sendLeaveGroupRequest()", "full_signature": "private void sendLeaveGroupRequest()", "class_method_signature": "AbstractCoordinator.sendLeaveGroupRequest()", "testcase": false, "constructor": false}, {"identifier": "sendHeartbeatRequest", "parameters": "()", "modifiers": "public", "return": "RequestFuture<Void>", "signature": "RequestFuture<Void> sendHeartbeatRequest()", "full_signature": "public RequestFuture<Void> sendHeartbeatRequest()", "class_method_signature": "AbstractCoordinator.sendHeartbeatRequest()", "testcase": false, "constructor": false}], "file": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java"}, "focal_method": {"identifier": "ensureCoordinatorReady", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void ensureCoordinatorReady() {\n        while (coordinatorUnknown()) {// \u662f\u5426\u9700\u8981\u91cd\u65b0\u67e5\u627eGroupCoordinator\uff0c\u4e3b\u8981\u68c0\u67e5coordinator\u5b57\u6bb5\u662f\u5426\u4e3a\u7a7a\uff0c\u4ee5\u53ca\u4e0eGroupCoordinator\n            // \u4e4b\u95f4\u7684\u8fde\u63a5\u662f\u5426\u6b63\u5e38\n            RequestFuture<Void> future = sendGroupCoordinatorRequest();// \u521b\u5efa\u5e76\u7f13\u5b58\u8bf7\u6c42\n            client.poll(future);// \u963b\u585e\u5730\u53d1\u9001\u8bf7\u6c42\n\n            if (future.failed()) {\n                if (future.isRetriable()) {\n                    client.awaitMetadataUpdate();\n                } else {\n                    throw future.exception();\n                }\n            } else if (coordinator != null && client.connectionFailed(coordinator)) {\n                // \u5982\u679cCoordinator \u4f9d\u65e7\u4e3anull\uff0c\u5e76\u4e14client\u8fde\u63a5Coordinator\u8282\u70b9\u5931\u8d25\uff0c\u8fd9\u91ccsleep\u4e00\u6bb5\u65f6\u95f4\uff0c\u7136\u540e\u7ee7\u7eed\u67e5\u627eCoordinator\n                // we found the coordinator, but the connection has failed, so mark\n                // it dead and backoff before retrying discovery\n                coordinatorDead();\n                time.sleep(retryBackoffMs);\n            }\n        }\n    }", "signature": "void ensureCoordinatorReady()", "full_signature": "public void ensureCoordinatorReady()", "class_method_signature": "AbstractCoordinator.ensureCoordinatorReady()", "testcase": false, "constructor": false, "invocations": ["coordinatorUnknown", "sendGroupCoordinatorRequest", "poll", "failed", "isRetriable", "awaitMetadataUpdate", "exception", "connectionFailed", "coordinatorDead", "sleep"]}, "repository": {"repo_id": 135978112, "url": "https://github.com/anurnomeru/kafka-0.10.0.1-source-reading", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 2953, "license": "licensed"}}