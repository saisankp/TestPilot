{"test_class": {"identifier": "BoshHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IMocksControl mocksControl;", "modifier": "private", "type": "IMocksControl", "declarator": "mocksControl", "var_name": "mocksControl"}, {"original_string": "private ServerRuntimeContext serverRuntimeContext;", "modifier": "private", "type": "ServerRuntimeContext", "declarator": "serverRuntimeContext", "var_name": "serverRuntimeContext"}, {"original_string": "private StanzaProcessor stanzaProcessor;", "modifier": "private", "type": "StanzaProcessor", "declarator": "stanzaProcessor", "var_name": "stanzaProcessor"}, {"original_string": "private BoshHandler boshHandler;", "modifier": "private", "type": "BoshHandler", "declarator": "boshHandler", "var_name": "boshHandler"}], "file": "server/extensions/xep0124-xep0206-bosh/src/test/java/org/apache/vysper/xmpp/extension/xep0124/BoshHandlerTest.java"}, "test_case": {"identifier": "testProcess", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProcess() throws IOException, SAXException {\n        // test session creation\n        HttpServletRequest httpServletRequest = mocksControl.createMock(HttpServletRequest.class);\n        expect(serverRuntimeContext.getNextSessionId()).andReturn(\"200\");\n        expect(serverRuntimeContext.getServerEntity()).andReturn(new EntityImpl(null, \"vysper.org\", null));\n        expect(serverRuntimeContext.getDefaultXMLLang()).andReturn(\"en\");\n        AsyncContext asyncContext = mocksControl.createMock(AsyncContext.class);\n        expect(httpServletRequest.startAsync()).andReturn(asyncContext).atLeastOnce();\n        expect(httpServletRequest.getAsyncContext()).andReturn(asyncContext).atLeastOnce();\n        asyncContext.setTimeout(anyLong());\n        Capture<BoshRequest> br = new Capture<BoshRequest>();\n        httpServletRequest.setAttribute(eq(BOSH_REQUEST_ATTRIBUTE), EasyMock.<BoshRequest>capture(br));\n        asyncContext.addListener(EasyMock.<AsyncListener> anyObject());\n        asyncContext.dispatch();\n\n        ServerFeatures serverFeatures = mocksControl.createMock(ServerFeatures.class);\n        expect(serverRuntimeContext.getServerFeatures()).andReturn(serverFeatures);\n        expect(serverFeatures.getAuthenticationMethods()).andReturn(Collections.<SASLMechanism> emptyList());\n        expect(serverRuntimeContext.getModule(InBandRegistrationModule.class)).andReturn(null);\n\n        Capture<BoshResponse> captured = new Capture<BoshResponse>();\n        httpServletRequest.setAttribute(eq(BOSH_RESPONSE_ATTRIBUTE), EasyMock.<BoshResponse> capture(captured));\n        mocksControl.replay();\n\n        Stanza boshRequest = createSessionRequest();\n        boshHandler.process(httpServletRequest, boshRequest);\n        mocksControl.verify();\n        \n        assertEquals(httpServletRequest, br.getValue().getHttpServletRequest());\n        assertEquals(boshRequest, br.getValue().getBody());\n\n        Stanza response = new XMLUtil(new String(captured.getValue().getContent())).parse();\n        assertNotNull(response);\n        assertEquals(\"body\", response.getName());\n        assertEquals(NamespaceURIs.XEP0124_BOSH, response.getNamespaceURI());\n        assertEquals(\"200\", response.getAttributeValue(\"sid\"));\n        assertEquals(\"vysper.org\", response.getAttributeValue(\"from\"));\n        assertEquals(\"60\", response.getAttributeValue(\"wait\"));\n        assertEquals(\"1\", response.getAttributeValue(\"hold\"));\n        assertEquals(\"1.9\", response.getAttributeValue(\"ver\"));\n        assertEquals(1, response.getInnerElements().size());\n        XMLElement streamFeatures = response.getInnerElements().get(0);\n        assertEquals(\"features\", streamFeatures.getName());\n        assertEquals(NamespaceURIs.HTTP_ETHERX_JABBER_ORG_STREAMS, streamFeatures.getNamespaceURI());\n        assertEquals(1, streamFeatures.getInnerElements().size());\n        XMLElement saslMechanisms = streamFeatures.getInnerElements().get(0);\n        assertEquals(\"mechanisms\", saslMechanisms.getName());\n        assertEquals(NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_SASL, saslMechanisms.getNamespaceURI());\n\n        // test session retrieval, retrieves the session above identified by sid=200\n        mocksControl.reset();\n        expect(httpServletRequest.startAsync()).andReturn(asyncContext).atLeastOnce();\n        expect(httpServletRequest.getAsyncContext()).andReturn(asyncContext).anyTimes();\n        asyncContext.setTimeout(anyLong());\n        httpServletRequest.setAttribute(eq(BOSH_REQUEST_ATTRIBUTE), EasyMock.capture(br));\n        asyncContext.addListener(EasyMock.anyObject());\n        Capture<Stanza> stanzaCaptured = new Capture<>();\n        stanzaProcessor.processStanza(eq(serverRuntimeContext), EasyMock.anyObject(),\n                EasyMock.capture(stanzaCaptured), EasyMock.anyObject());\n        mocksControl.replay();\n        boshRequest = createSaslRequest();\n        boshHandler.process(httpServletRequest, boshRequest);\n        mocksControl.verify();\n        \n        assertEquals(httpServletRequest, br.getValue().getHttpServletRequest());\n        assertEquals(boshRequest, br.getValue().getBody());\n        \n        Stanza stanza = stanzaCaptured.getValue();\n        assertNotNull(stanza);\n        assertEquals(\"auth\", stanza.getName());\n        assertEquals(NamespaceURIs.URN_IETF_PARAMS_XML_NS_XMPP_SASL, stanza.getNamespaceURI());\n        assertEquals(\"DIGEST-MD5\", stanza.getAttributeValue(\"mechanism\"));\n    }", "signature": "void testProcess()", "full_signature": "@Test public void testProcess()", "class_method_signature": "BoshHandlerTest.testProcess()", "testcase": true, "constructor": false, "invocations": ["createMock", "andReturn", "expect", "getNextSessionId", "andReturn", "expect", "getServerEntity", "andReturn", "expect", "getDefaultXMLLang", "createMock", "atLeastOnce", "andReturn", "expect", "startAsync", "atLeastOnce", "andReturn", "expect", "getAsyncContext", "setTimeout", "anyLong", "setAttribute", "eq", "capture", "addListener", "anyObject", "dispatch", "createMock", "andReturn", "expect", "getServerFeatures", "andReturn", "expect", "getAuthenticationMethods", "emptyList", "andReturn", "expect", "getModule", "setAttribute", "eq", "capture", "replay", "createSessionRequest", "process", "verify", "assertEquals", "getHttpServletRequest", "getValue", "assertEquals", "getBody", "getValue", "parse", "getContent", "getValue", "assertNotNull", "assertEquals", "getName", "assertEquals", "getNamespaceURI", "assertEquals", "getAttributeValue", "assertEquals", "getAttributeValue", "assertEquals", "getAttributeValue", "assertEquals", "getAttributeValue", "assertEquals", "getAttributeValue", "assertEquals", "size", "getInnerElements", "get", "getInnerElements", "assertEquals", "getName", "assertEquals", "getNamespaceURI", "assertEquals", "size", "getInnerElements", "get", "getInnerElements", "assertEquals", "getName", "assertEquals", "getNamespaceURI", "reset", "atLeastOnce", "andReturn", "expect", "startAsync", "anyTimes", "andReturn", "expect", "getAsyncContext", "setTimeout", "anyLong", "setAttribute", "eq", "capture", "addListener", "anyObject", "processStanza", "eq", "anyObject", "capture", "anyObject", "replay", "createSaslRequest", "process", "verify", "assertEquals", "getHttpServletRequest", "getValue", "assertEquals", "getBody", "getValue", "getValue", "assertNotNull", "assertEquals", "getName", "assertEquals", "getNamespaceURI", "assertEquals", "getAttributeValue"]}, "focal_class": {"identifier": "BoshHandler", "superclass": "", "interfaces": "implements ServerRuntimeContextService", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(BoshHandler.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(BoshHandler.class)", "var_name": "LOGGER"}, {"original_string": "private ServerRuntimeContext serverRuntimeContext;", "modifier": "private", "type": "ServerRuntimeContext", "declarator": "serverRuntimeContext", "var_name": "serverRuntimeContext"}, {"original_string": "private StanzaProcessor stanzaProcessor;", "modifier": "private", "type": "StanzaProcessor", "declarator": "stanzaProcessor", "var_name": "stanzaProcessor"}, {"original_string": "private Map<String, BoshBackedSessionContext> sessions;", "modifier": "private", "type": "Map<String, BoshBackedSessionContext>", "declarator": "sessions", "var_name": "sessions"}, {"original_string": "private InactivityChecker inactivityChecker;", "modifier": "private", "type": "InactivityChecker", "declarator": "inactivityChecker", "var_name": "inactivityChecker"}], "methods": [{"identifier": "BoshHandler", "parameters": "()", "modifiers": "public", "return": "", "signature": " BoshHandler()", "full_signature": "public  BoshHandler()", "class_method_signature": "BoshHandler.BoshHandler()", "testcase": false, "constructor": true}, {"identifier": "getServerRuntimeContext", "parameters": "()", "modifiers": "public", "return": "ServerRuntimeContext", "signature": "ServerRuntimeContext getServerRuntimeContext()", "full_signature": "public ServerRuntimeContext getServerRuntimeContext()", "class_method_signature": "BoshHandler.getServerRuntimeContext()", "testcase": false, "constructor": false}, {"identifier": "getInactivityChecker", "parameters": "()", "modifiers": "protected", "return": "InactivityChecker", "signature": "InactivityChecker getInactivityChecker()", "full_signature": "protected InactivityChecker getInactivityChecker()", "class_method_signature": "BoshHandler.getInactivityChecker()", "testcase": false, "constructor": false}, {"identifier": "setServerRuntimeContext", "parameters": "(ServerRuntimeContext serverRuntimeContext)", "modifiers": "public", "return": "void", "signature": "void setServerRuntimeContext(ServerRuntimeContext serverRuntimeContext)", "full_signature": "public void setServerRuntimeContext(ServerRuntimeContext serverRuntimeContext)", "class_method_signature": "BoshHandler.setServerRuntimeContext(ServerRuntimeContext serverRuntimeContext)", "testcase": false, "constructor": false}, {"identifier": "setStanzaProcessor", "parameters": "(StanzaProcessor stanzaProcessor)", "modifiers": "public", "return": "void", "signature": "void setStanzaProcessor(StanzaProcessor stanzaProcessor)", "full_signature": "public void setStanzaProcessor(StanzaProcessor stanzaProcessor)", "class_method_signature": "BoshHandler.setStanzaProcessor(StanzaProcessor stanzaProcessor)", "testcase": false, "constructor": false}, {"identifier": "createSessionContext", "parameters": "()", "modifiers": "protected", "return": "BoshBackedSessionContext", "signature": "BoshBackedSessionContext createSessionContext()", "full_signature": "protected BoshBackedSessionContext createSessionContext()", "class_method_signature": "BoshHandler.createSessionContext()", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(HttpServletRequest httpRequest, Stanza body)", "modifiers": "public", "return": "void", "signature": "void process(HttpServletRequest httpRequest, Stanza body)", "full_signature": "public void process(HttpServletRequest httpRequest, Stanza body)", "class_method_signature": "BoshHandler.process(HttpServletRequest httpRequest, Stanza body)", "testcase": false, "constructor": false}, {"identifier": "processIncomingClientStanzas", "parameters": "(BoshBackedSessionContext session, Stanza stanza)", "modifiers": "protected", "return": "void", "signature": "void processIncomingClientStanzas(BoshBackedSessionContext session, Stanza stanza)", "full_signature": "protected void processIncomingClientStanzas(BoshBackedSessionContext session, Stanza stanza)", "class_method_signature": "BoshHandler.processIncomingClientStanzas(BoshBackedSessionContext session, Stanza stanza)", "testcase": false, "constructor": false}, {"identifier": "terminateSession", "parameters": "(BoshBackedSessionContext session)", "modifiers": "protected", "return": "void", "signature": "void terminateSession(BoshBackedSessionContext session)", "full_signature": "protected void terminateSession(BoshBackedSessionContext session)", "class_method_signature": "BoshHandler.terminateSession(BoshBackedSessionContext session)", "testcase": false, "constructor": false}, {"identifier": "processStanza", "parameters": "(BoshBackedSessionContext session, XMLElement element)", "modifiers": "protected", "return": "void", "signature": "void processStanza(BoshBackedSessionContext session, XMLElement element)", "full_signature": "protected void processStanza(BoshBackedSessionContext session, XMLElement element)", "class_method_signature": "BoshHandler.processStanza(BoshBackedSessionContext session, XMLElement element)", "testcase": false, "constructor": false}, {"identifier": "createSession", "parameters": "(BoshRequest br)", "modifiers": "protected", "return": "void", "signature": "void createSession(BoshRequest br)", "full_signature": "protected void createSession(BoshRequest br)", "class_method_signature": "BoshHandler.createSession(BoshRequest br)", "testcase": false, "constructor": false}, {"identifier": "removeSession", "parameters": "(String sessionId)", "modifiers": "public", "return": "boolean", "signature": "boolean removeSession(String sessionId)", "full_signature": "public boolean removeSession(String sessionId)", "class_method_signature": "BoshHandler.removeSession(String sessionId)", "testcase": false, "constructor": false}, {"identifier": "getSessionCreationResponse", "parameters": "(BoshBackedSessionContext session)", "modifiers": "protected", "return": "Stanza", "signature": "Stanza getSessionCreationResponse(BoshBackedSessionContext session)", "full_signature": "protected Stanza getSessionCreationResponse(BoshBackedSessionContext session)", "class_method_signature": "BoshHandler.getSessionCreationResponse(BoshBackedSessionContext session)", "testcase": false, "constructor": false}, {"identifier": "getActiveSessionsCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getActiveSessionsCount()", "full_signature": "public int getActiveSessionsCount()", "class_method_signature": "BoshHandler.getActiveSessionsCount()", "testcase": false, "constructor": false}, {"identifier": "getServiceName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getServiceName()", "full_signature": "public String getServiceName()", "class_method_signature": "BoshHandler.getServiceName()", "testcase": false, "constructor": false}], "file": "server/extensions/xep0124-xep0206-bosh/src/main/java/org/apache/vysper/xmpp/extension/xep0124/BoshHandler.java"}, "focal_method": {"identifier": "process", "parameters": "(HttpServletRequest httpRequest, Stanza body)", "modifiers": "public", "return": "void", "body": "public void process(HttpServletRequest httpRequest, Stanza body) {\n        if (!body.getNamespaceURI().equalsIgnoreCase(NamespaceURIs.XEP0124_BOSH)) {\n            LOGGER.error(\"Invalid namespace for body wrapper '{}', must be '{}'!\", body.getNamespaceURI(),\n                    NamespaceURIs.XEP0124_BOSH);\n            return;\n        }\n        if (!body.getName().equalsIgnoreCase(\"body\")) {\n            LOGGER.error(\"Invalid body wrapper '{}'!\", body.getName());\n            return;\n        }\n        if (body.getAttribute(\"rid\") == null) {\n            LOGGER.error(\"Invalid request that does not have a request identifier (rid) attribute!\");\n            return;\n        }\n        final long rid;\n        try {\n            rid = Long.parseLong(body.getAttributeValue(\"rid\"));\n        } catch (NumberFormatException e) {\n            LOGGER.error(\"not a valid RID: \" + body.getAttributeValue(\"rid\"));\n            // TODO handle properly by returning an error response\n            throw new RuntimeException(e);\n        }\n        if (rid <= 0L) {\n            LOGGER.warn(\"rid is not positive: \" + rid);\n            // TODO handle properly by returning an error response\n            throw new RuntimeException(\"BOSH rid must be a positive, large number, not \" + rid);\n        }\n        if (rid > 9007199254740991L) {\n            LOGGER.warn(\"rid too large: \" + rid);\n            // continue anyway, this is not a problem with this implementation\n        }\n        BoshRequest newBoshRequest = new BoshRequest(httpRequest, body, rid);\n        LOGGER.debug(\"SID = \" + body.getAttributeValue(\"sid\") + \" - new BoshRequest created for RID = \" + rid);\n\n        // session creation request (first request). does not have a \"sid\" attribute\n        if (body.getAttribute(\"sid\") == null) {\n            try {\n                createSession(newBoshRequest);\n            } catch (IOException e) {\n                LOGGER.error(\"Exception thrown while processing the session creation request: \" + e.getMessage());\n                try {\n                    final AsyncContext context = newBoshRequest.getHttpServletRequest().startAsync();\n                    final ServletResponse response = context.getResponse();\n                    if (response instanceof HttpServletResponse) {\n                        HttpServletResponse httpServletResponse = (HttpServletResponse)response;\n                        try {\n                            httpServletResponse.sendError(400, \"bad-request\");\n                            return;\n                        } catch (IOException ioe) {\n                            ioe.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.\n                        }\n                    } else {\n                        // create temporary session to be able to reuse the code\n                        createSessionContext().sendError(\"bad-request\");\n                    }\n                } catch (Exception exe) {\n                    LOGGER.warn(\"exception in async processing\", exe);\n                }\n            }\n            return;\n        } \n\n        // in-session request, now find the server-side session\n        final String sid = body.getAttributeValue(\"sid\");\n        BoshBackedSessionContext session = null;\n        if (sid != null) session = sessions.get(sid);\n        if (session == null) {\n            LOGGER.warn(\"Received an invalid sid = '{}', terminating connection\", sid);\n            try {\n                final AsyncContext context = newBoshRequest.getHttpServletRequest().startAsync();\n                // create temporary session to be able to reuse the code\n                createSessionContext().sendError(\"invalid session id\");\n            } catch (Exception exe) {\n                LOGGER.warn(\"exception in async processing\", exe);\n            }\n            return;\n        }\n        \n        // process request for the session\n        synchronized (session) {\n            session.insertRequest(newBoshRequest);\n            processIncomingClientStanzas(session, newBoshRequest.getBody());\n        }\n    }", "signature": "void process(HttpServletRequest httpRequest, Stanza body)", "full_signature": "public void process(HttpServletRequest httpRequest, Stanza body)", "class_method_signature": "BoshHandler.process(HttpServletRequest httpRequest, Stanza body)", "testcase": false, "constructor": false, "invocations": ["equalsIgnoreCase", "getNamespaceURI", "error", "getNamespaceURI", "equalsIgnoreCase", "getName", "error", "getName", "getAttribute", "error", "parseLong", "getAttributeValue", "error", "getAttributeValue", "warn", "warn", "debug", "getAttributeValue", "getAttribute", "createSession", "error", "getMessage", "startAsync", "getHttpServletRequest", "getResponse", "sendError", "printStackTrace", "sendError", "createSessionContext", "warn", "getAttributeValue", "get", "warn", "startAsync", "getHttpServletRequest", "sendError", "createSessionContext", "warn", "insertRequest", "processIncomingClientStanzas", "getBody"]}, "repository": {"repo_id": 165370485, "url": "https://github.com/apache/mina-vysper", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 29305, "license": "licensed"}}