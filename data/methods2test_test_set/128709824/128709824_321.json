{"test_class": {"identifier": "RoundRobinLoadBalancerTest", "superclass": "extends BaseLoadBalancerTest", "interfaces": "", "fields": [], "file": "core-impl/client/src/test/java/com/alipay/sofa/rpc/client/lb/RoundRobinLoadBalancerTest.java"}, "test_case": {"identifier": "doSelect", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void doSelect() throws Exception {\n\n        RoundRobinLoadBalancer loadBalancer = new RoundRobinLoadBalancer(null);\n\n        Map<Integer, Integer> cnt = new HashMap<Integer, Integer>();\n        int size = 20;\n        int total = 190000;\n        SofaRequest request = new SofaRequest();\n        {\n            for (int i = 0; i < size; i++) {\n                cnt.put(9000 + i, 0);\n            }\n            List<ProviderInfo> providers = buildSameWeightProviderList(size);\n            long start = System.currentTimeMillis();\n            for (int i = 0; i < total; i++) {\n                ProviderInfo provider = loadBalancer.doSelect(request, providers);\n                int port = provider.getPort();\n                cnt.put(port, cnt.get(port) + 1);\n            }\n            long end = System.currentTimeMillis();\n            LOGGER.info(\"elapsed\" + (end - start) + \"ms\");\n            LOGGER.info(\"avg \" + (end - start) * 1000 * 1000 / total + \"ns\");\n\n            int avg = total / size;\n            for (int i = 0; i < size; i++) {\n                Assert.assertTrue(avg == cnt.get(9000 + i));\n            }\n        }\n\n        {\n            for (int i = 0; i < size; i++) {\n                cnt.put(9000 + i, 0);\n            }\n            List<ProviderInfo> providers = buildDiffWeightProviderList(size);\n            long start = System.currentTimeMillis();\n            for (int i = 0; i < total; i++) {\n                ProviderInfo provider = loadBalancer.doSelect(request, providers);\n                int port = provider.getPort();\n                cnt.put(port, cnt.get(port) + 1);\n            }\n            long end = System.currentTimeMillis();\n            LOGGER.info(\"elapsed\" + (end - start) + \"ms\");\n            LOGGER.info(\"avg \" + (end - start) * 1000 * 1000 / total + \"ns\");\n\n            // \u5ffd\u7565\u4e86\u6743\u91cd\n            int avg = total / size;\n            for (int i = 0; i < size; i++) {\n                Assert.assertTrue(avg == cnt.get(9000 + i));\n            }\n        }\n\n    }", "signature": "void doSelect()", "full_signature": "@Test public void doSelect()", "class_method_signature": "RoundRobinLoadBalancerTest.doSelect()", "testcase": true, "constructor": false, "invocations": ["put", "buildSameWeightProviderList", "currentTimeMillis", "doSelect", "getPort", "put", "get", "currentTimeMillis", "info", "info", "assertTrue", "get", "put", "buildDiffWeightProviderList", "currentTimeMillis", "doSelect", "getPort", "put", "get", "currentTimeMillis", "info", "info", "assertTrue", "get"]}, "focal_class": {"identifier": "RoundRobinLoadBalancer", "superclass": "extends AbstractLoadBalancer", "interfaces": "", "fields": [{"original_string": "private final ConcurrentMap<String, PositiveAtomicCounter> sequences = new ConcurrentHashMap<String, PositiveAtomicCounter>();", "modifier": "private final", "type": "ConcurrentMap<String, PositiveAtomicCounter>", "declarator": "sequences = new ConcurrentHashMap<String, PositiveAtomicCounter>()", "var_name": "sequences"}], "methods": [{"identifier": "RoundRobinLoadBalancer", "parameters": "(ConsumerBootstrap consumerBootstrap)", "modifiers": "public", "return": "", "signature": " RoundRobinLoadBalancer(ConsumerBootstrap consumerBootstrap)", "full_signature": "public  RoundRobinLoadBalancer(ConsumerBootstrap consumerBootstrap)", "class_method_signature": "RoundRobinLoadBalancer.RoundRobinLoadBalancer(ConsumerBootstrap consumerBootstrap)", "testcase": false, "constructor": true}, {"identifier": "doSelect", "parameters": "(SofaRequest request, List<ProviderInfo> providerInfos)", "modifiers": "@Override public", "return": "ProviderInfo", "signature": "ProviderInfo doSelect(SofaRequest request, List<ProviderInfo> providerInfos)", "full_signature": "@Override public ProviderInfo doSelect(SofaRequest request, List<ProviderInfo> providerInfos)", "class_method_signature": "RoundRobinLoadBalancer.doSelect(SofaRequest request, List<ProviderInfo> providerInfos)", "testcase": false, "constructor": false}, {"identifier": "getServiceKey", "parameters": "(SofaRequest request)", "modifiers": "private", "return": "String", "signature": "String getServiceKey(SofaRequest request)", "full_signature": "private String getServiceKey(SofaRequest request)", "class_method_signature": "RoundRobinLoadBalancer.getServiceKey(SofaRequest request)", "testcase": false, "constructor": false}], "file": "core-impl/client/src/main/java/com/alipay/sofa/rpc/client/lb/RoundRobinLoadBalancer.java"}, "focal_method": {"identifier": "doSelect", "parameters": "(SofaRequest request, List<ProviderInfo> providerInfos)", "modifiers": "@Override public", "return": "ProviderInfo", "body": "@Override\n    public ProviderInfo doSelect(SofaRequest request, List<ProviderInfo> providerInfos) {\n        String key = getServiceKey(request); // \u6bcf\u4e2a\u65b9\u6cd5\u7ea7\u81ea\u5df1\u8f6e\u8be2\uff0c\u4e92\u4e0d\u5f71\u54cd\n        int length = providerInfos.size(); // \u603b\u4e2a\u6570\n        PositiveAtomicCounter sequence = sequences.get(key);\n        if (sequence == null) {\n            sequences.putIfAbsent(key, new PositiveAtomicCounter());\n            sequence = sequences.get(key);\n        }\n        return providerInfos.get(sequence.getAndIncrement() % length);\n    }", "signature": "ProviderInfo doSelect(SofaRequest request, List<ProviderInfo> providerInfos)", "full_signature": "@Override public ProviderInfo doSelect(SofaRequest request, List<ProviderInfo> providerInfos)", "class_method_signature": "RoundRobinLoadBalancer.doSelect(SofaRequest request, List<ProviderInfo> providerInfos)", "testcase": false, "constructor": false, "invocations": ["getServiceKey", "size", "get", "putIfAbsent", "get", "get", "getAndIncrement"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}