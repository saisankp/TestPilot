{"test_class": {"identifier": "PluginClassLoaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "kafka-webview-ui/src/test/java/org/sourcelab/kafka/webview/ui/manager/plugin/PluginClassLoaderTest.java"}, "test_case": {"identifier": "testLoadingFilterPlugin", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLoadingFilterPlugin() throws ClassNotFoundException, IllegalAccessException,\n        InstantiationException, NoSuchMethodException, InvocationTargetException {\n        // Get URL to our jar\n        final URL jar = getClass().getClassLoader().getResource(\"testDeserializer/testPlugins.jar\");\n        final String classPath = \"examples.filter.LowOffsetFilter\";\n\n        // Create class loader\n        final PluginClassLoader pluginClassLoader = new PluginClassLoader(jar, getClass().getClassLoader());\n\n        final Class<? extends RecordFilter> filterPlugin = (Class<? extends RecordFilter>) pluginClassLoader.loadClass(classPath);\n        assertNotNull(\"Should not be null\", filterPlugin);\n\n        // Create an instance of it and validate.\n        final RecordFilter filter = filterPlugin.getDeclaredConstructor().newInstance();\n        final String topic = \"MyTopic\";\n        final int partition = 2;\n        final long offset = 2423L;\n        final Object key = \"key\";\n        final Object value = \"{name='Bob', value='value'}\";\n        filter.includeRecord(topic, partition, offset, key, value);\n\n        // Validate it came from our classloader, more of a sanity test.\n        assertTrue(\"Should have our parent class loader\", filter.getClass().getClassLoader() instanceof PluginClassLoader);\n\n        // Validate permission set defined\n        final ProtectionDomain protectionDomain = filter.getClass().getProtectionDomain();\n        final PermissionCollection permissionCollection = protectionDomain.getPermissions();\n        assertTrue(\"Should have read only permissions\", permissionCollection.isReadOnly());\n    }", "signature": "void testLoadingFilterPlugin()", "full_signature": "@Test public void testLoadingFilterPlugin()", "class_method_signature": "PluginClassLoaderTest.testLoadingFilterPlugin()", "testcase": true, "constructor": false, "invocations": ["getResource", "getClassLoader", "getClass", "getClassLoader", "getClass", "loadClass", "assertNotNull", "newInstance", "getDeclaredConstructor", "includeRecord", "assertTrue", "getClassLoader", "getClass", "getProtectionDomain", "getClass", "getPermissions", "assertTrue", "isReadOnly"]}, "focal_class": {"identifier": "PluginClassLoader", "superclass": "extends URLClassLoader", "interfaces": "", "fields": [], "methods": [{"identifier": "PluginClassLoader", "parameters": "(final URL jarFileUrl, final ClassLoader parent)", "modifiers": "public", "return": "", "signature": " PluginClassLoader(final URL jarFileUrl, final ClassLoader parent)", "full_signature": "public  PluginClassLoader(final URL jarFileUrl, final ClassLoader parent)", "class_method_signature": "PluginClassLoader.PluginClassLoader(final URL jarFileUrl, final ClassLoader parent)", "testcase": false, "constructor": true}, {"identifier": "getPermissions", "parameters": "(final CodeSource codesource)", "modifiers": "@Override protected", "return": "PermissionCollection", "signature": "PermissionCollection getPermissions(final CodeSource codesource)", "full_signature": "@Override protected PermissionCollection getPermissions(final CodeSource codesource)", "class_method_signature": "PluginClassLoader.getPermissions(final CodeSource codesource)", "testcase": false, "constructor": false}], "file": "kafka-webview-ui/src/main/java/org/sourcelab/kafka/webview/ui/manager/plugin/PluginClassLoader.java"}, "focal_method": {"identifier": "getPermissions", "parameters": "(final CodeSource codesource)", "modifiers": "@Override protected", "return": "PermissionCollection", "body": "@Override\n    protected PermissionCollection getPermissions(final CodeSource codesource) {\n        final PermissionCollection permissionCollection = super.getPermissions(codesource);\n        return permissionCollection;\n    }", "signature": "PermissionCollection getPermissions(final CodeSource codesource)", "full_signature": "@Override protected PermissionCollection getPermissions(final CodeSource codesource)", "class_method_signature": "PluginClassLoader.getPermissions(final CodeSource codesource)", "testcase": false, "constructor": false, "invocations": ["getPermissions"]}, "repository": {"repo_id": 106082622, "url": "https://github.com/SourceLabOrg/kafka-webview", "stars": 256, "created": "10/7/2017 8:28:45 AM +00:00", "updates": "2020-01-25T06:02:44+00:00", "fork": "False", "license": "licensed"}}