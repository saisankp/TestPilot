{"test_class": {"identifier": "ModelValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ModelValidator validator;", "modifier": "private", "type": "ModelValidator", "declarator": "validator", "var_name": "validator"}, {"original_string": "private FieldData fieldData;", "modifier": "private", "type": "FieldData", "declarator": "fieldData", "var_name": "fieldData"}], "file": "stardao-core/src/test/java/io/stardog/stardao/validation/ModelValidatorTest.java"}, "test_case": {"identifier": "testGetCreateValidationErrors", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetCreateValidationErrors() throws Exception {\n        List<ValidationError> errors = validator.getCreateValidationErrors(null, fieldData);\n        assertEquals(1, errors.size());\n\n        TestValidateModel model = TestValidateModel.builder().build();\n        errors = validator.getCreateValidationErrors(model, fieldData);\n        assertEquals(2, errors.size());\n        assertEquals(\"is required\", errors.get(0).getMessage());\n        assertEquals(\"is required\", errors.get(1).getMessage());\n\n        model = TestValidateModel.builder().email(\"invalid\").build();\n        errors = validator.getCreateValidationErrors(model, fieldData);\n        assertEquals(2, errors.size());\n        assertEquals(\"is required\", errors.get(0).getMessage());\n        assertEquals(\"must be a well-formed email address\", errors.get(1).getMessage());\n\n        model = TestValidateModel.builder().email(\"example@example.com\").type(\"type\").loginAt(Instant.now()).build();\n        errors = validator.getCreateValidationErrors(model, fieldData);\n        assertEquals(1, errors.size());\n        assertEquals(\"loginAt\", errors.get(0).getField());\n        assertEquals(\"is not creatable\", errors.get(0).getMessage());\n    }", "signature": "void testGetCreateValidationErrors()", "full_signature": "@Test public void testGetCreateValidationErrors()", "class_method_signature": "ModelValidatorTest.testGetCreateValidationErrors()", "testcase": true, "constructor": false, "invocations": ["getCreateValidationErrors", "assertEquals", "size", "build", "builder", "getCreateValidationErrors", "assertEquals", "size", "assertEquals", "getMessage", "get", "assertEquals", "getMessage", "get", "build", "email", "builder", "getCreateValidationErrors", "assertEquals", "size", "assertEquals", "getMessage", "get", "assertEquals", "getMessage", "get", "build", "loginAt", "type", "email", "builder", "now", "getCreateValidationErrors", "assertEquals", "size", "assertEquals", "getField", "get", "assertEquals", "getMessage", "get"]}, "focal_class": {"identifier": "ModelValidator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Validator validator;", "modifier": "private final", "type": "Validator", "declarator": "validator", "var_name": "validator"}, {"original_string": "private final ObjectMapper mapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}], "methods": [{"identifier": "ModelValidator", "parameters": "(Validator validator, ObjectMapper mapper)", "modifiers": "public", "return": "", "signature": " ModelValidator(Validator validator, ObjectMapper mapper)", "full_signature": "public  ModelValidator(Validator validator, ObjectMapper mapper)", "class_method_signature": "ModelValidator.ModelValidator(Validator validator, ObjectMapper mapper)", "testcase": false, "constructor": true}, {"identifier": "getModelValidationErrors", "parameters": "(Object object, Class validationGroup)", "modifiers": "public", "return": "List<ValidationError>", "signature": "List<ValidationError> getModelValidationErrors(Object object, Class validationGroup)", "full_signature": "public List<ValidationError> getModelValidationErrors(Object object, Class validationGroup)", "class_method_signature": "ModelValidator.getModelValidationErrors(Object object, Class validationGroup)", "testcase": false, "constructor": false}, {"identifier": "getCreateValidationErrors", "parameters": "(Object create, FieldData fieldData)", "modifiers": "public", "return": "List<ValidationError>", "signature": "List<ValidationError> getCreateValidationErrors(Object create, FieldData fieldData)", "full_signature": "public List<ValidationError> getCreateValidationErrors(Object create, FieldData fieldData)", "class_method_signature": "ModelValidator.getCreateValidationErrors(Object create, FieldData fieldData)", "testcase": false, "constructor": false}, {"identifier": "getUpdateValidationErrors", "parameters": "(Update<?> update, FieldData fieldData)", "modifiers": "public", "return": "List<ValidationError>", "signature": "List<ValidationError> getUpdateValidationErrors(Update<?> update, FieldData fieldData)", "full_signature": "public List<ValidationError> getUpdateValidationErrors(Update<?> update, FieldData fieldData)", "class_method_signature": "ModelValidator.getUpdateValidationErrors(Update<?> update, FieldData fieldData)", "testcase": false, "constructor": false}, {"identifier": "validateModel", "parameters": "(Object model)", "modifiers": "public", "return": "boolean", "signature": "boolean validateModel(Object model)", "full_signature": "public boolean validateModel(Object model)", "class_method_signature": "ModelValidator.validateModel(Object model)", "testcase": false, "constructor": false}, {"identifier": "validateCreate", "parameters": "(Object create, FieldData fieldData)", "modifiers": "public", "return": "boolean", "signature": "boolean validateCreate(Object create, FieldData fieldData)", "full_signature": "public boolean validateCreate(Object create, FieldData fieldData)", "class_method_signature": "ModelValidator.validateCreate(Object create, FieldData fieldData)", "testcase": false, "constructor": false}, {"identifier": "validateUpdate", "parameters": "(Update<?> update, FieldData fieldData)", "modifiers": "public", "return": "boolean", "signature": "boolean validateUpdate(Update<?> update, FieldData fieldData)", "full_signature": "public boolean validateUpdate(Update<?> update, FieldData fieldData)", "class_method_signature": "ModelValidator.validateUpdate(Update<?> update, FieldData fieldData)", "testcase": false, "constructor": false}], "file": "stardao-core/src/main/java/io/stardog/stardao/validation/ModelValidator.java"}, "focal_method": {"identifier": "getCreateValidationErrors", "parameters": "(Object create, FieldData fieldData)", "modifiers": "public", "return": "List<ValidationError>", "body": "public List<ValidationError> getCreateValidationErrors(Object create, FieldData fieldData) {\n        if (create == null) {\n            return ImmutableList.of(ValidationError.of(\"\", \"create is null\"));\n        }\n\n        ImmutableList.Builder<ValidationError> errors = ImmutableList.builder();\n        Map<String,Object> createMap = mapper.convertValue(create, new TypeReference<Map<String,Object>>() { });\n        Set<String> createFields = createMap.keySet();\n        for (String fieldName : createFields) {\n            Field field = fieldData.getMap().get(fieldName);\n            if (field == null) {\n                errors.add(ValidationError.of(fieldName, \"does not exist\"));\n            } else if (!field.isCreatable() && !field.isUpdatable()) {\n                errors.add(ValidationError.of(fieldName, \"is not creatable\"));\n            }\n        }\n        for (Field field : fieldData.getMap().values()) {\n            Object value = createMap.get(field.getName());\n            if (!field.isOptional() && (field.isCreatable() || field.isUpdatable()) && (value == null || \"\".equals(value))) {\n                errors.add(ValidationError.of(field.getName(), \"is required\"));\n            }\n        }\n        Set<ConstraintViolation<Object>> violations = validator.validate(create, Default.class);\n        Set<String> errorFields = new HashSet<>();\n        for (ConstraintViolation<?> cv : violations) {\n            String field = cv.getPropertyPath().toString();\n            if (createFields.contains(field) && !errorFields.contains(field)) {\n                errors.add(ValidationError.of(field, cv.getMessage()));\n                errorFields.add(field);\n            }\n        }\n        return errors.build();\n    }", "signature": "List<ValidationError> getCreateValidationErrors(Object create, FieldData fieldData)", "full_signature": "public List<ValidationError> getCreateValidationErrors(Object create, FieldData fieldData)", "class_method_signature": "ModelValidator.getCreateValidationErrors(Object create, FieldData fieldData)", "testcase": false, "constructor": false, "invocations": ["of", "of", "builder", "convertValue", "keySet", "get", "getMap", "add", "of", "isCreatable", "isUpdatable", "add", "of", "values", "getMap", "get", "getName", "isOptional", "isCreatable", "isUpdatable", "equals", "add", "of", "getName", "validate", "toString", "getPropertyPath", "contains", "contains", "add", "of", "getMessage", "add", "build"]}, "repository": {"repo_id": 79784019, "url": "https://github.com/stardogventures/stardao", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 8, "size": 219, "license": "licensed"}}