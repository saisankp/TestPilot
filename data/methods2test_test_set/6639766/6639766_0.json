{"test_class": {"identifier": "DefaultPagerModelTest", "superclass": "", "interfaces": "", "fields": [], "file": "tapestry-stitch/src/test/java/org/lazan/t5/stitch/model/DefaultPagerModelTest.java"}, "test_case": {"identifier": "testGetPages", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetPages() {\n\t\tDefaultPagerModel pagerModel = new DefaultPagerModel(2, 2, 1, 2, 2);\n\n\t\tassertPages(new int[] {1,2,3,4,5,9,10}, pagerModel.getPages(1, 10));\n\t\tassertPages(new int[] {1,2,3,4,5,9,10}, pagerModel.getPages(2, 10));\n\t\tassertPages(new int[] {1,2,3,4,5,9,10}, pagerModel.getPages(3, 10));\n\t\tassertPages(new int[] {1,2,3,4,5,9,10}, pagerModel.getPages(4, 10));\n\t\tassertPages(new int[] {1,2,4,5,6,9,10}, pagerModel.getPages(5, 10));\n\t\tassertPages(new int[] {1,2,5,6,7,9,10}, pagerModel.getPages(6, 10));\n\t\tassertPages(new int[] {1,2,6,7,8,9,10}, pagerModel.getPages(7, 10));\n\t\tassertPages(new int[] {1,2,6,7,8,9,10}, pagerModel.getPages(8, 10));\n\t\tassertPages(new int[] {1,2,6,7,8,9,10}, pagerModel.getPages(9, 10));\n\t\tassertPages(new int[] {1,2,6,7,8,9,10}, pagerModel.getPages(10, 10));\n\t}", "signature": "void testGetPages()", "full_signature": "@Test public void testGetPages()", "class_method_signature": "DefaultPagerModelTest.testGetPages()", "testcase": true, "constructor": false, "invocations": ["assertPages", "getPages", "assertPages", "getPages", "assertPages", "getPages", "assertPages", "getPages", "assertPages", "getPages", "assertPages", "getPages", "assertPages", "getPages", "assertPages", "getPages", "assertPages", "getPages", "assertPages", "getPages"]}, "focal_class": {"identifier": "DefaultPagerModel", "superclass": "", "interfaces": "implements PagerModel", "fields": [{"original_string": "private final int minStartPages;", "modifier": "private final", "type": "int", "declarator": "minStartPages", "var_name": "minStartPages"}, {"original_string": "private final int minEndPages;", "modifier": "private final", "type": "int", "declarator": "minEndPages", "var_name": "minEndPages"}, {"original_string": "private final int currentBuffer;", "modifier": "private final", "type": "int", "declarator": "currentBuffer", "var_name": "currentBuffer"}, {"original_string": "private final int prevThreshold;", "modifier": "private final", "type": "int", "declarator": "prevThreshold", "var_name": "prevThreshold"}, {"original_string": "private final int nextThreshold;", "modifier": "private final", "type": "int", "declarator": "nextThreshold", "var_name": "nextThreshold"}], "methods": [{"identifier": "DefaultPagerModel", "parameters": "(int minEndPages, int currentBuffer, int nextPrevThreshold)", "modifiers": "public", "return": "", "signature": " DefaultPagerModel(int minEndPages, int currentBuffer, int nextPrevThreshold)", "full_signature": "public  DefaultPagerModel(int minEndPages, int currentBuffer, int nextPrevThreshold)", "class_method_signature": "DefaultPagerModel.DefaultPagerModel(int minEndPages, int currentBuffer, int nextPrevThreshold)", "testcase": false, "constructor": true}, {"identifier": "DefaultPagerModel", "parameters": "(int minStartPages, int minEndPages, int currentBuffer, int prevThreshold, int nextThreshold)", "modifiers": "public", "return": "", "signature": " DefaultPagerModel(int minStartPages, int minEndPages, int currentBuffer, int prevThreshold, int nextThreshold)", "full_signature": "public  DefaultPagerModel(int minStartPages, int minEndPages, int currentBuffer, int prevThreshold, int nextThreshold)", "class_method_signature": "DefaultPagerModel.DefaultPagerModel(int minStartPages, int minEndPages, int currentBuffer, int prevThreshold, int nextThreshold)", "testcase": false, "constructor": true}, {"identifier": "getPages", "parameters": "(int currentPage, int pageCount)", "modifiers": "public", "return": "Collection<Integer>", "signature": "Collection<Integer> getPages(int currentPage, int pageCount)", "full_signature": "public Collection<Integer> getPages(int currentPage, int pageCount)", "class_method_signature": "DefaultPagerModel.getPages(int currentPage, int pageCount)", "testcase": false, "constructor": false}, {"identifier": "addPages", "parameters": "(Set<Integer> pages, int start, int count, int increment)", "modifiers": "private", "return": "void", "signature": "void addPages(Set<Integer> pages, int start, int count, int increment)", "full_signature": "private void addPages(Set<Integer> pages, int start, int count, int increment)", "class_method_signature": "DefaultPagerModel.addPages(Set<Integer> pages, int start, int count, int increment)", "testcase": false, "constructor": false}, {"identifier": "isShowNext", "parameters": "(int currentPage, int pageCount)", "modifiers": "public", "return": "boolean", "signature": "boolean isShowNext(int currentPage, int pageCount)", "full_signature": "public boolean isShowNext(int currentPage, int pageCount)", "class_method_signature": "DefaultPagerModel.isShowNext(int currentPage, int pageCount)", "testcase": false, "constructor": false}, {"identifier": "isShowPrevious", "parameters": "(int currentPage, int pageCount)", "modifiers": "public", "return": "boolean", "signature": "boolean isShowPrevious(int currentPage, int pageCount)", "full_signature": "public boolean isShowPrevious(int currentPage, int pageCount)", "class_method_signature": "DefaultPagerModel.isShowPrevious(int currentPage, int pageCount)", "testcase": false, "constructor": false}], "file": "tapestry-stitch/src/main/java/org/lazan/t5/stitch/model/DefaultPagerModel.java"}, "focal_method": {"identifier": "getPages", "parameters": "(int currentPage, int pageCount)", "modifiers": "public", "return": "Collection<Integer>", "body": "public Collection<Integer> getPages(int currentPage, int pageCount) {\n\t\tSet<Integer> pages = new TreeSet<Integer>();\n\t\t\n\t\t// we will always display the same number of pages\n\t\tint requiredPages = minStartPages + minEndPages + 1 + (currentBuffer * 2);\n\n\t\tif (pageCount <= requiredPages) {\n\t\t\taddPages(pages, 1, pageCount, 1);\n\t\t} else {\n\t\t\tint bufferPages = 1 + (currentBuffer * 2);\n\t\t\taddPages(pages, 1, minStartPages, 1);\n\t\t\taddPages(pages, pageCount, minEndPages, -1);\n\t\t\tif (currentPage <= minStartPages) {\n\t\t\t\t// currentPage is within startPages\n\t\t\t\t// add extra pages to the start\n\t\t\t\taddPages(pages, minStartPages + 1, bufferPages, 1);\n\t\t\t} else if (currentPage >= pageCount - minEndPages) {\n\t\t\t\t// currentPage is within the endPages\n\t\t\t\t// add extra pages to the end\n\t\t\t\taddPages(pages, pageCount - minEndPages, bufferPages, -1);\n\t\t\t} else {\n\t\t\t\t// add buffer pages around currentPage\n\t\t\t\tint start = Math.max(minStartPages + 1, currentPage - currentBuffer);\n\t\t\t\taddPages(pages, start, bufferPages, 1);\n\t\t\t}\n\t\t}\n\t\treturn pages;\n\t}", "signature": "Collection<Integer> getPages(int currentPage, int pageCount)", "full_signature": "public Collection<Integer> getPages(int currentPage, int pageCount)", "class_method_signature": "DefaultPagerModel.getPages(int currentPage, int pageCount)", "testcase": false, "constructor": false, "invocations": ["addPages", "addPages", "addPages", "addPages", "addPages", "max", "addPages"]}, "repository": {"repo_id": 6639766, "url": "https://github.com/uklance/tapestry-stitch", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 14, "size": 712, "license": "licensed"}}