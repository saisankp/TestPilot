{"test_class": {"identifier": "TestResponseReader", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  SerialPort serialPort;", "modifier": "@Mock", "type": "SerialPort", "declarator": "serialPort", "var_name": "serialPort"}], "file": "dexcom-receiver/src/test/java/org/glukit/dexcom/sync/TestResponseReader.java"}, "test_case": {"identifier": "readGenericResponseShouldSucceed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void readGenericResponseShouldSucceed() throws Exception {\n    when(serialPort.readBytes(HEADER_SIZE)).thenReturn(fromHexString(\"01 03 01 01\"));\n    when(serialPort.readBytes(259 - (HEADER_SIZE + TRAILER_SIZE))).thenReturn(fromHexString(\"3C 46 69 72 6D 77 61 72 65 48 65 61 64 65 72 20 53 63 68 65 6D 61 56 65 72 73 69 6F 6E 3D 27 31 27 20 41 70 69 56 65 72 73 69 6F 6E 3D 27 32 2E 32 2E 30 2E 30 27 20 54 65 73 74 41 70 69 56 65 72 73 69 6F 6E 3D 27 32 2E 34 2E 30 2E 30 27 20 50 72 6F 64 75 63 74 49 64 3D 27 47 34 52 65 63 65 69 76 65 72 27 20 50 72 6F 64 75 63 74 4E 61 6D 65 3D 27 44 65 78 63 6F 6D 20 47 34 20 52 65 63 65 69 76 65 72 27 20 53 6F 66 74 77 61 72 65 4E 75 6D 62 65 72 3D 27 53 57 31 30 30 35 30 27 20 46 69 72 6D 77 61 72 65 56 65 72 73 69 6F 6E 3D 27 32 2E 30 2E 31 2E 31 30 34 27 20 50 6F 72 74 56 65 72 73 69 6F 6E 3D 27 34 2E 36 2E 34 2E 34 35 27 20 52 46 56 65 72 73 69 6F 6E 3D 27 31 2E 30 2E 30 2E 32 37 27 20 44 65 78 42 6F 6F 74 56 65 72 73 69 6F 6E 3D 27 33 27 2F 3E\"));\n    when(serialPort.readBytes(TRAILER_SIZE)).thenReturn(fromHexString(\"D8 D4\"));\n\n    ResponseReader responseReader = new ResponseReader(new LittleEndianDataInputFactory());\n    Utf8PayloadGenericResponse genericResponse = responseReader.read(Utf8PayloadGenericResponse.class, this.serialPort);\n\n    assertThat(genericResponse, not(nullValue()));\n    assertThat(genericResponse.asString(), is(\"<FirmwareHeader SchemaVersion='1' ApiVersion='2.2.0.0' TestApiVersion='2.4.0.0' ProductId='G4Receiver' ProductName='Dexcom G4 Receiver' SoftwareNumber='SW10050' FirmwareVersion='2.0.1.104' PortVersion='4.6.4.45' RFVersion='1.0.0.27' DexBootVersion='3'/>\"));\n  }", "signature": "void readGenericResponseShouldSucceed()", "full_signature": "@Test public void readGenericResponseShouldSucceed()", "class_method_signature": "TestResponseReader.readGenericResponseShouldSucceed()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "readBytes", "fromHexString", "thenReturn", "when", "readBytes", "fromHexString", "thenReturn", "when", "readBytes", "fromHexString", "read", "assertThat", "not", "nullValue", "assertThat", "asString", "is"]}, "focal_class": {"identifier": "ResponseReader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger LOGGER = LoggerFactory.getLogger(ResponseReader.class);", "modifier": "private static", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ResponseReader.class)", "var_name": "LOGGER"}, {"original_string": "static final int HEADER_SIZE = 4;", "modifier": "static final", "type": "int", "declarator": "HEADER_SIZE = 4", "var_name": "HEADER_SIZE"}, {"original_string": "public static final int TRAILER_SIZE = 2;", "modifier": "public static final", "type": "int", "declarator": "TRAILER_SIZE = 2", "var_name": "TRAILER_SIZE"}, {"original_string": "private DataInputFactory dataInputFactory;", "modifier": "private", "type": "DataInputFactory", "declarator": "dataInputFactory", "var_name": "dataInputFactory"}], "methods": [{"identifier": "ResponseReader", "parameters": "(DataInputFactory dataInputFactory)", "modifiers": "@Inject public", "return": "", "signature": " ResponseReader(DataInputFactory dataInputFactory)", "full_signature": "@Inject public  ResponseReader(DataInputFactory dataInputFactory)", "class_method_signature": "ResponseReader.ResponseReader(DataInputFactory dataInputFactory)", "testcase": false, "constructor": true}, {"identifier": "read", "parameters": "(Class<T> type, SerialPort serialPort)", "modifiers": "public", "return": "T", "signature": "T read(Class<T> type, SerialPort serialPort)", "full_signature": "public T read(Class<T> type, SerialPort serialPort)", "class_method_signature": "ResponseReader.read(Class<T> type, SerialPort serialPort)", "testcase": false, "constructor": false}, {"identifier": "validateCrc", "parameters": "(byte[] packet, byte[] crcBytes)", "modifiers": "private", "return": "void", "signature": "void validateCrc(byte[] packet, byte[] crcBytes)", "full_signature": "private void validateCrc(byte[] packet, byte[] crcBytes)", "class_method_signature": "ResponseReader.validateCrc(byte[] packet, byte[] crcBytes)", "testcase": false, "constructor": false}, {"identifier": "readHeader", "parameters": "(byte[] headerBytes)", "modifiers": "private", "return": "ResponseHeader", "signature": "ResponseHeader readHeader(byte[] headerBytes)", "full_signature": "private ResponseHeader readHeader(byte[] headerBytes)", "class_method_signature": "ResponseReader.readHeader(byte[] headerBytes)", "testcase": false, "constructor": false}], "file": "dexcom-receiver/src/main/java/org/glukit/dexcom/sync/ResponseReader.java"}, "focal_method": {"identifier": "read", "parameters": "(Class<T> type, SerialPort serialPort)", "modifiers": "public", "return": "T", "body": "public <T extends Response> T read(Class<T> type, SerialPort serialPort) {\n    try {\n      T response = type.getConstructor(DataInputFactory.class).newInstance(this.dataInputFactory);\n      byte[] header = serialPort.readBytes(HEADER_SIZE);\n      LOGGER.debug(format(\"Read header from port: %s\", toHexString(header)));\n      ResponseHeader responseHeader = readHeader(header);\n\n      int expectedPayloadSize = responseHeader.getPacketSize() - (HEADER_SIZE + TRAILER_SIZE);\n      LOGGER.debug(format(\"Expected payload of [%d] bytes\", expectedPayloadSize));\n\n      byte[] payload = new byte[0];\n      if (expectedPayloadSize > 0) {\n        payload = serialPort.readBytes(expectedPayloadSize);\n        LOGGER.debug(format(\"Read payload from port: %s\", toHexString(payload)));\n        response.fromBytes(payload);\n      } else {\n        LOGGER.debug(\"No payload expected, skipping to trailer...\");\n      }\n\n      byte[] crc16 = serialPort.readBytes(TRAILER_SIZE);\n      LOGGER.debug(format(\"Read crc16 from port: %s\", toHexString(crc16)));\n      validateCrc(Bytes.concat(header, payload, crc16), crc16);\n\n      return response;\n    } catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n  }", "signature": "T read(Class<T> type, SerialPort serialPort)", "full_signature": "public T read(Class<T> type, SerialPort serialPort)", "class_method_signature": "ResponseReader.read(Class<T> type, SerialPort serialPort)", "testcase": false, "constructor": false, "invocations": ["newInstance", "getConstructor", "readBytes", "debug", "format", "toHexString", "readHeader", "getPacketSize", "debug", "format", "readBytes", "debug", "format", "toHexString", "fromBytes", "debug", "readBytes", "debug", "format", "toHexString", "validateCrc", "concat", "propagate"]}, "repository": {"repo_id": 13185812, "url": "https://github.com/alexandre-normand/blood-shepherd", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 7, "size": 408, "license": "licensed"}}