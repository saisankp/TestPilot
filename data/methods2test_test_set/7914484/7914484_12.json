{"test_class": {"identifier": "SpringSecurityPasswordValidationCallbackHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SpringSecurityPasswordValidationCallbackHandler callbackHandler;", "modifier": "private", "type": "SpringSecurityPasswordValidationCallbackHandler", "declarator": "callbackHandler", "var_name": "callbackHandler"}, {"original_string": "private SimpleGrantedAuthority grantedAuthority;", "modifier": "private", "type": "SimpleGrantedAuthority", "declarator": "grantedAuthority", "var_name": "grantedAuthority"}, {"original_string": "private UsernameTokenPrincipalCallback callback;", "modifier": "private", "type": "UsernameTokenPrincipalCallback", "declarator": "callback", "var_name": "callback"}, {"original_string": "private WSPasswordCallback passwordCallback;", "modifier": "private", "type": "WSPasswordCallback", "declarator": "passwordCallback", "var_name": "passwordCallback"}, {"original_string": "private UserDetails user;", "modifier": "private", "type": "UserDetails", "declarator": "user", "var_name": "user"}], "file": "spring-ws-security/src/test/java/org/springframework/ws/soap/security/wss4j2/callback/SpringSecurityPasswordValidationCallbackHandlerTest.java"}, "test_case": {"identifier": "testHandleUsernameTokenPrincipal", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testHandleUsernameTokenPrincipal() throws Exception {\n\t\tUserDetailsService userDetailsService = createMock(UserDetailsService.class);\n\t\tcallbackHandler.setUserDetailsService(userDetailsService);\n\n\t\texpect(userDetailsService.loadUserByUsername(\"Ernie\")).andReturn(user).anyTimes();\n\n\t\treplay(userDetailsService);\n\n\t\tcallbackHandler.handleUsernameTokenPrincipal(callback);\n\t\tSecurityContext context = SecurityContextHolder.getContext();\n\t\tAssert.assertNotNull(\"SecurityContext must not be null\", context);\n\t\tAuthentication authentication = context.getAuthentication();\n\t\tAssert.assertNotNull(\"Authentication must not be null\", authentication);\n\t\tCollection<? extends GrantedAuthority> authorities = authentication.getAuthorities();\n\t\tAssert.assertTrue(\"GrantedAuthority[] must not be null or empty\", (authorities != null && authorities.size() > 0));\n\t\tAssert.assertEquals(\"Unexpected authority\", grantedAuthority, authorities.iterator().next());\n\n\t\tverify(userDetailsService);\n\t}", "signature": "void testHandleUsernameTokenPrincipal()", "full_signature": "@Test public void testHandleUsernameTokenPrincipal()", "class_method_signature": "SpringSecurityPasswordValidationCallbackHandlerTest.testHandleUsernameTokenPrincipal()", "testcase": true, "constructor": false, "invocations": ["createMock", "setUserDetailsService", "anyTimes", "andReturn", "expect", "loadUserByUsername", "replay", "handleUsernameTokenPrincipal", "getContext", "assertNotNull", "getAuthentication", "assertNotNull", "getAuthorities", "assertTrue", "size", "assertEquals", "next", "iterator", "verify"]}, "focal_class": {"identifier": "SpringSecurityPasswordValidationCallbackHandler", "superclass": "extends AbstractWsPasswordCallbackHandler", "interfaces": "implements InitializingBean", "fields": [{"original_string": "private UserCache userCache = new NullUserCache();", "modifier": "private", "type": "UserCache", "declarator": "userCache = new NullUserCache()", "var_name": "userCache"}, {"original_string": "private UserDetailsService userDetailsService;", "modifier": "private", "type": "UserDetailsService", "declarator": "userDetailsService", "var_name": "userDetailsService"}], "methods": [{"identifier": "setUserCache", "parameters": "(UserCache userCache)", "modifiers": "public", "return": "void", "signature": "void setUserCache(UserCache userCache)", "full_signature": "public void setUserCache(UserCache userCache)", "class_method_signature": "SpringSecurityPasswordValidationCallbackHandler.setUserCache(UserCache userCache)", "testcase": false, "constructor": false}, {"identifier": "setUserDetailsService", "parameters": "(UserDetailsService userDetailsService)", "modifiers": "public", "return": "void", "signature": "void setUserDetailsService(UserDetailsService userDetailsService)", "full_signature": "public void setUserDetailsService(UserDetailsService userDetailsService)", "class_method_signature": "SpringSecurityPasswordValidationCallbackHandler.setUserDetailsService(UserDetailsService userDetailsService)", "testcase": false, "constructor": false}, {"identifier": "afterPropertiesSet", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void afterPropertiesSet()", "full_signature": "@Override public void afterPropertiesSet()", "class_method_signature": "SpringSecurityPasswordValidationCallbackHandler.afterPropertiesSet()", "testcase": false, "constructor": false}, {"identifier": "handleUsernameToken", "parameters": "(WSPasswordCallback callback)", "modifiers": "protected", "return": "void", "signature": "void handleUsernameToken(WSPasswordCallback callback)", "full_signature": "protected void handleUsernameToken(WSPasswordCallback callback)", "class_method_signature": "SpringSecurityPasswordValidationCallbackHandler.handleUsernameToken(WSPasswordCallback callback)", "testcase": false, "constructor": false}, {"identifier": "handleUsernameTokenPrincipal", "parameters": "(UsernameTokenPrincipalCallback callback)", "modifiers": "@Override protected", "return": "void", "signature": "void handleUsernameTokenPrincipal(UsernameTokenPrincipalCallback callback)", "full_signature": "@Override protected void handleUsernameTokenPrincipal(UsernameTokenPrincipalCallback callback)", "class_method_signature": "SpringSecurityPasswordValidationCallbackHandler.handleUsernameTokenPrincipal(UsernameTokenPrincipalCallback callback)", "testcase": false, "constructor": false}, {"identifier": "handleCleanup", "parameters": "(CleanupCallback callback)", "modifiers": "@Override protected", "return": "void", "signature": "void handleCleanup(CleanupCallback callback)", "full_signature": "@Override protected void handleCleanup(CleanupCallback callback)", "class_method_signature": "SpringSecurityPasswordValidationCallbackHandler.handleCleanup(CleanupCallback callback)", "testcase": false, "constructor": false}, {"identifier": "loadUserDetails", "parameters": "(String username)", "modifiers": "private", "return": "UserDetails", "signature": "UserDetails loadUserDetails(String username)", "full_signature": "private UserDetails loadUserDetails(String username)", "class_method_signature": "SpringSecurityPasswordValidationCallbackHandler.loadUserDetails(String username)", "testcase": false, "constructor": false}], "file": "spring-ws-security/src/main/java/org/springframework/ws/soap/security/wss4j2/callback/SpringSecurityPasswordValidationCallbackHandler.java"}, "focal_method": {"identifier": "handleUsernameTokenPrincipal", "parameters": "(UsernameTokenPrincipalCallback callback)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n\tprotected void handleUsernameTokenPrincipal(UsernameTokenPrincipalCallback callback)\n\t\t\tthrows IOException, UnsupportedCallbackException {\n\t\tUserDetails user = loadUserDetails(callback.getPrincipal().getName());\n\t\tWSUsernameTokenPrincipalImpl principal = callback.getPrincipal();\n\t\tUsernamePasswordAuthenticationToken authRequest = new UsernamePasswordAuthenticationToken(principal,\n\t\t\t\tprincipal.getPassword(), user.getAuthorities());\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Authentication success: \" + authRequest.toString());\n\t\t}\n\t\tSecurityContextHolder.getContext().setAuthentication(authRequest);\n\t}", "signature": "void handleUsernameTokenPrincipal(UsernameTokenPrincipalCallback callback)", "full_signature": "@Override protected void handleUsernameTokenPrincipal(UsernameTokenPrincipalCallback callback)", "class_method_signature": "SpringSecurityPasswordValidationCallbackHandler.handleUsernameTokenPrincipal(UsernameTokenPrincipalCallback callback)", "testcase": false, "constructor": false, "invocations": ["loadUserDetails", "getName", "getPrincipal", "getPrincipal", "getPassword", "getAuthorities", "isDebugEnabled", "debug", "toString", "setAuthentication", "getContext"]}, "repository": {"repo_id": 7914484, "url": "https://github.com/spring-projects/spring-ws", "language": "Java", "is_fork": false, "fork_count": 232, "stargazer_count": 209, "size": 20360, "license": "licensed"}}