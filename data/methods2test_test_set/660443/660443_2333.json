{"test_class": {"identifier": "MolecularFormulaTest", "superclass": "extends AbstractMolecularFormulaTest", "interfaces": "", "fields": [], "file": "base/data/src/test/java/org/openscience/cdk/formula/MolecularFormulaTest.java"}, "test_case": {"identifier": "testMolecularFormula", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMolecularFormula() {\n\n        IMolecularFormula mf = getBuilder().newInstance(IMolecularFormula.class);\n        Assert.assertNotNull(mf);\n    }", "signature": "void testMolecularFormula()", "full_signature": "@Test public void testMolecularFormula()", "class_method_signature": "MolecularFormulaTest.testMolecularFormula()", "testcase": true, "constructor": false, "invocations": ["newInstance", "getBuilder", "assertNotNull"]}, "focal_class": {"identifier": "MolecularFormula", "superclass": "", "interfaces": "implements IMolecularFormula", "fields": [{"original_string": "private static final long      serialVersionUID = -2011407700837295287L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -2011407700837295287L", "var_name": "serialVersionUID"}, {"original_string": "private Map<IIsotope, Integer> isotopes;", "modifier": "private", "type": "Map<IIsotope, Integer>", "declarator": "isotopes", "var_name": "isotopes"}, {"original_string": "private Integer                charge           = null;", "modifier": "private", "type": "Integer", "declarator": "charge           = null", "var_name": "charge"}, {"original_string": "private Map<Object, Object>    properties;", "modifier": "private", "type": "Map<Object, Object>", "declarator": "properties", "var_name": "properties"}], "methods": [{"identifier": "MolecularFormula", "parameters": "()", "modifiers": "public", "return": "", "signature": " MolecularFormula()", "full_signature": "public  MolecularFormula()", "class_method_signature": "MolecularFormula.MolecularFormula()", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(IMolecularFormula formula)", "modifiers": "@Override public", "return": "IMolecularFormula", "signature": "IMolecularFormula add(IMolecularFormula formula)", "full_signature": "@Override public IMolecularFormula add(IMolecularFormula formula)", "class_method_signature": "MolecularFormula.add(IMolecularFormula formula)", "testcase": false, "constructor": false}, {"identifier": "addIsotope", "parameters": "(IIsotope isotope)", "modifiers": "@Override public", "return": "IMolecularFormula", "signature": "IMolecularFormula addIsotope(IIsotope isotope)", "full_signature": "@Override public IMolecularFormula addIsotope(IIsotope isotope)", "class_method_signature": "MolecularFormula.addIsotope(IIsotope isotope)", "testcase": false, "constructor": false}, {"identifier": "addIsotope", "parameters": "(IIsotope isotope, int count)", "modifiers": "@Override public", "return": "IMolecularFormula", "signature": "IMolecularFormula addIsotope(IIsotope isotope, int count)", "full_signature": "@Override public IMolecularFormula addIsotope(IIsotope isotope, int count)", "class_method_signature": "MolecularFormula.addIsotope(IIsotope isotope, int count)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(IIsotope isotope)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(IIsotope isotope)", "full_signature": "@Override public boolean contains(IIsotope isotope)", "class_method_signature": "MolecularFormula.contains(IIsotope isotope)", "testcase": false, "constructor": false}, {"identifier": "getCharge", "parameters": "()", "modifiers": "@Override public", "return": "Integer", "signature": "Integer getCharge()", "full_signature": "@Override public Integer getCharge()", "class_method_signature": "MolecularFormula.getCharge()", "testcase": false, "constructor": false}, {"identifier": "getIsotopeCount", "parameters": "(IIsotope isotope)", "modifiers": "@Override public", "return": "int", "signature": "int getIsotopeCount(IIsotope isotope)", "full_signature": "@Override public int getIsotopeCount(IIsotope isotope)", "class_method_signature": "MolecularFormula.getIsotopeCount(IIsotope isotope)", "testcase": false, "constructor": false}, {"identifier": "getIsotopeCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getIsotopeCount()", "full_signature": "@Override public int getIsotopeCount()", "class_method_signature": "MolecularFormula.getIsotopeCount()", "testcase": false, "constructor": false}, {"identifier": "getIsotope", "parameters": "(IIsotope isotope)", "modifiers": "private", "return": "IIsotope", "signature": "IIsotope getIsotope(IIsotope isotope)", "full_signature": "private IIsotope getIsotope(IIsotope isotope)", "class_method_signature": "MolecularFormula.getIsotope(IIsotope isotope)", "testcase": false, "constructor": false}, {"identifier": "isotopes", "parameters": "()", "modifiers": "@Override public", "return": "Iterable<IIsotope>", "signature": "Iterable<IIsotope> isotopes()", "full_signature": "@Override public Iterable<IIsotope> isotopes()", "class_method_signature": "MolecularFormula.isotopes()", "testcase": false, "constructor": false}, {"identifier": "setCharge", "parameters": "(Integer charge)", "modifiers": "@Override public", "return": "void", "signature": "void setCharge(Integer charge)", "full_signature": "@Override public void setCharge(Integer charge)", "class_method_signature": "MolecularFormula.setCharge(Integer charge)", "testcase": false, "constructor": false}, {"identifier": "removeAllIsotopes", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void removeAllIsotopes()", "full_signature": "@Override public void removeAllIsotopes()", "class_method_signature": "MolecularFormula.removeAllIsotopes()", "testcase": false, "constructor": false}, {"identifier": "removeIsotope", "parameters": "(IIsotope isotope)", "modifiers": "@Override public", "return": "void", "signature": "void removeIsotope(IIsotope isotope)", "full_signature": "@Override public void removeIsotope(IIsotope isotope)", "class_method_signature": "MolecularFormula.removeIsotope(IIsotope isotope)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object clone()", "full_signature": "@Override public Object clone()", "class_method_signature": "MolecularFormula.clone()", "testcase": false, "constructor": false}, {"identifier": "lazyProperties", "parameters": "()", "modifiers": "private", "return": "Map<Object, Object>", "signature": "Map<Object, Object> lazyProperties()", "full_signature": "private Map<Object, Object> lazyProperties()", "class_method_signature": "MolecularFormula.lazyProperties()", "testcase": false, "constructor": false}, {"identifier": "setProperty", "parameters": "(Object description, Object property)", "modifiers": "@Override public", "return": "void", "signature": "void setProperty(Object description, Object property)", "full_signature": "@Override public void setProperty(Object description, Object property)", "class_method_signature": "MolecularFormula.setProperty(Object description, Object property)", "testcase": false, "constructor": false}, {"identifier": "removeProperty", "parameters": "(Object description)", "modifiers": "@Override public", "return": "void", "signature": "void removeProperty(Object description)", "full_signature": "@Override public void removeProperty(Object description)", "class_method_signature": "MolecularFormula.removeProperty(Object description)", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "(Object description)", "modifiers": "@Override public", "return": "T", "signature": "T getProperty(Object description)", "full_signature": "@Override public T getProperty(Object description)", "class_method_signature": "MolecularFormula.getProperty(Object description)", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "(Object description, Class<T> c)", "modifiers": "@Override public", "return": "T", "signature": "T getProperty(Object description, Class<T> c)", "full_signature": "@Override public T getProperty(Object description, Class<T> c)", "class_method_signature": "MolecularFormula.getProperty(Object description, Class<T> c)", "testcase": false, "constructor": false}, {"identifier": "getProperties", "parameters": "()", "modifiers": "@Override public", "return": "Map<Object, Object>", "signature": "Map<Object, Object> getProperties()", "full_signature": "@Override public Map<Object, Object> getProperties()", "class_method_signature": "MolecularFormula.getProperties()", "testcase": false, "constructor": false}, {"identifier": "setProperties", "parameters": "(Map<Object, Object> properties)", "modifiers": "@Override public", "return": "void", "signature": "void setProperties(Map<Object, Object> properties)", "full_signature": "@Override public void setProperties(Map<Object, Object> properties)", "class_method_signature": "MolecularFormula.setProperties(Map<Object, Object> properties)", "testcase": false, "constructor": false}, {"identifier": "isTheSame", "parameters": "(IIsotope isotopeOne, IIsotope isotopeTwo)", "modifiers": "protected", "return": "boolean", "signature": "boolean isTheSame(IIsotope isotopeOne, IIsotope isotopeTwo)", "full_signature": "protected boolean isTheSame(IIsotope isotopeOne, IIsotope isotopeTwo)", "class_method_signature": "MolecularFormula.isTheSame(IIsotope isotopeOne, IIsotope isotopeTwo)", "testcase": false, "constructor": false}, {"identifier": "getBuilder", "parameters": "()", "modifiers": "@Override public", "return": "IChemObjectBuilder", "signature": "IChemObjectBuilder getBuilder()", "full_signature": "@Override public IChemObjectBuilder getBuilder()", "class_method_signature": "MolecularFormula.getBuilder()", "testcase": false, "constructor": false}], "file": "base/data/src/main/java/org/openscience/cdk/formula/MolecularFormula.java"}, "focal_method": {"identifier": "MolecularFormula", "parameters": "()", "modifiers": "public", "return": "", "body": "public MolecularFormula() {\n        isotopes = new HashMap<IIsotope, Integer>();\n    }", "signature": " MolecularFormula()", "full_signature": "public  MolecularFormula()", "class_method_signature": "MolecularFormula.MolecularFormula()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}