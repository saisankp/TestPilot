{"test_class": {"identifier": "CoverageUtilitiesTest", "superclass": "extends Assert", "interfaces": "", "fields": [], "file": "modules/library/coverage/src/test/java/org/geotools/resources/coverage/CoverageUtilitiesTest.java"}, "test_case": {"identifier": "testSuggestNodata", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSuggestNodata(){\n    \tassertEquals(Byte.valueOf((byte)0), CoverageUtilities.suggestNoDataValue(DataBuffer.TYPE_BYTE));\n    \tassertTrue(Double.isNaN(CoverageUtilities.suggestNoDataValue(DataBuffer.TYPE_DOUBLE).doubleValue()));\n    \tassertTrue(Float.isNaN(CoverageUtilities.suggestNoDataValue(DataBuffer.TYPE_FLOAT).floatValue()));\n    \tassertEquals(Integer.valueOf(Integer.MIN_VALUE), CoverageUtilities.suggestNoDataValue(DataBuffer.TYPE_INT));\n    \tassertEquals(Short.valueOf((short)0), CoverageUtilities.suggestNoDataValue(DataBuffer.TYPE_USHORT));\n    \tassertEquals(Short.valueOf(Short.MIN_VALUE), CoverageUtilities.suggestNoDataValue(DataBuffer.TYPE_SHORT));\n    }", "signature": "void testSuggestNodata()", "full_signature": "@Test public void testSuggestNodata()", "class_method_signature": "CoverageUtilitiesTest.testSuggestNodata()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "valueOf", "suggestNoDataValue", "assertTrue", "isNaN", "doubleValue", "suggestNoDataValue", "assertTrue", "isNaN", "floatValue", "suggestNoDataValue", "assertEquals", "valueOf", "suggestNoDataValue", "assertEquals", "valueOf", "suggestNoDataValue", "assertEquals", "valueOf", "suggestNoDataValue"]}, "focal_class": {"identifier": "CoverageUtilities", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final InternationalString NODATA=Vocabulary.formatInternational(VocabularyKeys.NODATA);", "modifier": "public static final", "type": "InternationalString", "declarator": "NODATA=Vocabulary.formatInternational(VocabularyKeys.NODATA)", "var_name": "NODATA"}, {"original_string": "public static final AffineTransform AXES_SWAP= new AffineTransform2D(0,1,1,0,0,0);", "modifier": "public static final", "type": "AffineTransform", "declarator": "AXES_SWAP= new AffineTransform2D(0,1,1,0,0,0)", "var_name": "AXES_SWAP"}, {"original_string": "public static final AffineTransform IDENTITY_TRANSFORM = new AffineTransform2D(AffineTransform.getRotateInstance(0));", "modifier": "public static final", "type": "AffineTransform", "declarator": "IDENTITY_TRANSFORM = new AffineTransform2D(AffineTransform.getRotateInstance(0))", "var_name": "IDENTITY_TRANSFORM"}, {"original_string": "public final static AffineTransform CENTER_TO_CORNER = AffineTransform\n    \t\t.getTranslateInstance(PixelTranslation\n    \t\t\t\t.getPixelTranslation(PixelInCell.CELL_CORNER),\n    \t\t\t\tPixelTranslation\n    \t\t\t\t\t\t.getPixelTranslation(PixelInCell.CELL_CORNER));", "modifier": "public final static", "type": "AffineTransform", "declarator": "CENTER_TO_CORNER = AffineTransform\n    \t\t.getTranslateInstance(PixelTranslation\n    \t\t\t\t.getPixelTranslation(PixelInCell.CELL_CORNER),\n    \t\t\t\tPixelTranslation\n    \t\t\t\t\t\t.getPixelTranslation(PixelInCell.CELL_CORNER))", "var_name": "CENTER_TO_CORNER"}, {"original_string": "public final static AffineTransform CORNER_TO_CENTER = AffineTransform\n    \t\t.getTranslateInstance(-PixelTranslation\n    \t\t\t\t.getPixelTranslation(PixelInCell.CELL_CORNER),\n    \t\t\t\t-PixelTranslation\n    \t\t\t\t\t\t.getPixelTranslation(PixelInCell.CELL_CORNER));", "modifier": "public final static", "type": "AffineTransform", "declarator": "CORNER_TO_CENTER = AffineTransform\n    \t\t.getTranslateInstance(-PixelTranslation\n    \t\t\t\t.getPixelTranslation(PixelInCell.CELL_CORNER),\n    \t\t\t\t-PixelTranslation\n    \t\t\t\t\t\t.getPixelTranslation(PixelInCell.CELL_CORNER))", "var_name": "CORNER_TO_CENTER"}], "methods": [{"identifier": "CoverageUtilities", "parameters": "()", "modifiers": "private", "return": "", "signature": " CoverageUtilities()", "full_signature": "private  CoverageUtilities()", "class_method_signature": "CoverageUtilities.CoverageUtilities()", "testcase": false, "constructor": true}, {"identifier": "getCRS2D", "parameters": "(final Coverage coverage)", "modifiers": "public static", "return": "CoordinateReferenceSystem", "signature": "CoordinateReferenceSystem getCRS2D(final Coverage coverage)", "full_signature": "public static CoordinateReferenceSystem getCRS2D(final Coverage coverage)", "class_method_signature": "CoverageUtilities.getCRS2D(final Coverage coverage)", "testcase": false, "constructor": false}, {"identifier": "getHorizontalCRS", "parameters": "(final Coverage coverage)", "modifiers": "public static", "return": "CoordinateReferenceSystem", "signature": "CoordinateReferenceSystem getHorizontalCRS(final Coverage coverage)", "full_signature": "public static CoordinateReferenceSystem getHorizontalCRS(final Coverage coverage)", "class_method_signature": "CoverageUtilities.getHorizontalCRS(final Coverage coverage)", "testcase": false, "constructor": false}, {"identifier": "getEnvelope2D", "parameters": "(final Coverage coverage)", "modifiers": "public static", "return": "Envelope2D", "signature": "Envelope2D getEnvelope2D(final Coverage coverage)", "full_signature": "public static Envelope2D getEnvelope2D(final Coverage coverage)", "class_method_signature": "CoverageUtilities.getEnvelope2D(final Coverage coverage)", "testcase": false, "constructor": false}, {"identifier": "getBackgroundValues", "parameters": "(GridCoverage2D coverage)", "modifiers": "public static", "return": "double[]", "signature": "double[] getBackgroundValues(GridCoverage2D coverage)", "full_signature": "public static double[] getBackgroundValues(GridCoverage2D coverage)", "class_method_signature": "CoverageUtilities.getBackgroundValues(GridCoverage2D coverage)", "testcase": false, "constructor": false}, {"identifier": "hasRenderingCategories", "parameters": "(final GridCoverage gridCoverage)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasRenderingCategories(final GridCoverage gridCoverage)", "full_signature": "public static boolean hasRenderingCategories(final GridCoverage gridCoverage)", "class_method_signature": "CoverageUtilities.hasRenderingCategories(final GridCoverage gridCoverage)", "testcase": false, "constructor": false}, {"identifier": "hasTransform", "parameters": "(final SampleDimension[] sampleDimensions)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasTransform(final SampleDimension[] sampleDimensions)", "full_signature": "public static boolean hasTransform(final SampleDimension[] sampleDimensions)", "class_method_signature": "CoverageUtilities.hasTransform(final SampleDimension[] sampleDimensions)", "testcase": false, "constructor": false}, {"identifier": "uses", "parameters": "(final GridCoverage coverage, final RenderedImage image)", "modifiers": "public static", "return": "boolean", "signature": "boolean uses(final GridCoverage coverage, final RenderedImage image)", "full_signature": "public static boolean uses(final GridCoverage coverage, final RenderedImage image)", "class_method_signature": "CoverageUtilities.uses(final GridCoverage coverage, final RenderedImage image)", "testcase": false, "constructor": false}, {"identifier": "getVisibleBand", "parameters": "(final Object image)", "modifiers": "public static", "return": "int", "signature": "int getVisibleBand(final Object image)", "full_signature": "public static int getVisibleBand(final Object image)", "class_method_signature": "CoverageUtilities.getVisibleBand(final Object image)", "testcase": false, "constructor": false}, {"identifier": "preferredViewForOperation", "parameters": "(final GridCoverage2D coverage,\n            final Interpolation interpolation, final boolean hasFilter, final RenderingHints hints)", "modifiers": "public static", "return": "ViewType", "signature": "ViewType preferredViewForOperation(final GridCoverage2D coverage,\n            final Interpolation interpolation, final boolean hasFilter, final RenderingHints hints)", "full_signature": "public static ViewType preferredViewForOperation(final GridCoverage2D coverage,\n            final Interpolation interpolation, final boolean hasFilter, final RenderingHints hints)", "class_method_signature": "CoverageUtilities.preferredViewForOperation(final GridCoverage2D coverage,\n            final Interpolation interpolation, final boolean hasFilter, final RenderingHints hints)", "testcase": false, "constructor": false}, {"identifier": "preferredViewAfterOperation", "parameters": "(final GridCoverage2D coverage)", "modifiers": "public static", "return": "ViewType", "signature": "ViewType preferredViewAfterOperation(final GridCoverage2D coverage)", "full_signature": "public static ViewType preferredViewAfterOperation(final GridCoverage2D coverage)", "class_method_signature": "CoverageUtilities.preferredViewAfterOperation(final GridCoverage2D coverage)", "testcase": false, "constructor": false}, {"identifier": "isScaleTranslate", "parameters": "(final MathTransform transform, final double EPS)", "modifiers": "public static", "return": "boolean", "signature": "boolean isScaleTranslate(final MathTransform transform, final double EPS)", "full_signature": "public static boolean isScaleTranslate(final MathTransform transform, final double EPS)", "class_method_signature": "CoverageUtilities.isScaleTranslate(final MathTransform transform, final double EPS)", "testcase": false, "constructor": false}, {"identifier": "getResolution", "parameters": "(final AffineTransform gridToCRS)", "modifiers": "public static", "return": "double[]", "signature": "double[] getResolution(final AffineTransform gridToCRS)", "full_signature": "public static double[] getResolution(final AffineTransform gridToCRS)", "class_method_signature": "CoverageUtilities.getResolution(final AffineTransform gridToCRS)", "testcase": false, "constructor": false}, {"identifier": "isSimpleGridToWorldTransform", "parameters": "(final AffineTransform gridToCRS, double EPS)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSimpleGridToWorldTransform(final AffineTransform gridToCRS, double EPS)", "full_signature": "public static boolean isSimpleGridToWorldTransform(final AffineTransform gridToCRS, double EPS)", "class_method_signature": "CoverageUtilities.isSimpleGridToWorldTransform(final AffineTransform gridToCRS, double EPS)", "testcase": false, "constructor": false}, {"identifier": "checkEmptySourceRegion", "parameters": "(final ImageReadParam readParameters, \n            final Rectangle dimensions)", "modifiers": "public static", "return": "boolean", "signature": "boolean checkEmptySourceRegion(final ImageReadParam readParameters, \n            final Rectangle dimensions)", "full_signature": "public static boolean checkEmptySourceRegion(final ImageReadParam readParameters, \n            final Rectangle dimensions)", "class_method_signature": "CoverageUtilities.checkEmptySourceRegion(final ImageReadParam readParameters, \n            final Rectangle dimensions)", "testcase": false, "constructor": false}, {"identifier": "getMosaicThreshold", "parameters": "(int dataType)", "modifiers": "public static", "return": "double", "signature": "double getMosaicThreshold(int dataType)", "full_signature": "public static double getMosaicThreshold(int dataType)", "class_method_signature": "CoverageUtilities.getMosaicThreshold(int dataType)", "testcase": false, "constructor": false}, {"identifier": "suggestNoDataValue", "parameters": "(int dataType)", "modifiers": "public static", "return": "Number", "signature": "Number suggestNoDataValue(int dataType)", "full_signature": "public static Number suggestNoDataValue(int dataType)", "class_method_signature": "CoverageUtilities.suggestNoDataValue(int dataType)", "testcase": false, "constructor": false}], "file": "modules/library/coverage/src/main/java/org/geotools/resources/coverage/CoverageUtilities.java"}, "focal_method": {"identifier": "suggestNoDataValue", "parameters": "(int dataType)", "modifiers": "public static", "return": "Number", "body": "public static Number suggestNoDataValue(int dataType) {\n\t\tswitch (dataType) {\n\t\tcase DataBuffer.TYPE_BYTE:\n\t\t\treturn Byte.valueOf((byte)0);\n\t\tcase DataBuffer.TYPE_USHORT:\n\t\t\treturn Short.valueOf((short)0);\n\t\tcase DataBuffer.TYPE_INT:\n\t\t\treturn Integer.valueOf(Integer.MIN_VALUE);\n\t\tcase DataBuffer.TYPE_SHORT:\n\t\t\treturn Short.valueOf((short)Short.MIN_VALUE);\n\t\tcase DataBuffer.TYPE_DOUBLE:\n\t\t\treturn Double.valueOf(Double.NaN);\n\t\tcase DataBuffer.TYPE_FLOAT:\n\t\t\treturn Float.valueOf(Float.NaN);\n\t\tdefault:\n\t\t\tthrow new IllegalAccessError(Errors.format(ErrorKeys.ILLEGAL_ARGUMENT_$2,\"dataType\",dataType));\n\t\t}\n\t}", "signature": "Number suggestNoDataValue(int dataType)", "full_signature": "public static Number suggestNoDataValue(int dataType)", "class_method_signature": "CoverageUtilities.suggestNoDataValue(int dataType)", "testcase": false, "constructor": false, "invocations": ["valueOf", "valueOf", "valueOf", "valueOf", "valueOf", "valueOf", "format"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}