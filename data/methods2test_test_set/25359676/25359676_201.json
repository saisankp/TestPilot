{"test_class": {"identifier": "ObjectPathExpressionParserTest", "superclass": "extends ProcessLoggingUnitTest", "interfaces": "", "fields": [], "file": "rice-framework/krad-web-framework/src/test/java/org/kuali/rice/krad/uif/util/ObjectPathExpressionParserTest.java"}, "test_case": {"identifier": "testParsePathExpression", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParsePathExpression() {\n        assertEquals(\"foo+bar\",\n                ObjectPathExpressionParser.parsePathExpression(null, \"foo.bar\", new DoIt())\n                        .toString());\n        assertEquals(\"foo+bar\",\n                ObjectPathExpressionParser.parsePathExpression(null, \"foo[bar]\", new DoIt())\n                        .toString());\n        assertEquals(\"foo+bar+baz\",\n                ObjectPathExpressionParser\n                        .parsePathExpression(null, \"foo[bar].baz\", new DoIt())\n                        .toString());\n        assertEquals(\n                \"foo+bar[baz]\",\n                ObjectPathExpressionParser.parsePathExpression(null, \"foo[bar[baz]]\",\n                        new DoIt()).toString());\n        assertEquals(\n                \"foo+bar-bar.baz+fez\",\n                ObjectPathExpressionParser.parsePathExpression(null, \"foo[bar-bar.baz]+fez\",\n                        new DoIt()).toString());\n    }", "signature": "void testParsePathExpression()", "full_signature": "@Test public void testParsePathExpression()", "class_method_signature": "ObjectPathExpressionParserTest.testParsePathExpression()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toString", "parsePathExpression", "assertEquals", "toString", "parsePathExpression", "assertEquals", "toString", "parsePathExpression", "assertEquals", "toString", "parsePathExpression", "assertEquals", "toString", "parsePathExpression"]}, "focal_class": {"identifier": "ObjectPathExpressionParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ThreadLocal<ParseState> TL_EL_PARSE_STATE = new ThreadLocal<ParseState>();", "modifier": "private static final", "type": "ThreadLocal<ParseState>", "declarator": "TL_EL_PARSE_STATE = new ThreadLocal<ParseState>()", "var_name": "TL_EL_PARSE_STATE"}], "methods": [{"identifier": "indexOfCloseBracket", "parameters": "(String path, int leftBracketIndex)", "modifiers": "public static", "return": "int", "signature": "int indexOfCloseBracket(String path, int leftBracketIndex)", "full_signature": "public static int indexOfCloseBracket(String path, int leftBracketIndex)", "class_method_signature": "ObjectPathExpressionParser.indexOfCloseBracket(String path, int leftBracketIndex)", "testcase": false, "constructor": false}, {"identifier": "isPath", "parameters": "(String propertyName)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPath(String propertyName)", "full_signature": "public static boolean isPath(String propertyName)", "class_method_signature": "ObjectPathExpressionParser.isPath(String propertyName)", "testcase": false, "constructor": false}, {"identifier": "parsePathExpression", "parameters": "(Object root, String path, final PathEntry pathEntry)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "signature": "T parsePathExpression(Object root, String path, final PathEntry pathEntry)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T parsePathExpression(Object root, String path, final PathEntry pathEntry)", "class_method_signature": "ObjectPathExpressionParser.parsePathExpression(Object root, String path, final PathEntry pathEntry)", "testcase": false, "constructor": false}, {"identifier": "ObjectPathExpressionParser", "parameters": "()", "modifiers": "private", "return": "", "signature": " ObjectPathExpressionParser()", "full_signature": "private  ObjectPathExpressionParser()", "class_method_signature": "ObjectPathExpressionParser.ObjectPathExpressionParser()", "testcase": false, "constructor": true}], "file": "rice-framework/krad-web-framework/src/main/java/org/kuali/rice/krad/uif/util/ObjectPathExpressionParser.java"}, "focal_method": {"identifier": "parsePathExpression", "parameters": "(Object root, String path, final PathEntry pathEntry)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "body": "@SuppressWarnings(\"unchecked\")\n    public static <T> T parsePathExpression(Object root, String path, final PathEntry pathEntry) {\n\n        // NOTE: This iterative parser allows support for subexpressions\n        // without recursion. When a subexpression start token '[' is\n        // encountered the current continuation is pushed onto a stack. When\n        // the subexpression is resolved, the continuation is popped back\n        // off the stack and resolved using the subexpression result as the\n        // arg. All subexpressions start with the same root passed in as an\n        // argument for this method. - MWF\n\n        ParseState parseState = (ParseState) TL_EL_PARSE_STATE.get();\n        boolean recycle;\n\n        if (parseState == null) {\n            TL_EL_PARSE_STATE.set(new ParseState());\n            parseState = TL_EL_PARSE_STATE.get();\n            recycle = true;\n        } else if (parseState.isActive()) {\n            ProcessLogger.ntrace(\"el-parse:\", \":nested\", 100);\n            parseState = new ParseState();\n            recycle = false;\n        } else {\n            recycle = true;\n        }\n\n        try {\n            parseState.originalPath = path;\n            parseState.originalPathIndex = 0;\n            parseState.parentPath = null;\n            parseState.currentContinuation = pathEntry.parse(null, root, null);\n            while (path != null) {\n                path = parseState.prepareNextScan(path);\n                parseState.scan(path);\n                path = parseState.step(path, pathEntry);\n            }\n            return (T) parseState.currentContinuation;\n        } finally {\n            assert !recycle || parseState == TL_EL_PARSE_STATE.get();\n            parseState.reset();\n        }\n    }", "signature": "T parsePathExpression(Object root, String path, final PathEntry pathEntry)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T parsePathExpression(Object root, String path, final PathEntry pathEntry)", "class_method_signature": "ObjectPathExpressionParser.parsePathExpression(Object root, String path, final PathEntry pathEntry)", "testcase": false, "constructor": false, "invocations": ["get", "set", "get", "isActive", "ntrace", "parse", "prepareNextScan", "scan", "step", "get", "reset"]}, "repository": {"repo_id": 25359676, "url": "https://github.com/kuali/rice", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 16, "size": 289156, "license": "licensed"}}