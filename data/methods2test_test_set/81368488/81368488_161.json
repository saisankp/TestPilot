{"test_class": {"identifier": "SecondScreenTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private Stage mockStage;", "modifier": "@Mock\n    private", "type": "Stage", "declarator": "mockStage", "var_name": "mockStage"}, {"original_string": "private Group group;", "modifier": "private", "type": "Group", "declarator": "group", "var_name": "group"}, {"original_string": "private Lighting[][] lightingArray;", "modifier": "private", "type": "Lighting[][]", "declarator": "lightingArray", "var_name": "lightingArray"}], "file": "gazeplay-commons/src/test/java/net/gazeplay/commons/gaze/SecondScreenTest.java"}, "test_case": {"identifier": "shouldLightCoordinates", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void shouldLightCoordinates() {\n        List<Point2D> answerList = List.of(\n            new Point2D(1, 1),\n            new Point2D(lightingArray.length * 20 - 1, 0),\n            new Point2D(0, lightingArray[0].length * 20 - 1)\n        );\n\n        Lighting[][] mockLighting = lightingArray;\n\n        for (int i = 0; i < mockLighting.length; i++) {\n            for (int j = 0; j < mockLighting[i].length; j++) {\n                mockLighting[i][j] = mock(Lighting.class);\n            }\n        }\n\n        SecondScreen secondScreen = new SecondScreen(mockStage, mockLighting);\n\n        for (Point2D point2D : answerList) {\n            secondScreen.light(point2D);\n\n            verify(mockLighting[(int) point2D.getX() / 20][(int) point2D.getY() / 20]).enter();\n        }\n    }", "signature": "void shouldLightCoordinates()", "full_signature": "@Test void shouldLightCoordinates()", "class_method_signature": "SecondScreenTest.shouldLightCoordinates()", "testcase": true, "constructor": false, "invocations": ["of", "mock", "light", "enter", "verify", "getX", "getY"]}, "focal_class": {"identifier": "SecondScreen", "superclass": "", "interfaces": "implements GazeMotionListener", "fields": [{"original_string": "private static final int pixelWidth = 20;", "modifier": "private static final", "type": "int", "declarator": "pixelWidth = 20", "var_name": "pixelWidth"}, {"original_string": "private static final int lightingLength = 20;", "modifier": "private static final", "type": "int", "declarator": "lightingLength = 20", "var_name": "lightingLength"}, {"original_string": "private static final Color lightingColor = Color.BLUE;", "modifier": "private static final", "type": "Color", "declarator": "lightingColor = Color.BLUE", "var_name": "lightingColor"}, {"original_string": "private final Stage stage2;", "modifier": "private final", "type": "Stage", "declarator": "stage2", "var_name": "stage2"}, {"original_string": "private final Lighting[][] lightingArray;", "modifier": "private final", "type": "Lighting[][]", "declarator": "lightingArray", "var_name": "lightingArray"}], "methods": [{"identifier": "SecondScreen", "parameters": "(final Stage stage2, final Lighting[][] lightingArray)", "modifiers": "", "return": "", "signature": " SecondScreen(final Stage stage2, final Lighting[][] lightingArray)", "full_signature": "  SecondScreen(final Stage stage2, final Lighting[][] lightingArray)", "class_method_signature": "SecondScreen.SecondScreen(final Stage stage2, final Lighting[][] lightingArray)", "testcase": false, "constructor": true}, {"identifier": "makeLighting", "parameters": "(final Group root, final Rectangle2D screen2Bounds)", "modifiers": "static", "return": "Lighting[][]", "signature": "Lighting[][] makeLighting(final Group root, final Rectangle2D screen2Bounds)", "full_signature": "static Lighting[][] makeLighting(final Group root, final Rectangle2D screen2Bounds)", "class_method_signature": "SecondScreen.makeLighting(final Group root, final Rectangle2D screen2Bounds)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "SecondScreen.close()", "testcase": false, "constructor": false}, {"identifier": "light", "parameters": "(final Point2D rawCoordinates)", "modifiers": "public", "return": "void", "signature": "void light(final Point2D rawCoordinates)", "full_signature": "public void light(final Point2D rawCoordinates)", "class_method_signature": "SecondScreen.light(final Point2D rawCoordinates)", "testcase": false, "constructor": false}, {"identifier": "gazeMoved", "parameters": "(final Point2D position)", "modifiers": "@Override public", "return": "void", "signature": "void gazeMoved(final Point2D position)", "full_signature": "@Override public void gazeMoved(final Point2D position)", "class_method_signature": "SecondScreen.gazeMoved(final Point2D position)", "testcase": false, "constructor": false}], "file": "gazeplay-commons/src/main/java/net/gazeplay/commons/gaze/SecondScreen.java"}, "focal_method": {"identifier": "light", "parameters": "(final Point2D rawCoordinates)", "modifiers": "public", "return": "void", "body": "public void light(final Point2D rawCoordinates) {\n        final int x = (int) (rawCoordinates.getX() / pixelWidth);\n        final int y = (int) (rawCoordinates.getY() / pixelWidth);\n\n        if ((x < 0 || x >= lightingArray.length) ||\n            (y < 0 || y >= lightingArray[x].length)) {\n            return;\n        }\n\n        lightingArray[x][y].enter();\n    }", "signature": "void light(final Point2D rawCoordinates)", "full_signature": "public void light(final Point2D rawCoordinates)", "class_method_signature": "SecondScreen.light(final Point2D rawCoordinates)", "testcase": false, "constructor": false, "invocations": ["getX", "getY", "enter"]}, "repository": {"repo_id": 81368488, "url": "https://github.com/GazePlay/GazePlay", "stars": 15, "created": "2/8/2017 7:39:08 PM +00:00", "updates": "2020-01-26T16:45:47+00:00", "fork": "False", "license": "licensed"}}