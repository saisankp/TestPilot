{"test_class": {"identifier": "BackgroundLocationManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public MockitoRule rule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "rule = MockitoJUnit.rule()", "var_name": "rule"}, {"original_string": "private BackgroundLocationManager backgroundLocationManager;", "modifier": "private", "type": "BackgroundLocationManager", "declarator": "backgroundLocationManager", "var_name": "backgroundLocationManager"}, {"original_string": "private FakeLocationClient fakeLocationClient;", "modifier": "private", "type": "FakeLocationClient", "declarator": "fakeLocationClient", "var_name": "fakeLocationClient"}, {"original_string": "@Mock\n    private BackgroundLocationHelper locationHelper;", "modifier": "@Mock\n    private", "type": "BackgroundLocationHelper", "declarator": "locationHelper", "var_name": "locationHelper"}], "file": "collect_app/src/test/java/org/odk/collect/android/formentry/backgroundlocation/BackgroundLocationManagerTest.java"}, "test_case": {"identifier": "locationRequests_Resume_WhenActivityIsDisplayed_AndFormThatAuditsLocationWasAlreadyLoaded", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void locationRequests_Resume_WhenActivityIsDisplayed_AndFormThatAuditsLocationWasAlreadyLoaded() {\n        when(locationHelper.isCurrentFormSet()).thenReturn(true);\n        when(locationHelper.currentFormAuditsLocation()).thenReturn(true);\n\n        when(locationHelper.arePlayServicesAvailable()).thenReturn(true);\n        when(locationHelper.isBackgroundLocationPreferenceEnabled()).thenReturn(true);\n        when(locationHelper.isAndroidLocationPermissionGranted()).thenReturn(true);\n        when(locationHelper.getCurrentFormAuditConfig()).thenReturn(new AuditConfig(\"foo\", \"2\", \"3\", true));\n\n        backgroundLocationManager.activityDisplayed();\n\n        Location location = LocationTestUtils.createLocation(\"GPS\", 1, 2, 3, 4);\n        fakeLocationClient.receiveFix(location);\n        verify(locationHelper).provideLocationToAuditLogger(location);\n    }", "signature": "void locationRequests_Resume_WhenActivityIsDisplayed_AndFormThatAuditsLocationWasAlreadyLoaded()", "full_signature": "@Test public void locationRequests_Resume_WhenActivityIsDisplayed_AndFormThatAuditsLocationWasAlreadyLoaded()", "class_method_signature": "BackgroundLocationManagerTest.locationRequests_Resume_WhenActivityIsDisplayed_AndFormThatAuditsLocationWasAlreadyLoaded()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "isCurrentFormSet", "thenReturn", "when", "currentFormAuditsLocation", "thenReturn", "when", "arePlayServicesAvailable", "thenReturn", "when", "isBackgroundLocationPreferenceEnabled", "thenReturn", "when", "isAndroidLocationPermissionGranted", "thenReturn", "when", "getCurrentFormAuditConfig", "activityDisplayed", "createLocation", "receiveFix", "provideLocationToAuditLogger", "verify"]}, "focal_class": {"identifier": "BackgroundLocationManager", "superclass": "", "interfaces": "implements LocationClient.LocationClientListener, LocationListener", "fields": [{"original_string": "@NonNull\n    private BackgroundLocationState currentState;", "modifier": "@NonNull\n    private", "type": "BackgroundLocationState", "declarator": "currentState", "var_name": "currentState"}, {"original_string": "@NonNull\n    private LocationClient locationClient;", "modifier": "@NonNull\n    private", "type": "LocationClient", "declarator": "locationClient", "var_name": "locationClient"}, {"original_string": "@NonNull\n    private LocationListener locationListener;", "modifier": "@NonNull\n    private", "type": "LocationListener", "declarator": "locationListener", "var_name": "locationListener"}, {"original_string": "@NonNull\n    private BackgroundLocationHelper helper;", "modifier": "@NonNull\n    private", "type": "BackgroundLocationHelper", "declarator": "helper", "var_name": "helper"}], "methods": [{"identifier": "BackgroundLocationManager", "parameters": "(LocationClient locationClient, BackgroundLocationHelper helper)", "modifiers": "public", "return": "", "signature": " BackgroundLocationManager(LocationClient locationClient, BackgroundLocationHelper helper)", "full_signature": "public  BackgroundLocationManager(LocationClient locationClient, BackgroundLocationHelper helper)", "class_method_signature": "BackgroundLocationManager.BackgroundLocationManager(LocationClient locationClient, BackgroundLocationHelper helper)", "testcase": false, "constructor": true}, {"identifier": "formFinishedLoading", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void formFinishedLoading()", "full_signature": "public void formFinishedLoading()", "class_method_signature": "BackgroundLocationManager.formFinishedLoading()", "testcase": false, "constructor": false}, {"identifier": "activityDisplayed", "parameters": "()", "modifiers": "public", "return": "BackgroundLocationMessage", "signature": "BackgroundLocationMessage activityDisplayed()", "full_signature": "public BackgroundLocationMessage activityDisplayed()", "class_method_signature": "BackgroundLocationManager.activityDisplayed()", "testcase": false, "constructor": false}, {"identifier": "activityHidden", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void activityHidden()", "full_signature": "public void activityHidden()", "class_method_signature": "BackgroundLocationManager.activityHidden()", "testcase": false, "constructor": false}, {"identifier": "isPendingPermissionCheck", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPendingPermissionCheck()", "full_signature": "public boolean isPendingPermissionCheck()", "class_method_signature": "BackgroundLocationManager.isPendingPermissionCheck()", "testcase": false, "constructor": false}, {"identifier": "locationPermissionGranted", "parameters": "()", "modifiers": "public", "return": "BackgroundLocationMessage", "signature": "BackgroundLocationMessage locationPermissionGranted()", "full_signature": "public BackgroundLocationMessage locationPermissionGranted()", "class_method_signature": "BackgroundLocationManager.locationPermissionGranted()", "testcase": false, "constructor": false}, {"identifier": "locationPermissionDenied", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void locationPermissionDenied()", "full_signature": "public void locationPermissionDenied()", "class_method_signature": "BackgroundLocationManager.locationPermissionDenied()", "testcase": false, "constructor": false}, {"identifier": "backgroundLocationPreferenceToggled", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void backgroundLocationPreferenceToggled()", "full_signature": "public void backgroundLocationPreferenceToggled()", "class_method_signature": "BackgroundLocationManager.backgroundLocationPreferenceToggled()", "testcase": false, "constructor": false}, {"identifier": "locationPermissionChanged", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void locationPermissionChanged()", "full_signature": "public void locationPermissionChanged()", "class_method_signature": "BackgroundLocationManager.locationPermissionChanged()", "testcase": false, "constructor": false}, {"identifier": "locationProvidersChanged", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void locationProvidersChanged()", "full_signature": "public void locationProvidersChanged()", "class_method_signature": "BackgroundLocationManager.locationProvidersChanged()", "testcase": false, "constructor": false}, {"identifier": "startLocationRequests", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void startLocationRequests()", "full_signature": "private void startLocationRequests()", "class_method_signature": "BackgroundLocationManager.startLocationRequests()", "testcase": false, "constructor": false}, {"identifier": "stopLocationRequests", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void stopLocationRequests()", "full_signature": "private void stopLocationRequests()", "class_method_signature": "BackgroundLocationManager.stopLocationRequests()", "testcase": false, "constructor": false}, {"identifier": "onLocationChanged", "parameters": "(Location location)", "modifiers": "@Override public", "return": "void", "signature": "void onLocationChanged(Location location)", "full_signature": "@Override public void onLocationChanged(Location location)", "class_method_signature": "BackgroundLocationManager.onLocationChanged(Location location)", "testcase": false, "constructor": false}, {"identifier": "onClientStart", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onClientStart()", "full_signature": "@Override public void onClientStart()", "class_method_signature": "BackgroundLocationManager.onClientStart()", "testcase": false, "constructor": false}, {"identifier": "onClientStartFailure", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onClientStartFailure()", "full_signature": "@Override public void onClientStartFailure()", "class_method_signature": "BackgroundLocationManager.onClientStartFailure()", "testcase": false, "constructor": false}, {"identifier": "onClientStop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onClientStop()", "full_signature": "@Override public void onClientStop()", "class_method_signature": "BackgroundLocationManager.onClientStop()", "testcase": false, "constructor": false}], "file": "collect_app/src/main/java/org/odk/collect/android/formentry/backgroundlocation/BackgroundLocationManager.java"}, "focal_method": {"identifier": "activityDisplayed", "parameters": "()", "modifiers": "public", "return": "BackgroundLocationMessage", "body": "public BackgroundLocationMessage activityDisplayed() {\n        switch (currentState) {\n            case NO_BACKGROUND_LOCATION_NEEDED:\n                // After system-initiated process death, state is reset. The form did not get\n                // reloaded and user messaging has already been displayed so go straight to\n                // requesting location.\n                if (helper.isCurrentFormSet() && helper.currentFormAuditsLocation()) {\n                    startLocationRequests();\n\n                    if (currentState != BackgroundLocationState.RECEIVING_LOCATIONS) {\n                        // The form requests background location and some precondition failed. Change\n                        // the state to STOPPED so that if preconditions change, location tracking\n                        // will resume.\n                        currentState = BackgroundLocationState.STOPPED;\n                    }\n                }\n                break;\n\n            case PENDING_PRECONDITION_CHECKS:\n                // Separate out user message so that any failed precondition is written to the audit\n                // log. If Play Services are unavailable AND the location preference is disabled,\n                // show the Play Services unavailable message only.\n                BackgroundLocationMessage userMessage = null;\n\n                if (!helper.isBackgroundLocationPreferenceEnabled()) {\n                    helper.logAuditEvent(AuditEvent.AuditEventType.LOCATION_TRACKING_DISABLED);\n                    userMessage = BackgroundLocationMessage.LOCATION_PREF_DISABLED;\n                }\n\n                if (!helper.arePlayServicesAvailable()) {\n                    helper.logAuditEvent(AuditEvent.AuditEventType.GOOGLE_PLAY_SERVICES_NOT_AVAILABLE);\n                    userMessage = BackgroundLocationMessage.PLAY_SERVICES_UNAVAILABLE;\n                }\n\n                if (userMessage == null) {\n                    helper.logAuditEvent(AuditEvent.AuditEventType.LOCATION_TRACKING_ENABLED);\n                    currentState = BackgroundLocationState.PENDING_PERMISSION_CHECK;\n                } else {\n                    currentState = BackgroundLocationState.STOPPED;\n                }\n\n                return userMessage;\n\n            case STOPPED:\n                // All preconditions could be met either because we were collecting location, hid\n                // the activity and showed it again or because a precondition became met.\n                startLocationRequests();\n                break;\n        }\n\n        return null;\n    }", "signature": "BackgroundLocationMessage activityDisplayed()", "full_signature": "public BackgroundLocationMessage activityDisplayed()", "class_method_signature": "BackgroundLocationManager.activityDisplayed()", "testcase": false, "constructor": false, "invocations": ["isCurrentFormSet", "currentFormAuditsLocation", "startLocationRequests", "isBackgroundLocationPreferenceEnabled", "logAuditEvent", "arePlayServicesAvailable", "logAuditEvent", "logAuditEvent", "startLocationRequests"]}, "repository": {"repo_id": 166636413, "url": "https://github.com/fieldsight/fieldsight-mobile", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 14, "size": 41030, "license": "licensed"}}