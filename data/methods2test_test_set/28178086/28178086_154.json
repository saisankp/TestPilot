{"test_class": {"identifier": "MultiCholetteDocumentTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtss/src/test/java/ec/tss/disaggregation/documents/MultiCholetteDocumentTest.java"}, "test_case": {"identifier": "testRedundantContemporaneous", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRedundantContemporaneous() {\n         int N = 10;\n        Matrix M = new Matrix(240, N * N);\n        M.randomize();\n        Ts[] s = new Ts[N * N];\n        TsVariables vars=new TsVariables();\n        TsPeriod start = new TsPeriod(TsFrequency.Monthly, 1980, 0);\n        for (int i = 0; i < N * N; ++i) {\n            TsData data=new TsData(start, M.column(i));\n            vars.set(\"s\" + i , new TsVariable(data));\n        }\n        // create the specs\n        MultiCholetteSpecification spec = new MultiCholetteSpecification();\n        // put unbinding constraints\n        for (int i = 0; i < N; ++i) {\n            StringBuilder str=new StringBuilder();\n            str.append(.5 * N).append('=');\n            int[] ids = new int[N];\n            for (int j = 0; j < N; ++j) {\n                str.append(\"+s\").append(i + N * j);\n            }\n            spec.addConstraint(str.toString());\n        }\n        for (int i = 0; i < N ; ++i) {\n            StringBuilder str=new StringBuilder();\n            str.append(.5 * N).append('=');\n            for (int j = 0; j < N; ++j) {\n                str.append(\"+s\").append(j + N * i);\n            }\n            spec.addConstraint(str.toString());\n        }\n        spec.addConstraint(\"0=s2+2*s6-s10-s18\");\n        spec.addConstraint(\"0=s4+2*s11-s18\");\n\n        //spec.getParameters().setRho(.8);\n        MultiCholetteDocument doc = new MultiCholetteDocument();\n        \n        doc.setInput(vars);\n        doc.setSpecification(spec);\n        MultiBenchmarkingResults results = doc.getResults();\n        for (int j = 0; j < N; ++j) {\n            TsData S = null;\n            for (int i = 0; i < N; ++i) {\n                S = TsData.add(S, results.getData(\"benchmarked.s\" + (i + N * j), TsData.class));\n            }\n            DescriptiveStatistics stat = new DescriptiveStatistics(S);\n            assertTrue(Math.abs(stat.getAverage() - .5 * N) < 1e-6);\n            assertTrue(stat.getStdev() < 1e-9);\n//            System.out.println(stat.getStdev());\n        }\n        for (int j = 0; j < N; ++j) {\n            TsData S = null;\n            for (int i = 0; i < N; ++i) {\n                S = TsData.add(S, results.getData(\"benchmarked.s\" + (N * i + j), TsData.class));\n            }\n            DescriptiveStatistics stat = new DescriptiveStatistics(S);\n            assertTrue(Math.abs(stat.getAverage() - .5 * N) < 1e-6);\n            assertTrue(stat.getStdev() < 1e-9);\n//            System.out.println(stat.getStdev());\n        }\n        TsData S = results.getData(\"benchmarked.s2\", TsData.class);\n        S = TsData.add(S, results.getData(\"benchmarked.s6\", TsData.class).times(2));\n        S = TsData.subtract(S, results.getData(\"benchmarked.s10\", TsData.class));\n        S = TsData.subtract(S, results.getData(\"benchmarked.s18\", TsData.class));\n\n        DescriptiveStatistics stat = new DescriptiveStatistics(S);\n        assertTrue(Math.abs(stat.getAverage()) < 1e-6);\n        assertTrue(stat.getStdev() < 1e-9);\n        \n        MultiCholetteDocument clone = doc.clone();\n        assertTrue(clone.getResults() != null);\n    }", "signature": "void testRedundantContemporaneous()", "full_signature": "@Test public void testRedundantContemporaneous()", "class_method_signature": "MultiCholetteDocumentTest.testRedundantContemporaneous()", "testcase": true, "constructor": false, "invocations": ["randomize", "column", "set", "append", "append", "append", "append", "addConstraint", "toString", "append", "append", "append", "append", "addConstraint", "toString", "addConstraint", "addConstraint", "setInput", "setSpecification", "getResults", "add", "getData", "assertTrue", "abs", "getAverage", "assertTrue", "getStdev", "add", "getData", "assertTrue", "abs", "getAverage", "assertTrue", "getStdev", "getData", "add", "times", "getData", "subtract", "getData", "subtract", "getData", "assertTrue", "abs", "getAverage", "assertTrue", "getStdev", "clone", "assertTrue", "getResults"]}, "focal_class": {"identifier": "MultiCholetteDocument", "superclass": "extends ActiveDocument<MultiCholetteSpecification, TsVariables, MultiBenchmarkingResults>", "interfaces": "implements Cloneable", "fields": [{"original_string": "private final MultiCholetteProcessor factory_;", "modifier": "private final", "type": "MultiCholetteProcessor", "declarator": "factory_", "var_name": "factory_"}], "methods": [{"identifier": "MultiCholetteDocument", "parameters": "()", "modifiers": "public", "return": "", "signature": " MultiCholetteDocument()", "full_signature": "public  MultiCholetteDocument()", "class_method_signature": "MultiCholetteDocument.MultiCholetteDocument()", "testcase": false, "constructor": true}, {"identifier": "MultiCholetteDocument", "parameters": "(ProcessingContext context)", "modifiers": "public", "return": "", "signature": " MultiCholetteDocument(ProcessingContext context)", "full_signature": "public  MultiCholetteDocument(ProcessingContext context)", "class_method_signature": "MultiCholetteDocument.MultiCholetteDocument(ProcessingContext context)", "testcase": false, "constructor": true}, {"identifier": "setVariables", "parameters": "(TsVariables vars)", "modifiers": "public", "return": "void", "signature": "void setVariables(TsVariables vars)", "full_signature": "public void setVariables(TsVariables vars)", "class_method_signature": "MultiCholetteDocument.setVariables(TsVariables vars)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "MultiCholetteDocument", "signature": "MultiCholetteDocument clone()", "full_signature": "@Override public MultiCholetteDocument clone()", "class_method_signature": "MultiCholetteDocument.clone()", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(boolean verbose)", "modifiers": "@Override public", "return": "InformationSet", "signature": "InformationSet write(boolean verbose)", "full_signature": "@Override public InformationSet write(boolean verbose)", "class_method_signature": "MultiCholetteDocument.write(boolean verbose)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(InformationSet info)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean read(InformationSet info)", "full_signature": "@Override public boolean read(InformationSet info)", "class_method_signature": "MultiCholetteDocument.read(InformationSet info)", "testcase": false, "constructor": false}, {"identifier": "recalc", "parameters": "(MultiCholetteSpecification spec, TsVariables input)", "modifiers": "@Override protected", "return": "MultiBenchmarkingResults", "signature": "MultiBenchmarkingResults recalc(MultiCholetteSpecification spec, TsVariables input)", "full_signature": "@Override protected MultiBenchmarkingResults recalc(MultiCholetteSpecification spec, TsVariables input)", "class_method_signature": "MultiCholetteDocument.recalc(MultiCholetteSpecification spec, TsVariables input)", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDescription()", "full_signature": "@Override public String getDescription()", "class_method_signature": "MultiCholetteDocument.getDescription()", "testcase": false, "constructor": false}], "file": "jtss/src/main/java/ec/tss/disaggregation/documents/MultiCholetteDocument.java"}, "focal_method": {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "MultiCholetteDocument", "body": "@Override\n    public MultiCholetteDocument clone() {\n        MultiCholetteDocument cl = (MultiCholetteDocument) super.clone();\n        return cl;\n    }", "signature": "MultiCholetteDocument clone()", "full_signature": "@Override public MultiCholetteDocument clone()", "class_method_signature": "MultiCholetteDocument.clone()", "testcase": false, "constructor": false, "invocations": ["clone"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}