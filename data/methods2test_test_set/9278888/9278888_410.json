{"test_class": {"identifier": "TracingStatementInterceptorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock Connection connection;", "modifier": "@Mock", "type": "Connection", "declarator": "connection", "var_name": "connection"}, {"original_string": "@Mock DatabaseMetaData metaData;", "modifier": "@Mock", "type": "DatabaseMetaData", "declarator": "metaData", "var_name": "metaData"}, {"original_string": "@Mock Span span;", "modifier": "@Mock", "type": "Span", "declarator": "span", "var_name": "span"}, {"original_string": "String url = \"jdbc:mysql://myhost:5555/mydatabase\";", "modifier": "", "type": "String", "declarator": "url = \"jdbc:mysql://myhost:5555/mydatabase\"", "var_name": "url"}], "file": "instrumentation/mysql/src/test/java/brave/mysql/TracingStatementInterceptorTest.java"}, "test_case": {"identifier": "parseServerIpAndPort_ipFromHost_portFromUrl", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void parseServerIpAndPort_ipFromHost_portFromUrl() throws SQLException {\n    setupAndReturnPropertiesForHost(\"1.2.3.4\");\n\n    TracingStatementInterceptor.parseServerIpAndPort(connection, span);\n\n    verify(span).remoteServiceName(\"mysql\");\n    verify(span).remoteIpAndPort(\"1.2.3.4\", 5555);\n  }", "signature": "void parseServerIpAndPort_ipFromHost_portFromUrl()", "full_signature": "@Test public void parseServerIpAndPort_ipFromHost_portFromUrl()", "class_method_signature": "TracingStatementInterceptorTest.parseServerIpAndPort_ipFromHost_portFromUrl()", "testcase": true, "constructor": false, "invocations": ["setupAndReturnPropertiesForHost", "parseServerIpAndPort", "remoteServiceName", "verify", "remoteIpAndPort", "verify"]}, "focal_class": {"identifier": "TracingStatementInterceptor", "superclass": "", "interfaces": "implements StatementInterceptorV2", "fields": [], "methods": [{"identifier": "preProcess", "parameters": "(String sql, Statement interceptedStatement,\n    Connection connection)", "modifiers": "@Override public", "return": "ResultSetInternalMethods", "signature": "ResultSetInternalMethods preProcess(String sql, Statement interceptedStatement,\n    Connection connection)", "full_signature": "@Override public ResultSetInternalMethods preProcess(String sql, Statement interceptedStatement,\n    Connection connection)", "class_method_signature": "TracingStatementInterceptor.preProcess(String sql, Statement interceptedStatement,\n    Connection connection)", "testcase": false, "constructor": false}, {"identifier": "postProcess", "parameters": "(String sql, Statement interceptedStatement,\n    ResultSetInternalMethods originalResultSet, Connection connection, int warningCount,\n    boolean noIndexUsed, boolean noGoodIndexUsed, SQLException statementException)", "modifiers": "@Override public", "return": "ResultSetInternalMethods", "signature": "ResultSetInternalMethods postProcess(String sql, Statement interceptedStatement,\n    ResultSetInternalMethods originalResultSet, Connection connection, int warningCount,\n    boolean noIndexUsed, boolean noGoodIndexUsed, SQLException statementException)", "full_signature": "@Override public ResultSetInternalMethods postProcess(String sql, Statement interceptedStatement,\n    ResultSetInternalMethods originalResultSet, Connection connection, int warningCount,\n    boolean noIndexUsed, boolean noGoodIndexUsed, SQLException statementException)", "class_method_signature": "TracingStatementInterceptor.postProcess(String sql, Statement interceptedStatement,\n    ResultSetInternalMethods originalResultSet, Connection connection, int warningCount,\n    boolean noIndexUsed, boolean noGoodIndexUsed, SQLException statementException)", "testcase": false, "constructor": false}, {"identifier": "parseServerIpAndPort", "parameters": "(Connection connection, Span span)", "modifiers": "static", "return": "void", "signature": "void parseServerIpAndPort(Connection connection, Span span)", "full_signature": "static void parseServerIpAndPort(Connection connection, Span span)", "class_method_signature": "TracingStatementInterceptor.parseServerIpAndPort(Connection connection, Span span)", "testcase": false, "constructor": false}, {"identifier": "executeTopLevelOnly", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean executeTopLevelOnly()", "full_signature": "@Override public boolean executeTopLevelOnly()", "class_method_signature": "TracingStatementInterceptor.executeTopLevelOnly()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(Connection conn, Properties props)", "modifiers": "@Override public", "return": "void", "signature": "void init(Connection conn, Properties props)", "full_signature": "@Override public void init(Connection conn, Properties props)", "class_method_signature": "TracingStatementInterceptor.init(Connection conn, Properties props)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "TracingStatementInterceptor.destroy()", "testcase": false, "constructor": false}], "file": "instrumentation/mysql/src/main/java/brave/mysql/TracingStatementInterceptor.java"}, "focal_method": {"identifier": "parseServerIpAndPort", "parameters": "(Connection connection, Span span)", "modifiers": "static", "return": "void", "body": "static void parseServerIpAndPort(Connection connection, Span span) {\n    try {\n      URI url = URI.create(connection.getMetaData().getURL().substring(5)); // strip \"jdbc:\"\n      String remoteServiceName = connection.getProperties().getProperty(\"zipkinServiceName\");\n      if (remoteServiceName == null || \"\".equals(remoteServiceName)) {\n        String databaseName = connection.getCatalog();\n        if (databaseName != null && !databaseName.isEmpty()) {\n          remoteServiceName = \"mysql-\" + databaseName;\n        } else {\n          remoteServiceName = \"mysql\";\n        }\n      }\n      span.remoteServiceName(remoteServiceName);\n      String host = connection.getHost();\n      if (host != null) {\n        span.remoteIpAndPort(host, url.getPort() == -1 ? 3306 : url.getPort());\n      }\n    } catch (Exception e) {\n      // remote address is optional\n    }\n  }", "signature": "void parseServerIpAndPort(Connection connection, Span span)", "full_signature": "static void parseServerIpAndPort(Connection connection, Span span)", "class_method_signature": "TracingStatementInterceptor.parseServerIpAndPort(Connection connection, Span span)", "testcase": false, "constructor": false, "invocations": ["create", "substring", "getURL", "getMetaData", "getProperty", "getProperties", "equals", "getCatalog", "isEmpty", "remoteServiceName", "getHost", "remoteIpAndPort", "getPort", "getPort"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}