{"test_class": {"identifier": "TestHostFileManager", "superclass": "", "interfaces": "", "fields": [], "file": "hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/blockmanagement/TestHostFileManager.java"}, "test_case": {"identifier": "testIncludeExcludeLists", "parameters": "()", "modifiers": "@Test @SuppressWarnings(\"unchecked\") public", "return": "void", "body": "@Test\n  @SuppressWarnings(\"unchecked\")\n  public void testIncludeExcludeLists() throws IOException {\n    BlockManager bm = mock(BlockManager.class);\n    FSNamesystem fsn = mock(FSNamesystem.class);\n    Configuration conf = new Configuration();\n    HostFileManager hm = new HostFileManager();\n    HostFileManager.HostSet includedNodes = new HostFileManager.HostSet();\n    HostFileManager.HostSet excludedNodes = new HostFileManager.HostSet();\n\n    includedNodes.add(entry(\"127.0.0.1:12345\"));\n    includedNodes.add(entry(\"localhost:12345\"));\n    includedNodes.add(entry(\"127.0.0.1:12345\"));\n    includedNodes.add(entry(\"127.0.0.2\"));\n\n    excludedNodes.add(entry(\"127.0.0.1:12346\"));\n    excludedNodes.add(entry(\"127.0.30.1:12346\"));\n\n    Assert.assertEquals(2, includedNodes.size());\n    Assert.assertEquals(2, excludedNodes.size());\n\n    hm.refresh(includedNodes, excludedNodes);\n\n    DatanodeManager dm = new DatanodeManager(bm, fsn, conf);\n    Whitebox.setInternalState(dm, \"hostFileManager\", hm);\n    Map<String, DatanodeDescriptor> dnMap = (Map<String,\n            DatanodeDescriptor>) Whitebox.getInternalState(dm, \"datanodeMap\");\n\n    // After the de-duplication, there should be only one DN from the included\n    // nodes declared as dead.\n    Assert.assertEquals(2, dm.getDatanodeListForReport(HdfsConstants\n            .DatanodeReportType.ALL).size());\n    Assert.assertEquals(2, dm.getDatanodeListForReport(HdfsConstants\n            .DatanodeReportType.DEAD).size());\n    dnMap.put(\"uuid-foo\", new DatanodeDescriptor(new DatanodeID(\"127.0.0.1\",\n            \"localhost\", \"uuid-foo\", 12345, 1020, 1021, 1022)));\n    Assert.assertEquals(1, dm.getDatanodeListForReport(HdfsConstants\n            .DatanodeReportType.DEAD).size());\n    dnMap.put(\"uuid-bar\", new DatanodeDescriptor(new DatanodeID(\"127.0.0.2\",\n            \"127.0.0.2\", \"uuid-bar\", 12345, 1020, 1021, 1022)));\n    Assert.assertEquals(0, dm.getDatanodeListForReport(HdfsConstants\n            .DatanodeReportType.DEAD).size());\n    DatanodeDescriptor spam = new DatanodeDescriptor(new DatanodeID(\"127.0.0\" +\n            \".3\", \"127.0.0.3\", \"uuid-spam\", 12345, 1020, 1021, 1022));\n    DFSTestUtil.setDatanodeDead(spam);\n    includedNodes.add(entry(\"127.0.0.3:12345\"));\n    dnMap.put(\"uuid-spam\", spam);\n    Assert.assertEquals(1, dm.getDatanodeListForReport(HdfsConstants\n            .DatanodeReportType.DEAD).size());\n    dnMap.remove(\"uuid-spam\");\n    Assert.assertEquals(1, dm.getDatanodeListForReport(HdfsConstants\n            .DatanodeReportType.DEAD).size());\n    excludedNodes.add(entry(\"127.0.0.3\"));\n    Assert.assertEquals(0, dm.getDatanodeListForReport(HdfsConstants\n            .DatanodeReportType.DEAD).size());\n  }", "signature": "void testIncludeExcludeLists()", "full_signature": "@Test @SuppressWarnings(\"unchecked\") public void testIncludeExcludeLists()", "class_method_signature": "TestHostFileManager.testIncludeExcludeLists()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "add", "entry", "add", "entry", "add", "entry", "add", "entry", "add", "entry", "add", "entry", "assertEquals", "size", "assertEquals", "size", "refresh", "setInternalState", "getInternalState", "assertEquals", "size", "getDatanodeListForReport", "assertEquals", "size", "getDatanodeListForReport", "put", "assertEquals", "size", "getDatanodeListForReport", "put", "assertEquals", "size", "getDatanodeListForReport", "setDatanodeDead", "add", "entry", "put", "assertEquals", "size", "getDatanodeListForReport", "remove", "assertEquals", "size", "getDatanodeListForReport", "add", "entry", "assertEquals", "size", "getDatanodeListForReport"]}, "focal_class": {"identifier": "HostFileManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(HostFileManager.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(HostFileManager.class)", "var_name": "LOG"}, {"original_string": "private HostSet includes = new HostSet();", "modifier": "private", "type": "HostSet", "declarator": "includes = new HostSet()", "var_name": "includes"}, {"original_string": "private HostSet excludes = new HostSet();", "modifier": "private", "type": "HostSet", "declarator": "excludes = new HostSet()", "var_name": "excludes"}], "methods": [{"identifier": "readFile", "parameters": "(String type, String filename)", "modifiers": "private static", "return": "HostSet", "signature": "HostSet readFile(String type, String filename)", "full_signature": "private static HostSet readFile(String type, String filename)", "class_method_signature": "HostFileManager.readFile(String type, String filename)", "testcase": false, "constructor": false}, {"identifier": "parseEntry", "parameters": "(String type, String fn, String line)", "modifiers": "@VisibleForTesting static", "return": "InetSocketAddress", "signature": "InetSocketAddress parseEntry(String type, String fn, String line)", "full_signature": "@VisibleForTesting static InetSocketAddress parseEntry(String type, String fn, String line)", "class_method_signature": "HostFileManager.parseEntry(String type, String fn, String line)", "testcase": false, "constructor": false}, {"identifier": "resolvedAddressFromDatanodeID", "parameters": "(DatanodeID id)", "modifiers": "static", "return": "InetSocketAddress", "signature": "InetSocketAddress resolvedAddressFromDatanodeID(DatanodeID id)", "full_signature": "static InetSocketAddress resolvedAddressFromDatanodeID(DatanodeID id)", "class_method_signature": "HostFileManager.resolvedAddressFromDatanodeID(DatanodeID id)", "testcase": false, "constructor": false}, {"identifier": "getIncludes", "parameters": "()", "modifiers": "synchronized", "return": "HostSet", "signature": "HostSet getIncludes()", "full_signature": "synchronized HostSet getIncludes()", "class_method_signature": "HostFileManager.getIncludes()", "testcase": false, "constructor": false}, {"identifier": "getExcludes", "parameters": "()", "modifiers": "synchronized", "return": "HostSet", "signature": "HostSet getExcludes()", "full_signature": "synchronized HostSet getExcludes()", "class_method_signature": "HostFileManager.getExcludes()", "testcase": false, "constructor": false}, {"identifier": "isIncluded", "parameters": "(DatanodeID dn)", "modifiers": "synchronized", "return": "boolean", "signature": "boolean isIncluded(DatanodeID dn)", "full_signature": "synchronized boolean isIncluded(DatanodeID dn)", "class_method_signature": "HostFileManager.isIncluded(DatanodeID dn)", "testcase": false, "constructor": false}, {"identifier": "isExcluded", "parameters": "(DatanodeID dn)", "modifiers": "synchronized", "return": "boolean", "signature": "boolean isExcluded(DatanodeID dn)", "full_signature": "synchronized boolean isExcluded(DatanodeID dn)", "class_method_signature": "HostFileManager.isExcluded(DatanodeID dn)", "testcase": false, "constructor": false}, {"identifier": "hasIncludes", "parameters": "()", "modifiers": "synchronized", "return": "boolean", "signature": "boolean hasIncludes()", "full_signature": "synchronized boolean hasIncludes()", "class_method_signature": "HostFileManager.hasIncludes()", "testcase": false, "constructor": false}, {"identifier": "refresh", "parameters": "(String includeFile, String excludeFile)", "modifiers": "", "return": "void", "signature": "void refresh(String includeFile, String excludeFile)", "full_signature": " void refresh(String includeFile, String excludeFile)", "class_method_signature": "HostFileManager.refresh(String includeFile, String excludeFile)", "testcase": false, "constructor": false}, {"identifier": "refresh", "parameters": "(HostSet newIncludes, HostSet newExcludes)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void refresh(HostSet newIncludes, HostSet newExcludes)", "full_signature": "@VisibleForTesting void refresh(HostSet newIncludes, HostSet newExcludes)", "class_method_signature": "HostFileManager.refresh(HostSet newIncludes, HostSet newExcludes)", "testcase": false, "constructor": false}], "file": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/HostFileManager.java"}, "focal_method": {"identifier": "refresh", "parameters": "(String includeFile, String excludeFile)", "modifiers": "", "return": "void", "body": "void refresh(String includeFile, String excludeFile) throws IOException {\n    HostSet newIncludes = readFile(\"included\", includeFile);\n    HostSet newExcludes = readFile(\"excluded\", excludeFile);\n\n    refresh(newIncludes, newExcludes);\n  }", "signature": "void refresh(String includeFile, String excludeFile)", "full_signature": " void refresh(String includeFile, String excludeFile)", "class_method_signature": "HostFileManager.refresh(String includeFile, String excludeFile)", "testcase": false, "constructor": false, "invocations": ["readFile", "readFile", "refresh"]}, "repository": {"repo_id": 195808004, "url": "https://github.com/mouzwang/hadoop-2.7.2", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 24927, "license": "licensed"}}