{"test_class": {"identifier": "BookmarkTest", "superclass": "", "interfaces": "", "fields": [], "file": "api/applib/src/test/java/org/apache/isis/applib/services/bookmark/BookmarkTest.java"}, "test_case": {"identifier": "shouldParse_whenMoreThan2Token", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void shouldParse_whenMoreThan2Token() {\n        \n        val bookmark = Bookmark.parse(\"a:b:c\").get();\n        \n        assertEquals(\"a\", bookmark.getObjectType());\n        assertEquals(\"b:c\", bookmark.getIdentifier());\n        \n    }", "signature": "void shouldParse_whenMoreThan2Token()", "full_signature": "@Test void shouldParse_whenMoreThan2Token()", "class_method_signature": "BookmarkTest.shouldParse_whenMoreThan2Token()", "testcase": true, "constructor": false, "invocations": ["get", "parse", "assertEquals", "getObjectType", "assertEquals", "getIdentifier"]}, "focal_class": {"identifier": "Bookmark", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 2L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 2L", "var_name": "serialVersionUID"}, {"original_string": "protected static final String SEPARATOR = \":\";", "modifier": "protected static final", "type": "String", "declarator": "SEPARATOR = \":\"", "var_name": "SEPARATOR"}, {"original_string": "@NonNull  private final String objectType;", "modifier": "@NonNull  private final", "type": "String", "declarator": "objectType", "var_name": "objectType"}, {"original_string": "@NonNull  private final String identifier;", "modifier": "@NonNull  private final", "type": "String", "declarator": "identifier", "var_name": "identifier"}, {"original_string": "@Nullable private final String hintId;", "modifier": "@Nullable private final", "type": "String", "declarator": "hintId", "var_name": "hintId"}], "methods": [{"identifier": "of", "parameters": "(String objectType, String identifier)", "modifiers": "public static", "return": "Bookmark", "signature": "Bookmark of(String objectType, String identifier)", "full_signature": "public static Bookmark of(String objectType, String identifier)", "class_method_signature": "Bookmark.of(String objectType, String identifier)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(@Nullable String str)", "modifiers": "public static", "return": "Optional<Bookmark>", "signature": "Optional<Bookmark> parse(@Nullable String str)", "full_signature": "public static Optional<Bookmark> parse(@Nullable String str)", "class_method_signature": "Bookmark.parse(@Nullable String str)", "testcase": false, "constructor": false}, {"identifier": "toOidDto", "parameters": "()", "modifiers": "public", "return": "OidDto", "signature": "OidDto toOidDto()", "full_signature": "public OidDto toOidDto()", "class_method_signature": "Bookmark.toOidDto()", "testcase": false, "constructor": false}, {"identifier": "from", "parameters": "(@NonNull OidDto oidDto)", "modifiers": "public static", "return": "Bookmark", "signature": "Bookmark from(@NonNull OidDto oidDto)", "full_signature": "public static Bookmark from(@NonNull OidDto oidDto)", "class_method_signature": "Bookmark.from(@NonNull OidDto oidDto)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Bookmark.toString()", "testcase": false, "constructor": false}, {"identifier": "withHintId", "parameters": "(@NonNull String hintId)", "modifiers": "public", "return": "Bookmark", "signature": "Bookmark withHintId(@NonNull String hintId)", "full_signature": "public Bookmark withHintId(@NonNull String hintId)", "class_method_signature": "Bookmark.withHintId(@NonNull String hintId)", "testcase": false, "constructor": false}, {"identifier": "toStringUsingIdentifier", "parameters": "(String id)", "modifiers": "public", "return": "String", "signature": "String toStringUsingIdentifier(String id)", "full_signature": "public String toStringUsingIdentifier(String id)", "class_method_signature": "Bookmark.toStringUsingIdentifier(String id)", "testcase": false, "constructor": false}], "file": "api/applib/src/main/java/org/apache/isis/applib/services/bookmark/Bookmark.java"}, "focal_method": {"identifier": "parse", "parameters": "(@Nullable String str)", "modifiers": "public static", "return": "Optional<Bookmark>", "body": "public static Optional<Bookmark> parse(@Nullable String str) {\n        // end::refguide[]\n\n        if(str==null) {\n            return Optional.empty();\n        }\n        val tokenizer = new StringTokenizer(str, SEPARATOR);\n        int tokenCount = tokenizer.countTokens();\n        if(tokenCount==2) {\n            return Optional.of(Bookmark.of(tokenizer.nextToken(), tokenizer.nextToken()));\n        }\n        if(tokenCount>2) {\n            return Optional.of(Bookmark.of(tokenizer.nextToken(), tokenizer.nextToken(\"\").substring(1)));\n        }\n        return Optional.empty();\n\n        // tag::refguide[]\n        // ...\n    }", "signature": "Optional<Bookmark> parse(@Nullable String str)", "full_signature": "public static Optional<Bookmark> parse(@Nullable String str)", "class_method_signature": "Bookmark.parse(@Nullable String str)", "testcase": false, "constructor": false, "invocations": ["empty", "countTokens", "of", "of", "nextToken", "nextToken", "of", "of", "nextToken", "substring", "nextToken", "empty"]}, "repository": {"repo_id": 6935442, "url": "https://github.com/apache/isis", "stars": 516, "created": "11/30/2012 8:00:24 AM +00:00", "updates": "2020-01-27T13:28:09+00:00", "fork": "False", "license": "licensed"}}