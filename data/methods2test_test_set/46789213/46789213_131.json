{"test_class": {"identifier": "TestArithmeticDummyDataSupplier", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final List<BigInteger> moduli = Arrays.asList(\n      new BigInteger(\"251\"),\n      new BigInteger(\"340282366920938463463374607431768211283\"),\n      new BigInteger(\n          \"2582249878086908589655919172003011874329705792829223512830659356540647622016841194629645353280137831435903171972747493557\")\n  );", "modifier": "private final", "type": "List<BigInteger>", "declarator": "moduli = Arrays.asList(\n      new BigInteger(\"251\"),\n      new BigInteger(\"340282366920938463463374607431768211283\"),\n      new BigInteger(\n          \"2582249878086908589655919172003011874329705792829223512830659356540647622016841194629645353280137831435903171972747493557\")\n  )", "var_name": "moduli"}], "file": "core/src/test/java/dk/alexandra/fresco/framework/util/TestArithmeticDummyDataSupplier.java"}, "test_case": {"identifier": "testBitsNotAllSame", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testBitsNotAllSame() {\n    int noOfParties = 2;\n    BigInteger modulus = moduli.get(1);\n    ArithmeticDummyDataSupplier supplier = new ArithmeticDummyDataSupplier(1, noOfParties,\n        modulus);\n    List<BigInteger> bits = new ArrayList<>(1000);\n    for (int i = 0; i < 1000; i++) {\n      bits.add(supplier.getRandomBitShare().getFirst());\n    }\n    boolean seenZero = false;\n    boolean seenOne = false;\n    for (BigInteger bit : bits) {\n      seenZero = seenZero || bit.equals(BigInteger.ZERO);\n      seenOne = seenOne || bit.equals(BigInteger.ONE);\n      if (seenOne && seenZero) {\n        break;\n      }\n    }\n    assertTrue(seenOne);\n    assertTrue(seenZero);\n  }", "signature": "void testBitsNotAllSame()", "full_signature": "@Test public void testBitsNotAllSame()", "class_method_signature": "TestArithmeticDummyDataSupplier.testBitsNotAllSame()", "testcase": true, "constructor": false, "invocations": ["get", "add", "getFirst", "getRandomBitShare", "equals", "equals", "assertTrue", "assertTrue"]}, "focal_class": {"identifier": "ArithmeticDummyDataSupplier", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final int myId;", "modifier": "private final", "type": "int", "declarator": "myId", "var_name": "myId"}, {"original_string": "private final int noOfParties;", "modifier": "private final", "type": "int", "declarator": "noOfParties", "var_name": "noOfParties"}, {"original_string": "private final BigInteger modulus;", "modifier": "private final", "type": "BigInteger", "declarator": "modulus", "var_name": "modulus"}, {"original_string": "private final int modBitLength;", "modifier": "private final", "type": "int", "declarator": "modBitLength", "var_name": "modBitLength"}, {"original_string": "private final Random random;", "modifier": "private final", "type": "Random", "declarator": "random", "var_name": "random"}, {"original_string": "private final SecretSharer<BigInteger> sharer;", "modifier": "private final", "type": "SecretSharer<BigInteger>", "declarator": "sharer", "var_name": "sharer"}, {"original_string": "private final ModularReductionAlgorithm reducer;", "modifier": "private final", "type": "ModularReductionAlgorithm", "declarator": "reducer", "var_name": "reducer"}], "methods": [{"identifier": "ArithmeticDummyDataSupplier", "parameters": "(int myId, int noOfParties, BigInteger modulus)", "modifiers": "public", "return": "", "signature": " ArithmeticDummyDataSupplier(int myId, int noOfParties, BigInteger modulus)", "full_signature": "public  ArithmeticDummyDataSupplier(int myId, int noOfParties, BigInteger modulus)", "class_method_signature": "ArithmeticDummyDataSupplier.ArithmeticDummyDataSupplier(int myId, int noOfParties, BigInteger modulus)", "testcase": false, "constructor": true}, {"identifier": "getRandomElementShare", "parameters": "()", "modifiers": "public", "return": "Pair<BigInteger, BigInteger>", "signature": "Pair<BigInteger, BigInteger> getRandomElementShare()", "full_signature": "public Pair<BigInteger, BigInteger> getRandomElementShare()", "class_method_signature": "ArithmeticDummyDataSupplier.getRandomElementShare()", "testcase": false, "constructor": false}, {"identifier": "getRandomBitShare", "parameters": "()", "modifiers": "public", "return": "Pair<BigInteger, BigInteger>", "signature": "Pair<BigInteger, BigInteger> getRandomBitShare()", "full_signature": "public Pair<BigInteger, BigInteger> getRandomBitShare()", "class_method_signature": "ArithmeticDummyDataSupplier.getRandomBitShare()", "testcase": false, "constructor": false}, {"identifier": "getMultiplicationTripleShares", "parameters": "()", "modifiers": "public", "return": "MultiplicationTripleShares", "signature": "MultiplicationTripleShares getMultiplicationTripleShares()", "full_signature": "public MultiplicationTripleShares getMultiplicationTripleShares()", "class_method_signature": "ArithmeticDummyDataSupplier.getMultiplicationTripleShares()", "testcase": false, "constructor": false}, {"identifier": "getExpPipe", "parameters": "(int expPipeLength)", "modifiers": "public", "return": "List<Pair<BigInteger, BigInteger>>", "signature": "List<Pair<BigInteger, BigInteger>> getExpPipe(int expPipeLength)", "full_signature": "public List<Pair<BigInteger, BigInteger>> getExpPipe(int expPipeLength)", "class_method_signature": "ArithmeticDummyDataSupplier.getExpPipe(int expPipeLength)", "testcase": false, "constructor": false}, {"identifier": "sampleRandomBigInteger", "parameters": "()", "modifiers": "private", "return": "BigInteger", "signature": "BigInteger sampleRandomBigInteger()", "full_signature": "private BigInteger sampleRandomBigInteger()", "class_method_signature": "ArithmeticDummyDataSupplier.sampleRandomBigInteger()", "testcase": false, "constructor": false}, {"identifier": "getOpenExpPipe", "parameters": "(int expPipeLength)", "modifiers": "private", "return": "List<BigInteger>", "signature": "List<BigInteger> getOpenExpPipe(int expPipeLength)", "full_signature": "private List<BigInteger> getOpenExpPipe(int expPipeLength)", "class_method_signature": "ArithmeticDummyDataSupplier.getOpenExpPipe(int expPipeLength)", "testcase": false, "constructor": false}, {"identifier": "getNextBit", "parameters": "()", "modifiers": "private", "return": "BigInteger", "signature": "BigInteger getNextBit()", "full_signature": "private BigInteger getNextBit()", "class_method_signature": "ArithmeticDummyDataSupplier.getNextBit()", "testcase": false, "constructor": false}], "file": "core/src/main/java/dk/alexandra/fresco/framework/util/ArithmeticDummyDataSupplier.java"}, "focal_method": {"identifier": "getRandomBitShare", "parameters": "()", "modifiers": "public", "return": "Pair<BigInteger, BigInteger>", "body": "public Pair<BigInteger, BigInteger> getRandomBitShare() {\n    BigInteger bit = getNextBit();\n    return new Pair<>(bit, sharer.share(bit, noOfParties).get(myId - 1));\n  }", "signature": "Pair<BigInteger, BigInteger> getRandomBitShare()", "full_signature": "public Pair<BigInteger, BigInteger> getRandomBitShare()", "class_method_signature": "ArithmeticDummyDataSupplier.getRandomBitShare()", "testcase": false, "constructor": false, "invocations": ["getNextBit", "get", "share"]}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}