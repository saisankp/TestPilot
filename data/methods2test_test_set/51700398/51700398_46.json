{"test_class": {"identifier": "PortofolioEntityTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate SymbolRepository symbolRepo;", "modifier": "@Autowired\n\tprivate", "type": "SymbolRepository", "declarator": "symbolRepo", "var_name": "symbolRepo"}, {"original_string": "@Autowired\n\tprivate RateService rateService;", "modifier": "@Autowired\n\tprivate", "type": "RateService", "declarator": "rateService", "var_name": "rateService"}, {"original_string": "@Autowired\n\tprivate PortofolioRepository portofolioRepo;", "modifier": "@Autowired\n\tprivate", "type": "PortofolioRepository", "declarator": "portofolioRepo", "var_name": "portofolioRepo"}], "file": "trading-common/src/test/java/fr/ymanvieu/trading/common/portofolio/entity/PortofolioEntityTest.java"}, "test_case": {"identifier": "testBuy_NoFund", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testBuy_NoFund() throws Exception {\n\t\tString login = \"seller\";\n\t\tString assetCode = \"BRE\";\n\t\tdouble quantity = 1;\n\n\t\tPortofolioEntity portofolio = portofolioRepo.findByUserUsername(login);\n\n\t\tassertThatExceptionOfType(OrderException.class)\n\t\t\t.isThrownBy(() -> portofolio.buy(symbolRepo.findById(assetCode).get(), quantity, rateService))\n\t\t\t.withMessageContaining(\"not_enough_fund\");\n\t\t\n\t}", "signature": "void testBuy_NoFund()", "full_signature": "@Test public void testBuy_NoFund()", "class_method_signature": "PortofolioEntityTest.testBuy_NoFund()", "testcase": true, "constructor": false, "invocations": ["findByUserUsername", "withMessageContaining", "isThrownBy", "assertThatExceptionOfType", "buy", "get", "findById"]}, "focal_class": {"identifier": "PortofolioEntity", "superclass": "extends AuditableEntity", "interfaces": "", "fields": [{"original_string": "@Id\n\t@GeneratedValue(strategy = GenerationType.IDENTITY)\n\tprivate int id;", "modifier": "@Id\n\t@GeneratedValue(strategy = GenerationType.IDENTITY)\n\tprivate", "type": "int", "declarator": "id", "var_name": "id"}, {"original_string": "@Getter\n\t@Nonnull\n\t@OneToOne\n\t@JoinColumn(name = \"user_id\", unique = true, nullable = false)\n\tprivate UserEntity user;", "modifier": "@Getter\n\t@Nonnull\n\t@OneToOne\n\t@JoinColumn(name = \"user_id\", unique = true, nullable = false)\n\tprivate", "type": "UserEntity", "declarator": "user", "var_name": "user"}, {"original_string": "@Getter\n\t@Nonnull\n\t@ManyToOne\n\t@JoinColumn(name = \"base_currency_code\", nullable = false)\n\tprivate SymbolEntity baseCurrency;", "modifier": "@Getter\n\t@Nonnull\n\t@ManyToOne\n\t@JoinColumn(name = \"base_currency_code\", nullable = false)\n\tprivate", "type": "SymbolEntity", "declarator": "baseCurrency", "var_name": "baseCurrency"}, {"original_string": "@Getter\n\t@Nonnull\n\t@Column(precision = 20, scale = 10, nullable = false)\n\tprivate BigDecimal amount;", "modifier": "@Getter\n\t@Nonnull\n\t@Column(precision = 20, scale = 10, nullable = false)\n\tprivate", "type": "BigDecimal", "declarator": "amount", "var_name": "amount"}, {"original_string": "@Version\n\tprivate long version;", "modifier": "@Version\n\tprivate", "type": "long", "declarator": "version", "var_name": "version"}, {"original_string": "@OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = \"portofolio\")\n\tprivate List<AssetEntity> assets = new ArrayList<>();", "modifier": "@OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = \"portofolio\")\n\tprivate", "type": "List<AssetEntity>", "declarator": "assets = new ArrayList<>()", "var_name": "assets"}], "methods": [{"identifier": "getAssets", "parameters": "()", "modifiers": "public", "return": "List<AssetEntity>", "signature": "List<AssetEntity> getAssets()", "full_signature": "public List<AssetEntity> getAssets()", "class_method_signature": "PortofolioEntity.getAssets()", "testcase": false, "constructor": false}, {"identifier": "getAsset", "parameters": "(String symbolCode)", "modifiers": "public", "return": "AssetEntity", "signature": "AssetEntity getAsset(String symbolCode)", "full_signature": "public AssetEntity getAsset(String symbolCode)", "class_method_signature": "PortofolioEntity.getAsset(String symbolCode)", "testcase": false, "constructor": false}, {"identifier": "getCurrencyFor", "parameters": "(SymbolEntity symbol)", "modifiers": "public", "return": "SymbolEntity", "signature": "SymbolEntity getCurrencyFor(SymbolEntity symbol)", "full_signature": "public SymbolEntity getCurrencyFor(SymbolEntity symbol)", "class_method_signature": "PortofolioEntity.getCurrencyFor(SymbolEntity symbol)", "testcase": false, "constructor": false}, {"identifier": "getCurrencies", "parameters": "()", "modifiers": "public", "return": "List<SymbolEntity>", "signature": "List<SymbolEntity> getCurrencies()", "full_signature": "public List<SymbolEntity> getCurrencies()", "class_method_signature": "PortofolioEntity.getCurrencies()", "testcase": false, "constructor": false}, {"identifier": "buy", "parameters": "(SymbolEntity fromSymbol, double quantity, RateService rateService)", "modifiers": "public", "return": "Order", "signature": "Order buy(SymbolEntity fromSymbol, double quantity, RateService rateService)", "full_signature": "public Order buy(SymbolEntity fromSymbol, double quantity, RateService rateService)", "class_method_signature": "PortofolioEntity.buy(SymbolEntity fromSymbol, double quantity, RateService rateService)", "testcase": false, "constructor": false}, {"identifier": "sell", "parameters": "(SymbolEntity fromSymbol, double quantity, RateService rateService)", "modifiers": "public", "return": "Order", "signature": "Order sell(SymbolEntity fromSymbol, double quantity, RateService rateService)", "full_signature": "public Order sell(SymbolEntity fromSymbol, double quantity, RateService rateService)", "class_method_signature": "PortofolioEntity.sell(SymbolEntity fromSymbol, double quantity, RateService rateService)", "testcase": false, "constructor": false}, {"identifier": "removeAsset", "parameters": "(AssetEntity ownedAsset)", "modifiers": "private", "return": "void", "signature": "void removeAsset(AssetEntity ownedAsset)", "full_signature": "private void removeAsset(AssetEntity ownedAsset)", "class_method_signature": "PortofolioEntity.removeAsset(AssetEntity ownedAsset)", "testcase": false, "constructor": false}], "file": "trading-common/src/main/java/fr/ymanvieu/trading/common/portofolio/entity/PortofolioEntity.java"}, "focal_method": {"identifier": "buy", "parameters": "(SymbolEntity fromSymbol, double quantity, RateService rateService)", "modifiers": "public", "return": "Order", "body": "public Order buy(SymbolEntity fromSymbol, double quantity, RateService rateService) throws OrderException {\n\n\t\tObjects.requireNonNull(fromSymbol, \"fromSymbol must be not null\");\n\n\t\tPreconditions.checkArgument(quantity > 0, \"quantity must be positive: %s\", getBaseCurrency());\n\t\tPreconditions.checkArgument(!getBaseCurrency().equals(fromSymbol), \"Cannot buy baseCurrency: %s\", getBaseCurrency());\n\n\t\tfinal SymbolEntity currency = getCurrencyFor(fromSymbol);\n\n\t\tRate q = rateService.getLatest(fromSymbol.getCode(), currency.getCode());\n\n\t\tfinal BigDecimal currencyAmount;\n\n\t\tif (currency.equals(getBaseCurrency())) {\n\t\t\tcurrencyAmount = getAmount();\n\t\t} else if (getAsset(currency.getCode()) != null) {\n\t\t\tcurrencyAmount = getAsset(currency.getCode()).getQuantity();\n\t\t} else {\n\t\t\tcurrencyAmount = ZERO;\n\t\t}\n\n\t\tBigDecimal amountNeeded = q.getValue().multiply(BigDecimal.valueOf(quantity));\n\n\t\tif (currencyAmount.compareTo(amountNeeded) < 0) {\n\t\t\tthrow OrderException.NOT_ENOUGH_FUND(fromSymbol.getCode(), quantity, currency.getCode(), currencyAmount.doubleValue(),\n\t\t\t\t\tamountNeeded.doubleValue());\n\t\t}\n\n\t\tAssetEntity ownedAsset = getAsset(fromSymbol.getCode());\n\n\t\tif (ownedAsset == null) {\n\t\t\townedAsset = new AssetEntity(this, fromSymbol, ZERO, currency, ZERO);\n\t\t\tassets.add(ownedAsset);\n\t\t}\n\n\t\tBigDecimal fundAfterPurchase = currencyAmount.subtract(amountNeeded);\n\n\t\tif (currency.equals(getBaseCurrency())) {\n\t\t\tthis.amount = fundAfterPurchase;\n\t\t} else {\n\t\t\tAssetEntity currencyAsset = getAsset(currency.getCode());\n\t\t\tcurrencyAsset.withdraw(amountNeeded);\n\t\t}\n\n\t\townedAsset.makeDeposit(BigDecimal.valueOf(quantity), amountNeeded);\n\n\t\treturn new Order(currency, amountNeeded.doubleValue(), fromSymbol, quantity);\n\t}", "signature": "Order buy(SymbolEntity fromSymbol, double quantity, RateService rateService)", "full_signature": "public Order buy(SymbolEntity fromSymbol, double quantity, RateService rateService)", "class_method_signature": "PortofolioEntity.buy(SymbolEntity fromSymbol, double quantity, RateService rateService)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "checkArgument", "getBaseCurrency", "checkArgument", "equals", "getBaseCurrency", "getBaseCurrency", "getCurrencyFor", "getLatest", "getCode", "getCode", "equals", "getBaseCurrency", "getAmount", "getAsset", "getCode", "getQuantity", "getAsset", "getCode", "multiply", "getValue", "valueOf", "compareTo", "NOT_ENOUGH_FUND", "getCode", "getCode", "doubleValue", "doubleValue", "getAsset", "getCode", "add", "subtract", "equals", "getBaseCurrency", "getAsset", "getCode", "withdraw", "makeDeposit", "valueOf", "doubleValue"]}, "repository": {"repo_id": 51700398, "url": "https://github.com/ymanvieu/trading", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 988, "license": "licensed"}}