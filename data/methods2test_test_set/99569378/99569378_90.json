{"test_class": {"identifier": "LooperActorThreadTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ProxyFactory mProxyFactory;", "modifier": "@Mock\n    private", "type": "ProxyFactory", "declarator": "mProxyFactory", "var_name": "mProxyFactory"}, {"original_string": "@Mock\n    private FailureHandler mFailureHandler;", "modifier": "@Mock\n    private", "type": "FailureHandler", "declarator": "mFailureHandler", "var_name": "mFailureHandler"}, {"original_string": "@Mock\n    private Runnable mProxy;", "modifier": "@Mock\n    private", "type": "Runnable", "declarator": "mProxy", "var_name": "mProxy"}, {"original_string": "private Looper mLooper;", "modifier": "private", "type": "Looper", "declarator": "mLooper", "var_name": "mLooper"}, {"original_string": "private ShadowLooper mShadowLooper;", "modifier": "private", "type": "ShadowLooper", "declarator": "mShadowLooper", "var_name": "mShadowLooper"}, {"original_string": "@Mock\n    private Runnable mActorImpl;", "modifier": "@Mock\n    private", "type": "Runnable", "declarator": "mActorImpl", "var_name": "mActorImpl"}], "file": "actors-library/src/test/java/com/truecaller/androidactors/LooperActorThreadTest.java"}, "test_case": {"identifier": "messageDeliverTest", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Test public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void messageDeliverTest() throws Exception {\n        final Message message = Mockito.mock(Message.class);\n\n        final LooperActorThread actorThread = new LooperActorThread(mProxyFactory, mFailureHandler, mLooper);\n        ActorRef<Runnable> runnableRef = actorThread.bind(Runnable.class, mActorImpl);\n        Assert.assertSame(mProxy, runnableRef.tell());\n\n        ArgumentCaptor<MessageSender> postmanCaptor = ArgumentCaptor.forClass(MessageSender.class);\n        Mockito.verify(mProxyFactory).newProxy(Mockito.<Class>any(), postmanCaptor.capture());\n\n        MessageSender postman = postmanCaptor.getValue();\n        postman.deliver(message);\n        // check that we did nothing on same thread\n        Mockito.verify(message, Mockito.never()).invoke(Mockito.any());\n        // Process all scheduled messages on looper thread and check that our actor's method was called\n        mShadowLooper.runToEndOfTasks();\n        Mockito.verify(message).invoke(mActorImpl);\n    }", "signature": "void messageDeliverTest()", "full_signature": "@SuppressWarnings(\"unchecked\") @Test public void messageDeliverTest()", "class_method_signature": "LooperActorThreadTest.messageDeliverTest()", "testcase": true, "constructor": false, "invocations": ["mock", "bind", "assertSame", "tell", "forClass", "newProxy", "verify", "any", "capture", "getValue", "deliver", "invoke", "verify", "never", "any", "runToEndOfTasks", "invoke", "verify"]}, "focal_class": {"identifier": "LooperActorThread", "superclass": "", "interfaces": "implements ActorThread", "fields": [{"original_string": "@NonNull\n    private final FailureHandler mFailureHandler;", "modifier": "@NonNull\n    private final", "type": "FailureHandler", "declarator": "mFailureHandler", "var_name": "mFailureHandler"}, {"original_string": "@NonNull\n    private final ProxyFactory mProxyFactory;", "modifier": "@NonNull\n    private final", "type": "ProxyFactory", "declarator": "mProxyFactory", "var_name": "mProxyFactory"}, {"original_string": "@NonNull\n    private final Looper mLooper;", "modifier": "@NonNull\n    private final", "type": "Looper", "declarator": "mLooper", "var_name": "mLooper"}], "methods": [{"identifier": "LooperActorThread", "parameters": "(@NonNull ProxyFactory proxyFactory, @NonNull FailureHandler failureHandler,\n                                    @NonNull Looper looper)", "modifiers": "", "return": "", "signature": " LooperActorThread(@NonNull ProxyFactory proxyFactory, @NonNull FailureHandler failureHandler,\n                                    @NonNull Looper looper)", "full_signature": "  LooperActorThread(@NonNull ProxyFactory proxyFactory, @NonNull FailureHandler failureHandler,\n                                    @NonNull Looper looper)", "class_method_signature": "LooperActorThread.LooperActorThread(@NonNull ProxyFactory proxyFactory, @NonNull FailureHandler failureHandler,\n                                    @NonNull Looper looper)", "testcase": false, "constructor": true}, {"identifier": "bind", "parameters": "(@NonNull Class<T> cls, @NonNull T impl)", "modifiers": "@NonNull @Override public", "return": "ActorRef<T>", "signature": "ActorRef<T> bind(@NonNull Class<T> cls, @NonNull T impl)", "full_signature": "@NonNull @Override public ActorRef<T> bind(@NonNull Class<T> cls, @NonNull T impl)", "class_method_signature": "LooperActorThread.bind(@NonNull Class<T> cls, @NonNull T impl)", "testcase": false, "constructor": false}], "file": "actors-library/src/main/java/com/truecaller/androidactors/LooperActorThread.java"}, "focal_method": {"identifier": "bind", "parameters": "(@NonNull Class<T> cls, @NonNull T impl)", "modifiers": "@NonNull @Override public", "return": "ActorRef<T>", "body": "@NonNull\n    @Override\n    public <T> ActorRef<T> bind(@NonNull Class<T> cls, @NonNull T impl) {\n        MessageSender postman = new LooperMessageSender<>(mLooper, mFailureHandler, impl);\n        T instance = mProxyFactory.newProxy(cls, postman);\n        return new ActorRefImpl<>(instance);\n    }", "signature": "ActorRef<T> bind(@NonNull Class<T> cls, @NonNull T impl)", "full_signature": "@NonNull @Override public ActorRef<T> bind(@NonNull Class<T> cls, @NonNull T impl)", "class_method_signature": "LooperActorThread.bind(@NonNull Class<T> cls, @NonNull T impl)", "testcase": false, "constructor": false, "invocations": ["newProxy"]}, "repository": {"repo_id": 99569378, "url": "https://github.com/truecaller/android-actors-library", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 20, "size": 352, "license": "licensed"}}