{"test_class": {"identifier": "TestUrlSessionTracking", "superclass": "", "interfaces": "", "fields": [{"original_string": "private UrlSessionTracking urlSessionTracking;", "modifier": "private", "type": "UrlSessionTracking", "declarator": "urlSessionTracking", "var_name": "urlSessionTracking"}], "file": "session-replacement/src/test/java/com/amadeus/session/servlet/TestUrlSessionTracking.java"}, "test_case": {"identifier": "testRetrieveId", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testRetrieveId() {\n    SessionConfiguration sc = new SessionConfiguration();\n    sc.setSessionIdName(\"somesession\");\n    sc.setAttribute(\"com.amadeus.session.id\", \"uuid\");\n    urlSessionTracking.configure(sc);\n    RequestWithSession request = mock(RequestWithSession.class, withSettings().extraInterfaces(HttpServletRequest.class));\n    HttpServletRequest hsr = (HttpServletRequest)request;\n    UUID uuid = UUID.randomUUID();\n    when(hsr.getRequestURI()).thenReturn(\"/url;somesession=\"+uuid);\n    SessionTracking.IdAndSource id = urlSessionTracking.retrieveId(request);\n    assertNotNull(id);\n    assertEquals(uuid.toString(), id.id);\n    \n    // Also test case in-sensitivity\n    when(hsr.getRequestURI()).thenReturn(\"/url;SomeSession=\"+uuid);\n    id = urlSessionTracking.retrieveId(request);\n    assertNotNull(\"URL parameter case sensitivity test\", id);\n    assertEquals(\"URL parameter case sensitivity test\", uuid.toString(), id.id);\n\n    String sessionIdWithTimestamp = uuid.toString() + BaseSessionTracking.SESSION_ID_TIMESTAMP_SEPARATOR + System.currentTimeMillis();\n    String invalidSessionIdWithTimestamp = uuid.toString() + \"-abcdefgh\" + BaseSessionTracking.SESSION_ID_TIMESTAMP_SEPARATOR + System.currentTimeMillis();\n    String sessionIdWithoutTimestamp = uuid.toString();\n\n    when(hsr.getPathInfo()).thenReturn(\";somesession=\"+sessionIdWithTimestamp);\n    when(hsr.getRequestURI()).thenReturn(\"/url;somesession=\"+sessionIdWithTimestamp);\n    assertNull(urlSessionTracking.retrieveId(request));\n    when(hsr.getPathInfo()).thenReturn(\";somesession=\"+sessionIdWithoutTimestamp);\n    when(hsr.getRequestURI()).thenReturn(\"/url;somesession=\"+sessionIdWithoutTimestamp);\n    assertEquals(sessionIdWithoutTimestamp, urlSessionTracking.retrieveId(request).id);\n    when(hsr.getPathInfo()).thenReturn(\";somesession=\"+invalidSessionIdWithTimestamp);\n    when(hsr.getRequestURI()).thenReturn(\"/url;somesession=\"+invalidSessionIdWithTimestamp);\n    assertNull(urlSessionTracking.retrieveId(request));\n\n    sc.setTimestampSufix(true);\n    urlSessionTracking.configure(sc);\n    when(hsr.getPathInfo()).thenReturn(\";somesession=\"+sessionIdWithTimestamp);\n    when(hsr.getRequestURI()).thenReturn(\"/url;somesession=\"+sessionIdWithTimestamp);\n    assertEquals(sessionIdWithTimestamp, urlSessionTracking.retrieveId(request).id);\n    when(hsr.getPathInfo()).thenReturn(\";somesession=\"+sessionIdWithoutTimestamp);\n    when(hsr.getRequestURI()).thenReturn(\"/url;somesession=\"+sessionIdWithoutTimestamp);\n    assertEquals(sessionIdWithoutTimestamp, urlSessionTracking.retrieveId(request).id);\n    when(hsr.getPathInfo()).thenReturn(\";somesession=\"+invalidSessionIdWithTimestamp);\n    when(hsr.getRequestURI()).thenReturn(\"/url;somesession=\"+invalidSessionIdWithTimestamp);\n    assertNull(urlSessionTracking.retrieveId(request));\n  }", "signature": "void testRetrieveId()", "full_signature": "@Test public void testRetrieveId()", "class_method_signature": "TestUrlSessionTracking.testRetrieveId()", "testcase": true, "constructor": false, "invocations": ["setSessionIdName", "setAttribute", "configure", "mock", "extraInterfaces", "withSettings", "randomUUID", "thenReturn", "when", "getRequestURI", "retrieveId", "assertNotNull", "assertEquals", "toString", "thenReturn", "when", "getRequestURI", "retrieveId", "assertNotNull", "assertEquals", "toString", "toString", "currentTimeMillis", "toString", "currentTimeMillis", "toString", "thenReturn", "when", "getPathInfo", "thenReturn", "when", "getRequestURI", "assertNull", "retrieveId", "thenReturn", "when", "getPathInfo", "thenReturn", "when", "getRequestURI", "assertEquals", "retrieveId", "thenReturn", "when", "getPathInfo", "thenReturn", "when", "getRequestURI", "assertNull", "retrieveId", "setTimestampSufix", "configure", "thenReturn", "when", "getPathInfo", "thenReturn", "when", "getRequestURI", "assertEquals", "retrieveId", "thenReturn", "when", "getPathInfo", "thenReturn", "when", "getRequestURI", "assertEquals", "retrieveId", "thenReturn", "when", "getPathInfo", "thenReturn", "when", "getRequestURI", "assertNull", "retrieveId"]}, "focal_class": {"identifier": "UrlSessionTracking", "superclass": "extends BaseSessionTracking", "interfaces": "implements SessionTracking", "fields": [{"original_string": "private String sessionIdPathItem;", "modifier": "private", "type": "String", "declarator": "sessionIdPathItem", "var_name": "sessionIdPathItem"}], "methods": [{"identifier": "configure", "parameters": "(SessionConfiguration configuration)", "modifiers": "@Override public", "return": "void", "signature": "void configure(SessionConfiguration configuration)", "full_signature": "@Override public void configure(SessionConfiguration configuration)", "class_method_signature": "UrlSessionTracking.configure(SessionConfiguration configuration)", "testcase": false, "constructor": false}, {"identifier": "retrieveId", "parameters": "(RequestWithSession request)", "modifiers": "@Override public", "return": "IdAndSource", "signature": "IdAndSource retrieveId(RequestWithSession request)", "full_signature": "@Override public IdAndSource retrieveId(RequestWithSession request)", "class_method_signature": "UrlSessionTracking.retrieveId(RequestWithSession request)", "testcase": false, "constructor": false}, {"identifier": "propagateSession", "parameters": "(RequestWithSession request, Object response)", "modifiers": "@Override public", "return": "void", "signature": "void propagateSession(RequestWithSession request, Object response)", "full_signature": "@Override public void propagateSession(RequestWithSession request, Object response)", "class_method_signature": "UrlSessionTracking.propagateSession(RequestWithSession request, Object response)", "testcase": false, "constructor": false}, {"identifier": "encodeUrl", "parameters": "(RequestWithSession request, String url)", "modifiers": "@Override public", "return": "String", "signature": "String encodeUrl(RequestWithSession request, String url)", "full_signature": "@Override public String encodeUrl(RequestWithSession request, String url)", "class_method_signature": "UrlSessionTracking.encodeUrl(RequestWithSession request, String url)", "testcase": false, "constructor": false}, {"identifier": "isCookieTracking", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCookieTracking()", "full_signature": "@Override public boolean isCookieTracking()", "class_method_signature": "UrlSessionTracking.isCookieTracking()", "testcase": false, "constructor": false}], "file": "session-replacement/src/main/java/com/amadeus/session/servlet/UrlSessionTracking.java"}, "focal_method": {"identifier": "retrieveId", "parameters": "(RequestWithSession request)", "modifiers": "@Override public", "return": "IdAndSource", "body": "@Override\n  public IdAndSource retrieveId(RequestWithSession request) {\n    String requestUri = ((HttpServletRequest)request).getRequestURI();\n    int sessionIdStart = requestUri.toLowerCase().lastIndexOf(sessionIdPathItem);\n    if (sessionIdStart > -1) {\n      sessionIdStart += sessionIdPathItem.length();\n      String sessionId = clean(requestUri.substring(sessionIdStart));\n      if (sessionId != null) {\n        return new IdAndSource(sessionId, isCookieTracking());\n      } else {\n        return null;\n      }\n    }\n    if (this.nextSessionTracking != null) {\n      return this.nextSessionTracking.retrieveId(request);\n    }\n    return null;\n  }", "signature": "IdAndSource retrieveId(RequestWithSession request)", "full_signature": "@Override public IdAndSource retrieveId(RequestWithSession request)", "class_method_signature": "UrlSessionTracking.retrieveId(RequestWithSession request)", "testcase": false, "constructor": false, "invocations": ["getRequestURI", "lastIndexOf", "toLowerCase", "length", "clean", "substring", "isCookieTracking", "retrieveId"]}, "repository": {"repo_id": 74458764, "url": "https://github.com/AmadeusITGroup/HttpSessionReplacer", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 45, "size": 514, "license": "licensed"}}