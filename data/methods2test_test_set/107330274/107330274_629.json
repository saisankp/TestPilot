{"test_class": {"identifier": "KubernetesNodeDataResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final RelocationConfiguration configuration = Archaius2Ext.newConfiguration(RelocationConfiguration.class,\n            \"titus.relocation.nodeRelocationRequiredTaints\", \"required.*\",\n            \"titus.relocation.nodeRelocationRequiredImmediatelyTaints\", \"immediately.*\",\n            \"titus.relocation.badNodeConditionPattern\", \".*MemoryFailure\"\n    );", "modifier": "private final", "type": "RelocationConfiguration", "declarator": "configuration = Archaius2Ext.newConfiguration(RelocationConfiguration.class,\n            \"titus.relocation.nodeRelocationRequiredTaints\", \"required.*\",\n            \"titus.relocation.nodeRelocationRequiredImmediatelyTaints\", \"immediately.*\",\n            \"titus.relocation.badNodeConditionPattern\", \".*MemoryFailure\"\n    )", "var_name": "configuration"}], "file": "titus-supplementary-component/task-relocation/src/test/java/com/netflix/titus/supplementary/relocation/connector/KubernetesNodeDataResolverTest.java"}, "test_case": {"identifier": "testResolver", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testResolver() {\n        String node1Name = \"node1\";\n        String node2Name = \"node2\";\n        V1Node node1 = newNode(node1Name);\n        V1Node node2 = newNode(node2Name);\n\n        KubeApiFacade kubeApiFacade = TestDataFactory.mockKubeApiFacade(node1, node2);\n        KubernetesNodeDataResolver resolver = new KubernetesNodeDataResolver(configuration, kubeApiFacade, node -> true);\n        Map<String, Node> resolved = resolver.resolve();\n        assertThat(resolved).hasSize(2);\n\n        // Nothing is flagged yet\n        assertThat(resolver.resolve().get(node1Name).isRelocationRequired()).isFalse();\n        assertThat(resolver.resolve().get(node1Name).isRelocationRequiredImmediately()).isFalse();\n        assertThat(resolver.resolve().get(node1Name).isRelocationNotAllowed()).isFalse();\n        assertThat(resolver.resolve().get(node1Name).isInBadCondition()).isFalse();\n\n        // Tag one as removable\n        addNodeTaint(node1, \"required.titus.com/decommissioning\", \"true\", TAINT_EFFECT_NO_EXECUTE);\n        node1.getMetadata().getLabels().put(RelocationAttributes.RELOCATION_REQUIRED, \"true\");\n        assertThat(resolver.resolve().get(node1Name).isRelocationRequired()).isTrue();\n        assertThat(resolver.resolve().get(node1Name).isRelocationRequiredImmediately()).isFalse();\n        assertThat(resolver.resolve().get(node1Name).isRelocationNotAllowed()).isFalse();\n\n        // Now removable immediately\n        addNodeTaint(node1, \"immediately.titus.com/decommissioning\", \"true\", TAINT_EFFECT_NO_EXECUTE);\n        assertThat(resolver.resolve().get(node1Name).isRelocationRequiredImmediately()).isTrue();\n        assertThat(resolver.resolve().get(node1Name).isRelocationNotAllowed()).isFalse();\n\n        // bad memory condition = True\n        addNodeCondition(node2, \"CorrectableMemoryFailure\", \"True\");\n        assertThat(resolver.resolve().get(node2Name)).isNotNull();\n        assertThat(resolver.resolve().get(node2Name).isInBadCondition()).isTrue();\n\n        // bad memory condition = False\n        addNodeCondition(node1, \"CorrectableMemoryFailure\", \"False\");\n        assertThat(resolver.resolve().get(node1Name)).isNotNull();\n        assertThat(resolver.resolve().get(node1Name).isInBadCondition()).isFalse();\n    }", "signature": "void testResolver()", "full_signature": "@Test public void testResolver()", "class_method_signature": "KubernetesNodeDataResolverTest.testResolver()", "testcase": true, "constructor": false, "invocations": ["newNode", "newNode", "mockKubeApiFacade", "resolve", "hasSize", "assertThat", "isFalse", "assertThat", "isRelocationRequired", "get", "resolve", "isFalse", "assertThat", "isRelocationRequiredImmediately", "get", "resolve", "isFalse", "assertThat", "isRelocationNotAllowed", "get", "resolve", "isFalse", "assertThat", "isInBadCondition", "get", "resolve", "addNodeTaint", "put", "getLabels", "getMetadata", "isTrue", "assertThat", "isRelocationRequired", "get", "resolve", "isFalse", "assertThat", "isRelocationRequiredImmediately", "get", "resolve", "isFalse", "assertThat", "isRelocationNotAllowed", "get", "resolve", "addNodeTaint", "isTrue", "assertThat", "isRelocationRequiredImmediately", "get", "resolve", "isFalse", "assertThat", "isRelocationNotAllowed", "get", "resolve", "addNodeCondition", "isNotNull", "assertThat", "get", "resolve", "isTrue", "assertThat", "isInBadCondition", "get", "resolve", "addNodeCondition", "isNotNull", "assertThat", "get", "resolve", "isFalse", "assertThat", "isInBadCondition", "get", "resolve"]}, "focal_class": {"identifier": "KubernetesNodeDataResolver", "superclass": "", "interfaces": "implements NodeDataResolver", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(KubernetesNodeDataResolver.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(KubernetesNodeDataResolver.class)", "var_name": "logger"}, {"original_string": "private static final long NOT_SYNCED_STALENESS_MS = 10 * 3600_000;", "modifier": "private static final", "type": "long", "declarator": "NOT_SYNCED_STALENESS_MS = 10 * 3600_000", "var_name": "NOT_SYNCED_STALENESS_MS"}, {"original_string": "private final RelocationConfiguration configuration;", "modifier": "private final", "type": "RelocationConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private final SharedIndexInformer<V1Node> nodeInformer;", "modifier": "private final", "type": "SharedIndexInformer<V1Node>", "declarator": "nodeInformer", "var_name": "nodeInformer"}, {"original_string": "private final Predicate<V1Node> nodeFilter;", "modifier": "private final", "type": "Predicate<V1Node>", "declarator": "nodeFilter", "var_name": "nodeFilter"}, {"original_string": "private final Function<String, Matcher> relocationRequiredTaintsMatcher;", "modifier": "private final", "type": "Function<String, Matcher>", "declarator": "relocationRequiredTaintsMatcher", "var_name": "relocationRequiredTaintsMatcher"}, {"original_string": "private final Function<String, Matcher> relocationRequiredImmediatelyTaintsMatcher;", "modifier": "private final", "type": "Function<String, Matcher>", "declarator": "relocationRequiredImmediatelyTaintsMatcher", "var_name": "relocationRequiredImmediatelyTaintsMatcher"}, {"original_string": "private final Function<String, Matcher> badConditionMatcherFactory;", "modifier": "private final", "type": "Function<String, Matcher>", "declarator": "badConditionMatcherFactory", "var_name": "badConditionMatcherFactory"}], "methods": [{"identifier": "KubernetesNodeDataResolver", "parameters": "(RelocationConfiguration configuration,\n                                      KubeApiFacade kubeApiFacade,\n                                      Predicate<V1Node> nodeFilter)", "modifiers": "public", "return": "", "signature": " KubernetesNodeDataResolver(RelocationConfiguration configuration,\n                                      KubeApiFacade kubeApiFacade,\n                                      Predicate<V1Node> nodeFilter)", "full_signature": "public  KubernetesNodeDataResolver(RelocationConfiguration configuration,\n                                      KubeApiFacade kubeApiFacade,\n                                      Predicate<V1Node> nodeFilter)", "class_method_signature": "KubernetesNodeDataResolver.KubernetesNodeDataResolver(RelocationConfiguration configuration,\n                                      KubeApiFacade kubeApiFacade,\n                                      Predicate<V1Node> nodeFilter)", "testcase": false, "constructor": true}, {"identifier": "resolve", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, Node>", "signature": "Map<String, Node> resolve()", "full_signature": "@Override public Map<String, Node> resolve()", "class_method_signature": "KubernetesNodeDataResolver.resolve()", "testcase": false, "constructor": false}, {"identifier": "toReconcilerNode", "parameters": "(V1Node k8sNode)", "modifiers": "private", "return": "Optional<Node>", "signature": "Optional<Node> toReconcilerNode(V1Node k8sNode)", "full_signature": "private Optional<Node> toReconcilerNode(V1Node k8sNode)", "class_method_signature": "KubernetesNodeDataResolver.toReconcilerNode(V1Node k8sNode)", "testcase": false, "constructor": false}, {"identifier": "anyNoExecuteMatch", "parameters": "(V1Node k8sNode, Function<String, Matcher> taintsMatcher)", "modifiers": "private", "return": "boolean", "signature": "boolean anyNoExecuteMatch(V1Node k8sNode, Function<String, Matcher> taintsMatcher)", "full_signature": "private boolean anyNoExecuteMatch(V1Node k8sNode, Function<String, Matcher> taintsMatcher)", "class_method_signature": "KubernetesNodeDataResolver.anyNoExecuteMatch(V1Node k8sNode, Function<String, Matcher> taintsMatcher)", "testcase": false, "constructor": false}, {"identifier": "getStalenessMs", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getStalenessMs()", "full_signature": "@Override public long getStalenessMs()", "class_method_signature": "KubernetesNodeDataResolver.getStalenessMs()", "testcase": false, "constructor": false}], "file": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/connector/KubernetesNodeDataResolver.java"}, "focal_method": {"identifier": "resolve", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, Node>", "body": "@Override\n    public Map<String, Node> resolve() {\n        List<V1Node> k8sNodes = nodeInformer.getIndexer().list().stream().filter(nodeFilter).collect(Collectors.toList());\n        Map<String, Node> result = new HashMap<>();\n        k8sNodes.forEach(k8Node -> toReconcilerNode(k8Node).ifPresent(node -> result.put(node.getId(), node)));\n        return result;\n    }", "signature": "Map<String, Node> resolve()", "full_signature": "@Override public Map<String, Node> resolve()", "class_method_signature": "KubernetesNodeDataResolver.resolve()", "testcase": false, "constructor": false, "invocations": ["collect", "filter", "stream", "list", "getIndexer", "toList", "forEach", "ifPresent", "toReconcilerNode", "put", "getId"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}