{"test_class": {"identifier": "MetricsManagerTest", "superclass": "extends MetricsParentTest", "interfaces": "", "fields": [{"original_string": "private MetricsManager metricsManager;", "modifier": "private", "type": "MetricsManager", "declarator": "metricsManager", "var_name": "metricsManager"}], "file": "monitoring/src/test/java/io/silverware/microservices/monitoring/MetricsManagerTest.java"}, "test_case": {"identifier": "testNegativeTime", "parameters": "()", "modifiers": "@Test(expectedExceptions = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expectedExceptions = IllegalArgumentException.class)\n   public void testNegativeTime() {\n      metricsManager.addTime(getRandomTime().multiply(BigDecimal.valueOf(-1)));\n   }", "signature": "void testNegativeTime()", "full_signature": "@Test(expectedExceptions = IllegalArgumentException.class) public void testNegativeTime()", "class_method_signature": "MetricsManagerTest.testNegativeTime()", "testcase": true, "constructor": false, "invocations": ["addTime", "multiply", "getRandomTime", "valueOf"]}, "focal_class": {"identifier": "MetricsManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LogManager.getLogger(MetricsManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LogManager.getLogger(MetricsManager.class)", "var_name": "log"}, {"original_string": "private final Metrics metrics = new DefaultMetric();", "modifier": "private final", "type": "Metrics", "declarator": "metrics = new DefaultMetric()", "var_name": "metrics"}, {"original_string": "private final LoadingCache<Long, BigDecimal> mapValues = CacheBuilder.newBuilder().expireAfterWrite(1, TimeUnit.MINUTES).build(new CacheLoader<Long, BigDecimal>() {\n      @Override\n      public BigDecimal load(Long key) throws Exception {\n         return mapValues.get(key);\n      }\n   });", "modifier": "private final", "type": "LoadingCache<Long, BigDecimal>", "declarator": "mapValues = CacheBuilder.newBuilder().expireAfterWrite(1, TimeUnit.MINUTES).build(new CacheLoader<Long, BigDecimal>() {\n      @Override\n      public BigDecimal load(Long key) throws Exception {\n         return mapValues.get(key);\n      }\n   })", "var_name": "mapValues"}, {"original_string": "private LongAdder longAdder = new LongAdder();", "modifier": "private", "type": "LongAdder", "declarator": "longAdder = new LongAdder()", "var_name": "longAdder"}, {"original_string": "private final Thread updateThread = new Thread(this::updatePercentiles);", "modifier": "private final", "type": "Thread", "declarator": "updateThread = new Thread(this::updatePercentiles)", "var_name": "updateThread"}], "methods": [{"identifier": "MetricsManager", "parameters": "()", "modifiers": "public", "return": "", "signature": " MetricsManager()", "full_signature": "public  MetricsManager()", "class_method_signature": "MetricsManager.MetricsManager()", "testcase": false, "constructor": true}, {"identifier": "addTime", "parameters": "(BigDecimal elapsedTime)", "modifiers": "public", "return": "void", "signature": "void addTime(BigDecimal elapsedTime)", "full_signature": "public void addTime(BigDecimal elapsedTime)", "class_method_signature": "MetricsManager.addTime(BigDecimal elapsedTime)", "testcase": false, "constructor": false}, {"identifier": "getCount", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getCount()", "full_signature": "public long getCount()", "class_method_signature": "MetricsManager.getCount()", "testcase": false, "constructor": false}, {"identifier": "getAverageTime", "parameters": "()", "modifiers": "public", "return": "BigDecimal", "signature": "BigDecimal getAverageTime()", "full_signature": "public BigDecimal getAverageTime()", "class_method_signature": "MetricsManager.getAverageTime()", "testcase": false, "constructor": false}, {"identifier": "getMinTime", "parameters": "()", "modifiers": "public", "return": "BigDecimal", "signature": "BigDecimal getMinTime()", "full_signature": "public BigDecimal getMinTime()", "class_method_signature": "MetricsManager.getMinTime()", "testcase": false, "constructor": false}, {"identifier": "getMaxTime", "parameters": "()", "modifiers": "public", "return": "BigDecimal", "signature": "BigDecimal getMaxTime()", "full_signature": "public BigDecimal getMaxTime()", "class_method_signature": "MetricsManager.getMaxTime()", "testcase": false, "constructor": false}, {"identifier": "get90Percentile", "parameters": "()", "modifiers": "public", "return": "BigDecimal", "signature": "BigDecimal get90Percentile()", "full_signature": "public BigDecimal get90Percentile()", "class_method_signature": "MetricsManager.get90Percentile()", "testcase": false, "constructor": false}, {"identifier": "get95Percentile", "parameters": "()", "modifiers": "public", "return": "BigDecimal", "signature": "BigDecimal get95Percentile()", "full_signature": "public BigDecimal get95Percentile()", "class_method_signature": "MetricsManager.get95Percentile()", "testcase": false, "constructor": false}, {"identifier": "get99Percentile", "parameters": "()", "modifiers": "public", "return": "BigDecimal", "signature": "BigDecimal get99Percentile()", "full_signature": "public BigDecimal get99Percentile()", "class_method_signature": "MetricsManager.get99Percentile()", "testcase": false, "constructor": false}, {"identifier": "getValues", "parameters": "()", "modifiers": "public", "return": "List<BigDecimal>", "signature": "List<BigDecimal> getValues()", "full_signature": "public List<BigDecimal> getValues()", "class_method_signature": "MetricsManager.getValues()", "testcase": false, "constructor": false}, {"identifier": "toJson", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toJson()", "full_signature": "public String toJson()", "class_method_signature": "MetricsManager.toJson()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "MetricsManager.toString()", "testcase": false, "constructor": false}, {"identifier": "updatePercentiles", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updatePercentiles()", "full_signature": "private void updatePercentiles()", "class_method_signature": "MetricsManager.updatePercentiles()", "testcase": false, "constructor": false}], "file": "monitoring/src/main/java/io/silverware/microservices/monitoring/MetricsManager.java"}, "focal_method": {"identifier": "addTime", "parameters": "(BigDecimal elapsedTime)", "modifiers": "public", "return": "void", "body": "public void addTime(BigDecimal elapsedTime) {\n\n      if (elapsedTime.compareTo(BigDecimal.ZERO) <= 0) {\n         throw new IllegalArgumentException(\"Elapsed time is negative or zero\");\n      }\n\n      mapValues.put(longAdder.longValue(), elapsedTime);\n\n      longAdder.increment();\n\n      final BigDecimal count = new BigDecimal(metrics.getCount());\n      final BigDecimal averageTime = metrics.getAverageTime();\n      final BigDecimal minTime = metrics.getMinTime();\n      final BigDecimal maxTime = metrics.getMaxTime();\n\n      if (elapsedTime.compareTo(maxTime) == 1) {\n         metrics.setMaxTime(elapsedTime);\n      }\n      if (elapsedTime.compareTo(minTime) == -1 || count.compareTo(BigDecimal.ZERO) == 0) {\n         metrics.setMinTime(elapsedTime);\n      }\n\n      metrics.incrementCount();\n\n      metrics.setAverageTime((averageTime.multiply(count).add(elapsedTime)).divide(count.add(BigDecimal.ONE), BigDecimal.ROUND_HALF_UP));\n   }", "signature": "void addTime(BigDecimal elapsedTime)", "full_signature": "public void addTime(BigDecimal elapsedTime)", "class_method_signature": "MetricsManager.addTime(BigDecimal elapsedTime)", "testcase": false, "constructor": false, "invocations": ["compareTo", "put", "longValue", "increment", "getCount", "getAverageTime", "getMinTime", "getMaxTime", "compareTo", "setMaxTime", "compareTo", "compareTo", "setMinTime", "incrementCount", "setAverageTime", "divide", "add", "multiply", "add"]}, "repository": {"repo_id": 30619741, "url": "https://github.com/SilverThings/SilverWare", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 21, "size": 3333, "license": "licensed"}}