{"test_class": {"identifier": "GitHubApiTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n  private GitHubApi gitHubApi;", "modifier": "@Autowired\n  private", "type": "GitHubApi", "declarator": "gitHubApi", "var_name": "gitHubApi"}, {"original_string": "@MockBean\n  private CacheManager cacheManager;", "modifier": "@MockBean\n  private", "type": "CacheManager", "declarator": "cacheManager", "var_name": "cacheManager"}, {"original_string": "@MockBean\n  private OAuth2ClientContext clientContext;", "modifier": "@MockBean\n  private", "type": "OAuth2ClientContext", "declarator": "clientContext", "var_name": "clientContext"}, {"original_string": "@Autowired\n  private MockRestServiceServer server;", "modifier": "@Autowired\n  private", "type": "MockRestServiceServer", "declarator": "server", "var_name": "server"}], "file": "jandy-server/src/test/java/io/jandy/util/api/GitHubApiTest.java"}, "test_case": {"identifier": "testGetUserRepos", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetUserRepos() throws Exception {\n    HttpHeaders headers;\n\n    Cache page1 = mock(Cache.class, \"page1\"),\n        page2 = mock(Cache.class, \"page2\");\n\n    when(cacheManager.getCache(eq(GitHubApi.class.getName()))).thenReturn(page1);\n    when(cacheManager.getCache(eq(GitHubApi.class.getName()))).thenReturn(page2);\n\n    headers = new HttpHeaders();\n    headers.set(HttpHeaders.ETAG, \"abcd\");\n    headers.set(\"Link\", \"<https://api.github.com/user/1345314/repos?page=2>; rel=\\\"next\\\", <https://api.github.com/user/1345314/repos?page=2>; rel=\\\"last\\\"\");\n\n    server.expect(once(), requestTo(\"https://api.github.com/users/jcooky/repos\")).andExpect(method(HttpMethod.GET))\n        .andRespond(withSuccess(new ClassPathResource(\"github/users-jcooky-repos.1.json\"), MediaType.APPLICATION_JSON).headers(headers));\n\n    headers = new HttpHeaders();\n    headers.set(HttpHeaders.ETAG, \"efgh\");\n    headers.set(\"Link\", \"<https://api.github.com/user/1345314/repos?page=1>; rel=\\\"first\\\", <https://api.github.com/user/1345314/repos?page=1>; rel=\\\"prev\\\"\");\n\n    server.expect(once(), requestTo(\"https://api.github.com/user/1345314/repos?page=2\")).andExpect(method(HttpMethod.GET))\n        .andRespond(withSuccess().headers(headers).body(new ClassPathResource(\"github/users-jcooky-repos.2.json\")).contentType(MediaType.APPLICATION_JSON));\n\n    gitHubApi.getUserRepos(\"jcooky\");\n\n    server.verify();\n  }", "signature": "void testGetUserRepos()", "full_signature": "@Test public void testGetUserRepos()", "class_method_signature": "GitHubApiTest.testGetUserRepos()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "getCache", "eq", "getName", "thenReturn", "when", "getCache", "eq", "getName", "set", "set", "andRespond", "andExpect", "expect", "once", "requestTo", "method", "headers", "withSuccess", "set", "set", "andRespond", "andExpect", "expect", "once", "requestTo", "method", "contentType", "body", "headers", "withSuccess", "getUserRepos", "verify"]}, "focal_class": {"identifier": "GitHubApi", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Logger logger = LoggerFactory.getLogger(GitHubApi.class);", "modifier": "private", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(GitHubApi.class)", "var_name": "logger"}, {"original_string": "@Autowired\n  private OAuth2ClientContext clientContext;", "modifier": "@Autowired\n  private", "type": "OAuth2ClientContext", "declarator": "clientContext", "var_name": "clientContext"}, {"original_string": "@Autowired\n  private CacheManager cacheManager;", "modifier": "@Autowired\n  private", "type": "CacheManager", "declarator": "cacheManager", "var_name": "cacheManager"}, {"original_string": "private CachedRestTemplate restTemplate;", "modifier": "private", "type": "CachedRestTemplate", "declarator": "restTemplate", "var_name": "restTemplate"}], "methods": [{"identifier": "GitHubApi", "parameters": "(RestTemplateBuilder builder)", "modifiers": "public", "return": "", "signature": " GitHubApi(RestTemplateBuilder builder)", "full_signature": "public  GitHubApi(RestTemplateBuilder builder)", "class_method_signature": "GitHubApi.GitHubApi(RestTemplateBuilder builder)", "testcase": false, "constructor": true}, {"identifier": "isAnonymous", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAnonymous()", "full_signature": "public boolean isAnonymous()", "class_method_signature": "GitHubApi.isAnonymous()", "testcase": false, "constructor": false}, {"identifier": "getUser", "parameters": "()", "modifiers": "public", "return": "GHUser", "signature": "GHUser getUser()", "full_signature": "public GHUser getUser()", "class_method_signature": "GitHubApi.getUser()", "testcase": false, "constructor": false}, {"identifier": "getUser", "parameters": "(String login)", "modifiers": "public", "return": "GHUser", "signature": "GHUser getUser(String login)", "full_signature": "public GHUser getUser(String login)", "class_method_signature": "GitHubApi.getUser(String login)", "testcase": false, "constructor": false}, {"identifier": "getUserOrgs", "parameters": "(String login)", "modifiers": "public", "return": "List<GHOrg>", "signature": "List<GHOrg> getUserOrgs(String login)", "full_signature": "public List<GHOrg> getUserOrgs(String login)", "class_method_signature": "GitHubApi.getUserOrgs(String login)", "testcase": false, "constructor": false}, {"identifier": "getOrg", "parameters": "(String org)", "modifiers": "public", "return": "GHOrg", "signature": "GHOrg getOrg(String org)", "full_signature": "public GHOrg getOrg(String org)", "class_method_signature": "GitHubApi.getOrg(String org)", "testcase": false, "constructor": false}, {"identifier": "getUserRepos", "parameters": "(String login)", "modifiers": "public", "return": "List<GHRepo>", "signature": "List<GHRepo> getUserRepos(String login)", "full_signature": "public List<GHRepo> getUserRepos(String login)", "class_method_signature": "GitHubApi.getUserRepos(String login)", "testcase": false, "constructor": false}, {"identifier": "getOrgRepos", "parameters": "(String login)", "modifiers": "public", "return": "List<GHRepo>", "signature": "List<GHRepo> getOrgRepos(String login)", "full_signature": "public List<GHRepo> getOrgRepos(String login)", "class_method_signature": "GitHubApi.getOrgRepos(String login)", "testcase": false, "constructor": false}, {"identifier": "getRepo", "parameters": "(String owner, String repo)", "modifiers": "public", "return": "GHRepo", "signature": "GHRepo getRepo(String owner, String repo)", "full_signature": "public GHRepo getRepo(String owner, String repo)", "class_method_signature": "GitHubApi.getRepo(String owner, String repo)", "testcase": false, "constructor": false}, {"identifier": "uri", "parameters": "(String url, Object... uriParams)", "modifiers": "private", "return": "URI", "signature": "URI uri(String url, Object... uriParams)", "full_signature": "private URI uri(String url, Object... uriParams)", "class_method_signature": "GitHubApi.uri(String url, Object... uriParams)", "testcase": false, "constructor": false}, {"identifier": "getForObject", "parameters": "(String url, Class<T> cls, Object ...uriParams)", "modifiers": "private", "return": "T", "signature": "T getForObject(String url, Class<T> cls, Object ...uriParams)", "full_signature": "private T getForObject(String url, Class<T> cls, Object ...uriParams)", "class_method_signature": "GitHubApi.getForObject(String url, Class<T> cls, Object ...uriParams)", "testcase": false, "constructor": false}, {"identifier": "namespace", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String namespace()", "full_signature": "private String namespace()", "class_method_signature": "GitHubApi.namespace()", "testcase": false, "constructor": false}, {"identifier": "getForAll", "parameters": "(String url, Class<R[]> cls, Object ...uriParams)", "modifiers": "private", "return": "List<R>", "signature": "List<R> getForAll(String url, Class<R[]> cls, Object ...uriParams)", "full_signature": "private List<R> getForAll(String url, Class<R[]> cls, Object ...uriParams)", "class_method_signature": "GitHubApi.getForAll(String url, Class<R[]> cls, Object ...uriParams)", "testcase": false, "constructor": false}], "file": "jandy-server/src/main/java/io/jandy/util/api/GitHubApi.java"}, "focal_method": {"identifier": "getUserRepos", "parameters": "(String login)", "modifiers": "public", "return": "List<GHRepo>", "body": "public List<GHRepo> getUserRepos(String login) {\n\n    return getForAll(\"https://api.github.com/users/{login}/repos\", GHRepo[].class, login);\n  }", "signature": "List<GHRepo> getUserRepos(String login)", "full_signature": "public List<GHRepo> getUserRepos(String login)", "class_method_signature": "GitHubApi.getUserRepos(String login)", "testcase": false, "constructor": false, "invocations": ["getForAll"]}, "repository": {"repo_id": 37814227, "url": "https://github.com/jandy-team/jandy", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 12, "size": 5059, "license": "licensed"}}