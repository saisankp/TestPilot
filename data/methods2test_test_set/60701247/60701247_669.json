{"test_class": {"identifier": "AllocStatsDataSeriesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final FakeTimer myTimer = new FakeTimer();", "modifier": "private final", "type": "FakeTimer", "declarator": "myTimer = new FakeTimer()", "var_name": "myTimer"}, {"original_string": "private final FakeMemoryService myService = new FakeMemoryService();", "modifier": "private final", "type": "FakeMemoryService", "declarator": "myService = new FakeMemoryService()", "var_name": "myService"}, {"original_string": "private final FakeTransportService myTransportService = new FakeTransportService(myTimer);", "modifier": "private final", "type": "FakeTransportService", "declarator": "myTransportService = new FakeTransportService(myTimer)", "var_name": "myTransportService"}, {"original_string": "@NotNull private final FakeIdeProfilerServices myIdeProfilerServices = new FakeIdeProfilerServices();", "modifier": "@NotNull private final", "type": "FakeIdeProfilerServices", "declarator": "myIdeProfilerServices = new FakeIdeProfilerServices()", "var_name": "myIdeProfilerServices"}, {"original_string": "@Rule public FakeGrpcChannel myGrpcChannel = new FakeGrpcChannel(\"AllocStatsDataSeriesTest\", myTransportService, myService,\n                                                                   new FakeProfilerService(myTimer),\n                                                                   new FakeEventService(),\n                                                                   new FakeCpuService(),\n                                                                   new FakeNetworkService.Builder().build());", "modifier": "@Rule public", "type": "FakeGrpcChannel", "declarator": "myGrpcChannel = new FakeGrpcChannel(\"AllocStatsDataSeriesTest\", myTransportService, myService,\n                                                                   new FakeProfilerService(myTimer),\n                                                                   new FakeEventService(),\n                                                                   new FakeCpuService(),\n                                                                   new FakeNetworkService.Builder().build())", "var_name": "myGrpcChannel"}, {"original_string": "private final boolean myNewDataPipeline;", "modifier": "private final", "type": "boolean", "declarator": "myNewDataPipeline", "var_name": "myNewDataPipeline"}], "file": "profilers/testSrc/com/android/tools/profilers/memory/AllocStatsDataSeriesTest.java"}, "test_case": {"identifier": "testGetDataForXRange", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetDataForXRange() {\n    myTransportService.setAgentStatus(DEFAULT_AGENT_ATTACHED_RESPONSE);\n    StudioProfilers studioProfilers =\n      new StudioProfilers(new ProfilerClient(myGrpcChannel.getName()), myIdeProfilerServices, myTimer);\n    studioProfilers.setPreferredProcess(FAKE_DEVICE_NAME, FAKE_PROCESS_NAME, null);\n    myTimer.tick(TimeUnit.SECONDS.toNanos(1));\n\n    MemoryAllocStatsData stats1 = MemoryAllocStatsData.newBuilder().setJavaAllocationCount(1000).setJavaFreeCount(2000).build();\n    MemoryAllocStatsData stats2 = MemoryAllocStatsData.newBuilder().setJavaAllocationCount(1500).setJavaFreeCount(2500).build();\n    long timestamp1 = TimeUnit.MICROSECONDS.toNanos(3);\n    long timestamp2 = TimeUnit.MICROSECONDS.toNanos(14);\n\n    if (myNewDataPipeline) {\n      myTransportService.addEventToStream(FakeTransportService.FAKE_DEVICE_ID, Common.Event.newBuilder()\n        .setPid(FakeTransportService.FAKE_PROCESS.getPid())\n        .setTimestamp(timestamp1)\n        .setKind(Common.Event.Kind.MEMORY_ALLOC_STATS)\n        .setMemoryAllocStats(stats1)\n        .build());\n      myTransportService.addEventToStream(FakeTransportService.FAKE_DEVICE_ID, Common.Event.newBuilder()\n        .setPid(FakeTransportService.FAKE_PROCESS.getPid())\n        .setTimestamp(timestamp2)\n        .setKind(Common.Event.Kind.MEMORY_ALLOC_STATS)\n        .setMemoryAllocStats(stats2)\n        .build());\n    }\n    else {\n      MemoryData memoryData = MemoryData.newBuilder()\n        .setEndTimestamp(1)\n        .addAllocStatsSamples(\n          MemoryData.AllocStatsSample.newBuilder().setTimestamp(TimeUnit.MICROSECONDS.toNanos(3)).setAllocStats(stats1))\n        .addAllocStatsSamples(\n          MemoryData.AllocStatsSample.newBuilder().setTimestamp(TimeUnit.MICROSECONDS.toNanos(14)).setAllocStats(stats2))\n        .build();\n      myService.setMemoryData(memoryData);\n    }\n\n    AllocStatsDataSeries series =\n      new AllocStatsDataSeries(studioProfilers,\n                               sample -> (long)sample.getJavaAllocationCount());\n    List<SeriesData<Long>> dataList = series.getDataForRange(new Range(0, Double.MAX_VALUE));\n    assertEquals(2, dataList.size());\n    assertEquals(3, dataList.get(0).x);\n    assertEquals(1000, dataList.get(0).value.longValue());\n    assertEquals(14, dataList.get(1).x);\n    assertEquals(1500, dataList.get(1).value.longValue());\n\n    series = new AllocStatsDataSeries(studioProfilers,\n                                      sample -> (long)sample.getJavaFreeCount());\n    dataList = series.getDataForRange(new Range(0, Double.MAX_VALUE));\n    assertEquals(2, dataList.size());\n    assertEquals(3, dataList.get(0).x);\n    assertEquals(2000, dataList.get(0).value.longValue());\n    assertEquals(14, dataList.get(1).x);\n    assertEquals(2500, dataList.get(1).value.longValue());\n  }", "signature": "void testGetDataForXRange()", "full_signature": "@Test public void testGetDataForXRange()", "class_method_signature": "AllocStatsDataSeriesTest.testGetDataForXRange()", "testcase": true, "constructor": false, "invocations": ["setAgentStatus", "getName", "setPreferredProcess", "tick", "toNanos", "build", "setJavaFreeCount", "setJavaAllocationCount", "newBuilder", "build", "setJavaFreeCount", "setJavaAllocationCount", "newBuilder", "toNanos", "toNanos", "addEventToStream", "build", "setMemoryAllocStats", "setKind", "setTimestamp", "setPid", "newBuilder", "getPid", "addEventToStream", "build", "setMemoryAllocStats", "setKind", "setTimestamp", "setPid", "newBuilder", "getPid", "build", "addAllocStatsSamples", "addAllocStatsSamples", "setEndTimestamp", "newBuilder", "setAllocStats", "setTimestamp", "newBuilder", "toNanos", "setAllocStats", "setTimestamp", "newBuilder", "toNanos", "setMemoryData", "getJavaAllocationCount", "getDataForRange", "assertEquals", "size", "assertEquals", "get", "assertEquals", "longValue", "get", "assertEquals", "get", "assertEquals", "longValue", "get", "getJavaFreeCount", "getDataForRange", "assertEquals", "size", "assertEquals", "get", "assertEquals", "longValue", "get", "assertEquals", "get", "assertEquals", "longValue", "get"]}, "focal_class": {"identifier": "AllocStatsDataSeries", "superclass": "", "interfaces": "implements DataSeries<Long>", "fields": [{"original_string": "@NotNull private final StudioProfilers myProfilers;", "modifier": "@NotNull private final", "type": "StudioProfilers", "declarator": "myProfilers", "var_name": "myProfilers"}, {"original_string": "@NotNull private final ProfilerClient myClient;", "modifier": "@NotNull private final", "type": "ProfilerClient", "declarator": "myClient", "var_name": "myClient"}, {"original_string": "@NotNull private final Common.Session mySession;", "modifier": "@NotNull private final", "type": "Common.Session", "declarator": "mySession", "var_name": "mySession"}, {"original_string": "@SuppressWarnings(\"FieldCanBeLocal\") @NotNull private final AspectObserver myObserver;", "modifier": "@SuppressWarnings(\"FieldCanBeLocal\") @NotNull private final", "type": "AspectObserver", "declarator": "myObserver", "var_name": "myObserver"}, {"original_string": "private boolean myIsAgentAttached = false;", "modifier": "private", "type": "boolean", "declarator": "myIsAgentAttached = false", "var_name": "myIsAgentAttached"}, {"original_string": "@NotNull\n  private Function<MemoryAllocStatsData, Long> myFilter;", "modifier": "@NotNull\n  private", "type": "Function<MemoryAllocStatsData, Long>", "declarator": "myFilter", "var_name": "myFilter"}], "methods": [{"identifier": "AllocStatsDataSeries", "parameters": "(@NotNull StudioProfilers profilers,\n                              @NotNull Function<MemoryAllocStatsData, Long> filter)", "modifiers": "public", "return": "", "signature": " AllocStatsDataSeries(@NotNull StudioProfilers profilers,\n                              @NotNull Function<MemoryAllocStatsData, Long> filter)", "full_signature": "public  AllocStatsDataSeries(@NotNull StudioProfilers profilers,\n                              @NotNull Function<MemoryAllocStatsData, Long> filter)", "class_method_signature": "AllocStatsDataSeries.AllocStatsDataSeries(@NotNull StudioProfilers profilers,\n                              @NotNull Function<MemoryAllocStatsData, Long> filter)", "testcase": false, "constructor": true}, {"identifier": "getDataForRange", "parameters": "(@NotNull Range rangeUs)", "modifiers": "@Override public", "return": "List<SeriesData<Long>>", "signature": "List<SeriesData<Long>> getDataForRange(@NotNull Range rangeUs)", "full_signature": "@Override public List<SeriesData<Long>> getDataForRange(@NotNull Range rangeUs)", "class_method_signature": "AllocStatsDataSeries.getDataForRange(@NotNull Range rangeUs)", "testcase": false, "constructor": false}, {"identifier": "getLegacyAllocationStats", "parameters": "(@NotNull Range rangeUs)", "modifiers": "private", "return": "List<SeriesData<Long>>", "signature": "List<SeriesData<Long>> getLegacyAllocationStats(@NotNull Range rangeUs)", "full_signature": "private List<SeriesData<Long>> getLegacyAllocationStats(@NotNull Range rangeUs)", "class_method_signature": "AllocStatsDataSeries.getLegacyAllocationStats(@NotNull Range rangeUs)", "testcase": false, "constructor": false}, {"identifier": "agentStatusChanged", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void agentStatusChanged()", "full_signature": "private void agentStatusChanged()", "class_method_signature": "AllocStatsDataSeries.agentStatusChanged()", "testcase": false, "constructor": false}], "file": "profilers/src/com/android/tools/profilers/memory/AllocStatsDataSeries.java"}, "focal_method": {"identifier": "getDataForRange", "parameters": "(@NotNull Range rangeUs)", "modifiers": "@Override public", "return": "List<SeriesData<Long>>", "body": "@Override\n  public List<SeriesData<Long>> getDataForRange(@NotNull Range rangeUs) {\n    if (!myIsAgentAttached) {\n      return Collections.emptyList();\n    }\n\n    if (!myProfilers.getIdeServices().getFeatureConfig().isUnifiedPipelineEnabled()) {\n      return getLegacyAllocationStats(rangeUs);\n    }\n\n    Transport.GetEventGroupsRequest request = Transport.GetEventGroupsRequest.newBuilder()\n      .setStreamId(mySession.getStreamId())\n      .setPid(mySession.getPid())\n      .setKind(Common.Event.Kind.MEMORY_ALLOC_STATS)\n      .setFromTimestamp(TimeUnit.MICROSECONDS.toNanos((long)rangeUs.getMin()))\n      .setToTimestamp(TimeUnit.MICROSECONDS.toNanos((long)rangeUs.getMax()))\n      .build();\n    Transport.GetEventGroupsResponse response = myClient.getTransportClient().getEventGroups(request);\n\n    // No group ids for allocation stats so there shouldn't be more than one group.\n    assert response.getGroupsCount() <= 1;\n\n    List<SeriesData<Long>> seriesData = new ArrayList<>();\n    if (response.getGroupsCount() > 0) {\n\n      response.getGroups(0).getEventsList().forEach(event -> {\n        long dataTimestamp = TimeUnit.NANOSECONDS.toMicros(event.getTimestamp());\n        seriesData.add(new SeriesData<>(dataTimestamp, myFilter.apply(event.getMemoryAllocStats())));\n      });\n    }\n\n    return seriesData;\n  }", "signature": "List<SeriesData<Long>> getDataForRange(@NotNull Range rangeUs)", "full_signature": "@Override public List<SeriesData<Long>> getDataForRange(@NotNull Range rangeUs)", "class_method_signature": "AllocStatsDataSeries.getDataForRange(@NotNull Range rangeUs)", "testcase": false, "constructor": false, "invocations": ["emptyList", "isUnifiedPipelineEnabled", "getFeatureConfig", "getIdeServices", "getLegacyAllocationStats", "build", "setToTimestamp", "setFromTimestamp", "setKind", "setPid", "setStreamId", "newBuilder", "getStreamId", "getPid", "toNanos", "getMin", "toNanos", "getMax", "getEventGroups", "getTransportClient", "getGroupsCount", "getGroupsCount", "forEach", "getEventsList", "getGroups", "toMicros", "getTimestamp", "add", "apply", "getMemoryAllocStats"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}