{"test_class": {"identifier": "HttpTest", "superclass": "", "interfaces": "", "fields": [], "file": "libs/java/server_common/src/test/java/com/yahoo/athenz/common/server/rest/HttpTest.java"}, "test_case": {"identifier": "testGetCookieValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetCookieValue() {\n\n        HttpServletRequest httpServletRequest = Mockito.mock(HttpServletRequest.class);\n        Mockito.when(httpServletRequest.getCookies()).thenReturn(null);\n\n        assertNull(Http.getCookieValue(httpServletRequest, \"cookie1\"));\n        assertNull(Http.getCookieValue(httpServletRequest, \"cookie2\"));\n\n        javax.servlet.http.Cookie[] cookies = new javax.servlet.http.Cookie[2];\n        cookies[0] = new javax.servlet.http.Cookie(\"cookie1\", \"value1\");\n        cookies[1] = new javax.servlet.http.Cookie(\"cookie2\", \"value2\");\n\n        Mockito.when(httpServletRequest.getCookies()).thenReturn(cookies);\n        assertEquals(Http.getCookieValue(httpServletRequest, \"cookie1\"), \"value1\");\n        assertEquals(Http.getCookieValue(httpServletRequest, \"cookie2\"), \"value2\");\n        assertNull(Http.getCookieValue(httpServletRequest, \"cookie3\"));\n    }", "signature": "void testGetCookieValue()", "full_signature": "@Test public void testGetCookieValue()", "class_method_signature": "HttpTest.testGetCookieValue()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getCookies", "assertNull", "getCookieValue", "assertNull", "getCookieValue", "thenReturn", "when", "getCookies", "assertEquals", "getCookieValue", "assertEquals", "getCookieValue", "assertNull", "getCookieValue"]}, "focal_class": {"identifier": "Http", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(Http.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(Http.class)", "var_name": "LOG"}, {"original_string": "public static final String WWW_AUTHENTICATE  = \"WWW-Authenticate\";", "modifier": "public static final", "type": "String", "declarator": "WWW_AUTHENTICATE  = \"WWW-Authenticate\"", "var_name": "WWW_AUTHENTICATE"}, {"original_string": "public static final String INVALID_CRED_ATTR = \"com.yahoo.athenz.auth.credential.error\";", "modifier": "public static final", "type": "String", "declarator": "INVALID_CRED_ATTR = \"com.yahoo.athenz.auth.credential.error\"", "var_name": "INVALID_CRED_ATTR"}, {"original_string": "public static final String AUTH_CHALLENGES   = \"com.yahoo.athenz.auth.credential.challenges\";", "modifier": "public static final", "type": "String", "declarator": "AUTH_CHALLENGES   = \"com.yahoo.athenz.auth.credential.challenges\"", "var_name": "AUTH_CHALLENGES"}, {"original_string": "public static final String JAVAX_CERT_ATTR   = \"javax.servlet.request.X509Certificate\";", "modifier": "public static final", "type": "String", "declarator": "JAVAX_CERT_ATTR   = \"javax.servlet.request.X509Certificate\"", "var_name": "JAVAX_CERT_ATTR"}], "methods": [{"identifier": "getCookieValue", "parameters": "(HttpServletRequest hreq, String name)", "modifiers": "static", "return": "String", "signature": "String getCookieValue(HttpServletRequest hreq, String name)", "full_signature": "static String getCookieValue(HttpServletRequest hreq, String name)", "class_method_signature": "Http.getCookieValue(HttpServletRequest hreq, String name)", "testcase": false, "constructor": false}, {"identifier": "authenticatingCredentials", "parameters": "(HttpServletRequest request,\n            Authority authority)", "modifiers": "static", "return": "String", "signature": "String authenticatingCredentials(HttpServletRequest request,\n            Authority authority)", "full_signature": "static String authenticatingCredentials(HttpServletRequest request,\n            Authority authority)", "class_method_signature": "Http.authenticatingCredentials(HttpServletRequest request,\n            Authority authority)", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "(HttpServletRequest request,\n            AuthorityList authorities)", "modifiers": "public static", "return": "Principal", "signature": "Principal authenticate(HttpServletRequest request,\n            AuthorityList authorities)", "full_signature": "public static Principal authenticate(HttpServletRequest request,\n            AuthorityList authorities)", "class_method_signature": "Http.authenticate(HttpServletRequest request,\n            AuthorityList authorities)", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "(HttpServletRequest request,\n            AuthorityList authorities, boolean optionalAuth)", "modifiers": "public static", "return": "Principal", "signature": "Principal authenticate(HttpServletRequest request,\n            AuthorityList authorities, boolean optionalAuth)", "full_signature": "public static Principal authenticate(HttpServletRequest request,\n            AuthorityList authorities, boolean optionalAuth)", "class_method_signature": "Http.authenticate(HttpServletRequest request,\n            AuthorityList authorities, boolean optionalAuth)", "testcase": false, "constructor": false}, {"identifier": "authenticatedUser", "parameters": "(HttpServletRequest request,\n            AuthorityList authorities)", "modifiers": "public static", "return": "String", "signature": "String authenticatedUser(HttpServletRequest request,\n            AuthorityList authorities)", "full_signature": "public static String authenticatedUser(HttpServletRequest request,\n            AuthorityList authorities)", "class_method_signature": "Http.authenticatedUser(HttpServletRequest request,\n            AuthorityList authorities)", "testcase": false, "constructor": false}, {"identifier": "authorizedUser", "parameters": "(HttpServletRequest request,\n            AuthorityList authorities, Authorizer authorizer, String action,\n            String resource, String otherDomain)", "modifiers": "public static", "return": "String", "signature": "String authorizedUser(HttpServletRequest request,\n            AuthorityList authorities, Authorizer authorizer, String action,\n            String resource, String otherDomain)", "full_signature": "public static String authorizedUser(HttpServletRequest request,\n            AuthorityList authorities, Authorizer authorizer, String action,\n            String resource, String otherDomain)", "class_method_signature": "Http.authorizedUser(HttpServletRequest request,\n            AuthorityList authorities, Authorizer authorizer, String action,\n            String resource, String otherDomain)", "testcase": false, "constructor": false}, {"identifier": "authorize", "parameters": "(Authorizer authorizer, Principal principal,\n            String action, String resource, String otherDomain)", "modifiers": "public static", "return": "Principal", "signature": "Principal authorize(Authorizer authorizer, Principal principal,\n            String action, String resource, String otherDomain)", "full_signature": "public static Principal authorize(Authorizer authorizer, Principal principal,\n            String action, String resource, String otherDomain)", "class_method_signature": "Http.authorize(Authorizer authorizer, Principal principal,\n            String action, String resource, String otherDomain)", "testcase": false, "constructor": false}], "file": "libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/rest/Http.java"}, "focal_method": {"identifier": "getCookieValue", "parameters": "(HttpServletRequest hreq, String name)", "modifiers": "static", "return": "String", "body": "static String getCookieValue(HttpServletRequest hreq, String name) {\n        \n        javax.servlet.http.Cookie[] cookies = hreq.getCookies();\n        if (cookies == null) {\n            return null;\n        }\n        for (javax.servlet.http.Cookie cookie : cookies) {\n            if (name.equals(cookie.getName())) {\n                return cookie.getValue();\n            }\n        }\n        return null;\n    }", "signature": "String getCookieValue(HttpServletRequest hreq, String name)", "full_signature": "static String getCookieValue(HttpServletRequest hreq, String name)", "class_method_signature": "Http.getCookieValue(HttpServletRequest hreq, String name)", "testcase": false, "constructor": false, "invocations": ["getCookies", "equals", "getName", "getValue"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}