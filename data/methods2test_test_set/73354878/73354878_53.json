{"test_class": {"identifier": "BlockManipulationServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Metafile metafile;", "modifier": "private", "type": "Metafile", "declarator": "metafile", "var_name": "metafile"}, {"original_string": "private IBlockManipulationService blockManipulationService;", "modifier": "private", "type": "IBlockManipulationService", "declarator": "blockManipulationService", "var_name": "blockManipulationService"}], "file": "block_manipulation_service/src/test/java/com/stnetix/ariaddna/blockmanipulation/service/BlockManipulationServiceImplTest.java"}, "test_case": {"identifier": "getBlockUuidByNumber", "parameters": "()", "modifiers": "@Test(expected = BlockDoesNotExistException.class) public", "return": "void", "body": "@Test(expected = BlockDoesNotExistException.class)\n    public void getBlockUuidByNumber()\n            throws BlockDoesNotExistException, MetafileIsFolderException {\n        Map<String, String> properties = new HashMap<>();\n        properties.put(\"typeOnFs\", FileType.FILE_BIN.toString());\n        metafile.setProperties(properties);\n        String blockUuid1 = UUID.randomUUID().toString();\n        String blockUuid2 = UUID.randomUUID().toString();\n        String blockUuid3 = UUID.randomUUID().toString();\n        String blockUuid4 = UUID.randomUUID().toString();\n        String blockUuid5 = UUID.randomUUID().toString();\n        metafile.addBlockUuid(blockUuid1);\n        metafile.addBlockUuid(blockUuid2);\n        metafile.addBlockUuid(blockUuid3);\n        metafile.addBlockUuid(blockUuid4);\n        metafile.addBlockUuid(blockUuid5);\n\n        String blockUuid = blockManipulationService.getBlockUuidByNumber(metafile, 0);\n        assertEquals(blockUuid1, blockUuid);\n\n        blockUuid = blockManipulationService.getBlockUuidByNumber(metafile, 1);\n        assertEquals(blockUuid2, blockUuid);\n\n        //here it throws exception\n        blockManipulationService.getBlockUuidByNumber(metafile, 9);\n    }", "signature": "void getBlockUuidByNumber()", "full_signature": "@Test(expected = BlockDoesNotExistException.class) public void getBlockUuidByNumber()", "class_method_signature": "BlockManipulationServiceImplTest.getBlockUuidByNumber()", "testcase": true, "constructor": false, "invocations": ["put", "toString", "setProperties", "toString", "randomUUID", "toString", "randomUUID", "toString", "randomUUID", "toString", "randomUUID", "toString", "randomUUID", "addBlockUuid", "addBlockUuid", "addBlockUuid", "addBlockUuid", "addBlockUuid", "getBlockUuidByNumber", "assertEquals", "getBlockUuidByNumber", "assertEquals", "getBlockUuidByNumber"]}, "focal_class": {"identifier": "BlockManipulationServiceImpl", "superclass": "", "interfaces": "implements IBlockManipulationService", "fields": [{"original_string": "private List<String> blockUuidList;", "modifier": "private", "type": "List<String>", "declarator": "blockUuidList", "var_name": "blockUuidList"}], "methods": [{"identifier": "getNextBlockUuid", "parameters": "(Metafile metafile)", "modifiers": "@Override public", "return": "String", "signature": "String getNextBlockUuid(Metafile metafile)", "full_signature": "@Override public String getNextBlockUuid(Metafile metafile)", "class_method_signature": "BlockManipulationServiceImpl.getNextBlockUuid(Metafile metafile)", "testcase": false, "constructor": false}, {"identifier": "getBlockUuidByNumber", "parameters": "(Metafile metafile, int blockNumber)", "modifiers": "@Override public", "return": "String", "signature": "String getBlockUuidByNumber(Metafile metafile, int blockNumber)", "full_signature": "@Override public String getBlockUuidByNumber(Metafile metafile, int blockNumber)", "class_method_signature": "BlockManipulationServiceImpl.getBlockUuidByNumber(Metafile metafile, int blockNumber)", "testcase": false, "constructor": false}, {"identifier": "getMetafileInfoForLog", "parameters": "(Metafile metafile, String methodName)", "modifiers": "private", "return": "StringBuilder", "signature": "StringBuilder getMetafileInfoForLog(Metafile metafile, String methodName)", "full_signature": "private StringBuilder getMetafileInfoForLog(Metafile metafile, String methodName)", "class_method_signature": "BlockManipulationServiceImpl.getMetafileInfoForLog(Metafile metafile, String methodName)", "testcase": false, "constructor": false}], "file": "block_manipulation_service/src/main/java/com/stnetix/ariaddna/blockmanipulation/service/BlockManipulationServiceImpl.java"}, "focal_method": {"identifier": "getBlockUuidByNumber", "parameters": "(Metafile metafile, int blockNumber)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getBlockUuidByNumber(Metafile metafile, int blockNumber)\n            throws MetafileIsFolderException, BlockDoesNotExistException {\n        List<String> blockUuidList = metafile.getBlockUuidList();\n        if (metafile.getProperties().containsValue(FileType.DIR.toString())) {\n            StringBuilder sb = new StringBuilder();\n            sb.append(getMetafileInfoForLog(metafile, \"getBlockUuidByNumber\"));\n            sb.append(\", is folder.\");\n            throw new MetafileIsFolderException(sb.toString());\n        } else {\n            if (blockUuidList.size() < blockNumber) {\n                StringBuilder sb = new StringBuilder();\n                sb.append(getMetafileInfoForLog(metafile, \"getBlockUuidByNumber\"));\n                sb.append(\", has block count: \");\n                sb.append(blockUuidList.size());\n                sb.append(\", requested number is: \");\n                sb.append(blockNumber);\n                throw new BlockDoesNotExistException(sb.toString());\n            }\n        }\n\n        return blockUuidList.get(blockNumber);\n    }", "signature": "String getBlockUuidByNumber(Metafile metafile, int blockNumber)", "full_signature": "@Override public String getBlockUuidByNumber(Metafile metafile, int blockNumber)", "class_method_signature": "BlockManipulationServiceImpl.getBlockUuidByNumber(Metafile metafile, int blockNumber)", "testcase": false, "constructor": false, "invocations": ["getBlockUuidList", "containsValue", "getProperties", "toString", "append", "getMetafileInfoForLog", "append", "toString", "size", "append", "getMetafileInfoForLog", "append", "append", "size", "append", "append", "toString", "get"]}, "repository": {"repo_id": 73354878, "url": "https://github.com/StnetixDevTeam/ariADDna", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 11, "size": 971, "license": "licensed"}}