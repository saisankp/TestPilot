{"test_class": {"identifier": "CodeControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private WebApplicationContext webApplicationContext;", "modifier": "@Autowired\n    private", "type": "WebApplicationContext", "declarator": "webApplicationContext", "var_name": "webApplicationContext"}, {"original_string": "@MockBean\n    private UserLoginInterceptor userLoginInterceptor;", "modifier": "@MockBean\n    private", "type": "UserLoginInterceptor", "declarator": "userLoginInterceptor", "var_name": "userLoginInterceptor"}, {"original_string": "@MockBean\n    private CommStatusInterceptor commStatusInterceptor;", "modifier": "@MockBean\n    private", "type": "CommStatusInterceptor", "declarator": "commStatusInterceptor", "var_name": "commStatusInterceptor"}, {"original_string": "private MockMvc mockMvc;", "modifier": "private", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "@MockBean\n    private CodeService codeService;", "modifier": "@MockBean\n    private", "type": "CodeService", "declarator": "codeService", "var_name": "codeService"}, {"original_string": "@MockBean\n    private LoginUserDao loginUserDao;", "modifier": "@MockBean\n    private", "type": "LoginUserDao", "declarator": "loginUserDao", "var_name": "loginUserDao"}, {"original_string": "@MockBean\n    private UserGroupDao userGroupDao;", "modifier": "@MockBean\n    private", "type": "UserGroupDao", "declarator": "userGroupDao", "var_name": "userGroupDao"}, {"original_string": "@MockBean\n    private ProjectDao projectDao;", "modifier": "@MockBean\n    private", "type": "ProjectDao", "declarator": "projectDao", "var_name": "projectDao"}, {"original_string": "@MockBean\n    private Consts consts;", "modifier": "@MockBean\n    private", "type": "Consts", "declarator": "consts", "var_name": "consts"}, {"original_string": "@MockBean\n    private DaoBySqlBuilder daoBySqlBuilder;", "modifier": "@MockBean\n    private", "type": "DaoBySqlBuilder", "declarator": "daoBySqlBuilder", "var_name": "daoBySqlBuilder"}, {"original_string": "@MockBean\n    private TaskSqlDao daoByFreeSql;", "modifier": "@MockBean\n    private", "type": "TaskSqlDao", "declarator": "daoByFreeSql", "var_name": "daoByFreeSql"}], "file": "das-console-manager/src/test/java/com/ppdai/das/console/controller/CodeControllerTest.java"}, "test_case": {"identifier": "getFiles", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getFiles() throws Exception {\n        mockMvc.perform(MockMvcRequestBuilders.get(\"/code/files\")\n                .contentType(MediaType.APPLICATION_JSON_UTF8)\n                .param(\"projectId\", \"1\")\n                .param(\"name\", \"tom\")\n                .accept(MediaType.APPLICATION_JSON_UTF8))\n                .andExpect(MockMvcResultMatchers.status().isOk())\n                .andDo(MockMvcResultHandlers.print());\n    }", "signature": "void getFiles()", "full_signature": "@Test public void getFiles()", "class_method_signature": "CodeControllerTest.getFiles()", "testcase": true, "constructor": false, "invocations": ["andDo", "andExpect", "perform", "accept", "param", "param", "contentType", "get", "isOk", "status", "print"]}, "focal_class": {"identifier": "CodeController", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ProjectDao projectDao;", "modifier": "@Autowired\n    private", "type": "ProjectDao", "declarator": "projectDao", "var_name": "projectDao"}, {"original_string": "@Autowired\n    private Consts consts;", "modifier": "@Autowired\n    private", "type": "Consts", "declarator": "consts", "var_name": "consts"}, {"original_string": "@Autowired\n    private CodeService codeService;", "modifier": "@Autowired\n    private", "type": "CodeService", "declarator": "codeService", "var_name": "codeService"}], "methods": [{"identifier": "countProject", "parameters": "(@RequestParam(value = \"projectId\", defaultValue = \"0\") Long projectId)", "modifiers": "@RequestMapping(value = \"/count\") public", "return": "ServiceResult", "signature": "ServiceResult countProject(@RequestParam(value = \"projectId\", defaultValue = \"0\") Long projectId)", "full_signature": "@RequestMapping(value = \"/count\") public ServiceResult countProject(@RequestParam(value = \"projectId\", defaultValue = \"0\") Long projectId)", "class_method_signature": "CodeController.countProject(@RequestParam(value = \"projectId\", defaultValue = \"0\") Long projectId)", "testcase": false, "constructor": false}, {"identifier": "generateProject", "parameters": "(@RequestBody GenerateCodeModel generateCodeRequest, HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"/generate\", method = RequestMethod.POST) public", "return": "ServiceResult", "signature": "ServiceResult generateProject(@RequestBody GenerateCodeModel generateCodeRequest, HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"/generate\", method = RequestMethod.POST) public ServiceResult generateProject(@RequestBody GenerateCodeModel generateCodeRequest, HttpServletRequest request)", "class_method_signature": "CodeController.generateProject(@RequestBody GenerateCodeModel generateCodeRequest, HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "getFiles", "parameters": "(@RequestParam(value = \"projectId\", defaultValue = \"\") String projectId,\n                                                     @RequestParam(value = \"name\", defaultValue = \"\") String name)", "modifiers": "@RequestMapping(value = \"/files\") public", "return": "ServiceResult<List<W2uiElement>>", "signature": "ServiceResult<List<W2uiElement>> getFiles(@RequestParam(value = \"projectId\", defaultValue = \"\") String projectId,\n                                                     @RequestParam(value = \"name\", defaultValue = \"\") String name)", "full_signature": "@RequestMapping(value = \"/files\") public ServiceResult<List<W2uiElement>> getFiles(@RequestParam(value = \"projectId\", defaultValue = \"\") String projectId,\n                                                     @RequestParam(value = \"name\", defaultValue = \"\") String name)", "class_method_signature": "CodeController.getFiles(@RequestParam(value = \"projectId\", defaultValue = \"\") String projectId,\n                                                     @RequestParam(value = \"name\", defaultValue = \"\") String name)", "testcase": false, "constructor": false}, {"identifier": "getFileContent", "parameters": "(@RequestParam(value = \"projectId\", defaultValue = \"\") String projectId,\n                                                @RequestParam(value = \"name\", defaultValue = \"\") String name)", "modifiers": "@RequestMapping(value = \"/content\") public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> getFileContent(@RequestParam(value = \"projectId\", defaultValue = \"\") String projectId,\n                                                @RequestParam(value = \"name\", defaultValue = \"\") String name)", "full_signature": "@RequestMapping(value = \"/content\") public ServiceResult<String> getFileContent(@RequestParam(value = \"projectId\", defaultValue = \"\") String projectId,\n                                                @RequestParam(value = \"name\", defaultValue = \"\") String name)", "class_method_signature": "CodeController.getFileContent(@RequestParam(value = \"projectId\", defaultValue = \"\") String projectId,\n                                                @RequestParam(value = \"name\", defaultValue = \"\") String name)", "testcase": false, "constructor": false}, {"identifier": "download", "parameters": "(@RequestParam(value = \"projectId\") Long projectId, HttpServletResponse response)", "modifiers": "@RequestMapping(\"/download\") public", "return": "String", "signature": "String download(@RequestParam(value = \"projectId\") Long projectId, HttpServletResponse response)", "full_signature": "@RequestMapping(\"/download\") public String download(@RequestParam(value = \"projectId\") Long projectId, HttpServletResponse response)", "class_method_signature": "CodeController.download(@RequestParam(value = \"projectId\") Long projectId, HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "clearFiles", "parameters": "(@RequestParam(value = \"projectId\") Integer projectId)", "modifiers": "@RequestMapping(value = \"/clearFiles\") public", "return": "ServiceResult", "signature": "ServiceResult clearFiles(@RequestParam(value = \"projectId\") Integer projectId)", "full_signature": "@RequestMapping(value = \"/clearFiles\") public ServiceResult clearFiles(@RequestParam(value = \"projectId\") Integer projectId)", "class_method_signature": "CodeController.clearFiles(@RequestParam(value = \"projectId\") Integer projectId)", "testcase": false, "constructor": false}], "file": "das-console-manager/src/main/java/com/ppdai/das/console/controller/CodeController.java"}, "focal_method": {"identifier": "getFiles", "parameters": "(@RequestParam(value = \"projectId\", defaultValue = \"\") String projectId,\n                                                     @RequestParam(value = \"name\", defaultValue = \"\") String name)", "modifiers": "@RequestMapping(value = \"/files\") public", "return": "ServiceResult<List<W2uiElement>>", "body": "@RequestMapping(value = \"/files\")\n    public ServiceResult<List<W2uiElement>> getFiles(@RequestParam(value = \"projectId\", defaultValue = \"\") String projectId,\n                                                     @RequestParam(value = \"name\", defaultValue = \"\") String name) {\n\n        if (StringUtils.isBlank(projectId) || StringUtils.isBlank(name)) {\n            return ServiceResult.fail(\"projectId \u6216 name \u4e3a\u7a7a!!!\");\n        }\n        List<W2uiElement> files = new ArrayList<>();\n\n        File currentProjectDir = new File(new File(consts.codeConsoleilePath, projectId), CodeGenConsts.JAVA);\n        if (currentProjectDir.exists()) {\n            File currentFile;\n            if (StringUtils.isBlank(name)) {\n                currentFile = currentProjectDir;\n            } else {\n                currentFile = new File(currentProjectDir, name);\n            }\n            for (File f : currentFile.listFiles()) {\n                W2uiElement element = new W2uiElement();\n                if (null == name || name.isEmpty()) {\n                    element.setId(String.format(\"%s_%d\", projectId, files.size()));\n                } else {\n                    element.setId(String.format(\"%s_%s_%d\", projectId, name.replace(\"\\\\\", \"\"), files.size()));\n                }\n                if (null == name || name.isEmpty()) {\n                    element.setData(f.getName());\n                } else {\n                    element.setData(name + File.separator + f.getName());\n                }\n                element.setText(f.getName());\n                element.setChildren(f.isDirectory());\n                if (element.isChildren()) {\n                    element.setType(\"folder\");\n                } else {\n                    element.setType(\"file\");\n                }\n                files.add(element);\n            }\n        }\n        return ServiceResult.success(files);\n    }", "signature": "ServiceResult<List<W2uiElement>> getFiles(@RequestParam(value = \"projectId\", defaultValue = \"\") String projectId,\n                                                     @RequestParam(value = \"name\", defaultValue = \"\") String name)", "full_signature": "@RequestMapping(value = \"/files\") public ServiceResult<List<W2uiElement>> getFiles(@RequestParam(value = \"projectId\", defaultValue = \"\") String projectId,\n                                                     @RequestParam(value = \"name\", defaultValue = \"\") String name)", "class_method_signature": "CodeController.getFiles(@RequestParam(value = \"projectId\", defaultValue = \"\") String projectId,\n                                                     @RequestParam(value = \"name\", defaultValue = \"\") String name)", "testcase": false, "constructor": false, "invocations": ["isBlank", "isBlank", "fail", "exists", "isBlank", "listFiles", "isEmpty", "setId", "format", "size", "setId", "format", "replace", "size", "isEmpty", "setData", "getName", "setData", "getName", "setText", "getName", "setChildren", "isDirectory", "isChildren", "setType", "setType", "add", "success"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}