{"test_class": {"identifier": "DocCountVectorizerModelMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TableSchema modelSchema = new DocCountVectorizerModelDataConverter().getModelSchema();", "modifier": "private", "type": "TableSchema", "declarator": "modelSchema = new DocCountVectorizerModelDataConverter().getModelSchema()", "var_name": "modelSchema"}, {"original_string": "private TableSchema dataSchema = new TableSchema(new String[] {\"sentence\"}, new TypeInformation<?>[] {Types.STRING});", "modifier": "private", "type": "TableSchema", "declarator": "dataSchema = new TableSchema(new String[] {\"sentence\"}, new TypeInformation<?>[] {Types.STRING})", "var_name": "dataSchema"}], "file": "core/src/test/java/com/alibaba/alink/operator/common/nlp/DocCountVectorizerModelMapperTest.java"}, "test_case": {"identifier": "testMinTF", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMinTF() throws Exception {\n        Row[] rows = new Row[] {\n            Row.of(0L, \"{\\\"minTF\\\":\\\"0.2\\\",\\\"featureType\\\":\\\"\\\\\\\"BINARY\\\\\\\"\\\"}\"),\n            Row.of(1048576L, \"{\\\"f0\\\":\\\"i\\\",\\\"f1\\\":0.6931471805599453,\\\"f2\\\":6}\"),\n            Row.of(2097152L, \"{\\\"f0\\\":\\\"e\\\",\\\"f1\\\":0.1823215567939546,\\\"f2\\\":2}\"),\n            Row.of(3145728L, \"{\\\"f0\\\":\\\"a\\\",\\\"f1\\\":0.4054651081081644,\\\"f2\\\":0}\"),\n            Row.of(4194304L, \"{\\\"f0\\\":\\\"b\\\",\\\"f1\\\":0.1823215567939546,\\\"f2\\\":1}\"),\n            Row.of(5242880L, \"{\\\"f0\\\":\\\"c\\\",\\\"f1\\\":0.6931471805599453,\\\"f2\\\":7}\"),\n            Row.of(6291456L, \"{\\\"f0\\\":\\\"h\\\",\\\"f1\\\":0.4054651081081644,\\\"f2\\\":3}\"),\n            Row.of(7340032L, \"{\\\"f0\\\":\\\"d\\\",\\\"f1\\\":0.6931471805599453,\\\"f2\\\":4}\"),\n            Row.of(8388608L, \"{\\\"f0\\\":\\\"j\\\",\\\"f1\\\":0.6931471805599453,\\\"f2\\\":5}\"),\n            Row.of(9437184L, \"{\\\"f0\\\":\\\"g\\\",\\\"f1\\\":0.6931471805599453,\\\"f2\\\":8}\"),\n            Row.of(10485760L, \"{\\\"f0\\\":\\\"n\\\",\\\"f1\\\":1.0986122886681098,\\\"f2\\\":9}\"),\n            Row.of(11534336L, \"{\\\"f0\\\":\\\"f\\\",\\\"f1\\\":1.0986122886681098,\\\"f2\\\":10}\")\n        };\n        List<Row> model = Arrays.asList(rows);\n\n        Params params = new Params()\n            .set(DocCountVectorizerPredictParams.SELECTED_COL, \"sentence\");\n\n        DocCountVectorizerModelMapper mapper = new DocCountVectorizerModelMapper(modelSchema, dataSchema, params);\n        mapper.loadModel(model);\n\n        assertEquals(mapper.map(Row.of(\"a b c d e a a b e\")).getField(0),\n            new SparseVector(11, new int[] {0, 1, 2}, new double[] {1.0, 1.0, 1.0}));\n        assertEquals(mapper.map(Row.of(\"a b c d\")).getField(0),\n            new SparseVector(11, new int[] {0, 1, 4, 7}, new double[] {1.0, 1.0, 1.0, 1.0}));\n    }", "signature": "void testMinTF()", "full_signature": "@Test public void testMinTF()", "class_method_signature": "DocCountVectorizerModelMapperTest.testMinTF()", "testcase": true, "constructor": false, "invocations": ["of", "of", "of", "of", "of", "of", "of", "of", "of", "of", "of", "of", "asList", "set", "loadModel", "assertEquals", "getField", "map", "of", "assertEquals", "getField", "map", "of"]}, "focal_class": {"identifier": "DocCountVectorizerModelMapper", "superclass": "extends SISOModelMapper", "interfaces": "", "fields": [{"original_string": "private static final Type DATA_TUPLE3_TYPE = new TypeReference<Tuple3<String, Double, Integer>>() {\n    }.getType();", "modifier": "private static final", "type": "Type", "declarator": "DATA_TUPLE3_TYPE = new TypeReference<Tuple3<String, Double, Integer>>() {\n    }.getType()", "var_name": "DATA_TUPLE3_TYPE"}, {"original_string": "private double minTF;", "modifier": "private", "type": "double", "declarator": "minTF", "var_name": "minTF"}, {"original_string": "private FeatureType featureType;", "modifier": "private", "type": "FeatureType", "declarator": "featureType", "var_name": "featureType"}, {"original_string": "private HashMap<String, Tuple2<Integer, Double>> wordIdWeight;", "modifier": "private", "type": "HashMap<String, Tuple2<Integer, Double>>", "declarator": "wordIdWeight", "var_name": "wordIdWeight"}, {"original_string": "private int featureNum;", "modifier": "private", "type": "int", "declarator": "featureNum", "var_name": "featureNum"}], "methods": [{"identifier": "DocCountVectorizerModelMapper", "parameters": "(TableSchema modelSchema, TableSchema dataSchema, Params params)", "modifiers": "public", "return": "", "signature": " DocCountVectorizerModelMapper(TableSchema modelSchema, TableSchema dataSchema, Params params)", "full_signature": "public  DocCountVectorizerModelMapper(TableSchema modelSchema, TableSchema dataSchema, Params params)", "class_method_signature": "DocCountVectorizerModelMapper.DocCountVectorizerModelMapper(TableSchema modelSchema, TableSchema dataSchema, Params params)", "testcase": false, "constructor": true}, {"identifier": "initPredResultColType", "parameters": "()", "modifiers": "@Override protected", "return": "TypeInformation", "signature": "TypeInformation initPredResultColType()", "full_signature": "@Override protected TypeInformation initPredResultColType()", "class_method_signature": "DocCountVectorizerModelMapper.initPredResultColType()", "testcase": false, "constructor": false}, {"identifier": "loadModel", "parameters": "(List<Row> modelRows)", "modifiers": "@Override public", "return": "void", "signature": "void loadModel(List<Row> modelRows)", "full_signature": "@Override public void loadModel(List<Row> modelRows)", "class_method_signature": "DocCountVectorizerModelMapper.loadModel(List<Row> modelRows)", "testcase": false, "constructor": false}, {"identifier": "predictResult", "parameters": "(Object input)", "modifiers": "@Override protected", "return": "Object", "signature": "Object predictResult(Object input)", "full_signature": "@Override protected Object predictResult(Object input)", "class_method_signature": "DocCountVectorizerModelMapper.predictResult(Object input)", "testcase": false, "constructor": false}, {"identifier": "predictSparseVector", "parameters": "(String content, double minTF,\n                                                   HashMap<String, Tuple2<Integer, Double>> wordIdWeight,\n                                                   FeatureType featureType, int featureNum)", "modifiers": "public static", "return": "SparseVector", "signature": "SparseVector predictSparseVector(String content, double minTF,\n                                                   HashMap<String, Tuple2<Integer, Double>> wordIdWeight,\n                                                   FeatureType featureType, int featureNum)", "full_signature": "public static SparseVector predictSparseVector(String content, double minTF,\n                                                   HashMap<String, Tuple2<Integer, Double>> wordIdWeight,\n                                                   FeatureType featureType, int featureNum)", "class_method_signature": "DocCountVectorizerModelMapper.predictSparseVector(String content, double minTF,\n                                                   HashMap<String, Tuple2<Integer, Double>> wordIdWeight,\n                                                   FeatureType featureType, int featureNum)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/common/nlp/DocCountVectorizerModelMapper.java"}, "focal_method": {"identifier": "loadModel", "parameters": "(List<Row> modelRows)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void loadModel(List<Row> modelRows) {\n        this.wordIdWeight = new HashMap<>(modelRows.size());\n        DocCountVectorizerModelData data = new DocCountVectorizerModelDataConverter().load(modelRows);\n        featureNum = data.list.size();\n        minTF = data.minTF;\n        this.featureType = FeatureType.valueOf(data.featureType.toUpperCase());\n        for (String feature : data.list) {\n            Tuple3<String, Double, Integer> t = JsonConverter.fromJson(feature, DATA_TUPLE3_TYPE);\n            wordIdWeight.put(t.f0, Tuple2.of(t.f2, t.f1));\n        }\n    }", "signature": "void loadModel(List<Row> modelRows)", "full_signature": "@Override public void loadModel(List<Row> modelRows)", "class_method_signature": "DocCountVectorizerModelMapper.loadModel(List<Row> modelRows)", "testcase": false, "constructor": false, "invocations": ["size", "load", "size", "valueOf", "toUpperCase", "fromJson", "put", "of"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}