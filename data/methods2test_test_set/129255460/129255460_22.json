{"test_class": {"identifier": "TargetFreshJobTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private TargetDistanceMapper targetDistanceMapper;", "modifier": "@Autowired\n    private", "type": "TargetDistanceMapper", "declarator": "targetDistanceMapper", "var_name": "targetDistanceMapper"}, {"original_string": "@Autowired\n    private TargetFreshJob targetFreshJob;", "modifier": "@Autowired\n    private", "type": "TargetFreshJob", "declarator": "targetFreshJob", "var_name": "targetFreshJob"}], "file": "backend/src/test/java/com/running/coins/job/TargetFreshJobTest.java"}, "test_case": {"identifier": "executeTargetFresh", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void executeTargetFresh() {\n        //targetFreshJob.executeTargetFresh();\n    }", "signature": "void executeTargetFresh()", "full_signature": "@Test public void executeTargetFresh()", "class_method_signature": "TargetFreshJobTest.executeTargetFresh()", "testcase": true, "constructor": false, "invocations": []}, "focal_class": {"identifier": "TargetFreshJob", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private TargetDistanceMapper targetDistanceMapper;", "modifier": "@Autowired\n    private", "type": "TargetDistanceMapper", "declarator": "targetDistanceMapper", "var_name": "targetDistanceMapper"}], "methods": [{"identifier": "executeTargetFresh", "parameters": "()", "modifiers": "@Scheduled(cron = \"1 0 0 ? * 1\") public", "return": "void", "signature": "void executeTargetFresh()", "full_signature": "@Scheduled(cron = \"1 0 0 ? * 1\") public void executeTargetFresh()", "class_method_signature": "TargetFreshJob.executeTargetFresh()", "testcase": false, "constructor": false}], "file": "backend/src/main/java/com/running/coins/job/TargetFreshJob.java"}, "focal_method": {"identifier": "executeTargetFresh", "parameters": "()", "modifiers": "@Scheduled(cron = \"1 0 0 ? * 1\") public", "return": "void", "body": "@Scheduled(cron = \"1 0 0 ? * 1\")\n    public void executeTargetFresh() {\n\n        Date day=new Date();\n        SimpleDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        log.info(\"Fresh Target Job start \uff1a\"+df.format(day));\n\n        ThisLocalizedWeek thisLocalizedWeek = new ThisLocalizedWeek(Locale.CHINA);\n\n        List<TargetDistance> targetDistances = targetDistanceMapper.selectByTimeRange(thisLocalizedWeek.getPreFirstDay(), thisLocalizedWeek.getPreLastDay());\n\n        for (TargetDistance targetDistance : targetDistances) {\n\n\n            /**\n             * \u4e3a\u4e86\u4fdd\u8bc1\u6570\u636e\u4e00\u5468\u53ea\u80fd\u6709\u4e00\u6b21 \u5148\u5220\u9664\u7136\u540e\u518d\u63d2\u5165\n             */\n            List<TargetDistance> targetDistanceolds = targetDistanceMapper.selectByUserGroupIdAndTimeRangeReturnList(targetDistance.getUserGroupId(), thisLocalizedWeek.getFirstDay(), thisLocalizedWeek.getLastDay());\n            if (targetDistanceolds!=null){\n                for (TargetDistance targetDistanceold : targetDistanceolds) {\n                    targetDistanceMapper.deleteByPrimaryKey(targetDistanceold.getTargetDistanceId());\n                }\n            }\n\n            targetDistance.setCreationTime(new Date());\n            targetDistance.setTargetDistanceId(null);\n            log.info(\"Generate Target\"+ targetDistance.toString());\n            targetDistanceMapper.insert(targetDistance);\n        }\n\n        day = new Date();\n        log.info(\"Fresh Target Job Finished \uff1a\"+df.format(day));\n\n    }", "signature": "void executeTargetFresh()", "full_signature": "@Scheduled(cron = \"1 0 0 ? * 1\") public void executeTargetFresh()", "class_method_signature": "TargetFreshJob.executeTargetFresh()", "testcase": false, "constructor": false, "invocations": ["info", "rmat(d", "selectByTimeRange", "getPreFirstDay", "getPreLastDay", "selectByUserGroupIdAndTimeRangeReturnList", "getUserGroupId", "getFirstDay", "getLastDay", "deleteByPrimaryKey", "getTargetDistanceId", "setCreationTime", "setTargetDistanceId", "info", "toString", "insert", "info", "rmat(d"]}, "repository": {"repo_id": 129255460, "url": "https://github.com/artbite008/running_coin", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 5, "size": 3010, "license": "licensed"}}