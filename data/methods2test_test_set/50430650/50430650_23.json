{"test_class": {"identifier": "FeatureFileParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/technophobia/substeps/runner/FeatureFileParserTest.java"}, "test_case": {"identifier": "testCommentEscaping", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCommentEscaping() {\n\n        final String line1 = \"hello this is a test with no comments\";\n        final String line2 = \"# hello this is a comment\";\n        final String line3 = \"hello this is a # trailing comment\";\n\n        // this should be picked up as a comment\n        final String line4 = \" \\\"hello\\\" this is an unquoted # \\\"hash\\\"\";\n\n        // this should NOT be picked up as a comment\n        final String line5 = \" hello this is a quoted \\\" # \\\"hash\";\n\n        final String line6 = \" hello this is a quoted '#' hash\";\n\n        final String line7 = \" \\\"hello\\\" this is a quoted '#' hash\";\n\n        final String line8 = \" 'hello' this is a non 'quoted' #' hash\";\n\n        Assert.assertThat(FeatureFileParser.stripComments(line1), is(\"hello this is a test with no comments\"));\n\n        Assert.assertThat(FeatureFileParser.stripComments(line2), is(\"\"));\n\n        Assert.assertThat(FeatureFileParser.stripComments(line3), is(\"hello this is a\"));\n\n        Assert.assertThat(FeatureFileParser.stripComments(line4), is(\"\\\"hello\\\" this is an unquoted\"));\n\n        Assert.assertThat(FeatureFileParser.stripComments(line5), is(\"hello this is a quoted \\\" # \\\"hash\"));\n\n        Assert.assertThat(FeatureFileParser.stripComments(line6), is(\"hello this is a quoted '#' hash\"));\n\n        Assert.assertThat(FeatureFileParser.stripComments(line7), is(\"\\\"hello\\\" this is a quoted '#' hash\"));\n\n        Assert.assertThat(FeatureFileParser.stripComments(line8), is(\"'hello' this is a non 'quoted'\"));\n\n    }", "signature": "void testCommentEscaping()", "full_signature": "@Test public void testCommentEscaping()", "class_method_signature": "FeatureFileParserTest.testCommentEscaping()", "testcase": true, "constructor": false, "invocations": ["assertThat", "stripComments", "is", "assertThat", "stripComments", "is", "assertThat", "stripComments", "is", "assertThat", "stripComments", "is", "assertThat", "stripComments", "is", "assertThat", "stripComments", "is", "assertThat", "stripComments", "is", "assertThat", "stripComments", "is"]}, "focal_class": {"identifier": "FeatureFileParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger log = LoggerFactory.getLogger(FeatureFileParser.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(FeatureFileParser.class)", "var_name": "log"}, {"original_string": "private static Map<String, Directive> directiveMap = new HashMap<String, Directive>();", "modifier": "private static", "type": "Map<String, Directive>", "declarator": "directiveMap = new HashMap<String, Directive>()", "var_name": "directiveMap"}, {"original_string": "private static final Pattern DIRECTIVE_PATTERN = Pattern.compile(\"([\\\\w ]*):\");", "modifier": "private static final", "type": "Pattern", "declarator": "DIRECTIVE_PATTERN = Pattern.compile(\"([\\\\w ]*):\")", "var_name": "DIRECTIVE_PATTERN"}], "methods": [{"identifier": "loadFeatureFile", "parameters": "(final File featureFile)", "modifiers": "public", "return": "FeatureFile", "signature": "FeatureFile loadFeatureFile(final File featureFile)", "full_signature": "public FeatureFile loadFeatureFile(final File featureFile)", "class_method_signature": "FeatureFileParser.loadFeatureFile(final File featureFile)", "testcase": false, "constructor": false}, {"identifier": "getFeatureFile", "parameters": "(FileContents fileContents)", "modifiers": "public", "return": "FeatureFile", "signature": "FeatureFile getFeatureFile(FileContents fileContents)", "full_signature": "public FeatureFile getFeatureFile(FileContents fileContents)", "class_method_signature": "FeatureFileParser.getFeatureFile(FileContents fileContents)", "testcase": false, "constructor": false}, {"identifier": "getFirstLinePattern", "parameters": "(final String element)", "modifiers": "private static", "return": "String", "signature": "String getFirstLinePattern(final String element)", "full_signature": "private static String getFirstLinePattern(final String element)", "class_method_signature": "FeatureFileParser.getFirstLinePattern(final String element)", "testcase": false, "constructor": false}, {"identifier": "cascadeTags", "parameters": "(final FeatureFile ff)", "modifiers": "private static", "return": "void", "signature": "void cascadeTags(final FeatureFile ff)", "full_signature": "private static void cascadeTags(final FeatureFile ff)", "class_method_signature": "FeatureFileParser.cascadeTags(final FeatureFile ff)", "testcase": false, "constructor": false}, {"identifier": "parseFeatureDescription", "parameters": "(final FeatureFile ff)", "modifiers": "private static", "return": "boolean", "signature": "boolean parseFeatureDescription(final FeatureFile ff)", "full_signature": "private static boolean parseFeatureDescription(final FeatureFile ff)", "class_method_signature": "FeatureFileParser.parseFeatureDescription(final FeatureFile ff)", "testcase": false, "constructor": false}, {"identifier": "buildScenario", "parameters": "(final Scenario sc, FileContents fileContents)", "modifiers": "private static", "return": "void", "signature": "void buildScenario(final Scenario sc, FileContents fileContents)", "full_signature": "private static void buildScenario(final Scenario sc, FileContents fileContents)", "class_method_signature": "FeatureFileParser.buildScenario(final Scenario sc, FileContents fileContents)", "testcase": false, "constructor": false}, {"identifier": "chunkUpFeatureFile", "parameters": "(final String fileContents, final FeatureFile ff, FileContents currentFileContents)", "modifiers": "private", "return": "void", "signature": "void chunkUpFeatureFile(final String fileContents, final FeatureFile ff, FileContents currentFileContents)", "full_signature": "private void chunkUpFeatureFile(final String fileContents, final FeatureFile ff, FileContents currentFileContents)", "class_method_signature": "FeatureFileParser.chunkUpFeatureFile(final String fileContents, final FeatureFile ff, FileContents currentFileContents)", "testcase": false, "constructor": false}, {"identifier": "processScenarioDirective", "parameters": "(final FeatureFile ff, final Set<String> currentTags,\n                                          final String currentBackground, final String sc, final boolean outline, final int start, FileContents currentFileContents)", "modifiers": "private", "return": "void", "signature": "void processScenarioDirective(final FeatureFile ff, final Set<String> currentTags,\n                                          final String currentBackground, final String sc, final boolean outline, final int start, FileContents currentFileContents)", "full_signature": "private void processScenarioDirective(final FeatureFile ff, final Set<String> currentTags,\n                                          final String currentBackground, final String sc, final boolean outline, final int start, FileContents currentFileContents)", "class_method_signature": "FeatureFileParser.processScenarioDirective(final FeatureFile ff, final Set<String> currentTags,\n                                          final String currentBackground, final String sc, final boolean outline, final int start, FileContents currentFileContents)", "testcase": false, "constructor": false}, {"identifier": "backgroundLineNumber", "parameters": "(FileContents currentFileContents)", "modifiers": "private static", "return": "int", "signature": "int backgroundLineNumber(FileContents currentFileContents)", "full_signature": "private static int backgroundLineNumber(FileContents currentFileContents)", "class_method_signature": "FeatureFileParser.backgroundLineNumber(FileContents currentFileContents)", "testcase": false, "constructor": false}, {"identifier": "processTags", "parameters": "(final Set<String> currentTags, final String raw)", "modifiers": "private static", "return": "void", "signature": "void processTags(final Set<String> currentTags, final String raw)", "full_signature": "private static void processTags(final Set<String> currentTags, final String raw)", "class_method_signature": "FeatureFileParser.processTags(final Set<String> currentTags, final String raw)", "testcase": false, "constructor": false}, {"identifier": "stripComments", "parameters": "(final String line)", "modifiers": "public static", "return": "String", "signature": "String stripComments(final String line)", "full_signature": "public static String stripComments(final String line)", "class_method_signature": "FeatureFileParser.stripComments(final String line)", "testcase": false, "constructor": false}, {"identifier": "stripCommentsAndBlankLines", "parameters": "(final List<String> lines)", "modifiers": "private static", "return": "String", "signature": "String stripCommentsAndBlankLines(final List<String> lines)", "full_signature": "private static String stripCommentsAndBlankLines(final List<String> lines)", "class_method_signature": "FeatureFileParser.stripCommentsAndBlankLines(final List<String> lines)", "testcase": false, "constructor": false}, {"identifier": "parseExamples", "parameters": "(final int lineNumber, final String trimmed, final Scenario sc)", "modifiers": "private static", "return": "void", "signature": "void parseExamples(final int lineNumber, final String trimmed, final Scenario sc)", "full_signature": "private static void parseExamples(final int lineNumber, final String trimmed, final Scenario sc)", "class_method_signature": "FeatureFileParser.parseExamples(final int lineNumber, final String trimmed, final Scenario sc)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/technophobia/substeps/runner/FeatureFileParser.java"}, "focal_method": {"identifier": "stripComments", "parameters": "(final String line)", "modifiers": "public static", "return": "String", "body": "public static String stripComments(final String line) {\n        String trimmed = null;\n        if (line != null) {\n\n            final int idx = line.trim().indexOf(\"#\");\n            if (idx >= 0) {\n                // is the # inside matched quotes\n\n                boolean doTrim = false;\n\n                if (idx == 0) {\n                    // first char\n                    doTrim = true;\n                }\n\n                final String[] splitByQuotes = line.split(\"\\\"[^\\\"]*\\\"|'[^']*'\");\n                // this will find parts of the string not in quotes\n                for (final String split : splitByQuotes) {\n                    if (split.contains(\"#\") ) {\n                        // hash exists not in a matching pair of quotes\n                        doTrim = true;\n                        break;\n                    }\n                }\n\n                if (doTrim) {\n                    trimmed = line.trim().substring(0, idx).trim();\n                } else {\n                    trimmed = line.trim();\n                }\n            } else {\n                trimmed = line.trim();\n            }\n        }\n        return trimmed;\n    }", "signature": "String stripComments(final String line)", "full_signature": "public static String stripComments(final String line)", "class_method_signature": "FeatureFileParser.stripComments(final String line)", "testcase": false, "constructor": false, "invocations": ["indexOf", "trim", "split", "contains", "trim", "substring", "trim", "trim", "trim"]}, "repository": {"repo_id": 50430650, "url": "https://github.com/Substeps/substeps-framework", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 5, "size": 2783, "license": "licensed"}}