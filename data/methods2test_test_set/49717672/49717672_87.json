{"test_class": {"identifier": "AnticipateTest", "superclass": "", "interfaces": "", "fields": [], "file": "app/src/test/java/com/eveningoutpost/dexdrip/cgm/nsfollow/utils/AnticipateTest.java"}, "test_case": {"identifier": "next_realWorld1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void next_realWorld1() {\n        // :: Setup\n        // 2019-06-38 11:18:49\n        long now = 1_561_893_529_622L;\n        // 2019-06-30 11:13:29\n        long last = 1_561_893_209_000L;\n        // 5 minutes\n        long period = 300_000L;\n        // 10 seconds\n        long grace = 10_000;\n\n        // :: Act\n        long next = Anticipate.next(now, last, period, grace);\n\n        // :: Verify\n        // 2019-06-30 11:18:59 (now + grace)\n        assertThat(next).isEqualTo(1_561_893_799_000L);\n    }", "signature": "void next_realWorld1()", "full_signature": "@Test public void next_realWorld1()", "class_method_signature": "AnticipateTest.next_realWorld1()", "testcase": true, "constructor": false, "invocations": ["next", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "Anticipate", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "next", "parameters": "(long now, final long last, final long period, final long grace)", "modifiers": "public static", "return": "long", "signature": "long next(long now, final long last, final long period, final long grace)", "full_signature": "public static long next(long now, final long last, final long period, final long grace)", "class_method_signature": "Anticipate.next(long now, final long last, final long period, final long grace)", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/eveningoutpost/dexdrip/cgm/nsfollow/utils/Anticipate.java"}, "focal_method": {"identifier": "next", "parameters": "(long now, final long last, final long period, final long grace)", "modifiers": "public static", "return": "long", "body": "public static long next(long now, final long last, final long period, final long grace) {\n\n        final long since = now - last;\n        if (since <= (grace * 2)) {\n            // recent reading already\n            return last + period - grace;\n        }\n\n        // Find time outside period schedule where we are now.\n        final long modulus = (last - now) % period;\n        long nextMin;\n        // Try to wake up on next expected\n        if (modulus < -grace) {\n            nextMin = (now + modulus) + period - grace;\n        } else {\n            nextMin = (now + modulus);\n        }\n\n        // Make sure result is after now.\n        while (nextMin <= now) {\n            nextMin += grace;\n        }\n\n        return nextMin;\n    }", "signature": "long next(long now, final long last, final long period, final long grace)", "full_signature": "public static long next(long now, final long last, final long period, final long grace)", "class_method_signature": "Anticipate.next(long now, final long last, final long period, final long grace)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 49717672, "url": "https://github.com/jamorham/xDrip-plus", "stars": 199, "created": "1/15/2016 12:31:22 PM +00:00", "updates": "2020-01-26T20:46:33+00:00", "fork": "False", "license": "licensed"}}