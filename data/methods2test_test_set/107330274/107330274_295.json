{"test_class": {"identifier": "NodeGcControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long NODE_GC_GRACE_PERIOD = 1000L;", "modifier": "private static final", "type": "long", "declarator": "NODE_GC_GRACE_PERIOD = 1000L", "var_name": "NODE_GC_GRACE_PERIOD"}, {"original_string": "private static final String NODE_NAME = \"node-name\";", "modifier": "private static final", "type": "String", "declarator": "NODE_NAME = \"node-name\"", "var_name": "NODE_NAME"}, {"original_string": "private static final String CORRECT_ACCOUNT = \"correct-account\";", "modifier": "private static final", "type": "String", "declarator": "CORRECT_ACCOUNT = \"correct-account\"", "var_name": "CORRECT_ACCOUNT"}, {"original_string": "private static final String INCORRECT_ACCOUNT = \"incorrect-account\";", "modifier": "private static final", "type": "String", "declarator": "INCORRECT_ACCOUNT = \"incorrect-account\"", "var_name": "INCORRECT_ACCOUNT"}, {"original_string": "private static final TestClock clock = new DefaultTestClock();", "modifier": "private static final", "type": "TestClock", "declarator": "clock = new DefaultTestClock()", "var_name": "clock"}, {"original_string": "private final TitusRuntime titusRuntime = TitusRuntimes.test(clock);", "modifier": "private final", "type": "TitusRuntime", "declarator": "titusRuntime = TitusRuntimes.test(clock)", "var_name": "titusRuntime"}, {"original_string": "private final LocalScheduler scheduler = mock(LocalScheduler.class);", "modifier": "private final", "type": "LocalScheduler", "declarator": "scheduler = mock(LocalScheduler.class)", "var_name": "scheduler"}, {"original_string": "private final FixedIntervalTokenBucketConfiguration tokenBucketConfiguration = mock(FixedIntervalTokenBucketConfiguration.class);", "modifier": "private final", "type": "FixedIntervalTokenBucketConfiguration", "declarator": "tokenBucketConfiguration = mock(FixedIntervalTokenBucketConfiguration.class)", "var_name": "tokenBucketConfiguration"}, {"original_string": "private final ControllerConfiguration controllerConfiguration = mock(ControllerConfiguration.class);", "modifier": "private final", "type": "ControllerConfiguration", "declarator": "controllerConfiguration = mock(ControllerConfiguration.class)", "var_name": "controllerConfiguration"}, {"original_string": "private final AgentManagementService agentManagementService = mock(AgentManagementService.class);", "modifier": "private final", "type": "AgentManagementService", "declarator": "agentManagementService = mock(AgentManagementService.class)", "var_name": "agentManagementService"}, {"original_string": "private final KubeApiFacade kubeApiFacade = mock(KubeApiFacade.class);", "modifier": "private final", "type": "KubeApiFacade", "declarator": "kubeApiFacade = mock(KubeApiFacade.class)", "var_name": "kubeApiFacade"}, {"original_string": "private final KubeControllerConfiguration kubeControllerConfiguration = mock(KubeControllerConfiguration.class);", "modifier": "private final", "type": "KubeControllerConfiguration", "declarator": "kubeControllerConfiguration = mock(KubeControllerConfiguration.class)", "var_name": "kubeControllerConfiguration"}, {"original_string": "private final NodeGcController nodeGcController = new NodeGcController(\n            titusRuntime,\n            scheduler,\n            tokenBucketConfiguration,\n            controllerConfiguration,\n            agentManagementService,\n            kubeApiFacade,\n            kubeControllerConfiguration\n    );", "modifier": "private final", "type": "NodeGcController", "declarator": "nodeGcController = new NodeGcController(\n            titusRuntime,\n            scheduler,\n            tokenBucketConfiguration,\n            controllerConfiguration,\n            agentManagementService,\n            kubeApiFacade,\n            kubeControllerConfiguration\n    )", "var_name": "nodeGcController"}], "file": "titus-server-master/src/test/java/com/netflix/titus/master/kubernetes/controller/NodeGcControllerTest.java"}, "test_case": {"identifier": "nodeReadyConditionTimestampIsPastGracePeriod", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void nodeReadyConditionTimestampIsPastGracePeriod() {\n        long now = clock.wallTime();\n        clock.advanceTime(Duration.ofMillis(NODE_GC_GRACE_PERIOD + 1));\n        V1NodeCondition readyCondition = new V1NodeCondition().type(READY).lastHeartbeatTime(new DateTime(now));\n        V1Node node = new V1Node()\n                .metadata(new V1ObjectMeta().name(NODE_NAME).annotations(Collections.singletonMap(NODE_LABEL_ACCOUNT_ID, CORRECT_ACCOUNT)))\n                .spec(new V1NodeSpec())\n                .status(new V1NodeStatus().addConditionsItem(readyCondition));\n        Assertions.assertThat(nodeGcController.isNodeEligibleForGc(node)).isTrue();\n    }", "signature": "void nodeReadyConditionTimestampIsPastGracePeriod()", "full_signature": "@Test void nodeReadyConditionTimestampIsPastGracePeriod()", "class_method_signature": "NodeGcControllerTest.nodeReadyConditionTimestampIsPastGracePeriod()", "testcase": true, "constructor": false, "invocations": ["wallTime", "advanceTime", "ofMillis", "lastHeartbeatTime", "type", "status", "spec", "metadata", "annotations", "name", "singletonMap", "addConditionsItem", "isTrue", "assertThat", "isNodeEligibleForGc"]}, "focal_class": {"identifier": "NodeGcController", "superclass": "extends BaseGcController<V1Node>", "interfaces": "", "fields": [{"original_string": "public static final String NODE_GC_CONTROLLER = \"nodeGcController\";", "modifier": "public static final", "type": "String", "declarator": "NODE_GC_CONTROLLER = \"nodeGcController\"", "var_name": "NODE_GC_CONTROLLER"}, {"original_string": "public static final String NODE_GC_CONTROLLER_DESCRIPTION = \"GC nodes that are not in agent management and are not reachable.\";", "modifier": "public static final", "type": "String", "declarator": "NODE_GC_CONTROLLER_DESCRIPTION = \"GC nodes that are not in agent management and are not reachable.\"", "var_name": "NODE_GC_CONTROLLER_DESCRIPTION"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(NodeGcController.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(NodeGcController.class)", "var_name": "logger"}, {"original_string": "private final AgentManagementService agentManagementService;", "modifier": "private final", "type": "AgentManagementService", "declarator": "agentManagementService", "var_name": "agentManagementService"}, {"original_string": "private final KubeApiFacade kubeApiFacade;", "modifier": "private final", "type": "KubeApiFacade", "declarator": "kubeApiFacade", "var_name": "kubeApiFacade"}, {"original_string": "private final Clock clock;", "modifier": "private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "private final KubeControllerConfiguration kubeControllerConfiguration;", "modifier": "private final", "type": "KubeControllerConfiguration", "declarator": "kubeControllerConfiguration", "var_name": "kubeControllerConfiguration"}], "methods": [{"identifier": "NodeGcController", "parameters": "(\n            TitusRuntime titusRuntime,\n            LocalScheduler scheduler,\n            @Named(NODE_GC_CONTROLLER) FixedIntervalTokenBucketConfiguration tokenBucketConfiguration,\n            @Named(NODE_GC_CONTROLLER) ControllerConfiguration controllerConfiguration,\n            AgentManagementService agentManagementService,\n            KubeApiFacade kubeApiFacade,\n            KubeControllerConfiguration kubeControllerConfiguration\n    )", "modifiers": "@Inject public", "return": "", "signature": " NodeGcController(\n            TitusRuntime titusRuntime,\n            LocalScheduler scheduler,\n            @Named(NODE_GC_CONTROLLER) FixedIntervalTokenBucketConfiguration tokenBucketConfiguration,\n            @Named(NODE_GC_CONTROLLER) ControllerConfiguration controllerConfiguration,\n            AgentManagementService agentManagementService,\n            KubeApiFacade kubeApiFacade,\n            KubeControllerConfiguration kubeControllerConfiguration\n    )", "full_signature": "@Inject public  NodeGcController(\n            TitusRuntime titusRuntime,\n            LocalScheduler scheduler,\n            @Named(NODE_GC_CONTROLLER) FixedIntervalTokenBucketConfiguration tokenBucketConfiguration,\n            @Named(NODE_GC_CONTROLLER) ControllerConfiguration controllerConfiguration,\n            AgentManagementService agentManagementService,\n            KubeApiFacade kubeApiFacade,\n            KubeControllerConfiguration kubeControllerConfiguration\n    )", "class_method_signature": "NodeGcController.NodeGcController(\n            TitusRuntime titusRuntime,\n            LocalScheduler scheduler,\n            @Named(NODE_GC_CONTROLLER) FixedIntervalTokenBucketConfiguration tokenBucketConfiguration,\n            @Named(NODE_GC_CONTROLLER) ControllerConfiguration controllerConfiguration,\n            AgentManagementService agentManagementService,\n            KubeApiFacade kubeApiFacade,\n            KubeControllerConfiguration kubeControllerConfiguration\n    )", "testcase": false, "constructor": true}, {"identifier": "shouldGc", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean shouldGc()", "full_signature": "@Override public boolean shouldGc()", "class_method_signature": "NodeGcController.shouldGc()", "testcase": false, "constructor": false}, {"identifier": "getItemsToGc", "parameters": "()", "modifiers": "@Override public", "return": "List<V1Node>", "signature": "List<V1Node> getItemsToGc()", "full_signature": "@Override public List<V1Node> getItemsToGc()", "class_method_signature": "NodeGcController.getItemsToGc()", "testcase": false, "constructor": false}, {"identifier": "gcItem", "parameters": "(V1Node item)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean gcItem(V1Node item)", "full_signature": "@Override public boolean gcItem(V1Node item)", "class_method_signature": "NodeGcController.gcItem(V1Node item)", "testcase": false, "constructor": false}, {"identifier": "isNodeInConfiguredAccount", "parameters": "(V1Node node)", "modifiers": "@VisibleForTesting", "return": "boolean", "signature": "boolean isNodeInConfiguredAccount(V1Node node)", "full_signature": "@VisibleForTesting boolean isNodeInConfiguredAccount(V1Node node)", "class_method_signature": "NodeGcController.isNodeInConfiguredAccount(V1Node node)", "testcase": false, "constructor": false}, {"identifier": "isNodeEligibleForGc", "parameters": "(V1Node node)", "modifiers": "@VisibleForTesting", "return": "boolean", "signature": "boolean isNodeEligibleForGc(V1Node node)", "full_signature": "@VisibleForTesting boolean isNodeEligibleForGc(V1Node node)", "class_method_signature": "NodeGcController.isNodeEligibleForGc(V1Node node)", "testcase": false, "constructor": false}, {"identifier": "hasConditionGracePeriodElapsed", "parameters": "(V1NodeCondition condition, long gracePeriodMs)", "modifiers": "private", "return": "boolean", "signature": "boolean hasConditionGracePeriodElapsed(V1NodeCondition condition, long gracePeriodMs)", "full_signature": "private boolean hasConditionGracePeriodElapsed(V1NodeCondition condition, long gracePeriodMs)", "class_method_signature": "NodeGcController.hasConditionGracePeriodElapsed(V1NodeCondition condition, long gracePeriodMs)", "testcase": false, "constructor": false}, {"identifier": "isAgentInstanceNotAvailable", "parameters": "(String nodeName)", "modifiers": "private", "return": "boolean", "signature": "boolean isAgentInstanceNotAvailable(String nodeName)", "full_signature": "private boolean isAgentInstanceNotAvailable(String nodeName)", "class_method_signature": "NodeGcController.isAgentInstanceNotAvailable(String nodeName)", "testcase": false, "constructor": false}], "file": "titus-server-master/src/main/java/com/netflix/titus/master/kubernetes/controller/NodeGcController.java"}, "focal_method": {"identifier": "isNodeEligibleForGc", "parameters": "(V1Node node)", "modifiers": "@VisibleForTesting", "return": "boolean", "body": "@VisibleForTesting\n    boolean isNodeEligibleForGc(V1Node node) {\n        String nodeName = KubeUtil.getMetadataName(node.getMetadata());\n        Optional<V1NodeCondition> readyNodeConditionOpt = KubeUtil.findNodeCondition(node, READY);\n        if (StringExt.isNotEmpty(nodeName) && readyNodeConditionOpt.isPresent()) {\n            V1NodeCondition readyNodeCondition = readyNodeConditionOpt.get();\n            boolean isReadyConditionTimestampPastGracePeriod = hasConditionGracePeriodElapsed(readyNodeCondition,\n                    kubeControllerConfiguration.getNodeGcGracePeriodMs());\n            return isReadyConditionTimestampPastGracePeriod && isAgentInstanceNotAvailable(nodeName);\n        }\n        return false;\n    }", "signature": "boolean isNodeEligibleForGc(V1Node node)", "full_signature": "@VisibleForTesting boolean isNodeEligibleForGc(V1Node node)", "class_method_signature": "NodeGcController.isNodeEligibleForGc(V1Node node)", "testcase": false, "constructor": false, "invocations": ["getMetadataName", "getMetadata", "findNodeCondition", "isNotEmpty", "isPresent", "get", "hasConditionGracePeriodElapsed", "getNodeGcGracePeriodMs", "isAgentInstanceNotAvailable"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}