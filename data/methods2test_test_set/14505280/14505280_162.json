{"test_class": {"identifier": "SearchFeatureCommandTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double DOUBLE_TOLERANCE = .00000001;", "modifier": "private static final", "type": "double", "declarator": "DOUBLE_TOLERANCE = .00000001", "var_name": "DOUBLE_TOLERANCE"}, {"original_string": "private static final String LAYER_ID = \"countries\";", "modifier": "private static final", "type": "String", "declarator": "LAYER_ID = \"countries\"", "var_name": "LAYER_ID"}, {"original_string": "private static final String REGION_ATTRIBUTE = \"region\";", "modifier": "private static final", "type": "String", "declarator": "REGION_ATTRIBUTE = \"region\"", "var_name": "REGION_ATTRIBUTE"}, {"original_string": "private static final String NAME_ATTRIBUTE = \"name\";", "modifier": "private static final", "type": "String", "declarator": "NAME_ATTRIBUTE = \"name\"", "var_name": "NAME_ATTRIBUTE"}, {"original_string": "private static final String ID_ATTRIBUTE = \"id\";", "modifier": "private static final", "type": "String", "declarator": "ID_ATTRIBUTE = \"id\"", "var_name": "ID_ATTRIBUTE"}, {"original_string": "@Autowired\n\tprivate CommandDispatcher dispatcher;", "modifier": "@Autowired\n\tprivate", "type": "CommandDispatcher", "declarator": "dispatcher", "var_name": "dispatcher"}, {"original_string": "@Autowired\n\tprivate SearchFeatureCommand searchFeatureCommand;", "modifier": "@Autowired\n\tprivate", "type": "SearchFeatureCommand", "declarator": "searchFeatureCommand", "var_name": "searchFeatureCommand"}], "file": "command/src/test/java/org/geomajas/command/feature/SearchFeatureCommandTest.java"}, "test_case": {"identifier": "testSearchMultipleCriteria", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSearchMultipleCriteria() throws Exception {\n\t\t// prepare command\n\t\tSearchFeatureRequest request = new SearchFeatureRequest();\n\t\trequest.setLayerId(LAYER_ID);\n\t\trequest.setCrs(\"EPSG:4326\");\n\t\tSearchCriterion searchCriterion1 = new SearchCriterion();\n\t\tsearchCriterion1.setAttributeName(REGION_ATTRIBUTE);\n\t\tsearchCriterion1.setOperator(\"like\");\n\t\tsearchCriterion1.setValue(\"'%egion 1'\");\n\t\tSearchCriterion searchCriterion2 = new SearchCriterion();\n\t\tsearchCriterion2.setAttributeName(REGION_ATTRIBUTE);\n\t\tsearchCriterion2.setOperator(\"like\");\n\t\tsearchCriterion2.setValue(\"'%egion 2'\");\n\t\trequest.setCriteria(new SearchCriterion[] {searchCriterion1, searchCriterion2});\n\t\trequest.setBooleanOperator(\"or\");\n\n\t\t// execute\n\t\tSearchFeatureResponse response = (SearchFeatureResponse) dispatcher.execute(\n\t\t\t\tSearchFeatureRequest.COMMAND, request, null, \"en\");\n\n\t\t// test\n\t\tAssert.assertFalse(response.isError());\n\t\tAssert.assertEquals(LAYER_ID, response.getLayerId());\n\t\tList<Feature> features = Arrays.asList(response.getFeatures());\n\t\tAssert.assertNotNull(features);\n\t\tAssert.assertEquals(4, features.size());\n\n\t\tList<String> actual = new ArrayList<String>();\n\t\tfor (Feature feature : features) {\n\t\t\tactual.add(feature.getLabel());\n\t\t}\n\t\tAssert.assertTrue(actual.contains(\"Country 1\"));\n\t\tAssert.assertTrue(actual.contains(\"Country 2\"));\n\t\tAssert.assertTrue(actual.contains(\"Country 3\"));\n\t\tAssert.assertTrue(actual.contains(\"Country 4\"));\n\t}", "signature": "void testSearchMultipleCriteria()", "full_signature": "@Test public void testSearchMultipleCriteria()", "class_method_signature": "SearchFeatureCommandTest.testSearchMultipleCriteria()", "testcase": true, "constructor": false, "invocations": ["setLayerId", "setCrs", "setAttributeName", "setOperator", "setValue", "setAttributeName", "setOperator", "setValue", "setCriteria", "setBooleanOperator", "execute", "assertFalse", "isError", "assertEquals", "getLayerId", "asList", "getFeatures", "assertNotNull", "assertEquals", "size", "add", "getLabel", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains"]}, "focal_class": {"identifier": "SearchFeatureCommand", "superclass": "", "interfaces": "implements CommandHasRequest<SearchFeatureRequest, SearchFeatureResponse>", "fields": [{"original_string": "private final Logger log  = LoggerFactory.getLogger(SearchFeatureCommand.class);", "modifier": "private final", "type": "Logger", "declarator": "log  = LoggerFactory.getLogger(SearchFeatureCommand.class)", "var_name": "log"}, {"original_string": "@Autowired\n\tprivate ConfigurationService configurationService;", "modifier": "@Autowired\n\tprivate", "type": "ConfigurationService", "declarator": "configurationService", "var_name": "configurationService"}, {"original_string": "@Autowired\n\tprivate GeoService geoService;", "modifier": "@Autowired\n\tprivate", "type": "GeoService", "declarator": "geoService", "var_name": "geoService"}, {"original_string": "@Autowired\n\tprivate DtoConverterService converter;", "modifier": "@Autowired\n\tprivate", "type": "DtoConverterService", "declarator": "converter", "var_name": "converter"}, {"original_string": "@Autowired\n\tprivate FilterService filterService;", "modifier": "@Autowired\n\tprivate", "type": "FilterService", "declarator": "filterService", "var_name": "filterService"}, {"original_string": "@Autowired\n\tprivate VectorLayerService layerService;", "modifier": "@Autowired\n\tprivate", "type": "VectorLayerService", "declarator": "layerService", "var_name": "layerService"}], "methods": [{"identifier": "getEmptyCommandRequest", "parameters": "()", "modifiers": "@Override public", "return": "SearchFeatureRequest", "signature": "SearchFeatureRequest getEmptyCommandRequest()", "full_signature": "@Override public SearchFeatureRequest getEmptyCommandRequest()", "class_method_signature": "SearchFeatureCommand.getEmptyCommandRequest()", "testcase": false, "constructor": false}, {"identifier": "getEmptyCommandResponse", "parameters": "()", "modifiers": "@Override public", "return": "SearchFeatureResponse", "signature": "SearchFeatureResponse getEmptyCommandResponse()", "full_signature": "@Override public SearchFeatureResponse getEmptyCommandResponse()", "class_method_signature": "SearchFeatureCommand.getEmptyCommandResponse()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(SearchFeatureRequest request, SearchFeatureResponse response)", "modifiers": "@Override public", "return": "void", "signature": "void execute(SearchFeatureRequest request, SearchFeatureResponse response)", "full_signature": "@Override public void execute(SearchFeatureRequest request, SearchFeatureResponse response)", "class_method_signature": "SearchFeatureCommand.execute(SearchFeatureRequest request, SearchFeatureResponse response)", "testcase": false, "constructor": false}, {"identifier": "createFilter", "parameters": "(SearchFeatureRequest request, String layerId)", "modifiers": "", "return": "Filter", "signature": "Filter createFilter(SearchFeatureRequest request, String layerId)", "full_signature": " Filter createFilter(SearchFeatureRequest request, String layerId)", "class_method_signature": "SearchFeatureCommand.createFilter(SearchFeatureRequest request, String layerId)", "testcase": false, "constructor": false}], "file": "command/src/main/java/org/geomajas/command/feature/SearchFeatureCommand.java"}, "focal_method": {"identifier": "execute", "parameters": "(SearchFeatureRequest request, SearchFeatureResponse response)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void execute(SearchFeatureRequest request, SearchFeatureResponse response) throws Exception {\n\t\tString layerId = request.getLayerId();\n\t\tif (null == layerId) {\n\t\t\tthrow new GeomajasException(ExceptionCode.PARAMETER_MISSING, \"layer\");\n\t\t}\n\t\tString crs = request.getCrs();\n\t\tif (null == crs) {\n\t\t\tthrow new GeomajasException(ExceptionCode.PARAMETER_MISSING, \"crs\");\n\t\t}\n\n\t\tFilter filter = createFilter(request, layerId);\n\t\tlog.debug(\"filter to apply : {}\", filter);\n\n\t\tList<InternalFeature> features = layerService.getFeatures(layerId, geoService.getCrs(request.getCrs()), filter,\n\t\t\t\tnull, request.getFeatureIncludes(), request.getOffSet(), request.getMax());\n\t\tresponse.setLayerId(layerId);\n\t\tint max = request.getMax();\n\t\tif (max == SearchFeatureRequest.MAX_UNLIMITED) {\n\t\t\tmax = features.size();\n\t\t}\n\t\tif (max > features.size()) {\n\t\t\tmax = features.size();\n\t\t}\n\t\tFeature[] maxList = new Feature[max];\n\t\tfor (int i = 0; i < max; i++) {\n\t\t\tFeature feature = converter.toDto(features.get(i));\n\t\t\tfeature.setCrs(crs);\n\t\t\tmaxList[i] = feature;\n\t\t}\n\t\tresponse.setFeatures(maxList);\n\t}", "signature": "void execute(SearchFeatureRequest request, SearchFeatureResponse response)", "full_signature": "@Override public void execute(SearchFeatureRequest request, SearchFeatureResponse response)", "class_method_signature": "SearchFeatureCommand.execute(SearchFeatureRequest request, SearchFeatureResponse response)", "testcase": false, "constructor": false, "invocations": ["getLayerId", "getCrs", "createFilter", "debug", "getFeatures", "getCrs", "getCrs", "getFeatureIncludes", "getOffSet", "getMax", "setLayerId", "getMax", "size", "size", "size", "toDto", "get", "setCrs", "setFeatures"]}, "repository": {"repo_id": 14505280, "url": "https://github.com/geomajas/geomajas-project-server", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 13, "size": 124882, "license": "licensed"}}