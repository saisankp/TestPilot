{"test_class": {"identifier": "TestConstantFlowRegulator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ConstantFlowRegulator impl;", "modifier": "private", "type": "ConstantFlowRegulator", "declarator": "impl", "var_name": "impl"}, {"original_string": "private Callable<Object> mockCallable;", "modifier": "private", "type": "Callable<Object>", "declarator": "mockCallable", "var_name": "mockCallable"}, {"original_string": "private Runnable mockRunnable;", "modifier": "private", "type": "Runnable", "declarator": "mockRunnable", "var_name": "mockRunnable"}], "file": "jrugged-core/src/test/java/org/fishwife/jrugged/TestConstantFlowRegulator.java"}, "test_case": {"identifier": "testThrowsMappedExceptionWhenCanNotProceedViaConstructor", "parameters": "()", "modifiers": "@Test (expected=DomainException.class) public", "return": "void", "body": "@Test (expected=DomainException.class)\n    public void testThrowsMappedExceptionWhenCanNotProceedViaConstructor() throws Exception {\n        ConstantFlowRegulator impl = new ConstantFlowRegulator(1, new TestConstantFlowRegulatorExceptionMapper());\n        for (int i = 0; i < 5; i++) {\n            impl.invoke(mockCallable);\n        }\n    }", "signature": "void testThrowsMappedExceptionWhenCanNotProceedViaConstructor()", "full_signature": "@Test (expected=DomainException.class) public void testThrowsMappedExceptionWhenCanNotProceedViaConstructor()", "class_method_signature": "TestConstantFlowRegulator.testThrowsMappedExceptionWhenCanNotProceedViaConstructor()", "testcase": true, "constructor": false, "invocations": ["invoke"]}, "focal_class": {"identifier": "ConstantFlowRegulator", "superclass": "", "interfaces": "implements ServiceWrapper", "fields": [{"original_string": "private int requestPerSecondThreshold = -1;", "modifier": "private", "type": "int", "declarator": "requestPerSecondThreshold = -1", "var_name": "requestPerSecondThreshold"}, {"original_string": "private long deltaWaitTimeMillis = 0;", "modifier": "private", "type": "long", "declarator": "deltaWaitTimeMillis = 0", "var_name": "deltaWaitTimeMillis"}, {"original_string": "private long lastRequestOccurance = 0;", "modifier": "private", "type": "long", "declarator": "lastRequestOccurance = 0", "var_name": "lastRequestOccurance"}, {"original_string": "ConstantFlowRegulatorExceptionMapper<? extends Exception> exceptionMapper;", "modifier": "", "type": "ConstantFlowRegulatorExceptionMapper<? extends Exception>", "declarator": "exceptionMapper", "var_name": "exceptionMapper"}], "methods": [{"identifier": "ConstantFlowRegulator", "parameters": "()", "modifiers": "public", "return": "", "signature": " ConstantFlowRegulator()", "full_signature": "public  ConstantFlowRegulator()", "class_method_signature": "ConstantFlowRegulator.ConstantFlowRegulator()", "testcase": false, "constructor": true}, {"identifier": "ConstantFlowRegulator", "parameters": "(int requestsPerSecond)", "modifiers": "public", "return": "", "signature": " ConstantFlowRegulator(int requestsPerSecond)", "full_signature": "public  ConstantFlowRegulator(int requestsPerSecond)", "class_method_signature": "ConstantFlowRegulator.ConstantFlowRegulator(int requestsPerSecond)", "testcase": false, "constructor": true}, {"identifier": "ConstantFlowRegulator", "parameters": "(int requestsPerSecond,\n                                 ConstantFlowRegulatorExceptionMapper<? extends Exception> mapper)", "modifiers": "public", "return": "", "signature": " ConstantFlowRegulator(int requestsPerSecond,\n                                 ConstantFlowRegulatorExceptionMapper<? extends Exception> mapper)", "full_signature": "public  ConstantFlowRegulator(int requestsPerSecond,\n                                 ConstantFlowRegulatorExceptionMapper<? extends Exception> mapper)", "class_method_signature": "ConstantFlowRegulator.ConstantFlowRegulator(int requestsPerSecond,\n                                 ConstantFlowRegulatorExceptionMapper<? extends Exception> mapper)", "testcase": false, "constructor": true}, {"identifier": "invoke", "parameters": "(Callable<T> c)", "modifiers": "public", "return": "T", "signature": "T invoke(Callable<T> c)", "full_signature": "public T invoke(Callable<T> c)", "class_method_signature": "ConstantFlowRegulator.invoke(Callable<T> c)", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(Runnable r)", "modifiers": "public", "return": "void", "signature": "void invoke(Runnable r)", "full_signature": "public void invoke(Runnable r)", "class_method_signature": "ConstantFlowRegulator.invoke(Runnable r)", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(Runnable r, T result)", "modifiers": "public", "return": "T", "signature": "T invoke(Runnable r, T result)", "full_signature": "public T invoke(Runnable r, T result)", "class_method_signature": "ConstantFlowRegulator.invoke(Runnable r, T result)", "testcase": false, "constructor": false}, {"identifier": "canProceed", "parameters": "()", "modifiers": "protected synchronized", "return": "boolean", "signature": "boolean canProceed()", "full_signature": "protected synchronized boolean canProceed()", "class_method_signature": "ConstantFlowRegulator.canProceed()", "testcase": false, "constructor": false}, {"identifier": "setRequestPerSecondThreshold", "parameters": "(int i)", "modifiers": "public", "return": "void", "signature": "void setRequestPerSecondThreshold(int i)", "full_signature": "public void setRequestPerSecondThreshold(int i)", "class_method_signature": "ConstantFlowRegulator.setRequestPerSecondThreshold(int i)", "testcase": false, "constructor": false}, {"identifier": "getRequestPerSecondThreshold", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRequestPerSecondThreshold()", "full_signature": "public int getRequestPerSecondThreshold()", "class_method_signature": "ConstantFlowRegulator.getRequestPerSecondThreshold()", "testcase": false, "constructor": false}, {"identifier": "getExceptionMapper", "parameters": "()", "modifiers": "public", "return": "ConstantFlowRegulatorExceptionMapper<? extends Exception>", "signature": "ConstantFlowRegulatorExceptionMapper<? extends Exception> getExceptionMapper()", "full_signature": "public ConstantFlowRegulatorExceptionMapper<? extends Exception> getExceptionMapper()", "class_method_signature": "ConstantFlowRegulator.getExceptionMapper()", "testcase": false, "constructor": false}, {"identifier": "setExceptionMapper", "parameters": "(ConstantFlowRegulatorExceptionMapper<? extends Exception> mapper)", "modifiers": "public", "return": "void", "signature": "void setExceptionMapper(ConstantFlowRegulatorExceptionMapper<? extends Exception> mapper)", "full_signature": "public void setExceptionMapper(ConstantFlowRegulatorExceptionMapper<? extends Exception> mapper)", "class_method_signature": "ConstantFlowRegulator.setExceptionMapper(ConstantFlowRegulatorExceptionMapper<? extends Exception> mapper)", "testcase": false, "constructor": false}, {"identifier": "calculateDeltaWaitTime", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void calculateDeltaWaitTime()", "full_signature": "private void calculateDeltaWaitTime()", "class_method_signature": "ConstantFlowRegulator.calculateDeltaWaitTime()", "testcase": false, "constructor": false}, {"identifier": "mapException", "parameters": "(FlowRateExceededException e)", "modifiers": "private", "return": "Exception", "signature": "Exception mapException(FlowRateExceededException e)", "full_signature": "private Exception mapException(FlowRateExceededException e)", "class_method_signature": "ConstantFlowRegulator.mapException(FlowRateExceededException e)", "testcase": false, "constructor": false}], "file": "jrugged-core/src/main/java/org/fishwife/jrugged/ConstantFlowRegulator.java"}, "focal_method": {"identifier": "invoke", "parameters": "(Callable<T> c)", "modifiers": "public", "return": "T", "body": "public <T> T invoke(Callable<T> c) throws Exception {\n        if (canProceed()) {\n            return c.call();\n        }\n        else {\n            throw mapException(new FlowRateExceededException());\n        }\n    }", "signature": "T invoke(Callable<T> c)", "full_signature": "public T invoke(Callable<T> c)", "class_method_signature": "ConstantFlowRegulator.invoke(Callable<T> c)", "testcase": false, "constructor": false, "invocations": ["canProceed", "call", "mapException"]}, "repository": {"repo_id": 6602723, "url": "https://github.com/Comcast/jrugged", "language": "Java", "is_fork": false, "fork_count": 90, "stargazer_count": 236, "size": 1302, "license": "licensed"}}