{"test_class": {"identifier": "LangOpsTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/modules/common/src/test/java/org/onetwo/common/utils/LangOpsTest.java"}, "test_case": {"identifier": "testSum", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSum(){\n\t\tBigDecimal total = LangOps.sumBigDecimal(null, BigDecimalBox::getValue);\n\t\tAssert.assertEquals(BigDecimal.valueOf(0.0), total);\n\t\t\n\t\tList<BigDecimalBox> datas = Lists.newArrayList();\n\t\ttotal = LangOps.sumBigDecimal(datas, BigDecimalBox::getValue);\n\t\tAssert.assertEquals(BigDecimal.valueOf(0.0), total);\n\t\t\n\t\tdatas.add(new BigDecimalBox(1.5));\n\t\tdatas.add(new BigDecimalBox(3.5));\n\t\tdatas.add(new BigDecimalBox(5.0));\n\t\tdatas.add(new BigDecimalBox(5.0));\n\t\ttotal = LangOps.sumBigDecimal(datas, BigDecimalBox::getValue);\n\t\tAssert.assertEquals(BigDecimal.valueOf(15.0), total);\n\t}", "signature": "void testSum()", "full_signature": "@Test public void testSum()", "class_method_signature": "LangOpsTest.testSum()", "testcase": true, "constructor": false, "invocations": ["sumBigDecimal", "assertEquals", "valueOf", "newArrayList", "sumBigDecimal", "assertEquals", "valueOf", "add", "add", "add", "add", "sumBigDecimal", "assertEquals", "valueOf"]}, "focal_class": {"identifier": "LangOps", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "throwingMerger", "parameters": "()", "modifiers": "public static", "return": "BinaryOperator<T>", "signature": "BinaryOperator<T> throwingMerger()", "full_signature": "public static BinaryOperator<T> throwingMerger()", "class_method_signature": "LangOps.throwingMerger()", "testcase": false, "constructor": false}, {"identifier": "arrayToMap", "parameters": "(Object... arrays)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Map<K, V>", "signature": "Map<K, V> arrayToMap(Object... arrays)", "full_signature": "@SuppressWarnings(\"unchecked\") public static Map<K, V> arrayToMap(Object... arrays)", "class_method_signature": "LangOps.arrayToMap(Object... arrays)", "testcase": false, "constructor": false}, {"identifier": "kvArrayToMap", "parameters": "(K[] keys, V[] values)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Map<K, V>", "signature": "Map<K, V> kvArrayToMap(K[] keys, V[] values)", "full_signature": "@SuppressWarnings(\"unchecked\") public static Map<K, V> kvArrayToMap(K[] keys, V[] values)", "class_method_signature": "LangOps.kvArrayToMap(K[] keys, V[] values)", "testcase": false, "constructor": false}, {"identifier": "toMap", "parameters": "(List<V> data, Function<V, K> keyExtractor)", "modifiers": "public static", "return": "Map<K, V>", "signature": "Map<K, V> toMap(List<V> data, Function<V, K> keyExtractor)", "full_signature": "public static Map<K, V> toMap(List<V> data, Function<V, K> keyExtractor)", "class_method_signature": "LangOps.toMap(List<V> data, Function<V, K> keyExtractor)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(Map<?, ?> map)", "modifiers": "public static", "return": "Object[]", "signature": "Object[] toArray(Map<?, ?> map)", "full_signature": "public static Object[] toArray(Map<?, ?> map)", "class_method_signature": "LangOps.toArray(Map<?, ?> map)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(List<T> list, Function<? super T, ? extends R> mapper)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "R[]", "signature": "R[] toArray(List<T> list, Function<? super T, ? extends R> mapper)", "full_signature": "@SuppressWarnings(\"unchecked\") public static R[] toArray(List<T> list, Function<? super T, ? extends R> mapper)", "class_method_signature": "LangOps.toArray(List<T> list, Function<? super T, ? extends R> mapper)", "testcase": false, "constructor": false}, {"identifier": "generateMap", "parameters": "(Long count, Function<Long, ? extends R> mapper)", "modifiers": "public static", "return": "Map<Long, R>", "signature": "Map<Long, R> generateMap(Long count, Function<Long, ? extends R> mapper)", "full_signature": "public static Map<Long, R> generateMap(Long count, Function<Long, ? extends R> mapper)", "class_method_signature": "LangOps.generateMap(Long count, Function<Long, ? extends R> mapper)", "testcase": false, "constructor": false}, {"identifier": "generateList", "parameters": "(int count, Function<Integer, ? extends R> mapper)", "modifiers": "public static", "return": "List<R>", "signature": "List<R> generateList(int count, Function<Integer, ? extends R> mapper)", "full_signature": "public static List<R> generateList(int count, Function<Integer, ? extends R> mapper)", "class_method_signature": "LangOps.generateList(int count, Function<Integer, ? extends R> mapper)", "testcase": false, "constructor": false}, {"identifier": "generateList", "parameters": "(Long count, Function<Long, ? extends R> mapper)", "modifiers": "public static", "return": "List<R>", "signature": "List<R> generateList(Long count, Function<Long, ? extends R> mapper)", "full_signature": "public static List<R> generateList(Long count, Function<Long, ? extends R> mapper)", "class_method_signature": "LangOps.generateList(Long count, Function<Long, ? extends R> mapper)", "testcase": false, "constructor": false}, {"identifier": "splitTaskAndConsume", "parameters": "(List<T> taskList, int taskSize, Consumer<List<T>> subTaskDataConsumer, boolean parallel)", "modifiers": "public static", "return": "void", "signature": "void splitTaskAndConsume(List<T> taskList, int taskSize, Consumer<List<T>> subTaskDataConsumer, boolean parallel)", "full_signature": "public static void splitTaskAndConsume(List<T> taskList, int taskSize, Consumer<List<T>> subTaskDataConsumer, boolean parallel)", "class_method_signature": "LangOps.splitTaskAndConsume(List<T> taskList, int taskSize, Consumer<List<T>> subTaskDataConsumer, boolean parallel)", "testcase": false, "constructor": false}, {"identifier": "splitTaskAndConsume", "parameters": "(List<T> taskList, int taskSize, BiConsumer<List<T>, Integer> subTaskDataConsumer)", "modifiers": "public static", "return": "void", "signature": "void splitTaskAndConsume(List<T> taskList, int taskSize, BiConsumer<List<T>, Integer> subTaskDataConsumer)", "full_signature": "public static void splitTaskAndConsume(List<T> taskList, int taskSize, BiConsumer<List<T>, Integer> subTaskDataConsumer)", "class_method_signature": "LangOps.splitTaskAndConsume(List<T> taskList, int taskSize, BiConsumer<List<T>, Integer> subTaskDataConsumer)", "testcase": false, "constructor": false}, {"identifier": "splitTaskAndConsume", "parameters": "(List<T> taskList, int taskSize, BiConsumer<List<T>, Integer> subTaskDataConsumer, boolean parallel)", "modifiers": "public static", "return": "void", "signature": "void splitTaskAndConsume(List<T> taskList, int taskSize, BiConsumer<List<T>, Integer> subTaskDataConsumer, boolean parallel)", "full_signature": "public static void splitTaskAndConsume(List<T> taskList, int taskSize, BiConsumer<List<T>, Integer> subTaskDataConsumer, boolean parallel)", "class_method_signature": "LangOps.splitTaskAndConsume(List<T> taskList, int taskSize, BiConsumer<List<T>, Integer> subTaskDataConsumer, boolean parallel)", "testcase": false, "constructor": false}, {"identifier": "timeIt", "parameters": "(String tag, Integer times, Closure closure)", "modifiers": "public static", "return": "void", "signature": "void timeIt(String tag, Integer times, Closure closure)", "full_signature": "public static void timeIt(String tag, Integer times, Closure closure)", "class_method_signature": "LangOps.timeIt(String tag, Integer times, Closure closure)", "testcase": false, "constructor": false}, {"identifier": "ntimesRun", "parameters": "(Integer times, Closure closure)", "modifiers": "public static", "return": "void", "signature": "void ntimesRun(Integer times, Closure closure)", "full_signature": "public static void ntimesRun(Integer times, Closure closure)", "class_method_signature": "LangOps.ntimesRun(Integer times, Closure closure)", "testcase": false, "constructor": false}, {"identifier": "ntimesRun", "parameters": "(Integer times, Consumer<Integer> consumer)", "modifiers": "public static", "return": "void", "signature": "void ntimesRun(Integer times, Consumer<Integer> consumer)", "full_signature": "public static void ntimesRun(Integer times, Consumer<Integer> consumer)", "class_method_signature": "LangOps.ntimesRun(Integer times, Consumer<Integer> consumer)", "testcase": false, "constructor": false}, {"identifier": "ntimesRun", "parameters": "(String printTimeTag, Integer times, Closure closure)", "modifiers": "public static", "return": "void", "signature": "void ntimesRun(String printTimeTag, Integer times, Closure closure)", "full_signature": "public static void ntimesRun(String printTimeTag, Integer times, Closure closure)", "class_method_signature": "LangOps.ntimesRun(String printTimeTag, Integer times, Closure closure)", "testcase": false, "constructor": false}, {"identifier": "ntimesRun", "parameters": "(String printTimeTag, Integer times, Consumer<Integer> consumer)", "modifiers": "public static", "return": "void", "signature": "void ntimesRun(String printTimeTag, Integer times, Consumer<Integer> consumer)", "full_signature": "public static void ntimesRun(String printTimeTag, Integer times, Consumer<Integer> consumer)", "class_method_signature": "LangOps.ntimesRun(String printTimeTag, Integer times, Consumer<Integer> consumer)", "testcase": false, "constructor": false}, {"identifier": "ntimesMap", "parameters": "(Integer times, Function<Integer, R> mapper)", "modifiers": "public static", "return": "List<R>", "signature": "List<R> ntimesMap(Integer times, Function<Integer, R> mapper)", "full_signature": "public static List<R> ntimesMap(Integer times, Function<Integer, R> mapper)", "class_method_signature": "LangOps.ntimesMap(Integer times, Function<Integer, R> mapper)", "testcase": false, "constructor": false}, {"identifier": "sumBigDecimal", "parameters": "(List<T> datas, Function<T, BigDecimal> mapper)", "modifiers": "public static", "return": "BigDecimal", "signature": "BigDecimal sumBigDecimal(List<T> datas, Function<T, BigDecimal> mapper)", "full_signature": "public static BigDecimal sumBigDecimal(List<T> datas, Function<T, BigDecimal> mapper)", "class_method_signature": "LangOps.sumBigDecimal(List<T> datas, Function<T, BigDecimal> mapper)", "testcase": false, "constructor": false}, {"identifier": "groupByProperty", "parameters": "(List<T> datas, String propName)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Map<K, List<T>>", "signature": "Map<K, List<T>> groupByProperty(List<T> datas, String propName)", "full_signature": "@SuppressWarnings(\"unchecked\") public static Map<K, List<T>> groupByProperty(List<T> datas, String propName)", "class_method_signature": "LangOps.groupByProperty(List<T> datas, String propName)", "testcase": false, "constructor": false}, {"identifier": "groupByProperty", "parameters": "(List<T> datas, String keyProperty, String valueProperty)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Map<K, List<V>>", "signature": "Map<K, List<V>> groupByProperty(List<T> datas, String keyProperty, String valueProperty)", "full_signature": "@SuppressWarnings(\"unchecked\") public static Map<K, List<V>> groupByProperty(List<T> datas, String keyProperty, String valueProperty)", "class_method_signature": "LangOps.groupByProperty(List<T> datas, String keyProperty, String valueProperty)", "testcase": false, "constructor": false}, {"identifier": "groupBy", "parameters": "(List<T> datas, Function<? super T, ? extends K> keyer)", "modifiers": "public static", "return": "Map<K, List<T>>", "signature": "Map<K, List<T>> groupBy(List<T> datas, Function<? super T, ? extends K> keyer)", "full_signature": "public static Map<K, List<T>> groupBy(List<T> datas, Function<? super T, ? extends K> keyer)", "class_method_signature": "LangOps.groupBy(List<T> datas, Function<? super T, ? extends K> keyer)", "testcase": false, "constructor": false}, {"identifier": "groupBy", "parameters": "(List<T> datas, Function<? super T, ? extends K> keyer, Function<? super T, ? extends V> valuer)", "modifiers": "public static", "return": "Map<K, List<V>>", "signature": "Map<K, List<V>> groupBy(List<T> datas, Function<? super T, ? extends K> keyer, Function<? super T, ? extends V> valuer)", "full_signature": "public static Map<K, List<V>> groupBy(List<T> datas, Function<? super T, ? extends K> keyer, Function<? super T, ? extends V> valuer)", "class_method_signature": "LangOps.groupBy(List<T> datas, Function<? super T, ? extends K> keyer, Function<? super T, ? extends V> valuer)", "testcase": false, "constructor": false}, {"identifier": "parseSize", "parameters": "(String size)", "modifiers": "public static", "return": "int", "signature": "int parseSize(String size)", "full_signature": "public static int parseSize(String size)", "class_method_signature": "LangOps.parseSize(String size)", "testcase": false, "constructor": false}, {"identifier": "parseSize", "parameters": "(String size, Integer def)", "modifiers": "public static", "return": "int", "signature": "int parseSize(String size, Integer def)", "full_signature": "public static int parseSize(String size, Integer def)", "class_method_signature": "LangOps.parseSize(String size, Integer def)", "testcase": false, "constructor": false}, {"identifier": "timeToSeconds", "parameters": "(String time, long def)", "modifiers": "public static", "return": "long", "signature": "long timeToSeconds(String time, long def)", "full_signature": "public static long timeToSeconds(String time, long def)", "class_method_signature": "LangOps.timeToSeconds(String time, long def)", "testcase": false, "constructor": false}, {"identifier": "timeToMills", "parameters": "(String time, long def)", "modifiers": "public static", "return": "long", "signature": "long timeToMills(String time, long def)", "full_signature": "public static long timeToMills(String time, long def)", "class_method_signature": "LangOps.timeToMills(String time, long def)", "testcase": false, "constructor": false}, {"identifier": "timeToMinutes", "parameters": "(String time, long def)", "modifiers": "public static", "return": "long", "signature": "long timeToMinutes(String time, long def)", "full_signature": "public static long timeToMinutes(String time, long def)", "class_method_signature": "LangOps.timeToMinutes(String time, long def)", "testcase": false, "constructor": false}, {"identifier": "parseTime", "parameters": "(String time, long def, BiFunction<Integer, TimeUnit, Long> convert)", "modifiers": "public static", "return": "long", "signature": "long parseTime(String time, long def, BiFunction<Integer, TimeUnit, Long> convert)", "full_signature": "public static long parseTime(String time, long def, BiFunction<Integer, TimeUnit, Long> convert)", "class_method_signature": "LangOps.parseTime(String time, long def, BiFunction<Integer, TimeUnit, Long> convert)", "testcase": false, "constructor": false}, {"identifier": "parseTimeUnit", "parameters": "(String time)", "modifiers": "public static", "return": "Pair<Integer, TimeUnit>", "signature": "Pair<Integer, TimeUnit> parseTimeUnit(String time)", "full_signature": "public static Pair<Integer, TimeUnit> parseTimeUnit(String time)", "class_method_signature": "LangOps.parseTimeUnit(String time)", "testcase": false, "constructor": false}, {"identifier": "parseColor", "parameters": "(String color)", "modifiers": "static public", "return": "Color", "signature": "Color parseColor(String color)", "full_signature": "static public Color parseColor(String color)", "class_method_signature": "LangOps.parseColor(String color)", "testcase": false, "constructor": false}, {"identifier": "asList", "parameters": "(T...values)", "modifiers": "@SafeVarargs public static", "return": "List<T>", "signature": "List<T> asList(T...values)", "full_signature": "@SafeVarargs public static List<T> asList(T...values)", "class_method_signature": "LangOps.asList(T...values)", "testcase": false, "constructor": false}, {"identifier": "LangOps", "parameters": "()", "modifiers": "private", "return": "", "signature": " LangOps()", "full_signature": "private  LangOps()", "class_method_signature": "LangOps.LangOps()", "testcase": false, "constructor": true}], "file": "core/modules/common/src/main/java/org/onetwo/common/utils/LangOps.java"}, "focal_method": {"identifier": "sumBigDecimal", "parameters": "(List<T> datas, Function<T, BigDecimal> mapper)", "modifiers": "public static", "return": "BigDecimal", "body": "public static <T> BigDecimal sumBigDecimal(List<T> datas, Function<T, BigDecimal> mapper){\n\t\tif(datas==null)\n\t\t\treturn BigDecimal.valueOf(0.0);\n\t\treturn datas.stream().map(mapper).reduce((n1, n2)->{\n\t\t\treturn n1.add(n2);\n\t\t})\n\t\t.orElse(BigDecimal.valueOf(0.0));\n\t}", "signature": "BigDecimal sumBigDecimal(List<T> datas, Function<T, BigDecimal> mapper)", "full_signature": "public static BigDecimal sumBigDecimal(List<T> datas, Function<T, BigDecimal> mapper)", "class_method_signature": "LangOps.sumBigDecimal(List<T> datas, Function<T, BigDecimal> mapper)", "testcase": false, "constructor": false, "invocations": ["valueOf", "orElse", "reduce", "map", "stream", "add", "valueOf"]}, "repository": {"repo_id": 47802308, "url": "https://github.com/wayshall/onetwo", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 16, "size": 57582, "license": "licensed"}}