{"test_class": {"identifier": "JmxRegistryServiceImplTest", "superclass": "", "interfaces": "", "fields": [], "file": "fdb-sql-layer-core/src/test/java/com/foundationdb/server/service/jmx/JmxRegistryServiceImplTest.java"}, "test_case": {"identifier": "registerNameTwice", "parameters": "()", "modifiers": "@Test(expected=JmxRegistrationException.class) public", "return": "void", "body": "@Test(expected=JmxRegistrationException.class)\n    public void registerNameTwice() {\n        final MockedJmxRegistry service;\n        try {\n            service = new MockedJmxRegistry();\n            assertRegisteredServices(service);\n            service.register(new GoodService(\"Alpha\"));\n        } catch (Throwable t) {\n            throw new RuntimeException(t);\n        }\n\n        service.register(new GoodService(\"Alpha\"));\n    }", "signature": "void registerNameTwice()", "full_signature": "@Test(expected=JmxRegistrationException.class) public void registerNameTwice()", "class_method_signature": "JmxRegistryServiceImplTest.registerNameTwice()", "testcase": true, "constructor": false, "invocations": ["assertRegisteredServices", "register", "register"]}, "focal_class": {"identifier": "JmxRegistryServiceImpl", "superclass": "", "interfaces": "implements JmxRegistryService, JmxManageable, Service", "fields": [{"original_string": "private static final String FORMATTER = \"com.foundationdb:type=%s\";", "modifier": "private static final", "type": "String", "declarator": "FORMATTER = \"com.foundationdb:type=%s\"", "var_name": "FORMATTER"}, {"original_string": "private boolean started = false;", "modifier": "private", "type": "boolean", "declarator": "started = false", "var_name": "started"}, {"original_string": "private final Map<JmxManageable,ObjectName> serviceToName = new HashMap<>();", "modifier": "private final", "type": "Map<JmxManageable,ObjectName>", "declarator": "serviceToName = new HashMap<>()", "var_name": "serviceToName"}, {"original_string": "private final Map<ObjectName,JmxManageable> nameToService = new HashMap<>();", "modifier": "private final", "type": "Map<ObjectName,JmxManageable>", "declarator": "nameToService = new HashMap<>()", "var_name": "nameToService"}, {"original_string": "private final Object INTERNAL_LOCK = new Object();", "modifier": "private final", "type": "Object", "declarator": "INTERNAL_LOCK = new Object()", "var_name": "INTERNAL_LOCK"}], "methods": [{"identifier": "addService", "parameters": "(ObjectName objectName, JmxManageable service)", "modifiers": "private", "return": "void", "signature": "void addService(ObjectName objectName, JmxManageable service)", "full_signature": "private void addService(ObjectName objectName, JmxManageable service)", "class_method_signature": "JmxRegistryServiceImpl.addService(ObjectName objectName, JmxManageable service)", "testcase": false, "constructor": false}, {"identifier": "removeService", "parameters": "(ObjectName objectName)", "modifiers": "private", "return": "void", "signature": "void removeService(ObjectName objectName)", "full_signature": "private void removeService(ObjectName objectName)", "class_method_signature": "JmxRegistryServiceImpl.removeService(ObjectName objectName)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(JmxManageable service)", "modifiers": "@Override public", "return": "ObjectName", "signature": "ObjectName register(JmxManageable service)", "full_signature": "@Override public ObjectName register(JmxManageable service)", "class_method_signature": "JmxRegistryServiceImpl.register(JmxManageable service)", "testcase": false, "constructor": false}, {"identifier": "getMBeanServer", "parameters": "()", "modifiers": "protected", "return": "MBeanServer", "signature": "MBeanServer getMBeanServer()", "full_signature": "protected MBeanServer getMBeanServer()", "class_method_signature": "JmxRegistryServiceImpl.getMBeanServer()", "testcase": false, "constructor": false}, {"identifier": "getObjectName", "parameters": "(String serviceName, Set<ObjectName> uniquenessSet)", "modifiers": "private", "return": "ObjectName", "signature": "ObjectName getObjectName(String serviceName, Set<ObjectName> uniquenessSet)", "full_signature": "private ObjectName getObjectName(String serviceName, Set<ObjectName> uniquenessSet)", "class_method_signature": "JmxRegistryServiceImpl.getObjectName(String serviceName, Set<ObjectName> uniquenessSet)", "testcase": false, "constructor": false}, {"identifier": "unregister", "parameters": "(String objectNameString)", "modifiers": "@Override public", "return": "void", "signature": "void unregister(String objectNameString)", "full_signature": "@Override public void unregister(String objectNameString)", "class_method_signature": "JmxRegistryServiceImpl.unregister(String objectNameString)", "testcase": false, "constructor": false}, {"identifier": "unregister", "parameters": "(ObjectName registeredObject)", "modifiers": "@Override public", "return": "void", "signature": "void unregister(ObjectName registeredObject)", "full_signature": "@Override public void unregister(ObjectName registeredObject)", "class_method_signature": "JmxRegistryServiceImpl.unregister(ObjectName registeredObject)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "JmxRegistryServiceImpl.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stop()", "full_signature": "@Override public void stop()", "class_method_signature": "JmxRegistryServiceImpl.stop()", "testcase": false, "constructor": false}, {"identifier": "crash", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void crash()", "full_signature": "@Override public void crash()", "class_method_signature": "JmxRegistryServiceImpl.crash()", "testcase": false, "constructor": false}, {"identifier": "getJmxObjectInfo", "parameters": "()", "modifiers": "@Override public", "return": "JmxObjectInfo", "signature": "JmxObjectInfo getJmxObjectInfo()", "full_signature": "@Override public JmxObjectInfo getJmxObjectInfo()", "class_method_signature": "JmxRegistryServiceImpl.getJmxObjectInfo()", "testcase": false, "constructor": false}, {"identifier": "isManagable", "parameters": "(Class<?> theInterface)", "modifiers": "private static", "return": "boolean", "signature": "boolean isManagable(Class<?> theInterface)", "full_signature": "private static boolean isManagable(Class<?> theInterface)", "class_method_signature": "JmxRegistryServiceImpl.isManagable(Class<?> theInterface)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(JmxObjectInfo objectInfo)", "modifiers": "", "return": "void", "signature": "void validate(JmxObjectInfo objectInfo)", "full_signature": " void validate(JmxObjectInfo objectInfo)", "class_method_signature": "JmxRegistryServiceImpl.validate(JmxObjectInfo objectInfo)", "testcase": false, "constructor": false}, {"identifier": "getAllInterfaces", "parameters": "(Class<?> root, Set<Class<?>> set)", "modifiers": "private static", "return": "Set<Class<?>>", "signature": "Set<Class<?>> getAllInterfaces(Class<?> root, Set<Class<?>> set)", "full_signature": "private static Set<Class<?>> getAllInterfaces(Class<?> root, Set<Class<?>> set)", "class_method_signature": "JmxRegistryServiceImpl.getAllInterfaces(Class<?> root, Set<Class<?>> set)", "testcase": false, "constructor": false}, {"identifier": "getAllInterfaces", "parameters": "(Class<?>[] roots, Set<Class<?>> set)", "modifiers": "private static", "return": "void", "signature": "void getAllInterfaces(Class<?>[] roots, Set<Class<?>> set)", "full_signature": "private static void getAllInterfaces(Class<?>[] roots, Set<Class<?>> set)", "class_method_signature": "JmxRegistryServiceImpl.getAllInterfaces(Class<?>[] roots, Set<Class<?>> set)", "testcase": false, "constructor": false}], "file": "fdb-sql-layer-core/src/main/java/com/foundationdb/server/service/jmx/JmxRegistryServiceImpl.java"}, "focal_method": {"identifier": "register", "parameters": "(JmxManageable service)", "modifiers": "@Override public", "return": "ObjectName", "body": "@Override\n    public ObjectName register(JmxManageable service) {\n        final JmxObjectInfo info = service.getJmxObjectInfo();\n        validate(info);\n        String serviceName = info.getObjectName();\n        if (!serviceName.matches(\"[\\\\w-]+\")) {\n            throw new JmxRegistrationException(service.getClass(), serviceName);\n        }\n        final ObjectName objectName;\n        synchronized (INTERNAL_LOCK) {\n            if (serviceToName.containsKey(service)) {\n                throw new JmxRegistrationException(\"Already registered instance of \" + service.getClass());\n            }\n            objectName = getObjectName(serviceName, nameToService.keySet());\n            addService(objectName, service);\n\n            if (started) {\n                try {\n                    getMBeanServer().registerMBean(info.getInstance(), objectName);\n                    return objectName;\n                }\n                catch (Exception e) {\n                    removeService(objectName);\n                    throw new JmxRegistrationException(e);\n                }\n            }\n            else {\n                return objectName;\n            }\n        }\n    }", "signature": "ObjectName register(JmxManageable service)", "full_signature": "@Override public ObjectName register(JmxManageable service)", "class_method_signature": "JmxRegistryServiceImpl.register(JmxManageable service)", "testcase": false, "constructor": false, "invocations": ["getJmxObjectInfo", "validate", "getObjectName", "matches", "getClass", "containsKey", "getClass", "getObjectName", "keySet", "addService", "registerMBean", "getMBeanServer", "getInstance", "removeService"]}, "repository": {"repo_id": 32884360, "url": "https://github.com/jaytaylor/sql-layer", "language": "Java", "is_fork": false, "fork_count": 120, "stargazer_count": 77, "size": 138665, "license": "licensed"}}