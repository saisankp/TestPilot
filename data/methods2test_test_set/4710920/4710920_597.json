{"test_class": {"identifier": "UrlUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "String localAddress = \"127.0.0.1\";", "modifier": "", "type": "String", "declarator": "localAddress = \"127.0.0.1\"", "var_name": "localAddress"}], "file": "dubbo-common/src/test/java/org/apache/dubbo/common/utils/UrlUtilsTest.java"}, "test_case": {"identifier": "testParseURLWithSpecial", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseURLWithSpecial() {\n        String address = \"127.0.0.1:2181?backup=127.0.0.1:2182,127.0.0.1:2183\";\n        assertEquals(\"dubbo://\" + address, UrlUtils.parseURL(address, null).toString());\n    }", "signature": "void testParseURLWithSpecial()", "full_signature": "@Test public void testParseURLWithSpecial()", "class_method_signature": "UrlUtilsTest.testParseURLWithSpecial()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toString", "parseURL"]}, "focal_class": {"identifier": "UrlUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static String URL_PARAM_STARTING_SYMBOL = \"?\";", "modifier": "private final static", "type": "String", "declarator": "URL_PARAM_STARTING_SYMBOL = \"?\"", "var_name": "URL_PARAM_STARTING_SYMBOL"}], "methods": [{"identifier": "parseURL", "parameters": "(String address, Map<String, String> defaults)", "modifiers": "public static", "return": "URL", "signature": "URL parseURL(String address, Map<String, String> defaults)", "full_signature": "public static URL parseURL(String address, Map<String, String> defaults)", "class_method_signature": "UrlUtils.parseURL(String address, Map<String, String> defaults)", "testcase": false, "constructor": false}, {"identifier": "parseURLs", "parameters": "(String address, Map<String, String> defaults)", "modifiers": "public static", "return": "List<URL>", "signature": "List<URL> parseURLs(String address, Map<String, String> defaults)", "full_signature": "public static List<URL> parseURLs(String address, Map<String, String> defaults)", "class_method_signature": "UrlUtils.parseURLs(String address, Map<String, String> defaults)", "testcase": false, "constructor": false}, {"identifier": "convertRegister", "parameters": "(Map<String, Map<String, String>> register)", "modifiers": "public static", "return": "Map<String, Map<String, String>>", "signature": "Map<String, Map<String, String>> convertRegister(Map<String, Map<String, String>> register)", "full_signature": "public static Map<String, Map<String, String>> convertRegister(Map<String, Map<String, String>> register)", "class_method_signature": "UrlUtils.convertRegister(Map<String, Map<String, String>> register)", "testcase": false, "constructor": false}, {"identifier": "convertSubscribe", "parameters": "(Map<String, String> subscribe)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> convertSubscribe(Map<String, String> subscribe)", "full_signature": "public static Map<String, String> convertSubscribe(Map<String, String> subscribe)", "class_method_signature": "UrlUtils.convertSubscribe(Map<String, String> subscribe)", "testcase": false, "constructor": false}, {"identifier": "revertRegister", "parameters": "(Map<String, Map<String, String>> register)", "modifiers": "public static", "return": "Map<String, Map<String, String>>", "signature": "Map<String, Map<String, String>> revertRegister(Map<String, Map<String, String>> register)", "full_signature": "public static Map<String, Map<String, String>> revertRegister(Map<String, Map<String, String>> register)", "class_method_signature": "UrlUtils.revertRegister(Map<String, Map<String, String>> register)", "testcase": false, "constructor": false}, {"identifier": "revertSubscribe", "parameters": "(Map<String, String> subscribe)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> revertSubscribe(Map<String, String> subscribe)", "full_signature": "public static Map<String, String> revertSubscribe(Map<String, String> subscribe)", "class_method_signature": "UrlUtils.revertSubscribe(Map<String, String> subscribe)", "testcase": false, "constructor": false}, {"identifier": "revertNotify", "parameters": "(Map<String, Map<String, String>> notify)", "modifiers": "public static", "return": "Map<String, Map<String, String>>", "signature": "Map<String, Map<String, String>> revertNotify(Map<String, Map<String, String>> notify)", "full_signature": "public static Map<String, Map<String, String>> revertNotify(Map<String, Map<String, String>> notify)", "class_method_signature": "UrlUtils.revertNotify(Map<String, Map<String, String>> notify)", "testcase": false, "constructor": false}, {"identifier": "revertForbid", "parameters": "(List<String> forbid, Set<URL> subscribed)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> revertForbid(List<String> forbid, Set<URL> subscribed)", "full_signature": "public static List<String> revertForbid(List<String> forbid, Set<URL> subscribed)", "class_method_signature": "UrlUtils.revertForbid(List<String> forbid, Set<URL> subscribed)", "testcase": false, "constructor": false}, {"identifier": "getEmptyUrl", "parameters": "(String service, String category)", "modifiers": "public static", "return": "URL", "signature": "URL getEmptyUrl(String service, String category)", "full_signature": "public static URL getEmptyUrl(String service, String category)", "class_method_signature": "UrlUtils.getEmptyUrl(String service, String category)", "testcase": false, "constructor": false}, {"identifier": "isMatchCategory", "parameters": "(String category, String categories)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMatchCategory(String category, String categories)", "full_signature": "public static boolean isMatchCategory(String category, String categories)", "class_method_signature": "UrlUtils.isMatchCategory(String category, String categories)", "testcase": false, "constructor": false}, {"identifier": "isMatch", "parameters": "(URL consumerUrl, URL providerUrl)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMatch(URL consumerUrl, URL providerUrl)", "full_signature": "public static boolean isMatch(URL consumerUrl, URL providerUrl)", "class_method_signature": "UrlUtils.isMatch(URL consumerUrl, URL providerUrl)", "testcase": false, "constructor": false}, {"identifier": "isMatchGlobPattern", "parameters": "(String pattern, String value, URL param)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMatchGlobPattern(String pattern, String value, URL param)", "full_signature": "public static boolean isMatchGlobPattern(String pattern, String value, URL param)", "class_method_signature": "UrlUtils.isMatchGlobPattern(String pattern, String value, URL param)", "testcase": false, "constructor": false}, {"identifier": "isMatchGlobPattern", "parameters": "(String pattern, String value)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMatchGlobPattern(String pattern, String value)", "full_signature": "public static boolean isMatchGlobPattern(String pattern, String value)", "class_method_signature": "UrlUtils.isMatchGlobPattern(String pattern, String value)", "testcase": false, "constructor": false}, {"identifier": "isServiceKeyMatch", "parameters": "(URL pattern, URL value)", "modifiers": "public static", "return": "boolean", "signature": "boolean isServiceKeyMatch(URL pattern, URL value)", "full_signature": "public static boolean isServiceKeyMatch(URL pattern, URL value)", "class_method_signature": "UrlUtils.isServiceKeyMatch(URL pattern, URL value)", "testcase": false, "constructor": false}, {"identifier": "classifyUrls", "parameters": "(List<URL> urls, Predicate<URL> predicate)", "modifiers": "public static", "return": "List<URL>", "signature": "List<URL> classifyUrls(List<URL> urls, Predicate<URL> predicate)", "full_signature": "public static List<URL> classifyUrls(List<URL> urls, Predicate<URL> predicate)", "class_method_signature": "UrlUtils.classifyUrls(List<URL> urls, Predicate<URL> predicate)", "testcase": false, "constructor": false}, {"identifier": "isConfigurator", "parameters": "(URL url)", "modifiers": "public static", "return": "boolean", "signature": "boolean isConfigurator(URL url)", "full_signature": "public static boolean isConfigurator(URL url)", "class_method_signature": "UrlUtils.isConfigurator(URL url)", "testcase": false, "constructor": false}, {"identifier": "isRoute", "parameters": "(URL url)", "modifiers": "public static", "return": "boolean", "signature": "boolean isRoute(URL url)", "full_signature": "public static boolean isRoute(URL url)", "class_method_signature": "UrlUtils.isRoute(URL url)", "testcase": false, "constructor": false}, {"identifier": "isProvider", "parameters": "(URL url)", "modifiers": "public static", "return": "boolean", "signature": "boolean isProvider(URL url)", "full_signature": "public static boolean isProvider(URL url)", "class_method_signature": "UrlUtils.isProvider(URL url)", "testcase": false, "constructor": false}, {"identifier": "isRegistry", "parameters": "(URL url)", "modifiers": "public static", "return": "boolean", "signature": "boolean isRegistry(URL url)", "full_signature": "public static boolean isRegistry(URL url)", "class_method_signature": "UrlUtils.isRegistry(URL url)", "testcase": false, "constructor": false}, {"identifier": "isServiceDiscoveryRegistryType", "parameters": "(URL url)", "modifiers": "public static", "return": "boolean", "signature": "boolean isServiceDiscoveryRegistryType(URL url)", "full_signature": "public static boolean isServiceDiscoveryRegistryType(URL url)", "class_method_signature": "UrlUtils.isServiceDiscoveryRegistryType(URL url)", "testcase": false, "constructor": false}, {"identifier": "isServiceDiscoveryRegistryType", "parameters": "(Map<String, String> parameters)", "modifiers": "public static", "return": "boolean", "signature": "boolean isServiceDiscoveryRegistryType(Map<String, String> parameters)", "full_signature": "public static boolean isServiceDiscoveryRegistryType(Map<String, String> parameters)", "class_method_signature": "UrlUtils.isServiceDiscoveryRegistryType(Map<String, String> parameters)", "testcase": false, "constructor": false}, {"identifier": "isItemMatch", "parameters": "(String pattern, String value)", "modifiers": "static", "return": "boolean", "signature": "boolean isItemMatch(String pattern, String value)", "full_signature": "static boolean isItemMatch(String pattern, String value)", "class_method_signature": "UrlUtils.isItemMatch(String pattern, String value)", "testcase": false, "constructor": false}, {"identifier": "parseServiceKey", "parameters": "(String serviceKey)", "modifiers": "public static", "return": "String[]", "signature": "String[] parseServiceKey(String serviceKey)", "full_signature": "public static String[] parseServiceKey(String serviceKey)", "class_method_signature": "UrlUtils.parseServiceKey(String serviceKey)", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/UrlUtils.java"}, "focal_method": {"identifier": "parseURL", "parameters": "(String address, Map<String, String> defaults)", "modifiers": "public static", "return": "URL", "body": "public static URL parseURL(String address, Map<String, String> defaults) {\n        if (address == null || address.length() == 0) {\n            return null;\n        }\n        String url;\n        if (address.contains(\"://\") || address.contains(URL_PARAM_STARTING_SYMBOL)) {\n            url = address;\n        } else {\n            String[] addresses = COMMA_SPLIT_PATTERN.split(address);\n            url = addresses[0];\n            if (addresses.length > 1) {\n                StringBuilder backup = new StringBuilder();\n                for (int i = 1; i < addresses.length; i++) {\n                    if (i > 1) {\n                        backup.append(',');\n                    }\n                    backup.append(addresses[i]);\n                }\n                url += URL_PARAM_STARTING_SYMBOL + RemotingConstants.BACKUP_KEY + \"=\" + backup.toString();\n            }\n        }\n        String defaultProtocol = defaults == null ? null : defaults.get(PROTOCOL_KEY);\n        if (defaultProtocol == null || defaultProtocol.length() == 0) {\n            defaultProtocol = DUBBO_PROTOCOL;\n        }\n        String defaultUsername = defaults == null ? null : defaults.get(USERNAME_KEY);\n        String defaultPassword = defaults == null ? null : defaults.get(PASSWORD_KEY);\n        int defaultPort = StringUtils.parseInteger(defaults == null ? null : defaults.get(PORT_KEY));\n        String defaultPath = defaults == null ? null : defaults.get(PATH_KEY);\n        Map<String, String> defaultParameters = defaults == null ? null : new HashMap<>(defaults);\n        if (defaultParameters != null) {\n            defaultParameters.remove(PROTOCOL_KEY);\n            defaultParameters.remove(USERNAME_KEY);\n            defaultParameters.remove(PASSWORD_KEY);\n            defaultParameters.remove(HOST_KEY);\n            defaultParameters.remove(PORT_KEY);\n            defaultParameters.remove(PATH_KEY);\n        }\n        URL u = URL.valueOf(url);\n        boolean changed = false;\n        String protocol = u.getProtocol();\n        String username = u.getUsername();\n        String password = u.getPassword();\n        String host = u.getHost();\n        int port = u.getPort();\n        String path = u.getPath();\n        Map<String, String> parameters = new HashMap<>(u.getParameters());\n        if (protocol == null || protocol.length() == 0) {\n            changed = true;\n            protocol = defaultProtocol;\n        }\n        if ((username == null || username.length() == 0) && defaultUsername != null && defaultUsername.length() > 0) {\n            changed = true;\n            username = defaultUsername;\n        }\n        if ((password == null || password.length() == 0) && defaultPassword != null && defaultPassword.length() > 0) {\n            changed = true;\n            password = defaultPassword;\n        }\n        /*if (u.isAnyHost() || u.isLocalHost()) {\n            changed = true;\n            host = NetUtils.getLocalHost();\n        }*/\n        if (port <= 0) {\n            if (defaultPort > 0) {\n                changed = true;\n                port = defaultPort;\n            } else {\n                changed = true;\n                port = 9090;\n            }\n        }\n        if (path == null || path.length() == 0) {\n            if (defaultPath != null && defaultPath.length() > 0) {\n                changed = true;\n                path = defaultPath;\n            }\n        }\n        if (defaultParameters != null && defaultParameters.size() > 0) {\n            for (Map.Entry<String, String> entry : defaultParameters.entrySet()) {\n                String key = entry.getKey();\n                String defaultValue = entry.getValue();\n                if (defaultValue != null && defaultValue.length() > 0) {\n                    String value = parameters.get(key);\n                    if (StringUtils.isEmpty(value)) {\n                        changed = true;\n                        parameters.put(key, defaultValue);\n                    }\n                }\n            }\n        }\n        if (changed) {\n            u = new URL(protocol, username, password, host, port, path, parameters);\n        }\n        return u;\n    }", "signature": "URL parseURL(String address, Map<String, String> defaults)", "full_signature": "public static URL parseURL(String address, Map<String, String> defaults)", "class_method_signature": "UrlUtils.parseURL(String address, Map<String, String> defaults)", "testcase": false, "constructor": false, "invocations": ["length", "contains", "contains", "split", "append", "append", "toString", "get", "length", "get", "get", "parseInteger", "get", "get", "remove", "remove", "remove", "remove", "remove", "remove", "valueOf", "getProtocol", "getUsername", "getPassword", "getHost", "getPort", "getPath", "getParameters", "length", "length", "length", "length", "length", "length", "length", "size", "entrySet", "getKey", "getValue", "length", "get", "isEmpty", "put"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}