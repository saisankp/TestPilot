{"test_class": {"identifier": "WriteBufferTest", "superclass": "", "interfaces": "", "fields": [], "file": "brave/src/test/java/brave/internal/codec/WriteBufferTest.java"}, "test_case": {"identifier": "utf8SizeInBytes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void utf8SizeInBytes() {\n    for (int codepoint = 0; codepoint <= 0x10FFFF; codepoint++) {\n      if (codepoint == 0xD800) codepoint = 0xDFFF + 1; // skip surrogates\n      if (Character.isDefined(codepoint)) {\n        String test = new String(Character.toChars(codepoint));\n        int expected = test.getBytes(UTF_8).length;\n        int actual = WriteBuffer.utf8SizeInBytes(test);\n        if (actual != expected) {\n          throw new AssertionError(actual + \" length != \" + expected + \" for \" + codepoint);\n        }\n      }\n    }\n  }", "signature": "void utf8SizeInBytes()", "full_signature": "@Test public void utf8SizeInBytes()", "class_method_signature": "WriteBufferTest.utf8SizeInBytes()", "testcase": true, "constructor": false, "invocations": ["isDefined", "toChars", "getBytes", "utf8SizeInBytes"]}, "focal_class": {"identifier": "WriteBuffer", "superclass": "", "interfaces": "", "fields": [{"original_string": "final byte[] buf;", "modifier": "final", "type": "byte[]", "declarator": "buf", "var_name": "buf"}, {"original_string": "int pos;", "modifier": "", "type": "int", "declarator": "pos", "var_name": "pos"}], "methods": [{"identifier": "wrap", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "WriteBuffer", "signature": "WriteBuffer wrap(byte[] bytes)", "full_signature": "public static WriteBuffer wrap(byte[] bytes)", "class_method_signature": "WriteBuffer.wrap(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "wrap", "parameters": "(byte[] bytes, int pos)", "modifiers": "public static", "return": "WriteBuffer", "signature": "WriteBuffer wrap(byte[] bytes, int pos)", "full_signature": "public static WriteBuffer wrap(byte[] bytes, int pos)", "class_method_signature": "WriteBuffer.wrap(byte[] bytes, int pos)", "testcase": false, "constructor": false}, {"identifier": "WriteBuffer", "parameters": "(byte[] buf, int pos)", "modifiers": "", "return": "", "signature": " WriteBuffer(byte[] buf, int pos)", "full_signature": "  WriteBuffer(byte[] buf, int pos)", "class_method_signature": "WriteBuffer.WriteBuffer(byte[] buf, int pos)", "testcase": false, "constructor": true}, {"identifier": "writeByte", "parameters": "(int v)", "modifiers": "public", "return": "void", "signature": "void writeByte(int v)", "full_signature": "public void writeByte(int v)", "class_method_signature": "WriteBuffer.writeByte(int v)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(byte[] v)", "modifiers": "public", "return": "void", "signature": "void write(byte[] v)", "full_signature": "public void write(byte[] v)", "class_method_signature": "WriteBuffer.write(byte[] v)", "testcase": false, "constructor": false}, {"identifier": "writeBackwards", "parameters": "(long v)", "modifiers": "", "return": "void", "signature": "void writeBackwards(long v)", "full_signature": " void writeBackwards(long v)", "class_method_signature": "WriteBuffer.writeBackwards(long v)", "testcase": false, "constructor": false}, {"identifier": "pos", "parameters": "()", "modifiers": "final", "return": "int", "signature": "int pos()", "full_signature": "final int pos()", "class_method_signature": "WriteBuffer.pos()", "testcase": false, "constructor": false}, {"identifier": "writeAscii", "parameters": "(String v)", "modifiers": "public", "return": "void", "signature": "void writeAscii(String v)", "full_signature": "public void writeAscii(String v)", "class_method_signature": "WriteBuffer.writeAscii(String v)", "testcase": false, "constructor": false}, {"identifier": "writeUtf8", "parameters": "(CharSequence string)", "modifiers": "public", "return": "void", "signature": "void writeUtf8(CharSequence string)", "full_signature": "public void writeUtf8(CharSequence string)", "class_method_signature": "WriteBuffer.writeUtf8(CharSequence string)", "testcase": false, "constructor": false}, {"identifier": "writeUtf8", "parameters": "(CharSequence string, int fromIndex, int toIndex)", "modifiers": "public", "return": "void", "signature": "void writeUtf8(CharSequence string, int fromIndex, int toIndex)", "full_signature": "public void writeUtf8(CharSequence string, int fromIndex, int toIndex)", "class_method_signature": "WriteBuffer.writeUtf8(CharSequence string, int fromIndex, int toIndex)", "testcase": false, "constructor": false}, {"identifier": "writeAscii", "parameters": "(long v)", "modifiers": "public", "return": "void", "signature": "void writeAscii(long v)", "full_signature": "public void writeAscii(long v)", "class_method_signature": "WriteBuffer.writeAscii(long v)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "WriteBuffer.toString()", "testcase": false, "constructor": false}, {"identifier": "utf8SizeInBytes", "parameters": "(CharSequence string)", "modifiers": "public static", "return": "int", "signature": "int utf8SizeInBytes(CharSequence string)", "full_signature": "public static int utf8SizeInBytes(CharSequence string)", "class_method_signature": "WriteBuffer.utf8SizeInBytes(CharSequence string)", "testcase": false, "constructor": false}, {"identifier": "asciiSizeInBytes", "parameters": "(long v)", "modifiers": "public static", "return": "int", "signature": "int asciiSizeInBytes(long v)", "full_signature": "public static int asciiSizeInBytes(long v)", "class_method_signature": "WriteBuffer.asciiSizeInBytes(long v)", "testcase": false, "constructor": false}], "file": "brave/src/main/java/brave/internal/codec/WriteBuffer.java"}, "focal_method": {"identifier": "utf8SizeInBytes", "parameters": "(CharSequence string)", "modifiers": "public static", "return": "int", "body": "public static int utf8SizeInBytes(CharSequence string) {\n    int sizeInBytes = 0;\n    for (int i = 0, len = string.length(); i < len; i++) {\n      char ch = string.charAt(i);\n      if (ch < 0x80) {\n        sizeInBytes++; // 7-bit ASCII character\n        // This could be an ASCII run, or possibly entirely ASCII\n        while (i < len - 1) {\n          ch = string.charAt(i + 1);\n          if (ch >= 0x80) break;\n          i++;\n          sizeInBytes++; // another 7-bit ASCII character\n        }\n      } else if (ch < 0x800) {\n        sizeInBytes += 2; // 11-bit character\n      } else if (ch < 0xd800 || ch > 0xdfff) {\n        sizeInBytes += 3; // 16-bit character\n      } else {\n        int low = i + 1 < len ? string.charAt(i + 1) : 0;\n        if (ch > 0xdbff || low < 0xdc00 || low > 0xdfff) {\n          sizeInBytes++; // A malformed surrogate, which yields '?'.\n        } else {\n          // A 21-bit character\n          sizeInBytes += 4;\n          i++;\n        }\n      }\n    }\n    return sizeInBytes;\n  }", "signature": "int utf8SizeInBytes(CharSequence string)", "full_signature": "public static int utf8SizeInBytes(CharSequence string)", "class_method_signature": "WriteBuffer.utf8SizeInBytes(CharSequence string)", "testcase": false, "constructor": false, "invocations": ["length", "charAt", "charAt", "charAt"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}