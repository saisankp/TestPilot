{"test_class": {"identifier": "ChangeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static TestState OBJECT1_V1 = new TestState(Id.create(1), false, 0);", "modifier": "private static", "type": "TestState", "declarator": "OBJECT1_V1 = new TestState(Id.create(1), false, 0)", "var_name": "OBJECT1_V1"}, {"original_string": "private static TestState OBJECT1_V2 = new TestState(Id.create(1), true, 1);", "modifier": "private static", "type": "TestState", "declarator": "OBJECT1_V2 = new TestState(Id.create(1), true, 1)", "var_name": "OBJECT1_V2"}, {"original_string": "private static TestState OBJECT2 = new TestState(Id.create(2), false, 0);", "modifier": "private static", "type": "TestState", "declarator": "OBJECT2 = new TestState(Id.create(2), false, 0)", "var_name": "OBJECT2"}], "file": "OcavaCore/src/test/java/com/ocadotechnology/indexedcache/ChangeTest.java"}, "test_case": {"identifier": "update_withNewNull_throwsException", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void update_withNewNull_throwsException() {\n        Assertions.assertThrows(IllegalArgumentException.class, () -> Change.update(OBJECT1_V1, null), \"Expected exception on updating to a null state\");\n    }", "signature": "void update_withNewNull_throwsException()", "full_signature": "@Test void update_withNewNull_throwsException()", "class_method_signature": "ChangeTest.update_withNewNull_throwsException()", "testcase": true, "constructor": false, "invocations": ["assertThrows", "update"]}, "focal_class": {"identifier": "Change", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "@CheckForNull public final C originalObject;", "modifier": "@CheckForNull public final", "type": "C", "declarator": "originalObject", "var_name": "originalObject"}, {"original_string": "@CheckForNull public final C newObject;", "modifier": "@CheckForNull public final", "type": "C", "declarator": "newObject", "var_name": "newObject"}], "methods": [{"identifier": "Change", "parameters": "(@Nullable C originalObject, @Nullable C newObject)", "modifiers": "private", "return": "", "signature": " Change(@Nullable C originalObject, @Nullable C newObject)", "full_signature": "private  Change(@Nullable C originalObject, @Nullable C newObject)", "class_method_signature": "Change.Change(@Nullable C originalObject, @Nullable C newObject)", "testcase": false, "constructor": true}, {"identifier": "change", "parameters": "(C oldObject, C newObject)", "modifiers": "static", "return": "Change<C>", "signature": "Change<C> change(C oldObject, C newObject)", "full_signature": "static Change<C> change(C oldObject, C newObject)", "class_method_signature": "Change.change(C oldObject, C newObject)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(C newObject)", "modifiers": "public static", "return": "Change<C>", "signature": "Change<C> add(C newObject)", "full_signature": "public static Change<C> add(C newObject)", "class_method_signature": "Change.add(C newObject)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(C oldObject, C newObject)", "modifiers": "public static", "return": "Change<C>", "signature": "Change<C> update(C oldObject, C newObject)", "full_signature": "public static Change<C> update(C oldObject, C newObject)", "class_method_signature": "Change.update(C oldObject, C newObject)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(C oldObject)", "modifiers": "public static", "return": "Change<C>", "signature": "Change<C> delete(C oldObject)", "full_signature": "public static Change<C> delete(C oldObject)", "class_method_signature": "Change.delete(C oldObject)", "testcase": false, "constructor": false}, {"identifier": "identity", "parameters": "(C object)", "modifiers": "public static", "return": "Change<C>", "signature": "Change<C> identity(C object)", "full_signature": "public static Change<C> identity(C object)", "class_method_signature": "Change.identity(C object)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(UnaryOperator<C> mapper)", "modifiers": "public", "return": "Change<C>", "signature": "Change<C> map(UnaryOperator<C> mapper)", "full_signature": "public Change<C> map(UnaryOperator<C> mapper)", "class_method_signature": "Change.map(UnaryOperator<C> mapper)", "testcase": false, "constructor": false}, {"identifier": "getNewObject", "parameters": "()", "modifiers": "public", "return": "Optional<C>", "signature": "Optional<C> getNewObject()", "full_signature": "public Optional<C> getNewObject()", "class_method_signature": "Change.getNewObject()", "testcase": false, "constructor": false}, {"identifier": "getOriginalObject", "parameters": "()", "modifiers": "public", "return": "Optional<C>", "signature": "Optional<C> getOriginalObject()", "full_signature": "public Optional<C> getOriginalObject()", "class_method_signature": "Change.getOriginalObject()", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "public", "return": "Identity<?>", "signature": "Identity<?> getId()", "full_signature": "public Identity<?> getId()", "class_method_signature": "Change.getId()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "Change.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Change.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Change.toString()", "testcase": false, "constructor": false}], "file": "OcavaCore/src/main/java/com/ocadotechnology/indexedcache/Change.java"}, "focal_method": {"identifier": "update", "parameters": "(C oldObject, C newObject)", "modifiers": "public static", "return": "Change<C>", "body": "public static <C extends Identified<?>> Change<C> update(C oldObject, C newObject) {\n        Preconditions.checkArgument(oldObject != null, \"Attempted to create an update from a null oldObject\");\n        Preconditions.checkArgument(newObject != null, \"Attempted to create an update to a null newObject\");\n        Preconditions.checkArgument(newObject.getId().equals(oldObject.getId()), \"Attempted to create an update with non-matching ids.\");\n\n        return new Change<>(oldObject, newObject);\n    }", "signature": "Change<C> update(C oldObject, C newObject)", "full_signature": "public static Change<C> update(C oldObject, C newObject)", "class_method_signature": "Change.update(C oldObject, C newObject)", "testcase": false, "constructor": false, "invocations": ["checkArgument", "checkArgument", "checkArgument", "equals", "getId", "getId"]}, "repository": {"repo_id": 99997703, "url": "https://github.com/ocadotechnology/Ocava", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 1137, "license": "licensed"}}