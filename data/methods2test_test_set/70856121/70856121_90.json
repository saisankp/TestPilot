{"test_class": {"identifier": "SnapshotServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ExecutorService SNAPSHOT_MANAGER_EXECUTOR = Executors.newFixedThreadPool(2);", "modifier": "private static final", "type": "ExecutorService", "declarator": "SNAPSHOT_MANAGER_EXECUTOR = Executors.newFixedThreadPool(2)", "var_name": "SNAPSHOT_MANAGER_EXECUTOR"}], "file": "src/server/src/test/java/io/cassandrareaper/service/SnapshotServiceTest.java"}, "test_case": {"identifier": "testTakeSnapshotClusterWide", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testTakeSnapshotClusterWide()\n      throws InterruptedException, ReaperException, ClassNotFoundException, IOException {\n\n    JmxProxy proxy = (JmxProxy) mock(Class.forName(\"io.cassandrareaper.jmx.JmxProxyImpl\"));\n    StorageServiceMBean storageMBean = Mockito.mock(StorageServiceMBean.class);\n    JmxProxyTest.mockGetStorageServiceMBean(proxy, storageMBean);\n\n    AppContext cxt = new AppContext();\n    cxt.config = TestRepairConfiguration.defaultConfig();\n    cxt.jmxConnectionFactory = mock(JmxConnectionFactory.class);\n    when(cxt.jmxConnectionFactory.connectAny(any(Collection.class))).thenReturn(proxy);\n    ClusterFacade clusterFacadeSpy = Mockito.spy(ClusterFacade.create(cxt));\n    Mockito.doReturn(Arrays.asList(\"127.0.0.1\", \"127.0.0.2\", \"127.0.0.3\")).when(clusterFacadeSpy).getLiveNodes(any());\n    Mockito.doReturn(Arrays.asList(\"127.0.0.1\", \"127.0.0.2\", \"127.0.0.3\"))\n        .when(clusterFacadeSpy)\n        .getLiveNodes(any(), any());\n\n    cxt.storage = mock(IStorage.class);\n\n    Cluster cluster = Cluster.builder()\n        .withName(\"testCluster\")\n        .withPartitioner(\"murmur3\")\n        .withSeedHosts(ImmutableSet.of(\"127.0.0.1\"))\n        .build();\n\n    when(cxt.storage.getCluster(anyString())).thenReturn(cluster);\n\n    List<Pair<Node,String>> result = SnapshotService\n        .create(cxt, SNAPSHOT_MANAGER_EXECUTOR, () -> clusterFacadeSpy)\n        .takeSnapshotClusterWide(\"snapshot\", \"testCluster\", \"testOwner\", \"testCause\");\n\n    Assertions.assertThat(result.size()).isEqualTo(3);\n    for (int i = 0 ; i < 3 ; ++i) {\n      Assertions.assertThat(result.get(i).getLeft().getClusterName()).isEqualTo(\"testcluster\");\n      Assertions.assertThat(result.get(i).getLeft().getHostname()).isEqualTo(\"127.0.0.\" + (i + 1));\n      Assertions.assertThat(result.get(i).getRight()).isEqualTo(\"snapshot\");\n    }\n    verify(storageMBean, times(3)).takeSnapshot(\"snapshot\");\n  }", "signature": "void testTakeSnapshotClusterWide()", "full_signature": "@Test public void testTakeSnapshotClusterWide()", "class_method_signature": "SnapshotServiceTest.testTakeSnapshotClusterWide()", "testcase": true, "constructor": false, "invocations": ["mock", "forName", "mock", "mockGetStorageServiceMBean", "defaultConfig", "mock", "thenReturn", "when", "connectAny", "any", "spy", "create", "getLiveNodes", "when", "doReturn", "asList", "any", "getLiveNodes", "when", "doReturn", "asList", "any", "any", "mock", "build", "withSeedHosts", "withPartitioner", "withName", "builder", "of", "thenReturn", "when", "getCluster", "anyString", "takeSnapshotClusterWide", "create", "isEqualTo", "assertThat", "size", "isEqualTo", "assertThat", "getClusterName", "getLeft", "get", "isEqualTo", "assertThat", "getHostname", "getLeft", "get", "isEqualTo", "assertThat", "getRight", "get", "takeSnapshot", "verify", "times"]}, "focal_class": {"identifier": "SnapshotService", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String SNAPSHOT_PREFIX = \"reaper\";", "modifier": "public static final", "type": "String", "declarator": "SNAPSHOT_PREFIX = \"reaper\"", "var_name": "SNAPSHOT_PREFIX"}, {"original_string": "private static final DateTimeFormatter FORMATTER = DateTimeFormatter.ofPattern(\"yyyy-MM-dd-HH-mm-ss\");", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "FORMATTER = DateTimeFormatter.ofPattern(\"yyyy-MM-dd-HH-mm-ss\")", "var_name": "FORMATTER"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(SnapshotService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(SnapshotService.class)", "var_name": "LOG"}, {"original_string": "private final AppContext context;", "modifier": "private final", "type": "AppContext", "declarator": "context", "var_name": "context"}, {"original_string": "private final ClusterFacade clusterFacade;", "modifier": "private final", "type": "ClusterFacade", "declarator": "clusterFacade", "var_name": "clusterFacade"}, {"original_string": "private final ExecutorService executor;", "modifier": "private final", "type": "ExecutorService", "declarator": "executor", "var_name": "executor"}, {"original_string": "private final Cache<String, Snapshot> cache = CacheBuilder.newBuilder().weakValues().maximumSize(1000).build();", "modifier": "private final", "type": "Cache<String, Snapshot>", "declarator": "cache = CacheBuilder.newBuilder().weakValues().maximumSize(1000).build()", "var_name": "cache"}], "methods": [{"identifier": "SnapshotService", "parameters": "(AppContext context, ExecutorService executor, Supplier<ClusterFacade> clusterFacadeSupplier)", "modifiers": "private", "return": "", "signature": " SnapshotService(AppContext context, ExecutorService executor, Supplier<ClusterFacade> clusterFacadeSupplier)", "full_signature": "private  SnapshotService(AppContext context, ExecutorService executor, Supplier<ClusterFacade> clusterFacadeSupplier)", "class_method_signature": "SnapshotService.SnapshotService(AppContext context, ExecutorService executor, Supplier<ClusterFacade> clusterFacadeSupplier)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(\n      AppContext context, ExecutorService executor, Supplier<ClusterFacade> clusterFacadeSupplier)", "modifiers": "@VisibleForTesting static", "return": "SnapshotService", "signature": "SnapshotService create(\n      AppContext context, ExecutorService executor, Supplier<ClusterFacade> clusterFacadeSupplier)", "full_signature": "@VisibleForTesting static SnapshotService create(\n      AppContext context, ExecutorService executor, Supplier<ClusterFacade> clusterFacadeSupplier)", "class_method_signature": "SnapshotService.create(\n      AppContext context, ExecutorService executor, Supplier<ClusterFacade> clusterFacadeSupplier)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(AppContext context, ExecutorService executor)", "modifiers": "public static", "return": "SnapshotService", "signature": "SnapshotService create(AppContext context, ExecutorService executor)", "full_signature": "public static SnapshotService create(AppContext context, ExecutorService executor)", "class_method_signature": "SnapshotService.create(AppContext context, ExecutorService executor)", "testcase": false, "constructor": false}, {"identifier": "takeSnapshot", "parameters": "(String snapshotName, Node host, String... keyspaces)", "modifiers": "public", "return": "Pair<Node, String>", "signature": "Pair<Node, String> takeSnapshot(String snapshotName, Node host, String... keyspaces)", "full_signature": "public Pair<Node, String> takeSnapshot(String snapshotName, Node host, String... keyspaces)", "class_method_signature": "SnapshotService.takeSnapshot(String snapshotName, Node host, String... keyspaces)", "testcase": false, "constructor": false}, {"identifier": "takeSnapshotTask", "parameters": "(String snapshotName, Node host, String... keyspace)", "modifiers": "", "return": "Callable<Pair<Node, String>>", "signature": "Callable<Pair<Node, String>> takeSnapshotTask(String snapshotName, Node host, String... keyspace)", "full_signature": " Callable<Pair<Node, String>> takeSnapshotTask(String snapshotName, Node host, String... keyspace)", "class_method_signature": "SnapshotService.takeSnapshotTask(String snapshotName, Node host, String... keyspace)", "testcase": false, "constructor": false}, {"identifier": "takeSnapshotClusterWide", "parameters": "(\n      String snapshotName,\n      String clusterName,\n      String owner,\n      String cause,\n      String... keyspace)", "modifiers": "public", "return": "List<Pair<Node, String>>", "signature": "List<Pair<Node, String>> takeSnapshotClusterWide(\n      String snapshotName,\n      String clusterName,\n      String owner,\n      String cause,\n      String... keyspace)", "full_signature": "public List<Pair<Node, String>> takeSnapshotClusterWide(\n      String snapshotName,\n      String clusterName,\n      String owner,\n      String cause,\n      String... keyspace)", "class_method_signature": "SnapshotService.takeSnapshotClusterWide(\n      String snapshotName,\n      String clusterName,\n      String owner,\n      String cause,\n      String... keyspace)", "testcase": false, "constructor": false}, {"identifier": "listSnapshotsGroupedByName", "parameters": "(Node host)", "modifiers": "public", "return": "Map<String, List<Snapshot>>", "signature": "Map<String, List<Snapshot>> listSnapshotsGroupedByName(Node host)", "full_signature": "public Map<String, List<Snapshot>> listSnapshotsGroupedByName(Node host)", "class_method_signature": "SnapshotService.listSnapshotsGroupedByName(Node host)", "testcase": false, "constructor": false}, {"identifier": "listSnapshots", "parameters": "(Node host)", "modifiers": "public", "return": "List<Snapshot>", "signature": "List<Snapshot> listSnapshots(Node host)", "full_signature": "public List<Snapshot> listSnapshots(Node host)", "class_method_signature": "SnapshotService.listSnapshots(Node host)", "testcase": false, "constructor": false}, {"identifier": "listSnapshotsClusterWide", "parameters": "(String clusterName)", "modifiers": "public", "return": "Map<String, Map<String, List<Snapshot>>>", "signature": "Map<String, Map<String, List<Snapshot>>> listSnapshotsClusterWide(String clusterName)", "full_signature": "public Map<String, Map<String, List<Snapshot>>> listSnapshotsClusterWide(String clusterName)", "class_method_signature": "SnapshotService.listSnapshotsClusterWide(String clusterName)", "testcase": false, "constructor": false}, {"identifier": "listSnapshotTask", "parameters": "(Node host)", "modifiers": "", "return": "Callable<List<Snapshot>>", "signature": "Callable<List<Snapshot>> listSnapshotTask(Node host)", "full_signature": " Callable<List<Snapshot>> listSnapshotTask(Node host)", "class_method_signature": "SnapshotService.listSnapshotTask(Node host)", "testcase": false, "constructor": false}, {"identifier": "clearSnapshot", "parameters": "(String snapshotName, Node host)", "modifiers": "public", "return": "void", "signature": "void clearSnapshot(String snapshotName, Node host)", "full_signature": "public void clearSnapshot(String snapshotName, Node host)", "class_method_signature": "SnapshotService.clearSnapshot(String snapshotName, Node host)", "testcase": false, "constructor": false}, {"identifier": "clearSnapshotTask", "parameters": "(String snapshotName, Node host)", "modifiers": "", "return": "Callable<Node>", "signature": "Callable<Node> clearSnapshotTask(String snapshotName, Node host)", "full_signature": " Callable<Node> clearSnapshotTask(String snapshotName, Node host)", "class_method_signature": "SnapshotService.clearSnapshotTask(String snapshotName, Node host)", "testcase": false, "constructor": false}, {"identifier": "clearSnapshotClusterWide", "parameters": "(String snapshotName, String clusterName)", "modifiers": "public", "return": "void", "signature": "void clearSnapshotClusterWide(String snapshotName, String clusterName)", "full_signature": "public void clearSnapshotClusterWide(String snapshotName, String clusterName)", "class_method_signature": "SnapshotService.clearSnapshotClusterWide(String snapshotName, String clusterName)", "testcase": false, "constructor": false}, {"identifier": "formatSnapshotName", "parameters": "(String snapshotName)", "modifiers": "public", "return": "String", "signature": "String formatSnapshotName(String snapshotName)", "full_signature": "public String formatSnapshotName(String snapshotName)", "class_method_signature": "SnapshotService.formatSnapshotName(String snapshotName)", "testcase": false, "constructor": false}, {"identifier": "enrichSnapshotWithMetadata", "parameters": "(Snapshot snapshot)", "modifiers": "private", "return": "Snapshot", "signature": "Snapshot enrichSnapshotWithMetadata(Snapshot snapshot)", "full_signature": "private Snapshot enrichSnapshotWithMetadata(Snapshot snapshot)", "class_method_signature": "SnapshotService.enrichSnapshotWithMetadata(Snapshot snapshot)", "testcase": false, "constructor": false}], "file": "src/server/src/main/java/io/cassandrareaper/service/SnapshotService.java"}, "focal_method": {"identifier": "takeSnapshotClusterWide", "parameters": "(\n      String snapshotName,\n      String clusterName,\n      String owner,\n      String cause,\n      String... keyspace)", "modifiers": "public", "return": "List<Pair<Node, String>>", "body": "public List<Pair<Node, String>> takeSnapshotClusterWide(\n      String snapshotName,\n      String clusterName,\n      String owner,\n      String cause,\n      String... keyspace) throws ReaperException {\n\n    try {\n      List<Pair<Node, String>> snapshotResults = Lists.newArrayList();\n      Cluster cluster = context.storage.getCluster(clusterName);\n\n      Snapshot snapshot = Snapshot.builder()\n              .withClusterName(clusterName)\n              .withName(snapshotName)\n              .withOwner(owner)\n              .withCause(cause)\n              .withCreationDate(DateTime.now())\n              .build();\n\n      context.storage.saveSnapshot(snapshot);\n      LOG.info(\"Cluster : {} ; Cluster obj : {}\", clusterName, cluster);\n      List<String> liveNodes = clusterFacade.getLiveNodes(cluster);\n\n      List<Callable<Pair<Node, String>>> snapshotTasks = liveNodes\n              .stream()\n              .map(host -> Node.builder().withCluster(cluster).withHostname(host).build())\n              .map(node -> takeSnapshotTask(snapshotName, node, keyspace))\n              .collect(Collectors.toList());\n\n      List<Future<Pair<Node, String>>> futures = executor.invokeAll(snapshotTasks);\n      for (Future<Pair<Node, String>> future : futures) {\n        snapshotResults.add(future.get());\n      }\n\n      return snapshotResults;\n    } catch (InterruptedException | ExecutionException e) {\n      LOG.error(\"Failed taking snapshot for cluster {}\", clusterName, e);\n      throw new ReaperException(e);\n    }\n  }", "signature": "List<Pair<Node, String>> takeSnapshotClusterWide(\n      String snapshotName,\n      String clusterName,\n      String owner,\n      String cause,\n      String... keyspace)", "full_signature": "public List<Pair<Node, String>> takeSnapshotClusterWide(\n      String snapshotName,\n      String clusterName,\n      String owner,\n      String cause,\n      String... keyspace)", "class_method_signature": "SnapshotService.takeSnapshotClusterWide(\n      String snapshotName,\n      String clusterName,\n      String owner,\n      String cause,\n      String... keyspace)", "testcase": false, "constructor": false, "invocations": ["newArrayList", "getCluster", "build", "withCreationDate", "withCause", "withOwner", "withName", "withClusterName", "builder", "now", "saveSnapshot", "info", "getLiveNodes", "collect", "map", "map", "stream", "build", "withHostname", "withCluster", "builder", "takeSnapshotTask", "toList", "invokeAll", "add", "get", "error"]}, "repository": {"repo_id": 70856121, "url": "https://github.com/thelastpickle/cassandra-reaper", "language": "Java", "is_fork": false, "fork_count": 156, "stargazer_count": 353, "size": 43662, "license": "licensed"}}