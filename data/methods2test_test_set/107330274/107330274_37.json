{"test_class": {"identifier": "TimeSeriesDataTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long RETENTION_MS = 60_000;", "modifier": "private static final", "type": "long", "declarator": "RETENTION_MS = 60_000", "var_name": "RETENTION_MS"}, {"original_string": "private static final long STEP_MS = 1_000;", "modifier": "private static final", "type": "long", "declarator": "STEP_MS = 1_000", "var_name": "STEP_MS"}, {"original_string": "private final TestClock testClock = Clocks.test();", "modifier": "private final", "type": "TestClock", "declarator": "testClock = Clocks.test()", "var_name": "testClock"}, {"original_string": "private final TimeSeriesData timeSeriesData = new TimeSeriesData(\n            RETENTION_MS,\n            STEP_MS,\n            (value, delayMs) -> value / (1 + delayMs / 1_000),\n            testClock\n    );", "modifier": "private final", "type": "TimeSeriesData", "declarator": "timeSeriesData = new TimeSeriesData(\n            RETENTION_MS,\n            STEP_MS,\n            (value, delayMs) -> value / (1 + delayMs / 1_000),\n            testClock\n    )", "var_name": "timeSeriesData"}], "file": "titus-common/src/test/java/com/netflix/titus/common/util/TimeSeriesDataTest.java"}, "test_case": {"identifier": "testClear", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testClear() {\n        timeSeriesData.add(10, testClock.wallTime());\n        timeSeriesData.clear();\n        assertThat(timeSeriesData.getAggregatedValue()).isEqualTo(0);\n    }", "signature": "void testClear()", "full_signature": "@Test public void testClear()", "class_method_signature": "TimeSeriesDataTest.testClear()", "testcase": true, "constructor": false, "invocations": ["add", "wallTime", "clear", "isEqualTo", "assertThat", "getAggregatedValue"]}, "focal_class": {"identifier": "TimeSeriesData", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Pair<Double, Long> CLEANUP_MARKER = Pair.of(-1.0, 0L);", "modifier": "private static final", "type": "Pair<Double, Long>", "declarator": "CLEANUP_MARKER = Pair.of(-1.0, 0L)", "var_name": "CLEANUP_MARKER"}, {"original_string": "private static final Pair<Double, Long> NOTHING = Pair.of(0.0, 0L);", "modifier": "private static final", "type": "Pair<Double, Long>", "declarator": "NOTHING = Pair.of(0.0, 0L)", "var_name": "NOTHING"}, {"original_string": "private final long retentionMs;", "modifier": "private final", "type": "long", "declarator": "retentionMs", "var_name": "retentionMs"}, {"original_string": "private final long stepMs;", "modifier": "private final", "type": "long", "declarator": "stepMs", "var_name": "stepMs"}, {"original_string": "private final BiFunction<Double, Long, Double> adjuster;", "modifier": "private final", "type": "BiFunction<Double, Long, Double>", "declarator": "adjuster", "var_name": "adjuster"}, {"original_string": "private final Clock clock;", "modifier": "private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "private final Queue<Pair<Double, Long>> offers = new ConcurrentLinkedQueue<>();", "modifier": "private final", "type": "Queue<Pair<Double, Long>>", "declarator": "offers = new ConcurrentLinkedQueue<>()", "var_name": "offers"}, {"original_string": "private final ConcurrentLinkedDeque<Pair<Double, Long>> data = new ConcurrentLinkedDeque<>();", "modifier": "private final", "type": "ConcurrentLinkedDeque<Pair<Double, Long>>", "declarator": "data = new ConcurrentLinkedDeque<>()", "var_name": "data"}, {"original_string": "private final AtomicReference<Pair<Double, Long>> lastAggregate;", "modifier": "private final", "type": "AtomicReference<Pair<Double, Long>>", "declarator": "lastAggregate", "var_name": "lastAggregate"}, {"original_string": "private final AtomicInteger wipMarker = new AtomicInteger();", "modifier": "private final", "type": "AtomicInteger", "declarator": "wipMarker = new AtomicInteger()", "var_name": "wipMarker"}], "methods": [{"identifier": "TimeSeriesData", "parameters": "(long retentionMs,\n                          long stepMs,\n                          BiFunction<Double, Long, Double> adjuster,\n                          Clock clock)", "modifiers": "public", "return": "", "signature": " TimeSeriesData(long retentionMs,\n                          long stepMs,\n                          BiFunction<Double, Long, Double> adjuster,\n                          Clock clock)", "full_signature": "public  TimeSeriesData(long retentionMs,\n                          long stepMs,\n                          BiFunction<Double, Long, Double> adjuster,\n                          Clock clock)", "class_method_signature": "TimeSeriesData.TimeSeriesData(long retentionMs,\n                          long stepMs,\n                          BiFunction<Double, Long, Double> adjuster,\n                          Clock clock)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(double value, long timestamp)", "modifiers": "public", "return": "void", "signature": "void add(double value, long timestamp)", "full_signature": "public void add(double value, long timestamp)", "class_method_signature": "TimeSeriesData.add(double value, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "TimeSeriesData.clear()", "testcase": false, "constructor": false}, {"identifier": "getAggregatedValue", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getAggregatedValue()", "full_signature": "public double getAggregatedValue()", "class_method_signature": "TimeSeriesData.getAggregatedValue()", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(long now)", "modifiers": "private", "return": "boolean", "signature": "boolean process(long now)", "full_signature": "private boolean process(long now)", "class_method_signature": "TimeSeriesData.process(long now)", "testcase": false, "constructor": false}, {"identifier": "computeAggregatedValue", "parameters": "(long now)", "modifiers": "private", "return": "Pair<Double, Long>", "signature": "Pair<Double, Long> computeAggregatedValue(long now)", "full_signature": "private Pair<Double, Long> computeAggregatedValue(long now)", "class_method_signature": "TimeSeriesData.computeAggregatedValue(long now)", "testcase": false, "constructor": false}], "file": "titus-common/src/main/java/com/netflix/titus/common/util/TimeSeriesData.java"}, "focal_method": {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void clear() {\n        if (!data.isEmpty()) {\n            offers.add(CLEANUP_MARKER);\n            process(clock.wallTime());\n        }\n    }", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "TimeSeriesData.clear()", "testcase": false, "constructor": false, "invocations": ["isEmpty", "add", "process", "wallTime"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}