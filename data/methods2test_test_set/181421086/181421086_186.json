{"test_class": {"identifier": "DeviceUniqueIndexTest", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "protected Entity e1a;", "modifier": "protected", "type": "Entity", "declarator": "e1a", "var_name": "e1a"}, {"original_string": "protected Entity e1b;", "modifier": "protected", "type": "Entity", "declarator": "e1b", "var_name": "e1b"}, {"original_string": "protected Device d1;", "modifier": "protected", "type": "Device", "declarator": "d1", "var_name": "d1"}, {"original_string": "protected Entity e2;", "modifier": "protected", "type": "Entity", "declarator": "e2", "var_name": "e2"}, {"original_string": "protected Entity e2alt;", "modifier": "protected", "type": "Entity", "declarator": "e2alt", "var_name": "e2alt"}, {"original_string": "protected Entity e3;", "modifier": "protected", "type": "Entity", "declarator": "e3", "var_name": "e3"}, {"original_string": "protected Entity e4;", "modifier": "protected", "type": "Entity", "declarator": "e4", "var_name": "e4"}], "file": "src/agents/apps/floodlight/floodlight-1.2/src/test/java/net/floodlightcontroller/devicemanager/internal/DeviceUniqueIndexTest.java"}, "test_case": {"identifier": "testDeviceUniqueIndex", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDeviceUniqueIndex() {\n        DeviceUniqueIndex idx1 = new DeviceUniqueIndex(\n                                             EnumSet.of(DeviceField.MAC, \n                                                        DeviceField.VLAN));\n        \n        idx1.updateIndex(d1, d1.getDeviceKey());\n        idx1.updateIndex(e2, 2L);\n        \n        //-------------\n        // Test findByEntity lookups\n        assertEquals(Long.valueOf(1L), idx1.findByEntity(e1a));\n        assertEquals(Long.valueOf(1L), idx1.findByEntity(e1b));\n        assertEquals(Long.valueOf(2L), idx1.findByEntity(e2));\n        // we didn't add e2alt but since they key fields are the same we \n        // should find it \n        assertEquals(Long.valueOf(2L), idx1.findByEntity(e2alt));\n        assertEquals(null, idx1.findByEntity(e3));\n        assertEquals(null, idx1.findByEntity(e4));\n        \n        //-------------\n        // Test getAll()\n        HashSet<Long> expectedKeys = new HashSet<Long>();\n        expectedKeys.add(1L);\n        expectedKeys.add(2L);\n        verifyIterator(expectedKeys, idx1.getAll());\n        \n                \n        //-------------\n        // Test queryByEntity()\n        verifyIterator(Collections.<Long>singleton(1L), \n                       idx1.queryByEntity(e1a));\n        verifyIterator(Collections.<Long>singleton(1L), \n                       idx1.queryByEntity(e1b));\n        verifyIterator(Collections.<Long>singleton(2L), \n                       idx1.queryByEntity(e2));\n        verifyIterator(Collections.<Long>singleton(2L),\n                       idx1.queryByEntity(e2alt));\n        assertEquals(false, idx1.queryByEntity(e3).hasNext());\n        assertEquals(false, idx1.queryByEntity(e3).hasNext());\n        \n        \n        //-------------\n        // Test removal\n        idx1.removeEntity(e1a, 42L); // No-op. e1a isn't mapped to this key\n        assertEquals(Long.valueOf(1L), idx1.findByEntity(e1a));\n        idx1.removeEntity(e1a, 1L); \n        assertEquals(null, idx1.findByEntity(e1a));\n        assertEquals(Long.valueOf(1L), idx1.findByEntity(e1b));\n        assertEquals(Long.valueOf(2L), idx1.findByEntity(e2));\n        idx1.removeEntity(e2);  \n        assertEquals(null, idx1.findByEntity(e2));\n        assertEquals(Long.valueOf(1L), idx1.findByEntity(e1b));\n        \n        \n        //-------------\n        // Test null keys\n        DeviceUniqueIndex idx2 = new DeviceUniqueIndex(\n                                             EnumSet.of(DeviceField.IPv4,\n                                            \t\t \tDeviceField.IPv6,\n                                                        DeviceField.SWITCH));\n        // only one key field is null\n        idx2.updateIndex(e3, 3L);\n        assertEquals(Long.valueOf(3L), idx2.findByEntity(e3));\n        e3.ipv4Address = IPv4Address.of(3);\n        assertEquals(null, idx2.findByEntity(e3));\n        // all key fields are null\n        idx2.updateIndex(e4, 4L);\n        assertEquals(null, idx2.findByEntity(e4));\n        Device d4 = new Device(null, 4L, null, null, null,\n                               Collections.<Entity>singleton(e4), null);\n        idx2.updateIndex(d4, 4L);\n        assertEquals(null, idx2.findByEntity(e4));\n        \n        \n\n        //-------------\n        // entity already exists with different deviceKey\n        DeviceUniqueIndex idx3 = new DeviceUniqueIndex(\n                                             EnumSet.of(DeviceField.MAC, \n                                                        DeviceField.VLAN));\n        idx3.updateIndex(e1a, 42L);\n        assertEquals(false, idx3.updateIndex(d1, 1L));\n        // TODO: shouldn't this fail as well so that the behavior\n        // is consistent?\n        idx3.updateIndex(e1a, 1L);\n        // anyways. We can now add d1 ;-)\n        assertEquals(true, idx3.updateIndex(d1, 1L));\n    }", "signature": "void testDeviceUniqueIndex()", "full_signature": "@Test public void testDeviceUniqueIndex()", "class_method_signature": "DeviceUniqueIndexTest.testDeviceUniqueIndex()", "testcase": true, "constructor": false, "invocations": ["of", "updateIndex", "getDeviceKey", "updateIndex", "assertEquals", "valueOf", "findByEntity", "assertEquals", "valueOf", "findByEntity", "assertEquals", "valueOf", "findByEntity", "assertEquals", "valueOf", "findByEntity", "assertEquals", "findByEntity", "assertEquals", "findByEntity", "add", "add", "verifyIterator", "getAll", "verifyIterator", "singleton", "queryByEntity", "verifyIterator", "singleton", "queryByEntity", "verifyIterator", "singleton", "queryByEntity", "verifyIterator", "singleton", "queryByEntity", "assertEquals", "hasNext", "queryByEntity", "assertEquals", "hasNext", "queryByEntity", "removeEntity", "assertEquals", "valueOf", "findByEntity", "removeEntity", "assertEquals", "findByEntity", "assertEquals", "valueOf", "findByEntity", "assertEquals", "valueOf", "findByEntity", "removeEntity", "assertEquals", "findByEntity", "assertEquals", "valueOf", "findByEntity", "of", "updateIndex", "assertEquals", "valueOf", "findByEntity", "of", "assertEquals", "findByEntity", "updateIndex", "assertEquals", "findByEntity", "singleton", "updateIndex", "assertEquals", "findByEntity", "of", "updateIndex", "assertEquals", "updateIndex", "updateIndex", "assertEquals", "updateIndex"]}, "focal_class": {"identifier": "DeviceUniqueIndex", "superclass": "extends DeviceIndex", "interfaces": "", "fields": [{"original_string": "private final ConcurrentHashMap<IndexedEntity, Long> index;", "modifier": "private final", "type": "ConcurrentHashMap<IndexedEntity, Long>", "declarator": "index", "var_name": "index"}], "methods": [{"identifier": "DeviceUniqueIndex", "parameters": "(EnumSet<DeviceField> keyFields)", "modifiers": "public", "return": "", "signature": " DeviceUniqueIndex(EnumSet<DeviceField> keyFields)", "full_signature": "public  DeviceUniqueIndex(EnumSet<DeviceField> keyFields)", "class_method_signature": "DeviceUniqueIndex.DeviceUniqueIndex(EnumSet<DeviceField> keyFields)", "testcase": false, "constructor": true}, {"identifier": "queryByEntity", "parameters": "(Entity entity)", "modifiers": "@Override public", "return": "Iterator<Long>", "signature": "Iterator<Long> queryByEntity(Entity entity)", "full_signature": "@Override public Iterator<Long> queryByEntity(Entity entity)", "class_method_signature": "DeviceUniqueIndex.queryByEntity(Entity entity)", "testcase": false, "constructor": false}, {"identifier": "getAll", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Long>", "signature": "Iterator<Long> getAll()", "full_signature": "@Override public Iterator<Long> getAll()", "class_method_signature": "DeviceUniqueIndex.getAll()", "testcase": false, "constructor": false}, {"identifier": "updateIndex", "parameters": "(Device device, Long deviceKey)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateIndex(Device device, Long deviceKey)", "full_signature": "@Override public boolean updateIndex(Device device, Long deviceKey)", "class_method_signature": "DeviceUniqueIndex.updateIndex(Device device, Long deviceKey)", "testcase": false, "constructor": false}, {"identifier": "updateIndex", "parameters": "(Entity entity, Long deviceKey)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateIndex(Entity entity, Long deviceKey)", "full_signature": "@Override public boolean updateIndex(Entity entity, Long deviceKey)", "class_method_signature": "DeviceUniqueIndex.updateIndex(Entity entity, Long deviceKey)", "testcase": false, "constructor": false}, {"identifier": "removeEntity", "parameters": "(Entity entity)", "modifiers": "@Override public", "return": "void", "signature": "void removeEntity(Entity entity)", "full_signature": "@Override public void removeEntity(Entity entity)", "class_method_signature": "DeviceUniqueIndex.removeEntity(Entity entity)", "testcase": false, "constructor": false}, {"identifier": "removeEntity", "parameters": "(Entity entity, Long deviceKey)", "modifiers": "@Override public", "return": "void", "signature": "void removeEntity(Entity entity, Long deviceKey)", "full_signature": "@Override public void removeEntity(Entity entity, Long deviceKey)", "class_method_signature": "DeviceUniqueIndex.removeEntity(Entity entity, Long deviceKey)", "testcase": false, "constructor": false}, {"identifier": "findByEntity", "parameters": "(Entity entity)", "modifiers": "public", "return": "Long", "signature": "Long findByEntity(Entity entity)", "full_signature": "public Long findByEntity(Entity entity)", "class_method_signature": "DeviceUniqueIndex.findByEntity(Entity entity)", "testcase": false, "constructor": false}], "file": "src/agents/apps/floodlight/floodlight-1.2/src/main/java/net/floodlightcontroller/devicemanager/internal/DeviceUniqueIndex.java"}, "focal_method": {"identifier": "DeviceUniqueIndex", "parameters": "(EnumSet<DeviceField> keyFields)", "modifiers": "public", "return": "", "body": "public DeviceUniqueIndex(EnumSet<DeviceField> keyFields) {\n        super(keyFields);\n        index = new ConcurrentHashMap<IndexedEntity, Long>();\n    }", "signature": " DeviceUniqueIndex(EnumSet<DeviceField> keyFields)", "full_signature": "public  DeviceUniqueIndex(EnumSet<DeviceField> keyFields)", "class_method_signature": "DeviceUniqueIndex.DeviceUniqueIndex(EnumSet<DeviceField> keyFields)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 181421086, "url": "https://github.com/seungsoo-lee/DELTA", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 35, "size": 99244, "license": "licensed"}}