{"test_class": {"identifier": "PdfMergeInputTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PdfSource<?> source;", "modifier": "private", "type": "PdfSource<?>", "declarator": "source", "var_name": "source"}], "file": "sejda-model/src/test/java/org/sejda/model/input/PdfMergeInputTest.java"}, "test_case": {"identifier": "getPages", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getPages() {\n        PdfMergeInput victim = new PdfMergeInput(source);\n        List<PageRange> ranges = new ArrayList<PageRange>();\n        ranges.add(new PageRange(5, 8));\n        ranges.add(new PageRange(10, 11));\n        victim.addAllPageRanges(ranges);\n        assertEquals(6, victim.getPages(20).size());\n    }", "signature": "void getPages()", "full_signature": "@Test public void getPages()", "class_method_signature": "PdfMergeInputTest.getPages()", "testcase": true, "constructor": false, "invocations": ["add", "add", "addAllPageRanges", "assertEquals", "size", "getPages"]}, "focal_class": {"identifier": "PdfMergeInput", "superclass": "", "interfaces": "implements PageRangeSelection, PagesSelection, MergeInput", "fields": [{"original_string": "@NotNull\n    @Valid\n    private PdfSource<?> source;", "modifier": "@NotNull\n    @Valid\n    private", "type": "PdfSource<?>", "declarator": "source", "var_name": "source"}, {"original_string": "@Valid\n    private final Set<PageRange> pageSelection = new NullSafeSet<>();", "modifier": "@Valid\n    private final", "type": "Set<PageRange>", "declarator": "pageSelection = new NullSafeSet<>()", "var_name": "pageSelection"}], "methods": [{"identifier": "PdfMergeInput", "parameters": "(PdfSource<?> source, Set<PageRange> pageSelection)", "modifiers": "public", "return": "", "signature": " PdfMergeInput(PdfSource<?> source, Set<PageRange> pageSelection)", "full_signature": "public  PdfMergeInput(PdfSource<?> source, Set<PageRange> pageSelection)", "class_method_signature": "PdfMergeInput.PdfMergeInput(PdfSource<?> source, Set<PageRange> pageSelection)", "testcase": false, "constructor": true}, {"identifier": "PdfMergeInput", "parameters": "(PdfSource<?> source)", "modifiers": "public", "return": "", "signature": " PdfMergeInput(PdfSource<?> source)", "full_signature": "public  PdfMergeInput(PdfSource<?> source)", "class_method_signature": "PdfMergeInput.PdfMergeInput(PdfSource<?> source)", "testcase": false, "constructor": true}, {"identifier": "getSource", "parameters": "()", "modifiers": "public", "return": "PdfSource<?>", "signature": "PdfSource<?> getSource()", "full_signature": "public PdfSource<?> getSource()", "class_method_signature": "PdfMergeInput.getSource()", "testcase": false, "constructor": false}, {"identifier": "getPageSelection", "parameters": "()", "modifiers": "@Override public", "return": "Set<PageRange>", "signature": "Set<PageRange> getPageSelection()", "full_signature": "@Override public Set<PageRange> getPageSelection()", "class_method_signature": "PdfMergeInput.getPageSelection()", "testcase": false, "constructor": false}, {"identifier": "addPageRange", "parameters": "(PageRange range)", "modifiers": "public", "return": "void", "signature": "void addPageRange(PageRange range)", "full_signature": "public void addPageRange(PageRange range)", "class_method_signature": "PdfMergeInput.addPageRange(PageRange range)", "testcase": false, "constructor": false}, {"identifier": "addAllPageRanges", "parameters": "(Collection<PageRange> ranges)", "modifiers": "public", "return": "void", "signature": "void addAllPageRanges(Collection<PageRange> ranges)", "full_signature": "public void addAllPageRanges(Collection<PageRange> ranges)", "class_method_signature": "PdfMergeInput.addAllPageRanges(Collection<PageRange> ranges)", "testcase": false, "constructor": false}, {"identifier": "isAllPages", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAllPages()", "full_signature": "public boolean isAllPages()", "class_method_signature": "PdfMergeInput.isAllPages()", "testcase": false, "constructor": false}, {"identifier": "getPages", "parameters": "(int totalNumberOfPage)", "modifiers": "@Override public", "return": "Set<Integer>", "signature": "Set<Integer> getPages(int totalNumberOfPage)", "full_signature": "@Override public Set<Integer> getPages(int totalNumberOfPage)", "class_method_signature": "PdfMergeInput.getPages(int totalNumberOfPage)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PdfMergeInput.toString()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "PdfMergeInput.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object other)", "full_signature": "@Override public boolean equals(Object other)", "class_method_signature": "PdfMergeInput.equals(Object other)", "testcase": false, "constructor": false}], "file": "sejda-model/src/main/java/org/sejda/model/input/PdfMergeInput.java"}, "focal_method": {"identifier": "getPages", "parameters": "(int totalNumberOfPage)", "modifiers": "@Override public", "return": "Set<Integer>", "body": "@Override\n    public Set<Integer> getPages(int totalNumberOfPage) {\n        Set<Integer> retSet = new NullSafeSet<Integer>();\n        if (isAllPages()) {\n            for (int i = 1; i <= totalNumberOfPage; i++) {\n                retSet.add(i);\n            }\n        } else {\n            for (PageRange range : getPageSelection()) {\n                retSet.addAll(range.getPages(totalNumberOfPage));\n            }\n        }\n        return retSet;\n    }", "signature": "Set<Integer> getPages(int totalNumberOfPage)", "full_signature": "@Override public Set<Integer> getPages(int totalNumberOfPage)", "class_method_signature": "PdfMergeInput.getPages(int totalNumberOfPage)", "testcase": false, "constructor": false, "invocations": ["isAllPages", "add", "getPageSelection", "addAll", "getPages"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}