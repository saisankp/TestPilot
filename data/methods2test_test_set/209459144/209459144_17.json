{"test_class": {"identifier": "LocalizerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String DEFAULT_TEMPFILE = \"testFile\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_TEMPFILE = \"testFile\"", "var_name": "DEFAULT_TEMPFILE"}, {"original_string": "@Rule\n  public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "@Mock\n  private RemoteDirectoryManager remoteDirectoryManager;", "modifier": "@Mock\n  private", "type": "RemoteDirectoryManager", "declarator": "remoteDirectoryManager", "var_name": "remoteDirectoryManager"}, {"original_string": "@Mock\n  private FileSystemOperations fsOperations;", "modifier": "@Mock\n  private", "type": "FileSystemOperations", "declarator": "fsOperations", "var_name": "fsOperations"}, {"original_string": "@Mock\n  private Service service;", "modifier": "@Mock\n  private", "type": "Service", "declarator": "service", "var_name": "service"}, {"original_string": "private FileUtilitiesForTests fileUtils = new FileUtilitiesForTests();", "modifier": "private", "type": "FileUtilitiesForTests", "declarator": "fileUtils = new FileUtilitiesForTests()", "var_name": "fileUtils"}], "file": "submarine-server/server-submitter/submitter-yarnservice/src/test/java/org/apache/submarine/server/submitter/yarnservice/utils/LocalizerTest.java"}, "test_case": {"identifier": "testLocalizeNotExistingLocalFile", "parameters": "()", "modifiers": "@Test(expected = FileNotFoundException.class) public", "return": "void", "body": "@Test(expected = FileNotFoundException.class)\n  public void testLocalizeNotExistingLocalFile() throws IOException {\n    when(remoteDirectoryManager.isRemote(anyString())).thenReturn(false);\n\n    Localization localization = new Localization();\n    localization.setRemoteUri(\"file://dummy\");\n    Localizer localizer = createLocalizerWithLocalizations(localization);\n\n    localizer.handleLocalizations(service);\n  }", "signature": "void testLocalizeNotExistingLocalFile()", "full_signature": "@Test(expected = FileNotFoundException.class) public void testLocalizeNotExistingLocalFile()", "class_method_signature": "LocalizerTest.testLocalizeNotExistingLocalFile()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "isRemote", "anyString", "setRemoteUri", "createLocalizerWithLocalizations", "handleLocalizations"]}, "focal_class": {"identifier": "Localizer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(Localizer.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(Localizer.class)", "var_name": "LOG"}, {"original_string": "private final FileSystemOperations fsOperations;", "modifier": "private final", "type": "FileSystemOperations", "declarator": "fsOperations", "var_name": "fsOperations"}, {"original_string": "private final RemoteDirectoryManager remoteDirectoryManager;", "modifier": "private final", "type": "RemoteDirectoryManager", "declarator": "remoteDirectoryManager", "var_name": "remoteDirectoryManager"}, {"original_string": "private final RunJobParameters parameters;", "modifier": "private final", "type": "RunJobParameters", "declarator": "parameters", "var_name": "parameters"}], "methods": [{"identifier": "Localizer", "parameters": "(FileSystemOperations fsOperations,\n      RemoteDirectoryManager remoteDirectoryManager,\n      RunJobParameters parameters)", "modifiers": "public", "return": "", "signature": " Localizer(FileSystemOperations fsOperations,\n      RemoteDirectoryManager remoteDirectoryManager,\n      RunJobParameters parameters)", "full_signature": "public  Localizer(FileSystemOperations fsOperations,\n      RemoteDirectoryManager remoteDirectoryManager,\n      RunJobParameters parameters)", "class_method_signature": "Localizer.Localizer(FileSystemOperations fsOperations,\n      RemoteDirectoryManager remoteDirectoryManager,\n      RunJobParameters parameters)", "testcase": false, "constructor": true}, {"identifier": "handleLocalizations", "parameters": "(Service service)", "modifiers": "public", "return": "void", "signature": "void handleLocalizations(Service service)", "full_signature": "public void handleLocalizations(Service service)", "class_method_signature": "Localizer.handleLocalizations(Service service)", "testcase": false, "constructor": false}, {"identifier": "determineSourceFile", "parameters": "(LocalizationState localizationState)", "modifiers": "private", "return": "String", "signature": "String determineSourceFile(LocalizationState localizationState)", "full_signature": "private String determineSourceFile(LocalizationState localizationState)", "class_method_signature": "Localizer.determineSourceFile(LocalizationState localizationState)", "testcase": false, "constructor": false}, {"identifier": "getNameUntilUnderscore", "parameters": "(String sourceFile)", "modifiers": "private static", "return": "String", "signature": "String getNameUntilUnderscore(String sourceFile)", "full_signature": "private static String getNameUntilUnderscore(String sourceFile)", "class_method_signature": "Localizer.getNameUntilUnderscore(String sourceFile)", "testcase": false, "constructor": false}, {"identifier": "isZippedArchive", "parameters": "(String sourceFile,\n      TypeEnum destFileType)", "modifiers": "private static", "return": "boolean", "signature": "boolean isZippedArchive(String sourceFile,\n      TypeEnum destFileType)", "full_signature": "private static boolean isZippedArchive(String sourceFile,\n      TypeEnum destFileType)", "class_method_signature": "Localizer.isZippedArchive(String sourceFile,\n      TypeEnum destFileType)", "testcase": false, "constructor": false}, {"identifier": "addToMounts", "parameters": "(Service service, Localization loc,\n      String containerLocalPath, String sourceFile)", "modifiers": "private static", "return": "void", "signature": "void addToMounts(Service service, Localization loc,\n      String containerLocalPath, String sourceFile)", "full_signature": "private static void addToMounts(Service service, Localization loc,\n      String containerLocalPath, String sourceFile)", "class_method_signature": "Localizer.addToMounts(Service service, Localization loc,\n      String containerLocalPath, String sourceFile)", "testcase": false, "constructor": false}, {"identifier": "checkFilesExist", "parameters": "(List<Localization> localizations)", "modifiers": "private", "return": "void", "signature": "void checkFilesExist(List<Localization> localizations)", "full_signature": "private void checkFilesExist(List<Localization> localizations)", "class_method_signature": "Localizer.checkFilesExist(List<Localization> localizations)", "testcase": false, "constructor": false}, {"identifier": "getLastNameFromPath", "parameters": "(String sourceFile)", "modifiers": "private static", "return": "String", "signature": "String getLastNameFromPath(String sourceFile)", "full_signature": "private static String getLastNameFromPath(String sourceFile)", "class_method_signature": "Localizer.getLastNameFromPath(String sourceFile)", "testcase": false, "constructor": false}], "file": "submarine-server/server-submitter/submitter-yarnservice/src/main/java/org/apache/submarine/server/submitter/yarnservice/utils/Localizer.java"}, "focal_method": {"identifier": "handleLocalizations", "parameters": "(Service service)", "modifiers": "public", "return": "void", "body": "public void handleLocalizations(Service service)\n      throws IOException {\n    // Handle localizations\n    Path stagingDir =\n        remoteDirectoryManager.getJobStagingArea(\n            parameters.getName(), true);\n    List<Localization> localizations = parameters.getLocalizations();\n\n    // Check to fail fast\n    checkFilesExist(localizations);\n\n    // Start download remote if needed and upload to HDFS\n    for (Localization localization : localizations) {\n      LocalizationState localizationState = new LocalizationState(localization,\n          remoteDirectoryManager);\n      Path resourceToLocalize = new Path(localizationState.remoteUri);\n      String sourceFile = determineSourceFile(localizationState);\n\n      if (localizationState.needUploadToHDFS) {\n        resourceToLocalize =\n            fsOperations.uploadToRemoteFile(stagingDir, sourceFile);\n      }\n      if (localizationState.needToDeleteTempFile) {\n        fsOperations.deleteFiles(sourceFile);\n      }\n      // Remove .zip from zipped dir name\n      if (isZippedArchive(sourceFile, localizationState.destFileType)) {\n        // Delete local zip file\n        fsOperations.deleteFiles(sourceFile);\n        sourceFile = getNameUntilUnderscore(sourceFile);\n      }\n\n      String containerLocalPath = localizationState.containerLocalPath;\n      // If provided, use the name of local uri\n      if (!containerLocalPath.equals(\".\")\n          && !containerLocalPath.equals(\"./\")) {\n        // Change the YARN localized file name to what will be used in container\n        sourceFile = getLastNameFromPath(containerLocalPath);\n      }\n      String localizedName = getLastNameFromPath(sourceFile);\n      LOG.info(\"The file or directory to be localized is {}. \" +\n          \"Its localized filename will be {}\",\n          resourceToLocalize.toString(), localizedName);\n      ConfigFile configFile = new ConfigFile()\n          .srcFile(resourceToLocalize.toUri().toString())\n          .destFile(localizedName)\n          .type(localizationState.destFileType);\n      service.getConfiguration().getFiles().add(configFile);\n\n      if (containerLocalPath.startsWith(\"/\")) {\n        addToMounts(service, localization, containerLocalPath, sourceFile);\n      }\n    }\n  }", "signature": "void handleLocalizations(Service service)", "full_signature": "public void handleLocalizations(Service service)", "class_method_signature": "Localizer.handleLocalizations(Service service)", "testcase": false, "constructor": false, "invocations": ["getJobStagingArea", "getName", "getLocalizations", "checkFilesExist", "determineSourceFile", "uploadToRemoteFile", "deleteFiles", "isZippedArchive", "deleteFiles", "getNameUntilUnderscore", "equals", "equals", "getLastNameFromPath", "getLastNameFromPath", "info", "toString", "type", "destFile", "srcFile", "toString", "toUri", "add", "getFiles", "getConfiguration", "startsWith", "addToMounts"]}, "repository": {"repo_id": 209459144, "url": "https://github.com/apache/submarine", "stars": 185, "created": "9/19/2019 4:00:17 AM +00:00", "updates": "2020-01-27T15:27:05+00:00", "fork": "False", "license": "licensed"}}