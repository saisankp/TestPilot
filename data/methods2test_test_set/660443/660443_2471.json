{"test_class": {"identifier": "AdductionProtonPBReactionTest", "superclass": "extends ReactionProcessTest", "interfaces": "", "fields": [{"original_string": "private final LonePairElectronChecker lpcheck = new LonePairElectronChecker();", "modifier": "private final", "type": "LonePairElectronChecker", "declarator": "lpcheck = new LonePairElectronChecker()", "var_name": "lpcheck"}, {"original_string": "private IChemObjectBuilder            builder = SilentChemObjectBuilder.getInstance();", "modifier": "private", "type": "IChemObjectBuilder", "declarator": "builder = SilentChemObjectBuilder.getInstance()", "var_name": "builder"}], "file": "base/reaction/src/test/java/org/openscience/cdk/reaction/type/AdductionProtonPBReactionTest.java"}, "test_case": {"identifier": "testInitiate_IAtomContainerSet_IAtomContainerSet", "parameters": "()", "modifiers": "@Test @Override public", "return": "void", "body": "@Test\n    @Override\n    public void testInitiate_IAtomContainerSet_IAtomContainerSet() throws Exception {\n\n        IReactionProcess type = new AdductionProtonPBReaction();\n\n        IAtomContainerSet setOfReactants = getExampleReactants();\n\n        /* initiate */\n        List<IParameterReact> paramList = new ArrayList<IParameterReact>();\n        IParameterReact param = new SetReactionCenter();\n        param.setParameter(Boolean.FALSE);\n        paramList.add(param);\n        type.setParameterList(paramList);\n        IReactionSet setOfReactions = type.initiate(setOfReactants, null);\n\n        Assert.assertEquals(2, setOfReactions.getReactionCount());\n        Assert.assertEquals(1, setOfReactions.getReaction(0).getProductCount());\n\n        IAtomContainer product = setOfReactions.getReaction(0).getProducts().getAtomContainer(0);\n\n        IAtomContainer molecule2 = getExpectedProducts().getAtomContainer(0);\n\n        IQueryAtomContainer queryAtom = QueryAtomContainerCreator.createSymbolAndChargeQueryContainer(product);\n        Assert.assertTrue(new UniversalIsomorphismTester().isIsomorph(molecule2, queryAtom));\n\n    }", "signature": "void testInitiate_IAtomContainerSet_IAtomContainerSet()", "full_signature": "@Test @Override public void testInitiate_IAtomContainerSet_IAtomContainerSet()", "class_method_signature": "AdductionProtonPBReactionTest.testInitiate_IAtomContainerSet_IAtomContainerSet()", "testcase": true, "constructor": false, "invocations": ["getExampleReactants", "setParameter", "add", "setParameterList", "initiate", "assertEquals", "getReactionCount", "assertEquals", "getProductCount", "getReaction", "getAtomContainer", "getProducts", "getReaction", "getAtomContainer", "getExpectedProducts", "createSymbolAndChargeQueryContainer", "assertTrue", "isIsomorph"]}, "focal_class": {"identifier": "AdductionProtonPBReaction", "superclass": "extends ReactionEngine", "interfaces": "implements IReactionProcess", "fields": [{"original_string": "private static ILoggingTool logger = LoggingToolFactory.createLoggingTool(AdductionProtonPBReaction.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(AdductionProtonPBReaction.class)", "var_name": "logger"}], "methods": [{"identifier": "AdductionProtonPBReaction", "parameters": "()", "modifiers": "public", "return": "", "signature": " AdductionProtonPBReaction()", "full_signature": "public  AdductionProtonPBReaction()", "class_method_signature": "AdductionProtonPBReaction.AdductionProtonPBReaction()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "ReactionSpecification", "signature": "ReactionSpecification getSpecification()", "full_signature": "@Override public ReactionSpecification getSpecification()", "class_method_signature": "AdductionProtonPBReaction.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "initiate", "parameters": "(IAtomContainerSet reactants, IAtomContainerSet agents)", "modifiers": "@Override public", "return": "IReactionSet", "signature": "IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "full_signature": "@Override public IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "class_method_signature": "AdductionProtonPBReaction.initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "testcase": false, "constructor": false}, {"identifier": "setActiveCenters", "parameters": "(IAtomContainer reactant)", "modifiers": "private", "return": "void", "signature": "void setActiveCenters(IAtomContainer reactant)", "full_signature": "private void setActiveCenters(IAtomContainer reactant)", "class_method_signature": "AdductionProtonPBReaction.setActiveCenters(IAtomContainer reactant)", "testcase": false, "constructor": false}], "file": "base/reaction/src/main/java/org/openscience/cdk/reaction/type/AdductionProtonPBReaction.java"}, "focal_method": {"identifier": "initiate", "parameters": "(IAtomContainerSet reactants, IAtomContainerSet agents)", "modifiers": "@Override public", "return": "IReactionSet", "body": "@Override\n    public IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents) throws CDKException {\n\n        logger.debug(\"initiate reaction: AdductionProtonPBReaction\");\n\n        if (reactants.getAtomContainerCount() != 1) {\n            throw new CDKException(\"AdductionProtonPBReaction only expects one reactant\");\n        }\n        if (agents != null) {\n            throw new CDKException(\"AdductionProtonPBReaction don't expects agents\");\n        }\n\n        IReactionSet setOfReactions = reactants.getBuilder().newInstance(IReactionSet.class);\n        IAtomContainer reactant = reactants.getAtomContainer(0);\n\n        /*\n         * if the parameter hasActiveCenter is not fixed yet, set the active\n         * centers\n         */\n        IParameterReact ipr = super.getParameterClass(SetReactionCenter.class);\n        if (ipr != null && !ipr.isSetParameter()) setActiveCenters(reactant);\n\n        if (AtomContainerManipulator.getTotalCharge(reactant) != 0) return setOfReactions;\n\n        Iterator<IBond> bondis = reactant.bonds().iterator();\n        while (bondis.hasNext()) {\n            IBond bondi = bondis.next();\n\n            if (bondi.getFlag(CDKConstants.REACTIVE_CENTER)\n                    && ((bondi.getOrder() == IBond.Order.DOUBLE) || (bondi.getOrder() == IBond.Order.TRIPLE))\n                    && bondi.getBegin().getFlag(CDKConstants.REACTIVE_CENTER)\n                    && bondi.getEnd().getFlag(CDKConstants.REACTIVE_CENTER)) {\n                int chargeAtom0 = bondi.getBegin().getFormalCharge() == null ? 0 : bondi.getBegin().getFormalCharge();\n                int chargeAtom1 = bondi.getEnd().getFormalCharge() == null ? 0 : bondi.getEnd().getFormalCharge();\n                if (chargeAtom0 >= 0 && chargeAtom1 >= 0\n                        && reactant.getConnectedSingleElectronsCount(bondi.getBegin()) == 0\n                        && reactant.getConnectedSingleElectronsCount(bondi.getEnd()) == 0\n                        && reactant.getConnectedLonePairsCount(bondi.getBegin()) == 0\n                        && reactant.getConnectedLonePairsCount(bondi.getEnd()) == 0) {\n\n                    /**/\n                    for (int j = 0; j < 2; j++) {\n\n                        ArrayList<IAtom> atomList = new ArrayList<IAtom>();\n                        if (j == 0) {\n                            atomList.add(bondi.getBegin());\n                            atomList.add(bondi.getEnd());\n                        } else {\n                            atomList.add(bondi.getEnd());\n                            atomList.add(bondi.getBegin());\n                        }\n                        IAtom atomH = reactant.getBuilder().newInstance(IAtom.class, \"H\");\n                        atomH.setFormalCharge(1);\n                        atomList.add(atomH);\n\n                        ArrayList<IBond> bondList = new ArrayList<IBond>();\n                        bondList.add(bondi);\n\n                        IAtomContainerSet moleculeSet = reactant.getBuilder().newInstance(IAtomContainerSet.class);\n                        moleculeSet.addAtomContainer(reactant);\n                        IAtomContainer adduct = reactant.getBuilder().newInstance(IAtomContainer.class);\n                        adduct.addAtom(atomH);\n                        moleculeSet.addAtomContainer(adduct);\n\n                        IReaction reaction = mechanism.initiate(moleculeSet, atomList, bondList);\n                        if (reaction == null)\n                            continue;\n                        else\n                            setOfReactions.addReaction(reaction);\n\n                    }\n\n                }\n\n            }\n        }\n\n        return setOfReactions;\n    }", "signature": "IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "full_signature": "@Override public IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "class_method_signature": "AdductionProtonPBReaction.initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "testcase": false, "constructor": false, "invocations": ["debug", "getAtomContainerCount", "newInstance", "getBuilder", "getAtomContainer", "getParameterClass", "isSetParameter", "setActiveCenters", "getTotalCharge", "iterator", "bonds", "hasNext", "next", "getFlag", "getOrder", "getOrder", "getFlag", "getBegin", "getFlag", "getEnd", "getFormalCharge", "getBegin", "getFormalCharge", "getBegin", "getFormalCharge", "getEnd", "getFormalCharge", "getEnd", "getConnectedSingleElectronsCount", "getBegin", "getConnectedSingleElectronsCount", "getEnd", "getConnectedLonePairsCount", "getBegin", "getConnectedLonePairsCount", "getEnd", "add", "getBegin", "add", "getEnd", "add", "getEnd", "add", "getBegin", "newInstance", "getBuilder", "setFormalCharge", "add", "add", "newInstance", "getBuilder", "addAtomContainer", "newInstance", "getBuilder", "addAtom", "addAtomContainer", "initiate", "addReaction"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}