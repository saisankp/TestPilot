{"test_class": {"identifier": "ExtensionLoaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ExtensionLoaderTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ExtensionLoaderTest.class)", "var_name": "LOGGER"}], "file": "core/api/src/test/java/com/alipay/sofa/rpc/ext/ExtensionLoaderTest.java"}, "test_case": {"identifier": "testReadLine", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReadLine() throws Exception {\n        ExtensionLoader loader = new ExtensionLoader<Filter>(Filter.class, false, null);\n        URL url = Filter.class.getResource(\"/META-INF/sofa-rpc/\" + Filter.class.getName());\n        try {\n            loader.readLine(url, \"com.alipay.sofa.rpc.ext.NotFilter\");\n        } catch (Throwable t) {\n            LOGGER.error(t.getMessage());\n        }\n        Assert.assertTrue(loader.all.isEmpty());\n\n        try {\n            loader.readLine(url, null);\n        } catch (Throwable t) {\n            LOGGER.error(t.getMessage());\n        }\n        Assert.assertTrue(loader.all.isEmpty());\n\n        try {\n            loader.readLine(url, \"    \");\n        } catch (Throwable t) {\n            LOGGER.error(t.getMessage());\n        }\n        Assert.assertTrue(loader.all.isEmpty());\n\n        loader.all.clear();\n        try {\n            loader.readLine(url, \"com.alipay.sofa.rpc.ext.WrongFilter0\");\n        } catch (Throwable t) {\n            LOGGER.error(t.getMessage());\n        }\n        try {\n            loader.readLine(url, \"com.alipay.sofa.rpc.ext.WrongFilter1\");\n        } catch (Throwable t) {\n            LOGGER.error(t.getMessage());\n        }\n        try {\n            loader.readLine(url, \"com.alipay.sofa.rpc.ext.WrongFilter2\");\n        } catch (Throwable t) {\n            LOGGER.error(t.getMessage());\n        }\n        try {\n            loader.readLine(url, \"com.alipay.sofa.rpc.ext.WrongFilter3\");\n        } catch (Throwable t) {\n            LOGGER.error(t.getMessage());\n        }\n        try {\n            loader.readLine(url, \"w3=com.alipay.sofa.rpc.ext.WrongFilter4\");\n        } catch (Throwable t) {\n            LOGGER.error(t.getMessage());\n        }\n        try {\n            loader.readLine(url, \"echo1=com.alipay.sofa.rpc.ext.ExtensionFilter\");\n        } catch (Throwable t) {\n            LOGGER.error(t.getMessage());\n        }\n        Assert.assertTrue(loader.all.isEmpty());\n\n        try {\n            loader.readLine(url, \"com.alipay.sofa.rpc.ext.RightFilter0\");\n        } catch (Throwable t) {\n            LOGGER.error(t.getMessage());\n        }\n        Assert.assertFalse(loader.all.isEmpty());\n\n        loader.all.clear();\n        try {\n            loader.readLine(url, \"rightxx0=com.alipay.sofa.rpc.ext.RightFilter0\");\n        } catch (Throwable t) {\n            LOGGER.error(t.getMessage());\n        }\n        Assert.assertFalse(loader.all.isEmpty());\n\n        // \u91cd\u590d\u52a0\u8f7d\n        boolean isOk = true;\n        try {\n            loader.readLine(url, \"com.alipay.sofa.rpc.ext.RightFilter0\");\n        } catch (Throwable t) {\n            LOGGER.error(t.getMessage());\n            isOk = false;\n        }\n        Assert.assertFalse(isOk);\n        Assert.assertFalse(loader.all.isEmpty());\n        Assert.assertTrue(loader.all.size() == 1);\n\n        ExtensionLoader loader2 = new ExtensionLoader<Protocol>(Protocol.class, false, null);\n        URL url2 = Filter.class.getResource(\"/META-INF/sofa-rpc/\" + Protocol.class.getName());\n        try {\n            loader2.readLine(url2, \"com.alipay.sofa.rpc.ext.WrongProtocol\");\n        } catch (Throwable t) {\n            LOGGER.error(t.getMessage());\n        }\n        Assert.assertTrue(loader2.all.isEmpty());\n    }", "signature": "void testReadLine()", "full_signature": "@Test public void testReadLine()", "class_method_signature": "ExtensionLoaderTest.testReadLine()", "testcase": true, "constructor": false, "invocations": ["getResource", "getName", "readLine", "error", "getMessage", "assertTrue", "isEmpty", "readLine", "error", "getMessage", "assertTrue", "isEmpty", "readLine", "error", "getMessage", "assertTrue", "isEmpty", "clear", "readLine", "error", "getMessage", "readLine", "error", "getMessage", "readLine", "error", "getMessage", "readLine", "error", "getMessage", "readLine", "error", "getMessage", "readLine", "error", "getMessage", "assertTrue", "isEmpty", "readLine", "error", "getMessage", "assertFalse", "isEmpty", "clear", "readLine", "error", "getMessage", "assertFalse", "isEmpty", "readLine", "error", "getMessage", "assertFalse", "assertFalse", "isEmpty", "assertTrue", "size", "getResource", "getName", "readLine", "error", "getMessage", "assertTrue", "isEmpty"]}, "focal_class": {"identifier": "ExtensionLoader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static Logger                              LOGGER         = LoggerFactory\n                                                                                .getLogger(ExtensionLoader.class);", "modifier": "private final static", "type": "Logger", "declarator": "LOGGER         = LoggerFactory\n                                                                                .getLogger(ExtensionLoader.class)", "var_name": "LOGGER"}, {"original_string": "private static final String                              LOAD_FROM_CODE = \"DYNAMIC LOAD EXTENSION BY CODE\";", "modifier": "private static final", "type": "String", "declarator": "LOAD_FROM_CODE = \"DYNAMIC LOAD EXTENSION BY CODE\"", "var_name": "LOAD_FROM_CODE"}, {"original_string": "protected final Class<T>                                 interfaceClass;", "modifier": "protected final", "type": "Class<T>", "declarator": "interfaceClass", "var_name": "interfaceClass"}, {"original_string": "protected final String                                   interfaceName;", "modifier": "protected final", "type": "String", "declarator": "interfaceName", "var_name": "interfaceName"}, {"original_string": "protected final Extensible                               extensible;", "modifier": "protected final", "type": "Extensible", "declarator": "extensible", "var_name": "extensible"}, {"original_string": "protected final ConcurrentMap<String, ExtensionClass<T>> all;", "modifier": "protected final", "type": "ConcurrentMap<String, ExtensionClass<T>>", "declarator": "all", "var_name": "all"}, {"original_string": "protected final ConcurrentMap<String, T>                 factory;", "modifier": "protected final", "type": "ConcurrentMap<String, T>", "declarator": "factory", "var_name": "factory"}, {"original_string": "protected final List<ExtensionLoaderListener<T>>         listeners;", "modifier": "protected final", "type": "List<ExtensionLoaderListener<T>>", "declarator": "listeners", "var_name": "listeners"}], "methods": [{"identifier": "ExtensionLoader", "parameters": "(Class<T> interfaceClass, ExtensionLoaderListener<T> listener)", "modifiers": "public", "return": "", "signature": " ExtensionLoader(Class<T> interfaceClass, ExtensionLoaderListener<T> listener)", "full_signature": "public  ExtensionLoader(Class<T> interfaceClass, ExtensionLoaderListener<T> listener)", "class_method_signature": "ExtensionLoader.ExtensionLoader(Class<T> interfaceClass, ExtensionLoaderListener<T> listener)", "testcase": false, "constructor": true}, {"identifier": "ExtensionLoader", "parameters": "(Class<T> interfaceClass)", "modifiers": "protected", "return": "", "signature": " ExtensionLoader(Class<T> interfaceClass)", "full_signature": "protected  ExtensionLoader(Class<T> interfaceClass)", "class_method_signature": "ExtensionLoader.ExtensionLoader(Class<T> interfaceClass)", "testcase": false, "constructor": true}, {"identifier": "ExtensionLoader", "parameters": "(Class<T> interfaceClass, boolean autoLoad, ExtensionLoaderListener<T> listener)", "modifiers": "protected", "return": "", "signature": " ExtensionLoader(Class<T> interfaceClass, boolean autoLoad, ExtensionLoaderListener<T> listener)", "full_signature": "protected  ExtensionLoader(Class<T> interfaceClass, boolean autoLoad, ExtensionLoaderListener<T> listener)", "class_method_signature": "ExtensionLoader.ExtensionLoader(Class<T> interfaceClass, boolean autoLoad, ExtensionLoaderListener<T> listener)", "testcase": false, "constructor": true}, {"identifier": "loadFromFile", "parameters": "(String path)", "modifiers": "protected synchronized", "return": "void", "signature": "void loadFromFile(String path)", "full_signature": "protected synchronized void loadFromFile(String path)", "class_method_signature": "ExtensionLoader.loadFromFile(String path)", "testcase": false, "constructor": false}, {"identifier": "loadFromClassLoader", "parameters": "(ClassLoader classLoader, String fullFileName)", "modifiers": "protected", "return": "void", "signature": "void loadFromClassLoader(ClassLoader classLoader, String fullFileName)", "full_signature": "protected void loadFromClassLoader(ClassLoader classLoader, String fullFileName)", "class_method_signature": "ExtensionLoader.loadFromClassLoader(ClassLoader classLoader, String fullFileName)", "testcase": false, "constructor": false}, {"identifier": "readLine", "parameters": "(URL url, String line)", "modifiers": "protected", "return": "void", "signature": "void readLine(URL url, String line)", "full_signature": "protected void readLine(URL url, String line)", "class_method_signature": "ExtensionLoader.readLine(URL url, String line)", "testcase": false, "constructor": false}, {"identifier": "loadExtension", "parameters": "(String alias, Class loadedClazz, String location, String className)", "modifiers": "private", "return": "void", "signature": "void loadExtension(String alias, Class loadedClazz, String location, String className)", "full_signature": "private void loadExtension(String alias, Class loadedClazz, String location, String className)", "class_method_signature": "ExtensionLoader.loadExtension(String alias, Class loadedClazz, String location, String className)", "testcase": false, "constructor": false}, {"identifier": "buildClass", "parameters": "(Extension extension, Class<? extends T> implClass, String alias)", "modifiers": "private", "return": "ExtensionClass<T>", "signature": "ExtensionClass<T> buildClass(Extension extension, Class<? extends T> implClass, String alias)", "full_signature": "private ExtensionClass<T> buildClass(Extension extension, Class<? extends T> implClass, String alias)", "class_method_signature": "ExtensionLoader.buildClass(Extension extension, Class<? extends T> implClass, String alias)", "testcase": false, "constructor": false}, {"identifier": "loadSuccess", "parameters": "(String alias, ExtensionClass<T> extensionClass)", "modifiers": "private", "return": "void", "signature": "void loadSuccess(String alias, ExtensionClass<T> extensionClass)", "full_signature": "private void loadSuccess(String alias, ExtensionClass<T> extensionClass)", "class_method_signature": "ExtensionLoader.loadSuccess(String alias, ExtensionClass<T> extensionClass)", "testcase": false, "constructor": false}, {"identifier": "parseAliasAndClassName", "parameters": "(String line)", "modifiers": "protected", "return": "String[]", "signature": "String[] parseAliasAndClassName(String line)", "full_signature": "protected String[] parseAliasAndClassName(String line)", "class_method_signature": "ExtensionLoader.parseAliasAndClassName(String line)", "testcase": false, "constructor": false}, {"identifier": "getAllExtensions", "parameters": "()", "modifiers": "public", "return": "ConcurrentMap<String, ExtensionClass<T>>", "signature": "ConcurrentMap<String, ExtensionClass<T>> getAllExtensions()", "full_signature": "public ConcurrentMap<String, ExtensionClass<T>> getAllExtensions()", "class_method_signature": "ExtensionLoader.getAllExtensions()", "testcase": false, "constructor": false}, {"identifier": "getExtensionClass", "parameters": "(String alias)", "modifiers": "public", "return": "ExtensionClass<T>", "signature": "ExtensionClass<T> getExtensionClass(String alias)", "full_signature": "public ExtensionClass<T> getExtensionClass(String alias)", "class_method_signature": "ExtensionLoader.getExtensionClass(String alias)", "testcase": false, "constructor": false}, {"identifier": "getExtension", "parameters": "(String alias)", "modifiers": "public", "return": "T", "signature": "T getExtension(String alias)", "full_signature": "public T getExtension(String alias)", "class_method_signature": "ExtensionLoader.getExtension(String alias)", "testcase": false, "constructor": false}, {"identifier": "getExtension", "parameters": "(String alias, Class[] argTypes, Object[] args)", "modifiers": "public", "return": "T", "signature": "T getExtension(String alias, Class[] argTypes, Object[] args)", "full_signature": "public T getExtension(String alias, Class[] argTypes, Object[] args)", "class_method_signature": "ExtensionLoader.getExtension(String alias, Class[] argTypes, Object[] args)", "testcase": false, "constructor": false}, {"identifier": "loadExtension", "parameters": "(Class loadedClass)", "modifiers": "public", "return": "void", "signature": "void loadExtension(Class loadedClass)", "full_signature": "public void loadExtension(Class loadedClass)", "class_method_signature": "ExtensionLoader.loadExtension(Class loadedClass)", "testcase": false, "constructor": false}, {"identifier": "addListener", "parameters": "(ExtensionLoaderListener<T> listener)", "modifiers": "public", "return": "void", "signature": "void addListener(ExtensionLoaderListener<T> listener)", "full_signature": "public void addListener(ExtensionLoaderListener<T> listener)", "class_method_signature": "ExtensionLoader.addListener(ExtensionLoaderListener<T> listener)", "testcase": false, "constructor": false}], "file": "core/api/src/main/java/com/alipay/sofa/rpc/ext/ExtensionLoader.java"}, "focal_method": {"identifier": "readLine", "parameters": "(URL url, String line)", "modifiers": "protected", "return": "void", "body": "protected void readLine(URL url, String line) {\n        String[] aliasAndClassName = parseAliasAndClassName(line);\n        if (aliasAndClassName == null || aliasAndClassName.length != 2) {\n            return;\n        }\n        String alias = aliasAndClassName[0];\n        String className = aliasAndClassName[1];\n        // \u8bfb\u53d6\u914d\u7f6e\u7684\u5b9e\u73b0\u7c7b\n        Class tmp;\n        try {\n            tmp = ClassUtils.forName(className, false);\n        } catch (Throwable e) {\n            if (LOGGER.isWarnEnabled()) {\n                LOGGER.warn(\"Extension {} of extensible {} is disabled, cause by: {}\",\n                    className, interfaceName, ExceptionUtils.toShortString(e, 2));\n            }\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(\"Extension \" + className + \" of extensible \" + interfaceName + \" is disabled.\", e);\n            }\n            return;\n        }\n\n        loadExtension(alias, tmp, StringUtils.toString(url), className);\n    }", "signature": "void readLine(URL url, String line)", "full_signature": "protected void readLine(URL url, String line)", "class_method_signature": "ExtensionLoader.readLine(URL url, String line)", "testcase": false, "constructor": false, "invocations": ["parseAliasAndClassName", "forName", "isWarnEnabled", "warn", "toShortString", "isDebugEnabled", "debug", "loadExtension", "toString"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}