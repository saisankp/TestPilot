{"test_class": {"identifier": "JsonValueFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private JsonValueFactory jsonValueFactory;", "modifier": "private", "type": "JsonValueFactory", "declarator": "jsonValueFactory", "var_name": "jsonValueFactory"}], "file": "everrest-core/src/test/java/org/everrest/core/impl/provider/json/JsonValueFactoryTest.java"}, "test_case": {"identifier": "createsNullValueFromString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void createsNullValueFromString() {\n        JsonValue jsonValue = jsonValueFactory.createJsonValue(\"null\");\n\n        assertTrue(jsonValue.isNull());\n    }", "signature": "void createsNullValueFromString()", "full_signature": "@Test public void createsNullValueFromString()", "class_method_signature": "JsonValueFactoryTest.createsNullValueFromString()", "testcase": true, "constructor": false, "invocations": ["createJsonValue", "assertTrue", "isNull"]}, "focal_class": {"identifier": "JsonValueFactory", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "createJsonValue", "parameters": "(String string)", "modifiers": "public", "return": "JsonValue", "signature": "JsonValue createJsonValue(String string)", "full_signature": "public JsonValue createJsonValue(String string)", "class_method_signature": "JsonValueFactory.createJsonValue(String string)", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/impl/provider/json/JsonValueFactory.java"}, "focal_method": {"identifier": "createJsonValue", "parameters": "(String string)", "modifiers": "public", "return": "JsonValue", "body": "public JsonValue createJsonValue(String string) {\n        if (charAtIs(string, 0, '\"') && charAtIs(string, string.length() - 1, '\"')) {\n            return new StringValue(string.substring(1, string.length() - 1));\n        } else if (\"true\".equalsIgnoreCase(string) || \"false\".equalsIgnoreCase(string)) {\n            return new BooleanValue(Boolean.parseBoolean(string));\n        } else if (\"null\".equalsIgnoreCase(string)) {\n            return new NullValue();\n        } else {\n            char c = string.charAt(0);\n            if ((c >= '0' && c <= '9') || c == '.' || c == '-' || c == '+') {\n                if (c == '0') {\n                    if (string.length() > 2 && (string.charAt(1) == 'x' || string.charAt(1) == 'X')) {\n                        try {\n                            return new LongValue(Long.parseLong(string.substring(2), 16));\n                        } catch (NumberFormatException notHexNumber) {\n                        }\n                    } else {\n                        try {\n                            return new LongValue(Long.parseLong(string.substring(1), 8));\n                        } catch (NumberFormatException notOctNumber) {\n                            try {\n                                return new LongValue(Long.parseLong(string));\n                            } catch (NumberFormatException notLong) {\n                                try {\n                                    return new DoubleValue(Double.parseDouble(string));\n                                } catch (NumberFormatException notNumber) {\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    try {\n                        return new LongValue(Long.parseLong(string));\n                    } catch (NumberFormatException notLong) {\n                        try {\n                            return new DoubleValue(Double.parseDouble(string));\n                        } catch (NumberFormatException notNumber) {\n                        }\n                    }\n                }\n            }\n        }\n        return new StringValue(string);\n    }", "signature": "JsonValue createJsonValue(String string)", "full_signature": "public JsonValue createJsonValue(String string)", "class_method_signature": "JsonValueFactory.createJsonValue(String string)", "testcase": false, "constructor": false, "invocations": ["charAtIs", "charAtIs", "length", "substring", "length", "equalsIgnoreCase", "equalsIgnoreCase", "parseBoolean", "equalsIgnoreCase", "charAt", "length", "charAt", "charAt", "parseLong", "substring", "parseLong", "substring", "parseLong", "parseDouble", "parseLong", "parseDouble"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}