{"test_class": {"identifier": "DocViewPropertyTest", "superclass": "", "interfaces": "", "fields": [], "file": "vault-core/src/test/java/org/apache/jackrabbit/vault/util/DocViewPropertyTest.java"}, "test_case": {"identifier": "testEscape", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEscape() {\n        assertEscaped(\"hello\", \"hello\", false);\n        assertEscaped(\"hello, world\", \"hello, world\", false);\n        assertEscaped(\"hello, world\", \"hello\\\\, world\", true);\n        assertEscaped(\"[hello]\", \"\\\\[hello]\", false);\n        assertEscaped(\"[hello]\", \"[hello]\", true);\n        assertEscaped(\"{hello}\", \"\\\\{hello}\", false);\n        assertEscaped(\"{hello}\", \"{hello}\", true);\n        assertEscaped(\"hello\\u000fworld\", \"hello\\\\u000fworld\", false);\n        assertEscaped(\"hello\\u000fworld\", \"hello\\\\u000fworld\", true);\n        assertEscaped(\"hello\\\\world\", \"hello\\\\\\\\world\", false);\n        assertEscaped(\"hello\\\\world\", \"hello\\\\\\\\world\", true);\n    }", "signature": "void testEscape()", "full_signature": "@Test public void testEscape()", "class_method_signature": "DocViewPropertyTest.testEscape()", "testcase": true, "constructor": false, "invocations": ["assertEscaped", "assertEscaped", "assertEscaped", "assertEscaped", "assertEscaped", "assertEscaped", "assertEscaped", "assertEscaped", "assertEscaped", "assertEscaped", "assertEscaped"]}, "focal_class": {"identifier": "DocViewProperty", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String BINARY_REF = \"BinaryRef\";", "modifier": "private static final", "type": "String", "declarator": "BINARY_REF = \"BinaryRef\"", "var_name": "BINARY_REF"}, {"original_string": "public final String name;", "modifier": "public final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "public final String[] values;", "modifier": "public final", "type": "String[]", "declarator": "values", "var_name": "values"}, {"original_string": "public final boolean isMulti;", "modifier": "public final", "type": "boolean", "declarator": "isMulti", "var_name": "isMulti"}, {"original_string": "public final int type;", "modifier": "public final", "type": "int", "declarator": "type", "var_name": "type"}, {"original_string": "public final boolean isReferenceProperty;", "modifier": "public final", "type": "boolean", "declarator": "isReferenceProperty", "var_name": "isReferenceProperty"}, {"original_string": "private static final Set<String> UNAMBIGOUS = new HashSet<String>();", "modifier": "private static final", "type": "Set<String>", "declarator": "UNAMBIGOUS = new HashSet<String>()", "var_name": "UNAMBIGOUS"}], "methods": [{"identifier": "DocViewProperty", "parameters": "(String name, String[] values, boolean multi, int type)", "modifiers": "public", "return": "", "signature": " DocViewProperty(String name, String[] values, boolean multi, int type)", "full_signature": "public  DocViewProperty(String name, String[] values, boolean multi, int type)", "class_method_signature": "DocViewProperty.DocViewProperty(String name, String[] values, boolean multi, int type)", "testcase": false, "constructor": true}, {"identifier": "DocViewProperty", "parameters": "(String name, String[] values, boolean multi, int type, boolean isRef)", "modifiers": "public", "return": "", "signature": " DocViewProperty(String name, String[] values, boolean multi, int type, boolean isRef)", "full_signature": "public  DocViewProperty(String name, String[] values, boolean multi, int type, boolean isRef)", "class_method_signature": "DocViewProperty.DocViewProperty(String name, String[] values, boolean multi, int type, boolean isRef)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(String name, String value)", "modifiers": "public static", "return": "DocViewProperty", "signature": "DocViewProperty parse(String name, String value)", "full_signature": "public static DocViewProperty parse(String name, String value)", "class_method_signature": "DocViewProperty.parse(String name, String value)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(Property prop)", "modifiers": "public static", "return": "String", "signature": "String format(Property prop)", "full_signature": "public static String format(Property prop)", "class_method_signature": "DocViewProperty.format(Property prop)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(Property prop, boolean sort, boolean useBinaryReferences)", "modifiers": "public static", "return": "String", "signature": "String format(Property prop, boolean sort, boolean useBinaryReferences)", "full_signature": "public static String format(Property prop, boolean sort, boolean useBinaryReferences)", "class_method_signature": "DocViewProperty.format(Property prop, boolean sort, boolean useBinaryReferences)", "testcase": false, "constructor": false}, {"identifier": "escape", "parameters": "(StringBuffer buf, String value, boolean isMulti)", "modifiers": "protected static", "return": "void", "signature": "void escape(StringBuffer buf, String value, boolean isMulti)", "full_signature": "protected static void escape(StringBuffer buf, String value, boolean isMulti)", "class_method_signature": "DocViewProperty.escape(StringBuffer buf, String value, boolean isMulti)", "testcase": false, "constructor": false}, {"identifier": "isAmbiguous", "parameters": "(Property prop)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAmbiguous(Property prop)", "full_signature": "public static boolean isAmbiguous(Property prop)", "class_method_signature": "DocViewProperty.isAmbiguous(Property prop)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(Node node)", "modifiers": "public", "return": "boolean", "signature": "boolean apply(Node node)", "full_signature": "public boolean apply(Node node)", "class_method_signature": "DocViewProperty.apply(Node node)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DocViewProperty.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "DocViewProperty.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DocViewProperty.toString()", "testcase": false, "constructor": false}], "file": "vault-core/src/main/java/org/apache/jackrabbit/vault/util/DocViewProperty.java"}, "focal_method": {"identifier": "escape", "parameters": "(StringBuffer buf, String value, boolean isMulti)", "modifiers": "protected static", "return": "void", "body": "protected static void escape(StringBuffer buf, String value, boolean isMulti) {\n        for (int i=0; i<value.length(); i++) {\n            char c = value.charAt(i);\n            if (c == '\\\\') {\n                buf.append(\"\\\\\\\\\");\n            } else if (c == ',' && isMulti) {\n                buf.append(\"\\\\,\");\n            } else if (i == 0 && !isMulti && (c == '[' || c == '{')) {\n                buf.append('\\\\').append(c);\n            } else if ( XMLChar.isInvalid(c)) {\n                buf.append(\"\\\\u\");\n                buf.append(Text.hexTable[(c >> 12) & 15]);\n                buf.append(Text.hexTable[(c >> 8) & 15]);\n                buf.append(Text.hexTable[(c >> 4) & 15]);\n                buf.append(Text.hexTable[c & 15]);\n            } else {\n                buf.append(c);\n            }\n        }\n    }", "signature": "void escape(StringBuffer buf, String value, boolean isMulti)", "full_signature": "protected static void escape(StringBuffer buf, String value, boolean isMulti)", "class_method_signature": "DocViewProperty.escape(StringBuffer buf, String value, boolean isMulti)", "testcase": false, "constructor": false, "invocations": ["length", "charAt", "append", "append", "append", "append", "isInvalid", "append", "append", "append", "append", "append", "append"]}, "repository": {"repo_id": 16021499, "url": "https://github.com/apache/jackrabbit-filevault", "stars": 24, "created": "1/18/2014 8:00:07 AM +00:00", "updates": "2020-01-22T11:47:21+00:00", "fork": "False", "license": "licensed"}}