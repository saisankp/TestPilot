{"test_class": {"identifier": "SimpleStreamTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Tested private SimpleStream stream;", "modifier": "@Tested private", "type": "SimpleStream", "declarator": "stream", "var_name": "stream"}, {"original_string": "@Mocked private SimpleProcessingItem sourcePi, destPi;", "modifier": "@Mocked private", "type": "SimpleProcessingItem", "declarator": "sourcePi", "var_name": "sourcePi"}, {"original_string": "@Mocked private ContentEvent event;", "modifier": "@Mocked private", "type": "ContentEvent", "declarator": "event", "var_name": "event"}, {"original_string": "@Mocked private StreamDestination destination;", "modifier": "@Mocked private", "type": "StreamDestination", "declarator": "destination", "var_name": "destination"}, {"original_string": "private final String eventKey = \"eventkey\";", "modifier": "private final", "type": "String", "declarator": "eventKey = \"eventkey\"", "var_name": "eventKey"}, {"original_string": "private final int parallelism;", "modifier": "private final", "type": "int", "declarator": "parallelism", "var_name": "parallelism"}, {"original_string": "private final PartitioningScheme scheme;", "modifier": "private final", "type": "PartitioningScheme", "declarator": "scheme", "var_name": "scheme"}], "file": "samoa-local/src/test/java/com/yahoo/labs/samoa/topology/impl/SimpleStreamTest.java"}, "test_case": {"identifier": "testPut", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testPut() {\n\t\tnew NonStrictExpectations() {\n\t\t\t{\n\t\t\t\tevent.getKey(); result=eventKey;\n\t\t\t\tdestination.getProcessingItem(); result=destPi;\n\t\t\t\tdestination.getPartitioningScheme(); result=scheme;\n\t\t\t\tdestination.getParallelism(); result=parallelism;\n\t\t\t\t\n\t\t\t}\n\t\t};\n\t\tswitch(this.scheme) {\n\t\tcase SHUFFLE: case GROUP_BY_KEY:\n\t\t\tnew Expectations() {\n\t\t\t\t{\n\t\t\t\t\t// TODO: restrict the range of counter value\n\t\t\t\t\tdestPi.processEvent(event, anyInt); times=1;\n\t\t\t\t}\n\t\t\t};\n\t\t\tbreak;\n\t\tcase BROADCAST:\n\t\t\tnew Expectations() {\n\t\t\t\t{\n\t\t\t\t\t// TODO: restrict the range of counter value\n\t\t\t\t\tdestPi.processEvent(event, anyInt); times=parallelism;\n\t\t\t\t}\n\t\t\t};\n\t\t\tbreak;\n\t\t}\n\t\tstream.put(event);\n\t}", "signature": "void testPut()", "full_signature": "@Test public void testPut()", "class_method_signature": "SimpleStreamTest.testPut()", "testcase": true, "constructor": false, "invocations": ["getKey", "getProcessingItem", "getPartitioningScheme", "getParallelism", "processEvent", "processEvent", "put"]}, "focal_class": {"identifier": "SimpleStream", "superclass": "extends AbstractStream", "interfaces": "", "fields": [{"original_string": "private List<StreamDestination> destinations;", "modifier": "private", "type": "List<StreamDestination>", "declarator": "destinations", "var_name": "destinations"}, {"original_string": "private int maxCounter;", "modifier": "private", "type": "int", "declarator": "maxCounter", "var_name": "maxCounter"}, {"original_string": "private int eventCounter;", "modifier": "private", "type": "int", "declarator": "eventCounter", "var_name": "eventCounter"}], "methods": [{"identifier": "SimpleStream", "parameters": "(IProcessingItem sourcePi)", "modifiers": "", "return": "", "signature": " SimpleStream(IProcessingItem sourcePi)", "full_signature": "  SimpleStream(IProcessingItem sourcePi)", "class_method_signature": "SimpleStream.SimpleStream(IProcessingItem sourcePi)", "testcase": false, "constructor": true}, {"identifier": "getNextCounter", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int getNextCounter()", "full_signature": "private int getNextCounter()", "class_method_signature": "SimpleStream.getNextCounter()", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(ContentEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void put(ContentEvent event)", "full_signature": "@Override public void put(ContentEvent event)", "class_method_signature": "SimpleStream.put(ContentEvent event)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(ContentEvent event, int counter)", "modifiers": "private", "return": "void", "signature": "void put(ContentEvent event, int counter)", "full_signature": "private void put(ContentEvent event, int counter)", "class_method_signature": "SimpleStream.put(ContentEvent event, int counter)", "testcase": false, "constructor": false}, {"identifier": "addDestination", "parameters": "(StreamDestination destination)", "modifiers": "public", "return": "void", "signature": "void addDestination(StreamDestination destination)", "full_signature": "public void addDestination(StreamDestination destination)", "class_method_signature": "SimpleStream.addDestination(StreamDestination destination)", "testcase": false, "constructor": false}], "file": "samoa-local/src/main/java/com/yahoo/labs/samoa/topology/impl/SimpleStream.java"}, "focal_method": {"identifier": "put", "parameters": "(ContentEvent event)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void put(ContentEvent event) {\n    \tthis.put(event, this.getNextCounter());\n    }", "signature": "void put(ContentEvent event)", "full_signature": "@Override public void put(ContentEvent event)", "class_method_signature": "SimpleStream.put(ContentEvent event)", "testcase": false, "constructor": false, "invocations": ["put", "getNextCounter"]}, "repository": {"repo_id": 13505122, "url": "https://github.com/YahooArchive/samoa", "language": "Java", "is_fork": false, "fork_count": 82, "stargazer_count": 424, "size": 6642, "license": "licensed"}}