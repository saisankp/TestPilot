{"test_class": {"identifier": "UrlUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "webmagic-core/src/test/java/us/codecraft/webmagic/utils/UrlUtilsTest.java"}, "test_case": {"identifier": "testFixRelativeUrl", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFixRelativeUrl() {\n        String absoluteUrl = UrlUtils.canonicalizeUrl(\"aa\", \"http://www.dianping.com/sh/ss/com\");\n        assertThat(absoluteUrl).isEqualTo(\"http://www.dianping.com/sh/ss/aa\");\n\n        absoluteUrl = UrlUtils.canonicalizeUrl(\"../aa\", \"http://www.dianping.com/sh/ss/com\");\n        assertThat(absoluteUrl).isEqualTo(\"http://www.dianping.com/sh/aa\");\n\n        absoluteUrl = UrlUtils.canonicalizeUrl(\"../mshz\", \"http://www.court.gov.cn/zgcpwsw/zgrmfy/\");\n        assertThat(absoluteUrl).isEqualTo(\"http://www.court.gov.cn/zgcpwsw/mshz\");\n\n        absoluteUrl = UrlUtils.canonicalizeUrl(\"..aa\", \"http://www.dianping.com/sh/ss/com\");\n        assertThat(absoluteUrl).isEqualTo(\"http://www.dianping.com/sh/ss/..aa\");\n\n        absoluteUrl = UrlUtils.canonicalizeUrl(\"../../aa\", \"http://www.dianping.com/sh/ss/com/\");\n        assertThat(absoluteUrl).isEqualTo(\"http://www.dianping.com/sh/aa\");\n\n        absoluteUrl = UrlUtils.canonicalizeUrl(\"../../aa\", \"http://www.dianping.com/sh/ss/com\");\n        assertThat(absoluteUrl).isEqualTo(\"http://www.dianping.com/aa\");\n    }", "signature": "void testFixRelativeUrl()", "full_signature": "@Test public void testFixRelativeUrl()", "class_method_signature": "UrlUtilsTest.testFixRelativeUrl()", "testcase": true, "constructor": false, "invocations": ["canonicalizeUrl", "isEqualTo", "assertThat", "canonicalizeUrl", "isEqualTo", "assertThat", "canonicalizeUrl", "isEqualTo", "assertThat", "canonicalizeUrl", "isEqualTo", "assertThat", "canonicalizeUrl", "isEqualTo", "assertThat", "canonicalizeUrl", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "UrlUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Pattern patternForProtocal = Pattern.compile(\"[\\\\w]+://\");", "modifier": "private static", "type": "Pattern", "declarator": "patternForProtocal = Pattern.compile(\"[\\\\w]+://\")", "var_name": "patternForProtocal"}, {"original_string": "private static final Pattern patternForCharset = Pattern.compile(\"charset\\\\s*=\\\\s*['\\\"]*([^\\\\s;'\\\"]*)\", Pattern.CASE_INSENSITIVE);", "modifier": "private static final", "type": "Pattern", "declarator": "patternForCharset = Pattern.compile(\"charset\\\\s*=\\\\s*['\\\"]*([^\\\\s;'\\\"]*)\", Pattern.CASE_INSENSITIVE)", "var_name": "patternForCharset"}], "methods": [{"identifier": "canonicalizeUrl", "parameters": "(String url, String refer)", "modifiers": "public static", "return": "String", "signature": "String canonicalizeUrl(String url, String refer)", "full_signature": "public static String canonicalizeUrl(String url, String refer)", "class_method_signature": "UrlUtils.canonicalizeUrl(String url, String refer)", "testcase": false, "constructor": false}, {"identifier": "encodeIllegalCharacterInUrl", "parameters": "(String url)", "modifiers": "public static", "return": "String", "signature": "String encodeIllegalCharacterInUrl(String url)", "full_signature": "public static String encodeIllegalCharacterInUrl(String url)", "class_method_signature": "UrlUtils.encodeIllegalCharacterInUrl(String url)", "testcase": false, "constructor": false}, {"identifier": "fixIllegalCharacterInUrl", "parameters": "(String url)", "modifiers": "public static", "return": "String", "signature": "String fixIllegalCharacterInUrl(String url)", "full_signature": "public static String fixIllegalCharacterInUrl(String url)", "class_method_signature": "UrlUtils.fixIllegalCharacterInUrl(String url)", "testcase": false, "constructor": false}, {"identifier": "getHost", "parameters": "(String url)", "modifiers": "public static", "return": "String", "signature": "String getHost(String url)", "full_signature": "public static String getHost(String url)", "class_method_signature": "UrlUtils.getHost(String url)", "testcase": false, "constructor": false}, {"identifier": "removeProtocol", "parameters": "(String url)", "modifiers": "public static", "return": "String", "signature": "String removeProtocol(String url)", "full_signature": "public static String removeProtocol(String url)", "class_method_signature": "UrlUtils.removeProtocol(String url)", "testcase": false, "constructor": false}, {"identifier": "getDomain", "parameters": "(String url)", "modifiers": "public static", "return": "String", "signature": "String getDomain(String url)", "full_signature": "public static String getDomain(String url)", "class_method_signature": "UrlUtils.getDomain(String url)", "testcase": false, "constructor": false}, {"identifier": "removePort", "parameters": "(String domain)", "modifiers": "public static", "return": "String", "signature": "String removePort(String domain)", "full_signature": "public static String removePort(String domain)", "class_method_signature": "UrlUtils.removePort(String domain)", "testcase": false, "constructor": false}, {"identifier": "convertToRequests", "parameters": "(Collection<String> urls)", "modifiers": "public static", "return": "List<Request>", "signature": "List<Request> convertToRequests(Collection<String> urls)", "full_signature": "public static List<Request> convertToRequests(Collection<String> urls)", "class_method_signature": "UrlUtils.convertToRequests(Collection<String> urls)", "testcase": false, "constructor": false}, {"identifier": "convertToUrls", "parameters": "(Collection<Request> requests)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> convertToUrls(Collection<Request> requests)", "full_signature": "public static List<String> convertToUrls(Collection<Request> requests)", "class_method_signature": "UrlUtils.convertToUrls(Collection<Request> requests)", "testcase": false, "constructor": false}, {"identifier": "getCharset", "parameters": "(String contentType)", "modifiers": "public static", "return": "String", "signature": "String getCharset(String contentType)", "full_signature": "public static String getCharset(String contentType)", "class_method_signature": "UrlUtils.getCharset(String contentType)", "testcase": false, "constructor": false}], "file": "webmagic-core/src/main/java/us/codecraft/webmagic/utils/UrlUtils.java"}, "focal_method": {"identifier": "canonicalizeUrl", "parameters": "(String url, String refer)", "modifiers": "public static", "return": "String", "body": "public static String canonicalizeUrl(String url, String refer) {\n        URL base;\n        try {\n            try {\n                base = new URL(refer);\n            } catch (MalformedURLException e) {\n                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                URL abs = new URL(refer);\n                return abs.toExternalForm();\n            }\n            // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n            if (url.startsWith(\"?\"))\n                url = base.getPath() + url;\n            URL abs = new URL(base, url);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }", "signature": "String canonicalizeUrl(String url, String refer)", "full_signature": "public static String canonicalizeUrl(String url, String refer)", "class_method_signature": "UrlUtils.canonicalizeUrl(String url, String refer)", "testcase": false, "constructor": false, "invocations": ["toExternalForm", "startsWith", "getPath", "toExternalForm"]}, "repository": {"repo_id": 9623064, "url": "https://github.com/code4craft/webmagic", "language": "Java", "is_fork": false, "fork_count": 3804, "stargazer_count": 9136, "size": 17041, "license": "licensed"}}