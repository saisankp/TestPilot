{"test_class": {"identifier": "PetitjeanShapeIndexDescriptorTest", "superclass": "extends MolecularDescriptorTest", "interfaces": "", "fields": [], "file": "descriptor/qsarmolecular/src/test/java/org/openscience/cdk/qsar/descriptors/molecular/PetitjeanShapeIndexDescriptorTest.java"}, "test_case": {"identifier": "testPetiteJeanShapeNo3D", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPetiteJeanShapeNo3D() throws Exception {\n        SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance());\n        IAtomContainer atomContainer = sp.parseSmiles(\"CCCOCCC(O)=O\");\n        DescriptorValue result = descriptor.calculate(atomContainer);\n        DoubleArrayResult dar = (DoubleArrayResult) result.getValue();\n        Assert.assertTrue(Double.isNaN(dar.get(1)));\n\n    }", "signature": "void testPetiteJeanShapeNo3D()", "full_signature": "@Test public void testPetiteJeanShapeNo3D()", "class_method_signature": "PetitjeanShapeIndexDescriptorTest.testPetiteJeanShapeNo3D()", "testcase": true, "constructor": false, "invocations": ["getInstance", "parseSmiles", "calculate", "getValue", "assertTrue", "isNaN", "get"]}, "focal_class": {"identifier": "PetitjeanShapeIndexDescriptor", "superclass": "extends AbstractMolecularDescriptor", "interfaces": "implements IMolecularDescriptor", "fields": [{"original_string": "private static final String[] NAMES = {\"topoShape\", \"geomShape\"};", "modifier": "private static final", "type": "String[]", "declarator": "NAMES = {\"topoShape\", \"geomShape\"}", "var_name": "NAMES"}], "methods": [{"identifier": "PetitjeanShapeIndexDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " PetitjeanShapeIndexDescriptor()", "full_signature": "public  PetitjeanShapeIndexDescriptor()", "class_method_signature": "PetitjeanShapeIndexDescriptor.PetitjeanShapeIndexDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "PetitjeanShapeIndexDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "PetitjeanShapeIndexDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "PetitjeanShapeIndexDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "PetitjeanShapeIndexDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "PetitjeanShapeIndexDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "PetitjeanShapeIndexDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer container)", "class_method_signature": "PetitjeanShapeIndexDescriptor.calculate(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "getDescriptorResultType", "parameters": "()", "modifiers": "@Override public", "return": "IDescriptorResult", "signature": "IDescriptorResult getDescriptorResultType()", "full_signature": "@Override public IDescriptorResult getDescriptorResultType()", "class_method_signature": "PetitjeanShapeIndexDescriptor.getDescriptorResultType()", "testcase": false, "constructor": false}], "file": "descriptor/qsarmolecular/src/main/java/org/openscience/cdk/qsar/descriptors/molecular/PetitjeanShapeIndexDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtomContainer container) {\n        IAtomContainer local = AtomContainerManipulator.removeHydrogens(container);\n\n        int tradius = PathTools.getMolecularGraphRadius(local);\n        int tdiameter = PathTools.getMolecularGraphDiameter(local);\n\n        DoubleArrayResult retval = new DoubleArrayResult();\n        retval.add((double) (tdiameter - tradius) / (double) tradius);\n\n        // get the 3D distance matrix\n        if (GeometryUtil.has3DCoordinates(container)) {\n            int natom = container.getAtomCount();\n            double[][] distanceMatrix = new double[natom][natom];\n            for (int i = 0; i < natom; i++) {\n                for (int j = 0; j < natom; j++) {\n                    if (i == j) {\n                        distanceMatrix[i][j] = 0.0;\n                        continue;\n                    }\n\n                    Point3d a = container.getAtom(i).getPoint3d();\n                    Point3d b = container.getAtom(j).getPoint3d();\n                    distanceMatrix[i][j] = Math.sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y)\n                            + (a.z - b.z) * (a.z - b.z));\n                }\n            }\n            double gradius = 999999;\n            double gdiameter = -999999;\n            double[] geta = new double[natom];\n            for (int i = 0; i < natom; i++) {\n                double max = -99999;\n                for (int j = 0; j < natom; j++) {\n                    if (distanceMatrix[i][j] > max) max = distanceMatrix[i][j];\n                }\n                geta[i] = max;\n            }\n            for (int i = 0; i < natom; i++) {\n                if (geta[i] < gradius) gradius = geta[i];\n                if (geta[i] > gdiameter) gdiameter = geta[i];\n            }\n            retval.add((gdiameter - gradius) / gradius);\n        } else {\n            retval.add(Double.NaN);\n        }\n\n        return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), retval,\n                getDescriptorNames());\n    }", "signature": "DescriptorValue calculate(IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer container)", "class_method_signature": "PetitjeanShapeIndexDescriptor.calculate(IAtomContainer container)", "testcase": false, "constructor": false, "invocations": ["removeHydrogens", "getMolecularGraphRadius", "getMolecularGraphDiameter", "add", "has3DCoordinates", "getAtomCount", "getPoint3d", "getAtom", "getPoint3d", "getAtom", "sqrt", "add", "add", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}