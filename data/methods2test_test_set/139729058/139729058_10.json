{"test_class": {"identifier": "TestOrMatcher", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static ClassPool pool = ClassPool.getDefault();", "modifier": "private final static", "type": "ClassPool", "declarator": "pool = ClassPool.getDefault()", "var_name": "pool"}], "file": "com.gzoltar.core/src/test/java/com/gzoltar/core/instr/matchers/TestOrMatcher.java"}, "test_case": {"identifier": "testPublicOrProtectedMethods", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testPublicOrProtectedMethods() throws Exception {\n    MethodModifierMatcher publicMethodsMatcher = new MethodModifierMatcher(AccessFlag.PUBLIC);\n    MethodModifierMatcher protectedMethodsMatcher = new MethodModifierMatcher(AccessFlag.PROTECTED);\n    OrMatcher orMatcher = new OrMatcher(publicMethodsMatcher, protectedMethodsMatcher);\n\n    CtClass ctClass = pool.get(PublicModifiers.class.getCanonicalName());\n    CtBehavior ctBehavior = ctClass.getDeclaredMethod(\"isNegative\");\n    assertTrue(orMatcher.matches(ctBehavior));\n\n    ctClass = pool.get(ProtectedModifiers.class.getCanonicalName());\n    ctBehavior = ctClass.getDeclaredMethod(\"isNegative\");\n    assertTrue(orMatcher.matches(ctBehavior));\n\n    ctClass = pool.get(PrivateModifiers.class.getCanonicalName());\n    ctBehavior = ctClass.getDeclaredMethod(\"isNegative\");\n    assertFalse(orMatcher.matches(ctBehavior));\n  }", "signature": "void testPublicOrProtectedMethods()", "full_signature": "@Test public void testPublicOrProtectedMethods()", "class_method_signature": "TestOrMatcher.testPublicOrProtectedMethods()", "testcase": true, "constructor": false, "invocations": ["get", "getCanonicalName", "getDeclaredMethod", "assertTrue", "matches", "get", "getCanonicalName", "getDeclaredMethod", "assertTrue", "matches", "get", "getCanonicalName", "getDeclaredMethod", "assertFalse", "matches"]}, "focal_class": {"identifier": "OrMatcher", "superclass": "", "interfaces": "implements IMatcher", "fields": [{"original_string": "private final IMatcher[] matchers;", "modifier": "private final", "type": "IMatcher[]", "declarator": "matchers", "var_name": "matchers"}], "methods": [{"identifier": "OrMatcher", "parameters": "(final IMatcher... matchers)", "modifiers": "public", "return": "", "signature": " OrMatcher(final IMatcher... matchers)", "full_signature": "public  OrMatcher(final IMatcher... matchers)", "class_method_signature": "OrMatcher.OrMatcher(final IMatcher... matchers)", "testcase": false, "constructor": true}, {"identifier": "matches", "parameters": "(final CtClass ctClass)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean matches(final CtClass ctClass)", "full_signature": "@Override public boolean matches(final CtClass ctClass)", "class_method_signature": "OrMatcher.matches(final CtClass ctClass)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(final CtBehavior ctBehavior)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean matches(final CtBehavior ctBehavior)", "full_signature": "@Override public boolean matches(final CtBehavior ctBehavior)", "class_method_signature": "OrMatcher.matches(final CtBehavior ctBehavior)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(final CtField ctField)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean matches(final CtField ctField)", "full_signature": "@Override public boolean matches(final CtField ctField)", "class_method_signature": "OrMatcher.matches(final CtField ctField)", "testcase": false, "constructor": false}], "file": "com.gzoltar.core/src/main/java/com/gzoltar/core/instr/matchers/OrMatcher.java"}, "focal_method": {"identifier": "matches", "parameters": "(final CtClass ctClass)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n  public boolean matches(final CtClass ctClass) {\n    for (IMatcher mat : this.matchers) {\n      if (mat.matches(ctClass)) {\n        return true;\n      }\n    }\n    return false;\n  }", "signature": "boolean matches(final CtClass ctClass)", "full_signature": "@Override public boolean matches(final CtClass ctClass)", "class_method_signature": "OrMatcher.matches(final CtClass ctClass)", "testcase": false, "constructor": false, "invocations": ["matches"]}, "repository": {"repo_id": 139729058, "url": "https://github.com/GZoltar/gzoltar", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 30, "size": 2454, "license": "licensed"}}