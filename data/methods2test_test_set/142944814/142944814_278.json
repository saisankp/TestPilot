{"test_class": {"identifier": "ExceptionUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/util/src/test/java/hera/util/ExceptionUtilsTest.java"}, "test_case": {"identifier": "testTraceOnStackTraceElementWithStartAndEnd", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testTraceOnStackTraceElementWithStartAndEnd() {\n    final Thread th = Thread.currentThread();\n    final StackTraceElement[] elements = th.getStackTrace();\n    final int start = 0;\n    final int end = elements.length;\n\n    assertNull(ExceptionUtils.trace(null, start, end));\n\n    try {\n      ExceptionUtils.trace(elements, start - 1, end);\n    } catch (Exception e) {\n      assertSame(ArrayIndexOutOfBoundsException.class, e.getClass());\n    }\n\n    try {\n      ExceptionUtils.trace(elements, start, end + 1);\n    } catch (Exception e) {\n      assertSame(ArrayIndexOutOfBoundsException.class, e.getClass());\n    }\n\n    try {\n      ExceptionUtils.trace(elements, start - 1, end + 1);\n    } catch (Exception e) {\n      assertSame(ArrayIndexOutOfBoundsException.class, e.getClass());\n    }\n\n    assertNotNull(ExceptionUtils.trace(elements, start, end));\n  }", "signature": "void testTraceOnStackTraceElementWithStartAndEnd()", "full_signature": "@Test public void testTraceOnStackTraceElementWithStartAndEnd()", "class_method_signature": "ExceptionUtilsTest.testTraceOnStackTraceElementWithStartAndEnd()", "testcase": true, "constructor": false, "invocations": ["currentThread", "getStackTrace", "assertNull", "trace", "trace", "assertSame", "getClass", "trace", "assertSame", "getClass", "trace", "assertSame", "getClass", "assertNotNull", "trace"]}, "focal_class": {"identifier": "ExceptionUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "buildExceptionMessage", "parameters": "(\n      final String message,\n      final Throwable cause)", "modifiers": "public static", "return": "String", "signature": "String buildExceptionMessage(\n      final String message,\n      final Throwable cause)", "full_signature": "public static String buildExceptionMessage(\n      final String message,\n      final Throwable cause)", "class_method_signature": "ExceptionUtils.buildExceptionMessage(\n      final String message,\n      final Throwable cause)", "testcase": false, "constructor": false}, {"identifier": "trace", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String trace()", "full_signature": "public static String trace()", "class_method_signature": "ExceptionUtils.trace()", "testcase": false, "constructor": false}, {"identifier": "trace", "parameters": "(\n      final StackTraceElement[] elements)", "modifiers": "public static", "return": "String", "signature": "String trace(\n      final StackTraceElement[] elements)", "full_signature": "public static String trace(\n      final StackTraceElement[] elements)", "class_method_signature": "ExceptionUtils.trace(\n      final StackTraceElement[] elements)", "testcase": false, "constructor": false}, {"identifier": "trace", "parameters": "(\n      final StackTraceElement[] elements,\n      final int start,\n      final int end)", "modifiers": "public static", "return": "String", "signature": "String trace(\n      final StackTraceElement[] elements,\n      final int start,\n      final int end)", "full_signature": "public static String trace(\n      final StackTraceElement[] elements,\n      final int start,\n      final int end)", "class_method_signature": "ExceptionUtils.trace(\n      final StackTraceElement[] elements,\n      final int start,\n      final int end)", "testcase": false, "constructor": false}, {"identifier": "getStackTraceOf", "parameters": "(\n      final Throwable e)", "modifiers": "public static", "return": "String", "signature": "String getStackTraceOf(\n      final Throwable e)", "full_signature": "public static String getStackTraceOf(\n      final Throwable e)", "class_method_signature": "ExceptionUtils.getStackTraceOf(\n      final Throwable e)", "testcase": false, "constructor": false}, {"identifier": "concat", "parameters": "(final StackTraceElement[] left,\n      final StackTraceElement[] right)", "modifiers": "public static", "return": "StackTraceElement[]", "signature": "StackTraceElement[] concat(final StackTraceElement[] left,\n      final StackTraceElement[] right)", "full_signature": "public static StackTraceElement[] concat(final StackTraceElement[] left,\n      final StackTraceElement[] right)", "class_method_signature": "ExceptionUtils.concat(final StackTraceElement[] left,\n      final StackTraceElement[] right)", "testcase": false, "constructor": false}], "file": "core/util/src/main/java/hera/util/ExceptionUtils.java"}, "focal_method": {"identifier": "trace", "parameters": "()", "modifiers": "public static", "return": "String", "body": "public static String trace() {\n    final Thread th = Thread.currentThread();\n    final StackTraceElement[] elements = th.getStackTrace();\n    return trace(elements, 2, elements.length);\n  }", "signature": "String trace()", "full_signature": "public static String trace()", "class_method_signature": "ExceptionUtils.trace()", "testcase": false, "constructor": false, "invocations": ["currentThread", "getStackTrace", "trace"]}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}