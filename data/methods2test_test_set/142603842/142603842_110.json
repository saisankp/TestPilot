{"test_class": {"identifier": "DemoServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private RoutingProblemList routingProblems;", "modifier": "@Mock\n    private", "type": "RoutingProblemList", "declarator": "routingProblems", "var_name": "routingProblems"}, {"original_string": "@Mock\n    private LocationService locationService;", "modifier": "@Mock\n    private", "type": "LocationService", "declarator": "locationService", "var_name": "locationService"}, {"original_string": "@Mock\n    private LocationRepository locationRepository;", "modifier": "@Mock\n    private", "type": "LocationRepository", "declarator": "locationRepository", "var_name": "locationRepository"}, {"original_string": "@Mock\n    private VehicleService vehicleService;", "modifier": "@Mock\n    private", "type": "VehicleService", "declarator": "vehicleService", "var_name": "vehicleService"}, {"original_string": "@Mock\n    private VehicleRepository vehicleRepository;", "modifier": "@Mock\n    private", "type": "VehicleRepository", "declarator": "vehicleRepository", "var_name": "vehicleRepository"}, {"original_string": "@Mock\n    private DataSetMarshaller dataSetMarshaller;", "modifier": "@Mock\n    private", "type": "DataSetMarshaller", "declarator": "dataSetMarshaller", "var_name": "dataSetMarshaller"}, {"original_string": "@InjectMocks\n    private DemoService demoService;", "modifier": "@InjectMocks\n    private", "type": "DemoService", "declarator": "demoService", "var_name": "demoService"}, {"original_string": "@Captor\n    private ArgumentCaptor<RoutingProblem> routingProblemCaptor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<RoutingProblem>", "declarator": "routingProblemCaptor", "var_name": "routingProblemCaptor"}, {"original_string": "private final String problemName = \"Testing problem\";", "modifier": "private final", "type": "String", "declarator": "problemName = \"Testing problem\"", "var_name": "problemName"}, {"original_string": "private final List<VehicleData> vehicles = Arrays.asList(\n            VehicleFactory.vehicleData(\"v1\", 10),\n            VehicleFactory.vehicleData(\"v2\", 10));", "modifier": "private final", "type": "List<VehicleData>", "declarator": "vehicles = Arrays.asList(\n            VehicleFactory.vehicleData(\"v1\", 10),\n            VehicleFactory.vehicleData(\"v2\", 10))", "var_name": "vehicles"}, {"original_string": "private final Location depot = new Location(1, Coordinates.valueOf(1.0, 7), \"Depot\");", "modifier": "private final", "type": "Location", "declarator": "depot = new Location(1, Coordinates.valueOf(1.0, 7), \"Depot\")", "var_name": "depot"}, {"original_string": "private final List<Location> visits = Arrays.asList(new Location(2, Coordinates.valueOf(2.0, 9), \"Visit\"));", "modifier": "private final", "type": "List<Location>", "declarator": "visits = Arrays.asList(new Location(2, Coordinates.valueOf(2.0, 9), \"Visit\"))", "var_name": "visits"}, {"original_string": "private final RoutingProblem routingProblem = new RoutingProblem(problemName, vehicles, depot, visits);", "modifier": "private final", "type": "RoutingProblem", "declarator": "routingProblem = new RoutingProblem(problemName, vehicles, depot, visits)", "var_name": "routingProblem"}], "file": "optaweb-vehicle-routing-backend/src/test/java/org/optaweb/vehiclerouting/service/demo/DemoServiceTest.java"}, "test_case": {"identifier": "retry_when_adding_location_fails", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void retry_when_adding_location_fails() {\n        when(routingProblems.byName(problemName)).thenReturn(routingProblem);\n        when(locationService.createLocation(any(Coordinates.class), anyString())).thenReturn(false);\n        assertThatExceptionOfType(RuntimeException.class)\n                .isThrownBy(() -> demoService.loadDemo(problemName))\n                .withMessageContaining(depot.coordinates().toString());\n        verify(locationService, times(DemoService.MAX_TRIES)).createLocation(any(Coordinates.class), anyString());\n    }", "signature": "void retry_when_adding_location_fails()", "full_signature": "@Test void retry_when_adding_location_fails()", "class_method_signature": "DemoServiceTest.retry_when_adding_location_fails()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "byName", "thenReturn", "when", "createLocation", "any", "anyString", "withMessageContaining", "isThrownBy", "assertThatExceptionOfType", "loadDemo", "toString", "coordinates", "createLocation", "verify", "times", "any", "anyString"]}, "focal_class": {"identifier": "DemoService", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final int MAX_TRIES = 10;", "modifier": "static final", "type": "int", "declarator": "MAX_TRIES = 10", "var_name": "MAX_TRIES"}, {"original_string": "private final RoutingProblemList routingProblems;", "modifier": "private final", "type": "RoutingProblemList", "declarator": "routingProblems", "var_name": "routingProblems"}, {"original_string": "private final LocationService locationService;", "modifier": "private final", "type": "LocationService", "declarator": "locationService", "var_name": "locationService"}, {"original_string": "private final LocationRepository locationRepository;", "modifier": "private final", "type": "LocationRepository", "declarator": "locationRepository", "var_name": "locationRepository"}, {"original_string": "private final VehicleService vehicleService;", "modifier": "private final", "type": "VehicleService", "declarator": "vehicleService", "var_name": "vehicleService"}, {"original_string": "private final VehicleRepository vehicleRepository;", "modifier": "private final", "type": "VehicleRepository", "declarator": "vehicleRepository", "var_name": "vehicleRepository"}, {"original_string": "private final DataSetMarshaller dataSetMarshaller;", "modifier": "private final", "type": "DataSetMarshaller", "declarator": "dataSetMarshaller", "var_name": "dataSetMarshaller"}], "methods": [{"identifier": "DemoService", "parameters": "(\n            RoutingProblemList routingProblems,\n            LocationService locationService,\n            LocationRepository locationRepository,\n            VehicleService vehicleService,\n            VehicleRepository vehicleRepository,\n            DataSetMarshaller dataSetMarshaller)", "modifiers": "@Autowired public", "return": "", "signature": " DemoService(\n            RoutingProblemList routingProblems,\n            LocationService locationService,\n            LocationRepository locationRepository,\n            VehicleService vehicleService,\n            VehicleRepository vehicleRepository,\n            DataSetMarshaller dataSetMarshaller)", "full_signature": "@Autowired public  DemoService(\n            RoutingProblemList routingProblems,\n            LocationService locationService,\n            LocationRepository locationRepository,\n            VehicleService vehicleService,\n            VehicleRepository vehicleRepository,\n            DataSetMarshaller dataSetMarshaller)", "class_method_signature": "DemoService.DemoService(\n            RoutingProblemList routingProblems,\n            LocationService locationService,\n            LocationRepository locationRepository,\n            VehicleService vehicleService,\n            VehicleRepository vehicleRepository,\n            DataSetMarshaller dataSetMarshaller)", "testcase": false, "constructor": true}, {"identifier": "demos", "parameters": "()", "modifiers": "public", "return": "Collection<RoutingProblem>", "signature": "Collection<RoutingProblem> demos()", "full_signature": "public Collection<RoutingProblem> demos()", "class_method_signature": "DemoService.demos()", "testcase": false, "constructor": false}, {"identifier": "loadDemo", "parameters": "(String name)", "modifiers": "@Async public", "return": "void", "signature": "void loadDemo(String name)", "full_signature": "@Async public void loadDemo(String name)", "class_method_signature": "DemoService.loadDemo(String name)", "testcase": false, "constructor": false}, {"identifier": "addWithRetry", "parameters": "(Coordinates coordinates, String description)", "modifiers": "private", "return": "void", "signature": "void addWithRetry(Coordinates coordinates, String description)", "full_signature": "private void addWithRetry(Coordinates coordinates, String description)", "class_method_signature": "DemoService.addWithRetry(Coordinates coordinates, String description)", "testcase": false, "constructor": false}, {"identifier": "exportDataSet", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String exportDataSet()", "full_signature": "public String exportDataSet()", "class_method_signature": "DemoService.exportDataSet()", "testcase": false, "constructor": false}], "file": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/service/demo/DemoService.java"}, "focal_method": {"identifier": "loadDemo", "parameters": "(String name)", "modifiers": "@Async public", "return": "void", "body": "@Async\n    public void loadDemo(String name) {\n        RoutingProblem routingProblem = routingProblems.byName(name);\n        // Add depot\n        routingProblem.depot().ifPresent(depot -> addWithRetry(depot.coordinates(), depot.description()));\n\n        // TODO start randomizing only after using all available cities (=> reproducibility for small demos)\n        routingProblem.visits().forEach(visit -> addWithRetry(visit.coordinates(), visit.description()));\n        routingProblem.vehicles().forEach(vehicleService::createVehicle);\n    }", "signature": "void loadDemo(String name)", "full_signature": "@Async public void loadDemo(String name)", "class_method_signature": "DemoService.loadDemo(String name)", "testcase": false, "constructor": false, "invocations": ["byName", "ifPresent", "depot", "addWithRetry", "coordinates", "description", "forEach", "visits", "addWithRetry", "coordinates", "description", "forEach", "vehicles"]}, "repository": {"repo_id": 142603842, "url": "https://github.com/kiegroup/optaweb-vehicle-routing", "stars": 42, "created": "7/27/2018 5:08:08 PM +00:00", "updates": "2020-01-27T22:19:48+00:00", "fork": "False", "license": "licensed"}}