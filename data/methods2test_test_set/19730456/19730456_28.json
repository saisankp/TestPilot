{"test_class": {"identifier": "EthashTest", "superclass": "", "interfaces": "", "fields": [], "file": "ethereumj-core/src/test/java/org/ethereum/mine/EthashTest.java"}, "test_case": {"identifier": "cacheTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void cacheTest() {\n        EthashAlgo ethash = new EthashAlgo();\n        byte[] seed = \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\".getBytes();\n        long cacheSize = 1024;\n        long fullSize = 1024 * 32;\n        int[] cache = ethash.makeCache(cacheSize, seed);\n\n        Assert.assertArrayEquals(intsToBytes(cache, false), Hex.decode(\"2da2b506f21070e1143d908e867962486d6b0a02e31d468fd5e3a7143aafa76a14201f63374314e2a6aaf84ad2eb57105dea3378378965a1b3873453bb2b78f9a8620b2ebeca41fbc773bb837b5e724d6eb2de570d99858df0d7d97067fb8103b21757873b735097b35d3bea8fd1c359a9e8a63c1540c76c9784cf8d975e995ca8620b2ebeca41fbc773bb837b5e724d6eb2de570d99858df0d7d97067fb8103b21757873b735097b35d3bea8fd1c359a9e8a63c1540c76c9784cf8d975e995ca8620b2ebeca41fbc773bb837b5e724d6eb2de570d99858df0d7d97067fb8103b21757873b735097b35d3bea8fd1c359a9e8a63c1540c76c9784cf8d975e995c259440b89fa3481c2c33171477c305c8e1e421f8d8f6d59585449d0034f3e421808d8da6bbd0b6378f567647cc6c4ba6c434592b198ad444e7284905b7c6adaf70bf43ec2daa7bd5e8951aa609ab472c124cf9eba3d38cff5091dc3f58409edcc386c743c3bd66f92408796ee1e82dd149eaefbf52b00ce33014a6eb3e50625413b072a58bc01da28262f42cbe4f87d4abc2bf287d15618405a1fe4e386fcdafbb171064bd99901d8f81dd6789396ce5e364ac944bbbd75a7827291c70b42d26385910cd53ca535ab29433dd5c5714d26e0dce95514c5ef866329c12e958097e84462197c2b32087849dab33e88b11da61d52f9dbc0b92cc61f742c07dbbf751c49d7678624ee60dfbe62e5e8c47a03d8247643f3d16ad8c8e663953bcda1f59d7e2d4a9bf0768e789432212621967a8f41121ad1df6ae1fa78782530695414c6213942865b2730375019105cae91a4c17a558d4b63059661d9f108362143107babe0b848de412e4da59168cce82bfbff3c99e022dd6ac1e559db991f2e3f7bb910cefd173e65ed00a8d5d416534e2c8416ff23977dbf3eb7180b75c71580d08ce95efeb9b0afe904ea12285a392aff0c8561ff79fca67f694a62b9e52377485c57cc3598d84cac0a9d27960de0cc31ff9bbfe455acaa62c8aa5d2cce96f345da9afe843d258a99c4eaf3650fc62efd81c7b81cd0d534d2d71eeda7a6e315d540b4473c80f8730037dc2ae3e47b986240cfc65ccc565f0d8cde0bc68a57e39a271dda57440b3598bee19f799611d25731a96b5dbbbefdff6f4f656161462633030d62560ea4e9c161cf78fc96a2ca5aaa32453a6c5dea206f766244e8c9d9a8dc61185ce37f1fc804459c5f07434f8ecb34141b8dcae7eae704c950b55556c5f40140c3714b45eddb02637513268778cbf937a33e4e33183685f9deb31ef54e90161e76d969587dd782eaa94e289420e7c2ee908517f5893a26fdb5873d68f92d118d4bcf98d7a4916794d6ab290045e30f9ea00ca547c584b8482b0331ba1539a0f2714fddc3a0b06b0cfbb6a607b8339c39bcfd6640b1f653e9d70ef6c985b\"));\n        int[] bytes = ethash.calcDatasetItem(cache, 0);\n        Assert.assertArrayEquals(intsToBytes(bytes, false), Hex.decode(\"b1698f829f90b35455804e5185d78f549fcb1bdce2bee006d4d7e68eb154b596be1427769eb1c3c3e93180c760af75f81d1023da6a0ffbe321c153a7c0103597\"));\n\n        byte[] blockHash = \"~~~X~~~~~~~~~~~~~~~~~~~~~~~~~~~~\".getBytes();\n        long nonce = 0x7c7c597cL;\n        Pair<byte[], byte[]> pair = ethash.hashimotoLight(fullSize, cache, blockHash, longToBytes(nonce));\n\n        // comparing mix hash\n        Assert.assertArrayEquals(pair.getLeft(), Hex.decode(\"d7b668b90c2f26961d98d7dd244f5966368165edbce8cb8162dd282b6e5a8eae\"));\n        // comparing the final hash\n        Assert.assertArrayEquals(pair.getRight(), Hex.decode(\"b8cb1cb3ac1a7a6e12c4bc90f2779ef97e661f7957619e677636509d2f26055c\"));\n\n        System.out.println(Hex.toHexString(pair.getLeft()));\n        System.out.println(Hex.toHexString(pair.getRight()));\n    }", "signature": "void cacheTest()", "full_signature": "@Test public void cacheTest()", "class_method_signature": "EthashTest.cacheTest()", "testcase": true, "constructor": false, "invocations": ["getBytes", "makeCache", "assertArrayEquals", "intsToBytes", "decode", "calcDatasetItem", "assertArrayEquals", "intsToBytes", "decode", "getBytes", "hashimotoLight", "longToBytes", "assertArrayEquals", "getLeft", "decode", "assertArrayEquals", "getRight", "decode", "println", "toHexString", "getLeft", "println", "toHexString", "getRight"]}, "focal_class": {"identifier": "Ethash", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(\"mine\");", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(\"mine\")", "var_name": "logger"}, {"original_string": "static EthashParams ethashParams = new EthashParams();", "modifier": "static", "type": "EthashParams", "declarator": "ethashParams = new EthashParams()", "var_name": "ethashParams"}, {"original_string": "static Ethash cachedInstance = null;", "modifier": "static", "type": "Ethash", "declarator": "cachedInstance = null", "var_name": "cachedInstance"}, {"original_string": "long epoch = 0;", "modifier": "", "type": "long", "declarator": "epoch = 0", "var_name": "epoch"}, {"original_string": "private static ListeningExecutorService executor = MoreExecutors.listeningDecorator(\n            new ThreadPoolExecutor(8, 8, 0L, TimeUnit.SECONDS, new LinkedBlockingQueue<>(),\n            new ThreadFactoryBuilder().setNameFormat(\"ethash-pool-%d\").build()));", "modifier": "private static", "type": "ListeningExecutorService", "declarator": "executor = MoreExecutors.listeningDecorator(\n            new ThreadPoolExecutor(8, 8, 0L, TimeUnit.SECONDS, new LinkedBlockingQueue<>(),\n            new ThreadFactoryBuilder().setNameFormat(\"ethash-pool-%d\").build()))", "var_name": "executor"}, {"original_string": "public static boolean fileCacheEnabled = true;", "modifier": "public static", "type": "boolean", "declarator": "fileCacheEnabled = true", "var_name": "fileCacheEnabled"}, {"original_string": "private Set<EthashListener> listeners = new CopyOnWriteArraySet <>();", "modifier": "private", "type": "Set<EthashListener>", "declarator": "listeners = new CopyOnWriteArraySet <>()", "var_name": "listeners"}, {"original_string": "private EthashAlgo ethashAlgo = new EthashAlgo(ethashParams);", "modifier": "private", "type": "EthashAlgo", "declarator": "ethashAlgo = new EthashAlgo(ethashParams)", "var_name": "ethashAlgo"}, {"original_string": "private long blockNumber;", "modifier": "private", "type": "long", "declarator": "blockNumber", "var_name": "blockNumber"}, {"original_string": "private int[] cacheLight = null;", "modifier": "private", "type": "int[]", "declarator": "cacheLight = null", "var_name": "cacheLight"}, {"original_string": "private int[] fullData = null;", "modifier": "private", "type": "int[]", "declarator": "fullData = null", "var_name": "fullData"}, {"original_string": "private SystemProperties config;", "modifier": "private", "type": "SystemProperties", "declarator": "config", "var_name": "config"}, {"original_string": "private long startNonce = -1;", "modifier": "private", "type": "long", "declarator": "startNonce = -1", "var_name": "startNonce"}], "methods": [{"identifier": "getForBlock", "parameters": "(SystemProperties config, long blockNumber)", "modifiers": "public static", "return": "Ethash", "signature": "Ethash getForBlock(SystemProperties config, long blockNumber)", "full_signature": "public static Ethash getForBlock(SystemProperties config, long blockNumber)", "class_method_signature": "Ethash.getForBlock(SystemProperties config, long blockNumber)", "testcase": false, "constructor": false}, {"identifier": "getForBlock", "parameters": "(SystemProperties config, long blockNumber, Collection<EthashListener> listeners)", "modifiers": "public static", "return": "Ethash", "signature": "Ethash getForBlock(SystemProperties config, long blockNumber, Collection<EthashListener> listeners)", "full_signature": "public static Ethash getForBlock(SystemProperties config, long blockNumber, Collection<EthashListener> listeners)", "class_method_signature": "Ethash.getForBlock(SystemProperties config, long blockNumber, Collection<EthashListener> listeners)", "testcase": false, "constructor": false}, {"identifier": "Ethash", "parameters": "(SystemProperties config, long blockNumber)", "modifiers": "public", "return": "", "signature": " Ethash(SystemProperties config, long blockNumber)", "full_signature": "public  Ethash(SystemProperties config, long blockNumber)", "class_method_signature": "Ethash.Ethash(SystemProperties config, long blockNumber)", "testcase": false, "constructor": true}, {"identifier": "getCacheLight", "parameters": "()", "modifiers": "public synchronized", "return": "int[]", "signature": "int[] getCacheLight()", "full_signature": "public synchronized int[] getCacheLight()", "class_method_signature": "Ethash.getCacheLight()", "testcase": false, "constructor": false}, {"identifier": "getCacheLightImpl", "parameters": "()", "modifiers": "private synchronized", "return": "int[]", "signature": "int[] getCacheLightImpl()", "full_signature": "private synchronized int[] getCacheLightImpl()", "class_method_signature": "Ethash.getCacheLightImpl()", "testcase": false, "constructor": false}, {"identifier": "getFullDataset", "parameters": "()", "modifiers": "public synchronized", "return": "int[]", "signature": "int[] getFullDataset()", "full_signature": "public synchronized int[] getFullDataset()", "class_method_signature": "Ethash.getFullDataset()", "testcase": false, "constructor": false}, {"identifier": "getFullData", "parameters": "()", "modifiers": "", "return": "int[]", "signature": "int[] getFullData()", "full_signature": " int[] getFullData()", "class_method_signature": "Ethash.getFullData()", "testcase": false, "constructor": false}, {"identifier": "getFullSize", "parameters": "()", "modifiers": "private", "return": "long", "signature": "long getFullSize()", "full_signature": "private long getFullSize()", "class_method_signature": "Ethash.getFullSize()", "testcase": false, "constructor": false}, {"identifier": "getEthashAlgo", "parameters": "()", "modifiers": "private", "return": "EthashAlgo", "signature": "EthashAlgo getEthashAlgo()", "full_signature": "private EthashAlgo getEthashAlgo()", "class_method_signature": "Ethash.getEthashAlgo()", "testcase": false, "constructor": false}, {"identifier": "hashimotoLight", "parameters": "(BlockHeader header, long nonce)", "modifiers": "public", "return": "Pair<byte[], byte[]>", "signature": "Pair<byte[], byte[]> hashimotoLight(BlockHeader header, long nonce)", "full_signature": "public Pair<byte[], byte[]> hashimotoLight(BlockHeader header, long nonce)", "class_method_signature": "Ethash.hashimotoLight(BlockHeader header, long nonce)", "testcase": false, "constructor": false}, {"identifier": "hashimotoLight", "parameters": "(BlockHeader header, byte[] nonce)", "modifiers": "private", "return": "Pair<byte[], byte[]>", "signature": "Pair<byte[], byte[]> hashimotoLight(BlockHeader header, byte[] nonce)", "full_signature": "private Pair<byte[], byte[]> hashimotoLight(BlockHeader header, byte[] nonce)", "class_method_signature": "Ethash.hashimotoLight(BlockHeader header, byte[] nonce)", "testcase": false, "constructor": false}, {"identifier": "hashimotoFull", "parameters": "(BlockHeader header, long nonce)", "modifiers": "public", "return": "Pair<byte[], byte[]>", "signature": "Pair<byte[], byte[]> hashimotoFull(BlockHeader header, long nonce)", "full_signature": "public Pair<byte[], byte[]> hashimotoFull(BlockHeader header, long nonce)", "class_method_signature": "Ethash.hashimotoFull(BlockHeader header, long nonce)", "testcase": false, "constructor": false}, {"identifier": "mine", "parameters": "(final Block block)", "modifiers": "public", "return": "ListenableFuture<MiningResult>", "signature": "ListenableFuture<MiningResult> mine(final Block block)", "full_signature": "public ListenableFuture<MiningResult> mine(final Block block)", "class_method_signature": "Ethash.mine(final Block block)", "testcase": false, "constructor": false}, {"identifier": "mine", "parameters": "(final Block block, int nThreads)", "modifiers": "public", "return": "ListenableFuture<MiningResult>", "signature": "ListenableFuture<MiningResult> mine(final Block block, int nThreads)", "full_signature": "public ListenableFuture<MiningResult> mine(final Block block, int nThreads)", "class_method_signature": "Ethash.mine(final Block block, int nThreads)", "testcase": false, "constructor": false}, {"identifier": "mineLight", "parameters": "(final Block block)", "modifiers": "public", "return": "ListenableFuture<MiningResult>", "signature": "ListenableFuture<MiningResult> mineLight(final Block block)", "full_signature": "public ListenableFuture<MiningResult> mineLight(final Block block)", "class_method_signature": "Ethash.mineLight(final Block block)", "testcase": false, "constructor": false}, {"identifier": "mineLight", "parameters": "(final Block block, int nThreads)", "modifiers": "public", "return": "ListenableFuture<MiningResult>", "signature": "ListenableFuture<MiningResult> mineLight(final Block block, int nThreads)", "full_signature": "public ListenableFuture<MiningResult> mineLight(final Block block, int nThreads)", "class_method_signature": "Ethash.mineLight(final Block block, int nThreads)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(BlockHeader header)", "modifiers": "public", "return": "boolean", "signature": "boolean validate(BlockHeader header)", "full_signature": "public boolean validate(BlockHeader header)", "class_method_signature": "Ethash.validate(BlockHeader header)", "testcase": false, "constructor": false}, {"identifier": "fireDatatasetStatusUpdate", "parameters": "(EthashListener.DatasetStatus status)", "modifiers": "private", "return": "void", "signature": "void fireDatatasetStatusUpdate(EthashListener.DatasetStatus status)", "full_signature": "private void fireDatatasetStatusUpdate(EthashListener.DatasetStatus status)", "class_method_signature": "Ethash.fireDatatasetStatusUpdate(EthashListener.DatasetStatus status)", "testcase": false, "constructor": false}], "file": "ethereumj-core/src/main/java/org/ethereum/mine/Ethash.java"}, "focal_method": {"identifier": "hashimotoLight", "parameters": "(BlockHeader header, long nonce)", "modifiers": "public", "return": "Pair<byte[], byte[]>", "body": "public Pair<byte[], byte[]> hashimotoLight(BlockHeader header, long nonce) {\n        return hashimotoLight(header, longToBytes(nonce));\n    }", "signature": "Pair<byte[], byte[]> hashimotoLight(BlockHeader header, long nonce)", "full_signature": "public Pair<byte[], byte[]> hashimotoLight(BlockHeader header, long nonce)", "class_method_signature": "Ethash.hashimotoLight(BlockHeader header, long nonce)", "testcase": false, "constructor": false, "invocations": ["hashimotoLight", "longToBytes"]}, "repository": {"repo_id": 19730456, "url": "https://github.com/ethereum/ethereumj", "language": "Java", "is_fork": false, "fork_count": 1034, "stargazer_count": 2058, "size": 47979, "license": "licensed"}}