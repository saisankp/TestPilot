{"test_class": {"identifier": "MapPolylineGridSetTest", "superclass": "extends AbstractGisTest", "interfaces": "", "fields": [{"original_string": "private static final String SHP_RESOURCE = MapPolylineGridSetTest.class.getPackage().getName().replaceAll(\"\\\\.\", \"/\") //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t+ \"/test.shp\";", "modifier": "private static final", "type": "String", "declarator": "SHP_RESOURCE = MapPolylineGridSetTest.class.getPackage().getName().replaceAll(\"\\\\.\", \"/\") //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t+ \"/test.shp\"", "var_name": "SHP_RESOURCE"}, {"original_string": "private ArrayList<MapPolyline> reference = null;", "modifier": "private", "type": "ArrayList<MapPolyline>", "declarator": "reference = null", "var_name": "reference"}, {"original_string": "private Rectangle2d bounds = null;", "modifier": "private", "type": "Rectangle2d", "declarator": "bounds = null", "var_name": "bounds"}], "file": "advanced/gis/giscore/src/test/java/org/arakhne/afc/gis/grid/MapPolylineGridSetTest.java"}, "test_case": {"identifier": "testAddPDoubleOutputParameterOutputParameter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAddPDoubleOutputParameterOutputParameter() {\n\t\tassertNotNull(this.bounds);\n\t\tMapPolylineGridSet<MapPolyline> test = new MapPolylineGridSet<>(100,100,this.bounds);\n        test.addAll(this.reference);\n        assertEquals(this.reference.size(), test.size());\n\n        OutputParameter<MapPolyline> first = new OutputParameter<>();\n        OutputParameter<MapPolyline> second = new OutputParameter<>();\n\n        MapPolyline polyline;\n        Point2d p1, p2;\n\n        first.clear();\n        second.clear();\n        polyline = new MapPolyline();\n        p1 = this.reference.get(0).getPointAt(this.reference.get(0).getPointCount()-1);\n        p2 = new Point2d(\n        \t\tthis.bounds.getMinX() + getRandom().nextDouble() * this.bounds.getWidth(),\n        \t\tthis.bounds.getMinY() + getRandom().nextDouble() * this.bounds.getHeight());\n        polyline.addPoint(p1.getX(), p1.getY());\n        polyline.addPoint(p2.getX(), p2.getY());\n        assertTrue(test.add(polyline, 0.5, first, second));\n        assertConnected(polyline, first.get(), true);\n        assertConnected(polyline, second.get(), false);\n\n        first.clear();\n        second.clear();\n        polyline = new MapPolyline();\n        p1 = new Point2d(\n        \t\tthis.bounds.getMinX() + getRandom().nextDouble() * this.bounds.getWidth(),\n        \t\tthis.bounds.getMinY() + getRandom().nextDouble() * this.bounds.getHeight());\n        p2 = this.reference.get(1).getPointAt(this.reference.get(1).getPointCount()-1);\n        polyline.addPoint(p1.getX(), p1.getY());\n        polyline.addPoint(p2.getX(), p2.getY());\n        assertTrue(test.add(polyline, 0.5, first, second));\n        assertConnected(polyline, first.get(), true);\n        assertConnected(polyline, second.get(), false);\n\n        first.clear();\n        second.clear();\n        polyline = new MapPolyline();\n        p1 = this.reference.get(2).getPointAt(this.reference.get(2).getPointCount()-1);\n        p2 = this.reference.get(3).getPointAt(this.reference.get(3).getPointCount()-1);\n        polyline.addPoint(p1.getX(), p1.getY());\n        polyline.addPoint(p2.getX(), p2.getY());\n        assertTrue(test.add(polyline, 0.5, first, second));\n        assertConnected(polyline, first.get(), true);\n        assertConnected(polyline, second.get(), false);\n\n        first.clear();\n        second.clear();\n        polyline = new MapPolyline();\n        p1 = new Point2d(\n        \t\tthis.bounds.getMinX() + getRandom().nextDouble() * this.bounds.getWidth(),\n        \t\tthis.bounds.getMinY() + getRandom().nextDouble() * this.bounds.getHeight());\n        p2 = new Point2d(\n        \t\tthis.bounds.getMinX() + getRandom().nextDouble() * this.bounds.getWidth(),\n        \t\tthis.bounds.getMinY() + getRandom().nextDouble() * this.bounds.getHeight());\n        polyline.addPoint(p1.getX(), p1.getY());\n        polyline.addPoint(p2.getX(), p2.getY());\n        assertTrue(test.add(polyline, 0.5, first, second));\n        assertConnected(polyline, first.get(), true);\n        assertConnected(polyline, second.get(), false);\n\t}", "signature": "void testAddPDoubleOutputParameterOutputParameter()", "full_signature": "@Test public void testAddPDoubleOutputParameterOutputParameter()", "class_method_signature": "MapPolylineGridSetTest.testAddPDoubleOutputParameterOutputParameter()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "addAll", "assertEquals", "size", "size", "clear", "clear", "getPointAt", "get", "getPointCount", "get", "getMinX", "nextDouble", "getRandom", "getWidth", "getMinY", "nextDouble", "getRandom", "getHeight", "addPoint", "getX", "getY", "addPoint", "getX", "getY", "assertTrue", "add", "assertConnected", "get", "assertConnected", "get", "clear", "clear", "getMinX", "nextDouble", "getRandom", "getWidth", "getMinY", "nextDouble", "getRandom", "getHeight", "getPointAt", "get", "getPointCount", "get", "addPoint", "getX", "getY", "addPoint", "getX", "getY", "assertTrue", "add", "assertConnected", "get", "assertConnected", "get", "clear", "clear", "getPointAt", "get", "getPointCount", "get", "getPointAt", "get", "getPointCount", "get", "addPoint", "getX", "getY", "addPoint", "getX", "getY", "assertTrue", "add", "assertConnected", "get", "assertConnected", "get", "clear", "clear", "getMinX", "nextDouble", "getRandom", "getWidth", "getMinY", "nextDouble", "getRandom", "getHeight", "getMinX", "nextDouble", "getRandom", "getWidth", "getMinY", "nextDouble", "getRandom", "getHeight", "addPoint", "getX", "getY", "addPoint", "getX", "getY", "assertTrue", "add", "assertConnected", "get", "assertConnected", "get"]}, "focal_class": {"identifier": "MapPolylineGridSet", "superclass": "extends MapElementGridSet<P>", "interfaces": "implements GISPolylineSet<P>", "fields": [], "methods": [{"identifier": "MapPolylineGridSet", "parameters": "(int nRows, int nColumns, double boundsX, double boundsY, double boundsWidth, double boundsHeight)", "modifiers": "public", "return": "", "signature": " MapPolylineGridSet(int nRows, int nColumns, double boundsX, double boundsY, double boundsWidth, double boundsHeight)", "full_signature": "public  MapPolylineGridSet(int nRows, int nColumns, double boundsX, double boundsY, double boundsWidth, double boundsHeight)", "class_method_signature": "MapPolylineGridSet.MapPolylineGridSet(int nRows, int nColumns, double boundsX, double boundsY, double boundsWidth, double boundsHeight)", "testcase": false, "constructor": true}, {"identifier": "MapPolylineGridSet", "parameters": "(int nRows, int nColumns, Rectangle2d bounds)", "modifiers": "public", "return": "", "signature": " MapPolylineGridSet(int nRows, int nColumns, Rectangle2d bounds)", "full_signature": "public  MapPolylineGridSet(int nRows, int nColumns, Rectangle2d bounds)", "class_method_signature": "MapPolylineGridSet.MapPolylineGridSet(int nRows, int nColumns, Rectangle2d bounds)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(P polyline, double precision,\n\t\t\tOutputParameter<P> firstNeighbour,\n\t\t\tOutputParameter<P> secondNeighbour)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(P polyline, double precision,\n\t\t\tOutputParameter<P> firstNeighbour,\n\t\t\tOutputParameter<P> secondNeighbour)", "full_signature": "@Override public boolean add(P polyline, double precision,\n\t\t\tOutputParameter<P> firstNeighbour,\n\t\t\tOutputParameter<P> secondNeighbour)", "class_method_signature": "MapPolylineGridSet.add(P polyline, double precision,\n\t\t\tOutputParameter<P> firstNeighbour,\n\t\t\tOutputParameter<P> secondNeighbour)", "testcase": false, "constructor": false}, {"identifier": "getNearestEnd", "parameters": "(double x, double y)", "modifiers": "@Override @Pure public final", "return": "P", "signature": "P getNearestEnd(double x, double y)", "full_signature": "@Override @Pure public final P getNearestEnd(double x, double y)", "class_method_signature": "MapPolylineGridSet.getNearestEnd(double x, double y)", "testcase": false, "constructor": false}, {"identifier": "getNearestEnd", "parameters": "(P exception, Point2D<?, ?> position, double maximalDistance)", "modifiers": "private", "return": "P", "signature": "P getNearestEnd(P exception, Point2D<?, ?> position, double maximalDistance)", "full_signature": "private P getNearestEnd(P exception, Point2D<?, ?> position, double maximalDistance)", "class_method_signature": "MapPolylineGridSet.getNearestEnd(P exception, Point2D<?, ?> position, double maximalDistance)", "testcase": false, "constructor": false}, {"identifier": "getNearestEnd", "parameters": "(Point2D<?, ?> position)", "modifiers": "@Override @Pure public", "return": "P", "signature": "P getNearestEnd(Point2D<?, ?> position)", "full_signature": "@Override @Pure public P getNearestEnd(Point2D<?, ?> position)", "class_method_signature": "MapPolylineGridSet.getNearestEnd(Point2D<?, ?> position)", "testcase": false, "constructor": false}], "file": "advanced/gis/giscore/src/main/java/org/arakhne/afc/gis/grid/MapPolylineGridSet.java"}, "focal_method": {"identifier": "add", "parameters": "(P polyline, double precision,\n\t\t\tOutputParameter<P> firstNeighbour,\n\t\t\tOutputParameter<P> secondNeighbour)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean add(P polyline, double precision,\n\t\t\tOutputParameter<P> firstNeighbour,\n\t\t\tOutputParameter<P> secondNeighbour) {\n\t\tif (add(polyline)) {\n\t\t\tPoint2d point;\n\n\t\t\tpoint = polyline.getPointAt(0);\n\t\t\tif (point != null) {\n\t\t\t\tfirstNeighbour.set(getNearestEnd(polyline, point, precision));\n\t\t\t}\n\n\t\t\tpoint = polyline.getPointAt(polyline.getPointCount() - 1);\n\t\t\tif (point != null) {\n\t\t\t\tsecondNeighbour.set(getNearestEnd(polyline, point, precision));\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}", "signature": "boolean add(P polyline, double precision,\n\t\t\tOutputParameter<P> firstNeighbour,\n\t\t\tOutputParameter<P> secondNeighbour)", "full_signature": "@Override public boolean add(P polyline, double precision,\n\t\t\tOutputParameter<P> firstNeighbour,\n\t\t\tOutputParameter<P> secondNeighbour)", "class_method_signature": "MapPolylineGridSet.add(P polyline, double precision,\n\t\t\tOutputParameter<P> firstNeighbour,\n\t\t\tOutputParameter<P> secondNeighbour)", "testcase": false, "constructor": false, "invocations": ["add", "getPointAt", "set", "getNearestEnd", "getPointAt", "getPointCount", "set", "getNearestEnd"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}