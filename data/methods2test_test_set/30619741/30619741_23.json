{"test_class": {"identifier": "ClusterMicroserviceProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final RemoteServiceHandlesStore REMOTE_SERVICE_HANDLES_STORE = new RemoteServiceHandlesStore();", "modifier": "public static final", "type": "RemoteServiceHandlesStore", "declarator": "REMOTE_SERVICE_HANDLES_STORE = new RemoteServiceHandlesStore()", "var_name": "REMOTE_SERVICE_HANDLES_STORE"}, {"original_string": "@Tested\n   private ClusterMicroserviceProvider clusterMicroserviceProvider;", "modifier": "@Tested\n   private", "type": "ClusterMicroserviceProvider", "declarator": "clusterMicroserviceProvider", "var_name": "clusterMicroserviceProvider"}, {"original_string": "@Injectable\n   private RemoteServiceHandlesStore store;", "modifier": "@Injectable\n   private", "type": "RemoteServiceHandlesStore", "declarator": "store", "var_name": "store"}, {"original_string": "@Injectable\n   private JgroupsMessageSender sender;", "modifier": "@Injectable\n   private", "type": "JgroupsMessageSender", "declarator": "sender", "var_name": "sender"}], "file": "cluster-microservice-provider/src/test/java/io/silverware/microservices/providers/cluster/ClusterMicroserviceProviderTest.java"}, "test_case": {"identifier": "testLookupMicroservice", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testLookupMicroservice() throws Exception {\n      Set<ServiceHandle> mockHandles = Util.createSetFrom(Util.createHandle(1), Util.createHandle(2));\n      Set<Object> services = Util.createSetFrom(new Object(), new Object());\n\n      new Expectations() {{\n         sender.sendToClusterAsync(META_DATA, (Set<Address>) any, (FutureListener<RspList<MicroserviceSearchResponse>>) any);\n         times = 1;\n         result = mockHandles;\n         store.getServices(META_DATA);\n         result = services;\n         times = 1;\n\n      }};\n      Set<Object> objects = clusterMicroserviceProvider.lookupMicroservice(META_DATA);\n      assertThat(objects).isNotEmpty().isEqualTo(services);\n   }", "signature": "void testLookupMicroservice()", "full_signature": "@Test public void testLookupMicroservice()", "class_method_signature": "ClusterMicroserviceProviderTest.testLookupMicroservice()", "testcase": true, "constructor": false, "invocations": ["createSetFrom", "createHandle", "createHandle", "createSetFrom", "sendToClusterAsync", "getServices", "lookupMicroservice", "isEqualTo", "isNotEmpty", "assertThat"]}, "focal_class": {"identifier": "ClusterMicroserviceProvider", "superclass": "", "interfaces": "implements MicroserviceProvider, ClusterSilverService", "fields": [{"original_string": "private static final Logger log = LogManager.getLogger(ClusterMicroserviceProvider.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LogManager.getLogger(ClusterMicroserviceProvider.class)", "var_name": "log"}, {"original_string": "private Context context;", "modifier": "private", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "private RemoteServiceHandlesStore remoteServiceHandlesStore;", "modifier": "private", "type": "RemoteServiceHandlesStore", "declarator": "remoteServiceHandlesStore", "var_name": "remoteServiceHandlesStore"}, {"original_string": "private Map<MicroserviceMetaData, Set<Address>> alreadyQueriedAddresses = new ConcurrentHashMap<>();", "modifier": "private", "type": "Map<MicroserviceMetaData, Set<Address>>", "declarator": "alreadyQueriedAddresses = new ConcurrentHashMap<>()", "var_name": "alreadyQueriedAddresses"}, {"original_string": "private JgroupsMessageSender sender;", "modifier": "private", "type": "JgroupsMessageSender", "declarator": "sender", "var_name": "sender"}, {"original_string": "private MessageDispatcher messageDispatcher;", "modifier": "private", "type": "MessageDispatcher", "declarator": "messageDispatcher", "var_name": "messageDispatcher"}, {"original_string": "private Long timeout = 500L;", "modifier": "private", "type": "Long", "declarator": "timeout = 500L", "var_name": "timeout"}, {"original_string": "private JChannel channel;", "modifier": "private", "type": "JChannel", "declarator": "channel", "var_name": "channel"}], "methods": [{"identifier": "initialize", "parameters": "(final Context context)", "modifiers": "@Override public", "return": "void", "signature": "void initialize(final Context context)", "full_signature": "@Override public void initialize(final Context context)", "class_method_signature": "ClusterMicroserviceProvider.initialize(final Context context)", "testcase": false, "constructor": false}, {"identifier": "getContext", "parameters": "()", "modifiers": "@Override public", "return": "Context", "signature": "Context getContext()", "full_signature": "@Override public Context getContext()", "class_method_signature": "ClusterMicroserviceProvider.getContext()", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "ClusterMicroserviceProvider.run()", "testcase": false, "constructor": false}, {"identifier": "lookupMicroservice", "parameters": "(final MicroserviceMetaData metaData)", "modifiers": "@Override public", "return": "Set<Object>", "signature": "Set<Object> lookupMicroservice(final MicroserviceMetaData metaData)", "full_signature": "@Override public Set<Object> lookupMicroservice(final MicroserviceMetaData metaData)", "class_method_signature": "ClusterMicroserviceProvider.lookupMicroservice(final MicroserviceMetaData metaData)", "testcase": false, "constructor": false}, {"identifier": "lookupLocalMicroservice", "parameters": "(final MicroserviceMetaData metaData)", "modifiers": "@Override public", "return": "Set<Object>", "signature": "Set<Object> lookupLocalMicroservice(final MicroserviceMetaData metaData)", "full_signature": "@Override public Set<Object> lookupLocalMicroservice(final MicroserviceMetaData metaData)", "class_method_signature": "ClusterMicroserviceProvider.lookupLocalMicroservice(final MicroserviceMetaData metaData)", "testcase": false, "constructor": false}], "file": "cluster-microservice-provider/src/main/java/io/silverware/microservices/providers/cluster/ClusterMicroserviceProvider.java"}, "focal_method": {"identifier": "lookupMicroservice", "parameters": "(final MicroserviceMetaData metaData)", "modifiers": "@Override public", "return": "Set<Object>", "body": "@Override\n   public Set<Object> lookupMicroservice(final MicroserviceMetaData metaData) {\n      try {\n         Set<Address> addressesForMetadata = alreadyQueriedAddresses.getOrDefault(metaData, new HashSet<>());\n         this.sender.sendToClusterAsync(metaData, addressesForMetadata,\n               new FutureListenerHelper<MicroserviceSearchResponse>(rspList -> {\n                  try {\n                     RspList<MicroserviceSearchResponse> responseRspList = rspList.get(10, TimeUnit.SECONDS);\n                     log.info(\"Response retrieved!  {}\", responseRspList);\n                     Collection<Rsp<MicroserviceSearchResponse>> result = responseRspList.values();\n                     if (log.isTraceEnabled()) {\n                        log.trace(\"Size of a responses is : {} \", responseRspList.getResults().size());\n                     }\n                     result.stream().filter(Rsp::hasException).forEach(rsp -> log.error(\"Exception was thrown during lookup on node: \" + rsp.getSender(), rsp.getException()));\n\n                     Set<ServiceHandle> remoteServiceHandles = result.stream()\n                                                                     .filter(rsp -> rsp.wasReceived() && !rsp.hasException() && rsp.getValue().getResult().canBeUsed())\n                                                                     .map((rsp) -> new RemoteServiceHandle(rsp.getSender(), rsp.getValue().getHandle(), sender, metaData))\n                                                                     .collect(Collectors.toSet());\n                     // this is to save jgroups traffic for a given metadata\n                     addressesForMetadata.addAll(responseRspList.values().stream().map(Rsp::getSender).collect(Collectors.toSet()));\n                     alreadyQueriedAddresses.put(metaData, addressesForMetadata);\n                     this.remoteServiceHandlesStore.addHandles(metaData, remoteServiceHandles);\n                  } catch (Throwable e) {\n                     log.error(\"Error while looking up microservices.\", e);\n                  }\n\n               }));\n         // If this is first query for the metadata we should wait for a response\n         if (addressesForMetadata.isEmpty() && !sender.isEmptyCluster()) {\n            Thread.sleep(timeout);\n         }\n\n         return this.remoteServiceHandlesStore.getServices(metaData);\n      } catch (Throwable e) {\n         log.error(\"Error while looking up microservices.\", e);\n         return emptySet();\n      }\n   }", "signature": "Set<Object> lookupMicroservice(final MicroserviceMetaData metaData)", "full_signature": "@Override public Set<Object> lookupMicroservice(final MicroserviceMetaData metaData)", "class_method_signature": "ClusterMicroserviceProvider.lookupMicroservice(final MicroserviceMetaData metaData)", "testcase": false, "constructor": false, "invocations": ["getOrDefault", "sendToClusterAsync", "get", "info", "values", "isTraceEnabled", "trace", "size", "getResults", "forEach", "filter", "stream", "error", "getSender", "getException", "collect", "map", "filter", "stream", "wasReceived", "hasException", "canBeUsed", "getResult", "getValue", "getSender", "getHandle", "getValue", "toSet", "addAll", "collect", "map", "stream", "values", "toSet", "put", "addHandles", "error", "isEmpty", "isEmptyCluster", "sleep", "getServices", "error", "emptySet"]}, "repository": {"repo_id": 30619741, "url": "https://github.com/SilverThings/SilverWare", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 21, "size": 3333, "license": "licensed"}}