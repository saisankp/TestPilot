{"test_class": {"identifier": "FlattenScopeTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools-model/drools-model-compiler/src/test/java/org/drools/modelcompiler/builder/generator/expressiontyper/FlattenScopeTest.java"}, "test_case": {"identifier": "flattenUnaryExpression", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void flattenUnaryExpression() {\n        List<Node> actual = flattenScope(MockTypeResolver.INSTANCE, expr(\"getMessageId\"));\n        List<Node> expected = Collections.singletonList(new NameExpr(\"getMessageId\"));\n        compareArrays(actual, expected);\n    }", "signature": "void flattenUnaryExpression()", "full_signature": "@Test public void flattenUnaryExpression()", "class_method_signature": "FlattenScopeTest.flattenUnaryExpression()", "testcase": true, "constructor": false, "invocations": ["flattenScope", "expr", "singletonList", "compareArrays"]}, "focal_class": {"identifier": "FlattenScope", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "flattenScope", "parameters": "( TypeResolver typeResolver, Expression expressionWithScope )", "modifiers": "public static", "return": "List<Node>", "signature": "List<Node> flattenScope( TypeResolver typeResolver, Expression expressionWithScope )", "full_signature": "public static List<Node> flattenScope( TypeResolver typeResolver, Expression expressionWithScope )", "class_method_signature": "FlattenScope.flattenScope( TypeResolver typeResolver, Expression expressionWithScope )", "testcase": false, "constructor": false}, {"identifier": "isFullyQualifiedClassName", "parameters": "( TypeResolver typeResolver, Expression scope )", "modifiers": "private static", "return": "boolean", "signature": "boolean isFullyQualifiedClassName( TypeResolver typeResolver, Expression scope )", "full_signature": "private static boolean isFullyQualifiedClassName( TypeResolver typeResolver, Expression scope )", "class_method_signature": "FlattenScope.isFullyQualifiedClassName( TypeResolver typeResolver, Expression scope )", "testcase": false, "constructor": false}, {"identifier": "FlattenScope", "parameters": "()", "modifiers": "private", "return": "", "signature": " FlattenScope()", "full_signature": "private  FlattenScope()", "class_method_signature": "FlattenScope.FlattenScope()", "testcase": false, "constructor": true}], "file": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/expressiontyper/FlattenScope.java"}, "focal_method": {"identifier": "flattenScope", "parameters": "( TypeResolver typeResolver, Expression expressionWithScope )", "modifiers": "public static", "return": "List<Node>", "body": "public static List<Node> flattenScope( TypeResolver typeResolver, Expression expressionWithScope ) {\n        List<Node> res = new ArrayList<>();\n        if (expressionWithScope instanceof FieldAccessExpr) {\n            FieldAccessExpr fieldAccessExpr = (FieldAccessExpr) expressionWithScope;\n            res.addAll(flattenScope( typeResolver, fieldAccessExpr.getScope() ));\n            res.add(fieldAccessExpr.getName());\n        } else if (expressionWithScope instanceof NullSafeFieldAccessExpr) {\n            NullSafeFieldAccessExpr fieldAccessExpr = (NullSafeFieldAccessExpr) expressionWithScope;\n            res.addAll(flattenScope( typeResolver, fieldAccessExpr.getScope() ));\n            res.add(fieldAccessExpr.getName());\n        } else if (expressionWithScope instanceof MethodCallExpr) {\n            MethodCallExpr methodCallExpr = (MethodCallExpr) expressionWithScope;\n            if (methodCallExpr.getScope().isPresent()) {\n                Expression scope = methodCallExpr.getScope().get();\n                if (isFullyQualifiedClassName( typeResolver, scope )) {\n                    res.add(scope);\n                } else {\n                    res.addAll( flattenScope( typeResolver, scope ) );\n                }\n            }\n            res.add(methodCallExpr);\n        } else if (expressionWithScope instanceof NullSafeMethodCallExpr) {\n            NullSafeMethodCallExpr methodCallExpr = (NullSafeMethodCallExpr) expressionWithScope;\n            if (methodCallExpr.getScope().isPresent()) {\n                res.addAll(flattenScope(typeResolver, methodCallExpr.getScope().orElseThrow(() -> new IllegalStateException(\"Scope expression is not present!\"))));\n            }\n            res.add(methodCallExpr);\n        } else if (expressionWithScope instanceof InlineCastExpr && ((InlineCastExpr) expressionWithScope).getExpression() instanceof FieldAccessExpr) {\n            InlineCastExpr inlineCastExpr = (InlineCastExpr) expressionWithScope;\n            Expression internalScope = ((FieldAccessExpr) inlineCastExpr.getExpression()).getScope();\n            res.addAll(flattenScope( typeResolver, internalScope ));\n            res.add(expressionWithScope);\n        } else if (expressionWithScope instanceof ArrayAccessExpr) {\n            ArrayAccessExpr arrayAccessExpr = (ArrayAccessExpr) expressionWithScope;\n            res.addAll(flattenScope( typeResolver, arrayAccessExpr.getName()) );\n            res.add(arrayAccessExpr);\n        } else {\n            res.add(expressionWithScope);\n        }\n        return res;\n    }", "signature": "List<Node> flattenScope( TypeResolver typeResolver, Expression expressionWithScope )", "full_signature": "public static List<Node> flattenScope( TypeResolver typeResolver, Expression expressionWithScope )", "class_method_signature": "FlattenScope.flattenScope( TypeResolver typeResolver, Expression expressionWithScope )", "testcase": false, "constructor": false, "invocations": ["addAll", "flattenScope", "getScope", "add", "getName", "addAll", "flattenScope", "getScope", "add", "getName", "isPresent", "getScope", "get", "getScope", "isFullyQualifiedClassName", "add", "addAll", "flattenScope", "add", "isPresent", "getScope", "addAll", "flattenScope", "orElseThrow", "getScope", "add", "getExpression", "getScope", "getExpression", "addAll", "flattenScope", "add", "addAll", "flattenScope", "getName", "add", "add"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}