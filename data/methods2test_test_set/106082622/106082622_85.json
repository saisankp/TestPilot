{"test_class": {"identifier": "StreamControllerTest", "superclass": "extends AbstractMvcTest", "interfaces": "", "fields": [{"original_string": "@ClassRule\n    public static SharedKafkaTestResource sharedKafkaTestResource = new SharedKafkaTestResource();", "modifier": "@ClassRule\n    public static", "type": "SharedKafkaTestResource", "declarator": "sharedKafkaTestResource = new SharedKafkaTestResource()", "var_name": "sharedKafkaTestResource"}, {"original_string": "@Autowired\n    private ViewTestTools viewTestTools;", "modifier": "@Autowired\n    private", "type": "ViewTestTools", "declarator": "viewTestTools", "var_name": "viewTestTools"}, {"original_string": "@Autowired\n    private ViewRepository viewRepository;", "modifier": "@Autowired\n    private", "type": "ViewRepository", "declarator": "viewRepository", "var_name": "viewRepository"}, {"original_string": "@Autowired\n    private ClusterTestTools clusterTestTools;", "modifier": "@Autowired\n    private", "type": "ClusterTestTools", "declarator": "clusterTestTools", "var_name": "clusterTestTools"}, {"original_string": "@Autowired\n    private StreamController streamController;", "modifier": "@Autowired\n    private", "type": "StreamController", "declarator": "streamController", "var_name": "streamController"}, {"original_string": "@Autowired\n    private WebSocketConsumersManager webSocketConsumersManager;", "modifier": "@Autowired\n    private", "type": "WebSocketConsumersManager", "declarator": "webSocketConsumersManager", "var_name": "webSocketConsumersManager"}], "file": "kafka-webview-ui/src/test/java/org/sourcelab/kafka/webview/ui/controller/stream/StreamControllerTest.java"}, "test_case": {"identifier": "shouldReceiveAMessageFromTheServer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReceiveAMessageFromTheServer() throws Exception {\n        final String expectedSessionId = \"MYSESSIONID\";\n        final String topicName = \"TestTopic\" + System.currentTimeMillis();\n\n        try {\n            // Sanity test, no active consumers\n            Assert.assertEquals(\"Should have no active consumers\", 0, webSocketConsumersManager.countActiveConsumers());\n\n            // Create a topic\n            sharedKafkaTestResource\n                .getKafkaTestUtils()\n                .createTopic(topicName, 2, (short) 1);\n\n            // Create cluster\n            final Cluster cluster = clusterTestTools\n                .createCluster(\"TestCluster\", sharedKafkaTestResource.getKafkaConnectString());\n\n            // Create view\n            final View view = viewTestTools\n                .createViewWithCluster(\"TestView-\" + System.currentTimeMillis(), cluster);\n\n            // Sanity test, no enforced partitions\n            assertEquals(\"Partitions Property should be empty string\", \"\", view.getPartitions());\n\n            final ConsumeRequest consumeRequest = new ConsumeRequest();\n            consumeRequest.setAction(\"head\");\n            consumeRequest.setPartitions(\"0,1\");\n            consumeRequest.setFilters(new ArrayList<>());\n            consumeRequest.setResultsPerPartition(10);\n\n            final SimpMessageHeaderAccessor mockHeaderAccessor = mock(SimpMessageHeaderAccessor.class);\n            final Authentication mockPrincipal = mock(Authentication.class);\n            when(mockHeaderAccessor.getUser())\n                .thenReturn(mockPrincipal);\n            when(mockPrincipal.getPrincipal())\n                .thenReturn(nonAdminUserDetails);\n            when(mockHeaderAccessor.getSessionId())\n                .thenReturn(expectedSessionId);\n\n            final String result = streamController.newConsumer(\n                view.getId(),\n                consumeRequest,\n                mockHeaderAccessor\n            );\n            assertEquals(\"Should return success response\", \"{success: true}\", result);\n\n            // Verify consumer stood up\n            assertEquals(\"Should have one active consumer\", 1, webSocketConsumersManager.countActiveConsumers());\n\n            // Lets refresh the view entity and verify the partitions field is still empty.\n            // Validates ISSUE-212\n            final View updatedView = viewRepository.findById(view.getId()).get();\n            assertEquals(\"Partitions Property should be empty string\", \"\", updatedView.getPartitions());\n        } finally {\n            // Cleanup, disconnect websocket consumers\n            webSocketConsumersManager.removeConsumersForSessionId(expectedSessionId);\n\n            // Remove created data.\n            viewTestTools.deleteAllViews();\n            clusterTestTools.deleteAllClusters();\n        }\n    }", "signature": "void shouldReceiveAMessageFromTheServer()", "full_signature": "@Test public void shouldReceiveAMessageFromTheServer()", "class_method_signature": "StreamControllerTest.shouldReceiveAMessageFromTheServer()", "testcase": true, "constructor": false, "invocations": ["currentTimeMillis", "assertEquals", "countActiveConsumers", "createTopic", "getKafkaTestUtils", "createCluster", "getKafkaConnectString", "createViewWithCluster", "currentTimeMillis", "assertEquals", "getPartitions", "setAction", "setPartitions", "setFilters", "setResultsPerPartition", "mock", "mock", "thenReturn", "when", "getUser", "thenReturn", "when", "getPrincipal", "thenReturn", "when", "getSessionId", "newConsumer", "getId", "assertEquals", "assertEquals", "countActiveConsumers", "get", "findById", "getId", "assertEquals", "getPartitions", "removeConsumersForSessionId", "deleteAllViews", "deleteAllClusters"]}, "focal_class": {"identifier": "StreamController", "superclass": "extends BaseController", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private AppProperties appProperties;", "modifier": "@Autowired\n    private", "type": "AppProperties", "declarator": "appProperties", "var_name": "appProperties"}, {"original_string": "@Autowired\n    private ViewRepository viewRepository;", "modifier": "@Autowired\n    private", "type": "ViewRepository", "declarator": "viewRepository", "var_name": "viewRepository"}, {"original_string": "@Autowired\n    private WebSocketConsumersManager webSocketConsumersManager;", "modifier": "@Autowired\n    private", "type": "WebSocketConsumersManager", "declarator": "webSocketConsumersManager", "var_name": "webSocketConsumersManager"}], "methods": [{"identifier": "index", "parameters": "(final Model model)", "modifiers": "@RequestMapping(path = \"\", method = RequestMethod.GET) public", "return": "String", "signature": "String index(final Model model)", "full_signature": "@RequestMapping(path = \"\", method = RequestMethod.GET) public String index(final Model model)", "class_method_signature": "StreamController.index(final Model model)", "testcase": false, "constructor": false}, {"identifier": "stream", "parameters": "(\n        @PathVariable final Long id,\n        final Model model,\n        final RedirectAttributes redirectAttributes)", "modifiers": "@RequestMapping(path = \"/{id}\", method = RequestMethod.GET) public", "return": "String", "signature": "String stream(\n        @PathVariable final Long id,\n        final Model model,\n        final RedirectAttributes redirectAttributes)", "full_signature": "@RequestMapping(path = \"/{id}\", method = RequestMethod.GET) public String stream(\n        @PathVariable final Long id,\n        final Model model,\n        final RedirectAttributes redirectAttributes)", "class_method_signature": "StreamController.stream(\n        @PathVariable final Long id,\n        final Model model,\n        final RedirectAttributes redirectAttributes)", "testcase": false, "constructor": false}, {"identifier": "newConsumer", "parameters": "(\n        @DestinationVariable final Long viewId,\n        final ConsumeRequest consumeRequest,\n        final SimpMessageHeaderAccessor headerAccessor)", "modifiers": "@MessageMapping(\"/consume/{viewId}\") @Transactional(readOnly = true) public", "return": "String", "signature": "String newConsumer(\n        @DestinationVariable final Long viewId,\n        final ConsumeRequest consumeRequest,\n        final SimpMessageHeaderAccessor headerAccessor)", "full_signature": "@MessageMapping(\"/consume/{viewId}\") @Transactional(readOnly = true) public String newConsumer(\n        @DestinationVariable final Long viewId,\n        final ConsumeRequest consumeRequest,\n        final SimpMessageHeaderAccessor headerAccessor)", "class_method_signature": "StreamController.newConsumer(\n        @DestinationVariable final Long viewId,\n        final ConsumeRequest consumeRequest,\n        final SimpMessageHeaderAccessor headerAccessor)", "testcase": false, "constructor": false}, {"identifier": "pauseConsumer", "parameters": "(\n        @DestinationVariable final Long viewId,\n        final SimpMessageHeaderAccessor headerAccessor)", "modifiers": "@MessageMapping(\"/pause/{viewId}\") @Transactional(readOnly = true) public", "return": "String", "signature": "String pauseConsumer(\n        @DestinationVariable final Long viewId,\n        final SimpMessageHeaderAccessor headerAccessor)", "full_signature": "@MessageMapping(\"/pause/{viewId}\") @Transactional(readOnly = true) public String pauseConsumer(\n        @DestinationVariable final Long viewId,\n        final SimpMessageHeaderAccessor headerAccessor)", "class_method_signature": "StreamController.pauseConsumer(\n        @DestinationVariable final Long viewId,\n        final SimpMessageHeaderAccessor headerAccessor)", "testcase": false, "constructor": false}, {"identifier": "resumeConsumer", "parameters": "(\n        @DestinationVariable final Long viewId,\n        final SimpMessageHeaderAccessor headerAccessor)", "modifiers": "@MessageMapping(\"/resume/{viewId}\") @Transactional(readOnly = true) public", "return": "String", "signature": "String resumeConsumer(\n        @DestinationVariable final Long viewId,\n        final SimpMessageHeaderAccessor headerAccessor)", "full_signature": "@MessageMapping(\"/resume/{viewId}\") @Transactional(readOnly = true) public String resumeConsumer(\n        @DestinationVariable final Long viewId,\n        final SimpMessageHeaderAccessor headerAccessor)", "class_method_signature": "StreamController.resumeConsumer(\n        @DestinationVariable final Long viewId,\n        final SimpMessageHeaderAccessor headerAccessor)", "testcase": false, "constructor": false}, {"identifier": "getLoggedInUserId", "parameters": "(final SimpMessageHeaderAccessor headerAccessor)", "modifiers": "private", "return": "long", "signature": "long getLoggedInUserId(final SimpMessageHeaderAccessor headerAccessor)", "full_signature": "private long getLoggedInUserId(final SimpMessageHeaderAccessor headerAccessor)", "class_method_signature": "StreamController.getLoggedInUserId(final SimpMessageHeaderAccessor headerAccessor)", "testcase": false, "constructor": false}, {"identifier": "getLoggedInUser", "parameters": "(final SimpMessageHeaderAccessor headerAccessor)", "modifiers": "private", "return": "CustomUserDetails", "signature": "CustomUserDetails getLoggedInUser(final SimpMessageHeaderAccessor headerAccessor)", "full_signature": "private CustomUserDetails getLoggedInUser(final SimpMessageHeaderAccessor headerAccessor)", "class_method_signature": "StreamController.getLoggedInUser(final SimpMessageHeaderAccessor headerAccessor)", "testcase": false, "constructor": false}], "file": "kafka-webview-ui/src/main/java/org/sourcelab/kafka/webview/ui/controller/stream/StreamController.java"}, "focal_method": {"identifier": "newConsumer", "parameters": "(\n        @DestinationVariable final Long viewId,\n        final ConsumeRequest consumeRequest,\n        final SimpMessageHeaderAccessor headerAccessor)", "modifiers": "@MessageMapping(\"/consume/{viewId}\") @Transactional(readOnly = true) public", "return": "String", "body": "@MessageMapping(\"/consume/{viewId}\")\n    @Transactional(readOnly = true)\n    public String newConsumer(\n        @DestinationVariable final Long viewId,\n        final ConsumeRequest consumeRequest,\n        final SimpMessageHeaderAccessor headerAccessor) {\n\n        // Retrieve view\n        final Optional<View> viewOptional = viewRepository.findById(viewId);\n        if (!viewOptional.isPresent()) {\n            return \"{success: false}\";\n        }\n        final View view = viewOptional.get();\n\n        // Build a session identifier\n        final long userId = getLoggedInUserId(headerAccessor);\n        final String sessionId = headerAccessor.getSessionId();\n        final SessionIdentifier sessionIdentifier = SessionIdentifier.newStreamIdentifier(userId, sessionId);\n\n        // Override settings\n        // TODO View gets flushed and changes are persisted.\n        final ViewCustomizer viewCustomizer = new ViewCustomizer(view, consumeRequest);\n        viewCustomizer.overrideViewSettings();\n        final List<FilterDefinition> configuredFilters = viewCustomizer.getFilterDefinitions();\n\n        // Configure where to start from\n        final StartingPosition startingPosition = viewCustomizer.getStartingPosition();\n\n        webSocketConsumersManager.addNewConsumer(view, configuredFilters, startingPosition, sessionIdentifier);\n        return \"{success: true}\";\n    }", "signature": "String newConsumer(\n        @DestinationVariable final Long viewId,\n        final ConsumeRequest consumeRequest,\n        final SimpMessageHeaderAccessor headerAccessor)", "full_signature": "@MessageMapping(\"/consume/{viewId}\") @Transactional(readOnly = true) public String newConsumer(\n        @DestinationVariable final Long viewId,\n        final ConsumeRequest consumeRequest,\n        final SimpMessageHeaderAccessor headerAccessor)", "class_method_signature": "StreamController.newConsumer(\n        @DestinationVariable final Long viewId,\n        final ConsumeRequest consumeRequest,\n        final SimpMessageHeaderAccessor headerAccessor)", "testcase": false, "constructor": false, "invocations": ["findById", "isPresent", "get", "getLoggedInUserId", "getSessionId", "newStreamIdentifier", "overrideViewSettings", "getFilterDefinitions", "getStartingPosition", "addNewConsumer"]}, "repository": {"repo_id": 106082622, "url": "https://github.com/SourceLabOrg/kafka-webview", "stars": 256, "created": "10/7/2017 8:28:45 AM +00:00", "updates": "2020-01-25T06:02:44+00:00", "fork": "False", "license": "licensed"}}