{"test_class": {"identifier": "PreLollipopNetworkObservingStrategyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public MockitoRule rule = MockitoJUnit.rule();", "modifier": "@Rule public", "type": "MockitoRule", "declarator": "rule = MockitoJUnit.rule()", "var_name": "rule"}, {"original_string": "@Spy private PreLollipopNetworkObservingStrategy strategy =\n      new PreLollipopNetworkObservingStrategy();", "modifier": "@Spy private", "type": "PreLollipopNetworkObservingStrategy", "declarator": "strategy =\n      new PreLollipopNetworkObservingStrategy()", "var_name": "strategy"}, {"original_string": "@Mock private BroadcastReceiver broadcastReceiver;", "modifier": "@Mock private", "type": "BroadcastReceiver", "declarator": "broadcastReceiver", "var_name": "broadcastReceiver"}], "file": "library/src/test/java/com/github/pwittchen/reactivenetwork/library/rx2/network/observing/strategy/PreLollipopNetworkObservingStrategyTest.java"}, "test_case": {"identifier": "shouldObserveConnectivity", "parameters": "()", "modifiers": "@Test @SuppressWarnings(\"CheckReturnValue\") public", "return": "void", "body": "@Test @SuppressWarnings(\"CheckReturnValue\") public void shouldObserveConnectivity() {\n    // given\n    final NetworkObservingStrategy strategy = new PreLollipopNetworkObservingStrategy();\n    final Context context = RuntimeEnvironment.application.getApplicationContext();\n\n    // when\n    strategy.observeNetworkConnectivity(context).subscribe(new Consumer<Connectivity>() {\n      @Override public void accept(Connectivity connectivity) throws Exception {\n        // then\n        assertThat(connectivity.state()).isEqualTo(NetworkInfo.State.CONNECTED);\n      }\n    });\n  }", "signature": "void shouldObserveConnectivity()", "full_signature": "@Test @SuppressWarnings(\"CheckReturnValue\") public void shouldObserveConnectivity()", "class_method_signature": "PreLollipopNetworkObservingStrategyTest.shouldObserveConnectivity()", "testcase": true, "constructor": false, "invocations": ["getApplicationContext", "subscribe", "observeNetworkConnectivity", "isEqualTo", "assertThat", "state"]}, "focal_class": {"identifier": "PreLollipopNetworkObservingStrategy", "superclass": "", "interfaces": "implements NetworkObservingStrategy", "fields": [], "methods": [{"identifier": "observeNetworkConnectivity", "parameters": "(final Context context)", "modifiers": "@Override public", "return": "Observable<Connectivity>", "signature": "Observable<Connectivity> observeNetworkConnectivity(final Context context)", "full_signature": "@Override public Observable<Connectivity> observeNetworkConnectivity(final Context context)", "class_method_signature": "PreLollipopNetworkObservingStrategy.observeNetworkConnectivity(final Context context)", "testcase": false, "constructor": false}, {"identifier": "tryToUnregisterReceiver", "parameters": "(final Context context, final BroadcastReceiver receiver)", "modifiers": "protected", "return": "void", "signature": "void tryToUnregisterReceiver(final Context context, final BroadcastReceiver receiver)", "full_signature": "protected void tryToUnregisterReceiver(final Context context, final BroadcastReceiver receiver)", "class_method_signature": "PreLollipopNetworkObservingStrategy.tryToUnregisterReceiver(final Context context, final BroadcastReceiver receiver)", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(final String message, final Exception exception)", "modifiers": "@Override public", "return": "void", "signature": "void onError(final String message, final Exception exception)", "full_signature": "@Override public void onError(final String message, final Exception exception)", "class_method_signature": "PreLollipopNetworkObservingStrategy.onError(final String message, final Exception exception)", "testcase": false, "constructor": false}, {"identifier": "disposeInUiThread", "parameters": "(final Action action)", "modifiers": "private", "return": "Disposable", "signature": "Disposable disposeInUiThread(final Action action)", "full_signature": "private Disposable disposeInUiThread(final Action action)", "class_method_signature": "PreLollipopNetworkObservingStrategy.disposeInUiThread(final Action action)", "testcase": false, "constructor": false}], "file": "library/src/main/java/com/github/pwittchen/reactivenetwork/library/rx2/network/observing/strategy/PreLollipopNetworkObservingStrategy.java"}, "focal_method": {"identifier": "observeNetworkConnectivity", "parameters": "(final Context context)", "modifiers": "@Override public", "return": "Observable<Connectivity>", "body": "@Override public Observable<Connectivity> observeNetworkConnectivity(final Context context) {\n    final IntentFilter filter = new IntentFilter();\n    filter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);\n\n    return Observable.create(new ObservableOnSubscribe<Connectivity>() {\n      @Override public void subscribe(final ObservableEmitter<Connectivity> emitter)\n          throws Exception {\n        final BroadcastReceiver receiver = new BroadcastReceiver() {\n          @Override public void onReceive(Context context, Intent intent) {\n            emitter.onNext(Connectivity.create(context));\n          }\n        };\n\n        context.registerReceiver(receiver, filter);\n\n        Disposable disposable = disposeInUiThread(new Action() {\n          @Override public void run() {\n            tryToUnregisterReceiver(context, receiver);\n          }\n        });\n        emitter.setDisposable(disposable);\n      }\n    }).defaultIfEmpty(Connectivity.create());\n  }", "signature": "Observable<Connectivity> observeNetworkConnectivity(final Context context)", "full_signature": "@Override public Observable<Connectivity> observeNetworkConnectivity(final Context context)", "class_method_signature": "PreLollipopNetworkObservingStrategy.observeNetworkConnectivity(final Context context)", "testcase": false, "constructor": false, "invocations": ["addAction", "defaultIfEmpty", "create", "onNext", "create", "registerReceiver", "disposeInUiThread", "tryToUnregisterReceiver", "setDisposable", "create"]}, "repository": {"repo_id": 40492118, "url": "https://github.com/pwittchen/ReactiveNetwork", "stars": 2282, "created": "8/10/2015 4:06:58 PM +00:00", "updates": "2020-01-26T20:59:17+00:00", "fork": "False", "license": "licensed"}}