{"test_class": {"identifier": "UseCaseTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private UseCaseTestClass useCase;", "modifier": "private", "type": "UseCaseTestClass", "declarator": "useCase", "var_name": "useCase"}, {"original_string": "@Mock private ThreadExecutor mockThreadExecutor;", "modifier": "@Mock private", "type": "ThreadExecutor", "declarator": "mockThreadExecutor", "var_name": "mockThreadExecutor"}, {"original_string": "@Mock private PostExecutionThread mockPostExecutionThread;", "modifier": "@Mock private", "type": "PostExecutionThread", "declarator": "mockPostExecutionThread", "var_name": "mockPostExecutionThread"}], "file": "domain/src/test/java/com/github/hilo/domain/interactor/UseCaseTest.java"}, "test_case": {"identifier": "testSubscriptionWhenExecutingUseCase", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void testSubscriptionWhenExecutingUseCase() {\n\t\t// \u5982\u679c\u4e0d\u7ed9\u4ed6\u4e00\u4e2aScheduler\u7684\u8bdd, \u4f1a\u629bnullpoint\u5f02\u5e38\uff0c \u6240\u4ee5Assert.assertThat(testSubscriber.isUnsubscribed(), is\n      // (true)); \u5728\u629b\u51fa\u5f02\u5e38\u65f6\uff0c\u4f1a\u9ed8\u8ba4\u89e3\u9664testSubscriber\u7684\u8ba2\u9605\n\t\tTestSubscriber<Integer> testSubscriber = new TestSubscriber<>();\n\t\t//        given(mockPostExecutionThread.getScheduler()).willReturn(new TestScheduler());\n\t\tuseCase.execute(testSubscriber);\n\t\t// ----------------------------------------------------------------------------\n\n\t\tMockito.when(!testSubscriber.isUnsubscribed())\n\t\t\t\t\t .thenThrow(new NullPointerException(\"scheduler must be not null\"));\n\t}", "signature": "void testSubscriptionWhenExecutingUseCase()", "full_signature": "@Test public void testSubscriptionWhenExecutingUseCase()", "class_method_signature": "UseCaseTest.testSubscriptionWhenExecutingUseCase()", "testcase": true, "constructor": false, "invocations": ["execute", "thenThrow", "when", "isUnsubscribed"]}, "focal_class": {"identifier": "UseCase", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ThreadExecutor threadExecutor;", "modifier": "private final", "type": "ThreadExecutor", "declarator": "threadExecutor", "var_name": "threadExecutor"}, {"original_string": "private final PostExecutionThread postExecutionThread;", "modifier": "private final", "type": "PostExecutionThread", "declarator": "postExecutionThread", "var_name": "postExecutionThread"}, {"original_string": "private Subscription subscription = Subscriptions.empty();", "modifier": "private", "type": "Subscription", "declarator": "subscription = Subscriptions.empty()", "var_name": "subscription"}], "methods": [{"identifier": "UseCase", "parameters": "(ThreadExecutor threadExecutor,PostExecutionThread postExecutionThread)", "modifiers": "protected", "return": "", "signature": " UseCase(ThreadExecutor threadExecutor,PostExecutionThread postExecutionThread)", "full_signature": "protected  UseCase(ThreadExecutor threadExecutor,PostExecutionThread postExecutionThread)", "class_method_signature": "UseCase.UseCase(ThreadExecutor threadExecutor,PostExecutionThread postExecutionThread)", "testcase": false, "constructor": true}, {"identifier": "buildUseCaseObservable", "parameters": "()", "modifiers": "protected abstract", "return": "Observable", "signature": "Observable buildUseCaseObservable()", "full_signature": "protected abstract Observable buildUseCaseObservable()", "class_method_signature": "UseCase.buildUseCaseObservable()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(Subscriber UseCaseSubscriber)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void execute(Subscriber UseCaseSubscriber)", "full_signature": "@SuppressWarnings(\"unchecked\") public void execute(Subscriber UseCaseSubscriber)", "class_method_signature": "UseCase.execute(Subscriber UseCaseSubscriber)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "Observable", "signature": "Observable execute()", "full_signature": "@SuppressWarnings(\"unchecked\") public Observable execute()", "class_method_signature": "UseCase.execute()", "testcase": false, "constructor": false}, {"identifier": "unsubscribe", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void unsubscribe()", "full_signature": "public void unsubscribe()", "class_method_signature": "UseCase.unsubscribe()", "testcase": false, "constructor": false}], "file": "domain/src/main/java/com/github/hilo/domain/interactor/UseCase.java"}, "focal_method": {"identifier": "execute", "parameters": "(Subscriber UseCaseSubscriber)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "body": "@SuppressWarnings(\"unchecked\") public void execute(Subscriber UseCaseSubscriber) {\n\t\tthis.subscription = this.buildUseCaseObservable()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.subscribeOn(Schedulers.from(threadExecutor))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.observeOn(postExecutionThread.getScheduler())\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.subscribe(UseCaseSubscriber);\n\t}", "signature": "void execute(Subscriber UseCaseSubscriber)", "full_signature": "@SuppressWarnings(\"unchecked\") public void execute(Subscriber UseCaseSubscriber)", "class_method_signature": "UseCase.execute(Subscriber UseCaseSubscriber)", "testcase": false, "constructor": false, "invocations": ["subscribe", "observeOn", "subscribeOn", "buildUseCaseObservable", "from", "getScheduler"]}, "repository": {"repo_id": 56736842, "url": "https://github.com/hiloWang/MVP-DAGGER2-RETROFIT-RX", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 7, "size": 1264, "license": "licensed"}}