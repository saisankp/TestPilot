{"test_class": {"identifier": "VpcManagerImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    VpcOfferingServiceMapDao vpcOffSvcMapDao;", "modifier": "@Mock", "type": "VpcOfferingServiceMapDao", "declarator": "vpcOffSvcMapDao", "var_name": "vpcOffSvcMapDao"}, {"original_string": "VpcManagerImpl manager;", "modifier": "", "type": "VpcManagerImpl", "declarator": "manager", "var_name": "manager"}], "file": "server/src/test/java/com/cloud/network/vpc/VpcManagerImplTest.java"}, "test_case": {"identifier": "testCheckCapabilityPerServiceProvider", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCheckCapabilityPerServiceProvider() {\n        // Prepare\n        final Map<Capability, String> capabilities = new HashMap<>();\n        capabilities.put(Capability.RegionLevelVpc, \"\");\n        capabilities.put(Capability.DistributedRouter, \"\");\n        Set<Network.Provider> providers = this.prepareVpcManagerForCheckingCapabilityPerService(Service.Connectivity, capabilities);\n\n        // Execute\n        this.manager.checkCapabilityPerServiceProvider(providers, Capability.DistributedRouter, Service.Connectivity);\n        this.manager.checkCapabilityPerServiceProvider(providers, Capability.RegionLevelVpc, Service.Connectivity);\n    }", "signature": "void testCheckCapabilityPerServiceProvider()", "full_signature": "@Test public void testCheckCapabilityPerServiceProvider()", "class_method_signature": "VpcManagerImplTest.testCheckCapabilityPerServiceProvider()", "testcase": true, "constructor": false, "invocations": ["put", "put", "prepareVpcManagerForCheckingCapabilityPerService", "checkCapabilityPerServiceProvider", "checkCapabilityPerServiceProvider"]}, "focal_class": {"identifier": "VpcManagerImpl", "superclass": "extends ManagerBase", "interfaces": "implements VpcManager, VpcProvisioningService, VpcService", "fields": [{"original_string": "private static final Logger s_logger = LoggerFactory.getLogger(VpcManagerImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(VpcManagerImpl.class)", "var_name": "s_logger"}, {"original_string": "public static final String SERVICE = \"service\";", "modifier": "public static final", "type": "String", "declarator": "SERVICE = \"service\"", "var_name": "SERVICE"}, {"original_string": "public static final String CAPABILITYTYPE = \"capabilitytype\";", "modifier": "public static final", "type": "String", "declarator": "CAPABILITYTYPE = \"capabilitytype\"", "var_name": "CAPABILITYTYPE"}, {"original_string": "public static final String CAPABILITYVALUE = \"capabilityvalue\";", "modifier": "public static final", "type": "String", "declarator": "CAPABILITYVALUE = \"capabilityvalue\"", "var_name": "CAPABILITYVALUE"}, {"original_string": "public static final String TRUE_VALUE = \"true\";", "modifier": "public static final", "type": "String", "declarator": "TRUE_VALUE = \"true\"", "var_name": "TRUE_VALUE"}, {"original_string": "public static final String FALSE_VALUE = \"false\";", "modifier": "public static final", "type": "String", "declarator": "FALSE_VALUE = \"false\"", "var_name": "FALSE_VALUE"}, {"original_string": "@Inject\n    EntityManager _entityMgr;", "modifier": "@Inject", "type": "EntityManager", "declarator": "_entityMgr", "var_name": "_entityMgr"}, {"original_string": "@Inject\n    VpcOfferingDao _vpcOffDao;", "modifier": "@Inject", "type": "VpcOfferingDao", "declarator": "_vpcOffDao", "var_name": "_vpcOffDao"}, {"original_string": "@Inject\n    VpcOfferingServiceMapDao _vpcOffSvcMapDao;", "modifier": "@Inject", "type": "VpcOfferingServiceMapDao", "declarator": "_vpcOffSvcMapDao", "var_name": "_vpcOffSvcMapDao"}, {"original_string": "@Inject\n    VpcDao _vpcDao;", "modifier": "@Inject", "type": "VpcDao", "declarator": "_vpcDao", "var_name": "_vpcDao"}, {"original_string": "@Inject\n    ConfigurationDao _configDao;", "modifier": "@Inject", "type": "ConfigurationDao", "declarator": "_configDao", "var_name": "_configDao"}, {"original_string": "@Inject\n    ConfigurationManager _configMgr;", "modifier": "@Inject", "type": "ConfigurationManager", "declarator": "_configMgr", "var_name": "_configMgr"}, {"original_string": "@Inject\n    AccountManager _accountMgr;", "modifier": "@Inject", "type": "AccountManager", "declarator": "_accountMgr", "var_name": "_accountMgr"}, {"original_string": "@Inject\n    NetworkDao _ntwkDao;", "modifier": "@Inject", "type": "NetworkDao", "declarator": "_ntwkDao", "var_name": "_ntwkDao"}, {"original_string": "@Inject\n    NetworkOrchestrationService _ntwkMgr;", "modifier": "@Inject", "type": "NetworkOrchestrationService", "declarator": "_ntwkMgr", "var_name": "_ntwkMgr"}, {"original_string": "@Inject\n    NetworkModel _ntwkModel;", "modifier": "@Inject", "type": "NetworkModel", "declarator": "_ntwkModel", "var_name": "_ntwkModel"}, {"original_string": "@Inject\n    NetworkService _ntwkSvc;", "modifier": "@Inject", "type": "NetworkService", "declarator": "_ntwkSvc", "var_name": "_ntwkSvc"}, {"original_string": "@Inject\n    IPAddressDao _ipAddressDao;", "modifier": "@Inject", "type": "IPAddressDao", "declarator": "_ipAddressDao", "var_name": "_ipAddressDao"}, {"original_string": "@Inject\n    DomainRouterDao _routerDao;", "modifier": "@Inject", "type": "DomainRouterDao", "declarator": "_routerDao", "var_name": "_routerDao"}, {"original_string": "@Inject\n    VpcGatewayDao _vpcGatewayDao;", "modifier": "@Inject", "type": "VpcGatewayDao", "declarator": "_vpcGatewayDao", "var_name": "_vpcGatewayDao"}, {"original_string": "@Inject\n    PrivateIpDao _privateIpDao;", "modifier": "@Inject", "type": "PrivateIpDao", "declarator": "_privateIpDao", "var_name": "_privateIpDao"}, {"original_string": "@Inject\n    StaticRouteDao _staticRouteDao;", "modifier": "@Inject", "type": "StaticRouteDao", "declarator": "_staticRouteDao", "var_name": "_staticRouteDao"}, {"original_string": "@Inject\n    NetworkOfferingServiceMapDao _ntwkOffServiceDao;", "modifier": "@Inject", "type": "NetworkOfferingServiceMapDao", "declarator": "_ntwkOffServiceDao", "var_name": "_ntwkOffServiceDao"}, {"original_string": "@Inject\n    VpcOfferingServiceMapDao _vpcOffServiceDao;", "modifier": "@Inject", "type": "VpcOfferingServiceMapDao", "declarator": "_vpcOffServiceDao", "var_name": "_vpcOffServiceDao"}, {"original_string": "@Inject\n    PhysicalNetworkDao _pNtwkDao;", "modifier": "@Inject", "type": "PhysicalNetworkDao", "declarator": "_pNtwkDao", "var_name": "_pNtwkDao"}, {"original_string": "@Inject\n    ResourceTagDao _resourceTagDao;", "modifier": "@Inject", "type": "ResourceTagDao", "declarator": "_resourceTagDao", "var_name": "_resourceTagDao"}, {"original_string": "@Inject\n    FirewallRulesDao _firewallDao;", "modifier": "@Inject", "type": "FirewallRulesDao", "declarator": "_firewallDao", "var_name": "_firewallDao"}, {"original_string": "@Inject\n    Site2SiteVpnGatewayDao _vpnGatewayDao;", "modifier": "@Inject", "type": "Site2SiteVpnGatewayDao", "declarator": "_vpnGatewayDao", "var_name": "_vpnGatewayDao"}, {"original_string": "@Inject\n    Site2SiteVpnManager _s2sVpnMgr;", "modifier": "@Inject", "type": "Site2SiteVpnManager", "declarator": "_s2sVpnMgr", "var_name": "_s2sVpnMgr"}, {"original_string": "@Inject\n    VlanDao _vlanDao = null;", "modifier": "@Inject", "type": "VlanDao", "declarator": "_vlanDao = null", "var_name": "_vlanDao"}, {"original_string": "@Inject\n    ResourceLimitService _resourceLimitMgr;", "modifier": "@Inject", "type": "ResourceLimitService", "declarator": "_resourceLimitMgr", "var_name": "_resourceLimitMgr"}, {"original_string": "@Inject\n    VpcServiceMapDao _vpcSrvcDao;", "modifier": "@Inject", "type": "VpcServiceMapDao", "declarator": "_vpcSrvcDao", "var_name": "_vpcSrvcDao"}, {"original_string": "@Inject\n    DataCenterDao _dcDao;", "modifier": "@Inject", "type": "DataCenterDao", "declarator": "_dcDao", "var_name": "_dcDao"}, {"original_string": "@Inject\n    ConfigurationServer _configServer;", "modifier": "@Inject", "type": "ConfigurationServer", "declarator": "_configServer", "var_name": "_configServer"}, {"original_string": "@Inject\n    NetworkACLDao _networkAclDao;", "modifier": "@Inject", "type": "NetworkACLDao", "declarator": "_networkAclDao", "var_name": "_networkAclDao"}, {"original_string": "@Inject\n    NetworkACLItemDao _networkACLItemDao;", "modifier": "@Inject", "type": "NetworkACLItemDao", "declarator": "_networkACLItemDao", "var_name": "_networkACLItemDao"}, {"original_string": "@Inject\n    NetworkACLManager _networkAclMgr;", "modifier": "@Inject", "type": "NetworkACLManager", "declarator": "_networkAclMgr", "var_name": "_networkAclMgr"}, {"original_string": "@Inject\n    IpAddressManager _ipAddrMgr;", "modifier": "@Inject", "type": "IpAddressManager", "declarator": "_ipAddrMgr", "var_name": "_ipAddrMgr"}, {"original_string": "@Inject\n    ConfigDepot _configDepot;", "modifier": "@Inject", "type": "ConfigDepot", "declarator": "_configDepot", "var_name": "_configDepot"}, {"original_string": "@Inject\n    private VpcPrivateGatewayTransactionCallable vpcTxCallable;", "modifier": "@Inject\n    private", "type": "VpcPrivateGatewayTransactionCallable", "declarator": "vpcTxCallable", "var_name": "vpcTxCallable"}, {"original_string": "private final ScheduledExecutorService _executor = Executors.newScheduledThreadPool(1,\n            new NamedThreadFactory(\"VpcChecker\"));", "modifier": "private final", "type": "ScheduledExecutorService", "declarator": "_executor = Executors.newScheduledThreadPool(1,\n            new NamedThreadFactory(\"VpcChecker\"))", "var_name": "_executor"}, {"original_string": "private List<VpcProvider> vpcElements = null;", "modifier": "private", "type": "List<VpcProvider>", "declarator": "vpcElements = null", "var_name": "vpcElements"}, {"original_string": "private final List<Service> nonSupportedServices = Arrays.asList(Service.SecurityGroup, Service.Firewall);", "modifier": "private final", "type": "List<Service>", "declarator": "nonSupportedServices = Arrays.asList(Service.SecurityGroup, Service.Firewall)", "var_name": "nonSupportedServices"}, {"original_string": "private final List<Provider> supportedProviders = Arrays.asList(Provider.VPCVirtualRouter,\n            Provider.NiciraNvp, Provider.InternalLbVm, Provider.JuniperContrailVpcRouter,\n            Provider.NuageVsp);", "modifier": "private final", "type": "List<Provider>", "declarator": "supportedProviders = Arrays.asList(Provider.VPCVirtualRouter,\n            Provider.NiciraNvp, Provider.InternalLbVm, Provider.JuniperContrailVpcRouter,\n            Provider.NuageVsp)", "var_name": "supportedProviders"}, {"original_string": "int _cleanupInterval;", "modifier": "", "type": "int", "declarator": "_cleanupInterval", "var_name": "_cleanupInterval"}, {"original_string": "int _maxNetworks;", "modifier": "", "type": "int", "declarator": "_maxNetworks", "var_name": "_maxNetworks"}, {"original_string": "SearchBuilder<IPAddressVO> IpAddressSearch;", "modifier": "", "type": "SearchBuilder<IPAddressVO>", "declarator": "IpAddressSearch", "var_name": "IpAddressSearch"}, {"original_string": "protected final List<HypervisorType> hTypes = new ArrayList<>();", "modifier": "protected final", "type": "List<HypervisorType>", "declarator": "hTypes = new ArrayList<>()", "var_name": "hTypes"}], "methods": [{"identifier": "setupSupportedVpcHypervisorsList", "parameters": "()", "modifiers": "@PostConstruct protected", "return": "void", "signature": "void setupSupportedVpcHypervisorsList()", "full_signature": "@PostConstruct protected void setupSupportedVpcHypervisorsList()", "class_method_signature": "VpcManagerImpl.setupSupportedVpcHypervisorsList()", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(final String name, final Map<String, Object> params)", "modifiers": "@Override @DB public", "return": "boolean", "signature": "boolean configure(final String name, final Map<String, Object> params)", "full_signature": "@Override @DB public boolean configure(final String name, final Map<String, Object> params)", "class_method_signature": "VpcManagerImpl.configure(final String name, final Map<String, Object> params)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean start()", "full_signature": "@Override public boolean start()", "class_method_signature": "VpcManagerImpl.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean stop()", "full_signature": "@Override public boolean stop()", "class_method_signature": "VpcManagerImpl.stop()", "testcase": false, "constructor": false}, {"identifier": "getVpcNetworks", "parameters": "(final long vpcId)", "modifiers": "@Override public", "return": "List<? extends Network>", "signature": "List<? extends Network> getVpcNetworks(final long vpcId)", "full_signature": "@Override public List<? extends Network> getVpcNetworks(final long vpcId)", "class_method_signature": "VpcManagerImpl.getVpcNetworks(final long vpcId)", "testcase": false, "constructor": false}, {"identifier": "getVpcOffering", "parameters": "(final long vpcOffId)", "modifiers": "@Override public", "return": "VpcOffering", "signature": "VpcOffering getVpcOffering(final long vpcOffId)", "full_signature": "@Override public VpcOffering getVpcOffering(final long vpcOffId)", "class_method_signature": "VpcManagerImpl.getVpcOffering(final long vpcOffId)", "testcase": false, "constructor": false}, {"identifier": "createVpcOffering", "parameters": "(final String name, final String displayText,\n                                         final List<String> supportedServices, final Map<String, List<String>> serviceProviders,\n                                         final Map serviceCapabilitystList, final Long serviceOfferingId)", "modifiers": "@Override @ActionEvent(eventType = EventTypes.EVENT_VPC_OFFERING_CREATE, eventDescription = \"creating vpc offering\", create = true) public", "return": "VpcOffering", "signature": "VpcOffering createVpcOffering(final String name, final String displayText,\n                                         final List<String> supportedServices, final Map<String, List<String>> serviceProviders,\n                                         final Map serviceCapabilitystList, final Long serviceOfferingId)", "full_signature": "@Override @ActionEvent(eventType = EventTypes.EVENT_VPC_OFFERING_CREATE, eventDescription = \"creating vpc offering\", create = true) public VpcOffering createVpcOffering(final String name, final String displayText,\n                                         final List<String> supportedServices, final Map<String, List<String>> serviceProviders,\n                                         final Map serviceCapabilitystList, final Long serviceOfferingId)", "class_method_signature": "VpcManagerImpl.createVpcOffering(final String name, final String displayText,\n                                         final List<String> supportedServices, final Map<String, List<String>> serviceProviders,\n                                         final Map serviceCapabilitystList, final Long serviceOfferingId)", "testcase": false, "constructor": false}, {"identifier": "createVpcOffering", "parameters": "(final String name, final String displayText,\n                                            final Map<Network.Service, Set<Network.Provider>> svcProviderMap,\n                                            final boolean isDefault, final State state, final Long serviceOfferingId, final boolean supportsDistributedRouter,\n                                            final boolean offersRegionLevelVPC,\n                                            final boolean redundantRouter)", "modifiers": "@DB protected", "return": "VpcOffering", "signature": "VpcOffering createVpcOffering(final String name, final String displayText,\n                                            final Map<Network.Service, Set<Network.Provider>> svcProviderMap,\n                                            final boolean isDefault, final State state, final Long serviceOfferingId, final boolean supportsDistributedRouter,\n                                            final boolean offersRegionLevelVPC,\n                                            final boolean redundantRouter)", "full_signature": "@DB protected VpcOffering createVpcOffering(final String name, final String displayText,\n                                            final Map<Network.Service, Set<Network.Provider>> svcProviderMap,\n                                            final boolean isDefault, final State state, final Long serviceOfferingId, final boolean supportsDistributedRouter,\n                                            final boolean offersRegionLevelVPC,\n                                            final boolean redundantRouter)", "class_method_signature": "VpcManagerImpl.createVpcOffering(final String name, final String displayText,\n                                            final Map<Network.Service, Set<Network.Provider>> svcProviderMap,\n                                            final boolean isDefault, final State state, final Long serviceOfferingId, final boolean supportsDistributedRouter,\n                                            final boolean offersRegionLevelVPC,\n                                            final boolean redundantRouter)", "testcase": false, "constructor": false}, {"identifier": "checkCapabilityPerServiceProvider", "parameters": "(final Set<Provider> providers, final Capability capability,\n                                                     final Service service)", "modifiers": "protected", "return": "void", "signature": "void checkCapabilityPerServiceProvider(final Set<Provider> providers, final Capability capability,\n                                                     final Service service)", "full_signature": "protected void checkCapabilityPerServiceProvider(final Set<Provider> providers, final Capability capability,\n                                                     final Service service)", "class_method_signature": "VpcManagerImpl.checkCapabilityPerServiceProvider(final Set<Provider> providers, final Capability capability,\n                                                     final Service service)", "testcase": false, "constructor": false}, {"identifier": "validateConnectivtyServiceCapabilities", "parameters": "(final Set<Provider> providers,\n                                                        final Map serviceCapabilitystList)", "modifiers": "private", "return": "void", "signature": "void validateConnectivtyServiceCapabilities(final Set<Provider> providers,\n                                                        final Map serviceCapabilitystList)", "full_signature": "private void validateConnectivtyServiceCapabilities(final Set<Provider> providers,\n                                                        final Map serviceCapabilitystList)", "class_method_signature": "VpcManagerImpl.validateConnectivtyServiceCapabilities(final Set<Provider> providers,\n                                                        final Map serviceCapabilitystList)", "testcase": false, "constructor": false}, {"identifier": "findCapabilityForService", "parameters": "(final Map serviceCapabilitystList, final Capability capability,\n                                             final Service service)", "modifiers": "private", "return": "boolean", "signature": "boolean findCapabilityForService(final Map serviceCapabilitystList, final Capability capability,\n                                             final Service service)", "full_signature": "private boolean findCapabilityForService(final Map serviceCapabilitystList, final Capability capability,\n                                             final Service service)", "class_method_signature": "VpcManagerImpl.findCapabilityForService(final Map serviceCapabilitystList, final Capability capability,\n                                             final Service service)", "testcase": false, "constructor": false}, {"identifier": "isVpcOfferingForRegionLevelVpc", "parameters": "(final Map serviceCapabilitystList)", "modifiers": "private", "return": "boolean", "signature": "boolean isVpcOfferingForRegionLevelVpc(final Map serviceCapabilitystList)", "full_signature": "private boolean isVpcOfferingForRegionLevelVpc(final Map serviceCapabilitystList)", "class_method_signature": "VpcManagerImpl.isVpcOfferingForRegionLevelVpc(final Map serviceCapabilitystList)", "testcase": false, "constructor": false}, {"identifier": "isVpcOfferingSupportsDistributedRouter", "parameters": "(final Map serviceCapabilitystList)", "modifiers": "private", "return": "boolean", "signature": "boolean isVpcOfferingSupportsDistributedRouter(final Map serviceCapabilitystList)", "full_signature": "private boolean isVpcOfferingSupportsDistributedRouter(final Map serviceCapabilitystList)", "class_method_signature": "VpcManagerImpl.isVpcOfferingSupportsDistributedRouter(final Map serviceCapabilitystList)", "testcase": false, "constructor": false}, {"identifier": "isVpcOfferingRedundantRouter", "parameters": "(final Map serviceCapabilitystList)", "modifiers": "private", "return": "boolean", "signature": "boolean isVpcOfferingRedundantRouter(final Map serviceCapabilitystList)", "full_signature": "private boolean isVpcOfferingRedundantRouter(final Map serviceCapabilitystList)", "class_method_signature": "VpcManagerImpl.isVpcOfferingRedundantRouter(final Map serviceCapabilitystList)", "testcase": false, "constructor": false}, {"identifier": "getActiveVpc", "parameters": "(final long vpcId)", "modifiers": "@Override public", "return": "Vpc", "signature": "Vpc getActiveVpc(final long vpcId)", "full_signature": "@Override public Vpc getActiveVpc(final long vpcId)", "class_method_signature": "VpcManagerImpl.getActiveVpc(final long vpcId)", "testcase": false, "constructor": false}, {"identifier": "getVpcOffSvcProvidersMap", "parameters": "(final long vpcOffId)", "modifiers": "@Override public", "return": "Map<Service, Set<Provider>>", "signature": "Map<Service, Set<Provider>> getVpcOffSvcProvidersMap(final long vpcOffId)", "full_signature": "@Override public Map<Service, Set<Provider>> getVpcOffSvcProvidersMap(final long vpcOffId)", "class_method_signature": "VpcManagerImpl.getVpcOffSvcProvidersMap(final long vpcOffId)", "testcase": false, "constructor": false}, {"identifier": "listVpcOfferings", "parameters": "(final Long id, final String name,\n                                                                       final String displayText, final List<String> supportedServicesStr,\n                                                                       final Boolean isDefault, final String keyword, final String state, final Long startIndex,\n                                                                       final Long pageSizeVal)", "modifiers": "@Override public", "return": "Pair<List<? extends VpcOffering>, Integer>", "signature": "Pair<List<? extends VpcOffering>, Integer> listVpcOfferings(final Long id, final String name,\n                                                                       final String displayText, final List<String> supportedServicesStr,\n                                                                       final Boolean isDefault, final String keyword, final String state, final Long startIndex,\n                                                                       final Long pageSizeVal)", "full_signature": "@Override public Pair<List<? extends VpcOffering>, Integer> listVpcOfferings(final Long id, final String name,\n                                                                       final String displayText, final List<String> supportedServicesStr,\n                                                                       final Boolean isDefault, final String keyword, final String state, final Long startIndex,\n                                                                       final Long pageSizeVal)", "class_method_signature": "VpcManagerImpl.listVpcOfferings(final Long id, final String name,\n                                                                       final String displayText, final List<String> supportedServicesStr,\n                                                                       final Boolean isDefault, final String keyword, final String state, final Long startIndex,\n                                                                       final Long pageSizeVal)", "testcase": false, "constructor": false}, {"identifier": "areServicesSupportedByVpcOffering", "parameters": "(final long vpcOffId, final Service... services)", "modifiers": "protected", "return": "boolean", "signature": "boolean areServicesSupportedByVpcOffering(final long vpcOffId, final Service... services)", "full_signature": "protected boolean areServicesSupportedByVpcOffering(final long vpcOffId, final Service... services)", "class_method_signature": "VpcManagerImpl.areServicesSupportedByVpcOffering(final long vpcOffId, final Service... services)", "testcase": false, "constructor": false}, {"identifier": "deleteVpcOffering", "parameters": "(final long offId)", "modifiers": "@Override @ActionEvent(eventType = EventTypes.EVENT_VPC_OFFERING_DELETE, eventDescription = \"deleting vpc offering\") public", "return": "boolean", "signature": "boolean deleteVpcOffering(final long offId)", "full_signature": "@Override @ActionEvent(eventType = EventTypes.EVENT_VPC_OFFERING_DELETE, eventDescription = \"deleting vpc offering\") public boolean deleteVpcOffering(final long offId)", "class_method_signature": "VpcManagerImpl.deleteVpcOffering(final long offId)", "testcase": false, "constructor": false}, {"identifier": "updateVpcOffering", "parameters": "(final long vpcOffId, final String vpcOfferingName, final String displayText,\n                                         final String state)", "modifiers": "@Override @ActionEvent(eventType = EventTypes.EVENT_VPC_OFFERING_UPDATE, eventDescription = \"updating vpc offering\") public", "return": "VpcOffering", "signature": "VpcOffering updateVpcOffering(final long vpcOffId, final String vpcOfferingName, final String displayText,\n                                         final String state)", "full_signature": "@Override @ActionEvent(eventType = EventTypes.EVENT_VPC_OFFERING_UPDATE, eventDescription = \"updating vpc offering\") public VpcOffering updateVpcOffering(final long vpcOffId, final String vpcOfferingName, final String displayText,\n                                         final String state)", "class_method_signature": "VpcManagerImpl.updateVpcOffering(final long vpcOffId, final String vpcOfferingName, final String displayText,\n                                         final String state)", "testcase": false, "constructor": false}, {"identifier": "createVpc", "parameters": "(final long zoneId, final long vpcOffId, final long vpcOwnerId, final String vpcName,\n                         final String displayText, final String cidr, String networkDomain,\n                         final Boolean displayVpc)", "modifiers": "@Override @ActionEvent(eventType = EventTypes.EVENT_VPC_CREATE, eventDescription = \"creating vpc\", create = true) public", "return": "Vpc", "signature": "Vpc createVpc(final long zoneId, final long vpcOffId, final long vpcOwnerId, final String vpcName,\n                         final String displayText, final String cidr, String networkDomain,\n                         final Boolean displayVpc)", "full_signature": "@Override @ActionEvent(eventType = EventTypes.EVENT_VPC_CREATE, eventDescription = \"creating vpc\", create = true) public Vpc createVpc(final long zoneId, final long vpcOffId, final long vpcOwnerId, final String vpcName,\n                         final String displayText, final String cidr, String networkDomain,\n                         final Boolean displayVpc)", "class_method_signature": "VpcManagerImpl.createVpc(final long zoneId, final long vpcOffId, final long vpcOwnerId, final String vpcName,\n                         final String displayText, final String cidr, String networkDomain,\n                         final Boolean displayVpc)", "testcase": false, "constructor": false}, {"identifier": "createVpc", "parameters": "(final Boolean displayVpc, final VpcVO vpc)", "modifiers": "@DB protected", "return": "Vpc", "signature": "Vpc createVpc(final Boolean displayVpc, final VpcVO vpc)", "full_signature": "@DB protected Vpc createVpc(final Boolean displayVpc, final VpcVO vpc)", "class_method_signature": "VpcManagerImpl.createVpc(final Boolean displayVpc, final VpcVO vpc)", "testcase": false, "constructor": false}, {"identifier": "finalizeServicesAndProvidersForVpc", "parameters": "(final long zoneId, final long offeringId)", "modifiers": "private", "return": "Map<String, List<String>>", "signature": "Map<String, List<String>> finalizeServicesAndProvidersForVpc(final long zoneId, final long offeringId)", "full_signature": "private Map<String, List<String>> finalizeServicesAndProvidersForVpc(final long zoneId, final long offeringId)", "class_method_signature": "VpcManagerImpl.finalizeServicesAndProvidersForVpc(final long zoneId, final long offeringId)", "testcase": false, "constructor": false}, {"identifier": "deleteVpc", "parameters": "(final long vpcId)", "modifiers": "@Override @ActionEvent(eventType = EventTypes.EVENT_VPC_DELETE, eventDescription = \"deleting VPC\") public", "return": "boolean", "signature": "boolean deleteVpc(final long vpcId)", "full_signature": "@Override @ActionEvent(eventType = EventTypes.EVENT_VPC_DELETE, eventDescription = \"deleting VPC\") public boolean deleteVpc(final long vpcId)", "class_method_signature": "VpcManagerImpl.deleteVpc(final long vpcId)", "testcase": false, "constructor": false}, {"identifier": "destroyVpc", "parameters": "(final Vpc vpc, final Account caller, final Long callerUserId)", "modifiers": "@Override @DB public", "return": "boolean", "signature": "boolean destroyVpc(final Vpc vpc, final Account caller, final Long callerUserId)", "full_signature": "@Override @DB public boolean destroyVpc(final Vpc vpc, final Account caller, final Long callerUserId)", "class_method_signature": "VpcManagerImpl.destroyVpc(final Vpc vpc, final Account caller, final Long callerUserId)", "testcase": false, "constructor": false}, {"identifier": "updateVpc", "parameters": "(final long vpcId, final String vpcName, final String displayText, final String customId,\n                         final Boolean displayVpc)", "modifiers": "@Override @ActionEvent(eventType = EventTypes.EVENT_VPC_UPDATE, eventDescription = \"updating vpc\") public", "return": "Vpc", "signature": "Vpc updateVpc(final long vpcId, final String vpcName, final String displayText, final String customId,\n                         final Boolean displayVpc)", "full_signature": "@Override @ActionEvent(eventType = EventTypes.EVENT_VPC_UPDATE, eventDescription = \"updating vpc\") public Vpc updateVpc(final long vpcId, final String vpcName, final String displayText, final String customId,\n                         final Boolean displayVpc)", "class_method_signature": "VpcManagerImpl.updateVpc(final long vpcId, final String vpcName, final String displayText, final String customId,\n                         final Boolean displayVpc)", "testcase": false, "constructor": false}, {"identifier": "listVpcs", "parameters": "(final Long id, final String vpcName, final String displayText,\n                                                       final List<String> supportedServicesStr, final String cidr,\n                                                       final Long vpcOffId, final String state, final String accountName, Long domainId, final String keyword,\n                                                       final Long startIndex, final Long pageSizeVal,\n                                                       final Long zoneId, Boolean isRecursive, final Boolean listAll, final Boolean restartRequired,\n                                                       final Map<String, String> tags, final Long projectId,\n                                                       final Boolean display)", "modifiers": "@Override public", "return": "Pair<List<? extends Vpc>, Integer>", "signature": "Pair<List<? extends Vpc>, Integer> listVpcs(final Long id, final String vpcName, final String displayText,\n                                                       final List<String> supportedServicesStr, final String cidr,\n                                                       final Long vpcOffId, final String state, final String accountName, Long domainId, final String keyword,\n                                                       final Long startIndex, final Long pageSizeVal,\n                                                       final Long zoneId, Boolean isRecursive, final Boolean listAll, final Boolean restartRequired,\n                                                       final Map<String, String> tags, final Long projectId,\n                                                       final Boolean display)", "full_signature": "@Override public Pair<List<? extends Vpc>, Integer> listVpcs(final Long id, final String vpcName, final String displayText,\n                                                       final List<String> supportedServicesStr, final String cidr,\n                                                       final Long vpcOffId, final String state, final String accountName, Long domainId, final String keyword,\n                                                       final Long startIndex, final Long pageSizeVal,\n                                                       final Long zoneId, Boolean isRecursive, final Boolean listAll, final Boolean restartRequired,\n                                                       final Map<String, String> tags, final Long projectId,\n                                                       final Boolean display)", "class_method_signature": "VpcManagerImpl.listVpcs(final Long id, final String vpcName, final String displayText,\n                                                       final List<String> supportedServicesStr, final String cidr,\n                                                       final Long vpcOffId, final String state, final String accountName, Long domainId, final String keyword,\n                                                       final Long startIndex, final Long pageSizeVal,\n                                                       final Long zoneId, Boolean isRecursive, final Boolean listAll, final Boolean restartRequired,\n                                                       final Map<String, String> tags, final Long projectId,\n                                                       final Boolean display)", "testcase": false, "constructor": false}, {"identifier": "getSupportedServices", "parameters": "()", "modifiers": "protected", "return": "List<Service>", "signature": "List<Service> getSupportedServices()", "full_signature": "protected List<Service> getSupportedServices()", "class_method_signature": "VpcManagerImpl.getSupportedServices()", "testcase": false, "constructor": false}, {"identifier": "startVpc", "parameters": "(final long vpcId, final boolean destroyOnFailure)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean startVpc(final long vpcId, final boolean destroyOnFailure)", "full_signature": "@Override public boolean startVpc(final long vpcId, final boolean destroyOnFailure)", "class_method_signature": "VpcManagerImpl.startVpc(final long vpcId, final boolean destroyOnFailure)", "testcase": false, "constructor": false}, {"identifier": "startVpc", "parameters": "(final Vpc vpc, final DeployDestination dest, final ReservationContext context)", "modifiers": "protected", "return": "boolean", "signature": "boolean startVpc(final Vpc vpc, final DeployDestination dest, final ReservationContext context)", "full_signature": "protected boolean startVpc(final Vpc vpc, final DeployDestination dest, final ReservationContext context)", "class_method_signature": "VpcManagerImpl.startVpc(final Vpc vpc, final DeployDestination dest, final ReservationContext context)", "testcase": false, "constructor": false}, {"identifier": "shutdownVpc", "parameters": "(final long vpcId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean shutdownVpc(final long vpcId)", "full_signature": "@Override public boolean shutdownVpc(final long vpcId)", "class_method_signature": "VpcManagerImpl.shutdownVpc(final long vpcId)", "testcase": false, "constructor": false}, {"identifier": "validateNtwkOffForNtwkInVpc", "parameters": "(final Long networkId, final long newNtwkOffId, final String newCidr,\n                                            final String newNetworkDomain, final Vpc vpc,\n                                            final String gateway, final Account networkOwner, final Long aclId)", "modifiers": "@DB @Override public", "return": "void", "signature": "void validateNtwkOffForNtwkInVpc(final Long networkId, final long newNtwkOffId, final String newCidr,\n                                            final String newNetworkDomain, final Vpc vpc,\n                                            final String gateway, final Account networkOwner, final Long aclId)", "full_signature": "@DB @Override public void validateNtwkOffForNtwkInVpc(final Long networkId, final long newNtwkOffId, final String newCidr,\n                                            final String newNetworkDomain, final Vpc vpc,\n                                            final String gateway, final Account networkOwner, final Long aclId)", "class_method_signature": "VpcManagerImpl.validateNtwkOffForNtwkInVpc(final Long networkId, final long newNtwkOffId, final String newCidr,\n                                            final String newNetworkDomain, final Vpc vpc,\n                                            final String gateway, final Account networkOwner, final Long aclId)", "testcase": false, "constructor": false}, {"identifier": "validateNtwkOffForVpc", "parameters": "(final NetworkOffering guestNtwkOff, final List<Service> supportedSvcs)", "modifiers": "@Override public", "return": "void", "signature": "void validateNtwkOffForVpc(final NetworkOffering guestNtwkOff, final List<Service> supportedSvcs)", "full_signature": "@Override public void validateNtwkOffForVpc(final NetworkOffering guestNtwkOff, final List<Service> supportedSvcs)", "class_method_signature": "VpcManagerImpl.validateNtwkOffForVpc(final NetworkOffering guestNtwkOff, final List<Service> supportedSvcs)", "testcase": false, "constructor": false}, {"identifier": "validateNewVpcGuestNetwork", "parameters": "(final String cidr, final String gateway, final Account networkOwner,\n                                              final Vpc vpc, final String networkDomain)", "modifiers": "@DB protected", "return": "void", "signature": "void validateNewVpcGuestNetwork(final String cidr, final String gateway, final Account networkOwner,\n                                              final Vpc vpc, final String networkDomain)", "full_signature": "@DB protected void validateNewVpcGuestNetwork(final String cidr, final String gateway, final Account networkOwner,\n                                              final Vpc vpc, final String networkDomain)", "class_method_signature": "VpcManagerImpl.validateNewVpcGuestNetwork(final String cidr, final String gateway, final Account networkOwner,\n                                              final Vpc vpc, final String networkDomain)", "testcase": false, "constructor": false}, {"identifier": "getVpcElements", "parameters": "()", "modifiers": "public", "return": "List<VpcProvider>", "signature": "List<VpcProvider> getVpcElements()", "full_signature": "public List<VpcProvider> getVpcElements()", "class_method_signature": "VpcManagerImpl.getVpcElements()", "testcase": false, "constructor": false}, {"identifier": "getVpcsForAccount", "parameters": "(final long accountId)", "modifiers": "@Override public", "return": "List<? extends Vpc>", "signature": "List<? extends Vpc> getVpcsForAccount(final long accountId)", "full_signature": "@Override public List<? extends Vpc> getVpcsForAccount(final long accountId)", "class_method_signature": "VpcManagerImpl.getVpcsForAccount(final long accountId)", "testcase": false, "constructor": false}, {"identifier": "cleanupVpcResources", "parameters": "(final long vpcId, final Account caller, final long callerUserId)", "modifiers": "public", "return": "boolean", "signature": "boolean cleanupVpcResources(final long vpcId, final Account caller, final long callerUserId)", "full_signature": "public boolean cleanupVpcResources(final long vpcId, final Account caller, final long callerUserId)", "class_method_signature": "VpcManagerImpl.cleanupVpcResources(final long vpcId, final Account caller, final long callerUserId)", "testcase": false, "constructor": false}, {"identifier": "restartVpc", "parameters": "(final long vpcId, final boolean cleanUp, final boolean makeRedundant)", "modifiers": "@Override @ActionEvent(eventType = EventTypes.EVENT_VPC_RESTART, eventDescription = \"restarting vpc\") public", "return": "boolean", "signature": "boolean restartVpc(final long vpcId, final boolean cleanUp, final boolean makeRedundant)", "full_signature": "@Override @ActionEvent(eventType = EventTypes.EVENT_VPC_RESTART, eventDescription = \"restarting vpc\") public boolean restartVpc(final long vpcId, final boolean cleanUp, final boolean makeRedundant)", "class_method_signature": "VpcManagerImpl.restartVpc(final long vpcId, final boolean cleanUp, final boolean makeRedundant)", "testcase": false, "constructor": false}, {"identifier": "getVpcPrivateGateways", "parameters": "(final long vpcId)", "modifiers": "@Override public", "return": "List<PrivateGateway>", "signature": "List<PrivateGateway> getVpcPrivateGateways(final long vpcId)", "full_signature": "@Override public List<PrivateGateway> getVpcPrivateGateways(final long vpcId)", "class_method_signature": "VpcManagerImpl.getVpcPrivateGateways(final long vpcId)", "testcase": false, "constructor": false}, {"identifier": "getVpcPrivateGateway", "parameters": "(final long id)", "modifiers": "@Override public", "return": "PrivateGateway", "signature": "PrivateGateway getVpcPrivateGateway(final long id)", "full_signature": "@Override public PrivateGateway getVpcPrivateGateway(final long id)", "class_method_signature": "VpcManagerImpl.getVpcPrivateGateway(final long id)", "testcase": false, "constructor": false}, {"identifier": "getPrivateGatewayProfile", "parameters": "(final VpcGateway gateway)", "modifiers": "protected", "return": "PrivateGateway", "signature": "PrivateGateway getPrivateGatewayProfile(final VpcGateway gateway)", "full_signature": "protected PrivateGateway getPrivateGatewayProfile(final VpcGateway gateway)", "class_method_signature": "VpcManagerImpl.getPrivateGatewayProfile(final VpcGateway gateway)", "testcase": false, "constructor": false}, {"identifier": "createVpcPrivateGateway", "parameters": "(final long vpcId, Long physicalNetworkId, final String broadcastUri,\n                                                  final String ipAddress, final String gateway,\n                                                  final String netmask, final long gatewayOwnerId, final Long networkOfferingId, final Boolean isSourceNat,\n                                                  final Long aclId)", "modifiers": "@Override @DB @ActionEvent(eventType = EventTypes.EVENT_PRIVATE_GATEWAY_CREATE, eventDescription = \"creating VPC private gateway\", create = true) public", "return": "PrivateGateway", "signature": "PrivateGateway createVpcPrivateGateway(final long vpcId, Long physicalNetworkId, final String broadcastUri,\n                                                  final String ipAddress, final String gateway,\n                                                  final String netmask, final long gatewayOwnerId, final Long networkOfferingId, final Boolean isSourceNat,\n                                                  final Long aclId)", "full_signature": "@Override @DB @ActionEvent(eventType = EventTypes.EVENT_PRIVATE_GATEWAY_CREATE, eventDescription = \"creating VPC private gateway\", create = true) public PrivateGateway createVpcPrivateGateway(final long vpcId, Long physicalNetworkId, final String broadcastUri,\n                                                  final String ipAddress, final String gateway,\n                                                  final String netmask, final long gatewayOwnerId, final Long networkOfferingId, final Boolean isSourceNat,\n                                                  final Long aclId)", "class_method_signature": "VpcManagerImpl.createVpcPrivateGateway(final long vpcId, Long physicalNetworkId, final String broadcastUri,\n                                                  final String ipAddress, final String gateway,\n                                                  final String netmask, final long gatewayOwnerId, final Long networkOfferingId, final Boolean isSourceNat,\n                                                  final Long aclId)", "testcase": false, "constructor": false}, {"identifier": "applyVpcPrivateGateway", "parameters": "(final long gatewayId, final boolean destroyOnFailure)", "modifiers": "@Override @ActionEvent(eventType = EventTypes.EVENT_PRIVATE_GATEWAY_CREATE, eventDescription = \"Applying VPC private gateway\", async = true) public", "return": "PrivateGateway", "signature": "PrivateGateway applyVpcPrivateGateway(final long gatewayId, final boolean destroyOnFailure)", "full_signature": "@Override @ActionEvent(eventType = EventTypes.EVENT_PRIVATE_GATEWAY_CREATE, eventDescription = \"Applying VPC private gateway\", async = true) public PrivateGateway applyVpcPrivateGateway(final long gatewayId, final boolean destroyOnFailure)", "class_method_signature": "VpcManagerImpl.applyVpcPrivateGateway(final long gatewayId, final boolean destroyOnFailure)", "testcase": false, "constructor": false}, {"identifier": "deleteVpcPrivateGateway", "parameters": "(final long gatewayId)", "modifiers": "@Override @ActionEvent(eventType = EventTypes.EVENT_PRIVATE_GATEWAY_DELETE, eventDescription = \"deleting private gateway\") @DB public", "return": "boolean", "signature": "boolean deleteVpcPrivateGateway(final long gatewayId)", "full_signature": "@Override @ActionEvent(eventType = EventTypes.EVENT_PRIVATE_GATEWAY_DELETE, eventDescription = \"deleting private gateway\") @DB public boolean deleteVpcPrivateGateway(final long gatewayId)", "class_method_signature": "VpcManagerImpl.deleteVpcPrivateGateway(final long gatewayId)", "testcase": false, "constructor": false}, {"identifier": "deletePrivateGatewayFromTheDB", "parameters": "(final PrivateGateway gateway)", "modifiers": "@DB protected", "return": "boolean", "signature": "boolean deletePrivateGatewayFromTheDB(final PrivateGateway gateway)", "full_signature": "@DB protected boolean deletePrivateGatewayFromTheDB(final PrivateGateway gateway)", "class_method_signature": "VpcManagerImpl.deletePrivateGatewayFromTheDB(final PrivateGateway gateway)", "testcase": false, "constructor": false}, {"identifier": "listPrivateGateway", "parameters": "(final ListPrivateGatewaysCmd cmd)", "modifiers": "@Override public", "return": "Pair<List<PrivateGateway>, Integer>", "signature": "Pair<List<PrivateGateway>, Integer> listPrivateGateway(final ListPrivateGatewaysCmd cmd)", "full_signature": "@Override public Pair<List<PrivateGateway>, Integer> listPrivateGateway(final ListPrivateGatewaysCmd cmd)", "class_method_signature": "VpcManagerImpl.listPrivateGateway(final ListPrivateGatewaysCmd cmd)", "testcase": false, "constructor": false}, {"identifier": "getStaticRoute", "parameters": "(final long routeId)", "modifiers": "@Override public", "return": "StaticRoute", "signature": "StaticRoute getStaticRoute(final long routeId)", "full_signature": "@Override public StaticRoute getStaticRoute(final long routeId)", "class_method_signature": "VpcManagerImpl.getStaticRoute(final long routeId)", "testcase": false, "constructor": false}, {"identifier": "applyStaticRoutesForVpc", "parameters": "(final long vpcId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean applyStaticRoutesForVpc(final long vpcId)", "full_signature": "@Override public boolean applyStaticRoutesForVpc(final long vpcId)", "class_method_signature": "VpcManagerImpl.applyStaticRoutesForVpc(final long vpcId)", "testcase": false, "constructor": false}, {"identifier": "applyStaticRoutes", "parameters": "(final List<? extends StaticRoute> routes, final Account caller,\n                                        final boolean updateRoutesInDB)", "modifiers": "protected", "return": "boolean", "signature": "boolean applyStaticRoutes(final List<? extends StaticRoute> routes, final Account caller,\n                                        final boolean updateRoutesInDB)", "full_signature": "protected boolean applyStaticRoutes(final List<? extends StaticRoute> routes, final Account caller,\n                                        final boolean updateRoutesInDB)", "class_method_signature": "VpcManagerImpl.applyStaticRoutes(final List<? extends StaticRoute> routes, final Account caller,\n                                        final boolean updateRoutesInDB)", "testcase": false, "constructor": false}, {"identifier": "applyStaticRoutes", "parameters": "(final List<StaticRouteProfile> routes)", "modifiers": "protected", "return": "boolean", "signature": "boolean applyStaticRoutes(final List<StaticRouteProfile> routes)", "full_signature": "protected boolean applyStaticRoutes(final List<StaticRouteProfile> routes)", "class_method_signature": "VpcManagerImpl.applyStaticRoutes(final List<StaticRouteProfile> routes)", "testcase": false, "constructor": false}, {"identifier": "revokeStaticRoute", "parameters": "(final long routeId)", "modifiers": "@Override @ActionEvent(eventType = EventTypes.EVENT_STATIC_ROUTE_DELETE, eventDescription = \"deleting static route\") public", "return": "boolean", "signature": "boolean revokeStaticRoute(final long routeId)", "full_signature": "@Override @ActionEvent(eventType = EventTypes.EVENT_STATIC_ROUTE_DELETE, eventDescription = \"deleting static route\") public boolean revokeStaticRoute(final long routeId)", "class_method_signature": "VpcManagerImpl.revokeStaticRoute(final long routeId)", "testcase": false, "constructor": false}, {"identifier": "revokeStaticRoutesForVpc", "parameters": "(final long vpcId, final Account caller)", "modifiers": "@DB protected", "return": "boolean", "signature": "boolean revokeStaticRoutesForVpc(final long vpcId, final Account caller)", "full_signature": "@DB protected boolean revokeStaticRoutesForVpc(final long vpcId, final Account caller)", "class_method_signature": "VpcManagerImpl.revokeStaticRoutesForVpc(final long vpcId, final Account caller)", "testcase": false, "constructor": false}, {"identifier": "createStaticRoute", "parameters": "(final long vpcId, final String cidr, final String gwIpAddress)", "modifiers": "@Override @DB @ActionEvent(eventType = EventTypes.EVENT_STATIC_ROUTE_CREATE, eventDescription = \"creating static route\", create = true) public", "return": "StaticRoute", "signature": "StaticRoute createStaticRoute(final long vpcId, final String cidr, final String gwIpAddress)", "full_signature": "@Override @DB @ActionEvent(eventType = EventTypes.EVENT_STATIC_ROUTE_CREATE, eventDescription = \"creating static route\", create = true) public StaticRoute createStaticRoute(final long vpcId, final String cidr, final String gwIpAddress)", "class_method_signature": "VpcManagerImpl.createStaticRoute(final long vpcId, final String cidr, final String gwIpAddress)", "testcase": false, "constructor": false}, {"identifier": "isCidrBlacklisted", "parameters": "(final String cidr, final long zoneId)", "modifiers": "protected", "return": "boolean", "signature": "boolean isCidrBlacklisted(final String cidr, final long zoneId)", "full_signature": "protected boolean isCidrBlacklisted(final String cidr, final long zoneId)", "class_method_signature": "VpcManagerImpl.isCidrBlacklisted(final String cidr, final long zoneId)", "testcase": false, "constructor": false}, {"identifier": "listStaticRoutes", "parameters": "(final ListStaticRoutesCmd cmd)", "modifiers": "@Override public", "return": "Pair<List<? extends StaticRoute>, Integer>", "signature": "Pair<List<? extends StaticRoute>, Integer> listStaticRoutes(final ListStaticRoutesCmd cmd)", "full_signature": "@Override public Pair<List<? extends StaticRoute>, Integer> listStaticRoutes(final ListStaticRoutesCmd cmd)", "class_method_signature": "VpcManagerImpl.listStaticRoutes(final ListStaticRoutesCmd cmd)", "testcase": false, "constructor": false}, {"identifier": "detectDuplicateCidr", "parameters": "(final StaticRoute newRoute)", "modifiers": "private", "return": "void", "signature": "void detectDuplicateCidr(final StaticRoute newRoute)", "full_signature": "private void detectDuplicateCidr(final StaticRoute newRoute)", "class_method_signature": "VpcManagerImpl.detectDuplicateCidr(final StaticRoute newRoute)", "testcase": false, "constructor": false}, {"identifier": "markStaticRouteForRevoke", "parameters": "(final StaticRouteVO route, final Account caller)", "modifiers": "protected", "return": "void", "signature": "void markStaticRouteForRevoke(final StaticRouteVO route, final Account caller)", "full_signature": "protected void markStaticRouteForRevoke(final StaticRouteVO route, final Account caller)", "class_method_signature": "VpcManagerImpl.markStaticRouteForRevoke(final StaticRouteVO route, final Account caller)", "testcase": false, "constructor": false}, {"identifier": "associateIPToVpc", "parameters": "(final long ipId, final long vpcId)", "modifiers": "@DB @Override @ActionEvent(eventType = EventTypes.EVENT_NET_IP_ASSIGN, eventDescription = \"associating Ip\", async = true) public", "return": "IpAddress", "signature": "IpAddress associateIPToVpc(final long ipId, final long vpcId)", "full_signature": "@DB @Override @ActionEvent(eventType = EventTypes.EVENT_NET_IP_ASSIGN, eventDescription = \"associating Ip\", async = true) public IpAddress associateIPToVpc(final long ipId, final long vpcId)", "class_method_signature": "VpcManagerImpl.associateIPToVpc(final long ipId, final long vpcId)", "testcase": false, "constructor": false}, {"identifier": "hasSourceNatService", "parameters": "(Vpc vpc)", "modifiers": "private", "return": "boolean", "signature": "boolean hasSourceNatService(Vpc vpc)", "full_signature": "private boolean hasSourceNatService(Vpc vpc)", "class_method_signature": "VpcManagerImpl.hasSourceNatService(Vpc vpc)", "testcase": false, "constructor": false}, {"identifier": "unassignIPFromVpcNetwork", "parameters": "(final long ipId, final long networkId)", "modifiers": "@Override public", "return": "void", "signature": "void unassignIPFromVpcNetwork(final long ipId, final long networkId)", "full_signature": "@Override public void unassignIPFromVpcNetwork(final long ipId, final long networkId)", "class_method_signature": "VpcManagerImpl.unassignIPFromVpcNetwork(final long ipId, final long networkId)", "testcase": false, "constructor": false}, {"identifier": "isIpAllocatedToVpc", "parameters": "(final IpAddress ip)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isIpAllocatedToVpc(final IpAddress ip)", "full_signature": "@Override public boolean isIpAllocatedToVpc(final IpAddress ip)", "class_method_signature": "VpcManagerImpl.isIpAllocatedToVpc(final IpAddress ip)", "testcase": false, "constructor": false}, {"identifier": "createVpcGuestNetwork", "parameters": "(final long ntwkOffId, final String name, final String displayText,\n                                         final String gateway, final String cidr, final String vlanId,\n                                         String networkDomain, final Account owner, final Long domainId, final PhysicalNetwork pNtwk, final long zoneId,\n                                         final ACLType aclType, final Boolean subdomainAccess,\n                                         final long vpcId, final Long aclId, final Account caller, final Boolean isDisplayNetworkEnabled)", "modifiers": "@DB @Override public", "return": "Network", "signature": "Network createVpcGuestNetwork(final long ntwkOffId, final String name, final String displayText,\n                                         final String gateway, final String cidr, final String vlanId,\n                                         String networkDomain, final Account owner, final Long domainId, final PhysicalNetwork pNtwk, final long zoneId,\n                                         final ACLType aclType, final Boolean subdomainAccess,\n                                         final long vpcId, final Long aclId, final Account caller, final Boolean isDisplayNetworkEnabled)", "full_signature": "@DB @Override public Network createVpcGuestNetwork(final long ntwkOffId, final String name, final String displayText,\n                                         final String gateway, final String cidr, final String vlanId,\n                                         String networkDomain, final Account owner, final Long domainId, final PhysicalNetwork pNtwk, final long zoneId,\n                                         final ACLType aclType, final Boolean subdomainAccess,\n                                         final long vpcId, final Long aclId, final Account caller, final Boolean isDisplayNetworkEnabled)", "class_method_signature": "VpcManagerImpl.createVpcGuestNetwork(final long ntwkOffId, final String name, final String displayText,\n                                         final String gateway, final String cidr, final String vlanId,\n                                         String networkDomain, final Account owner, final Long domainId, final PhysicalNetwork pNtwk, final long zoneId,\n                                         final ACLType aclType, final Boolean subdomainAccess,\n                                         final long vpcId, final Long aclId, final Account caller, final Boolean isDisplayNetworkEnabled)", "testcase": false, "constructor": false}, {"identifier": "getExistingSourceNatInVpc", "parameters": "(final long ownerId, final long vpcId)", "modifiers": "protected", "return": "IPAddressVO", "signature": "IPAddressVO getExistingSourceNatInVpc(final long ownerId, final long vpcId)", "full_signature": "protected IPAddressVO getExistingSourceNatInVpc(final long ownerId, final long vpcId)", "class_method_signature": "VpcManagerImpl.getExistingSourceNatInVpc(final long ownerId, final long vpcId)", "testcase": false, "constructor": false}, {"identifier": "listPublicIpsAssignedToVpc", "parameters": "(final long accountId, final Boolean sourceNat,\n                                                           final long vpcId)", "modifiers": "protected", "return": "List<IPAddressVO>", "signature": "List<IPAddressVO> listPublicIpsAssignedToVpc(final long accountId, final Boolean sourceNat,\n                                                           final long vpcId)", "full_signature": "protected List<IPAddressVO> listPublicIpsAssignedToVpc(final long accountId, final Boolean sourceNat,\n                                                           final long vpcId)", "class_method_signature": "VpcManagerImpl.listPublicIpsAssignedToVpc(final long accountId, final Boolean sourceNat,\n                                                           final long vpcId)", "testcase": false, "constructor": false}, {"identifier": "assignSourceNatIpAddressToVpc", "parameters": "(final Account owner, final Vpc vpc)", "modifiers": "@Override public", "return": "PublicIp", "signature": "PublicIp assignSourceNatIpAddressToVpc(final Account owner, final Vpc vpc)", "full_signature": "@Override public PublicIp assignSourceNatIpAddressToVpc(final Account owner, final Vpc vpc)", "class_method_signature": "VpcManagerImpl.assignSourceNatIpAddressToVpc(final Account owner, final Vpc vpc)", "testcase": false, "constructor": false}, {"identifier": "getSupportedVpcHypervisors", "parameters": "()", "modifiers": "@Override public", "return": "List<HypervisorType>", "signature": "List<HypervisorType> getSupportedVpcHypervisors()", "full_signature": "@Override public List<HypervisorType> getSupportedVpcHypervisors()", "class_method_signature": "VpcManagerImpl.getSupportedVpcHypervisors()", "testcase": false, "constructor": false}, {"identifier": "getVpcProviders", "parameters": "(final long vpcId)", "modifiers": "private", "return": "List<Provider>", "signature": "List<Provider> getVpcProviders(final long vpcId)", "full_signature": "private List<Provider> getVpcProviders(final long vpcId)", "class_method_signature": "VpcManagerImpl.getVpcProviders(final long vpcId)", "testcase": false, "constructor": false}, {"identifier": "setVpcElements", "parameters": "(final List<VpcProvider> vpcElements)", "modifiers": "@Inject public", "return": "void", "signature": "void setVpcElements(final List<VpcProvider> vpcElements)", "full_signature": "@Inject public void setVpcElements(final List<VpcProvider> vpcElements)", "class_method_signature": "VpcManagerImpl.setVpcElements(final List<VpcProvider> vpcElements)", "testcase": false, "constructor": false}, {"identifier": "applyStaticRoute", "parameters": "(final long routeId)", "modifiers": "@Override @ActionEvent(eventType = EventTypes.EVENT_STATIC_ROUTE_CREATE, eventDescription = \"Applying static route\", async = true) public", "return": "boolean", "signature": "boolean applyStaticRoute(final long routeId)", "full_signature": "@Override @ActionEvent(eventType = EventTypes.EVENT_STATIC_ROUTE_CREATE, eventDescription = \"Applying static route\", async = true) public boolean applyStaticRoute(final long routeId)", "class_method_signature": "VpcManagerImpl.applyStaticRoute(final long routeId)", "testcase": false, "constructor": false}], "file": "server/src/main/java/com/cloud/network/vpc/VpcManagerImpl.java"}, "focal_method": {"identifier": "checkCapabilityPerServiceProvider", "parameters": "(final Set<Provider> providers, final Capability capability,\n                                                     final Service service)", "modifiers": "protected", "return": "void", "body": "protected void checkCapabilityPerServiceProvider(final Set<Provider> providers, final Capability capability,\n                                                     final Service service) {\n        // TODO Shouldn't it fail it there are no providers?\n        if (providers != null) {\n            for (final Provider provider : providers) {\n                final NetworkElement element = _ntwkModel.getElementImplementingProvider(provider.getName());\n                final Map<Service, Map<Capability, String>> capabilities = element.getCapabilities();\n                if (capabilities != null && !capabilities.isEmpty()) {\n                    final Map<Capability, String> connectivityCapabilities = capabilities.get(service);\n                    if (connectivityCapabilities == null\n                            || connectivityCapabilities != null && !connectivityCapabilities.keySet().contains(capability)) {\n                        throw new InvalidParameterValueException(String.format(\"Provider %s does not support %s  capability.\",\n                                provider.getName(), capability.getName()));\n                    }\n                }\n            }\n        }\n    }", "signature": "void checkCapabilityPerServiceProvider(final Set<Provider> providers, final Capability capability,\n                                                     final Service service)", "full_signature": "protected void checkCapabilityPerServiceProvider(final Set<Provider> providers, final Capability capability,\n                                                     final Service service)", "class_method_signature": "VpcManagerImpl.checkCapabilityPerServiceProvider(final Set<Provider> providers, final Capability capability,\n                                                     final Service service)", "testcase": false, "constructor": false, "invocations": ["getElementImplementingProvider", "getName", "getCapabilities", "isEmpty", "get", "contains", "keySet", "format", "getName", "getName"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}