{"test_class": {"identifier": "TestReport", "superclass": "", "interfaces": "", "fields": [], "file": "CodeSmells/src/reggie/TestReport.java"}, "test_case": {"identifier": "testEmptyReport", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testEmptyReport() throws Exception {\n\t\tSchedule.deleteAll();\n\t\tReport report = new Report();\n\n\t\tStringBuffer buffer = new StringBuffer();\n\n\t\treport.write(buffer);\n\n\t\tassertEquals(\"Number of scheduled offerings: 0\\n\", buffer.toString());\n\t}", "signature": "void testEmptyReport()", "full_signature": "@Test public void testEmptyReport()", "class_method_signature": "TestReport.testEmptyReport()", "testcase": true, "constructor": false, "invocations": ["deleteAll", "write", "assertEquals", "toString"]}, "focal_class": {"identifier": "Report", "superclass": "", "interfaces": "", "fields": [{"original_string": "Hashtable<Integer, ArrayList<String>> offeringToName = new Hashtable<Integer, ArrayList<String>>();", "modifier": "", "type": "Hashtable<Integer, ArrayList<String>>", "declarator": "offeringToName = new Hashtable<Integer, ArrayList<String>>()", "var_name": "offeringToName"}], "methods": [{"identifier": "Report", "parameters": "()", "modifiers": "public", "return": "", "signature": " Report()", "full_signature": "public  Report()", "class_method_signature": "Report.Report()", "testcase": false, "constructor": true}, {"identifier": "populateMap", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void populateMap()", "full_signature": "public void populateMap()", "class_method_signature": "Report.populateMap()", "testcase": false, "constructor": false}, {"identifier": "populateMapFor", "parameters": "(Schedule schedule, Offering offering)", "modifiers": "private", "return": "void", "signature": "void populateMapFor(Schedule schedule, Offering offering)", "full_signature": "private void populateMapFor(Schedule schedule, Offering offering)", "class_method_signature": "Report.populateMapFor(Schedule schedule, Offering offering)", "testcase": false, "constructor": false}, {"identifier": "writeOffering", "parameters": "(StringBuffer buffer, ArrayList<String> list,\n\t\t\tOffering offering)", "modifiers": "public", "return": "void", "signature": "void writeOffering(StringBuffer buffer, ArrayList<String> list,\n\t\t\tOffering offering)", "full_signature": "public void writeOffering(StringBuffer buffer, ArrayList<String> list,\n\t\t\tOffering offering)", "class_method_signature": "Report.writeOffering(StringBuffer buffer, ArrayList<String> list,\n\t\t\tOffering offering)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(StringBuffer buffer)", "modifiers": "public", "return": "void", "signature": "void write(StringBuffer buffer)", "full_signature": "public void write(StringBuffer buffer)", "class_method_signature": "Report.write(StringBuffer buffer)", "testcase": false, "constructor": false}], "file": "CodeSmells/src/reggie/Report.java"}, "focal_method": {"identifier": "write", "parameters": "(StringBuffer buffer)", "modifiers": "public", "return": "void", "body": "public void write(StringBuffer buffer) throws Exception {\n\t\tpopulateMap();\n\n\t\tEnumeration<Integer> enumeration = offeringToName.keys();\n\t\twhile (enumeration.hasMoreElements()) {\n\t\t\tInteger offeringId = enumeration.nextElement();\n\t\t\tArrayList<String> list = offeringToName.get(offeringId);\n\t\t\twriteOffering(buffer, list, Offering.find(offeringId.intValue()));\n\t\t}\n\n\t\tbuffer.append(\"Number of scheduled offerings: \");\n\t\tbuffer.append(offeringToName.size());\n\t\tbuffer.append(\"\\n\");\n\t}", "signature": "void write(StringBuffer buffer)", "full_signature": "public void write(StringBuffer buffer)", "class_method_signature": "Report.write(StringBuffer buffer)", "testcase": false, "constructor": false, "invocations": ["populateMap", "keys", "hasMoreElements", "nextElement", "get", "writeOffering", "find", "intValue", "append", "append", "size", "append"]}, "repository": {"repo_id": 643499, "url": "https://github.com/unclebob/Welc", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 210, "license": "licensed"}}