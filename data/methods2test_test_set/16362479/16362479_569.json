{"test_class": {"identifier": "ActorUtilsTest", "superclass": "extends AbstractActorTest", "interfaces": "", "fields": [{"original_string": "static final Logger LOG = LoggerFactory.getLogger(ActorUtilsTest.class);", "modifier": "static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ActorUtilsTest.class)", "var_name": "LOG"}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/datastore/utils/ActorUtilsTest.java"}, "test_case": {"identifier": "testSetDatastoreContext", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSetDatastoreContext() {\n        final TestKit testKit = new TestKit(getSystem());\n        ActorUtils actorUtils = new ActorUtils(getSystem(), testKit.getRef(),\n            mock(ClusterWrapper.class), mock(Configuration.class), DatastoreContext.newBuilder()\n            .operationTimeoutInSeconds(5).shardTransactionCommitTimeoutInSeconds(7).build(),\n            new PrimaryShardInfoFutureCache());\n\n        assertEquals(\"getOperationDuration\", 5, actorUtils.getOperationDuration().toSeconds());\n        assertEquals(\"getTransactionCommitOperationTimeout\", 7,\n            actorUtils.getTransactionCommitOperationTimeout().duration().toSeconds());\n\n        DatastoreContext newContext = DatastoreContext.newBuilder().operationTimeoutInSeconds(6)\n                .shardTransactionCommitTimeoutInSeconds(8).build();\n\n        DatastoreContextFactory mockContextFactory = mock(DatastoreContextFactory.class);\n        Mockito.doReturn(newContext).when(mockContextFactory).getBaseDatastoreContext();\n\n        actorUtils.setDatastoreContext(mockContextFactory);\n\n        testKit.expectMsgClass(Duration.ofSeconds(5), DatastoreContextFactory.class);\n\n        Assert.assertSame(\"getDatastoreContext\", newContext, actorUtils.getDatastoreContext());\n\n        assertEquals(\"getOperationDuration\", 6, actorUtils.getOperationDuration().toSeconds());\n        assertEquals(\"getTransactionCommitOperationTimeout\", 8,\n            actorUtils.getTransactionCommitOperationTimeout().duration().toSeconds());\n    }", "signature": "void testSetDatastoreContext()", "full_signature": "@Test public void testSetDatastoreContext()", "class_method_signature": "ActorUtilsTest.testSetDatastoreContext()", "testcase": true, "constructor": false, "invocations": ["getSystem", "getSystem", "getRef", "mock", "mock", "build", "shardTransactionCommitTimeoutInSeconds", "operationTimeoutInSeconds", "newBuilder", "assertEquals", "toSeconds", "getOperationDuration", "assertEquals", "toSeconds", "duration", "getTransactionCommitOperationTimeout", "build", "shardTransactionCommitTimeoutInSeconds", "operationTimeoutInSeconds", "newBuilder", "mock", "getBaseDatastoreContext", "when", "doReturn", "setDatastoreContext", "expectMsgClass", "ofSeconds", "assertSame", "getDatastoreContext", "assertEquals", "toSeconds", "getOperationDuration", "assertEquals", "toSeconds", "duration", "getTransactionCommitOperationTimeout"]}, "focal_class": {"identifier": "ActorUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ActorUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ActorUtils.class)", "var_name": "LOG"}, {"original_string": "private static final String DISTRIBUTED_DATA_STORE_METRIC_REGISTRY = \"distributed-data-store\";", "modifier": "private static final", "type": "String", "declarator": "DISTRIBUTED_DATA_STORE_METRIC_REGISTRY = \"distributed-data-store\"", "var_name": "DISTRIBUTED_DATA_STORE_METRIC_REGISTRY"}, {"original_string": "private static final String METRIC_RATE = \"rate\";", "modifier": "private static final", "type": "String", "declarator": "METRIC_RATE = \"rate\"", "var_name": "METRIC_RATE"}, {"original_string": "private static final Mapper<Throwable, Throwable> FIND_PRIMARY_FAILURE_TRANSFORMER =\n                                                              new Mapper<>() {\n        @Override\n        public Throwable apply(final Throwable failure) {\n            Throwable actualFailure = failure;\n            if (failure instanceof AskTimeoutException) {\n                // A timeout exception most likely means the shard isn't initialized.\n                actualFailure = new NotInitializedException(\n                        \"Timed out trying to find the primary shard. Most likely cause is the \"\n                        + \"shard is not initialized yet.\");\n            }\n\n            return actualFailure;\n        }\n    };", "modifier": "private static final", "type": "Mapper<Throwable, Throwable>", "declarator": "FIND_PRIMARY_FAILURE_TRANSFORMER =\n                                                              new Mapper<>() {\n        @Override\n        public Throwable apply(final Throwable failure) {\n            Throwable actualFailure = failure;\n            if (failure instanceof AskTimeoutException) {\n                // A timeout exception most likely means the shard isn't initialized.\n                actualFailure = new NotInitializedException(\n                        \"Timed out trying to find the primary shard. Most likely cause is the \"\n                        + \"shard is not initialized yet.\");\n            }\n\n            return actualFailure;\n        }\n    }", "var_name": "FIND_PRIMARY_FAILURE_TRANSFORMER"}, {"original_string": "public static final String BOUNDED_MAILBOX = \"bounded-mailbox\";", "modifier": "public static final", "type": "String", "declarator": "BOUNDED_MAILBOX = \"bounded-mailbox\"", "var_name": "BOUNDED_MAILBOX"}, {"original_string": "public static final String COMMIT = \"commit\";", "modifier": "public static final", "type": "String", "declarator": "COMMIT = \"commit\"", "var_name": "COMMIT"}, {"original_string": "private final ActorSystem actorSystem;", "modifier": "private final", "type": "ActorSystem", "declarator": "actorSystem", "var_name": "actorSystem"}, {"original_string": "private final ActorRef shardManager;", "modifier": "private final", "type": "ActorRef", "declarator": "shardManager", "var_name": "shardManager"}, {"original_string": "private final ClusterWrapper clusterWrapper;", "modifier": "private final", "type": "ClusterWrapper", "declarator": "clusterWrapper", "var_name": "clusterWrapper"}, {"original_string": "private final Configuration configuration;", "modifier": "private final", "type": "Configuration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private DatastoreContext datastoreContext;", "modifier": "private", "type": "DatastoreContext", "declarator": "datastoreContext", "var_name": "datastoreContext"}, {"original_string": "private FiniteDuration operationDuration;", "modifier": "private", "type": "FiniteDuration", "declarator": "operationDuration", "var_name": "operationDuration"}, {"original_string": "private Timeout operationTimeout;", "modifier": "private", "type": "Timeout", "declarator": "operationTimeout", "var_name": "operationTimeout"}, {"original_string": "private final String selfAddressHostPort;", "modifier": "private final", "type": "String", "declarator": "selfAddressHostPort", "var_name": "selfAddressHostPort"}, {"original_string": "private TransactionRateLimiter txRateLimiter;", "modifier": "private", "type": "TransactionRateLimiter", "declarator": "txRateLimiter", "var_name": "txRateLimiter"}, {"original_string": "private Timeout transactionCommitOperationTimeout;", "modifier": "private", "type": "Timeout", "declarator": "transactionCommitOperationTimeout", "var_name": "transactionCommitOperationTimeout"}, {"original_string": "private Timeout shardInitializationTimeout;", "modifier": "private", "type": "Timeout", "declarator": "shardInitializationTimeout", "var_name": "shardInitializationTimeout"}, {"original_string": "private final Dispatchers dispatchers;", "modifier": "private final", "type": "Dispatchers", "declarator": "dispatchers", "var_name": "dispatchers"}, {"original_string": "private volatile EffectiveModelContext schemaContext;", "modifier": "private volatile", "type": "EffectiveModelContext", "declarator": "schemaContext", "var_name": "schemaContext"}, {"original_string": "@SuppressWarnings(\"unused\")\n    private volatile boolean updated;", "modifier": "@SuppressWarnings(\"unused\")\n    private volatile", "type": "boolean", "declarator": "updated", "var_name": "updated"}, {"original_string": "private final MetricRegistry metricRegistry = MetricsReporter.getInstance(DatastoreContext.METRICS_DOMAIN)\n            .getMetricsRegistry();", "modifier": "private final", "type": "MetricRegistry", "declarator": "metricRegistry = MetricsReporter.getInstance(DatastoreContext.METRICS_DOMAIN)\n            .getMetricsRegistry()", "var_name": "metricRegistry"}, {"original_string": "private final PrimaryShardInfoFutureCache primaryShardInfoCache;", "modifier": "private final", "type": "PrimaryShardInfoFutureCache", "declarator": "primaryShardInfoCache", "var_name": "primaryShardInfoCache"}, {"original_string": "private final ShardStrategyFactory shardStrategyFactory;", "modifier": "private final", "type": "ShardStrategyFactory", "declarator": "shardStrategyFactory", "var_name": "shardStrategyFactory"}], "methods": [{"identifier": "ActorUtils", "parameters": "(final ActorSystem actorSystem, final ActorRef shardManager,\n            final ClusterWrapper clusterWrapper, final Configuration configuration)", "modifiers": "public", "return": "", "signature": " ActorUtils(final ActorSystem actorSystem, final ActorRef shardManager,\n            final ClusterWrapper clusterWrapper, final Configuration configuration)", "full_signature": "public  ActorUtils(final ActorSystem actorSystem, final ActorRef shardManager,\n            final ClusterWrapper clusterWrapper, final Configuration configuration)", "class_method_signature": "ActorUtils.ActorUtils(final ActorSystem actorSystem, final ActorRef shardManager,\n            final ClusterWrapper clusterWrapper, final Configuration configuration)", "testcase": false, "constructor": true}, {"identifier": "ActorUtils", "parameters": "(final ActorSystem actorSystem, final ActorRef shardManager,\n            final ClusterWrapper clusterWrapper, final Configuration configuration,\n            final DatastoreContext datastoreContext, final PrimaryShardInfoFutureCache primaryShardInfoCache)", "modifiers": "public", "return": "", "signature": " ActorUtils(final ActorSystem actorSystem, final ActorRef shardManager,\n            final ClusterWrapper clusterWrapper, final Configuration configuration,\n            final DatastoreContext datastoreContext, final PrimaryShardInfoFutureCache primaryShardInfoCache)", "full_signature": "public  ActorUtils(final ActorSystem actorSystem, final ActorRef shardManager,\n            final ClusterWrapper clusterWrapper, final Configuration configuration,\n            final DatastoreContext datastoreContext, final PrimaryShardInfoFutureCache primaryShardInfoCache)", "class_method_signature": "ActorUtils.ActorUtils(final ActorSystem actorSystem, final ActorRef shardManager,\n            final ClusterWrapper clusterWrapper, final Configuration configuration,\n            final DatastoreContext datastoreContext, final PrimaryShardInfoFutureCache primaryShardInfoCache)", "testcase": false, "constructor": true}, {"identifier": "setCachedProperties", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setCachedProperties()", "full_signature": "private void setCachedProperties()", "class_method_signature": "ActorUtils.setCachedProperties()", "testcase": false, "constructor": false}, {"identifier": "getDatastoreContext", "parameters": "()", "modifiers": "public", "return": "DatastoreContext", "signature": "DatastoreContext getDatastoreContext()", "full_signature": "public DatastoreContext getDatastoreContext()", "class_method_signature": "ActorUtils.getDatastoreContext()", "testcase": false, "constructor": false}, {"identifier": "getActorSystem", "parameters": "()", "modifiers": "public", "return": "ActorSystem", "signature": "ActorSystem getActorSystem()", "full_signature": "public ActorSystem getActorSystem()", "class_method_signature": "ActorUtils.getActorSystem()", "testcase": false, "constructor": false}, {"identifier": "getShardManager", "parameters": "()", "modifiers": "public", "return": "ActorRef", "signature": "ActorRef getShardManager()", "full_signature": "public ActorRef getShardManager()", "class_method_signature": "ActorUtils.getShardManager()", "testcase": false, "constructor": false}, {"identifier": "actorSelection", "parameters": "(final String actorPath)", "modifiers": "public", "return": "ActorSelection", "signature": "ActorSelection actorSelection(final String actorPath)", "full_signature": "public ActorSelection actorSelection(final String actorPath)", "class_method_signature": "ActorUtils.actorSelection(final String actorPath)", "testcase": false, "constructor": false}, {"identifier": "actorSelection", "parameters": "(final ActorPath actorPath)", "modifiers": "public", "return": "ActorSelection", "signature": "ActorSelection actorSelection(final ActorPath actorPath)", "full_signature": "public ActorSelection actorSelection(final ActorPath actorPath)", "class_method_signature": "ActorUtils.actorSelection(final ActorPath actorPath)", "testcase": false, "constructor": false}, {"identifier": "setSchemaContext", "parameters": "(final EffectiveModelContext schemaContext)", "modifiers": "public", "return": "void", "signature": "void setSchemaContext(final EffectiveModelContext schemaContext)", "full_signature": "public void setSchemaContext(final EffectiveModelContext schemaContext)", "class_method_signature": "ActorUtils.setSchemaContext(final EffectiveModelContext schemaContext)", "testcase": false, "constructor": false}, {"identifier": "setDatastoreContext", "parameters": "(final DatastoreContextFactory contextFactory)", "modifiers": "public", "return": "void", "signature": "void setDatastoreContext(final DatastoreContextFactory contextFactory)", "full_signature": "public void setDatastoreContext(final DatastoreContextFactory contextFactory)", "class_method_signature": "ActorUtils.setDatastoreContext(final DatastoreContextFactory contextFactory)", "testcase": false, "constructor": false}, {"identifier": "getSchemaContext", "parameters": "()", "modifiers": "public", "return": "EffectiveModelContext", "signature": "EffectiveModelContext getSchemaContext()", "full_signature": "public EffectiveModelContext getSchemaContext()", "class_method_signature": "ActorUtils.getSchemaContext()", "testcase": false, "constructor": false}, {"identifier": "findPrimaryShardAsync", "parameters": "(final String shardName)", "modifiers": "public", "return": "Future<PrimaryShardInfo>", "signature": "Future<PrimaryShardInfo> findPrimaryShardAsync(final String shardName)", "full_signature": "public Future<PrimaryShardInfo> findPrimaryShardAsync(final String shardName)", "class_method_signature": "ActorUtils.findPrimaryShardAsync(final String shardName)", "testcase": false, "constructor": false}, {"identifier": "onPrimaryShardFound", "parameters": "(final String shardName, final String primaryActorPath,\n            final short primaryVersion, final ReadOnlyDataTree localShardDataTree)", "modifiers": "@SuppressFBWarnings(value = \"UPM_UNCALLED_PRIVATE_METHOD\", justification = \"https://github.com/spotbugs/spotbugs/issues/811\") private", "return": "PrimaryShardInfo", "signature": "PrimaryShardInfo onPrimaryShardFound(final String shardName, final String primaryActorPath,\n            final short primaryVersion, final ReadOnlyDataTree localShardDataTree)", "full_signature": "@SuppressFBWarnings(value = \"UPM_UNCALLED_PRIVATE_METHOD\", justification = \"https://github.com/spotbugs/spotbugs/issues/811\") private PrimaryShardInfo onPrimaryShardFound(final String shardName, final String primaryActorPath,\n            final short primaryVersion, final ReadOnlyDataTree localShardDataTree)", "class_method_signature": "ActorUtils.onPrimaryShardFound(final String shardName, final String primaryActorPath,\n            final short primaryVersion, final ReadOnlyDataTree localShardDataTree)", "testcase": false, "constructor": false}, {"identifier": "findLocalShard", "parameters": "(final String shardName)", "modifiers": "public", "return": "Optional<ActorRef>", "signature": "Optional<ActorRef> findLocalShard(final String shardName)", "full_signature": "public Optional<ActorRef> findLocalShard(final String shardName)", "class_method_signature": "ActorUtils.findLocalShard(final String shardName)", "testcase": false, "constructor": false}, {"identifier": "findLocalShardAsync", "parameters": "(final String shardName)", "modifiers": "public", "return": "Future<ActorRef>", "signature": "Future<ActorRef> findLocalShardAsync(final String shardName)", "full_signature": "public Future<ActorRef> findLocalShardAsync(final String shardName)", "class_method_signature": "ActorUtils.findLocalShardAsync(final String shardName)", "testcase": false, "constructor": false}, {"identifier": "executeOperation", "parameters": "(final ActorRef actor, final Object message)", "modifiers": "@SuppressWarnings(\"checkstyle:IllegalCatch\") public", "return": "Object", "signature": "Object executeOperation(final ActorRef actor, final Object message)", "full_signature": "@SuppressWarnings(\"checkstyle:IllegalCatch\") public Object executeOperation(final ActorRef actor, final Object message)", "class_method_signature": "ActorUtils.executeOperation(final ActorRef actor, final Object message)", "testcase": false, "constructor": false}, {"identifier": "executeOperation", "parameters": "(final ActorSelection actor, final Object message)", "modifiers": "@SuppressWarnings(\"checkstyle:IllegalCatch\") public", "return": "Object", "signature": "Object executeOperation(final ActorSelection actor, final Object message)", "full_signature": "@SuppressWarnings(\"checkstyle:IllegalCatch\") public Object executeOperation(final ActorSelection actor, final Object message)", "class_method_signature": "ActorUtils.executeOperation(final ActorSelection actor, final Object message)", "testcase": false, "constructor": false}, {"identifier": "executeOperationAsync", "parameters": "(final ActorRef actor, final Object message, final Timeout timeout)", "modifiers": "public", "return": "Future<Object>", "signature": "Future<Object> executeOperationAsync(final ActorRef actor, final Object message, final Timeout timeout)", "full_signature": "public Future<Object> executeOperationAsync(final ActorRef actor, final Object message, final Timeout timeout)", "class_method_signature": "ActorUtils.executeOperationAsync(final ActorRef actor, final Object message, final Timeout timeout)", "testcase": false, "constructor": false}, {"identifier": "executeOperationAsync", "parameters": "(final ActorSelection actor, final Object message,\n            final Timeout timeout)", "modifiers": "public", "return": "Future<Object>", "signature": "Future<Object> executeOperationAsync(final ActorSelection actor, final Object message,\n            final Timeout timeout)", "full_signature": "public Future<Object> executeOperationAsync(final ActorSelection actor, final Object message,\n            final Timeout timeout)", "class_method_signature": "ActorUtils.executeOperationAsync(final ActorSelection actor, final Object message,\n            final Timeout timeout)", "testcase": false, "constructor": false}, {"identifier": "executeOperationAsync", "parameters": "(final ActorSelection actor, final Object message)", "modifiers": "public", "return": "Future<Object>", "signature": "Future<Object> executeOperationAsync(final ActorSelection actor, final Object message)", "full_signature": "public Future<Object> executeOperationAsync(final ActorSelection actor, final Object message)", "class_method_signature": "ActorUtils.executeOperationAsync(final ActorSelection actor, final Object message)", "testcase": false, "constructor": false}, {"identifier": "sendOperationAsync", "parameters": "(final ActorSelection actor, final Object message)", "modifiers": "public", "return": "void", "signature": "void sendOperationAsync(final ActorSelection actor, final Object message)", "full_signature": "public void sendOperationAsync(final ActorSelection actor, final Object message)", "class_method_signature": "ActorUtils.sendOperationAsync(final ActorSelection actor, final Object message)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "@SuppressWarnings(\"checkstyle:IllegalCatch\") public", "return": "void", "signature": "void shutdown()", "full_signature": "@SuppressWarnings(\"checkstyle:IllegalCatch\") public void shutdown()", "class_method_signature": "ActorUtils.shutdown()", "testcase": false, "constructor": false}, {"identifier": "getClusterWrapper", "parameters": "()", "modifiers": "public", "return": "ClusterWrapper", "signature": "ClusterWrapper getClusterWrapper()", "full_signature": "public ClusterWrapper getClusterWrapper()", "class_method_signature": "ActorUtils.getClusterWrapper()", "testcase": false, "constructor": false}, {"identifier": "getCurrentMemberName", "parameters": "()", "modifiers": "public", "return": "MemberName", "signature": "MemberName getCurrentMemberName()", "full_signature": "public MemberName getCurrentMemberName()", "class_method_signature": "ActorUtils.getCurrentMemberName()", "testcase": false, "constructor": false}, {"identifier": "broadcast", "parameters": "(final Function<Short, Object> messageSupplier, final Class<?> messageClass)", "modifiers": "public", "return": "void", "signature": "void broadcast(final Function<Short, Object> messageSupplier, final Class<?> messageClass)", "full_signature": "public void broadcast(final Function<Short, Object> messageSupplier, final Class<?> messageClass)", "class_method_signature": "ActorUtils.broadcast(final Function<Short, Object> messageSupplier, final Class<?> messageClass)", "testcase": false, "constructor": false}, {"identifier": "getOperationDuration", "parameters": "()", "modifiers": "public", "return": "FiniteDuration", "signature": "FiniteDuration getOperationDuration()", "full_signature": "public FiniteDuration getOperationDuration()", "class_method_signature": "ActorUtils.getOperationDuration()", "testcase": false, "constructor": false}, {"identifier": "getOperationTimeout", "parameters": "()", "modifiers": "public", "return": "Timeout", "signature": "Timeout getOperationTimeout()", "full_signature": "public Timeout getOperationTimeout()", "class_method_signature": "ActorUtils.getOperationTimeout()", "testcase": false, "constructor": false}, {"identifier": "isPathLocal", "parameters": "(final String path)", "modifiers": "public", "return": "boolean", "signature": "boolean isPathLocal(final String path)", "full_signature": "public boolean isPathLocal(final String path)", "class_method_signature": "ActorUtils.isPathLocal(final String path)", "testcase": false, "constructor": false}, {"identifier": "getOperationTimer", "parameters": "(final String operationName)", "modifiers": "public", "return": "Timer", "signature": "Timer getOperationTimer(final String operationName)", "full_signature": "public Timer getOperationTimer(final String operationName)", "class_method_signature": "ActorUtils.getOperationTimer(final String operationName)", "testcase": false, "constructor": false}, {"identifier": "getOperationTimer", "parameters": "(final String dataStoreType, final String operationName)", "modifiers": "public", "return": "Timer", "signature": "Timer getOperationTimer(final String dataStoreType, final String operationName)", "full_signature": "public Timer getOperationTimer(final String dataStoreType, final String operationName)", "class_method_signature": "ActorUtils.getOperationTimer(final String dataStoreType, final String operationName)", "testcase": false, "constructor": false}, {"identifier": "getDataStoreName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDataStoreName()", "full_signature": "public String getDataStoreName()", "class_method_signature": "ActorUtils.getDataStoreName()", "testcase": false, "constructor": false}, {"identifier": "getTxCreationLimit", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getTxCreationLimit()", "full_signature": "public double getTxCreationLimit()", "class_method_signature": "ActorUtils.getTxCreationLimit()", "testcase": false, "constructor": false}, {"identifier": "acquireTxCreationPermit", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void acquireTxCreationPermit()", "full_signature": "public void acquireTxCreationPermit()", "class_method_signature": "ActorUtils.acquireTxCreationPermit()", "testcase": false, "constructor": false}, {"identifier": "getTransactionCommitOperationTimeout", "parameters": "()", "modifiers": "public", "return": "Timeout", "signature": "Timeout getTransactionCommitOperationTimeout()", "full_signature": "public Timeout getTransactionCommitOperationTimeout()", "class_method_signature": "ActorUtils.getTransactionCommitOperationTimeout()", "testcase": false, "constructor": false}, {"identifier": "getClientDispatcher", "parameters": "()", "modifiers": "public", "return": "ExecutionContext", "signature": "ExecutionContext getClientDispatcher()", "full_signature": "public ExecutionContext getClientDispatcher()", "class_method_signature": "ActorUtils.getClientDispatcher()", "testcase": false, "constructor": false}, {"identifier": "getNotificationDispatcherPath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getNotificationDispatcherPath()", "full_signature": "public String getNotificationDispatcherPath()", "class_method_signature": "ActorUtils.getNotificationDispatcherPath()", "testcase": false, "constructor": false}, {"identifier": "getConfiguration", "parameters": "()", "modifiers": "public", "return": "Configuration", "signature": "Configuration getConfiguration()", "full_signature": "public Configuration getConfiguration()", "class_method_signature": "ActorUtils.getConfiguration()", "testcase": false, "constructor": false}, {"identifier": "getShardStrategyFactory", "parameters": "()", "modifiers": "public", "return": "ShardStrategyFactory", "signature": "ShardStrategyFactory getShardStrategyFactory()", "full_signature": "public ShardStrategyFactory getShardStrategyFactory()", "class_method_signature": "ActorUtils.getShardStrategyFactory()", "testcase": false, "constructor": false}, {"identifier": "doAsk", "parameters": "(final ActorRef actorRef, final Object message, final Timeout timeout)", "modifiers": "protected", "return": "Future<Object>", "signature": "Future<Object> doAsk(final ActorRef actorRef, final Object message, final Timeout timeout)", "full_signature": "protected Future<Object> doAsk(final ActorRef actorRef, final Object message, final Timeout timeout)", "class_method_signature": "ActorUtils.doAsk(final ActorRef actorRef, final Object message, final Timeout timeout)", "testcase": false, "constructor": false}, {"identifier": "doAsk", "parameters": "(final ActorSelection actorRef, final Object message, final Timeout timeout)", "modifiers": "protected", "return": "Future<Object>", "signature": "Future<Object> doAsk(final ActorSelection actorRef, final Object message, final Timeout timeout)", "full_signature": "protected Future<Object> doAsk(final ActorSelection actorRef, final Object message, final Timeout timeout)", "class_method_signature": "ActorUtils.doAsk(final ActorSelection actorRef, final Object message, final Timeout timeout)", "testcase": false, "constructor": false}, {"identifier": "getPrimaryShardInfoCache", "parameters": "()", "modifiers": "public", "return": "PrimaryShardInfoFutureCache", "signature": "PrimaryShardInfoFutureCache getPrimaryShardInfoCache()", "full_signature": "public PrimaryShardInfoFutureCache getPrimaryShardInfoCache()", "class_method_signature": "ActorUtils.getPrimaryShardInfoCache()", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/utils/ActorUtils.java"}, "focal_method": {"identifier": "setDatastoreContext", "parameters": "(final DatastoreContextFactory contextFactory)", "modifiers": "public", "return": "void", "body": "public void setDatastoreContext(final DatastoreContextFactory contextFactory) {\n        this.datastoreContext = contextFactory.getBaseDatastoreContext();\n        setCachedProperties();\n\n        // We write the 'updated' volatile to trigger a write memory barrier so that the writes above\n        // will be published immediately even though they may not be immediately visible to other\n        // threads due to unsynchronized reads. That's OK though - we're going for eventual\n        // consistency here as immediately visible updates to these members aren't critical. These\n        // members could've been made volatile but wanted to avoid volatile reads as these are\n        // accessed often and updates will be infrequent.\n\n        updated = true;\n\n        if (shardManager != null) {\n            shardManager.tell(contextFactory, ActorRef.noSender());\n        }\n    }", "signature": "void setDatastoreContext(final DatastoreContextFactory contextFactory)", "full_signature": "public void setDatastoreContext(final DatastoreContextFactory contextFactory)", "class_method_signature": "ActorUtils.setDatastoreContext(final DatastoreContextFactory contextFactory)", "testcase": false, "constructor": false, "invocations": ["getBaseDatastoreContext", "setCachedProperties", "tell", "noSender"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}