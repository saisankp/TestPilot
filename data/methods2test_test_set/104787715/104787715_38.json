{"test_class": {"identifier": "GitHubUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "dockerfile-image-update/src/test/java/com/salesforce/dockerfileimageupdate/utils/GitHubUtilTest.java"}, "test_case": {"identifier": "testCreatePullReq_errorCase1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreatePullReq_errorCase1() throws Exception {\n        GitHub github = mock(GitHub.class);\n        GitHubUtil gitHubUtil = new GitHubUtil(github);\n        GHRepository origRepo = mock(GHRepository.class);\n        when(origRepo.getDefaultBranch()).thenReturn(\"master\");\n        when(origRepo.createPullRequest(eq(\"title\"), eq(\"owner:branch\"), eq(\"master\"), eq(\"body\")))\n                .thenThrow(new IOException(\"{\\\"message\\\":\\\"Validation Failed\\\",\\\"errors\\\":[{\\\"resource\\\":\\\"PullRequest\\\",\\\"code\\\":\\\"custom\\\",\\\"message\\\":\\\"No commits between thisrepo and thatrepo.\\\"}],\\\"documentation_url\\\":\\\"https://developer.github.com/enterprise/2.6/v3/pulls/#create-a-pull-request\\\"}\"));\n        GHRepository forkRepo = mock(GHRepository.class);\n        when(forkRepo.getOwnerName()).thenReturn(\"owner\");\n        assertEquals(gitHubUtil.createPullReq(origRepo, \"branch\", forkRepo, \"title\", \"body\"), 1);\n        verify(origRepo, times(1)).createPullRequest(eq(\"title\"), eq(\"owner:branch\"), eq(\"master\"), eq(\"body\"));\n    }", "signature": "void testCreatePullReq_errorCase1()", "full_signature": "@Test public void testCreatePullReq_errorCase1()", "class_method_signature": "GitHubUtilTest.testCreatePullReq_errorCase1()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "getDefaultBranch", "thenThrow", "when", "createPullRequest", "eq", "eq", "eq", "eq", "mock", "thenReturn", "when", "getOwnerName", "assertEquals", "createPullReq", "createPullRequest", "verify", "times", "eq", "eq", "eq", "eq"]}, "focal_class": {"identifier": "GitHubUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(GitHubUtil.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(GitHubUtil.class)", "var_name": "log"}, {"original_string": "public static final String NO_BRANCH_WARN_FORMAT = \"Couldn't find branch `%s` in repo `%s`. Waiting a second...\";", "modifier": "public static final", "type": "String", "declarator": "NO_BRANCH_WARN_FORMAT = \"Couldn't find branch `%s` in repo `%s`. Waiting a second...\"", "var_name": "NO_BRANCH_WARN_FORMAT"}, {"original_string": "private final GitHub github;", "modifier": "private final", "type": "GitHub", "declarator": "github", "var_name": "github"}], "methods": [{"identifier": "GitHubUtil", "parameters": "(GitHub gitHub)", "modifiers": "public", "return": "", "signature": " GitHubUtil(GitHub gitHub)", "full_signature": "public  GitHubUtil(GitHub gitHub)", "class_method_signature": "GitHubUtil.GitHubUtil(GitHub gitHub)", "testcase": false, "constructor": true}, {"identifier": "getGithub", "parameters": "()", "modifiers": "public", "return": "GitHub", "signature": "GitHub getGithub()", "full_signature": "public GitHub getGithub()", "class_method_signature": "GitHubUtil.getGithub()", "testcase": false, "constructor": false}, {"identifier": "getRepo", "parameters": "(String repo)", "modifiers": "public", "return": "GHRepository", "signature": "GHRepository getRepo(String repo)", "full_signature": "public GHRepository getRepo(String repo)", "class_method_signature": "GitHubUtil.getRepo(String repo)", "testcase": false, "constructor": false}, {"identifier": "createPublicRepo", "parameters": "(String repoName)", "modifiers": "public", "return": "GHRepository", "signature": "GHRepository createPublicRepo(String repoName)", "full_signature": "public GHRepository createPublicRepo(String repoName)", "class_method_signature": "GitHubUtil.createPublicRepo(String repoName)", "testcase": false, "constructor": false}, {"identifier": "getMyself", "parameters": "()", "modifiers": "public", "return": "GHMyself", "signature": "GHMyself getMyself()", "full_signature": "public GHMyself getMyself()", "class_method_signature": "GitHubUtil.getMyself()", "testcase": false, "constructor": false}, {"identifier": "startSearch", "parameters": "()", "modifiers": "public", "return": "GHContentSearchBuilder", "signature": "GHContentSearchBuilder startSearch()", "full_signature": "public GHContentSearchBuilder startSearch()", "class_method_signature": "GitHubUtil.startSearch()", "testcase": false, "constructor": false}, {"identifier": "createFork", "parameters": "(GHRepository repo)", "modifiers": "public", "return": "GHRepository", "signature": "GHRepository createFork(GHRepository repo)", "full_signature": "public GHRepository createFork(GHRepository repo)", "class_method_signature": "GitHubUtil.createFork(GHRepository repo)", "testcase": false, "constructor": false}, {"identifier": "safeDeleteRepo", "parameters": "(GHRepository repo)", "modifiers": "public", "return": "void", "signature": "void safeDeleteRepo(GHRepository repo)", "full_signature": "public void safeDeleteRepo(GHRepository repo)", "class_method_signature": "GitHubUtil.safeDeleteRepo(GHRepository repo)", "testcase": false, "constructor": false}, {"identifier": "createPullReq", "parameters": "(GHRepository origRepo, String branch,\n                                 GHRepository forkRepo, String title, String body)", "modifiers": "public", "return": "int", "signature": "int createPullReq(GHRepository origRepo, String branch,\n                                 GHRepository forkRepo, String title, String body)", "full_signature": "public int createPullReq(GHRepository origRepo, String branch,\n                                 GHRepository forkRepo, String title, String body)", "class_method_signature": "GitHubUtil.createPullReq(GHRepository origRepo, String branch,\n                                 GHRepository forkRepo, String title, String body)", "testcase": false, "constructor": false}, {"identifier": "tryRetrievingBranch", "parameters": "(GHRepository repo, String branchName)", "modifiers": "protected", "return": "GHBranch", "signature": "GHBranch tryRetrievingBranch(GHRepository repo, String branchName)", "full_signature": "protected GHBranch tryRetrievingBranch(GHRepository repo, String branchName)", "class_method_signature": "GitHubUtil.tryRetrievingBranch(GHRepository repo, String branchName)", "testcase": false, "constructor": false}, {"identifier": "tryRetrievingRepository", "parameters": "(String repoName)", "modifiers": "public", "return": "GHRepository", "signature": "GHRepository tryRetrievingRepository(String repoName)", "full_signature": "public GHRepository tryRetrievingRepository(String repoName)", "class_method_signature": "GitHubUtil.tryRetrievingRepository(String repoName)", "testcase": false, "constructor": false}, {"identifier": "tryRetrievingContent", "parameters": "(GHRepository repo, String path, String branch)", "modifiers": "public", "return": "GHContent", "signature": "GHContent tryRetrievingContent(GHRepository repo, String path, String branch)", "full_signature": "public GHContent tryRetrievingContent(GHRepository repo, String path, String branch)", "class_method_signature": "GitHubUtil.tryRetrievingContent(GHRepository repo, String path, String branch)", "testcase": false, "constructor": false}, {"identifier": "getGHRepositories", "parameters": "(Multimap<String, String> pathToDockerfileInParentRepo,\n                                                 GHMyself currentUser)", "modifiers": "public", "return": "List<GHRepository>", "signature": "List<GHRepository> getGHRepositories(Multimap<String, String> pathToDockerfileInParentRepo,\n                                                 GHMyself currentUser)", "full_signature": "public List<GHRepository> getGHRepositories(Multimap<String, String> pathToDockerfileInParentRepo,\n                                                 GHMyself currentUser)", "class_method_signature": "GitHubUtil.getGHRepositories(Multimap<String, String> pathToDockerfileInParentRepo,\n                                                 GHMyself currentUser)", "testcase": false, "constructor": false}, {"identifier": "waitFor", "parameters": "(long millis)", "modifiers": "protected", "return": "void", "signature": "void waitFor(long millis)", "full_signature": "protected void waitFor(long millis)", "class_method_signature": "GitHubUtil.waitFor(long millis)", "testcase": false, "constructor": false}, {"identifier": "repoHasBranch", "parameters": "(GHRepository repo, String branchName)", "modifiers": "public", "return": "boolean", "signature": "boolean repoHasBranch(GHRepository repo, String branchName)", "full_signature": "public boolean repoHasBranch(GHRepository repo, String branchName)", "class_method_signature": "GitHubUtil.repoHasBranch(GHRepository repo, String branchName)", "testcase": false, "constructor": false}, {"identifier": "getReposForUserAtCurrentInstant", "parameters": "(GHMyself user)", "modifiers": "public", "return": "Map<String, GHRepository>", "signature": "Map<String, GHRepository> getReposForUserAtCurrentInstant(GHMyself user)", "full_signature": "public Map<String, GHRepository> getReposForUserAtCurrentInstant(GHMyself user)", "class_method_signature": "GitHubUtil.getReposForUserAtCurrentInstant(GHMyself user)", "testcase": false, "constructor": false}], "file": "dockerfile-image-update/src/main/java/com/salesforce/dockerfileimageupdate/utils/GitHubUtil.java"}, "focal_method": {"identifier": "createPullReq", "parameters": "(GHRepository origRepo, String branch,\n                                 GHRepository forkRepo, String title, String body)", "modifiers": "public", "return": "int", "body": "public int createPullReq(GHRepository origRepo, String branch,\n                                 GHRepository forkRepo, String title, String body) throws InterruptedException {\n        log.info(\"Creating Pull Request on {} from {}...\", origRepo.getFullName(), forkRepo.getFullName());\n        //TODO: if no commits, pull request will fail, but this doesn't handle that.\n        try {\n            GHPullRequest pullRequest = origRepo.createPullRequest(title, forkRepo.getOwnerName() + \":\" + branch,\n                    origRepo.getDefaultBranch(), body);\n//            origRepo.createPullRequest(\"Update base image in Dockerfile\", forkRepo.getOwnerName() + \":\" + branch,\n//                    origRepo.getDefaultBranch(), \"Automatic Dockerfile Image Updater. Please merge.\");\n            log.info(\"A pull request has been created at {}\", pullRequest.getHtmlUrl());\n            return 0;\n        } catch (IOException e) {\n            log.warn(\"Handling error with pull request creation... {}\", e.getMessage());\n            JsonElement root = JsonParser.parseString(e.getMessage());\n            JsonArray errorJson = root.getAsJsonObject().get(\"errors\").getAsJsonArray();\n            String error = errorJson.get(0).getAsJsonObject().get(\"message\").getAsString();\n            log.info(\"error: {}\", error);\n            if (error.startsWith(\"A pull request already exists\")) {\n                log.info(\"NOTE: {} New commits may have been added to the pull request.\", error);\n                return 0;\n            } else if (error.startsWith(\"No commits between\")) {\n                log.warn(\"NOTE: {} Pull request was not created.\", error);\n                return 1;\n            } else {\n                // TODO: THIS WILL LOOP FOREVVEEEEEERRRR\n                log.warn(\"An error occurred in pull request: {} Trying again...\", error);\n                waitFor(TimeUnit.SECONDS.toMillis(3));\n                return -1;\n            }\n        }\n    }", "signature": "int createPullReq(GHRepository origRepo, String branch,\n                                 GHRepository forkRepo, String title, String body)", "full_signature": "public int createPullReq(GHRepository origRepo, String branch,\n                                 GHRepository forkRepo, String title, String body)", "class_method_signature": "GitHubUtil.createPullReq(GHRepository origRepo, String branch,\n                                 GHRepository forkRepo, String title, String body)", "testcase": false, "constructor": false, "invocations": ["info", "getFullName", "getFullName", "createPullRequest", "getOwnerName", "getDefaultBranch", "info", "getHtmlUrl", "warn", "getMessage", "parseString", "getMessage", "getAsJsonArray", "get", "getAsJsonObject", "getAsString", "get", "getAsJsonObject", "get", "info", "startsWith", "info", "startsWith", "warn", "warn", "waitFor", "toMillis"]}, "repository": {"repo_id": 104787715, "url": "https://github.com/salesforce/dockerfile-image-update", "stars": 62, "created": "9/25/2017 6:38:13 PM +00:00", "updates": "2020-01-23T07:15:59+00:00", "fork": "False", "license": "licensed"}}