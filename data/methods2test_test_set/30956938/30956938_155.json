{"test_class": {"identifier": "SpreadsheetImportHealthCheckerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SpreadsheetImportHealthChecker healthChecker;", "modifier": "private", "type": "SpreadsheetImportHealthChecker", "declarator": "healthChecker", "var_name": "healthChecker"}, {"original_string": "private SpreadsheetImportActivity activity;", "modifier": "private", "type": "SpreadsheetImportActivity", "declarator": "activity", "var_name": "activity"}, {"original_string": "private ArrayList ancestors;", "modifier": "private", "type": "ArrayList", "declarator": "ancestors", "var_name": "ancestors"}], "file": "taverna-spreadsheet-import-activity/src/test/java/org/apache/taverna/activities/spreadsheet/SpreadsheetImportHealthCheckerTest.java"}, "test_case": {"identifier": "testCheckHealth", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCheckHealth() throws Exception {\n\t\tassertEquals(Status.SEVERE, healthChecker.visit(activity, ancestors).getStatus());\n\t\tObjectNode configuration = JsonNodeFactory.instance.objectNode();\n\t\tconfiguration.put(\"columnRange\", configuration.objectNode().put(\"start\", 0).put(\"end\", 1));\n\t\tconfiguration.put(\"rowRange\", configuration.objectNode().put(\"start\", 0).put(\"end\", -1));\n\t\tconfiguration.put(\"emptyCellValue\", \"\");\n\t\tconfiguration.put(\"allRows\", true);\n\t\tconfiguration.put(\"excludeFirstRow\", false);\n\t\tconfiguration.put(\"ignoreBlankRows\", false);\n\t\tconfiguration.put(\"emptyCellPolicy\", \"EMPTY_STRING\");\n\t\tconfiguration.put(\"outputFormat\", \"PORT_PER_COLUMN\");\n\t\tconfiguration.put(\"csvDelimiter\", \",\");\n\t\tactivity.configure(configuration);\n\t\tassertEquals(Status.OK, healthChecker.visit(activity, ancestors).getStatus());\n\t}", "signature": "void testCheckHealth()", "full_signature": "@Test public void testCheckHealth()", "class_method_signature": "SpreadsheetImportHealthCheckerTest.testCheckHealth()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getStatus", "visit", "objectNode", "put", "put", "put", "objectNode", "put", "put", "put", "objectNode", "put", "put", "put", "put", "put", "put", "put", "configure", "assertEquals", "getStatus", "visit"]}, "focal_class": {"identifier": "SpreadsheetImportHealthChecker", "superclass": "", "interfaces": "implements HealthChecker<SpreadsheetImportActivity>", "fields": [], "methods": [{"identifier": "canVisit", "parameters": "(Object subject)", "modifiers": "public", "return": "boolean", "signature": "boolean canVisit(Object subject)", "full_signature": "public boolean canVisit(Object subject)", "class_method_signature": "SpreadsheetImportHealthChecker.canVisit(Object subject)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(SpreadsheetImportActivity activity, List<Object> ancestors)", "modifiers": "public", "return": "VisitReport", "signature": "VisitReport visit(SpreadsheetImportActivity activity, List<Object> ancestors)", "full_signature": "public VisitReport visit(SpreadsheetImportActivity activity, List<Object> ancestors)", "class_method_signature": "SpreadsheetImportHealthChecker.visit(SpreadsheetImportActivity activity, List<Object> ancestors)", "testcase": false, "constructor": false}, {"identifier": "isTimeConsuming", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isTimeConsuming()", "full_signature": "public boolean isTimeConsuming()", "class_method_signature": "SpreadsheetImportHealthChecker.isTimeConsuming()", "testcase": false, "constructor": false}], "file": "taverna-spreadsheet-import-activity/src/main/java/org/apache/taverna/activities/spreadsheet/SpreadsheetImportHealthChecker.java"}, "focal_method": {"identifier": "visit", "parameters": "(SpreadsheetImportActivity activity, List<Object> ancestors)", "modifiers": "public", "return": "VisitReport", "body": "public VisitReport visit(SpreadsheetImportActivity activity, List<Object> ancestors) {\n\t\tProcessor p = (Processor) VisitReport.findAncestor(ancestors, Processor.class);\n\t\tif (p == null) {\n\t\t\treturn null;\n\t\t}\n\t\tJsonNode configuration = activity.getConfiguration();\n\t\tif (configuration == null) {\n\t\t\treturn new VisitReport(HealthCheck.getInstance(), p, \"Spreadsheet import has not been configured\", HealthCheck.NO_CONFIGURATION, Status.SEVERE);\n\t\t}\n\t\treturn new VisitReport(HealthCheck.getInstance(), p, \"Spreadsheet OK\", HealthCheck.NO_PROBLEM, Status.OK);\n\t}", "signature": "VisitReport visit(SpreadsheetImportActivity activity, List<Object> ancestors)", "full_signature": "public VisitReport visit(SpreadsheetImportActivity activity, List<Object> ancestors)", "class_method_signature": "SpreadsheetImportHealthChecker.visit(SpreadsheetImportActivity activity, List<Object> ancestors)", "testcase": false, "constructor": false, "invocations": ["findAncestor", "getConfiguration", "getInstance", "getInstance"]}, "repository": {"repo_id": 30956938, "url": "https://github.com/apache/incubator-taverna-common-activities", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 8, "size": 5696, "license": "licensed"}}