{"test_class": {"identifier": "SsimQaTest", "superclass": "extends AbstractOperationTest", "interfaces": "", "fields": [], "file": "photohawk-image-evaluator/src/test/java/at/ac/tuwien/photohawk/evaluation/qa/SsimQaTest.java"}, "test_case": {"identifier": "evaluateTest_equal_solid9924cd", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void evaluateTest_equal_solid9924cd() {\n        BufferedImage left = BufferedImageHelper.createSolidImage(new Color(153, 36, 205));\n        BufferedImage right = BufferedImageHelper.createSolidImage(new Color(153, 36, 205));\n\n        SsimQa ssimQa = new SsimQa();\n        TransientOperation<Float, StaticColor> op = ssimQa.evaluate(left, right);\n        checkOperationEqual(op, 1.0f);\n    }", "signature": "void evaluateTest_equal_solid9924cd()", "full_signature": "@Test public void evaluateTest_equal_solid9924cd()", "class_method_signature": "SsimQaTest.evaluateTest_equal_solid9924cd()", "testcase": true, "constructor": false, "invocations": ["createSolidImage", "createSolidImage", "evaluate", "checkOperationEqual"]}, "focal_class": {"identifier": "SsimQa", "superclass": "", "interfaces": "implements Qa<Float, StaticColor>", "fields": [{"original_string": "private int targetSize;", "modifier": "private", "type": "int", "declarator": "targetSize", "var_name": "targetSize"}, {"original_string": "private int numThreads;", "modifier": "private", "type": "int", "declarator": "numThreads", "var_name": "numThreads"}], "methods": [{"identifier": "SsimQa", "parameters": "()", "modifiers": "public", "return": "", "signature": " SsimQa()", "full_signature": "public  SsimQa()", "class_method_signature": "SsimQa.SsimQa()", "testcase": false, "constructor": true}, {"identifier": "targetSize", "parameters": "(int targetSize)", "modifiers": "public", "return": "SsimQa", "signature": "SsimQa targetSize(int targetSize)", "full_signature": "public SsimQa targetSize(int targetSize)", "class_method_signature": "SsimQa.targetSize(int targetSize)", "testcase": false, "constructor": false}, {"identifier": "numThreads", "parameters": "(int numThreads)", "modifiers": "public", "return": "SsimQa", "signature": "SsimQa numThreads(int numThreads)", "full_signature": "public SsimQa numThreads(int numThreads)", "class_method_signature": "SsimQa.numThreads(int numThreads)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(final BufferedImage left, final BufferedImage right)", "modifiers": "@Override public", "return": "TransientOperation<Float, StaticColor>", "signature": "TransientOperation<Float, StaticColor> evaluate(final BufferedImage left, final BufferedImage right)", "full_signature": "@Override public TransientOperation<Float, StaticColor> evaluate(final BufferedImage left, final BufferedImage right)", "class_method_signature": "SsimQa.evaluate(final BufferedImage left, final BufferedImage right)", "testcase": false, "constructor": false}], "file": "photohawk-image-evaluator/src/main/java/at/ac/tuwien/photohawk/evaluation/qa/SsimQa.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(final BufferedImage left, final BufferedImage right)", "modifiers": "@Override public", "return": "TransientOperation<Float, StaticColor>", "body": "@Override\n    public TransientOperation<Float, StaticColor> evaluate(final BufferedImage left, final BufferedImage right) {\n        // Convert to SRGB\n        BufferedImage leftImg = new SRGBColorConverter(\n                new ConvenientBufferedImageWrapper(left)).getImage().getBufferedImage();\n        BufferedImage rightImg = new SRGBColorConverter(\n                new ConvenientBufferedImageWrapper(right)).getImage().getBufferedImage();\n\n        // Resize\n        ShrinkResizePreprocessor shrink = new ShrinkResizePreprocessor(leftImg, rightImg);\n        shrink.process();\n        leftImg = shrink.getResult1();\n        rightImg = shrink.getResult2();\n        shrink = null;\n\n        // Scale\n        ScaleToNearestFactorPreprocessor scale = new ScaleToNearestFactorPreprocessor(leftImg, rightImg, targetSize);\n        scale.process();\n        leftImg = scale.getResult1();\n        rightImg = scale.getResult2();\n        scale = null;\n\n        // Evaluate\n        HSBColorConverter c1 = new HSBColorConverter(\n                new SRGBColorConverter(new ConvenientBufferedImageWrapper(leftImg)));\n        HSBColorConverter c2 = new HSBColorConverter(\n                new SRGBColorConverter(new ConvenientBufferedImageWrapper(rightImg)));\n\n        SimpleSSIMMetric metric = new SimpleSSIMMetric(c1, c2, new Point(0, 0),\n                                                       new Point(leftImg.getWidth(), leftImg.getHeight()), numThreads);\n\n        // Evaluategi\n        return metric.execute();\n    }", "signature": "TransientOperation<Float, StaticColor> evaluate(final BufferedImage left, final BufferedImage right)", "full_signature": "@Override public TransientOperation<Float, StaticColor> evaluate(final BufferedImage left, final BufferedImage right)", "class_method_signature": "SsimQa.evaluate(final BufferedImage left, final BufferedImage right)", "testcase": false, "constructor": false, "invocations": ["getBufferedImage", "getImage", "getBufferedImage", "getImage", "process", "getResult1", "getResult2", "process", "getResult1", "getResult2", "getWidth", "getHeight", "execute"]}, "repository": {"repo_id": 11614244, "url": "https://github.com/datascience/photohawk", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 6, "size": 4209, "license": "licensed"}}