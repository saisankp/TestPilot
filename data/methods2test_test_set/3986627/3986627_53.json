{"test_class": {"identifier": "JavaPropertyScannerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private JavaPropertyScanner fixture;", "modifier": "private", "type": "JavaPropertyScanner", "declarator": "fixture", "var_name": "fixture"}], "file": "org.jabylon.properties/src/test/java/org/jabylon/properties/types/impl/JavaPropertyScannerTest.java"}, "test_case": {"identifier": "testFindTranslations", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testFindTranslations() throws IOException {\n\t\tFile file = mock(File.class);\n\t\twhen(file.getName()).thenReturn(\"foo.properties\");\n\t\twhen(file.getAbsolutePath()).thenReturn(new File(\"foo.properties\").getAbsolutePath());\n\t\twhen(file.getCanonicalPath()).thenReturn(new File(\"foo.properties\").getCanonicalPath());\n\t\twhen(file.getPath()).thenReturn(new File(\"foo.properties\").getPath());\n\t\tFile parent = mock(File.class);\n\t\twhen(file.getParentFile()).thenReturn(parent);\n\t\tFile[] children = new File[]{new File(\"foo.properties\"),new File(\"other_fr.properties\"),new File(\"foo_de.properties\"),new File(\"foo_en_US.properties\")};\n\t\twhen(parent.listFiles()).thenReturn(children);\n\t\tMap<Locale, File> result = getFixture().findTranslations(file, mock(ScanConfiguration.class));\n\t\tassertEquals(2, result.size());\n\t\tassertEquals(\"foo_de.properties\", result.get(new Locale(\"de\")).getName());\n\t\tassertEquals(\"foo_en_US.properties\", result.get(new Locale(\"en\",\"US\")).getName());\n\t}", "signature": "void testFindTranslations()", "full_signature": "@Test public void testFindTranslations()", "class_method_signature": "JavaPropertyScannerTest.testFindTranslations()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getName", "thenReturn", "when", "getAbsolutePath", "getAbsolutePath", "thenReturn", "when", "getCanonicalPath", "getCanonicalPath", "thenReturn", "when", "getPath", "getPath", "mock", "thenReturn", "when", "getParentFile", "thenReturn", "when", "listFiles", "findTranslations", "getFixture", "mock", "assertEquals", "size", "assertEquals", "getName", "get", "assertEquals", "getName", "get"]}, "focal_class": {"identifier": "JavaPropertyScanner", "superclass": "extends AbstractPropertyScanner", "interfaces": "implements PropertyScanner", "fields": [{"original_string": "@Property(name=PropertyScanner.TYPE, value=\"PROPERTIES_ENCODED\")\n\tpublic  static final String TYPE = \"PROPERTIES_ENCODED\";", "modifier": "@Property(name=PropertyScanner.TYPE, value=\"PROPERTIES_ENCODED\")\n\tpublic  static final", "type": "String", "declarator": "TYPE = \"PROPERTIES_ENCODED\"", "var_name": "TYPE"}, {"original_string": "static final Pattern LOCALE_PATTERN = Pattern.compile(\"(.+?)((?:_\\\\w\\\\w){0,3})(\\\\..+)\");", "modifier": "static final", "type": "Pattern", "declarator": "LOCALE_PATTERN = Pattern.compile(\"(.+?)((?:_\\\\w\\\\w){0,3})(\\\\..+)\")", "var_name": "LOCALE_PATTERN"}, {"original_string": "private static final String[] DEFAULT_EXCLUDES = {\"**/build.properties\"};", "modifier": "private static final", "type": "String[]", "declarator": "DEFAULT_EXCLUDES = {\"**/build.properties\"}", "var_name": "DEFAULT_EXCLUDES"}, {"original_string": "private static final String[] DEFAULT_INCLUDES = {\"**/*.properties\"};", "modifier": "private static final", "type": "String[]", "declarator": "DEFAULT_INCLUDES = {\"**/*.properties\"}", "var_name": "DEFAULT_INCLUDES"}], "methods": [{"identifier": "findTemplate", "parameters": "(File propertyFile, ScanConfiguration config)", "modifiers": "@Override public", "return": "File", "signature": "File findTemplate(File propertyFile, ScanConfiguration config)", "full_signature": "@Override public File findTemplate(File propertyFile, ScanConfiguration config)", "class_method_signature": "JavaPropertyScanner.findTemplate(File propertyFile, ScanConfiguration config)", "testcase": false, "constructor": false}, {"identifier": "getLocale", "parameters": "(File propertyFile)", "modifiers": "@Override public", "return": "Locale", "signature": "Locale getLocale(File propertyFile)", "full_signature": "@Override public Locale getLocale(File propertyFile)", "class_method_signature": "JavaPropertyScanner.getLocale(File propertyFile)", "testcase": false, "constructor": false}, {"identifier": "buildPatternFrom", "parameters": "(String fileName)", "modifiers": "private", "return": "Pattern", "signature": "Pattern buildPatternFrom(String fileName)", "full_signature": "private Pattern buildPatternFrom(String fileName)", "class_method_signature": "JavaPropertyScanner.buildPatternFrom(String fileName)", "testcase": false, "constructor": false}, {"identifier": "findTranslations", "parameters": "(File template, ScanConfiguration config)", "modifiers": "@Override public", "return": "Map<Locale, File>", "signature": "Map<Locale, File> findTranslations(File template, ScanConfiguration config)", "full_signature": "@Override public Map<Locale, File> findTranslations(File template, ScanConfiguration config)", "class_method_signature": "JavaPropertyScanner.findTranslations(File template, ScanConfiguration config)", "testcase": false, "constructor": false}, {"identifier": "computeTranslationPath", "parameters": "(File template, Locale templateLocale, Locale translationLocale)", "modifiers": "@Override public", "return": "File", "signature": "File computeTranslationPath(File template, Locale templateLocale, Locale translationLocale)", "full_signature": "@Override public File computeTranslationPath(File template, Locale templateLocale, Locale translationLocale)", "class_method_signature": "JavaPropertyScanner.computeTranslationPath(File template, Locale templateLocale, Locale translationLocale)", "testcase": false, "constructor": false}, {"identifier": "isBilingual", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isBilingual()", "full_signature": "@Override public boolean isBilingual()", "class_method_signature": "JavaPropertyScanner.isBilingual()", "testcase": false, "constructor": false}, {"identifier": "createConverter", "parameters": "(URI resource)", "modifiers": "@Override public", "return": "PropertyConverter", "signature": "PropertyConverter createConverter(URI resource)", "full_signature": "@Override public PropertyConverter createConverter(URI resource)", "class_method_signature": "JavaPropertyScanner.createConverter(URI resource)", "testcase": false, "constructor": false}, {"identifier": "getDefaultIncludes", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDefaultIncludes()", "full_signature": "@Override public String[] getDefaultIncludes()", "class_method_signature": "JavaPropertyScanner.getDefaultIncludes()", "testcase": false, "constructor": false}, {"identifier": "getDefaultExcludes", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDefaultExcludes()", "full_signature": "@Override public String[] getDefaultExcludes()", "class_method_signature": "JavaPropertyScanner.getDefaultExcludes()", "testcase": false, "constructor": false}, {"identifier": "getEncoding", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getEncoding()", "full_signature": "@Override public String getEncoding()", "class_method_signature": "JavaPropertyScanner.getEncoding()", "testcase": false, "constructor": false}], "file": "org.jabylon.properties/src/main/java/org/jabylon/properties/types/impl/JavaPropertyScanner.java"}, "focal_method": {"identifier": "findTranslations", "parameters": "(File template, ScanConfiguration config)", "modifiers": "@Override public", "return": "Map<Locale, File>", "body": "@Override\n    public Map<Locale, File> findTranslations(File template, ScanConfiguration config) {\n        Map<Locale, File> results = new HashMap<Locale, File>();\n        Pattern filePattern = buildPatternFrom(template.getName());\n        File folder = template.getParentFile();\n        File[] files = folder.listFiles();\n        if(files==null)\n        \treturn results;\n        for (File file : files) {\n            if(file.equals(template))\n                continue;\n            Matcher matcher = filePattern.matcher(file.getName());\n            if(matcher.matches())\n            {\n                String localeString = matcher.group(1).substring(1);\n                Locale locale = (Locale) PropertiesFactory.eINSTANCE.createFromString(PropertiesPackage.Literals.LOCALE, localeString);\n                results.put(locale, file);\n            }\n        }\n        return results;\n    }", "signature": "Map<Locale, File> findTranslations(File template, ScanConfiguration config)", "full_signature": "@Override public Map<Locale, File> findTranslations(File template, ScanConfiguration config)", "class_method_signature": "JavaPropertyScanner.findTranslations(File template, ScanConfiguration config)", "testcase": false, "constructor": false, "invocations": ["buildPatternFrom", "getName", "getParentFile", "listFiles", "equals", "matcher", "getName", "matches", "substring", "group", "createFromString", "put"]}, "repository": {"repo_id": 3986627, "url": "https://github.com/jutzig/jabylon", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 51, "size": 13400, "license": "licensed"}}