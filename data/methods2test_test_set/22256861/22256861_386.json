{"test_class": {"identifier": "MphChlUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "s3tbx-mphchl/src/test/java/org/esa/s3tbx/mphchl/MphChlUtilsTest.java"}, "test_case": {"identifier": "testIsCyano_twoArgs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsCyano_twoArgs() {\n        assertFalse(MphChlUtils.isCyano(1.0, -1.0));\n        assertFalse(MphChlUtils.isCyano(-0.1, -1.0));\n        assertFalse(MphChlUtils.isCyano(1.0, 0.1));\n        assertTrue(MphChlUtils.isCyano(-0.1, 0.1));\n    }", "signature": "void testIsCyano_twoArgs()", "full_signature": "@Test public void testIsCyano_twoArgs()", "class_method_signature": "MphChlUtilsTest.testIsCyano_twoArgs()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "isCyano", "assertFalse", "isCyano", "assertFalse", "isCyano", "assertTrue", "isCyano"]}, "focal_class": {"identifier": "MphChlUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CYANO_FLAG_NAME = \"mph_cyano\";", "modifier": "private static final", "type": "String", "declarator": "CYANO_FLAG_NAME = \"mph_cyano\"", "var_name": "CYANO_FLAG_NAME"}, {"original_string": "private static final String CYANO_FLAG_DESCRIPTION = \"Cyanobacteria dominated waters\";", "modifier": "private static final", "type": "String", "declarator": "CYANO_FLAG_DESCRIPTION = \"Cyanobacteria dominated waters\"", "var_name": "CYANO_FLAG_DESCRIPTION"}, {"original_string": "private static final String FLOATING_FLAG_NAME = \"mph_floating\";", "modifier": "private static final", "type": "String", "declarator": "FLOATING_FLAG_NAME = \"mph_floating\"", "var_name": "FLOATING_FLAG_NAME"}, {"original_string": "private static final String FLOATING_FLAG_DESCRIPTION = \"Floating vegetation or cyanobacteria on water surface\";", "modifier": "private static final", "type": "String", "declarator": "FLOATING_FLAG_DESCRIPTION = \"Floating vegetation or cyanobacteria on water surface\"", "var_name": "FLOATING_FLAG_DESCRIPTION"}, {"original_string": "private static final String ADJACENCY_FLAG_NAME = \"mph_adjacency\";", "modifier": "private static final", "type": "String", "declarator": "ADJACENCY_FLAG_NAME = \"mph_adjacency\"", "var_name": "ADJACENCY_FLAG_NAME"}, {"original_string": "private static final String ADJACENCY_FLAG_DESCRIPTION = \"Pixel suspect of adjacency effects\";", "modifier": "private static final", "type": "String", "declarator": "ADJACENCY_FLAG_DESCRIPTION = \"Pixel suspect of adjacency effects\"", "var_name": "ADJACENCY_FLAG_DESCRIPTION"}], "methods": [{"identifier": "createMphChlFlagCoding", "parameters": "(String flagId)", "modifiers": "public static", "return": "FlagCoding", "signature": "FlagCoding createMphChlFlagCoding(String flagId)", "full_signature": "public static FlagCoding createMphChlFlagCoding(String flagId)", "class_method_signature": "MphChlUtils.createMphChlFlagCoding(String flagId)", "testcase": false, "constructor": false}, {"identifier": "setupMphChlBitmask", "parameters": "(Product mphChlProduct)", "modifiers": "public static", "return": "void", "signature": "void setupMphChlBitmask(Product mphChlProduct)", "full_signature": "public static void setupMphChlBitmask(Product mphChlProduct)", "class_method_signature": "MphChlUtils.setupMphChlBitmask(Product mphChlProduct)", "testcase": false, "constructor": false}, {"identifier": "encodeFlags", "parameters": "(boolean cyano_flag, boolean floating_flag, boolean adj_flag)", "modifiers": "public static", "return": "int", "signature": "int encodeFlags(boolean cyano_flag, boolean floating_flag, boolean adj_flag)", "full_signature": "public static int encodeFlags(boolean cyano_flag, boolean floating_flag, boolean adj_flag)", "class_method_signature": "MphChlUtils.encodeFlags(boolean cyano_flag, boolean floating_flag, boolean adj_flag)", "testcase": false, "constructor": false}, {"identifier": "computeChlExponential", "parameters": "(double mph)", "modifiers": "public static", "return": "double", "signature": "double computeChlExponential(double mph)", "full_signature": "public static double computeChlExponential(double mph)", "class_method_signature": "MphChlUtils.computeChlExponential(double mph)", "testcase": false, "constructor": false}, {"identifier": "computeChlPolynomial", "parameters": "(double mph)", "modifiers": "public static", "return": "double", "signature": "double computeChlPolynomial(double mph)", "full_signature": "public static double computeChlPolynomial(double mph)", "class_method_signature": "MphChlUtils.computeChlPolynomial(double mph)", "testcase": false, "constructor": false}, {"identifier": "isCyano", "parameters": "(double SICF_peak, double SIPF_peak, double BAIR_peak)", "modifiers": "public static", "return": "boolean", "signature": "boolean isCyano(double SICF_peak, double SIPF_peak, double BAIR_peak)", "full_signature": "public static boolean isCyano(double SICF_peak, double SIPF_peak, double BAIR_peak)", "class_method_signature": "MphChlUtils.isCyano(double SICF_peak, double SIPF_peak, double BAIR_peak)", "testcase": false, "constructor": false}, {"identifier": "isCyano", "parameters": "(double SICF_peak, double SIPF_peak)", "modifiers": "public static", "return": "boolean", "signature": "boolean isCyano(double SICF_peak, double SIPF_peak)", "full_signature": "public static boolean isCyano(double SICF_peak, double SIPF_peak)", "class_method_signature": "MphChlUtils.isCyano(double SICF_peak, double SIPF_peak)", "testcase": false, "constructor": false}, {"identifier": "setToInvalid", "parameters": "(WritableSample[] targetSamples, boolean exportMph)", "modifiers": "public static", "return": "void", "signature": "void setToInvalid(WritableSample[] targetSamples, boolean exportMph)", "full_signature": "public static void setToInvalid(WritableSample[] targetSamples, boolean exportMph)", "class_method_signature": "MphChlUtils.setToInvalid(WritableSample[] targetSamples, boolean exportMph)", "testcase": false, "constructor": false}, {"identifier": "computeMph", "parameters": "(double rBr_Max, double r_7, double r_14, double wl_max, double wl_7, double wl_14)", "modifiers": "public static", "return": "double", "signature": "double computeMph(double rBr_Max, double r_7, double r_14, double wl_max, double wl_7, double wl_14)", "full_signature": "public static double computeMph(double rBr_Max, double r_7, double r_14, double wl_max, double wl_7, double wl_14)", "class_method_signature": "MphChlUtils.computeMph(double rBr_Max, double r_7, double r_14, double wl_max, double wl_7, double wl_14)", "testcase": false, "constructor": false}], "file": "s3tbx-mphchl/src/main/java/org/esa/s3tbx/mphchl/MphChlUtils.java"}, "focal_method": {"identifier": "isCyano", "parameters": "(double SICF_peak, double SIPF_peak, double BAIR_peak)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isCyano(double SICF_peak, double SIPF_peak, double BAIR_peak) {\n        return SICF_peak < 0.0 && SIPF_peak > 0.0 && BAIR_peak > 0.002;\n    }", "signature": "boolean isCyano(double SICF_peak, double SIPF_peak, double BAIR_peak)", "full_signature": "public static boolean isCyano(double SICF_peak, double SIPF_peak, double BAIR_peak)", "class_method_signature": "MphChlUtils.isCyano(double SICF_peak, double SIPF_peak, double BAIR_peak)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}