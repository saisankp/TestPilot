{"test_class": {"identifier": "ExceptionFilterTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-rpc/dubbo-rpc-api/src/test/java/com/alibaba/dubbo/rpc/filter/ExceptionFilterTest.java"}, "test_case": {"identifier": "testRpcException", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Test public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testRpcException() {\n        Logger logger = mock(Logger.class);\n        RpcContext.getContext().setRemoteAddress(\"127.0.0.1\", 1234);\n        RpcException exception = new RpcException(\"TestRpcException\");\n\n        ExceptionFilter exceptionFilter = new ExceptionFilter(logger);\n        RpcInvocation invocation = new RpcInvocation(\"sayHello\", new Class<?>[]{String.class}, new Object[]{\"world\"});\n        Invoker<DemoService> invoker = mock(Invoker.class);\n        given(invoker.getInterface()).willReturn(DemoService.class);\n        given(invoker.invoke(eq(invocation))).willThrow(exception);\n\n\n        try {\n            exceptionFilter.invoke(invoker, invocation);\n        } catch (RpcException e) {\n            assertEquals(\"TestRpcException\", e.getMessage());\n        }\n        Mockito.verify(logger).error(eq(\"Got unchecked and undeclared exception which called by 127.0.0.1. service: \"\n                + DemoService.class.getName() + \", method: sayHello, exception: \"\n                + RpcException.class.getName() + \": TestRpcException\"), eq(exception));\n        RpcContext.removeContext();\n    }", "signature": "void testRpcException()", "full_signature": "@SuppressWarnings(\"unchecked\") @Test public void testRpcException()", "class_method_signature": "ExceptionFilterTest.testRpcException()", "testcase": true, "constructor": false, "invocations": ["mock", "setRemoteAddress", "getContext", "mock", "willReturn", "given", "getInterface", "willThrow", "given", "invoke", "eq", "invoke", "assertEquals", "getMessage", "error", "verify", "eq", "getName", "getName", "eq", "removeContext"]}, "focal_class": {"identifier": "ExceptionFilter", "superclass": "", "interfaces": "implements Filter", "fields": [{"original_string": "private final Logger logger;", "modifier": "private final", "type": "Logger", "declarator": "logger", "var_name": "logger"}], "methods": [{"identifier": "ExceptionFilter", "parameters": "()", "modifiers": "public", "return": "", "signature": " ExceptionFilter()", "full_signature": "public  ExceptionFilter()", "class_method_signature": "ExceptionFilter.ExceptionFilter()", "testcase": false, "constructor": true}, {"identifier": "ExceptionFilter", "parameters": "(Logger logger)", "modifiers": "public", "return": "", "signature": " ExceptionFilter(Logger logger)", "full_signature": "public  ExceptionFilter(Logger logger)", "class_method_signature": "ExceptionFilter.ExceptionFilter(Logger logger)", "testcase": false, "constructor": true}, {"identifier": "invoke", "parameters": "(Invoker<?> invoker, Invocation invocation)", "modifiers": "@Override public", "return": "Result", "signature": "Result invoke(Invoker<?> invoker, Invocation invocation)", "full_signature": "@Override public Result invoke(Invoker<?> invoker, Invocation invocation)", "class_method_signature": "ExceptionFilter.invoke(Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false}], "file": "dubbo-rpc/dubbo-rpc-api/src/main/java/com/alibaba/dubbo/rpc/filter/ExceptionFilter.java"}, "focal_method": {"identifier": "invoke", "parameters": "(Invoker<?> invoker, Invocation invocation)", "modifiers": "@Override public", "return": "Result", "body": "@Override\n    public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {\n        try {\n            Result result = invoker.invoke(invocation);\n            if (result.hasException() && GenericService.class != invoker.getInterface()) {\n                try {\n                    Throwable exception = result.getException();\n\n                    // directly throw if it's checked exception\n                    if (!(exception instanceof RuntimeException) && (exception instanceof Exception)) {\n                        return result;\n                    }\n                    // directly throw if the exception appears in the signature\n                    try {\n                        Method method = invoker.getInterface().getMethod(invocation.getMethodName(), invocation.getParameterTypes());\n                        Class<?>[] exceptionClassses = method.getExceptionTypes();\n                        for (Class<?> exceptionClass : exceptionClassses) {\n                            if (exception.getClass().equals(exceptionClass)) {\n                                return result;\n                            }\n                        }\n                    } catch (NoSuchMethodException e) {\n                        return result;\n                    }\n\n                    // for the exception not found in method's signature, print ERROR message in server's log.\n                    logger.error(\"Got unchecked and undeclared exception which called by \" + RpcContext.getContext().getRemoteHost()\n                            + \". service: \" + invoker.getInterface().getName() + \", method: \" + invocation.getMethodName()\n                            + \", exception: \" + exception.getClass().getName() + \": \" + exception.getMessage(), exception);\n\n                    // directly throw if exception class and interface class are in the same jar file.\n                    String serviceFile = ReflectUtils.getCodeBase(invoker.getInterface());\n                    String exceptionFile = ReflectUtils.getCodeBase(exception.getClass());\n                    if (serviceFile == null || exceptionFile == null || serviceFile.equals(exceptionFile)) {\n                        return result;\n                    }\n                    // directly throw if it's JDK exception\n                    String className = exception.getClass().getName();\n                    if (className.startsWith(\"java.\") || className.startsWith(\"javax.\")) {\n                        return result;\n                    }\n                    // directly throw if it's dubbo exception\n                    if (exception instanceof RpcException) {\n                        return result;\n                    }\n\n                    // otherwise, wrap with RuntimeException and throw back to the client\n                    return new RpcResult(new RuntimeException(StringUtils.toString(exception)));\n                } catch (Throwable e) {\n                    logger.warn(\"Fail to ExceptionFilter when called by \" + RpcContext.getContext().getRemoteHost()\n                            + \". service: \" + invoker.getInterface().getName() + \", method: \" + invocation.getMethodName()\n                            + \", exception: \" + e.getClass().getName() + \": \" + e.getMessage(), e);\n                    return result;\n                }\n            }\n            return result;\n        } catch (RuntimeException e) {\n            logger.error(\"Got unchecked and undeclared exception which called by \" + RpcContext.getContext().getRemoteHost()\n                    + \". service: \" + invoker.getInterface().getName() + \", method: \" + invocation.getMethodName()\n                    + \", exception: \" + e.getClass().getName() + \": \" + e.getMessage(), e);\n            throw e;\n        }\n    }", "signature": "Result invoke(Invoker<?> invoker, Invocation invocation)", "full_signature": "@Override public Result invoke(Invoker<?> invoker, Invocation invocation)", "class_method_signature": "ExceptionFilter.invoke(Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false, "invocations": ["invoke", "hasException", "getInterface", "getException", "getMethod", "getInterface", "getMethodName", "getParameterTypes", "getExceptionTypes", "equals", "getClass", "error", "getRemoteHost", "getContext", "getName", "getInterface", "getMethodName", "getName", "getClass", "getMessage", "getCodeBase", "getInterface", "getCodeBase", "getClass", "equals", "getName", "getClass", "startsWith", "startsWith", "toString", "warn", "getRemoteHost", "getContext", "getName", "getInterface", "getMethodName", "getName", "getClass", "getMessage", "error", "getRemoteHost", "getContext", "getName", "getInterface", "getMethodName", "getName", "getClass", "getMessage"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}