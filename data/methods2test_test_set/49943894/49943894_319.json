{"test_class": {"identifier": "GlobalLoadBalancingRulesServiceImplTest", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "private static final Logger s_logger = LoggerFactory.getLogger(GlobalLoadBalancingRulesServiceImplTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(GlobalLoadBalancingRulesServiceImplTest.class)", "var_name": "s_logger"}], "file": "server/src/test/java/org/apache/cloudstack/region/gslb/GlobalLoadBalancingRulesServiceImplTest.java"}, "test_case": {"identifier": "testRemoveFromGlobalLoadBalancerRule", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRemoveFromGlobalLoadBalancerRule() throws Exception {\n\n        s_logger.info(\"Running tests for RemoveFromGlobalLoadBalancerRule() service API\");\n\n        /*\n         * TEST 1: given valid gslb rule id, valid lb rule id and is assigned to given gslb rule id\n         * then RemoveFromGlobalLoadBalancerRule service API should succeed\n         */\n        runRemoveFromGlobalLoadBalancerRuleTest();\n\n        /*\n         * TEST 2: given valid gslb rule id, valid lb rule id but NOT assigned to given gslb rule id\n         * then RemoveFromGlobalLoadBalancerRule service API should fail\n         */\n        runRemoveFromGlobalLoadBalancerRuleTestUnassignedLb();\n\n        /*\n         * TEST 3: given valid gslb rule id, INVALID lb rule id then RemoveFromGlobalLoadBalancerRule\n         * service API should fail\n         */\n        runRemoveFromGlobalLoadBalancerRuleTestInvalidLb();\n    }", "signature": "void testRemoveFromGlobalLoadBalancerRule()", "full_signature": "@Test public void testRemoveFromGlobalLoadBalancerRule()", "class_method_signature": "GlobalLoadBalancingRulesServiceImplTest.testRemoveFromGlobalLoadBalancerRule()", "testcase": true, "constructor": false, "invocations": ["info", "runRemoveFromGlobalLoadBalancerRuleTest", "runRemoveFromGlobalLoadBalancerRuleTestUnassignedLb", "runRemoveFromGlobalLoadBalancerRuleTestInvalidLb"]}, "focal_class": {"identifier": "GlobalLoadBalancingRulesServiceImpl", "superclass": "", "interfaces": "implements GlobalLoadBalancingRulesService", "fields": [{"original_string": "private static final Logger s_logger = LoggerFactory.getLogger(GlobalLoadBalancingRulesServiceImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(GlobalLoadBalancingRulesServiceImpl.class)", "var_name": "s_logger"}, {"original_string": "@Inject\n    AccountManager _accountMgr;", "modifier": "@Inject", "type": "AccountManager", "declarator": "_accountMgr", "var_name": "_accountMgr"}, {"original_string": "@Inject\n    GlobalLoadBalancerRuleDao _gslbRuleDao;", "modifier": "@Inject", "type": "GlobalLoadBalancerRuleDao", "declarator": "_gslbRuleDao", "var_name": "_gslbRuleDao"}, {"original_string": "@Inject\n    GlobalLoadBalancerLbRuleMapDao _gslbLbMapDao;", "modifier": "@Inject", "type": "GlobalLoadBalancerLbRuleMapDao", "declarator": "_gslbLbMapDao", "var_name": "_gslbLbMapDao"}, {"original_string": "@Inject\n    RegionDao _regionDao;", "modifier": "@Inject", "type": "RegionDao", "declarator": "_regionDao", "var_name": "_regionDao"}, {"original_string": "@Inject\n    RulesManager _rulesMgr;", "modifier": "@Inject", "type": "RulesManager", "declarator": "_rulesMgr", "var_name": "_rulesMgr"}, {"original_string": "@Inject\n    LoadBalancerDao _lbDao;", "modifier": "@Inject", "type": "LoadBalancerDao", "declarator": "_lbDao", "var_name": "_lbDao"}, {"original_string": "@Inject\n    NetworkDao _networkDao;", "modifier": "@Inject", "type": "NetworkDao", "declarator": "_networkDao", "var_name": "_networkDao"}, {"original_string": "@Inject\n    ConfigurationDao _globalConfigDao;", "modifier": "@Inject", "type": "ConfigurationDao", "declarator": "_globalConfigDao", "var_name": "_globalConfigDao"}, {"original_string": "@Inject\n    IPAddressDao _ipAddressDao;", "modifier": "@Inject", "type": "IPAddressDao", "declarator": "_ipAddressDao", "var_name": "_ipAddressDao"}, {"original_string": "@Inject\n    AgentManager _agentMgr;", "modifier": "@Inject", "type": "AgentManager", "declarator": "_agentMgr", "var_name": "_agentMgr"}, {"original_string": "protected List<GslbServiceProvider> _gslbProviders;", "modifier": "protected", "type": "List<GslbServiceProvider>", "declarator": "_gslbProviders", "var_name": "_gslbProviders"}], "methods": [{"identifier": "setGslbServiceProviders", "parameters": "(List<GslbServiceProvider> providers)", "modifiers": "public", "return": "void", "signature": "void setGslbServiceProviders(List<GslbServiceProvider> providers)", "full_signature": "public void setGslbServiceProviders(List<GslbServiceProvider> providers)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.setGslbServiceProviders(List<GslbServiceProvider> providers)", "testcase": false, "constructor": false}, {"identifier": "createGlobalLoadBalancerRule", "parameters": "(CreateGlobalLoadBalancerRuleCmd newRule)", "modifiers": "@Override @DB @ActionEvent(eventType = EventTypes.EVENT_GLOBAL_LOAD_BALANCER_CREATE, eventDescription = \"creating global load \" + \"balancer rule\", create = true) public", "return": "GlobalLoadBalancerRule", "signature": "GlobalLoadBalancerRule createGlobalLoadBalancerRule(CreateGlobalLoadBalancerRuleCmd newRule)", "full_signature": "@Override @DB @ActionEvent(eventType = EventTypes.EVENT_GLOBAL_LOAD_BALANCER_CREATE, eventDescription = \"creating global load \" + \"balancer rule\", create = true) public GlobalLoadBalancerRule createGlobalLoadBalancerRule(CreateGlobalLoadBalancerRuleCmd newRule)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.createGlobalLoadBalancerRule(CreateGlobalLoadBalancerRuleCmd newRule)", "testcase": false, "constructor": false}, {"identifier": "assignToGlobalLoadBalancerRule", "parameters": "(AssignToGlobalLoadBalancerRuleCmd assignToGslbCmd)", "modifiers": "@Override @DB @ActionEvent(eventType = EventTypes.EVENT_ASSIGN_TO_GLOBAL_LOAD_BALANCER_RULE, eventDescription = \"Assigning a load balancer rule to global load balancer rule\", async = true) public", "return": "boolean", "signature": "boolean assignToGlobalLoadBalancerRule(AssignToGlobalLoadBalancerRuleCmd assignToGslbCmd)", "full_signature": "@Override @DB @ActionEvent(eventType = EventTypes.EVENT_ASSIGN_TO_GLOBAL_LOAD_BALANCER_RULE, eventDescription = \"Assigning a load balancer rule to global load balancer rule\", async = true) public boolean assignToGlobalLoadBalancerRule(AssignToGlobalLoadBalancerRuleCmd assignToGslbCmd)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.assignToGlobalLoadBalancerRule(AssignToGlobalLoadBalancerRuleCmd assignToGslbCmd)", "testcase": false, "constructor": false}, {"identifier": "removeFromGlobalLoadBalancerRule", "parameters": "(RemoveFromGlobalLoadBalancerRuleCmd removeFromGslbCmd)", "modifiers": "@Override @DB @ActionEvent(eventType = EventTypes.EVENT_REMOVE_FROM_GLOBAL_LOAD_BALANCER_RULE, eventDescription = \"Removing a load balancer rule to be part of global load balancer rule\") public", "return": "boolean", "signature": "boolean removeFromGlobalLoadBalancerRule(RemoveFromGlobalLoadBalancerRuleCmd removeFromGslbCmd)", "full_signature": "@Override @DB @ActionEvent(eventType = EventTypes.EVENT_REMOVE_FROM_GLOBAL_LOAD_BALANCER_RULE, eventDescription = \"Removing a load balancer rule to be part of global load balancer rule\") public boolean removeFromGlobalLoadBalancerRule(RemoveFromGlobalLoadBalancerRuleCmd removeFromGslbCmd)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.removeFromGlobalLoadBalancerRule(RemoveFromGlobalLoadBalancerRuleCmd removeFromGslbCmd)", "testcase": false, "constructor": false}, {"identifier": "deleteGlobalLoadBalancerRule", "parameters": "(DeleteGlobalLoadBalancerRuleCmd deleteGslbCmd)", "modifiers": "@Override @ActionEvent(eventType = EventTypes.EVENT_GLOBAL_LOAD_BALANCER_DELETE, eventDescription = \"Delete global load balancer rule\") public", "return": "boolean", "signature": "boolean deleteGlobalLoadBalancerRule(DeleteGlobalLoadBalancerRuleCmd deleteGslbCmd)", "full_signature": "@Override @ActionEvent(eventType = EventTypes.EVENT_GLOBAL_LOAD_BALANCER_DELETE, eventDescription = \"Delete global load balancer rule\") public boolean deleteGlobalLoadBalancerRule(DeleteGlobalLoadBalancerRuleCmd deleteGslbCmd)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.deleteGlobalLoadBalancerRule(DeleteGlobalLoadBalancerRuleCmd deleteGslbCmd)", "testcase": false, "constructor": false}, {"identifier": "revokeGslbRule", "parameters": "(final long gslbRuleId, Account caller)", "modifiers": "@DB private", "return": "void", "signature": "void revokeGslbRule(final long gslbRuleId, Account caller)", "full_signature": "@DB private void revokeGslbRule(final long gslbRuleId, Account caller)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.revokeGslbRule(final long gslbRuleId, Account caller)", "testcase": false, "constructor": false}, {"identifier": "updateGlobalLoadBalancerRule", "parameters": "(UpdateGlobalLoadBalancerRuleCmd updateGslbCmd)", "modifiers": "@Override public", "return": "GlobalLoadBalancerRule", "signature": "GlobalLoadBalancerRule updateGlobalLoadBalancerRule(UpdateGlobalLoadBalancerRuleCmd updateGslbCmd)", "full_signature": "@Override public GlobalLoadBalancerRule updateGlobalLoadBalancerRule(UpdateGlobalLoadBalancerRuleCmd updateGslbCmd)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.updateGlobalLoadBalancerRule(UpdateGlobalLoadBalancerRuleCmd updateGslbCmd)", "testcase": false, "constructor": false}, {"identifier": "listGlobalLoadBalancerRule", "parameters": "(ListGlobalLoadBalancerRuleCmd listGslbCmd)", "modifiers": "@Override public", "return": "List<GlobalLoadBalancerRule>", "signature": "List<GlobalLoadBalancerRule> listGlobalLoadBalancerRule(ListGlobalLoadBalancerRuleCmd listGslbCmd)", "full_signature": "@Override public List<GlobalLoadBalancerRule> listGlobalLoadBalancerRule(ListGlobalLoadBalancerRuleCmd listGslbCmd)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.listGlobalLoadBalancerRule(ListGlobalLoadBalancerRuleCmd listGslbCmd)", "testcase": false, "constructor": false}, {"identifier": "listSiteLoadBalancers", "parameters": "(long gslbRuleId)", "modifiers": "@Override public", "return": "List<LoadBalancer>", "signature": "List<LoadBalancer> listSiteLoadBalancers(long gslbRuleId)", "full_signature": "@Override public List<LoadBalancer> listSiteLoadBalancers(long gslbRuleId)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.listSiteLoadBalancers(long gslbRuleId)", "testcase": false, "constructor": false}, {"identifier": "applyGlobalLoadBalancerRuleConfig", "parameters": "(long gslbRuleId, boolean revoke)", "modifiers": "private", "return": "boolean", "signature": "boolean applyGlobalLoadBalancerRuleConfig(long gslbRuleId, boolean revoke)", "full_signature": "private boolean applyGlobalLoadBalancerRuleConfig(long gslbRuleId, boolean revoke)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.applyGlobalLoadBalancerRuleConfig(long gslbRuleId, boolean revoke)", "testcase": false, "constructor": false}, {"identifier": "revokeAllGslbRulesForAccount", "parameters": "(com.cloud.user.Account caller, long accountId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean revokeAllGslbRulesForAccount(com.cloud.user.Account caller, long accountId)", "full_signature": "@Override public boolean revokeAllGslbRulesForAccount(com.cloud.user.Account caller, long accountId)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.revokeAllGslbRulesForAccount(com.cloud.user.Account caller, long accountId)", "testcase": false, "constructor": false}, {"identifier": "checkGslbServiceEnabledInZone", "parameters": "(long zoneId, long physicalNetworkId)", "modifiers": "private", "return": "boolean", "signature": "boolean checkGslbServiceEnabledInZone(long zoneId, long physicalNetworkId)", "full_signature": "private boolean checkGslbServiceEnabledInZone(long zoneId, long physicalNetworkId)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.checkGslbServiceEnabledInZone(long zoneId, long physicalNetworkId)", "testcase": false, "constructor": false}, {"identifier": "lookupGslbServiceProvider", "parameters": "()", "modifiers": "protected", "return": "GslbServiceProvider", "signature": "GslbServiceProvider lookupGslbServiceProvider()", "full_signature": "protected GslbServiceProvider lookupGslbServiceProvider()", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.lookupGslbServiceProvider()", "testcase": false, "constructor": false}, {"identifier": "findById", "parameters": "(long gslbRuleId)", "modifiers": "@Override public", "return": "GlobalLoadBalancerRule", "signature": "GlobalLoadBalancerRule findById(long gslbRuleId)", "full_signature": "@Override public GlobalLoadBalancerRule findById(long gslbRuleId)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.findById(long gslbRuleId)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/cloudstack/region/gslb/GlobalLoadBalancingRulesServiceImpl.java"}, "focal_method": {"identifier": "removeFromGlobalLoadBalancerRule", "parameters": "(RemoveFromGlobalLoadBalancerRuleCmd removeFromGslbCmd)", "modifiers": "@Override @DB @ActionEvent(eventType = EventTypes.EVENT_REMOVE_FROM_GLOBAL_LOAD_BALANCER_RULE, eventDescription = \"Removing a load balancer rule to be part of global load balancer rule\") public", "return": "boolean", "body": "@Override\n    @DB\n    @ActionEvent(eventType = EventTypes.EVENT_REMOVE_FROM_GLOBAL_LOAD_BALANCER_RULE,\n                 eventDescription = \"Removing a load balancer rule to be part of global load balancer rule\")\n    public boolean removeFromGlobalLoadBalancerRule(RemoveFromGlobalLoadBalancerRuleCmd removeFromGslbCmd) {\n\n        CallContext ctx = CallContext.current();\n        Account caller = ctx.getCallingAccount();\n\n        final long gslbRuleId = removeFromGslbCmd.getGlobalLoadBalancerRuleId();\n        final GlobalLoadBalancerRuleVO gslbRule = _gslbRuleDao.findById(gslbRuleId);\n        if (gslbRule == null) {\n            throw new InvalidParameterValueException(\"Invalid global load balancer rule id: \" + gslbRuleId);\n        }\n\n        _accountMgr.checkAccess(caller, SecurityChecker.AccessType.OperateEntry, true, gslbRule);\n\n        if (gslbRule.getState() == GlobalLoadBalancerRule.State.Revoke) {\n            throw new InvalidParameterValueException(\"global load balancer rule id: \" + gslbRuleId + \" is already in revoked state\");\n        }\n\n        final List<Long> lbRuleIdsToremove = removeFromGslbCmd.getLoadBalancerRulesIds();\n        if (lbRuleIdsToremove == null || lbRuleIdsToremove.isEmpty()) {\n            throw new InvalidParameterValueException(\"empty list of load balancer rule Ids specified to be un-assigned\" + \" to global load balancer rule\");\n        }\n\n        // get the active list of LB rule id's that are assigned currently to GSLB rule and corresponding zone id's\n        List<Long> oldLbRuleIds = new ArrayList<Long>();\n        List<Long> oldZones = new ArrayList<Long>();\n\n        List<GlobalLoadBalancerLbRuleMapVO> gslbLbMapVos = _gslbLbMapDao.listByGslbRuleId(gslbRuleId);\n        if (gslbLbMapVos == null) {\n            throw new InvalidParameterValueException(\" There are no load balancer rules that are assigned to global \" + \" load balancer rule id: \" + gslbRule.getUuid() +\n                \" that are available for deletion\");\n        }\n\n        for (Long lbRuleId : lbRuleIdsToremove) {\n            LoadBalancerVO loadBalancer = _lbDao.findById(lbRuleId);\n            if (loadBalancer == null) {\n                throw new InvalidParameterValueException(\"Specified load balancer rule ID does not exist.\");\n            }\n\n            _accountMgr.checkAccess(caller, null, true, loadBalancer);\n        }\n\n        for (GlobalLoadBalancerLbRuleMapVO gslbLbMapVo : gslbLbMapVos) {\n            LoadBalancerVO loadBalancer = _lbDao.findById(gslbLbMapVo.getLoadBalancerId());\n            Network network = _networkDao.findById(loadBalancer.getNetworkId());\n            oldLbRuleIds.add(gslbLbMapVo.getLoadBalancerId());\n            oldZones.add(network.getDataCenterId());\n        }\n\n        for (Long lbRuleId : lbRuleIdsToremove) {\n            LoadBalancerVO loadBalancer = _lbDao.findById(lbRuleId);\n            if (oldLbRuleIds != null && !oldLbRuleIds.contains(loadBalancer.getId())) {\n                throw new InvalidParameterValueException(\"Load balancer ID \" + loadBalancer.getUuid() + \" is not assigned\" + \" to global load balancer rule: \" +\n                    gslbRule.getUuid());\n            }\n        }\n\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(TransactionStatus status) {\n                // update the mapping of gslb rule to Lb rule, to revoke state\n                for (Long lbRuleId : lbRuleIdsToremove) {\n                    GlobalLoadBalancerLbRuleMapVO removeGslbLbMap = _gslbLbMapDao.findByGslbRuleIdAndLbRuleId(gslbRuleId, lbRuleId);\n                    removeGslbLbMap.setRevoke(true);\n                    _gslbLbMapDao.update(removeGslbLbMap.getId(), removeGslbLbMap);\n                }\n\n                // mark the gslb rule state as add\n                if (gslbRule.getState() == GlobalLoadBalancerRule.State.Staged) {\n                    gslbRule.setState(GlobalLoadBalancerRule.State.Add);\n                    _gslbRuleDao.update(gslbRule.getId(), gslbRule);\n                }\n\n            }\n        });\n\n        boolean success = false;\n        try {\n            s_logger.debug(\"Attempting to configure global load balancer rule configuration on the gslb service providers \");\n\n            // apply the gslb rule on to the back end gslb service providers\n            if (!applyGlobalLoadBalancerRuleConfig(gslbRuleId, false)) {\n                s_logger.warn(\"Failed to remove load balancer rules \" + lbRuleIdsToremove + \" from global load balancer rule id \" + gslbRuleId);\n                CloudRuntimeException ex = new CloudRuntimeException(\"Failed to remove load balancer rule ids from GSLB rule \");\n                throw ex;\n            }\n\n            Transaction.execute(new TransactionCallbackNoReturn() {\n                @Override\n                public void doInTransactionWithoutResult(TransactionStatus status) {\n                    // remove the mappings of gslb rule to Lb rule that are in revoked state\n                    for (Long lbRuleId : lbRuleIdsToremove) {\n                        GlobalLoadBalancerLbRuleMapVO removeGslbLbMap = _gslbLbMapDao.findByGslbRuleIdAndLbRuleId(gslbRuleId, lbRuleId);\n                        _gslbLbMapDao.remove(removeGslbLbMap.getId());\n                    }\n\n                    // on success set state back to Active\n                    gslbRule.setState(GlobalLoadBalancerRule.State.Active);\n                    _gslbRuleDao.update(gslbRule.getId(), gslbRule);\n\n                }\n            });\n\n            success = true;\n        } catch (ResourceUnavailableException e) {\n            throw new CloudRuntimeException(\"Failed to update removed load balancer details from gloabal load balancer\");\n        }\n\n        return success;\n    }", "signature": "boolean removeFromGlobalLoadBalancerRule(RemoveFromGlobalLoadBalancerRuleCmd removeFromGslbCmd)", "full_signature": "@Override @DB @ActionEvent(eventType = EventTypes.EVENT_REMOVE_FROM_GLOBAL_LOAD_BALANCER_RULE, eventDescription = \"Removing a load balancer rule to be part of global load balancer rule\") public boolean removeFromGlobalLoadBalancerRule(RemoveFromGlobalLoadBalancerRuleCmd removeFromGslbCmd)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.removeFromGlobalLoadBalancerRule(RemoveFromGlobalLoadBalancerRuleCmd removeFromGslbCmd)", "testcase": false, "constructor": false, "invocations": ["current", "getCallingAccount", "getGlobalLoadBalancerRuleId", "findById", "checkAccess", "getState", "getLoadBalancerRulesIds", "isEmpty", "listByGslbRuleId", "getUuid", "findById", "checkAccess", "findById", "getLoadBalancerId", "findById", "getNetworkId", "add", "getLoadBalancerId", "add", "getDataCenterId", "findById", "contains", "getId", "getUuid", "getUuid", "execute", "findByGslbRuleIdAndLbRuleId", "setRevoke", "update", "getId", "getState", "setState", "update", "getId", "debug", "applyGlobalLoadBalancerRuleConfig", "warn", "execute", "findByGslbRuleIdAndLbRuleId", "remove", "getId", "setState", "update", "getId"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}