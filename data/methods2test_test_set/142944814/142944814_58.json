{"test_class": {"identifier": "TransportExceptionConverterTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "core/transport/src/test/java/hera/exception/TransportExceptionConverterTest.java"}, "test_case": {"identifier": "testConvert", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testConvert() {\n    final Throwable[] parameters = {\n        new HerajException(\"\"),\n        new StatusRuntimeException(Status.UNAVAILABLE),\n        new StatusRuntimeException(Status.INTERNAL),\n        new UnsupportedOperationException(),\n    };\n    final Class<?>[] expected = {\n        HerajException.class,\n        ConnectionException.class,\n        HerajException.class,\n        HerajException.class,\n    };\n\n    final TransportExceptionConverter converter = new TransportExceptionConverter();\n    for (int i = 0; i < parameters.length; ++i) {\n      final Throwable parameter = parameters[i];\n      final Class<?> expectedClass = expected[i];\n      final HerajException actual = converter.convert(parameter);\n      assertEquals(actual.getClass(), expectedClass);\n    }\n  }", "signature": "void testConvert()", "full_signature": "@Test public void testConvert()", "class_method_signature": "TransportExceptionConverterTest.testConvert()", "testcase": true, "constructor": false, "invocations": ["convert", "assertEquals", "getClass"]}, "focal_class": {"identifier": "TransportExceptionConverter", "superclass": "", "interfaces": "implements ExceptionConverter<HerajException>", "fields": [{"original_string": "protected final transient Logger logger = getLogger(getClass());", "modifier": "protected final transient", "type": "Logger", "declarator": "logger = getLogger(getClass())", "var_name": "logger"}], "methods": [{"identifier": "convert", "parameters": "(final Throwable target)", "modifiers": "@Override public", "return": "HerajException", "signature": "HerajException convert(final Throwable target)", "full_signature": "@Override public HerajException convert(final Throwable target)", "class_method_signature": "TransportExceptionConverter.convert(final Throwable target)", "testcase": false, "constructor": false}, {"identifier": "convertGrpcBasisException", "parameters": "(final StatusRuntimeException e)", "modifiers": "protected", "return": "HerajException", "signature": "HerajException convertGrpcBasisException(final StatusRuntimeException e)", "full_signature": "protected HerajException convertGrpcBasisException(final StatusRuntimeException e)", "class_method_signature": "TransportExceptionConverter.convertGrpcBasisException(final StatusRuntimeException e)", "testcase": false, "constructor": false}], "file": "core/transport/src/main/java/hera/exception/TransportExceptionConverter.java"}, "focal_method": {"identifier": "convert", "parameters": "(final Throwable target)", "modifiers": "@Override public", "return": "HerajException", "body": "@Override\n  public HerajException convert(final Throwable target) {\n    logger.trace(\"Convert raw exception {}\", target.toString());\n    if (target instanceof HerajException) {\n      return (HerajException) target;\n    } else if (target instanceof StatusRuntimeException) {\n      return convertGrpcBasisException((StatusRuntimeException) target);\n    } else {\n      return new HerajException(target);\n    }\n  }", "signature": "HerajException convert(final Throwable target)", "full_signature": "@Override public HerajException convert(final Throwable target)", "class_method_signature": "TransportExceptionConverter.convert(final Throwable target)", "testcase": false, "constructor": false, "invocations": ["trace", "toString", "convertGrpcBasisException"]}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}