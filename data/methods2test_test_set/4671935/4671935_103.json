{"test_class": {"identifier": "PlaceFileTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Place kpow = new Place(\"Kpow\", \"Washington\", \"USA\", 47.239, -123.143, 84.2, \"DZ\", 30000, false);", "modifier": "private final", "type": "Place", "declarator": "kpow = new Place(\"Kpow\", \"Washington\", \"USA\", 47.239, -123.143, 84.2, \"DZ\", 30000, false)", "var_name": "kpow"}], "file": "common/src/test/java/com/platypii/baseline/places/PlaceFileTest.java"}, "test_case": {"identifier": "placeFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void placeFile() throws IOException {\n        File file = FileUtilCommon.makeFileGz(\"name,region,country,latitude,longitude,altitude,type,radius,wingsuitable,public\\nKpow,Washington,USA,47.239,-123.143,84.2,DZ,30000,,\");\n        PlaceFile placeFile = new PlaceFile(file);\n        assertTrue(placeFile.exists());\n        assertTrue(placeFile.isFresh());\n\n        // Parse file\n        List<Place> places = placeFile.parse();\n        assertEquals(1, places.size());\n        Place parsed = places.get(0);\n        assertEquals(kpow.name, parsed.name);\n        assertEquals(kpow.region, parsed.region);\n        assertEquals(kpow.country, parsed.country);\n        assertEquals(kpow.lat, parsed.lat, 0.0001);\n        assertEquals(kpow.lng, parsed.lng, 0.0001);\n        assertEquals(kpow.alt, parsed.alt, 0.0001);\n        assertEquals(kpow.objectType, parsed.objectType);\n\n        // Delete\n        placeFile.delete();\n    }", "signature": "void placeFile()", "full_signature": "@Test public void placeFile()", "class_method_signature": "PlaceFileTest.placeFile()", "testcase": true, "constructor": false, "invocations": ["makeFileGz", "assertTrue", "exists", "assertTrue", "isFresh", "parse", "assertEquals", "size", "get", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "delete"]}, "focal_class": {"identifier": "PlaceFile", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TAG = \"ParsePlaces\";", "modifier": "private static final", "type": "String", "declarator": "TAG = \"ParsePlaces\"", "var_name": "TAG"}, {"original_string": "private static final String placeFilename = \"places/places.csv.gz\";", "modifier": "private static final", "type": "String", "declarator": "placeFilename = \"places/places.csv.gz\"", "var_name": "placeFilename"}, {"original_string": "private static final long ttl = 24 * 60 * 60 * 1000;", "modifier": "private static final", "type": "long", "declarator": "ttl = 24 * 60 * 60 * 1000", "var_name": "ttl"}, {"original_string": "@NonNull\n    final File file;", "modifier": "@NonNull\n    final", "type": "File", "declarator": "file", "var_name": "file"}], "methods": [{"identifier": "PlaceFile", "parameters": "(@NonNull Context context)", "modifiers": "", "return": "", "signature": " PlaceFile(@NonNull Context context)", "full_signature": "  PlaceFile(@NonNull Context context)", "class_method_signature": "PlaceFile.PlaceFile(@NonNull Context context)", "testcase": false, "constructor": true}, {"identifier": "PlaceFile", "parameters": "(@NonNull File file)", "modifiers": "", "return": "", "signature": " PlaceFile(@NonNull File file)", "full_signature": "  PlaceFile(@NonNull File file)", "class_method_signature": "PlaceFile.PlaceFile(@NonNull File file)", "testcase": false, "constructor": true}, {"identifier": "exists", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean exists()", "full_signature": " boolean exists()", "class_method_signature": "PlaceFile.exists()", "testcase": false, "constructor": false}, {"identifier": "isFresh", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isFresh()", "full_signature": " boolean isFresh()", "class_method_signature": "PlaceFile.isFresh()", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "()", "modifiers": "@NonNull", "return": "List<Place>", "signature": "List<Place> parse()", "full_signature": "@NonNull List<Place> parse()", "class_method_signature": "PlaceFile.parse()", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "()", "modifiers": "", "return": "void", "signature": "void delete()", "full_signature": " void delete()", "class_method_signature": "PlaceFile.delete()", "testcase": false, "constructor": false}], "file": "common/src/main/java/com/platypii/baseline/places/PlaceFile.java"}, "focal_method": {"identifier": "PlaceFile", "parameters": "(@NonNull Context context)", "modifiers": "", "return": "", "body": "PlaceFile(@NonNull Context context) {\n        this(new File(context.getFilesDir(), placeFilename));\n    }", "signature": " PlaceFile(@NonNull Context context)", "full_signature": "  PlaceFile(@NonNull Context context)", "class_method_signature": "PlaceFile.PlaceFile(@NonNull Context context)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 4671935, "url": "https://github.com/platypii/BASElineFlightComputer", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 18, "size": 6949, "license": "licensed"}}