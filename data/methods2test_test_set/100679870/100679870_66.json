{"test_class": {"identifier": "AbstractRecommenderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private List<OrderItem> trainOrderItems;", "modifier": "private", "type": "List<OrderItem>", "declarator": "trainOrderItems", "var_name": "trainOrderItems"}, {"original_string": "private List<Order> trainOrders;", "modifier": "private", "type": "List<Order>", "declarator": "trainOrders", "var_name": "trainOrders"}, {"original_string": "private List<User> allUsers;", "modifier": "private", "type": "List<User>", "declarator": "allUsers", "var_name": "allUsers"}, {"original_string": "private List<OrderItem> recommendSingle;", "modifier": "private", "type": "List<OrderItem>", "declarator": "recommendSingle", "var_name": "recommendSingle"}, {"original_string": "private List<OrderItem> recommendMulti;", "modifier": "private", "type": "List<OrderItem>", "declarator": "recommendMulti", "var_name": "recommendMulti"}, {"original_string": "private AbstractRecommender algo;", "modifier": "private", "type": "AbstractRecommender", "declarator": "algo", "var_name": "algo"}], "file": "services/tools.descartes.teastore.recommender/src/test/java/tools/descartes/teastore/recommender/algorithm/AbstractRecommenderTest.java"}, "test_case": {"identifier": "testResults", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testResults() {\n\t\tgetAlgo().train(getTrainOrderItems(), getTrainOrders());\n\t\ttestSingleResults();\n\t\ttestMultiResults();\n\t}", "signature": "void testResults()", "full_signature": "@Test public void testResults()", "class_method_signature": "AbstractRecommenderTest.testResults()", "testcase": true, "constructor": false, "invocations": ["train", "getAlgo", "getTrainOrderItems", "getTrainOrders", "testSingleResults", "testMultiResults"]}, "focal_class": {"identifier": "AbstractRecommender", "superclass": "", "interfaces": "implements IRecommender", "fields": [{"original_string": "private boolean trainingFinished = false;", "modifier": "private", "type": "boolean", "declarator": "trainingFinished = false", "var_name": "trainingFinished"}, {"original_string": "public static final int MAX_NUMBER_OF_RECOMMENDATIONS = 10;", "modifier": "public static final", "type": "int", "declarator": "MAX_NUMBER_OF_RECOMMENDATIONS = 10", "var_name": "MAX_NUMBER_OF_RECOMMENDATIONS"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(AbstractRecommender.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(AbstractRecommender.class)", "var_name": "LOG"}, {"original_string": "private Map<Long, Map<Long, Double>> userBuyingMatrix;", "modifier": "private", "type": "Map<Long, Map<Long, Double>>", "declarator": "userBuyingMatrix", "var_name": "userBuyingMatrix"}, {"original_string": "private Map<Long, Set<OrderItemSet>> userItemSets;", "modifier": "private", "type": "Map<Long, Set<OrderItemSet>>", "declarator": "userItemSets", "var_name": "userItemSets"}, {"original_string": "private Set<Long> totalProducts;", "modifier": "private", "type": "Set<Long>", "declarator": "totalProducts", "var_name": "totalProducts"}], "methods": [{"identifier": "train", "parameters": "(List<OrderItem> orderItems, List<Order> orders)", "modifiers": "@Override public", "return": "void", "signature": "void train(List<OrderItem> orderItems, List<Order> orders)", "full_signature": "@Override public void train(List<OrderItem> orderItems, List<Order> orders)", "class_method_signature": "AbstractRecommender.train(List<OrderItem> orderItems, List<Order> orders)", "testcase": false, "constructor": false}, {"identifier": "executePreprocessing", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void executePreprocessing()", "full_signature": "protected void executePreprocessing()", "class_method_signature": "AbstractRecommender.executePreprocessing()", "testcase": false, "constructor": false}, {"identifier": "recommendProducts", "parameters": "(Long userid, List<OrderItem> currentItems)", "modifiers": "@Override public", "return": "List<Long>", "signature": "List<Long> recommendProducts(Long userid, List<OrderItem> currentItems)", "full_signature": "@Override public List<Long> recommendProducts(Long userid, List<OrderItem> currentItems)", "class_method_signature": "AbstractRecommender.recommendProducts(Long userid, List<OrderItem> currentItems)", "testcase": false, "constructor": false}, {"identifier": "filterRecommendations", "parameters": "(Map<Long, Double> priorityList, List<Long> currentItems)", "modifiers": "protected", "return": "List<Long>", "signature": "List<Long> filterRecommendations(Map<Long, Double> priorityList, List<Long> currentItems)", "full_signature": "protected List<Long> filterRecommendations(Map<Long, Double> priorityList, List<Long> currentItems)", "class_method_signature": "AbstractRecommender.filterRecommendations(Map<Long, Double> priorityList, List<Long> currentItems)", "testcase": false, "constructor": false}, {"identifier": "createRanking", "parameters": "(Map<Long, Double> map)", "modifiers": "private", "return": "TreeMap<Double, List<Long>>", "signature": "TreeMap<Double, List<Long>> createRanking(Map<Long, Double> map)", "full_signature": "private TreeMap<Double, List<Long>> createRanking(Map<Long, Double> map)", "class_method_signature": "AbstractRecommender.createRanking(Map<Long, Double> map)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(Long userid, List<Long> currentItems)", "modifiers": "protected abstract", "return": "List<Long>", "signature": "List<Long> execute(Long userid, List<Long> currentItems)", "full_signature": "protected abstract List<Long> execute(Long userid, List<Long> currentItems)", "class_method_signature": "AbstractRecommender.execute(Long userid, List<Long> currentItems)", "testcase": false, "constructor": false}, {"identifier": "findOrder", "parameters": "(List<Order> orders, long orderid)", "modifiers": "private", "return": "Order", "signature": "Order findOrder(List<Order> orders, long orderid)", "full_signature": "private Order findOrder(List<Order> orders, long orderid)", "class_method_signature": "AbstractRecommender.findOrder(List<Order> orders, long orderid)", "testcase": false, "constructor": false}, {"identifier": "getUserBuyingMatrix", "parameters": "()", "modifiers": "public", "return": "Map<Long, Map<Long, Double>>", "signature": "Map<Long, Map<Long, Double>> getUserBuyingMatrix()", "full_signature": "public Map<Long, Map<Long, Double>> getUserBuyingMatrix()", "class_method_signature": "AbstractRecommender.getUserBuyingMatrix()", "testcase": false, "constructor": false}, {"identifier": "setUserBuyingMatrix", "parameters": "(Map<Long, Map<Long, Double>> userBuyingMatrix)", "modifiers": "public", "return": "void", "signature": "void setUserBuyingMatrix(Map<Long, Map<Long, Double>> userBuyingMatrix)", "full_signature": "public void setUserBuyingMatrix(Map<Long, Map<Long, Double>> userBuyingMatrix)", "class_method_signature": "AbstractRecommender.setUserBuyingMatrix(Map<Long, Map<Long, Double>> userBuyingMatrix)", "testcase": false, "constructor": false}, {"identifier": "getTotalProducts", "parameters": "()", "modifiers": "public", "return": "Set<Long>", "signature": "Set<Long> getTotalProducts()", "full_signature": "public Set<Long> getTotalProducts()", "class_method_signature": "AbstractRecommender.getTotalProducts()", "testcase": false, "constructor": false}, {"identifier": "setTotalProducts", "parameters": "(Set<Long> totalProducts)", "modifiers": "public", "return": "void", "signature": "void setTotalProducts(Set<Long> totalProducts)", "full_signature": "public void setTotalProducts(Set<Long> totalProducts)", "class_method_signature": "AbstractRecommender.setTotalProducts(Set<Long> totalProducts)", "testcase": false, "constructor": false}, {"identifier": "getUserItemSets", "parameters": "()", "modifiers": "public", "return": "Map<Long, Set<OrderItemSet>>", "signature": "Map<Long, Set<OrderItemSet>> getUserItemSets()", "full_signature": "public Map<Long, Set<OrderItemSet>> getUserItemSets()", "class_method_signature": "AbstractRecommender.getUserItemSets()", "testcase": false, "constructor": false}, {"identifier": "setUserItemSets", "parameters": "(Map<Long, Set<OrderItemSet>> userItemSets)", "modifiers": "public", "return": "void", "signature": "void setUserItemSets(Map<Long, Set<OrderItemSet>> userItemSets)", "full_signature": "public void setUserItemSets(Map<Long, Set<OrderItemSet>> userItemSets)", "class_method_signature": "AbstractRecommender.setUserItemSets(Map<Long, Set<OrderItemSet>> userItemSets)", "testcase": false, "constructor": false}, {"identifier": "createUserBuyingMatrix", "parameters": "(Map<Long, Set<OrderItemSet>> useritemsets)", "modifiers": "private static", "return": "Map<Long, Map<Long, Double>>", "signature": "Map<Long, Map<Long, Double>> createUserBuyingMatrix(Map<Long, Set<OrderItemSet>> useritemsets)", "full_signature": "private static Map<Long, Map<Long, Double>> createUserBuyingMatrix(Map<Long, Set<OrderItemSet>> useritemsets)", "class_method_signature": "AbstractRecommender.createUserBuyingMatrix(Map<Long, Set<OrderItemSet>> useritemsets)", "testcase": false, "constructor": false}], "file": "services/tools.descartes.teastore.recommender/src/main/java/tools/descartes/teastore/recommender/algorithm/AbstractRecommender.java"}, "focal_method": {"identifier": "train", "parameters": "(List<OrderItem> orderItems, List<Order> orders)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void train(List<OrderItem> orderItems, List<Order> orders) {\n\t\tlong tic = System.currentTimeMillis();\n\t\ttotalProducts = new HashSet<>();\n\t\t// first create order mapping unorderized\n\t\tMap<Long, OrderItemSet> unOrderizeditemSets = new HashMap<>();\n\t\tfor (OrderItem orderItem : orderItems) {\n\t\t\tif (!unOrderizeditemSets.containsKey(orderItem.getOrderId())) {\n\t\t\t\tunOrderizeditemSets.put(orderItem.getOrderId(), new OrderItemSet());\n\t\t\t\tunOrderizeditemSets.get(orderItem.getOrderId()).setOrderId(orderItem.getOrderId());\n\t\t\t}\n\t\t\tunOrderizeditemSets.get(orderItem.getOrderId()).getOrderset().put(orderItem.getProductId(),\n\t\t\t\t\torderItem.getQuantity());\n\t\t\t// see, if we already have our item\n\t\t\tif (!totalProducts.contains(orderItem.getProductId())) {\n\t\t\t\t// if not known yet -> add\n\t\t\t\ttotalProducts.add(orderItem.getProductId());\n\t\t\t}\n\t\t}\n\t\t// now map each id with the corresponding order\n\t\tMap<Order, OrderItemSet> itemSets = new HashMap<>();\n\t\tfor (Long orderid : unOrderizeditemSets.keySet()) {\n\t\t\tOrder realOrder = findOrder(orders, orderid);\n\t\t\titemSets.put(realOrder, unOrderizeditemSets.get(orderid));\n\t\t}\n\t\tuserItemSets = new HashMap<>();\n\t\tfor (Order order : itemSets.keySet()) {\n\t\t\tif (!userItemSets.containsKey(order.getUserId())) {\n\t\t\t\tuserItemSets.put(order.getUserId(), new HashSet<OrderItemSet>());\n\t\t\t}\n\t\t\titemSets.get(order).setUserId(order.getUserId());\n\t\t\tuserItemSets.get(order.getUserId()).add(itemSets.get(order));\n\t\t}\n\t\tuserBuyingMatrix = createUserBuyingMatrix(userItemSets);\n\t\texecutePreprocessing();\n\t\tLOG.info(\"Training recommender finished. Training took: \" + (System.currentTimeMillis() - tic) + \"ms.\");\n\t\ttrainingFinished = true;\n\t}", "signature": "void train(List<OrderItem> orderItems, List<Order> orders)", "full_signature": "@Override public void train(List<OrderItem> orderItems, List<Order> orders)", "class_method_signature": "AbstractRecommender.train(List<OrderItem> orderItems, List<Order> orders)", "testcase": false, "constructor": false, "invocations": ["currentTimeMillis", "containsKey", "getOrderId", "put", "getOrderId", "setOrderId", "get", "getOrderId", "getOrderId", "put", "getOrderset", "get", "getOrderId", "getProductId", "getQuantity", "contains", "getProductId", "add", "getProductId", "keySet", "findOrder", "put", "get", "keySet", "containsKey", "getUserId", "put", "getUserId", "setUserId", "get", "getUserId", "add", "get", "getUserId", "get", "createUserBuyingMatrix", "executePreprocessing", "info", "currentTimeMillis"]}, "repository": {"repo_id": 100679870, "url": "https://github.com/DescartesResearch/TeaStore", "language": "Java", "is_fork": false, "fork_count": 31, "stargazer_count": 43, "size": 91777, "license": "licensed"}}