{"test_class": {"identifier": "PlaceholdersTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String REPLACER_KEY_1 = \"my:arbitrary:replacer1\";", "modifier": "private static final", "type": "String", "declarator": "REPLACER_KEY_1 = \"my:arbitrary:replacer1\"", "var_name": "REPLACER_KEY_1"}, {"original_string": "private static final String REPLACER_1 = \"{{ \" + REPLACER_KEY_1 + \" }}\";", "modifier": "private static final", "type": "String", "declarator": "REPLACER_1 = \"{{ \" + REPLACER_KEY_1 + \" }}\"", "var_name": "REPLACER_1"}, {"original_string": "private static final String LEGACY_REPLACER_KEY = \"request.subjectId\";", "modifier": "private static final", "type": "String", "declarator": "LEGACY_REPLACER_KEY = \"request.subjectId\"", "var_name": "LEGACY_REPLACER_KEY"}, {"original_string": "private static final String LEGACY_REPLACER = \"${\" + LEGACY_REPLACER_KEY + \"}\";", "modifier": "private static final", "type": "String", "declarator": "LEGACY_REPLACER = \"${\" + LEGACY_REPLACER_KEY + \"}\"", "var_name": "LEGACY_REPLACER"}], "file": "model/base/src/test/java/org/eclipse/ditto/model/base/common/PlaceholdersTest.java"}, "test_case": {"identifier": "containsReturnsTrueWhenInputContainsPlaceholder", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void containsReturnsTrueWhenInputContainsPlaceholder() {\n        final String input = \"a\" + REPLACER_1 + \"z\";\n\n        final boolean contains = Placeholders.containsAnyPlaceholder(input);\n\n        assertThat(contains).isTrue();\n    }", "signature": "void containsReturnsTrueWhenInputContainsPlaceholder()", "full_signature": "@Test public void containsReturnsTrueWhenInputContainsPlaceholder()", "class_method_signature": "PlaceholdersTest.containsReturnsTrueWhenInputContainsPlaceholder()", "testcase": true, "constructor": false, "invocations": ["containsAnyPlaceholder", "isTrue", "assertThat"]}, "focal_class": {"identifier": "Placeholders", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PLACEHOLDER_GROUP_NAME = \"p\";", "modifier": "private static final", "type": "String", "declarator": "PLACEHOLDER_GROUP_NAME = \"p\"", "var_name": "PLACEHOLDER_GROUP_NAME"}, {"original_string": "private static final String LEGACY_PLACEHOLDER_GROUP_NAME = \"l\";", "modifier": "private static final", "type": "String", "declarator": "LEGACY_PLACEHOLDER_GROUP_NAME = \"l\"", "var_name": "LEGACY_PLACEHOLDER_GROUP_NAME"}, {"original_string": "private static final String LEGACY_PLACEHOLDER_SUBJECT_ID_GROUP_NAME = \"s\";", "modifier": "private static final", "type": "String", "declarator": "LEGACY_PLACEHOLDER_SUBJECT_ID_GROUP_NAME = \"s\"", "var_name": "LEGACY_PLACEHOLDER_SUBJECT_ID_GROUP_NAME"}, {"original_string": "private static final String PLACEHOLDER_START = Pattern.quote(\"{{\");", "modifier": "private static final", "type": "String", "declarator": "PLACEHOLDER_START = Pattern.quote(\"{{\")", "var_name": "PLACEHOLDER_START"}, {"original_string": "private static final String PLACEHOLDER_END = Pattern.quote(\"}}\");", "modifier": "private static final", "type": "String", "declarator": "PLACEHOLDER_END = Pattern.quote(\"}}\")", "var_name": "PLACEHOLDER_END"}, {"original_string": "private static final String PLACEHOLDER_GROUP = \"(?<\" + PLACEHOLDER_GROUP_NAME + \">((}[^}]|[^}])*+))\";", "modifier": "private static final", "type": "String", "declarator": "PLACEHOLDER_GROUP = \"(?<\" + PLACEHOLDER_GROUP_NAME + \">((}[^}]|[^}])*+))\"", "var_name": "PLACEHOLDER_GROUP"}, {"original_string": "private static final String LEGACY_PLACEHOLDER_GROUP = \"(?<\" + LEGACY_PLACEHOLDER_GROUP_NAME + \">([^}]*+))\";", "modifier": "private static final", "type": "String", "declarator": "LEGACY_PLACEHOLDER_GROUP = \"(?<\" + LEGACY_PLACEHOLDER_GROUP_NAME + \">([^}]*+))\"", "var_name": "LEGACY_PLACEHOLDER_GROUP"}, {"original_string": "private static final String ANY_NUMBER_OF_SPACES = \"\\\\s*+\";", "modifier": "private static final", "type": "String", "declarator": "ANY_NUMBER_OF_SPACES = \"\\\\s*+\"", "var_name": "ANY_NUMBER_OF_SPACES"}, {"original_string": "private static final String PLACEHOLDER_REGEX = PLACEHOLDER_START\n            + ANY_NUMBER_OF_SPACES // allow arbitrary number of spaces\n            + PLACEHOLDER_GROUP // the content of the placeholder\n            + ANY_NUMBER_OF_SPACES  // allow arbitrary number of spaces\n            + PLACEHOLDER_END;", "modifier": "private static final", "type": "String", "declarator": "PLACEHOLDER_REGEX = PLACEHOLDER_START\n            + ANY_NUMBER_OF_SPACES // allow arbitrary number of spaces\n            + PLACEHOLDER_GROUP // the content of the placeholder\n            + ANY_NUMBER_OF_SPACES  // allow arbitrary number of spaces\n            + PLACEHOLDER_END", "var_name": "PLACEHOLDER_REGEX"}, {"original_string": "private static final Pattern PLACEHOLDER_PATTERN = Pattern.compile(PLACEHOLDER_REGEX);", "modifier": "private static final", "type": "Pattern", "declarator": "PLACEHOLDER_PATTERN = Pattern.compile(PLACEHOLDER_REGEX)", "var_name": "PLACEHOLDER_PATTERN"}, {"original_string": "private static final String LEGACY_PLACEHOLDER_START = Pattern.quote(\"${\");", "modifier": "private static final", "type": "String", "declarator": "LEGACY_PLACEHOLDER_START = Pattern.quote(\"${\")", "var_name": "LEGACY_PLACEHOLDER_START"}, {"original_string": "private static final String LEGACY_PLACEHOLDER_END = Pattern.quote(\"}\");", "modifier": "private static final", "type": "String", "declarator": "LEGACY_PLACEHOLDER_END = Pattern.quote(\"}\")", "var_name": "LEGACY_PLACEHOLDER_END"}, {"original_string": "private static final String LEGACY_PLACEHOLDER_REGEX =\n            LEGACY_PLACEHOLDER_START + LEGACY_PLACEHOLDER_GROUP + LEGACY_PLACEHOLDER_END;", "modifier": "private static final", "type": "String", "declarator": "LEGACY_PLACEHOLDER_REGEX =\n            LEGACY_PLACEHOLDER_START + LEGACY_PLACEHOLDER_GROUP + LEGACY_PLACEHOLDER_END", "var_name": "LEGACY_PLACEHOLDER_REGEX"}, {"original_string": "private static final Pattern LEGACY_PLACEHOLDER_PATTERN = Pattern.compile(LEGACY_PLACEHOLDER_REGEX);", "modifier": "private static final", "type": "Pattern", "declarator": "LEGACY_PLACEHOLDER_PATTERN = Pattern.compile(LEGACY_PLACEHOLDER_REGEX)", "var_name": "LEGACY_PLACEHOLDER_PATTERN"}, {"original_string": "private static final Pattern ANY_PLACEHOLDER_PATTERN =\n            Pattern.compile(\"(?:\" + PLACEHOLDER_REGEX + \"|\" + LEGACY_PLACEHOLDER_REGEX + \")\");", "modifier": "private static final", "type": "Pattern", "declarator": "ANY_PLACEHOLDER_PATTERN =\n            Pattern.compile(\"(?:\" + PLACEHOLDER_REGEX + \"|\" + LEGACY_PLACEHOLDER_REGEX + \")\")", "var_name": "ANY_PLACEHOLDER_PATTERN"}], "methods": [{"identifier": "Placeholders", "parameters": "()", "modifiers": "private", "return": "", "signature": " Placeholders()", "full_signature": "private  Placeholders()", "class_method_signature": "Placeholders.Placeholders()", "testcase": false, "constructor": true}, {"identifier": "pattern", "parameters": "()", "modifiers": "public static", "return": "Pattern", "signature": "Pattern pattern()", "full_signature": "public static Pattern pattern()", "class_method_signature": "Placeholders.pattern()", "testcase": false, "constructor": false}, {"identifier": "groupNames", "parameters": "()", "modifiers": "public static", "return": "List<String>", "signature": "List<String> groupNames()", "full_signature": "public static List<String> groupNames()", "class_method_signature": "Placeholders.groupNames()", "testcase": false, "constructor": false}, {"identifier": "containsAnyPlaceholder", "parameters": "(final CharSequence input)", "modifiers": "public static", "return": "boolean", "signature": "boolean containsAnyPlaceholder(final CharSequence input)", "full_signature": "public static boolean containsAnyPlaceholder(final CharSequence input)", "class_method_signature": "Placeholders.containsAnyPlaceholder(final CharSequence input)", "testcase": false, "constructor": false}, {"identifier": "containsPlaceholder", "parameters": "(final CharSequence input)", "modifiers": "private static", "return": "boolean", "signature": "boolean containsPlaceholder(final CharSequence input)", "full_signature": "private static boolean containsPlaceholder(final CharSequence input)", "class_method_signature": "Placeholders.containsPlaceholder(final CharSequence input)", "testcase": false, "constructor": false}, {"identifier": "containsLegacyPlaceholder", "parameters": "(final CharSequence input)", "modifiers": "private static", "return": "boolean", "signature": "boolean containsLegacyPlaceholder(final CharSequence input)", "full_signature": "private static boolean containsLegacyPlaceholder(final CharSequence input)", "class_method_signature": "Placeholders.containsLegacyPlaceholder(final CharSequence input)", "testcase": false, "constructor": false}], "file": "model/base/src/main/java/org/eclipse/ditto/model/base/common/Placeholders.java"}, "focal_method": {"identifier": "containsAnyPlaceholder", "parameters": "(final CharSequence input)", "modifiers": "public static", "return": "boolean", "body": "public static boolean containsAnyPlaceholder(final CharSequence input) {\n        requireNonNull(input);\n        return containsPlaceholder(input) || containsLegacyPlaceholder(input);\n    }", "signature": "boolean containsAnyPlaceholder(final CharSequence input)", "full_signature": "public static boolean containsAnyPlaceholder(final CharSequence input)", "class_method_signature": "Placeholders.containsAnyPlaceholder(final CharSequence input)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "containsPlaceholder", "containsLegacyPlaceholder"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}