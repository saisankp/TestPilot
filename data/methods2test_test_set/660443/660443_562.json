{"test_class": {"identifier": "SMARTSQueryToolTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [], "file": "legacy/src/test/java/org/openscience/cdk/smiles/smarts/SMARTSQueryToolTest.java"}, "test_case": {"identifier": "nullAromaticity", "parameters": "()", "modifiers": "@Test(expected = NullPointerException.class) public", "return": "void", "body": "@Test(expected = NullPointerException.class)\n    public void nullAromaticity() {\n        SMARTSQueryTool sqt = new SMARTSQueryTool(\"CC\", DefaultChemObjectBuilder.getInstance());\n        sqt.setAromaticity(null);\n    }", "signature": "void nullAromaticity()", "full_signature": "@Test(expected = NullPointerException.class) public void nullAromaticity()", "class_method_signature": "SMARTSQueryToolTest.nullAromaticity()", "testcase": true, "constructor": false, "invocations": ["getInstance", "setAromaticity"]}, "focal_class": {"identifier": "SMARTSQueryTool", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static ILoggingTool logger        = LoggingToolFactory.createLoggingTool(SMARTSQueryTool.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger        = LoggingToolFactory.createLoggingTool(SMARTSQueryTool.class)", "var_name": "logger"}, {"original_string": "private String              smarts;", "modifier": "private", "type": "String", "declarator": "smarts", "var_name": "smarts"}, {"original_string": "private IAtomContainer      atomContainer = null;", "modifier": "private", "type": "IAtomContainer", "declarator": "atomContainer = null", "var_name": "atomContainer"}, {"original_string": "private QueryAtomContainer  query         = null;", "modifier": "private", "type": "QueryAtomContainer", "declarator": "query         = null", "var_name": "query"}, {"original_string": "private List<int[]>         mappings;", "modifier": "private", "type": "List<int[]>", "declarator": "mappings", "var_name": "mappings"}, {"original_string": "private RingSet                  ringSet         = RingSet.EssentialRings;", "modifier": "private", "type": "RingSet", "declarator": "ringSet         = RingSet.EssentialRings", "var_name": "ringSet"}, {"original_string": "private final IChemObjectBuilder builder;", "modifier": "private final", "type": "IChemObjectBuilder", "declarator": "builder", "var_name": "builder"}, {"original_string": "private Aromaticity              aromaticity     = new Aromaticity(ElectronDonation.daylight(),\n                                                             Cycles.allOrVertexShort());", "modifier": "private", "type": "Aromaticity", "declarator": "aromaticity     = new Aromaticity(ElectronDonation.daylight(),\n                                                             Cycles.allOrVertexShort())", "var_name": "aromaticity"}, {"original_string": "private boolean                  skipAromaticity = false;", "modifier": "private", "type": "boolean", "declarator": "skipAromaticity = false", "var_name": "skipAromaticity"}, {"original_string": "private int                      MAX_ENTRIES     = 20;", "modifier": "private", "type": "int", "declarator": "MAX_ENTRIES     = 20", "var_name": "MAX_ENTRIES"}, {"original_string": "Map<String, QueryAtomContainer>  cache           = new LinkedHashMap<String, QueryAtomContainer>(MAX_ENTRIES + 1,\n                                                             .75F, true) {\n\n                                                         @Override\n                                                         public boolean removeEldestEntry(Map.Entry eldest) {\n                                                             return size() > MAX_ENTRIES;\n                                                         }\n                                                     };", "modifier": "", "type": "Map<String, QueryAtomContainer>", "declarator": "cache           = new LinkedHashMap<String, QueryAtomContainer>(MAX_ENTRIES + 1,\n                                                             .75F, true) {\n\n                                                         @Override\n                                                         public boolean removeEldestEntry(Map.Entry eldest) {\n                                                             return size() > MAX_ENTRIES;\n                                                         }\n                                                     }", "var_name": "cache"}], "methods": [{"identifier": "SMARTSQueryTool", "parameters": "(String smarts, IChemObjectBuilder builder)", "modifiers": "public", "return": "", "signature": " SMARTSQueryTool(String smarts, IChemObjectBuilder builder)", "full_signature": "public  SMARTSQueryTool(String smarts, IChemObjectBuilder builder)", "class_method_signature": "SMARTSQueryTool.SMARTSQueryTool(String smarts, IChemObjectBuilder builder)", "testcase": false, "constructor": true}, {"identifier": "setQueryCacheSize", "parameters": "(int maxEntries)", "modifiers": "public", "return": "void", "signature": "void setQueryCacheSize(int maxEntries)", "full_signature": "public void setQueryCacheSize(int maxEntries)", "class_method_signature": "SMARTSQueryTool.setQueryCacheSize(int maxEntries)", "testcase": false, "constructor": false}, {"identifier": "useSmallestSetOfSmallestRings", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void useSmallestSetOfSmallestRings()", "full_signature": "public void useSmallestSetOfSmallestRings()", "class_method_signature": "SMARTSQueryTool.useSmallestSetOfSmallestRings()", "testcase": false, "constructor": false}, {"identifier": "useRelevantRings", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void useRelevantRings()", "full_signature": "public void useRelevantRings()", "class_method_signature": "SMARTSQueryTool.useRelevantRings()", "testcase": false, "constructor": false}, {"identifier": "useEssentialRings", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void useEssentialRings()", "full_signature": "public void useEssentialRings()", "class_method_signature": "SMARTSQueryTool.useEssentialRings()", "testcase": false, "constructor": false}, {"identifier": "setAromaticity", "parameters": "(Aromaticity aromaticity)", "modifiers": "public", "return": "void", "signature": "void setAromaticity(Aromaticity aromaticity)", "full_signature": "public void setAromaticity(Aromaticity aromaticity)", "class_method_signature": "SMARTSQueryTool.setAromaticity(Aromaticity aromaticity)", "testcase": false, "constructor": false}, {"identifier": "getSmarts", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSmarts()", "full_signature": "public String getSmarts()", "class_method_signature": "SMARTSQueryTool.getSmarts()", "testcase": false, "constructor": false}, {"identifier": "setSmarts", "parameters": "(String smarts)", "modifiers": "public", "return": "void", "signature": "void setSmarts(String smarts)", "full_signature": "public void setSmarts(String smarts)", "class_method_signature": "SMARTSQueryTool.setSmarts(String smarts)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(IAtomContainer atomContainer)", "modifiers": "public", "return": "boolean", "signature": "boolean matches(IAtomContainer atomContainer)", "full_signature": "public boolean matches(IAtomContainer atomContainer)", "class_method_signature": "SMARTSQueryTool.matches(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(IAtomContainer atomContainer, boolean forceInitialization)", "modifiers": "public", "return": "boolean", "signature": "boolean matches(IAtomContainer atomContainer, boolean forceInitialization)", "full_signature": "public boolean matches(IAtomContainer atomContainer, boolean forceInitialization)", "class_method_signature": "SMARTSQueryTool.matches(IAtomContainer atomContainer, boolean forceInitialization)", "testcase": false, "constructor": false}, {"identifier": "countMatches", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int countMatches()", "full_signature": "public int countMatches()", "class_method_signature": "SMARTSQueryTool.countMatches()", "testcase": false, "constructor": false}, {"identifier": "getMatchingAtoms", "parameters": "()", "modifiers": "public", "return": "List<List<Integer>>", "signature": "List<List<Integer>> getMatchingAtoms()", "full_signature": "public List<List<Integer>> getMatchingAtoms()", "class_method_signature": "SMARTSQueryTool.getMatchingAtoms()", "testcase": false, "constructor": false}, {"identifier": "getUniqueMatchingAtoms", "parameters": "()", "modifiers": "public", "return": "List<List<Integer>>", "signature": "List<List<Integer>> getUniqueMatchingAtoms()", "full_signature": "public List<List<Integer>> getUniqueMatchingAtoms()", "class_method_signature": "SMARTSQueryTool.getUniqueMatchingAtoms()", "testcase": false, "constructor": false}, {"identifier": "initializeMolecule", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initializeMolecule()", "full_signature": "private void initializeMolecule()", "class_method_signature": "SMARTSQueryTool.initializeMolecule()", "testcase": false, "constructor": false}, {"identifier": "initializeQuery", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initializeQuery()", "full_signature": "private void initializeQuery()", "class_method_signature": "SMARTSQueryTool.initializeQuery()", "testcase": false, "constructor": false}, {"identifier": "matchedAtoms", "parameters": "(List<List<RMap>> bondMapping, IAtomContainer atomContainer)", "modifiers": "private", "return": "List<Set<Integer>>", "signature": "List<Set<Integer>> matchedAtoms(List<List<RMap>> bondMapping, IAtomContainer atomContainer)", "full_signature": "private List<Set<Integer>> matchedAtoms(List<List<RMap>> bondMapping, IAtomContainer atomContainer)", "class_method_signature": "SMARTSQueryTool.matchedAtoms(List<List<RMap>> bondMapping, IAtomContainer atomContainer)", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/org/openscience/cdk/smiles/smarts/SMARTSQueryTool.java"}, "focal_method": {"identifier": "setAromaticity", "parameters": "(Aromaticity aromaticity)", "modifiers": "public", "return": "void", "body": "public void setAromaticity(Aromaticity aromaticity) {\n        this.aromaticity = checkNotNull(aromaticity, \"aromaticity was not provided\");\n    }", "signature": "void setAromaticity(Aromaticity aromaticity)", "full_signature": "public void setAromaticity(Aromaticity aromaticity)", "class_method_signature": "SMARTSQueryTool.setAromaticity(Aromaticity aromaticity)", "testcase": false, "constructor": false, "invocations": ["checkNotNull"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}