{"test_class": {"identifier": "StringsTest", "superclass": "extends ConcurrentTestCase", "interfaces": "", "fields": [], "file": "base/lang/src/test/java/leap/lang/StringsTest.java"}, "test_case": {"identifier": "testIsEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testIsEmpty() {\n\t\tassertEquals(true, Strings.isEmpty(null));\n\t\tassertEquals(true, Strings.isEmpty(\"\"));\n\t\tassertEquals(false, Strings.isEmpty(\" \"));\n\t\tassertEquals(false, Strings.isEmpty(\"foo\"));\n\t\tassertEquals(false, Strings.isEmpty(\"  foo  \"));\n\t}", "signature": "void testIsEmpty()", "full_signature": "@Test public void testIsEmpty()", "class_method_signature": "StringsTest.testIsEmpty()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "isEmpty", "assertEquals", "isEmpty", "assertEquals", "isEmpty", "assertEquals", "isEmpty", "assertEquals", "isEmpty"]}, "focal_class": {"identifier": "Strings", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String\tEMPTY = \"\";", "modifier": "public static final", "type": "String", "declarator": "EMPTY = \"\"", "var_name": "EMPTY"}, {"original_string": "public static final String  NULL  = \"null\";", "modifier": "public static final", "type": "String", "declarator": "NULL  = \"null\"", "var_name": "NULL"}, {"original_string": "public static final String\tCOMMA = \",\";", "modifier": "public static final", "type": "String", "declarator": "COMMA = \",\"", "var_name": "COMMA"}, {"original_string": "public static final char[]  DEFAULT_SPLIT_CHARS = new char[]{','};", "modifier": "public static final", "type": "char[]", "declarator": "DEFAULT_SPLIT_CHARS = new char[]{','}", "var_name": "DEFAULT_SPLIT_CHARS"}], "methods": [{"identifier": "nullToEmpty", "parameters": "(String string)", "modifiers": "public static", "return": "String", "signature": "String nullToEmpty(String string)", "full_signature": "public static String nullToEmpty(String string)", "class_method_signature": "Strings.nullToEmpty(String string)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(String string)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEmpty(String string)", "full_signature": "public static boolean isEmpty(String string)", "class_method_signature": "Strings.isEmpty(String string)", "testcase": false, "constructor": false}, {"identifier": "isAllEmpty", "parameters": "(String... strings)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAllEmpty(String... strings)", "full_signature": "public static boolean isAllEmpty(String... strings)", "class_method_signature": "Strings.isAllEmpty(String... strings)", "testcase": false, "constructor": false}, {"identifier": "isNotEmpty", "parameters": "(String string)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNotEmpty(String string)", "full_signature": "public static boolean isNotEmpty(String string)", "class_method_signature": "Strings.isNotEmpty(String string)", "testcase": false, "constructor": false}, {"identifier": "isBlank", "parameters": "(CharSequence string)", "modifiers": "public static", "return": "boolean", "signature": "boolean isBlank(CharSequence string)", "full_signature": "public static boolean isBlank(CharSequence string)", "class_method_signature": "Strings.isBlank(CharSequence string)", "testcase": false, "constructor": false}, {"identifier": "isNotBlank", "parameters": "(String string)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNotBlank(String string)", "full_signature": "public static boolean isNotBlank(String string)", "class_method_signature": "Strings.isNotBlank(String string)", "testcase": false, "constructor": false}, {"identifier": "isNullOrEmpty", "parameters": "(Object value)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNullOrEmpty(Object value)", "full_signature": "public static boolean isNullOrEmpty(Object value)", "class_method_signature": "Strings.isNullOrEmpty(Object value)", "testcase": false, "constructor": false}, {"identifier": "isNullOrBlank", "parameters": "(Object value)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNullOrBlank(Object value)", "full_signature": "public static boolean isNullOrBlank(Object value)", "class_method_signature": "Strings.isNullOrBlank(Object value)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(String string1, String string2)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals(String string1, String string2)", "full_signature": "public static boolean equals(String string1, String string2)", "class_method_signature": "Strings.equals(String string1, String string2)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(String string1, String string2, boolean ignoreCase)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals(String string1, String string2, boolean ignoreCase)", "full_signature": "public static boolean equals(String string1, String string2, boolean ignoreCase)", "class_method_signature": "Strings.equals(String string1, String string2, boolean ignoreCase)", "testcase": false, "constructor": false}, {"identifier": "equalsIgnoreCase", "parameters": "(String string1, String string2)", "modifiers": "public static", "return": "boolean", "signature": "boolean equalsIgnoreCase(String string1, String string2)", "full_signature": "public static boolean equalsIgnoreCase(String string1, String string2)", "class_method_signature": "Strings.equalsIgnoreCase(String string1, String string2)", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "(String s)", "modifiers": "public static", "return": "int", "signature": "int length(String s)", "full_signature": "public static int length(String s)", "class_method_signature": "Strings.length(String s)", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "(String str, char c)", "modifiers": "public static", "return": "int", "signature": "int count(String str, char c)", "full_signature": "public static int count(String str, char c)", "class_method_signature": "Strings.count(String str, char c)", "testcase": false, "constructor": false}, {"identifier": "firstNotEmpty", "parameters": "(String... strings)", "modifiers": "public static", "return": "String", "signature": "String firstNotEmpty(String... strings)", "full_signature": "public static String firstNotEmpty(String... strings)", "class_method_signature": "Strings.firstNotEmpty(String... strings)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(String template, Object... args)", "modifiers": "public static", "return": "String", "signature": "String format(String template, Object... args)", "full_signature": "public static String format(String template, Object... args)", "class_method_signature": "Strings.format(String template, Object... args)", "testcase": false, "constructor": false}, {"identifier": "trim", "parameters": "(String string)", "modifiers": "public static", "return": "String", "signature": "String trim(String string)", "full_signature": "public static String trim(String string)", "class_method_signature": "Strings.trim(String string)", "testcase": false, "constructor": false}, {"identifier": "trimStart", "parameters": "(String s)", "modifiers": "public static", "return": "String", "signature": "String trimStart(String s)", "full_signature": "public static String trimStart(String s)", "class_method_signature": "Strings.trimStart(String s)", "testcase": false, "constructor": false}, {"identifier": "trimStart", "parameters": "(String str, char... trimChars)", "modifiers": "public static", "return": "String", "signature": "String trimStart(String str, char... trimChars)", "full_signature": "public static String trimStart(String str, char... trimChars)", "class_method_signature": "Strings.trimStart(String str, char... trimChars)", "testcase": false, "constructor": false}, {"identifier": "trimEnd", "parameters": "(String s)", "modifiers": "public static", "return": "String", "signature": "String trimEnd(String s)", "full_signature": "public static String trimEnd(String s)", "class_method_signature": "Strings.trimEnd(String s)", "testcase": false, "constructor": false}, {"identifier": "trimEnd", "parameters": "(String str, char... trimChars)", "modifiers": "public static", "return": "String", "signature": "String trimEnd(String str, char... trimChars)", "full_signature": "public static String trimEnd(String str, char... trimChars)", "class_method_signature": "Strings.trimEnd(String str, char... trimChars)", "testcase": false, "constructor": false}, {"identifier": "trimToNull", "parameters": "(String string)", "modifiers": "public static", "return": "String", "signature": "String trimToNull(String string)", "full_signature": "public static String trimToNull(String string)", "class_method_signature": "Strings.trimToNull(String string)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(String string)", "modifiers": "public static", "return": "String[]", "signature": "String[] split(String string)", "full_signature": "public static String[] split(String string)", "class_method_signature": "Strings.split(String string)", "testcase": false, "constructor": false}, {"identifier": "splitCommaOrWhitespaces", "parameters": "(String s)", "modifiers": "public static", "return": "String[]", "signature": "String[] splitCommaOrWhitespaces(String s)", "full_signature": "public static String[] splitCommaOrWhitespaces(String s)", "class_method_signature": "Strings.splitCommaOrWhitespaces(String s)", "testcase": false, "constructor": false}, {"identifier": "splitWhitespaces", "parameters": "(String s)", "modifiers": "public static", "return": "String[]", "signature": "String[] splitWhitespaces(String s)", "full_signature": "public static String[] splitWhitespaces(String s)", "class_method_signature": "Strings.splitWhitespaces(String s)", "testcase": false, "constructor": false}, {"identifier": "splitMultiLines", "parameters": "(String string)", "modifiers": "public static", "return": "String[]", "signature": "String[] splitMultiLines(String string)", "full_signature": "public static String[] splitMultiLines(String string)", "class_method_signature": "Strings.splitMultiLines(String string)", "testcase": false, "constructor": false}, {"identifier": "splitMultiLines", "parameters": "(String string,char separator)", "modifiers": "public static", "return": "String[]", "signature": "String[] splitMultiLines(String string,char separator)", "full_signature": "public static String[] splitMultiLines(String string,char separator)", "class_method_signature": "Strings.splitMultiLines(String string,char separator)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(String string, char separator)", "modifiers": "public static", "return": "String[]", "signature": "String[] split(String string, char separator)", "full_signature": "public static String[] split(String string, char separator)", "class_method_signature": "Strings.split(String string, char separator)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(String string, char... separators)", "modifiers": "public static", "return": "String[]", "signature": "String[] split(String string, char... separators)", "full_signature": "public static String[] split(String string, char... separators)", "class_method_signature": "Strings.split(String string, char... separators)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(String string, String separator)", "modifiers": "public static", "return": "String[]", "signature": "String[] split(String string, String separator)", "full_signature": "public static String[] split(String string, String separator)", "class_method_signature": "Strings.split(String string, String separator)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(String string, char separator, boolean trim)", "modifiers": "public static", "return": "String[]", "signature": "String[] split(String string, char separator, boolean trim)", "full_signature": "public static String[] split(String string, char separator, boolean trim)", "class_method_signature": "Strings.split(String string, char separator, boolean trim)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(String string, char[] separators, boolean trim)", "modifiers": "public static", "return": "String[]", "signature": "String[] split(String string, char[] separators, boolean trim)", "full_signature": "public static String[] split(String string, char[] separators, boolean trim)", "class_method_signature": "Strings.split(String string, char[] separators, boolean trim)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(String string, String separator, boolean trim)", "modifiers": "public static", "return": "String[]", "signature": "String[] split(String string, String separator, boolean trim)", "full_signature": "public static String[] split(String string, String separator, boolean trim)", "class_method_signature": "Strings.split(String string, String separator, boolean trim)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(String string, String separator, boolean trim,boolean ignoreEmpty)", "modifiers": "public static", "return": "String[]", "signature": "String[] split(String string, String separator, boolean trim,boolean ignoreEmpty)", "full_signature": "public static String[] split(String string, String separator, boolean trim,boolean ignoreEmpty)", "class_method_signature": "Strings.split(String string, String separator, boolean trim,boolean ignoreEmpty)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(String string, char[] separators, boolean trim,boolean ignoreEmpty)", "modifiers": "public static", "return": "String[]", "signature": "String[] split(String string, char[] separators, boolean trim,boolean ignoreEmpty)", "full_signature": "public static String[] split(String string, char[] separators, boolean trim,boolean ignoreEmpty)", "class_method_signature": "Strings.split(String string, char[] separators, boolean trim,boolean ignoreEmpty)", "testcase": false, "constructor": false}, {"identifier": "replaceOnce", "parameters": "(String text, String oldString, String newString)", "modifiers": "public static", "return": "String", "signature": "String replaceOnce(String text, String oldString, String newString)", "full_signature": "public static String replaceOnce(String text, String oldString, String newString)", "class_method_signature": "Strings.replaceOnce(String text, String oldString, String newString)", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "(String text, String oldString, String newString)", "modifiers": "public static", "return": "String", "signature": "String replace(String text, String oldString, String newString)", "full_signature": "public static String replace(String text, String oldString, String newString)", "class_method_signature": "Strings.replace(String text, String oldString, String newString)", "testcase": false, "constructor": false}, {"identifier": "replaceIgnoreCase", "parameters": "(String text, String oldString, String newString)", "modifiers": "public static", "return": "String", "signature": "String replaceIgnoreCase(String text, String oldString, String newString)", "full_signature": "public static String replaceIgnoreCase(String text, String oldString, String newString)", "class_method_signature": "Strings.replaceIgnoreCase(String text, String oldString, String newString)", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "(String text, char oldChar, char newChar)", "modifiers": "public static", "return": "String", "signature": "String replace(String text, char oldChar, char newChar)", "full_signature": "public static String replace(String text, char oldChar, char newChar)", "class_method_signature": "Strings.replace(String text, char oldChar, char newChar)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(String string, String remove)", "modifiers": "public static", "return": "String", "signature": "String remove(String string, String remove)", "full_signature": "public static String remove(String string, String remove)", "class_method_signature": "Strings.remove(String string, String remove)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(String string, char remove)", "modifiers": "public static", "return": "String", "signature": "String remove(String string, char remove)", "full_signature": "public static String remove(String string, char remove)", "class_method_signature": "Strings.remove(String string, char remove)", "testcase": false, "constructor": false}, {"identifier": "removeBlank", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String removeBlank(String str)", "full_signature": "public static String removeBlank(String str)", "class_method_signature": "Strings.removeBlank(String str)", "testcase": false, "constructor": false}, {"identifier": "removeStart", "parameters": "(String string, String remove)", "modifiers": "public static", "return": "String", "signature": "String removeStart(String string, String remove)", "full_signature": "public static String removeStart(String string, String remove)", "class_method_signature": "Strings.removeStart(String string, String remove)", "testcase": false, "constructor": false}, {"identifier": "removeStartIgnoreCase", "parameters": "(String string, String remove)", "modifiers": "public static", "return": "String", "signature": "String removeStartIgnoreCase(String string, String remove)", "full_signature": "public static String removeStartIgnoreCase(String string, String remove)", "class_method_signature": "Strings.removeStartIgnoreCase(String string, String remove)", "testcase": false, "constructor": false}, {"identifier": "removeEnd", "parameters": "(String string, String remove)", "modifiers": "public static", "return": "String", "signature": "String removeEnd(String string, String remove)", "full_signature": "public static String removeEnd(String string, String remove)", "class_method_signature": "Strings.removeEnd(String string, String remove)", "testcase": false, "constructor": false}, {"identifier": "removeEndIgnoreCase", "parameters": "(String str, String remove)", "modifiers": "public static", "return": "String", "signature": "String removeEndIgnoreCase(String str, String remove)", "full_signature": "public static String removeEndIgnoreCase(String str, String remove)", "class_method_signature": "Strings.removeEndIgnoreCase(String str, String remove)", "testcase": false, "constructor": false}, {"identifier": "concat", "parameters": "(String... strs)", "modifiers": "public static", "return": "String", "signature": "String concat(String... strs)", "full_signature": "public static String concat(String... strs)", "class_method_signature": "Strings.concat(String... strs)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(Object[] array, char separator)", "modifiers": "public static", "return": "String", "signature": "String join(Object[] array, char separator)", "full_signature": "public static String join(Object[] array, char separator)", "class_method_signature": "Strings.join(Object[] array, char separator)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(Object[] array, String separator)", "modifiers": "public static", "return": "String", "signature": "String join(Object[] array, String separator)", "full_signature": "public static String join(Object[] array, String separator)", "class_method_signature": "Strings.join(Object[] array, String separator)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(Object[] array,String separator,boolean ignoreEmpty)", "modifiers": "public static", "return": "String", "signature": "String join(Object[] array,String separator,boolean ignoreEmpty)", "full_signature": "public static String join(Object[] array,String separator,boolean ignoreEmpty)", "class_method_signature": "Strings.join(Object[] array,String separator,boolean ignoreEmpty)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(Iterator<?> iterator, char separator)", "modifiers": "public static", "return": "String", "signature": "String join(Iterator<?> iterator, char separator)", "full_signature": "public static String join(Iterator<?> iterator, char separator)", "class_method_signature": "Strings.join(Iterator<?> iterator, char separator)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(Iterator<?> iterator, String separator)", "modifiers": "public static", "return": "String", "signature": "String join(Iterator<?> iterator, String separator)", "full_signature": "public static String join(Iterator<?> iterator, String separator)", "class_method_signature": "Strings.join(Iterator<?> iterator, String separator)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(Iterable<?> iterable, char separator)", "modifiers": "public static", "return": "String", "signature": "String join(Iterable<?> iterable, char separator)", "full_signature": "public static String join(Iterable<?> iterable, char separator)", "class_method_signature": "Strings.join(Iterable<?> iterable, char separator)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(Iterable<?> iterable, String separator)", "modifiers": "public static", "return": "String", "signature": "String join(Iterable<?> iterable, String separator)", "full_signature": "public static String join(Iterable<?> iterable, String separator)", "class_method_signature": "Strings.join(Iterable<?> iterable, String separator)", "testcase": false, "constructor": false}, {"identifier": "upperFirst", "parameters": "(String string)", "modifiers": "public static", "return": "String", "signature": "String upperFirst(String string)", "full_signature": "public static String upperFirst(String string)", "class_method_signature": "Strings.upperFirst(String string)", "testcase": false, "constructor": false}, {"identifier": "lowerFirst", "parameters": "(String string)", "modifiers": "public static", "return": "String", "signature": "String lowerFirst(String string)", "full_signature": "public static String lowerFirst(String string)", "class_method_signature": "Strings.lowerFirst(String string)", "testcase": false, "constructor": false}, {"identifier": "upperCase", "parameters": "(String string)", "modifiers": "public static", "return": "String", "signature": "String upperCase(String string)", "full_signature": "public static String upperCase(String string)", "class_method_signature": "Strings.upperCase(String string)", "testcase": false, "constructor": false}, {"identifier": "lowerCase", "parameters": "(String string)", "modifiers": "public static", "return": "String", "signature": "String lowerCase(String string)", "full_signature": "public static String lowerCase(String string)", "class_method_signature": "Strings.lowerCase(String string)", "testcase": false, "constructor": false}, {"identifier": "lowerCamel", "parameters": "(String string, char seperator)", "modifiers": "public static", "return": "String", "signature": "String lowerCamel(String string, char seperator)", "full_signature": "public static String lowerCamel(String string, char seperator)", "class_method_signature": "Strings.lowerCamel(String string, char seperator)", "testcase": false, "constructor": false}, {"identifier": "lowerCamel", "parameters": "(String... parts)", "modifiers": "public static", "return": "String", "signature": "String lowerCamel(String... parts)", "full_signature": "public static String lowerCamel(String... parts)", "class_method_signature": "Strings.lowerCamel(String... parts)", "testcase": false, "constructor": false}, {"identifier": "upperCamel", "parameters": "(String string, char seperator)", "modifiers": "public static", "return": "String", "signature": "String upperCamel(String string, char seperator)", "full_signature": "public static String upperCamel(String string, char seperator)", "class_method_signature": "Strings.upperCamel(String string, char seperator)", "testcase": false, "constructor": false}, {"identifier": "upperCamel", "parameters": "(String... parts)", "modifiers": "public static", "return": "String", "signature": "String upperCamel(String... parts)", "full_signature": "public static String upperCamel(String... parts)", "class_method_signature": "Strings.upperCamel(String... parts)", "testcase": false, "constructor": false}, {"identifier": "lowerUnderscore", "parameters": "(String name)", "modifiers": "public static", "return": "String", "signature": "String lowerUnderscore(String name)", "full_signature": "public static String lowerUnderscore(String name)", "class_method_signature": "Strings.lowerUnderscore(String name)", "testcase": false, "constructor": false}, {"identifier": "lowerHyphen", "parameters": "(String name)", "modifiers": "public static", "return": "String", "signature": "String lowerHyphen(String name)", "full_signature": "public static String lowerHyphen(String name)", "class_method_signature": "Strings.lowerHyphen(String name)", "testcase": false, "constructor": false}, {"identifier": "lowerSplit", "parameters": "(String name, char c)", "modifiers": "protected static", "return": "String", "signature": "String lowerSplit(String name, char c)", "full_signature": "protected static String lowerSplit(String name, char c)", "class_method_signature": "Strings.lowerSplit(String name, char c)", "testcase": false, "constructor": false}, {"identifier": "startsWith", "parameters": "(String string, String startsWith)", "modifiers": "public static", "return": "boolean", "signature": "boolean startsWith(String string, String startsWith)", "full_signature": "public static boolean startsWith(String string, String startsWith)", "class_method_signature": "Strings.startsWith(String string, String startsWith)", "testcase": false, "constructor": false}, {"identifier": "startsWithIgnoreCase", "parameters": "(String string, String startsWith)", "modifiers": "public static", "return": "boolean", "signature": "boolean startsWithIgnoreCase(String string, String startsWith)", "full_signature": "public static boolean startsWithIgnoreCase(String string, String startsWith)", "class_method_signature": "Strings.startsWithIgnoreCase(String string, String startsWith)", "testcase": false, "constructor": false}, {"identifier": "startsWith", "parameters": "(String str, String prefix, boolean ignoreCase)", "modifiers": "public static", "return": "boolean", "signature": "boolean startsWith(String str, String prefix, boolean ignoreCase)", "full_signature": "public static boolean startsWith(String str, String prefix, boolean ignoreCase)", "class_method_signature": "Strings.startsWith(String str, String prefix, boolean ignoreCase)", "testcase": false, "constructor": false}, {"identifier": "endsWith", "parameters": "(String string, String endsWith)", "modifiers": "public static", "return": "boolean", "signature": "boolean endsWith(String string, String endsWith)", "full_signature": "public static boolean endsWith(String string, String endsWith)", "class_method_signature": "Strings.endsWith(String string, String endsWith)", "testcase": false, "constructor": false}, {"identifier": "endsWithIgnoreCase", "parameters": "(String string, String endsWith)", "modifiers": "public static", "return": "boolean", "signature": "boolean endsWithIgnoreCase(String string, String endsWith)", "full_signature": "public static boolean endsWithIgnoreCase(String string, String endsWith)", "class_method_signature": "Strings.endsWithIgnoreCase(String string, String endsWith)", "testcase": false, "constructor": false}, {"identifier": "endsWith", "parameters": "(String str, String suffix, boolean ignoreCase)", "modifiers": "public static", "return": "boolean", "signature": "boolean endsWith(String str, String suffix, boolean ignoreCase)", "full_signature": "public static boolean endsWith(String str, String suffix, boolean ignoreCase)", "class_method_signature": "Strings.endsWith(String str, String suffix, boolean ignoreCase)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(String string, char c)", "modifiers": "public static", "return": "boolean", "signature": "boolean contains(String string, char c)", "full_signature": "public static boolean contains(String string, char c)", "class_method_signature": "Strings.contains(String string, char c)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(String string, String contains)", "modifiers": "public static", "return": "boolean", "signature": "boolean contains(String string, String contains)", "full_signature": "public static boolean contains(String string, String contains)", "class_method_signature": "Strings.contains(String string, String contains)", "testcase": false, "constructor": false}, {"identifier": "containsWhitespaces", "parameters": "(CharSequence cs)", "modifiers": "public static", "return": "boolean", "signature": "boolean containsWhitespaces(CharSequence cs)", "full_signature": "public static boolean containsWhitespaces(CharSequence cs)", "class_method_signature": "Strings.containsWhitespaces(CharSequence cs)", "testcase": false, "constructor": false}, {"identifier": "containsIgnoreCase", "parameters": "(String string,String contains)", "modifiers": "public static", "return": "boolean", "signature": "boolean containsIgnoreCase(String string,String contains)", "full_signature": "public static boolean containsIgnoreCase(String string,String contains)", "class_method_signature": "Strings.containsIgnoreCase(String string,String contains)", "testcase": false, "constructor": false}, {"identifier": "indexOfWhitespace", "parameters": "(String s)", "modifiers": "public static", "return": "int", "signature": "int indexOfWhitespace(String s)", "full_signature": "public static int indexOfWhitespace(String s)", "class_method_signature": "Strings.indexOfWhitespace(String s)", "testcase": false, "constructor": false}, {"identifier": "indexOf", "parameters": "(String string,String indexOf)", "modifiers": "public static", "return": "int", "signature": "int indexOf(String string,String indexOf)", "full_signature": "public static int indexOf(String string,String indexOf)", "class_method_signature": "Strings.indexOf(String string,String indexOf)", "testcase": false, "constructor": false}, {"identifier": "indexOf", "parameters": "(String string,String indexOf,int fromIndex)", "modifiers": "public static", "return": "int", "signature": "int indexOf(String string,String indexOf,int fromIndex)", "full_signature": "public static int indexOf(String string,String indexOf,int fromIndex)", "class_method_signature": "Strings.indexOf(String string,String indexOf,int fromIndex)", "testcase": false, "constructor": false}, {"identifier": "indexOfIgnoreCase", "parameters": "(String string,String indexOf)", "modifiers": "public static", "return": "int", "signature": "int indexOfIgnoreCase(String string,String indexOf)", "full_signature": "public static int indexOfIgnoreCase(String string,String indexOf)", "class_method_signature": "Strings.indexOfIgnoreCase(String string,String indexOf)", "testcase": false, "constructor": false}, {"identifier": "indexOfIgnoreCase", "parameters": "(String string,String indexOf,int fromIndex)", "modifiers": "public static", "return": "int", "signature": "int indexOfIgnoreCase(String string,String indexOf,int fromIndex)", "full_signature": "public static int indexOfIgnoreCase(String string,String indexOf,int fromIndex)", "class_method_signature": "Strings.indexOfIgnoreCase(String string,String indexOf,int fromIndex)", "testcase": false, "constructor": false}, {"identifier": "lastIndexOf", "parameters": "(String string,String indexOf)", "modifiers": "public static", "return": "int", "signature": "int lastIndexOf(String string,String indexOf)", "full_signature": "public static int lastIndexOf(String string,String indexOf)", "class_method_signature": "Strings.lastIndexOf(String string,String indexOf)", "testcase": false, "constructor": false}, {"identifier": "lastIndexOf", "parameters": "(String string,String indexOf,int fromIndex)", "modifiers": "public static", "return": "int", "signature": "int lastIndexOf(String string,String indexOf,int fromIndex)", "full_signature": "public static int lastIndexOf(String string,String indexOf,int fromIndex)", "class_method_signature": "Strings.lastIndexOf(String string,String indexOf,int fromIndex)", "testcase": false, "constructor": false}, {"identifier": "lastIndexOfIgnoreCase", "parameters": "(String string, String indexOf)", "modifiers": "public static", "return": "int", "signature": "int lastIndexOfIgnoreCase(String string, String indexOf)", "full_signature": "public static int lastIndexOfIgnoreCase(String string, String indexOf)", "class_method_signature": "Strings.lastIndexOfIgnoreCase(String string, String indexOf)", "testcase": false, "constructor": false}, {"identifier": "lastIndexOfIgnoreCase", "parameters": "(String string, String indexOf, int fromIndex)", "modifiers": "public static", "return": "int", "signature": "int lastIndexOfIgnoreCase(String string, String indexOf, int fromIndex)", "full_signature": "public static int lastIndexOfIgnoreCase(String string, String indexOf, int fromIndex)", "class_method_signature": "Strings.lastIndexOfIgnoreCase(String string, String indexOf, int fromIndex)", "testcase": false, "constructor": false}, {"identifier": "substringBefore", "parameters": "(String string,String indexOf)", "modifiers": "public static", "return": "String", "signature": "String substringBefore(String string,String indexOf)", "full_signature": "public static String substringBefore(String string,String indexOf)", "class_method_signature": "Strings.substringBefore(String string,String indexOf)", "testcase": false, "constructor": false}, {"identifier": "substringAfter", "parameters": "(String string,String indexOf)", "modifiers": "public static", "return": "String", "signature": "String substringAfter(String string,String indexOf)", "full_signature": "public static String substringAfter(String string,String indexOf)", "class_method_signature": "Strings.substringAfter(String string,String indexOf)", "testcase": false, "constructor": false}, {"identifier": "left", "parameters": "(String string, int len)", "modifiers": "public static", "return": "String", "signature": "String left(String string, int len)", "full_signature": "public static String left(String string, int len)", "class_method_signature": "Strings.left(String string, int len)", "testcase": false, "constructor": false}, {"identifier": "right", "parameters": "(String string, int len)", "modifiers": "public static", "return": "String", "signature": "String right(String string, int len)", "full_signature": "public static String right(String string, int len)", "class_method_signature": "Strings.right(String string, int len)", "testcase": false, "constructor": false}, {"identifier": "abbreviate", "parameters": "(String str, int maxWidth)", "modifiers": "public static", "return": "String", "signature": "String abbreviate(String str, int maxWidth)", "full_signature": "public static String abbreviate(String str, int maxWidth)", "class_method_signature": "Strings.abbreviate(String str, int maxWidth)", "testcase": false, "constructor": false}, {"identifier": "abbreviate", "parameters": "(String str, int maxWidth, String abrevMarker)", "modifiers": "public static", "return": "String", "signature": "String abbreviate(String str, int maxWidth, String abrevMarker)", "full_signature": "public static String abbreviate(String str, int maxWidth, String abrevMarker)", "class_method_signature": "Strings.abbreviate(String str, int maxWidth, String abrevMarker)", "testcase": false, "constructor": false}, {"identifier": "abbreviateMiddle", "parameters": "(String str, int maxWidth)", "modifiers": "public static", "return": "String", "signature": "String abbreviateMiddle(String str, int maxWidth)", "full_signature": "public static String abbreviateMiddle(String str, int maxWidth)", "class_method_signature": "Strings.abbreviateMiddle(String str, int maxWidth)", "testcase": false, "constructor": false}, {"identifier": "abbreviate", "parameters": "(String str, int offset, int maxWidth, String abrevMarker)", "modifiers": "static", "return": "String", "signature": "String abbreviate(String str, int offset, int maxWidth, String abrevMarker)", "full_signature": "static String abbreviate(String str, int offset, int maxWidth, String abrevMarker)", "class_method_signature": "Strings.abbreviate(String str, int offset, int maxWidth, String abrevMarker)", "testcase": false, "constructor": false}, {"identifier": "abbreviateMiddle", "parameters": "(String str, String middle, int length)", "modifiers": "public static", "return": "String", "signature": "String abbreviateMiddle(String str, String middle, int length)", "full_signature": "public static String abbreviateMiddle(String str, String middle, int length)", "class_method_signature": "Strings.abbreviateMiddle(String str, String middle, int length)", "testcase": false, "constructor": false}, {"identifier": "abbreviatePrefix", "parameters": "(String str, int prefixLength, int length, String abrevMarker)", "modifiers": "public static", "return": "String", "signature": "String abbreviatePrefix(String str, int prefixLength, int length, String abrevMarker)", "full_signature": "public static String abbreviatePrefix(String str, int prefixLength, int length, String abrevMarker)", "class_method_signature": "Strings.abbreviatePrefix(String str, int prefixLength, int length, String abrevMarker)", "testcase": false, "constructor": false}, {"identifier": "repeat", "parameters": "(char ch, int repeat)", "modifiers": "public static", "return": "String", "signature": "String repeat(char ch, int repeat)", "full_signature": "public static String repeat(char ch, int repeat)", "class_method_signature": "Strings.repeat(char ch, int repeat)", "testcase": false, "constructor": false}, {"identifier": "repeat", "parameters": "(String string, int count)", "modifiers": "public static", "return": "String", "signature": "String repeat(String string, int count)", "full_signature": "public static String repeat(String string, int count)", "class_method_signature": "Strings.repeat(String string, int count)", "testcase": false, "constructor": false}, {"identifier": "isDigits", "parameters": "(String cs)", "modifiers": "public static", "return": "boolean", "signature": "boolean isDigits(String cs)", "full_signature": "public static boolean isDigits(String cs)", "class_method_signature": "Strings.isDigits(String cs)", "testcase": false, "constructor": false}, {"identifier": "isLetters", "parameters": "(String s)", "modifiers": "public static", "return": "boolean", "signature": "boolean isLetters(String s)", "full_signature": "public static boolean isLetters(String s)", "class_method_signature": "Strings.isLetters(String s)", "testcase": false, "constructor": false}, {"identifier": "isNumber", "parameters": "(String str)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNumber(String str)", "full_signature": "public static boolean isNumber(String str)", "class_method_signature": "Strings.isNumber(String str)", "testcase": false, "constructor": false}, {"identifier": "newString", "parameters": "(byte[] bytes, String charsetName)", "modifiers": "public static", "return": "String", "signature": "String newString(byte[] bytes, String charsetName)", "full_signature": "public static String newString(byte[] bytes, String charsetName)", "class_method_signature": "Strings.newString(byte[] bytes, String charsetName)", "testcase": false, "constructor": false}, {"identifier": "newStringIso8859_1", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "String", "signature": "String newStringIso8859_1(byte[] bytes)", "full_signature": "public static String newStringIso8859_1(byte[] bytes)", "class_method_signature": "Strings.newStringIso8859_1(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "newStringUsAscii", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "String", "signature": "String newStringUsAscii(byte[] bytes)", "full_signature": "public static String newStringUsAscii(byte[] bytes)", "class_method_signature": "Strings.newStringUsAscii(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "newStringUtf8", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "String", "signature": "String newStringUtf8(byte[] bytes)", "full_signature": "public static String newStringUtf8(byte[] bytes)", "class_method_signature": "Strings.newStringUtf8(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "getBytes", "parameters": "(String str, String charset)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] getBytes(String str, String charset)", "full_signature": "public static byte[] getBytes(String str, String charset)", "class_method_signature": "Strings.getBytes(String str, String charset)", "testcase": false, "constructor": false}, {"identifier": "getBytesIso8859_1", "parameters": "(String string)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] getBytesIso8859_1(String string)", "full_signature": "public static byte[] getBytesIso8859_1(String string)", "class_method_signature": "Strings.getBytesIso8859_1(String string)", "testcase": false, "constructor": false}, {"identifier": "getBytesUsAscii", "parameters": "(String string)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] getBytesUsAscii(String string)", "full_signature": "public static byte[] getBytesUsAscii(String string)", "class_method_signature": "Strings.getBytesUsAscii(String string)", "testcase": false, "constructor": false}, {"identifier": "getBytesUtf8", "parameters": "(String string)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] getBytesUtf8(String string)", "full_signature": "public static byte[] getBytesUtf8(String string)", "class_method_signature": "Strings.getBytesUtf8(String string)", "testcase": false, "constructor": false}, {"identifier": "splitWorker", "parameters": "(String str,int max, boolean preserveAllTokens,boolean trimTokens,boolean ignoreEmptyTokens,char... chars)", "modifiers": "private static", "return": "String[]", "signature": "String[] splitWorker(String str,int max, boolean preserveAllTokens,boolean trimTokens,boolean ignoreEmptyTokens,char... chars)", "full_signature": "private static String[] splitWorker(String str,int max, boolean preserveAllTokens,boolean trimTokens,boolean ignoreEmptyTokens,char... chars)", "class_method_signature": "Strings.splitWorker(String str,int max, boolean preserveAllTokens,boolean trimTokens,boolean ignoreEmptyTokens,char... chars)", "testcase": false, "constructor": false}, {"identifier": "splitByWholeSeparatorWorker", "parameters": "(String str, String separator, int max, boolean preserveAllTokens, boolean trimTokens,\n\t        boolean ignoreEmptyTokens)", "modifiers": "private static", "return": "String[]", "signature": "String[] splitByWholeSeparatorWorker(String str, String separator, int max, boolean preserveAllTokens, boolean trimTokens,\n\t        boolean ignoreEmptyTokens)", "full_signature": "private static String[] splitByWholeSeparatorWorker(String str, String separator, int max, boolean preserveAllTokens, boolean trimTokens,\n\t        boolean ignoreEmptyTokens)", "class_method_signature": "Strings.splitByWholeSeparatorWorker(String str, String separator, int max, boolean preserveAllTokens, boolean trimTokens,\n\t        boolean ignoreEmptyTokens)", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "(String text, String oldString, String newString, int max)", "modifiers": "private static", "return": "String", "signature": "String replace(String text, String oldString, String newString, int max)", "full_signature": "private static String replace(String text, String oldString, String newString, int max)", "class_method_signature": "Strings.replace(String text, String oldString, String newString, int max)", "testcase": false, "constructor": false}, {"identifier": "replaceIgnoreCase", "parameters": "(String text, String oldString, String newString, int max)", "modifiers": "private static", "return": "String", "signature": "String replaceIgnoreCase(String text, String oldString, String newString, int max)", "full_signature": "private static String replaceIgnoreCase(String text, String oldString, String newString, int max)", "class_method_signature": "Strings.replaceIgnoreCase(String text, String oldString, String newString, int max)", "testcase": false, "constructor": false}, {"identifier": "Strings", "parameters": "()", "modifiers": "protected", "return": "", "signature": " Strings()", "full_signature": "protected  Strings()", "class_method_signature": "Strings.Strings()", "testcase": false, "constructor": true}], "file": "base/lang/src/main/java/leap/lang/Strings.java"}, "focal_method": {"identifier": "isEmpty", "parameters": "(String string)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isEmpty(String string) {\n\t\treturn string == null || string.length() == 0;\n\t}", "signature": "boolean isEmpty(String string)", "full_signature": "public static boolean isEmpty(String string)", "class_method_signature": "Strings.isEmpty(String string)", "testcase": false, "constructor": false, "invocations": ["length"]}, "repository": {"repo_id": 48562236, "url": "https://github.com/leapframework/framework", "stars": 42, "created": "12/25/2015 1:54:52 AM +00:00", "updates": "2020-01-20T03:04:15+00:00", "fork": "False", "license": "licensed"}}