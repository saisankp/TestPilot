{"test_class": {"identifier": "AbstractAttributeTest", "superclass": "", "interfaces": "", "fields": [], "file": "code/src/test/java/com/googlecode/cqengine/attribute/support/AbstractAttributeTest.java"}, "test_case": {"identifier": "testReadGenericAttributeType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReadGenericAttributeType() throws Exception {\n        //noinspection AssertEqualsBetweenInconvertibleTypes\n        Assert.assertEquals(String.class, AbstractAttribute.readGenericAttributeType(ValidAttribute.class, \"foo\"));\n        //noinspection AssertEqualsBetweenInconvertibleTypes\n        Assert.assertEquals(List.class, AbstractAttribute.readGenericAttributeType(ValidAttributeWithParameterizedTypes.class, \"foo\"));\n    }", "signature": "void testReadGenericAttributeType()", "full_signature": "@Test public void testReadGenericAttributeType()", "class_method_signature": "AbstractAttributeTest.testReadGenericAttributeType()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "readGenericAttributeType", "assertEquals", "readGenericAttributeType"]}, "focal_class": {"identifier": "AbstractAttribute", "superclass": "", "interfaces": "implements Attribute<O, A>", "fields": [{"original_string": "private final Class<O> objectType;", "modifier": "private final", "type": "Class<O>", "declarator": "objectType", "var_name": "objectType"}, {"original_string": "private final Class<A> attributeType;", "modifier": "private final", "type": "Class<A>", "declarator": "attributeType", "var_name": "attributeType"}, {"original_string": "private final String attributeName;", "modifier": "private final", "type": "String", "declarator": "attributeName", "var_name": "attributeName"}, {"original_string": "private final int cachedHashCode;", "modifier": "private final", "type": "int", "declarator": "cachedHashCode", "var_name": "cachedHashCode"}], "methods": [{"identifier": "AbstractAttribute", "parameters": "()", "modifiers": "public", "return": "", "signature": " AbstractAttribute()", "full_signature": "public  AbstractAttribute()", "class_method_signature": "AbstractAttribute.AbstractAttribute()", "testcase": false, "constructor": true}, {"identifier": "AbstractAttribute", "parameters": "(String attributeName)", "modifiers": "public", "return": "", "signature": " AbstractAttribute(String attributeName)", "full_signature": "public  AbstractAttribute(String attributeName)", "class_method_signature": "AbstractAttribute.AbstractAttribute(String attributeName)", "testcase": false, "constructor": true}, {"identifier": "AbstractAttribute", "parameters": "(Class<O> objectType, Class<A> attributeType)", "modifiers": "protected", "return": "", "signature": " AbstractAttribute(Class<O> objectType, Class<A> attributeType)", "full_signature": "protected  AbstractAttribute(Class<O> objectType, Class<A> attributeType)", "class_method_signature": "AbstractAttribute.AbstractAttribute(Class<O> objectType, Class<A> attributeType)", "testcase": false, "constructor": true}, {"identifier": "AbstractAttribute", "parameters": "(Class<O> objectType, Class<A> attributeType, String attributeName)", "modifiers": "protected", "return": "", "signature": " AbstractAttribute(Class<O> objectType, Class<A> attributeType, String attributeName)", "full_signature": "protected  AbstractAttribute(Class<O> objectType, Class<A> attributeType, String attributeName)", "class_method_signature": "AbstractAttribute.AbstractAttribute(Class<O> objectType, Class<A> attributeType, String attributeName)", "testcase": false, "constructor": true}, {"identifier": "getObjectType", "parameters": "()", "modifiers": "@Override public", "return": "Class<O>", "signature": "Class<O> getObjectType()", "full_signature": "@Override public Class<O> getObjectType()", "class_method_signature": "AbstractAttribute.getObjectType()", "testcase": false, "constructor": false}, {"identifier": "getAttributeType", "parameters": "()", "modifiers": "@Override public", "return": "Class<A>", "signature": "Class<A> getAttributeType()", "full_signature": "@Override public Class<A> getAttributeType()", "class_method_signature": "AbstractAttribute.getAttributeType()", "testcase": false, "constructor": false}, {"identifier": "getAttributeName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getAttributeName()", "full_signature": "@Override public String getAttributeName()", "class_method_signature": "AbstractAttribute.getAttributeName()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "AbstractAttribute.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "AbstractAttribute.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "canEqual", "parameters": "(Object other)", "modifiers": "public", "return": "boolean", "signature": "boolean canEqual(Object other)", "full_signature": "public boolean canEqual(Object other)", "class_method_signature": "AbstractAttribute.canEqual(Object other)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "AbstractAttribute.hashCode()", "testcase": false, "constructor": false}, {"identifier": "calcHashCode", "parameters": "()", "modifiers": "protected", "return": "int", "signature": "int calcHashCode()", "full_signature": "protected int calcHashCode()", "class_method_signature": "AbstractAttribute.calcHashCode()", "testcase": false, "constructor": false}, {"identifier": "readGenericObjectType", "parameters": "(Class<?> attributeClass, String attributeName)", "modifiers": "static", "return": "Class<O>", "signature": "Class<O> readGenericObjectType(Class<?> attributeClass, String attributeName)", "full_signature": "static Class<O> readGenericObjectType(Class<?> attributeClass, String attributeName)", "class_method_signature": "AbstractAttribute.readGenericObjectType(Class<?> attributeClass, String attributeName)", "testcase": false, "constructor": false}, {"identifier": "readGenericAttributeType", "parameters": "(Class<?> attributeClass, String attributeName)", "modifiers": "static", "return": "Class<A>", "signature": "Class<A> readGenericAttributeType(Class<?> attributeClass, String attributeName)", "full_signature": "static Class<A> readGenericAttributeType(Class<?> attributeClass, String attributeName)", "class_method_signature": "AbstractAttribute.readGenericAttributeType(Class<?> attributeClass, String attributeName)", "testcase": false, "constructor": false}], "file": "code/src/main/java/com/googlecode/cqengine/attribute/support/AbstractAttribute.java"}, "focal_method": {"identifier": "readGenericAttributeType", "parameters": "(Class<?> attributeClass, String attributeName)", "modifiers": "static", "return": "Class<A>", "body": "static <A> Class<A> readGenericAttributeType(Class<?> attributeClass, String attributeName) {\n        try {\n            ParameterizedType superclass = (ParameterizedType) attributeClass.getGenericSuperclass();\n            Type actualType = superclass.getActualTypeArguments()[1];\n            Class<A> cls;\n            if (actualType instanceof ParameterizedType) {\n                ParameterizedType parameterizedType = (ParameterizedType)actualType;\n                @SuppressWarnings({\"unchecked\", \"UnnecessaryLocalVariable\"})\n                Class<A> actualClass = (Class<A>) parameterizedType.getRawType();\n                cls = actualClass;\n            }\n            else {\n                @SuppressWarnings({\"unchecked\", \"UnnecessaryLocalVariable\"})\n                Class<A> actualClass = (Class<A>) actualType;\n                cls = actualClass;\n            }\n            return cls;\n        }\n        catch (Exception e) {\n            String attributeClassStr = attributeName.startsWith(\"<Unnamed attribute, class \") ? \"\" : \" (\" + attributeClass + \")\";\n            throw new IllegalStateException(\"Attribute '\" + attributeName + \"'\" + attributeClassStr + \" is invalid, cannot read generic type information from it. Attributes should typically EITHER be declared in code with generic type information as a (possibly anonymous) subclass of one of the provided attribute types, OR you can use a constructor of the attribute which allows the types to be specified manually.\");\n        }\n    }", "signature": "Class<A> readGenericAttributeType(Class<?> attributeClass, String attributeName)", "full_signature": "static Class<A> readGenericAttributeType(Class<?> attributeClass, String attributeName)", "class_method_signature": "AbstractAttribute.readGenericAttributeType(Class<?> attributeClass, String attributeName)", "testcase": false, "constructor": false, "invocations": ["getGenericSuperclass", "getActualTypeArguments", "getRawType", "startsWith"]}, "repository": {"repo_id": 41263775, "url": "https://github.com/npgall/cqengine", "language": "Java", "is_fork": false, "fork_count": 180, "stargazer_count": 1194, "size": 11701, "license": "licensed"}}