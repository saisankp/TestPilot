{"test_class": {"identifier": "WalletApiImplTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [{"original_string": "protected final Authentication valid = Authentication\n      .of(KeyAlias.of(randomUUID().toString().replace(\"-\", \"\")), randomUUID().toString());", "modifier": "protected final", "type": "Authentication", "declarator": "valid = Authentication\n      .of(KeyAlias.of(randomUUID().toString().replace(\"-\", \"\")), randomUUID().toString())", "var_name": "valid"}, {"original_string": "protected final AergoKey key = new AergoKeyGenerator().create();", "modifier": "protected final", "type": "AergoKey", "declarator": "key = new AergoKeyGenerator().create()", "var_name": "key"}], "file": "client/wallet/src/test/java/hera/wallet/WalletApiImplTest.java"}, "test_case": {"identifier": "shouldUnlockTwiceFail", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldUnlockTwiceFail() {\n    try {\n      // given\n      final WalletApi walletApi = supplyWalletApi();\n      walletApi.unlock(valid);\n      // when\n      walletApi.unlock(valid);\n      fail();\n    } catch (Exception e) {\n      // then\n    }\n  }", "signature": "void shouldUnlockTwiceFail()", "full_signature": "@Test public void shouldUnlockTwiceFail()", "class_method_signature": "WalletApiImplTest.shouldUnlockTwiceFail()", "testcase": true, "constructor": false, "invocations": ["supplyWalletApi", "unlock", "unlock", "fail"]}, "focal_class": {"identifier": "WalletApiImpl", "superclass": "extends AbstractApi", "interfaces": "implements WalletApi, Signer", "fields": [{"original_string": "protected final KeyStore keyStore;", "modifier": "protected final", "type": "KeyStore", "declarator": "keyStore", "var_name": "keyStore"}, {"original_string": "protected final NonceProvider nonceProvider;", "modifier": "protected final", "type": "NonceProvider", "declarator": "nonceProvider", "var_name": "nonceProvider"}, {"original_string": "protected final TxRequester txRequester;", "modifier": "protected final", "type": "TxRequester", "declarator": "txRequester", "var_name": "txRequester"}, {"original_string": "protected final Object lock = new Object();", "modifier": "protected final", "type": "Object", "declarator": "lock = new Object()", "var_name": "lock"}, {"original_string": "protected final ProxySigner proxySigner = new ProxySigner();", "modifier": "protected final", "type": "ProxySigner", "declarator": "proxySigner = new ProxySigner()", "var_name": "proxySigner"}], "methods": [{"identifier": "WalletApiImpl", "parameters": "(final KeyStore keyStore, final TryCountAndInterval tryCountAndInterval)", "modifiers": "", "return": "", "signature": " WalletApiImpl(final KeyStore keyStore, final TryCountAndInterval tryCountAndInterval)", "full_signature": "  WalletApiImpl(final KeyStore keyStore, final TryCountAndInterval tryCountAndInterval)", "class_method_signature": "WalletApiImpl.WalletApiImpl(final KeyStore keyStore, final TryCountAndInterval tryCountAndInterval)", "testcase": false, "constructor": true}, {"identifier": "bind", "parameters": "(final AergoClient aergoClient)", "modifiers": "@Override public", "return": "void", "signature": "void bind(final AergoClient aergoClient)", "full_signature": "@Override public void bind(final AergoClient aergoClient)", "class_method_signature": "WalletApiImpl.bind(final AergoClient aergoClient)", "testcase": false, "constructor": false}, {"identifier": "with", "parameters": "(final AergoClient aergoClient)", "modifiers": "@Override public", "return": "PreparedWalletApi", "signature": "PreparedWalletApi with(final AergoClient aergoClient)", "full_signature": "@Override public PreparedWalletApi with(final AergoClient aergoClient)", "class_method_signature": "WalletApiImpl.with(final AergoClient aergoClient)", "testcase": false, "constructor": false}, {"identifier": "unlock", "parameters": "(final Authentication authentication)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean unlock(final Authentication authentication)", "full_signature": "@Override public boolean unlock(final Authentication authentication)", "class_method_signature": "WalletApiImpl.unlock(final Authentication authentication)", "testcase": false, "constructor": false}, {"identifier": "lock", "parameters": "(final Authentication authentication)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean lock(final Authentication authentication)", "full_signature": "@Override public boolean lock(final Authentication authentication)", "class_method_signature": "WalletApiImpl.lock(final Authentication authentication)", "testcase": false, "constructor": false}, {"identifier": "lock", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean lock()", "full_signature": "@Override public boolean lock()", "class_method_signature": "WalletApiImpl.lock()", "testcase": false, "constructor": false}, {"identifier": "transactionApi", "parameters": "()", "modifiers": "@Override public", "return": "TransactionApi", "signature": "TransactionApi transactionApi()", "full_signature": "@Override public TransactionApi transactionApi()", "class_method_signature": "WalletApiImpl.transactionApi()", "testcase": false, "constructor": false}, {"identifier": "queryApi", "parameters": "()", "modifiers": "@Override public", "return": "QueryApi", "signature": "QueryApi queryApi()", "full_signature": "@Override public QueryApi queryApi()", "class_method_signature": "WalletApiImpl.queryApi()", "testcase": false, "constructor": false}, {"identifier": "sign", "parameters": "(final RawTransaction rawTransaction)", "modifiers": "@Override public", "return": "Transaction", "signature": "Transaction sign(final RawTransaction rawTransaction)", "full_signature": "@Override public Transaction sign(final RawTransaction rawTransaction)", "class_method_signature": "WalletApiImpl.sign(final RawTransaction rawTransaction)", "testcase": false, "constructor": false}, {"identifier": "signMessage", "parameters": "(final BytesValue message)", "modifiers": "@Override public", "return": "Signature", "signature": "Signature signMessage(final BytesValue message)", "full_signature": "@Override public Signature signMessage(final BytesValue message)", "class_method_signature": "WalletApiImpl.signMessage(final BytesValue message)", "testcase": false, "constructor": false}, {"identifier": "signMessage", "parameters": "(final Hash hashedMessage)", "modifiers": "@Override public", "return": "Signature", "signature": "Signature signMessage(final Hash hashedMessage)", "full_signature": "@Override public Signature signMessage(final Hash hashedMessage)", "class_method_signature": "WalletApiImpl.signMessage(final Hash hashedMessage)", "testcase": false, "constructor": false}, {"identifier": "getPrincipal", "parameters": "()", "modifiers": "@Override public", "return": "AccountAddress", "signature": "AccountAddress getPrincipal()", "full_signature": "@Override public AccountAddress getPrincipal()", "class_method_signature": "WalletApiImpl.getPrincipal()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "WalletApiImpl.toString()", "testcase": false, "constructor": false}], "file": "client/wallet/src/main/java/hera/wallet/WalletApiImpl.java"}, "focal_method": {"identifier": "unlock", "parameters": "(final Authentication authentication)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n  public boolean unlock(final Authentication authentication) {\n    try {\n      assertNotNull(authentication, \"Authentication must not null\");\n      logger.debug(\"Unlock with {}\", authentication);\n\n      synchronized (lock) {\n        if (this.proxySigner.isUnlocked()) {\n          throw new HerajException(\"Lock already unlocked one\");\n        }\n\n        this.proxySigner.setUnlocked(keyStore.load(authentication));\n      }\n      return true;\n    } catch (InvalidAuthenticationException e) {\n      return false;\n    } catch (Exception e) {\n      throw converter.convert(e);\n    }\n  }", "signature": "boolean unlock(final Authentication authentication)", "full_signature": "@Override public boolean unlock(final Authentication authentication)", "class_method_signature": "WalletApiImpl.unlock(final Authentication authentication)", "testcase": false, "constructor": false, "invocations": ["assertNotNull", "debug", "isUnlocked", "setUnlocked", "load", "convert"]}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}