{"test_class": {"identifier": "LanguageStatsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String JAVA = \"java\";", "modifier": "private static final", "type": "String", "declarator": "JAVA = \"java\"", "var_name": "JAVA"}, {"original_string": "private static final String PYTHON = \"python\";", "modifier": "private static final", "type": "String", "declarator": "PYTHON = \"python\"", "var_name": "PYTHON"}], "file": "catwatch-backend/src/test/java/org/zalando/catwatch/backend/util/LanguageStatsTest.java"}, "test_case": {"identifier": "thatStatsAreBuildForTwoProjectsOfDifferentLanguageAndSameSnapshotDate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void thatStatsAreBuildForTwoProjectsOfDifferentLanguageAndSameSnapshotDate() {\n        Date snapshotDate = new Date();\n\n        Project javaProject = new Project();\n        javaProject.setName(\"Project 1\");\n        javaProject.setPrimaryLanguage(JAVA);\n        javaProject.setSnapshotDate(snapshotDate);\n\n        Project pythonProject = new Project();\n        pythonProject.setName(\"Project 2\");\n        pythonProject.setPrimaryLanguage(PYTHON);\n        pythonProject.setSnapshotDate(snapshotDate);\n\n        List<LanguageStats> listOfLanguageStats = LanguageStats.buildStats(Lists.newArrayList(javaProject, pythonProject));\n\n        assertThat(listOfLanguageStats.size(), is(2));\n\n        assertThat(listOfLanguageStats,\n                hasItem(new LanguageStatsMatcher(JAVA, Lists.newArrayList(1), Lists.newArrayList(snapshotDate))));\n\n        assertThat(listOfLanguageStats,\n                hasItem(new LanguageStatsMatcher(PYTHON, Lists.newArrayList(1), Lists.newArrayList(snapshotDate))));\n    }", "signature": "void thatStatsAreBuildForTwoProjectsOfDifferentLanguageAndSameSnapshotDate()", "full_signature": "@Test public void thatStatsAreBuildForTwoProjectsOfDifferentLanguageAndSameSnapshotDate()", "class_method_signature": "LanguageStatsTest.thatStatsAreBuildForTwoProjectsOfDifferentLanguageAndSameSnapshotDate()", "testcase": true, "constructor": false, "invocations": ["setName", "setPrimaryLanguage", "setSnapshotDate", "setName", "setPrimaryLanguage", "setSnapshotDate", "buildStats", "newArrayList", "assertThat", "size", "is", "assertThat", "hasItem", "newArrayList", "newArrayList", "assertThat", "hasItem", "newArrayList", "newArrayList"]}, "focal_class": {"identifier": "LanguageStats", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(LanguageStats.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(LanguageStats.class)", "var_name": "logger"}, {"original_string": "private String languageName;", "modifier": "private", "type": "String", "declarator": "languageName", "var_name": "languageName"}, {"original_string": "private List<Integer> projectCounts;", "modifier": "private", "type": "List<Integer>", "declarator": "projectCounts", "var_name": "projectCounts"}, {"original_string": "private List<Date> snapshotDates;", "modifier": "private", "type": "List<Date>", "declarator": "snapshotDates", "var_name": "snapshotDates"}, {"original_string": "public static String UNKNOWN = \"unknown\";", "modifier": "public static", "type": "String", "declarator": "UNKNOWN = \"unknown\"", "var_name": "UNKNOWN"}], "methods": [{"identifier": "LanguageStats", "parameters": "(String languageName, List<Integer> projectCounts, List<Date> snapshotDates)", "modifiers": "public", "return": "", "signature": " LanguageStats(String languageName, List<Integer> projectCounts, List<Date> snapshotDates)", "full_signature": "public  LanguageStats(String languageName, List<Integer> projectCounts, List<Date> snapshotDates)", "class_method_signature": "LanguageStats.LanguageStats(String languageName, List<Integer> projectCounts, List<Date> snapshotDates)", "testcase": false, "constructor": true}, {"identifier": "buildStats", "parameters": "(List<Project> projectList)", "modifiers": "public static", "return": "List<LanguageStats>", "signature": "List<LanguageStats> buildStats(List<Project> projectList)", "full_signature": "public static List<LanguageStats> buildStats(List<Project> projectList)", "class_method_signature": "LanguageStats.buildStats(List<Project> projectList)", "testcase": false, "constructor": false}, {"identifier": "filterUniqueSnapshots", "parameters": "(List<Project> projects)", "modifiers": "public static", "return": "List<Project>", "signature": "List<Project> filterUniqueSnapshots(List<Project> projects)", "full_signature": "public static List<Project> filterUniqueSnapshots(List<Project> projects)", "class_method_signature": "LanguageStats.filterUniqueSnapshots(List<Project> projects)", "testcase": false, "constructor": false}, {"identifier": "getLanguageName", "parameters": "()", "modifiers": "@JsonProperty(value=\"name\") public", "return": "String", "signature": "String getLanguageName()", "full_signature": "@JsonProperty(value=\"name\") public String getLanguageName()", "class_method_signature": "LanguageStats.getLanguageName()", "testcase": false, "constructor": false}, {"identifier": "getProjectCounts", "parameters": "()", "modifiers": "@JsonProperty(value=\"project_counts\") public", "return": "List<Integer>", "signature": "List<Integer> getProjectCounts()", "full_signature": "@JsonProperty(value=\"project_counts\") public List<Integer> getProjectCounts()", "class_method_signature": "LanguageStats.getProjectCounts()", "testcase": false, "constructor": false}, {"identifier": "getSnapshotDates", "parameters": "()", "modifiers": "@JsonProperty(value=\"snapshot_dates\") @JsonSerialize(using = JsonDateListSerializer.class) public", "return": "List<Date>", "signature": "List<Date> getSnapshotDates()", "full_signature": "@JsonProperty(value=\"snapshot_dates\") @JsonSerialize(using = JsonDateListSerializer.class) public List<Date> getSnapshotDates()", "class_method_signature": "LanguageStats.getSnapshotDates()", "testcase": false, "constructor": false}], "file": "catwatch-backend/src/main/java/org/zalando/catwatch/backend/util/LanguageStats.java"}, "focal_method": {"identifier": "buildStats", "parameters": "(List<Project> projectList)", "modifiers": "public static", "return": "List<LanguageStats>", "body": "public static List<LanguageStats> buildStats(List<Project> projectList) {\n        List<Project> projects = filterUniqueSnapshots(projectList);\n\n        // For each date, we have a map of all the counts. Later we piece the\n        // results together from these pieces of information.\n        Map<Date, Map<String,Integer>> counts = new HashMap<>();\n        TreeSet<Date> dates = new TreeSet<>();\n        Set<String> languages = new HashSet<>();\n\n        for (Project p: projects) {\n            String language = p.getPrimaryLanguage();\n            Date date = p.getSnapshotDate();\n\n            if (language == null)\n                language = \"unknown\";\n\n            dates.add(date);\n            languages.add(language);\n\n            Map<String,Integer> hist = counts.get(date);\n            if (hist == null) {\n                hist = new HashMap<>();\n                counts.put(date, hist);\n            }\n\n            if (hist.containsKey(language)) {\n                hist.put(language, hist.get(language) + 1);\n            } else {\n                hist.put(language, 1);\n            }\n        }\n\n        List<LanguageStats> result = new ArrayList<>();\n        for (String l: languages) {\n            List<Integer> projectCounts = new ArrayList<>();\n            List<Date> snapshotDates = new ArrayList<>(dates);\n\n            for(Date d: snapshotDates) {\n                Integer i = counts.get(d).get(l);\n                if (i == null) {\n                    projectCounts.add(0);\n                } else {\n                    projectCounts.add(i);\n                }\n            }\n            result.add(new LanguageStats(l, projectCounts, snapshotDates));\n        }\n        return result;\n    }", "signature": "List<LanguageStats> buildStats(List<Project> projectList)", "full_signature": "public static List<LanguageStats> buildStats(List<Project> projectList)", "class_method_signature": "LanguageStats.buildStats(List<Project> projectList)", "testcase": false, "constructor": false, "invocations": ["filterUniqueSnapshots", "getPrimaryLanguage", "getSnapshotDate", "add", "add", "get", "put", "containsKey", "put", "get", "put", "get", "get", "add", "add", "add"]}, "repository": {"repo_id": 35957836, "url": "https://github.com/zalando-incubator/catwatch", "language": "Java", "is_fork": false, "fork_count": 20, "stargazer_count": 55, "size": 1999, "license": "licensed"}}