{"test_class": {"identifier": "CrescentHighlighterTest", "superclass": "extends CrescentTestCaseUtil", "interfaces": "", "fields": [], "file": "crescent_core_web/src/test/java/com/tistory/devyongsik/crescent/search/highlight/CrescentHighlighterTest.java"}, "test_case": {"identifier": "testVectorHighlighter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void testVectorHighlighter() throws Exception {\n        Directory dir = new RAMDirectory();\n        IndexWriter indexWriter \n        \t= new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_44, new WhitespaceAnalyzer(Version.LUCENE_44)));\n \n        Document doc = new Document();\n        FieldType fieldType = new FieldType();\n\t\tfieldType.setIndexed(true);\n\t\tfieldType.setStored(true);\n\t\tfieldType.setTokenized(true);\n\t\tfieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n\t\tfieldType.setStoreTermVectors(true);\n\t\t\t\n        Field f1 = new Field(\"_id\", \"1\", fieldType);\n        Field f2 = new Field(\"content\", \"the big \uc0bc\uc131\uc804\uc790\uc5f0\uad6c\uc6d0. dog\", fieldType);\n   \n        doc.add(f1);\n        doc.add(f2);\n        \n        indexWriter.addDocument(doc);\n        \n        indexWriter.commit();\n        indexWriter.close();\n        \n        DirectoryReader reader = DirectoryReader.open(dir);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        TopDocs topDocs = searcher.search(new TermQuery(new Term(\"_id\", \"1\")), 1);\n \n        System.out.println(topDocs.totalHits);\n         \n        FastVectorHighlighter highlighter = new FastVectorHighlighter();\n        String fragment = highlighter.getBestFragment(highlighter.getFieldQuery(new TermQuery(new Term(\"content\", \"big\"))),\n        \t\treader, topDocs.scoreDocs[0].doc, \"content\", 200);\n       \n        System.out.println(fragment);\n    }", "signature": "void testVectorHighlighter()", "full_signature": "@Test public void testVectorHighlighter()", "class_method_signature": "CrescentHighlighterTest.testVectorHighlighter()", "testcase": true, "constructor": false, "invocations": ["setIndexed", "setStored", "setTokenized", "setIndexOptions", "setStoreTermVectors", "add", "add", "addDocument", "commit", "close", "open", "search", "println", "getBestFragment", "getFieldQuery", "println"]}, "focal_class": {"identifier": "CrescentHighlighter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Logger logger = LoggerFactory.getLogger(CrescentHighlighter.class);", "modifier": "private", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CrescentHighlighter.class)", "var_name": "logger"}, {"original_string": "private SimpleHTMLFormatter formatter = new SimpleHTMLFormatter(\"<b>\",\"</b>\");", "modifier": "private", "type": "SimpleHTMLFormatter", "declarator": "formatter = new SimpleHTMLFormatter(\"<b>\",\"</b>\")", "var_name": "formatter"}], "methods": [{"identifier": "getBestFragment", "parameters": "(CrescentCollectionField field, String value, Query query, Analyzer analyzer)", "modifiers": "public", "return": "String", "signature": "String getBestFragment(CrescentCollectionField field, String value, Query query, Analyzer analyzer)", "full_signature": "public String getBestFragment(CrescentCollectionField field, String value, Query query, Analyzer analyzer)", "class_method_signature": "CrescentHighlighter.getBestFragment(CrescentCollectionField field, String value, Query query, Analyzer analyzer)", "testcase": false, "constructor": false}], "file": "crescent_core_web/src/main/java/com/tistory/devyongsik/crescent/search/highlight/CrescentHighlighter.java"}, "focal_method": {"identifier": "getBestFragment", "parameters": "(CrescentCollectionField field, String value, Query query, Analyzer analyzer)", "modifiers": "public", "return": "String", "body": "public String getBestFragment(CrescentCollectionField field, String value, Query query, Analyzer analyzer) throws CrescentInvalidRequestException {\n\t\tString fragment = \"\";\n\n\t\tlogger.debug(\"fieldName : {}\", field.getName());\n\n\t\ttry {\n\t\t\t\n\t\t\tlogger.debug(\"query for highlighter : {}\" , query);\n\n\t\t\tQueryScorer scorer = new QueryScorer(query);\n\n\t\t\tHighlighter highlighter = new Highlighter(formatter, scorer);\n\t\t\thighlighter.setTextFragmenter(new SimpleFragmenter(50));\n\n\n\t\t\tTokenStream stream = analyzer.tokenStream(field.getName(), new StringReader(value));\n\t\t\tfragment = highlighter.getBestFragments(stream, value, 1, \"...\");\n\n\t\t\tif(fragment == null || \"\".equals(fragment)) {\n\t\t\t\tif(value.length() > 100) {\n\t\t\t\t\tfragment = value.substring(0,100);\n\t\t\t\t} else {\n\t\t\t\t\tfragment = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn fragment;\n\t\t\t\n\t\t} catch (IOException e) {\n\n\t\t\tlogger.error(\"error in crescent highlighter\", e);\n\n\t\t\treturn value;\n\t\t\t\n\t\t} catch (InvalidTokenOffsetsException e) {\n\n\t\t\tlogger.error(\"error in crescent highlighter\", e);\n\n\t\t\treturn value;\n\t\t}\n\n\t}", "signature": "String getBestFragment(CrescentCollectionField field, String value, Query query, Analyzer analyzer)", "full_signature": "public String getBestFragment(CrescentCollectionField field, String value, Query query, Analyzer analyzer)", "class_method_signature": "CrescentHighlighter.getBestFragment(CrescentCollectionField field, String value, Query query, Analyzer analyzer)", "testcase": false, "constructor": false, "invocations": ["debug", "getName", "debug", "setTextFragmenter", "tokenStream", "getName", "getBestFragments", "equals", "length", "substring", "error", "error"]}, "repository": {"repo_id": 5426789, "url": "https://github.com/need4spd/crescent", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 15, "size": 50982, "license": "licensed"}}