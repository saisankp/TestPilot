{"test_class": {"identifier": "DERPathTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/ldaptive/asn1/DERPathTest.java"}, "test_case": {"identifier": "testHashcode", "parameters": "()", "modifiers": "@Test(groups = \"asn1\") public", "return": "void", "body": "@Test(groups = \"asn1\")\n  public void testHashcode()\n    throws Exception\n  {\n    Assert.assertEquals(new DERPath(\"/SEQ[0]/OCTSTR[1]\").hashCode(), new DERPath(\"/SEQ[0]/OCTSTR[1]\").hashCode());\n    Assert.assertFalse(new DERPath(\"/SEQ[0]/OCTSTR[1]\").hashCode() == new DERPath(\"/SEQ[0]/OCTSTR[2]\").hashCode());\n    Assert.assertFalse(new DERPath(\"/SEQ[0]/OCTSTR[1]\").hashCode() == new DERPath(\"/SEQ/OCTSTR[2]\").hashCode());\n  }", "signature": "void testHashcode()", "full_signature": "@Test(groups = \"asn1\") public void testHashcode()", "class_method_signature": "DERPathTest.testHashcode()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "hashCode", "hashCode", "assertFalse", "hashCode", "hashCode", "assertFalse", "hashCode", "hashCode"]}, "focal_class": {"identifier": "DERPath", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String PATH_SEPARATOR = \"/\";", "modifier": "public static final", "type": "String", "declarator": "PATH_SEPARATOR = \"/\"", "var_name": "PATH_SEPARATOR"}, {"original_string": "private static final Pattern NODE_PATTERN;", "modifier": "private static final", "type": "Pattern", "declarator": "NODE_PATTERN", "var_name": "NODE_PATTERN"}, {"original_string": "private static final int HASH_CODE_SEED = 601;", "modifier": "private static final", "type": "int", "declarator": "HASH_CODE_SEED = 601", "var_name": "HASH_CODE_SEED"}, {"original_string": "private final Deque<Node> nodeStack = new ArrayDeque<>();", "modifier": "private final", "type": "Deque<Node>", "declarator": "nodeStack = new ArrayDeque<>()", "var_name": "nodeStack"}], "methods": [{"identifier": "DERPath", "parameters": "()", "modifiers": "public", "return": "", "signature": " DERPath()", "full_signature": "public  DERPath()", "class_method_signature": "DERPath.DERPath()", "testcase": false, "constructor": true}, {"identifier": "DERPath", "parameters": "(final DERPath path)", "modifiers": "public", "return": "", "signature": " DERPath(final DERPath path)", "full_signature": "public  DERPath(final DERPath path)", "class_method_signature": "DERPath.DERPath(final DERPath path)", "testcase": false, "constructor": true}, {"identifier": "DERPath", "parameters": "(final String pathSpec)", "modifiers": "public", "return": "", "signature": " DERPath(final String pathSpec)", "full_signature": "public  DERPath(final String pathSpec)", "class_method_signature": "DERPath.DERPath(final String pathSpec)", "testcase": false, "constructor": true}, {"identifier": "pushNode", "parameters": "(final String name)", "modifiers": "public", "return": "DERPath", "signature": "DERPath pushNode(final String name)", "full_signature": "public DERPath pushNode(final String name)", "class_method_signature": "DERPath.pushNode(final String name)", "testcase": false, "constructor": false}, {"identifier": "pushNode", "parameters": "(final String name, final int index)", "modifiers": "public", "return": "DERPath", "signature": "DERPath pushNode(final String name, final int index)", "full_signature": "public DERPath pushNode(final String name, final int index)", "class_method_signature": "DERPath.pushNode(final String name, final int index)", "testcase": false, "constructor": false}, {"identifier": "peekNode", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String peekNode()", "full_signature": "public String peekNode()", "class_method_signature": "DERPath.peekNode()", "testcase": false, "constructor": false}, {"identifier": "popNode", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String popNode()", "full_signature": "public String popNode()", "class_method_signature": "DERPath.popNode()", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSize()", "full_signature": "public int getSize()", "class_method_signature": "DERPath.getSize()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "DERPath.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "DERPath.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DERPath.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DERPath.toString()", "testcase": false, "constructor": false}, {"identifier": "toNode", "parameters": "(final String node)", "modifiers": "static", "return": "Node", "signature": "Node toNode(final String node)", "full_signature": "static Node toNode(final String node)", "class_method_signature": "DERPath.toNode(final String node)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/ldaptive/asn1/DERPath.java"}, "focal_method": {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n  public int hashCode()\n  {\n    int hc = HASH_CODE_SEED;\n    for (Node n : nodeStack) {\n      hc = HASH_CODE_SEED * hc + n.hashCode();\n    }\n    return hc;\n  }", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DERPath.hashCode()", "testcase": false, "constructor": false, "invocations": ["hashCode"]}, "repository": {"repo_id": 25927306, "url": "https://github.com/vt-middleware/ldaptive", "stars": 32, "created": "10/29/2014 3:27:31 PM +00:00", "updates": "2020-01-14T22:18:12+00:00", "fork": "False", "license": "licensed"}}