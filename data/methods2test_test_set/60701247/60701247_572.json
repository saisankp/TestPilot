{"test_class": {"identifier": "LineChartTest", "superclass": "", "interfaces": "", "fields": [], "file": "adt-ui/src/test/java/com/android/tools/adtui/chart/linechart/LineChartTest.java"}, "test_case": {"identifier": "testNoRenderWithEmptyRange", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testNoRenderWithEmptyRange() {\n    // Ensures that if the LineChartModel hasn't had a chance to update and the yRange remains zero - then the LineChart would not render\n    // any data.\n    LineChartModel model = new LineChartModel();\n    Range xRange = new Range(0, 10);\n    Range yRange = new Range(0, 0);\n    DefaultDataSeries<Long> testSeries = new DefaultDataSeries<>();\n    for (int i = 0; i < 11; i++) {\n      testSeries.add(i, (long)i);\n    }\n    RangedContinuousSeries rangedSeries = new RangedContinuousSeries(\"test\", xRange, yRange, testSeries);\n    model.add(rangedSeries);\n\n    LineChart chart = new LineChart(model);\n    chart.setSize(100, 100);\n    Graphics2D fakeGraphics = mock(Graphics2D.class);\n    when(fakeGraphics.create()).thenReturn(fakeGraphics);\n    doThrow(new AssertionError()).when(fakeGraphics).draw(any(Shape.class));\n    chart.paint(fakeGraphics);\n  }", "signature": "void testNoRenderWithEmptyRange()", "full_signature": "@Test public void testNoRenderWithEmptyRange()", "class_method_signature": "LineChartTest.testNoRenderWithEmptyRange()", "testcase": true, "constructor": false, "invocations": ["add", "add", "setSize", "mock", "thenReturn", "when", "create", "draw", "when", "doThrow", "any", "paint"]}, "focal_class": {"identifier": "LineChart", "superclass": "extends AnimatedComponent", "interfaces": "", "fields": [{"original_string": "static final float EPSILON = 1e-4f;", "modifier": "static final", "type": "float", "declarator": "EPSILON = 1e-4f", "var_name": "EPSILON"}, {"original_string": "private static final double BUCKET_BAR_PERCENTAGE = 0.7;", "modifier": "private static final", "type": "double", "declarator": "BUCKET_BAR_PERCENTAGE = 0.7", "var_name": "BUCKET_BAR_PERCENTAGE"}, {"original_string": "@NotNull final LineChartModel myModel;", "modifier": "@NotNull final", "type": "LineChartModel", "declarator": "myModel", "var_name": "myModel"}, {"original_string": "@NotNull\n  private final Map<RangedContinuousSeries, LineConfig> myLinesConfig = new LinkedHashMap<>();", "modifier": "@NotNull\n  private final", "type": "Map<RangedContinuousSeries, LineConfig>", "declarator": "myLinesConfig = new LinkedHashMap<>()", "var_name": "myLinesConfig"}, {"original_string": "@NotNull\n  private final ArrayList<Path2D> myLinePaths;", "modifier": "@NotNull\n  private final", "type": "ArrayList<Path2D>", "declarator": "myLinePaths", "var_name": "myLinePaths"}, {"original_string": "@NotNull\n  private final ArrayList<RangedContinuousSeries> myLinePathSeries;", "modifier": "@NotNull\n  private final", "type": "ArrayList<RangedContinuousSeries>", "declarator": "myLinePathSeries", "var_name": "myLinePathSeries"}, {"original_string": "@NotNull\n  private final List<LineChartCustomRenderer> myCustomRenderers = new ArrayList<>();", "modifier": "@NotNull\n  private final", "type": "List<LineChartCustomRenderer>", "declarator": "myCustomRenderers = new ArrayList<>()", "var_name": "myCustomRenderers"}, {"original_string": "@NotNull\n  private Color myMaxLineColor = Color.BLACK;", "modifier": "@NotNull\n  private", "type": "Color", "declarator": "myMaxLineColor = Color.BLACK", "var_name": "myMaxLineColor"}, {"original_string": "private int myMaxLineMargin;", "modifier": "private", "type": "int", "declarator": "myMaxLineMargin", "var_name": "myMaxLineMargin"}, {"original_string": "private boolean myShowMaxLine;", "modifier": "private", "type": "boolean", "declarator": "myShowMaxLine", "var_name": "myShowMaxLine"}, {"original_string": "private int myXOffset = 0;", "modifier": "private", "type": "int", "declarator": "myXOffset = 0", "var_name": "myXOffset"}, {"original_string": "private int myYOffset = 0;", "modifier": "private", "type": "int", "declarator": "myYOffset = 0", "var_name": "myYOffset"}, {"original_string": "private int myTopPadding = 0;", "modifier": "private", "type": "int", "declarator": "myTopPadding = 0", "var_name": "myTopPadding"}, {"original_string": "private int mNextLineColorIndex;", "modifier": "private", "type": "int", "declarator": "mNextLineColorIndex", "var_name": "mNextLineColorIndex"}, {"original_string": "private boolean myRedraw;", "modifier": "private", "type": "boolean", "declarator": "myRedraw", "var_name": "myRedraw"}, {"original_string": "private boolean myFillEndGap;", "modifier": "private", "type": "boolean", "declarator": "myFillEndGap", "var_name": "myFillEndGap"}, {"original_string": "@NotNull\n  private final LineChartReducer myReducer;", "modifier": "@NotNull\n  private final", "type": "LineChartReducer", "declarator": "myReducer", "var_name": "myReducer"}, {"original_string": "private long myRedraws;", "modifier": "private", "type": "long", "declarator": "myRedraws", "var_name": "myRedraws"}, {"original_string": "private long myDraws;", "modifier": "private", "type": "long", "declarator": "myDraws", "var_name": "myDraws"}, {"original_string": "private long myLastCount;", "modifier": "private", "type": "long", "declarator": "myLastCount", "var_name": "myLastCount"}, {"original_string": "private long myLastDraws;", "modifier": "private", "type": "long", "declarator": "myLastDraws", "var_name": "myLastDraws"}, {"original_string": "private long myLastRedraws;", "modifier": "private", "type": "long", "declarator": "myLastRedraws", "var_name": "myLastRedraws"}, {"original_string": "private Map<LineConfig, DashInfo> myDashInfoCache = new HashMap<>();", "modifier": "private", "type": "Map<LineConfig, DashInfo>", "declarator": "myDashInfoCache = new HashMap<>()", "var_name": "myDashInfoCache"}], "methods": [{"identifier": "LineChart", "parameters": "(@NotNull LineChartModel model, @NotNull LineChartReducer reducer)", "modifiers": "@VisibleForTesting public", "return": "", "signature": " LineChart(@NotNull LineChartModel model, @NotNull LineChartReducer reducer)", "full_signature": "@VisibleForTesting public  LineChart(@NotNull LineChartModel model, @NotNull LineChartReducer reducer)", "class_method_signature": "LineChart.LineChart(@NotNull LineChartModel model, @NotNull LineChartReducer reducer)", "testcase": false, "constructor": true}, {"identifier": "LineChart", "parameters": "(@NotNull LineChartModel model)", "modifiers": "public", "return": "", "signature": " LineChart(@NotNull LineChartModel model)", "full_signature": "public  LineChart(@NotNull LineChartModel model)", "class_method_signature": "LineChart.LineChart(@NotNull LineChartModel model)", "testcase": false, "constructor": true}, {"identifier": "LineChart", "parameters": "(@NotNull List<RangedContinuousSeries> data)", "modifiers": "public", "return": "", "signature": " LineChart(@NotNull List<RangedContinuousSeries> data)", "full_signature": "public  LineChart(@NotNull List<RangedContinuousSeries> data)", "class_method_signature": "LineChart.LineChart(@NotNull List<RangedContinuousSeries> data)", "testcase": false, "constructor": true}, {"identifier": "configure", "parameters": "(@NotNull RangedContinuousSeries series, @NotNull LineConfig config)", "modifiers": "public", "return": "void", "signature": "void configure(@NotNull RangedContinuousSeries series, @NotNull LineConfig config)", "full_signature": "public void configure(@NotNull RangedContinuousSeries series, @NotNull LineConfig config)", "class_method_signature": "LineChart.configure(@NotNull RangedContinuousSeries series, @NotNull LineConfig config)", "testcase": false, "constructor": false}, {"identifier": "addCustomRenderer", "parameters": "(@NotNull LineChartCustomRenderer renderer)", "modifiers": "public", "return": "void", "signature": "void addCustomRenderer(@NotNull LineChartCustomRenderer renderer)", "full_signature": "public void addCustomRenderer(@NotNull LineChartCustomRenderer renderer)", "class_method_signature": "LineChart.addCustomRenderer(@NotNull LineChartCustomRenderer renderer)", "testcase": false, "constructor": false}, {"identifier": "getLineConfig", "parameters": "(RangedContinuousSeries rangedContinuousSeries)", "modifiers": "@NotNull public", "return": "LineConfig", "signature": "LineConfig getLineConfig(RangedContinuousSeries rangedContinuousSeries)", "full_signature": "@NotNull public LineConfig getLineConfig(RangedContinuousSeries rangedContinuousSeries)", "class_method_signature": "LineChart.getLineConfig(RangedContinuousSeries rangedContinuousSeries)", "testcase": false, "constructor": false}, {"identifier": "modelChanged", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void modelChanged()", "full_signature": "private void modelChanged()", "class_method_signature": "LineChart.modelChanged()", "testcase": false, "constructor": false}, {"identifier": "redraw", "parameters": "(@NotNull Dimension dim)", "modifiers": "private", "return": "void", "signature": "void redraw(@NotNull Dimension dim)", "full_signature": "private void redraw(@NotNull Dimension dim)", "class_method_signature": "LineChart.redraw(@NotNull Dimension dim)", "testcase": false, "constructor": false}, {"identifier": "draw", "parameters": "(Graphics2D g2d, Dimension dim)", "modifiers": "@Override protected", "return": "void", "signature": "void draw(Graphics2D g2d, Dimension dim)", "full_signature": "@Override protected void draw(Graphics2D g2d, Dimension dim)", "class_method_signature": "LineChart.draw(Graphics2D g2d, Dimension dim)", "testcase": false, "constructor": false}, {"identifier": "drawLine", "parameters": "(@NotNull Graphics2D g2d,\n                              @NotNull Path2D path,\n                              @NotNull LineConfig config)", "modifiers": "public static", "return": "void", "signature": "void drawLine(@NotNull Graphics2D g2d,\n                              @NotNull Path2D path,\n                              @NotNull LineConfig config)", "full_signature": "public static void drawLine(@NotNull Graphics2D g2d,\n                              @NotNull Path2D path,\n                              @NotNull LineConfig config)", "class_method_signature": "LineChart.drawLine(@NotNull Graphics2D g2d,\n                              @NotNull Path2D path,\n                              @NotNull LineConfig config)", "testcase": false, "constructor": false}, {"identifier": "setShowMaxLine", "parameters": "(boolean showMaxLine)", "modifiers": "public", "return": "void", "signature": "void setShowMaxLine(boolean showMaxLine)", "full_signature": "public void setShowMaxLine(boolean showMaxLine)", "class_method_signature": "LineChart.setShowMaxLine(boolean showMaxLine)", "testcase": false, "constructor": false}, {"identifier": "setMaxLineColor", "parameters": "(@NotNull Color maxLineColor)", "modifiers": "public", "return": "void", "signature": "void setMaxLineColor(@NotNull Color maxLineColor)", "full_signature": "public void setMaxLineColor(@NotNull Color maxLineColor)", "class_method_signature": "LineChart.setMaxLineColor(@NotNull Color maxLineColor)", "testcase": false, "constructor": false}, {"identifier": "setMaxLineMargin", "parameters": "(int maxLineMargin)", "modifiers": "public", "return": "void", "signature": "void setMaxLineMargin(int maxLineMargin)", "full_signature": "public void setMaxLineMargin(int maxLineMargin)", "class_method_signature": "LineChart.setMaxLineMargin(int maxLineMargin)", "testcase": false, "constructor": false}, {"identifier": "computeAdjustedDashPhase", "parameters": "(@NotNull DashInfo dashInfo,\n                                        @NotNull LineConfig config,\n                                        @NotNull Path2D path,\n                                        @NotNull Dimension dim,\n                                        double firstX,\n                                        double xMin,\n                                        double xLength,\n                                        double yLength)", "modifiers": "private", "return": "void", "signature": "void computeAdjustedDashPhase(@NotNull DashInfo dashInfo,\n                                        @NotNull LineConfig config,\n                                        @NotNull Path2D path,\n                                        @NotNull Dimension dim,\n                                        double firstX,\n                                        double xMin,\n                                        double xLength,\n                                        double yLength)", "full_signature": "private void computeAdjustedDashPhase(@NotNull DashInfo dashInfo,\n                                        @NotNull LineConfig config,\n                                        @NotNull Path2D path,\n                                        @NotNull Dimension dim,\n                                        double firstX,\n                                        double xMin,\n                                        double xLength,\n                                        double yLength)", "class_method_signature": "LineChart.computeAdjustedDashPhase(@NotNull DashInfo dashInfo,\n                                        @NotNull LineConfig config,\n                                        @NotNull Path2D path,\n                                        @NotNull Dimension dim,\n                                        double firstX,\n                                        double xMin,\n                                        double xLength,\n                                        double yLength)", "testcase": false, "constructor": false}, {"identifier": "setRenderOffset", "parameters": "(int xOffset, int yOffset)", "modifiers": "public", "return": "void", "signature": "void setRenderOffset(int xOffset, int yOffset)", "full_signature": "public void setRenderOffset(int xOffset, int yOffset)", "class_method_signature": "LineChart.setRenderOffset(int xOffset, int yOffset)", "testcase": false, "constructor": false}, {"identifier": "setTopPadding", "parameters": "(int padding)", "modifiers": "public", "return": "void", "signature": "void setTopPadding(int padding)", "full_signature": "public void setTopPadding(int padding)", "class_method_signature": "LineChart.setTopPadding(int padding)", "testcase": false, "constructor": false}, {"identifier": "setFillEndGap", "parameters": "(boolean fillEndGap)", "modifiers": "public", "return": "void", "signature": "void setFillEndGap(boolean fillEndGap)", "full_signature": "public void setFillEndGap(boolean fillEndGap)", "class_method_signature": "LineChart.setFillEndGap(boolean fillEndGap)", "testcase": false, "constructor": false}], "file": "adt-ui/src/main/java/com/android/tools/adtui/chart/linechart/LineChart.java"}, "focal_method": {"identifier": "draw", "parameters": "(Graphics2D g2d, Dimension dim)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n  protected void draw(Graphics2D g2d, Dimension dim) {\n    long now = System.nanoTime();\n    long drawStartTime = now;\n\n    if (now - myLastCount > 1e9) {\n      myLastDraws = myDraws;\n      myLastRedraws = myRedraws;\n      myDraws = 0;\n      myRedraws = 0;\n      myLastCount = now;\n    }\n    myDraws++;\n    if (myRedraw) {\n      myRedraw = false;\n      redraw(dim);\n      myRedraws++;\n    }\n    else {\n      addDebugInfo(\"postAnimate time: 0 ms\");\n    }\n    addDebugInfo(\"Draws in the last second %d\", myLastDraws);\n    addDebugInfo(\"Redraws in the last second %d\", myLastRedraws);\n\n    g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n    AffineTransform scale = new AffineTransform(dim.getWidth(), 0, 0, dim.getHeight() - myTopPadding, myXOffset, myYOffset + myTopPadding);\n\n    if (myShowMaxLine) {\n      g2d.setColor(myMaxLineColor);\n      g2d.setStroke(new BasicStroke(1, CAP_SQUARE, JOIN_MITER, 10, new float[]{3.0f, 3.0f}, 0.0f));\n      g2d.drawLine(myMaxLineMargin, 0, dim.width, 0);\n    }\n\n    // Cache the transformed line paths for reuse below.\n    List<Path2D> transformedPaths = new ArrayList<>(myLinePaths.size());\n    List<LineConfig> configs = new ArrayList<>(myLinePaths.size());\n\n    for (int i = 0; i < myLinePaths.size(); ++i) {\n      Path2D scaledPath = new Path2D.Float(myLinePaths.get(i), scale);\n      LineConfig config = getLineConfig(myLinePathSeries.get(i));\n      configs.add(config);\n      scaledPath = myReducer.reducePath(scaledPath, config);\n      transformedPaths.add(scaledPath);\n\n      if (isDrawDebugInfo()) {\n        int count = 0;\n        PathIterator it = scaledPath.getPathIterator(null);\n        while (!it.isDone()) {\n          ++count;\n          it.next();\n        }\n        addDebugInfo(\"# of points drawn: %d\", count);\n      }\n    }\n\n    // 1st pass - draw all the lines in the background.\n    for (int i = 0; i < transformedPaths.size(); ++i) {\n      drawLine(g2d, transformedPaths.get(i), configs.get(i));\n    }\n\n    // 2nd pass - call each custom renderer instances to redraw any regions/lines as needed.\n    myCustomRenderers.forEach(renderer -> renderer.renderLines(this, g2d, transformedPaths, myLinePathSeries));\n\n    addDebugInfo(\"Draw time: %.2fms\", (System.nanoTime() - drawStartTime) / 1e6);\n  }", "signature": "void draw(Graphics2D g2d, Dimension dim)", "full_signature": "@Override protected void draw(Graphics2D g2d, Dimension dim)", "class_method_signature": "LineChart.draw(Graphics2D g2d, Dimension dim)", "testcase": false, "constructor": false, "invocations": ["nanoTime", "redraw", "addDebugInfo", "addDebugInfo", "addDebugInfo", "setRenderingHint", "getWidth", "getHeight", "setColor", "setStroke", "drawLine", "size", "size", "size", "get", "getLineConfig", "get", "add", "reducePath", "add", "isDrawDebugInfo", "getPathIterator", "isDone", "next", "addDebugInfo", "size", "drawLine", "get", "get", "forEach", "renderLines", "addDebugInfo", "nanoTime"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}