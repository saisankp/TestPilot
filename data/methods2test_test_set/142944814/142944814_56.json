{"test_class": {"identifier": "TimeoutStrategyTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "core/transport/src/test/java/hera/strategy/TimeoutStrategyTest.java"}, "test_case": {"identifier": "shouldThrowExceptionOnTimedOut", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldThrowExceptionOnTimedOut() {\n    try {\n      final TimeoutStrategy strategy = new TimeoutStrategy(Time.of(100L, TimeUnit.MILLISECONDS));\n      final RequestMethod<Integer> method = new RequestMethod<Integer>() {\n\n        @Override\n        public String getName() {\n          return null;\n        }\n\n        @Override\n        protected Integer runInternal(List<Object> parameters) throws Exception {\n          ThreadUtils.trySleep(1000L);\n          return 0;\n        }\n      };\n      final Invocation<Integer> invocation = strategy.apply(method.toInvocation());\n      invocation.invoke();\n      fail();\n    } catch (TimeoutException e) {\n      // then\n    } catch (Exception e) {\n      fail(e.getMessage());\n    }\n  }", "signature": "void shouldThrowExceptionOnTimedOut()", "full_signature": "@Test public void shouldThrowExceptionOnTimedOut()", "class_method_signature": "TimeoutStrategyTest.shouldThrowExceptionOnTimedOut()", "testcase": true, "constructor": false, "invocations": ["of", "trySleep", "apply", "toInvocation", "invoke", "fail", "fail", "getMessage"]}, "focal_class": {"identifier": "TimeoutStrategy", "superclass": "", "interfaces": "implements InvocationStrategy", "fields": [{"original_string": "@ToString.Exclude\n  protected final transient Logger logger = getLogger(getClass());", "modifier": "@ToString.Exclude\n  protected final transient", "type": "Logger", "declarator": "logger = getLogger(getClass())", "var_name": "logger"}, {"original_string": "protected final Time timeout;", "modifier": "protected final", "type": "Time", "declarator": "timeout", "var_name": "timeout"}], "methods": [{"identifier": "apply", "parameters": "(final Invocation<T> invocation)", "modifiers": "@Override public", "return": "Invocation<T>", "signature": "Invocation<T> apply(final Invocation<T> invocation)", "full_signature": "@Override public Invocation<T> apply(final Invocation<T> invocation)", "class_method_signature": "TimeoutStrategy.apply(final Invocation<T> invocation)", "testcase": false, "constructor": false}], "file": "core/transport/src/main/java/hera/strategy/TimeoutStrategy.java"}, "focal_method": {"identifier": "apply", "parameters": "(final Invocation<T> invocation)", "modifiers": "@Override public", "return": "Invocation<T>", "body": "@Override\n  public <T> Invocation<T> apply(final Invocation<T> invocation) {\n    assertNotNull(invocation, \"Invocation must not null\");\n    return new TimeoutInvocation<T>(timeout, invocation.getRequestMethod(),\n        invocation.getParameters());\n  }", "signature": "Invocation<T> apply(final Invocation<T> invocation)", "full_signature": "@Override public Invocation<T> apply(final Invocation<T> invocation)", "class_method_signature": "TimeoutStrategy.apply(final Invocation<T> invocation)", "testcase": false, "constructor": false, "invocations": ["assertNotNull", "getRequestMethod", "getParameters"]}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}