{"test_class": {"identifier": "EvaluateFormulasCommandTest", "superclass": "", "interfaces": "", "fields": [], "file": "de.prob2.kernel/src/test/java/de/prob/animator/command/EvaluateFormulasCommandTest.java"}, "test_case": {"identifier": "testWriteCommand", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testWriteCommand() {\n\t\tIEvalElement element = new ClassicalB(\"1<3\", FormulaExpand.EXPAND);\n\n\t\tStructuredPrologOutput prologTermOutput = new StructuredPrologOutput();\n\t\tEvaluateFormulaCommand command = new EvaluateFormulaCommand(element,\n\t\t\t\t\"root\");\n\t\tcommand.writeCommand(prologTermOutput);\n\t\tprologTermOutput.fullstop().flush();\n\n\t\tCollection<PrologTerm> sentences = prologTermOutput.getSentences();\n\t\tPrologTerm t = sentences.iterator().next();\n\t\tassertNotNull(t);\n\t\tassertTrue(t instanceof CompoundPrologTerm);\n\t\tassertEquals(\"evaluate_formula\", t.getFunctor());\n\t\tassertEquals(3, t.getArity());\n\t\tPrologTerm t1 = t.getArgument(1);\n\t\tassertEquals(\"root\", t1.getFunctor());\n\t\tPrologTerm t2 = t.getArgument(2);\n\t\tassertEquals(\"eval\", t2.getFunctor());\n\t\tPrologTerm t3 = t.getArgument(3);\n\t\tassertEquals(\"Res\", t3.getFunctor());\n\t}", "signature": "void testWriteCommand()", "full_signature": "@Test public void testWriteCommand()", "class_method_signature": "EvaluateFormulasCommandTest.testWriteCommand()", "testcase": true, "constructor": false, "invocations": ["writeCommand", "flush", "fullstop", "getSentences", "next", "iterator", "assertNotNull", "assertTrue", "assertEquals", "getFunctor", "assertEquals", "getArity", "getArgument", "assertEquals", "getFunctor", "getArgument", "assertEquals", "getFunctor", "getArgument", "assertEquals", "getFunctor"]}, "focal_class": {"identifier": "EvaluateFormulasCommand", "superclass": "extends AbstractCommand", "interfaces": "", "fields": [{"original_string": "private static final String PROLOG_COMMAND_NAME = \"evaluate_formulas\";", "modifier": "private static final", "type": "String", "declarator": "PROLOG_COMMAND_NAME = \"evaluate_formulas\"", "var_name": "PROLOG_COMMAND_NAME"}, {"original_string": "Logger logger = LoggerFactory.getLogger(EvaluateFormulasCommand.class);", "modifier": "", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(EvaluateFormulasCommand.class)", "var_name": "logger"}, {"original_string": "private static final String EVALUATE_RESULT_VARIABLE = \"Res\";", "modifier": "private static final", "type": "String", "declarator": "EVALUATE_RESULT_VARIABLE = \"Res\"", "var_name": "EVALUATE_RESULT_VARIABLE"}, {"original_string": "private final List<IEvalElement> evalElements;", "modifier": "private final", "type": "List<IEvalElement>", "declarator": "evalElements", "var_name": "evalElements"}, {"original_string": "private final List<AbstractEvalResult> values = new ArrayList<>();", "modifier": "private final", "type": "List<AbstractEvalResult>", "declarator": "values = new ArrayList<>()", "var_name": "values"}, {"original_string": "private String stateId;", "modifier": "private", "type": "String", "declarator": "stateId", "var_name": "stateId"}], "methods": [{"identifier": "EvaluateFormulasCommand", "parameters": "(final List<IEvalElement> evalElements, final String stateId)", "modifiers": "public", "return": "", "signature": " EvaluateFormulasCommand(final List<IEvalElement> evalElements, final String stateId)", "full_signature": "public  EvaluateFormulasCommand(final List<IEvalElement> evalElements, final String stateId)", "class_method_signature": "EvaluateFormulasCommand.EvaluateFormulasCommand(final List<IEvalElement> evalElements, final String stateId)", "testcase": false, "constructor": true}, {"identifier": "processResult", "parameters": "(final ISimplifiedROMap<String, PrologTerm> bindings)", "modifiers": "@Override public", "return": "void", "signature": "void processResult(final ISimplifiedROMap<String, PrologTerm> bindings)", "full_signature": "@Override public void processResult(final ISimplifiedROMap<String, PrologTerm> bindings)", "class_method_signature": "EvaluateFormulasCommand.processResult(final ISimplifiedROMap<String, PrologTerm> bindings)", "testcase": false, "constructor": false}, {"identifier": "writeCommand", "parameters": "(final IPrologTermOutput pout)", "modifiers": "@Override public", "return": "void", "signature": "void writeCommand(final IPrologTermOutput pout)", "full_signature": "@Override public void writeCommand(final IPrologTermOutput pout)", "class_method_signature": "EvaluateFormulasCommand.writeCommand(final IPrologTermOutput pout)", "testcase": false, "constructor": false}, {"identifier": "printEvalTerm", "parameters": "(final IPrologTermOutput pout, IEvalElement evalElement)", "modifiers": "private", "return": "void", "signature": "void printEvalTerm(final IPrologTermOutput pout, IEvalElement evalElement)", "full_signature": "private void printEvalTerm(final IPrologTermOutput pout, IEvalElement evalElement)", "class_method_signature": "EvaluateFormulasCommand.printEvalTerm(final IPrologTermOutput pout, IEvalElement evalElement)", "testcase": false, "constructor": false}, {"identifier": "getValues", "parameters": "()", "modifiers": "public", "return": "List<AbstractEvalResult>", "signature": "List<AbstractEvalResult> getValues()", "full_signature": "public List<AbstractEvalResult> getValues()", "class_method_signature": "EvaluateFormulasCommand.getValues()", "testcase": false, "constructor": false}, {"identifier": "getResultMap", "parameters": "()", "modifiers": "public", "return": "Map<IEvalElement, AbstractEvalResult>", "signature": "Map<IEvalElement, AbstractEvalResult> getResultMap()", "full_signature": "public Map<IEvalElement, AbstractEvalResult> getResultMap()", "class_method_signature": "EvaluateFormulasCommand.getResultMap()", "testcase": false, "constructor": false}], "file": "de.prob2.kernel/src/main/java/de/prob/animator/command/EvaluateFormulasCommand.java"}, "focal_method": {"identifier": "writeCommand", "parameters": "(final IPrologTermOutput pout)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void writeCommand(final IPrologTermOutput pout) {\n\t\tpout.openTerm(PROLOG_COMMAND_NAME);\n\t\tpout.printAtomOrNumber(stateId);\n\n\t\tpout.openList();\n\t\tfor (IEvalElement evalElement : evalElements) {\n\t\t\tprintEvalTerm(pout, evalElement);\n\t\t}\n\t\tpout.closeList();\n\n\t\tpout.printVariable(EVALUATE_RESULT_VARIABLE);\n\t\tpout.closeTerm();\n\t}", "signature": "void writeCommand(final IPrologTermOutput pout)", "full_signature": "@Override public void writeCommand(final IPrologTermOutput pout)", "class_method_signature": "EvaluateFormulasCommand.writeCommand(final IPrologTermOutput pout)", "testcase": false, "constructor": false, "invocations": ["openTerm", "printAtomOrNumber", "openList", "printEvalTerm", "closeList", "printVariable", "closeTerm"]}, "repository": {"repo_id": 5495723, "url": "https://github.com/bendisposto/prob2", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 11, "size": 32880, "license": "licensed"}}