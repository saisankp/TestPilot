{"test_class": {"identifier": "XmlRegArimaRequestTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtss/src/test/java/ec/demetra/xml/sa/x13/XmlRegArimaRequestTest.java"}, "test_case": {"identifier": "testValidation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidation() throws FileNotFoundException, JAXBException, IOException, SAXException {\n\n         XmlRegArimaRequest request=new XmlRegArimaRequest();\n        request.defaultSpecification=\"RG5c\";\n        request.series=new XmlTs();\n        XmlTsData.MARSHALLER.marshal(Data.X, request.series);\n        request.getOutputFilter().add(\"arima.*\");\n        request.getOutputFilter().add(\"likelihood.*\");\n        request.getOutputFilter().add(\"residuals.*\");\n        request.getOutputFilter().add(\"*_f\");\n        JAXBContext jaxb = JAXBContext.newInstance(request.getClass());\n        JAXBSource source = new JAXBSource(jaxb, request);\n        Validator validator = Schemas.X13.newValidator();\n        //validator.setErrorHandler(new TestErrorHandler());\n        validator.validate(source);\n    }", "signature": "void testValidation()", "full_signature": "@Test public void testValidation()", "class_method_signature": "XmlRegArimaRequestTest.testValidation()", "testcase": true, "constructor": false, "invocations": ["marshal", "add", "getOutputFilter", "add", "getOutputFilter", "add", "getOutputFilter", "add", "getOutputFilter", "newInstance", "getClass", "newValidator", "validate"]}, "focal_class": {"identifier": "XmlRegArimaRequest", "superclass": "extends XmlRegArimaAtomicRequest", "interfaces": "", "fields": [{"original_string": "@XmlElement(name = \"Context\")\n    protected XmlProcessingContext context;", "modifier": "@XmlElement(name = \"Context\")\n    protected", "type": "XmlProcessingContext", "declarator": "context", "var_name": "context"}, {"original_string": "@XmlList\n    @XmlElement(name = \"OutputFilter\", required = true)\n    protected List<String> outputFilter;", "modifier": "@XmlList\n    @XmlElement(name = \"OutputFilter\", required = true)\n    protected", "type": "List<String>", "declarator": "outputFilter", "var_name": "outputFilter"}, {"original_string": "@XmlAttribute(name=\"flat\")\n    protected Boolean flat;", "modifier": "@XmlAttribute(name=\"flat\")\n    protected", "type": "Boolean", "declarator": "flat", "var_name": "flat"}], "methods": [{"identifier": "getContext", "parameters": "()", "modifiers": "public", "return": "XmlProcessingContext", "signature": "XmlProcessingContext getContext()", "full_signature": "public XmlProcessingContext getContext()", "class_method_signature": "XmlRegArimaRequest.getContext()", "testcase": false, "constructor": false}, {"identifier": "setContext", "parameters": "(XmlProcessingContext value)", "modifiers": "public", "return": "void", "signature": "void setContext(XmlProcessingContext value)", "full_signature": "public void setContext(XmlProcessingContext value)", "class_method_signature": "XmlRegArimaRequest.setContext(XmlProcessingContext value)", "testcase": false, "constructor": false}, {"identifier": "getOutputFilter", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getOutputFilter()", "full_signature": "public List<String> getOutputFilter()", "class_method_signature": "XmlRegArimaRequest.getOutputFilter()", "testcase": false, "constructor": false}, {"identifier": "getFlat", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getFlat()", "full_signature": "public boolean getFlat()", "class_method_signature": "XmlRegArimaRequest.getFlat()", "testcase": false, "constructor": false}, {"identifier": "setFlat", "parameters": "(Boolean flat)", "modifiers": "public", "return": "void", "signature": "void setFlat(Boolean flat)", "full_signature": "public void setFlat(Boolean flat)", "class_method_signature": "XmlRegArimaRequest.setFlat(Boolean flat)", "testcase": false, "constructor": false}], "file": "jtss/src/main/java/ec/demetra/xml/sa/x13/XmlRegArimaRequest.java"}, "focal_method": {"identifier": "getOutputFilter", "parameters": "()", "modifiers": "public", "return": "List<String>", "body": "public List<String> getOutputFilter() {\n        if (outputFilter == null) {\n            outputFilter = new ArrayList<>();\n        }\n        return this.outputFilter;\n    }", "signature": "List<String> getOutputFilter()", "full_signature": "public List<String> getOutputFilter()", "class_method_signature": "XmlRegArimaRequest.getOutputFilter()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}