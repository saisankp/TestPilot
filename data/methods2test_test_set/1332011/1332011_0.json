{"test_class": {"identifier": "PropertyExpanderTest", "superclass": "", "interfaces": "", "fields": [], "file": "sdkfido/src/test/java/net/erdfelt/android/sdkfido/util/PropertyExpanderTest.java"}, "test_case": {"identifier": "testExpand", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExpand() {\n        Map<String,String> props = new HashMap<String, String>();\n        props.put(\"MOVIE\", \"Amelie\");\n        \n        PropertyExpander expander = new PropertyExpander(props);\n        String expected = \"My favorite movie is Amelie\";\n        String actual = expander.expand(\"My favorite movie is @MOVIE@\");\n        Assert.assertEquals(expected, actual);\n    }", "signature": "void testExpand()", "full_signature": "@Test public void testExpand()", "class_method_signature": "PropertyExpanderTest.testExpand()", "testcase": true, "constructor": false, "invocations": ["put", "expand", "assertEquals"]}, "focal_class": {"identifier": "PropertyExpander", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Map<String, String> props;", "modifier": "private", "type": "Map<String, String>", "declarator": "props", "var_name": "props"}, {"original_string": "Pattern                     pat = Pattern.compile(\"(@([A-Z][A-Z0-9_]*)@)\");", "modifier": "", "type": "Pattern", "declarator": "pat = Pattern.compile(\"(@([A-Z][A-Z0-9_]*)@)\")", "var_name": "pat"}], "methods": [{"identifier": "PropertyExpander", "parameters": "(Map<String, String> props)", "modifiers": "public", "return": "", "signature": " PropertyExpander(Map<String, String> props)", "full_signature": "public  PropertyExpander(Map<String, String> props)", "class_method_signature": "PropertyExpander.PropertyExpander(Map<String, String> props)", "testcase": false, "constructor": true}, {"identifier": "expand", "parameters": "(String str)", "modifiers": "public", "return": "String", "signature": "String expand(String str)", "full_signature": "public String expand(String str)", "class_method_signature": "PropertyExpander.expand(String str)", "testcase": false, "constructor": false}], "file": "sdkfido/src/main/java/net/erdfelt/android/sdkfido/util/PropertyExpander.java"}, "focal_method": {"identifier": "expand", "parameters": "(String str)", "modifiers": "public", "return": "String", "body": "public String expand(String str) {\n        if (StringUtils.isEmpty(str)) {\n            // Empty string. Fail fast.\n            return str;\n        }\n\n        if (str.indexOf(\"@\") < 0) {\n            // Contains no potential expressions. Fail fast.\n            return str;\n        }\n\n        Matcher mat = pat.matcher(str);\n        int offset = 0;\n        String expression;\n        String value;\n        StringBuffer expanded = new StringBuffer();\n\n        while (mat.find(offset)) {\n            expression = mat.group(1);\n\n            expanded.append(str.substring(offset, mat.start(1)));\n            value = props.get(mat.group(2));\n            if (value != null) {\n                expanded.append(value);\n            } else {\n                expanded.append(expression);\n            }\n            offset = mat.end(1);\n        }\n\n        expanded.append(str.substring(offset));\n\n        if (expanded.indexOf(\"@@\") >= 0) {\n            // Special case for escaped content.\n            return expanded.toString().replaceAll(\"\\\\@\\\\@\", \"\\\\@\");\n        } else {\n            // return expanded\n            return expanded.toString();\n        }\n    }", "signature": "String expand(String str)", "full_signature": "public String expand(String str)", "class_method_signature": "PropertyExpander.expand(String str)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "indexOf", "matcher", "find", "group", "append", "substring", "start", "get", "group", "append", "append", "end", "append", "substring", "indexOf", "replaceAll", "toString", "toString"]}, "repository": {"repo_id": 1332011, "url": "https://github.com/joakime/android-sdkfido", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 9, "size": 984, "license": "licensed"}}