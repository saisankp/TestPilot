{"test_class": {"identifier": "IntegerMapGenotypeTest", "superclass": "", "interfaces": "", "fields": [], "file": "opt4j-core/src/test/java/org/opt4j/core/genotype/IntegerMapGenotypeTest.java"}, "test_case": {"identifier": "testSetOutOfUpperBoundsValue", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n\tpublic void testSetOutOfUpperBoundsValue() {\n\t\tint[] lowerBounds = { 1, 2, 3 };\n\t\tint[] upperBounds = { 2, 3, 4 };\n\t\tBounds<Integer> bounds = new IntegerBounds(lowerBounds, upperBounds);\n\t\tMockObject mockup1 = new MockObject(1.0, 1);\n\t\tMockObject mockup2 = new MockObject(2.0, 2);\n\t\tMockObject mockup3 = new MockObject(3.0, 3);\n\t\tList<MockObject> inputList = new ArrayList<>();\n\t\tinputList.add(mockup1);\n\t\tinputList.add(mockup2);\n\t\tinputList.add(mockup3);\n\t\tIntegerMapGenotype<MockObject> integerMapGenotype = new IntegerMapGenotype<>(inputList, bounds);\n\t\tintegerMapGenotype.setValue(mockup3, 5);\n\t}", "signature": "void testSetOutOfUpperBoundsValue()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testSetOutOfUpperBoundsValue()", "class_method_signature": "IntegerMapGenotypeTest.testSetOutOfUpperBoundsValue()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "setValue"]}, "focal_class": {"identifier": "IntegerMapGenotype", "superclass": "extends IntegerGenotype", "interfaces": "implements MapGenotype<K, Integer>", "fields": [{"original_string": "protected final List<K> list;", "modifier": "protected final", "type": "List<K>", "declarator": "list", "var_name": "list"}, {"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}], "methods": [{"identifier": "IntegerMapGenotype", "parameters": "(List<K> list, Bounds<Integer> bounds)", "modifiers": "public", "return": "", "signature": " IntegerMapGenotype(List<K> list, Bounds<Integer> bounds)", "full_signature": "public  IntegerMapGenotype(List<K> list, Bounds<Integer> bounds)", "class_method_signature": "IntegerMapGenotype.IntegerMapGenotype(List<K> list, Bounds<Integer> bounds)", "testcase": false, "constructor": true}, {"identifier": "IntegerMapGenotype", "parameters": "(List<K> list, int lowerBound, int upperBound)", "modifiers": "public", "return": "", "signature": " IntegerMapGenotype(List<K> list, int lowerBound, int upperBound)", "full_signature": "public  IntegerMapGenotype(List<K> list, int lowerBound, int upperBound)", "class_method_signature": "IntegerMapGenotype.IntegerMapGenotype(List<K> list, int lowerBound, int upperBound)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(Random random)", "modifiers": "public", "return": "void", "signature": "void init(Random random)", "full_signature": "public void init(Random random)", "class_method_signature": "IntegerMapGenotype.init(Random random)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(Random random, int n)", "modifiers": "@Override public", "return": "void", "signature": "void init(Random random, int n)", "full_signature": "@Override public void init(Random random, int n)", "class_method_signature": "IntegerMapGenotype.init(Random random, int n)", "testcase": false, "constructor": false}, {"identifier": "containsKey", "parameters": "(K key)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsKey(K key)", "full_signature": "@Override public boolean containsKey(K key)", "class_method_signature": "IntegerMapGenotype.containsKey(K key)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(K key)", "modifiers": "@Override public", "return": "Integer", "signature": "Integer getValue(K key)", "full_signature": "@Override public Integer getValue(K key)", "class_method_signature": "IntegerMapGenotype.getValue(K key)", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(K key, Integer value)", "modifiers": "@Override public", "return": "void", "signature": "void setValue(K key, Integer value)", "full_signature": "@Override public void setValue(K key, Integer value)", "class_method_signature": "IntegerMapGenotype.setValue(K key, Integer value)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "()", "modifiers": "@Override @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public", "return": "G", "signature": "G newInstance()", "full_signature": "@Override @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public G newInstance()", "class_method_signature": "IntegerMapGenotype.newInstance()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "IntegerMapGenotype.toString()", "testcase": false, "constructor": false}, {"identifier": "getIndexOf", "parameters": "(K key)", "modifiers": "@Override public", "return": "int", "signature": "int getIndexOf(K key)", "full_signature": "@Override public int getIndexOf(K key)", "class_method_signature": "IntegerMapGenotype.getIndexOf(K key)", "testcase": false, "constructor": false}, {"identifier": "getKeys", "parameters": "()", "modifiers": "@Override public", "return": "Collection<K>", "signature": "Collection<K> getKeys()", "full_signature": "@Override public Collection<K> getKeys()", "class_method_signature": "IntegerMapGenotype.getKeys()", "testcase": false, "constructor": false}], "file": "opt4j-core/src/main/java/org/opt4j/core/genotype/IntegerMapGenotype.java"}, "focal_method": {"identifier": "setValue", "parameters": "(K key, Integer value)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void setValue(K key, Integer value) {\n\t\tif (!containsKey(key)) {\n\t\t\tthrow new IllegalArgumentException(MapGenotype.ERROR_MESSAGE_INVALID_KEY);\n\t\t}\n\t\tint i = list.indexOf(key);\n\t\twhile (size() <= i) {\n\t\t\tadd(bounds.getLowerBound(size()));\n\t\t}\n\t\tif (bounds.getLowerBound(i) > value || bounds.getUpperBound(i) < value) {\n\t\t\tthrow new IllegalArgumentException(MapGenotype.ERROR_MESSAGE_OUT_OF_BOUNDS);\n\t\t}\n\t\tset(i, value);\n\t}", "signature": "void setValue(K key, Integer value)", "full_signature": "@Override public void setValue(K key, Integer value)", "class_method_signature": "IntegerMapGenotype.setValue(K key, Integer value)", "testcase": false, "constructor": false, "invocations": ["containsKey", "indexOf", "size", "add", "getLowerBound", "size", "getLowerBound", "getUpperBound", "set"]}, "repository": {"repo_id": 119080111, "url": "https://github.com/felixreimann/opt4j", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 11, "size": 8771, "license": "licensed"}}