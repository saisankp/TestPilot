{"test_class": {"identifier": "ListsTest", "superclass": "", "interfaces": "", "fields": [], "file": "brave/src/test/java/brave/internal/collect/ListsTest.java"}, "test_case": {"identifier": "ensureImmutable_returnsImmutableEmptyList", "parameters": "()", "modifiers": "@Test(expected = UnsupportedOperationException.class) public", "return": "void", "body": "@Test(expected = UnsupportedOperationException.class)\n  public void ensureImmutable_returnsImmutableEmptyList() {\n    Lists.ensureImmutable(new ArrayList<>()).add(\"foo\");\n  }", "signature": "void ensureImmutable_returnsImmutableEmptyList()", "full_signature": "@Test(expected = UnsupportedOperationException.class) public void ensureImmutable_returnsImmutableEmptyList()", "class_method_signature": "ListsTest.ensureImmutable_returnsImmutableEmptyList()", "testcase": true, "constructor": false, "invocations": ["add", "ensureImmutable"]}, "focal_class": {"identifier": "Lists", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ensureMutable", "parameters": "(List<E> list)", "modifiers": "public static", "return": "List<E>", "signature": "List<E> ensureMutable(List<E> list)", "full_signature": "public static List<E> ensureMutable(List<E> list)", "class_method_signature": "Lists.ensureMutable(List<E> list)", "testcase": false, "constructor": false}, {"identifier": "ensureImmutable", "parameters": "(List<E> list)", "modifiers": "public static", "return": "List<E>", "signature": "List<E> ensureImmutable(List<E> list)", "full_signature": "public static List<E> ensureImmutable(List<E> list)", "class_method_signature": "Lists.ensureImmutable(List<E> list)", "testcase": false, "constructor": false}, {"identifier": "isImmutable", "parameters": "(List<?> extra)", "modifiers": "static", "return": "boolean", "signature": "boolean isImmutable(List<?> extra)", "full_signature": "static boolean isImmutable(List<?> extra)", "class_method_signature": "Lists.isImmutable(List<?> extra)", "testcase": false, "constructor": false}, {"identifier": "concat", "parameters": "(List<E> left, List<E> right)", "modifiers": "public static", "return": "List<E>", "signature": "List<E> concat(List<E> left, List<E> right)", "full_signature": "public static List<E> concat(List<E> left, List<E> right)", "class_method_signature": "Lists.concat(List<E> left, List<E> right)", "testcase": false, "constructor": false}, {"identifier": "Lists", "parameters": "()", "modifiers": "", "return": "", "signature": " Lists()", "full_signature": "  Lists()", "class_method_signature": "Lists.Lists()", "testcase": false, "constructor": true}], "file": "brave/src/main/java/brave/internal/collect/Lists.java"}, "focal_method": {"identifier": "ensureImmutable", "parameters": "(List<E> list)", "modifiers": "public static", "return": "List<E>", "body": "public static <E> List<E> ensureImmutable(List<E> list) {\n    if (list.isEmpty()) return Collections.emptyList();\n    // Faster to make a copy than check the type to see if it is already a singleton list\n    if (list.size() == 1) return Collections.singletonList(list.get(0));\n    if (isImmutable(list)) return list;\n\n    return Collections.unmodifiableList(new ArrayList<>(list));\n  }", "signature": "List<E> ensureImmutable(List<E> list)", "full_signature": "public static List<E> ensureImmutable(List<E> list)", "class_method_signature": "Lists.ensureImmutable(List<E> list)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "emptyList", "size", "singletonList", "get", "isImmutable", "unmodifiableList"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}