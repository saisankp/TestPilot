{"test_class": {"identifier": "LogisticRegressionModelTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double PRECISION = 1e-6;", "modifier": "private static final", "type": "double", "declarator": "PRECISION = 1e-6", "var_name": "PRECISION"}], "file": "modules/ml/src/test/java/org/apache/ignite/ml/regressions/logistic/LogisticRegressionModelTest.java"}, "test_case": {"identifier": "testPredictOnAnObservationWithWrongCardinality", "parameters": "()", "modifiers": "@Test(expected = CardinalityException.class) public", "return": "void", "body": "@Test(expected = CardinalityException.class)\n    public void testPredictOnAnObservationWithWrongCardinality() {\n        Vector weights = new DenseVector(new double[] {2.0, 3.0});\n\n        LogisticRegressionModel mdl = new LogisticRegressionModel(weights, 1.0);\n\n        Vector observation = new DenseVector(new double[] {1.0});\n\n        mdl.predict(observation);\n    }", "signature": "void testPredictOnAnObservationWithWrongCardinality()", "full_signature": "@Test(expected = CardinalityException.class) public void testPredictOnAnObservationWithWrongCardinality()", "class_method_signature": "LogisticRegressionModelTest.testPredictOnAnObservationWithWrongCardinality()", "testcase": true, "constructor": false, "invocations": ["predict"]}, "focal_class": {"identifier": "LogisticRegressionModel", "superclass": "", "interfaces": "implements IgniteModel<Vector, Double>, Exportable<LogisticRegressionModel>, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = -133984600091550776L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -133984600091550776L", "var_name": "serialVersionUID"}, {"original_string": "private Vector weights;", "modifier": "private", "type": "Vector", "declarator": "weights", "var_name": "weights"}, {"original_string": "private double intercept;", "modifier": "private", "type": "double", "declarator": "intercept", "var_name": "intercept"}, {"original_string": "private boolean isKeepingRawLabels = false;", "modifier": "private", "type": "boolean", "declarator": "isKeepingRawLabels = false", "var_name": "isKeepingRawLabels"}, {"original_string": "private double threshold = 0.5;", "modifier": "private", "type": "double", "declarator": "threshold = 0.5", "var_name": "threshold"}], "methods": [{"identifier": "LogisticRegressionModel", "parameters": "(Vector weights, double intercept)", "modifiers": "public", "return": "", "signature": " LogisticRegressionModel(Vector weights, double intercept)", "full_signature": "public  LogisticRegressionModel(Vector weights, double intercept)", "class_method_signature": "LogisticRegressionModel.LogisticRegressionModel(Vector weights, double intercept)", "testcase": false, "constructor": true}, {"identifier": "withRawLabels", "parameters": "(boolean isKeepingRawLabels)", "modifiers": "public", "return": "LogisticRegressionModel", "signature": "LogisticRegressionModel withRawLabels(boolean isKeepingRawLabels)", "full_signature": "public LogisticRegressionModel withRawLabels(boolean isKeepingRawLabels)", "class_method_signature": "LogisticRegressionModel.withRawLabels(boolean isKeepingRawLabels)", "testcase": false, "constructor": false}, {"identifier": "withThreshold", "parameters": "(double threshold)", "modifiers": "public", "return": "LogisticRegressionModel", "signature": "LogisticRegressionModel withThreshold(double threshold)", "full_signature": "public LogisticRegressionModel withThreshold(double threshold)", "class_method_signature": "LogisticRegressionModel.withThreshold(double threshold)", "testcase": false, "constructor": false}, {"identifier": "withWeights", "parameters": "(Vector weights)", "modifiers": "public", "return": "LogisticRegressionModel", "signature": "LogisticRegressionModel withWeights(Vector weights)", "full_signature": "public LogisticRegressionModel withWeights(Vector weights)", "class_method_signature": "LogisticRegressionModel.withWeights(Vector weights)", "testcase": false, "constructor": false}, {"identifier": "withIntercept", "parameters": "(double intercept)", "modifiers": "public", "return": "LogisticRegressionModel", "signature": "LogisticRegressionModel withIntercept(double intercept)", "full_signature": "public LogisticRegressionModel withIntercept(double intercept)", "class_method_signature": "LogisticRegressionModel.withIntercept(double intercept)", "testcase": false, "constructor": false}, {"identifier": "isKeepingRawLabels", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isKeepingRawLabels()", "full_signature": "public boolean isKeepingRawLabels()", "class_method_signature": "LogisticRegressionModel.isKeepingRawLabels()", "testcase": false, "constructor": false}, {"identifier": "threshold", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double threshold()", "full_signature": "public double threshold()", "class_method_signature": "LogisticRegressionModel.threshold()", "testcase": false, "constructor": false}, {"identifier": "weights", "parameters": "()", "modifiers": "public", "return": "Vector", "signature": "Vector weights()", "full_signature": "public Vector weights()", "class_method_signature": "LogisticRegressionModel.weights()", "testcase": false, "constructor": false}, {"identifier": "intercept", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double intercept()", "full_signature": "public double intercept()", "class_method_signature": "LogisticRegressionModel.intercept()", "testcase": false, "constructor": false}, {"identifier": "predict", "parameters": "(Vector input)", "modifiers": "@Override public", "return": "Double", "signature": "Double predict(Vector input)", "full_signature": "@Override public Double predict(Vector input)", "class_method_signature": "LogisticRegressionModel.predict(Vector input)", "testcase": false, "constructor": false}, {"identifier": "sigmoid", "parameters": "(double z)", "modifiers": "private static", "return": "double", "signature": "double sigmoid(double z)", "full_signature": "private static double sigmoid(double z)", "class_method_signature": "LogisticRegressionModel.sigmoid(double z)", "testcase": false, "constructor": false}, {"identifier": "saveModel", "parameters": "(Exporter<LogisticRegressionModel, P> exporter, P path)", "modifiers": "@Override public", "return": "void", "signature": "void saveModel(Exporter<LogisticRegressionModel, P> exporter, P path)", "full_signature": "@Override public void saveModel(Exporter<LogisticRegressionModel, P> exporter, P path)", "class_method_signature": "LogisticRegressionModel.saveModel(Exporter<LogisticRegressionModel, P> exporter, P path)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "LogisticRegressionModel.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "LogisticRegressionModel.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "LogisticRegressionModel.toString()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(boolean pretty)", "modifiers": "@Override public", "return": "String", "signature": "String toString(boolean pretty)", "full_signature": "@Override public String toString(boolean pretty)", "class_method_signature": "LogisticRegressionModel.toString(boolean pretty)", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/regressions/logistic/LogisticRegressionModel.java"}, "focal_method": {"identifier": "predict", "parameters": "(Vector input)", "modifiers": "@Override public", "return": "Double", "body": "@Override public Double predict(Vector input) {\n\n        final double res = sigmoid(input.dot(weights) + intercept);\n\n        if (isKeepingRawLabels)\n            return res;\n        else\n            return res - threshold > 0 ? 1.0 : 0;\n    }", "signature": "Double predict(Vector input)", "full_signature": "@Override public Double predict(Vector input)", "class_method_signature": "LogisticRegressionModel.predict(Vector input)", "testcase": false, "constructor": false, "invocations": ["sigmoid", "dot"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}