{"test_class": {"identifier": "ReaderEntityProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST_CONTENT = \"\\u041f\\u0440\\u0438\\u0432\\u0456\\u0442\";", "modifier": "private static final", "type": "String", "declarator": "TEST_CONTENT = \"\\u041f\\u0440\\u0438\\u0432\\u0456\\u0442\"", "var_name": "TEST_CONTENT"}, {"original_string": "private ReaderEntityProvider readerEntityProvider;", "modifier": "private", "type": "ReaderEntityProvider", "declarator": "readerEntityProvider", "var_name": "readerEntityProvider"}], "file": "everrest-core/src/test/java/org/everrest/core/impl/provider/ReaderEntityProviderTest.java"}, "test_case": {"identifier": "readsContentOfEntityStreamAsUtf8Reader", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void readsContentOfEntityStreamAsUtf8Reader() throws Exception {\n        MediaType mediaType = new MediaType(\"text\", \"plain\");\n        byte[] data = TEST_CONTENT.getBytes(\"UTF-8\");\n        Reader result = readerEntityProvider.readFrom(Reader.class, String.class, null, mediaType, null, new ByteArrayInputStream(data));\n\n        assertEquals(TEST_CONTENT, CharStreams.toString(result));\n    }", "signature": "void readsContentOfEntityStreamAsUtf8Reader()", "full_signature": "@Test public void readsContentOfEntityStreamAsUtf8Reader()", "class_method_signature": "ReaderEntityProviderTest.readsContentOfEntityStreamAsUtf8Reader()", "testcase": true, "constructor": false, "invocations": ["getBytes", "readFrom", "assertEquals", "toString"]}, "focal_class": {"identifier": "ReaderEntityProvider", "superclass": "", "interfaces": "implements EntityProvider<Reader>", "fields": [], "methods": [{"identifier": "isReadable", "parameters": "(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "full_signature": "@Override public boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "class_method_signature": "ReaderEntityProvider.isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "readFrom", "parameters": "(Class<Reader> type, Type genericType, Annotation[] annotations, MediaType mediaType,\n                           MultivaluedMap<String, String> httpHeaders, InputStream entityStream)", "modifiers": "@Override public", "return": "Reader", "signature": "Reader readFrom(Class<Reader> type, Type genericType, Annotation[] annotations, MediaType mediaType,\n                           MultivaluedMap<String, String> httpHeaders, InputStream entityStream)", "full_signature": "@Override public Reader readFrom(Class<Reader> type, Type genericType, Annotation[] annotations, MediaType mediaType,\n                           MultivaluedMap<String, String> httpHeaders, InputStream entityStream)", "class_method_signature": "ReaderEntityProvider.readFrom(Class<Reader> type, Type genericType, Annotation[] annotations, MediaType mediaType,\n                           MultivaluedMap<String, String> httpHeaders, InputStream entityStream)", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "(Reader t, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "modifiers": "@Override public", "return": "long", "signature": "long getSize(Reader t, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "full_signature": "@Override public long getSize(Reader t, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "class_method_signature": "ReaderEntityProvider.getSize(Reader t, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "isWriteable", "parameters": "(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "full_signature": "@Override public boolean isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "class_method_signature": "ReaderEntityProvider.isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "writeTo", "parameters": "(Reader reader, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders, OutputStream entityStream)", "modifiers": "@Override public", "return": "void", "signature": "void writeTo(Reader reader, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders, OutputStream entityStream)", "full_signature": "@Override public void writeTo(Reader reader, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders, OutputStream entityStream)", "class_method_signature": "ReaderEntityProvider.writeTo(Reader reader, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders, OutputStream entityStream)", "testcase": false, "constructor": false}, {"identifier": "getCharsetOrUtf8", "parameters": "(MediaType mediaType)", "modifiers": "private", "return": "String", "signature": "String getCharsetOrUtf8(MediaType mediaType)", "full_signature": "private String getCharsetOrUtf8(MediaType mediaType)", "class_method_signature": "ReaderEntityProvider.getCharsetOrUtf8(MediaType mediaType)", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/impl/provider/ReaderEntityProvider.java"}, "focal_method": {"identifier": "readFrom", "parameters": "(Class<Reader> type, Type genericType, Annotation[] annotations, MediaType mediaType,\n                           MultivaluedMap<String, String> httpHeaders, InputStream entityStream)", "modifiers": "@Override public", "return": "Reader", "body": "@Override\n    public Reader readFrom(Class<Reader> type, Type genericType, Annotation[] annotations, MediaType mediaType,\n                           MultivaluedMap<String, String> httpHeaders, InputStream entityStream) throws IOException {\n        ApplicationContext context = ApplicationContext.getCurrent();\n        if (context.isAsynchronous()) {\n            int bufferSize = context.getEverrestConfiguration().getMaxBufferSize();\n            return new InputStreamReader(IOHelper.bufferStream(entityStream, bufferSize), getCharsetOrUtf8(mediaType));\n        }\n\n        return new InputStreamReader(entityStream, getCharsetOrUtf8(mediaType));\n    }", "signature": "Reader readFrom(Class<Reader> type, Type genericType, Annotation[] annotations, MediaType mediaType,\n                           MultivaluedMap<String, String> httpHeaders, InputStream entityStream)", "full_signature": "@Override public Reader readFrom(Class<Reader> type, Type genericType, Annotation[] annotations, MediaType mediaType,\n                           MultivaluedMap<String, String> httpHeaders, InputStream entityStream)", "class_method_signature": "ReaderEntityProvider.readFrom(Class<Reader> type, Type genericType, Annotation[] annotations, MediaType mediaType,\n                           MultivaluedMap<String, String> httpHeaders, InputStream entityStream)", "testcase": false, "constructor": false, "invocations": ["getCurrent", "isAsynchronous", "getMaxBufferSize", "getEverrestConfiguration", "bufferStream", "getCharsetOrUtf8", "getCharsetOrUtf8"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}