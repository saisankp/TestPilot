{"test_class": {"identifier": "FindMissingNumberTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools-verifier/drools-verifier-drl/src/test/java/org/drools/verifier/misc/FindMissingNumberTest.java"}, "test_case": {"identifier": "testfindSumPattern", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testfindSumPattern() {\n        // Sum +2 missing number 4\n        assertTrue(FindMissingNumber.findSumPattern(\n                new BigDecimal[] { BigDecimal.valueOf(2),\n                        BigDecimal.valueOf(6), BigDecimal.valueOf(8),\n                        BigDecimal.valueOf(10) }).doubleValue() == 4);\n        // +10 missing number 50\n        assertTrue(FindMissingNumber.findSumPattern(\n                new BigDecimal[] { BigDecimal.valueOf(10),\n                        BigDecimal.valueOf(20), BigDecimal.valueOf(30),\n                        BigDecimal.valueOf(40), BigDecimal.valueOf(60),\n                        BigDecimal.valueOf(70) }).doubleValue() == 50);\n        // +66 missing number 308\n        assertTrue(FindMissingNumber.findSumPattern(\n                new BigDecimal[] { BigDecimal.valueOf(110),\n                        BigDecimal.valueOf(176), BigDecimal.valueOf(242),\n                        BigDecimal.valueOf(374) }).doubleValue() == 308);\n\n        // Deduction -2 missing number 8\n        assertTrue(FindMissingNumber.findSumPattern(\n                new BigDecimal[] { BigDecimal.valueOf(10),\n                        BigDecimal.valueOf(6), BigDecimal.valueOf(4),\n                        BigDecimal.valueOf(2) }).doubleValue() == 8);\n        // -337 missing number -11\n        assertTrue(FindMissingNumber.findSumPattern(\n                new BigDecimal[] { BigDecimal.valueOf(663),\n                        BigDecimal.valueOf(326), BigDecimal.valueOf(-348),\n                        BigDecimal.valueOf(-685) }).doubleValue() == -11);\n        // -31 missing number 4350\n        assertTrue(FindMissingNumber.findSumPattern(\n                new BigDecimal[] { BigDecimal.valueOf(4443),\n                        BigDecimal.valueOf(4412), BigDecimal.valueOf(4381),\n                        BigDecimal.valueOf(4319) }).doubleValue() == 4350);\n\n        // Not valid\n        // Not in pattern.\n        assertTrue(FindMissingNumber.findSumPattern(new BigDecimal[] {\n                BigDecimal.valueOf(1), BigDecimal.valueOf(2),\n                BigDecimal.valueOf(4), BigDecimal.valueOf(6),\n                BigDecimal.valueOf(8), BigDecimal.valueOf(11) }) == null);\n        assertTrue(FindMissingNumber.findSumPattern(new BigDecimal[] {\n                BigDecimal.valueOf(5), BigDecimal.valueOf(3),\n                BigDecimal.valueOf(54353), BigDecimal.valueOf(54554),\n                BigDecimal.valueOf(232), BigDecimal.valueOf(123) }) == null);\n        // No missing values.\n        assertTrue(FindMissingNumber.findSumPattern(new BigDecimal[] {\n                BigDecimal.valueOf(2), BigDecimal.valueOf(4),\n                BigDecimal.valueOf(6), BigDecimal.valueOf(8),\n                BigDecimal.valueOf(10), BigDecimal.valueOf(12),\n                BigDecimal.valueOf(14) }) == null);\n        assertTrue(FindMissingNumber.findSumPattern(new BigDecimal[] {\n                BigDecimal.valueOf(10), BigDecimal.valueOf(20),\n                BigDecimal.valueOf(30), BigDecimal.valueOf(40),\n                BigDecimal.valueOf(50), BigDecimal.valueOf(60) }) == null);\n        assertTrue(FindMissingNumber.findSumPattern(new BigDecimal[] {\n                BigDecimal.valueOf(-15), BigDecimal.valueOf(-10),\n                BigDecimal.valueOf(-5), BigDecimal.valueOf(0),\n                BigDecimal.valueOf(5), BigDecimal.valueOf(10),\n                BigDecimal.valueOf(15) }) == null);\n        // Under 4 values always returns null.\n        assertTrue(FindMissingNumber.findSumPattern(new BigDecimal[] {\n                BigDecimal.valueOf(2), BigDecimal.valueOf(4),\n                BigDecimal.valueOf(6) }) == null);\n        assertTrue(FindMissingNumber.findSumPattern(new BigDecimal[] {\n                BigDecimal.valueOf(2), BigDecimal.valueOf(4) }) == null);\n        assertTrue(FindMissingNumber.findSumPattern(new BigDecimal[] { BigDecimal\n                .valueOf(2) }) == null);\n    }", "signature": "void testfindSumPattern()", "full_signature": "@Test public void testfindSumPattern()", "class_method_signature": "FindMissingNumberTest.testfindSumPattern()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "doubleValue", "findSumPattern", "valueOf", "valueOf", "valueOf", "valueOf", "assertTrue", "doubleValue", "findSumPattern", "valueOf", "valueOf", "valueOf", "valueOf", "valueOf", "valueOf", "assertTrue", "doubleValue", "findSumPattern", "valueOf", "valueOf", "valueOf", "valueOf", "assertTrue", "doubleValue", "findSumPattern", "valueOf", "valueOf", "valueOf", "valueOf", "assertTrue", "doubleValue", "findSumPattern", "valueOf", "valueOf", "valueOf", "valueOf", "assertTrue", "doubleValue", "findSumPattern", "valueOf", "valueOf", "valueOf", "valueOf", "assertTrue", "findSumPattern", "valueOf", "valueOf", "valueOf", "valueOf", "valueOf", "valueOf", "assertTrue", "findSumPattern", "valueOf", "valueOf", "valueOf", "valueOf", "valueOf", "valueOf", "assertTrue", "findSumPattern", "valueOf", "valueOf", "valueOf", "valueOf", "valueOf", "valueOf", "valueOf", "assertTrue", "findSumPattern", "valueOf", "valueOf", "valueOf", "valueOf", "valueOf", "valueOf", "assertTrue", "findSumPattern", "valueOf", "valueOf", "valueOf", "valueOf", "valueOf", "valueOf", "valueOf", "assertTrue", "findSumPattern", "valueOf", "valueOf", "valueOf", "assertTrue", "findSumPattern", "valueOf", "valueOf", "assertTrue", "findSumPattern", "valueOf"]}, "focal_class": {"identifier": "FindMissingNumber", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int MIN_NUMBER_OF_RESTRICTIONS = 4;", "modifier": "public static final", "type": "int", "declarator": "MIN_NUMBER_OF_RESTRICTIONS = 4", "var_name": "MIN_NUMBER_OF_RESTRICTIONS"}], "methods": [{"identifier": "testForPattern", "parameters": "(Collection<NumberRestriction> restrictions)", "modifiers": "public static", "return": "Number", "signature": "Number testForPattern(Collection<NumberRestriction> restrictions)", "full_signature": "public static Number testForPattern(Collection<NumberRestriction> restrictions)", "class_method_signature": "FindMissingNumber.testForPattern(Collection<NumberRestriction> restrictions)", "testcase": false, "constructor": false}, {"identifier": "findSumPattern", "parameters": "(BigDecimal[] numbers)", "modifiers": "protected static", "return": "Number", "signature": "Number findSumPattern(BigDecimal[] numbers)", "full_signature": "protected static Number findSumPattern(BigDecimal[] numbers)", "class_method_signature": "FindMissingNumber.findSumPattern(BigDecimal[] numbers)", "testcase": false, "constructor": false}, {"identifier": "findMultiplicationPattern", "parameters": "(BigDecimal[] numbers)", "modifiers": "protected static", "return": "Number", "signature": "Number findMultiplicationPattern(BigDecimal[] numbers)", "full_signature": "protected static Number findMultiplicationPattern(BigDecimal[] numbers)", "class_method_signature": "FindMissingNumber.findMultiplicationPattern(BigDecimal[] numbers)", "testcase": false, "constructor": false}], "file": "drools-verifier/drools-verifier-drl/src/main/java/org/drools/verifier/misc/FindMissingNumber.java"}, "focal_method": {"identifier": "findSumPattern", "parameters": "(BigDecimal[] numbers)", "modifiers": "protected static", "return": "Number", "body": "protected static Number findSumPattern(BigDecimal[] numbers) {\n        if ( numbers == null || numbers.length < MIN_NUMBER_OF_RESTRICTIONS ) {\n            return null;\n        }\n        BigDecimal gap = null;\n        Number missingNumber = null;\n\n        BigDecimal a = numbers[0];\n        BigDecimal b = numbers[1];\n        BigDecimal c = numbers[2];\n        BigDecimal d = numbers[3];\n\n        // Uses first four numbers to check if there is a pattern and to\n        // calculate the gap between them. One missing value is allowed.\n        if ( b.subtract( a ).equals( c.subtract( b ) ) ) {\n            gap = b.subtract( a );\n        } else if ( c.subtract( b ).equals( d.subtract( c ) ) ) {\n            gap = c.subtract( b );\n        } else if ( b.subtract( a ).equals( d.subtract( c ) ) ) {\n            gap = b.subtract( a );\n        } else {\n            // No pattern found.\n            return null;\n        }\n\n        for ( int i = 0; i < (numbers.length - 1); i++ ) {\n            BigDecimal first = numbers[i];\n            BigDecimal second = numbers[i + 1];\n\n            if ( missingNumber == null && !second.subtract( first ).equals( gap ) ) {\n                missingNumber = second.subtract( gap );\n            } else if ( !second.subtract( first ).equals( gap ) && missingNumber != null ) {\n                // Happends if there is no pattern found, or more than 1\n                // missing number.\n                return null;\n            }\n        }\n\n        return missingNumber;\n    }", "signature": "Number findSumPattern(BigDecimal[] numbers)", "full_signature": "protected static Number findSumPattern(BigDecimal[] numbers)", "class_method_signature": "FindMissingNumber.findSumPattern(BigDecimal[] numbers)", "testcase": false, "constructor": false, "invocations": ["equals", "subtract", "subtract", "subtract", "equals", "subtract", "subtract", "subtract", "equals", "subtract", "subtract", "subtract", "equals", "subtract", "subtract", "equals", "subtract"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}