{"test_class": {"identifier": "KafkaPublishTargetTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DEFAULT_TOPIC = \"events\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_TOPIC = \"events\"", "var_name": "DEFAULT_TOPIC"}], "file": "services/connectivity/messaging/src/test/java/org/eclipse/ditto/services/connectivity/messaging/kafka/KafkaPublishTargetTest.java"}, "test_case": {"identifier": "invalidPartitionThrowsError", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void invalidPartitionThrowsError() {\n        assertThatExceptionOfType(ConnectionConfigurationInvalidException.class)\n                .isThrownBy(() -> KafkaPublishTarget.fromTargetAddress(\"events#notAnInteger\"));\n    }", "signature": "void invalidPartitionThrowsError()", "full_signature": "@Test public void invalidPartitionThrowsError()", "class_method_signature": "KafkaPublishTargetTest.invalidPartitionThrowsError()", "testcase": true, "constructor": false, "invocations": ["isThrownBy", "assertThatExceptionOfType", "fromTargetAddress"]}, "focal_class": {"identifier": "KafkaPublishTarget", "superclass": "", "interfaces": "implements PublishTarget", "fields": [{"original_string": "static final String KEY_SEPARATOR = \"/\";", "modifier": "static final", "type": "String", "declarator": "KEY_SEPARATOR = \"/\"", "var_name": "KEY_SEPARATOR"}, {"original_string": "static final String PARTITION_SEPARATOR = \"#\";", "modifier": "static final", "type": "String", "declarator": "PARTITION_SEPARATOR = \"#\"", "var_name": "PARTITION_SEPARATOR"}, {"original_string": "private final String topic;", "modifier": "private final", "type": "String", "declarator": "topic", "var_name": "topic"}, {"original_string": "private final String key;", "modifier": "private final", "type": "String", "declarator": "key", "var_name": "key"}, {"original_string": "private final Integer partition;", "modifier": "private final", "type": "Integer", "declarator": "partition", "var_name": "partition"}], "methods": [{"identifier": "KafkaPublishTarget", "parameters": "(final String topic, @Nullable final String key, @Nullable final Integer partition)", "modifiers": "private", "return": "", "signature": " KafkaPublishTarget(final String topic, @Nullable final String key, @Nullable final Integer partition)", "full_signature": "private  KafkaPublishTarget(final String topic, @Nullable final String key, @Nullable final Integer partition)", "class_method_signature": "KafkaPublishTarget.KafkaPublishTarget(final String topic, @Nullable final String key, @Nullable final Integer partition)", "testcase": false, "constructor": true}, {"identifier": "fromTargetAddress", "parameters": "(final String targetAddress)", "modifiers": "static", "return": "KafkaPublishTarget", "signature": "KafkaPublishTarget fromTargetAddress(final String targetAddress)", "full_signature": "static KafkaPublishTarget fromTargetAddress(final String targetAddress)", "class_method_signature": "KafkaPublishTarget.fromTargetAddress(final String targetAddress)", "testcase": false, "constructor": false}, {"identifier": "containsKey", "parameters": "(final String targetAddress)", "modifiers": "static", "return": "boolean", "signature": "boolean containsKey(final String targetAddress)", "full_signature": "static boolean containsKey(final String targetAddress)", "class_method_signature": "KafkaPublishTarget.containsKey(final String targetAddress)", "testcase": false, "constructor": false}, {"identifier": "fromTargetAddressWithKey", "parameters": "(final String targetAddress)", "modifiers": "private static", "return": "KafkaPublishTarget", "signature": "KafkaPublishTarget fromTargetAddressWithKey(final String targetAddress)", "full_signature": "private static KafkaPublishTarget fromTargetAddressWithKey(final String targetAddress)", "class_method_signature": "KafkaPublishTarget.fromTargetAddressWithKey(final String targetAddress)", "testcase": false, "constructor": false}, {"identifier": "validateKey", "parameters": "(final String key)", "modifiers": "@Nullable private static", "return": "String", "signature": "String validateKey(final String key)", "full_signature": "@Nullable private static String validateKey(final String key)", "class_method_signature": "KafkaPublishTarget.validateKey(final String key)", "testcase": false, "constructor": false}, {"identifier": "containsPartition", "parameters": "(final String targetAddress)", "modifiers": "static", "return": "boolean", "signature": "boolean containsPartition(final String targetAddress)", "full_signature": "static boolean containsPartition(final String targetAddress)", "class_method_signature": "KafkaPublishTarget.containsPartition(final String targetAddress)", "testcase": false, "constructor": false}, {"identifier": "fromTargetAddressWithPartition", "parameters": "(final String targetAddress)", "modifiers": "private static", "return": "KafkaPublishTarget", "signature": "KafkaPublishTarget fromTargetAddressWithPartition(final String targetAddress)", "full_signature": "private static KafkaPublishTarget fromTargetAddressWithPartition(final String targetAddress)", "class_method_signature": "KafkaPublishTarget.fromTargetAddressWithPartition(final String targetAddress)", "testcase": false, "constructor": false}, {"identifier": "validatePartition", "parameters": "(final String partitionString)", "modifiers": "@Nullable private static", "return": "Integer", "signature": "Integer validatePartition(final String partitionString)", "full_signature": "@Nullable private static Integer validatePartition(final String partitionString)", "class_method_signature": "KafkaPublishTarget.validatePartition(final String partitionString)", "testcase": false, "constructor": false}, {"identifier": "fromTargetAddressWithOnlyTopic", "parameters": "(final String targetAddress)", "modifiers": "private static", "return": "KafkaPublishTarget", "signature": "KafkaPublishTarget fromTargetAddressWithOnlyTopic(final String targetAddress)", "full_signature": "private static KafkaPublishTarget fromTargetAddressWithOnlyTopic(final String targetAddress)", "class_method_signature": "KafkaPublishTarget.fromTargetAddressWithOnlyTopic(final String targetAddress)", "testcase": false, "constructor": false}, {"identifier": "validateTopic", "parameters": "(final String topic)", "modifiers": "private static", "return": "String", "signature": "String validateTopic(final String topic)", "full_signature": "private static String validateTopic(final String topic)", "class_method_signature": "KafkaPublishTarget.validateTopic(final String topic)", "testcase": false, "constructor": false}, {"identifier": "parsePartitionOrThrow", "parameters": "(final String partitionString)", "modifiers": "private static", "return": "Integer", "signature": "Integer parsePartitionOrThrow(final String partitionString)", "full_signature": "private static Integer parsePartitionOrThrow(final String partitionString)", "class_method_signature": "KafkaPublishTarget.parsePartitionOrThrow(final String partitionString)", "testcase": false, "constructor": false}, {"identifier": "getTopic", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getTopic()", "full_signature": " String getTopic()", "class_method_signature": "KafkaPublishTarget.getTopic()", "testcase": false, "constructor": false}, {"identifier": "getKey", "parameters": "()", "modifiers": "", "return": "Optional<String>", "signature": "Optional<String> getKey()", "full_signature": " Optional<String> getKey()", "class_method_signature": "KafkaPublishTarget.getKey()", "testcase": false, "constructor": false}, {"identifier": "getPartition", "parameters": "()", "modifiers": "", "return": "Optional<Integer>", "signature": "Optional<Integer> getPartition()", "full_signature": " Optional<Integer> getPartition()", "class_method_signature": "KafkaPublishTarget.getPartition()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(@Nullable final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(@Nullable final Object o)", "full_signature": "@Override public boolean equals(@Nullable final Object o)", "class_method_signature": "KafkaPublishTarget.equals(@Nullable final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "KafkaPublishTarget.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "KafkaPublishTarget.toString()", "testcase": false, "constructor": false}], "file": "services/connectivity/messaging/src/main/java/org/eclipse/ditto/services/connectivity/messaging/kafka/KafkaPublishTarget.java"}, "focal_method": {"identifier": "fromTargetAddress", "parameters": "(final String targetAddress)", "modifiers": "static", "return": "KafkaPublishTarget", "body": "static KafkaPublishTarget fromTargetAddress(final String targetAddress) {\n        if (containsKey(targetAddress)) {\n            return fromTargetAddressWithKey(targetAddress);\n        } else if (containsPartition(targetAddress)) {\n            return fromTargetAddressWithPartition(targetAddress);\n        }\n\n        return fromTargetAddressWithOnlyTopic(targetAddress);\n    }", "signature": "KafkaPublishTarget fromTargetAddress(final String targetAddress)", "full_signature": "static KafkaPublishTarget fromTargetAddress(final String targetAddress)", "class_method_signature": "KafkaPublishTarget.fromTargetAddress(final String targetAddress)", "testcase": false, "constructor": false, "invocations": ["containsKey", "fromTargetAddressWithKey", "containsPartition", "fromTargetAddressWithPartition", "fromTargetAddressWithOnlyTopic"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}