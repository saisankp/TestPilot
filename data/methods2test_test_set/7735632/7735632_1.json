{"test_class": {"identifier": "XmlHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "fx-onscreen-keyboard/src/test/java/org/comtel2000/keyboard/xml/XmlHelperTest.java"}, "test_case": {"identifier": "readIntAttribute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void readIntAttribute() throws XMLStreamException, FactoryConfigurationError, IOException {\n    URL url = XmlHelperTest.class.getResource(\"/xml/default/kb-layout.xml\");\n    XMLStreamReader reader = XMLInputFactory.newInstance().createXMLStreamReader(url.openStream());\n    reader.next();\n    reader.require(XMLStreamConstants.START_ELEMENT, null, XmlHelper.KEYBOARD);\n\n    assertEquals(Integer.valueOf(40),\n        XmlHelper.readIntAttribute(reader, XmlHelper.ATTR_KEY_WIDTH).orElse(-1));\n    assertEquals(Integer.valueOf(30),\n        XmlHelper.readIntAttribute(reader, XmlHelper.ATTR_KEY_HEIGHT).orElse(-1));\n    assertEquals(Integer.valueOf(0),\n        XmlHelper.readIntAttribute(reader, XmlHelper.ATTR_H_GAP).orElse(-1));\n    assertEquals(Integer.valueOf(0),\n        XmlHelper.readIntAttribute(reader, XmlHelper.ATTR_V_GAP).orElse(-1));\n    assertNull(XmlHelper.readIntAttribute(reader, \"verticalGapX\").orElse(null));\n\n    assertEquals(40, XmlHelper.readIntAttribute(reader, XmlHelper.ATTR_KEY_WIDTH, 1));\n    assertEquals(30, XmlHelper.readIntAttribute(reader, XmlHelper.ATTR_KEY_HEIGHT, 1));\n    assertEquals(0, XmlHelper.readIntAttribute(reader, XmlHelper.ATTR_H_GAP, 1));\n    assertEquals(0, XmlHelper.readIntAttribute(reader, XmlHelper.ATTR_V_GAP, 1));\n    assertEquals(1, XmlHelper.readIntAttribute(reader, \"verticalGapX\", 1));\n    assertEquals(1, XmlHelper.readIntAttribute(reader, \"\", 1));\n    assertEquals(1, XmlHelper.readIntAttribute(reader, null, 1));\n  }", "signature": "void readIntAttribute()", "full_signature": "@Test public void readIntAttribute()", "class_method_signature": "XmlHelperTest.readIntAttribute()", "testcase": true, "constructor": false, "invocations": ["getResource", "createXMLStreamReader", "newInstance", "openStream", "next", "require", "assertEquals", "valueOf", "orElse", "readIntAttribute", "assertEquals", "valueOf", "orElse", "readIntAttribute", "assertEquals", "valueOf", "orElse", "readIntAttribute", "assertEquals", "valueOf", "orElse", "readIntAttribute", "assertNull", "orElse", "readIntAttribute", "assertEquals", "readIntAttribute", "assertEquals", "readIntAttribute", "assertEquals", "readIntAttribute", "assertEquals", "readIntAttribute", "assertEquals", "readIntAttribute", "assertEquals", "readIntAttribute", "assertEquals", "readIntAttribute"]}, "focal_class": {"identifier": "XmlHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String KEYBOARD = \"Keyboard\";", "modifier": "public static final", "type": "String", "declarator": "KEYBOARD = \"Keyboard\"", "var_name": "KEYBOARD"}, {"original_string": "public static final String ROW = \"Row\";", "modifier": "public static final", "type": "String", "declarator": "ROW = \"Row\"", "var_name": "ROW"}, {"original_string": "public static final String KEY = \"Key\";", "modifier": "public static final", "type": "String", "declarator": "KEY = \"Key\"", "var_name": "KEY"}, {"original_string": "public static final String ATTR_KEY_WIDTH = \"keyWidth\";", "modifier": "public static final", "type": "String", "declarator": "ATTR_KEY_WIDTH = \"keyWidth\"", "var_name": "ATTR_KEY_WIDTH"}, {"original_string": "public static final String ATTR_KEY_HEIGHT = \"keyHeight\";", "modifier": "public static final", "type": "String", "declarator": "ATTR_KEY_HEIGHT = \"keyHeight\"", "var_name": "ATTR_KEY_HEIGHT"}, {"original_string": "public static final String ATTR_H_GAP = \"horizontalGap\";", "modifier": "public static final", "type": "String", "declarator": "ATTR_H_GAP = \"horizontalGap\"", "var_name": "ATTR_H_GAP"}, {"original_string": "public static final String ATTR_V_GAP = \"verticalGap\";", "modifier": "public static final", "type": "String", "declarator": "ATTR_V_GAP = \"verticalGap\"", "var_name": "ATTR_V_GAP"}, {"original_string": "public static final String ATTR_ROW_EDGE_FLAGS = \"rowEdgeFlags\";", "modifier": "public static final", "type": "String", "declarator": "ATTR_ROW_EDGE_FLAGS = \"rowEdgeFlags\"", "var_name": "ATTR_ROW_EDGE_FLAGS"}, {"original_string": "public static final String ATTR_KEY_EDGE_FLAGS = \"keyEdgeFlags\";", "modifier": "public static final", "type": "String", "declarator": "ATTR_KEY_EDGE_FLAGS = \"keyEdgeFlags\"", "var_name": "ATTR_KEY_EDGE_FLAGS"}, {"original_string": "public static final String ATTR_KEY_LABEL = \"keyLabel\";", "modifier": "public static final", "type": "String", "declarator": "ATTR_KEY_LABEL = \"keyLabel\"", "var_name": "ATTR_KEY_LABEL"}, {"original_string": "public static final String ATTR_KEY_LABEL_STYLE = \"keyLabelStyle\";", "modifier": "public static final", "type": "String", "declarator": "ATTR_KEY_LABEL_STYLE = \"keyLabelStyle\"", "var_name": "ATTR_KEY_LABEL_STYLE"}, {"original_string": "public static final String ATTR_KEY_ICON_STYLE = \"keyIconStyle\";", "modifier": "public static final", "type": "String", "declarator": "ATTR_KEY_ICON_STYLE = \"keyIconStyle\"", "var_name": "ATTR_KEY_ICON_STYLE"}, {"original_string": "public static final String ATTR_KEY_OUTPUT_TEXT = \"keyOutputText\";", "modifier": "public static final", "type": "String", "declarator": "ATTR_KEY_OUTPUT_TEXT = \"keyOutputText\"", "var_name": "ATTR_KEY_OUTPUT_TEXT"}, {"original_string": "public static final String ATTR_CODES = \"codes\";", "modifier": "public static final", "type": "String", "declarator": "ATTR_CODES = \"codes\"", "var_name": "ATTR_CODES"}, {"original_string": "public static final String ATTR_MOVABLE = \"movable\";", "modifier": "public static final", "type": "String", "declarator": "ATTR_MOVABLE = \"movable\"", "var_name": "ATTR_MOVABLE"}, {"original_string": "public static final String ATTR_REPEATABLE = \"repeatable\";", "modifier": "public static final", "type": "String", "declarator": "ATTR_REPEATABLE = \"repeatable\"", "var_name": "ATTR_REPEATABLE"}, {"original_string": "public static final String ATTR_STICKY = \"sticky\";", "modifier": "public static final", "type": "String", "declarator": "ATTR_STICKY = \"sticky\"", "var_name": "ATTR_STICKY"}, {"original_string": "public static final String FLAG_RIGHT = \"right\";", "modifier": "public static final", "type": "String", "declarator": "FLAG_RIGHT = \"right\"", "var_name": "FLAG_RIGHT"}, {"original_string": "public static final String FLAG_LEFT = \"left\";", "modifier": "public static final", "type": "String", "declarator": "FLAG_LEFT = \"left\"", "var_name": "FLAG_LEFT"}], "methods": [{"identifier": "XmlHelper", "parameters": "()", "modifiers": "private", "return": "", "signature": " XmlHelper()", "full_signature": "private  XmlHelper()", "class_method_signature": "XmlHelper.XmlHelper()", "testcase": false, "constructor": true}, {"identifier": "readAttribute", "parameters": "(XMLStreamReader reader, String attr)", "modifiers": "public static", "return": "Optional<String>", "signature": "Optional<String> readAttribute(XMLStreamReader reader, String attr)", "full_signature": "public static Optional<String> readAttribute(XMLStreamReader reader, String attr)", "class_method_signature": "XmlHelper.readAttribute(XMLStreamReader reader, String attr)", "testcase": false, "constructor": false}, {"identifier": "readIntAttribute", "parameters": "(XMLStreamReader reader, String attr)", "modifiers": "public static", "return": "Optional<Integer>", "signature": "Optional<Integer> readIntAttribute(XMLStreamReader reader, String attr)", "full_signature": "public static Optional<Integer> readIntAttribute(XMLStreamReader reader, String attr)", "class_method_signature": "XmlHelper.readIntAttribute(XMLStreamReader reader, String attr)", "testcase": false, "constructor": false}, {"identifier": "readDoubleAttribute", "parameters": "(XMLStreamReader reader, String attr)", "modifiers": "public static", "return": "Optional<Double>", "signature": "Optional<Double> readDoubleAttribute(XMLStreamReader reader, String attr)", "full_signature": "public static Optional<Double> readDoubleAttribute(XMLStreamReader reader, String attr)", "class_method_signature": "XmlHelper.readDoubleAttribute(XMLStreamReader reader, String attr)", "testcase": false, "constructor": false}, {"identifier": "readIntAttribute", "parameters": "(XMLStreamReader reader, String attr, int defaultValue)", "modifiers": "public static", "return": "int", "signature": "int readIntAttribute(XMLStreamReader reader, String attr, int defaultValue)", "full_signature": "public static int readIntAttribute(XMLStreamReader reader, String attr, int defaultValue)", "class_method_signature": "XmlHelper.readIntAttribute(XMLStreamReader reader, String attr, int defaultValue)", "testcase": false, "constructor": false}, {"identifier": "readDoubleAttribute", "parameters": "(XMLStreamReader reader, String attr, double defaultValue)", "modifiers": "public static", "return": "double", "signature": "double readDoubleAttribute(XMLStreamReader reader, String attr, double defaultValue)", "full_signature": "public static double readDoubleAttribute(XMLStreamReader reader, String attr, double defaultValue)", "class_method_signature": "XmlHelper.readDoubleAttribute(XMLStreamReader reader, String attr, double defaultValue)", "testcase": false, "constructor": false}, {"identifier": "readBooleanAttribute", "parameters": "(XMLStreamReader reader, String attr,\n      boolean defaultValue)", "modifiers": "public static", "return": "boolean", "signature": "boolean readBooleanAttribute(XMLStreamReader reader, String attr,\n      boolean defaultValue)", "full_signature": "public static boolean readBooleanAttribute(XMLStreamReader reader, String attr,\n      boolean defaultValue)", "class_method_signature": "XmlHelper.readBooleanAttribute(XMLStreamReader reader, String attr,\n      boolean defaultValue)", "testcase": false, "constructor": false}, {"identifier": "parseInt", "parameters": "(String i)", "modifiers": "public static", "return": "int", "signature": "int parseInt(String i)", "full_signature": "public static int parseInt(String i)", "class_method_signature": "XmlHelper.parseInt(String i)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(XMLStreamReader reader)", "modifiers": "public static", "return": "void", "signature": "void close(XMLStreamReader reader)", "full_signature": "public static void close(XMLStreamReader reader)", "class_method_signature": "XmlHelper.close(XMLStreamReader reader)", "testcase": false, "constructor": false}], "file": "fx-onscreen-keyboard/src/main/java/org/comtel2000/keyboard/xml/XmlHelper.java"}, "focal_method": {"identifier": "readIntAttribute", "parameters": "(XMLStreamReader reader, String attr)", "modifiers": "public static", "return": "Optional<Integer>", "body": "public static Optional<Integer> readIntAttribute(XMLStreamReader reader, String attr) {\n    return Optional.ofNullable(reader.getAttributeValue(null, attr)).flatMap(s -> {\n      try {\n        return Optional.of(Integer.valueOf(s));\n      } catch (NumberFormatException e) {\n        return Optional.empty();\n      }\n    });\n  }", "signature": "Optional<Integer> readIntAttribute(XMLStreamReader reader, String attr)", "full_signature": "public static Optional<Integer> readIntAttribute(XMLStreamReader reader, String attr)", "class_method_signature": "XmlHelper.readIntAttribute(XMLStreamReader reader, String attr)", "testcase": false, "constructor": false, "invocations": ["flatMap", "ofNullable", "getAttributeValue", "of", "valueOf", "empty"]}, "repository": {"repo_id": 7735632, "url": "https://github.com/comtel2000/fx-experience", "language": "Java", "is_fork": false, "fork_count": 49, "stargazer_count": 62, "size": 2363, "license": "licensed"}}