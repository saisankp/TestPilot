{"test_class": {"identifier": "PrimitiveBoxedUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Class<?>[] primitives = {Boolean.TYPE,\n            Byte.TYPE, Character.TYPE, Float.TYPE, Integer.TYPE,\n            Long.TYPE, Short.TYPE, Double.TYPE};", "modifier": "private static final", "type": "Class<?>[]", "declarator": "primitives = {Boolean.TYPE,\n            Byte.TYPE, Character.TYPE, Float.TYPE, Integer.TYPE,\n            Long.TYPE, Short.TYPE, Double.TYPE}", "var_name": "primitives"}, {"original_string": "private static final Class<?>[] boxeds = {Boolean.class,\n            Byte.class, Character.class, Float.class, Integer.class,\n            Long.class, Short.class, Double.class};", "modifier": "private static final", "type": "Class<?>[]", "declarator": "boxeds = {Boolean.class,\n            Byte.class, Character.class, Float.class, Integer.class,\n            Long.class, Short.class, Double.class}", "var_name": "boxeds"}, {"original_string": "private static final int types = primitives.length;", "modifier": "private static final", "type": "int", "declarator": "types = primitives.length", "var_name": "types"}], "file": "kie-pmml-trusty/kie-pmml-commons/src/test/java/org/kie/pmml/commons/utils/PrimitiveBoxedUtilsTest.java"}, "test_case": {"identifier": "getKiePMMLPrimitiveBoxed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getKiePMMLPrimitiveBoxed() {\n        for (int i = 0; i < types; i++) {\n            assertTrue(PrimitiveBoxedUtils.getKiePMMLPrimitiveBoxed(primitives[i]).isPresent());\n            assertTrue(PrimitiveBoxedUtils.getKiePMMLPrimitiveBoxed(boxeds[i]).isPresent());\n        }\n        assertFalse(PrimitiveBoxedUtils.getKiePMMLPrimitiveBoxed(String.class).isPresent());\n    }", "signature": "void getKiePMMLPrimitiveBoxed()", "full_signature": "@Test public void getKiePMMLPrimitiveBoxed()", "class_method_signature": "PrimitiveBoxedUtilsTest.getKiePMMLPrimitiveBoxed()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isPresent", "getKiePMMLPrimitiveBoxed", "assertTrue", "isPresent", "getKiePMMLPrimitiveBoxed", "assertFalse", "isPresent", "getKiePMMLPrimitiveBoxed"]}, "focal_class": {"identifier": "PrimitiveBoxedUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Set<PrimitiveBoxed> KIE_PMML_PRIMITIVE_BOXEDS = new HashSet<>(\n            Arrays.asList(new PrimitiveBoxed(Boolean.TYPE, Boolean.class),\n                          new PrimitiveBoxed(Byte.TYPE, Byte.class),\n                          new PrimitiveBoxed(Character.TYPE, Character.class),\n                          new PrimitiveBoxed(Float.TYPE, Float.class),\n                          new PrimitiveBoxed(Integer.TYPE, Integer.class),\n                          new PrimitiveBoxed(Long.TYPE, Long.class),\n                          new PrimitiveBoxed(Short.TYPE, Short.class),\n                          new PrimitiveBoxed(Double.TYPE, Double.class)));", "modifier": "private static final", "type": "Set<PrimitiveBoxed>", "declarator": "KIE_PMML_PRIMITIVE_BOXEDS = new HashSet<>(\n            Arrays.asList(new PrimitiveBoxed(Boolean.TYPE, Boolean.class),\n                          new PrimitiveBoxed(Byte.TYPE, Byte.class),\n                          new PrimitiveBoxed(Character.TYPE, Character.class),\n                          new PrimitiveBoxed(Float.TYPE, Float.class),\n                          new PrimitiveBoxed(Integer.TYPE, Integer.class),\n                          new PrimitiveBoxed(Long.TYPE, Long.class),\n                          new PrimitiveBoxed(Short.TYPE, Short.class),\n                          new PrimitiveBoxed(Double.TYPE, Double.class)))", "var_name": "KIE_PMML_PRIMITIVE_BOXEDS"}], "methods": [{"identifier": "PrimitiveBoxedUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " PrimitiveBoxedUtils()", "full_signature": "private  PrimitiveBoxedUtils()", "class_method_signature": "PrimitiveBoxedUtils.PrimitiveBoxedUtils()", "testcase": false, "constructor": true}, {"identifier": "getKiePMMLPrimitiveBoxed", "parameters": "(Class<?> c)", "modifiers": "public static", "return": "Optional<PrimitiveBoxed>", "signature": "Optional<PrimitiveBoxed> getKiePMMLPrimitiveBoxed(Class<?> c)", "full_signature": "public static Optional<PrimitiveBoxed> getKiePMMLPrimitiveBoxed(Class<?> c)", "class_method_signature": "PrimitiveBoxedUtils.getKiePMMLPrimitiveBoxed(Class<?> c)", "testcase": false, "constructor": false}, {"identifier": "areSameWithBoxing", "parameters": "(Class<?> a, Class<?> b)", "modifiers": "public static", "return": "boolean", "signature": "boolean areSameWithBoxing(Class<?> a, Class<?> b)", "full_signature": "public static boolean areSameWithBoxing(Class<?> a, Class<?> b)", "class_method_signature": "PrimitiveBoxedUtils.areSameWithBoxing(Class<?> a, Class<?> b)", "testcase": false, "constructor": false}], "file": "kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/utils/PrimitiveBoxedUtils.java"}, "focal_method": {"identifier": "getKiePMMLPrimitiveBoxed", "parameters": "(Class<?> c)", "modifiers": "public static", "return": "Optional<PrimitiveBoxed>", "body": "public static Optional<PrimitiveBoxed> getKiePMMLPrimitiveBoxed(Class<?> c) {\n        return KIE_PMML_PRIMITIVE_BOXEDS.stream().filter(pBoxed -> c.equals(pBoxed.getPrimitive()) || c.equals(pBoxed.getBoxed())).findFirst();\n    }", "signature": "Optional<PrimitiveBoxed> getKiePMMLPrimitiveBoxed(Class<?> c)", "full_signature": "public static Optional<PrimitiveBoxed> getKiePMMLPrimitiveBoxed(Class<?> c)", "class_method_signature": "PrimitiveBoxedUtils.getKiePMMLPrimitiveBoxed(Class<?> c)", "testcase": false, "constructor": false, "invocations": ["findFirst", "filter", "stream", "equals", "getPrimitive", "equals", "getBoxed"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}