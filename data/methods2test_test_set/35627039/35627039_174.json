{"test_class": {"identifier": "SchemaValueConverterTest", "superclass": "", "interfaces": "", "fields": [], "file": "common/src/test/java/com/hortonworks/streamline/common/SchemaValueConverterTest.java"}, "test_case": {"identifier": "convertFloatToDouble", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void convertFloatToDouble() throws ParserException {\n        Object converted = SchemaValueConverter.convert(Schema.Type.DOUBLE, Float.MAX_VALUE);\n        Assert.assertTrue(Schema.Type.DOUBLE.valueOfSameType(converted));\n        Assert.assertEquals(Float.MAX_VALUE, (double) converted, 0.00001);\n\n        converted = SchemaValueConverter.convert(Schema.Type.DOUBLE, Float.MIN_VALUE);\n        Assert.assertTrue(Schema.Type.DOUBLE.valueOfSameType(converted));\n        Assert.assertEquals(Float.MIN_VALUE, (double) converted, 0.00001);\n    }", "signature": "void convertFloatToDouble()", "full_signature": "@Test public void convertFloatToDouble()", "class_method_signature": "SchemaValueConverterTest.convertFloatToDouble()", "testcase": true, "constructor": false, "invocations": ["convert", "assertTrue", "valueOfSameType", "assertEquals", "convert", "assertTrue", "valueOfSameType", "assertEquals"]}, "focal_class": {"identifier": "SchemaValueConverter", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "SchemaValueConverter", "parameters": "()", "modifiers": "private", "return": "", "signature": " SchemaValueConverter()", "full_signature": "private  SchemaValueConverter()", "class_method_signature": "SchemaValueConverter.SchemaValueConverter()", "testcase": false, "constructor": true}, {"identifier": "convertMap", "parameters": "(Schema schema, Map<String, Object> value)", "modifiers": "public static", "return": "Map<String, Object>", "signature": "Map<String, Object> convertMap(Schema schema, Map<String, Object> value)", "full_signature": "public static Map<String, Object> convertMap(Schema schema, Map<String, Object> value)", "class_method_signature": "SchemaValueConverter.convertMap(Schema schema, Map<String, Object> value)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(Schema.Type type, Object value)", "modifiers": "public static", "return": "Object", "signature": "Object convert(Schema.Type type, Object value)", "full_signature": "public static Object convert(Schema.Type type, Object value)", "class_method_signature": "SchemaValueConverter.convert(Schema.Type type, Object value)", "testcase": false, "constructor": false}, {"identifier": "convertNumber", "parameters": "(com.hortonworks.registries.common.Schema.Type type, Object value)", "modifiers": "private static", "return": "Object", "signature": "Object convertNumber(com.hortonworks.registries.common.Schema.Type type, Object value)", "full_signature": "private static Object convertNumber(com.hortonworks.registries.common.Schema.Type type, Object value)", "class_method_signature": "SchemaValueConverter.convertNumber(com.hortonworks.registries.common.Schema.Type type, Object value)", "testcase": false, "constructor": false}], "file": "common/src/main/java/com/hortonworks/streamline/common/SchemaValueConverter.java"}, "focal_method": {"identifier": "convert", "parameters": "(Schema.Type type, Object value)", "modifiers": "public static", "return": "Object", "body": "public static Object convert(Schema.Type type, Object value) {\n        if (value == null) {\n            return null;\n        }\n\n        switch (type) {\n            case BOOLEAN:\n                if (value instanceof Boolean) {\n                    return value;\n                } else if (value instanceof String) {\n                    return Boolean.valueOf((String) value);\n                }\n                break;\n\n            case BYTE:\n            case SHORT:\n            case INTEGER:\n            case LONG:\n            case FLOAT:\n            case DOUBLE:\n                return convertNumber(type, value);\n\n            case STRING:\n                if (value instanceof String) {\n                    return value;\n                }\n                break;\n\n            case BINARY:\n                if (value instanceof byte[]) {\n                    return value;\n                }\n                break;\n\n            case NESTED:\n                if (value instanceof Map) {\n                    return value;\n                }\n                break;\n\n            case ARRAY:\n                if (value instanceof List) {\n                    return value;\n                }\n                break;\n\n        }\n\n        throw new IllegalArgumentException(\"Cannot convert value \" + value + \" with Java type class \" +\n                value.getClass() + \" to type \" + type);\n    }", "signature": "Object convert(Schema.Type type, Object value)", "full_signature": "public static Object convert(Schema.Type type, Object value)", "class_method_signature": "SchemaValueConverter.convert(Schema.Type type, Object value)", "testcase": false, "constructor": false, "invocations": ["valueOf", "convertNumber", "getClass"]}, "repository": {"repo_id": 35627039, "url": "https://github.com/hortonworks/streamline", "language": "Java", "is_fork": false, "fork_count": 94, "stargazer_count": 147, "size": 69226, "license": "licensed"}}