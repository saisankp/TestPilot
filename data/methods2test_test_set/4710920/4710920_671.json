{"test_class": {"identifier": "ClassUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-common/src/test/java/org/apache/dubbo/common/compiler/support/ClassUtilsTest.java"}, "test_case": {"identifier": "testGetBoxedClass", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetBoxedClass() {\n        Assertions.assertEquals(Boolean.class, ClassUtils.getBoxedClass(boolean.class));\n        Assertions.assertEquals(Character.class, ClassUtils.getBoxedClass(char.class));\n        Assertions.assertEquals(Byte.class, ClassUtils.getBoxedClass(byte.class));\n        Assertions.assertEquals(Short.class, ClassUtils.getBoxedClass(short.class));\n        Assertions.assertEquals(Integer.class, ClassUtils.getBoxedClass(int.class));\n        Assertions.assertEquals(Long.class, ClassUtils.getBoxedClass(long.class));\n        Assertions.assertEquals(Float.class, ClassUtils.getBoxedClass(float.class));\n        Assertions.assertEquals(Double.class, ClassUtils.getBoxedClass(double.class));\n        Assertions.assertEquals(ClassUtilsTest.class, ClassUtils.getBoxedClass(ClassUtilsTest.class));\n    }", "signature": "void testGetBoxedClass()", "full_signature": "@Test public void testGetBoxedClass()", "class_method_signature": "ClassUtilsTest.testGetBoxedClass()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getBoxedClass", "assertEquals", "getBoxedClass", "assertEquals", "getBoxedClass", "assertEquals", "getBoxedClass", "assertEquals", "getBoxedClass", "assertEquals", "getBoxedClass", "assertEquals", "getBoxedClass", "assertEquals", "getBoxedClass", "assertEquals", "getBoxedClass"]}, "focal_class": {"identifier": "ClassUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String CLASS_EXTENSION = \".class\";", "modifier": "public static final", "type": "String", "declarator": "CLASS_EXTENSION = \".class\"", "var_name": "CLASS_EXTENSION"}, {"original_string": "public static final String JAVA_EXTENSION = \".java\";", "modifier": "public static final", "type": "String", "declarator": "JAVA_EXTENSION = \".java\"", "var_name": "JAVA_EXTENSION"}, {"original_string": "private static final int JIT_LIMIT = 5 * 1024;", "modifier": "private static final", "type": "int", "declarator": "JIT_LIMIT = 5 * 1024", "var_name": "JIT_LIMIT"}], "methods": [{"identifier": "ClassUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " ClassUtils()", "full_signature": "private  ClassUtils()", "class_method_signature": "ClassUtils.ClassUtils()", "testcase": false, "constructor": true}, {"identifier": "newInstance", "parameters": "(String name)", "modifiers": "public static", "return": "Object", "signature": "Object newInstance(String name)", "full_signature": "public static Object newInstance(String name)", "class_method_signature": "ClassUtils.newInstance(String name)", "testcase": false, "constructor": false}, {"identifier": "forName", "parameters": "(String[] packages, String className)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> forName(String[] packages, String className)", "full_signature": "public static Class<?> forName(String[] packages, String className)", "class_method_signature": "ClassUtils.forName(String[] packages, String className)", "testcase": false, "constructor": false}, {"identifier": "forName", "parameters": "(String className)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> forName(String className)", "full_signature": "public static Class<?> forName(String className)", "class_method_signature": "ClassUtils.forName(String className)", "testcase": false, "constructor": false}, {"identifier": "classForName", "parameters": "(String className)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> classForName(String className)", "full_signature": "public static Class<?> classForName(String className)", "class_method_signature": "ClassUtils.classForName(String className)", "testcase": false, "constructor": false}, {"identifier": "arrayForName", "parameters": "(String className)", "modifiers": "private static", "return": "Class<?>", "signature": "Class<?> arrayForName(String className)", "full_signature": "private static Class<?> arrayForName(String className)", "class_method_signature": "ClassUtils.arrayForName(String className)", "testcase": false, "constructor": false}, {"identifier": "getBoxedClass", "parameters": "(Class<?> type)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getBoxedClass(Class<?> type)", "full_signature": "public static Class<?> getBoxedClass(Class<?> type)", "class_method_signature": "ClassUtils.getBoxedClass(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "boxed", "parameters": "(boolean v)", "modifiers": "public static", "return": "Boolean", "signature": "Boolean boxed(boolean v)", "full_signature": "public static Boolean boxed(boolean v)", "class_method_signature": "ClassUtils.boxed(boolean v)", "testcase": false, "constructor": false}, {"identifier": "boxed", "parameters": "(char v)", "modifiers": "public static", "return": "Character", "signature": "Character boxed(char v)", "full_signature": "public static Character boxed(char v)", "class_method_signature": "ClassUtils.boxed(char v)", "testcase": false, "constructor": false}, {"identifier": "boxed", "parameters": "(byte v)", "modifiers": "public static", "return": "Byte", "signature": "Byte boxed(byte v)", "full_signature": "public static Byte boxed(byte v)", "class_method_signature": "ClassUtils.boxed(byte v)", "testcase": false, "constructor": false}, {"identifier": "boxed", "parameters": "(short v)", "modifiers": "public static", "return": "Short", "signature": "Short boxed(short v)", "full_signature": "public static Short boxed(short v)", "class_method_signature": "ClassUtils.boxed(short v)", "testcase": false, "constructor": false}, {"identifier": "boxed", "parameters": "(int v)", "modifiers": "public static", "return": "Integer", "signature": "Integer boxed(int v)", "full_signature": "public static Integer boxed(int v)", "class_method_signature": "ClassUtils.boxed(int v)", "testcase": false, "constructor": false}, {"identifier": "boxed", "parameters": "(long v)", "modifiers": "public static", "return": "Long", "signature": "Long boxed(long v)", "full_signature": "public static Long boxed(long v)", "class_method_signature": "ClassUtils.boxed(long v)", "testcase": false, "constructor": false}, {"identifier": "boxed", "parameters": "(float v)", "modifiers": "public static", "return": "Float", "signature": "Float boxed(float v)", "full_signature": "public static Float boxed(float v)", "class_method_signature": "ClassUtils.boxed(float v)", "testcase": false, "constructor": false}, {"identifier": "boxed", "parameters": "(double v)", "modifiers": "public static", "return": "Double", "signature": "Double boxed(double v)", "full_signature": "public static Double boxed(double v)", "class_method_signature": "ClassUtils.boxed(double v)", "testcase": false, "constructor": false}, {"identifier": "boxed", "parameters": "(Object v)", "modifiers": "public static", "return": "Object", "signature": "Object boxed(Object v)", "full_signature": "public static Object boxed(Object v)", "class_method_signature": "ClassUtils.boxed(Object v)", "testcase": false, "constructor": false}, {"identifier": "unboxed", "parameters": "(Boolean v)", "modifiers": "public static", "return": "boolean", "signature": "boolean unboxed(Boolean v)", "full_signature": "public static boolean unboxed(Boolean v)", "class_method_signature": "ClassUtils.unboxed(Boolean v)", "testcase": false, "constructor": false}, {"identifier": "unboxed", "parameters": "(Character v)", "modifiers": "public static", "return": "char", "signature": "char unboxed(Character v)", "full_signature": "public static char unboxed(Character v)", "class_method_signature": "ClassUtils.unboxed(Character v)", "testcase": false, "constructor": false}, {"identifier": "unboxed", "parameters": "(Byte v)", "modifiers": "public static", "return": "byte", "signature": "byte unboxed(Byte v)", "full_signature": "public static byte unboxed(Byte v)", "class_method_signature": "ClassUtils.unboxed(Byte v)", "testcase": false, "constructor": false}, {"identifier": "unboxed", "parameters": "(Short v)", "modifiers": "public static", "return": "short", "signature": "short unboxed(Short v)", "full_signature": "public static short unboxed(Short v)", "class_method_signature": "ClassUtils.unboxed(Short v)", "testcase": false, "constructor": false}, {"identifier": "unboxed", "parameters": "(Integer v)", "modifiers": "public static", "return": "int", "signature": "int unboxed(Integer v)", "full_signature": "public static int unboxed(Integer v)", "class_method_signature": "ClassUtils.unboxed(Integer v)", "testcase": false, "constructor": false}, {"identifier": "unboxed", "parameters": "(Long v)", "modifiers": "public static", "return": "long", "signature": "long unboxed(Long v)", "full_signature": "public static long unboxed(Long v)", "class_method_signature": "ClassUtils.unboxed(Long v)", "testcase": false, "constructor": false}, {"identifier": "unboxed", "parameters": "(Float v)", "modifiers": "public static", "return": "float", "signature": "float unboxed(Float v)", "full_signature": "public static float unboxed(Float v)", "class_method_signature": "ClassUtils.unboxed(Float v)", "testcase": false, "constructor": false}, {"identifier": "unboxed", "parameters": "(Double v)", "modifiers": "public static", "return": "double", "signature": "double unboxed(Double v)", "full_signature": "public static double unboxed(Double v)", "class_method_signature": "ClassUtils.unboxed(Double v)", "testcase": false, "constructor": false}, {"identifier": "unboxed", "parameters": "(Object v)", "modifiers": "public static", "return": "Object", "signature": "Object unboxed(Object v)", "full_signature": "public static Object unboxed(Object v)", "class_method_signature": "ClassUtils.unboxed(Object v)", "testcase": false, "constructor": false}, {"identifier": "isNotEmpty", "parameters": "(Object object)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNotEmpty(Object object)", "full_signature": "public static boolean isNotEmpty(Object object)", "class_method_signature": "ClassUtils.isNotEmpty(Object object)", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "(Object object)", "modifiers": "public static", "return": "int", "signature": "int getSize(Object object)", "full_signature": "public static int getSize(Object object)", "class_method_signature": "ClassUtils.getSize(Object object)", "testcase": false, "constructor": false}, {"identifier": "toURI", "parameters": "(String name)", "modifiers": "public static", "return": "URI", "signature": "URI toURI(String name)", "full_signature": "public static URI toURI(String name)", "class_method_signature": "ClassUtils.toURI(String name)", "testcase": false, "constructor": false}, {"identifier": "getGenericClass", "parameters": "(Class<?> cls)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getGenericClass(Class<?> cls)", "full_signature": "public static Class<?> getGenericClass(Class<?> cls)", "class_method_signature": "ClassUtils.getGenericClass(Class<?> cls)", "testcase": false, "constructor": false}, {"identifier": "getGenericClass", "parameters": "(Class<?> cls, int i)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getGenericClass(Class<?> cls, int i)", "full_signature": "public static Class<?> getGenericClass(Class<?> cls, int i)", "class_method_signature": "ClassUtils.getGenericClass(Class<?> cls, int i)", "testcase": false, "constructor": false}, {"identifier": "isBeforeJava5", "parameters": "(String javaVersion)", "modifiers": "public static", "return": "boolean", "signature": "boolean isBeforeJava5(String javaVersion)", "full_signature": "public static boolean isBeforeJava5(String javaVersion)", "class_method_signature": "ClassUtils.isBeforeJava5(String javaVersion)", "testcase": false, "constructor": false}, {"identifier": "isBeforeJava6", "parameters": "(String javaVersion)", "modifiers": "public static", "return": "boolean", "signature": "boolean isBeforeJava6(String javaVersion)", "full_signature": "public static boolean isBeforeJava6(String javaVersion)", "class_method_signature": "ClassUtils.isBeforeJava6(String javaVersion)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Throwable e)", "modifiers": "public static", "return": "String", "signature": "String toString(Throwable e)", "full_signature": "public static String toString(Throwable e)", "class_method_signature": "ClassUtils.toString(Throwable e)", "testcase": false, "constructor": false}, {"identifier": "checkBytecode", "parameters": "(String name, byte[] bytecode)", "modifiers": "public static", "return": "void", "signature": "void checkBytecode(String name, byte[] bytecode)", "full_signature": "public static void checkBytecode(String name, byte[] bytecode)", "class_method_signature": "ClassUtils.checkBytecode(String name, byte[] bytecode)", "testcase": false, "constructor": false}, {"identifier": "getSizeMethod", "parameters": "(Class<?> cls)", "modifiers": "public static", "return": "String", "signature": "String getSizeMethod(Class<?> cls)", "full_signature": "public static String getSizeMethod(Class<?> cls)", "class_method_signature": "ClassUtils.getSizeMethod(Class<?> cls)", "testcase": false, "constructor": false}, {"identifier": "getMethodName", "parameters": "(Method method, Class<?>[] parameterClasses, String rightCode)", "modifiers": "public static", "return": "String", "signature": "String getMethodName(Method method, Class<?>[] parameterClasses, String rightCode)", "full_signature": "public static String getMethodName(Method method, Class<?>[] parameterClasses, String rightCode)", "class_method_signature": "ClassUtils.getMethodName(Method method, Class<?>[] parameterClasses, String rightCode)", "testcase": false, "constructor": false}, {"identifier": "searchMethod", "parameters": "(Class<?> currentClass, String name, Class<?>[] parameterTypes)", "modifiers": "public static", "return": "Method", "signature": "Method searchMethod(Class<?> currentClass, String name, Class<?>[] parameterTypes)", "full_signature": "public static Method searchMethod(Class<?> currentClass, String name, Class<?>[] parameterTypes)", "class_method_signature": "ClassUtils.searchMethod(Class<?> currentClass, String name, Class<?>[] parameterTypes)", "testcase": false, "constructor": false}, {"identifier": "getInitCode", "parameters": "(Class<?> type)", "modifiers": "public static", "return": "String", "signature": "String getInitCode(Class<?> type)", "full_signature": "public static String getInitCode(Class<?> type)", "class_method_signature": "ClassUtils.getInitCode(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "toMap", "parameters": "(Map.Entry<K, V>[] entries)", "modifiers": "public static", "return": "Map<K, V>", "signature": "Map<K, V> toMap(Map.Entry<K, V>[] entries)", "full_signature": "public static Map<K, V> toMap(Map.Entry<K, V>[] entries)", "class_method_signature": "ClassUtils.toMap(Map.Entry<K, V>[] entries)", "testcase": false, "constructor": false}, {"identifier": "getSimpleClassName", "parameters": "(String qualifiedName)", "modifiers": "public static", "return": "String", "signature": "String getSimpleClassName(String qualifiedName)", "full_signature": "public static String getSimpleClassName(String qualifiedName)", "class_method_signature": "ClassUtils.getSimpleClassName(String qualifiedName)", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/ClassUtils.java"}, "focal_method": {"identifier": "getBoxedClass", "parameters": "(Class<?> type)", "modifiers": "public static", "return": "Class<?>", "body": "public static Class<?> getBoxedClass(Class<?> type) {\n        if (type == boolean.class) {\n            return Boolean.class;\n        } else if (type == char.class) {\n            return Character.class;\n        } else if (type == byte.class) {\n            return Byte.class;\n        } else if (type == short.class) {\n            return Short.class;\n        } else if (type == int.class) {\n            return Integer.class;\n        } else if (type == long.class) {\n            return Long.class;\n        } else if (type == float.class) {\n            return Float.class;\n        } else if (type == double.class) {\n            return Double.class;\n        } else {\n            return type;\n        }\n    }", "signature": "Class<?> getBoxedClass(Class<?> type)", "full_signature": "public static Class<?> getBoxedClass(Class<?> type)", "class_method_signature": "ClassUtils.getBoxedClass(Class<?> type)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}