{"test_class": {"identifier": "NaiveBayesTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/alibaba/alink/pipeline/classification/NaiveBayesTest.java"}, "test_case": {"identifier": "testnaiveBayes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testnaiveBayes() throws Exception {\n        String[] feature = new String[] {\"f0\", \"f1\", \"f2\", \"f3\", \"f4\"};\n        String label = \"label\";\n        BatchOperator batchData = (BatchOperator) getData(true);\n        NaiveBayesTrainBatchOp op = new NaiveBayesTrainBatchOp()\n            .setCategoricalCols(\"f0\", \"f4\").setSmoothing(0.0).setWeightCol(\"weight\")\n            .setFeatureCols(feature).setLabelCol(label).linkFrom(batchData);\n        op.getModelInfoBatchOp().lazyPrintModelInfo();\n        op.lazyPrint(-1);\n        NaiveBayesPredictBatchOp predict = new NaiveBayesPredictBatchOp()\n            .setPredictionCol(\"predict\").setPredictionDetailCol(\"detail\").setReservedCols(\"label\");\n        BatchOperator res = predict.linkFrom(op, batchData);\n        res.select(new String[]{\"label\", \"predict\"}).lazyCollect();\n        StreamOperator streamData = (StreamOperator) getData(false);\n        new NaiveBayesPredictStreamOp(op).setPredictionCol(\"predict\").linkFrom(streamData).print();\n        StreamOperator.execute();\n        new NaiveBayes()\n            .setFeatureCols(feature).setLabelCol(label).setPredictionCol(\"predict\")\n            .fit(batchData).transform(batchData).collect();\n    }", "signature": "void testnaiveBayes()", "full_signature": "@Test public void testnaiveBayes()", "class_method_signature": "NaiveBayesTest.testnaiveBayes()", "testcase": true, "constructor": false, "invocations": ["getData", "linkFrom", "setLabelCol", "setFeatureCols", "setWeightCol", "setSmoothing", "setCategoricalCols", "lazyPrintModelInfo", "getModelInfoBatchOp", "lazyPrint", "setReservedCols", "setPredictionDetailCol", "setPredictionCol", "linkFrom", "lazyCollect", "select", "getData", "print", "linkFrom", "setPredictionCol", "execute", "collect", "transform", "fit", "setPredictionCol", "setLabelCol", "setFeatureCols"]}, "focal_class": {"identifier": "NaiveBayes", "superclass": "extends Trainer<NaiveBayes, NaiveBayesModel>", "interfaces": "implements NaiveBayesTrainParams<NaiveBayes>,\n    NaiveBayesPredictParams<NaiveBayes>, HasLazyPrintModelInfo<NaiveBayes>", "fields": [], "methods": [{"identifier": "NaiveBayes", "parameters": "()", "modifiers": "public", "return": "", "signature": " NaiveBayes()", "full_signature": "public  NaiveBayes()", "class_method_signature": "NaiveBayes.NaiveBayes()", "testcase": false, "constructor": true}, {"identifier": "NaiveBayes", "parameters": "(Params params)", "modifiers": "public", "return": "", "signature": " NaiveBayes(Params params)", "full_signature": "public  NaiveBayes(Params params)", "class_method_signature": "NaiveBayes.NaiveBayes(Params params)", "testcase": false, "constructor": true}, {"identifier": "train", "parameters": "(BatchOperator in)", "modifiers": "@Override public", "return": "BatchOperator", "signature": "BatchOperator train(BatchOperator in)", "full_signature": "@Override public BatchOperator train(BatchOperator in)", "class_method_signature": "NaiveBayes.train(BatchOperator in)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/pipeline/classification/NaiveBayes.java"}, "focal_method": {"identifier": "NaiveBayes", "parameters": "()", "modifiers": "public", "return": "", "body": "public NaiveBayes() {\n        super();\n    }", "signature": " NaiveBayes()", "full_signature": "public  NaiveBayes()", "class_method_signature": "NaiveBayes.NaiveBayes()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}