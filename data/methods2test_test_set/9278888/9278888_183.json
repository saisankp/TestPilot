{"test_class": {"identifier": "TracingProducerTest", "superclass": "extends KafkaTest", "interfaces": "", "fields": [{"original_string": "MockProducer<Object, String> mockProducer = new MockProducer<>();", "modifier": "", "type": "MockProducer<Object, String>", "declarator": "mockProducer = new MockProducer<>()", "var_name": "mockProducer"}, {"original_string": "TracingProducer<Object, String> tracingProducer =\n    (TracingProducer<Object, String>) kafkaTracing.producer(mockProducer);", "modifier": "", "type": "TracingProducer<Object, String>", "declarator": "tracingProducer =\n    (TracingProducer<Object, String>) kafkaTracing.producer(mockProducer)", "var_name": "tracingProducer"}], "file": "instrumentation/kafka-clients/src/test/java/brave/kafka/clients/TracingProducerTest.java"}, "test_case": {"identifier": "should_call_wrapped_producer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void should_call_wrapped_producer() {\n    tracingProducer.send(new ProducerRecord<>(TEST_TOPIC, TEST_KEY, TEST_VALUE));\n\n    assertThat(mockProducer.history()).hasSize(1);\n  }", "signature": "void should_call_wrapped_producer()", "full_signature": "@Test public void should_call_wrapped_producer()", "class_method_signature": "TracingProducerTest.should_call_wrapped_producer()", "testcase": true, "constructor": false, "invocations": ["send", "hasSize", "assertThat", "history"]}, "focal_class": {"identifier": "TracingProducer", "superclass": "", "interfaces": "implements Producer<K, V>", "fields": [{"original_string": "final Producer<K, V> delegate;", "modifier": "final", "type": "Producer<K, V>", "declarator": "delegate", "var_name": "delegate"}, {"original_string": "final KafkaTracing kafkaTracing;", "modifier": "final", "type": "KafkaTracing", "declarator": "kafkaTracing", "var_name": "kafkaTracing"}, {"original_string": "final CurrentTraceContext currentTraceContext;", "modifier": "final", "type": "CurrentTraceContext", "declarator": "currentTraceContext", "var_name": "currentTraceContext"}, {"original_string": "final Tracer tracer;", "modifier": "final", "type": "Tracer", "declarator": "tracer", "var_name": "tracer"}, {"original_string": "final Extractor<KafkaProducerRequest> extractor;", "modifier": "final", "type": "Extractor<KafkaProducerRequest>", "declarator": "extractor", "var_name": "extractor"}, {"original_string": "final SamplerFunction<MessagingRequest> sampler;", "modifier": "final", "type": "SamplerFunction<MessagingRequest>", "declarator": "sampler", "var_name": "sampler"}, {"original_string": "final Injector<KafkaProducerRequest> injector;", "modifier": "final", "type": "Injector<KafkaProducerRequest>", "declarator": "injector", "var_name": "injector"}, {"original_string": "@Nullable final String remoteServiceName;", "modifier": "@Nullable final", "type": "String", "declarator": "remoteServiceName", "var_name": "remoteServiceName"}], "methods": [{"identifier": "TracingProducer", "parameters": "(Producer<K, V> delegate, KafkaTracing kafkaTracing)", "modifiers": "", "return": "", "signature": " TracingProducer(Producer<K, V> delegate, KafkaTracing kafkaTracing)", "full_signature": "  TracingProducer(Producer<K, V> delegate, KafkaTracing kafkaTracing)", "class_method_signature": "TracingProducer.TracingProducer(Producer<K, V> delegate, KafkaTracing kafkaTracing)", "testcase": false, "constructor": true}, {"identifier": "initTransactions", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void initTransactions()", "full_signature": "@Override public void initTransactions()", "class_method_signature": "TracingProducer.initTransactions()", "testcase": false, "constructor": false}, {"identifier": "beginTransaction", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void beginTransaction()", "full_signature": "@Override public void beginTransaction()", "class_method_signature": "TracingProducer.beginTransaction()", "testcase": false, "constructor": false}, {"identifier": "commitTransaction", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void commitTransaction()", "full_signature": "@Override public void commitTransaction()", "class_method_signature": "TracingProducer.commitTransaction()", "testcase": false, "constructor": false}, {"identifier": "abortTransaction", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void abortTransaction()", "full_signature": "@Override public void abortTransaction()", "class_method_signature": "TracingProducer.abortTransaction()", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(ProducerRecord<K, V> record)", "modifiers": "@Override public", "return": "Future<RecordMetadata>", "signature": "Future<RecordMetadata> send(ProducerRecord<K, V> record)", "full_signature": "@Override public Future<RecordMetadata> send(ProducerRecord<K, V> record)", "class_method_signature": "TracingProducer.send(ProducerRecord<K, V> record)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(ProducerRecord<K, V> record, @Nullable Callback callback)", "modifiers": "@Override public", "return": "Future<RecordMetadata>", "signature": "Future<RecordMetadata> send(ProducerRecord<K, V> record, @Nullable Callback callback)", "full_signature": "@Override public Future<RecordMetadata> send(ProducerRecord<K, V> record, @Nullable Callback callback)", "class_method_signature": "TracingProducer.send(ProducerRecord<K, V> record, @Nullable Callback callback)", "testcase": false, "constructor": false}, {"identifier": "flush", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void flush()", "full_signature": "@Override public void flush()", "class_method_signature": "TracingProducer.flush()", "testcase": false, "constructor": false}, {"identifier": "partitionsFor", "parameters": "(String topic)", "modifiers": "@Override public", "return": "List<PartitionInfo>", "signature": "List<PartitionInfo> partitionsFor(String topic)", "full_signature": "@Override public List<PartitionInfo> partitionsFor(String topic)", "class_method_signature": "TracingProducer.partitionsFor(String topic)", "testcase": false, "constructor": false}, {"identifier": "metrics", "parameters": "()", "modifiers": "@Override public", "return": "Map<MetricName, ? extends Metric>", "signature": "Map<MetricName, ? extends Metric> metrics()", "full_signature": "@Override public Map<MetricName, ? extends Metric> metrics()", "class_method_signature": "TracingProducer.metrics()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "TracingProducer.close()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(long timeout, TimeUnit unit)", "modifiers": "public", "return": "void", "signature": "void close(long timeout, TimeUnit unit)", "full_signature": "public void close(long timeout, TimeUnit unit)", "class_method_signature": "TracingProducer.close(long timeout, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(Duration duration)", "modifiers": "public", "return": "void", "signature": "void close(Duration duration)", "full_signature": "public void close(Duration duration)", "class_method_signature": "TracingProducer.close(Duration duration)", "testcase": false, "constructor": false}, {"identifier": "sendOffsetsToTransaction", "parameters": "(Map<TopicPartition, OffsetAndMetadata> offsets,\n    String consumerGroupId)", "modifiers": "@Override public", "return": "void", "signature": "void sendOffsetsToTransaction(Map<TopicPartition, OffsetAndMetadata> offsets,\n    String consumerGroupId)", "full_signature": "@Override public void sendOffsetsToTransaction(Map<TopicPartition, OffsetAndMetadata> offsets,\n    String consumerGroupId)", "class_method_signature": "TracingProducer.sendOffsetsToTransaction(Map<TopicPartition, OffsetAndMetadata> offsets,\n    String consumerGroupId)", "testcase": false, "constructor": false}, {"identifier": "sendOffsetsToTransaction", "parameters": "(Map<TopicPartition, OffsetAndMetadata> offsets,\n    ConsumerGroupMetadata groupMetadata)", "modifiers": "public", "return": "void", "signature": "void sendOffsetsToTransaction(Map<TopicPartition, OffsetAndMetadata> offsets,\n    ConsumerGroupMetadata groupMetadata)", "full_signature": "public void sendOffsetsToTransaction(Map<TopicPartition, OffsetAndMetadata> offsets,\n    ConsumerGroupMetadata groupMetadata)", "class_method_signature": "TracingProducer.sendOffsetsToTransaction(Map<TopicPartition, OffsetAndMetadata> offsets,\n    ConsumerGroupMetadata groupMetadata)", "testcase": false, "constructor": false}], "file": "instrumentation/kafka-clients/src/main/java/brave/kafka/clients/TracingProducer.java"}, "focal_method": {"identifier": "send", "parameters": "(ProducerRecord<K, V> record)", "modifiers": "@Override public", "return": "Future<RecordMetadata>", "body": "@Override public Future<RecordMetadata> send(ProducerRecord<K, V> record) {\n    return this.send(record, null);\n  }", "signature": "Future<RecordMetadata> send(ProducerRecord<K, V> record)", "full_signature": "@Override public Future<RecordMetadata> send(ProducerRecord<K, V> record)", "class_method_signature": "TracingProducer.send(ProducerRecord<K, V> record)", "testcase": false, "constructor": false, "invocations": ["send"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}