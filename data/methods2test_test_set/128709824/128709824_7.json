{"test_class": {"identifier": "BlackListFileLoaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "codec/codec-sofa-hessian/src/test/java/com/alipay/sofa/rpc/codec/sofahessian/BlackListFileLoaderTest.java"}, "test_case": {"identifier": "testAll", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAll() throws Exception {\n\n        List<String> blacks = BlackListFileLoader.SOFA_SERIALIZE_BLACK_LIST;\n        Assert.assertNotNull(blacks);\n\n        String s = System.getProperty(SofaOptions.CONFIG_SERIALIZE_BLACKLIST_OVERRIDE);\n        try {\n            System.setProperty(SofaOptions.CONFIG_SERIALIZE_BLACKLIST_OVERRIDE, \"-java.net.Socket\");\n            blacks = BlackListFileLoader.loadFile(\"/sofa-rpc/serialize_blacklist.txt\");\n        } finally {\n            if (s != null) {\n                System.setProperty(SofaOptions.CONFIG_SERIALIZE_BLACKLIST_OVERRIDE, s);\n            }\n        }\n\n        NameBlackListFilter filter = new NameBlackListFilter(blacks);\n        boolean pass = true;\n        String className = null;\n        try {\n            className = filter.resolve(\"com.alipay.xx\");\n        } catch (Exception e) {\n            pass = false;\n        }\n        Assert.assertNotNull(className);\n        Assert.assertTrue(pass);\n\n        pass = true;\n        try {\n            className = filter.resolve(\"com.sun.rowset.JdbcRowSetImpl\");\n        } catch (Exception e) {\n            pass = false;\n        }\n        Assert.assertFalse(pass);\n    }", "signature": "void testAll()", "full_signature": "@Test public void testAll()", "class_method_signature": "BlackListFileLoaderTest.testAll()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "getProperty", "setProperty", "loadFile", "setProperty", "resolve", "assertNotNull", "assertTrue", "resolve", "assertFalse"]}, "focal_class": {"identifier": "BlackListFileLoader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger      LOGGER                    = LoggerFactory.getLogger(BlackListFileLoader.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER                    = LoggerFactory.getLogger(BlackListFileLoader.class)", "var_name": "LOGGER"}, {"original_string": "public static final List<String> SOFA_SERIALIZE_BLACK_LIST = loadFile(\"/sofa-rpc/serialize_blacklist.txt\");", "modifier": "public static final", "type": "List<String>", "declarator": "SOFA_SERIALIZE_BLACK_LIST = loadFile(\"/sofa-rpc/serialize_blacklist.txt\")", "var_name": "SOFA_SERIALIZE_BLACK_LIST"}], "methods": [{"identifier": "loadFile", "parameters": "(String path)", "modifiers": "static", "return": "List<String>", "signature": "List<String> loadFile(String path)", "full_signature": "static List<String> loadFile(String path)", "class_method_signature": "BlackListFileLoader.loadFile(String path)", "testcase": false, "constructor": false}, {"identifier": "readToList", "parameters": "(InputStream input, String encoding, List<String> blackPrefixList)", "modifiers": "private static", "return": "void", "signature": "void readToList(InputStream input, String encoding, List<String> blackPrefixList)", "full_signature": "private static void readToList(InputStream input, String encoding, List<String> blackPrefixList)", "class_method_signature": "BlackListFileLoader.readToList(InputStream input, String encoding, List<String> blackPrefixList)", "testcase": false, "constructor": false}, {"identifier": "overrideBlackList", "parameters": "(List<String> originList, String overrideStr)", "modifiers": "static", "return": "void", "signature": "void overrideBlackList(List<String> originList, String overrideStr)", "full_signature": "static void overrideBlackList(List<String> originList, String overrideStr)", "class_method_signature": "BlackListFileLoader.overrideBlackList(List<String> originList, String overrideStr)", "testcase": false, "constructor": false}], "file": "codec/codec-sofa-hessian/src/main/java/com/alipay/sofa/rpc/codec/sofahessian/BlackListFileLoader.java"}, "focal_method": {"identifier": "loadFile", "parameters": "(String path)", "modifiers": "static", "return": "List<String>", "body": "static List<String> loadFile(String path) {\n        List<String> blackPrefixList = new ArrayList<String>();\n        InputStream input = null;\n        try {\n            input = BlackListFileLoader.class.getResourceAsStream(path);\n            if (input != null) {\n                readToList(input, \"UTF-8\", blackPrefixList);\n            }\n            String overStr = SofaConfigs.getStringValue(SofaOptions.CONFIG_SERIALIZE_BLACKLIST_OVERRIDE, \"\");\n            if (StringUtils.isNotBlank(overStr)) {\n                if (LOGGER.isInfoEnabled()) {\n                    LOGGER.info(\"Serialize blacklist will override with configuration: {}\", overStr);\n                }\n                overrideBlackList(blackPrefixList, overStr);\n            }\n        } catch (Exception e) {\n            if (LOGGER.isErrorEnabled()) {\n                LOGGER.error(e.getMessage(), e);\n            }\n        } finally {\n            closeQuietly(input);\n        }\n        return blackPrefixList;\n    }", "signature": "List<String> loadFile(String path)", "full_signature": "static List<String> loadFile(String path)", "class_method_signature": "BlackListFileLoader.loadFile(String path)", "testcase": false, "constructor": false, "invocations": ["getResourceAsStream", "readToList", "getStringValue", "isNotBlank", "isInfoEnabled", "info", "overrideBlackList", "isErrorEnabled", "error", "getMessage", "closeQuietly"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}