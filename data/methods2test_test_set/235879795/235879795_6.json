{"test_class": {"identifier": "DartSensorTest", "superclass": "", "interfaces": "", "fields": [], "file": "dart-lang/src/test/java/fr/insideapp/sonarqube/dart/lang/DartSensorTest.java"}, "test_case": {"identifier": "describe", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void describe() {\n        DartSensor sensor = new DartSensor();\n        DefaultSensorDescriptor descriptor = new DefaultSensorDescriptor();\n        sensor.describe(descriptor);\n        assertThat(descriptor.name()).isEqualTo(\"Dart sensor\");\n    }", "signature": "void describe()", "full_signature": "@Test public void describe()", "class_method_signature": "DartSensorTest.describe()", "testcase": true, "constructor": false, "invocations": ["describe", "isEqualTo", "assertThat", "name"]}, "focal_class": {"identifier": "DartSensor", "superclass": "", "interfaces": "implements Sensor", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(DartSensor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DartSensor.class)", "var_name": "LOGGER"}, {"original_string": "private static final int EXECUTOR_TIMEOUT = 10000;", "modifier": "private static final", "type": "int", "declarator": "EXECUTOR_TIMEOUT = 10000", "var_name": "EXECUTOR_TIMEOUT"}, {"original_string": "public static final String DART_ANALYSIS_USE_EXISTING_OPTIONS_KEY = \"sonar.dart.analysis.useExistingOptions\";", "modifier": "public static final", "type": "String", "declarator": "DART_ANALYSIS_USE_EXISTING_OPTIONS_KEY = \"sonar.dart.analysis.useExistingOptions\"", "var_name": "DART_ANALYSIS_USE_EXISTING_OPTIONS_KEY"}], "methods": [{"identifier": "describe", "parameters": "(SensorDescriptor sensorDescriptor)", "modifiers": "@Override public", "return": "void", "signature": "void describe(SensorDescriptor sensorDescriptor)", "full_signature": "@Override public void describe(SensorDescriptor sensorDescriptor)", "class_method_signature": "DartSensor.describe(SensorDescriptor sensorDescriptor)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(SensorContext sensorContext)", "modifiers": "@Override public", "return": "void", "signature": "void execute(SensorContext sensorContext)", "full_signature": "@Override public void execute(SensorContext sensorContext)", "class_method_signature": "DartSensor.execute(SensorContext sensorContext)", "testcase": false, "constructor": false}], "file": "dart-lang/src/main/java/fr/insideapp/sonarqube/dart/lang/DartSensor.java"}, "focal_method": {"identifier": "describe", "parameters": "(SensorDescriptor sensorDescriptor)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void describe(SensorDescriptor sensorDescriptor) {\n        sensorDescriptor\n                .onlyOnLanguage(Dart.KEY)\n                .name(\"Dart sensor\")\n                .onlyOnFileType(InputFile.Type.MAIN);\n    }", "signature": "void describe(SensorDescriptor sensorDescriptor)", "full_signature": "@Override public void describe(SensorDescriptor sensorDescriptor)", "class_method_signature": "DartSensor.describe(SensorDescriptor sensorDescriptor)", "testcase": false, "constructor": false, "invocations": ["onlyOnFileType", "name", "onlyOnLanguage"]}, "repository": {"repo_id": 235879795, "url": "https://github.com/insideapp-oss/sonar-flutter", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 70, "size": 799, "license": "licensed"}}