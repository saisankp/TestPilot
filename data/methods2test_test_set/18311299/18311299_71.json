{"test_class": {"identifier": "EventChannelTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private EventChannel<Integer> channel;", "modifier": "private", "type": "EventChannel<Integer>", "declarator": "channel", "var_name": "channel"}, {"original_string": "private Event<Map<String, Object>> dummyInternalEvent;", "modifier": "private", "type": "Event<Map<String, Object>>", "declarator": "dummyInternalEvent", "var_name": "dummyInternalEvent"}, {"original_string": "@Mock\n    private EventListener<Integer> listener1;", "modifier": "@Mock\n    private", "type": "EventListener<Integer>", "declarator": "listener1", "var_name": "listener1"}, {"original_string": "@Mock\n    private EventListener<Integer> listener2;", "modifier": "@Mock\n    private", "type": "EventListener<Integer>", "declarator": "listener2", "var_name": "listener2"}], "file": "reactive-source-core/src/test/java/org/reactivesource/EventChannelTest.java"}, "test_case": {"identifier": "testCanNotAddNullEventListener", "parameters": "()", "modifiers": "@Test(groups = SMALL, expectedExceptions = IllegalArgumentException.class) public", "return": "void", "body": "@Test(groups = SMALL, expectedExceptions = IllegalArgumentException.class)\n    public void testCanNotAddNullEventListener() {\n        channel.addEventListener(null);\n    }", "signature": "void testCanNotAddNullEventListener()", "full_signature": "@Test(groups = SMALL, expectedExceptions = IllegalArgumentException.class) public void testCanNotAddNullEventListener()", "class_method_signature": "EventChannelTest.testCanNotAddNullEventListener()", "testcase": true, "constructor": false, "invocations": ["addEventListener"]}, "focal_class": {"identifier": "EventChannel", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Queue<Event<Map<String, Object>>> eventQueue;", "modifier": "private final", "type": "Queue<Event<Map<String, Object>>>", "declarator": "eventQueue", "var_name": "eventQueue"}, {"original_string": "private boolean muted;", "modifier": "private", "type": "boolean", "declarator": "muted", "var_name": "muted"}, {"original_string": "private final List<EventListener<T>> listeners;", "modifier": "private final", "type": "List<EventListener<T>>", "declarator": "listeners", "var_name": "listeners"}], "methods": [{"identifier": "EventChannel", "parameters": "()", "modifiers": "", "return": "", "signature": " EventChannel()", "full_signature": "  EventChannel()", "class_method_signature": "EventChannel.EventChannel()", "testcase": false, "constructor": true}, {"identifier": "addEventListener", "parameters": "(EventListener<T> eventListener)", "modifiers": "", "return": "void", "signature": "void addEventListener(EventListener<T> eventListener)", "full_signature": " void addEventListener(EventListener<T> eventListener)", "class_method_signature": "EventChannel.addEventListener(EventListener<T> eventListener)", "testcase": false, "constructor": false}, {"identifier": "pushEvent", "parameters": "(Event<Map<String, Object>> event)", "modifiers": "", "return": "void", "signature": "void pushEvent(Event<Map<String, Object>> event)", "full_signature": " void pushEvent(Event<Map<String, Object>> event)", "class_method_signature": "EventChannel.pushEvent(Event<Map<String, Object>> event)", "testcase": false, "constructor": false}, {"identifier": "mute", "parameters": "()", "modifiers": "", "return": "void", "signature": "void mute()", "full_signature": " void mute()", "class_method_signature": "EventChannel.mute()", "testcase": false, "constructor": false}, {"identifier": "unmute", "parameters": "()", "modifiers": "", "return": "void", "signature": "void unmute()", "full_signature": " void unmute()", "class_method_signature": "EventChannel.unmute()", "testcase": false, "constructor": false}, {"identifier": "notifyListeners", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void notifyListeners()", "full_signature": "private void notifyListeners()", "class_method_signature": "EventChannel.notifyListeners()", "testcase": false, "constructor": false}], "file": "reactive-source-core/src/main/java/org/reactivesource/EventChannel.java"}, "focal_method": {"identifier": "addEventListener", "parameters": "(EventListener<T> eventListener)", "modifiers": "", "return": "void", "body": "void addEventListener(EventListener<T> eventListener) {\n        notNull(eventListener, \"Can not add null event listener\");\n        listeners.add(eventListener);\n    }", "signature": "void addEventListener(EventListener<T> eventListener)", "full_signature": " void addEventListener(EventListener<T> eventListener)", "class_method_signature": "EventChannel.addEventListener(EventListener<T> eventListener)", "testcase": false, "constructor": false, "invocations": ["notNull", "add"]}, "repository": {"repo_id": 18311299, "url": "https://github.com/eBay/reactive-source", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 9, "size": 317, "license": "licensed"}}