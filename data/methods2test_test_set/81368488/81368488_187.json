{"test_class": {"identifier": "MediaFileReaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\n    IGameContext mockGameContext;", "modifier": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)", "type": "IGameContext", "declarator": "mockGameContext", "var_name": "mockGameContext"}, {"original_string": "private static File testDir = new File(\"src/test/resources/testTestForMediaFileReader\");", "modifier": "private static", "type": "File", "declarator": "testDir = new File(\"src/test/resources/testTestForMediaFileReader\")", "var_name": "testDir"}], "file": "gazeplay-games/src/test/java/net/gazeplay/games/mediaPlayer/MediaFileReaderTest.java"}, "test_case": {"identifier": "shouldAddMedia", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void shouldAddMedia() {\n        MediaFileReader mfr = new MediaFileReader(mockGameContext) {\n            @Override\n            public File getMediaPlayerDirectory() {\n                return testDir;\n            }\n        };\n        MediaFile mediaTypeMediaFile = new MediaFile(\"MEDIA\", \"https://www.testMEDIA.fr/\", \"testMEDIA\", \"images/green/green.jpg\");\n        mfr.addMedia(mediaTypeMediaFile);\n        assertTrue(mfr.getMediaList().contains(mediaTypeMediaFile));\n\n\n        MediaFile urlTypeMediaFile = new MediaFile(\"URL\", \"https://www.testURL.fr/\", \"testURL\", \"images/green/green.jpg\");\n        mfr.addMedia(urlTypeMediaFile);\n        assertTrue(mfr.getMediaList().contains(mediaTypeMediaFile));\n        assertTrue(mfr.getMediaList().contains(urlTypeMediaFile));\n    }", "signature": "void shouldAddMedia()", "full_signature": "@Test void shouldAddMedia()", "class_method_signature": "MediaFileReaderTest.shouldAddMedia()", "testcase": true, "constructor": false, "invocations": ["addMedia", "assertTrue", "contains", "getMediaList", "addMedia", "assertTrue", "contains", "getMediaList", "assertTrue", "contains", "getMediaList"]}, "focal_class": {"identifier": "MediaFileReader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PLAYER_LIST_CSV = \"playerList.csv\";", "modifier": "private static final", "type": "String", "declarator": "PLAYER_LIST_CSV = \"playerList.csv\"", "var_name": "PLAYER_LIST_CSV"}, {"original_string": "private final IGameContext gameContext;", "modifier": "private final", "type": "IGameContext", "declarator": "gameContext", "var_name": "gameContext"}, {"original_string": "@Getter\n    private final List<MediaFile> mediaList;", "modifier": "@Getter\n    private final", "type": "List<MediaFile>", "declarator": "mediaList", "var_name": "mediaList"}, {"original_string": "@Getter\n    private SimpleIntegerProperty firstMediaDisplayedIndex;", "modifier": "@Getter\n    private", "type": "SimpleIntegerProperty", "declarator": "firstMediaDisplayedIndex", "var_name": "firstMediaDisplayedIndex"}, {"original_string": "@Getter\n    private SimpleIntegerProperty playingMediaIndex;", "modifier": "@Getter\n    private", "type": "SimpleIntegerProperty", "declarator": "playingMediaIndex", "var_name": "playingMediaIndex"}], "methods": [{"identifier": "MediaFileReader", "parameters": "(IGameContext gameContext)", "modifiers": "", "return": "", "signature": " MediaFileReader(IGameContext gameContext)", "full_signature": "  MediaFileReader(IGameContext gameContext)", "class_method_signature": "MediaFileReader.MediaFileReader(IGameContext gameContext)", "testcase": false, "constructor": true}, {"identifier": "setPlayingMediaIndex", "parameters": "(int newIndex)", "modifiers": "public", "return": "void", "signature": "void setPlayingMediaIndex(int newIndex)", "full_signature": "public void setPlayingMediaIndex(int newIndex)", "class_method_signature": "MediaFileReader.setPlayingMediaIndex(int newIndex)", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void next()", "full_signature": "public void next()", "class_method_signature": "MediaFileReader.next()", "testcase": false, "constructor": false}, {"identifier": "previous", "parameters": "()", "modifiers": "", "return": "void", "signature": "void previous()", "full_signature": " void previous()", "class_method_signature": "MediaFileReader.previous()", "testcase": false, "constructor": false}, {"identifier": "mediaToPlayNext", "parameters": "()", "modifiers": "", "return": "MediaFile", "signature": "MediaFile mediaToPlayNext()", "full_signature": " MediaFile mediaToPlayNext()", "class_method_signature": "MediaFileReader.mediaToPlayNext()", "testcase": false, "constructor": false}, {"identifier": "mediaToPlayPrevious", "parameters": "()", "modifiers": "", "return": "MediaFile", "signature": "MediaFile mediaToPlayPrevious()", "full_signature": " MediaFile mediaToPlayPrevious()", "class_method_signature": "MediaFileReader.mediaToPlayPrevious()", "testcase": false, "constructor": false}, {"identifier": "getIndexOfFirstToDisplay", "parameters": "()", "modifiers": "", "return": "int", "signature": "int getIndexOfFirstToDisplay()", "full_signature": " int getIndexOfFirstToDisplay()", "class_method_signature": "MediaFileReader.getIndexOfFirstToDisplay()", "testcase": false, "constructor": false}, {"identifier": "addMedia", "parameters": "(MediaFile mf)", "modifiers": "", "return": "void", "signature": "void addMedia(MediaFile mf)", "full_signature": " void addMedia(MediaFile mf)", "class_method_signature": "MediaFileReader.addMedia(MediaFile mf)", "testcase": false, "constructor": false}, {"identifier": "getMediaPlayerDirectory", "parameters": "()", "modifiers": "public", "return": "File", "signature": "File getMediaPlayerDirectory()", "full_signature": "public File getMediaPlayerDirectory()", "class_method_signature": "MediaFileReader.getMediaPlayerDirectory()", "testcase": false, "constructor": false}], "file": "gazeplay-games/src/main/java/net/gazeplay/games/mediaPlayer/MediaFileReader.java"}, "focal_method": {"identifier": "addMedia", "parameters": "(MediaFile mf)", "modifiers": "", "return": "void", "body": "void addMedia(MediaFile mf) {\n        final File mediaPlayerDirectory = getMediaPlayerDirectory();\n        boolean mediaPlayerDirectoryCreated = mediaPlayerDirectory.mkdirs();\n        log.debug(\"mediaPlayerDirectoryCreated = {}\", mediaPlayerDirectoryCreated);\n        final File playlistFile = new File(mediaPlayerDirectory, PLAYER_LIST_CSV);\n\n        try {\n            boolean fileIsUsable = playlistFile.exists();\n            if (!fileIsUsable) {\n                fileIsUsable = playlistFile.createNewFile();\n            }\n\n            if (fileIsUsable) {\n                try (\n                    OutputStream fileOutputStream = Files.newOutputStream(playlistFile.toPath(), StandardOpenOption.CREATE, APPEND);\n                    BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fileOutputStream, StandardCharsets.UTF_8))\n                ) {\n                    if (mediaList.size() == 0) {\n                        bw.write(\"\" + mf.getType() + \",\" + mf.getPath() + \",\" + mf.getName() + \",\" + mf.getImagepath());\n                    } else {\n                        bw.write(\"\\n\" + mf.getType() + \",\" + mf.getPath() + \",\" + mf.getName() + \",\" + mf.getImagepath());\n                    }\n                }\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n\n        mediaList.add(mf);\n        firstMediaDisplayedIndex.setValue(mediaList.size() - 1);\n    }", "signature": "void addMedia(MediaFile mf)", "full_signature": " void addMedia(MediaFile mf)", "class_method_signature": "MediaFileReader.addMedia(MediaFile mf)", "testcase": false, "constructor": false, "invocations": ["getMediaPlayerDirectory", "mkdirs", "debug", "exists", "createNewFile", "newOutputStream", "toPath", "size", "write", "getType", "getPath", "getName", "getImagepath", "write", "getType", "getPath", "getName", "getImagepath", "add", "setValue", "size"]}, "repository": {"repo_id": 81368488, "url": "https://github.com/GazePlay/GazePlay", "stars": 15, "created": "2/8/2017 7:39:08 PM +00:00", "updates": "2020-01-26T16:45:47+00:00", "fork": "False", "license": "licensed"}}