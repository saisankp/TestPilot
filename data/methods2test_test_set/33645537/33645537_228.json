{"test_class": {"identifier": "PalindromeListTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PalindromeList palindromeList;", "modifier": "private", "type": "PalindromeList", "declarator": "palindromeList", "var_name": "palindromeList"}], "file": "algs/src/test/java/com/github/pedrovgs/problem62/PalindromeListTest.java"}, "test_case": {"identifier": "shouldRturnTrueIfListContainsTwoElementsWithTheSameValueReversing", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void shouldRturnTrueIfListContainsTwoElementsWithTheSameValueReversing() {\n    ListNode<Integer> list = createList(new int[] { 1, 1 });\n\n    boolean result = palindromeList.checkReversing(list);\n\n    assertTrue(result);\n  }", "signature": "void shouldRturnTrueIfListContainsTwoElementsWithTheSameValueReversing()", "full_signature": "@Test public void shouldRturnTrueIfListContainsTwoElementsWithTheSameValueReversing()", "class_method_signature": "PalindromeListTest.shouldRturnTrueIfListContainsTwoElementsWithTheSameValueReversing()", "testcase": true, "constructor": false, "invocations": ["createList", "checkReversing", "assertTrue"]}, "focal_class": {"identifier": "PalindromeList", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ReverseLinkedList reverseLinkedList;", "modifier": "private final", "type": "ReverseLinkedList", "declarator": "reverseLinkedList", "var_name": "reverseLinkedList"}], "methods": [{"identifier": "PalindromeList", "parameters": "()", "modifiers": "public", "return": "", "signature": " PalindromeList()", "full_signature": "public  PalindromeList()", "class_method_signature": "PalindromeList.PalindromeList()", "testcase": false, "constructor": true}, {"identifier": "checkReversing", "parameters": "(ListNode list)", "modifiers": "public", "return": "boolean", "signature": "boolean checkReversing(ListNode list)", "full_signature": "public boolean checkReversing(ListNode list)", "class_method_signature": "PalindromeList.checkReversing(ListNode list)", "testcase": false, "constructor": false}, {"identifier": "checkIterative", "parameters": "(ListNode list)", "modifiers": "public", "return": "boolean", "signature": "boolean checkIterative(ListNode list)", "full_signature": "public boolean checkIterative(ListNode list)", "class_method_signature": "PalindromeList.checkIterative(ListNode list)", "testcase": false, "constructor": false}, {"identifier": "validateInput", "parameters": "(ListNode<Integer> list)", "modifiers": "private", "return": "void", "signature": "void validateInput(ListNode<Integer> list)", "full_signature": "private void validateInput(ListNode<Integer> list)", "class_method_signature": "PalindromeList.validateInput(ListNode<Integer> list)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem62/PalindromeList.java"}, "focal_method": {"identifier": "checkReversing", "parameters": "(ListNode list)", "modifiers": "public", "return": "boolean", "body": "public boolean checkReversing(ListNode list) {\n    validateInput(list);\n\n    ListNode<Integer> reversedList = reverseLinkedList.reverseIterative(list);\n\n    boolean isPalindrome = true;\n    while (list != null) {\n      isPalindrome = list.equals(reversedList);\n      if (!isPalindrome) {\n        break;\n      }\n      reversedList = reversedList.getNext();\n      list = list.getNext();\n    }\n    return isPalindrome;\n  }", "signature": "boolean checkReversing(ListNode list)", "full_signature": "public boolean checkReversing(ListNode list)", "class_method_signature": "PalindromeList.checkReversing(ListNode list)", "testcase": false, "constructor": false, "invocations": ["validateInput", "reverseIterative", "equals", "getNext", "getNext"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}