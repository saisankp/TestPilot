{"test_class": {"identifier": "SplitPolygonCommandTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double DOUBLE_TOLERANCE = .0000000001;", "modifier": "private static final", "type": "double", "declarator": "DOUBLE_TOLERANCE = .0000000001", "var_name": "DOUBLE_TOLERANCE"}, {"original_string": "@Autowired\n\tprivate CommandDispatcher dispatcher;", "modifier": "@Autowired\n\tprivate", "type": "CommandDispatcher", "declarator": "dispatcher", "var_name": "dispatcher"}, {"original_string": "@Autowired\n\tprivate GeoService geoService;", "modifier": "@Autowired\n\tprivate", "type": "GeoService", "declarator": "geoService", "var_name": "geoService"}, {"original_string": "@Autowired\n\tprivate DtoConverterService dtoConverter;", "modifier": "@Autowired\n\tprivate", "type": "DtoConverterService", "declarator": "dtoConverter", "var_name": "dtoConverter"}], "file": "command/src/test/java/org/geomajas/command/geometry/SplitPolygonCommandTest.java"}, "test_case": {"identifier": "testSplitPolygon", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSplitPolygon() throws Exception {\n\t\tSplitPolygonRequest request = new SplitPolygonRequest();\n\t\tGeometryFactory factory = new GeometryFactory();\n\t\trequest.setGeometry(\n\t\t\t\tdtoConverter.toDto(geoService.createCircle(factory.createPoint(new Coordinate(0, 0)), 10, 10)));\n\t\trequest.setSplitter(\n\t\t\t\tdtoConverter.toDto(factory.createLineString(new Coordinate[] {\n\t\t\t\t\t\tnew Coordinate(-10, -10), new Coordinate(10, 10)\n\t\t\t\t})));\n\t\tSplitPolygonResponse response = (SplitPolygonResponse) dispatcher.execute(\n\t\t\t\tSplitPolygonRequest.COMMAND, request, null, \"en\");\n\t\tif (response.isError()) {\n\t\t\tresponse.getErrors().get(0).printStackTrace();\n\t\t}\n\t\tAssert.assertFalse(response.isError());\n\t\tAssert.assertNotNull(response.getGeometries());\n\t\t// @todo should verify that split is correct\n\t}", "signature": "void testSplitPolygon()", "full_signature": "@Test public void testSplitPolygon()", "class_method_signature": "SplitPolygonCommandTest.testSplitPolygon()", "testcase": true, "constructor": false, "invocations": ["setGeometry", "toDto", "createCircle", "createPoint", "setSplitter", "toDto", "createLineString", "execute", "isError", "printStackTrace", "get", "getErrors", "assertFalse", "isError", "assertNotNull", "getGeometries"]}, "focal_class": {"identifier": "SplitPolygonCommand", "superclass": "", "interfaces": "implements CommandHasRequest<SplitPolygonRequest, SplitPolygonResponse>", "fields": [{"original_string": "@Autowired\n\tprivate DtoConverterService converter;", "modifier": "@Autowired\n\tprivate", "type": "DtoConverterService", "declarator": "converter", "var_name": "converter"}], "methods": [{"identifier": "getEmptyCommandRequest", "parameters": "()", "modifiers": "@Override public", "return": "SplitPolygonRequest", "signature": "SplitPolygonRequest getEmptyCommandRequest()", "full_signature": "@Override public SplitPolygonRequest getEmptyCommandRequest()", "class_method_signature": "SplitPolygonCommand.getEmptyCommandRequest()", "testcase": false, "constructor": false}, {"identifier": "getEmptyCommandResponse", "parameters": "()", "modifiers": "@Override public", "return": "SplitPolygonResponse", "signature": "SplitPolygonResponse getEmptyCommandResponse()", "full_signature": "@Override public SplitPolygonResponse getEmptyCommandResponse()", "class_method_signature": "SplitPolygonCommand.getEmptyCommandResponse()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(SplitPolygonRequest request, SplitPolygonResponse response)", "modifiers": "@Override public", "return": "void", "signature": "void execute(SplitPolygonRequest request, SplitPolygonResponse response)", "full_signature": "@Override public void execute(SplitPolygonRequest request, SplitPolygonResponse response)", "class_method_signature": "SplitPolygonCommand.execute(SplitPolygonRequest request, SplitPolygonResponse response)", "testcase": false, "constructor": false}], "file": "command/src/main/java/org/geomajas/command/geometry/SplitPolygonCommand.java"}, "focal_method": {"identifier": "execute", "parameters": "(SplitPolygonRequest request, SplitPolygonResponse response)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void execute(SplitPolygonRequest request, SplitPolygonResponse response) throws Exception {\n\t\t// convert to most accurate precision model\n\t\tcom.vividsolutions.jts.geom.Geometry jtsGeometry = converter.toInternal(request.getGeometry());\n\t\tif (!(jtsGeometry instanceof Polygon)) {\n\t\t\tthrow new GeomajasException(ExceptionCode.UNEXPECTED_PROBLEM, \"geometry has to be a Polygon\");\n\t\t}\n\t\tPolygon polygon = (Polygon) converter.toInternal(request.getGeometry());\n\n\t\t// Convert to the polygons precision model:\n\t\tjtsGeometry = converter.toInternal(request.getSplitter());\n\t\tif (!(jtsGeometry instanceof LineString)) {\n\t\t\tthrow new GeomajasException(ExceptionCode.UNEXPECTED_PROBLEM, \"splitter has to be a LineString\");\n\t\t}\n\t\tLineString preciseLine = (LineString) jtsGeometry;\n\t\tint precision = polygon.getPrecisionModel().getMaximumSignificantDigits() - 1;\n\t\tcom.vividsolutions.jts.geom.Geometry bufferedLine = preciseLine.buffer(Math.pow(10.0, -precision));\n\t\tcom.vividsolutions.jts.geom.Geometry diff = polygon.difference(bufferedLine);\n\n\t\tif (diff instanceof Polygon) {\n\t\t\tresponse.setGeometries(new Geometry[] { converter.toDto(diff) });\n\t\t} else if (diff instanceof MultiPolygon) {\n\t\t\tGeometry[] polygons = new Geometry[diff.getNumGeometries()];\n\t\t\tfor (int i = 0; i < diff.getNumGeometries(); i++) {\n\t\t\t\tpolygons[i] = converter.toDto(diff.getGeometryN(i));\n\t\t\t}\n\t\t\tresponse.setGeometries(polygons);\n\t\t}\n\t}", "signature": "void execute(SplitPolygonRequest request, SplitPolygonResponse response)", "full_signature": "@Override public void execute(SplitPolygonRequest request, SplitPolygonResponse response)", "class_method_signature": "SplitPolygonCommand.execute(SplitPolygonRequest request, SplitPolygonResponse response)", "testcase": false, "constructor": false, "invocations": ["toInternal", "getGeometry", "toInternal", "getGeometry", "toInternal", "getSplitter", "getMaximumSignificantDigits", "getPrecisionModel", "buffer", "pow", "difference", "setGeometries", "toDto", "getNumGeometries", "getNumGeometries", "toDto", "getGeometryN", "setGeometries"]}, "repository": {"repo_id": 14505280, "url": "https://github.com/geomajas/geomajas-project-server", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 13, "size": 124882, "license": "licensed"}}