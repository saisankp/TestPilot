{"test_class": {"identifier": "ChannelChainTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ChannelChain channelChainTestObject;", "modifier": "private", "type": "ChannelChain", "declarator": "channelChainTestObject", "var_name": "channelChainTestObject"}, {"original_string": "private MailChannel mailChannelMock;", "modifier": "private", "type": "MailChannel", "declarator": "mailChannelMock", "var_name": "mailChannelMock"}, {"original_string": "private DummyChannel dummyChannelMock;", "modifier": "private", "type": "DummyChannel", "declarator": "dummyChannelMock", "var_name": "dummyChannelMock"}, {"original_string": "private Subscriber subscriber;", "modifier": "private", "type": "Subscriber", "declarator": "subscriber", "var_name": "subscriber"}, {"original_string": "private List<NotificationEventTO> eventTOs = new ArrayList<NotificationEventTO>();", "modifier": "private", "type": "List<NotificationEventTO>", "declarator": "eventTOs = new ArrayList<NotificationEventTO>()", "var_name": "eventTOs"}], "file": "olat7.8/src/test/java/org/olat/lms/core/notification/impl/channel/ChannelChainTest.java"}, "test_case": {"identifier": "testNotifyStatistics_send_successfulForMail", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNotifyStatistics_send_successfulForMail() {\n        NotifyStatistics statistics = channelChainTestObject.send(subscriber, eventTOs);\n        assertEquals(0, statistics.getFailedCounter());\n        assertEquals(2, statistics.getDeliveredCounter()); // 2 since 2 channels\n        assertEquals(2, statistics.getTotalCounter()); // 2 since 2 channels\n    }", "signature": "void testNotifyStatistics_send_successfulForMail()", "full_signature": "@Test public void testNotifyStatistics_send_successfulForMail()", "class_method_signature": "ChannelChainTest.testNotifyStatistics_send_successfulForMail()", "testcase": true, "constructor": false, "invocations": ["send", "assertEquals", "getFailedCounter", "assertEquals", "getDeliveredCounter", "assertEquals", "getTotalCounter"]}, "focal_class": {"identifier": "ChannelChain", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerHelper.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerHelper.getLogger()", "var_name": "log"}, {"original_string": "@Autowired\n    private Channel mailChannel;", "modifier": "@Autowired\n    private", "type": "Channel", "declarator": "mailChannel", "var_name": "mailChannel"}, {"original_string": "@Autowired\n    private Channel dummyChannel;", "modifier": "@Autowired\n    private", "type": "Channel", "declarator": "dummyChannel", "var_name": "dummyChannel"}, {"original_string": "private List<Channel> channels = new ArrayList<Channel>();", "modifier": "private", "type": "List<Channel>", "declarator": "channels = new ArrayList<Channel>()", "var_name": "channels"}], "methods": [{"identifier": "init", "parameters": "()", "modifiers": "@PostConstruct public", "return": "void", "signature": "void init()", "full_signature": "@PostConstruct public void init()", "class_method_signature": "ChannelChain.init()", "testcase": false, "constructor": false}, {"identifier": "getChannels", "parameters": "()", "modifiers": "public", "return": "List<Channel>", "signature": "List<Channel> getChannels()", "full_signature": "public List<Channel> getChannels()", "class_method_signature": "ChannelChain.getChannels()", "testcase": false, "constructor": false}, {"identifier": "getMailChannel", "parameters": "()", "modifiers": "public", "return": "Channel", "signature": "Channel getMailChannel()", "full_signature": "public Channel getMailChannel()", "class_method_signature": "ChannelChain.getMailChannel()", "testcase": false, "constructor": false}, {"identifier": "setMailChannel", "parameters": "(MailChannel mailChannel)", "modifiers": "public", "return": "void", "signature": "void setMailChannel(MailChannel mailChannel)", "full_signature": "public void setMailChannel(MailChannel mailChannel)", "class_method_signature": "ChannelChain.setMailChannel(MailChannel mailChannel)", "testcase": false, "constructor": false}, {"identifier": "getDummyChannel", "parameters": "()", "modifiers": "public", "return": "Channel", "signature": "Channel getDummyChannel()", "full_signature": "public Channel getDummyChannel()", "class_method_signature": "ChannelChain.getDummyChannel()", "testcase": false, "constructor": false}, {"identifier": "setDummyChannel", "parameters": "(DummyChannel dummyChannel)", "modifiers": "public", "return": "void", "signature": "void setDummyChannel(DummyChannel dummyChannel)", "full_signature": "public void setDummyChannel(DummyChannel dummyChannel)", "class_method_signature": "ChannelChain.setDummyChannel(DummyChannel dummyChannel)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(Subscriber subscriber, List<NotificationEventTO> events)", "modifiers": "public", "return": "NotifyStatistics", "signature": "NotifyStatistics send(Subscriber subscriber, List<NotificationEventTO> events)", "full_signature": "public NotifyStatistics send(Subscriber subscriber, List<NotificationEventTO> events)", "class_method_signature": "ChannelChain.send(Subscriber subscriber, List<NotificationEventTO> events)", "testcase": false, "constructor": false}], "file": "olat7.8/src/main/java/org/olat/lms/core/notification/impl/channel/ChannelChain.java"}, "focal_method": {"identifier": "send", "parameters": "(Subscriber subscriber, List<NotificationEventTO> events)", "modifiers": "public", "return": "NotifyStatistics", "body": "public NotifyStatistics send(Subscriber subscriber, List<NotificationEventTO> events) {\n        NotifyStatistics statistics = new NotifyStatistics();\n\n        if (events == null || events.isEmpty()) {\n            return statistics;\n        }\n        // TODO (REVIEW independent notifySubscriber): iterate over subscriber's channels instead of all channels\n        for (Channel channel : channels) {\n            boolean delivered = false;\n\n            if (!subscriber.getChannels().contains(channel.getChannelName()))\n                continue;\n            try {\n                channel.send(subscriber, events);\n                delivered = true;\n            } catch (Exception e) {\n                log.error(\"Could not send via the channel [\" + channel.getChannelName() + \"] for the subscriber [\" + subscriber.getId() + \"] because of: \" + e);\n            } finally {\n                statistics.addChannelResponse(channel.getChannelName(), delivered);\n            }\n        }\n        return statistics;\n    }", "signature": "NotifyStatistics send(Subscriber subscriber, List<NotificationEventTO> events)", "full_signature": "public NotifyStatistics send(Subscriber subscriber, List<NotificationEventTO> events)", "class_method_signature": "ChannelChain.send(Subscriber subscriber, List<NotificationEventTO> events)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "contains", "getChannels", "getChannelName", "send", "error", "getChannelName", "getId", "addChannelResponse", "getChannelName"]}, "repository": {"repo_id": 22589840, "url": "https://github.com/huihoo/olat", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 10, "size": 69738, "license": "licensed"}}