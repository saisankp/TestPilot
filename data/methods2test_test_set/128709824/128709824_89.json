{"test_class": {"identifier": "ExtensionLoaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ExtensionLoaderTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ExtensionLoaderTest.class)", "var_name": "LOGGER"}], "file": "core/api/src/test/java/com/alipay/sofa/rpc/ext/ExtensionLoaderTest.java"}, "test_case": {"identifier": "testParseAliasAndClassName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseAliasAndClassName() throws Exception {\n        ExtensionLoader loader = new ExtensionLoader<Filter>(Filter.class);\n\n        Assert.assertNull(loader.parseAliasAndClassName(null));\n        Assert.assertNull(loader.parseAliasAndClassName(\"\"));\n        Assert.assertNull(loader.parseAliasAndClassName(\"    \"));\n        Assert.assertNull(loader.parseAliasAndClassName(\"\\t\"));\n        Assert.assertNull(loader.parseAliasAndClassName(\"\\r\\n\"));\n\n        Assert.assertNull(loader.parseAliasAndClassName(\"    # xxxx\"));\n        Assert.assertNull(loader.parseAliasAndClassName(\"# xxxx\"));\n        Assert.assertNull(loader.parseAliasAndClassName(\"xxx=\"));\n\n        Assert.assertArrayEquals(loader.parseAliasAndClassName(\"1111\"), new String[] { null, \"1111\" });\n        Assert.assertArrayEquals(loader.parseAliasAndClassName(\"  1111\"), new String[] { null, \"1111\" });\n        Assert.assertArrayEquals(loader.parseAliasAndClassName(\"  1111   \"), new String[] { null, \"1111\" });\n        Assert.assertArrayEquals(loader.parseAliasAndClassName(\"1111   \"), new String[] { null, \"1111\" });\n        Assert.assertArrayEquals(loader.parseAliasAndClassName(\"1111#aa\"), new String[] { null, \"1111\" });\n        Assert.assertArrayEquals(loader.parseAliasAndClassName(\"  1111#aa\"), new String[] { null, \"1111\" });\n        Assert.assertArrayEquals(loader.parseAliasAndClassName(\"1111#aa   \"), new String[] { null, \"1111\" });\n        Assert.assertArrayEquals(loader.parseAliasAndClassName(\"  1111#aa  \"), new String[] { null, \"1111\" });\n        Assert.assertArrayEquals(loader.parseAliasAndClassName(\"1111 #aa\"), new String[] { null, \"1111\" });\n        Assert.assertArrayEquals(loader.parseAliasAndClassName(\"  1111 #aa\"), new String[] { null, \"1111\" });\n        Assert.assertArrayEquals(loader.parseAliasAndClassName(\"1111 #aa   \"), new String[] { null, \"1111\" });\n        Assert.assertArrayEquals(loader.parseAliasAndClassName(\"  1111 #aa  \"), new String[] { null, \"1111\" });\n\n        Assert.assertArrayEquals(loader.parseAliasAndClassName(\"aa=1111\"), new String[] { \"aa\", \"1111\" });\n        Assert.assertArrayEquals(loader.parseAliasAndClassName(\"  aa=1111\"), new String[] { \"aa\", \"1111\" });\n        Assert.assertArrayEquals(loader.parseAliasAndClassName(\"aa=1111  \"), new String[] { \"aa\", \"1111\" });\n        Assert.assertArrayEquals(loader.parseAliasAndClassName(\"  aa=1111  \"), new String[] { \"aa\", \"1111\" });\n        Assert.assertArrayEquals(loader.parseAliasAndClassName(\"aa=1111#aa\"), new String[] { \"aa\", \"1111\" });\n        Assert.assertArrayEquals(loader.parseAliasAndClassName(\"  aa=1111#aa\"), new String[] { \"aa\", \"1111\" });\n        Assert.assertArrayEquals(loader.parseAliasAndClassName(\"aa=1111#aa  \"), new String[] { \"aa\", \"1111\" });\n        Assert.assertArrayEquals(loader.parseAliasAndClassName(\"  aa=1111#aa  \"), new String[] { \"aa\", \"1111\" });\n        Assert.assertArrayEquals(loader.parseAliasAndClassName(\"aa=1111  #aa\"), new String[] { \"aa\", \"1111\" });\n        Assert.assertArrayEquals(loader.parseAliasAndClassName(\"  aa=1111  #aa\"), new String[] { \"aa\", \"1111\" });\n        Assert.assertArrayEquals(loader.parseAliasAndClassName(\"aa=1111  #aa  \"), new String[] { \"aa\", \"1111\" });\n        Assert.assertArrayEquals(loader.parseAliasAndClassName(\"  aa=1111  #aa  \"), new String[] { \"aa\", \"1111\" });\n    }", "signature": "void testParseAliasAndClassName()", "full_signature": "@Test public void testParseAliasAndClassName()", "class_method_signature": "ExtensionLoaderTest.testParseAliasAndClassName()", "testcase": true, "constructor": false, "invocations": ["assertNull", "parseAliasAndClassName", "assertNull", "parseAliasAndClassName", "assertNull", "parseAliasAndClassName", "assertNull", "parseAliasAndClassName", "assertNull", "parseAliasAndClassName", "assertNull", "parseAliasAndClassName", "assertNull", "parseAliasAndClassName", "assertNull", "parseAliasAndClassName", "assertArrayEquals", "parseAliasAndClassName", "assertArrayEquals", "parseAliasAndClassName", "assertArrayEquals", "parseAliasAndClassName", "assertArrayEquals", "parseAliasAndClassName", "assertArrayEquals", "parseAliasAndClassName", "assertArrayEquals", "parseAliasAndClassName", "assertArrayEquals", "parseAliasAndClassName", "assertArrayEquals", "parseAliasAndClassName", "assertArrayEquals", "parseAliasAndClassName", "assertArrayEquals", "parseAliasAndClassName", "assertArrayEquals", "parseAliasAndClassName", "assertArrayEquals", "parseAliasAndClassName", "assertArrayEquals", "parseAliasAndClassName", "assertArrayEquals", "parseAliasAndClassName", "assertArrayEquals", "parseAliasAndClassName", "assertArrayEquals", "parseAliasAndClassName", "assertArrayEquals", "parseAliasAndClassName", "assertArrayEquals", "parseAliasAndClassName", "assertArrayEquals", "parseAliasAndClassName", "assertArrayEquals", "parseAliasAndClassName", "assertArrayEquals", "parseAliasAndClassName", "assertArrayEquals", "parseAliasAndClassName", "assertArrayEquals", "parseAliasAndClassName", "assertArrayEquals", "parseAliasAndClassName"]}, "focal_class": {"identifier": "ExtensionLoader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static Logger                              LOGGER         = LoggerFactory\n                                                                                .getLogger(ExtensionLoader.class);", "modifier": "private final static", "type": "Logger", "declarator": "LOGGER         = LoggerFactory\n                                                                                .getLogger(ExtensionLoader.class)", "var_name": "LOGGER"}, {"original_string": "private static final String                              LOAD_FROM_CODE = \"DYNAMIC LOAD EXTENSION BY CODE\";", "modifier": "private static final", "type": "String", "declarator": "LOAD_FROM_CODE = \"DYNAMIC LOAD EXTENSION BY CODE\"", "var_name": "LOAD_FROM_CODE"}, {"original_string": "protected final Class<T>                                 interfaceClass;", "modifier": "protected final", "type": "Class<T>", "declarator": "interfaceClass", "var_name": "interfaceClass"}, {"original_string": "protected final String                                   interfaceName;", "modifier": "protected final", "type": "String", "declarator": "interfaceName", "var_name": "interfaceName"}, {"original_string": "protected final Extensible                               extensible;", "modifier": "protected final", "type": "Extensible", "declarator": "extensible", "var_name": "extensible"}, {"original_string": "protected final ConcurrentMap<String, ExtensionClass<T>> all;", "modifier": "protected final", "type": "ConcurrentMap<String, ExtensionClass<T>>", "declarator": "all", "var_name": "all"}, {"original_string": "protected final ConcurrentMap<String, T>                 factory;", "modifier": "protected final", "type": "ConcurrentMap<String, T>", "declarator": "factory", "var_name": "factory"}, {"original_string": "protected final List<ExtensionLoaderListener<T>>         listeners;", "modifier": "protected final", "type": "List<ExtensionLoaderListener<T>>", "declarator": "listeners", "var_name": "listeners"}], "methods": [{"identifier": "ExtensionLoader", "parameters": "(Class<T> interfaceClass, ExtensionLoaderListener<T> listener)", "modifiers": "public", "return": "", "signature": " ExtensionLoader(Class<T> interfaceClass, ExtensionLoaderListener<T> listener)", "full_signature": "public  ExtensionLoader(Class<T> interfaceClass, ExtensionLoaderListener<T> listener)", "class_method_signature": "ExtensionLoader.ExtensionLoader(Class<T> interfaceClass, ExtensionLoaderListener<T> listener)", "testcase": false, "constructor": true}, {"identifier": "ExtensionLoader", "parameters": "(Class<T> interfaceClass)", "modifiers": "protected", "return": "", "signature": " ExtensionLoader(Class<T> interfaceClass)", "full_signature": "protected  ExtensionLoader(Class<T> interfaceClass)", "class_method_signature": "ExtensionLoader.ExtensionLoader(Class<T> interfaceClass)", "testcase": false, "constructor": true}, {"identifier": "ExtensionLoader", "parameters": "(Class<T> interfaceClass, boolean autoLoad, ExtensionLoaderListener<T> listener)", "modifiers": "protected", "return": "", "signature": " ExtensionLoader(Class<T> interfaceClass, boolean autoLoad, ExtensionLoaderListener<T> listener)", "full_signature": "protected  ExtensionLoader(Class<T> interfaceClass, boolean autoLoad, ExtensionLoaderListener<T> listener)", "class_method_signature": "ExtensionLoader.ExtensionLoader(Class<T> interfaceClass, boolean autoLoad, ExtensionLoaderListener<T> listener)", "testcase": false, "constructor": true}, {"identifier": "loadFromFile", "parameters": "(String path)", "modifiers": "protected synchronized", "return": "void", "signature": "void loadFromFile(String path)", "full_signature": "protected synchronized void loadFromFile(String path)", "class_method_signature": "ExtensionLoader.loadFromFile(String path)", "testcase": false, "constructor": false}, {"identifier": "loadFromClassLoader", "parameters": "(ClassLoader classLoader, String fullFileName)", "modifiers": "protected", "return": "void", "signature": "void loadFromClassLoader(ClassLoader classLoader, String fullFileName)", "full_signature": "protected void loadFromClassLoader(ClassLoader classLoader, String fullFileName)", "class_method_signature": "ExtensionLoader.loadFromClassLoader(ClassLoader classLoader, String fullFileName)", "testcase": false, "constructor": false}, {"identifier": "readLine", "parameters": "(URL url, String line)", "modifiers": "protected", "return": "void", "signature": "void readLine(URL url, String line)", "full_signature": "protected void readLine(URL url, String line)", "class_method_signature": "ExtensionLoader.readLine(URL url, String line)", "testcase": false, "constructor": false}, {"identifier": "loadExtension", "parameters": "(String alias, Class loadedClazz, String location, String className)", "modifiers": "private", "return": "void", "signature": "void loadExtension(String alias, Class loadedClazz, String location, String className)", "full_signature": "private void loadExtension(String alias, Class loadedClazz, String location, String className)", "class_method_signature": "ExtensionLoader.loadExtension(String alias, Class loadedClazz, String location, String className)", "testcase": false, "constructor": false}, {"identifier": "buildClass", "parameters": "(Extension extension, Class<? extends T> implClass, String alias)", "modifiers": "private", "return": "ExtensionClass<T>", "signature": "ExtensionClass<T> buildClass(Extension extension, Class<? extends T> implClass, String alias)", "full_signature": "private ExtensionClass<T> buildClass(Extension extension, Class<? extends T> implClass, String alias)", "class_method_signature": "ExtensionLoader.buildClass(Extension extension, Class<? extends T> implClass, String alias)", "testcase": false, "constructor": false}, {"identifier": "loadSuccess", "parameters": "(String alias, ExtensionClass<T> extensionClass)", "modifiers": "private", "return": "void", "signature": "void loadSuccess(String alias, ExtensionClass<T> extensionClass)", "full_signature": "private void loadSuccess(String alias, ExtensionClass<T> extensionClass)", "class_method_signature": "ExtensionLoader.loadSuccess(String alias, ExtensionClass<T> extensionClass)", "testcase": false, "constructor": false}, {"identifier": "parseAliasAndClassName", "parameters": "(String line)", "modifiers": "protected", "return": "String[]", "signature": "String[] parseAliasAndClassName(String line)", "full_signature": "protected String[] parseAliasAndClassName(String line)", "class_method_signature": "ExtensionLoader.parseAliasAndClassName(String line)", "testcase": false, "constructor": false}, {"identifier": "getAllExtensions", "parameters": "()", "modifiers": "public", "return": "ConcurrentMap<String, ExtensionClass<T>>", "signature": "ConcurrentMap<String, ExtensionClass<T>> getAllExtensions()", "full_signature": "public ConcurrentMap<String, ExtensionClass<T>> getAllExtensions()", "class_method_signature": "ExtensionLoader.getAllExtensions()", "testcase": false, "constructor": false}, {"identifier": "getExtensionClass", "parameters": "(String alias)", "modifiers": "public", "return": "ExtensionClass<T>", "signature": "ExtensionClass<T> getExtensionClass(String alias)", "full_signature": "public ExtensionClass<T> getExtensionClass(String alias)", "class_method_signature": "ExtensionLoader.getExtensionClass(String alias)", "testcase": false, "constructor": false}, {"identifier": "getExtension", "parameters": "(String alias)", "modifiers": "public", "return": "T", "signature": "T getExtension(String alias)", "full_signature": "public T getExtension(String alias)", "class_method_signature": "ExtensionLoader.getExtension(String alias)", "testcase": false, "constructor": false}, {"identifier": "getExtension", "parameters": "(String alias, Class[] argTypes, Object[] args)", "modifiers": "public", "return": "T", "signature": "T getExtension(String alias, Class[] argTypes, Object[] args)", "full_signature": "public T getExtension(String alias, Class[] argTypes, Object[] args)", "class_method_signature": "ExtensionLoader.getExtension(String alias, Class[] argTypes, Object[] args)", "testcase": false, "constructor": false}, {"identifier": "loadExtension", "parameters": "(Class loadedClass)", "modifiers": "public", "return": "void", "signature": "void loadExtension(Class loadedClass)", "full_signature": "public void loadExtension(Class loadedClass)", "class_method_signature": "ExtensionLoader.loadExtension(Class loadedClass)", "testcase": false, "constructor": false}, {"identifier": "addListener", "parameters": "(ExtensionLoaderListener<T> listener)", "modifiers": "public", "return": "void", "signature": "void addListener(ExtensionLoaderListener<T> listener)", "full_signature": "public void addListener(ExtensionLoaderListener<T> listener)", "class_method_signature": "ExtensionLoader.addListener(ExtensionLoaderListener<T> listener)", "testcase": false, "constructor": false}], "file": "core/api/src/main/java/com/alipay/sofa/rpc/ext/ExtensionLoader.java"}, "focal_method": {"identifier": "parseAliasAndClassName", "parameters": "(String line)", "modifiers": "protected", "return": "String[]", "body": "protected String[] parseAliasAndClassName(String line) {\n        if (StringUtils.isBlank(line)) {\n            return null;\n        }\n        line = line.trim();\n        int i0 = line.indexOf('#');\n        if (i0 == 0 || line.length() == 0) {\n            return null; // \u5f53\u524d\u884c\u662f\u6ce8\u91ca \u6216\u8005 \u7a7a\n        }\n        if (i0 > 0) {\n            line = line.substring(0, i0).trim();\n        }\n\n        String alias = null;\n        String className;\n        int i = line.indexOf('=');\n        if (i > 0) {\n            alias = line.substring(0, i).trim(); // \u4ee5\u4ee3\u7801\u91cc\u7684\u4e3a\u51c6\n            className = line.substring(i + 1).trim();\n        } else {\n            className = line;\n        }\n        if (className.length() == 0) {\n            return null;\n        }\n        return new String[] { alias, className };\n    }", "signature": "String[] parseAliasAndClassName(String line)", "full_signature": "protected String[] parseAliasAndClassName(String line)", "class_method_signature": "ExtensionLoader.parseAliasAndClassName(String line)", "testcase": false, "constructor": false, "invocations": ["isBlank", "trim", "indexOf", "length", "trim", "substring", "indexOf", "trim", "substring", "trim", "substring", "length"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}