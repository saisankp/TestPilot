{"test_class": {"identifier": "PreconditionsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}], "file": "junit4/src/test/java/com/tngtech/java/junit/dataprovider/common/PreconditionsTest.java"}, "test_case": {"identifier": "testCheckArgumentShouldThrowIllegalArgumentExceptionIfExpressionIsFalseAndReturnFormattedMessage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCheckArgumentShouldThrowIllegalArgumentExceptionIfExpressionIsFalseAndReturnFormattedMessage() {\n        // Given:\n        expectedException.expect(IllegalArgumentException.class);\n        expectedException.expectMessage(\"error message template\");\n\n        // When:\n        Preconditions.checkArgument(1 == 2, \"error message %s\", \"template\");\n\n        // Then: expect exception\n    }", "signature": "void testCheckArgumentShouldThrowIllegalArgumentExceptionIfExpressionIsFalseAndReturnFormattedMessage()", "full_signature": "@Test public void testCheckArgumentShouldThrowIllegalArgumentExceptionIfExpressionIsFalseAndReturnFormattedMessage()", "class_method_signature": "PreconditionsTest.testCheckArgumentShouldThrowIllegalArgumentExceptionIfExpressionIsFalseAndReturnFormattedMessage()", "testcase": true, "constructor": false, "invocations": ["expect", "expectMessage", "checkArgument"]}, "focal_class": {"identifier": "Preconditions", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "checkNotNull", "parameters": "(T object, String errorMessage)", "modifiers": "public static", "return": "T", "signature": "T checkNotNull(T object, String errorMessage)", "full_signature": "public static T checkNotNull(T object, String errorMessage)", "class_method_signature": "Preconditions.checkNotNull(T object, String errorMessage)", "testcase": false, "constructor": false}, {"identifier": "checkArgument", "parameters": "(boolean expression, String errorMessage)", "modifiers": "public static", "return": "void", "signature": "void checkArgument(boolean expression, String errorMessage)", "full_signature": "public static void checkArgument(boolean expression, String errorMessage)", "class_method_signature": "Preconditions.checkArgument(boolean expression, String errorMessage)", "testcase": false, "constructor": false}, {"identifier": "checkArgument", "parameters": "(boolean expression, String errorMessageFormat, Object... errorMessageArgs)", "modifiers": "public static", "return": "void", "signature": "void checkArgument(boolean expression, String errorMessageFormat, Object... errorMessageArgs)", "full_signature": "public static void checkArgument(boolean expression, String errorMessageFormat, Object... errorMessageArgs)", "class_method_signature": "Preconditions.checkArgument(boolean expression, String errorMessageFormat, Object... errorMessageArgs)", "testcase": false, "constructor": false}], "file": "junit4/src/main/java/com/tngtech/java/junit/dataprovider/common/Preconditions.java"}, "focal_method": {"identifier": "checkArgument", "parameters": "(boolean expression, String errorMessage)", "modifiers": "public static", "return": "void", "body": "public static void checkArgument(boolean expression, String errorMessage) {\n        com.tngtech.junit.dataprovider.Preconditions.checkArgument(expression, errorMessage);\n    }", "signature": "void checkArgument(boolean expression, String errorMessage)", "full_signature": "public static void checkArgument(boolean expression, String errorMessage)", "class_method_signature": "Preconditions.checkArgument(boolean expression, String errorMessage)", "testcase": false, "constructor": false, "invocations": ["checkArgument"]}, "repository": {"repo_id": 8175611, "url": "https://github.com/TNG/junit-dataprovider", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 215, "size": 1383, "license": "licensed"}}