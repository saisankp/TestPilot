{"test_class": {"identifier": "SudoStreamPidsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int KNOWN_BURST = 1234;", "modifier": "private static final", "type": "int", "declarator": "KNOWN_BURST = 1234", "var_name": "KNOWN_BURST"}, {"original_string": "private static final long KNOWN_TIMEOUT = 60_000L;", "modifier": "private static final", "type": "long", "declarator": "KNOWN_TIMEOUT = 60_000L", "var_name": "KNOWN_TIMEOUT"}, {"original_string": "private static final EntityIdWithRevision<?> KNOWN_LOWER_BOUND =\n            new SudoStreamPids.LowerBound(JsonFactory.newObject(\"{\\\"id\\\":\\\"myId\\\",\\\"revision\\\":5}\"));", "modifier": "private static final", "type": "EntityIdWithRevision<?>", "declarator": "KNOWN_LOWER_BOUND =\n            new SudoStreamPids.LowerBound(JsonFactory.newObject(\"{\\\"id\\\":\\\"myId\\\",\\\"revision\\\":5}\"))", "var_name": "KNOWN_LOWER_BOUND"}, {"original_string": "private static final JsonObject KNOWN_JSON = JsonFactory.newObjectBuilder()\n            .set(Command.JsonFields.TYPE, SudoStreamPids.TYPE)\n            .set(SudoStreamPids.JSON_BURST, KNOWN_BURST)\n            .set(SudoStreamPids.JSON_TIMEOUT_MILLIS, KNOWN_TIMEOUT)\n            .set(SudoStreamPids.JSON_LOWER_BOUND, KNOWN_LOWER_BOUND.toJson())\n            .build();", "modifier": "private static final", "type": "JsonObject", "declarator": "KNOWN_JSON = JsonFactory.newObjectBuilder()\n            .set(Command.JsonFields.TYPE, SudoStreamPids.TYPE)\n            .set(SudoStreamPids.JSON_BURST, KNOWN_BURST)\n            .set(SudoStreamPids.JSON_TIMEOUT_MILLIS, KNOWN_TIMEOUT)\n            .set(SudoStreamPids.JSON_LOWER_BOUND, KNOWN_LOWER_BOUND.toJson())\n            .build()", "var_name": "KNOWN_JSON"}, {"original_string": "private static final DittoHeaders EMPTY_DITTO_HEADERS = DittoHeaders.empty();", "modifier": "private static final", "type": "DittoHeaders", "declarator": "EMPTY_DITTO_HEADERS = DittoHeaders.empty()", "var_name": "EMPTY_DITTO_HEADERS"}], "file": "services/models/streaming/src/test/java/org/eclipse/ditto/services/models/streaming/SudoStreamPidsTest.java"}, "test_case": {"identifier": "parseWithRegistry", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parseWithRegistry() {\n        final SudoStreamPids expected =\n                SudoStreamPids.fromJson(KNOWN_JSON, EMPTY_DITTO_HEADERS);\n\n        final Jsonifiable parsed = GlobalCommandRegistry.getInstance().parse(KNOWN_JSON, EMPTY_DITTO_HEADERS);\n\n        assertThat(parsed).isEqualTo(expected);\n    }", "signature": "void parseWithRegistry()", "full_signature": "@Test public void parseWithRegistry()", "class_method_signature": "SudoStreamPidsTest.parseWithRegistry()", "testcase": true, "constructor": false, "invocations": ["fromJson", "parse", "getInstance", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "SudoStreamPids", "superclass": "extends AbstractCommand<SudoStreamPids>", "interfaces": "implements StartStreamRequest, WithIdButActuallyNot", "fields": [{"original_string": "static final String NAME = \"SudoStreamPids\";", "modifier": "static final", "type": "String", "declarator": "NAME = \"SudoStreamPids\"", "var_name": "NAME"}, {"original_string": "public static final String TYPE = TYPE_PREFIX + NAME;", "modifier": "public static final", "type": "String", "declarator": "TYPE = TYPE_PREFIX + NAME", "var_name": "TYPE"}, {"original_string": "static final JsonFieldDefinition<Integer> JSON_BURST =\n            JsonFactory.newIntFieldDefinition(\"payload/burst\", REGULAR, V_1, V_2);", "modifier": "static final", "type": "JsonFieldDefinition<Integer>", "declarator": "JSON_BURST =\n            JsonFactory.newIntFieldDefinition(\"payload/burst\", REGULAR, V_1, V_2)", "var_name": "JSON_BURST"}, {"original_string": "static final JsonFieldDefinition<Long> JSON_TIMEOUT_MILLIS =\n            JsonFactory.newLongFieldDefinition(\"payload/timeoutMillis\", REGULAR, V_1, V_2);", "modifier": "static final", "type": "JsonFieldDefinition<Long>", "declarator": "JSON_TIMEOUT_MILLIS =\n            JsonFactory.newLongFieldDefinition(\"payload/timeoutMillis\", REGULAR, V_1, V_2)", "var_name": "JSON_TIMEOUT_MILLIS"}, {"original_string": "static final JsonFieldDefinition<JsonObject> JSON_LOWER_BOUND =\n            JsonFactory.newJsonObjectFieldDefinition(\"payload/lowerBound\", REGULAR, V_1, V_2);", "modifier": "static final", "type": "JsonFieldDefinition<JsonObject>", "declarator": "JSON_LOWER_BOUND =\n            JsonFactory.newJsonObjectFieldDefinition(\"payload/lowerBound\", REGULAR, V_1, V_2)", "var_name": "JSON_LOWER_BOUND"}, {"original_string": "private final int burst;", "modifier": "private final", "type": "int", "declarator": "burst", "var_name": "burst"}, {"original_string": "private final long timeoutMillis;", "modifier": "private final", "type": "long", "declarator": "timeoutMillis", "var_name": "timeoutMillis"}, {"original_string": "private final EntityIdWithRevision<?> lowerBound;", "modifier": "private final", "type": "EntityIdWithRevision<?>", "declarator": "lowerBound", "var_name": "lowerBound"}], "methods": [{"identifier": "SudoStreamPids", "parameters": "(final Integer burst, final Long timeoutMillis, final EntityIdWithRevision lowerBound,\n            final DittoHeaders dittoHeaders)", "modifiers": "private", "return": "", "signature": " SudoStreamPids(final Integer burst, final Long timeoutMillis, final EntityIdWithRevision lowerBound,\n            final DittoHeaders dittoHeaders)", "full_signature": "private  SudoStreamPids(final Integer burst, final Long timeoutMillis, final EntityIdWithRevision lowerBound,\n            final DittoHeaders dittoHeaders)", "class_method_signature": "SudoStreamPids.SudoStreamPids(final Integer burst, final Long timeoutMillis, final EntityIdWithRevision lowerBound,\n            final DittoHeaders dittoHeaders)", "testcase": false, "constructor": true}, {"identifier": "of", "parameters": "(final Integer burst, final Long timeoutMillis,\n            final DittoHeaders dittoHeaders)", "modifiers": "public static", "return": "SudoStreamPids", "signature": "SudoStreamPids of(final Integer burst, final Long timeoutMillis,\n            final DittoHeaders dittoHeaders)", "full_signature": "public static SudoStreamPids of(final Integer burst, final Long timeoutMillis,\n            final DittoHeaders dittoHeaders)", "class_method_signature": "SudoStreamPids.of(final Integer burst, final Long timeoutMillis,\n            final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(final JsonObject jsonObject,\n            final DittoHeaders dittoHeaders)", "modifiers": "public static", "return": "SudoStreamPids", "signature": "SudoStreamPids fromJson(final JsonObject jsonObject,\n            final DittoHeaders dittoHeaders)", "full_signature": "public static SudoStreamPids fromJson(final JsonObject jsonObject,\n            final DittoHeaders dittoHeaders)", "class_method_signature": "SudoStreamPids.fromJson(final JsonObject jsonObject,\n            final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "withLowerBound", "parameters": "(final EntityIdWithRevision lowerBound)", "modifiers": "public", "return": "SudoStreamPids", "signature": "SudoStreamPids withLowerBound(final EntityIdWithRevision lowerBound)", "full_signature": "public SudoStreamPids withLowerBound(final EntityIdWithRevision lowerBound)", "class_method_signature": "SudoStreamPids.withLowerBound(final EntityIdWithRevision lowerBound)", "testcase": false, "constructor": false}, {"identifier": "getLowerBound", "parameters": "()", "modifiers": "public", "return": "EntityIdWithRevision", "signature": "EntityIdWithRevision getLowerBound()", "full_signature": "public EntityIdWithRevision getLowerBound()", "class_method_signature": "SudoStreamPids.getLowerBound()", "testcase": false, "constructor": false}, {"identifier": "hasNonEmptyLowerBound", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasNonEmptyLowerBound()", "full_signature": "public boolean hasNonEmptyLowerBound()", "class_method_signature": "SudoStreamPids.hasNonEmptyLowerBound()", "testcase": false, "constructor": false}, {"identifier": "getBurst", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getBurst()", "full_signature": "@Override public int getBurst()", "class_method_signature": "SudoStreamPids.getBurst()", "testcase": false, "constructor": false}, {"identifier": "getTimeoutMillis", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getTimeoutMillis()", "full_signature": "@Override public long getTimeoutMillis()", "class_method_signature": "SudoStreamPids.getTimeoutMillis()", "testcase": false, "constructor": false}, {"identifier": "appendPayload", "parameters": "(final JsonObjectBuilder jsonObjectBuilder, final JsonSchemaVersion schemaVersion,\n            final Predicate<JsonField> thePredicate)", "modifiers": "@Override protected", "return": "void", "signature": "void appendPayload(final JsonObjectBuilder jsonObjectBuilder, final JsonSchemaVersion schemaVersion,\n            final Predicate<JsonField> thePredicate)", "full_signature": "@Override protected void appendPayload(final JsonObjectBuilder jsonObjectBuilder, final JsonSchemaVersion schemaVersion,\n            final Predicate<JsonField> thePredicate)", "class_method_signature": "SudoStreamPids.appendPayload(final JsonObjectBuilder jsonObjectBuilder, final JsonSchemaVersion schemaVersion,\n            final Predicate<JsonField> thePredicate)", "testcase": false, "constructor": false}, {"identifier": "getTypePrefix", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getTypePrefix()", "full_signature": "@Override public String getTypePrefix()", "class_method_signature": "SudoStreamPids.getTypePrefix()", "testcase": false, "constructor": false}, {"identifier": "getCategory", "parameters": "()", "modifiers": "@Override public", "return": "Category", "signature": "Category getCategory()", "full_signature": "@Override public Category getCategory()", "class_method_signature": "SudoStreamPids.getCategory()", "testcase": false, "constructor": false}, {"identifier": "setDittoHeaders", "parameters": "(final DittoHeaders dittoHeaders)", "modifiers": "@Override public", "return": "SudoStreamPids", "signature": "SudoStreamPids setDittoHeaders(final DittoHeaders dittoHeaders)", "full_signature": "@Override public SudoStreamPids setDittoHeaders(final DittoHeaders dittoHeaders)", "class_method_signature": "SudoStreamPids.setDittoHeaders(final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "SudoStreamPids.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(@Nullable final Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(@Nullable final Object obj)", "full_signature": "@Override public boolean equals(@Nullable final Object obj)", "class_method_signature": "SudoStreamPids.equals(@Nullable final Object obj)", "testcase": false, "constructor": false}, {"identifier": "canEqual", "parameters": "(@Nullable final Object other)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean canEqual(@Nullable final Object other)", "full_signature": "@Override protected boolean canEqual(@Nullable final Object other)", "class_method_signature": "SudoStreamPids.canEqual(@Nullable final Object other)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "SudoStreamPids.toString()", "testcase": false, "constructor": false}, {"identifier": "getResourcePath", "parameters": "()", "modifiers": "@Override public", "return": "JsonPointer", "signature": "JsonPointer getResourcePath()", "full_signature": "@Override public JsonPointer getResourcePath()", "class_method_signature": "SudoStreamPids.getResourcePath()", "testcase": false, "constructor": false}, {"identifier": "getResourceType", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getResourceType()", "full_signature": "@Override public String getResourceType()", "class_method_signature": "SudoStreamPids.getResourceType()", "testcase": false, "constructor": false}], "file": "services/models/streaming/src/main/java/org/eclipse/ditto/services/models/streaming/SudoStreamPids.java"}, "focal_method": {"identifier": "fromJson", "parameters": "(final JsonObject jsonObject,\n            final DittoHeaders dittoHeaders)", "modifiers": "public static", "return": "SudoStreamPids", "body": "public static SudoStreamPids fromJson(final JsonObject jsonObject,\n            final DittoHeaders dittoHeaders) {\n\n        final int burst = jsonObject.getValueOrThrow(JSON_BURST);\n        final long timeoutMillis = jsonObject.getValueOrThrow(JSON_TIMEOUT_MILLIS);\n        final EntityIdWithRevision lowerBound =\n                jsonObject.getValue(JSON_LOWER_BOUND).map(LowerBound::new).orElseGet(LowerBound::new);\n        return new SudoStreamPids(burst, timeoutMillis, lowerBound, dittoHeaders);\n    }", "signature": "SudoStreamPids fromJson(final JsonObject jsonObject,\n            final DittoHeaders dittoHeaders)", "full_signature": "public static SudoStreamPids fromJson(final JsonObject jsonObject,\n            final DittoHeaders dittoHeaders)", "class_method_signature": "SudoStreamPids.fromJson(final JsonObject jsonObject,\n            final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false, "invocations": ["getValueOrThrow", "getValueOrThrow", "orElseGet", "map", "getValue"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}