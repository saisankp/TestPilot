{"test_class": {"identifier": "SeatsSpecificationTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/satoolkit/seats/SeatsSpecificationTest.java"}, "test_case": {"identifier": "testSetXlBoundaryUpperBound", "parameters": "()", "modifiers": "@Test(expected = SeatsException.class) public", "return": "void", "body": "@Test(expected = SeatsException.class)\n    public void testSetXlBoundaryUpperBound() {\n        SeatsSpecification spec = new SeatsSpecification();\n        spec.setXlBoundary(1.5);\n    }", "signature": "void testSetXlBoundaryUpperBound()", "full_signature": "@Test(expected = SeatsException.class) public void testSetXlBoundaryUpperBound()", "class_method_signature": "SeatsSpecificationTest.testSetXlBoundaryUpperBound()", "testcase": true, "constructor": false, "invocations": ["setXlBoundary"]}, "focal_class": {"identifier": "SeatsSpecification", "superclass": "", "interfaces": "implements IProcSpecification, Cloneable", "fields": [{"original_string": "public static final double DEF_EPSPHI = 2, DEF_RMOD = .5, DEF_SMOD1 = .8, DEF_SMOD = .8, DEF_XL = .95;", "modifier": "public static final", "type": "double", "declarator": "DEF_EPSPHI = 2", "var_name": "DEF_EPSPHI"}, {"original_string": "public static final int DEF_NPRED=-1;", "modifier": "public static final", "type": "int", "declarator": "DEF_NPRED=-1", "var_name": "DEF_NPRED"}, {"original_string": "public static final String ADMISS = \"admiss\",\n            METHOD = \"method\",\n            EPSPHI = \"epsphi\",\n            RMOD = \"rmod\",\n            SMOD = \"smod\",\n            SMOD1 = \"stsmod\",\n            XL = \"xl\",\n            NPRED = \"npred\";", "modifier": "public static final", "type": "String", "declarator": "ADMISS = \"admiss\"", "var_name": "ADMISS"}, {"original_string": "private double xl_ = DEF_XL, rmod_ = DEF_RMOD, epsPhi_ = DEF_EPSPHI\n            , smod_ = DEF_SMOD, smod1_ = DEF_SMOD1;", "modifier": "private", "type": "double", "declarator": "xl_ = DEF_XL", "var_name": "xl_"}, {"original_string": "private ApproximationMode changeModel_ = ApproximationMode.Legacy;", "modifier": "private", "type": "ApproximationMode", "declarator": "changeModel_ = ApproximationMode.Legacy", "var_name": "changeModel_"}, {"original_string": "private EstimationMethod method_ = EstimationMethod.Burman;", "modifier": "private", "type": "EstimationMethod", "declarator": "method_ = EstimationMethod.Burman", "var_name": "method_"}, {"original_string": "private boolean log = false;", "modifier": "private", "type": "boolean", "declarator": "log = false", "var_name": "log"}, {"original_string": "private int npred=DEF_NPRED;", "modifier": "private", "type": "int", "declarator": "npred=DEF_NPRED", "var_name": "npred"}, {"original_string": "private SarimaComponent arima;", "modifier": "private", "type": "SarimaComponent", "declarator": "arima", "var_name": "arima"}], "methods": [{"identifier": "fillDictionary", "parameters": "(String prefix, Map<String, Class> dic)", "modifiers": "public static", "return": "void", "signature": "void fillDictionary(String prefix, Map<String, Class> dic)", "full_signature": "public static void fillDictionary(String prefix, Map<String, Class> dic)", "class_method_signature": "SeatsSpecification.fillDictionary(String prefix, Map<String, Class> dic)", "testcase": false, "constructor": false}, {"identifier": "getXlBoundary", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getXlBoundary()", "full_signature": "public double getXlBoundary()", "class_method_signature": "SeatsSpecification.getXlBoundary()", "testcase": false, "constructor": false}, {"identifier": "setXlBoundary", "parameters": "(double value)", "modifiers": "public", "return": "void", "signature": "void setXlBoundary(double value)", "full_signature": "public void setXlBoundary(double value)", "class_method_signature": "SeatsSpecification.setXlBoundary(double value)", "testcase": false, "constructor": false}, {"identifier": "getSeasTolerance", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getSeasTolerance()", "full_signature": "public double getSeasTolerance()", "class_method_signature": "SeatsSpecification.getSeasTolerance()", "testcase": false, "constructor": false}, {"identifier": "setSeasTolerance", "parameters": "(double value)", "modifiers": "public", "return": "void", "signature": "void setSeasTolerance(double value)", "full_signature": "public void setSeasTolerance(double value)", "class_method_signature": "SeatsSpecification.setSeasTolerance(double value)", "testcase": false, "constructor": false}, {"identifier": "getTrendBoundary", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getTrendBoundary()", "full_signature": "public double getTrendBoundary()", "class_method_signature": "SeatsSpecification.getTrendBoundary()", "testcase": false, "constructor": false}, {"identifier": "setTrendBoundary", "parameters": "(double value)", "modifiers": "public", "return": "void", "signature": "void setTrendBoundary(double value)", "full_signature": "public void setTrendBoundary(double value)", "class_method_signature": "SeatsSpecification.setTrendBoundary(double value)", "testcase": false, "constructor": false}, {"identifier": "getSeasBoundary", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getSeasBoundary()", "full_signature": "public double getSeasBoundary()", "class_method_signature": "SeatsSpecification.getSeasBoundary()", "testcase": false, "constructor": false}, {"identifier": "setSeasBoundary", "parameters": "(double value)", "modifiers": "public", "return": "void", "signature": "void setSeasBoundary(double value)", "full_signature": "public void setSeasBoundary(double value)", "class_method_signature": "SeatsSpecification.setSeasBoundary(double value)", "testcase": false, "constructor": false}, {"identifier": "getSeasBoundary1", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getSeasBoundary1()", "full_signature": "public double getSeasBoundary1()", "class_method_signature": "SeatsSpecification.getSeasBoundary1()", "testcase": false, "constructor": false}, {"identifier": "setSeasBoundary1", "parameters": "(double value)", "modifiers": "public", "return": "void", "signature": "void setSeasBoundary1(double value)", "full_signature": "public void setSeasBoundary1(double value)", "class_method_signature": "SeatsSpecification.setSeasBoundary1(double value)", "testcase": false, "constructor": false}, {"identifier": "getPredictionLength", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPredictionLength()", "full_signature": "public int getPredictionLength()", "class_method_signature": "SeatsSpecification.getPredictionLength()", "testcase": false, "constructor": false}, {"identifier": "setPredictionLength", "parameters": "(int npred)", "modifiers": "public", "return": "void", "signature": "void setPredictionLength(int npred)", "full_signature": "public void setPredictionLength(int npred)", "class_method_signature": "SeatsSpecification.setPredictionLength(int npred)", "testcase": false, "constructor": false}, {"identifier": "isDefault", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDefault()", "full_signature": "public boolean isDefault()", "class_method_signature": "SeatsSpecification.isDefault()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "SeatsSpecification", "signature": "SeatsSpecification clone()", "full_signature": "@Override public SeatsSpecification clone()", "class_method_signature": "SeatsSpecification.clone()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "SeatsSpecification.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(SeatsSpecification spec)", "modifiers": "private", "return": "boolean", "signature": "boolean equals(SeatsSpecification spec)", "full_signature": "private boolean equals(SeatsSpecification spec)", "class_method_signature": "SeatsSpecification.equals(SeatsSpecification spec)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "SeatsSpecification.hashCode()", "testcase": false, "constructor": false}, {"identifier": "getApproximationMode", "parameters": "()", "modifiers": "public", "return": "ApproximationMode", "signature": "ApproximationMode getApproximationMode()", "full_signature": "public ApproximationMode getApproximationMode()", "class_method_signature": "SeatsSpecification.getApproximationMode()", "testcase": false, "constructor": false}, {"identifier": "setApproximationMode", "parameters": "(ApproximationMode changeModel)", "modifiers": "public", "return": "void", "signature": "void setApproximationMode(ApproximationMode changeModel)", "full_signature": "public void setApproximationMode(ApproximationMode changeModel)", "class_method_signature": "SeatsSpecification.setApproximationMode(ApproximationMode changeModel)", "testcase": false, "constructor": false}, {"identifier": "getMethod", "parameters": "()", "modifiers": "public", "return": "EstimationMethod", "signature": "EstimationMethod getMethod()", "full_signature": "public EstimationMethod getMethod()", "class_method_signature": "SeatsSpecification.getMethod()", "testcase": false, "constructor": false}, {"identifier": "setMethod", "parameters": "(EstimationMethod method)", "modifiers": "public", "return": "void", "signature": "void setMethod(EstimationMethod method)", "full_signature": "public void setMethod(EstimationMethod method)", "class_method_signature": "SeatsSpecification.setMethod(EstimationMethod method)", "testcase": false, "constructor": false}, {"identifier": "isLog", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isLog()", "full_signature": "public boolean isLog()", "class_method_signature": "SeatsSpecification.isLog()", "testcase": false, "constructor": false}, {"identifier": "setLog", "parameters": "(boolean log)", "modifiers": "public", "return": "void", "signature": "void setLog(boolean log)", "full_signature": "public void setLog(boolean log)", "class_method_signature": "SeatsSpecification.setLog(boolean log)", "testcase": false, "constructor": false}, {"identifier": "getArima", "parameters": "()", "modifiers": "public", "return": "SarimaComponent", "signature": "SarimaComponent getArima()", "full_signature": "public SarimaComponent getArima()", "class_method_signature": "SeatsSpecification.getArima()", "testcase": false, "constructor": false}, {"identifier": "setArima", "parameters": "(SarimaComponent arima)", "modifiers": "public", "return": "void", "signature": "void setArima(SarimaComponent arima)", "full_signature": "public void setArima(SarimaComponent arima)", "class_method_signature": "SeatsSpecification.setArima(SarimaComponent arima)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(boolean verbose)", "modifiers": "@Override public", "return": "InformationSet", "signature": "InformationSet write(boolean verbose)", "full_signature": "@Override public InformationSet write(boolean verbose)", "class_method_signature": "SeatsSpecification.write(boolean verbose)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(InformationSet info)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean read(InformationSet info)", "full_signature": "@Override public boolean read(InformationSet info)", "class_method_signature": "SeatsSpecification.read(InformationSet info)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/satoolkit/seats/SeatsSpecification.java"}, "focal_method": {"identifier": "setXlBoundary", "parameters": "(double value)", "modifiers": "public", "return": "void", "body": "public void setXlBoundary(double value) {\n        if (value < 0.9 || value > 1) {\n            throw new SeatsException(\"XL should belong to [0.9, 1]\");\n        }\n        xl_ = value;\n    }", "signature": "void setXlBoundary(double value)", "full_signature": "public void setXlBoundary(double value)", "class_method_signature": "SeatsSpecification.setXlBoundary(double value)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}