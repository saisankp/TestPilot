{"test_class": {"identifier": "TraceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Trace utilUnderTest;", "modifier": "private", "type": "Trace", "declarator": "utilUnderTest", "var_name": "utilUnderTest"}, {"original_string": "private Tracer tracer = Mockito.mock(Tracer.class);", "modifier": "private", "type": "Tracer", "declarator": "tracer = Mockito.mock(Tracer.class)", "var_name": "tracer"}, {"original_string": "private Tracer noOpsTracer;", "modifier": "private", "type": "Tracer", "declarator": "noOpsTracer", "var_name": "noOpsTracer"}, {"original_string": "private UUID traceId;", "modifier": "private", "type": "UUID", "declarator": "traceId", "var_name": "traceId"}, {"original_string": "private UUID spanId;", "modifier": "private", "type": "UUID", "declarator": "spanId", "var_name": "spanId"}, {"original_string": "private UUID parentSpanId;", "modifier": "private", "type": "UUID", "declarator": "parentSpanId", "var_name": "parentSpanId"}, {"original_string": "private Dispatcher dispatcher;", "modifier": "private", "type": "Dispatcher", "declarator": "dispatcher", "var_name": "dispatcher"}, {"original_string": "private MetricsRegistry metrics;", "modifier": "private", "type": "MetricsRegistry", "declarator": "metrics", "var_name": "metrics"}, {"original_string": "private SpanContext testSpanContext;", "modifier": "private", "type": "SpanContext", "declarator": "testSpanContext", "var_name": "testSpanContext"}], "file": "modelservice/src/test/java/com/expedia/adaptivealerting/modelservice/tracing/TraceTest.java"}, "test_case": {"identifier": "testNullSpanContext", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNullSpanContext() throws NullPointerException {\n        val testChildSpan = noOpsTracer.buildSpan(\"testOperationName\");\n        SpanContext testNullSpanContext = null;\n        when(tracer.buildSpan(\"testOperationName\")).thenReturn(testChildSpan);\n        val resultSpan = utilUnderTest.startSpan(\"testOperationName\", testNullSpanContext);\n        Assert.assertEquals(\"testOperationName\", resultSpan.getOperationName());\n    }", "signature": "void testNullSpanContext()", "full_signature": "@Test public void testNullSpanContext()", "class_method_signature": "TraceTest.testNullSpanContext()", "testcase": true, "constructor": false, "invocations": ["buildSpan", "thenReturn", "when", "buildSpan", "startSpan", "assertEquals", "getOperationName"]}, "focal_class": {"identifier": "Trace", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Tracer modelServiceApiTracer;", "modifier": "private final", "type": "Tracer", "declarator": "modelServiceApiTracer", "var_name": "modelServiceApiTracer"}], "methods": [{"identifier": "Trace", "parameters": "(Tracer tracer)", "modifiers": "@Autowired public", "return": "", "signature": " Trace(Tracer tracer)", "full_signature": "@Autowired public  Trace(Tracer tracer)", "class_method_signature": "Trace.Trace(Tracer tracer)", "testcase": false, "constructor": true}, {"identifier": "startSpan", "parameters": "(String operationName, SpanContext spnContext)", "modifiers": "public", "return": "Span", "signature": "Span startSpan(String operationName, SpanContext spnContext)", "full_signature": "public Span startSpan(String operationName, SpanContext spnContext)", "class_method_signature": "Trace.startSpan(String operationName, SpanContext spnContext)", "testcase": false, "constructor": false}, {"identifier": "extractParentSpan", "parameters": "(HttpHeaders headers)", "modifiers": "public", "return": "SpanContext", "signature": "SpanContext extractParentSpan(HttpHeaders headers)", "full_signature": "public SpanContext extractParentSpan(HttpHeaders headers)", "class_method_signature": "Trace.extractParentSpan(HttpHeaders headers)", "testcase": false, "constructor": false}], "file": "modelservice/src/main/java/com/expedia/adaptivealerting/modelservice/tracing/Trace.java"}, "focal_method": {"identifier": "startSpan", "parameters": "(String operationName, SpanContext spnContext)", "modifiers": "public", "return": "Span", "body": "public Span startSpan(String operationName, SpanContext spnContext){\n        Span span;\n        if (spnContext!= null){\n            span = modelServiceApiTracer.buildSpan(operationName).asChildOf(spnContext).start();\n        }\n        else {\n            span = modelServiceApiTracer.buildSpan(operationName).start();\n        }\n        return span;\n    }", "signature": "Span startSpan(String operationName, SpanContext spnContext)", "full_signature": "public Span startSpan(String operationName, SpanContext spnContext)", "class_method_signature": "Trace.startSpan(String operationName, SpanContext spnContext)", "testcase": false, "constructor": false, "invocations": ["start", "asChildOf", "buildSpan", "start", "buildSpan"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}