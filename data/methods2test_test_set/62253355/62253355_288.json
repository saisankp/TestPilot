{"test_class": {"identifier": "SimpleVersioningManagerTest", "superclass": "extends OrmEnabledTestCase", "interfaces": "", "fields": [{"original_string": "private Repository repo;", "modifier": "private", "type": "Repository", "declarator": "repo", "var_name": "repo"}, {"original_string": "private SimpleVersioningManager manager;", "modifier": "private", "type": "SimpleVersioningManager", "declarator": "manager", "var_name": "manager"}, {"original_string": "private OrmFactory<VersionedRDFRecord> versionedRDFRecordFactory = getRequiredOrmFactory(VersionedRDFRecord.class);", "modifier": "private", "type": "OrmFactory<VersionedRDFRecord>", "declarator": "versionedRDFRecordFactory = getRequiredOrmFactory(VersionedRDFRecord.class)", "var_name": "versionedRDFRecordFactory"}, {"original_string": "private OrmFactory<OntologyRecord> ontologyRecordFactory = getRequiredOrmFactory(OntologyRecord.class);", "modifier": "private", "type": "OrmFactory<OntologyRecord>", "declarator": "ontologyRecordFactory = getRequiredOrmFactory(OntologyRecord.class)", "var_name": "ontologyRecordFactory"}, {"original_string": "private final IRI CATALOG_IRI = VALUE_FACTORY.createIRI(\"http://test.com#catalog\");", "modifier": "private final", "type": "IRI", "declarator": "CATALOG_IRI = VALUE_FACTORY.createIRI(\"http://test.com#catalog\")", "var_name": "CATALOG_IRI"}, {"original_string": "private User user;", "modifier": "private", "type": "User", "declarator": "user", "var_name": "user"}, {"original_string": "private VersionedRDFRecord record;", "modifier": "private", "type": "VersionedRDFRecord", "declarator": "record", "var_name": "record"}, {"original_string": "private OntologyRecord ontologyRecord;", "modifier": "private", "type": "OntologyRecord", "declarator": "ontologyRecord", "var_name": "ontologyRecord"}, {"original_string": "private Branch targetBranch;", "modifier": "private", "type": "Branch", "declarator": "targetBranch", "var_name": "targetBranch"}, {"original_string": "private Branch sourceBranch;", "modifier": "private", "type": "Branch", "declarator": "sourceBranch", "var_name": "sourceBranch"}, {"original_string": "private Commit commit;", "modifier": "private", "type": "Commit", "declarator": "commit", "var_name": "commit"}, {"original_string": "private InProgressCommit inProgressCommit;", "modifier": "private", "type": "InProgressCommit", "declarator": "inProgressCommit", "var_name": "inProgressCommit"}, {"original_string": "@Mock\n    private VersioningService<VersionedRDFRecord> baseService;", "modifier": "@Mock\n    private", "type": "VersioningService<VersionedRDFRecord>", "declarator": "baseService", "var_name": "baseService"}, {"original_string": "@Mock\n    private VersioningService<OntologyRecord> ontologyService;", "modifier": "@Mock\n    private", "type": "VersioningService<OntologyRecord>", "declarator": "ontologyService", "var_name": "ontologyService"}, {"original_string": "@Mock\n    private CatalogUtilsService catalogUtils;", "modifier": "@Mock\n    private", "type": "CatalogUtilsService", "declarator": "catalogUtils", "var_name": "catalogUtils"}, {"original_string": "@Mock\n    private CatalogConfigProvider config;", "modifier": "@Mock\n    private", "type": "CatalogConfigProvider", "declarator": "config", "var_name": "config"}], "file": "com.mobi.catalog.impl/src/test/java/com/mobi/catalog/impl/versioning/SimpleVersioningManagerTest.java"}, "test_case": {"identifier": "commitWithChangesWithRepoConnToOntologyRecordTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void commitWithChangesWithRepoConnToOntologyRecordTest() throws Exception {\n        // Setup:\n        Model additions = MODEL_FACTORY.createModel();\n        Model deletions = MODEL_FACTORY.createModel();\n\n        Resource result = manager.commit(CATALOG_IRI, ontologyRecord.getResource(), targetBranch.getResource(), user, \"Message\", additions, deletions, repo.getConnection());\n        assertEquals(commit.getResource(), result);\n        verify(catalogUtils).getRecord(eq(CATALOG_IRI), eq(ontologyRecord.getResource()), eq(ontologyRecordFactory), any(RepositoryConnection.class));\n        verify(ontologyService).getTargetBranch(eq(ontologyRecord), eq(targetBranch.getResource()), any(RepositoryConnection.class));\n        verify(ontologyService).getBranchHeadCommit(eq(targetBranch), any(RepositoryConnection.class));\n        verify(ontologyService).addCommit(eq(targetBranch), eq(user), eq(\"Message\"), eq(additions), eq(deletions), eq(commit), eq(null), any(RepositoryConnection.class));\n    }", "signature": "void commitWithChangesWithRepoConnToOntologyRecordTest()", "full_signature": "@Test public void commitWithChangesWithRepoConnToOntologyRecordTest()", "class_method_signature": "SimpleVersioningManagerTest.commitWithChangesWithRepoConnToOntologyRecordTest()", "testcase": true, "constructor": false, "invocations": ["createModel", "createModel", "commit", "getResource", "getResource", "getConnection", "assertEquals", "getResource", "getRecord", "verify", "eq", "eq", "getResource", "eq", "any", "getTargetBranch", "verify", "eq", "eq", "getResource", "any", "getBranchHeadCommit", "verify", "eq", "any", "addCommit", "verify", "eq", "eq", "eq", "eq", "eq", "eq", "eq", "any"]}, "focal_class": {"identifier": "SimpleVersioningManager", "superclass": "", "interfaces": "implements VersioningManager", "fields": [{"original_string": "private OrmFactoryRegistry factoryRegistry;", "modifier": "private", "type": "OrmFactoryRegistry", "declarator": "factoryRegistry", "var_name": "factoryRegistry"}, {"original_string": "private CatalogUtilsService catalogUtils;", "modifier": "private", "type": "CatalogUtilsService", "declarator": "catalogUtils", "var_name": "catalogUtils"}, {"original_string": "private CatalogConfigProvider config;", "modifier": "private", "type": "CatalogConfigProvider", "declarator": "config", "var_name": "config"}, {"original_string": "private Map<String, VersioningService<VersionedRDFRecord>> versioningServices = new HashMap<>();", "modifier": "private", "type": "Map<String, VersioningService<VersionedRDFRecord>>", "declarator": "versioningServices = new HashMap<>()", "var_name": "versioningServices"}, {"original_string": "private ValueFactory vf;", "modifier": "private", "type": "ValueFactory", "declarator": "vf", "var_name": "vf"}], "methods": [{"identifier": "addVersioningService", "parameters": "(VersioningService<? extends VersionedRDFRecord> versioningService)", "modifiers": "@Reference(type = '*', dynamic = true) @SuppressWarnings(\"unchecked\")", "return": "void", "signature": "void addVersioningService(VersioningService<? extends VersionedRDFRecord> versioningService)", "full_signature": "@Reference(type = '*', dynamic = true) @SuppressWarnings(\"unchecked\") void addVersioningService(VersioningService<? extends VersionedRDFRecord> versioningService)", "class_method_signature": "SimpleVersioningManager.addVersioningService(VersioningService<? extends VersionedRDFRecord> versioningService)", "testcase": false, "constructor": false}, {"identifier": "removeVersioningService", "parameters": "(VersioningService<? extends VersionedRDFRecord> versioningService)", "modifiers": "", "return": "void", "signature": "void removeVersioningService(VersioningService<? extends VersionedRDFRecord> versioningService)", "full_signature": " void removeVersioningService(VersioningService<? extends VersionedRDFRecord> versioningService)", "class_method_signature": "SimpleVersioningManager.removeVersioningService(VersioningService<? extends VersionedRDFRecord> versioningService)", "testcase": false, "constructor": false}, {"identifier": "setFactoryRegistry", "parameters": "(OrmFactoryRegistry factoryRegistry)", "modifiers": "@Reference", "return": "void", "signature": "void setFactoryRegistry(OrmFactoryRegistry factoryRegistry)", "full_signature": "@Reference void setFactoryRegistry(OrmFactoryRegistry factoryRegistry)", "class_method_signature": "SimpleVersioningManager.setFactoryRegistry(OrmFactoryRegistry factoryRegistry)", "testcase": false, "constructor": false}, {"identifier": "setCatalogUtils", "parameters": "(CatalogUtilsService catalogUtils)", "modifiers": "@Reference", "return": "void", "signature": "void setCatalogUtils(CatalogUtilsService catalogUtils)", "full_signature": "@Reference void setCatalogUtils(CatalogUtilsService catalogUtils)", "class_method_signature": "SimpleVersioningManager.setCatalogUtils(CatalogUtilsService catalogUtils)", "testcase": false, "constructor": false}, {"identifier": "setConfig", "parameters": "(CatalogConfigProvider config)", "modifiers": "@Reference", "return": "void", "signature": "void setConfig(CatalogConfigProvider config)", "full_signature": "@Reference void setConfig(CatalogConfigProvider config)", "class_method_signature": "SimpleVersioningManager.setConfig(CatalogConfigProvider config)", "testcase": false, "constructor": false}, {"identifier": "setVf", "parameters": "(ValueFactory vf)", "modifiers": "@Reference", "return": "void", "signature": "void setVf(ValueFactory vf)", "full_signature": "@Reference void setVf(ValueFactory vf)", "class_method_signature": "SimpleVersioningManager.setVf(ValueFactory vf)", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "(Resource catalogId, Resource recordId, Resource branchId, User user, String message)", "modifiers": "@Override public", "return": "Resource", "signature": "Resource commit(Resource catalogId, Resource recordId, Resource branchId, User user, String message)", "full_signature": "@Override public Resource commit(Resource catalogId, Resource recordId, Resource branchId, User user, String message)", "class_method_signature": "SimpleVersioningManager.commit(Resource catalogId, Resource recordId, Resource branchId, User user, String message)", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "(Resource catalogId, Resource recordId, Resource branchId, User user,\n                                            String message, RepositoryConnection conn)", "modifiers": "@Override public", "return": "Resource", "signature": "Resource commit(Resource catalogId, Resource recordId, Resource branchId, User user,\n                                            String message, RepositoryConnection conn)", "full_signature": "@Override public Resource commit(Resource catalogId, Resource recordId, Resource branchId, User user,\n                                            String message, RepositoryConnection conn)", "class_method_signature": "SimpleVersioningManager.commit(Resource catalogId, Resource recordId, Resource branchId, User user,\n                                            String message, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "(Resource catalogId, Resource recordId, Resource branchId, User user, String message,\n                                            Model additions, Model deletions)", "modifiers": "@Override public", "return": "Resource", "signature": "Resource commit(Resource catalogId, Resource recordId, Resource branchId, User user, String message,\n                                            Model additions, Model deletions)", "full_signature": "@Override public Resource commit(Resource catalogId, Resource recordId, Resource branchId, User user, String message,\n                                            Model additions, Model deletions)", "class_method_signature": "SimpleVersioningManager.commit(Resource catalogId, Resource recordId, Resource branchId, User user, String message,\n                                            Model additions, Model deletions)", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "(Resource catalogId, Resource recordId, Resource branchId, User user, String message,\n                                            Model additions, Model deletions, RepositoryConnection conn)", "modifiers": "@Override public", "return": "Resource", "signature": "Resource commit(Resource catalogId, Resource recordId, Resource branchId, User user, String message,\n                                            Model additions, Model deletions, RepositoryConnection conn)", "full_signature": "@Override public Resource commit(Resource catalogId, Resource recordId, Resource branchId, User user, String message,\n                                            Model additions, Model deletions, RepositoryConnection conn)", "class_method_signature": "SimpleVersioningManager.commit(Resource catalogId, Resource recordId, Resource branchId, User user, String message,\n                                            Model additions, Model deletions, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(Resource catalogId, Resource recordId, Resource sourceBranchId, Resource targetBranchId,\n                                           User user, Model additions, Model deletions)", "modifiers": "@Override public", "return": "Resource", "signature": "Resource merge(Resource catalogId, Resource recordId, Resource sourceBranchId, Resource targetBranchId,\n                                           User user, Model additions, Model deletions)", "full_signature": "@Override public Resource merge(Resource catalogId, Resource recordId, Resource sourceBranchId, Resource targetBranchId,\n                                           User user, Model additions, Model deletions)", "class_method_signature": "SimpleVersioningManager.merge(Resource catalogId, Resource recordId, Resource sourceBranchId, Resource targetBranchId,\n                                           User user, Model additions, Model deletions)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(Resource catalogId, Resource recordId, Resource sourceBranchId, Resource targetBranchId,\n                                           User user, Model additions, Model deletions, RepositoryConnection conn)", "modifiers": "@Override public", "return": "Resource", "signature": "Resource merge(Resource catalogId, Resource recordId, Resource sourceBranchId, Resource targetBranchId,\n                                           User user, Model additions, Model deletions, RepositoryConnection conn)", "full_signature": "@Override public Resource merge(Resource catalogId, Resource recordId, Resource sourceBranchId, Resource targetBranchId,\n                                           User user, Model additions, Model deletions, RepositoryConnection conn)", "class_method_signature": "SimpleVersioningManager.merge(Resource catalogId, Resource recordId, Resource sourceBranchId, Resource targetBranchId,\n                                           User user, Model additions, Model deletions, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "commitToBranch", "parameters": "(VersionedRDFRecord record, VersioningService<VersionedRDFRecord> service,\n                                    Resource branchId, User user, String message, RepositoryConnection conn)", "modifiers": "private", "return": "Resource", "signature": "Resource commitToBranch(VersionedRDFRecord record, VersioningService<VersionedRDFRecord> service,\n                                    Resource branchId, User user, String message, RepositoryConnection conn)", "full_signature": "private Resource commitToBranch(VersionedRDFRecord record, VersioningService<VersionedRDFRecord> service,\n                                    Resource branchId, User user, String message, RepositoryConnection conn)", "class_method_signature": "SimpleVersioningManager.commitToBranch(VersionedRDFRecord record, VersioningService<VersionedRDFRecord> service,\n                                    Resource branchId, User user, String message, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "commitToBranch", "parameters": "(VersionedRDFRecord record, VersioningService<VersionedRDFRecord> service,\n                                    Resource branchId, User user, String message, Model additions, Model deletions,\n                                    RepositoryConnection conn)", "modifiers": "private", "return": "Resource", "signature": "Resource commitToBranch(VersionedRDFRecord record, VersioningService<VersionedRDFRecord> service,\n                                    Resource branchId, User user, String message, Model additions, Model deletions,\n                                    RepositoryConnection conn)", "full_signature": "private Resource commitToBranch(VersionedRDFRecord record, VersioningService<VersionedRDFRecord> service,\n                                    Resource branchId, User user, String message, Model additions, Model deletions,\n                                    RepositoryConnection conn)", "class_method_signature": "SimpleVersioningManager.commitToBranch(VersionedRDFRecord record, VersioningService<VersionedRDFRecord> service,\n                                    Resource branchId, User user, String message, Model additions, Model deletions,\n                                    RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "mergeBranches", "parameters": "(VersionedRDFRecord record, VersioningService<VersionedRDFRecord> service,\n                                   Resource sourceBranchId, Resource targetBranchId, User user, Model additions,\n                                   Model deletions, RepositoryConnection conn)", "modifiers": "private", "return": "Resource", "signature": "Resource mergeBranches(VersionedRDFRecord record, VersioningService<VersionedRDFRecord> service,\n                                   Resource sourceBranchId, Resource targetBranchId, User user, Model additions,\n                                   Model deletions, RepositoryConnection conn)", "full_signature": "private Resource mergeBranches(VersionedRDFRecord record, VersioningService<VersionedRDFRecord> service,\n                                   Resource sourceBranchId, Resource targetBranchId, User user, Model additions,\n                                   Model deletions, RepositoryConnection conn)", "class_method_signature": "SimpleVersioningManager.mergeBranches(VersionedRDFRecord record, VersioningService<VersionedRDFRecord> service,\n                                   Resource sourceBranchId, Resource targetBranchId, User user, Model additions,\n                                   Model deletions, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "getMergeMessage", "parameters": "(Branch sourceBranch, Branch targetBranch)", "modifiers": "private", "return": "String", "signature": "String getMergeMessage(Branch sourceBranch, Branch targetBranch)", "full_signature": "private String getMergeMessage(Branch sourceBranch, Branch targetBranch)", "class_method_signature": "SimpleVersioningManager.getMergeMessage(Branch sourceBranch, Branch targetBranch)", "testcase": false, "constructor": false}, {"identifier": "getFactory", "parameters": "(Resource recordId, RepositoryConnection conn)", "modifiers": "private", "return": "OrmFactory<? extends VersionedRDFRecord>", "signature": "OrmFactory<? extends VersionedRDFRecord> getFactory(Resource recordId, RepositoryConnection conn)", "full_signature": "private OrmFactory<? extends VersionedRDFRecord> getFactory(Resource recordId, RepositoryConnection conn)", "class_method_signature": "SimpleVersioningManager.getFactory(Resource recordId, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "getCatalogRepoConnection", "parameters": "()", "modifiers": "private", "return": "RepositoryConnection", "signature": "RepositoryConnection getCatalogRepoConnection()", "full_signature": "private RepositoryConnection getCatalogRepoConnection()", "class_method_signature": "SimpleVersioningManager.getCatalogRepoConnection()", "testcase": false, "constructor": false}], "file": "com.mobi.catalog.impl/src/main/java/com/mobi/catalog/impl/versioning/SimpleVersioningManager.java"}, "focal_method": {"identifier": "commit", "parameters": "(Resource catalogId, Resource recordId, Resource branchId, User user, String message)", "modifiers": "@Override public", "return": "Resource", "body": "@Override\n    public Resource commit(Resource catalogId, Resource recordId, Resource branchId, User user, String message) {\n        try (RepositoryConnection conn = getCatalogRepoConnection()) {\n            OrmFactory<? extends VersionedRDFRecord> correctFactory = getFactory(recordId, conn);\n            VersionedRDFRecord record = catalogUtils.getRecord(catalogId, recordId, correctFactory, conn);\n            VersioningService<VersionedRDFRecord> service =\n                    versioningServices.get(correctFactory.getTypeIRI().stringValue());\n            conn.begin();\n            Resource commitResource = commitToBranch(record, service, branchId, user, message, conn);\n            conn.commit();\n            return commitResource;\n        }\n    }", "signature": "Resource commit(Resource catalogId, Resource recordId, Resource branchId, User user, String message)", "full_signature": "@Override public Resource commit(Resource catalogId, Resource recordId, Resource branchId, User user, String message)", "class_method_signature": "SimpleVersioningManager.commit(Resource catalogId, Resource recordId, Resource branchId, User user, String message)", "testcase": false, "constructor": false, "invocations": ["getCatalogRepoConnection", "getFactory", "getRecord", "get", "stringValue", "getTypeIRI", "begin", "commitToBranch", "commit"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}