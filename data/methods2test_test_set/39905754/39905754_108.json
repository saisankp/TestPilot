{"test_class": {"identifier": "BowlingTest", "superclass": "", "interfaces": "", "fields": [], "file": "Beirut/2015/Session1-Bowling/src/test/java/BowlingTest.java"}, "test_case": {"identifier": "acceptance_test", "parameters": "()", "modifiers": "@Ignore @Test public", "return": "void", "body": "@Ignore\n   @Test\n   public void\n   acceptance_test() {\n      assertThat(Bowling.play(\"X|X|X|X|X|X|X|X|X|X||XX\")).isEqualTo(300);\n      assertThat(Bowling.play(\"9-|9-|9-|9-|9-|9-|9-|9-|9-|9-||\")).isEqualTo(90);\n      assertThat(Bowling.play(\"5/|5/|5/|5/|5/|5/|5/|5/|5/|5/||5\")).isEqualTo(150);\n      assertThat(Bowling.play(\"X|7/|9-|X|-8|8/|-6|X|X|X||81\")).isEqualTo(167);\n\n   }", "signature": "void acceptance_test()", "full_signature": "@Ignore @Test public void acceptance_test()", "class_method_signature": "BowlingTest.acceptance_test()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "play", "isEqualTo", "assertThat", "play", "isEqualTo", "assertThat", "play", "isEqualTo", "assertThat", "play"]}, "focal_class": {"identifier": "Bowling", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int MAX_SCORE = 10;", "modifier": "private static final", "type": "int", "declarator": "MAX_SCORE = 10", "var_name": "MAX_SCORE"}, {"original_string": "private static final String STRIKE = \"X\";", "modifier": "private static final", "type": "String", "declarator": "STRIKE = \"X\"", "var_name": "STRIKE"}, {"original_string": "private static final String SPARE = \"/\";", "modifier": "private static final", "type": "String", "declarator": "SPARE = \"/\"", "var_name": "SPARE"}], "methods": [{"identifier": "play", "parameters": "(String gameFrame)", "modifiers": "public static", "return": "int", "signature": "int play(String gameFrame)", "full_signature": "public static int play(String gameFrame)", "class_method_signature": "Bowling.play(String gameFrame)", "testcase": false, "constructor": false}, {"identifier": "computeFrameScore", "parameters": "(String frame, String nextFrame)", "modifiers": "private static", "return": "int", "signature": "int computeFrameScore(String frame, String nextFrame)", "full_signature": "private static int computeFrameScore(String frame, String nextFrame)", "class_method_signature": "Bowling.computeFrameScore(String frame, String nextFrame)", "testcase": false, "constructor": false}, {"identifier": "frameScore", "parameters": "(String frame)", "modifiers": "private static", "return": "int", "signature": "int frameScore(String frame)", "full_signature": "private static int frameScore(String frame)", "class_method_signature": "Bowling.frameScore(String frame)", "testcase": false, "constructor": false}, {"identifier": "ballScore", "parameters": "(String frame, int position)", "modifiers": "private static", "return": "int", "signature": "int ballScore(String frame, int position)", "full_signature": "private static int ballScore(String frame, int position)", "class_method_signature": "Bowling.ballScore(String frame, int position)", "testcase": false, "constructor": false}, {"identifier": "frameCharAt", "parameters": "(String Frame, int position)", "modifiers": "private static", "return": "String", "signature": "String frameCharAt(String Frame, int position)", "full_signature": "private static String frameCharAt(String Frame, int position)", "class_method_signature": "Bowling.frameCharAt(String Frame, int position)", "testcase": false, "constructor": false}], "file": "Beirut/2015/Session1-Bowling/src/main/java/Bowling.java"}, "focal_method": {"identifier": "play", "parameters": "(String gameFrame)", "modifiers": "public static", "return": "int", "body": "public static int play(String gameFrame) {\n      int score = 0;\n      String[] splitGameFrame = gameFrame.replace(\"-\", \"0\").split(\"\\\\|\");\n\n      for (int i = 0; i < splitGameFrame.length; i++) {\n         final String frame = splitGameFrame[i];\n\n         if (i < splitGameFrame.length - 1) {\n\n            final String nextFrame = splitGameFrame[i + 1];\n\n            score += computeFrameScore(frame, nextFrame);\n         } else {\n            score += computeFrameScore(frame, \"--\");\n         }\n      }\n\n      return score;\n\n   }", "signature": "int play(String gameFrame)", "full_signature": "public static int play(String gameFrame)", "class_method_signature": "Bowling.play(String gameFrame)", "testcase": false, "constructor": false, "invocations": ["split", "replace", "computeFrameScore", "computeFrameScore"]}, "repository": {"repo_id": 39905754, "url": "https://github.com/murex/murex-coding-dojo", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 7, "size": 1700, "license": "licensed"}}