{"test_class": {"identifier": "FileDataTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private FileData file;", "modifier": "private", "type": "FileData", "declarator": "file", "var_name": "file"}, {"original_string": "private byte[] data1 = ByteArrayUtil.fromHex(\"11\");", "modifier": "private", "type": "byte[]", "declarator": "data1 = ByteArrayUtil.fromHex(\"11\")", "var_name": "data1"}, {"original_string": "private byte[] data2 = ByteArrayUtil.fromHex(\"2222\");", "modifier": "private", "type": "byte[]", "declarator": "data2 = ByteArrayUtil.fromHex(\"2222\")", "var_name": "data2"}, {"original_string": "private byte[] data3 = ByteArrayUtil.fromHex(\"333333\");", "modifier": "private", "type": "byte[]", "declarator": "data3 = ByteArrayUtil.fromHex(\"333333\")", "var_name": "data3"}, {"original_string": "private byte[] data4 = ByteArrayUtil.fromHex(\"44444444\");", "modifier": "private", "type": "byte[]", "declarator": "data4 = ByteArrayUtil.fromHex(\"44444444\")", "var_name": "data4"}], "file": "java/component/keyple-calypso/src/test/java/org/eclipse/keyple/calypso/transaction/FileDataTest.java"}, "test_case": {"identifier": "getContentAsCounterValue_whenRecordIsNotSet_shouldThrowNSEE", "parameters": "()", "modifiers": "@Test(expected = NoSuchElementException.class) public", "return": "void", "body": "@Test(expected = NoSuchElementException.class)\n  public void getContentAsCounterValue_whenRecordIsNotSet_shouldThrowNSEE() {\n    file.getContentAsCounterValue(1);\n  }", "signature": "void getContentAsCounterValue_whenRecordIsNotSet_shouldThrowNSEE()", "full_signature": "@Test(expected = NoSuchElementException.class) public void getContentAsCounterValue_whenRecordIsNotSet_shouldThrowNSEE()", "class_method_signature": "FileDataTest.getContentAsCounterValue_whenRecordIsNotSet_shouldThrowNSEE()", "testcase": true, "constructor": false, "invocations": ["getContentAsCounterValue"]}, "focal_class": {"identifier": "FileData", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private final TreeMap<Integer, byte[]> records = new TreeMap<Integer, byte[]>();", "modifier": "private final", "type": "TreeMap<Integer, byte[]>", "declarator": "records = new TreeMap<Integer, byte[]>()", "var_name": "records"}], "methods": [{"identifier": "FileData", "parameters": "()", "modifiers": "", "return": "", "signature": " FileData()", "full_signature": "  FileData()", "class_method_signature": "FileData.FileData()", "testcase": false, "constructor": true}, {"identifier": "FileData", "parameters": "(FileData source)", "modifiers": "", "return": "", "signature": " FileData(FileData source)", "full_signature": "  FileData(FileData source)", "class_method_signature": "FileData.FileData(FileData source)", "testcase": false, "constructor": true}, {"identifier": "getAllRecordsContent", "parameters": "()", "modifiers": "public", "return": "SortedMap<Integer, byte[]>", "signature": "SortedMap<Integer, byte[]> getAllRecordsContent()", "full_signature": "public SortedMap<Integer, byte[]> getAllRecordsContent()", "class_method_signature": "FileData.getAllRecordsContent()", "testcase": false, "constructor": false}, {"identifier": "getContent", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getContent()", "full_signature": "public byte[] getContent()", "class_method_signature": "FileData.getContent()", "testcase": false, "constructor": false}, {"identifier": "getContent", "parameters": "(int numRecord)", "modifiers": "public", "return": "byte[]", "signature": "byte[] getContent(int numRecord)", "full_signature": "public byte[] getContent(int numRecord)", "class_method_signature": "FileData.getContent(int numRecord)", "testcase": false, "constructor": false}, {"identifier": "getContent", "parameters": "(int numRecord, int dataOffset, int dataLength)", "modifiers": "public", "return": "byte[]", "signature": "byte[] getContent(int numRecord, int dataOffset, int dataLength)", "full_signature": "public byte[] getContent(int numRecord, int dataOffset, int dataLength)", "class_method_signature": "FileData.getContent(int numRecord, int dataOffset, int dataLength)", "testcase": false, "constructor": false}, {"identifier": "getContentAsCounterValue", "parameters": "(int numCounter)", "modifiers": "public", "return": "int", "signature": "int getContentAsCounterValue(int numCounter)", "full_signature": "public int getContentAsCounterValue(int numCounter)", "class_method_signature": "FileData.getContentAsCounterValue(int numCounter)", "testcase": false, "constructor": false}, {"identifier": "getAllCountersValue", "parameters": "()", "modifiers": "public", "return": "SortedMap<Integer, Integer>", "signature": "SortedMap<Integer, Integer> getAllCountersValue()", "full_signature": "public SortedMap<Integer, Integer> getAllCountersValue()", "class_method_signature": "FileData.getAllCountersValue()", "testcase": false, "constructor": false}, {"identifier": "setContent", "parameters": "(int numRecord, byte[] content)", "modifiers": "", "return": "void", "signature": "void setContent(int numRecord, byte[] content)", "full_signature": " void setContent(int numRecord, byte[] content)", "class_method_signature": "FileData.setContent(int numRecord, byte[] content)", "testcase": false, "constructor": false}, {"identifier": "setCounter", "parameters": "(int numCounter, byte[] content)", "modifiers": "", "return": "void", "signature": "void setCounter(int numCounter, byte[] content)", "full_signature": " void setCounter(int numCounter, byte[] content)", "class_method_signature": "FileData.setCounter(int numCounter, byte[] content)", "testcase": false, "constructor": false}, {"identifier": "setContent", "parameters": "(int numRecord, byte[] content, int offset)", "modifiers": "", "return": "void", "signature": "void setContent(int numRecord, byte[] content, int offset)", "full_signature": " void setContent(int numRecord, byte[] content, int offset)", "class_method_signature": "FileData.setContent(int numRecord, byte[] content, int offset)", "testcase": false, "constructor": false}, {"identifier": "fillContent", "parameters": "(int numRecord, byte[] content)", "modifiers": "", "return": "void", "signature": "void fillContent(int numRecord, byte[] content)", "full_signature": " void fillContent(int numRecord, byte[] content)", "class_method_signature": "FileData.fillContent(int numRecord, byte[] content)", "testcase": false, "constructor": false}, {"identifier": "addCyclicContent", "parameters": "(byte[] content)", "modifiers": "", "return": "void", "signature": "void addCyclicContent(byte[] content)", "full_signature": " void addCyclicContent(byte[] content)", "class_method_signature": "FileData.addCyclicContent(byte[] content)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "FileData.toString()", "testcase": false, "constructor": false}], "file": "java/component/keyple-calypso/src/main/java/org/eclipse/keyple/calypso/transaction/FileData.java"}, "focal_method": {"identifier": "getContentAsCounterValue", "parameters": "(int numCounter)", "modifiers": "public", "return": "int", "body": "public int getContentAsCounterValue(int numCounter) {\n\n    Assert.getInstance().greaterOrEqual(numCounter, 1, \"numCounter\");\n\n    byte[] rec1 = records.get(1);\n    if (rec1 == null) {\n      throw new NoSuchElementException(\"Record #1 is not set.\");\n    }\n    int counterIndex = (numCounter - 1) * 3;\n    if (counterIndex >= rec1.length) {\n      throw new NoSuchElementException(\n          \"Counter #\"\n              + numCounter\n              + \" is not set (nb of actual counters = \"\n              + (rec1.length / 3)\n              + \").\");\n    }\n    if (counterIndex + 3 > rec1.length) {\n      throw new IndexOutOfBoundsException(\n          \"Counter #\"\n              + numCounter\n              + \" has a truncated value (nb of actual counters = \"\n              + (rec1.length / 3)\n              + \").\");\n    }\n    return ByteArrayUtil.threeBytesToInt(rec1, counterIndex);\n  }", "signature": "int getContentAsCounterValue(int numCounter)", "full_signature": "public int getContentAsCounterValue(int numCounter)", "class_method_signature": "FileData.getContentAsCounterValue(int numCounter)", "testcase": false, "constructor": false, "invocations": ["greaterOrEqual", "getInstance", "get", "threeBytesToInt"]}, "repository": {"repo_id": 156416177, "url": "https://github.com/eclipse/keyple-java", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 10325, "license": "licensed"}}