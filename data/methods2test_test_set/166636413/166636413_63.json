{"test_class": {"identifier": "FileUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "collect_app/src/test/java/org/odk/collect/android/utilities/FileUtilsTest.java"}, "test_case": {"identifier": "mediaDirNameIsCorrect", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void mediaDirNameIsCorrect() {\n        String expected = \"sample-file-media\";\n\n        assertEquals(expected, FileUtils.constructMediaPath(\"sample-file.xml\"));\n        assertEquals(expected, FileUtils.constructMediaPath(\"sample-file.extension\"));\n        assertEquals(expected, FileUtils.constructMediaPath(\"sample-file.123\"));\n        assertEquals(expected, FileUtils.constructMediaPath(\"sample-file.docx\"));\n    }", "signature": "void mediaDirNameIsCorrect()", "full_signature": "@Test public void mediaDirNameIsCorrect()", "class_method_signature": "FileUtilsTest.mediaDirNameIsCorrect()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "constructMediaPath", "assertEquals", "constructMediaPath", "assertEquals", "constructMediaPath", "assertEquals", "constructMediaPath"]}, "focal_class": {"identifier": "FileUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String VALID_FILENAME = \"[ _\\\\-A-Za-z0-9]*.x[ht]*ml\";", "modifier": "public static final", "type": "String", "declarator": "VALID_FILENAME = \"[ _\\\\-A-Za-z0-9]*.x[ht]*ml\"", "var_name": "VALID_FILENAME"}, {"original_string": "public static final String FORMID = \"formid\";", "modifier": "public static final", "type": "String", "declarator": "FORMID = \"formid\"", "var_name": "FORMID"}, {"original_string": "public static final String VERSION = \"version\";", "modifier": "public static final", "type": "String", "declarator": "VERSION = \"version\"", "var_name": "VERSION"}, {"original_string": "public static final String TITLE = \"title\";", "modifier": "public static final", "type": "String", "declarator": "TITLE = \"title\"", "var_name": "TITLE"}, {"original_string": "public static final String SUBMISSIONURI = \"submission\";", "modifier": "public static final", "type": "String", "declarator": "SUBMISSIONURI = \"submission\"", "var_name": "SUBMISSIONURI"}, {"original_string": "public static final String BASE64_RSA_PUBLIC_KEY = \"base64RsaPublicKey\";", "modifier": "public static final", "type": "String", "declarator": "BASE64_RSA_PUBLIC_KEY = \"base64RsaPublicKey\"", "var_name": "BASE64_RSA_PUBLIC_KEY"}, {"original_string": "public static final String AUTO_DELETE = \"autoDelete\";", "modifier": "public static final", "type": "String", "declarator": "AUTO_DELETE = \"autoDelete\"", "var_name": "AUTO_DELETE"}, {"original_string": "public static final String AUTO_SEND = \"autoSend\";", "modifier": "public static final", "type": "String", "declarator": "AUTO_SEND = \"autoSend\"", "var_name": "AUTO_SEND"}, {"original_string": "public static final String MEDIA_SUFFIX = \"-media\";", "modifier": "public static final", "type": "String", "declarator": "MEDIA_SUFFIX = \"-media\"", "var_name": "MEDIA_SUFFIX"}, {"original_string": "public static final String LAST_SAVED_FILENAME = \"last-saved.xml\";", "modifier": "public static final", "type": "String", "declarator": "LAST_SAVED_FILENAME = \"last-saved.xml\"", "var_name": "LAST_SAVED_FILENAME"}, {"original_string": "private static final String STUB_XML = \"<?xml version='1.0' ?><stub />\";", "modifier": "private static final", "type": "String", "declarator": "STUB_XML = \"<?xml version='1.0' ?><stub />\"", "var_name": "STUB_XML"}, {"original_string": "private static boolean isSdcardSymlinkChecked;", "modifier": "private static", "type": "boolean", "declarator": "isSdcardSymlinkChecked", "var_name": "isSdcardSymlinkChecked"}, {"original_string": "private static boolean isSdcardSymlinkSameAsExternalStorageDirectory;", "modifier": "private static", "type": "boolean", "declarator": "isSdcardSymlinkSameAsExternalStorageDirectory", "var_name": "isSdcardSymlinkSameAsExternalStorageDirectory"}, {"original_string": "static int bufSize = 16 * 1024;", "modifier": "static", "type": "int", "declarator": "bufSize = 16 * 1024", "var_name": "bufSize"}], "methods": [{"identifier": "FileUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " FileUtils()", "full_signature": "private  FileUtils()", "class_method_signature": "FileUtils.FileUtils()", "testcase": false, "constructor": true}, {"identifier": "getMimeType", "parameters": "(String fileUrl)", "modifiers": "public static", "return": "String", "signature": "String getMimeType(String fileUrl)", "full_signature": "public static String getMimeType(String fileUrl)", "class_method_signature": "FileUtils.getMimeType(String fileUrl)", "testcase": false, "constructor": false}, {"identifier": "createFolder", "parameters": "(String path)", "modifiers": "public static", "return": "boolean", "signature": "boolean createFolder(String path)", "full_signature": "public static boolean createFolder(String path)", "class_method_signature": "FileUtils.createFolder(String path)", "testcase": false, "constructor": false}, {"identifier": "getMd5Hash", "parameters": "(File file)", "modifiers": "public static", "return": "String", "signature": "String getMd5Hash(File file)", "full_signature": "public static String getMd5Hash(File file)", "class_method_signature": "FileUtils.getMd5Hash(File file)", "testcase": false, "constructor": false}, {"identifier": "getMd5Hash", "parameters": "(InputStream is)", "modifiers": "public static", "return": "String", "signature": "String getMd5Hash(InputStream is)", "full_signature": "public static String getMd5Hash(InputStream is)", "class_method_signature": "FileUtils.getMd5Hash(InputStream is)", "testcase": false, "constructor": false}, {"identifier": "getBitmapScaledToDisplay", "parameters": "(File file, int screenHeight, int screenWidth)", "modifiers": "public static", "return": "Bitmap", "signature": "Bitmap getBitmapScaledToDisplay(File file, int screenHeight, int screenWidth)", "full_signature": "public static Bitmap getBitmapScaledToDisplay(File file, int screenHeight, int screenWidth)", "class_method_signature": "FileUtils.getBitmapScaledToDisplay(File file, int screenHeight, int screenWidth)", "testcase": false, "constructor": false}, {"identifier": "getBitmapScaledToDisplay", "parameters": "(File file, int screenHeight, int screenWidth, boolean upscaleEnabled)", "modifiers": "public static", "return": "Bitmap", "signature": "Bitmap getBitmapScaledToDisplay(File file, int screenHeight, int screenWidth, boolean upscaleEnabled)", "full_signature": "public static Bitmap getBitmapScaledToDisplay(File file, int screenHeight, int screenWidth, boolean upscaleEnabled)", "class_method_signature": "FileUtils.getBitmapScaledToDisplay(File file, int screenHeight, int screenWidth, boolean upscaleEnabled)", "testcase": false, "constructor": false}, {"identifier": "copyFile", "parameters": "(File sourceFile, File destFile)", "modifiers": "public static", "return": "String", "signature": "String copyFile(File sourceFile, File destFile)", "full_signature": "public static String copyFile(File sourceFile, File destFile)", "class_method_signature": "FileUtils.copyFile(File sourceFile, File destFile)", "testcase": false, "constructor": false}, {"identifier": "actualCopy", "parameters": "(File sourceFile, File destFile)", "modifiers": "private static", "return": "String", "signature": "String actualCopy(File sourceFile, File destFile)", "full_signature": "private static String actualCopy(File sourceFile, File destFile)", "class_method_signature": "FileUtils.actualCopy(File sourceFile, File destFile)", "testcase": false, "constructor": false}, {"identifier": "parseXML", "parameters": "(File xmlFile)", "modifiers": "public static", "return": "HashMap<String, String>", "signature": "HashMap<String, String> parseXML(File xmlFile)", "full_signature": "public static HashMap<String, String> parseXML(File xmlFile)", "class_method_signature": "FileUtils.parseXML(File xmlFile)", "testcase": false, "constructor": false}, {"identifier": "getChildElement", "parameters": "(Element parent, String childName)", "modifiers": "private static", "return": "Element", "signature": "Element getChildElement(Element parent, String childName)", "full_signature": "private static Element getChildElement(Element parent, String childName)", "class_method_signature": "FileUtils.getChildElement(Element parent, String childName)", "testcase": false, "constructor": false}, {"identifier": "deleteAndReport", "parameters": "(File file)", "modifiers": "public static", "return": "void", "signature": "void deleteAndReport(File file)", "full_signature": "public static void deleteAndReport(File file)", "class_method_signature": "FileUtils.deleteAndReport(File file)", "testcase": false, "constructor": false}, {"identifier": "getFormBasename", "parameters": "(File formXml)", "modifiers": "public static", "return": "String", "signature": "String getFormBasename(File formXml)", "full_signature": "public static String getFormBasename(File formXml)", "class_method_signature": "FileUtils.getFormBasename(File formXml)", "testcase": false, "constructor": false}, {"identifier": "getFormBasename", "parameters": "(String formFilePath)", "modifiers": "public static", "return": "String", "signature": "String getFormBasename(String formFilePath)", "full_signature": "public static String getFormBasename(String formFilePath)", "class_method_signature": "FileUtils.getFormBasename(String formFilePath)", "testcase": false, "constructor": false}, {"identifier": "constructMediaPath", "parameters": "(String formFilePath)", "modifiers": "public static", "return": "String", "signature": "String constructMediaPath(String formFilePath)", "full_signature": "public static String constructMediaPath(String formFilePath)", "class_method_signature": "FileUtils.constructMediaPath(String formFilePath)", "testcase": false, "constructor": false}, {"identifier": "getFormMediaDir", "parameters": "(File formXml)", "modifiers": "public static", "return": "File", "signature": "File getFormMediaDir(File formXml)", "full_signature": "public static File getFormMediaDir(File formXml)", "class_method_signature": "FileUtils.getFormMediaDir(File formXml)", "testcase": false, "constructor": false}, {"identifier": "getFormBasenameFromMediaFolder", "parameters": "(File mediaFolder)", "modifiers": "public static", "return": "String", "signature": "String getFormBasenameFromMediaFolder(File mediaFolder)", "full_signature": "public static String getFormBasenameFromMediaFolder(File mediaFolder)", "class_method_signature": "FileUtils.getFormBasenameFromMediaFolder(File mediaFolder)", "testcase": false, "constructor": false}, {"identifier": "getLastSavedFile", "parameters": "(File formXml)", "modifiers": "public static", "return": "File", "signature": "File getLastSavedFile(File formXml)", "full_signature": "public static File getLastSavedFile(File formXml)", "class_method_signature": "FileUtils.getLastSavedFile(File formXml)", "testcase": false, "constructor": false}, {"identifier": "getLastSavedPath", "parameters": "(File mediaFolder)", "modifiers": "public static", "return": "String", "signature": "String getLastSavedPath(File mediaFolder)", "full_signature": "public static String getLastSavedPath(File mediaFolder)", "class_method_signature": "FileUtils.getLastSavedPath(File mediaFolder)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateLastSavedSrc", "parameters": "(File formXml)", "modifiers": "public static", "return": "String", "signature": "String getOrCreateLastSavedSrc(File formXml)", "full_signature": "public static String getOrCreateLastSavedSrc(File formXml)", "class_method_signature": "FileUtils.getOrCreateLastSavedSrc(File formXml)", "testcase": false, "constructor": false}, {"identifier": "checkMediaPath", "parameters": "(File mediaDir)", "modifiers": "public static", "return": "void", "signature": "void checkMediaPath(File mediaDir)", "full_signature": "public static void checkMediaPath(File mediaDir)", "class_method_signature": "FileUtils.checkMediaPath(File mediaDir)", "testcase": false, "constructor": false}, {"identifier": "purgeMediaPath", "parameters": "(String mediaPath)", "modifiers": "public static", "return": "void", "signature": "void purgeMediaPath(String mediaPath)", "full_signature": "public static void purgeMediaPath(String mediaPath)", "class_method_signature": "FileUtils.purgeMediaPath(String mediaPath)", "testcase": false, "constructor": false}, {"identifier": "moveMediaFiles", "parameters": "(String tempMediaPath, File formMediaPath)", "modifiers": "public static", "return": "void", "signature": "void moveMediaFiles(String tempMediaPath, File formMediaPath)", "full_signature": "public static void moveMediaFiles(String tempMediaPath, File formMediaPath)", "class_method_signature": "FileUtils.moveMediaFiles(String tempMediaPath, File formMediaPath)", "testcase": false, "constructor": false}, {"identifier": "saveBitmapToFile", "parameters": "(Bitmap bitmap, String path)", "modifiers": "public static", "return": "void", "signature": "void saveBitmapToFile(Bitmap bitmap, String path)", "full_signature": "public static void saveBitmapToFile(Bitmap bitmap, String path)", "class_method_signature": "FileUtils.saveBitmapToFile(Bitmap bitmap, String path)", "testcase": false, "constructor": false}, {"identifier": "getBitmap", "parameters": "(String path, BitmapFactory.Options originalOptions)", "modifiers": "public static", "return": "Bitmap", "signature": "Bitmap getBitmap(String path, BitmapFactory.Options originalOptions)", "full_signature": "public static Bitmap getBitmap(String path, BitmapFactory.Options originalOptions)", "class_method_signature": "FileUtils.getBitmap(String path, BitmapFactory.Options originalOptions)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(File file)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] read(File file)", "full_signature": "public static byte[] read(File file)", "class_method_signature": "FileUtils.read(File file)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(File file, byte[] data)", "modifiers": "public static", "return": "void", "signature": "void write(File file, byte[] data)", "full_signature": "public static void write(File file, byte[] data)", "class_method_signature": "FileUtils.write(File file, byte[] data)", "testcase": false, "constructor": false}, {"identifier": "comparePaths", "parameters": "(String a, String b)", "modifiers": "public static", "return": "int", "signature": "int comparePaths(String a, String b)", "full_signature": "public static int comparePaths(String a, String b)", "class_method_signature": "FileUtils.comparePaths(String a, String b)", "testcase": false, "constructor": false}, {"identifier": "getFileExtension", "parameters": "(String fileName)", "modifiers": "public static", "return": "String", "signature": "String getFileExtension(String fileName)", "full_signature": "public static String getFileExtension(String fileName)", "class_method_signature": "FileUtils.getFileExtension(String fileName)", "testcase": false, "constructor": false}, {"identifier": "grantFilePermissions", "parameters": "(Intent intent, Uri uri, Context context)", "modifiers": "public static", "return": "void", "signature": "void grantFilePermissions(Intent intent, Uri uri, Context context)", "full_signature": "public static void grantFilePermissions(Intent intent, Uri uri, Context context)", "class_method_signature": "FileUtils.grantFilePermissions(Intent intent, Uri uri, Context context)", "testcase": false, "constructor": false}, {"identifier": "grantFileReadPermissions", "parameters": "(Intent intent, Uri uri, Context context)", "modifiers": "public static", "return": "void", "signature": "void grantFileReadPermissions(Intent intent, Uri uri, Context context)", "full_signature": "public static void grantFileReadPermissions(Intent intent, Uri uri, Context context)", "class_method_signature": "FileUtils.grantFileReadPermissions(Intent intent, Uri uri, Context context)", "testcase": false, "constructor": false}, {"identifier": "simplifyPath", "parameters": "(File file)", "modifiers": "@SuppressWarnings(\"PMD.DoNotHardCodeSDCard\") public static", "return": "File", "signature": "File simplifyPath(File file)", "full_signature": "@SuppressWarnings(\"PMD.DoNotHardCodeSDCard\") public static File simplifyPath(File file)", "class_method_signature": "FileUtils.simplifyPath(File file)", "testcase": false, "constructor": false}, {"identifier": "checkIfSdcardSymlinkSameAsExternalStorageDirectory", "parameters": "()", "modifiers": "@SuppressWarnings(\"PMD.DoNotHardCodeSDCard\") @SuppressFBWarnings( value = \"DMI_HARDCODED_ABSOLUTE_FILENAME\", justification = \"The purpose of this function is to test this specific path.\" ) private static", "return": "void", "signature": "void checkIfSdcardSymlinkSameAsExternalStorageDirectory()", "full_signature": "@SuppressWarnings(\"PMD.DoNotHardCodeSDCard\") @SuppressFBWarnings( value = \"DMI_HARDCODED_ABSOLUTE_FILENAME\", justification = \"The purpose of this function is to test this specific path.\" ) private static void checkIfSdcardSymlinkSameAsExternalStorageDirectory()", "class_method_signature": "FileUtils.checkIfSdcardSymlinkSameAsExternalStorageDirectory()", "testcase": false, "constructor": false}, {"identifier": "walk", "parameters": "(File root)", "modifiers": "public static", "return": "Iterable<File>", "signature": "Iterable<File> walk(File root)", "full_signature": "public static Iterable<File> walk(File root)", "class_method_signature": "FileUtils.walk(File root)", "testcase": false, "constructor": false}, {"identifier": "walkBreadthFirst", "parameters": "(File root)", "modifiers": "public static", "return": "Iterable<File>", "signature": "Iterable<File> walkBreadthFirst(File root)", "full_signature": "public static Iterable<File> walkBreadthFirst(File root)", "class_method_signature": "FileUtils.walkBreadthFirst(File root)", "testcase": false, "constructor": false}, {"identifier": "isFileExists", "parameters": "(File file)", "modifiers": "public static", "return": "boolean", "signature": "boolean isFileExists(File file)", "full_signature": "public static boolean isFileExists(File file)", "class_method_signature": "FileUtils.isFileExists(File file)", "testcase": false, "constructor": false}, {"identifier": "isFileExists", "parameters": "(String filePath)", "modifiers": "public static", "return": "boolean", "signature": "boolean isFileExists(String filePath)", "full_signature": "public static boolean isFileExists(String filePath)", "class_method_signature": "FileUtils.isFileExists(String filePath)", "testcase": false, "constructor": false}, {"identifier": "copyDir", "parameters": "(final File srcDir,\n                                   final File destDir)", "modifiers": "private static", "return": "boolean", "signature": "boolean copyDir(final File srcDir,\n                                   final File destDir)", "full_signature": "private static boolean copyDir(final File srcDir,\n                                   final File destDir)", "class_method_signature": "FileUtils.copyDir(final File srcDir,\n                                   final File destDir)", "testcase": false, "constructor": false}, {"identifier": "copyOrMoveDir", "parameters": "(final File srcDir,\n                                         final File destDir,\n                                         final OnReplaceListener listener,\n                                         final boolean isMove)", "modifiers": "private static", "return": "boolean", "signature": "boolean copyOrMoveDir(final File srcDir,\n                                         final File destDir,\n                                         final OnReplaceListener listener,\n                                         final boolean isMove)", "full_signature": "private static boolean copyOrMoveDir(final File srcDir,\n                                         final File destDir,\n                                         final OnReplaceListener listener,\n                                         final boolean isMove)", "class_method_signature": "FileUtils.copyOrMoveDir(final File srcDir,\n                                         final File destDir,\n                                         final OnReplaceListener listener,\n                                         final boolean isMove)", "testcase": false, "constructor": false}, {"identifier": "getFileByPath", "parameters": "(String filePath)", "modifiers": "public static", "return": "File", "signature": "File getFileByPath(String filePath)", "full_signature": "public static File getFileByPath(String filePath)", "class_method_signature": "FileUtils.getFileByPath(String filePath)", "testcase": false, "constructor": false}, {"identifier": "isSpace", "parameters": "(String s)", "modifiers": "private static", "return": "boolean", "signature": "boolean isSpace(String s)", "full_signature": "private static boolean isSpace(String s)", "class_method_signature": "FileUtils.isSpace(String s)", "testcase": false, "constructor": false}, {"identifier": "copyOrMoveFile", "parameters": "(final File srcFile,\n                                          final File destFile,\n                                          final OnReplaceListener listener,\n                                          final boolean isMove)", "modifiers": "private static", "return": "boolean", "signature": "boolean copyOrMoveFile(final File srcFile,\n                                          final File destFile,\n                                          final OnReplaceListener listener,\n                                          final boolean isMove)", "full_signature": "private static boolean copyOrMoveFile(final File srcFile,\n                                          final File destFile,\n                                          final OnReplaceListener listener,\n                                          final boolean isMove)", "class_method_signature": "FileUtils.copyOrMoveFile(final File srcFile,\n                                          final File destFile,\n                                          final OnReplaceListener listener,\n                                          final boolean isMove)", "testcase": false, "constructor": false}, {"identifier": "deleteFile", "parameters": "(final File file)", "modifiers": "public static", "return": "boolean", "signature": "boolean deleteFile(final File file)", "full_signature": "public static boolean deleteFile(final File file)", "class_method_signature": "FileUtils.deleteFile(final File file)", "testcase": false, "constructor": false}, {"identifier": "writeFileFromIS", "parameters": "(final File file,\n                                           final InputStream is)", "modifiers": "private static", "return": "boolean", "signature": "boolean writeFileFromIS(final File file,\n                                           final InputStream is)", "full_signature": "private static boolean writeFileFromIS(final File file,\n                                           final InputStream is)", "class_method_signature": "FileUtils.writeFileFromIS(final File file,\n                                           final InputStream is)", "testcase": false, "constructor": false}, {"identifier": "deleteAllInDir", "parameters": "(final File dir)", "modifiers": "public static", "return": "boolean", "signature": "boolean deleteAllInDir(final File dir)", "full_signature": "public static boolean deleteAllInDir(final File dir)", "class_method_signature": "FileUtils.deleteAllInDir(final File dir)", "testcase": false, "constructor": false}, {"identifier": "deleteFilesInDirWithFilter", "parameters": "(final File dir, final FileFilter filter)", "modifiers": "public static", "return": "boolean", "signature": "boolean deleteFilesInDirWithFilter(final File dir, final FileFilter filter)", "full_signature": "public static boolean deleteFilesInDirWithFilter(final File dir, final FileFilter filter)", "class_method_signature": "FileUtils.deleteFilesInDirWithFilter(final File dir, final FileFilter filter)", "testcase": false, "constructor": false}, {"identifier": "deleteDir", "parameters": "(final File dir)", "modifiers": "public static", "return": "boolean", "signature": "boolean deleteDir(final File dir)", "full_signature": "public static boolean deleteDir(final File dir)", "class_method_signature": "FileUtils.deleteDir(final File dir)", "testcase": false, "constructor": false}, {"identifier": "createOrExistsDir", "parameters": "(final File file)", "modifiers": "public static", "return": "boolean", "signature": "boolean createOrExistsDir(final File file)", "full_signature": "public static boolean createOrExistsDir(final File file)", "class_method_signature": "FileUtils.createOrExistsDir(final File file)", "testcase": false, "constructor": false}, {"identifier": "copyDir", "parameters": "(final String srcDirPath,\n                                  final String destDirPath)", "modifiers": "public static", "return": "boolean", "signature": "boolean copyDir(final String srcDirPath,\n                                  final String destDirPath)", "full_signature": "public static boolean copyDir(final String srcDirPath,\n                                  final String destDirPath)", "class_method_signature": "FileUtils.copyDir(final String srcDirPath,\n                                  final String destDirPath)", "testcase": false, "constructor": false}], "file": "collect_app/src/main/java/org/odk/collect/android/utilities/FileUtils.java"}, "focal_method": {"identifier": "constructMediaPath", "parameters": "(String formFilePath)", "modifiers": "public static", "return": "String", "body": "public static String constructMediaPath(String formFilePath) {\n        return getFormBasename(formFilePath) + MEDIA_SUFFIX;\n    }", "signature": "String constructMediaPath(String formFilePath)", "full_signature": "public static String constructMediaPath(String formFilePath)", "class_method_signature": "FileUtils.constructMediaPath(String formFilePath)", "testcase": false, "constructor": false, "invocations": ["getFormBasename"]}, "repository": {"repo_id": 166636413, "url": "https://github.com/fieldsight/fieldsight-mobile", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 14, "size": 41030, "license": "licensed"}}