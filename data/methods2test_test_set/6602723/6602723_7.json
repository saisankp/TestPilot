{"test_class": {"identifier": "TestCircuitBreakerAspect", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CircuitBreakerAspect aspect;", "modifier": "private", "type": "CircuitBreakerAspect", "declarator": "aspect", "var_name": "aspect"}, {"original_string": "CircuitBreaker mockAnnotation;", "modifier": "", "type": "CircuitBreaker", "declarator": "mockAnnotation", "var_name": "mockAnnotation"}, {"original_string": "Signature mockSignature;", "modifier": "", "type": "Signature", "declarator": "mockSignature", "var_name": "mockSignature"}, {"original_string": "private static final String TEST_CIRCUIT_BREAKER = \"TestCircuitBreaker\";", "modifier": "private static final", "type": "String", "declarator": "TEST_CIRCUIT_BREAKER = \"TestCircuitBreaker\"", "var_name": "TEST_CIRCUIT_BREAKER"}], "file": "jrugged-aspects/src/test/java/org/fishwife/jrugged/aspects/TestCircuitBreakerAspect.java"}, "test_case": {"identifier": "testGetCircuitBreakerFactory", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetCircuitBreakerFactory() throws Throwable {\n\n        ProceedingJoinPoint mockPjp = createPjpMock(mockSignature, 1);\n        expect(mockPjp.proceed()).andReturn(null);\n        replay(mockPjp);\n\n        aspect.monitor(mockPjp, mockAnnotation);\n        CircuitBreakerFactory circuitBreakerFactory =\n                aspect.getCircuitBreakerFactory();\n\n        assertNotNull(circuitBreakerFactory);\n        verifyBreakerExists(TEST_CIRCUIT_BREAKER);\n\n        verify(mockPjp);\n        verify(mockAnnotation);\n        verify(mockSignature);\n    }", "signature": "void testGetCircuitBreakerFactory()", "full_signature": "@Test public void testGetCircuitBreakerFactory()", "class_method_signature": "TestCircuitBreakerAspect.testGetCircuitBreakerFactory()", "testcase": true, "constructor": false, "invocations": ["createPjpMock", "andReturn", "expect", "proceed", "replay", "monitor", "getCircuitBreakerFactory", "assertNotNull", "verifyBreakerExists", "verify", "verify", "verify"]}, "focal_class": {"identifier": "CircuitBreakerAspect", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger =\n            LoggerFactory.getLogger(CircuitBreakerAspect.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger =\n            LoggerFactory.getLogger(CircuitBreakerAspect.class)", "var_name": "logger"}, {"original_string": "private CircuitBreakerFactory circuitBreakerFactory;", "modifier": "private", "type": "CircuitBreakerFactory", "declarator": "circuitBreakerFactory", "var_name": "circuitBreakerFactory"}], "methods": [{"identifier": "CircuitBreakerAspect", "parameters": "()", "modifiers": "public", "return": "", "signature": " CircuitBreakerAspect()", "full_signature": "public  CircuitBreakerAspect()", "class_method_signature": "CircuitBreakerAspect.CircuitBreakerAspect()", "testcase": false, "constructor": true}, {"identifier": "setCircuitBreakerFactory", "parameters": "(\n            CircuitBreakerFactory circuitBreakerFactory)", "modifiers": "public", "return": "void", "signature": "void setCircuitBreakerFactory(\n            CircuitBreakerFactory circuitBreakerFactory)", "full_signature": "public void setCircuitBreakerFactory(\n            CircuitBreakerFactory circuitBreakerFactory)", "class_method_signature": "CircuitBreakerAspect.setCircuitBreakerFactory(\n            CircuitBreakerFactory circuitBreakerFactory)", "testcase": false, "constructor": false}, {"identifier": "getCircuitBreakerFactory", "parameters": "()", "modifiers": "public", "return": "CircuitBreakerFactory", "signature": "CircuitBreakerFactory getCircuitBreakerFactory()", "full_signature": "public CircuitBreakerFactory getCircuitBreakerFactory()", "class_method_signature": "CircuitBreakerAspect.getCircuitBreakerFactory()", "testcase": false, "constructor": false}, {"identifier": "monitor", "parameters": "(final ProceedingJoinPoint pjp,\n              CircuitBreaker circuitBreakerAnnotation)", "modifiers": "@Around(\"@annotation(circuitBreakerAnnotation)\") public", "return": "Object", "signature": "Object monitor(final ProceedingJoinPoint pjp,\n              CircuitBreaker circuitBreakerAnnotation)", "full_signature": "@Around(\"@annotation(circuitBreakerAnnotation)\") public Object monitor(final ProceedingJoinPoint pjp,\n              CircuitBreaker circuitBreakerAnnotation)", "class_method_signature": "CircuitBreakerAspect.monitor(final ProceedingJoinPoint pjp,\n              CircuitBreaker circuitBreakerAnnotation)", "testcase": false, "constructor": false}], "file": "jrugged-aspects/src/main/java/org/fishwife/jrugged/aspects/CircuitBreakerAspect.java"}, "focal_method": {"identifier": "getCircuitBreakerFactory", "parameters": "()", "modifiers": "public", "return": "CircuitBreakerFactory", "body": "public CircuitBreakerFactory getCircuitBreakerFactory() {\n        return circuitBreakerFactory;\n    }", "signature": "CircuitBreakerFactory getCircuitBreakerFactory()", "full_signature": "public CircuitBreakerFactory getCircuitBreakerFactory()", "class_method_signature": "CircuitBreakerAspect.getCircuitBreakerFactory()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 6602723, "url": "https://github.com/Comcast/jrugged", "language": "Java", "is_fork": false, "fork_count": 90, "stargazer_count": 236, "size": 1302, "license": "licensed"}}