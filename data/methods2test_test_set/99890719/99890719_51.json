{"test_class": {"identifier": "MissingAssignmentNoViolationPredicateTest", "superclass": "", "interfaces": "", "fields": [], "file": "mubench/src/test/java/de/tu_darmstadt/stg/mudetect/MissingAssignmentNoViolationPredicateTest.java"}, "test_case": {"identifier": "doesNotDecideAboutMissingAssignmentAndMissingEdge", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void doesNotDecideAboutMissingAssignmentAndMissingEdge() {\n        TestAUGBuilder pattern = buildAUG().withActionNodes(\"A.b()\", \"C.m()\", \"=\")\n                .withEdge(\"A.b()\", ORDER, \"C.m()\").withEdge(\"C.m()\", SELECTION, \"=\");\n        TestAUGBuilder target = buildAUG().withActionNodes(\"A.b()\", \"C.m()\");\n        TestOverlapBuilder violation = buildOverlap(pattern, target).withNodes(\"A.b()\", \"C.m()\");\n\n        Optional<Boolean> decision = new MissingAssignmentNoViolationPredicate().apply(violation.build());\n\n        assertThat(decision, is(Optional.empty()));\n    }", "signature": "void doesNotDecideAboutMissingAssignmentAndMissingEdge()", "full_signature": "@Test public void doesNotDecideAboutMissingAssignmentAndMissingEdge()", "class_method_signature": "MissingAssignmentNoViolationPredicateTest.doesNotDecideAboutMissingAssignmentAndMissingEdge()", "testcase": true, "constructor": false, "invocations": ["withEdge", "withEdge", "withActionNodes", "buildAUG", "withActionNodes", "buildAUG", "withNodes", "buildOverlap", "apply", "build", "assertThat", "is", "empty"]}, "focal_class": {"identifier": "MissingAssignmentNoViolationPredicate", "superclass": "", "interfaces": "implements ViolationPredicate", "fields": [], "methods": [{"identifier": "apply", "parameters": "(Overlap overlap)", "modifiers": "@Override public", "return": "Optional<Boolean>", "signature": "Optional<Boolean> apply(Overlap overlap)", "full_signature": "@Override public Optional<Boolean> apply(Overlap overlap)", "class_method_signature": "MissingAssignmentNoViolationPredicate.apply(Overlap overlap)", "testcase": false, "constructor": false}, {"identifier": "missesOnlyAssignmentsAndExclusiveAssignmentParameters", "parameters": "(Overlap overlap)", "modifiers": "private", "return": "boolean", "signature": "boolean missesOnlyAssignmentsAndExclusiveAssignmentParameters(Overlap overlap)", "full_signature": "private boolean missesOnlyAssignmentsAndExclusiveAssignmentParameters(Overlap overlap)", "class_method_signature": "MissingAssignmentNoViolationPredicate.missesOnlyAssignmentsAndExclusiveAssignmentParameters(Overlap overlap)", "testcase": false, "constructor": false}, {"identifier": "isExclusiveParameterOf", "parameters": "(Node node, Set<Node> missingNodes, APIUsageGraph graph)", "modifiers": "private", "return": "boolean", "signature": "boolean isExclusiveParameterOf(Node node, Set<Node> missingNodes, APIUsageGraph graph)", "full_signature": "private boolean isExclusiveParameterOf(Node node, Set<Node> missingNodes, APIUsageGraph graph)", "class_method_signature": "MissingAssignmentNoViolationPredicate.isExclusiveParameterOf(Node node, Set<Node> missingNodes, APIUsageGraph graph)", "testcase": false, "constructor": false}, {"identifier": "isParameterEdgeToOneOf", "parameters": "(Edge edge, Node node, Set<Node> missingNodes, APIUsageGraph graph)", "modifiers": "private", "return": "boolean", "signature": "boolean isParameterEdgeToOneOf(Edge edge, Node node, Set<Node> missingNodes, APIUsageGraph graph)", "full_signature": "private boolean isParameterEdgeToOneOf(Edge edge, Node node, Set<Node> missingNodes, APIUsageGraph graph)", "class_method_signature": "MissingAssignmentNoViolationPredicate.isParameterEdgeToOneOf(Edge edge, Node node, Set<Node> missingNodes, APIUsageGraph graph)", "testcase": false, "constructor": false}, {"identifier": "allConnectToOneOf", "parameters": "(Set<Edge> missingEdges, Set<Node> missingNodes)", "modifiers": "private", "return": "boolean", "signature": "boolean allConnectToOneOf(Set<Edge> missingEdges, Set<Node> missingNodes)", "full_signature": "private boolean allConnectToOneOf(Set<Edge> missingEdges, Set<Node> missingNodes)", "class_method_signature": "MissingAssignmentNoViolationPredicate.allConnectToOneOf(Set<Edge> missingEdges, Set<Node> missingNodes)", "testcase": false, "constructor": false}], "file": "mubench/src/main/java/de/tu_darmstadt/stg/mudetect/MissingAssignmentNoViolationPredicate.java"}, "focal_method": {"identifier": "apply", "parameters": "(Overlap overlap)", "modifiers": "@Override public", "return": "Optional<Boolean>", "body": "@Override\n    public Optional<Boolean> apply(Overlap overlap) {\n        if (missesOnlyAssignmentsAndExclusiveAssignmentParameters(overlap))\n            return Optional.of(false);\n        else\n            return Optional.empty();\n    }", "signature": "Optional<Boolean> apply(Overlap overlap)", "full_signature": "@Override public Optional<Boolean> apply(Overlap overlap)", "class_method_signature": "MissingAssignmentNoViolationPredicate.apply(Overlap overlap)", "testcase": false, "constructor": false, "invocations": ["missesOnlyAssignmentsAndExclusiveAssignmentParameters", "of", "empty"]}, "repository": {"repo_id": 99890719, "url": "https://github.com/stg-tud/MUDetect", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 5, "size": 11835, "license": "licensed"}}