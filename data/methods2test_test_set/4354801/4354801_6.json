{"test_class": {"identifier": "ByteCodeTest", "superclass": "", "interfaces": "", "fields": [], "file": "findsecbugs-plugin/src/test/java/com/h3xstream/findsecbugs/common/ByteCodeTest.java"}, "test_case": {"identifier": "probeByteCodeDebug", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void probeByteCodeDebug() {\n        PrintStream sysOut = mock(PrintStream.class);\n\n        System.out.println(\"Sysout hijack!\");\n        PrintStream oldPrintStream = System.out;\n\n        try {\n            System.setOut(sysOut);\n\n            InvokeInstruction ins = mock(InvokeInstruction.class);\n            ConstantPoolGen cpg = mock(ConstantPoolGen.class);\n\n            when(ins.getClassName(Matchers.<ConstantPoolGen>any())).thenReturn(\"ClassTest\");\n            when(ins.getMethodName(Matchers.<ConstantPoolGen>any())).thenReturn(\"method\");\n            when(ins.getSignature(Matchers.<ConstantPoolGen>any())).thenReturn(\"(Lsignature)Lblah\");\n\n            //Print invocation\n            ByteCode.printOpCode(ins, cpg);\n\n            verify(sysOut, atLeastOnce()).println(contains(\"ClassTest.method\"));\n        } finally {\n            System.setOut(oldPrintStream);\n            System.out.println(\"Sysout is back!\");\n        }\n\n    }", "signature": "void probeByteCodeDebug()", "full_signature": "@Test public void probeByteCodeDebug()", "class_method_signature": "ByteCodeTest.probeByteCodeDebug()", "testcase": true, "constructor": false, "invocations": ["mock", "println", "setOut", "mock", "mock", "thenReturn", "when", "getClassName", "any", "thenReturn", "when", "getMethodName", "any", "thenReturn", "when", "getSignature", "any", "printOpCode", "println", "verify", "atLeastOnce", "contains", "setOut", "println"]}, "focal_class": {"identifier": "ByteCode", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "printOpCode", "parameters": "(Instruction ins, ConstantPoolGen cpg)", "modifiers": "public static", "return": "void", "signature": "void printOpCode(Instruction ins, ConstantPoolGen cpg)", "full_signature": "public static void printOpCode(Instruction ins, ConstantPoolGen cpg)", "class_method_signature": "ByteCode.printOpCode(Instruction ins, ConstantPoolGen cpg)", "testcase": false, "constructor": false}, {"identifier": "formatName", "parameters": "(Instruction ins)", "modifiers": "private static", "return": "String", "signature": "String formatName(Instruction ins)", "full_signature": "private static String formatName(Instruction ins)", "class_method_signature": "ByteCode.formatName(Instruction ins)", "testcase": false, "constructor": false}, {"identifier": "getConstantLDC", "parameters": "(InstructionHandle h, ConstantPoolGen cpg, Class<T> clazz)", "modifiers": "public static", "return": "T", "signature": "T getConstantLDC(InstructionHandle h, ConstantPoolGen cpg, Class<T> clazz)", "full_signature": "public static T getConstantLDC(InstructionHandle h, ConstantPoolGen cpg, Class<T> clazz)", "class_method_signature": "ByteCode.getConstantLDC(InstructionHandle h, ConstantPoolGen cpg, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "getConstantInt", "parameters": "(InstructionHandle h)", "modifiers": "public static", "return": "Integer", "signature": "Integer getConstantInt(InstructionHandle h)", "full_signature": "public static Integer getConstantInt(InstructionHandle h)", "class_method_signature": "ByteCode.getConstantInt(InstructionHandle h)", "testcase": false, "constructor": false}, {"identifier": "getPushNumber", "parameters": "(InstructionHandle h)", "modifiers": "public static", "return": "Number", "signature": "Number getPushNumber(InstructionHandle h)", "full_signature": "public static Number getPushNumber(InstructionHandle h)", "class_method_signature": "ByteCode.getPushNumber(InstructionHandle h)", "testcase": false, "constructor": false}, {"identifier": "getPrevInstruction", "parameters": "(InstructionHandle startHandle, Class<T> clazz)", "modifiers": "public static", "return": "T", "signature": "T getPrevInstruction(InstructionHandle startHandle, Class<T> clazz)", "full_signature": "public static T getPrevInstruction(InstructionHandle startHandle, Class<T> clazz)", "class_method_signature": "ByteCode.getPrevInstruction(InstructionHandle startHandle, Class<T> clazz)", "testcase": false, "constructor": false}], "file": "findsecbugs-plugin/src/main/java/com/h3xstream/findsecbugs/common/ByteCode.java"}, "focal_method": {"identifier": "printOpCode", "parameters": "(Instruction ins, ConstantPoolGen cpg)", "modifiers": "public static", "return": "void", "body": "public static void printOpCode(Instruction ins, ConstantPoolGen cpg) {\n\n        if (ins instanceof InvokeInstruction) {\n            InvokeInstruction invokeIns = (InvokeInstruction) ins;\n            System.out.println(formatName(ins) + \" \" + invokeIns.getClassName(cpg).replaceAll(\"\\\\.\", \"/\") + \".\" + invokeIns.getMethodName(cpg) + invokeIns.getSignature(cpg));\n        } else if (ins instanceof LDC) {\n            LDC i = (LDC) ins;\n            System.out.println(formatName(ins) + \" \\\"\"+i.getValue(cpg).toString()+\"\\\"\");\n        } else if (ins instanceof NEW) {\n            NEW i = (NEW) ins;\n            ObjectType type = i.getLoadClassType(cpg);\n            System.out.println(formatName(ins) + \" \" + type.toString());\n        } else if (ins instanceof LoadInstruction) {\n            LoadInstruction i = (LoadInstruction) ins;\n            System.out.println(formatName(ins) +\" \"+i.getIndex() + \" => [stack]\");\n        } else if (ins instanceof StoreInstruction) {\n            StoreInstruction i = (StoreInstruction) ins;\n            System.out.println(formatName(ins) +\" (objectref) => \"+i.getIndex() + \"\");\n        } else if (ins instanceof FieldInstruction) {\n            FieldInstruction i = (FieldInstruction) ins;\n            System.out.println(formatName(ins) +\" \"+i.getFieldName(cpg) + \"\");\n        }  else if (ins instanceof IfInstruction) {\n            IfInstruction i = (IfInstruction) ins;\n            System.out.println(formatName(ins) +\" target => \"+i.getTarget().toString()+ \"\");\n        } else if (ins instanceof ICONST) {\n            ICONST i = (ICONST) ins;\n            System.out.println(formatName(ins) +\" \"+i.getValue()+\" (\"+i.getType(cpg)+\")\");\n        } else if (ins instanceof GOTO) {\n            GOTO i = (GOTO) ins;\n            System.out.println(formatName(ins) +\" target => \"+i.getTarget().toString());\n        } else {\n            System.out.println(formatName(ins));\n        }\n    }", "signature": "void printOpCode(Instruction ins, ConstantPoolGen cpg)", "full_signature": "public static void printOpCode(Instruction ins, ConstantPoolGen cpg)", "class_method_signature": "ByteCode.printOpCode(Instruction ins, ConstantPoolGen cpg)", "testcase": false, "constructor": false, "invocations": ["println", "formatName", "replaceAll", "getClassName", "getMethodName", "getSignature", "println", "formatName", "toString", "getValue", "getLoadClassType", "println", "formatName", "toString", "println", "formatName", "getIndex", "println", "formatName", "getIndex", "println", "formatName", "getFieldName", "println", "formatName", "toString", "getTarget", "println", "formatName", "getValue", "getType", "println", "formatName", "toString", "getTarget", "println", "formatName"]}, "repository": {"repo_id": 4354801, "url": "https://github.com/find-sec-bugs/find-sec-bugs", "stars": 1292, "created": "5/17/2012 4:07:57 AM +00:00", "updates": "2020-01-27T13:17:10+00:00", "fork": "False", "license": "licensed"}}