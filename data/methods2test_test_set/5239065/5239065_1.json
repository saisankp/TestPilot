{"test_class": {"identifier": "LocalCommandTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "LocalCommand cmd = null;", "modifier": "", "type": "LocalCommand", "declarator": "cmd = null", "var_name": "cmd"}], "file": "exposure-engine/system-manager/src/test/java/com/alu/e3/installer/command/LocalCommandTest.java"}, "test_case": {"identifier": "testCopy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCopy() throws Exception {\n\t\tassertNotNull(cmd);\n\t\t\n\t\tFile fTemp = File.createTempFile(\"test\", \".tmp\");\n\t\tFile fTempDest = new File(fTemp.getAbsolutePath()+\".bak\");\n\t\tcmd.copy(fTemp.getAbsolutePath(), fTempDest.getAbsolutePath());\n\t\t\n\t\tassertTrue(fTempDest.exists());\n\t\tfTempDest.delete();\n\t}", "signature": "void testCopy()", "full_signature": "@Test public void testCopy()", "class_method_signature": "LocalCommandTest.testCopy()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "createTempFile", "getAbsolutePath", "copy", "getAbsolutePath", "getAbsolutePath", "assertTrue", "exists", "delete"]}, "focal_class": {"identifier": "LocalCommand", "superclass": "", "interfaces": "implements ICommand", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(LocalCommand.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(LocalCommand.class)", "var_name": "logger"}], "methods": [{"identifier": "LocalCommand", "parameters": "()", "modifiers": "public", "return": "", "signature": " LocalCommand()", "full_signature": "public  LocalCommand()", "class_method_signature": "LocalCommand.LocalCommand()", "testcase": false, "constructor": true}, {"identifier": "execShellCommand", "parameters": "(String strCommand)", "modifiers": "@Override public", "return": "ShellCommandResult", "signature": "ShellCommandResult execShellCommand(String strCommand)", "full_signature": "@Override public ShellCommandResult execShellCommand(String strCommand)", "class_method_signature": "LocalCommand.execShellCommand(String strCommand)", "testcase": false, "constructor": false}, {"identifier": "execShellCommand", "parameters": "(String strCommand, String workingDir)", "modifiers": "@Override public", "return": "ShellCommandResult", "signature": "ShellCommandResult execShellCommand(String strCommand, String workingDir)", "full_signature": "@Override public ShellCommandResult execShellCommand(String strCommand, String workingDir)", "class_method_signature": "LocalCommand.execShellCommand(String strCommand, String workingDir)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(String sourcePath, String targetPath)", "modifiers": "@Override public", "return": "void", "signature": "void copy(String sourcePath, String targetPath)", "full_signature": "@Override public void copy(String sourcePath, String targetPath)", "class_method_signature": "LocalCommand.copy(String sourcePath, String targetPath)", "testcase": false, "constructor": false}, {"identifier": "getImplementationType", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getImplementationType()", "full_signature": "@Override public String getImplementationType()", "class_method_signature": "LocalCommand.getImplementationType()", "testcase": false, "constructor": false}, {"identifier": "disconnect", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void disconnect()", "full_signature": "@Override public void disconnect()", "class_method_signature": "LocalCommand.disconnect()", "testcase": false, "constructor": false}], "file": "exposure-engine/system-manager/src/main/java/com/alu/e3/installer/command/LocalCommand.java"}, "focal_method": {"identifier": "copy", "parameters": "(String sourcePath, String targetPath)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void copy(String sourcePath, String targetPath) throws IOException  {\n\n\t\t/* Fast java copy file */\n\t\tif(logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"local copy from \" + sourcePath + \" to \" + targetPath);\n\t\t}\n\t\tFile tDestFile = new File(targetPath);\n\t\tFile tSourceFile = new File(sourcePath);\n\n\t\tif (!tDestFile.exists()) {\n\t\t\ttDestFile.createNewFile();\n\t\t}\n\n\t\tFileChannel source = null;\n\t\tFileChannel destination = null;\n\n\t\ttry {\n\t\t\tsource = new FileInputStream(tSourceFile).getChannel();\n\t\t\tdestination = new FileOutputStream(tDestFile).getChannel();\n\t\t\tdestination.transferFrom(source, 0, source.size());\n\t\t} finally {\n\t\t\tif (source != null) {\n\t\t\t\tsource.close();\n\t\t\t}\n\t\t\tif (destination != null) {\n\t\t\t\tdestination.close();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"local copy done \");\n\t\t}\n\t}", "signature": "void copy(String sourcePath, String targetPath)", "full_signature": "@Override public void copy(String sourcePath, String targetPath)", "class_method_signature": "LocalCommand.copy(String sourcePath, String targetPath)", "testcase": false, "constructor": false, "invocations": ["isDebugEnabled", "debug", "exists", "createNewFile", "getChannel", "getChannel", "transferFrom", "size", "close", "close", "isDebugEnabled", "debug"]}, "repository": {"repo_id": 5239065, "url": "https://github.com/apigrove/apigrove", "language": "Java", "is_fork": false, "fork_count": 33, "stargazer_count": 118, "size": 215144, "license": "licensed"}}