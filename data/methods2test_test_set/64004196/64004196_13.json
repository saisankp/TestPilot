{"test_class": {"identifier": "SVGParserTest", "superclass": "extends SVGTestSupport", "interfaces": "", "fields": [], "file": "CustomShapeImageViewlibrary/src/test/java/com/svgandroid/SVGParserTest.java"}, "test_case": {"identifier": "parseNumbers", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parseNumbers() {\n        String numbers = \"10.0  -10.0-1f\";\n        SVGParser.NumberParse numberParse = SVGParser.parseNumbers(numbers);\n        assertThat(numberParse.getNumber(0), is(10.0f));\n        assertThat(numberParse.getNumber(1), is(-10.0f));\n        assertThat(numberParse.getNumber(2), is(-1.0f));\n        assertThat(numberParse.getNextCmd(), is(numbers.length()));\n    }", "signature": "void parseNumbers()", "full_signature": "@Test public void parseNumbers()", "class_method_signature": "SVGParserTest.parseNumbers()", "testcase": true, "constructor": false, "invocations": ["parseNumbers", "assertThat", "getNumber", "is", "assertThat", "getNumber", "is", "assertThat", "getNumber", "is", "assertThat", "getNextCmd", "is", "length"]}, "focal_class": {"identifier": "SVGParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String TAG = \"SVGAndroid\";", "modifier": "static final", "type": "String", "declarator": "TAG = \"SVGAndroid\"", "var_name": "TAG"}], "methods": [{"identifier": "getSVGFromInputStream", "parameters": "(InputStream svgData)", "modifiers": "public static", "return": "SVG", "signature": "SVG getSVGFromInputStream(InputStream svgData)", "full_signature": "public static SVG getSVGFromInputStream(InputStream svgData)", "class_method_signature": "SVGParser.getSVGFromInputStream(InputStream svgData)", "testcase": false, "constructor": false}, {"identifier": "getSVGFromInputStream", "parameters": "(InputStream svgData, int targetWidth, int targetHeight)", "modifiers": "public static", "return": "SVG", "signature": "SVG getSVGFromInputStream(InputStream svgData, int targetWidth, int targetHeight)", "full_signature": "public static SVG getSVGFromInputStream(InputStream svgData, int targetWidth, int targetHeight)", "class_method_signature": "SVGParser.getSVGFromInputStream(InputStream svgData, int targetWidth, int targetHeight)", "testcase": false, "constructor": false}, {"identifier": "getSVGFromResource", "parameters": "(Resources resources, int resId)", "modifiers": "public static", "return": "SVG", "signature": "SVG getSVGFromResource(Resources resources, int resId)", "full_signature": "public static SVG getSVGFromResource(Resources resources, int resId)", "class_method_signature": "SVGParser.getSVGFromResource(Resources resources, int resId)", "testcase": false, "constructor": false}, {"identifier": "getSVGFromAsset", "parameters": "(AssetManager assetMngr, String svgPath)", "modifiers": "public static", "return": "SVG", "signature": "SVG getSVGFromAsset(AssetManager assetMngr, String svgPath)", "full_signature": "public static SVG getSVGFromAsset(AssetManager assetMngr, String svgPath)", "class_method_signature": "SVGParser.getSVGFromAsset(AssetManager assetMngr, String svgPath)", "testcase": false, "constructor": false}, {"identifier": "getSVGFromInputStream", "parameters": "(InputStream svgData, int searchColor, int replaceColor,\n                                            int targetWidth, int targetHeight)", "modifiers": "public static", "return": "SVG", "signature": "SVG getSVGFromInputStream(InputStream svgData, int searchColor, int replaceColor,\n                                            int targetWidth, int targetHeight)", "full_signature": "public static SVG getSVGFromInputStream(InputStream svgData, int searchColor, int replaceColor,\n                                            int targetWidth, int targetHeight)", "class_method_signature": "SVGParser.getSVGFromInputStream(InputStream svgData, int searchColor, int replaceColor,\n                                            int targetWidth, int targetHeight)", "testcase": false, "constructor": false}, {"identifier": "getSVGFromString", "parameters": "(String svgData, int searchColor, int replaceColor)", "modifiers": "public static", "return": "SVG", "signature": "SVG getSVGFromString(String svgData, int searchColor, int replaceColor)", "full_signature": "public static SVG getSVGFromString(String svgData, int searchColor, int replaceColor)", "class_method_signature": "SVGParser.getSVGFromString(String svgData, int searchColor, int replaceColor)", "testcase": false, "constructor": false}, {"identifier": "getSVGFromResource", "parameters": "(Resources resources, int resId, int searchColor, int replaceColor)", "modifiers": "public static", "return": "SVG", "signature": "SVG getSVGFromResource(Resources resources, int resId, int searchColor, int replaceColor)", "full_signature": "public static SVG getSVGFromResource(Resources resources, int resId, int searchColor, int replaceColor)", "class_method_signature": "SVGParser.getSVGFromResource(Resources resources, int resId, int searchColor, int replaceColor)", "testcase": false, "constructor": false}, {"identifier": "getSVGFromAsset", "parameters": "(AssetManager assetMngr, String svgPath, int searchColor, int replaceColor)", "modifiers": "public static", "return": "SVG", "signature": "SVG getSVGFromAsset(AssetManager assetMngr, String svgPath, int searchColor, int replaceColor)", "full_signature": "public static SVG getSVGFromAsset(AssetManager assetMngr, String svgPath, int searchColor, int replaceColor)", "class_method_signature": "SVGParser.getSVGFromAsset(AssetManager assetMngr, String svgPath, int searchColor, int replaceColor)", "testcase": false, "constructor": false}, {"identifier": "parsePath", "parameters": "(String pathString)", "modifiers": "public static", "return": "Path", "signature": "Path parsePath(String pathString)", "full_signature": "public static Path parsePath(String pathString)", "class_method_signature": "SVGParser.parsePath(String pathString)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(InputStream in, Integer searchColor, Integer replaceColor, boolean whiteMode,\n                             int targetWidth, int targetHeight)", "modifiers": "private static", "return": "SVG", "signature": "SVG parse(InputStream in, Integer searchColor, Integer replaceColor, boolean whiteMode,\n                             int targetWidth, int targetHeight)", "full_signature": "private static SVG parse(InputStream in, Integer searchColor, Integer replaceColor, boolean whiteMode,\n                             int targetWidth, int targetHeight)", "class_method_signature": "SVGParser.parse(InputStream in, Integer searchColor, Integer replaceColor, boolean whiteMode,\n                             int targetWidth, int targetHeight)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(InputStream in, Integer searchColor, Integer replaceColor, boolean whiteMode)", "modifiers": "private static", "return": "SVG", "signature": "SVG parse(InputStream in, Integer searchColor, Integer replaceColor, boolean whiteMode)", "full_signature": "private static SVG parse(InputStream in, Integer searchColor, Integer replaceColor, boolean whiteMode)", "class_method_signature": "SVGParser.parse(InputStream in, Integer searchColor, Integer replaceColor, boolean whiteMode)", "testcase": false, "constructor": false}, {"identifier": "parseNumbers", "parameters": "(String s)", "modifiers": "protected static", "return": "NumberParse", "signature": "NumberParse parseNumbers(String s)", "full_signature": "protected static NumberParse parseNumbers(String s)", "class_method_signature": "SVGParser.parseNumbers(String s)", "testcase": false, "constructor": false}, {"identifier": "parseTransform", "parameters": "(String s)", "modifiers": "private static", "return": "Matrix", "signature": "Matrix parseTransform(String s)", "full_signature": "private static Matrix parseTransform(String s)", "class_method_signature": "SVGParser.parseTransform(String s)", "testcase": false, "constructor": false}, {"identifier": "doPath", "parameters": "(String s)", "modifiers": "private static", "return": "Path", "signature": "Path doPath(String s)", "full_signature": "private static Path doPath(String s)", "class_method_signature": "SVGParser.doPath(String s)", "testcase": false, "constructor": false}, {"identifier": "getNumberParseAttr", "parameters": "(String name, Attributes attributes)", "modifiers": "private static", "return": "NumberParse", "signature": "NumberParse getNumberParseAttr(String name, Attributes attributes)", "full_signature": "private static NumberParse getNumberParseAttr(String name, Attributes attributes)", "class_method_signature": "SVGParser.getNumberParseAttr(String name, Attributes attributes)", "testcase": false, "constructor": false}, {"identifier": "getStringAttr", "parameters": "(String name, Attributes attributes)", "modifiers": "private static", "return": "String", "signature": "String getStringAttr(String name, Attributes attributes)", "full_signature": "private static String getStringAttr(String name, Attributes attributes)", "class_method_signature": "SVGParser.getStringAttr(String name, Attributes attributes)", "testcase": false, "constructor": false}, {"identifier": "getFloatAttr", "parameters": "(String name, Attributes attributes)", "modifiers": "private static", "return": "Float", "signature": "Float getFloatAttr(String name, Attributes attributes)", "full_signature": "private static Float getFloatAttr(String name, Attributes attributes)", "class_method_signature": "SVGParser.getFloatAttr(String name, Attributes attributes)", "testcase": false, "constructor": false}, {"identifier": "getFloatAttr", "parameters": "(String name, Attributes attributes, Float defaultValue)", "modifiers": "private static", "return": "Float", "signature": "Float getFloatAttr(String name, Attributes attributes, Float defaultValue)", "full_signature": "private static Float getFloatAttr(String name, Attributes attributes, Float defaultValue)", "class_method_signature": "SVGParser.getFloatAttr(String name, Attributes attributes, Float defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getHexAttr", "parameters": "(String name, Attributes attributes)", "modifiers": "protected static", "return": "Integer", "signature": "Integer getHexAttr(String name, Attributes attributes)", "full_signature": "protected static Integer getHexAttr(String name, Attributes attributes)", "class_method_signature": "SVGParser.getHexAttr(String name, Attributes attributes)", "testcase": false, "constructor": false}], "file": "CustomShapeImageViewlibrary/src/main/java/com/svgandroid/SVGParser.java"}, "focal_method": {"identifier": "parseNumbers", "parameters": "(String s)", "modifiers": "protected static", "return": "NumberParse", "body": "protected static NumberParse parseNumbers(String s) {\n        //Util.debug(\"Parsing numbers from: '\" + s + \"'\");\n        int n = s.length();\n        int p = 0;\n        ArrayList<Float> numbers = new ArrayList<Float>();\n        boolean skipChar = false;\n        for (int i = 1; i < n; i++) {\n            if (skipChar) {\n                skipChar = false;\n                continue;\n            }\n            char c = s.charAt(i);\n            switch (c) {\n                // This ends the parsing, as we are on the next element\n                case 'M':\n                case 'm':\n                case 'Z':\n                case 'z':\n                case 'L':\n                case 'l':\n                case 'H':\n                case 'h':\n                case 'V':\n                case 'v':\n                case 'C':\n                case 'c':\n                case 'S':\n                case 's':\n                case 'Q':\n                case 'q':\n                case 'T':\n                case 't':\n                case 'a':\n                case 'A':\n                case ')': {\n                    String str = s.substring(p, i);\n                    if (str.trim().length() > 0) {\n                        //Util.debug(\"  Last: \" + str);\n                        Float f = Float.parseFloat(str);\n                        numbers.add(f);\n                    }\n                    p = i;\n                    return new NumberParse(numbers, p);\n                }\n                case '\\n':\n                case '\\t':\n                case ' ':\n                case ',':\n                case '-': {\n                    String str = s.substring(p, i);\n                    // Just keep moving if multiple whitespace\n                    if (str.trim().length() > 0) {\n                        //Util.debug(\"  Next: \" + str);\n                        Float f = Float.parseFloat(str);\n                        numbers.add(f);\n                        if (c == '-') {\n                            p = i;\n                        } else {\n                            p = i + 1;\n                            skipChar = true;\n                        }\n                    } else {\n                        p++;\n                    }\n                    break;\n                }\n            }\n        }\n        String last = s.substring(p);\n        if (last.length() > 0) {\n            //Util.debug(\"  Last: \" + last);\n            try {\n                numbers.add(Float.parseFloat(last));\n            } catch (NumberFormatException nfe) {\n                // Just white-space, forget it\n            }\n            p = s.length();\n        }\n        return new NumberParse(numbers, p);\n    }", "signature": "NumberParse parseNumbers(String s)", "full_signature": "protected static NumberParse parseNumbers(String s)", "class_method_signature": "SVGParser.parseNumbers(String s)", "testcase": false, "constructor": false, "invocations": ["length", "charAt", "substring", "length", "trim", "parseFloat", "add", "substring", "length", "trim", "parseFloat", "add", "substring", "length", "add", "parseFloat", "length"]}, "repository": {"repo_id": 64004196, "url": "https://github.com/gxl1240779189/PhotoFinishing", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 12, "size": 34089, "license": "licensed"}}