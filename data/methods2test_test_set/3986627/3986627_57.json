{"test_class": {"identifier": "TMXConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TMXConverter fixture;", "modifier": "private", "type": "TMXConverter", "declarator": "fixture", "var_name": "fixture"}], "file": "org.jabylon.properties/src/test/java/org/jabylon/properties/types/impl/TMXConverterTest.java"}, "test_case": {"identifier": "testLoad", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testLoad() throws FileNotFoundException, IOException {\n\t\tPropertyFile file = fixture.load(new FileInputStream(\"src/test/resources/tmx/sample.tmx\"), \"UTF-8\");\n\t\tassertEquals(5,file.getProperties().size());\n\t\tint i = 0;\n\t\tassertEquals(\"Start Game\", file.getProperties().get(i).getKey());\n\t\tassertEquals(\"Iniciar el juego\", file.getProperties().get(i++).getValue());\n\t\t\n\t\tassertEquals(\"Options\", file.getProperties().get(i).getKey());\n\t\tassertEquals(\"Opciones\", file.getProperties().get(i++).getValue());\n\t\t\n\t\tassertEquals(\"Credits\", file.getProperties().get(i).getKey());\n\t\tassertEquals(\"Creditos\", file.getProperties().get(i++).getValue());\n\t\t\n\t\tassertEquals(\"Exit\", file.getProperties().get(i).getKey());\n\t\tassertEquals(\"Salir\", file.getProperties().get(i++).getValue());\n\t\t\n\t\tassertEquals(\"Resume\", file.getProperties().get(i).getKey());\n\t\tassertEquals(\"Reanudar\", file.getProperties().get(i++).getValue());\n\t\t\n\t\tProperty property = file.getProperties().get(0);\n\t\tPropertyAnnotation annotation = property.findAnnotation(PropertyAnnotations.ANNOTATION_LANGUAGE);\n\t\tassertEquals(\"en_US\", annotation.getValues().get(PropertyAnnotations.SOURCE_LANGUAGE));\n\t\tassertEquals(\"es_MX\", annotation.getValues().get(PropertyAnnotations.TARGET_LANGUAGE));\n\t}", "signature": "void testLoad()", "full_signature": "@Test public void testLoad()", "class_method_signature": "TMXConverterTest.testLoad()", "testcase": true, "constructor": false, "invocations": ["load", "assertEquals", "size", "getProperties", "assertEquals", "getKey", "get", "getProperties", "assertEquals", "getValue", "get", "getProperties", "assertEquals", "getKey", "get", "getProperties", "assertEquals", "getValue", "get", "getProperties", "assertEquals", "getKey", "get", "getProperties", "assertEquals", "getValue", "get", "getProperties", "assertEquals", "getKey", "get", "getProperties", "assertEquals", "getValue", "get", "getProperties", "assertEquals", "getKey", "get", "getProperties", "assertEquals", "getValue", "get", "getProperties", "get", "getProperties", "findAnnotation", "assertEquals", "get", "getValues", "assertEquals", "get", "getValues"]}, "focal_class": {"identifier": "TMXConverter", "superclass": "", "interfaces": "implements PropertyConverter", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(TMXConverter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(TMXConverter.class)", "var_name": "LOG"}], "methods": [{"identifier": "load", "parameters": "(InputStream in, String encoding)", "modifiers": "@Override public", "return": "PropertyFile", "signature": "PropertyFile load(InputStream in, String encoding)", "full_signature": "@Override public PropertyFile load(InputStream in, String encoding)", "class_method_signature": "TMXConverter.load(InputStream in, String encoding)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(OutputStream out, PropertyFile file, String encoding)", "modifiers": "@Override public", "return": "int", "signature": "int write(OutputStream out, PropertyFile file, String encoding)", "full_signature": "@Override public int write(OutputStream out, PropertyFile file, String encoding)", "class_method_signature": "TMXConverter.write(OutputStream out, PropertyFile file, String encoding)", "testcase": false, "constructor": false}], "file": "org.jabylon.properties/src/main/java/org/jabylon/properties/types/impl/TMXConverter.java"}, "focal_method": {"identifier": "load", "parameters": "(InputStream in, String encoding)", "modifiers": "@Override public", "return": "PropertyFile", "body": "@Override\n\tpublic PropertyFile load(InputStream in, String encoding) throws IOException {\n\t\ttry {\n\t\t\tSAXParserFactory factory = SAXParserFactory.newInstance();\n\t\t\tSAXParser parser = factory.newSAXParser();\n\t\t\tPropertyFile file = PropertiesFactory.eINSTANCE.createPropertyFile();\n\t\t\tTMXHandler handler = new TMXHandler(file);\n\t\t\tparser.getXMLReader().setEntityResolver(handler);\n\t\t\tparser.getXMLReader().setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n\t\t\tparser.parse(in, handler);\n\t\t\treturn file;\n\t\t} catch (ParserConfigurationException e) {\n\t\t\tthrow new IOException(e);\n\t\t} catch (SAXException e) {\n\t\t\tthrow new IOException(e);\n\t\t}\n\t}", "signature": "PropertyFile load(InputStream in, String encoding)", "full_signature": "@Override public PropertyFile load(InputStream in, String encoding)", "class_method_signature": "TMXConverter.load(InputStream in, String encoding)", "testcase": false, "constructor": false, "invocations": ["newInstance", "newSAXParser", "createPropertyFile", "setEntityResolver", "getXMLReader", "setFeature", "getXMLReader", "parse"]}, "repository": {"repo_id": 3986627, "url": "https://github.com/jutzig/jabylon", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 51, "size": 13400, "license": "licensed"}}