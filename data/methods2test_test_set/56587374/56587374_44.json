{"test_class": {"identifier": "ParametersMergerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static DatatypeFactory factory;", "modifier": "private static", "type": "DatatypeFactory", "declarator": "factory", "var_name": "factory"}], "file": "gaulois-pipe/src/test/java/fr/efl/chaine/xslt/utils/ParametersMergerTest.java"}, "test_case": {"identifier": "noReplacementForXdmValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void noReplacementForXdmValue() {\n        XdmValue initial = new XdmAtomicValue(BigDecimal.ZERO);\n        HashMap<QName, ParameterValue> parameters = new HashMap<>();\n        QName qn = new QName(\"source\");\n        parameters.put(qn, new ParameterValue(qn,\"src/main/xsl\", factory.XS_STRING));\n        Object ret = ParametersMerger.processParametersReplacement(initial, parameters);\n        assertTrue(ret instanceof XdmValue);\n        assertEquals(((XdmValue)ret).toString(), \"0\");\n    }", "signature": "void noReplacementForXdmValue()", "full_signature": "@Test public void noReplacementForXdmValue()", "class_method_signature": "ParametersMergerTest.noReplacementForXdmValue()", "testcase": true, "constructor": false, "invocations": ["put", "processParametersReplacement", "assertTrue", "assertEquals", "toString"]}, "focal_class": {"identifier": "ParametersMerger", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ParametersMerger.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ParametersMerger.class)", "var_name": "LOGGER"}, {"original_string": "public static final QName INPUT_BASENAME = new QName(\"input-basename\");", "modifier": "public static final", "type": "QName", "declarator": "INPUT_BASENAME = new QName(\"input-basename\")", "var_name": "INPUT_BASENAME"}, {"original_string": "public static final QName INPUT_NAME = new QName(\"input-name\");", "modifier": "public static final", "type": "QName", "declarator": "INPUT_NAME = new QName(\"input-name\")", "var_name": "INPUT_NAME"}, {"original_string": "public static final QName INPUT_EXTENSION = new QName(\"input-extension\");", "modifier": "public static final", "type": "QName", "declarator": "INPUT_EXTENSION = new QName(\"input-extension\")", "var_name": "INPUT_EXTENSION"}, {"original_string": "public static final QName INPUT_ABSOLUTE = new QName(\"input-absolute\");", "modifier": "public static final", "type": "QName", "declarator": "INPUT_ABSOLUTE = new QName(\"input-absolute\")", "var_name": "INPUT_ABSOLUTE"}, {"original_string": "public static final QName INPUT_RELATIVE_FILE = new QName(\"input-relative-file\");", "modifier": "public static final", "type": "QName", "declarator": "INPUT_RELATIVE_FILE = new QName(\"input-relative-file\")", "var_name": "INPUT_RELATIVE_FILE"}, {"original_string": "public static final QName INPUT_RELATIVE_DIR = new QName(\"input-relative-dir\");", "modifier": "public static final", "type": "QName", "declarator": "INPUT_RELATIVE_DIR = new QName(\"input-relative-dir\")", "var_name": "INPUT_RELATIVE_DIR"}, {"original_string": "public static final QName GP_STATIC_BASE_URI = new QName(Config.NS, \"static-base-uri\");", "modifier": "public static final", "type": "QName", "declarator": "GP_STATIC_BASE_URI = new QName(Config.NS, \"static-base-uri\")", "var_name": "GP_STATIC_BASE_URI"}], "methods": [{"identifier": "merge", "parameters": "(final HashMap<QName,ParameterValue> highPriority, final HashMap<QName,ParameterValue> lowPriority)", "modifiers": "public static", "return": "HashMap<QName,ParameterValue>", "signature": "HashMap<QName,ParameterValue> merge(final HashMap<QName,ParameterValue> highPriority, final HashMap<QName,ParameterValue> lowPriority)", "full_signature": "public static HashMap<QName,ParameterValue> merge(final HashMap<QName,ParameterValue> highPriority, final HashMap<QName,ParameterValue> lowPriority)", "class_method_signature": "ParametersMerger.merge(final HashMap<QName,ParameterValue> highPriority, final HashMap<QName,ParameterValue> lowPriority)", "testcase": false, "constructor": false}, {"identifier": "processParametersReplacement", "parameters": "(Object initialValue, final HashMap<QName,ParameterValue> parameters)", "modifiers": "public static", "return": "Object", "signature": "Object processParametersReplacement(Object initialValue, final HashMap<QName,ParameterValue> parameters)", "full_signature": "public static Object processParametersReplacement(Object initialValue, final HashMap<QName,ParameterValue> parameters)", "class_method_signature": "ParametersMerger.processParametersReplacement(Object initialValue, final HashMap<QName,ParameterValue> parameters)", "testcase": false, "constructor": false}, {"identifier": "processParametersReplacement", "parameters": "(String initialValue, final HashMap<QName,ParameterValue> parameters)", "modifiers": "public static", "return": "String", "signature": "String processParametersReplacement(String initialValue, final HashMap<QName,ParameterValue> parameters)", "full_signature": "public static String processParametersReplacement(String initialValue, final HashMap<QName,ParameterValue> parameters)", "class_method_signature": "ParametersMerger.processParametersReplacement(String initialValue, final HashMap<QName,ParameterValue> parameters)", "testcase": false, "constructor": false}, {"identifier": "addInputInParameters", "parameters": "(final HashMap<QName,ParameterValue> parameters, final File inputFile, final DatatypeFactory factory)", "modifiers": "public static", "return": "HashMap<QName,ParameterValue>", "signature": "HashMap<QName,ParameterValue> addInputInParameters(final HashMap<QName,ParameterValue> parameters, final File inputFile, final DatatypeFactory factory)", "full_signature": "public static HashMap<QName,ParameterValue> addInputInParameters(final HashMap<QName,ParameterValue> parameters, final File inputFile, final DatatypeFactory factory)", "class_method_signature": "ParametersMerger.addInputInParameters(final HashMap<QName,ParameterValue> parameters, final File inputFile, final DatatypeFactory factory)", "testcase": false, "constructor": false}], "file": "gaulois-pipe/src/main/java/fr/efl/chaine/xslt/utils/ParametersMerger.java"}, "focal_method": {"identifier": "processParametersReplacement", "parameters": "(Object initialValue, final HashMap<QName,ParameterValue> parameters)", "modifiers": "public static", "return": "Object", "body": "public static Object processParametersReplacement(Object initialValue, final HashMap<QName,ParameterValue> parameters) {\n        if(initialValue instanceof String) {\n            String ret = initialValue.toString();\n            if(ret.contains(\"$[\")) {\n                for(ParameterValue pv: parameters.values()) {\n                    if(pv.getValue() instanceof String) {\n                        try {\n                            // issue #14\n                            ret = ret.replaceAll(\"\\\\$\\\\[\"+pv.getKey()+\"\\\\]\", Matcher.quoteReplacement(pv.getValue().toString()));\n                        } catch(java.lang.IllegalArgumentException ex) {\n                            LOGGER.error(\"while replacing \"+pv.getKey()+\" -> \"+pv.getValue(),ex);\n                            throw ex;\n                        }\n                    }\n                    if(!ret.contains(\"$[\")) break;\n                }\n            }\n            return ret;\n        } else {\n            return initialValue;\n        }\n    }", "signature": "Object processParametersReplacement(Object initialValue, final HashMap<QName,ParameterValue> parameters)", "full_signature": "public static Object processParametersReplacement(Object initialValue, final HashMap<QName,ParameterValue> parameters)", "class_method_signature": "ParametersMerger.processParametersReplacement(Object initialValue, final HashMap<QName,ParameterValue> parameters)", "testcase": false, "constructor": false, "invocations": ["toString", "contains", "values", "getValue", "replaceAll", "getKey", "quoteReplacement", "toString", "getValue", "error", "getKey", "getValue", "contains"]}, "repository": {"repo_id": 56587374, "url": "https://github.com/cmarchand/gaulois-pipe", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 6, "size": 506, "license": "licensed"}}