{"test_class": {"identifier": "NumberHolderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "BigDecimal d1 = new BigDecimal(21474836470999L);", "modifier": "", "type": "BigDecimal", "declarator": "d1 = new BigDecimal(21474836470999L)", "var_name": "d1"}, {"original_string": "BigDecimal d2 = new BigDecimal(\"0.01234567890123456789012345678901234567890123456789\");", "modifier": "", "type": "BigDecimal", "declarator": "d2 = new BigDecimal(\"0.01234567890123456789012345678901234567890123456789\")", "var_name": "d2"}, {"original_string": "NumberHolder h1 = new NumberHolder(d1);", "modifier": "", "type": "NumberHolder", "declarator": "h1 = new NumberHolder(d1)", "var_name": "h1"}, {"original_string": "NumberHolder h2 = new NumberHolder(d2);", "modifier": "", "type": "NumberHolder", "declarator": "h2 = new NumberHolder(d2)", "var_name": "h2"}, {"original_string": "NumberHolder h3 = new NumberHolder(null);", "modifier": "", "type": "NumberHolder", "declarator": "h3 = new NumberHolder(null)", "var_name": "h3"}], "file": "smartparam-engine/src/test/java/org/smartparam/engine/types/number/NumberHolderTest.java"}, "test_case": {"identifier": "testGetDouble", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetDouble() {\n\n        assertEquals(new Double(d1.doubleValue()), h1.getDouble());\n        assertEquals(new Double(d2.doubleValue()), h2.getDouble());\n        assertEquals(null, h3.getDouble());\n    }", "signature": "void testGetDouble()", "full_signature": "@Test public void testGetDouble()", "class_method_signature": "NumberHolderTest.testGetDouble()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "doubleValue", "getDouble", "assertEquals", "doubleValue", "getDouble", "assertEquals", "getDouble"]}, "focal_class": {"identifier": "NumberHolder", "superclass": "extends AbstractValueHolder", "interfaces": "", "fields": [{"original_string": "private final BigDecimal value;", "modifier": "private final", "type": "BigDecimal", "declarator": "value", "var_name": "value"}], "methods": [{"identifier": "NumberHolder", "parameters": "(BigDecimal value)", "modifiers": "public", "return": "", "signature": " NumberHolder(BigDecimal value)", "full_signature": "public  NumberHolder(BigDecimal value)", "class_method_signature": "NumberHolder.NumberHolder(BigDecimal value)", "testcase": false, "constructor": true}, {"identifier": "getValue", "parameters": "()", "modifiers": "@Override public", "return": "BigDecimal", "signature": "BigDecimal getValue()", "full_signature": "@Override public BigDecimal getValue()", "class_method_signature": "NumberHolder.getValue()", "testcase": false, "constructor": false}, {"identifier": "getBigDecimal", "parameters": "()", "modifiers": "@Override public", "return": "BigDecimal", "signature": "BigDecimal getBigDecimal()", "full_signature": "@Override public BigDecimal getBigDecimal()", "class_method_signature": "NumberHolder.getBigDecimal()", "testcase": false, "constructor": false}, {"identifier": "intValue", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int intValue()", "full_signature": "@Override public int intValue()", "class_method_signature": "NumberHolder.intValue()", "testcase": false, "constructor": false}, {"identifier": "longValue", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long longValue()", "full_signature": "@Override public long longValue()", "class_method_signature": "NumberHolder.longValue()", "testcase": false, "constructor": false}, {"identifier": "doubleValue", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double doubleValue()", "full_signature": "@Override public double doubleValue()", "class_method_signature": "NumberHolder.doubleValue()", "testcase": false, "constructor": false}, {"identifier": "getDouble", "parameters": "()", "modifiers": "@Override public", "return": "Double", "signature": "Double getDouble()", "full_signature": "@Override public Double getDouble()", "class_method_signature": "NumberHolder.getDouble()", "testcase": false, "constructor": false}, {"identifier": "getInteger", "parameters": "()", "modifiers": "@Override public", "return": "Integer", "signature": "Integer getInteger()", "full_signature": "@Override public Integer getInteger()", "class_method_signature": "NumberHolder.getInteger()", "testcase": false, "constructor": false}, {"identifier": "getLong", "parameters": "()", "modifiers": "@Override public", "return": "Long", "signature": "Long getLong()", "full_signature": "@Override public Long getLong()", "class_method_signature": "NumberHolder.getLong()", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getString()", "full_signature": "@Override public String getString()", "class_method_signature": "NumberHolder.getString()", "testcase": false, "constructor": false}], "file": "smartparam-engine/src/main/java/org/smartparam/engine/types/number/NumberHolder.java"}, "focal_method": {"identifier": "getDouble", "parameters": "()", "modifiers": "@Override public", "return": "Double", "body": "@Override\n    public Double getDouble() {\n        return value != null ? Double.valueOf(doubleValue()) : null;\n    }", "signature": "Double getDouble()", "full_signature": "@Override public Double getDouble()", "class_method_signature": "NumberHolder.getDouble()", "testcase": false, "constructor": false, "invocations": ["valueOf", "doubleValue"]}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}