{"test_class": {"identifier": "DASpecificationTest", "superclass": "extends TestWithGitBackedRepository", "interfaces": "", "fields": [], "file": "org.eclipse.winery.repository/src/test/java/org/eclipse/winery/repository/driverspecificationandinjection/DASpecificationTest.java"}, "test_case": {"identifier": "getArtifactTypeOfDA", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getArtifactTypeOfDA() throws Exception {\n        setRevisionTo(\"af529e513388dc9358a8f700757d8dc59aba3a55\");\n        ServiceTemplateId id = new ServiceTemplateId(\"http://winery.opentosca.org/test/servicetemplates/ponyuniverse/daspecifier\", \"DASpecificationTest\", false);\n        TTopologyTemplate topologyTemplate = this.repository.getElement(id).getTopologyTemplate();\n\n        TNodeTemplate nodeTemplateWithAbstractDA = topologyTemplate.getNodeTemplate(\"shetland_pony\");\n\n        TDeploymentArtifact deploymentArtifact = nodeTemplateWithAbstractDA.getDeploymentArtifacts().getDeploymentArtifact().get(0);\n        QName artifactTypeQName = deploymentArtifact.getArtifactType();\n        ArtifactTypeId artifactTypeId = new ArtifactTypeId(artifactTypeQName);\n\n        TArtifactType artifactType = this.repository.getElement(artifactTypeId);\n\n        assertEquals(artifactType.getTargetNamespace(), DASpecification.getArtifactTypeOfDA(nodeTemplateWithAbstractDA.getDeploymentArtifacts().getDeploymentArtifact().get(0)).getTargetNamespace());\n        assertEquals(artifactType.getName(), DASpecification.getArtifactTypeOfDA(nodeTemplateWithAbstractDA.getDeploymentArtifacts().getDeploymentArtifact().get(0)).getName());\n    }", "signature": "void getArtifactTypeOfDA()", "full_signature": "@Test public void getArtifactTypeOfDA()", "class_method_signature": "DASpecificationTest.getArtifactTypeOfDA()", "testcase": true, "constructor": false, "invocations": ["setRevisionTo", "getTopologyTemplate", "getElement", "getNodeTemplate", "get", "getDeploymentArtifact", "getDeploymentArtifacts", "getArtifactType", "getElement", "assertEquals", "getTargetNamespace", "getTargetNamespace", "getArtifactTypeOfDA", "get", "getDeploymentArtifact", "getDeploymentArtifacts", "assertEquals", "getName", "getName", "getArtifactTypeOfDA", "get", "getDeploymentArtifact", "getDeploymentArtifacts"]}, "focal_class": {"identifier": "DASpecification", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getNodeTemplatesWithAbstractDAs", "parameters": "(TTopologyTemplate topologyTemplate)", "modifiers": "public static", "return": "List<TNodeTemplate>", "signature": "List<TNodeTemplate> getNodeTemplatesWithAbstractDAs(TTopologyTemplate topologyTemplate)", "full_signature": "public static List<TNodeTemplate> getNodeTemplatesWithAbstractDAs(TTopologyTemplate topologyTemplate)", "class_method_signature": "DASpecification.getNodeTemplatesWithAbstractDAs(TTopologyTemplate topologyTemplate)", "testcase": false, "constructor": false}, {"identifier": "getArtifactTypeOfDA", "parameters": "(TDeploymentArtifact deploymentArtifact)", "modifiers": "public static", "return": "TArtifactType", "signature": "TArtifactType getArtifactTypeOfDA(TDeploymentArtifact deploymentArtifact)", "full_signature": "public static TArtifactType getArtifactTypeOfDA(TDeploymentArtifact deploymentArtifact)", "class_method_signature": "DASpecification.getArtifactTypeOfDA(TDeploymentArtifact deploymentArtifact)", "testcase": false, "constructor": false}, {"identifier": "getArtifactTypeHierarchy", "parameters": "(TArtifactType artifactType)", "modifiers": "public static", "return": "List<TArtifactType>", "signature": "List<TArtifactType> getArtifactTypeHierarchy(TArtifactType artifactType)", "full_signature": "public static List<TArtifactType> getArtifactTypeHierarchy(TArtifactType artifactType)", "class_method_signature": "DASpecification.getArtifactTypeHierarchy(TArtifactType artifactType)", "testcase": false, "constructor": false}, {"identifier": "getNodesWithSuitableConcreteDAAndTheDirectlyConnectedNode", "parameters": "(TNodeTemplate nodeTemplate, TDeploymentArtifact deploymentArtifact, TTopologyTemplate topologyTemplate)", "modifiers": "public static", "return": "Map<TRelationshipTemplate, TNodeTemplate>", "signature": "Map<TRelationshipTemplate, TNodeTemplate> getNodesWithSuitableConcreteDAAndTheDirectlyConnectedNode(TNodeTemplate nodeTemplate, TDeploymentArtifact deploymentArtifact, TTopologyTemplate topologyTemplate)", "full_signature": "public static Map<TRelationshipTemplate, TNodeTemplate> getNodesWithSuitableConcreteDAAndTheDirectlyConnectedNode(TNodeTemplate nodeTemplate, TDeploymentArtifact deploymentArtifact, TTopologyTemplate topologyTemplate)", "class_method_signature": "DASpecification.getNodesWithSuitableConcreteDAAndTheDirectlyConnectedNode(TNodeTemplate nodeTemplate, TDeploymentArtifact deploymentArtifact, TTopologyTemplate topologyTemplate)", "testcase": false, "constructor": false}, {"identifier": "getNodesWithSuitableConcreteDAs", "parameters": "(TNodeTemplate nodeTemplate, TDeploymentArtifact deploymentArtifact, TTopologyTemplate topologyTemplate)", "modifiers": "public static", "return": "TNodeTemplate", "signature": "TNodeTemplate getNodesWithSuitableConcreteDAs(TNodeTemplate nodeTemplate, TDeploymentArtifact deploymentArtifact, TTopologyTemplate topologyTemplate)", "full_signature": "public static TNodeTemplate getNodesWithSuitableConcreteDAs(TNodeTemplate nodeTemplate, TDeploymentArtifact deploymentArtifact, TTopologyTemplate topologyTemplate)", "class_method_signature": "DASpecification.getNodesWithSuitableConcreteDAs(TNodeTemplate nodeTemplate, TDeploymentArtifact deploymentArtifact, TTopologyTemplate topologyTemplate)", "testcase": false, "constructor": false}, {"identifier": "getSuitableConcreteDA", "parameters": "(TDeploymentArtifact abstractDeploymentArtifact, TNodeTemplate nodeTemplate)", "modifiers": "public static", "return": "TDeploymentArtifact", "signature": "TDeploymentArtifact getSuitableConcreteDA(TDeploymentArtifact abstractDeploymentArtifact, TNodeTemplate nodeTemplate)", "full_signature": "public static TDeploymentArtifact getSuitableConcreteDA(TDeploymentArtifact abstractDeploymentArtifact, TNodeTemplate nodeTemplate)", "class_method_signature": "DASpecification.getSuitableConcreteDA(TDeploymentArtifact abstractDeploymentArtifact, TNodeTemplate nodeTemplate)", "testcase": false, "constructor": false}, {"identifier": "getmatchingNodeTypeImplementations", "parameters": "(QName nodeTypeQName)", "modifiers": "private static", "return": "List<TNodeTypeImplementation>", "signature": "List<TNodeTypeImplementation> getmatchingNodeTypeImplementations(QName nodeTypeQName)", "full_signature": "private static List<TNodeTypeImplementation> getmatchingNodeTypeImplementations(QName nodeTypeQName)", "class_method_signature": "DASpecification.getmatchingNodeTypeImplementations(QName nodeTypeQName)", "testcase": false, "constructor": false}, {"identifier": "getConcreteDA", "parameters": "(TDeploymentArtifact abstractDeploymentArtifact, List<TDeploymentArtifact> candidates)", "modifiers": "private static", "return": "TDeploymentArtifact", "signature": "TDeploymentArtifact getConcreteDA(TDeploymentArtifact abstractDeploymentArtifact, List<TDeploymentArtifact> candidates)", "full_signature": "private static TDeploymentArtifact getConcreteDA(TDeploymentArtifact abstractDeploymentArtifact, List<TDeploymentArtifact> candidates)", "class_method_signature": "DASpecification.getConcreteDA(TDeploymentArtifact abstractDeploymentArtifact, List<TDeploymentArtifact> candidates)", "testcase": false, "constructor": false}, {"identifier": "getBasisRelationshipType", "parameters": "(QName relationshipTypeQName)", "modifiers": "private static", "return": "TRelationshipType", "signature": "TRelationshipType getBasisRelationshipType(QName relationshipTypeQName)", "full_signature": "private static TRelationshipType getBasisRelationshipType(QName relationshipTypeQName)", "class_method_signature": "DASpecification.getBasisRelationshipType(QName relationshipTypeQName)", "testcase": false, "constructor": false}], "file": "org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/driverspecificationandinjection/DASpecification.java"}, "focal_method": {"identifier": "getArtifactTypeOfDA", "parameters": "(TDeploymentArtifact deploymentArtifact)", "modifiers": "public static", "return": "TArtifactType", "body": "public static TArtifactType getArtifactTypeOfDA(TDeploymentArtifact deploymentArtifact) {\n        QName DAArtifactTypeQName = deploymentArtifact.getArtifactType();\n        ArtifactTypeId artifactTypeId = new ArtifactTypeId(DAArtifactTypeQName);\n        TArtifactType artifactType = RepositoryFactory.getRepository().getElement(artifactTypeId);\n        return artifactType;\n    }", "signature": "TArtifactType getArtifactTypeOfDA(TDeploymentArtifact deploymentArtifact)", "full_signature": "public static TArtifactType getArtifactTypeOfDA(TDeploymentArtifact deploymentArtifact)", "class_method_signature": "DASpecification.getArtifactTypeOfDA(TDeploymentArtifact deploymentArtifact)", "testcase": false, "constructor": false, "invocations": ["getArtifactType", "getElement", "getRepository"]}, "repository": {"repo_id": 42622157, "url": "https://github.com/eclipse/winery", "stars": 34, "created": "9/17/2015 12:31:44 AM +00:00", "updates": "2020-01-22T09:32:00+00:00", "fork": "False", "license": "licensed"}}