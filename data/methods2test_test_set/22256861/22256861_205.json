{"test_class": {"identifier": "PartitionerTest", "superclass": "", "interfaces": "", "fields": [], "file": "s3tbx-sentinel3-reader/src/test/java/org/esa/s3tbx/dataio/s3/synergy/PartitionerTest.java"}, "test_case": {"identifier": "testPartitioning", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPartitioning() throws Exception {\n        final String[] names = {\n                \"B1_CAM1\", \"B1_CAM2\", \"B1_CAM3\", \"B1_CAM4\", \"B1_CAM5\",\n                \"B2_CAM1\", \"B2_CAM2\", \"B2_CAM3\", \"B2_CAM4\", \"B2_CAM5\",\n        };\n\n        final Map<String, List<String>> map = Partitioner.partition(names, \"_CAM\");\n\n        assertNotNull(map);\n        assertEquals(2, map.size());\n\n        final List<String> listB1 = map.get(\"B1\");\n        assertNotNull(listB1);\n\n        final List<String> listB2 = map.get(\"B2\");\n        assertNotNull(listB2);\n\n        assertEquals(5, listB1.size());\n        assertEquals(5, listB2.size());\n\n        assertEquals(\"B1_CAM1\", listB1.get(0));\n        assertEquals(\"B1_CAM2\", listB1.get(1));\n        assertEquals(\"B1_CAM3\", listB1.get(2));\n        assertEquals(\"B1_CAM4\", listB1.get(3));\n        assertEquals(\"B1_CAM5\", listB1.get(4));\n\n        assertEquals(\"B2_CAM1\", listB2.get(0));\n        assertEquals(\"B2_CAM2\", listB2.get(1));\n        assertEquals(\"B2_CAM3\", listB2.get(2));\n        assertEquals(\"B2_CAM4\", listB2.get(3));\n        assertEquals(\"B2_CAM5\", listB2.get(4));\n    }", "signature": "void testPartitioning()", "full_signature": "@Test public void testPartitioning()", "class_method_signature": "PartitionerTest.testPartitioning()", "testcase": true, "constructor": false, "invocations": ["partition", "assertNotNull", "assertEquals", "size", "get", "assertNotNull", "get", "assertNotNull", "assertEquals", "size", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "Partitioner", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "partition", "parameters": "(final String[] names, final String enumerator)", "modifiers": "public static", "return": "Map<String, List<String>>", "signature": "Map<String, List<String>> partition(final String[] names, final String enumerator)", "full_signature": "public static Map<String, List<String>> partition(final String[] names, final String enumerator)", "class_method_signature": "Partitioner.partition(final String[] names, final String enumerator)", "testcase": false, "constructor": false}], "file": "s3tbx-sentinel3-reader/src/main/java/org/esa/s3tbx/dataio/s3/synergy/Partitioner.java"}, "focal_method": {"identifier": "partition", "parameters": "(final String[] names, final String enumerator)", "modifiers": "public static", "return": "Map<String, List<String>>", "body": "public static Map<String, List<String>> partition(final String[] names, final String enumerator) {\n        final Map<String, List<String>> map = new HashMap<String, List<String>>();\n\n        for (final String name : names) {\n            final String[] parts = name.split(enumerator);\n            final String key = parts[0];\n            if (!map.containsKey(key)) {\n                map.put(key, new ArrayList<String>());\n            }\n            map.get(key).add(name);\n        }\n        for (final List<String> nameList : map.values()) {\n            Collections.sort(nameList);\n        }\n\n        return map;\n    }", "signature": "Map<String, List<String>> partition(final String[] names, final String enumerator)", "full_signature": "public static Map<String, List<String>> partition(final String[] names, final String enumerator)", "class_method_signature": "Partitioner.partition(final String[] names, final String enumerator)", "testcase": false, "constructor": false, "invocations": ["split", "containsKey", "put", "add", "get", "values", "sort"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}