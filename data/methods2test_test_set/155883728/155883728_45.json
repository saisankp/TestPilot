{"test_class": {"identifier": "OpearPlanMojoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final File testOutBaseDir = new File(\"target/test-out/OpearPlanMojoTest\");", "modifier": "private final", "type": "File", "declarator": "testOutBaseDir = new File(\"target/test-out/OpearPlanMojoTest\")", "var_name": "testOutBaseDir"}], "file": "maven/src/test/java/net/adamcin/oakpal/maven/mojo/OpearPlanMojoTest.java"}, "test_case": {"identifier": "testExecute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecute() throws Exception {\n        final File testOutDir = new File(testOutBaseDir, \"testExecute\");\n        FileUtils.deleteDirectory(testOutDir);\n        OpearPlanMojo mojo = newMojo();\n        final MavenProject project = mock(MavenProject.class);\n        mojo.project = project;\n        final Build build = mock(Build.class);\n        when(project.getBuild()).thenReturn(build);\n        final File classes = new File(testOutDir, \"classes\");\n        when(build.getOutputDirectory()).thenReturn(classes.getPath());\n\n        final MavenSession session = mock(MavenSession.class);\n        mojo.session = session;\n        final MavenExecutionRequest executionRequest = mock(MavenExecutionRequest.class);\n        when(session.getRequest()).thenReturn(executionRequest);\n        final RepositorySystem repositorySystem = mock(RepositorySystem.class);\n        mojo.repositorySystem = repositorySystem;\n        mojo.planParams = new PlanParams();\n        mojo.planParams.setChecklists(Arrays.asList(\"checklist1\", \"checklist2\"));\n        mojo.planFile = new File(testOutDir, \"opear-plans/plan.json\");\n        mojo.execute();\n\n        try (Reader reader = new InputStreamReader(new FileInputStream(mojo.planFile), StandardCharsets.UTF_8);\n             JsonReader jsonReader = Json.createReader(reader)) {\n            final JsonObject readObject = jsonReader.readObject();\n            assertEquals(\"expect json\", key(\"checklists\", arr(\"checklist1\", \"checklist2\")).get(), readObject);\n        }\n    }", "signature": "void testExecute()", "full_signature": "@Test public void testExecute()", "class_method_signature": "OpearPlanMojoTest.testExecute()", "testcase": true, "constructor": false, "invocations": ["deleteDirectory", "newMojo", "mock", "mock", "thenReturn", "when", "getBuild", "thenReturn", "when", "getOutputDirectory", "getPath", "mock", "mock", "thenReturn", "when", "getRequest", "mock", "setChecklists", "asList", "execute", "createReader", "readObject", "assertEquals", "get", "key", "arr"]}, "focal_class": {"identifier": "OpearPlanMojo", "superclass": "extends AbstractCommonMojo", "interfaces": "implements MojoWithPlanParams", "fields": [{"original_string": "@Parameter(name = \"planFile\", defaultValue = \"${project.build.directory}/oakpal-plugin/opear-plans/plan.json\", required = true)\n    File planFile;", "modifier": "@Parameter(name = \"planFile\", defaultValue = \"${project.build.directory}/oakpal-plugin/opear-plans/plan.json\", required = true)", "type": "File", "declarator": "planFile", "var_name": "planFile"}, {"original_string": "@Parameter(name = \"planParams\")\n    PlanParams planParams;", "modifier": "@Parameter(name = \"planParams\")", "type": "PlanParams", "declarator": "planParams", "var_name": "planParams"}], "methods": [{"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "OpearPlanMojo.execute()", "testcase": false, "constructor": false}, {"identifier": "getPlanBuilderParams", "parameters": "()", "modifiers": "@Override public", "return": "PlanBuilderParams", "signature": "PlanBuilderParams getPlanBuilderParams()", "full_signature": "@Override public PlanBuilderParams getPlanBuilderParams()", "class_method_signature": "OpearPlanMojo.getPlanBuilderParams()", "testcase": false, "constructor": false}], "file": "maven/src/main/java/net/adamcin/oakpal/maven/mojo/OpearPlanMojo.java"}, "focal_method": {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void execute() throws MojoFailureException {\n        planFile.getParentFile().mkdirs();\n\n        final JsonWriterFactory writerFactory =\n                Json.createWriterFactory(Collections.singletonMap(JsonGenerator.PRETTY_PRINTING, true));\n        ClassLoader oldCl = Thread.currentThread().getContextClassLoader();\n        try (OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(planFile), StandardCharsets.UTF_8);\n             JsonWriter writer = writerFactory.createWriter(osw)) {\n            Thread.currentThread().setContextClassLoader(createContainerClassLoader());\n            OakpalPlan plan = buildPlan();\n            writer.writeObject(plan.toJson());\n        } catch (IOException e) {\n            throw new MojoFailureException(\"Failed to write plan json to file \" + planFile.getAbsolutePath(), e);\n        } finally {\n            Thread.currentThread().setContextClassLoader(oldCl);\n        }\n    }", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "OpearPlanMojo.execute()", "testcase": false, "constructor": false, "invocations": ["mkdirs", "getParentFile", "createWriterFactory", "singletonMap", "getContextClassLoader", "currentThread", "createWriter", "setContextClassLoader", "currentThread", "createContainerClassLoader", "buildPlan", "writeObject", "toJson", "getAbsolutePath", "setContextClassLoader", "currentThread"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}