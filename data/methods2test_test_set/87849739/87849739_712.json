{"test_class": {"identifier": "AcknowledgementForwarderActorStarterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ThingId KNOWN_ENTITY_ID = ThingId.generateRandom();", "modifier": "private static final", "type": "ThingId", "declarator": "KNOWN_ENTITY_ID = ThingId.generateRandom()", "var_name": "KNOWN_ENTITY_ID"}, {"original_string": "private static ActorSystem actorSystem;", "modifier": "private static", "type": "ActorSystem", "declarator": "actorSystem", "var_name": "actorSystem"}, {"original_string": "private static AcknowledgementConfig acknowledgementConfig;", "modifier": "private static", "type": "AcknowledgementConfig", "declarator": "acknowledgementConfig", "var_name": "acknowledgementConfig"}, {"original_string": "@Rule\n    public final TestName testName = new TestName();", "modifier": "@Rule\n    public final", "type": "TestName", "declarator": "testName = new TestName()", "var_name": "testName"}, {"original_string": "@Rule\n    public final JUnitSoftAssertions softly = new JUnitSoftAssertions();", "modifier": "@Rule\n    public final", "type": "JUnitSoftAssertions", "declarator": "softly = new JUnitSoftAssertions()", "var_name": "softly"}, {"original_string": "@Mock\n    private ActorContext actorContext;", "modifier": "@Mock\n    private", "type": "ActorContext", "declarator": "actorContext", "var_name": "actorContext"}, {"original_string": "private TestProbe testProbe;", "modifier": "private", "type": "TestProbe", "declarator": "testProbe", "var_name": "testProbe"}], "file": "services/models/acks/src/test/java/org/eclipse/ditto/services/models/acks/AcknowledgementForwarderActorStarterTest.java"}, "test_case": {"identifier": "startForwarderActorSuccessfully", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void startForwarderActorSuccessfully() {\n        final DittoHeaders dittoHeaders = DittoHeaders.newBuilder()\n                .correlationId(testName.getMethodName())\n                .acknowledgementRequest(AcknowledgementRequest.of(DittoAcknowledgementLabel.TWIN_PERSISTED),\n                        AcknowledgementRequest.of(AcknowledgementLabel.of(\"my-ack\")))\n                .build();\n\n        final AcknowledgementForwarderActorStarter underTest = getActorStarter(dittoHeaders);\n\n        softly.assertThat(underTest.get()).isPresent();\n    }", "signature": "void startForwarderActorSuccessfully()", "full_signature": "@Test public void startForwarderActorSuccessfully()", "class_method_signature": "AcknowledgementForwarderActorStarterTest.startForwarderActorSuccessfully()", "testcase": true, "constructor": false, "invocations": ["build", "acknowledgementRequest", "correlationId", "newBuilder", "getMethodName", "of", "of", "of", "getActorStarter", "isPresent", "assertThat", "get"]}, "focal_class": {"identifier": "AcknowledgementForwarderActorStarter", "superclass": "", "interfaces": "implements Supplier<Optional<ActorRef>>", "fields": [{"original_string": "private static final String PREFIX_COUNTER_SEPARATOR = \"#\";", "modifier": "private static final", "type": "String", "declarator": "PREFIX_COUNTER_SEPARATOR = \"#\"", "var_name": "PREFIX_COUNTER_SEPARATOR"}, {"original_string": "private static final DittoLogger LOGGER = DittoLoggerFactory.getLogger(AcknowledgementForwarderActorStarter.class);", "modifier": "private static final", "type": "DittoLogger", "declarator": "LOGGER = DittoLoggerFactory.getLogger(AcknowledgementForwarderActorStarter.class)", "var_name": "LOGGER"}, {"original_string": "private final ActorContext actorContext;", "modifier": "private final", "type": "ActorContext", "declarator": "actorContext", "var_name": "actorContext"}, {"original_string": "private final EntityIdWithType entityId;", "modifier": "private final", "type": "EntityIdWithType", "declarator": "entityId", "var_name": "entityId"}, {"original_string": "private final Signal<?> signal;", "modifier": "private final", "type": "Signal<?>", "declarator": "signal", "var_name": "signal"}, {"original_string": "private final DittoHeaders dittoHeaders;", "modifier": "private final", "type": "DittoHeaders", "declarator": "dittoHeaders", "var_name": "dittoHeaders"}, {"original_string": "private final Set<AcknowledgementRequest> acknowledgementRequests;", "modifier": "private final", "type": "Set<AcknowledgementRequest>", "declarator": "acknowledgementRequests", "var_name": "acknowledgementRequests"}, {"original_string": "private final AcknowledgementConfig acknowledgementConfig;", "modifier": "private final", "type": "AcknowledgementConfig", "declarator": "acknowledgementConfig", "var_name": "acknowledgementConfig"}], "methods": [{"identifier": "AcknowledgementForwarderActorStarter", "parameters": "(final ActorContext context,\n            final EntityIdWithType entityId,\n            final Signal<?> signal,\n            final AcknowledgementConfig acknowledgementConfig)", "modifiers": "private", "return": "", "signature": " AcknowledgementForwarderActorStarter(final ActorContext context,\n            final EntityIdWithType entityId,\n            final Signal<?> signal,\n            final AcknowledgementConfig acknowledgementConfig)", "full_signature": "private  AcknowledgementForwarderActorStarter(final ActorContext context,\n            final EntityIdWithType entityId,\n            final Signal<?> signal,\n            final AcknowledgementConfig acknowledgementConfig)", "class_method_signature": "AcknowledgementForwarderActorStarter.AcknowledgementForwarderActorStarter(final ActorContext context,\n            final EntityIdWithType entityId,\n            final Signal<?> signal,\n            final AcknowledgementConfig acknowledgementConfig)", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "(final ActorContext context,\n            final EntityIdWithType entityId,\n            final Signal<?> signal,\n            final AcknowledgementConfig acknowledgementConfig)", "modifiers": "static", "return": "AcknowledgementForwarderActorStarter", "signature": "AcknowledgementForwarderActorStarter getInstance(final ActorContext context,\n            final EntityIdWithType entityId,\n            final Signal<?> signal,\n            final AcknowledgementConfig acknowledgementConfig)", "full_signature": "static AcknowledgementForwarderActorStarter getInstance(final ActorContext context,\n            final EntityIdWithType entityId,\n            final Signal<?> signal,\n            final AcknowledgementConfig acknowledgementConfig)", "class_method_signature": "AcknowledgementForwarderActorStarter.getInstance(final ActorContext context,\n            final EntityIdWithType entityId,\n            final Signal<?> signal,\n            final AcknowledgementConfig acknowledgementConfig)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "Optional<ActorRef>", "signature": "Optional<ActorRef> get()", "full_signature": "@Override public Optional<ActorRef> get()", "class_method_signature": "AcknowledgementForwarderActorStarter.get()", "testcase": false, "constructor": false}, {"identifier": "getConflictFree", "parameters": "()", "modifiers": "public", "return": "Optional<String>", "signature": "Optional<String> getConflictFree()", "full_signature": "public Optional<String> getConflictFree()", "class_method_signature": "AcknowledgementForwarderActorStarter.getConflictFree()", "testcase": false, "constructor": false}, {"identifier": "joinPrefixAndCounter", "parameters": "(final String prefix, final int counter)", "modifiers": "private", "return": "String", "signature": "String joinPrefixAndCounter(final String prefix, final int counter)", "full_signature": "private String joinPrefixAndCounter(final String prefix, final int counter)", "class_method_signature": "AcknowledgementForwarderActorStarter.joinPrefixAndCounter(final String prefix, final int counter)", "testcase": false, "constructor": false}, {"identifier": "parseCorrelationId", "parameters": "(final DittoHeaders dittoHeaders)", "modifiers": "private", "return": "Pair<String, Integer>", "signature": "Pair<String, Integer> parseCorrelationId(final DittoHeaders dittoHeaders)", "full_signature": "private Pair<String, Integer> parseCorrelationId(final DittoHeaders dittoHeaders)", "class_method_signature": "AcknowledgementForwarderActorStarter.parseCorrelationId(final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "startAckForwarderActor", "parameters": "(final DittoHeaders dittoHeaders)", "modifiers": "private", "return": "ActorRef", "signature": "ActorRef startAckForwarderActor(final DittoHeaders dittoHeaders)", "full_signature": "private ActorRef startAckForwarderActor(final DittoHeaders dittoHeaders)", "class_method_signature": "AcknowledgementForwarderActorStarter.startAckForwarderActor(final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "getDuplicateCorrelationIdException", "parameters": "(final Throwable cause)", "modifiers": "private", "return": "DittoRuntimeException", "signature": "DittoRuntimeException getDuplicateCorrelationIdException(final Throwable cause)", "full_signature": "private DittoRuntimeException getDuplicateCorrelationIdException(final Throwable cause)", "class_method_signature": "AcknowledgementForwarderActorStarter.getDuplicateCorrelationIdException(final Throwable cause)", "testcase": false, "constructor": false}, {"identifier": "declineAllNonDittoAckRequests", "parameters": "(final DittoRuntimeException dittoRuntimeException)", "modifiers": "private", "return": "void", "signature": "void declineAllNonDittoAckRequests(final DittoRuntimeException dittoRuntimeException)", "full_signature": "private void declineAllNonDittoAckRequests(final DittoRuntimeException dittoRuntimeException)", "class_method_signature": "AcknowledgementForwarderActorStarter.declineAllNonDittoAckRequests(final DittoRuntimeException dittoRuntimeException)", "testcase": false, "constructor": false}, {"identifier": "getNack", "parameters": "(final AcknowledgementLabel label,\n            final DittoRuntimeException dittoRuntimeException)", "modifiers": "private", "return": "Acknowledgement", "signature": "Acknowledgement getNack(final AcknowledgementLabel label,\n            final DittoRuntimeException dittoRuntimeException)", "full_signature": "private Acknowledgement getNack(final AcknowledgementLabel label,\n            final DittoRuntimeException dittoRuntimeException)", "class_method_signature": "AcknowledgementForwarderActorStarter.getNack(final AcknowledgementLabel label,\n            final DittoRuntimeException dittoRuntimeException)", "testcase": false, "constructor": false}, {"identifier": "isNotBuiltIn", "parameters": "(final AcknowledgementRequest request)", "modifiers": "static", "return": "boolean", "signature": "boolean isNotBuiltIn(final AcknowledgementRequest request)", "full_signature": "static boolean isNotBuiltIn(final AcknowledgementRequest request)", "class_method_signature": "AcknowledgementForwarderActorStarter.isNotBuiltIn(final AcknowledgementRequest request)", "testcase": false, "constructor": false}, {"identifier": "isNotTwinPersisted", "parameters": "(final AcknowledgementRequest request)", "modifiers": "static", "return": "boolean", "signature": "boolean isNotTwinPersisted(final AcknowledgementRequest request)", "full_signature": "static boolean isNotTwinPersisted(final AcknowledgementRequest request)", "class_method_signature": "AcknowledgementForwarderActorStarter.isNotTwinPersisted(final AcknowledgementRequest request)", "testcase": false, "constructor": false}, {"identifier": "isNotLiveResponse", "parameters": "(final AcknowledgementRequest request)", "modifiers": "static", "return": "boolean", "signature": "boolean isNotLiveResponse(final AcknowledgementRequest request)", "full_signature": "static boolean isNotLiveResponse(final AcknowledgementRequest request)", "class_method_signature": "AcknowledgementForwarderActorStarter.isNotLiveResponse(final AcknowledgementRequest request)", "testcase": false, "constructor": false}, {"identifier": "isLiveSignal", "parameters": "(final Signal<?> signal)", "modifiers": "static", "return": "boolean", "signature": "boolean isLiveSignal(final Signal<?> signal)", "full_signature": "static boolean isLiveSignal(final Signal<?> signal)", "class_method_signature": "AcknowledgementForwarderActorStarter.isLiveSignal(final Signal<?> signal)", "testcase": false, "constructor": false}, {"identifier": "hasEffectiveAckRequests", "parameters": "(final Signal<?> signal)", "modifiers": "static", "return": "boolean", "signature": "boolean hasEffectiveAckRequests(final Signal<?> signal)", "full_signature": "static boolean hasEffectiveAckRequests(final Signal<?> signal)", "class_method_signature": "AcknowledgementForwarderActorStarter.hasEffectiveAckRequests(final Signal<?> signal)", "testcase": false, "constructor": false}, {"identifier": "isNumber", "parameters": "(final String string, final int startIndex)", "modifiers": "private static", "return": "boolean", "signature": "boolean isNumber(final String string, final int startIndex)", "full_signature": "private static boolean isNumber(final String string, final int startIndex)", "class_method_signature": "AcknowledgementForwarderActorStarter.isNumber(final String string, final int startIndex)", "testcase": false, "constructor": false}], "file": "services/models/acks/src/main/java/org/eclipse/ditto/services/models/acks/AcknowledgementForwarderActorStarter.java"}, "focal_method": {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "Optional<ActorRef>", "body": "@Override\n    public Optional<ActorRef> get() {\n        ActorRef actorRef = null;\n        if (hasEffectiveAckRequests(signal)) {\n            try {\n                actorRef = startAckForwarderActor(dittoHeaders);\n            } catch (final InvalidActorNameException e) {\n                // In case that the actor with that name already existed, the correlation-id was already used recently:\n                declineAllNonDittoAckRequests(getDuplicateCorrelationIdException(e));\n            }\n        }\n        return Optional.ofNullable(actorRef);\n    }", "signature": "Optional<ActorRef> get()", "full_signature": "@Override public Optional<ActorRef> get()", "class_method_signature": "AcknowledgementForwarderActorStarter.get()", "testcase": false, "constructor": false, "invocations": ["hasEffectiveAckRequests", "startAckForwarderActor", "declineAllNonDittoAckRequests", "getDuplicateCorrelationIdException", "ofNullable"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}