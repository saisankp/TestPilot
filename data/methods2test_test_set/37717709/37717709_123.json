{"test_class": {"identifier": "TestBooleanGrammarCreator", "superclass": "", "interfaces": "", "fields": [], "file": "org.jvoicexml/src/test/java/org/jvoicexml/documentserver/schemestrategy/builtin/TestBooleanGrammarCreator.java"}, "test_case": {"identifier": "testCreateGrammar", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateGrammar() throws Exception, BadFetchError {\n        final GrammarCreator creator = new BooleanGrammarCreator();\n\n        final URI dtmfUri = new URI(\"builtin:dtmf/boolean\");\n        final byte[] bytes1 = creator.createGrammar(dtmfUri);\n        final ByteArrayInputStream in1 = new ByteArrayInputStream(bytes1);\n        final InputSource source1 = new InputSource(in1);\n        final SrgsXmlDocument dtmfDocument = new SrgsXmlDocument(source1);\n        final Grammar dtmfGrammar = dtmfDocument.getGrammar();\n        Assert.assertEquals(ModeType.DTMF, dtmfGrammar.getMode());\n\n        final URI voiceUri = new URI(\"builtin:voice/boolean\");\n        final byte[] bytes2 = creator.createGrammar(voiceUri);\n        final ByteArrayInputStream in2 = new ByteArrayInputStream(bytes2);\n        final InputSource source2 = new InputSource(in2);\n        final SrgsXmlDocument voiceDocument = new SrgsXmlDocument(source2);\n        final Grammar voiceGrammar = voiceDocument.getGrammar();\n        Assert.assertEquals(ModeType.VOICE, voiceGrammar.getMode());\n    }", "signature": "void testCreateGrammar()", "full_signature": "@Test public void testCreateGrammar()", "class_method_signature": "TestBooleanGrammarCreator.testCreateGrammar()", "testcase": true, "constructor": false, "invocations": ["createGrammar", "getGrammar", "assertEquals", "getMode", "createGrammar", "getGrammar", "assertEquals", "getMode"]}, "focal_class": {"identifier": "BooleanGrammarCreator", "superclass": "extends AbstractGrammarCreator", "interfaces": "implements GrammarCreator", "fields": [{"original_string": "private static final String NO_PARAMETER_NAME = \"n\";", "modifier": "private static final", "type": "String", "declarator": "NO_PARAMETER_NAME = \"n\"", "var_name": "NO_PARAMETER_NAME"}, {"original_string": "private static final String YES_PARAMETER_NAME = \"y\";", "modifier": "private static final", "type": "String", "declarator": "YES_PARAMETER_NAME = \"y\"", "var_name": "YES_PARAMETER_NAME"}, {"original_string": "public static final String TYPE_NAME = \"boolean\";", "modifier": "public static final", "type": "String", "declarator": "TYPE_NAME = \"boolean\"", "var_name": "TYPE_NAME"}], "methods": [{"identifier": "createGrammar", "parameters": "(final URI uri)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] createGrammar(final URI uri)", "full_signature": "@Override public byte[] createGrammar(final URI uri)", "class_method_signature": "BooleanGrammarCreator.createGrammar(final URI uri)", "testcase": false, "constructor": false}, {"identifier": "createGrammar", "parameters": "(final Map<String, String> parameters,\n            final ModeType mode)", "modifiers": "private", "return": "SrgsXmlDocument", "signature": "SrgsXmlDocument createGrammar(final Map<String, String> parameters,\n            final ModeType mode)", "full_signature": "private SrgsXmlDocument createGrammar(final Map<String, String> parameters,\n            final ModeType mode)", "class_method_signature": "BooleanGrammarCreator.createGrammar(final Map<String, String> parameters,\n            final ModeType mode)", "testcase": false, "constructor": false}, {"identifier": "getTypeName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getTypeName()", "full_signature": "@Override public String getTypeName()", "class_method_signature": "BooleanGrammarCreator.getTypeName()", "testcase": false, "constructor": false}], "file": "org.jvoicexml/src/main/java/org/jvoicexml/documentserver/schemestrategy/builtin/BooleanGrammarCreator.java"}, "focal_method": {"identifier": "createGrammar", "parameters": "(final URI uri)", "modifiers": "@Override public", "return": "byte[]", "body": "@Override\n    public byte[] createGrammar(final URI uri)\n        throws BadFetchError, IOException {\n        final Map<String, String> parameters = getParameters(uri);\n        final ModeType mode = getMode(uri);\n\n        if (mode == ModeType.VOICE) {\n            // TODO retrieve the value from a resource bundle\n            parameters.put(YES_PARAMETER_NAME, \"yes\");\n        } else {\n            if (!parameters.containsKey(YES_PARAMETER_NAME)) {\n                parameters.put(YES_PARAMETER_NAME, \"1\");\n            }\n        }\n        if (mode == ModeType.VOICE) {\n            // TODO retrieve the value from a resource bundle\n            parameters.put(NO_PARAMETER_NAME, \"no\");\n        } else {\n            if (!parameters.containsKey(NO_PARAMETER_NAME)) {\n                parameters.put(NO_PARAMETER_NAME, \"2\");\n            }\n        }\n        final SrgsXmlDocument document = createGrammar(parameters, mode);\n        return getBytes(document);\n    }", "signature": "byte[] createGrammar(final URI uri)", "full_signature": "@Override public byte[] createGrammar(final URI uri)", "class_method_signature": "BooleanGrammarCreator.createGrammar(final URI uri)", "testcase": false, "constructor": false, "invocations": ["getParameters", "getMode", "put", "containsKey", "put", "put", "containsKey", "put", "createGrammar", "getBytes"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}