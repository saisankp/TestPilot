{"test_class": {"identifier": "LBClientTest", "superclass": "", "interfaces": "", "fields": [], "file": "ribbon/src/test/java/feign/ribbon/LBClientTest.java"}, "test_case": {"identifier": "testParseCodes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testParseCodes() {\n    assertThat(LBClient.parseStatusCodes(\"\")).isEmpty();\n    assertThat(LBClient.parseStatusCodes(null)).isEmpty();\n    assertThat(LBClient.parseStatusCodes(\"504\")).contains(504);\n    assertThat(LBClient.parseStatusCodes(\"503,504\")).contains(503, 504);\n  }", "signature": "void testParseCodes()", "full_signature": "@Test public void testParseCodes()", "class_method_signature": "LBClientTest.testParseCodes()", "testcase": true, "constructor": false, "invocations": ["isEmpty", "assertThat", "parseStatusCodes", "isEmpty", "assertThat", "parseStatusCodes", "contains", "assertThat", "parseStatusCodes", "contains", "assertThat", "parseStatusCodes"]}, "focal_class": {"identifier": "LBClient", "superclass": "extends\n    AbstractLoadBalancerAwareClient<LBClient.RibbonRequest, LBClient.RibbonResponse>", "interfaces": "", "fields": [{"original_string": "private final int connectTimeout;", "modifier": "private final", "type": "int", "declarator": "connectTimeout", "var_name": "connectTimeout"}, {"original_string": "private final int readTimeout;", "modifier": "private final", "type": "int", "declarator": "readTimeout", "var_name": "readTimeout"}, {"original_string": "private final IClientConfig clientConfig;", "modifier": "private final", "type": "IClientConfig", "declarator": "clientConfig", "var_name": "clientConfig"}, {"original_string": "private final Set<Integer> retryableStatusCodes;", "modifier": "private final", "type": "Set<Integer>", "declarator": "retryableStatusCodes", "var_name": "retryableStatusCodes"}, {"original_string": "private final Boolean followRedirects;", "modifier": "private final", "type": "Boolean", "declarator": "followRedirects", "var_name": "followRedirects"}], "methods": [{"identifier": "create", "parameters": "(ILoadBalancer lb, IClientConfig clientConfig)", "modifiers": "public static", "return": "LBClient", "signature": "LBClient create(ILoadBalancer lb, IClientConfig clientConfig)", "full_signature": "public static LBClient create(ILoadBalancer lb, IClientConfig clientConfig)", "class_method_signature": "LBClient.create(ILoadBalancer lb, IClientConfig clientConfig)", "testcase": false, "constructor": false}, {"identifier": "parseStatusCodes", "parameters": "(String statusCodesString)", "modifiers": "static", "return": "Set<Integer>", "signature": "Set<Integer> parseStatusCodes(String statusCodesString)", "full_signature": "static Set<Integer> parseStatusCodes(String statusCodesString)", "class_method_signature": "LBClient.parseStatusCodes(String statusCodesString)", "testcase": false, "constructor": false}, {"identifier": "LBClient", "parameters": "(ILoadBalancer lb, IClientConfig clientConfig)", "modifiers": "", "return": "", "signature": " LBClient(ILoadBalancer lb, IClientConfig clientConfig)", "full_signature": "  LBClient(ILoadBalancer lb, IClientConfig clientConfig)", "class_method_signature": "LBClient.LBClient(ILoadBalancer lb, IClientConfig clientConfig)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(RibbonRequest request, IClientConfig configOverride)", "modifiers": "@Override public", "return": "RibbonResponse", "signature": "RibbonResponse execute(RibbonRequest request, IClientConfig configOverride)", "full_signature": "@Override public RibbonResponse execute(RibbonRequest request, IClientConfig configOverride)", "class_method_signature": "LBClient.execute(RibbonRequest request, IClientConfig configOverride)", "testcase": false, "constructor": false}, {"identifier": "getRequestSpecificRetryHandler", "parameters": "(\n                                                                    RibbonRequest request,\n                                                                    IClientConfig requestConfig)", "modifiers": "@Override public", "return": "RequestSpecificRetryHandler", "signature": "RequestSpecificRetryHandler getRequestSpecificRetryHandler(\n                                                                    RibbonRequest request,\n                                                                    IClientConfig requestConfig)", "full_signature": "@Override public RequestSpecificRetryHandler getRequestSpecificRetryHandler(\n                                                                    RibbonRequest request,\n                                                                    IClientConfig requestConfig)", "class_method_signature": "LBClient.getRequestSpecificRetryHandler(\n                                                                    RibbonRequest request,\n                                                                    IClientConfig requestConfig)", "testcase": false, "constructor": false}], "file": "ribbon/src/main/java/feign/ribbon/LBClient.java"}, "focal_method": {"identifier": "parseStatusCodes", "parameters": "(String statusCodesString)", "modifiers": "static", "return": "Set<Integer>", "body": "static Set<Integer> parseStatusCodes(String statusCodesString) {\n    if (statusCodesString == null || statusCodesString.isEmpty()) {\n      return Collections.emptySet();\n    }\n    Set<Integer> codes = new LinkedHashSet<Integer>();\n    for (String codeString : statusCodesString.split(\",\")) {\n      codes.add(Integer.parseInt(codeString));\n    }\n    return codes;\n  }", "signature": "Set<Integer> parseStatusCodes(String statusCodesString)", "full_signature": "static Set<Integer> parseStatusCodes(String statusCodesString)", "class_method_signature": "LBClient.parseStatusCodes(String statusCodesString)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "emptySet", "split", "add", "parseInt"]}, "repository": {"repo_id": 10981994, "url": "https://github.com/OpenFeign/feign", "stars": 5385, "created": "6/26/2013 11:28:16 PM +00:00", "updates": "2020-01-27T14:44:13+00:00", "fork": "False", "license": "licensed"}}