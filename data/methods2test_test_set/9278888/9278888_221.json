{"test_class": {"identifier": "WebMvcRuntimeTest", "superclass": "", "interfaces": "", "fields": [], "file": "instrumentation/spring-webmvc/src/test/java/brave/spring/webmvc/WebMvcRuntimeTest.java"}, "test_case": {"identifier": "findWebMvcRuntime_HandlerMethod_notFound", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void findWebMvcRuntime_HandlerMethod_notFound() throws Exception {\n    mockStatic(Class.class);\n    when(Class.forName(HandlerMethod.class.getName()))\n      .thenThrow(new ClassNotFoundException());\n\n    assertThat(WebMvcRuntime.findWebMvcRuntime())\n      .isInstanceOf(WebMvc25.class);\n  }", "signature": "void findWebMvcRuntime_HandlerMethod_notFound()", "full_signature": "@Test public void findWebMvcRuntime_HandlerMethod_notFound()", "class_method_signature": "WebMvcRuntimeTest.findWebMvcRuntime_HandlerMethod_notFound()", "testcase": true, "constructor": false, "invocations": ["mockStatic", "thenThrow", "when", "forName", "getName", "isInstanceOf", "assertThat", "findWebMvcRuntime"]}, "focal_class": {"identifier": "WebMvcRuntime", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final WebMvcRuntime WEBMVC_RUNTIME = findWebMvcRuntime();", "modifier": "private static final", "type": "WebMvcRuntime", "declarator": "WEBMVC_RUNTIME = findWebMvcRuntime()", "var_name": "WEBMVC_RUNTIME"}], "methods": [{"identifier": "httpTracing", "parameters": "(ApplicationContext ctx)", "modifiers": "abstract", "return": "HttpTracing", "signature": "HttpTracing httpTracing(ApplicationContext ctx)", "full_signature": "abstract HttpTracing httpTracing(ApplicationContext ctx)", "class_method_signature": "WebMvcRuntime.httpTracing(ApplicationContext ctx)", "testcase": false, "constructor": false}, {"identifier": "isHandlerMethod", "parameters": "(Object handler)", "modifiers": "abstract", "return": "boolean", "signature": "boolean isHandlerMethod(Object handler)", "full_signature": "abstract boolean isHandlerMethod(Object handler)", "class_method_signature": "WebMvcRuntime.isHandlerMethod(Object handler)", "testcase": false, "constructor": false}, {"identifier": "WebMvcRuntime", "parameters": "()", "modifiers": "", "return": "", "signature": " WebMvcRuntime()", "full_signature": "  WebMvcRuntime()", "class_method_signature": "WebMvcRuntime.WebMvcRuntime()", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "()", "modifiers": "static", "return": "WebMvcRuntime", "signature": "WebMvcRuntime get()", "full_signature": "static WebMvcRuntime get()", "class_method_signature": "WebMvcRuntime.get()", "testcase": false, "constructor": false}, {"identifier": "findWebMvcRuntime", "parameters": "()", "modifiers": "static", "return": "WebMvcRuntime", "signature": "WebMvcRuntime findWebMvcRuntime()", "full_signature": "static WebMvcRuntime findWebMvcRuntime()", "class_method_signature": "WebMvcRuntime.findWebMvcRuntime()", "testcase": false, "constructor": false}], "file": "instrumentation/spring-webmvc/src/main/java/brave/spring/webmvc/WebMvcRuntime.java"}, "focal_method": {"identifier": "findWebMvcRuntime", "parameters": "()", "modifiers": "static", "return": "WebMvcRuntime", "body": "static WebMvcRuntime findWebMvcRuntime() {\n    // Find spring-webmvc v3.1 new methods\n    try {\n      Class.forName(\"org.springframework.web.method.HandlerMethod\");\n      return new WebMvc31(); // intentionally doesn't not access the type prior to the above guard\n    } catch (ClassNotFoundException e) {\n      // pre spring-webmvc v3.1\n    }\n\n    // compatible with spring-webmvc 2.5\n    return new WebMvc25();\n  }", "signature": "WebMvcRuntime findWebMvcRuntime()", "full_signature": "static WebMvcRuntime findWebMvcRuntime()", "class_method_signature": "WebMvcRuntime.findWebMvcRuntime()", "testcase": false, "constructor": false, "invocations": ["forName"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}