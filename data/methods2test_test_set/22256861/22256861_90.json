{"test_class": {"identifier": "PixelQualitySummaryMergerTest", "superclass": "", "interfaces": "", "fields": [], "file": "s3tbx-slstr-pdu-stitching/src/test/java/org/esa/s3tbx/slstr/pdu/stitching/manifest/PixelQualitySummaryMergerTest.java"}, "test_case": {"identifier": "testMergeNodes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMergeNodes() throws Exception {\n        List<Node> fromParents = new ArrayList<>();\n        fromParents.add(ManifestTestUtils.createNode(\n                \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n                        \"            <slstr:pixelQualitySummary grid=\\\"1 km\\\">\\n\" +\n                        \"              <slstr:cosmeticPixels value=\\\"261570\\\" percentage=\\\"12.000000\\\"/>\\n\" +\n                        \"              <slstr:duplicatedPixels value=\\\"101452\\\" percentage=\\\"4.000000\\\"/>\\n\" +\n                        \"              <slstr:saturatedPixels value=\\\"0\\\" percentage=\\\"0.000000\\\"/>\\n\" +\n                        \"              <slstr:outOfRangePixels value=\\\"0\\\" percentage=\\\"0.000000\\\"/>\\n\" +\n                        \"            </slstr:pixelQualitySummary>\").getFirstChild());\n        fromParents.add(ManifestTestUtils.createNode(\n                \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n                        \"            <slstr:pixelQualitySummary grid=\\\"1 km\\\">\\n\" +\n                        \"              <slstr:cosmeticPixels value=\\\"256969\\\" percentage=\\\"11.000000\\\"/>\\n\" +\n                        \"              <slstr:duplicatedPixels value=\\\"102760\\\" percentage=\\\"4.000000\\\"/>\\n\" +\n                        \"              <slstr:saturatedPixels value=\\\"0\\\" percentage=\\\"0.000000\\\"/>\\n\" +\n                        \"              <slstr:outOfRangePixels value=\\\"0\\\" percentage=\\\"0.000000\\\"/>\\n\" +\n                        \"            </slstr:pixelQualitySummary>\").getFirstChild());\n        fromParents.add(ManifestTestUtils.createNode(\n                \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n                        \"            <slstr:pixelQualitySummary grid=\\\"1 km\\\">\\n\" +\n                        \"              <slstr:cosmeticPixels value=\\\"33256\\\" percentage=\\\"3.000000\\\"/>\\n\" +\n                        \"              <slstr:duplicatedPixels value=\\\"49677\\\" percentage=\\\"4.000000\\\"/>\\n\" +\n                        \"              <slstr:saturatedPixels value=\\\"0\\\" percentage=\\\"0.000000\\\"/>\\n\" +\n                        \"              <slstr:outOfRangePixels value=\\\"0\\\" percentage=\\\"0.000000\\\"/>\\n\" +\n                        \"            </slstr:pixelQualitySummary>\").getFirstChild());\n\n        Document manifest = ManifestTestUtils.createDocument();\n        final Element manifestElement = manifest.createElement(\"slstr:pixelQualitySummary\");\n        manifest.appendChild(manifestElement);\n\n        new PixelQualitySummaryMerger().mergeNodes(fromParents, manifestElement, manifest);\n\n        assertEquals(1, manifestElement.getAttributes().getLength());\n        assert(manifestElement.hasAttribute(\"grid\"));\n        assertEquals(\"1 km\", manifestElement.getAttribute(\"grid\"));\n\n        final NodeList childNodes = manifestElement.getChildNodes();\n        assertEquals(4, childNodes.getLength());\n        assertEquals(\"slstr:cosmeticPixels\", childNodes.item(0).getNodeName());\n        assertEquals(2, childNodes.item(0).getAttributes().getLength());\n        assert(childNodes.item(0) instanceof Element);\n        assert(((Element) childNodes.item(0)).hasAttribute(\"value\"));\n        assertEquals(\"551795\", ((Element) childNodes.item(0)).getAttribute(\"value\"));\n        assert(((Element) childNodes.item(0)).hasAttribute(\"percentage\"));\n        assertEquals(\"9.810798\", ((Element) childNodes.item(0)).getAttribute(\"percentage\"));\n\n        assertEquals(\"slstr:duplicatedPixels\", childNodes.item(1).getNodeName());\n        assertEquals(2, childNodes.item(1).getAttributes().getLength());\n        assert(childNodes.item(1) instanceof Element);\n        assert(((Element) childNodes.item(1)).hasAttribute(\"value\"));\n        assertEquals(\"253889\", ((Element) childNodes.item(1)).getAttribute(\"value\"));\n        assert(((Element) childNodes.item(1)).hasAttribute(\"percentage\"));\n        assertEquals(\"4.000000\", ((Element) childNodes.item(1)).getAttribute(\"percentage\"));\n\n        assertEquals(\"slstr:saturatedPixels\", childNodes.item(2).getNodeName());\n        assertEquals(2, childNodes.item(2).getAttributes().getLength());\n        assert(childNodes.item(2) instanceof Element);\n        assert(((Element) childNodes.item(2)).hasAttribute(\"value\"));\n        assertEquals(\"0\", ((Element) childNodes.item(2)).getAttribute(\"value\"));\n        assert(((Element) childNodes.item(2)).hasAttribute(\"percentage\"));\n        assertEquals(\"0.000000\", ((Element) childNodes.item(2)).getAttribute(\"percentage\"));\n\n        assertEquals(\"slstr:outOfRangePixels\", childNodes.item(3).getNodeName());\n        assertEquals(2, childNodes.item(2).getAttributes().getLength());\n        assert(childNodes.item(3) instanceof Element);\n        assert(((Element) childNodes.item(3)).hasAttribute(\"value\"));\n        assertEquals(\"0\", ((Element) childNodes.item(3)).getAttribute(\"value\"));\n        assert(((Element) childNodes.item(3)).hasAttribute(\"percentage\"));\n        assertEquals(\"0.000000\", ((Element) childNodes.item(3)).getAttribute(\"percentage\"));\n    }", "signature": "void testMergeNodes()", "full_signature": "@Test public void testMergeNodes()", "class_method_signature": "PixelQualitySummaryMergerTest.testMergeNodes()", "testcase": true, "constructor": false, "invocations": ["add", "getFirstChild", "createNode", "add", "getFirstChild", "createNode", "add", "getFirstChild", "createNode", "createDocument", "createElement", "appendChild", "mergeNodes", "assertEquals", "getLength", "getAttributes", "hasAttribute", "assertEquals", "getAttribute", "getChildNodes", "assertEquals", "getLength", "assertEquals", "getNodeName", "item", "assertEquals", "getLength", "getAttributes", "item", "item", "hasAttribute", "item", "assertEquals", "getAttribute", "item", "hasAttribute", "item", "assertEquals", "getAttribute", "item", "assertEquals", "getNodeName", "item", "assertEquals", "getLength", "getAttributes", "item", "item", "hasAttribute", "item", "assertEquals", "getAttribute", "item", "hasAttribute", "item", "assertEquals", "getAttribute", "item", "assertEquals", "getNodeName", "item", "assertEquals", "getLength", "getAttributes", "item", "item", "hasAttribute", "item", "assertEquals", "getAttribute", "item", "hasAttribute", "item", "assertEquals", "getAttribute", "item", "assertEquals", "getNodeName", "item", "assertEquals", "getLength", "getAttributes", "item", "item", "hasAttribute", "item", "assertEquals", "getAttribute", "item", "hasAttribute", "item", "assertEquals", "getAttribute", "item"]}, "focal_class": {"identifier": "PixelQualitySummaryMerger", "superclass": "extends AbstractElementMerger", "interfaces": "", "fields": [], "methods": [{"identifier": "mergeNodes", "parameters": "(List<Node> fromParents, Element toParent, Document toDocument)", "modifiers": "@Override public", "return": "void", "signature": "void mergeNodes(List<Node> fromParents, Element toParent, Document toDocument)", "full_signature": "@Override public void mergeNodes(List<Node> fromParents, Element toParent, Document toDocument)", "class_method_signature": "PixelQualitySummaryMerger.mergeNodes(List<Node> fromParents, Element toParent, Document toDocument)", "testcase": false, "constructor": false}, {"identifier": "getNumberFormatter", "parameters": "()", "modifiers": "private", "return": "NumberFormatter", "signature": "NumberFormatter getNumberFormatter()", "full_signature": "private NumberFormatter getNumberFormatter()", "class_method_signature": "PixelQualitySummaryMerger.getNumberFormatter()", "testcase": false, "constructor": false}, {"identifier": "collectSummaryNodes", "parameters": "(List<Node> fromParents)", "modifiers": "private", "return": "Collection<List<Node>>", "signature": "Collection<List<Node>> collectSummaryNodes(List<Node> fromParents)", "full_signature": "private Collection<List<Node>> collectSummaryNodes(List<Node> fromParents)", "class_method_signature": "PixelQualitySummaryMerger.collectSummaryNodes(List<Node> fromParents)", "testcase": false, "constructor": false}], "file": "s3tbx-slstr-pdu-stitching/src/main/java/org/esa/s3tbx/slstr/pdu/stitching/manifest/PixelQualitySummaryMerger.java"}, "focal_method": {"identifier": "mergeNodes", "parameters": "(List<Node> fromParents, Element toParent, Document toDocument)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void mergeNodes(List<Node> fromParents, Element toParent, Document toDocument) throws PDUStitchingException {\n        final String grid = fromParents.get(0).getAttributes().getNamedItem(\"grid\").getNodeValue();\n        toParent.setAttribute(\"grid\", grid);\n        final Collection<List<Node>> summaryNodesLists = collectSummaryNodes(fromParents);\n        final NumberFormatter numberFormatter = getNumberFormatter();\n        for (List<Node> summaryNodesList : summaryNodesLists) {\n            if (summaryNodesList.size() != fromParents.size()) {\n                //todo throw exception? - tf 20160216\n                continue;\n            }\n            int totalClassifiedPixels = 0;\n            int totalPixels = 0;\n            for (Node summaryNode : summaryNodesList) {\n                final NamedNodeMap summaryNodeAttributes = summaryNode.getAttributes();\n                int classifiedPixels = Integer.parseInt(summaryNodeAttributes.getNamedItem(\"value\").getNodeValue());\n                final double percentage = Double.parseDouble(summaryNodeAttributes.getNamedItem(\"percentage\").getNodeValue());\n                totalClassifiedPixels += classifiedPixels;\n                totalPixels += classifiedPixels / percentage * 100;\n            }\n            final Element summaryElement = toDocument.createElement(summaryNodesList.get(0).getNodeName());\n            summaryElement.setAttribute(\"value\", \"\" + totalClassifiedPixels);\n            if (totalPixels > 0) {\n                Double percentage = (totalClassifiedPixels / (double) totalPixels) * 100;\n                try {\n                    summaryElement.setAttribute(\"percentage\", numberFormatter.valueToString(percentage));\n                } catch (ParseException e) {\n                    throw new PDUStitchingException(\"Could not format number: \" + e.getMessage());\n                }\n            } else {\n                summaryElement.setAttribute(\"percentage\", \"0.000000\");\n            }\n            toParent.appendChild(summaryElement);\n        }\n    }", "signature": "void mergeNodes(List<Node> fromParents, Element toParent, Document toDocument)", "full_signature": "@Override public void mergeNodes(List<Node> fromParents, Element toParent, Document toDocument)", "class_method_signature": "PixelQualitySummaryMerger.mergeNodes(List<Node> fromParents, Element toParent, Document toDocument)", "testcase": false, "constructor": false, "invocations": ["getNodeValue", "getNamedItem", "getAttributes", "get", "setAttribute", "collectSummaryNodes", "getNumberFormatter", "size", "size", "getAttributes", "parseInt", "getNodeValue", "getNamedItem", "parseDouble", "getNodeValue", "getNamedItem", "createElement", "getNodeName", "get", "setAttribute", "setAttribute", "valueToString", "getMessage", "setAttribute", "appendChild"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}