{"test_class": {"identifier": "AthenzDataSourceTest", "superclass": "", "interfaces": "", "fields": [], "file": "libs/java/server_common/src/test/java/com/yahoo/athenz/common/server/db/AthenzDataSourceTest.java"}, "test_case": {"identifier": "testGetConnectionWithNetorkOption", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetConnectionWithNetorkOption() throws Exception {\n\n        System.setProperty(\"athenz.db.pool_validation_query\", \"\");\n        System.setProperty(\"athenz.datastore.network_timeout\", \"20000\");\n\n        MockConnectionFactory connectionFactory = new MockConnectionFactory();\n        Connection connection = Mockito.mock(Connection.class);\n        Mockito.when(connection.isValid(anyInt())).thenReturn(true);\n        connectionFactory.setConnection(connection);\n\n        PoolableDataSource src = DataSourceFactory.create(connectionFactory);\n        assertNotNull(src);\n\n        Connection conn = src.getConnection();\n        assertNotNull(conn);\n\n        System.clearProperty(\"athenz.db.pool_validation_query\");\n        System.clearProperty(\"athenz.datastore.network_timeout\");\n    }", "signature": "void testGetConnectionWithNetorkOption()", "full_signature": "@Test public void testGetConnectionWithNetorkOption()", "class_method_signature": "AthenzDataSourceTest.testGetConnectionWithNetorkOption()", "testcase": true, "constructor": false, "invocations": ["setProperty", "setProperty", "mock", "thenReturn", "when", "isValid", "anyInt", "setConnection", "create", "assertNotNull", "getConnection", "assertNotNull", "clearProperty", "clearProperty"]}, "focal_class": {"identifier": "AthenzDataSource", "superclass": "extends PoolingDataSource<PoolableConnection>", "interfaces": "implements PoolableDataSource", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(AthenzDataSource.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(AthenzDataSource.class)", "var_name": "LOG"}, {"original_string": "public static final String ATHENZ_PROP_DATASTORE_NETWORK_TIMEOUT = \"athenz.datastore.network_timeout\";", "modifier": "public static final", "type": "String", "declarator": "ATHENZ_PROP_DATASTORE_NETWORK_TIMEOUT = \"athenz.datastore.network_timeout\"", "var_name": "ATHENZ_PROP_DATASTORE_NETWORK_TIMEOUT"}, {"original_string": "public static final String ATHENZ_PROP_DATASTORE_TIMEOUT_THREADS = \"athenz.datastore.timeout_threads\";", "modifier": "public static final", "type": "String", "declarator": "ATHENZ_PROP_DATASTORE_TIMEOUT_THREADS = \"athenz.datastore.timeout_threads\"", "var_name": "ATHENZ_PROP_DATASTORE_TIMEOUT_THREADS"}, {"original_string": "private ScheduledExecutorService timeoutThreadPool;", "modifier": "private", "type": "ScheduledExecutorService", "declarator": "timeoutThreadPool", "var_name": "timeoutThreadPool"}, {"original_string": "private int networkTimeout;", "modifier": "private", "type": "int", "declarator": "networkTimeout", "var_name": "networkTimeout"}], "methods": [{"identifier": "AthenzDataSource", "parameters": "(ObjectPool<PoolableConnection> pool)", "modifiers": "public", "return": "", "signature": " AthenzDataSource(ObjectPool<PoolableConnection> pool)", "full_signature": "public  AthenzDataSource(ObjectPool<PoolableConnection> pool)", "class_method_signature": "AthenzDataSource.AthenzDataSource(ObjectPool<PoolableConnection> pool)", "testcase": false, "constructor": true}, {"identifier": "clearPoolConnections", "parameters": "()", "modifiers": "@Override synchronized public", "return": "void", "signature": "void clearPoolConnections()", "full_signature": "@Override synchronized public void clearPoolConnections()", "class_method_signature": "AthenzDataSource.clearPoolConnections()", "testcase": false, "constructor": false}, {"identifier": "getConnection", "parameters": "()", "modifiers": "@Override public", "return": "Connection", "signature": "Connection getConnection()", "full_signature": "@Override public Connection getConnection()", "class_method_signature": "AthenzDataSource.getConnection()", "testcase": false, "constructor": false}], "file": "libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/db/AthenzDataSource.java"}, "focal_method": {"identifier": "getConnection", "parameters": "()", "modifiers": "@Override public", "return": "Connection", "body": "@Override\n    public Connection getConnection() throws SQLException {\n        Connection conn = super.getConnection();\n        if (networkTimeout > 0) {\n            conn.setNetworkTimeout(timeoutThreadPool, networkTimeout);\n        }\n        return conn;\n    }", "signature": "Connection getConnection()", "full_signature": "@Override public Connection getConnection()", "class_method_signature": "AthenzDataSource.getConnection()", "testcase": false, "constructor": false, "invocations": ["getConnection", "setNetworkTimeout"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}