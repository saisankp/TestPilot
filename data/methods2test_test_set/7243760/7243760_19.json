{"test_class": {"identifier": "TimeFrameImplTest", "superclass": "", "interfaces": "", "fields": [], "file": "series/src/test/java/com/barchart/feed/series/TimeFrameImplTest.java"}, "test_case": {"identifier": "testIsDerivableFrom", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsDerivableFrom() {\n        \n        //////////////////////////////////////////////////////////\n        ////   First test derivable Periods (no date checks)  ////\n        //////////////////////////////////////////////////////////\n        \n        DateTime dt1 = new DateTime(2013, 12, 10, 12, 0, 0);\n        TimeFrameImpl tf1 = new TimeFrameImpl(new Period(PeriodType.TICK, 1), dt1, null);\n        \n        DateTime dt2 = new DateTime(2013, 12, 10, 12, 0, 0);\n        TimeFrameImpl tf2 = new TimeFrameImpl(new Period(PeriodType.SECOND, 1), dt2, null);\n        \n        assertTrue(tf2.isDerivableFrom(tf1));\n        assertFalse(tf1.isDerivableFrom(tf2));\n        \n        dt1 = new DateTime(2013, 12, 10, 12, 0, 0);\n        tf1 = new TimeFrameImpl(new Period(PeriodType.SECOND, 1), dt1, null);\n        \n        dt2 = new DateTime(2013, 12, 10, 12, 0, 0);\n        tf2 = new TimeFrameImpl(Period.ONE_MINUTE, dt2, null);\n        \n        assertTrue(tf2.isDerivableFrom(tf1));\n        assertFalse(tf1.isDerivableFrom(tf2));\n        \n        dt1 = new DateTime(2013, 12, 10, 12, 0, 0);\n        tf1 = new TimeFrameImpl(new Period(PeriodType.MINUTE, 1), dt1, null);\n        \n        dt2 = new DateTime(2013, 12, 10, 12, 0, 0);\n        tf2 = new TimeFrameImpl(Period.ONE_HOUR, dt2, null);\n        \n        assertTrue(tf2.isDerivableFrom(tf1));\n        assertFalse(tf1.isDerivableFrom(tf2));\n        \n        dt1 = new DateTime(2013, 12, 10, 12, 0, 0);\n        tf1 = new TimeFrameImpl(Period.ONE_HOUR, dt1, null);\n        \n        dt2 = new DateTime(2013, 12, 10, 12, 0, 0);\n        tf2 = new TimeFrameImpl(Period.DAY, dt2, null);\n        \n        assertTrue(tf2.isDerivableFrom(tf1));\n        assertFalse(tf1.isDerivableFrom(tf2));\n        \n        dt1 = new DateTime(2013, 12, 10, 12, 0, 0);\n        tf1 = new TimeFrameImpl(Period.DAY, dt1, null);\n        \n        dt2 = new DateTime(2013, 12, 10, 12, 0, 0);\n        tf2 = new TimeFrameImpl(Period.WEEK, dt2, null);\n        \n        assertTrue(tf2.isDerivableFrom(tf1));\n        assertFalse(tf1.isDerivableFrom(tf2));\n        \n        //Above pattern breaks down here - nothing can be derived from weeks\n        dt1 = new DateTime(2013, 12, 10, 12, 0, 0);\n        tf1 = new TimeFrameImpl(Period.WEEK, dt1, null);\n        \n        dt2 = new DateTime(2013, 12, 10, 12, 0, 0);\n        tf2 = new TimeFrameImpl(Period.MONTH, dt2, null);\n        \n        assertFalse(tf2.isDerivableFrom(tf1));\n        assertFalse(tf1.isDerivableFrom(tf2));\n        \n        dt1 = new DateTime(2013, 12, 10, 12, 0, 0);\n        tf1 = new TimeFrameImpl(Period.MONTH, dt1, null);\n        \n        //Pattern returns as viable her\n        dt2 = new DateTime(2013, 12, 10, 12, 0, 0);\n        tf2 = new TimeFrameImpl(Period.QUARTER, dt2, null);\n        \n        assertTrue(tf2.isDerivableFrom(tf1));\n        assertFalse(tf1.isDerivableFrom(tf2));\n        \n        dt1 = new DateTime(2013, 12, 10, 12, 0, 0);\n        tf1 = new TimeFrameImpl(Period.QUARTER, dt1, null);\n        \n        //Pattern returns as viable her\n        dt2 = new DateTime(2013, 12, 10, 12, 0, 0);\n        tf2 = new TimeFrameImpl(Period.YEAR, dt2, null);\n        \n        assertTrue(tf2.isDerivableFrom(tf1));\n        assertFalse(tf1.isDerivableFrom(tf2));\n        \n        //////////////////////////////////////////////////////////\n        ////               Test Derivable Durations           ////\n        //////////////////////////////////////////////////////////\n        //5Min derivable from 1M\n        dt1 = new DateTime(2013, 12, 10, 12, 0, 0);\n        tf1 = new TimeFrameImpl(Period.ONE_MINUTE, dt1, null);\n        \n        dt2 = new DateTime(2013, 12, 10, 12, 0, 0);\n        tf2 = new TimeFrameImpl(new Period(PeriodType.MINUTE, 5), dt2, null);\n        \n        assertTrue(tf2.isDerivableFrom(tf1));\n        \n        //5Min !Derivable from 5Min\n        dt1 = new DateTime(2013, 12, 10, 12, 0, 0);\n        tf1 = new TimeFrameImpl(new Period(PeriodType.MINUTE, 5), dt1, null);\n        \n        dt2 = new DateTime(2013, 12, 10, 12, 0, 0);\n        tf2 = new TimeFrameImpl(new Period(PeriodType.MINUTE, 5), dt2, null);\n        \n        assertTrue(tf2.isDerivableFrom(tf1));\n        \n        //10Min Derivable from 5Min *IF* 2 % 1 == 0 and startDates are same and endDate1 == null or endDates are equal\n        dt1 = new DateTime(2013, 12, 10, 12, 0, 0);\n        tf1 = new TimeFrameImpl(new Period(PeriodType.MINUTE, 5), dt1, null);\n        \n        dt2 = new DateTime(2013, 12, 10, 12, 0, 0);\n        tf2 = new TimeFrameImpl(new Period(PeriodType.MINUTE, 10), dt2, null);\n        \n        assertTrue(tf2.isDerivableFrom(tf1));\n        \n        //10Min Derivable from 5Min *IF* 2 % 1 == 0 and startDates are same and endDate1 == null or endDates are equal == (not due to 10 % 6)\n        dt1 = new DateTime(2013, 12, 10, 12, 0, 0);\n        tf1 = new TimeFrameImpl(new Period(PeriodType.MINUTE, 6), dt1, null);\n        \n        dt2 = new DateTime(2013, 12, 10, 12, 0, 0);\n        tf2 = new TimeFrameImpl(new Period(PeriodType.MINUTE, 10), dt2, null);\n        \n        assertFalse(tf2.isDerivableFrom(tf1));\n        \n        //10Min Derivable from 5Min *IF* 2 % 1 == 0 and startDates are same and endDate1 == null or endDates are equal == (not due to startDates !=)\n        dt1 = new DateTime(2013, 12, 10, 11, 0, 0);\n        tf1 = new TimeFrameImpl(new Period(PeriodType.MINUTE, 5), dt1, null);\n        \n        dt2 = new DateTime(2013, 12, 10, 12, 0, 0);\n        tf2 = new TimeFrameImpl(new Period(PeriodType.MINUTE, 10), dt2, null);\n        \n        assertFalse(tf2.isDerivableFrom(tf1));\n        \n        /////////////////// Test end date conditions ////////////////////\n        //Derive source end date is not null and derive from is --> false\n        dt1 = new DateTime(2013, 12, 10, 12, 0, 0);\n        tf1 = new TimeFrameImpl(new Period(PeriodType.MINUTE, 5), dt1, new DateTime(2013, 12, 20, 12, 0, 0));\n        \n        dt2 = new DateTime(2013, 12, 10, 12, 0, 0);\n        tf2 = new TimeFrameImpl(new Period(PeriodType.MINUTE, 10), dt2, null);\n        \n        assertFalse(tf2.isDerivableFrom(tf1));\n        \n        //Derive source end date is null and derive from is not --> true\n        dt1 = new DateTime(2013, 12, 10, 12, 0, 0);\n        tf1 = new TimeFrameImpl(new Period(PeriodType.MINUTE, 5), dt1, null);\n        \n        dt2 = new DateTime(2013, 12, 10, 12, 0, 0);\n        tf2 = new TimeFrameImpl(new Period(PeriodType.MINUTE, 10), dt2, new DateTime(2013, 12, 20, 12, 0, 0));\n        \n        assertTrue(tf2.isDerivableFrom(tf1));\n        \n        //End dates are equal --> true\n        dt1 = new DateTime(2013, 12, 10, 12, 0, 0);\n        tf1 = new TimeFrameImpl(new Period(PeriodType.MINUTE, 5), dt1, new DateTime(2013, 12, 20, 12, 0, 0));\n        \n        dt2 = new DateTime(2013, 12, 10, 12, 0, 0);\n        tf2 = new TimeFrameImpl(new Period(PeriodType.MINUTE, 10), dt2, new DateTime(2013, 12, 20, 12, 0, 0));\n        \n        assertTrue(tf2.isDerivableFrom(tf1));\n        \n        \n        //////////////////////////////////////////////////////////\n        ////                Date boundary checks              ////\n        //////////////////////////////////////////////////////////\n        //Normal - isDerivable\n        dt1 = new DateTime(2013, 12, 10, 12, 0, 0);\n        tf1 = new TimeFrameImpl(new Period(PeriodType.MINUTE, 1), dt1, null);\n        \n        dt2 = new DateTime(2013, 12, 10, 12, 0, 0);\n        tf2 = new TimeFrameImpl(new Period(PeriodType.MINUTE, 10), dt2, null);\n        \n        assertTrue(tf2.isDerivableFrom(tf1));//new DateTime(2013, 12, 30, 12, 0, 0)\n        \n        //First frame's start after 2nd causes failure\n        dt1 = new DateTime(2013, 12, 10, 13, 0, 0);\n        tf1 = new TimeFrameImpl(new Period(PeriodType.MINUTE, 1), dt1, null);\n        \n        dt2 = new DateTime(2013, 12, 10, 12, 0, 0);\n        tf2 = new TimeFrameImpl(new Period(PeriodType.MINUTE, 10), dt2, null);\n        \n        assertFalse(tf2.isDerivableFrom(tf1));\n        \n        //2nd having end date, while first has no end date, does NOT cause failure \n        dt1 = new DateTime(2013, 12, 10, 12, 0, 0);\n        tf1 = new TimeFrameImpl(new Period(PeriodType.MINUTE, 1), dt1, null);\n        \n        dt2 = new DateTime(2013, 12, 10, 12, 0, 0);\n        tf2 = new TimeFrameImpl(new Period(PeriodType.MINUTE, 10), dt2, new DateTime(2013, 12, 30, 12, 0, 0));\n        \n        assertTrue(tf2.isDerivableFrom(tf1));\n        \n        //First having end date while 2nd not having end date causes failure\n        dt1 = new DateTime(2013, 12, 10, 12, 0, 0);\n        tf1 = new TimeFrameImpl(new Period(PeriodType.MINUTE, 1), dt1, new DateTime(2013, 12, 30, 12, 0, 0));\n        \n        dt2 = new DateTime(2013, 12, 10, 12, 0, 0);\n        tf2 = new TimeFrameImpl(new Period(PeriodType.MINUTE, 10), dt2, null);\n        \n        assertFalse(tf2.isDerivableFrom(tf1));\n        \n        \n    }", "signature": "void testIsDerivableFrom()", "full_signature": "@Test public void testIsDerivableFrom()", "class_method_signature": "TimeFrameImplTest.testIsDerivableFrom()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isDerivableFrom", "assertFalse", "isDerivableFrom", "assertTrue", "isDerivableFrom", "assertFalse", "isDerivableFrom", "assertTrue", "isDerivableFrom", "assertFalse", "isDerivableFrom", "assertTrue", "isDerivableFrom", "assertFalse", "isDerivableFrom", "assertTrue", "isDerivableFrom", "assertFalse", "isDerivableFrom", "assertFalse", "isDerivableFrom", "assertFalse", "isDerivableFrom", "assertTrue", "isDerivableFrom", "assertFalse", "isDerivableFrom", "assertTrue", "isDerivableFrom", "assertFalse", "isDerivableFrom", "assertTrue", "isDerivableFrom", "assertTrue", "isDerivableFrom", "assertTrue", "isDerivableFrom", "assertFalse", "isDerivableFrom", "assertFalse", "isDerivableFrom", "assertFalse", "isDerivableFrom", "assertTrue", "isDerivableFrom", "assertTrue", "isDerivableFrom", "assertTrue", "isDerivableFrom", "assertFalse", "isDerivableFrom", "assertTrue", "isDerivableFrom", "assertFalse", "isDerivableFrom"]}, "focal_class": {"identifier": "TimeFrameImpl", "superclass": "", "interfaces": "implements TimeFrame", "fields": [{"original_string": "private Period period;", "modifier": "private", "type": "Period", "declarator": "period", "var_name": "period"}, {"original_string": "private DateTime startDate;", "modifier": "private", "type": "DateTime", "declarator": "startDate", "var_name": "startDate"}, {"original_string": "private DateTime endDate;", "modifier": "private", "type": "DateTime", "declarator": "endDate", "var_name": "endDate"}], "methods": [{"identifier": "TimeFrameImpl", "parameters": "(Period period, DateTime startDate, DateTime endDate)", "modifiers": "public", "return": "", "signature": " TimeFrameImpl(Period period, DateTime startDate, DateTime endDate)", "full_signature": "public  TimeFrameImpl(Period period, DateTime startDate, DateTime endDate)", "class_method_signature": "TimeFrameImpl.TimeFrameImpl(Period period, DateTime startDate, DateTime endDate)", "testcase": false, "constructor": true}, {"identifier": "getPeriod", "parameters": "()", "modifiers": "@Override public", "return": "Period", "signature": "Period getPeriod()", "full_signature": "@Override public Period getPeriod()", "class_method_signature": "TimeFrameImpl.getPeriod()", "testcase": false, "constructor": false}, {"identifier": "getStartDate", "parameters": "()", "modifiers": "@Override public", "return": "DateTime", "signature": "DateTime getStartDate()", "full_signature": "@Override public DateTime getStartDate()", "class_method_signature": "TimeFrameImpl.getStartDate()", "testcase": false, "constructor": false}, {"identifier": "getEndDate", "parameters": "()", "modifiers": "@Override public", "return": "DateTime", "signature": "DateTime getEndDate()", "full_signature": "@Override public DateTime getEndDate()", "class_method_signature": "TimeFrameImpl.getEndDate()", "testcase": false, "constructor": false}, {"identifier": "isDerivableFrom", "parameters": "(TimeFrame tf)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDerivableFrom(TimeFrame tf)", "full_signature": "@Override public boolean isDerivableFrom(TimeFrame tf)", "class_method_signature": "TimeFrameImpl.isDerivableFrom(TimeFrame tf)", "testcase": false, "constructor": false}, {"identifier": "areEqualOrNull", "parameters": "(DateTime otherDate, DateTime endDate2)", "modifiers": "private", "return": "boolean", "signature": "boolean areEqualOrNull(DateTime otherDate, DateTime endDate2)", "full_signature": "private boolean areEqualOrNull(DateTime otherDate, DateTime endDate2)", "class_method_signature": "TimeFrameImpl.areEqualOrNull(DateTime otherDate, DateTime endDate2)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "TimeFrameImpl.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "TimeFrameImpl.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "TimeFrameImpl.toString()", "testcase": false, "constructor": false}], "file": "series/src/main/java/com/barchart/feed/series/TimeFrameImpl.java"}, "focal_method": {"identifier": "isDerivableFrom", "parameters": "(TimeFrame tf)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean isDerivableFrom(TimeFrame tf) {\n\t\tTimeFrameImpl other = (TimeFrameImpl)tf;\n\t\tboolean retVal = false;\n\t\t\n\t\tPeriodType otherType = other.getPeriod().getPeriodType();\n\t\tPeriodType thisType = period.getPeriodType();\n        int otherDuration = other.getPeriod().size();\n        int thisDuration = getPeriod().size();\n        \n\t\tif(equals(other)) {\n\t\t\tretVal = true;\n\t\t}else{\n\t\t    if(((otherType == thisType && otherType != PeriodType.WEEK && (otherDuration == thisDuration || (thisDuration % otherDuration == 0 && other.startDate.isEqual(startDate) && areEqualOrNull(other.endDate, endDate)))) || \n\t\t        (otherType.isLowerThan(thisType) && otherType != PeriodType.WEEK  && otherDuration == 1))) {\n\t\t        retVal = true;\n            }\n    \t\t\n\t\t    //Use the highest resolution type to create comparison resolution instances.\n\t\t    //(i.e. July being > May is more significant than 4:30 > 2:00)\n\t\t    PeriodType resolutionDeterminer = otherType.isLowerThan(thisType) ? thisType : otherType;\n    \t\tif(resolutionDeterminer.resolutionInstant(other.startDate).isAfter(resolutionDeterminer.resolutionInstant(startDate))) {\n    \t\t\tretVal = false;\n    \t\t}\n    \t\t\n    \t\tif((other.endDate != null && endDate == null) || ((other.endDate != null && endDate != null) && \n    \t\t    resolutionDeterminer.resolutionInstant(other.endDate).isAfter(resolutionDeterminer.resolutionInstant(endDate)))) {\n    \t\t    retVal = false;\n    \t\t}\n\t\t}\n\t\t\n\t\treturn retVal;\n\t}", "signature": "boolean isDerivableFrom(TimeFrame tf)", "full_signature": "@Override public boolean isDerivableFrom(TimeFrame tf)", "class_method_signature": "TimeFrameImpl.isDerivableFrom(TimeFrame tf)", "testcase": false, "constructor": false, "invocations": ["getPeriodType", "getPeriod", "getPeriodType", "size", "getPeriod", "size", "getPeriod", "equals", "isEqual", "areEqualOrNull", "isLowerThan", "isLowerThan", "isAfter", "resolutionInstant", "resolutionInstant", "isAfter", "resolutionInstant", "resolutionInstant"]}, "repository": {"repo_id": 7243760, "url": "https://github.com/barchart/barchart-feed", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 6, "size": 64172, "license": "licensed"}}