{"test_class": {"identifier": "SerialNumberTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static Random RANDOM = new Random();", "modifier": "private final static", "type": "Random", "declarator": "RANDOM = new Random()", "var_name": "RANDOM"}], "file": "rpki-rtr-server/src/test/java/net/ripe/rpki/rtr/domain/SerialNumberTest.java"}, "test_case": {"identifier": "should_be_before_not_after", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_be_before_not_after() {\n        assertThat(SerialNumber.of(0).isBefore(SerialNumber.of(0))).isFalse();\n        assertThat(SerialNumber.of(Integer.MAX_VALUE).isBefore(SerialNumber.of(Integer.MAX_VALUE))).isFalse();\n\n        assertBefore(SerialNumber.of(0), SerialNumber.of(1));\n        assertBefore(SerialNumber.of(Integer.MAX_VALUE - 1), SerialNumber.of(Integer.MAX_VALUE));\n        assertBefore(SerialNumber.of(Integer.MIN_VALUE - 1), SerialNumber.of(Integer.MIN_VALUE));\n\n        for (int i = 0; i < 1000; ++i) {\n            int n = RANDOM.nextInt();\n            assertThat(SerialNumber.of(n).isBefore(SerialNumber.of(n))).isFalse();\n            assertBefore(SerialNumber.of(n), SerialNumber.of(n + 1));\n            assertBefore(SerialNumber.of(n - 1), SerialNumber.of(n));\n            assertBefore(SerialNumber.of(n), SerialNumber.of(n + Integer.MAX_VALUE));\n\n            int d = 1 + RANDOM.nextInt((int) (SerialNumber.HALF_SERIAL_NUMBER_RANGE - 1));\n            assertBefore(SerialNumber.of(n - d), SerialNumber.of(n));\n            assertBefore(SerialNumber.of(n), SerialNumber.of(n + d));\n        }\n    }", "signature": "void should_be_before_not_after()", "full_signature": "@Test public void should_be_before_not_after()", "class_method_signature": "SerialNumberTest.should_be_before_not_after()", "testcase": true, "constructor": false, "invocations": ["isFalse", "assertThat", "isBefore", "of", "of", "isFalse", "assertThat", "isBefore", "of", "of", "assertBefore", "of", "of", "assertBefore", "of", "of", "assertBefore", "of", "of", "nextInt", "isFalse", "assertThat", "isBefore", "of", "of", "assertBefore", "of", "of", "assertBefore", "of", "of", "assertBefore", "of", "of", "nextInt", "assertBefore", "of", "of", "assertBefore", "of", "of"]}, "focal_class": {"identifier": "SerialNumber", "superclass": "", "interfaces": "implements Comparable<SerialNumber>", "fields": [{"original_string": "public static final int SERIAL_BITS = 32;", "modifier": "public static final", "type": "int", "declarator": "SERIAL_BITS = 32", "var_name": "SERIAL_BITS"}, {"original_string": "public static final long HALF_SERIAL_NUMBER_RANGE = (1L << (SERIAL_BITS - 1));", "modifier": "public static final", "type": "long", "declarator": "HALF_SERIAL_NUMBER_RANGE = (1L << (SERIAL_BITS - 1))", "var_name": "HALF_SERIAL_NUMBER_RANGE"}, {"original_string": "private static final SerialNumber ZERO = SerialNumber.of((short) 0);", "modifier": "private static final", "type": "SerialNumber", "declarator": "ZERO = SerialNumber.of((short) 0)", "var_name": "ZERO"}, {"original_string": "private final int value;", "modifier": "private final", "type": "int", "declarator": "value", "var_name": "value"}], "methods": [{"identifier": "zero", "parameters": "()", "modifiers": "public static", "return": "SerialNumber", "signature": "SerialNumber zero()", "full_signature": "public static SerialNumber zero()", "class_method_signature": "SerialNumber.zero()", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "public", "return": "SerialNumber", "signature": "SerialNumber next()", "full_signature": "public SerialNumber next()", "class_method_signature": "SerialNumber.next()", "testcase": false, "constructor": false}, {"identifier": "previous", "parameters": "()", "modifiers": "public", "return": "SerialNumber", "signature": "SerialNumber previous()", "full_signature": "public SerialNumber previous()", "class_method_signature": "SerialNumber.previous()", "testcase": false, "constructor": false}, {"identifier": "isBefore", "parameters": "(SerialNumber that)", "modifiers": "public", "return": "boolean", "signature": "boolean isBefore(SerialNumber that)", "full_signature": "public boolean isBefore(SerialNumber that)", "class_method_signature": "SerialNumber.isBefore(SerialNumber that)", "testcase": false, "constructor": false}, {"identifier": "isAfter", "parameters": "(SerialNumber that)", "modifiers": "public", "return": "boolean", "signature": "boolean isAfter(SerialNumber that)", "full_signature": "public boolean isAfter(SerialNumber that)", "class_method_signature": "SerialNumber.isAfter(SerialNumber that)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(SerialNumber that)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(SerialNumber that)", "full_signature": "@Override public int compareTo(SerialNumber that)", "class_method_signature": "SerialNumber.compareTo(SerialNumber that)", "testcase": false, "constructor": false}], "file": "rpki-rtr-server/src/main/java/net/ripe/rpki/rtr/domain/SerialNumber.java"}, "focal_method": {"identifier": "isBefore", "parameters": "(SerialNumber that)", "modifiers": "public", "return": "boolean", "body": "public boolean isBefore(SerialNumber that) {\n        long i1 = Integer.toUnsignedLong(this.value);\n        long i2 = Integer.toUnsignedLong(that.value);\n        return (this.value != that.value && (\n            i1 < i2 && (i2 - i1) < HALF_SERIAL_NUMBER_RANGE\n                || i1 > i2 && (i1 - i2) > HALF_SERIAL_NUMBER_RANGE\n        ));\n    }", "signature": "boolean isBefore(SerialNumber that)", "full_signature": "public boolean isBefore(SerialNumber that)", "class_method_signature": "SerialNumber.isBefore(SerialNumber that)", "testcase": false, "constructor": false, "invocations": ["toUnsignedLong", "toUnsignedLong"]}, "repository": {"repo_id": 104217624, "url": "https://github.com/RIPE-NCC/rpki-validator-3", "stars": 32, "created": "9/20/2017 1:15:05 PM +00:00", "updates": "2020-01-27T10:48:38+00:00", "fork": "False", "license": "licensed"}}