{"test_class": {"identifier": "BeanUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/common/src/test/java/com/alipay/sofa/rpc/common/utils/BeanUtilsTest.java"}, "test_case": {"identifier": "testCopyProptertiesToMap", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCopyProptertiesToMap() throws Exception {\n        TestBean config = new TestBean();\n        config.setAlias(\"1111aaaa\");\n        Map<String, Object> map = new HashMap<String, Object>();\n        BeanUtils.copyPropertiesToMap(config, \"\", map);\n        Assert.assertTrue(map.size() > 0);\n        Assert.assertEquals(map.get(\"alias\"), \"1111aaaa\");\n    }", "signature": "void testCopyProptertiesToMap()", "full_signature": "@Test public void testCopyProptertiesToMap()", "class_method_signature": "BeanUtilsTest.testCopyProptertiesToMap()", "testcase": true, "constructor": false, "invocations": ["setAlias", "copyPropertiesToMap", "assertTrue", "size", "assertEquals", "get"]}, "focal_class": {"identifier": "BeanUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "setProperty", "parameters": "(Object bean, String name, Class<T> clazz, T value)", "modifiers": "public static", "return": "void", "signature": "void setProperty(Object bean, String name, Class<T> clazz, T value)", "full_signature": "public static void setProperty(Object bean, String name, Class<T> clazz, T value)", "class_method_signature": "BeanUtils.setProperty(Object bean, String name, Class<T> clazz, T value)", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "(Object bean, String name, Class<T> clazz)", "modifiers": "public static", "return": "T", "signature": "T getProperty(Object bean, String name, Class<T> clazz)", "full_signature": "public static T getProperty(Object bean, String name, Class<T> clazz)", "class_method_signature": "BeanUtils.getProperty(Object bean, String name, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "copyPropertiesToMap", "parameters": "(Object bean, String prefix, Map<String, Object> map)", "modifiers": "public static", "return": "void", "signature": "void copyPropertiesToMap(Object bean, String prefix, Map<String, Object> map)", "full_signature": "public static void copyPropertiesToMap(Object bean, String prefix, Map<String, Object> map)", "class_method_signature": "BeanUtils.copyPropertiesToMap(Object bean, String prefix, Map<String, Object> map)", "testcase": false, "constructor": false}, {"identifier": "copyProperties", "parameters": "(Object src, Object dst, String... ignoreFields)", "modifiers": "public static", "return": "void", "signature": "void copyProperties(Object src, Object dst, String... ignoreFields)", "full_signature": "public static void copyProperties(Object src, Object dst, String... ignoreFields)", "class_method_signature": "BeanUtils.copyProperties(Object src, Object dst, String... ignoreFields)", "testcase": false, "constructor": false}, {"identifier": "getModifiedFields", "parameters": "(T src, T dst, String... ignoreFields)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getModifiedFields(T src, T dst, String... ignoreFields)", "full_signature": "public static List<String> getModifiedFields(T src, T dst, String... ignoreFields)", "class_method_signature": "BeanUtils.getModifiedFields(T src, T dst, String... ignoreFields)", "testcase": false, "constructor": false}], "file": "core/common/src/main/java/com/alipay/sofa/rpc/common/utils/BeanUtils.java"}, "focal_method": {"identifier": "copyPropertiesToMap", "parameters": "(Object bean, String prefix, Map<String, Object> map)", "modifiers": "public static", "return": "void", "body": "public static void copyPropertiesToMap(Object bean, String prefix, Map<String, Object> map) {\n        Class clazz = bean.getClass();\n        Method[] methods = bean.getClass().getMethods();\n        for (Method method : methods) {\n            // \u590d\u5236\u5c5e\u6027\n            Class returnc = method.getReturnType();\n            if (ReflectUtils.isBeanPropertyReadMethod(method)) {\n                String propertyName = ReflectUtils.getPropertyNameFromBeanReadMethod(method);\n                try {\n                    if (ReflectUtils.getPropertySetterMethod(clazz, propertyName, returnc) == null) {\n                        continue; // \u8fd8\u9700\u8981\u6709set\u65b9\u6cd5\n                    }\n                } catch (Exception e) {\n                    continue;\n                }\n                Object val;\n                try {\n                    val = method.invoke(bean);\n                } catch (InvocationTargetException e) {\n                    throw new SofaRpcRuntimeException(\"Can't access copy \" + propertyName, e.getCause());\n                } catch (IllegalAccessException e) {\n                    throw new SofaRpcRuntimeException(\"Can't access copy \" + propertyName, e);\n                }\n                if (val != null) { // \u503c\u4e0d\u4e3a\u7a7a\uff0c\u653e\u5165\u7f13\u5b58\n                    map.put(prefix + propertyName, val);\n                }\n            }\n        }\n        Field[] fields = bean.getClass().getFields();\n        for (Field field : fields) {\n            String fieldName = field.getName();\n            if (map.containsKey(prefix + fieldName)) {\n                continue;\n            }\n            int m = field.getModifiers();\n            if (!Modifier.isStatic(m) && !Modifier.isTransient(m)) {\n                Object val = null;\n                try {\n                    if (field.isAccessible()) {\n                        val = field.get(bean);\n                    } else {\n                        try {\n                            field.setAccessible(true);\n                            val = field.get(bean);\n                        } finally {\n                            field.setAccessible(false);\n                        }\n                    }\n                } catch (IllegalAccessException e) {\n                    // LOGGER.warn(\"Can't access field\" + fieldName + \"when copy value to context\", e);\n                }\n                if (val != null) {\n                    map.put(prefix + fieldName, val);\n                }\n            }\n        }\n    }", "signature": "void copyPropertiesToMap(Object bean, String prefix, Map<String, Object> map)", "full_signature": "public static void copyPropertiesToMap(Object bean, String prefix, Map<String, Object> map)", "class_method_signature": "BeanUtils.copyPropertiesToMap(Object bean, String prefix, Map<String, Object> map)", "testcase": false, "constructor": false, "invocations": ["getClass", "getMethods", "getClass", "getReturnType", "isBeanPropertyReadMethod", "getPropertyNameFromBeanReadMethod", "getPropertySetterMethod", "invoke", "getCause", "put", "getFields", "getClass", "getName", "containsKey", "getModifiers", "isStatic", "isTransient", "isAccessible", "get", "setAccessible", "get", "setAccessible", "put"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}