{"test_class": {"identifier": "MapGraphTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static int[] laengen = new int[9];", "modifier": "private static", "type": "int[]", "declarator": "laengen = new int[9]", "var_name": "laengen"}, {"original_string": "private static MapNode[] nodes = new MapNode[12];", "modifier": "private static", "type": "MapNode[]", "declarator": "nodes = new MapNode[12]", "var_name": "nodes"}, {"original_string": "private static GPSCoordinate[] koord = new GPSCoordinate[12];", "modifier": "private static", "type": "GPSCoordinate[]", "declarator": "koord = new GPSCoordinate[12]", "var_name": "koord"}, {"original_string": "private static MapGraph testGraph;", "modifier": "private static", "type": "MapGraph", "declarator": "testGraph", "var_name": "testGraph"}, {"original_string": "private static GPSCoordinate[] graphKoord = new GPSCoordinate[4];", "modifier": "private static", "type": "GPSCoordinate[]", "declarator": "graphKoord = new GPSCoordinate[4]", "var_name": "graphKoord"}, {"original_string": "private static MapGraph failGraph;", "modifier": "private static", "type": "MapGraph", "declarator": "failGraph", "var_name": "failGraph"}], "file": "SoftwarePraktikum/src/graphenbib/MapGraphTest.java"}, "test_case": {"identifier": "testMapGraph", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testMapGraph() {\n\t//public void testMapGraph() {\n\t\t//Diese sollten funktionieren\n\t\ttry {\n\t\t\ttestGraph = new MapGraph(graphKoord[0],graphKoord[1]);\n\t\t} catch (Exception e) {\n\t\t\tfail(\"Fehler bei Graph anlegen \"+e.getLocalizedMessage());\n\t\t}\n\t\t\n\t\t//Dieser soll Fehler werfen (falsche Argumente, da verwechselt)\n\t\tboolean fehler = false;\n\t\ttry {\n\t\t\t@SuppressWarnings(\"unused\") \n\t\t\tMapGraph graphFailTest = new MapGraph(graphKoord[1],graphKoord[0]);\n\t\t} catch (Exception e) {\n\t\t\tfehler = true;\n\t\t}\n\t\tif (fehler == false) {\n\t\t\tfail(\"Konstruktor hat bei Failtest 1 keine Ausnahme geworfen\");\n\t\t}\n\t\t\n\t\t//Dieser soll Fehler werfen (ungueltige Argumente)\n\t\tfehler = false;\n\t\ttry {\n\t\t\t/*GPSCoordinate failKoord1 = new GPSCoordinate(-200,100);\n\t\t\tGPSCoordinate failKoord2 = new GPSCoordinate(200,-100);*/\n\t\t\t@SuppressWarnings(\"unused\")\n\t\t\tMapGraph graphFailTest = new MapGraph(null,null);\n\t\t} catch (Exception e) {\n\t\t\tfehler = true;\n\t\t}\n\t\tif (fehler == false) {\n\t\t\tfail(\"Konstruktor hat bei Failtest 2 keine Ausnahme geworfen\");\n\t\t}\n\t\t\n\t\t//konstruiere failGraphen\n\t\ttry {\n\t\t\tfailGraph = new MapGraph(graphKoord[2],graphKoord[3]);\n\t\t} catch (Exception e) {\n\t\t\tfail(\"fehler bei failgraph am Ende \"+e.getLocalizedMessage());\n\t\t}\n\t\t\n\t\tthis.testInsertNode();\n\t\tthis.testInsertEdgeIntIntIntFloatStreetType();\n\t\tthis.testGetNode();\n\t\tthis.testDeleteIsolatedNodes();\n\t\t\n\t}", "signature": "void testMapGraph()", "full_signature": "@Test public void testMapGraph()", "class_method_signature": "MapGraphTest.testMapGraph()", "testcase": true, "constructor": false, "invocations": ["fail", "getLocalizedMessage", "fail", "fail", "fail", "getLocalizedMessage", "testInsertNode", "testInsertEdgeIntIntIntFloatStreetType", "testGetNode", "testDeleteIsolatedNodes"]}, "focal_class": {"identifier": "MapGraph", "superclass": "", "interfaces": "implements Graph, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = -592280011176955776L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -592280011176955776L", "var_name": "serialVersionUID"}, {"original_string": "private HashMap<Integer,MapNode> nodes;", "modifier": "private", "type": "HashMap<Integer,MapNode>", "declarator": "nodes", "var_name": "nodes"}, {"original_string": "private GPSRectangle MapRectangle;", "modifier": "private", "type": "GPSRectangle", "declarator": "MapRectangle", "var_name": "MapRectangle"}, {"original_string": "private String Filename;", "modifier": "private", "type": "String", "declarator": "Filename", "var_name": "Filename"}], "methods": [{"identifier": "getFilename", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFilename()", "full_signature": "public String getFilename()", "class_method_signature": "MapGraph.getFilename()", "testcase": false, "constructor": false}, {"identifier": "setFilename", "parameters": "(String filename)", "modifiers": "public", "return": "void", "signature": "void setFilename(String filename)", "full_signature": "public void setFilename(String filename)", "class_method_signature": "MapGraph.setFilename(String filename)", "testcase": false, "constructor": false}, {"identifier": "MapGraph", "parameters": "(GPS upperLeft, GPS lowerRight)", "modifiers": "public", "return": "", "signature": " MapGraph(GPS upperLeft, GPS lowerRight)", "full_signature": "public  MapGraph(GPS upperLeft, GPS lowerRight)", "class_method_signature": "MapGraph.MapGraph(GPS upperLeft, GPS lowerRight)", "testcase": false, "constructor": true}, {"identifier": "MapGraph", "parameters": "(GPSRectangle MapRectangle)", "modifiers": "public", "return": "", "signature": " MapGraph(GPSRectangle MapRectangle)", "full_signature": "public  MapGraph(GPSRectangle MapRectangle)", "class_method_signature": "MapGraph.MapGraph(GPSRectangle MapRectangle)", "testcase": false, "constructor": true}, {"identifier": "MapGraph", "parameters": "(float top, float right, float bottom, float left)", "modifiers": "public", "return": "", "signature": " MapGraph(float top, float right, float bottom, float left)", "full_signature": "public  MapGraph(float top, float right, float bottom, float left)", "class_method_signature": "MapGraph.MapGraph(float top, float right, float bottom, float left)", "testcase": false, "constructor": true}, {"identifier": "getSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSize()", "full_signature": "public int getSize()", "class_method_signature": "MapGraph.getSize()", "testcase": false, "constructor": false}, {"identifier": "getNodeIt", "parameters": "()", "modifiers": "public", "return": "Iterator<MapNode>", "signature": "Iterator<MapNode> getNodeIt()", "full_signature": "public Iterator<MapNode> getNodeIt()", "class_method_signature": "MapGraph.getNodeIt()", "testcase": false, "constructor": false}, {"identifier": "getEdgeIt", "parameters": "()", "modifiers": "public", "return": "Iterator<MapEdge>", "signature": "Iterator<MapEdge> getEdgeIt()", "full_signature": "public Iterator<MapEdge> getEdgeIt()", "class_method_signature": "MapGraph.getEdgeIt()", "testcase": false, "constructor": false}, {"identifier": "insertNode", "parameters": "(int uid, GPSCoordinate gps)", "modifiers": "public", "return": "void", "signature": "void insertNode(int uid, GPSCoordinate gps)", "full_signature": "public void insertNode(int uid, GPSCoordinate gps)", "class_method_signature": "MapGraph.insertNode(int uid, GPSCoordinate gps)", "testcase": false, "constructor": false}, {"identifier": "insertNodeWithoutGPS", "parameters": "(int uid)", "modifiers": "public", "return": "void", "signature": "void insertNodeWithoutGPS(int uid)", "full_signature": "public void insertNodeWithoutGPS(int uid)", "class_method_signature": "MapGraph.insertNodeWithoutGPS(int uid)", "testcase": false, "constructor": false}, {"identifier": "insertOneWay", "parameters": "(int startNodeUID, int endNodeUID, int wayID, int length, StreetType streetType, String name)", "modifiers": "public", "return": "void", "signature": "void insertOneWay(int startNodeUID, int endNodeUID, int wayID, int length, StreetType streetType, String name)", "full_signature": "public void insertOneWay(int startNodeUID, int endNodeUID, int wayID, int length, StreetType streetType, String name)", "class_method_signature": "MapGraph.insertOneWay(int startNodeUID, int endNodeUID, int wayID, int length, StreetType streetType, String name)", "testcase": false, "constructor": false}, {"identifier": "insertEdgeBothDirections", "parameters": "(int startNodeUID, int endNodeUID, int wayID, int length, StreetType streetType, String name)", "modifiers": "public", "return": "void", "signature": "void insertEdgeBothDirections(int startNodeUID, int endNodeUID, int wayID, int length, StreetType streetType, String name)", "full_signature": "public void insertEdgeBothDirections(int startNodeUID, int endNodeUID, int wayID, int length, StreetType streetType, String name)", "class_method_signature": "MapGraph.insertEdgeBothDirections(int startNodeUID, int endNodeUID, int wayID, int length, StreetType streetType, String name)", "testcase": false, "constructor": false}, {"identifier": "insertEdge", "parameters": "(int startNodeUID, int endNodeUID, int wayID, int length, StreetType streetType)", "modifiers": "public", "return": "void", "signature": "void insertEdge(int startNodeUID, int endNodeUID, int wayID, int length, StreetType streetType)", "full_signature": "public void insertEdge(int startNodeUID, int endNodeUID, int wayID, int length, StreetType streetType)", "class_method_signature": "MapGraph.insertEdge(int startNodeUID, int endNodeUID, int wayID, int length, StreetType streetType)", "testcase": false, "constructor": false}, {"identifier": "insertEdge", "parameters": "(int startNodeUID, int endNodeUID, int wayID, int length, StreetType streetType, String name)", "modifiers": "public", "return": "void", "signature": "void insertEdge(int startNodeUID, int endNodeUID, int wayID, int length, StreetType streetType, String name)", "full_signature": "public void insertEdge(int startNodeUID, int endNodeUID, int wayID, int length, StreetType streetType, String name)", "class_method_signature": "MapGraph.insertEdge(int startNodeUID, int endNodeUID, int wayID, int length, StreetType streetType, String name)", "testcase": false, "constructor": false}, {"identifier": "insertEdge", "parameters": "(int startNodeUID, int endNodeUID, int wayID, int length, StreetType streetType, String name, boolean oneWay)", "modifiers": "private", "return": "void", "signature": "void insertEdge(int startNodeUID, int endNodeUID, int wayID, int length, StreetType streetType, String name, boolean oneWay)", "full_signature": "private void insertEdge(int startNodeUID, int endNodeUID, int wayID, int length, StreetType streetType, String name, boolean oneWay)", "class_method_signature": "MapGraph.insertEdge(int startNodeUID, int endNodeUID, int wayID, int length, StreetType streetType, String name, boolean oneWay)", "testcase": false, "constructor": false}, {"identifier": "getClosestNode", "parameters": "(GPSCoordinate gps)", "modifiers": "public", "return": "MapNode", "signature": "MapNode getClosestNode(GPSCoordinate gps)", "full_signature": "public MapNode getClosestNode(GPSCoordinate gps)", "class_method_signature": "MapGraph.getClosestNode(GPSCoordinate gps)", "testcase": false, "constructor": false}, {"identifier": "deleteIsolatedNodes", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void deleteIsolatedNodes()", "full_signature": "public void deleteIsolatedNodes()", "class_method_signature": "MapGraph.deleteIsolatedNodes()", "testcase": false, "constructor": false}, {"identifier": "exportToHierachyGraph", "parameters": "(HierarchyMapGraph hGraph)", "modifiers": "public", "return": "HierarchyMapGraph", "signature": "HierarchyMapGraph exportToHierachyGraph(HierarchyMapGraph hGraph)", "full_signature": "public HierarchyMapGraph exportToHierachyGraph(HierarchyMapGraph hGraph)", "class_method_signature": "MapGraph.exportToHierachyGraph(HierarchyMapGraph hGraph)", "testcase": false, "constructor": false}, {"identifier": "getNode", "parameters": "(int uid)", "modifiers": "public", "return": "MapNode", "signature": "MapNode getNode(int uid)", "full_signature": "public MapNode getNode(int uid)", "class_method_signature": "MapGraph.getNode(int uid)", "testcase": false, "constructor": false}, {"identifier": "getRect", "parameters": "()", "modifiers": "public", "return": "GPSRectangle", "signature": "GPSRectangle getRect()", "full_signature": "public GPSRectangle getRect()", "class_method_signature": "MapGraph.getRect()", "testcase": false, "constructor": false}, {"identifier": "getUpperLeft", "parameters": "()", "modifiers": "public", "return": "GPS", "signature": "GPS getUpperLeft()", "full_signature": "public GPS getUpperLeft()", "class_method_signature": "MapGraph.getUpperLeft()", "testcase": false, "constructor": false}, {"identifier": "getLowerRight", "parameters": "()", "modifiers": "public", "return": "GPS", "signature": "GPS getLowerRight()", "full_signature": "public GPS getLowerRight()", "class_method_signature": "MapGraph.getLowerRight()", "testcase": false, "constructor": false}, {"identifier": "correctLength", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void correctLength()", "full_signature": "public void correctLength()", "class_method_signature": "MapGraph.correctLength()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "MapGraph.toString()", "testcase": false, "constructor": false}], "file": "SoftwarePraktikum/src/graphenbib/MapGraph.java"}, "focal_method": {"identifier": "MapGraph", "parameters": "(GPS upperLeft, GPS lowerRight)", "modifiers": "public", "return": "", "body": "public MapGraph(GPS upperLeft, GPS lowerRight) throws EmptyInputException, InvalidInputException, InvalidGPSCoordinateException\n    {\n\t    GPSRectangle MapRect = new GPSRectangle(upperLeft,lowerRight);\n\t    //new MapGraph(MapRect);\n\t\tthis.MapRectangle = MapRect;\n\t\tnodes=new HashMap<Integer,MapNode>();\n\t    \n    }", "signature": " MapGraph(GPS upperLeft, GPS lowerRight)", "full_signature": "public  MapGraph(GPS upperLeft, GPS lowerRight)", "class_method_signature": "MapGraph.MapGraph(GPS upperLeft, GPS lowerRight)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 3716960, "url": "https://github.com/auxua/SWP-Routenplaner", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 5, "size": 13806, "license": "licensed"}}