{"test_class": {"identifier": "TestRequestTargetAuthentication", "superclass": "", "interfaces": "", "fields": [], "file": "external_sources/httpclient-4.1.1/httpclient/src/test/java/org/apache/ogt/http/client/protocol/TestRequestTargetAuthentication.java"}, "test_case": {"identifier": "testAuthStateNotSet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAuthStateNotSet() throws Exception {\n        HttpRequest request = new BasicHttpRequest(\"GET\", \"/\");\n        HttpContext context = new BasicHttpContext();\n\n        context.setAttribute(ClientContext.TARGET_AUTH_STATE, null);\n\n        HttpRequestInterceptor interceptor = new RequestTargetAuthentication();\n        interceptor.process(request, context);\n        Header header = request.getFirstHeader(AUTH.WWW_AUTH_RESP);\n        Assert.assertNull(header);\n    }", "signature": "void testAuthStateNotSet()", "full_signature": "@Test public void testAuthStateNotSet()", "class_method_signature": "TestRequestTargetAuthentication.testAuthStateNotSet()", "testcase": true, "constructor": false, "invocations": ["setAttribute", "process", "getFirstHeader", "assertNull"]}, "focal_class": {"identifier": "RequestTargetAuthentication", "superclass": "", "interfaces": "implements HttpRequestInterceptor", "fields": [{"original_string": "private final Log log = LogFactory.getLog(getClass());", "modifier": "private final", "type": "Log", "declarator": "log = LogFactory.getLog(getClass())", "var_name": "log"}], "methods": [{"identifier": "RequestTargetAuthentication", "parameters": "()", "modifiers": "public", "return": "", "signature": " RequestTargetAuthentication()", "full_signature": "public  RequestTargetAuthentication()", "class_method_signature": "RequestTargetAuthentication.RequestTargetAuthentication()", "testcase": false, "constructor": true}, {"identifier": "process", "parameters": "(final HttpRequest request, final HttpContext context)", "modifiers": "@SuppressWarnings(\"deprecation\") public", "return": "void", "signature": "void process(final HttpRequest request, final HttpContext context)", "full_signature": "@SuppressWarnings(\"deprecation\") public void process(final HttpRequest request, final HttpContext context)", "class_method_signature": "RequestTargetAuthentication.process(final HttpRequest request, final HttpContext context)", "testcase": false, "constructor": false}], "file": "external_sources/httpclient-4.1.1/httpclient/src/main/java/org/apache/ogt/http/client/protocol/RequestTargetAuthentication.java"}, "focal_method": {"identifier": "process", "parameters": "(final HttpRequest request, final HttpContext context)", "modifiers": "@SuppressWarnings(\"deprecation\") public", "return": "void", "body": "@SuppressWarnings(\"deprecation\")\n    public void process(final HttpRequest request, final HttpContext context)\n            throws HttpException, IOException {\n        if (request == null) {\n            throw new IllegalArgumentException(\"HTTP request may not be null\");\n        }\n        if (context == null) {\n            throw new IllegalArgumentException(\"HTTP context may not be null\");\n        }\n\n        String method = request.getRequestLine().getMethod();\n        if (method.equalsIgnoreCase(\"CONNECT\")) {\n            return;\n        }\n\n        if (request.containsHeader(AUTH.WWW_AUTH_RESP)) {\n            return;\n        }\n\n        // Obtain authentication state\n        AuthState authState = (AuthState) context.getAttribute(\n                ClientContext.TARGET_AUTH_STATE);\n        if (authState == null) {\n            this.log.debug(\"Target auth state not set in the context\");\n            return;\n        }\n\n        AuthScheme authScheme = authState.getAuthScheme();\n        if (authScheme == null) {\n            return;\n        }\n\n        Credentials creds = authState.getCredentials();\n        if (creds == null) {\n            this.log.debug(\"User credentials not available\");\n            return;\n        }\n\n        if (authState.getAuthScope() != null || !authScheme.isConnectionBased()) {\n            try {\n                Header header;\n                if (authScheme instanceof ContextAwareAuthScheme) {\n                    header = ((ContextAwareAuthScheme) authScheme).authenticate(\n                            creds, request, context);\n                } else {\n                    header = authScheme.authenticate(creds, request);\n                }\n                request.addHeader(header);\n            } catch (AuthenticationException ex) {\n                if (this.log.isErrorEnabled()) {\n                    this.log.error(\"Authentication error: \" + ex.getMessage());\n                }\n            }\n        }\n    }", "signature": "void process(final HttpRequest request, final HttpContext context)", "full_signature": "@SuppressWarnings(\"deprecation\") public void process(final HttpRequest request, final HttpContext context)", "class_method_signature": "RequestTargetAuthentication.process(final HttpRequest request, final HttpContext context)", "testcase": false, "constructor": false, "invocations": ["getMethod", "getRequestLine", "equalsIgnoreCase", "containsHeader", "getAttribute", "debug", "getAuthScheme", "getCredentials", "debug", "getAuthScope", "isConnectionBased", "authenticate", "authenticate", "addHeader", "isErrorEnabled", "error", "getMessage"]}, "repository": {"repo_id": 3384018, "url": "https://github.com/f8full/open-bixi-gpstracker", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 5, "size": 2028, "license": "licensed"}}