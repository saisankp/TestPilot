{"test_class": {"identifier": "ActorReceiverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Queue receiverQueueMock;", "modifier": "private", "type": "Queue", "declarator": "receiverQueueMock", "var_name": "receiverQueueMock"}, {"original_string": "private AtomicBoolean receiverFlag;", "modifier": "private", "type": "AtomicBoolean", "declarator": "receiverFlag", "var_name": "receiverFlag"}, {"original_string": "private IMessageReceiver childReceiverMock;", "modifier": "private", "type": "IMessageReceiver", "declarator": "childReceiverMock", "var_name": "childReceiverMock"}, {"original_string": "private IMessageProcessor processorMock;", "modifier": "private", "type": "IMessageProcessor", "declarator": "processorMock", "var_name": "processorMock"}], "file": "CoreFeatures/MessageProcessing/ActorReceiver/src/test/java/info/smart_tools/smartactors/message_processing/actor_receiver/ActorReceiverTest.java"}, "test_case": {"identifier": "Should_executeReceiverImmediately_When_ActorIsNotBusy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void Should_executeReceiverImmediately_When_ActorIsNotBusy()\n            throws Exception {\n        receiverFlag.set(false);\n\n        doAnswer(invocationOnMock -> {\n            assertTrue(receiverFlag.get());\n            return null;\n        }).when(childReceiverMock).receive(any());\n\n        when(receiverQueueMock.isEmpty()).thenReturn(true);\n\n        ActorReceiver actorReceiver = new ActorReceiver(childReceiverMock);\n\n        actorReceiver.receive(processorMock);\n\n        verify(childReceiverMock).receive(same(processorMock));\n    }", "signature": "void Should_executeReceiverImmediately_When_ActorIsNotBusy()", "full_signature": "@Test public void Should_executeReceiverImmediately_When_ActorIsNotBusy()", "class_method_signature": "ActorReceiverTest.Should_executeReceiverImmediately_When_ActorIsNotBusy()", "testcase": true, "constructor": false, "invocations": ["set", "receive", "when", "doAnswer", "assertTrue", "get", "any", "thenReturn", "when", "isEmpty", "receive", "receive", "verify", "same"]}, "focal_class": {"identifier": "ActorReceiver", "superclass": "", "interfaces": "implements IMessageReceiver", "fields": [{"original_string": "private final Queue<IMessageProcessor> queue;", "modifier": "private final", "type": "Queue<IMessageProcessor>", "declarator": "queue", "var_name": "queue"}, {"original_string": "private final AtomicBoolean isBusy;", "modifier": "private final", "type": "AtomicBoolean", "declarator": "isBusy", "var_name": "isBusy"}, {"original_string": "private final IMessageReceiver childReceiver;", "modifier": "private final", "type": "IMessageReceiver", "declarator": "childReceiver", "var_name": "childReceiver"}], "methods": [{"identifier": "ActorReceiver", "parameters": "(final IMessageReceiver childReceiver)", "modifiers": "public", "return": "", "signature": " ActorReceiver(final IMessageReceiver childReceiver)", "full_signature": "public  ActorReceiver(final IMessageReceiver childReceiver)", "class_method_signature": "ActorReceiver.ActorReceiver(final IMessageReceiver childReceiver)", "testcase": false, "constructor": true}, {"identifier": "receive", "parameters": "(final IMessageProcessor processor)", "modifiers": "@Override public", "return": "void", "signature": "void receive(final IMessageProcessor processor)", "full_signature": "@Override public void receive(final IMessageProcessor processor)", "class_method_signature": "ActorReceiver.receive(final IMessageProcessor processor)", "testcase": false, "constructor": false}, {"identifier": "executeDelayed", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void executeDelayed()", "full_signature": "private void executeDelayed()", "class_method_signature": "ActorReceiver.executeDelayed()", "testcase": false, "constructor": false}, {"identifier": "executeOne", "parameters": "(final IMessageProcessor messageProcessor)", "modifiers": "private", "return": "void", "signature": "void executeOne(final IMessageProcessor messageProcessor)", "full_signature": "private void executeOne(final IMessageProcessor messageProcessor)", "class_method_signature": "ActorReceiver.executeOne(final IMessageProcessor messageProcessor)", "testcase": false, "constructor": false}, {"identifier": "catchCriticalException", "parameters": "(final Throwable e)", "modifiers": "private", "return": "void", "signature": "void catchCriticalException(final Throwable e)", "full_signature": "private void catchCriticalException(final Throwable e)", "class_method_signature": "ActorReceiver.catchCriticalException(final Throwable e)", "testcase": false, "constructor": false}], "file": "CoreFeatures/MessageProcessing/ActorReceiver/src/main/java/info/smart_tools/smartactors/message_processing/actor_receiver/ActorReceiver.java"}, "focal_method": {"identifier": "receive", "parameters": "(final IMessageProcessor processor)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void receive(final IMessageProcessor processor)\n            throws MessageReceiveException, AsynchronousOperationException {\n        Throwable syncException = null;\n\n        if (isBusy.compareAndSet(false, true)) {\n            try {\n                childReceiver.receive(processor);\n            } catch (Throwable e) {\n                syncException = e;\n            } finally {\n                isBusy.set(false);\n            }\n        } else {\n            processor.pauseProcess();\n            queue.add(processor);\n        }\n\n        executeDelayed();\n\n        if (null != syncException) {\n            throw new MessageReceiveException(\"Failed to execute actor receiver.\", syncException);\n        }\n    }", "signature": "void receive(final IMessageProcessor processor)", "full_signature": "@Override public void receive(final IMessageProcessor processor)", "class_method_signature": "ActorReceiver.receive(final IMessageProcessor processor)", "testcase": false, "constructor": false, "invocations": ["compareAndSet", "receive", "set", "pauseProcess", "add", "executeDelayed"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}