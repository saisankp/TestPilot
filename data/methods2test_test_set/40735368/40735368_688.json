{"test_class": {"identifier": "StyledShapePainterTest", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "modules/library/render/src/test/java/org/geotools/renderer/lite/StyledShapePainterTest.java"}, "test_case": {"identifier": "testGraphicLegend", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGraphicLegend() throws Exception {\n        \n        // Load image directly from file, for comparison with painter output\n        final URL imageURL = TestData.getResource(this, \"icon64.png\");\n        final BufferedImage testImage = ImageIO.read(imageURL);        \n        final int width = testImage.getWidth();\n        final int height = testImage.getHeight();\n        \n        // Get graphic legend from style\n        final Style style = RendererBaseTest.loadStyle(\n                this, \"testGraphicLegend.sld\");\n        final Rule rule = style.featureTypeStyles().get(0).rules().get(0);\n        final GraphicLegend legend = (GraphicLegend) rule.getLegend();\n        \n        // Paint legend using StyledShapePainter\n        final Point point = new GeometryFactory().createPoint(\n                new Coordinate(width / 2, height / 2));\n        final LiteShape2 shape = new LiteShape2(point, null, null, false);\n        \n        int imageType = testImage.getType();\n        if(imageType == BufferedImage.TYPE_CUSTOM) {\n            imageType = BufferedImage.TYPE_INT_RGB;\n        }\n        final BufferedImage paintedImage =\n                new BufferedImage(width, height, imageType);\n        final Graphics2D graphics = paintedImage.createGraphics();\n        final StyledShapePainter painter = new StyledShapePainter();\n        painter.paint(graphics, shape, legend, 1, false);\n        graphics.dispose();\n        \n        // Ensure painted legend matches image from file\n        Assert.assertTrue(imagesIdentical(paintedImage, testImage));\n    }", "signature": "void testGraphicLegend()", "full_signature": "@Test public void testGraphicLegend()", "class_method_signature": "StyledShapePainterTest.testGraphicLegend()", "testcase": true, "constructor": false, "invocations": ["getResource", "read", "getWidth", "getHeight", "loadStyle", "get", "rules", "get", "featureTypeStyles", "getLegend", "createPoint", "getType", "createGraphics", "paint", "dispose", "assertTrue", "imagesIdentical"]}, "focal_class": {"identifier": "StyledShapePainter", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final static Key TEXTURE_ANCHOR_HINT_KEY = new TextureAnchorKey();", "modifier": "public final static", "type": "Key", "declarator": "TEXTURE_ANCHOR_HINT_KEY = new TextureAnchorKey()", "var_name": "TEXTURE_ANCHOR_HINT_KEY"}, {"original_string": "private final static AffineTransform IDENTITY_TRANSFORM = new AffineTransform();", "modifier": "private final static", "type": "AffineTransform", "declarator": "IDENTITY_TRANSFORM = new AffineTransform()", "var_name": "IDENTITY_TRANSFORM"}, {"original_string": "private final static Logger LOGGER = org.geotools.util.logging.Logging.getLogger(StyledShapePainter.class.getName());", "modifier": "private final static", "type": "Logger", "declarator": "LOGGER = org.geotools.util.logging.Logging.getLogger(StyledShapePainter.class.getName())", "var_name": "LOGGER"}, {"original_string": "public static boolean ROUND_ICON_COORDS = Boolean.parseBoolean(System.getProperty(\"org.geotools.renderer.lite.roundIconCoords\", \"true\"));", "modifier": "public static", "type": "boolean", "declarator": "ROUND_ICON_COORDS = Boolean.parseBoolean(System.getProperty(\"org.geotools.renderer.lite.roundIconCoords\", \"true\"))", "var_name": "ROUND_ICON_COORDS"}, {"original_string": "LabelCache labelCache;", "modifier": "", "type": "LabelCache", "declarator": "labelCache", "var_name": "labelCache"}], "methods": [{"identifier": "StyledShapePainter", "parameters": "()", "modifiers": "public", "return": "", "signature": " StyledShapePainter()", "full_signature": "public  StyledShapePainter()", "class_method_signature": "StyledShapePainter.StyledShapePainter()", "testcase": false, "constructor": true}, {"identifier": "StyledShapePainter", "parameters": "(LabelCache cache)", "modifiers": "@Deprecated public", "return": "", "signature": " StyledShapePainter(LabelCache cache)", "full_signature": "@Deprecated public  StyledShapePainter(LabelCache cache)", "class_method_signature": "StyledShapePainter.StyledShapePainter(LabelCache cache)", "testcase": false, "constructor": true}, {"identifier": "paint", "parameters": "(final Graphics2D graphics, final LiteShape2 shape,\n            final Style2D style, final double scale)", "modifiers": "public", "return": "void", "signature": "void paint(final Graphics2D graphics, final LiteShape2 shape,\n            final Style2D style, final double scale)", "full_signature": "public void paint(final Graphics2D graphics, final LiteShape2 shape,\n            final Style2D style, final double scale)", "class_method_signature": "StyledShapePainter.paint(final Graphics2D graphics, final LiteShape2 shape,\n            final Style2D style, final double scale)", "testcase": false, "constructor": false}, {"identifier": "paint", "parameters": "(final Graphics2D graphics, final LiteShape2 shape,\n            final Style2D style, final double scale, boolean isLabelObstacle)", "modifiers": "public", "return": "void", "signature": "void paint(final Graphics2D graphics, final LiteShape2 shape,\n            final Style2D style, final double scale, boolean isLabelObstacle)", "full_signature": "public void paint(final Graphics2D graphics, final LiteShape2 shape,\n            final Style2D style, final double scale, boolean isLabelObstacle)", "class_method_signature": "StyledShapePainter.paint(final Graphics2D graphics, final LiteShape2 shape,\n            final Style2D style, final double scale, boolean isLabelObstacle)", "testcase": false, "constructor": false}, {"identifier": "paint", "parameters": "(final Graphics2D graphics, final LiteShape2 shape, final GraphicLegend legend, \n            final double symbolScale, boolean isLabelObstacle)", "modifiers": "public", "return": "void", "signature": "void paint(final Graphics2D graphics, final LiteShape2 shape, final GraphicLegend legend, \n            final double symbolScale, boolean isLabelObstacle)", "full_signature": "public void paint(final Graphics2D graphics, final LiteShape2 shape, final GraphicLegend legend, \n            final double symbolScale, boolean isLabelObstacle)", "class_method_signature": "StyledShapePainter.paint(final Graphics2D graphics, final LiteShape2 shape, final GraphicLegend legend, \n            final double symbolScale, boolean isLabelObstacle)", "testcase": false, "constructor": false}, {"identifier": "dashShape", "parameters": "(Shape shape, Stroke stroke)", "modifiers": "", "return": "Shape", "signature": "Shape dashShape(Shape shape, Stroke stroke)", "full_signature": " Shape dashShape(Shape shape, Stroke stroke)", "class_method_signature": "StyledShapePainter.dashShape(Shape shape, Stroke stroke)", "testcase": false, "constructor": false}, {"identifier": "getPathIterator", "parameters": "(final LiteShape2 shape)", "modifiers": "private", "return": "PathIterator", "signature": "PathIterator getPathIterator(final LiteShape2 shape)", "full_signature": "private PathIterator getPathIterator(final LiteShape2 shape)", "class_method_signature": "StyledShapePainter.getPathIterator(final LiteShape2 shape)", "testcase": false, "constructor": false}, {"identifier": "debugShape", "parameters": "(Shape shape)", "modifiers": "", "return": "void", "signature": "void debugShape(Shape shape)", "full_signature": " void debugShape(Shape shape)", "class_method_signature": "StyledShapePainter.debugShape(Shape shape)", "testcase": false, "constructor": false}, {"identifier": "drawWithGraphicsStroke", "parameters": "(Graphics2D graphics, Shape shape, Style2D graphicStroke, \n        boolean isLabelObstacle)", "modifiers": "private", "return": "void", "signature": "void drawWithGraphicsStroke(Graphics2D graphics, Shape shape, Style2D graphicStroke, \n        boolean isLabelObstacle)", "full_signature": "private void drawWithGraphicsStroke(Graphics2D graphics, Shape shape, Style2D graphicStroke, \n        boolean isLabelObstacle)", "class_method_signature": "StyledShapePainter.drawWithGraphicsStroke(Graphics2D graphics, Shape shape, Style2D graphicStroke, \n        boolean isLabelObstacle)", "testcase": false, "constructor": false}, {"identifier": "renderImage", "parameters": "(Graphics2D graphics, double x, double y, double dx, double dy,\n            BufferedImage image, double rotation, Composite composite, boolean isLabelObstacle)", "modifiers": "private", "return": "void", "signature": "void renderImage(Graphics2D graphics, double x, double y, double dx, double dy,\n            BufferedImage image, double rotation, Composite composite, boolean isLabelObstacle)", "full_signature": "private void renderImage(Graphics2D graphics, double x, double y, double dx, double dy,\n            BufferedImage image, double rotation, Composite composite, boolean isLabelObstacle)", "class_method_signature": "StyledShapePainter.renderImage(Graphics2D graphics, double x, double y, double dx, double dy,\n            BufferedImage image, double rotation, Composite composite, boolean isLabelObstacle)", "testcase": false, "constructor": false}, {"identifier": "renderGraphicsStroke", "parameters": "(Graphics2D graphics, double x, double y, Style2D style,\n            double rotation, double graphicRotation, Composite composite, boolean isLabelObstacle)", "modifiers": "private", "return": "void", "signature": "void renderGraphicsStroke(Graphics2D graphics, double x, double y, Style2D style,\n            double rotation, double graphicRotation, Composite composite, boolean isLabelObstacle)", "full_signature": "private void renderGraphicsStroke(Graphics2D graphics, double x, double y, Style2D style,\n            double rotation, double graphicRotation, Composite composite, boolean isLabelObstacle)", "class_method_signature": "StyledShapePainter.renderGraphicsStroke(Graphics2D graphics, double x, double y, Style2D style,\n            double rotation, double graphicRotation, Composite composite, boolean isLabelObstacle)", "testcase": false, "constructor": false}, {"identifier": "fillLiteShape", "parameters": "(Graphics2D g, LiteShape2 shape)", "modifiers": "", "return": "void", "signature": "void fillLiteShape(Graphics2D g, LiteShape2 shape)", "full_signature": " void fillLiteShape(Graphics2D g, LiteShape2 shape)", "class_method_signature": "StyledShapePainter.fillLiteShape(Graphics2D g, LiteShape2 shape)", "testcase": false, "constructor": false}, {"identifier": "paintGraphicFill", "parameters": "(Graphics2D graphics, Shape shape, Style2D graphicFill, double scale)", "modifiers": "private", "return": "void", "signature": "void paintGraphicFill(Graphics2D graphics, Shape shape, Style2D graphicFill, double scale)", "full_signature": "private void paintGraphicFill(Graphics2D graphics, Shape shape, Style2D graphicFill, double scale)", "class_method_signature": "StyledShapePainter.paintGraphicFill(Graphics2D graphics, Shape shape, Style2D graphicFill, double scale)", "testcase": false, "constructor": false}, {"identifier": "createStippleShape", "parameters": "(Rectangle2D stippleSize, double translateX, double translateY)", "modifiers": "private", "return": "LiteShape2", "signature": "LiteShape2 createStippleShape(Rectangle2D stippleSize, double translateX, double translateY)", "full_signature": "private LiteShape2 createStippleShape(Rectangle2D stippleSize, double translateX, double translateY)", "class_method_signature": "StyledShapePainter.createStippleShape(Rectangle2D stippleSize, double translateX, double translateY)", "testcase": false, "constructor": false}], "file": "modules/library/render/src/main/java/org/geotools/renderer/lite/StyledShapePainter.java"}, "focal_method": {"identifier": "paint", "parameters": "(final Graphics2D graphics, final LiteShape2 shape,\n            final Style2D style, final double scale)", "modifiers": "public", "return": "void", "body": "public void paint(final Graphics2D graphics, final LiteShape2 shape,\n            final Style2D style, final double scale) {\n        paint(graphics, shape, style, scale, false);\n    }", "signature": "void paint(final Graphics2D graphics, final LiteShape2 shape,\n            final Style2D style, final double scale)", "full_signature": "public void paint(final Graphics2D graphics, final LiteShape2 shape,\n            final Style2D style, final double scale)", "class_method_signature": "StyledShapePainter.paint(final Graphics2D graphics, final LiteShape2 shape,\n            final Style2D style, final double scale)", "testcase": false, "constructor": false, "invocations": ["paint"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}