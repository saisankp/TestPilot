{"test_class": {"identifier": "ControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock private AvailableChangeScriptsProvider availableChangeScriptsProvider;", "modifier": "@Mock private", "type": "AvailableChangeScriptsProvider", "declarator": "availableChangeScriptsProvider", "var_name": "availableChangeScriptsProvider"}, {"original_string": "@Mock private AppliedChangesProvider appliedChangesProvider;", "modifier": "@Mock private", "type": "AppliedChangesProvider", "declarator": "appliedChangesProvider", "var_name": "appliedChangesProvider"}, {"original_string": "private Controller controller;", "modifier": "private", "type": "Controller", "declarator": "controller", "var_name": "controller"}, {"original_string": "private ChangeScript change1;", "modifier": "private", "type": "ChangeScript", "declarator": "change1", "var_name": "change1"}, {"original_string": "private ChangeScript change2;", "modifier": "private", "type": "ChangeScript", "declarator": "change2", "var_name": "change2"}, {"original_string": "private ChangeScript change3;", "modifier": "private", "type": "ChangeScript", "declarator": "change3", "var_name": "change3"}, {"original_string": "private StubChangeScriptApplier applier = new StubChangeScriptApplier();", "modifier": "private", "type": "StubChangeScriptApplier", "declarator": "applier = new StubChangeScriptApplier()", "var_name": "applier"}, {"original_string": "private StubChangeScriptApplier undoApplier = new StubChangeScriptApplier();", "modifier": "private", "type": "StubChangeScriptApplier", "declarator": "undoApplier = new StubChangeScriptApplier()", "var_name": "undoApplier"}], "file": "dbdeploy-core/src/test/java/com/dbdeploy/ControllerTest.java"}, "test_case": {"identifier": "shouldNotApplyChangesGreaterThanTheMaxChangeToApply", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldNotApplyChangesGreaterThanTheMaxChangeToApply() throws Exception {\n\t\twhen(appliedChangesProvider.getAppliedChanges()).thenReturn(Collections.<Long>emptyList());\n\n\t\tcontroller.processChangeScripts(2L);\n\n        assertThat(applier.changeScripts.size(), is(2));\n\t\tassertThat(applier.changeScripts.get(0), is(change1));\n\t\tassertThat(applier.changeScripts.get(1), is(change2));\n\t}", "signature": "void shouldNotApplyChangesGreaterThanTheMaxChangeToApply()", "full_signature": "@Test public void shouldNotApplyChangesGreaterThanTheMaxChangeToApply()", "class_method_signature": "ControllerTest.shouldNotApplyChangesGreaterThanTheMaxChangeToApply()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getAppliedChanges", "emptyList", "processChangeScripts", "assertThat", "size", "is", "assertThat", "get", "is", "assertThat", "get", "is"]}, "focal_class": {"identifier": "Controller", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final AvailableChangeScriptsProvider availableChangeScriptsProvider;", "modifier": "private final", "type": "AvailableChangeScriptsProvider", "declarator": "availableChangeScriptsProvider", "var_name": "availableChangeScriptsProvider"}, {"original_string": "private final AppliedChangesProvider appliedChangesProvider;", "modifier": "private final", "type": "AppliedChangesProvider", "declarator": "appliedChangesProvider", "var_name": "appliedChangesProvider"}, {"original_string": "private final ChangeScriptApplier changeScriptApplier;", "modifier": "private final", "type": "ChangeScriptApplier", "declarator": "changeScriptApplier", "var_name": "changeScriptApplier"}, {"original_string": "private final ChangeScriptApplier undoScriptApplier;", "modifier": "private final", "type": "ChangeScriptApplier", "declarator": "undoScriptApplier", "var_name": "undoScriptApplier"}, {"original_string": "private final PrettyPrinter prettyPrinter = new PrettyPrinter();", "modifier": "private final", "type": "PrettyPrinter", "declarator": "prettyPrinter = new PrettyPrinter()", "var_name": "prettyPrinter"}], "methods": [{"identifier": "Controller", "parameters": "(AvailableChangeScriptsProvider availableChangeScriptsProvider,\n\t\t\t\t\t  AppliedChangesProvider appliedChangesProvider,\n\t\t\t\t\t  ChangeScriptApplier changeScriptApplier, ChangeScriptApplier undoScriptApplier)", "modifiers": "public", "return": "", "signature": " Controller(AvailableChangeScriptsProvider availableChangeScriptsProvider,\n\t\t\t\t\t  AppliedChangesProvider appliedChangesProvider,\n\t\t\t\t\t  ChangeScriptApplier changeScriptApplier, ChangeScriptApplier undoScriptApplier)", "full_signature": "public  Controller(AvailableChangeScriptsProvider availableChangeScriptsProvider,\n\t\t\t\t\t  AppliedChangesProvider appliedChangesProvider,\n\t\t\t\t\t  ChangeScriptApplier changeScriptApplier, ChangeScriptApplier undoScriptApplier)", "class_method_signature": "Controller.Controller(AvailableChangeScriptsProvider availableChangeScriptsProvider,\n\t\t\t\t\t  AppliedChangesProvider appliedChangesProvider,\n\t\t\t\t\t  ChangeScriptApplier changeScriptApplier, ChangeScriptApplier undoScriptApplier)", "testcase": false, "constructor": true}, {"identifier": "processChangeScripts", "parameters": "(Long lastChangeToApply)", "modifiers": "public", "return": "void", "signature": "void processChangeScripts(Long lastChangeToApply)", "full_signature": "public void processChangeScripts(Long lastChangeToApply)", "class_method_signature": "Controller.processChangeScripts(Long lastChangeToApply)", "testcase": false, "constructor": false}, {"identifier": "logStatus", "parameters": "(List<ChangeScript> scripts, List<Long> applied, List<ChangeScript> toApply)", "modifiers": "private", "return": "void", "signature": "void logStatus(List<ChangeScript> scripts, List<Long> applied, List<ChangeScript> toApply)", "full_signature": "private void logStatus(List<ChangeScript> scripts, List<Long> applied, List<ChangeScript> toApply)", "class_method_signature": "Controller.logStatus(List<ChangeScript> scripts, List<Long> applied, List<ChangeScript> toApply)", "testcase": false, "constructor": false}, {"identifier": "identifyChangesToApply", "parameters": "(Long lastChangeToApply, List<ChangeScript> scripts, List<Long> applied)", "modifiers": "private", "return": "List<ChangeScript>", "signature": "List<ChangeScript> identifyChangesToApply(Long lastChangeToApply, List<ChangeScript> scripts, List<Long> applied)", "full_signature": "private List<ChangeScript> identifyChangesToApply(Long lastChangeToApply, List<ChangeScript> scripts, List<Long> applied)", "class_method_signature": "Controller.identifyChangesToApply(Long lastChangeToApply, List<ChangeScript> scripts, List<Long> applied)", "testcase": false, "constructor": false}, {"identifier": "info", "parameters": "(String string)", "modifiers": "private", "return": "void", "signature": "void info(String string)", "full_signature": "private void info(String string)", "class_method_signature": "Controller.info(String string)", "testcase": false, "constructor": false}], "file": "dbdeploy-core/src/main/java/com/dbdeploy/Controller.java"}, "focal_method": {"identifier": "processChangeScripts", "parameters": "(Long lastChangeToApply)", "modifiers": "public", "return": "void", "body": "public void processChangeScripts(Long lastChangeToApply) throws DbDeployException, IOException {\n\t\tif (lastChangeToApply != Long.MAX_VALUE) {\n\t\t\tinfo(\"Only applying changes up and including change script #\" + lastChangeToApply);\n\t\t}\n\n\t\tList<ChangeScript> scripts = availableChangeScriptsProvider.getAvailableChangeScripts();\n\t\tList<Long> applied = appliedChangesProvider.getAppliedChanges();\n\t\tList<ChangeScript> toApply = identifyChangesToApply(lastChangeToApply, scripts, applied);\n\n\t\tlogStatus(scripts, applied, toApply);\n\n        changeScriptApplier.apply(Collections.unmodifiableList(toApply));\n\n        if (undoScriptApplier != null) {\n\t\t\tinfo(\"Generating undo scripts...\");\n\t\t\tCollections.reverse(toApply);\n            undoScriptApplier.apply(Collections.unmodifiableList(toApply));\n        }\n\t}", "signature": "void processChangeScripts(Long lastChangeToApply)", "full_signature": "public void processChangeScripts(Long lastChangeToApply)", "class_method_signature": "Controller.processChangeScripts(Long lastChangeToApply)", "testcase": false, "constructor": false, "invocations": ["info", "getAvailableChangeScripts", "getAppliedChanges", "identifyChangesToApply", "logStatus", "apply", "unmodifiableList", "info", "reverse", "apply", "unmodifiableList"]}, "repository": {"repo_id": 145875, "url": "https://github.com/tackley/dbdeploy", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 64, "size": 7295, "license": "licensed"}}