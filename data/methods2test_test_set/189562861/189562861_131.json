{"test_class": {"identifier": "AbstractRegistryFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RegistryFactory registryFactory = new AbstractRegistryFactory() {\n\n        @Override\n        protected Registry createRegistry(final URL url) {\n            return new Registry() {\n\n                public URL getUrl() {\n                    return url;\n                }\n\n                @Override\n                public boolean isAvailable() {\n                    return false;\n                }\n\n                @Override\n                public void destroy() {\n                }\n\n                @Override\n                public void register(URL url) {\n                }\n\n                @Override\n                public void unregister(URL url) {\n                }\n\n                @Override\n                public void subscribe(URL url, NotifyListener listener) {\n                }\n\n                @Override\n                public void unsubscribe(URL url, NotifyListener listener) {\n                }\n\n                @Override\n                public List<URL> lookup(URL url) {\n                    return null;\n                }\n\n            };\n        }\n    };", "modifier": "private", "type": "RegistryFactory", "declarator": "registryFactory = new AbstractRegistryFactory() {\n\n        @Override\n        protected Registry createRegistry(final URL url) {\n            return new Registry() {\n\n                public URL getUrl() {\n                    return url;\n                }\n\n                @Override\n                public boolean isAvailable() {\n                    return false;\n                }\n\n                @Override\n                public void destroy() {\n                }\n\n                @Override\n                public void register(URL url) {\n                }\n\n                @Override\n                public void unregister(URL url) {\n                }\n\n                @Override\n                public void subscribe(URL url, NotifyListener listener) {\n                }\n\n                @Override\n                public void unsubscribe(URL url, NotifyListener listener) {\n                }\n\n                @Override\n                public List<URL> lookup(URL url) {\n                    return null;\n                }\n\n            };\n        }\n    }", "var_name": "registryFactory"}], "file": "dubbo-registry/dubbo-registry-api/src/test/java/com/alibaba/dubbo/registry/support/AbstractRegistryFactoryTest.java"}, "test_case": {"identifier": "testRegistryFactoryGroupCache", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRegistryFactoryGroupCache() throws Exception {\n        Registry registry1 = registryFactory.getRegistry(URL.valueOf(\"dubbo://\" + NetUtils.getLocalHost() + \":2233?group=aaa\"));\n        Registry registry2 = registryFactory.getRegistry(URL.valueOf(\"dubbo://\" + NetUtils.getLocalHost() + \":2233?group=bbb\"));\n        Assert.assertNotSame(registry1, registry2);\n    }", "signature": "void testRegistryFactoryGroupCache()", "full_signature": "@Test public void testRegistryFactoryGroupCache()", "class_method_signature": "AbstractRegistryFactoryTest.testRegistryFactoryGroupCache()", "testcase": true, "constructor": false, "invocations": ["getRegistry", "valueOf", "getLocalHost", "getRegistry", "valueOf", "getLocalHost", "assertNotSame"]}, "focal_class": {"identifier": "AbstractRegistryFactory", "superclass": "", "interfaces": "implements RegistryFactory", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(AbstractRegistryFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(AbstractRegistryFactory.class)", "var_name": "LOGGER"}, {"original_string": "private static final ReentrantLock LOCK = new ReentrantLock();", "modifier": "private static final", "type": "ReentrantLock", "declarator": "LOCK = new ReentrantLock()", "var_name": "LOCK"}, {"original_string": "private static final Map<String, Registry> REGISTRIES = new ConcurrentHashMap<String, Registry>();", "modifier": "private static final", "type": "Map<String, Registry>", "declarator": "REGISTRIES = new ConcurrentHashMap<String, Registry>()", "var_name": "REGISTRIES"}], "methods": [{"identifier": "getRegistries", "parameters": "()", "modifiers": "public static", "return": "Collection<Registry>", "signature": "Collection<Registry> getRegistries()", "full_signature": "public static Collection<Registry> getRegistries()", "class_method_signature": "AbstractRegistryFactory.getRegistries()", "testcase": false, "constructor": false}, {"identifier": "destroyAll", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void destroyAll()", "full_signature": "public static void destroyAll()", "class_method_signature": "AbstractRegistryFactory.destroyAll()", "testcase": false, "constructor": false}, {"identifier": "getRegistry", "parameters": "(URL url)", "modifiers": "@Override public", "return": "Registry", "signature": "Registry getRegistry(URL url)", "full_signature": "@Override public Registry getRegistry(URL url)", "class_method_signature": "AbstractRegistryFactory.getRegistry(URL url)", "testcase": false, "constructor": false}, {"identifier": "createRegistry", "parameters": "(URL url)", "modifiers": "protected abstract", "return": "Registry", "signature": "Registry createRegistry(URL url)", "full_signature": "protected abstract Registry createRegistry(URL url)", "class_method_signature": "AbstractRegistryFactory.createRegistry(URL url)", "testcase": false, "constructor": false}], "file": "dubbo-registry/dubbo-registry-api/src/main/java/com/alibaba/dubbo/registry/support/AbstractRegistryFactory.java"}, "focal_method": {"identifier": "getRegistry", "parameters": "(URL url)", "modifiers": "@Override public", "return": "Registry", "body": "@Override\n    public Registry getRegistry(URL url) {\n        url = url.setPath(RegistryService.class.getName())\n                .addParameter(Constants.INTERFACE_KEY, RegistryService.class.getName())\n                .removeParameters(Constants.EXPORT_KEY, Constants.REFER_KEY);\n        String key = url.toServiceString();\n        // Lock the registry access process to ensure a single instance of the registry\n        LOCK.lock();\n        try {\n            // \u4ece REGISTRIES \u7f13\u5b58\u83b7\u53d6Registry\n            Registry registry = REGISTRIES.get(key);\n            if (registry != null) {\n                return registry;\n            }\n            // \u521b\u5efaRegistry\n            registry = createRegistry(url);\n            if (registry == null) {\n                throw new IllegalStateException(\"Can not create registry \" + url);\n            }\n            REGISTRIES.put(key, registry);\n            return registry;\n        } finally {\n            // Release the lock\n            LOCK.unlock();\n        }\n    }", "signature": "Registry getRegistry(URL url)", "full_signature": "@Override public Registry getRegistry(URL url)", "class_method_signature": "AbstractRegistryFactory.getRegistry(URL url)", "testcase": false, "constructor": false, "invocations": ["removeParameters", "addParameter", "setPath", "getName", "getName", "toServiceString", "lock", "get", "createRegistry", "put", "unlock"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}