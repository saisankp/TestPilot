{"test_class": {"identifier": "TestBatchTinyTablesTripleProvider", "superclass": "", "interfaces": "", "fields": [], "file": "suite/tinytables/src/test/java/dk/alexandra/fresco/suite/tinytables/storage/TestBatchTinyTablesTripleProvider.java"}, "test_case": {"identifier": "testNextTriple", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testNextTriple() {\n    TinyTablesTripleGenerator fac = new TinyTablesTripleGenerator(0, null, null) {\n\n      @Override\n      public List<TinyTablesTriple> generate(int amount) {\n        List<TinyTablesTriple> triples = new ArrayList<>();\n        for (int i = 0; i < amount; i++) {\n          triples.add(TinyTablesTriple.fromShares(true, true, true));\n        }\n        return triples;\n      }\n    };\n    BatchTinyTablesTripleProvider gen = new BatchTinyTablesTripleProvider(fac, 10);\n    for (int i = 0; i < 20; i++) {\n      assertThat(gen.getNextTriple(), is(TinyTablesTriple.fromShares(true, true, true)));\n    }\n  }", "signature": "void testNextTriple()", "full_signature": "@Test public void testNextTriple()", "class_method_signature": "TestBatchTinyTablesTripleProvider.testNextTriple()", "testcase": true, "constructor": false, "invocations": ["add", "fromShares", "assertThat", "getNextTriple", "is", "fromShares"]}, "focal_class": {"identifier": "BatchTinyTablesTripleProvider", "superclass": "", "interfaces": "implements TinyTablesTripleProvider", "fields": [{"original_string": "private final static Logger logger = LoggerFactory.getLogger(BatchTinyTablesTripleProvider.class);", "modifier": "private final static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(BatchTinyTablesTripleProvider.class)", "var_name": "logger"}, {"original_string": "private Queue<TinyTablesTriple> triples = new ConcurrentLinkedQueue<>();", "modifier": "private", "type": "Queue<TinyTablesTriple>", "declarator": "triples = new ConcurrentLinkedQueue<>()", "var_name": "triples"}, {"original_string": "private TinyTablesTripleGenerator generator;", "modifier": "private", "type": "TinyTablesTripleGenerator", "declarator": "generator", "var_name": "generator"}, {"original_string": "private int batchSize;", "modifier": "private", "type": "int", "declarator": "batchSize", "var_name": "batchSize"}], "methods": [{"identifier": "BatchTinyTablesTripleProvider", "parameters": "(TinyTablesTripleGenerator generator, int batchSize)", "modifiers": "public", "return": "", "signature": " BatchTinyTablesTripleProvider(TinyTablesTripleGenerator generator, int batchSize)", "full_signature": "public  BatchTinyTablesTripleProvider(TinyTablesTripleGenerator generator, int batchSize)", "class_method_signature": "BatchTinyTablesTripleProvider.BatchTinyTablesTripleProvider(TinyTablesTripleGenerator generator, int batchSize)", "testcase": false, "constructor": true}, {"identifier": "getNextTriple", "parameters": "()", "modifiers": "@Override public synchronized", "return": "TinyTablesTriple", "signature": "TinyTablesTriple getNextTriple()", "full_signature": "@Override public synchronized TinyTablesTriple getNextTriple()", "class_method_signature": "BatchTinyTablesTripleProvider.getNextTriple()", "testcase": false, "constructor": false}, {"identifier": "generateNewTriples", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void generateNewTriples()", "full_signature": "private void generateNewTriples()", "class_method_signature": "BatchTinyTablesTripleProvider.generateNewTriples()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "BatchTinyTablesTripleProvider.close()", "testcase": false, "constructor": false}], "file": "suite/tinytables/src/main/java/dk/alexandra/fresco/suite/tinytables/storage/BatchTinyTablesTripleProvider.java"}, "focal_method": {"identifier": "getNextTriple", "parameters": "()", "modifiers": "@Override public synchronized", "return": "TinyTablesTriple", "body": "@Override\n  public synchronized TinyTablesTriple getNextTriple() {\n    if (triples.isEmpty()) {\n      generateNewTriples();\n    }\n    return triples.poll();\n  }", "signature": "TinyTablesTriple getNextTriple()", "full_signature": "@Override public synchronized TinyTablesTriple getNextTriple()", "class_method_signature": "BatchTinyTablesTripleProvider.getNextTriple()", "testcase": false, "constructor": false, "invocations": ["isEmpty", "generateNewTriples", "poll"]}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}