{"test_class": {"identifier": "QueryExecutorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static HazelcastInstance hazelcastInstance;", "modifier": "private static", "type": "HazelcastInstance", "declarator": "hazelcastInstance", "var_name": "hazelcastInstance"}, {"original_string": "private static ElasticsearchConnection elasticsearchConnection;", "modifier": "private static", "type": "ElasticsearchConnection", "declarator": "elasticsearchConnection", "var_name": "elasticsearchConnection"}, {"original_string": "private QueryExecutor queryExecutor;", "modifier": "private", "type": "QueryExecutor", "declarator": "queryExecutor", "var_name": "queryExecutor"}, {"original_string": "private ObjectMapper mapper = new ObjectMapper();", "modifier": "private", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}, {"original_string": "private AnalyticsLoader analyticsLoader;", "modifier": "private", "type": "AnalyticsLoader", "declarator": "analyticsLoader", "var_name": "analyticsLoader"}], "file": "foxtrot-core/src/test/java/com/flipkart/foxtrot/core/querystore/QueryExecutorTest.java"}, "test_case": {"identifier": "testResolve", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testResolve() throws Exception {\n        assertEquals(NonCacheableAction.class, queryExecutor.resolve(new NonCacheableActionRequest())\n                .getClass());\n    }", "signature": "void testResolve()", "full_signature": "@Test public void testResolve()", "class_method_signature": "QueryExecutorTest.testResolve()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getClass", "resolve"]}, "focal_class": {"identifier": "QueryExecutor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final AnalyticsLoader analyticsLoader;", "modifier": "private final", "type": "AnalyticsLoader", "declarator": "analyticsLoader", "var_name": "analyticsLoader"}, {"original_string": "private final ExecutorService executorService;", "modifier": "private final", "type": "ExecutorService", "declarator": "executorService", "var_name": "executorService"}, {"original_string": "private final List<ActionExecutionObserver> executionObservers;", "modifier": "private final", "type": "List<ActionExecutionObserver>", "declarator": "executionObservers", "var_name": "executionObservers"}], "methods": [{"identifier": "QueryExecutor", "parameters": "(\n            AnalyticsLoader analyticsLoader,\n            ExecutorService executorService,\n            List<ActionExecutionObserver> executionObservers)", "modifiers": "@Inject public", "return": "", "signature": " QueryExecutor(\n            AnalyticsLoader analyticsLoader,\n            ExecutorService executorService,\n            List<ActionExecutionObserver> executionObservers)", "full_signature": "@Inject public  QueryExecutor(\n            AnalyticsLoader analyticsLoader,\n            ExecutorService executorService,\n            List<ActionExecutionObserver> executionObservers)", "class_method_signature": "QueryExecutor.QueryExecutor(\n            AnalyticsLoader analyticsLoader,\n            ExecutorService executorService,\n            List<ActionExecutionObserver> executionObservers)", "testcase": false, "constructor": true}, {"identifier": "validate", "parameters": "(T request)", "modifiers": "public", "return": "ActionValidationResponse", "signature": "ActionValidationResponse validate(T request)", "full_signature": "public ActionValidationResponse validate(T request)", "class_method_signature": "QueryExecutor.validate(T request)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(T request)", "modifiers": "public", "return": "ActionResponse", "signature": "ActionResponse execute(T request)", "full_signature": "public ActionResponse execute(T request)", "class_method_signature": "QueryExecutor.execute(T request)", "testcase": false, "constructor": false}, {"identifier": "executeAsync", "parameters": "(T request)", "modifiers": "public", "return": "AsyncDataToken", "signature": "AsyncDataToken executeAsync(T request)", "full_signature": "public AsyncDataToken executeAsync(T request)", "class_method_signature": "QueryExecutor.executeAsync(T request)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(T request)", "modifiers": "public", "return": "Action", "signature": "Action resolve(T request)", "full_signature": "public Action resolve(T request)", "class_method_signature": "QueryExecutor.resolve(T request)", "testcase": false, "constructor": false}, {"identifier": "notifyObserverPreExec", "parameters": "(final ActionRequest request)", "modifiers": "private", "return": "void", "signature": "void notifyObserverPreExec(final ActionRequest request)", "full_signature": "private void notifyObserverPreExec(final ActionRequest request)", "class_method_signature": "QueryExecutor.notifyObserverPreExec(final ActionRequest request)", "testcase": false, "constructor": false}, {"identifier": "notifyObserverPostExec", "parameters": "(final ActionEvaluationResponse evaluationResponse)", "modifiers": "private", "return": "void", "signature": "void notifyObserverPostExec(final ActionEvaluationResponse evaluationResponse)", "full_signature": "private void notifyObserverPostExec(final ActionEvaluationResponse evaluationResponse)", "class_method_signature": "QueryExecutor.notifyObserverPostExec(final ActionEvaluationResponse evaluationResponse)", "testcase": false, "constructor": false}, {"identifier": "readCachedData", "parameters": "(final CacheManager cacheManager,\n                                          final ActionRequest request,\n                                          final Action action)", "modifiers": "private", "return": "ActionResponse", "signature": "ActionResponse readCachedData(final CacheManager cacheManager,\n                                          final ActionRequest request,\n                                          final Action action)", "full_signature": "private ActionResponse readCachedData(final CacheManager cacheManager,\n                                          final ActionRequest request,\n                                          final Action action)", "class_method_signature": "QueryExecutor.readCachedData(final CacheManager cacheManager,\n                                          final ActionRequest request,\n                                          final Action action)", "testcase": false, "constructor": false}], "file": "foxtrot-core/src/main/java/com/flipkart/foxtrot/core/querystore/QueryExecutor.java"}, "focal_method": {"identifier": "resolve", "parameters": "(T request)", "modifiers": "public", "return": "Action", "body": "public <T extends ActionRequest> Action resolve(T request) {\n        Action action;\n        action = analyticsLoader.getAction(request);\n        if(null == action) {\n            throw FoxtrotExceptions.createUnresolvableActionException(request);\n        }\n        return action;\n    }", "signature": "Action resolve(T request)", "full_signature": "public Action resolve(T request)", "class_method_signature": "QueryExecutor.resolve(T request)", "testcase": false, "constructor": false, "invocations": ["getAction", "createUnresolvableActionException"]}, "repository": {"repo_id": 19980663, "url": "https://github.com/Flipkart/foxtrot", "stars": 22, "created": "5/20/2014 12:52:55 PM +00:00", "updates": "2020-01-07T07:05:03+00:00", "fork": "False", "license": "licensed"}}