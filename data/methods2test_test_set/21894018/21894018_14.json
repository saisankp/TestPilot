{"test_class": {"identifier": "TransactionContextTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static DummyTxClient txClient;", "modifier": "private static", "type": "DummyTxClient", "declarator": "txClient", "var_name": "txClient"}, {"original_string": "@ClassRule\n  public static TemporaryFolder tmpFolder = new TemporaryFolder();", "modifier": "@ClassRule\n  public static", "type": "TemporaryFolder", "declarator": "tmpFolder = new TemporaryFolder()", "var_name": "tmpFolder"}, {"original_string": "final DummyTxAware ds1 = new DummyTxAware(), ds2 = new DummyTxAware();", "modifier": "final", "type": "DummyTxAware", "declarator": "ds1 = new DummyTxAware()", "var_name": "ds1"}, {"original_string": "static final byte[] A = { 'a' };", "modifier": "static final", "type": "byte[]", "declarator": "A = { 'a' }", "var_name": "A"}, {"original_string": "static final byte[] B = { 'b' };", "modifier": "static final", "type": "byte[]", "declarator": "B = { 'b' }", "var_name": "B"}], "file": "tephra-core/src/test/java/co/cask/tephra/TransactionContextTest.java"}, "test_case": {"identifier": "testStartAndRollbackFailure", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testStartAndRollbackFailure() throws TransactionFailureException, InterruptedException {\n    ds1.failStartTxOnce = InduceFailure.ThrowException;\n    TransactionContext context = newTransactionContext(ds1, ds2);\n    // start transaction\n    try {\n      context.start();\n      Assert.fail(\"start failed - exception should be thrown\");\n    } catch (TransactionFailureException e) {\n      Assert.assertEquals(\"start failure\", e.getCause().getMessage());\n    }\n    // verify both are not rolled back and tx is aborted\n    Assert.assertTrue(ds1.started);\n    Assert.assertFalse(ds2.started);\n    Assert.assertFalse(ds1.checked);\n    Assert.assertFalse(ds2.checked);\n    Assert.assertFalse(ds1.committed);\n    Assert.assertFalse(ds2.committed);\n    Assert.assertFalse(ds1.postCommitted);\n    Assert.assertFalse(ds2.postCommitted);\n    Assert.assertFalse(ds1.rolledBack);\n    Assert.assertFalse(ds2.rolledBack);\n    Assert.assertEquals(txClient.state, DummyTxClient.CommitState.Aborted);\n  }", "signature": "void testStartAndRollbackFailure()", "full_signature": "@Test public void testStartAndRollbackFailure()", "class_method_signature": "TransactionContextTest.testStartAndRollbackFailure()", "testcase": true, "constructor": false, "invocations": ["newTransactionContext", "start", "fail", "assertEquals", "getMessage", "getCause", "assertTrue", "assertFalse", "assertFalse", "assertFalse", "assertFalse", "assertFalse", "assertFalse", "assertFalse", "assertFalse", "assertFalse", "assertEquals"]}, "focal_class": {"identifier": "TransactionContext", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(TransactionContext.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(TransactionContext.class)", "var_name": "LOG"}, {"original_string": "private final Collection<TransactionAware> txAwares;", "modifier": "private final", "type": "Collection<TransactionAware>", "declarator": "txAwares", "var_name": "txAwares"}, {"original_string": "private final TransactionSystemClient txClient;", "modifier": "private final", "type": "TransactionSystemClient", "declarator": "txClient", "var_name": "txClient"}, {"original_string": "private Transaction currentTx;", "modifier": "private", "type": "Transaction", "declarator": "currentTx", "var_name": "currentTx"}], "methods": [{"identifier": "TransactionContext", "parameters": "(TransactionSystemClient txClient, TransactionAware... txAwares)", "modifiers": "public", "return": "", "signature": " TransactionContext(TransactionSystemClient txClient, TransactionAware... txAwares)", "full_signature": "public  TransactionContext(TransactionSystemClient txClient, TransactionAware... txAwares)", "class_method_signature": "TransactionContext.TransactionContext(TransactionSystemClient txClient, TransactionAware... txAwares)", "testcase": false, "constructor": true}, {"identifier": "TransactionContext", "parameters": "(TransactionSystemClient txClient, Iterable<TransactionAware> txAwares)", "modifiers": "public", "return": "", "signature": " TransactionContext(TransactionSystemClient txClient, Iterable<TransactionAware> txAwares)", "full_signature": "public  TransactionContext(TransactionSystemClient txClient, Iterable<TransactionAware> txAwares)", "class_method_signature": "TransactionContext.TransactionContext(TransactionSystemClient txClient, Iterable<TransactionAware> txAwares)", "testcase": false, "constructor": true}, {"identifier": "addTransactionAware", "parameters": "(TransactionAware txAware)", "modifiers": "public", "return": "boolean", "signature": "boolean addTransactionAware(TransactionAware txAware)", "full_signature": "public boolean addTransactionAware(TransactionAware txAware)", "class_method_signature": "TransactionContext.addTransactionAware(TransactionAware txAware)", "testcase": false, "constructor": false}, {"identifier": "removeTransactionAware", "parameters": "(TransactionAware txAware)", "modifiers": "public", "return": "boolean", "signature": "boolean removeTransactionAware(TransactionAware txAware)", "full_signature": "public boolean removeTransactionAware(TransactionAware txAware)", "class_method_signature": "TransactionContext.removeTransactionAware(TransactionAware txAware)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void start()", "full_signature": "public void start()", "class_method_signature": "TransactionContext.start()", "testcase": false, "constructor": false}, {"identifier": "finish", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void finish()", "full_signature": "public void finish()", "class_method_signature": "TransactionContext.finish()", "testcase": false, "constructor": false}, {"identifier": "abort", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void abort()", "full_signature": "public void abort()", "class_method_signature": "TransactionContext.abort()", "testcase": false, "constructor": false}, {"identifier": "checkpoint", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void checkpoint()", "full_signature": "public void checkpoint()", "class_method_signature": "TransactionContext.checkpoint()", "testcase": false, "constructor": false}, {"identifier": "getCurrentTransaction", "parameters": "()", "modifiers": "@Nullable public", "return": "Transaction", "signature": "Transaction getCurrentTransaction()", "full_signature": "@Nullable public Transaction getCurrentTransaction()", "class_method_signature": "TransactionContext.getCurrentTransaction()", "testcase": false, "constructor": false}, {"identifier": "abort", "parameters": "(TransactionFailureException cause)", "modifiers": "public", "return": "void", "signature": "void abort(TransactionFailureException cause)", "full_signature": "public void abort(TransactionFailureException cause)", "class_method_signature": "TransactionContext.abort(TransactionFailureException cause)", "testcase": false, "constructor": false}, {"identifier": "checkForConflicts", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkForConflicts()", "full_signature": "private void checkForConflicts()", "class_method_signature": "TransactionContext.checkForConflicts()", "testcase": false, "constructor": false}, {"identifier": "persist", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void persist()", "full_signature": "private void persist()", "class_method_signature": "TransactionContext.persist()", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void commit()", "full_signature": "private void commit()", "class_method_signature": "TransactionContext.commit()", "testcase": false, "constructor": false}, {"identifier": "postCommit", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void postCommit()", "full_signature": "private void postCommit()", "class_method_signature": "TransactionContext.postCommit()", "testcase": false, "constructor": false}], "file": "tephra-core/src/main/java/co/cask/tephra/TransactionContext.java"}, "focal_method": {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void start() throws TransactionFailureException {\n    currentTx = txClient.startShort();\n    for (TransactionAware txAware : txAwares) {\n      try {\n        txAware.startTx(currentTx);\n      } catch (Throwable e) {\n        String message = String.format(\"Unable to start transaction-aware '%s' for transaction %d. \",\n                                       txAware.getTransactionAwareName(), currentTx.getTransactionId());\n        LOG.warn(message, e);\n        txClient.abort(currentTx);\n        throw new TransactionFailureException(message, e);\n      }\n    }\n  }", "signature": "void start()", "full_signature": "public void start()", "class_method_signature": "TransactionContext.start()", "testcase": false, "constructor": false, "invocations": ["startShort", "startTx", "format", "getTransactionAwareName", "getTransactionId", "warn", "abort"]}, "repository": {"repo_id": 21894018, "url": "https://github.com/cdapio/tephra", "language": "Java", "is_fork": false, "fork_count": 43, "stargazer_count": 157, "size": 1415, "license": "licensed"}}