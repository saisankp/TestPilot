{"test_class": {"identifier": "PipeTest", "superclass": "", "interfaces": "implements Observer", "fields": [{"original_string": "private Pipe pipe = null;", "modifier": "private", "type": "Pipe", "declarator": "pipe = null", "var_name": "pipe"}, {"original_string": "private boolean changed;", "modifier": "private", "type": "boolean", "declarator": "changed", "var_name": "changed"}], "file": "src/osip-model/src/test/java/edu/kit/pse/osip/core/model/base/PipeTest.java"}, "test_case": {"identifier": "tooHighThreshold", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void tooHighThreshold() {\n        pipe.setValveThreshold((byte) 101);\n    }", "signature": "void tooHighThreshold()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void tooHighThreshold()", "class_method_signature": "PipeTest.tooHighThreshold()", "testcase": true, "constructor": false, "invocations": ["setValveThreshold"]}, "focal_class": {"identifier": "Pipe", "superclass": "extends Observable", "interfaces": "", "fields": [{"original_string": "private float crosssection;", "modifier": "private", "type": "float", "declarator": "crosssection", "var_name": "crosssection"}, {"original_string": "private int length;", "modifier": "private", "type": "int", "declarator": "length", "var_name": "length"}, {"original_string": "private Deque<Liquid> queue = new LinkedBlockingDeque<>();", "modifier": "private", "type": "Deque<Liquid>", "declarator": "queue = new LinkedBlockingDeque<>()", "var_name": "queue"}, {"original_string": "private byte threshold = 100;", "modifier": "private", "type": "byte", "declarator": "threshold = 100", "var_name": "threshold"}, {"original_string": "private byte defaultThreshold;", "modifier": "private", "type": "byte", "declarator": "defaultThreshold", "var_name": "defaultThreshold"}], "methods": [{"identifier": "Pipe", "parameters": "(float crosssection, int length, byte defaultThreshold)", "modifiers": "public", "return": "", "signature": " Pipe(float crosssection, int length, byte defaultThreshold)", "full_signature": "public  Pipe(float crosssection, int length, byte defaultThreshold)", "class_method_signature": "Pipe.Pipe(float crosssection, int length, byte defaultThreshold)", "testcase": false, "constructor": true}, {"identifier": "putIn", "parameters": "(Liquid liquid)", "modifiers": "public synchronized", "return": "Liquid", "signature": "Liquid putIn(Liquid liquid)", "full_signature": "public synchronized Liquid putIn(Liquid liquid)", "class_method_signature": "Pipe.putIn(Liquid liquid)", "testcase": false, "constructor": false}, {"identifier": "setValveThreshold", "parameters": "(byte threshold)", "modifiers": "public synchronized", "return": "void", "signature": "void setValveThreshold(byte threshold)", "full_signature": "public synchronized void setValveThreshold(byte threshold)", "class_method_signature": "Pipe.setValveThreshold(byte threshold)", "testcase": false, "constructor": false}, {"identifier": "getValveThreshold", "parameters": "()", "modifiers": "public", "return": "byte", "signature": "byte getValveThreshold()", "full_signature": "public byte getValveThreshold()", "class_method_signature": "Pipe.getValveThreshold()", "testcase": false, "constructor": false}, {"identifier": "getMaxInput", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getMaxInput()", "full_signature": "public float getMaxInput()", "class_method_signature": "Pipe.getMaxInput()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void reset()", "full_signature": "public synchronized void reset()", "class_method_signature": "Pipe.reset()", "testcase": false, "constructor": false}, {"identifier": "isLiquidEntering", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isLiquidEntering()", "full_signature": "public boolean isLiquidEntering()", "class_method_signature": "Pipe.isLiquidEntering()", "testcase": false, "constructor": false}], "file": "src/osip-model/src/main/java/edu/kit/pse/osip/core/model/base/Pipe.java"}, "focal_method": {"identifier": "setValveThreshold", "parameters": "(byte threshold)", "modifiers": "public synchronized", "return": "void", "body": "public synchronized void setValveThreshold(byte threshold) {\n        if (threshold > 100 || threshold < 0) {\n            throw new IllegalArgumentException(\"Valve threshold needs to be in range 0 to 100\");\n        }\n        this.threshold = threshold;\n        setChanged();\n        notifyObservers();\n    }", "signature": "void setValveThreshold(byte threshold)", "full_signature": "public synchronized void setValveThreshold(byte threshold)", "class_method_signature": "Pipe.setValveThreshold(byte threshold)", "testcase": false, "constructor": false, "invocations": ["setChanged", "notifyObservers"]}, "repository": {"repo_id": 74042107, "url": "https://github.com/ByteHamster/PSE", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 18396, "license": "licensed"}}