{"test_class": {"identifier": "ServerSelectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static TThreadedSelectorServer ttServer;", "modifier": "private static", "type": "TThreadedSelectorServer", "declarator": "ttServer", "var_name": "ttServer"}, {"original_string": "private static int port;", "modifier": "private static", "type": "int", "declarator": "port", "var_name": "port"}, {"original_string": "private static DasServerInstance AVAILABLE_INSTANCE_1;", "modifier": "private static", "type": "DasServerInstance", "declarator": "AVAILABLE_INSTANCE_1", "var_name": "AVAILABLE_INSTANCE_1"}, {"original_string": "private static DasServerInstance AVAILABLE_INSTANCE_2;", "modifier": "private static", "type": "DasServerInstance", "declarator": "AVAILABLE_INSTANCE_2", "var_name": "AVAILABLE_INSTANCE_2"}, {"original_string": "private static DasServerInstance NO_AVAILABLE_INSTANCE_1;", "modifier": "private static", "type": "DasServerInstance", "declarator": "NO_AVAILABLE_INSTANCE_1", "var_name": "NO_AVAILABLE_INSTANCE_1"}, {"original_string": "private static DasServerInstance NO_AVAILABLE_INSTANCE_2;", "modifier": "private static", "type": "DasServerInstance", "declarator": "NO_AVAILABLE_INSTANCE_2", "var_name": "NO_AVAILABLE_INSTANCE_2"}, {"original_string": "private static final DasRequest REQUEST = new DasRequest()\n            .setAppId(\"id\").setLogicDbName(\"db\").setDasClientVersion(\"v\").setPpdaiClientVersion(\"pv\").setOperation(DasOperation.Select);", "modifier": "private static final", "type": "DasRequest", "declarator": "REQUEST = new DasRequest()\n            .setAppId(\"id\").setLogicDbName(\"db\").setDasClientVersion(\"v\").setPpdaiClientVersion(\"pv\").setOperation(DasOperation.Select)", "var_name": "REQUEST"}], "file": "das-client/src/test/java/com/ppdai/das/client/delegate/remote/ServerSelectorTest.java"}, "test_case": {"identifier": "testNoAvailableInstance", "parameters": "()", "modifiers": "@Test(expected = RuntimeException.class) public", "return": "void", "body": "@Test(expected = RuntimeException.class)\n    public void testNoAvailableInstance() throws TException {\n        ServerSelector serverSelector = new ServerSelector(\n                \"appId\", Arrays.asList(NO_AVAILABLE_INSTANCE_1, NO_AVAILABLE_INSTANCE_2), \"dasClientVersion\", \"ppdaiClientVersion\", \"clientAddress\"\n        );\n        serverSelector.execute(REQUEST);\n        fail();\n    }", "signature": "void testNoAvailableInstance()", "full_signature": "@Test(expected = RuntimeException.class) public void testNoAvailableInstance()", "class_method_signature": "ServerSelectorTest.testNoAvailableInstance()", "testcase": true, "constructor": false, "invocations": ["asList", "execute", "fail"]}, "focal_class": {"identifier": "ServerSelector", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Rule rule;", "modifier": "private", "type": "Rule", "declarator": "rule", "var_name": "rule"}, {"original_string": "static long checkInterval = 5L;", "modifier": "static", "type": "long", "declarator": "checkInterval = 5L", "var_name": "checkInterval"}, {"original_string": "private String appId;", "modifier": "private", "type": "String", "declarator": "appId", "var_name": "appId"}, {"original_string": "private String dasClientVersion;", "modifier": "private", "type": "String", "declarator": "dasClientVersion", "var_name": "dasClientVersion"}, {"original_string": "private String ppdaiClientVersion;", "modifier": "private", "type": "String", "declarator": "ppdaiClientVersion", "var_name": "ppdaiClientVersion"}, {"original_string": "private String clientAddress;", "modifier": "private", "type": "String", "declarator": "clientAddress", "var_name": "clientAddress"}, {"original_string": "List<DasServerInstance> serverInstances = new ArrayList<>();", "modifier": "", "type": "List<DasServerInstance>", "declarator": "serverInstances = new ArrayList<>()", "var_name": "serverInstances"}, {"original_string": "protected static List<DasServerInstanceWithStatus> allServerList = new CopyOnWriteArrayList<>();", "modifier": "protected static", "type": "List<DasServerInstanceWithStatus>", "declarator": "allServerList = new CopyOnWriteArrayList<>()", "var_name": "allServerList"}, {"original_string": "private final static ThreadLocal<ClientObject> currentClient = new ThreadLocal<>();", "modifier": "private final static", "type": "ThreadLocal<ClientObject>", "declarator": "currentClient = new ThreadLocal<>()", "var_name": "currentClient"}, {"original_string": "private static final LoadingCache<DasServerInstanceWithStatus, LoadingCache<String, ClientObject>> servers = createClient();", "modifier": "private static final", "type": "LoadingCache<DasServerInstanceWithStatus, LoadingCache<String, ClientObject>>", "declarator": "servers = createClient()", "var_name": "servers"}, {"original_string": "private static final ScheduledExecutorService service = new ScheduledThreadPoolExecutor(1);", "modifier": "private static final", "type": "ScheduledExecutorService", "declarator": "service = new ScheduledThreadPoolExecutor(1)", "var_name": "service"}, {"original_string": "private static final AtomicBoolean initialized = new AtomicBoolean(false);", "modifier": "private static final", "type": "AtomicBoolean", "declarator": "initialized = new AtomicBoolean(false)", "var_name": "initialized"}, {"original_string": "private static final AtomicBoolean checkInProgress = new AtomicBoolean(false);", "modifier": "private static final", "type": "AtomicBoolean", "declarator": "checkInProgress = new AtomicBoolean(false)", "var_name": "checkInProgress"}], "methods": [{"identifier": "ServerSelector", "parameters": "(String appId, List<DasServerInstance> serverInstances, String dasClientVersion, String ppdaiClientVersion, String clientAddress)", "modifiers": "public", "return": "", "signature": " ServerSelector(String appId, List<DasServerInstance> serverInstances, String dasClientVersion, String ppdaiClientVersion, String clientAddress)", "full_signature": "public  ServerSelector(String appId, List<DasServerInstance> serverInstances, String dasClientVersion, String ppdaiClientVersion, String clientAddress)", "class_method_signature": "ServerSelector.ServerSelector(String appId, List<DasServerInstance> serverInstances, String dasClientVersion, String ppdaiClientVersion, String clientAddress)", "testcase": false, "constructor": true}, {"identifier": "createClient", "parameters": "()", "modifiers": "static", "return": "LoadingCache<DasServerInstanceWithStatus, LoadingCache<String, ClientObject>>", "signature": "LoadingCache<DasServerInstanceWithStatus, LoadingCache<String, ClientObject>> createClient()", "full_signature": "static LoadingCache<DasServerInstanceWithStatus, LoadingCache<String, ClientObject>> createClient()", "class_method_signature": "ServerSelector.createClient()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(DasRequest dasRequest)", "modifiers": "public", "return": "DasResult", "signature": "DasResult execute(DasRequest dasRequest)", "full_signature": "public DasResult execute(DasRequest dasRequest)", "class_method_signature": "ServerSelector.execute(DasRequest dasRequest)", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "(DasTransactionId transactionId)", "modifiers": "public", "return": "void", "signature": "void commit(DasTransactionId transactionId)", "full_signature": "public void commit(DasTransactionId transactionId)", "class_method_signature": "ServerSelector.commit(DasTransactionId transactionId)", "testcase": false, "constructor": false}, {"identifier": "rollback", "parameters": "(DasTransactionId transactionId)", "modifiers": "public", "return": "void", "signature": "void rollback(DasTransactionId transactionId)", "full_signature": "public void rollback(DasTransactionId transactionId)", "class_method_signature": "ServerSelector.rollback(DasTransactionId transactionId)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "(String appId, String database, DasHints hints)", "modifiers": "public", "return": "DasTransactionId", "signature": "DasTransactionId start(String appId, String database, DasHints hints)", "full_signature": "public DasTransactionId start(String appId, String database, DasHints hints)", "class_method_signature": "ServerSelector.start(String appId, String database, DasHints hints)", "testcase": false, "constructor": false}, {"identifier": "stickServerMode", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stickServerMode()", "full_signature": "public void stickServerMode()", "class_method_signature": "ServerSelector.stickServerMode()", "testcase": false, "constructor": false}, {"identifier": "getClientObject", "parameters": "(String host, int port)", "modifiers": "static", "return": "ClientObject", "signature": "ClientObject getClientObject(String host, int port)", "full_signature": "static ClientObject getClientObject(String host, int port)", "class_method_signature": "ServerSelector.getClientObject(String host, int port)", "testcase": false, "constructor": false}, {"identifier": "removeStick", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void removeStick()", "full_signature": "public void removeStick()", "class_method_signature": "ServerSelector.removeStick()", "testcase": false, "constructor": false}, {"identifier": "checkServers", "parameters": "()", "modifiers": "", "return": "void", "signature": "void checkServers()", "full_signature": " void checkServers()", "class_method_signature": "ServerSelector.checkServers()", "testcase": false, "constructor": false}, {"identifier": "startup", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void startup()", "full_signature": "public void startup()", "class_method_signature": "ServerSelector.startup()", "testcase": false, "constructor": false}, {"identifier": "callCheckServers", "parameters": "(List<DasServerInstance> serverInstances)", "modifiers": "private", "return": "List<DasServerInstanceWithStatus>", "signature": "List<DasServerInstanceWithStatus> callCheckServers(List<DasServerInstance> serverInstances)", "full_signature": "private List<DasServerInstanceWithStatus> callCheckServers(List<DasServerInstance> serverInstances)", "class_method_signature": "ServerSelector.callCheckServers(List<DasServerInstance> serverInstances)", "testcase": false, "constructor": false}, {"identifier": "getAllServers", "parameters": "()", "modifiers": "public", "return": "List<DasServerInstanceWithStatus>", "signature": "List<DasServerInstanceWithStatus> getAllServers()", "full_signature": "public List<DasServerInstanceWithStatus> getAllServers()", "class_method_signature": "ServerSelector.getAllServers()", "testcase": false, "constructor": false}, {"identifier": "isServerAvailable", "parameters": "(DasServerInstanceWithStatus server)", "modifiers": "static", "return": "boolean", "signature": "boolean isServerAvailable(DasServerInstanceWithStatus server)", "full_signature": "static boolean isServerAvailable(DasServerInstanceWithStatus server)", "class_method_signature": "ServerSelector.isServerAvailable(DasServerInstanceWithStatus server)", "testcase": false, "constructor": false}], "file": "das-client/src/main/java/com/ppdai/das/client/delegate/remote/ServerSelector.java"}, "focal_method": {"identifier": "execute", "parameters": "(DasRequest dasRequest)", "modifiers": "public", "return": "DasResult", "body": "public DasResult execute(DasRequest dasRequest) throws TException {\n        if (currentClient.get() != null) {//stick mode\n            DasService.Client client = currentClient.get().getClient();\n            return client.execute(dasRequest);\n        } else {\n            DasServerInstanceWithStatus chosen = rule.chooseServer();\n            if (chosen == null) {\n                throw new RuntimeException(\"No available server from: \" + serverInstances);\n            } else {\n                try {\n                    ClientObject co = servers.get(chosen).get(Thread.currentThread().getName());\n                    return co.getClient().execute(dasRequest);\n                } catch (Exception e){\n                    try {\n                        servers.get(chosen).invalidate(Thread.currentThread().getName());\n                    } catch (ExecutionException ee) {}\n                    throw new TException(e);\n                }\n            }\n        }\n    }", "signature": "DasResult execute(DasRequest dasRequest)", "full_signature": "public DasResult execute(DasRequest dasRequest)", "class_method_signature": "ServerSelector.execute(DasRequest dasRequest)", "testcase": false, "constructor": false, "invocations": ["get", "getClient", "get", "execute", "chooseServer", "get", "get", "getName", "currentThread", "execute", "getClient", "invalidate", "get", "getName", "currentThread"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}