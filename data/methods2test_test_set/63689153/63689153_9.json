{"test_class": {"identifier": "MixAllTest", "superclass": "", "interfaces": "", "fields": [], "file": "rocketmq-common/src/test/java/com/alibaba/rocketmq/common/MixAllTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test() throws Exception {\n        List<String> localInetAddress = MixAll.getLocalInetAddress();\n        String local = InetAddress.getLocalHost().getHostAddress();\n        Assert.assertTrue(localInetAddress.contains(\"127.0.0.1\"));\n        Assert.assertTrue(localInetAddress.contains(local));\n    }", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "MixAllTest.test()", "testcase": true, "constructor": false, "invocations": ["getLocalInetAddress", "getHostAddress", "getLocalHost", "assertTrue", "contains", "assertTrue", "contains"]}, "focal_class": {"identifier": "MixAll", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String ROCKETMQ_HOME_ENV = \"ROCKETMQ_HOME\";", "modifier": "public static final", "type": "String", "declarator": "ROCKETMQ_HOME_ENV = \"ROCKETMQ_HOME\"", "var_name": "ROCKETMQ_HOME_ENV"}, {"original_string": "public static final String ROCKETMQ_HOME_PROPERTY = \"rocketmq.home.dir\";", "modifier": "public static final", "type": "String", "declarator": "ROCKETMQ_HOME_PROPERTY = \"rocketmq.home.dir\"", "var_name": "ROCKETMQ_HOME_PROPERTY"}, {"original_string": "public static final String NAMESRV_ADDR_ENV = \"NAMESRV_ADDR\";", "modifier": "public static final", "type": "String", "declarator": "NAMESRV_ADDR_ENV = \"NAMESRV_ADDR\"", "var_name": "NAMESRV_ADDR_ENV"}, {"original_string": "public static final String NAMESRV_ADDR_PROPERTY = \"rocketmq.namesrv.addr\";", "modifier": "public static final", "type": "String", "declarator": "NAMESRV_ADDR_PROPERTY = \"rocketmq.namesrv.addr\"", "var_name": "NAMESRV_ADDR_PROPERTY"}, {"original_string": "public static final String MESSAGE_COMPRESS_LEVEL = \"rocketmq.message.compressLevel\";", "modifier": "public static final", "type": "String", "declarator": "MESSAGE_COMPRESS_LEVEL = \"rocketmq.message.compressLevel\"", "var_name": "MESSAGE_COMPRESS_LEVEL"}, {"original_string": "public static final String WS_DOMAIN_NAME = System.getProperty(\"rocketmq.namesrv.domain\", \"jmenv.tbsite.net\");", "modifier": "public static final", "type": "String", "declarator": "WS_DOMAIN_NAME = System.getProperty(\"rocketmq.namesrv.domain\", \"jmenv.tbsite.net\")", "var_name": "WS_DOMAIN_NAME"}, {"original_string": "public static final String WS_DOMAIN_SUBGROUP = System.getProperty(\"rocketmq.namesrv.domain.subgroup\", \"nsaddr\");", "modifier": "public static final", "type": "String", "declarator": "WS_DOMAIN_SUBGROUP = System.getProperty(\"rocketmq.namesrv.domain.subgroup\", \"nsaddr\")", "var_name": "WS_DOMAIN_SUBGROUP"}, {"original_string": "public static final String WS_ADDR = \"http://\" + WS_DOMAIN_NAME + \":8080/rocketmq/\" + WS_DOMAIN_SUBGROUP;", "modifier": "public static final", "type": "String", "declarator": "WS_ADDR = \"http://\" + WS_DOMAIN_NAME + \":8080/rocketmq/\" + WS_DOMAIN_SUBGROUP", "var_name": "WS_ADDR"}, {"original_string": "public static final String DEFAULT_TOPIC = \"TBW102\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_TOPIC = \"TBW102\"", "var_name": "DEFAULT_TOPIC"}, {"original_string": "public static final String BENCHMARK_TOPIC = \"BenchmarkTest\";", "modifier": "public static final", "type": "String", "declarator": "BENCHMARK_TOPIC = \"BenchmarkTest\"", "var_name": "BENCHMARK_TOPIC"}, {"original_string": "public static final String DEFAULT_PRODUCER_GROUP = \"DEFAULT_PRODUCER\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_PRODUCER_GROUP = \"DEFAULT_PRODUCER\"", "var_name": "DEFAULT_PRODUCER_GROUP"}, {"original_string": "public static final String DEFAULT_CONSUMER_GROUP = \"DEFAULT_CONSUMER\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_CONSUMER_GROUP = \"DEFAULT_CONSUMER\"", "var_name": "DEFAULT_CONSUMER_GROUP"}, {"original_string": "public static final String TOOLS_CONSUMER_GROUP = \"TOOLS_CONSUMER\";", "modifier": "public static final", "type": "String", "declarator": "TOOLS_CONSUMER_GROUP = \"TOOLS_CONSUMER\"", "var_name": "TOOLS_CONSUMER_GROUP"}, {"original_string": "public static final String FILTERSRV_CONSUMER_GROUP = \"FILTERSRV_CONSUMER\";", "modifier": "public static final", "type": "String", "declarator": "FILTERSRV_CONSUMER_GROUP = \"FILTERSRV_CONSUMER\"", "var_name": "FILTERSRV_CONSUMER_GROUP"}, {"original_string": "public static final String MONITOR_CONSUMER_GROUP = \"__MONITOR_CONSUMER\";", "modifier": "public static final", "type": "String", "declarator": "MONITOR_CONSUMER_GROUP = \"__MONITOR_CONSUMER\"", "var_name": "MONITOR_CONSUMER_GROUP"}, {"original_string": "public static final String CLIENT_INNER_PRODUCER_GROUP = \"CLIENT_INNER_PRODUCER\";", "modifier": "public static final", "type": "String", "declarator": "CLIENT_INNER_PRODUCER_GROUP = \"CLIENT_INNER_PRODUCER\"", "var_name": "CLIENT_INNER_PRODUCER_GROUP"}, {"original_string": "public static final String SELF_TEST_PRODUCER_GROUP = \"SELF_TEST_P_GROUP\";", "modifier": "public static final", "type": "String", "declarator": "SELF_TEST_PRODUCER_GROUP = \"SELF_TEST_P_GROUP\"", "var_name": "SELF_TEST_PRODUCER_GROUP"}, {"original_string": "public static final String SELF_TEST_CONSUMER_GROUP = \"SELF_TEST_C_GROUP\";", "modifier": "public static final", "type": "String", "declarator": "SELF_TEST_CONSUMER_GROUP = \"SELF_TEST_C_GROUP\"", "var_name": "SELF_TEST_CONSUMER_GROUP"}, {"original_string": "public static final String SELF_TEST_TOPIC = \"SELF_TEST_TOPIC\";", "modifier": "public static final", "type": "String", "declarator": "SELF_TEST_TOPIC = \"SELF_TEST_TOPIC\"", "var_name": "SELF_TEST_TOPIC"}, {"original_string": "public static final String OFFSET_MOVED_EVENT = \"OFFSET_MOVED_EVENT\";", "modifier": "public static final", "type": "String", "declarator": "OFFSET_MOVED_EVENT = \"OFFSET_MOVED_EVENT\"", "var_name": "OFFSET_MOVED_EVENT"}, {"original_string": "public static final String ONS_HTTP_PROXY_GROUP = \"CID_ONS-HTTP-PROXY\";", "modifier": "public static final", "type": "String", "declarator": "ONS_HTTP_PROXY_GROUP = \"CID_ONS-HTTP-PROXY\"", "var_name": "ONS_HTTP_PROXY_GROUP"}, {"original_string": "public static final String CID_ONSAPI_PERMISSION_GROUP = \"CID_ONSAPI_PERMISSION\";", "modifier": "public static final", "type": "String", "declarator": "CID_ONSAPI_PERMISSION_GROUP = \"CID_ONSAPI_PERMISSION\"", "var_name": "CID_ONSAPI_PERMISSION_GROUP"}, {"original_string": "public static final String CID_ONSAPI_OWNER_GROUP = \"CID_ONSAPI_OWNER\";", "modifier": "public static final", "type": "String", "declarator": "CID_ONSAPI_OWNER_GROUP = \"CID_ONSAPI_OWNER\"", "var_name": "CID_ONSAPI_OWNER_GROUP"}, {"original_string": "public static final String CID_ONSAPI_PULL_GROUP = \"CID_ONSAPI_PULL\";", "modifier": "public static final", "type": "String", "declarator": "CID_ONSAPI_PULL_GROUP = \"CID_ONSAPI_PULL\"", "var_name": "CID_ONSAPI_PULL_GROUP"}, {"original_string": "public static final String CID_RMQ_SYS_PREFIX = \"CID_RMQ_SYS_\";", "modifier": "public static final", "type": "String", "declarator": "CID_RMQ_SYS_PREFIX = \"CID_RMQ_SYS_\"", "var_name": "CID_RMQ_SYS_PREFIX"}, {"original_string": "public static final List<String> LocalInetAddrs = getLocalInetAddress();", "modifier": "public static final", "type": "List<String>", "declarator": "LocalInetAddrs = getLocalInetAddress()", "var_name": "LocalInetAddrs"}, {"original_string": "public static final String Localhost = localhost();", "modifier": "public static final", "type": "String", "declarator": "Localhost = localhost()", "var_name": "Localhost"}, {"original_string": "public static final String DEFAULT_CHARSET = \"UTF-8\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_CHARSET = \"UTF-8\"", "var_name": "DEFAULT_CHARSET"}, {"original_string": "public static final long MASTER_ID = 0L;", "modifier": "public static final", "type": "long", "declarator": "MASTER_ID = 0L", "var_name": "MASTER_ID"}, {"original_string": "public static final long CURRENT_JVM_PID = getPID();", "modifier": "public static final", "type": "long", "declarator": "CURRENT_JVM_PID = getPID()", "var_name": "CURRENT_JVM_PID"}, {"original_string": "public static final String RETRY_GROUP_TOPIC_PREFIX = \"%RETRY%\";", "modifier": "public static final", "type": "String", "declarator": "RETRY_GROUP_TOPIC_PREFIX = \"%RETRY%\"", "var_name": "RETRY_GROUP_TOPIC_PREFIX"}, {"original_string": "public static final String DLQ_GROUP_TOPIC_PREFIX = \"%DLQ%\";", "modifier": "public static final", "type": "String", "declarator": "DLQ_GROUP_TOPIC_PREFIX = \"%DLQ%\"", "var_name": "DLQ_GROUP_TOPIC_PREFIX"}, {"original_string": "public static final String SYSTEM_TOPIC_PREFIX = \"rmq_sys_\";", "modifier": "public static final", "type": "String", "declarator": "SYSTEM_TOPIC_PREFIX = \"rmq_sys_\"", "var_name": "SYSTEM_TOPIC_PREFIX"}], "methods": [{"identifier": "getRetryTopic", "parameters": "(final String consumerGroup)", "modifiers": "public static", "return": "String", "signature": "String getRetryTopic(final String consumerGroup)", "full_signature": "public static String getRetryTopic(final String consumerGroup)", "class_method_signature": "MixAll.getRetryTopic(final String consumerGroup)", "testcase": false, "constructor": false}, {"identifier": "isSysConsumerGroup", "parameters": "(final String consumerGroup)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSysConsumerGroup(final String consumerGroup)", "full_signature": "public static boolean isSysConsumerGroup(final String consumerGroup)", "class_method_signature": "MixAll.isSysConsumerGroup(final String consumerGroup)", "testcase": false, "constructor": false}, {"identifier": "getDLQTopic", "parameters": "(final String consumerGroup)", "modifiers": "public static", "return": "String", "signature": "String getDLQTopic(final String consumerGroup)", "full_signature": "public static String getDLQTopic(final String consumerGroup)", "class_method_signature": "MixAll.getDLQTopic(final String consumerGroup)", "testcase": false, "constructor": false}, {"identifier": "brokerVIPChannel", "parameters": "(final String brokerAddr)", "modifiers": "public static", "return": "String", "signature": "String brokerVIPChannel(final String brokerAddr)", "full_signature": "public static String brokerVIPChannel(final String brokerAddr)", "class_method_signature": "MixAll.brokerVIPChannel(final String brokerAddr)", "testcase": false, "constructor": false}, {"identifier": "getPID", "parameters": "()", "modifiers": "public static", "return": "long", "signature": "long getPID()", "full_signature": "public static long getPID()", "class_method_signature": "MixAll.getPID()", "testcase": false, "constructor": false}, {"identifier": "createBrokerId", "parameters": "(final String ip, final int port)", "modifiers": "public static", "return": "long", "signature": "long createBrokerId(final String ip, final int port)", "full_signature": "public static long createBrokerId(final String ip, final int port)", "class_method_signature": "MixAll.createBrokerId(final String ip, final int port)", "testcase": false, "constructor": false}, {"identifier": "string2File", "parameters": "(final String str, final String fileName)", "modifiers": "public static final", "return": "void", "signature": "void string2File(final String str, final String fileName)", "full_signature": "public static final void string2File(final String str, final String fileName)", "class_method_signature": "MixAll.string2File(final String str, final String fileName)", "testcase": false, "constructor": false}, {"identifier": "string2FileNotSafe", "parameters": "(final String str, final String fileName)", "modifiers": "public static final", "return": "void", "signature": "void string2FileNotSafe(final String str, final String fileName)", "full_signature": "public static final void string2FileNotSafe(final String str, final String fileName)", "class_method_signature": "MixAll.string2FileNotSafe(final String str, final String fileName)", "testcase": false, "constructor": false}, {"identifier": "file2String", "parameters": "(final String fileName)", "modifiers": "public static final", "return": "String", "signature": "String file2String(final String fileName)", "full_signature": "public static final String file2String(final String fileName)", "class_method_signature": "MixAll.file2String(final String fileName)", "testcase": false, "constructor": false}, {"identifier": "file2String", "parameters": "(final URL url)", "modifiers": "public static final", "return": "String", "signature": "String file2String(final URL url)", "full_signature": "public static final String file2String(final URL url)", "class_method_signature": "MixAll.file2String(final URL url)", "testcase": false, "constructor": false}, {"identifier": "file2String", "parameters": "(final File file)", "modifiers": "public static final", "return": "String", "signature": "String file2String(final File file)", "full_signature": "public static final String file2String(final File file)", "class_method_signature": "MixAll.file2String(final File file)", "testcase": false, "constructor": false}, {"identifier": "findClassPath", "parameters": "(Class<?> c)", "modifiers": "public static", "return": "String", "signature": "String findClassPath(Class<?> c)", "full_signature": "public static String findClassPath(Class<?> c)", "class_method_signature": "MixAll.findClassPath(Class<?> c)", "testcase": false, "constructor": false}, {"identifier": "printObjectProperties", "parameters": "(final Logger log, final Object object)", "modifiers": "public static", "return": "void", "signature": "void printObjectProperties(final Logger log, final Object object)", "full_signature": "public static void printObjectProperties(final Logger log, final Object object)", "class_method_signature": "MixAll.printObjectProperties(final Logger log, final Object object)", "testcase": false, "constructor": false}, {"identifier": "printObjectProperties", "parameters": "(final Logger log, final Object object, final boolean onlyImportantField)", "modifiers": "public static", "return": "void", "signature": "void printObjectProperties(final Logger log, final Object object, final boolean onlyImportantField)", "full_signature": "public static void printObjectProperties(final Logger log, final Object object, final boolean onlyImportantField)", "class_method_signature": "MixAll.printObjectProperties(final Logger log, final Object object, final boolean onlyImportantField)", "testcase": false, "constructor": false}, {"identifier": "properties2String", "parameters": "(final Properties properties)", "modifiers": "public static", "return": "String", "signature": "String properties2String(final Properties properties)", "full_signature": "public static String properties2String(final Properties properties)", "class_method_signature": "MixAll.properties2String(final Properties properties)", "testcase": false, "constructor": false}, {"identifier": "string2Properties", "parameters": "(final String str)", "modifiers": "public static", "return": "Properties", "signature": "Properties string2Properties(final String str)", "full_signature": "public static Properties string2Properties(final String str)", "class_method_signature": "MixAll.string2Properties(final String str)", "testcase": false, "constructor": false}, {"identifier": "object2Properties", "parameters": "(final Object object)", "modifiers": "public static", "return": "Properties", "signature": "Properties object2Properties(final Object object)", "full_signature": "public static Properties object2Properties(final Object object)", "class_method_signature": "MixAll.object2Properties(final Object object)", "testcase": false, "constructor": false}, {"identifier": "properties2Object", "parameters": "(final Properties p, final Object object)", "modifiers": "public static", "return": "void", "signature": "void properties2Object(final Properties p, final Object object)", "full_signature": "public static void properties2Object(final Properties p, final Object object)", "class_method_signature": "MixAll.properties2Object(final Properties p, final Object object)", "testcase": false, "constructor": false}, {"identifier": "isPropertiesEqual", "parameters": "(final Properties p1, final Properties p2)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPropertiesEqual(final Properties p1, final Properties p2)", "full_signature": "public static boolean isPropertiesEqual(final Properties p1, final Properties p2)", "class_method_signature": "MixAll.isPropertiesEqual(final Properties p1, final Properties p2)", "testcase": false, "constructor": false}, {"identifier": "getLocalInetAddress", "parameters": "()", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getLocalInetAddress()", "full_signature": "public static List<String> getLocalInetAddress()", "class_method_signature": "MixAll.getLocalInetAddress()", "testcase": false, "constructor": false}, {"identifier": "isLocalAddr", "parameters": "(String address)", "modifiers": "public static", "return": "boolean", "signature": "boolean isLocalAddr(String address)", "full_signature": "public static boolean isLocalAddr(String address)", "class_method_signature": "MixAll.isLocalAddr(String address)", "testcase": false, "constructor": false}, {"identifier": "localhost", "parameters": "()", "modifiers": "private static", "return": "String", "signature": "String localhost()", "full_signature": "private static String localhost()", "class_method_signature": "MixAll.localhost()", "testcase": false, "constructor": false}, {"identifier": "compareAndIncreaseOnly", "parameters": "(final AtomicLong target, final long value)", "modifiers": "public static", "return": "boolean", "signature": "boolean compareAndIncreaseOnly(final AtomicLong target, final long value)", "full_signature": "public static boolean compareAndIncreaseOnly(final AtomicLong target, final long value)", "class_method_signature": "MixAll.compareAndIncreaseOnly(final AtomicLong target, final long value)", "testcase": false, "constructor": false}, {"identifier": "list2Set", "parameters": "(List<String> values)", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> list2Set(List<String> values)", "full_signature": "public Set<String> list2Set(List<String> values)", "class_method_signature": "MixAll.list2Set(List<String> values)", "testcase": false, "constructor": false}, {"identifier": "set2List", "parameters": "(Set<String> values)", "modifiers": "public", "return": "List<String>", "signature": "List<String> set2List(Set<String> values)", "full_signature": "public List<String> set2List(Set<String> values)", "class_method_signature": "MixAll.set2List(Set<String> values)", "testcase": false, "constructor": false}, {"identifier": "localhostName", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String localhostName()", "full_signature": "public static String localhostName()", "class_method_signature": "MixAll.localhostName()", "testcase": false, "constructor": false}], "file": "rocketmq-common/src/main/java/com/alibaba/rocketmq/common/MixAll.java"}, "focal_method": {"identifier": "getLocalInetAddress", "parameters": "()", "modifiers": "public static", "return": "List<String>", "body": "public static List<String> getLocalInetAddress() {\n        List<String> inetAddressList = new ArrayList<String>();\n        try {\n            Enumeration<NetworkInterface> enumeration = NetworkInterface.getNetworkInterfaces();\n            while (enumeration.hasMoreElements()) {\n                NetworkInterface networkInterface = enumeration.nextElement();\n                Enumeration<InetAddress> addrs = networkInterface.getInetAddresses();\n                while (addrs.hasMoreElements()) {\n                    inetAddressList.add(addrs.nextElement().getHostAddress());\n                }\n            }\n        } catch (SocketException e) {\n            throw new RuntimeException(\"get local inet address fail\", e);\n        }\n\n        return inetAddressList;\n    }", "signature": "List<String> getLocalInetAddress()", "full_signature": "public static List<String> getLocalInetAddress()", "class_method_signature": "MixAll.getLocalInetAddress()", "testcase": false, "constructor": false, "invocations": ["getNetworkInterfaces", "hasMoreElements", "nextElement", "getInetAddresses", "hasMoreElements", "add", "getHostAddress", "nextElement"]}, "repository": {"repo_id": 63689153, "url": "https://github.com/medusar/rocketmq-comment", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 8, "size": 1685, "license": "licensed"}}