{"test_class": {"identifier": "AutocorrellatedVoiceActivityDetectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int DEFAULT_SAMPLE_RATE = 22050;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_SAMPLE_RATE = 22050", "var_name": "DEFAULT_SAMPLE_RATE"}, {"original_string": "private AutocorrellatedVoiceActivityDetector vad;", "modifier": "private", "type": "AutocorrellatedVoiceActivityDetector", "declarator": "vad", "var_name": "vad"}], "file": "recognito/src/test/java/com/bitsinharmony/recognito/vad/AutocorrellatedVoiceActivityDetectorTest.java"}, "test_case": {"identifier": "vadReturnsEmptyArrayWhenFedWithPureSilence", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void vadReturnsEmptyArrayWhenFedWithPureSilence() {\n        double[] output = vad.removeSilence(new double[8192], DEFAULT_SAMPLE_RATE);\n        \n        assertThat(output.length, is(equalTo(0)));\n    }", "signature": "void vadReturnsEmptyArrayWhenFedWithPureSilence()", "full_signature": "@Test public void vadReturnsEmptyArrayWhenFedWithPureSilence()", "class_method_signature": "AutocorrellatedVoiceActivityDetectorTest.vadReturnsEmptyArrayWhenFedWithPureSilence()", "testcase": true, "constructor": false, "invocations": ["removeSilence", "assertThat", "is", "equalTo"]}, "focal_class": {"identifier": "AutocorrellatedVoiceActivityDetector", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int WINDOW_MILLIS = 1;", "modifier": "private static final", "type": "int", "declarator": "WINDOW_MILLIS = 1", "var_name": "WINDOW_MILLIS"}, {"original_string": "private static final int FADE_MILLIS = 2;", "modifier": "private static final", "type": "int", "declarator": "FADE_MILLIS = 2", "var_name": "FADE_MILLIS"}, {"original_string": "private static final int MIN_SILENCE_MILLIS = 4;", "modifier": "private static final", "type": "int", "declarator": "MIN_SILENCE_MILLIS = 4", "var_name": "MIN_SILENCE_MILLIS"}, {"original_string": "private static final int MIN_VOICE_MILLIS = 200;", "modifier": "private static final", "type": "int", "declarator": "MIN_VOICE_MILLIS = 200", "var_name": "MIN_VOICE_MILLIS"}, {"original_string": "private double threshold = 0.0001d;", "modifier": "private", "type": "double", "declarator": "threshold = 0.0001d", "var_name": "threshold"}, {"original_string": "private double[] fadeInFactors;", "modifier": "private", "type": "double[]", "declarator": "fadeInFactors", "var_name": "fadeInFactors"}, {"original_string": "private double[] fadeOutFactors;", "modifier": "private", "type": "double[]", "declarator": "fadeOutFactors", "var_name": "fadeOutFactors"}], "methods": [{"identifier": "getAutocorrellationThreshold", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getAutocorrellationThreshold()", "full_signature": "public double getAutocorrellationThreshold()", "class_method_signature": "AutocorrellatedVoiceActivityDetector.getAutocorrellationThreshold()", "testcase": false, "constructor": false}, {"identifier": "setAutocorrellationThreshold", "parameters": "(double threshold)", "modifiers": "public", "return": "void", "signature": "void setAutocorrellationThreshold(double threshold)", "full_signature": "public void setAutocorrellationThreshold(double threshold)", "class_method_signature": "AutocorrellatedVoiceActivityDetector.setAutocorrellationThreshold(double threshold)", "testcase": false, "constructor": false}, {"identifier": "removeSilence", "parameters": "(double[] voiceSample, float sampleRate)", "modifiers": "public", "return": "double[]", "signature": "double[] removeSilence(double[] voiceSample, float sampleRate)", "full_signature": "public double[] removeSilence(double[] voiceSample, float sampleRate)", "class_method_signature": "AutocorrellatedVoiceActivityDetector.removeSilence(double[] voiceSample, float sampleRate)", "testcase": false, "constructor": false}, {"identifier": "getMinimumVoiceActivityLength", "parameters": "(float sampleRate)", "modifiers": "public", "return": "int", "signature": "int getMinimumVoiceActivityLength(float sampleRate)", "full_signature": "public int getMinimumVoiceActivityLength(float sampleRate)", "class_method_signature": "AutocorrellatedVoiceActivityDetector.getMinimumVoiceActivityLength(float sampleRate)", "testcase": false, "constructor": false}, {"identifier": "applyFadeInFadeOut", "parameters": "(double[] voiceSample, int fadeLength, int startIndex, int endIndex)", "modifiers": "private", "return": "void", "signature": "void applyFadeInFadeOut(double[] voiceSample, int fadeLength, int startIndex, int endIndex)", "full_signature": "private void applyFadeInFadeOut(double[] voiceSample, int fadeLength, int startIndex, int endIndex)", "class_method_signature": "AutocorrellatedVoiceActivityDetector.applyFadeInFadeOut(double[] voiceSample, int fadeLength, int startIndex, int endIndex)", "testcase": false, "constructor": false}, {"identifier": "mergeSmallActiveAreas", "parameters": "(boolean[] result, int minActivityLength)", "modifiers": "private", "return": "int", "signature": "int mergeSmallActiveAreas(boolean[] result, int minActivityLength)", "full_signature": "private int mergeSmallActiveAreas(boolean[] result, int minActivityLength)", "class_method_signature": "AutocorrellatedVoiceActivityDetector.mergeSmallActiveAreas(boolean[] result, int minActivityLength)", "testcase": false, "constructor": false}, {"identifier": "mergeSmallSilentAreas", "parameters": "(boolean[] result, int minSilenceLength)", "modifiers": "private", "return": "void", "signature": "void mergeSmallSilentAreas(boolean[] result, int minSilenceLength)", "full_signature": "private void mergeSmallSilentAreas(boolean[] result, int minSilenceLength)", "class_method_signature": "AutocorrellatedVoiceActivityDetector.mergeSmallSilentAreas(boolean[] result, int minSilenceLength)", "testcase": false, "constructor": false}, {"identifier": "initFadeFactors", "parameters": "(int fadeLength)", "modifiers": "private", "return": "void", "signature": "void initFadeFactors(int fadeLength)", "full_signature": "private void initFadeFactors(int fadeLength)", "class_method_signature": "AutocorrellatedVoiceActivityDetector.initFadeFactors(int fadeLength)", "testcase": false, "constructor": false}, {"identifier": "bruteForceAutocorrelation", "parameters": "(double[] voiceSample, double[] correllation)", "modifiers": "private", "return": "double", "signature": "double bruteForceAutocorrelation(double[] voiceSample, double[] correllation)", "full_signature": "private double bruteForceAutocorrelation(double[] voiceSample, double[] correllation)", "class_method_signature": "AutocorrellatedVoiceActivityDetector.bruteForceAutocorrelation(double[] voiceSample, double[] correllation)", "testcase": false, "constructor": false}], "file": "recognito/src/main/java/com/bitsinharmony/recognito/vad/AutocorrellatedVoiceActivityDetector.java"}, "focal_method": {"identifier": "removeSilence", "parameters": "(double[] voiceSample, float sampleRate)", "modifiers": "public", "return": "double[]", "body": "public double[] removeSilence(double[] voiceSample, float sampleRate) {\n        int oneMilliInSamples = (int)sampleRate / 1000;\n\n        int length = voiceSample.length;\n        int minSilenceLength = MIN_SILENCE_MILLIS * oneMilliInSamples;\n        int minActivityLength = getMinimumVoiceActivityLength(sampleRate);\n        boolean[] result = new boolean[length];\n        \n        if(length < minActivityLength) {\n            return voiceSample;\n        }\n\n        int windowSize = WINDOW_MILLIS * oneMilliInSamples;\n        double[] correllation = new double[windowSize];\n        double[] window = new double[windowSize];\n        \n        \n        for(int position = 0; position + windowSize < length; position += windowSize) {\n            System.arraycopy(voiceSample, position, window, 0, windowSize);\n            double mean = bruteForceAutocorrelation(window, correllation);\n            Arrays.fill(result, position, position + windowSize, mean > threshold);\n        }\n        \n\n        mergeSmallSilentAreas(result, minSilenceLength);\n        \n        int silenceCounter = mergeSmallActiveAreas(result, minActivityLength);\n\n//        System.out.println((int)((double)silenceCounter / result.length * 100.0d) + \"% removed\");\n   \n        if (silenceCounter > 0) {\n            \n            int fadeLength = FADE_MILLIS * oneMilliInSamples;\n            initFadeFactors(fadeLength);\n            double[] shortenedVoiceSample = new double[voiceSample.length - silenceCounter];\n            int copyCounter = 0;\n            for (int i = 0; i < result.length; i++) {\n                if (result[i]) {\n                    // detect lenght of active frame\n                    int startIndex = i;\n                    int counter = 0;\n                    while (i < result.length && result[i++]) {\n                        counter++;\n                    }\n                    int endIndex = startIndex + counter;\n\n                    applyFadeInFadeOut(voiceSample, fadeLength, startIndex, endIndex);\n                    System.arraycopy(voiceSample, startIndex, shortenedVoiceSample, copyCounter, counter);\n                    copyCounter += counter;\n                }\n            }\n            return shortenedVoiceSample;\n            \n        } else {\n            return voiceSample;\n        }\n    }", "signature": "double[] removeSilence(double[] voiceSample, float sampleRate)", "full_signature": "public double[] removeSilence(double[] voiceSample, float sampleRate)", "class_method_signature": "AutocorrellatedVoiceActivityDetector.removeSilence(double[] voiceSample, float sampleRate)", "testcase": false, "constructor": false, "invocations": ["getMinimumVoiceActivityLength", "arraycopy", "bruteForceAutocorrelation", "fill", "mergeSmallSilentAreas", "mergeSmallActiveAreas", "initFadeFactors", "applyFadeInFadeOut", "arraycopy"]}, "repository": {"repo_id": 16597144, "url": "https://github.com/amaurycrickx/recognito", "language": "Java", "is_fork": false, "fork_count": 100, "stargazer_count": 173, "size": 76, "license": "licensed"}}