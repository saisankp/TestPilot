{"test_class": {"identifier": "FlatConePenaltyHandicapTimeScoringInteractorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private FlatConePenaltyHandicapTimeScoringInteractor interactor;", "modifier": "private", "type": "FlatConePenaltyHandicapTimeScoringInteractor", "declarator": "interactor", "var_name": "interactor"}, {"original_string": "@Mock\n    ScoredRun scoredRun;", "modifier": "@Mock", "type": "ScoredRun", "declarator": "scoredRun", "var_name": "scoredRun"}, {"original_string": "@Mock\n    Run run;", "modifier": "@Mock", "type": "Run", "declarator": "run", "var_name": "run"}, {"original_string": "@Mock\n    Registration registration;", "modifier": "@Mock", "type": "Registration", "declarator": "registration", "var_name": "registration"}, {"original_string": "@Mock\n    HandicapGroup handicapGroup;", "modifier": "@Mock", "type": "HandicapGroup", "declarator": "handicapGroup", "var_name": "handicapGroup"}, {"original_string": "@Mock\n    CompetitionGroup competitionGroup;", "modifier": "@Mock", "type": "CompetitionGroup", "declarator": "competitionGroup", "var_name": "competitionGroup"}, {"original_string": "@Mock\n    Event event;", "modifier": "@Mock", "type": "Event", "declarator": "event", "var_name": "event"}, {"original_string": "private final BigDecimal runRawTime = BigDecimal.valueOf(100000, 3);", "modifier": "private final", "type": "BigDecimal", "declarator": "runRawTime = BigDecimal.valueOf(100000, 3)", "var_name": "runRawTime"}], "file": "service/src/test/java/org/coner/core/domain/interactor/FlatConePenaltyHandicapTimeScoringInteractorTest.java"}, "test_case": {"identifier": "itShouldSetHandicapTimeForCleanRun", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void itShouldSetHandicapTimeForCleanRun() {\n        when(run.getCones()).thenReturn(0);\n        BigDecimal expected = BigDecimal.valueOf(87600, 3);\n\n        interactor.score(scoredRun);\n\n        verify(scoredRun).setHandicapTimeScored(eq(expected));\n    }", "signature": "void itShouldSetHandicapTimeForCleanRun()", "full_signature": "@Test public void itShouldSetHandicapTimeForCleanRun()", "class_method_signature": "FlatConePenaltyHandicapTimeScoringInteractorTest.itShouldSetHandicapTimeForCleanRun()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getCones", "valueOf", "score", "setHandicapTimeScored", "verify", "eq"]}, "focal_class": {"identifier": "FlatConePenaltyHandicapTimeScoringInteractor", "superclass": "", "interfaces": "implements HandicapTimeScoringInteractor", "fields": [], "methods": [{"identifier": "FlatConePenaltyHandicapTimeScoringInteractor", "parameters": "()", "modifiers": "@Inject public", "return": "", "signature": " FlatConePenaltyHandicapTimeScoringInteractor()", "full_signature": "@Inject public  FlatConePenaltyHandicapTimeScoringInteractor()", "class_method_signature": "FlatConePenaltyHandicapTimeScoringInteractor.FlatConePenaltyHandicapTimeScoringInteractor()", "testcase": false, "constructor": true}, {"identifier": "score", "parameters": "(ScoredRun scoredRun)", "modifiers": "@Override public", "return": "void", "signature": "void score(ScoredRun scoredRun)", "full_signature": "@Override public void score(ScoredRun scoredRun)", "class_method_signature": "FlatConePenaltyHandicapTimeScoringInteractor.score(ScoredRun scoredRun)", "testcase": false, "constructor": false}], "file": "service/src/main/java/org/coner/core/domain/interactor/FlatConePenaltyHandicapTimeScoringInteractor.java"}, "focal_method": {"identifier": "score", "parameters": "(ScoredRun scoredRun)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void score(ScoredRun scoredRun) {\n        Run run = scoredRun.getRun();\n        BigDecimal scratchTime = run.getRawTime();\n        BigDecimal handicapGroupFactor = run.getRegistration().getHandicapGroup().getFactor();\n        BigDecimal competitionGroupFactor = run.getRegistration().getCompetitionGroup().getFactor();\n        BigDecimal handicapTimeScratch = scratchTime.multiply(handicapGroupFactor)\n                .multiply(competitionGroupFactor)\n                .setScale(3, RoundingMode.HALF_UP);\n        BigDecimal eventConePenaltySeconds = scoredRun.getRun().getEvent().getConePenaltySeconds();\n        BigDecimal conePenaltySeconds = eventConePenaltySeconds.multiply(BigDecimal.valueOf(run.getCones()));\n        BigDecimal handicapTimeScored = handicapTimeScratch.add(conePenaltySeconds);\n        scoredRun.setHandicapTimeScored(handicapTimeScored);\n    }", "signature": "void score(ScoredRun scoredRun)", "full_signature": "@Override public void score(ScoredRun scoredRun)", "class_method_signature": "FlatConePenaltyHandicapTimeScoringInteractor.score(ScoredRun scoredRun)", "testcase": false, "constructor": false, "invocations": ["getRun", "getRawTime", "getFactor", "getHandicapGroup", "getRegistration", "getFactor", "getCompetitionGroup", "getRegistration", "setScale", "multiply", "multiply", "getConePenaltySeconds", "getEvent", "getRun", "multiply", "valueOf", "getCones", "add", "setHandicapTimeScored"]}, "repository": {"repo_id": 28649714, "url": "https://github.com/caeos/coner-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 7, "size": 1027, "license": "licensed"}}