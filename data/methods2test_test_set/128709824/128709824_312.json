{"test_class": {"identifier": "HttpTracerUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "remoting/remoting-http/src/test/java/com/alipay/sofa/rpc/transport/http/HttpTracerUtilsTest.java"}, "test_case": {"identifier": "parseTraceKey", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parseTraceKey() {\n        Map<String, String> map = new HashMap<String, String>();\n        HttpTracerUtils.parseTraceKey(map, RemotingConstants.RPC_TRACE_NAME + \".xx\", \"11\");\n        Assert.assertEquals(\"11\", map.get(\"xx\"));\n\n        HttpTracerUtils.parseTraceKey(map, RemotingConstants.RPC_TRACE_NAME + \".\" + RemotingConstants.RPC_ID_KEY,\n            \"11\");\n        Assert.assertEquals(\"11\", map.get(RemotingConstants.RPC_ID_KEY));\n        HttpTracerUtils.parseTraceKey(map, RemotingConstants.RPC_TRACE_NAME + \".\"\n            + RemotingConstants.RPC_ID_KEY.toLowerCase(), \"11\");\n        Assert.assertEquals(\"11\", map.get(RemotingConstants.RPC_ID_KEY));\n    }", "signature": "void parseTraceKey()", "full_signature": "@Test public void parseTraceKey()", "class_method_signature": "HttpTracerUtilsTest.parseTraceKey()", "testcase": true, "constructor": false, "invocations": ["parseTraceKey", "assertEquals", "get", "parseTraceKey", "assertEquals", "get", "parseTraceKey", "toLowerCase", "assertEquals", "get"]}, "focal_class": {"identifier": "HttpTracerUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String              PREFIX         = RemotingConstants.RPC_TRACE_NAME + \".\";", "modifier": "private static final", "type": "String", "declarator": "PREFIX         = RemotingConstants.RPC_TRACE_NAME + \".\"", "var_name": "PREFIX"}, {"original_string": "private static final Map<String, String> TRACER_KEY_MAP = new HashMap<String, String>();", "modifier": "private static final", "type": "Map<String, String>", "declarator": "TRACER_KEY_MAP = new HashMap<String, String>()", "var_name": "TRACER_KEY_MAP"}], "methods": [{"identifier": "isTracerKey", "parameters": "(String key)", "modifiers": "public static", "return": "boolean", "signature": "boolean isTracerKey(String key)", "full_signature": "public static boolean isTracerKey(String key)", "class_method_signature": "HttpTracerUtils.isTracerKey(String key)", "testcase": false, "constructor": false}, {"identifier": "parseTraceKey", "parameters": "(Map<String, String> tracerMap, String key, String value)", "modifiers": "public static", "return": "void", "signature": "void parseTraceKey(Map<String, String> tracerMap, String key, String value)", "full_signature": "public static void parseTraceKey(Map<String, String> tracerMap, String key, String value)", "class_method_signature": "HttpTracerUtils.parseTraceKey(Map<String, String> tracerMap, String key, String value)", "testcase": false, "constructor": false}], "file": "remoting/remoting-http/src/main/java/com/alipay/sofa/rpc/transport/http/HttpTracerUtils.java"}, "focal_method": {"identifier": "parseTraceKey", "parameters": "(Map<String, String> tracerMap, String key, String value)", "modifiers": "public static", "return": "void", "body": "public static void parseTraceKey(Map<String, String> tracerMap, String key, String value) {\n        String lowKey = key.substring(PREFIX.length());\n        String realKey = TRACER_KEY_MAP.get(lowKey);\n        tracerMap.put(realKey == null ? lowKey : realKey, value);\n    }", "signature": "void parseTraceKey(Map<String, String> tracerMap, String key, String value)", "full_signature": "public static void parseTraceKey(Map<String, String> tracerMap, String key, String value)", "class_method_signature": "HttpTracerUtils.parseTraceKey(Map<String, String> tracerMap, String key, String value)", "testcase": false, "constructor": false, "invocations": ["substring", "length", "get", "put"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}