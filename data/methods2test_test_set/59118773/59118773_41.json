{"test_class": {"identifier": "CostEffectivenessVisualsControllerTest", "superclass": "extends AbstractEndPointControllerTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private CostEffectivenessVisualsController costEffectivenessVisualsController;", "modifier": "@Autowired\n    private", "type": "CostEffectivenessVisualsController", "declarator": "costEffectivenessVisualsController", "var_name": "costEffectivenessVisualsController"}], "file": "web/src/test/java/org/devgateway/ocds/web/rest/controller/CostEffectivenessVisualsControllerTest.java"}, "test_case": {"identifier": "costEffectivenessAwardAmount", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void costEffectivenessAwardAmount() throws Exception {\n        final List<Document> costEffectivenessAwardAmount = costEffectivenessVisualsController\n                .costEffectivenessAwardAmount(new YearFilterPagingRequest());\n\n        final Document first = costEffectivenessAwardAmount.get(0);\n        int year = (int) first.get(CostEffectivenessVisualsController.Keys.YEAR);\n        double totalAwardAmount = (double) first.get(CostEffectivenessVisualsController.Keys.TOTAL_AWARD_AMOUNT);\n        int totalAwards = (int) first.get(CostEffectivenessVisualsController.Keys.TOTAL_AWARDS);\n        int totalAwardsWithTender = (int) first.get(CostEffectivenessVisualsController.Keys.TOTAL_AWARDS_WITH_TENDER);\n        double percentageAwardsWithTender = (double) first.\n                get(CostEffectivenessVisualsController.Keys.PERCENTAGE_AWARDS_WITH_TENDER);\n        Assert.assertEquals(2014, year);\n        Assert.assertEquals(6000000.0, totalAwardAmount, 0);\n        Assert.assertEquals(1, totalAwards);\n        Assert.assertEquals(1, totalAwardsWithTender);\n        Assert.assertEquals(100.0, percentageAwardsWithTender, 0);\n\n        final Document second = costEffectivenessAwardAmount.get(1);\n        year = (int) second.get(CostEffectivenessVisualsController.Keys.YEAR);\n        totalAwardAmount = (double) second.get(CostEffectivenessVisualsController.Keys.TOTAL_AWARD_AMOUNT);\n        totalAwards = (int) second.get(CostEffectivenessVisualsController.Keys.TOTAL_AWARDS);\n        totalAwardsWithTender = (int) second.get(CostEffectivenessVisualsController.Keys.TOTAL_AWARDS_WITH_TENDER);\n        percentageAwardsWithTender = (double) second.\n                get(CostEffectivenessVisualsController.Keys.PERCENTAGE_AWARDS_WITH_TENDER);\n        Assert.assertEquals(2015, year);\n        Assert.assertEquals(40000.0, totalAwardAmount, 0);\n        Assert.assertEquals(1, totalAwards);\n        Assert.assertEquals(1, totalAwardsWithTender);\n        Assert.assertEquals(100.0, percentageAwardsWithTender, 0);\n    }", "signature": "void costEffectivenessAwardAmount()", "full_signature": "@Test public void costEffectivenessAwardAmount()", "class_method_signature": "CostEffectivenessVisualsControllerTest.costEffectivenessAwardAmount()", "testcase": true, "constructor": false, "invocations": ["costEffectivenessAwardAmount", "get", "get", "get", "get", "get", "get", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "get", "get", "get", "get", "get", "get", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "CostEffectivenessVisualsController", "superclass": "extends GenericOCDSController", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private AsyncControllerLookupService controllerLookupService;", "modifier": "@Autowired\n    private", "type": "AsyncControllerLookupService", "declarator": "controllerLookupService", "var_name": "controllerLookupService"}], "methods": [{"identifier": "costEffectivenessAwardAmount", "parameters": "(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"Cost effectiveness of Awards: Displays the total amount of active awards grouped by year.\" + \"The tender entity, for each award, has to have amount value. The year is calculated from \" + MongoConstants.FieldNames.TENDER_PERIOD_START_DATE) @RequestMapping(value = \"/api/costEffectivenessAwardAmount\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "signature": "List<Document> costEffectivenessAwardAmount(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"Cost effectiveness of Awards: Displays the total amount of active awards grouped by year.\" + \"The tender entity, for each award, has to have amount value. The year is calculated from \" + MongoConstants.FieldNames.TENDER_PERIOD_START_DATE) @RequestMapping(value = \"/api/costEffectivenessAwardAmount\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> costEffectivenessAwardAmount(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "CostEffectivenessVisualsController.costEffectivenessAwardAmount(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false}, {"identifier": "costEffectivenessTenderAmount", "parameters": "(\n            @ModelAttribute @Valid final GroupingFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"Cost effectiveness of Tenders:\" + \" Displays the total amount of the active tenders that have active awards, \" + \"grouped by year. Only tenders.status=active\" + \"are taken into account. The year is calculated from tenderPeriod.startDate\") @RequestMapping(value = \"/api/costEffectivenessTenderAmount\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "signature": "List<Document> costEffectivenessTenderAmount(\n            @ModelAttribute @Valid final GroupingFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"Cost effectiveness of Tenders:\" + \" Displays the total amount of the active tenders that have active awards, \" + \"grouped by year. Only tenders.status=active\" + \"are taken into account. The year is calculated from tenderPeriod.startDate\") @RequestMapping(value = \"/api/costEffectivenessTenderAmount\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> costEffectivenessTenderAmount(\n            @ModelAttribute @Valid final GroupingFilterPagingRequest filter)", "class_method_signature": "CostEffectivenessVisualsController.costEffectivenessTenderAmount(\n            @ModelAttribute @Valid final GroupingFilterPagingRequest filter)", "testcase": false, "constructor": false}, {"identifier": "getYearMonthlyKey", "parameters": "(GroupingFilterPagingRequest filter, Document db)", "modifiers": "private", "return": "String", "signature": "String getYearMonthlyKey(GroupingFilterPagingRequest filter, Document db)", "full_signature": "private String getYearMonthlyKey(GroupingFilterPagingRequest filter, Document db)", "class_method_signature": "CostEffectivenessVisualsController.getYearMonthlyKey(GroupingFilterPagingRequest filter, Document db)", "testcase": false, "constructor": false}, {"identifier": "costEffectivenessTenderAwardAmount", "parameters": "(\n            @ModelAttribute @Valid final GroupingFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"Aggregated version of /api/costEffectivenessTenderAmount and \" + \"/api/costEffectivenessAwardAmount.\" + \"This endpoint aggregates the responses from the specified endpoints, per year. \" + \"Responds to the same filters.\") @RequestMapping(value = \"/api/costEffectivenessTenderAwardAmount\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "ArrayList<Document>", "signature": "ArrayList<Document> costEffectivenessTenderAwardAmount(\n            @ModelAttribute @Valid final GroupingFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"Aggregated version of /api/costEffectivenessTenderAmount and \" + \"/api/costEffectivenessAwardAmount.\" + \"This endpoint aggregates the responses from the specified endpoints, per year. \" + \"Responds to the same filters.\") @RequestMapping(value = \"/api/costEffectivenessTenderAwardAmount\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public ArrayList<Document> costEffectivenessTenderAwardAmount(\n            @ModelAttribute @Valid final GroupingFilterPagingRequest filter)", "class_method_signature": "CostEffectivenessVisualsController.costEffectivenessTenderAwardAmount(\n            @ModelAttribute @Valid final GroupingFilterPagingRequest filter)", "testcase": false, "constructor": false}], "file": "web/src/main/java/org/devgateway/ocds/web/rest/controller/CostEffectivenessVisualsController.java"}, "focal_method": {"identifier": "costEffectivenessAwardAmount", "parameters": "(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"Cost effectiveness of Awards: Displays the total amount of active awards grouped by year.\" + \"The tender entity, for each award, has to have amount value. The year is calculated from \" + MongoConstants.FieldNames.TENDER_PERIOD_START_DATE) @RequestMapping(value = \"/api/costEffectivenessAwardAmount\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "body": "@ApiOperation(value = \"Cost effectiveness of Awards: Displays the total amount of active awards grouped by year.\"\n            + \"The tender entity, for each award, has to have amount value. The year is calculated from \"\n            + MongoConstants.FieldNames.TENDER_PERIOD_START_DATE)\n    @RequestMapping(value = \"/api/costEffectivenessAwardAmount\",\n            method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\")\n    public List<Document> costEffectivenessAwardAmount(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter) {\n\n        DBObject project = new BasicDBObject();\n        addYearlyMonthlyProjection(filter, project, ref(MongoConstants.FieldNames.TENDER_PERIOD_START_DATE));\n        project.put(MongoConstants.FieldNames.AWARDS_VALUE_AMOUNT, 1);\n        project.put(\"totalAwardsWithTender\", new BasicDBObject(\n                \"$cond\",\n                Arrays.asList(new BasicDBObject(\n                        \"$gt\",\n                        Arrays.asList(ref(MongoConstants.FieldNames.TENDER_PERIOD_START_DATE), null)\n                ), 1, 0)\n        ));\n        project.put(\n                \"awardsWithTenderValue\",\n                new BasicDBObject(\n                        \"$cond\",\n                        Arrays.asList(new BasicDBObject(\n                                        \"$gt\",\n                                        Arrays.asList(ref(MongoConstants.FieldNames.TENDER_PERIOD_START_DATE), null)\n                                ),\n                                \"$awards.value.amount\", 0\n                        )\n                )\n        );\n\n        Aggregation agg = Aggregation.newAggregation(\n                match(where(\"awards\").elemMatch(where(\"status\").is(Award.Status.active.toString()))\n                        .and(MongoConstants.FieldNames.AWARDS_DATE)\n                        .exists(true)\n                        .and(MongoConstants.FieldNames.TENDER_PERIOD_START_DATE)\n                        .exists(true)),\n                getMatchDefaultFilterOperation(filter), unwind(\"awards\"),\n                match(where(MongoConstants.FieldNames.AWARDS_STATUS).is(Award.Status.active.toString())\n                        .and(\"awards.value\")\n                        .exists(true)\n                        .\n                                andOperator(getYearDefaultFilterCriteria(\n                                        filter,\n                                        MongoConstants.FieldNames.TENDER_PERIOD_START_DATE\n                                ))),\n                new CustomProjectionOperation(project),\n                getYearlyMonthlyGroupingOperation(filter)\n                        .sum(\"awardsWithTenderValue\").as(Keys.TOTAL_AWARD_AMOUNT).count().as(Keys.TOTAL_AWARDS)\n                        .sum(\"totalAwardsWithTender\").as(Keys.TOTAL_AWARDS_WITH_TENDER),\n                project(Fields.UNDERSCORE_ID, Keys.TOTAL_AWARD_AMOUNT, Keys.TOTAL_AWARDS, Keys.TOTAL_AWARDS_WITH_TENDER)\n                        .and(Keys.TOTAL_AWARDS_WITH_TENDER).divide(Keys.TOTAL_AWARDS)\n                        .as(Keys.FRACTION_AWARDS_WITH_TENDER),\n                project(\n                        Fields.UNDERSCORE_ID, Keys.TOTAL_AWARD_AMOUNT, Keys.TOTAL_AWARDS, Keys.TOTAL_AWARDS_WITH_TENDER,\n                        Keys.FRACTION_AWARDS_WITH_TENDER\n                ).and(Keys.FRACTION_AWARDS_WITH_TENDER).multiply(100)\n                        .as(Keys.PERCENTAGE_AWARDS_WITH_TENDER),\n                transformYearlyGrouping(filter).andInclude(Keys.TOTAL_AWARD_AMOUNT, Keys.TOTAL_AWARDS,\n                        Keys.TOTAL_AWARDS_WITH_TENDER, Keys.PERCENTAGE_AWARDS_WITH_TENDER\n                ), getSortByYearMonth(filter),\n                skip(filter.getSkip()), limit(filter.getPageSize())\n        );\n\n\n        return releaseAgg(agg);\n    }", "signature": "List<Document> costEffectivenessAwardAmount(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"Cost effectiveness of Awards: Displays the total amount of active awards grouped by year.\" + \"The tender entity, for each award, has to have amount value. The year is calculated from \" + MongoConstants.FieldNames.TENDER_PERIOD_START_DATE) @RequestMapping(value = \"/api/costEffectivenessAwardAmount\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> costEffectivenessAwardAmount(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "CostEffectivenessVisualsController.costEffectivenessAwardAmount(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false, "invocations": ["addYearlyMonthlyProjection", "ref", "put", "put", "asList", "asList", "ref", "put", "asList", "asList", "ref", "newAggregation", "match", "exists", "and", "exists", "and", "elemMatch", "where", "is", "where", "toString", "getMatchDefaultFilterOperation", "unwind", "match", "andOperator", "exists", "and", "is", "where", "toString", "getYearDefaultFilterCriteria", "as", "sum", "as", "count", "as", "sum", "getYearlyMonthlyGroupingOperation", "as", "divide", "and", "project", "as", "multiply", "and", "project", "andInclude", "transformYearlyGrouping", "getSortByYearMonth", "skip", "getSkip", "limit", "getPageSize", "releaseAgg"]}, "repository": {"repo_id": 59118773, "url": "https://github.com/devgateway/oc-explorer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 9004, "license": "licensed"}}