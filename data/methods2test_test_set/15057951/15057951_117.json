{"test_class": {"identifier": "StrictMatcherTest", "superclass": "", "interfaces": "", "fields": [], "file": "smartparam-engine/src/test/java/org/smartparam/engine/matchers/StrictMatcherTest.java"}, "test_case": {"identifier": "shouldReturnTrueWhenValueIsEmptyAndPatternIsAStar", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnTrueWhenValueIsEmptyAndPatternIsAStar() {\n        // given\n        StrictMatcher matcher = new StrictMatcher();\n\n        // when\n        boolean matches = matcher.matches(\"\", \"*\", null);\n\n        // then\n        assertThat(matches).isTrue();\n    }", "signature": "void shouldReturnTrueWhenValueIsEmptyAndPatternIsAStar()", "full_signature": "@Test public void shouldReturnTrueWhenValueIsEmptyAndPatternIsAStar()", "class_method_signature": "StrictMatcherTest.shouldReturnTrueWhenValueIsEmptyAndPatternIsAStar()", "testcase": true, "constructor": false, "invocations": ["matches", "isTrue", "assertThat"]}, "focal_class": {"identifier": "StrictMatcher", "superclass": "", "interfaces": "implements Matcher", "fields": [{"original_string": "public static final String STRICT = \"equals/strict\";", "modifier": "public static final", "type": "String", "declarator": "STRICT = \"equals/strict\"", "var_name": "STRICT"}], "methods": [{"identifier": "matches", "parameters": "(String value, String pattern, Type<T> type)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean matches(String value, String pattern, Type<T> type)", "full_signature": "@Override public boolean matches(String value, String pattern, Type<T> type)", "class_method_signature": "StrictMatcher.matches(String value, String pattern, Type<T> type)", "testcase": false, "constructor": false}], "file": "smartparam-engine/src/main/java/org/smartparam/engine/matchers/StrictMatcher.java"}, "focal_method": {"identifier": "matches", "parameters": "(String value, String pattern, Type<T> type)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public <T extends ValueHolder> boolean matches(String value, String pattern, Type<T> type) {\n        if(!EngineUtil.hasText(value)) {\n            return Star.SYMBOL.equals(pattern);\n        }\n        return pattern.equals(value);\n    }", "signature": "boolean matches(String value, String pattern, Type<T> type)", "full_signature": "@Override public boolean matches(String value, String pattern, Type<T> type)", "class_method_signature": "StrictMatcher.matches(String value, String pattern, Type<T> type)", "testcase": false, "constructor": false, "invocations": ["hasText", "equals", "equals"]}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}