{"test_class": {"identifier": "EncodingTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST_VALUE = \"The quick brown fox jumps over the lazy dog.\";", "modifier": "private static final", "type": "String", "declarator": "TEST_VALUE = \"The quick brown fox jumps over the lazy dog.\"", "var_name": "TEST_VALUE"}, {"original_string": "private static final String TEST_VALUE_BASE64 = \"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZy4=\";", "modifier": "private static final", "type": "String", "declarator": "TEST_VALUE_BASE64 = \"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZy4=\"", "var_name": "TEST_VALUE_BASE64"}, {"original_string": "private Encoding encoding;", "modifier": "private", "type": "Encoding", "declarator": "encoding", "var_name": "encoding"}], "file": "library/src/test/java/ro/omen/encryptedprefs/utils/EncodingTest.java"}, "test_case": {"identifier": "fromBase64ToBytes_ShouldDecodeToBase64String", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void fromBase64ToBytes_ShouldDecodeToBase64String() {\n        byte[] expectedBytes = TEST_VALUE.getBytes(SSCharset.CHARSET);\n        PowerMockito.when(Base64.decode(TEST_VALUE_BASE64.getBytes(SSCharset.CHARSET), Base64.NO_WRAP))\n                .thenReturn(expectedBytes);\n\n        Assert.assertTrue(Arrays.equals(expectedBytes, encoding.fromBase64ToBytes(TEST_VALUE_BASE64)));\n    }", "signature": "void fromBase64ToBytes_ShouldDecodeToBase64String()", "full_signature": "@Test public void fromBase64ToBytes_ShouldDecodeToBase64String()", "class_method_signature": "EncodingTest.fromBase64ToBytes_ShouldDecodeToBase64String()", "testcase": true, "constructor": false, "invocations": ["getBytes", "thenReturn", "when", "decode", "getBytes", "assertTrue", "equals", "fromBase64ToBytes"]}, "focal_class": {"identifier": "Encoding", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "toBase64", "parameters": "(@NonNull String value)", "modifiers": "@NonNull public", "return": "String", "signature": "String toBase64(@NonNull String value)", "full_signature": "@NonNull public String toBase64(@NonNull String value)", "class_method_signature": "Encoding.toBase64(@NonNull String value)", "testcase": false, "constructor": false}, {"identifier": "fromBase64ToString", "parameters": "(@NonNull String value)", "modifiers": "@NonNull public", "return": "String", "signature": "String fromBase64ToString(@NonNull String value)", "full_signature": "@NonNull public String fromBase64ToString(@NonNull String value)", "class_method_signature": "Encoding.fromBase64ToString(@NonNull String value)", "testcase": false, "constructor": false}, {"identifier": "toBase64", "parameters": "(@NonNull byte[] value)", "modifiers": "@NonNull public", "return": "String", "signature": "String toBase64(@NonNull byte[] value)", "full_signature": "@NonNull public String toBase64(@NonNull byte[] value)", "class_method_signature": "Encoding.toBase64(@NonNull byte[] value)", "testcase": false, "constructor": false}, {"identifier": "fromBase64ToBytes", "parameters": "(@NonNull String value)", "modifiers": "@NonNull public", "return": "byte[]", "signature": "byte[] fromBase64ToBytes(@NonNull String value)", "full_signature": "@NonNull public byte[] fromBase64ToBytes(@NonNull String value)", "class_method_signature": "Encoding.fromBase64ToBytes(@NonNull String value)", "testcase": false, "constructor": false}], "file": "library/src/main/java/ro/omen/encryptedprefs/utils/Encoding.java"}, "focal_method": {"identifier": "fromBase64ToBytes", "parameters": "(@NonNull String value)", "modifiers": "@NonNull public", "return": "byte[]", "body": "@NonNull\n    public byte[] fromBase64ToBytes(@NonNull String value) {\n\n        ESLog.v(\"%s=>fromBase64ToBytes(%s)\", getClass().getSimpleName(), value);\n        return Base64.decode(value.getBytes(SSCharset.CHARSET), Base64.NO_WRAP);\n    }", "signature": "byte[] fromBase64ToBytes(@NonNull String value)", "full_signature": "@NonNull public byte[] fromBase64ToBytes(@NonNull String value)", "class_method_signature": "Encoding.fromBase64ToBytes(@NonNull String value)", "testcase": false, "constructor": false, "invocations": ["v", "getSimpleName", "getClass", "decode", "getBytes"]}, "repository": {"repo_id": 87972852, "url": "https://github.com/marius-bardan/encryptedprefs", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 117, "license": "licensed"}}