{"test_class": {"identifier": "Log4jOverridableConfigurerTest", "superclass": "extends AbstractDaoTest", "interfaces": "", "fields": [{"original_string": "private static final String LOG4J_CONFIG_FILENAME = \"classpath:log4jOverridableConfigurer-log4j.xml\";", "modifier": "private static final", "type": "String", "declarator": "LOG4J_CONFIG_FILENAME = \"classpath:log4jOverridableConfigurer-log4j.xml\"", "var_name": "LOG4J_CONFIG_FILENAME"}, {"original_string": "private static final String LOG4J_CONFIG_NO_CLOB_FILENAME = \"classpath:log4jOverridableConfigurerNoClob-log4j.xml\";", "modifier": "private static final", "type": "String", "declarator": "LOG4J_CONFIG_NO_CLOB_FILENAME = \"classpath:log4jOverridableConfigurerNoClob-log4j.xml\"", "var_name": "LOG4J_CONFIG_NO_CLOB_FILENAME"}, {"original_string": "private static final String LOG4J_FILENAME_TOKEN = \"~log4jFileLocation~\";", "modifier": "private static final", "type": "String", "declarator": "LOG4J_FILENAME_TOKEN = \"~log4jFileLocation~\"", "var_name": "LOG4J_FILENAME_TOKEN"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(Log4jOverridableConfigurerTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(Log4jOverridableConfigurerTest.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private ApplicationContext applicationContext;", "modifier": "@Autowired\n    private", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}], "file": "herd-code/herd-dao/src/test/java/org/finra/herd/dao/Log4jOverridableConfigurerTest.java"}, "test_case": {"identifier": "testLog4JDbWithRefreshInterval", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLog4JDbWithRefreshInterval() throws Exception\n    {\n        Path configPath = getRandomLog4jConfigPath();\n        Path outputPath = getRandomLog4jOutputPath();\n\n        String configKey = null;\n        try\n        {\n            // Create a random configuration key to use when inserting the Log4J configuration into the database.\n            configKey = ConfigurationValue.LOG4J_OVERRIDE_CONFIGURATION.getKey() + UUID.randomUUID().toString().substring(0, 5);\n\n            // Insert the standard JUnit Log4J configuration that won't create an output file into the database using the CLOB column.\n            // We will use a monitoring interval of 1 second to ensure the watch dog thread gets executed.\n            insertDbLog4JConfigurationFromResourceLocation(DaoEnvTestSpringModuleConfig.TEST_LOG4J_CONFIG_RESOURCE_LOCATION, 1, outputPath,\n                ConfigurationEntity.COLUMN_VALUE_CLOB, configKey);\n\n            // Shutdown the previously configured logging so we can reinitialize it below.\n            loggingHelper.shutdownLogging();\n\n            // Initialize Log4J with a refresh interval of 1/2 second. This will cause Log4J to check for configuration updates every second.\n            Log4jOverridableConfigurer log4jConfigurer = getLog4jOverridableConfigurerForDb(configKey);\n            log4jConfigurer.postProcessBeforeInitialization(null, null);\n\n            // First ensure that the Log4J output file doesn't exist.\n            assertTrue(\"Log4J output file exists, but shouldn't.\", Files.notExists(outputPath));\n\n            // Update the Log4J configuration with one that will create a log file.\n            updateDbLog4JConfigurationFromResourceLocation(LOG4J_CONFIG_FILENAME, outputPath, ConfigurationEntity.COLUMN_VALUE_CLOB, configKey);\n\n            // Sleep 3 seconds which will give our watch dog thread and Log4J a chance to read the new configuration file which should create an output file.\n            Thread.sleep(3000);\n\n            // Ensure that the Log4J output file now exists.\n            assertTrue(\"Log4J output file doesn't exist, but should.\", Files.exists(outputPath));\n        }\n        finally\n        {\n            cleanup(configPath, outputPath);\n            deleteDbLog4JConfiguration(configKey);\n        }\n    }", "signature": "void testLog4JDbWithRefreshInterval()", "full_signature": "@Test public void testLog4JDbWithRefreshInterval()", "class_method_signature": "Log4jOverridableConfigurerTest.testLog4JDbWithRefreshInterval()", "testcase": true, "constructor": false, "invocations": ["getRandomLog4jConfigPath", "getRandomLog4jOutputPath", "getKey", "substring", "toString", "randomUUID", "insertDbLog4JConfigurationFromResourceLocation", "shutdownLogging", "getLog4jOverridableConfigurerForDb", "postProcessBeforeInitialization", "assertTrue", "notExists", "updateDbLog4JConfigurationFromResourceLocation", "sleep", "assertTrue", "exists", "cleanup", "deleteDbLog4JConfiguration"]}, "focal_class": {"identifier": "Log4jOverridableConfigurer", "superclass": "", "interfaces": "implements BeanPostProcessor, PriorityOrdered, ApplicationContextAware", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(Log4jOverridableConfigurer.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(Log4jOverridableConfigurer.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private ApplicationContext applicationContext;", "modifier": "@Autowired\n    private", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}, {"original_string": "private String overrideResourceLocation;", "modifier": "private", "type": "String", "declarator": "overrideResourceLocation", "var_name": "overrideResourceLocation"}, {"original_string": "private String defaultResourceLocation;", "modifier": "private", "type": "String", "declarator": "defaultResourceLocation", "var_name": "defaultResourceLocation"}, {"original_string": "private String tableName;", "modifier": "private", "type": "String", "declarator": "tableName", "var_name": "tableName"}, {"original_string": "private String selectColumn;", "modifier": "private", "type": "String", "declarator": "selectColumn", "var_name": "selectColumn"}, {"original_string": "private String whereColumn;", "modifier": "private", "type": "String", "declarator": "whereColumn", "var_name": "whereColumn"}, {"original_string": "private String whereValue;", "modifier": "private", "type": "String", "declarator": "whereValue", "var_name": "whereValue"}, {"original_string": "private DataSource dataSource;", "modifier": "private", "type": "DataSource", "declarator": "dataSource", "var_name": "dataSource"}, {"original_string": "private boolean loggingInitialized;", "modifier": "private", "type": "boolean", "declarator": "loggingInitialized", "var_name": "loggingInitialized"}, {"original_string": "private String existingDbLog4JConfiguration;", "modifier": "private", "type": "String", "declarator": "existingDbLog4JConfiguration", "var_name": "existingDbLog4JConfiguration"}, {"original_string": "private Path tempFile = null;", "modifier": "private", "type": "Path", "declarator": "tempFile = null", "var_name": "tempFile"}, {"original_string": "private Log4jDbWatchdog watchdog;", "modifier": "private", "type": "Log4jDbWatchdog", "declarator": "watchdog", "var_name": "watchdog"}, {"original_string": "private LoggerContext loggerContext;", "modifier": "private", "type": "LoggerContext", "declarator": "loggerContext", "var_name": "loggerContext"}], "methods": [{"identifier": "postProcessBeforeInitialization", "parameters": "(Object bean, String beanName)", "modifiers": "@Override public", "return": "Object", "signature": "Object postProcessBeforeInitialization(Object bean, String beanName)", "full_signature": "@Override public Object postProcessBeforeInitialization(Object bean, String beanName)", "class_method_signature": "Log4jOverridableConfigurer.postProcessBeforeInitialization(Object bean, String beanName)", "testcase": false, "constructor": false}, {"identifier": "postProcessAfterInitialization", "parameters": "(Object bean, String beanName)", "modifiers": "@Override public", "return": "Object", "signature": "Object postProcessAfterInitialization(Object bean, String beanName)", "full_signature": "@Override public Object postProcessAfterInitialization(Object bean, String beanName)", "class_method_signature": "Log4jOverridableConfigurer.postProcessAfterInitialization(Object bean, String beanName)", "testcase": false, "constructor": false}, {"identifier": "initLogging", "parameters": "()", "modifiers": "@SuppressWarnings(\"PMD.SystemPrintln\") private", "return": "void", "signature": "void initLogging()", "full_signature": "@SuppressWarnings(\"PMD.SystemPrintln\") private void initLogging()", "class_method_signature": "Log4jOverridableConfigurer.initLogging()", "testcase": false, "constructor": false}, {"identifier": "initializeLog4jFromResourceLocation", "parameters": "(String resourceLocation)", "modifiers": "@SuppressWarnings(\"PMD.SystemPrintln\") private", "return": "boolean", "signature": "boolean initializeLog4jFromResourceLocation(String resourceLocation)", "full_signature": "@SuppressWarnings(\"PMD.SystemPrintln\") private boolean initializeLog4jFromResourceLocation(String resourceLocation)", "class_method_signature": "Log4jOverridableConfigurer.initializeLog4jFromResourceLocation(String resourceLocation)", "testcase": false, "constructor": false}, {"identifier": "initializeLog4jFromDatabase", "parameters": "()", "modifiers": "@SuppressWarnings(\"PMD.SystemPrintln\") private", "return": "boolean", "signature": "boolean initializeLog4jFromDatabase()", "full_signature": "@SuppressWarnings(\"PMD.SystemPrintln\") private boolean initializeLog4jFromDatabase()", "class_method_signature": "Log4jOverridableConfigurer.initializeLog4jFromDatabase()", "testcase": false, "constructor": false}, {"identifier": "isDbConfigurationPresent", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isDbConfigurationPresent()", "full_signature": "private boolean isDbConfigurationPresent()", "class_method_signature": "Log4jOverridableConfigurer.isDbConfigurationPresent()", "testcase": false, "constructor": false}, {"identifier": "getLog4JConfigurationRetrievalQuery", "parameters": "(boolean isForLogging)", "modifiers": "private", "return": "String", "signature": "String getLog4JConfigurationRetrievalQuery(boolean isForLogging)", "full_signature": "private String getLog4JConfigurationRetrievalQuery(boolean isForLogging)", "class_method_signature": "Log4jOverridableConfigurer.getLog4JConfigurationRetrievalQuery(boolean isForLogging)", "testcase": false, "constructor": false}, {"identifier": "getLog4JConfigurationFromDatabase", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getLog4JConfigurationFromDatabase()", "full_signature": "protected String getLog4JConfigurationFromDatabase()", "class_method_signature": "Log4jOverridableConfigurer.getLog4JConfigurationFromDatabase()", "testcase": false, "constructor": false}, {"identifier": "getConfigurationFromResultSet", "parameters": "(ResultSet resultSet, String selectColumn)", "modifiers": "protected", "return": "String", "signature": "String getConfigurationFromResultSet(ResultSet resultSet, String selectColumn)", "full_signature": "protected String getConfigurationFromResultSet(ResultSet resultSet, String selectColumn)", "class_method_signature": "Log4jOverridableConfigurer.getConfigurationFromResultSet(ResultSet resultSet, String selectColumn)", "testcase": false, "constructor": false}, {"identifier": "convertClob", "parameters": "(Clob clob)", "modifiers": "protected", "return": "String", "signature": "String convertClob(Clob clob)", "full_signature": "protected String convertClob(Clob clob)", "class_method_signature": "Log4jOverridableConfigurer.convertClob(Clob clob)", "testcase": false, "constructor": false}, {"identifier": "getOrder", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getOrder()", "full_signature": "@Override public int getOrder()", "class_method_signature": "Log4jOverridableConfigurer.getOrder()", "testcase": false, "constructor": false}, {"identifier": "setApplicationContext", "parameters": "(ApplicationContext applicationContext)", "modifiers": "@Override public", "return": "void", "signature": "void setApplicationContext(ApplicationContext applicationContext)", "full_signature": "@Override public void setApplicationContext(ApplicationContext applicationContext)", "class_method_signature": "Log4jOverridableConfigurer.setApplicationContext(ApplicationContext applicationContext)", "testcase": false, "constructor": false}, {"identifier": "setOverrideResourceLocation", "parameters": "(String overrideResourceLocation)", "modifiers": "public", "return": "void", "signature": "void setOverrideResourceLocation(String overrideResourceLocation)", "full_signature": "public void setOverrideResourceLocation(String overrideResourceLocation)", "class_method_signature": "Log4jOverridableConfigurer.setOverrideResourceLocation(String overrideResourceLocation)", "testcase": false, "constructor": false}, {"identifier": "setDefaultResourceLocation", "parameters": "(String defaultResourceLocation)", "modifiers": "public", "return": "void", "signature": "void setDefaultResourceLocation(String defaultResourceLocation)", "full_signature": "public void setDefaultResourceLocation(String defaultResourceLocation)", "class_method_signature": "Log4jOverridableConfigurer.setDefaultResourceLocation(String defaultResourceLocation)", "testcase": false, "constructor": false}, {"identifier": "setTableName", "parameters": "(String tableName)", "modifiers": "public", "return": "void", "signature": "void setTableName(String tableName)", "full_signature": "public void setTableName(String tableName)", "class_method_signature": "Log4jOverridableConfigurer.setTableName(String tableName)", "testcase": false, "constructor": false}, {"identifier": "setSelectColumn", "parameters": "(String selectColumn)", "modifiers": "public", "return": "void", "signature": "void setSelectColumn(String selectColumn)", "full_signature": "public void setSelectColumn(String selectColumn)", "class_method_signature": "Log4jOverridableConfigurer.setSelectColumn(String selectColumn)", "testcase": false, "constructor": false}, {"identifier": "setWhereColumn", "parameters": "(String whereColumn)", "modifiers": "public", "return": "void", "signature": "void setWhereColumn(String whereColumn)", "full_signature": "public void setWhereColumn(String whereColumn)", "class_method_signature": "Log4jOverridableConfigurer.setWhereColumn(String whereColumn)", "testcase": false, "constructor": false}, {"identifier": "setWhereValue", "parameters": "(String whereValue)", "modifiers": "public", "return": "void", "signature": "void setWhereValue(String whereValue)", "full_signature": "public void setWhereValue(String whereValue)", "class_method_signature": "Log4jOverridableConfigurer.setWhereValue(String whereValue)", "testcase": false, "constructor": false}, {"identifier": "setDataSource", "parameters": "(DataSource dataSource)", "modifiers": "public", "return": "void", "signature": "void setDataSource(DataSource dataSource)", "full_signature": "public void setDataSource(DataSource dataSource)", "class_method_signature": "Log4jOverridableConfigurer.setDataSource(DataSource dataSource)", "testcase": false, "constructor": false}, {"identifier": "initializeConfiguration", "parameters": "(String xmlConfigurationString)", "modifiers": "@SuppressWarnings(\"PMD.SystemPrintln\") private", "return": "void", "signature": "void initializeConfiguration(String xmlConfigurationString)", "full_signature": "@SuppressWarnings(\"PMD.SystemPrintln\") private void initializeConfiguration(String xmlConfigurationString)", "class_method_signature": "Log4jOverridableConfigurer.initializeConfiguration(String xmlConfigurationString)", "testcase": false, "constructor": false}, {"identifier": "getRefreshIntervalSeconds", "parameters": "(String xmlConfigurationString)", "modifiers": "private", "return": "int", "signature": "int getRefreshIntervalSeconds(String xmlConfigurationString)", "full_signature": "private int getRefreshIntervalSeconds(String xmlConfigurationString)", "class_method_signature": "Log4jOverridableConfigurer.getRefreshIntervalSeconds(String xmlConfigurationString)", "testcase": false, "constructor": false}], "file": "herd-code/herd-dao/src/main/java/org/finra/herd/dao/Log4jOverridableConfigurer.java"}, "focal_method": {"identifier": "postProcessBeforeInitialization", "parameters": "(Object bean, String beanName)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException\n    {\n        // Perform our initialization one time even though this method will be called once for each bean being initialized.\n        // The bean properties will have already been set by the time this method is called which is required for our initialization.\n        if (!loggingInitialized)\n        {\n            initLogging();\n            loggingInitialized = true;\n        }\n\n        // Perform the standard processing by returning the original bean.\n        return bean;\n    }", "signature": "Object postProcessBeforeInitialization(Object bean, String beanName)", "full_signature": "@Override public Object postProcessBeforeInitialization(Object bean, String beanName)", "class_method_signature": "Log4jOverridableConfigurer.postProcessBeforeInitialization(Object bean, String beanName)", "testcase": false, "constructor": false, "invocations": ["initLogging"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}