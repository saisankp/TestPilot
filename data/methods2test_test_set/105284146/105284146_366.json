{"test_class": {"identifier": "UcteExporterTest", "superclass": "extends AbstractConverterTest", "interfaces": "", "fields": [], "file": "ucte/ucte-converter/src/test/java/com/powsybl/ucte/converter/UcteExporterTest.java"}, "test_case": {"identifier": "testChosenTwoNamingStrategies", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testChosenTwoNamingStrategies() {\n        NamingStrategy namingStrategy = UcteExporter.findNamingStrategy(\"Default\", ImmutableList.of(new DefaultNamingStrategy(), new OtherNamingStrategy()));\n        assertEquals(\"Default\", namingStrategy.getName());\n        namingStrategy = UcteExporter.findNamingStrategy(\"OtherNamingStrategy\", ImmutableList.of(new DefaultNamingStrategy(), new OtherNamingStrategy()));\n        assertEquals(\"OtherNamingStrategy\", namingStrategy.getName());\n    }", "signature": "void testChosenTwoNamingStrategies()", "full_signature": "@Test public void testChosenTwoNamingStrategies()", "class_method_signature": "UcteExporterTest.testChosenTwoNamingStrategies()", "testcase": true, "constructor": false, "invocations": ["findNamingStrategy", "of", "assertEquals", "getName", "findNamingStrategy", "of", "assertEquals", "getName"]}, "focal_class": {"identifier": "UcteExporter", "superclass": "", "interfaces": "implements Exporter", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(UcteExporter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(UcteExporter.class)", "var_name": "LOGGER"}, {"original_string": "public static final String NAMING_STRATEGY = \"ucte.export.naming-strategy\";", "modifier": "public static final", "type": "String", "declarator": "NAMING_STRATEGY = \"ucte.export.naming-strategy\"", "var_name": "NAMING_STRATEGY"}, {"original_string": "private static final Parameter NAMING_STRATEGY_PARAMETER = new Parameter(NAMING_STRATEGY, ParameterType.STRING, \"Default naming strategy for UCTE codes conversion\", \"Default\");", "modifier": "private static final", "type": "Parameter", "declarator": "NAMING_STRATEGY_PARAMETER = new Parameter(NAMING_STRATEGY, ParameterType.STRING, \"Default naming strategy for UCTE codes conversion\", \"Default\")", "var_name": "NAMING_STRATEGY_PARAMETER"}, {"original_string": "private static final Supplier<List<NamingStrategy>> NAMING_STRATEGY_SUPPLIERS\n            = Suppliers.memoize(() -> new ServiceLoaderCache<>(NamingStrategy.class).getServices());", "modifier": "private static final", "type": "Supplier<List<NamingStrategy>>", "declarator": "NAMING_STRATEGY_SUPPLIERS\n            = Suppliers.memoize(() -> new ServiceLoaderCache<>(NamingStrategy.class).getServices())", "var_name": "NAMING_STRATEGY_SUPPLIERS"}, {"original_string": "private final ParameterDefaultValueConfig defaultValueConfig;", "modifier": "private final", "type": "ParameterDefaultValueConfig", "declarator": "defaultValueConfig", "var_name": "defaultValueConfig"}], "methods": [{"identifier": "UcteExporter", "parameters": "()", "modifiers": "public", "return": "", "signature": " UcteExporter()", "full_signature": "public  UcteExporter()", "class_method_signature": "UcteExporter.UcteExporter()", "testcase": false, "constructor": true}, {"identifier": "UcteExporter", "parameters": "(PlatformConfig platformConfig)", "modifiers": "public", "return": "", "signature": " UcteExporter(PlatformConfig platformConfig)", "full_signature": "public  UcteExporter(PlatformConfig platformConfig)", "class_method_signature": "UcteExporter.UcteExporter(PlatformConfig platformConfig)", "testcase": false, "constructor": true}, {"identifier": "getFormat", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getFormat()", "full_signature": "@Override public String getFormat()", "class_method_signature": "UcteExporter.getFormat()", "testcase": false, "constructor": false}, {"identifier": "getComment", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getComment()", "full_signature": "@Override public String getComment()", "class_method_signature": "UcteExporter.getComment()", "testcase": false, "constructor": false}, {"identifier": "export", "parameters": "(Network network, Properties parameters, DataSource dataSource)", "modifiers": "@Override public", "return": "void", "signature": "void export(Network network, Properties parameters, DataSource dataSource)", "full_signature": "@Override public void export(Network network, Properties parameters, DataSource dataSource)", "class_method_signature": "UcteExporter.export(Network network, Properties parameters, DataSource dataSource)", "testcase": false, "constructor": false}, {"identifier": "createUcteNetwork", "parameters": "(Network network, NamingStrategy namingStrategy)", "modifiers": "private static", "return": "UcteNetwork", "signature": "UcteNetwork createUcteNetwork(Network network, NamingStrategy namingStrategy)", "full_signature": "private static UcteNetwork createUcteNetwork(Network network, NamingStrategy namingStrategy)", "class_method_signature": "UcteExporter.createUcteNetwork(Network network, NamingStrategy namingStrategy)", "testcase": false, "constructor": false}, {"identifier": "convertBus", "parameters": "(UcteNetwork ucteNetwork, Bus bus, UcteExporterContext context)", "modifiers": "private static", "return": "void", "signature": "void convertBus(UcteNetwork ucteNetwork, Bus bus, UcteExporterContext context)", "full_signature": "private static void convertBus(UcteNetwork ucteNetwork, Bus bus, UcteExporterContext context)", "class_method_signature": "UcteExporter.convertBus(UcteNetwork ucteNetwork, Bus bus, UcteExporterContext context)", "testcase": false, "constructor": false}, {"identifier": "convertLoads", "parameters": "(UcteNode ucteNode, Bus bus)", "modifiers": "private static", "return": "void", "signature": "void convertLoads(UcteNode ucteNode, Bus bus)", "full_signature": "private static void convertLoads(UcteNode ucteNode, Bus bus)", "class_method_signature": "UcteExporter.convertLoads(UcteNode ucteNode, Bus bus)", "testcase": false, "constructor": false}, {"identifier": "convertGenerators", "parameters": "(UcteNode ucteNode, Bus bus)", "modifiers": "private static", "return": "void", "signature": "void convertGenerators(UcteNode ucteNode, Bus bus)", "full_signature": "private static void convertGenerators(UcteNode ucteNode, Bus bus)", "class_method_signature": "UcteExporter.convertGenerators(UcteNode ucteNode, Bus bus)", "testcase": false, "constructor": false}, {"identifier": "convertXNode", "parameters": "(UcteNetwork ucteNetwork, DanglingLine danglingLine, UcteExporterContext context)", "modifiers": "private static", "return": "void", "signature": "void convertXNode(UcteNetwork ucteNetwork, DanglingLine danglingLine, UcteExporterContext context)", "full_signature": "private static void convertXNode(UcteNetwork ucteNetwork, DanglingLine danglingLine, UcteExporterContext context)", "class_method_signature": "UcteExporter.convertXNode(UcteNetwork ucteNetwork, DanglingLine danglingLine, UcteExporterContext context)", "testcase": false, "constructor": false}, {"identifier": "convertXNode", "parameters": "(UcteNetwork ucteNetwork, MergedXnode mergedXnode, UcteExporterContext context)", "modifiers": "private static", "return": "void", "signature": "void convertXNode(UcteNetwork ucteNetwork, MergedXnode mergedXnode, UcteExporterContext context)", "full_signature": "private static void convertXNode(UcteNetwork ucteNetwork, MergedXnode mergedXnode, UcteExporterContext context)", "class_method_signature": "UcteExporter.convertXNode(UcteNetwork ucteNetwork, MergedXnode mergedXnode, UcteExporterContext context)", "testcase": false, "constructor": false}, {"identifier": "convertXNode", "parameters": "(UcteNetwork ucteNetwork, TieLine tieLine, UcteExporterContext context)", "modifiers": "private static", "return": "void", "signature": "void convertXNode(UcteNetwork ucteNetwork, TieLine tieLine, UcteExporterContext context)", "full_signature": "private static void convertXNode(UcteNetwork ucteNetwork, TieLine tieLine, UcteExporterContext context)", "class_method_signature": "UcteExporter.convertXNode(UcteNetwork ucteNetwork, TieLine tieLine, UcteExporterContext context)", "testcase": false, "constructor": false}, {"identifier": "convertXNode", "parameters": "(UcteNetwork ucteNetwork, UcteNodeCode xnodeCode, String geographicalName, UcteNodeStatus ucteNodeStatus)", "modifiers": "private static", "return": "UcteNode", "signature": "UcteNode convertXNode(UcteNetwork ucteNetwork, UcteNodeCode xnodeCode, String geographicalName, UcteNodeStatus ucteNodeStatus)", "full_signature": "private static UcteNode convertXNode(UcteNetwork ucteNetwork, UcteNodeCode xnodeCode, String geographicalName, UcteNodeStatus ucteNodeStatus)", "class_method_signature": "UcteExporter.convertXNode(UcteNetwork ucteNetwork, UcteNodeCode xnodeCode, String geographicalName, UcteNodeStatus ucteNodeStatus)", "testcase": false, "constructor": false}, {"identifier": "convertSwitch", "parameters": "(UcteNetwork ucteNetwork, Switch sw, UcteExporterContext context)", "modifiers": "private static", "return": "void", "signature": "void convertSwitch(UcteNetwork ucteNetwork, Switch sw, UcteExporterContext context)", "full_signature": "private static void convertSwitch(UcteNetwork ucteNetwork, Switch sw, UcteExporterContext context)", "class_method_signature": "UcteExporter.convertSwitch(UcteNetwork ucteNetwork, Switch sw, UcteExporterContext context)", "testcase": false, "constructor": false}, {"identifier": "convertLine", "parameters": "(UcteNetwork ucteNetwork, Line line, UcteExporterContext context)", "modifiers": "private static", "return": "void", "signature": "void convertLine(UcteNetwork ucteNetwork, Line line, UcteExporterContext context)", "full_signature": "private static void convertLine(UcteNetwork ucteNetwork, Line line, UcteExporterContext context)", "class_method_signature": "UcteExporter.convertLine(UcteNetwork ucteNetwork, Line line, UcteExporterContext context)", "testcase": false, "constructor": false}, {"identifier": "convertTieLine", "parameters": "(UcteNetwork ucteNetwork, Line line, UcteExporterContext context)", "modifiers": "private static", "return": "void", "signature": "void convertTieLine(UcteNetwork ucteNetwork, Line line, UcteExporterContext context)", "full_signature": "private static void convertTieLine(UcteNetwork ucteNetwork, Line line, UcteExporterContext context)", "class_method_signature": "UcteExporter.convertTieLine(UcteNetwork ucteNetwork, Line line, UcteExporterContext context)", "testcase": false, "constructor": false}, {"identifier": "convertTieLine", "parameters": "(UcteNetwork ucteNetwork, MergedXnode mergedXnode, UcteExporterContext context)", "modifiers": "private static", "return": "void", "signature": "void convertTieLine(UcteNetwork ucteNetwork, MergedXnode mergedXnode, UcteExporterContext context)", "full_signature": "private static void convertTieLine(UcteNetwork ucteNetwork, MergedXnode mergedXnode, UcteExporterContext context)", "class_method_signature": "UcteExporter.convertTieLine(UcteNetwork ucteNetwork, MergedXnode mergedXnode, UcteExporterContext context)", "testcase": false, "constructor": false}, {"identifier": "convertTieLine", "parameters": "(UcteNetwork ucteNetwork, TieLine tieLine, UcteExporterContext context)", "modifiers": "private static", "return": "void", "signature": "void convertTieLine(UcteNetwork ucteNetwork, TieLine tieLine, UcteExporterContext context)", "full_signature": "private static void convertTieLine(UcteNetwork ucteNetwork, TieLine tieLine, UcteExporterContext context)", "class_method_signature": "UcteExporter.convertTieLine(UcteNetwork ucteNetwork, TieLine tieLine, UcteExporterContext context)", "testcase": false, "constructor": false}, {"identifier": "convertDanglingLine", "parameters": "(UcteNetwork ucteNetwork, DanglingLine danglingLine, UcteExporterContext context)", "modifiers": "private static", "return": "void", "signature": "void convertDanglingLine(UcteNetwork ucteNetwork, DanglingLine danglingLine, UcteExporterContext context)", "full_signature": "private static void convertDanglingLine(UcteNetwork ucteNetwork, DanglingLine danglingLine, UcteExporterContext context)", "class_method_signature": "UcteExporter.convertDanglingLine(UcteNetwork ucteNetwork, DanglingLine danglingLine, UcteExporterContext context)", "testcase": false, "constructor": false}, {"identifier": "getXnodeStatus", "parameters": "(Identifiable<?> identifiable)", "modifiers": "private static", "return": "UcteNodeStatus", "signature": "UcteNodeStatus getXnodeStatus(Identifiable<?> identifiable)", "full_signature": "private static UcteNodeStatus getXnodeStatus(Identifiable<?> identifiable)", "class_method_signature": "UcteExporter.getXnodeStatus(Identifiable<?> identifiable)", "testcase": false, "constructor": false}, {"identifier": "getStatus", "parameters": "(Identifiable<?> identifiable)", "modifiers": "private static", "return": "UcteNodeStatus", "signature": "UcteNodeStatus getStatus(Identifiable<?> identifiable)", "full_signature": "private static UcteNodeStatus getStatus(Identifiable<?> identifiable)", "class_method_signature": "UcteExporter.getStatus(Identifiable<?> identifiable)", "testcase": false, "constructor": false}, {"identifier": "getStatus", "parameters": "(Branch<?> branch)", "modifiers": "private static", "return": "UcteElementStatus", "signature": "UcteElementStatus getStatus(Branch<?> branch)", "full_signature": "private static UcteElementStatus getStatus(Branch<?> branch)", "class_method_signature": "UcteExporter.getStatus(Branch<?> branch)", "testcase": false, "constructor": false}, {"identifier": "getStatus", "parameters": "(Branch<?> branch, Branch.Side side)", "modifiers": "private static", "return": "UcteElementStatus", "signature": "UcteElementStatus getStatus(Branch<?> branch, Branch.Side side)", "full_signature": "private static UcteElementStatus getStatus(Branch<?> branch, Branch.Side side)", "class_method_signature": "UcteExporter.getStatus(Branch<?> branch, Branch.Side side)", "testcase": false, "constructor": false}, {"identifier": "getStatusHalf", "parameters": "(TieLine tieLine, Branch.Side side)", "modifiers": "private static", "return": "UcteElementStatus", "signature": "UcteElementStatus getStatusHalf(TieLine tieLine, Branch.Side side)", "full_signature": "private static UcteElementStatus getStatusHalf(TieLine tieLine, Branch.Side side)", "class_method_signature": "UcteExporter.getStatusHalf(TieLine tieLine, Branch.Side side)", "testcase": false, "constructor": false}, {"identifier": "getStatus", "parameters": "(DanglingLine danglingLine)", "modifiers": "private static", "return": "UcteElementStatus", "signature": "UcteElementStatus getStatus(DanglingLine danglingLine)", "full_signature": "private static UcteElementStatus getStatus(DanglingLine danglingLine)", "class_method_signature": "UcteExporter.getStatus(DanglingLine danglingLine)", "testcase": false, "constructor": false}, {"identifier": "getStatus", "parameters": "(Switch switchEl)", "modifiers": "private static", "return": "UcteElementStatus", "signature": "UcteElementStatus getStatus(Switch switchEl)", "full_signature": "private static UcteElementStatus getStatus(Switch switchEl)", "class_method_signature": "UcteExporter.getStatus(Switch switchEl)", "testcase": false, "constructor": false}, {"identifier": "isSlackBus", "parameters": "(Bus bus)", "modifiers": "private static", "return": "boolean", "signature": "boolean isSlackBus(Bus bus)", "full_signature": "private static boolean isSlackBus(Bus bus)", "class_method_signature": "UcteExporter.isSlackBus(Bus bus)", "testcase": false, "constructor": false}, {"identifier": "convertTwoWindingsTransformer", "parameters": "(UcteNetwork ucteNetwork, TwoWindingsTransformer twoWindingsTransformer, UcteExporterContext context)", "modifiers": "private static", "return": "void", "signature": "void convertTwoWindingsTransformer(UcteNetwork ucteNetwork, TwoWindingsTransformer twoWindingsTransformer, UcteExporterContext context)", "full_signature": "private static void convertTwoWindingsTransformer(UcteNetwork ucteNetwork, TwoWindingsTransformer twoWindingsTransformer, UcteExporterContext context)", "class_method_signature": "UcteExporter.convertTwoWindingsTransformer(UcteNetwork ucteNetwork, TwoWindingsTransformer twoWindingsTransformer, UcteExporterContext context)", "testcase": false, "constructor": false}, {"identifier": "convertRegulation", "parameters": "(UcteNetwork ucteNetwork, UcteElementId ucteElementId, TwoWindingsTransformer twoWindingsTransformer)", "modifiers": "private static", "return": "void", "signature": "void convertRegulation(UcteNetwork ucteNetwork, UcteElementId ucteElementId, TwoWindingsTransformer twoWindingsTransformer)", "full_signature": "private static void convertRegulation(UcteNetwork ucteNetwork, UcteElementId ucteElementId, TwoWindingsTransformer twoWindingsTransformer)", "class_method_signature": "UcteExporter.convertRegulation(UcteNetwork ucteNetwork, UcteElementId ucteElementId, TwoWindingsTransformer twoWindingsTransformer)", "testcase": false, "constructor": false}, {"identifier": "convertRatioTapChanger", "parameters": "(TwoWindingsTransformer twoWindingsTransformer)", "modifiers": "private static", "return": "UctePhaseRegulation", "signature": "UctePhaseRegulation convertRatioTapChanger(TwoWindingsTransformer twoWindingsTransformer)", "full_signature": "private static UctePhaseRegulation convertRatioTapChanger(TwoWindingsTransformer twoWindingsTransformer)", "class_method_signature": "UcteExporter.convertRatioTapChanger(TwoWindingsTransformer twoWindingsTransformer)", "testcase": false, "constructor": false}, {"identifier": "convertPhaseTapChanger", "parameters": "(TwoWindingsTransformer twoWindingsTransformer)", "modifiers": "private static", "return": "UcteAngleRegulation", "signature": "UcteAngleRegulation convertPhaseTapChanger(TwoWindingsTransformer twoWindingsTransformer)", "full_signature": "private static UcteAngleRegulation convertPhaseTapChanger(TwoWindingsTransformer twoWindingsTransformer)", "class_method_signature": "UcteExporter.convertPhaseTapChanger(TwoWindingsTransformer twoWindingsTransformer)", "testcase": false, "constructor": false}, {"identifier": "calculateAngleP", "parameters": "(TwoWindingsTransformer twoWindingsTransformer)", "modifiers": "private static", "return": "float", "signature": "float calculateAngleP(TwoWindingsTransformer twoWindingsTransformer)", "full_signature": "private static float calculateAngleP(TwoWindingsTransformer twoWindingsTransformer)", "class_method_signature": "UcteExporter.calculateAngleP(TwoWindingsTransformer twoWindingsTransformer)", "testcase": false, "constructor": false}, {"identifier": "findRegulationType", "parameters": "(TwoWindingsTransformer twoWindingsTransformer)", "modifiers": "private static", "return": "UcteAngleRegulationType", "signature": "UcteAngleRegulationType findRegulationType(TwoWindingsTransformer twoWindingsTransformer)", "full_signature": "private static UcteAngleRegulationType findRegulationType(TwoWindingsTransformer twoWindingsTransformer)", "class_method_signature": "UcteExporter.findRegulationType(TwoWindingsTransformer twoWindingsTransformer)", "testcase": false, "constructor": false}, {"identifier": "isSymm", "parameters": "(TwoWindingsTransformer twoWindingsTransformer)", "modifiers": "private static", "return": "boolean", "signature": "boolean isSymm(TwoWindingsTransformer twoWindingsTransformer)", "full_signature": "private static boolean isSymm(TwoWindingsTransformer twoWindingsTransformer)", "class_method_signature": "UcteExporter.isSymm(TwoWindingsTransformer twoWindingsTransformer)", "testcase": false, "constructor": false}, {"identifier": "setSwitchCurrentLimit", "parameters": "(UcteLine ucteLine, Switch sw)", "modifiers": "private static", "return": "void", "signature": "void setSwitchCurrentLimit(UcteLine ucteLine, Switch sw)", "full_signature": "private static void setSwitchCurrentLimit(UcteLine ucteLine, Switch sw)", "class_method_signature": "UcteExporter.setSwitchCurrentLimit(UcteLine ucteLine, Switch sw)", "testcase": false, "constructor": false}, {"identifier": "energySourceToUctePowerPlantType", "parameters": "(Generator generator)", "modifiers": "private static", "return": "UctePowerPlantType", "signature": "UctePowerPlantType energySourceToUctePowerPlantType(Generator generator)", "full_signature": "private static UctePowerPlantType energySourceToUctePowerPlantType(Generator generator)", "class_method_signature": "UcteExporter.energySourceToUctePowerPlantType(Generator generator)", "testcase": false, "constructor": false}, {"identifier": "getPermanentLimit", "parameters": "(Branch<?> branch)", "modifiers": "private static", "return": "Integer", "signature": "Integer getPermanentLimit(Branch<?> branch)", "full_signature": "private static Integer getPermanentLimit(Branch<?> branch)", "class_method_signature": "UcteExporter.getPermanentLimit(Branch<?> branch)", "testcase": false, "constructor": false}, {"identifier": "findNamingStrategy", "parameters": "(String name, List<NamingStrategy> namingStrategies)", "modifiers": "static", "return": "NamingStrategy", "signature": "NamingStrategy findNamingStrategy(String name, List<NamingStrategy> namingStrategies)", "full_signature": "static NamingStrategy findNamingStrategy(String name, List<NamingStrategy> namingStrategies)", "class_method_signature": "UcteExporter.findNamingStrategy(String name, List<NamingStrategy> namingStrategies)", "testcase": false, "constructor": false}], "file": "ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteExporter.java"}, "focal_method": {"identifier": "findNamingStrategy", "parameters": "(String name, List<NamingStrategy> namingStrategies)", "modifiers": "static", "return": "NamingStrategy", "body": "static NamingStrategy findNamingStrategy(String name, List<NamingStrategy> namingStrategies) {\n        Objects.requireNonNull(namingStrategies);\n\n        if (namingStrategies.size() == 1 && name == null) {\n            // no information to select the implementation but only one naming strategy, so we can use it by default\n            // (that is be the most common use case)\n            return namingStrategies.get(0);\n        } else {\n            if (namingStrategies.size() > 1 && name == null) {\n                // several naming strategies and no information to select which one to choose, we can only throw\n                // an exception\n                List<String> namingStrategyNames = namingStrategies.stream().map(NamingStrategy::getName).collect(Collectors.toList());\n                throw new PowsyblException(\"Several naming strategy implementations found (\" + namingStrategyNames\n                        + \"), you must add properties to select the implementation\");\n            }\n            return namingStrategies.stream()\n                    .filter(ns -> ns.getName().equals(name))\n                    .findFirst()\n                    .orElseThrow(() -> new PowsyblException(\"NamingStrategy '\" + name + \"' not found\"));\n        }\n    }", "signature": "NamingStrategy findNamingStrategy(String name, List<NamingStrategy> namingStrategies)", "full_signature": "static NamingStrategy findNamingStrategy(String name, List<NamingStrategy> namingStrategies)", "class_method_signature": "UcteExporter.findNamingStrategy(String name, List<NamingStrategy> namingStrategies)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "size", "get", "size", "collect", "map", "stream", "toList", "orElseThrow", "findFirst", "filter", "stream", "equals", "getName"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}