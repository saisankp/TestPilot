{"test_class": {"identifier": "UserServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "MockMvc mockMvc;", "modifier": "", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "@InjectMocks\n\tUserService service;", "modifier": "@InjectMocks", "type": "UserService", "declarator": "service", "var_name": "service"}, {"original_string": "@Mock\n\tUserRepository repo;", "modifier": "@Mock", "type": "UserRepository", "declarator": "repo", "var_name": "repo"}], "file": "user-service/src/test/java/io/pivotal/user/service/UserServiceTest.java"}, "test_case": {"identifier": "testLoginNull", "parameters": "()", "modifiers": "@Test(expected=AuthenticationException.class) public", "return": "void", "body": "@Test(expected=AuthenticationException.class)\n\tpublic void testLoginNull() {\n\t\tUser acc = ServiceTestConfiguration.user();\n\t\twhen(repo.findByUseridAndPasswd(ServiceTestConfiguration.USER_ID, ServiceTestConfiguration.PASSWORD)).thenReturn(null);\n\t\t\n\t\tservice.login(ServiceTestConfiguration.USER_ID, ServiceTestConfiguration.PASSWORD);\n\t}", "signature": "void testLoginNull()", "full_signature": "@Test(expected=AuthenticationException.class) public void testLoginNull()", "class_method_signature": "UserServiceTest.testLoginNull()", "testcase": true, "constructor": false, "invocations": ["user", "thenReturn", "when", "findByUseridAndPasswd", "login"]}, "focal_class": {"identifier": "UserService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory\n\t\t\t.getLogger(UserService.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory\n\t\t\t.getLogger(UserService.class)", "var_name": "logger"}, {"original_string": "@Autowired\n\tUserRepository user;", "modifier": "@Autowired", "type": "UserRepository", "declarator": "user", "var_name": "user"}], "methods": [{"identifier": "findUser", "parameters": "(Integer id)", "modifiers": "public", "return": "User", "signature": "User findUser(Integer id)", "full_signature": "public User findUser(Integer id)", "class_method_signature": "UserService.findUser(Integer id)", "testcase": false, "constructor": false}, {"identifier": "findUser", "parameters": "(String username)", "modifiers": "public", "return": "User", "signature": "User findUser(String username)", "full_signature": "public User findUser(String username)", "class_method_signature": "UserService.findUser(String username)", "testcase": false, "constructor": false}, {"identifier": "findAccountprofileByAuthtoken", "parameters": "(String token)", "modifiers": "@Cacheable(value = \"authorizationCache\") public", "return": "User", "signature": "User findAccountprofileByAuthtoken(String token)", "full_signature": "@Cacheable(value = \"authorizationCache\") public User findAccountprofileByAuthtoken(String token)", "class_method_signature": "UserService.findAccountprofileByAuthtoken(String token)", "testcase": false, "constructor": false}, {"identifier": "saveUser", "parameters": "(User userRequest)", "modifiers": "public", "return": "Integer", "signature": "Integer saveUser(User userRequest)", "full_signature": "public Integer saveUser(User userRequest)", "class_method_signature": "UserService.saveUser(User userRequest)", "testcase": false, "constructor": false}, {"identifier": "login", "parameters": "(String username, String password)", "modifiers": "public", "return": "Map<String, Object>", "signature": "Map<String, Object> login(String username, String password)", "full_signature": "public Map<String, Object> login(String username, String password)", "class_method_signature": "UserService.login(String username, String password)", "testcase": false, "constructor": false}, {"identifier": "logout", "parameters": "(String userId)", "modifiers": "public", "return": "User", "signature": "User logout(String userId)", "full_signature": "public User logout(String userId)", "class_method_signature": "UserService.logout(String userId)", "testcase": false, "constructor": false}], "file": "user-service/src/main/java/io/pivotal/user/service/UserService.java"}, "focal_method": {"identifier": "login", "parameters": "(String username, String password)", "modifiers": "public", "return": "Map<String, Object>", "body": "public Map<String, Object> login(String username, String password) {\n\t\tlogger.debug(\"login in user: \" + username);\n\t\tMap<String, Object> loginResponse = null;\n\t\tUser account = user.findByUseridAndPasswd(username, password);\n\t\tif (account != null) {\n\t\t\tlogger.debug(\"Found Account for user: \" + username);\n\t\t\taccount.setAuthtoken(UUID.randomUUID().toString());\n\t\t\taccount.setLogincount(account.getLogincount() + 1);\n\t\t\taccount.setLastlogin(new Date());\n\t\t\taccount = user.save(account); // persist new auth token and last\n\t\t\t\t\t\t\t\t\t\t\t// login\n\t\t\tloginResponse = new HashMap<String, Object>();\n\n\t\t\tloginResponse.put(\"authToken\", account.getAuthtoken());\n\t\t\tloginResponse.put(\"accountid\", account.getId());\n\t\t\t// loginResponse.put(\"password\", account.getPasswd());\n\n\t\t\tlogger.info(\"UserService.login success for \" + username\n\t\t\t\t\t+ \" username::token=\" + loginResponse.get(\"authToken\"));\n\n\t\t} else {\n\t\t\tlogger.warn(\"UserService.login failed to find username=\" + username\n\t\t\t\t\t+ \" password=\" + password);\n\t\t\tthrow new AuthenticationException(\"Login failed for user: \"\n\t\t\t\t\t+ username);\n\t\t}\n\t\treturn loginResponse;\n\t}", "signature": "Map<String, Object> login(String username, String password)", "full_signature": "public Map<String, Object> login(String username, String password)", "class_method_signature": "UserService.login(String username, String password)", "testcase": false, "constructor": false, "invocations": ["debug", "findByUseridAndPasswd", "debug", "setAuthtoken", "toString", "randomUUID", "setLogincount", "getLogincount", "setLastlogin", "save", "put", "getAuthtoken", "put", "getId", "info", "get", "warn"]}, "repository": {"repo_id": 143926791, "url": "https://github.com/Pivotal-Field-Engineering/pivotal-bank-demo", "language": "Java", "is_fork": false, "fork_count": 48, "stargazer_count": 35, "size": 45556, "license": "licensed"}}