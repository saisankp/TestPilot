{"test_class": {"identifier": "FuOpTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static FuOp.Spi operatorSpi;", "modifier": "private static", "type": "FuOp.Spi", "declarator": "operatorSpi", "var_name": "operatorSpi"}], "file": "s3tbx-fu-operator/src/test/java/org/esa/s3tbx/fu/FuOpTest.java"}, "test_case": {"identifier": "testAttachIndexCodingToBand", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAttachIndexCodingToBand() throws Exception {\n        final Product product = new Product(\"test_product\", \"test\", 20, 20);\n        final Band fuBand = new Band(\"test_Band\", ProductData.TYPE_INT8, 10, 10);\n        product.addBand(fuBand);\n\n        assertNull(fuBand.getSampleCoding());\n        assertNull(fuBand.getIndexCoding());\n\n        FuOp.attachIndexCoding(fuBand);\n        assertNotNull(fuBand.getSampleCoding());\n        assertNotNull(fuBand.getIndexCoding());\n    }", "signature": "void testAttachIndexCodingToBand()", "full_signature": "@Test public void testAttachIndexCodingToBand()", "class_method_signature": "FuOpTest.testAttachIndexCodingToBand()", "testcase": true, "constructor": false, "invocations": ["addBand", "assertNull", "getSampleCoding", "assertNull", "getIndexCoding", "attachIndexCoding", "assertNotNull", "getSampleCoding", "assertNotNull", "getIndexCoding"]}, "focal_class": {"identifier": "FuOp", "superclass": "extends PixelOperator", "interfaces": "", "fields": [{"original_string": "static Color[] FU_COLORS = new Color[]{\n            new Color(0, 0, 0),\n            new Color(33, 88, 188),\n            new Color(49, 109, 197),\n            new Color(50, 124, 187),\n            new Color(75, 128, 160),\n            new Color(86, 143, 150),\n            new Color(109, 146, 152),\n            new Color(105, 140, 134),\n            new Color(117, 158, 114),\n            new Color(123, 166, 84),\n            new Color(125, 174, 56),\n            new Color(149, 182, 69),\n            new Color(148, 182, 96),\n            new Color(165, 188, 118),\n            new Color(170, 184, 109),\n            new Color(173, 181, 95),\n            new Color(168, 169, 101),\n            new Color(174, 159, 92),\n            new Color(179, 160, 83),\n            new Color(175, 138, 68),\n            new Color(164, 105, 5),\n            new Color(161, 77, 4)\n    };", "modifier": "static", "type": "Color[]", "declarator": "FU_COLORS = new Color[]{\n            new Color(0, 0, 0),\n            new Color(33, 88, 188),\n            new Color(49, 109, 197),\n            new Color(50, 124, 187),\n            new Color(75, 128, 160),\n            new Color(86, 143, 150),\n            new Color(109, 146, 152),\n            new Color(105, 140, 134),\n            new Color(117, 158, 114),\n            new Color(123, 166, 84),\n            new Color(125, 174, 56),\n            new Color(149, 182, 69),\n            new Color(148, 182, 96),\n            new Color(165, 188, 118),\n            new Color(170, 184, 109),\n            new Color(173, 181, 95),\n            new Color(168, 169, 101),\n            new Color(174, 159, 92),\n            new Color(179, 160, 83),\n            new Color(175, 138, 68),\n            new Color(164, 105, 5),\n            new Color(161, 77, 4)\n    }", "var_name": "FU_COLORS"}, {"original_string": "private String[] reflecBandNames;", "modifier": "private", "type": "String[]", "declarator": "reflecBandNames", "var_name": "reflecBandNames"}, {"original_string": "@SourceProduct(alias = \"source\", label = \"Reflectance\", description = \"The source product providing reflectances.\")\n    private Product sourceProduct;", "modifier": "@SourceProduct(alias = \"source\", label = \"Reflectance\", description = \"The source product providing reflectances.\")\n    private", "type": "Product", "declarator": "sourceProduct", "var_name": "sourceProduct"}, {"original_string": "@TargetProduct\n    private Product targetProduct;", "modifier": "@TargetProduct\n    private", "type": "Product", "declarator": "targetProduct", "var_name": "targetProduct"}, {"original_string": "@Parameter(defaultValue = \"false\",\n            description = \"Weather or not to copy all the bands to the target product from the source product.\")\n    private boolean copyAllSourceBands;", "modifier": "@Parameter(defaultValue = \"false\",\n            description = \"Weather or not to copy all the bands to the target product from the source product.\")\n    private", "type": "boolean", "declarator": "copyAllSourceBands", "var_name": "copyAllSourceBands"}, {"original_string": "@Parameter(label = \"Input is irradiance reflectance\", defaultValue = \"false\",\n            description = \"If enabled, the source reflectances will be converted to radiance reflectances by dividing it by PI before passing to the algorithm.\")\n    private boolean inputIsIrradianceReflectance;", "modifier": "@Parameter(label = \"Input is irradiance reflectance\", defaultValue = \"false\",\n            description = \"If enabled, the source reflectances will be converted to radiance reflectances by dividing it by PI before passing to the algorithm.\")\n    private", "type": "boolean", "declarator": "inputIsIrradianceReflectance", "var_name": "inputIsIrradianceReflectance"}, {"original_string": "@Parameter(label = \"Valid pixel expression\", description = \"An expression to filter which pixel are considered.\",\n            converter = BooleanExpressionConverter.class)\n    private String validExpression;", "modifier": "@Parameter(label = \"Valid pixel expression\", description = \"An expression to filter which pixel are considered.\",\n            converter = BooleanExpressionConverter.class)\n    private", "type": "String", "declarator": "validExpression", "var_name": "validExpression"}, {"original_string": "@Parameter(label = \"Reflectance band name pattern\", description = \"The used reflectance band names must match the given pattern. \" +\n                                                                      \"Useful, if there is more then one spectrum in the product.\")\n    private String reflectanceNamePattern;", "modifier": "@Parameter(label = \"Reflectance band name pattern\", description = \"The used reflectance band names must match the given pattern. \" +\n                                                                      \"Useful, if there is more then one spectrum in the product.\")\n    private", "type": "String", "declarator": "reflectanceNamePattern", "var_name": "reflectanceNamePattern"}, {"original_string": "@Parameter(defaultValue = \"AUTO_DETECT\", description = \"The instrument to compute FU for.\")\n    private Instrument instrument;", "modifier": "@Parameter(defaultValue = \"AUTO_DETECT\", description = \"The instrument to compute FU for.\")\n    private", "type": "Instrument", "declarator": "instrument", "var_name": "instrument"}, {"original_string": "@Parameter(label = \"Include intermediate results in output\", defaultValue = \"true\",\n            description = \"Whether or not the intermediate results shall be written to the target output\")\n    private boolean includeIntermediateResults;", "modifier": "@Parameter(label = \"Include intermediate results in output\", defaultValue = \"true\",\n            description = \"Whether or not the intermediate results shall be written to the target output\")\n    private", "type": "boolean", "declarator": "includeIntermediateResults", "var_name": "includeIntermediateResults"}, {"original_string": "private FuAlgo fuAlgo;", "modifier": "private", "type": "FuAlgo", "declarator": "fuAlgo", "var_name": "fuAlgo"}, {"original_string": "private boolean autoDetectedInstrument = false;", "modifier": "private", "type": "boolean", "declarator": "autoDetectedInstrument = false", "var_name": "autoDetectedInstrument"}, {"original_string": "private BandDefinition[] targetBandDefs;", "modifier": "private", "type": "BandDefinition[]", "declarator": "targetBandDefs", "var_name": "targetBandDefs"}], "methods": [{"identifier": "computePixel", "parameters": "(int x, int y, Sample[] sourceSamples, WritableSample[] targetSamples)", "modifiers": "@Override protected", "return": "void", "signature": "void computePixel(int x, int y, Sample[] sourceSamples, WritableSample[] targetSamples)", "full_signature": "@Override protected void computePixel(int x, int y, Sample[] sourceSamples, WritableSample[] targetSamples)", "class_method_signature": "FuOp.computePixel(int x, int y, Sample[] sourceSamples, WritableSample[] targetSamples)", "testcase": false, "constructor": false}, {"identifier": "getInputSpectrum", "parameters": "(Sample[] sourceSamples)", "modifiers": "private", "return": "double[]", "signature": "double[] getInputSpectrum(Sample[] sourceSamples)", "full_signature": "private double[] getInputSpectrum(Sample[] sourceSamples)", "class_method_signature": "FuOp.getInputSpectrum(Sample[] sourceSamples)", "testcase": false, "constructor": false}, {"identifier": "applyPiToIrradianceSpectrum", "parameters": "(double[] spectrum)", "modifiers": "private", "return": "double[]", "signature": "double[] applyPiToIrradianceSpectrum(double[] spectrum)", "full_signature": "private double[] applyPiToIrradianceSpectrum(double[] spectrum)", "class_method_signature": "FuOp.applyPiToIrradianceSpectrum(double[] spectrum)", "testcase": false, "constructor": false}, {"identifier": "prepareInputs", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void prepareInputs()", "full_signature": "@Override protected void prepareInputs()", "class_method_signature": "FuOp.prepareInputs()", "testcase": false, "constructor": false}, {"identifier": "configureTargetProduct", "parameters": "(ProductConfigurer productConfigurer)", "modifiers": "@Override protected", "return": "void", "signature": "void configureTargetProduct(ProductConfigurer productConfigurer)", "full_signature": "@Override protected void configureTargetProduct(ProductConfigurer productConfigurer)", "class_method_signature": "FuOp.configureTargetProduct(ProductConfigurer productConfigurer)", "testcase": false, "constructor": false}, {"identifier": "configureSourceSamples", "parameters": "(SourceSampleConfigurer sourceSampleConfigurer)", "modifiers": "@Override protected", "return": "void", "signature": "void configureSourceSamples(SourceSampleConfigurer sourceSampleConfigurer)", "full_signature": "@Override protected void configureSourceSamples(SourceSampleConfigurer sourceSampleConfigurer)", "class_method_signature": "FuOp.configureSourceSamples(SourceSampleConfigurer sourceSampleConfigurer)", "testcase": false, "constructor": false}, {"identifier": "configureTargetSamples", "parameters": "(TargetSampleConfigurer sampleConfigurer)", "modifiers": "@Override protected", "return": "void", "signature": "void configureTargetSamples(TargetSampleConfigurer sampleConfigurer)", "full_signature": "@Override protected void configureTargetSamples(TargetSampleConfigurer sampleConfigurer)", "class_method_signature": "FuOp.configureTargetSamples(TargetSampleConfigurer sampleConfigurer)", "testcase": false, "constructor": false}, {"identifier": "attachIndexCoding", "parameters": "(Band fuBand)", "modifiers": "static", "return": "void", "signature": "void attachIndexCoding(Band fuBand)", "full_signature": "static void attachIndexCoding(Band fuBand)", "class_method_signature": "FuOp.attachIndexCoding(Band fuBand)", "testcase": false, "constructor": false}, {"identifier": "createImageInfo", "parameters": "(IndexCoding indexCoding)", "modifiers": "static", "return": "ImageInfo", "signature": "ImageInfo createImageInfo(IndexCoding indexCoding)", "full_signature": "static ImageInfo createImageInfo(IndexCoding indexCoding)", "class_method_signature": "FuOp.createImageInfo(IndexCoding indexCoding)", "testcase": false, "constructor": false}], "file": "s3tbx-fu-operator/src/main/java/org/esa/s3tbx/fu/FuOp.java"}, "focal_method": {"identifier": "attachIndexCoding", "parameters": "(Band fuBand)", "modifiers": "static", "return": "void", "body": "static void attachIndexCoding(Band fuBand) {\n        IndexCoding indexCoding = new IndexCoding(\"Forel-Ule Scale\");\n        ImageInfo imageInfo = createImageInfo(indexCoding);\n        fuBand.setImageInfo(imageInfo);\n        fuBand.getProduct().getIndexCodingGroup().add(indexCoding);\n        fuBand.setSampleCoding(indexCoding);\n    }", "signature": "void attachIndexCoding(Band fuBand)", "full_signature": "static void attachIndexCoding(Band fuBand)", "class_method_signature": "FuOp.attachIndexCoding(Band fuBand)", "testcase": false, "constructor": false, "invocations": ["createImageInfo", "setImageInfo", "add", "getIndexCodingGroup", "getProduct", "setSampleCoding"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}