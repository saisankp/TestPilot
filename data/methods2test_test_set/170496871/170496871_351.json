{"test_class": {"identifier": "MeanWithClusterProbAggregatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MeanWithClusterProbAggregator aggregator1 = new MeanWithClusterProbAggregator();", "modifier": "private", "type": "MeanWithClusterProbAggregator", "declarator": "aggregator1 = new MeanWithClusterProbAggregator()", "var_name": "aggregator1"}, {"original_string": "private MeanWithClusterProbAggregator aggregator2 = new MeanWithClusterProbAggregator();", "modifier": "private", "type": "MeanWithClusterProbAggregator", "declarator": "aggregator2 = new MeanWithClusterProbAggregator()", "var_name": "aggregator2"}], "file": "modules/ml/src/test/java/org/apache/ignite/ml/clustering/gmm/MeanWithClusterProbAggregatorTest.java"}, "test_case": {"identifier": "testReduce", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReduce() {\n        MeanWithClusterProbAggregator aggregator3 = new MeanWithClusterProbAggregator();\n        MeanWithClusterProbAggregator aggregator4 = new MeanWithClusterProbAggregator();\n\n        aggregator3.add(VectorUtils.of(1., 1.), 0.5);\n        aggregator3.add(VectorUtils.of(0., 1.), 0.25);\n        aggregator3.add(VectorUtils.of(1., 0.), 0.25);\n        aggregator3.add(VectorUtils.of(0., 0.), 0.5);\n\n        aggregator4.add(VectorUtils.of(1., 1.), 1.0);\n        aggregator4.add(VectorUtils.of(0., 1.), 1.0);\n        aggregator4.add(VectorUtils.of(1., 0.), 1.0);\n        aggregator4.add(VectorUtils.of(0., 0.), 1.0);\n\n        List<MeanWithClusterProbAggregator> res = MeanWithClusterProbAggregator.reduce(\n            Arrays.asList(aggregator1, aggregator3),\n            Arrays.asList(aggregator2, aggregator4)\n        );\n\n        MeanWithClusterProbAggregator res1 = res.get(0);\n        assertEquals(0.70, res1.clusterProb(), 1e-2);\n        assertArrayEquals(new double[] {0.580, 0.491}, res1.mean().asArray(), 1e-2);\n\n        MeanWithClusterProbAggregator res2 = res.get(1);\n        assertEquals(0.68, res2.clusterProb(), 1e-2);\n        assertArrayEquals(new double[] {0.50, 0.50}, res2.mean().asArray(), 1e-2);\n    }", "signature": "void testReduce()", "full_signature": "@Test public void testReduce()", "class_method_signature": "MeanWithClusterProbAggregatorTest.testReduce()", "testcase": true, "constructor": false, "invocations": ["add", "of", "add", "of", "add", "of", "add", "of", "add", "of", "add", "of", "add", "of", "add", "of", "reduce", "asList", "asList", "get", "assertEquals", "clusterProb", "assertArrayEquals", "asArray", "mean", "get", "assertEquals", "clusterProb", "assertArrayEquals", "asArray", "mean"]}, "focal_class": {"identifier": "MeanWithClusterProbAggregator", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 2700985110021774629L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 2700985110021774629L", "var_name": "serialVersionUID"}, {"original_string": "private Vector weightedXsSum;", "modifier": "private", "type": "Vector", "declarator": "weightedXsSum", "var_name": "weightedXsSum"}, {"original_string": "private double pcxiSum;", "modifier": "private", "type": "double", "declarator": "pcxiSum", "var_name": "pcxiSum"}, {"original_string": "private int rowCount;", "modifier": "private", "type": "int", "declarator": "rowCount", "var_name": "rowCount"}], "methods": [{"identifier": "MeanWithClusterProbAggregator", "parameters": "()", "modifiers": "", "return": "", "signature": " MeanWithClusterProbAggregator()", "full_signature": "  MeanWithClusterProbAggregator()", "class_method_signature": "MeanWithClusterProbAggregator.MeanWithClusterProbAggregator()", "testcase": false, "constructor": true}, {"identifier": "MeanWithClusterProbAggregator", "parameters": "(Vector weightedXsSum, double pcxiSum, int rowCount)", "modifiers": "", "return": "", "signature": " MeanWithClusterProbAggregator(Vector weightedXsSum, double pcxiSum, int rowCount)", "full_signature": "  MeanWithClusterProbAggregator(Vector weightedXsSum, double pcxiSum, int rowCount)", "class_method_signature": "MeanWithClusterProbAggregator.MeanWithClusterProbAggregator(Vector weightedXsSum, double pcxiSum, int rowCount)", "testcase": false, "constructor": true}, {"identifier": "mean", "parameters": "()", "modifiers": "public", "return": "Vector", "signature": "Vector mean()", "full_signature": "public Vector mean()", "class_method_signature": "MeanWithClusterProbAggregator.mean()", "testcase": false, "constructor": false}, {"identifier": "clusterProb", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double clusterProb()", "full_signature": "public double clusterProb()", "class_method_signature": "MeanWithClusterProbAggregator.clusterProb()", "testcase": false, "constructor": false}, {"identifier": "aggreateStats", "parameters": "(Dataset<EmptyContext, GmmPartitionData> dataset, int countOfComponents)", "modifiers": "public static", "return": "AggregatedStats", "signature": "AggregatedStats aggreateStats(Dataset<EmptyContext, GmmPartitionData> dataset, int countOfComponents)", "full_signature": "public static AggregatedStats aggreateStats(Dataset<EmptyContext, GmmPartitionData> dataset, int countOfComponents)", "class_method_signature": "MeanWithClusterProbAggregator.aggreateStats(Dataset<EmptyContext, GmmPartitionData> dataset, int countOfComponents)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Vector x, double pcxi)", "modifiers": "", "return": "void", "signature": "void add(Vector x, double pcxi)", "full_signature": " void add(Vector x, double pcxi)", "class_method_signature": "MeanWithClusterProbAggregator.add(Vector x, double pcxi)", "testcase": false, "constructor": false}, {"identifier": "plus", "parameters": "(MeanWithClusterProbAggregator other)", "modifiers": "", "return": "MeanWithClusterProbAggregator", "signature": "MeanWithClusterProbAggregator plus(MeanWithClusterProbAggregator other)", "full_signature": " MeanWithClusterProbAggregator plus(MeanWithClusterProbAggregator other)", "class_method_signature": "MeanWithClusterProbAggregator.plus(MeanWithClusterProbAggregator other)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(GmmPartitionData data, int countOfComponents)", "modifiers": "static", "return": "List<MeanWithClusterProbAggregator>", "signature": "List<MeanWithClusterProbAggregator> map(GmmPartitionData data, int countOfComponents)", "full_signature": "static List<MeanWithClusterProbAggregator> map(GmmPartitionData data, int countOfComponents)", "class_method_signature": "MeanWithClusterProbAggregator.map(GmmPartitionData data, int countOfComponents)", "testcase": false, "constructor": false}, {"identifier": "reduce", "parameters": "(List<MeanWithClusterProbAggregator> l,\n        List<MeanWithClusterProbAggregator> r)", "modifiers": "static", "return": "List<MeanWithClusterProbAggregator>", "signature": "List<MeanWithClusterProbAggregator> reduce(List<MeanWithClusterProbAggregator> l,\n        List<MeanWithClusterProbAggregator> r)", "full_signature": "static List<MeanWithClusterProbAggregator> reduce(List<MeanWithClusterProbAggregator> l,\n        List<MeanWithClusterProbAggregator> r)", "class_method_signature": "MeanWithClusterProbAggregator.reduce(List<MeanWithClusterProbAggregator> l,\n        List<MeanWithClusterProbAggregator> r)", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/clustering/gmm/MeanWithClusterProbAggregator.java"}, "focal_method": {"identifier": "reduce", "parameters": "(List<MeanWithClusterProbAggregator> l,\n        List<MeanWithClusterProbAggregator> r)", "modifiers": "static", "return": "List<MeanWithClusterProbAggregator>", "body": "static List<MeanWithClusterProbAggregator> reduce(List<MeanWithClusterProbAggregator> l,\n        List<MeanWithClusterProbAggregator> r) {\n        A.ensure(l != null || r != null, \"Both partitions cannot equal to null\");\n\n        if (l == null || l.isEmpty())\n            return r;\n        if (r == null || r.isEmpty())\n            return l;\n\n        A.ensure(l.size() == r.size(), \"l.size() == r.size()\");\n        List<MeanWithClusterProbAggregator> res = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++)\n            res.add(l.get(i).plus(r.get(i)));\n\n        return res;\n    }", "signature": "List<MeanWithClusterProbAggregator> reduce(List<MeanWithClusterProbAggregator> l,\n        List<MeanWithClusterProbAggregator> r)", "full_signature": "static List<MeanWithClusterProbAggregator> reduce(List<MeanWithClusterProbAggregator> l,\n        List<MeanWithClusterProbAggregator> r)", "class_method_signature": "MeanWithClusterProbAggregator.reduce(List<MeanWithClusterProbAggregator> l,\n        List<MeanWithClusterProbAggregator> r)", "testcase": false, "constructor": false, "invocations": ["ensure", "isEmpty", "isEmpty", "ensure", "size", "size", "size", "add", "plus", "get", "get"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}