{"test_class": {"identifier": "TestColumnTimestampFilter", "superclass": "extends TestBase", "interfaces": "", "fields": [], "file": "themis-coprocessor/src/test/java/org/apache/hadoop/hbase/themis/cp/TestColumnTimestampFilter.java"}, "test_case": {"identifier": "testFilterKeyValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testFilterKeyValue() {\n    ColumnTimestampFilter filter = new ColumnTimestampFilter();\n    KeyValue kv = new KeyValue(ROW, FAMILY, QUALIFIER, PREWRITE_TS, Type.Put, VALUE);\n    Assert.assertEquals(ReturnCode.NEXT_ROW, filter.filterKeyValue(kv));\n    \n    filter = new ColumnTimestampFilter();\n    filter.addColumnTimestamp(COLUMN, PREWRITE_TS);\n    kv = new KeyValue(ROW, ANOTHER_FAMILY, QUALIFIER, PREWRITE_TS, Type.Put, VALUE);\n    Assert.assertEquals(ReturnCode.SEEK_NEXT_USING_HINT, filter.filterKeyValue(kv));\n    Assert.assertArrayEquals(filter.getNextKeyHint(kv).getFamily(), FAMILY);\n    Assert.assertArrayEquals(filter.getNextKeyHint(kv).getQualifier(), QUALIFIER);\n    \n    filter = new ColumnTimestampFilter();\n    filter.addColumnTimestamp(COLUMN, PREWRITE_TS);\n    kv = new KeyValue(ROW, FAMILY, ANOTHER_QUALIFIER, PREWRITE_TS, Type.Put, VALUE);\n    Assert.assertEquals(ReturnCode.SEEK_NEXT_USING_HINT, filter.filterKeyValue(kv));\n    Assert.assertArrayEquals(filter.getNextKeyHint(kv).getFamily(), FAMILY);\n    Assert.assertArrayEquals(filter.getNextKeyHint(kv).getQualifier(), QUALIFIER);\n    \n    filter = new ColumnTimestampFilter();\n    filter.addColumnTimestamp(COLUMN, PREWRITE_TS);\n    byte[] laterFamily = Bytes.toBytes(Bytes.toString(FAMILY) + \"#\");\n    kv = new KeyValue(ROW, laterFamily, QUALIFIER, PREWRITE_TS, Type.Put, VALUE);\n    Assert.assertEquals(ReturnCode.NEXT_ROW, filter.filterKeyValue(kv));\n    \n    filter = new ColumnTimestampFilter();\n    filter.addColumnTimestamp(COLUMN, PREWRITE_TS);\n    kv = new KeyValue(ROW, FAMILY, QUALIFIER, PREWRITE_TS - 1, Type.Put, VALUE);\n    Assert.assertEquals(ReturnCode.NEXT_COL, filter.filterKeyValue(kv));\n    \n    filter = new ColumnTimestampFilter();\n    filter.addColumnTimestamp(COLUMN, PREWRITE_TS);\n    kv = new KeyValue(ROW, FAMILY, QUALIFIER, PREWRITE_TS, Type.Put, VALUE);\n    Assert.assertEquals(ReturnCode.INCLUDE_AND_NEXT_COL, filter.filterKeyValue(kv));\n    \n    filter = new ColumnTimestampFilter();\n    filter.addColumnTimestamp(COLUMN, PREWRITE_TS);\n    kv = new KeyValue(ROW, FAMILY, QUALIFIER, PREWRITE_TS + 1, Type.Put, VALUE);\n    Assert.assertEquals(ReturnCode.SKIP, filter.filterKeyValue(kv));\n    \n    filter = new ColumnTimestampFilter();\n    filter.addColumnTimestamp(COLUMN, PREWRITE_TS);\n    kv = new KeyValue(ROW, FAMILY, ANOTHER_QUALIFIER, PREWRITE_TS, Type.Put, VALUE);\n    Assert.assertEquals(ReturnCode.SEEK_NEXT_USING_HINT, filter.filterKeyValue(kv));\n    Assert.assertArrayEquals(filter.getNextKeyHint(kv).getFamily(), FAMILY);\n    Assert.assertArrayEquals(filter.getNextKeyHint(kv).getQualifier(), QUALIFIER);\n    kv = new KeyValue(ROW, FAMILY, QUALIFIER, PREWRITE_TS + 1, Type.Put, VALUE);\n    Assert.assertEquals(ReturnCode.SKIP, filter.filterKeyValue(kv));\n    kv = new KeyValue(ROW, FAMILY, QUALIFIER, PREWRITE_TS, Type.Put, VALUE);\n    Assert.assertEquals(ReturnCode.INCLUDE_AND_NEXT_COL, filter.filterKeyValue(kv));\n    kv = new KeyValue(ROW, FAMILY, QUALIFIER, PREWRITE_TS - 1, Type.Put, VALUE);\n    Assert.assertEquals(ReturnCode.NEXT_ROW, filter.filterKeyValue(kv));\n    byte[] laterQualifier = Bytes.toBytes(Bytes.toString(QUALIFIER) + \"#\");\n    kv = new KeyValue(ROW, FAMILY, laterQualifier, PREWRITE_TS + 1, Type.Put, VALUE);\n    Assert.assertEquals(ReturnCode.NEXT_ROW, filter.filterKeyValue(kv));\n\n  }", "signature": "void testFilterKeyValue()", "full_signature": "@Test public void testFilterKeyValue()", "class_method_signature": "TestColumnTimestampFilter.testFilterKeyValue()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "filterKeyValue", "addColumnTimestamp", "assertEquals", "filterKeyValue", "assertArrayEquals", "getFamily", "getNextKeyHint", "assertArrayEquals", "getQualifier", "getNextKeyHint", "addColumnTimestamp", "assertEquals", "filterKeyValue", "assertArrayEquals", "getFamily", "getNextKeyHint", "assertArrayEquals", "getQualifier", "getNextKeyHint", "addColumnTimestamp", "toBytes", "toString", "assertEquals", "filterKeyValue", "addColumnTimestamp", "assertEquals", "filterKeyValue", "addColumnTimestamp", "assertEquals", "filterKeyValue", "addColumnTimestamp", "assertEquals", "filterKeyValue", "addColumnTimestamp", "assertEquals", "filterKeyValue", "assertArrayEquals", "getFamily", "getNextKeyHint", "assertArrayEquals", "getQualifier", "getNextKeyHint", "assertEquals", "filterKeyValue", "assertEquals", "filterKeyValue", "assertEquals", "filterKeyValue", "toBytes", "toString", "assertEquals", "filterKeyValue"]}, "focal_class": {"identifier": "ColumnTimestampFilter", "superclass": "extends FilterBase", "interfaces": "", "fields": [{"original_string": "private List<Pair<Column, Long>> columnsTs = new ArrayList<Pair<Column, Long>>();", "modifier": "private", "type": "List<Pair<Column, Long>>", "declarator": "columnsTs = new ArrayList<Pair<Column, Long>>()", "var_name": "columnsTs"}, {"original_string": "private int curColumnIdx = -1;", "modifier": "private", "type": "int", "declarator": "curColumnIdx = -1", "var_name": "curColumnIdx"}], "methods": [{"identifier": "addColumnTimestamp", "parameters": "(Column column, long timestamp)", "modifiers": "public", "return": "void", "signature": "void addColumnTimestamp(Column column, long timestamp)", "full_signature": "public void addColumnTimestamp(Column column, long timestamp)", "class_method_signature": "ColumnTimestampFilter.addColumnTimestamp(Column column, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "sortColumnsTs", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void sortColumnsTs()", "full_signature": "private void sortColumnsTs()", "class_method_signature": "ColumnTimestampFilter.sortColumnsTs()", "testcase": false, "constructor": false}, {"identifier": "filterKeyValue", "parameters": "(KeyValue v)", "modifiers": "public", "return": "ReturnCode", "signature": "ReturnCode filterKeyValue(KeyValue v)", "full_signature": "public ReturnCode filterKeyValue(KeyValue v)", "class_method_signature": "ColumnTimestampFilter.filterKeyValue(KeyValue v)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void reset()", "full_signature": "@Override public void reset()", "class_method_signature": "ColumnTimestampFilter.reset()", "testcase": false, "constructor": false}, {"identifier": "getNextKeyHint", "parameters": "(KeyValue kv)", "modifiers": "@Override public", "return": "KeyValue", "signature": "KeyValue getNextKeyHint(KeyValue kv)", "full_signature": "@Override public KeyValue getNextKeyHint(KeyValue kv)", "class_method_signature": "ColumnTimestampFilter.getNextKeyHint(KeyValue kv)", "testcase": false, "constructor": false}, {"identifier": "readFields", "parameters": "(DataInput arg0)", "modifiers": "public", "return": "void", "signature": "void readFields(DataInput arg0)", "full_signature": "public void readFields(DataInput arg0)", "class_method_signature": "ColumnTimestampFilter.readFields(DataInput arg0)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(DataOutput arg0)", "modifiers": "public", "return": "void", "signature": "void write(DataOutput arg0)", "full_signature": "public void write(DataOutput arg0)", "class_method_signature": "ColumnTimestampFilter.write(DataOutput arg0)", "testcase": false, "constructor": false}], "file": "themis-coprocessor/src/main/java/org/apache/hadoop/hbase/themis/cp/ColumnTimestampFilter.java"}, "focal_method": {"identifier": "filterKeyValue", "parameters": "(KeyValue v)", "modifiers": "public", "return": "ReturnCode", "body": "public ReturnCode filterKeyValue(KeyValue v) {\n    if (curColumnIdx == -1) {\n      sortColumnsTs();\n      curColumnIdx = 0;\n    }\n    \n    if (curColumnIdx >= columnsTs.size()) {\n      return ReturnCode.NEXT_ROW;\n    }\n    \n    Column column = new Column(v.getFamily(), v.getQualifier());\n    Column curColumn = null;\n    Long curTs = null;\n    int cmpRet = 0;\n    do {\n      curColumn = columnsTs.get(curColumnIdx).getFirst();\n      curTs = columnsTs.get(curColumnIdx).getSecond();\n    } while ((cmpRet = curColumn.compareTo(column)) < 0 && ++curColumnIdx < columnsTs.size());\n    \n    if (cmpRet < 0) {\n      return ReturnCode.NEXT_ROW;\n    } else if (cmpRet > 0){\n      return ReturnCode.SEEK_NEXT_USING_HINT;\n    } else {\n      if (curTs.equals(v.getTimestamp())) {\n        ++curColumnIdx;\n        return ReturnCode.INCLUDE_AND_NEXT_COL;\n      } else if (curTs > v.getTimestamp()) {\n        return ReturnCode.NEXT_COL;      \n      } else {\n        return ReturnCode.SKIP;\n      }\n    }\n  }", "signature": "ReturnCode filterKeyValue(KeyValue v)", "full_signature": "public ReturnCode filterKeyValue(KeyValue v)", "class_method_signature": "ColumnTimestampFilter.filterKeyValue(KeyValue v)", "testcase": false, "constructor": false, "invocations": ["sortColumnsTs", "size", "getFamily", "getQualifier", "getFirst", "get", "getSecond", "get", "compareTo", "size", "equals", "getTimestamp", "getTimestamp"]}, "repository": {"repo_id": 19147361, "url": "https://github.com/XiaoMi/themis", "language": "Java", "is_fork": false, "fork_count": 57, "stargazer_count": 212, "size": 1400, "license": "Apache License 2.0"}}