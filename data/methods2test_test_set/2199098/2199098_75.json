{"test_class": {"identifier": "DefaultRightLoaderTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "xwiki-security-rightservice/src/test/java/org/xwiki/security/internal/DefaultRightLoaderTest.java"}, "test_case": {"identifier": "testRightLoader", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test \n    public void testRightLoader()\n    {\n        DocumentReference userX = docRefResolver.resolve(\"wikiY:XWiki.userX\");\n        DocumentReference userY = docRefResolver.resolve(\"wikiY:XWiki.userY\");\n        DocumentReference userZ = docRefResolver.resolve(\"xwiki:XWiki.userZ\");\n        DocumentReference admin = docRefResolver.resolve(\"xwiki:XWiki.Admin\");\n\n        MockDocument wikiDocument = new MockDocument(\"xwiki:XWiki.XWikiPreferences\", \"xwiki:XWiki.Admin\");\n        MockDocument allGroupDocument = MockDocument.newGroupDocument(\"xwiki:XWiki.XWikiAllGroup\", \n                                                                      new String[]{\"wikiY:XWiki.userX\", \n                                                                                   \"wikiY:XWiki.userY\" });\n        wiki.add(new MockDocument(userX, \"xwiki:XWiki.Admin\")\n                 .allowLocal(asList(new Right[]{EDIT }),\n                             asList(new String[]{\"wikiY:XWiki.userX\"}),\n                             EMPTY_LIST ))\n            .add(new MockDocument(userY, \"xwiki:XWiki.Admin\")\n                 .allowLocal(asList(new Right[]{EDIT }),\n                             asList(new String[]{\"wikiY:XWiki.userY\"}),\n                             EMPTY_LIST ))\n            .add(wikiDocument)\n            .add(allGroupDocument);\n\n        try {\n            mockery.checking(new Expectations() {{\n                allowing(mockGroupService)\n                    .getAllGroupsNamesForMember(\"wikiY:XWiki.userX\", Integer.MAX_VALUE, 0, xwikiContext);\n                will(returnValue(asList(new String[]{\"XWiki.XWikiAllGroup\"})));\n                allowing(mockGroupService)\n                    .getAllGroupsNamesForMember(\"wikiY:XWiki.userY\", Integer.MAX_VALUE, 0, xwikiContext);\n                will(returnValue(asList(new String[]{\"XWiki.XWikiAllGroup\"})));\n            }});\n\n            RightLoader loader = getComponentManager().lookup(RightLoader.class);\n            RightCache  cache  = getComponentManager().lookup(RightCache.class);\n            RightCacheInvalidator invalidator = getComponentManager().lookup(RightCacheInvalidator.class);\n\n            AccessLevel edit = AccessLevel.DEFAULT_ACCESS_LEVEL.clone();\n            edit.allow(EDIT);\n\n            AccessLevel level = loader.load(userX, userX);\n            System.out.println(\"Level is \" + level + \", expected \" + edit);\n            assertTrue(level.equals(edit));\n\n            RightCacheEntry entry = cache.get(cache.getRightCacheKey(userX), cache.getRightCacheKey(userX));\n            assertTrue(entry != null);\n            assertTrue(entry.equals(level));\n\n            entry = cache.get(cache.getRightCacheKey(userX));\n            assertTrue(entry != null);\n            assertTrue(entry.getType() == RightCacheEntry.Type.HAVE_OBJECTS);\n\n            entry = cache.get(cache.getRightCacheKey(userX.getParent()));\n            assertTrue(entry != null);\n            assertTrue(entry.getType() == RightCacheEntry.Type.HAVE_NO_OBJECTS);\n\n            entry = cache.get(cache.getRightCacheKey(userX.getParent().getParent()));\n            assertTrue(entry != null);\n            assertTrue(entry.getType() == RightCacheEntry.Type.HAVE_OBJECTS);\n\n            ((EventListener) invalidator).onEvent(null, wikiDocument, null);\n\n            entry = cache.get(cache.getRightCacheKey(userX), cache.getRightCacheKey(userX));\n            assertTrue(entry == null);\n\n            entry = cache.get(cache.getRightCacheKey(userX));\n            assertTrue(entry == null);\n\n            entry = cache.get(cache.getRightCacheKey(userX.getParent()));\n            assertTrue(entry == null);\n\n            entry = cache.get(cache.getRightCacheKey(userX.getParent().getParent()));\n            assertTrue(entry == null);\n\n            wikiDocument.denyGlobal(asList(new Right[]{COMMENT }),\n                                    EMPTY_LIST,\n                                    asList(new String[]{\"wikiY:XWiki.XWikiAllGroup\" }));\n\n            AccessLevel editNoComment = edit.clone();\n            editNoComment.deny(COMMENT);\n            level = loader.load(userX, userX);\n            assertTrue(level.equals(editNoComment));\n\n            mockery.checking(new Expectations() {{\n                allowing(mockGroupService).getAllMembersNamesForGroup(\"xwiki:XWiki.GroupX\", 100, 0, xwikiContext);\n                will(returnValue(asList(new String[]{\"wikiY:XWiki.userX\"})));\n            }});\n            MockDocument group = MockDocument.newGroupDocument(\"XWiki.GroupX\", new String[] {\"wikiY:XWiki.userX\" } );\n            wiki.add(group);\n            ((EventListener) invalidator).onEvent(null, group, null);\n\n            entry = cache.get(cache.getRightCacheKey(userX));\n            assertTrue(\"Invalidating cache after group update\", entry == null);\n\n            entry = cache.get(cache.getRightCacheKey(userX), cache.getRightCacheKey(userX));\n            assertTrue(\"Invalidating cache after group update\", entry == null);\n\n            entry = cache.get(cache.getRightCacheKey(userX.getParent()));\n            assertTrue(\"Invalidating cache after group update\", entry != null);\n\n            entry = cache.get(cache.getRightCacheKey(userX.getParent().getParent()));\n            assertTrue(\"Invalidating cache after group update\", entry != null);\n            \n\n        } catch (Exception e) {\n            LOG.error(\"Caught exception.\", e);\n            assert false;\n        }\n    }", "signature": "void testRightLoader()", "full_signature": "@Test public void testRightLoader()", "class_method_signature": "DefaultRightLoaderTest.testRightLoader()", "testcase": true, "constructor": false, "invocations": ["resolve", "resolve", "resolve", "resolve", "newGroupDocument", "add", "add", "add", "add", "allowLocal", "asList", "asList", "allowLocal", "asList", "asList", "checking", "getAllGroupsNamesForMember", "allowing", "will", "returnValue", "asList", "getAllGroupsNamesForMember", "allowing", "will", "returnValue", "asList", "lookup", "getComponentManager", "lookup", "getComponentManager", "lookup", "getComponentManager", "clone", "allow", "load", "println", "assertTrue", "equals", "get", "getRightCacheKey", "getRightCacheKey", "assertTrue", "assertTrue", "equals", "get", "getRightCacheKey", "assertTrue", "assertTrue", "getType", "get", "getRightCacheKey", "getParent", "assertTrue", "assertTrue", "getType", "get", "getRightCacheKey", "getParent", "getParent", "assertTrue", "assertTrue", "getType", "onEvent", "get", "getRightCacheKey", "getRightCacheKey", "assertTrue", "get", "getRightCacheKey", "assertTrue", "get", "getRightCacheKey", "getParent", "assertTrue", "get", "getRightCacheKey", "getParent", "getParent", "assertTrue", "denyGlobal", "asList", "asList", "clone", "deny", "load", "assertTrue", "equals", "checking", "getAllMembersNamesForGroup", "allowing", "will", "returnValue", "asList", "newGroupDocument", "add", "onEvent", "get", "getRightCacheKey", "assertTrue", "get", "getRightCacheKey", "getRightCacheKey", "assertTrue", "get", "getRightCacheKey", "getParent", "assertTrue", "get", "getRightCacheKey", "getParent", "getParent", "assertTrue", "error"]}, "focal_class": {"identifier": "DefaultRightLoader", "superclass": "extends AbstractLogEnabled", "interfaces": "implements RightLoader", "fields": [{"original_string": "private static final int MAX_RETRIES = 5;", "modifier": "private static final", "type": "int", "declarator": "MAX_RETRIES = 5", "var_name": "MAX_RETRIES"}, {"original_string": "@Requirement(\"priority\") private RightResolver rightResolver;", "modifier": "@Requirement(\"priority\") private", "type": "RightResolver", "declarator": "rightResolver", "var_name": "rightResolver"}, {"original_string": "@Requirement private RightCache rightCache;", "modifier": "@Requirement private", "type": "RightCache", "declarator": "rightCache", "var_name": "rightCache"}, {"original_string": "@Requirement private RightCacheInvalidator rightCacheInvalidator;", "modifier": "@Requirement private", "type": "RightCacheInvalidator", "declarator": "rightCacheInvalidator", "var_name": "rightCacheInvalidator"}, {"original_string": "@Requirement private RightsObjectFactory rightsObjectFactory;", "modifier": "@Requirement private", "type": "RightsObjectFactory", "declarator": "rightsObjectFactory", "var_name": "rightsObjectFactory"}], "methods": [{"identifier": "load", "parameters": "(DocumentReference user, EntityReference entity)", "modifiers": "@Override public", "return": "AccessLevel", "signature": "AccessLevel load(DocumentReference user, EntityReference entity)", "full_signature": "@Override public AccessLevel load(DocumentReference user, EntityReference entity)", "class_method_signature": "DefaultRightLoader.load(DocumentReference user, EntityReference entity)", "testcase": false, "constructor": false}, {"identifier": "loadRequiredEntries", "parameters": "(DocumentReference user, EntityReference entity)", "modifiers": "private", "return": "AccessLevel", "signature": "AccessLevel loadRequiredEntries(DocumentReference user, EntityReference entity)", "full_signature": "private AccessLevel loadRequiredEntries(DocumentReference user, EntityReference entity)", "class_method_signature": "DefaultRightLoader.loadRequiredEntries(DocumentReference user, EntityReference entity)", "testcase": false, "constructor": false}, {"identifier": "loadUserAtEntity", "parameters": "(DocumentReference user, EntityReference entity)", "modifiers": "private", "return": "AccessLevel", "signature": "AccessLevel loadUserAtEntity(DocumentReference user, EntityReference entity)", "full_signature": "private AccessLevel loadUserAtEntity(DocumentReference user, EntityReference entity)", "class_method_signature": "DefaultRightLoader.loadUserAtEntity(DocumentReference user, EntityReference entity)", "testcase": false, "constructor": false}, {"identifier": "loadGroupEntries", "parameters": "(DocumentReference user)", "modifiers": "private", "return": "Collection<DocumentReference>", "signature": "Collection<DocumentReference> loadGroupEntries(DocumentReference user)", "full_signature": "private Collection<DocumentReference> loadGroupEntries(DocumentReference user)", "class_method_signature": "DefaultRightLoader.loadGroupEntries(DocumentReference user)", "testcase": false, "constructor": false}, {"identifier": "getRightsObjects", "parameters": "(RightCacheKey entityKey, EntityReference entity)", "modifiers": "private", "return": "List<Collection<RightsObject>>", "signature": "List<Collection<RightsObject>> getRightsObjects(RightCacheKey entityKey, EntityReference entity)", "full_signature": "private List<Collection<RightsObject>> getRightsObjects(RightCacheKey entityKey, EntityReference entity)", "class_method_signature": "DefaultRightLoader.getRightsObjects(RightCacheKey entityKey, EntityReference entity)", "testcase": false, "constructor": false}, {"identifier": "loadRightsObjects", "parameters": "(EntityReference entity)", "modifiers": "private", "return": "RightCacheEntry", "signature": "RightCacheEntry loadRightsObjects(EntityReference entity)", "full_signature": "private RightCacheEntry loadRightsObjects(EntityReference entity)", "class_method_signature": "DefaultRightLoader.loadRightsObjects(EntityReference entity)", "testcase": false, "constructor": false}], "file": "xwiki-security-rightservice/src/main/java/org/xwiki/security/internal/DefaultRightLoader.java"}, "focal_method": {"identifier": "load", "parameters": "(DocumentReference user, EntityReference entity)", "modifiers": "@Override public", "return": "AccessLevel", "body": "@Override\n    public AccessLevel load(DocumentReference user, EntityReference entity)\n        throws RightServiceException\n    {\n        int retries = 0;\n    RETRY: \n        while (true) {\n            rightCacheInvalidator.suspend();\n\n            try {\n                retries++;\n                return loadRequiredEntries(user, entity);\n            } catch (ParentEntryEvictedException e) {\n                if (retries < MAX_RETRIES) {\n                    getLogger().debug(\"The parent entry was evicted. Have tried \" \n                                      + retries\n                                      + \" times.  Trying again...\");\n                    continue RETRY;\n                }\n            } catch (ConflictingInsertionException e) {\n                if (retries < MAX_RETRIES) {\n                    getLogger().debug(\"There were conflicting insertions.  Have tried \"\n                                      + retries\n                                      + \" times.  Retrying...\");\n                    continue RETRY;\n                }\n            } finally {\n                rightCacheInvalidator.resume();\n            }\n            getLogger().error(\"Failed to load the cache in \"\n                              + retries\n                              + \" attempts.  Giving up.\");\n            throw new RightServiceException();\n        }\n    }", "signature": "AccessLevel load(DocumentReference user, EntityReference entity)", "full_signature": "@Override public AccessLevel load(DocumentReference user, EntityReference entity)", "class_method_signature": "DefaultRightLoader.load(DocumentReference user, EntityReference entity)", "testcase": false, "constructor": false, "invocations": ["suspend", "loadRequiredEntries", "debug", "getLogger", "debug", "getLogger", "resume", "error", "getLogger"]}, "repository": {"repo_id": 2199098, "url": "https://github.com/xwiki-contrib/sandbox", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 8, "size": 14798, "license": "licensed"}}