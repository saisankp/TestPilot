{"test_class": {"identifier": "SyntaxTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DEFINITION_1_1_KEYWORD = \"Definition 1.1\";", "modifier": "private static final", "type": "String", "declarator": "DEFINITION_1_1_KEYWORD = \"Definition 1.1\"", "var_name": "DEFINITION_1_1_KEYWORD"}, {"original_string": "private static final String DEFINITION_1_2_KEYWORD = \"Definition 1.2\";", "modifier": "private static final", "type": "String", "declarator": "DEFINITION_1_2_KEYWORD = \"Definition 1.2\"", "var_name": "DEFINITION_1_2_KEYWORD"}, {"original_string": "private static final String DEFINITION_2_1_KEYWORD = \"Definition 2.1\";", "modifier": "private static final", "type": "String", "declarator": "DEFINITION_2_1_KEYWORD = \"Definition 2.1\"", "var_name": "DEFINITION_2_1_KEYWORD"}, {"original_string": "private static final String DEFINITION_2_2_KEYWORD = \"Definition 2.2\";", "modifier": "private static final", "type": "String", "declarator": "DEFINITION_2_2_KEYWORD = \"Definition 2.2\"", "var_name": "DEFINITION_2_2_KEYWORD"}, {"original_string": "private static final String DEFINITION_1_1_PARAMATER_LINE_SUFFIX = \"parameter line for class 1, method 1\";", "modifier": "private static final", "type": "String", "declarator": "DEFINITION_1_1_PARAMATER_LINE_SUFFIX = \"parameter line for class 1, method 1\"", "var_name": "DEFINITION_1_1_PARAMATER_LINE_SUFFIX"}, {"original_string": "private static final String DEFINITION_1_2_PARAMATER_LINE_SUFFIX = \"parameter line for class 1, method 2\";", "modifier": "private static final", "type": "String", "declarator": "DEFINITION_1_2_PARAMATER_LINE_SUFFIX = \"parameter line for class 1, method 2\"", "var_name": "DEFINITION_1_2_PARAMATER_LINE_SUFFIX"}, {"original_string": "private static final String DEFINITION_2_1_PARAMATER_LINE_SUFFIX = \"parameter line for class 2, method 1\";", "modifier": "private static final", "type": "String", "declarator": "DEFINITION_2_1_PARAMATER_LINE_SUFFIX = \"parameter line for class 2, method 1\"", "var_name": "DEFINITION_2_1_PARAMATER_LINE_SUFFIX"}, {"original_string": "private static final String DEFINITION_2_2_PARAMATER_LINE_SUFFIX = \"parameter line for class 2, method 2\";", "modifier": "private static final", "type": "String", "declarator": "DEFINITION_2_2_PARAMATER_LINE_SUFFIX = \"parameter line for class 2, method 2\"", "var_name": "DEFINITION_2_2_PARAMATER_LINE_SUFFIX"}, {"original_string": "private static final String DEFINITION_1_1_PARAMATER_LINE_FULL = DEFINITION_1_1_KEYWORD\n            + DEFINITION_1_1_PARAMATER_LINE_SUFFIX;", "modifier": "private static final", "type": "String", "declarator": "DEFINITION_1_1_PARAMATER_LINE_FULL = DEFINITION_1_1_KEYWORD\n            + DEFINITION_1_1_PARAMATER_LINE_SUFFIX", "var_name": "DEFINITION_1_1_PARAMATER_LINE_FULL"}, {"original_string": "private static final String DEFINITION_1_2_PARAMATER_LINE_FULL = DEFINITION_1_2_KEYWORD\n            + DEFINITION_1_2_PARAMATER_LINE_SUFFIX;", "modifier": "private static final", "type": "String", "declarator": "DEFINITION_1_2_PARAMATER_LINE_FULL = DEFINITION_1_2_KEYWORD\n            + DEFINITION_1_2_PARAMATER_LINE_SUFFIX", "var_name": "DEFINITION_1_2_PARAMATER_LINE_FULL"}, {"original_string": "private static final String DEFINITION_2_1_PARAMATER_LINE_FULL = DEFINITION_2_1_KEYWORD\n            + DEFINITION_2_1_PARAMATER_LINE_SUFFIX;", "modifier": "private static final", "type": "String", "declarator": "DEFINITION_2_1_PARAMATER_LINE_FULL = DEFINITION_2_1_KEYWORD\n            + DEFINITION_2_1_PARAMATER_LINE_SUFFIX", "var_name": "DEFINITION_2_1_PARAMATER_LINE_FULL"}, {"original_string": "private static final String DEFINITION_2_2_PARAMATER_LINE_FULL = DEFINITION_2_2_KEYWORD\n            + DEFINITION_2_2_PARAMATER_LINE_SUFFIX;", "modifier": "private static final", "type": "String", "declarator": "DEFINITION_2_2_PARAMATER_LINE_FULL = DEFINITION_2_2_KEYWORD\n            + DEFINITION_2_2_PARAMATER_LINE_SUFFIX", "var_name": "DEFINITION_2_2_PARAMATER_LINE_FULL"}, {"original_string": "private Syntax syntax;", "modifier": "private", "type": "Syntax", "declarator": "syntax", "var_name": "syntax"}], "file": "core/src/test/java/com/technophobia/substeps/model/SyntaxTest.java"}, "test_case": {"identifier": "testInvalidPatternInStepImplDoesntStopSyntaxProcessing", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInvalidPatternInStepImplDoesntStopSyntaxProcessing() throws Exception {\n        // eg @Step(\"ExecuteQueryAndStashResults {([^}]*)}\") <- this is an\n        // invalid pattern\n\n        // this should not throw an exception\n        this.syntax.addStepImplementation(stepImplementation(\"ExecuteQueryAndStashResults\",\n                \"ExecuteQueryAndStashResults {([^}]*)}\", StepDefinitionClass2.class, \"method2\"));\n\n    }", "signature": "void testInvalidPatternInStepImplDoesntStopSyntaxProcessing()", "full_signature": "@Test public void testInvalidPatternInStepImplDoesntStopSyntaxProcessing()", "class_method_signature": "SyntaxTest.testInvalidPatternInStepImplDoesntStopSyntaxProcessing()", "testcase": true, "constructor": false, "invocations": ["addStepImplementation", "stepImplementation"]}, "focal_class": {"identifier": "Syntax", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(Syntax.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(Syntax.class)", "var_name": "log"}, {"original_string": "private final Map<String, PatternMap<StepImplementation>> stepImplementationMap = new HashMap<String, PatternMap<StepImplementation>>();", "modifier": "private final", "type": "Map<String, PatternMap<StepImplementation>>", "declarator": "stepImplementationMap = new HashMap<String, PatternMap<StepImplementation>>()", "var_name": "stepImplementationMap"}, {"original_string": "private final Map<StepImplementation, List<StepImplementationUsage>> stepImplementationsUsageMap = new HashMap<StepImplementation, List<StepImplementationUsage>>();", "modifier": "private final", "type": "Map<StepImplementation, List<StepImplementationUsage>>", "declarator": "stepImplementationsUsageMap = new HashMap<StepImplementation, List<StepImplementationUsage>>()", "var_name": "stepImplementationsUsageMap"}, {"original_string": "private PatternMap<ParentStep> subStepsMap = null;", "modifier": "private", "type": "PatternMap<ParentStep>", "declarator": "subStepsMap = null", "var_name": "subStepsMap"}, {"original_string": "private boolean strict;", "modifier": "private", "type": "boolean", "declarator": "strict", "var_name": "strict"}, {"original_string": "private boolean failOnDuplicateStepImplementations = true;", "modifier": "private", "type": "boolean", "declarator": "failOnDuplicateStepImplementations = true", "var_name": "failOnDuplicateStepImplementations"}, {"original_string": "private String[] nonStrictKeywordPrecedence;", "modifier": "private", "type": "String[]", "declarator": "nonStrictKeywordPrecedence", "var_name": "nonStrictKeywordPrecedence"}, {"original_string": "private final SyntaxErrorReporter syntaxErrorReporter;", "modifier": "private final", "type": "SyntaxErrorReporter", "declarator": "syntaxErrorReporter", "var_name": "syntaxErrorReporter"}], "methods": [{"identifier": "Syntax", "parameters": "()", "modifiers": "public", "return": "", "signature": " Syntax()", "full_signature": "public  Syntax()", "class_method_signature": "Syntax.Syntax()", "testcase": false, "constructor": true}, {"identifier": "Syntax", "parameters": "(final SyntaxErrorReporter syntaxErrorReporter)", "modifiers": "public", "return": "", "signature": " Syntax(final SyntaxErrorReporter syntaxErrorReporter)", "full_signature": "public  Syntax(final SyntaxErrorReporter syntaxErrorReporter)", "class_method_signature": "Syntax.Syntax(final SyntaxErrorReporter syntaxErrorReporter)", "testcase": false, "constructor": true}, {"identifier": "getStepImplementationMap", "parameters": "()", "modifiers": "public", "return": "Map<String, PatternMap<StepImplementation>>", "signature": "Map<String, PatternMap<StepImplementation>> getStepImplementationMap()", "full_signature": "public Map<String, PatternMap<StepImplementation>> getStepImplementationMap()", "class_method_signature": "Syntax.getStepImplementationMap()", "testcase": false, "constructor": false}, {"identifier": "getStepImplementations", "parameters": "()", "modifiers": "public", "return": "List<StepImplementation>", "signature": "List<StepImplementation> getStepImplementations()", "full_signature": "public List<StepImplementation> getStepImplementations()", "class_method_signature": "Syntax.getStepImplementations()", "testcase": false, "constructor": false}, {"identifier": "getPatternMapForAnnotation", "parameters": "(final String keyWord)", "modifiers": "private", "return": "PatternMap<StepImplementation>", "signature": "PatternMap<StepImplementation> getPatternMapForAnnotation(final String keyWord)", "full_signature": "private PatternMap<StepImplementation> getPatternMapForAnnotation(final String keyWord)", "class_method_signature": "Syntax.getPatternMapForAnnotation(final String keyWord)", "testcase": false, "constructor": false}, {"identifier": "setSubStepsMap", "parameters": "(final PatternMap<ParentStep> loadSubSteps)", "modifiers": "public", "return": "void", "signature": "void setSubStepsMap(final PatternMap<ParentStep> loadSubSteps)", "full_signature": "public void setSubStepsMap(final PatternMap<ParentStep> loadSubSteps)", "class_method_signature": "Syntax.setSubStepsMap(final PatternMap<ParentStep> loadSubSteps)", "testcase": false, "constructor": false}, {"identifier": "getSubStepsMap", "parameters": "()", "modifiers": "public", "return": "PatternMap<ParentStep>", "signature": "PatternMap<ParentStep> getSubStepsMap()", "full_signature": "public PatternMap<ParentStep> getSubStepsMap()", "class_method_signature": "Syntax.getSubStepsMap()", "testcase": false, "constructor": false}, {"identifier": "getSortedRootSubSteps", "parameters": "()", "modifiers": "public", "return": "List<ParentStep>", "signature": "List<ParentStep> getSortedRootSubSteps()", "full_signature": "public List<ParentStep> getSortedRootSubSteps()", "class_method_signature": "Syntax.getSortedRootSubSteps()", "testcase": false, "constructor": false}, {"identifier": "addStepImplementation", "parameters": "(final StepImplementation impl)", "modifiers": "public", "return": "void", "signature": "void addStepImplementation(final StepImplementation impl)", "full_signature": "public void addStepImplementation(final StepImplementation impl)", "class_method_signature": "Syntax.addStepImplementation(final StepImplementation impl)", "testcase": false, "constructor": false}, {"identifier": "setStrict", "parameters": "(final boolean strict, final String[] nonStrictKeywordPrecedence)", "modifiers": "public", "return": "void", "signature": "void setStrict(final boolean strict, final String[] nonStrictKeywordPrecedence)", "full_signature": "public void setStrict(final boolean strict, final String[] nonStrictKeywordPrecedence)", "class_method_signature": "Syntax.setStrict(final boolean strict, final String[] nonStrictKeywordPrecedence)", "testcase": false, "constructor": false}, {"identifier": "setFailOnDuplicateStepImplementations", "parameters": "(final boolean failOnDuplicateStepImplementations)", "modifiers": "public", "return": "void", "signature": "void setFailOnDuplicateStepImplementations(final boolean failOnDuplicateStepImplementations)", "full_signature": "public void setFailOnDuplicateStepImplementations(final boolean failOnDuplicateStepImplementations)", "class_method_signature": "Syntax.setFailOnDuplicateStepImplementations(final boolean failOnDuplicateStepImplementations)", "testcase": false, "constructor": false}, {"identifier": "getStepImplementations", "parameters": "(final String keyword, final String parameterLine,\n                                                           final File source, final int lineNumber)", "modifiers": "public", "return": "List<StepImplementation>", "signature": "List<StepImplementation> getStepImplementations(final String keyword, final String parameterLine,\n                                                           final File source, final int lineNumber)", "full_signature": "public List<StepImplementation> getStepImplementations(final String keyword, final String parameterLine,\n                                                           final File source, final int lineNumber)", "class_method_signature": "Syntax.getStepImplementations(final String keyword, final String parameterLine,\n                                                           final File source, final int lineNumber)", "testcase": false, "constructor": false}, {"identifier": "checkForStepImplementations", "parameters": "(final String keyword, final String parameterLine,\n                                                                final File source, final int lineNumber)", "modifiers": "public", "return": "List<StepImplementation>", "signature": "List<StepImplementation> checkForStepImplementations(final String keyword, final String parameterLine,\n                                                                final File source, final int lineNumber)", "full_signature": "public List<StepImplementation> checkForStepImplementations(final String keyword, final String parameterLine,\n                                                                final File source, final int lineNumber)", "class_method_signature": "Syntax.checkForStepImplementations(final String keyword, final String parameterLine,\n                                                                final File source, final int lineNumber)", "testcase": false, "constructor": false}, {"identifier": "getStepImplementationsInternal", "parameters": "(final String keyword, final String parameterLine,\n                                                                    final boolean okNotTofindAnything, final File source, final int lineNumber)", "modifiers": "private", "return": "List<StepImplementation>", "signature": "List<StepImplementation> getStepImplementationsInternal(final String keyword, final String parameterLine,\n                                                                    final boolean okNotTofindAnything, final File source, final int lineNumber)", "full_signature": "private List<StepImplementation> getStepImplementationsInternal(final String keyword, final String parameterLine,\n                                                                    final boolean okNotTofindAnything, final File source, final int lineNumber)", "class_method_signature": "Syntax.getStepImplementationsInternal(final String keyword, final String parameterLine,\n                                                                    final boolean okNotTofindAnything, final File source, final int lineNumber)", "testcase": false, "constructor": false}, {"identifier": "getStrictStepimplementation", "parameters": "(final String keyword, final String parameterLine,\n                                                                 final boolean okNotTofindAnything, final File source, final int lineNumber)", "modifiers": "private", "return": "List<StepImplementation>", "signature": "List<StepImplementation> getStrictStepimplementation(final String keyword, final String parameterLine,\n                                                                 final boolean okNotTofindAnything, final File source, final int lineNumber)", "full_signature": "private List<StepImplementation> getStrictStepimplementation(final String keyword, final String parameterLine,\n                                                                 final boolean okNotTofindAnything, final File source, final int lineNumber)", "class_method_signature": "Syntax.getStrictStepimplementation(final String keyword, final String parameterLine,\n                                                                 final boolean okNotTofindAnything, final File source, final int lineNumber)", "testcase": false, "constructor": false}, {"identifier": "isStrict", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isStrict()", "full_signature": "public boolean isStrict()", "class_method_signature": "Syntax.isStrict()", "testcase": false, "constructor": false}, {"identifier": "getNonStrictKeywordPrecedence", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] getNonStrictKeywordPrecedence()", "full_signature": "public String[] getNonStrictKeywordPrecedence()", "class_method_signature": "Syntax.getNonStrictKeywordPrecedence()", "testcase": false, "constructor": false}, {"identifier": "getUncalledStepImplementations", "parameters": "()", "modifiers": "public", "return": "List<StepImplementation>", "signature": "List<StepImplementation> getUncalledStepImplementations()", "full_signature": "public List<StepImplementation> getUncalledStepImplementations()", "class_method_signature": "Syntax.getUncalledStepImplementations()", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/technophobia/substeps/model/Syntax.java"}, "focal_method": {"identifier": "addStepImplementation", "parameters": "(final StepImplementation impl)", "modifiers": "public", "return": "void", "body": "public void addStepImplementation(final StepImplementation impl) {\n\n        stepImplementationsUsageMap.put(impl, new ArrayList<StepImplementationUsage>());\n\n        PatternMap<StepImplementation> patternMap = this.stepImplementationMap.get(impl.getKeyword());\n\n        if (patternMap == null) {\n            patternMap = new PatternMap<StepImplementation>();\n            this.stepImplementationMap.put(impl.getKeyword(), patternMap);\n        }\n\n        final String pattern = impl.getValue();\n        if (!patternMap.containsPattern(pattern)) {\n\n            try {\n                patternMap.put(pattern, impl);\n            } catch (final PatternSyntaxException e) {\n\n                log.warn(\"Invalid step implementation pattern: \" + e.getMessage() + \"\\n\" + impl.getClass() + \".\"\n                        + impl.getMethod() + \" will not be added to the syntax\");\n            }\n\n        } else {\n\n            final StepImplementation implAlreadyGot = patternMap.getValueForPattern(pattern);\n\n            if (!implAlreadyGot.getMethod().equals(impl.getMethod())) {\n\n                final StepImplementationException ex = new DuplicateStepImplementationException(pattern,\n                        patternMap.getValueForPattern(pattern), impl);\n                this.syntaxErrorReporter.reportStepImplError(ex);\n                if (this.failOnDuplicateStepImplementations) {\n                    throw ex;\n                }\n            } else {\n                // this is the same - no need to make a fuss, just ignore it\n            }\n        }\n\n    }", "signature": "void addStepImplementation(final StepImplementation impl)", "full_signature": "public void addStepImplementation(final StepImplementation impl)", "class_method_signature": "Syntax.addStepImplementation(final StepImplementation impl)", "testcase": false, "constructor": false, "invocations": ["put", "get", "getKeyword", "put", "getKeyword", "getValue", "containsPattern", "put", "warn", "getMessage", "getClass", "getMethod", "getValueForPattern", "equals", "getMethod", "getMethod", "getValueForPattern", "reportStepImplError"]}, "repository": {"repo_id": 50430650, "url": "https://github.com/Substeps/substeps-framework", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 5, "size": 2783, "license": "licensed"}}