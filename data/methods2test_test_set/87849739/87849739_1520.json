{"test_class": {"identifier": "EntityIdWithTypeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final EntityType ENTITY_TYPE_PLUMBUS = EntityType.of(\"plumbus\");", "modifier": "private static final", "type": "EntityType", "declarator": "ENTITY_TYPE_PLUMBUS = EntityType.of(\"plumbus\")", "var_name": "ENTITY_TYPE_PLUMBUS"}], "file": "model/base/src/test/java/org/eclipse/ditto/model/base/entity/id/EntityIdWithTypeTest.java"}, "test_case": {"identifier": "checkDifferentIds", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void checkDifferentIds() {\n        final EntityIdWithType entityIdFoo = DummyImplementation.of(ENTITY_TYPE_PLUMBUS, \"foo\");\n        final EntityIdWithType entityIdBar = DummyImplementation.of(ENTITY_TYPE_PLUMBUS, \"bar\");\n\n        assertThatIllegalArgumentException()\n                .isThrownBy(() -> entityIdFoo.isCompatibleOrThrow(entityIdBar))\n                .withMessage(\"The entity ID <%s> is not compatible with <%s>!\", entityIdBar, entityIdFoo)\n                .withNoCause();\n    }", "signature": "void checkDifferentIds()", "full_signature": "@Test public void checkDifferentIds()", "class_method_signature": "EntityIdWithTypeTest.checkDifferentIds()", "testcase": true, "constructor": false, "invocations": ["of", "of", "withNoCause", "withMessage", "isThrownBy", "assertThatIllegalArgumentException", "isCompatibleOrThrow"]}, "focal_class": {"identifier": "EntityIdWithType", "superclass": "", "interfaces": "implements EntityId, WithEntityType", "fields": [{"original_string": "private final EntityId entityId;", "modifier": "private final", "type": "EntityId", "declarator": "entityId", "var_name": "entityId"}], "methods": [{"identifier": "EntityIdWithType", "parameters": "(final EntityId entityId)", "modifiers": "protected", "return": "", "signature": " EntityIdWithType(final EntityId entityId)", "full_signature": "protected  EntityIdWithType(final EntityId entityId)", "class_method_signature": "EntityIdWithType.EntityIdWithType(final EntityId entityId)", "testcase": false, "constructor": true}, {"identifier": "createEqualityValidator", "parameters": "(final I expectedEntityId)", "modifiers": "@Deprecated public static", "return": "Consumer<I>", "signature": "Consumer<I> createEqualityValidator(final I expectedEntityId)", "full_signature": "@Deprecated public static Consumer<I> createEqualityValidator(final I expectedEntityId)", "class_method_signature": "EntityIdWithType.createEqualityValidator(final I expectedEntityId)", "testcase": false, "constructor": false}, {"identifier": "isCompatibleOrThrow", "parameters": "(@Nullable final EntityIdWithType otherEntityId)", "modifiers": "public", "return": "boolean", "signature": "boolean isCompatibleOrThrow(@Nullable final EntityIdWithType otherEntityId)", "full_signature": "public boolean isCompatibleOrThrow(@Nullable final EntityIdWithType otherEntityId)", "class_method_signature": "EntityIdWithType.isCompatibleOrThrow(@Nullable final EntityIdWithType otherEntityId)", "testcase": false, "constructor": false}, {"identifier": "getIllegalArgumentExceptionForDifferentEntityIds", "parameters": "(\n            @Nullable final EntityIdWithType actual)", "modifiers": "protected", "return": "IllegalArgumentException", "signature": "IllegalArgumentException getIllegalArgumentExceptionForDifferentEntityIds(\n            @Nullable final EntityIdWithType actual)", "full_signature": "protected IllegalArgumentException getIllegalArgumentExceptionForDifferentEntityIds(\n            @Nullable final EntityIdWithType actual)", "class_method_signature": "EntityIdWithType.getIllegalArgumentExceptionForDifferentEntityIds(\n            @Nullable final EntityIdWithType actual)", "testcase": false, "constructor": false}, {"identifier": "isDummy", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDummy()", "full_signature": "@Override public boolean isDummy()", "class_method_signature": "EntityIdWithType.isDummy()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(@Nullable final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(@Nullable final Object o)", "full_signature": "@Override public boolean equals(@Nullable final Object o)", "class_method_signature": "EntityIdWithType.equals(@Nullable final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "EntityIdWithType.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "EntityIdWithType.toString()", "testcase": false, "constructor": false}], "file": "model/base/src/main/java/org/eclipse/ditto/model/base/entity/id/EntityIdWithType.java"}, "focal_method": {"identifier": "isCompatibleOrThrow", "parameters": "(@Nullable final EntityIdWithType otherEntityId)", "modifiers": "public", "return": "boolean", "body": "public boolean isCompatibleOrThrow(@Nullable final EntityIdWithType otherEntityId) {\n        if (!equals(otherEntityId)) {\n            throw getIllegalArgumentExceptionForDifferentEntityIds(otherEntityId);\n        }\n        return true;\n    }", "signature": "boolean isCompatibleOrThrow(@Nullable final EntityIdWithType otherEntityId)", "full_signature": "public boolean isCompatibleOrThrow(@Nullable final EntityIdWithType otherEntityId)", "class_method_signature": "EntityIdWithType.isCompatibleOrThrow(@Nullable final EntityIdWithType otherEntityId)", "testcase": false, "constructor": false, "invocations": ["equals", "getIllegalArgumentExceptionForDifferentEntityIds"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}