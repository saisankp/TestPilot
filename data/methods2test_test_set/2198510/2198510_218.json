{"test_class": {"identifier": "TestHostInterceptor", "superclass": "", "interfaces": "", "fields": [], "file": "flume-ng-core/src/test/java/org/apache/flume/interceptor/TestHostInterceptor.java"}, "test_case": {"identifier": "testBasic", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testBasic() throws Exception {\n    Interceptor.Builder builder = InterceptorBuilderFactory.newInstance(\n            InterceptorType.HOST.toString());\n    Interceptor interceptor = builder.build();\n\n    Event eventBeforeIntercept = EventBuilder.withBody(\"test event\",\n            Charsets.UTF_8);\n    Assert.assertNull(eventBeforeIntercept.getHeaders().get(Constants.HOST));\n\n    Event eventAfterIntercept = interceptor.intercept(eventBeforeIntercept);\n    String actualHost = eventAfterIntercept.getHeaders().get(Constants.HOST);\n\n    Assert.assertNotNull(actualHost);\n  }", "signature": "void testBasic()", "full_signature": "@Test public void testBasic()", "class_method_signature": "TestHostInterceptor.testBasic()", "testcase": true, "constructor": false, "invocations": ["newInstance", "toString", "build", "withBody", "assertNull", "get", "getHeaders", "intercept", "get", "getHeaders", "assertNotNull"]}, "focal_class": {"identifier": "HostInterceptor", "superclass": "", "interfaces": "implements Interceptor", "fields": [{"original_string": "private static final Logger logger = LoggerFactory\n          .getLogger(HostInterceptor.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory\n          .getLogger(HostInterceptor.class)", "var_name": "logger"}, {"original_string": "private final boolean preserveExisting;", "modifier": "private final", "type": "boolean", "declarator": "preserveExisting", "var_name": "preserveExisting"}, {"original_string": "private final String header;", "modifier": "private final", "type": "String", "declarator": "header", "var_name": "header"}, {"original_string": "private String host = null;", "modifier": "private", "type": "String", "declarator": "host = null", "var_name": "host"}], "methods": [{"identifier": "HostInterceptor", "parameters": "(boolean preserveExisting,\n      boolean useIP, String header)", "modifiers": "private", "return": "", "signature": " HostInterceptor(boolean preserveExisting,\n      boolean useIP, String header)", "full_signature": "private  HostInterceptor(boolean preserveExisting,\n      boolean useIP, String header)", "class_method_signature": "HostInterceptor.HostInterceptor(boolean preserveExisting,\n      boolean useIP, String header)", "testcase": false, "constructor": true}, {"identifier": "initialize", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void initialize()", "full_signature": "@Override public void initialize()", "class_method_signature": "HostInterceptor.initialize()", "testcase": false, "constructor": false}, {"identifier": "intercept", "parameters": "(Event event)", "modifiers": "@Override public", "return": "Event", "signature": "Event intercept(Event event)", "full_signature": "@Override public Event intercept(Event event)", "class_method_signature": "HostInterceptor.intercept(Event event)", "testcase": false, "constructor": false}, {"identifier": "intercept", "parameters": "(List<Event> events)", "modifiers": "@Override public", "return": "List<Event>", "signature": "List<Event> intercept(List<Event> events)", "full_signature": "@Override public List<Event> intercept(List<Event> events)", "class_method_signature": "HostInterceptor.intercept(List<Event> events)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "HostInterceptor.close()", "testcase": false, "constructor": false}], "file": "flume-ng-core/src/main/java/org/apache/flume/interceptor/HostInterceptor.java"}, "focal_method": {"identifier": "intercept", "parameters": "(Event event)", "modifiers": "@Override public", "return": "Event", "body": "@Override\n  public Event intercept(Event event) {\n    Map<String, String> headers = event.getHeaders();\n\n    if (preserveExisting && headers.containsKey(header)) {\n      return event;\n    }\n    if (host != null) {\n      headers.put(header, host);\n    }\n\n    return event;\n  }", "signature": "Event intercept(Event event)", "full_signature": "@Override public Event intercept(Event event)", "class_method_signature": "HostInterceptor.intercept(Event event)", "testcase": false, "constructor": false, "invocations": ["getHeaders", "containsKey", "put"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}