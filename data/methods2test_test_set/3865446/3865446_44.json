{"test_class": {"identifier": "SimpleFunctionEvaluatorTest", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "jcool/benchmark/src/test/java/cz/cvut/felk/cig/jcool/benchmark/method/evolutionary/evaluators/SimpleFunctionEvaluatorTest.java"}, "test_case": {"identifier": "testEvaluate1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEvaluate1() throws Exception {\n        DeJongParabolaFunction function = new DeJongParabolaFunction();\n        function.setDimension(2);\n        function.setOffset(0.0);\n        function.setInverted(false);\n\n        SimpleIndividual ind1 = new SimpleIndividual(1, 0.0, new SimplePhenotypeRepresentation(new double[]{1.0, 2.0}));\n        SimpleIndividual ind2 = new SimpleIndividual(1, 0.0, new SimplePhenotypeRepresentation(new double[]{-2.0, 2.0}));\n        SimpleIndividual ind3 = new SimpleIndividual(1, 0.0, new SimplePhenotypeRepresentation(new double[]{-3.0, -2.0}));\n        SimpleIndividual ind4 = new SimpleIndividual(1, 0.0, new SimplePhenotypeRepresentation(new double[]{1.0, -3.0}));\n        ind1.setValue(0.0); ind2.setValue(0.0); ind3.setValue(0.0); ind4.setValue(0.0);\n\n        Individual[] individuals = new Individual[]{ind1, ind2, ind3, ind4};\n        Population[] populations = new Population[]{new SimplePopulation(individuals)};\n\n        SimpleFunctionEvaluator evaluator = new SimpleFunctionEvaluator();\n\n        evaluator.evaluate(populations, function);\n\n        assertEquals(5.0, ind1.getValue(), 0.0);\n        assertEquals(8.0, ind2.getValue(), 0.0);\n        assertEquals(13.0, ind3.getValue(), 0.0);\n        assertEquals(10.0, ind4.getValue(), 0.0);\n    }", "signature": "void testEvaluate1()", "full_signature": "@Test public void testEvaluate1()", "class_method_signature": "SimpleFunctionEvaluatorTest.testEvaluate1()", "testcase": true, "constructor": false, "invocations": ["setDimension", "setOffset", "setInverted", "setValue", "setValue", "setValue", "setValue", "evaluate", "assertEquals", "getValue", "assertEquals", "getValue", "assertEquals", "getValue", "assertEquals", "getValue"]}, "focal_class": {"identifier": "SimpleFunctionEvaluator", "superclass": "", "interfaces": "implements FunctionEvaluator", "fields": [], "methods": [{"identifier": "evaluate", "parameters": "(Population[] populations, Function function)", "modifiers": "public", "return": "void", "signature": "void evaluate(Population[] populations, Function function)", "full_signature": "public void evaluate(Population[] populations, Function function)", "class_method_signature": "SimpleFunctionEvaluator.evaluate(Population[] populations, Function function)", "testcase": false, "constructor": false}], "file": "jcool/benchmark/src/main/java/cz/cvut/felk/cig/jcool/benchmark/method/evolutionary/evaluators/SimpleFunctionEvaluator.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(Population[] populations, Function function)", "modifiers": "public", "return": "void", "body": "public void evaluate(Population[] populations, Function function) {\n        // check the arguments\n        if (populations != null && function != null){\n            for (Population population : populations){\n                if (population.getIndividuals() != null){\n                    for (Individual individual : population.getIndividuals()){\n                        if (individual.getRepresentation() != null){\n                            individual.setValue(function.valueAt(individual.getCurrentPosition()));\n                        }\n                    }\n                }\n            }\n        }\n    }", "signature": "void evaluate(Population[] populations, Function function)", "full_signature": "public void evaluate(Population[] populations, Function function)", "class_method_signature": "SimpleFunctionEvaluator.evaluate(Population[] populations, Function function)", "testcase": false, "constructor": false, "invocations": ["getIndividuals", "getIndividuals", "getRepresentation", "setValue", "valueAt", "getCurrentPosition"]}, "repository": {"repo_id": 3865446, "url": "https://github.com/dhonza/JCOOL", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 415, "license": "licensed"}}