{"test_class": {"identifier": "PrfHmacJceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final MacTestVector[] HMAC_TEST_VECTORS = {\n    new MacTestVector(\n        \"HMACSHA1\",\n        \"816aa4c3ee066310ac1e6666cf830c375355c3c8ba18cfe1f50a48c988b46272\",\n        \"220248f5e6d7a49335b3f91374f18bb8b0ff5e8b9a5853f3cfb293855d78301d837a0a2eb9e4f056f06c08361\"\n            + \"bd07180ee802651e69726c28910d2baef379606815dcbab01d0dc7acb0ba8e65a2928130da0522f2b2b3d05260\"\n            + \"885cf1c64f14ca3145313c685b0274bf6a1cb38e4f99895c6a8cc72fbe0e52c01766fede78a1a\",\n        \"17cb2e9e98b748b5ae0f7078ea5519e5\"),\n    new MacTestVector(\n        \"HMACSHA256\",\n        \"6f35628d65813435534b5d67fbdb54cb33403d04e843103e6399f806cb5df95febbdd61236f33245\",\n        \"752cff52e4b90768558e5369e75d97c69643509a5e5904e0a386cbe4d0970ef73f918f675945a9aefe26daea27\"\n            + \"587e8dc909dd56fd0468805f834039b345f855cfe19c44b55af241fff3ffcd8045cd5c288e6c4e284c3720570b\"\n            + \"58e4d47b8feeedc52fd1401f698a209fccfa3b4c0d9a797b046a2759f82a54c41ccd7b5f592b\",\n        \"05d1243e6465ed9620c9aec1c351a186\"),\n    new MacTestVector(\n        \"HMACSHA384\",\n        \"0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b\",\n        \"4869205468657265\",\n        \"afd03944d84895626b0825f4ab46907f15f9dadbe4101ec682aa034c7cebc59cfaea9ea9076ede7f4af152e8b2fa9cb6\"),\n    new MacTestVector(\n        \"HMACSHA512\",\n        \"726374c4b8df517510db9159b730f93431e0cd468d4f3821eab0edb93abd0fba46ab4f1ef35d54fec3d85fa89e\"\n            + \"f72ff3d35f22cf5ab69e205c10afcdf4aaf11338dbb12073474fddb556e60b8ee52f91163ba314303ee0c910e6\"\n            + \"4e87fbf302214edbe3f2\",\n        \"ac939659dc5f668c9969c0530422e3417a462c8b665e8db25a883a625f7aa59b89c5ad0ece5712ca17442d1798\"\n            + \"c6dea25d82c5db260cb59c75ae650be56569c1bd2d612cc57e71315917f116bbfa65a0aeb8af7840ee83d3e710\"\n            + \"1c52cf652d2773531b7a6bdd690b846a741816c860819270522a5b0cdfa1d736c501c583d916\",\n        \"bd3d2df6f9d284b421a43e5f9cb94bc4ff88a88243f1f0133bad0fb1791f6569\"),\n  };", "modifier": "private static final", "type": "MacTestVector[]", "declarator": "HMAC_TEST_VECTORS = {\n    new MacTestVector(\n        \"HMACSHA1\",\n        \"816aa4c3ee066310ac1e6666cf830c375355c3c8ba18cfe1f50a48c988b46272\",\n        \"220248f5e6d7a49335b3f91374f18bb8b0ff5e8b9a5853f3cfb293855d78301d837a0a2eb9e4f056f06c08361\"\n            + \"bd07180ee802651e69726c28910d2baef379606815dcbab01d0dc7acb0ba8e65a2928130da0522f2b2b3d05260\"\n            + \"885cf1c64f14ca3145313c685b0274bf6a1cb38e4f99895c6a8cc72fbe0e52c01766fede78a1a\",\n        \"17cb2e9e98b748b5ae0f7078ea5519e5\"),\n    new MacTestVector(\n        \"HMACSHA256\",\n        \"6f35628d65813435534b5d67fbdb54cb33403d04e843103e6399f806cb5df95febbdd61236f33245\",\n        \"752cff52e4b90768558e5369e75d97c69643509a5e5904e0a386cbe4d0970ef73f918f675945a9aefe26daea27\"\n            + \"587e8dc909dd56fd0468805f834039b345f855cfe19c44b55af241fff3ffcd8045cd5c288e6c4e284c3720570b\"\n            + \"58e4d47b8feeedc52fd1401f698a209fccfa3b4c0d9a797b046a2759f82a54c41ccd7b5f592b\",\n        \"05d1243e6465ed9620c9aec1c351a186\"),\n    new MacTestVector(\n        \"HMACSHA384\",\n        \"0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b\",\n        \"4869205468657265\",\n        \"afd03944d84895626b0825f4ab46907f15f9dadbe4101ec682aa034c7cebc59cfaea9ea9076ede7f4af152e8b2fa9cb6\"),\n    new MacTestVector(\n        \"HMACSHA512\",\n        \"726374c4b8df517510db9159b730f93431e0cd468d4f3821eab0edb93abd0fba46ab4f1ef35d54fec3d85fa89e\"\n            + \"f72ff3d35f22cf5ab69e205c10afcdf4aaf11338dbb12073474fddb556e60b8ee52f91163ba314303ee0c910e6\"\n            + \"4e87fbf302214edbe3f2\",\n        \"ac939659dc5f668c9969c0530422e3417a462c8b665e8db25a883a625f7aa59b89c5ad0ece5712ca17442d1798\"\n            + \"c6dea25d82c5db260cb59c75ae650be56569c1bd2d612cc57e71315917f116bbfa65a0aeb8af7840ee83d3e710\"\n            + \"1c52cf652d2773531b7a6bdd690b846a741816c860819270522a5b0cdfa1d736c501c583d916\",\n        \"bd3d2df6f9d284b421a43e5f9cb94bc4ff88a88243f1f0133bad0fb1791f6569\"),\n  }", "var_name": "HMAC_TEST_VECTORS"}], "file": "java_src/src/test/java/com/google/crypto/tink/subtle/PrfHmacJceTest.java"}, "test_case": {"identifier": "testPrfUniformity", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testPrfUniformity() throws GeneralSecurityException {\n    for (MacTestVector t : HMAC_TEST_VECTORS) {\n      Prf prf = new PrfHmacJce(t.algName, new SecretKeySpec(t.key, \"HMAC\"));\n      // We need a string of bytes identical in size to the tag output size for the given algorithm\n      // so we can test cross correlation. We're not actually validating the output contents of the\n      // HMAC in this function. Therefore - just feed the test tag into the HMAC.\n      byte[] prBytes = prf.compute(t.tag, t.tag.length);\n      TestUtil.ztestUniformString(prBytes);\n      TestUtil.ztestAutocorrelationUniformString(prBytes);\n      TestUtil.ztestCrossCorrelationUniformStrings(prBytes, t.tag);\n    }\n  }", "signature": "void testPrfUniformity()", "full_signature": "@Test public void testPrfUniformity()", "class_method_signature": "PrfHmacJceTest.testPrfUniformity()", "testcase": true, "constructor": false, "invocations": ["compute", "ztestUniformString", "ztestAutocorrelationUniformString", "ztestCrossCorrelationUniformStrings"]}, "focal_class": {"identifier": "PrfHmacJce", "superclass": "", "interfaces": "implements Prf", "fields": [{"original_string": "static final int MIN_KEY_SIZE_IN_BYTES = 16;", "modifier": "static final", "type": "int", "declarator": "MIN_KEY_SIZE_IN_BYTES = 16", "var_name": "MIN_KEY_SIZE_IN_BYTES"}, {"original_string": "@SuppressWarnings({\"Immutable\", \"ThreadLocalUsage\"})\n  private final ThreadLocal<Mac> localMac =\n      new ThreadLocal<Mac>() {\n        @Override\n        protected Mac initialValue() {\n          try {\n            Mac mac = EngineFactory.MAC.getInstance(algorithm);\n            mac.init(key);\n            return mac;\n          } catch (GeneralSecurityException ex) {\n            throw new IllegalStateException(ex);\n          }\n        }\n      };", "modifier": "@SuppressWarnings({\"Immutable\", \"ThreadLocalUsage\"})\n  private final", "type": "ThreadLocal<Mac>", "declarator": "localMac =\n      new ThreadLocal<Mac>() {\n        @Override\n        protected Mac initialValue() {\n          try {\n            Mac mac = EngineFactory.MAC.getInstance(algorithm);\n            mac.init(key);\n            return mac;\n          } catch (GeneralSecurityException ex) {\n            throw new IllegalStateException(ex);\n          }\n        }\n      }", "var_name": "localMac"}, {"original_string": "private final String algorithm;", "modifier": "private final", "type": "String", "declarator": "algorithm", "var_name": "algorithm"}, {"original_string": "@SuppressWarnings(\"Immutable\")  // We do not mutate the key.\n  private final java.security.Key key;", "modifier": "@SuppressWarnings(\"Immutable\")  // We do not mutate the key.\n  private final", "type": "java.security.Key", "declarator": "key", "var_name": "key"}, {"original_string": "private final int maxOutputLength;", "modifier": "private final", "type": "int", "declarator": "maxOutputLength", "var_name": "maxOutputLength"}], "methods": [{"identifier": "PrfHmacJce", "parameters": "(String algorithm, java.security.Key key)", "modifiers": "public", "return": "", "signature": " PrfHmacJce(String algorithm, java.security.Key key)", "full_signature": "public  PrfHmacJce(String algorithm, java.security.Key key)", "class_method_signature": "PrfHmacJce.PrfHmacJce(String algorithm, java.security.Key key)", "testcase": false, "constructor": true}, {"identifier": "compute", "parameters": "(byte[] data, int outputLength)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] compute(byte[] data, int outputLength)", "full_signature": "@Override public byte[] compute(byte[] data, int outputLength)", "class_method_signature": "PrfHmacJce.compute(byte[] data, int outputLength)", "testcase": false, "constructor": false}, {"identifier": "getMaxOutputLength", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxOutputLength()", "full_signature": "public int getMaxOutputLength()", "class_method_signature": "PrfHmacJce.getMaxOutputLength()", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/subtle/PrfHmacJce.java"}, "focal_method": {"identifier": "compute", "parameters": "(byte[] data, int outputLength)", "modifiers": "@Override public", "return": "byte[]", "body": "@Override\n  public byte[] compute(byte[] data, int outputLength) throws GeneralSecurityException {\n    if (outputLength > maxOutputLength) {\n      throw new InvalidAlgorithmParameterException(\"tag size too big\");\n    }\n\n    localMac.get().update(data);\n    return Arrays.copyOf(localMac.get().doFinal(), outputLength);\n  }", "signature": "byte[] compute(byte[] data, int outputLength)", "full_signature": "@Override public byte[] compute(byte[] data, int outputLength)", "class_method_signature": "PrfHmacJce.compute(byte[] data, int outputLength)", "testcase": false, "constructor": false, "invocations": ["update", "get", "copyOf", "doFinal", "get"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}