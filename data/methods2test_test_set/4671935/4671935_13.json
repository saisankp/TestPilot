{"test_class": {"identifier": "TrackSearchTest", "superclass": "", "interfaces": "", "fields": [], "file": "app/src/test/java/com/platypii/baseline/tracks/TrackSearchTest.java"}, "test_case": {"identifier": "matchTrack", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void matchTrack() {\n        final TrackMetadata track = new TrackMetadata(\"tid\", 10000000L, \"nowish\", \"http\", \"kml\", null);\n        track.suit = \"Corvid\";\n        track.canopy = \"OSP\";\n        assertTrue(TrackSearch.matchTrack(track, \"\"));\n        assertTrue(TrackSearch.matchTrack(track, \" \"));\n        assertFalse(TrackSearch.matchTrack(track, \"BASE\"));\n        assertFalse(TrackSearch.matchTrack(track, \"Skydive\"));\n        assertTrue(TrackSearch.matchTrack(track, \"Corvi\"));\n        assertTrue(TrackSearch.matchTrack(track, \"Corvid\"));\n        assertTrue(TrackSearch.matchTrack(track, \"OSP\"));\n        assertTrue(TrackSearch.matchTrack(track, \"co sp\"));\n        assertFalse(TrackSearch.matchTrack(track, \"crv\"));\n    }", "signature": "void matchTrack()", "full_signature": "@Test public void matchTrack()", "class_method_signature": "TrackSearchTest.matchTrack()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "matchTrack", "assertTrue", "matchTrack", "assertFalse", "matchTrack", "assertFalse", "matchTrack", "assertTrue", "matchTrack", "assertTrue", "matchTrack", "assertTrue", "matchTrack", "assertTrue", "matchTrack", "assertFalse", "matchTrack"]}, "focal_class": {"identifier": "TrackSearch", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "matchTrack", "parameters": "(@NonNull TrackMetadata track, @NonNull String filter)", "modifiers": "public static", "return": "boolean", "signature": "boolean matchTrack(@NonNull TrackMetadata track, @NonNull String filter)", "full_signature": "public static boolean matchTrack(@NonNull TrackMetadata track, @NonNull String filter)", "class_method_signature": "TrackSearch.matchTrack(@NonNull TrackMetadata track, @NonNull String filter)", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/platypii/baseline/tracks/TrackSearch.java"}, "focal_method": {"identifier": "matchTrack", "parameters": "(@NonNull TrackMetadata track, @NonNull String filter)", "modifiers": "public static", "return": "boolean", "body": "public static boolean matchTrack(@NonNull TrackMetadata track, @NonNull String filter) {\n        // Make a lower case super string of all properties we want to search\n        final StringBuilder sb = new StringBuilder();\n        if (track.place != null) {\n            sb.append(track.place.name);\n            sb.append(' ');\n            sb.append(track.place.region);\n            sb.append(' ');\n            sb.append(track.place.country);\n            sb.append(' ');\n            sb.append(track.place.objectType);\n            if (track.place.wingsuitable) {\n                sb.append(\" wingsuit\");\n            }\n            if (\"DZ\".equals(track.place.objectType)) {\n                sb.append(\" skydive\");\n            }\n            if (track.place.isBASE()) {\n                sb.append(\" BASE\");\n            }\n        }\n        if (track.suit != null) {\n            sb.append(' ').append(track.suit);\n        }\n        if (track.canopy != null) {\n            sb.append(' ').append(track.canopy);\n        }\n        final String superString = sb.toString().toLowerCase();\n        // Break into tokens\n        for (String token : filter.toLowerCase().split(\" \")) {\n            if (!superString.contains(token)) {\n                return false;\n            }\n        }\n        return true;\n    }", "signature": "boolean matchTrack(@NonNull TrackMetadata track, @NonNull String filter)", "full_signature": "public static boolean matchTrack(@NonNull TrackMetadata track, @NonNull String filter)", "class_method_signature": "TrackSearch.matchTrack(@NonNull TrackMetadata track, @NonNull String filter)", "testcase": false, "constructor": false, "invocations": ["append", "append", "append", "append", "append", "append", "append", "append", "equals", "append", "isBASE", "append", "append", "append", "append", "append", "toLowerCase", "toString", "split", "toLowerCase", "contains"]}, "repository": {"repo_id": 4671935, "url": "https://github.com/platypii/BASElineFlightComputer", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 18, "size": 6949, "license": "licensed"}}