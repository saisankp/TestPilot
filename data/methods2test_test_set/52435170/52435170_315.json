{"test_class": {"identifier": "GraphComparatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private GraphElementFactory graphElementFactory;", "modifier": "private", "type": "GraphElementFactory", "declarator": "graphElementFactory", "var_name": "graphElementFactory"}, {"original_string": "@Mock\n    private DatabaseReader dbReader;", "modifier": "@Mock\n    private", "type": "DatabaseReader", "declarator": "dbReader", "var_name": "dbReader"}, {"original_string": "@Mock\n    private Connection connection;", "modifier": "@Mock\n    private", "type": "Connection", "declarator": "connection", "var_name": "connection"}, {"original_string": "@Mock\n    private AssertionErrorCollector errorCollector;", "modifier": "@Mock\n    private", "type": "AssertionErrorCollector", "declarator": "errorCollector", "var_name": "errorCollector"}], "file": "neo4j/src/test/java/eu/drus/jpa/unit/neo4j/dataset/GraphComparatorTest.java"}, "test_case": {"identifier": "testCompareGraphsForEmptyExpectedGraphAndEmptyGivenGraph", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCompareGraphsForEmptyExpectedGraphAndEmptyGivenGraph() throws SQLException {\n        // GIVEN\n        final Graph<Node, Edge> expectedGraph = createGraph(Collections.emptyList(), Collections.emptyList());\n        final Graph<Node, Edge> givenGraph = createGraph(Collections.emptyList(), Collections.emptyList());\n\n        final GraphComparator comparator = new GraphComparator(graphElementFactory, new String[] {}, false);\n        when(dbReader.readGraph(connection)).thenReturn(givenGraph);\n\n        // WHEN\n        comparator.compare(connection, expectedGraph, errorCollector);\n\n        // THEN\n        verifyZeroInteractions(errorCollector);\n    }", "signature": "void testCompareGraphsForEmptyExpectedGraphAndEmptyGivenGraph()", "full_signature": "@Test public void testCompareGraphsForEmptyExpectedGraphAndEmptyGivenGraph()", "class_method_signature": "GraphComparatorTest.testCompareGraphsForEmptyExpectedGraphAndEmptyGivenGraph()", "testcase": true, "constructor": false, "invocations": ["createGraph", "emptyList", "emptyList", "createGraph", "emptyList", "emptyList", "thenReturn", "when", "readGraph", "compare", "verifyZeroInteractions"]}, "focal_class": {"identifier": "GraphComparator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String FAILED_TO_VERIFY_DATA_BASE_STATE = \"Failed to verify data base state\";", "modifier": "private static final", "type": "String", "declarator": "FAILED_TO_VERIFY_DATA_BASE_STATE = \"Failed to verify data base state\"", "var_name": "FAILED_TO_VERIFY_DATA_BASE_STATE"}, {"original_string": "private static final Function<String, String> ID_MAPPER = (final String name) -> name.equalsIgnoreCase(\"ID\") ? \"id\" : name;", "modifier": "private static final", "type": "Function<String, String>", "declarator": "ID_MAPPER = (final String name) -> name.equalsIgnoreCase(\"ID\") ? \"id\" : name", "var_name": "ID_MAPPER"}, {"original_string": "private ColumnsHolder toExclude;", "modifier": "private", "type": "ColumnsHolder", "declarator": "toExclude", "var_name": "toExclude"}, {"original_string": "private boolean isStrict;", "modifier": "private", "type": "boolean", "declarator": "isStrict", "var_name": "isStrict"}, {"original_string": "private DatabaseReader dbReader;", "modifier": "private", "type": "DatabaseReader", "declarator": "dbReader", "var_name": "dbReader"}], "methods": [{"identifier": "GraphComparator", "parameters": "(final GraphElementFactory factory, final String[] toExclude, final boolean strict)", "modifiers": "public", "return": "", "signature": " GraphComparator(final GraphElementFactory factory, final String[] toExclude, final boolean strict)", "full_signature": "public  GraphComparator(final GraphElementFactory factory, final String[] toExclude, final boolean strict)", "class_method_signature": "GraphComparator.GraphComparator(final GraphElementFactory factory, final String[] toExclude, final boolean strict)", "testcase": false, "constructor": true}, {"identifier": "compare", "parameters": "(final Connection connection, final Graph<Node, Edge> expectedGraph, final AssertionErrorCollector errorCollector)", "modifiers": "public", "return": "void", "signature": "void compare(final Connection connection, final Graph<Node, Edge> expectedGraph, final AssertionErrorCollector errorCollector)", "full_signature": "public void compare(final Connection connection, final Graph<Node, Edge> expectedGraph, final AssertionErrorCollector errorCollector)", "class_method_signature": "GraphComparator.compare(final Connection connection, final Graph<Node, Edge> expectedGraph, final AssertionErrorCollector errorCollector)", "testcase": false, "constructor": false}, {"identifier": "shouldBeEmpty", "parameters": "(final Graph<Node, Edge> givenGraph, final AssertionErrorCollector errorCollector)", "modifiers": "private", "return": "void", "signature": "void shouldBeEmpty(final Graph<Node, Edge> givenGraph, final AssertionErrorCollector errorCollector)", "full_signature": "private void shouldBeEmpty(final Graph<Node, Edge> givenGraph, final AssertionErrorCollector errorCollector)", "class_method_signature": "GraphComparator.shouldBeEmpty(final Graph<Node, Edge> givenGraph, final AssertionErrorCollector errorCollector)", "testcase": false, "constructor": false}, {"identifier": "compareContent", "parameters": "(final Graph<Node, Edge> givenGraph, final Graph<Node, Edge> expectedGraph,\n            final AssertionErrorCollector errorCollector)", "modifiers": "private", "return": "void", "signature": "void compareContent(final Graph<Node, Edge> givenGraph, final Graph<Node, Edge> expectedGraph,\n            final AssertionErrorCollector errorCollector)", "full_signature": "private void compareContent(final Graph<Node, Edge> givenGraph, final Graph<Node, Edge> expectedGraph,\n            final AssertionErrorCollector errorCollector)", "class_method_signature": "GraphComparator.compareContent(final Graph<Node, Edge> givenGraph, final Graph<Node, Edge> expectedGraph,\n            final AssertionErrorCollector errorCollector)", "testcase": false, "constructor": false}, {"identifier": "verifyNodeLabels", "parameters": "(final Collection<String> currentNodeLabels, final Collection<String> expectedNodeLabels,\n            final AssertionErrorCollector errorCollector, final String formatString)", "modifiers": "private", "return": "void", "signature": "void verifyNodeLabels(final Collection<String> currentNodeLabels, final Collection<String> expectedNodeLabels,\n            final AssertionErrorCollector errorCollector, final String formatString)", "full_signature": "private void verifyNodeLabels(final Collection<String> currentNodeLabels, final Collection<String> expectedNodeLabels,\n            final AssertionErrorCollector errorCollector, final String formatString)", "class_method_signature": "GraphComparator.verifyNodeLabels(final Collection<String> currentNodeLabels, final Collection<String> expectedNodeLabels,\n            final AssertionErrorCollector errorCollector, final String formatString)", "testcase": false, "constructor": false}, {"identifier": "checkPresenceOfExpectedNodes", "parameters": "(final Graph<Node, Edge> givenGraph, final Graph<Node, Edge> expectedGraph,\n            final AssertionErrorCollector errorCollector)", "modifiers": "private", "return": "void", "signature": "void checkPresenceOfExpectedNodes(final Graph<Node, Edge> givenGraph, final Graph<Node, Edge> expectedGraph,\n            final AssertionErrorCollector errorCollector)", "full_signature": "private void checkPresenceOfExpectedNodes(final Graph<Node, Edge> givenGraph, final Graph<Node, Edge> expectedGraph,\n            final AssertionErrorCollector errorCollector)", "class_method_signature": "GraphComparator.checkPresenceOfExpectedNodes(final Graph<Node, Edge> givenGraph, final Graph<Node, Edge> expectedGraph,\n            final AssertionErrorCollector errorCollector)", "testcase": false, "constructor": false}, {"identifier": "checkPresenceOfExpectedReferences", "parameters": "(final Graph<Node, Edge> givenGraph, final Graph<Node, Edge> expectedGraph,\n            final AssertionErrorCollector errorCollector)", "modifiers": "private", "return": "void", "signature": "void checkPresenceOfExpectedReferences(final Graph<Node, Edge> givenGraph, final Graph<Node, Edge> expectedGraph,\n            final AssertionErrorCollector errorCollector)", "full_signature": "private void checkPresenceOfExpectedReferences(final Graph<Node, Edge> givenGraph, final Graph<Node, Edge> expectedGraph,\n            final AssertionErrorCollector errorCollector)", "class_method_signature": "GraphComparator.checkPresenceOfExpectedReferences(final Graph<Node, Edge> givenGraph, final Graph<Node, Edge> expectedGraph,\n            final AssertionErrorCollector errorCollector)", "testcase": false, "constructor": false}, {"identifier": "checkAbsenseOfNotExpectedNodes", "parameters": "(final Graph<Node, Edge> givenGraph, final Graph<Node, Edge> expectedGraph,\n            final AssertionErrorCollector errorCollector)", "modifiers": "private", "return": "void", "signature": "void checkAbsenseOfNotExpectedNodes(final Graph<Node, Edge> givenGraph, final Graph<Node, Edge> expectedGraph,\n            final AssertionErrorCollector errorCollector)", "full_signature": "private void checkAbsenseOfNotExpectedNodes(final Graph<Node, Edge> givenGraph, final Graph<Node, Edge> expectedGraph,\n            final AssertionErrorCollector errorCollector)", "class_method_signature": "GraphComparator.checkAbsenseOfNotExpectedNodes(final Graph<Node, Edge> givenGraph, final Graph<Node, Edge> expectedGraph,\n            final AssertionErrorCollector errorCollector)", "testcase": false, "constructor": false}, {"identifier": "checkAbsenseOfNotExpectedReferences", "parameters": "(final Graph<Node, Edge> givenGraph, final Graph<Node, Edge> expectedGraph,\n            final AssertionErrorCollector errorCollector)", "modifiers": "private", "return": "void", "signature": "void checkAbsenseOfNotExpectedReferences(final Graph<Node, Edge> givenGraph, final Graph<Node, Edge> expectedGraph,\n            final AssertionErrorCollector errorCollector)", "full_signature": "private void checkAbsenseOfNotExpectedReferences(final Graph<Node, Edge> givenGraph, final Graph<Node, Edge> expectedGraph,\n            final AssertionErrorCollector errorCollector)", "class_method_signature": "GraphComparator.checkAbsenseOfNotExpectedReferences(final Graph<Node, Edge> givenGraph, final Graph<Node, Edge> expectedGraph,\n            final AssertionErrorCollector errorCollector)", "testcase": false, "constructor": false}], "file": "neo4j/src/main/java/eu/drus/jpa/unit/neo4j/dataset/GraphComparator.java"}, "focal_method": {"identifier": "compare", "parameters": "(final Connection connection, final Graph<Node, Edge> expectedGraph, final AssertionErrorCollector errorCollector)", "modifiers": "public", "return": "void", "body": "public void compare(final Connection connection, final Graph<Node, Edge> expectedGraph, final AssertionErrorCollector errorCollector) {\n        Graph<Node, Edge> givenGraph;\n        try {\n            givenGraph = dbReader.readGraph(connection);\n        } catch (final SQLException e) {\n            throw new JpaUnitException(FAILED_TO_VERIFY_DATA_BASE_STATE, e);\n        }\n\n        if (expectedGraph.vertexSet().isEmpty()) {\n            shouldBeEmpty(givenGraph, errorCollector);\n        } else {\n            compareContent(givenGraph, expectedGraph, errorCollector);\n        }\n    }", "signature": "void compare(final Connection connection, final Graph<Node, Edge> expectedGraph, final AssertionErrorCollector errorCollector)", "full_signature": "public void compare(final Connection connection, final Graph<Node, Edge> expectedGraph, final AssertionErrorCollector errorCollector)", "class_method_signature": "GraphComparator.compare(final Connection connection, final Graph<Node, Edge> expectedGraph, final AssertionErrorCollector errorCollector)", "testcase": false, "constructor": false, "invocations": ["readGraph", "isEmpty", "vertexSet", "shouldBeEmpty", "compareContent"]}, "repository": {"repo_id": 52435170, "url": "https://github.com/dadrus/jpa-unit", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 24, "size": 1190, "license": "licensed"}}