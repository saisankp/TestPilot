{"test_class": {"identifier": "Swagger2MarkupConfigBuilderTest", "superclass": "", "interfaces": "", "fields": [], "file": "swagger2markup/src/test/java/io/github/swagger2markup/builder/Swagger2MarkupConfigBuilderTest.java"}, "test_case": {"identifier": "testConfigBuilder", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConfigBuilder() {\n        Swagger2MarkupConfigBuilder builder = new Swagger2MarkupConfigBuilder();\n\n        try {\n            builder.withTagOrdering(OrderBy.CUSTOM);\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage()).isEqualTo(\"You must provide a custom comparator if orderBy == OrderBy.CUSTOM\");\n        }\n        builder.withTagOrdering(Ordering.<String>natural());\n\n        Swagger2MarkupConfig config = builder.build();\n        assertThat(config.getTagOrderBy()).isEqualTo(OrderBy.CUSTOM);\n        assertThat(config.getTagOrdering()).isEqualTo(Ordering.natural());\n\n        try {\n            builder.withOperationOrdering(OrderBy.CUSTOM);\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage()).isEqualTo(\"You must provide a custom comparator if orderBy == OrderBy.CUSTOM\");\n        }\n        builder.withOperationOrdering(Swagger2MarkupConfigBuilder.OPERATION_PATH_NATURAL_ORDERING);\n        config = builder.build();\n        assertThat(config.getOperationOrderBy()).isEqualTo(OrderBy.CUSTOM);\n        assertThat(config.getOperationOrdering()).isEqualTo(Swagger2MarkupConfigBuilder.OPERATION_PATH_NATURAL_ORDERING);\n\n        try {\n            builder.withDefinitionOrdering(OrderBy.CUSTOM);\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage()).isEqualTo(\"You must provide a custom comparator if orderBy == OrderBy.CUSTOM\");\n        }\n        builder.withDefinitionOrdering(Ordering.<String>natural());\n        config = builder.build();\n        assertThat(config.getDefinitionOrderBy()).isEqualTo(OrderBy.CUSTOM);\n        assertThat(config.getDefinitionOrdering()).isEqualTo(Ordering.natural());\n\n        try {\n            builder.withParameterOrdering(OrderBy.CUSTOM);\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage()).isEqualTo(\"You must provide a custom comparator if orderBy == OrderBy.CUSTOM\");\n        }\n        builder.withParameterOrdering(Swagger2MarkupConfigBuilder.PARAMETER_NAME_NATURAL_ORDERING);\n        config = builder.build();\n        assertThat(config.getParameterOrderBy()).isEqualTo(OrderBy.CUSTOM);\n        assertThat(config.getParameterOrdering()).isEqualTo(Swagger2MarkupConfigBuilder.PARAMETER_NAME_NATURAL_ORDERING);\n\n        try {\n            builder.withPropertyOrdering(OrderBy.CUSTOM);\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage()).isEqualTo(\"You must provide a custom comparator if orderBy == OrderBy.CUSTOM\");\n        }\n        builder.withPropertyOrdering(Ordering.<String>natural());\n        config = builder.build();\n        assertThat(config.getPropertyOrderBy()).isEqualTo(OrderBy.CUSTOM);\n        assertThat(config.getPropertyOrdering()).isEqualTo(Ordering.natural());\n\n        try {\n            builder.withResponseOrdering(OrderBy.CUSTOM);\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage()).isEqualTo(\"You must provide a custom comparator if orderBy == OrderBy.CUSTOM\");\n        }\n        builder.withResponseOrdering(Ordering.<String>natural());\n        config = builder.build();\n        assertThat(config.getResponseOrderBy()).isEqualTo(OrderBy.CUSTOM);\n        assertThat(config.getResponseOrdering()).isEqualTo(Ordering.natural());\n        \n        assertThat(config.isListDelimiterEnabled()).isEqualTo(false);\n        builder.withListDelimiter();\n        config = builder.build();\n        assertThat(config.getListDelimiter()).isEqualTo(Character.valueOf(','));\n        assertThat(config.isListDelimiterEnabled()).isEqualTo(true);\n        \n    }", "signature": "void testConfigBuilder()", "full_signature": "@Test public void testConfigBuilder()", "class_method_signature": "Swagger2MarkupConfigBuilderTest.testConfigBuilder()", "testcase": true, "constructor": false, "invocations": ["withTagOrdering", "isEqualTo", "assertThat", "getMessage", "withTagOrdering", "natural", "build", "isEqualTo", "assertThat", "getTagOrderBy", "isEqualTo", "assertThat", "getTagOrdering", "natural", "withOperationOrdering", "isEqualTo", "assertThat", "getMessage", "withOperationOrdering", "build", "isEqualTo", "assertThat", "getOperationOrderBy", "isEqualTo", "assertThat", "getOperationOrdering", "withDefinitionOrdering", "isEqualTo", "assertThat", "getMessage", "withDefinitionOrdering", "natural", "build", "isEqualTo", "assertThat", "getDefinitionOrderBy", "isEqualTo", "assertThat", "getDefinitionOrdering", "natural", "withParameterOrdering", "isEqualTo", "assertThat", "getMessage", "withParameterOrdering", "build", "isEqualTo", "assertThat", "getParameterOrderBy", "isEqualTo", "assertThat", "getParameterOrdering", "withPropertyOrdering", "isEqualTo", "assertThat", "getMessage", "withPropertyOrdering", "natural", "build", "isEqualTo", "assertThat", "getPropertyOrderBy", "isEqualTo", "assertThat", "getPropertyOrdering", "natural", "withResponseOrdering", "isEqualTo", "assertThat", "getMessage", "withResponseOrdering", "natural", "build", "isEqualTo", "assertThat", "getResponseOrderBy", "isEqualTo", "assertThat", "getResponseOrdering", "natural", "isEqualTo", "assertThat", "isListDelimiterEnabled", "withListDelimiter", "build", "isEqualTo", "assertThat", "getListDelimiter", "valueOf", "isEqualTo", "assertThat", "isListDelimiterEnabled"]}, "focal_class": {"identifier": "Swagger2MarkupConfigBuilder", "superclass": "extends Schema2MarkupConfigBuilder<Swagger2MarkupConfigBuilder, Swagger2MarkupConfig>", "interfaces": "", "fields": [], "methods": [{"identifier": "Swagger2MarkupConfigBuilder", "parameters": "()", "modifiers": "public", "return": "", "signature": " Swagger2MarkupConfigBuilder()", "full_signature": "public  Swagger2MarkupConfigBuilder()", "class_method_signature": "Swagger2MarkupConfigBuilder.Swagger2MarkupConfigBuilder()", "testcase": false, "constructor": true}, {"identifier": "Swagger2MarkupConfigBuilder", "parameters": "(Properties properties)", "modifiers": "public", "return": "", "signature": " Swagger2MarkupConfigBuilder(Properties properties)", "full_signature": "public  Swagger2MarkupConfigBuilder(Properties properties)", "class_method_signature": "Swagger2MarkupConfigBuilder.Swagger2MarkupConfigBuilder(Properties properties)", "testcase": false, "constructor": true}, {"identifier": "Swagger2MarkupConfigBuilder", "parameters": "(Map<String, String> map)", "modifiers": "public", "return": "", "signature": " Swagger2MarkupConfigBuilder(Map<String, String> map)", "full_signature": "public  Swagger2MarkupConfigBuilder(Map<String, String> map)", "class_method_signature": "Swagger2MarkupConfigBuilder.Swagger2MarkupConfigBuilder(Map<String, String> map)", "testcase": false, "constructor": true}, {"identifier": "Swagger2MarkupConfigBuilder", "parameters": "(Configuration configuration)", "modifiers": "public", "return": "", "signature": " Swagger2MarkupConfigBuilder(Configuration configuration)", "full_signature": "public  Swagger2MarkupConfigBuilder(Configuration configuration)", "class_method_signature": "Swagger2MarkupConfigBuilder.Swagger2MarkupConfigBuilder(Configuration configuration)", "testcase": false, "constructor": true}, {"identifier": "build", "parameters": "()", "modifiers": "@Override public", "return": "Swagger2MarkupConfig", "signature": "Swagger2MarkupConfig build()", "full_signature": "@Override public Swagger2MarkupConfig build()", "class_method_signature": "Swagger2MarkupConfigBuilder.build()", "testcase": false, "constructor": false}], "file": "swagger2markup/src/main/java/io/github/swagger2markup/builder/Swagger2MarkupConfigBuilder.java"}, "focal_method": {"identifier": "build", "parameters": "()", "modifiers": "@Override public", "return": "Swagger2MarkupConfig", "body": "@Override\n    public Swagger2MarkupConfig build() {\n        buildNaturalOrdering();\n        return config;\n    }", "signature": "Swagger2MarkupConfig build()", "full_signature": "@Override public Swagger2MarkupConfig build()", "class_method_signature": "Swagger2MarkupConfigBuilder.build()", "testcase": false, "constructor": false, "invocations": ["buildNaturalOrdering"]}, "repository": {"repo_id": 30644093, "url": "https://github.com/Swagger2Markup/swagger2markup", "language": "Java", "is_fork": false, "fork_count": 340, "stargazer_count": 2130, "size": 5225, "license": "licensed"}}