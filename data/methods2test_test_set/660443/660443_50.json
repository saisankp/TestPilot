{"test_class": {"identifier": "AbstractDifferenceListTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [], "file": "misc/diff/src/test/java/org/openscience/cdk/tools/diff/tree/AbstractDifferenceListTest.java"}, "test_case": {"identifier": "testAddChild", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddChild() {\n        DifferenceClass diffClass = new DifferenceClass();\n        diffClass.addChild(StringDifference.construct(\"Foo\", \"Bar1\", \"Bar2\"));\n        Assert.assertEquals(1, diffClass.childCount());\n\n        diffClass.addChild(null);\n        Assert.assertEquals(1, diffClass.childCount());\n    }", "signature": "void testAddChild()", "full_signature": "@Test public void testAddChild()", "class_method_signature": "AbstractDifferenceListTest.testAddChild()", "testcase": true, "constructor": false, "invocations": ["addChild", "construct", "assertEquals", "childCount", "addChild", "assertEquals", "childCount"]}, "focal_class": {"identifier": "AbstractDifferenceList", "superclass": "", "interfaces": "implements IDifferenceList", "fields": [{"original_string": "protected List<IDifference> differences;", "modifier": "protected", "type": "List<IDifference>", "declarator": "differences", "var_name": "differences"}], "methods": [{"identifier": "AbstractDifferenceList", "parameters": "()", "modifiers": "protected", "return": "", "signature": " AbstractDifferenceList()", "full_signature": "protected  AbstractDifferenceList()", "class_method_signature": "AbstractDifferenceList.AbstractDifferenceList()", "testcase": false, "constructor": true}, {"identifier": "addChild", "parameters": "(IDifference childDiff)", "modifiers": "@Override public", "return": "void", "signature": "void addChild(IDifference childDiff)", "full_signature": "@Override public void addChild(IDifference childDiff)", "class_method_signature": "AbstractDifferenceList.addChild(IDifference childDiff)", "testcase": false, "constructor": false}, {"identifier": "addChildren", "parameters": "(List<IDifference> children)", "modifiers": "@Override public", "return": "void", "signature": "void addChildren(List<IDifference> children)", "full_signature": "@Override public void addChildren(List<IDifference> children)", "class_method_signature": "AbstractDifferenceList.addChildren(List<IDifference> children)", "testcase": false, "constructor": false}, {"identifier": "getChildren", "parameters": "()", "modifiers": "@Override public", "return": "Iterable<IDifference>", "signature": "Iterable<IDifference> getChildren()", "full_signature": "@Override public Iterable<IDifference> getChildren()", "class_method_signature": "AbstractDifferenceList.getChildren()", "testcase": false, "constructor": false}, {"identifier": "childCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int childCount()", "full_signature": "@Override public int childCount()", "class_method_signature": "AbstractDifferenceList.childCount()", "testcase": false, "constructor": false}], "file": "misc/diff/src/main/java/org/openscience/cdk/tools/diff/tree/AbstractDifferenceList.java"}, "focal_method": {"identifier": "addChild", "parameters": "(IDifference childDiff)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void addChild(IDifference childDiff) {\n        if (childDiff != null) {\n            differences.add(childDiff);\n        }\n    }", "signature": "void addChild(IDifference childDiff)", "full_signature": "@Override public void addChild(IDifference childDiff)", "class_method_signature": "AbstractDifferenceList.addChild(IDifference childDiff)", "testcase": false, "constructor": false, "invocations": ["add"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}