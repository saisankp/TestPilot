{"test_class": {"identifier": "UserAccessExpressionEvaluatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String PROJECT_ID = \"project\";", "modifier": "private final", "type": "String", "declarator": "PROJECT_ID = \"project\"", "var_name": "PROJECT_ID"}, {"original_string": "private final String USER_ID = \"user\";", "modifier": "private final", "type": "String", "declarator": "USER_ID = \"user\"", "var_name": "USER_ID"}, {"original_string": "private final String LOB_DEPENDENT_STATUS = \"open\";", "modifier": "private final", "type": "String", "declarator": "LOB_DEPENDENT_STATUS = \"open\"", "var_name": "LOB_DEPENDENT_STATUS"}, {"original_string": "private final String LOB_INDEPENDENT_STATUS = \"escalated\";", "modifier": "private final", "type": "String", "declarator": "LOB_INDEPENDENT_STATUS = \"escalated\"", "var_name": "LOB_INDEPENDENT_STATUS"}, {"original_string": "@Mock\n    private UserService userServiceMock;", "modifier": "@Mock\n    private", "type": "UserService", "declarator": "userServiceMock", "var_name": "userServiceMock"}, {"original_string": "@Mock\n    private ProjectService projectServiceMock;", "modifier": "@Mock\n    private", "type": "ProjectService", "declarator": "projectServiceMock", "var_name": "projectServiceMock"}, {"original_string": "@Mock\n    private ApplicationService applicationServiceMock;", "modifier": "@Mock\n    private", "type": "ApplicationService", "declarator": "applicationServiceMock", "var_name": "applicationServiceMock"}, {"original_string": "@Mock\n    private UserAccessService userAccessServiceMock;", "modifier": "@Mock\n    private", "type": "UserAccessService", "declarator": "userAccessServiceMock", "var_name": "userAccessServiceMock"}, {"original_string": "@Mock\n    private BookmarkService bookmarkServiceMock;", "modifier": "@Mock\n    private", "type": "BookmarkService", "declarator": "bookmarkServiceMock", "var_name": "bookmarkServiceMock"}, {"original_string": "@Mock\n    private Authentication authenticationMock;", "modifier": "@Mock\n    private", "type": "Authentication", "declarator": "authenticationMock", "var_name": "authenticationMock"}, {"original_string": "@Mock\n    private User userMock;", "modifier": "@Mock\n    private", "type": "User", "declarator": "userMock", "var_name": "userMock"}, {"original_string": "@Mock\n    private Project projectMock;", "modifier": "@Mock\n    private", "type": "Project", "declarator": "projectMock", "var_name": "projectMock"}, {"original_string": "@Mock\n    private UserData userDataMock;", "modifier": "@Mock\n    private", "type": "UserData", "declarator": "userDataMock", "var_name": "userDataMock"}, {"original_string": "@Mock\n    private ProjectBoardConfigurationProperties propertiesMock;", "modifier": "@Mock\n    private", "type": "ProjectBoardConfigurationProperties", "declarator": "propertiesMock", "var_name": "propertiesMock"}, {"original_string": "private UserAccessExpressionEvaluator evaluator;", "modifier": "private", "type": "UserAccessExpressionEvaluator", "declarator": "evaluator", "var_name": "evaluator"}], "file": "backend/project-board/src/test/java/de/adesso/projectboard/rest/security/UserAccessExpressionEvaluatorTest.java"}, "test_case": {"identifier": "hasElevatedAccessToUserReturnsFalseWhenUserIsNoStaffMember", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void hasElevatedAccessToUserReturnsFalseWhenUserIsNoStaffMember() {\n        // given\n        String accessedUserId = \"other\";\n        User accessedUserMock = mock(User.class);\n\n        given(userServiceMock.getUserById(accessedUserId)).willReturn(accessedUserMock);\n        given(userServiceMock.userExists(accessedUserId)).willReturn(true);\n        given(userServiceMock.userHasStaffMember(userMock, accessedUserMock)).willReturn(false);\n\n        // when\n        boolean actualHasPermission = evaluator.hasElevatedAccessToUser(authenticationMock, userMock, accessedUserId);\n\n        // then\n        assertThat(actualHasPermission).isFalse();\n    }", "signature": "void hasElevatedAccessToUserReturnsFalseWhenUserIsNoStaffMember()", "full_signature": "@Test public void hasElevatedAccessToUserReturnsFalseWhenUserIsNoStaffMember()", "class_method_signature": "UserAccessExpressionEvaluatorTest.hasElevatedAccessToUserReturnsFalseWhenUserIsNoStaffMember()", "testcase": true, "constructor": false, "invocations": ["mock", "willReturn", "given", "getUserById", "willReturn", "given", "userExists", "willReturn", "given", "userHasStaffMember", "hasElevatedAccessToUser", "isFalse", "assertThat"]}, "focal_class": {"identifier": "UserAccessExpressionEvaluator", "superclass": "", "interfaces": "implements ExpressionEvaluator", "fields": [{"original_string": "private final UserService userService;", "modifier": "private final", "type": "UserService", "declarator": "userService", "var_name": "userService"}, {"original_string": "private final UserAccessService userAccessService;", "modifier": "private final", "type": "UserAccessService", "declarator": "userAccessService", "var_name": "userAccessService"}, {"original_string": "private final ProjectService projectService;", "modifier": "private final", "type": "ProjectService", "declarator": "projectService", "var_name": "projectService"}, {"original_string": "private final ApplicationService applicationService;", "modifier": "private final", "type": "ApplicationService", "declarator": "applicationService", "var_name": "applicationService"}, {"original_string": "private final BookmarkService bookmarkService;", "modifier": "private final", "type": "BookmarkService", "declarator": "bookmarkService", "var_name": "bookmarkService"}, {"original_string": "private final Set<String> lobDependentStatus;", "modifier": "private final", "type": "Set<String>", "declarator": "lobDependentStatus", "var_name": "lobDependentStatus"}], "methods": [{"identifier": "UserAccessExpressionEvaluator", "parameters": "(UserService userService,\n                                         UserAccessService userAccessService,\n                                         ProjectService projectService,\n                                         ApplicationService applicationService,\n                                         BookmarkService bookmarkService,\n                                         ProjectBoardConfigurationProperties properties)", "modifiers": "@Autowired public", "return": "", "signature": " UserAccessExpressionEvaluator(UserService userService,\n                                         UserAccessService userAccessService,\n                                         ProjectService projectService,\n                                         ApplicationService applicationService,\n                                         BookmarkService bookmarkService,\n                                         ProjectBoardConfigurationProperties properties)", "full_signature": "@Autowired public  UserAccessExpressionEvaluator(UserService userService,\n                                         UserAccessService userAccessService,\n                                         ProjectService projectService,\n                                         ApplicationService applicationService,\n                                         BookmarkService bookmarkService,\n                                         ProjectBoardConfigurationProperties properties)", "class_method_signature": "UserAccessExpressionEvaluator.UserAccessExpressionEvaluator(UserService userService,\n                                         UserAccessService userAccessService,\n                                         ProjectService projectService,\n                                         ApplicationService applicationService,\n                                         BookmarkService bookmarkService,\n                                         ProjectBoardConfigurationProperties properties)", "testcase": false, "constructor": true}, {"identifier": "hasAccessToProjects", "parameters": "(Authentication authentication, User user)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasAccessToProjects(Authentication authentication, User user)", "full_signature": "@Override public boolean hasAccessToProjects(Authentication authentication, User user)", "class_method_signature": "UserAccessExpressionEvaluator.hasAccessToProjects(Authentication authentication, User user)", "testcase": false, "constructor": false}, {"identifier": "hasAccessToProject", "parameters": "(Authentication authentication, User user, String projectId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasAccessToProject(Authentication authentication, User user, String projectId)", "full_signature": "@Override public boolean hasAccessToProject(Authentication authentication, User user, String projectId)", "class_method_signature": "UserAccessExpressionEvaluator.hasAccessToProject(Authentication authentication, User user, String projectId)", "testcase": false, "constructor": false}, {"identifier": "hasPermissionToApplyToProject", "parameters": "(Authentication authentication, User user, String projectId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasPermissionToApplyToProject(Authentication authentication, User user, String projectId)", "full_signature": "@Override public boolean hasPermissionToApplyToProject(Authentication authentication, User user, String projectId)", "class_method_signature": "UserAccessExpressionEvaluator.hasPermissionToApplyToProject(Authentication authentication, User user, String projectId)", "testcase": false, "constructor": false}, {"identifier": "hasPermissionToAccessUser", "parameters": "(Authentication authentication, User user, String userId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasPermissionToAccessUser(Authentication authentication, User user, String userId)", "full_signature": "@Override public boolean hasPermissionToAccessUser(Authentication authentication, User user, String userId)", "class_method_signature": "UserAccessExpressionEvaluator.hasPermissionToAccessUser(Authentication authentication, User user, String userId)", "testcase": false, "constructor": false}, {"identifier": "hasElevatedAccessToUser", "parameters": "(Authentication authentication, User user, String userId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasElevatedAccessToUser(Authentication authentication, User user, String userId)", "full_signature": "@Override public boolean hasElevatedAccessToUser(Authentication authentication, User user, String userId)", "class_method_signature": "UserAccessExpressionEvaluator.hasElevatedAccessToUser(Authentication authentication, User user, String userId)", "testcase": false, "constructor": false}, {"identifier": "projectDoesNotExistOrHasLobIndependentStatus", "parameters": "(String projectId)", "modifiers": "", "return": "boolean", "signature": "boolean projectDoesNotExistOrHasLobIndependentStatus(String projectId)", "full_signature": " boolean projectDoesNotExistOrHasLobIndependentStatus(String projectId)", "class_method_signature": "UserAccessExpressionEvaluator.projectDoesNotExistOrHasLobIndependentStatus(String projectId)", "testcase": false, "constructor": false}], "file": "backend/project-board/src/main/java/de/adesso/projectboard/rest/security/UserAccessExpressionEvaluator.java"}, "focal_method": {"identifier": "hasElevatedAccessToUser", "parameters": "(Authentication authentication, User user, String userId)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean hasElevatedAccessToUser(Authentication authentication, User user, String userId) {\n        if(userService.userExists(userId)) {\n            return userService.userHasStaffMember(user, userService.getUserById(userId));\n        }\n\n        return true;\n    }", "signature": "boolean hasElevatedAccessToUser(Authentication authentication, User user, String userId)", "full_signature": "@Override public boolean hasElevatedAccessToUser(Authentication authentication, User user, String userId)", "class_method_signature": "UserAccessExpressionEvaluator.hasElevatedAccessToUser(Authentication authentication, User user, String userId)", "testcase": false, "constructor": false, "invocations": ["userExists", "userHasStaffMember", "getUserById"]}, "repository": {"repo_id": 144251992, "url": "https://github.com/adessoAG/project-board", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 2608, "license": "licensed"}}