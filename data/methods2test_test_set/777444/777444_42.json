{"test_class": {"identifier": "VirtualMachineHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "VirtualMachineHandler vmHandler;", "modifier": "", "type": "VirtualMachineHandler", "declarator": "vmHandler", "var_name": "vmHandler"}], "file": "agent/jvm/src/test/java/org/jolokia/jvmagent/client/util/VirtualMachineHandlerTest.java"}, "test_case": {"identifier": "findProcess", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void findProcess() throws Exception, NoSuchMethodException, IllegalAccessException {\n        List<ProcessDescription> procs = filterOwnProcess(vmHandler.listProcesses());\n        for (ProcessDescription desc : procs) {\n            try {\n                if (desc.getDisplay() != null && desc.getDisplay().length() > 0) {\n                    Pattern singleHitPattern = Pattern.compile(\"^\" + Pattern.quote(desc.getDisplay()) + \"$\");\n                    assertTrue(tryAttach(singleHitPattern.pattern()));\n                    break;\n                }\n            } catch (Exception exp) {\n                // We ignore error which happen spuriously\n                System.out.println(\"Cannot attach to \" + desc.getDisplay() + \" (\" + desc.getId() + \"): \" + exp);\n                exp.printStackTrace();\n            }\n        }\n\n        assertFalse(tryAttach(\"RobertMakClaudioPizarro\",\".*No.*process.*\"));\n        if (procs.size() >= 2) {\n            assertFalse(tryAttach(\".\",procs.get(0).getId()));\n        }\n    }", "signature": "void findProcess()", "full_signature": "@Test public void findProcess()", "class_method_signature": "VirtualMachineHandlerTest.findProcess()", "testcase": true, "constructor": false, "invocations": ["filterOwnProcess", "listProcesses", "getDisplay", "length", "getDisplay", "compile", "quote", "getDisplay", "assertTrue", "tryAttach", "pattern", "println", "getDisplay", "getId", "printStackTrace", "assertFalse", "tryAttach", "size", "assertFalse", "tryAttach", "getId", "get"]}, "focal_class": {"identifier": "VirtualMachineHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private OptionsAndArgs options;", "modifier": "private", "type": "OptionsAndArgs", "declarator": "options", "var_name": "options"}], "methods": [{"identifier": "VirtualMachineHandler", "parameters": "(OptionsAndArgs pOptions)", "modifiers": "public", "return": "", "signature": " VirtualMachineHandler(OptionsAndArgs pOptions)", "full_signature": "public  VirtualMachineHandler(OptionsAndArgs pOptions)", "class_method_signature": "VirtualMachineHandler.VirtualMachineHandler(OptionsAndArgs pOptions)", "testcase": false, "constructor": true}, {"identifier": "attachVirtualMachine", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object attachVirtualMachine()", "full_signature": "public Object attachVirtualMachine()", "class_method_signature": "VirtualMachineHandler.attachVirtualMachine()", "testcase": false, "constructor": false}, {"identifier": "getPidErrorMesssage", "parameters": "(String pid, String label, Class vmClass)", "modifiers": "private", "return": "String", "signature": "String getPidErrorMesssage(String pid, String label, Class vmClass)", "full_signature": "private String getPidErrorMesssage(String pid, String label, Class vmClass)", "class_method_signature": "VirtualMachineHandler.getPidErrorMesssage(String pid, String label, Class vmClass)", "testcase": false, "constructor": false}, {"identifier": "detachAgent", "parameters": "(Object pVm)", "modifiers": "public", "return": "void", "signature": "void detachAgent(Object pVm)", "full_signature": "public void detachAgent(Object pVm)", "class_method_signature": "VirtualMachineHandler.detachAgent(Object pVm)", "testcase": false, "constructor": false}, {"identifier": "listProcesses", "parameters": "()", "modifiers": "public", "return": "List<ProcessDescription>", "signature": "List<ProcessDescription> listProcesses()", "full_signature": "public List<ProcessDescription> listProcesses()", "class_method_signature": "VirtualMachineHandler.listProcesses()", "testcase": false, "constructor": false}, {"identifier": "findProcess", "parameters": "(Pattern pPattern)", "modifiers": "public", "return": "ProcessDescription", "signature": "ProcessDescription findProcess(Pattern pPattern)", "full_signature": "public ProcessDescription findProcess(Pattern pPattern)", "class_method_signature": "VirtualMachineHandler.findProcess(Pattern pPattern)", "testcase": false, "constructor": false}, {"identifier": "getProcessId", "parameters": "(OptionsAndArgs pOpts)", "modifiers": "private", "return": "String", "signature": "String getProcessId(OptionsAndArgs pOpts)", "full_signature": "private String getProcessId(OptionsAndArgs pOpts)", "class_method_signature": "VirtualMachineHandler.getProcessId(OptionsAndArgs pOpts)", "testcase": false, "constructor": false}, {"identifier": "getOwnProcessId", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getOwnProcessId()", "full_signature": "private String getOwnProcessId()", "class_method_signature": "VirtualMachineHandler.getOwnProcessId()", "testcase": false, "constructor": false}, {"identifier": "lookupVirtualMachineClass", "parameters": "()", "modifiers": "private", "return": "Class", "signature": "Class lookupVirtualMachineClass()", "full_signature": "private Class lookupVirtualMachineClass()", "class_method_signature": "VirtualMachineHandler.lookupVirtualMachineClass()", "testcase": false, "constructor": false}], "file": "agent/jvm/src/main/java/org/jolokia/jvmagent/client/util/VirtualMachineHandler.java"}, "focal_method": {"identifier": "findProcess", "parameters": "(Pattern pPattern)", "modifiers": "public", "return": "ProcessDescription", "body": "public ProcessDescription findProcess(Pattern pPattern)\n            throws InvocationTargetException, NoSuchMethodException, IllegalAccessException {\n        List<ProcessDescription> ret = new ArrayList<ProcessDescription>();\n        String ownId = getOwnProcessId();\n\n        for (ProcessDescription desc : listProcesses()) {\n            Matcher matcher = pPattern.matcher(desc.getDisplay());\n            if (!desc.getId().equals(ownId) && matcher.find()) {\n                ret.add(desc);\n            }\n        }\n        if (ret.size() == 1) {\n            return ret.get(0);\n        } else if (ret.size() == 0) {\n            throw new IllegalArgumentException(\"No attachable process found matching \\\"\" + pPattern.pattern() + \"\\\"\");\n        } else {\n            StringBuilder buf = new StringBuilder();\n            for (ProcessDescription desc : ret) {\n                buf.append(desc.getId()).append(\" (\").append(desc.getDisplay()).append(\"),\");\n            }\n            throw new IllegalArgumentException(\"More than one attachable process found matching \\\"\" +\n                                               pPattern.pattern() + \"\\\": \" + buf.substring(0,buf.length()-1));\n        }\n    }", "signature": "ProcessDescription findProcess(Pattern pPattern)", "full_signature": "public ProcessDescription findProcess(Pattern pPattern)", "class_method_signature": "VirtualMachineHandler.findProcess(Pattern pPattern)", "testcase": false, "constructor": false, "invocations": ["getOwnProcessId", "listProcesses", "matcher", "getDisplay", "equals", "getId", "find", "add", "size", "get", "size", "pattern", "append", "append", "append", "append", "getId", "getDisplay", "pattern", "substring", "length"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}