{"test_class": {"identifier": "PolicyEngineConfiguratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/policy/engine/src/test/java/org/eclipse/sw360/antenna/policy/engine/PolicyEngineConfiguratorTest.java"}, "test_case": {"identifier": "testNotRulesetClass", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void testNotRulesetClass() {\n        PolicyEngineConfigurator.configure(PolicyEngineTestdata.NO_RULESET_CLASS_CONFIG);\n    }", "signature": "void testNotRulesetClass()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testNotRulesetClass()", "class_method_signature": "PolicyEngineConfiguratorTest.testNotRulesetClass()", "testcase": true, "constructor": false, "invocations": ["configure"]}, "focal_class": {"identifier": "PolicyEngineConfigurator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SINGLE_ARTIFACT_EXECUTOR = SingleArtifactExecutor.class.getName();", "modifier": "private static final", "type": "String", "declarator": "SINGLE_ARTIFACT_EXECUTOR = SingleArtifactExecutor.class.getName()", "var_name": "SINGLE_ARTIFACT_EXECUTOR"}, {"original_string": "private static final String COMPARE_ARTIFACT_EXECUTOR = CompareArtifactExecutor.class.getName();", "modifier": "private static final", "type": "String", "declarator": "COMPARE_ARTIFACT_EXECUTOR = CompareArtifactExecutor.class.getName()", "var_name": "COMPARE_ARTIFACT_EXECUTOR"}], "methods": [{"identifier": "configure", "parameters": "(final Collection<String> rulesetRefs)", "modifiers": "public static", "return": "PolicyEngine", "signature": "PolicyEngine configure(final Collection<String> rulesetRefs)", "full_signature": "public static PolicyEngine configure(final Collection<String> rulesetRefs)", "class_method_signature": "PolicyEngineConfigurator.configure(final Collection<String> rulesetRefs)", "testcase": false, "constructor": false}, {"identifier": "createRuleset", "parameters": "(final String ruleClassRef)", "modifiers": "private static", "return": "Ruleset", "signature": "Ruleset createRuleset(final String ruleClassRef)", "full_signature": "private static Ruleset createRuleset(final String ruleClassRef)", "class_method_signature": "PolicyEngineConfigurator.createRuleset(final String ruleClassRef)", "testcase": false, "constructor": false}, {"identifier": "mapRuleToExecutor", "parameters": "(final Rule rule)", "modifiers": "private static", "return": "RuleToExecutor", "signature": "RuleToExecutor mapRuleToExecutor(final Rule rule)", "full_signature": "private static RuleToExecutor mapRuleToExecutor(final Rule rule)", "class_method_signature": "PolicyEngineConfigurator.mapRuleToExecutor(final Rule rule)", "testcase": false, "constructor": false}, {"identifier": "createExecutors", "parameters": "(final Map<String, Set<Rule>> executorToRuleMapping)", "modifiers": "private static", "return": "Collection<RuleExecutor>", "signature": "Collection<RuleExecutor> createExecutors(final Map<String, Set<Rule>> executorToRuleMapping)", "full_signature": "private static Collection<RuleExecutor> createExecutors(final Map<String, Set<Rule>> executorToRuleMapping)", "class_method_signature": "PolicyEngineConfigurator.createExecutors(final Map<String, Set<Rule>> executorToRuleMapping)", "testcase": false, "constructor": false}, {"identifier": "createExecutor", "parameters": "(String executorClass, Collection<Rule> rules)", "modifiers": "private static", "return": "RuleExecutor", "signature": "RuleExecutor createExecutor(String executorClass, Collection<Rule> rules)", "full_signature": "private static RuleExecutor createExecutor(String executorClass, Collection<Rule> rules)", "class_method_signature": "PolicyEngineConfigurator.createExecutor(String executorClass, Collection<Rule> rules)", "testcase": false, "constructor": false}], "file": "modules/policy/engine/src/main/java/org/eclipse/sw360/antenna/policy/engine/PolicyEngineConfigurator.java"}, "focal_method": {"identifier": "configure", "parameters": "(final Collection<String> rulesetRefs)", "modifiers": "public static", "return": "PolicyEngine", "body": "public static PolicyEngine configure(final Collection<String> rulesetRefs) throws IllegalArgumentException {\n        if (rulesetRefs == null || rulesetRefs.isEmpty()) {\n            throw new IllegalArgumentException(\"Configuration Error: No rule set reference given\");\n        }\n\n        final Map<String, Set<Rule>> executorToRuleMapping = rulesetRefs.stream()\n                .map(PolicyEngineConfigurator::createRuleset)\n                .map(Ruleset::getRules)\n                .flatMap(Collection::stream)\n                .map(PolicyEngineConfigurator::mapRuleToExecutor)\n                .collect(Collectors.groupingBy(RuleToExecutor::getExecutorClass,\n                        Collectors.mapping(RuleToExecutor::getRule, Collectors.toSet())));\n\n        PolicyEngine resultEngine = new PolicyEngine(createExecutors(executorToRuleMapping));\n\n        return resultEngine;\n    }", "signature": "PolicyEngine configure(final Collection<String> rulesetRefs)", "full_signature": "public static PolicyEngine configure(final Collection<String> rulesetRefs)", "class_method_signature": "PolicyEngineConfigurator.configure(final Collection<String> rulesetRefs)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "collect", "map", "flatMap", "map", "map", "stream", "groupingBy", "mapping", "toSet", "createExecutors"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}