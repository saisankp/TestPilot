{"test_class": {"identifier": "CDKRMapHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final CDKRMapHandler handler = new CDKRMapHandler();", "modifier": "private final", "type": "CDKRMapHandler", "declarator": "handler = new CDKRMapHandler()", "var_name": "handler"}], "file": "legacy/src/test/java/org/openscience/cdk/smsd/algorithm/rgraph/CDKRMapHandlerTest.java"}, "test_case": {"identifier": "testSetTarget", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSetTarget() {\n        IAtomContainer expResult = DefaultChemObjectBuilder.getInstance().newInstance(IAtomContainer.class);\n        handler.setTarget(expResult);\n        IAtomContainer result = handler.getTarget();\n        Assert.assertEquals(expResult, result);\n    }", "signature": "void testSetTarget()", "full_signature": "@Test public void testSetTarget()", "class_method_signature": "CDKRMapHandlerTest.testSetTarget()", "testcase": true, "constructor": false, "invocations": ["newInstance", "getInstance", "setTarget", "getTarget", "assertEquals"]}, "focal_class": {"identifier": "CDKRMapHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private List<Map<Integer, Integer>> mappings;", "modifier": "private", "type": "List<Map<Integer, Integer>>", "declarator": "mappings", "var_name": "mappings"}, {"original_string": "private IAtomContainer       source;", "modifier": "private", "type": "IAtomContainer", "declarator": "source", "var_name": "source"}, {"original_string": "private IAtomContainer       target;", "modifier": "private", "type": "IAtomContainer", "declarator": "target", "var_name": "target"}, {"original_string": "private boolean                     timeoutFlag = false;", "modifier": "private", "type": "boolean", "declarator": "timeoutFlag = false", "var_name": "timeoutFlag"}], "methods": [{"identifier": "CDKRMapHandler", "parameters": "()", "modifiers": "public", "return": "", "signature": " CDKRMapHandler()", "full_signature": "public  CDKRMapHandler()", "class_method_signature": "CDKRMapHandler.CDKRMapHandler()", "testcase": false, "constructor": true}, {"identifier": "getSource", "parameters": "()", "modifiers": "public", "return": "IAtomContainer", "signature": "IAtomContainer getSource()", "full_signature": "public IAtomContainer getSource()", "class_method_signature": "CDKRMapHandler.getSource()", "testcase": false, "constructor": false}, {"identifier": "setSource", "parameters": "(IAtomContainer aSource)", "modifiers": "public", "return": "void", "signature": "void setSource(IAtomContainer aSource)", "full_signature": "public void setSource(IAtomContainer aSource)", "class_method_signature": "CDKRMapHandler.setSource(IAtomContainer aSource)", "testcase": false, "constructor": false}, {"identifier": "getTarget", "parameters": "()", "modifiers": "public", "return": "IAtomContainer", "signature": "IAtomContainer getTarget()", "full_signature": "public IAtomContainer getTarget()", "class_method_signature": "CDKRMapHandler.getTarget()", "testcase": false, "constructor": false}, {"identifier": "setTarget", "parameters": "(IAtomContainer aTarget)", "modifiers": "public", "return": "void", "signature": "void setTarget(IAtomContainer aTarget)", "full_signature": "public void setTarget(IAtomContainer aTarget)", "class_method_signature": "CDKRMapHandler.setTarget(IAtomContainer aTarget)", "testcase": false, "constructor": false}, {"identifier": "calculateOverlapsAndReduce", "parameters": "(IAtomContainer molecule1, IAtomContainer molecule2, boolean shouldMatchBonds)", "modifiers": "public", "return": "void", "signature": "void calculateOverlapsAndReduce(IAtomContainer molecule1, IAtomContainer molecule2, boolean shouldMatchBonds)", "full_signature": "public void calculateOverlapsAndReduce(IAtomContainer molecule1, IAtomContainer molecule2, boolean shouldMatchBonds)", "class_method_signature": "CDKRMapHandler.calculateOverlapsAndReduce(IAtomContainer molecule1, IAtomContainer molecule2, boolean shouldMatchBonds)", "testcase": false, "constructor": false}, {"identifier": "calculateOverlapsAndReduceExactMatch", "parameters": "(IAtomContainer molecule1, IAtomContainer molecule2,\n            boolean shouldMatchBonds)", "modifiers": "public", "return": "void", "signature": "void calculateOverlapsAndReduceExactMatch(IAtomContainer molecule1, IAtomContainer molecule2,\n            boolean shouldMatchBonds)", "full_signature": "public void calculateOverlapsAndReduceExactMatch(IAtomContainer molecule1, IAtomContainer molecule2,\n            boolean shouldMatchBonds)", "class_method_signature": "CDKRMapHandler.calculateOverlapsAndReduceExactMatch(IAtomContainer molecule1, IAtomContainer molecule2,\n            boolean shouldMatchBonds)", "testcase": false, "constructor": false}, {"identifier": "calculateSubGraphs", "parameters": "(IAtomContainer molecule1, IAtomContainer molecule2, boolean shouldMatchBonds)", "modifiers": "public", "return": "void", "signature": "void calculateSubGraphs(IAtomContainer molecule1, IAtomContainer molecule2, boolean shouldMatchBonds)", "full_signature": "public void calculateSubGraphs(IAtomContainer molecule1, IAtomContainer molecule2, boolean shouldMatchBonds)", "class_method_signature": "CDKRMapHandler.calculateSubGraphs(IAtomContainer molecule1, IAtomContainer molecule2, boolean shouldMatchBonds)", "testcase": false, "constructor": false}, {"identifier": "calculateIsomorphs", "parameters": "(IAtomContainer molecule1, IAtomContainer molecule2, boolean shouldMatchBonds)", "modifiers": "public", "return": "void", "signature": "void calculateIsomorphs(IAtomContainer molecule1, IAtomContainer molecule2, boolean shouldMatchBonds)", "full_signature": "public void calculateIsomorphs(IAtomContainer molecule1, IAtomContainer molecule2, boolean shouldMatchBonds)", "class_method_signature": "CDKRMapHandler.calculateIsomorphs(IAtomContainer molecule1, IAtomContainer molecule2, boolean shouldMatchBonds)", "testcase": false, "constructor": false}, {"identifier": "removeSubGraph", "parameters": "(List<List<CDKRMap>> overlaps)", "modifiers": "protected", "return": "List<List<CDKRMap>>", "signature": "List<List<CDKRMap>> removeSubGraph(List<List<CDKRMap>> overlaps)", "full_signature": "protected List<List<CDKRMap>> removeSubGraph(List<List<CDKRMap>> overlaps)", "class_method_signature": "CDKRMapHandler.removeSubGraph(List<List<CDKRMap>> overlaps)", "testcase": false, "constructor": false}, {"identifier": "removeRedundantMappingsForSingleAtomCase", "parameters": "(List<CDKRMap> overlaps)", "modifiers": "protected", "return": "List<CDKRMap>", "signature": "List<CDKRMap> removeRedundantMappingsForSingleAtomCase(List<CDKRMap> overlaps)", "full_signature": "protected List<CDKRMap> removeRedundantMappingsForSingleAtomCase(List<CDKRMap> overlaps)", "class_method_signature": "CDKRMapHandler.removeRedundantMappingsForSingleAtomCase(List<CDKRMap> overlaps)", "testcase": false, "constructor": false}, {"identifier": "makeAtomsMapOfBondsMap", "parameters": "(List<CDKRMap> rMapList, IAtomContainer graph1,\n            IAtomContainer graph2)", "modifiers": "private static", "return": "List<List<CDKRMap>>", "signature": "List<List<CDKRMap>> makeAtomsMapOfBondsMap(List<CDKRMap> rMapList, IAtomContainer graph1,\n            IAtomContainer graph2)", "full_signature": "private static List<List<CDKRMap>> makeAtomsMapOfBondsMap(List<CDKRMap> rMapList, IAtomContainer graph1,\n            IAtomContainer graph2)", "class_method_signature": "CDKRMapHandler.makeAtomsMapOfBondsMap(List<CDKRMap> rMapList, IAtomContainer graph1,\n            IAtomContainer graph2)", "testcase": false, "constructor": false}, {"identifier": "makeAtomsMapOfBondsMapSingleBond", "parameters": "(List<CDKRMap> list, IAtomContainer sourceGraph,\n            IAtomContainer targetGraph)", "modifiers": "private static", "return": "List<List<CDKRMap>>", "signature": "List<List<CDKRMap>> makeAtomsMapOfBondsMapSingleBond(List<CDKRMap> list, IAtomContainer sourceGraph,\n            IAtomContainer targetGraph)", "full_signature": "private static List<List<CDKRMap>> makeAtomsMapOfBondsMapSingleBond(List<CDKRMap> list, IAtomContainer sourceGraph,\n            IAtomContainer targetGraph)", "class_method_signature": "CDKRMapHandler.makeAtomsMapOfBondsMapSingleBond(List<CDKRMap> list, IAtomContainer sourceGraph,\n            IAtomContainer targetGraph)", "testcase": false, "constructor": false}, {"identifier": "getMaximum", "parameters": "(List overlaps)", "modifiers": "protected", "return": "List", "signature": "List getMaximum(List overlaps)", "full_signature": "protected List getMaximum(List overlaps)", "class_method_signature": "CDKRMapHandler.getMaximum(List overlaps)", "testcase": false, "constructor": false}, {"identifier": "getAllMaximum", "parameters": "(List<List<CDKRMap>> overlaps)", "modifiers": "protected", "return": "Stack<List<CDKRMap>>", "signature": "Stack<List<CDKRMap>> getAllMaximum(List<List<CDKRMap>> overlaps)", "full_signature": "protected Stack<List<CDKRMap>> getAllMaximum(List<List<CDKRMap>> overlaps)", "class_method_signature": "CDKRMapHandler.getAllMaximum(List<List<CDKRMap>> overlaps)", "testcase": false, "constructor": false}, {"identifier": "identifyMatchedParts", "parameters": "(List<List<CDKRMap>> list, IAtomContainer source, IAtomContainer target)", "modifiers": "protected", "return": "void", "signature": "void identifyMatchedParts(List<List<CDKRMap>> list, IAtomContainer source, IAtomContainer target)", "full_signature": "protected void identifyMatchedParts(List<List<CDKRMap>> list, IAtomContainer source, IAtomContainer target)", "class_method_signature": "CDKRMapHandler.identifyMatchedParts(List<List<CDKRMap>> list, IAtomContainer source, IAtomContainer target)", "testcase": false, "constructor": false}, {"identifier": "identifySingleAtomsMatchedParts", "parameters": "(List<CDKRMap> list, IAtomContainer source, IAtomContainer target)", "modifiers": "protected", "return": "void", "signature": "void identifySingleAtomsMatchedParts(List<CDKRMap> list, IAtomContainer source, IAtomContainer target)", "full_signature": "protected void identifySingleAtomsMatchedParts(List<CDKRMap> list, IAtomContainer source, IAtomContainer target)", "class_method_signature": "CDKRMapHandler.identifySingleAtomsMatchedParts(List<CDKRMap> list, IAtomContainer source, IAtomContainer target)", "testcase": false, "constructor": false}, {"identifier": "isSubgraph", "parameters": "(List<CDKRMap> rmaps1, List<CDKRMap> rmaps2)", "modifiers": "protected", "return": "boolean", "signature": "boolean isSubgraph(List<CDKRMap> rmaps1, List<CDKRMap> rmaps2)", "full_signature": "protected boolean isSubgraph(List<CDKRMap> rmaps1, List<CDKRMap> rmaps2)", "class_method_signature": "CDKRMapHandler.isSubgraph(List<CDKRMap> rmaps1, List<CDKRMap> rmaps2)", "testcase": false, "constructor": false}, {"identifier": "isSameRMap", "parameters": "(CDKRMap sourceRMap, CDKRMap targetRMap)", "modifiers": "protected", "return": "boolean", "signature": "boolean isSameRMap(CDKRMap sourceRMap, CDKRMap targetRMap)", "full_signature": "protected boolean isSameRMap(CDKRMap sourceRMap, CDKRMap targetRMap)", "class_method_signature": "CDKRMapHandler.isSameRMap(CDKRMap sourceRMap, CDKRMap targetRMap)", "testcase": false, "constructor": false}, {"identifier": "getMappings", "parameters": "()", "modifiers": "public", "return": "List<Map<Integer, Integer>>", "signature": "List<Map<Integer, Integer>> getMappings()", "full_signature": "public List<Map<Integer, Integer>> getMappings()", "class_method_signature": "CDKRMapHandler.getMappings()", "testcase": false, "constructor": false}, {"identifier": "setMappings", "parameters": "(List<Map<Integer, Integer>> mappings)", "modifiers": "public", "return": "void", "signature": "void setMappings(List<Map<Integer, Integer>> mappings)", "full_signature": "public void setMappings(List<Map<Integer, Integer>> mappings)", "class_method_signature": "CDKRMapHandler.setMappings(List<Map<Integer, Integer>> mappings)", "testcase": false, "constructor": false}, {"identifier": "isTimeoutFlag", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isTimeoutFlag()", "full_signature": "public boolean isTimeoutFlag()", "class_method_signature": "CDKRMapHandler.isTimeoutFlag()", "testcase": false, "constructor": false}, {"identifier": "setTimeoutFlag", "parameters": "(boolean timeoutFlag)", "modifiers": "public", "return": "void", "signature": "void setTimeoutFlag(boolean timeoutFlag)", "full_signature": "public void setTimeoutFlag(boolean timeoutFlag)", "class_method_signature": "CDKRMapHandler.setTimeoutFlag(boolean timeoutFlag)", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/org/openscience/cdk/smsd/algorithm/rgraph/CDKRMapHandler.java"}, "focal_method": {"identifier": "setTarget", "parameters": "(IAtomContainer aTarget)", "modifiers": "public", "return": "void", "body": "public void setTarget(IAtomContainer aTarget) {\n        target = aTarget;\n    }", "signature": "void setTarget(IAtomContainer aTarget)", "full_signature": "public void setTarget(IAtomContainer aTarget)", "class_method_signature": "CDKRMapHandler.setTarget(IAtomContainer aTarget)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}