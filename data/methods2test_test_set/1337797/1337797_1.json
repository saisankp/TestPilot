{"test_class": {"identifier": "TestColorSpaceLAB", "superclass": "", "interfaces": "", "fields": [{"original_string": "ColorSpaceLAB cieLABSpace = ColorSpaceLAB.getInstance();", "modifier": "", "type": "ColorSpaceLAB", "declarator": "cieLABSpace = ColorSpaceLAB.getInstance()", "var_name": "cieLABSpace"}, {"original_string": "RGB[] data = new RGB[] {rgb(0, 0, 0).lab(0, 0, 0), rgb(0, 0, 255).lab(32.303f, 79.197f, -107.864f),\n        rgb(0, 255, 0).lab(87.737f, -86.185f, 83.181f), rgb(255, 0, 0).lab(53.233f, 80.109f, 67.220f),\n        rgb(0, 255, 255).lab(91.117f, -48.080f, -14.138f), rgb(255, 0, 255).lab(60.320f, 98.254f, -60.843f),\n        rgb(255, 255, 0).lab(97.138f, -21.556f, 94.482f), rgb(255, 255, 255).lab(100.000f, 0.005f, -0.010f)};", "modifier": "", "type": "RGB[]", "declarator": "data = new RGB[] {rgb(0, 0, 0).lab(0, 0, 0), rgb(0, 0, 255).lab(32.303f, 79.197f, -107.864f),\n        rgb(0, 255, 0).lab(87.737f, -86.185f, 83.181f), rgb(255, 0, 0).lab(53.233f, 80.109f, 67.220f),\n        rgb(0, 255, 255).lab(91.117f, -48.080f, -14.138f), rgb(255, 0, 255).lab(60.320f, 98.254f, -60.843f),\n        rgb(255, 255, 0).lab(97.138f, -21.556f, 94.482f), rgb(255, 255, 255).lab(100.000f, 0.005f, -0.010f)}", "var_name": "data"}], "file": "rusheye-impl/src/test/java/org/arquillian/rusheye/core/TestColorSpaceLAB.java"}, "test_case": {"identifier": "testColorSpaceLAB", "parameters": "(RGB value)", "modifiers": "@Test(dataProvider = \"getData\") public", "return": "void", "body": "@Test(dataProvider = \"getData\")\n    public void testColorSpaceLAB(RGB value) {\n        float[] cieLAB = cieLABSpace.fromRGB(value.rgb);\n        value.compare(cieLAB);\n    }", "signature": "void testColorSpaceLAB(RGB value)", "full_signature": "@Test(dataProvider = \"getData\") public void testColorSpaceLAB(RGB value)", "class_method_signature": "TestColorSpaceLAB.testColorSpaceLAB(RGB value)", "testcase": true, "constructor": false, "invocations": ["fromRGB", "compare"]}, "focal_class": {"identifier": "ColorSpaceLAB", "superclass": "extends ColorSpace", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private static final double REF_X = 95.047f;", "modifier": "private static final", "type": "double", "declarator": "REF_X = 95.047f", "var_name": "REF_X"}, {"original_string": "private static final double REF_Y = 100.000f;", "modifier": "private static final", "type": "double", "declarator": "REF_Y = 100.000f", "var_name": "REF_Y"}, {"original_string": "private static final double REF_Z = 108.883f;", "modifier": "private static final", "type": "double", "declarator": "REF_Z = 108.883f", "var_name": "REF_Z"}], "methods": [{"identifier": "ColorSpaceLAB", "parameters": "()", "modifiers": "protected", "return": "", "signature": " ColorSpaceLAB()", "full_signature": "protected  ColorSpaceLAB()", "class_method_signature": "ColorSpaceLAB.ColorSpaceLAB()", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "ColorSpaceLAB", "signature": "ColorSpaceLAB getInstance()", "full_signature": "public static ColorSpaceLAB getInstance()", "class_method_signature": "ColorSpaceLAB.getInstance()", "testcase": false, "constructor": false}, {"identifier": "fromRGB", "parameters": "(float[] rgbvalue)", "modifiers": "@Override public", "return": "float[]", "signature": "float[] fromRGB(float[] rgbvalue)", "full_signature": "@Override public float[] fromRGB(float[] rgbvalue)", "class_method_signature": "ColorSpaceLAB.fromRGB(float[] rgbvalue)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(double base)", "modifiers": "private", "return": "double", "signature": "double transform(double base)", "full_signature": "private double transform(double base)", "class_method_signature": "ColorSpaceLAB.transform(double base)", "testcase": false, "constructor": false}, {"identifier": "toRGB", "parameters": "(float[] colorvalue)", "modifiers": "@Override public", "return": "float[]", "signature": "float[] toRGB(float[] colorvalue)", "full_signature": "@Override public float[] toRGB(float[] colorvalue)", "class_method_signature": "ColorSpaceLAB.toRGB(float[] colorvalue)", "testcase": false, "constructor": false}, {"identifier": "toCIEXYZ", "parameters": "(float[] colorvalue)", "modifiers": "@Override public", "return": "float[]", "signature": "float[] toCIEXYZ(float[] colorvalue)", "full_signature": "@Override public float[] toCIEXYZ(float[] colorvalue)", "class_method_signature": "ColorSpaceLAB.toCIEXYZ(float[] colorvalue)", "testcase": false, "constructor": false}, {"identifier": "fromCIEXYZ", "parameters": "(float[] colorvalue)", "modifiers": "@Override public", "return": "float[]", "signature": "float[] fromCIEXYZ(float[] colorvalue)", "full_signature": "@Override public float[] fromCIEXYZ(float[] colorvalue)", "class_method_signature": "ColorSpaceLAB.fromCIEXYZ(float[] colorvalue)", "testcase": false, "constructor": false}], "file": "rusheye-impl/src/main/java/org/arquillian/rusheye/core/ColorSpaceLAB.java"}, "focal_method": {"identifier": "ColorSpaceLAB", "parameters": "()", "modifiers": "protected", "return": "", "body": "protected ColorSpaceLAB() {\n        super(ColorSpace.TYPE_Lab, 3);\n    }", "signature": " ColorSpaceLAB()", "full_signature": "protected  ColorSpaceLAB()", "class_method_signature": "ColorSpaceLAB.ColorSpaceLAB()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 1337797, "url": "https://github.com/arquillian/arquillian-rusheye", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 14, "size": 2425, "license": "licensed"}}