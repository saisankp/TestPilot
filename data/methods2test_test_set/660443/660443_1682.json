{"test_class": {"identifier": "TaeAminoAcidDescriptorTest", "superclass": "extends MolecularDescriptorTest", "interfaces": "", "fields": [{"original_string": "private static IMolecularDescriptor descriptor;", "modifier": "private static", "type": "IMolecularDescriptor", "declarator": "descriptor", "var_name": "descriptor"}], "file": "descriptor/qsarprotein/src/test/java/org/openscience/cdk/qsar/descriptors/protein/TaeAminoAcidDescriptorTest.java"}, "test_case": {"identifier": "testTaeAminoAcidDescriptor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTaeAminoAcidDescriptor() throws ClassNotFoundException, CDKException, Exception {\n        IBioPolymer pepseq = ProteinBuilderTool.createProtein(\"ACDEFGH\", SilentChemObjectBuilder.getInstance());\n        DescriptorValue result = descriptor.calculate(pepseq);\n\n        DoubleArrayResult dar = (DoubleArrayResult) result.getValue();\n        Assert.assertEquals(147, dar.length());\n    }", "signature": "void testTaeAminoAcidDescriptor()", "full_signature": "@Test public void testTaeAminoAcidDescriptor()", "class_method_signature": "TaeAminoAcidDescriptorTest.testTaeAminoAcidDescriptor()", "testcase": true, "constructor": false, "invocations": ["createProtein", "getInstance", "calculate", "getValue", "assertEquals", "length"]}, "focal_class": {"identifier": "TaeAminoAcidDescriptor", "superclass": "extends AbstractMolecularDescriptor", "interfaces": "implements IMolecularDescriptor", "fields": [{"original_string": "private static ILoggingTool          logger    = LoggingToolFactory.createLoggingTool(TaeAminoAcidDescriptor.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger    = LoggingToolFactory.createLoggingTool(TaeAminoAcidDescriptor.class)", "var_name": "logger"}, {"original_string": "private        Map<String, Double[]> taeParams = new HashMap<String, Double[]>();", "modifier": "private", "type": "Map<String, Double[]>", "declarator": "taeParams = new HashMap<String, Double[]>()", "var_name": "taeParams"}, {"original_string": "private        int                   ndesc     = 147;", "modifier": "private", "type": "int", "declarator": "ndesc     = 147", "var_name": "ndesc"}, {"original_string": "private Map<String, String> nametrans = new HashMap<String, String>();", "modifier": "private", "type": "Map<String, String>", "declarator": "nametrans = new HashMap<String, String>()", "var_name": "nametrans"}], "methods": [{"identifier": "getMonomers", "parameters": "(IBioPolymer iBioPolymer)", "modifiers": "private", "return": "List<IMonomer>", "signature": "List<IMonomer> getMonomers(IBioPolymer iBioPolymer)", "full_signature": "private List<IMonomer> getMonomers(IBioPolymer iBioPolymer)", "class_method_signature": "TaeAminoAcidDescriptor.getMonomers(IBioPolymer iBioPolymer)", "testcase": false, "constructor": false}, {"identifier": "loadTAEParams", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void loadTAEParams()", "full_signature": "private void loadTAEParams()", "class_method_signature": "TaeAminoAcidDescriptor.loadTAEParams()", "testcase": false, "constructor": false}, {"identifier": "TaeAminoAcidDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " TaeAminoAcidDescriptor()", "full_signature": "public  TaeAminoAcidDescriptor()", "class_method_signature": "TaeAminoAcidDescriptor.TaeAminoAcidDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "TaeAminoAcidDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "TaeAminoAcidDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "TaeAminoAcidDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "TaeAminoAcidDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "TaeAminoAcidDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "TaeAminoAcidDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}, {"identifier": "getDummyDescriptorValue", "parameters": "(Exception e)", "modifiers": "private", "return": "DescriptorValue", "signature": "DescriptorValue getDummyDescriptorValue(Exception e)", "full_signature": "private DescriptorValue getDummyDescriptorValue(Exception e)", "class_method_signature": "TaeAminoAcidDescriptor.getDummyDescriptorValue(Exception e)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer container)", "class_method_signature": "TaeAminoAcidDescriptor.calculate(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "getDescriptorResultType", "parameters": "()", "modifiers": "@Override public", "return": "IDescriptorResult", "signature": "IDescriptorResult getDescriptorResultType()", "full_signature": "@Override public IDescriptorResult getDescriptorResultType()", "class_method_signature": "TaeAminoAcidDescriptor.getDescriptorResultType()", "testcase": false, "constructor": false}], "file": "descriptor/qsarprotein/src/main/java/org/openscience/cdk/qsar/descriptors/protein/TaeAminoAcidDescriptor.java"}, "focal_method": {"identifier": "TaeAminoAcidDescriptor", "parameters": "()", "modifiers": "public", "return": "", "body": "public TaeAminoAcidDescriptor() {\n        nametrans.put(\"a\", \"ala\");\n        nametrans.put(\"c\", \"cys\");\n        nametrans.put(\"d\", \"asp\");\n        nametrans.put(\"e\", \"glu\");\n        nametrans.put(\"f\", \"phe\");\n        nametrans.put(\"g\", \"gly\");\n        nametrans.put(\"h\", \"his\");\n        nametrans.put(\"i\", \"ile\");\n        nametrans.put(\"k\", \"lys\");\n        nametrans.put(\"l\", \"leu\");\n        nametrans.put(\"m\", \"met\");\n        nametrans.put(\"n\", \"asn\");\n        nametrans.put(\"p\", \"pro\");\n        nametrans.put(\"q\", \"gln\");\n        nametrans.put(\"r\", \"arg\");\n        nametrans.put(\"s\", \"ser\");\n        nametrans.put(\"t\", \"thr\");\n        nametrans.put(\"v\", \"val\");\n        nametrans.put(\"w\", \"trp\");\n        nametrans.put(\"y\", \"tyr\");\n\n        loadTAEParams();\n    }", "signature": " TaeAminoAcidDescriptor()", "full_signature": "public  TaeAminoAcidDescriptor()", "class_method_signature": "TaeAminoAcidDescriptor.TaeAminoAcidDescriptor()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}