{"test_class": {"identifier": "AfmPlayerViewTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    Context context;", "modifier": "@Mock", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "private AfmPlayerView afmPlayerView;", "modifier": "private", "type": "AfmPlayerView", "declarator": "afmPlayerView", "var_name": "afmPlayerView"}, {"original_string": "private List<AfmAudio> playlist;", "modifier": "private", "type": "List<AfmAudio>", "declarator": "playlist", "var_name": "playlist"}], "file": "AfmPlayer/src/test/java/com/library/nanostudio/afmplayer/AfmPlayerViewTest.java"}, "test_case": {"identifier": "player_has_same_size_of_playlist_user", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void player_has_same_size_of_playlist_user(){\n        assertEquals(afmPlayerView.getMyPlaylist().size(), playlist.size());\n    }", "signature": "void player_has_same_size_of_playlist_user()", "full_signature": "@Test public void player_has_same_size_of_playlist_user()", "class_method_signature": "AfmPlayerViewTest.player_has_same_size_of_playlist_user()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "size", "getMyPlaylist", "size"]}, "focal_class": {"identifier": "AfmPlayerView", "superclass": "extends LinearLayout", "interfaces": "implements\n        View.OnClickListener, SeekBar.OnSeekBarChangeListener", "fields": [{"original_string": "private static final String TAG = AfmPlayerView.class.getSimpleName();", "modifier": "private static final", "type": "String", "declarator": "TAG = AfmPlayerView.class.getSimpleName()", "var_name": "TAG"}, {"original_string": "private static final int PULSE_ANIMATION_DURATION = 200;", "modifier": "private static final", "type": "int", "declarator": "PULSE_ANIMATION_DURATION = 200", "var_name": "PULSE_ANIMATION_DURATION"}, {"original_string": "private static final int TITLE_ANIMATION_DURATION = 600;", "modifier": "private static final", "type": "int", "declarator": "TITLE_ANIMATION_DURATION = 600", "var_name": "TITLE_ANIMATION_DURATION"}, {"original_string": "private TextView txtCurrentMusic;", "modifier": "private", "type": "TextView", "declarator": "txtCurrentMusic", "var_name": "txtCurrentMusic"}, {"original_string": "private ImageButton btnPrev;", "modifier": "private", "type": "ImageButton", "declarator": "btnPrev", "var_name": "btnPrev"}, {"original_string": "private ImageButton btnPlay;", "modifier": "private", "type": "ImageButton", "declarator": "btnPlay", "var_name": "btnPlay"}, {"original_string": "private ProgressBar progressBarPlayer;", "modifier": "private", "type": "ProgressBar", "declarator": "progressBarPlayer", "var_name": "progressBarPlayer"}, {"original_string": "private AfmAudioPlayer afmAudioPlayer;", "modifier": "private", "type": "AfmAudioPlayer", "declarator": "afmAudioPlayer", "var_name": "afmAudioPlayer"}, {"original_string": "private TextView txtDuration;", "modifier": "private", "type": "TextView", "declarator": "txtDuration", "var_name": "txtDuration"}, {"original_string": "private ImageButton btnNext;", "modifier": "private", "type": "ImageButton", "declarator": "btnNext", "var_name": "btnNext"}, {"original_string": "private SeekBar seekBar;", "modifier": "private", "type": "SeekBar", "declarator": "seekBar", "var_name": "seekBar"}, {"original_string": "private TextView txtCurrentDuration;", "modifier": "private", "type": "TextView", "declarator": "txtCurrentDuration", "var_name": "txtCurrentDuration"}, {"original_string": "private boolean isInitialized;", "modifier": "private", "type": "boolean", "declarator": "isInitialized", "var_name": "isInitialized"}, {"original_string": "private OnInvalidPathListener onInvalidPathListener = new OnInvalidPathListener() {\n        @Override\n        public void onPathError(AfmAudio afmAudio) {\n            dismissProgressBar();\n        }\n    };", "modifier": "private", "type": "OnInvalidPathListener", "declarator": "onInvalidPathListener = new OnInvalidPathListener() {\n        @Override\n        public void onPathError(AfmAudio afmAudio) {\n            dismissProgressBar();\n        }\n    }", "var_name": "onInvalidPathListener"}, {"original_string": "JcPlayerViewServiceListener jcPlayerViewServiceListener = new JcPlayerViewServiceListener() {\n\n        @Override\n        public void onPreparedAudio(String audioName, int duration) {\n            dismissProgressBar();\n            resetPlayerInfo();\n\n            long aux = duration / 1000;\n            int minute = (int) (aux / 60);\n            int second = (int) (aux % 60);\n\n            final String sDuration = // Minutes\n                    (minute < 10 ? \"0\" + minute : minute + \"\")\n                            + \":\" +\n                            // Seconds\n                            (second < 10 ? \"0\" + second : second + \"\");\n\n            seekBar.setMax(duration);\n\n            txtDuration.post(new Runnable() {\n                @Override\n                public void run() {\n                    txtDuration.setText(sDuration);\n                }\n            });\n        }\n\n        @Override\n        public void onCompletedAudio() {\n            resetPlayerInfo();\n\n            try {\n                afmAudioPlayer.nextAudio();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n\n        @Override\n        public void onPaused() {\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {\n                btnPlay.setBackground(ResourcesCompat.getDrawable(getResources(),\n                        R.drawable.ic_play_white, null));\n            } else {\n                btnPlay.setBackgroundDrawable(ResourcesCompat.getDrawable(getResources(),\n                        R.drawable.ic_play_white, null));\n            }\n            btnPlay.setTag(R.drawable.ic_play_white);\n        }\n\n        @Override\n        public void onContinueAudio() {\n            dismissProgressBar();\n        }\n\n        @Override\n        public void onPlaying() {\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {\n                btnPlay.setBackground(ResourcesCompat.getDrawable(getResources(),\n                        R.drawable.ic_pause_white, null));\n            } else {\n                btnPlay.setBackgroundDrawable(ResourcesCompat.getDrawable(getResources(),\n                        R.drawable.ic_pause_white, null));\n            }\n            btnPlay.setTag(R.drawable.ic_pause_white);\n        }\n\n        @Override\n        public void onTimeChanged(long currentPosition) {\n            long aux = currentPosition / 1000;\n            int minutes = (int) (aux / 60);\n            int seconds = (int) (aux % 60);\n            final String sMinutes = minutes < 10 ? \"0\" + minutes : minutes + \"\";\n            final String sSeconds = seconds < 10 ? \"0\" + seconds : seconds + \"\";\n\n            seekBar.setProgress((int) currentPosition);\n            txtCurrentDuration.post(new Runnable() {\n                @Override\n                public void run() {\n                    txtCurrentDuration.setText(String.valueOf(sMinutes + \":\" + sSeconds));\n                }\n            });\n        }\n\n        @Override\n        public void updateTitle(final String title) {\n//            final String mTitle = title;\n\n            YoYo.with(Techniques.FadeInLeft)\n                    .duration(TITLE_ANIMATION_DURATION)\n                    .playOn(txtCurrentMusic);\n\n            txtCurrentMusic.post(new Runnable() {\n                @Override\n                public void run() {\n                    txtCurrentMusic.setText(title);\n                }\n            });\n        }\n    };", "modifier": "", "type": "JcPlayerViewServiceListener", "declarator": "jcPlayerViewServiceListener = new JcPlayerViewServiceListener() {\n\n        @Override\n        public void onPreparedAudio(String audioName, int duration) {\n            dismissProgressBar();\n            resetPlayerInfo();\n\n            long aux = duration / 1000;\n            int minute = (int) (aux / 60);\n            int second = (int) (aux % 60);\n\n            final String sDuration = // Minutes\n                    (minute < 10 ? \"0\" + minute : minute + \"\")\n                            + \":\" +\n                            // Seconds\n                            (second < 10 ? \"0\" + second : second + \"\");\n\n            seekBar.setMax(duration);\n\n            txtDuration.post(new Runnable() {\n                @Override\n                public void run() {\n                    txtDuration.setText(sDuration);\n                }\n            });\n        }\n\n        @Override\n        public void onCompletedAudio() {\n            resetPlayerInfo();\n\n            try {\n                afmAudioPlayer.nextAudio();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n\n        @Override\n        public void onPaused() {\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {\n                btnPlay.setBackground(ResourcesCompat.getDrawable(getResources(),\n                        R.drawable.ic_play_white, null));\n            } else {\n                btnPlay.setBackgroundDrawable(ResourcesCompat.getDrawable(getResources(),\n                        R.drawable.ic_play_white, null));\n            }\n            btnPlay.setTag(R.drawable.ic_play_white);\n        }\n\n        @Override\n        public void onContinueAudio() {\n            dismissProgressBar();\n        }\n\n        @Override\n        public void onPlaying() {\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {\n                btnPlay.setBackground(ResourcesCompat.getDrawable(getResources(),\n                        R.drawable.ic_pause_white, null));\n            } else {\n                btnPlay.setBackgroundDrawable(ResourcesCompat.getDrawable(getResources(),\n                        R.drawable.ic_pause_white, null));\n            }\n            btnPlay.setTag(R.drawable.ic_pause_white);\n        }\n\n        @Override\n        public void onTimeChanged(long currentPosition) {\n            long aux = currentPosition / 1000;\n            int minutes = (int) (aux / 60);\n            int seconds = (int) (aux % 60);\n            final String sMinutes = minutes < 10 ? \"0\" + minutes : minutes + \"\";\n            final String sSeconds = seconds < 10 ? \"0\" + seconds : seconds + \"\";\n\n            seekBar.setProgress((int) currentPosition);\n            txtCurrentDuration.post(new Runnable() {\n                @Override\n                public void run() {\n                    txtCurrentDuration.setText(String.valueOf(sMinutes + \":\" + sSeconds));\n                }\n            });\n        }\n\n        @Override\n        public void updateTitle(final String title) {\n//            final String mTitle = title;\n\n            YoYo.with(Techniques.FadeInLeft)\n                    .duration(TITLE_ANIMATION_DURATION)\n                    .playOn(txtCurrentMusic);\n\n            txtCurrentMusic.post(new Runnable() {\n                @Override\n                public void run() {\n                    txtCurrentMusic.setText(title);\n                }\n            });\n        }\n    }", "var_name": "jcPlayerViewServiceListener"}], "methods": [{"identifier": "AfmPlayerView", "parameters": "(Context context)", "modifiers": "public", "return": "", "signature": " AfmPlayerView(Context context)", "full_signature": "public  AfmPlayerView(Context context)", "class_method_signature": "AfmPlayerView.AfmPlayerView(Context context)", "testcase": false, "constructor": true}, {"identifier": "AfmPlayerView", "parameters": "(Context context, AttributeSet attrs)", "modifiers": "public", "return": "", "signature": " AfmPlayerView(Context context, AttributeSet attrs)", "full_signature": "public  AfmPlayerView(Context context, AttributeSet attrs)", "class_method_signature": "AfmPlayerView.AfmPlayerView(Context context, AttributeSet attrs)", "testcase": false, "constructor": true}, {"identifier": "AfmPlayerView", "parameters": "(Context context, AttributeSet attrs, int defStyle)", "modifiers": "@TargetApi(Build.VERSION_CODES.HONEYCOMB) public", "return": "", "signature": " AfmPlayerView(Context context, AttributeSet attrs, int defStyle)", "full_signature": "@TargetApi(Build.VERSION_CODES.HONEYCOMB) public  AfmPlayerView(Context context, AttributeSet attrs, int defStyle)", "class_method_signature": "AfmPlayerView.AfmPlayerView(Context context, AttributeSet attrs, int defStyle)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void init()", "full_signature": "private void init()", "class_method_signature": "AfmPlayerView.init()", "testcase": false, "constructor": false}, {"identifier": "initPlaylist", "parameters": "(List<AfmAudio> playlist)", "modifiers": "public", "return": "void", "signature": "void initPlaylist(List<AfmAudio> playlist)", "full_signature": "public void initPlaylist(List<AfmAudio> playlist)", "class_method_signature": "AfmPlayerView.initPlaylist(List<AfmAudio> playlist)", "testcase": false, "constructor": false}, {"identifier": "initAnonPlaylist", "parameters": "(List<AfmAudio> playlist)", "modifiers": "public", "return": "void", "signature": "void initAnonPlaylist(List<AfmAudio> playlist)", "full_signature": "public void initAnonPlaylist(List<AfmAudio> playlist)", "class_method_signature": "AfmPlayerView.initAnonPlaylist(List<AfmAudio> playlist)", "testcase": false, "constructor": false}, {"identifier": "initWithTitlePlaylist", "parameters": "(List<AfmAudio> playlist, String title)", "modifiers": "public", "return": "void", "signature": "void initWithTitlePlaylist(List<AfmAudio> playlist, String title)", "full_signature": "public void initWithTitlePlaylist(List<AfmAudio> playlist, String title)", "class_method_signature": "AfmPlayerView.initWithTitlePlaylist(List<AfmAudio> playlist, String title)", "testcase": false, "constructor": false}, {"identifier": "addAudio", "parameters": "(AfmAudio afmAudio)", "modifiers": "public", "return": "long", "signature": "long addAudio(AfmAudio afmAudio)", "full_signature": "public long addAudio(AfmAudio afmAudio)", "class_method_signature": "AfmPlayerView.addAudio(AfmAudio afmAudio)", "testcase": false, "constructor": false}, {"identifier": "removeAudio", "parameters": "(AfmAudio afmAudio)", "modifiers": "public", "return": "void", "signature": "void removeAudio(AfmAudio afmAudio)", "full_signature": "public void removeAudio(AfmAudio afmAudio)", "class_method_signature": "AfmPlayerView.removeAudio(AfmAudio afmAudio)", "testcase": false, "constructor": false}, {"identifier": "playAudio", "parameters": "(AfmAudio afmAudio)", "modifiers": "public", "return": "void", "signature": "void playAudio(AfmAudio afmAudio)", "full_signature": "public void playAudio(AfmAudio afmAudio)", "class_method_signature": "AfmPlayerView.playAudio(AfmAudio afmAudio)", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void next()", "full_signature": "public void next()", "class_method_signature": "AfmPlayerView.next()", "testcase": false, "constructor": false}, {"identifier": "continueAudio", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void continueAudio()", "full_signature": "public void continueAudio()", "class_method_signature": "AfmPlayerView.continueAudio()", "testcase": false, "constructor": false}, {"identifier": "pause", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void pause()", "full_signature": "public void pause()", "class_method_signature": "AfmPlayerView.pause()", "testcase": false, "constructor": false}, {"identifier": "previous", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void previous()", "full_signature": "public void previous()", "class_method_signature": "AfmPlayerView.previous()", "testcase": false, "constructor": false}, {"identifier": "onClick", "parameters": "(View view)", "modifiers": "@Override public", "return": "void", "signature": "void onClick(View view)", "full_signature": "@Override public void onClick(View view)", "class_method_signature": "AfmPlayerView.onClick(View view)", "testcase": false, "constructor": false}, {"identifier": "createNotification", "parameters": "(int iconResource)", "modifiers": "public", "return": "void", "signature": "void createNotification(int iconResource)", "full_signature": "public void createNotification(int iconResource)", "class_method_signature": "AfmPlayerView.createNotification(int iconResource)", "testcase": false, "constructor": false}, {"identifier": "createNotification", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void createNotification()", "full_signature": "public void createNotification()", "class_method_signature": "AfmPlayerView.createNotification()", "testcase": false, "constructor": false}, {"identifier": "getMyPlaylist", "parameters": "()", "modifiers": "public", "return": "List<AfmAudio>", "signature": "List<AfmAudio> getMyPlaylist()", "full_signature": "public List<AfmAudio> getMyPlaylist()", "class_method_signature": "AfmPlayerView.getMyPlaylist()", "testcase": false, "constructor": false}, {"identifier": "isPlaying", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPlaying()", "full_signature": "public boolean isPlaying()", "class_method_signature": "AfmPlayerView.isPlaying()", "testcase": false, "constructor": false}, {"identifier": "isPaused", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPaused()", "full_signature": "public boolean isPaused()", "class_method_signature": "AfmPlayerView.isPaused()", "testcase": false, "constructor": false}, {"identifier": "getCurrentAudio", "parameters": "()", "modifiers": "public", "return": "AfmAudio", "signature": "AfmAudio getCurrentAudio()", "full_signature": "public AfmAudio getCurrentAudio()", "class_method_signature": "AfmPlayerView.getCurrentAudio()", "testcase": false, "constructor": false}, {"identifier": "createJcAudioPlayer", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void createJcAudioPlayer()", "full_signature": "private void createJcAudioPlayer()", "class_method_signature": "AfmPlayerView.createJcAudioPlayer()", "testcase": false, "constructor": false}, {"identifier": "sortPlaylist", "parameters": "(List<AfmAudio> playlist)", "modifiers": "private", "return": "void", "signature": "void sortPlaylist(List<AfmAudio> playlist)", "full_signature": "private void sortPlaylist(List<AfmAudio> playlist)", "class_method_signature": "AfmPlayerView.sortPlaylist(List<AfmAudio> playlist)", "testcase": false, "constructor": false}, {"identifier": "isAlreadySorted", "parameters": "(List<AfmAudio> playlist)", "modifiers": "private", "return": "boolean", "signature": "boolean isAlreadySorted(List<AfmAudio> playlist)", "full_signature": "private boolean isAlreadySorted(List<AfmAudio> playlist)", "class_method_signature": "AfmPlayerView.isAlreadySorted(List<AfmAudio> playlist)", "testcase": false, "constructor": false}, {"identifier": "generateTitleAudio", "parameters": "(List<AfmAudio> playlist, String title)", "modifiers": "private", "return": "void", "signature": "void generateTitleAudio(List<AfmAudio> playlist, String title)", "full_signature": "private void generateTitleAudio(List<AfmAudio> playlist, String title)", "class_method_signature": "AfmPlayerView.generateTitleAudio(List<AfmAudio> playlist, String title)", "testcase": false, "constructor": false}, {"identifier": "showProgressBar", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void showProgressBar()", "full_signature": "private void showProgressBar()", "class_method_signature": "AfmPlayerView.showProgressBar()", "testcase": false, "constructor": false}, {"identifier": "dismissProgressBar", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void dismissProgressBar()", "full_signature": "private void dismissProgressBar()", "class_method_signature": "AfmPlayerView.dismissProgressBar()", "testcase": false, "constructor": false}, {"identifier": "resetPlayerInfo", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void resetPlayerInfo()", "full_signature": "private void resetPlayerInfo()", "class_method_signature": "AfmPlayerView.resetPlayerInfo()", "testcase": false, "constructor": false}, {"identifier": "onProgressChanged", "parameters": "(SeekBar seekBar, int i, boolean fromUser)", "modifiers": "@Override public", "return": "void", "signature": "void onProgressChanged(SeekBar seekBar, int i, boolean fromUser)", "full_signature": "@Override public void onProgressChanged(SeekBar seekBar, int i, boolean fromUser)", "class_method_signature": "AfmPlayerView.onProgressChanged(SeekBar seekBar, int i, boolean fromUser)", "testcase": false, "constructor": false}, {"identifier": "onStartTrackingTouch", "parameters": "(SeekBar seekBar)", "modifiers": "@Override public", "return": "void", "signature": "void onStartTrackingTouch(SeekBar seekBar)", "full_signature": "@Override public void onStartTrackingTouch(SeekBar seekBar)", "class_method_signature": "AfmPlayerView.onStartTrackingTouch(SeekBar seekBar)", "testcase": false, "constructor": false}, {"identifier": "onStopTrackingTouch", "parameters": "(SeekBar seekBar)", "modifiers": "@Override public", "return": "void", "signature": "void onStopTrackingTouch(SeekBar seekBar)", "full_signature": "@Override public void onStopTrackingTouch(SeekBar seekBar)", "class_method_signature": "AfmPlayerView.onStopTrackingTouch(SeekBar seekBar)", "testcase": false, "constructor": false}, {"identifier": "registerInvalidPathListener", "parameters": "(OnInvalidPathListener registerInvalidPathListener)", "modifiers": "public", "return": "void", "signature": "void registerInvalidPathListener(OnInvalidPathListener registerInvalidPathListener)", "full_signature": "public void registerInvalidPathListener(OnInvalidPathListener registerInvalidPathListener)", "class_method_signature": "AfmPlayerView.registerInvalidPathListener(OnInvalidPathListener registerInvalidPathListener)", "testcase": false, "constructor": false}, {"identifier": "kill", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void kill()", "full_signature": "public void kill()", "class_method_signature": "AfmPlayerView.kill()", "testcase": false, "constructor": false}, {"identifier": "registerServiceListener", "parameters": "(JcPlayerViewServiceListener jcPlayerServiceListener)", "modifiers": "public", "return": "void", "signature": "void registerServiceListener(JcPlayerViewServiceListener jcPlayerServiceListener)", "full_signature": "public void registerServiceListener(JcPlayerViewServiceListener jcPlayerServiceListener)", "class_method_signature": "AfmPlayerView.registerServiceListener(JcPlayerViewServiceListener jcPlayerServiceListener)", "testcase": false, "constructor": false}, {"identifier": "registerStatusListener", "parameters": "(JcPlayerViewStatusListener statusListener)", "modifiers": "public", "return": "void", "signature": "void registerStatusListener(JcPlayerViewStatusListener statusListener)", "full_signature": "public void registerStatusListener(JcPlayerViewStatusListener statusListener)", "class_method_signature": "AfmPlayerView.registerStatusListener(JcPlayerViewStatusListener statusListener)", "testcase": false, "constructor": false}], "file": "AfmPlayer/src/main/java/com/library/nanostudio/afmplayer/AfmPlayerView.java"}, "focal_method": {"identifier": "getMyPlaylist", "parameters": "()", "modifiers": "public", "return": "List<AfmAudio>", "body": "public List<AfmAudio> getMyPlaylist() {\n        return afmAudioPlayer.getPlaylist();\n    }", "signature": "List<AfmAudio> getMyPlaylist()", "full_signature": "public List<AfmAudio> getMyPlaylist()", "class_method_signature": "AfmPlayerView.getMyPlaylist()", "testcase": false, "constructor": false, "invocations": ["getPlaylist"]}, "repository": {"repo_id": 136035670, "url": "https://github.com/semka/Musicplayer", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 6, "size": 337, "license": "licensed"}}