{"test_class": {"identifier": "SchedulerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Scheduler scheduler = spy(new Scheduler(1));", "modifier": "", "type": "Scheduler", "declarator": "scheduler = spy(new Scheduler(1))", "var_name": "scheduler"}, {"original_string": "RunnableScheduledFuture<?> task = mock(RunnableScheduledFuture.class);", "modifier": "", "type": "RunnableScheduledFuture<?>", "declarator": "task = mock(RunnableScheduledFuture.class)", "var_name": "task"}], "file": "commons/src/test/java/com/karuslabs/commons/util/concurrent/SchedulerTest.java"}, "test_case": {"identifier": "decorateTask_runnable", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void decorateTask_runnable() {\n        Runnable runnable = mock(Runnable.class);\n        \n        assertEquals(task, scheduler.decorateTask(runnable, task));\n        \n        verifyNoInteractions(runnable);\n        verifyNoInteractions(task);\n    }", "signature": "void decorateTask_runnable()", "full_signature": "@Test void decorateTask_runnable()", "class_method_signature": "SchedulerTest.decorateTask_runnable()", "testcase": true, "constructor": false, "invocations": ["mock", "assertEquals", "decorateTask", "verifyNoInteractions", "verifyNoInteractions"]}, "focal_class": {"identifier": "Scheduler", "superclass": "extends ScheduledThreadPoolExecutor", "interfaces": "", "fields": [], "methods": [{"identifier": "Scheduler", "parameters": "(int corePoolSize)", "modifiers": "public", "return": "", "signature": " Scheduler(int corePoolSize)", "full_signature": "public  Scheduler(int corePoolSize)", "class_method_signature": "Scheduler.Scheduler(int corePoolSize)", "testcase": false, "constructor": true}, {"identifier": "Scheduler", "parameters": "(int corePoolSize, ThreadFactory threadFactory)", "modifiers": "public", "return": "", "signature": " Scheduler(int corePoolSize, ThreadFactory threadFactory)", "full_signature": "public  Scheduler(int corePoolSize, ThreadFactory threadFactory)", "class_method_signature": "Scheduler.Scheduler(int corePoolSize, ThreadFactory threadFactory)", "testcase": false, "constructor": true}, {"identifier": "Scheduler", "parameters": "(int corePoolSize, RejectedExecutionHandler handler)", "modifiers": "public", "return": "", "signature": " Scheduler(int corePoolSize, RejectedExecutionHandler handler)", "full_signature": "public  Scheduler(int corePoolSize, RejectedExecutionHandler handler)", "class_method_signature": "Scheduler.Scheduler(int corePoolSize, RejectedExecutionHandler handler)", "testcase": false, "constructor": true}, {"identifier": "Scheduler", "parameters": "(int corePoolSize, ThreadFactory threadFactory, RejectedExecutionHandler handler)", "modifiers": "public", "return": "", "signature": " Scheduler(int corePoolSize, ThreadFactory threadFactory, RejectedExecutionHandler handler)", "full_signature": "public  Scheduler(int corePoolSize, ThreadFactory threadFactory, RejectedExecutionHandler handler)", "class_method_signature": "Scheduler.Scheduler(int corePoolSize, ThreadFactory threadFactory, RejectedExecutionHandler handler)", "testcase": false, "constructor": true}, {"identifier": "schedule", "parameters": "(Consumer<Context> task, long initial, long period, TimeUnit unit)", "modifiers": "public", "return": "ScheduledFuture<?>", "signature": "ScheduledFuture<?> schedule(Consumer<Context> task, long initial, long period, TimeUnit unit)", "full_signature": "public ScheduledFuture<?> schedule(Consumer<Context> task, long initial, long period, TimeUnit unit)", "class_method_signature": "Scheduler.schedule(Consumer<Context> task, long initial, long period, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "schedule", "parameters": "(Consumer<Context> task, long initial, long period, TimeUnit unit, long times)", "modifiers": "public", "return": "ScheduledFuture<?>", "signature": "ScheduledFuture<?> schedule(Consumer<Context> task, long initial, long period, TimeUnit unit, long times)", "full_signature": "public ScheduledFuture<?> schedule(Consumer<Context> task, long initial, long period, TimeUnit unit, long times)", "class_method_signature": "Scheduler.schedule(Consumer<Context> task, long initial, long period, TimeUnit unit, long times)", "testcase": false, "constructor": false}, {"identifier": "decorateTask", "parameters": "(Runnable runnable, RunnableScheduledFuture<V> future)", "modifiers": "@Override protected", "return": "RunnableScheduledFuture<V>", "signature": "RunnableScheduledFuture<V> decorateTask(Runnable runnable, RunnableScheduledFuture<V> future)", "full_signature": "@Override protected RunnableScheduledFuture<V> decorateTask(Runnable runnable, RunnableScheduledFuture<V> future)", "class_method_signature": "Scheduler.decorateTask(Runnable runnable, RunnableScheduledFuture<V> future)", "testcase": false, "constructor": false}], "file": "commons/src/main/java/com/karuslabs/commons/util/concurrent/Scheduler.java"}, "focal_method": {"identifier": "decorateTask", "parameters": "(Runnable runnable, RunnableScheduledFuture<V> future)", "modifiers": "@Override protected", "return": "RunnableScheduledFuture<V>", "body": "@Override\n    protected <V> RunnableScheduledFuture<V> decorateTask(Runnable runnable, RunnableScheduledFuture<V> future) {\n        if (runnable instanceof RunnableContext) {\n            ((RunnableContext) runnable).future = future;\n        }\n        \n        return future;\n    }", "signature": "RunnableScheduledFuture<V> decorateTask(Runnable runnable, RunnableScheduledFuture<V> future)", "full_signature": "@Override protected RunnableScheduledFuture<V> decorateTask(Runnable runnable, RunnableScheduledFuture<V> future)", "class_method_signature": "Scheduler.decorateTask(Runnable runnable, RunnableScheduledFuture<V> future)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}