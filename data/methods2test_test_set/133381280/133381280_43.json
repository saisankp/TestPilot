{"test_class": {"identifier": "CompositeRegistryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static boolean registerExtentedMetrics = false;", "modifier": "private static", "type": "boolean", "declarator": "registerExtentedMetrics = false", "var_name": "registerExtentedMetrics"}], "file": "client/lookout-api/src/test/java/com/alipay/lookout/api/composite/CompositeRegistryTest.java"}, "test_case": {"identifier": "testGetCompositeDistributionSummary", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetCompositeDistributionSummary() {\n        Registry r = NoopRegistry.INSTANCE;\n        List<Registry> list = new ArrayList<Registry>();\n        list.add(r);\n        DistributionSummary t = new CompositeDistributionSummary(r.createId(\"xx\"), list);\n        t.record(100);\n        Assert.assertEquals(0, t.count());\n        Assert.assertEquals(0, t.totalAmount());\n    }", "signature": "void testGetCompositeDistributionSummary()", "full_signature": "@Test public void testGetCompositeDistributionSummary()", "class_method_signature": "CompositeRegistryTest.testGetCompositeDistributionSummary()", "testcase": true, "constructor": false, "invocations": ["add", "createId", "record", "assertEquals", "count", "assertEquals", "totalAmount"]}, "focal_class": {"identifier": "CompositeRegistry", "superclass": "extends MetricRegistry", "interfaces": "", "fields": [{"original_string": "private final CopyOnWriteArraySet<Registry> registries;", "modifier": "private final", "type": "CopyOnWriteArraySet<Registry>", "declarator": "registries", "var_name": "registries"}], "methods": [{"identifier": "CompositeRegistry", "parameters": "(Clock clock)", "modifiers": "public", "return": "", "signature": " CompositeRegistry(Clock clock)", "full_signature": "public  CompositeRegistry(Clock clock)", "class_method_signature": "CompositeRegistry.CompositeRegistry(Clock clock)", "testcase": false, "constructor": true}, {"identifier": "registerExtendedMetrics", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void registerExtendedMetrics()", "full_signature": "@Override public void registerExtendedMetrics()", "class_method_signature": "CompositeRegistry.registerExtendedMetrics()", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(Class<T> c)", "modifiers": "", "return": "T", "signature": "T find(Class<T> c)", "full_signature": " T find(Class<T> c)", "class_method_signature": "CompositeRegistry.find(Class<T> c)", "testcase": false, "constructor": false}, {"identifier": "getRegistries", "parameters": "()", "modifiers": "public", "return": "Collection<Registry>", "signature": "Collection<Registry> getRegistries()", "full_signature": "public Collection<Registry> getRegistries()", "class_method_signature": "CompositeRegistry.getRegistries()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(MetricRegistry registry)", "modifiers": "public", "return": "void", "signature": "void add(MetricRegistry registry)", "full_signature": "public void add(MetricRegistry registry)", "class_method_signature": "CompositeRegistry.add(MetricRegistry registry)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Registry registry)", "modifiers": "public", "return": "void", "signature": "void remove(Registry registry)", "full_signature": "public void remove(Registry registry)", "class_method_signature": "CompositeRegistry.remove(Registry registry)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "CompositeRegistry.clear()", "testcase": false, "constructor": false}, {"identifier": "gauge", "parameters": "(Id id, Gauge<T> gauge)", "modifiers": "@Override public", "return": "Gauge<T>", "signature": "Gauge<T> gauge(Id id, Gauge<T> gauge)", "full_signature": "@Override public Gauge<T> gauge(Id id, Gauge<T> gauge)", "class_method_signature": "CompositeRegistry.gauge(Id id, Gauge<T> gauge)", "testcase": false, "constructor": false}, {"identifier": "removeMetric", "parameters": "(Id id)", "modifiers": "@Override public", "return": "void", "signature": "void removeMetric(Id id)", "full_signature": "@Override public void removeMetric(Id id)", "class_method_signature": "CompositeRegistry.removeMetric(Id id)", "testcase": false, "constructor": false}, {"identifier": "info", "parameters": "(Id id, Y info)", "modifiers": "@Override public", "return": "Info", "signature": "Info info(Id id, Y info)", "full_signature": "@Override public Info info(Id id, Y info)", "class_method_signature": "CompositeRegistry.info(Id id, Y info)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(Metric metric)", "modifiers": "@Override public", "return": "void", "signature": "void register(Metric metric)", "full_signature": "@Override public void register(Metric metric)", "class_method_signature": "CompositeRegistry.register(Metric metric)", "testcase": false, "constructor": false}, {"identifier": "counter", "parameters": "(Id id)", "modifiers": "@Override public", "return": "Counter", "signature": "Counter counter(Id id)", "full_signature": "@Override public Counter counter(Id id)", "class_method_signature": "CompositeRegistry.counter(Id id)", "testcase": false, "constructor": false}, {"identifier": "distributionSummary", "parameters": "(Id id)", "modifiers": "@Override public", "return": "DistributionSummary", "signature": "DistributionSummary distributionSummary(Id id)", "full_signature": "@Override public DistributionSummary distributionSummary(Id id)", "class_method_signature": "CompositeRegistry.distributionSummary(Id id)", "testcase": false, "constructor": false}, {"identifier": "timer", "parameters": "(Id id)", "modifiers": "@Override public", "return": "Timer", "signature": "Timer timer(Id id)", "full_signature": "@Override public Timer timer(Id id)", "class_method_signature": "CompositeRegistry.timer(Id id)", "testcase": false, "constructor": false}, {"identifier": "mixinMetric", "parameters": "(Id id)", "modifiers": "@Override public", "return": "MixinMetric", "signature": "MixinMetric mixinMetric(Id id)", "full_signature": "@Override public MixinMetric mixinMetric(Id id)", "class_method_signature": "CompositeRegistry.mixinMetric(Id id)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Id id)", "modifiers": "@Override public", "return": "X", "signature": "X get(Id id)", "full_signature": "@Override public X get(Id id)", "class_method_signature": "CompositeRegistry.get(Id id)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Metric>", "signature": "Iterator<Metric> iterator()", "full_signature": "@Override public Iterator<Metric> iterator()", "class_method_signature": "CompositeRegistry.iterator()", "testcase": false, "constructor": false}], "file": "client/lookout-api/src/main/java/com/alipay/lookout/api/composite/CompositeRegistry.java"}, "focal_method": {"identifier": "add", "parameters": "(MetricRegistry registry)", "modifiers": "public", "return": "void", "body": "public void add(MetricRegistry registry) {\n        Assert.checkArg(!(registry instanceof CompositeRegistry),\n            String.format(\"registry: %s can not be  a CompositeRegistry!\", registry));\n        registries.add(registry);\n    }", "signature": "void add(MetricRegistry registry)", "full_signature": "public void add(MetricRegistry registry)", "class_method_signature": "CompositeRegistry.add(MetricRegistry registry)", "testcase": false, "constructor": false, "invocations": ["checkArg", "format", "add"]}, "repository": {"repo_id": 133381280, "url": "https://github.com/sofastack/sofa-lookout", "language": "Java", "is_fork": false, "fork_count": 113, "stargazer_count": 318, "size": 1394, "license": "licensed"}}