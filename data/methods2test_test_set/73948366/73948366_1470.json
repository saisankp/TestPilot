{"test_class": {"identifier": "JDBCConnectionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock private PoolableDataSource mockDataSrc;", "modifier": "@Mock private", "type": "PoolableDataSource", "declarator": "mockDataSrc", "var_name": "mockDataSrc"}, {"original_string": "@Mock private Statement mockStmt;", "modifier": "@Mock private", "type": "Statement", "declarator": "mockStmt", "var_name": "mockStmt"}, {"original_string": "@Mock private PreparedStatement mockPrepStmt;", "modifier": "@Mock private", "type": "PreparedStatement", "declarator": "mockPrepStmt", "var_name": "mockPrepStmt"}, {"original_string": "@Mock private Connection mockConn;", "modifier": "@Mock private", "type": "Connection", "declarator": "mockConn", "var_name": "mockConn"}, {"original_string": "@Mock private ResultSet mockResultSet;", "modifier": "@Mock private", "type": "ResultSet", "declarator": "mockResultSet", "var_name": "mockResultSet"}], "file": "servers/zms/src/test/java/com/yahoo/athenz/zms/store/jdbc/JDBCConnectionTest.java"}, "test_case": {"identifier": "testDeleteDomainTemplate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDeleteDomainTemplate() throws Exception {\n        \n        JDBCConnection jdbcConn = new JDBCConnection(mockConn, true);\n\n        Mockito.when(mockResultSet.getInt(1))\n            .thenReturn(5); // domain id\n        Mockito.when(mockResultSet.next())\n            .thenReturn(true); // this one is for domain id\n            \n        Mockito.doReturn(1).when(mockPrepStmt).executeUpdate();\n\n        boolean requestSuccess = jdbcConn.deleteDomainTemplate(\"my-domain\", \"platforms\", null);\n        \n        // this is combined for all operations above\n        \n        Mockito.verify(mockPrepStmt, times(1)).setString(1, \"my-domain\");\n        \n        Mockito.verify(mockPrepStmt, times(1)).setInt(1, 5);\n        Mockito.verify(mockPrepStmt, times(1)).setString(2, \"platforms\");\n        \n        assertTrue(requestSuccess);\n        jdbcConn.close();\n    }", "signature": "void testDeleteDomainTemplate()", "full_signature": "@Test public void testDeleteDomainTemplate()", "class_method_signature": "JDBCConnectionTest.testDeleteDomainTemplate()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getInt", "thenReturn", "when", "next", "executeUpdate", "when", "doReturn", "deleteDomainTemplate", "setString", "verify", "times", "setInt", "verify", "times", "setString", "verify", "times", "assertTrue", "close"]}, "focal_class": {"identifier": "JDBCConnection", "superclass": "", "interfaces": "implements ObjectStoreConnection", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(JDBCConnection.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(JDBCConnection.class)", "var_name": "LOG"}, {"original_string": "private static final int MYSQL_ER_OPTION_PREVENTS_STATEMENT = 1290;", "modifier": "private static final", "type": "int", "declarator": "MYSQL_ER_OPTION_PREVENTS_STATEMENT = 1290", "var_name": "MYSQL_ER_OPTION_PREVENTS_STATEMENT"}, {"original_string": "private static final int MYSQL_ER_OPTION_DUPLICATE_ENTRY = 1062;", "modifier": "private static final", "type": "int", "declarator": "MYSQL_ER_OPTION_DUPLICATE_ENTRY = 1062", "var_name": "MYSQL_ER_OPTION_DUPLICATE_ENTRY"}, {"original_string": "private static final String SQL_DELETE_DOMAIN = \"DELETE FROM domain WHERE name=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_DELETE_DOMAIN = \"DELETE FROM domain WHERE name=?;\"", "var_name": "SQL_DELETE_DOMAIN"}, {"original_string": "private static final String SQL_GET_DOMAIN = \"SELECT * FROM domain WHERE name=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_DOMAIN = \"SELECT * FROM domain WHERE name=?;\"", "var_name": "SQL_GET_DOMAIN"}, {"original_string": "private static final String SQL_GET_DOMAIN_ID = \"SELECT domain_id FROM domain WHERE name=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_DOMAIN_ID = \"SELECT domain_id FROM domain WHERE name=?;\"", "var_name": "SQL_GET_DOMAIN_ID"}, {"original_string": "private static final String SQL_GET_ACTIVE_DOMAIN_ID = \"SELECT domain_id FROM domain WHERE name=? AND enabled=true;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_ACTIVE_DOMAIN_ID = \"SELECT domain_id FROM domain WHERE name=? AND enabled=true;\"", "var_name": "SQL_GET_ACTIVE_DOMAIN_ID"}, {"original_string": "private static final String SQL_GET_DOMAINS_WITH_NAME = \"SELECT name FROM domain WHERE name LIKE ?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_DOMAINS_WITH_NAME = \"SELECT name FROM domain WHERE name LIKE ?;\"", "var_name": "SQL_GET_DOMAINS_WITH_NAME"}, {"original_string": "private static final String SQL_GET_DOMAIN_WITH_ACCOUNT = \"SELECT name FROM domain WHERE account=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_DOMAIN_WITH_ACCOUNT = \"SELECT name FROM domain WHERE account=?;\"", "var_name": "SQL_GET_DOMAIN_WITH_ACCOUNT"}, {"original_string": "private static final String SQL_GET_DOMAIN_WITH_PRODUCT_ID = \"SELECT name FROM domain WHERE ypm_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_DOMAIN_WITH_PRODUCT_ID = \"SELECT name FROM domain WHERE ypm_id=?;\"", "var_name": "SQL_GET_DOMAIN_WITH_PRODUCT_ID"}, {"original_string": "private static final String SQL_INSERT_DOMAIN = \"INSERT INTO domain \"\n            + \"(name, description, org, uuid, enabled, audit_enabled, account, ypm_id, application_id, cert_dns_domain,\"\n            + \" member_expiry_days, token_expiry_mins, service_cert_expiry_mins, role_cert_expiry_mins, sign_algorithm,\"\n            + \" service_expiry_days, user_authority_filter, group_expiry_days) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);\";", "modifier": "private static final", "type": "String", "declarator": "SQL_INSERT_DOMAIN = \"INSERT INTO domain \"\n            + \"(name, description, org, uuid, enabled, audit_enabled, account, ypm_id, application_id, cert_dns_domain,\"\n            + \" member_expiry_days, token_expiry_mins, service_cert_expiry_mins, role_cert_expiry_mins, sign_algorithm,\"\n            + \" service_expiry_days, user_authority_filter, group_expiry_days) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);\"", "var_name": "SQL_INSERT_DOMAIN"}, {"original_string": "private static final String SQL_UPDATE_DOMAIN = \"UPDATE domain \"\n            + \"SET description=?, org=?, uuid=?, enabled=?, audit_enabled=?, account=?, ypm_id=?, application_id=?,\"\n            + \" cert_dns_domain=?, member_expiry_days=?, token_expiry_mins=?, service_cert_expiry_mins=?,\"\n            + \" role_cert_expiry_mins=?, sign_algorithm=?, service_expiry_days=?, user_authority_filter=?,\"\n            + \" group_expiry_days=? WHERE name=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_UPDATE_DOMAIN = \"UPDATE domain \"\n            + \"SET description=?, org=?, uuid=?, enabled=?, audit_enabled=?, account=?, ypm_id=?, application_id=?,\"\n            + \" cert_dns_domain=?, member_expiry_days=?, token_expiry_mins=?, service_cert_expiry_mins=?,\"\n            + \" role_cert_expiry_mins=?, sign_algorithm=?, service_expiry_days=?, user_authority_filter=?,\"\n            + \" group_expiry_days=? WHERE name=?;\"", "var_name": "SQL_UPDATE_DOMAIN"}, {"original_string": "private static final String SQL_UPDATE_DOMAIN_MOD_TIMESTAMP = \"UPDATE domain \"\n            + \"SET modified=CURRENT_TIMESTAMP(3) WHERE name=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_UPDATE_DOMAIN_MOD_TIMESTAMP = \"UPDATE domain \"\n            + \"SET modified=CURRENT_TIMESTAMP(3) WHERE name=?;\"", "var_name": "SQL_UPDATE_DOMAIN_MOD_TIMESTAMP"}, {"original_string": "private static final String SQL_GET_DOMAIN_MOD_TIMESTAMP = \"SELECT modified FROM domain WHERE name=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_DOMAIN_MOD_TIMESTAMP = \"SELECT modified FROM domain WHERE name=?;\"", "var_name": "SQL_GET_DOMAIN_MOD_TIMESTAMP"}, {"original_string": "private static final String SQL_LIST_DOMAIN = \"SELECT * FROM domain;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_DOMAIN = \"SELECT * FROM domain;\"", "var_name": "SQL_LIST_DOMAIN"}, {"original_string": "private static final String SQL_LIST_DOMAIN_PREFIX = \"SELECT name, modified FROM domain WHERE name>=? AND name<?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_DOMAIN_PREFIX = \"SELECT name, modified FROM domain WHERE name>=? AND name<?;\"", "var_name": "SQL_LIST_DOMAIN_PREFIX"}, {"original_string": "private static final String SQL_LIST_DOMAIN_MODIFIED = \"SELECT * FROM domain WHERE modified>?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_DOMAIN_MODIFIED = \"SELECT * FROM domain WHERE modified>?;\"", "var_name": "SQL_LIST_DOMAIN_MODIFIED"}, {"original_string": "private static final String SQL_LIST_DOMAIN_PREFIX_MODIFIED = \"SELECT name, modified FROM domain \"\n            + \"WHERE name>=? AND name<? AND modified>?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_DOMAIN_PREFIX_MODIFIED = \"SELECT name, modified FROM domain \"\n            + \"WHERE name>=? AND name<? AND modified>?;\"", "var_name": "SQL_LIST_DOMAIN_PREFIX_MODIFIED"}, {"original_string": "private static final String SQL_LIST_DOMAIN_ROLE_NAME_MEMBER = \"SELECT domain.name FROM domain \"\n            + \"JOIN role ON role.domain_id=domain.domain_id \"\n            + \"JOIN role_member ON role_member.role_id=role.role_id \"\n            + \"JOIN principal ON principal.principal_id=role_member.principal_id \"\n            + \"WHERE principal.name=? AND role.name=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_DOMAIN_ROLE_NAME_MEMBER = \"SELECT domain.name FROM domain \"\n            + \"JOIN role ON role.domain_id=domain.domain_id \"\n            + \"JOIN role_member ON role_member.role_id=role.role_id \"\n            + \"JOIN principal ON principal.principal_id=role_member.principal_id \"\n            + \"WHERE principal.name=? AND role.name=?;\"", "var_name": "SQL_LIST_DOMAIN_ROLE_NAME_MEMBER"}, {"original_string": "private static final String SQL_LIST_DOMAIN_ROLE_MEMBER = \"SELECT domain.name FROM domain \"\n            + \"JOIN role ON role.domain_id=domain.domain_id \"\n            + \"JOIN role_member ON role_member.role_id=role.role_id \"\n            + \"JOIN principal ON principal.principal_id=role_member.principal_id \"\n            + \"WHERE principal.name=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_DOMAIN_ROLE_MEMBER = \"SELECT domain.name FROM domain \"\n            + \"JOIN role ON role.domain_id=domain.domain_id \"\n            + \"JOIN role_member ON role_member.role_id=role.role_id \"\n            + \"JOIN principal ON principal.principal_id=role_member.principal_id \"\n            + \"WHERE principal.name=?;\"", "var_name": "SQL_LIST_DOMAIN_ROLE_MEMBER"}, {"original_string": "private static final String SQL_LIST_DOMAIN_ROLE_NAME = \"SELECT domain.name FROM domain \"\n            + \"JOIN role ON role.domain_id=domain.domain_id WHERE role.name=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_DOMAIN_ROLE_NAME = \"SELECT domain.name FROM domain \"\n            + \"JOIN role ON role.domain_id=domain.domain_id WHERE role.name=?;\"", "var_name": "SQL_LIST_DOMAIN_ROLE_NAME"}, {"original_string": "private static final String SQL_LIST_DOMAIN_AWS = \"SELECT name, account FROM domain WHERE account!='';\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_DOMAIN_AWS = \"SELECT name, account FROM domain WHERE account!='';\"", "var_name": "SQL_LIST_DOMAIN_AWS"}, {"original_string": "private static final String SQL_GET_ROLE = \"SELECT * FROM role \"\n            + \"JOIN domain ON domain.domain_id=role.domain_id \"\n            + \"WHERE domain.name=? AND role.name=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_ROLE = \"SELECT * FROM role \"\n            + \"JOIN domain ON domain.domain_id=role.domain_id \"\n            + \"WHERE domain.name=? AND role.name=?;\"", "var_name": "SQL_GET_ROLE"}, {"original_string": "private static final String SQL_GET_ROLE_ID = \"SELECT role_id FROM role WHERE domain_id=? AND name=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_ROLE_ID = \"SELECT role_id FROM role WHERE domain_id=? AND name=?;\"", "var_name": "SQL_GET_ROLE_ID"}, {"original_string": "private static final String SQL_INSERT_ROLE = \"INSERT INTO role (name, domain_id, trust, audit_enabled, self_serve,\"\n            + \" member_expiry_days, token_expiry_mins, cert_expiry_mins, sign_algorithm, service_expiry_days,\"\n            + \" member_review_days, service_review_days, review_enabled, notify_roles, user_authority_filter, \"\n            + \" user_authority_expiration, group_expiry_days) \"\n            + \"VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);\";", "modifier": "private static final", "type": "String", "declarator": "SQL_INSERT_ROLE = \"INSERT INTO role (name, domain_id, trust, audit_enabled, self_serve,\"\n            + \" member_expiry_days, token_expiry_mins, cert_expiry_mins, sign_algorithm, service_expiry_days,\"\n            + \" member_review_days, service_review_days, review_enabled, notify_roles, user_authority_filter, \"\n            + \" user_authority_expiration, group_expiry_days) \"\n            + \"VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);\"", "var_name": "SQL_INSERT_ROLE"}, {"original_string": "private static final String SQL_UPDATE_ROLE = \"UPDATE role SET trust=?, audit_enabled=?, self_serve=?, \"\n            + \"member_expiry_days=?, token_expiry_mins=?, cert_expiry_mins=?, sign_algorithm=?, \"\n            + \"service_expiry_days=?, member_review_days=?, service_review_days=?, review_enabled=?, notify_roles=?, \"\n            + \"user_authority_filter=?, user_authority_expiration=?, group_expiry_days=? WHERE role_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_UPDATE_ROLE = \"UPDATE role SET trust=?, audit_enabled=?, self_serve=?, \"\n            + \"member_expiry_days=?, token_expiry_mins=?, cert_expiry_mins=?, sign_algorithm=?, \"\n            + \"service_expiry_days=?, member_review_days=?, service_review_days=?, review_enabled=?, notify_roles=?, \"\n            + \"user_authority_filter=?, user_authority_expiration=?, group_expiry_days=? WHERE role_id=?;\"", "var_name": "SQL_UPDATE_ROLE"}, {"original_string": "private static final String SQL_DELETE_ROLE = \"DELETE FROM role WHERE domain_id=? AND name=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_DELETE_ROLE = \"DELETE FROM role WHERE domain_id=? AND name=?;\"", "var_name": "SQL_DELETE_ROLE"}, {"original_string": "private static final String SQL_UPDATE_ROLE_MOD_TIMESTAMP = \"UPDATE role \"\n            + \"SET modified=CURRENT_TIMESTAMP(3) WHERE role_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_UPDATE_ROLE_MOD_TIMESTAMP = \"UPDATE role \"\n            + \"SET modified=CURRENT_TIMESTAMP(3) WHERE role_id=?;\"", "var_name": "SQL_UPDATE_ROLE_MOD_TIMESTAMP"}, {"original_string": "private static final String SQL_LIST_ROLE = \"SELECT name FROM role WHERE domain_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_ROLE = \"SELECT name FROM role WHERE domain_id=?;\"", "var_name": "SQL_LIST_ROLE"}, {"original_string": "private static final String SQL_COUNT_ROLE = \"SELECT COUNT(*) FROM role WHERE domain_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_COUNT_ROLE = \"SELECT COUNT(*) FROM role WHERE domain_id=?;\"", "var_name": "SQL_COUNT_ROLE"}, {"original_string": "private static final String SQL_GET_ROLE_MEMBER = \"SELECT principal.principal_id, role_member.expiration, \"\n            + \"role_member.review_reminder, role_member.req_principal, role_member.system_disabled FROM principal \"\n            + \"JOIN role_member ON role_member.principal_id=principal.principal_id \"\n            + \"JOIN role ON role.role_id=role_member.role_id \"\n            + \"WHERE role.role_id=? AND principal.name=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_ROLE_MEMBER = \"SELECT principal.principal_id, role_member.expiration, \"\n            + \"role_member.review_reminder, role_member.req_principal, role_member.system_disabled FROM principal \"\n            + \"JOIN role_member ON role_member.principal_id=principal.principal_id \"\n            + \"JOIN role ON role.role_id=role_member.role_id \"\n            + \"WHERE role.role_id=? AND principal.name=?;\"", "var_name": "SQL_GET_ROLE_MEMBER"}, {"original_string": "private static final String SQL_GET_TEMP_ROLE_MEMBER = \"SELECT principal.principal_id, role_member.expiration, \"\n            + \"role_member.review_reminder, role_member.req_principal, role_member.system_disabled FROM principal \"\n            + \"JOIN role_member ON role_member.principal_id=principal.principal_id \"\n            + \"JOIN role ON role.role_id=role_member.role_id \"\n            + \"WHERE role.role_id=? AND principal.name=? AND role_member.expiration=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_TEMP_ROLE_MEMBER = \"SELECT principal.principal_id, role_member.expiration, \"\n            + \"role_member.review_reminder, role_member.req_principal, role_member.system_disabled FROM principal \"\n            + \"JOIN role_member ON role_member.principal_id=principal.principal_id \"\n            + \"JOIN role ON role.role_id=role_member.role_id \"\n            + \"WHERE role.role_id=? AND principal.name=? AND role_member.expiration=?;\"", "var_name": "SQL_GET_TEMP_ROLE_MEMBER"}, {"original_string": "private static final String SQL_GET_PENDING_ROLE_MEMBER = \"SELECT principal.principal_id, pending_role_member.expiration, pending_role_member.review_reminder, pending_role_member.req_principal FROM principal \"\n            + \"JOIN pending_role_member ON pending_role_member.principal_id=principal.principal_id \"\n            + \"JOIN role ON role.role_id=pending_role_member.role_id \"\n            + \"WHERE role.role_id=? AND principal.name=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_PENDING_ROLE_MEMBER = \"SELECT principal.principal_id, pending_role_member.expiration, pending_role_member.review_reminder, pending_role_member.req_principal FROM principal \"\n            + \"JOIN pending_role_member ON pending_role_member.principal_id=principal.principal_id \"\n            + \"JOIN role ON role.role_id=pending_role_member.role_id \"\n            + \"WHERE role.role_id=? AND principal.name=?;\"", "var_name": "SQL_GET_PENDING_ROLE_MEMBER"}, {"original_string": "private static final String SQL_GET_TEMP_PENDING_ROLE_MEMBER = \"SELECT principal.principal_id, pending_role_member.expiration, pending_role_member.review_reminder, pending_role_member.req_principal FROM principal \"\n            + \"JOIN pending_role_member ON pending_role_member.principal_id=principal.principal_id \"\n            + \"JOIN role ON role.role_id=pending_role_member.role_id \"\n            + \"WHERE role.role_id=? AND principal.name=? AND pending_role_member.expiration=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_TEMP_PENDING_ROLE_MEMBER = \"SELECT principal.principal_id, pending_role_member.expiration, pending_role_member.review_reminder, pending_role_member.req_principal FROM principal \"\n            + \"JOIN pending_role_member ON pending_role_member.principal_id=principal.principal_id \"\n            + \"JOIN role ON role.role_id=pending_role_member.role_id \"\n            + \"WHERE role.role_id=? AND principal.name=? AND pending_role_member.expiration=?;\"", "var_name": "SQL_GET_TEMP_PENDING_ROLE_MEMBER"}, {"original_string": "private static final String SQL_STD_ROLE_MEMBER_EXISTS = \"SELECT principal_id FROM role_member WHERE role_id=? AND principal_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_STD_ROLE_MEMBER_EXISTS = \"SELECT principal_id FROM role_member WHERE role_id=? AND principal_id=?;\"", "var_name": "SQL_STD_ROLE_MEMBER_EXISTS"}, {"original_string": "private static final String SQL_PENDING_ROLE_MEMBER_EXISTS = \"SELECT principal_id FROM pending_role_member WHERE role_id=? AND principal_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_PENDING_ROLE_MEMBER_EXISTS = \"SELECT principal_id FROM pending_role_member WHERE role_id=? AND principal_id=?;\"", "var_name": "SQL_PENDING_ROLE_MEMBER_EXISTS"}, {"original_string": "private static final String SQL_LIST_ROLE_MEMBERS = \"SELECT principal.name, role_member.expiration, \"\n            + \"role_member.review_reminder, role_member.active, role_member.audit_ref, role_member.system_disabled FROM principal \"\n            + \"JOIN role_member ON role_member.principal_id=principal.principal_id \"\n            + \"JOIN role ON role.role_id=role_member.role_id WHERE role.role_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_ROLE_MEMBERS = \"SELECT principal.name, role_member.expiration, \"\n            + \"role_member.review_reminder, role_member.active, role_member.audit_ref, role_member.system_disabled FROM principal \"\n            + \"JOIN role_member ON role_member.principal_id=principal.principal_id \"\n            + \"JOIN role ON role.role_id=role_member.role_id WHERE role.role_id=?;\"", "var_name": "SQL_LIST_ROLE_MEMBERS"}, {"original_string": "private static final String SQL_LIST_PENDING_ROLE_MEMBERS = \"SELECT principal.name, pending_role_member.expiration, pending_role_member.review_reminder, pending_role_member.req_time, pending_role_member.audit_ref FROM principal \"\n            + \"JOIN pending_role_member ON pending_role_member.principal_id=principal.principal_id \"\n            + \"JOIN role ON role.role_id=pending_role_member.role_id WHERE role.role_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_PENDING_ROLE_MEMBERS = \"SELECT principal.name, pending_role_member.expiration, pending_role_member.review_reminder, pending_role_member.req_time, pending_role_member.audit_ref FROM principal \"\n            + \"JOIN pending_role_member ON pending_role_member.principal_id=principal.principal_id \"\n            + \"JOIN role ON role.role_id=pending_role_member.role_id WHERE role.role_id=?;\"", "var_name": "SQL_LIST_PENDING_ROLE_MEMBERS"}, {"original_string": "private static final String SQL_COUNT_ROLE_MEMBERS = \"SELECT COUNT(*) FROM role_member WHERE role_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_COUNT_ROLE_MEMBERS = \"SELECT COUNT(*) FROM role_member WHERE role_id=?;\"", "var_name": "SQL_COUNT_ROLE_MEMBERS"}, {"original_string": "private static final String SQL_GET_PRINCIPAL_ID = \"SELECT principal_id FROM principal WHERE name=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_PRINCIPAL_ID = \"SELECT principal_id FROM principal WHERE name=?;\"", "var_name": "SQL_GET_PRINCIPAL_ID"}, {"original_string": "private static final String SQL_INSERT_PRINCIPAL = \"INSERT INTO principal (name) VALUES (?);\";", "modifier": "private static final", "type": "String", "declarator": "SQL_INSERT_PRINCIPAL = \"INSERT INTO principal (name) VALUES (?);\"", "var_name": "SQL_INSERT_PRINCIPAL"}, {"original_string": "private static final String SQL_DELETE_PRINCIPAL = \"DELETE FROM principal WHERE name=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_DELETE_PRINCIPAL = \"DELETE FROM principal WHERE name=?;\"", "var_name": "SQL_DELETE_PRINCIPAL"}, {"original_string": "private static final String SQL_DELETE_SUB_PRINCIPALS = \"DELETE FROM principal WHERE name LIKE ?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_DELETE_SUB_PRINCIPALS = \"DELETE FROM principal WHERE name LIKE ?;\"", "var_name": "SQL_DELETE_SUB_PRINCIPALS"}, {"original_string": "private static final String SQL_LIST_PRINCIPAL = \"SELECT * FROM principal;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_PRINCIPAL = \"SELECT * FROM principal;\"", "var_name": "SQL_LIST_PRINCIPAL"}, {"original_string": "private static final String SQL_LIST_PRINCIPAL_DOMAIN = \"SELECT * FROM principal WHERE name LIKE ?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_PRINCIPAL_DOMAIN = \"SELECT * FROM principal WHERE name LIKE ?;\"", "var_name": "SQL_LIST_PRINCIPAL_DOMAIN"}, {"original_string": "private static final String SQL_LAST_INSERT_ID = \"SELECT LAST_INSERT_ID();\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LAST_INSERT_ID = \"SELECT LAST_INSERT_ID();\"", "var_name": "SQL_LAST_INSERT_ID"}, {"original_string": "private static final String SQL_INSERT_ROLE_MEMBER = \"INSERT INTO role_member \"\n            + \"(role_id, principal_id, expiration, review_reminder, active, audit_ref, req_principal) VALUES (?,?,?,?,?,?,?);\";", "modifier": "private static final", "type": "String", "declarator": "SQL_INSERT_ROLE_MEMBER = \"INSERT INTO role_member \"\n            + \"(role_id, principal_id, expiration, review_reminder, active, audit_ref, req_principal) VALUES (?,?,?,?,?,?,?);\"", "var_name": "SQL_INSERT_ROLE_MEMBER"}, {"original_string": "private static final String SQL_INSERT_PENDING_ROLE_MEMBER = \"INSERT INTO pending_role_member \"\n            + \"(role_id, principal_id, expiration, review_reminder, audit_ref, req_principal) VALUES (?,?,?,?,?,?);\";", "modifier": "private static final", "type": "String", "declarator": "SQL_INSERT_PENDING_ROLE_MEMBER = \"INSERT INTO pending_role_member \"\n            + \"(role_id, principal_id, expiration, review_reminder, audit_ref, req_principal) VALUES (?,?,?,?,?,?);\"", "var_name": "SQL_INSERT_PENDING_ROLE_MEMBER"}, {"original_string": "private static final String SQL_DELETE_ROLE_MEMBER = \"DELETE FROM role_member WHERE role_id=? AND principal_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_DELETE_ROLE_MEMBER = \"DELETE FROM role_member WHERE role_id=? AND principal_id=?;\"", "var_name": "SQL_DELETE_ROLE_MEMBER"}, {"original_string": "private static final String SQL_DELETE_PENDING_ROLE_MEMBER = \"DELETE FROM pending_role_member WHERE role_id=? AND principal_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_DELETE_PENDING_ROLE_MEMBER = \"DELETE FROM pending_role_member WHERE role_id=? AND principal_id=?;\"", "var_name": "SQL_DELETE_PENDING_ROLE_MEMBER"}, {"original_string": "private static final String SQL_UPDATE_ROLE_MEMBER = \"UPDATE role_member \"\n            + \"SET expiration=?, review_reminder=?, active=?, audit_ref=?, req_principal=? WHERE role_id=? AND principal_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_UPDATE_ROLE_MEMBER = \"UPDATE role_member \"\n            + \"SET expiration=?, review_reminder=?, active=?, audit_ref=?, req_principal=? WHERE role_id=? AND principal_id=?;\"", "var_name": "SQL_UPDATE_ROLE_MEMBER"}, {"original_string": "private static final String SQL_UPDATE_ROLE_MEMBER_DISABLED_STATE = \"UPDATE role_member \"\n            + \"SET system_disabled=?, audit_ref=?, req_principal=? WHERE role_id=? AND principal_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_UPDATE_ROLE_MEMBER_DISABLED_STATE = \"UPDATE role_member \"\n            + \"SET system_disabled=?, audit_ref=?, req_principal=? WHERE role_id=? AND principal_id=?;\"", "var_name": "SQL_UPDATE_ROLE_MEMBER_DISABLED_STATE"}, {"original_string": "private static final String SQL_UPDATE_PENDING_ROLE_MEMBER = \"UPDATE pending_role_member \"\n            + \"SET expiration=?, review_reminder=?, audit_ref=?, req_time=CURRENT_TIMESTAMP(3), req_principal=? WHERE role_id=? AND principal_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_UPDATE_PENDING_ROLE_MEMBER = \"UPDATE pending_role_member \"\n            + \"SET expiration=?, review_reminder=?, audit_ref=?, req_time=CURRENT_TIMESTAMP(3), req_principal=? WHERE role_id=? AND principal_id=?;\"", "var_name": "SQL_UPDATE_PENDING_ROLE_MEMBER"}, {"original_string": "private static final String SQL_INSERT_ROLE_AUDIT_LOG = \"INSERT INTO role_audit_log \"\n            + \"(role_id, admin, member, action, audit_ref) VALUES (?,?,?,?,?);\";", "modifier": "private static final", "type": "String", "declarator": "SQL_INSERT_ROLE_AUDIT_LOG = \"INSERT INTO role_audit_log \"\n            + \"(role_id, admin, member, action, audit_ref) VALUES (?,?,?,?,?);\"", "var_name": "SQL_INSERT_ROLE_AUDIT_LOG"}, {"original_string": "private static final String SQL_LIST_ROLE_AUDIT_LOGS = \"SELECT * FROM role_audit_log WHERE role_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_ROLE_AUDIT_LOGS = \"SELECT * FROM role_audit_log WHERE role_id=?;\"", "var_name": "SQL_LIST_ROLE_AUDIT_LOGS"}, {"original_string": "private static final String SQL_GET_POLICY = \"SELECT * FROM policy \"\n            + \"JOIN domain ON domain.domain_id=policy.domain_id WHERE domain.name=? AND policy.name=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_POLICY = \"SELECT * FROM policy \"\n            + \"JOIN domain ON domain.domain_id=policy.domain_id WHERE domain.name=? AND policy.name=?;\"", "var_name": "SQL_GET_POLICY"}, {"original_string": "private static final String SQL_INSERT_POLICY = \"INSERT INTO policy (name, domain_id) VALUES (?,?);\";", "modifier": "private static final", "type": "String", "declarator": "SQL_INSERT_POLICY = \"INSERT INTO policy (name, domain_id) VALUES (?,?);\"", "var_name": "SQL_INSERT_POLICY"}, {"original_string": "private static final String SQL_UPDATE_POLICY = \"UPDATE policy SET name=? WHERE policy_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_UPDATE_POLICY = \"UPDATE policy SET name=? WHERE policy_id=?;\"", "var_name": "SQL_UPDATE_POLICY"}, {"original_string": "private static final String SQL_UPDATE_POLICY_MOD_TIMESTAMP = \"UPDATE policy \"\n            + \"SET modified=CURRENT_TIMESTAMP(3) WHERE policy_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_UPDATE_POLICY_MOD_TIMESTAMP = \"UPDATE policy \"\n            + \"SET modified=CURRENT_TIMESTAMP(3) WHERE policy_id=?;\"", "var_name": "SQL_UPDATE_POLICY_MOD_TIMESTAMP"}, {"original_string": "private static final String SQL_GET_POLICY_ID = \"SELECT policy_id FROM policy WHERE domain_id=? AND name=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_POLICY_ID = \"SELECT policy_id FROM policy WHERE domain_id=? AND name=?;\"", "var_name": "SQL_GET_POLICY_ID"}, {"original_string": "private static final String SQL_DELETE_POLICY = \"DELETE FROM policy WHERE domain_id=? AND name=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_DELETE_POLICY = \"DELETE FROM policy WHERE domain_id=? AND name=?;\"", "var_name": "SQL_DELETE_POLICY"}, {"original_string": "private static final String SQL_LIST_POLICY = \"SELECT name FROM policy WHERE domain_id=?\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_POLICY = \"SELECT name FROM policy WHERE domain_id=?\"", "var_name": "SQL_LIST_POLICY"}, {"original_string": "private static final String SQL_COUNT_POLICY = \"SELECT COUNT(*) FROM policy WHERE domain_id=?\";", "modifier": "private static final", "type": "String", "declarator": "SQL_COUNT_POLICY = \"SELECT COUNT(*) FROM policy WHERE domain_id=?\"", "var_name": "SQL_COUNT_POLICY"}, {"original_string": "private static final String SQL_LIST_ASSERTION = \"SELECT * FROM assertion WHERE policy_id=?\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_ASSERTION = \"SELECT * FROM assertion WHERE policy_id=?\"", "var_name": "SQL_LIST_ASSERTION"}, {"original_string": "private static final String SQL_COUNT_ASSERTION = \"SELECT COUNT(*) FROM assertion WHERE policy_id=?\";", "modifier": "private static final", "type": "String", "declarator": "SQL_COUNT_ASSERTION = \"SELECT COUNT(*) FROM assertion WHERE policy_id=?\"", "var_name": "SQL_COUNT_ASSERTION"}, {"original_string": "private static final String SQL_GET_ASSERTION = \"SELECT * FROM assertion \"\n            + \"JOIN policy ON assertion.policy_id=policy.policy_id \"\n            + \"JOIN domain ON policy.domain_id=domain.domain_id \"\n            + \"WHERE assertion.assertion_id=? AND domain.name=? AND policy.name=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_ASSERTION = \"SELECT * FROM assertion \"\n            + \"JOIN policy ON assertion.policy_id=policy.policy_id \"\n            + \"JOIN domain ON policy.domain_id=domain.domain_id \"\n            + \"WHERE assertion.assertion_id=? AND domain.name=? AND policy.name=?;\"", "var_name": "SQL_GET_ASSERTION"}, {"original_string": "private static final String SQL_CHECK_ASSERTION = \"SELECT assertion_id FROM assertion \"\n            + \"WHERE policy_id=? AND role=? AND resource=? AND action=? AND effect=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_CHECK_ASSERTION = \"SELECT assertion_id FROM assertion \"\n            + \"WHERE policy_id=? AND role=? AND resource=? AND action=? AND effect=?;\"", "var_name": "SQL_CHECK_ASSERTION"}, {"original_string": "private static final String SQL_INSERT_ASSERTION = \"INSERT INTO assertion \"\n            + \"(policy_id, role, resource, action, effect) VALUES (?,?,?,?,?);\";", "modifier": "private static final", "type": "String", "declarator": "SQL_INSERT_ASSERTION = \"INSERT INTO assertion \"\n            + \"(policy_id, role, resource, action, effect) VALUES (?,?,?,?,?);\"", "var_name": "SQL_INSERT_ASSERTION"}, {"original_string": "private static final String SQL_DELETE_ASSERTION = \"DELETE FROM assertion \"\n            + \"WHERE policy_id=? AND assertion_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_DELETE_ASSERTION = \"DELETE FROM assertion \"\n            + \"WHERE policy_id=? AND assertion_id=?;\"", "var_name": "SQL_DELETE_ASSERTION"}, {"original_string": "private static final String SQL_GET_SERVICE = \"SELECT * FROM service \"\n            + \"JOIN domain ON domain.domain_id=service.domain_id WHERE domain.name=? AND service.name=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_SERVICE = \"SELECT * FROM service \"\n            + \"JOIN domain ON domain.domain_id=service.domain_id WHERE domain.name=? AND service.name=?;\"", "var_name": "SQL_GET_SERVICE"}, {"original_string": "private static final String SQL_INSERT_SERVICE = \"INSERT INTO service \"\n            + \"(name, description, provider_endpoint, executable, svc_user, svc_group, domain_id) VALUES (?,?,?,?,?,?,?);\";", "modifier": "private static final", "type": "String", "declarator": "SQL_INSERT_SERVICE = \"INSERT INTO service \"\n            + \"(name, description, provider_endpoint, executable, svc_user, svc_group, domain_id) VALUES (?,?,?,?,?,?,?);\"", "var_name": "SQL_INSERT_SERVICE"}, {"original_string": "private static final String SQL_UPDATE_SERVICE = \"UPDATE service SET \"\n            + \"description=?, provider_endpoint=?, executable=?, svc_user=?, svc_group=?  WHERE service_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_UPDATE_SERVICE = \"UPDATE service SET \"\n            + \"description=?, provider_endpoint=?, executable=?, svc_user=?, svc_group=?  WHERE service_id=?;\"", "var_name": "SQL_UPDATE_SERVICE"}, {"original_string": "private static final String SQL_UPDATE_SERVICE_MOD_TIMESTAMP = \"UPDATE service \"\n            + \"SET modified=CURRENT_TIMESTAMP(3) WHERE service_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_UPDATE_SERVICE_MOD_TIMESTAMP = \"UPDATE service \"\n            + \"SET modified=CURRENT_TIMESTAMP(3) WHERE service_id=?;\"", "var_name": "SQL_UPDATE_SERVICE_MOD_TIMESTAMP"}, {"original_string": "private static final String SQL_DELETE_SERVICE = \"DELETE FROM service WHERE domain_id=? AND name=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_DELETE_SERVICE = \"DELETE FROM service WHERE domain_id=? AND name=?;\"", "var_name": "SQL_DELETE_SERVICE"}, {"original_string": "private static final String SQL_GET_SERVICE_ID = \"SELECT service_id FROM service WHERE domain_id=? AND name=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_SERVICE_ID = \"SELECT service_id FROM service WHERE domain_id=? AND name=?;\"", "var_name": "SQL_GET_SERVICE_ID"}, {"original_string": "private static final String SQL_LIST_SERVICE = \"SELECT name FROM service WHERE domain_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_SERVICE = \"SELECT name FROM service WHERE domain_id=?;\"", "var_name": "SQL_LIST_SERVICE"}, {"original_string": "private static final String SQL_COUNT_SERVICE = \"SELECT COUNT(*) FROM service WHERE domain_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_COUNT_SERVICE = \"SELECT COUNT(*) FROM service WHERE domain_id=?;\"", "var_name": "SQL_COUNT_SERVICE"}, {"original_string": "private static final String SQL_LIST_PUBLIC_KEY = \"SELECT * FROM public_key WHERE service_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_PUBLIC_KEY = \"SELECT * FROM public_key WHERE service_id=?;\"", "var_name": "SQL_LIST_PUBLIC_KEY"}, {"original_string": "private static final String SQL_COUNT_PUBLIC_KEY = \"SELECT COUNT(*) FROM public_key WHERE service_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_COUNT_PUBLIC_KEY = \"SELECT COUNT(*) FROM public_key WHERE service_id=?;\"", "var_name": "SQL_COUNT_PUBLIC_KEY"}, {"original_string": "private static final String SQL_GET_PUBLIC_KEY = \"SELECT key_value FROM public_key WHERE service_id=? AND key_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_PUBLIC_KEY = \"SELECT key_value FROM public_key WHERE service_id=? AND key_id=?;\"", "var_name": "SQL_GET_PUBLIC_KEY"}, {"original_string": "private static final String SQL_INSERT_PUBLIC_KEY = \"INSERT INTO public_key \"\n            + \"(service_id, key_id, key_value) VALUES (?,?,?);\";", "modifier": "private static final", "type": "String", "declarator": "SQL_INSERT_PUBLIC_KEY = \"INSERT INTO public_key \"\n            + \"(service_id, key_id, key_value) VALUES (?,?,?);\"", "var_name": "SQL_INSERT_PUBLIC_KEY"}, {"original_string": "private static final String SQL_UPDATE_PUBLIC_KEY = \"UPDATE public_key SET key_value=? WHERE service_id=? AND key_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_UPDATE_PUBLIC_KEY = \"UPDATE public_key SET key_value=? WHERE service_id=? AND key_id=?;\"", "var_name": "SQL_UPDATE_PUBLIC_KEY"}, {"original_string": "private static final String SQL_DELETE_PUBLIC_KEY = \"DELETE FROM public_key WHERE service_id=? AND key_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_DELETE_PUBLIC_KEY = \"DELETE FROM public_key WHERE service_id=? AND key_id=?;\"", "var_name": "SQL_DELETE_PUBLIC_KEY"}, {"original_string": "private static final String SQL_LIST_SERVICE_HOST = \"SELECT host.name FROM host \"\n            + \"JOIN service_host ON service_host.host_id=host.host_id \"\n            + \"WHERE service_host.service_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_SERVICE_HOST = \"SELECT host.name FROM host \"\n            + \"JOIN service_host ON service_host.host_id=host.host_id \"\n            + \"WHERE service_host.service_id=?;\"", "var_name": "SQL_LIST_SERVICE_HOST"}, {"original_string": "private static final String SQL_INSERT_SERVICE_HOST = \"INSERT INTO service_host (service_id, host_id) VALUES (?,?);\";", "modifier": "private static final", "type": "String", "declarator": "SQL_INSERT_SERVICE_HOST = \"INSERT INTO service_host (service_id, host_id) VALUES (?,?);\"", "var_name": "SQL_INSERT_SERVICE_HOST"}, {"original_string": "private static final String SQL_DELETE_SERVICE_HOST = \"DELETE FROM service_host WHERE service_id=? AND host_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_DELETE_SERVICE_HOST = \"DELETE FROM service_host WHERE service_id=? AND host_id=?;\"", "var_name": "SQL_DELETE_SERVICE_HOST"}, {"original_string": "private static final String SQL_GET_HOST_ID = \"SELECT host_id FROM host WHERE name=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_HOST_ID = \"SELECT host_id FROM host WHERE name=?;\"", "var_name": "SQL_GET_HOST_ID"}, {"original_string": "private static final String SQL_INSERT_HOST = \"INSERT INTO host (name) VALUES (?);\";", "modifier": "private static final", "type": "String", "declarator": "SQL_INSERT_HOST = \"INSERT INTO host (name) VALUES (?);\"", "var_name": "SQL_INSERT_HOST"}, {"original_string": "private static final String SQL_INSERT_ENTITY = \"INSERT INTO entity (domain_id, name, value) VALUES (?,?,?);\";", "modifier": "private static final", "type": "String", "declarator": "SQL_INSERT_ENTITY = \"INSERT INTO entity (domain_id, name, value) VALUES (?,?,?);\"", "var_name": "SQL_INSERT_ENTITY"}, {"original_string": "private static final String SQL_UPDATE_ENTITY = \"UPDATE entity SET value=? WHERE domain_id=? AND name=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_UPDATE_ENTITY = \"UPDATE entity SET value=? WHERE domain_id=? AND name=?;\"", "var_name": "SQL_UPDATE_ENTITY"}, {"original_string": "private static final String SQL_DELETE_ENTITY = \"DELETE FROM entity WHERE domain_id=? AND name=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_DELETE_ENTITY = \"DELETE FROM entity WHERE domain_id=? AND name=?;\"", "var_name": "SQL_DELETE_ENTITY"}, {"original_string": "private static final String SQL_GET_ENTITY = \"SELECT value FROM entity WHERE domain_id=? AND name=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_ENTITY = \"SELECT value FROM entity WHERE domain_id=? AND name=?;\"", "var_name": "SQL_GET_ENTITY"}, {"original_string": "private static final String SQL_LIST_ENTITY = \"SELECT name FROM entity WHERE domain_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_ENTITY = \"SELECT name FROM entity WHERE domain_id=?;\"", "var_name": "SQL_LIST_ENTITY"}, {"original_string": "private static final String SQL_COUNT_ENTITY = \"SELECT COUNT(*) FROM entity WHERE domain_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_COUNT_ENTITY = \"SELECT COUNT(*) FROM entity WHERE domain_id=?;\"", "var_name": "SQL_COUNT_ENTITY"}, {"original_string": "private static final String SQL_INSERT_DOMAIN_TEMPLATE = \"INSERT INTO domain_template (domain_id, template) VALUES (?,?);\";", "modifier": "private static final", "type": "String", "declarator": "SQL_INSERT_DOMAIN_TEMPLATE = \"INSERT INTO domain_template (domain_id, template) VALUES (?,?);\"", "var_name": "SQL_INSERT_DOMAIN_TEMPLATE"}, {"original_string": "private static final String SQL_UPDATE_DOMAIN_TEMPLATE = \"UPDATE domain_template SET current_version=? WHERE domain_id=? and template=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_UPDATE_DOMAIN_TEMPLATE = \"UPDATE domain_template SET current_version=? WHERE domain_id=? and template=?;\"", "var_name": "SQL_UPDATE_DOMAIN_TEMPLATE"}, {"original_string": "private static final String SQL_DELETE_DOMAIN_TEMPLATE = \"DELETE FROM domain_template WHERE domain_id=? AND template=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_DELETE_DOMAIN_TEMPLATE = \"DELETE FROM domain_template WHERE domain_id=? AND template=?;\"", "var_name": "SQL_DELETE_DOMAIN_TEMPLATE"}, {"original_string": "private static final String SQL_LIST_DOMAIN_TEMPLATES = \"SELECT * FROM domain_template WHERE domain_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_DOMAIN_TEMPLATES = \"SELECT * FROM domain_template WHERE domain_id=?;\"", "var_name": "SQL_LIST_DOMAIN_TEMPLATES"}, {"original_string": "private static final String SQL_LIST_DOMAIN_TEMPLATE = \"SELECT template FROM domain_template \"\n            + \"JOIN domain ON domain_template.domain_id=domain.domain_id \"\n            + \"WHERE domain.name=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_DOMAIN_TEMPLATE = \"SELECT template FROM domain_template \"\n            + \"JOIN domain ON domain_template.domain_id=domain.domain_id \"\n            + \"WHERE domain.name=?;\"", "var_name": "SQL_LIST_DOMAIN_TEMPLATE"}, {"original_string": "private static final String SQL_GET_DOMAIN_ROLES = \"SELECT * FROM role WHERE domain_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_DOMAIN_ROLES = \"SELECT * FROM role WHERE domain_id=?;\"", "var_name": "SQL_GET_DOMAIN_ROLES"}, {"original_string": "private static final String SQL_GET_DOMAIN_ROLE_MEMBERS = \"SELECT role.name, principal.name, role_member.expiration, \"\n            + \"role_member.review_reminder, role_member.system_disabled FROM principal \"\n            + \"JOIN role_member ON role_member.principal_id=principal.principal_id \"\n            + \"JOIN role ON role.role_id=role_member.role_id \"\n            + \"WHERE role.domain_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_DOMAIN_ROLE_MEMBERS = \"SELECT role.name, principal.name, role_member.expiration, \"\n            + \"role_member.review_reminder, role_member.system_disabled FROM principal \"\n            + \"JOIN role_member ON role_member.principal_id=principal.principal_id \"\n            + \"JOIN role ON role.role_id=role_member.role_id \"\n            + \"WHERE role.domain_id=?;\"", "var_name": "SQL_GET_DOMAIN_ROLE_MEMBERS"}, {"original_string": "private static final String SQL_GET_PRINCIPAL_ROLES = \"SELECT role.name, domain.name, role_member.expiration, \"\n            + \"role_member.review_reminder, role_member.system_disabled FROM role_member \"\n            + \"JOIN role ON role.role_id=role_member.role_id \"\n            + \"JOIN domain ON domain.domain_id=role.domain_id \"\n            + \"WHERE role_member.principal_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_PRINCIPAL_ROLES = \"SELECT role.name, domain.name, role_member.expiration, \"\n            + \"role_member.review_reminder, role_member.system_disabled FROM role_member \"\n            + \"JOIN role ON role.role_id=role_member.role_id \"\n            + \"JOIN domain ON domain.domain_id=role.domain_id \"\n            + \"WHERE role_member.principal_id=?;\"", "var_name": "SQL_GET_PRINCIPAL_ROLES"}, {"original_string": "private static final String SQL_GET_PRINCIPAL_ROLES_DOMAIN = \"SELECT role.name, domain.name, role_member.expiration, \"\n            + \"role_member.review_reminder, role_member.system_disabled FROM role_member \"\n            + \"JOIN role ON role.role_id=role_member.role_id \"\n            + \"JOIN domain ON domain.domain_id=role.domain_id \"\n            + \"WHERE role_member.principal_id=? AND domain.domain_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_PRINCIPAL_ROLES_DOMAIN = \"SELECT role.name, domain.name, role_member.expiration, \"\n            + \"role_member.review_reminder, role_member.system_disabled FROM role_member \"\n            + \"JOIN role ON role.role_id=role_member.role_id \"\n            + \"JOIN domain ON domain.domain_id=role.domain_id \"\n            + \"WHERE role_member.principal_id=? AND domain.domain_id=?;\"", "var_name": "SQL_GET_PRINCIPAL_ROLES_DOMAIN"}, {"original_string": "private static final String SQL_GET_REVIEW_OVERDUE_DOMAIN_ROLE_MEMBERS = \"SELECT role.name, principal.name, role_member.expiration, \"\n            + \"role_member.review_reminder, role_member.system_disabled FROM principal \"\n            + \"JOIN role_member ON role_member.principal_id=principal.principal_id \"\n            + \"JOIN role ON role.role_id=role_member.role_id \"\n            + \"WHERE role.domain_id=? AND role_member.review_reminder < CURRENT_TIME;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_REVIEW_OVERDUE_DOMAIN_ROLE_MEMBERS = \"SELECT role.name, principal.name, role_member.expiration, \"\n            + \"role_member.review_reminder, role_member.system_disabled FROM principal \"\n            + \"JOIN role_member ON role_member.principal_id=principal.principal_id \"\n            + \"JOIN role ON role.role_id=role_member.role_id \"\n            + \"WHERE role.domain_id=? AND role_member.review_reminder < CURRENT_TIME;\"", "var_name": "SQL_GET_REVIEW_OVERDUE_DOMAIN_ROLE_MEMBERS"}, {"original_string": "private static final String SQL_GET_DOMAIN_POLICIES = \"SELECT * FROM policy WHERE domain_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_DOMAIN_POLICIES = \"SELECT * FROM policy WHERE domain_id=?;\"", "var_name": "SQL_GET_DOMAIN_POLICIES"}, {"original_string": "private static final String SQL_GET_DOMAIN_POLICY_ASSERTIONS = \"SELECT policy.name, \"\n            + \"assertion.effect, assertion.action, assertion.role, assertion.resource, \"\n            + \"assertion.assertion_id FROM assertion \"\n            + \"JOIN policy ON policy.policy_id=assertion.policy_id \"\n            + \"WHERE policy.domain_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_DOMAIN_POLICY_ASSERTIONS = \"SELECT policy.name, \"\n            + \"assertion.effect, assertion.action, assertion.role, assertion.resource, \"\n            + \"assertion.assertion_id FROM assertion \"\n            + \"JOIN policy ON policy.policy_id=assertion.policy_id \"\n            + \"WHERE policy.domain_id=?;\"", "var_name": "SQL_GET_DOMAIN_POLICY_ASSERTIONS"}, {"original_string": "private static final String SQL_GET_DOMAIN_SERVICES = \"SELECT * FROM service WHERE domain_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_DOMAIN_SERVICES = \"SELECT * FROM service WHERE domain_id=?;\"", "var_name": "SQL_GET_DOMAIN_SERVICES"}, {"original_string": "private static final String SQL_GET_DOMAIN_SERVICES_HOSTS = \"SELECT service.name, host.name FROM host \"\n            + \"JOIN service_host ON host.host_id=service_host.host_id \"\n            + \"JOIN service ON service.service_id=service_host.service_id \"\n            + \"WHERE service.domain_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_DOMAIN_SERVICES_HOSTS = \"SELECT service.name, host.name FROM host \"\n            + \"JOIN service_host ON host.host_id=service_host.host_id \"\n            + \"JOIN service ON service.service_id=service_host.service_id \"\n            + \"WHERE service.domain_id=?;\"", "var_name": "SQL_GET_DOMAIN_SERVICES_HOSTS"}, {"original_string": "private static final String SQL_GET_DOMAIN_SERVICES_PUBLIC_KEYS = \"SELECT service.name, \"\n            + \"public_key.key_id, public_key.key_value FROM public_key \"\n            + \"JOIN service ON service.service_id=public_key.service_id \"\n            + \"WHERE service.domain_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_DOMAIN_SERVICES_PUBLIC_KEYS = \"SELECT service.name, \"\n            + \"public_key.key_id, public_key.key_value FROM public_key \"\n            + \"JOIN service ON service.service_id=public_key.service_id \"\n            + \"WHERE service.domain_id=?;\"", "var_name": "SQL_GET_DOMAIN_SERVICES_PUBLIC_KEYS"}, {"original_string": "private static final String SQL_LIST_POLICY_REFERENCING_ROLE = \"SELECT name FROM policy \"\n            + \"JOIN assertion ON policy.policy_id=assertion.policy_id \"\n            + \"WHERE policy.domain_id=? AND assertion.role=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_POLICY_REFERENCING_ROLE = \"SELECT name FROM policy \"\n            + \"JOIN assertion ON policy.policy_id=assertion.policy_id \"\n            + \"WHERE policy.domain_id=? AND assertion.role=?;\"", "var_name": "SQL_LIST_POLICY_REFERENCING_ROLE"}, {"original_string": "private static final String SQL_LIST_ROLE_ASSERTIONS = \"SELECT assertion.role, assertion.resource, \"\n            + \"assertion.action, assertion.effect, assertion.assertion_id, policy.domain_id, domain.name FROM assertion \"\n            + \"JOIN policy ON assertion.policy_id=policy.policy_id \"\n            + \"JOIN domain ON policy.domain_id=domain.domain_id\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_ROLE_ASSERTIONS = \"SELECT assertion.role, assertion.resource, \"\n            + \"assertion.action, assertion.effect, assertion.assertion_id, policy.domain_id, domain.name FROM assertion \"\n            + \"JOIN policy ON assertion.policy_id=policy.policy_id \"\n            + \"JOIN domain ON policy.domain_id=domain.domain_id\"", "var_name": "SQL_LIST_ROLE_ASSERTIONS"}, {"original_string": "private static final String SQL_LIST_ROLE_ASSERTION_QUERY_ACTION = \" WHERE assertion.action=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_ROLE_ASSERTION_QUERY_ACTION = \" WHERE assertion.action=?;\"", "var_name": "SQL_LIST_ROLE_ASSERTION_QUERY_ACTION"}, {"original_string": "private static final String SQL_LIST_ROLE_ASSERTION_NO_ACTION = \" WHERE assertion.action!='assume_role';\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_ROLE_ASSERTION_NO_ACTION = \" WHERE assertion.action!='assume_role';\"", "var_name": "SQL_LIST_ROLE_ASSERTION_NO_ACTION"}, {"original_string": "private static final String SQL_LIST_ROLE_PRINCIPALS = \"SELECT principal.name, role_member.expiration, role_member.review_reminder, role.domain_id, \"\n            + \"role.name AS role_name FROM principal \"\n            + \"JOIN role_member ON principal.principal_id=role_member.principal_id \"\n            + \"JOIN role ON role_member.role_id=role.role_id\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_ROLE_PRINCIPALS = \"SELECT principal.name, role_member.expiration, role_member.review_reminder, role.domain_id, \"\n            + \"role.name AS role_name FROM principal \"\n            + \"JOIN role_member ON principal.principal_id=role_member.principal_id \"\n            + \"JOIN role ON role_member.role_id=role.role_id\"", "var_name": "SQL_LIST_ROLE_PRINCIPALS"}, {"original_string": "private static final String SQL_LIST_ROLE_PRINCIPALS_USER_ONLY = \" WHERE principal.name LIKE ?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_ROLE_PRINCIPALS_USER_ONLY = \" WHERE principal.name LIKE ?;\"", "var_name": "SQL_LIST_ROLE_PRINCIPALS_USER_ONLY"}, {"original_string": "private static final String SQL_LIST_ROLE_PRINCIPALS_QUERY = \" WHERE principal.name=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_ROLE_PRINCIPALS_QUERY = \" WHERE principal.name=?;\"", "var_name": "SQL_LIST_ROLE_PRINCIPALS_QUERY"}, {"original_string": "private static final String SQL_LIST_TRUSTED_STANDARD_ROLES = \"SELECT role.domain_id, role.name, \"\n            + \"policy.domain_id AS assert_domain_id, assertion.role FROM role \"\n            + \"JOIN domain ON domain.domain_id=role.domain_id \"\n            + \"JOIN assertion ON assertion.resource=CONCAT(domain.name, \\\":role.\\\", role.name) \"\n            + \"JOIN policy ON policy.policy_id=assertion.policy_id \"\n            + \"WHERE assertion.action='assume_role';\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_TRUSTED_STANDARD_ROLES = \"SELECT role.domain_id, role.name, \"\n            + \"policy.domain_id AS assert_domain_id, assertion.role FROM role \"\n            + \"JOIN domain ON domain.domain_id=role.domain_id \"\n            + \"JOIN assertion ON assertion.resource=CONCAT(domain.name, \\\":role.\\\", role.name) \"\n            + \"JOIN policy ON policy.policy_id=assertion.policy_id \"\n            + \"WHERE assertion.action='assume_role';\"", "var_name": "SQL_LIST_TRUSTED_STANDARD_ROLES"}, {"original_string": "private static final String SQL_LIST_TRUSTED_WILDCARD_ROLES = \"SELECT role.domain_id, role.name, \"\n            + \"policy.domain_id AS assert_domain_id, assertion.role FROM role \"\n            + \"JOIN domain ON domain.domain_id=role.domain_id \"\n            + \"JOIN assertion ON assertion.resource=CONCAT(\\\"*:role.\\\", role.name) \"\n            + \"JOIN policy ON policy.policy_id=assertion.policy_id \"\n            + \"WHERE assertion.action='assume_role';\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_TRUSTED_WILDCARD_ROLES = \"SELECT role.domain_id, role.name, \"\n            + \"policy.domain_id AS assert_domain_id, assertion.role FROM role \"\n            + \"JOIN domain ON domain.domain_id=role.domain_id \"\n            + \"JOIN assertion ON assertion.resource=CONCAT(\\\"*:role.\\\", role.name) \"\n            + \"JOIN policy ON policy.policy_id=assertion.policy_id \"\n            + \"WHERE assertion.action='assume_role';\"", "var_name": "SQL_LIST_TRUSTED_WILDCARD_ROLES"}, {"original_string": "private static final String SQL_LIST_PRINCIPAL_ROLES = \"SELECT domain.name, \"\n            + \"role.name AS role_name FROM role_member \"\n            + \"JOIN role ON role_member.role_id=role.role_id \"\n            + \"JOIN domain ON domain.domain_id=role.domain_id \"\n            + \"WHERE role_member.principal_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_PRINCIPAL_ROLES = \"SELECT domain.name, \"\n            + \"role.name AS role_name FROM role_member \"\n            + \"JOIN role ON role_member.role_id=role.role_id \"\n            + \"JOIN domain ON domain.domain_id=role.domain_id \"\n            + \"WHERE role_member.principal_id=?;\"", "var_name": "SQL_LIST_PRINCIPAL_ROLES"}, {"original_string": "private static final String SQL_LIST_PRINCIPAL_DOMAIN_ROLES = \"SELECT role.name AS role_name FROM role_member \"\n            + \"JOIN role ON role_member.role_id=role.role_id \"\n            + \"JOIN domain ON domain.domain_id=role.domain_id \"\n            + \"WHERE role_member.principal_id=? AND domain.domain_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_PRINCIPAL_DOMAIN_ROLES = \"SELECT role.name AS role_name FROM role_member \"\n            + \"JOIN role ON role_member.role_id=role.role_id \"\n            + \"JOIN domain ON domain.domain_id=role.domain_id \"\n            + \"WHERE role_member.principal_id=? AND domain.domain_id=?;\"", "var_name": "SQL_LIST_PRINCIPAL_DOMAIN_ROLES"}, {"original_string": "private static final String SQL_GET_QUOTA = \"SELECT * FROM quota WHERE domain_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_QUOTA = \"SELECT * FROM quota WHERE domain_id=?;\"", "var_name": "SQL_GET_QUOTA"}, {"original_string": "private static final String SQL_INSERT_QUOTA = \"INSERT INTO quota (domain_id, role, role_member, \"\n            + \"policy, assertion, service, service_host, public_key, entity, subdomain, principal_group, principal_group_member) \"\n            + \"VALUES (?,?,?,?,?,?,?,?,?,?,?,?);\";", "modifier": "private static final", "type": "String", "declarator": "SQL_INSERT_QUOTA = \"INSERT INTO quota (domain_id, role, role_member, \"\n            + \"policy, assertion, service, service_host, public_key, entity, subdomain, principal_group, principal_group_member) \"\n            + \"VALUES (?,?,?,?,?,?,?,?,?,?,?,?);\"", "var_name": "SQL_INSERT_QUOTA"}, {"original_string": "private static final String SQL_UPDATE_QUOTA = \"UPDATE quota SET role=?, role_member=?, \"\n            + \"policy=?, assertion=?, service=?, service_host=?, public_key=?, entity=?, \"\n            + \"subdomain=?, principal_group=?, principal_group_member=?  WHERE domain_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_UPDATE_QUOTA = \"UPDATE quota SET role=?, role_member=?, \"\n            + \"policy=?, assertion=?, service=?, service_host=?, public_key=?, entity=?, \"\n            + \"subdomain=?, principal_group=?, principal_group_member=?  WHERE domain_id=?;\"", "var_name": "SQL_UPDATE_QUOTA"}, {"original_string": "private static final String SQL_DELETE_QUOTA = \"DELETE FROM quota WHERE domain_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_DELETE_QUOTA = \"DELETE FROM quota WHERE domain_id=?;\"", "var_name": "SQL_DELETE_QUOTA"}, {"original_string": "private static final String SQL_PENDING_ORG_AUDIT_ROLE_MEMBER_LIST = \"SELECT do.name AS domain, ro.name AS role, \"\n            + \"principal.name AS member, rmo.expiration, rmo.review_reminder, rmo.audit_ref, rmo.req_time, rmo.req_principal \"\n            + \"FROM principal JOIN pending_role_member rmo \"\n            + \"ON rmo.principal_id=principal.principal_id JOIN role ro ON ro.role_id=rmo.role_id JOIN domain do ON ro.domain_id=do.domain_id \"\n            + \"WHERE ro.audit_enabled=true AND ro.domain_id IN ( select domain_id FROM domain WHERE org IN ( \"\n            + \"SELECT DISTINCT role.name AS org FROM role_member JOIN role ON role.role_id=role_member.role_id \"\n            + \"WHERE role_member.principal_id=? AND role.domain_id=?) ) order by do.name, ro.name, principal.name;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_PENDING_ORG_AUDIT_ROLE_MEMBER_LIST = \"SELECT do.name AS domain, ro.name AS role, \"\n            + \"principal.name AS member, rmo.expiration, rmo.review_reminder, rmo.audit_ref, rmo.req_time, rmo.req_principal \"\n            + \"FROM principal JOIN pending_role_member rmo \"\n            + \"ON rmo.principal_id=principal.principal_id JOIN role ro ON ro.role_id=rmo.role_id JOIN domain do ON ro.domain_id=do.domain_id \"\n            + \"WHERE ro.audit_enabled=true AND ro.domain_id IN ( select domain_id FROM domain WHERE org IN ( \"\n            + \"SELECT DISTINCT role.name AS org FROM role_member JOIN role ON role.role_id=role_member.role_id \"\n            + \"WHERE role_member.principal_id=? AND role.domain_id=?) ) order by do.name, ro.name, principal.name;\"", "var_name": "SQL_PENDING_ORG_AUDIT_ROLE_MEMBER_LIST"}, {"original_string": "private static final String SQL_PENDING_DOMAIN_AUDIT_ROLE_MEMBER_LIST = \"SELECT do.name AS domain, ro.name AS role, \"\n            + \"principal.name AS member, rmo.expiration, rmo.review_reminder, rmo.audit_ref, rmo.req_time, rmo.req_principal \"\n            + \"FROM principal JOIN pending_role_member rmo \"\n            + \"ON rmo.principal_id=principal.principal_id JOIN role ro ON ro.role_id=rmo.role_id JOIN domain do ON ro.domain_id=do.domain_id \"\n            + \"WHERE ro.audit_enabled=true AND ro.domain_id IN ( select domain_id FROM domain WHERE name IN ( \"\n            + \"SELECT DISTINCT role.name AS domain_name FROM role_member JOIN role ON role.role_id=role_member.role_id \"\n            + \"WHERE role_member.principal_id=? AND role.domain_id=?) ) order by do.name, ro.name, principal.name;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_PENDING_DOMAIN_AUDIT_ROLE_MEMBER_LIST = \"SELECT do.name AS domain, ro.name AS role, \"\n            + \"principal.name AS member, rmo.expiration, rmo.review_reminder, rmo.audit_ref, rmo.req_time, rmo.req_principal \"\n            + \"FROM principal JOIN pending_role_member rmo \"\n            + \"ON rmo.principal_id=principal.principal_id JOIN role ro ON ro.role_id=rmo.role_id JOIN domain do ON ro.domain_id=do.domain_id \"\n            + \"WHERE ro.audit_enabled=true AND ro.domain_id IN ( select domain_id FROM domain WHERE name IN ( \"\n            + \"SELECT DISTINCT role.name AS domain_name FROM role_member JOIN role ON role.role_id=role_member.role_id \"\n            + \"WHERE role_member.principal_id=? AND role.domain_id=?) ) order by do.name, ro.name, principal.name;\"", "var_name": "SQL_PENDING_DOMAIN_AUDIT_ROLE_MEMBER_LIST"}, {"original_string": "private static final String SQL_PENDING_DOMAIN_ADMIN_ROLE_MEMBER_LIST = \"SELECT do.name AS domain, ro.name AS role, \"\n            + \"principal.name AS member, rmo.expiration, rmo.review_reminder, rmo.audit_ref, rmo.req_time, rmo.req_principal \"\n            + \"FROM principal JOIN pending_role_member rmo \"\n            + \"ON rmo.principal_id=principal.principal_id JOIN role ro ON ro.role_id=rmo.role_id JOIN domain do ON ro.domain_id=do.domain_id \"\n            + \"WHERE (ro.self_serve=true OR ro.review_enabled=true) AND ro.domain_id IN ( SELECT domain.domain_id FROM domain JOIN role \"\n            + \"ON role.domain_id=domain.domain_id JOIN role_member ON role.role_id=role_member.role_id \"\n            + \"WHERE role_member.principal_id=? AND role_member.active=true AND role.name='admin' ) \"\n            + \"order by do.name, ro.name, principal.name;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_PENDING_DOMAIN_ADMIN_ROLE_MEMBER_LIST = \"SELECT do.name AS domain, ro.name AS role, \"\n            + \"principal.name AS member, rmo.expiration, rmo.review_reminder, rmo.audit_ref, rmo.req_time, rmo.req_principal \"\n            + \"FROM principal JOIN pending_role_member rmo \"\n            + \"ON rmo.principal_id=principal.principal_id JOIN role ro ON ro.role_id=rmo.role_id JOIN domain do ON ro.domain_id=do.domain_id \"\n            + \"WHERE (ro.self_serve=true OR ro.review_enabled=true) AND ro.domain_id IN ( SELECT domain.domain_id FROM domain JOIN role \"\n            + \"ON role.domain_id=domain.domain_id JOIN role_member ON role.role_id=role_member.role_id \"\n            + \"WHERE role_member.principal_id=? AND role_member.active=true AND role.name='admin' ) \"\n            + \"order by do.name, ro.name, principal.name;\"", "var_name": "SQL_PENDING_DOMAIN_ADMIN_ROLE_MEMBER_LIST"}, {"original_string": "private static final String SQL_AUDIT_ENABLED_PENDING_MEMBERSHIP_REMINDER_ENTRIES =\n            \"SELECT distinct d.org, d.name FROM pending_role_member rm \" +\n            \"JOIN role r ON r.role_id=rm.role_id JOIN domain d ON r.domain_id=d.domain_id \" +\n            \"WHERE r.audit_enabled=true AND rm.last_notified_time=? AND rm.server=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_AUDIT_ENABLED_PENDING_MEMBERSHIP_REMINDER_ENTRIES =\n            \"SELECT distinct d.org, d.name FROM pending_role_member rm \" +\n            \"JOIN role r ON r.role_id=rm.role_id JOIN domain d ON r.domain_id=d.domain_id \" +\n            \"WHERE r.audit_enabled=true AND rm.last_notified_time=? AND rm.server=?;\"", "var_name": "SQL_AUDIT_ENABLED_PENDING_MEMBERSHIP_REMINDER_ENTRIES"}, {"original_string": "private static final String SQL_ADMIN_PENDING_MEMBERSHIP_REMINDER_DOMAINS =\n            \"SELECT distinct d.name FROM pending_role_member rm \" +\n            \"JOIN role r ON r.role_id=rm.role_id \" +\n            \"JOIN domain d ON r.domain_id=d.domain_id WHERE (r.self_serve=true OR r.review_enabled=true) AND rm.last_notified_time=? AND rm.server=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_ADMIN_PENDING_MEMBERSHIP_REMINDER_DOMAINS =\n            \"SELECT distinct d.name FROM pending_role_member rm \" +\n            \"JOIN role r ON r.role_id=rm.role_id \" +\n            \"JOIN domain d ON r.domain_id=d.domain_id WHERE (r.self_serve=true OR r.review_enabled=true) AND rm.last_notified_time=? AND rm.server=?;\"", "var_name": "SQL_ADMIN_PENDING_MEMBERSHIP_REMINDER_DOMAINS"}, {"original_string": "private static final String SQL_GET_EXPIRED_PENDING_ROLE_MEMBERS = \"SELECT d.name, r.name, p.name, prm.expiration, prm.review_reminder, prm.audit_ref, prm.req_time, prm.req_principal \" +\n            \"FROM principal p JOIN pending_role_member prm \" +\n            \"ON prm.principal_id=p.principal_id JOIN role r ON prm.role_id=r.role_id JOIN domain d ON d.domain_id=r.domain_id \" +\n            \"WHERE prm.req_time < (CURRENT_TIME - INTERVAL ? DAY);\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_EXPIRED_PENDING_ROLE_MEMBERS = \"SELECT d.name, r.name, p.name, prm.expiration, prm.review_reminder, prm.audit_ref, prm.req_time, prm.req_principal \" +\n            \"FROM principal p JOIN pending_role_member prm \" +\n            \"ON prm.principal_id=p.principal_id JOIN role r ON prm.role_id=r.role_id JOIN domain d ON d.domain_id=r.domain_id \" +\n            \"WHERE prm.req_time < (CURRENT_TIME - INTERVAL ? DAY);\"", "var_name": "SQL_GET_EXPIRED_PENDING_ROLE_MEMBERS"}, {"original_string": "private static final String SQL_UPDATE_PENDING_ROLE_MEMBERS_NOTIFICATION_TIMESTAMP = \"UPDATE pending_role_member SET last_notified_time=?, server=? \" +\n            \"WHERE DAYOFWEEK(req_time)=DAYOFWEEK(?) AND (last_notified_time IS NULL || last_notified_time < (CURRENT_TIME - INTERVAL ? DAY));\";", "modifier": "private static final", "type": "String", "declarator": "SQL_UPDATE_PENDING_ROLE_MEMBERS_NOTIFICATION_TIMESTAMP = \"UPDATE pending_role_member SET last_notified_time=?, server=? \" +\n            \"WHERE DAYOFWEEK(req_time)=DAYOFWEEK(?) AND (last_notified_time IS NULL || last_notified_time < (CURRENT_TIME - INTERVAL ? DAY));\"", "var_name": "SQL_UPDATE_PENDING_ROLE_MEMBERS_NOTIFICATION_TIMESTAMP"}, {"original_string": "private static final String SQL_UPDATE_ROLE_MEMBERS_EXPIRY_NOTIFICATION_TIMESTAMP = \"UPDATE role_member SET last_notified_time=?, server=? \" +\n            \"WHERE expiration > CURRENT_TIME AND DATEDIFF(expiration, CURRENT_TIME) IN (0,1,7,14,21,28) AND (last_notified_time IS NULL || last_notified_time < (CURRENT_TIME - INTERVAL ? DAY));\";", "modifier": "private static final", "type": "String", "declarator": "SQL_UPDATE_ROLE_MEMBERS_EXPIRY_NOTIFICATION_TIMESTAMP = \"UPDATE role_member SET last_notified_time=?, server=? \" +\n            \"WHERE expiration > CURRENT_TIME AND DATEDIFF(expiration, CURRENT_TIME) IN (0,1,7,14,21,28) AND (last_notified_time IS NULL || last_notified_time < (CURRENT_TIME - INTERVAL ? DAY));\"", "var_name": "SQL_UPDATE_ROLE_MEMBERS_EXPIRY_NOTIFICATION_TIMESTAMP"}, {"original_string": "private static final String SQL_LIST_NOTIFY_TEMPORARY_ROLE_MEMBERS = \"SELECT domain.name AS domain_name, role.name AS role_name, \" +\n            \"principal.name AS principal_name, role_member.expiration, role_member.review_reminder FROM role_member \" +\n            \"JOIN role ON role.role_id=role_member.role_id \" +\n            \"JOIN principal ON principal.principal_id=role_member.principal_id \" +\n            \"JOIN domain ON domain.domain_id=role.domain_id \" +\n            \"WHERE role_member.last_notified_time=? AND role_member.server=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_NOTIFY_TEMPORARY_ROLE_MEMBERS = \"SELECT domain.name AS domain_name, role.name AS role_name, \" +\n            \"principal.name AS principal_name, role_member.expiration, role_member.review_reminder FROM role_member \" +\n            \"JOIN role ON role.role_id=role_member.role_id \" +\n            \"JOIN principal ON principal.principal_id=role_member.principal_id \" +\n            \"JOIN domain ON domain.domain_id=role.domain_id \" +\n            \"WHERE role_member.last_notified_time=? AND role_member.server=?;\"", "var_name": "SQL_LIST_NOTIFY_TEMPORARY_ROLE_MEMBERS"}, {"original_string": "private static final String SQL_UPDATE_ROLE_MEMBERS_REVIEW_NOTIFICATION_TIMESTAMP = \"UPDATE role_member SET review_last_notified_time=?, review_server=? \" +\n            \"WHERE review_reminder > CURRENT_TIME AND DATEDIFF(review_reminder, CURRENT_TIME) IN (0,1,7,14,21,28) AND (review_last_notified_time IS NULL || review_last_notified_time < (CURRENT_TIME - INTERVAL ? DAY));\";", "modifier": "private static final", "type": "String", "declarator": "SQL_UPDATE_ROLE_MEMBERS_REVIEW_NOTIFICATION_TIMESTAMP = \"UPDATE role_member SET review_last_notified_time=?, review_server=? \" +\n            \"WHERE review_reminder > CURRENT_TIME AND DATEDIFF(review_reminder, CURRENT_TIME) IN (0,1,7,14,21,28) AND (review_last_notified_time IS NULL || review_last_notified_time < (CURRENT_TIME - INTERVAL ? DAY));\"", "var_name": "SQL_UPDATE_ROLE_MEMBERS_REVIEW_NOTIFICATION_TIMESTAMP"}, {"original_string": "private static final String SQL_LIST_NOTIFY_REVIEW_ROLE_MEMBERS = \"SELECT domain.name AS domain_name, role.name AS role_name, \" +\n            \"principal.name AS principal_name, role_member.expiration, role_member.review_reminder FROM role_member \" +\n            \"JOIN role ON role.role_id=role_member.role_id \" +\n            \"JOIN principal ON principal.principal_id=role_member.principal_id \" +\n            \"JOIN domain ON domain.domain_id=role.domain_id \" +\n            \"WHERE role_member.review_last_notified_time=? AND role_member.review_server=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_NOTIFY_REVIEW_ROLE_MEMBERS = \"SELECT domain.name AS domain_name, role.name AS role_name, \" +\n            \"principal.name AS principal_name, role_member.expiration, role_member.review_reminder FROM role_member \" +\n            \"JOIN role ON role.role_id=role_member.role_id \" +\n            \"JOIN principal ON principal.principal_id=role_member.principal_id \" +\n            \"JOIN domain ON domain.domain_id=role.domain_id \" +\n            \"WHERE role_member.review_last_notified_time=? AND role_member.review_server=?;\"", "var_name": "SQL_LIST_NOTIFY_REVIEW_ROLE_MEMBERS"}, {"original_string": "private static final String SQL_UPDATE_ROLE_REVIEW_TIMESTAMP = \"UPDATE role SET last_reviewed_time=CURRENT_TIMESTAMP(3) WHERE role_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_UPDATE_ROLE_REVIEW_TIMESTAMP = \"UPDATE role SET last_reviewed_time=CURRENT_TIMESTAMP(3) WHERE role_id=?;\"", "var_name": "SQL_UPDATE_ROLE_REVIEW_TIMESTAMP"}, {"original_string": "private static final String SQL_LIST_ROLES_WITH_RESTRICTIONS = \"SELECT domain.name as domain_name, \"\n            + \"role.name as role_name, domain.user_authority_filter as domain_user_authority_filter FROM role \"\n            + \"JOIN domain ON role.domain_id=domain.domain_id WHERE role.user_authority_filter!='' \"\n            + \"OR role.user_authority_expiration!='' OR domain.user_authority_filter!='';\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_ROLES_WITH_RESTRICTIONS = \"SELECT domain.name as domain_name, \"\n            + \"role.name as role_name, domain.user_authority_filter as domain_user_authority_filter FROM role \"\n            + \"JOIN domain ON role.domain_id=domain.domain_id WHERE role.user_authority_filter!='' \"\n            + \"OR role.user_authority_expiration!='' OR domain.user_authority_filter!='';\"", "var_name": "SQL_LIST_ROLES_WITH_RESTRICTIONS"}, {"original_string": "private static final String SQL_GET_GROUP = \"SELECT * FROM principal_group \"\n            + \"JOIN domain ON domain.domain_id=principal_group.domain_id \"\n            + \"WHERE domain.name=? AND principal_group.name=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_GROUP = \"SELECT * FROM principal_group \"\n            + \"JOIN domain ON domain.domain_id=principal_group.domain_id \"\n            + \"WHERE domain.name=? AND principal_group.name=?;\"", "var_name": "SQL_GET_GROUP"}, {"original_string": "private static final String SQL_INSERT_GROUP = \"INSERT INTO principal_group (name, domain_id, audit_enabled, self_serve,\"\n            + \" review_enabled, notify_roles, user_authority_filter, user_authority_expiration) \"\n            + \"VALUES (?,?,?,?,?,?,?,?);\";", "modifier": "private static final", "type": "String", "declarator": "SQL_INSERT_GROUP = \"INSERT INTO principal_group (name, domain_id, audit_enabled, self_serve,\"\n            + \" review_enabled, notify_roles, user_authority_filter, user_authority_expiration) \"\n            + \"VALUES (?,?,?,?,?,?,?,?);\"", "var_name": "SQL_INSERT_GROUP"}, {"original_string": "private static final String SQL_UPDATE_GROUP = \"UPDATE principal_group SET audit_enabled=?, self_serve=?, \"\n            + \"review_enabled=?, notify_roles=?, \"\n            + \"user_authority_filter=?, user_authority_expiration=? WHERE group_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_UPDATE_GROUP = \"UPDATE principal_group SET audit_enabled=?, self_serve=?, \"\n            + \"review_enabled=?, notify_roles=?, \"\n            + \"user_authority_filter=?, user_authority_expiration=? WHERE group_id=?;\"", "var_name": "SQL_UPDATE_GROUP"}, {"original_string": "private static final String SQL_GET_GROUP_ID = \"SELECT group_id FROM principal_group WHERE domain_id=? AND name=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_GROUP_ID = \"SELECT group_id FROM principal_group WHERE domain_id=? AND name=?;\"", "var_name": "SQL_GET_GROUP_ID"}, {"original_string": "private static final String SQL_DELETE_GROUP = \"DELETE FROM principal_group WHERE domain_id=? AND name=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_DELETE_GROUP = \"DELETE FROM principal_group WHERE domain_id=? AND name=?;\"", "var_name": "SQL_DELETE_GROUP"}, {"original_string": "private static final String SQL_UPDATE_GROUP_MOD_TIMESTAMP = \"UPDATE principal_group \"\n            + \"SET modified=CURRENT_TIMESTAMP(3) WHERE group_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_UPDATE_GROUP_MOD_TIMESTAMP = \"UPDATE principal_group \"\n            + \"SET modified=CURRENT_TIMESTAMP(3) WHERE group_id=?;\"", "var_name": "SQL_UPDATE_GROUP_MOD_TIMESTAMP"}, {"original_string": "private static final String SQL_COUNT_GROUP = \"SELECT COUNT(*) FROM principal_group WHERE domain_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_COUNT_GROUP = \"SELECT COUNT(*) FROM principal_group WHERE domain_id=?;\"", "var_name": "SQL_COUNT_GROUP"}, {"original_string": "private static final String SQL_GET_GROUP_MEMBER = \"SELECT principal.principal_id, principal_group_member.expiration, \"\n            + \"principal_group_member.req_principal, principal_group_member.system_disabled FROM principal \"\n            + \"JOIN principal_group_member ON principal_group_member.principal_id=principal.principal_id \"\n            + \"JOIN principal_group ON principal_group.group_id=principal_group_member.group_id \"\n            + \"WHERE principal_group.group_id=? AND principal.name=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_GROUP_MEMBER = \"SELECT principal.principal_id, principal_group_member.expiration, \"\n            + \"principal_group_member.req_principal, principal_group_member.system_disabled FROM principal \"\n            + \"JOIN principal_group_member ON principal_group_member.principal_id=principal.principal_id \"\n            + \"JOIN principal_group ON principal_group.group_id=principal_group_member.group_id \"\n            + \"WHERE principal_group.group_id=? AND principal.name=?;\"", "var_name": "SQL_GET_GROUP_MEMBER"}, {"original_string": "private static final String SQL_GET_TEMP_GROUP_MEMBER = \"SELECT principal.principal_id, principal_group_member.expiration, \"\n            + \"principal_group_member.req_principal, principal_group_member.system_disabled FROM principal \"\n            + \"JOIN principal_group_member ON principal_group_member.principal_id=principal.principal_id \"\n            + \"JOIN principal_group ON principal_group.group_id=principal_group_member.group_id \"\n            + \"WHERE principal_group.group_id=? AND principal.name=? AND principal_group_member.expiration=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_TEMP_GROUP_MEMBER = \"SELECT principal.principal_id, principal_group_member.expiration, \"\n            + \"principal_group_member.req_principal, principal_group_member.system_disabled FROM principal \"\n            + \"JOIN principal_group_member ON principal_group_member.principal_id=principal.principal_id \"\n            + \"JOIN principal_group ON principal_group.group_id=principal_group_member.group_id \"\n            + \"WHERE principal_group.group_id=? AND principal.name=? AND principal_group_member.expiration=?;\"", "var_name": "SQL_GET_TEMP_GROUP_MEMBER"}, {"original_string": "private static final String SQL_GET_PENDING_GROUP_MEMBER = \"SELECT principal.principal_id, \"\n            + \"pending_principal_group_member.expiration, pending_principal_group_member.req_principal FROM principal \"\n            + \"JOIN pending_principal_group_member ON pending_principal_group_member.principal_id=principal.principal_id \"\n            + \"JOIN principal_group ON principal_group.group_id=pending_principal_group_member.group_id \"\n            + \"WHERE principal_group.group_id=? AND principal.name=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_PENDING_GROUP_MEMBER = \"SELECT principal.principal_id, \"\n            + \"pending_principal_group_member.expiration, pending_principal_group_member.req_principal FROM principal \"\n            + \"JOIN pending_principal_group_member ON pending_principal_group_member.principal_id=principal.principal_id \"\n            + \"JOIN principal_group ON principal_group.group_id=pending_principal_group_member.group_id \"\n            + \"WHERE principal_group.group_id=? AND principal.name=?;\"", "var_name": "SQL_GET_PENDING_GROUP_MEMBER"}, {"original_string": "private static final String SQL_GET_TEMP_PENDING_GROUP_MEMBER = \"SELECT principal.principal_id, \"\n            + \"pending_principal_group_member.expiration, pending_principal_group_member.req_principal FROM principal \"\n            + \"JOIN pending_principal_group_member ON pending_principal_group_member.principal_id=principal.principal_id \"\n            + \"JOIN principal_group ON principal_group.group_id=pending_principal_group_member.group_id \"\n            + \"WHERE principal_group.group_id=? AND principal.name=? AND pending_principal_group_member.expiration=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_TEMP_PENDING_GROUP_MEMBER = \"SELECT principal.principal_id, \"\n            + \"pending_principal_group_member.expiration, pending_principal_group_member.req_principal FROM principal \"\n            + \"JOIN pending_principal_group_member ON pending_principal_group_member.principal_id=principal.principal_id \"\n            + \"JOIN principal_group ON principal_group.group_id=pending_principal_group_member.group_id \"\n            + \"WHERE principal_group.group_id=? AND principal.name=? AND pending_principal_group_member.expiration=?;\"", "var_name": "SQL_GET_TEMP_PENDING_GROUP_MEMBER"}, {"original_string": "private static final String SQL_LIST_GROUP_AUDIT_LOGS = \"SELECT * FROM principal_group_audit_log WHERE group_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_GROUP_AUDIT_LOGS = \"SELECT * FROM principal_group_audit_log WHERE group_id=?;\"", "var_name": "SQL_LIST_GROUP_AUDIT_LOGS"}, {"original_string": "private static final String SQL_UPDATE_GROUP_REVIEW_TIMESTAMP = \"UPDATE principal_group SET last_reviewed_time=CURRENT_TIMESTAMP(3) WHERE group_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_UPDATE_GROUP_REVIEW_TIMESTAMP = \"UPDATE principal_group SET last_reviewed_time=CURRENT_TIMESTAMP(3) WHERE group_id=?;\"", "var_name": "SQL_UPDATE_GROUP_REVIEW_TIMESTAMP"}, {"original_string": "private static final String SQL_LIST_GROUPS_WITH_RESTRICTIONS = \"SELECT domain.name as domain_name, \"\n            + \"principal_group.name as group_name, domain.user_authority_filter as domain_user_authority_filter FROM principal_group \"\n            + \"JOIN domain ON role.domain_id=domain.domain_id WHERE principal_group.user_authority_filter!='' \"\n            + \"OR principal_group.user_authority_expiration!='' OR domain.user_authority_filter!='';\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_GROUPS_WITH_RESTRICTIONS = \"SELECT domain.name as domain_name, \"\n            + \"principal_group.name as group_name, domain.user_authority_filter as domain_user_authority_filter FROM principal_group \"\n            + \"JOIN domain ON role.domain_id=domain.domain_id WHERE principal_group.user_authority_filter!='' \"\n            + \"OR principal_group.user_authority_expiration!='' OR domain.user_authority_filter!='';\"", "var_name": "SQL_LIST_GROUPS_WITH_RESTRICTIONS"}, {"original_string": "private static final String SQL_LIST_GROUP_MEMBERS = \"SELECT principal.name, principal_group_member.expiration, \"\n            + \"principal_group_member.active, principal_group_member.audit_ref, principal_group_member.system_disabled FROM principal \"\n            + \"JOIN principal_group_member ON principal_group_member.principal_id=principal.principal_id \"\n            + \"JOIN principal_group ON principal_group.group_id=principal_group_member.group_id WHERE principal_group.group_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_GROUP_MEMBERS = \"SELECT principal.name, principal_group_member.expiration, \"\n            + \"principal_group_member.active, principal_group_member.audit_ref, principal_group_member.system_disabled FROM principal \"\n            + \"JOIN principal_group_member ON principal_group_member.principal_id=principal.principal_id \"\n            + \"JOIN principal_group ON principal_group.group_id=principal_group_member.group_id WHERE principal_group.group_id=?;\"", "var_name": "SQL_LIST_GROUP_MEMBERS"}, {"original_string": "private static final String SQL_LIST_PENDING_GROUP_MEMBERS = \"SELECT principal.name, pending_principal_group_member.expiration, \"\n            + \"pending_principal_group_member.req_time, pending_principal_group_member.audit_ref FROM principal \"\n            + \"JOIN pending_principal_group_member ON pending_principal_group_member.principal_id=principal.principal_id \"\n            + \"JOIN principal_group ON principal_group.group_id=pending_principal_group_member.group_id WHERE principal_group.group_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_PENDING_GROUP_MEMBERS = \"SELECT principal.name, pending_principal_group_member.expiration, \"\n            + \"pending_principal_group_member.req_time, pending_principal_group_member.audit_ref FROM principal \"\n            + \"JOIN pending_principal_group_member ON pending_principal_group_member.principal_id=principal.principal_id \"\n            + \"JOIN principal_group ON principal_group.group_id=pending_principal_group_member.group_id WHERE principal_group.group_id=?;\"", "var_name": "SQL_LIST_PENDING_GROUP_MEMBERS"}, {"original_string": "private static final String SQL_COUNT_GROUP_MEMBERS = \"SELECT COUNT(*) FROM principal_group_member WHERE group_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_COUNT_GROUP_MEMBERS = \"SELECT COUNT(*) FROM principal_group_member WHERE group_id=?;\"", "var_name": "SQL_COUNT_GROUP_MEMBERS"}, {"original_string": "private static final String SQL_STD_GROUP_MEMBER_EXISTS = \"SELECT principal_id FROM principal_group_member WHERE group_id=? AND principal_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_STD_GROUP_MEMBER_EXISTS = \"SELECT principal_id FROM principal_group_member WHERE group_id=? AND principal_id=?;\"", "var_name": "SQL_STD_GROUP_MEMBER_EXISTS"}, {"original_string": "private static final String SQL_PENDING_GROUP_MEMBER_EXISTS = \"SELECT principal_id FROM pending_principal_group_member WHERE group_id=? AND principal_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_PENDING_GROUP_MEMBER_EXISTS = \"SELECT principal_id FROM pending_principal_group_member WHERE group_id=? AND principal_id=?;\"", "var_name": "SQL_PENDING_GROUP_MEMBER_EXISTS"}, {"original_string": "private static final String SQL_UPDATE_GROUP_MEMBER = \"UPDATE principal_group_member \"\n            + \"SET expiration=?, active=?, audit_ref=?, req_principal=? WHERE group_id=? AND principal_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_UPDATE_GROUP_MEMBER = \"UPDATE principal_group_member \"\n            + \"SET expiration=?, active=?, audit_ref=?, req_principal=? WHERE group_id=? AND principal_id=?;\"", "var_name": "SQL_UPDATE_GROUP_MEMBER"}, {"original_string": "private static final String SQL_UPDATE_GROUP_MEMBER_DISABLED_STATE = \"UPDATE principal_group_member \"\n            + \"SET system_disabled=?, audit_ref=?, req_principal=? WHERE group_id=? AND principal_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_UPDATE_GROUP_MEMBER_DISABLED_STATE = \"UPDATE principal_group_member \"\n            + \"SET system_disabled=?, audit_ref=?, req_principal=? WHERE group_id=? AND principal_id=?;\"", "var_name": "SQL_UPDATE_GROUP_MEMBER_DISABLED_STATE"}, {"original_string": "private static final String SQL_UPDATE_PENDING_GROUP_MEMBER = \"UPDATE pending_principal_group_member \"\n            + \"SET expiration=?, audit_ref=?, req_time=CURRENT_TIMESTAMP(3), req_principal=? WHERE group_id=? AND principal_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_UPDATE_PENDING_GROUP_MEMBER = \"UPDATE pending_principal_group_member \"\n            + \"SET expiration=?, audit_ref=?, req_time=CURRENT_TIMESTAMP(3), req_principal=? WHERE group_id=? AND principal_id=?;\"", "var_name": "SQL_UPDATE_PENDING_GROUP_MEMBER"}, {"original_string": "private static final String SQL_INSERT_GROUP_MEMBER = \"INSERT INTO principal_group_member \"\n            + \"(group_id, principal_id, expiration, active, audit_ref, req_principal) VALUES (?,?,?,?,?,?);\";", "modifier": "private static final", "type": "String", "declarator": "SQL_INSERT_GROUP_MEMBER = \"INSERT INTO principal_group_member \"\n            + \"(group_id, principal_id, expiration, active, audit_ref, req_principal) VALUES (?,?,?,?,?,?);\"", "var_name": "SQL_INSERT_GROUP_MEMBER"}, {"original_string": "private static final String SQL_INSERT_PENDING_GROUP_MEMBER = \"INSERT INTO pending_principal_group_member \"\n            + \"(group_id, principal_id, expiration, audit_ref, req_principal) VALUES (?,?,?,?,?);\";", "modifier": "private static final", "type": "String", "declarator": "SQL_INSERT_PENDING_GROUP_MEMBER = \"INSERT INTO pending_principal_group_member \"\n            + \"(group_id, principal_id, expiration, audit_ref, req_principal) VALUES (?,?,?,?,?);\"", "var_name": "SQL_INSERT_PENDING_GROUP_MEMBER"}, {"original_string": "private static final String SQL_DELETE_GROUP_MEMBER = \"DELETE FROM principal_group_member WHERE group_id=? AND principal_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_DELETE_GROUP_MEMBER = \"DELETE FROM principal_group_member WHERE group_id=? AND principal_id=?;\"", "var_name": "SQL_DELETE_GROUP_MEMBER"}, {"original_string": "private static final String SQL_DELETE_PENDING_GROUP_MEMBER = \"DELETE FROM pending_principal_group_member WHERE group_id=? AND principal_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_DELETE_PENDING_GROUP_MEMBER = \"DELETE FROM pending_principal_group_member WHERE group_id=? AND principal_id=?;\"", "var_name": "SQL_DELETE_PENDING_GROUP_MEMBER"}, {"original_string": "private static final String SQL_INSERT_GROUP_AUDIT_LOG = \"INSERT INTO principal_group_audit_log \"\n            + \"(group_id, admin, member, action, audit_ref) VALUES (?,?,?,?,?);\";", "modifier": "private static final", "type": "String", "declarator": "SQL_INSERT_GROUP_AUDIT_LOG = \"INSERT INTO principal_group_audit_log \"\n            + \"(group_id, admin, member, action, audit_ref) VALUES (?,?,?,?,?);\"", "var_name": "SQL_INSERT_GROUP_AUDIT_LOG"}, {"original_string": "private static final String SQL_GET_PRINCIPAL_GROUPS = \"SELECT principal_group.name, domain.name, principal_group_member.expiration, \"\n            + \"principal_group_member.system_disabled FROM principal_group_member \"\n            + \"JOIN principal_group ON principal_group.group_id=principal_group_member.group_id \"\n            + \"JOIN domain ON domain.domain_id=principal_group.domain_id \"\n            + \"WHERE principal_group_member.principal_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_PRINCIPAL_GROUPS = \"SELECT principal_group.name, domain.name, principal_group_member.expiration, \"\n            + \"principal_group_member.system_disabled FROM principal_group_member \"\n            + \"JOIN principal_group ON principal_group.group_id=principal_group_member.group_id \"\n            + \"JOIN domain ON domain.domain_id=principal_group.domain_id \"\n            + \"WHERE principal_group_member.principal_id=?;\"", "var_name": "SQL_GET_PRINCIPAL_GROUPS"}, {"original_string": "private static final String SQL_GET_PRINCIPAL_GROUPS_DOMAIN = \"SELECT principal_group.name, domain.name, principal_group_member.expiration, \"\n            + \"principal_group_member.system_disabled FROM principal_group_member \"\n            + \"JOIN principal_group ON principal_group.group_id=principal_group_member.group_id \"\n            + \"JOIN domain ON domain.domain_id=principal_group.domain_id \"\n            + \"WHERE principal_group_member.principal_id=? AND domain.domain_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_PRINCIPAL_GROUPS_DOMAIN = \"SELECT principal_group.name, domain.name, principal_group_member.expiration, \"\n            + \"principal_group_member.system_disabled FROM principal_group_member \"\n            + \"JOIN principal_group ON principal_group.group_id=principal_group_member.group_id \"\n            + \"JOIN domain ON domain.domain_id=principal_group.domain_id \"\n            + \"WHERE principal_group_member.principal_id=? AND domain.domain_id=?;\"", "var_name": "SQL_GET_PRINCIPAL_GROUPS_DOMAIN"}, {"original_string": "private static final String SQL_GET_DOMAIN_GROUPS = \"SELECT * FROM principal_group WHERE domain_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_DOMAIN_GROUPS = \"SELECT * FROM principal_group WHERE domain_id=?;\"", "var_name": "SQL_GET_DOMAIN_GROUPS"}, {"original_string": "private static final String SQL_GET_DOMAIN_GROUP_MEMBERS = \"SELECT principal_group.name, principal.name, \"\n            + \"principal_group_member.expiration, principal_group_member.system_disabled FROM principal \"\n            + \"JOIN principal_group_member ON principal_group_member.principal_id=principal.principal_id \"\n            + \"JOIN principal_group ON principal_group.group_id=principal_group_member.group_id \"\n            + \"WHERE principal_group.domain_id=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_DOMAIN_GROUP_MEMBERS = \"SELECT principal_group.name, principal.name, \"\n            + \"principal_group_member.expiration, principal_group_member.system_disabled FROM principal \"\n            + \"JOIN principal_group_member ON principal_group_member.principal_id=principal.principal_id \"\n            + \"JOIN principal_group ON principal_group.group_id=principal_group_member.group_id \"\n            + \"WHERE principal_group.domain_id=?;\"", "var_name": "SQL_GET_DOMAIN_GROUP_MEMBERS"}, {"original_string": "private static final String SQL_PENDING_ORG_AUDIT_GROUP_MEMBER_LIST = \"SELECT do.name AS domain, grp.name AS group_name, \"\n            + \"principal.name AS member, pgm.expiration, pgm.audit_ref, pgm.req_time, pgm.req_principal \"\n            + \"FROM principal JOIN pending_principal_group_member pgm \"\n            + \"ON pgm.principal_id=principal.principal_id JOIN principal_group grp ON grp.group_id=pgm.group_id JOIN domain do ON grp.domain_id=do.domain_id \"\n            + \"WHERE grp.audit_enabled=true AND grp.domain_id IN ( select domain_id FROM domain WHERE org IN ( \"\n            + \"SELECT DISTINCT role.name AS org FROM role_member JOIN role ON role.role_id=role_member.role_id \"\n            + \"WHERE role_member.principal_id=? AND role.domain_id=?) ) order by do.name, grp.name, principal.name;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_PENDING_ORG_AUDIT_GROUP_MEMBER_LIST = \"SELECT do.name AS domain, grp.name AS group_name, \"\n            + \"principal.name AS member, pgm.expiration, pgm.audit_ref, pgm.req_time, pgm.req_principal \"\n            + \"FROM principal JOIN pending_principal_group_member pgm \"\n            + \"ON pgm.principal_id=principal.principal_id JOIN principal_group grp ON grp.group_id=pgm.group_id JOIN domain do ON grp.domain_id=do.domain_id \"\n            + \"WHERE grp.audit_enabled=true AND grp.domain_id IN ( select domain_id FROM domain WHERE org IN ( \"\n            + \"SELECT DISTINCT role.name AS org FROM role_member JOIN role ON role.role_id=role_member.role_id \"\n            + \"WHERE role_member.principal_id=? AND role.domain_id=?) ) order by do.name, grp.name, principal.name;\"", "var_name": "SQL_PENDING_ORG_AUDIT_GROUP_MEMBER_LIST"}, {"original_string": "private static final String SQL_PENDING_DOMAIN_AUDIT_GROUP_MEMBER_LIST = \"SELECT do.name AS domain, grp.name AS group_name, \"\n            + \"principal.name AS member, pgm.expiration, pgm.audit_ref, pgm.req_time, pgm.req_principal \"\n            + \"FROM principal JOIN pending_principal_group_member pgm \"\n            + \"ON pgm.principal_id=principal.principal_id JOIN principal_group grp ON grp.group_id=pgm.group_id JOIN domain do ON grp.domain_id=do.domain_id \"\n            + \"WHERE grp.audit_enabled=true AND grp.domain_id IN ( select domain_id FROM domain WHERE name IN ( \"\n            + \"SELECT DISTINCT role.name AS domain_name FROM role_member JOIN role ON role.role_id=role_member.role_id \"\n            + \"WHERE role_member.principal_id=? AND role.domain_id=?) ) order by do.name, grp.name, principal.name;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_PENDING_DOMAIN_AUDIT_GROUP_MEMBER_LIST = \"SELECT do.name AS domain, grp.name AS group_name, \"\n            + \"principal.name AS member, pgm.expiration, pgm.audit_ref, pgm.req_time, pgm.req_principal \"\n            + \"FROM principal JOIN pending_principal_group_member pgm \"\n            + \"ON pgm.principal_id=principal.principal_id JOIN principal_group grp ON grp.group_id=pgm.group_id JOIN domain do ON grp.domain_id=do.domain_id \"\n            + \"WHERE grp.audit_enabled=true AND grp.domain_id IN ( select domain_id FROM domain WHERE name IN ( \"\n            + \"SELECT DISTINCT role.name AS domain_name FROM role_member JOIN role ON role.role_id=role_member.role_id \"\n            + \"WHERE role_member.principal_id=? AND role.domain_id=?) ) order by do.name, grp.name, principal.name;\"", "var_name": "SQL_PENDING_DOMAIN_AUDIT_GROUP_MEMBER_LIST"}, {"original_string": "private static final String SQL_PENDING_DOMAIN_ADMIN_GROUP_MEMBER_LIST = \"SELECT do.name AS domain, grp.name AS group_name, \"\n            + \"principal.name AS member, pgm.expiration, pgm.audit_ref, pgm.req_time, pgm.req_principal \"\n            + \"FROM principal JOIN pending_principal_group_member pgm \"\n            + \"ON pgm.principal_id=principal.principal_id JOIN principal_group grp ON grp.group_id=pgm.group_id JOIN domain do ON grp.domain_id=do.domain_id \"\n            + \"WHERE (grp.self_serve=true OR grp.review_enabled=true) AND grp.domain_id IN ( SELECT domain.domain_id FROM domain JOIN role \"\n            + \"ON role.domain_id=domain.domain_id JOIN role_member ON role.role_id=role_member.role_id \"\n            + \"WHERE role_member.principal_id=? AND role_member.active=true AND role.name='admin' ) \"\n            + \"order by do.name, grp.name, principal.name;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_PENDING_DOMAIN_ADMIN_GROUP_MEMBER_LIST = \"SELECT do.name AS domain, grp.name AS group_name, \"\n            + \"principal.name AS member, pgm.expiration, pgm.audit_ref, pgm.req_time, pgm.req_principal \"\n            + \"FROM principal JOIN pending_principal_group_member pgm \"\n            + \"ON pgm.principal_id=principal.principal_id JOIN principal_group grp ON grp.group_id=pgm.group_id JOIN domain do ON grp.domain_id=do.domain_id \"\n            + \"WHERE (grp.self_serve=true OR grp.review_enabled=true) AND grp.domain_id IN ( SELECT domain.domain_id FROM domain JOIN role \"\n            + \"ON role.domain_id=domain.domain_id JOIN role_member ON role.role_id=role_member.role_id \"\n            + \"WHERE role_member.principal_id=? AND role_member.active=true AND role.name='admin' ) \"\n            + \"order by do.name, grp.name, principal.name;\"", "var_name": "SQL_PENDING_DOMAIN_ADMIN_GROUP_MEMBER_LIST"}, {"original_string": "private static final String SQL_GET_EXPIRED_PENDING_GROUP_MEMBERS = \"SELECT d.name, r.name, p.name, pgm.expiration, pgm.audit_ref, pgm.req_time, pgm.req_principal \"\n            + \"FROM principal p JOIN pending_principal_group_member pgm \"\n            + \"ON pgm.principal_id=p.principal_id JOIN principal_group grp ON pgm.group_id=grp.group_id JOIN domain d ON d.domain_id=grp.domain_id \"\n            + \"WHERE pgm.req_time < (CURRENT_TIME - INTERVAL ? DAY);\";", "modifier": "private static final", "type": "String", "declarator": "SQL_GET_EXPIRED_PENDING_GROUP_MEMBERS = \"SELECT d.name, r.name, p.name, pgm.expiration, pgm.audit_ref, pgm.req_time, pgm.req_principal \"\n            + \"FROM principal p JOIN pending_principal_group_member pgm \"\n            + \"ON pgm.principal_id=p.principal_id JOIN principal_group grp ON pgm.group_id=grp.group_id JOIN domain d ON d.domain_id=grp.domain_id \"\n            + \"WHERE pgm.req_time < (CURRENT_TIME - INTERVAL ? DAY);\"", "var_name": "SQL_GET_EXPIRED_PENDING_GROUP_MEMBERS"}, {"original_string": "private static final String SQL_AUDIT_ENABLED_PENDING_GROUP_MEMBERSHIP_REMINDER_ENTRIES = \"SELECT distinct d.org, d.name FROM pending_principal_group_member pgm \"\n            + \"JOIN principal_group grp ON grp.group_id=pgm.group_id JOIN domain d ON grp.domain_id=d.domain_id \"\n            + \"WHERE grp.audit_enabled=true AND pgm.last_notified_time=? AND pgm.server=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_AUDIT_ENABLED_PENDING_GROUP_MEMBERSHIP_REMINDER_ENTRIES = \"SELECT distinct d.org, d.name FROM pending_principal_group_member pgm \"\n            + \"JOIN principal_group grp ON grp.group_id=pgm.group_id JOIN domain d ON grp.domain_id=d.domain_id \"\n            + \"WHERE grp.audit_enabled=true AND pgm.last_notified_time=? AND pgm.server=?;\"", "var_name": "SQL_AUDIT_ENABLED_PENDING_GROUP_MEMBERSHIP_REMINDER_ENTRIES"}, {"original_string": "private static final String SQL_UPDATE_PENDING_GROUP_MEMBERS_NOTIFICATION_TIMESTAMP = \"UPDATE pending_principal_group_member SET last_notified_time=?, server=? \"\n            + \"WHERE DAYOFWEEK(req_time)=DAYOFWEEK(?) AND (last_notified_time IS NULL || last_notified_time < (CURRENT_TIME - INTERVAL ? DAY));\";", "modifier": "private static final", "type": "String", "declarator": "SQL_UPDATE_PENDING_GROUP_MEMBERS_NOTIFICATION_TIMESTAMP = \"UPDATE pending_principal_group_member SET last_notified_time=?, server=? \"\n            + \"WHERE DAYOFWEEK(req_time)=DAYOFWEEK(?) AND (last_notified_time IS NULL || last_notified_time < (CURRENT_TIME - INTERVAL ? DAY));\"", "var_name": "SQL_UPDATE_PENDING_GROUP_MEMBERS_NOTIFICATION_TIMESTAMP"}, {"original_string": "private static final String SQL_ADMIN_PENDING_GROUP_MEMBERSHIP_REMINDER_DOMAINS = \"SELECT distinct d.name FROM pending_principal_group_member pgm \"\n            + \"JOIN principal_group grp ON grp.group_id=pgm.group_id JOIN domain d ON grp.domain_id=d.domain_id \"\n            + \"WHERE grp.self_serve=true AND pgm.last_notified_time=? AND pgm.server=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_ADMIN_PENDING_GROUP_MEMBERSHIP_REMINDER_DOMAINS = \"SELECT distinct d.name FROM pending_principal_group_member pgm \"\n            + \"JOIN principal_group grp ON grp.group_id=pgm.group_id JOIN domain d ON grp.domain_id=d.domain_id \"\n            + \"WHERE grp.self_serve=true AND pgm.last_notified_time=? AND pgm.server=?;\"", "var_name": "SQL_ADMIN_PENDING_GROUP_MEMBERSHIP_REMINDER_DOMAINS"}, {"original_string": "private static final String SQL_UPDATE_GROUP_MEMBERS_EXPIRY_NOTIFICATION_TIMESTAMP = \"UPDATE principal_group_member SET last_notified_time=?, server=? \"\n            + \"WHERE expiration > CURRENT_TIME AND DATEDIFF(expiration, CURRENT_TIME) IN (0,1,7,14,21,28) \"\n            + \"AND (last_notified_time IS NULL || last_notified_time < (CURRENT_TIME - INTERVAL ? DAY));\";", "modifier": "private static final", "type": "String", "declarator": "SQL_UPDATE_GROUP_MEMBERS_EXPIRY_NOTIFICATION_TIMESTAMP = \"UPDATE principal_group_member SET last_notified_time=?, server=? \"\n            + \"WHERE expiration > CURRENT_TIME AND DATEDIFF(expiration, CURRENT_TIME) IN (0,1,7,14,21,28) \"\n            + \"AND (last_notified_time IS NULL || last_notified_time < (CURRENT_TIME - INTERVAL ? DAY));\"", "var_name": "SQL_UPDATE_GROUP_MEMBERS_EXPIRY_NOTIFICATION_TIMESTAMP"}, {"original_string": "private static final String SQL_LIST_NOTIFY_TEMPORARY_GROUP_MEMBERS = \"SELECT domain.name AS domain_name, principal_group.name AS group_name, \"\n            + \"principal.name AS principal_name, principal_group_member.expiration FROM principal_group_member \"\n            + \"JOIN principal_group ON principal_group.group_id=principal_group_member.group_id \"\n            + \"JOIN principal ON principal.principal_id=principal_group_member.principal_id \"\n            + \"JOIN domain ON domain.domain_id=principal_group.domain_id \"\n            + \"WHERE principal_group_member.last_notified_time=? AND principal_group_member.server=?;\";", "modifier": "private static final", "type": "String", "declarator": "SQL_LIST_NOTIFY_TEMPORARY_GROUP_MEMBERS = \"SELECT domain.name AS domain_name, principal_group.name AS group_name, \"\n            + \"principal.name AS principal_name, principal_group_member.expiration FROM principal_group_member \"\n            + \"JOIN principal_group ON principal_group.group_id=principal_group_member.group_id \"\n            + \"JOIN principal ON principal.principal_id=principal_group_member.principal_id \"\n            + \"JOIN domain ON domain.domain_id=principal_group.domain_id \"\n            + \"WHERE principal_group_member.last_notified_time=? AND principal_group_member.server=?;\"", "var_name": "SQL_LIST_NOTIFY_TEMPORARY_GROUP_MEMBERS"}, {"original_string": "private static final String CACHE_DOMAIN    = \"d:\";", "modifier": "private static final", "type": "String", "declarator": "CACHE_DOMAIN    = \"d:\"", "var_name": "CACHE_DOMAIN"}, {"original_string": "private static final String CACHE_ROLE      = \"r:\";", "modifier": "private static final", "type": "String", "declarator": "CACHE_ROLE      = \"r:\"", "var_name": "CACHE_ROLE"}, {"original_string": "private static final String CACHE_GROUP     = \"g:\";", "modifier": "private static final", "type": "String", "declarator": "CACHE_GROUP     = \"g:\"", "var_name": "CACHE_GROUP"}, {"original_string": "private static final String CACHE_POLICY    = \"p:\";", "modifier": "private static final", "type": "String", "declarator": "CACHE_POLICY    = \"p:\"", "var_name": "CACHE_POLICY"}, {"original_string": "private static final String CACHE_SERVICE   = \"s:\";", "modifier": "private static final", "type": "String", "declarator": "CACHE_SERVICE   = \"s:\"", "var_name": "CACHE_SERVICE"}, {"original_string": "private static final String CACHE_PRINCIPAL = \"u:\";", "modifier": "private static final", "type": "String", "declarator": "CACHE_PRINCIPAL = \"u:\"", "var_name": "CACHE_PRINCIPAL"}, {"original_string": "private static final String CACHE_HOST      = \"h:\";", "modifier": "private static final", "type": "String", "declarator": "CACHE_HOST      = \"h:\"", "var_name": "CACHE_HOST"}, {"original_string": "private static final String ALL_PRINCIPALS  = \"*\";", "modifier": "private static final", "type": "String", "declarator": "ALL_PRINCIPALS  = \"*\"", "var_name": "ALL_PRINCIPALS"}, {"original_string": "private static final String AWS_ARN_PREFIX  = \"arn:aws:iam::\";", "modifier": "private static final", "type": "String", "declarator": "AWS_ARN_PREFIX  = \"arn:aws:iam::\"", "var_name": "AWS_ARN_PREFIX"}, {"original_string": "private static final String MYSQL_SERVER_TIMEZONE = System.getProperty(ZMSConsts.ZMS_PROP_MYSQL_SERVER_TIMEZONE, \"GMT\");", "modifier": "private static final", "type": "String", "declarator": "MYSQL_SERVER_TIMEZONE = System.getProperty(ZMSConsts.ZMS_PROP_MYSQL_SERVER_TIMEZONE, \"GMT\")", "var_name": "MYSQL_SERVER_TIMEZONE"}, {"original_string": "Connection con;", "modifier": "", "type": "Connection", "declarator": "con", "var_name": "con"}, {"original_string": "boolean transactionCompleted;", "modifier": "", "type": "boolean", "declarator": "transactionCompleted", "var_name": "transactionCompleted"}, {"original_string": "int queryTimeout = 60;", "modifier": "", "type": "int", "declarator": "queryTimeout = 60", "var_name": "queryTimeout"}, {"original_string": "Map<String, Integer> objectMap;", "modifier": "", "type": "Map<String, Integer>", "declarator": "objectMap", "var_name": "objectMap"}, {"original_string": "public static Comparator<RoleMember> RoleMemberComparator = (roleMember1, roleMember2) -> {\n        String roleMember1Name = roleMember1.getMemberName().toLowerCase();\n        String roleMember2Name = roleMember2.getMemberName().toLowerCase();\n        return roleMember1Name.compareTo(roleMember2Name);\n    };", "modifier": "public static", "type": "Comparator<RoleMember>", "declarator": "RoleMemberComparator = (roleMember1, roleMember2) -> {\n        String roleMember1Name = roleMember1.getMemberName().toLowerCase();\n        String roleMember2Name = roleMember2.getMemberName().toLowerCase();\n        return roleMember1Name.compareTo(roleMember2Name);\n    }", "var_name": "RoleMemberComparator"}, {"original_string": "public static Comparator<GroupMember> GroupMemberComparator = (groupMember1, groupMember2) -> {\n        String groupMember1Name = groupMember1.getMemberName().toLowerCase();\n        String groupMember2Name = groupMember2.getMemberName().toLowerCase();\n        return groupMember1Name.compareTo(groupMember2Name);\n    };", "modifier": "public static", "type": "Comparator<GroupMember>", "declarator": "GroupMemberComparator = (groupMember1, groupMember2) -> {\n        String groupMember1Name = groupMember1.getMemberName().toLowerCase();\n        String groupMember2Name = groupMember2.getMemberName().toLowerCase();\n        return groupMember1Name.compareTo(groupMember2Name);\n    }", "var_name": "GroupMemberComparator"}], "methods": [{"identifier": "JDBCConnection", "parameters": "(Connection con, boolean autoCommit)", "modifiers": "public", "return": "", "signature": " JDBCConnection(Connection con, boolean autoCommit)", "full_signature": "public  JDBCConnection(Connection con, boolean autoCommit)", "class_method_signature": "JDBCConnection.JDBCConnection(Connection con, boolean autoCommit)", "testcase": false, "constructor": true}, {"identifier": "setOperationTimeout", "parameters": "(int queryTimeout)", "modifiers": "@Override public", "return": "void", "signature": "void setOperationTimeout(int queryTimeout)", "full_signature": "@Override public void setOperationTimeout(int queryTimeout)", "class_method_signature": "JDBCConnection.setOperationTimeout(int queryTimeout)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "JDBCConnection.close()", "testcase": false, "constructor": false}, {"identifier": "rollbackChanges", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void rollbackChanges()", "full_signature": "@Override public void rollbackChanges()", "class_method_signature": "JDBCConnection.rollbackChanges()", "testcase": false, "constructor": false}, {"identifier": "commitChanges", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void commitChanges()", "full_signature": "@Override public void commitChanges()", "class_method_signature": "JDBCConnection.commitChanges()", "testcase": false, "constructor": false}, {"identifier": "executeUpdate", "parameters": "(PreparedStatement ps, String caller)", "modifiers": "", "return": "int", "signature": "int executeUpdate(PreparedStatement ps, String caller)", "full_signature": " int executeUpdate(PreparedStatement ps, String caller)", "class_method_signature": "JDBCConnection.executeUpdate(PreparedStatement ps, String caller)", "testcase": false, "constructor": false}, {"identifier": "executeQuery", "parameters": "(PreparedStatement ps, String caller)", "modifiers": "", "return": "ResultSet", "signature": "ResultSet executeQuery(PreparedStatement ps, String caller)", "full_signature": " ResultSet executeQuery(PreparedStatement ps, String caller)", "class_method_signature": "JDBCConnection.executeQuery(PreparedStatement ps, String caller)", "testcase": false, "constructor": false}, {"identifier": "saveDomainSettings", "parameters": "(String domainName, ResultSet rs)", "modifiers": "", "return": "Domain", "signature": "Domain saveDomainSettings(String domainName, ResultSet rs)", "full_signature": " Domain saveDomainSettings(String domainName, ResultSet rs)", "class_method_signature": "JDBCConnection.saveDomainSettings(String domainName, ResultSet rs)", "testcase": false, "constructor": false}, {"identifier": "getDomain", "parameters": "(String domainName)", "modifiers": "@Override public", "return": "Domain", "signature": "Domain getDomain(String domainName)", "full_signature": "@Override public Domain getDomain(String domainName)", "class_method_signature": "JDBCConnection.getDomain(String domainName)", "testcase": false, "constructor": false}, {"identifier": "insertDomain", "parameters": "(Domain domain)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean insertDomain(Domain domain)", "full_signature": "@Override public boolean insertDomain(Domain domain)", "class_method_signature": "JDBCConnection.insertDomain(Domain domain)", "testcase": false, "constructor": false}, {"identifier": "verifyDomainNameDashUniqueness", "parameters": "(final String name, String caller)", "modifiers": "", "return": "void", "signature": "void verifyDomainNameDashUniqueness(final String name, String caller)", "full_signature": " void verifyDomainNameDashUniqueness(final String name, String caller)", "class_method_signature": "JDBCConnection.verifyDomainNameDashUniqueness(final String name, String caller)", "testcase": false, "constructor": false}, {"identifier": "verifyDomainProductIdUniqueness", "parameters": "(String name, Integer productId, String caller)", "modifiers": "", "return": "void", "signature": "void verifyDomainProductIdUniqueness(String name, Integer productId, String caller)", "full_signature": " void verifyDomainProductIdUniqueness(String name, Integer productId, String caller)", "class_method_signature": "JDBCConnection.verifyDomainProductIdUniqueness(String name, Integer productId, String caller)", "testcase": false, "constructor": false}, {"identifier": "verifyDomainAccountUniqueness", "parameters": "(String name, String account, String caller)", "modifiers": "", "return": "void", "signature": "void verifyDomainAccountUniqueness(String name, String account, String caller)", "full_signature": " void verifyDomainAccountUniqueness(String name, String account, String caller)", "class_method_signature": "JDBCConnection.verifyDomainAccountUniqueness(String name, String account, String caller)", "testcase": false, "constructor": false}, {"identifier": "updateDomain", "parameters": "(Domain domain)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateDomain(Domain domain)", "full_signature": "@Override public boolean updateDomain(Domain domain)", "class_method_signature": "JDBCConnection.updateDomain(Domain domain)", "testcase": false, "constructor": false}, {"identifier": "updateDomainModTimestamp", "parameters": "(String domainName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateDomainModTimestamp(String domainName)", "full_signature": "@Override public boolean updateDomainModTimestamp(String domainName)", "class_method_signature": "JDBCConnection.updateDomainModTimestamp(String domainName)", "testcase": false, "constructor": false}, {"identifier": "getDomainModTimestamp", "parameters": "(String domainName)", "modifiers": "@Override public", "return": "long", "signature": "long getDomainModTimestamp(String domainName)", "full_signature": "@Override public long getDomainModTimestamp(String domainName)", "class_method_signature": "JDBCConnection.getDomainModTimestamp(String domainName)", "testcase": false, "constructor": false}, {"identifier": "deleteDomain", "parameters": "(String domainName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deleteDomain(String domainName)", "full_signature": "@Override public boolean deleteDomain(String domainName)", "class_method_signature": "JDBCConnection.deleteDomain(String domainName)", "testcase": false, "constructor": false}, {"identifier": "prepareDomainScanStatement", "parameters": "(String prefix, long modifiedSince)", "modifiers": "", "return": "PreparedStatement", "signature": "PreparedStatement prepareDomainScanStatement(String prefix, long modifiedSince)", "full_signature": " PreparedStatement prepareDomainScanStatement(String prefix, long modifiedSince)", "class_method_signature": "JDBCConnection.prepareDomainScanStatement(String prefix, long modifiedSince)", "testcase": false, "constructor": false}, {"identifier": "prepareScanByRoleStatement", "parameters": "(String roleMember, String roleName)", "modifiers": "", "return": "PreparedStatement", "signature": "PreparedStatement prepareScanByRoleStatement(String roleMember, String roleName)", "full_signature": " PreparedStatement prepareScanByRoleStatement(String roleMember, String roleName)", "class_method_signature": "JDBCConnection.prepareScanByRoleStatement(String roleMember, String roleName)", "testcase": false, "constructor": false}, {"identifier": "lookupDomainByRole", "parameters": "(String roleMember, String roleName)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> lookupDomainByRole(String roleMember, String roleName)", "full_signature": "@Override public List<String> lookupDomainByRole(String roleMember, String roleName)", "class_method_signature": "JDBCConnection.lookupDomainByRole(String roleMember, String roleName)", "testcase": false, "constructor": false}, {"identifier": "lookupDomainById", "parameters": "(String account, int productId)", "modifiers": "@Override public", "return": "String", "signature": "String lookupDomainById(String account, int productId)", "full_signature": "@Override public String lookupDomainById(String account, int productId)", "class_method_signature": "JDBCConnection.lookupDomainById(String account, int productId)", "testcase": false, "constructor": false}, {"identifier": "listDomains", "parameters": "(String prefix, long modifiedSince)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> listDomains(String prefix, long modifiedSince)", "full_signature": "@Override public List<String> listDomains(String prefix, long modifiedSince)", "class_method_signature": "JDBCConnection.listDomains(String prefix, long modifiedSince)", "testcase": false, "constructor": false}, {"identifier": "insertDomainTemplate", "parameters": "(String domainName, String templateName, String params)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean insertDomainTemplate(String domainName, String templateName, String params)", "full_signature": "@Override public boolean insertDomainTemplate(String domainName, String templateName, String params)", "class_method_signature": "JDBCConnection.insertDomainTemplate(String domainName, String templateName, String params)", "testcase": false, "constructor": false}, {"identifier": "updateDomainTemplate", "parameters": "(String domainName, String templateName, TemplateMetaData templateMetaData)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateDomainTemplate(String domainName, String templateName, TemplateMetaData templateMetaData)", "full_signature": "@Override public boolean updateDomainTemplate(String domainName, String templateName, TemplateMetaData templateMetaData)", "class_method_signature": "JDBCConnection.updateDomainTemplate(String domainName, String templateName, TemplateMetaData templateMetaData)", "testcase": false, "constructor": false}, {"identifier": "deleteDomainTemplate", "parameters": "(String domainName, String templateName, String params)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deleteDomainTemplate(String domainName, String templateName, String params)", "full_signature": "@Override public boolean deleteDomainTemplate(String domainName, String templateName, String params)", "class_method_signature": "JDBCConnection.deleteDomainTemplate(String domainName, String templateName, String params)", "testcase": false, "constructor": false}, {"identifier": "listDomainTemplates", "parameters": "(String domainName)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> listDomainTemplates(String domainName)", "full_signature": "@Override public List<String> listDomainTemplates(String domainName)", "class_method_signature": "JDBCConnection.listDomainTemplates(String domainName)", "testcase": false, "constructor": false}, {"identifier": "getDomainFromTemplateName", "parameters": "(Map<String, Integer> templateNameAndLatestVersion)", "modifiers": "@Override public", "return": "Map<String, List<String>>", "signature": "Map<String, List<String>> getDomainFromTemplateName(Map<String, Integer> templateNameAndLatestVersion)", "full_signature": "@Override public Map<String, List<String>> getDomainFromTemplateName(Map<String, Integer> templateNameAndLatestVersion)", "class_method_signature": "JDBCConnection.getDomainFromTemplateName(Map<String, Integer> templateNameAndLatestVersion)", "testcase": false, "constructor": false}, {"identifier": "getDomainId", "parameters": "(String domainName)", "modifiers": "", "return": "int", "signature": "int getDomainId(String domainName)", "full_signature": " int getDomainId(String domainName)", "class_method_signature": "JDBCConnection.getDomainId(String domainName)", "testcase": false, "constructor": false}, {"identifier": "getDomainId", "parameters": "(String domainName, boolean domainStateCheck)", "modifiers": "", "return": "int", "signature": "int getDomainId(String domainName, boolean domainStateCheck)", "full_signature": " int getDomainId(String domainName, boolean domainStateCheck)", "class_method_signature": "JDBCConnection.getDomainId(String domainName, boolean domainStateCheck)", "testcase": false, "constructor": false}, {"identifier": "getPolicyId", "parameters": "(int domainId, String policyName)", "modifiers": "", "return": "int", "signature": "int getPolicyId(int domainId, String policyName)", "full_signature": " int getPolicyId(int domainId, String policyName)", "class_method_signature": "JDBCConnection.getPolicyId(int domainId, String policyName)", "testcase": false, "constructor": false}, {"identifier": "getRoleId", "parameters": "(int domainId, String roleName)", "modifiers": "", "return": "int", "signature": "int getRoleId(int domainId, String roleName)", "full_signature": " int getRoleId(int domainId, String roleName)", "class_method_signature": "JDBCConnection.getRoleId(int domainId, String roleName)", "testcase": false, "constructor": false}, {"identifier": "getGroupId", "parameters": "(int domainId, final String groupName)", "modifiers": "", "return": "int", "signature": "int getGroupId(int domainId, final String groupName)", "full_signature": " int getGroupId(int domainId, final String groupName)", "class_method_signature": "JDBCConnection.getGroupId(int domainId, final String groupName)", "testcase": false, "constructor": false}, {"identifier": "getServiceId", "parameters": "(int domainId, String serviceName)", "modifiers": "", "return": "int", "signature": "int getServiceId(int domainId, String serviceName)", "full_signature": " int getServiceId(int domainId, String serviceName)", "class_method_signature": "JDBCConnection.getServiceId(int domainId, String serviceName)", "testcase": false, "constructor": false}, {"identifier": "getPrincipalId", "parameters": "(String principal)", "modifiers": "", "return": "int", "signature": "int getPrincipalId(String principal)", "full_signature": " int getPrincipalId(String principal)", "class_method_signature": "JDBCConnection.getPrincipalId(String principal)", "testcase": false, "constructor": false}, {"identifier": "getHostId", "parameters": "(String hostName)", "modifiers": "", "return": "int", "signature": "int getHostId(String hostName)", "full_signature": " int getHostId(String hostName)", "class_method_signature": "JDBCConnection.getHostId(String hostName)", "testcase": false, "constructor": false}, {"identifier": "getLastInsertId", "parameters": "()", "modifiers": "", "return": "int", "signature": "int getLastInsertId()", "full_signature": " int getLastInsertId()", "class_method_signature": "JDBCConnection.getLastInsertId()", "testcase": false, "constructor": false}, {"identifier": "preparePrincipalScanStatement", "parameters": "(String domainName)", "modifiers": "", "return": "PreparedStatement", "signature": "PreparedStatement preparePrincipalScanStatement(String domainName)", "full_signature": " PreparedStatement preparePrincipalScanStatement(String domainName)", "class_method_signature": "JDBCConnection.preparePrincipalScanStatement(String domainName)", "testcase": false, "constructor": false}, {"identifier": "listPrincipals", "parameters": "(String domainName)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> listPrincipals(String domainName)", "full_signature": "@Override public List<String> listPrincipals(String domainName)", "class_method_signature": "JDBCConnection.listPrincipals(String domainName)", "testcase": false, "constructor": false}, {"identifier": "deletePrincipal", "parameters": "(String principalName, boolean subDomains)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deletePrincipal(String principalName, boolean subDomains)", "full_signature": "@Override public boolean deletePrincipal(String principalName, boolean subDomains)", "class_method_signature": "JDBCConnection.deletePrincipal(String principalName, boolean subDomains)", "testcase": false, "constructor": false}, {"identifier": "getRole", "parameters": "(String domainName, String roleName)", "modifiers": "@Override public", "return": "Role", "signature": "Role getRole(String domainName, String roleName)", "full_signature": "@Override public Role getRole(String domainName, String roleName)", "class_method_signature": "JDBCConnection.getRole(String domainName, String roleName)", "testcase": false, "constructor": false}, {"identifier": "insertRole", "parameters": "(String domainName, Role role)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean insertRole(String domainName, Role role)", "full_signature": "@Override public boolean insertRole(String domainName, Role role)", "class_method_signature": "JDBCConnection.insertRole(String domainName, Role role)", "testcase": false, "constructor": false}, {"identifier": "updateRole", "parameters": "(String domainName, Role role)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateRole(String domainName, Role role)", "full_signature": "@Override public boolean updateRole(String domainName, Role role)", "class_method_signature": "JDBCConnection.updateRole(String domainName, Role role)", "testcase": false, "constructor": false}, {"identifier": "updateRoleModTimestamp", "parameters": "(String domainName, String roleName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateRoleModTimestamp(String domainName, String roleName)", "full_signature": "@Override public boolean updateRoleModTimestamp(String domainName, String roleName)", "class_method_signature": "JDBCConnection.updateRoleModTimestamp(String domainName, String roleName)", "testcase": false, "constructor": false}, {"identifier": "updateRoleReviewTimestamp", "parameters": "(String domainName, String roleName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateRoleReviewTimestamp(String domainName, String roleName)", "full_signature": "@Override public boolean updateRoleReviewTimestamp(String domainName, String roleName)", "class_method_signature": "JDBCConnection.updateRoleReviewTimestamp(String domainName, String roleName)", "testcase": false, "constructor": false}, {"identifier": "updateServiceIdentityModTimestamp", "parameters": "(String domainName, String serviceName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateServiceIdentityModTimestamp(String domainName, String serviceName)", "full_signature": "@Override public boolean updateServiceIdentityModTimestamp(String domainName, String serviceName)", "class_method_signature": "JDBCConnection.updateServiceIdentityModTimestamp(String domainName, String serviceName)", "testcase": false, "constructor": false}, {"identifier": "deleteRole", "parameters": "(String domainName, String roleName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deleteRole(String domainName, String roleName)", "full_signature": "@Override public boolean deleteRole(String domainName, String roleName)", "class_method_signature": "JDBCConnection.deleteRole(String domainName, String roleName)", "testcase": false, "constructor": false}, {"identifier": "listRoles", "parameters": "(String domainName)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> listRoles(String domainName)", "full_signature": "@Override public List<String> listRoles(String domainName)", "class_method_signature": "JDBCConnection.listRoles(String domainName)", "testcase": false, "constructor": false}, {"identifier": "countRoles", "parameters": "(String domainName)", "modifiers": "@Override public", "return": "int", "signature": "int countRoles(String domainName)", "full_signature": "@Override public int countRoles(String domainName)", "class_method_signature": "JDBCConnection.countRoles(String domainName)", "testcase": false, "constructor": false}, {"identifier": "getStdRoleMembers", "parameters": "(int roleId, List<RoleMember> members, final String caller)", "modifiers": "", "return": "void", "signature": "void getStdRoleMembers(int roleId, List<RoleMember> members, final String caller)", "full_signature": " void getStdRoleMembers(int roleId, List<RoleMember> members, final String caller)", "class_method_signature": "JDBCConnection.getStdRoleMembers(int roleId, List<RoleMember> members, final String caller)", "testcase": false, "constructor": false}, {"identifier": "getPendingRoleMembers", "parameters": "(int roleId, List<RoleMember> members, final String caller)", "modifiers": "", "return": "void", "signature": "void getPendingRoleMembers(int roleId, List<RoleMember> members, final String caller)", "full_signature": " void getPendingRoleMembers(int roleId, List<RoleMember> members, final String caller)", "class_method_signature": "JDBCConnection.getPendingRoleMembers(int roleId, List<RoleMember> members, final String caller)", "testcase": false, "constructor": false}, {"identifier": "listRoleMembers", "parameters": "(String domainName, String roleName, Boolean pending)", "modifiers": "@Override public", "return": "List<RoleMember>", "signature": "List<RoleMember> listRoleMembers(String domainName, String roleName, Boolean pending)", "full_signature": "@Override public List<RoleMember> listRoleMembers(String domainName, String roleName, Boolean pending)", "class_method_signature": "JDBCConnection.listRoleMembers(String domainName, String roleName, Boolean pending)", "testcase": false, "constructor": false}, {"identifier": "countRoleMembers", "parameters": "(String domainName, String roleName)", "modifiers": "@Override public", "return": "int", "signature": "int countRoleMembers(String domainName, String roleName)", "full_signature": "@Override public int countRoleMembers(String domainName, String roleName)", "class_method_signature": "JDBCConnection.countRoleMembers(String domainName, String roleName)", "testcase": false, "constructor": false}, {"identifier": "listPrincipalRoles", "parameters": "(String domainName, String principalName)", "modifiers": "@Override public", "return": "List<PrincipalRole>", "signature": "List<PrincipalRole> listPrincipalRoles(String domainName, String principalName)", "full_signature": "@Override public List<PrincipalRole> listPrincipalRoles(String domainName, String principalName)", "class_method_signature": "JDBCConnection.listPrincipalRoles(String domainName, String principalName)", "testcase": false, "constructor": false}, {"identifier": "listPrincipalRolesForAllDomains", "parameters": "(String principalName, String caller)", "modifiers": "", "return": "List<PrincipalRole>", "signature": "List<PrincipalRole> listPrincipalRolesForAllDomains(String principalName, String caller)", "full_signature": " List<PrincipalRole> listPrincipalRolesForAllDomains(String principalName, String caller)", "class_method_signature": "JDBCConnection.listPrincipalRolesForAllDomains(String principalName, String caller)", "testcase": false, "constructor": false}, {"identifier": "listPrincipalRolesForOneDomain", "parameters": "(String domainName, String principalName, String caller)", "modifiers": "", "return": "List<PrincipalRole>", "signature": "List<PrincipalRole> listPrincipalRolesForOneDomain(String domainName, String principalName, String caller)", "full_signature": " List<PrincipalRole> listPrincipalRolesForOneDomain(String domainName, String principalName, String caller)", "class_method_signature": "JDBCConnection.listPrincipalRolesForOneDomain(String domainName, String principalName, String caller)", "testcase": false, "constructor": false}, {"identifier": "listRoleAuditLogs", "parameters": "(String domainName, String roleName)", "modifiers": "@Override public", "return": "List<RoleAuditLog>", "signature": "List<RoleAuditLog> listRoleAuditLogs(String domainName, String roleName)", "full_signature": "@Override public List<RoleAuditLog> listRoleAuditLogs(String domainName, String roleName)", "class_method_signature": "JDBCConnection.listRoleAuditLogs(String domainName, String roleName)", "testcase": false, "constructor": false}, {"identifier": "parsePrincipal", "parameters": "(String principal, StringBuilder domain, StringBuilder name)", "modifiers": "", "return": "boolean", "signature": "boolean parsePrincipal(String principal, StringBuilder domain, StringBuilder name)", "full_signature": " boolean parsePrincipal(String principal, StringBuilder domain, StringBuilder name)", "class_method_signature": "JDBCConnection.parsePrincipal(String principal, StringBuilder domain, StringBuilder name)", "testcase": false, "constructor": false}, {"identifier": "getRoleMembership", "parameters": "(final String query, int roleId, final String member, long expiration,\n            Membership membership, boolean disabledFlagCheck, final String caller)", "modifiers": "", "return": "boolean", "signature": "boolean getRoleMembership(final String query, int roleId, final String member, long expiration,\n            Membership membership, boolean disabledFlagCheck, final String caller)", "full_signature": " boolean getRoleMembership(final String query, int roleId, final String member, long expiration,\n            Membership membership, boolean disabledFlagCheck, final String caller)", "class_method_signature": "JDBCConnection.getRoleMembership(final String query, int roleId, final String member, long expiration,\n            Membership membership, boolean disabledFlagCheck, final String caller)", "testcase": false, "constructor": false}, {"identifier": "getRoleMember", "parameters": "(String domainName, String roleName, String member,\n            long expiration, boolean pending)", "modifiers": "@Override public", "return": "Membership", "signature": "Membership getRoleMember(String domainName, String roleName, String member,\n            long expiration, boolean pending)", "full_signature": "@Override public Membership getRoleMember(String domainName, String roleName, String member,\n            long expiration, boolean pending)", "class_method_signature": "JDBCConnection.getRoleMember(String domainName, String roleName, String member,\n            long expiration, boolean pending)", "testcase": false, "constructor": false}, {"identifier": "insertPrincipal", "parameters": "(String principal)", "modifiers": "", "return": "int", "signature": "int insertPrincipal(String principal)", "full_signature": " int insertPrincipal(String principal)", "class_method_signature": "JDBCConnection.insertPrincipal(String principal)", "testcase": false, "constructor": false}, {"identifier": "insertHost", "parameters": "(String hostName)", "modifiers": "", "return": "int", "signature": "int insertHost(String hostName)", "full_signature": " int insertHost(String hostName)", "class_method_signature": "JDBCConnection.insertHost(String hostName)", "testcase": false, "constructor": false}, {"identifier": "roleMemberExists", "parameters": "(int roleId, int principalId, boolean pending, final String caller)", "modifiers": "", "return": "boolean", "signature": "boolean roleMemberExists(int roleId, int principalId, boolean pending, final String caller)", "full_signature": " boolean roleMemberExists(int roleId, int principalId, boolean pending, final String caller)", "class_method_signature": "JDBCConnection.roleMemberExists(int roleId, int principalId, boolean pending, final String caller)", "testcase": false, "constructor": false}, {"identifier": "insertRoleMember", "parameters": "(String domainName, String roleName, RoleMember roleMember,\n            String admin, String auditRef)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean insertRoleMember(String domainName, String roleName, RoleMember roleMember,\n            String admin, String auditRef)", "full_signature": "@Override public boolean insertRoleMember(String domainName, String roleName, RoleMember roleMember,\n            String admin, String auditRef)", "class_method_signature": "JDBCConnection.insertRoleMember(String domainName, String roleName, RoleMember roleMember,\n            String admin, String auditRef)", "testcase": false, "constructor": false}, {"identifier": "insertPendingRoleMember", "parameters": "(int roleId, int principalId, RoleMember roleMember,\n            final String admin, final String auditRef, boolean roleMemberExists, final String caller)", "modifiers": "", "return": "boolean", "signature": "boolean insertPendingRoleMember(int roleId, int principalId, RoleMember roleMember,\n            final String admin, final String auditRef, boolean roleMemberExists, final String caller)", "full_signature": " boolean insertPendingRoleMember(int roleId, int principalId, RoleMember roleMember,\n            final String admin, final String auditRef, boolean roleMemberExists, final String caller)", "class_method_signature": "JDBCConnection.insertPendingRoleMember(int roleId, int principalId, RoleMember roleMember,\n            final String admin, final String auditRef, boolean roleMemberExists, final String caller)", "testcase": false, "constructor": false}, {"identifier": "insertStandardRoleMember", "parameters": "(int roleId, int principalId, RoleMember roleMember,\n            final String admin, final String principal, final String auditRef,\n            boolean roleMemberExists, boolean approveRequest, final String caller)", "modifiers": "", "return": "boolean", "signature": "boolean insertStandardRoleMember(int roleId, int principalId, RoleMember roleMember,\n            final String admin, final String principal, final String auditRef,\n            boolean roleMemberExists, boolean approveRequest, final String caller)", "full_signature": " boolean insertStandardRoleMember(int roleId, int principalId, RoleMember roleMember,\n            final String admin, final String principal, final String auditRef,\n            boolean roleMemberExists, boolean approveRequest, final String caller)", "class_method_signature": "JDBCConnection.insertStandardRoleMember(int roleId, int principalId, RoleMember roleMember,\n            final String admin, final String principal, final String auditRef,\n            boolean roleMemberExists, boolean approveRequest, final String caller)", "testcase": false, "constructor": false}, {"identifier": "updateRoleMemberDisabledState", "parameters": "(String domainName, String roleName, String principal,\n            String admin, int disabledState, String auditRef)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateRoleMemberDisabledState(String domainName, String roleName, String principal,\n            String admin, int disabledState, String auditRef)", "full_signature": "@Override public boolean updateRoleMemberDisabledState(String domainName, String roleName, String principal,\n            String admin, int disabledState, String auditRef)", "class_method_signature": "JDBCConnection.updateRoleMemberDisabledState(String domainName, String roleName, String principal,\n            String admin, int disabledState, String auditRef)", "testcase": false, "constructor": false}, {"identifier": "deleteRoleMember", "parameters": "(String domainName, String roleName, String principal,\n            String admin, String auditRef)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deleteRoleMember(String domainName, String roleName, String principal,\n            String admin, String auditRef)", "full_signature": "@Override public boolean deleteRoleMember(String domainName, String roleName, String principal,\n            String admin, String auditRef)", "class_method_signature": "JDBCConnection.deleteRoleMember(String domainName, String roleName, String principal,\n            String admin, String auditRef)", "testcase": false, "constructor": false}, {"identifier": "insertRoleAuditLog", "parameters": "(int roleId, String admin, String member,\n            String action, String auditRef)", "modifiers": "", "return": "boolean", "signature": "boolean insertRoleAuditLog(int roleId, String admin, String member,\n            String action, String auditRef)", "full_signature": " boolean insertRoleAuditLog(int roleId, String admin, String member,\n            String action, String auditRef)", "class_method_signature": "JDBCConnection.insertRoleAuditLog(int roleId, String admin, String member,\n            String action, String auditRef)", "testcase": false, "constructor": false}, {"identifier": "getAssertion", "parameters": "(String domainName, String policyName, Long assertionId)", "modifiers": "@Override public", "return": "Assertion", "signature": "Assertion getAssertion(String domainName, String policyName, Long assertionId)", "full_signature": "@Override public Assertion getAssertion(String domainName, String policyName, Long assertionId)", "class_method_signature": "JDBCConnection.getAssertion(String domainName, String policyName, Long assertionId)", "testcase": false, "constructor": false}, {"identifier": "getPolicy", "parameters": "(String domainName, String policyName)", "modifiers": "@Override public", "return": "Policy", "signature": "Policy getPolicy(String domainName, String policyName)", "full_signature": "@Override public Policy getPolicy(String domainName, String policyName)", "class_method_signature": "JDBCConnection.getPolicy(String domainName, String policyName)", "testcase": false, "constructor": false}, {"identifier": "insertPolicy", "parameters": "(String domainName, Policy policy)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean insertPolicy(String domainName, Policy policy)", "full_signature": "@Override public boolean insertPolicy(String domainName, Policy policy)", "class_method_signature": "JDBCConnection.insertPolicy(String domainName, Policy policy)", "testcase": false, "constructor": false}, {"identifier": "updatePolicy", "parameters": "(String domainName, Policy policy)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updatePolicy(String domainName, Policy policy)", "full_signature": "@Override public boolean updatePolicy(String domainName, Policy policy)", "class_method_signature": "JDBCConnection.updatePolicy(String domainName, Policy policy)", "testcase": false, "constructor": false}, {"identifier": "updatePolicyModTimestamp", "parameters": "(String domainName, String policyName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updatePolicyModTimestamp(String domainName, String policyName)", "full_signature": "@Override public boolean updatePolicyModTimestamp(String domainName, String policyName)", "class_method_signature": "JDBCConnection.updatePolicyModTimestamp(String domainName, String policyName)", "testcase": false, "constructor": false}, {"identifier": "deletePolicy", "parameters": "(String domainName, String policyName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deletePolicy(String domainName, String policyName)", "full_signature": "@Override public boolean deletePolicy(String domainName, String policyName)", "class_method_signature": "JDBCConnection.deletePolicy(String domainName, String policyName)", "testcase": false, "constructor": false}, {"identifier": "listPolicies", "parameters": "(String domainName, String assertionRoleName)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> listPolicies(String domainName, String assertionRoleName)", "full_signature": "@Override public List<String> listPolicies(String domainName, String assertionRoleName)", "class_method_signature": "JDBCConnection.listPolicies(String domainName, String assertionRoleName)", "testcase": false, "constructor": false}, {"identifier": "countPolicies", "parameters": "(String domainName)", "modifiers": "@Override public", "return": "int", "signature": "int countPolicies(String domainName)", "full_signature": "@Override public int countPolicies(String domainName)", "class_method_signature": "JDBCConnection.countPolicies(String domainName)", "testcase": false, "constructor": false}, {"identifier": "insertAssertion", "parameters": "(String domainName, String policyName, Assertion assertion)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean insertAssertion(String domainName, String policyName, Assertion assertion)", "full_signature": "@Override public boolean insertAssertion(String domainName, String policyName, Assertion assertion)", "class_method_signature": "JDBCConnection.insertAssertion(String domainName, String policyName, Assertion assertion)", "testcase": false, "constructor": false}, {"identifier": "deleteAssertion", "parameters": "(String domainName, String policyName, Long assertionId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deleteAssertion(String domainName, String policyName, Long assertionId)", "full_signature": "@Override public boolean deleteAssertion(String domainName, String policyName, Long assertionId)", "class_method_signature": "JDBCConnection.deleteAssertion(String domainName, String policyName, Long assertionId)", "testcase": false, "constructor": false}, {"identifier": "listAssertions", "parameters": "(String domainName, String policyName)", "modifiers": "@Override public", "return": "List<Assertion>", "signature": "List<Assertion> listAssertions(String domainName, String policyName)", "full_signature": "@Override public List<Assertion> listAssertions(String domainName, String policyName)", "class_method_signature": "JDBCConnection.listAssertions(String domainName, String policyName)", "testcase": false, "constructor": false}, {"identifier": "countAssertions", "parameters": "(String domainName, String policyName)", "modifiers": "@Override public", "return": "int", "signature": "int countAssertions(String domainName, String policyName)", "full_signature": "@Override public int countAssertions(String domainName, String policyName)", "class_method_signature": "JDBCConnection.countAssertions(String domainName, String policyName)", "testcase": false, "constructor": false}, {"identifier": "saveValue", "parameters": "(String value)", "modifiers": "", "return": "String", "signature": "String saveValue(String value)", "full_signature": " String saveValue(String value)", "class_method_signature": "JDBCConnection.saveValue(String value)", "testcase": false, "constructor": false}, {"identifier": "saveUuidValue", "parameters": "(String value)", "modifiers": "", "return": "UUID", "signature": "UUID saveUuidValue(String value)", "full_signature": " UUID saveUuidValue(String value)", "class_method_signature": "JDBCConnection.saveUuidValue(String value)", "testcase": false, "constructor": false}, {"identifier": "getServiceIdentity", "parameters": "(String domainName, String serviceName)", "modifiers": "@Override public", "return": "ServiceIdentity", "signature": "ServiceIdentity getServiceIdentity(String domainName, String serviceName)", "full_signature": "@Override public ServiceIdentity getServiceIdentity(String domainName, String serviceName)", "class_method_signature": "JDBCConnection.getServiceIdentity(String domainName, String serviceName)", "testcase": false, "constructor": false}, {"identifier": "processInsertValue", "parameters": "(Integer value)", "modifiers": "", "return": "int", "signature": "int processInsertValue(Integer value)", "full_signature": " int processInsertValue(Integer value)", "class_method_signature": "JDBCConnection.processInsertValue(Integer value)", "testcase": false, "constructor": false}, {"identifier": "processInsertValue", "parameters": "(String value)", "modifiers": "", "return": "String", "signature": "String processInsertValue(String value)", "full_signature": " String processInsertValue(String value)", "class_method_signature": "JDBCConnection.processInsertValue(String value)", "testcase": false, "constructor": false}, {"identifier": "processInsertValue", "parameters": "(Boolean value, boolean defaultValue)", "modifiers": "", "return": "boolean", "signature": "boolean processInsertValue(Boolean value, boolean defaultValue)", "full_signature": " boolean processInsertValue(Boolean value, boolean defaultValue)", "class_method_signature": "JDBCConnection.processInsertValue(Boolean value, boolean defaultValue)", "testcase": false, "constructor": false}, {"identifier": "processInsertValue", "parameters": "(AssertionEffect value)", "modifiers": "", "return": "String", "signature": "String processInsertValue(AssertionEffect value)", "full_signature": " String processInsertValue(AssertionEffect value)", "class_method_signature": "JDBCConnection.processInsertValue(AssertionEffect value)", "testcase": false, "constructor": false}, {"identifier": "processInsertUuidValue", "parameters": "(UUID value)", "modifiers": "", "return": "String", "signature": "String processInsertUuidValue(UUID value)", "full_signature": " String processInsertUuidValue(UUID value)", "class_method_signature": "JDBCConnection.processInsertUuidValue(UUID value)", "testcase": false, "constructor": false}, {"identifier": "insertServiceIdentity", "parameters": "(String domainName, ServiceIdentity service)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean insertServiceIdentity(String domainName, ServiceIdentity service)", "full_signature": "@Override public boolean insertServiceIdentity(String domainName, ServiceIdentity service)", "class_method_signature": "JDBCConnection.insertServiceIdentity(String domainName, ServiceIdentity service)", "testcase": false, "constructor": false}, {"identifier": "updateServiceIdentity", "parameters": "(String domainName, ServiceIdentity service)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateServiceIdentity(String domainName, ServiceIdentity service)", "full_signature": "@Override public boolean updateServiceIdentity(String domainName, ServiceIdentity service)", "class_method_signature": "JDBCConnection.updateServiceIdentity(String domainName, ServiceIdentity service)", "testcase": false, "constructor": false}, {"identifier": "deleteServiceIdentity", "parameters": "(String domainName, String serviceName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deleteServiceIdentity(String domainName, String serviceName)", "full_signature": "@Override public boolean deleteServiceIdentity(String domainName, String serviceName)", "class_method_signature": "JDBCConnection.deleteServiceIdentity(String domainName, String serviceName)", "testcase": false, "constructor": false}, {"identifier": "listServiceIdentities", "parameters": "(String domainName)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> listServiceIdentities(String domainName)", "full_signature": "@Override public List<String> listServiceIdentities(String domainName)", "class_method_signature": "JDBCConnection.listServiceIdentities(String domainName)", "testcase": false, "constructor": false}, {"identifier": "countServiceIdentities", "parameters": "(String domainName)", "modifiers": "@Override public", "return": "int", "signature": "int countServiceIdentities(String domainName)", "full_signature": "@Override public int countServiceIdentities(String domainName)", "class_method_signature": "JDBCConnection.countServiceIdentities(String domainName)", "testcase": false, "constructor": false}, {"identifier": "listPublicKeys", "parameters": "(String domainName, String serviceName)", "modifiers": "@Override public", "return": "List<PublicKeyEntry>", "signature": "List<PublicKeyEntry> listPublicKeys(String domainName, String serviceName)", "full_signature": "@Override public List<PublicKeyEntry> listPublicKeys(String domainName, String serviceName)", "class_method_signature": "JDBCConnection.listPublicKeys(String domainName, String serviceName)", "testcase": false, "constructor": false}, {"identifier": "countPublicKeys", "parameters": "(String domainName, String serviceName)", "modifiers": "@Override public", "return": "int", "signature": "int countPublicKeys(String domainName, String serviceName)", "full_signature": "@Override public int countPublicKeys(String domainName, String serviceName)", "class_method_signature": "JDBCConnection.countPublicKeys(String domainName, String serviceName)", "testcase": false, "constructor": false}, {"identifier": "getPublicKeyEntry", "parameters": "(String domainName, String serviceName,\n            String keyId, boolean domainStateCheck)", "modifiers": "@Override public", "return": "PublicKeyEntry", "signature": "PublicKeyEntry getPublicKeyEntry(String domainName, String serviceName,\n            String keyId, boolean domainStateCheck)", "full_signature": "@Override public PublicKeyEntry getPublicKeyEntry(String domainName, String serviceName,\n            String keyId, boolean domainStateCheck)", "class_method_signature": "JDBCConnection.getPublicKeyEntry(String domainName, String serviceName,\n            String keyId, boolean domainStateCheck)", "testcase": false, "constructor": false}, {"identifier": "insertPublicKeyEntry", "parameters": "(String domainName, String serviceName, PublicKeyEntry publicKey)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean insertPublicKeyEntry(String domainName, String serviceName, PublicKeyEntry publicKey)", "full_signature": "@Override public boolean insertPublicKeyEntry(String domainName, String serviceName, PublicKeyEntry publicKey)", "class_method_signature": "JDBCConnection.insertPublicKeyEntry(String domainName, String serviceName, PublicKeyEntry publicKey)", "testcase": false, "constructor": false}, {"identifier": "updatePublicKeyEntry", "parameters": "(String domainName, String serviceName, PublicKeyEntry publicKey)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updatePublicKeyEntry(String domainName, String serviceName, PublicKeyEntry publicKey)", "full_signature": "@Override public boolean updatePublicKeyEntry(String domainName, String serviceName, PublicKeyEntry publicKey)", "class_method_signature": "JDBCConnection.updatePublicKeyEntry(String domainName, String serviceName, PublicKeyEntry publicKey)", "testcase": false, "constructor": false}, {"identifier": "deletePublicKeyEntry", "parameters": "(String domainName, String serviceName, String keyId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deletePublicKeyEntry(String domainName, String serviceName, String keyId)", "full_signature": "@Override public boolean deletePublicKeyEntry(String domainName, String serviceName, String keyId)", "class_method_signature": "JDBCConnection.deletePublicKeyEntry(String domainName, String serviceName, String keyId)", "testcase": false, "constructor": false}, {"identifier": "listServiceHosts", "parameters": "(String domainName, String serviceName)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> listServiceHosts(String domainName, String serviceName)", "full_signature": "@Override public List<String> listServiceHosts(String domainName, String serviceName)", "class_method_signature": "JDBCConnection.listServiceHosts(String domainName, String serviceName)", "testcase": false, "constructor": false}, {"identifier": "insertServiceHost", "parameters": "(String domainName, String serviceName, String hostName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean insertServiceHost(String domainName, String serviceName, String hostName)", "full_signature": "@Override public boolean insertServiceHost(String domainName, String serviceName, String hostName)", "class_method_signature": "JDBCConnection.insertServiceHost(String domainName, String serviceName, String hostName)", "testcase": false, "constructor": false}, {"identifier": "deleteServiceHost", "parameters": "(String domainName, String serviceName, String hostName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deleteServiceHost(String domainName, String serviceName, String hostName)", "full_signature": "@Override public boolean deleteServiceHost(String domainName, String serviceName, String hostName)", "class_method_signature": "JDBCConnection.deleteServiceHost(String domainName, String serviceName, String hostName)", "testcase": false, "constructor": false}, {"identifier": "insertEntity", "parameters": "(String domainName, Entity entity)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean insertEntity(String domainName, Entity entity)", "full_signature": "@Override public boolean insertEntity(String domainName, Entity entity)", "class_method_signature": "JDBCConnection.insertEntity(String domainName, Entity entity)", "testcase": false, "constructor": false}, {"identifier": "updateEntity", "parameters": "(String domainName, Entity entity)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateEntity(String domainName, Entity entity)", "full_signature": "@Override public boolean updateEntity(String domainName, Entity entity)", "class_method_signature": "JDBCConnection.updateEntity(String domainName, Entity entity)", "testcase": false, "constructor": false}, {"identifier": "deleteEntity", "parameters": "(String domainName, String entityName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deleteEntity(String domainName, String entityName)", "full_signature": "@Override public boolean deleteEntity(String domainName, String entityName)", "class_method_signature": "JDBCConnection.deleteEntity(String domainName, String entityName)", "testcase": false, "constructor": false}, {"identifier": "getEntity", "parameters": "(String domainName, String entityName)", "modifiers": "@Override public", "return": "Entity", "signature": "Entity getEntity(String domainName, String entityName)", "full_signature": "@Override public Entity getEntity(String domainName, String entityName)", "class_method_signature": "JDBCConnection.getEntity(String domainName, String entityName)", "testcase": false, "constructor": false}, {"identifier": "listEntities", "parameters": "(String domainName)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> listEntities(String domainName)", "full_signature": "@Override public List<String> listEntities(String domainName)", "class_method_signature": "JDBCConnection.listEntities(String domainName)", "testcase": false, "constructor": false}, {"identifier": "countEntities", "parameters": "(String domainName)", "modifiers": "@Override public", "return": "int", "signature": "int countEntities(String domainName)", "full_signature": "@Override public int countEntities(String domainName)", "class_method_signature": "JDBCConnection.countEntities(String domainName)", "testcase": false, "constructor": false}, {"identifier": "retrieveRole", "parameters": "(ResultSet rs, final String domainName, final String roleName)", "modifiers": "", "return": "Role", "signature": "Role retrieveRole(ResultSet rs, final String domainName, final String roleName)", "full_signature": " Role retrieveRole(ResultSet rs, final String domainName, final String roleName)", "class_method_signature": "JDBCConnection.retrieveRole(ResultSet rs, final String domainName, final String roleName)", "testcase": false, "constructor": false}, {"identifier": "getAthenzDomainRoles", "parameters": "(String domainName, int domainId, AthenzDomain athenzDomain)", "modifiers": "", "return": "void", "signature": "void getAthenzDomainRoles(String domainName, int domainId, AthenzDomain athenzDomain)", "full_signature": " void getAthenzDomainRoles(String domainName, int domainId, AthenzDomain athenzDomain)", "class_method_signature": "JDBCConnection.getAthenzDomainRoles(String domainName, int domainId, AthenzDomain athenzDomain)", "testcase": false, "constructor": false}, {"identifier": "getAthenzDomainGroups", "parameters": "(String domainName, int domainId, AthenzDomain athenzDomain)", "modifiers": "", "return": "void", "signature": "void getAthenzDomainGroups(String domainName, int domainId, AthenzDomain athenzDomain)", "full_signature": " void getAthenzDomainGroups(String domainName, int domainId, AthenzDomain athenzDomain)", "class_method_signature": "JDBCConnection.getAthenzDomainGroups(String domainName, int domainId, AthenzDomain athenzDomain)", "testcase": false, "constructor": false}, {"identifier": "getAthenzDomainPolicies", "parameters": "(String domainName, int domainId, AthenzDomain athenzDomain)", "modifiers": "", "return": "void", "signature": "void getAthenzDomainPolicies(String domainName, int domainId, AthenzDomain athenzDomain)", "full_signature": " void getAthenzDomainPolicies(String domainName, int domainId, AthenzDomain athenzDomain)", "class_method_signature": "JDBCConnection.getAthenzDomainPolicies(String domainName, int domainId, AthenzDomain athenzDomain)", "testcase": false, "constructor": false}, {"identifier": "getAthenzDomainServices", "parameters": "(String domainName, int domainId, AthenzDomain athenzDomain)", "modifiers": "", "return": "void", "signature": "void getAthenzDomainServices(String domainName, int domainId, AthenzDomain athenzDomain)", "full_signature": " void getAthenzDomainServices(String domainName, int domainId, AthenzDomain athenzDomain)", "class_method_signature": "JDBCConnection.getAthenzDomainServices(String domainName, int domainId, AthenzDomain athenzDomain)", "testcase": false, "constructor": false}, {"identifier": "getAthenzDomain", "parameters": "(String domainName)", "modifiers": "@Override public", "return": "AthenzDomain", "signature": "AthenzDomain getAthenzDomain(String domainName)", "full_signature": "@Override public AthenzDomain getAthenzDomain(String domainName)", "class_method_signature": "JDBCConnection.getAthenzDomain(String domainName)", "testcase": false, "constructor": false}, {"identifier": "listModifiedDomains", "parameters": "(long modifiedSince)", "modifiers": "@Override public", "return": "DomainMetaList", "signature": "DomainMetaList listModifiedDomains(long modifiedSince)", "full_signature": "@Override public DomainMetaList listModifiedDomains(long modifiedSince)", "class_method_signature": "JDBCConnection.listModifiedDomains(long modifiedSince)", "testcase": false, "constructor": false}, {"identifier": "validatePrincipalDomain", "parameters": "(String principal)", "modifiers": "", "return": "boolean", "signature": "boolean validatePrincipalDomain(String principal)", "full_signature": " boolean validatePrincipalDomain(String principal)", "class_method_signature": "JDBCConnection.validatePrincipalDomain(String principal)", "testcase": false, "constructor": false}, {"identifier": "roleIndex", "parameters": "(String domainId, String roleName)", "modifiers": "", "return": "String", "signature": "String roleIndex(String domainId, String roleName)", "full_signature": " String roleIndex(String domainId, String roleName)", "class_method_signature": "JDBCConnection.roleIndex(String domainId, String roleName)", "testcase": false, "constructor": false}, {"identifier": "prepareRoleAssertionsStatement", "parameters": "(String action)", "modifiers": "", "return": "PreparedStatement", "signature": "PreparedStatement prepareRoleAssertionsStatement(String action)", "full_signature": " PreparedStatement prepareRoleAssertionsStatement(String action)", "class_method_signature": "JDBCConnection.prepareRoleAssertionsStatement(String action)", "testcase": false, "constructor": false}, {"identifier": "getRoleAssertions", "parameters": "(String action, String caller)", "modifiers": "", "return": "Map<String, List<Assertion>>", "signature": "Map<String, List<Assertion>> getRoleAssertions(String action, String caller)", "full_signature": " Map<String, List<Assertion>> getRoleAssertions(String action, String caller)", "class_method_signature": "JDBCConnection.getRoleAssertions(String action, String caller)", "testcase": false, "constructor": false}, {"identifier": "prepareRolePrincipalsStatement", "parameters": "(String principal,\n            String userDomain, boolean awsQuery)", "modifiers": "", "return": "PreparedStatement", "signature": "PreparedStatement prepareRolePrincipalsStatement(String principal,\n            String userDomain, boolean awsQuery)", "full_signature": " PreparedStatement prepareRolePrincipalsStatement(String principal,\n            String userDomain, boolean awsQuery)", "class_method_signature": "JDBCConnection.prepareRolePrincipalsStatement(String principal,\n            String userDomain, boolean awsQuery)", "testcase": false, "constructor": false}, {"identifier": "getRolePrincipals", "parameters": "(String principal, boolean awsQuery,\n            String userDomain, String caller)", "modifiers": "", "return": "Map<String, List<String>>", "signature": "Map<String, List<String>> getRolePrincipals(String principal, boolean awsQuery,\n            String userDomain, String caller)", "full_signature": " Map<String, List<String>> getRolePrincipals(String principal, boolean awsQuery,\n            String userDomain, String caller)", "class_method_signature": "JDBCConnection.getRolePrincipals(String principal, boolean awsQuery,\n            String userDomain, String caller)", "testcase": false, "constructor": false}, {"identifier": "getTrustedSubTypeRoles", "parameters": "(String sqlCommand, Map<String, List<String>> trustedRoles,\n            String caller)", "modifiers": "", "return": "void", "signature": "void getTrustedSubTypeRoles(String sqlCommand, Map<String, List<String>> trustedRoles,\n            String caller)", "full_signature": " void getTrustedSubTypeRoles(String sqlCommand, Map<String, List<String>> trustedRoles,\n            String caller)", "class_method_signature": "JDBCConnection.getTrustedSubTypeRoles(String sqlCommand, Map<String, List<String>> trustedRoles,\n            String caller)", "testcase": false, "constructor": false}, {"identifier": "getTrustedRoles", "parameters": "(String caller)", "modifiers": "", "return": "Map<String, List<String>>", "signature": "Map<String, List<String>> getTrustedRoles(String caller)", "full_signature": " Map<String, List<String>> getTrustedRoles(String caller)", "class_method_signature": "JDBCConnection.getTrustedRoles(String caller)", "testcase": false, "constructor": false}, {"identifier": "getAwsDomains", "parameters": "(String caller)", "modifiers": "", "return": "Map<String, String>", "signature": "Map<String, String> getAwsDomains(String caller)", "full_signature": " Map<String, String> getAwsDomains(String caller)", "class_method_signature": "JDBCConnection.getAwsDomains(String caller)", "testcase": false, "constructor": false}, {"identifier": "skipAwsUserQuery", "parameters": "(Map<String, String> awsDomains, String queryPrincipal,\n            String rolePincipal, String userDomain)", "modifiers": "", "return": "boolean", "signature": "boolean skipAwsUserQuery(Map<String, String> awsDomains, String queryPrincipal,\n            String rolePincipal, String userDomain)", "full_signature": " boolean skipAwsUserQuery(Map<String, String> awsDomains, String queryPrincipal,\n            String rolePincipal, String userDomain)", "class_method_signature": "JDBCConnection.skipAwsUserQuery(Map<String, String> awsDomains, String queryPrincipal,\n            String rolePincipal, String userDomain)", "testcase": false, "constructor": false}, {"identifier": "addRoleAssertions", "parameters": "(List<Assertion> principalAssertions, List<Assertion> roleAssertions,\n            Map<String, String> awsDomains)", "modifiers": "", "return": "void", "signature": "void addRoleAssertions(List<Assertion> principalAssertions, List<Assertion> roleAssertions,\n            Map<String, String> awsDomains)", "full_signature": " void addRoleAssertions(List<Assertion> principalAssertions, List<Assertion> roleAssertions,\n            Map<String, String> awsDomains)", "class_method_signature": "JDBCConnection.addRoleAssertions(List<Assertion> principalAssertions, List<Assertion> roleAssertions,\n            Map<String, String> awsDomains)", "testcase": false, "constructor": false}, {"identifier": "getResourceAccessObject", "parameters": "(String principal, List<Assertion> assertions)", "modifiers": "", "return": "ResourceAccess", "signature": "ResourceAccess getResourceAccessObject(String principal, List<Assertion> assertions)", "full_signature": " ResourceAccess getResourceAccessObject(String principal, List<Assertion> assertions)", "class_method_signature": "JDBCConnection.getResourceAccessObject(String principal, List<Assertion> assertions)", "testcase": false, "constructor": false}, {"identifier": "listResourceAccess", "parameters": "(String principal, String action, String userDomain)", "modifiers": "@Override public", "return": "ResourceAccessList", "signature": "ResourceAccessList listResourceAccess(String principal, String action, String userDomain)", "full_signature": "@Override public ResourceAccessList listResourceAccess(String principal, String action, String userDomain)", "class_method_signature": "JDBCConnection.listResourceAccess(String principal, String action, String userDomain)", "testcase": false, "constructor": false}, {"identifier": "getQuota", "parameters": "(String domainName)", "modifiers": "@Override public", "return": "Quota", "signature": "Quota getQuota(String domainName)", "full_signature": "@Override public Quota getQuota(String domainName)", "class_method_signature": "JDBCConnection.getQuota(String domainName)", "testcase": false, "constructor": false}, {"identifier": "insertQuota", "parameters": "(String domainName, Quota quota)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean insertQuota(String domainName, Quota quota)", "full_signature": "@Override public boolean insertQuota(String domainName, Quota quota)", "class_method_signature": "JDBCConnection.insertQuota(String domainName, Quota quota)", "testcase": false, "constructor": false}, {"identifier": "updateQuota", "parameters": "(String domainName, Quota quota)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateQuota(String domainName, Quota quota)", "full_signature": "@Override public boolean updateQuota(String domainName, Quota quota)", "class_method_signature": "JDBCConnection.updateQuota(String domainName, Quota quota)", "testcase": false, "constructor": false}, {"identifier": "deleteQuota", "parameters": "(String domainName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deleteQuota(String domainName)", "full_signature": "@Override public boolean deleteQuota(String domainName)", "class_method_signature": "JDBCConnection.deleteQuota(String domainName)", "testcase": false, "constructor": false}, {"identifier": "listDomainRoleMembers", "parameters": "(String domainName)", "modifiers": "@Override public", "return": "DomainRoleMembers", "signature": "DomainRoleMembers listDomainRoleMembers(String domainName)", "full_signature": "@Override public DomainRoleMembers listDomainRoleMembers(String domainName)", "class_method_signature": "JDBCConnection.listDomainRoleMembers(String domainName)", "testcase": false, "constructor": false}, {"identifier": "getPrincipalRoles", "parameters": "(String principal, String domainName)", "modifiers": "@Override public", "return": "DomainRoleMember", "signature": "DomainRoleMember getPrincipalRoles(String principal, String domainName)", "full_signature": "@Override public DomainRoleMember getPrincipalRoles(String principal, String domainName)", "class_method_signature": "JDBCConnection.getPrincipalRoles(String principal, String domainName)", "testcase": false, "constructor": false}, {"identifier": "getRolesForPrincipal", "parameters": "(String caller, DomainRoleMember roleMember, PreparedStatement ps)", "modifiers": "private", "return": "DomainRoleMember", "signature": "DomainRoleMember getRolesForPrincipal(String caller, DomainRoleMember roleMember, PreparedStatement ps)", "full_signature": "private DomainRoleMember getRolesForPrincipal(String caller, DomainRoleMember roleMember, PreparedStatement ps)", "class_method_signature": "JDBCConnection.getRolesForPrincipal(String caller, DomainRoleMember roleMember, PreparedStatement ps)", "testcase": false, "constructor": false}, {"identifier": "listOverdueReviewRoleMembers", "parameters": "(String domainName)", "modifiers": "@Override public", "return": "DomainRoleMembers", "signature": "DomainRoleMembers listOverdueReviewRoleMembers(String domainName)", "full_signature": "@Override public DomainRoleMembers listOverdueReviewRoleMembers(String domainName)", "class_method_signature": "JDBCConnection.listOverdueReviewRoleMembers(String domainName)", "testcase": false, "constructor": false}, {"identifier": "getPendingDomainGroupMembers", "parameters": "(String principal)", "modifiers": "@Override public", "return": "Map<String, List<DomainGroupMember>>", "signature": "Map<String, List<DomainGroupMember>> getPendingDomainGroupMembers(String principal)", "full_signature": "@Override public Map<String, List<DomainGroupMember>> getPendingDomainGroupMembers(String principal)", "class_method_signature": "JDBCConnection.getPendingDomainGroupMembers(String principal)", "testcase": false, "constructor": false}, {"identifier": "getExpiredPendingDomainGroupMembers", "parameters": "(int pendingGroupMemberLifespan)", "modifiers": "@Override public", "return": "Map<String, List<DomainGroupMember>>", "signature": "Map<String, List<DomainGroupMember>> getExpiredPendingDomainGroupMembers(int pendingGroupMemberLifespan)", "full_signature": "@Override public Map<String, List<DomainGroupMember>> getExpiredPendingDomainGroupMembers(int pendingGroupMemberLifespan)", "class_method_signature": "JDBCConnection.getExpiredPendingDomainGroupMembers(int pendingGroupMemberLifespan)", "testcase": false, "constructor": false}, {"identifier": "getPendingGroupMembershipApproverRoles", "parameters": "(String server, long timestamp)", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> getPendingGroupMembershipApproverRoles(String server, long timestamp)", "full_signature": "@Override public Set<String> getPendingGroupMembershipApproverRoles(String server, long timestamp)", "class_method_signature": "JDBCConnection.getPendingGroupMembershipApproverRoles(String server, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "updatePendingGroupMembersNotificationTimestamp", "parameters": "(String server, long timestamp, int delayDays)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updatePendingGroupMembersNotificationTimestamp(String server, long timestamp, int delayDays)", "full_signature": "@Override public boolean updatePendingGroupMembersNotificationTimestamp(String server, long timestamp, int delayDays)", "class_method_signature": "JDBCConnection.updatePendingGroupMembersNotificationTimestamp(String server, long timestamp, int delayDays)", "testcase": false, "constructor": false}, {"identifier": "listDomainRoleMembersWithQuery", "parameters": "(String domainName, String query, String caller)", "modifiers": "private", "return": "DomainRoleMembers", "signature": "DomainRoleMembers listDomainRoleMembersWithQuery(String domainName, String query, String caller)", "full_signature": "private DomainRoleMembers listDomainRoleMembersWithQuery(String domainName, String query, String caller)", "class_method_signature": "JDBCConnection.listDomainRoleMembersWithQuery(String domainName, String query, String caller)", "testcase": false, "constructor": false}, {"identifier": "deletePendingRoleMember", "parameters": "(String domainName, String roleName, String principal,\n            String admin, String auditRef)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deletePendingRoleMember(String domainName, String roleName, String principal,\n            String admin, String auditRef)", "full_signature": "@Override public boolean deletePendingRoleMember(String domainName, String roleName, String principal,\n            String admin, String auditRef)", "class_method_signature": "JDBCConnection.deletePendingRoleMember(String domainName, String roleName, String principal,\n            String admin, String auditRef)", "testcase": false, "constructor": false}, {"identifier": "executeDeletePendingRoleMember", "parameters": "(int roleId, int principalId, final String admin,\n            final String principal, final String auditRef, boolean auditLog, final String caller)", "modifiers": "public", "return": "boolean", "signature": "boolean executeDeletePendingRoleMember(int roleId, int principalId, final String admin,\n            final String principal, final String auditRef, boolean auditLog, final String caller)", "full_signature": "public boolean executeDeletePendingRoleMember(int roleId, int principalId, final String admin,\n            final String principal, final String auditRef, boolean auditLog, final String caller)", "class_method_signature": "JDBCConnection.executeDeletePendingRoleMember(int roleId, int principalId, final String admin,\n            final String principal, final String auditRef, boolean auditLog, final String caller)", "testcase": false, "constructor": false}, {"identifier": "confirmRoleMember", "parameters": "(String domainName, String roleName, RoleMember roleMember,\n            String admin, String auditRef)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean confirmRoleMember(String domainName, String roleName, RoleMember roleMember,\n            String admin, String auditRef)", "full_signature": "@Override public boolean confirmRoleMember(String domainName, String roleName, RoleMember roleMember,\n            String admin, String auditRef)", "class_method_signature": "JDBCConnection.confirmRoleMember(String domainName, String roleName, RoleMember roleMember,\n            String admin, String auditRef)", "testcase": false, "constructor": false}, {"identifier": "processPendingMembers", "parameters": "(final String domainName, final String query, int principalId,\n            Map<String, List<DomainRoleMember>> domainRoleMembersMap, final String caller)", "modifiers": "", "return": "void", "signature": "void processPendingMembers(final String domainName, final String query, int principalId,\n            Map<String, List<DomainRoleMember>> domainRoleMembersMap, final String caller)", "full_signature": " void processPendingMembers(final String domainName, final String query, int principalId,\n            Map<String, List<DomainRoleMember>> domainRoleMembersMap, final String caller)", "class_method_signature": "JDBCConnection.processPendingMembers(final String domainName, final String query, int principalId,\n            Map<String, List<DomainRoleMember>> domainRoleMembersMap, final String caller)", "testcase": false, "constructor": false}, {"identifier": "processPendingGroupMembers", "parameters": "(final String domainName, final String query, int principalId,\n                                    Map<String, List<DomainGroupMember>> domainGroupMembersMap, final String caller)", "modifiers": "", "return": "void", "signature": "void processPendingGroupMembers(final String domainName, final String query, int principalId,\n                                    Map<String, List<DomainGroupMember>> domainGroupMembersMap, final String caller)", "full_signature": " void processPendingGroupMembers(final String domainName, final String query, int principalId,\n                                    Map<String, List<DomainGroupMember>> domainGroupMembersMap, final String caller)", "class_method_signature": "JDBCConnection.processPendingGroupMembers(final String domainName, final String query, int principalId,\n                                    Map<String, List<DomainGroupMember>> domainGroupMembersMap, final String caller)", "testcase": false, "constructor": false}, {"identifier": "getPendingDomainRoleMembers", "parameters": "(String principal)", "modifiers": "@Override public", "return": "Map<String, List<DomainRoleMember>>", "signature": "Map<String, List<DomainRoleMember>> getPendingDomainRoleMembers(String principal)", "full_signature": "@Override public Map<String, List<DomainRoleMember>> getPendingDomainRoleMembers(String principal)", "class_method_signature": "JDBCConnection.getPendingDomainRoleMembers(String principal)", "testcase": false, "constructor": false}, {"identifier": "populateDomainRoleMembersMapFromResultSet", "parameters": "(Map<String, List<DomainRoleMember>> domainRoleMembersMap, ResultSet rs)", "modifiers": "private", "return": "void", "signature": "void populateDomainRoleMembersMapFromResultSet(Map<String, List<DomainRoleMember>> domainRoleMembersMap, ResultSet rs)", "full_signature": "private void populateDomainRoleMembersMapFromResultSet(Map<String, List<DomainRoleMember>> domainRoleMembersMap, ResultSet rs)", "class_method_signature": "JDBCConnection.populateDomainRoleMembersMapFromResultSet(Map<String, List<DomainRoleMember>> domainRoleMembersMap, ResultSet rs)", "testcase": false, "constructor": false}, {"identifier": "populateDomainGroupMembersMapFromResultSet", "parameters": "(Map<String, List<DomainGroupMember>> domainGroupMembersMap, ResultSet rs)", "modifiers": "private", "return": "void", "signature": "void populateDomainGroupMembersMapFromResultSet(Map<String, List<DomainGroupMember>> domainGroupMembersMap, ResultSet rs)", "full_signature": "private void populateDomainGroupMembersMapFromResultSet(Map<String, List<DomainGroupMember>> domainGroupMembersMap, ResultSet rs)", "class_method_signature": "JDBCConnection.populateDomainGroupMembersMapFromResultSet(Map<String, List<DomainGroupMember>> domainGroupMembersMap, ResultSet rs)", "testcase": false, "constructor": false}, {"identifier": "getPendingMembershipApproverRoles", "parameters": "(String server, long timestamp)", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> getPendingMembershipApproverRoles(String server, long timestamp)", "full_signature": "@Override public Set<String> getPendingMembershipApproverRoles(String server, long timestamp)", "class_method_signature": "JDBCConnection.getPendingMembershipApproverRoles(String server, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "getExpiredPendingDomainRoleMembers", "parameters": "(int pendingRoleMemberLifespan)", "modifiers": "@Override public", "return": "Map<String, List<DomainRoleMember>>", "signature": "Map<String, List<DomainRoleMember>> getExpiredPendingDomainRoleMembers(int pendingRoleMemberLifespan)", "full_signature": "@Override public Map<String, List<DomainRoleMember>> getExpiredPendingDomainRoleMembers(int pendingRoleMemberLifespan)", "class_method_signature": "JDBCConnection.getExpiredPendingDomainRoleMembers(int pendingRoleMemberLifespan)", "testcase": false, "constructor": false}, {"identifier": "updatePendingRoleMembersNotificationTimestamp", "parameters": "(String server, long timestamp, int delayDays)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updatePendingRoleMembersNotificationTimestamp(String server, long timestamp, int delayDays)", "full_signature": "@Override public boolean updatePendingRoleMembersNotificationTimestamp(String server, long timestamp, int delayDays)", "class_method_signature": "JDBCConnection.updatePendingRoleMembersNotificationTimestamp(String server, long timestamp, int delayDays)", "testcase": false, "constructor": false}, {"identifier": "getRecipientRoleForAdminMembershipApproval", "parameters": "(String caller, Set<String> targetRoles,\n                java.sql.Timestamp timestamp, String server)", "modifiers": "private", "return": "void", "signature": "void getRecipientRoleForAdminMembershipApproval(String caller, Set<String> targetRoles,\n                java.sql.Timestamp timestamp, String server)", "full_signature": "private void getRecipientRoleForAdminMembershipApproval(String caller, Set<String> targetRoles,\n                java.sql.Timestamp timestamp, String server)", "class_method_signature": "JDBCConnection.getRecipientRoleForAdminMembershipApproval(String caller, Set<String> targetRoles,\n                java.sql.Timestamp timestamp, String server)", "testcase": false, "constructor": false}, {"identifier": "getRecipientRoleForAdminGroupMembershipApproval", "parameters": "(String caller, Set<String> targetRoles,\n                                                            java.sql.Timestamp timestamp, String server)", "modifiers": "private", "return": "void", "signature": "void getRecipientRoleForAdminGroupMembershipApproval(String caller, Set<String> targetRoles,\n                                                            java.sql.Timestamp timestamp, String server)", "full_signature": "private void getRecipientRoleForAdminGroupMembershipApproval(String caller, Set<String> targetRoles,\n                                                            java.sql.Timestamp timestamp, String server)", "class_method_signature": "JDBCConnection.getRecipientRoleForAdminGroupMembershipApproval(String caller, Set<String> targetRoles,\n                                                            java.sql.Timestamp timestamp, String server)", "testcase": false, "constructor": false}, {"identifier": "getNotifyTemporaryRoleMembers", "parameters": "(String server, long timestamp)", "modifiers": "@Override public", "return": "Map<String, DomainRoleMember>", "signature": "Map<String, DomainRoleMember> getNotifyTemporaryRoleMembers(String server, long timestamp)", "full_signature": "@Override public Map<String, DomainRoleMember> getNotifyTemporaryRoleMembers(String server, long timestamp)", "class_method_signature": "JDBCConnection.getNotifyTemporaryRoleMembers(String server, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "updateRoleMemberExpirationNotificationTimestamp", "parameters": "(String server, long timestamp, int delayDays)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateRoleMemberExpirationNotificationTimestamp(String server, long timestamp, int delayDays)", "full_signature": "@Override public boolean updateRoleMemberExpirationNotificationTimestamp(String server, long timestamp, int delayDays)", "class_method_signature": "JDBCConnection.updateRoleMemberExpirationNotificationTimestamp(String server, long timestamp, int delayDays)", "testcase": false, "constructor": false}, {"identifier": "getNotifyTemporaryGroupMembers", "parameters": "(String server, long timestamp)", "modifiers": "@Override public", "return": "Map<String, DomainGroupMember>", "signature": "Map<String, DomainGroupMember> getNotifyTemporaryGroupMembers(String server, long timestamp)", "full_signature": "@Override public Map<String, DomainGroupMember> getNotifyTemporaryGroupMembers(String server, long timestamp)", "class_method_signature": "JDBCConnection.getNotifyTemporaryGroupMembers(String server, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "updateGroupMemberExpirationNotificationTimestamp", "parameters": "(String server, long timestamp, int delayDays)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateGroupMemberExpirationNotificationTimestamp(String server, long timestamp, int delayDays)", "full_signature": "@Override public boolean updateGroupMemberExpirationNotificationTimestamp(String server, long timestamp, int delayDays)", "class_method_signature": "JDBCConnection.updateGroupMemberExpirationNotificationTimestamp(String server, long timestamp, int delayDays)", "testcase": false, "constructor": false}, {"identifier": "getNotifyReviewRoleMembers", "parameters": "(String server, long timestamp)", "modifiers": "@Override public", "return": "Map<String, DomainRoleMember>", "signature": "Map<String, DomainRoleMember> getNotifyReviewRoleMembers(String server, long timestamp)", "full_signature": "@Override public Map<String, DomainRoleMember> getNotifyReviewRoleMembers(String server, long timestamp)", "class_method_signature": "JDBCConnection.getNotifyReviewRoleMembers(String server, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "updateRoleMemberReviewNotificationTimestamp", "parameters": "(String server, long timestamp, int delayDays)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateRoleMemberReviewNotificationTimestamp(String server, long timestamp, int delayDays)", "full_signature": "@Override public boolean updateRoleMemberReviewNotificationTimestamp(String server, long timestamp, int delayDays)", "class_method_signature": "JDBCConnection.updateRoleMemberReviewNotificationTimestamp(String server, long timestamp, int delayDays)", "testcase": false, "constructor": false}, {"identifier": "updateMemberNotificationTimestamp", "parameters": "(final String server, long timestamp, int delayDays,\n                                                      final String query, final String caller)", "modifiers": "private", "return": "boolean", "signature": "boolean updateMemberNotificationTimestamp(final String server, long timestamp, int delayDays,\n                                                      final String query, final String caller)", "full_signature": "private boolean updateMemberNotificationTimestamp(final String server, long timestamp, int delayDays,\n                                                      final String query, final String caller)", "class_method_signature": "JDBCConnection.updateMemberNotificationTimestamp(final String server, long timestamp, int delayDays,\n                                                      final String query, final String caller)", "testcase": false, "constructor": false}, {"identifier": "getNotifyRoleMembers", "parameters": "(final String server, long timestamp, final String query,\n                                                               final String caller)", "modifiers": "private", "return": "Map<String, DomainRoleMember>", "signature": "Map<String, DomainRoleMember> getNotifyRoleMembers(final String server, long timestamp, final String query,\n                                                               final String caller)", "full_signature": "private Map<String, DomainRoleMember> getNotifyRoleMembers(final String server, long timestamp, final String query,\n                                                               final String caller)", "class_method_signature": "JDBCConnection.getNotifyRoleMembers(final String server, long timestamp, final String query,\n                                                               final String caller)", "testcase": false, "constructor": false}, {"identifier": "getDomainTemplates", "parameters": "(String domainName)", "modifiers": "@Override public", "return": "List<TemplateMetaData>", "signature": "List<TemplateMetaData> getDomainTemplates(String domainName)", "full_signature": "@Override public List<TemplateMetaData> getDomainTemplates(String domainName)", "class_method_signature": "JDBCConnection.getDomainTemplates(String domainName)", "testcase": false, "constructor": false}, {"identifier": "listRolesWithUserAuthorityRestrictions", "parameters": "()", "modifiers": "@Override public", "return": "List<PrincipalRole>", "signature": "List<PrincipalRole> listRolesWithUserAuthorityRestrictions()", "full_signature": "@Override public List<PrincipalRole> listRolesWithUserAuthorityRestrictions()", "class_method_signature": "JDBCConnection.listRolesWithUserAuthorityRestrictions()", "testcase": false, "constructor": false}, {"identifier": "retrieveGroup", "parameters": "(ResultSet rs, final String domainName, final String groupName)", "modifiers": "", "return": "Group", "signature": "Group retrieveGroup(ResultSet rs, final String domainName, final String groupName)", "full_signature": " Group retrieveGroup(ResultSet rs, final String domainName, final String groupName)", "class_method_signature": "JDBCConnection.retrieveGroup(ResultSet rs, final String domainName, final String groupName)", "testcase": false, "constructor": false}, {"identifier": "getGroup", "parameters": "(String domainName, String groupName)", "modifiers": "@Override public", "return": "Group", "signature": "Group getGroup(String domainName, String groupName)", "full_signature": "@Override public Group getGroup(String domainName, String groupName)", "class_method_signature": "JDBCConnection.getGroup(String domainName, String groupName)", "testcase": false, "constructor": false}, {"identifier": "insertGroup", "parameters": "(String domainName, Group group)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean insertGroup(String domainName, Group group)", "full_signature": "@Override public boolean insertGroup(String domainName, Group group)", "class_method_signature": "JDBCConnection.insertGroup(String domainName, Group group)", "testcase": false, "constructor": false}, {"identifier": "updateGroup", "parameters": "(String domainName, Group group)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateGroup(String domainName, Group group)", "full_signature": "@Override public boolean updateGroup(String domainName, Group group)", "class_method_signature": "JDBCConnection.updateGroup(String domainName, Group group)", "testcase": false, "constructor": false}, {"identifier": "deleteGroup", "parameters": "(String domainName, String groupName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deleteGroup(String domainName, String groupName)", "full_signature": "@Override public boolean deleteGroup(String domainName, String groupName)", "class_method_signature": "JDBCConnection.deleteGroup(String domainName, String groupName)", "testcase": false, "constructor": false}, {"identifier": "updateGroupModTimestamp", "parameters": "(String domainName, String groupName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateGroupModTimestamp(String domainName, String groupName)", "full_signature": "@Override public boolean updateGroupModTimestamp(String domainName, String groupName)", "class_method_signature": "JDBCConnection.updateGroupModTimestamp(String domainName, String groupName)", "testcase": false, "constructor": false}, {"identifier": "countGroups", "parameters": "(String domainName)", "modifiers": "@Override public", "return": "int", "signature": "int countGroups(String domainName)", "full_signature": "@Override public int countGroups(String domainName)", "class_method_signature": "JDBCConnection.countGroups(String domainName)", "testcase": false, "constructor": false}, {"identifier": "listGroupAuditLogs", "parameters": "(String domainName, String groupName)", "modifiers": "@Override public", "return": "List<GroupAuditLog>", "signature": "List<GroupAuditLog> listGroupAuditLogs(String domainName, String groupName)", "full_signature": "@Override public List<GroupAuditLog> listGroupAuditLogs(String domainName, String groupName)", "class_method_signature": "JDBCConnection.listGroupAuditLogs(String domainName, String groupName)", "testcase": false, "constructor": false}, {"identifier": "updateGroupReviewTimestamp", "parameters": "(String domainName, String groupName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateGroupReviewTimestamp(String domainName, String groupName)", "full_signature": "@Override public boolean updateGroupReviewTimestamp(String domainName, String groupName)", "class_method_signature": "JDBCConnection.updateGroupReviewTimestamp(String domainName, String groupName)", "testcase": false, "constructor": false}, {"identifier": "getStdGroupMembers", "parameters": "(int groupId, List<GroupMember> members, final String caller)", "modifiers": "", "return": "void", "signature": "void getStdGroupMembers(int groupId, List<GroupMember> members, final String caller)", "full_signature": " void getStdGroupMembers(int groupId, List<GroupMember> members, final String caller)", "class_method_signature": "JDBCConnection.getStdGroupMembers(int groupId, List<GroupMember> members, final String caller)", "testcase": false, "constructor": false}, {"identifier": "getPendingGroupMembers", "parameters": "(int groupId, List<GroupMember> members, final String caller)", "modifiers": "", "return": "void", "signature": "void getPendingGroupMembers(int groupId, List<GroupMember> members, final String caller)", "full_signature": " void getPendingGroupMembers(int groupId, List<GroupMember> members, final String caller)", "class_method_signature": "JDBCConnection.getPendingGroupMembers(int groupId, List<GroupMember> members, final String caller)", "testcase": false, "constructor": false}, {"identifier": "listGroupMembers", "parameters": "(String domainName, String groupName, Boolean pending)", "modifiers": "@Override public", "return": "List<GroupMember>", "signature": "List<GroupMember> listGroupMembers(String domainName, String groupName, Boolean pending)", "full_signature": "@Override public List<GroupMember> listGroupMembers(String domainName, String groupName, Boolean pending)", "class_method_signature": "JDBCConnection.listGroupMembers(String domainName, String groupName, Boolean pending)", "testcase": false, "constructor": false}, {"identifier": "countGroupMembers", "parameters": "(String domainName, String groupName)", "modifiers": "@Override public", "return": "int", "signature": "int countGroupMembers(String domainName, String groupName)", "full_signature": "@Override public int countGroupMembers(String domainName, String groupName)", "class_method_signature": "JDBCConnection.countGroupMembers(String domainName, String groupName)", "testcase": false, "constructor": false}, {"identifier": "getGroupMembership", "parameters": "(final String query, int groupId, final String member, long expiration,\n                               GroupMembership membership, boolean disabledFlagCheck, final String caller)", "modifiers": "", "return": "boolean", "signature": "boolean getGroupMembership(final String query, int groupId, final String member, long expiration,\n                               GroupMembership membership, boolean disabledFlagCheck, final String caller)", "full_signature": " boolean getGroupMembership(final String query, int groupId, final String member, long expiration,\n                               GroupMembership membership, boolean disabledFlagCheck, final String caller)", "class_method_signature": "JDBCConnection.getGroupMembership(final String query, int groupId, final String member, long expiration,\n                               GroupMembership membership, boolean disabledFlagCheck, final String caller)", "testcase": false, "constructor": false}, {"identifier": "getGroupMember", "parameters": "(String domainName, String groupName, String member, long expiration, boolean pending)", "modifiers": "@Override public", "return": "GroupMembership", "signature": "GroupMembership getGroupMember(String domainName, String groupName, String member, long expiration, boolean pending)", "full_signature": "@Override public GroupMembership getGroupMember(String domainName, String groupName, String member, long expiration, boolean pending)", "class_method_signature": "JDBCConnection.getGroupMember(String domainName, String groupName, String member, long expiration, boolean pending)", "testcase": false, "constructor": false}, {"identifier": "groupMemberExists", "parameters": "(int groupId, int principalId, boolean pending, final String caller)", "modifiers": "", "return": "boolean", "signature": "boolean groupMemberExists(int groupId, int principalId, boolean pending, final String caller)", "full_signature": " boolean groupMemberExists(int groupId, int principalId, boolean pending, final String caller)", "class_method_signature": "JDBCConnection.groupMemberExists(int groupId, int principalId, boolean pending, final String caller)", "testcase": false, "constructor": false}, {"identifier": "insertGroupAuditLog", "parameters": "(int groupId, String admin, String member,\n                               String action, String auditRef)", "modifiers": "", "return": "boolean", "signature": "boolean insertGroupAuditLog(int groupId, String admin, String member,\n                               String action, String auditRef)", "full_signature": " boolean insertGroupAuditLog(int groupId, String admin, String member,\n                               String action, String auditRef)", "class_method_signature": "JDBCConnection.insertGroupAuditLog(int groupId, String admin, String member,\n                               String action, String auditRef)", "testcase": false, "constructor": false}, {"identifier": "insertPendingGroupMember", "parameters": "(int groupId, int principalId, GroupMember groupMember,\n                                    final String admin, final String auditRef, boolean groupMemberExists, final String caller)", "modifiers": "", "return": "boolean", "signature": "boolean insertPendingGroupMember(int groupId, int principalId, GroupMember groupMember,\n                                    final String admin, final String auditRef, boolean groupMemberExists, final String caller)", "full_signature": " boolean insertPendingGroupMember(int groupId, int principalId, GroupMember groupMember,\n                                    final String admin, final String auditRef, boolean groupMemberExists, final String caller)", "class_method_signature": "JDBCConnection.insertPendingGroupMember(int groupId, int principalId, GroupMember groupMember,\n                                    final String admin, final String auditRef, boolean groupMemberExists, final String caller)", "testcase": false, "constructor": false}, {"identifier": "insertStandardGroupMember", "parameters": "(int groupId, int principalId, GroupMember groupMember,\n                                     final String admin, final String principal, final String auditRef,\n                                     boolean groupMemberExists, boolean approveRequest, final String caller)", "modifiers": "", "return": "boolean", "signature": "boolean insertStandardGroupMember(int groupId, int principalId, GroupMember groupMember,\n                                     final String admin, final String principal, final String auditRef,\n                                     boolean groupMemberExists, boolean approveRequest, final String caller)", "full_signature": " boolean insertStandardGroupMember(int groupId, int principalId, GroupMember groupMember,\n                                     final String admin, final String principal, final String auditRef,\n                                     boolean groupMemberExists, boolean approveRequest, final String caller)", "class_method_signature": "JDBCConnection.insertStandardGroupMember(int groupId, int principalId, GroupMember groupMember,\n                                     final String admin, final String principal, final String auditRef,\n                                     boolean groupMemberExists, boolean approveRequest, final String caller)", "testcase": false, "constructor": false}, {"identifier": "insertGroupMember", "parameters": "(String domainName, String groupName, GroupMember groupMember,\n                                     String admin, String auditRef)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean insertGroupMember(String domainName, String groupName, GroupMember groupMember,\n                                     String admin, String auditRef)", "full_signature": "@Override public boolean insertGroupMember(String domainName, String groupName, GroupMember groupMember,\n                                     String admin, String auditRef)", "class_method_signature": "JDBCConnection.insertGroupMember(String domainName, String groupName, GroupMember groupMember,\n                                     String admin, String auditRef)", "testcase": false, "constructor": false}, {"identifier": "deleteGroupMember", "parameters": "(String domainName, String groupName, String principal, String admin, String auditRef)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deleteGroupMember(String domainName, String groupName, String principal, String admin, String auditRef)", "full_signature": "@Override public boolean deleteGroupMember(String domainName, String groupName, String principal, String admin, String auditRef)", "class_method_signature": "JDBCConnection.deleteGroupMember(String domainName, String groupName, String principal, String admin, String auditRef)", "testcase": false, "constructor": false}, {"identifier": "updateGroupMemberDisabledState", "parameters": "(String domainName, String groupName, String principal, String admin,\n                                                  int disabledState, String auditRef)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateGroupMemberDisabledState(String domainName, String groupName, String principal, String admin,\n                                                  int disabledState, String auditRef)", "full_signature": "@Override public boolean updateGroupMemberDisabledState(String domainName, String groupName, String principal, String admin,\n                                                  int disabledState, String auditRef)", "class_method_signature": "JDBCConnection.updateGroupMemberDisabledState(String domainName, String groupName, String principal, String admin,\n                                                  int disabledState, String auditRef)", "testcase": false, "constructor": false}, {"identifier": "deletePendingGroupMember", "parameters": "(String domainName, String groupName, String principal,\n                                           String admin, String auditRef)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deletePendingGroupMember(String domainName, String groupName, String principal,\n                                           String admin, String auditRef)", "full_signature": "@Override public boolean deletePendingGroupMember(String domainName, String groupName, String principal,\n                                           String admin, String auditRef)", "class_method_signature": "JDBCConnection.deletePendingGroupMember(String domainName, String groupName, String principal,\n                                           String admin, String auditRef)", "testcase": false, "constructor": false}, {"identifier": "executeDeletePendingGroupMember", "parameters": "(int groupId, int principalId, final String admin,\n                                                  final String principal, final String auditRef, boolean auditLog, final String caller)", "modifiers": "public", "return": "boolean", "signature": "boolean executeDeletePendingGroupMember(int groupId, int principalId, final String admin,\n                                                  final String principal, final String auditRef, boolean auditLog, final String caller)", "full_signature": "public boolean executeDeletePendingGroupMember(int groupId, int principalId, final String admin,\n                                                  final String principal, final String auditRef, boolean auditLog, final String caller)", "class_method_signature": "JDBCConnection.executeDeletePendingGroupMember(int groupId, int principalId, final String admin,\n                                                  final String principal, final String auditRef, boolean auditLog, final String caller)", "testcase": false, "constructor": false}, {"identifier": "confirmGroupMember", "parameters": "(String domainName, String groupName, GroupMember groupMember,\n                                      String admin, String auditRef)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean confirmGroupMember(String domainName, String groupName, GroupMember groupMember,\n                                      String admin, String auditRef)", "full_signature": "@Override public boolean confirmGroupMember(String domainName, String groupName, GroupMember groupMember,\n                                      String admin, String auditRef)", "class_method_signature": "JDBCConnection.confirmGroupMember(String domainName, String groupName, GroupMember groupMember,\n                                      String admin, String auditRef)", "testcase": false, "constructor": false}, {"identifier": "getGroupsForPrincipal", "parameters": "(String caller, DomainGroupMember domainGroupMember, PreparedStatement ps)", "modifiers": "private", "return": "DomainGroupMember", "signature": "DomainGroupMember getGroupsForPrincipal(String caller, DomainGroupMember domainGroupMember, PreparedStatement ps)", "full_signature": "private DomainGroupMember getGroupsForPrincipal(String caller, DomainGroupMember domainGroupMember, PreparedStatement ps)", "class_method_signature": "JDBCConnection.getGroupsForPrincipal(String caller, DomainGroupMember domainGroupMember, PreparedStatement ps)", "testcase": false, "constructor": false}, {"identifier": "getPrincipalGroups", "parameters": "(String principal, String domainName)", "modifiers": "@Override public", "return": "DomainGroupMember", "signature": "DomainGroupMember getPrincipalGroups(String principal, String domainName)", "full_signature": "@Override public DomainGroupMember getPrincipalGroups(String principal, String domainName)", "class_method_signature": "JDBCConnection.getPrincipalGroups(String principal, String domainName)", "testcase": false, "constructor": false}, {"identifier": "listGroupsWithUserAuthorityRestrictions", "parameters": "()", "modifiers": "@Override public", "return": "List<PrincipalGroup>", "signature": "List<PrincipalGroup> listGroupsWithUserAuthorityRestrictions()", "full_signature": "@Override public List<PrincipalGroup> listGroupsWithUserAuthorityRestrictions()", "class_method_signature": "JDBCConnection.listGroupsWithUserAuthorityRestrictions()", "testcase": false, "constructor": false}, {"identifier": "generateDomainTemplateVersionQuery", "parameters": "(Map<String, Integer> templateNameAndLatestVersion)", "modifiers": "public", "return": "String", "signature": "String generateDomainTemplateVersionQuery(Map<String, Integer> templateNameAndLatestVersion)", "full_signature": "public String generateDomainTemplateVersionQuery(Map<String, Integer> templateNameAndLatestVersion)", "class_method_signature": "JDBCConnection.generateDomainTemplateVersionQuery(Map<String, Integer> templateNameAndLatestVersion)", "testcase": false, "constructor": false}, {"identifier": "notFoundError", "parameters": "(String caller, String objectType, String objectName)", "modifiers": "", "return": "RuntimeException", "signature": "RuntimeException notFoundError(String caller, String objectType, String objectName)", "full_signature": " RuntimeException notFoundError(String caller, String objectType, String objectName)", "class_method_signature": "JDBCConnection.notFoundError(String caller, String objectType, String objectName)", "testcase": false, "constructor": false}, {"identifier": "requestError", "parameters": "(String caller, String message)", "modifiers": "", "return": "RuntimeException", "signature": "RuntimeException requestError(String caller, String message)", "full_signature": " RuntimeException requestError(String caller, String message)", "class_method_signature": "JDBCConnection.requestError(String caller, String message)", "testcase": false, "constructor": false}, {"identifier": "internalServerError", "parameters": "(String caller, String message)", "modifiers": "", "return": "RuntimeException", "signature": "RuntimeException internalServerError(String caller, String message)", "full_signature": " RuntimeException internalServerError(String caller, String message)", "class_method_signature": "JDBCConnection.internalServerError(String caller, String message)", "testcase": false, "constructor": false}, {"identifier": "sqlError", "parameters": "(SQLException ex, String caller)", "modifiers": "", "return": "RuntimeException", "signature": "RuntimeException sqlError(SQLException ex, String caller)", "full_signature": " RuntimeException sqlError(SQLException ex, String caller)", "class_method_signature": "JDBCConnection.sqlError(SQLException ex, String caller)", "testcase": false, "constructor": false}, {"identifier": "nullIfDefaultValue", "parameters": "(boolean flag, boolean defaultValue)", "modifiers": "", "return": "Boolean", "signature": "Boolean nullIfDefaultValue(boolean flag, boolean defaultValue)", "full_signature": " Boolean nullIfDefaultValue(boolean flag, boolean defaultValue)", "class_method_signature": "JDBCConnection.nullIfDefaultValue(boolean flag, boolean defaultValue)", "testcase": false, "constructor": false}, {"identifier": "nullIfDefaultValue", "parameters": "(int value, int defaultValue)", "modifiers": "", "return": "Integer", "signature": "Integer nullIfDefaultValue(int value, int defaultValue)", "full_signature": " Integer nullIfDefaultValue(int value, int defaultValue)", "class_method_signature": "JDBCConnection.nullIfDefaultValue(int value, int defaultValue)", "testcase": false, "constructor": false}], "file": "servers/zms/src/main/java/com/yahoo/athenz/zms/store/jdbc/JDBCConnection.java"}, "focal_method": {"identifier": "deleteDomainTemplate", "parameters": "(String domainName, String templateName, String params)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean deleteDomainTemplate(String domainName, String templateName, String params) {\n        \n        final String caller = \"deleteDomainTemplate\";\n\n        int domainId = getDomainId(domainName);\n        if (domainId == 0) {\n            throw notFoundError(caller, ZMSConsts.OBJECT_DOMAIN, domainName);\n        }\n        int affectedRows;\n        try (PreparedStatement ps = con.prepareStatement(SQL_DELETE_DOMAIN_TEMPLATE)) {\n            ps.setInt(1, domainId);\n            ps.setString(2, templateName);\n            affectedRows = executeUpdate(ps, caller);\n        } catch (SQLException ex) {\n            throw sqlError(ex, caller);\n        }\n        return (affectedRows > 0);\n    }", "signature": "boolean deleteDomainTemplate(String domainName, String templateName, String params)", "full_signature": "@Override public boolean deleteDomainTemplate(String domainName, String templateName, String params)", "class_method_signature": "JDBCConnection.deleteDomainTemplate(String domainName, String templateName, String params)", "testcase": false, "constructor": false, "invocations": ["getDomainId", "notFoundError", "prepareStatement", "setInt", "setString", "executeUpdate", "sqlError"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}