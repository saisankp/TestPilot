{"test_class": {"identifier": "ConsumerCoordinatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String topicName = \"test\";", "modifier": "private", "type": "String", "declarator": "topicName = \"test\"", "var_name": "topicName"}, {"original_string": "private String groupId = \"test-group\";", "modifier": "private", "type": "String", "declarator": "groupId = \"test-group\"", "var_name": "groupId"}, {"original_string": "private TopicPartition tp = new TopicPartition(topicName, 0);", "modifier": "private", "type": "TopicPartition", "declarator": "tp = new TopicPartition(topicName, 0)", "var_name": "tp"}, {"original_string": "private int sessionTimeoutMs = 10000;", "modifier": "private", "type": "int", "declarator": "sessionTimeoutMs = 10000", "var_name": "sessionTimeoutMs"}, {"original_string": "private int heartbeatIntervalMs = 5000;", "modifier": "private", "type": "int", "declarator": "heartbeatIntervalMs = 5000", "var_name": "heartbeatIntervalMs"}, {"original_string": "private long retryBackoffMs = 100;", "modifier": "private", "type": "long", "declarator": "retryBackoffMs = 100", "var_name": "retryBackoffMs"}, {"original_string": "private boolean autoCommitEnabled = false;", "modifier": "private", "type": "boolean", "declarator": "autoCommitEnabled = false", "var_name": "autoCommitEnabled"}, {"original_string": "private long autoCommitIntervalMs = 2000;", "modifier": "private", "type": "long", "declarator": "autoCommitIntervalMs = 2000", "var_name": "autoCommitIntervalMs"}, {"original_string": "private MockPartitionAssignor partitionAssignor = new MockPartitionAssignor();", "modifier": "private", "type": "MockPartitionAssignor", "declarator": "partitionAssignor = new MockPartitionAssignor()", "var_name": "partitionAssignor"}, {"original_string": "private List<PartitionAssignor> assignors = Collections.<PartitionAssignor>singletonList(partitionAssignor);", "modifier": "private", "type": "List<PartitionAssignor>", "declarator": "assignors = Collections.<PartitionAssignor>singletonList(partitionAssignor)", "var_name": "assignors"}, {"original_string": "private MockTime time;", "modifier": "private", "type": "MockTime", "declarator": "time", "var_name": "time"}, {"original_string": "private MockClient client;", "modifier": "private", "type": "MockClient", "declarator": "client", "var_name": "client"}, {"original_string": "private Cluster cluster = TestUtils.singletonCluster(topicName, 1);", "modifier": "private", "type": "Cluster", "declarator": "cluster = TestUtils.singletonCluster(topicName, 1)", "var_name": "cluster"}, {"original_string": "private Node node = cluster.nodes().get(0);", "modifier": "private", "type": "Node", "declarator": "node = cluster.nodes().get(0)", "var_name": "node"}, {"original_string": "private SubscriptionState subscriptions;", "modifier": "private", "type": "SubscriptionState", "declarator": "subscriptions", "var_name": "subscriptions"}, {"original_string": "private Metadata metadata;", "modifier": "private", "type": "Metadata", "declarator": "metadata", "var_name": "metadata"}, {"original_string": "private Metrics metrics;", "modifier": "private", "type": "Metrics", "declarator": "metrics", "var_name": "metrics"}, {"original_string": "private ConsumerNetworkClient consumerClient;", "modifier": "private", "type": "ConsumerNetworkClient", "declarator": "consumerClient", "var_name": "consumerClient"}, {"original_string": "private MockRebalanceListener rebalanceListener;", "modifier": "private", "type": "MockRebalanceListener", "declarator": "rebalanceListener", "var_name": "rebalanceListener"}, {"original_string": "private MockCommitCallback defaultOffsetCommitCallback;", "modifier": "private", "type": "MockCommitCallback", "declarator": "defaultOffsetCommitCallback", "var_name": "defaultOffsetCommitCallback"}, {"original_string": "private ConsumerCoordinator coordinator;", "modifier": "private", "type": "ConsumerCoordinator", "declarator": "coordinator", "var_name": "coordinator"}], "file": "clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java"}, "test_case": {"identifier": "testCommitOffsetAsyncFailedWithDefaultCallback", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCommitOffsetAsyncFailedWithDefaultCallback() {\n        int invokedBeforeTest = defaultOffsetCommitCallback.invoked;\n        client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n        client.prepareResponse(offsetCommitResponse(Collections.singletonMap(tp, Errors.GROUP_COORDINATOR_NOT_AVAILABLE.code())));\n        coordinator.commitOffsetsAsync(Collections.singletonMap(tp, new OffsetAndMetadata(100L)), null);\n        assertEquals(invokedBeforeTest + 1, defaultOffsetCommitCallback.invoked);\n        assertTrue(defaultOffsetCommitCallback.exception instanceof RetriableCommitFailedException);\n    }", "signature": "void testCommitOffsetAsyncFailedWithDefaultCallback()", "full_signature": "@Test public void testCommitOffsetAsyncFailedWithDefaultCallback()", "class_method_signature": "ConsumerCoordinatorTest.testCommitOffsetAsyncFailedWithDefaultCallback()", "testcase": true, "constructor": false, "invocations": ["prepareResponse", "consumerMetadataResponse", "code", "ensureCoordinatorReady", "prepareResponse", "offsetCommitResponse", "singletonMap", "code", "commitOffsetsAsync", "singletonMap", "assertEquals", "assertTrue"]}, "focal_class": {"identifier": "ConsumerCoordinator", "superclass": "extends AbstractCoordinator", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(ConsumerCoordinator.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ConsumerCoordinator.class)", "var_name": "log"}, {"original_string": "private final List<PartitionAssignor> assignors;", "modifier": "private final", "type": "List<PartitionAssignor>", "declarator": "assignors", "var_name": "assignors"}, {"original_string": "private final Metadata metadata;", "modifier": "private final", "type": "Metadata", "declarator": "metadata", "var_name": "metadata"}, {"original_string": "private final ConsumerCoordinatorMetrics sensors;", "modifier": "private final", "type": "ConsumerCoordinatorMetrics", "declarator": "sensors", "var_name": "sensors"}, {"original_string": "private final SubscriptionState subscriptions;", "modifier": "private final", "type": "SubscriptionState", "declarator": "subscriptions", "var_name": "subscriptions"}, {"original_string": "private final OffsetCommitCallback defaultOffsetCommitCallback;", "modifier": "private final", "type": "OffsetCommitCallback", "declarator": "defaultOffsetCommitCallback", "var_name": "defaultOffsetCommitCallback"}, {"original_string": "private final boolean autoCommitEnabled;", "modifier": "private final", "type": "boolean", "declarator": "autoCommitEnabled", "var_name": "autoCommitEnabled"}, {"original_string": "private final AutoCommitTask autoCommitTask;", "modifier": "private final", "type": "AutoCommitTask", "declarator": "autoCommitTask", "var_name": "autoCommitTask"}, {"original_string": "private final ConsumerInterceptors<?, ?> interceptors;", "modifier": "private final", "type": "ConsumerInterceptors<?, ?>", "declarator": "interceptors", "var_name": "interceptors"}, {"original_string": "private final boolean excludeInternalTopics;", "modifier": "private final", "type": "boolean", "declarator": "excludeInternalTopics", "var_name": "excludeInternalTopics"}, {"original_string": "private MetadataSnapshot metadataSnapshot;", "modifier": "private", "type": "MetadataSnapshot", "declarator": "metadataSnapshot", "var_name": "metadataSnapshot"}, {"original_string": "private MetadataSnapshot assignmentSnapshot;", "modifier": "private", "type": "MetadataSnapshot", "declarator": "assignmentSnapshot", "var_name": "assignmentSnapshot"}], "methods": [{"identifier": "ConsumerCoordinator", "parameters": "(ConsumerNetworkClient client,\n        String groupId,\n        int sessionTimeoutMs,\n        int heartbeatIntervalMs,\n        List<PartitionAssignor> assignors,\n        Metadata metadata,\n        SubscriptionState subscriptions,\n        Metrics metrics,\n        String metricGrpPrefix,\n        Time time,\n        long retryBackoffMs,\n        OffsetCommitCallback defaultOffsetCommitCallback,\n        boolean autoCommitEnabled,\n        long autoCommitIntervalMs,\n        ConsumerInterceptors<?, ?> interceptors,\n        boolean excludeInternalTopics)", "modifiers": "public", "return": "", "signature": " ConsumerCoordinator(ConsumerNetworkClient client,\n        String groupId,\n        int sessionTimeoutMs,\n        int heartbeatIntervalMs,\n        List<PartitionAssignor> assignors,\n        Metadata metadata,\n        SubscriptionState subscriptions,\n        Metrics metrics,\n        String metricGrpPrefix,\n        Time time,\n        long retryBackoffMs,\n        OffsetCommitCallback defaultOffsetCommitCallback,\n        boolean autoCommitEnabled,\n        long autoCommitIntervalMs,\n        ConsumerInterceptors<?, ?> interceptors,\n        boolean excludeInternalTopics)", "full_signature": "public  ConsumerCoordinator(ConsumerNetworkClient client,\n        String groupId,\n        int sessionTimeoutMs,\n        int heartbeatIntervalMs,\n        List<PartitionAssignor> assignors,\n        Metadata metadata,\n        SubscriptionState subscriptions,\n        Metrics metrics,\n        String metricGrpPrefix,\n        Time time,\n        long retryBackoffMs,\n        OffsetCommitCallback defaultOffsetCommitCallback,\n        boolean autoCommitEnabled,\n        long autoCommitIntervalMs,\n        ConsumerInterceptors<?, ?> interceptors,\n        boolean excludeInternalTopics)", "class_method_signature": "ConsumerCoordinator.ConsumerCoordinator(ConsumerNetworkClient client,\n        String groupId,\n        int sessionTimeoutMs,\n        int heartbeatIntervalMs,\n        List<PartitionAssignor> assignors,\n        Metadata metadata,\n        SubscriptionState subscriptions,\n        Metrics metrics,\n        String metricGrpPrefix,\n        Time time,\n        long retryBackoffMs,\n        OffsetCommitCallback defaultOffsetCommitCallback,\n        boolean autoCommitEnabled,\n        long autoCommitIntervalMs,\n        ConsumerInterceptors<?, ?> interceptors,\n        boolean excludeInternalTopics)", "testcase": false, "constructor": true}, {"identifier": "protocolType", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String protocolType()", "full_signature": "@Override public String protocolType()", "class_method_signature": "ConsumerCoordinator.protocolType()", "testcase": false, "constructor": false}, {"identifier": "metadata", "parameters": "()", "modifiers": "@Override public", "return": "List<ProtocolMetadata>", "signature": "List<ProtocolMetadata> metadata()", "full_signature": "@Override public List<ProtocolMetadata> metadata()", "class_method_signature": "ConsumerCoordinator.metadata()", "testcase": false, "constructor": false}, {"identifier": "addMetadataListener", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void addMetadataListener()", "full_signature": "private void addMetadataListener()", "class_method_signature": "ConsumerCoordinator.addMetadataListener()", "testcase": false, "constructor": false}, {"identifier": "filterTopic", "parameters": "(String topic)", "modifiers": "private", "return": "boolean", "signature": "boolean filterTopic(String topic)", "full_signature": "private boolean filterTopic(String topic)", "class_method_signature": "ConsumerCoordinator.filterTopic(String topic)", "testcase": false, "constructor": false}, {"identifier": "lookupAssignor", "parameters": "(String name)", "modifiers": "private", "return": "PartitionAssignor", "signature": "PartitionAssignor lookupAssignor(String name)", "full_signature": "private PartitionAssignor lookupAssignor(String name)", "class_method_signature": "ConsumerCoordinator.lookupAssignor(String name)", "testcase": false, "constructor": false}, {"identifier": "performAssignment", "parameters": "(String leaderId,\n        String assignmentStrategy,\n        Map<String/* memberId */, ByteBuffer/* \u5305\u542b\u5b83\u5173\u6ce8\u4e86\u90a3\u4e9b topic */> allSubscriptions) {", "modifiers": "@Override protected", "return": "Map<String, ByteBuffer>", "signature": "Map<String, ByteBuffer> performAssignment(String leaderId,\n        String assignmentStrategy,\n        Map<String/* memberId */, ByteBuffer/* \u5305\u542b\u5b83\u5173\u6ce8\u4e86\u90a3\u4e9b topic */> allSubscriptions) {", "full_signature": "@Override protected Map<String, ByteBuffer> performAssignment(String leaderId,\n        String assignmentStrategy,\n        Map<String/* memberId */, ByteBuffer/* \u5305\u542b\u5b83\u5173\u6ce8\u4e86\u90a3\u4e9b topic */> allSubscriptions) {", "class_method_signature": "ConsumerCoordinator.performAssignment(String leaderId,\n        String assignmentStrategy,\n        Map<String/* memberId */, ByteBuffer/* \u5305\u542b\u5b83\u5173\u6ce8\u4e86\u90a3\u4e9b topic */> allSubscriptions) {", "testcase": false, "constructor": false}, {"identifier": "onJoinComplete", "parameters": "(int generation,\n        String memberId,\n        String assignmentStrategy,\n        ByteBuffer assignmentBuffer)", "modifiers": "@Override protected", "return": "void", "signature": "void onJoinComplete(int generation,\n        String memberId,\n        String assignmentStrategy,\n        ByteBuffer assignmentBuffer)", "full_signature": "@Override protected void onJoinComplete(int generation,\n        String memberId,\n        String assignmentStrategy,\n        ByteBuffer assignmentBuffer)", "class_method_signature": "ConsumerCoordinator.onJoinComplete(int generation,\n        String memberId,\n        String assignmentStrategy,\n        ByteBuffer assignmentBuffer)", "testcase": false, "constructor": false}, {"identifier": "onJoinPrepare", "parameters": "(int generation, String memberId)", "modifiers": "@Override protected", "return": "void", "signature": "void onJoinPrepare(int generation, String memberId)", "full_signature": "@Override protected void onJoinPrepare(int generation, String memberId)", "class_method_signature": "ConsumerCoordinator.onJoinPrepare(int generation, String memberId)", "testcase": false, "constructor": false}, {"identifier": "needRejoin", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean needRejoin()", "full_signature": "@Override public boolean needRejoin()", "class_method_signature": "ConsumerCoordinator.needRejoin()", "testcase": false, "constructor": false}, {"identifier": "refreshCommittedOffsetsIfNeeded", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void refreshCommittedOffsetsIfNeeded()", "full_signature": "public void refreshCommittedOffsetsIfNeeded()", "class_method_signature": "ConsumerCoordinator.refreshCommittedOffsetsIfNeeded()", "testcase": false, "constructor": false}, {"identifier": "fetchCommittedOffsets", "parameters": "(Set<TopicPartition> partitions)", "modifiers": "public", "return": "Map<TopicPartition, OffsetAndMetadata>", "signature": "Map<TopicPartition, OffsetAndMetadata> fetchCommittedOffsets(Set<TopicPartition> partitions)", "full_signature": "public Map<TopicPartition, OffsetAndMetadata> fetchCommittedOffsets(Set<TopicPartition> partitions)", "class_method_signature": "ConsumerCoordinator.fetchCommittedOffsets(Set<TopicPartition> partitions)", "testcase": false, "constructor": false}, {"identifier": "ensurePartitionAssignment", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void ensurePartitionAssignment()", "full_signature": "public void ensurePartitionAssignment()", "class_method_signature": "ConsumerCoordinator.ensurePartitionAssignment()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "ConsumerCoordinator.close()", "testcase": false, "constructor": false}, {"identifier": "commitOffsetsAsync", "parameters": "(final Map<TopicPartition, OffsetAndMetadata> offsets, OffsetCommitCallback callback)", "modifiers": "public", "return": "void", "signature": "void commitOffsetsAsync(final Map<TopicPartition, OffsetAndMetadata> offsets, OffsetCommitCallback callback)", "full_signature": "public void commitOffsetsAsync(final Map<TopicPartition, OffsetAndMetadata> offsets, OffsetCommitCallback callback)", "class_method_signature": "ConsumerCoordinator.commitOffsetsAsync(final Map<TopicPartition, OffsetAndMetadata> offsets, OffsetCommitCallback callback)", "testcase": false, "constructor": false}, {"identifier": "commitOffsetsSync", "parameters": "(Map<TopicPartition, OffsetAndMetadata> offsets)", "modifiers": "public", "return": "void", "signature": "void commitOffsetsSync(Map<TopicPartition, OffsetAndMetadata> offsets)", "full_signature": "public void commitOffsetsSync(Map<TopicPartition, OffsetAndMetadata> offsets)", "class_method_signature": "ConsumerCoordinator.commitOffsetsSync(Map<TopicPartition, OffsetAndMetadata> offsets)", "testcase": false, "constructor": false}, {"identifier": "maybeAutoCommitOffsetsSync", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void maybeAutoCommitOffsetsSync()", "full_signature": "private void maybeAutoCommitOffsetsSync()", "class_method_signature": "ConsumerCoordinator.maybeAutoCommitOffsetsSync()", "testcase": false, "constructor": false}, {"identifier": "sendOffsetCommitRequest", "parameters": "(final Map<TopicPartition, OffsetAndMetadata> offsets)", "modifiers": "private", "return": "RequestFuture<Void>", "signature": "RequestFuture<Void> sendOffsetCommitRequest(final Map<TopicPartition, OffsetAndMetadata> offsets)", "full_signature": "private RequestFuture<Void> sendOffsetCommitRequest(final Map<TopicPartition, OffsetAndMetadata> offsets)", "class_method_signature": "ConsumerCoordinator.sendOffsetCommitRequest(final Map<TopicPartition, OffsetAndMetadata> offsets)", "testcase": false, "constructor": false}, {"identifier": "sendOffsetFetchRequest", "parameters": "(Set<TopicPartition> partitions)", "modifiers": "private", "return": "RequestFuture<Map<TopicPartition, OffsetAndMetadata>>", "signature": "RequestFuture<Map<TopicPartition, OffsetAndMetadata>> sendOffsetFetchRequest(Set<TopicPartition> partitions)", "full_signature": "private RequestFuture<Map<TopicPartition, OffsetAndMetadata>> sendOffsetFetchRequest(Set<TopicPartition> partitions)", "class_method_signature": "ConsumerCoordinator.sendOffsetFetchRequest(Set<TopicPartition> partitions)", "testcase": false, "constructor": false}], "file": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.java"}, "focal_method": {"identifier": "commitOffsetsAsync", "parameters": "(final Map<TopicPartition, OffsetAndMetadata> offsets, OffsetCommitCallback callback)", "modifiers": "public", "return": "void", "body": "public void commitOffsetsAsync(final Map<TopicPartition, OffsetAndMetadata> offsets, OffsetCommitCallback callback) {\n        this.subscriptions.needRefreshCommits();\n        RequestFuture<Void> future = sendOffsetCommitRequest(offsets);\n        final OffsetCommitCallback cb = callback == null ? defaultOffsetCommitCallback : callback;\n        future.addListener(new RequestFutureListener<Void>() {\n\n            @Override\n            public void onSuccess(Void value) {\n                if (interceptors != null) {\n                    interceptors.onCommit(offsets);\n                }\n                cb.onComplete(offsets, null);\n            }\n\n            @Override\n            public void onFailure(RuntimeException e) {\n                if (e instanceof RetriableException) {\n                    cb.onComplete(offsets, new RetriableCommitFailedException(\"Commit offsets failed with retriable exception. You should retry committing offsets.\", e));\n                } else {\n                    cb.onComplete(offsets, e);\n                }\n            }\n        });\n\n        // ensure the commit has a chance to be transmitted (without blocking on its completion).\n        // Note that commits are treated as heartbeats by the coordinator, so there is no need to\n        // explicitly allow heartbeats through delayed task execution.\n\n        // \u786e\u4fdd\u63d0\u4ea4\u6709\u673a\u4f1a\u88ab\u4f20\u8f93\uff08\u4e0d\u5728\u5b83\u5b8c\u6210\u65f6\u963b\u585e\uff09\uff1f\n        // \u6ce8\u610f\u63d0\u4ea4\u4f1a\u88ab\u5f53\u4f5cheartbeats\u6765\u5bf9\u5f85\uff0c\u6240\u4ee5\u8fd9\u91cc\u4e0d\u9700\u8981\u901a\u8fc7\u5ef6\u8fdf\u4efb\u52a1\u6267\u884c\u663e\u793a\u5730\u5141\u8bb8\u5fc3\u8df3\n        client.pollNoWakeup();\n    }", "signature": "void commitOffsetsAsync(final Map<TopicPartition, OffsetAndMetadata> offsets, OffsetCommitCallback callback)", "full_signature": "public void commitOffsetsAsync(final Map<TopicPartition, OffsetAndMetadata> offsets, OffsetCommitCallback callback)", "class_method_signature": "ConsumerCoordinator.commitOffsetsAsync(final Map<TopicPartition, OffsetAndMetadata> offsets, OffsetCommitCallback callback)", "testcase": false, "constructor": false, "invocations": ["needRefreshCommits", "sendOffsetCommitRequest", "addListener", "onCommit", "onComplete", "onComplete", "onComplete", "pollNoWakeup"]}, "repository": {"repo_id": 135978112, "url": "https://github.com/anurnomeru/kafka-0.10.0.1-source-reading", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 2953, "license": "licensed"}}