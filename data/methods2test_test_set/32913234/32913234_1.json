{"test_class": {"identifier": "StatusesTemplateTest", "superclass": "extends AbstractTemplateTest", "interfaces": "", "fields": [{"original_string": "protected StatusesTemplate statusesTemplate;", "modifier": "protected", "type": "StatusesTemplate", "declarator": "statusesTemplate", "var_name": "statusesTemplate"}], "file": "misc/github-client-parent/github-client-spring/src/test/java/org/zalando/github/spring/StatusesTemplateTest.java"}, "test_case": {"identifier": "listStatuses", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void listStatuses() throws Exception {\n\t\tmockServer.expect(requestTo(\"https://api.github.com/repos/zalando-stups/blub/commits/abcdefgh1234567/statuses\"))\n\t\t\t\t.andExpect(method(HttpMethod.GET))\n\t\t\t\t// .andExpect(header(\"Authorization\", \"Bearer ACCESS_TOKEN\"))\n\t\t\t\t.andRespond(withSuccess(jsonResource(\"statusList\"), APPLICATION_JSON));\n\n\t\tList<Status> statusList = statusesTemplate.listStatuses(\"zalando-stups\", \"blub\", \"abcdefgh1234567\");\n\n\t\tAssertions.assertThat(statusList).isNotNull();\n\t\tAssertions.assertThat(statusList.size()).isEqualTo(1);\n\t\tAssertions.assertThat(statusList.get(0).getId()).isEqualTo(1);\n\t}", "signature": "void listStatuses()", "full_signature": "@Test public void listStatuses()", "class_method_signature": "StatusesTemplateTest.listStatuses()", "testcase": true, "constructor": false, "invocations": ["andRespond", "andExpect", "expect", "requestTo", "method", "withSuccess", "jsonResource", "listStatuses", "isNotNull", "assertThat", "isEqualTo", "assertThat", "size", "isEqualTo", "assertThat", "getId", "get"]}, "focal_class": {"identifier": "StatusesTemplate", "superclass": "extends AbstractGithubTemplate", "interfaces": "implements StatusesOperations", "fields": [{"original_string": "private final ParameterizedTypeReference<List<Status>> statusListTypeRef = new ParameterizedTypeReference<List<Status>>() {\n\t};", "modifier": "private final", "type": "ParameterizedTypeReference<List<Status>>", "declarator": "statusListTypeRef = new ParameterizedTypeReference<List<Status>>() {\n\t}", "var_name": "statusListTypeRef"}], "methods": [{"identifier": "StatusesTemplate", "parameters": "(RestOperations restOperations)", "modifiers": "public", "return": "", "signature": " StatusesTemplate(RestOperations restOperations)", "full_signature": "public  StatusesTemplate(RestOperations restOperations)", "class_method_signature": "StatusesTemplate.StatusesTemplate(RestOperations restOperations)", "testcase": false, "constructor": true}, {"identifier": "createStatus", "parameters": "(String owner, String repository, String sha, StatusRequest body)", "modifiers": "@Override public", "return": "Status", "signature": "Status createStatus(String owner, String repository, String sha, StatusRequest body)", "full_signature": "@Override public Status createStatus(String owner, String repository, String sha, StatusRequest body)", "class_method_signature": "StatusesTemplate.createStatus(String owner, String repository, String sha, StatusRequest body)", "testcase": false, "constructor": false}, {"identifier": "listStatuses", "parameters": "(String owner, String repository,String ref)", "modifiers": "@Override public", "return": "List<Status>", "signature": "List<Status> listStatuses(String owner, String repository,String ref)", "full_signature": "@Override public List<Status> listStatuses(String owner, String repository,String ref)", "class_method_signature": "StatusesTemplate.listStatuses(String owner, String repository,String ref)", "testcase": false, "constructor": false}, {"identifier": "getCombinedStatus", "parameters": "(String owner, String repository, String ref)", "modifiers": "@Override public", "return": "CombinedStatus", "signature": "CombinedStatus getCombinedStatus(String owner, String repository, String ref)", "full_signature": "@Override public CombinedStatus getCombinedStatus(String owner, String repository, String ref)", "class_method_signature": "StatusesTemplate.getCombinedStatus(String owner, String repository, String ref)", "testcase": false, "constructor": false}], "file": "misc/github-client-parent/github-client-spring/src/main/java/org/zalando/github/spring/StatusesTemplate.java"}, "focal_method": {"identifier": "listStatuses", "parameters": "(String owner, String repository,String ref)", "modifiers": "@Override public", "return": "List<Status>", "body": "@Override\n\tpublic List<Status> listStatuses(String owner, String repository,String ref) {\n\t\tMap<String, Object> uriVariables = new HashMap<>();\n\t\turiVariables.put(\"owner\", owner);\n\t\turiVariables.put(\"repository\", repository);\n\t\turiVariables.put(\"ref\", ref);\n\t\t\n\t\treturn getRestOperations().exchange(buildUri(\"/repos/{owner}/{repository}/commits/{ref}/statuses\", uriVariables),\n\t\t\t\tHttpMethod.GET, null, statusListTypeRef).getBody();\n\t}", "signature": "List<Status> listStatuses(String owner, String repository,String ref)", "full_signature": "@Override public List<Status> listStatuses(String owner, String repository,String ref)", "class_method_signature": "StatusesTemplate.listStatuses(String owner, String repository,String ref)", "testcase": false, "constructor": false, "invocations": ["put", "put", "put", "getBody", "exchange", "getRestOperations", "buildUri"]}, "repository": {"repo_id": 32913234, "url": "https://github.com/zalando-stups/booties", "language": "Java", "is_fork": false, "fork_count": 18, "stargazer_count": 35, "size": 330, "license": "licensed"}}