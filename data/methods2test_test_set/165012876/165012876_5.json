{"test_class": {"identifier": "RunfilesTest", "superclass": "", "interfaces": "", "fields": [], "file": "tools/java/runfiles/RunfilesTest.java"}, "test_case": {"identifier": "testDirectoryBasedCtorArgumentValidation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testDirectoryBasedCtorArgumentValidation() throws Exception {\n    try {\n      Runfiles.createDirectoryBasedForTesting(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n\n    try {\n      Runfiles.createDirectoryBasedForTesting(\"\");\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n\n    try {\n      Runfiles.createDirectoryBasedForTesting(\"non-existent directory is bad\");\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n\n    Runfiles.createDirectoryBasedForTesting(System.getenv(\"TEST_TMPDIR\"));\n  }", "signature": "void testDirectoryBasedCtorArgumentValidation()", "full_signature": "@Test public void testDirectoryBasedCtorArgumentValidation()", "class_method_signature": "RunfilesTest.testDirectoryBasedCtorArgumentValidation()", "testcase": true, "constructor": false, "invocations": ["createDirectoryBasedForTesting", "fail", "createDirectoryBasedForTesting", "fail", "createDirectoryBasedForTesting", "fail", "createDirectoryBasedForTesting", "getenv"]}, "focal_class": {"identifier": "Runfiles", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "Runfiles", "parameters": "()", "modifiers": "private", "return": "", "signature": " Runfiles()", "full_signature": "private  Runfiles()", "class_method_signature": "Runfiles.Runfiles()", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "()", "modifiers": "public static", "return": "Runfiles", "signature": "Runfiles create()", "full_signature": "public static Runfiles create()", "class_method_signature": "Runfiles.create()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Map<String, String> env)", "modifiers": "public static", "return": "Runfiles", "signature": "Runfiles create(Map<String, String> env)", "full_signature": "public static Runfiles create(Map<String, String> env)", "class_method_signature": "Runfiles.create(Map<String, String> env)", "testcase": false, "constructor": false}, {"identifier": "rlocation", "parameters": "(String path)", "modifiers": "public final", "return": "String", "signature": "String rlocation(String path)", "full_signature": "public final String rlocation(String path)", "class_method_signature": "Runfiles.rlocation(String path)", "testcase": false, "constructor": false}, {"identifier": "getEnvVars", "parameters": "()", "modifiers": "public abstract", "return": "Map<String, String>", "signature": "Map<String, String> getEnvVars()", "full_signature": "public abstract Map<String, String> getEnvVars()", "class_method_signature": "Runfiles.getEnvVars()", "testcase": false, "constructor": false}, {"identifier": "isManifestOnly", "parameters": "(Map<String, String> env)", "modifiers": "private static", "return": "boolean", "signature": "boolean isManifestOnly(Map<String, String> env)", "full_signature": "private static boolean isManifestOnly(Map<String, String> env)", "class_method_signature": "Runfiles.isManifestOnly(Map<String, String> env)", "testcase": false, "constructor": false}, {"identifier": "getManifestPath", "parameters": "(Map<String, String> env)", "modifiers": "private static", "return": "String", "signature": "String getManifestPath(Map<String, String> env)", "full_signature": "private static String getManifestPath(Map<String, String> env)", "class_method_signature": "Runfiles.getManifestPath(Map<String, String> env)", "testcase": false, "constructor": false}, {"identifier": "getRunfilesDir", "parameters": "(Map<String, String> env)", "modifiers": "private static", "return": "String", "signature": "String getRunfilesDir(Map<String, String> env)", "full_signature": "private static String getRunfilesDir(Map<String, String> env)", "class_method_signature": "Runfiles.getRunfilesDir(Map<String, String> env)", "testcase": false, "constructor": false}, {"identifier": "rlocationChecked", "parameters": "(String path)", "modifiers": "abstract", "return": "String", "signature": "String rlocationChecked(String path)", "full_signature": "abstract String rlocationChecked(String path)", "class_method_signature": "Runfiles.rlocationChecked(String path)", "testcase": false, "constructor": false}, {"identifier": "createManifestBasedForTesting", "parameters": "(String manifestPath)", "modifiers": "static", "return": "Runfiles", "signature": "Runfiles createManifestBasedForTesting(String manifestPath)", "full_signature": "static Runfiles createManifestBasedForTesting(String manifestPath)", "class_method_signature": "Runfiles.createManifestBasedForTesting(String manifestPath)", "testcase": false, "constructor": false}, {"identifier": "createDirectoryBasedForTesting", "parameters": "(String runfilesDir)", "modifiers": "static", "return": "Runfiles", "signature": "Runfiles createDirectoryBasedForTesting(String runfilesDir)", "full_signature": "static Runfiles createDirectoryBasedForTesting(String runfilesDir)", "class_method_signature": "Runfiles.createDirectoryBasedForTesting(String runfilesDir)", "testcase": false, "constructor": false}], "file": "tools/java/runfiles/Runfiles.java"}, "focal_method": {"identifier": "createDirectoryBasedForTesting", "parameters": "(String runfilesDir)", "modifiers": "static", "return": "Runfiles", "body": "static Runfiles createDirectoryBasedForTesting(String runfilesDir) throws IOException {\n    return new DirectoryBased(runfilesDir);\n  }", "signature": "Runfiles createDirectoryBasedForTesting(String runfilesDir)", "full_signature": "static Runfiles createDirectoryBasedForTesting(String runfilesDir)", "class_method_signature": "Runfiles.createDirectoryBasedForTesting(String runfilesDir)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 165012876, "url": "https://github.com/FengRillian/bazel-0.21.0-dist", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 80487, "license": "licensed"}}