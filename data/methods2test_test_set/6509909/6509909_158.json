{"test_class": {"identifier": "LeapYearTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final int year;", "modifier": "private final", "type": "int", "declarator": "year", "var_name": "year"}, {"original_string": "private final boolean isLeapYear;", "modifier": "private final", "type": "boolean", "declarator": "isLeapYear", "var_name": "isLeapYear"}, {"original_string": "private LeapYear leapYear;", "modifier": "private", "type": "LeapYear", "declarator": "leapYear", "var_name": "leapYear"}], "file": "leap-year/20151204_daniele_2/src/test/java/LeapYearTest.java"}, "test_case": {"identifier": "testIsLeap", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsLeap() {\n        assertThat(leapYear.isLeap(year)).isEqualTo(isLeapYear);\n    }", "signature": "void testIsLeap()", "full_signature": "@Test public void testIsLeap()", "class_method_signature": "LeapYearTest.testIsLeap()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "isLeap"]}, "focal_class": {"identifier": "LeapYear", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "isLeap", "parameters": "(int year)", "modifiers": "public", "return": "boolean", "signature": "boolean isLeap(int year)", "full_signature": "public boolean isLeap(int year)", "class_method_signature": "LeapYear.isLeap(int year)", "testcase": false, "constructor": false}, {"identifier": "isDivisibleBy", "parameters": "(int year, int divisor)", "modifiers": "private", "return": "boolean", "signature": "boolean isDivisibleBy(int year, int divisor)", "full_signature": "private boolean isDivisibleBy(int year, int divisor)", "class_method_signature": "LeapYear.isDivisibleBy(int year, int divisor)", "testcase": false, "constructor": false}], "file": "leap-year/20151204_daniele_2/src/main/java/LeapYear.java"}, "focal_method": {"identifier": "isLeap", "parameters": "(int year)", "modifiers": "public", "return": "boolean", "body": "public boolean isLeap(int year) {\n        if (isDivisibleBy(year, 400)) {\n            return true;\n        }\n\n        return isDivisibleBy(year, 4) && !isDivisibleBy(year, 100);\n    }", "signature": "boolean isLeap(int year)", "full_signature": "public boolean isLeap(int year)", "class_method_signature": "LeapYear.isLeap(int year)", "testcase": false, "constructor": false, "invocations": ["isDivisibleBy", "isDivisibleBy", "isDivisibleBy"]}, "repository": {"repo_id": 6509909, "url": "https://github.com/novoda/dojos", "language": "Java", "is_fork": false, "fork_count": 21, "stargazer_count": 72, "size": 12987, "license": "licensed"}}