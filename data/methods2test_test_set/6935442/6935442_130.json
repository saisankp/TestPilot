{"test_class": {"identifier": "MetaModelServiceDefaultTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "ServiceInjector stubServicesInjector;", "modifier": "", "type": "ServiceInjector", "declarator": "stubServicesInjector", "var_name": "stubServicesInjector"}, {"original_string": "MetaModelServiceDefault mockMetaModelService;", "modifier": "", "type": "MetaModelServiceDefault", "declarator": "mockMetaModelService", "var_name": "mockMetaModelService"}, {"original_string": "ObjectAction action;", "modifier": "", "type": "ObjectAction", "declarator": "action", "var_name": "action"}, {"original_string": "ObjectSpecification mockSpec;", "modifier": "", "type": "ObjectSpecification", "declarator": "mockSpec", "var_name": "mockSpec"}, {"original_string": "FacetedMethod mockFacetedMethod;", "modifier": "", "type": "FacetedMethod", "declarator": "mockFacetedMethod", "var_name": "mockFacetedMethod"}], "file": "core/metamodel/src/test/java/org/apache/isis/core/metamodel/services/metamodel/MetaModelServiceDefaultTest.java"}, "test_case": {"identifier": "model_marshalling", "parameters": "()", "modifiers": "@Test @DisplayName(\"model to XML marshalling should not throw\")", "return": "void", "body": "@Test @DisplayName(\"model to XML marshalling should not throw\")\n    void model_marshalling() throws JAXBException {\n        DomainModel domainMembers = mockMetaModelService.getDomainModel();\n\n        JAXBContext jaxbContext = JAXBContext.newInstance(DomainModelDefault.class);\n        Marshaller jaxbMarshaller = jaxbContext.createMarshaller();\n        jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\n\n        jaxbMarshaller.marshal(domainMembers, noopOutput());\n    }", "signature": "void model_marshalling()", "full_signature": "@Test @DisplayName(\"model to XML marshalling should not throw\") void model_marshalling()", "class_method_signature": "MetaModelServiceDefaultTest.model_marshalling()", "testcase": true, "constructor": false, "invocations": ["getDomainModel", "newInstance", "createMarshaller", "setProperty", "marshal", "noopOutput"]}, "focal_class": {"identifier": "MetaModelServiceDefault", "superclass": "", "interfaces": "implements MetaModelService", "fields": [{"original_string": "@Inject private SpecificationLoader specificationLoader;", "modifier": "@Inject private", "type": "SpecificationLoader", "declarator": "specificationLoader", "var_name": "specificationLoader"}, {"original_string": "@Inject private GridService gridService;", "modifier": "@Inject private", "type": "GridService", "declarator": "gridService", "var_name": "gridService"}, {"original_string": "private MetaModelExporter metaModelExporter;", "modifier": "private", "type": "MetaModelExporter", "declarator": "metaModelExporter", "var_name": "metaModelExporter"}], "methods": [{"identifier": "init", "parameters": "()", "modifiers": "@PostConstruct public", "return": "void", "signature": "void init()", "full_signature": "@PostConstruct public void init()", "class_method_signature": "MetaModelServiceDefault.init()", "testcase": false, "constructor": false}, {"identifier": "fromObjectType", "parameters": "(final String objectType)", "modifiers": "@Override public", "return": "Class<?>", "signature": "Class<?> fromObjectType(final String objectType)", "full_signature": "@Override public Class<?> fromObjectType(final String objectType)", "class_method_signature": "MetaModelServiceDefault.fromObjectType(final String objectType)", "testcase": false, "constructor": false}, {"identifier": "toObjectType", "parameters": "(final Class<?> domainType)", "modifiers": "@Override public", "return": "String", "signature": "String toObjectType(final Class<?> domainType)", "full_signature": "@Override public String toObjectType(final Class<?> domainType)", "class_method_signature": "MetaModelServiceDefault.toObjectType(final Class<?> domainType)", "testcase": false, "constructor": false}, {"identifier": "rebuild", "parameters": "(final Class<?> domainType)", "modifiers": "@Override public", "return": "void", "signature": "void rebuild(final Class<?> domainType)", "full_signature": "@Override public void rebuild(final Class<?> domainType)", "class_method_signature": "MetaModelServiceDefault.rebuild(final Class<?> domainType)", "testcase": false, "constructor": false}, {"identifier": "getDomainModel", "parameters": "()", "modifiers": "@Override public", "return": "DomainModel", "signature": "DomainModel getDomainModel()", "full_signature": "@Override public DomainModel getDomainModel()", "class_method_signature": "MetaModelServiceDefault.getDomainModel()", "testcase": false, "constructor": false}, {"identifier": "exclude", "parameters": "(final OneToOneAssociation property)", "modifiers": "protected", "return": "boolean", "signature": "boolean exclude(final OneToOneAssociation property)", "full_signature": "protected boolean exclude(final OneToOneAssociation property)", "class_method_signature": "MetaModelServiceDefault.exclude(final OneToOneAssociation property)", "testcase": false, "constructor": false}, {"identifier": "exclude", "parameters": "(final OneToManyAssociation collection)", "modifiers": "protected", "return": "boolean", "signature": "boolean exclude(final OneToManyAssociation collection)", "full_signature": "protected boolean exclude(final OneToManyAssociation collection)", "class_method_signature": "MetaModelServiceDefault.exclude(final OneToManyAssociation collection)", "testcase": false, "constructor": false}, {"identifier": "exclude", "parameters": "(final ObjectAction action)", "modifiers": "protected", "return": "boolean", "signature": "boolean exclude(final ObjectAction action)", "full_signature": "protected boolean exclude(final ObjectAction action)", "class_method_signature": "MetaModelServiceDefault.exclude(final ObjectAction action)", "testcase": false, "constructor": false}, {"identifier": "exclude", "parameters": "(final ObjectSpecification spec)", "modifiers": "protected", "return": "boolean", "signature": "boolean exclude(final ObjectSpecification spec)", "full_signature": "protected boolean exclude(final ObjectSpecification spec)", "class_method_signature": "MetaModelServiceDefault.exclude(final ObjectSpecification spec)", "testcase": false, "constructor": false}, {"identifier": "isBuiltIn", "parameters": "(final ObjectSpecification spec)", "modifiers": "protected", "return": "boolean", "signature": "boolean isBuiltIn(final ObjectSpecification spec)", "full_signature": "protected boolean isBuiltIn(final ObjectSpecification spec)", "class_method_signature": "MetaModelServiceDefault.isBuiltIn(final ObjectSpecification spec)", "testcase": false, "constructor": false}, {"identifier": "sortOf", "parameters": "(\n            final Class<?> domainType, final Mode mode)", "modifiers": "@Override public", "return": "BeanSort", "signature": "BeanSort sortOf(\n            final Class<?> domainType, final Mode mode)", "full_signature": "@Override public BeanSort sortOf(\n            final Class<?> domainType, final Mode mode)", "class_method_signature": "MetaModelServiceDefault.sortOf(\n            final Class<?> domainType, final Mode mode)", "testcase": false, "constructor": false}, {"identifier": "sortOf", "parameters": "(final Bookmark bookmark, final Mode mode)", "modifiers": "@Override public", "return": "BeanSort", "signature": "BeanSort sortOf(final Bookmark bookmark, final Mode mode)", "full_signature": "@Override public BeanSort sortOf(final Bookmark bookmark, final Mode mode)", "class_method_signature": "MetaModelServiceDefault.sortOf(final Bookmark bookmark, final Mode mode)", "testcase": false, "constructor": false}, {"identifier": "commandDtoProcessorFor", "parameters": "(final String memberIdentifier)", "modifiers": "@Override public", "return": "CommandDtoProcessor", "signature": "CommandDtoProcessor commandDtoProcessorFor(final String memberIdentifier)", "full_signature": "@Override public CommandDtoProcessor commandDtoProcessorFor(final String memberIdentifier)", "class_method_signature": "MetaModelServiceDefault.commandDtoProcessorFor(final String memberIdentifier)", "testcase": false, "constructor": false}, {"identifier": "exportMetaModel", "parameters": "(final Config config)", "modifiers": "@Override public", "return": "MetamodelDto", "signature": "MetamodelDto exportMetaModel(final Config config)", "full_signature": "@Override public MetamodelDto exportMetaModel(final Config config)", "class_method_signature": "MetaModelServiceDefault.exportMetaModel(final Config config)", "testcase": false, "constructor": false}], "file": "core/metamodel/src/main/java/org/apache/isis/core/metamodel/services/metamodel/MetaModelServiceDefault.java"}, "focal_method": {"identifier": "getDomainModel", "parameters": "()", "modifiers": "@Override public", "return": "DomainModel", "body": "@Override\n    public DomainModel getDomainModel() {\n\n        final Collection<ObjectSpecification> specifications = specificationLoader.snapshotSpecifications();\n\n        final List<DomainMember> rows = _Lists.newArrayList();\n        for (final ObjectSpecification spec : specifications) {\n            if (exclude(spec)) {\n                continue;\n            }\n\n            {\n                final Stream<ObjectAssociation> properties = \n                        spec.streamAssociations(Contributed.EXCLUDED)\n                        .filter(ObjectAssociation.Predicates.PROPERTIES);\n\n                properties\n                .map(property->(OneToOneAssociation) property)\n                .filter(otoa->!exclude(otoa))\n                .forEach(otoa->rows.add(new DomainMemberDefault(spec, otoa)));\n            }\n\n            {\n                final Stream<ObjectAssociation> associations = \n                        spec.streamAssociations(Contributed.EXCLUDED)\n                        .filter(ObjectAssociation.Predicates.COLLECTIONS);\n\n                associations\n                .map(collection->(OneToManyAssociation) collection)\n                .filter(otma->!exclude(otma))\n                .forEach(otma->rows.add(new DomainMemberDefault(spec, otma)));\n            }\n\n            {\n                final Stream<ObjectAction> actions = \n                        spec.streamObjectActions(Contributed.INCLUDED);\n\n                actions\n                .filter(action->!exclude(action))\n                .forEach(action->rows.add(new DomainMemberDefault(spec, action)));\n            }\n        }\n\n        Collections.sort(rows);\n\n        return new DomainModelDefault(rows);\n    }", "signature": "DomainModel getDomainModel()", "full_signature": "@Override public DomainModel getDomainModel()", "class_method_signature": "MetaModelServiceDefault.getDomainModel()", "testcase": false, "constructor": false, "invocations": ["snapshotSpecifications", "newArrayList", "exclude", "filter", "streamAssociations", "forEach", "filter", "map", "exclude", "add", "filter", "streamAssociations", "forEach", "filter", "map", "exclude", "add", "streamObjectActions", "forEach", "filter", "exclude", "add", "sort"]}, "repository": {"repo_id": 6935442, "url": "https://github.com/apache/isis", "stars": 516, "created": "11/30/2012 8:00:24 AM +00:00", "updates": "2020-01-27T13:28:09+00:00", "fork": "False", "license": "licensed"}}