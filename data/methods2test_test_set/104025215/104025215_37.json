{"test_class": {"identifier": "LazyListTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TestExecutor mMainThread = new TestExecutor();", "modifier": "private", "type": "TestExecutor", "declarator": "mMainThread = new TestExecutor()", "var_name": "mMainThread"}, {"original_string": "private TestExecutor mBackgroundThread = new TestExecutor();", "modifier": "private", "type": "TestExecutor", "declarator": "mBackgroundThread = new TestExecutor()", "var_name": "mBackgroundThread"}, {"original_string": "private TestCountedDataSource mDataSource;", "modifier": "private", "type": "TestCountedDataSource", "declarator": "mDataSource", "var_name": "mDataSource"}, {"original_string": "private LazyList.ChangeCallback mChangeCallback = Mockito.mock(LazyList.ChangeCallback.class);", "modifier": "private", "type": "LazyList.ChangeCallback", "declarator": "mChangeCallback = Mockito.mock(LazyList.ChangeCallback.class)", "var_name": "mChangeCallback"}], "file": "paging/common/src/test/java/android/arch/util/paging/LazyListTest.java"}, "test_case": {"identifier": "initialPrefetchMultiple", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void initialPrefetchMultiple() {\n        LazyList<User> lazyList = createLazyList(20, 90);\n        lazyList.get(0);\n        drain();\n        TestCountedDataSource.verifyRange(lazyList, 0, 100);\n    }", "signature": "void initialPrefetchMultiple()", "full_signature": "@Test public void initialPrefetchMultiple()", "class_method_signature": "LazyListTest.initialPrefetchMultiple()", "testcase": true, "constructor": false, "invocations": ["createLazyList", "get", "drain", "verifyRange"]}, "focal_class": {"identifier": "LazyList", "superclass": "extends PagerBase<Type>", "interfaces": "", "fields": [{"original_string": "private int mMissedMinIndex = Integer.MAX_VALUE;", "modifier": "private", "type": "int", "declarator": "mMissedMinIndex = Integer.MAX_VALUE", "var_name": "mMissedMinIndex"}, {"original_string": "private int mMissedMaxIndex = -1;", "modifier": "private", "type": "int", "declarator": "mMissedMaxIndex = -1", "var_name": "mMissedMaxIndex"}, {"original_string": "private int mStartPos;", "modifier": "private", "type": "int", "declarator": "mStartPos", "var_name": "mStartPos"}, {"original_string": "private final int mSize;", "modifier": "private final", "type": "int", "declarator": "mSize", "var_name": "mSize"}, {"original_string": "private volatile int mLastAccessed;", "modifier": "private volatile", "type": "int", "declarator": "mLastAccessed", "var_name": "mLastAccessed"}, {"original_string": "private SafeIterableMap<ChangeCallback,\n            ChangeCallbackWrapper> mCallbacks = new SafeIterableMap<>();", "modifier": "private", "type": "SafeIterableMap<ChangeCallback,\n            ChangeCallbackWrapper>", "declarator": "mCallbacks = new SafeIterableMap<>()", "var_name": "mCallbacks"}, {"original_string": "private CountedDataSource<Type> mCountedDataSource;", "modifier": "private", "type": "CountedDataSource<Type>", "declarator": "mCountedDataSource", "var_name": "mCountedDataSource"}], "methods": [{"identifier": "LazyList", "parameters": "(@NonNull CountedDataSource<Type> countedDataSource,\n            @NonNull Executor mainThreadExecutor, @NonNull Executor backgroundThreadExecutor,\n            @NonNull ListConfig config)", "modifiers": "@WorkerThread public", "return": "", "signature": " LazyList(@NonNull CountedDataSource<Type> countedDataSource,\n            @NonNull Executor mainThreadExecutor, @NonNull Executor backgroundThreadExecutor,\n            @NonNull ListConfig config)", "full_signature": "@WorkerThread public  LazyList(@NonNull CountedDataSource<Type> countedDataSource,\n            @NonNull Executor mainThreadExecutor, @NonNull Executor backgroundThreadExecutor,\n            @NonNull ListConfig config)", "class_method_signature": "LazyList.LazyList(@NonNull CountedDataSource<Type> countedDataSource,\n            @NonNull Executor mainThreadExecutor, @NonNull Executor backgroundThreadExecutor,\n            @NonNull ListConfig config)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "(int index)", "modifiers": "@Override @Nullable public", "return": "Type", "signature": "Type get(int index)", "full_signature": "@Override @Nullable public Type get(int index)", "class_method_signature": "LazyList.get(int index)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "LazyList.size()", "testcase": false, "constructor": false}, {"identifier": "access", "parameters": "(int index)", "modifiers": "@Override @Nullable public", "return": "Type", "signature": "Type access(int index)", "full_signature": "@Override @Nullable public Type access(int index)", "class_method_signature": "LazyList.access(int index)", "testcase": false, "constructor": false}, {"identifier": "getInitialLoadPositionFor", "parameters": "(int index)", "modifiers": "private", "return": "int", "signature": "int getInitialLoadPositionFor(int index)", "full_signature": "private int getInitialLoadPositionFor(int index)", "class_method_signature": "LazyList.getInitialLoadPositionFor(int index)", "testcase": false, "constructor": false}, {"identifier": "getInitialLoadPosition", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getInitialLoadPosition()", "full_signature": "public int getInitialLoadPosition()", "class_method_signature": "LazyList.getInitialLoadPosition()", "testcase": false, "constructor": false}, {"identifier": "triggerInitialLoad", "parameters": "(final int loadAfterPos)", "modifiers": "@MainThread private", "return": "void", "signature": "void triggerInitialLoad(final int loadAfterPos)", "full_signature": "@MainThread private void triggerInitialLoad(final int loadAfterPos)", "class_method_signature": "LazyList.triggerInitialLoad(final int loadAfterPos)", "testcase": false, "constructor": false}, {"identifier": "internalInit", "parameters": "(int loadAfterPos)", "modifiers": "public", "return": "boolean", "signature": "boolean internalInit(int loadAfterPos)", "full_signature": "public boolean internalInit(int loadAfterPos)", "class_method_signature": "LazyList.internalInit(int loadAfterPos)", "testcase": false, "constructor": false}, {"identifier": "setInitialDataAndDispatch", "parameters": "(int loadAfterPos, List<Type> items)", "modifiers": "private", "return": "void", "signature": "void setInitialDataAndDispatch(int loadAfterPos, List<Type> items)", "full_signature": "private void setInitialDataAndDispatch(int loadAfterPos, List<Type> items)", "class_method_signature": "LazyList.setInitialDataAndDispatch(int loadAfterPos, List<Type> items)", "testcase": false, "constructor": false}, {"identifier": "addCallback", "parameters": "(ChangeCallback callback)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public", "return": "void", "signature": "void addCallback(ChangeCallback callback)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public void addCallback(ChangeCallback callback)", "class_method_signature": "LazyList.addCallback(ChangeCallback callback)", "testcase": false, "constructor": false}, {"identifier": "removeCallback", "parameters": "(ChangeCallback callback)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public", "return": "void", "signature": "void removeCallback(ChangeCallback callback)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public void removeCallback(ChangeCallback callback)", "class_method_signature": "LazyList.removeCallback(ChangeCallback callback)", "testcase": false, "constructor": false}, {"identifier": "dispatchChange", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void dispatchChange()", "full_signature": "private void dispatchChange()", "class_method_signature": "LazyList.dispatchChange()", "testcase": false, "constructor": false}, {"identifier": "onItemsPrepended", "parameters": "(int count)", "modifiers": "@Override", "return": "void", "signature": "void onItemsPrepended(int count)", "full_signature": "@Override void onItemsPrepended(int count)", "class_method_signature": "LazyList.onItemsPrepended(int count)", "testcase": false, "constructor": false}, {"identifier": "onItemsAppended", "parameters": "(int count)", "modifiers": "@Override", "return": "void", "signature": "void onItemsAppended(int count)", "full_signature": "@Override void onItemsAppended(int count)", "class_method_signature": "LazyList.onItemsAppended(int count)", "testcase": false, "constructor": false}, {"identifier": "loadBeforeIfNeeded", "parameters": "()", "modifiers": "@Override", "return": "void", "signature": "void loadBeforeIfNeeded()", "full_signature": "@Override void loadBeforeIfNeeded()", "class_method_signature": "LazyList.loadBeforeIfNeeded()", "testcase": false, "constructor": false}, {"identifier": "loadAfterIfNeeded", "parameters": "()", "modifiers": "@Override", "return": "void", "signature": "void loadAfterIfNeeded()", "full_signature": "@Override void loadAfterIfNeeded()", "class_method_signature": "LazyList.loadAfterIfNeeded()", "testcase": false, "constructor": false}, {"identifier": "loadBeforeImpl", "parameters": "(int position, Type item)", "modifiers": "@Nullable @Override", "return": "List<Type>", "signature": "List<Type> loadBeforeImpl(int position, Type item)", "full_signature": "@Nullable @Override List<Type> loadBeforeImpl(int position, Type item)", "class_method_signature": "LazyList.loadBeforeImpl(int position, Type item)", "testcase": false, "constructor": false}, {"identifier": "loadAfterImpl", "parameters": "(int position, Type item)", "modifiers": "@Nullable @Override", "return": "List<Type>", "signature": "List<Type> loadAfterImpl(int position, Type item)", "full_signature": "@Nullable @Override List<Type> loadAfterImpl(int position, Type item)", "class_method_signature": "LazyList.loadAfterImpl(int position, Type item)", "testcase": false, "constructor": false}], "file": "paging/common/src/main/java/android/arch/util/paging/LazyList.java"}, "focal_method": {"identifier": "get", "parameters": "(int index)", "modifiers": "@Override @Nullable public", "return": "Type", "body": "@Override\n    @Nullable\n    public Type get(int index) {\n        if (index < 0 || index >= mSize) {\n            throw new IndexOutOfBoundsException(index + \" is out of bounds. Size:\" + mSize);\n        }\n\n        mLastAccessed = index;\n\n        final boolean initialLoadComplete = mItems != null;\n\n        // note: intentionally avoid triggering prefetching, so that prefetches aren't outstanding\n        // when LazyList is passed to consumers\n\n        // prefetch\n        int minTarget = Math.max(0, index - mConfig.mPrefetchDistance);\n        int maxTarget = Math.min(mSize, index + mConfig.mPrefetchDistance);\n        if (minTarget < mMissedMinIndex) {\n            mMissedMinIndex = minTarget;\n            if (initialLoadComplete) {\n                loadBeforeIfNeeded();\n            }\n        }\n        if (maxTarget > mMissedMaxIndex) {\n            mMissedMaxIndex = maxTarget;\n            if (initialLoadComplete) {\n                loadAfterIfNeeded();\n            }\n        }\n\n        if (initialLoadComplete) {\n            return access(index);\n        } else {\n            triggerInitialLoad(getInitialLoadPositionFor(index));\n            return null;\n        }\n    }", "signature": "Type get(int index)", "full_signature": "@Override @Nullable public Type get(int index)", "class_method_signature": "LazyList.get(int index)", "testcase": false, "constructor": false, "invocations": ["max", "min", "loadBeforeIfNeeded", "loadAfterIfNeeded", "access", "triggerInitialLoad", "getInitialLoadPositionFor"]}, "repository": {"repo_id": 104025215, "url": "https://github.com/Rayduh/support", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 8, "size": 253405, "license": "licensed"}}