{"test_class": {"identifier": "BloomFilterHttpServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String testingFilterName = \"TestingFilter\";", "modifier": "private static final", "type": "String", "declarator": "testingFilterName = \"TestingFilter\"", "var_name": "testingFilterName"}, {"original_string": "private static final ObjectMapper mapper = new ObjectMapper();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}, {"original_string": "private static final GuavaBloomFilterFactory factory = new GuavaBloomFilterFactory();", "modifier": "private static final", "type": "GuavaBloomFilterFactory", "declarator": "factory = new GuavaBloomFilterFactory()", "var_name": "factory"}, {"original_string": "private BloomFilterManager<GuavaBloomFilter, ExpirableBloomFilterConfig> mockedManager;", "modifier": "private", "type": "BloomFilterManager<GuavaBloomFilter, ExpirableBloomFilterConfig>", "declarator": "mockedManager", "var_name": "mockedManager"}, {"original_string": "private BloomFilterHttpService service;", "modifier": "private", "type": "BloomFilterHttpService", "declarator": "service", "var_name": "service"}], "file": "filter-service-core/src/test/java/cn/leancloud/filter/service/BloomFilterHttpServiceTest.java"}, "test_case": {"identifier": "testForceCreateFilter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testForceCreateFilter() throws Exception {\n        final int validPeriodAfterCreate = 1000;\n        final int validPeriodAfterAccess = 100;\n        final int expectedInsertions = 1000000;\n        final double fpp = 0.0001;\n        final ObjectNode request = mapper.createObjectNode();\n        request.put(\"validPeriodAfterCreate\", validPeriodAfterCreate);\n        request.put(\"validPeriodAfterAccess\", validPeriodAfterAccess);\n        request.put(\"fpp\", fpp);\n        request.put(\"expectedInsertions\", expectedInsertions);\n        request.put(\"overwrite\", true);\n        final ExpirableBloomFilterConfig expectConfig = new ExpirableBloomFilterConfig(expectedInsertions, fpp);\n        expectConfig.setValidPeriodAfterCreate(Duration.ofSeconds(validPeriodAfterCreate));\n        expectConfig.setValidPeriodAfterAccess(Duration.ofSeconds(validPeriodAfterAccess));\n        final GuavaBloomFilter expectedFilter = factory.createFilter(expectConfig);\n        final CreateFilterResult<GuavaBloomFilter> result = new CreateFilterResult<>(expectedFilter, true);\n\n        when(mockedManager.createFilter(testingFilterName, expectConfig, true)).thenReturn(result);\n\n        final AggregatedHttpResponse response = service.create(testingFilterName, request).aggregate().get();\n        assertThat(response.status().code()).isEqualTo(HttpStatus.CREATED.code());\n        final JsonNode responseInJson = mapper.readTree(response.content(StandardCharsets.UTF_8));\n        final GuavaBloomFilter filter = new ObjectMapper()\n                .readerFor(GuavaBloomFilter.class)\n                .readValue(responseInJson);\n        assertThat(filter).isNotNull().isEqualTo(expectedFilter);\n    }", "signature": "void testForceCreateFilter()", "full_signature": "@Test public void testForceCreateFilter()", "class_method_signature": "BloomFilterHttpServiceTest.testForceCreateFilter()", "testcase": true, "constructor": false, "invocations": ["createObjectNode", "put", "put", "put", "put", "put", "setValidPeriodAfterCreate", "ofSeconds", "setValidPeriodAfterAccess", "ofSeconds", "createFilter", "thenReturn", "when", "createFilter", "get", "aggregate", "create", "isEqualTo", "assertThat", "code", "status", "code", "readTree", "content", "readValue", "readerFor", "isEqualTo", "isNotNull", "assertThat"]}, "focal_class": {"identifier": "BloomFilterHttpService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ObjectMapper MAPPER = new ObjectMapper();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "MAPPER = new ObjectMapper()", "var_name": "MAPPER"}, {"original_string": "private final BloomFilterManager<?, ? super ExpirableBloomFilterConfig> bloomFilterManager;", "modifier": "private final", "type": "BloomFilterManager<?, ? super ExpirableBloomFilterConfig>", "declarator": "bloomFilterManager", "var_name": "bloomFilterManager"}], "methods": [{"identifier": "BloomFilterHttpService", "parameters": "(BloomFilterManager<?, ? super ExpirableBloomFilterConfig> bloomFilterManager)", "modifiers": "public", "return": "", "signature": " BloomFilterHttpService(BloomFilterManager<?, ? super ExpirableBloomFilterConfig> bloomFilterManager)", "full_signature": "public  BloomFilterHttpService(BloomFilterManager<?, ? super ExpirableBloomFilterConfig> bloomFilterManager)", "class_method_signature": "BloomFilterHttpService.BloomFilterHttpService(BloomFilterManager<?, ? super ExpirableBloomFilterConfig> bloomFilterManager)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(@Param String name,\n                               @RequestObject JsonNode req)", "modifiers": "@Put(\"/{name}\") public", "return": "HttpResponse", "signature": "HttpResponse create(@Param String name,\n                               @RequestObject JsonNode req)", "full_signature": "@Put(\"/{name}\") public HttpResponse create(@Param String name,\n                               @RequestObject JsonNode req)", "class_method_signature": "BloomFilterHttpService.create(@Param String name,\n                               @RequestObject JsonNode req)", "testcase": false, "constructor": false}, {"identifier": "getFilterInfo", "parameters": "(@Param String name)", "modifiers": "@Get(\"/{name}\") public", "return": "JsonNode", "signature": "JsonNode getFilterInfo(@Param String name)", "full_signature": "@Get(\"/{name}\") public JsonNode getFilterInfo(@Param String name)", "class_method_signature": "BloomFilterHttpService.getFilterInfo(@Param String name)", "testcase": false, "constructor": false}, {"identifier": "list", "parameters": "()", "modifiers": "@Get(\"/list\") public", "return": "JsonNode", "signature": "JsonNode list()", "full_signature": "@Get(\"/list\") public JsonNode list()", "class_method_signature": "BloomFilterHttpService.list()", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(@Param String name,\n                          @RequestObject JsonNode req)", "modifiers": "@Post(\"/{name}/check\") public", "return": "JsonNode", "signature": "JsonNode check(@Param String name,\n                          @RequestObject JsonNode req)", "full_signature": "@Post(\"/{name}/check\") public JsonNode check(@Param String name,\n                          @RequestObject JsonNode req)", "class_method_signature": "BloomFilterHttpService.check(@Param String name,\n                          @RequestObject JsonNode req)", "testcase": false, "constructor": false}, {"identifier": "multiCheck", "parameters": "(@Param String name,\n                               @RequestObject JsonNode req)", "modifiers": "@Post(\"/{name}/multi-check\") public", "return": "JsonNode", "signature": "JsonNode multiCheck(@Param String name,\n                               @RequestObject JsonNode req)", "full_signature": "@Post(\"/{name}/multi-check\") public JsonNode multiCheck(@Param String name,\n                               @RequestObject JsonNode req)", "class_method_signature": "BloomFilterHttpService.multiCheck(@Param String name,\n                               @RequestObject JsonNode req)", "testcase": false, "constructor": false}, {"identifier": "checkAndSet", "parameters": "(@Param String name,\n                                @RequestObject JsonNode req)", "modifiers": "@Post(\"/{name}/check-and-set\") public", "return": "JsonNode", "signature": "JsonNode checkAndSet(@Param String name,\n                                @RequestObject JsonNode req)", "full_signature": "@Post(\"/{name}/check-and-set\") public JsonNode checkAndSet(@Param String name,\n                                @RequestObject JsonNode req)", "class_method_signature": "BloomFilterHttpService.checkAndSet(@Param String name,\n                                @RequestObject JsonNode req)", "testcase": false, "constructor": false}, {"identifier": "multiCheckAndSet", "parameters": "(@Param String name,\n                                     @RequestObject JsonNode req)", "modifiers": "@Post(\"/{name}/multi-check-and-set\") public", "return": "JsonNode", "signature": "JsonNode multiCheckAndSet(@Param String name,\n                                     @RequestObject JsonNode req)", "full_signature": "@Post(\"/{name}/multi-check-and-set\") public JsonNode multiCheckAndSet(@Param String name,\n                                     @RequestObject JsonNode req)", "class_method_signature": "BloomFilterHttpService.multiCheckAndSet(@Param String name,\n                                     @RequestObject JsonNode req)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(@Param String name)", "modifiers": "@Delete(\"/{name}\") public", "return": "HttpResponse", "signature": "HttpResponse remove(@Param String name)", "full_signature": "@Delete(\"/{name}\") public HttpResponse remove(@Param String name)", "class_method_signature": "BloomFilterHttpService.remove(@Param String name)", "testcase": false, "constructor": false}], "file": "filter-service-core/src/main/java/cn/leancloud/filter/service/BloomFilterHttpService.java"}, "focal_method": {"identifier": "create", "parameters": "(@Param String name,\n                               @RequestObject JsonNode req)", "modifiers": "@Put(\"/{name}\") public", "return": "HttpResponse", "body": "@Put(\"/{name}\")\n    public HttpResponse create(@Param String name,\n                               @RequestObject JsonNode req) {\n        final JsonNode expectedInsertions = req.get(\"expectedInsertions\");\n        final JsonNode fpp = req.get(\"fpp\");\n        final JsonNode validPeriodAfterCreate = req.get(\"validPeriod\") == null ?\n                req.get(\"validPeriodAfterCreate\") : req.get(\"validPeriod\");\n        final JsonNode validPeriodAfterAccess = req.get(\"validPeriodAfterAccess\");\n        final JsonNode overwrite = req.get(\"overwrite\");\n        final ExpirableBloomFilterConfig config = new ExpirableBloomFilterConfig();\n\n        if (expectedInsertions != null) {\n            config.setExpectedInsertions(expectedInsertions.intValue());\n        }\n        if (fpp != null) {\n            config.setFpp(fpp.doubleValue());\n        }\n\n        if (validPeriodAfterCreate != null) {\n            config.setValidPeriodAfterCreate(Duration.ofSeconds(validPeriodAfterCreate.intValue()));\n        }\n\n        if (validPeriodAfterAccess != null) {\n            config.setValidPeriodAfterAccess(Duration.ofSeconds(validPeriodAfterAccess.intValue()));\n        }\n\n        final CreateFilterResult<?> createResult;\n        if (overwrite != null && overwrite.isBoolean() && overwrite.asBoolean()) {\n            createResult = bloomFilterManager.createFilter(name, config, true);\n        } else {\n            createResult = bloomFilterManager.createFilter(name, config);\n        }\n        return HttpResponse.of(\n                createResult.isCreated() ? HttpStatus.CREATED : HttpStatus.OK,\n                MediaType.JSON_UTF_8,\n                MAPPER.valueToTree(createResult.getFilter()).toString());\n    }", "signature": "HttpResponse create(@Param String name,\n                               @RequestObject JsonNode req)", "full_signature": "@Put(\"/{name}\") public HttpResponse create(@Param String name,\n                               @RequestObject JsonNode req)", "class_method_signature": "BloomFilterHttpService.create(@Param String name,\n                               @RequestObject JsonNode req)", "testcase": false, "constructor": false, "invocations": ["get", "get", "get", "get", "get", "get", "get", "setExpectedInsertions", "intValue", "setFpp", "doubleValue", "setValidPeriodAfterCreate", "ofSeconds", "intValue", "setValidPeriodAfterAccess", "ofSeconds", "intValue", "isBoolean", "asBoolean", "createFilter", "createFilter", "of", "isCreated", "toString", "valueToTree", "getFilter"]}, "repository": {"repo_id": 217849614, "url": "https://github.com/leancloud/filter-service", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 14, "size": 2797, "license": "licensed"}}