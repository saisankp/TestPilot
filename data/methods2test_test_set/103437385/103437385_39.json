{"test_class": {"identifier": "ModuleDataModelOracleUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "kie-soup-project-datamodel/kie-soup-project-datamodel-commons/src/test/java/org/kie/soup/project/datamodel/commons/oracle/ModuleDataModelOracleUtilsTest.java"}, "test_case": {"identifier": "getFieldFullyQualifiedClassNameTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getFieldFullyQualifiedClassNameTest() {\n\n        ModuleDataModelOracle mockedDMO = mock(ModuleDataModelOracle.class);\n        Map<String, ModelField[]> moduleModelFields = new HashMap<>();\n\n        // non-existent field for unknown class\n        when(mockedDMO.getModuleModelFields()).thenReturn(moduleModelFields);\n        String fullyQualifiedClassName = this.getClass().getName();\n        String fieldName = \"nonExistentField\";\n\n        String fqnFieldClassName = getFieldFullyQualifiedClassName(mockedDMO, fullyQualifiedClassName, fieldName);\n        assertNull(\"Expected a null FQN field class name\", fqnFieldClassName);\n\n        // non-existent field for known class\n        moduleModelFields.put(fullyQualifiedClassName, new ModelField[]{\n                new ModelField(\"existentField\",\n                               String.class.getName(),\n                               FIELD_CLASS_TYPE.REGULAR_CLASS,\n                               FIELD_ORIGIN.DECLARED,\n                               FieldAccessorsAndMutators.ACCESSOR,\n                               null)// forgot what goes in here?\n        });\n        when(mockedDMO.getModuleModelFields()).thenReturn(moduleModelFields);\n\n        fqnFieldClassName = getFieldFullyQualifiedClassName(mockedDMO, fullyQualifiedClassName, fieldName);\n        assertNull(\"Expected a null FQN field class name\", fqnFieldClassName);\n\n        // existent field for known class\n        fieldName = \"testField\";\n        String fieldType = \"org.acme.test.field.type\";\n        moduleModelFields.put(fullyQualifiedClassName, new ModelField[]{\n                new ModelField(\"existentField\",\n                               String.class.getName(),\n                               FIELD_CLASS_TYPE.REGULAR_CLASS,\n                               FIELD_ORIGIN.DECLARED,\n                               FieldAccessorsAndMutators.ACCESSOR,\n                               null),// forgot what goes in here?\n                new ModelField(fieldName,\n                               fieldType,\n                               FIELD_CLASS_TYPE.REGULAR_CLASS,\n                               FIELD_ORIGIN.DECLARED,\n                               FieldAccessorsAndMutators.ACCESSOR,\n                               null) // forgot what goes in here?\n        });\n        when(mockedDMO.getModuleModelFields()).thenReturn(moduleModelFields);\n\n        fqnFieldClassName = getFieldFullyQualifiedClassName(mockedDMO, fullyQualifiedClassName, fieldName);\n        assertEquals(\"Expected a null FQN field class name\", fieldType, fqnFieldClassName);\n    }", "signature": "void getFieldFullyQualifiedClassNameTest()", "full_signature": "@Test public void getFieldFullyQualifiedClassNameTest()", "class_method_signature": "ModuleDataModelOracleUtilsTest.getFieldFullyQualifiedClassNameTest()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getModuleModelFields", "getName", "getClass", "getFieldFullyQualifiedClassName", "assertNull", "put", "getName", "thenReturn", "when", "getModuleModelFields", "getFieldFullyQualifiedClassName", "assertNull", "put", "getName", "thenReturn", "when", "getModuleModelFields", "getFieldFullyQualifiedClassName", "assertEquals"]}, "focal_class": {"identifier": "ModuleDataModelOracleUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getFactTypes", "parameters": "(final ModuleDataModelOracle dmo)", "modifiers": "public static", "return": "String[]", "signature": "String[] getFactTypes(final ModuleDataModelOracle dmo)", "full_signature": "public static String[] getFactTypes(final ModuleDataModelOracle dmo)", "class_method_signature": "ModuleDataModelOracleUtils.getFactTypes(final ModuleDataModelOracle dmo)", "testcase": false, "constructor": false}, {"identifier": "getSuperType", "parameters": "(final ModuleDataModelOracle dmo, final String factType)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getSuperType(final ModuleDataModelOracle dmo, final String factType)", "full_signature": "public static List<String> getSuperType(final ModuleDataModelOracle dmo, final String factType)", "class_method_signature": "ModuleDataModelOracleUtils.getSuperType(final ModuleDataModelOracle dmo, final String factType)", "testcase": false, "constructor": false}, {"identifier": "getTypeAnnotations", "parameters": "(final ModuleDataModelOracle dmo, final String factType)", "modifiers": "public static", "return": "Set<Annotation>", "signature": "Set<Annotation> getTypeAnnotations(final ModuleDataModelOracle dmo, final String factType)", "full_signature": "public static Set<Annotation> getTypeAnnotations(final ModuleDataModelOracle dmo, final String factType)", "class_method_signature": "ModuleDataModelOracleUtils.getTypeAnnotations(final ModuleDataModelOracle dmo, final String factType)", "testcase": false, "constructor": false}, {"identifier": "getTypeFieldsAnnotations", "parameters": "(final ModuleDataModelOracle dmo, final String factType)", "modifiers": "public static", "return": "Map<String, Set<Annotation>>", "signature": "Map<String, Set<Annotation>> getTypeFieldsAnnotations(final ModuleDataModelOracle dmo, final String factType)", "full_signature": "public static Map<String, Set<Annotation>> getTypeFieldsAnnotations(final ModuleDataModelOracle dmo, final String factType)", "class_method_signature": "ModuleDataModelOracleUtils.getTypeFieldsAnnotations(final ModuleDataModelOracle dmo, final String factType)", "testcase": false, "constructor": false}, {"identifier": "getFieldClassName", "parameters": "(final ModuleDataModelOracle dmo, final String factType, final String fieldName)", "modifiers": "public static", "return": "String", "signature": "String getFieldClassName(final ModuleDataModelOracle dmo, final String factType, final String fieldName)", "full_signature": "public static String getFieldClassName(final ModuleDataModelOracle dmo, final String factType, final String fieldName)", "class_method_signature": "ModuleDataModelOracleUtils.getFieldClassName(final ModuleDataModelOracle dmo, final String factType, final String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getField", "parameters": "(final ModuleDataModelOracle dmo, final String factType, final String fieldName)", "modifiers": "private static", "return": "ModelField", "signature": "ModelField getField(final ModuleDataModelOracle dmo, final String factType, final String fieldName)", "full_signature": "private static ModelField getField(final ModuleDataModelOracle dmo, final String factType, final String fieldName)", "class_method_signature": "ModuleDataModelOracleUtils.getField(final ModuleDataModelOracle dmo, final String factType, final String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getFactNameFromType", "parameters": "(final ModuleDataModelOracle dmo, final String factType)", "modifiers": "private static", "return": "String", "signature": "String getFactNameFromType(final ModuleDataModelOracle dmo, final String factType)", "full_signature": "private static String getFactNameFromType(final ModuleDataModelOracle dmo, final String factType)", "class_method_signature": "ModuleDataModelOracleUtils.getFactNameFromType(final ModuleDataModelOracle dmo, final String factType)", "testcase": false, "constructor": false}, {"identifier": "getParametricFieldType", "parameters": "(final ModuleDataModelOracle dmo, final String factType, final String fieldName)", "modifiers": "public static", "return": "String", "signature": "String getParametricFieldType(final ModuleDataModelOracle dmo, final String factType, final String fieldName)", "full_signature": "public static String getParametricFieldType(final ModuleDataModelOracle dmo, final String factType, final String fieldName)", "class_method_signature": "ModuleDataModelOracleUtils.getParametricFieldType(final ModuleDataModelOracle dmo, final String factType, final String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getTypeSource", "parameters": "(final ModuleDataModelOracle dmo, final String factType)", "modifiers": "public static", "return": "TypeSource", "signature": "TypeSource getTypeSource(final ModuleDataModelOracle dmo, final String factType)", "full_signature": "public static TypeSource getTypeSource(final ModuleDataModelOracle dmo, final String factType)", "class_method_signature": "ModuleDataModelOracleUtils.getTypeSource(final ModuleDataModelOracle dmo, final String factType)", "testcase": false, "constructor": false}, {"identifier": "getFieldFullyQualifiedClassName", "parameters": "(final ModuleDataModelOracle dmo, final String fullyQualifiedClassName, final String fieldName)", "modifiers": "public static", "return": "String", "signature": "String getFieldFullyQualifiedClassName(final ModuleDataModelOracle dmo, final String fullyQualifiedClassName, final String fieldName)", "full_signature": "public static String getFieldFullyQualifiedClassName(final ModuleDataModelOracle dmo, final String fullyQualifiedClassName, final String fieldName)", "class_method_signature": "ModuleDataModelOracleUtils.getFieldFullyQualifiedClassName(final ModuleDataModelOracle dmo, final String fullyQualifiedClassName, final String fieldName)", "testcase": false, "constructor": false}], "file": "kie-soup-project-datamodel/kie-soup-project-datamodel-commons/src/main/java/org/kie/soup/project/datamodel/commons/oracle/ModuleDataModelOracleUtils.java"}, "focal_method": {"identifier": "getFieldFullyQualifiedClassName", "parameters": "(final ModuleDataModelOracle dmo, final String fullyQualifiedClassName, final String fieldName)", "modifiers": "public static", "return": "String", "body": "public static String getFieldFullyQualifiedClassName(final ModuleDataModelOracle dmo, final String fullyQualifiedClassName, final String fieldName) {\n        final ModelField[] mfs = dmo.getModuleModelFields().get(fullyQualifiedClassName);\n        if (mfs == null) {\n            return null;\n        }\n        for (ModelField mf : mfs) {\n            if (mf.getName().equals(fieldName)) {\n                return mf.getClassName();\n            }\n        }\n        return null;\n    }", "signature": "String getFieldFullyQualifiedClassName(final ModuleDataModelOracle dmo, final String fullyQualifiedClassName, final String fieldName)", "full_signature": "public static String getFieldFullyQualifiedClassName(final ModuleDataModelOracle dmo, final String fullyQualifiedClassName, final String fieldName)", "class_method_signature": "ModuleDataModelOracleUtils.getFieldFullyQualifiedClassName(final ModuleDataModelOracle dmo, final String fullyQualifiedClassName, final String fieldName)", "testcase": false, "constructor": false, "invocations": ["get", "getModuleModelFields", "equals", "getName", "getClassName"]}, "repository": {"repo_id": 103437385, "url": "https://github.com/kiegroup/kie-soup", "stars": 11, "created": "9/13/2017 6:41:37 PM +00:00", "updates": "2020-01-21T13:07:53+00:00", "fork": "False", "license": "licensed"}}