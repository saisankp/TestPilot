{"test_class": {"identifier": "UserProjectionFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private UserService userServiceMock;", "modifier": "@Mock\n    private", "type": "UserService", "declarator": "userServiceMock", "var_name": "userServiceMock"}, {"original_string": "@Mock\n    private ProjectionFactory projectionFactoryMock;", "modifier": "@Mock\n    private", "type": "ProjectionFactory", "declarator": "projectionFactoryMock", "var_name": "projectionFactoryMock"}, {"original_string": "@Mock\n    private User userMock;", "modifier": "@Mock\n    private", "type": "User", "declarator": "userMock", "var_name": "userMock"}, {"original_string": "@Mock\n    private User otherUserMock;", "modifier": "@Mock\n    private", "type": "User", "declarator": "otherUserMock", "var_name": "otherUserMock"}, {"original_string": "@Mock\n    private UserData userDataMock;", "modifier": "@Mock\n    private", "type": "UserData", "declarator": "userDataMock", "var_name": "userDataMock"}, {"original_string": "@Mock\n    private UserData otherUserDataMock;", "modifier": "@Mock\n    private", "type": "UserData", "declarator": "otherUserDataMock", "var_name": "otherUserDataMock"}, {"original_string": "private UserProjectionFactory userProjectionFactory;", "modifier": "private", "type": "UserProjectionFactory", "declarator": "userProjectionFactory", "var_name": "userProjectionFactory"}], "file": "backend/project-board/src/test/java/de/adesso/projectboard/base/user/projection/UserProjectionFactoryTest.java"}, "test_case": {"identifier": "createProjectionReturnsExpectedProjection", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void createProjectionReturnsExpectedProjection() {\n        // given\n        var projection = Integer.class;\n        var expectedProjection = 12345;\n        var userProjectionSource = new UserProjectionSource(userMock, userDataMock, true);\n\n        given(projectionFactoryMock.createProjection(projection, userProjectionSource)).willReturn(expectedProjection);\n\n        given(userServiceMock.getUserData(userMock)).willReturn(userDataMock);\n        given(userServiceMock.userIsManager(userMock)).willReturn(true);\n\n        // when\n        var actualProjection = userProjectionFactory.createProjection(userMock, projection);\n\n        // then\n        assertThat(actualProjection).isEqualTo(expectedProjection);\n    }", "signature": "void createProjectionReturnsExpectedProjection()", "full_signature": "@Test public void createProjectionReturnsExpectedProjection()", "class_method_signature": "UserProjectionFactoryTest.createProjectionReturnsExpectedProjection()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "createProjection", "willReturn", "given", "getUserData", "willReturn", "given", "userIsManager", "createProjection", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "UserProjectionFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final UserService userService;", "modifier": "private final", "type": "UserService", "declarator": "userService", "var_name": "userService"}, {"original_string": "private final ProjectionFactory projectionFactory;", "modifier": "private final", "type": "ProjectionFactory", "declarator": "projectionFactory", "var_name": "projectionFactory"}], "methods": [{"identifier": "UserProjectionFactory", "parameters": "(UserService userService, ProjectionFactory projectionFactory)", "modifiers": "@Autowired public", "return": "", "signature": " UserProjectionFactory(UserService userService, ProjectionFactory projectionFactory)", "full_signature": "@Autowired public  UserProjectionFactory(UserService userService, ProjectionFactory projectionFactory)", "class_method_signature": "UserProjectionFactory.UserProjectionFactory(UserService userService, ProjectionFactory projectionFactory)", "testcase": false, "constructor": true}, {"identifier": "createProjections", "parameters": "(@NonNull Collection<UserData> userData, @NonNull Class<T> projectionType)", "modifiers": "public", "return": "List<T>", "signature": "List<T> createProjections(@NonNull Collection<UserData> userData, @NonNull Class<T> projectionType)", "full_signature": "public List<T> createProjections(@NonNull Collection<UserData> userData, @NonNull Class<T> projectionType)", "class_method_signature": "UserProjectionFactory.createProjections(@NonNull Collection<UserData> userData, @NonNull Class<T> projectionType)", "testcase": false, "constructor": false}, {"identifier": "createProjection", "parameters": "(@NonNull User user, @NonNull Class<T> projectionType)", "modifiers": "public", "return": "T", "signature": "T createProjection(@NonNull User user, @NonNull Class<T> projectionType)", "full_signature": "public T createProjection(@NonNull User user, @NonNull Class<T> projectionType)", "class_method_signature": "UserProjectionFactory.createProjection(@NonNull User user, @NonNull Class<T> projectionType)", "testcase": false, "constructor": false}], "file": "backend/project-board/src/main/java/de/adesso/projectboard/base/user/projection/UserProjectionFactory.java"}, "focal_method": {"identifier": "createProjection", "parameters": "(@NonNull User user, @NonNull Class<T> projectionType)", "modifiers": "public", "return": "T", "body": "public <T> T createProjection(@NonNull User user, @NonNull Class<T> projectionType) {\n        var data = userService.getUserData(user);\n        var manager = userService.userIsManager(user);\n\n        return projectionFactory.createProjection(projectionType, new UserProjectionSource(user, data, manager));\n    }", "signature": "T createProjection(@NonNull User user, @NonNull Class<T> projectionType)", "full_signature": "public T createProjection(@NonNull User user, @NonNull Class<T> projectionType)", "class_method_signature": "UserProjectionFactory.createProjection(@NonNull User user, @NonNull Class<T> projectionType)", "testcase": false, "constructor": false, "invocations": ["getUserData", "userIsManager", "createProjection"]}, "repository": {"repo_id": 144251992, "url": "https://github.com/adessoAG/project-board", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 2608, "license": "licensed"}}