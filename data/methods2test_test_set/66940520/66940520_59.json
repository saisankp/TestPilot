{"test_class": {"identifier": "ObjectBundleTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ObjectBundle objectBundle;", "modifier": "private", "type": "ObjectBundle", "declarator": "objectBundle", "var_name": "objectBundle"}, {"original_string": "private ObjectBundleParams objectBundleParams;", "modifier": "private", "type": "ObjectBundleParams", "declarator": "objectBundleParams", "var_name": "objectBundleParams"}, {"original_string": "private Preheat preheat;", "modifier": "private", "type": "Preheat", "declarator": "preheat", "var_name": "preheat"}, {"original_string": "private Attribute attribute1 = new Attribute();", "modifier": "private", "type": "Attribute", "declarator": "attribute1 = new Attribute()", "var_name": "attribute1"}, {"original_string": "private Attribute attribute2 = new Attribute();", "modifier": "private", "type": "Attribute", "declarator": "attribute2 = new Attribute()", "var_name": "attribute2"}, {"original_string": "private Attribute attribute3 = new Attribute();", "modifier": "private", "type": "Attribute", "declarator": "attribute3 = new Attribute()", "var_name": "attribute3"}, {"original_string": "private Category category1 = new Category();", "modifier": "private", "type": "Category", "declarator": "category1 = new Category()", "var_name": "category1"}, {"original_string": "private Category category2 = new Category();", "modifier": "private", "type": "Category", "declarator": "category2 = new Category()", "var_name": "category2"}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/metadata/objectbundle/ObjectBundleTest.java"}, "test_case": {"identifier": "objectIndex", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void objectIndex()\n    {\n        Assert.assertEquals( (Integer) 2, objectBundle.mergeObjectIndex( attribute3 ) );\n        Assert.assertEquals( (Integer) 0, objectBundle.mergeObjectIndex( attribute1 ) );\n        Assert.assertEquals( (Integer) 1, objectBundle.mergeObjectIndex( attribute2 ) );\n        Assert.assertEquals( (Integer) 1, objectBundle.mergeObjectIndex( category2 ) );\n        Assert.assertEquals( (Integer) 0, objectBundle.mergeObjectIndex( category1 ) );\n    }", "signature": "void objectIndex()", "full_signature": "@Test public void objectIndex()", "class_method_signature": "ObjectBundleTest.objectIndex()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "mergeObjectIndex", "assertEquals", "mergeObjectIndex", "assertEquals", "mergeObjectIndex", "assertEquals", "mergeObjectIndex", "assertEquals", "mergeObjectIndex"]}, "focal_class": {"identifier": "ObjectBundle", "superclass": "", "interfaces": "implements ObjectIndexProvider", "fields": [{"original_string": "private final User user;", "modifier": "private final", "type": "User", "declarator": "user", "var_name": "user"}, {"original_string": "private final UserOverrideMode userOverrideMode;", "modifier": "private final", "type": "UserOverrideMode", "declarator": "userOverrideMode", "var_name": "userOverrideMode"}, {"original_string": "private User overrideUser;", "modifier": "private", "type": "User", "declarator": "overrideUser", "var_name": "overrideUser"}, {"original_string": "private final ObjectBundleMode objectBundleMode;", "modifier": "private final", "type": "ObjectBundleMode", "declarator": "objectBundleMode", "var_name": "objectBundleMode"}, {"original_string": "private final PreheatIdentifier preheatIdentifier;", "modifier": "private final", "type": "PreheatIdentifier", "declarator": "preheatIdentifier", "var_name": "preheatIdentifier"}, {"original_string": "private final PreheatMode preheatMode;", "modifier": "private final", "type": "PreheatMode", "declarator": "preheatMode", "var_name": "preheatMode"}, {"original_string": "private final ImportStrategy importMode;", "modifier": "private final", "type": "ImportStrategy", "declarator": "importMode", "var_name": "importMode"}, {"original_string": "private final AtomicMode atomicMode;", "modifier": "private final", "type": "AtomicMode", "declarator": "atomicMode", "var_name": "atomicMode"}, {"original_string": "private final MergeMode mergeMode;", "modifier": "private final", "type": "MergeMode", "declarator": "mergeMode", "var_name": "mergeMode"}, {"original_string": "private final FlushMode flushMode;", "modifier": "private final", "type": "FlushMode", "declarator": "flushMode", "var_name": "flushMode"}, {"original_string": "private final Preheat preheat;", "modifier": "private final", "type": "Preheat", "declarator": "preheat", "var_name": "preheat"}, {"original_string": "private final boolean skipSharing;", "modifier": "private final", "type": "boolean", "declarator": "skipSharing", "var_name": "skipSharing"}, {"original_string": "private final boolean skipTranslation;", "modifier": "private final", "type": "boolean", "declarator": "skipTranslation", "var_name": "skipTranslation"}, {"original_string": "private final boolean skipValidation;", "modifier": "private final", "type": "boolean", "declarator": "skipValidation", "var_name": "skipValidation"}, {"original_string": "private final boolean metadataSyncImport;", "modifier": "private final", "type": "boolean", "declarator": "metadataSyncImport", "var_name": "metadataSyncImport"}, {"original_string": "private JobConfiguration jobId;", "modifier": "private", "type": "JobConfiguration", "declarator": "jobId", "var_name": "jobId"}, {"original_string": "private ObjectBundleStatus objectBundleStatus = ObjectBundleStatus.CREATED;", "modifier": "private", "type": "ObjectBundleStatus", "declarator": "objectBundleStatus = ObjectBundleStatus.CREATED", "var_name": "objectBundleStatus"}, {"original_string": "private Map<Boolean, Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>>> objects = new HashMap<>();", "modifier": "private", "type": "Map<Boolean, Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>>>", "declarator": "objects = new HashMap<>()", "var_name": "objects"}, {"original_string": "private final TypedIndexedObjectContainer typedIndexedObjectContainer = new TypedIndexedObjectContainer();", "modifier": "private final", "type": "TypedIndexedObjectContainer", "declarator": "typedIndexedObjectContainer = new TypedIndexedObjectContainer()", "var_name": "typedIndexedObjectContainer"}, {"original_string": "private Map<Class<?>, Map<String, Map<String, Object>>> objectReferences = new HashMap<>();", "modifier": "private", "type": "Map<Class<?>, Map<String, Map<String, Object>>>", "declarator": "objectReferences = new HashMap<>()", "var_name": "objectReferences"}, {"original_string": "private Map<Class<?>, Map<String, Map<String, Object>>> extras = new HashMap<>();", "modifier": "private", "type": "Map<Class<?>, Map<String, Map<String, Object>>>", "declarator": "extras = new HashMap<>()", "var_name": "extras"}], "methods": [{"identifier": "ObjectBundle", "parameters": "( ObjectBundleParams params, Preheat preheat, Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> objectMap )", "modifiers": "public", "return": "", "signature": " ObjectBundle( ObjectBundleParams params, Preheat preheat, Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> objectMap )", "full_signature": "public  ObjectBundle( ObjectBundleParams params, Preheat preheat, Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> objectMap )", "class_method_signature": "ObjectBundle.ObjectBundle( ObjectBundleParams params, Preheat preheat, Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> objectMap )", "testcase": false, "constructor": true}, {"identifier": "getUser", "parameters": "()", "modifiers": "public", "return": "User", "signature": "User getUser()", "full_signature": "public User getUser()", "class_method_signature": "ObjectBundle.getUser()", "testcase": false, "constructor": false}, {"identifier": "getUserOverrideMode", "parameters": "()", "modifiers": "public", "return": "UserOverrideMode", "signature": "UserOverrideMode getUserOverrideMode()", "full_signature": "public UserOverrideMode getUserOverrideMode()", "class_method_signature": "ObjectBundle.getUserOverrideMode()", "testcase": false, "constructor": false}, {"identifier": "getOverrideUser", "parameters": "()", "modifiers": "public", "return": "User", "signature": "User getOverrideUser()", "full_signature": "public User getOverrideUser()", "class_method_signature": "ObjectBundle.getOverrideUser()", "testcase": false, "constructor": false}, {"identifier": "setOverrideUser", "parameters": "( User overrideUser )", "modifiers": "public", "return": "void", "signature": "void setOverrideUser( User overrideUser )", "full_signature": "public void setOverrideUser( User overrideUser )", "class_method_signature": "ObjectBundle.setOverrideUser( User overrideUser )", "testcase": false, "constructor": false}, {"identifier": "getUsername", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUsername()", "full_signature": "public String getUsername()", "class_method_signature": "ObjectBundle.getUsername()", "testcase": false, "constructor": false}, {"identifier": "getObjectBundleMode", "parameters": "()", "modifiers": "public", "return": "ObjectBundleMode", "signature": "ObjectBundleMode getObjectBundleMode()", "full_signature": "public ObjectBundleMode getObjectBundleMode()", "class_method_signature": "ObjectBundle.getObjectBundleMode()", "testcase": false, "constructor": false}, {"identifier": "getPreheatIdentifier", "parameters": "()", "modifiers": "public", "return": "PreheatIdentifier", "signature": "PreheatIdentifier getPreheatIdentifier()", "full_signature": "public PreheatIdentifier getPreheatIdentifier()", "class_method_signature": "ObjectBundle.getPreheatIdentifier()", "testcase": false, "constructor": false}, {"identifier": "getPreheatMode", "parameters": "()", "modifiers": "public", "return": "PreheatMode", "signature": "PreheatMode getPreheatMode()", "full_signature": "public PreheatMode getPreheatMode()", "class_method_signature": "ObjectBundle.getPreheatMode()", "testcase": false, "constructor": false}, {"identifier": "getImportMode", "parameters": "()", "modifiers": "public", "return": "ImportStrategy", "signature": "ImportStrategy getImportMode()", "full_signature": "public ImportStrategy getImportMode()", "class_method_signature": "ObjectBundle.getImportMode()", "testcase": false, "constructor": false}, {"identifier": "getAtomicMode", "parameters": "()", "modifiers": "public", "return": "AtomicMode", "signature": "AtomicMode getAtomicMode()", "full_signature": "public AtomicMode getAtomicMode()", "class_method_signature": "ObjectBundle.getAtomicMode()", "testcase": false, "constructor": false}, {"identifier": "getMergeMode", "parameters": "()", "modifiers": "public", "return": "MergeMode", "signature": "MergeMode getMergeMode()", "full_signature": "public MergeMode getMergeMode()", "class_method_signature": "ObjectBundle.getMergeMode()", "testcase": false, "constructor": false}, {"identifier": "getFlushMode", "parameters": "()", "modifiers": "public", "return": "FlushMode", "signature": "FlushMode getFlushMode()", "full_signature": "public FlushMode getFlushMode()", "class_method_signature": "ObjectBundle.getFlushMode()", "testcase": false, "constructor": false}, {"identifier": "isSkipSharing", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSkipSharing()", "full_signature": "public boolean isSkipSharing()", "class_method_signature": "ObjectBundle.isSkipSharing()", "testcase": false, "constructor": false}, {"identifier": "isSkipTranslation", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSkipTranslation()", "full_signature": "public boolean isSkipTranslation()", "class_method_signature": "ObjectBundle.isSkipTranslation()", "testcase": false, "constructor": false}, {"identifier": "isSkipValidation", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSkipValidation()", "full_signature": "public boolean isSkipValidation()", "class_method_signature": "ObjectBundle.isSkipValidation()", "testcase": false, "constructor": false}, {"identifier": "isMetadataSyncImport", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isMetadataSyncImport()", "full_signature": "public boolean isMetadataSyncImport()", "class_method_signature": "ObjectBundle.isMetadataSyncImport()", "testcase": false, "constructor": false}, {"identifier": "getJobId", "parameters": "()", "modifiers": "public", "return": "JobConfiguration", "signature": "JobConfiguration getJobId()", "full_signature": "public JobConfiguration getJobId()", "class_method_signature": "ObjectBundle.getJobId()", "testcase": false, "constructor": false}, {"identifier": "hasJobId", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasJobId()", "full_signature": "public boolean hasJobId()", "class_method_signature": "ObjectBundle.hasJobId()", "testcase": false, "constructor": false}, {"identifier": "getObjectBundleStatus", "parameters": "()", "modifiers": "public", "return": "ObjectBundleStatus", "signature": "ObjectBundleStatus getObjectBundleStatus()", "full_signature": "public ObjectBundleStatus getObjectBundleStatus()", "class_method_signature": "ObjectBundle.getObjectBundleStatus()", "testcase": false, "constructor": false}, {"identifier": "setObjectBundleStatus", "parameters": "( ObjectBundleStatus objectBundleStatus )", "modifiers": "public", "return": "void", "signature": "void setObjectBundleStatus( ObjectBundleStatus objectBundleStatus )", "full_signature": "public void setObjectBundleStatus( ObjectBundleStatus objectBundleStatus )", "class_method_signature": "ObjectBundle.setObjectBundleStatus( ObjectBundleStatus objectBundleStatus )", "testcase": false, "constructor": false}, {"identifier": "getPreheat", "parameters": "()", "modifiers": "public", "return": "Preheat", "signature": "Preheat getPreheat()", "full_signature": "public Preheat getPreheat()", "class_method_signature": "ObjectBundle.getPreheat()", "testcase": false, "constructor": false}, {"identifier": "mergeObjectIndex", "parameters": "( @Nonnull IdentifiableObject object )", "modifiers": "@Nonnull @Override public", "return": "Integer", "signature": "Integer mergeObjectIndex( @Nonnull IdentifiableObject object )", "full_signature": "@Nonnull @Override public Integer mergeObjectIndex( @Nonnull IdentifiableObject object )", "class_method_signature": "ObjectBundle.mergeObjectIndex( @Nonnull IdentifiableObject object )", "testcase": false, "constructor": false}, {"identifier": "containsObject", "parameters": "( @Nullable IdentifiableObject object )", "modifiers": "public", "return": "boolean", "signature": "boolean containsObject( @Nullable IdentifiableObject object )", "full_signature": "public boolean containsObject( @Nullable IdentifiableObject object )", "class_method_signature": "ObjectBundle.containsObject( @Nullable IdentifiableObject object )", "testcase": false, "constructor": false}, {"identifier": "addObject", "parameters": "( IdentifiableObject object )", "modifiers": "private", "return": "void", "signature": "void addObject( IdentifiableObject object )", "full_signature": "private void addObject( IdentifiableObject object )", "class_method_signature": "ObjectBundle.addObject( IdentifiableObject object )", "testcase": false, "constructor": false}, {"identifier": "addObject", "parameters": "( List<IdentifiableObject> objects )", "modifiers": "private", "return": "void", "signature": "void addObject( List<IdentifiableObject> objects )", "full_signature": "private void addObject( List<IdentifiableObject> objects )", "class_method_signature": "ObjectBundle.addObject( List<IdentifiableObject> objects )", "testcase": false, "constructor": false}, {"identifier": "addObject", "parameters": "( Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> objects )", "modifiers": "private", "return": "void", "signature": "void addObject( Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> objects )", "full_signature": "private void addObject( Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> objects )", "class_method_signature": "ObjectBundle.addObject( Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> objects )", "testcase": false, "constructor": false}, {"identifier": "getObjectMap", "parameters": "()", "modifiers": "public", "return": "Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>>", "signature": "Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> getObjectMap()", "full_signature": "public Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> getObjectMap()", "class_method_signature": "ObjectBundle.getObjectMap()", "testcase": false, "constructor": false}, {"identifier": "getObjects", "parameters": "( boolean persisted )", "modifiers": "public", "return": "Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>>", "signature": "Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> getObjects( boolean persisted )", "full_signature": "public Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> getObjects( boolean persisted )", "class_method_signature": "ObjectBundle.getObjects( boolean persisted )", "testcase": false, "constructor": false}, {"identifier": "getObjects", "parameters": "( Class<? extends IdentifiableObject> klass, boolean persisted )", "modifiers": "public", "return": "List<IdentifiableObject>", "signature": "List<IdentifiableObject> getObjects( Class<? extends IdentifiableObject> klass, boolean persisted )", "full_signature": "public List<IdentifiableObject> getObjects( Class<? extends IdentifiableObject> klass, boolean persisted )", "class_method_signature": "ObjectBundle.getObjects( Class<? extends IdentifiableObject> klass, boolean persisted )", "testcase": false, "constructor": false}, {"identifier": "getObjectReferences", "parameters": "( Class<?> klass )", "modifiers": "public", "return": "Map<String, Map<String, Object>>", "signature": "Map<String, Map<String, Object>> getObjectReferences( Class<?> klass )", "full_signature": "public Map<String, Map<String, Object>> getObjectReferences( Class<?> klass )", "class_method_signature": "ObjectBundle.getObjectReferences( Class<?> klass )", "testcase": false, "constructor": false}, {"identifier": "getObjectReferences", "parameters": "()", "modifiers": "public", "return": "Map<Class<?>, Map<String, Map<String, Object>>>", "signature": "Map<Class<?>, Map<String, Map<String, Object>>> getObjectReferences()", "full_signature": "public Map<Class<?>, Map<String, Map<String, Object>>> getObjectReferences()", "class_method_signature": "ObjectBundle.getObjectReferences()", "testcase": false, "constructor": false}, {"identifier": "setObjectReferences", "parameters": "( Map<Class<?>, Map<String, Map<String, Object>>> objectReferences )", "modifiers": "public", "return": "void", "signature": "void setObjectReferences( Map<Class<?>, Map<String, Map<String, Object>>> objectReferences )", "full_signature": "public void setObjectReferences( Map<Class<?>, Map<String, Map<String, Object>>> objectReferences )", "class_method_signature": "ObjectBundle.setObjectReferences( Map<Class<?>, Map<String, Map<String, Object>>> objectReferences )", "testcase": false, "constructor": false}, {"identifier": "putExtras", "parameters": "( IdentifiableObject identifiableObject, String key, Object object )", "modifiers": "public", "return": "void", "signature": "void putExtras( IdentifiableObject identifiableObject, String key, Object object )", "full_signature": "public void putExtras( IdentifiableObject identifiableObject, String key, Object object )", "class_method_signature": "ObjectBundle.putExtras( IdentifiableObject identifiableObject, String key, Object object )", "testcase": false, "constructor": false}, {"identifier": "getExtras", "parameters": "( IdentifiableObject identifiableObject, String key )", "modifiers": "public", "return": "Object", "signature": "Object getExtras( IdentifiableObject identifiableObject, String key )", "full_signature": "public Object getExtras( IdentifiableObject identifiableObject, String key )", "class_method_signature": "ObjectBundle.getExtras( IdentifiableObject identifiableObject, String key )", "testcase": false, "constructor": false}, {"identifier": "hasExtras", "parameters": "( IdentifiableObject identifiableObject, String key )", "modifiers": "public", "return": "boolean", "signature": "boolean hasExtras( IdentifiableObject identifiableObject, String key )", "full_signature": "public boolean hasExtras( IdentifiableObject identifiableObject, String key )", "class_method_signature": "ObjectBundle.hasExtras( IdentifiableObject identifiableObject, String key )", "testcase": false, "constructor": false}, {"identifier": "removeExtras", "parameters": "( IdentifiableObject identifiableObject, String key )", "modifiers": "public", "return": "void", "signature": "void removeExtras( IdentifiableObject identifiableObject, String key )", "full_signature": "public void removeExtras( IdentifiableObject identifiableObject, String key )", "class_method_signature": "ObjectBundle.removeExtras( IdentifiableObject identifiableObject, String key )", "testcase": false, "constructor": false}, {"identifier": "isPersisted", "parameters": "( IdentifiableObject object )", "modifiers": "public", "return": "boolean", "signature": "boolean isPersisted( IdentifiableObject object )", "full_signature": "public boolean isPersisted( IdentifiableObject object )", "class_method_signature": "ObjectBundle.isPersisted( IdentifiableObject object )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/metadata/objectbundle/ObjectBundle.java"}, "focal_method": {"identifier": "mergeObjectIndex", "parameters": "( @Nonnull IdentifiableObject object )", "modifiers": "@Nonnull @Override public", "return": "Integer", "body": "@Nonnull\n    @Override\n    public Integer mergeObjectIndex( @Nonnull IdentifiableObject object )\n    {\n        return typedIndexedObjectContainer.mergeObjectIndex( object );\n    }", "signature": "Integer mergeObjectIndex( @Nonnull IdentifiableObject object )", "full_signature": "@Nonnull @Override public Integer mergeObjectIndex( @Nonnull IdentifiableObject object )", "class_method_signature": "ObjectBundle.mergeObjectIndex( @Nonnull IdentifiableObject object )", "testcase": false, "constructor": false, "invocations": ["mergeObjectIndex"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}