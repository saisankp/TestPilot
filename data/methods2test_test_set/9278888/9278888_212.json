{"test_class": {"identifier": "TracingConsumerTest", "superclass": "extends KafkaTest", "interfaces": "", "fields": [{"original_string": "MockConsumer<String, String> consumer = new MockConsumer<>(OffsetResetStrategy.EARLIEST);", "modifier": "", "type": "MockConsumer<String, String>", "declarator": "consumer = new MockConsumer<>(OffsetResetStrategy.EARLIEST)", "var_name": "consumer"}, {"original_string": "TopicPartition topicPartition = new TopicPartition(TEST_TOPIC, 0);", "modifier": "", "type": "TopicPartition", "declarator": "topicPartition = new TopicPartition(TEST_TOPIC, 0)", "var_name": "topicPartition"}], "file": "instrumentation/kafka-clients/src/test/java/brave/kafka/clients/TracingConsumerTest.java"}, "test_case": {"identifier": "should_createChildOfTraceHeaders", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void should_createChildOfTraceHeaders() {\n    addB3MultiHeaders(parent, consumerRecord);\n    consumer.addRecord(consumerRecord);\n\n    Consumer<String, String> tracingConsumer = kafkaTracing.consumer(consumer);\n    ConsumerRecords<String, String> poll = tracingConsumer.poll(10);\n\n    assertThat(poll)\n      .extracting(ConsumerRecord::headers)\n      .flatExtracting(TracingConsumerTest::lastHeaders)\n      .hasSize(1)\n      .allSatisfy(e -> {\n        assertThat(e.getKey()).isEqualTo(\"b3\");\n        assertThat(e.getValue()).startsWith(parent.traceIdString());\n      });\n\n    assertChildOf(spans.get(0), parent);\n  }", "signature": "void should_createChildOfTraceHeaders()", "full_signature": "@Test public void should_createChildOfTraceHeaders()", "class_method_signature": "TracingConsumerTest.should_createChildOfTraceHeaders()", "testcase": true, "constructor": false, "invocations": ["addB3MultiHeaders", "addRecord", "consumer", "poll", "allSatisfy", "hasSize", "flatExtracting", "extracting", "assertThat", "isEqualTo", "assertThat", "getKey", "startsWith", "assertThat", "getValue", "traceIdString", "assertChildOf", "get"]}, "focal_class": {"identifier": "TracingConsumer", "superclass": "", "interfaces": "implements Consumer<K, V>", "fields": [{"original_string": "final Consumer<K, V> delegate;", "modifier": "final", "type": "Consumer<K, V>", "declarator": "delegate", "var_name": "delegate"}, {"original_string": "final KafkaTracing kafkaTracing;", "modifier": "final", "type": "KafkaTracing", "declarator": "kafkaTracing", "var_name": "kafkaTracing"}, {"original_string": "final Tracing tracing;", "modifier": "final", "type": "Tracing", "declarator": "tracing", "var_name": "tracing"}, {"original_string": "final Extractor<KafkaConsumerRequest> extractor;", "modifier": "final", "type": "Extractor<KafkaConsumerRequest>", "declarator": "extractor", "var_name": "extractor"}, {"original_string": "final SamplerFunction<MessagingRequest> sampler;", "modifier": "final", "type": "SamplerFunction<MessagingRequest>", "declarator": "sampler", "var_name": "sampler"}, {"original_string": "final Injector<KafkaConsumerRequest> injector;", "modifier": "final", "type": "Injector<KafkaConsumerRequest>", "declarator": "injector", "var_name": "injector"}, {"original_string": "final String remoteServiceName;", "modifier": "final", "type": "String", "declarator": "remoteServiceName", "var_name": "remoteServiceName"}, {"original_string": "final boolean singleRootSpanOnReceiveBatch;", "modifier": "final", "type": "boolean", "declarator": "singleRootSpanOnReceiveBatch", "var_name": "singleRootSpanOnReceiveBatch"}, {"original_string": "final TraceContextOrSamplingFlags emptyExtraction;", "modifier": "final", "type": "TraceContextOrSamplingFlags", "declarator": "emptyExtraction", "var_name": "emptyExtraction"}, {"original_string": "static final ConsumerRebalanceListener NO_OP_CONSUMER_REBALANCE_LISTENER =\n    new ConsumerRebalanceListener() {\n      @Override public void onPartitionsRevoked(Collection<TopicPartition> partitions) {\n      }\n\n      @Override public void onPartitionsAssigned(Collection<TopicPartition> partitions) {\n      }\n    };", "modifier": "static final", "type": "ConsumerRebalanceListener", "declarator": "NO_OP_CONSUMER_REBALANCE_LISTENER =\n    new ConsumerRebalanceListener() {\n      @Override public void onPartitionsRevoked(Collection<TopicPartition> partitions) {\n      }\n\n      @Override public void onPartitionsAssigned(Collection<TopicPartition> partitions) {\n      }\n    }", "var_name": "NO_OP_CONSUMER_REBALANCE_LISTENER"}], "methods": [{"identifier": "TracingConsumer", "parameters": "(Consumer<K, V> delegate, KafkaTracing kafkaTracing)", "modifiers": "", "return": "", "signature": " TracingConsumer(Consumer<K, V> delegate, KafkaTracing kafkaTracing)", "full_signature": "  TracingConsumer(Consumer<K, V> delegate, KafkaTracing kafkaTracing)", "class_method_signature": "TracingConsumer.TracingConsumer(Consumer<K, V> delegate, KafkaTracing kafkaTracing)", "testcase": false, "constructor": true}, {"identifier": "poll", "parameters": "(Duration timeout)", "modifiers": "public", "return": "ConsumerRecords<K, V>", "signature": "ConsumerRecords<K, V> poll(Duration timeout)", "full_signature": "public ConsumerRecords<K, V> poll(Duration timeout)", "class_method_signature": "TracingConsumer.poll(Duration timeout)", "testcase": false, "constructor": false}, {"identifier": "poll", "parameters": "(long timeout)", "modifiers": "public", "return": "ConsumerRecords<K, V>", "signature": "ConsumerRecords<K, V> poll(long timeout)", "full_signature": "public ConsumerRecords<K, V> poll(long timeout)", "class_method_signature": "TracingConsumer.poll(long timeout)", "testcase": false, "constructor": false}, {"identifier": "assignment", "parameters": "()", "modifiers": "@Override public", "return": "Set<TopicPartition>", "signature": "Set<TopicPartition> assignment()", "full_signature": "@Override public Set<TopicPartition> assignment()", "class_method_signature": "TracingConsumer.assignment()", "testcase": false, "constructor": false}, {"identifier": "subscription", "parameters": "()", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> subscription()", "full_signature": "@Override public Set<String> subscription()", "class_method_signature": "TracingConsumer.subscription()", "testcase": false, "constructor": false}, {"identifier": "subscribe", "parameters": "(Collection<String> topics)", "modifiers": "@Override public", "return": "void", "signature": "void subscribe(Collection<String> topics)", "full_signature": "@Override public void subscribe(Collection<String> topics)", "class_method_signature": "TracingConsumer.subscribe(Collection<String> topics)", "testcase": false, "constructor": false}, {"identifier": "subscribe", "parameters": "(Collection<String> topics, ConsumerRebalanceListener callback)", "modifiers": "@Override public", "return": "void", "signature": "void subscribe(Collection<String> topics, ConsumerRebalanceListener callback)", "full_signature": "@Override public void subscribe(Collection<String> topics, ConsumerRebalanceListener callback)", "class_method_signature": "TracingConsumer.subscribe(Collection<String> topics, ConsumerRebalanceListener callback)", "testcase": false, "constructor": false}, {"identifier": "assign", "parameters": "(Collection<TopicPartition> partitions)", "modifiers": "@Override public", "return": "void", "signature": "void assign(Collection<TopicPartition> partitions)", "full_signature": "@Override public void assign(Collection<TopicPartition> partitions)", "class_method_signature": "TracingConsumer.assign(Collection<TopicPartition> partitions)", "testcase": false, "constructor": false}, {"identifier": "subscribe", "parameters": "(Pattern pattern, ConsumerRebalanceListener callback)", "modifiers": "@Override public", "return": "void", "signature": "void subscribe(Pattern pattern, ConsumerRebalanceListener callback)", "full_signature": "@Override public void subscribe(Pattern pattern, ConsumerRebalanceListener callback)", "class_method_signature": "TracingConsumer.subscribe(Pattern pattern, ConsumerRebalanceListener callback)", "testcase": false, "constructor": false}, {"identifier": "subscribe", "parameters": "(Pattern pattern)", "modifiers": "public", "return": "void", "signature": "void subscribe(Pattern pattern)", "full_signature": "public void subscribe(Pattern pattern)", "class_method_signature": "TracingConsumer.subscribe(Pattern pattern)", "testcase": false, "constructor": false}, {"identifier": "unsubscribe", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void unsubscribe()", "full_signature": "@Override public void unsubscribe()", "class_method_signature": "TracingConsumer.unsubscribe()", "testcase": false, "constructor": false}, {"identifier": "commitSync", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void commitSync()", "full_signature": "@Override public void commitSync()", "class_method_signature": "TracingConsumer.commitSync()", "testcase": false, "constructor": false}, {"identifier": "commitSync", "parameters": "(Duration timeout)", "modifiers": "public", "return": "void", "signature": "void commitSync(Duration timeout)", "full_signature": "public void commitSync(Duration timeout)", "class_method_signature": "TracingConsumer.commitSync(Duration timeout)", "testcase": false, "constructor": false}, {"identifier": "commitSync", "parameters": "(Map<TopicPartition, OffsetAndMetadata> offsets)", "modifiers": "@Override public", "return": "void", "signature": "void commitSync(Map<TopicPartition, OffsetAndMetadata> offsets)", "full_signature": "@Override public void commitSync(Map<TopicPartition, OffsetAndMetadata> offsets)", "class_method_signature": "TracingConsumer.commitSync(Map<TopicPartition, OffsetAndMetadata> offsets)", "testcase": false, "constructor": false}, {"identifier": "commitSync", "parameters": "(Map<TopicPartition, OffsetAndMetadata> offsets, Duration timeout)", "modifiers": "public", "return": "void", "signature": "void commitSync(Map<TopicPartition, OffsetAndMetadata> offsets, Duration timeout)", "full_signature": "public void commitSync(Map<TopicPartition, OffsetAndMetadata> offsets, Duration timeout)", "class_method_signature": "TracingConsumer.commitSync(Map<TopicPartition, OffsetAndMetadata> offsets, Duration timeout)", "testcase": false, "constructor": false}, {"identifier": "commitAsync", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void commitAsync()", "full_signature": "@Override public void commitAsync()", "class_method_signature": "TracingConsumer.commitAsync()", "testcase": false, "constructor": false}, {"identifier": "commitAsync", "parameters": "(OffsetCommitCallback callback)", "modifiers": "@Override public", "return": "void", "signature": "void commitAsync(OffsetCommitCallback callback)", "full_signature": "@Override public void commitAsync(OffsetCommitCallback callback)", "class_method_signature": "TracingConsumer.commitAsync(OffsetCommitCallback callback)", "testcase": false, "constructor": false}, {"identifier": "commitAsync", "parameters": "(Map<TopicPartition, OffsetAndMetadata> offsets,\n    OffsetCommitCallback callback)", "modifiers": "@Override public", "return": "void", "signature": "void commitAsync(Map<TopicPartition, OffsetAndMetadata> offsets,\n    OffsetCommitCallback callback)", "full_signature": "@Override public void commitAsync(Map<TopicPartition, OffsetAndMetadata> offsets,\n    OffsetCommitCallback callback)", "class_method_signature": "TracingConsumer.commitAsync(Map<TopicPartition, OffsetAndMetadata> offsets,\n    OffsetCommitCallback callback)", "testcase": false, "constructor": false}, {"identifier": "seek", "parameters": "(TopicPartition partition, long offset)", "modifiers": "@Override public", "return": "void", "signature": "void seek(TopicPartition partition, long offset)", "full_signature": "@Override public void seek(TopicPartition partition, long offset)", "class_method_signature": "TracingConsumer.seek(TopicPartition partition, long offset)", "testcase": false, "constructor": false}, {"identifier": "seek", "parameters": "(TopicPartition topicPartition, OffsetAndMetadata offsetAndMetadata)", "modifiers": "public", "return": "void", "signature": "void seek(TopicPartition topicPartition, OffsetAndMetadata offsetAndMetadata)", "full_signature": "public void seek(TopicPartition topicPartition, OffsetAndMetadata offsetAndMetadata)", "class_method_signature": "TracingConsumer.seek(TopicPartition topicPartition, OffsetAndMetadata offsetAndMetadata)", "testcase": false, "constructor": false}, {"identifier": "seekToBeginning", "parameters": "(Collection<TopicPartition> partitions)", "modifiers": "@Override public", "return": "void", "signature": "void seekToBeginning(Collection<TopicPartition> partitions)", "full_signature": "@Override public void seekToBeginning(Collection<TopicPartition> partitions)", "class_method_signature": "TracingConsumer.seekToBeginning(Collection<TopicPartition> partitions)", "testcase": false, "constructor": false}, {"identifier": "seekToEnd", "parameters": "(Collection<TopicPartition> partitions)", "modifiers": "@Override public", "return": "void", "signature": "void seekToEnd(Collection<TopicPartition> partitions)", "full_signature": "@Override public void seekToEnd(Collection<TopicPartition> partitions)", "class_method_signature": "TracingConsumer.seekToEnd(Collection<TopicPartition> partitions)", "testcase": false, "constructor": false}, {"identifier": "position", "parameters": "(TopicPartition partition)", "modifiers": "@Override public", "return": "long", "signature": "long position(TopicPartition partition)", "full_signature": "@Override public long position(TopicPartition partition)", "class_method_signature": "TracingConsumer.position(TopicPartition partition)", "testcase": false, "constructor": false}, {"identifier": "position", "parameters": "(TopicPartition partition, Duration timeout)", "modifiers": "public", "return": "long", "signature": "long position(TopicPartition partition, Duration timeout)", "full_signature": "public long position(TopicPartition partition, Duration timeout)", "class_method_signature": "TracingConsumer.position(TopicPartition partition, Duration timeout)", "testcase": false, "constructor": false}, {"identifier": "committed", "parameters": "(TopicPartition partition)", "modifiers": "@Override public", "return": "OffsetAndMetadata", "signature": "OffsetAndMetadata committed(TopicPartition partition)", "full_signature": "@Override public OffsetAndMetadata committed(TopicPartition partition)", "class_method_signature": "TracingConsumer.committed(TopicPartition partition)", "testcase": false, "constructor": false}, {"identifier": "committed", "parameters": "(TopicPartition partition, Duration timeout)", "modifiers": "public", "return": "OffsetAndMetadata", "signature": "OffsetAndMetadata committed(TopicPartition partition, Duration timeout)", "full_signature": "public OffsetAndMetadata committed(TopicPartition partition, Duration timeout)", "class_method_signature": "TracingConsumer.committed(TopicPartition partition, Duration timeout)", "testcase": false, "constructor": false}, {"identifier": "committed", "parameters": "(Set<TopicPartition> partitions)", "modifiers": "public", "return": "Map<TopicPartition, OffsetAndMetadata>", "signature": "Map<TopicPartition, OffsetAndMetadata> committed(Set<TopicPartition> partitions)", "full_signature": "public Map<TopicPartition, OffsetAndMetadata> committed(Set<TopicPartition> partitions)", "class_method_signature": "TracingConsumer.committed(Set<TopicPartition> partitions)", "testcase": false, "constructor": false}, {"identifier": "committed", "parameters": "(\n    Set<TopicPartition> partitions, Duration timeout)", "modifiers": "public", "return": "Map<TopicPartition, OffsetAndMetadata>", "signature": "Map<TopicPartition, OffsetAndMetadata> committed(\n    Set<TopicPartition> partitions, Duration timeout)", "full_signature": "public Map<TopicPartition, OffsetAndMetadata> committed(\n    Set<TopicPartition> partitions, Duration timeout)", "class_method_signature": "TracingConsumer.committed(\n    Set<TopicPartition> partitions, Duration timeout)", "testcase": false, "constructor": false}, {"identifier": "metrics", "parameters": "()", "modifiers": "@Override public", "return": "Map<MetricName, ? extends Metric>", "signature": "Map<MetricName, ? extends Metric> metrics()", "full_signature": "@Override public Map<MetricName, ? extends Metric> metrics()", "class_method_signature": "TracingConsumer.metrics()", "testcase": false, "constructor": false}, {"identifier": "partitionsFor", "parameters": "(String topic)", "modifiers": "@Override public", "return": "List<PartitionInfo>", "signature": "List<PartitionInfo> partitionsFor(String topic)", "full_signature": "@Override public List<PartitionInfo> partitionsFor(String topic)", "class_method_signature": "TracingConsumer.partitionsFor(String topic)", "testcase": false, "constructor": false}, {"identifier": "partitionsFor", "parameters": "(String topic, Duration timeout)", "modifiers": "public", "return": "List<PartitionInfo>", "signature": "List<PartitionInfo> partitionsFor(String topic, Duration timeout)", "full_signature": "public List<PartitionInfo> partitionsFor(String topic, Duration timeout)", "class_method_signature": "TracingConsumer.partitionsFor(String topic, Duration timeout)", "testcase": false, "constructor": false}, {"identifier": "listTopics", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, List<PartitionInfo>>", "signature": "Map<String, List<PartitionInfo>> listTopics()", "full_signature": "@Override public Map<String, List<PartitionInfo>> listTopics()", "class_method_signature": "TracingConsumer.listTopics()", "testcase": false, "constructor": false}, {"identifier": "listTopics", "parameters": "(Duration timeout)", "modifiers": "@Override public", "return": "Map<String, List<PartitionInfo>>", "signature": "Map<String, List<PartitionInfo>> listTopics(Duration timeout)", "full_signature": "@Override public Map<String, List<PartitionInfo>> listTopics(Duration timeout)", "class_method_signature": "TracingConsumer.listTopics(Duration timeout)", "testcase": false, "constructor": false}, {"identifier": "paused", "parameters": "()", "modifiers": "@Override public", "return": "Set<TopicPartition>", "signature": "Set<TopicPartition> paused()", "full_signature": "@Override public Set<TopicPartition> paused()", "class_method_signature": "TracingConsumer.paused()", "testcase": false, "constructor": false}, {"identifier": "pause", "parameters": "(Collection<TopicPartition> partitions)", "modifiers": "@Override public", "return": "void", "signature": "void pause(Collection<TopicPartition> partitions)", "full_signature": "@Override public void pause(Collection<TopicPartition> partitions)", "class_method_signature": "TracingConsumer.pause(Collection<TopicPartition> partitions)", "testcase": false, "constructor": false}, {"identifier": "resume", "parameters": "(Collection<TopicPartition> partitions)", "modifiers": "@Override public", "return": "void", "signature": "void resume(Collection<TopicPartition> partitions)", "full_signature": "@Override public void resume(Collection<TopicPartition> partitions)", "class_method_signature": "TracingConsumer.resume(Collection<TopicPartition> partitions)", "testcase": false, "constructor": false}, {"identifier": "offsetsForTimes", "parameters": "(\n    Map<TopicPartition, Long> timestampsToSearch)", "modifiers": "@Override public", "return": "Map<TopicPartition, OffsetAndTimestamp>", "signature": "Map<TopicPartition, OffsetAndTimestamp> offsetsForTimes(\n    Map<TopicPartition, Long> timestampsToSearch)", "full_signature": "@Override public Map<TopicPartition, OffsetAndTimestamp> offsetsForTimes(\n    Map<TopicPartition, Long> timestampsToSearch)", "class_method_signature": "TracingConsumer.offsetsForTimes(\n    Map<TopicPartition, Long> timestampsToSearch)", "testcase": false, "constructor": false}, {"identifier": "offsetsForTimes", "parameters": "(\n    Map<TopicPartition, Long> timestampsToSearch, Duration timeout)", "modifiers": "public", "return": "Map<TopicPartition, OffsetAndTimestamp>", "signature": "Map<TopicPartition, OffsetAndTimestamp> offsetsForTimes(\n    Map<TopicPartition, Long> timestampsToSearch, Duration timeout)", "full_signature": "public Map<TopicPartition, OffsetAndTimestamp> offsetsForTimes(\n    Map<TopicPartition, Long> timestampsToSearch, Duration timeout)", "class_method_signature": "TracingConsumer.offsetsForTimes(\n    Map<TopicPartition, Long> timestampsToSearch, Duration timeout)", "testcase": false, "constructor": false}, {"identifier": "beginningOffsets", "parameters": "(Collection<TopicPartition> partitions)", "modifiers": "@Override public", "return": "Map<TopicPartition, Long>", "signature": "Map<TopicPartition, Long> beginningOffsets(Collection<TopicPartition> partitions)", "full_signature": "@Override public Map<TopicPartition, Long> beginningOffsets(Collection<TopicPartition> partitions)", "class_method_signature": "TracingConsumer.beginningOffsets(Collection<TopicPartition> partitions)", "testcase": false, "constructor": false}, {"identifier": "beginningOffsets", "parameters": "(Collection<TopicPartition> partitions,\n    Duration timeout)", "modifiers": "public", "return": "Map<TopicPartition, Long>", "signature": "Map<TopicPartition, Long> beginningOffsets(Collection<TopicPartition> partitions,\n    Duration timeout)", "full_signature": "public Map<TopicPartition, Long> beginningOffsets(Collection<TopicPartition> partitions,\n    Duration timeout)", "class_method_signature": "TracingConsumer.beginningOffsets(Collection<TopicPartition> partitions,\n    Duration timeout)", "testcase": false, "constructor": false}, {"identifier": "endOffsets", "parameters": "(Collection<TopicPartition> partitions)", "modifiers": "@Override public", "return": "Map<TopicPartition, Long>", "signature": "Map<TopicPartition, Long> endOffsets(Collection<TopicPartition> partitions)", "full_signature": "@Override public Map<TopicPartition, Long> endOffsets(Collection<TopicPartition> partitions)", "class_method_signature": "TracingConsumer.endOffsets(Collection<TopicPartition> partitions)", "testcase": false, "constructor": false}, {"identifier": "endOffsets", "parameters": "(Collection<TopicPartition> partitions,\n    Duration timeout)", "modifiers": "public", "return": "Map<TopicPartition, Long>", "signature": "Map<TopicPartition, Long> endOffsets(Collection<TopicPartition> partitions,\n    Duration timeout)", "full_signature": "public Map<TopicPartition, Long> endOffsets(Collection<TopicPartition> partitions,\n    Duration timeout)", "class_method_signature": "TracingConsumer.endOffsets(Collection<TopicPartition> partitions,\n    Duration timeout)", "testcase": false, "constructor": false}, {"identifier": "groupMetadata", "parameters": "()", "modifiers": "public", "return": "ConsumerGroupMetadata", "signature": "ConsumerGroupMetadata groupMetadata()", "full_signature": "public ConsumerGroupMetadata groupMetadata()", "class_method_signature": "TracingConsumer.groupMetadata()", "testcase": false, "constructor": false}, {"identifier": "enforceRebalance", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void enforceRebalance()", "full_signature": "public void enforceRebalance()", "class_method_signature": "TracingConsumer.enforceRebalance()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "TracingConsumer.close()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(long timeout, TimeUnit unit)", "modifiers": "public", "return": "void", "signature": "void close(long timeout, TimeUnit unit)", "full_signature": "public void close(long timeout, TimeUnit unit)", "class_method_signature": "TracingConsumer.close(long timeout, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(Duration timeout)", "modifiers": "public", "return": "void", "signature": "void close(Duration timeout)", "full_signature": "public void close(Duration timeout)", "class_method_signature": "TracingConsumer.close(Duration timeout)", "testcase": false, "constructor": false}, {"identifier": "wakeup", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void wakeup()", "full_signature": "@Override public void wakeup()", "class_method_signature": "TracingConsumer.wakeup()", "testcase": false, "constructor": false}, {"identifier": "setConsumerSpan", "parameters": "(String topic, Span span)", "modifiers": "", "return": "void", "signature": "void setConsumerSpan(String topic, Span span)", "full_signature": " void setConsumerSpan(String topic, Span span)", "class_method_signature": "TracingConsumer.setConsumerSpan(String topic, Span span)", "testcase": false, "constructor": false}], "file": "instrumentation/kafka-clients/src/main/java/brave/kafka/clients/TracingConsumer.java"}, "focal_method": {"identifier": "poll", "parameters": "(Duration timeout)", "modifiers": "public", "return": "ConsumerRecords<K, V>", "body": "public ConsumerRecords<K, V> poll(Duration timeout) {\n    return poll(timeout.toMillis());\n  }", "signature": "ConsumerRecords<K, V> poll(Duration timeout)", "full_signature": "public ConsumerRecords<K, V> poll(Duration timeout)", "class_method_signature": "TracingConsumer.poll(Duration timeout)", "testcase": false, "constructor": false, "invocations": ["poll", "toMillis"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}