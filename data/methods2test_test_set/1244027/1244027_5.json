{"test_class": {"identifier": "StandardDdlParserTest", "superclass": "extends DdlParserTestHelper", "interfaces": "", "fields": [{"original_string": "public static final String DDL_FILE_PATH = \"ddl/\";", "modifier": "public static final", "type": "String", "declarator": "DDL_FILE_PATH = \"ddl/\"", "var_name": "DDL_FILE_PATH"}], "file": "sequencers/modeshape-sequencer-ddl/src/test/java/org/modeshape/sequencer/ddl/StandardDdlParserTest.java"}, "test_case": {"identifier": "shouldParseCreateLocalTemporaryTable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldParseCreateLocalTemporaryTable() {\n        printTest(\"shouldParseCreateLocalTemporaryTable()\");\n\n        String tableName = \"MY_TABLE_A\";\n        String content = \"CREATE LOCAL TEMPORARY TABLE MY_TABLE_A (PARTID VARCHAR (255) NOT NULL DEFAULT (100),  -- COLUMN 1 COMMENT with comma \\nPARTCOLOR INTEGER NOT NULL);\";\n\n        DdlTokenStream tokens = getTokens(content);\n\n        AstNode result = parser.parseCreateTableStatement(tokens, rootNode);\n\n        assertEquals(1, rootNode.getChildCount());\n        AstNode tableNode = rootNode.getChildren().get(0);\n        assertThat(result, is(tableNode));\n        assertEquals(tableName, tableNode.getName());\n        assertEquals(2, tableNode.getChildCount());\n        AstNode column = tableNode.getChildren().get(0);\n        assertEquals(\"VARCHAR\", column.getProperty(DATATYPE_NAME));\n        assertEquals(255L, column.getProperty(DATATYPE_LENGTH));\n        assertTrue(column.getProperty(DATATYPE_PRECISION) == null);\n        assertEquals(\"NOT NULL\", column.getProperty(NULLABLE));\n        assertEquals(DEFAULT_ID_LITERAL, column.getProperty(DEFAULT_OPTION));\n        assertEquals(\"100\", column.getProperty(DEFAULT_VALUE));\n    }", "signature": "void shouldParseCreateLocalTemporaryTable()", "full_signature": "@Test public void shouldParseCreateLocalTemporaryTable()", "class_method_signature": "StandardDdlParserTest.shouldParseCreateLocalTemporaryTable()", "testcase": true, "constructor": false, "invocations": ["printTest", "getTokens", "parseCreateTableStatement", "assertEquals", "getChildCount", "get", "getChildren", "assertThat", "is", "assertEquals", "getName", "assertEquals", "getChildCount", "get", "getChildren", "assertEquals", "getProperty", "assertEquals", "getProperty", "assertTrue", "getProperty", "assertEquals", "getProperty", "assertEquals", "getProperty", "assertEquals", "getProperty"]}, "focal_class": {"identifier": "StandardDdlParser", "superclass": "", "interfaces": "implements DdlParser, DdlConstants, DdlConstants.StatementStartPhrases", "fields": [{"original_string": "public static final String ID = \"SQL92\";", "modifier": "public static final", "type": "String", "declarator": "ID = \"SQL92\"", "var_name": "ID"}, {"original_string": "private static final Logger LOGGER = Logger.getLogger(StandardDdlParser.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(StandardDdlParser.class)", "var_name": "LOGGER"}, {"original_string": "private boolean testMode = false;", "modifier": "private", "type": "boolean", "declarator": "testMode = false", "var_name": "testMode"}, {"original_string": "private final List<DdlParserProblem> problems;", "modifier": "private final", "type": "List<DdlParserProblem>", "declarator": "problems", "var_name": "problems"}, {"original_string": "private final AstNodeFactory nodeFactory;", "modifier": "private final", "type": "AstNodeFactory", "declarator": "nodeFactory", "var_name": "nodeFactory"}, {"original_string": "private AstNode rootNode;", "modifier": "private", "type": "AstNode", "declarator": "rootNode", "var_name": "rootNode"}, {"original_string": "private List<String> allDataTypeStartWords = null;", "modifier": "private", "type": "List<String>", "declarator": "allDataTypeStartWords = null", "var_name": "allDataTypeStartWords"}, {"original_string": "private DataTypeParser datatypeParser = null;", "modifier": "private", "type": "DataTypeParser", "declarator": "datatypeParser = null", "var_name": "datatypeParser"}, {"original_string": "private String terminator = DEFAULT_TERMINATOR;", "modifier": "private", "type": "String", "declarator": "terminator = DEFAULT_TERMINATOR", "var_name": "terminator"}, {"original_string": "private boolean useTerminator = false;", "modifier": "private", "type": "boolean", "declarator": "useTerminator = false", "var_name": "useTerminator"}, {"original_string": "private Position currentMarkedPosition;", "modifier": "private", "type": "Position", "declarator": "currentMarkedPosition", "var_name": "currentMarkedPosition"}], "methods": [{"identifier": "StandardDdlParser", "parameters": "()", "modifiers": "public", "return": "", "signature": " StandardDdlParser()", "full_signature": "public  StandardDdlParser()", "class_method_signature": "StandardDdlParser.StandardDdlParser()", "testcase": false, "constructor": true}, {"identifier": "getDatatypeParser", "parameters": "()", "modifiers": "public", "return": "DataTypeParser", "signature": "DataTypeParser getDatatypeParser()", "full_signature": "public DataTypeParser getDatatypeParser()", "class_method_signature": "StandardDdlParser.getDatatypeParser()", "testcase": false, "constructor": false}, {"identifier": "setDatatypeParser", "parameters": "( DataTypeParser datatypeParser )", "modifiers": "public", "return": "void", "signature": "void setDatatypeParser( DataTypeParser datatypeParser )", "full_signature": "public void setDatatypeParser( DataTypeParser datatypeParser )", "class_method_signature": "StandardDdlParser.setDatatypeParser( DataTypeParser datatypeParser )", "testcase": false, "constructor": false}, {"identifier": "nodeFactory", "parameters": "()", "modifiers": "public", "return": "AstNodeFactory", "signature": "AstNodeFactory nodeFactory()", "full_signature": "public AstNodeFactory nodeFactory()", "class_method_signature": "StandardDdlParser.nodeFactory()", "testcase": false, "constructor": false}, {"identifier": "getRootNode", "parameters": "()", "modifiers": "public", "return": "AstNode", "signature": "AstNode getRootNode()", "full_signature": "public AstNode getRootNode()", "class_method_signature": "StandardDdlParser.getRootNode()", "testcase": false, "constructor": false}, {"identifier": "setRootNode", "parameters": "( AstNode rootNode )", "modifiers": "public", "return": "void", "signature": "void setRootNode( AstNode rootNode )", "full_signature": "public void setRootNode( AstNode rootNode )", "class_method_signature": "StandardDdlParser.setRootNode( AstNode rootNode )", "testcase": false, "constructor": false}, {"identifier": "score", "parameters": "( String ddl,\n                         String fileName,\n                         DdlParserScorer scorer )", "modifiers": "@Override public", "return": "Object", "signature": "Object score( String ddl,\n                         String fileName,\n                         DdlParserScorer scorer )", "full_signature": "@Override public Object score( String ddl,\n                         String fileName,\n                         DdlParserScorer scorer )", "class_method_signature": "StandardDdlParser.score( String ddl,\n                         String fileName,\n                         DdlParserScorer scorer )", "testcase": false, "constructor": false}, {"identifier": "computeScore", "parameters": "( DdlTokenStream tokens,\n                                 DdlParserScorer scorer )", "modifiers": "protected", "return": "void", "signature": "void computeScore( DdlTokenStream tokens,\n                                 DdlParserScorer scorer )", "full_signature": "protected void computeScore( DdlTokenStream tokens,\n                                 DdlParserScorer scorer )", "class_method_signature": "StandardDdlParser.computeScore( DdlTokenStream tokens,\n                                 DdlParserScorer scorer )", "testcase": false, "constructor": false}, {"identifier": "getIdentifyingKeywords", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] getIdentifyingKeywords()", "full_signature": "public String[] getIdentifyingKeywords()", "class_method_signature": "StandardDdlParser.getIdentifyingKeywords()", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "( String ddl,\n                       AstNode rootNode,\n                       Object scoreReturnObject )", "modifiers": "@Override public", "return": "void", "signature": "void parse( String ddl,\n                       AstNode rootNode,\n                       Object scoreReturnObject )", "full_signature": "@Override public void parse( String ddl,\n                       AstNode rootNode,\n                       Object scoreReturnObject )", "class_method_signature": "StandardDdlParser.parse( String ddl,\n                       AstNode rootNode,\n                       Object scoreReturnObject )", "testcase": false, "constructor": false}, {"identifier": "initializeTokenStream", "parameters": "( DdlTokenStream tokens )", "modifiers": "protected", "return": "void", "signature": "void initializeTokenStream( DdlTokenStream tokens )", "full_signature": "protected void initializeTokenStream( DdlTokenStream tokens )", "class_method_signature": "StandardDdlParser.initializeTokenStream( DdlTokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseNextStatement", "parameters": "( DdlTokenStream tokens,\n                                          AstNode node )", "modifiers": "protected", "return": "AstNode", "signature": "AstNode parseNextStatement( DdlTokenStream tokens,\n                                          AstNode node )", "full_signature": "protected AstNode parseNextStatement( DdlTokenStream tokens,\n                                          AstNode node )", "class_method_signature": "StandardDdlParser.parseNextStatement( DdlTokenStream tokens,\n                                          AstNode node )", "testcase": false, "constructor": false}, {"identifier": "moveToNextStatementStart", "parameters": "( DdlTokenStream tokens )", "modifiers": "private", "return": "boolean", "signature": "boolean moveToNextStatementStart( DdlTokenStream tokens )", "full_signature": "private boolean moveToNextStatementStart( DdlTokenStream tokens )", "class_method_signature": "StandardDdlParser.moveToNextStatementStart( DdlTokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "addProblem", "parameters": "( DdlParserProblem problem,\n                                  AstNode node )", "modifiers": "public final", "return": "void", "signature": "void addProblem( DdlParserProblem problem,\n                                  AstNode node )", "full_signature": "public final void addProblem( DdlParserProblem problem,\n                                  AstNode node )", "class_method_signature": "StandardDdlParser.addProblem( DdlParserProblem problem,\n                                  AstNode node )", "testcase": false, "constructor": false}, {"identifier": "addProblem", "parameters": "( DdlParserProblem problem )", "modifiers": "public final", "return": "void", "signature": "void addProblem( DdlParserProblem problem )", "full_signature": "public final void addProblem( DdlParserProblem problem )", "class_method_signature": "StandardDdlParser.addProblem( DdlParserProblem problem )", "testcase": false, "constructor": false}, {"identifier": "getProblems", "parameters": "()", "modifiers": "public final", "return": "List<DdlParserProblem>", "signature": "List<DdlParserProblem> getProblems()", "full_signature": "public final List<DdlParserProblem> getProblems()", "class_method_signature": "StandardDdlParser.getProblems()", "testcase": false, "constructor": false}, {"identifier": "attachNewProblem", "parameters": "( DdlParserProblem problem,\n                                        AstNode parentNode )", "modifiers": "public final", "return": "void", "signature": "void attachNewProblem( DdlParserProblem problem,\n                                        AstNode parentNode )", "full_signature": "public final void attachNewProblem( DdlParserProblem problem,\n                                        AstNode parentNode )", "class_method_signature": "StandardDdlParser.attachNewProblem( DdlParserProblem problem,\n                                        AstNode parentNode )", "testcase": false, "constructor": false}, {"identifier": "rewrite", "parameters": "( DdlTokenStream tokens,\n                            AstNode rootNode )", "modifiers": "protected", "return": "void", "signature": "void rewrite( DdlTokenStream tokens,\n                            AstNode rootNode )", "full_signature": "protected void rewrite( DdlTokenStream tokens,\n                            AstNode rootNode )", "class_method_signature": "StandardDdlParser.rewrite( DdlTokenStream tokens,\n                            AstNode rootNode )", "testcase": false, "constructor": false}, {"identifier": "removeMissingTerminatorNodes", "parameters": "( AstNode parentNode )", "modifiers": "protected", "return": "void", "signature": "void removeMissingTerminatorNodes( AstNode parentNode )", "full_signature": "protected void removeMissingTerminatorNodes( AstNode parentNode )", "class_method_signature": "StandardDdlParser.removeMissingTerminatorNodes( AstNode parentNode )", "testcase": false, "constructor": false}, {"identifier": "mergeNodes", "parameters": "( DdlTokenStream tokens,\n                            AstNode firstNode,\n                            AstNode secondNode )", "modifiers": "public", "return": "void", "signature": "void mergeNodes( DdlTokenStream tokens,\n                            AstNode firstNode,\n                            AstNode secondNode )", "full_signature": "public void mergeNodes( DdlTokenStream tokens,\n                            AstNode firstNode,\n                            AstNode secondNode )", "class_method_signature": "StandardDdlParser.mergeNodes( DdlTokenStream tokens,\n                            AstNode firstNode,\n                            AstNode secondNode )", "testcase": false, "constructor": false}, {"identifier": "handleUnknownToken", "parameters": "( DdlTokenStream tokens,\n                                       String tokenValue )", "modifiers": "public", "return": "AstNode", "signature": "AstNode handleUnknownToken( DdlTokenStream tokens,\n                                       String tokenValue )", "full_signature": "public AstNode handleUnknownToken( DdlTokenStream tokens,\n                                       String tokenValue )", "class_method_signature": "StandardDdlParser.handleUnknownToken( DdlTokenStream tokens,\n                                       String tokenValue )", "testcase": false, "constructor": false}, {"identifier": "parseCreateStatement", "parameters": "( DdlTokenStream tokens,\n                                            AstNode parentNode )", "modifiers": "protected", "return": "AstNode", "signature": "AstNode parseCreateStatement( DdlTokenStream tokens,\n                                            AstNode parentNode )", "full_signature": "protected AstNode parseCreateStatement( DdlTokenStream tokens,\n                                            AstNode parentNode )", "class_method_signature": "StandardDdlParser.parseCreateStatement( DdlTokenStream tokens,\n                                            AstNode parentNode )", "testcase": false, "constructor": false}, {"identifier": "parseAlterStatement", "parameters": "( DdlTokenStream tokens,\n                                           AstNode parentNode )", "modifiers": "protected", "return": "AstNode", "signature": "AstNode parseAlterStatement( DdlTokenStream tokens,\n                                           AstNode parentNode )", "full_signature": "protected AstNode parseAlterStatement( DdlTokenStream tokens,\n                                           AstNode parentNode )", "class_method_signature": "StandardDdlParser.parseAlterStatement( DdlTokenStream tokens,\n                                           AstNode parentNode )", "testcase": false, "constructor": false}, {"identifier": "parseAlterTableStatement", "parameters": "( DdlTokenStream tokens,\n                                                AstNode parentNode )", "modifiers": "protected", "return": "AstNode", "signature": "AstNode parseAlterTableStatement( DdlTokenStream tokens,\n                                                AstNode parentNode )", "full_signature": "protected AstNode parseAlterTableStatement( DdlTokenStream tokens,\n                                                AstNode parentNode )", "class_method_signature": "StandardDdlParser.parseAlterTableStatement( DdlTokenStream tokens,\n                                                AstNode parentNode )", "testcase": false, "constructor": false}, {"identifier": "parseDropStatement", "parameters": "( DdlTokenStream tokens,\n                                          AstNode parentNode )", "modifiers": "protected", "return": "AstNode", "signature": "AstNode parseDropStatement( DdlTokenStream tokens,\n                                          AstNode parentNode )", "full_signature": "protected AstNode parseDropStatement( DdlTokenStream tokens,\n                                          AstNode parentNode )", "class_method_signature": "StandardDdlParser.parseDropStatement( DdlTokenStream tokens,\n                                          AstNode parentNode )", "testcase": false, "constructor": false}, {"identifier": "parseSimpleDropStatement", "parameters": "( DdlTokenStream tokens,\n                                              String[] startPhrase,\n                                              AstNode parentNode,\n                                              String stmtType )", "modifiers": "private", "return": "AstNode", "signature": "AstNode parseSimpleDropStatement( DdlTokenStream tokens,\n                                              String[] startPhrase,\n                                              AstNode parentNode,\n                                              String stmtType )", "full_signature": "private AstNode parseSimpleDropStatement( DdlTokenStream tokens,\n                                              String[] startPhrase,\n                                              AstNode parentNode,\n                                              String stmtType )", "class_method_signature": "StandardDdlParser.parseSimpleDropStatement( DdlTokenStream tokens,\n                                              String[] startPhrase,\n                                              AstNode parentNode,\n                                              String stmtType )", "testcase": false, "constructor": false}, {"identifier": "parseInsertStatement", "parameters": "( DdlTokenStream tokens,\n                                            AstNode parentNode )", "modifiers": "protected", "return": "AstNode", "signature": "AstNode parseInsertStatement( DdlTokenStream tokens,\n                                            AstNode parentNode )", "full_signature": "protected AstNode parseInsertStatement( DdlTokenStream tokens,\n                                            AstNode parentNode )", "class_method_signature": "StandardDdlParser.parseInsertStatement( DdlTokenStream tokens,\n                                            AstNode parentNode )", "testcase": false, "constructor": false}, {"identifier": "parseSetStatement", "parameters": "( DdlTokenStream tokens,\n                                         AstNode parentNode )", "modifiers": "protected", "return": "AstNode", "signature": "AstNode parseSetStatement( DdlTokenStream tokens,\n                                         AstNode parentNode )", "full_signature": "protected AstNode parseSetStatement( DdlTokenStream tokens,\n                                         AstNode parentNode )", "class_method_signature": "StandardDdlParser.parseSetStatement( DdlTokenStream tokens,\n                                         AstNode parentNode )", "testcase": false, "constructor": false}, {"identifier": "parseGrantStatement", "parameters": "( DdlTokenStream tokens,\n                                           AstNode parentNode )", "modifiers": "protected", "return": "AstNode", "signature": "AstNode parseGrantStatement( DdlTokenStream tokens,\n                                           AstNode parentNode )", "full_signature": "protected AstNode parseGrantStatement( DdlTokenStream tokens,\n                                           AstNode parentNode )", "class_method_signature": "StandardDdlParser.parseGrantStatement( DdlTokenStream tokens,\n                                           AstNode parentNode )", "testcase": false, "constructor": false}, {"identifier": "parseGrantPrivileges", "parameters": "( DdlTokenStream tokens,\n                                         List<AstNode> privileges )", "modifiers": "protected", "return": "void", "signature": "void parseGrantPrivileges( DdlTokenStream tokens,\n                                         List<AstNode> privileges )", "full_signature": "protected void parseGrantPrivileges( DdlTokenStream tokens,\n                                         List<AstNode> privileges )", "class_method_signature": "StandardDdlParser.parseGrantPrivileges( DdlTokenStream tokens,\n                                         List<AstNode> privileges )", "testcase": false, "constructor": false}, {"identifier": "parseRevokeStatement", "parameters": "( DdlTokenStream tokens,\n                                            AstNode parentNode )", "modifiers": "protected", "return": "AstNode", "signature": "AstNode parseRevokeStatement( DdlTokenStream tokens,\n                                            AstNode parentNode )", "full_signature": "protected AstNode parseRevokeStatement( DdlTokenStream tokens,\n                                            AstNode parentNode )", "class_method_signature": "StandardDdlParser.parseRevokeStatement( DdlTokenStream tokens,\n                                            AstNode parentNode )", "testcase": false, "constructor": false}, {"identifier": "parseCreateDomainStatement", "parameters": "( DdlTokenStream tokens,\n                                                  AstNode parentNode )", "modifiers": "protected", "return": "AstNode", "signature": "AstNode parseCreateDomainStatement( DdlTokenStream tokens,\n                                                  AstNode parentNode )", "full_signature": "protected AstNode parseCreateDomainStatement( DdlTokenStream tokens,\n                                                  AstNode parentNode )", "class_method_signature": "StandardDdlParser.parseCreateDomainStatement( DdlTokenStream tokens,\n                                                  AstNode parentNode )", "testcase": false, "constructor": false}, {"identifier": "parseCreateCollationStatement", "parameters": "( DdlTokenStream tokens,\n                                                     AstNode parentNode )", "modifiers": "protected", "return": "AstNode", "signature": "AstNode parseCreateCollationStatement( DdlTokenStream tokens,\n                                                     AstNode parentNode )", "full_signature": "protected AstNode parseCreateCollationStatement( DdlTokenStream tokens,\n                                                     AstNode parentNode )", "class_method_signature": "StandardDdlParser.parseCreateCollationStatement( DdlTokenStream tokens,\n                                                     AstNode parentNode )", "testcase": false, "constructor": false}, {"identifier": "parseCreateTranslationStatement", "parameters": "( DdlTokenStream tokens,\n                                                       AstNode parentNode )", "modifiers": "protected", "return": "AstNode", "signature": "AstNode parseCreateTranslationStatement( DdlTokenStream tokens,\n                                                       AstNode parentNode )", "full_signature": "protected AstNode parseCreateTranslationStatement( DdlTokenStream tokens,\n                                                       AstNode parentNode )", "class_method_signature": "StandardDdlParser.parseCreateTranslationStatement( DdlTokenStream tokens,\n                                                       AstNode parentNode )", "testcase": false, "constructor": false}, {"identifier": "parseCreateCharacterSetStatement", "parameters": "( DdlTokenStream tokens,\n                                                        AstNode parentNode )", "modifiers": "protected", "return": "AstNode", "signature": "AstNode parseCreateCharacterSetStatement( DdlTokenStream tokens,\n                                                        AstNode parentNode )", "full_signature": "protected AstNode parseCreateCharacterSetStatement( DdlTokenStream tokens,\n                                                        AstNode parentNode )", "class_method_signature": "StandardDdlParser.parseCreateCharacterSetStatement( DdlTokenStream tokens,\n                                                        AstNode parentNode )", "testcase": false, "constructor": false}, {"identifier": "parseCustomStatement", "parameters": "( DdlTokenStream tokens,\n                                            AstNode parentNode )", "modifiers": "protected", "return": "AstNode", "signature": "AstNode parseCustomStatement( DdlTokenStream tokens,\n                                            AstNode parentNode )", "full_signature": "protected AstNode parseCustomStatement( DdlTokenStream tokens,\n                                            AstNode parentNode )", "class_method_signature": "StandardDdlParser.parseCustomStatement( DdlTokenStream tokens,\n                                            AstNode parentNode )", "testcase": false, "constructor": false}, {"identifier": "parseCreateTableStatement", "parameters": "( DdlTokenStream tokens,\n                                                 AstNode parentNode )", "modifiers": "protected", "return": "AstNode", "signature": "AstNode parseCreateTableStatement( DdlTokenStream tokens,\n                                                 AstNode parentNode )", "full_signature": "protected AstNode parseCreateTableStatement( DdlTokenStream tokens,\n                                                 AstNode parentNode )", "class_method_signature": "StandardDdlParser.parseCreateTableStatement( DdlTokenStream tokens,\n                                                 AstNode parentNode )", "testcase": false, "constructor": false}, {"identifier": "parseCreateTableOptions", "parameters": "( DdlTokenStream tokens,\n                                            AstNode tableNode )", "modifiers": "protected", "return": "void", "signature": "void parseCreateTableOptions( DdlTokenStream tokens,\n                                            AstNode tableNode )", "full_signature": "protected void parseCreateTableOptions( DdlTokenStream tokens,\n                                            AstNode tableNode )", "class_method_signature": "StandardDdlParser.parseCreateTableOptions( DdlTokenStream tokens,\n                                            AstNode tableNode )", "testcase": false, "constructor": false}, {"identifier": "parseNextCreateTableOption", "parameters": "( DdlTokenStream tokens,\n                                               AstNode tableNode )", "modifiers": "protected", "return": "void", "signature": "void parseNextCreateTableOption( DdlTokenStream tokens,\n                                               AstNode tableNode )", "full_signature": "protected void parseNextCreateTableOption( DdlTokenStream tokens,\n                                               AstNode tableNode )", "class_method_signature": "StandardDdlParser.parseNextCreateTableOption( DdlTokenStream tokens,\n                                               AstNode tableNode )", "testcase": false, "constructor": false}, {"identifier": "areNextTokensCreateTableOptions", "parameters": "( DdlTokenStream tokens )", "modifiers": "protected", "return": "boolean", "signature": "boolean areNextTokensCreateTableOptions( DdlTokenStream tokens )", "full_signature": "protected boolean areNextTokensCreateTableOptions( DdlTokenStream tokens )", "class_method_signature": "StandardDdlParser.areNextTokensCreateTableOptions( DdlTokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseColumnsAndConstraints", "parameters": "( DdlTokenStream tokens,\n                                               AstNode tableNode )", "modifiers": "protected", "return": "void", "signature": "void parseColumnsAndConstraints( DdlTokenStream tokens,\n                                               AstNode tableNode )", "full_signature": "protected void parseColumnsAndConstraints( DdlTokenStream tokens,\n                                               AstNode tableNode )", "class_method_signature": "StandardDdlParser.parseColumnsAndConstraints( DdlTokenStream tokens,\n                                               AstNode tableNode )", "testcase": false, "constructor": false}, {"identifier": "parseColumnDefinition", "parameters": "( DdlTokenStream tokens,\n                                          AstNode tableNode,\n                                          boolean isAlterTable )", "modifiers": "protected", "return": "void", "signature": "void parseColumnDefinition( DdlTokenStream tokens,\n                                          AstNode tableNode,\n                                          boolean isAlterTable )", "full_signature": "protected void parseColumnDefinition( DdlTokenStream tokens,\n                                          AstNode tableNode,\n                                          boolean isAlterTable )", "class_method_signature": "StandardDdlParser.parseColumnDefinition( DdlTokenStream tokens,\n                                          AstNode tableNode,\n                                          boolean isAlterTable )", "testcase": false, "constructor": false}, {"identifier": "parseSingleTerminatedColumnDefinition", "parameters": "( DdlTokenStream tokens,\n                                                          AstNode tableNode,\n                                                          boolean isAlterTable )", "modifiers": "protected", "return": "void", "signature": "void parseSingleTerminatedColumnDefinition( DdlTokenStream tokens,\n                                                          AstNode tableNode,\n                                                          boolean isAlterTable )", "full_signature": "protected void parseSingleTerminatedColumnDefinition( DdlTokenStream tokens,\n                                                          AstNode tableNode,\n                                                          boolean isAlterTable )", "class_method_signature": "StandardDdlParser.parseSingleTerminatedColumnDefinition( DdlTokenStream tokens,\n                                                          AstNode tableNode,\n                                                          boolean isAlterTable )", "testcase": false, "constructor": false}, {"identifier": "getTableElementsString", "parameters": "( DdlTokenStream tokens,\n                                             boolean useTerminator )", "modifiers": "protected", "return": "String", "signature": "String getTableElementsString( DdlTokenStream tokens,\n                                             boolean useTerminator )", "full_signature": "protected String getTableElementsString( DdlTokenStream tokens,\n                                             boolean useTerminator )", "class_method_signature": "StandardDdlParser.getTableElementsString( DdlTokenStream tokens,\n                                             boolean useTerminator )", "testcase": false, "constructor": false}, {"identifier": "consumeParenBoundedTokens", "parameters": "( DdlTokenStream tokens,\n                                                boolean includeParens )", "modifiers": "protected", "return": "String", "signature": "String consumeParenBoundedTokens( DdlTokenStream tokens,\n                                                boolean includeParens )", "full_signature": "protected String consumeParenBoundedTokens( DdlTokenStream tokens,\n                                                boolean includeParens )", "class_method_signature": "StandardDdlParser.consumeParenBoundedTokens( DdlTokenStream tokens,\n                                                boolean includeParens )", "testcase": false, "constructor": false}, {"identifier": "parseColumnConstraint", "parameters": "( DdlTokenStream tokens,\n                                             AstNode columnNode,\n                                             boolean isAlterTable )", "modifiers": "protected", "return": "boolean", "signature": "boolean parseColumnConstraint( DdlTokenStream tokens,\n                                             AstNode columnNode,\n                                             boolean isAlterTable )", "full_signature": "protected boolean parseColumnConstraint( DdlTokenStream tokens,\n                                             AstNode columnNode,\n                                             boolean isAlterTable )", "class_method_signature": "StandardDdlParser.parseColumnConstraint( DdlTokenStream tokens,\n                                             AstNode columnNode,\n                                             boolean isAlterTable )", "testcase": false, "constructor": false}, {"identifier": "parseTableConstraint", "parameters": "( DdlTokenStream tokens,\n                                         AstNode tableNode,\n                                         boolean isAlterTable )", "modifiers": "protected", "return": "void", "signature": "void parseTableConstraint( DdlTokenStream tokens,\n                                         AstNode tableNode,\n                                         boolean isAlterTable )", "full_signature": "protected void parseTableConstraint( DdlTokenStream tokens,\n                                         AstNode tableNode,\n                                         boolean isAlterTable )", "class_method_signature": "StandardDdlParser.parseTableConstraint( DdlTokenStream tokens,\n                                         AstNode tableNode,\n                                         boolean isAlterTable )", "testcase": false, "constructor": false}, {"identifier": "parseCheckConstraint", "parameters": "(DdlTokenStream tokens, AstNode tableNode, String mixinType, String constraintName)", "modifiers": "protected", "return": "void", "signature": "void parseCheckConstraint(DdlTokenStream tokens, AstNode tableNode, String mixinType, String constraintName)", "full_signature": "protected void parseCheckConstraint(DdlTokenStream tokens, AstNode tableNode, String mixinType, String constraintName)", "class_method_signature": "StandardDdlParser.parseCheckConstraint(DdlTokenStream tokens, AstNode tableNode, String mixinType, String constraintName)", "testcase": false, "constructor": false}, {"identifier": "parseConstraintAttributes", "parameters": "( DdlTokenStream tokens,\n                                              AstNode constraintNode )", "modifiers": "protected", "return": "void", "signature": "void parseConstraintAttributes( DdlTokenStream tokens,\n                                              AstNode constraintNode )", "full_signature": "protected void parseConstraintAttributes( DdlTokenStream tokens,\n                                              AstNode constraintNode )", "class_method_signature": "StandardDdlParser.parseConstraintAttributes( DdlTokenStream tokens,\n                                              AstNode constraintNode )", "testcase": false, "constructor": false}, {"identifier": "parseReferences", "parameters": "( DdlTokenStream tokens,\n                                    AstNode constraintNode )", "modifiers": "protected", "return": "void", "signature": "void parseReferences( DdlTokenStream tokens,\n                                    AstNode constraintNode )", "full_signature": "protected void parseReferences( DdlTokenStream tokens,\n                                    AstNode constraintNode )", "class_method_signature": "StandardDdlParser.parseReferences( DdlTokenStream tokens,\n                                    AstNode constraintNode )", "testcase": false, "constructor": false}, {"identifier": "parseCreateViewStatement", "parameters": "( DdlTokenStream tokens,\n                                                AstNode parentNode )", "modifiers": "protected", "return": "AstNode", "signature": "AstNode parseCreateViewStatement( DdlTokenStream tokens,\n                                                AstNode parentNode )", "full_signature": "protected AstNode parseCreateViewStatement( DdlTokenStream tokens,\n                                                AstNode parentNode )", "class_method_signature": "StandardDdlParser.parseCreateViewStatement( DdlTokenStream tokens,\n                                                AstNode parentNode )", "testcase": false, "constructor": false}, {"identifier": "parseCreateSchemaStatement", "parameters": "( DdlTokenStream tokens,\n                                                  AstNode parentNode )", "modifiers": "protected", "return": "AstNode", "signature": "AstNode parseCreateSchemaStatement( DdlTokenStream tokens,\n                                                  AstNode parentNode )", "full_signature": "protected AstNode parseCreateSchemaStatement( DdlTokenStream tokens,\n                                                  AstNode parentNode )", "class_method_signature": "StandardDdlParser.parseCreateSchemaStatement( DdlTokenStream tokens,\n                                                  AstNode parentNode )", "testcase": false, "constructor": false}, {"identifier": "parseCreateAssertionStatement", "parameters": "( DdlTokenStream tokens,\n                                                     AstNode parentNode )", "modifiers": "protected", "return": "AstNode", "signature": "AstNode parseCreateAssertionStatement( DdlTokenStream tokens,\n                                                     AstNode parentNode )", "full_signature": "protected AstNode parseCreateAssertionStatement( DdlTokenStream tokens,\n                                                     AstNode parentNode )", "class_method_signature": "StandardDdlParser.parseCreateAssertionStatement( DdlTokenStream tokens,\n                                                     AstNode parentNode )", "testcase": false, "constructor": false}, {"identifier": "parseIgnorableStatement", "parameters": "( DdlTokenStream tokens,\n                                               String name,\n                                               AstNode parentNode )", "modifiers": "protected", "return": "AstNode", "signature": "AstNode parseIgnorableStatement( DdlTokenStream tokens,\n                                               String name,\n                                               AstNode parentNode )", "full_signature": "protected AstNode parseIgnorableStatement( DdlTokenStream tokens,\n                                               String name,\n                                               AstNode parentNode )", "class_method_signature": "StandardDdlParser.parseIgnorableStatement( DdlTokenStream tokens,\n                                               String name,\n                                               AstNode parentNode )", "testcase": false, "constructor": false}, {"identifier": "parseIgnorableStatement", "parameters": "( DdlTokenStream tokens,\n                                               String name,\n                                               AstNode parentNode,\n                                               String mixinType )", "modifiers": "protected", "return": "AstNode", "signature": "AstNode parseIgnorableStatement( DdlTokenStream tokens,\n                                               String name,\n                                               AstNode parentNode,\n                                               String mixinType )", "full_signature": "protected AstNode parseIgnorableStatement( DdlTokenStream tokens,\n                                               String name,\n                                               AstNode parentNode,\n                                               String mixinType )", "class_method_signature": "StandardDdlParser.parseIgnorableStatement( DdlTokenStream tokens,\n                                               String name,\n                                               AstNode parentNode,\n                                               String mixinType )", "testcase": false, "constructor": false}, {"identifier": "parseStatement", "parameters": "( DdlTokenStream tokens,\n                                      String[] stmt_start_phrase,\n                                      AstNode parentNode,\n                                      String mixinType )", "modifiers": "protected", "return": "AstNode", "signature": "AstNode parseStatement( DdlTokenStream tokens,\n                                      String[] stmt_start_phrase,\n                                      AstNode parentNode,\n                                      String mixinType )", "full_signature": "protected AstNode parseStatement( DdlTokenStream tokens,\n                                      String[] stmt_start_phrase,\n                                      AstNode parentNode,\n                                      String mixinType )", "class_method_signature": "StandardDdlParser.parseStatement( DdlTokenStream tokens,\n                                      String[] stmt_start_phrase,\n                                      AstNode parentNode,\n                                      String mixinType )", "testcase": false, "constructor": false}, {"identifier": "unknownTerminatedNode", "parameters": "( AstNode parentNode )", "modifiers": "public final", "return": "AstNode", "signature": "AstNode unknownTerminatedNode( AstNode parentNode )", "full_signature": "public final AstNode unknownTerminatedNode( AstNode parentNode )", "class_method_signature": "StandardDdlParser.unknownTerminatedNode( AstNode parentNode )", "testcase": false, "constructor": false}, {"identifier": "missingTerminatorNode", "parameters": "( AstNode parentNode )", "modifiers": "public final", "return": "AstNode", "signature": "AstNode missingTerminatorNode( AstNode parentNode )", "full_signature": "public final AstNode missingTerminatorNode( AstNode parentNode )", "class_method_signature": "StandardDdlParser.missingTerminatorNode( AstNode parentNode )", "testcase": false, "constructor": false}, {"identifier": "isMissingTerminatorNode", "parameters": "( AstNode node )", "modifiers": "public final", "return": "boolean", "signature": "boolean isMissingTerminatorNode( AstNode node )", "full_signature": "public final boolean isMissingTerminatorNode( AstNode node )", "class_method_signature": "StandardDdlParser.isMissingTerminatorNode( AstNode node )", "testcase": false, "constructor": false}, {"identifier": "isValidSchemaChild", "parameters": "( AstNode node )", "modifiers": "public final", "return": "boolean", "signature": "boolean isValidSchemaChild( AstNode node )", "full_signature": "public final boolean isValidSchemaChild( AstNode node )", "class_method_signature": "StandardDdlParser.isValidSchemaChild( AstNode node )", "testcase": false, "constructor": false}, {"identifier": "setAsSchemaChildNode", "parameters": "( AstNode statementNode,\n                                               boolean stmtIsMissingTerminator )", "modifiers": "public final", "return": "boolean", "signature": "boolean setAsSchemaChildNode( AstNode statementNode,\n                                               boolean stmtIsMissingTerminator )", "full_signature": "public final boolean setAsSchemaChildNode( AstNode statementNode,\n                                               boolean stmtIsMissingTerminator )", "class_method_signature": "StandardDdlParser.setAsSchemaChildNode( AstNode statementNode,\n                                               boolean stmtIsMissingTerminator )", "testcase": false, "constructor": false}, {"identifier": "getTerminator", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getTerminator()", "full_signature": "protected String getTerminator()", "class_method_signature": "StandardDdlParser.getTerminator()", "testcase": false, "constructor": false}, {"identifier": "setTerminator", "parameters": "( String terminator )", "modifiers": "protected", "return": "boolean", "signature": "boolean setTerminator( String terminator )", "full_signature": "protected boolean setTerminator( String terminator )", "class_method_signature": "StandardDdlParser.setTerminator( String terminator )", "testcase": false, "constructor": false}, {"identifier": "getValidSchemaChildTypes", "parameters": "()", "modifiers": "protected", "return": "String[]", "signature": "String[] getValidSchemaChildTypes()", "full_signature": "protected String[] getValidSchemaChildTypes()", "class_method_signature": "StandardDdlParser.getValidSchemaChildTypes()", "testcase": false, "constructor": false}, {"identifier": "isComment", "parameters": "( DdlTokenStream tokens )", "modifiers": "protected", "return": "boolean", "signature": "boolean isComment( DdlTokenStream tokens )", "full_signature": "protected boolean isComment( DdlTokenStream tokens )", "class_method_signature": "StandardDdlParser.isComment( DdlTokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "consumeComment", "parameters": "( DdlTokenStream tokens )", "modifiers": "protected", "return": "boolean", "signature": "boolean consumeComment( DdlTokenStream tokens )", "full_signature": "protected boolean consumeComment( DdlTokenStream tokens )", "class_method_signature": "StandardDdlParser.consumeComment( DdlTokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "isTableConstraint", "parameters": "( DdlTokenStream tokens )", "modifiers": "protected", "return": "boolean", "signature": "boolean isTableConstraint( DdlTokenStream tokens )", "full_signature": "protected boolean isTableConstraint( DdlTokenStream tokens )", "class_method_signature": "StandardDdlParser.isTableConstraint( DdlTokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "isColumnDefinitionStart", "parameters": "( DdlTokenStream tokens )", "modifiers": "protected", "return": "boolean", "signature": "boolean isColumnDefinitionStart( DdlTokenStream tokens )", "full_signature": "protected boolean isColumnDefinitionStart( DdlTokenStream tokens )", "class_method_signature": "StandardDdlParser.isColumnDefinitionStart( DdlTokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "getDataTypeStartWords", "parameters": "()", "modifiers": "protected", "return": "List<String>", "signature": "List<String> getDataTypeStartWords()", "full_signature": "protected List<String> getDataTypeStartWords()", "class_method_signature": "StandardDdlParser.getDataTypeStartWords()", "testcase": false, "constructor": false}, {"identifier": "getCustomDataTypeStartWords", "parameters": "()", "modifiers": "protected", "return": "List<String>", "signature": "List<String> getCustomDataTypeStartWords()", "full_signature": "protected List<String> getCustomDataTypeStartWords()", "class_method_signature": "StandardDdlParser.getCustomDataTypeStartWords()", "testcase": false, "constructor": false}, {"identifier": "parseName", "parameters": "( DdlTokenStream tokens )", "modifiers": "protected", "return": "String", "signature": "String parseName( DdlTokenStream tokens )", "full_signature": "protected String parseName( DdlTokenStream tokens )", "class_method_signature": "StandardDdlParser.parseName( DdlTokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "consumeIdentifier", "parameters": "( DdlTokenStream tokens )", "modifiers": "protected", "return": "String", "signature": "String consumeIdentifier( DdlTokenStream tokens )", "full_signature": "protected String consumeIdentifier( DdlTokenStream tokens )", "class_method_signature": "StandardDdlParser.consumeIdentifier( DdlTokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "isTerminator", "parameters": "( DdlTokenStream tokens )", "modifiers": "protected", "return": "boolean", "signature": "boolean isTerminator( DdlTokenStream tokens )", "full_signature": "protected boolean isTerminator( DdlTokenStream tokens )", "class_method_signature": "StandardDdlParser.isTerminator( DdlTokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseColumnNameList", "parameters": "( DdlTokenStream tokens,\n                                           AstNode parentNode,\n                                           String referenceType )", "modifiers": "protected", "return": "boolean", "signature": "boolean parseColumnNameList( DdlTokenStream tokens,\n                                           AstNode parentNode,\n                                           String referenceType )", "full_signature": "protected boolean parseColumnNameList( DdlTokenStream tokens,\n                                           AstNode parentNode,\n                                           String referenceType )", "class_method_signature": "StandardDdlParser.parseColumnNameList( DdlTokenStream tokens,\n                                           AstNode parentNode,\n                                           String referenceType )", "testcase": false, "constructor": false}, {"identifier": "parseNameList", "parameters": "( DdlTokenStream tokens )", "modifiers": "protected", "return": "List<String>", "signature": "List<String> parseNameList( DdlTokenStream tokens )", "full_signature": "protected List<String> parseNameList( DdlTokenStream tokens )", "class_method_signature": "StandardDdlParser.parseNameList( DdlTokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseUntilTerminator", "parameters": "( DdlTokenStream tokens )", "modifiers": "protected", "return": "String", "signature": "String parseUntilTerminator( DdlTokenStream tokens )", "full_signature": "protected String parseUntilTerminator( DdlTokenStream tokens )", "class_method_signature": "StandardDdlParser.parseUntilTerminator( DdlTokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseUntilTerminatorIgnoreEmbeddedStatements", "parameters": "( DdlTokenStream tokens )", "modifiers": "protected", "return": "String", "signature": "String parseUntilTerminatorIgnoreEmbeddedStatements( DdlTokenStream tokens )", "full_signature": "protected String parseUntilTerminatorIgnoreEmbeddedStatements( DdlTokenStream tokens )", "class_method_signature": "StandardDdlParser.parseUntilTerminatorIgnoreEmbeddedStatements( DdlTokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseUntilSemiColon", "parameters": "( DdlTokenStream tokens )", "modifiers": "protected", "return": "String", "signature": "String parseUntilSemiColon( DdlTokenStream tokens )", "full_signature": "protected String parseUntilSemiColon( DdlTokenStream tokens )", "class_method_signature": "StandardDdlParser.parseUntilSemiColon( DdlTokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseUntilCommaOrTerminator", "parameters": "( DdlTokenStream tokens )", "modifiers": "protected", "return": "String", "signature": "String parseUntilCommaOrTerminator( DdlTokenStream tokens )", "full_signature": "protected String parseUntilCommaOrTerminator( DdlTokenStream tokens )", "class_method_signature": "StandardDdlParser.parseUntilCommaOrTerminator( DdlTokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "doUseTerminator", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean doUseTerminator()", "full_signature": "public boolean doUseTerminator()", "class_method_signature": "StandardDdlParser.doUseTerminator()", "testcase": false, "constructor": false}, {"identifier": "setDoUseTerminator", "parameters": "( boolean useTerminator )", "modifiers": "public", "return": "void", "signature": "void setDoUseTerminator( boolean useTerminator )", "full_signature": "public void setDoUseTerminator( boolean useTerminator )", "class_method_signature": "StandardDdlParser.setDoUseTerminator( boolean useTerminator )", "testcase": false, "constructor": false}, {"identifier": "getStatementTypeName", "parameters": "( String[] stmtPhrase )", "modifiers": "public", "return": "String", "signature": "String getStatementTypeName( String[] stmtPhrase )", "full_signature": "public String getStatementTypeName( String[] stmtPhrase )", "class_method_signature": "StandardDdlParser.getStatementTypeName( String[] stmtPhrase )", "testcase": false, "constructor": false}, {"identifier": "parseDefaultClause", "parameters": "( DdlTokenStream tokens,\n                                          AstNode columnNode )", "modifiers": "protected", "return": "boolean", "signature": "boolean parseDefaultClause( DdlTokenStream tokens,\n                                          AstNode columnNode )", "full_signature": "protected boolean parseDefaultClause( DdlTokenStream tokens,\n                                          AstNode columnNode )", "class_method_signature": "StandardDdlParser.parseDefaultClause( DdlTokenStream tokens,\n                                          AstNode columnNode )", "testcase": false, "constructor": false}, {"identifier": "parseCollateClause", "parameters": "( DdlTokenStream tokens,\n                                          AstNode columnNode )", "modifiers": "protected", "return": "boolean", "signature": "boolean parseCollateClause( DdlTokenStream tokens,\n                                          AstNode columnNode )", "full_signature": "protected boolean parseCollateClause( DdlTokenStream tokens,\n                                          AstNode columnNode )", "class_method_signature": "StandardDdlParser.parseCollateClause( DdlTokenStream tokens,\n                                          AstNode columnNode )", "testcase": false, "constructor": false}, {"identifier": "integer", "parameters": "( String value )", "modifiers": "protected", "return": "int", "signature": "int integer( String value )", "full_signature": "protected int integer( String value )", "class_method_signature": "StandardDdlParser.integer( String value )", "testcase": false, "constructor": false}, {"identifier": "getCurrentMarkedPosition", "parameters": "()", "modifiers": "public final", "return": "Position", "signature": "Position getCurrentMarkedPosition()", "full_signature": "public final Position getCurrentMarkedPosition()", "class_method_signature": "StandardDdlParser.getCurrentMarkedPosition()", "testcase": false, "constructor": false}, {"identifier": "markStartOfStatement", "parameters": "( DdlTokenStream tokens )", "modifiers": "public final", "return": "void", "signature": "void markStartOfStatement( DdlTokenStream tokens )", "full_signature": "public final void markStartOfStatement( DdlTokenStream tokens )", "class_method_signature": "StandardDdlParser.markStartOfStatement( DdlTokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "markEndOfStatement", "parameters": "( DdlTokenStream tokens,\n                                          AstNode statementNode )", "modifiers": "public final", "return": "void", "signature": "void markEndOfStatement( DdlTokenStream tokens,\n                                          AstNode statementNode )", "full_signature": "public final void markEndOfStatement( DdlTokenStream tokens,\n                                          AstNode statementNode )", "class_method_signature": "StandardDdlParser.markEndOfStatement( DdlTokenStream tokens,\n                                          AstNode statementNode )", "testcase": false, "constructor": false}, {"identifier": "postProcess", "parameters": "( AstNode rootNode )", "modifiers": "@Override public", "return": "void", "signature": "void postProcess( AstNode rootNode )", "full_signature": "@Override public void postProcess( AstNode rootNode )", "class_method_signature": "StandardDdlParser.postProcess( AstNode rootNode )", "testcase": false, "constructor": false}, {"identifier": "testPrint", "parameters": "( String str )", "modifiers": "protected", "return": "void", "signature": "void testPrint( String str )", "full_signature": "protected void testPrint( String str )", "class_method_signature": "StandardDdlParser.testPrint( String str )", "testcase": false, "constructor": false}, {"identifier": "isTestMode", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isTestMode()", "full_signature": "public boolean isTestMode()", "class_method_signature": "StandardDdlParser.isTestMode()", "testcase": false, "constructor": false}, {"identifier": "setTestMode", "parameters": "( boolean testMode )", "modifiers": "public", "return": "void", "signature": "void setTestMode( boolean testMode )", "full_signature": "public void setTestMode( boolean testMode )", "class_method_signature": "StandardDdlParser.setTestMode( boolean testMode )", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getId()", "full_signature": "@Override public String getId()", "class_method_signature": "StandardDdlParser.getId()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "StandardDdlParser.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "( Object obj )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals( Object obj )", "full_signature": "@Override public boolean equals( Object obj )", "class_method_signature": "StandardDdlParser.equals( Object obj )", "testcase": false, "constructor": false}], "file": "sequencers/modeshape-sequencer-ddl/src/main/java/org/modeshape/sequencer/ddl/StandardDdlParser.java"}, "focal_method": {"identifier": "parseCreateTableStatement", "parameters": "( DdlTokenStream tokens,\n                                                 AstNode parentNode )", "modifiers": "protected", "return": "AstNode", "body": "protected AstNode parseCreateTableStatement( DdlTokenStream tokens,\n                                                 AstNode parentNode ) throws ParsingException {\n        assert tokens != null;\n        assert parentNode != null;\n\n        markStartOfStatement(tokens);\n\n        tokens.consume(CREATE); // CREATE\n        String temporaryValue = null;\n        if (tokens.canConsume(\"LOCAL\")) {\n            tokens.consume(\"TEMPORARY\");\n            temporaryValue = \"LOCAL\";\n        } else if (tokens.canConsume(\"GLOBAL\")) {\n            tokens.consume(\"TEMPORARY\");\n            temporaryValue = \"GLOBAL\";\n        }\n\n        tokens.consume(TABLE);\n\n        String tableName = parseName(tokens);\n\n        AstNode tableNode = nodeFactory().node(tableName, parentNode, TYPE_CREATE_TABLE_STATEMENT);\n\n        if (temporaryValue != null) {\n            tableNode.setProperty(TEMPORARY, temporaryValue);\n        }\n\n        // System.out.println(\"  >> PARSING CREATE TABLE >>  Name = \" + tableName);\n        parseColumnsAndConstraints(tokens, tableNode);\n\n        parseCreateTableOptions(tokens, tableNode);\n\n        markEndOfStatement(tokens, tableNode);\n\n        return tableNode;\n    }", "signature": "AstNode parseCreateTableStatement( DdlTokenStream tokens,\n                                                 AstNode parentNode )", "full_signature": "protected AstNode parseCreateTableStatement( DdlTokenStream tokens,\n                                                 AstNode parentNode )", "class_method_signature": "StandardDdlParser.parseCreateTableStatement( DdlTokenStream tokens,\n                                                 AstNode parentNode )", "testcase": false, "constructor": false, "invocations": ["markStartOfStatement", "consume", "canConsume", "consume", "canConsume", "consume", "consume", "parseName", "node", "nodeFactory", "setProperty", "parseColumnsAndConstraints", "parseCreateTableOptions", "markEndOfStatement"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}