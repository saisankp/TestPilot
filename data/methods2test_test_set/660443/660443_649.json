{"test_class": {"identifier": "ChemicalFiltersTest", "superclass": "", "interfaces": "", "fields": [], "file": "legacy/src/test/java/org/openscience/cdk/smsd/filters/ChemicalFiltersTest.java"}, "test_case": {"identifier": "testSortMapByValueInAccendingOrder", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSortMapByValueInAccendingOrder() {\n\n        Map<Integer, Double> map = new TreeMap<Integer, Double>();\n        map.put(1, 3.0);\n        map.put(2, 2.0);\n        map.put(3, 1.0);\n        map.put(4, 4.0);\n        Map<Integer, Double> expResult = new TreeMap<Integer, Double>();\n        expResult.put(3, 1.0);\n        expResult.put(2, 2.0);\n        expResult.put(1, 3.0);\n        expResult.put(4, 4.0);\n\n        Map<Integer, Double> result = ChemicalFilters.sortMapByValueInAccendingOrder(map);\n        assertEquals(expResult, result);\n    }", "signature": "void testSortMapByValueInAccendingOrder()", "full_signature": "@Test public void testSortMapByValueInAccendingOrder()", "class_method_signature": "ChemicalFiltersTest.testSortMapByValueInAccendingOrder()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "put", "put", "put", "put", "put", "sortMapByValueInAccendingOrder", "assertEquals"]}, "focal_class": {"identifier": "ChemicalFilters", "superclass": "", "interfaces": "", "fields": [{"original_string": "private List<Map<Integer, Integer>> allMCS        = null;", "modifier": "private", "type": "List<Map<Integer, Integer>>", "declarator": "allMCS        = null", "var_name": "allMCS"}, {"original_string": "private Map<Integer, Integer>       firstSolution = null;", "modifier": "private", "type": "Map<Integer, Integer>", "declarator": "firstSolution = null", "var_name": "firstSolution"}, {"original_string": "private List<Map<IAtom, IAtom>>     allAtomMCS    = null;", "modifier": "private", "type": "List<Map<IAtom, IAtom>>", "declarator": "allAtomMCS    = null", "var_name": "allAtomMCS"}, {"original_string": "private Map<IAtom, IAtom>           firstAtomMCS  = null;", "modifier": "private", "type": "Map<IAtom, IAtom>", "declarator": "firstAtomMCS  = null", "var_name": "firstAtomMCS"}, {"original_string": "private List<Double>                stereoScore   = null;", "modifier": "private", "type": "List<Double>", "declarator": "stereoScore   = null", "var_name": "stereoScore"}, {"original_string": "private List<Integer>               fragmentSize  = null;", "modifier": "private", "type": "List<Integer>", "declarator": "fragmentSize  = null", "var_name": "fragmentSize"}, {"original_string": "private List<Double>                bEnergies     = null;", "modifier": "private", "type": "List<Double>", "declarator": "bEnergies     = null", "var_name": "bEnergies"}, {"original_string": "private IAtomContainer              rMol          = null;", "modifier": "private", "type": "IAtomContainer", "declarator": "rMol          = null", "var_name": "rMol"}, {"original_string": "private IAtomContainer              pMol          = null;", "modifier": "private", "type": "IAtomContainer", "declarator": "pMol          = null", "var_name": "pMol"}], "methods": [{"identifier": "ChemicalFilters", "parameters": "(List<Map<Integer, Integer>> allMCS, List<Map<IAtom, IAtom>> allAtomMCS,\n            Map<Integer, Integer> firstSolution, Map<IAtom, IAtom> firstAtomMCS, IAtomContainer sourceMol,\n            IAtomContainer targetMol)", "modifiers": "public", "return": "", "signature": " ChemicalFilters(List<Map<Integer, Integer>> allMCS, List<Map<IAtom, IAtom>> allAtomMCS,\n            Map<Integer, Integer> firstSolution, Map<IAtom, IAtom> firstAtomMCS, IAtomContainer sourceMol,\n            IAtomContainer targetMol)", "full_signature": "public  ChemicalFilters(List<Map<Integer, Integer>> allMCS, List<Map<IAtom, IAtom>> allAtomMCS,\n            Map<Integer, Integer> firstSolution, Map<IAtom, IAtom> firstAtomMCS, IAtomContainer sourceMol,\n            IAtomContainer targetMol)", "class_method_signature": "ChemicalFilters.ChemicalFilters(List<Map<Integer, Integer>> allMCS, List<Map<IAtom, IAtom>> allAtomMCS,\n            Map<Integer, Integer> firstSolution, Map<IAtom, IAtom> firstAtomMCS, IAtomContainer sourceMol,\n            IAtomContainer targetMol)", "testcase": false, "constructor": true}, {"identifier": "clear", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void clear()", "full_signature": "private void clear()", "class_method_signature": "ChemicalFilters.clear()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "(Map<Integer, Map<Integer, Integer>> sortedAllMCS,\n            Map<Integer, Map<IAtom, IAtom>> sortedAllAtomMCS, Map<Integer, Double> stereoScoreMap,\n            Map<Integer, Integer> fragmentScoreMap, Map<Integer, Double> energySelectionMap)", "modifiers": "private", "return": "void", "signature": "void clear(Map<Integer, Map<Integer, Integer>> sortedAllMCS,\n            Map<Integer, Map<IAtom, IAtom>> sortedAllAtomMCS, Map<Integer, Double> stereoScoreMap,\n            Map<Integer, Integer> fragmentScoreMap, Map<Integer, Double> energySelectionMap)", "full_signature": "private void clear(Map<Integer, Map<Integer, Integer>> sortedAllMCS,\n            Map<Integer, Map<IAtom, IAtom>> sortedAllAtomMCS, Map<Integer, Double> stereoScoreMap,\n            Map<Integer, Integer> fragmentScoreMap, Map<Integer, Double> energySelectionMap)", "class_method_signature": "ChemicalFilters.clear(Map<Integer, Map<Integer, Integer>> sortedAllMCS,\n            Map<Integer, Map<IAtom, IAtom>> sortedAllAtomMCS, Map<Integer, Double> stereoScoreMap,\n            Map<Integer, Integer> fragmentScoreMap, Map<Integer, Double> energySelectionMap)", "testcase": false, "constructor": false}, {"identifier": "addSolution", "parameters": "(int counter, int key, Map<Integer, Map<IAtom, IAtom>> allFragmentAtomMCS,\n            Map<Integer, Map<Integer, Integer>> allFragmentMCS, Map<Integer, Double> stereoScoreMap,\n            Map<Integer, Double> energyScoreMap, Map<Integer, Integer> fragmentScoreMap)", "modifiers": "private", "return": "void", "signature": "void addSolution(int counter, int key, Map<Integer, Map<IAtom, IAtom>> allFragmentAtomMCS,\n            Map<Integer, Map<Integer, Integer>> allFragmentMCS, Map<Integer, Double> stereoScoreMap,\n            Map<Integer, Double> energyScoreMap, Map<Integer, Integer> fragmentScoreMap)", "full_signature": "private void addSolution(int counter, int key, Map<Integer, Map<IAtom, IAtom>> allFragmentAtomMCS,\n            Map<Integer, Map<Integer, Integer>> allFragmentMCS, Map<Integer, Double> stereoScoreMap,\n            Map<Integer, Double> energyScoreMap, Map<Integer, Integer> fragmentScoreMap)", "class_method_signature": "ChemicalFilters.addSolution(int counter, int key, Map<Integer, Map<IAtom, IAtom>> allFragmentAtomMCS,\n            Map<Integer, Map<Integer, Integer>> allFragmentMCS, Map<Integer, Double> stereoScoreMap,\n            Map<Integer, Double> energyScoreMap, Map<Integer, Integer> fragmentScoreMap)", "testcase": false, "constructor": false}, {"identifier": "initializeMaps", "parameters": "(Map<Integer, Map<Integer, Integer>> sortedAllMCS,\n            Map<Integer, Map<IAtom, IAtom>> sortedAllAtomMCS, Map<Integer, Double> stereoScoreMap,\n            Map<Integer, Integer> fragmentScoreMap, Map<Integer, Double> energySelectionMap)", "modifiers": "private", "return": "void", "signature": "void initializeMaps(Map<Integer, Map<Integer, Integer>> sortedAllMCS,\n            Map<Integer, Map<IAtom, IAtom>> sortedAllAtomMCS, Map<Integer, Double> stereoScoreMap,\n            Map<Integer, Integer> fragmentScoreMap, Map<Integer, Double> energySelectionMap)", "full_signature": "private void initializeMaps(Map<Integer, Map<Integer, Integer>> sortedAllMCS,\n            Map<Integer, Map<IAtom, IAtom>> sortedAllAtomMCS, Map<Integer, Double> stereoScoreMap,\n            Map<Integer, Integer> fragmentScoreMap, Map<Integer, Double> energySelectionMap)", "class_method_signature": "ChemicalFilters.initializeMaps(Map<Integer, Map<Integer, Integer>> sortedAllMCS,\n            Map<Integer, Map<IAtom, IAtom>> sortedAllAtomMCS, Map<Integer, Double> stereoScoreMap,\n            Map<Integer, Integer> fragmentScoreMap, Map<Integer, Double> energySelectionMap)", "testcase": false, "constructor": false}, {"identifier": "sortResultsByStereoAndBondMatch", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void sortResultsByStereoAndBondMatch()", "full_signature": "public synchronized void sortResultsByStereoAndBondMatch()", "class_method_signature": "ChemicalFilters.sortResultsByStereoAndBondMatch()", "testcase": false, "constructor": false}, {"identifier": "sortResultsByFragments", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void sortResultsByFragments()", "full_signature": "public synchronized void sortResultsByFragments()", "class_method_signature": "ChemicalFilters.sortResultsByFragments()", "testcase": false, "constructor": false}, {"identifier": "sortResultsByEnergies", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void sortResultsByEnergies()", "full_signature": "public synchronized void sortResultsByEnergies()", "class_method_signature": "ChemicalFilters.sortResultsByEnergies()", "testcase": false, "constructor": false}, {"identifier": "makeBondMapsOfAtomMaps", "parameters": "(IAtomContainer ac1, IAtomContainer ac2,\n            Map<Integer, Integer> mappings)", "modifiers": "private", "return": "Map<IBond, IBond>", "signature": "Map<IBond, IBond> makeBondMapsOfAtomMaps(IAtomContainer ac1, IAtomContainer ac2,\n            Map<Integer, Integer> mappings)", "full_signature": "private Map<IBond, IBond> makeBondMapsOfAtomMaps(IAtomContainer ac1, IAtomContainer ac2,\n            Map<Integer, Integer> mappings)", "class_method_signature": "ChemicalFilters.makeBondMapsOfAtomMaps(IAtomContainer ac1, IAtomContainer ac2,\n            Map<Integer, Integer> mappings)", "testcase": false, "constructor": false}, {"identifier": "getMappedMoleculeFragmentSize", "parameters": "(Map<IAtom, IAtom> mcsAtomSolution)", "modifiers": "private synchronized", "return": "int", "signature": "int getMappedMoleculeFragmentSize(Map<IAtom, IAtom> mcsAtomSolution)", "full_signature": "private synchronized int getMappedMoleculeFragmentSize(Map<IAtom, IAtom> mcsAtomSolution)", "class_method_signature": "ChemicalFilters.getMappedMoleculeFragmentSize(Map<IAtom, IAtom> mcsAtomSolution)", "testcase": false, "constructor": false}, {"identifier": "getMappedMoleculeEnergies", "parameters": "(Map<Integer, Integer> mcsAtomSolution)", "modifiers": "private synchronized", "return": "Double", "signature": "Double getMappedMoleculeEnergies(Map<Integer, Integer> mcsAtomSolution)", "full_signature": "private synchronized Double getMappedMoleculeEnergies(Map<Integer, Integer> mcsAtomSolution)", "class_method_signature": "ChemicalFilters.getMappedMoleculeEnergies(Map<Integer, Integer> mcsAtomSolution)", "testcase": false, "constructor": false}, {"identifier": "sortMapByValueInAccendingOrder", "parameters": "(Map<Integer, Double> map)", "modifiers": "static", "return": "Map<Integer, Double>", "signature": "Map<Integer, Double> sortMapByValueInAccendingOrder(Map<Integer, Double> map)", "full_signature": "static Map<Integer, Double> sortMapByValueInAccendingOrder(Map<Integer, Double> map)", "class_method_signature": "ChemicalFilters.sortMapByValueInAccendingOrder(Map<Integer, Double> map)", "testcase": false, "constructor": false}, {"identifier": "sortMapByValueInDecendingOrder", "parameters": "(Map<Integer, Double> map)", "modifiers": "static", "return": "Map<Integer, Double>", "signature": "Map<Integer, Double> sortMapByValueInDecendingOrder(Map<Integer, Double> map)", "full_signature": "static Map<Integer, Double> sortMapByValueInDecendingOrder(Map<Integer, Double> map)", "class_method_signature": "ChemicalFilters.sortMapByValueInDecendingOrder(Map<Integer, Double> map)", "testcase": false, "constructor": false}, {"identifier": "getSortedEnergy", "parameters": "()", "modifiers": "public", "return": "List<Double>", "signature": "List<Double> getSortedEnergy()", "full_signature": "public List<Double> getSortedEnergy()", "class_method_signature": "ChemicalFilters.getSortedEnergy()", "testcase": false, "constructor": false}, {"identifier": "getSortedFragment", "parameters": "()", "modifiers": "public", "return": "List<Integer>", "signature": "List<Integer> getSortedFragment()", "full_signature": "public List<Integer> getSortedFragment()", "class_method_signature": "ChemicalFilters.getSortedFragment()", "testcase": false, "constructor": false}, {"identifier": "getStereoMatches", "parameters": "()", "modifiers": "public", "return": "List<Double>", "signature": "List<Double> getStereoMatches()", "full_signature": "public List<Double> getStereoMatches()", "class_method_signature": "ChemicalFilters.getStereoMatches()", "testcase": false, "constructor": false}, {"identifier": "getMappedFragment", "parameters": "(IAtomContainer molecule, Collection<IAtom> atomsMCS)", "modifiers": "private", "return": "List<Object>", "signature": "List<Object> getMappedFragment(IAtomContainer molecule, Collection<IAtom> atomsMCS)", "full_signature": "private List<Object> getMappedFragment(IAtomContainer molecule, Collection<IAtom> atomsMCS)", "class_method_signature": "ChemicalFilters.getMappedFragment(IAtomContainer molecule, Collection<IAtom> atomsMCS)", "testcase": false, "constructor": false}, {"identifier": "getAtomScore", "parameters": "(double score, Map<IAtom, IAtom> atomMapMCS, IAtomContainer reactant,\n            IAtomContainer product)", "modifiers": "private", "return": "double", "signature": "double getAtomScore(double score, Map<IAtom, IAtom> atomMapMCS, IAtomContainer reactant,\n            IAtomContainer product)", "full_signature": "private double getAtomScore(double score, Map<IAtom, IAtom> atomMapMCS, IAtomContainer reactant,\n            IAtomContainer product)", "class_method_signature": "ChemicalFilters.getAtomScore(double score, Map<IAtom, IAtom> atomMapMCS, IAtomContainer reactant,\n            IAtomContainer product)", "testcase": false, "constructor": false}, {"identifier": "getBondScore", "parameters": "(double score, Map<IBond, IBond> bondMaps)", "modifiers": "private", "return": "double", "signature": "double getBondScore(double score, Map<IBond, IBond> bondMaps)", "full_signature": "private double getBondScore(double score, Map<IBond, IBond> bondMaps)", "class_method_signature": "ChemicalFilters.getBondScore(double score, Map<IBond, IBond> bondMaps)", "testcase": false, "constructor": false}, {"identifier": "getBondFormalChargeMatches", "parameters": "(IBond rBond, IBond pBond)", "modifiers": "private", "return": "double", "signature": "double getBondFormalChargeMatches(IBond rBond, IBond pBond)", "full_signature": "private double getBondFormalChargeMatches(IBond rBond, IBond pBond)", "class_method_signature": "ChemicalFilters.getBondFormalChargeMatches(IBond rBond, IBond pBond)", "testcase": false, "constructor": false}, {"identifier": "getBondTypeMatches", "parameters": "(IBond queryBond, IBond targetBond)", "modifiers": "private", "return": "double", "signature": "double getBondTypeMatches(IBond queryBond, IBond targetBond)", "full_signature": "private double getBondTypeMatches(IBond queryBond, IBond targetBond)", "class_method_signature": "ChemicalFilters.getBondTypeMatches(IBond queryBond, IBond targetBond)", "testcase": false, "constructor": false}, {"identifier": "getRingMatchScore", "parameters": "(List<Object> list)", "modifiers": "private", "return": "double", "signature": "double getRingMatchScore(List<Object> list)", "full_signature": "private double getRingMatchScore(List<Object> list)", "class_method_signature": "ChemicalFilters.getRingMatchScore(List<Object> list)", "testcase": false, "constructor": false}, {"identifier": "getEnergy", "parameters": "(IAtomContainer educt, IAtomContainer product)", "modifiers": "private", "return": "double", "signature": "double getEnergy(IAtomContainer educt, IAtomContainer product)", "full_signature": "private double getEnergy(IAtomContainer educt, IAtomContainer product)", "class_method_signature": "ChemicalFilters.getEnergy(IAtomContainer educt, IAtomContainer product)", "testcase": false, "constructor": false}, {"identifier": "getBondEnergy", "parameters": "(IBond bond, BondEnergies bondEnergy)", "modifiers": "private", "return": "double", "signature": "double getBondEnergy(IBond bond, BondEnergies bondEnergy)", "full_signature": "private double getBondEnergy(IBond bond, BondEnergies bondEnergy)", "class_method_signature": "ChemicalFilters.getBondEnergy(IBond bond, BondEnergies bondEnergy)", "testcase": false, "constructor": false}, {"identifier": "getRingMatch", "parameters": "(IRingSet rings, List<IAtom> atoms)", "modifiers": "private", "return": "double", "signature": "double getRingMatch(IRingSet rings, List<IAtom> atoms)", "full_signature": "private double getRingMatch(IRingSet rings, List<IAtom> atoms)", "class_method_signature": "ChemicalFilters.getRingMatch(IRingSet rings, List<IAtom> atoms)", "testcase": false, "constructor": false}, {"identifier": "getStereoBondChargeMatch", "parameters": "(Map<Integer, Double> stereoScoreMap,\n            Map<Integer, Map<Integer, Integer>> allStereoMCS, Map<Integer, Map<IAtom, IAtom>> allStereoAtomMCS)", "modifiers": "private", "return": "boolean", "signature": "boolean getStereoBondChargeMatch(Map<Integer, Double> stereoScoreMap,\n            Map<Integer, Map<Integer, Integer>> allStereoMCS, Map<Integer, Map<IAtom, IAtom>> allStereoAtomMCS)", "full_signature": "private boolean getStereoBondChargeMatch(Map<Integer, Double> stereoScoreMap,\n            Map<Integer, Map<Integer, Integer>> allStereoMCS, Map<Integer, Map<IAtom, IAtom>> allStereoAtomMCS)", "class_method_signature": "ChemicalFilters.getStereoBondChargeMatch(Map<Integer, Double> stereoScoreMap,\n            Map<Integer, Map<Integer, Integer>> allStereoMCS, Map<Integer, Map<IAtom, IAtom>> allStereoAtomMCS)", "testcase": false, "constructor": false}, {"identifier": "getfragmentCount", "parameters": "(IAtomContainer molecule)", "modifiers": "private", "return": "int", "signature": "int getfragmentCount(IAtomContainer molecule)", "full_signature": "private int getfragmentCount(IAtomContainer molecule)", "class_method_signature": "ChemicalFilters.getfragmentCount(IAtomContainer molecule)", "testcase": false, "constructor": false}, {"identifier": "convertOrder", "parameters": "(double srcOrder)", "modifiers": "public static", "return": "IBond.Order", "signature": "IBond.Order convertOrder(double srcOrder)", "full_signature": "public static IBond.Order convertOrder(double srcOrder)", "class_method_signature": "ChemicalFilters.convertOrder(double srcOrder)", "testcase": false, "constructor": false}, {"identifier": "convertBondOrder", "parameters": "(IBond bond)", "modifiers": "public static", "return": "int", "signature": "int convertBondOrder(IBond bond)", "full_signature": "public static int convertBondOrder(IBond bond)", "class_method_signature": "ChemicalFilters.convertBondOrder(IBond bond)", "testcase": false, "constructor": false}, {"identifier": "convertBondStereo", "parameters": "(IBond bond)", "modifiers": "public static", "return": "int", "signature": "int convertBondStereo(IBond bond)", "full_signature": "public static int convertBondStereo(IBond bond)", "class_method_signature": "ChemicalFilters.convertBondStereo(IBond bond)", "testcase": false, "constructor": false}, {"identifier": "convertStereo", "parameters": "(int stereoValue)", "modifiers": "public static", "return": "IBond.Stereo", "signature": "IBond.Stereo convertStereo(int stereoValue)", "full_signature": "public static IBond.Stereo convertStereo(int stereoValue)", "class_method_signature": "ChemicalFilters.convertStereo(int stereoValue)", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/org/openscience/cdk/smsd/filters/ChemicalFilters.java"}, "focal_method": {"identifier": "sortMapByValueInAccendingOrder", "parameters": "(Map<Integer, Double> map)", "modifiers": "static", "return": "Map<Integer, Double>", "body": "static Map<Integer, Double> sortMapByValueInAccendingOrder(Map<Integer, Double> map) {\n        List<Map.Entry<Integer, Double>> list = new LinkedList<Map.Entry<Integer, Double>>(map.entrySet());\n        // Sort the list using an annonymous inner class implementing Comparator for the compare method\n        Collections.sort(list, new Comparator<Map.Entry<Integer, Double>>() {\n\n            @Override\n            public int compare(Map.Entry<Integer, Double> entry, Map.Entry<Integer, Double> entry1) {\n                // Return 0 for eAtom match, -1 for less than and +1 for more then (Aceending Order Sort)\n                return (entry.getValue().equals(entry1.getValue()) ? 0\n                        : (entry.getValue() > entry1.getValue() ? 1 : -1));\n            }\n        });\n        // logger.info(list);\n        Map<Integer, Double> result = new LinkedHashMap<Integer, Double>();\n        for (Iterator<Map.Entry<Integer, Double>> it = list.iterator(); it.hasNext();) {\n            Map.Entry<Integer, Double> entry = it.next();\n            result.put(entry.getKey(), entry.getValue());\n        }\n        return result;\n    }", "signature": "Map<Integer, Double> sortMapByValueInAccendingOrder(Map<Integer, Double> map)", "full_signature": "static Map<Integer, Double> sortMapByValueInAccendingOrder(Map<Integer, Double> map)", "class_method_signature": "ChemicalFilters.sortMapByValueInAccendingOrder(Map<Integer, Double> map)", "testcase": false, "constructor": false, "invocations": ["entrySet", "sort", "equals", "getValue", "getValue", "getValue", "getValue", "iterator", "hasNext", "next", "put", "getKey", "getValue"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}