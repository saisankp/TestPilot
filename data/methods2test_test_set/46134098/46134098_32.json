{"test_class": {"identifier": "TestCSVFilter", "superclass": "", "interfaces": "", "fields": [], "file": "csv-res-filter/src/test/java/com/ibm/g11n/pipeline/resfilter/csv/TestCSVFilter.java"}, "test_case": {"identifier": "testParse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParse() {\n        TestResourceStringData[] expectedData = {\n                new TestResourceStringData(\"msg_hello\", \"Hello\", 1),\n                new TestResourceStringData(\"msg_bye\", \"Bye\", 2)\n        };\n\n        ResourceFilter filter = ResourceFilterFactory.getResourceFilter(CSVFilter.ID);\n        try (InputStream inStream = this.getClass().getResourceAsStream(\"/test.csv\")) {\n            LanguageBundle bundle = filter.parse(inStream, new FilterOptions(Locale.ENGLISH));\n            List<ResourceString> resStrings = bundle.getSortedResourceStrings();\n\n            assertEquals(\"Number of resource strings\", expectedData.length, resStrings.size());\n            int idx = 0;\n            for (ResourceString resString : resStrings) {\n                String key = resString.getKey();\n                String value = resString.getValue();\n                int seqNum = resString.getSequenceNumber();\n\n                TestResourceStringData expected = expectedData[idx++];\n\n                assertEquals(\"Resource key at index \" + idx, expected.key, key);\n                assertEquals(\"Resource value at index \" + idx, expected.value, value);\n                assertEquals(\"Resource sequence number at index \" + idx, expected.seq, seqNum);\n            }\n        } catch (IOException e) {\n            fail(e.getMessage());\n        } catch (ResourceFilterException e) {\n            fail(e.getMessage());\n        }\n    }", "signature": "void testParse()", "full_signature": "@Test public void testParse()", "class_method_signature": "TestCSVFilter.testParse()", "testcase": true, "constructor": false, "invocations": ["getResourceFilter", "getResourceAsStream", "getClass", "parse", "getSortedResourceStrings", "assertEquals", "size", "getKey", "getValue", "getSequenceNumber", "assertEquals", "assertEquals", "assertEquals", "fail", "getMessage", "fail", "getMessage"]}, "focal_class": {"identifier": "CSVFilter", "superclass": "extends ResourceFilter", "interfaces": "", "fields": [{"original_string": "public static final String ID = \"CSV\";", "modifier": "public static final", "type": "String", "declarator": "ID = \"CSV\"", "var_name": "ID"}, {"original_string": "public static final Type TYPE = Type.SINGLE;", "modifier": "public static final", "type": "Type", "declarator": "TYPE = Type.SINGLE", "var_name": "TYPE"}], "methods": [{"identifier": "parse", "parameters": "(InputStream inStream, FilterOptions options)", "modifiers": "@Override public", "return": "LanguageBundle", "signature": "LanguageBundle parse(InputStream inStream, FilterOptions options)", "full_signature": "@Override public LanguageBundle parse(InputStream inStream, FilterOptions options)", "class_method_signature": "CSVFilter.parse(InputStream inStream, FilterOptions options)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(OutputStream outStream, LanguageBundle languageBundle, FilterOptions options)", "modifiers": "@Override public", "return": "void", "signature": "void write(OutputStream outStream, LanguageBundle languageBundle, FilterOptions options)", "full_signature": "@Override public void write(OutputStream outStream, LanguageBundle languageBundle, FilterOptions options)", "class_method_signature": "CSVFilter.write(OutputStream outStream, LanguageBundle languageBundle, FilterOptions options)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "modifiers": "@Override public", "return": "void", "signature": "void merge(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "full_signature": "@Override public void merge(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "class_method_signature": "CSVFilter.merge(InputStream baseStream, OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "testcase": false, "constructor": false}], "file": "csv-res-filter/src/main/java/com/ibm/g11n/pipeline/resfilter/csv/CSVFilter.java"}, "focal_method": {"identifier": "parse", "parameters": "(InputStream inStream, FilterOptions options)", "modifiers": "@Override public", "return": "LanguageBundle", "body": "@Override\n    public LanguageBundle parse(InputStream inStream, FilterOptions options)\n            throws IOException, ResourceFilterException {\n        LanguageBundleBuilder bundleBuilder = new LanguageBundleBuilder(true);\n        CSVParser parser = CSVParser.parse(inStream, StandardCharsets.UTF_8,\n                CSVFormat.RFC4180.withHeader(\"key\", \"value\").withSkipHeaderRecord(true));\n        for (CSVRecord record : parser) {\n            String key = record.get(0);\n            String value = record.get(1);\n            bundleBuilder.addResourceString(key, value);\n        }\n        return bundleBuilder.build();\n    }", "signature": "LanguageBundle parse(InputStream inStream, FilterOptions options)", "full_signature": "@Override public LanguageBundle parse(InputStream inStream, FilterOptions options)", "class_method_signature": "CSVFilter.parse(InputStream inStream, FilterOptions options)", "testcase": false, "constructor": false, "invocations": ["parse", "withSkipHeaderRecord", "withHeader", "get", "get", "addResourceString", "build"]}, "repository": {"repo_id": 46134098, "url": "https://github.com/IBM-Cloud/gp-java-tools", "language": "Java", "is_fork": false, "fork_count": 16, "stargazer_count": 9, "size": 6216, "license": "licensed"}}