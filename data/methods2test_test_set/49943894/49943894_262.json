{"test_class": {"identifier": "TernaryTest", "superclass": "", "interfaces": "", "fields": [], "file": "utils/src/test/java/com/cloud/utils/TernaryTest.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEquals() {\n        Assert.assertEquals(new Ternary<String, String, String>(\"a\", \"b\", \"c\"), new Ternary<String, String, String>(\"a\", \"b\", \"c\"));\n        Assert.assertFalse(new Ternary<String, String, String>(\"a\", \"b\", \"c\").equals(new Ternary<String, String, String>(\"a\", \"b\", \"d\")));\n        Assert.assertFalse(new Ternary<String, String, String>(\"a\", \"b\", \"c\").equals(\"\"));\n        Assert.assertFalse(new Ternary<String, String, String>(\"a\", \"b\", \"c\").equals(null));\n        Assert.assertFalse(new Ternary<String, String, String>(\"a\", \"b\", \"c\").equals(new Pair<String, String>(\"a\", \"b\")));\n    }", "signature": "void testEquals()", "full_signature": "@Test public void testEquals()", "class_method_signature": "TernaryTest.testEquals()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "assertFalse", "equals", "assertFalse", "equals", "assertFalse", "equals", "assertFalse", "equals"]}, "focal_class": {"identifier": "Ternary", "superclass": "", "interfaces": "", "fields": [{"original_string": "private T t;", "modifier": "private", "type": "T", "declarator": "t", "var_name": "t"}, {"original_string": "private U u;", "modifier": "private", "type": "U", "declarator": "u", "var_name": "u"}, {"original_string": "private V v;", "modifier": "private", "type": "V", "declarator": "v", "var_name": "v"}], "methods": [{"identifier": "Ternary", "parameters": "(T t, U u, V v)", "modifiers": "public", "return": "", "signature": " Ternary(T t, U u, V v)", "full_signature": "public  Ternary(T t, U u, V v)", "class_method_signature": "Ternary.Ternary(T t, U u, V v)", "testcase": false, "constructor": true}, {"identifier": "first", "parameters": "()", "modifiers": "public", "return": "T", "signature": "T first()", "full_signature": "public T first()", "class_method_signature": "Ternary.first()", "testcase": false, "constructor": false}, {"identifier": "first", "parameters": "(T t)", "modifiers": "public", "return": "void", "signature": "void first(T t)", "full_signature": "public void first(T t)", "class_method_signature": "Ternary.first(T t)", "testcase": false, "constructor": false}, {"identifier": "second", "parameters": "()", "modifiers": "public", "return": "U", "signature": "U second()", "full_signature": "public U second()", "class_method_signature": "Ternary.second()", "testcase": false, "constructor": false}, {"identifier": "second", "parameters": "(U u)", "modifiers": "public", "return": "void", "signature": "void second(U u)", "full_signature": "public void second(U u)", "class_method_signature": "Ternary.second(U u)", "testcase": false, "constructor": false}, {"identifier": "third", "parameters": "()", "modifiers": "public", "return": "V", "signature": "V third()", "full_signature": "public V third()", "class_method_signature": "Ternary.third()", "testcase": false, "constructor": false}, {"identifier": "third", "parameters": "(V v)", "modifiers": "public", "return": "void", "signature": "void third(V v)", "full_signature": "public void third(V v)", "class_method_signature": "Ternary.third(V v)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override // Note: This means any two pairs with null for both values will match each // other but what can I do? This is due to stupid type erasure. public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override // Note: This means any two pairs with null for both values will match each // other but what can I do? This is due to stupid type erasure. public int hashCode()", "class_method_signature": "Ternary.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "Ternary.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Ternary.toString()", "testcase": false, "constructor": false}], "file": "utils/src/main/java/com/cloud/utils/Ternary.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean equals(Object obj) {\n        if (!(obj instanceof Ternary)) {\n            return false;\n        }\n        Ternary<?, ?, ?> that = (Ternary<?, ?, ?>)obj;\n        return (t != null ? t.equals(that.t) : that.t == null) && (u != null ? u.equals(that.u) : that.u == null) && (v != null ? v.equals(that.v) : that.v == null);\n    }", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "Ternary.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["equals", "equals", "equals"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}