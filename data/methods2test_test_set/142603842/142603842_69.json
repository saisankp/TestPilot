{"test_class": {"identifier": "PortableLocationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final PortableLocation portableLocation = new PortableLocation(\n            987,\n            BigDecimal.ONE,\n            BigDecimal.TEN,\n            \"Some Location\");", "modifier": "private final", "type": "PortableLocation", "declarator": "portableLocation = new PortableLocation(\n            987,\n            BigDecimal.ONE,\n            BigDecimal.TEN,\n            \"Some Location\")", "var_name": "portableLocation"}, {"original_string": "private JacksonTester<PortableLocation> json;", "modifier": "private", "type": "JacksonTester<PortableLocation>", "declarator": "json", "var_name": "json"}], "file": "optaweb-vehicle-routing-backend/src/test/java/org/optaweb/vehiclerouting/plugin/websocket/PortableLocationTest.java"}, "test_case": {"identifier": "fromLocation", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void fromLocation() {\n        Location location = new Location(17, Coordinates.valueOf(5.1, -0.0007), \"Hello, world!\");\n        PortableLocation portableLocation = PortableLocation.fromLocation(location);\n        assertThat(portableLocation.getId()).isEqualTo(location.id());\n        assertThat(portableLocation.getLatitude()).isEqualTo(location.coordinates().latitude());\n        assertThat(portableLocation.getLongitude()).isEqualTo(location.coordinates().longitude());\n        assertThat(portableLocation.getDescription()).isEqualTo(location.description());\n\n        assertThatNullPointerException()\n                .isThrownBy(() -> PortableLocation.fromLocation(null))\n                .withMessageContaining(\"location\");\n    }", "signature": "void fromLocation()", "full_signature": "@Test void fromLocation()", "class_method_signature": "PortableLocationTest.fromLocation()", "testcase": true, "constructor": false, "invocations": ["valueOf", "fromLocation", "isEqualTo", "assertThat", "getId", "id", "isEqualTo", "assertThat", "getLatitude", "latitude", "coordinates", "isEqualTo", "assertThat", "getLongitude", "longitude", "coordinates", "isEqualTo", "assertThat", "getDescription", "description", "withMessageContaining", "isThrownBy", "assertThatNullPointerException", "fromLocation"]}, "focal_class": {"identifier": "PortableLocation", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final long id;", "modifier": "private final", "type": "long", "declarator": "id", "var_name": "id"}, {"original_string": "@JsonProperty(value = \"lat\", required = true)\n    private final BigDecimal latitude;", "modifier": "@JsonProperty(value = \"lat\", required = true)\n    private final", "type": "BigDecimal", "declarator": "latitude", "var_name": "latitude"}, {"original_string": "@JsonProperty(value = \"lng\", required = true)\n    private final BigDecimal longitude;", "modifier": "@JsonProperty(value = \"lng\", required = true)\n    private final", "type": "BigDecimal", "declarator": "longitude", "var_name": "longitude"}, {"original_string": "private final String description;", "modifier": "private final", "type": "String", "declarator": "description", "var_name": "description"}], "methods": [{"identifier": "fromLocation", "parameters": "(Location location)", "modifiers": "static", "return": "PortableLocation", "signature": "PortableLocation fromLocation(Location location)", "full_signature": "static PortableLocation fromLocation(Location location)", "class_method_signature": "PortableLocation.fromLocation(Location location)", "testcase": false, "constructor": false}, {"identifier": "PortableLocation", "parameters": "(\n            @JsonProperty(value = \"id\") long id,\n            @JsonProperty(value = \"lat\") BigDecimal latitude,\n            @JsonProperty(value = \"lng\") BigDecimal longitude,\n            @JsonProperty(value = \"description\") String description)", "modifiers": "@JsonCreator", "return": "", "signature": " PortableLocation(\n            @JsonProperty(value = \"id\") long id,\n            @JsonProperty(value = \"lat\") BigDecimal latitude,\n            @JsonProperty(value = \"lng\") BigDecimal longitude,\n            @JsonProperty(value = \"description\") String description)", "full_signature": "@JsonCreator  PortableLocation(\n            @JsonProperty(value = \"id\") long id,\n            @JsonProperty(value = \"lat\") BigDecimal latitude,\n            @JsonProperty(value = \"lng\") BigDecimal longitude,\n            @JsonProperty(value = \"description\") String description)", "class_method_signature": "PortableLocation.PortableLocation(\n            @JsonProperty(value = \"id\") long id,\n            @JsonProperty(value = \"lat\") BigDecimal latitude,\n            @JsonProperty(value = \"lng\") BigDecimal longitude,\n            @JsonProperty(value = \"description\") String description)", "testcase": false, "constructor": true}, {"identifier": "getId", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getId()", "full_signature": "public long getId()", "class_method_signature": "PortableLocation.getId()", "testcase": false, "constructor": false}, {"identifier": "getLatitude", "parameters": "()", "modifiers": "public", "return": "BigDecimal", "signature": "BigDecimal getLatitude()", "full_signature": "public BigDecimal getLatitude()", "class_method_signature": "PortableLocation.getLatitude()", "testcase": false, "constructor": false}, {"identifier": "getLongitude", "parameters": "()", "modifiers": "public", "return": "BigDecimal", "signature": "BigDecimal getLongitude()", "full_signature": "public BigDecimal getLongitude()", "class_method_signature": "PortableLocation.getLongitude()", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDescription()", "full_signature": "public String getDescription()", "class_method_signature": "PortableLocation.getDescription()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "PortableLocation.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "PortableLocation.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PortableLocation.toString()", "testcase": false, "constructor": false}], "file": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/websocket/PortableLocation.java"}, "focal_method": {"identifier": "fromLocation", "parameters": "(Location location)", "modifiers": "static", "return": "PortableLocation", "body": "static PortableLocation fromLocation(Location location) {\n        Objects.requireNonNull(location, \"location must not be null\");\n        return new PortableLocation(\n                location.id(),\n                location.coordinates().latitude(),\n                location.coordinates().longitude(),\n                location.description());\n    }", "signature": "PortableLocation fromLocation(Location location)", "full_signature": "static PortableLocation fromLocation(Location location)", "class_method_signature": "PortableLocation.fromLocation(Location location)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "id", "latitude", "coordinates", "longitude", "coordinates", "description"]}, "repository": {"repo_id": 142603842, "url": "https://github.com/kiegroup/optaweb-vehicle-routing", "stars": 42, "created": "7/27/2018 5:08:08 PM +00:00", "updates": "2020-01-27T22:19:48+00:00", "fork": "False", "license": "licensed"}}