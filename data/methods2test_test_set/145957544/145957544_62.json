{"test_class": {"identifier": "XlsFileTest", "superclass": "", "interfaces": "", "fields": [], "file": "kilt-core/src/test/java/de/poiu/kilt/importexport/xls/XlsFileTest.java"}, "test_case": {"identifier": "testRead_WithEmptyDefaultLanguage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testRead_WithEmptyDefaultLanguage() throws Exception {\n    // - preparation\n    final File file= new File(Resources.getResource(\"i18n_expected.xlsx\").toURI());\n\n    // - execution\n    final XlsFile xlsFile= new XlsFile(file);\n\n    // - verification\n    final Map<I18nBundleKey, Collection<Translation>> content= xlsFile.getContent();\n\n    assertThat(content).containsOnlyKeys(new I18nBundleKey(\"i18n/messages\", \"ok\"), new I18nBundleKey(\"i18n/messages\", \"cancel\"));\n    assertThat(content.get(new I18nBundleKey(\"i18n/messages\", \"ok\"))).containsOnly(\n      new Translation(Language.of(\"de\"), \"OK\"),\n      new Translation(Language.of(\"\"), \"OK\")\n    );\n    assertThat(content.get(new I18nBundleKey(\"i18n/messages\", \"cancel\"))).containsOnly(\n      new Translation(Language.of(\"de\"), \"Abbrechen\"),\n      new Translation(Language.of(\"\"), \"Cancel\")\n    );\n  }", "signature": "void testRead_WithEmptyDefaultLanguage()", "full_signature": "@Test public void testRead_WithEmptyDefaultLanguage()", "class_method_signature": "XlsFileTest.testRead_WithEmptyDefaultLanguage()", "testcase": true, "constructor": false, "invocations": ["toURI", "getResource", "getContent", "containsOnlyKeys", "assertThat", "containsOnly", "assertThat", "get", "of", "of", "containsOnly", "assertThat", "get", "of", "of"]}, "focal_class": {"identifier": "XlsFile", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER= LogManager.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER= LogManager.getLogger()", "var_name": "LOGGER"}, {"original_string": "private static final String DEFAULT_I18N_SHEET_NAME = \"i18n\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_I18N_SHEET_NAME = \"i18n\"", "var_name": "DEFAULT_I18N_SHEET_NAME"}, {"original_string": "private static final String KILT_INFO_SHEET_NAME = \"generation-info\";", "modifier": "private static final", "type": "String", "declarator": "KILT_INFO_SHEET_NAME = \"generation-info\"", "var_name": "KILT_INFO_SHEET_NAME"}, {"original_string": "private final Workbook workbook;", "modifier": "private final", "type": "Workbook", "declarator": "workbook", "var_name": "workbook"}, {"original_string": "private final SheetWrapper i18nSheet;", "modifier": "private final", "type": "SheetWrapper", "declarator": "i18nSheet", "var_name": "i18nSheet"}, {"original_string": "private final Sheet kiltInfoSheet;", "modifier": "private final", "type": "Sheet", "declarator": "kiltInfoSheet", "var_name": "kiltInfoSheet"}, {"original_string": "private final File file;", "modifier": "private final", "type": "File", "declarator": "file", "var_name": "file"}, {"original_string": "private final BiMap<Language, Integer> languageColumnMap= HashBiMap.create();", "modifier": "private final", "type": "BiMap<Language, Integer>", "declarator": "languageColumnMap= HashBiMap.create()", "var_name": "languageColumnMap"}, {"original_string": "private final BiMap<I18nBundleKey, Integer> i18nKeyRowMap= HashBiMap.create();", "modifier": "private final", "type": "BiMap<I18nBundleKey, Integer>", "declarator": "i18nKeyRowMap= HashBiMap.create()", "var_name": "i18nKeyRowMap"}], "methods": [{"identifier": "XlsFile", "parameters": "(final File file)", "modifiers": "public", "return": "", "signature": " XlsFile(final File file)", "full_signature": "public  XlsFile(final File file)", "class_method_signature": "XlsFile.XlsFile(final File file)", "testcase": false, "constructor": true}, {"identifier": "prepareWorkbook", "parameters": "(final File inputFile)", "modifiers": "private", "return": "Workbook", "signature": "Workbook prepareWorkbook(final File inputFile)", "full_signature": "private Workbook prepareWorkbook(final File inputFile)", "class_method_signature": "XlsFile.prepareWorkbook(final File inputFile)", "testcase": false, "constructor": false}, {"identifier": "prepareI18nSheet", "parameters": "(final Workbook workbook, final String sheetName)", "modifiers": "private", "return": "SheetWrapper", "signature": "SheetWrapper prepareI18nSheet(final Workbook workbook, final String sheetName)", "full_signature": "private SheetWrapper prepareI18nSheet(final Workbook workbook, final String sheetName)", "class_method_signature": "XlsFile.prepareI18nSheet(final Workbook workbook, final String sheetName)", "testcase": false, "constructor": false}, {"identifier": "updateKiltInfoSheet", "parameters": "(final Workbook workbook, final String sheetName)", "modifiers": "private", "return": "Sheet", "signature": "Sheet updateKiltInfoSheet(final Workbook workbook, final String sheetName)", "full_signature": "private Sheet updateKiltInfoSheet(final Workbook workbook, final String sheetName)", "class_method_signature": "XlsFile.updateKiltInfoSheet(final Workbook workbook, final String sheetName)", "testcase": false, "constructor": false}, {"identifier": "getContentAsString", "parameters": "()", "modifiers": "public", "return": "CharSequence", "signature": "CharSequence getContentAsString()", "full_signature": "public CharSequence getContentAsString()", "class_method_signature": "XlsFile.getContentAsString()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void init()", "full_signature": "private void init()", "class_method_signature": "XlsFile.init()", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(final I18nBundleKey i18nKey, final Language language, final String value)", "modifiers": "public", "return": "void", "signature": "void setValue(final I18nBundleKey i18nKey, final Language language, final String value)", "full_signature": "public void setValue(final I18nBundleKey i18nKey, final Language language, final String value)", "class_method_signature": "XlsFile.setValue(final I18nBundleKey i18nKey, final Language language, final String value)", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(final I18nBundleKey i18nKey, final Translation translation)", "modifiers": "public", "return": "void", "signature": "void setValue(final I18nBundleKey i18nKey, final Translation translation)", "full_signature": "public void setValue(final I18nBundleKey i18nKey, final Translation translation)", "class_method_signature": "XlsFile.setValue(final I18nBundleKey i18nKey, final Translation translation)", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(final I18nBundleKey i18nKey, final Collection<Translation> translations)", "modifiers": "public", "return": "void", "signature": "void setValue(final I18nBundleKey i18nKey, final Collection<Translation> translations)", "full_signature": "public void setValue(final I18nBundleKey i18nKey, final Collection<Translation> translations)", "class_method_signature": "XlsFile.setValue(final I18nBundleKey i18nKey, final Collection<Translation> translations)", "testcase": false, "constructor": false}, {"identifier": "appendLanguageColumn", "parameters": "(final Language language)", "modifiers": "private", "return": "void", "signature": "void appendLanguageColumn(final Language language)", "full_signature": "private void appendLanguageColumn(final Language language)", "class_method_signature": "XlsFile.appendLanguageColumn(final Language language)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void save()", "full_signature": "public void save()", "class_method_signature": "XlsFile.save()", "testcase": false, "constructor": false}, {"identifier": "saveTo", "parameters": "(final File file)", "modifiers": "public", "return": "void", "signature": "void saveTo(final File file)", "full_signature": "public void saveTo(final File file)", "class_method_signature": "XlsFile.saveTo(final File file)", "testcase": false, "constructor": false}, {"identifier": "getContent", "parameters": "()", "modifiers": "public", "return": "Map<I18nBundleKey, Collection<Translation>>", "signature": "Map<I18nBundleKey, Collection<Translation>> getContent()", "full_signature": "public Map<I18nBundleKey, Collection<Translation>> getContent()", "class_method_signature": "XlsFile.getContent()", "testcase": false, "constructor": false}, {"identifier": "writeRow", "parameters": "(final Sheet sheet, final String... values)", "modifiers": "private", "return": "void", "signature": "void writeRow(final Sheet sheet, final String... values)", "full_signature": "private void writeRow(final Sheet sheet, final String... values)", "class_method_signature": "XlsFile.writeRow(final Sheet sheet, final String... values)", "testcase": false, "constructor": false}], "file": "kilt-core/src/main/java/de/poiu/kilt/importexport/xls/XlsFile.java"}, "focal_method": {"identifier": "getContent", "parameters": "()", "modifiers": "public", "return": "Map<I18nBundleKey, Collection<Translation>>", "body": "public Map<I18nBundleKey, Collection<Translation>> getContent() {\n    final Multimap<I18nBundleKey, Translation> contentMap= LinkedHashMultimap.create();\n\n    for (int i= this.i18nSheet.getFirstRowNum() + 1; i < this.i18nSheet.getLastRowNum() + 1; i++) {\n      final Row row= this.i18nSheet.getRow(i);\n      //LibreOffice sometimes creates sheets that are broken and return a larget last row that really exists\n      if (row == null) {\n        continue;\n      }\n      final Optional<String> baseBundleName= this.i18nSheet.getStringValue(i, 0);\n      final Optional<String> key= this.i18nSheet.getStringValue(i, 1);\n      final I18nBundleKey i18nKey= new I18nBundleKey(baseBundleName.orElse(\"\"), key.orElse(\"\"));\n\n      for (final Map.Entry<Language, Integer> entry : this.languageColumnMap.entrySet()) {\n        final Language language = entry.getKey();\n        final Integer columnIdx = entry.getValue();\n        final Cell cell= row.getCell(columnIdx);\n        if (cell != null) {\n          contentMap.put(i18nKey, new Translation(language, cell.getStringCellValue()));\n        }\n      }\n    }\n\n    return contentMap.asMap();\n  }", "signature": "Map<I18nBundleKey, Collection<Translation>> getContent()", "full_signature": "public Map<I18nBundleKey, Collection<Translation>> getContent()", "class_method_signature": "XlsFile.getContent()", "testcase": false, "constructor": false, "invocations": ["create", "getFirstRowNum", "getLastRowNum", "getRow", "getStringValue", "getStringValue", "orElse", "orElse", "entrySet", "getKey", "getValue", "getCell", "put", "getStringCellValue", "asMap"]}, "repository": {"repo_id": 145957544, "url": "https://github.com/hupfdule/kilt", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 31, "size": 782, "license": "licensed"}}