{"test_class": {"identifier": "JpaUnitObjectFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private JpaUnitContext ctx;", "modifier": "@Mock\n    private", "type": "JpaUnitContext", "declarator": "ctx", "var_name": "ctx"}, {"original_string": "@Mock\n    private DecoratorExecutor executor;", "modifier": "@Mock\n    private", "type": "DecoratorExecutor", "declarator": "executor", "var_name": "executor"}, {"original_string": "@InjectMocks\n    private JpaUnitObjectFactory factory;", "modifier": "@InjectMocks\n    private", "type": "JpaUnitObjectFactory", "declarator": "factory", "var_name": "factory"}], "file": "cucumber/src/test/java/cucumber/runtime/java/jpa/unit/JpaUnitObjectFactoryTest.java"}, "test_case": {"identifier": "testMethodsWithCucumberAnnotationsAreIntercepted", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMethodsWithCucumberAnnotationsAreIntercepted() throws Exception {\n        // GIVEN\n        final ClassB obj = factory.getInstance(ClassB.class);\n\n        // WHEN\n        obj.when();\n\n        // THEN\n        verify(executor).processBeforeAll(notNull(TestInvocation.class));\n        final InOrder inOrder = inOrder(executor);\n        inOrder.verify(executor).processBefore(notNull(TestInvocation.class));\n        inOrder.verify(executor).processAfter(notNull(TestInvocation.class));\n\n        verifyNoMoreInteractions(executor);\n    }", "signature": "void testMethodsWithCucumberAnnotationsAreIntercepted()", "full_signature": "@Test public void testMethodsWithCucumberAnnotationsAreIntercepted()", "class_method_signature": "JpaUnitObjectFactoryTest.testMethodsWithCucumberAnnotationsAreIntercepted()", "testcase": true, "constructor": false, "invocations": ["getInstance", "when", "processBeforeAll", "verify", "notNull", "inOrder", "processBefore", "verify", "notNull", "processAfter", "verify", "notNull", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "JpaUnitObjectFactory", "superclass": "", "interfaces": "implements ObjectFactory", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(JpaUnitObjectFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(JpaUnitObjectFactory.class)", "var_name": "LOG"}, {"original_string": "private Map<Class<?>, Object> definitions = new HashMap<>();", "modifier": "private", "type": "Map<Class<?>, Object>", "declarator": "definitions = new HashMap<>()", "var_name": "definitions"}, {"original_string": "private DecoratorExecutor executor = new DecoratorExecutor();", "modifier": "private", "type": "DecoratorExecutor", "declarator": "executor = new DecoratorExecutor()", "var_name": "executor"}, {"original_string": "private Map<Class<?>, TestInvocation> invocationsMap;", "modifier": "private", "type": "Map<Class<?>, TestInvocation>", "declarator": "invocationsMap", "var_name": "invocationsMap"}], "methods": [{"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "JpaUnitObjectFactory.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stop()", "full_signature": "@Override public void stop()", "class_method_signature": "JpaUnitObjectFactory.stop()", "testcase": false, "constructor": false}, {"identifier": "addClass", "parameters": "(final Class<?> glueClass)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addClass(final Class<?> glueClass)", "full_signature": "@Override public boolean addClass(final Class<?> glueClass)", "class_method_signature": "JpaUnitObjectFactory.addClass(final Class<?> glueClass)", "testcase": false, "constructor": false}, {"identifier": "getInstance", "parameters": "(final Class<T> clazz)", "modifiers": "@Override public", "return": "T", "signature": "T getInstance(final Class<T> clazz)", "full_signature": "@Override public T getInstance(final Class<T> clazz)", "class_method_signature": "JpaUnitObjectFactory.getInstance(final Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "createProxy", "parameters": "(final Class<T> clazz)", "modifiers": "private", "return": "T", "signature": "T createProxy(final Class<T> clazz)", "full_signature": "private T createProxy(final Class<T> clazz)", "class_method_signature": "JpaUnitObjectFactory.createProxy(final Class<T> clazz)", "testcase": false, "constructor": false}], "file": "cucumber/src/main/java/cucumber/runtime/java/jpa/unit/JpaUnitObjectFactory.java"}, "focal_method": {"identifier": "getInstance", "parameters": "(final Class<T> clazz)", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public <T> T getInstance(final Class<T> clazz) {\n        if (!definitions.containsKey(clazz)) {\n            definitions.put(clazz, createProxy(clazz));\n        }\n        return clazz.cast(definitions.get(clazz));\n    }", "signature": "T getInstance(final Class<T> clazz)", "full_signature": "@Override public T getInstance(final Class<T> clazz)", "class_method_signature": "JpaUnitObjectFactory.getInstance(final Class<T> clazz)", "testcase": false, "constructor": false, "invocations": ["containsKey", "put", "createProxy", "cast", "get"]}, "repository": {"repo_id": 52435170, "url": "https://github.com/dadrus/jpa-unit", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 24, "size": 1190, "license": "licensed"}}