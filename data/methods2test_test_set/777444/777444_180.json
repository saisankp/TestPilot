{"test_class": {"identifier": "JmxRequestFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ProcessingParameters procParams;", "modifier": "private", "type": "ProcessingParameters", "declarator": "procParams", "var_name": "procParams"}], "file": "agent/core/src/test/java/org/jolokia/request/JmxRequestFactoryTest.java"}, "test_case": {"identifier": "simpleGetWithPath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void simpleGetWithPath() {\n        JmxWriteRequest req = JmxRequestFactory.createGetRequest(\"write/java.lang:type=Runtime/SystemProperties/7788/[com.sun.management.jmxremote.port]/value\", procParams);\n        assert req.getType() == RequestType.WRITE : \"Type is write\";\n        assert req.getObjectName().getCanonicalName().equals(\"java.lang:type=Runtime\") : \"Name properly parsed\";\n        List<String> parts = req.getPathParts();\n        assert parts.get(0).equals(\"[com.sun.management.jmxremote.port]\") : \"Path part 0:\" + parts.get(0);\n        assert parts.get(1).equals(\"value\") : \"Path part 1: \" + parts.get(1) ;\n        assert req.getPath().equals(\"[com.sun.management.jmxremote.port]/value\");\n    }", "signature": "void simpleGetWithPath()", "full_signature": "@Test public void simpleGetWithPath()", "class_method_signature": "JmxRequestFactoryTest.simpleGetWithPath()", "testcase": true, "constructor": false, "invocations": ["createGetRequest", "getType", "equals", "getCanonicalName", "getObjectName", "getPathParts", "equals", "get", "get", "equals", "get", "get", "equals", "getPath"]}, "focal_class": {"identifier": "JmxRequestFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Map<RequestType,RequestCreator> CREATOR_MAP;", "modifier": "private static final", "type": "Map<RequestType,RequestCreator>", "declarator": "CREATOR_MAP", "var_name": "CREATOR_MAP"}], "methods": [{"identifier": "JmxRequestFactory", "parameters": "()", "modifiers": "private", "return": "", "signature": " JmxRequestFactory()", "full_signature": "private  JmxRequestFactory()", "class_method_signature": "JmxRequestFactory.JmxRequestFactory()", "testcase": false, "constructor": true}, {"identifier": "createGetRequest", "parameters": "(String pPathInfo, ProcessingParameters pProcessingParameters)", "modifiers": "public static", "return": "R", "signature": "R createGetRequest(String pPathInfo, ProcessingParameters pProcessingParameters)", "full_signature": "public static R createGetRequest(String pPathInfo, ProcessingParameters pProcessingParameters)", "class_method_signature": "JmxRequestFactory.createGetRequest(String pPathInfo, ProcessingParameters pProcessingParameters)", "testcase": false, "constructor": false}, {"identifier": "createPostRequest", "parameters": "(Map<String, ?> pRequestMap, ProcessingParameters pProcessingParams)", "modifiers": "public static", "return": "R", "signature": "R createPostRequest(Map<String, ?> pRequestMap, ProcessingParameters pProcessingParams)", "full_signature": "public static R createPostRequest(Map<String, ?> pRequestMap, ProcessingParameters pProcessingParams)", "class_method_signature": "JmxRequestFactory.createPostRequest(Map<String, ?> pRequestMap, ProcessingParameters pProcessingParams)", "testcase": false, "constructor": false}, {"identifier": "createPostRequests", "parameters": "(List pJsonRequests, ProcessingParameters pProcessingParams)", "modifiers": "public static", "return": "List<JmxRequest>", "signature": "List<JmxRequest> createPostRequests(List pJsonRequests, ProcessingParameters pProcessingParams)", "full_signature": "public static List<JmxRequest> createPostRequests(List pJsonRequests, ProcessingParameters pProcessingParams)", "class_method_signature": "JmxRequestFactory.createPostRequests(List pJsonRequests, ProcessingParameters pProcessingParams)", "testcase": false, "constructor": false}, {"identifier": "extractPathInfo", "parameters": "(String pPathInfo, ProcessingParameters pProcessingParams)", "modifiers": "private static", "return": "String", "signature": "String extractPathInfo(String pPathInfo, ProcessingParameters pProcessingParams)", "full_signature": "private static String extractPathInfo(String pPathInfo, ProcessingParameters pProcessingParams)", "class_method_signature": "JmxRequestFactory.extractPathInfo(String pPathInfo, ProcessingParameters pProcessingParams)", "testcase": false, "constructor": false}, {"identifier": "normalizePathInfo", "parameters": "(String pPathInfo)", "modifiers": "private static", "return": "String", "signature": "String normalizePathInfo(String pPathInfo)", "full_signature": "private static String normalizePathInfo(String pPathInfo)", "class_method_signature": "JmxRequestFactory.normalizePathInfo(String pPathInfo)", "testcase": false, "constructor": false}, {"identifier": "getCreator", "parameters": "(RequestType pType)", "modifiers": "private static", "return": "RequestCreator", "signature": "RequestCreator getCreator(RequestType pType)", "full_signature": "private static RequestCreator getCreator(RequestType pType)", "class_method_signature": "JmxRequestFactory.getCreator(RequestType pType)", "testcase": false, "constructor": false}], "file": "agent/core/src/main/java/org/jolokia/request/JmxRequestFactory.java"}, "focal_method": {"identifier": "createGetRequest", "parameters": "(String pPathInfo, ProcessingParameters pProcessingParameters)", "modifiers": "public static", "return": "R", "body": "public static <R extends JmxRequest> R createGetRequest(String pPathInfo, ProcessingParameters pProcessingParameters) {\n        RequestType type = null;\n        try {\n            String pathInfo = extractPathInfo(pPathInfo, pProcessingParameters);\n\n            // Get all path elements as a reverse stack\n            Stack<String> elements = EscapeUtil.extractElementsFromPath(pathInfo);\n\n            // Use version by default if no type is given\n            type = elements.size() != 0 ? RequestType.getTypeByName(elements.pop()) : RequestType.VERSION;\n\n            // Parse request\n            return (R) getCreator(type).create(elements, pProcessingParameters);\n        } catch (MalformedObjectNameException e) {\n            throw new IllegalArgumentException(\"Invalid object name. \" + e.getMessage(),e);\n        } catch (EmptyStackException exp) {\n            throw new IllegalArgumentException(\"Invalid arguments in pathinfo \" + pPathInfo + (type != null ? \" for command \" + type : \"\"),exp);\n        }\n    }", "signature": "R createGetRequest(String pPathInfo, ProcessingParameters pProcessingParameters)", "full_signature": "public static R createGetRequest(String pPathInfo, ProcessingParameters pProcessingParameters)", "class_method_signature": "JmxRequestFactory.createGetRequest(String pPathInfo, ProcessingParameters pProcessingParameters)", "testcase": false, "constructor": false, "invocations": ["extractPathInfo", "extractElementsFromPath", "size", "getTypeByName", "pop", "create", "getCreator", "getMessage"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}