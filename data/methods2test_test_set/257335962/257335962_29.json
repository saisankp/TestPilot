{"test_class": {"identifier": "UserServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private UserService userService;", "modifier": "@Autowired\n    private", "type": "UserService", "declarator": "userService", "var_name": "userService"}, {"original_string": "@Autowired\n    private UserDetailsService userDetailsService;", "modifier": "@Autowired\n    private", "type": "UserDetailsService", "declarator": "userDetailsService", "var_name": "userDetailsService"}], "file": "lzpeng-boot-server/src/test/java/com/lzpeng/project/sys/service/UserServiceTest.java"}, "test_case": {"identifier": "testFindById", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindById() {\n        String id = \"{}\";\n        User user = userService.findById(id);\n        assertEquals(user.getId(), id);\n    }", "signature": "void testFindById()", "full_signature": "@Test public void testFindById()", "class_method_signature": "UserServiceTest.testFindById()", "testcase": true, "constructor": false, "invocations": ["findById", "assertEquals", "getId"]}, "focal_class": {"identifier": "UserService", "superclass": "extends AbstractUserService", "interfaces": "implements UserDetailsService", "fields": [{"original_string": "@Autowired\n    private PasswordEncoder passwordEncoder;", "modifier": "@Autowired\n    private", "type": "PasswordEncoder", "declarator": "passwordEncoder", "var_name": "passwordEncoder"}, {"original_string": "@Autowired\n    private RoleService roleService;", "modifier": "@Autowired\n    private", "type": "RoleService", "declarator": "roleService", "var_name": "roleService"}, {"original_string": "@Autowired\n    private UserAuditor userAuditor;", "modifier": "@Autowired\n    private", "type": "UserAuditor", "declarator": "userAuditor", "var_name": "userAuditor"}, {"original_string": "private Pattern BCRYPT_PATTERN = Pattern\n            .compile(\"\\\\A\\\\$2(a|y|b)?\\\\$(\\\\d\\\\d)\\\\$[./0-9A-Za-z]{53}\");", "modifier": "private", "type": "Pattern", "declarator": "BCRYPT_PATTERN = Pattern\n            .compile(\"\\\\A\\\\$2(a|y|b)?\\\\$(\\\\d\\\\d)\\\\$[./0-9A-Za-z]{53}\")", "var_name": "BCRYPT_PATTERN"}], "methods": [{"identifier": "beforeSave", "parameters": "(User user)", "modifiers": "@Override @CachePut(value = ENTITY_NAME, key = \"#result.id\", unless = \"#result == null\") public", "return": "boolean", "signature": "boolean beforeSave(User user)", "full_signature": "@Override @CachePut(value = ENTITY_NAME, key = \"#result.id\", unless = \"#result == null\") public boolean beforeSave(User user)", "class_method_signature": "UserService.beforeSave(User user)", "testcase": false, "constructor": false}, {"identifier": "findById", "parameters": "(String id)", "modifiers": "@Override @Cacheable(value = ENTITY_NAME, key = \"#id\", unless = \"#result == null\") public", "return": "User", "signature": "User findById(String id)", "full_signature": "@Override @Cacheable(value = ENTITY_NAME, key = \"#id\", unless = \"#result == null\") public User findById(String id)", "class_method_signature": "UserService.findById(String id)", "testcase": false, "constructor": false}, {"identifier": "loadUserByUsername", "parameters": "(String username)", "modifiers": "@Override public", "return": "UserDetails", "signature": "UserDetails loadUserByUsername(String username)", "full_signature": "@Override public UserDetails loadUserByUsername(String username)", "class_method_signature": "UserService.loadUserByUsername(String username)", "testcase": false, "constructor": false}, {"identifier": "findByUsername", "parameters": "(String username)", "modifiers": "public", "return": "User", "signature": "User findByUsername(String username)", "full_signature": "public User findByUsername(String username)", "class_method_signature": "UserService.findByUsername(String username)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(User user)", "modifiers": "public", "return": "User", "signature": "User register(User user)", "full_signature": "public User register(User user)", "class_method_signature": "UserService.register(User user)", "testcase": false, "constructor": false}, {"identifier": "setRoles", "parameters": "(String userId, String[] roleIds)", "modifiers": "public", "return": "User", "signature": "User setRoles(String userId, String[] roleIds)", "full_signature": "public User setRoles(String userId, String[] roleIds)", "class_method_signature": "UserService.setRoles(String userId, String[] roleIds)", "testcase": false, "constructor": false}, {"identifier": "getCurrentUser", "parameters": "()", "modifiers": "public", "return": "User", "signature": "User getCurrentUser()", "full_signature": "public User getCurrentUser()", "class_method_signature": "UserService.getCurrentUser()", "testcase": false, "constructor": false}, {"identifier": "getCurrentUserAuthorities", "parameters": "()", "modifiers": "public", "return": "Collection<? extends String>", "signature": "Collection<? extends String> getCurrentUserAuthorities()", "full_signature": "public Collection<? extends String> getCurrentUserAuthorities()", "class_method_signature": "UserService.getCurrentUserAuthorities()", "testcase": false, "constructor": false}], "file": "lzpeng-boot-server/src/main/java/com/lzpeng/project/sys/service/UserService.java"}, "focal_method": {"identifier": "findById", "parameters": "(String id)", "modifiers": "@Override @Cacheable(value = ENTITY_NAME, key = \"#id\", unless = \"#result == null\") public", "return": "User", "body": "@Override\n    @Cacheable(value = ENTITY_NAME, key = \"#id\", unless = \"#result == null\")\n    public User findById(String id) {\n        return super.findById(id);\n    }", "signature": "User findById(String id)", "full_signature": "@Override @Cacheable(value = ENTITY_NAME, key = \"#id\", unless = \"#result == null\") public User findById(String id)", "class_method_signature": "UserService.findById(String id)", "testcase": false, "constructor": false, "invocations": ["findById"]}, "repository": {"repo_id": 257335962, "url": "https://github.com/lzpeng723/minimal-boot", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 25, "size": 2632, "license": "licensed"}}