{"test_class": {"identifier": "KafkaBoltTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST_TOPIC = \"test-topic\";", "modifier": "private static final", "type": "String", "declarator": "TEST_TOPIC = \"test-topic\"", "var_name": "TEST_TOPIC"}, {"original_string": "private KafkaTestBroker broker;", "modifier": "private", "type": "KafkaTestBroker", "declarator": "broker", "var_name": "broker"}, {"original_string": "private KafkaBolt bolt;", "modifier": "private", "type": "KafkaBolt", "declarator": "bolt", "var_name": "bolt"}, {"original_string": "private Config config = new Config();", "modifier": "private", "type": "Config", "declarator": "config = new Config()", "var_name": "config"}, {"original_string": "private KafkaConfig kafkaConfig;", "modifier": "private", "type": "KafkaConfig", "declarator": "kafkaConfig", "var_name": "kafkaConfig"}, {"original_string": "private SimpleConsumer simpleConsumer;", "modifier": "private", "type": "SimpleConsumer", "declarator": "simpleConsumer", "var_name": "simpleConsumer"}, {"original_string": "@Mock\n    private IOutputCollector collector;", "modifier": "@Mock\n    private", "type": "IOutputCollector", "declarator": "collector", "var_name": "collector"}], "file": "storm/storm-app/src/test/java/storm/kafka/bolt/KafkaBoltTest.java"}, "test_case": {"identifier": "executeWithBrokerDown", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void executeWithBrokerDown() throws Exception {\n        broker.shutdown();\n        String message = \"value-234\";\n        Tuple tuple = generateTestTuple(message);\n        bolt.execute(tuple);\n        verify(collector).fail(tuple);\n    }", "signature": "void executeWithBrokerDown()", "full_signature": "@Test public void executeWithBrokerDown()", "class_method_signature": "KafkaBoltTest.executeWithBrokerDown()", "testcase": true, "constructor": false, "invocations": ["shutdown", "generateTestTuple", "execute", "fail", "verify"]}, "focal_class": {"identifier": "KafkaBolt", "superclass": "extends BaseRichBolt", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(KafkaBolt.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(KafkaBolt.class)", "var_name": "LOG"}, {"original_string": "public static final String TOPIC = \"topic\";", "modifier": "public static final", "type": "String", "declarator": "TOPIC = \"topic\"", "var_name": "TOPIC"}, {"original_string": "public static final String KAFKA_BROKER_PROPERTIES = \"kafka.broker.properties\";", "modifier": "public static final", "type": "String", "declarator": "KAFKA_BROKER_PROPERTIES = \"kafka.broker.properties\"", "var_name": "KAFKA_BROKER_PROPERTIES"}, {"original_string": "private Producer<K, V> producer;", "modifier": "private", "type": "Producer<K, V>", "declarator": "producer", "var_name": "producer"}, {"original_string": "private OutputCollector collector;", "modifier": "private", "type": "OutputCollector", "declarator": "collector", "var_name": "collector"}, {"original_string": "private TupleToKafkaMapper<K,V> mapper;", "modifier": "private", "type": "TupleToKafkaMapper<K,V>", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "private KafkaTopicSelector topicSelector;", "modifier": "private", "type": "KafkaTopicSelector", "declarator": "topicSelector", "var_name": "topicSelector"}], "methods": [{"identifier": "withTupleToKafkaMapper", "parameters": "(TupleToKafkaMapper<K,V> mapper)", "modifiers": "public", "return": "KafkaBolt<K,V>", "signature": "KafkaBolt<K,V> withTupleToKafkaMapper(TupleToKafkaMapper<K,V> mapper)", "full_signature": "public KafkaBolt<K,V> withTupleToKafkaMapper(TupleToKafkaMapper<K,V> mapper)", "class_method_signature": "KafkaBolt.withTupleToKafkaMapper(TupleToKafkaMapper<K,V> mapper)", "testcase": false, "constructor": false}, {"identifier": "withTopicSelector", "parameters": "(KafkaTopicSelector selector)", "modifiers": "public", "return": "KafkaBolt<K,V>", "signature": "KafkaBolt<K,V> withTopicSelector(KafkaTopicSelector selector)", "full_signature": "public KafkaBolt<K,V> withTopicSelector(KafkaTopicSelector selector)", "class_method_signature": "KafkaBolt.withTopicSelector(KafkaTopicSelector selector)", "testcase": false, "constructor": false}, {"identifier": "prepare", "parameters": "(Map stormConf, TopologyContext context, OutputCollector collector)", "modifiers": "@Override public", "return": "void", "signature": "void prepare(Map stormConf, TopologyContext context, OutputCollector collector)", "full_signature": "@Override public void prepare(Map stormConf, TopologyContext context, OutputCollector collector)", "class_method_signature": "KafkaBolt.prepare(Map stormConf, TopologyContext context, OutputCollector collector)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(Tuple input)", "modifiers": "@Override public", "return": "void", "signature": "void execute(Tuple input)", "full_signature": "@Override public void execute(Tuple input)", "class_method_signature": "KafkaBolt.execute(Tuple input)", "testcase": false, "constructor": false}, {"identifier": "declareOutputFields", "parameters": "(OutputFieldsDeclarer declarer)", "modifiers": "@Override public", "return": "void", "signature": "void declareOutputFields(OutputFieldsDeclarer declarer)", "full_signature": "@Override public void declareOutputFields(OutputFieldsDeclarer declarer)", "class_method_signature": "KafkaBolt.declareOutputFields(OutputFieldsDeclarer declarer)", "testcase": false, "constructor": false}], "file": "storm/storm-app/src/main/java/storm/kafka/bolt/KafkaBolt.java"}, "focal_method": {"identifier": "execute", "parameters": "(Tuple input)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void execute(Tuple input) {\n        K key = null;\n        V message = null;\n        String topic = null;\n        try {\n            key = mapper.getKeyFromTuple(input);\n            message = mapper.getMessageFromTuple(input);\n            topic = topicSelector.getTopic(input);\n            if(topic != null ) {\n                producer.send(new KeyedMessage<K, V>(topic, key, message));\n            } else {\n                LOG.warn(\"skipping key = \" + key + \", topic selector returned null.\");\n            }\n            collector.ack(input);\n        } catch (Exception ex) {\n            collector.reportError(ex);\n            collector.fail(input);\n        }\n    }", "signature": "void execute(Tuple input)", "full_signature": "@Override public void execute(Tuple input)", "class_method_signature": "KafkaBolt.execute(Tuple input)", "testcase": false, "constructor": false, "invocations": ["getKeyFromTuple", "getMessageFromTuple", "getTopic", "send", "warn", "ack", "reportError", "fail"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}