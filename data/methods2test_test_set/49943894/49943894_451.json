{"test_class": {"identifier": "ConfigurationServerImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ConfigurationDao _configDao;", "modifier": "@Mock\n    private", "type": "ConfigurationDao", "declarator": "_configDao", "var_name": "_configDao"}, {"original_string": "@Mock\n    private DataCenterDao _zoneDao;", "modifier": "@Mock\n    private", "type": "DataCenterDao", "declarator": "_zoneDao", "var_name": "_zoneDao"}, {"original_string": "@Mock\n    private HostPodDao _podDao;", "modifier": "@Mock\n    private", "type": "HostPodDao", "declarator": "_podDao", "var_name": "_podDao"}, {"original_string": "@Mock\n    private DiskOfferingDao _diskOfferingDao;", "modifier": "@Mock\n    private", "type": "DiskOfferingDao", "declarator": "_diskOfferingDao", "var_name": "_diskOfferingDao"}, {"original_string": "@Mock\n    private ServiceOfferingDao _serviceOfferingDao;", "modifier": "@Mock\n    private", "type": "ServiceOfferingDao", "declarator": "_serviceOfferingDao", "var_name": "_serviceOfferingDao"}, {"original_string": "@Mock\n    private NetworkOfferingDao _networkOfferingDao;", "modifier": "@Mock\n    private", "type": "NetworkOfferingDao", "declarator": "_networkOfferingDao", "var_name": "_networkOfferingDao"}, {"original_string": "@Mock\n    private DataCenterDao _dataCenterDao;", "modifier": "@Mock\n    private", "type": "DataCenterDao", "declarator": "_dataCenterDao", "var_name": "_dataCenterDao"}, {"original_string": "@Mock\n    private NetworkDao _networkDao;", "modifier": "@Mock\n    private", "type": "NetworkDao", "declarator": "_networkDao", "var_name": "_networkDao"}, {"original_string": "@Mock\n    private VlanDao _vlanDao;", "modifier": "@Mock\n    private", "type": "VlanDao", "declarator": "_vlanDao", "var_name": "_vlanDao"}, {"original_string": "@Mock\n    private DomainDao _domainDao;", "modifier": "@Mock\n    private", "type": "DomainDao", "declarator": "_domainDao", "var_name": "_domainDao"}, {"original_string": "@Mock\n    private AccountDao _accountDao;", "modifier": "@Mock\n    private", "type": "AccountDao", "declarator": "_accountDao", "var_name": "_accountDao"}, {"original_string": "@Mock\n    private ResourceCountDao _resourceCountDao;", "modifier": "@Mock\n    private", "type": "ResourceCountDao", "declarator": "_resourceCountDao", "var_name": "_resourceCountDao"}, {"original_string": "@Mock\n    private NetworkOfferingServiceMapDao _ntwkOfferingServiceMapDao;", "modifier": "@Mock\n    private", "type": "NetworkOfferingServiceMapDao", "declarator": "_ntwkOfferingServiceMapDao", "var_name": "_ntwkOfferingServiceMapDao"}, {"original_string": "@Mock\n    private ConfigDepotAdmin _configDepotAdmin;", "modifier": "@Mock\n    private", "type": "ConfigDepotAdmin", "declarator": "_configDepotAdmin", "var_name": "_configDepotAdmin"}, {"original_string": "@Mock\n    private ConfigDepot _configDepot;", "modifier": "@Mock\n    private", "type": "ConfigDepot", "declarator": "_configDepot", "var_name": "_configDepot"}, {"original_string": "@Mock\n    private ConfigurationManager _configMgr;", "modifier": "@Mock\n    private", "type": "ConfigurationManager", "declarator": "_configMgr", "var_name": "_configMgr"}, {"original_string": "@Mock\n    private ManagementService _mgrService;", "modifier": "@Mock\n    private", "type": "ManagementService", "declarator": "_mgrService", "var_name": "_mgrService"}, {"original_string": "@InjectMocks\n    private ConfigurationServerImpl configurationServer;", "modifier": "@InjectMocks\n    private", "type": "ConfigurationServerImpl", "declarator": "configurationServer", "var_name": "configurationServer"}, {"original_string": "@Spy\n    ConfigurationServerImpl windowsImpl = new ConfigurationServerImpl() {\n      protected boolean isOnWindows() {\n        return true;\n      }\n    };", "modifier": "@Spy", "type": "ConfigurationServerImpl", "declarator": "windowsImpl = new ConfigurationServerImpl() {\n      protected boolean isOnWindows() {\n        return true;\n      }\n    }", "var_name": "windowsImpl"}, {"original_string": "@Spy\n    ConfigurationServerImpl linuxImpl = new ConfigurationServerImpl() {\n      protected boolean isOnWindows() {\n        return false;\n      }\n    };", "modifier": "@Spy", "type": "ConfigurationServerImpl", "declarator": "linuxImpl = new ConfigurationServerImpl() {\n      protected boolean isOnWindows() {\n        return false;\n      }\n    }", "var_name": "linuxImpl"}, {"original_string": "final static String TEST = \"the quick brown fox jumped over the lazy dog\";", "modifier": "final static", "type": "String", "declarator": "TEST = \"the quick brown fox jumped over the lazy dog\"", "var_name": "TEST"}], "file": "server/src/test/java/com/cloud/server/ConfigurationServerImplTest.java"}, "test_case": {"identifier": "testGetBase64KeystoreTooBigFile", "parameters": "()", "modifiers": "@Test(expected = IOException.class) public", "return": "void", "body": "@Test(expected = IOException.class)\n    public void testGetBase64KeystoreTooBigFile() throws IOException {\n        File temp = File.createTempFile(\"keystore\", \"\");\n        StringBuilder builder = new StringBuilder();\n        for (int i = 0; i < 1000; i++) {\n            builder.append(\"way too long...\\n\");\n        }\n        FileUtils.writeStringToFile(temp, builder.toString());\n        try {\n            ConfigurationServerImpl.getBase64Keystore(temp.getPath());\n        } finally {\n            temp.delete();\n        }\n    }", "signature": "void testGetBase64KeystoreTooBigFile()", "full_signature": "@Test(expected = IOException.class) public void testGetBase64KeystoreTooBigFile()", "class_method_signature": "ConfigurationServerImplTest.testGetBase64KeystoreTooBigFile()", "testcase": true, "constructor": false, "invocations": ["createTempFile", "append", "writeStringToFile", "toString", "getBase64Keystore", "getPath", "delete"]}, "focal_class": {"identifier": "ConfigurationServerImpl", "superclass": "extends ManagerBase", "interfaces": "implements ConfigurationServer", "fields": [{"original_string": "public static final Logger s_logger = LoggerFactory.getLogger(ConfigurationServerImpl.class);", "modifier": "public static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(ConfigurationServerImpl.class)", "var_name": "s_logger"}, {"original_string": "@Inject\n    private ConfigurationDao _configDao;", "modifier": "@Inject\n    private", "type": "ConfigurationDao", "declarator": "_configDao", "var_name": "_configDao"}, {"original_string": "@Inject\n    private DataCenterDao _zoneDao;", "modifier": "@Inject\n    private", "type": "DataCenterDao", "declarator": "_zoneDao", "var_name": "_zoneDao"}, {"original_string": "@Inject\n    private HostPodDao _podDao;", "modifier": "@Inject\n    private", "type": "HostPodDao", "declarator": "_podDao", "var_name": "_podDao"}, {"original_string": "@Inject\n    private DiskOfferingDao _diskOfferingDao;", "modifier": "@Inject\n    private", "type": "DiskOfferingDao", "declarator": "_diskOfferingDao", "var_name": "_diskOfferingDao"}, {"original_string": "@Inject\n    private ServiceOfferingDao _serviceOfferingDao;", "modifier": "@Inject\n    private", "type": "ServiceOfferingDao", "declarator": "_serviceOfferingDao", "var_name": "_serviceOfferingDao"}, {"original_string": "@Inject\n    private NetworkOfferingDao _networkOfferingDao;", "modifier": "@Inject\n    private", "type": "NetworkOfferingDao", "declarator": "_networkOfferingDao", "var_name": "_networkOfferingDao"}, {"original_string": "@Inject\n    private DataCenterDao _dataCenterDao;", "modifier": "@Inject\n    private", "type": "DataCenterDao", "declarator": "_dataCenterDao", "var_name": "_dataCenterDao"}, {"original_string": "@Inject\n    private NetworkDao _networkDao;", "modifier": "@Inject\n    private", "type": "NetworkDao", "declarator": "_networkDao", "var_name": "_networkDao"}, {"original_string": "@Inject\n    private VlanDao _vlanDao;", "modifier": "@Inject\n    private", "type": "VlanDao", "declarator": "_vlanDao", "var_name": "_vlanDao"}, {"original_string": "@Inject\n    private DomainDao _domainDao;", "modifier": "@Inject\n    private", "type": "DomainDao", "declarator": "_domainDao", "var_name": "_domainDao"}, {"original_string": "@Inject\n    private AccountDao _accountDao;", "modifier": "@Inject\n    private", "type": "AccountDao", "declarator": "_accountDao", "var_name": "_accountDao"}, {"original_string": "@Inject\n    private ResourceCountDao _resourceCountDao;", "modifier": "@Inject\n    private", "type": "ResourceCountDao", "declarator": "_resourceCountDao", "var_name": "_resourceCountDao"}, {"original_string": "@Inject\n    private NetworkOfferingServiceMapDao _ntwkOfferingServiceMapDao;", "modifier": "@Inject\n    private", "type": "NetworkOfferingServiceMapDao", "declarator": "_ntwkOfferingServiceMapDao", "var_name": "_ntwkOfferingServiceMapDao"}, {"original_string": "@Inject\n    protected ConfigDepotAdmin _configDepotAdmin;", "modifier": "@Inject\n    protected", "type": "ConfigDepotAdmin", "declarator": "_configDepotAdmin", "var_name": "_configDepotAdmin"}, {"original_string": "@Inject\n    protected ConfigDepot _configDepot;", "modifier": "@Inject\n    protected", "type": "ConfigDepot", "declarator": "_configDepot", "var_name": "_configDepot"}, {"original_string": "@Inject\n    protected ConfigurationManager _configMgr;", "modifier": "@Inject\n    protected", "type": "ConfigurationManager", "declarator": "_configMgr", "var_name": "_configMgr"}, {"original_string": "@Inject\n    protected ManagementService _mgrService;", "modifier": "@Inject\n    protected", "type": "ManagementService", "declarator": "_mgrService", "var_name": "_mgrService"}], "methods": [{"identifier": "ConfigurationServerImpl", "parameters": "()", "modifiers": "public", "return": "", "signature": " ConfigurationServerImpl()", "full_signature": "public  ConfigurationServerImpl()", "class_method_signature": "ConfigurationServerImpl.ConfigurationServerImpl()", "testcase": false, "constructor": true}, {"identifier": "configure", "parameters": "(String name, Map<String, Object> params)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean configure(String name, Map<String, Object> params)", "full_signature": "@Override public boolean configure(String name, Map<String, Object> params)", "class_method_signature": "ConfigurationServerImpl.configure(String name, Map<String, Object> params)", "testcase": false, "constructor": false}, {"identifier": "persistDefaultValues", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void persistDefaultValues()", "full_signature": "@Override public void persistDefaultValues()", "class_method_signature": "ConfigurationServerImpl.persistDefaultValues()", "testcase": false, "constructor": false}, {"identifier": "templateDetailsInitIfNotExist", "parameters": "(long id, String name, String value)", "modifiers": "private", "return": "void", "signature": "void templateDetailsInitIfNotExist(long id, String name, String value)", "full_signature": "private void templateDetailsInitIfNotExist(long id, String name, String value)", "class_method_signature": "ConfigurationServerImpl.templateDetailsInitIfNotExist(long id, String name, String value)", "testcase": false, "constructor": false}, {"identifier": "initiateXenServerPVDriverVersion", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initiateXenServerPVDriverVersion()", "full_signature": "private void initiateXenServerPVDriverVersion()", "class_method_signature": "ConfigurationServerImpl.initiateXenServerPVDriverVersion()", "testcase": false, "constructor": false}, {"identifier": "getMountParent", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getMountParent()", "full_signature": "private String getMountParent()", "class_method_signature": "ConfigurationServerImpl.getMountParent()", "testcase": false, "constructor": false}, {"identifier": "getEnvironmentProperty", "parameters": "(String name)", "modifiers": "private", "return": "String", "signature": "String getEnvironmentProperty(String name)", "full_signature": "private String getEnvironmentProperty(String name)", "class_method_signature": "ConfigurationServerImpl.getEnvironmentProperty(String name)", "testcase": false, "constructor": false}, {"identifier": "saveUser", "parameters": "()", "modifiers": "@DB public", "return": "void", "signature": "void saveUser()", "full_signature": "@DB public void saveUser()", "class_method_signature": "ConfigurationServerImpl.saveUser()", "testcase": false, "constructor": false}, {"identifier": "updateCloudIdentifier", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void updateCloudIdentifier()", "full_signature": "protected void updateCloudIdentifier()", "class_method_signature": "ConfigurationServerImpl.updateCloudIdentifier()", "testcase": false, "constructor": false}, {"identifier": "getBase64Keystore", "parameters": "(String keystorePath)", "modifiers": "static", "return": "String", "signature": "String getBase64Keystore(String keystorePath)", "full_signature": "static String getBase64Keystore(String keystorePath)", "class_method_signature": "ConfigurationServerImpl.getBase64Keystore(String keystorePath)", "testcase": false, "constructor": false}, {"identifier": "generateDefaultKeystore", "parameters": "(String keystorePath)", "modifiers": "private", "return": "void", "signature": "void generateDefaultKeystore(String keystorePath)", "full_signature": "private void generateDefaultKeystore(String keystorePath)", "class_method_signature": "ConfigurationServerImpl.generateDefaultKeystore(String keystorePath)", "testcase": false, "constructor": false}, {"identifier": "updateSSLKeystore", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void updateSSLKeystore()", "full_signature": "protected void updateSSLKeystore()", "class_method_signature": "ConfigurationServerImpl.updateSSLKeystore()", "testcase": false, "constructor": false}, {"identifier": "updateSystemvmPassword", "parameters": "()", "modifiers": "@DB protected", "return": "void", "signature": "void updateSystemvmPassword()", "full_signature": "@DB protected void updateSystemvmPassword()", "class_method_signature": "ConfigurationServerImpl.updateSystemvmPassword()", "testcase": false, "constructor": false}, {"identifier": "updateKeyPairs", "parameters": "()", "modifiers": "@Override @DB public", "return": "void", "signature": "void updateKeyPairs()", "full_signature": "@Override @DB public void updateKeyPairs()", "class_method_signature": "ConfigurationServerImpl.updateKeyPairs()", "testcase": false, "constructor": false}, {"identifier": "getConfigListByScope", "parameters": "(String scope, Long resourceId)", "modifiers": "@Override public", "return": "List<ConfigurationVO>", "signature": "List<ConfigurationVO> getConfigListByScope(String scope, Long resourceId)", "full_signature": "@Override public List<ConfigurationVO> getConfigListByScope(String scope, Long resourceId)", "class_method_signature": "ConfigurationServerImpl.getConfigListByScope(String scope, Long resourceId)", "testcase": false, "constructor": false}, {"identifier": "writeKeyToDisk", "parameters": "(String key, String keyPath)", "modifiers": "private", "return": "void", "signature": "void writeKeyToDisk(String key, String keyPath)", "full_signature": "private void writeKeyToDisk(String key, String keyPath)", "class_method_signature": "ConfigurationServerImpl.writeKeyToDisk(String key, String keyPath)", "testcase": false, "constructor": false}, {"identifier": "updateKeyPairsOnDisk", "parameters": "(String homeDir)", "modifiers": "private", "return": "void", "signature": "void updateKeyPairsOnDisk(String homeDir)", "full_signature": "private void updateKeyPairsOnDisk(String homeDir)", "class_method_signature": "ConfigurationServerImpl.updateKeyPairsOnDisk(String homeDir)", "testcase": false, "constructor": false}, {"identifier": "injectSshKeysIntoSystemVmIsoPatch", "parameters": "(String publicKeyPath, String privKeyPath)", "modifiers": "protected", "return": "void", "signature": "void injectSshKeysIntoSystemVmIsoPatch(String publicKeyPath, String privKeyPath)", "full_signature": "protected void injectSshKeysIntoSystemVmIsoPatch(String publicKeyPath, String privKeyPath)", "class_method_signature": "ConfigurationServerImpl.injectSshKeysIntoSystemVmIsoPatch(String publicKeyPath, String privKeyPath)", "testcase": false, "constructor": false}, {"identifier": "getInjectScript", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getInjectScript()", "full_signature": "protected String getInjectScript()", "class_method_signature": "ConfigurationServerImpl.getInjectScript()", "testcase": false, "constructor": false}, {"identifier": "isOnWindows", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean isOnWindows()", "full_signature": "protected boolean isOnWindows()", "class_method_signature": "ConfigurationServerImpl.isOnWindows()", "testcase": false, "constructor": false}, {"identifier": "generateSecStorageVmCopyPassword", "parameters": "()", "modifiers": "@DB protected", "return": "void", "signature": "void generateSecStorageVmCopyPassword()", "full_signature": "@DB protected void generateSecStorageVmCopyPassword()", "class_method_signature": "ConfigurationServerImpl.generateSecStorageVmCopyPassword()", "testcase": false, "constructor": false}, {"identifier": "updateSSOKey", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateSSOKey()", "full_signature": "private void updateSSOKey()", "class_method_signature": "ConfigurationServerImpl.updateSSOKey()", "testcase": false, "constructor": false}, {"identifier": "updateSecondaryStorageVMSharedKey", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateSecondaryStorageVMSharedKey()", "full_signature": "private void updateSecondaryStorageVMSharedKey()", "class_method_signature": "ConfigurationServerImpl.updateSecondaryStorageVMSharedKey()", "testcase": false, "constructor": false}, {"identifier": "getPrivateKey", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getPrivateKey()", "full_signature": "private String getPrivateKey()", "class_method_signature": "ConfigurationServerImpl.getPrivateKey()", "testcase": false, "constructor": false}, {"identifier": "createPod", "parameters": "(long userId, String podName, final long zoneId, String gateway, String cidr, final String startIp, String endIp)", "modifiers": "@DB protected", "return": "HostPodVO", "signature": "HostPodVO createPod(long userId, String podName, final long zoneId, String gateway, String cidr, final String startIp, String endIp)", "full_signature": "@DB protected HostPodVO createPod(long userId, String podName, final long zoneId, String gateway, String cidr, final String startIp, String endIp)", "class_method_signature": "ConfigurationServerImpl.createPod(long userId, String podName, final long zoneId, String gateway, String cidr, final String startIp, String endIp)", "testcase": false, "constructor": false}, {"identifier": "createdefaultDiskOffering", "parameters": "(Long domainId, String name, String description, ProvisioningType provisioningType,\n            int numGibibytes, String tags, boolean isCustomized, boolean isSystemUse)", "modifiers": "private", "return": "DiskOfferingVO", "signature": "DiskOfferingVO createdefaultDiskOffering(Long domainId, String name, String description, ProvisioningType provisioningType,\n            int numGibibytes, String tags, boolean isCustomized, boolean isSystemUse)", "full_signature": "private DiskOfferingVO createdefaultDiskOffering(Long domainId, String name, String description, ProvisioningType provisioningType,\n            int numGibibytes, String tags, boolean isCustomized, boolean isSystemUse)", "class_method_signature": "ConfigurationServerImpl.createdefaultDiskOffering(Long domainId, String name, String description, ProvisioningType provisioningType,\n            int numGibibytes, String tags, boolean isCustomized, boolean isSystemUse)", "testcase": false, "constructor": false}, {"identifier": "createServiceOffering", "parameters": "(long userId, String name, int cpu, int ramSize, int speed, String displayText,\n            ProvisioningType provisioningType, boolean localStorageRequired, boolean offerHA, String tags)", "modifiers": "private", "return": "ServiceOfferingVO", "signature": "ServiceOfferingVO createServiceOffering(long userId, String name, int cpu, int ramSize, int speed, String displayText,\n            ProvisioningType provisioningType, boolean localStorageRequired, boolean offerHA, String tags)", "full_signature": "private ServiceOfferingVO createServiceOffering(long userId, String name, int cpu, int ramSize, int speed, String displayText,\n            ProvisioningType provisioningType, boolean localStorageRequired, boolean offerHA, String tags)", "class_method_signature": "ConfigurationServerImpl.createServiceOffering(long userId, String name, int cpu, int ramSize, int speed, String displayText,\n            ProvisioningType provisioningType, boolean localStorageRequired, boolean offerHA, String tags)", "testcase": false, "constructor": false}, {"identifier": "cleanupTags", "parameters": "(String tags)", "modifiers": "private", "return": "String", "signature": "String cleanupTags(String tags)", "full_signature": "private String cleanupTags(String tags)", "class_method_signature": "ConfigurationServerImpl.cleanupTags(String tags)", "testcase": false, "constructor": false}, {"identifier": "createDefaultNetworkOfferings", "parameters": "()", "modifiers": "@DB protected", "return": "void", "signature": "void createDefaultNetworkOfferings()", "full_signature": "@DB protected void createDefaultNetworkOfferings()", "class_method_signature": "ConfigurationServerImpl.createDefaultNetworkOfferings()", "testcase": false, "constructor": false}, {"identifier": "createDefaultNetworks", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void createDefaultNetworks()", "full_signature": "private void createDefaultNetworks()", "class_method_signature": "ConfigurationServerImpl.createDefaultNetworks()", "testcase": false, "constructor": false}, {"identifier": "updateVlanWithNetworkId", "parameters": "(VlanVO vlan)", "modifiers": "private", "return": "void", "signature": "void updateVlanWithNetworkId(VlanVO vlan)", "full_signature": "private void updateVlanWithNetworkId(VlanVO vlan)", "class_method_signature": "ConfigurationServerImpl.updateVlanWithNetworkId(VlanVO vlan)", "testcase": false, "constructor": false}, {"identifier": "getSystemNetworkIdByZoneAndTrafficType", "parameters": "(long zoneId, TrafficType trafficType)", "modifiers": "private", "return": "long", "signature": "long getSystemNetworkIdByZoneAndTrafficType(long zoneId, TrafficType trafficType)", "full_signature": "private long getSystemNetworkIdByZoneAndTrafficType(long zoneId, TrafficType trafficType)", "class_method_signature": "ConfigurationServerImpl.getSystemNetworkIdByZoneAndTrafficType(long zoneId, TrafficType trafficType)", "testcase": false, "constructor": false}, {"identifier": "updateResourceCount", "parameters": "()", "modifiers": "@DB public", "return": "void", "signature": "void updateResourceCount()", "full_signature": "@DB public void updateResourceCount()", "class_method_signature": "ConfigurationServerImpl.updateResourceCount()", "testcase": false, "constructor": false}, {"identifier": "getServicesAndProvidersForNetwork", "parameters": "(long networkOfferingId)", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> getServicesAndProvidersForNetwork(long networkOfferingId)", "full_signature": "public Map<String, String> getServicesAndProvidersForNetwork(long networkOfferingId)", "class_method_signature": "ConfigurationServerImpl.getServicesAndProvidersForNetwork(long networkOfferingId)", "testcase": false, "constructor": false}], "file": "server/src/main/java/com/cloud/server/ConfigurationServerImpl.java"}, "focal_method": {"identifier": "getBase64Keystore", "parameters": "(String keystorePath)", "modifiers": "static", "return": "String", "body": "static String getBase64Keystore(String keystorePath) throws IOException {\n        byte[] storeBytes = FileUtils.readFileToByteArray(new File(keystorePath));\n        if (storeBytes.length > 3000) { // Base64 codec would enlarge data by 1/3, and we have 4094 bytes in database entry at most\n            throw new IOException(\"KeyStore is too big for database! Length \" + storeBytes.length);\n        }\n\n        return new String(Base64.encodeBase64(storeBytes));\n    }", "signature": "String getBase64Keystore(String keystorePath)", "full_signature": "static String getBase64Keystore(String keystorePath)", "class_method_signature": "ConfigurationServerImpl.getBase64Keystore(String keystorePath)", "testcase": false, "constructor": false, "invocations": ["readFileToByteArray", "encodeBase64"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}