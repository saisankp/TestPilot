{"test_class": {"identifier": "ImmutableReplyTargetTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ADDRESS = \"amqp/target1\";", "modifier": "private static final", "type": "String", "declarator": "ADDRESS = \"amqp/target1\"", "var_name": "ADDRESS"}, {"original_string": "private static final JsonObject MAPPING = JsonFactory.newObjectBuilder()\n            .set(\"correlation-id\", \"{{ header:message-id }}\")\n            .set(\"thing-id\", \"{{ header:device_id }}\")\n            .set(\"eclipse\", \"ditto\")\n            .build();", "modifier": "private static final", "type": "JsonObject", "declarator": "MAPPING = JsonFactory.newObjectBuilder()\n            .set(\"correlation-id\", \"{{ header:message-id }}\")\n            .set(\"thing-id\", \"{{ header:device_id }}\")\n            .set(\"eclipse\", \"ditto\")\n            .build()", "var_name": "MAPPING"}, {"original_string": "private static final JsonArray EXPECTED_RESPONSE_TYPES = JsonArray.newBuilder()\n            .add(ResponseType.ERROR.getName())\n            .build();", "modifier": "private static final", "type": "JsonArray", "declarator": "EXPECTED_RESPONSE_TYPES = JsonArray.newBuilder()\n            .add(ResponseType.ERROR.getName())\n            .build()", "var_name": "EXPECTED_RESPONSE_TYPES"}, {"original_string": "static final ReplyTarget REPLY_TARGET =\n            ReplyTarget.newBuilder()\n                    .address(ADDRESS)\n                    .headerMapping(ConnectivityModelFactory.newHeaderMapping(MAPPING))\n                    .expectedResponseTypes(ResponseType.ERROR)\n                    .build();", "modifier": "static final", "type": "ReplyTarget", "declarator": "REPLY_TARGET =\n            ReplyTarget.newBuilder()\n                    .address(ADDRESS)\n                    .headerMapping(ConnectivityModelFactory.newHeaderMapping(MAPPING))\n                    .expectedResponseTypes(ResponseType.ERROR)\n                    .build()", "var_name": "REPLY_TARGET"}, {"original_string": "static final JsonObject REPLY_TARGET_JSON = JsonObject\n            .newBuilder()\n            .set(ReplyTarget.JsonFields.ADDRESS, ADDRESS)\n            .set(ReplyTarget.JsonFields.HEADER_MAPPING, MAPPING)\n            .set(ReplyTarget.JsonFields.EXPECTED_RESPONSE_TYPES, EXPECTED_RESPONSE_TYPES)\n            .build();", "modifier": "static final", "type": "JsonObject", "declarator": "REPLY_TARGET_JSON = JsonObject\n            .newBuilder()\n            .set(ReplyTarget.JsonFields.ADDRESS, ADDRESS)\n            .set(ReplyTarget.JsonFields.HEADER_MAPPING, MAPPING)\n            .set(ReplyTarget.JsonFields.EXPECTED_RESPONSE_TYPES, EXPECTED_RESPONSE_TYPES)\n            .build()", "var_name": "REPLY_TARGET_JSON"}], "file": "model/connectivity/src/test/java/org/eclipse/ditto/model/connectivity/ImmutableReplyTargetTest.java"}, "test_case": {"identifier": "toJsonReturnsExpected", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void toJsonReturnsExpected() {\n        final JsonObject actual = REPLY_TARGET.toJson();\n        assertThat(actual).isEqualTo(REPLY_TARGET_JSON);\n    }", "signature": "void toJsonReturnsExpected()", "full_signature": "@Test public void toJsonReturnsExpected()", "class_method_signature": "ImmutableReplyTargetTest.toJsonReturnsExpected()", "testcase": true, "constructor": false, "invocations": ["toJson", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "ImmutableReplyTarget", "superclass": "", "interfaces": "implements ReplyTarget", "fields": [{"original_string": "private static final Set<ResponseType> DEFAULT_EXPECTED_RESPONSE_TYPES;", "modifier": "private static final", "type": "Set<ResponseType>", "declarator": "DEFAULT_EXPECTED_RESPONSE_TYPES", "var_name": "DEFAULT_EXPECTED_RESPONSE_TYPES"}, {"original_string": "private final String address;", "modifier": "private final", "type": "String", "declarator": "address", "var_name": "address"}, {"original_string": "@Nullable private final HeaderMapping headerMapping;", "modifier": "@Nullable private final", "type": "HeaderMapping", "declarator": "headerMapping", "var_name": "headerMapping"}, {"original_string": "private final Set<ResponseType> expectedResponseTypes;", "modifier": "private final", "type": "Set<ResponseType>", "declarator": "expectedResponseTypes", "var_name": "expectedResponseTypes"}], "methods": [{"identifier": "ImmutableReplyTarget", "parameters": "(final Builder builder)", "modifiers": "private", "return": "", "signature": " ImmutableReplyTarget(final Builder builder)", "full_signature": "private  ImmutableReplyTarget(final Builder builder)", "class_method_signature": "ImmutableReplyTarget.ImmutableReplyTarget(final Builder builder)", "testcase": false, "constructor": true}, {"identifier": "getAddress", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getAddress()", "full_signature": "@Override public String getAddress()", "class_method_signature": "ImmutableReplyTarget.getAddress()", "testcase": false, "constructor": false}, {"identifier": "getHeaderMapping", "parameters": "()", "modifiers": "@Override public", "return": "Optional<HeaderMapping>", "signature": "Optional<HeaderMapping> getHeaderMapping()", "full_signature": "@Override public Optional<HeaderMapping> getHeaderMapping()", "class_method_signature": "ImmutableReplyTarget.getHeaderMapping()", "testcase": false, "constructor": false}, {"identifier": "getExpectedResponseTypes", "parameters": "()", "modifiers": "@Override public", "return": "Set<ResponseType>", "signature": "Set<ResponseType> getExpectedResponseTypes()", "full_signature": "@Override public Set<ResponseType> getExpectedResponseTypes()", "class_method_signature": "ImmutableReplyTarget.getExpectedResponseTypes()", "testcase": false, "constructor": false}, {"identifier": "toBuilder", "parameters": "()", "modifiers": "@Override public", "return": "ReplyTarget.Builder", "signature": "ReplyTarget.Builder toBuilder()", "full_signature": "@Override public ReplyTarget.Builder toBuilder()", "class_method_signature": "ImmutableReplyTarget.toBuilder()", "testcase": false, "constructor": false}, {"identifier": "toJson", "parameters": "(final JsonSchemaVersion schemaVersion, final Predicate<JsonField> predicate)", "modifiers": "@Override public", "return": "JsonObject", "signature": "JsonObject toJson(final JsonSchemaVersion schemaVersion, final Predicate<JsonField> predicate)", "full_signature": "@Override public JsonObject toJson(final JsonSchemaVersion schemaVersion, final Predicate<JsonField> predicate)", "class_method_signature": "ImmutableReplyTarget.toJson(final JsonSchemaVersion schemaVersion, final Predicate<JsonField> predicate)", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(final JsonObject jsonObject)", "modifiers": "static", "return": "ReplyTarget", "signature": "ReplyTarget fromJson(final JsonObject jsonObject)", "full_signature": "static ReplyTarget fromJson(final JsonObject jsonObject)", "class_method_signature": "ImmutableReplyTarget.fromJson(final JsonObject jsonObject)", "testcase": false, "constructor": false}, {"identifier": "fromJsonOptional", "parameters": "(final JsonObject jsonObject)", "modifiers": "static", "return": "Optional<ReplyTarget>", "signature": "Optional<ReplyTarget> fromJsonOptional(final JsonObject jsonObject)", "full_signature": "static Optional<ReplyTarget> fromJsonOptional(final JsonObject jsonObject)", "class_method_signature": "ImmutableReplyTarget.fromJsonOptional(final JsonObject jsonObject)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "ImmutableReplyTarget.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ImmutableReplyTarget.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ImmutableReplyTarget.toString()", "testcase": false, "constructor": false}], "file": "model/connectivity/src/main/java/org/eclipse/ditto/model/connectivity/ImmutableReplyTarget.java"}, "focal_method": {"identifier": "toJson", "parameters": "(final JsonSchemaVersion schemaVersion, final Predicate<JsonField> predicate)", "modifiers": "@Override public", "return": "JsonObject", "body": "@Override\n    public JsonObject toJson(final JsonSchemaVersion schemaVersion, final Predicate<JsonField> predicate) {\n        final JsonObjectBuilder jsonObjectBuilder = JsonFactory.newObjectBuilder();\n        jsonObjectBuilder.set(JsonFields.ADDRESS, address);\n        if (headerMapping != null) {\n            jsonObjectBuilder.set(JsonFields.HEADER_MAPPING, headerMapping.toJson(schemaVersion, predicate),\n                    predicate);\n        }\n        jsonObjectBuilder.set(JsonFields.EXPECTED_RESPONSE_TYPES, expectedResponseTypes.stream()\n                .map(ResponseType::getName)\n                .map(JsonFactory::newValue)\n                .collect(JsonCollectors.valuesToArray()));\n        return jsonObjectBuilder.build();\n    }", "signature": "JsonObject toJson(final JsonSchemaVersion schemaVersion, final Predicate<JsonField> predicate)", "full_signature": "@Override public JsonObject toJson(final JsonSchemaVersion schemaVersion, final Predicate<JsonField> predicate)", "class_method_signature": "ImmutableReplyTarget.toJson(final JsonSchemaVersion schemaVersion, final Predicate<JsonField> predicate)", "testcase": false, "constructor": false, "invocations": ["newObjectBuilder", "set", "set", "toJson", "set", "collect", "map", "map", "stream", "valuesToArray", "build"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}