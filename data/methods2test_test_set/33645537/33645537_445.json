{"test_class": {"identifier": "FloodFillTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private FloodFill floodFill;", "modifier": "private", "type": "FloodFill", "declarator": "floodFill", "var_name": "floodFill"}], "file": "algs/src/test/java/com/github/pedrovgs/problem42/FloodFillTest.java"}, "test_case": {"identifier": "shouldPaintSelectedZoneUsingIndicatedColor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void shouldPaintSelectedZoneUsingIndicatedColor() {\n    int[][] picture = {\n        { 1, 1, 1, 1 }, { 1, 0, 0, 1 }, { 1, 0, 0, 1 }, { 1, 1, 1, 1 }\n    };\n    int colorToReplace = 0;\n    int colorToPaint = 1;\n    int x = 1;\n    int y = 1;\n\n    floodFill.apply(picture, colorToReplace, colorToPaint, x, y);\n\n    int[][] expectedResult = {\n        { 1, 1, 1, 1 }, { 1, 1, 1, 1 }, { 1, 1, 1, 1 }, { 1, 1, 1, 1 }\n    };\n    assertArrayEquals(expectedResult, picture);\n  }", "signature": "void shouldPaintSelectedZoneUsingIndicatedColor()", "full_signature": "@Test public void shouldPaintSelectedZoneUsingIndicatedColor()", "class_method_signature": "FloodFillTest.shouldPaintSelectedZoneUsingIndicatedColor()", "testcase": true, "constructor": false, "invocations": ["apply", "assertArrayEquals"]}, "focal_class": {"identifier": "FloodFill", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "apply", "parameters": "(int[][] picture, int colorToReplace, int colorToPaint, int x, int y)", "modifiers": "public", "return": "void", "signature": "void apply(int[][] picture, int colorToReplace, int colorToPaint, int x, int y)", "full_signature": "public void apply(int[][] picture, int colorToReplace, int colorToPaint, int x, int y)", "class_method_signature": "FloodFill.apply(int[][] picture, int colorToReplace, int colorToPaint, int x, int y)", "testcase": false, "constructor": false}, {"identifier": "validatePicture", "parameters": "(int[][] picture)", "modifiers": "private", "return": "void", "signature": "void validatePicture(int[][] picture)", "full_signature": "private void validatePicture(int[][] picture)", "class_method_signature": "FloodFill.validatePicture(int[][] picture)", "testcase": false, "constructor": false}, {"identifier": "getValueAt", "parameters": "(int[][] picture, int x, int y)", "modifiers": "private static", "return": "int", "signature": "int getValueAt(int[][] picture, int x, int y)", "full_signature": "private static int getValueAt(int[][] picture, int x, int y)", "class_method_signature": "FloodFill.getValueAt(int[][] picture, int x, int y)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem42/FloodFill.java"}, "focal_method": {"identifier": "apply", "parameters": "(int[][] picture, int colorToReplace, int colorToPaint, int x, int y)", "modifiers": "public", "return": "void", "body": "public void apply(int[][] picture, int colorToReplace, int colorToPaint, int x, int y) {\n    validatePicture(picture);\n\n    int currentColor = getValueAt(picture, x, y);\n    if (currentColor == colorToReplace) {\n      picture[x][y] = colorToPaint;\n      apply(picture, colorToReplace, colorToPaint, x + 1, y);\n      apply(picture, colorToReplace, colorToPaint, x - 1, y);\n      apply(picture, colorToReplace, colorToPaint, x, y + 1);\n      apply(picture, colorToReplace, colorToPaint, x, y - 1);\n    }\n  }", "signature": "void apply(int[][] picture, int colorToReplace, int colorToPaint, int x, int y)", "full_signature": "public void apply(int[][] picture, int colorToReplace, int colorToPaint, int x, int y)", "class_method_signature": "FloodFill.apply(int[][] picture, int colorToReplace, int colorToPaint, int x, int y)", "testcase": false, "constructor": false, "invocations": ["validatePicture", "getValueAt", "apply", "apply", "apply", "apply"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}