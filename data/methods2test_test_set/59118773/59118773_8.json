{"test_class": {"identifier": "ReleasePackageJsonImportTest", "superclass": "extends AbstractMongoTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ReleaseRepository releaseRepository;", "modifier": "@Autowired\n    private", "type": "ReleaseRepository", "declarator": "releaseRepository", "var_name": "releaseRepository"}], "file": "persistence-mongodb/src/test/java/org/devgateway/ocds/persistence/mongo/spring/json/ReleasePackageJsonImportTest.java"}, "test_case": {"identifier": "importObjectsPlanning", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void importObjectsPlanning() throws Exception {\n        final ClassLoader classLoader = getClass().getClassLoader();\n\n        final File file = new File(classLoader\n                .getResource(\"json/fictional-example/ocds-213czf-000-00001-01-planning.json\").getFile());\n        final JsonImportPackage releasePackageJsonImport = new ReleasePackageJsonImport(releaseRepository, file);\n        final Collection<Release> releases = releasePackageJsonImport.importObjects();\n        final Release importedRelease = releaseRepository.findById(\"ocds-213czf-000-00001-01-planning\").get();\n\n        Assert.assertEquals(1, releases.size());\n        Assert.assertNotNull(importedRelease);\n        Assert.assertEquals(Amount.Currency.GBP, importedRelease.getPlanning().getBudget().getAmount().getCurrency());\n    }", "signature": "void importObjectsPlanning()", "full_signature": "@Test public void importObjectsPlanning()", "class_method_signature": "ReleasePackageJsonImportTest.importObjectsPlanning()", "testcase": true, "constructor": false, "invocations": ["getClassLoader", "getClass", "getFile", "getResource", "importObjects", "get", "findById", "assertEquals", "size", "assertNotNull", "assertEquals", "getCurrency", "getAmount", "getBudget", "getPlanning"]}, "focal_class": {"identifier": "ReleasePackageJsonImport", "superclass": "", "interfaces": "implements JsonImportPackage<ReleasePackage, Release>", "fields": [{"original_string": "private static Logger logger = LoggerFactory.getLogger(ReleaseJsonImport.class);", "modifier": "private static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ReleaseJsonImport.class)", "var_name": "logger"}, {"original_string": "private final ReleaseRepository releaseRepository;", "modifier": "private final", "type": "ReleaseRepository", "declarator": "releaseRepository", "var_name": "releaseRepository"}, {"original_string": "private final JsonToObject releasePackageJsonToObject;", "modifier": "private final", "type": "JsonToObject", "declarator": "releasePackageJsonToObject", "var_name": "releasePackageJsonToObject"}], "methods": [{"identifier": "ReleasePackageJsonImport", "parameters": "(final ReleaseRepository releaseRepository,\n                                    final String releasePackageJsonToObject)", "modifiers": "public", "return": "", "signature": " ReleasePackageJsonImport(final ReleaseRepository releaseRepository,\n                                    final String releasePackageJsonToObject)", "full_signature": "public  ReleasePackageJsonImport(final ReleaseRepository releaseRepository,\n                                    final String releasePackageJsonToObject)", "class_method_signature": "ReleasePackageJsonImport.ReleasePackageJsonImport(final ReleaseRepository releaseRepository,\n                                    final String releasePackageJsonToObject)", "testcase": false, "constructor": true}, {"identifier": "ReleasePackageJsonImport", "parameters": "(final ReleaseRepository releaseRepository, final File file)", "modifiers": "public", "return": "", "signature": " ReleasePackageJsonImport(final ReleaseRepository releaseRepository, final File file)", "full_signature": "public  ReleasePackageJsonImport(final ReleaseRepository releaseRepository, final File file)", "class_method_signature": "ReleasePackageJsonImport.ReleasePackageJsonImport(final ReleaseRepository releaseRepository, final File file)", "testcase": false, "constructor": true}, {"identifier": "importObjects", "parameters": "()", "modifiers": "@Override public", "return": "Collection<Release>", "signature": "Collection<Release> importObjects()", "full_signature": "@Override public Collection<Release> importObjects()", "class_method_signature": "ReleasePackageJsonImport.importObjects()", "testcase": false, "constructor": false}, {"identifier": "logMessage", "parameters": "(final String message)", "modifiers": "@Override public", "return": "void", "signature": "void logMessage(final String message)", "full_signature": "@Override public void logMessage(final String message)", "class_method_signature": "ReleasePackageJsonImport.logMessage(final String message)", "testcase": false, "constructor": false}], "file": "persistence-mongodb/src/main/java/org/devgateway/ocds/persistence/mongo/spring/json/ReleasePackageJsonImport.java"}, "focal_method": {"identifier": "importObjects", "parameters": "()", "modifiers": "@Override public", "return": "Collection<Release>", "body": "@Override\n    public Collection<Release> importObjects() throws IOException {\n        final ReleasePackage releasePackage = (ReleasePackage) releasePackageJsonToObject.toObject();\n        final Collection<Release> savedReleases = new LinkedHashSet<>();\n\n        if (!releasePackage.getReleases().isEmpty()) {\n            Set<Release> releases = releasePackage.getReleases();\n            for (Release release : releases) {\n                Release savedRelease = releaseRepository.save(release);\n                savedReleases.add(savedRelease);\n            }\n        }\n\n        return savedReleases;\n    }", "signature": "Collection<Release> importObjects()", "full_signature": "@Override public Collection<Release> importObjects()", "class_method_signature": "ReleasePackageJsonImport.importObjects()", "testcase": false, "constructor": false, "invocations": ["toObject", "isEmpty", "getReleases", "getReleases", "save", "add"]}, "repository": {"repo_id": 59118773, "url": "https://github.com/devgateway/oc-explorer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 9004, "license": "licensed"}}