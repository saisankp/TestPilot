{"test_class": {"identifier": "HadoopREPLTest", "superclass": "", "interfaces": "", "fields": [], "file": "hadoop-repl/src/test/java/com/shopzilla/hadoop/repl/HadoopREPLTest.java"}, "test_case": {"identifier": "testEvaluateHelpWithUsage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEvaluateHelpWithUsage() throws Exception {\n        final Configuration configuration = new Configuration();\n        final SessionState sessionState = mock(SessionState.class);\n        when(sessionState.configuration()).thenReturn(configuration);\n        final HadoopREPL repl = new HadoopREPL(configuration, sessionState);\n\n        doAnswer(new Answer() {\n            @Override\n            public Object answer(final InvocationOnMock invocationOnMock) throws Throwable {\n                assertEquals(\"Displaying help for \\\"save\\\"\", String.format(invocationOnMock.getArguments()[0].toString(), invocationOnMock.getArguments()[1]));\n                return null;\n            }\n        }).when(sessionState).output(anyString());\n\n        doAnswer(new Answer() {\n            @Override\n            public Object answer(final InvocationOnMock invocationOnMock) throws Throwable {\n                final Command.Usage usage = (Command.Usage) invocationOnMock.getArguments()[0];\n                assertEquals(\"save\", usage.command);\n                return null;\n            }\n        }).when(sessionState).outputUsage(any(Command.Usage.class));\n\n        repl.evaluate(\"help save\");\n\n        assertEquals(\"help save\", Iterables.get(repl.history(), 0));\n    }", "signature": "void testEvaluateHelpWithUsage()", "full_signature": "@Test public void testEvaluateHelpWithUsage()", "class_method_signature": "HadoopREPLTest.testEvaluateHelpWithUsage()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "configuration", "output", "when", "doAnswer", "assertEquals", "format", "toString", "getArguments", "getArguments", "anyString", "outputUsage", "when", "doAnswer", "getArguments", "assertEquals", "any", "evaluate", "assertEquals", "get", "history"]}, "focal_class": {"identifier": "HadoopREPL", "superclass": "extends REPL", "interfaces": "", "fields": [{"original_string": "protected static final Splitter ARG_SPLITTER = Splitter.on(CharMatcher.WHITESPACE).omitEmptyStrings();", "modifier": "protected static final", "type": "Splitter", "declarator": "ARG_SPLITTER = Splitter.on(CharMatcher.WHITESPACE).omitEmptyStrings()", "var_name": "ARG_SPLITTER"}, {"original_string": "protected final Configuration configuration;", "modifier": "protected final", "type": "Configuration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "protected SessionState sessionState;", "modifier": "protected", "type": "SessionState", "declarator": "sessionState", "var_name": "sessionState"}, {"original_string": "protected final Map<Call, Command> commandMappings;", "modifier": "protected final", "type": "Map<Call, Command>", "declarator": "commandMappings", "var_name": "commandMappings"}], "methods": [{"identifier": "HadoopREPL", "parameters": "(final Configuration configuration)", "modifiers": "public", "return": "", "signature": " HadoopREPL(final Configuration configuration)", "full_signature": "public  HadoopREPL(final Configuration configuration)", "class_method_signature": "HadoopREPL.HadoopREPL(final Configuration configuration)", "testcase": false, "constructor": true}, {"identifier": "HadoopREPL", "parameters": "(final Configuration configuration, final SessionState sessionState)", "modifiers": "public", "return": "", "signature": " HadoopREPL(final Configuration configuration, final SessionState sessionState)", "full_signature": "public  HadoopREPL(final Configuration configuration, final SessionState sessionState)", "class_method_signature": "HadoopREPL.HadoopREPL(final Configuration configuration, final SessionState sessionState)", "testcase": false, "constructor": true}, {"identifier": "HadoopREPL", "parameters": "(final Configuration configuration, final SessionState sessionState, final Map<Call, Command> commandMappings)", "modifiers": "public", "return": "", "signature": " HadoopREPL(final Configuration configuration, final SessionState sessionState, final Map<Call, Command> commandMappings)", "full_signature": "public  HadoopREPL(final Configuration configuration, final SessionState sessionState, final Map<Call, Command> commandMappings)", "class_method_signature": "HadoopREPL.HadoopREPL(final Configuration configuration, final SessionState sessionState, final Map<Call, Command> commandMappings)", "testcase": false, "constructor": true}, {"identifier": "buildCommandMappings", "parameters": "()", "modifiers": "protected", "return": "Map<Call, Command>", "signature": "Map<Call, Command> buildCommandMappings()", "full_signature": "protected Map<Call, Command> buildCommandMappings()", "class_method_signature": "HadoopREPL.buildCommandMappings()", "testcase": false, "constructor": false}, {"identifier": "resetCompletors", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void resetCompletors()", "full_signature": "protected void resetCompletors()", "class_method_signature": "HadoopREPL.resetCompletors()", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(final String input)", "modifiers": "@Override protected", "return": "void", "signature": "void evaluate(final String input)", "full_signature": "@Override protected void evaluate(final String input)", "class_method_signature": "HadoopREPL.evaluate(final String input)", "testcase": false, "constructor": false}, {"identifier": "sessionState", "parameters": "()", "modifiers": "protected", "return": "SessionState", "signature": "SessionState sessionState()", "full_signature": "protected SessionState sessionState()", "class_method_signature": "HadoopREPL.sessionState()", "testcase": false, "constructor": false}, {"identifier": "commandMappings", "parameters": "()", "modifiers": "protected", "return": "Map<Call, Command>", "signature": "Map<Call, Command> commandMappings()", "full_signature": "protected Map<Call, Command> commandMappings()", "class_method_signature": "HadoopREPL.commandMappings()", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(final String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(final String[] args)", "full_signature": "public static void main(final String[] args)", "class_method_signature": "HadoopREPL.main(final String[] args)", "testcase": false, "constructor": false}], "file": "hadoop-repl/src/main/java/com/shopzilla/hadoop/repl/HadoopREPL.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(final String input)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n    protected void evaluate(final String input) throws ExitSignal {\n        popHistory();\n        final Iterable<String> inputParts = ARG_SPLITTER.limit(2).split(input);\n        if (Iterables.isEmpty(inputParts)) {\n             // Do nothing\n        } else {\n            final String command = Iterables.get(inputParts, 0).toLowerCase();\n            if (commandMappings.containsKey(call(command))) {\n                commandMappings.get(call(command)).execute(\n                    new CommandInvocation(command, Iterables.toArray(ARG_SPLITTER.split(Iterables.get(inputParts, 1, \"\")), String.class)),\n                    sessionState\n                );\n            } else {\n                sessionState.output(\"Unknown command \\\"%s\\\"\", command);\n            }\n            pushHistory(input);\n        }\n    }", "signature": "void evaluate(final String input)", "full_signature": "@Override protected void evaluate(final String input)", "class_method_signature": "HadoopREPL.evaluate(final String input)", "testcase": false, "constructor": false, "invocations": ["popHistory", "split", "limit", "isEmpty", "toLowerCase", "get", "containsKey", "call", "execute", "get", "call", "toArray", "split", "get", "output", "pushHistory"]}, "repository": {"repo_id": 9198697, "url": "https://github.com/shopzilla/hadoop-in-a-box", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 16, "size": 551, "license": "licensed"}}