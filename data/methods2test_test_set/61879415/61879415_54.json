{"test_class": {"identifier": "DefaultLongPollingManagerTest", "superclass": "extends AbstractCoreWorkflowIntegrationTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprotected TestHelper helper;", "modifier": "@Autowired\n\tprotected", "type": "TestHelper", "declarator": "helper", "var_name": "helper"}, {"original_string": "@Autowired\n\tprivate LongPollingManager longPollingManager;", "modifier": "@Autowired\n\tprivate", "type": "LongPollingManager", "declarator": "longPollingManager", "var_name": "longPollingManager"}, {"original_string": "@Autowired\n\tprivate IdmRoleRequestService roleRequestService;", "modifier": "@Autowired\n\tprivate", "type": "IdmRoleRequestService", "declarator": "roleRequestService", "var_name": "roleRequestService"}, {"original_string": "@Autowired\n\t@Lazy\n\tprivate ConfigurationService configurationService;", "modifier": "@Autowired\n\t@Lazy\n\tprivate", "type": "ConfigurationService", "declarator": "configurationService", "var_name": "configurationService"}], "file": "Realization/backend/core/core-impl/src/test/java/eu/bcvsolutions/idm/core/model/service/impl/DefaultLongPollingManagerTest.java"}, "test_case": {"identifier": "testGetLastTimeStamp", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetLastTimeStamp() {\n\t\tIdmIdentityDto identityOne = new IdmIdentityDto();\n\n\t\tidentityOne.setCreated(ZonedDateTime.now().minusMinutes(10));\n\t\tidentityOne.setModified(ZonedDateTime.now().minusMinutes(100));\n\t\tZonedDateTime lastTimeStamp = longPollingManager.getLastTimeStamp(identityOne);\n\t\tassertEquals(identityOne.getCreated().plus(1, ChronoUnit.MILLIS), lastTimeStamp);\n\n\t\tidentityOne.setCreated(ZonedDateTime.now().minusMinutes(100));\n\t\tidentityOne.setModified(ZonedDateTime.now().minusMinutes(10));\n\t\tlastTimeStamp = longPollingManager.getLastTimeStamp(identityOne);\n\t\tassertEquals(identityOne.getModified().plus(1, ChronoUnit.MILLIS), lastTimeStamp);\n\n\t\tidentityOne.setCreated(ZonedDateTime.now().minusMinutes(100));\n\t\tidentityOne.setModified(null);\n\t\tlastTimeStamp = longPollingManager.getLastTimeStamp(identityOne);\n\t\tassertEquals(identityOne.getCreated().plus(1, ChronoUnit.MILLIS), lastTimeStamp);\n\n\t\tidentityOne.setCreated(null);\n\t\tidentityOne.setModified(ZonedDateTime.now().minusMinutes(100));\n\t\tlastTimeStamp = longPollingManager.getLastTimeStamp(identityOne);\n\t\tassertEquals(identityOne.getModified().plus(1, ChronoUnit.MILLIS), lastTimeStamp);\n\t}", "signature": "void testGetLastTimeStamp()", "full_signature": "@Test public void testGetLastTimeStamp()", "class_method_signature": "DefaultLongPollingManagerTest.testGetLastTimeStamp()", "testcase": true, "constructor": false, "invocations": ["setCreated", "minusMinutes", "now", "setModified", "minusMinutes", "now", "getLastTimeStamp", "assertEquals", "plus", "getCreated", "setCreated", "minusMinutes", "now", "setModified", "minusMinutes", "now", "getLastTimeStamp", "assertEquals", "plus", "getModified", "setCreated", "minusMinutes", "now", "setModified", "getLastTimeStamp", "assertEquals", "plus", "getCreated", "setCreated", "setModified", "minusMinutes", "now", "getLastTimeStamp", "assertEquals", "plus", "getModified"]}, "focal_class": {"identifier": "DefaultLongPollingManager", "superclass": "", "interfaces": "implements LongPollingManager", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DefaultLongPollingManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DefaultLongPollingManager.class)", "var_name": "LOG"}, {"original_string": "private final Queue<DeferredResultWrapper> suspendedRequests = new ConcurrentLinkedQueue<DeferredResultWrapper>();", "modifier": "private final", "type": "Queue<DeferredResultWrapper>", "declarator": "suspendedRequests = new ConcurrentLinkedQueue<DeferredResultWrapper>()", "var_name": "suspendedRequests"}, {"original_string": "private final Map<UUID, LongPollingSubscriber> registredSubscribers = new ConcurrentHashMap<UUID, LongPollingSubscriber>();", "modifier": "private final", "type": "Map<UUID, LongPollingSubscriber>", "declarator": "registredSubscribers = new ConcurrentHashMap<UUID, LongPollingSubscriber>()", "var_name": "registredSubscribers"}, {"original_string": "@Autowired\n\t@Lazy\n\tprivate ConfigurationService configurationService;", "modifier": "@Autowired\n\t@Lazy\n\tprivate", "type": "ConfigurationService", "declarator": "configurationService", "var_name": "configurationService"}], "methods": [{"identifier": "checkDeferredRequests", "parameters": "(Class<? extends AbstractDto> type)", "modifiers": "@Override public", "return": "void", "signature": "void checkDeferredRequests(Class<? extends AbstractDto> type)", "full_signature": "@Override public void checkDeferredRequests(Class<? extends AbstractDto> type)", "class_method_signature": "DefaultLongPollingManager.checkDeferredRequests(Class<? extends AbstractDto> type)", "testcase": false, "constructor": false}, {"identifier": "addSuspendedResult", "parameters": "(DeferredResultWrapper result)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void addSuspendedResult(DeferredResultWrapper result)", "full_signature": "@Override public synchronized void addSuspendedResult(DeferredResultWrapper result)", "class_method_signature": "DefaultLongPollingManager.addSuspendedResult(DeferredResultWrapper result)", "testcase": false, "constructor": false}, {"identifier": "baseCheckDeferredResult", "parameters": "(DeferredResult<OperationResultDto> deferredResult,\n\t\t\tLongPollingSubscriber subscriber, ModifiedFromFilter filter,\n\t\t\tReadDtoService service, boolean checkCount)", "modifiers": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) @Override public", "return": "void", "signature": "void baseCheckDeferredResult(DeferredResult<OperationResultDto> deferredResult,\n\t\t\tLongPollingSubscriber subscriber, ModifiedFromFilter filter,\n\t\t\tReadDtoService service, boolean checkCount)", "full_signature": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) @Override public void baseCheckDeferredResult(DeferredResult<OperationResultDto> deferredResult,\n\t\t\tLongPollingSubscriber subscriber, ModifiedFromFilter filter,\n\t\t\tReadDtoService service, boolean checkCount)", "class_method_signature": "DefaultLongPollingManager.baseCheckDeferredResult(DeferredResult<OperationResultDto> deferredResult,\n\t\t\tLongPollingSubscriber subscriber, ModifiedFromFilter filter,\n\t\t\tReadDtoService service, boolean checkCount)", "testcase": false, "constructor": false}, {"identifier": "clearUnUseSubscribers", "parameters": "()", "modifiers": "@Scheduled(fixedDelay = 7200000) // Every two hours public", "return": "void", "signature": "void clearUnUseSubscribers()", "full_signature": "@Scheduled(fixedDelay = 7200000) // Every two hours public void clearUnUseSubscribers()", "class_method_signature": "DefaultLongPollingManager.clearUnUseSubscribers()", "testcase": false, "constructor": false}, {"identifier": "clearUnUseSubscribers", "parameters": "(ZonedDateTime clearBeforIt)", "modifiers": "@Override public", "return": "void", "signature": "void clearUnUseSubscribers(ZonedDateTime clearBeforIt)", "full_signature": "@Override public void clearUnUseSubscribers(ZonedDateTime clearBeforIt)", "class_method_signature": "DefaultLongPollingManager.clearUnUseSubscribers(ZonedDateTime clearBeforIt)", "testcase": false, "constructor": false}, {"identifier": "isLongPollingEnabled", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isLongPollingEnabled()", "full_signature": "@Override public boolean isLongPollingEnabled()", "class_method_signature": "DefaultLongPollingManager.isLongPollingEnabled()", "testcase": false, "constructor": false}, {"identifier": "getLastTimeStamp", "parameters": "(AbstractDto dto)", "modifiers": "@Override public", "return": "ZonedDateTime", "signature": "ZonedDateTime getLastTimeStamp(AbstractDto dto)", "full_signature": "@Override public ZonedDateTime getLastTimeStamp(AbstractDto dto)", "class_method_signature": "DefaultLongPollingManager.getLastTimeStamp(AbstractDto dto)", "testcase": false, "constructor": false}, {"identifier": "getSuspendedRequests", "parameters": "()", "modifiers": "public", "return": "Queue<DeferredResultWrapper>", "signature": "Queue<DeferredResultWrapper> getSuspendedRequests()", "full_signature": "public Queue<DeferredResultWrapper> getSuspendedRequests()", "class_method_signature": "DefaultLongPollingManager.getSuspendedRequests()", "testcase": false, "constructor": false}, {"identifier": "getRegistredSubscribers", "parameters": "()", "modifiers": "public", "return": "Map<UUID, LongPollingSubscriber>", "signature": "Map<UUID, LongPollingSubscriber> getRegistredSubscribers()", "full_signature": "public Map<UUID, LongPollingSubscriber> getRegistredSubscribers()", "class_method_signature": "DefaultLongPollingManager.getRegistredSubscribers()", "testcase": false, "constructor": false}], "file": "Realization/backend/core/core-impl/src/main/java/eu/bcvsolutions/idm/core/model/service/impl/DefaultLongPollingManager.java"}, "focal_method": {"identifier": "getLastTimeStamp", "parameters": "(AbstractDto dto)", "modifiers": "@Override public", "return": "ZonedDateTime", "body": "@Override\n\tpublic ZonedDateTime getLastTimeStamp(AbstractDto dto) {\n\t\tZonedDateTime lastModified = dto.getModified();\n\t\tif (lastModified == null) {\n\t\t\tlastModified = dto.getCreated();\n\t\t}\n\n\t\tif (lastModified == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (dto.getCreated() != null && lastModified.isBefore(dto.getCreated())) {\n\t\t\tlastModified = dto.getCreated();\n\t\t}\n\n\t\treturn lastModified.plus(1, ChronoUnit.MILLIS);\n\t}", "signature": "ZonedDateTime getLastTimeStamp(AbstractDto dto)", "full_signature": "@Override public ZonedDateTime getLastTimeStamp(AbstractDto dto)", "class_method_signature": "DefaultLongPollingManager.getLastTimeStamp(AbstractDto dto)", "testcase": false, "constructor": false, "invocations": ["getModified", "getCreated", "getCreated", "isBefore", "getCreated", "getCreated", "plus"]}, "repository": {"repo_id": 61879415, "url": "https://github.com/bcvsolutions/CzechIdMng", "stars": 25, "created": "6/24/2016 11:18:23 AM +00:00", "updates": "2020-01-27T15:14:40+00:00", "fork": "False", "license": "licensed"}}