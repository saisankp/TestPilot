{"test_class": {"identifier": "PluginCreatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "CoreFeatures/FeatureLoadingSystem/PluginCreator/src/test/java/info/smart_tools/smartactors/feature_loading_system/plugin_creator/PluginCreatorTest.java"}, "test_case": {"identifier": "checkPluginCreation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void checkPluginCreation()\n            throws Exception {\n        PluginCreator creator = new PluginCreator();\n        IBootstrap<Object> bootstrap = mock(IBootstrap.class);\n        doNothing().when(bootstrap).add(bootstrap);\n        IPlugin plugin = creator.create(PluginTest.class, bootstrap);\n        assertNotNull(plugin);\n        plugin.load();\n        verify(bootstrap, times(1)).add(any(Object.class));\n    }", "signature": "void checkPluginCreation()", "full_signature": "@Test public void checkPluginCreation()", "class_method_signature": "PluginCreatorTest.checkPluginCreation()", "testcase": true, "constructor": false, "invocations": ["mock", "add", "when", "doNothing", "create", "assertNotNull", "load", "add", "verify", "times", "any"]}, "focal_class": {"identifier": "PluginCreator", "superclass": "", "interfaces": "implements IPluginCreator", "fields": [], "methods": [{"identifier": "create", "parameters": "(final Class clazz, final IBootstrap bootstrap)", "modifiers": "@Override public", "return": "IPlugin", "signature": "IPlugin create(final Class clazz, final IBootstrap bootstrap)", "full_signature": "@Override public IPlugin create(final Class clazz, final IBootstrap bootstrap)", "class_method_signature": "PluginCreator.create(final Class clazz, final IBootstrap bootstrap)", "testcase": false, "constructor": false}], "file": "CoreFeatures/FeatureLoadingSystem/PluginCreator/src/main/java/info/smart_tools/smartactors/feature_loading_system/plugin_creator/PluginCreator.java"}, "focal_method": {"identifier": "create", "parameters": "(final Class clazz, final IBootstrap bootstrap)", "modifiers": "@Override public", "return": "IPlugin", "body": "@Override\n    public IPlugin create(final Class clazz, final IBootstrap bootstrap)\n            throws PluginCreationException {\n        try {\n            Constructor c = clazz.getDeclaredConstructor(new Class[]{IBootstrap.class});\n            return (IPlugin) c.newInstance(new Object[]{bootstrap});\n        } catch (Throwable e) {\n            throw new PluginCreationException(\"Could not create instance of IPlugin\", e);\n        }\n    }", "signature": "IPlugin create(final Class clazz, final IBootstrap bootstrap)", "full_signature": "@Override public IPlugin create(final Class clazz, final IBootstrap bootstrap)", "class_method_signature": "PluginCreator.create(final Class clazz, final IBootstrap bootstrap)", "testcase": false, "constructor": false, "invocations": ["getDeclaredConstructor", "newInstance"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}