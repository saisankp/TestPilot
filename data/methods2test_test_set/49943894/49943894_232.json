{"test_class": {"identifier": "NetUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger s_logger = LoggerFactory.getLogger(NetUtilsTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(NetUtilsTest.class)", "var_name": "s_logger"}], "file": "utils/src/test/java/com/cloud/utils/net/NetUtilsTest.java"}, "test_case": {"identifier": "testIp2Long", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIp2Long() {\n        assertEquals(0x7f000001l, NetUtils.ip2Long(\"127.0.0.1\"));\n        assertEquals(0xc0a80001l, NetUtils.ip2Long(\"192.168.0.1\"));\n        assertEquals(0x08080808l, NetUtils.ip2Long(\"8.8.8.8\"));\n    }", "signature": "void testIp2Long()", "full_signature": "@Test public void testIp2Long()", "class_method_signature": "NetUtilsTest.testIp2Long()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "ip2Long", "assertEquals", "ip2Long", "assertEquals", "ip2Long"]}, "focal_class": {"identifier": "NetUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected final static Logger s_logger = LoggerFactory.getLogger(NetUtils.class);", "modifier": "protected final static", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(NetUtils.class)", "var_name": "s_logger"}, {"original_string": "private static final int MAX_CIDR = 32;", "modifier": "private static final", "type": "int", "declarator": "MAX_CIDR = 32", "var_name": "MAX_CIDR"}, {"original_string": "private static final int RFC_3021_31_BIT_CIDR = 31;", "modifier": "private static final", "type": "int", "declarator": "RFC_3021_31_BIT_CIDR = 31", "var_name": "RFC_3021_31_BIT_CIDR"}, {"original_string": "public final static String HTTP_PORT = \"80\";", "modifier": "public final static", "type": "String", "declarator": "HTTP_PORT = \"80\"", "var_name": "HTTP_PORT"}, {"original_string": "public final static String HTTPS_PORT = \"443\";", "modifier": "public final static", "type": "String", "declarator": "HTTPS_PORT = \"443\"", "var_name": "HTTPS_PORT"}, {"original_string": "public final static int VPN_PORT = 500;", "modifier": "public final static", "type": "int", "declarator": "VPN_PORT = 500", "var_name": "VPN_PORT"}, {"original_string": "public final static int VPN_NATT_PORT = 4500;", "modifier": "public final static", "type": "int", "declarator": "VPN_NATT_PORT = 4500", "var_name": "VPN_NATT_PORT"}, {"original_string": "public final static int VPN_L2TP_PORT = 1701;", "modifier": "public final static", "type": "int", "declarator": "VPN_L2TP_PORT = 1701", "var_name": "VPN_L2TP_PORT"}, {"original_string": "public final static int HAPROXY_STATS_PORT = 8081;", "modifier": "public final static", "type": "int", "declarator": "HAPROXY_STATS_PORT = 8081", "var_name": "HAPROXY_STATS_PORT"}, {"original_string": "public final static String UDP_PROTO = \"udp\";", "modifier": "public final static", "type": "String", "declarator": "UDP_PROTO = \"udp\"", "var_name": "UDP_PROTO"}, {"original_string": "public final static String TCP_PROTO = \"tcp\";", "modifier": "public final static", "type": "String", "declarator": "TCP_PROTO = \"tcp\"", "var_name": "TCP_PROTO"}, {"original_string": "public final static String ANY_PROTO = \"any\";", "modifier": "public final static", "type": "String", "declarator": "ANY_PROTO = \"any\"", "var_name": "ANY_PROTO"}, {"original_string": "public final static String ICMP_PROTO = \"icmp\";", "modifier": "public final static", "type": "String", "declarator": "ICMP_PROTO = \"icmp\"", "var_name": "ICMP_PROTO"}, {"original_string": "public final static String ALL_PROTO = \"all\";", "modifier": "public final static", "type": "String", "declarator": "ALL_PROTO = \"all\"", "var_name": "ALL_PROTO"}, {"original_string": "public final static String HTTP_PROTO = \"http\";", "modifier": "public final static", "type": "String", "declarator": "HTTP_PROTO = \"http\"", "var_name": "HTTP_PROTO"}, {"original_string": "public final static String SSL_PROTO = \"ssl\";", "modifier": "public final static", "type": "String", "declarator": "SSL_PROTO = \"ssl\"", "var_name": "SSL_PROTO"}, {"original_string": "public final static String ALL_CIDRS = \"0.0.0.0/0\";", "modifier": "public final static", "type": "String", "declarator": "ALL_CIDRS = \"0.0.0.0/0\"", "var_name": "ALL_CIDRS"}, {"original_string": "public final static int PORT_RANGE_MIN = 0;", "modifier": "public final static", "type": "int", "declarator": "PORT_RANGE_MIN = 0", "var_name": "PORT_RANGE_MIN"}, {"original_string": "public final static int PORT_RANGE_MAX = 65535;", "modifier": "public final static", "type": "int", "declarator": "PORT_RANGE_MAX = 65535", "var_name": "PORT_RANGE_MAX"}, {"original_string": "public final static int DEFAULT_AUTOSCALE_VM_DESTROY_TIME = 2 * 60;", "modifier": "public final static", "type": "int", "declarator": "DEFAULT_AUTOSCALE_VM_DESTROY_TIME = 2 * 60", "var_name": "DEFAULT_AUTOSCALE_VM_DESTROY_TIME"}, {"original_string": "public final static int DEFAULT_AUTOSCALE_POLICY_INTERVAL_TIME = 30;", "modifier": "public final static", "type": "int", "declarator": "DEFAULT_AUTOSCALE_POLICY_INTERVAL_TIME = 30", "var_name": "DEFAULT_AUTOSCALE_POLICY_INTERVAL_TIME"}, {"original_string": "public final static int DEFAULT_AUTOSCALE_POLICY_QUIET_TIME = 5 * 60;", "modifier": "public final static", "type": "int", "declarator": "DEFAULT_AUTOSCALE_POLICY_QUIET_TIME = 5 * 60", "var_name": "DEFAULT_AUTOSCALE_POLICY_QUIET_TIME"}, {"original_string": "private final static Random s_rand = new Random(System.currentTimeMillis());", "modifier": "private final static", "type": "Random", "declarator": "s_rand = new Random(System.currentTimeMillis())", "var_name": "s_rand"}, {"original_string": "static final String VLAN_PREFIX = \"vlan://\";", "modifier": "static final", "type": "String", "declarator": "VLAN_PREFIX = \"vlan://\"", "var_name": "VLAN_PREFIX"}, {"original_string": "static final int VLAN_PREFIX_LENGTH = VLAN_PREFIX.length();", "modifier": "static final", "type": "int", "declarator": "VLAN_PREFIX_LENGTH = VLAN_PREFIX.length()", "var_name": "VLAN_PREFIX_LENGTH"}, {"original_string": "static final String VLAN_UNTAGGED = \"untagged\";", "modifier": "static final", "type": "String", "declarator": "VLAN_UNTAGGED = \"untagged\"", "var_name": "VLAN_UNTAGGED"}], "methods": [{"identifier": "createSequenceBasedMacAddress", "parameters": "(final long macAddress)", "modifiers": "public static", "return": "long", "signature": "long createSequenceBasedMacAddress(final long macAddress)", "full_signature": "public static long createSequenceBasedMacAddress(final long macAddress)", "class_method_signature": "NetUtils.createSequenceBasedMacAddress(final long macAddress)", "testcase": false, "constructor": false}, {"identifier": "getHostName", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getHostName()", "full_signature": "public static String getHostName()", "class_method_signature": "NetUtils.getHostName()", "testcase": false, "constructor": false}, {"identifier": "getLocalInetAddress", "parameters": "()", "modifiers": "public static", "return": "InetAddress", "signature": "InetAddress getLocalInetAddress()", "full_signature": "public static InetAddress getLocalInetAddress()", "class_method_signature": "NetUtils.getLocalInetAddress()", "testcase": false, "constructor": false}, {"identifier": "resolveToIp", "parameters": "(final String host)", "modifiers": "public static", "return": "String", "signature": "String resolveToIp(final String host)", "full_signature": "public static String resolveToIp(final String host)", "class_method_signature": "NetUtils.resolveToIp(final String host)", "testcase": false, "constructor": false}, {"identifier": "getAllLocalInetAddresses", "parameters": "()", "modifiers": "public static", "return": "InetAddress[]", "signature": "InetAddress[] getAllLocalInetAddresses()", "full_signature": "public static InetAddress[] getAllLocalInetAddresses()", "class_method_signature": "NetUtils.getAllLocalInetAddresses()", "testcase": false, "constructor": false}, {"identifier": "getLocalCidrs", "parameters": "()", "modifiers": "public static", "return": "String[]", "signature": "String[] getLocalCidrs()", "full_signature": "public static String[] getLocalCidrs()", "class_method_signature": "NetUtils.getLocalCidrs()", "testcase": false, "constructor": false}, {"identifier": "getDefaultHostIp", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getDefaultHostIp()", "full_signature": "public static String getDefaultHostIp()", "class_method_signature": "NetUtils.getDefaultHostIp()", "testcase": false, "constructor": false}, {"identifier": "getDefaultEthDevice", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getDefaultEthDevice()", "full_signature": "public static String getDefaultEthDevice()", "class_method_signature": "NetUtils.getDefaultEthDevice()", "testcase": false, "constructor": false}, {"identifier": "getFirstNonLoopbackLocalInetAddress", "parameters": "()", "modifiers": "public static", "return": "InetAddress", "signature": "InetAddress getFirstNonLoopbackLocalInetAddress()", "full_signature": "public static InetAddress getFirstNonLoopbackLocalInetAddress()", "class_method_signature": "NetUtils.getFirstNonLoopbackLocalInetAddress()", "testcase": false, "constructor": false}, {"identifier": "getInterfaceInetAddresses", "parameters": "(final String ifName)", "modifiers": "public static", "return": "InetAddress[]", "signature": "InetAddress[] getInterfaceInetAddresses(final String ifName)", "full_signature": "public static InetAddress[] getInterfaceInetAddresses(final String ifName)", "class_method_signature": "NetUtils.getInterfaceInetAddresses(final String ifName)", "testcase": false, "constructor": false}, {"identifier": "getLocalIPString", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getLocalIPString()", "full_signature": "public static String getLocalIPString()", "class_method_signature": "NetUtils.getLocalIPString()", "testcase": false, "constructor": false}, {"identifier": "ipFromInetAddress", "parameters": "(final InetAddress addr)", "modifiers": "public static", "return": "String", "signature": "String ipFromInetAddress(final InetAddress addr)", "full_signature": "public static String ipFromInetAddress(final InetAddress addr)", "class_method_signature": "NetUtils.ipFromInetAddress(final InetAddress addr)", "testcase": false, "constructor": false}, {"identifier": "isLocalAddress", "parameters": "(final InetAddress addr)", "modifiers": "public static", "return": "boolean", "signature": "boolean isLocalAddress(final InetAddress addr)", "full_signature": "public static boolean isLocalAddress(final InetAddress addr)", "class_method_signature": "NetUtils.isLocalAddress(final InetAddress addr)", "testcase": false, "constructor": false}, {"identifier": "isLocalAddress", "parameters": "(final String strAddress)", "modifiers": "public static", "return": "boolean", "signature": "boolean isLocalAddress(final String strAddress)", "full_signature": "public static boolean isLocalAddress(final String strAddress)", "class_method_signature": "NetUtils.isLocalAddress(final String strAddress)", "testcase": false, "constructor": false}, {"identifier": "getMacAddress", "parameters": "(final InetAddress address)", "modifiers": "public static", "return": "String", "signature": "String getMacAddress(final InetAddress address)", "full_signature": "public static String getMacAddress(final InetAddress address)", "class_method_signature": "NetUtils.getMacAddress(final InetAddress address)", "testcase": false, "constructor": false}, {"identifier": "getMacAddressAsLong", "parameters": "(final InetAddress address)", "modifiers": "public static", "return": "long", "signature": "long getMacAddressAsLong(final InetAddress address)", "full_signature": "public static long getMacAddressAsLong(final InetAddress address)", "class_method_signature": "NetUtils.getMacAddressAsLong(final InetAddress address)", "testcase": false, "constructor": false}, {"identifier": "ipRangesOverlap", "parameters": "(final String startIp1, final String endIp1, final String startIp2, final String endIp2)", "modifiers": "public static", "return": "boolean", "signature": "boolean ipRangesOverlap(final String startIp1, final String endIp1, final String startIp2, final String endIp2)", "full_signature": "public static boolean ipRangesOverlap(final String startIp1, final String endIp1, final String startIp2, final String endIp2)", "class_method_signature": "NetUtils.ipRangesOverlap(final String startIp1, final String endIp1, final String startIp2, final String endIp2)", "testcase": false, "constructor": false}, {"identifier": "ip2Long", "parameters": "(final String ip)", "modifiers": "public static", "return": "long", "signature": "long ip2Long(final String ip)", "full_signature": "public static long ip2Long(final String ip)", "class_method_signature": "NetUtils.ip2Long(final String ip)", "testcase": false, "constructor": false}, {"identifier": "long2Ip", "parameters": "(final long ip)", "modifiers": "public static", "return": "String", "signature": "String long2Ip(final long ip)", "full_signature": "public static String long2Ip(final long ip)", "class_method_signature": "NetUtils.long2Ip(final long ip)", "testcase": false, "constructor": false}, {"identifier": "mac2Long", "parameters": "(final String macAddress)", "modifiers": "public static", "return": "long", "signature": "long mac2Long(final String macAddress)", "full_signature": "public static long mac2Long(final String macAddress)", "class_method_signature": "NetUtils.mac2Long(final String macAddress)", "testcase": false, "constructor": false}, {"identifier": "getNicParams", "parameters": "(final String nicName)", "modifiers": "public static", "return": "String[]", "signature": "String[] getNicParams(final String nicName)", "full_signature": "public static String[] getNicParams(final String nicName)", "class_method_signature": "NetUtils.getNicParams(final String nicName)", "testcase": false, "constructor": false}, {"identifier": "getNetworkParams", "parameters": "(final NetworkInterface nic)", "modifiers": "public static", "return": "String[]", "signature": "String[] getNetworkParams(final NetworkInterface nic)", "full_signature": "public static String[] getNetworkParams(final NetworkInterface nic)", "class_method_signature": "NetUtils.getNetworkParams(final NetworkInterface nic)", "testcase": false, "constructor": false}, {"identifier": "prefix2Netmask", "parameters": "(final short prefix)", "modifiers": "public static", "return": "String", "signature": "String prefix2Netmask(final short prefix)", "full_signature": "public static String prefix2Netmask(final short prefix)", "class_method_signature": "NetUtils.prefix2Netmask(final short prefix)", "testcase": false, "constructor": false}, {"identifier": "byte2Mac", "parameters": "(final byte[] m)", "modifiers": "public static", "return": "String", "signature": "String byte2Mac(final byte[] m)", "full_signature": "public static String byte2Mac(final byte[] m)", "class_method_signature": "NetUtils.byte2Mac(final byte[] m)", "testcase": false, "constructor": false}, {"identifier": "long2Mac", "parameters": "(final long macAddress)", "modifiers": "public static", "return": "String", "signature": "String long2Mac(final long macAddress)", "full_signature": "public static String long2Mac(final long macAddress)", "class_method_signature": "NetUtils.long2Mac(final long macAddress)", "testcase": false, "constructor": false}, {"identifier": "isValidPrivateIp", "parameters": "(final String ipAddress, final String guestIPAddress)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidPrivateIp(final String ipAddress, final String guestIPAddress)", "full_signature": "public static boolean isValidPrivateIp(final String ipAddress, final String guestIPAddress)", "class_method_signature": "NetUtils.isValidPrivateIp(final String ipAddress, final String guestIPAddress)", "testcase": false, "constructor": false}, {"identifier": "isSiteLocalAddress", "parameters": "(final String ipAddress)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSiteLocalAddress(final String ipAddress)", "full_signature": "public static boolean isSiteLocalAddress(final String ipAddress)", "class_method_signature": "NetUtils.isSiteLocalAddress(final String ipAddress)", "testcase": false, "constructor": false}, {"identifier": "validIpRange", "parameters": "(final String startIP, final String endIP)", "modifiers": "public static", "return": "boolean", "signature": "boolean validIpRange(final String startIP, final String endIP)", "full_signature": "public static boolean validIpRange(final String startIP, final String endIP)", "class_method_signature": "NetUtils.validIpRange(final String startIP, final String endIP)", "testcase": false, "constructor": false}, {"identifier": "isValidIp", "parameters": "(final String ip)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidIp(final String ip)", "full_signature": "public static boolean isValidIp(final String ip)", "class_method_signature": "NetUtils.isValidIp(final String ip)", "testcase": false, "constructor": false}, {"identifier": "is31PrefixCidr", "parameters": "(final String cidr)", "modifiers": "public static", "return": "boolean", "signature": "boolean is31PrefixCidr(final String cidr)", "full_signature": "public static boolean is31PrefixCidr(final String cidr)", "class_method_signature": "NetUtils.is31PrefixCidr(final String cidr)", "testcase": false, "constructor": false}, {"identifier": "isValidCIDR", "parameters": "(final String cidr)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidCIDR(final String cidr)", "full_signature": "public static boolean isValidCIDR(final String cidr)", "class_method_signature": "NetUtils.isValidCIDR(final String cidr)", "testcase": false, "constructor": false}, {"identifier": "isValidNetmask", "parameters": "(final String netmask)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidNetmask(final String netmask)", "full_signature": "public static boolean isValidNetmask(final String netmask)", "class_method_signature": "NetUtils.isValidNetmask(final String netmask)", "testcase": false, "constructor": false}, {"identifier": "parseIpAddress", "parameters": "(final String address)", "modifiers": "private static", "return": "InetAddress", "signature": "InetAddress parseIpAddress(final String address)", "full_signature": "private static InetAddress parseIpAddress(final String address)", "class_method_signature": "NetUtils.parseIpAddress(final String address)", "testcase": false, "constructor": false}, {"identifier": "getCidrFromGatewayAndNetmask", "parameters": "(final String gatewayStr, final String netmaskStr)", "modifiers": "public static", "return": "String", "signature": "String getCidrFromGatewayAndNetmask(final String gatewayStr, final String netmaskStr)", "full_signature": "public static String getCidrFromGatewayAndNetmask(final String gatewayStr, final String netmaskStr)", "class_method_signature": "NetUtils.getCidrFromGatewayAndNetmask(final String gatewayStr, final String netmaskStr)", "testcase": false, "constructor": false}, {"identifier": "getIpRangeFromCidr", "parameters": "(final String cidr, final long size)", "modifiers": "public static", "return": "String[]", "signature": "String[] getIpRangeFromCidr(final String cidr, final long size)", "full_signature": "public static String[] getIpRangeFromCidr(final String cidr, final long size)", "class_method_signature": "NetUtils.getIpRangeFromCidr(final String cidr, final long size)", "testcase": false, "constructor": false}, {"identifier": "getAllIpsFromCidr", "parameters": "(final String cidr, final long size, final Set<Long> usedIps)", "modifiers": "public static", "return": "Set<Long>", "signature": "Set<Long> getAllIpsFromCidr(final String cidr, final long size, final Set<Long> usedIps)", "full_signature": "public static Set<Long> getAllIpsFromCidr(final String cidr, final long size, final Set<Long> usedIps)", "class_method_signature": "NetUtils.getAllIpsFromCidr(final String cidr, final long size, final Set<Long> usedIps)", "testcase": false, "constructor": false}, {"identifier": "getRandomIpFromCidr", "parameters": "(final String startIp, final int size, final SortedSet<Long> avoid)", "modifiers": "public static", "return": "long", "signature": "long getRandomIpFromCidr(final String startIp, final int size, final SortedSet<Long> avoid)", "full_signature": "public static long getRandomIpFromCidr(final String startIp, final int size, final SortedSet<Long> avoid)", "class_method_signature": "NetUtils.getRandomIpFromCidr(final String startIp, final int size, final SortedSet<Long> avoid)", "testcase": false, "constructor": false}, {"identifier": "getRandomIpFromCidr", "parameters": "(final long cidr, final int size, final SortedSet<Long> avoid)", "modifiers": "public static", "return": "long", "signature": "long getRandomIpFromCidr(final long cidr, final int size, final SortedSet<Long> avoid)", "full_signature": "public static long getRandomIpFromCidr(final long cidr, final int size, final SortedSet<Long> avoid)", "class_method_signature": "NetUtils.getRandomIpFromCidr(final long cidr, final int size, final SortedSet<Long> avoid)", "testcase": false, "constructor": false}, {"identifier": "getIpRangeStartIpFromCidr", "parameters": "(final String cidr, final long size)", "modifiers": "public static", "return": "String", "signature": "String getIpRangeStartIpFromCidr(final String cidr, final long size)", "full_signature": "public static String getIpRangeStartIpFromCidr(final String cidr, final long size)", "class_method_signature": "NetUtils.getIpRangeStartIpFromCidr(final String cidr, final long size)", "testcase": false, "constructor": false}, {"identifier": "getIpRangeEndIpFromCidr", "parameters": "(final String cidr, final long size)", "modifiers": "public static", "return": "String", "signature": "String getIpRangeEndIpFromCidr(final String cidr, final long size)", "full_signature": "public static String getIpRangeEndIpFromCidr(final String cidr, final long size)", "class_method_signature": "NetUtils.getIpRangeEndIpFromCidr(final String cidr, final long size)", "testcase": false, "constructor": false}, {"identifier": "sameSubnet", "parameters": "(final String ip1, final String ip2, final String netmask)", "modifiers": "public static", "return": "boolean", "signature": "boolean sameSubnet(final String ip1, final String ip2, final String netmask)", "full_signature": "public static boolean sameSubnet(final String ip1, final String ip2, final String netmask)", "class_method_signature": "NetUtils.sameSubnet(final String ip1, final String ip2, final String netmask)", "testcase": false, "constructor": false}, {"identifier": "sameSubnetCIDR", "parameters": "(final String ip1, final String ip2, final long cidrSize)", "modifiers": "public static", "return": "boolean", "signature": "boolean sameSubnetCIDR(final String ip1, final String ip2, final long cidrSize)", "full_signature": "public static boolean sameSubnetCIDR(final String ip1, final String ip2, final long cidrSize)", "class_method_signature": "NetUtils.sameSubnetCIDR(final String ip1, final String ip2, final long cidrSize)", "testcase": false, "constructor": false}, {"identifier": "getSubNet", "parameters": "(final String ip, final String netmask)", "modifiers": "public static", "return": "String", "signature": "String getSubNet(final String ip, final String netmask)", "full_signature": "public static String getSubNet(final String ip, final String netmask)", "class_method_signature": "NetUtils.getSubNet(final String ip, final String netmask)", "testcase": false, "constructor": false}, {"identifier": "getCidrSubNet", "parameters": "(final String ip, final long cidrSize)", "modifiers": "public static", "return": "String", "signature": "String getCidrSubNet(final String ip, final long cidrSize)", "full_signature": "public static String getCidrSubNet(final String ip, final long cidrSize)", "class_method_signature": "NetUtils.getCidrSubNet(final String ip, final long cidrSize)", "testcase": false, "constructor": false}, {"identifier": "netMaskFromCidr", "parameters": "(final long cidrSize)", "modifiers": "static", "return": "long", "signature": "long netMaskFromCidr(final long cidrSize)", "full_signature": "static long netMaskFromCidr(final long cidrSize)", "class_method_signature": "NetUtils.netMaskFromCidr(final long cidrSize)", "testcase": false, "constructor": false}, {"identifier": "ipAndNetMaskToCidr", "parameters": "(final String ip, final String netmask)", "modifiers": "public static", "return": "String", "signature": "String ipAndNetMaskToCidr(final String ip, final String netmask)", "full_signature": "public static String ipAndNetMaskToCidr(final String ip, final String netmask)", "class_method_signature": "NetUtils.ipAndNetMaskToCidr(final String ip, final String netmask)", "testcase": false, "constructor": false}, {"identifier": "ipAndNetMaskToRange", "parameters": "(final String ip, final String netmask)", "modifiers": "public static", "return": "String[]", "signature": "String[] ipAndNetMaskToRange(final String ip, final String netmask)", "full_signature": "public static String[] ipAndNetMaskToRange(final String ip, final String netmask)", "class_method_signature": "NetUtils.ipAndNetMaskToRange(final String ip, final String netmask)", "testcase": false, "constructor": false}, {"identifier": "getCidr", "parameters": "(final String cidr)", "modifiers": "public static", "return": "Pair<String, Integer>", "signature": "Pair<String, Integer> getCidr(final String cidr)", "full_signature": "public static Pair<String, Integer> getCidr(final String cidr)", "class_method_signature": "NetUtils.getCidr(final String cidr)", "testcase": false, "constructor": false}, {"identifier": "isNetowrkASubsetOrSupersetOfNetworkB", "parameters": "(final String cidrA, final String cidrB)", "modifiers": "public static", "return": "SupersetOrSubset", "signature": "SupersetOrSubset isNetowrkASubsetOrSupersetOfNetworkB(final String cidrA, final String cidrB)", "full_signature": "public static SupersetOrSubset isNetowrkASubsetOrSupersetOfNetworkB(final String cidrA, final String cidrB)", "class_method_signature": "NetUtils.isNetowrkASubsetOrSupersetOfNetworkB(final String cidrA, final String cidrB)", "testcase": false, "constructor": false}, {"identifier": "isNetworkAWithinNetworkB", "parameters": "(final String cidrA, final String cidrB)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNetworkAWithinNetworkB(final String cidrA, final String cidrB)", "full_signature": "public static boolean isNetworkAWithinNetworkB(final String cidrA, final String cidrB)", "class_method_signature": "NetUtils.isNetworkAWithinNetworkB(final String cidrA, final String cidrB)", "testcase": false, "constructor": false}, {"identifier": "areCidrsNotEmpty", "parameters": "(String cidrA, String cidrB)", "modifiers": "static", "return": "boolean", "signature": "boolean areCidrsNotEmpty(String cidrA, String cidrB)", "full_signature": "static boolean areCidrsNotEmpty(String cidrA, String cidrB)", "class_method_signature": "NetUtils.areCidrsNotEmpty(String cidrA, String cidrB)", "testcase": false, "constructor": false}, {"identifier": "cidrToLong", "parameters": "(final String cidr)", "modifiers": "public static", "return": "Long[]", "signature": "Long[] cidrToLong(final String cidr)", "full_signature": "public static Long[] cidrToLong(final String cidr)", "class_method_signature": "NetUtils.cidrToLong(final String cidr)", "testcase": false, "constructor": false}, {"identifier": "getCidrSizeFromString", "parameters": "(final String cidrSize)", "modifiers": "static", "return": "long", "signature": "long getCidrSizeFromString(final String cidrSize)", "full_signature": "static long getCidrSizeFromString(final String cidrSize)", "class_method_signature": "NetUtils.getCidrSizeFromString(final String cidrSize)", "testcase": false, "constructor": false}, {"identifier": "getCidrSubNet", "parameters": "(final String cidr)", "modifiers": "public static", "return": "String", "signature": "String getCidrSubNet(final String cidr)", "full_signature": "public static String getCidrSubNet(final String cidr)", "class_method_signature": "NetUtils.getCidrSubNet(final String cidr)", "testcase": false, "constructor": false}, {"identifier": "getCidrNetmask", "parameters": "(final long cidrSize)", "modifiers": "public static", "return": "String", "signature": "String getCidrNetmask(final long cidrSize)", "full_signature": "public static String getCidrNetmask(final long cidrSize)", "class_method_signature": "NetUtils.getCidrNetmask(final long cidrSize)", "testcase": false, "constructor": false}, {"identifier": "getCidrNetmask", "parameters": "(final String cidr)", "modifiers": "public static", "return": "String", "signature": "String getCidrNetmask(final String cidr)", "full_signature": "public static String getCidrNetmask(final String cidr)", "class_method_signature": "NetUtils.getCidrNetmask(final String cidr)", "testcase": false, "constructor": false}, {"identifier": "cidr2Netmask", "parameters": "(final String cidr)", "modifiers": "public static", "return": "String", "signature": "String cidr2Netmask(final String cidr)", "full_signature": "public static String cidr2Netmask(final String cidr)", "class_method_signature": "NetUtils.cidr2Netmask(final String cidr)", "testcase": false, "constructor": false}, {"identifier": "getCidrSize", "parameters": "(final String netmask)", "modifiers": "public static", "return": "long", "signature": "long getCidrSize(final String netmask)", "full_signature": "public static long getCidrSize(final String netmask)", "class_method_signature": "NetUtils.getCidrSize(final String netmask)", "testcase": false, "constructor": false}, {"identifier": "isValidPort", "parameters": "(final String p)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidPort(final String p)", "full_signature": "public static boolean isValidPort(final String p)", "class_method_signature": "NetUtils.isValidPort(final String p)", "testcase": false, "constructor": false}, {"identifier": "isValidPort", "parameters": "(final int p)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidPort(final int p)", "full_signature": "public static boolean isValidPort(final int p)", "class_method_signature": "NetUtils.isValidPort(final int p)", "testcase": false, "constructor": false}, {"identifier": "isValidLBPort", "parameters": "(final String p)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidLBPort(final String p)", "full_signature": "public static boolean isValidLBPort(final String p)", "class_method_signature": "NetUtils.isValidLBPort(final String p)", "testcase": false, "constructor": false}, {"identifier": "isValidProto", "parameters": "(final String p)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidProto(final String p)", "full_signature": "public static boolean isValidProto(final String p)", "class_method_signature": "NetUtils.isValidProto(final String p)", "testcase": false, "constructor": false}, {"identifier": "isValidSecurityGroupProto", "parameters": "(final String p)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidSecurityGroupProto(final String p)", "full_signature": "public static boolean isValidSecurityGroupProto(final String p)", "class_method_signature": "NetUtils.isValidSecurityGroupProto(final String p)", "testcase": false, "constructor": false}, {"identifier": "isValidAlgorithm", "parameters": "(final String p)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidAlgorithm(final String p)", "full_signature": "public static boolean isValidAlgorithm(final String p)", "class_method_signature": "NetUtils.isValidAlgorithm(final String p)", "testcase": false, "constructor": false}, {"identifier": "isValidAutoScaleAction", "parameters": "(final String p)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidAutoScaleAction(final String p)", "full_signature": "public static boolean isValidAutoScaleAction(final String p)", "class_method_signature": "NetUtils.isValidAutoScaleAction(final String p)", "testcase": false, "constructor": false}, {"identifier": "getLinkLocalNetMask", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getLinkLocalNetMask()", "full_signature": "public static String getLinkLocalNetMask()", "class_method_signature": "NetUtils.getLinkLocalNetMask()", "testcase": false, "constructor": false}, {"identifier": "getLinkLocalGateway", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getLinkLocalGateway()", "full_signature": "public static String getLinkLocalGateway()", "class_method_signature": "NetUtils.getLinkLocalGateway()", "testcase": false, "constructor": false}, {"identifier": "getLinkLocalCIDR", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getLinkLocalCIDR()", "full_signature": "public static String getLinkLocalCIDR()", "class_method_signature": "NetUtils.getLinkLocalCIDR()", "testcase": false, "constructor": false}, {"identifier": "getLinkLocalIPRange", "parameters": "(final int size)", "modifiers": "public static", "return": "String[]", "signature": "String[] getLinkLocalIPRange(final int size)", "full_signature": "public static String[] getLinkLocalIPRange(final int size)", "class_method_signature": "NetUtils.getLinkLocalIPRange(final int size)", "testcase": false, "constructor": false}, {"identifier": "getLinkLocalIpEnd", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getLinkLocalIpEnd()", "full_signature": "public static String getLinkLocalIpEnd()", "class_method_signature": "NetUtils.getLinkLocalIpEnd()", "testcase": false, "constructor": false}, {"identifier": "portRangeToString", "parameters": "(final int portRange[])", "modifiers": "public static", "return": "String", "signature": "String portRangeToString(final int portRange[])", "full_signature": "public static String portRangeToString(final int portRange[])", "class_method_signature": "NetUtils.portRangeToString(final int portRange[])", "testcase": false, "constructor": false}, {"identifier": "verifyDomainNameLabel", "parameters": "(final String hostName, final boolean isHostName)", "modifiers": "public static", "return": "boolean", "signature": "boolean verifyDomainNameLabel(final String hostName, final boolean isHostName)", "full_signature": "public static boolean verifyDomainNameLabel(final String hostName, final boolean isHostName)", "class_method_signature": "NetUtils.verifyDomainNameLabel(final String hostName, final boolean isHostName)", "testcase": false, "constructor": false}, {"identifier": "verifyDomainName", "parameters": "(final String domainName)", "modifiers": "public static", "return": "boolean", "signature": "boolean verifyDomainName(final String domainName)", "full_signature": "public static boolean verifyDomainName(final String domainName)", "class_method_signature": "NetUtils.verifyDomainName(final String domainName)", "testcase": false, "constructor": false}, {"identifier": "getDhcpRange", "parameters": "(final String cidr)", "modifiers": "public static", "return": "String", "signature": "String getDhcpRange(final String cidr)", "full_signature": "public static String getDhcpRange(final String cidr)", "class_method_signature": "NetUtils.getDhcpRange(final String cidr)", "testcase": false, "constructor": false}, {"identifier": "isSameIpRange", "parameters": "(final String cidrA, final String cidrB)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSameIpRange(final String cidrA, final String cidrB)", "full_signature": "public static boolean isSameIpRange(final String cidrA, final String cidrB)", "class_method_signature": "NetUtils.isSameIpRange(final String cidrA, final String cidrB)", "testcase": false, "constructor": false}, {"identifier": "validateGuestCidr", "parameters": "(final String cidr)", "modifiers": "public static", "return": "boolean", "signature": "boolean validateGuestCidr(final String cidr)", "full_signature": "public static boolean validateGuestCidr(final String cidr)", "class_method_signature": "NetUtils.validateGuestCidr(final String cidr)", "testcase": false, "constructor": false}, {"identifier": "verifyInstanceName", "parameters": "(final String instanceName)", "modifiers": "public static", "return": "boolean", "signature": "boolean verifyInstanceName(final String instanceName)", "full_signature": "public static boolean verifyInstanceName(final String instanceName)", "class_method_signature": "NetUtils.verifyInstanceName(final String instanceName)", "testcase": false, "constructor": false}, {"identifier": "isNetworksOverlap", "parameters": "(final String cidrA, final String cidrB)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNetworksOverlap(final String cidrA, final String cidrB)", "full_signature": "public static boolean isNetworksOverlap(final String cidrA, final String cidrB)", "class_method_signature": "NetUtils.isNetworksOverlap(final String cidrA, final String cidrB)", "testcase": false, "constructor": false}, {"identifier": "isValidS2SVpnPolicy", "parameters": "(final String policys)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidS2SVpnPolicy(final String policys)", "full_signature": "public static boolean isValidS2SVpnPolicy(final String policys)", "class_method_signature": "NetUtils.isValidS2SVpnPolicy(final String policys)", "testcase": false, "constructor": false}, {"identifier": "isValidCidrList", "parameters": "(final String cidrList)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidCidrList(final String cidrList)", "full_signature": "public static boolean isValidCidrList(final String cidrList)", "class_method_signature": "NetUtils.isValidCidrList(final String cidrList)", "testcase": false, "constructor": false}, {"identifier": "validateGuestCidrList", "parameters": "(final String guestCidrList)", "modifiers": "public static", "return": "boolean", "signature": "boolean validateGuestCidrList(final String guestCidrList)", "full_signature": "public static boolean validateGuestCidrList(final String guestCidrList)", "class_method_signature": "NetUtils.validateGuestCidrList(final String guestCidrList)", "testcase": false, "constructor": false}, {"identifier": "validateIcmpType", "parameters": "(final long icmpType)", "modifiers": "public static", "return": "boolean", "signature": "boolean validateIcmpType(final long icmpType)", "full_signature": "public static boolean validateIcmpType(final long icmpType)", "class_method_signature": "NetUtils.validateIcmpType(final long icmpType)", "testcase": false, "constructor": false}, {"identifier": "validateIcmpCode", "parameters": "(final long icmpCode)", "modifiers": "public static", "return": "boolean", "signature": "boolean validateIcmpCode(final long icmpCode)", "full_signature": "public static boolean validateIcmpCode(final long icmpCode)", "class_method_signature": "NetUtils.validateIcmpCode(final long icmpCode)", "testcase": false, "constructor": false}, {"identifier": "isValidIpv6", "parameters": "(final String ip)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidIpv6(final String ip)", "full_signature": "public static boolean isValidIpv6(final String ip)", "class_method_signature": "NetUtils.isValidIpv6(final String ip)", "testcase": false, "constructor": false}, {"identifier": "isValidIp6Cidr", "parameters": "(final String ip6Cidr)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidIp6Cidr(final String ip6Cidr)", "full_signature": "public static boolean isValidIp6Cidr(final String ip6Cidr)", "class_method_signature": "NetUtils.isValidIp6Cidr(final String ip6Cidr)", "testcase": false, "constructor": false}, {"identifier": "getIp6CidrSize", "parameters": "(final String ip6Cidr)", "modifiers": "public static", "return": "int", "signature": "int getIp6CidrSize(final String ip6Cidr)", "full_signature": "public static int getIp6CidrSize(final String ip6Cidr)", "class_method_signature": "NetUtils.getIp6CidrSize(final String ip6Cidr)", "testcase": false, "constructor": false}, {"identifier": "getIp6FromRange", "parameters": "(final String ip6Range)", "modifiers": "public static", "return": "String", "signature": "String getIp6FromRange(final String ip6Range)", "full_signature": "public static String getIp6FromRange(final String ip6Range)", "class_method_signature": "NetUtils.getIp6FromRange(final String ip6Range)", "testcase": false, "constructor": false}, {"identifier": "getDuidLL", "parameters": "(final String macAddress)", "modifiers": "public static", "return": "String", "signature": "String getDuidLL(final String macAddress)", "full_signature": "public static String getDuidLL(final String macAddress)", "class_method_signature": "NetUtils.getDuidLL(final String macAddress)", "testcase": false, "constructor": false}, {"identifier": "convertIPv6AddressToBigInteger", "parameters": "(final IPv6Address addr)", "modifiers": "private static", "return": "BigInteger", "signature": "BigInteger convertIPv6AddressToBigInteger(final IPv6Address addr)", "full_signature": "private static BigInteger convertIPv6AddressToBigInteger(final IPv6Address addr)", "class_method_signature": "NetUtils.convertIPv6AddressToBigInteger(final IPv6Address addr)", "testcase": false, "constructor": false}, {"identifier": "countIp6InRange", "parameters": "(final String ip6Range)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger countIp6InRange(final String ip6Range)", "full_signature": "public static BigInteger countIp6InRange(final String ip6Range)", "class_method_signature": "NetUtils.countIp6InRange(final String ip6Range)", "testcase": false, "constructor": false}, {"identifier": "isIp6InRange", "parameters": "(final String ip6, final String ip6Range)", "modifiers": "public static", "return": "boolean", "signature": "boolean isIp6InRange(final String ip6, final String ip6Range)", "full_signature": "public static boolean isIp6InRange(final String ip6, final String ip6Range)", "class_method_signature": "NetUtils.isIp6InRange(final String ip6, final String ip6Range)", "testcase": false, "constructor": false}, {"identifier": "isIp6InNetwork", "parameters": "(final String ip6, final String ip6Cidr)", "modifiers": "public static", "return": "boolean", "signature": "boolean isIp6InNetwork(final String ip6, final String ip6Cidr)", "full_signature": "public static boolean isIp6InNetwork(final String ip6, final String ip6Cidr)", "class_method_signature": "NetUtils.isIp6InNetwork(final String ip6, final String ip6Cidr)", "testcase": false, "constructor": false}, {"identifier": "isIp6RangeOverlap", "parameters": "(final String ipRange1, final String ipRange2)", "modifiers": "public static", "return": "boolean", "signature": "boolean isIp6RangeOverlap(final String ipRange1, final String ipRange2)", "full_signature": "public static boolean isIp6RangeOverlap(final String ipRange1, final String ipRange2)", "class_method_signature": "NetUtils.isIp6RangeOverlap(final String ipRange1, final String ipRange2)", "testcase": false, "constructor": false}, {"identifier": "getNextIp6InRange", "parameters": "(final String currentIp, final String ipRange)", "modifiers": "public static", "return": "String", "signature": "String getNextIp6InRange(final String currentIp, final String ipRange)", "full_signature": "public static String getNextIp6InRange(final String currentIp, final String ipRange)", "class_method_signature": "NetUtils.getNextIp6InRange(final String currentIp, final String ipRange)", "testcase": false, "constructor": false}, {"identifier": "standardizeIp6Address", "parameters": "(final String ip6Addr)", "modifiers": "public static", "return": "String", "signature": "String standardizeIp6Address(final String ip6Addr)", "full_signature": "public static String standardizeIp6Address(final String ip6Addr)", "class_method_signature": "NetUtils.standardizeIp6Address(final String ip6Addr)", "testcase": false, "constructor": false}, {"identifier": "standardizeIp6Cidr", "parameters": "(final String ip6Cidr)", "modifiers": "public static", "return": "String", "signature": "String standardizeIp6Cidr(final String ip6Cidr)", "full_signature": "public static String standardizeIp6Cidr(final String ip6Cidr)", "class_method_signature": "NetUtils.standardizeIp6Cidr(final String ip6Cidr)", "testcase": false, "constructor": false}, {"identifier": "isValidVlan", "parameters": "(String vlan)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidVlan(String vlan)", "full_signature": "public static boolean isValidVlan(String vlan)", "class_method_signature": "NetUtils.isValidVlan(String vlan)", "testcase": false, "constructor": false}, {"identifier": "isSameIsolationId", "parameters": "(String one, String other)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSameIsolationId(String one, String other)", "full_signature": "public static boolean isSameIsolationId(String one, String other)", "class_method_signature": "NetUtils.isSameIsolationId(String one, String other)", "testcase": false, "constructor": false}, {"identifier": "generateUriForPvlan", "parameters": "(final String primaryVlan, final String isolatedPvlan)", "modifiers": "public static", "return": "URI", "signature": "URI generateUriForPvlan(final String primaryVlan, final String isolatedPvlan)", "full_signature": "public static URI generateUriForPvlan(final String primaryVlan, final String isolatedPvlan)", "class_method_signature": "NetUtils.generateUriForPvlan(final String primaryVlan, final String isolatedPvlan)", "testcase": false, "constructor": false}, {"identifier": "getPrimaryPvlanFromUri", "parameters": "(final URI uri)", "modifiers": "public static", "return": "String", "signature": "String getPrimaryPvlanFromUri(final URI uri)", "full_signature": "public static String getPrimaryPvlanFromUri(final URI uri)", "class_method_signature": "NetUtils.getPrimaryPvlanFromUri(final URI uri)", "testcase": false, "constructor": false}, {"identifier": "getIsolatedPvlanFromUri", "parameters": "(final URI uri)", "modifiers": "public static", "return": "String", "signature": "String getIsolatedPvlanFromUri(final URI uri)", "full_signature": "public static String getIsolatedPvlanFromUri(final URI uri)", "class_method_signature": "NetUtils.getIsolatedPvlanFromUri(final URI uri)", "testcase": false, "constructor": false}, {"identifier": "generateMacOnIncrease", "parameters": "(final String baseMac, final long l)", "modifiers": "public static", "return": "String", "signature": "String generateMacOnIncrease(final String baseMac, final long l)", "full_signature": "public static String generateMacOnIncrease(final String baseMac, final long l)", "class_method_signature": "NetUtils.generateMacOnIncrease(final String baseMac, final long l)", "testcase": false, "constructor": false}, {"identifier": "isIpWithtInCidrRange", "parameters": "(final String ipAddress, final String cidr)", "modifiers": "public static", "return": "boolean", "signature": "boolean isIpWithtInCidrRange(final String ipAddress, final String cidr)", "full_signature": "public static boolean isIpWithtInCidrRange(final String ipAddress, final String cidr)", "class_method_signature": "NetUtils.isIpWithtInCidrRange(final String ipAddress, final String cidr)", "testcase": false, "constructor": false}, {"identifier": "IsIpEqualToNetworkOrBroadCastIp", "parameters": "(final String requestedIp, final String cidr, final long size)", "modifiers": "public static", "return": "Boolean", "signature": "Boolean IsIpEqualToNetworkOrBroadCastIp(final String requestedIp, final String cidr, final long size)", "full_signature": "public static Boolean IsIpEqualToNetworkOrBroadCastIp(final String requestedIp, final String cidr, final long size)", "class_method_signature": "NetUtils.IsIpEqualToNetworkOrBroadCastIp(final String requestedIp, final String cidr, final long size)", "testcase": false, "constructor": false}, {"identifier": "isNetworkorBroadcastIP", "parameters": "(String ip, String netmask)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNetworkorBroadcastIP(String ip, String netmask)", "full_signature": "public static boolean isNetworkorBroadcastIP(String ip, String netmask)", "class_method_signature": "NetUtils.isNetworkorBroadcastIP(String ip, String netmask)", "testcase": false, "constructor": false}], "file": "utils/src/main/java/com/cloud/utils/net/NetUtils.java"}, "focal_method": {"identifier": "ip2Long", "parameters": "(final String ip)", "modifiers": "public static", "return": "long", "body": "public static long ip2Long(final String ip) {\n        final String[] tokens = ip.split(\"[.]\");\n        assert tokens.length == 4;\n        long result = 0;\n        for (int i = 0; i < tokens.length; i++) {\n            try {\n                result = result << 8 | Integer.parseInt(tokens[i]);\n            } catch (final NumberFormatException e) {\n                throw new RuntimeException(\"Incorrect number\", e);\n            }\n        }\n\n        return result;\n    }", "signature": "long ip2Long(final String ip)", "full_signature": "public static long ip2Long(final String ip)", "class_method_signature": "NetUtils.ip2Long(final String ip)", "testcase": false, "constructor": false, "invocations": ["split", "parseInt"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}