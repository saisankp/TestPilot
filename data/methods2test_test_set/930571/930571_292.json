{"test_class": {"identifier": "ReflectionObjectModelResolverTest", "superclass": "", "interfaces": "", "fields": [], "file": "jbpm-runtime-manager/src/test/java/org/jbpm/runtime/manager/impl/deploy/ReflectionObjectModelResolverTest.java"}, "test_case": {"identifier": "testSimpleNoArgObjectModel", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSimpleNoArgObjectModel() {\n\t\tObjectModel model = new ObjectModel(\"org.jbpm.runtime.manager.impl.deploy.testobject.SimpleCustomObject\");\n\t\t\n\t\tObjectModelResolver resolver = new ReflectionObjectModelResolver();\n\t\t\n\t\tObject result = resolver.getInstance(model, this.getClass().getClassLoader(), new HashMap<String, Object>());\n\t\tassertNotNull(result);\n\t\tassertTrue(result instanceof SimpleCustomObject);\n\t\tassertEquals(\"default\", ((SimpleCustomObject) result).getName());\n\t}", "signature": "void testSimpleNoArgObjectModel()", "full_signature": "@Test public void testSimpleNoArgObjectModel()", "class_method_signature": "ReflectionObjectModelResolverTest.testSimpleNoArgObjectModel()", "testcase": true, "constructor": false, "invocations": ["getInstance", "getClassLoader", "getClass", "assertNotNull", "assertTrue", "assertEquals", "getName"]}, "focal_class": {"identifier": "ReflectionObjectModelResolver", "superclass": "", "interfaces": "implements ObjectModelResolver", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ReflectionObjectModelResolver.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ReflectionObjectModelResolver.class)", "var_name": "logger"}, {"original_string": "public static final String ID = \"reflection\";", "modifier": "public static final", "type": "String", "declarator": "ID = \"reflection\"", "var_name": "ID"}, {"original_string": "private Map<String, Class<?>> knownContextParamMapping = new HashMap<String, Class<?>>();", "modifier": "private", "type": "Map<String, Class<?>>", "declarator": "knownContextParamMapping = new HashMap<String, Class<?>>()", "var_name": "knownContextParamMapping"}], "methods": [{"identifier": "ReflectionObjectModelResolver", "parameters": "()", "modifiers": "public", "return": "", "signature": " ReflectionObjectModelResolver()", "full_signature": "public  ReflectionObjectModelResolver()", "class_method_signature": "ReflectionObjectModelResolver.ReflectionObjectModelResolver()", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "(ObjectModel model, ClassLoader cl, Map<String, Object> contextParams)", "modifiers": "@Override public", "return": "Object", "signature": "Object getInstance(ObjectModel model, ClassLoader cl, Map<String, Object> contextParams)", "full_signature": "@Override public Object getInstance(ObjectModel model, ClassLoader cl, Map<String, Object> contextParams)", "class_method_signature": "ReflectionObjectModelResolver.getInstance(ObjectModel model, ClassLoader cl, Map<String, Object> contextParams)", "testcase": false, "constructor": false}, {"identifier": "accept", "parameters": "(String resolverId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean accept(String resolverId)", "full_signature": "@Override public boolean accept(String resolverId)", "class_method_signature": "ReflectionObjectModelResolver.accept(String resolverId)", "testcase": false, "constructor": false}, {"identifier": "getClassObject", "parameters": "(String classname, ClassLoader cl)", "modifiers": "protected", "return": "Class<?>", "signature": "Class<?> getClassObject(String classname, ClassLoader cl)", "full_signature": "protected Class<?> getClassObject(String classname, ClassLoader cl)", "class_method_signature": "ReflectionObjectModelResolver.getClassObject(String classname, ClassLoader cl)", "testcase": false, "constructor": false}], "file": "jbpm-runtime-manager/src/main/java/org/jbpm/runtime/manager/impl/deploy/ReflectionObjectModelResolver.java"}, "focal_method": {"identifier": "getInstance", "parameters": "(ObjectModel model, ClassLoader cl, Map<String, Object> contextParams)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n\tpublic Object getInstance(ObjectModel model, ClassLoader cl, Map<String, Object> contextParams) {\n\t\t\n\t\tClass<?> clazz = getClassObject(model.getIdentifier(), cl);\n\t\tObject instance = null;\n\t\tInternalRuntimeManager manager = null;\n\t\tif (contextParams.containsKey(\"runtimeManager\")) {\n\t\t\tmanager = (InternalRuntimeManager) contextParams.get(\"runtimeManager\");\n\t\t\tinstance = manager.getCacheManager().get(clazz.getName());\n\t\t\tif (instance != null) {\n\t\t\t\treturn instance;\n\t\t\t}\n\t\t}\n\t\tif (model.getParameters() == null || model.getParameters().isEmpty()) {\n\t\t\tlogger.debug(\"About to create instance of {} with no arg constructor\", model.getIdentifier());\n\t\t\t// no parameters then use no arg constructor\n\t\t\ttry {\n\t\t\t\tinstance = clazz.newInstance();\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new IllegalArgumentException(\"Unable to create instance (no arg constructor) of type \"\n\t\t\t\t\t\t\t\t\t+ model.getIdentifier() + \" due to \" + e.getMessage(), e);\n\t\t\t}\n\t\t} else {\n\t\t\tlogger.debug(\"About to create instance of {} with {} parameters\", model.getIdentifier(), model.getParameters().size());\n\t\t\t// process parameter instances\n\t\t\tClass<?>[] parameterTypes = new Class<?>[model.getParameters().size()];\n\t\t\tObject[] paramInstances = new Object[model.getParameters().size()];\n\t\t\t\n\t\t\tint index = 0;\n\t\t\tfor (Object param : model.getParameters()) {\n\t\t\t\t\n\t\t\t\tif (param instanceof ObjectModel) {\n\t\t\t\t\tlogger.debug(\"Parameter is of type ObjectModel (id: {}), trying to create instance based on that model\",\n\t\t\t\t\t\t\t((ObjectModel) param).getIdentifier());\n\t\t\t\t\tClass<?> paramclazz = getClassObject(((ObjectModel)param).getIdentifier(), cl);\n\t\t\t\t\tparameterTypes[index] = paramclazz;\n\t\t\t\t\t\n\t\t\t\t\tparamInstances[index] = getInstance(((ObjectModel)param), cl, contextParams);\n\t\t\t\t} else {\n\t\t\t\t\tif (contextParams.containsKey(param)) {\n\t\t\t\t\t\tlogger.debug(\"Parametr references context parametr with name {}\", param);\n\t\t\t\t\t\tObject contextValue = contextParams.get(param);\n\t\t\t\t\t\tClass<?> paramClass = contextValue.getClass();\n\t\t\t\t\t\tif (knownContextParamMapping.containsKey(param)) {\n\t\t\t\t\t\t\tparamClass = knownContextParamMapping.get(param);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tparameterTypes[index] = paramClass;\n\t\t\t\t\t\tparamInstances[index] = contextValue;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlogger.debug(\"Parameter is simple type (string) - {}\", param);\n\t\t\t\t\t\tparameterTypes[index] = param.getClass();\n\t\t\t\t\t\tparamInstances[index] = param;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\ttry {\t\n\t\t\t\tlogger.debug(\"Creating instance of class {} with parameter types {} and parameter instances {}\",\n\t\t\t\t\t\tclazz, parameterTypes, paramInstances);\n\t\t\t\tConstructor<?> constructor = clazz.getConstructor(parameterTypes);\n\t\t\t\tinstance = constructor.newInstance(paramInstances);\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new IllegalArgumentException(\"Unable to create instance (\" + parameterTypes + \" constructor) of type \"\n\t\t\t\t\t\t\t\t\t+ model.getIdentifier() + \" due to \" + e.getMessage(), e);\n\t\t\t}\n\t\t}\n\t\tlogger.debug(\"Created instance : {}\", instance);\n\t\t\n\t\tif (manager != null && instance instanceof Cacheable) {\n\t\t\tmanager.getCacheManager().add(instance.getClass().getName(), instance);\n\t\t}\n\t\treturn instance;\n\t}", "signature": "Object getInstance(ObjectModel model, ClassLoader cl, Map<String, Object> contextParams)", "full_signature": "@Override public Object getInstance(ObjectModel model, ClassLoader cl, Map<String, Object> contextParams)", "class_method_signature": "ReflectionObjectModelResolver.getInstance(ObjectModel model, ClassLoader cl, Map<String, Object> contextParams)", "testcase": false, "constructor": false, "invocations": ["getClassObject", "getIdentifier", "containsKey", "get", "get", "getCacheManager", "getName", "getParameters", "isEmpty", "getParameters", "debug", "getIdentifier", "newInstance", "getIdentifier", "getMessage", "debug", "getIdentifier", "size", "getParameters", "size", "getParameters", "size", "getParameters", "getParameters", "debug", "getIdentifier", "getClassObject", "getIdentifier", "getInstance", "containsKey", "debug", "get", "getClass", "containsKey", "get", "debug", "getClass", "debug", "getConstructor", "newInstance", "getIdentifier", "getMessage", "debug", "add", "getCacheManager", "getName", "getClass"]}, "repository": {"repo_id": 930571, "url": "https://github.com/kiegroup/jbpm", "stars": 1035, "created": "9/22/2010 1:19:52 PM +00:00", "updates": "2020-01-22T03:39:57+00:00", "fork": "False", "license": "licensed"}}