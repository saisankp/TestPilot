{"test_class": {"identifier": "BigDecimalQuantizerTest", "superclass": "", "interfaces": "", "fields": [], "file": "code/src/test/java/com/googlecode/cqengine/quantizer/BigDecimalQuantizerTest.java"}, "test_case": {"identifier": "testWithCompressionFactor_5", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWithCompressionFactor_5() throws Exception {\n        Quantizer<BigDecimal> quantizer = BigDecimalQuantizer.withCompressionFactor(5);\n        // Note: comparing using toString, as double comparison with epsilon would not distinguish 0.0 from -0.0...\n        Assert.assertEquals(\"0\", quantizer.getQuantizedValue(BigDecimal.valueOf(0.0)).toString());\n        Assert.assertEquals(\"0\", quantizer.getQuantizedValue(BigDecimal.valueOf(4.2)).toString());\n        Assert.assertEquals(\"5\", quantizer.getQuantizedValue(BigDecimal.valueOf(5.0)).toString());\n        Assert.assertEquals(\"5\", quantizer.getQuantizedValue(BigDecimal.valueOf(9.9)).toString());\n        Assert.assertEquals(\"10\", quantizer.getQuantizedValue(BigDecimal.valueOf(11.3)).toString());\n        Assert.assertEquals(\"0\", quantizer.getQuantizedValue(BigDecimal.valueOf(-0.0)).toString());\n        Assert.assertEquals(\"0\", quantizer.getQuantizedValue(BigDecimal.valueOf(-4.2)).toString());\n        Assert.assertEquals(\"-5\", quantizer.getQuantizedValue(BigDecimal.valueOf(-5.0)).toString());\n        Assert.assertEquals(\"-5\", quantizer.getQuantizedValue(BigDecimal.valueOf(-9.9)).toString());\n        Assert.assertEquals(\"-10\", quantizer.getQuantizedValue(BigDecimal.valueOf(-11.3)).toString());\n    }", "signature": "void testWithCompressionFactor_5()", "full_signature": "@Test public void testWithCompressionFactor_5()", "class_method_signature": "BigDecimalQuantizerTest.testWithCompressionFactor_5()", "testcase": true, "constructor": false, "invocations": ["withCompressionFactor", "assertEquals", "toString", "getQuantizedValue", "valueOf", "assertEquals", "toString", "getQuantizedValue", "valueOf", "assertEquals", "toString", "getQuantizedValue", "valueOf", "assertEquals", "toString", "getQuantizedValue", "valueOf", "assertEquals", "toString", "getQuantizedValue", "valueOf", "assertEquals", "toString", "getQuantizedValue", "valueOf", "assertEquals", "toString", "getQuantizedValue", "valueOf", "assertEquals", "toString", "getQuantizedValue", "valueOf", "assertEquals", "toString", "getQuantizedValue", "valueOf", "assertEquals", "toString", "getQuantizedValue", "valueOf"]}, "focal_class": {"identifier": "BigDecimalQuantizer", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "BigDecimalQuantizer", "parameters": "()", "modifiers": "", "return": "", "signature": " BigDecimalQuantizer()", "full_signature": "  BigDecimalQuantizer()", "class_method_signature": "BigDecimalQuantizer.BigDecimalQuantizer()", "testcase": false, "constructor": true}, {"identifier": "withCompressionFactor", "parameters": "(int compressionFactor)", "modifiers": "public static", "return": "Quantizer<BigDecimal>", "signature": "Quantizer<BigDecimal> withCompressionFactor(int compressionFactor)", "full_signature": "public static Quantizer<BigDecimal> withCompressionFactor(int compressionFactor)", "class_method_signature": "BigDecimalQuantizer.withCompressionFactor(int compressionFactor)", "testcase": false, "constructor": false}], "file": "code/src/main/java/com/googlecode/cqengine/quantizer/BigDecimalQuantizer.java"}, "focal_method": {"identifier": "withCompressionFactor", "parameters": "(int compressionFactor)", "modifiers": "public static", "return": "Quantizer<BigDecimal>", "body": "public static Quantizer<BigDecimal> withCompressionFactor(int compressionFactor) {\n        return compressionFactor < 2 ? new TruncatingQuantizer() : new TruncatingAndCompressingQuantizer(compressionFactor);\n    }", "signature": "Quantizer<BigDecimal> withCompressionFactor(int compressionFactor)", "full_signature": "public static Quantizer<BigDecimal> withCompressionFactor(int compressionFactor)", "class_method_signature": "BigDecimalQuantizer.withCompressionFactor(int compressionFactor)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 41263775, "url": "https://github.com/npgall/cqengine", "language": "Java", "is_fork": false, "fork_count": 180, "stargazer_count": 1194, "size": 11701, "license": "licensed"}}