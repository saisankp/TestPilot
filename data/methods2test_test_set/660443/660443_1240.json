{"test_class": {"identifier": "PharmacophoreQueryAngleBondTest", "superclass": "", "interfaces": "", "fields": [], "file": "tool/pcore/src/test/java/org/openscience/cdk/pharmacophore/PharmacophoreQueryAngleBondTest.java"}, "test_case": {"identifier": "testMatches", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMatches() {\n        PharmacophoreAtom patom1 = new PharmacophoreAtom(\"[CX2]N\", \"Amine\", new Point3d(1, 1, 1));\n        PharmacophoreAtom patom2 = new PharmacophoreAtom(\"c1ccccc1\", \"Aromatic\", new Point3d(0, 0, 0));\n        PharmacophoreAtom patom3 = new PharmacophoreAtom(\"C\", \"Blah\", new Point3d(1, 0, 0));\n        PharmacophoreAngleBond pbond = new PharmacophoreAngleBond(patom1, patom2, patom3);\n\n        PharmacophoreQueryAtom qatom1 = new PharmacophoreQueryAtom(\"Amine\", \"[CX2]N\");\n        PharmacophoreQueryAtom qatom2 = new PharmacophoreQueryAtom(\"aromatic\", \"c1ccccc1\");\n        PharmacophoreQueryAtom qatom3 = new PharmacophoreQueryAtom(\"blah\", \"C\");\n        PharmacophoreQueryAngleBond qbond1 = new PharmacophoreQueryAngleBond(qatom1, qatom2, qatom3, 54.735);\n        PharmacophoreQueryAngleBond qbond2 = new PharmacophoreQueryAngleBond(qatom1, qatom2, qatom3, 50, 60);\n        PharmacophoreQueryAngleBond qbond3 = new PharmacophoreQueryAngleBond(qatom1, qatom2, qatom3, 60, 80);\n        PharmacophoreQueryBond qbond4 = new PharmacophoreQueryBond(qatom1, qatom2, 1, 2);\n\n        Assert.assertTrue(qbond1.matches(pbond));\n        Assert.assertTrue(qbond2.matches(pbond));\n        Assert.assertFalse(qbond3.matches(pbond));\n        Assert.assertFalse(qbond4.matches(pbond));\n    }", "signature": "void testMatches()", "full_signature": "@Test public void testMatches()", "class_method_signature": "PharmacophoreQueryAngleBondTest.testMatches()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "matches", "assertTrue", "matches", "assertFalse", "matches", "assertFalse", "matches"]}, "focal_class": {"identifier": "PharmacophoreQueryAngleBond", "superclass": "extends Bond", "interfaces": "implements IQueryBond", "fields": [{"original_string": "private double upper;", "modifier": "private", "type": "double", "declarator": "upper", "var_name": "upper"}, {"original_string": "private double lower;", "modifier": "private", "type": "double", "declarator": "lower", "var_name": "lower"}], "methods": [{"identifier": "PharmacophoreQueryAngleBond", "parameters": "()", "modifiers": "public", "return": "", "signature": " PharmacophoreQueryAngleBond()", "full_signature": "public  PharmacophoreQueryAngleBond()", "class_method_signature": "PharmacophoreQueryAngleBond.PharmacophoreQueryAngleBond()", "testcase": false, "constructor": true}, {"identifier": "PharmacophoreQueryAngleBond", "parameters": "(PharmacophoreQueryAtom atom1, PharmacophoreQueryAtom atom2,\n            PharmacophoreQueryAtom atom3, double lower, double upper)", "modifiers": "public", "return": "", "signature": " PharmacophoreQueryAngleBond(PharmacophoreQueryAtom atom1, PharmacophoreQueryAtom atom2,\n            PharmacophoreQueryAtom atom3, double lower, double upper)", "full_signature": "public  PharmacophoreQueryAngleBond(PharmacophoreQueryAtom atom1, PharmacophoreQueryAtom atom2,\n            PharmacophoreQueryAtom atom3, double lower, double upper)", "class_method_signature": "PharmacophoreQueryAngleBond.PharmacophoreQueryAngleBond(PharmacophoreQueryAtom atom1, PharmacophoreQueryAtom atom2,\n            PharmacophoreQueryAtom atom3, double lower, double upper)", "testcase": false, "constructor": true}, {"identifier": "PharmacophoreQueryAngleBond", "parameters": "(PharmacophoreQueryAtom atom1, PharmacophoreQueryAtom atom2,\n            PharmacophoreQueryAtom atom3, double angle)", "modifiers": "public", "return": "", "signature": " PharmacophoreQueryAngleBond(PharmacophoreQueryAtom atom1, PharmacophoreQueryAtom atom2,\n            PharmacophoreQueryAtom atom3, double angle)", "full_signature": "public  PharmacophoreQueryAngleBond(PharmacophoreQueryAtom atom1, PharmacophoreQueryAtom atom2,\n            PharmacophoreQueryAtom atom3, double angle)", "class_method_signature": "PharmacophoreQueryAngleBond.PharmacophoreQueryAngleBond(PharmacophoreQueryAtom atom1, PharmacophoreQueryAtom atom2,\n            PharmacophoreQueryAtom atom3, double angle)", "testcase": false, "constructor": true}, {"identifier": "matches", "parameters": "(IBond bond)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean matches(IBond bond)", "full_signature": "@Override public boolean matches(IBond bond)", "class_method_signature": "PharmacophoreQueryAngleBond.matches(IBond bond)", "testcase": false, "constructor": false}, {"identifier": "getUpper", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getUpper()", "full_signature": "public double getUpper()", "class_method_signature": "PharmacophoreQueryAngleBond.getUpper()", "testcase": false, "constructor": false}, {"identifier": "getLower", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getLower()", "full_signature": "public double getLower()", "class_method_signature": "PharmacophoreQueryAngleBond.getLower()", "testcase": false, "constructor": false}, {"identifier": "round", "parameters": "(double val, int places)", "modifiers": "private", "return": "double", "signature": "double round(double val, int places)", "full_signature": "private double round(double val, int places)", "class_method_signature": "PharmacophoreQueryAngleBond.round(double val, int places)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PharmacophoreQueryAngleBond.toString()", "testcase": false, "constructor": false}], "file": "tool/pcore/src/main/java/org/openscience/cdk/pharmacophore/PharmacophoreQueryAngleBond.java"}, "focal_method": {"identifier": "matches", "parameters": "(IBond bond)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean matches(IBond bond) {\n        bond = BondRef.deref(bond);\n        if (bond instanceof PharmacophoreAngleBond) {\n            PharmacophoreAngleBond pbond = (PharmacophoreAngleBond) bond;\n            double bondLength = round(pbond.getBondLength(), 2);\n            return bondLength >= lower && bondLength <= upper;\n        } else\n            return false;\n    }", "signature": "boolean matches(IBond bond)", "full_signature": "@Override public boolean matches(IBond bond)", "class_method_signature": "PharmacophoreQueryAngleBond.matches(IBond bond)", "testcase": false, "constructor": false, "invocations": ["deref", "round", "getBondLength"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}