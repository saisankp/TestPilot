{"test_class": {"identifier": "ResourceManagerTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "core/src/test/java/ship/build/ResourceManagerTest.java"}, "test_case": {"identifier": "testHandle", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testHandle() {\n    final ProjectFile projectFile = new ProjectFile();\n    final Project project = new Project(randomUUID().toString(), projectFile);\n    final Server server = mock(Server.class);\n    final ResourceManager resourceManager = new ResourceManager(project);\n    final File changedFile = new File(project.getLocation() + \"/\" + randomUUID().toString());\n    final ServerEvent serverEvent =\n        new ServerEvent(server, ANY_CHANGED, singletonList(changedFile));\n\n    resourceManager.handle(serverEvent);\n  }", "signature": "void testHandle()", "full_signature": "@Test public void testHandle()", "class_method_signature": "ResourceManagerTest.testHandle()", "testcase": true, "constructor": false, "invocations": ["toString", "randomUUID", "mock", "getLocation", "toString", "randomUUID", "singletonList", "handle"]}, "focal_class": {"identifier": "ResourceManager", "superclass": "", "interfaces": "implements ServerListener", "fields": [{"original_string": "protected static final Set<Integer> eventFilter =\n      unmodifiableSet(new HashSet(asList(FileWatcher.ANY_CHANGED)));", "modifier": "protected static final", "type": "Set<Integer>", "declarator": "eventFilter =\n      unmodifiableSet(new HashSet(asList(FileWatcher.ANY_CHANGED)))", "var_name": "eventFilter"}, {"original_string": "protected final transient Logger logger = getLogger(getClass());", "modifier": "protected final transient", "type": "Logger", "declarator": "logger = getLogger(getClass())", "var_name": "logger"}, {"original_string": "protected final Map<String, Resource> cache = new HashMap<>();", "modifier": "protected final", "type": "Map<String, Resource>", "declarator": "cache = new HashMap<>()", "var_name": "cache"}, {"original_string": "@Getter\n  protected final Project project;", "modifier": "@Getter\n  protected final", "type": "Project", "declarator": "project", "var_name": "project"}, {"original_string": "@Getter\n  @Setter\n  protected PackageManager packageManager = new PackageManager();", "modifier": "@Getter\n  @Setter\n  protected", "type": "PackageManager", "declarator": "packageManager = new PackageManager()", "var_name": "packageManager"}, {"original_string": "protected final Set<ResourceChangeListener> resourceChangeListeners = new HashSet<>();", "modifier": "protected final", "type": "Set<ResourceChangeListener>", "declarator": "resourceChangeListeners = new HashSet<>()", "var_name": "resourceChangeListeners"}], "methods": [{"identifier": "addResourceChangeListener", "parameters": "(final ResourceChangeListener listener)", "modifiers": "public", "return": "void", "signature": "void addResourceChangeListener(final ResourceChangeListener listener)", "full_signature": "public void addResourceChangeListener(final ResourceChangeListener listener)", "class_method_signature": "ResourceManager.addResourceChangeListener(final ResourceChangeListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeResourceChangeListener", "parameters": "(final ResourceChangeListener listener)", "modifiers": "public", "return": "void", "signature": "void removeResourceChangeListener(final ResourceChangeListener listener)", "full_signature": "public void removeResourceChangeListener(final ResourceChangeListener listener)", "class_method_signature": "ResourceManager.removeResourceChangeListener(final ResourceChangeListener listener)", "testcase": false, "constructor": false}, {"identifier": "fireEvent", "parameters": "(final ResourceChangeEvent event)", "modifiers": "protected", "return": "void", "signature": "void fireEvent(final ResourceChangeEvent event)", "full_signature": "protected void fireEvent(final ResourceChangeEvent event)", "class_method_signature": "ResourceManager.fireEvent(final ResourceChangeEvent event)", "testcase": false, "constructor": false}, {"identifier": "getResource", "parameters": "(final String path)", "modifiers": "public synchronized", "return": "Resource", "signature": "Resource getResource(final String path)", "full_signature": "public synchronized Resource getResource(final String path)", "class_method_signature": "ResourceManager.getResource(final String path)", "testcase": false, "constructor": false}, {"identifier": "isTarget", "parameters": "(final String canonicalPath)", "modifiers": "protected", "return": "boolean", "signature": "boolean isTarget(final String canonicalPath)", "full_signature": "protected boolean isTarget(final String canonicalPath)", "class_method_signature": "ResourceManager.isTarget(final String canonicalPath)", "testcase": false, "constructor": false}, {"identifier": "isTest", "parameters": "(final String canonicalPath)", "modifiers": "protected", "return": "boolean", "signature": "boolean isTest(final String canonicalPath)", "full_signature": "protected boolean isTest(final String canonicalPath)", "class_method_signature": "ResourceManager.isTest(final String canonicalPath)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(final String canonicalPath)", "modifiers": "protected", "return": "Resource", "signature": "Resource create(final String canonicalPath)", "full_signature": "protected Resource create(final String canonicalPath)", "class_method_signature": "ResourceManager.create(final String canonicalPath)", "testcase": false, "constructor": false}, {"identifier": "getPackage", "parameters": "(final String packageName)", "modifiers": "public", "return": "Resource", "signature": "Resource getPackage(final String packageName)", "full_signature": "public Resource getPackage(final String packageName)", "class_method_signature": "ResourceManager.getPackage(final String packageName)", "testcase": false, "constructor": false}, {"identifier": "handle", "parameters": "(final ServerEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void handle(final ServerEvent event)", "full_signature": "@Override public void handle(final ServerEvent event)", "class_method_signature": "ResourceManager.handle(final ServerEvent event)", "testcase": false, "constructor": false}], "file": "core/src/main/java/ship/build/ResourceManager.java"}, "focal_method": {"identifier": "handle", "parameters": "(final ServerEvent event)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void handle(final ServerEvent event) {\n    if (!eventFilter.contains(event.getType())) {\n      logger.trace(\"Unhandled event: {}\", event);\n      return;\n    }\n\n    final Collection<File> files = nvl((Collection<File>) event.getNewData(), EMPTY_LIST);\n    final Optional<Resource> cachedResourceOpt = files.stream().map(file -> {\n      final String path = getCanonicalForm(file.getAbsolutePath());\n      final String projectPath =\n          getCanonicalForm(project.getPath().toAbsolutePath().toString());\n      final Path relativePath =\n          Paths.get(projectPath).relativize(Paths.get(path));\n      logger.trace(\"Project path: {}, Path: {}, Relative path: {}\",\n          projectPath, path, relativePath);\n      final String relativePathStr = relativePath.toString();\n      logger.debug(\"Relative path: {}\", relativePath);\n\n      final String canonicalPath = getCanonicalForm(relativePathStr);\n      logger.trace(\"Project relative path: {}\", canonicalPath);\n      return cache.get(canonicalPath);\n    }).filter(Objects::nonNull).findFirst();\n    if (cachedResourceOpt.isPresent()) {\n      final Resource cached = cachedResourceOpt.get();\n      logger.info(\"{} changed: {}\", cached, event.getType());\n      fireEvent(new ResourceChangeEvent(cached));\n    }\n  }", "signature": "void handle(final ServerEvent event)", "full_signature": "@Override public void handle(final ServerEvent event)", "class_method_signature": "ResourceManager.handle(final ServerEvent event)", "testcase": false, "constructor": false, "invocations": ["contains", "getType", "trace", "nvl", "getNewData", "findFirst", "filter", "map", "stream", "getCanonicalForm", "getAbsolutePath", "getCanonicalForm", "toString", "toAbsolutePath", "getPath", "relativize", "get", "get", "trace", "toString", "debug", "getCanonicalForm", "trace", "get", "isPresent", "get", "info", "getType", "fireEvent"]}, "repository": {"repo_id": 149694816, "url": "https://github.com/aergoio/ship", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 11, "size": 1743, "license": "licensed"}}