{"test_class": {"identifier": "HttpHeaderUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String CONNECTION = HttpRequestHeader.CONNECTION.getName();", "modifier": "private static", "type": "String", "declarator": "CONNECTION = HttpRequestHeader.CONNECTION.getName()", "var_name": "CONNECTION"}], "file": "gateleen-core/src/test/java/org/swisspush/gateleen/core/util/HttpHeaderUtilTest.java"}, "test_case": {"identifier": "removeNonForwardHeadersTest", "parameters": "(TestContext testContext)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void removeNonForwardHeadersTest(TestContext testContext) {\n\n        // Mock an example header\n        CaseInsensitiveHeaders headers = new CaseInsensitiveHeaders();\n        headers.add(CONNECTION, \"one\" );\n        headers.add(CONNECTION, \"two\" );\n        headers.add(CONNECTION, \"three\" );\n        headers.add(\"an-unrelated-one\", \"123\");\n        headers.add(\"another-unrelated\", \"close\");\n        headers.add(\"one\", \"stuff\");\n        headers.add(\"three\", \"other stuff\");\n\n        // Apply filter\n        headers = HttpHeaderUtil.removeNonForwardHeaders(headers);\n\n        // Assert unrelated still exists\n        testContext.assertTrue(headers.contains(\"an-unrelated-one\"));\n        testContext.assertTrue(headers.contains(\"another-unrelated\"));\n\n        // Assert non forwards are removed.\n        testContext.assertFalse(headers.contains(CONNECTION));\n        testContext.assertFalse(headers.contains(\"one\"));\n        testContext.assertFalse(headers.contains(\"three\"));\n\n        // Assert there are exactly the two valid remaining.\n        testContext.assertEquals(2, headers.size());\n    }", "signature": "void removeNonForwardHeadersTest(TestContext testContext)", "full_signature": "@Test public void removeNonForwardHeadersTest(TestContext testContext)", "class_method_signature": "HttpHeaderUtilTest.removeNonForwardHeadersTest(TestContext testContext)", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "add", "add", "add", "add", "removeNonForwardHeaders", "assertTrue", "contains", "assertTrue", "contains", "assertFalse", "contains", "assertFalse", "contains", "assertFalse", "contains", "assertEquals", "size"]}, "focal_class": {"identifier": "HttpHeaderUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "removeNonForwardHeaders", "parameters": "( T headers )", "modifiers": "public static", "return": "T", "signature": "T removeNonForwardHeaders( T headers )", "full_signature": "public static T removeNonForwardHeaders( T headers )", "class_method_signature": "HttpHeaderUtil.removeNonForwardHeaders( T headers )", "testcase": false, "constructor": false}], "file": "gateleen-core/src/main/java/org/swisspush/gateleen/core/util/HttpHeaderUtil.java"}, "focal_method": {"identifier": "removeNonForwardHeaders", "parameters": "( T headers )", "modifiers": "public static", "return": "T", "body": "public static <T extends MultiMap> T removeNonForwardHeaders( T headers ) {\n        final String CONNECTION = HttpRequestHeader.CONNECTION.getName();\n\n        // Remove all headers named by connection-token.\n        headers.getAll(CONNECTION).forEach(headers::remove);\n\n        // Remove the connection headers itself.\n        headers.remove(CONNECTION);\n\n        return headers;\n    }", "signature": "T removeNonForwardHeaders( T headers )", "full_signature": "public static T removeNonForwardHeaders( T headers )", "class_method_signature": "HttpHeaderUtil.removeNonForwardHeaders( T headers )", "testcase": false, "constructor": false, "invocations": ["getName", "forEach", "getAll", "remove"]}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}