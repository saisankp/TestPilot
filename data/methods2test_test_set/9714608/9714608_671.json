{"test_class": {"identifier": "DrawersTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static List<Drawer<?>> drawers;", "modifier": "private static", "type": "List<Drawer<?>>", "declarator": "drawers", "var_name": "drawers"}, {"original_string": "public static Class<Drawer<?>>[] DRAWERS = new Class[] {\n\t\t\tContDrawer1.class,\n\t\t\tMyDrawer1.class,\n\t\t\tMyDrawer2.class,\n\t\t\tMyDrawer3.class,\n\t\t\tMyDrawer4.class,\n\t};", "modifier": "public static", "type": "Class<Drawer<?>>[]", "declarator": "DRAWERS = new Class[] {\n\t\t\tContDrawer1.class,\n\t\t\tMyDrawer1.class,\n\t\t\tMyDrawer2.class,\n\t\t\tMyDrawer3.class,\n\t\t\tMyDrawer4.class,\n\t}", "var_name": "DRAWERS"}], "file": "advanced/nodefx/src/test/java/org/arakhne/afc/nodefx/DrawersTest.java"}, "test_case": {"identifier": "getAllDrawers", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void getAllDrawers() {\n\t\tIterator<Drawer<?>> iterator1 = Drawers.getAllDrawers();\n\t\tassertNotNull(iterator1);\n\t\t\n\t\tassertTrue(iterator1.hasNext());\n\t\tDrawer<?> d1 = iterator1.next();\n\t\tassertTrue(iterator1.hasNext());\n\t\tDrawer<?> d2 = iterator1.next();\n\t\tassertTrue(iterator1.hasNext());\n\t\tDrawer<?> d3 = iterator1.next();\n\t\tassertTrue(iterator1.hasNext());\n\t\tDrawer<?> d4 = iterator1.next();\n\t\tassertTrue(iterator1.hasNext());\n\t\tDrawer<?> d5 = iterator1.next();\n\t\tassertFalse(iterator1.hasNext());\n\n\t\tassertNotNull(d1);\n\t\tassertNotNull(d2);\n\t\tassertNotNull(d3);\n\t\tassertNotNull(d4);\n\t\tassertNotNull(d5);\n\t\t\n\t\tSet<Class<? extends Drawer<?>>> types = new HashSet<>();\n\t\ttypes.add(MyDrawer1.class);\n\t\ttypes.add(MyDrawer2.class);\n\t\ttypes.add(MyDrawer3.class);\n\t\ttypes.add(MyDrawer4.class);\n\t\ttypes.add(ContDrawer1.class);\n\t\t\n\t\tassertTrue(types.remove(d1.getClass()));\n\t\tassertTrue(types.remove(d2.getClass()));\n\t\tassertTrue(types.remove(d3.getClass()));\n\t\tassertTrue(types.remove(d4.getClass()));\n\t\tassertTrue(types.remove(d5.getClass()));\n\t}", "signature": "void getAllDrawers()", "full_signature": "@Test public void getAllDrawers()", "class_method_signature": "DrawersTest.getAllDrawers()", "testcase": true, "constructor": false, "invocations": ["getAllDrawers", "assertNotNull", "assertTrue", "hasNext", "next", "assertTrue", "hasNext", "next", "assertTrue", "hasNext", "next", "assertTrue", "hasNext", "next", "assertTrue", "hasNext", "next", "assertFalse", "hasNext", "assertNotNull", "assertNotNull", "assertNotNull", "assertNotNull", "assertNotNull", "add", "add", "add", "add", "add", "assertTrue", "remove", "getClass", "assertTrue", "remove", "getClass", "assertTrue", "remove", "getClass", "assertTrue", "remove", "getClass", "assertTrue", "remove", "getClass"]}, "focal_class": {"identifier": "Drawers", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static ServiceLoader<Drawer<?>> services;", "modifier": "private static", "type": "ServiceLoader<Drawer<?>>", "declarator": "services", "var_name": "services"}, {"original_string": "private static Iterable<Drawer<?>> iterable;", "modifier": "private static", "type": "Iterable<Drawer<?>>", "declarator": "iterable", "var_name": "iterable"}, {"original_string": "private static SoftValueTreeMap<Class<?>, Drawer<?>> buffer = new SoftValueTreeMap<>(ClassComparator.SINGLETON);", "modifier": "private static", "type": "SoftValueTreeMap<Class<?>, Drawer<?>>", "declarator": "buffer = new SoftValueTreeMap<>(ClassComparator.SINGLETON)", "var_name": "buffer"}, {"original_string": "private static final AtomicBoolean LOCK = new AtomicBoolean();", "modifier": "private static final", "type": "AtomicBoolean", "declarator": "LOCK = new AtomicBoolean()", "var_name": "LOCK"}], "methods": [{"identifier": "Drawers", "parameters": "()", "modifiers": "private", "return": "", "signature": " Drawers()", "full_signature": "private  Drawers()", "class_method_signature": "Drawers.Drawers()", "testcase": false, "constructor": true}, {"identifier": "getLock", "parameters": "()", "modifiers": "private static", "return": "boolean", "signature": "boolean getLock()", "full_signature": "private static boolean getLock()", "class_method_signature": "Drawers.getLock()", "testcase": false, "constructor": false}, {"identifier": "releaseLock", "parameters": "()", "modifiers": "private static", "return": "boolean", "signature": "boolean releaseLock()", "full_signature": "private static boolean releaseLock()", "class_method_signature": "Drawers.releaseLock()", "testcase": false, "constructor": false}, {"identifier": "reload", "parameters": "()", "modifiers": "public static synchronized", "return": "void", "signature": "void reload()", "full_signature": "public static synchronized void reload()", "class_method_signature": "Drawers.reload()", "testcase": false, "constructor": false}, {"identifier": "getAllDrawers", "parameters": "()", "modifiers": "@Pure public static synchronized", "return": "Iterator<Drawer<?>>", "signature": "Iterator<Drawer<?>> getAllDrawers()", "full_signature": "@Pure public static synchronized Iterator<Drawer<?>> getAllDrawers()", "class_method_signature": "Drawers.getAllDrawers()", "testcase": false, "constructor": false}, {"identifier": "setBackedDrawers", "parameters": "(Iterable<Drawer<?>> drawers)", "modifiers": "public static synchronized", "return": "void", "signature": "void setBackedDrawers(Iterable<Drawer<?>> drawers)", "full_signature": "public static synchronized void setBackedDrawers(Iterable<Drawer<?>> drawers)", "class_method_signature": "Drawers.setBackedDrawers(Iterable<Drawer<?>> drawers)", "testcase": false, "constructor": false}, {"identifier": "getDrawerProvidingService", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Pure public static synchronized", "return": "ServiceLoader<Drawer<?>>", "signature": "ServiceLoader<Drawer<?>> getDrawerProvidingService()", "full_signature": "@SuppressWarnings(\"unchecked\") @Pure public static synchronized ServiceLoader<Drawer<?>> getDrawerProvidingService()", "class_method_signature": "Drawers.getDrawerProvidingService()", "testcase": false, "constructor": false}, {"identifier": "getDrawerFor", "parameters": "(Class<? extends T> type)", "modifiers": "@SuppressWarnings(\"unchecked\") @Pure public static synchronized", "return": "Drawer<T>", "signature": "Drawer<T> getDrawerFor(Class<? extends T> type)", "full_signature": "@SuppressWarnings(\"unchecked\") @Pure public static synchronized Drawer<T> getDrawerFor(Class<? extends T> type)", "class_method_signature": "Drawers.getDrawerFor(Class<? extends T> type)", "testcase": false, "constructor": false}, {"identifier": "getDrawerFor", "parameters": "(T instance)", "modifiers": "@Pure @SuppressWarnings(\"unchecked\") public static synchronized", "return": "Drawer<? super T>", "signature": "Drawer<? super T> getDrawerFor(T instance)", "full_signature": "@Pure @SuppressWarnings(\"unchecked\") public static synchronized Drawer<? super T> getDrawerFor(T instance)", "class_method_signature": "Drawers.getDrawerFor(T instance)", "testcase": false, "constructor": false}], "file": "advanced/nodefx/src/main/java/org/arakhne/afc/nodefx/Drawers.java"}, "focal_method": {"identifier": "getAllDrawers", "parameters": "()", "modifiers": "@Pure public static synchronized", "return": "Iterator<Drawer<?>>", "body": "@Pure\n\tpublic static synchronized Iterator<Drawer<?>> getAllDrawers() {\n\t\tif (iterable == null) {\n\t\t\titerable = getDrawerProvidingService();\n\t\t}\n\t\treturn iterable.iterator();\n\t}", "signature": "Iterator<Drawer<?>> getAllDrawers()", "full_signature": "@Pure public static synchronized Iterator<Drawer<?>> getAllDrawers()", "class_method_signature": "Drawers.getAllDrawers()", "testcase": false, "constructor": false, "invocations": ["getDrawerProvidingService", "iterator"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}