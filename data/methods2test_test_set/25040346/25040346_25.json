{"test_class": {"identifier": "FrameBufferTest", "superclass": "extends TestBase", "interfaces": "", "fields": [], "file": "domain/src/test/java/org/m4m/domain/FrameBufferTest.java"}, "test_case": {"identifier": "canNotPull_UntilConfigured", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void canNotPull_UntilConfigured() {\n        FrameBuffer frameBuffer = new FrameBuffer(1);\n\n        assertFalse(frameBuffer.canPull());\n    }", "signature": "void canNotPull_UntilConfigured()", "full_signature": "@Test public void canNotPull_UntilConfigured()", "class_method_signature": "FrameBufferTest.canNotPull_UntilConfigured()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "canPull"]}, "focal_class": {"identifier": "FrameBuffer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private int numberOfTracks;", "modifier": "private", "type": "int", "declarator": "numberOfTracks", "var_name": "numberOfTracks"}, {"original_string": "private final Set<Integer> configuredTrackIndexes = new HashSet<Integer>();", "modifier": "private final", "type": "Set<Integer>", "declarator": "configuredTrackIndexes = new HashSet<Integer>()", "var_name": "configuredTrackIndexes"}, {"original_string": "private final Queue<Frame> frames = new LinkedList<Frame>();", "modifier": "private final", "type": "Queue<Frame>", "declarator": "frames = new LinkedList<Frame>()", "var_name": "frames"}], "methods": [{"identifier": "FrameBuffer", "parameters": "(int numberOfTracks)", "modifiers": "public", "return": "", "signature": " FrameBuffer(int numberOfTracks)", "full_signature": "public  FrameBuffer(int numberOfTracks)", "class_method_signature": "FrameBuffer.FrameBuffer(int numberOfTracks)", "testcase": false, "constructor": true}, {"identifier": "configure", "parameters": "(int trackIndex)", "modifiers": "public", "return": "void", "signature": "void configure(int trackIndex)", "full_signature": "public void configure(int trackIndex)", "class_method_signature": "FrameBuffer.configure(int trackIndex)", "testcase": false, "constructor": false}, {"identifier": "areAllTracksConfigured", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean areAllTracksConfigured()", "full_signature": "public boolean areAllTracksConfigured()", "class_method_signature": "FrameBuffer.areAllTracksConfigured()", "testcase": false, "constructor": false}, {"identifier": "push", "parameters": "(Frame frame)", "modifiers": "public", "return": "void", "signature": "void push(Frame frame)", "full_signature": "public void push(Frame frame)", "class_method_signature": "FrameBuffer.push(Frame frame)", "testcase": false, "constructor": false}, {"identifier": "canPull", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean canPull()", "full_signature": "public boolean canPull()", "class_method_signature": "FrameBuffer.canPull()", "testcase": false, "constructor": false}, {"identifier": "pull", "parameters": "()", "modifiers": "public", "return": "Frame", "signature": "Frame pull()", "full_signature": "public Frame pull()", "class_method_signature": "FrameBuffer.pull()", "testcase": false, "constructor": false}, {"identifier": "addTrack", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void addTrack()", "full_signature": "public void addTrack()", "class_method_signature": "FrameBuffer.addTrack()", "testcase": false, "constructor": false}], "file": "domain/src/main/java/org/m4m/domain/FrameBuffer.java"}, "focal_method": {"identifier": "canPull", "parameters": "()", "modifiers": "public", "return": "boolean", "body": "public boolean canPull() {\n        return areAllTracksConfigured() && !frames.isEmpty();\n    }", "signature": "boolean canPull()", "full_signature": "public boolean canPull()", "class_method_signature": "FrameBuffer.canPull()", "testcase": false, "constructor": false, "invocations": ["areAllTracksConfigured", "isEmpty"]}, "repository": {"repo_id": 25040346, "url": "https://github.com/INDExOS/media-for-mobile", "language": "Java", "is_fork": false, "fork_count": 167, "stargazer_count": 416, "size": 619, "license": "licensed"}}