{"test_class": {"identifier": "SimpleOntologyTest", "superclass": "extends OrmEnabledTestCase", "interfaces": "", "fields": [{"original_string": "private ValueFactory vf;", "modifier": "private", "type": "ValueFactory", "declarator": "vf", "var_name": "vf"}, {"original_string": "private ModelFactory mf;", "modifier": "private", "type": "ModelFactory", "declarator": "mf", "var_name": "mf"}, {"original_string": "private RepositoryManager repoManager = new SimpleRepositoryManager();", "modifier": "private", "type": "RepositoryManager", "declarator": "repoManager = new SimpleRepositoryManager()", "var_name": "repoManager"}, {"original_string": "private IRI classIRI;", "modifier": "private", "type": "IRI", "declarator": "classIRI", "var_name": "classIRI"}, {"original_string": "private IRI classIRIC;", "modifier": "private", "type": "IRI", "declarator": "classIRIC", "var_name": "classIRIC"}, {"original_string": "private IRI classIRID;", "modifier": "private", "type": "IRI", "declarator": "classIRID", "var_name": "classIRID"}, {"original_string": "private IRI classIRIE;", "modifier": "private", "type": "IRI", "declarator": "classIRIE", "var_name": "classIRIE"}, {"original_string": "private IRI dataProp1IRI;", "modifier": "private", "type": "IRI", "declarator": "dataProp1IRI", "var_name": "dataProp1IRI"}, {"original_string": "private IRI dataProp2IRI;", "modifier": "private", "type": "IRI", "declarator": "dataProp2IRI", "var_name": "dataProp2IRI"}, {"original_string": "private IRI objectProp1IRI;", "modifier": "private", "type": "IRI", "declarator": "objectProp1IRI", "var_name": "objectProp1IRI"}, {"original_string": "private IRI objectProp2IRI;", "modifier": "private", "type": "IRI", "declarator": "objectProp2IRI", "var_name": "objectProp2IRI"}, {"original_string": "private IRI errorIRI;", "modifier": "private", "type": "IRI", "declarator": "errorIRI", "var_name": "errorIRI"}, {"original_string": "private IRI importedIRI0;", "modifier": "private", "type": "IRI", "declarator": "importedIRI0", "var_name": "importedIRI0"}, {"original_string": "private IRI importedIRI;", "modifier": "private", "type": "IRI", "declarator": "importedIRI", "var_name": "importedIRI"}, {"original_string": "private IRI catalogIRI;", "modifier": "private", "type": "IRI", "declarator": "catalogIRI", "var_name": "catalogIRI"}, {"original_string": "private IRI skosIRI;", "modifier": "private", "type": "IRI", "declarator": "skosIRI", "var_name": "skosIRI"}, {"original_string": "private Ontology ontology;", "modifier": "private", "type": "Ontology", "declarator": "ontology", "var_name": "ontology"}, {"original_string": "private Ontology ont1;", "modifier": "private", "type": "Ontology", "declarator": "ont1", "var_name": "ont1"}, {"original_string": "private Ontology queryOntology;", "modifier": "private", "type": "Ontology", "declarator": "queryOntology", "var_name": "queryOntology"}, {"original_string": "private Ontology queryVocabulary;", "modifier": "private", "type": "Ontology", "declarator": "queryVocabulary", "var_name": "queryVocabulary"}, {"original_string": "private Ontology onlyDeclared;", "modifier": "private", "type": "Ontology", "declarator": "onlyDeclared", "var_name": "onlyDeclared"}, {"original_string": "private Repository repo;", "modifier": "private", "type": "Repository", "declarator": "repo", "var_name": "repo"}, {"original_string": "private OrmFactory<Dataset> datasetFactory = getRequiredOrmFactory(Dataset.class);", "modifier": "private", "type": "OrmFactory<Dataset>", "declarator": "datasetFactory = getRequiredOrmFactory(Dataset.class)", "var_name": "datasetFactory"}, {"original_string": "private static final String SYSTEM_DEFAULT_NG_SUFFIX = \"_system_dng\";", "modifier": "private static final", "type": "String", "declarator": "SYSTEM_DEFAULT_NG_SUFFIX = \"_system_dng\"", "var_name": "SYSTEM_DEFAULT_NG_SUFFIX"}, {"original_string": "@Mock\n    private OntologyManager ontologyManager;", "modifier": "@Mock\n    private", "type": "OntologyManager", "declarator": "ontologyManager", "var_name": "ontologyManager"}, {"original_string": "@Mock\n    private CatalogManager catalogManager;", "modifier": "@Mock\n    private", "type": "CatalogManager", "declarator": "catalogManager", "var_name": "catalogManager"}, {"original_string": "@Mock\n    private CatalogConfigProvider catalogConfigProvider;", "modifier": "@Mock\n    private", "type": "CatalogConfigProvider", "declarator": "catalogConfigProvider", "var_name": "catalogConfigProvider"}, {"original_string": "@Mock\n    private OntologyId ontologyId;", "modifier": "@Mock\n    private", "type": "OntologyId", "declarator": "ontologyId", "var_name": "ontologyId"}, {"original_string": "@Mock\n    private SesameTransformer transformer;", "modifier": "@Mock\n    private", "type": "SesameTransformer", "declarator": "transformer", "var_name": "transformer"}, {"original_string": "@Mock\n    private BNodeService bNodeService;", "modifier": "@Mock\n    private", "type": "BNodeService", "declarator": "bNodeService", "var_name": "bNodeService"}, {"original_string": "@Mock\n    private RepositoryConfig repositoryConfig;", "modifier": "@Mock\n    private", "type": "RepositoryConfig", "declarator": "repositoryConfig", "var_name": "repositoryConfig"}, {"original_string": "@Mock\n    private DatasetManager datasetManager;", "modifier": "@Mock\n    private", "type": "DatasetManager", "declarator": "datasetManager", "var_name": "datasetManager"}, {"original_string": "@Mock\n    private ImportsResolver importsResolver;", "modifier": "@Mock\n    private", "type": "ImportsResolver", "declarator": "importsResolver", "var_name": "importsResolver"}, {"original_string": "@Mock\n    private Branch localBranch3;", "modifier": "@Mock\n    private", "type": "Branch", "declarator": "localBranch3", "var_name": "localBranch3"}, {"original_string": "@Mock\n    private Branch localBranch2;", "modifier": "@Mock\n    private", "type": "Branch", "declarator": "localBranch2", "var_name": "localBranch2"}], "file": "com.mobi.ontology.impl.repository/src/test/java/com/mobi/ontology/impl/repository/SimpleOntologyTest.java"}, "test_case": {"identifier": "testGetSubClassesOf", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetSubClassesOf() throws Exception {\n        // Setup:\n        Set<Resource> expectedSubjects = Stream.of(vf.createIRI(\"http://mobi.com/ontology#Class1a\"), vf.createIRI(\"http://mobi.com/ontology#Class1b\"),\n                vf.createIRI(\"http://mobi.com/ontology#Class1c\"), vf.createIRI(\"http://mobi.com/ontology#Class2a\"), vf.createIRI(\"http://mobi.com/ontology#Class2b\"),\n                vf.createIRI(\"http://mobi.com/ontology#Class3a\")).collect(Collectors.toSet());\n        Map<String, Set<String>> expectedParentMap = new HashMap<>();\n        expectedParentMap.put(\"http://mobi.com/ontology#Class1a\", Collections.singleton(\"http://mobi.com/ontology#Class1b\"));\n        expectedParentMap.put(\"http://mobi.com/ontology#Class1b\", Collections.singleton(\"http://mobi.com/ontology#Class1c\"));\n        expectedParentMap.put(\"http://mobi.com/ontology#Class2a\", Collections.singleton(\"http://mobi.com/ontology#Class2b\"));\n        Map<String, Set<String>> expectedChildMap = new HashMap<>();\n        expectedChildMap.put(\"http://mobi.com/ontology#Class1b\", Collections.singleton(\"http://mobi.com/ontology#Class1a\"));\n        expectedChildMap.put(\"http://mobi.com/ontology#Class1c\", Collections.singleton(\"http://mobi.com/ontology#Class1b\"));\n        expectedChildMap.put(\"http://mobi.com/ontology#Class2b\", Collections.singleton(\"http://mobi.com/ontology#Class2a\"));\n\n        Hierarchy result = queryOntology.getSubClassesOf(vf, mf);\n        Map<String, Set<String>> parentMap = result.getParentMap();\n        Set<String> parentKeys = parentMap.keySet();\n        assertEquals(expectedParentMap.keySet(), parentKeys);\n        parentKeys.forEach(iri -> assertEquals(expectedParentMap.get(iri), parentMap.get(iri)));\n\n        Map<String, Set<String>> childMap = result.getChildMap();\n        Set<String> childKeys = childMap.keySet();\n        assertEquals(expectedChildMap.keySet(), childKeys);\n        childKeys.forEach(iri -> assertEquals(expectedChildMap.get(iri), childMap.get(iri)));\n\n        assertEquals(expectedSubjects, result.getModel().subjects());\n    }", "signature": "void testGetSubClassesOf()", "full_signature": "@Test public void testGetSubClassesOf()", "class_method_signature": "SimpleOntologyTest.testGetSubClassesOf()", "testcase": true, "constructor": false, "invocations": ["collect", "of", "createIRI", "createIRI", "createIRI", "createIRI", "createIRI", "createIRI", "toSet", "put", "singleton", "put", "singleton", "put", "singleton", "put", "singleton", "put", "singleton", "put", "singleton", "getSubClassesOf", "getParentMap", "keySet", "assertEquals", "keySet", "forEach", "assertEquals", "get", "get", "getChildMap", "keySet", "assertEquals", "keySet", "forEach", "assertEquals", "get", "get", "assertEquals", "subjects", "getModel"]}, "focal_class": {"identifier": "SimpleOntology", "superclass": "", "interfaces": "implements Ontology", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(SimpleOntology.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(SimpleOntology.class)", "var_name": "LOG"}, {"original_string": "private ModelFactory mf;", "modifier": "private", "type": "ModelFactory", "declarator": "mf", "var_name": "mf"}, {"original_string": "private ValueFactory vf;", "modifier": "private", "type": "ValueFactory", "declarator": "vf", "var_name": "vf"}, {"original_string": "private Repository repository;", "modifier": "private", "type": "Repository", "declarator": "repository", "var_name": "repository"}, {"original_string": "private DatasetManager datasetManager;", "modifier": "private", "type": "DatasetManager", "declarator": "datasetManager", "var_name": "datasetManager"}, {"original_string": "private OntologyManager ontologyManager;", "modifier": "private", "type": "OntologyManager", "declarator": "ontologyManager", "var_name": "ontologyManager"}, {"original_string": "private CatalogManager catalogManager;", "modifier": "private", "type": "CatalogManager", "declarator": "catalogManager", "var_name": "catalogManager"}, {"original_string": "private CatalogConfigProvider configProvider;", "modifier": "private", "type": "CatalogConfigProvider", "declarator": "configProvider", "var_name": "configProvider"}, {"original_string": "private ImportsResolver importsResolver;", "modifier": "private", "type": "ImportsResolver", "declarator": "importsResolver", "var_name": "importsResolver"}, {"original_string": "private SesameTransformer transformer;", "modifier": "private", "type": "SesameTransformer", "declarator": "transformer", "var_name": "transformer"}, {"original_string": "private BNodeService bNodeService;", "modifier": "private", "type": "BNodeService", "declarator": "bNodeService", "var_name": "bNodeService"}, {"original_string": "private IRI datasetIRI;", "modifier": "private", "type": "IRI", "declarator": "datasetIRI", "var_name": "datasetIRI"}, {"original_string": "private Set<Resource> importsClosure;", "modifier": "private", "type": "Set<Resource>", "declarator": "importsClosure", "var_name": "importsClosure"}, {"original_string": "private Set<Resource> unresolvedImports;", "modifier": "private", "type": "Set<Resource>", "declarator": "unresolvedImports", "var_name": "unresolvedImports"}, {"original_string": "private Difference difference;", "modifier": "private", "type": "Difference", "declarator": "difference", "var_name": "difference"}, {"original_string": "private static final String GET_SUB_CLASSES_OF;", "modifier": "private static final", "type": "String", "declarator": "GET_SUB_CLASSES_OF", "var_name": "GET_SUB_CLASSES_OF"}, {"original_string": "private static final String GET_CLASSES_FOR;", "modifier": "private static final", "type": "String", "declarator": "GET_CLASSES_FOR", "var_name": "GET_CLASSES_FOR"}, {"original_string": "private static final String GET_PROPERTIES_FOR;", "modifier": "private static final", "type": "String", "declarator": "GET_PROPERTIES_FOR", "var_name": "GET_PROPERTIES_FOR"}, {"original_string": "private static final String GET_SUB_DATATYPE_PROPERTIES_OF;", "modifier": "private static final", "type": "String", "declarator": "GET_SUB_DATATYPE_PROPERTIES_OF", "var_name": "GET_SUB_DATATYPE_PROPERTIES_OF"}, {"original_string": "private static final String GET_SUB_OBJECT_PROPERTIES_OF;", "modifier": "private static final", "type": "String", "declarator": "GET_SUB_OBJECT_PROPERTIES_OF", "var_name": "GET_SUB_OBJECT_PROPERTIES_OF"}, {"original_string": "private static final String GET_CLASSES_WITH_INDIVIDUALS;", "modifier": "private static final", "type": "String", "declarator": "GET_CLASSES_WITH_INDIVIDUALS", "var_name": "GET_CLASSES_WITH_INDIVIDUALS"}, {"original_string": "private static final String SELECT_ENTITY_USAGES;", "modifier": "private static final", "type": "String", "declarator": "SELECT_ENTITY_USAGES", "var_name": "SELECT_ENTITY_USAGES"}, {"original_string": "private static final String CONSTRUCT_ENTITY_USAGES;", "modifier": "private static final", "type": "String", "declarator": "CONSTRUCT_ENTITY_USAGES", "var_name": "CONSTRUCT_ENTITY_USAGES"}, {"original_string": "private static final String GET_CONCEPT_RELATIONSHIPS;", "modifier": "private static final", "type": "String", "declarator": "GET_CONCEPT_RELATIONSHIPS", "var_name": "GET_CONCEPT_RELATIONSHIPS"}, {"original_string": "private static final String GET_CONCEPT_SCHEME_RELATIONSHIPS;", "modifier": "private static final", "type": "String", "declarator": "GET_CONCEPT_SCHEME_RELATIONSHIPS", "var_name": "GET_CONCEPT_SCHEME_RELATIONSHIPS"}, {"original_string": "private static final String GET_SEARCH_RESULTS;", "modifier": "private static final", "type": "String", "declarator": "GET_SEARCH_RESULTS", "var_name": "GET_SEARCH_RESULTS"}, {"original_string": "private static final String GET_SUB_ANNOTATION_PROPERTIES_OF;", "modifier": "private static final", "type": "String", "declarator": "GET_SUB_ANNOTATION_PROPERTIES_OF", "var_name": "GET_SUB_ANNOTATION_PROPERTIES_OF"}, {"original_string": "private static final String GET_CLASS_DATA_PROPERTIES;", "modifier": "private static final", "type": "String", "declarator": "GET_CLASS_DATA_PROPERTIES", "var_name": "GET_CLASS_DATA_PROPERTIES"}, {"original_string": "private static final String GET_CLASS_OBJECT_PROPERTIES;", "modifier": "private static final", "type": "String", "declarator": "GET_CLASS_OBJECT_PROPERTIES", "var_name": "GET_CLASS_OBJECT_PROPERTIES"}, {"original_string": "private static final String GET_ALL_ANNOTATIONS;", "modifier": "private static final", "type": "String", "declarator": "GET_ALL_ANNOTATIONS", "var_name": "GET_ALL_ANNOTATIONS"}, {"original_string": "private static final String GET_ONTOLOGY_ANNOTATIONS;", "modifier": "private static final", "type": "String", "declarator": "GET_ONTOLOGY_ANNOTATIONS", "var_name": "GET_ONTOLOGY_ANNOTATIONS"}, {"original_string": "private static final String GET_INDIVIDUALS_OF_TYPE;", "modifier": "private static final", "type": "String", "declarator": "GET_INDIVIDUALS_OF_TYPE", "var_name": "GET_INDIVIDUALS_OF_TYPE"}, {"original_string": "private static final String GET_ALL_NO_DOMAIN_OBJECT_PROPERTIES;", "modifier": "private static final", "type": "String", "declarator": "GET_ALL_NO_DOMAIN_OBJECT_PROPERTIES", "var_name": "GET_ALL_NO_DOMAIN_OBJECT_PROPERTIES"}, {"original_string": "private static final String GET_ALL_NO_DOMAIN_DATA_PROPERTIES;", "modifier": "private static final", "type": "String", "declarator": "GET_ALL_NO_DOMAIN_DATA_PROPERTIES", "var_name": "GET_ALL_NO_DOMAIN_DATA_PROPERTIES"}, {"original_string": "private static final String GET_ALL_INDIVIDUALS;", "modifier": "private static final", "type": "String", "declarator": "GET_ALL_INDIVIDUALS", "var_name": "GET_ALL_INDIVIDUALS"}, {"original_string": "private static final String ENTITY_BINDING = \"entity\";", "modifier": "private static final", "type": "String", "declarator": "ENTITY_BINDING = \"entity\"", "var_name": "ENTITY_BINDING"}, {"original_string": "private static final String SEARCH_TEXT = \"searchText\";", "modifier": "private static final", "type": "String", "declarator": "SEARCH_TEXT = \"searchText\"", "var_name": "SEARCH_TEXT"}, {"original_string": "private static final String CLOSURE_KEY = \"closure\";", "modifier": "private static final", "type": "String", "declarator": "CLOSURE_KEY = \"closure\"", "var_name": "CLOSURE_KEY"}, {"original_string": "private static final String UNRESOLVED_KEY = \"unresolved\";", "modifier": "private static final", "type": "String", "declarator": "UNRESOLVED_KEY = \"unresolved\"", "var_name": "UNRESOLVED_KEY"}], "methods": [{"identifier": "SimpleOntology", "parameters": "(Model model, Repository cacheRepo, OntologyManager ontologyManager,\n                          CatalogManager catalogManager, CatalogConfigProvider configProvider,\n                          DatasetManager datasetManager, ImportsResolver importsResolver, SesameTransformer transformer,\n                          BNodeService bNodeService, ValueFactory vf, ModelFactory mf)", "modifiers": "public", "return": "", "signature": " SimpleOntology(Model model, Repository cacheRepo, OntologyManager ontologyManager,\n                          CatalogManager catalogManager, CatalogConfigProvider configProvider,\n                          DatasetManager datasetManager, ImportsResolver importsResolver, SesameTransformer transformer,\n                          BNodeService bNodeService, ValueFactory vf, ModelFactory mf)", "full_signature": "public  SimpleOntology(Model model, Repository cacheRepo, OntologyManager ontologyManager,\n                          CatalogManager catalogManager, CatalogConfigProvider configProvider,\n                          DatasetManager datasetManager, ImportsResolver importsResolver, SesameTransformer transformer,\n                          BNodeService bNodeService, ValueFactory vf, ModelFactory mf)", "class_method_signature": "SimpleOntology.SimpleOntology(Model model, Repository cacheRepo, OntologyManager ontologyManager,\n                          CatalogManager catalogManager, CatalogConfigProvider configProvider,\n                          DatasetManager datasetManager, ImportsResolver importsResolver, SesameTransformer transformer,\n                          BNodeService bNodeService, ValueFactory vf, ModelFactory mf)", "testcase": false, "constructor": true}, {"identifier": "SimpleOntology", "parameters": "(String recordCommitKey, Model model, Repository cacheRepo, OntologyManager ontologyManager,\n                          CatalogManager catalogManager, CatalogConfigProvider configProvider,\n                          DatasetManager datasetManager, ImportsResolver importsResolver, SesameTransformer transformer,\n                          BNodeService bNodeService, ValueFactory vf, ModelFactory mf)", "modifiers": "public", "return": "", "signature": " SimpleOntology(String recordCommitKey, Model model, Repository cacheRepo, OntologyManager ontologyManager,\n                          CatalogManager catalogManager, CatalogConfigProvider configProvider,\n                          DatasetManager datasetManager, ImportsResolver importsResolver, SesameTransformer transformer,\n                          BNodeService bNodeService, ValueFactory vf, ModelFactory mf)", "full_signature": "public  SimpleOntology(String recordCommitKey, Model model, Repository cacheRepo, OntologyManager ontologyManager,\n                          CatalogManager catalogManager, CatalogConfigProvider configProvider,\n                          DatasetManager datasetManager, ImportsResolver importsResolver, SesameTransformer transformer,\n                          BNodeService bNodeService, ValueFactory vf, ModelFactory mf)", "class_method_signature": "SimpleOntology.SimpleOntology(String recordCommitKey, Model model, Repository cacheRepo, OntologyManager ontologyManager,\n                          CatalogManager catalogManager, CatalogConfigProvider configProvider,\n                          DatasetManager datasetManager, ImportsResolver importsResolver, SesameTransformer transformer,\n                          BNodeService bNodeService, ValueFactory vf, ModelFactory mf)", "testcase": false, "constructor": true}, {"identifier": "SimpleOntology", "parameters": "(String recordCommitKey, Repository cacheRepo, OntologyManager ontologyManager,\n                          CatalogManager catalogManager, CatalogConfigProvider configProvider,\n                          DatasetManager datasetManager, ImportsResolver importsResolver, SesameTransformer transformer,\n                          BNodeService bNodeService, ValueFactory vf, ModelFactory mf)", "modifiers": "public", "return": "", "signature": " SimpleOntology(String recordCommitKey, Repository cacheRepo, OntologyManager ontologyManager,\n                          CatalogManager catalogManager, CatalogConfigProvider configProvider,\n                          DatasetManager datasetManager, ImportsResolver importsResolver, SesameTransformer transformer,\n                          BNodeService bNodeService, ValueFactory vf, ModelFactory mf)", "full_signature": "public  SimpleOntology(String recordCommitKey, Repository cacheRepo, OntologyManager ontologyManager,\n                          CatalogManager catalogManager, CatalogConfigProvider configProvider,\n                          DatasetManager datasetManager, ImportsResolver importsResolver, SesameTransformer transformer,\n                          BNodeService bNodeService, ValueFactory vf, ModelFactory mf)", "class_method_signature": "SimpleOntology.SimpleOntology(String recordCommitKey, Repository cacheRepo, OntologyManager ontologyManager,\n                          CatalogManager catalogManager, CatalogConfigProvider configProvider,\n                          DatasetManager datasetManager, ImportsResolver importsResolver, SesameTransformer transformer,\n                          BNodeService bNodeService, ValueFactory vf, ModelFactory mf)", "testcase": false, "constructor": true}, {"identifier": "SimpleOntology", "parameters": "(IRI datasetIRI, Model model, Repository cacheRepo, OntologyManager ontologyManager,\n                           CatalogManager catalogManager, CatalogConfigProvider configProvider,\n                           DatasetManager datasetManager, ImportsResolver importsResolver,\n                           SesameTransformer transformer, BNodeService bNodeService, ValueFactory vf, ModelFactory mf)", "modifiers": "private", "return": "", "signature": " SimpleOntology(IRI datasetIRI, Model model, Repository cacheRepo, OntologyManager ontologyManager,\n                           CatalogManager catalogManager, CatalogConfigProvider configProvider,\n                           DatasetManager datasetManager, ImportsResolver importsResolver,\n                           SesameTransformer transformer, BNodeService bNodeService, ValueFactory vf, ModelFactory mf)", "full_signature": "private  SimpleOntology(IRI datasetIRI, Model model, Repository cacheRepo, OntologyManager ontologyManager,\n                           CatalogManager catalogManager, CatalogConfigProvider configProvider,\n                           DatasetManager datasetManager, ImportsResolver importsResolver,\n                           SesameTransformer transformer, BNodeService bNodeService, ValueFactory vf, ModelFactory mf)", "class_method_signature": "SimpleOntology.SimpleOntology(IRI datasetIRI, Model model, Repository cacheRepo, OntologyManager ontologyManager,\n                           CatalogManager catalogManager, CatalogConfigProvider configProvider,\n                           DatasetManager datasetManager, ImportsResolver importsResolver,\n                           SesameTransformer transformer, BNodeService bNodeService, ValueFactory vf, ModelFactory mf)", "testcase": false, "constructor": true}, {"identifier": "setDifference", "parameters": "(Difference difference)", "modifiers": "public", "return": "void", "signature": "void setDifference(Difference difference)", "full_signature": "public void setDifference(Difference difference)", "class_method_signature": "SimpleOntology.setDifference(Difference difference)", "testcase": false, "constructor": false}, {"identifier": "asModel", "parameters": "(ModelFactory factory)", "modifiers": "@Override public", "return": "Model", "signature": "Model asModel(ModelFactory factory)", "full_signature": "@Override public Model asModel(ModelFactory factory)", "class_method_signature": "SimpleOntology.asModel(ModelFactory factory)", "testcase": false, "constructor": false}, {"identifier": "asTurtle", "parameters": "()", "modifiers": "@Override public", "return": "OutputStream", "signature": "OutputStream asTurtle()", "full_signature": "@Override public OutputStream asTurtle()", "class_method_signature": "SimpleOntology.asTurtle()", "testcase": false, "constructor": false}, {"identifier": "asTurtle", "parameters": "(OutputStream outputStream)", "modifiers": "@Override public", "return": "OutputStream", "signature": "OutputStream asTurtle(OutputStream outputStream)", "full_signature": "@Override public OutputStream asTurtle(OutputStream outputStream)", "class_method_signature": "SimpleOntology.asTurtle(OutputStream outputStream)", "testcase": false, "constructor": false}, {"identifier": "asRdfXml", "parameters": "()", "modifiers": "@Override public", "return": "OutputStream", "signature": "OutputStream asRdfXml()", "full_signature": "@Override public OutputStream asRdfXml()", "class_method_signature": "SimpleOntology.asRdfXml()", "testcase": false, "constructor": false}, {"identifier": "asRdfXml", "parameters": "(OutputStream outputStream)", "modifiers": "@Override public", "return": "OutputStream", "signature": "OutputStream asRdfXml(OutputStream outputStream)", "full_signature": "@Override public OutputStream asRdfXml(OutputStream outputStream)", "class_method_signature": "SimpleOntology.asRdfXml(OutputStream outputStream)", "testcase": false, "constructor": false}, {"identifier": "asOwlXml", "parameters": "()", "modifiers": "@Override public", "return": "OutputStream", "signature": "OutputStream asOwlXml()", "full_signature": "@Override public OutputStream asOwlXml()", "class_method_signature": "SimpleOntology.asOwlXml()", "testcase": false, "constructor": false}, {"identifier": "asOwlXml", "parameters": "(OutputStream outputStream)", "modifiers": "@Override public", "return": "OutputStream", "signature": "OutputStream asOwlXml(OutputStream outputStream)", "full_signature": "@Override public OutputStream asOwlXml(OutputStream outputStream)", "class_method_signature": "SimpleOntology.asOwlXml(OutputStream outputStream)", "testcase": false, "constructor": false}, {"identifier": "asJsonLD", "parameters": "(boolean skolemize)", "modifiers": "@Override public", "return": "OutputStream", "signature": "OutputStream asJsonLD(boolean skolemize)", "full_signature": "@Override public OutputStream asJsonLD(boolean skolemize)", "class_method_signature": "SimpleOntology.asJsonLD(boolean skolemize)", "testcase": false, "constructor": false}, {"identifier": "asJsonLD", "parameters": "(boolean skolemize, OutputStream outputStream)", "modifiers": "@Override public", "return": "OutputStream", "signature": "OutputStream asJsonLD(boolean skolemize, OutputStream outputStream)", "full_signature": "@Override public OutputStream asJsonLD(boolean skolemize, OutputStream outputStream)", "class_method_signature": "SimpleOntology.asJsonLD(boolean skolemize, OutputStream outputStream)", "testcase": false, "constructor": false}, {"identifier": "getOntologyOutputStream", "parameters": "(boolean skolemize, boolean prettyPrint, RDFFormat format)", "modifiers": "private", "return": "OutputStream", "signature": "OutputStream getOntologyOutputStream(boolean skolemize, boolean prettyPrint, RDFFormat format)", "full_signature": "private OutputStream getOntologyOutputStream(boolean skolemize, boolean prettyPrint, RDFFormat format)", "class_method_signature": "SimpleOntology.getOntologyOutputStream(boolean skolemize, boolean prettyPrint, RDFFormat format)", "testcase": false, "constructor": false}, {"identifier": "getOntologyOutputStream", "parameters": "(boolean skolemize, boolean prettyPrint, RDFFormat format, OutputStream outputStream)", "modifiers": "private", "return": "OutputStream", "signature": "OutputStream getOntologyOutputStream(boolean skolemize, boolean prettyPrint, RDFFormat format, OutputStream outputStream)", "full_signature": "private OutputStream getOntologyOutputStream(boolean skolemize, boolean prettyPrint, RDFFormat format, OutputStream outputStream)", "class_method_signature": "SimpleOntology.getOntologyOutputStream(boolean skolemize, boolean prettyPrint, RDFFormat format, OutputStream outputStream)", "testcase": false, "constructor": false}, {"identifier": "getOntologyId", "parameters": "()", "modifiers": "@Override public", "return": "OntologyId", "signature": "OntologyId getOntologyId()", "full_signature": "@Override public OntologyId getOntologyId()", "class_method_signature": "SimpleOntology.getOntologyId()", "testcase": false, "constructor": false}, {"identifier": "getUnloadableImportIRIs", "parameters": "()", "modifiers": "@Override public", "return": "Set<IRI>", "signature": "Set<IRI> getUnloadableImportIRIs()", "full_signature": "@Override public Set<IRI> getUnloadableImportIRIs()", "class_method_signature": "SimpleOntology.getUnloadableImportIRIs()", "testcase": false, "constructor": false}, {"identifier": "getImportsClosure", "parameters": "()", "modifiers": "@Override public", "return": "Set<Ontology>", "signature": "Set<Ontology> getImportsClosure()", "full_signature": "@Override public Set<Ontology> getImportsClosure()", "class_method_signature": "SimpleOntology.getImportsClosure()", "testcase": false, "constructor": false}, {"identifier": "getImportedOntologyIRIs", "parameters": "()", "modifiers": "@Override public", "return": "Set<IRI>", "signature": "Set<IRI> getImportedOntologyIRIs()", "full_signature": "@Override public Set<IRI> getImportedOntologyIRIs()", "class_method_signature": "SimpleOntology.getImportedOntologyIRIs()", "testcase": false, "constructor": false}, {"identifier": "getOntologyAnnotations", "parameters": "()", "modifiers": "@Override public", "return": "Set<Annotation>", "signature": "Set<Annotation> getOntologyAnnotations()", "full_signature": "@Override public Set<Annotation> getOntologyAnnotations()", "class_method_signature": "SimpleOntology.getOntologyAnnotations()", "testcase": false, "constructor": false}, {"identifier": "getAllAnnotations", "parameters": "()", "modifiers": "@Override public", "return": "Set<Annotation>", "signature": "Set<Annotation> getAllAnnotations()", "full_signature": "@Override public Set<Annotation> getAllAnnotations()", "class_method_signature": "SimpleOntology.getAllAnnotations()", "testcase": false, "constructor": false}, {"identifier": "getAllAnnotationProperties", "parameters": "()", "modifiers": "@Override public", "return": "Set<AnnotationProperty>", "signature": "Set<AnnotationProperty> getAllAnnotationProperties()", "full_signature": "@Override public Set<AnnotationProperty> getAllAnnotationProperties()", "class_method_signature": "SimpleOntology.getAllAnnotationProperties()", "testcase": false, "constructor": false}, {"identifier": "containsClass", "parameters": "(IRI iri)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsClass(IRI iri)", "full_signature": "@Override public boolean containsClass(IRI iri)", "class_method_signature": "SimpleOntology.containsClass(IRI iri)", "testcase": false, "constructor": false}, {"identifier": "getAllClasses", "parameters": "()", "modifiers": "@Override public", "return": "Set<OClass>", "signature": "Set<OClass> getAllClasses()", "full_signature": "@Override public Set<OClass> getAllClasses()", "class_method_signature": "SimpleOntology.getAllClasses()", "testcase": false, "constructor": false}, {"identifier": "getAllClassObjectProperties", "parameters": "(IRI iri)", "modifiers": "@Override public", "return": "Set<ObjectProperty>", "signature": "Set<ObjectProperty> getAllClassObjectProperties(IRI iri)", "full_signature": "@Override public Set<ObjectProperty> getAllClassObjectProperties(IRI iri)", "class_method_signature": "SimpleOntology.getAllClassObjectProperties(IRI iri)", "testcase": false, "constructor": false}, {"identifier": "getAllNoDomainObjectProperties", "parameters": "()", "modifiers": "@Override public", "return": "Set<ObjectProperty>", "signature": "Set<ObjectProperty> getAllNoDomainObjectProperties()", "full_signature": "@Override public Set<ObjectProperty> getAllNoDomainObjectProperties()", "class_method_signature": "SimpleOntology.getAllNoDomainObjectProperties()", "testcase": false, "constructor": false}, {"identifier": "getAllClassDataProperties", "parameters": "(IRI iri)", "modifiers": "@Override public", "return": "Set<DataProperty>", "signature": "Set<DataProperty> getAllClassDataProperties(IRI iri)", "full_signature": "@Override public Set<DataProperty> getAllClassDataProperties(IRI iri)", "class_method_signature": "SimpleOntology.getAllClassDataProperties(IRI iri)", "testcase": false, "constructor": false}, {"identifier": "getAllNoDomainDataProperties", "parameters": "()", "modifiers": "@Override public", "return": "Set<DataProperty>", "signature": "Set<DataProperty> getAllNoDomainDataProperties()", "full_signature": "@Override public Set<DataProperty> getAllNoDomainDataProperties()", "class_method_signature": "SimpleOntology.getAllNoDomainDataProperties()", "testcase": false, "constructor": false}, {"identifier": "getAllDatatypes", "parameters": "()", "modifiers": "@Override public", "return": "Set<Datatype>", "signature": "Set<Datatype> getAllDatatypes()", "full_signature": "@Override public Set<Datatype> getAllDatatypes()", "class_method_signature": "SimpleOntology.getAllDatatypes()", "testcase": false, "constructor": false}, {"identifier": "getAllObjectProperties", "parameters": "()", "modifiers": "@Override public", "return": "Set<ObjectProperty>", "signature": "Set<ObjectProperty> getAllObjectProperties()", "full_signature": "@Override public Set<ObjectProperty> getAllObjectProperties()", "class_method_signature": "SimpleOntology.getAllObjectProperties()", "testcase": false, "constructor": false}, {"identifier": "getObjectProperty", "parameters": "(IRI iri)", "modifiers": "@Override public", "return": "Optional<ObjectProperty>", "signature": "Optional<ObjectProperty> getObjectProperty(IRI iri)", "full_signature": "@Override public Optional<ObjectProperty> getObjectProperty(IRI iri)", "class_method_signature": "SimpleOntology.getObjectProperty(IRI iri)", "testcase": false, "constructor": false}, {"identifier": "getObjectPropertyRange", "parameters": "(ObjectProperty objectProperty)", "modifiers": "@Override public", "return": "Set<Resource>", "signature": "Set<Resource> getObjectPropertyRange(ObjectProperty objectProperty)", "full_signature": "@Override public Set<Resource> getObjectPropertyRange(ObjectProperty objectProperty)", "class_method_signature": "SimpleOntology.getObjectPropertyRange(ObjectProperty objectProperty)", "testcase": false, "constructor": false}, {"identifier": "getAllDataProperties", "parameters": "()", "modifiers": "@Override public", "return": "Set<DataProperty>", "signature": "Set<DataProperty> getAllDataProperties()", "full_signature": "@Override public Set<DataProperty> getAllDataProperties()", "class_method_signature": "SimpleOntology.getAllDataProperties()", "testcase": false, "constructor": false}, {"identifier": "getDataProperty", "parameters": "(IRI iri)", "modifiers": "@Override public", "return": "Optional<DataProperty>", "signature": "Optional<DataProperty> getDataProperty(IRI iri)", "full_signature": "@Override public Optional<DataProperty> getDataProperty(IRI iri)", "class_method_signature": "SimpleOntology.getDataProperty(IRI iri)", "testcase": false, "constructor": false}, {"identifier": "getDataPropertyRange", "parameters": "(DataProperty dataProperty)", "modifiers": "@Override public", "return": "Set<Resource>", "signature": "Set<Resource> getDataPropertyRange(DataProperty dataProperty)", "full_signature": "@Override public Set<Resource> getDataPropertyRange(DataProperty dataProperty)", "class_method_signature": "SimpleOntology.getDataPropertyRange(DataProperty dataProperty)", "testcase": false, "constructor": false}, {"identifier": "getAllIndividuals", "parameters": "()", "modifiers": "@Override public", "return": "Set<Individual>", "signature": "Set<Individual> getAllIndividuals()", "full_signature": "@Override public Set<Individual> getAllIndividuals()", "class_method_signature": "SimpleOntology.getAllIndividuals()", "testcase": false, "constructor": false}, {"identifier": "getIndividualsOfType", "parameters": "(IRI classIRI)", "modifiers": "@Override public", "return": "Set<Individual>", "signature": "Set<Individual> getIndividualsOfType(IRI classIRI)", "full_signature": "@Override public Set<Individual> getIndividualsOfType(IRI classIRI)", "class_method_signature": "SimpleOntology.getIndividualsOfType(IRI classIRI)", "testcase": false, "constructor": false}, {"identifier": "getIndividualsOfType", "parameters": "(OClass clazz)", "modifiers": "@Override public", "return": "Set<Individual>", "signature": "Set<Individual> getIndividualsOfType(OClass clazz)", "full_signature": "@Override public Set<Individual> getIndividualsOfType(OClass clazz)", "class_method_signature": "SimpleOntology.getIndividualsOfType(OClass clazz)", "testcase": false, "constructor": false}, {"identifier": "getSubClassesOf", "parameters": "(ValueFactory vf, ModelFactory mf)", "modifiers": "@Override public", "return": "Hierarchy", "signature": "Hierarchy getSubClassesOf(ValueFactory vf, ModelFactory mf)", "full_signature": "@Override public Hierarchy getSubClassesOf(ValueFactory vf, ModelFactory mf)", "class_method_signature": "SimpleOntology.getSubClassesOf(ValueFactory vf, ModelFactory mf)", "testcase": false, "constructor": false}, {"identifier": "getSubClassesFor", "parameters": "(IRI iri)", "modifiers": "@Override public", "return": "Set<IRI>", "signature": "Set<IRI> getSubClassesFor(IRI iri)", "full_signature": "@Override public Set<IRI> getSubClassesFor(IRI iri)", "class_method_signature": "SimpleOntology.getSubClassesFor(IRI iri)", "testcase": false, "constructor": false}, {"identifier": "getSubPropertiesFor", "parameters": "(IRI iri)", "modifiers": "@Override public", "return": "Set<IRI>", "signature": "Set<IRI> getSubPropertiesFor(IRI iri)", "full_signature": "@Override public Set<IRI> getSubPropertiesFor(IRI iri)", "class_method_signature": "SimpleOntology.getSubPropertiesFor(IRI iri)", "testcase": false, "constructor": false}, {"identifier": "getSubDatatypePropertiesOf", "parameters": "(ValueFactory vf, ModelFactory mf)", "modifiers": "@Override public", "return": "Hierarchy", "signature": "Hierarchy getSubDatatypePropertiesOf(ValueFactory vf, ModelFactory mf)", "full_signature": "@Override public Hierarchy getSubDatatypePropertiesOf(ValueFactory vf, ModelFactory mf)", "class_method_signature": "SimpleOntology.getSubDatatypePropertiesOf(ValueFactory vf, ModelFactory mf)", "testcase": false, "constructor": false}, {"identifier": "getSubAnnotationPropertiesOf", "parameters": "(ValueFactory vf, ModelFactory mf)", "modifiers": "@Override public", "return": "Hierarchy", "signature": "Hierarchy getSubAnnotationPropertiesOf(ValueFactory vf, ModelFactory mf)", "full_signature": "@Override public Hierarchy getSubAnnotationPropertiesOf(ValueFactory vf, ModelFactory mf)", "class_method_signature": "SimpleOntology.getSubAnnotationPropertiesOf(ValueFactory vf, ModelFactory mf)", "testcase": false, "constructor": false}, {"identifier": "getSubObjectPropertiesOf", "parameters": "(ValueFactory vf, ModelFactory mf)", "modifiers": "@Override public", "return": "Hierarchy", "signature": "Hierarchy getSubObjectPropertiesOf(ValueFactory vf, ModelFactory mf)", "full_signature": "@Override public Hierarchy getSubObjectPropertiesOf(ValueFactory vf, ModelFactory mf)", "class_method_signature": "SimpleOntology.getSubObjectPropertiesOf(ValueFactory vf, ModelFactory mf)", "testcase": false, "constructor": false}, {"identifier": "getClassesWithIndividuals", "parameters": "(ValueFactory vf, ModelFactory mf)", "modifiers": "@Override public", "return": "Hierarchy", "signature": "Hierarchy getClassesWithIndividuals(ValueFactory vf, ModelFactory mf)", "full_signature": "@Override public Hierarchy getClassesWithIndividuals(ValueFactory vf, ModelFactory mf)", "class_method_signature": "SimpleOntology.getClassesWithIndividuals(ValueFactory vf, ModelFactory mf)", "testcase": false, "constructor": false}, {"identifier": "getEntityUsages", "parameters": "(Resource entity)", "modifiers": "@Override public", "return": "TupleQueryResult", "signature": "TupleQueryResult getEntityUsages(Resource entity)", "full_signature": "@Override public TupleQueryResult getEntityUsages(Resource entity)", "class_method_signature": "SimpleOntology.getEntityUsages(Resource entity)", "testcase": false, "constructor": false}, {"identifier": "constructEntityUsages", "parameters": "(Resource entity, ModelFactory modelFactory)", "modifiers": "@Override public", "return": "Model", "signature": "Model constructEntityUsages(Resource entity, ModelFactory modelFactory)", "full_signature": "@Override public Model constructEntityUsages(Resource entity, ModelFactory modelFactory)", "class_method_signature": "SimpleOntology.constructEntityUsages(Resource entity, ModelFactory modelFactory)", "testcase": false, "constructor": false}, {"identifier": "getConceptRelationships", "parameters": "(ValueFactory vf, ModelFactory mf)", "modifiers": "@Override public", "return": "Hierarchy", "signature": "Hierarchy getConceptRelationships(ValueFactory vf, ModelFactory mf)", "full_signature": "@Override public Hierarchy getConceptRelationships(ValueFactory vf, ModelFactory mf)", "class_method_signature": "SimpleOntology.getConceptRelationships(ValueFactory vf, ModelFactory mf)", "testcase": false, "constructor": false}, {"identifier": "getConceptSchemeRelationships", "parameters": "(ValueFactory vf, ModelFactory mf)", "modifiers": "@Override public", "return": "Hierarchy", "signature": "Hierarchy getConceptSchemeRelationships(ValueFactory vf, ModelFactory mf)", "full_signature": "@Override public Hierarchy getConceptSchemeRelationships(ValueFactory vf, ModelFactory mf)", "class_method_signature": "SimpleOntology.getConceptSchemeRelationships(ValueFactory vf, ModelFactory mf)", "testcase": false, "constructor": false}, {"identifier": "getSearchResults", "parameters": "(String searchText, ValueFactory valueFactory)", "modifiers": "@Override public", "return": "TupleQueryResult", "signature": "TupleQueryResult getSearchResults(String searchText, ValueFactory valueFactory)", "full_signature": "@Override public TupleQueryResult getSearchResults(String searchText, ValueFactory valueFactory)", "class_method_signature": "SimpleOntology.getSearchResults(String searchText, ValueFactory valueFactory)", "testcase": false, "constructor": false}, {"identifier": "getTupleQueryResults", "parameters": "(String queryString, boolean includeImports)", "modifiers": "@Override public", "return": "TupleQueryResult", "signature": "TupleQueryResult getTupleQueryResults(String queryString, boolean includeImports)", "full_signature": "@Override public TupleQueryResult getTupleQueryResults(String queryString, boolean includeImports)", "class_method_signature": "SimpleOntology.getTupleQueryResults(String queryString, boolean includeImports)", "testcase": false, "constructor": false}, {"identifier": "getGraphQueryResults", "parameters": "(String queryString, boolean includeImports, ModelFactory modelFactory)", "modifiers": "@Override public", "return": "Model", "signature": "Model getGraphQueryResults(String queryString, boolean includeImports, ModelFactory modelFactory)", "full_signature": "@Override public Model getGraphQueryResults(String queryString, boolean includeImports, ModelFactory modelFactory)", "class_method_signature": "SimpleOntology.getGraphQueryResults(String queryString, boolean includeImports, ModelFactory modelFactory)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "SimpleOntology.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "SimpleOntology.hashCode()", "testcase": false, "constructor": false}, {"identifier": "runGraphQueryOnOntology", "parameters": "(String queryString,\n                                          @Nullable Function<GraphQuery, GraphQuery> addBinding,\n                                          String methodName, boolean includeImports, ModelFactory modelFactory)", "modifiers": "private", "return": "Model", "signature": "Model runGraphQueryOnOntology(String queryString,\n                                          @Nullable Function<GraphQuery, GraphQuery> addBinding,\n                                          String methodName, boolean includeImports, ModelFactory modelFactory)", "full_signature": "private Model runGraphQueryOnOntology(String queryString,\n                                          @Nullable Function<GraphQuery, GraphQuery> addBinding,\n                                          String methodName, boolean includeImports, ModelFactory modelFactory)", "class_method_signature": "SimpleOntology.runGraphQueryOnOntology(String queryString,\n                                          @Nullable Function<GraphQuery, GraphQuery> addBinding,\n                                          String methodName, boolean includeImports, ModelFactory modelFactory)", "testcase": false, "constructor": false}, {"identifier": "runQueryOnOntology", "parameters": "(String queryString,\n                                                @Nullable Function<TupleQuery, TupleQuery> addBinding,\n                                                String methodName, boolean includeImports)", "modifiers": "private", "return": "TupleQueryResult", "signature": "TupleQueryResult runQueryOnOntology(String queryString,\n                                                @Nullable Function<TupleQuery, TupleQuery> addBinding,\n                                                String methodName, boolean includeImports)", "full_signature": "private TupleQueryResult runQueryOnOntology(String queryString,\n                                                @Nullable Function<TupleQuery, TupleQuery> addBinding,\n                                                String methodName, boolean includeImports)", "class_method_signature": "SimpleOntology.runQueryOnOntology(String queryString,\n                                                @Nullable Function<TupleQuery, TupleQuery> addBinding,\n                                                String methodName, boolean includeImports)", "testcase": false, "constructor": false}, {"identifier": "getHierarchy", "parameters": "(TupleQueryResult tupleQueryResult)", "modifiers": "private", "return": "Hierarchy", "signature": "Hierarchy getHierarchy(TupleQueryResult tupleQueryResult)", "full_signature": "private Hierarchy getHierarchy(TupleQueryResult tupleQueryResult)", "class_method_signature": "SimpleOntology.getHierarchy(TupleQueryResult tupleQueryResult)", "testcase": false, "constructor": false}, {"identifier": "getIRISet", "parameters": "(TupleQueryResult tupleQueryResult)", "modifiers": "private", "return": "Set<IRI>", "signature": "Set<IRI> getIRISet(TupleQueryResult tupleQueryResult)", "full_signature": "private Set<IRI> getIRISet(TupleQueryResult tupleQueryResult)", "class_method_signature": "SimpleOntology.getIRISet(TupleQueryResult tupleQueryResult)", "testcase": false, "constructor": false}, {"identifier": "getAnnotationSet", "parameters": "(TupleQueryResult tupleQueryResult)", "modifiers": "private", "return": "Set<Annotation>", "signature": "Set<Annotation> getAnnotationSet(TupleQueryResult tupleQueryResult)", "full_signature": "private Set<Annotation> getAnnotationSet(TupleQueryResult tupleQueryResult)", "class_method_signature": "SimpleOntology.getAnnotationSet(TupleQueryResult tupleQueryResult)", "testcase": false, "constructor": false}, {"identifier": "loadOntologyIntoCache", "parameters": "(Resource ontologyId, @Nullable String key, Model ontModel,\n                                                             Repository cacheRepo, OntologyManager ontologyManager)", "modifiers": "private", "return": "Map<String, Set<Resource>>", "signature": "Map<String, Set<Resource>> loadOntologyIntoCache(Resource ontologyId, @Nullable String key, Model ontModel,\n                                                             Repository cacheRepo, OntologyManager ontologyManager)", "full_signature": "private Map<String, Set<Resource>> loadOntologyIntoCache(Resource ontologyId, @Nullable String key, Model ontModel,\n                                                             Repository cacheRepo, OntologyManager ontologyManager)", "class_method_signature": "SimpleOntology.loadOntologyIntoCache(Resource ontologyId, @Nullable String key, Model ontModel,\n                                                             Repository cacheRepo, OntologyManager ontologyManager)", "testcase": false, "constructor": false}, {"identifier": "addOntologyToRepo", "parameters": "(Repository repository, Model ontologyModel, Resource datasetIRI,\n                                   Resource ontologyIRI, boolean addTimestamp)", "modifiers": "private", "return": "void", "signature": "void addOntologyToRepo(Repository repository, Model ontologyModel, Resource datasetIRI,\n                                   Resource ontologyIRI, boolean addTimestamp)", "full_signature": "private void addOntologyToRepo(Repository repository, Model ontologyModel, Resource datasetIRI,\n                                   Resource ontologyIRI, boolean addTimestamp)", "class_method_signature": "SimpleOntology.addOntologyToRepo(Repository repository, Model ontologyModel, Resource datasetIRI,\n                                   Resource ontologyIRI, boolean addTimestamp)", "testcase": false, "constructor": false}, {"identifier": "addImportsToSets", "parameters": "(List<Resource> imports, Set<Resource> processedImports,\n                                  List<Resource> importsToProcess, Resource importIRI)", "modifiers": "private", "return": "void", "signature": "void addImportsToSets(List<Resource> imports, Set<Resource> processedImports,\n                                  List<Resource> importsToProcess, Resource importIRI)", "full_signature": "private void addImportsToSets(List<Resource> imports, Set<Resource> processedImports,\n                                  List<Resource> importsToProcess, Resource importIRI)", "class_method_signature": "SimpleOntology.addImportsToSets(List<Resource> imports, Set<Resource> processedImports,\n                                  List<Resource> importsToProcess, Resource importIRI)", "testcase": false, "constructor": false}, {"identifier": "getImportsFromModel", "parameters": "(Model model)", "modifiers": "private", "return": "List<Resource>", "signature": "List<Resource> getImportsFromModel(Model model)", "full_signature": "private List<Resource> getImportsFromModel(Model model)", "class_method_signature": "SimpleOntology.getImportsFromModel(Model model)", "testcase": false, "constructor": false}, {"identifier": "getDatasetIRI", "parameters": "(Resource ontologyIRI, OntologyManager ontologyManager)", "modifiers": "private", "return": "IRI", "signature": "IRI getDatasetIRI(Resource ontologyIRI, OntologyManager ontologyManager)", "full_signature": "private IRI getDatasetIRI(Resource ontologyIRI, OntologyManager ontologyManager)", "class_method_signature": "SimpleOntology.getDatasetIRI(Resource ontologyIRI, OntologyManager ontologyManager)", "testcase": false, "constructor": false}, {"identifier": "getDatasetConnection", "parameters": "()", "modifiers": "private", "return": "DatasetConnection", "signature": "DatasetConnection getDatasetConnection()", "full_signature": "private DatasetConnection getDatasetConnection()", "class_method_signature": "SimpleOntology.getDatasetConnection()", "testcase": false, "constructor": false}, {"identifier": "applyDifferenceIfPresent", "parameters": "(DatasetConnection conn)", "modifiers": "private", "return": "void", "signature": "void applyDifferenceIfPresent(DatasetConnection conn)", "full_signature": "private void applyDifferenceIfPresent(DatasetConnection conn)", "class_method_signature": "SimpleOntology.applyDifferenceIfPresent(DatasetConnection conn)", "testcase": false, "constructor": false}, {"identifier": "createTempImport", "parameters": "(IRI importedDatasetIRI, Model model, DatasetConnection conn)", "modifiers": "private", "return": "void", "signature": "void createTempImport(IRI importedDatasetIRI, Model model, DatasetConnection conn)", "full_signature": "private void createTempImport(IRI importedDatasetIRI, Model model, DatasetConnection conn)", "class_method_signature": "SimpleOntology.createTempImport(IRI importedDatasetIRI, Model model, DatasetConnection conn)", "testcase": false, "constructor": false}, {"identifier": "undoApplyDifferenceIfPresent", "parameters": "(RepositoryConnection conn)", "modifiers": "private", "return": "void", "signature": "void undoApplyDifferenceIfPresent(RepositoryConnection conn)", "full_signature": "private void undoApplyDifferenceIfPresent(RepositoryConnection conn)", "class_method_signature": "SimpleOntology.undoApplyDifferenceIfPresent(RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "getStartTime", "parameters": "()", "modifiers": "private", "return": "long", "signature": "long getStartTime()", "full_signature": "private long getStartTime()", "class_method_signature": "SimpleOntology.getStartTime()", "testcase": false, "constructor": false}, {"identifier": "logTrace", "parameters": "(String methodName, Long start)", "modifiers": "private", "return": "void", "signature": "void logTrace(String methodName, Long start)", "full_signature": "private void logTrace(String methodName, Long start)", "class_method_signature": "SimpleOntology.logTrace(String methodName, Long start)", "testcase": false, "constructor": false}], "file": "com.mobi.ontology.impl.repository/src/main/java/com/mobi/ontology/impl/repository/SimpleOntology.java"}, "focal_method": {"identifier": "getSubClassesOf", "parameters": "(ValueFactory vf, ModelFactory mf)", "modifiers": "@Override public", "return": "Hierarchy", "body": "@Override\n    public Hierarchy getSubClassesOf(ValueFactory vf, ModelFactory mf) {\n        return getHierarchy(runQueryOnOntology(GET_SUB_CLASSES_OF, null, \"getSubClassesOf(ontology)\", true));\n    }", "signature": "Hierarchy getSubClassesOf(ValueFactory vf, ModelFactory mf)", "full_signature": "@Override public Hierarchy getSubClassesOf(ValueFactory vf, ModelFactory mf)", "class_method_signature": "SimpleOntology.getSubClassesOf(ValueFactory vf, ModelFactory mf)", "testcase": false, "constructor": false, "invocations": ["getHierarchy", "runQueryOnOntology"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}