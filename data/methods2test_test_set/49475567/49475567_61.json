{"test_class": {"identifier": "FieldConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private FieldConverter.Metadata metadata;", "modifier": "private", "type": "FieldConverter.Metadata", "declarator": "metadata", "var_name": "metadata"}, {"original_string": "private FieldConverter converter;", "modifier": "private", "type": "FieldConverter", "declarator": "converter", "var_name": "converter"}, {"original_string": "private HierarchicalStreamReader readerMock;", "modifier": "private", "type": "HierarchicalStreamReader", "declarator": "readerMock", "var_name": "readerMock"}, {"original_string": "private UnmarshallingContext contextMock;", "modifier": "private", "type": "UnmarshallingContext", "declarator": "contextMock", "var_name": "contextMock"}, {"original_string": "private String id;", "modifier": "private", "type": "String", "declarator": "id", "var_name": "id"}, {"original_string": "private String start;", "modifier": "private", "type": "String", "declarator": "start", "var_name": "start"}, {"original_string": "private String length;", "modifier": "private", "type": "String", "declarator": "length", "var_name": "length"}, {"original_string": "private String type;", "modifier": "private", "type": "String", "declarator": "type", "var_name": "type"}, {"original_string": "private String isInput;", "modifier": "private", "type": "String", "declarator": "isInput", "var_name": "isInput"}, {"original_string": "private String alias;", "modifier": "private", "type": "String", "declarator": "alias", "var_name": "alias"}, {"original_string": "private String whitespace;", "modifier": "private", "type": "String", "declarator": "whitespace", "var_name": "whitespace"}], "file": "geoclient-core/src/test/java/gov/nyc/doitt/gis/geoclient/config/xml/FieldConverterTest.java"}, "test_case": {"identifier": "testUnmarshal_compositeType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUnmarshal_compositeType() {\n        prepareReaderMock(this.type);\n        Field result = (Field) this.converter.unmarshal(readerMock, contextMock);\n        assertFieldResult(true, result);\n    }", "signature": "void testUnmarshal_compositeType()", "full_signature": "@Test public void testUnmarshal_compositeType()", "class_method_signature": "FieldConverterTest.testUnmarshal_compositeType()", "testcase": true, "constructor": false, "invocations": ["prepareReaderMock", "unmarshal", "assertFieldResult"]}, "focal_class": {"identifier": "FieldConverter", "superclass": "", "interfaces": "implements Converter", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(FieldConverter.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(FieldConverter.class)", "var_name": "log"}, {"original_string": "private final Metadata metadata;", "modifier": "private final", "type": "Metadata", "declarator": "metadata", "var_name": "metadata"}], "methods": [{"identifier": "FieldConverter", "parameters": "(Metadata metadata)", "modifiers": "public", "return": "", "signature": " FieldConverter(Metadata metadata)", "full_signature": "public  FieldConverter(Metadata metadata)", "class_method_signature": "FieldConverter.FieldConverter(Metadata metadata)", "testcase": false, "constructor": true}, {"identifier": "canConvert", "parameters": "(@SuppressWarnings(\"rawtypes\") Class type)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canConvert(@SuppressWarnings(\"rawtypes\") Class type)", "full_signature": "@Override public boolean canConvert(@SuppressWarnings(\"rawtypes\") Class type)", "class_method_signature": "FieldConverter.canConvert(@SuppressWarnings(\"rawtypes\") Class type)", "testcase": false, "constructor": false}, {"identifier": "marshal", "parameters": "(Object source, HierarchicalStreamWriter writer, MarshallingContext context)", "modifiers": "@Override public", "return": "void", "signature": "void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context)", "full_signature": "@Override public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context)", "class_method_signature": "FieldConverter.marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context)", "testcase": false, "constructor": false}, {"identifier": "unmarshal", "parameters": "(HierarchicalStreamReader reader, UnmarshallingContext context)", "modifiers": "@Override public", "return": "Object", "signature": "Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context)", "full_signature": "@Override public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context)", "class_method_signature": "FieldConverter.unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context)", "testcase": false, "constructor": false}], "file": "geoclient-core/src/main/java/gov/nyc/doitt/gis/geoclient/config/xml/FieldConverter.java"}, "focal_method": {"identifier": "unmarshal", "parameters": "(HierarchicalStreamReader reader, UnmarshallingContext context)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n        String id = reader.getAttribute(metadata.xmlFieldAttributeId);\n        // The start value from XML is 1-indexed and needs to be adjusted for\n        // the Field class which expects a zero-indexed start value.\n        int start = Integer.valueOf(reader.getAttribute(metadata.xmlFieldAttributeStart)) - 1;\n        int length = Integer.valueOf(reader.getAttribute(metadata.xmlFieldAttributeLength));\n        boolean isComposite = metadata.xmlFieldValueCompositeType\n                .equalsIgnoreCase(reader.getAttribute(metadata.xmlFieldAttributeType));\n        boolean isInput = \"true\".equalsIgnoreCase(reader.getAttribute(metadata.xmlFieldAttributeInput));\n        String alias = reader.getAttribute(metadata.xmlFieldAttributeAlias);\n        boolean whitespace = \"true\".equalsIgnoreCase(reader.getAttribute(metadata.xmlFieldAttributeWhitespace));\n        Field field = new Field(id, start, length, isComposite, isInput, alias, whitespace);\n        log.debug(\"Created {}\", field);\n        return field;\n    }", "signature": "Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context)", "full_signature": "@Override public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context)", "class_method_signature": "FieldConverter.unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context)", "testcase": false, "constructor": false, "invocations": ["getAttribute", "valueOf", "getAttribute", "valueOf", "getAttribute", "equalsIgnoreCase", "getAttribute", "equalsIgnoreCase", "getAttribute", "getAttribute", "equalsIgnoreCase", "getAttribute", "debug"]}, "repository": {"repo_id": 49475567, "url": "https://github.com/CityOfNewYork/geoclient", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 42, "size": 9801, "license": "licensed"}}