{"test_class": {"identifier": "DefaultRetriableLockFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  private RetryTemplateConverter retryTemplateConverter;", "modifier": "@Mock\n  private", "type": "RetryTemplateConverter", "declarator": "retryTemplateConverter", "var_name": "retryTemplateConverter"}, {"original_string": "@Mock\n  private Lock lock;", "modifier": "@Mock\n  private", "type": "Lock", "declarator": "lock", "var_name": "lock"}, {"original_string": "@Mock\n  private Locked locked;", "modifier": "@Mock\n  private", "type": "Locked", "declarator": "locked", "var_name": "locked"}, {"original_string": "@Mock\n  private RetryTemplate retryTemplate;", "modifier": "@Mock\n  private", "type": "RetryTemplate", "declarator": "retryTemplate", "var_name": "retryTemplate"}], "file": "distributed-lock-core/src/test/java/com/github/alturkovic/lock/retry/DefaultRetriableLockFactoryTest.java"}, "test_case": {"identifier": "shouldGenerateRetriableLock", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldGenerateRetriableLock() {\n    when(retryTemplateConverter.construct(eq(locked))).thenReturn(retryTemplate);\n\n    final var factory = new DefaultRetriableLockFactory(retryTemplateConverter);\n    final var retriableLock = factory.generate(lock, locked);\n\n    assertThat(retriableLock.getLock()).isEqualTo(lock);\n    assertThat(retriableLock.getRetryTemplate()).isEqualTo(retryTemplate);\n  }", "signature": "void shouldGenerateRetriableLock()", "full_signature": "@Test public void shouldGenerateRetriableLock()", "class_method_signature": "DefaultRetriableLockFactoryTest.shouldGenerateRetriableLock()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "construct", "eq", "generate", "isEqualTo", "assertThat", "getLock", "isEqualTo", "assertThat", "getRetryTemplate"]}, "focal_class": {"identifier": "DefaultRetriableLockFactory", "superclass": "", "interfaces": "implements RetriableLockFactory", "fields": [{"original_string": "private final RetryTemplateConverter retryTemplateConverter;", "modifier": "private final", "type": "RetryTemplateConverter", "declarator": "retryTemplateConverter", "var_name": "retryTemplateConverter"}], "methods": [{"identifier": "generate", "parameters": "(final Lock lock, final Locked locked)", "modifiers": "@Override public", "return": "RetriableLock", "signature": "RetriableLock generate(final Lock lock, final Locked locked)", "full_signature": "@Override public RetriableLock generate(final Lock lock, final Locked locked)", "class_method_signature": "DefaultRetriableLockFactory.generate(final Lock lock, final Locked locked)", "testcase": false, "constructor": false}], "file": "distributed-lock-core/src/main/java/com/github/alturkovic/lock/retry/DefaultRetriableLockFactory.java"}, "focal_method": {"identifier": "generate", "parameters": "(final Lock lock, final Locked locked)", "modifiers": "@Override public", "return": "RetriableLock", "body": "@Override\n  public RetriableLock generate(final Lock lock, final Locked locked) {\n    return new RetriableLock(lock, retryTemplateConverter.construct(locked));\n  }", "signature": "RetriableLock generate(final Lock lock, final Locked locked)", "full_signature": "@Override public RetriableLock generate(final Lock lock, final Locked locked)", "class_method_signature": "DefaultRetriableLockFactory.generate(final Lock lock, final Locked locked)", "testcase": false, "constructor": false, "invocations": ["construct"]}, "repository": {"repo_id": 93310060, "url": "https://github.com/alturkovic/distributed-lock", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 77, "size": 282, "license": "licensed"}}