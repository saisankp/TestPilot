{"test_class": {"identifier": "IterativeComQueueTest", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final String TRAIN_DATA = \"trainData\";", "modifier": "private static final", "type": "String", "declarator": "TRAIN_DATA = \"trainData\"", "var_name": "TRAIN_DATA"}, {"original_string": "private static final String COEFS = \"coefs\";", "modifier": "private static final", "type": "String", "declarator": "COEFS = \"coefs\"", "var_name": "COEFS"}, {"original_string": "private static final String SAMPLE_COUNT = \"sampleCount\";", "modifier": "private static final", "type": "String", "declarator": "SAMPLE_COUNT = \"sampleCount\"", "var_name": "SAMPLE_COUNT"}, {"original_string": "private static final String COEFS_ARRAY = \"coefsArray\";", "modifier": "private static final", "type": "String", "declarator": "COEFS_ARRAY = \"coefsArray\"", "var_name": "COEFS_ARRAY"}], "file": "core/src/test/java/com/alibaba/alink/common/comqueue/IterativeComQueueTest.java"}, "test_case": {"identifier": "testICQLinearRegression", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testICQLinearRegression() throws Exception {\n\t\tfinal int m = 10000;\n\t\tfinal int n = 3;\n\n\t\tList<Tuple2<DenseVector, Double>> data = new ArrayList<>();\n\n\t\tfor (int i = 0; i < m; ++i) {\n\t\t\tDenseVector feature = DenseVector.rand(n);\n\t\t\tdata.add(Tuple2.of(feature.append(1.0), feature.dot(DenseVector.ones(n))));\n\t\t}\n\n\t\tDataSet<Tuple2<DenseVector, Double>> trainData =\n\t\t\tMLEnvironmentFactory\n\t\t\t\t.getDefault()\n\t\t\t\t.getExecutionEnvironment()\n\t\t\t\t.fromCollection(data);\n\n\t\tDataSet<DenseVector> initialCoefs =\n\t\t\tMLEnvironmentFactory\n\t\t\t\t.getDefault()\n\t\t\t\t.getExecutionEnvironment()\n\t\t\t\t.fromCollection(Collections.singletonList(DenseVector.zeros(n + 1)));\n\n\t\tDataSet<Double> sampleCount = DataSetUtils\n\t\t\t.countElementsPerPartition(trainData)\n\t\t\t.sum(1)\n\t\t\t.map(new MapFunction<Tuple2<Integer, Long>, Double>() {\n\t\t\t\t@Override\n\t\t\t\tpublic Double map(Tuple2<Integer, Long> value) throws Exception {\n\t\t\t\t\treturn value.f1.doubleValue();\n\t\t\t\t}\n\t\t\t});\n\n\t\tfinal double learningRate = 1.0;\n\n\t\tDataSet<Row> model = new IterativeComQueue()\n\t\t\t.setMaxIter(100)\n\t\t\t.initWithPartitionedData(TRAIN_DATA, trainData)\n\t\t\t.initWithBroadcastData(COEFS, initialCoefs)\n\t\t\t.initWithBroadcastData(SAMPLE_COUNT, sampleCount)\n\t\t\t.add(new ComputeFunction() {\n\t\t\t\t@Override\n\t\t\t\tpublic void calc(ComContext context) {\n\t\t\t\t\tList<Tuple2<DenseVector, Double>> trainData = context.getObj(TRAIN_DATA);\n\t\t\t\t\tList<DenseVector> coefs = context.getObj(COEFS);\n\t\t\t\t\tdouble[] grads = context.getObj(\"grads\");\n\n\t\t\t\t\tif (grads == null) {\n\t\t\t\t\t\tgrads = new double[coefs.get(0).size()];\n\t\t\t\t\t\tcontext.putObj(\"grads\", grads);\n\t\t\t\t\t}\n\n\t\t\t\t\tArrays.fill(grads, 0.0);\n\n\t\t\t\t\tDenseVector gradsWrapper = new DenseVector(grads);\n\n\t\t\t\t\tfor (Tuple2<DenseVector, Double> sample : trainData) {\n\t\t\t\t\t\tgradsWrapper.plusScaleEqual(sample.f0, sample.f1 - sample.f0.dot(coefs.get(0)));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\t.add(new AllReduce(\"grads\"))\n\t\t\t.add(new ComputeFunction() {\n\t\t\t\t@Override\n\t\t\t\tpublic void calc(ComContext context) {\n\t\t\t\t\tList<DenseVector> coefs = context.getObj(COEFS);\n\t\t\t\t\tdouble[] grads = context.getObj(\"grads\");\n\t\t\t\t\tList<Double> sampleCount = context.getObj(SAMPLE_COUNT);\n\n\t\t\t\t\tcoefs.get(0).plusScaleEqual(new DenseVector(grads), learningRate / sampleCount.get(0));\n\t\t\t\t}\n\t\t\t})\n\t\t\t.closeWith(new CompleteResultFunction() {\n\t\t\t\t@Override\n\t\t\t\tpublic List<Row> calc(ComContext context) {\n\t\t\t\t\tif (context.getTaskId() == 0) {\n\t\t\t\t\t\tList<DenseVector> coefs = context.getObj(COEFS);\n\t\t\t\t\t\treturn Collections.singletonList(Row.of(coefs.get(0)));\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\t.exec();\n\n\t\tList<Row> modelL = model.collect();\n\n\t\tAssert.assertEquals(data.get(0).f1,\n\t\t\tdata.get(0).f0.dot((Vector) modelL.get(0).getField(0)),\n\t\t\t2.0\n\t\t);\n\t}", "signature": "void testICQLinearRegression()", "full_signature": "@Test public void testICQLinearRegression()", "class_method_signature": "IterativeComQueueTest.testICQLinearRegression()", "testcase": true, "constructor": false, "invocations": ["rand", "add", "of", "append", "dot", "ones", "fromCollection", "getExecutionEnvironment", "getDefault", "fromCollection", "getExecutionEnvironment", "getDefault", "singletonList", "zeros", "map", "sum", "countElementsPerPartition", "doubleValue", "exec", "closeWith", "add", "add", "add", "initWithBroadcastData", "initWithBroadcastData", "initWithPartitionedData", "setMaxIter", "getObj", "getObj", "getObj", "size", "get", "putObj", "fill", "plusScaleEqual", "dot", "get", "getObj", "getObj", "getObj", "plusScaleEqual", "get", "get", "getTaskId", "getObj", "singletonList", "of", "get", "collect", "assertEquals", "get", "dot", "get", "getField", "get"]}, "focal_class": {"identifier": "IterativeComQueue", "superclass": "extends BaseComQueue <IterativeComQueue>", "interfaces": "", "fields": [], "methods": [{"identifier": "IterativeComQueue", "parameters": "()", "modifiers": "public", "return": "", "signature": " IterativeComQueue()", "full_signature": "public  IterativeComQueue()", "class_method_signature": "IterativeComQueue.IterativeComQueue()", "testcase": false, "constructor": true}, {"identifier": "setCompareCriterionOfNode0", "parameters": "(CompareCriterionFunction compareCriterion)", "modifiers": "@Override public", "return": "IterativeComQueue", "signature": "IterativeComQueue setCompareCriterionOfNode0(CompareCriterionFunction compareCriterion)", "full_signature": "@Override public IterativeComQueue setCompareCriterionOfNode0(CompareCriterionFunction compareCriterion)", "class_method_signature": "IterativeComQueue.setCompareCriterionOfNode0(CompareCriterionFunction compareCriterion)", "testcase": false, "constructor": false}, {"identifier": "setMaxIter", "parameters": "(int maxIter)", "modifiers": "@Override public", "return": "IterativeComQueue", "signature": "IterativeComQueue setMaxIter(int maxIter)", "full_signature": "@Override public IterativeComQueue setMaxIter(int maxIter)", "class_method_signature": "IterativeComQueue.setMaxIter(int maxIter)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/common/comqueue/IterativeComQueue.java"}, "focal_method": {"identifier": "setMaxIter", "parameters": "(int maxIter)", "modifiers": "@Override public", "return": "IterativeComQueue", "body": "@Override\n\tpublic IterativeComQueue setMaxIter(int maxIter) {\n\t\treturn super.setMaxIter(maxIter);\n\t}", "signature": "IterativeComQueue setMaxIter(int maxIter)", "full_signature": "@Override public IterativeComQueue setMaxIter(int maxIter)", "class_method_signature": "IterativeComQueue.setMaxIter(int maxIter)", "testcase": false, "constructor": false, "invocations": ["setMaxIter"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}