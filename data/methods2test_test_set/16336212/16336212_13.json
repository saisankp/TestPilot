{"test_class": {"identifier": "ServletMessageSupplierTest", "superclass": "", "interfaces": "", "fields": [], "file": "agent/plugins/servlet-plugin/src/test/java/org/glowroot/agent/plugin/servlet/_/ServletMessageSupplierTest.java"}, "test_case": {"identifier": "shouldMaskStrange", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldMaskStrange() {\n        // given\n        List<Pattern> maskPatterns = ImmutableList.of(Pattern.compile(\".*password.*\"));\n        String requestQueryString = \"test=one&&&===&=&xpasswordy=mask=me&&&==&test=two\";\n        // when\n        String maskRequestQueryString =\n                ServletMessageSupplier.maskRequestQueryString(requestQueryString, maskPatterns);\n        // then\n        assertThat(maskRequestQueryString)\n                .isEqualTo(\"test=one&&&===&=&xpasswordy=****&&&==&test=two\");\n    }", "signature": "void shouldMaskStrange()", "full_signature": "@Test public void shouldMaskStrange()", "class_method_signature": "ServletMessageSupplierTest.shouldMaskStrange()", "testcase": true, "constructor": false, "invocations": ["of", "compile", "maskRequestQueryString", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "ServletMessageSupplier", "superclass": "extends MessageSupplier", "interfaces": "implements ServletRequestInfo", "fields": [{"original_string": "private static final String MASK_TEXT = \"****\";", "modifier": "private static final", "type": "String", "declarator": "MASK_TEXT = \"****\"", "var_name": "MASK_TEXT"}, {"original_string": "private final String requestMethod;", "modifier": "private final", "type": "String", "declarator": "requestMethod", "var_name": "requestMethod"}, {"original_string": "private final String requestContextPath;", "modifier": "private final", "type": "String", "declarator": "requestContextPath", "var_name": "requestContextPath"}, {"original_string": "private final String requestServletPath;", "modifier": "private final", "type": "String", "declarator": "requestServletPath", "var_name": "requestServletPath"}, {"original_string": "private final @Nullable String requestPathInfo;", "modifier": "private final @Nullable", "type": "String", "declarator": "requestPathInfo", "var_name": "requestPathInfo"}, {"original_string": "private final String requestUri;", "modifier": "private final", "type": "String", "declarator": "requestUri", "var_name": "requestUri"}, {"original_string": "private final @Nullable String requestQueryString;", "modifier": "private final @Nullable", "type": "String", "declarator": "requestQueryString", "var_name": "requestQueryString"}, {"original_string": "private volatile @MonotonicNonNull Map<String, Object> requestParameters;", "modifier": "private volatile @MonotonicNonNull", "type": "Map<String, Object>", "declarator": "requestParameters", "var_name": "requestParameters"}, {"original_string": "private final Map<String, Object> requestHeaders;", "modifier": "private final", "type": "Map<String, Object>", "declarator": "requestHeaders", "var_name": "requestHeaders"}, {"original_string": "private final @Nullable RequestHostAndPortDetail requestHostAndPortDetail;", "modifier": "private final @Nullable", "type": "RequestHostAndPortDetail", "declarator": "requestHostAndPortDetail", "var_name": "requestHostAndPortDetail"}, {"original_string": "private volatile int responseCode;", "modifier": "private volatile", "type": "int", "declarator": "responseCode", "var_name": "responseCode"}, {"original_string": "private final ResponseHeaderComponent responseHeaderComponent = new ResponseHeaderComponent();", "modifier": "private final", "type": "ResponseHeaderComponent", "declarator": "responseHeaderComponent = new ResponseHeaderComponent()", "var_name": "responseHeaderComponent"}, {"original_string": "private final Map<String, String> sessionAttributeInitialValueMap;", "modifier": "private final", "type": "Map<String, String>", "declarator": "sessionAttributeInitialValueMap", "var_name": "sessionAttributeInitialValueMap"}, {"original_string": "private volatile @MonotonicNonNull ConcurrentMap<String, Optional<String>> sessionAttributeUpdatedValueMap;", "modifier": "private volatile @MonotonicNonNull", "type": "ConcurrentMap<String, Optional<String>>", "declarator": "sessionAttributeUpdatedValueMap", "var_name": "sessionAttributeUpdatedValueMap"}, {"original_string": "private @Nullable List<String> jaxRsParts;", "modifier": "private @Nullable", "type": "List<String>", "declarator": "jaxRsParts", "var_name": "jaxRsParts"}], "methods": [{"identifier": "ServletMessageSupplier", "parameters": "(String requestMethod, String requestContextPath,\n            String requestServletPath, @Nullable String requestPathInfo, String requestUri,\n            @Nullable String requestQueryString, Map<String, Object> requestHeaders,\n            @Nullable RequestHostAndPortDetail requestHostAndPortDetail,\n            Map<String, String> sessionAttributeMap)", "modifiers": "public", "return": "", "signature": " ServletMessageSupplier(String requestMethod, String requestContextPath,\n            String requestServletPath, @Nullable String requestPathInfo, String requestUri,\n            @Nullable String requestQueryString, Map<String, Object> requestHeaders,\n            @Nullable RequestHostAndPortDetail requestHostAndPortDetail,\n            Map<String, String> sessionAttributeMap)", "full_signature": "public  ServletMessageSupplier(String requestMethod, String requestContextPath,\n            String requestServletPath, @Nullable String requestPathInfo, String requestUri,\n            @Nullable String requestQueryString, Map<String, Object> requestHeaders,\n            @Nullable RequestHostAndPortDetail requestHostAndPortDetail,\n            Map<String, String> sessionAttributeMap)", "class_method_signature": "ServletMessageSupplier.ServletMessageSupplier(String requestMethod, String requestContextPath,\n            String requestServletPath, @Nullable String requestPathInfo, String requestUri,\n            @Nullable String requestQueryString, Map<String, Object> requestHeaders,\n            @Nullable RequestHostAndPortDetail requestHostAndPortDetail,\n            Map<String, String> sessionAttributeMap)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "Message", "signature": "Message get()", "full_signature": "@Override public Message get()", "class_method_signature": "ServletMessageSupplier.get()", "testcase": false, "constructor": false}, {"identifier": "getMethod", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getMethod()", "full_signature": "@Override public String getMethod()", "class_method_signature": "ServletMessageSupplier.getMethod()", "testcase": false, "constructor": false}, {"identifier": "getContextPath", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getContextPath()", "full_signature": "@Override public String getContextPath()", "class_method_signature": "ServletMessageSupplier.getContextPath()", "testcase": false, "constructor": false}, {"identifier": "getServletPath", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getServletPath()", "full_signature": "@Override public String getServletPath()", "class_method_signature": "ServletMessageSupplier.getServletPath()", "testcase": false, "constructor": false}, {"identifier": "getPathInfo", "parameters": "()", "modifiers": "@Override public @Nullable", "return": "String", "signature": "String getPathInfo()", "full_signature": "@Override public @Nullable String getPathInfo()", "class_method_signature": "ServletMessageSupplier.getPathInfo()", "testcase": false, "constructor": false}, {"identifier": "getUri", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getUri()", "full_signature": "@Override public String getUri()", "class_method_signature": "ServletMessageSupplier.getUri()", "testcase": false, "constructor": false}, {"identifier": "addJaxRsPart", "parameters": "(String part)", "modifiers": "@Override public", "return": "void", "signature": "void addJaxRsPart(String part)", "full_signature": "@Override public void addJaxRsPart(String part)", "class_method_signature": "ServletMessageSupplier.addJaxRsPart(String part)", "testcase": false, "constructor": false}, {"identifier": "getJaxRsParts", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getJaxRsParts()", "full_signature": "@Override public List<String> getJaxRsParts()", "class_method_signature": "ServletMessageSupplier.getJaxRsParts()", "testcase": false, "constructor": false}, {"identifier": "isRequestParametersCaptured", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRequestParametersCaptured()", "full_signature": "public boolean isRequestParametersCaptured()", "class_method_signature": "ServletMessageSupplier.isRequestParametersCaptured()", "testcase": false, "constructor": false}, {"identifier": "setCaptureRequestParameters", "parameters": "(Map<String, Object> requestParameters)", "modifiers": "public", "return": "void", "signature": "void setCaptureRequestParameters(Map<String, Object> requestParameters)", "full_signature": "public void setCaptureRequestParameters(Map<String, Object> requestParameters)", "class_method_signature": "ServletMessageSupplier.setCaptureRequestParameters(Map<String, Object> requestParameters)", "testcase": false, "constructor": false}, {"identifier": "setResponseCode", "parameters": "(int responseCode)", "modifiers": "public", "return": "void", "signature": "void setResponseCode(int responseCode)", "full_signature": "public void setResponseCode(int responseCode)", "class_method_signature": "ServletMessageSupplier.setResponseCode(int responseCode)", "testcase": false, "constructor": false}, {"identifier": "setResponseHeader", "parameters": "(String name, String value)", "modifiers": "public", "return": "void", "signature": "void setResponseHeader(String name, String value)", "full_signature": "public void setResponseHeader(String name, String value)", "class_method_signature": "ServletMessageSupplier.setResponseHeader(String name, String value)", "testcase": false, "constructor": false}, {"identifier": "setResponseDateHeader", "parameters": "(String name, long date)", "modifiers": "public", "return": "void", "signature": "void setResponseDateHeader(String name, long date)", "full_signature": "public void setResponseDateHeader(String name, long date)", "class_method_signature": "ServletMessageSupplier.setResponseDateHeader(String name, long date)", "testcase": false, "constructor": false}, {"identifier": "setResponseIntHeader", "parameters": "(String name, int value)", "modifiers": "public", "return": "void", "signature": "void setResponseIntHeader(String name, int value)", "full_signature": "public void setResponseIntHeader(String name, int value)", "class_method_signature": "ServletMessageSupplier.setResponseIntHeader(String name, int value)", "testcase": false, "constructor": false}, {"identifier": "setResponseLongHeader", "parameters": "(String name, long value)", "modifiers": "public", "return": "void", "signature": "void setResponseLongHeader(String name, long value)", "full_signature": "public void setResponseLongHeader(String name, long value)", "class_method_signature": "ServletMessageSupplier.setResponseLongHeader(String name, long value)", "testcase": false, "constructor": false}, {"identifier": "addResponseHeader", "parameters": "(String name, String value)", "modifiers": "public", "return": "void", "signature": "void addResponseHeader(String name, String value)", "full_signature": "public void addResponseHeader(String name, String value)", "class_method_signature": "ServletMessageSupplier.addResponseHeader(String name, String value)", "testcase": false, "constructor": false}, {"identifier": "addResponseDateHeader", "parameters": "(String name, long date)", "modifiers": "public", "return": "void", "signature": "void addResponseDateHeader(String name, long date)", "full_signature": "public void addResponseDateHeader(String name, long date)", "class_method_signature": "ServletMessageSupplier.addResponseDateHeader(String name, long date)", "testcase": false, "constructor": false}, {"identifier": "addResponseIntHeader", "parameters": "(String name, int value)", "modifiers": "public", "return": "void", "signature": "void addResponseIntHeader(String name, int value)", "full_signature": "public void addResponseIntHeader(String name, int value)", "class_method_signature": "ServletMessageSupplier.addResponseIntHeader(String name, int value)", "testcase": false, "constructor": false}, {"identifier": "putSessionAttributeChangedValue", "parameters": "(String attributeName,\n            @Nullable String attributeValue)", "modifiers": "public", "return": "void", "signature": "void putSessionAttributeChangedValue(String attributeName,\n            @Nullable String attributeValue)", "full_signature": "public void putSessionAttributeChangedValue(String attributeName,\n            @Nullable String attributeValue)", "class_method_signature": "ServletMessageSupplier.putSessionAttributeChangedValue(String attributeName,\n            @Nullable String attributeValue)", "testcase": false, "constructor": false}, {"identifier": "addSessionAttributeDetail", "parameters": "(Map<String, Object> detail)", "modifiers": "private", "return": "void", "signature": "void addSessionAttributeDetail(Map<String, Object> detail)", "full_signature": "private void addSessionAttributeDetail(Map<String, Object> detail)", "class_method_signature": "ServletMessageSupplier.addSessionAttributeDetail(Map<String, Object> detail)", "testcase": false, "constructor": false}, {"identifier": "addMidRequestSessionAttributeDetail", "parameters": "(Map<String, Object> detail)", "modifiers": "@RequiresNonNull(\"sessionAttributeUpdatedValueMap\") private", "return": "void", "signature": "void addMidRequestSessionAttributeDetail(Map<String, Object> detail)", "full_signature": "@RequiresNonNull(\"sessionAttributeUpdatedValueMap\") private void addMidRequestSessionAttributeDetail(Map<String, Object> detail)", "class_method_signature": "ServletMessageSupplier.addMidRequestSessionAttributeDetail(Map<String, Object> detail)", "testcase": false, "constructor": false}, {"identifier": "maskRequestQueryString", "parameters": "(@Nullable String requestQueryString,\n            List<Pattern> maskPatterns)", "modifiers": "static @Nullable", "return": "String", "signature": "String maskRequestQueryString(@Nullable String requestQueryString,\n            List<Pattern> maskPatterns)", "full_signature": "static @Nullable String maskRequestQueryString(@Nullable String requestQueryString,\n            List<Pattern> maskPatterns)", "class_method_signature": "ServletMessageSupplier.maskRequestQueryString(@Nullable String requestQueryString,\n            List<Pattern> maskPatterns)", "testcase": false, "constructor": false}, {"identifier": "maskRequestParameters", "parameters": "(\n            @Nullable Map<String, Object> requestParameters, List<Pattern> maskPatterns)", "modifiers": "private static @Nullable", "return": "Map<String, Object>", "signature": "Map<String, Object> maskRequestParameters(\n            @Nullable Map<String, Object> requestParameters, List<Pattern> maskPatterns)", "full_signature": "private static @Nullable Map<String, Object> maskRequestParameters(\n            @Nullable Map<String, Object> requestParameters, List<Pattern> maskPatterns)", "class_method_signature": "ServletMessageSupplier.maskRequestParameters(\n            @Nullable Map<String, Object> requestParameters, List<Pattern> maskPatterns)", "testcase": false, "constructor": false}], "file": "agent/plugins/servlet-plugin/src/main/java/org/glowroot/agent/plugin/servlet/_/ServletMessageSupplier.java"}, "focal_method": {"identifier": "maskRequestQueryString", "parameters": "(@Nullable String requestQueryString,\n            List<Pattern> maskPatterns)", "modifiers": "static @Nullable", "return": "String", "body": "static @Nullable String maskRequestQueryString(@Nullable String requestQueryString,\n            List<Pattern> maskPatterns) {\n        if (requestQueryString == null) {\n            return null;\n        }\n        if (maskPatterns.isEmpty()) {\n            return requestQueryString;\n        }\n        StringBuilder sb = new StringBuilder(requestQueryString.length());\n        boolean existMaskedParameters = false;\n        int keyStartIndex = 0;\n        boolean inMaskedValue = false;\n        for (int i = 0; i < requestQueryString.length(); i++) {\n            char c = requestQueryString.charAt(i);\n            switch (c) {\n                case '&':\n                    sb.append('&');\n                    keyStartIndex = sb.length();\n                    inMaskedValue = false;\n                    break;\n                case '=':\n                    if (keyStartIndex == -1) {\n                        // not in key\n                        if (!inMaskedValue) {\n                            sb.append(c);\n                        }\n                    } else {\n                        String key = sb.substring(keyStartIndex, sb.length());\n                        sb.append('=');\n                        // converted to lower case for case-insensitive matching\n                        // (patterns are lower case)\n                        String keyLowerCase = key.toLowerCase(Locale.ENGLISH);\n                        if (DetailCapture.matchesOneOf(keyLowerCase, maskPatterns)) {\n                            inMaskedValue = true;\n                            sb.append(MASK_TEXT);\n                            existMaskedParameters = true;\n                        }\n                        keyStartIndex = -1;\n                    }\n                    break;\n                default:\n                    if (!inMaskedValue) {\n                        sb.append(c);\n                    }\n            }\n        }\n        if (existMaskedParameters) {\n            return sb.toString();\n        } else {\n            // save the expense of toString() in common case\n            return requestQueryString;\n        }\n    }", "signature": "String maskRequestQueryString(@Nullable String requestQueryString,\n            List<Pattern> maskPatterns)", "full_signature": "static @Nullable String maskRequestQueryString(@Nullable String requestQueryString,\n            List<Pattern> maskPatterns)", "class_method_signature": "ServletMessageSupplier.maskRequestQueryString(@Nullable String requestQueryString,\n            List<Pattern> maskPatterns)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "length", "length", "charAt", "append", "length", "append", "substring", "length", "append", "toLowerCase", "matchesOneOf", "append", "append", "toString"]}, "repository": {"repo_id": 16336212, "url": "https://github.com/glowroot/glowroot", "stars": 736, "created": "1/29/2014 5:25:58 AM +00:00", "updates": "2020-01-24T11:13:42+00:00", "fork": "False", "license": "licensed"}}