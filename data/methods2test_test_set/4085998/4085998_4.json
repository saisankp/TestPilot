{"test_class": {"identifier": "ExtSourceXMLTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Spy\n\tprivate static ExtSourceXML extSourceXML;", "modifier": "@Spy\n\tprivate static", "type": "ExtSourceXML", "declarator": "extSourceXML", "var_name": "extSourceXML"}], "file": "perun-core/src/test/java/cz/metacentrum/perun/core/impl/ExtSourceXMLTest.java"}, "test_case": {"identifier": "getUsersSubjectsTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void getUsersSubjectsTest() throws Exception {\n\t\tSystem.out.println(\"getUsersSubjectsTest\");\n\n\t\t// create temporal csv file containing new subjects\n\t\tFile temp = File.createTempFile(\"temp\",\".xml\");\n\t\ttemp.deleteOnExit();\n\n\t\t// define needed attributes\n\t\tMap<String, String> mapOfAttributes = new HashMap<>();\n\t\tmapOfAttributes.put(\"usersQuery\", \"/Users/User[@id='42']\");\n\t\tmapOfAttributes.put(\"file\", temp.getAbsolutePath());\n\t\tmapOfAttributes.put(\"xmlMapping\", \"firstName=firstName,\\nlogin=login\");\n\t\tdoReturn(mapOfAttributes).when(extSourceXML).getAttributes();\n\n\t\t// fill in the file\n\t\ttry (BufferedWriter bw = new BufferedWriter(new FileWriter(temp))) {\n\t\t\tbw.write(\"<Users>\\n<User id='42'>\\n<firstName>arthur</firstName>\\n<login>xdent</login>\\n</User>\\n</Users>\");\n\t\t}\n\n\t\t// create expected subject to get\n\t\tList<Map<String, String>> expectedSubjects = new ArrayList<>();\n\t\tMap<String, String> mapOfSubject = new HashMap<>();\n\t\tmapOfSubject.put(\"firstName\", \"arthur\");\n\t\tmapOfSubject.put(\"login\", \"xdent\");\n\t\texpectedSubjects.add(mapOfSubject);\n\n\t\t// test the method\n\t\tList<Map<String, String>> actualSubjects = extSourceXML.getUsersSubjects();\n\t\tassertEquals(\"subjects should be same\", expectedSubjects, actualSubjects);\n\t}", "signature": "void getUsersSubjectsTest()", "full_signature": "@Test public void getUsersSubjectsTest()", "class_method_signature": "ExtSourceXMLTest.getUsersSubjectsTest()", "testcase": true, "constructor": false, "invocations": ["println", "createTempFile", "deleteOnExit", "put", "put", "getAbsolutePath", "put", "getAttributes", "when", "doReturn", "write", "put", "put", "add", "getUsersSubjects", "assertEquals"]}, "focal_class": {"identifier": "ExtSourceXML", "superclass": "extends ExtSource", "interfaces": "implements ExtSourceApi", "fields": [{"original_string": "private final static Logger log = LoggerFactory.getLogger(ExtSourceXML.class);", "modifier": "private final static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ExtSourceXML.class)", "var_name": "log"}, {"original_string": "private String query = null;", "modifier": "private", "type": "String", "declarator": "query = null", "var_name": "query"}, {"original_string": "private String loginQuery = null;", "modifier": "private", "type": "String", "declarator": "loginQuery = null", "var_name": "loginQuery"}, {"original_string": "private String file = null;", "modifier": "private", "type": "String", "declarator": "file = null", "var_name": "file"}, {"original_string": "private String uri = null;", "modifier": "private", "type": "String", "declarator": "uri = null", "var_name": "uri"}, {"original_string": "private static PerunBlImpl perunBl;", "modifier": "private static", "type": "PerunBlImpl", "declarator": "perunBl", "var_name": "perunBl"}, {"original_string": "private HttpURLConnection con = null;", "modifier": "private", "type": "HttpURLConnection", "declarator": "con = null", "var_name": "con"}, {"original_string": "private final Pattern pattern = Pattern.compile(\"([^\\\\\\\\]|^)(\\\\\\\\\\\\\\\\)*/([^\\\\\\\\]|$)\");", "modifier": "private final", "type": "Pattern", "declarator": "pattern = Pattern.compile(\"([^\\\\\\\\]|^)(\\\\\\\\\\\\\\\\)*/([^\\\\\\\\]|$)\")", "var_name": "pattern"}], "methods": [{"identifier": "setPerunBlImpl", "parameters": "(PerunBlImpl perun)", "modifiers": "public static", "return": "PerunBlImpl", "signature": "PerunBlImpl setPerunBlImpl(PerunBlImpl perun)", "full_signature": "public static PerunBlImpl setPerunBlImpl(PerunBlImpl perun)", "class_method_signature": "ExtSourceXML.setPerunBlImpl(PerunBlImpl perun)", "testcase": false, "constructor": false}, {"identifier": "findSubjectsLogins", "parameters": "(String searchString)", "modifiers": "@Override public", "return": "List<Map<String,String>>", "signature": "List<Map<String,String>> findSubjectsLogins(String searchString)", "full_signature": "@Override public List<Map<String,String>> findSubjectsLogins(String searchString)", "class_method_signature": "ExtSourceXML.findSubjectsLogins(String searchString)", "testcase": false, "constructor": false}, {"identifier": "findSubjectsLogins", "parameters": "(String searchString, int maxResulsts)", "modifiers": "@Override public", "return": "List<Map<String,String>>", "signature": "List<Map<String,String>> findSubjectsLogins(String searchString, int maxResulsts)", "full_signature": "@Override public List<Map<String,String>> findSubjectsLogins(String searchString, int maxResulsts)", "class_method_signature": "ExtSourceXML.findSubjectsLogins(String searchString, int maxResulsts)", "testcase": false, "constructor": false}, {"identifier": "findSubjects", "parameters": "(String searchString)", "modifiers": "@Override public", "return": "List<Map<String,String>>", "signature": "List<Map<String,String>> findSubjects(String searchString)", "full_signature": "@Override public List<Map<String,String>> findSubjects(String searchString)", "class_method_signature": "ExtSourceXML.findSubjects(String searchString)", "testcase": false, "constructor": false}, {"identifier": "findSubjects", "parameters": "(String searchString, int maxResults)", "modifiers": "@Override public", "return": "List<Map<String,String>>", "signature": "List<Map<String,String>> findSubjects(String searchString, int maxResults)", "full_signature": "@Override public List<Map<String,String>> findSubjects(String searchString, int maxResults)", "class_method_signature": "ExtSourceXML.findSubjects(String searchString, int maxResults)", "testcase": false, "constructor": false}, {"identifier": "getSubjectByLogin", "parameters": "(String login)", "modifiers": "@Override public", "return": "Map<String, String>", "signature": "Map<String, String> getSubjectByLogin(String login)", "full_signature": "@Override public Map<String, String> getSubjectByLogin(String login)", "class_method_signature": "ExtSourceXML.getSubjectByLogin(String login)", "testcase": false, "constructor": false}, {"identifier": "getGroupSubjects", "parameters": "(Map<String, String> attributes)", "modifiers": "@Override public", "return": "List<Map<String, String>>", "signature": "List<Map<String, String>> getGroupSubjects(Map<String, String> attributes)", "full_signature": "@Override public List<Map<String, String>> getGroupSubjects(Map<String, String> attributes)", "class_method_signature": "ExtSourceXML.getGroupSubjects(Map<String, String> attributes)", "testcase": false, "constructor": false}, {"identifier": "getUsersSubjects", "parameters": "()", "modifiers": "@Override public", "return": "List<Map<String, String>>", "signature": "List<Map<String, String>> getUsersSubjects()", "full_signature": "@Override public List<Map<String, String>> getUsersSubjects()", "class_method_signature": "ExtSourceXML.getUsersSubjects()", "testcase": false, "constructor": false}, {"identifier": "prepareEnvironment", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void prepareEnvironment()", "full_signature": "protected void prepareEnvironment()", "class_method_signature": "ExtSourceXML.prepareEnvironment()", "testcase": false, "constructor": false}, {"identifier": "xpathParsing", "parameters": "(String query, int maxResults)", "modifiers": "protected", "return": "List<Map<String,String>>", "signature": "List<Map<String,String>> xpathParsing(String query, int maxResults)", "full_signature": "protected List<Map<String,String>> xpathParsing(String query, int maxResults)", "class_method_signature": "ExtSourceXML.xpathParsing(String query, int maxResults)", "testcase": false, "constructor": false}, {"identifier": "convertNodeToMap", "parameters": "(Node node)", "modifiers": "protected", "return": "Map<String, String>", "signature": "Map<String, String> convertNodeToMap(Node node)", "full_signature": "protected Map<String, String> convertNodeToMap(Node node)", "class_method_signature": "ExtSourceXML.convertNodeToMap(Node node)", "testcase": false, "constructor": false}, {"identifier": "getValueFromXpath", "parameters": "(Node node, String xpathExpression)", "modifiers": "protected", "return": "String", "signature": "String getValueFromXpath(Node node, String xpathExpression)", "full_signature": "protected String getValueFromXpath(Node node, String xpathExpression)", "class_method_signature": "ExtSourceXML.getValueFromXpath(Node node, String xpathExpression)", "testcase": false, "constructor": false}, {"identifier": "extractValueByRegex", "parameters": "(String value, String regex)", "modifiers": "protected", "return": "String", "signature": "String extractValueByRegex(String value, String regex)", "full_signature": "protected String extractValueByRegex(String value, String regex)", "class_method_signature": "ExtSourceXML.extractValueByRegex(String value, String regex)", "testcase": false, "constructor": false}, {"identifier": "createTwoWaySSLConnection", "parameters": "(String uri)", "modifiers": "protected", "return": "InputStream", "signature": "InputStream createTwoWaySSLConnection(String uri)", "full_signature": "protected InputStream createTwoWaySSLConnection(String uri)", "class_method_signature": "ExtSourceXML.createTwoWaySSLConnection(String uri)", "testcase": false, "constructor": false}, {"identifier": "convertToXpathSearchString", "parameters": "(String query)", "modifiers": "protected", "return": "String", "signature": "String convertToXpathSearchString(String query)", "full_signature": "protected String convertToXpathSearchString(String query)", "class_method_signature": "ExtSourceXML.convertToXpathSearchString(String query)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "ExtSourceXML.close()", "testcase": false, "constructor": false}, {"identifier": "getSubjectGroups", "parameters": "(Map<String, String> attributes)", "modifiers": "@Override public", "return": "List<Map<String, String>>", "signature": "List<Map<String, String>> getSubjectGroups(Map<String, String> attributes)", "full_signature": "@Override public List<Map<String, String>> getSubjectGroups(Map<String, String> attributes)", "class_method_signature": "ExtSourceXML.getSubjectGroups(Map<String, String> attributes)", "testcase": false, "constructor": false}, {"identifier": "getCon", "parameters": "()", "modifiers": "@JsonIgnore public", "return": "HttpURLConnection", "signature": "HttpURLConnection getCon()", "full_signature": "@JsonIgnore public HttpURLConnection getCon()", "class_method_signature": "ExtSourceXML.getCon()", "testcase": false, "constructor": false}, {"identifier": "setCon", "parameters": "(HttpURLConnection con)", "modifiers": "@JsonIgnore public", "return": "void", "signature": "void setCon(HttpURLConnection con)", "full_signature": "@JsonIgnore public void setCon(HttpURLConnection con)", "class_method_signature": "ExtSourceXML.setCon(HttpURLConnection con)", "testcase": false, "constructor": false}, {"identifier": "getAttributes", "parameters": "()", "modifiers": "protected", "return": "Map<String,String>", "signature": "Map<String,String> getAttributes()", "full_signature": "protected Map<String,String> getAttributes()", "class_method_signature": "ExtSourceXML.getAttributes()", "testcase": false, "constructor": false}], "file": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/ExtSourceXML.java"}, "focal_method": {"identifier": "getUsersSubjects", "parameters": "()", "modifiers": "@Override public", "return": "List<Map<String, String>>", "body": "@Override\n\tpublic List<Map<String, String>> getUsersSubjects() {\n\t\t// Get the query for the users subjects\n\t\tString queryForUsers = getAttributes().get(UsersManager.USERS_QUERY);\n\n\t\t//If there is no query for users, throw exception\n\t\tif(queryForUsers == null) throw new InternalErrorException(\"usersQuery can't be null\");\n\n\t\t//Get file or uri of xml\n\t\tprepareEnvironment();\n\n\t\treturn xpathParsing(queryForUsers, 0);\n\t}", "signature": "List<Map<String, String>> getUsersSubjects()", "full_signature": "@Override public List<Map<String, String>> getUsersSubjects()", "class_method_signature": "ExtSourceXML.getUsersSubjects()", "testcase": false, "constructor": false, "invocations": ["get", "getAttributes", "prepareEnvironment", "xpathParsing"]}, "repository": {"repo_id": 4085998, "url": "https://github.com/CESNET/perun", "stars": 38, "created": "4/20/2012 11:55:38 AM +00:00", "updates": "2020-01-27T09:51:13+00:00", "fork": "False", "license": "licensed"}}