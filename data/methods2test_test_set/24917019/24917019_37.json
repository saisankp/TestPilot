{"test_class": {"identifier": "DynamoDBMissionWorkerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String IMAGE_RESOURCE_FILE = WorkerTestUtils.getPath(\"IMAGE_MANIFEST.json\");", "modifier": "private static final", "type": "String", "declarator": "IMAGE_RESOURCE_FILE = WorkerTestUtils.getPath(\"IMAGE_MANIFEST.json\")", "var_name": "IMAGE_RESOURCE_FILE"}, {"original_string": "private static final String INVALID_VERSION_FILE = WorkerTestUtils.getPath(\"IMAGE_MANIFEST_invalid_version.json\");", "modifier": "private static final", "type": "String", "declarator": "INVALID_VERSION_FILE = WorkerTestUtils.getPath(\"IMAGE_MANIFEST_invalid_version.json\")", "var_name": "INVALID_VERSION_FILE"}, {"original_string": "private static final String MISSING_SOL_LIST_FILE = WorkerTestUtils.getPath(\"IMAGE_MANIFEST_missing_sol_list.json\");", "modifier": "private static final", "type": "String", "declarator": "MISSING_SOL_LIST_FILE = WorkerTestUtils.getPath(\"IMAGE_MANIFEST_missing_sol_list.json\")", "var_name": "MISSING_SOL_LIST_FILE"}, {"original_string": "private static final String MISSING_SOL_ID_FILE = WorkerTestUtils.getPath(\"IMAGE_MANIFEST_missing_sol_id.json\");", "modifier": "private static final", "type": "String", "declarator": "MISSING_SOL_ID_FILE = WorkerTestUtils.getPath(\"IMAGE_MANIFEST_missing_sol_id.json\")", "var_name": "MISSING_SOL_ID_FILE"}, {"original_string": "private static final String MISSING_SOL_URL_FILE = WorkerTestUtils.getPath(\"IMAGE_MANIFEST_missing_sol_url.json\");", "modifier": "private static final", "type": "String", "declarator": "MISSING_SOL_URL_FILE = WorkerTestUtils.getPath(\"IMAGE_MANIFEST_missing_sol_url.json\")", "var_name": "MISSING_SOL_URL_FILE"}, {"original_string": "private static final Map<Integer, String> EXPECTED_MAP;", "modifier": "private static final", "type": "Map<Integer, String>", "declarator": "EXPECTED_MAP", "var_name": "EXPECTED_MAP"}, {"original_string": "@Rule\n    public ExpectedException expectedEx = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedEx = ExpectedException.none()", "var_name": "expectedEx"}], "file": "ingester/src/test/java/com/amazonaws/services/dynamodbv2/json/demo/mars/worker/DynamoDBMissionWorkerTest.java"}, "test_case": {"identifier": "testInvalidVersion", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInvalidVersion() {\n        expectedEx.expect(IllegalArgumentException.class);\n        expectedEx.expectMessage(\"version verification failed\");\n        final URL url = PowerMock.createMock(URL.class);\n        PowerMock.mockStatic(JSONUtils.class);\n        PowerMock.mockStatic(NetworkUtils.class);\n        String manifest = null;\n        try {\n            manifest = WorkerTestUtils.readFile(INVALID_VERSION_FILE);\n        } catch (final IOException e) {\n            fail(\"Could not read file: \" + INVALID_VERSION_FILE);\n        }\n        try {\n            NetworkUtils.getDataFromURL(url, null, ImageIngester.DEFAULT_CONNECT_TIMEOUT);\n            PowerMock.expectLastCall().andReturn(manifest.getBytes());\n            PowerMock.replayAll();\n            DynamoDBMissionWorker.getSolJSON(url, ImageIngester.DEFAULT_CONNECT_TIMEOUT);\n        } catch (final IOException e) {\n            fail(e.getMessage());\n        }\n        fail(\"Version is incorrect\");\n    }", "signature": "void testInvalidVersion()", "full_signature": "@Test public void testInvalidVersion()", "class_method_signature": "DynamoDBMissionWorkerTest.testInvalidVersion()", "testcase": true, "constructor": false, "invocations": ["expect", "expectMessage", "createMock", "mockStatic", "mockStatic", "readFile", "fail", "getDataFromURL", "andReturn", "expectLastCall", "getBytes", "replayAll", "getSolJSON", "fail", "getMessage", "fail"]}, "focal_class": {"identifier": "DynamoDBMissionWorker", "superclass": "", "interfaces": "implements Callable<Map<Integer, String>>", "fields": [{"original_string": "private static final Logger LOGGER = Logger.getLogger(DynamoDBMissionWorker.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(DynamoDBMissionWorker.class.getName())", "var_name": "LOGGER"}, {"original_string": "private static final String RESOURCE_TYPE_KEY = \"type\";", "modifier": "private static final", "type": "String", "declarator": "RESOURCE_TYPE_KEY = \"type\"", "var_name": "RESOURCE_TYPE_KEY"}, {"original_string": "private static final List<String> SUPPORTED_TYPES = Arrays.asList(\"mer-images-manifest-1.0\",\n        \"msl-images-manifest-2.0\");", "modifier": "private static final", "type": "List<String>", "declarator": "SUPPORTED_TYPES = Arrays.asList(\"mer-images-manifest-1.0\",\n        \"msl-images-manifest-2.0\")", "var_name": "SUPPORTED_TYPES"}, {"original_string": "private static final String SOLS_LIST_KEY = \"sols\";", "modifier": "private static final", "type": "String", "declarator": "SOLS_LIST_KEY = \"sols\"", "var_name": "SOLS_LIST_KEY"}, {"original_string": "private static final String SOL_ID_KEY = \"sol\";", "modifier": "private static final", "type": "String", "declarator": "SOL_ID_KEY = \"sol\"", "var_name": "SOL_ID_KEY"}, {"original_string": "private static final String SOL_URL_KEY = \"url\";", "modifier": "private static final", "type": "String", "declarator": "SOL_URL_KEY = \"url\"", "var_name": "SOL_URL_KEY"}, {"original_string": "private final String manifestURL;", "modifier": "private final", "type": "String", "declarator": "manifestURL", "var_name": "manifestURL"}, {"original_string": "private final int connectTimeout;", "modifier": "private final", "type": "int", "declarator": "connectTimeout", "var_name": "connectTimeout"}], "methods": [{"identifier": "getSolJSON", "parameters": "(final URL url, final int connectTimeout)", "modifiers": "public static", "return": "Map<Integer, String>", "signature": "Map<Integer, String> getSolJSON(final URL url, final int connectTimeout)", "full_signature": "public static Map<Integer, String> getSolJSON(final URL url, final int connectTimeout)", "class_method_signature": "DynamoDBMissionWorker.getSolJSON(final URL url, final int connectTimeout)", "testcase": false, "constructor": false}, {"identifier": "DynamoDBMissionWorker", "parameters": "(final String manifestURL, final int connectTimeout)", "modifiers": "public", "return": "", "signature": " DynamoDBMissionWorker(final String manifestURL, final int connectTimeout)", "full_signature": "public  DynamoDBMissionWorker(final String manifestURL, final int connectTimeout)", "class_method_signature": "DynamoDBMissionWorker.DynamoDBMissionWorker(final String manifestURL, final int connectTimeout)", "testcase": false, "constructor": true}, {"identifier": "call", "parameters": "()", "modifiers": "@Override public", "return": "Map<Integer, String>", "signature": "Map<Integer, String> call()", "full_signature": "@Override public Map<Integer, String> call()", "class_method_signature": "DynamoDBMissionWorker.call()", "testcase": false, "constructor": false}], "file": "ingester/src/main/java/com/amazonaws/services/dynamodbv2/json/demo/mars/worker/DynamoDBMissionWorker.java"}, "focal_method": {"identifier": "getSolJSON", "parameters": "(final URL url, final int connectTimeout)", "modifiers": "public static", "return": "Map<Integer, String>", "body": "public static Map<Integer, String> getSolJSON(final URL url, final int connectTimeout) throws IOException {\n        final Map<Integer, String> map = new HashMap<Integer, String>();\n        // Retrieve the JSON data\n        final JsonNode manifest = JSONParser.getJSONFromURL(url, connectTimeout);\n        // Validate the JSON data version\n        if (!manifest.has(RESOURCE_TYPE_KEY) || !SUPPORTED_TYPES.contains(manifest.get(RESOURCE_TYPE_KEY).asText())) {\n            throw new IllegalArgumentException(\"Manifest version verification failed\");\n        }\n        // Validate that the JSON data contains a sol list\n        if (!manifest.has(SOLS_LIST_KEY)) {\n            throw new IllegalArgumentException(\"Manifest does not contain a sol list\");\n        }\n        final ArrayNode sols = (ArrayNode) manifest.get(SOLS_LIST_KEY);\n        // Process each sol in the sol list\n        for (int i = 0; i < sols.size(); i++) {\n            final JsonNode sol = sols.path(i);\n            if (sol.has(SOL_ID_KEY) && sol.has(SOL_URL_KEY)) {\n                final Integer solID = sol.get(SOL_ID_KEY).asInt();\n                final String solURL = sol.get(SOL_URL_KEY).asText();\n                if (solID != null && solURL != null) {\n                    // Add valid sol to the map\n                    map.put(solID, solURL);\n                } else {\n                    LOGGER.warning(\"Sol contains unexpected values: \" + sol);\n                }\n            } else {\n                LOGGER.warning(\"Sol missing required keys: \");\n            }\n        }\n        return map;\n    }", "signature": "Map<Integer, String> getSolJSON(final URL url, final int connectTimeout)", "full_signature": "public static Map<Integer, String> getSolJSON(final URL url, final int connectTimeout)", "class_method_signature": "DynamoDBMissionWorker.getSolJSON(final URL url, final int connectTimeout)", "testcase": false, "constructor": false, "invocations": ["getJSONFromURL", "has", "contains", "asText", "get", "has", "get", "size", "path", "has", "has", "asInt", "get", "asText", "get", "put", "warning", "warning"]}, "repository": {"repo_id": 24917019, "url": "https://github.com/aws-samples/aws-dynamodb-mars-json-demo", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 48, "size": 1648, "license": "licensed"}}