{"test_class": {"identifier": "LegacyDetectorControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private LegacyDetectorController controllerUnderTest;", "modifier": "@InjectMocks\n    private", "type": "LegacyDetectorController", "declarator": "controllerUnderTest", "var_name": "controllerUnderTest"}, {"original_string": "private MockMvc mockMvc;", "modifier": "private", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "@Mock\n    private LegacyDetectorRepository detectorRepo;", "modifier": "@Mock\n    private", "type": "LegacyDetectorRepository", "declarator": "detectorRepo", "var_name": "detectorRepo"}, {"original_string": "@Mock\n    private DetectorDocument detector;", "modifier": "@Mock\n    private", "type": "DetectorDocument", "declarator": "detector", "var_name": "detector"}, {"original_string": "@Mock\n    private List<DetectorDocument> detectors;", "modifier": "@Mock\n    private", "type": "List<DetectorDocument>", "declarator": "detectors", "var_name": "detectors"}, {"original_string": "private UUID someUuid;", "modifier": "private", "type": "UUID", "declarator": "someUuid", "var_name": "someUuid"}, {"original_string": "private DetectorDocument legalParamsDetector;", "modifier": "private", "type": "DetectorDocument", "declarator": "legalParamsDetector", "var_name": "legalParamsDetector"}], "file": "modelservice/src/test/java/com/expedia/adaptivealerting/modelservice/web/LegacyDetectorControllerTest.java"}, "test_case": {"identifier": "testFindByCreatedBy_illegal_args1", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void testFindByCreatedBy_illegal_args1() {\n        when(detectorRepo.findByCreatedBy(anyString())).thenReturn(new ArrayList<>());\n        controllerUnderTest.findByCreatedBy(\"kashah\");\n    }", "signature": "void testFindByCreatedBy_illegal_args1()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testFindByCreatedBy_illegal_args1()", "class_method_signature": "LegacyDetectorControllerTest.testFindByCreatedBy_illegal_args1()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "findByCreatedBy", "anyString", "findByCreatedBy"]}, "focal_class": {"identifier": "LegacyDetectorController", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private LegacyDetectorRepository detectorRepo;", "modifier": "@Autowired\n    private", "type": "LegacyDetectorRepository", "declarator": "detectorRepo", "var_name": "detectorRepo"}], "methods": [{"identifier": "createDetector", "parameters": "(@Valid @RequestBody DetectorDocument document)", "modifiers": "@PostMapping @ResponseStatus(HttpStatus.CREATED) public", "return": "String", "signature": "String createDetector(@Valid @RequestBody DetectorDocument document)", "full_signature": "@PostMapping @ResponseStatus(HttpStatus.CREATED) public String createDetector(@Valid @RequestBody DetectorDocument document)", "class_method_signature": "LegacyDetectorController.createDetector(@Valid @RequestBody DetectorDocument document)", "testcase": false, "constructor": false}, {"identifier": "findByUuid", "parameters": "(@RequestParam String uuid)", "modifiers": "@GetMapping(path = \"/findByUuid\", produces = \"application/json\") @ResponseStatus(HttpStatus.OK) public", "return": "DetectorDocument", "signature": "DetectorDocument findByUuid(@RequestParam String uuid)", "full_signature": "@GetMapping(path = \"/findByUuid\", produces = \"application/json\") @ResponseStatus(HttpStatus.OK) public DetectorDocument findByUuid(@RequestParam String uuid)", "class_method_signature": "LegacyDetectorController.findByUuid(@RequestParam String uuid)", "testcase": false, "constructor": false}, {"identifier": "findByCreatedBy", "parameters": "(@RequestParam String user)", "modifiers": "@GetMapping(path = \"/findByCreatedBy\", produces = \"application/json\") @ResponseStatus(HttpStatus.OK) public", "return": "List<DetectorDocument>", "signature": "List<DetectorDocument> findByCreatedBy(@RequestParam String user)", "full_signature": "@GetMapping(path = \"/findByCreatedBy\", produces = \"application/json\") @ResponseStatus(HttpStatus.OK) public List<DetectorDocument> findByCreatedBy(@RequestParam String user)", "class_method_signature": "LegacyDetectorController.findByCreatedBy(@RequestParam String user)", "testcase": false, "constructor": false}, {"identifier": "toggleDetector", "parameters": "(@RequestParam String uuid, @RequestParam Boolean enabled)", "modifiers": "@PostMapping(path = \"/toggleDetector\", consumes = \"application/json\", produces = \"application/json\") @ResponseStatus(HttpStatus.OK) public", "return": "void", "signature": "void toggleDetector(@RequestParam String uuid, @RequestParam Boolean enabled)", "full_signature": "@PostMapping(path = \"/toggleDetector\", consumes = \"application/json\", produces = \"application/json\") @ResponseStatus(HttpStatus.OK) public void toggleDetector(@RequestParam String uuid, @RequestParam Boolean enabled)", "class_method_signature": "LegacyDetectorController.toggleDetector(@RequestParam String uuid, @RequestParam Boolean enabled)", "testcase": false, "constructor": false}, {"identifier": "trustDetector", "parameters": "(@RequestParam String uuid, @RequestParam Boolean trusted)", "modifiers": "@PostMapping(path = \"/trustDetector\", consumes = \"application/json\", produces = \"application/json\") @ResponseStatus(HttpStatus.OK) public", "return": "void", "signature": "void trustDetector(@RequestParam String uuid, @RequestParam Boolean trusted)", "full_signature": "@PostMapping(path = \"/trustDetector\", consumes = \"application/json\", produces = \"application/json\") @ResponseStatus(HttpStatus.OK) public void trustDetector(@RequestParam String uuid, @RequestParam Boolean trusted)", "class_method_signature": "LegacyDetectorController.trustDetector(@RequestParam String uuid, @RequestParam Boolean trusted)", "testcase": false, "constructor": false}, {"identifier": "getLastUpdatedDetectors", "parameters": "(@RequestParam long interval)", "modifiers": "@GetMapping(path = \"/getLastUpdatedDetectors\", produces = \"application/json\") @ResponseStatus(HttpStatus.OK) public", "return": "List<DetectorDocument>", "signature": "List<DetectorDocument> getLastUpdatedDetectors(@RequestParam long interval)", "full_signature": "@GetMapping(path = \"/getLastUpdatedDetectors\", produces = \"application/json\") @ResponseStatus(HttpStatus.OK) public List<DetectorDocument> getLastUpdatedDetectors(@RequestParam long interval)", "class_method_signature": "LegacyDetectorController.getLastUpdatedDetectors(@RequestParam long interval)", "testcase": false, "constructor": false}, {"identifier": "updateDetector", "parameters": "(@RequestParam String uuid, @RequestBody DetectorDocument document)", "modifiers": "@PutMapping @ResponseStatus(HttpStatus.OK) public", "return": "void", "signature": "void updateDetector(@RequestParam String uuid, @RequestBody DetectorDocument document)", "full_signature": "@PutMapping @ResponseStatus(HttpStatus.OK) public void updateDetector(@RequestParam String uuid, @RequestBody DetectorDocument document)", "class_method_signature": "LegacyDetectorController.updateDetector(@RequestParam String uuid, @RequestBody DetectorDocument document)", "testcase": false, "constructor": false}, {"identifier": "deleteDetector", "parameters": "(@RequestParam String uuid)", "modifiers": "@DeleteMapping @ResponseStatus(HttpStatus.OK) public", "return": "void", "signature": "void deleteDetector(@RequestParam String uuid)", "full_signature": "@DeleteMapping @ResponseStatus(HttpStatus.OK) public void deleteDetector(@RequestParam String uuid)", "class_method_signature": "LegacyDetectorController.deleteDetector(@RequestParam String uuid)", "testcase": false, "constructor": false}], "file": "modelservice/src/main/java/com/expedia/adaptivealerting/modelservice/web/LegacyDetectorController.java"}, "focal_method": {"identifier": "findByCreatedBy", "parameters": "(@RequestParam String user)", "modifiers": "@GetMapping(path = \"/findByCreatedBy\", produces = \"application/json\") @ResponseStatus(HttpStatus.OK) public", "return": "List<DetectorDocument>", "body": "@GetMapping(path = \"/findByCreatedBy\", produces = \"application/json\")\n    @ResponseStatus(HttpStatus.OK)\n    public List<DetectorDocument> findByCreatedBy(@RequestParam String user) {\n        List<DetectorDocument> detectors = detectorRepo.findByCreatedBy(user);\n        if (detectors == null || detectors.isEmpty()) {\n            // TODO: This should be RecordNotFoundException\n            throw new IllegalArgumentException(\"Invalid user: \" + user);\n        }\n        return detectors;\n    }", "signature": "List<DetectorDocument> findByCreatedBy(@RequestParam String user)", "full_signature": "@GetMapping(path = \"/findByCreatedBy\", produces = \"application/json\") @ResponseStatus(HttpStatus.OK) public List<DetectorDocument> findByCreatedBy(@RequestParam String user)", "class_method_signature": "LegacyDetectorController.findByCreatedBy(@RequestParam String user)", "testcase": false, "constructor": false, "invocations": ["findByCreatedBy", "isEmpty"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}