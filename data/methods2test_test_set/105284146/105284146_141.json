{"test_class": {"identifier": "DenseMatrixTest", "superclass": "extends AbstractMatrixTest", "interfaces": "", "fields": [{"original_string": "private final MatrixFactory matrixFactory = new DenseMatrixFactory();", "modifier": "private final", "type": "MatrixFactory", "declarator": "matrixFactory = new DenseMatrixFactory()", "var_name": "matrixFactory"}, {"original_string": "private final MatrixFactory otherMatrixFactory = new SparseMatrixFactory();", "modifier": "private final", "type": "MatrixFactory", "declarator": "otherMatrixFactory = new SparseMatrixFactory()", "var_name": "otherMatrixFactory"}], "file": "math/src/test/java/com/powsybl/math/matrix/DenseMatrixTest.java"}, "test_case": {"identifier": "testDensePrintWithNames", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDensePrintWithNames() throws IOException {\n        Matrix a = createA(matrixFactory);\n        String expected = String.join(System.lineSeparator(),\n                \"     c1  c2\",\n                \" r1 1.0 0.0\",\n                \" r2 0.0 3.0\",\n                \" r3 2.0 0.0\")\n                + System.lineSeparator();\n        assertEquals(expected, print(a, ImmutableList.of(\"r1\", \"r2\", \"r3\"), ImmutableList.of(\"c1\", \"c2\")));\n    }", "signature": "void testDensePrintWithNames()", "full_signature": "@Test public void testDensePrintWithNames()", "class_method_signature": "DenseMatrixTest.testDensePrintWithNames()", "testcase": true, "constructor": false, "invocations": ["createA", "join", "lineSeparator", "lineSeparator", "assertEquals", "print", "of", "of"]}, "focal_class": {"identifier": "DenseMatrix", "superclass": "extends AbstractMatrix", "interfaces": "", "fields": [{"original_string": "private final int rowCount;", "modifier": "private final", "type": "int", "declarator": "rowCount", "var_name": "rowCount"}, {"original_string": "private final int columnCount;", "modifier": "private final", "type": "int", "declarator": "columnCount", "var_name": "columnCount"}, {"original_string": "private final ByteBuffer buffer;", "modifier": "private final", "type": "ByteBuffer", "declarator": "buffer", "var_name": "buffer"}], "methods": [{"identifier": "createBuffer", "parameters": "(int rowCount, int columnCount)", "modifiers": "private static", "return": "ByteBuffer", "signature": "ByteBuffer createBuffer(int rowCount, int columnCount)", "full_signature": "private static ByteBuffer createBuffer(int rowCount, int columnCount)", "class_method_signature": "DenseMatrix.createBuffer(int rowCount, int columnCount)", "testcase": false, "constructor": false}, {"identifier": "DenseMatrix", "parameters": "(int rowCount, int columnCount, double[] values)", "modifiers": "public", "return": "", "signature": " DenseMatrix(int rowCount, int columnCount, double[] values)", "full_signature": "public  DenseMatrix(int rowCount, int columnCount, double[] values)", "class_method_signature": "DenseMatrix.DenseMatrix(int rowCount, int columnCount, double[] values)", "testcase": false, "constructor": true}, {"identifier": "DenseMatrix", "parameters": "(int rowCount, int columnCount)", "modifiers": "public", "return": "", "signature": " DenseMatrix(int rowCount, int columnCount)", "full_signature": "public  DenseMatrix(int rowCount, int columnCount)", "class_method_signature": "DenseMatrix.DenseMatrix(int rowCount, int columnCount)", "testcase": false, "constructor": true}, {"identifier": "DenseMatrix", "parameters": "(int rowCount, int columnCount, Supplier<ByteBuffer> bufferSupplier)", "modifiers": "public", "return": "", "signature": " DenseMatrix(int rowCount, int columnCount, Supplier<ByteBuffer> bufferSupplier)", "full_signature": "public  DenseMatrix(int rowCount, int columnCount, Supplier<ByteBuffer> bufferSupplier)", "class_method_signature": "DenseMatrix.DenseMatrix(int rowCount, int columnCount, Supplier<ByteBuffer> bufferSupplier)", "testcase": false, "constructor": true}, {"identifier": "DenseMatrix", "parameters": "(Jama.Matrix matrix)", "modifiers": "public", "return": "", "signature": " DenseMatrix(Jama.Matrix matrix)", "full_signature": "public  DenseMatrix(Jama.Matrix matrix)", "class_method_signature": "DenseMatrix.DenseMatrix(Jama.Matrix matrix)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "(int i, int j)", "modifiers": "public", "return": "double", "signature": "double get(int i, int j)", "full_signature": "public double get(int i, int j)", "class_method_signature": "DenseMatrix.get(int i, int j)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(int i, int j)", "modifiers": "@Deprecated public", "return": "double", "signature": "double getValue(int i, int j)", "full_signature": "@Deprecated public double getValue(int i, int j)", "class_method_signature": "DenseMatrix.getValue(int i, int j)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int i, int j, double value)", "modifiers": "@Override public", "return": "void", "signature": "void set(int i, int j, double value)", "full_signature": "@Override public void set(int i, int j, double value)", "class_method_signature": "DenseMatrix.set(int i, int j, double value)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(int i, int j, double value)", "modifiers": "@Override public", "return": "void", "signature": "void add(int i, int j, double value)", "full_signature": "@Override public void add(int i, int j, double value)", "class_method_signature": "DenseMatrix.add(int i, int j, double value)", "testcase": false, "constructor": false}, {"identifier": "addAndGetElement", "parameters": "(int i, int j, double value)", "modifiers": "@Override public", "return": "Element", "signature": "Element addAndGetElement(int i, int j, double value)", "full_signature": "@Override public Element addAndGetElement(int i, int j, double value)", "class_method_signature": "DenseMatrix.addAndGetElement(int i, int j, double value)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void reset()", "full_signature": "@Override public void reset()", "class_method_signature": "DenseMatrix.reset()", "testcase": false, "constructor": false}, {"identifier": "getRowCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getRowCount()", "full_signature": "@Override public int getRowCount()", "class_method_signature": "DenseMatrix.getRowCount()", "testcase": false, "constructor": false}, {"identifier": "getColumnCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getColumnCount()", "full_signature": "@Override public int getColumnCount()", "class_method_signature": "DenseMatrix.getColumnCount()", "testcase": false, "constructor": false}, {"identifier": "getBuffer", "parameters": "()", "modifiers": "", "return": "ByteBuffer", "signature": "ByteBuffer getBuffer()", "full_signature": " ByteBuffer getBuffer()", "class_method_signature": "DenseMatrix.getBuffer()", "testcase": false, "constructor": false}, {"identifier": "setValues", "parameters": "(double[] values)", "modifiers": "", "return": "void", "signature": "void setValues(double[] values)", "full_signature": " void setValues(double[] values)", "class_method_signature": "DenseMatrix.setValues(double[] values)", "testcase": false, "constructor": false}, {"identifier": "getValuesCopy", "parameters": "()", "modifiers": "private", "return": "double[]", "signature": "double[] getValuesCopy()", "full_signature": "private double[] getValuesCopy()", "class_method_signature": "DenseMatrix.getValuesCopy()", "testcase": false, "constructor": false}, {"identifier": "toJamaMatrix", "parameters": "()", "modifiers": "", "return": "Jama.Matrix", "signature": "Jama.Matrix toJamaMatrix()", "full_signature": " Jama.Matrix toJamaMatrix()", "class_method_signature": "DenseMatrix.toJamaMatrix()", "testcase": false, "constructor": false}, {"identifier": "decomposeLU", "parameters": "()", "modifiers": "@Override public", "return": "LUDecomposition", "signature": "LUDecomposition decomposeLU()", "full_signature": "@Override public LUDecomposition decomposeLU()", "class_method_signature": "DenseMatrix.decomposeLU()", "testcase": false, "constructor": false}, {"identifier": "times", "parameters": "(Matrix other)", "modifiers": "@Override public", "return": "Matrix", "signature": "Matrix times(Matrix other)", "full_signature": "@Override public Matrix times(Matrix other)", "class_method_signature": "DenseMatrix.times(Matrix other)", "testcase": false, "constructor": false}, {"identifier": "iterateNonZeroValue", "parameters": "(ElementHandler handler)", "modifiers": "@Override public", "return": "void", "signature": "void iterateNonZeroValue(ElementHandler handler)", "full_signature": "@Override public void iterateNonZeroValue(ElementHandler handler)", "class_method_signature": "DenseMatrix.iterateNonZeroValue(ElementHandler handler)", "testcase": false, "constructor": false}, {"identifier": "iterateNonZeroValueOfColumn", "parameters": "(int j, ElementHandler handler)", "modifiers": "@Override public", "return": "void", "signature": "void iterateNonZeroValueOfColumn(int j, ElementHandler handler)", "full_signature": "@Override public void iterateNonZeroValueOfColumn(int j, ElementHandler handler)", "class_method_signature": "DenseMatrix.iterateNonZeroValueOfColumn(int j, ElementHandler handler)", "testcase": false, "constructor": false}, {"identifier": "toDense", "parameters": "()", "modifiers": "@Override public", "return": "DenseMatrix", "signature": "DenseMatrix toDense()", "full_signature": "@Override public DenseMatrix toDense()", "class_method_signature": "DenseMatrix.toDense()", "testcase": false, "constructor": false}, {"identifier": "toSparse", "parameters": "()", "modifiers": "@Override public", "return": "SparseMatrix", "signature": "SparseMatrix toSparse()", "full_signature": "@Override public SparseMatrix toSparse()", "class_method_signature": "DenseMatrix.toSparse()", "testcase": false, "constructor": false}, {"identifier": "to", "parameters": "(MatrixFactory factory)", "modifiers": "@Override public", "return": "Matrix", "signature": "Matrix to(MatrixFactory factory)", "full_signature": "@Override public Matrix to(MatrixFactory factory)", "class_method_signature": "DenseMatrix.to(MatrixFactory factory)", "testcase": false, "constructor": false}, {"identifier": "getEstimatedNonZeroValueCount", "parameters": "()", "modifiers": "@Override protected", "return": "int", "signature": "int getEstimatedNonZeroValueCount()", "full_signature": "@Override protected int getEstimatedNonZeroValueCount()", "class_method_signature": "DenseMatrix.getEstimatedNonZeroValueCount()", "testcase": false, "constructor": false}, {"identifier": "print", "parameters": "(PrintStream out)", "modifiers": "@Override public", "return": "void", "signature": "void print(PrintStream out)", "full_signature": "@Override public void print(PrintStream out)", "class_method_signature": "DenseMatrix.print(PrintStream out)", "testcase": false, "constructor": false}, {"identifier": "print", "parameters": "(PrintStream out, List<String> rowNames, List<String> columnNames)", "modifiers": "@Override public", "return": "void", "signature": "void print(PrintStream out, List<String> rowNames, List<String> columnNames)", "full_signature": "@Override public void print(PrintStream out, List<String> rowNames, List<String> columnNames)", "class_method_signature": "DenseMatrix.print(PrintStream out, List<String> rowNames, List<String> columnNames)", "testcase": false, "constructor": false}, {"identifier": "getMaxWidthAmongRowNames", "parameters": "(List<String> rowNames)", "modifiers": "private", "return": "int", "signature": "int getMaxWidthAmongRowNames(List<String> rowNames)", "full_signature": "private int getMaxWidthAmongRowNames(List<String> rowNames)", "class_method_signature": "DenseMatrix.getMaxWidthAmongRowNames(List<String> rowNames)", "testcase": false, "constructor": false}, {"identifier": "getMaxWidthForEachColumn", "parameters": "(List<String> columnNames)", "modifiers": "private", "return": "int[]", "signature": "int[] getMaxWidthForEachColumn(List<String> columnNames)", "full_signature": "private int[] getMaxWidthForEachColumn(List<String> columnNames)", "class_method_signature": "DenseMatrix.getMaxWidthForEachColumn(List<String> columnNames)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DenseMatrix.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "DenseMatrix.equals(Object obj)", "testcase": false, "constructor": false}], "file": "math/src/main/java/com/powsybl/math/matrix/DenseMatrix.java"}, "focal_method": {"identifier": "print", "parameters": "(PrintStream out)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void print(PrintStream out) {\n        print(out, null, null);\n    }", "signature": "void print(PrintStream out)", "full_signature": "@Override public void print(PrintStream out)", "class_method_signature": "DenseMatrix.print(PrintStream out)", "testcase": false, "constructor": false, "invocations": ["print"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}