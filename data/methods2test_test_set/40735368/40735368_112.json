{"test_class": {"identifier": "ArcSDEJNDIDataStoreFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = Logging.getLogger(\"org.geotools.arcsde\");", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logging.getLogger(\"org.geotools.arcsde\")", "var_name": "LOGGER"}, {"original_string": "private static ArcSDEJNDIDataStoreFactory factory;", "modifier": "private static", "type": "ArcSDEJNDIDataStoreFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "private static TestData testData;", "modifier": "private static", "type": "TestData", "declarator": "testData", "var_name": "testData"}], "file": "modules/plugin/arcsde/datastore/src/test/java/org/geotools/arcsde/ArcSDEJNDIDataStoreFactoryTest.java"}, "test_case": {"identifier": "testCreateDataStore_MapParams", "parameters": "()", "modifiers": "@Test @Ignore//TODO: revisit public", "return": "void", "body": "@Test\n    @Ignore//TODO: revisit\n    public void testCreateDataStore_MapParams() throws IOException {\n        String jndiRef = \"MyArcSdeResource\";\n        Map<String, Serializable> params = new HashMap<String, Serializable>();\n        params.put(ArcSDEJNDIDataStoreFactory.JNDI_REFNAME.key, jndiRef);\n\n        Map<String, Serializable> config = testData.getConProps();\n        try {\n            InitialContext initialContext = GeoTools.getInitialContext(GeoTools.getDefaultHints());\n            initialContext.bind(jndiRef, config);\n            assertNotNull(initialContext.lookup(jndiRef));\n        } catch (NamingException e) {\n            throw new RuntimeException(e);\n        }\n\n        ArcSDEDataStore dataStore = (ArcSDEDataStore) factory.createDataStore(params);\n        assertNotNull(dataStore);\n        ISession session = dataStore.getSession(Transaction.AUTO_COMMIT);\n        assertNotNull(session);\n        try {\n            assertEquals(String.valueOf(config.get(\"user\")).toUpperCase(), session.getUser()\n                    .toUpperCase());\n        } finally {\n            session.dispose();\n        }\n    }", "signature": "void testCreateDataStore_MapParams()", "full_signature": "@Test @Ignore//TODO: revisit public void testCreateDataStore_MapParams()", "class_method_signature": "ArcSDEJNDIDataStoreFactoryTest.testCreateDataStore_MapParams()", "testcase": true, "constructor": false, "invocations": ["put", "getConProps", "getInitialContext", "getDefaultHints", "bind", "assertNotNull", "lookup", "createDataStore", "assertNotNull", "getSession", "assertNotNull", "assertEquals", "toUpperCase", "valueOf", "get", "toUpperCase", "getUser", "dispose"]}, "focal_class": {"identifier": "ArcSDEJNDIDataStoreFactory", "superclass": "", "interfaces": "implements DataStoreFactorySpi", "fields": [{"original_string": "private static final Logger LOGGER = Logging.getLogger(\"org.geotools.arcsde\");", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logging.getLogger(\"org.geotools.arcsde\")", "var_name": "LOGGER"}, {"original_string": "private final ArcSDEDataStoreFactory delegateFactory;", "modifier": "private final", "type": "ArcSDEDataStoreFactory", "declarator": "delegateFactory", "var_name": "delegateFactory"}, {"original_string": "public static final Param JNDI_REFNAME = new Param(\"ArcSDE_jndiReferenceName\", String.class,\n            \"JNDI context path\", true, \"java:comp/env/geotools/arcsde\");", "modifier": "public static final", "type": "Param", "declarator": "JNDI_REFNAME = new Param(\"ArcSDE_jndiReferenceName\", String.class,\n            \"JNDI context path\", true, \"java:comp/env/geotools/arcsde\")", "var_name": "JNDI_REFNAME"}, {"original_string": "private static final String J2EE_ROOT_CONTEXT = \"java:comp/env/\";", "modifier": "private static final", "type": "String", "declarator": "J2EE_ROOT_CONTEXT = \"java:comp/env/\"", "var_name": "J2EE_ROOT_CONTEXT"}], "methods": [{"identifier": "ArcSDEJNDIDataStoreFactory", "parameters": "()", "modifiers": "public", "return": "", "signature": " ArcSDEJNDIDataStoreFactory()", "full_signature": "public  ArcSDEJNDIDataStoreFactory()", "class_method_signature": "ArcSDEJNDIDataStoreFactory.ArcSDEJNDIDataStoreFactory()", "testcase": false, "constructor": true}, {"identifier": "createDataStore", "parameters": "(Map<String, Serializable> params)", "modifiers": "public", "return": "DataStore", "signature": "DataStore createDataStore(Map<String, Serializable> params)", "full_signature": "public DataStore createDataStore(Map<String, Serializable> params)", "class_method_signature": "ArcSDEJNDIDataStoreFactory.createDataStore(Map<String, Serializable> params)", "testcase": false, "constructor": false}, {"identifier": "getSessionPool", "parameters": "(final String jndiName, final Object lookup)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "ISessionPool", "signature": "ISessionPool getSessionPool(final String jndiName, final Object lookup)", "full_signature": "@SuppressWarnings(\"unchecked\") private ISessionPool getSessionPool(final String jndiName, final Object lookup)", "class_method_signature": "ArcSDEJNDIDataStoreFactory.getSessionPool(final String jndiName, final Object lookup)", "testcase": false, "constructor": false}, {"identifier": "lookupJndiResource", "parameters": "(final String jndiName)", "modifiers": "private", "return": "Object", "signature": "Object lookupJndiResource(final String jndiName)", "full_signature": "private Object lookupJndiResource(final String jndiName)", "class_method_signature": "ArcSDEJNDIDataStoreFactory.lookupJndiResource(final String jndiName)", "testcase": false, "constructor": false}, {"identifier": "canProcess", "parameters": "(Map<String, Serializable> params)", "modifiers": "public", "return": "boolean", "signature": "boolean canProcess(Map<String, Serializable> params)", "full_signature": "public boolean canProcess(Map<String, Serializable> params)", "class_method_signature": "ArcSDEJNDIDataStoreFactory.canProcess(Map<String, Serializable> params)", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDescription()", "full_signature": "public String getDescription()", "class_method_signature": "ArcSDEJNDIDataStoreFactory.getDescription()", "testcase": false, "constructor": false}, {"identifier": "getDisplayName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDisplayName()", "full_signature": "public String getDisplayName()", "class_method_signature": "ArcSDEJNDIDataStoreFactory.getDisplayName()", "testcase": false, "constructor": false}, {"identifier": "getParametersInfo", "parameters": "()", "modifiers": "public", "return": "Param[]", "signature": "Param[] getParametersInfo()", "full_signature": "public Param[] getParametersInfo()", "class_method_signature": "ArcSDEJNDIDataStoreFactory.getParametersInfo()", "testcase": false, "constructor": false}, {"identifier": "isAvailable", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAvailable()", "full_signature": "public boolean isAvailable()", "class_method_signature": "ArcSDEJNDIDataStoreFactory.isAvailable()", "testcase": false, "constructor": false}, {"identifier": "getImplementationHints", "parameters": "()", "modifiers": "public", "return": "Map<Key, ?>", "signature": "Map<Key, ?> getImplementationHints()", "full_signature": "public Map<Key, ?> getImplementationHints()", "class_method_signature": "ArcSDEJNDIDataStoreFactory.getImplementationHints()", "testcase": false, "constructor": false}, {"identifier": "createNewDataStore", "parameters": "(Map<String, Serializable> params)", "modifiers": "public", "return": "DataStore", "signature": "DataStore createNewDataStore(Map<String, Serializable> params)", "full_signature": "public DataStore createNewDataStore(Map<String, Serializable> params)", "class_method_signature": "ArcSDEJNDIDataStoreFactory.createNewDataStore(Map<String, Serializable> params)", "testcase": false, "constructor": false}], "file": "modules/plugin/arcsde/datastore/src/main/java/org/geotools/arcsde/ArcSDEJNDIDataStoreFactory.java"}, "focal_method": {"identifier": "createDataStore", "parameters": "(Map<String, Serializable> params)", "modifiers": "public", "return": "DataStore", "body": "public DataStore createDataStore(Map<String, Serializable> params) throws IOException {\n        final String jndiName = (String) JNDI_REFNAME.lookUp(params);\n\n        final Object lookup = lookupJndiResource(jndiName);\n\n        final ISessionPool sessionPool = getSessionPool(jndiName, lookup);\n\n        final String nsUri = (String) NAMESPACE_PARAM.lookUp(params);\n        final String version = (String) VERSION_PARAM.lookUp(params);\n        final boolean nonSpatial;\n        {\n            final Boolean allowNonSpatialTables = (Boolean) ALLOW_NON_SPATIAL_PARAM.lookUp(params);\n            nonSpatial = allowNonSpatialTables == null ? false : allowNonSpatialTables\n                    .booleanValue();\n        }\n\n        final ArcSDEConnectionConfig connectionConfig = sessionPool.getConfig();\n        final ArcSDEDataStoreConfig dsConfig;\n        dsConfig = new ArcSDEDataStoreConfig(connectionConfig, nsUri, version, nonSpatial);\n\n        LOGGER.info(\"Creating ArcSDE JNDI DataStore with shared session pool for \" + dsConfig);\n        final ArcSDEDataStore dataStore = delegateFactory.createDataStore(dsConfig, sessionPool);\n\n        return dataStore;\n    }", "signature": "DataStore createDataStore(Map<String, Serializable> params)", "full_signature": "public DataStore createDataStore(Map<String, Serializable> params)", "class_method_signature": "ArcSDEJNDIDataStoreFactory.createDataStore(Map<String, Serializable> params)", "testcase": false, "constructor": false, "invocations": ["lookUp", "lookupJndiResource", "getSessionPool", "lookUp", "lookUp", "lookUp", "booleanValue", "getConfig", "info", "createDataStore"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}