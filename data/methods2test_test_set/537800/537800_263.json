{"test_class": {"identifier": "HealthCheckServletTest", "superclass": "extends AbstractServletTest", "interfaces": "", "fields": [{"original_string": "private static final ZonedDateTime FIXED_TIME = ZonedDateTime.now();", "modifier": "private static final", "type": "ZonedDateTime", "declarator": "FIXED_TIME = ZonedDateTime.now()", "var_name": "FIXED_TIME"}, {"original_string": "private static final DateTimeFormatter DATE_TIME_FORMATTER =\n            DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\");", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "DATE_TIME_FORMATTER =\n            DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\")", "var_name": "DATE_TIME_FORMATTER"}, {"original_string": "private static final String EXPECTED_TIMESTAMP = DATE_TIME_FORMATTER.format(FIXED_TIME);", "modifier": "private static final", "type": "String", "declarator": "EXPECTED_TIMESTAMP = DATE_TIME_FORMATTER.format(FIXED_TIME)", "var_name": "EXPECTED_TIMESTAMP"}, {"original_string": "private static final Clock FIXED_CLOCK = new Clock() {\n        @Override\n        public long getTick() {\n            return 0L;\n        }\n\n        @Override\n        public long getTime() {\n            return FIXED_TIME.toInstant().toEpochMilli();\n        }\n    };", "modifier": "private static final", "type": "Clock", "declarator": "FIXED_CLOCK = new Clock() {\n        @Override\n        public long getTick() {\n            return 0L;\n        }\n\n        @Override\n        public long getTime() {\n            return FIXED_TIME.toInstant().toEpochMilli();\n        }\n    }", "var_name": "FIXED_CLOCK"}, {"original_string": "private final HealthCheckRegistry registry = new HealthCheckRegistry();", "modifier": "private final", "type": "HealthCheckRegistry", "declarator": "registry = new HealthCheckRegistry()", "var_name": "registry"}, {"original_string": "private final ExecutorService threadPool = Executors.newCachedThreadPool();", "modifier": "private final", "type": "ExecutorService", "declarator": "threadPool = Executors.newCachedThreadPool()", "var_name": "threadPool"}], "file": "metrics-servlets/src/test/java/com/codahale/metrics/servlets/HealthCheckServletTest.java"}, "test_case": {"identifier": "constructorWithRegistryAsArgumentUsesServletConfigWhenNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void constructorWithRegistryAsArgumentUsesServletConfigWhenNull() throws Exception {\n        final HealthCheckRegistry healthCheckRegistry = mock(HealthCheckRegistry.class);\n        final ServletContext servletContext = mock(ServletContext.class);\n        final ServletConfig servletConfig = mock(ServletConfig.class);\n        when(servletConfig.getServletContext()).thenReturn(servletContext);\n        when(servletContext.getAttribute(eq(HealthCheckServlet.HEALTH_CHECK_REGISTRY)))\n                .thenReturn(healthCheckRegistry);\n\n        final HealthCheckServlet healthCheckServlet = new HealthCheckServlet(null);\n        healthCheckServlet.init(servletConfig);\n\n        verify(servletConfig, times(1)).getServletContext();\n        verify(servletContext, times(1)).getAttribute(eq(HealthCheckServlet.HEALTH_CHECK_REGISTRY));\n    }", "signature": "void constructorWithRegistryAsArgumentUsesServletConfigWhenNull()", "full_signature": "@Test public void constructorWithRegistryAsArgumentUsesServletConfigWhenNull()", "class_method_signature": "HealthCheckServletTest.constructorWithRegistryAsArgumentUsesServletConfigWhenNull()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "thenReturn", "when", "getServletContext", "thenReturn", "when", "getAttribute", "eq", "init", "getServletContext", "verify", "times", "getAttribute", "verify", "times", "eq"]}, "focal_class": {"identifier": "HealthCheckServlet", "superclass": "extends HttpServlet", "interfaces": "", "fields": [{"original_string": "public static final String HEALTH_CHECK_REGISTRY = HealthCheckServlet.class.getCanonicalName() + \".registry\";", "modifier": "public static final", "type": "String", "declarator": "HEALTH_CHECK_REGISTRY = HealthCheckServlet.class.getCanonicalName() + \".registry\"", "var_name": "HEALTH_CHECK_REGISTRY"}, {"original_string": "public static final String HEALTH_CHECK_EXECUTOR = HealthCheckServlet.class.getCanonicalName() + \".executor\";", "modifier": "public static final", "type": "String", "declarator": "HEALTH_CHECK_EXECUTOR = HealthCheckServlet.class.getCanonicalName() + \".executor\"", "var_name": "HEALTH_CHECK_EXECUTOR"}, {"original_string": "public static final String HEALTH_CHECK_FILTER = HealthCheckServlet.class.getCanonicalName() + \".healthCheckFilter\";", "modifier": "public static final", "type": "String", "declarator": "HEALTH_CHECK_FILTER = HealthCheckServlet.class.getCanonicalName() + \".healthCheckFilter\"", "var_name": "HEALTH_CHECK_FILTER"}, {"original_string": "private static final long serialVersionUID = -8432996484889177321L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -8432996484889177321L", "var_name": "serialVersionUID"}, {"original_string": "private static final String CONTENT_TYPE = \"application/json\";", "modifier": "private static final", "type": "String", "declarator": "CONTENT_TYPE = \"application/json\"", "var_name": "CONTENT_TYPE"}, {"original_string": "private transient HealthCheckRegistry registry;", "modifier": "private transient", "type": "HealthCheckRegistry", "declarator": "registry", "var_name": "registry"}, {"original_string": "private transient ExecutorService executorService;", "modifier": "private transient", "type": "ExecutorService", "declarator": "executorService", "var_name": "executorService"}, {"original_string": "private transient HealthCheckFilter filter;", "modifier": "private transient", "type": "HealthCheckFilter", "declarator": "filter", "var_name": "filter"}, {"original_string": "private transient ObjectMapper mapper;", "modifier": "private transient", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}], "methods": [{"identifier": "HealthCheckServlet", "parameters": "()", "modifiers": "public", "return": "", "signature": " HealthCheckServlet()", "full_signature": "public  HealthCheckServlet()", "class_method_signature": "HealthCheckServlet.HealthCheckServlet()", "testcase": false, "constructor": true}, {"identifier": "HealthCheckServlet", "parameters": "(HealthCheckRegistry registry)", "modifiers": "public", "return": "", "signature": " HealthCheckServlet(HealthCheckRegistry registry)", "full_signature": "public  HealthCheckServlet(HealthCheckRegistry registry)", "class_method_signature": "HealthCheckServlet.HealthCheckServlet(HealthCheckRegistry registry)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(ServletConfig config)", "modifiers": "@Override public", "return": "void", "signature": "void init(ServletConfig config)", "full_signature": "@Override public void init(ServletConfig config)", "class_method_signature": "HealthCheckServlet.init(ServletConfig config)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "HealthCheckServlet.destroy()", "testcase": false, "constructor": false}, {"identifier": "doGet", "parameters": "(HttpServletRequest req,\n                         HttpServletResponse resp)", "modifiers": "@Override protected", "return": "void", "signature": "void doGet(HttpServletRequest req,\n                         HttpServletResponse resp)", "full_signature": "@Override protected void doGet(HttpServletRequest req,\n                         HttpServletResponse resp)", "class_method_signature": "HealthCheckServlet.doGet(HttpServletRequest req,\n                         HttpServletResponse resp)", "testcase": false, "constructor": false}, {"identifier": "getWriter", "parameters": "(HttpServletRequest request)", "modifiers": "private", "return": "ObjectWriter", "signature": "ObjectWriter getWriter(HttpServletRequest request)", "full_signature": "private ObjectWriter getWriter(HttpServletRequest request)", "class_method_signature": "HealthCheckServlet.getWriter(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "runHealthChecks", "parameters": "()", "modifiers": "private", "return": "SortedMap<String, HealthCheck.Result>", "signature": "SortedMap<String, HealthCheck.Result> runHealthChecks()", "full_signature": "private SortedMap<String, HealthCheck.Result> runHealthChecks()", "class_method_signature": "HealthCheckServlet.runHealthChecks()", "testcase": false, "constructor": false}, {"identifier": "isAllHealthy", "parameters": "(Map<String, HealthCheck.Result> results)", "modifiers": "private static", "return": "boolean", "signature": "boolean isAllHealthy(Map<String, HealthCheck.Result> results)", "full_signature": "private static boolean isAllHealthy(Map<String, HealthCheck.Result> results)", "class_method_signature": "HealthCheckServlet.isAllHealthy(Map<String, HealthCheck.Result> results)", "testcase": false, "constructor": false}], "file": "metrics-servlets/src/main/java/com/codahale/metrics/servlets/HealthCheckServlet.java"}, "focal_method": {"identifier": "init", "parameters": "(ServletConfig config)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void init(ServletConfig config) throws ServletException {\n        super.init(config);\n\n        final ServletContext context = config.getServletContext();\n        if (null == registry) {\n            final Object registryAttr = context.getAttribute(HEALTH_CHECK_REGISTRY);\n            if (registryAttr instanceof HealthCheckRegistry) {\n                this.registry = (HealthCheckRegistry) registryAttr;\n            } else {\n                throw new ServletException(\"Couldn't find a HealthCheckRegistry instance.\");\n            }\n        }\n\n        final Object executorAttr = context.getAttribute(HEALTH_CHECK_EXECUTOR);\n        if (executorAttr instanceof ExecutorService) {\n            this.executorService = (ExecutorService) executorAttr;\n        }\n\n\n        final Object filterAttr = context.getAttribute(HEALTH_CHECK_FILTER);\n        if (filterAttr instanceof HealthCheckFilter) {\n            filter = (HealthCheckFilter) filterAttr;\n        }\n        if (filter == null) {\n            filter = HealthCheckFilter.ALL;\n        }\n\n        this.mapper = new ObjectMapper().registerModule(new HealthCheckModule());\n    }", "signature": "void init(ServletConfig config)", "full_signature": "@Override public void init(ServletConfig config)", "class_method_signature": "HealthCheckServlet.init(ServletConfig config)", "testcase": false, "constructor": false, "invocations": ["init", "getServletContext", "getAttribute", "getAttribute", "getAttribute", "registerModule"]}, "repository": {"repo_id": 537800, "url": "https://github.com/dropwizard/metrics", "stars": 6879, "created": "2/26/2010 7:44:42 PM +00:00", "updates": "2020-01-26T22:33:14+00:00", "fork": "False", "license": "licensed"}}