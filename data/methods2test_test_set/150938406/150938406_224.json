{"test_class": {"identifier": "MatVecOpTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double TOL = 1.0e-6;", "modifier": "private static final", "type": "double", "declarator": "TOL = 1.0e-6", "var_name": "TOL"}, {"original_string": "private DenseVector dv;", "modifier": "private", "type": "DenseVector", "declarator": "dv", "var_name": "dv"}, {"original_string": "private SparseVector sv;", "modifier": "private", "type": "SparseVector", "declarator": "sv", "var_name": "sv"}], "file": "core/src/test/java/com/alibaba/alink/common/linalg/MatVecOpTest.java"}, "test_case": {"identifier": "testPlus", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPlus() throws Exception {\n        Vector plusResult1 = MatVecOp.plus(dv, sv);\n        Vector plusResult2 = MatVecOp.plus(sv, dv);\n        Vector plusResult3 = MatVecOp.plus(sv, sv);\n        Vector plusResult4 = MatVecOp.plus(dv, dv);\n        Assert.assertTrue(plusResult1 instanceof DenseVector);\n        Assert.assertTrue(plusResult2 instanceof DenseVector);\n        Assert.assertTrue(plusResult3 instanceof SparseVector);\n        Assert.assertTrue(plusResult4 instanceof DenseVector);\n        Assert.assertArrayEquals(((DenseVector) plusResult1).getData(), new double[]{2, 2, 4, 4}, TOL);\n        Assert.assertArrayEquals(((DenseVector) plusResult2).getData(), new double[]{2, 2, 4, 4}, TOL);\n        Assert.assertArrayEquals(((SparseVector) plusResult3).getIndices(), new int[]{0, 2});\n        Assert.assertArrayEquals(((SparseVector) plusResult3).getValues(), new double[]{2., 2.}, TOL);\n        Assert.assertArrayEquals(((DenseVector) plusResult4).getData(), new double[]{2, 4, 6, 8}, TOL);\n    }", "signature": "void testPlus()", "full_signature": "@Test public void testPlus()", "class_method_signature": "MatVecOpTest.testPlus()", "testcase": true, "constructor": false, "invocations": ["plus", "plus", "plus", "plus", "assertTrue", "assertTrue", "assertTrue", "assertTrue", "assertArrayEquals", "getData", "assertArrayEquals", "getData", "assertArrayEquals", "getIndices", "assertArrayEquals", "getValues", "assertArrayEquals", "getData"]}, "focal_class": {"identifier": "MatVecOp", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "plus", "parameters": "(Vector vec1, Vector vec2)", "modifiers": "public static", "return": "Vector", "signature": "Vector plus(Vector vec1, Vector vec2)", "full_signature": "public static Vector plus(Vector vec1, Vector vec2)", "class_method_signature": "MatVecOp.plus(Vector vec1, Vector vec2)", "testcase": false, "constructor": false}, {"identifier": "minus", "parameters": "(Vector vec1, Vector vec2)", "modifiers": "public static", "return": "Vector", "signature": "Vector minus(Vector vec1, Vector vec2)", "full_signature": "public static Vector minus(Vector vec1, Vector vec2)", "class_method_signature": "MatVecOp.minus(Vector vec1, Vector vec2)", "testcase": false, "constructor": false}, {"identifier": "dot", "parameters": "(Vector vec1, Vector vec2)", "modifiers": "public static", "return": "double", "signature": "double dot(Vector vec1, Vector vec2)", "full_signature": "public static double dot(Vector vec1, Vector vec2)", "class_method_signature": "MatVecOp.dot(Vector vec1, Vector vec2)", "testcase": false, "constructor": false}, {"identifier": "sumAbsDiff", "parameters": "(Vector vec1, Vector vec2)", "modifiers": "public static", "return": "double", "signature": "double sumAbsDiff(Vector vec1, Vector vec2)", "full_signature": "public static double sumAbsDiff(Vector vec1, Vector vec2)", "class_method_signature": "MatVecOp.sumAbsDiff(Vector vec1, Vector vec2)", "testcase": false, "constructor": false}, {"identifier": "sumSquaredDiff", "parameters": "(Vector vec1, Vector vec2)", "modifiers": "public static", "return": "double", "signature": "double sumSquaredDiff(Vector vec1, Vector vec2)", "full_signature": "public static double sumSquaredDiff(Vector vec1, Vector vec2)", "class_method_signature": "MatVecOp.sumSquaredDiff(Vector vec1, Vector vec2)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(DenseMatrix x, DenseMatrix y, Function<Double, Double> func)", "modifiers": "public static", "return": "void", "signature": "void apply(DenseMatrix x, DenseMatrix y, Function<Double, Double> func)", "full_signature": "public static void apply(DenseMatrix x, DenseMatrix y, Function<Double, Double> func)", "class_method_signature": "MatVecOp.apply(DenseMatrix x, DenseMatrix y, Function<Double, Double> func)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(DenseMatrix x1, DenseMatrix x2, DenseMatrix y,\n                             BiFunction<Double, Double, Double> func)", "modifiers": "public static", "return": "void", "signature": "void apply(DenseMatrix x1, DenseMatrix x2, DenseMatrix y,\n                             BiFunction<Double, Double, Double> func)", "full_signature": "public static void apply(DenseMatrix x1, DenseMatrix x2, DenseMatrix y,\n                             BiFunction<Double, Double, Double> func)", "class_method_signature": "MatVecOp.apply(DenseMatrix x1, DenseMatrix x2, DenseMatrix y,\n                             BiFunction<Double, Double, Double> func)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(DenseVector x, DenseVector y, Function<Double, Double> func)", "modifiers": "public static", "return": "void", "signature": "void apply(DenseVector x, DenseVector y, Function<Double, Double> func)", "full_signature": "public static void apply(DenseVector x, DenseVector y, Function<Double, Double> func)", "class_method_signature": "MatVecOp.apply(DenseVector x, DenseVector y, Function<Double, Double> func)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(DenseVector x1, DenseVector x2, DenseVector y,\n                             BiFunction<Double, Double, Double> func)", "modifiers": "public static", "return": "void", "signature": "void apply(DenseVector x1, DenseVector x2, DenseVector y,\n                             BiFunction<Double, Double, Double> func)", "full_signature": "public static void apply(DenseVector x1, DenseVector x2, DenseVector y,\n                             BiFunction<Double, Double, Double> func)", "class_method_signature": "MatVecOp.apply(DenseVector x1, DenseVector x2, DenseVector y,\n                             BiFunction<Double, Double, Double> func)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(SparseVector x1, SparseVector x2, BiFunction<Double, Double, Double> func)", "modifiers": "public static", "return": "SparseVector", "signature": "SparseVector apply(SparseVector x1, SparseVector x2, BiFunction<Double, Double, Double> func)", "full_signature": "public static SparseVector apply(SparseVector x1, SparseVector x2, BiFunction<Double, Double, Double> func)", "class_method_signature": "MatVecOp.apply(SparseVector x1, SparseVector x2, BiFunction<Double, Double, Double> func)", "testcase": false, "constructor": false}, {"identifier": "applySum", "parameters": "(DenseVector x1, DenseVector x2, BiFunction<Double, Double, Double> func)", "modifiers": "public static", "return": "double", "signature": "double applySum(DenseVector x1, DenseVector x2, BiFunction<Double, Double, Double> func)", "full_signature": "public static double applySum(DenseVector x1, DenseVector x2, BiFunction<Double, Double, Double> func)", "class_method_signature": "MatVecOp.applySum(DenseVector x1, DenseVector x2, BiFunction<Double, Double, Double> func)", "testcase": false, "constructor": false}, {"identifier": "applySum", "parameters": "(SparseVector x1, SparseVector x2, BiFunction<Double, Double, Double> func)", "modifiers": "public static", "return": "double", "signature": "double applySum(SparseVector x1, SparseVector x2, BiFunction<Double, Double, Double> func)", "full_signature": "public static double applySum(SparseVector x1, SparseVector x2, BiFunction<Double, Double, Double> func)", "class_method_signature": "MatVecOp.applySum(SparseVector x1, SparseVector x2, BiFunction<Double, Double, Double> func)", "testcase": false, "constructor": false}, {"identifier": "applySum", "parameters": "(DenseVector x1, SparseVector x2, BiFunction<Double, Double, Double> func)", "modifiers": "public static", "return": "double", "signature": "double applySum(DenseVector x1, SparseVector x2, BiFunction<Double, Double, Double> func)", "full_signature": "public static double applySum(DenseVector x1, SparseVector x2, BiFunction<Double, Double, Double> func)", "class_method_signature": "MatVecOp.applySum(DenseVector x1, SparseVector x2, BiFunction<Double, Double, Double> func)", "testcase": false, "constructor": false}, {"identifier": "applySum", "parameters": "(SparseVector x1, DenseVector x2, BiFunction<Double, Double, Double> func)", "modifiers": "public static", "return": "double", "signature": "double applySum(SparseVector x1, DenseVector x2, BiFunction<Double, Double, Double> func)", "full_signature": "public static double applySum(SparseVector x1, DenseVector x2, BiFunction<Double, Double, Double> func)", "class_method_signature": "MatVecOp.applySum(SparseVector x1, DenseVector x2, BiFunction<Double, Double, Double> func)", "testcase": false, "constructor": false}, {"identifier": "applySum", "parameters": "(DenseMatrix x1, DenseMatrix x2, BiFunction<Double, Double, Double> func)", "modifiers": "public static", "return": "double", "signature": "double applySum(DenseMatrix x1, DenseMatrix x2, BiFunction<Double, Double, Double> func)", "full_signature": "public static double applySum(DenseMatrix x1, DenseMatrix x2, BiFunction<Double, Double, Double> func)", "class_method_signature": "MatVecOp.applySum(DenseMatrix x1, DenseMatrix x2, BiFunction<Double, Double, Double> func)", "testcase": false, "constructor": false}, {"identifier": "appendVectorToMatrix", "parameters": "(DenseMatrix matrix, boolean trans, int index, Vector vector)", "modifiers": "public static", "return": "void", "signature": "void appendVectorToMatrix(DenseMatrix matrix, boolean trans, int index, Vector vector)", "full_signature": "public static void appendVectorToMatrix(DenseMatrix matrix, boolean trans, int index, Vector vector)", "class_method_signature": "MatVecOp.appendVectorToMatrix(DenseMatrix matrix, boolean trans, int index, Vector vector)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/common/linalg/MatVecOp.java"}, "focal_method": {"identifier": "plus", "parameters": "(Vector vec1, Vector vec2)", "modifiers": "public static", "return": "Vector", "body": "public static Vector plus(Vector vec1, Vector vec2) {\n        return vec1.plus(vec2);\n    }", "signature": "Vector plus(Vector vec1, Vector vec2)", "full_signature": "public static Vector plus(Vector vec1, Vector vec2)", "class_method_signature": "MatVecOp.plus(Vector vec1, Vector vec2)", "testcase": false, "constructor": false, "invocations": ["plus"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}